=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405587.491 ops/s
# Warmup Iteration   2: 523517.930 ops/s
# Warmup Iteration   3: 649195.474 ops/s
# Warmup Iteration   4: 652872.735 ops/s
# Warmup Iteration   5: 654112.052 ops/s
# Warmup Iteration   6: 653927.115 ops/s
# Warmup Iteration   7: 648116.955 ops/s
# Warmup Iteration   8: 571054.275 ops/s
# Warmup Iteration   9: 628638.564 ops/s
# Warmup Iteration  10: 641464.523 ops/s
# Warmup Iteration  11: 654322.443 ops/s
# Warmup Iteration  12: 653811.022 ops/s
# Warmup Iteration  13: 653852.148 ops/s
# Warmup Iteration  14: 649250.801 ops/s
# Warmup Iteration  15: 655990.409 ops/s
# Warmup Iteration  16: 657398.382 ops/s
# Warmup Iteration  17: 673470.777 ops/s
# Warmup Iteration  18: 669307.002 ops/s
# Warmup Iteration  19: 680726.761 ops/s
# Warmup Iteration  20: 681558.124 ops/s
# Warmup Iteration  21: 681892.168 ops/s
# Warmup Iteration  22: 680747.581 ops/s
# Warmup Iteration  23: 674432.117 ops/s
# Warmup Iteration  24: 675398.473 ops/s
# Warmup Iteration  25: 677641.913 ops/s
# Warmup Iteration  26: 677675.005 ops/s
# Warmup Iteration  27: 674735.285 ops/s
# Warmup Iteration  28: 674906.209 ops/s
# Warmup Iteration  29: 679100.408 ops/s
# Warmup Iteration  30: 681175.143 ops/s
Iteration   1: 672189.494 ops/s
Iteration   2: 675062.348 ops/s
Iteration   3: 675779.549 ops/s
Iteration   4: 680524.615 ops/s
Iteration   5: 671903.671 ops/s
Iteration   6: 679170.331 ops/s
Iteration   7: 670196.510 ops/s
Iteration   8: 679370.654 ops/s
Iteration   9: 679484.582 ops/s
Iteration  10: 680491.843 ops/s
Iteration  11: 668446.929 ops/s
Iteration  12: 679566.094 ops/s
Iteration  13: 682072.486 ops/s
Iteration  14: 680969.987 ops/s
Iteration  15: 679907.126 ops/s
Iteration  16: 682082.015 ops/s
Iteration  17: 682598.245 ops/s
Iteration  18: 676841.216 ops/s
Iteration  19: 680247.640 ops/s
Iteration  20: 676933.397 ops/s
Iteration  21: 680761.411 ops/s
Iteration  22: 680606.913 ops/s
Iteration  23: 679493.213 ops/s
Iteration  24: 681125.066 ops/s
Iteration  25: 668142.157 ops/s
Iteration  26: 682482.642 ops/s
Iteration  27: 669509.814 ops/s
Iteration  28: 677714.530 ops/s
Iteration  29: 680339.039 ops/s
Iteration  30: 662536.665 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachOnRange":
  677218.339 ±(99.9%) 3450.764 ops/s [Average]
  (min, avg, max) = (662536.665, 677218.339, 682598.245), stdev = 5164.942
  CI (99.9%): [673767.575, 680669.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_forEachOnRange  thrpt   30  677218.339 ± 3450.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5515633.240 ops/s
# Warmup Iteration   2: 11155013.058 ops/s
# Warmup Iteration   3: 9384178.494 ops/s
# Warmup Iteration   4: 11147643.190 ops/s
# Warmup Iteration   5: 11131225.733 ops/s
# Warmup Iteration   6: 11191567.737 ops/s
# Warmup Iteration   7: 11073526.477 ops/s
# Warmup Iteration   8: 11122453.723 ops/s
# Warmup Iteration   9: 11118976.156 ops/s
# Warmup Iteration  10: 11108573.796 ops/s
# Warmup Iteration  11: 11174130.428 ops/s
# Warmup Iteration  12: 11166867.317 ops/s
# Warmup Iteration  13: 11153315.242 ops/s
# Warmup Iteration  14: 11183811.834 ops/s
# Warmup Iteration  15: 11150807.122 ops/s
# Warmup Iteration  16: 11067176.611 ops/s
# Warmup Iteration  17: 11012421.119 ops/s
# Warmup Iteration  18: 11158415.299 ops/s
# Warmup Iteration  19: 11142927.437 ops/s
# Warmup Iteration  20: 11085256.159 ops/s
# Warmup Iteration  21: 11111579.986 ops/s
# Warmup Iteration  22: 11113424.489 ops/s
# Warmup Iteration  23: 11132916.844 ops/s
# Warmup Iteration  24: 11157209.693 ops/s
# Warmup Iteration  25: 11133163.569 ops/s
# Warmup Iteration  26: 11152666.970 ops/s
# Warmup Iteration  27: 11167781.313 ops/s
# Warmup Iteration  28: 11059613.235 ops/s
# Warmup Iteration  29: 11062038.245 ops/s
# Warmup Iteration  30: 11142760.820 ops/s
Iteration   1: 11168983.130 ops/s
Iteration   2: 11163845.909 ops/s
Iteration   3: 11136976.945 ops/s
Iteration   4: 11108573.384 ops/s
Iteration   5: 11150789.666 ops/s
Iteration   6: 11145231.839 ops/s
Iteration   7: 11007724.307 ops/s
Iteration   8: 11165384.155 ops/s
Iteration   9: 11184690.624 ops/s
Iteration  10: 11142807.265 ops/s
Iteration  11: 11034395.434 ops/s
Iteration  12: 11148978.663 ops/s
Iteration  13: 11188806.161 ops/s
Iteration  14: 11123981.532 ops/s
Iteration  15: 11170143.205 ops/s
Iteration  16: 11158754.976 ops/s
Iteration  17: 11032508.999 ops/s
Iteration  18: 10961664.958 ops/s
Iteration  19: 11100227.144 ops/s
Iteration  20: 10863578.125 ops/s
Iteration  21: 11135218.660 ops/s
Iteration  22: 10994065.521 ops/s
Iteration  23: 11213276.002 ops/s
Iteration  24: 11110390.524 ops/s
Iteration  25: 11130304.197 ops/s
Iteration  26: 11188853.208 ops/s
Iteration  27: 11118490.118 ops/s
Iteration  28: 11122756.795 ops/s
Iteration  29: 11120309.668 ops/s
Iteration  30: 11165486.568 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWith":
  11115239.923 ±(99.9%) 51547.370 ops/s [Average]
  (min, avg, max) = (10863578.125, 11115239.923, 11213276.002), stdev = 77153.683
  CI (99.9%): [11063692.552, 11166787.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_forEachWith  thrpt   30  11115239.923 ± 51547.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505985.788 ops/s
# Warmup Iteration   2: 1002409.043 ops/s
# Warmup Iteration   3: 1118024.071 ops/s
# Warmup Iteration   4: 1125473.842 ops/s
# Warmup Iteration   5: 925252.190 ops/s
# Warmup Iteration   6: 1131108.945 ops/s
# Warmup Iteration   7: 1125492.972 ops/s
# Warmup Iteration   8: 1132748.300 ops/s
# Warmup Iteration   9: 1126218.392 ops/s
# Warmup Iteration  10: 1127401.012 ops/s
# Warmup Iteration  11: 1120352.463 ops/s
# Warmup Iteration  12: 1125616.956 ops/s
# Warmup Iteration  13: 1126578.520 ops/s
# Warmup Iteration  14: 1118149.350 ops/s
# Warmup Iteration  15: 1127853.833 ops/s
# Warmup Iteration  16: 1116243.990 ops/s
# Warmup Iteration  17: 1121031.798 ops/s
# Warmup Iteration  18: 1130694.074 ops/s
# Warmup Iteration  19: 1131756.595 ops/s
# Warmup Iteration  20: 1124643.051 ops/s
# Warmup Iteration  21: 1128591.554 ops/s
# Warmup Iteration  22: 1112993.522 ops/s
# Warmup Iteration  23: 1119052.638 ops/s
# Warmup Iteration  24: 1129576.150 ops/s
# Warmup Iteration  25: 1127362.893 ops/s
# Warmup Iteration  26: 1116334.794 ops/s
# Warmup Iteration  27: 1130757.716 ops/s
# Warmup Iteration  28: 1120334.311 ops/s
# Warmup Iteration  29: 1128046.023 ops/s
# Warmup Iteration  30: 1130650.694 ops/s
Iteration   1: 1116760.682 ops/s
Iteration   2: 1124297.359 ops/s
Iteration   3: 1131012.769 ops/s
Iteration   4: 1125572.039 ops/s
Iteration   5: 1112121.864 ops/s
Iteration   6: 1132830.661 ops/s
Iteration   7: 1129193.129 ops/s
Iteration   8: 1133105.329 ops/s
Iteration   9: 1125263.096 ops/s
Iteration  10: 1129991.596 ops/s
Iteration  11: 1130070.253 ops/s
Iteration  12: 1135268.245 ops/s
Iteration  13: 1121702.892 ops/s
Iteration  14: 1127656.802 ops/s
Iteration  15: 1131035.536 ops/s
Iteration  16: 1130243.327 ops/s
Iteration  17: 1123815.983 ops/s
Iteration  18: 1118718.799 ops/s
Iteration  19: 1126750.098 ops/s
Iteration  20: 1131108.431 ops/s
Iteration  21: 1125396.005 ops/s
Iteration  22: 1130793.201 ops/s
Iteration  23: 1132571.391 ops/s
Iteration  24: 1124326.628 ops/s
Iteration  25: 1124259.289 ops/s
Iteration  26: 1131855.207 ops/s
Iteration  27: 1110123.583 ops/s
Iteration  28: 1128532.620 ops/s
Iteration  29: 1125171.373 ops/s
Iteration  30: 1127509.003 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndex":
  1126568.573 ±(99.9%) 4000.710 ops/s [Average]
  (min, avg, max) = (1110123.583, 1126568.573, 1135268.245), stdev = 5988.075
  CI (99.9%): [1122567.863, 1130569.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1126568.573 ± 4000.710  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 402162.984 ops/s
# Warmup Iteration   2: 523350.607 ops/s
# Warmup Iteration   3: 643314.682 ops/s
# Warmup Iteration   4: 640094.279 ops/s
# Warmup Iteration   5: 642876.790 ops/s
# Warmup Iteration   6: 643656.384 ops/s
# Warmup Iteration   7: 640075.130 ops/s
# Warmup Iteration   8: 555002.057 ops/s
# Warmup Iteration   9: 625690.107 ops/s
# Warmup Iteration  10: 642688.352 ops/s
# Warmup Iteration  11: 646502.973 ops/s
# Warmup Iteration  12: 645528.067 ops/s
# Warmup Iteration  13: 646847.171 ops/s
# Warmup Iteration  14: 645147.730 ops/s
# Warmup Iteration  15: 645571.082 ops/s
# Warmup Iteration  16: 647928.875 ops/s
# Warmup Iteration  17: 668247.775 ops/s
# Warmup Iteration  18: 675663.274 ops/s
# Warmup Iteration  19: 673208.708 ops/s
# Warmup Iteration  20: 672939.189 ops/s
# Warmup Iteration  21: 674203.680 ops/s
# Warmup Iteration  22: 667834.315 ops/s
# Warmup Iteration  23: 673904.316 ops/s
# Warmup Iteration  24: 673798.291 ops/s
# Warmup Iteration  25: 673683.317 ops/s
# Warmup Iteration  26: 671957.634 ops/s
# Warmup Iteration  27: 675215.015 ops/s
# Warmup Iteration  28: 670817.921 ops/s
# Warmup Iteration  29: 674326.317 ops/s
# Warmup Iteration  30: 672646.792 ops/s
Iteration   1: 670730.228 ops/s
Iteration   2: 673986.647 ops/s
Iteration   3: 675614.534 ops/s
Iteration   4: 673663.257 ops/s
Iteration   5: 676571.569 ops/s
Iteration   6: 672341.617 ops/s
Iteration   7: 675989.843 ops/s
Iteration   8: 668560.360 ops/s
Iteration   9: 674924.548 ops/s
Iteration  10: 674246.002 ops/s
Iteration  11: 676328.981 ops/s
Iteration  12: 672837.670 ops/s
Iteration  13: 676100.929 ops/s
Iteration  14: 670665.790 ops/s
Iteration  15: 673652.233 ops/s
Iteration  16: 674883.872 ops/s
Iteration  17: 670941.873 ops/s
Iteration  18: 673308.958 ops/s
Iteration  19: 673226.269 ops/s
Iteration  20: 675582.287 ops/s
Iteration  21: 673801.244 ops/s
Iteration  22: 673206.077 ops/s
Iteration  23: 663426.238 ops/s
Iteration  24: 675691.765 ops/s
Iteration  25: 673684.932 ops/s
Iteration  26: 675238.247 ops/s
Iteration  27: 671573.093 ops/s
Iteration  28: 660330.328 ops/s
Iteration  29: 666657.424 ops/s
Iteration  30: 676727.505 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexOnRange":
  672816.477 ±(99.9%) 2549.927 ops/s [Average]
  (min, avg, max) = (660330.328, 672816.477, 676727.505), stdev = 3816.611
  CI (99.9%): [670266.550, 675366.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  672816.477 ± 2549.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173459.234 ops/s
# Warmup Iteration   2: 203972.928 ops/s
# Warmup Iteration   3: 260861.900 ops/s
# Warmup Iteration   4: 263026.491 ops/s
# Warmup Iteration   5: 263268.140 ops/s
# Warmup Iteration   6: 261956.608 ops/s
# Warmup Iteration   7: 259639.321 ops/s
# Warmup Iteration   8: 259944.052 ops/s
# Warmup Iteration   9: 246931.728 ops/s
# Warmup Iteration  10: 234684.980 ops/s
# Warmup Iteration  11: 261575.149 ops/s
# Warmup Iteration  12: 263994.914 ops/s
# Warmup Iteration  13: 262861.409 ops/s
# Warmup Iteration  14: 263361.470 ops/s
# Warmup Iteration  15: 264016.349 ops/s
# Warmup Iteration  16: 264081.147 ops/s
# Warmup Iteration  17: 271786.924 ops/s
# Warmup Iteration  18: 272349.115 ops/s
# Warmup Iteration  19: 271045.473 ops/s
# Warmup Iteration  20: 271239.196 ops/s
# Warmup Iteration  21: 274000.491 ops/s
# Warmup Iteration  22: 271347.277 ops/s
# Warmup Iteration  23: 272151.302 ops/s
# Warmup Iteration  24: 271854.919 ops/s
# Warmup Iteration  25: 270084.308 ops/s
# Warmup Iteration  26: 272367.437 ops/s
# Warmup Iteration  27: 271467.211 ops/s
# Warmup Iteration  28: 273232.423 ops/s
# Warmup Iteration  29: 274541.745 ops/s
# Warmup Iteration  30: 270998.775 ops/s
Iteration   1: 274952.657 ops/s
Iteration   2: 267308.751 ops/s
Iteration   3: 269081.501 ops/s
Iteration   4: 272580.834 ops/s
Iteration   5: 271838.811 ops/s
Iteration   6: 274250.789 ops/s
Iteration   7: 273234.578 ops/s
Iteration   8: 273282.247 ops/s
Iteration   9: 274368.731 ops/s
Iteration  10: 272296.846 ops/s
Iteration  11: 271886.364 ops/s
Iteration  12: 272860.506 ops/s
Iteration  13: 272961.080 ops/s
Iteration  14: 273654.503 ops/s
Iteration  15: 273933.390 ops/s
Iteration  16: 274029.066 ops/s
Iteration  17: 273900.254 ops/s
Iteration  18: 274580.310 ops/s
Iteration  19: 269647.646 ops/s
Iteration  20: 274129.797 ops/s
Iteration  21: 272451.252 ops/s
Iteration  22: 273726.563 ops/s
Iteration  23: 273816.544 ops/s
Iteration  24: 273301.819 ops/s
Iteration  25: 273167.765 ops/s
Iteration  26: 272113.638 ops/s
Iteration  27: 272683.515 ops/s
Iteration  28: 273025.717 ops/s
Iteration  29: 274488.616 ops/s
Iteration  30: 273493.868 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  272901.599 ±(99.9%) 1118.394 ops/s [Average]
  (min, avg, max) = (267308.751, 272901.599, 274952.657), stdev = 1673.959
  CI (99.9%): [271783.205, 274019.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  272901.599 ± 1118.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10332560.317 ops/s
# Warmup Iteration   2: 20185529.251 ops/s
# Warmup Iteration   3: 16968897.690 ops/s
# Warmup Iteration   4: 19833286.413 ops/s
# Warmup Iteration   5: 20006007.338 ops/s
# Warmup Iteration   6: 19991326.611 ops/s
# Warmup Iteration   7: 19947960.287 ops/s
# Warmup Iteration   8: 19929731.306 ops/s
# Warmup Iteration   9: 19973516.622 ops/s
# Warmup Iteration  10: 19830592.285 ops/s
# Warmup Iteration  11: 19999254.272 ops/s
# Warmup Iteration  12: 19954197.815 ops/s
# Warmup Iteration  13: 19774465.943 ops/s
# Warmup Iteration  14: 19980700.234 ops/s
# Warmup Iteration  15: 19967101.748 ops/s
# Warmup Iteration  16: 19755693.295 ops/s
# Warmup Iteration  17: 19706592.554 ops/s
# Warmup Iteration  18: 19949642.265 ops/s
# Warmup Iteration  19: 19939631.389 ops/s
# Warmup Iteration  20: 19618200.276 ops/s
# Warmup Iteration  21: 19894050.653 ops/s
# Warmup Iteration  22: 19759424.696 ops/s
# Warmup Iteration  23: 19954432.507 ops/s
# Warmup Iteration  24: 19963711.617 ops/s
# Warmup Iteration  25: 19909334.218 ops/s
# Warmup Iteration  26: 19926542.249 ops/s
# Warmup Iteration  27: 19910919.949 ops/s
# Warmup Iteration  28: 19956845.272 ops/s
# Warmup Iteration  29: 19923403.068 ops/s
# Warmup Iteration  30: 19987786.366 ops/s
Iteration   1: 19989901.510 ops/s
Iteration   2: 19840068.607 ops/s
Iteration   3: 19671596.673 ops/s
Iteration   4: 19943324.818 ops/s
Iteration   5: 19998937.476 ops/s
Iteration   6: 20000963.820 ops/s
Iteration   7: 19872729.512 ops/s
Iteration   8: 20022700.652 ops/s
Iteration   9: 19998656.741 ops/s
Iteration  10: 19659657.150 ops/s
Iteration  11: 19826520.601 ops/s
Iteration  12: 19996702.988 ops/s
Iteration  13: 19904410.575 ops/s
Iteration  14: 19913000.447 ops/s
Iteration  15: 19947698.888 ops/s
Iteration  16: 19870121.677 ops/s
Iteration  17: 19717994.258 ops/s
Iteration  18: 19959204.768 ops/s
Iteration  19: 19907034.379 ops/s
Iteration  20: 19917575.783 ops/s
Iteration  21: 19966824.223 ops/s
Iteration  22: 19900919.150 ops/s
Iteration  23: 19669319.290 ops/s
Iteration  24: 19975999.785 ops/s
Iteration  25: 19959048.897 ops/s
Iteration  26: 19784159.872 ops/s
Iteration  27: 20029878.391 ops/s
Iteration  28: 19669070.089 ops/s
Iteration  29: 20005594.615 ops/s
Iteration  30: 19992840.977 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  19897081.887 ±(99.9%) 77891.764 ops/s [Average]
  (min, avg, max) = (19659657.150, 19897081.887, 20029878.391), stdev = 116584.735
  CI (99.9%): [19819190.123, 19974973.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  19897081.887 ± 77891.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2113512.113 ops/s
# Warmup Iteration   2: 4649898.147 ops/s
# Warmup Iteration   3: 3902114.371 ops/s
# Warmup Iteration   4: 4724418.999 ops/s
# Warmup Iteration   5: 4715016.371 ops/s
# Warmup Iteration   6: 4683267.064 ops/s
# Warmup Iteration   7: 4703696.759 ops/s
# Warmup Iteration   8: 4713322.051 ops/s
# Warmup Iteration   9: 4720845.381 ops/s
# Warmup Iteration  10: 4730207.739 ops/s
# Warmup Iteration  11: 4709335.524 ops/s
# Warmup Iteration  12: 4724641.422 ops/s
# Warmup Iteration  13: 4753476.063 ops/s
# Warmup Iteration  14: 4706025.315 ops/s
# Warmup Iteration  15: 4641132.772 ops/s
# Warmup Iteration  16: 4725340.472 ops/s
# Warmup Iteration  17: 4707775.009 ops/s
# Warmup Iteration  18: 4743141.137 ops/s
# Warmup Iteration  19: 4728252.909 ops/s
# Warmup Iteration  20: 4736391.263 ops/s
# Warmup Iteration  21: 4728481.781 ops/s
# Warmup Iteration  22: 4695929.313 ops/s
# Warmup Iteration  23: 4703560.096 ops/s
# Warmup Iteration  24: 4741468.206 ops/s
# Warmup Iteration  25: 4721951.378 ops/s
# Warmup Iteration  26: 4675841.462 ops/s
# Warmup Iteration  27: 4745890.553 ops/s
# Warmup Iteration  28: 4744678.049 ops/s
# Warmup Iteration  29: 4709115.304 ops/s
# Warmup Iteration  30: 4695976.750 ops/s
Iteration   1: 4725963.684 ops/s
Iteration   2: 4730423.993 ops/s
Iteration   3: 4696719.301 ops/s
Iteration   4: 4707002.590 ops/s
Iteration   5: 4729983.740 ops/s
Iteration   6: 4702109.889 ops/s
Iteration   7: 4702018.640 ops/s
Iteration   8: 4718608.631 ops/s
Iteration   9: 4731760.672 ops/s
Iteration  10: 4723898.472 ops/s
Iteration  11: 4729578.964 ops/s
Iteration  12: 4642340.474 ops/s
Iteration  13: 4708332.791 ops/s
Iteration  14: 4705285.242 ops/s
Iteration  15: 4717393.396 ops/s
Iteration  16: 4718663.006 ops/s
Iteration  17: 4690850.526 ops/s
Iteration  18: 4717745.477 ops/s
Iteration  19: 4686174.636 ops/s
Iteration  20: 4716138.629 ops/s
Iteration  21: 4702921.597 ops/s
Iteration  22: 4696813.225 ops/s
Iteration  23: 4671735.791 ops/s
Iteration  24: 4642815.401 ops/s
Iteration  25: 4691880.886 ops/s
Iteration  26: 4712561.276 ops/s
Iteration  27: 4670290.067 ops/s
Iteration  28: 4699452.253 ops/s
Iteration  29: 4677436.897 ops/s
Iteration  30: 4701867.838 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fusedCollectMakeString":
  4702292.266 ±(99.9%) 15614.742 ops/s [Average]
  (min, avg, max) = (4642340.474, 4702292.266, 4731760.672), stdev = 23371.412
  CI (99.9%): [4686677.525, 4717907.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  4702292.266 ± 15614.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23218039.247 ops/s
# Warmup Iteration   2: 37671288.280 ops/s
# Warmup Iteration   3: 39123624.835 ops/s
# Warmup Iteration   4: 39972042.678 ops/s
# Warmup Iteration   5: 40206506.088 ops/s
# Warmup Iteration   6: 40158049.961 ops/s
# Warmup Iteration   7: 40093006.499 ops/s
# Warmup Iteration   8: 39683406.048 ops/s
# Warmup Iteration   9: 40130632.541 ops/s
# Warmup Iteration  10: 39557357.148 ops/s
# Warmup Iteration  11: 40192244.413 ops/s
# Warmup Iteration  12: 39820458.196 ops/s
# Warmup Iteration  13: 39698940.494 ops/s
# Warmup Iteration  14: 40067143.250 ops/s
# Warmup Iteration  15: 40179874.525 ops/s
# Warmup Iteration  16: 40269294.409 ops/s
# Warmup Iteration  17: 39759038.835 ops/s
# Warmup Iteration  18: 39767685.962 ops/s
# Warmup Iteration  19: 40186731.336 ops/s
# Warmup Iteration  20: 39994564.869 ops/s
# Warmup Iteration  21: 40060859.402 ops/s
# Warmup Iteration  22: 40147446.408 ops/s
# Warmup Iteration  23: 40088247.205 ops/s
# Warmup Iteration  24: 40321083.146 ops/s
# Warmup Iteration  25: 40223491.305 ops/s
# Warmup Iteration  26: 40473730.390 ops/s
# Warmup Iteration  27: 40118508.546 ops/s
# Warmup Iteration  28: 40377102.693 ops/s
# Warmup Iteration  29: 40209305.086 ops/s
# Warmup Iteration  30: 40233361.165 ops/s
Iteration   1: 40177008.738 ops/s
Iteration   2: 39987777.368 ops/s
Iteration   3: 39718710.941 ops/s
Iteration   4: 40134367.242 ops/s
Iteration   5: 40127928.281 ops/s
Iteration   6: 40378274.793 ops/s
Iteration   7: 39773783.026 ops/s
Iteration   8: 40080511.721 ops/s
Iteration   9: 40380777.380 ops/s
Iteration  10: 39793362.359 ops/s
Iteration  11: 40349682.083 ops/s
Iteration  12: 40290630.210 ops/s
Iteration  13: 40374902.405 ops/s
Iteration  14: 40149425.519 ops/s
Iteration  15: 39890484.005 ops/s
Iteration  16: 39708288.353 ops/s
Iteration  17: 39809164.964 ops/s
Iteration  18: 40386655.041 ops/s
Iteration  19: 40427140.002 ops/s
Iteration  20: 40200743.099 ops/s
Iteration  21: 40262266.948 ops/s
Iteration  22: 40209412.592 ops/s
Iteration  23: 40145679.505 ops/s
Iteration  24: 40446788.769 ops/s
Iteration  25: 40037814.179 ops/s
Iteration  26: 40342454.133 ops/s
Iteration  27: 40327869.602 ops/s
Iteration  28: 40449737.534 ops/s
Iteration  29: 40441332.216 ops/s
Iteration  30: 40375761.775 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getAny":
  40172624.493 ±(99.9%) 157557.503 ops/s [Average]
  (min, avg, max) = (39708288.353, 40172624.493, 40449737.534), stdev = 235824.672
  CI (99.9%): [40015066.989, 40330181.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getAny  thrpt   30  40172624.493 ± 157557.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getBatchCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getBatchCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27925744.269 ops/s
# Warmup Iteration   2: 50461864.297 ops/s
# Warmup Iteration   3: 47400869.772 ops/s
# Warmup Iteration   4: 53071267.830 ops/s
# Warmup Iteration   5: 53276081.819 ops/s
# Warmup Iteration   6: 53194920.221 ops/s
# Warmup Iteration   7: 53125191.875 ops/s
# Warmup Iteration   8: 52508639.556 ops/s
# Warmup Iteration   9: 52872404.616 ops/s
# Warmup Iteration  10: 53189649.795 ops/s
# Warmup Iteration  11: 52879290.877 ops/s
# Warmup Iteration  12: 52747749.615 ops/s
# Warmup Iteration  13: 52665191.391 ops/s
# Warmup Iteration  14: 52647306.618 ops/s
# Warmup Iteration  15: 53297563.069 ops/s
# Warmup Iteration  16: 52932742.034 ops/s
# Warmup Iteration  17: 52407010.553 ops/s
# Warmup Iteration  18: 52962137.977 ops/s
# Warmup Iteration  19: 53167333.299 ops/s
# Warmup Iteration  20: 53049803.613 ops/s
# Warmup Iteration  21: 53189294.407 ops/s
# Warmup Iteration  22: 52981593.969 ops/s
# Warmup Iteration  23: 52933881.274 ops/s
# Warmup Iteration  24: 53371225.201 ops/s
# Warmup Iteration  25: 53228093.114 ops/s
# Warmup Iteration  26: 53299150.067 ops/s
# Warmup Iteration  27: 53321129.330 ops/s
# Warmup Iteration  28: 52059932.066 ops/s
# Warmup Iteration  29: 53260774.920 ops/s
# Warmup Iteration  30: 53257536.455 ops/s
Iteration   1: 53219331.638 ops/s
Iteration   2: 53479146.724 ops/s
Iteration   3: 53224490.340 ops/s
Iteration   4: 53556603.155 ops/s
Iteration   5: 53224300.596 ops/s
Iteration   6: 53332346.824 ops/s
Iteration   7: 53101395.879 ops/s
Iteration   8: 53189871.160 ops/s
Iteration   9: 53177960.013 ops/s
Iteration  10: 53360289.889 ops/s
Iteration  11: 53443492.837 ops/s
Iteration  12: 53375238.681 ops/s
Iteration  13: 53097479.738 ops/s
Iteration  14: 53065887.792 ops/s
Iteration  15: 53100996.246 ops/s
Iteration  16: 52521919.858 ops/s
Iteration  17: 52921659.607 ops/s
Iteration  18: 53567751.996 ops/s
Iteration  19: 53622615.188 ops/s
Iteration  20: 53343590.500 ops/s
Iteration  21: 53237431.611 ops/s
Iteration  22: 52417213.094 ops/s
Iteration  23: 52547355.648 ops/s
Iteration  24: 53152665.778 ops/s
Iteration  25: 53311299.159 ops/s
Iteration  26: 52942433.460 ops/s
Iteration  27: 52365633.909 ops/s
Iteration  28: 53108684.154 ops/s
Iteration  29: 53392176.157 ops/s
Iteration  30: 53249942.565 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getBatchCount":
  53155040.140 ±(99.9%) 217187.427 ops/s [Average]
  (min, avg, max) = (52365633.909, 53155040.140, 53622615.188), stdev = 325075.941
  CI (99.9%): [52937852.713, 53372227.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getBatchCount  thrpt   30  53155040.140 ± 217187.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21476854.194 ops/s
# Warmup Iteration   2: 37942343.603 ops/s
# Warmup Iteration   3: 38554545.132 ops/s
# Warmup Iteration   4: 42056765.550 ops/s
# Warmup Iteration   5: 41850434.712 ops/s
# Warmup Iteration   6: 42110373.251 ops/s
# Warmup Iteration   7: 41371619.652 ops/s
# Warmup Iteration   8: 41691995.985 ops/s
# Warmup Iteration   9: 42025307.901 ops/s
# Warmup Iteration  10: 41997336.920 ops/s
# Warmup Iteration  11: 41682975.919 ops/s
# Warmup Iteration  12: 41893022.307 ops/s
# Warmup Iteration  13: 42119568.986 ops/s
# Warmup Iteration  14: 41759702.271 ops/s
# Warmup Iteration  15: 41812543.624 ops/s
# Warmup Iteration  16: 41910095.306 ops/s
# Warmup Iteration  17: 42164422.816 ops/s
# Warmup Iteration  18: 42571388.513 ops/s
# Warmup Iteration  19: 42323412.857 ops/s
# Warmup Iteration  20: 42649048.412 ops/s
# Warmup Iteration  21: 42084494.335 ops/s
# Warmup Iteration  22: 42382666.571 ops/s
# Warmup Iteration  23: 41605648.116 ops/s
# Warmup Iteration  24: 42352543.215 ops/s
# Warmup Iteration  25: 42543882.589 ops/s
# Warmup Iteration  26: 42564644.477 ops/s
# Warmup Iteration  27: 42822253.402 ops/s
# Warmup Iteration  28: 42483171.419 ops/s
# Warmup Iteration  29: 42485777.400 ops/s
# Warmup Iteration  30: 42764557.499 ops/s
Iteration   1: 42597934.393 ops/s
Iteration   2: 42742112.853 ops/s
Iteration   3: 42763131.265 ops/s
Iteration   4: 42715096.323 ops/s
Iteration   5: 42003933.536 ops/s
Iteration   6: 42535594.310 ops/s
Iteration   7: 42587079.241 ops/s
Iteration   8: 42851052.197 ops/s
Iteration   9: 43018089.561 ops/s
Iteration  10: 42688848.864 ops/s
Iteration  11: 42784935.067 ops/s
Iteration  12: 42914112.210 ops/s
Iteration  13: 42911221.351 ops/s
Iteration  14: 42933645.588 ops/s
Iteration  15: 42938688.530 ops/s
Iteration  16: 42774044.598 ops/s
Iteration  17: 42880253.565 ops/s
Iteration  18: 42968651.500 ops/s
Iteration  19: 42208786.791 ops/s
Iteration  20: 42920497.477 ops/s
Iteration  21: 42728293.895 ops/s
Iteration  22: 41936144.845 ops/s
Iteration  23: 42656272.644 ops/s
Iteration  24: 42557992.699 ops/s
Iteration  25: 42656655.409 ops/s
Iteration  26: 42061101.636 ops/s
Iteration  27: 42715176.953 ops/s
Iteration  28: 42619694.333 ops/s
Iteration  29: 41835300.274 ops/s
Iteration  30: 42465458.590 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirst":
  42632326.683 ±(99.9%) 213541.649 ops/s [Average]
  (min, avg, max) = (41835300.274, 42632326.683, 43018089.561), stdev = 319619.111
  CI (99.9%): [42418785.035, 42845868.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getFirst  thrpt   30  42632326.683 ± 213541.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13768676.413 ops/s
# Warmup Iteration   2: 24573215.862 ops/s
# Warmup Iteration   3: 24750262.671 ops/s
# Warmup Iteration   4: 26817697.757 ops/s
# Warmup Iteration   5: 26669440.893 ops/s
# Warmup Iteration   6: 26789301.161 ops/s
# Warmup Iteration   7: 26781993.337 ops/s
# Warmup Iteration   8: 26816968.544 ops/s
# Warmup Iteration   9: 26803216.907 ops/s
# Warmup Iteration  10: 26902682.637 ops/s
# Warmup Iteration  11: 26686720.858 ops/s
# Warmup Iteration  12: 26826949.918 ops/s
# Warmup Iteration  13: 26659985.492 ops/s
# Warmup Iteration  14: 26821189.735 ops/s
# Warmup Iteration  15: 26629550.448 ops/s
# Warmup Iteration  16: 26657148.821 ops/s
# Warmup Iteration  17: 26913142.416 ops/s
# Warmup Iteration  18: 26266181.804 ops/s
# Warmup Iteration  19: 26797011.140 ops/s
# Warmup Iteration  20: 26750487.529 ops/s
# Warmup Iteration  21: 26939735.166 ops/s
# Warmup Iteration  22: 26931134.874 ops/s
# Warmup Iteration  23: 26863079.915 ops/s
# Warmup Iteration  24: 26723781.267 ops/s
# Warmup Iteration  25: 26904952.935 ops/s
# Warmup Iteration  26: 26870955.530 ops/s
# Warmup Iteration  27: 26916959.419 ops/s
# Warmup Iteration  28: 26886889.103 ops/s
# Warmup Iteration  29: 26769292.731 ops/s
# Warmup Iteration  30: 26879873.544 ops/s
Iteration   1: 26901732.187 ops/s
Iteration   2: 26824694.551 ops/s
Iteration   3: 26929566.668 ops/s
Iteration   4: 26871843.868 ops/s
Iteration   5: 26852477.468 ops/s
Iteration   6: 26733542.400 ops/s
Iteration   7: 26870186.538 ops/s
Iteration   8: 26916448.923 ops/s
Iteration   9: 26976595.486 ops/s
Iteration  10: 26888452.732 ops/s
Iteration  11: 26947743.708 ops/s
Iteration  12: 26755652.862 ops/s
Iteration  13: 27030565.885 ops/s
Iteration  14: 26630309.764 ops/s
Iteration  15: 26932118.081 ops/s
Iteration  16: 26901458.965 ops/s
Iteration  17: 27104008.740 ops/s
Iteration  18: 26836381.587 ops/s
Iteration  19: 26941363.461 ops/s
Iteration  20: 26941251.085 ops/s
Iteration  21: 27037488.636 ops/s
Iteration  22: 26640686.755 ops/s
Iteration  23: 26987427.653 ops/s
Iteration  24: 26509629.705 ops/s
Iteration  25: 26906548.049 ops/s
Iteration  26: 26843074.150 ops/s
Iteration  27: 25978564.858 ops/s
Iteration  28: 27037983.658 ops/s
Iteration  29: 27040053.599 ops/s
Iteration  30: 27001858.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getFirstOptional":
  26858990.350 ±(99.9%) 141704.095 ops/s [Average]
  (min, avg, max) = (25978564.858, 26858990.350, 27104008.740), stdev = 212096.034
  CI (99.9%): [26717286.256, 27000694.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getFirstOptional  thrpt   30  26858990.350 ± 141704.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21985502.492 ops/s
# Warmup Iteration   2: 37942277.256 ops/s
# Warmup Iteration   3: 38856406.535 ops/s
# Warmup Iteration   4: 41694679.377 ops/s
# Warmup Iteration   5: 41486489.666 ops/s
# Warmup Iteration   6: 41641193.362 ops/s
# Warmup Iteration   7: 41587891.320 ops/s
# Warmup Iteration   8: 41587757.736 ops/s
# Warmup Iteration   9: 41146086.107 ops/s
# Warmup Iteration  10: 41422641.362 ops/s
# Warmup Iteration  11: 41163348.334 ops/s
# Warmup Iteration  12: 41541598.428 ops/s
# Warmup Iteration  13: 41383981.202 ops/s
# Warmup Iteration  14: 40974487.716 ops/s
# Warmup Iteration  15: 41459382.949 ops/s
# Warmup Iteration  16: 41378832.748 ops/s
# Warmup Iteration  17: 41580539.586 ops/s
# Warmup Iteration  18: 41372878.802 ops/s
# Warmup Iteration  19: 41724945.349 ops/s
# Warmup Iteration  20: 40941416.950 ops/s
# Warmup Iteration  21: 41477916.130 ops/s
# Warmup Iteration  22: 41719943.443 ops/s
# Warmup Iteration  23: 41337198.530 ops/s
# Warmup Iteration  24: 41550069.819 ops/s
# Warmup Iteration  25: 41049907.193 ops/s
# Warmup Iteration  26: 41512207.840 ops/s
# Warmup Iteration  27: 41607836.111 ops/s
# Warmup Iteration  28: 41442795.872 ops/s
# Warmup Iteration  29: 41361163.605 ops/s
# Warmup Iteration  30: 41685202.699 ops/s
Iteration   1: 41752642.616 ops/s
Iteration   2: 41489692.218 ops/s
Iteration   3: 41783172.799 ops/s
Iteration   4: 41591120.017 ops/s
Iteration   5: 41640099.448 ops/s
Iteration   6: 41772397.471 ops/s
Iteration   7: 41603161.631 ops/s
Iteration   8: 41672052.782 ops/s
Iteration   9: 41602523.366 ops/s
Iteration  10: 41587795.309 ops/s
Iteration  11: 40812939.619 ops/s
Iteration  12: 41592906.329 ops/s
Iteration  13: 41576231.541 ops/s
Iteration  14: 41492146.957 ops/s
Iteration  15: 41643618.855 ops/s
Iteration  16: 41139093.686 ops/s
Iteration  17: 41710234.027 ops/s
Iteration  18: 40978481.118 ops/s
Iteration  19: 41300690.526 ops/s
Iteration  20: 41230198.632 ops/s
Iteration  21: 41548328.249 ops/s
Iteration  22: 41493050.338 ops/s
Iteration  23: 41688951.819 ops/s
Iteration  24: 41666159.707 ops/s
Iteration  25: 41173871.726 ops/s
Iteration  26: 41864095.253 ops/s
Iteration  27: 41654089.388 ops/s
Iteration  28: 41509476.125 ops/s
Iteration  29: 41694383.796 ops/s
Iteration  30: 41580765.573 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLast":
  41528145.697 ±(99.9%) 162703.045 ops/s [Average]
  (min, avg, max) = (40812939.619, 41528145.697, 41864095.253), stdev = 243526.277
  CI (99.9%): [41365442.652, 41690848.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getLast  thrpt   30  41528145.697 ± 162703.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14486648.110 ops/s
# Warmup Iteration   2: 23883794.758 ops/s
# Warmup Iteration   3: 25230260.845 ops/s
# Warmup Iteration   4: 26570707.318 ops/s
# Warmup Iteration   5: 26577959.283 ops/s
# Warmup Iteration   6: 26864956.980 ops/s
# Warmup Iteration   7: 26856331.338 ops/s
# Warmup Iteration   8: 26385263.184 ops/s
# Warmup Iteration   9: 26767548.000 ops/s
# Warmup Iteration  10: 26725067.100 ops/s
# Warmup Iteration  11: 26647682.675 ops/s
# Warmup Iteration  12: 26340966.547 ops/s
# Warmup Iteration  13: 26769695.808 ops/s
# Warmup Iteration  14: 26684072.377 ops/s
# Warmup Iteration  15: 26785899.591 ops/s
# Warmup Iteration  16: 26841673.696 ops/s
# Warmup Iteration  17: 26615778.025 ops/s
# Warmup Iteration  18: 26777107.045 ops/s
# Warmup Iteration  19: 26656243.370 ops/s
# Warmup Iteration  20: 26697907.357 ops/s
# Warmup Iteration  21: 26525720.772 ops/s
# Warmup Iteration  22: 26761224.526 ops/s
# Warmup Iteration  23: 26791753.697 ops/s
# Warmup Iteration  24: 26711039.076 ops/s
# Warmup Iteration  25: 26734526.778 ops/s
# Warmup Iteration  26: 26687004.630 ops/s
# Warmup Iteration  27: 26779249.650 ops/s
# Warmup Iteration  28: 26876162.224 ops/s
# Warmup Iteration  29: 26555504.824 ops/s
# Warmup Iteration  30: 26918085.636 ops/s
Iteration   1: 26894799.189 ops/s
Iteration   2: 26749808.805 ops/s
Iteration   3: 27015730.324 ops/s
Iteration   4: 26700108.293 ops/s
Iteration   5: 26782564.382 ops/s
Iteration   6: 26904604.542 ops/s
Iteration   7: 26748226.141 ops/s
Iteration   8: 26912005.243 ops/s
Iteration   9: 26878110.813 ops/s
Iteration  10: 26971785.944 ops/s
Iteration  11: 26976542.069 ops/s
Iteration  12: 26931397.584 ops/s
Iteration  13: 27003740.712 ops/s
Iteration  14: 27002506.933 ops/s
Iteration  15: 26961559.672 ops/s
Iteration  16: 26990530.289 ops/s
Iteration  17: 26921262.301 ops/s
Iteration  18: 26871784.686 ops/s
Iteration  19: 26946473.130 ops/s
Iteration  20: 25990890.960 ops/s
Iteration  21: 26839535.266 ops/s
Iteration  22: 26780644.201 ops/s
Iteration  23: 26904935.917 ops/s
Iteration  24: 26793536.399 ops/s
Iteration  25: 26816389.953 ops/s
Iteration  26: 26445970.353 ops/s
Iteration  27: 26667896.080 ops/s
Iteration  28: 26849554.954 ops/s
Iteration  29: 26756142.583 ops/s
Iteration  30: 26874124.451 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getLastOptional":
  26829438.739 ±(99.9%) 133585.394 ops/s [Average]
  (min, avg, max) = (25990890.960, 26829438.739, 27015730.324), stdev = 199944.344
  CI (99.9%): [26695853.345, 26963024.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getLastOptional  thrpt   30  26829438.739 ± 133585.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25656636.278 ops/s
# Warmup Iteration   2: 43423290.952 ops/s
# Warmup Iteration   3: 45213420.338 ops/s
# Warmup Iteration   4: 47120792.922 ops/s
# Warmup Iteration   5: 47681813.367 ops/s
# Warmup Iteration   6: 47571293.498 ops/s
# Warmup Iteration   7: 47581605.151 ops/s
# Warmup Iteration   8: 47613896.802 ops/s
# Warmup Iteration   9: 47759601.400 ops/s
# Warmup Iteration  10: 47505087.998 ops/s
# Warmup Iteration  11: 47682202.735 ops/s
# Warmup Iteration  12: 47756692.212 ops/s
# Warmup Iteration  13: 47057540.082 ops/s
# Warmup Iteration  14: 47618514.217 ops/s
# Warmup Iteration  15: 47364000.927 ops/s
# Warmup Iteration  16: 47722859.415 ops/s
# Warmup Iteration  17: 47425868.982 ops/s
# Warmup Iteration  18: 47788190.820 ops/s
# Warmup Iteration  19: 47841627.942 ops/s
# Warmup Iteration  20: 47511205.082 ops/s
# Warmup Iteration  21: 47325184.984 ops/s
# Warmup Iteration  22: 47613903.414 ops/s
# Warmup Iteration  23: 47636952.531 ops/s
# Warmup Iteration  24: 47745451.660 ops/s
# Warmup Iteration  25: 47886283.751 ops/s
# Warmup Iteration  26: 47694922.569 ops/s
# Warmup Iteration  27: 47570120.789 ops/s
# Warmup Iteration  28: 47469882.387 ops/s
# Warmup Iteration  29: 47448094.267 ops/s
# Warmup Iteration  30: 47381561.131 ops/s
Iteration   1: 47572493.221 ops/s
Iteration   2: 47425563.045 ops/s
Iteration   3: 47727622.033 ops/s
Iteration   4: 47579053.264 ops/s
Iteration   5: 47147182.123 ops/s
Iteration   6: 47433411.546 ops/s
Iteration   7: 47580583.545 ops/s
Iteration   8: 47200962.079 ops/s
Iteration   9: 47532299.938 ops/s
Iteration  10: 47723671.526 ops/s
Iteration  11: 47682327.831 ops/s
Iteration  12: 47006068.354 ops/s
Iteration  13: 46973256.233 ops/s
Iteration  14: 47742494.750 ops/s
Iteration  15: 47575277.228 ops/s
Iteration  16: 47789172.631 ops/s
Iteration  17: 46873950.195 ops/s
Iteration  18: 47303954.047 ops/s
Iteration  19: 47804210.145 ops/s
Iteration  20: 46927755.431 ops/s
Iteration  21: 47636575.111 ops/s
Iteration  22: 47763768.750 ops/s
Iteration  23: 47619109.595 ops/s
Iteration  24: 47844120.204 ops/s
Iteration  25: 47090788.623 ops/s
Iteration  26: 47549189.573 ops/s
Iteration  27: 47684226.598 ops/s
Iteration  28: 47736093.487 ops/s
Iteration  29: 47639654.548 ops/s
Iteration  30: 47886124.848 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly":
  47501698.683 ±(99.9%) 197992.227 ops/s [Average]
  (min, avg, max) = (46873950.195, 47501698.683, 47886124.848), stdev = 296345.467
  CI (99.9%): [47303706.456, 47699690.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getOnly  thrpt   30  47501698.683 ± 197992.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782142.124 ops/s
# Warmup Iteration   2: 795182.523 ops/s
# Warmup Iteration   3: 1026712.548 ops/s
# Warmup Iteration   4: 1032538.821 ops/s
# Warmup Iteration   5: 1034939.186 ops/s
# Warmup Iteration   6: 1036595.961 ops/s
# Warmup Iteration   7: 1016213.093 ops/s
# Warmup Iteration   8: 1037885.725 ops/s
# Warmup Iteration   9: 1036546.211 ops/s
# Warmup Iteration  10: 1023274.460 ops/s
# Warmup Iteration  11: 1031539.985 ops/s
# Warmup Iteration  12: 875766.569 ops/s
# Warmup Iteration  13: 1036891.934 ops/s
# Warmup Iteration  14: 1035647.498 ops/s
# Warmup Iteration  15: 1036113.907 ops/s
# Warmup Iteration  16: 1021097.537 ops/s
# Warmup Iteration  17: 1089186.052 ops/s
# Warmup Iteration  18: 1092353.652 ops/s
# Warmup Iteration  19: 1092975.195 ops/s
# Warmup Iteration  20: 1096312.433 ops/s
# Warmup Iteration  21: 1093002.641 ops/s
# Warmup Iteration  22: 1096051.770 ops/s
# Warmup Iteration  23: 1090553.693 ops/s
# Warmup Iteration  24: 1090027.406 ops/s
# Warmup Iteration  25: 1095107.653 ops/s
# Warmup Iteration  26: 1094418.554 ops/s
# Warmup Iteration  27: 1089303.887 ops/s
# Warmup Iteration  28: 1093107.487 ops/s
# Warmup Iteration  29: 1086667.695 ops/s
# Warmup Iteration  30: 1085529.323 ops/s
Iteration   1: 1095252.760 ops/s
Iteration   2: 1074433.430 ops/s
Iteration   3: 1096969.992 ops/s
Iteration   4: 1076293.849 ops/s
Iteration   5: 1095531.554 ops/s
Iteration   6: 1095677.240 ops/s
Iteration   7: 1085183.109 ops/s
Iteration   8: 1094518.531 ops/s
Iteration   9: 1095975.364 ops/s
Iteration  10: 1094201.774 ops/s
Iteration  11: 1093098.834 ops/s
Iteration  12: 1088384.131 ops/s
Iteration  13: 1092429.663 ops/s
Iteration  14: 1089618.669 ops/s
Iteration  15: 1096220.072 ops/s
Iteration  16: 1093208.288 ops/s
Iteration  17: 1097230.745 ops/s
Iteration  18: 1094966.760 ops/s
Iteration  19: 1094109.028 ops/s
Iteration  20: 1089989.077 ops/s
Iteration  21: 1099935.321 ops/s
Iteration  22: 1095625.216 ops/s
Iteration  23: 1096968.891 ops/s
Iteration  24: 1095606.133 ops/s
Iteration  25: 1102077.300 ops/s
Iteration  26: 1088273.363 ops/s
Iteration  27: 1094142.929 ops/s
Iteration  28: 1094273.135 ops/s
Iteration  29: 1096953.734 ops/s
Iteration  30: 1092430.143 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_empty_throws":
  1092985.968 ±(99.9%) 3940.192 ops/s [Average]
  (min, avg, max) = (1074433.430, 1092985.968, 1102077.300), stdev = 5897.494
  CI (99.9%): [1089045.776, 1096926.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1092985.968 ± 3940.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781917.055 ops/s
# Warmup Iteration   2: 799786.726 ops/s
# Warmup Iteration   3: 1036741.532 ops/s
# Warmup Iteration   4: 1036922.134 ops/s
# Warmup Iteration   5: 1039497.411 ops/s
# Warmup Iteration   6: 1039919.021 ops/s
# Warmup Iteration   7: 1021690.235 ops/s
# Warmup Iteration   8: 1026102.470 ops/s
# Warmup Iteration   9: 1036930.053 ops/s
# Warmup Iteration  10: 1032035.000 ops/s
# Warmup Iteration  11: 1036427.702 ops/s
# Warmup Iteration  12: 875392.717 ops/s
# Warmup Iteration  13: 1036297.071 ops/s
# Warmup Iteration  14: 1029659.103 ops/s
# Warmup Iteration  15: 1033487.732 ops/s
# Warmup Iteration  16: 1034936.611 ops/s
# Warmup Iteration  17: 1105406.349 ops/s
# Warmup Iteration  18: 1101110.506 ops/s
# Warmup Iteration  19: 1104823.944 ops/s
# Warmup Iteration  20: 1094963.355 ops/s
# Warmup Iteration  21: 1093921.531 ops/s
# Warmup Iteration  22: 1104862.243 ops/s
# Warmup Iteration  23: 1107152.865 ops/s
# Warmup Iteration  24: 1093912.732 ops/s
# Warmup Iteration  25: 1106679.493 ops/s
# Warmup Iteration  26: 1099239.779 ops/s
# Warmup Iteration  27: 1105158.515 ops/s
# Warmup Iteration  28: 1092031.058 ops/s
# Warmup Iteration  29: 1109220.114 ops/s
# Warmup Iteration  30: 1105207.535 ops/s
Iteration   1: 1096039.990 ops/s
Iteration   2: 1085506.111 ops/s
Iteration   3: 1101252.916 ops/s
Iteration   4: 1097011.626 ops/s
Iteration   5: 1102591.143 ops/s
Iteration   6: 1104079.599 ops/s
Iteration   7: 1101660.148 ops/s
Iteration   8: 1105581.046 ops/s
Iteration   9: 1103571.526 ops/s
Iteration  10: 1104109.613 ops/s
Iteration  11: 1095939.311 ops/s
Iteration  12: 1106237.871 ops/s
Iteration  13: 1108638.868 ops/s
Iteration  14: 1105686.960 ops/s
Iteration  15: 1103331.495 ops/s
Iteration  16: 1107925.839 ops/s
Iteration  17: 1104204.976 ops/s
Iteration  18: 1105354.747 ops/s
Iteration  19: 1107549.277 ops/s
Iteration  20: 1111966.467 ops/s
Iteration  21: 1106431.466 ops/s
Iteration  22: 1101187.655 ops/s
Iteration  23: 1108308.434 ops/s
Iteration  24: 1106900.619 ops/s
Iteration  25: 1088689.641 ops/s
Iteration  26: 1103329.030 ops/s
Iteration  27: 1101131.451 ops/s
Iteration  28: 1107421.440 ops/s
Iteration  29: 1105706.035 ops/s
Iteration  30: 1084265.609 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1102387.030 ±(99.9%) 4421.281 ops/s [Average]
  (min, avg, max) = (1084265.609, 1102387.030, 1111966.467), stdev = 6617.566
  CI (99.9%): [1097965.749, 1106808.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1102387.030 ± 4421.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35214636.112 ops/s
# Warmup Iteration   2: 60688696.829 ops/s
# Warmup Iteration   3: 63500725.949 ops/s
# Warmup Iteration   4: 67008913.643 ops/s
# Warmup Iteration   5: 67302031.035 ops/s
# Warmup Iteration   6: 67071403.340 ops/s
# Warmup Iteration   7: 66874717.338 ops/s
# Warmup Iteration   8: 67233063.534 ops/s
# Warmup Iteration   9: 66588964.392 ops/s
# Warmup Iteration  10: 67074184.182 ops/s
# Warmup Iteration  11: 66863205.929 ops/s
# Warmup Iteration  12: 66434373.654 ops/s
# Warmup Iteration  13: 67214068.062 ops/s
# Warmup Iteration  14: 66911673.823 ops/s
# Warmup Iteration  15: 65417689.633 ops/s
# Warmup Iteration  16: 66342712.704 ops/s
# Warmup Iteration  17: 66941340.147 ops/s
# Warmup Iteration  18: 66958621.207 ops/s
# Warmup Iteration  19: 66675202.704 ops/s
# Warmup Iteration  20: 67168523.248 ops/s
# Warmup Iteration  21: 66649765.166 ops/s
# Warmup Iteration  22: 66511157.912 ops/s
# Warmup Iteration  23: 66987507.331 ops/s
# Warmup Iteration  24: 67111715.107 ops/s
# Warmup Iteration  25: 67077126.350 ops/s
# Warmup Iteration  26: 66602344.663 ops/s
# Warmup Iteration  27: 66828060.673 ops/s
# Warmup Iteration  28: 66991927.534 ops/s
# Warmup Iteration  29: 66382314.585 ops/s
# Warmup Iteration  30: 66839598.439 ops/s
Iteration   1: 67249712.789 ops/s
Iteration   2: 66491594.704 ops/s
Iteration   3: 66808691.999 ops/s
Iteration   4: 66735918.769 ops/s
Iteration   5: 66635643.905 ops/s
Iteration   6: 66877998.943 ops/s
Iteration   7: 66939332.789 ops/s
Iteration   8: 66815730.612 ops/s
Iteration   9: 66495722.089 ops/s
Iteration  10: 67159618.594 ops/s
Iteration  11: 67108906.189 ops/s
Iteration  12: 67438048.851 ops/s
Iteration  13: 67152665.047 ops/s
Iteration  14: 67080050.579 ops/s
Iteration  15: 66232925.627 ops/s
Iteration  16: 67316072.713 ops/s
Iteration  17: 67211246.380 ops/s
Iteration  18: 67138045.446 ops/s
Iteration  19: 67538947.548 ops/s
Iteration  20: 67155987.788 ops/s
Iteration  21: 67568500.970 ops/s
Iteration  22: 67423405.082 ops/s
Iteration  23: 67699354.518 ops/s
Iteration  24: 67174501.578 ops/s
Iteration  25: 66794490.628 ops/s
Iteration  26: 65420250.273 ops/s
Iteration  27: 67166984.335 ops/s
Iteration  28: 66422797.076 ops/s
Iteration  29: 67318265.776 ops/s
Iteration  30: 67099059.727 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  66989015.711 ±(99.9%) 309439.586 ops/s [Average]
  (min, avg, max) = (65420250.273, 66989015.711, 67699354.518), stdev = 463154.640
  CI (99.9%): [66679576.125, 67298455.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  66989015.711 ± 309439.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726550.625 ops/s
# Warmup Iteration   2: 752829.887 ops/s
# Warmup Iteration   3: 938767.015 ops/s
# Warmup Iteration   4: 971347.851 ops/s
# Warmup Iteration   5: 973898.430 ops/s
# Warmup Iteration   6: 972642.414 ops/s
# Warmup Iteration   7: 970890.638 ops/s
# Warmup Iteration   8: 972849.268 ops/s
# Warmup Iteration   9: 965419.965 ops/s
# Warmup Iteration  10: 973788.724 ops/s
# Warmup Iteration  11: 972583.704 ops/s
# Warmup Iteration  12: 944108.255 ops/s
# Warmup Iteration  13: 850442.816 ops/s
# Warmup Iteration  14: 971742.879 ops/s
# Warmup Iteration  15: 968036.805 ops/s
# Warmup Iteration  16: 972944.715 ops/s
# Warmup Iteration  17: 1026857.370 ops/s
# Warmup Iteration  18: 1032183.073 ops/s
# Warmup Iteration  19: 1028959.738 ops/s
# Warmup Iteration  20: 1026937.660 ops/s
# Warmup Iteration  21: 1010691.275 ops/s
# Warmup Iteration  22: 1026752.934 ops/s
# Warmup Iteration  23: 1030163.742 ops/s
# Warmup Iteration  24: 1028275.898 ops/s
# Warmup Iteration  25: 1020850.384 ops/s
# Warmup Iteration  26: 1030623.305 ops/s
# Warmup Iteration  27: 1029070.303 ops/s
# Warmup Iteration  28: 1030075.873 ops/s
# Warmup Iteration  29: 1016822.704 ops/s
# Warmup Iteration  30: 1031617.531 ops/s
Iteration   1: 1030748.316 ops/s
Iteration   2: 1018859.886 ops/s
Iteration   3: 1028202.217 ops/s
Iteration   4: 1031037.866 ops/s
Iteration   5: 1028571.634 ops/s
Iteration   6: 1027983.912 ops/s
Iteration   7: 1024818.162 ops/s
Iteration   8: 1012265.546 ops/s
Iteration   9: 1027190.992 ops/s
Iteration  10: 1024913.892 ops/s
Iteration  11: 1025543.377 ops/s
Iteration  12: 1025589.770 ops/s
Iteration  13: 1013608.928 ops/s
Iteration  14: 1027710.830 ops/s
Iteration  15: 1029261.268 ops/s
Iteration  16: 1028799.686 ops/s
Iteration  17: 1029712.905 ops/s
Iteration  18: 1030179.628 ops/s
Iteration  19: 1027389.609 ops/s
Iteration  20: 1029362.587 ops/s
Iteration  21: 1030936.403 ops/s
Iteration  22: 1031455.519 ops/s
Iteration  23: 1026141.051 ops/s
Iteration  24: 1026520.527 ops/s
Iteration  25: 1025254.226 ops/s
Iteration  26: 1026688.973 ops/s
Iteration  27: 1030899.526 ops/s
Iteration  28: 1030374.176 ops/s
Iteration  29: 1012229.890 ops/s
Iteration  30: 1029948.905 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  1026406.674 ±(99.9%) 3564.774 ops/s [Average]
  (min, avg, max) = (1012229.890, 1026406.674, 1031455.519), stdev = 5335.586
  CI (99.9%): [1022841.900, 1029971.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  1026406.674 ± 3564.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447162.861 ops/s
# Warmup Iteration   2: 930306.760 ops/s
# Warmup Iteration   3: 994895.069 ops/s
# Warmup Iteration   4: 994565.264 ops/s
# Warmup Iteration   5: 824614.885 ops/s
# Warmup Iteration   6: 991834.730 ops/s
# Warmup Iteration   7: 1000973.075 ops/s
# Warmup Iteration   8: 999814.098 ops/s
# Warmup Iteration   9: 1000030.314 ops/s
# Warmup Iteration  10: 1003187.405 ops/s
# Warmup Iteration  11: 992569.357 ops/s
# Warmup Iteration  12: 1003640.844 ops/s
# Warmup Iteration  13: 1002959.828 ops/s
# Warmup Iteration  14: 1000571.685 ops/s
# Warmup Iteration  15: 998661.892 ops/s
# Warmup Iteration  16: 1002306.659 ops/s
# Warmup Iteration  17: 995591.793 ops/s
# Warmup Iteration  18: 982587.998 ops/s
# Warmup Iteration  19: 1001124.163 ops/s
# Warmup Iteration  20: 1000193.012 ops/s
# Warmup Iteration  21: 996225.361 ops/s
# Warmup Iteration  22: 999632.211 ops/s
# Warmup Iteration  23: 1000528.466 ops/s
# Warmup Iteration  24: 1000382.453 ops/s
# Warmup Iteration  25: 999655.098 ops/s
# Warmup Iteration  26: 996174.190 ops/s
# Warmup Iteration  27: 1000945.598 ops/s
# Warmup Iteration  28: 997891.649 ops/s
# Warmup Iteration  29: 999894.691 ops/s
# Warmup Iteration  30: 998724.511 ops/s
Iteration   1: 1002457.782 ops/s
Iteration   2: 949513.091 ops/s
Iteration   3: 998477.316 ops/s
Iteration   4: 1000735.698 ops/s
Iteration   5: 999196.952 ops/s
Iteration   6: 997187.802 ops/s
Iteration   7: 1002229.715 ops/s
Iteration   8: 996929.078 ops/s
Iteration   9: 1004714.512 ops/s
Iteration  10: 1003168.214 ops/s
Iteration  11: 1001693.355 ops/s
Iteration  12: 1001386.584 ops/s
Iteration  13: 997408.798 ops/s
Iteration  14: 1000491.191 ops/s
Iteration  15: 1003724.500 ops/s
Iteration  16: 981343.161 ops/s
Iteration  17: 1003428.159 ops/s
Iteration  18: 1002367.802 ops/s
Iteration  19: 986376.992 ops/s
Iteration  20: 1001668.242 ops/s
Iteration  21: 1000215.716 ops/s
Iteration  22: 1000372.679 ops/s
Iteration  23: 998679.702 ops/s
Iteration  24: 1004775.421 ops/s
Iteration  25: 1007614.559 ops/s
Iteration  26: 998966.941 ops/s
Iteration  27: 1001097.453 ops/s
Iteration  28: 1002252.023 ops/s
Iteration  29: 994313.548 ops/s
Iteration  30: 995055.210 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupBy":
  997928.073 ±(99.9%) 7029.739 ops/s [Average]
  (min, avg, max) = (949513.091, 997928.073, 1007614.559), stdev = 10521.783
  CI (99.9%): [990898.334, 1004957.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_groupBy  thrpt   30  997928.073 ± 7029.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133217.743 ops/s
# Warmup Iteration   2: 225859.073 ops/s
# Warmup Iteration   3: 267940.437 ops/s
# Warmup Iteration   4: 266894.460 ops/s
# Warmup Iteration   5: 267286.862 ops/s
# Warmup Iteration   6: 222134.490 ops/s
# Warmup Iteration   7: 264166.595 ops/s
# Warmup Iteration   8: 269187.546 ops/s
# Warmup Iteration   9: 269708.417 ops/s
# Warmup Iteration  10: 269877.502 ops/s
# Warmup Iteration  11: 267153.470 ops/s
# Warmup Iteration  12: 269083.989 ops/s
# Warmup Iteration  13: 268293.242 ops/s
# Warmup Iteration  14: 267184.625 ops/s
# Warmup Iteration  15: 269855.521 ops/s
# Warmup Iteration  16: 265916.270 ops/s
# Warmup Iteration  17: 269277.791 ops/s
# Warmup Iteration  18: 269810.178 ops/s
# Warmup Iteration  19: 269554.907 ops/s
# Warmup Iteration  20: 269160.171 ops/s
# Warmup Iteration  21: 269900.738 ops/s
# Warmup Iteration  22: 267969.776 ops/s
# Warmup Iteration  23: 270035.118 ops/s
# Warmup Iteration  24: 269849.850 ops/s
# Warmup Iteration  25: 269658.937 ops/s
# Warmup Iteration  26: 270116.308 ops/s
# Warmup Iteration  27: 269470.436 ops/s
# Warmup Iteration  28: 269559.066 ops/s
# Warmup Iteration  29: 265099.721 ops/s
# Warmup Iteration  30: 269963.496 ops/s
Iteration   1: 270218.338 ops/s
Iteration   2: 269483.471 ops/s
Iteration   3: 270580.015 ops/s
Iteration   4: 264276.698 ops/s
Iteration   5: 270246.131 ops/s
Iteration   6: 268275.678 ops/s
Iteration   7: 270157.671 ops/s
Iteration   8: 266047.068 ops/s
Iteration   9: 268847.800 ops/s
Iteration  10: 270580.849 ops/s
Iteration  11: 269880.816 ops/s
Iteration  12: 270113.625 ops/s
Iteration  13: 269191.078 ops/s
Iteration  14: 270518.660 ops/s
Iteration  15: 270337.830 ops/s
Iteration  16: 270393.481 ops/s
Iteration  17: 269210.924 ops/s
Iteration  18: 270463.907 ops/s
Iteration  19: 269535.921 ops/s
Iteration  20: 268165.927 ops/s
Iteration  21: 269105.220 ops/s
Iteration  22: 265934.569 ops/s
Iteration  23: 269502.358 ops/s
Iteration  24: 269945.168 ops/s
Iteration  25: 269709.466 ops/s
Iteration  26: 269599.006 ops/s
Iteration  27: 268941.311 ops/s
Iteration  28: 269835.943 ops/s
Iteration  29: 270416.338 ops/s
Iteration  30: 269730.395 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByEach":
  269308.189 ±(99.9%) 994.482 ops/s [Average]
  (min, avg, max) = (264276.698, 269308.189, 270580.849), stdev = 1488.494
  CI (99.9%): [268313.707, 270302.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_groupByEach  thrpt   30  269308.189 ± 994.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5361895.184 ops/s
# Warmup Iteration   2: 12223287.136 ops/s
# Warmup Iteration   3: 12393357.799 ops/s
# Warmup Iteration   4: 10169641.935 ops/s
# Warmup Iteration   5: 12435819.967 ops/s
# Warmup Iteration   6: 12447654.493 ops/s
# Warmup Iteration   7: 12448668.201 ops/s
# Warmup Iteration   8: 12398857.937 ops/s
# Warmup Iteration   9: 12488737.322 ops/s
# Warmup Iteration  10: 12369249.062 ops/s
# Warmup Iteration  11: 12487547.989 ops/s
# Warmup Iteration  12: 12483180.241 ops/s
# Warmup Iteration  13: 12369259.846 ops/s
# Warmup Iteration  14: 12370329.129 ops/s
# Warmup Iteration  15: 12502975.758 ops/s
# Warmup Iteration  16: 12485386.229 ops/s
# Warmup Iteration  17: 12471183.081 ops/s
# Warmup Iteration  18: 12468623.006 ops/s
# Warmup Iteration  19: 12508874.512 ops/s
# Warmup Iteration  20: 12482665.914 ops/s
# Warmup Iteration  21: 12477823.616 ops/s
# Warmup Iteration  22: 12483193.404 ops/s
# Warmup Iteration  23: 12440568.254 ops/s
# Warmup Iteration  24: 12392180.615 ops/s
# Warmup Iteration  25: 12489154.448 ops/s
# Warmup Iteration  26: 12483580.646 ops/s
# Warmup Iteration  27: 12453714.725 ops/s
# Warmup Iteration  28: 12503832.461 ops/s
# Warmup Iteration  29: 12486605.781 ops/s
# Warmup Iteration  30: 12504461.675 ops/s
Iteration   1: 12488134.354 ops/s
Iteration   2: 12482200.598 ops/s
Iteration   3: 12498401.135 ops/s
Iteration   4: 12501083.364 ops/s
Iteration   5: 12502395.113 ops/s
Iteration   6: 12377522.342 ops/s
Iteration   7: 12121234.857 ops/s
Iteration   8: 12430801.764 ops/s
Iteration   9: 12470039.148 ops/s
Iteration  10: 12483404.815 ops/s
Iteration  11: 12471616.547 ops/s
Iteration  12: 12446710.345 ops/s
Iteration  13: 12473602.984 ops/s
Iteration  14: 12432603.306 ops/s
Iteration  15: 12467349.495 ops/s
Iteration  16: 12482734.840 ops/s
Iteration  17: 12511916.611 ops/s
Iteration  18: 12475558.370 ops/s
Iteration  19: 12466313.112 ops/s
Iteration  20: 12470082.989 ops/s
Iteration  21: 12453720.732 ops/s
Iteration  22: 12464160.291 ops/s
Iteration  23: 12453341.024 ops/s
Iteration  24: 12444226.452 ops/s
Iteration  25: 12467449.922 ops/s
Iteration  26: 12472314.416 ops/s
Iteration  27: 12464577.940 ops/s
Iteration  28: 12481342.947 ops/s
Iteration  29: 12342283.274 ops/s
Iteration  30: 12495743.866 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey":
  12453095.565 ±(99.9%) 47881.058 ops/s [Average]
  (min, avg, max) = (12121234.857, 12453095.565, 12511916.611), stdev = 71666.119
  CI (99.9%): [12405214.507, 12500976.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  12453095.565 ± 47881.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2651203.505 ops/s
# Warmup Iteration   2: 5826084.220 ops/s
# Warmup Iteration   3: 6016499.337 ops/s
# Warmup Iteration   4: 5639444.822 ops/s
# Warmup Iteration   5: 5365087.277 ops/s
# Warmup Iteration   6: 5999771.710 ops/s
# Warmup Iteration   7: 5993258.872 ops/s
# Warmup Iteration   8: 5980607.901 ops/s
# Warmup Iteration   9: 5997851.495 ops/s
# Warmup Iteration  10: 5992420.212 ops/s
# Warmup Iteration  11: 5992802.207 ops/s
# Warmup Iteration  12: 5960669.500 ops/s
# Warmup Iteration  13: 6004432.876 ops/s
# Warmup Iteration  14: 5902853.415 ops/s
# Warmup Iteration  15: 5963177.547 ops/s
# Warmup Iteration  16: 5997196.561 ops/s
# Warmup Iteration  17: 6065392.132 ops/s
# Warmup Iteration  18: 6056869.496 ops/s
# Warmup Iteration  19: 6077169.581 ops/s
# Warmup Iteration  20: 5991864.052 ops/s
# Warmup Iteration  21: 6078339.973 ops/s
# Warmup Iteration  22: 6065593.164 ops/s
# Warmup Iteration  23: 6079338.627 ops/s
# Warmup Iteration  24: 6064628.998 ops/s
# Warmup Iteration  25: 6074418.548 ops/s
# Warmup Iteration  26: 6073744.682 ops/s
# Warmup Iteration  27: 6074496.975 ops/s
# Warmup Iteration  28: 6087603.996 ops/s
# Warmup Iteration  29: 6065606.909 ops/s
# Warmup Iteration  30: 6066872.518 ops/s
Iteration   1: 6080849.193 ops/s
Iteration   2: 6051394.178 ops/s
Iteration   3: 6065835.831 ops/s
Iteration   4: 6077449.310 ops/s
Iteration   5: 6080760.595 ops/s
Iteration   6: 6070989.180 ops/s
Iteration   7: 5975735.337 ops/s
Iteration   8: 6082456.294 ops/s
Iteration   9: 6077508.067 ops/s
Iteration  10: 6071512.890 ops/s
Iteration  11: 6069622.138 ops/s
Iteration  12: 6059586.916 ops/s
Iteration  13: 6060038.726 ops/s
Iteration  14: 6066529.278 ops/s
Iteration  15: 6069721.168 ops/s
Iteration  16: 6083772.234 ops/s
Iteration  17: 6058686.054 ops/s
Iteration  18: 6069695.557 ops/s
Iteration  19: 6077346.565 ops/s
Iteration  20: 6097473.241 ops/s
Iteration  21: 6080044.437 ops/s
Iteration  22: 6072955.762 ops/s
Iteration  23: 5971779.100 ops/s
Iteration  24: 6055315.989 ops/s
Iteration  25: 6078853.082 ops/s
Iteration  26: 6072118.320 ops/s
Iteration  27: 6064592.382 ops/s
Iteration  28: 6051256.687 ops/s
Iteration  29: 6074240.230 ops/s
Iteration  30: 6058488.608 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target":
  6064220.245 ±(99.9%) 17842.973 ops/s [Average]
  (min, avg, max) = (5971779.100, 6064220.245, 6097473.241), stdev = 26706.524
  CI (99.9%): [6046377.272, 6082063.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  6064220.245 ± 17842.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 533626.869 ops/s
# Warmup Iteration   2: 599009.544 ops/s
# Warmup Iteration   3: 801849.371 ops/s
# Warmup Iteration   4: 797807.600 ops/s
# Warmup Iteration   5: 796317.321 ops/s
# Warmup Iteration   6: 799791.436 ops/s
# Warmup Iteration   7: 798657.863 ops/s
# Warmup Iteration   8: 801257.011 ops/s
# Warmup Iteration   9: 799984.307 ops/s
# Warmup Iteration  10: 668322.771 ops/s
# Warmup Iteration  11: 790120.651 ops/s
# Warmup Iteration  12: 789936.682 ops/s
# Warmup Iteration  13: 795313.980 ops/s
# Warmup Iteration  14: 793446.877 ops/s
# Warmup Iteration  15: 793665.884 ops/s
# Warmup Iteration  16: 799100.015 ops/s
# Warmup Iteration  17: 839675.291 ops/s
# Warmup Iteration  18: 834395.408 ops/s
# Warmup Iteration  19: 840193.849 ops/s
# Warmup Iteration  20: 829166.477 ops/s
# Warmup Iteration  21: 838609.233 ops/s
# Warmup Iteration  22: 840312.824 ops/s
# Warmup Iteration  23: 837052.520 ops/s
# Warmup Iteration  24: 836392.826 ops/s
# Warmup Iteration  25: 836784.432 ops/s
# Warmup Iteration  26: 839914.668 ops/s
# Warmup Iteration  27: 839870.576 ops/s
# Warmup Iteration  28: 834220.355 ops/s
# Warmup Iteration  29: 831997.106 ops/s
# Warmup Iteration  30: 837667.509 ops/s
Iteration   1: 828258.432 ops/s
Iteration   2: 839316.177 ops/s
Iteration   3: 829228.569 ops/s
Iteration   4: 829680.487 ops/s
Iteration   5: 839607.019 ops/s
Iteration   6: 838324.906 ops/s
Iteration   7: 840945.843 ops/s
Iteration   8: 811429.340 ops/s
Iteration   9: 841503.986 ops/s
Iteration  10: 839369.888 ops/s
Iteration  11: 842365.368 ops/s
Iteration  12: 840488.101 ops/s
Iteration  13: 839783.201 ops/s
Iteration  14: 840646.947 ops/s
Iteration  15: 839498.227 ops/s
Iteration  16: 834065.821 ops/s
Iteration  17: 842429.986 ops/s
Iteration  18: 842986.374 ops/s
Iteration  19: 839734.966 ops/s
Iteration  20: 837721.888 ops/s
Iteration  21: 841583.209 ops/s
Iteration  22: 832529.283 ops/s
Iteration  23: 840819.302 ops/s
Iteration  24: 831586.518 ops/s
Iteration  25: 827148.437 ops/s
Iteration  26: 839696.205 ops/s
Iteration  27: 839902.314 ops/s
Iteration  28: 843877.385 ops/s
Iteration  29: 829086.295 ops/s
Iteration  30: 840045.732 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  836788.674 ±(99.9%) 4584.215 ops/s [Average]
  (min, avg, max) = (811429.340, 836788.674, 843877.385), stdev = 6861.437
  CI (99.9%): [832204.459, 841372.888] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  836788.674 ± 4584.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577557.549 ops/s
# Warmup Iteration   2: 612759.669 ops/s
# Warmup Iteration   3: 819525.583 ops/s
# Warmup Iteration   4: 826902.183 ops/s
# Warmup Iteration   5: 820031.295 ops/s
# Warmup Iteration   6: 824742.777 ops/s
# Warmup Iteration   7: 817294.543 ops/s
# Warmup Iteration   8: 824488.649 ops/s
# Warmup Iteration   9: 825033.355 ops/s
# Warmup Iteration  10: 828798.558 ops/s
# Warmup Iteration  11: 677105.781 ops/s
# Warmup Iteration  12: 826571.757 ops/s
# Warmup Iteration  13: 826129.838 ops/s
# Warmup Iteration  14: 824968.892 ops/s
# Warmup Iteration  15: 826379.040 ops/s
# Warmup Iteration  16: 827211.026 ops/s
# Warmup Iteration  17: 867081.191 ops/s
# Warmup Iteration  18: 869369.371 ops/s
# Warmup Iteration  19: 867438.437 ops/s
# Warmup Iteration  20: 866430.248 ops/s
# Warmup Iteration  21: 870037.294 ops/s
# Warmup Iteration  22: 869263.379 ops/s
# Warmup Iteration  23: 854045.370 ops/s
# Warmup Iteration  24: 868583.665 ops/s
# Warmup Iteration  25: 861803.462 ops/s
# Warmup Iteration  26: 865720.735 ops/s
# Warmup Iteration  27: 863222.248 ops/s
# Warmup Iteration  28: 868153.993 ops/s
# Warmup Iteration  29: 868610.367 ops/s
# Warmup Iteration  30: 863628.223 ops/s
Iteration   1: 862502.298 ops/s
Iteration   2: 865818.836 ops/s
Iteration   3: 868337.428 ops/s
Iteration   4: 870171.248 ops/s
Iteration   5: 868439.679 ops/s
Iteration   6: 869240.061 ops/s
Iteration   7: 870034.533 ops/s
Iteration   8: 860305.243 ops/s
Iteration   9: 868980.693 ops/s
Iteration  10: 869501.764 ops/s
Iteration  11: 870845.534 ops/s
Iteration  12: 864986.137 ops/s
Iteration  13: 869981.603 ops/s
Iteration  14: 871705.918 ops/s
Iteration  15: 869643.808 ops/s
Iteration  16: 869142.887 ops/s
Iteration  17: 863218.768 ops/s
Iteration  18: 871597.349 ops/s
Iteration  19: 869981.607 ops/s
Iteration  20: 869619.243 ops/s
Iteration  21: 868705.318 ops/s
Iteration  22: 866161.789 ops/s
Iteration  23: 859221.500 ops/s
Iteration  24: 870654.797 ops/s
Iteration  25: 865305.262 ops/s
Iteration  26: 857139.653 ops/s
Iteration  27: 866767.873 ops/s
Iteration  28: 870497.470 ops/s
Iteration  29: 867071.870 ops/s
Iteration  30: 870379.717 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  867531.996 ±(99.9%) 2512.779 ops/s [Average]
  (min, avg, max) = (857139.653, 867531.996, 871705.918), stdev = 3761.010
  CI (99.9%): [865019.217, 870044.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  867531.996 ± 2512.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17644593.221 ops/s
# Warmup Iteration   2: 34005128.965 ops/s
# Warmup Iteration   3: 29109368.682 ops/s
# Warmup Iteration   4: 34251366.972 ops/s
# Warmup Iteration   5: 34535989.687 ops/s
# Warmup Iteration   6: 34776555.560 ops/s
# Warmup Iteration   7: 34767550.927 ops/s
# Warmup Iteration   8: 34772192.987 ops/s
# Warmup Iteration   9: 34603032.328 ops/s
# Warmup Iteration  10: 34732969.386 ops/s
# Warmup Iteration  11: 34512076.595 ops/s
# Warmup Iteration  12: 34599789.019 ops/s
# Warmup Iteration  13: 34542396.424 ops/s
# Warmup Iteration  14: 34334389.178 ops/s
# Warmup Iteration  15: 34923955.483 ops/s
# Warmup Iteration  16: 34504600.090 ops/s
# Warmup Iteration  17: 34819005.366 ops/s
# Warmup Iteration  18: 34797233.890 ops/s
# Warmup Iteration  19: 34767643.726 ops/s
# Warmup Iteration  20: 34799436.667 ops/s
# Warmup Iteration  21: 34464388.582 ops/s
# Warmup Iteration  22: 34757049.418 ops/s
# Warmup Iteration  23: 34740331.609 ops/s
# Warmup Iteration  24: 34433352.275 ops/s
# Warmup Iteration  25: 34788420.329 ops/s
# Warmup Iteration  26: 34793092.907 ops/s
# Warmup Iteration  27: 34543631.821 ops/s
# Warmup Iteration  28: 34528473.245 ops/s
# Warmup Iteration  29: 34711569.939 ops/s
# Warmup Iteration  30: 34735452.202 ops/s
Iteration   1: 34799023.237 ops/s
Iteration   2: 34633689.436 ops/s
Iteration   3: 34829405.450 ops/s
Iteration   4: 34949337.013 ops/s
Iteration   5: 34744140.273 ops/s
Iteration   6: 34624036.449 ops/s
Iteration   7: 34794350.223 ops/s
Iteration   8: 34684353.438 ops/s
Iteration   9: 34624407.876 ops/s
Iteration  10: 34759223.212 ops/s
Iteration  11: 34288383.187 ops/s
Iteration  12: 34763551.402 ops/s
Iteration  13: 34798071.139 ops/s
Iteration  14: 34720355.947 ops/s
Iteration  15: 34862376.508 ops/s
Iteration  16: 34772623.738 ops/s
Iteration  17: 34814770.817 ops/s
Iteration  18: 34812972.326 ops/s
Iteration  19: 34816584.581 ops/s
Iteration  20: 34806411.904 ops/s
Iteration  21: 34837701.095 ops/s
Iteration  22: 34809879.240 ops/s
Iteration  23: 34842615.855 ops/s
Iteration  24: 34816620.549 ops/s
Iteration  25: 34174502.238 ops/s
Iteration  26: 34672305.616 ops/s
Iteration  27: 34813466.261 ops/s
Iteration  28: 34879751.957 ops/s
Iteration  29: 34894947.317 ops/s
Iteration  30: 34179323.074 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_indexOf":
  34727306.045 ±(99.9%) 127673.545 ops/s [Average]
  (min, avg, max) = (34174502.238, 34727306.045, 34949337.013), stdev = 191095.767
  CI (99.9%): [34599632.500, 34854979.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_indexOf  thrpt   30  34727306.045 ± 127673.545  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34095447.308 ops/s
# Warmup Iteration   2: 65659405.168 ops/s
# Warmup Iteration   3: 56064480.283 ops/s
# Warmup Iteration   4: 66220374.378 ops/s
# Warmup Iteration   5: 66114100.479 ops/s
# Warmup Iteration   6: 65892276.172 ops/s
# Warmup Iteration   7: 65891890.413 ops/s
# Warmup Iteration   8: 65508715.145 ops/s
# Warmup Iteration   9: 65936895.757 ops/s
# Warmup Iteration  10: 65890738.149 ops/s
# Warmup Iteration  11: 66230645.639 ops/s
# Warmup Iteration  12: 66020245.006 ops/s
# Warmup Iteration  13: 66138853.200 ops/s
# Warmup Iteration  14: 65950461.532 ops/s
# Warmup Iteration  15: 66047277.953 ops/s
# Warmup Iteration  16: 66172828.803 ops/s
# Warmup Iteration  17: 65926687.199 ops/s
# Warmup Iteration  18: 65618336.652 ops/s
# Warmup Iteration  19: 66041588.007 ops/s
# Warmup Iteration  20: 65964444.899 ops/s
# Warmup Iteration  21: 65334516.770 ops/s
# Warmup Iteration  22: 65761723.504 ops/s
# Warmup Iteration  23: 65950343.324 ops/s
# Warmup Iteration  24: 65813987.256 ops/s
# Warmup Iteration  25: 65908282.811 ops/s
# Warmup Iteration  26: 65828046.454 ops/s
# Warmup Iteration  27: 65184791.990 ops/s
# Warmup Iteration  28: 64932477.874 ops/s
# Warmup Iteration  29: 65692044.153 ops/s
# Warmup Iteration  30: 65205684.786 ops/s
Iteration   1: 65856457.285 ops/s
Iteration   2: 65957416.902 ops/s
Iteration   3: 65724873.039 ops/s
Iteration   4: 65835470.299 ops/s
Iteration   5: 65850786.173 ops/s
Iteration   6: 65858370.636 ops/s
Iteration   7: 65973513.062 ops/s
Iteration   8: 65773807.091 ops/s
Iteration   9: 65838327.253 ops/s
Iteration  10: 65809131.687 ops/s
Iteration  11: 65826106.317 ops/s
Iteration  12: 66059004.202 ops/s
Iteration  13: 65738239.376 ops/s
Iteration  14: 65763609.257 ops/s
Iteration  15: 66022205.373 ops/s
Iteration  16: 65503494.292 ops/s
Iteration  17: 65596275.342 ops/s
Iteration  18: 65953853.641 ops/s
Iteration  19: 64635958.677 ops/s
Iteration  20: 65723881.333 ops/s
Iteration  21: 65827151.649 ops/s
Iteration  22: 65783071.353 ops/s
Iteration  23: 65994701.964 ops/s
Iteration  24: 65087875.087 ops/s
Iteration  25: 65905187.015 ops/s
Iteration  26: 65737232.488 ops/s
Iteration  27: 63578738.981 ops/s
Iteration  28: 65731872.301 ops/s
Iteration  29: 66097099.837 ops/s
Iteration  30: 65416754.613 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectInto":
  65682015.551 ±(99.9%) 328869.224 ops/s [Average]
  (min, avg, max) = (63578738.981, 65682015.551, 66097099.837), stdev = 492236.010
  CI (99.9%): [65353146.326, 66010884.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_injectInto  thrpt   30  65682015.551 ± 328869.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23985467.167 ops/s
# Warmup Iteration   2: 47183816.920 ops/s
# Warmup Iteration   3: 39661716.517 ops/s
# Warmup Iteration   4: 47506293.055 ops/s
# Warmup Iteration   5: 47614519.994 ops/s
# Warmup Iteration   6: 47475030.025 ops/s
# Warmup Iteration   7: 47312943.076 ops/s
# Warmup Iteration   8: 47521069.239 ops/s
# Warmup Iteration   9: 47369093.243 ops/s
# Warmup Iteration  10: 47549425.387 ops/s
# Warmup Iteration  11: 47518070.281 ops/s
# Warmup Iteration  12: 47423936.751 ops/s
# Warmup Iteration  13: 47481384.978 ops/s
# Warmup Iteration  14: 46988664.009 ops/s
# Warmup Iteration  15: 47536016.838 ops/s
# Warmup Iteration  16: 47025206.713 ops/s
# Warmup Iteration  17: 47611141.890 ops/s
# Warmup Iteration  18: 47102942.167 ops/s
# Warmup Iteration  19: 47508082.503 ops/s
# Warmup Iteration  20: 47508689.114 ops/s
# Warmup Iteration  21: 47358823.151 ops/s
# Warmup Iteration  22: 47537307.306 ops/s
# Warmup Iteration  23: 47627357.803 ops/s
# Warmup Iteration  24: 47199688.575 ops/s
# Warmup Iteration  25: 46948934.763 ops/s
# Warmup Iteration  26: 47163532.454 ops/s
# Warmup Iteration  27: 47571765.623 ops/s
# Warmup Iteration  28: 47597955.888 ops/s
# Warmup Iteration  29: 47511373.698 ops/s
# Warmup Iteration  30: 47607989.462 ops/s
Iteration   1: 47556617.055 ops/s
Iteration   2: 47335363.309 ops/s
Iteration   3: 47562896.453 ops/s
Iteration   4: 47329249.759 ops/s
Iteration   5: 47535573.173 ops/s
Iteration   6: 47500861.753 ops/s
Iteration   7: 47454270.610 ops/s
Iteration   8: 47616655.339 ops/s
Iteration   9: 47419895.764 ops/s
Iteration  10: 47575826.446 ops/s
Iteration  11: 47710225.673 ops/s
Iteration  12: 47644991.460 ops/s
Iteration  13: 47409955.856 ops/s
Iteration  14: 47532677.653 ops/s
Iteration  15: 47647719.708 ops/s
Iteration  16: 47503176.910 ops/s
Iteration  17: 47564718.039 ops/s
Iteration  18: 47405254.941 ops/s
Iteration  19: 47593470.426 ops/s
Iteration  20: 47593156.131 ops/s
Iteration  21: 47662067.325 ops/s
Iteration  22: 47636874.524 ops/s
Iteration  23: 47440105.414 ops/s
Iteration  24: 47642581.911 ops/s
Iteration  25: 47674654.190 ops/s
Iteration  26: 47553978.703 ops/s
Iteration  27: 47527993.308 ops/s
Iteration  28: 47458699.054 ops/s
Iteration  29: 47329108.097 ops/s
Iteration  30: 47656913.525 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoDouble":
  47535851.084 ±(99.9%) 72283.450 ops/s [Average]
  (min, avg, max) = (47329108.097, 47535851.084, 47710225.673), stdev = 108190.473
  CI (99.9%): [47463567.633, 47608134.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  47535851.084 ± 72283.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23909632.825 ops/s
# Warmup Iteration   2: 50236042.966 ops/s
# Warmup Iteration   3: 39815174.885 ops/s
# Warmup Iteration   4: 46352179.733 ops/s
# Warmup Iteration   5: 46581745.095 ops/s
# Warmup Iteration   6: 46590102.549 ops/s
# Warmup Iteration   7: 46568667.234 ops/s
# Warmup Iteration   8: 46434576.437 ops/s
# Warmup Iteration   9: 46371751.543 ops/s
# Warmup Iteration  10: 46629704.175 ops/s
# Warmup Iteration  11: 46522362.515 ops/s
# Warmup Iteration  12: 46004850.180 ops/s
# Warmup Iteration  13: 46461950.312 ops/s
# Warmup Iteration  14: 46233397.873 ops/s
# Warmup Iteration  15: 46560193.535 ops/s
# Warmup Iteration  16: 46542397.994 ops/s
# Warmup Iteration  17: 46759483.854 ops/s
# Warmup Iteration  18: 47065110.647 ops/s
# Warmup Iteration  19: 47036510.629 ops/s
# Warmup Iteration  20: 46565989.658 ops/s
# Warmup Iteration  21: 47136264.090 ops/s
# Warmup Iteration  22: 47053224.042 ops/s
# Warmup Iteration  23: 46670492.514 ops/s
# Warmup Iteration  24: 47048439.064 ops/s
# Warmup Iteration  25: 46513695.662 ops/s
# Warmup Iteration  26: 46838599.640 ops/s
# Warmup Iteration  27: 47057408.916 ops/s
# Warmup Iteration  28: 47009229.062 ops/s
# Warmup Iteration  29: 47065304.968 ops/s
# Warmup Iteration  30: 47104729.659 ops/s
Iteration   1: 47080095.619 ops/s
Iteration   2: 47088218.390 ops/s
Iteration   3: 47193663.613 ops/s
Iteration   4: 46930623.541 ops/s
Iteration   5: 47078573.073 ops/s
Iteration   6: 46059661.671 ops/s
Iteration   7: 46982901.525 ops/s
Iteration   8: 47155932.317 ops/s
Iteration   9: 47013305.855 ops/s
Iteration  10: 47142426.753 ops/s
Iteration  11: 47139280.064 ops/s
Iteration  12: 46897939.574 ops/s
Iteration  13: 47088710.672 ops/s
Iteration  14: 46916481.102 ops/s
Iteration  15: 46271625.497 ops/s
Iteration  16: 47079305.394 ops/s
Iteration  17: 47079635.092 ops/s
Iteration  18: 46819470.698 ops/s
Iteration  19: 47054175.327 ops/s
Iteration  20: 46808190.266 ops/s
Iteration  21: 46942250.868 ops/s
Iteration  22: 47077180.070 ops/s
Iteration  23: 47031511.093 ops/s
Iteration  24: 46715761.449 ops/s
Iteration  25: 46271790.043 ops/s
Iteration  26: 47157987.037 ops/s
Iteration  27: 47019782.935 ops/s
Iteration  28: 46979955.941 ops/s
Iteration  29: 47035329.100 ops/s
Iteration  30: 47126043.254 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoFloat":
  46941260.261 ±(99.9%) 184556.559 ops/s [Average]
  (min, avg, max) = (46059661.671, 46941260.261, 47193663.613), stdev = 276235.590
  CI (99.9%): [46756703.702, 47125816.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  46941260.261 ± 184556.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27171113.285 ops/s
# Warmup Iteration   2: 52494977.505 ops/s
# Warmup Iteration   3: 45087789.915 ops/s
# Warmup Iteration   4: 53496835.608 ops/s
# Warmup Iteration   5: 53510076.243 ops/s
# Warmup Iteration   6: 52961559.111 ops/s
# Warmup Iteration   7: 53005356.228 ops/s
# Warmup Iteration   8: 53933041.086 ops/s
# Warmup Iteration   9: 53437230.159 ops/s
# Warmup Iteration  10: 53565066.845 ops/s
# Warmup Iteration  11: 53543146.877 ops/s
# Warmup Iteration  12: 53754611.404 ops/s
# Warmup Iteration  13: 53524343.332 ops/s
# Warmup Iteration  14: 52703446.274 ops/s
# Warmup Iteration  15: 53802642.799 ops/s
# Warmup Iteration  16: 54023916.450 ops/s
# Warmup Iteration  17: 53155677.996 ops/s
# Warmup Iteration  18: 53863166.451 ops/s
# Warmup Iteration  19: 54117084.634 ops/s
# Warmup Iteration  20: 53958126.546 ops/s
# Warmup Iteration  21: 54034385.054 ops/s
# Warmup Iteration  22: 54017108.334 ops/s
# Warmup Iteration  23: 54129181.371 ops/s
# Warmup Iteration  24: 53876439.307 ops/s
# Warmup Iteration  25: 53846405.525 ops/s
# Warmup Iteration  26: 54086771.916 ops/s
# Warmup Iteration  27: 54129712.804 ops/s
# Warmup Iteration  28: 54003166.567 ops/s
# Warmup Iteration  29: 54168476.941 ops/s
# Warmup Iteration  30: 54142181.158 ops/s
Iteration   1: 53953335.680 ops/s
Iteration   2: 53967188.632 ops/s
Iteration   3: 53879593.015 ops/s
Iteration   4: 54180324.717 ops/s
Iteration   5: 53812801.428 ops/s
Iteration   6: 53930035.306 ops/s
Iteration   7: 54320370.172 ops/s
Iteration   8: 54189344.497 ops/s
Iteration   9: 54122475.220 ops/s
Iteration  10: 54295766.828 ops/s
Iteration  11: 53440433.924 ops/s
Iteration  12: 54074235.971 ops/s
Iteration  13: 54084604.898 ops/s
Iteration  14: 53837716.922 ops/s
Iteration  15: 53234313.459 ops/s
Iteration  16: 54168914.967 ops/s
Iteration  17: 53908466.265 ops/s
Iteration  18: 54137318.249 ops/s
Iteration  19: 54189801.241 ops/s
Iteration  20: 53516974.828 ops/s
Iteration  21: 54186137.339 ops/s
Iteration  22: 54145261.722 ops/s
Iteration  23: 53960284.985 ops/s
Iteration  24: 54165272.512 ops/s
Iteration  25: 54280573.625 ops/s
Iteration  26: 53987251.880 ops/s
Iteration  27: 54356088.759 ops/s
Iteration  28: 53473232.241 ops/s
Iteration  29: 53307182.474 ops/s
Iteration  30: 54163516.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoInt":
  53975627.267 ±(99.9%) 202017.044 ops/s [Average]
  (min, avg, max) = (53234313.459, 53975627.267, 54356088.759), stdev = 302369.624
  CI (99.9%): [53773610.223, 54177644.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  53975627.267 ± 202017.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27125026.587 ops/s
# Warmup Iteration   2: 54543864.203 ops/s
# Warmup Iteration   3: 48030651.650 ops/s
# Warmup Iteration   4: 57343086.623 ops/s
# Warmup Iteration   5: 57299783.291 ops/s
# Warmup Iteration   6: 57017573.076 ops/s
# Warmup Iteration   7: 56372231.083 ops/s
# Warmup Iteration   8: 57399164.740 ops/s
# Warmup Iteration   9: 57258267.081 ops/s
# Warmup Iteration  10: 56856630.213 ops/s
# Warmup Iteration  11: 57295393.654 ops/s
# Warmup Iteration  12: 57193768.349 ops/s
# Warmup Iteration  13: 57204816.023 ops/s
# Warmup Iteration  14: 57330296.392 ops/s
# Warmup Iteration  15: 57355666.974 ops/s
# Warmup Iteration  16: 57198494.724 ops/s
# Warmup Iteration  17: 56939576.632 ops/s
# Warmup Iteration  18: 57345426.489 ops/s
# Warmup Iteration  19: 57168589.626 ops/s
# Warmup Iteration  20: 57432653.922 ops/s
# Warmup Iteration  21: 56936049.858 ops/s
# Warmup Iteration  22: 57377924.550 ops/s
# Warmup Iteration  23: 57306989.870 ops/s
# Warmup Iteration  24: 57312132.960 ops/s
# Warmup Iteration  25: 57455719.895 ops/s
# Warmup Iteration  26: 57355680.825 ops/s
# Warmup Iteration  27: 57474714.863 ops/s
# Warmup Iteration  28: 57243525.608 ops/s
# Warmup Iteration  29: 57168115.976 ops/s
# Warmup Iteration  30: 57220723.132 ops/s
Iteration   1: 57063350.376 ops/s
Iteration   2: 57131879.625 ops/s
Iteration   3: 57226699.708 ops/s
Iteration   4: 57316895.637 ops/s
Iteration   5: 57393330.988 ops/s
Iteration   6: 57548922.908 ops/s
Iteration   7: 57314443.392 ops/s
Iteration   8: 56384273.876 ops/s
Iteration   9: 57368809.376 ops/s
Iteration  10: 57194110.485 ops/s
Iteration  11: 56435669.797 ops/s
Iteration  12: 57005226.385 ops/s
Iteration  13: 57441024.182 ops/s
Iteration  14: 56992216.852 ops/s
Iteration  15: 57011633.888 ops/s
Iteration  16: 56400250.206 ops/s
Iteration  17: 56265553.730 ops/s
Iteration  18: 57410447.807 ops/s
Iteration  19: 57049050.038 ops/s
Iteration  20: 57064912.951 ops/s
Iteration  21: 57273872.097 ops/s
Iteration  22: 57447851.458 ops/s
Iteration  23: 57308299.662 ops/s
Iteration  24: 57284336.666 ops/s
Iteration  25: 57361240.857 ops/s
Iteration  26: 57252985.633 ops/s
Iteration  27: 56798380.934 ops/s
Iteration  28: 57190048.078 ops/s
Iteration  29: 57431555.819 ops/s
Iteration  30: 57266721.111 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoLong":
  57121133.151 ±(99.9%) 229042.865 ops/s [Average]
  (min, avg, max) = (56265553.730, 57121133.151, 57548922.908), stdev = 342820.603
  CI (99.9%): [56892090.286, 57350176.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  57121133.151 ± 229042.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31935727.321 ops/s
# Warmup Iteration   2: 59569908.240 ops/s
# Warmup Iteration   3: 50752648.011 ops/s
# Warmup Iteration   4: 59750477.546 ops/s
# Warmup Iteration   5: 60240004.107 ops/s
# Warmup Iteration   6: 59700202.072 ops/s
# Warmup Iteration   7: 59791552.512 ops/s
# Warmup Iteration   8: 60329370.200 ops/s
# Warmup Iteration   9: 60100176.868 ops/s
# Warmup Iteration  10: 60272666.636 ops/s
# Warmup Iteration  11: 59725893.556 ops/s
# Warmup Iteration  12: 60104161.255 ops/s
# Warmup Iteration  13: 60225912.544 ops/s
# Warmup Iteration  14: 60037802.749 ops/s
# Warmup Iteration  15: 59812376.555 ops/s
# Warmup Iteration  16: 60070098.943 ops/s
# Warmup Iteration  17: 59988958.701 ops/s
# Warmup Iteration  18: 60235942.934 ops/s
# Warmup Iteration  19: 59059292.591 ops/s
# Warmup Iteration  20: 60219887.868 ops/s
# Warmup Iteration  21: 60188062.679 ops/s
# Warmup Iteration  22: 59632729.822 ops/s
# Warmup Iteration  23: 60232418.185 ops/s
# Warmup Iteration  24: 59796122.154 ops/s
# Warmup Iteration  25: 60266144.583 ops/s
# Warmup Iteration  26: 60105671.305 ops/s
# Warmup Iteration  27: 60331074.313 ops/s
# Warmup Iteration  28: 59499077.596 ops/s
# Warmup Iteration  29: 60235148.188 ops/s
# Warmup Iteration  30: 59965499.092 ops/s
Iteration   1: 60394593.081 ops/s
Iteration   2: 60324033.562 ops/s
Iteration   3: 60323816.912 ops/s
Iteration   4: 60024346.174 ops/s
Iteration   5: 60269117.950 ops/s
Iteration   6: 59887369.449 ops/s
Iteration   7: 59977669.759 ops/s
Iteration   8: 60271892.461 ops/s
Iteration   9: 60215245.495 ops/s
Iteration  10: 60150864.839 ops/s
Iteration  11: 60322234.170 ops/s
Iteration  12: 59323286.163 ops/s
Iteration  13: 60315327.082 ops/s
Iteration  14: 59839159.329 ops/s
Iteration  15: 60117826.925 ops/s
Iteration  16: 60352348.516 ops/s
Iteration  17: 59201808.058 ops/s
Iteration  18: 60211835.063 ops/s
Iteration  19: 60206800.390 ops/s
Iteration  20: 59733825.389 ops/s
Iteration  21: 60105761.452 ops/s
Iteration  22: 60382542.305 ops/s
Iteration  23: 60204167.138 ops/s
Iteration  24: 60226452.889 ops/s
Iteration  25: 60205205.506 ops/s
Iteration  26: 60429100.823 ops/s
Iteration  27: 60127774.308 ops/s
Iteration  28: 59303112.582 ops/s
Iteration  29: 60081402.516 ops/s
Iteration  30: 60323725.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_injectIntoWith":
  60095088.186 ±(99.9%) 216114.835 ops/s [Average]
  (min, avg, max) = (59201808.058, 60095088.186, 60429100.823), stdev = 323470.535
  CI (99.9%): [59878973.351, 60311203.021] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_injectIntoWith  thrpt   30  60095088.186 ± 216114.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6471289.401 ops/s
# Warmup Iteration   2: 10651351.570 ops/s
# Warmup Iteration   3: 12472460.882 ops/s
# Warmup Iteration   4: 12597313.628 ops/s
# Warmup Iteration   5: 12598117.671 ops/s
# Warmup Iteration   6: 12617783.973 ops/s
# Warmup Iteration   7: 12425003.148 ops/s
# Warmup Iteration   8: 12480934.323 ops/s
# Warmup Iteration   9: 12567725.042 ops/s
# Warmup Iteration  10: 12547361.735 ops/s
# Warmup Iteration  11: 12596225.973 ops/s
# Warmup Iteration  12: 12555715.072 ops/s
# Warmup Iteration  13: 12368259.327 ops/s
# Warmup Iteration  14: 12481335.334 ops/s
# Warmup Iteration  15: 12474088.057 ops/s
# Warmup Iteration  16: 12606561.412 ops/s
# Warmup Iteration  17: 12552089.472 ops/s
# Warmup Iteration  18: 12622767.560 ops/s
# Warmup Iteration  19: 12449374.651 ops/s
# Warmup Iteration  20: 12502269.615 ops/s
# Warmup Iteration  21: 12556834.776 ops/s
# Warmup Iteration  22: 12542699.373 ops/s
# Warmup Iteration  23: 12565145.175 ops/s
# Warmup Iteration  24: 12475818.045 ops/s
# Warmup Iteration  25: 12570466.546 ops/s
# Warmup Iteration  26: 12427151.387 ops/s
# Warmup Iteration  27: 12596880.351 ops/s
# Warmup Iteration  28: 12570794.238 ops/s
# Warmup Iteration  29: 12476607.912 ops/s
# Warmup Iteration  30: 12463716.804 ops/s
Iteration   1: 12452476.214 ops/s
Iteration   2: 12585128.363 ops/s
Iteration   3: 12518594.703 ops/s
Iteration   4: 12471607.235 ops/s
Iteration   5: 12440040.756 ops/s
Iteration   6: 12496871.136 ops/s
Iteration   7: 12598760.946 ops/s
Iteration   8: 12567442.724 ops/s
Iteration   9: 12629645.914 ops/s
Iteration  10: 12602997.142 ops/s
Iteration  11: 12389662.553 ops/s
Iteration  12: 12601481.282 ops/s
Iteration  13: 12540614.362 ops/s
Iteration  14: 12403824.921 ops/s
Iteration  15: 12638831.149 ops/s
Iteration  16: 12631795.174 ops/s
Iteration  17: 12556587.604 ops/s
Iteration  18: 12605777.679 ops/s
Iteration  19: 12558557.381 ops/s
Iteration  20: 12611315.958 ops/s
Iteration  21: 12567764.641 ops/s
Iteration  22: 12619407.385 ops/s
Iteration  23: 12650576.753 ops/s
Iteration  24: 12554745.088 ops/s
Iteration  25: 12594113.275 ops/s
Iteration  26: 12604336.479 ops/s
Iteration  27: 12559090.537 ops/s
Iteration  28: 12396152.602 ops/s
Iteration  29: 12614695.982 ops/s
Iteration  30: 12627441.474 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_isEmpty":
  12556344.580 ±(99.9%) 50988.225 ops/s [Average]
  (min, avg, max) = (12389662.553, 12556344.580, 12650576.753), stdev = 76316.780
  CI (99.9%): [12505356.356, 12607332.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_isEmpty  thrpt   30  12556344.580 ± 50988.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34657372.761 ops/s
# Warmup Iteration   2: 64734821.734 ops/s
# Warmup Iteration   3: 55423558.458 ops/s
# Warmup Iteration   4: 60264154.541 ops/s
# Warmup Iteration   5: 60137954.800 ops/s
# Warmup Iteration   6: 60801398.170 ops/s
# Warmup Iteration   7: 60226714.924 ops/s
# Warmup Iteration   8: 60182442.354 ops/s
# Warmup Iteration   9: 60853209.337 ops/s
# Warmup Iteration  10: 60229754.035 ops/s
# Warmup Iteration  11: 60647101.053 ops/s
# Warmup Iteration  12: 60648688.165 ops/s
# Warmup Iteration  13: 60296696.452 ops/s
# Warmup Iteration  14: 60762627.004 ops/s
# Warmup Iteration  15: 60699892.228 ops/s
# Warmup Iteration  16: 60574176.878 ops/s
# Warmup Iteration  17: 60393994.098 ops/s
# Warmup Iteration  18: 60639919.281 ops/s
# Warmup Iteration  19: 60803141.049 ops/s
# Warmup Iteration  20: 60763743.882 ops/s
# Warmup Iteration  21: 60724324.732 ops/s
# Warmup Iteration  22: 60683130.965 ops/s
# Warmup Iteration  23: 59663292.074 ops/s
# Warmup Iteration  24: 60252069.869 ops/s
# Warmup Iteration  25: 60634484.081 ops/s
# Warmup Iteration  26: 60239578.839 ops/s
# Warmup Iteration  27: 60269339.544 ops/s
# Warmup Iteration  28: 60681521.736 ops/s
# Warmup Iteration  29: 60750106.121 ops/s
# Warmup Iteration  30: 60652588.802 ops/s
Iteration   1: 60560149.736 ops/s
Iteration   2: 60863849.999 ops/s
Iteration   3: 60564906.800 ops/s
Iteration   4: 60708565.298 ops/s
Iteration   5: 60492210.212 ops/s
Iteration   6: 60781898.397 ops/s
Iteration   7: 60517694.118 ops/s
Iteration   8: 60760347.445 ops/s
Iteration   9: 60559836.036 ops/s
Iteration  10: 60869723.304 ops/s
Iteration  11: 60637068.802 ops/s
Iteration  12: 60388581.441 ops/s
Iteration  13: 59814312.024 ops/s
Iteration  14: 60806538.202 ops/s
Iteration  15: 60264910.812 ops/s
Iteration  16: 58512842.329 ops/s
Iteration  17: 59448076.644 ops/s
Iteration  18: 60583772.465 ops/s
Iteration  19: 60653827.292 ops/s
Iteration  20: 60599491.603 ops/s
Iteration  21: 60506313.644 ops/s
Iteration  22: 59647528.493 ops/s
Iteration  23: 60545691.645 ops/s
Iteration  24: 60515810.264 ops/s
Iteration  25: 59650440.353 ops/s
Iteration  26: 60496274.164 ops/s
Iteration  27: 60565997.732 ops/s
Iteration  28: 60649222.599 ops/s
Iteration  29: 60594361.170 ops/s
Iteration  30: 60529711.916 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator":
  60402998.498 ±(99.9%) 338021.232 ops/s [Average]
  (min, avg, max) = (58512842.329, 60402998.498, 60869723.304), stdev = 505934.306
  CI (99.9%): [60064977.266, 60741019.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_iterator  thrpt   30  60402998.498 ± 338021.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366743.785 ops/s
# Warmup Iteration   2: 376686.193 ops/s
# Warmup Iteration   3: 426275.117 ops/s
# Warmup Iteration   4: 463859.138 ops/s
# Warmup Iteration   5: 464786.710 ops/s
# Warmup Iteration   6: 466202.597 ops/s
# Warmup Iteration   7: 465844.063 ops/s
# Warmup Iteration   8: 466040.108 ops/s
# Warmup Iteration   9: 464761.706 ops/s
# Warmup Iteration  10: 462954.450 ops/s
# Warmup Iteration  11: 466419.534 ops/s
# Warmup Iteration  12: 464398.656 ops/s
# Warmup Iteration  13: 463503.874 ops/s
# Warmup Iteration  14: 462689.311 ops/s
# Warmup Iteration  15: 393694.519 ops/s
# Warmup Iteration  16: 465467.473 ops/s
# Warmup Iteration  17: 487765.894 ops/s
# Warmup Iteration  18: 488344.022 ops/s
# Warmup Iteration  19: 487163.884 ops/s
# Warmup Iteration  20: 483334.402 ops/s
# Warmup Iteration  21: 485684.350 ops/s
# Warmup Iteration  22: 484048.366 ops/s
# Warmup Iteration  23: 488951.888 ops/s
# Warmup Iteration  24: 480646.589 ops/s
# Warmup Iteration  25: 488397.154 ops/s
# Warmup Iteration  26: 488077.280 ops/s
# Warmup Iteration  27: 489593.580 ops/s
# Warmup Iteration  28: 488812.313 ops/s
# Warmup Iteration  29: 485843.733 ops/s
# Warmup Iteration  30: 484082.285 ops/s
Iteration   1: 489257.944 ops/s
Iteration   2: 481794.869 ops/s
Iteration   3: 488506.712 ops/s
Iteration   4: 484917.908 ops/s
Iteration   5: 488471.695 ops/s
Iteration   6: 489762.339 ops/s
Iteration   7: 474310.574 ops/s
Iteration   8: 490372.103 ops/s
Iteration   9: 479656.250 ops/s
Iteration  10: 488609.808 ops/s
Iteration  11: 487406.817 ops/s
Iteration  12: 470599.824 ops/s
Iteration  13: 485948.191 ops/s
Iteration  14: 490500.819 ops/s
Iteration  15: 485748.939 ops/s
Iteration  16: 487932.723 ops/s
Iteration  17: 490165.325 ops/s
Iteration  18: 489036.251 ops/s
Iteration  19: 484108.579 ops/s
Iteration  20: 487144.870 ops/s
Iteration  21: 488788.483 ops/s
Iteration  22: 486862.241 ops/s
Iteration  23: 487535.758 ops/s
Iteration  24: 486581.071 ops/s
Iteration  25: 478879.550 ops/s
Iteration  26: 478774.152 ops/s
Iteration  27: 489904.024 ops/s
Iteration  28: 489283.952 ops/s
Iteration  29: 489458.161 ops/s
Iteration  30: 483959.790 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_iterator_throws":
  485809.324 ±(99.9%) 3302.738 ops/s [Average]
  (min, avg, max) = (470599.824, 485809.324, 490500.819), stdev = 4943.382
  CI (99.9%): [482506.587, 489112.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_iterator_throws  thrpt   30  485809.324 ± 3302.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13.594 ops/s
# Warmup Iteration   2: 16.774 ops/s
# Warmup Iteration   3: 20.138 ops/s
# Warmup Iteration   4: 20.109 ops/s
# Warmup Iteration   5: 20.578 ops/s
# Warmup Iteration   6: 20.220 ops/s
# Warmup Iteration   7: 20.321 ops/s
# Warmup Iteration   8: 20.378 ops/s
# Warmup Iteration   9: 20.460 ops/s
# Warmup Iteration  10: 20.546 ops/s
# Warmup Iteration  11: 20.688 ops/s
# Warmup Iteration  12: 18.825 ops/s
# Warmup Iteration  13: 20.133 ops/s
# Warmup Iteration  14: 20.620 ops/s
# Warmup Iteration  15: 20.752 ops/s
# Warmup Iteration  16: 20.403 ops/s
# Warmup Iteration  17: 20.375 ops/s
# Warmup Iteration  18: 20.769 ops/s
# Warmup Iteration  19: 20.619 ops/s
# Warmup Iteration  20: 20.712 ops/s
# Warmup Iteration  21: 20.763 ops/s
# Warmup Iteration  22: 20.697 ops/s
# Warmup Iteration  23: 20.421 ops/s
# Warmup Iteration  24: 20.781 ops/s
# Warmup Iteration  25: 20.748 ops/s
# Warmup Iteration  26: 20.494 ops/s
# Warmup Iteration  27: 20.715 ops/s
# Warmup Iteration  28: 20.612 ops/s
# Warmup Iteration  29: 20.682 ops/s
# Warmup Iteration  30: 20.710 ops/s
Iteration   1: 20.587 ops/s
Iteration   2: 20.747 ops/s
Iteration   3: 20.637 ops/s
Iteration   4: 20.702 ops/s
Iteration   5: 20.605 ops/s
Iteration   6: 20.426 ops/s
Iteration   7: 20.397 ops/s
Iteration   8: 20.569 ops/s
Iteration   9: 20.318 ops/s
Iteration  10: 20.756 ops/s
Iteration  11: 20.446 ops/s
Iteration  12: 20.519 ops/s
Iteration  13: 20.562 ops/s
Iteration  14: 20.754 ops/s
Iteration  15: 20.183 ops/s
Iteration  16: 20.731 ops/s
Iteration  17: 20.614 ops/s
Iteration  18: 20.696 ops/s
Iteration  19: 20.589 ops/s
Iteration  20: 20.422 ops/s
Iteration  21: 20.504 ops/s
Iteration  22: 20.815 ops/s
Iteration  23: 20.859 ops/s
Iteration  24: 20.734 ops/s
Iteration  25: 20.703 ops/s
Iteration  26: 20.123 ops/s
Iteration  27: 20.910 ops/s
Iteration  28: 20.682 ops/s
Iteration  29: 20.524 ops/s
Iteration  30: 20.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  20.587 ±(99.9%) 0.124 ops/s [Average]
  (min, avg, max) = (20.123, 20.587, 20.910), stdev = 0.185
  CI (99.9%): [20.463, 20.710] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt   Score   Error  Units
FastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  20.587 ± 0.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11781673.960 ops/s
# Warmup Iteration   2: 23256382.104 ops/s
# Warmup Iteration   3: 19689636.337 ops/s
# Warmup Iteration   4: 23537222.872 ops/s
# Warmup Iteration   5: 23739241.676 ops/s
# Warmup Iteration   6: 23545064.143 ops/s
# Warmup Iteration   7: 23478153.177 ops/s
# Warmup Iteration   8: 23680227.549 ops/s
# Warmup Iteration   9: 23721124.259 ops/s
# Warmup Iteration  10: 23792113.333 ops/s
# Warmup Iteration  11: 23731675.197 ops/s
# Warmup Iteration  12: 23573045.776 ops/s
# Warmup Iteration  13: 23719211.685 ops/s
# Warmup Iteration  14: 23717655.482 ops/s
# Warmup Iteration  15: 23749516.107 ops/s
# Warmup Iteration  16: 23754073.882 ops/s
# Warmup Iteration  17: 23725803.837 ops/s
# Warmup Iteration  18: 23645842.257 ops/s
# Warmup Iteration  19: 23716164.224 ops/s
# Warmup Iteration  20: 23707960.009 ops/s
# Warmup Iteration  21: 23504085.321 ops/s
# Warmup Iteration  22: 23726349.361 ops/s
# Warmup Iteration  23: 23737644.119 ops/s
# Warmup Iteration  24: 23699147.459 ops/s
# Warmup Iteration  25: 23733586.510 ops/s
# Warmup Iteration  26: 23719245.234 ops/s
# Warmup Iteration  27: 23725523.081 ops/s
# Warmup Iteration  28: 23752277.292 ops/s
# Warmup Iteration  29: 23547689.058 ops/s
# Warmup Iteration  30: 23654186.516 ops/s
Iteration   1: 23325065.525 ops/s
Iteration   2: 23727867.095 ops/s
Iteration   3: 23685352.275 ops/s
Iteration   4: 23450774.868 ops/s
Iteration   5: 23653399.130 ops/s
Iteration   6: 23324486.274 ops/s
Iteration   7: 23798602.670 ops/s
Iteration   8: 23658702.746 ops/s
Iteration   9: 23784926.817 ops/s
Iteration  10: 23680979.069 ops/s
Iteration  11: 23734552.870 ops/s
Iteration  12: 23657187.980 ops/s
Iteration  13: 23742202.518 ops/s
Iteration  14: 23631624.600 ops/s
Iteration  15: 23757025.699 ops/s
Iteration  16: 23584150.485 ops/s
Iteration  17: 23683417.072 ops/s
Iteration  18: 23725633.302 ops/s
Iteration  19: 23739158.904 ops/s
Iteration  20: 22973011.912 ops/s
Iteration  21: 23707296.277 ops/s
Iteration  22: 23687710.024 ops/s
Iteration  23: 23768569.919 ops/s
Iteration  24: 23775447.975 ops/s
Iteration  25: 23639381.331 ops/s
Iteration  26: 23291671.844 ops/s
Iteration  27: 23677058.111 ops/s
Iteration  28: 22960751.088 ops/s
Iteration  29: 23708683.024 ops/s
Iteration  30: 23710208.825 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_lastIndexOf":
  23608163.341 ±(99.9%) 146700.700 ops/s [Average]
  (min, avg, max) = (22960751.088, 23608163.341, 23798602.670), stdev = 219574.718
  CI (99.9%): [23461462.641, 23754864.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  23608163.341 ± 146700.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23646662.210 ops/s
# Warmup Iteration   2: 45916085.450 ops/s
# Warmup Iteration   3: 41306280.710 ops/s
# Warmup Iteration   4: 49129360.807 ops/s
# Warmup Iteration   5: 49224151.224 ops/s
# Warmup Iteration   6: 49275332.431 ops/s
# Warmup Iteration   7: 49366602.519 ops/s
# Warmup Iteration   8: 49425849.986 ops/s
# Warmup Iteration   9: 49329674.219 ops/s
# Warmup Iteration  10: 49463353.890 ops/s
# Warmup Iteration  11: 49342160.978 ops/s
# Warmup Iteration  12: 49515627.298 ops/s
# Warmup Iteration  13: 48885051.268 ops/s
# Warmup Iteration  14: 49296831.377 ops/s
# Warmup Iteration  15: 49397183.362 ops/s
# Warmup Iteration  16: 49362375.836 ops/s
# Warmup Iteration  17: 49384280.814 ops/s
# Warmup Iteration  18: 49020032.539 ops/s
# Warmup Iteration  19: 48503705.102 ops/s
# Warmup Iteration  20: 49326629.161 ops/s
# Warmup Iteration  21: 49449516.281 ops/s
# Warmup Iteration  22: 49432687.195 ops/s
# Warmup Iteration  23: 48950290.922 ops/s
# Warmup Iteration  24: 49363863.054 ops/s
# Warmup Iteration  25: 49505237.570 ops/s
# Warmup Iteration  26: 48940396.500 ops/s
# Warmup Iteration  27: 49430429.829 ops/s
# Warmup Iteration  28: 49372888.261 ops/s
# Warmup Iteration  29: 49315967.264 ops/s
# Warmup Iteration  30: 49189117.611 ops/s
Iteration   1: 49223725.180 ops/s
Iteration   2: 49436663.993 ops/s
Iteration   3: 49453934.417 ops/s
Iteration   4: 49418164.690 ops/s
Iteration   5: 49371468.839 ops/s
Iteration   6: 49529614.261 ops/s
Iteration   7: 49445806.459 ops/s
Iteration   8: 49337112.261 ops/s
Iteration   9: 49295895.853 ops/s
Iteration  10: 47845872.175 ops/s
Iteration  11: 49516995.548 ops/s
Iteration  12: 48630083.111 ops/s
Iteration  13: 49482341.256 ops/s
Iteration  14: 49426921.484 ops/s
Iteration  15: 49454447.666 ops/s
Iteration  16: 49409011.007 ops/s
Iteration  17: 49435885.792 ops/s
Iteration  18: 49529872.595 ops/s
Iteration  19: 49549968.806 ops/s
Iteration  20: 49252177.184 ops/s
Iteration  21: 49386550.146 ops/s
Iteration  22: 49089351.420 ops/s
Iteration  23: 49468838.372 ops/s
Iteration  24: 49135379.545 ops/s
Iteration  25: 47993657.224 ops/s
Iteration  26: 49303821.013 ops/s
Iteration  27: 49408424.040 ops/s
Iteration  28: 49293221.424 ops/s
Iteration  29: 49142392.209 ops/s
Iteration  30: 49468142.727 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIterator":
  49257858.023 ±(99.9%) 271808.840 ops/s [Average]
  (min, avg, max) = (47845872.175, 49257858.023, 49549968.806), stdev = 406830.707
  CI (99.9%): [48986049.183, 49529666.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_listIterator  thrpt   30  49257858.023 ± 271808.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 777946.161 ops/s
# Warmup Iteration   2: 807986.938 ops/s
# Warmup Iteration   3: 1015725.411 ops/s
# Warmup Iteration   4: 1032391.446 ops/s
# Warmup Iteration   5: 1039595.585 ops/s
# Warmup Iteration   6: 1032695.073 ops/s
# Warmup Iteration   7: 1036887.725 ops/s
# Warmup Iteration   8: 1029463.240 ops/s
# Warmup Iteration   9: 1037294.831 ops/s
# Warmup Iteration  10: 1046033.315 ops/s
# Warmup Iteration  11: 1037685.023 ops/s
# Warmup Iteration  12: 966050.990 ops/s
# Warmup Iteration  13: 959246.846 ops/s
# Warmup Iteration  14: 1032153.441 ops/s
# Warmup Iteration  15: 1039945.717 ops/s
# Warmup Iteration  16: 1031608.941 ops/s
# Warmup Iteration  17: 1096726.790 ops/s
# Warmup Iteration  18: 1092113.989 ops/s
# Warmup Iteration  19: 1097528.002 ops/s
# Warmup Iteration  20: 1108834.443 ops/s
# Warmup Iteration  21: 1098948.833 ops/s
# Warmup Iteration  22: 1088905.577 ops/s
# Warmup Iteration  23: 1099783.105 ops/s
# Warmup Iteration  24: 1099874.996 ops/s
# Warmup Iteration  25: 1099504.335 ops/s
# Warmup Iteration  26: 1105869.176 ops/s
# Warmup Iteration  27: 1105163.218 ops/s
# Warmup Iteration  28: 1101747.715 ops/s
# Warmup Iteration  29: 1102669.807 ops/s
# Warmup Iteration  30: 1094580.211 ops/s
Iteration   1: 1102316.394 ops/s
Iteration   2: 1098282.521 ops/s
Iteration   3: 1107373.734 ops/s
Iteration   4: 1100006.532 ops/s
Iteration   5: 1087442.661 ops/s
Iteration   6: 1093511.436 ops/s
Iteration   7: 1094344.295 ops/s
Iteration   8: 1100757.125 ops/s
Iteration   9: 1092141.458 ops/s
Iteration  10: 1109540.255 ops/s
Iteration  11: 1102821.115 ops/s
Iteration  12: 1106138.449 ops/s
Iteration  13: 1083649.010 ops/s
Iteration  14: 1105530.672 ops/s
Iteration  15: 1102731.580 ops/s
Iteration  16: 1084993.087 ops/s
Iteration  17: 1092442.510 ops/s
Iteration  18: 1105493.191 ops/s
Iteration  19: 1100611.028 ops/s
Iteration  20: 1103642.349 ops/s
Iteration  21: 1098914.820 ops/s
Iteration  22: 1101694.611 ops/s
Iteration  23: 1103523.792 ops/s
Iteration  24: 1105362.905 ops/s
Iteration  25: 1099316.612 ops/s
Iteration  26: 1101076.500 ops/s
Iteration  27: 1105709.013 ops/s
Iteration  28: 1104564.069 ops/s
Iteration  29: 1104061.484 ops/s
Iteration  30: 1082825.277 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooBig":
  1099360.616 ±(99.9%) 4844.069 ops/s [Average]
  (min, avg, max) = (1082825.277, 1099360.616, 1109540.255), stdev = 7250.375
  CI (99.9%): [1094516.547, 1104204.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  1099360.616 ± 4844.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 792678.187 ops/s
# Warmup Iteration   2: 812752.321 ops/s
# Warmup Iteration   3: 1040194.405 ops/s
# Warmup Iteration   4: 1048313.985 ops/s
# Warmup Iteration   5: 1048599.782 ops/s
# Warmup Iteration   6: 1038725.150 ops/s
# Warmup Iteration   7: 1046395.864 ops/s
# Warmup Iteration   8: 1045953.188 ops/s
# Warmup Iteration   9: 1043470.222 ops/s
# Warmup Iteration  10: 1034961.281 ops/s
# Warmup Iteration  11: 1038012.329 ops/s
# Warmup Iteration  12: 911066.285 ops/s
# Warmup Iteration  13: 1017920.807 ops/s
# Warmup Iteration  14: 1046442.751 ops/s
# Warmup Iteration  15: 1036394.867 ops/s
# Warmup Iteration  16: 1037568.592 ops/s
# Warmup Iteration  17: 1107188.529 ops/s
# Warmup Iteration  18: 1111477.630 ops/s
# Warmup Iteration  19: 1112159.120 ops/s
# Warmup Iteration  20: 1102079.411 ops/s
# Warmup Iteration  21: 1108203.771 ops/s
# Warmup Iteration  22: 1113024.290 ops/s
# Warmup Iteration  23: 1109735.279 ops/s
# Warmup Iteration  24: 1111865.458 ops/s
# Warmup Iteration  25: 1093498.296 ops/s
# Warmup Iteration  26: 1110672.683 ops/s
# Warmup Iteration  27: 1111347.668 ops/s
# Warmup Iteration  28: 1097363.896 ops/s
# Warmup Iteration  29: 1112801.417 ops/s
# Warmup Iteration  30: 1107883.276 ops/s
Iteration   1: 1106624.640 ops/s
Iteration   2: 1106015.231 ops/s
Iteration   3: 1112439.028 ops/s
Iteration   4: 1093086.816 ops/s
Iteration   5: 1113118.765 ops/s
Iteration   6: 1109438.348 ops/s
Iteration   7: 1107394.628 ops/s
Iteration   8: 1097423.223 ops/s
Iteration   9: 1109453.761 ops/s
Iteration  10: 1112010.876 ops/s
Iteration  11: 1113513.380 ops/s
Iteration  12: 1113465.075 ops/s
Iteration  13: 1112784.841 ops/s
Iteration  14: 1110307.625 ops/s
Iteration  15: 1115815.599 ops/s
Iteration  16: 1092781.032 ops/s
Iteration  17: 1105856.688 ops/s
Iteration  18: 1106121.470 ops/s
Iteration  19: 1109919.767 ops/s
Iteration  20: 1112698.207 ops/s
Iteration  21: 1103288.228 ops/s
Iteration  22: 1112875.287 ops/s
Iteration  23: 1114433.018 ops/s
Iteration  24: 1108443.708 ops/s
Iteration  25: 1113023.426 ops/s
Iteration  26: 1111500.113 ops/s
Iteration  27: 1115590.858 ops/s
Iteration  28: 1112115.912 ops/s
Iteration  29: 1099358.502 ops/s
Iteration  30: 1111362.135 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1108742.006 ±(99.9%) 4097.486 ops/s [Average]
  (min, avg, max) = (1092781.032, 1108742.006, 1115815.599), stdev = 6132.925
  CI (99.9%): [1104644.520, 1112839.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1108742.006 ± 4097.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1495676.852 ops/s
# Warmup Iteration   2: 3498345.263 ops/s
# Warmup Iteration   3: 3534606.662 ops/s
# Warmup Iteration   4: 2861247.984 ops/s
# Warmup Iteration   5: 3526467.430 ops/s
# Warmup Iteration   6: 3520097.027 ops/s
# Warmup Iteration   7: 3518888.724 ops/s
# Warmup Iteration   8: 3519914.561 ops/s
# Warmup Iteration   9: 3424470.170 ops/s
# Warmup Iteration  10: 3518637.109 ops/s
# Warmup Iteration  11: 3527717.716 ops/s
# Warmup Iteration  12: 3538421.399 ops/s
# Warmup Iteration  13: 3540102.276 ops/s
# Warmup Iteration  14: 3511047.017 ops/s
# Warmup Iteration  15: 3543774.202 ops/s
# Warmup Iteration  16: 3526702.518 ops/s
# Warmup Iteration  17: 3526324.112 ops/s
# Warmup Iteration  18: 3533235.518 ops/s
# Warmup Iteration  19: 3537445.697 ops/s
# Warmup Iteration  20: 3502811.123 ops/s
# Warmup Iteration  21: 3517474.117 ops/s
# Warmup Iteration  22: 3516781.311 ops/s
# Warmup Iteration  23: 3492768.203 ops/s
# Warmup Iteration  24: 3535927.582 ops/s
# Warmup Iteration  25: 3501954.183 ops/s
# Warmup Iteration  26: 3538946.533 ops/s
# Warmup Iteration  27: 3511003.534 ops/s
# Warmup Iteration  28: 3525216.627 ops/s
# Warmup Iteration  29: 3489952.752 ops/s
# Warmup Iteration  30: 3537642.989 ops/s
Iteration   1: 3506811.362 ops/s
Iteration   2: 3529851.800 ops/s
Iteration   3: 3528170.581 ops/s
Iteration   4: 3506706.286 ops/s
Iteration   5: 3523373.348 ops/s
Iteration   6: 3538523.320 ops/s
Iteration   7: 3533048.061 ops/s
Iteration   8: 3523040.269 ops/s
Iteration   9: 3537960.640 ops/s
Iteration  10: 3525952.734 ops/s
Iteration  11: 3530277.609 ops/s
Iteration  12: 3491192.730 ops/s
Iteration  13: 3541424.338 ops/s
Iteration  14: 3471821.241 ops/s
Iteration  15: 3524677.357 ops/s
Iteration  16: 3515074.969 ops/s
Iteration  17: 3516452.461 ops/s
Iteration  18: 3499397.509 ops/s
Iteration  19: 3542526.082 ops/s
Iteration  20: 3538090.002 ops/s
Iteration  21: 3544284.285 ops/s
Iteration  22: 3546711.768 ops/s
Iteration  23: 3543360.543 ops/s
Iteration  24: 3532201.243 ops/s
Iteration  25: 3529919.478 ops/s
Iteration  26: 3471963.851 ops/s
Iteration  27: 3508974.098 ops/s
Iteration  28: 3509624.651 ops/s
Iteration  29: 3522398.253 ops/s
Iteration  30: 3524451.751 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeString":
  3521942.087 ±(99.9%) 13003.432 ops/s [Average]
  (min, avg, max) = (3471821.241, 3521942.087, 3546711.768), stdev = 19462.926
  CI (99.9%): [3508938.656, 3534945.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_makeString  thrpt   30  3521942.087 ± 13003.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringRecursion$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringRecursion

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1981530.044 ops/s
# Warmup Iteration   2: 4596143.053 ops/s
# Warmup Iteration   3: 4567222.192 ops/s
# Warmup Iteration   4: 3798612.864 ops/s
# Warmup Iteration   5: 4601959.659 ops/s
# Warmup Iteration   6: 4603509.548 ops/s
# Warmup Iteration   7: 4625694.270 ops/s
# Warmup Iteration   8: 4572368.322 ops/s
# Warmup Iteration   9: 4601372.014 ops/s
# Warmup Iteration  10: 4595759.234 ops/s
# Warmup Iteration  11: 4612845.457 ops/s
# Warmup Iteration  12: 4605507.157 ops/s
# Warmup Iteration  13: 4617074.713 ops/s
# Warmup Iteration  14: 4613049.192 ops/s
# Warmup Iteration  15: 4613713.111 ops/s
# Warmup Iteration  16: 4576243.459 ops/s
# Warmup Iteration  17: 4607786.704 ops/s
# Warmup Iteration  18: 4620574.060 ops/s
# Warmup Iteration  19: 4622999.105 ops/s
# Warmup Iteration  20: 4623226.358 ops/s
# Warmup Iteration  21: 4615645.603 ops/s
# Warmup Iteration  22: 4617628.680 ops/s
# Warmup Iteration  23: 4605652.080 ops/s
# Warmup Iteration  24: 4628516.694 ops/s
# Warmup Iteration  25: 4598561.810 ops/s
# Warmup Iteration  26: 4617877.433 ops/s
# Warmup Iteration  27: 4621504.619 ops/s
# Warmup Iteration  28: 4607763.065 ops/s
# Warmup Iteration  29: 4590490.032 ops/s
# Warmup Iteration  30: 4620178.149 ops/s
Iteration   1: 4571508.492 ops/s
Iteration   2: 4605852.219 ops/s
Iteration   3: 4605528.497 ops/s
Iteration   4: 4574552.022 ops/s
Iteration   5: 4634770.238 ops/s
Iteration   6: 4603712.220 ops/s
Iteration   7: 4613325.309 ops/s
Iteration   8: 4589502.133 ops/s
Iteration   9: 4620230.483 ops/s
Iteration  10: 4605524.885 ops/s
Iteration  11: 4610595.522 ops/s
Iteration  12: 4608210.795 ops/s
Iteration  13: 4635943.194 ops/s
Iteration  14: 4543016.236 ops/s
Iteration  15: 4617018.617 ops/s
Iteration  16: 4592653.867 ops/s
Iteration  17: 4556922.737 ops/s
Iteration  18: 4545774.267 ops/s
Iteration  19: 4614875.476 ops/s
Iteration  20: 4529158.481 ops/s
Iteration  21: 4636315.815 ops/s
Iteration  22: 4623944.149 ops/s
Iteration  23: 4626308.309 ops/s
Iteration  24: 4610233.068 ops/s
Iteration  25: 4630844.493 ops/s
Iteration  26: 4586639.629 ops/s
Iteration  27: 4612939.537 ops/s
Iteration  28: 4612491.578 ops/s
Iteration  29: 4613941.216 ops/s
Iteration  30: 4616194.794 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringRecursion":
  4601617.609 ±(99.9%) 18853.542 ops/s [Average]
  (min, avg, max) = (4529158.481, 4601617.609, 4636315.815), stdev = 28219.097
  CI (99.9%): [4582764.067, 4620471.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_makeStringRecursion  thrpt   30  4601617.609 ± 18853.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3304248.241 ops/s
# Warmup Iteration   2: 7928694.880 ops/s
# Warmup Iteration   3: 7886272.864 ops/s
# Warmup Iteration   4: 6384367.913 ops/s
# Warmup Iteration   5: 7866868.992 ops/s
# Warmup Iteration   6: 7836682.900 ops/s
# Warmup Iteration   7: 7874585.385 ops/s
# Warmup Iteration   8: 7667805.186 ops/s
# Warmup Iteration   9: 7903105.539 ops/s
# Warmup Iteration  10: 7898416.763 ops/s
# Warmup Iteration  11: 7887507.668 ops/s
# Warmup Iteration  12: 7820278.572 ops/s
# Warmup Iteration  13: 7897889.750 ops/s
# Warmup Iteration  14: 7910340.482 ops/s
# Warmup Iteration  15: 7860399.670 ops/s
# Warmup Iteration  16: 7882071.647 ops/s
# Warmup Iteration  17: 7888602.118 ops/s
# Warmup Iteration  18: 7890879.709 ops/s
# Warmup Iteration  19: 7910640.352 ops/s
# Warmup Iteration  20: 7904662.029 ops/s
# Warmup Iteration  21: 7871250.385 ops/s
# Warmup Iteration  22: 7886466.816 ops/s
# Warmup Iteration  23: 7911493.996 ops/s
# Warmup Iteration  24: 7871342.727 ops/s
# Warmup Iteration  25: 7884423.515 ops/s
# Warmup Iteration  26: 7890794.513 ops/s
# Warmup Iteration  27: 7886640.932 ops/s
# Warmup Iteration  28: 7887777.711 ops/s
# Warmup Iteration  29: 7860813.564 ops/s
# Warmup Iteration  30: 7854444.680 ops/s
Iteration   1: 7887948.001 ops/s
Iteration   2: 7652672.489 ops/s
Iteration   3: 7867058.746 ops/s
Iteration   4: 7762320.671 ops/s
Iteration   5: 7905115.735 ops/s
Iteration   6: 7890993.672 ops/s
Iteration   7: 7861164.766 ops/s
Iteration   8: 7843169.858 ops/s
Iteration   9: 7882739.060 ops/s
Iteration  10: 7901015.476 ops/s
Iteration  11: 7889211.759 ops/s
Iteration  12: 7872974.233 ops/s
Iteration  13: 7896538.164 ops/s
Iteration  14: 7765545.749 ops/s
Iteration  15: 7878697.140 ops/s
Iteration  16: 7880292.221 ops/s
Iteration  17: 7898085.729 ops/s
Iteration  18: 7883859.863 ops/s
Iteration  19: 7892643.675 ops/s
Iteration  20: 7867968.258 ops/s
Iteration  21: 7898720.687 ops/s
Iteration  22: 7902605.220 ops/s
Iteration  23: 7891835.624 ops/s
Iteration  24: 7893903.105 ops/s
Iteration  25: 7887525.607 ops/s
Iteration  26: 7860678.381 ops/s
Iteration  27: 7890724.343 ops/s
Iteration  28: 7876618.387 ops/s
Iteration  29: 7900044.012 ops/s
Iteration  30: 7895110.747 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparator":
  7869259.379 ±(99.9%) 35471.726 ops/s [Average]
  (min, avg, max) = (7652672.489, 7869259.379, 7905115.735), stdev = 53092.413
  CI (99.9%): [7833787.653, 7904731.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  7869259.379 ± 35471.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3175533.396 ops/s
# Warmup Iteration   2: 6138988.665 ops/s
# Warmup Iteration   3: 6286746.166 ops/s
# Warmup Iteration   4: 6187488.700 ops/s
# Warmup Iteration   5: 5157935.340 ops/s
# Warmup Iteration   6: 6262098.185 ops/s
# Warmup Iteration   7: 6297022.752 ops/s
# Warmup Iteration   8: 6280374.340 ops/s
# Warmup Iteration   9: 6273104.783 ops/s
# Warmup Iteration  10: 6235548.004 ops/s
# Warmup Iteration  11: 6219263.742 ops/s
# Warmup Iteration  12: 6296742.106 ops/s
# Warmup Iteration  13: 6310598.622 ops/s
# Warmup Iteration  14: 6302619.284 ops/s
# Warmup Iteration  15: 6274484.404 ops/s
# Warmup Iteration  16: 6274682.400 ops/s
# Warmup Iteration  17: 6285184.610 ops/s
# Warmup Iteration  18: 6290706.351 ops/s
# Warmup Iteration  19: 6238254.450 ops/s
# Warmup Iteration  20: 6281921.708 ops/s
# Warmup Iteration  21: 6272127.752 ops/s
# Warmup Iteration  22: 6233738.046 ops/s
# Warmup Iteration  23: 6268647.700 ops/s
# Warmup Iteration  24: 6296175.937 ops/s
# Warmup Iteration  25: 6284421.536 ops/s
# Warmup Iteration  26: 6295473.646 ops/s
# Warmup Iteration  27: 6270510.687 ops/s
# Warmup Iteration  28: 6220476.274 ops/s
# Warmup Iteration  29: 6222859.570 ops/s
# Warmup Iteration  30: 6282421.036 ops/s
Iteration   1: 6187474.916 ops/s
Iteration   2: 6292924.102 ops/s
Iteration   3: 6281330.399 ops/s
Iteration   4: 6162000.554 ops/s
Iteration   5: 6292031.830 ops/s
Iteration   6: 6244750.962 ops/s
Iteration   7: 6281871.535 ops/s
Iteration   8: 6284296.435 ops/s
Iteration   9: 6291728.622 ops/s
Iteration  10: 6289735.898 ops/s
Iteration  11: 6306413.783 ops/s
Iteration  12: 6284230.900 ops/s
Iteration  13: 6179577.092 ops/s
Iteration  14: 6302367.504 ops/s
Iteration  15: 6298003.456 ops/s
Iteration  16: 6282880.030 ops/s
Iteration  17: 6310206.759 ops/s
Iteration  18: 6276536.763 ops/s
Iteration  19: 6312056.110 ops/s
Iteration  20: 6283153.163 ops/s
Iteration  21: 6299606.761 ops/s
Iteration  22: 6288802.419 ops/s
Iteration  23: 6295995.212 ops/s
Iteration  24: 6161746.110 ops/s
Iteration  25: 6298044.650 ops/s
Iteration  26: 6272819.050 ops/s
Iteration  27: 6282337.029 ops/s
Iteration  28: 6304454.819 ops/s
Iteration  29: 6302595.493 ops/s
Iteration  30: 6314633.079 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  6275486.848 ±(99.9%) 29008.918 ops/s [Average]
  (min, avg, max) = (6161746.110, 6275486.848, 6314633.079), stdev = 43419.187
  CI (99.9%): [6246477.930, 6304495.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  6275486.848 ± 29008.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31626373.593 ops/s
# Warmup Iteration   2: 59750127.614 ops/s
# Warmup Iteration   3: 51859206.793 ops/s
# Warmup Iteration   4: 61621943.675 ops/s
# Warmup Iteration   5: 61105898.614 ops/s
# Warmup Iteration   6: 61572886.994 ops/s
# Warmup Iteration   7: 61705475.635 ops/s
# Warmup Iteration   8: 61731431.006 ops/s
# Warmup Iteration   9: 61614930.278 ops/s
# Warmup Iteration  10: 61544127.710 ops/s
# Warmup Iteration  11: 61425115.021 ops/s
# Warmup Iteration  12: 61116293.272 ops/s
# Warmup Iteration  13: 60984261.412 ops/s
# Warmup Iteration  14: 61709645.913 ops/s
# Warmup Iteration  15: 61606521.604 ops/s
# Warmup Iteration  16: 61261643.067 ops/s
# Warmup Iteration  17: 61620459.673 ops/s
# Warmup Iteration  18: 61201583.961 ops/s
# Warmup Iteration  19: 61364207.726 ops/s
# Warmup Iteration  20: 61119721.465 ops/s
# Warmup Iteration  21: 61134884.954 ops/s
# Warmup Iteration  22: 61368115.325 ops/s
# Warmup Iteration  23: 61515828.905 ops/s
# Warmup Iteration  24: 61365015.768 ops/s
# Warmup Iteration  25: 61435872.678 ops/s
# Warmup Iteration  26: 61558659.458 ops/s
# Warmup Iteration  27: 61515689.090 ops/s
# Warmup Iteration  28: 61552572.033 ops/s
# Warmup Iteration  29: 61205446.899 ops/s
# Warmup Iteration  30: 61149031.917 ops/s
Iteration   1: 61443801.894 ops/s
Iteration   2: 60935728.970 ops/s
Iteration   3: 60594023.447 ops/s
Iteration   4: 61427028.069 ops/s
Iteration   5: 60733315.337 ops/s
Iteration   6: 61345732.110 ops/s
Iteration   7: 61211549.955 ops/s
Iteration   8: 61792247.367 ops/s
Iteration   9: 61643591.670 ops/s
Iteration  10: 61494717.326 ops/s
Iteration  11: 61351490.166 ops/s
Iteration  12: 61461198.297 ops/s
Iteration  13: 61395743.673 ops/s
Iteration  14: 61317744.794 ops/s
Iteration  15: 61582924.371 ops/s
Iteration  16: 61335966.367 ops/s
Iteration  17: 61562164.517 ops/s
Iteration  18: 61534699.488 ops/s
Iteration  19: 61580147.448 ops/s
Iteration  20: 60783066.962 ops/s
Iteration  21: 61655195.345 ops/s
Iteration  22: 61524791.644 ops/s
Iteration  23: 61001000.605 ops/s
Iteration  24: 61345572.059 ops/s
Iteration  25: 61450001.019 ops/s
Iteration  26: 61604411.564 ops/s
Iteration  27: 61516858.222 ops/s
Iteration  28: 61715386.184 ops/s
Iteration  29: 61318725.484 ops/s
Iteration  30: 61708878.213 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max":
  61378923.419 ±(99.9%) 198883.786 ops/s [Average]
  (min, avg, max) = (60594023.447, 61378923.419, 61792247.367), stdev = 297679.911
  CI (99.9%): [61180039.633, 61577807.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_max  thrpt   30  61378923.419 ± 198883.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4924900.249 ops/s
# Warmup Iteration   2: 12235978.489 ops/s
# Warmup Iteration   3: 12359157.943 ops/s
# Warmup Iteration   4: 10062643.940 ops/s
# Warmup Iteration   5: 12301254.986 ops/s
# Warmup Iteration   6: 12393077.293 ops/s
# Warmup Iteration   7: 12358415.016 ops/s
# Warmup Iteration   8: 12257414.785 ops/s
# Warmup Iteration   9: 12394562.798 ops/s
# Warmup Iteration  10: 12363444.699 ops/s
# Warmup Iteration  11: 12261941.541 ops/s
# Warmup Iteration  12: 12372678.843 ops/s
# Warmup Iteration  13: 12363847.059 ops/s
# Warmup Iteration  14: 12354089.225 ops/s
# Warmup Iteration  15: 12375828.273 ops/s
# Warmup Iteration  16: 12323092.774 ops/s
# Warmup Iteration  17: 12223713.690 ops/s
# Warmup Iteration  18: 12346653.435 ops/s
# Warmup Iteration  19: 12376297.503 ops/s
# Warmup Iteration  20: 12350397.343 ops/s
# Warmup Iteration  21: 12390381.954 ops/s
# Warmup Iteration  22: 12256414.856 ops/s
# Warmup Iteration  23: 12374999.640 ops/s
# Warmup Iteration  24: 12397817.883 ops/s
# Warmup Iteration  25: 12371889.842 ops/s
# Warmup Iteration  26: 12271155.520 ops/s
# Warmup Iteration  27: 12362774.064 ops/s
# Warmup Iteration  28: 12269369.595 ops/s
# Warmup Iteration  29: 12342304.485 ops/s
# Warmup Iteration  30: 12347648.712 ops/s
Iteration   1: 12348950.803 ops/s
Iteration   2: 12328696.004 ops/s
Iteration   3: 12392492.631 ops/s
Iteration   4: 12380778.382 ops/s
Iteration   5: 12371971.160 ops/s
Iteration   6: 12391292.455 ops/s
Iteration   7: 12347931.314 ops/s
Iteration   8: 12345764.201 ops/s
Iteration   9: 12372677.922 ops/s
Iteration  10: 12183409.034 ops/s
Iteration  11: 12308128.481 ops/s
Iteration  12: 12384007.795 ops/s
Iteration  13: 12172783.888 ops/s
Iteration  14: 12333669.396 ops/s
Iteration  15: 12338027.955 ops/s
Iteration  16: 12371793.523 ops/s
Iteration  17: 12272554.425 ops/s
Iteration  18: 12198200.952 ops/s
Iteration  19: 12396320.255 ops/s
Iteration  20: 12405610.734 ops/s
Iteration  21: 12378778.471 ops/s
Iteration  22: 12367108.908 ops/s
Iteration  23: 12361043.511 ops/s
Iteration  24: 12409968.019 ops/s
Iteration  25: 12375645.105 ops/s
Iteration  26: 12394505.510 ops/s
Iteration  27: 11937130.659 ops/s
Iteration  28: 12385344.095 ops/s
Iteration  29: 12396885.904 ops/s
Iteration  30: 12393353.742 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy":
  12334827.508 ±(99.9%) 65593.365 ops/s [Average]
  (min, avg, max) = (11937130.659, 12334827.508, 12409968.019), stdev = 98177.068
  CI (99.9%): [12269234.143, 12400420.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_maxBy  thrpt   30  12334827.508 ± 65593.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4564116.060 ops/s
# Warmup Iteration   2: 10735140.946 ops/s
# Warmup Iteration   3: 10855142.004 ops/s
# Warmup Iteration   4: 8934698.401 ops/s
# Warmup Iteration   5: 10839053.933 ops/s
# Warmup Iteration   6: 10922783.547 ops/s
# Warmup Iteration   7: 10911014.687 ops/s
# Warmup Iteration   8: 10809826.074 ops/s
# Warmup Iteration   9: 10886925.975 ops/s
# Warmup Iteration  10: 10897725.348 ops/s
# Warmup Iteration  11: 10934071.564 ops/s
# Warmup Iteration  12: 10805680.102 ops/s
# Warmup Iteration  13: 10914601.643 ops/s
# Warmup Iteration  14: 10906384.370 ops/s
# Warmup Iteration  15: 10865044.609 ops/s
# Warmup Iteration  16: 10912042.925 ops/s
# Warmup Iteration  17: 10944752.982 ops/s
# Warmup Iteration  18: 10910746.601 ops/s
# Warmup Iteration  19: 10879317.090 ops/s
# Warmup Iteration  20: 10887665.110 ops/s
# Warmup Iteration  21: 10910886.964 ops/s
# Warmup Iteration  22: 10910368.900 ops/s
# Warmup Iteration  23: 10902665.519 ops/s
# Warmup Iteration  24: 10912268.813 ops/s
# Warmup Iteration  25: 10886053.501 ops/s
# Warmup Iteration  26: 10909719.278 ops/s
# Warmup Iteration  27: 10898822.077 ops/s
# Warmup Iteration  28: 10861924.231 ops/s
# Warmup Iteration  29: 10912126.801 ops/s
# Warmup Iteration  30: 10875983.090 ops/s
Iteration   1: 10926583.294 ops/s
Iteration   2: 10934905.631 ops/s
Iteration   3: 10924263.035 ops/s
Iteration   4: 10903422.675 ops/s
Iteration   5: 10759289.333 ops/s
Iteration   6: 10901491.866 ops/s
Iteration   7: 10918098.420 ops/s
Iteration   8: 10913536.633 ops/s
Iteration   9: 10896429.422 ops/s
Iteration  10: 10913782.244 ops/s
Iteration  11: 10931862.928 ops/s
Iteration  12: 10903383.672 ops/s
Iteration  13: 10585070.280 ops/s
Iteration  14: 10910044.738 ops/s
Iteration  15: 10897384.578 ops/s
Iteration  16: 10922761.996 ops/s
Iteration  17: 10894431.277 ops/s
Iteration  18: 10920939.876 ops/s
Iteration  19: 10916927.541 ops/s
Iteration  20: 10927227.815 ops/s
Iteration  21: 10936227.296 ops/s
Iteration  22: 10904234.499 ops/s
Iteration  23: 10730621.311 ops/s
Iteration  24: 10862663.994 ops/s
Iteration  25: 10942446.854 ops/s
Iteration  26: 10905389.435 ops/s
Iteration  27: 10911633.921 ops/s
Iteration  28: 10834217.111 ops/s
Iteration  29: 10882115.542 ops/s
Iteration  30: 10909516.233 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxByOptional":
  10887363.448 ±(99.9%) 49423.893 ops/s [Average]
  (min, avg, max) = (10585070.280, 10887363.448, 10942446.854), stdev = 73975.362
  CI (99.9%): [10837939.555, 10936787.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_maxByOptional  thrpt   30  10887363.448 ± 49423.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28449491.725 ops/s
# Warmup Iteration   2: 59029272.090 ops/s
# Warmup Iteration   3: 47163195.783 ops/s
# Warmup Iteration   4: 54995156.735 ops/s
# Warmup Iteration   5: 54836967.940 ops/s
# Warmup Iteration   6: 54872744.568 ops/s
# Warmup Iteration   7: 54268536.533 ops/s
# Warmup Iteration   8: 54793685.129 ops/s
# Warmup Iteration   9: 55039855.054 ops/s
# Warmup Iteration  10: 54843035.273 ops/s
# Warmup Iteration  11: 54964268.852 ops/s
# Warmup Iteration  12: 54442430.721 ops/s
# Warmup Iteration  13: 54819096.331 ops/s
# Warmup Iteration  14: 54825542.533 ops/s
# Warmup Iteration  15: 54323396.692 ops/s
# Warmup Iteration  16: 54462539.658 ops/s
# Warmup Iteration  17: 54627669.307 ops/s
# Warmup Iteration  18: 54514568.502 ops/s
# Warmup Iteration  19: 54454996.593 ops/s
# Warmup Iteration  20: 54851481.586 ops/s
# Warmup Iteration  21: 54676020.234 ops/s
# Warmup Iteration  22: 54517628.446 ops/s
# Warmup Iteration  23: 54859720.435 ops/s
# Warmup Iteration  24: 54858184.620 ops/s
# Warmup Iteration  25: 54970643.994 ops/s
# Warmup Iteration  26: 54871858.486 ops/s
# Warmup Iteration  27: 54928304.313 ops/s
# Warmup Iteration  28: 54885024.194 ops/s
# Warmup Iteration  29: 54759607.546 ops/s
# Warmup Iteration  30: 54949338.251 ops/s
Iteration   1: 54813674.430 ops/s
Iteration   2: 55026988.334 ops/s
Iteration   3: 54987966.613 ops/s
Iteration   4: 54965451.078 ops/s
Iteration   5: 54799777.519 ops/s
Iteration   6: 53875371.379 ops/s
Iteration   7: 54960945.973 ops/s
Iteration   8: 54999128.430 ops/s
Iteration   9: 54759380.318 ops/s
Iteration  10: 54698265.191 ops/s
Iteration  11: 54789604.542 ops/s
Iteration  12: 55087573.095 ops/s
Iteration  13: 54949311.031 ops/s
Iteration  14: 54837697.468 ops/s
Iteration  15: 54807307.809 ops/s
Iteration  16: 54812963.095 ops/s
Iteration  17: 54991859.602 ops/s
Iteration  18: 55026186.000 ops/s
Iteration  19: 54943994.374 ops/s
Iteration  20: 54656023.204 ops/s
Iteration  21: 54887954.344 ops/s
Iteration  22: 54901308.449 ops/s
Iteration  23: 54912331.177 ops/s
Iteration  24: 54833282.325 ops/s
Iteration  25: 54843054.555 ops/s
Iteration  26: 54695823.642 ops/s
Iteration  27: 54772129.162 ops/s
Iteration  28: 54694625.728 ops/s
Iteration  29: 55047024.814 ops/s
Iteration  30: 54232480.457 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxBy_null_throws":
  54820316.138 ±(99.9%) 162242.140 ops/s [Average]
  (min, avg, max) = (53875371.379, 54820316.138, 55087573.095), stdev = 242836.416
  CI (99.9%): [54658073.998, 54982558.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  54820316.138 ± 162242.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10245945.021 ops/s
# Warmup Iteration   2: 20672575.890 ops/s
# Warmup Iteration   3: 17679970.085 ops/s
# Warmup Iteration   4: 20881447.852 ops/s
# Warmup Iteration   5: 21035680.026 ops/s
# Warmup Iteration   6: 20935854.010 ops/s
# Warmup Iteration   7: 21045868.061 ops/s
# Warmup Iteration   8: 20981193.473 ops/s
# Warmup Iteration   9: 20984597.517 ops/s
# Warmup Iteration  10: 21016288.253 ops/s
# Warmup Iteration  11: 20751397.663 ops/s
# Warmup Iteration  12: 20860808.516 ops/s
# Warmup Iteration  13: 20973828.753 ops/s
# Warmup Iteration  14: 20953021.320 ops/s
# Warmup Iteration  15: 20537187.905 ops/s
# Warmup Iteration  16: 20881401.085 ops/s
# Warmup Iteration  17: 20949163.811 ops/s
# Warmup Iteration  18: 20909006.984 ops/s
# Warmup Iteration  19: 20903389.363 ops/s
# Warmup Iteration  20: 20892937.342 ops/s
# Warmup Iteration  21: 20755654.719 ops/s
# Warmup Iteration  22: 20927466.586 ops/s
# Warmup Iteration  23: 20629927.321 ops/s
# Warmup Iteration  24: 20903230.858 ops/s
# Warmup Iteration  25: 20950406.077 ops/s
# Warmup Iteration  26: 20930891.001 ops/s
# Warmup Iteration  27: 21000562.443 ops/s
# Warmup Iteration  28: 20944941.004 ops/s
# Warmup Iteration  29: 20847079.902 ops/s
# Warmup Iteration  30: 20916398.964 ops/s
Iteration   1: 20939684.475 ops/s
Iteration   2: 20923881.569 ops/s
Iteration   3: 20903587.706 ops/s
Iteration   4: 20919677.741 ops/s
Iteration   5: 20920536.859 ops/s
Iteration   6: 20945865.614 ops/s
Iteration   7: 20932879.147 ops/s
Iteration   8: 20866757.931 ops/s
Iteration   9: 20944073.825 ops/s
Iteration  10: 20975204.020 ops/s
Iteration  11: 20428948.862 ops/s
Iteration  12: 20906328.846 ops/s
Iteration  13: 20938669.009 ops/s
Iteration  14: 20968638.751 ops/s
Iteration  15: 20945918.818 ops/s
Iteration  16: 20917492.659 ops/s
Iteration  17: 20919373.045 ops/s
Iteration  18: 20717598.605 ops/s
Iteration  19: 20619272.366 ops/s
Iteration  20: 20860108.623 ops/s
Iteration  21: 20852134.203 ops/s
Iteration  22: 20932529.557 ops/s
Iteration  23: 20830025.566 ops/s
Iteration  24: 20838919.660 ops/s
Iteration  25: 20926867.680 ops/s
Iteration  26: 20915480.833 ops/s
Iteration  27: 20984531.149 ops/s
Iteration  28: 20809451.863 ops/s
Iteration  29: 20948103.089 ops/s
Iteration  30: 20798801.447 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_maxOptional":
  20877711.451 ±(99.9%) 77019.004 ops/s [Average]
  (min, avg, max) = (20428948.862, 20877711.451, 20984531.149), stdev = 115278.428
  CI (99.9%): [20800692.446, 20954730.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_maxOptional  thrpt   30  20877711.451 ± 77019.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801522.001 ops/s
# Warmup Iteration   2: 834538.367 ops/s
# Warmup Iteration   3: 987452.198 ops/s
# Warmup Iteration   4: 1054278.221 ops/s
# Warmup Iteration   5: 1052470.941 ops/s
# Warmup Iteration   6: 1057659.284 ops/s
# Warmup Iteration   7: 1051111.241 ops/s
# Warmup Iteration   8: 1044309.314 ops/s
# Warmup Iteration   9: 1056467.500 ops/s
# Warmup Iteration  10: 1046606.287 ops/s
# Warmup Iteration  11: 1054130.252 ops/s
# Warmup Iteration  12: 1055252.827 ops/s
# Warmup Iteration  13: 998166.080 ops/s
# Warmup Iteration  14: 945188.306 ops/s
# Warmup Iteration  15: 1052951.506 ops/s
# Warmup Iteration  16: 1057759.335 ops/s
# Warmup Iteration  17: 1126133.397 ops/s
# Warmup Iteration  18: 1130824.713 ops/s
# Warmup Iteration  19: 1120698.422 ops/s
# Warmup Iteration  20: 1125648.922 ops/s
# Warmup Iteration  21: 1129063.718 ops/s
# Warmup Iteration  22: 1130092.667 ops/s
# Warmup Iteration  23: 1113461.386 ops/s
# Warmup Iteration  24: 1130609.176 ops/s
# Warmup Iteration  25: 1115927.928 ops/s
# Warmup Iteration  26: 1127816.867 ops/s
# Warmup Iteration  27: 1129331.643 ops/s
# Warmup Iteration  28: 1125292.289 ops/s
# Warmup Iteration  29: 1129866.682 ops/s
# Warmup Iteration  30: 1122400.602 ops/s
Iteration   1: 1127064.061 ops/s
Iteration   2: 1130927.035 ops/s
Iteration   3: 1121134.307 ops/s
Iteration   4: 1129032.459 ops/s
Iteration   5: 1113906.811 ops/s
Iteration   6: 1129068.901 ops/s
Iteration   7: 1127399.239 ops/s
Iteration   8: 1132163.143 ops/s
Iteration   9: 1123176.554 ops/s
Iteration  10: 1110679.088 ops/s
Iteration  11: 1125471.734 ops/s
Iteration  12: 1091234.431 ops/s
Iteration  13: 1127275.323 ops/s
Iteration  14: 1132659.761 ops/s
Iteration  15: 1129536.047 ops/s
Iteration  16: 1129512.199 ops/s
Iteration  17: 1133576.844 ops/s
Iteration  18: 1136638.213 ops/s
Iteration  19: 1129125.253 ops/s
Iteration  20: 1125585.335 ops/s
Iteration  21: 1127459.478 ops/s
Iteration  22: 1128030.532 ops/s
Iteration  23: 1129728.957 ops/s
Iteration  24: 1126651.662 ops/s
Iteration  25: 1117832.672 ops/s
Iteration  26: 1134348.118 ops/s
Iteration  27: 1126450.640 ops/s
Iteration  28: 1129029.983 ops/s
Iteration  29: 1128174.015 ops/s
Iteration  30: 1127565.961 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws":
  1126014.625 ±(99.9%) 5726.374 ops/s [Average]
  (min, avg, max) = (1091234.431, 1126014.625, 1136638.213), stdev = 8570.967
  CI (99.9%): [1120288.251, 1131740.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1126014.625 ± 5726.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811942.517 ops/s
# Warmup Iteration   2: 834310.694 ops/s
# Warmup Iteration   3: 997660.153 ops/s
# Warmup Iteration   4: 1055382.247 ops/s
# Warmup Iteration   5: 1065639.055 ops/s
# Warmup Iteration   6: 1054501.623 ops/s
# Warmup Iteration   7: 1063333.153 ops/s
# Warmup Iteration   8: 1062689.985 ops/s
# Warmup Iteration   9: 1061431.793 ops/s
# Warmup Iteration  10: 1063044.087 ops/s
# Warmup Iteration  11: 1060404.669 ops/s
# Warmup Iteration  12: 1063745.603 ops/s
# Warmup Iteration  13: 984337.143 ops/s
# Warmup Iteration  14: 977024.887 ops/s
# Warmup Iteration  15: 1063563.672 ops/s
# Warmup Iteration  16: 1065224.444 ops/s
# Warmup Iteration  17: 1133211.271 ops/s
# Warmup Iteration  18: 1128003.773 ops/s
# Warmup Iteration  19: 1114696.853 ops/s
# Warmup Iteration  20: 1133903.174 ops/s
# Warmup Iteration  21: 1137242.864 ops/s
# Warmup Iteration  22: 1134610.158 ops/s
# Warmup Iteration  23: 1132303.541 ops/s
# Warmup Iteration  24: 1131709.609 ops/s
# Warmup Iteration  25: 1132782.352 ops/s
# Warmup Iteration  26: 1132711.791 ops/s
# Warmup Iteration  27: 1134680.951 ops/s
# Warmup Iteration  28: 1124524.344 ops/s
# Warmup Iteration  29: 1132266.907 ops/s
# Warmup Iteration  30: 1136454.895 ops/s
Iteration   1: 1139894.410 ops/s
Iteration   2: 1134546.120 ops/s
Iteration   3: 1132570.671 ops/s
Iteration   4: 1133291.951 ops/s
Iteration   5: 1133267.361 ops/s
Iteration   6: 1137728.750 ops/s
Iteration   7: 1132555.049 ops/s
Iteration   8: 1133513.755 ops/s
Iteration   9: 1133221.098 ops/s
Iteration  10: 1131394.561 ops/s
Iteration  11: 1129340.099 ops/s
Iteration  12: 1132303.226 ops/s
Iteration  13: 1136203.162 ops/s
Iteration  14: 1132730.084 ops/s
Iteration  15: 1137627.047 ops/s
Iteration  16: 1132916.212 ops/s
Iteration  17: 1135454.232 ops/s
Iteration  18: 1135226.553 ops/s
Iteration  19: 1134026.423 ops/s
Iteration  20: 1130323.734 ops/s
Iteration  21: 1132666.879 ops/s
Iteration  22: 1127902.135 ops/s
Iteration  23: 1131016.164 ops/s
Iteration  24: 1130501.037 ops/s
Iteration  25: 1132469.567 ops/s
Iteration  26: 1126060.224 ops/s
Iteration  27: 1117688.609 ops/s
Iteration  28: 1132225.337 ops/s
Iteration  29: 1131478.797 ops/s
Iteration  30: 1112885.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_empty_throws_without_comparator":
  1131767.632 ±(99.9%) 3556.239 ops/s [Average]
  (min, avg, max) = (1112885.721, 1131767.632, 1139894.410), stdev = 5322.811
  CI (99.9%): [1128211.394, 1135323.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_max_empty_throws_without_comparator  thrpt   30  1131767.632 ± 3556.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22299004.232 ops/s
# Warmup Iteration   2: 44649897.966 ops/s
# Warmup Iteration   3: 38040696.575 ops/s
# Warmup Iteration   4: 45447016.972 ops/s
# Warmup Iteration   5: 45579309.197 ops/s
# Warmup Iteration   6: 45575328.362 ops/s
# Warmup Iteration   7: 45490800.571 ops/s
# Warmup Iteration   8: 45681524.110 ops/s
# Warmup Iteration   9: 44982697.008 ops/s
# Warmup Iteration  10: 45563667.131 ops/s
# Warmup Iteration  11: 45223212.970 ops/s
# Warmup Iteration  12: 45149172.943 ops/s
# Warmup Iteration  13: 45681882.767 ops/s
# Warmup Iteration  14: 45539667.017 ops/s
# Warmup Iteration  15: 45394358.883 ops/s
# Warmup Iteration  16: 45162295.385 ops/s
# Warmup Iteration  17: 45173466.995 ops/s
# Warmup Iteration  18: 45608068.283 ops/s
# Warmup Iteration  19: 45409813.114 ops/s
# Warmup Iteration  20: 45354283.704 ops/s
# Warmup Iteration  21: 45602539.483 ops/s
# Warmup Iteration  22: 45635634.583 ops/s
# Warmup Iteration  23: 45220553.482 ops/s
# Warmup Iteration  24: 45610368.221 ops/s
# Warmup Iteration  25: 45608432.090 ops/s
# Warmup Iteration  26: 45275570.166 ops/s
# Warmup Iteration  27: 44945150.351 ops/s
# Warmup Iteration  28: 45519733.989 ops/s
# Warmup Iteration  29: 45529592.157 ops/s
# Warmup Iteration  30: 45445443.095 ops/s
Iteration   1: 45648489.034 ops/s
Iteration   2: 45614427.716 ops/s
Iteration   3: 45545031.651 ops/s
Iteration   4: 45547671.298 ops/s
Iteration   5: 45655432.130 ops/s
Iteration   6: 45556071.372 ops/s
Iteration   7: 45527900.328 ops/s
Iteration   8: 45639780.720 ops/s
Iteration   9: 45714311.541 ops/s
Iteration  10: 45512017.382 ops/s
Iteration  11: 45397111.496 ops/s
Iteration  12: 45526317.240 ops/s
Iteration  13: 44879022.403 ops/s
Iteration  14: 45512411.300 ops/s
Iteration  15: 45351383.202 ops/s
Iteration  16: 45218625.913 ops/s
Iteration  17: 45426173.879 ops/s
Iteration  18: 45517323.613 ops/s
Iteration  19: 45419566.187 ops/s
Iteration  20: 45465965.173 ops/s
Iteration  21: 45563373.616 ops/s
Iteration  22: 44919077.426 ops/s
Iteration  23: 45393003.869 ops/s
Iteration  24: 45471988.277 ops/s
Iteration  25: 45441348.302 ops/s
Iteration  26: 45637521.699 ops/s
Iteration  27: 45510190.603 ops/s
Iteration  28: 45295048.997 ops/s
Iteration  29: 44638410.756 ops/s
Iteration  30: 45391197.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_safe":
  45431206.483 ±(99.9%) 160577.237 ops/s [Average]
  (min, avg, max) = (44638410.756, 45431206.483, 45714311.541), stdev = 240344.467
  CI (99.9%): [45270629.246, 45591783.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_max_null_safe  thrpt   30  45431206.483 ± 160577.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27495732.927 ops/s
# Warmup Iteration   2: 59461320.172 ops/s
# Warmup Iteration   3: 50958190.922 ops/s
# Warmup Iteration   4: 61115450.547 ops/s
# Warmup Iteration   5: 60971883.914 ops/s
# Warmup Iteration   6: 60706132.400 ops/s
# Warmup Iteration   7: 60874273.687 ops/s
# Warmup Iteration   8: 60982856.585 ops/s
# Warmup Iteration   9: 60861564.269 ops/s
# Warmup Iteration  10: 60490192.070 ops/s
# Warmup Iteration  11: 60865304.113 ops/s
# Warmup Iteration  12: 61063266.632 ops/s
# Warmup Iteration  13: 60692502.381 ops/s
# Warmup Iteration  14: 61095389.061 ops/s
# Warmup Iteration  15: 60978783.255 ops/s
# Warmup Iteration  16: 60559952.803 ops/s
# Warmup Iteration  17: 60984167.389 ops/s
# Warmup Iteration  18: 61020176.158 ops/s
# Warmup Iteration  19: 59967469.887 ops/s
# Warmup Iteration  20: 60932356.864 ops/s
# Warmup Iteration  21: 61132598.064 ops/s
# Warmup Iteration  22: 59878572.335 ops/s
# Warmup Iteration  23: 61072470.733 ops/s
# Warmup Iteration  24: 61091213.592 ops/s
# Warmup Iteration  25: 60826960.293 ops/s
# Warmup Iteration  26: 60965266.157 ops/s
# Warmup Iteration  27: 60783211.500 ops/s
# Warmup Iteration  28: 60424570.296 ops/s
# Warmup Iteration  29: 60854133.230 ops/s
# Warmup Iteration  30: 61033277.016 ops/s
Iteration   1: 59970739.995 ops/s
Iteration   2: 60972567.583 ops/s
Iteration   3: 61056449.362 ops/s
Iteration   4: 59968165.841 ops/s
Iteration   5: 61239135.305 ops/s
Iteration   6: 60194187.411 ops/s
Iteration   7: 60987227.342 ops/s
Iteration   8: 60877083.904 ops/s
Iteration   9: 61097325.870 ops/s
Iteration  10: 60202789.151 ops/s
Iteration  11: 60587104.492 ops/s
Iteration  12: 61377259.994 ops/s
Iteration  13: 60942541.009 ops/s
Iteration  14: 61450898.454 ops/s
Iteration  15: 61086911.397 ops/s
Iteration  16: 60492617.074 ops/s
Iteration  17: 59724758.547 ops/s
Iteration  18: 61170831.138 ops/s
Iteration  19: 60948337.656 ops/s
Iteration  20: 61293005.897 ops/s
Iteration  21: 60377425.443 ops/s
Iteration  22: 61239786.752 ops/s
Iteration  23: 60933950.424 ops/s
Iteration  24: 61230654.675 ops/s
Iteration  25: 61289666.499 ops/s
Iteration  26: 61524005.141 ops/s
Iteration  27: 60705123.576 ops/s
Iteration  28: 61090137.880 ops/s
Iteration  29: 60288390.394 ops/s
Iteration  30: 61104009.005 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws":
  60847436.240 ±(99.9%) 323483.186 ops/s [Average]
  (min, avg, max) = (59724758.547, 60847436.240, 61524005.141), stdev = 484174.442
  CI (99.9%): [60523953.054, 61170919.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_max_null_throws  thrpt   30  60847436.240 ± 323483.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150035.398 ops/s
# Warmup Iteration   2: 152066.578 ops/s
# Warmup Iteration   3: 154371.511 ops/s
# Warmup Iteration   4: 154316.873 ops/s
# Warmup Iteration   5: 153732.927 ops/s
# Warmup Iteration   6: 153670.066 ops/s
# Warmup Iteration   7: 154816.427 ops/s
# Warmup Iteration   8: 153968.066 ops/s
# Warmup Iteration   9: 153912.166 ops/s
# Warmup Iteration  10: 155695.939 ops/s
# Warmup Iteration  11: 152476.949 ops/s
# Warmup Iteration  12: 155439.750 ops/s
# Warmup Iteration  13: 160819.439 ops/s
# Warmup Iteration  14: 160877.643 ops/s
# Warmup Iteration  15: 161821.355 ops/s
# Warmup Iteration  16: 161691.409 ops/s
# Warmup Iteration  17: 164042.555 ops/s
# Warmup Iteration  18: 163988.038 ops/s
# Warmup Iteration  19: 163697.479 ops/s
# Warmup Iteration  20: 161953.397 ops/s
# Warmup Iteration  21: 163458.920 ops/s
# Warmup Iteration  22: 161760.267 ops/s
# Warmup Iteration  23: 163837.202 ops/s
# Warmup Iteration  24: 161401.350 ops/s
# Warmup Iteration  25: 163553.723 ops/s
# Warmup Iteration  26: 163652.142 ops/s
# Warmup Iteration  27: 164006.523 ops/s
# Warmup Iteration  28: 162425.846 ops/s
# Warmup Iteration  29: 163401.630 ops/s
# Warmup Iteration  30: 163395.556 ops/s
Iteration   1: 163688.197 ops/s
Iteration   2: 162969.658 ops/s
Iteration   3: 162738.966 ops/s
Iteration   4: 163641.205 ops/s
Iteration   5: 165151.513 ops/s
Iteration   6: 164794.492 ops/s
Iteration   7: 163762.517 ops/s
Iteration   8: 162991.854 ops/s
Iteration   9: 164314.433 ops/s
Iteration  10: 162467.850 ops/s
Iteration  11: 164086.116 ops/s
Iteration  12: 161078.595 ops/s
Iteration  13: 163186.715 ops/s
Iteration  14: 164509.728 ops/s
Iteration  15: 163652.444 ops/s
Iteration  16: 162747.957 ops/s
Iteration  17: 161253.696 ops/s
Iteration  18: 162966.149 ops/s
Iteration  19: 162772.308 ops/s
Iteration  20: 165000.415 ops/s
Iteration  21: 164555.786 ops/s
Iteration  22: 164060.025 ops/s
Iteration  23: 165259.459 ops/s
Iteration  24: 163282.148 ops/s
Iteration  25: 160210.031 ops/s
Iteration  26: 163795.207 ops/s
Iteration  27: 163392.091 ops/s
Iteration  28: 161518.965 ops/s
Iteration  29: 164852.174 ops/s
Iteration  30: 163347.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  163401.599 ±(99.9%) 826.499 ops/s [Average]
  (min, avg, max) = (160210.031, 163401.599, 165259.459), stdev = 1237.064
  CI (99.9%): [162575.100, 164228.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  163401.599 ± 826.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31716595.709 ops/s
# Warmup Iteration   2: 61384765.735 ops/s
# Warmup Iteration   3: 54094420.548 ops/s
# Warmup Iteration   4: 63799849.725 ops/s
# Warmup Iteration   5: 63468655.074 ops/s
# Warmup Iteration   6: 63686880.097 ops/s
# Warmup Iteration   7: 63846542.816 ops/s
# Warmup Iteration   8: 63456702.169 ops/s
# Warmup Iteration   9: 63241653.948 ops/s
# Warmup Iteration  10: 63942728.526 ops/s
# Warmup Iteration  11: 63982491.983 ops/s
# Warmup Iteration  12: 64004436.097 ops/s
# Warmup Iteration  13: 63296083.619 ops/s
# Warmup Iteration  14: 63496822.914 ops/s
# Warmup Iteration  15: 63834315.354 ops/s
# Warmup Iteration  16: 63791708.352 ops/s
# Warmup Iteration  17: 63982959.146 ops/s
# Warmup Iteration  18: 63274878.640 ops/s
# Warmup Iteration  19: 63762478.223 ops/s
# Warmup Iteration  20: 63444795.923 ops/s
# Warmup Iteration  21: 63727286.257 ops/s
# Warmup Iteration  22: 63341393.857 ops/s
# Warmup Iteration  23: 63858015.971 ops/s
# Warmup Iteration  24: 63780749.704 ops/s
# Warmup Iteration  25: 63948802.649 ops/s
# Warmup Iteration  26: 63764847.889 ops/s
# Warmup Iteration  27: 63777241.327 ops/s
# Warmup Iteration  28: 63467980.054 ops/s
# Warmup Iteration  29: 63780091.905 ops/s
# Warmup Iteration  30: 63874774.425 ops/s
Iteration   1: 63777442.192 ops/s
Iteration   2: 64079061.696 ops/s
Iteration   3: 63714905.326 ops/s
Iteration   4: 63823010.797 ops/s
Iteration   5: 63900141.987 ops/s
Iteration   6: 63472546.436 ops/s
Iteration   7: 63729604.414 ops/s
Iteration   8: 64025591.434 ops/s
Iteration   9: 64003949.209 ops/s
Iteration  10: 63907187.482 ops/s
Iteration  11: 63706137.833 ops/s
Iteration  12: 63996613.753 ops/s
Iteration  13: 63869886.760 ops/s
Iteration  14: 63804819.388 ops/s
Iteration  15: 63628367.074 ops/s
Iteration  16: 64057468.747 ops/s
Iteration  17: 63028831.438 ops/s
Iteration  18: 63886540.640 ops/s
Iteration  19: 63829841.863 ops/s
Iteration  20: 63679234.246 ops/s
Iteration  21: 63887964.251 ops/s
Iteration  22: 63876363.072 ops/s
Iteration  23: 63787954.071 ops/s
Iteration  24: 63904720.634 ops/s
Iteration  25: 63694750.698 ops/s
Iteration  26: 64059546.467 ops/s
Iteration  27: 64071670.620 ops/s
Iteration  28: 63959787.123 ops/s
Iteration  29: 63723077.081 ops/s
Iteration  30: 64256600.892 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_max_without_comparator":
  63838120.587 ±(99.9%) 149466.356 ops/s [Average]
  (min, avg, max) = (63028831.438, 63838120.587, 64256600.892), stdev = 223714.222
  CI (99.9%): [63688654.232, 63987586.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  63838120.587 ± 149466.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32401877.619 ops/s
# Warmup Iteration   2: 62745831.085 ops/s
# Warmup Iteration   3: 54466900.062 ops/s
# Warmup Iteration   4: 64217116.194 ops/s
# Warmup Iteration   5: 64318777.566 ops/s
# Warmup Iteration   6: 64433761.056 ops/s
# Warmup Iteration   7: 64208010.436 ops/s
# Warmup Iteration   8: 63850921.099 ops/s
# Warmup Iteration   9: 64313081.280 ops/s
# Warmup Iteration  10: 64254173.572 ops/s
# Warmup Iteration  11: 64247732.769 ops/s
# Warmup Iteration  12: 64177018.933 ops/s
# Warmup Iteration  13: 64288106.833 ops/s
# Warmup Iteration  14: 64309329.745 ops/s
# Warmup Iteration  15: 63766761.786 ops/s
# Warmup Iteration  16: 64140534.062 ops/s
# Warmup Iteration  17: 64271538.074 ops/s
# Warmup Iteration  18: 64309573.002 ops/s
# Warmup Iteration  19: 62834766.292 ops/s
# Warmup Iteration  20: 63689647.622 ops/s
# Warmup Iteration  21: 64226986.737 ops/s
# Warmup Iteration  22: 64539549.824 ops/s
# Warmup Iteration  23: 64413064.417 ops/s
# Warmup Iteration  24: 63719592.273 ops/s
# Warmup Iteration  25: 63971005.663 ops/s
# Warmup Iteration  26: 63753904.110 ops/s
# Warmup Iteration  27: 64329673.437 ops/s
# Warmup Iteration  28: 64316815.890 ops/s
# Warmup Iteration  29: 64368348.264 ops/s
# Warmup Iteration  30: 64285581.240 ops/s
Iteration   1: 64326367.333 ops/s
Iteration   2: 62607674.742 ops/s
Iteration   3: 64356534.252 ops/s
Iteration   4: 64508590.309 ops/s
Iteration   5: 64239150.081 ops/s
Iteration   6: 63515652.552 ops/s
Iteration   7: 63973954.174 ops/s
Iteration   8: 64282602.447 ops/s
Iteration   9: 64336559.030 ops/s
Iteration  10: 64300278.298 ops/s
Iteration  11: 63916071.125 ops/s
Iteration  12: 64332669.296 ops/s
Iteration  13: 64271407.517 ops/s
Iteration  14: 64396098.179 ops/s
Iteration  15: 63913533.242 ops/s
Iteration  16: 64452950.944 ops/s
Iteration  17: 64481199.136 ops/s
Iteration  18: 64253240.955 ops/s
Iteration  19: 64314098.671 ops/s
Iteration  20: 64414442.142 ops/s
Iteration  21: 64130569.161 ops/s
Iteration  22: 64364065.850 ops/s
Iteration  23: 64153107.043 ops/s
Iteration  24: 64105692.807 ops/s
Iteration  25: 63981677.078 ops/s
Iteration  26: 64133977.115 ops/s
Iteration  27: 64138899.772 ops/s
Iteration  28: 64036141.164 ops/s
Iteration  29: 64011934.938 ops/s
Iteration  30: 64062638.279 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min":
  64143725.921 ±(99.9%) 239966.061 ops/s [Average]
  (min, avg, max) = (62607674.742, 64143725.921, 64508590.309), stdev = 359169.931
  CI (99.9%): [63903759.860, 64383691.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_min  thrpt   30  64143725.921 ± 239966.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6428395.881 ops/s
# Warmup Iteration   2: 13355371.026 ops/s
# Warmup Iteration   3: 14221306.886 ops/s
# Warmup Iteration   4: 14442422.166 ops/s
# Warmup Iteration   5: 11470765.824 ops/s
# Warmup Iteration   6: 14461263.416 ops/s
# Warmup Iteration   7: 14454862.147 ops/s
# Warmup Iteration   8: 14460891.365 ops/s
# Warmup Iteration   9: 14326878.170 ops/s
# Warmup Iteration  10: 14466553.233 ops/s
# Warmup Iteration  11: 14424521.200 ops/s
# Warmup Iteration  12: 14481051.071 ops/s
# Warmup Iteration  13: 14448344.235 ops/s
# Warmup Iteration  14: 14436551.467 ops/s
# Warmup Iteration  15: 14404429.567 ops/s
# Warmup Iteration  16: 14445695.286 ops/s
# Warmup Iteration  17: 14411424.164 ops/s
# Warmup Iteration  18: 14471469.795 ops/s
# Warmup Iteration  19: 14345624.110 ops/s
# Warmup Iteration  20: 14338046.476 ops/s
# Warmup Iteration  21: 14393227.343 ops/s
# Warmup Iteration  22: 14460810.608 ops/s
# Warmup Iteration  23: 14463351.948 ops/s
# Warmup Iteration  24: 14468307.612 ops/s
# Warmup Iteration  25: 14445737.677 ops/s
# Warmup Iteration  26: 14302122.490 ops/s
# Warmup Iteration  27: 14426945.783 ops/s
# Warmup Iteration  28: 14425489.952 ops/s
# Warmup Iteration  29: 14430844.747 ops/s
# Warmup Iteration  30: 14441882.739 ops/s
Iteration   1: 14439305.768 ops/s
Iteration   2: 14431876.460 ops/s
Iteration   3: 14366383.636 ops/s
Iteration   4: 14456578.271 ops/s
Iteration   5: 14441503.184 ops/s
Iteration   6: 14454636.656 ops/s
Iteration   7: 14385229.684 ops/s
Iteration   8: 14470761.452 ops/s
Iteration   9: 14313649.446 ops/s
Iteration  10: 14160557.930 ops/s
Iteration  11: 14442715.450 ops/s
Iteration  12: 14445176.487 ops/s
Iteration  13: 14452281.025 ops/s
Iteration  14: 14372023.848 ops/s
Iteration  15: 14482889.320 ops/s
Iteration  16: 14394765.405 ops/s
Iteration  17: 14474018.821 ops/s
Iteration  18: 14447202.016 ops/s
Iteration  19: 14454578.992 ops/s
Iteration  20: 14462517.452 ops/s
Iteration  21: 14446940.000 ops/s
Iteration  22: 14461519.764 ops/s
Iteration  23: 14442815.609 ops/s
Iteration  24: 14491155.612 ops/s
Iteration  25: 14206029.592 ops/s
Iteration  26: 14431814.735 ops/s
Iteration  27: 14470121.056 ops/s
Iteration  28: 14452028.090 ops/s
Iteration  29: 14404211.570 ops/s
Iteration  30: 14486785.456 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy":
  14421402.426 ±(99.9%) 50652.520 ops/s [Average]
  (min, avg, max) = (14160557.930, 14421402.426, 14491155.612), stdev = 75814.314
  CI (99.9%): [14370749.906, 14472054.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_minBy  thrpt   30  14421402.426 ± 50652.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5108894.934 ops/s
# Warmup Iteration   2: 12025705.838 ops/s
# Warmup Iteration   3: 12281065.328 ops/s
# Warmup Iteration   4: 10024312.925 ops/s
# Warmup Iteration   5: 12128363.518 ops/s
# Warmup Iteration   6: 12328432.730 ops/s
# Warmup Iteration   7: 12300454.168 ops/s
# Warmup Iteration   8: 12321049.127 ops/s
# Warmup Iteration   9: 12308836.470 ops/s
# Warmup Iteration  10: 12275689.921 ops/s
# Warmup Iteration  11: 12296343.363 ops/s
# Warmup Iteration  12: 12319564.053 ops/s
# Warmup Iteration  13: 12289689.486 ops/s
# Warmup Iteration  14: 12293293.312 ops/s
# Warmup Iteration  15: 12227639.212 ops/s
# Warmup Iteration  16: 12308379.139 ops/s
# Warmup Iteration  17: 12296846.024 ops/s
# Warmup Iteration  18: 12306120.285 ops/s
# Warmup Iteration  19: 12301880.949 ops/s
# Warmup Iteration  20: 12209659.197 ops/s
# Warmup Iteration  21: 12277516.758 ops/s
# Warmup Iteration  22: 12311582.192 ops/s
# Warmup Iteration  23: 12215771.717 ops/s
# Warmup Iteration  24: 12326153.930 ops/s
# Warmup Iteration  25: 12271122.308 ops/s
# Warmup Iteration  26: 12296074.010 ops/s
# Warmup Iteration  27: 12308765.360 ops/s
# Warmup Iteration  28: 12293401.331 ops/s
# Warmup Iteration  29: 12255326.425 ops/s
# Warmup Iteration  30: 12306147.587 ops/s
Iteration   1: 12315180.848 ops/s
Iteration   2: 12259246.427 ops/s
Iteration   3: 12096908.495 ops/s
Iteration   4: 12278377.012 ops/s
Iteration   5: 12277075.929 ops/s
Iteration   6: 12338544.467 ops/s
Iteration   7: 12268133.767 ops/s
Iteration   8: 12114228.605 ops/s
Iteration   9: 12342573.721 ops/s
Iteration  10: 12287630.495 ops/s
Iteration  11: 12316913.146 ops/s
Iteration  12: 12298556.952 ops/s
Iteration  13: 12125389.494 ops/s
Iteration  14: 11968239.731 ops/s
Iteration  15: 12176814.318 ops/s
Iteration  16: 12293292.666 ops/s
Iteration  17: 12288364.697 ops/s
Iteration  18: 12112775.439 ops/s
Iteration  19: 12263124.250 ops/s
Iteration  20: 12363116.282 ops/s
Iteration  21: 12300736.148 ops/s
Iteration  22: 12329243.904 ops/s
Iteration  23: 12316800.236 ops/s
Iteration  24: 12279967.453 ops/s
Iteration  25: 12297026.202 ops/s
Iteration  26: 12273985.006 ops/s
Iteration  27: 12340341.012 ops/s
Iteration  28: 12224248.782 ops/s
Iteration  29: 12235867.152 ops/s
Iteration  30: 12087665.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minByOptional":
  12249012.279 ±(99.9%) 63321.850 ops/s [Average]
  (min, avg, max) = (11968239.731, 12249012.279, 12363116.282), stdev = 94777.172
  CI (99.9%): [12185690.428, 12312334.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_minByOptional  thrpt   30  12249012.279 ± 63321.850  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28773547.704 ops/s
# Warmup Iteration   2: 55824968.790 ops/s
# Warmup Iteration   3: 49015462.077 ops/s
# Warmup Iteration   4: 57497283.984 ops/s
# Warmup Iteration   5: 57340162.139 ops/s
# Warmup Iteration   6: 57375638.385 ops/s
# Warmup Iteration   7: 57440132.800 ops/s
# Warmup Iteration   8: 56953989.005 ops/s
# Warmup Iteration   9: 57406786.499 ops/s
# Warmup Iteration  10: 56936660.665 ops/s
# Warmup Iteration  11: 57538942.480 ops/s
# Warmup Iteration  12: 57510348.217 ops/s
# Warmup Iteration  13: 57494933.377 ops/s
# Warmup Iteration  14: 57077947.428 ops/s
# Warmup Iteration  15: 57287879.955 ops/s
# Warmup Iteration  16: 57422318.386 ops/s
# Warmup Iteration  17: 57486589.666 ops/s
# Warmup Iteration  18: 57623336.212 ops/s
# Warmup Iteration  19: 57617779.037 ops/s
# Warmup Iteration  20: 57287093.215 ops/s
# Warmup Iteration  21: 57663464.036 ops/s
# Warmup Iteration  22: 57698597.596 ops/s
# Warmup Iteration  23: 57135813.730 ops/s
# Warmup Iteration  24: 57612267.385 ops/s
# Warmup Iteration  25: 57656620.701 ops/s
# Warmup Iteration  26: 57689209.275 ops/s
# Warmup Iteration  27: 57661016.323 ops/s
# Warmup Iteration  28: 57498503.729 ops/s
# Warmup Iteration  29: 57754014.906 ops/s
# Warmup Iteration  30: 56842219.975 ops/s
Iteration   1: 57508781.139 ops/s
Iteration   2: 57656107.334 ops/s
Iteration   3: 57670484.980 ops/s
Iteration   4: 57756348.856 ops/s
Iteration   5: 56846334.190 ops/s
Iteration   6: 57665579.494 ops/s
Iteration   7: 57887941.493 ops/s
Iteration   8: 57747768.028 ops/s
Iteration   9: 57897139.355 ops/s
Iteration  10: 57759543.153 ops/s
Iteration  11: 57173958.579 ops/s
Iteration  12: 57798777.854 ops/s
Iteration  13: 57343073.995 ops/s
Iteration  14: 57902442.049 ops/s
Iteration  15: 57681319.784 ops/s
Iteration  16: 57774731.521 ops/s
Iteration  17: 57692814.610 ops/s
Iteration  18: 57550833.222 ops/s
Iteration  19: 57755523.800 ops/s
Iteration  20: 57413566.831 ops/s
Iteration  21: 56657632.611 ops/s
Iteration  22: 57705937.349 ops/s
Iteration  23: 57834247.639 ops/s
Iteration  24: 57544339.624 ops/s
Iteration  25: 57692948.662 ops/s
Iteration  26: 56822858.174 ops/s
Iteration  27: 57449238.153 ops/s
Iteration  28: 57874274.813 ops/s
Iteration  29: 57745997.672 ops/s
Iteration  30: 57647859.971 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minBy_null_throws":
  57581946.831 ±(99.9%) 214849.533 ops/s [Average]
  (min, avg, max) = (56657632.611, 57581946.831, 57902442.049), stdev = 321576.691
  CI (99.9%): [57367097.298, 57796796.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  57581946.831 ± 214849.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10296976.873 ops/s
# Warmup Iteration   2: 20047443.800 ops/s
# Warmup Iteration   3: 18005074.521 ops/s
# Warmup Iteration   4: 21006228.773 ops/s
# Warmup Iteration   5: 20975050.947 ops/s
# Warmup Iteration   6: 21093364.354 ops/s
# Warmup Iteration   7: 20953842.898 ops/s
# Warmup Iteration   8: 21045857.706 ops/s
# Warmup Iteration   9: 21100806.145 ops/s
# Warmup Iteration  10: 21051284.529 ops/s
# Warmup Iteration  11: 21111323.317 ops/s
# Warmup Iteration  12: 21106676.269 ops/s
# Warmup Iteration  13: 20917406.560 ops/s
# Warmup Iteration  14: 21115016.340 ops/s
# Warmup Iteration  15: 20911197.524 ops/s
# Warmup Iteration  16: 21085341.139 ops/s
# Warmup Iteration  17: 21087493.101 ops/s
# Warmup Iteration  18: 21130093.013 ops/s
# Warmup Iteration  19: 21055247.165 ops/s
# Warmup Iteration  20: 21171090.685 ops/s
# Warmup Iteration  21: 21092421.037 ops/s
# Warmup Iteration  22: 21111833.926 ops/s
# Warmup Iteration  23: 20956534.449 ops/s
# Warmup Iteration  24: 21087334.560 ops/s
# Warmup Iteration  25: 20998399.260 ops/s
# Warmup Iteration  26: 21067205.326 ops/s
# Warmup Iteration  27: 20910663.959 ops/s
# Warmup Iteration  28: 21119110.016 ops/s
# Warmup Iteration  29: 21102592.190 ops/s
# Warmup Iteration  30: 21108615.912 ops/s
Iteration   1: 20981187.750 ops/s
Iteration   2: 21094736.613 ops/s
Iteration   3: 21152543.126 ops/s
Iteration   4: 20824804.155 ops/s
Iteration   5: 21111469.871 ops/s
Iteration   6: 21027367.225 ops/s
Iteration   7: 21142332.256 ops/s
Iteration   8: 21066115.661 ops/s
Iteration   9: 20960561.780 ops/s
Iteration  10: 20653997.172 ops/s
Iteration  11: 21108351.142 ops/s
Iteration  12: 20784203.624 ops/s
Iteration  13: 21099446.546 ops/s
Iteration  14: 21058395.359 ops/s
Iteration  15: 21097382.128 ops/s
Iteration  16: 21081043.737 ops/s
Iteration  17: 21046935.403 ops/s
Iteration  18: 21140452.601 ops/s
Iteration  19: 20997873.355 ops/s
Iteration  20: 21105303.806 ops/s
Iteration  21: 20683860.472 ops/s
Iteration  22: 21148473.699 ops/s
Iteration  23: 21145316.466 ops/s
Iteration  24: 21101870.020 ops/s
Iteration  25: 20998176.602 ops/s
Iteration  26: 21178721.076 ops/s
Iteration  27: 20965760.765 ops/s
Iteration  28: 20947687.529 ops/s
Iteration  29: 21168375.356 ops/s
Iteration  30: 21108154.584 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_minOptional":
  21032696.663 ±(99.9%) 91199.821 ops/s [Average]
  (min, avg, max) = (20653997.172, 21032696.663, 21178721.076), stdev = 136503.609
  CI (99.9%): [20941496.841, 21123896.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_minOptional  thrpt   30  21032696.663 ± 91199.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801626.834 ops/s
# Warmup Iteration   2: 830818.194 ops/s
# Warmup Iteration   3: 992775.358 ops/s
# Warmup Iteration   4: 1052560.396 ops/s
# Warmup Iteration   5: 1056410.544 ops/s
# Warmup Iteration   6: 1051230.279 ops/s
# Warmup Iteration   7: 1054044.939 ops/s
# Warmup Iteration   8: 1048956.832 ops/s
# Warmup Iteration   9: 1058565.931 ops/s
# Warmup Iteration  10: 1041776.812 ops/s
# Warmup Iteration  11: 1044798.909 ops/s
# Warmup Iteration  12: 1048252.422 ops/s
# Warmup Iteration  13: 1003758.666 ops/s
# Warmup Iteration  14: 929243.844 ops/s
# Warmup Iteration  15: 1055255.873 ops/s
# Warmup Iteration  16: 1051617.860 ops/s
# Warmup Iteration  17: 1129193.258 ops/s
# Warmup Iteration  18: 1124875.413 ops/s
# Warmup Iteration  19: 1122798.368 ops/s
# Warmup Iteration  20: 1128625.978 ops/s
# Warmup Iteration  21: 1109123.696 ops/s
# Warmup Iteration  22: 1121093.011 ops/s
# Warmup Iteration  23: 1114795.828 ops/s
# Warmup Iteration  24: 1125473.499 ops/s
# Warmup Iteration  25: 1126187.685 ops/s
# Warmup Iteration  26: 1108788.669 ops/s
# Warmup Iteration  27: 1120979.579 ops/s
# Warmup Iteration  28: 1118590.086 ops/s
# Warmup Iteration  29: 1124394.754 ops/s
# Warmup Iteration  30: 1121184.283 ops/s
Iteration   1: 1126701.339 ops/s
Iteration   2: 1110886.286 ops/s
Iteration   3: 1127599.957 ops/s
Iteration   4: 1127598.276 ops/s
Iteration   5: 1124982.371 ops/s
Iteration   6: 1128444.971 ops/s
Iteration   7: 1124871.745 ops/s
Iteration   8: 1111353.736 ops/s
Iteration   9: 1127162.546 ops/s
Iteration  10: 1104355.987 ops/s
Iteration  11: 1121147.489 ops/s
Iteration  12: 1122106.754 ops/s
Iteration  13: 1125303.164 ops/s
Iteration  14: 1125242.038 ops/s
Iteration  15: 1130531.278 ops/s
Iteration  16: 1124026.265 ops/s
Iteration  17: 1126153.007 ops/s
Iteration  18: 1107168.389 ops/s
Iteration  19: 1128430.586 ops/s
Iteration  20: 1130571.443 ops/s
Iteration  21: 1125060.474 ops/s
Iteration  22: 1127989.210 ops/s
Iteration  23: 1127119.039 ops/s
Iteration  24: 1118089.815 ops/s
Iteration  25: 1121930.673 ops/s
Iteration  26: 1123573.628 ops/s
Iteration  27: 1131082.042 ops/s
Iteration  28: 1129766.894 ops/s
Iteration  29: 1106659.714 ops/s
Iteration  30: 1115349.925 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws":
  1122708.635 ±(99.9%) 5063.787 ops/s [Average]
  (min, avg, max) = (1104355.987, 1122708.635, 1131082.042), stdev = 7579.238
  CI (99.9%): [1117644.848, 1127772.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1122708.635 ± 5063.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 815368.335 ops/s
# Warmup Iteration   2: 831627.540 ops/s
# Warmup Iteration   3: 999547.748 ops/s
# Warmup Iteration   4: 1065110.220 ops/s
# Warmup Iteration   5: 1068247.749 ops/s
# Warmup Iteration   6: 1064936.421 ops/s
# Warmup Iteration   7: 1066547.945 ops/s
# Warmup Iteration   8: 1066336.474 ops/s
# Warmup Iteration   9: 1057282.665 ops/s
# Warmup Iteration  10: 1063078.788 ops/s
# Warmup Iteration  11: 1060851.869 ops/s
# Warmup Iteration  12: 1068212.643 ops/s
# Warmup Iteration  13: 978099.543 ops/s
# Warmup Iteration  14: 970876.971 ops/s
# Warmup Iteration  15: 1068864.306 ops/s
# Warmup Iteration  16: 1058892.130 ops/s
# Warmup Iteration  17: 1113399.841 ops/s
# Warmup Iteration  18: 1134356.938 ops/s
# Warmup Iteration  19: 1135723.549 ops/s
# Warmup Iteration  20: 1138447.831 ops/s
# Warmup Iteration  21: 1135298.667 ops/s
# Warmup Iteration  22: 1133472.618 ops/s
# Warmup Iteration  23: 1136964.600 ops/s
# Warmup Iteration  24: 1140010.640 ops/s
# Warmup Iteration  25: 1133775.797 ops/s
# Warmup Iteration  26: 1135262.100 ops/s
# Warmup Iteration  27: 1120130.128 ops/s
# Warmup Iteration  28: 1132712.546 ops/s
# Warmup Iteration  29: 1124736.396 ops/s
# Warmup Iteration  30: 1136112.114 ops/s
Iteration   1: 1129450.710 ops/s
Iteration   2: 1132911.231 ops/s
Iteration   3: 1127231.202 ops/s
Iteration   4: 1139034.022 ops/s
Iteration   5: 1127507.037 ops/s
Iteration   6: 1131859.195 ops/s
Iteration   7: 1126676.773 ops/s
Iteration   8: 1132605.094 ops/s
Iteration   9: 1139686.177 ops/s
Iteration  10: 1131012.679 ops/s
Iteration  11: 1112375.802 ops/s
Iteration  12: 1131443.196 ops/s
Iteration  13: 1134255.895 ops/s
Iteration  14: 1135576.423 ops/s
Iteration  15: 1131701.851 ops/s
Iteration  16: 1135961.695 ops/s
Iteration  17: 1131396.475 ops/s
Iteration  18: 1133193.751 ops/s
Iteration  19: 1136356.405 ops/s
Iteration  20: 1134426.782 ops/s
Iteration  21: 1119581.935 ops/s
Iteration  22: 1131397.022 ops/s
Iteration  23: 1134078.389 ops/s
Iteration  24: 1132874.761 ops/s
Iteration  25: 1119385.197 ops/s
Iteration  26: 1132651.381 ops/s
Iteration  27: 1119051.369 ops/s
Iteration  28: 1132737.934 ops/s
Iteration  29: 1135177.807 ops/s
Iteration  30: 1124915.428 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_empty_throws_without_comparator":
  1130550.454 ±(99.9%) 4150.039 ops/s [Average]
  (min, avg, max) = (1112375.802, 1130550.454, 1139686.177), stdev = 6211.584
  CI (99.9%): [1126400.415, 1134700.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_min_empty_throws_without_comparator  thrpt   30  1130550.454 ± 4150.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21492172.351 ops/s
# Warmup Iteration   2: 44092388.645 ops/s
# Warmup Iteration   3: 37368515.477 ops/s
# Warmup Iteration   4: 44450830.061 ops/s
# Warmup Iteration   5: 44289005.951 ops/s
# Warmup Iteration   6: 43755829.857 ops/s
# Warmup Iteration   7: 44184898.077 ops/s
# Warmup Iteration   8: 44307430.810 ops/s
# Warmup Iteration   9: 44437871.190 ops/s
# Warmup Iteration  10: 44403999.102 ops/s
# Warmup Iteration  11: 44290468.299 ops/s
# Warmup Iteration  12: 43677989.940 ops/s
# Warmup Iteration  13: 44102179.171 ops/s
# Warmup Iteration  14: 44295902.152 ops/s
# Warmup Iteration  15: 44402077.588 ops/s
# Warmup Iteration  16: 44263589.943 ops/s
# Warmup Iteration  17: 44303490.906 ops/s
# Warmup Iteration  18: 43841286.722 ops/s
# Warmup Iteration  19: 43937583.486 ops/s
# Warmup Iteration  20: 44250837.981 ops/s
# Warmup Iteration  21: 44197958.574 ops/s
# Warmup Iteration  22: 44254989.413 ops/s
# Warmup Iteration  23: 43832315.141 ops/s
# Warmup Iteration  24: 44170932.389 ops/s
# Warmup Iteration  25: 44371144.881 ops/s
# Warmup Iteration  26: 44356853.256 ops/s
# Warmup Iteration  27: 44309210.186 ops/s
# Warmup Iteration  28: 44244955.806 ops/s
# Warmup Iteration  29: 44285859.163 ops/s
# Warmup Iteration  30: 44069132.904 ops/s
Iteration   1: 43983971.430 ops/s
Iteration   2: 44272258.333 ops/s
Iteration   3: 44392655.599 ops/s
Iteration   4: 44226843.944 ops/s
Iteration   5: 44444222.921 ops/s
Iteration   6: 44251768.464 ops/s
Iteration   7: 44200121.218 ops/s
Iteration   8: 44356697.021 ops/s
Iteration   9: 44373741.045 ops/s
Iteration  10: 44199854.279 ops/s
Iteration  11: 44415851.423 ops/s
Iteration  12: 44294026.429 ops/s
Iteration  13: 44270476.855 ops/s
Iteration  14: 44446424.405 ops/s
Iteration  15: 44069092.711 ops/s
Iteration  16: 43777215.870 ops/s
Iteration  17: 44318293.816 ops/s
Iteration  18: 44314669.343 ops/s
Iteration  19: 44360393.061 ops/s
Iteration  20: 44425929.147 ops/s
Iteration  21: 44270213.798 ops/s
Iteration  22: 44409876.399 ops/s
Iteration  23: 44304954.036 ops/s
Iteration  24: 44417891.901 ops/s
Iteration  25: 44229415.807 ops/s
Iteration  26: 44246774.576 ops/s
Iteration  27: 44242093.966 ops/s
Iteration  28: 44326364.985 ops/s
Iteration  29: 44157349.729 ops/s
Iteration  30: 44397519.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_safe":
  44279898.738 ±(99.9%) 96523.696 ops/s [Average]
  (min, avg, max) = (43777215.870, 44279898.738, 44446424.405), stdev = 144472.134
  CI (99.9%): [44183375.043, 44376422.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_min_null_safe  thrpt   30  44279898.738 ± 96523.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29753662.203 ops/s
# Warmup Iteration   2: 61072118.343 ops/s
# Warmup Iteration   3: 51706776.286 ops/s
# Warmup Iteration   4: 61253989.995 ops/s
# Warmup Iteration   5: 60945825.488 ops/s
# Warmup Iteration   6: 61215348.405 ops/s
# Warmup Iteration   7: 61286981.170 ops/s
# Warmup Iteration   8: 61314758.456 ops/s
# Warmup Iteration   9: 61263782.474 ops/s
# Warmup Iteration  10: 61319414.413 ops/s
# Warmup Iteration  11: 61235189.548 ops/s
# Warmup Iteration  12: 61364216.126 ops/s
# Warmup Iteration  13: 61078847.289 ops/s
# Warmup Iteration  14: 61205993.615 ops/s
# Warmup Iteration  15: 60516525.322 ops/s
# Warmup Iteration  16: 61458697.408 ops/s
# Warmup Iteration  17: 61271314.084 ops/s
# Warmup Iteration  18: 61198514.081 ops/s
# Warmup Iteration  19: 60825326.935 ops/s
# Warmup Iteration  20: 60939740.033 ops/s
# Warmup Iteration  21: 61418500.736 ops/s
# Warmup Iteration  22: 61078966.062 ops/s
# Warmup Iteration  23: 60342935.575 ops/s
# Warmup Iteration  24: 61398628.481 ops/s
# Warmup Iteration  25: 61269935.739 ops/s
# Warmup Iteration  26: 61374860.096 ops/s
# Warmup Iteration  27: 61227110.051 ops/s
# Warmup Iteration  28: 61194268.456 ops/s
# Warmup Iteration  29: 61248876.500 ops/s
# Warmup Iteration  30: 60752119.248 ops/s
Iteration   1: 61260194.752 ops/s
Iteration   2: 61351362.852 ops/s
Iteration   3: 61393886.914 ops/s
Iteration   4: 60275526.514 ops/s
Iteration   5: 61293125.713 ops/s
Iteration   6: 61266924.479 ops/s
Iteration   7: 61604051.682 ops/s
Iteration   8: 61226562.880 ops/s
Iteration   9: 61355754.589 ops/s
Iteration  10: 61295702.676 ops/s
Iteration  11: 61442155.499 ops/s
Iteration  12: 61280160.242 ops/s
Iteration  13: 61433436.694 ops/s
Iteration  14: 60433536.851 ops/s
Iteration  15: 61187029.950 ops/s
Iteration  16: 60350820.746 ops/s
Iteration  17: 61392404.704 ops/s
Iteration  18: 60132882.392 ops/s
Iteration  19: 61348575.090 ops/s
Iteration  20: 61249947.770 ops/s
Iteration  21: 60509421.671 ops/s
Iteration  22: 61439692.495 ops/s
Iteration  23: 60287343.993 ops/s
Iteration  24: 61505055.477 ops/s
Iteration  25: 60884591.905 ops/s
Iteration  26: 61379336.976 ops/s
Iteration  27: 61294974.741 ops/s
Iteration  28: 60698199.574 ops/s
Iteration  29: 60947822.546 ops/s
Iteration  30: 60291207.712 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws":
  61060389.669 ±(99.9%) 301750.045 ops/s [Average]
  (min, avg, max) = (60132882.392, 61060389.669, 61604051.682), stdev = 451645.296
  CI (99.9%): [60758639.624, 61362139.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_min_null_throws  thrpt   30  61060389.669 ± 301750.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152435.680 ops/s
# Warmup Iteration   2: 157456.477 ops/s
# Warmup Iteration   3: 157152.913 ops/s
# Warmup Iteration   4: 157356.650 ops/s
# Warmup Iteration   5: 157634.711 ops/s
# Warmup Iteration   6: 157143.189 ops/s
# Warmup Iteration   7: 157314.601 ops/s
# Warmup Iteration   8: 157139.889 ops/s
# Warmup Iteration   9: 156819.590 ops/s
# Warmup Iteration  10: 156855.928 ops/s
# Warmup Iteration  11: 157828.398 ops/s
# Warmup Iteration  12: 159229.288 ops/s
# Warmup Iteration  13: 165234.069 ops/s
# Warmup Iteration  14: 163065.660 ops/s
# Warmup Iteration  15: 164735.503 ops/s
# Warmup Iteration  16: 163852.551 ops/s
# Warmup Iteration  17: 167429.287 ops/s
# Warmup Iteration  18: 167199.722 ops/s
# Warmup Iteration  19: 166480.148 ops/s
# Warmup Iteration  20: 167213.937 ops/s
# Warmup Iteration  21: 165886.768 ops/s
# Warmup Iteration  22: 166777.369 ops/s
# Warmup Iteration  23: 166425.558 ops/s
# Warmup Iteration  24: 167192.672 ops/s
# Warmup Iteration  25: 165973.373 ops/s
# Warmup Iteration  26: 166629.360 ops/s
# Warmup Iteration  27: 166084.998 ops/s
# Warmup Iteration  28: 166543.313 ops/s
# Warmup Iteration  29: 167106.061 ops/s
# Warmup Iteration  30: 167680.506 ops/s
Iteration   1: 163737.549 ops/s
Iteration   2: 166946.346 ops/s
Iteration   3: 165521.645 ops/s
Iteration   4: 165516.929 ops/s
Iteration   5: 166594.767 ops/s
Iteration   6: 168099.949 ops/s
Iteration   7: 167707.139 ops/s
Iteration   8: 165806.466 ops/s
Iteration   9: 166173.755 ops/s
Iteration  10: 166802.902 ops/s
Iteration  11: 166463.125 ops/s
Iteration  12: 167026.414 ops/s
Iteration  13: 167726.843 ops/s
Iteration  14: 166511.302 ops/s
Iteration  15: 166347.976 ops/s
Iteration  16: 167308.920 ops/s
Iteration  17: 165426.158 ops/s
Iteration  18: 164444.946 ops/s
Iteration  19: 164300.349 ops/s
Iteration  20: 164173.246 ops/s
Iteration  21: 167235.607 ops/s
Iteration  22: 166097.220 ops/s
Iteration  23: 166876.775 ops/s
Iteration  24: 166101.271 ops/s
Iteration  25: 165998.340 ops/s
Iteration  26: 164570.039 ops/s
Iteration  27: 166309.900 ops/s
Iteration  28: 166733.722 ops/s
Iteration  29: 167076.048 ops/s
Iteration  30: 165796.149 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  166181.060 ±(99.9%) 738.122 ops/s [Average]
  (min, avg, max) = (163737.549, 166181.060, 168099.949), stdev = 1104.786
  CI (99.9%): [165442.938, 166919.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  166181.060 ± 738.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31306660.363 ops/s
# Warmup Iteration   2: 60249910.247 ops/s
# Warmup Iteration   3: 54243701.816 ops/s
# Warmup Iteration   4: 64484805.807 ops/s
# Warmup Iteration   5: 64563933.496 ops/s
# Warmup Iteration   6: 63731777.690 ops/s
# Warmup Iteration   7: 64733163.756 ops/s
# Warmup Iteration   8: 64534507.656 ops/s
# Warmup Iteration   9: 64589535.966 ops/s
# Warmup Iteration  10: 64818817.190 ops/s
# Warmup Iteration  11: 64757560.327 ops/s
# Warmup Iteration  12: 64459191.613 ops/s
# Warmup Iteration  13: 63507700.957 ops/s
# Warmup Iteration  14: 64747578.305 ops/s
# Warmup Iteration  15: 63866973.113 ops/s
# Warmup Iteration  16: 64676310.392 ops/s
# Warmup Iteration  17: 64181893.108 ops/s
# Warmup Iteration  18: 64461228.952 ops/s
# Warmup Iteration  19: 64379019.564 ops/s
# Warmup Iteration  20: 64265389.817 ops/s
# Warmup Iteration  21: 64512368.070 ops/s
# Warmup Iteration  22: 64650747.586 ops/s
# Warmup Iteration  23: 64111925.030 ops/s
# Warmup Iteration  24: 64386359.495 ops/s
# Warmup Iteration  25: 63891356.772 ops/s
# Warmup Iteration  26: 64476026.300 ops/s
# Warmup Iteration  27: 64697748.920 ops/s
# Warmup Iteration  28: 63436753.284 ops/s
# Warmup Iteration  29: 64194467.808 ops/s
# Warmup Iteration  30: 64193975.616 ops/s
Iteration   1: 64411228.714 ops/s
Iteration   2: 64577120.442 ops/s
Iteration   3: 63846731.678 ops/s
Iteration   4: 64650820.533 ops/s
Iteration   5: 64296292.257 ops/s
Iteration   6: 64221854.375 ops/s
Iteration   7: 63323376.391 ops/s
Iteration   8: 64393049.386 ops/s
Iteration   9: 64605538.065 ops/s
Iteration  10: 63754977.298 ops/s
Iteration  11: 64083545.491 ops/s
Iteration  12: 64259725.735 ops/s
Iteration  13: 64455112.903 ops/s
Iteration  14: 64421551.913 ops/s
Iteration  15: 64721979.525 ops/s
Iteration  16: 64190550.051 ops/s
Iteration  17: 64187382.954 ops/s
Iteration  18: 64041739.982 ops/s
Iteration  19: 64163625.669 ops/s
Iteration  20: 64266570.375 ops/s
Iteration  21: 63415727.206 ops/s
Iteration  22: 64616273.145 ops/s
Iteration  23: 64309574.943 ops/s
Iteration  24: 64239886.544 ops/s
Iteration  25: 64665400.701 ops/s
Iteration  26: 64562441.543 ops/s
Iteration  27: 64395562.502 ops/s
Iteration  28: 64443915.016 ops/s
Iteration  29: 64360732.921 ops/s
Iteration  30: 63274915.242 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_min_without_comparator":
  64238573.450 ±(99.9%) 254631.215 ops/s [Average]
  (min, avg, max) = (63274915.242, 64238573.450, 64721979.525), stdev = 381120.044
  CI (99.9%): [63983942.235, 64493204.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  64238573.450 ± 254631.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57645914.266 ops/s
# Warmup Iteration   2: 109140032.866 ops/s
# Warmup Iteration   3: 107914417.286 ops/s
# Warmup Iteration   4: 128740564.482 ops/s
# Warmup Iteration   5: 127768294.149 ops/s
# Warmup Iteration   6: 126558627.753 ops/s
# Warmup Iteration   7: 128517117.393 ops/s
# Warmup Iteration   8: 127259745.880 ops/s
# Warmup Iteration   9: 128863928.198 ops/s
# Warmup Iteration  10: 128091826.130 ops/s
# Warmup Iteration  11: 128802082.920 ops/s
# Warmup Iteration  12: 127329662.167 ops/s
# Warmup Iteration  13: 128353649.816 ops/s
# Warmup Iteration  14: 128855880.238 ops/s
# Warmup Iteration  15: 127927556.477 ops/s
# Warmup Iteration  16: 128518068.493 ops/s
# Warmup Iteration  17: 125395687.308 ops/s
# Warmup Iteration  18: 126232640.936 ops/s
# Warmup Iteration  19: 126248670.570 ops/s
# Warmup Iteration  20: 125106747.185 ops/s
# Warmup Iteration  21: 126399101.442 ops/s
# Warmup Iteration  22: 126405092.486 ops/s
# Warmup Iteration  23: 126663459.707 ops/s
# Warmup Iteration  24: 126220973.795 ops/s
# Warmup Iteration  25: 126415967.661 ops/s
# Warmup Iteration  26: 125921392.257 ops/s
# Warmup Iteration  27: 126398935.779 ops/s
# Warmup Iteration  28: 126487138.054 ops/s
# Warmup Iteration  29: 126743766.811 ops/s
# Warmup Iteration  30: 126600475.203 ops/s
Iteration   1: 125162759.086 ops/s
Iteration   2: 126829069.936 ops/s
Iteration   3: 126147796.255 ops/s
Iteration   4: 126453625.369 ops/s
Iteration   5: 125509786.091 ops/s
Iteration   6: 126529953.122 ops/s
Iteration   7: 126492223.697 ops/s
Iteration   8: 126124782.088 ops/s
Iteration   9: 126311696.960 ops/s
Iteration  10: 127112363.642 ops/s
Iteration  11: 126212230.859 ops/s
Iteration  12: 126388500.516 ops/s
Iteration  13: 126676483.324 ops/s
Iteration  14: 126459996.025 ops/s
Iteration  15: 126666360.262 ops/s
Iteration  16: 125604256.973 ops/s
Iteration  17: 126704817.452 ops/s
Iteration  18: 126544850.684 ops/s
Iteration  19: 126729739.697 ops/s
Iteration  20: 124762170.622 ops/s
Iteration  21: 125981142.337 ops/s
Iteration  22: 127019482.773 ops/s
Iteration  23: 126902321.292 ops/s
Iteration  24: 124396923.111 ops/s
Iteration  25: 126016075.166 ops/s
Iteration  26: 126123245.781 ops/s
Iteration  27: 125904717.846 ops/s
Iteration  28: 126614277.301 ops/s
Iteration  29: 125161683.513 ops/s
Iteration  30: 124105196.863 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newEmpty":
  126121617.621 ±(99.9%) 507435.629 ops/s [Average]
  (min, avg, max) = (124105196.863, 126121617.621, 127112363.642), stdev = 759505.818
  CI (99.9%): [125614181.993, 126629053.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt          Score        Error  Units
FastListTest._Benchmark.benchmark_newEmpty  thrpt   30  126121617.621 ± 507435.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9315733.716 ops/s
# Warmup Iteration   2: 17029852.221 ops/s
# Warmup Iteration   3: 17086084.092 ops/s
# Warmup Iteration   4: 18621528.850 ops/s
# Warmup Iteration   5: 18732253.366 ops/s
# Warmup Iteration   6: 18724124.494 ops/s
# Warmup Iteration   7: 18745903.996 ops/s
# Warmup Iteration   8: 18590771.823 ops/s
# Warmup Iteration   9: 18732616.696 ops/s
# Warmup Iteration  10: 18705125.085 ops/s
# Warmup Iteration  11: 18704482.867 ops/s
# Warmup Iteration  12: 18669957.471 ops/s
# Warmup Iteration  13: 18565595.626 ops/s
# Warmup Iteration  14: 18720178.102 ops/s
# Warmup Iteration  15: 18728894.151 ops/s
# Warmup Iteration  16: 18735465.605 ops/s
# Warmup Iteration  17: 18696072.994 ops/s
# Warmup Iteration  18: 18535086.097 ops/s
# Warmup Iteration  19: 18550177.922 ops/s
# Warmup Iteration  20: 18596035.506 ops/s
# Warmup Iteration  21: 18657868.179 ops/s
# Warmup Iteration  22: 18689059.432 ops/s
# Warmup Iteration  23: 18758488.435 ops/s
# Warmup Iteration  24: 18746601.638 ops/s
# Warmup Iteration  25: 18714682.969 ops/s
# Warmup Iteration  26: 18663186.021 ops/s
# Warmup Iteration  27: 18686416.538 ops/s
# Warmup Iteration  28: 18668564.001 ops/s
# Warmup Iteration  29: 18584265.825 ops/s
# Warmup Iteration  30: 18750218.755 ops/s
Iteration   1: 18656751.378 ops/s
Iteration   2: 18575443.408 ops/s
Iteration   3: 18711629.748 ops/s
Iteration   4: 18731131.468 ops/s
Iteration   5: 18753291.993 ops/s
Iteration   6: 18564515.382 ops/s
Iteration   7: 18685120.499 ops/s
Iteration   8: 18704856.419 ops/s
Iteration   9: 18684543.324 ops/s
Iteration  10: 18780305.228 ops/s
Iteration  11: 18713751.366 ops/s
Iteration  12: 18707475.260 ops/s
Iteration  13: 18739118.693 ops/s
Iteration  14: 18657733.957 ops/s
Iteration  15: 18655131.112 ops/s
Iteration  16: 18570243.994 ops/s
Iteration  17: 18731889.052 ops/s
Iteration  18: 18732381.948 ops/s
Iteration  19: 18729313.213 ops/s
Iteration  20: 18749049.764 ops/s
Iteration  21: 18706880.558 ops/s
Iteration  22: 18733142.828 ops/s
Iteration  23: 18626267.967 ops/s
Iteration  24: 18788298.365 ops/s
Iteration  25: 18710652.888 ops/s
Iteration  26: 18743098.564 ops/s
Iteration  27: 18562669.538 ops/s
Iteration  28: 18694474.828 ops/s
Iteration  29: 18641152.332 ops/s
Iteration  30: 18673083.042 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_newListWithSize":
  18690446.604 ±(99.9%) 41343.740 ops/s [Average]
  (min, avg, max) = (18562669.538, 18690446.604, 18788298.365), stdev = 61881.368
  CI (99.9%): [18649102.864, 18731790.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_newListWithSize  thrpt   30  18690446.604 ± 41343.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13803417.309 ops/s
# Warmup Iteration   2: 28128860.198 ops/s
# Warmup Iteration   3: 24066908.444 ops/s
# Warmup Iteration   4: 28500212.663 ops/s
# Warmup Iteration   5: 28351452.727 ops/s
# Warmup Iteration   6: 28476199.853 ops/s
# Warmup Iteration   7: 28312029.441 ops/s
# Warmup Iteration   8: 28549681.048 ops/s
# Warmup Iteration   9: 28528595.519 ops/s
# Warmup Iteration  10: 28516165.405 ops/s
# Warmup Iteration  11: 28568298.644 ops/s
# Warmup Iteration  12: 28453315.930 ops/s
# Warmup Iteration  13: 28378149.502 ops/s
# Warmup Iteration  14: 28106484.107 ops/s
# Warmup Iteration  15: 28485313.159 ops/s
# Warmup Iteration  16: 28547801.071 ops/s
# Warmup Iteration  17: 28452965.141 ops/s
# Warmup Iteration  18: 28384909.462 ops/s
# Warmup Iteration  19: 28148583.444 ops/s
# Warmup Iteration  20: 28217701.278 ops/s
# Warmup Iteration  21: 28252830.900 ops/s
# Warmup Iteration  22: 28375551.917 ops/s
# Warmup Iteration  23: 28302733.982 ops/s
# Warmup Iteration  24: 28227429.402 ops/s
# Warmup Iteration  25: 28295721.307 ops/s
# Warmup Iteration  26: 28416790.947 ops/s
# Warmup Iteration  27: 28404343.332 ops/s
# Warmup Iteration  28: 28155760.348 ops/s
# Warmup Iteration  29: 28402347.352 ops/s
# Warmup Iteration  30: 28381051.847 ops/s
Iteration   1: 28434552.275 ops/s
Iteration   2: 28373676.691 ops/s
Iteration   3: 28315111.765 ops/s
Iteration   4: 28309019.533 ops/s
Iteration   5: 28399875.776 ops/s
Iteration   6: 28361904.032 ops/s
Iteration   7: 28311780.739 ops/s
Iteration   8: 28311690.193 ops/s
Iteration   9: 28470758.598 ops/s
Iteration  10: 28322511.625 ops/s
Iteration  11: 28438840.358 ops/s
Iteration  12: 28439656.424 ops/s
Iteration  13: 28313587.731 ops/s
Iteration  14: 28514603.711 ops/s
Iteration  15: 28388801.002 ops/s
Iteration  16: 28331614.544 ops/s
Iteration  17: 28086347.493 ops/s
Iteration  18: 28398495.022 ops/s
Iteration  19: 27904521.866 ops/s
Iteration  20: 28207950.148 ops/s
Iteration  21: 28470563.315 ops/s
Iteration  22: 28297091.086 ops/s
Iteration  23: 28427696.524 ops/s
Iteration  24: 28469017.349 ops/s
Iteration  25: 28188220.014 ops/s
Iteration  26: 28365018.674 ops/s
Iteration  27: 28298848.059 ops/s
Iteration  28: 28516529.408 ops/s
Iteration  29: 27914401.799 ops/s
Iteration  30: 28366156.654 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfy":
  28331628.080 ±(99.9%) 99434.786 ops/s [Average]
  (min, avg, max) = (27904521.866, 28331628.080, 28516529.408), stdev = 148829.317
  CI (99.9%): [28232193.295, 28431062.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  28331628.080 ± 99434.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8318067.498 ops/s
# Warmup Iteration   2: 17062741.573 ops/s
# Warmup Iteration   3: 17419557.442 ops/s
# Warmup Iteration   4: 14796887.263 ops/s
# Warmup Iteration   5: 17602589.254 ops/s
# Warmup Iteration   6: 17661958.372 ops/s
# Warmup Iteration   7: 17592141.082 ops/s
# Warmup Iteration   8: 17581614.898 ops/s
# Warmup Iteration   9: 17681478.852 ops/s
# Warmup Iteration  10: 17423418.970 ops/s
# Warmup Iteration  11: 17633390.916 ops/s
# Warmup Iteration  12: 17565182.555 ops/s
# Warmup Iteration  13: 17553149.986 ops/s
# Warmup Iteration  14: 17580979.596 ops/s
# Warmup Iteration  15: 17598215.561 ops/s
# Warmup Iteration  16: 17569814.350 ops/s
# Warmup Iteration  17: 17593839.507 ops/s
# Warmup Iteration  18: 17571824.064 ops/s
# Warmup Iteration  19: 17601736.775 ops/s
# Warmup Iteration  20: 17618118.415 ops/s
# Warmup Iteration  21: 17585148.953 ops/s
# Warmup Iteration  22: 17450293.107 ops/s
# Warmup Iteration  23: 17562348.656 ops/s
# Warmup Iteration  24: 17615675.533 ops/s
# Warmup Iteration  25: 17558351.311 ops/s
# Warmup Iteration  26: 17639854.224 ops/s
# Warmup Iteration  27: 17632395.003 ops/s
# Warmup Iteration  28: 17397567.899 ops/s
# Warmup Iteration  29: 17386397.448 ops/s
# Warmup Iteration  30: 17688443.549 ops/s
Iteration   1: 17606408.870 ops/s
Iteration   2: 17340174.103 ops/s
Iteration   3: 17770928.854 ops/s
Iteration   4: 17581664.669 ops/s
Iteration   5: 17514683.717 ops/s
Iteration   6: 17584931.343 ops/s
Iteration   7: 17570837.148 ops/s
Iteration   8: 17527418.739 ops/s
Iteration   9: 17597020.395 ops/s
Iteration  10: 17504142.196 ops/s
Iteration  11: 17664135.411 ops/s
Iteration  12: 17613005.287 ops/s
Iteration  13: 17557998.421 ops/s
Iteration  14: 17622011.679 ops/s
Iteration  15: 17637298.687 ops/s
Iteration  16: 17564695.688 ops/s
Iteration  17: 17595041.887 ops/s
Iteration  18: 17667426.279 ops/s
Iteration  19: 17492841.076 ops/s
Iteration  20: 17629982.357 ops/s
Iteration  21: 17509045.046 ops/s
Iteration  22: 17605891.728 ops/s
Iteration  23: 17621089.665 ops/s
Iteration  24: 17572762.673 ops/s
Iteration  25: 17590141.701 ops/s
Iteration  26: 17580301.959 ops/s
Iteration  27: 17485345.879 ops/s
Iteration  28: 17341709.230 ops/s
Iteration  29: 17536692.962 ops/s
Iteration  30: 17604095.779 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_noneSatisfyWith":
  17569657.448 ±(99.9%) 57163.153 ops/s [Average]
  (min, avg, max) = (17340174.103, 17569657.448, 17770928.854), stdev = 85559.123
  CI (99.9%): [17512494.294, 17626820.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  17569657.448 ± 57163.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7722508.805 ops/s
# Warmup Iteration   2: 12281357.827 ops/s
# Warmup Iteration   3: 14632457.330 ops/s
# Warmup Iteration   4: 14621540.113 ops/s
# Warmup Iteration   5: 14668594.817 ops/s
# Warmup Iteration   6: 14648202.303 ops/s
# Warmup Iteration   7: 14592546.152 ops/s
# Warmup Iteration   8: 14598565.757 ops/s
# Warmup Iteration   9: 14584464.539 ops/s
# Warmup Iteration  10: 14505601.374 ops/s
# Warmup Iteration  11: 14589537.902 ops/s
# Warmup Iteration  12: 14621001.617 ops/s
# Warmup Iteration  13: 14593522.401 ops/s
# Warmup Iteration  14: 14444784.729 ops/s
# Warmup Iteration  15: 14588500.560 ops/s
# Warmup Iteration  16: 14628241.805 ops/s
# Warmup Iteration  17: 14272706.850 ops/s
# Warmup Iteration  18: 14606140.371 ops/s
# Warmup Iteration  19: 14596210.339 ops/s
# Warmup Iteration  20: 14616888.873 ops/s
# Warmup Iteration  21: 14624941.083 ops/s
# Warmup Iteration  22: 14480874.301 ops/s
# Warmup Iteration  23: 14631049.786 ops/s
# Warmup Iteration  24: 14577986.152 ops/s
# Warmup Iteration  25: 14481322.760 ops/s
# Warmup Iteration  26: 14638710.911 ops/s
# Warmup Iteration  27: 14586399.567 ops/s
# Warmup Iteration  28: 14575997.914 ops/s
# Warmup Iteration  29: 14544999.165 ops/s
# Warmup Iteration  30: 14604224.689 ops/s
Iteration   1: 14569607.971 ops/s
Iteration   2: 14514370.121 ops/s
Iteration   3: 14660543.386 ops/s
Iteration   4: 14340188.311 ops/s
Iteration   5: 14610115.375 ops/s
Iteration   6: 14729157.449 ops/s
Iteration   7: 14573318.342 ops/s
Iteration   8: 14628822.480 ops/s
Iteration   9: 14668716.717 ops/s
Iteration  10: 14608449.998 ops/s
Iteration  11: 14618003.987 ops/s
Iteration  12: 14598405.692 ops/s
Iteration  13: 14646742.220 ops/s
Iteration  14: 14611298.591 ops/s
Iteration  15: 14616888.669 ops/s
Iteration  16: 14654129.612 ops/s
Iteration  17: 14621044.436 ops/s
Iteration  18: 14632408.241 ops/s
Iteration  19: 14622779.367 ops/s
Iteration  20: 14650721.623 ops/s
Iteration  21: 14603502.575 ops/s
Iteration  22: 14615620.306 ops/s
Iteration  23: 14601874.748 ops/s
Iteration  24: 14675292.889 ops/s
Iteration  25: 14667646.434 ops/s
Iteration  26: 14631007.096 ops/s
Iteration  27: 14633572.977 ops/s
Iteration  28: 14583950.334 ops/s
Iteration  29: 14613947.434 ops/s
Iteration  30: 14619865.886 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_notEmpty":
  14614066.442 ±(99.9%) 43064.686 ops/s [Average]
  (min, avg, max) = (14340188.311, 14614066.442, 14729157.449), stdev = 64457.200
  CI (99.9%): [14571001.756, 14657131.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_notEmpty  thrpt   30  14614066.442 ± 43064.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3830736.130 ops/s
# Warmup Iteration   2: 7722838.892 ops/s
# Warmup Iteration   3: 7803244.216 ops/s
# Warmup Iteration   4: 6612408.970 ops/s
# Warmup Iteration   5: 7809838.397 ops/s
# Warmup Iteration   6: 7804097.201 ops/s
# Warmup Iteration   7: 7801128.836 ops/s
# Warmup Iteration   8: 7732566.239 ops/s
# Warmup Iteration   9: 7815533.489 ops/s
# Warmup Iteration  10: 7821191.512 ops/s
# Warmup Iteration  11: 7761163.146 ops/s
# Warmup Iteration  12: 7813971.212 ops/s
# Warmup Iteration  13: 7750995.863 ops/s
# Warmup Iteration  14: 7801692.016 ops/s
# Warmup Iteration  15: 7824756.476 ops/s
# Warmup Iteration  16: 7734574.744 ops/s
# Warmup Iteration  17: 7853334.381 ops/s
# Warmup Iteration  18: 7796037.795 ops/s
# Warmup Iteration  19: 7877960.520 ops/s
# Warmup Iteration  20: 7872218.808 ops/s
# Warmup Iteration  21: 7803691.480 ops/s
# Warmup Iteration  22: 7876807.564 ops/s
# Warmup Iteration  23: 7856824.085 ops/s
# Warmup Iteration  24: 7860971.693 ops/s
# Warmup Iteration  25: 7802728.777 ops/s
# Warmup Iteration  26: 7840998.994 ops/s
# Warmup Iteration  27: 7868544.931 ops/s
# Warmup Iteration  28: 7864843.687 ops/s
# Warmup Iteration  29: 7851592.196 ops/s
# Warmup Iteration  30: 7796965.666 ops/s
Iteration   1: 7839190.643 ops/s
Iteration   2: 7862676.062 ops/s
Iteration   3: 7870148.305 ops/s
Iteration   4: 7853973.684 ops/s
Iteration   5: 7713851.082 ops/s
Iteration   6: 7860981.976 ops/s
Iteration   7: 7845494.874 ops/s
Iteration   8: 7849105.283 ops/s
Iteration   9: 7834016.984 ops/s
Iteration  10: 7863001.874 ops/s
Iteration  11: 7851346.593 ops/s
Iteration  12: 7864593.820 ops/s
Iteration  13: 7859825.652 ops/s
Iteration  14: 7866139.842 ops/s
Iteration  15: 7854763.042 ops/s
Iteration  16: 7736717.452 ops/s
Iteration  17: 7853993.304 ops/s
Iteration  18: 7802120.473 ops/s
Iteration  19: 7837537.074 ops/s
Iteration  20: 7575019.506 ops/s
Iteration  21: 7832954.360 ops/s
Iteration  22: 7830441.622 ops/s
Iteration  23: 7861632.014 ops/s
Iteration  24: 7870381.616 ops/s
Iteration  25: 7849078.553 ops/s
Iteration  26: 7870659.165 ops/s
Iteration  27: 7865927.434 ops/s
Iteration  28: 7706768.462 ops/s
Iteration  29: 7868253.255 ops/s
Iteration  30: 7871762.235 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partition":
  7830745.208 ±(99.9%) 43584.286 ops/s [Average]
  (min, avg, max) = (7575019.506, 7830745.208, 7871762.235), stdev = 65234.912
  CI (99.9%): [7787160.922, 7874329.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_partition  thrpt   30  7830745.208 ± 43584.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1430992.329 ops/s
# Warmup Iteration   2: 3272528.859 ops/s
# Warmup Iteration   3: 3346143.563 ops/s
# Warmup Iteration   4: 2757043.278 ops/s
# Warmup Iteration   5: 3346801.439 ops/s
# Warmup Iteration   6: 3364127.947 ops/s
# Warmup Iteration   7: 3373050.557 ops/s
# Warmup Iteration   8: 3347553.218 ops/s
# Warmup Iteration   9: 3363776.254 ops/s
# Warmup Iteration  10: 3370303.395 ops/s
# Warmup Iteration  11: 3370672.232 ops/s
# Warmup Iteration  12: 3369862.173 ops/s
# Warmup Iteration  13: 3362964.322 ops/s
# Warmup Iteration  14: 3351254.956 ops/s
# Warmup Iteration  15: 3353328.542 ops/s
# Warmup Iteration  16: 3361768.773 ops/s
# Warmup Iteration  17: 3357303.537 ops/s
# Warmup Iteration  18: 3365342.437 ops/s
# Warmup Iteration  19: 3344465.675 ops/s
# Warmup Iteration  20: 3339022.303 ops/s
# Warmup Iteration  21: 3367521.950 ops/s
# Warmup Iteration  22: 3341134.567 ops/s
# Warmup Iteration  23: 3307778.413 ops/s
# Warmup Iteration  24: 3334276.371 ops/s
# Warmup Iteration  25: 3367402.762 ops/s
# Warmup Iteration  26: 3370104.235 ops/s
# Warmup Iteration  27: 3364816.262 ops/s
# Warmup Iteration  28: 3355443.138 ops/s
# Warmup Iteration  29: 3332951.553 ops/s
# Warmup Iteration  30: 3347550.557 ops/s
Iteration   1: 3359142.964 ops/s
Iteration   2: 3353113.796 ops/s
Iteration   3: 3305873.981 ops/s
Iteration   4: 3369654.994 ops/s
Iteration   5: 3363547.673 ops/s
Iteration   6: 3298019.083 ops/s
Iteration   7: 3343888.264 ops/s
Iteration   8: 3366045.999 ops/s
Iteration   9: 3362583.855 ops/s
Iteration  10: 3365724.212 ops/s
Iteration  11: 3360102.381 ops/s
Iteration  12: 3357312.323 ops/s
Iteration  13: 3327630.136 ops/s
Iteration  14: 3366117.393 ops/s
Iteration  15: 3367857.563 ops/s
Iteration  16: 3359154.348 ops/s
Iteration  17: 3361543.010 ops/s
Iteration  18: 3372029.514 ops/s
Iteration  19: 3364060.152 ops/s
Iteration  20: 3362453.475 ops/s
Iteration  21: 3362112.380 ops/s
Iteration  22: 3366364.539 ops/s
Iteration  23: 3370743.836 ops/s
Iteration  24: 3318917.169 ops/s
Iteration  25: 3362956.531 ops/s
Iteration  26: 3368718.006 ops/s
Iteration  27: 3292035.872 ops/s
Iteration  28: 3356635.866 ops/s
Iteration  29: 3372614.179 ops/s
Iteration  30: 3352157.166 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWhile":
  3353637.022 ±(99.9%) 14760.507 ops/s [Average]
  (min, avg, max) = (3292035.872, 3353637.022, 3372614.179), stdev = 22092.834
  CI (99.9%): [3338876.515, 3368397.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_partitionWhile  thrpt   30  3353637.022 ± 14760.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2688675.649 ops/s
# Warmup Iteration   2: 5586784.628 ops/s
# Warmup Iteration   3: 5703262.434 ops/s
# Warmup Iteration   4: 4741579.918 ops/s
# Warmup Iteration   5: 5725044.123 ops/s
# Warmup Iteration   6: 5708767.959 ops/s
# Warmup Iteration   7: 5718158.062 ops/s
# Warmup Iteration   8: 5713875.147 ops/s
# Warmup Iteration   9: 5718849.898 ops/s
# Warmup Iteration  10: 5701625.637 ops/s
# Warmup Iteration  11: 5686666.414 ops/s
# Warmup Iteration  12: 5739682.320 ops/s
# Warmup Iteration  13: 5629943.279 ops/s
# Warmup Iteration  14: 5710789.655 ops/s
# Warmup Iteration  15: 5709374.591 ops/s
# Warmup Iteration  16: 5726102.618 ops/s
# Warmup Iteration  17: 5634505.620 ops/s
# Warmup Iteration  18: 5745365.633 ops/s
# Warmup Iteration  19: 5662261.443 ops/s
# Warmup Iteration  20: 5740375.369 ops/s
# Warmup Iteration  21: 5692153.356 ops/s
# Warmup Iteration  22: 5736616.960 ops/s
# Warmup Iteration  23: 5736338.778 ops/s
# Warmup Iteration  24: 5739722.171 ops/s
# Warmup Iteration  25: 5739539.007 ops/s
# Warmup Iteration  26: 5739941.117 ops/s
# Warmup Iteration  27: 5727316.370 ops/s
# Warmup Iteration  28: 5735536.916 ops/s
# Warmup Iteration  29: 5726296.353 ops/s
# Warmup Iteration  30: 5742903.932 ops/s
Iteration   1: 5731198.103 ops/s
Iteration   2: 5744242.397 ops/s
Iteration   3: 5729314.621 ops/s
Iteration   4: 5625981.273 ops/s
Iteration   5: 5731246.687 ops/s
Iteration   6: 5714707.751 ops/s
Iteration   7: 5725295.653 ops/s
Iteration   8: 5744844.019 ops/s
Iteration   9: 5739070.225 ops/s
Iteration  10: 5733201.275 ops/s
Iteration  11: 5733799.940 ops/s
Iteration  12: 5736779.666 ops/s
Iteration  13: 5731521.003 ops/s
Iteration  14: 5714941.150 ops/s
Iteration  15: 5714866.595 ops/s
Iteration  16: 5722273.489 ops/s
Iteration  17: 5739415.969 ops/s
Iteration  18: 5714518.820 ops/s
Iteration  19: 5736475.755 ops/s
Iteration  20: 5745792.077 ops/s
Iteration  21: 5737091.797 ops/s
Iteration  22: 5742289.777 ops/s
Iteration  23: 5741293.281 ops/s
Iteration  24: 5723397.957 ops/s
Iteration  25: 5717398.385 ops/s
Iteration  26: 5629404.349 ops/s
Iteration  27: 5736550.303 ops/s
Iteration  28: 5748222.628 ops/s
Iteration  29: 5734962.182 ops/s
Iteration  30: 5743631.157 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_partitionWith":
  5725457.610 ±(99.9%) 18982.439 ops/s [Average]
  (min, avg, max) = (5625981.273, 5725457.610, 5748222.628), stdev = 28412.024
  CI (99.9%): [5706475.170, 5744440.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_partitionWith  thrpt   30  5725457.610 ± 18982.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785020.602 ops/s
# Warmup Iteration   2: 807745.380 ops/s
# Warmup Iteration   3: 960549.562 ops/s
# Warmup Iteration   4: 1012473.269 ops/s
# Warmup Iteration   5: 999408.362 ops/s
# Warmup Iteration   6: 1012021.949 ops/s
# Warmup Iteration   7: 1011765.133 ops/s
# Warmup Iteration   8: 1000118.168 ops/s
# Warmup Iteration   9: 1007942.847 ops/s
# Warmup Iteration  10: 1015583.993 ops/s
# Warmup Iteration  11: 1013013.147 ops/s
# Warmup Iteration  12: 1012127.436 ops/s
# Warmup Iteration  13: 915913.443 ops/s
# Warmup Iteration  14: 953264.983 ops/s
# Warmup Iteration  15: 1012570.475 ops/s
# Warmup Iteration  16: 1003870.514 ops/s
# Warmup Iteration  17: 1078120.799 ops/s
# Warmup Iteration  18: 1079795.896 ops/s
# Warmup Iteration  19: 1082194.319 ops/s
# Warmup Iteration  20: 1067868.697 ops/s
# Warmup Iteration  21: 1078091.108 ops/s
# Warmup Iteration  22: 1076324.395 ops/s
# Warmup Iteration  23: 1081543.116 ops/s
# Warmup Iteration  24: 1080448.487 ops/s
# Warmup Iteration  25: 1079071.293 ops/s
# Warmup Iteration  26: 1079337.360 ops/s
# Warmup Iteration  27: 1068721.630 ops/s
# Warmup Iteration  28: 1083417.735 ops/s
# Warmup Iteration  29: 1079366.751 ops/s
# Warmup Iteration  30: 1072106.586 ops/s
Iteration   1: 1081809.294 ops/s
Iteration   2: 1074813.022 ops/s
Iteration   3: 1076295.497 ops/s
Iteration   4: 1076918.283 ops/s
Iteration   5: 1078434.653 ops/s
Iteration   6: 1079610.538 ops/s
Iteration   7: 1075131.473 ops/s
Iteration   8: 1082097.912 ops/s
Iteration   9: 1085724.047 ops/s
Iteration  10: 1080685.447 ops/s
Iteration  11: 1076481.744 ops/s
Iteration  12: 1075849.380 ops/s
Iteration  13: 1084472.900 ops/s
Iteration  14: 1079997.494 ops/s
Iteration  15: 1081137.735 ops/s
Iteration  16: 1077746.653 ops/s
Iteration  17: 1079683.312 ops/s
Iteration  18: 1077799.498 ops/s
Iteration  19: 1081915.132 ops/s
Iteration  20: 1064148.061 ops/s
Iteration  21: 1078654.821 ops/s
Iteration  22: 1081923.502 ops/s
Iteration  23: 1074946.179 ops/s
Iteration  24: 1066622.430 ops/s
Iteration  25: 1080214.508 ops/s
Iteration  26: 1081557.523 ops/s
Iteration  27: 1083314.415 ops/s
Iteration  28: 1079676.929 ops/s
Iteration  29: 1079552.770 ops/s
Iteration  30: 1083556.437 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_randomAccess_throws":
  1078692.386 ±(99.9%) 3085.071 ops/s [Average]
  (min, avg, max) = (1064148.061, 1078692.386, 1085724.047), stdev = 4617.590
  CI (99.9%): [1075607.315, 1081777.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1078692.386 ± 3085.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4093975.624 ops/s
# Warmup Iteration   2: 8544160.842 ops/s
# Warmup Iteration   3: 8711156.413 ops/s
# Warmup Iteration   4: 8860577.258 ops/s
# Warmup Iteration   5: 7393941.990 ops/s
# Warmup Iteration   6: 8818164.048 ops/s
# Warmup Iteration   7: 8801719.933 ops/s
# Warmup Iteration   8: 8712396.963 ops/s
# Warmup Iteration   9: 8680870.875 ops/s
# Warmup Iteration  10: 8811291.936 ops/s
# Warmup Iteration  11: 8850477.016 ops/s
# Warmup Iteration  12: 8829667.055 ops/s
# Warmup Iteration  13: 8827046.953 ops/s
# Warmup Iteration  14: 8799483.217 ops/s
# Warmup Iteration  15: 8643996.111 ops/s
# Warmup Iteration  16: 8768222.877 ops/s
# Warmup Iteration  17: 8825078.816 ops/s
# Warmup Iteration  18: 8822031.065 ops/s
# Warmup Iteration  19: 8839384.991 ops/s
# Warmup Iteration  20: 8842568.001 ops/s
# Warmup Iteration  21: 8834781.181 ops/s
# Warmup Iteration  22: 8826910.482 ops/s
# Warmup Iteration  23: 8826761.316 ops/s
# Warmup Iteration  24: 8818908.643 ops/s
# Warmup Iteration  25: 8853474.893 ops/s
# Warmup Iteration  26: 8852117.126 ops/s
# Warmup Iteration  27: 8743310.344 ops/s
# Warmup Iteration  28: 8797308.333 ops/s
# Warmup Iteration  29: 8846914.431 ops/s
# Warmup Iteration  30: 8851089.060 ops/s
Iteration   1: 8828364.189 ops/s
Iteration   2: 8780730.606 ops/s
Iteration   3: 8781851.934 ops/s
Iteration   4: 8844585.228 ops/s
Iteration   5: 8803626.603 ops/s
Iteration   6: 8826375.531 ops/s
Iteration   7: 8810734.348 ops/s
Iteration   8: 8833818.283 ops/s
Iteration   9: 8766906.292 ops/s
Iteration  10: 8833050.918 ops/s
Iteration  11: 8829591.333 ops/s
Iteration  12: 8847315.814 ops/s
Iteration  13: 8788871.267 ops/s
Iteration  14: 8836737.435 ops/s
Iteration  15: 8840754.421 ops/s
Iteration  16: 8680732.892 ops/s
Iteration  17: 8822145.409 ops/s
Iteration  18: 8804246.219 ops/s
Iteration  19: 8837159.341 ops/s
Iteration  20: 8790335.733 ops/s
Iteration  21: 8793169.255 ops/s
Iteration  22: 8812557.486 ops/s
Iteration  23: 8666631.111 ops/s
Iteration  24: 8688625.330 ops/s
Iteration  25: 8785126.659 ops/s
Iteration  26: 8697792.850 ops/s
Iteration  27: 8812715.750 ops/s
Iteration  28: 8790032.182 ops/s
Iteration  29: 8837851.239 ops/s
Iteration  30: 8807319.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reduceOptional":
  8795991.855 ±(99.9%) 33390.274 ops/s [Average]
  (min, avg, max) = (8666631.111, 8795991.855, 8847315.814), stdev = 49976.994
  CI (99.9%): [8762601.581, 8829382.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_reduceOptional  thrpt   30  8795991.855 ± 33390.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3129625.257 ops/s
# Warmup Iteration   2: 6419309.513 ops/s
# Warmup Iteration   3: 5485538.899 ops/s
# Warmup Iteration   4: 6494559.542 ops/s
# Warmup Iteration   5: 6511582.971 ops/s
# Warmup Iteration   6: 6487212.148 ops/s
# Warmup Iteration   7: 6506639.175 ops/s
# Warmup Iteration   8: 6466832.327 ops/s
# Warmup Iteration   9: 6511944.322 ops/s
# Warmup Iteration  10: 6439632.119 ops/s
# Warmup Iteration  11: 6499855.178 ops/s
# Warmup Iteration  12: 6502004.996 ops/s
# Warmup Iteration  13: 6492679.807 ops/s
# Warmup Iteration  14: 6503812.642 ops/s
# Warmup Iteration  15: 6519120.249 ops/s
# Warmup Iteration  16: 6466286.354 ops/s
# Warmup Iteration  17: 6515056.235 ops/s
# Warmup Iteration  18: 6522707.309 ops/s
# Warmup Iteration  19: 6475511.713 ops/s
# Warmup Iteration  20: 6509904.389 ops/s
# Warmup Iteration  21: 6408253.571 ops/s
# Warmup Iteration  22: 6541535.757 ops/s
# Warmup Iteration  23: 6462356.265 ops/s
# Warmup Iteration  24: 6486542.102 ops/s
# Warmup Iteration  25: 6457998.090 ops/s
# Warmup Iteration  26: 6511333.339 ops/s
# Warmup Iteration  27: 6465100.677 ops/s
# Warmup Iteration  28: 6520775.360 ops/s
# Warmup Iteration  29: 6498332.286 ops/s
# Warmup Iteration  30: 6505099.263 ops/s
Iteration   1: 6403698.243 ops/s
Iteration   2: 6517262.447 ops/s
Iteration   3: 6502365.479 ops/s
Iteration   4: 6504088.344 ops/s
Iteration   5: 6446084.623 ops/s
Iteration   6: 6521658.897 ops/s
Iteration   7: 6515726.287 ops/s
Iteration   8: 6513109.710 ops/s
Iteration   9: 6489636.360 ops/s
Iteration  10: 6508904.096 ops/s
Iteration  11: 6500448.293 ops/s
Iteration  12: 6512972.007 ops/s
Iteration  13: 6528602.654 ops/s
Iteration  14: 6507559.880 ops/s
Iteration  15: 6499485.276 ops/s
Iteration  16: 6527009.326 ops/s
Iteration  17: 6510097.588 ops/s
Iteration  18: 6401719.283 ops/s
Iteration  19: 6501395.381 ops/s
Iteration  20: 6537917.604 ops/s
Iteration  21: 6392816.534 ops/s
Iteration  22: 6539910.507 ops/s
Iteration  23: 6523608.104 ops/s
Iteration  24: 6526284.594 ops/s
Iteration  25: 6529640.066 ops/s
Iteration  26: 6525454.620 ops/s
Iteration  27: 6545694.532 ops/s
Iteration  28: 6544360.357 ops/s
Iteration  29: 6511089.288 ops/s
Iteration  30: 6551657.061 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reject":
  6504675.248 ±(99.9%) 27350.112 ops/s [Average]
  (min, avg, max) = (6392816.534, 6504675.248, 6551657.061), stdev = 40936.363
  CI (99.9%): [6477325.136, 6532025.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_reject  thrpt   30  6504675.248 ± 27350.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14624238.562 ops/s
# Warmup Iteration   2: 28894502.155 ops/s
# Warmup Iteration   3: 24977749.641 ops/s
# Warmup Iteration   4: 29209093.191 ops/s
# Warmup Iteration   5: 29207890.484 ops/s
# Warmup Iteration   6: 29239816.183 ops/s
# Warmup Iteration   7: 29279599.155 ops/s
# Warmup Iteration   8: 29215925.540 ops/s
# Warmup Iteration   9: 28991090.837 ops/s
# Warmup Iteration  10: 28809696.209 ops/s
# Warmup Iteration  11: 29245153.983 ops/s
# Warmup Iteration  12: 29131585.453 ops/s
# Warmup Iteration  13: 29304677.135 ops/s
# Warmup Iteration  14: 29206186.944 ops/s
# Warmup Iteration  15: 29314771.762 ops/s
# Warmup Iteration  16: 28969539.800 ops/s
# Warmup Iteration  17: 29250869.463 ops/s
# Warmup Iteration  18: 29127913.820 ops/s
# Warmup Iteration  19: 29315233.282 ops/s
# Warmup Iteration  20: 29331771.137 ops/s
# Warmup Iteration  21: 29085111.395 ops/s
# Warmup Iteration  22: 29113958.618 ops/s
# Warmup Iteration  23: 29251490.591 ops/s
# Warmup Iteration  24: 29318346.758 ops/s
# Warmup Iteration  25: 29253245.646 ops/s
# Warmup Iteration  26: 29034184.756 ops/s
# Warmup Iteration  27: 29259958.072 ops/s
# Warmup Iteration  28: 28773719.791 ops/s
# Warmup Iteration  29: 29057047.301 ops/s
# Warmup Iteration  30: 29212611.988 ops/s
Iteration   1: 29303938.862 ops/s
Iteration   2: 29225380.685 ops/s
Iteration   3: 29021781.848 ops/s
Iteration   4: 29255913.696 ops/s
Iteration   5: 29300554.100 ops/s
Iteration   6: 29168930.674 ops/s
Iteration   7: 28938320.465 ops/s
Iteration   8: 29189292.004 ops/s
Iteration   9: 28928870.021 ops/s
Iteration  10: 29128661.288 ops/s
Iteration  11: 29012902.305 ops/s
Iteration  12: 29058156.325 ops/s
Iteration  13: 29219105.683 ops/s
Iteration  14: 29069149.952 ops/s
Iteration  15: 29147392.293 ops/s
Iteration  16: 29175822.310 ops/s
Iteration  17: 28728605.965 ops/s
Iteration  18: 29317074.360 ops/s
Iteration  19: 29155964.209 ops/s
Iteration  20: 29160726.294 ops/s
Iteration  21: 28911351.561 ops/s
Iteration  22: 28966723.250 ops/s
Iteration  23: 29084471.342 ops/s
Iteration  24: 29067610.678 ops/s
Iteration  25: 29205169.136 ops/s
Iteration  26: 29030110.080 ops/s
Iteration  27: 28778437.911 ops/s
Iteration  28: 29155096.539 ops/s
Iteration  29: 29127981.932 ops/s
Iteration  30: 29203650.993 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith":
  29101238.225 ±(99.9%) 96880.828 ops/s [Average]
  (min, avg, max) = (28728605.965, 29101238.225, 29317074.360), stdev = 145006.674
  CI (99.9%): [29004357.397, 29198119.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_rejectWith  thrpt   30  29101238.225 ± 96880.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7582197.669 ops/s
# Warmup Iteration   2: 15270840.510 ops/s
# Warmup Iteration   3: 13015679.617 ops/s
# Warmup Iteration   4: 15392977.188 ops/s
# Warmup Iteration   5: 15395048.519 ops/s
# Warmup Iteration   6: 15441294.007 ops/s
# Warmup Iteration   7: 15262441.951 ops/s
# Warmup Iteration   8: 15346104.672 ops/s
# Warmup Iteration   9: 15205116.654 ops/s
# Warmup Iteration  10: 15453621.118 ops/s
# Warmup Iteration  11: 15469845.179 ops/s
# Warmup Iteration  12: 15426873.772 ops/s
# Warmup Iteration  13: 15279309.036 ops/s
# Warmup Iteration  14: 15226309.646 ops/s
# Warmup Iteration  15: 15257341.422 ops/s
# Warmup Iteration  16: 15409407.447 ops/s
# Warmup Iteration  17: 15373685.706 ops/s
# Warmup Iteration  18: 15348940.479 ops/s
# Warmup Iteration  19: 15344860.822 ops/s
# Warmup Iteration  20: 15273537.477 ops/s
# Warmup Iteration  21: 15329153.241 ops/s
# Warmup Iteration  22: 15372771.386 ops/s
# Warmup Iteration  23: 15271653.092 ops/s
# Warmup Iteration  24: 15365457.491 ops/s
# Warmup Iteration  25: 15092876.864 ops/s
# Warmup Iteration  26: 15292159.695 ops/s
# Warmup Iteration  27: 15223112.759 ops/s
# Warmup Iteration  28: 15375854.189 ops/s
# Warmup Iteration  29: 15408818.932 ops/s
# Warmup Iteration  30: 15351458.221 ops/s
Iteration   1: 15169472.260 ops/s
Iteration   2: 15329849.439 ops/s
Iteration   3: 15135056.662 ops/s
Iteration   4: 15361447.167 ops/s
Iteration   5: 15367843.084 ops/s
Iteration   6: 15355275.354 ops/s
Iteration   7: 15355478.358 ops/s
Iteration   8: 15381709.117 ops/s
Iteration   9: 15120804.580 ops/s
Iteration  10: 15370378.859 ops/s
Iteration  11: 15342474.908 ops/s
Iteration  12: 15383151.288 ops/s
Iteration  13: 15399822.414 ops/s
Iteration  14: 15371739.883 ops/s
Iteration  15: 15398215.746 ops/s
Iteration  16: 15393806.385 ops/s
Iteration  17: 15408733.267 ops/s
Iteration  18: 15327723.248 ops/s
Iteration  19: 15382930.925 ops/s
Iteration  20: 15330151.131 ops/s
Iteration  21: 15399383.346 ops/s
Iteration  22: 15208984.965 ops/s
Iteration  23: 15326150.814 ops/s
Iteration  24: 15405277.747 ops/s
Iteration  25: 15378965.295 ops/s
Iteration  26: 15346059.867 ops/s
Iteration  27: 15323632.599 ops/s
Iteration  28: 15398395.230 ops/s
Iteration  29: 15394143.813 ops/s
Iteration  30: 15334005.356 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndex":
  15340035.437 ±(99.9%) 52122.259 ops/s [Average]
  (min, avg, max) = (15120804.580, 15340035.437, 15408733.267), stdev = 78014.150
  CI (99.9%): [15287913.178, 15392157.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  15340035.437 ± 52122.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3953962.468 ops/s
# Warmup Iteration   2: 8522636.062 ops/s
# Warmup Iteration   3: 7232253.277 ops/s
# Warmup Iteration   4: 8623899.341 ops/s
# Warmup Iteration   5: 8619613.514 ops/s
# Warmup Iteration   6: 8535640.991 ops/s
# Warmup Iteration   7: 8640536.018 ops/s
# Warmup Iteration   8: 8634857.839 ops/s
# Warmup Iteration   9: 8593909.795 ops/s
# Warmup Iteration  10: 8587103.892 ops/s
# Warmup Iteration  11: 8557286.206 ops/s
# Warmup Iteration  12: 8597726.556 ops/s
# Warmup Iteration  13: 8626314.197 ops/s
# Warmup Iteration  14: 8475214.609 ops/s
# Warmup Iteration  15: 8603459.108 ops/s
# Warmup Iteration  16: 8621064.085 ops/s
# Warmup Iteration  17: 8637912.198 ops/s
# Warmup Iteration  18: 8610873.084 ops/s
# Warmup Iteration  19: 8537438.323 ops/s
# Warmup Iteration  20: 8575694.427 ops/s
# Warmup Iteration  21: 8546547.681 ops/s
# Warmup Iteration  22: 8633310.142 ops/s
# Warmup Iteration  23: 8619806.123 ops/s
# Warmup Iteration  24: 8608154.829 ops/s
# Warmup Iteration  25: 8538919.777 ops/s
# Warmup Iteration  26: 8599426.396 ops/s
# Warmup Iteration  27: 8561338.954 ops/s
# Warmup Iteration  28: 8641027.569 ops/s
# Warmup Iteration  29: 8529737.537 ops/s
# Warmup Iteration  30: 8569285.842 ops/s
Iteration   1: 8621405.709 ops/s
Iteration   2: 8619113.781 ops/s
Iteration   3: 8611906.530 ops/s
Iteration   4: 8542176.458 ops/s
Iteration   5: 8478029.290 ops/s
Iteration   6: 8629678.264 ops/s
Iteration   7: 8647543.330 ops/s
Iteration   8: 8601678.849 ops/s
Iteration   9: 8629379.647 ops/s
Iteration  10: 8646034.994 ops/s
Iteration  11: 8608494.050 ops/s
Iteration  12: 8663838.792 ops/s
Iteration  13: 8602999.050 ops/s
Iteration  14: 8642214.057 ops/s
Iteration  15: 8409720.213 ops/s
Iteration  16: 8589021.319 ops/s
Iteration  17: 8593611.647 ops/s
Iteration  18: 8674482.291 ops/s
Iteration  19: 8601283.907 ops/s
Iteration  20: 8647588.465 ops/s
Iteration  21: 8642097.538 ops/s
Iteration  22: 8647838.963 ops/s
Iteration  23: 8587575.664 ops/s
Iteration  24: 8648547.627 ops/s
Iteration  25: 8615958.692 ops/s
Iteration  26: 8674244.135 ops/s
Iteration  27: 8622145.343 ops/s
Iteration  28: 8659191.582 ops/s
Iteration  29: 8616611.795 ops/s
Iteration  30: 8490979.330 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  8608846.377 ±(99.9%) 39541.463 ops/s [Average]
  (min, avg, max) = (8409720.213, 8608846.377, 8674482.291), stdev = 59183.805
  CI (99.9%): [8569304.914, 8648387.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  8608846.377 ± 39541.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2165960.054 ops/s
# Warmup Iteration   2: 5014922.010 ops/s
# Warmup Iteration   3: 4124610.076 ops/s
# Warmup Iteration   4: 5030789.408 ops/s
# Warmup Iteration   5: 5060204.718 ops/s
# Warmup Iteration   6: 5061037.180 ops/s
# Warmup Iteration   7: 5060145.072 ops/s
# Warmup Iteration   8: 5054394.331 ops/s
# Warmup Iteration   9: 5009762.489 ops/s
# Warmup Iteration  10: 5057057.194 ops/s
# Warmup Iteration  11: 5056847.365 ops/s
# Warmup Iteration  12: 5042258.193 ops/s
# Warmup Iteration  13: 5061976.868 ops/s
# Warmup Iteration  14: 4998204.135 ops/s
# Warmup Iteration  15: 5068323.728 ops/s
# Warmup Iteration  16: 5019942.219 ops/s
# Warmup Iteration  17: 5069885.637 ops/s
# Warmup Iteration  18: 4993767.230 ops/s
# Warmup Iteration  19: 5014606.279 ops/s
# Warmup Iteration  20: 4981698.092 ops/s
# Warmup Iteration  21: 5067692.518 ops/s
# Warmup Iteration  22: 5041595.116 ops/s
# Warmup Iteration  23: 5019695.400 ops/s
# Warmup Iteration  24: 5021206.945 ops/s
# Warmup Iteration  25: 5026764.344 ops/s
# Warmup Iteration  26: 5010375.595 ops/s
# Warmup Iteration  27: 5067752.166 ops/s
# Warmup Iteration  28: 5069980.999 ops/s
# Warmup Iteration  29: 5081922.082 ops/s
# Warmup Iteration  30: 5072170.292 ops/s
Iteration   1: 4994154.288 ops/s
Iteration   2: 4941723.311 ops/s
Iteration   3: 5070739.395 ops/s
Iteration   4: 5046116.697 ops/s
Iteration   5: 5075827.130 ops/s
Iteration   6: 5044448.809 ops/s
Iteration   7: 5063836.610 ops/s
Iteration   8: 5040587.319 ops/s
Iteration   9: 5060274.590 ops/s
Iteration  10: 4903784.883 ops/s
Iteration  11: 5060479.429 ops/s
Iteration  12: 5056594.363 ops/s
Iteration  13: 5068473.648 ops/s
Iteration  14: 5064932.445 ops/s
Iteration  15: 5062005.361 ops/s
Iteration  16: 5070324.041 ops/s
Iteration  17: 5039577.767 ops/s
Iteration  18: 5000244.074 ops/s
Iteration  19: 5055926.435 ops/s
Iteration  20: 5035339.440 ops/s
Iteration  21: 5057940.347 ops/s
Iteration  22: 5044821.603 ops/s
Iteration  23: 5062979.241 ops/s
Iteration  24: 5056321.629 ops/s
Iteration  25: 5080722.144 ops/s
Iteration  26: 5044318.726 ops/s
Iteration  27: 5079664.460 ops/s
Iteration  28: 4983676.954 ops/s
Iteration  29: 5068072.154 ops/s
Iteration  30: 5077693.783 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_rejectWith_target":
  5043720.036 ±(99.9%) 27272.610 ops/s [Average]
  (min, avg, max) = (4903784.883, 5043720.036, 5080722.144), stdev = 40820.362
  CI (99.9%): [5016447.426, 5070992.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  5043720.036 ± 27272.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6862961.864 ops/s
# Warmup Iteration   2: 14653457.223 ops/s
# Warmup Iteration   3: 12584013.613 ops/s
# Warmup Iteration   4: 14885479.206 ops/s
# Warmup Iteration   5: 14752856.899 ops/s
# Warmup Iteration   6: 14853402.646 ops/s
# Warmup Iteration   7: 14875660.330 ops/s
# Warmup Iteration   8: 14712595.554 ops/s
# Warmup Iteration   9: 14610472.544 ops/s
# Warmup Iteration  10: 14758998.131 ops/s
# Warmup Iteration  11: 14794991.135 ops/s
# Warmup Iteration  12: 14878013.057 ops/s
# Warmup Iteration  13: 14837181.390 ops/s
# Warmup Iteration  14: 14881414.671 ops/s
# Warmup Iteration  15: 14700989.227 ops/s
# Warmup Iteration  16: 15043498.005 ops/s
# Warmup Iteration  17: 14816362.502 ops/s
# Warmup Iteration  18: 15034967.104 ops/s
# Warmup Iteration  19: 14997660.570 ops/s
# Warmup Iteration  20: 14636693.297 ops/s
# Warmup Iteration  21: 14955770.822 ops/s
# Warmup Iteration  22: 14987659.713 ops/s
# Warmup Iteration  23: 14777496.575 ops/s
# Warmup Iteration  24: 15245862.285 ops/s
# Warmup Iteration  25: 14784946.706 ops/s
# Warmup Iteration  26: 14991811.025 ops/s
# Warmup Iteration  27: 15226454.394 ops/s
# Warmup Iteration  28: 14843964.332 ops/s
# Warmup Iteration  29: 14977277.573 ops/s
# Warmup Iteration  30: 14970698.565 ops/s
Iteration   1: 14816195.859 ops/s
Iteration   2: 14743485.640 ops/s
Iteration   3: 14731918.578 ops/s
Iteration   4: 14951024.566 ops/s
Iteration   5: 14882566.538 ops/s
Iteration   6: 14744352.761 ops/s
Iteration   7: 14979878.586 ops/s
Iteration   8: 14654262.979 ops/s
Iteration   9: 14978076.681 ops/s
Iteration  10: 14601120.913 ops/s
Iteration  11: 14562573.173 ops/s
Iteration  12: 14698301.538 ops/s
Iteration  13: 14941878.345 ops/s
Iteration  14: 15233191.156 ops/s
Iteration  15: 14790934.120 ops/s
Iteration  16: 15136379.735 ops/s
Iteration  17: 14955348.482 ops/s
Iteration  18: 15202922.262 ops/s
Iteration  19: 15111558.114 ops/s
Iteration  20: 15006939.788 ops/s
Iteration  21: 15242619.853 ops/s
Iteration  22: 14952364.869 ops/s
Iteration  23: 14784813.772 ops/s
Iteration  24: 15132289.358 ops/s
Iteration  25: 15143569.539 ops/s
Iteration  26: 15349314.540 ops/s
Iteration  27: 15148049.347 ops/s
Iteration  28: 14919456.734 ops/s
Iteration  29: 15139715.313 ops/s
Iteration  30: 15077738.319 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_remove":
  14953761.382 ±(99.9%) 138599.163 ops/s [Average]
  (min, avg, max) = (14562573.173, 14953761.382, 15349314.540), stdev = 207448.718
  CI (99.9%): [14815162.219, 15092360.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_remove  thrpt   30  14953761.382 ± 138599.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754110.560 ops/s
# Warmup Iteration   2: 1503650.921 ops/s
# Warmup Iteration   3: 1643711.482 ops/s
# Warmup Iteration   4: 1658158.460 ops/s
# Warmup Iteration   5: 1352495.191 ops/s
# Warmup Iteration   6: 1655590.316 ops/s
# Warmup Iteration   7: 1655534.241 ops/s
# Warmup Iteration   8: 1661816.601 ops/s
# Warmup Iteration   9: 1653972.341 ops/s
# Warmup Iteration  10: 1670922.567 ops/s
# Warmup Iteration  11: 1638429.748 ops/s
# Warmup Iteration  12: 1660515.293 ops/s
# Warmup Iteration  13: 1652729.121 ops/s
# Warmup Iteration  14: 1662865.037 ops/s
# Warmup Iteration  15: 1660369.933 ops/s
# Warmup Iteration  16: 1650722.526 ops/s
# Warmup Iteration  17: 1662391.205 ops/s
# Warmup Iteration  18: 1666854.224 ops/s
# Warmup Iteration  19: 1665278.654 ops/s
# Warmup Iteration  20: 1651720.042 ops/s
# Warmup Iteration  21: 1670800.495 ops/s
# Warmup Iteration  22: 1670639.771 ops/s
# Warmup Iteration  23: 1667930.462 ops/s
# Warmup Iteration  24: 1666000.477 ops/s
# Warmup Iteration  25: 1661306.464 ops/s
# Warmup Iteration  26: 1654093.865 ops/s
# Warmup Iteration  27: 1668260.082 ops/s
# Warmup Iteration  28: 1671027.845 ops/s
# Warmup Iteration  29: 1662919.216 ops/s
# Warmup Iteration  30: 1655807.970 ops/s
Iteration   1: 1668819.364 ops/s
Iteration   2: 1673196.727 ops/s
Iteration   3: 1666283.790 ops/s
Iteration   4: 1650347.617 ops/s
Iteration   5: 1654475.986 ops/s
Iteration   6: 1669014.187 ops/s
Iteration   7: 1667309.292 ops/s
Iteration   8: 1673911.536 ops/s
Iteration   9: 1637126.938 ops/s
Iteration  10: 1669013.768 ops/s
Iteration  11: 1671841.564 ops/s
Iteration  12: 1670146.436 ops/s
Iteration  13: 1669832.009 ops/s
Iteration  14: 1669274.994 ops/s
Iteration  15: 1671436.466 ops/s
Iteration  16: 1665340.455 ops/s
Iteration  17: 1676194.865 ops/s
Iteration  18: 1642562.781 ops/s
Iteration  19: 1675480.828 ops/s
Iteration  20: 1669243.508 ops/s
Iteration  21: 1670524.723 ops/s
Iteration  22: 1652287.633 ops/s
Iteration  23: 1669900.724 ops/s
Iteration  24: 1669796.982 ops/s
Iteration  25: 1650829.355 ops/s
Iteration  26: 1673147.545 ops/s
Iteration  27: 1665276.771 ops/s
Iteration  28: 1662973.018 ops/s
Iteration  29: 1666755.557 ops/s
Iteration  30: 1617184.057 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAll":
  1663650.983 ±(99.9%) 8738.647 ops/s [Average]
  (min, avg, max) = (1617184.057, 1663650.983, 1676194.865), stdev = 13079.597
  CI (99.9%): [1654912.335, 1672389.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_removeAll  thrpt   30  1663650.983 ± 8738.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 272650.498 ops/s
# Warmup Iteration   2: 395712.399 ops/s
# Warmup Iteration   3: 486027.891 ops/s
# Warmup Iteration   4: 480627.081 ops/s
# Warmup Iteration   5: 486174.551 ops/s
# Warmup Iteration   6: 486557.676 ops/s
# Warmup Iteration   7: 446058.523 ops/s
# Warmup Iteration   8: 444281.391 ops/s
# Warmup Iteration   9: 481942.419 ops/s
# Warmup Iteration  10: 488145.946 ops/s
# Warmup Iteration  11: 487552.782 ops/s
# Warmup Iteration  12: 483622.727 ops/s
# Warmup Iteration  13: 487545.066 ops/s
# Warmup Iteration  14: 481460.296 ops/s
# Warmup Iteration  15: 487320.783 ops/s
# Warmup Iteration  16: 487477.565 ops/s
# Warmup Iteration  17: 487900.149 ops/s
# Warmup Iteration  18: 486633.436 ops/s
# Warmup Iteration  19: 488645.020 ops/s
# Warmup Iteration  20: 487044.524 ops/s
# Warmup Iteration  21: 483355.663 ops/s
# Warmup Iteration  22: 487762.039 ops/s
# Warmup Iteration  23: 487001.089 ops/s
# Warmup Iteration  24: 482824.597 ops/s
# Warmup Iteration  25: 488299.930 ops/s
# Warmup Iteration  26: 488403.791 ops/s
# Warmup Iteration  27: 487460.267 ops/s
# Warmup Iteration  28: 487693.109 ops/s
# Warmup Iteration  29: 488187.688 ops/s
# Warmup Iteration  30: 484726.516 ops/s
Iteration   1: 488593.321 ops/s
Iteration   2: 488509.426 ops/s
Iteration   3: 484987.240 ops/s
Iteration   4: 488413.350 ops/s
Iteration   5: 480350.056 ops/s
Iteration   6: 489022.788 ops/s
Iteration   7: 487901.519 ops/s
Iteration   8: 488466.789 ops/s
Iteration   9: 488755.989 ops/s
Iteration  10: 488931.865 ops/s
Iteration  11: 488374.456 ops/s
Iteration  12: 486178.295 ops/s
Iteration  13: 488217.702 ops/s
Iteration  14: 484768.839 ops/s
Iteration  15: 481313.677 ops/s
Iteration  16: 487562.363 ops/s
Iteration  17: 486144.524 ops/s
Iteration  18: 486881.620 ops/s
Iteration  19: 488152.776 ops/s
Iteration  20: 486518.554 ops/s
Iteration  21: 487115.550 ops/s
Iteration  22: 488564.568 ops/s
Iteration  23: 484079.844 ops/s
Iteration  24: 487201.872 ops/s
Iteration  25: 488751.828 ops/s
Iteration  26: 487261.763 ops/s
Iteration  27: 487425.281 ops/s
Iteration  28: 479585.168 ops/s
Iteration  29: 485684.051 ops/s
Iteration  30: 489110.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeAllIterable":
  486760.854 ±(99.9%) 1695.385 ops/s [Average]
  (min, avg, max) = (479585.168, 486760.854, 489110.553), stdev = 2537.573
  CI (99.9%): [485065.469, 488456.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_removeAllIterable  thrpt   30  486760.854 ± 1695.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14032878.325 ops/s
# Warmup Iteration   2: 29136931.011 ops/s
# Warmup Iteration   3: 22091890.584 ops/s
# Warmup Iteration   4: 26228213.637 ops/s
# Warmup Iteration   5: 26214553.767 ops/s
# Warmup Iteration   6: 26158581.982 ops/s
# Warmup Iteration   7: 26258557.275 ops/s
# Warmup Iteration   8: 26287609.157 ops/s
# Warmup Iteration   9: 26157883.667 ops/s
# Warmup Iteration  10: 26212674.203 ops/s
# Warmup Iteration  11: 26151921.001 ops/s
# Warmup Iteration  12: 26050613.222 ops/s
# Warmup Iteration  13: 26252363.176 ops/s
# Warmup Iteration  14: 26212033.521 ops/s
# Warmup Iteration  15: 26298653.126 ops/s
# Warmup Iteration  16: 26214539.654 ops/s
# Warmup Iteration  17: 26197605.695 ops/s
# Warmup Iteration  18: 26263981.899 ops/s
# Warmup Iteration  19: 26234875.704 ops/s
# Warmup Iteration  20: 26036797.993 ops/s
# Warmup Iteration  21: 26178183.618 ops/s
# Warmup Iteration  22: 26059700.701 ops/s
# Warmup Iteration  23: 26278848.868 ops/s
# Warmup Iteration  24: 26208724.165 ops/s
# Warmup Iteration  25: 25994190.738 ops/s
# Warmup Iteration  26: 26117466.559 ops/s
# Warmup Iteration  27: 26283878.564 ops/s
# Warmup Iteration  28: 26097563.418 ops/s
# Warmup Iteration  29: 26269140.547 ops/s
# Warmup Iteration  30: 26244904.973 ops/s
Iteration   1: 26279632.519 ops/s
Iteration   2: 26240861.356 ops/s
Iteration   3: 26178851.002 ops/s
Iteration   4: 26338955.323 ops/s
Iteration   5: 26197179.765 ops/s
Iteration   6: 26206546.615 ops/s
Iteration   7: 25784696.024 ops/s
Iteration   8: 26200595.091 ops/s
Iteration   9: 26346751.824 ops/s
Iteration  10: 26131669.103 ops/s
Iteration  11: 26197407.244 ops/s
Iteration  12: 26373911.030 ops/s
Iteration  13: 26072613.322 ops/s
Iteration  14: 26148071.911 ops/s
Iteration  15: 25847666.150 ops/s
Iteration  16: 26140215.439 ops/s
Iteration  17: 26345984.607 ops/s
Iteration  18: 26244132.673 ops/s
Iteration  19: 26266724.030 ops/s
Iteration  20: 26205710.875 ops/s
Iteration  21: 26349912.706 ops/s
Iteration  22: 25433086.389 ops/s
Iteration  23: 25928834.577 ops/s
Iteration  24: 26207363.569 ops/s
Iteration  25: 26162832.092 ops/s
Iteration  26: 26257021.865 ops/s
Iteration  27: 25957237.707 ops/s
Iteration  28: 26170803.536 ops/s
Iteration  29: 26178563.194 ops/s
Iteration  30: 26286643.667 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIf":
  26156015.840 ±(99.9%) 131865.648 ops/s [Average]
  (min, avg, max) = (25433086.389, 26156015.840, 26373911.030), stdev = 197370.308
  CI (99.9%): [26024150.193, 26287881.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_removeIf  thrpt   30  26156015.840 ± 131865.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5961303.425 ops/s
# Warmup Iteration   2: 12121355.569 ops/s
# Warmup Iteration   3: 10321935.032 ops/s
# Warmup Iteration   4: 12177712.593 ops/s
# Warmup Iteration   5: 12180833.921 ops/s
# Warmup Iteration   6: 12180085.919 ops/s
# Warmup Iteration   7: 12033369.088 ops/s
# Warmup Iteration   8: 12121170.005 ops/s
# Warmup Iteration   9: 12097810.943 ops/s
# Warmup Iteration  10: 12043994.862 ops/s
# Warmup Iteration  11: 12135959.904 ops/s
# Warmup Iteration  12: 12128743.411 ops/s
# Warmup Iteration  13: 12153716.554 ops/s
# Warmup Iteration  14: 12170453.462 ops/s
# Warmup Iteration  15: 12168714.270 ops/s
# Warmup Iteration  16: 12058971.206 ops/s
# Warmup Iteration  17: 12161085.350 ops/s
# Warmup Iteration  18: 12123819.798 ops/s
# Warmup Iteration  19: 12081459.978 ops/s
# Warmup Iteration  20: 12175008.305 ops/s
# Warmup Iteration  21: 12161396.216 ops/s
# Warmup Iteration  22: 12042789.087 ops/s
# Warmup Iteration  23: 11996863.947 ops/s
# Warmup Iteration  24: 11928650.345 ops/s
# Warmup Iteration  25: 12121115.591 ops/s
# Warmup Iteration  26: 12144359.666 ops/s
# Warmup Iteration  27: 12140513.278 ops/s
# Warmup Iteration  28: 12158909.159 ops/s
# Warmup Iteration  29: 12167412.926 ops/s
# Warmup Iteration  30: 12162226.512 ops/s
Iteration   1: 12133136.971 ops/s
Iteration   2: 12161019.669 ops/s
Iteration   3: 12146902.669 ops/s
Iteration   4: 11989950.059 ops/s
Iteration   5: 12122579.136 ops/s
Iteration   6: 12150249.277 ops/s
Iteration   7: 12172758.116 ops/s
Iteration   8: 12154466.508 ops/s
Iteration   9: 12104841.012 ops/s
Iteration  10: 12185340.149 ops/s
Iteration  11: 12149737.354 ops/s
Iteration  12: 12149310.269 ops/s
Iteration  13: 12182862.119 ops/s
Iteration  14: 12104540.695 ops/s
Iteration  15: 12063686.186 ops/s
Iteration  16: 12159616.296 ops/s
Iteration  17: 11972038.456 ops/s
Iteration  18: 12170530.580 ops/s
Iteration  19: 12185238.362 ops/s
Iteration  20: 12180680.847 ops/s
Iteration  21: 12209828.192 ops/s
Iteration  22: 12200890.030 ops/s
Iteration  23: 11731883.525 ops/s
Iteration  24: 12176837.792 ops/s
Iteration  25: 12151791.231 ops/s
Iteration  26: 12176615.407 ops/s
Iteration  27: 12165899.156 ops/s
Iteration  28: 12150521.934 ops/s
Iteration  29: 12132608.158 ops/s
Iteration  30: 12140943.702 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIfWith":
  12129243.462 ±(99.9%) 61498.042 ops/s [Average]
  (min, avg, max) = (11731883.525, 12129243.462, 12209828.192), stdev = 92047.382
  CI (99.9%): [12067745.419, 12190741.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_removeIfWith  thrpt   30  12129243.462 ± 61498.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18687392.283 ops/s
# Warmup Iteration   2: 36027890.568 ops/s
# Warmup Iteration   3: 30654703.889 ops/s
# Warmup Iteration   4: 36077610.107 ops/s
# Warmup Iteration   5: 35623004.151 ops/s
# Warmup Iteration   6: 35985645.460 ops/s
# Warmup Iteration   7: 35866465.249 ops/s
# Warmup Iteration   8: 35989085.167 ops/s
# Warmup Iteration   9: 35870781.282 ops/s
# Warmup Iteration  10: 35975117.661 ops/s
# Warmup Iteration  11: 35490619.155 ops/s
# Warmup Iteration  12: 35934481.670 ops/s
# Warmup Iteration  13: 35999559.358 ops/s
# Warmup Iteration  14: 35965476.558 ops/s
# Warmup Iteration  15: 36019008.883 ops/s
# Warmup Iteration  16: 35939548.068 ops/s
# Warmup Iteration  17: 35717195.553 ops/s
# Warmup Iteration  18: 35738488.176 ops/s
# Warmup Iteration  19: 35565599.080 ops/s
# Warmup Iteration  20: 35876878.132 ops/s
# Warmup Iteration  21: 35967949.129 ops/s
# Warmup Iteration  22: 36072225.171 ops/s
# Warmup Iteration  23: 36044605.374 ops/s
# Warmup Iteration  24: 36037950.160 ops/s
# Warmup Iteration  25: 35982942.075 ops/s
# Warmup Iteration  26: 35997031.487 ops/s
# Warmup Iteration  27: 35735652.225 ops/s
# Warmup Iteration  28: 36016280.188 ops/s
# Warmup Iteration  29: 36001568.577 ops/s
# Warmup Iteration  30: 35877903.996 ops/s
Iteration   1: 36055181.205 ops/s
Iteration   2: 35400357.926 ops/s
Iteration   3: 36078158.709 ops/s
Iteration   4: 35937155.278 ops/s
Iteration   5: 36023512.731 ops/s
Iteration   6: 35437739.367 ops/s
Iteration   7: 35916429.694 ops/s
Iteration   8: 36025545.199 ops/s
Iteration   9: 36036897.250 ops/s
Iteration  10: 35980415.440 ops/s
Iteration  11: 35968314.785 ops/s
Iteration  12: 35846793.507 ops/s
Iteration  13: 35503910.139 ops/s
Iteration  14: 35915446.411 ops/s
Iteration  15: 35977165.235 ops/s
Iteration  16: 36055257.417 ops/s
Iteration  17: 36018706.592 ops/s
Iteration  18: 35430650.436 ops/s
Iteration  19: 35763016.993 ops/s
Iteration  20: 35857600.815 ops/s
Iteration  21: 36030118.565 ops/s
Iteration  22: 35886969.625 ops/s
Iteration  23: 35900760.593 ops/s
Iteration  24: 35972797.607 ops/s
Iteration  25: 35808531.842 ops/s
Iteration  26: 36067114.218 ops/s
Iteration  27: 35859990.867 ops/s
Iteration  28: 35861219.715 ops/s
Iteration  29: 35926482.865 ops/s
Iteration  30: 35745053.455 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeIndex":
  35876243.149 ±(99.9%) 129897.538 ops/s [Average]
  (min, avg, max) = (35400357.926, 35876243.149, 36078158.709), stdev = 194424.534
  CI (99.9%): [35746345.612, 36006140.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_removeIndex  thrpt   30  35876243.149 ± 129897.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5332978.348 ops/s
# Warmup Iteration   2: 8951523.936 ops/s
# Warmup Iteration   3: 8386886.787 ops/s
# Warmup Iteration   4: 9364591.616 ops/s
# Warmup Iteration   5: 9369531.806 ops/s
# Warmup Iteration   6: 9377564.050 ops/s
# Warmup Iteration   7: 9328280.943 ops/s
# Warmup Iteration   8: 9393158.303 ops/s
# Warmup Iteration   9: 9369840.849 ops/s
# Warmup Iteration  10: 9372421.675 ops/s
# Warmup Iteration  11: 9396328.104 ops/s
# Warmup Iteration  12: 9283295.430 ops/s
# Warmup Iteration  13: 9285431.396 ops/s
# Warmup Iteration  14: 9394192.183 ops/s
# Warmup Iteration  15: 9314142.199 ops/s
# Warmup Iteration  16: 9392717.601 ops/s
# Warmup Iteration  17: 9401803.463 ops/s
# Warmup Iteration  18: 9360058.109 ops/s
# Warmup Iteration  19: 9372641.494 ops/s
# Warmup Iteration  20: 9394111.547 ops/s
# Warmup Iteration  21: 9359056.703 ops/s
# Warmup Iteration  22: 9380761.719 ops/s
# Warmup Iteration  23: 9369974.481 ops/s
# Warmup Iteration  24: 9348431.432 ops/s
# Warmup Iteration  25: 9321768.369 ops/s
# Warmup Iteration  26: 9286262.190 ops/s
# Warmup Iteration  27: 9307949.235 ops/s
# Warmup Iteration  28: 9177314.448 ops/s
# Warmup Iteration  29: 9361249.304 ops/s
# Warmup Iteration  30: 9372323.303 ops/s
Iteration   1: 9314143.063 ops/s
Iteration   2: 9287454.194 ops/s
Iteration   3: 9404621.753 ops/s
Iteration   4: 9360412.217 ops/s
Iteration   5: 9390037.735 ops/s
Iteration   6: 9378597.693 ops/s
Iteration   7: 9376373.363 ops/s
Iteration   8: 9398178.987 ops/s
Iteration   9: 9404901.768 ops/s
Iteration  10: 9377442.594 ops/s
Iteration  11: 9395815.659 ops/s
Iteration  12: 9393245.366 ops/s
Iteration  13: 9248126.350 ops/s
Iteration  14: 9411089.045 ops/s
Iteration  15: 9383073.258 ops/s
Iteration  16: 9388018.402 ops/s
Iteration  17: 9341169.642 ops/s
Iteration  18: 9386584.390 ops/s
Iteration  19: 9427153.813 ops/s
Iteration  20: 9411467.862 ops/s
Iteration  21: 9402537.437 ops/s
Iteration  22: 9391645.156 ops/s
Iteration  23: 9379405.544 ops/s
Iteration  24: 9218989.741 ops/s
Iteration  25: 9395253.451 ops/s
Iteration  26: 9262674.858 ops/s
Iteration  27: 9409766.203 ops/s
Iteration  28: 9391579.912 ops/s
Iteration  29: 9186846.074 ops/s
Iteration  30: 9407296.131 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_removeObject":
  9364130.055 ±(99.9%) 41273.010 ops/s [Average]
  (min, avg, max) = (9186846.074, 9364130.055, 9427153.813), stdev = 61775.503
  CI (99.9%): [9322857.045, 9405403.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_removeObject  thrpt   30  9364130.055 ± 41273.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10784861.378 ops/s
# Warmup Iteration   2: 23733190.324 ops/s
# Warmup Iteration   3: 23662725.976 ops/s
# Warmup Iteration   4: 19139470.641 ops/s
# Warmup Iteration   5: 22570497.827 ops/s
# Warmup Iteration   6: 22758385.217 ops/s
# Warmup Iteration   7: 22705743.226 ops/s
# Warmup Iteration   8: 22747746.872 ops/s
# Warmup Iteration   9: 22746880.820 ops/s
# Warmup Iteration  10: 22731828.567 ops/s
# Warmup Iteration  11: 22752700.262 ops/s
# Warmup Iteration  12: 22183800.750 ops/s
# Warmup Iteration  13: 22704897.291 ops/s
# Warmup Iteration  14: 22509194.539 ops/s
# Warmup Iteration  15: 22681759.900 ops/s
# Warmup Iteration  16: 22726067.902 ops/s
# Warmup Iteration  17: 22719810.245 ops/s
# Warmup Iteration  18: 22669051.862 ops/s
# Warmup Iteration  19: 22686906.393 ops/s
# Warmup Iteration  20: 22635943.128 ops/s
# Warmup Iteration  21: 22622330.820 ops/s
# Warmup Iteration  22: 22710068.703 ops/s
# Warmup Iteration  23: 22598013.619 ops/s
# Warmup Iteration  24: 22656788.746 ops/s
# Warmup Iteration  25: 22720533.684 ops/s
# Warmup Iteration  26: 22724187.334 ops/s
# Warmup Iteration  27: 22331514.392 ops/s
# Warmup Iteration  28: 22663241.877 ops/s
# Warmup Iteration  29: 22665772.491 ops/s
# Warmup Iteration  30: 22712002.000 ops/s
Iteration   1: 22704382.182 ops/s
Iteration   2: 22751504.515 ops/s
Iteration   3: 22745169.910 ops/s
Iteration   4: 22609767.085 ops/s
Iteration   5: 22569213.362 ops/s
Iteration   6: 22746818.848 ops/s
Iteration   7: 22666212.957 ops/s
Iteration   8: 22742487.696 ops/s
Iteration   9: 22752635.168 ops/s
Iteration  10: 22697434.194 ops/s
Iteration  11: 22749941.169 ops/s
Iteration  12: 22685457.893 ops/s
Iteration  13: 22736294.439 ops/s
Iteration  14: 22817285.596 ops/s
Iteration  15: 22707784.747 ops/s
Iteration  16: 22671624.051 ops/s
Iteration  17: 22719112.583 ops/s
Iteration  18: 22642804.043 ops/s
Iteration  19: 22329277.694 ops/s
Iteration  20: 22750514.940 ops/s
Iteration  21: 22187055.493 ops/s
Iteration  22: 22654544.652 ops/s
Iteration  23: 22796691.453 ops/s
Iteration  24: 22543344.975 ops/s
Iteration  25: 22778988.585 ops/s
Iteration  26: 22782266.315 ops/s
Iteration  27: 22732185.613 ops/s
Iteration  28: 22651292.373 ops/s
Iteration  29: 22732224.240 ops/s
Iteration  30: 22242165.545 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_replaceAll":
  22663216.077 ±(99.9%) 102733.825 ops/s [Average]
  (min, avg, max) = (22187055.493, 22663216.077, 22817285.596), stdev = 153767.164
  CI (99.9%): [22560482.252, 22765949.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_replaceAll  thrpt   30  22663216.077 ± 102733.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 182501.982 ops/s
# Warmup Iteration   2: 272743.575 ops/s
# Warmup Iteration   3: 342620.614 ops/s
# Warmup Iteration   4: 336623.602 ops/s
# Warmup Iteration   5: 339535.381 ops/s
# Warmup Iteration   6: 341238.532 ops/s
# Warmup Iteration   7: 320647.031 ops/s
# Warmup Iteration   8: 306797.205 ops/s
# Warmup Iteration   9: 341638.632 ops/s
# Warmup Iteration  10: 340778.528 ops/s
# Warmup Iteration  11: 342368.304 ops/s
# Warmup Iteration  12: 339999.334 ops/s
# Warmup Iteration  13: 342145.776 ops/s
# Warmup Iteration  14: 337826.112 ops/s
# Warmup Iteration  15: 342623.817 ops/s
# Warmup Iteration  16: 342623.994 ops/s
# Warmup Iteration  17: 342142.984 ops/s
# Warmup Iteration  18: 341904.804 ops/s
# Warmup Iteration  19: 342378.672 ops/s
# Warmup Iteration  20: 341160.057 ops/s
# Warmup Iteration  21: 342265.803 ops/s
# Warmup Iteration  22: 342387.776 ops/s
# Warmup Iteration  23: 342570.994 ops/s
# Warmup Iteration  24: 339909.837 ops/s
# Warmup Iteration  25: 341920.854 ops/s
# Warmup Iteration  26: 340037.953 ops/s
# Warmup Iteration  27: 342575.152 ops/s
# Warmup Iteration  28: 340431.754 ops/s
# Warmup Iteration  29: 339558.899 ops/s
# Warmup Iteration  30: 342741.389 ops/s
Iteration   1: 343007.109 ops/s
Iteration   2: 336886.288 ops/s
Iteration   3: 342216.080 ops/s
Iteration   4: 340892.999 ops/s
Iteration   5: 336801.883 ops/s
Iteration   6: 343385.443 ops/s
Iteration   7: 342104.387 ops/s
Iteration   8: 342810.353 ops/s
Iteration   9: 338873.009 ops/s
Iteration  10: 337807.588 ops/s
Iteration  11: 343578.851 ops/s
Iteration  12: 335764.410 ops/s
Iteration  13: 342798.571 ops/s
Iteration  14: 342833.594 ops/s
Iteration  15: 342337.141 ops/s
Iteration  16: 342779.439 ops/s
Iteration  17: 335482.843 ops/s
Iteration  18: 343081.034 ops/s
Iteration  19: 340196.763 ops/s
Iteration  20: 342402.132 ops/s
Iteration  21: 342426.534 ops/s
Iteration  22: 335184.015 ops/s
Iteration  23: 342261.724 ops/s
Iteration  24: 342100.454 ops/s
Iteration  25: 342506.643 ops/s
Iteration  26: 341472.645 ops/s
Iteration  27: 342074.404 ops/s
Iteration  28: 341033.991 ops/s
Iteration  29: 341997.111 ops/s
Iteration  30: 342887.268 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAll":
  340999.490 ±(99.9%) 1731.729 ops/s [Average]
  (min, avg, max) = (335184.015, 340999.490, 343578.851), stdev = 2591.971
  CI (99.9%): [339267.761, 342731.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_retainAll  thrpt   30  340999.490 ± 1731.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172557.238 ops/s
# Warmup Iteration   2: 270483.731 ops/s
# Warmup Iteration   3: 342599.948 ops/s
# Warmup Iteration   4: 338252.606 ops/s
# Warmup Iteration   5: 340128.747 ops/s
# Warmup Iteration   6: 342782.306 ops/s
# Warmup Iteration   7: 286779.817 ops/s
# Warmup Iteration   8: 340297.200 ops/s
# Warmup Iteration   9: 342401.973 ops/s
# Warmup Iteration  10: 340858.924 ops/s
# Warmup Iteration  11: 342905.960 ops/s
# Warmup Iteration  12: 342916.693 ops/s
# Warmup Iteration  13: 342015.949 ops/s
# Warmup Iteration  14: 342330.257 ops/s
# Warmup Iteration  15: 342803.939 ops/s
# Warmup Iteration  16: 339705.937 ops/s
# Warmup Iteration  17: 343474.697 ops/s
# Warmup Iteration  18: 343205.038 ops/s
# Warmup Iteration  19: 339041.414 ops/s
# Warmup Iteration  20: 339473.375 ops/s
# Warmup Iteration  21: 342367.431 ops/s
# Warmup Iteration  22: 342620.369 ops/s
# Warmup Iteration  23: 339818.126 ops/s
# Warmup Iteration  24: 342553.306 ops/s
# Warmup Iteration  25: 341489.337 ops/s
# Warmup Iteration  26: 343041.271 ops/s
# Warmup Iteration  27: 343155.289 ops/s
# Warmup Iteration  28: 339732.676 ops/s
# Warmup Iteration  29: 341341.869 ops/s
# Warmup Iteration  30: 337698.786 ops/s
Iteration   1: 343284.013 ops/s
Iteration   2: 341377.993 ops/s
Iteration   3: 343792.975 ops/s
Iteration   4: 341957.571 ops/s
Iteration   5: 343735.748 ops/s
Iteration   6: 342150.294 ops/s
Iteration   7: 340784.858 ops/s
Iteration   8: 343699.354 ops/s
Iteration   9: 343218.672 ops/s
Iteration  10: 344039.593 ops/s
Iteration  11: 341975.097 ops/s
Iteration  12: 343215.555 ops/s
Iteration  13: 341966.299 ops/s
Iteration  14: 337805.125 ops/s
Iteration  15: 343190.786 ops/s
Iteration  16: 343789.200 ops/s
Iteration  17: 343333.946 ops/s
Iteration  18: 341732.596 ops/s
Iteration  19: 342670.135 ops/s
Iteration  20: 342201.926 ops/s
Iteration  21: 343506.697 ops/s
Iteration  22: 339772.235 ops/s
Iteration  23: 342762.232 ops/s
Iteration  24: 341681.589 ops/s
Iteration  25: 342119.877 ops/s
Iteration  26: 343811.645 ops/s
Iteration  27: 343065.324 ops/s
Iteration  28: 343002.955 ops/s
Iteration  29: 342952.374 ops/s
Iteration  30: 343874.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_retainAllIterable":
  342549.047 ±(99.9%) 903.757 ops/s [Average]
  (min, avg, max) = (337805.125, 342549.047, 344039.593), stdev = 1352.701
  CI (99.9%): [341645.291, 343452.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_retainAllIterable  thrpt   30  342549.047 ± 903.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7344551.048 ops/s
# Warmup Iteration   2: 14794528.907 ops/s
# Warmup Iteration   3: 13563523.828 ops/s
# Warmup Iteration   4: 16087980.142 ops/s
# Warmup Iteration   5: 16075698.887 ops/s
# Warmup Iteration   6: 16081793.338 ops/s
# Warmup Iteration   7: 16101961.158 ops/s
# Warmup Iteration   8: 15989030.290 ops/s
# Warmup Iteration   9: 16095731.280 ops/s
# Warmup Iteration  10: 15819512.142 ops/s
# Warmup Iteration  11: 15916602.174 ops/s
# Warmup Iteration  12: 15958437.758 ops/s
# Warmup Iteration  13: 15944888.957 ops/s
# Warmup Iteration  14: 16108413.980 ops/s
# Warmup Iteration  15: 16069501.739 ops/s
# Warmup Iteration  16: 16040128.778 ops/s
# Warmup Iteration  17: 16070045.290 ops/s
# Warmup Iteration  18: 16126838.409 ops/s
# Warmup Iteration  19: 16052732.258 ops/s
# Warmup Iteration  20: 16081892.121 ops/s
# Warmup Iteration  21: 16057867.188 ops/s
# Warmup Iteration  22: 16170771.831 ops/s
# Warmup Iteration  23: 16015366.205 ops/s
# Warmup Iteration  24: 16056904.752 ops/s
# Warmup Iteration  25: 16061603.230 ops/s
# Warmup Iteration  26: 15966040.249 ops/s
# Warmup Iteration  27: 16084186.042 ops/s
# Warmup Iteration  28: 16101307.393 ops/s
# Warmup Iteration  29: 15931735.815 ops/s
# Warmup Iteration  30: 16105788.429 ops/s
Iteration   1: 15856335.049 ops/s
Iteration   2: 16071428.304 ops/s
Iteration   3: 16110587.351 ops/s
Iteration   4: 16044585.784 ops/s
Iteration   5: 16131418.054 ops/s
Iteration   6: 15900105.433 ops/s
Iteration   7: 15831962.813 ops/s
Iteration   8: 15843976.910 ops/s
Iteration   9: 15981995.554 ops/s
Iteration  10: 16105311.384 ops/s
Iteration  11: 16069830.707 ops/s
Iteration  12: 16083720.261 ops/s
Iteration  13: 16102625.588 ops/s
Iteration  14: 16078322.555 ops/s
Iteration  15: 15954405.140 ops/s
Iteration  16: 16060105.297 ops/s
Iteration  17: 16096621.412 ops/s
Iteration  18: 16098223.340 ops/s
Iteration  19: 16080867.024 ops/s
Iteration  20: 16056973.265 ops/s
Iteration  21: 16139473.223 ops/s
Iteration  22: 16040893.229 ops/s
Iteration  23: 16113222.825 ops/s
Iteration  24: 15842671.589 ops/s
Iteration  25: 15894726.281 ops/s
Iteration  26: 15845376.679 ops/s
Iteration  27: 15921157.497 ops/s
Iteration  28: 16084372.584 ops/s
Iteration  29: 16039891.626 ops/s
Iteration  30: 16103818.687 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach":
  16019500.181 ±(99.9%) 68202.131 ops/s [Average]
  (min, avg, max) = (15831962.813, 16019500.181, 16139473.223), stdev = 102081.747
  CI (99.9%): [15951298.050, 16087702.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_reverseForEach  thrpt   30  16019500.181 ± 68202.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6946004.837 ops/s
# Warmup Iteration   2: 13804731.925 ops/s
# Warmup Iteration   3: 13250661.782 ops/s
# Warmup Iteration   4: 13112931.671 ops/s
# Warmup Iteration   5: 14173962.985 ops/s
# Warmup Iteration   6: 14176052.668 ops/s
# Warmup Iteration   7: 14088427.587 ops/s
# Warmup Iteration   8: 14151564.819 ops/s
# Warmup Iteration   9: 14096517.152 ops/s
# Warmup Iteration  10: 14169114.096 ops/s
# Warmup Iteration  11: 14132092.883 ops/s
# Warmup Iteration  12: 14154444.483 ops/s
# Warmup Iteration  13: 14195101.017 ops/s
# Warmup Iteration  14: 14195429.646 ops/s
# Warmup Iteration  15: 14225147.262 ops/s
# Warmup Iteration  16: 14210094.520 ops/s
# Warmup Iteration  17: 14127348.870 ops/s
# Warmup Iteration  18: 13833886.745 ops/s
# Warmup Iteration  19: 14114492.735 ops/s
# Warmup Iteration  20: 14102466.426 ops/s
# Warmup Iteration  21: 14148844.162 ops/s
# Warmup Iteration  22: 14166885.775 ops/s
# Warmup Iteration  23: 14131404.757 ops/s
# Warmup Iteration  24: 14148802.141 ops/s
# Warmup Iteration  25: 14155801.660 ops/s
# Warmup Iteration  26: 14089368.602 ops/s
# Warmup Iteration  27: 14167808.571 ops/s
# Warmup Iteration  28: 14111636.400 ops/s
# Warmup Iteration  29: 14157859.316 ops/s
# Warmup Iteration  30: 13919514.945 ops/s
Iteration   1: 14098298.172 ops/s
Iteration   2: 14152945.399 ops/s
Iteration   3: 14177422.197 ops/s
Iteration   4: 14108908.136 ops/s
Iteration   5: 14138359.618 ops/s
Iteration   6: 14167492.968 ops/s
Iteration   7: 14142973.078 ops/s
Iteration   8: 14132128.590 ops/s
Iteration   9: 13923448.418 ops/s
Iteration  10: 14161787.948 ops/s
Iteration  11: 14142525.968 ops/s
Iteration  12: 14163008.227 ops/s
Iteration  13: 14112962.807 ops/s
Iteration  14: 14123424.153 ops/s
Iteration  15: 14154657.748 ops/s
Iteration  16: 14176741.218 ops/s
Iteration  17: 14126002.231 ops/s
Iteration  18: 14166954.989 ops/s
Iteration  19: 14182965.175 ops/s
Iteration  20: 14098653.752 ops/s
Iteration  21: 14145280.698 ops/s
Iteration  22: 14139220.124 ops/s
Iteration  23: 14026375.280 ops/s
Iteration  24: 14132815.487 ops/s
Iteration  25: 14153870.274 ops/s
Iteration  26: 13948021.929 ops/s
Iteration  27: 14133188.120 ops/s
Iteration  28: 14191306.608 ops/s
Iteration  29: 13998625.725 ops/s
Iteration  30: 14096237.767 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex":
  14120553.427 ±(99.9%) 43569.923 ops/s [Average]
  (min, avg, max) = (13923448.418, 14120553.427, 14191306.608), stdev = 65213.414
  CI (99.9%): [14076983.504, 14164123.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  14120553.427 ± 43569.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58688090.828 ops/s
# Warmup Iteration   2: 109750639.480 ops/s
# Warmup Iteration   3: 93814217.605 ops/s
# Warmup Iteration   4: 107914552.638 ops/s
# Warmup Iteration   5: 107107170.199 ops/s
# Warmup Iteration   6: 107525438.215 ops/s
# Warmup Iteration   7: 107700213.730 ops/s
# Warmup Iteration   8: 108120043.014 ops/s
# Warmup Iteration   9: 107634717.840 ops/s
# Warmup Iteration  10: 107898050.905 ops/s
# Warmup Iteration  11: 107786269.217 ops/s
# Warmup Iteration  12: 107447253.997 ops/s
# Warmup Iteration  13: 108019197.556 ops/s
# Warmup Iteration  14: 108015209.004 ops/s
# Warmup Iteration  15: 108014028.621 ops/s
# Warmup Iteration  16: 106785081.494 ops/s
# Warmup Iteration  17: 108013507.781 ops/s
# Warmup Iteration  18: 107676912.610 ops/s
# Warmup Iteration  19: 108044605.984 ops/s
# Warmup Iteration  20: 108213210.515 ops/s
# Warmup Iteration  21: 107807021.487 ops/s
# Warmup Iteration  22: 107912075.277 ops/s
# Warmup Iteration  23: 107731980.453 ops/s
# Warmup Iteration  24: 108080856.943 ops/s
# Warmup Iteration  25: 108190606.473 ops/s
# Warmup Iteration  26: 107903064.300 ops/s
# Warmup Iteration  27: 108018374.449 ops/s
# Warmup Iteration  28: 107014948.697 ops/s
# Warmup Iteration  29: 108124274.289 ops/s
# Warmup Iteration  30: 108125545.516 ops/s
Iteration   1: 107761225.138 ops/s
Iteration   2: 107711563.026 ops/s
Iteration   3: 105133275.191 ops/s
Iteration   4: 107766121.244 ops/s
Iteration   5: 108066679.995 ops/s
Iteration   6: 107433936.799 ops/s
Iteration   7: 108050200.835 ops/s
Iteration   8: 107930281.279 ops/s
Iteration   9: 108008215.700 ops/s
Iteration  10: 107434470.711 ops/s
Iteration  11: 107460701.642 ops/s
Iteration  12: 108187922.291 ops/s
Iteration  13: 107978311.203 ops/s
Iteration  14: 107986014.172 ops/s
Iteration  15: 106820810.664 ops/s
Iteration  16: 107888905.906 ops/s
Iteration  17: 108046384.228 ops/s
Iteration  18: 107864076.825 ops/s
Iteration  19: 107996452.263 ops/s
Iteration  20: 107894570.577 ops/s
Iteration  21: 108421879.402 ops/s
Iteration  22: 107927742.799 ops/s
Iteration  23: 107695483.912 ops/s
Iteration  24: 107634347.162 ops/s
Iteration  25: 108123141.635 ops/s
Iteration  26: 108181700.009 ops/s
Iteration  27: 108036289.944 ops/s
Iteration  28: 107081804.535 ops/s
Iteration  29: 107690112.685 ops/s
Iteration  30: 107984709.065 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  107739911.028 ±(99.9%) 396149.012 ops/s [Average]
  (min, avg, max) = (105133275.191, 107739911.028, 108421879.402), stdev = 592937.236
  CI (99.9%): [107343762.016, 108136060.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt          Score        Error  Units
FastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  107739911.028 ± 396149.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35485600.082 ops/s
# Warmup Iteration   2: 66969811.955 ops/s
# Warmup Iteration   3: 62186007.676 ops/s
# Warmup Iteration   4: 72020717.724 ops/s
# Warmup Iteration   5: 72587805.159 ops/s
# Warmup Iteration   6: 72993529.194 ops/s
# Warmup Iteration   7: 72825604.701 ops/s
# Warmup Iteration   8: 72806574.708 ops/s
# Warmup Iteration   9: 72685342.708 ops/s
# Warmup Iteration  10: 72601781.322 ops/s
# Warmup Iteration  11: 72334300.045 ops/s
# Warmup Iteration  12: 72242852.431 ops/s
# Warmup Iteration  13: 72431275.066 ops/s
# Warmup Iteration  14: 72922671.971 ops/s
# Warmup Iteration  15: 73039077.122 ops/s
# Warmup Iteration  16: 72658885.863 ops/s
# Warmup Iteration  17: 71752908.562 ops/s
# Warmup Iteration  18: 71786856.357 ops/s
# Warmup Iteration  19: 71371238.089 ops/s
# Warmup Iteration  20: 71584218.377 ops/s
# Warmup Iteration  21: 71073525.370 ops/s
# Warmup Iteration  22: 71384437.720 ops/s
# Warmup Iteration  23: 71498285.310 ops/s
# Warmup Iteration  24: 71766856.038 ops/s
# Warmup Iteration  25: 71556304.523 ops/s
# Warmup Iteration  26: 71789785.210 ops/s
# Warmup Iteration  27: 71156580.551 ops/s
# Warmup Iteration  28: 71630261.042 ops/s
# Warmup Iteration  29: 71679955.049 ops/s
# Warmup Iteration  30: 71707467.763 ops/s
Iteration   1: 71592718.394 ops/s
Iteration   2: 70470543.750 ops/s
Iteration   3: 71879915.731 ops/s
Iteration   4: 71405106.350 ops/s
Iteration   5: 71422241.779 ops/s
Iteration   6: 71631133.083 ops/s
Iteration   7: 70989164.925 ops/s
Iteration   8: 72042066.804 ops/s
Iteration   9: 70297779.264 ops/s
Iteration  10: 71434974.138 ops/s
Iteration  11: 71669064.200 ops/s
Iteration  12: 72113876.863 ops/s
Iteration  13: 72062158.583 ops/s
Iteration  14: 71606814.967 ops/s
Iteration  15: 71362520.520 ops/s
Iteration  16: 72283347.464 ops/s
Iteration  17: 71772524.769 ops/s
Iteration  18: 71647226.793 ops/s
Iteration  19: 71612448.336 ops/s
Iteration  20: 71578813.885 ops/s
Iteration  21: 70977027.646 ops/s
Iteration  22: 71748198.764 ops/s
Iteration  23: 71442129.630 ops/s
Iteration  24: 71151340.041 ops/s
Iteration  25: 71878214.792 ops/s
Iteration  26: 71891733.013 ops/s
Iteration  27: 71413615.263 ops/s
Iteration  28: 70874866.445 ops/s
Iteration  29: 71613091.685 ops/s
Iteration  30: 70737471.809 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseForEach_emptyList":
  71486737.656 ±(99.9%) 315654.294 ops/s [Average]
  (min, avg, max) = (70297779.264, 71486737.656, 72283347.464), stdev = 472456.523
  CI (99.9%): [71171083.362, 71802391.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  71486737.656 ± 315654.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10190132.009 ops/s
# Warmup Iteration   2: 21084492.893 ops/s
# Warmup Iteration   3: 20771372.410 ops/s
# Warmup Iteration   4: 17516276.843 ops/s
# Warmup Iteration   5: 20721203.672 ops/s
# Warmup Iteration   6: 20899283.563 ops/s
# Warmup Iteration   7: 20899351.766 ops/s
# Warmup Iteration   8: 20893755.216 ops/s
# Warmup Iteration   9: 20882982.142 ops/s
# Warmup Iteration  10: 20956923.894 ops/s
# Warmup Iteration  11: 20929503.353 ops/s
# Warmup Iteration  12: 20849359.237 ops/s
# Warmup Iteration  13: 20911845.565 ops/s
# Warmup Iteration  14: 20849727.780 ops/s
# Warmup Iteration  15: 20935223.755 ops/s
# Warmup Iteration  16: 20604215.413 ops/s
# Warmup Iteration  17: 20849700.519 ops/s
# Warmup Iteration  18: 20915975.216 ops/s
# Warmup Iteration  19: 20863148.727 ops/s
# Warmup Iteration  20: 20960284.986 ops/s
# Warmup Iteration  21: 20847475.879 ops/s
# Warmup Iteration  22: 20877566.206 ops/s
# Warmup Iteration  23: 20954518.313 ops/s
# Warmup Iteration  24: 20901566.381 ops/s
# Warmup Iteration  25: 20781728.661 ops/s
# Warmup Iteration  26: 20915430.504 ops/s
# Warmup Iteration  27: 20921353.787 ops/s
# Warmup Iteration  28: 20897676.645 ops/s
# Warmup Iteration  29: 20799097.638 ops/s
# Warmup Iteration  30: 20938850.005 ops/s
Iteration   1: 20623461.281 ops/s
Iteration   2: 20959067.853 ops/s
Iteration   3: 20594558.992 ops/s
Iteration   4: 20936147.086 ops/s
Iteration   5: 20932741.020 ops/s
Iteration   6: 20990628.935 ops/s
Iteration   7: 20920658.359 ops/s
Iteration   8: 20586378.174 ops/s
Iteration   9: 20956635.098 ops/s
Iteration  10: 20969142.767 ops/s
Iteration  11: 20946403.129 ops/s
Iteration  12: 20965123.759 ops/s
Iteration  13: 20929396.520 ops/s
Iteration  14: 20911261.105 ops/s
Iteration  15: 20916548.203 ops/s
Iteration  16: 20628796.580 ops/s
Iteration  17: 20901971.327 ops/s
Iteration  18: 20948338.357 ops/s
Iteration  19: 20961616.044 ops/s
Iteration  20: 20732179.188 ops/s
Iteration  21: 20564750.607 ops/s
Iteration  22: 20834812.412 ops/s
Iteration  23: 20844698.234 ops/s
Iteration  24: 20647419.962 ops/s
Iteration  25: 20894764.930 ops/s
Iteration  26: 21002128.295 ops/s
Iteration  27: 20960086.192 ops/s
Iteration  28: 20943624.569 ops/s
Iteration  29: 20962121.857 ops/s
Iteration  30: 20955179.035 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_reverseThis":
  20864021.329 ±(99.9%) 93968.546 ops/s [Average]
  (min, avg, max) = (20564750.607, 20864021.329, 21002128.295), stdev = 140647.707
  CI (99.9%): [20770052.783, 20957989.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_reverseThis  thrpt   30  20864021.329 ± 93968.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8518698.855 ops/s
# Warmup Iteration   2: 17579688.631 ops/s
# Warmup Iteration   3: 15127095.677 ops/s
# Warmup Iteration   4: 17624792.066 ops/s
# Warmup Iteration   5: 17800821.777 ops/s
# Warmup Iteration   6: 17800912.306 ops/s
# Warmup Iteration   7: 17688667.071 ops/s
# Warmup Iteration   8: 17607994.184 ops/s
# Warmup Iteration   9: 17817043.838 ops/s
# Warmup Iteration  10: 17802516.787 ops/s
# Warmup Iteration  11: 17686365.897 ops/s
# Warmup Iteration  12: 17737423.656 ops/s
# Warmup Iteration  13: 17769551.536 ops/s
# Warmup Iteration  14: 17646354.287 ops/s
# Warmup Iteration  15: 17787668.214 ops/s
# Warmup Iteration  16: 17313837.182 ops/s
# Warmup Iteration  17: 17842588.436 ops/s
# Warmup Iteration  18: 17779386.541 ops/s
# Warmup Iteration  19: 17633880.348 ops/s
# Warmup Iteration  20: 17759666.481 ops/s
# Warmup Iteration  21: 17812901.891 ops/s
# Warmup Iteration  22: 17569119.627 ops/s
# Warmup Iteration  23: 17756882.288 ops/s
# Warmup Iteration  24: 17766652.331 ops/s
# Warmup Iteration  25: 17758465.461 ops/s
# Warmup Iteration  26: 17352199.640 ops/s
# Warmup Iteration  27: 17622723.931 ops/s
# Warmup Iteration  28: 17747386.594 ops/s
# Warmup Iteration  29: 17814195.444 ops/s
# Warmup Iteration  30: 17725776.012 ops/s
Iteration   1: 17808624.022 ops/s
Iteration   2: 17840640.727 ops/s
Iteration   3: 17708787.448 ops/s
Iteration   4: 17717768.345 ops/s
Iteration   5: 17761982.282 ops/s
Iteration   6: 17838276.995 ops/s
Iteration   7: 17790562.773 ops/s
Iteration   8: 17786919.889 ops/s
Iteration   9: 17458618.328 ops/s
Iteration  10: 17803159.434 ops/s
Iteration  11: 17839522.516 ops/s
Iteration  12: 17819186.775 ops/s
Iteration  13: 17575370.105 ops/s
Iteration  14: 17847035.829 ops/s
Iteration  15: 17554199.037 ops/s
Iteration  16: 17698058.792 ops/s
Iteration  17: 17811421.394 ops/s
Iteration  18: 17822823.157 ops/s
Iteration  19: 17810666.666 ops/s
Iteration  20: 17831741.710 ops/s
Iteration  21: 17766609.804 ops/s
Iteration  22: 17833260.522 ops/s
Iteration  23: 17792262.537 ops/s
Iteration  24: 17763078.834 ops/s
Iteration  25: 17504954.683 ops/s
Iteration  26: 17852825.935 ops/s
Iteration  27: 17828710.939 ops/s
Iteration  28: 17733259.098 ops/s
Iteration  29: 17711647.973 ops/s
Iteration  30: 17628642.116 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_select":
  17751353.955 ±(99.9%) 71124.834 ops/s [Average]
  (min, avg, max) = (17458618.328, 17751353.955, 17852825.935), stdev = 106456.312
  CI (99.9%): [17680229.121, 17822478.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_select  thrpt   30  17751353.955 ± 71124.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5522657.153 ops/s
# Warmup Iteration   2: 11358558.644 ops/s
# Warmup Iteration   3: 9818758.951 ops/s
# Warmup Iteration   4: 11521152.848 ops/s
# Warmup Iteration   5: 11529144.946 ops/s
# Warmup Iteration   6: 11489757.944 ops/s
# Warmup Iteration   7: 11550194.257 ops/s
# Warmup Iteration   8: 11593465.849 ops/s
# Warmup Iteration   9: 11444521.516 ops/s
# Warmup Iteration  10: 11470306.592 ops/s
# Warmup Iteration  11: 11591220.657 ops/s
# Warmup Iteration  12: 11541269.029 ops/s
# Warmup Iteration  13: 11481904.651 ops/s
# Warmup Iteration  14: 11484203.201 ops/s
# Warmup Iteration  15: 11562759.553 ops/s
# Warmup Iteration  16: 11575396.299 ops/s
# Warmup Iteration  17: 11527175.080 ops/s
# Warmup Iteration  18: 11592501.242 ops/s
# Warmup Iteration  19: 11544380.099 ops/s
# Warmup Iteration  20: 11580587.291 ops/s
# Warmup Iteration  21: 11537663.420 ops/s
# Warmup Iteration  22: 11509741.593 ops/s
# Warmup Iteration  23: 11318177.310 ops/s
# Warmup Iteration  24: 11507109.366 ops/s
# Warmup Iteration  25: 11484075.571 ops/s
# Warmup Iteration  26: 11600794.893 ops/s
# Warmup Iteration  27: 11574896.649 ops/s
# Warmup Iteration  28: 11582890.666 ops/s
# Warmup Iteration  29: 11566186.844 ops/s
# Warmup Iteration  30: 11533595.287 ops/s
Iteration   1: 11562562.932 ops/s
Iteration   2: 11557293.641 ops/s
Iteration   3: 11530353.709 ops/s
Iteration   4: 11386437.901 ops/s
Iteration   5: 11578797.443 ops/s
Iteration   6: 11153845.619 ops/s
Iteration   7: 11578501.108 ops/s
Iteration   8: 11406907.001 ops/s
Iteration   9: 11585413.753 ops/s
Iteration  10: 11536994.049 ops/s
Iteration  11: 11560716.488 ops/s
Iteration  12: 11527753.358 ops/s
Iteration  13: 11579120.691 ops/s
Iteration  14: 11479809.571 ops/s
Iteration  15: 11373148.435 ops/s
Iteration  16: 11524439.734 ops/s
Iteration  17: 11543916.105 ops/s
Iteration  18: 11355794.380 ops/s
Iteration  19: 11550759.500 ops/s
Iteration  20: 11568259.131 ops/s
Iteration  21: 11593162.229 ops/s
Iteration  22: 11557540.757 ops/s
Iteration  23: 11581000.260 ops/s
Iteration  24: 11589723.882 ops/s
Iteration  25: 11567948.689 ops/s
Iteration  26: 11578585.542 ops/s
Iteration  27: 11577777.277 ops/s
Iteration  28: 11566092.833 ops/s
Iteration  29: 11606164.368 ops/s
Iteration  30: 11590060.270 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectAndRejectWith":
  11524962.688 ±(99.9%) 65274.390 ops/s [Average]
  (min, avg, max) = (11153845.619, 11524962.688, 11606164.368), stdev = 97699.641
  CI (99.9%): [11459688.299, 11590237.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  11524962.688 ± 65274.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424604.855 ops/s
# Warmup Iteration   2: 809461.037 ops/s
# Warmup Iteration   3: 888508.241 ops/s
# Warmup Iteration   4: 896378.132 ops/s
# Warmup Iteration   5: 772062.022 ops/s
# Warmup Iteration   6: 865351.150 ops/s
# Warmup Iteration   7: 884338.195 ops/s
# Warmup Iteration   8: 895960.750 ops/s
# Warmup Iteration   9: 893729.480 ops/s
# Warmup Iteration  10: 899904.897 ops/s
# Warmup Iteration  11: 901475.752 ops/s
# Warmup Iteration  12: 903937.970 ops/s
# Warmup Iteration  13: 899862.453 ops/s
# Warmup Iteration  14: 900590.198 ops/s
# Warmup Iteration  15: 901720.260 ops/s
# Warmup Iteration  16: 897130.484 ops/s
# Warmup Iteration  17: 886120.232 ops/s
# Warmup Iteration  18: 901594.831 ops/s
# Warmup Iteration  19: 904465.582 ops/s
# Warmup Iteration  20: 900981.604 ops/s
# Warmup Iteration  21: 891504.477 ops/s
# Warmup Iteration  22: 893826.518 ops/s
# Warmup Iteration  23: 893145.076 ops/s
# Warmup Iteration  24: 904402.951 ops/s
# Warmup Iteration  25: 894966.613 ops/s
# Warmup Iteration  26: 902318.227 ops/s
# Warmup Iteration  27: 904941.191 ops/s
# Warmup Iteration  28: 901586.611 ops/s
# Warmup Iteration  29: 894859.864 ops/s
# Warmup Iteration  30: 899759.938 ops/s
Iteration   1: 903837.951 ops/s
Iteration   2: 900171.095 ops/s
Iteration   3: 898561.631 ops/s
Iteration   4: 888229.506 ops/s
Iteration   5: 900371.739 ops/s
Iteration   6: 905611.347 ops/s
Iteration   7: 895529.315 ops/s
Iteration   8: 904418.270 ops/s
Iteration   9: 890309.160 ops/s
Iteration  10: 906187.189 ops/s
Iteration  11: 902624.830 ops/s
Iteration  12: 901703.204 ops/s
Iteration  13: 900569.330 ops/s
Iteration  14: 907522.940 ops/s
Iteration  15: 856794.002 ops/s
Iteration  16: 898862.169 ops/s
Iteration  17: 905695.233 ops/s
Iteration  18: 901990.271 ops/s
Iteration  19: 904240.999 ops/s
Iteration  20: 904538.461 ops/s
Iteration  21: 904056.248 ops/s
Iteration  22: 905671.975 ops/s
Iteration  23: 903197.438 ops/s
Iteration  24: 904008.275 ops/s
Iteration  25: 906069.646 ops/s
Iteration  26: 903558.500 ops/s
Iteration  27: 901731.601 ops/s
Iteration  28: 875753.512 ops/s
Iteration  29: 900282.929 ops/s
Iteration  30: 898509.724 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectInstancesOf":
  899353.616 ±(99.9%) 6878.104 ops/s [Average]
  (min, avg, max) = (856794.002, 899353.616, 907522.940), stdev = 10294.823
  CI (99.9%): [892475.513, 906231.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  899353.616 ± 6878.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9789040.706 ops/s
# Warmup Iteration   2: 20112378.358 ops/s
# Warmup Iteration   3: 17056658.889 ops/s
# Warmup Iteration   4: 20328033.447 ops/s
# Warmup Iteration   5: 20237447.161 ops/s
# Warmup Iteration   6: 20330906.157 ops/s
# Warmup Iteration   7: 20234963.840 ops/s
# Warmup Iteration   8: 20361680.458 ops/s
# Warmup Iteration   9: 20271955.380 ops/s
# Warmup Iteration  10: 20346152.554 ops/s
# Warmup Iteration  11: 20275946.137 ops/s
# Warmup Iteration  12: 20343852.871 ops/s
# Warmup Iteration  13: 20285649.496 ops/s
# Warmup Iteration  14: 20024124.921 ops/s
# Warmup Iteration  15: 20368848.688 ops/s
# Warmup Iteration  16: 20260950.864 ops/s
# Warmup Iteration  17: 20189140.181 ops/s
# Warmup Iteration  18: 20316209.949 ops/s
# Warmup Iteration  19: 20239612.978 ops/s
# Warmup Iteration  20: 19915073.328 ops/s
# Warmup Iteration  21: 20116893.629 ops/s
# Warmup Iteration  22: 20041221.712 ops/s
# Warmup Iteration  23: 20403711.270 ops/s
# Warmup Iteration  24: 20444197.467 ops/s
# Warmup Iteration  25: 20316263.475 ops/s
# Warmup Iteration  26: 20420570.002 ops/s
# Warmup Iteration  27: 20358179.126 ops/s
# Warmup Iteration  28: 20270527.140 ops/s
# Warmup Iteration  29: 20364578.755 ops/s
# Warmup Iteration  30: 20297596.430 ops/s
Iteration   1: 20379133.559 ops/s
Iteration   2: 20286463.159 ops/s
Iteration   3: 20227707.760 ops/s
Iteration   4: 20311438.940 ops/s
Iteration   5: 20438431.337 ops/s
Iteration   6: 20309294.788 ops/s
Iteration   7: 20459475.107 ops/s
Iteration   8: 20354264.410 ops/s
Iteration   9: 20423658.328 ops/s
Iteration  10: 20386357.552 ops/s
Iteration  11: 20313260.437 ops/s
Iteration  12: 20115748.125 ops/s
Iteration  13: 20339032.165 ops/s
Iteration  14: 20264335.907 ops/s
Iteration  15: 20056169.039 ops/s
Iteration  16: 20395801.013 ops/s
Iteration  17: 20076458.350 ops/s
Iteration  18: 20350082.648 ops/s
Iteration  19: 20400747.235 ops/s
Iteration  20: 20348365.332 ops/s
Iteration  21: 20109900.072 ops/s
Iteration  22: 20402386.657 ops/s
Iteration  23: 20356451.750 ops/s
Iteration  24: 20484346.861 ops/s
Iteration  25: 20316867.072 ops/s
Iteration  26: 20357269.759 ops/s
Iteration  27: 20179975.454 ops/s
Iteration  28: 20293304.888 ops/s
Iteration  29: 20427771.532 ops/s
Iteration  30: 20436043.100 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith":
  20320018.078 ±(99.9%) 76208.500 ops/s [Average]
  (min, avg, max) = (20056169.039, 20320018.078, 20484346.861), stdev = 114065.303
  CI (99.9%): [20243809.578, 20396226.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_selectWith  thrpt   30  20320018.078 ± 76208.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10907801.593 ops/s
# Warmup Iteration   2: 22291004.092 ops/s
# Warmup Iteration   3: 19023835.002 ops/s
# Warmup Iteration   4: 22405307.625 ops/s
# Warmup Iteration   5: 22260217.905 ops/s
# Warmup Iteration   6: 22394757.171 ops/s
# Warmup Iteration   7: 22339060.738 ops/s
# Warmup Iteration   8: 22308682.997 ops/s
# Warmup Iteration   9: 22347012.876 ops/s
# Warmup Iteration  10: 22420025.592 ops/s
# Warmup Iteration  11: 22456156.869 ops/s
# Warmup Iteration  12: 22402397.130 ops/s
# Warmup Iteration  13: 22199729.284 ops/s
# Warmup Iteration  14: 22117122.861 ops/s
# Warmup Iteration  15: 22409099.103 ops/s
# Warmup Iteration  16: 22392567.840 ops/s
# Warmup Iteration  17: 22423074.868 ops/s
# Warmup Iteration  18: 22417056.442 ops/s
# Warmup Iteration  19: 22103512.814 ops/s
# Warmup Iteration  20: 22445400.226 ops/s
# Warmup Iteration  21: 22167908.564 ops/s
# Warmup Iteration  22: 22227640.597 ops/s
# Warmup Iteration  23: 22365433.422 ops/s
# Warmup Iteration  24: 22355323.088 ops/s
# Warmup Iteration  25: 22221419.774 ops/s
# Warmup Iteration  26: 21969348.325 ops/s
# Warmup Iteration  27: 22410863.972 ops/s
# Warmup Iteration  28: 22394636.006 ops/s
# Warmup Iteration  29: 22403926.902 ops/s
# Warmup Iteration  30: 22326839.739 ops/s
Iteration   1: 22501838.927 ops/s
Iteration   2: 22414320.485 ops/s
Iteration   3: 22369912.276 ops/s
Iteration   4: 22406283.255 ops/s
Iteration   5: 22421590.738 ops/s
Iteration   6: 22462733.116 ops/s
Iteration   7: 22418628.401 ops/s
Iteration   8: 22389368.927 ops/s
Iteration   9: 22507069.980 ops/s
Iteration  10: 22347823.969 ops/s
Iteration  11: 22397630.344 ops/s
Iteration  12: 22445819.806 ops/s
Iteration  13: 22398671.242 ops/s
Iteration  14: 22394900.023 ops/s
Iteration  15: 22425121.708 ops/s
Iteration  16: 21660941.304 ops/s
Iteration  17: 22194930.129 ops/s
Iteration  18: 22361643.407 ops/s
Iteration  19: 22027846.954 ops/s
Iteration  20: 21949208.058 ops/s
Iteration  21: 22146832.586 ops/s
Iteration  22: 21957695.771 ops/s
Iteration  23: 22335690.430 ops/s
Iteration  24: 22312676.148 ops/s
Iteration  25: 22213694.565 ops/s
Iteration  26: 22304734.516 ops/s
Iteration  27: 22281435.863 ops/s
Iteration  28: 22270371.185 ops/s
Iteration  29: 22238774.247 ops/s
Iteration  30: 21881888.053 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndex":
  22281335.880 ±(99.9%) 134935.627 ops/s [Average]
  (min, avg, max) = (21660941.304, 22281335.880, 22507069.980), stdev = 201965.309
  CI (99.9%): [22146400.254, 22416271.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  22281335.880 ± 134935.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2215198.732 ops/s
# Warmup Iteration   2: 5454536.888 ops/s
# Warmup Iteration   3: 5505085.603 ops/s
# Warmup Iteration   4: 4526399.597 ops/s
# Warmup Iteration   5: 5458540.991 ops/s
# Warmup Iteration   6: 5508686.749 ops/s
# Warmup Iteration   7: 5445218.748 ops/s
# Warmup Iteration   8: 5524681.779 ops/s
# Warmup Iteration   9: 5467537.852 ops/s
# Warmup Iteration  10: 5439657.379 ops/s
# Warmup Iteration  11: 5510372.044 ops/s
# Warmup Iteration  12: 5518327.342 ops/s
# Warmup Iteration  13: 5511798.278 ops/s
# Warmup Iteration  14: 5503972.990 ops/s
# Warmup Iteration  15: 5503990.599 ops/s
# Warmup Iteration  16: 5501481.050 ops/s
# Warmup Iteration  17: 5512424.672 ops/s
# Warmup Iteration  18: 5518850.963 ops/s
# Warmup Iteration  19: 5508055.091 ops/s
# Warmup Iteration  20: 5522425.447 ops/s
# Warmup Iteration  21: 5449378.642 ops/s
# Warmup Iteration  22: 5509713.441 ops/s
# Warmup Iteration  23: 5483437.676 ops/s
# Warmup Iteration  24: 5513625.367 ops/s
# Warmup Iteration  25: 5510303.742 ops/s
# Warmup Iteration  26: 5506917.374 ops/s
# Warmup Iteration  27: 5507420.413 ops/s
# Warmup Iteration  28: 5499809.308 ops/s
# Warmup Iteration  29: 5468925.541 ops/s
# Warmup Iteration  30: 5501536.824 ops/s
Iteration   1: 5506773.882 ops/s
Iteration   2: 5485015.793 ops/s
Iteration   3: 5435207.472 ops/s
Iteration   4: 5403382.989 ops/s
Iteration   5: 5499112.946 ops/s
Iteration   6: 5402420.239 ops/s
Iteration   7: 5512615.967 ops/s
Iteration   8: 5498632.943 ops/s
Iteration   9: 5509981.869 ops/s
Iteration  10: 5516386.218 ops/s
Iteration  11: 5516814.252 ops/s
Iteration  12: 5518020.378 ops/s
Iteration  13: 5476855.905 ops/s
Iteration  14: 5508138.852 ops/s
Iteration  15: 5530087.325 ops/s
Iteration  16: 5514986.016 ops/s
Iteration  17: 5513390.756 ops/s
Iteration  18: 5513000.052 ops/s
Iteration  19: 5472816.436 ops/s
Iteration  20: 5520475.156 ops/s
Iteration  21: 5526838.106 ops/s
Iteration  22: 5430539.825 ops/s
Iteration  23: 5499184.300 ops/s
Iteration  24: 5490366.064 ops/s
Iteration  25: 5483676.403 ops/s
Iteration  26: 5529587.256 ops/s
Iteration  27: 5511826.808 ops/s
Iteration  28: 5510967.874 ops/s
Iteration  29: 5524894.199 ops/s
Iteration  30: 5379784.259 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  5491392.685 ±(99.9%) 27065.112 ops/s [Average]
  (min, avg, max) = (5379784.259, 5491392.685, 5530087.325), stdev = 40509.789
  CI (99.9%): [5464327.572, 5518457.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  5491392.685 ± 27065.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597032.376 ops/s
# Warmup Iteration   2: 1408043.347 ops/s
# Warmup Iteration   3: 1468718.668 ops/s
# Warmup Iteration   4: 1240196.265 ops/s
# Warmup Iteration   5: 1456309.514 ops/s
# Warmup Iteration   6: 1452434.946 ops/s
# Warmup Iteration   7: 1474509.153 ops/s
# Warmup Iteration   8: 1441065.313 ops/s
# Warmup Iteration   9: 1472803.063 ops/s
# Warmup Iteration  10: 1455728.253 ops/s
# Warmup Iteration  11: 1442938.036 ops/s
# Warmup Iteration  12: 1474671.664 ops/s
# Warmup Iteration  13: 1456044.518 ops/s
# Warmup Iteration  14: 1459778.148 ops/s
# Warmup Iteration  15: 1475063.791 ops/s
# Warmup Iteration  16: 1459908.019 ops/s
# Warmup Iteration  17: 1461079.385 ops/s
# Warmup Iteration  18: 1474148.560 ops/s
# Warmup Iteration  19: 1465039.896 ops/s
# Warmup Iteration  20: 1469935.030 ops/s
# Warmup Iteration  21: 1472627.266 ops/s
# Warmup Iteration  22: 1476171.272 ops/s
# Warmup Iteration  23: 1472747.409 ops/s
# Warmup Iteration  24: 1476681.015 ops/s
# Warmup Iteration  25: 1474819.333 ops/s
# Warmup Iteration  26: 1470393.499 ops/s
# Warmup Iteration  27: 1474309.330 ops/s
# Warmup Iteration  28: 1456454.462 ops/s
# Warmup Iteration  29: 1462082.707 ops/s
# Warmup Iteration  30: 1473330.708 ops/s
Iteration   1: 1470594.836 ops/s
Iteration   2: 1468848.808 ops/s
Iteration   3: 1476647.442 ops/s
Iteration   4: 1472183.460 ops/s
Iteration   5: 1481832.626 ops/s
Iteration   6: 1479277.670 ops/s
Iteration   7: 1467195.230 ops/s
Iteration   8: 1465461.037 ops/s
Iteration   9: 1469743.176 ops/s
Iteration  10: 1464559.035 ops/s
Iteration  11: 1469593.693 ops/s
Iteration  12: 1477490.529 ops/s
Iteration  13: 1470781.366 ops/s
Iteration  14: 1450085.803 ops/s
Iteration  15: 1474000.780 ops/s
Iteration  16: 1451600.376 ops/s
Iteration  17: 1474228.187 ops/s
Iteration  18: 1470570.904 ops/s
Iteration  19: 1475566.319 ops/s
Iteration  20: 1478461.919 ops/s
Iteration  21: 1464292.709 ops/s
Iteration  22: 1471220.785 ops/s
Iteration  23: 1473560.927 ops/s
Iteration  24: 1473363.971 ops/s
Iteration  25: 1477888.200 ops/s
Iteration  26: 1470121.722 ops/s
Iteration  27: 1472435.038 ops/s
Iteration  28: 1452982.247 ops/s
Iteration  29: 1476098.248 ops/s
Iteration  30: 1474236.471 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_selectWith_target":
  1470497.450 ±(99.9%) 5156.121 ops/s [Average]
  (min, avg, max) = (1450085.803, 1470497.450, 1481832.626), stdev = 7717.440
  CI (99.9%): [1465341.329, 1475653.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_selectWith_target  thrpt   30  1470497.450 ± 5156.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59556.965 ops/s
# Warmup Iteration   2: 81248.897 ops/s
# Warmup Iteration   3: 112191.904 ops/s
# Warmup Iteration   4: 112240.028 ops/s
# Warmup Iteration   5: 112149.790 ops/s
# Warmup Iteration   6: 111407.883 ops/s
# Warmup Iteration   7: 112255.095 ops/s
# Warmup Iteration   8: 109414.828 ops/s
# Warmup Iteration   9: 97460.090 ops/s
# Warmup Iteration  10: 110506.620 ops/s
# Warmup Iteration  11: 111249.818 ops/s
# Warmup Iteration  12: 112409.240 ops/s
# Warmup Iteration  13: 111500.387 ops/s
# Warmup Iteration  14: 112096.616 ops/s
# Warmup Iteration  15: 111969.946 ops/s
# Warmup Iteration  16: 111625.126 ops/s
# Warmup Iteration  17: 111428.144 ops/s
# Warmup Iteration  18: 112287.481 ops/s
# Warmup Iteration  19: 112418.073 ops/s
# Warmup Iteration  20: 112361.983 ops/s
# Warmup Iteration  21: 112476.381 ops/s
# Warmup Iteration  22: 112558.213 ops/s
# Warmup Iteration  23: 112172.690 ops/s
# Warmup Iteration  24: 112191.910 ops/s
# Warmup Iteration  25: 112556.529 ops/s
# Warmup Iteration  26: 112334.577 ops/s
# Warmup Iteration  27: 112441.968 ops/s
# Warmup Iteration  28: 111730.276 ops/s
# Warmup Iteration  29: 111977.966 ops/s
# Warmup Iteration  30: 112484.167 ops/s
Iteration   1: 112465.839 ops/s
Iteration   2: 112210.894 ops/s
Iteration   3: 112583.508 ops/s
Iteration   4: 112029.506 ops/s
Iteration   5: 112454.420 ops/s
Iteration   6: 112391.974 ops/s
Iteration   7: 112486.093 ops/s
Iteration   8: 112853.320 ops/s
Iteration   9: 112301.693 ops/s
Iteration  10: 110577.614 ops/s
Iteration  11: 112404.688 ops/s
Iteration  12: 110739.553 ops/s
Iteration  13: 111957.734 ops/s
Iteration  14: 110936.455 ops/s
Iteration  15: 110623.525 ops/s
Iteration  16: 111804.815 ops/s
Iteration  17: 112027.659 ops/s
Iteration  18: 110668.739 ops/s
Iteration  19: 112250.340 ops/s
Iteration  20: 112366.218 ops/s
Iteration  21: 111900.046 ops/s
Iteration  22: 112274.476 ops/s
Iteration  23: 112107.242 ops/s
Iteration  24: 112273.084 ops/s
Iteration  25: 112283.392 ops/s
Iteration  26: 109963.254 ops/s
Iteration  27: 112131.086 ops/s
Iteration  28: 111509.050 ops/s
Iteration  29: 112226.056 ops/s
Iteration  30: 111532.056 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_serialization":
  111877.811 ±(99.9%) 485.444 ops/s [Average]
  (min, avg, max) = (109963.254, 111877.811, 112853.320), stdev = 726.590
  CI (99.9%): [111392.367, 112363.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_serialization  thrpt   30  111877.811 ± 485.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14010812.998 ops/s
# Warmup Iteration   2: 29606001.879 ops/s
# Warmup Iteration   3: 24655026.635 ops/s
# Warmup Iteration   4: 29041338.577 ops/s
# Warmup Iteration   5: 29216897.476 ops/s
# Warmup Iteration   6: 28959069.358 ops/s
# Warmup Iteration   7: 29250461.798 ops/s
# Warmup Iteration   8: 29227655.244 ops/s
# Warmup Iteration   9: 29176624.821 ops/s
# Warmup Iteration  10: 29285954.527 ops/s
# Warmup Iteration  11: 29279281.704 ops/s
# Warmup Iteration  12: 29181406.508 ops/s
# Warmup Iteration  13: 28948442.756 ops/s
# Warmup Iteration  14: 29219534.799 ops/s
# Warmup Iteration  15: 29165922.354 ops/s
# Warmup Iteration  16: 29219833.278 ops/s
# Warmup Iteration  17: 29238907.544 ops/s
# Warmup Iteration  18: 29277167.586 ops/s
# Warmup Iteration  19: 29139474.243 ops/s
# Warmup Iteration  20: 29011285.496 ops/s
# Warmup Iteration  21: 29233641.220 ops/s
# Warmup Iteration  22: 29228553.509 ops/s
# Warmup Iteration  23: 29188342.248 ops/s
# Warmup Iteration  24: 29174509.396 ops/s
# Warmup Iteration  25: 29216045.704 ops/s
# Warmup Iteration  26: 28935917.230 ops/s
# Warmup Iteration  27: 29210734.720 ops/s
# Warmup Iteration  28: 29211744.350 ops/s
# Warmup Iteration  29: 29222677.333 ops/s
# Warmup Iteration  30: 29096718.368 ops/s
Iteration   1: 28597372.838 ops/s
Iteration   2: 29176238.002 ops/s
Iteration   3: 29134829.991 ops/s
Iteration   4: 29208315.800 ops/s
Iteration   5: 29199660.418 ops/s
Iteration   6: 29253999.070 ops/s
Iteration   7: 29065535.259 ops/s
Iteration   8: 29239815.181 ops/s
Iteration   9: 29232343.446 ops/s
Iteration  10: 29254841.552 ops/s
Iteration  11: 29236310.683 ops/s
Iteration  12: 29140423.551 ops/s
Iteration  13: 29372854.709 ops/s
Iteration  14: 28803823.226 ops/s
Iteration  15: 29095408.794 ops/s
Iteration  16: 29293980.283 ops/s
Iteration  17: 29286294.543 ops/s
Iteration  18: 29289758.073 ops/s
Iteration  19: 29321550.532 ops/s
Iteration  20: 29197162.026 ops/s
Iteration  21: 29289195.110 ops/s
Iteration  22: 29292857.787 ops/s
Iteration  23: 29085008.036 ops/s
Iteration  24: 28781033.850 ops/s
Iteration  25: 29227494.517 ops/s
Iteration  26: 28965107.530 ops/s
Iteration  27: 29314717.957 ops/s
Iteration  28: 29114262.517 ops/s
Iteration  29: 29184366.724 ops/s
Iteration  30: 29236303.725 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_set":
  29163028.858 ±(99.9%) 116302.229 ops/s [Average]
  (min, avg, max) = (28597372.838, 29163028.858, 29372854.709), stdev = 174075.714
  CI (99.9%): [29046726.629, 29279331.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_set  thrpt   30  29163028.858 ± 116302.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9105006.721 ops/s
# Warmup Iteration   2: 19753422.316 ops/s
# Warmup Iteration   3: 19214991.473 ops/s
# Warmup Iteration   4: 16190890.504 ops/s
# Warmup Iteration   5: 19332802.923 ops/s
# Warmup Iteration   6: 19289205.932 ops/s
# Warmup Iteration   7: 19290119.427 ops/s
# Warmup Iteration   8: 19429373.251 ops/s
# Warmup Iteration   9: 19335980.851 ops/s
# Warmup Iteration  10: 19321127.506 ops/s
# Warmup Iteration  11: 19427043.840 ops/s
# Warmup Iteration  12: 19235188.948 ops/s
# Warmup Iteration  13: 19449549.573 ops/s
# Warmup Iteration  14: 19347032.903 ops/s
# Warmup Iteration  15: 19196872.511 ops/s
# Warmup Iteration  16: 19360487.125 ops/s
# Warmup Iteration  17: 19263579.994 ops/s
# Warmup Iteration  18: 19365936.829 ops/s
# Warmup Iteration  19: 19386119.965 ops/s
# Warmup Iteration  20: 19448898.488 ops/s
# Warmup Iteration  21: 19418377.500 ops/s
# Warmup Iteration  22: 19189233.415 ops/s
# Warmup Iteration  23: 19240824.957 ops/s
# Warmup Iteration  24: 19245839.035 ops/s
# Warmup Iteration  25: 19281943.906 ops/s
# Warmup Iteration  26: 19405025.856 ops/s
# Warmup Iteration  27: 19379632.445 ops/s
# Warmup Iteration  28: 19408675.068 ops/s
# Warmup Iteration  29: 18996222.906 ops/s
# Warmup Iteration  30: 19422193.173 ops/s
Iteration   1: 19026138.271 ops/s
Iteration   2: 19094523.864 ops/s
Iteration   3: 19420988.019 ops/s
Iteration   4: 19447641.086 ops/s
Iteration   5: 19429900.223 ops/s
Iteration   6: 19155483.821 ops/s
Iteration   7: 19421199.191 ops/s
Iteration   8: 19401026.095 ops/s
Iteration   9: 19376008.212 ops/s
Iteration  10: 19442448.533 ops/s
Iteration  11: 19420171.405 ops/s
Iteration  12: 19149807.179 ops/s
Iteration  13: 19419173.242 ops/s
Iteration  14: 19407643.601 ops/s
Iteration  15: 19321050.994 ops/s
Iteration  16: 19400611.219 ops/s
Iteration  17: 19369762.467 ops/s
Iteration  18: 19272533.871 ops/s
Iteration  19: 19438430.148 ops/s
Iteration  20: 19419962.704 ops/s
Iteration  21: 19111790.987 ops/s
Iteration  22: 19357015.413 ops/s
Iteration  23: 19095862.883 ops/s
Iteration  24: 19379436.574 ops/s
Iteration  25: 19371803.575 ops/s
Iteration  26: 19355763.834 ops/s
Iteration  27: 19360088.199 ops/s
Iteration  28: 19402903.406 ops/s
Iteration  29: 19404770.225 ops/s
Iteration  30: 19370991.053 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sort":
  19334831.010 ±(99.9%) 82636.393 ops/s [Average]
  (min, avg, max) = (19026138.271, 19334831.010, 19447641.086), stdev = 123686.272
  CI (99.9%): [19252194.617, 19417467.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_sort  thrpt   30  19334831.010 ± 82636.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1919820.361 ops/s
# Warmup Iteration   2: 2011789.800 ops/s
# Warmup Iteration   3: 2002561.852 ops/s
# Warmup Iteration   4: 2177152.853 ops/s
# Warmup Iteration   5: 2319677.777 ops/s
# Warmup Iteration   6: 2338776.698 ops/s
# Warmup Iteration   7: 2336925.347 ops/s
# Warmup Iteration   8: 2308056.809 ops/s
# Warmup Iteration   9: 2320877.259 ops/s
# Warmup Iteration  10: 2340673.398 ops/s
# Warmup Iteration  11: 2342460.854 ops/s
# Warmup Iteration  12: 2336694.679 ops/s
# Warmup Iteration  13: 2334606.837 ops/s
# Warmup Iteration  14: 2336210.026 ops/s
# Warmup Iteration  15: 2324965.903 ops/s
# Warmup Iteration  16: 2341891.344 ops/s
# Warmup Iteration  17: 2338412.451 ops/s
# Warmup Iteration  18: 2336858.634 ops/s
# Warmup Iteration  19: 2334649.852 ops/s
# Warmup Iteration  20: 2327049.322 ops/s
# Warmup Iteration  21: 2289136.064 ops/s
# Warmup Iteration  22: 2143675.802 ops/s
# Warmup Iteration  23: 2130853.787 ops/s
# Warmup Iteration  24: 2321364.296 ops/s
# Warmup Iteration  25: 2320580.788 ops/s
# Warmup Iteration  26: 2316086.477 ops/s
# Warmup Iteration  27: 2302635.535 ops/s
# Warmup Iteration  28: 2326904.936 ops/s
# Warmup Iteration  29: 2338391.539 ops/s
# Warmup Iteration  30: 2335585.550 ops/s
Iteration   1: 2338925.818 ops/s
Iteration   2: 2333796.830 ops/s
Iteration   3: 2344546.171 ops/s
Iteration   4: 2336768.351 ops/s
Iteration   5: 2289867.277 ops/s
Iteration   6: 2324727.369 ops/s
Iteration   7: 2343814.308 ops/s
Iteration   8: 2341386.297 ops/s
Iteration   9: 2337994.265 ops/s
Iteration  10: 2274313.736 ops/s
Iteration  11: 2299865.653 ops/s
Iteration  12: 2365818.514 ops/s
Iteration  13: 2360762.254 ops/s
Iteration  14: 2359727.600 ops/s
Iteration  15: 2372900.933 ops/s
Iteration  16: 2371585.753 ops/s
Iteration  17: 2364572.318 ops/s
Iteration  18: 2367597.906 ops/s
Iteration  19: 2373699.405 ops/s
Iteration  20: 2369261.021 ops/s
Iteration  21: 2365354.852 ops/s
Iteration  22: 2369038.057 ops/s
Iteration  23: 2366413.585 ops/s
Iteration  24: 2365084.277 ops/s
Iteration  25: 2367813.595 ops/s
Iteration  26: 2365745.996 ops/s
Iteration  27: 2373123.572 ops/s
Iteration  28: 2370922.420 ops/s
Iteration  29: 2363108.258 ops/s
Iteration  30: 2291312.086 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis":
  2348994.949 ±(99.9%) 18596.387 ops/s [Average]
  (min, avg, max) = (2274313.736, 2348994.949, 2373699.405), stdev = 27834.198
  CI (99.9%): [2330398.563, 2367591.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThis  thrpt   30  2348994.949 ± 18596.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447371.575 ops/s
# Warmup Iteration   2: 514438.707 ops/s
# Warmup Iteration   3: 774960.042 ops/s
# Warmup Iteration   4: 770423.827 ops/s
# Warmup Iteration   5: 774595.462 ops/s
# Warmup Iteration   6: 772787.332 ops/s
# Warmup Iteration   7: 764472.508 ops/s
# Warmup Iteration   8: 773143.407 ops/s
# Warmup Iteration   9: 590113.639 ops/s
# Warmup Iteration  10: 759733.125 ops/s
# Warmup Iteration  11: 775666.550 ops/s
# Warmup Iteration  12: 775981.717 ops/s
# Warmup Iteration  13: 775646.130 ops/s
# Warmup Iteration  14: 769808.561 ops/s
# Warmup Iteration  15: 770299.889 ops/s
# Warmup Iteration  16: 773880.911 ops/s
# Warmup Iteration  17: 774701.403 ops/s
# Warmup Iteration  18: 773479.107 ops/s
# Warmup Iteration  19: 774724.092 ops/s
# Warmup Iteration  20: 775888.996 ops/s
# Warmup Iteration  21: 773771.357 ops/s
# Warmup Iteration  22: 772658.848 ops/s
# Warmup Iteration  23: 774815.462 ops/s
# Warmup Iteration  24: 769336.411 ops/s
# Warmup Iteration  25: 774874.024 ops/s
# Warmup Iteration  26: 776094.086 ops/s
# Warmup Iteration  27: 770875.688 ops/s
# Warmup Iteration  28: 767686.817 ops/s
# Warmup Iteration  29: 775896.574 ops/s
# Warmup Iteration  30: 772249.304 ops/s
Iteration   1: 771954.255 ops/s
Iteration   2: 776271.247 ops/s
Iteration   3: 776249.510 ops/s
Iteration   4: 774218.728 ops/s
Iteration   5: 775931.856 ops/s
Iteration   6: 777230.018 ops/s
Iteration   7: 775141.973 ops/s
Iteration   8: 774770.372 ops/s
Iteration   9: 774906.487 ops/s
Iteration  10: 773801.974 ops/s
Iteration  11: 774404.129 ops/s
Iteration  12: 774360.591 ops/s
Iteration  13: 774314.805 ops/s
Iteration  14: 774039.048 ops/s
Iteration  15: 773376.400 ops/s
Iteration  16: 773977.613 ops/s
Iteration  17: 776902.835 ops/s
Iteration  18: 774951.359 ops/s
Iteration  19: 762181.713 ops/s
Iteration  20: 775310.520 ops/s
Iteration  21: 775177.939 ops/s
Iteration  22: 770074.329 ops/s
Iteration  23: 775987.887 ops/s
Iteration  24: 775574.808 ops/s
Iteration  25: 772904.408 ops/s
Iteration  26: 775446.502 ops/s
Iteration  27: 747638.102 ops/s
Iteration  28: 757225.553 ops/s
Iteration  29: 776437.319 ops/s
Iteration  30: 776095.601 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisBy":
  772895.263 ±(99.9%) 4224.520 ops/s [Average]
  (min, avg, max) = (747638.102, 772895.263, 777230.018), stdev = 6323.064
  CI (99.9%): [768670.742, 777119.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_sortThisBy  thrpt   30  772895.263 ± 4224.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4329424.955 ops/s
# Warmup Iteration   2: 5291958.437 ops/s
# Warmup Iteration   3: 6555590.920 ops/s
# Warmup Iteration   4: 6544164.150 ops/s
# Warmup Iteration   5: 6569590.093 ops/s
# Warmup Iteration   6: 6597262.952 ops/s
# Warmup Iteration   7: 6550190.346 ops/s
# Warmup Iteration   8: 6582109.042 ops/s
# Warmup Iteration   9: 5485552.984 ops/s
# Warmup Iteration  10: 6577541.436 ops/s
# Warmup Iteration  11: 6542465.792 ops/s
# Warmup Iteration  12: 6604746.916 ops/s
# Warmup Iteration  13: 6589330.790 ops/s
# Warmup Iteration  14: 6597854.549 ops/s
# Warmup Iteration  15: 6559715.755 ops/s
# Warmup Iteration  16: 6477809.728 ops/s
# Warmup Iteration  17: 6595847.800 ops/s
# Warmup Iteration  18: 6553031.191 ops/s
# Warmup Iteration  19: 6563009.738 ops/s
# Warmup Iteration  20: 6580521.283 ops/s
# Warmup Iteration  21: 6589290.675 ops/s
# Warmup Iteration  22: 6501803.533 ops/s
# Warmup Iteration  23: 6510773.561 ops/s
# Warmup Iteration  24: 6591848.275 ops/s
# Warmup Iteration  25: 6566093.009 ops/s
# Warmup Iteration  26: 6531806.396 ops/s
# Warmup Iteration  27: 6452911.122 ops/s
# Warmup Iteration  28: 6595977.435 ops/s
# Warmup Iteration  29: 6597191.610 ops/s
# Warmup Iteration  30: 6531736.557 ops/s
Iteration   1: 6576619.685 ops/s
Iteration   2: 6604149.724 ops/s
Iteration   3: 6601225.956 ops/s
Iteration   4: 6587998.672 ops/s
Iteration   5: 6594431.109 ops/s
Iteration   6: 6605881.334 ops/s
Iteration   7: 6562295.058 ops/s
Iteration   8: 6379852.728 ops/s
Iteration   9: 6615777.279 ops/s
Iteration  10: 6598399.915 ops/s
Iteration  11: 6614974.809 ops/s
Iteration  12: 6604256.030 ops/s
Iteration  13: 6599079.476 ops/s
Iteration  14: 6508196.631 ops/s
Iteration  15: 6563999.328 ops/s
Iteration  16: 6596824.324 ops/s
Iteration  17: 6623478.029 ops/s
Iteration  18: 6590073.904 ops/s
Iteration  19: 6568337.906 ops/s
Iteration  20: 6604066.384 ops/s
Iteration  21: 6616738.155 ops/s
Iteration  22: 6586227.889 ops/s
Iteration  23: 6563162.856 ops/s
Iteration  24: 6615436.806 ops/s
Iteration  25: 6603973.254 ops/s
Iteration  26: 6616873.206 ops/s
Iteration  27: 6609896.983 ops/s
Iteration  28: 6566047.476 ops/s
Iteration  29: 6594499.559 ops/s
Iteration  30: 6575210.612 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByBoolean":
  6584932.836 ±(99.9%) 30392.095 ops/s [Average]
  (min, avg, max) = (6379852.728, 6584932.836, 6623478.029), stdev = 45489.460
  CI (99.9%): [6554540.741, 6615324.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  6584932.836 ± 30392.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1069558.060 ops/s
# Warmup Iteration   2: 1130950.401 ops/s
# Warmup Iteration   3: 1158762.588 ops/s
# Warmup Iteration   4: 1158274.546 ops/s
# Warmup Iteration   5: 1179252.851 ops/s
# Warmup Iteration   6: 1289875.189 ops/s
# Warmup Iteration   7: 1304207.782 ops/s
# Warmup Iteration   8: 1308210.299 ops/s
# Warmup Iteration   9: 1306727.484 ops/s
# Warmup Iteration  10: 1293270.714 ops/s
# Warmup Iteration  11: 1292087.821 ops/s
# Warmup Iteration  12: 1288713.122 ops/s
# Warmup Iteration  13: 1290967.782 ops/s
# Warmup Iteration  14: 1291177.451 ops/s
# Warmup Iteration  15: 1310877.480 ops/s
# Warmup Iteration  16: 1313000.579 ops/s
# Warmup Iteration  17: 1295675.058 ops/s
# Warmup Iteration  18: 1309523.204 ops/s
# Warmup Iteration  19: 1295016.408 ops/s
# Warmup Iteration  20: 1312080.307 ops/s
# Warmup Iteration  21: 1306627.158 ops/s
# Warmup Iteration  22: 1305299.191 ops/s
# Warmup Iteration  23: 1296984.661 ops/s
# Warmup Iteration  24: 1281875.495 ops/s
# Warmup Iteration  25: 1292071.481 ops/s
# Warmup Iteration  26: 1306409.977 ops/s
# Warmup Iteration  27: 1315892.966 ops/s
# Warmup Iteration  28: 1312629.285 ops/s
# Warmup Iteration  29: 1300589.809 ops/s
# Warmup Iteration  30: 1310649.132 ops/s
Iteration   1: 1245344.169 ops/s
Iteration   2: 1173142.877 ops/s
Iteration   3: 1174497.152 ops/s
Iteration   4: 1222692.155 ops/s
Iteration   5: 1285520.414 ops/s
Iteration   6: 1301733.491 ops/s
Iteration   7: 1275661.535 ops/s
Iteration   8: 1306625.714 ops/s
Iteration   9: 1305058.473 ops/s
Iteration  10: 1295217.940 ops/s
Iteration  11: 1297228.217 ops/s
Iteration  12: 1285778.022 ops/s
Iteration  13: 1285228.403 ops/s
Iteration  14: 1307530.263 ops/s
Iteration  15: 1302088.413 ops/s
Iteration  16: 1292344.873 ops/s
Iteration  17: 1309778.896 ops/s
Iteration  18: 1303595.371 ops/s
Iteration  19: 1303713.525 ops/s
Iteration  20: 1297682.503 ops/s
Iteration  21: 1306816.003 ops/s
Iteration  22: 1296190.022 ops/s
Iteration  23: 1303664.186 ops/s
Iteration  24: 1305114.139 ops/s
Iteration  25: 1306413.684 ops/s
Iteration  26: 1305999.416 ops/s
Iteration  27: 1292961.875 ops/s
Iteration  28: 1296512.737 ops/s
Iteration  29: 1301889.336 ops/s
Iteration  30: 1279794.639 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByByte":
  1285527.281 ±(99.9%) 23782.989 ops/s [Average]
  (min, avg, max) = (1173142.877, 1285527.281, 1309778.896), stdev = 35597.261
  CI (99.9%): [1261744.292, 1309310.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1285527.281 ± 23782.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1765902.097 ops/s
# Warmup Iteration   2: 1848634.602 ops/s
# Warmup Iteration   3: 1912169.300 ops/s
# Warmup Iteration   4: 2305064.277 ops/s
# Warmup Iteration   5: 2313054.167 ops/s
# Warmup Iteration   6: 2311352.922 ops/s
# Warmup Iteration   7: 2289471.808 ops/s
# Warmup Iteration   8: 2277356.234 ops/s
# Warmup Iteration   9: 2302275.896 ops/s
# Warmup Iteration  10: 2284085.012 ops/s
# Warmup Iteration  11: 2305655.131 ops/s
# Warmup Iteration  12: 2303906.476 ops/s
# Warmup Iteration  13: 2314130.747 ops/s
# Warmup Iteration  14: 2315317.044 ops/s
# Warmup Iteration  15: 2291364.535 ops/s
# Warmup Iteration  16: 2295484.020 ops/s
# Warmup Iteration  17: 2307074.116 ops/s
# Warmup Iteration  18: 2083802.632 ops/s
# Warmup Iteration  19: 2176846.664 ops/s
# Warmup Iteration  20: 2299089.027 ops/s
# Warmup Iteration  21: 2324873.706 ops/s
# Warmup Iteration  22: 2317597.135 ops/s
# Warmup Iteration  23: 2315865.191 ops/s
# Warmup Iteration  24: 2315141.168 ops/s
# Warmup Iteration  25: 2316591.805 ops/s
# Warmup Iteration  26: 2312669.680 ops/s
# Warmup Iteration  27: 2324733.953 ops/s
# Warmup Iteration  28: 2287512.836 ops/s
# Warmup Iteration  29: 2322961.279 ops/s
# Warmup Iteration  30: 2303769.087 ops/s
Iteration   1: 2280017.145 ops/s
Iteration   2: 2317268.330 ops/s
Iteration   3: 2286229.288 ops/s
Iteration   4: 2321725.730 ops/s
Iteration   5: 2318925.942 ops/s
Iteration   6: 2319258.957 ops/s
Iteration   7: 2308651.829 ops/s
Iteration   8: 2318893.575 ops/s
Iteration   9: 2312787.206 ops/s
Iteration  10: 2318205.943 ops/s
Iteration  11: 2313238.067 ops/s
Iteration  12: 2315597.162 ops/s
Iteration  13: 2293082.783 ops/s
Iteration  14: 2289116.543 ops/s
Iteration  15: 2314540.037 ops/s
Iteration  16: 2316799.848 ops/s
Iteration  17: 2222160.296 ops/s
Iteration  18: 2324316.357 ops/s
Iteration  19: 2291360.680 ops/s
Iteration  20: 2320339.696 ops/s
Iteration  21: 2317371.277 ops/s
Iteration  22: 2311494.479 ops/s
Iteration  23: 2324089.251 ops/s
Iteration  24: 2323345.968 ops/s
Iteration  25: 2270848.966 ops/s
Iteration  26: 2318299.686 ops/s
Iteration  27: 2317935.484 ops/s
Iteration  28: 2189798.807 ops/s
Iteration  29: 2317873.795 ops/s
Iteration  30: 2323658.555 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByChar":
  2303907.723 ±(99.9%) 20334.283 ops/s [Average]
  (min, avg, max) = (2189798.807, 2303907.723, 2324316.357), stdev = 30435.401
  CI (99.9%): [2283573.439, 2324242.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByChar  thrpt   30  2303907.723 ± 20334.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283234.071 ops/s
# Warmup Iteration   2: 450072.920 ops/s
# Warmup Iteration   3: 530352.322 ops/s
# Warmup Iteration   4: 534941.261 ops/s
# Warmup Iteration   5: 534697.453 ops/s
# Warmup Iteration   6: 455628.053 ops/s
# Warmup Iteration   7: 513669.095 ops/s
# Warmup Iteration   8: 536552.137 ops/s
# Warmup Iteration   9: 528995.463 ops/s
# Warmup Iteration  10: 535904.460 ops/s
# Warmup Iteration  11: 531663.285 ops/s
# Warmup Iteration  12: 534510.034 ops/s
# Warmup Iteration  13: 535389.361 ops/s
# Warmup Iteration  14: 531161.511 ops/s
# Warmup Iteration  15: 535200.531 ops/s
# Warmup Iteration  16: 531965.231 ops/s
# Warmup Iteration  17: 531933.653 ops/s
# Warmup Iteration  18: 534272.232 ops/s
# Warmup Iteration  19: 534551.058 ops/s
# Warmup Iteration  20: 532684.041 ops/s
# Warmup Iteration  21: 533243.938 ops/s
# Warmup Iteration  22: 535852.292 ops/s
# Warmup Iteration  23: 532191.337 ops/s
# Warmup Iteration  24: 534526.723 ops/s
# Warmup Iteration  25: 533961.698 ops/s
# Warmup Iteration  26: 534783.066 ops/s
# Warmup Iteration  27: 531979.741 ops/s
# Warmup Iteration  28: 535919.723 ops/s
# Warmup Iteration  29: 532196.233 ops/s
# Warmup Iteration  30: 534815.912 ops/s
Iteration   1: 530327.592 ops/s
Iteration   2: 536439.105 ops/s
Iteration   3: 534511.870 ops/s
Iteration   4: 534263.129 ops/s
Iteration   5: 535485.464 ops/s
Iteration   6: 527364.804 ops/s
Iteration   7: 534921.139 ops/s
Iteration   8: 536382.162 ops/s
Iteration   9: 535783.318 ops/s
Iteration  10: 516937.832 ops/s
Iteration  11: 534808.551 ops/s
Iteration  12: 537532.028 ops/s
Iteration  13: 536177.318 ops/s
Iteration  14: 535312.685 ops/s
Iteration  15: 535012.160 ops/s
Iteration  16: 535557.388 ops/s
Iteration  17: 535999.983 ops/s
Iteration  18: 536503.273 ops/s
Iteration  19: 526739.243 ops/s
Iteration  20: 535170.051 ops/s
Iteration  21: 532501.453 ops/s
Iteration  22: 534074.000 ops/s
Iteration  23: 535889.590 ops/s
Iteration  24: 532518.393 ops/s
Iteration  25: 534837.046 ops/s
Iteration  26: 533925.676 ops/s
Iteration  27: 535053.469 ops/s
Iteration  28: 536280.368 ops/s
Iteration  29: 536844.098 ops/s
Iteration  30: 535087.281 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByDouble":
  533941.349 ±(99.9%) 2713.655 ops/s [Average]
  (min, avg, max) = (516937.832, 533941.349, 537532.028), stdev = 4061.671
  CI (99.9%): [531227.694, 536655.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  533941.349 ± 2713.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283142.611 ops/s
# Warmup Iteration   2: 449698.874 ops/s
# Warmup Iteration   3: 527588.953 ops/s
# Warmup Iteration   4: 531918.431 ops/s
# Warmup Iteration   5: 533110.623 ops/s
# Warmup Iteration   6: 455535.031 ops/s
# Warmup Iteration   7: 509413.233 ops/s
# Warmup Iteration   8: 529525.229 ops/s
# Warmup Iteration   9: 531030.310 ops/s
# Warmup Iteration  10: 534058.527 ops/s
# Warmup Iteration  11: 528275.946 ops/s
# Warmup Iteration  12: 531762.556 ops/s
# Warmup Iteration  13: 534039.725 ops/s
# Warmup Iteration  14: 533855.719 ops/s
# Warmup Iteration  15: 534732.035 ops/s
# Warmup Iteration  16: 532695.695 ops/s
# Warmup Iteration  17: 523184.075 ops/s
# Warmup Iteration  18: 526225.465 ops/s
# Warmup Iteration  19: 517543.426 ops/s
# Warmup Iteration  20: 525374.042 ops/s
# Warmup Iteration  21: 525746.705 ops/s
# Warmup Iteration  22: 525695.094 ops/s
# Warmup Iteration  23: 525798.014 ops/s
# Warmup Iteration  24: 525929.803 ops/s
# Warmup Iteration  25: 525889.505 ops/s
# Warmup Iteration  26: 523647.910 ops/s
# Warmup Iteration  27: 525847.941 ops/s
# Warmup Iteration  28: 524570.188 ops/s
# Warmup Iteration  29: 525243.275 ops/s
# Warmup Iteration  30: 525466.575 ops/s
Iteration   1: 523489.835 ops/s
Iteration   2: 517450.185 ops/s
Iteration   3: 527672.315 ops/s
Iteration   4: 525778.269 ops/s
Iteration   5: 526813.314 ops/s
Iteration   6: 518011.766 ops/s
Iteration   7: 524828.092 ops/s
Iteration   8: 526530.936 ops/s
Iteration   9: 525895.704 ops/s
Iteration  10: 520798.260 ops/s
Iteration  11: 526345.571 ops/s
Iteration  12: 524338.747 ops/s
Iteration  13: 523826.628 ops/s
Iteration  14: 515769.907 ops/s
Iteration  15: 522523.121 ops/s
Iteration  16: 525753.748 ops/s
Iteration  17: 526778.725 ops/s
Iteration  18: 521859.117 ops/s
Iteration  19: 524618.858 ops/s
Iteration  20: 523812.534 ops/s
Iteration  21: 523029.673 ops/s
Iteration  22: 521645.869 ops/s
Iteration  23: 526400.685 ops/s
Iteration  24: 524945.570 ops/s
Iteration  25: 524090.082 ops/s
Iteration  26: 522927.942 ops/s
Iteration  27: 527196.777 ops/s
Iteration  28: 526502.326 ops/s
Iteration  29: 522344.416 ops/s
Iteration  30: 525542.108 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByFloat":
  523917.369 ±(99.9%) 1967.807 ops/s [Average]
  (min, avg, max) = (515769.907, 523917.369, 527672.315), stdev = 2945.320
  CI (99.9%): [521949.563, 525885.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  523917.369 ± 1967.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1091667.142 ops/s
# Warmup Iteration   2: 1131536.505 ops/s
# Warmup Iteration   3: 1156382.660 ops/s
# Warmup Iteration   4: 1161363.727 ops/s
# Warmup Iteration   5: 1170861.644 ops/s
# Warmup Iteration   6: 1318647.867 ops/s
# Warmup Iteration   7: 1313020.862 ops/s
# Warmup Iteration   8: 1308405.997 ops/s
# Warmup Iteration   9: 1298181.629 ops/s
# Warmup Iteration  10: 1295399.998 ops/s
# Warmup Iteration  11: 1302249.293 ops/s
# Warmup Iteration  12: 1307618.407 ops/s
# Warmup Iteration  13: 1310516.824 ops/s
# Warmup Iteration  14: 1306257.817 ops/s
# Warmup Iteration  15: 1309886.286 ops/s
# Warmup Iteration  16: 1297745.861 ops/s
# Warmup Iteration  17: 1310649.721 ops/s
# Warmup Iteration  18: 1306881.777 ops/s
# Warmup Iteration  19: 1296168.393 ops/s
# Warmup Iteration  20: 1299292.945 ops/s
# Warmup Iteration  21: 1307723.493 ops/s
# Warmup Iteration  22: 1295535.399 ops/s
# Warmup Iteration  23: 1307370.797 ops/s
# Warmup Iteration  24: 1310725.883 ops/s
# Warmup Iteration  25: 1305507.402 ops/s
# Warmup Iteration  26: 1298283.001 ops/s
# Warmup Iteration  27: 1308379.860 ops/s
# Warmup Iteration  28: 1305853.185 ops/s
# Warmup Iteration  29: 1311819.272 ops/s
# Warmup Iteration  30: 1298381.085 ops/s
Iteration   1: 1207664.761 ops/s
Iteration   2: 1165890.422 ops/s
Iteration   3: 1166395.600 ops/s
Iteration   4: 1200777.862 ops/s
Iteration   5: 1300052.277 ops/s
Iteration   6: 1303067.680 ops/s
Iteration   7: 1307736.241 ops/s
Iteration   8: 1308509.030 ops/s
Iteration   9: 1305006.603 ops/s
Iteration  10: 1303625.573 ops/s
Iteration  11: 1309053.599 ops/s
Iteration  12: 1289219.989 ops/s
Iteration  13: 1303011.974 ops/s
Iteration  14: 1284239.118 ops/s
Iteration  15: 1297557.994 ops/s
Iteration  16: 1303279.240 ops/s
Iteration  17: 1300946.656 ops/s
Iteration  18: 1302850.584 ops/s
Iteration  19: 1285831.332 ops/s
Iteration  20: 1302150.545 ops/s
Iteration  21: 1281377.537 ops/s
Iteration  22: 1299643.946 ops/s
Iteration  23: 1302003.145 ops/s
Iteration  24: 1302301.684 ops/s
Iteration  25: 1291112.146 ops/s
Iteration  26: 1305298.921 ops/s
Iteration  27: 1302968.892 ops/s
Iteration  28: 1278667.542 ops/s
Iteration  29: 1301618.397 ops/s
Iteration  30: 1305102.126 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByInt":
  1283898.714 ±(99.9%) 27252.436 ops/s [Average]
  (min, avg, max) = (1165890.422, 1283898.714, 1309053.599), stdev = 40790.166
  CI (99.9%): [1256646.278, 1311151.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1283898.714 ± 27252.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1070391.217 ops/s
# Warmup Iteration   2: 1129965.868 ops/s
# Warmup Iteration   3: 1148113.210 ops/s
# Warmup Iteration   4: 1146869.336 ops/s
# Warmup Iteration   5: 1160213.575 ops/s
# Warmup Iteration   6: 1285633.961 ops/s
# Warmup Iteration   7: 1287543.150 ops/s
# Warmup Iteration   8: 1280049.828 ops/s
# Warmup Iteration   9: 1285764.852 ops/s
# Warmup Iteration  10: 1274734.721 ops/s
# Warmup Iteration  11: 1274689.728 ops/s
# Warmup Iteration  12: 1287362.168 ops/s
# Warmup Iteration  13: 1271243.524 ops/s
# Warmup Iteration  14: 1281349.157 ops/s
# Warmup Iteration  15: 1288710.009 ops/s
# Warmup Iteration  16: 1286640.484 ops/s
# Warmup Iteration  17: 1284378.086 ops/s
# Warmup Iteration  18: 1286593.219 ops/s
# Warmup Iteration  19: 1287988.982 ops/s
# Warmup Iteration  20: 1276272.267 ops/s
# Warmup Iteration  21: 1275339.893 ops/s
# Warmup Iteration  22: 1278294.996 ops/s
# Warmup Iteration  23: 1284167.509 ops/s
# Warmup Iteration  24: 1285426.716 ops/s
# Warmup Iteration  25: 1273478.938 ops/s
# Warmup Iteration  26: 1273461.427 ops/s
# Warmup Iteration  27: 1287562.621 ops/s
# Warmup Iteration  28: 1277782.911 ops/s
# Warmup Iteration  29: 1287372.791 ops/s
# Warmup Iteration  30: 1287511.679 ops/s
Iteration   1: 1279823.778 ops/s
Iteration   2: 1181056.433 ops/s
Iteration   3: 1151399.367 ops/s
Iteration   4: 1152531.856 ops/s
Iteration   5: 1212433.691 ops/s
Iteration   6: 1288065.935 ops/s
Iteration   7: 1291905.612 ops/s
Iteration   8: 1287736.160 ops/s
Iteration   9: 1290208.193 ops/s
Iteration  10: 1294912.290 ops/s
Iteration  11: 1266931.301 ops/s
Iteration  12: 1288795.683 ops/s
Iteration  13: 1271425.930 ops/s
Iteration  14: 1285579.877 ops/s
Iteration  15: 1291340.910 ops/s
Iteration  16: 1289613.677 ops/s
Iteration  17: 1288661.479 ops/s
Iteration  18: 1290774.743 ops/s
Iteration  19: 1286538.064 ops/s
Iteration  20: 1287511.944 ops/s
Iteration  21: 1285246.295 ops/s
Iteration  22: 1287563.711 ops/s
Iteration  23: 1285325.072 ops/s
Iteration  24: 1267474.648 ops/s
Iteration  25: 1287764.705 ops/s
Iteration  26: 1286865.383 ops/s
Iteration  27: 1282395.582 ops/s
Iteration  28: 1288807.223 ops/s
Iteration  29: 1263578.741 ops/s
Iteration  30: 1280546.818 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByLong":
  1269760.503 ±(99.9%) 26662.219 ops/s [Average]
  (min, avg, max) = (1151399.367, 1269760.503, 1294912.290), stdev = 39906.758
  CI (99.9%): [1243098.284, 1296422.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1269760.503 ± 26662.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1144515.899 ops/s
# Warmup Iteration   2: 1211853.402 ops/s
# Warmup Iteration   3: 1213413.322 ops/s
# Warmup Iteration   4: 1213438.435 ops/s
# Warmup Iteration   5: 1215299.698 ops/s
# Warmup Iteration   6: 1317964.275 ops/s
# Warmup Iteration   7: 1360751.087 ops/s
# Warmup Iteration   8: 1358390.561 ops/s
# Warmup Iteration   9: 1359962.242 ops/s
# Warmup Iteration  10: 1357375.201 ops/s
# Warmup Iteration  11: 1357157.854 ops/s
# Warmup Iteration  12: 1349858.591 ops/s
# Warmup Iteration  13: 1359139.754 ops/s
# Warmup Iteration  14: 1358752.604 ops/s
# Warmup Iteration  15: 1338912.239 ops/s
# Warmup Iteration  16: 1355152.507 ops/s
# Warmup Iteration  17: 1359857.796 ops/s
# Warmup Iteration  18: 1360861.514 ops/s
# Warmup Iteration  19: 1358568.513 ops/s
# Warmup Iteration  20: 1357751.625 ops/s
# Warmup Iteration  21: 1359554.399 ops/s
# Warmup Iteration  22: 1358639.177 ops/s
# Warmup Iteration  23: 1351638.215 ops/s
# Warmup Iteration  24: 1360031.427 ops/s
# Warmup Iteration  25: 1360353.366 ops/s
# Warmup Iteration  26: 1343834.439 ops/s
# Warmup Iteration  27: 1356657.729 ops/s
# Warmup Iteration  28: 1347353.434 ops/s
# Warmup Iteration  29: 1357342.654 ops/s
# Warmup Iteration  30: 1360635.051 ops/s
Iteration   1: 1357919.578 ops/s
Iteration   2: 1360823.125 ops/s
Iteration   3: 1312871.015 ops/s
Iteration   4: 1359425.481 ops/s
Iteration   5: 1336869.002 ops/s
Iteration   6: 1342505.020 ops/s
Iteration   7: 1265159.442 ops/s
Iteration   8: 1228485.494 ops/s
Iteration   9: 1232984.364 ops/s
Iteration  10: 1265870.552 ops/s
Iteration  11: 1358675.000 ops/s
Iteration  12: 1361926.436 ops/s
Iteration  13: 1337309.947 ops/s
Iteration  14: 1354946.163 ops/s
Iteration  15: 1365054.944 ops/s
Iteration  16: 1361735.432 ops/s
Iteration  17: 1354621.665 ops/s
Iteration  18: 1334240.823 ops/s
Iteration  19: 1343167.057 ops/s
Iteration  20: 1338939.148 ops/s
Iteration  21: 1362009.488 ops/s
Iteration  22: 1330549.172 ops/s
Iteration  23: 1359364.197 ops/s
Iteration  24: 1357554.706 ops/s
Iteration  25: 1357293.372 ops/s
Iteration  26: 1362334.571 ops/s
Iteration  27: 1363012.458 ops/s
Iteration  28: 1361895.060 ops/s
Iteration  29: 1358637.656 ops/s
Iteration  30: 1363188.165 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisByShort":
  1338312.285 ±(99.9%) 25771.599 ops/s [Average]
  (min, avg, max) = (1228485.494, 1338312.285, 1365054.944), stdev = 38573.718
  CI (99.9%): [1312540.686, 1364083.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1338312.285 ± 25771.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7582587.275 ops/s
# Warmup Iteration   2: 8802317.440 ops/s
# Warmup Iteration   3: 10943620.049 ops/s
# Warmup Iteration   4: 10915556.373 ops/s
# Warmup Iteration   5: 11018158.625 ops/s
# Warmup Iteration   6: 11009327.037 ops/s
# Warmup Iteration   7: 11022379.715 ops/s
# Warmup Iteration   8: 11015092.337 ops/s
# Warmup Iteration   9: 10847727.510 ops/s
# Warmup Iteration  10: 9304575.364 ops/s
# Warmup Iteration  11: 10834158.607 ops/s
# Warmup Iteration  12: 10988871.948 ops/s
# Warmup Iteration  13: 11067963.309 ops/s
# Warmup Iteration  14: 11039980.026 ops/s
# Warmup Iteration  15: 10998148.815 ops/s
# Warmup Iteration  16: 10991141.532 ops/s
# Warmup Iteration  17: 11017886.417 ops/s
# Warmup Iteration  18: 11021490.858 ops/s
# Warmup Iteration  19: 10955841.490 ops/s
# Warmup Iteration  20: 10855995.618 ops/s
# Warmup Iteration  21: 10999535.567 ops/s
# Warmup Iteration  22: 10996076.454 ops/s
# Warmup Iteration  23: 10910806.540 ops/s
# Warmup Iteration  24: 10837513.125 ops/s
# Warmup Iteration  25: 10968843.552 ops/s
# Warmup Iteration  26: 10938643.175 ops/s
# Warmup Iteration  27: 10901516.214 ops/s
# Warmup Iteration  28: 11004116.711 ops/s
# Warmup Iteration  29: 10974839.857 ops/s
# Warmup Iteration  30: 10903116.561 ops/s
Iteration   1: 11017212.099 ops/s
Iteration   2: 10939077.704 ops/s
Iteration   3: 11015451.259 ops/s
Iteration   4: 11030443.685 ops/s
Iteration   5: 10768113.863 ops/s
Iteration   6: 11041321.372 ops/s
Iteration   7: 11002291.058 ops/s
Iteration   8: 10999721.898 ops/s
Iteration   9: 11023824.760 ops/s
Iteration  10: 10960731.044 ops/s
Iteration  11: 11038903.139 ops/s
Iteration  12: 10968548.470 ops/s
Iteration  13: 10958062.422 ops/s
Iteration  14: 10972238.326 ops/s
Iteration  15: 10767653.654 ops/s
Iteration  16: 10986858.418 ops/s
Iteration  17: 10998836.726 ops/s
Iteration  18: 10986267.152 ops/s
Iteration  19: 10982132.625 ops/s
Iteration  20: 11017465.688 ops/s
Iteration  21: 10987720.569 ops/s
Iteration  22: 10970321.239 ops/s
Iteration  23: 10997171.366 ops/s
Iteration  24: 10990223.029 ops/s
Iteration  25: 10766087.075 ops/s
Iteration  26: 10981801.799 ops/s
Iteration  27: 10967550.715 ops/s
Iteration  28: 10943594.792 ops/s
Iteration  29: 11022810.220 ops/s
Iteration  30: 11013409.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  10970528.193 ±(99.9%) 49288.426 ops/s [Average]
  (min, avg, max) = (10766087.075, 10970528.193, 11041321.372), stdev = 73772.601
  CI (99.9%): [10921239.767, 11019816.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  10970528.193 ± 49288.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6563027.649 ops/s
# Warmup Iteration   2: 8212259.936 ops/s
# Warmup Iteration   3: 10291736.997 ops/s
# Warmup Iteration   4: 10359281.644 ops/s
# Warmup Iteration   5: 10410872.135 ops/s
# Warmup Iteration   6: 10410905.424 ops/s
# Warmup Iteration   7: 10290459.054 ops/s
# Warmup Iteration   8: 8689885.810 ops/s
# Warmup Iteration   9: 10322412.003 ops/s
# Warmup Iteration  10: 10394382.889 ops/s
# Warmup Iteration  11: 10380954.758 ops/s
# Warmup Iteration  12: 10386942.348 ops/s
# Warmup Iteration  13: 10306942.811 ops/s
# Warmup Iteration  14: 10394051.938 ops/s
# Warmup Iteration  15: 10198120.447 ops/s
# Warmup Iteration  16: 10221492.072 ops/s
# Warmup Iteration  17: 10288188.405 ops/s
# Warmup Iteration  18: 10303916.724 ops/s
# Warmup Iteration  19: 10254098.042 ops/s
# Warmup Iteration  20: 10313527.773 ops/s
# Warmup Iteration  21: 10239890.466 ops/s
# Warmup Iteration  22: 10191177.857 ops/s
# Warmup Iteration  23: 10210052.450 ops/s
# Warmup Iteration  24: 10241233.286 ops/s
# Warmup Iteration  25: 10127389.089 ops/s
# Warmup Iteration  26: 10284885.387 ops/s
# Warmup Iteration  27: 10166849.272 ops/s
# Warmup Iteration  28: 10314373.573 ops/s
# Warmup Iteration  29: 10258227.021 ops/s
# Warmup Iteration  30: 10295289.512 ops/s
Iteration   1: 10300775.686 ops/s
Iteration   2: 10112885.456 ops/s
Iteration   3: 10261318.924 ops/s
Iteration   4: 10269972.786 ops/s
Iteration   5: 10256285.436 ops/s
Iteration   6: 10264842.815 ops/s
Iteration   7: 10133078.021 ops/s
Iteration   8: 10169396.621 ops/s
Iteration   9: 10272995.029 ops/s
Iteration  10: 10114411.100 ops/s
Iteration  11: 10226204.511 ops/s
Iteration  12: 10292258.624 ops/s
Iteration  13: 10282691.099 ops/s
Iteration  14: 10280871.871 ops/s
Iteration  15: 10305950.531 ops/s
Iteration  16: 10311953.564 ops/s
Iteration  17: 10265044.375 ops/s
Iteration  18: 10273133.915 ops/s
Iteration  19: 10280284.860 ops/s
Iteration  20: 10305992.128 ops/s
Iteration  21: 10282721.283 ops/s
Iteration  22: 10246480.074 ops/s
Iteration  23: 10326943.713 ops/s
Iteration  24: 10259346.351 ops/s
Iteration  25: 10289671.873 ops/s
Iteration  26: 10240063.257 ops/s
Iteration  27: 10292017.457 ops/s
Iteration  28: 10315899.926 ops/s
Iteration  29: 10266057.956 ops/s
Iteration  30: 10318185.388 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  10260591.154 ±(99.9%) 38000.510 ops/s [Average]
  (min, avg, max) = (10112885.456, 10260591.154, 10326943.713), stdev = 56877.378
  CI (99.9%): [10222590.645, 10298591.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  10260591.154 ± 38000.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5709.116 ops/s
# Warmup Iteration   2: 6202.988 ops/s
# Warmup Iteration   3: 6200.181 ops/s
# Warmup Iteration   4: 6201.393 ops/s
# Warmup Iteration   5: 6744.785 ops/s
# Warmup Iteration   6: 7350.445 ops/s
# Warmup Iteration   7: 7283.903 ops/s
# Warmup Iteration   8: 7337.510 ops/s
# Warmup Iteration   9: 7327.423 ops/s
# Warmup Iteration  10: 7357.241 ops/s
# Warmup Iteration  11: 7301.775 ops/s
# Warmup Iteration  12: 7222.513 ops/s
# Warmup Iteration  13: 7285.876 ops/s
# Warmup Iteration  14: 7327.077 ops/s
# Warmup Iteration  15: 7327.353 ops/s
# Warmup Iteration  16: 7340.339 ops/s
# Warmup Iteration  17: 7223.601 ops/s
# Warmup Iteration  18: 7347.371 ops/s
# Warmup Iteration  19: 7299.032 ops/s
# Warmup Iteration  20: 7325.915 ops/s
# Warmup Iteration  21: 7322.660 ops/s
# Warmup Iteration  22: 7324.194 ops/s
# Warmup Iteration  23: 7248.893 ops/s
# Warmup Iteration  24: 7318.486 ops/s
# Warmup Iteration  25: 7340.170 ops/s
# Warmup Iteration  26: 7264.234 ops/s
# Warmup Iteration  27: 6912.057 ops/s
# Warmup Iteration  28: 6681.290 ops/s
# Warmup Iteration  29: 7308.458 ops/s
# Warmup Iteration  30: 7347.439 ops/s
Iteration   1: 7354.221 ops/s
Iteration   2: 7319.635 ops/s
Iteration   3: 7335.935 ops/s
Iteration   4: 7251.417 ops/s
Iteration   5: 7331.596 ops/s
Iteration   6: 7330.481 ops/s
Iteration   7: 7347.384 ops/s
Iteration   8: 7303.121 ops/s
Iteration   9: 7340.505 ops/s
Iteration  10: 7337.627 ops/s
Iteration  11: 7337.235 ops/s
Iteration  12: 7304.584 ops/s
Iteration  13: 7319.335 ops/s
Iteration  14: 7312.786 ops/s
Iteration  15: 7347.681 ops/s
Iteration  16: 7333.218 ops/s
Iteration  17: 7304.012 ops/s
Iteration  18: 7338.540 ops/s
Iteration  19: 7323.602 ops/s
Iteration  20: 7327.365 ops/s
Iteration  21: 7343.089 ops/s
Iteration  22: 7324.609 ops/s
Iteration  23: 7340.753 ops/s
Iteration  24: 7312.080 ops/s
Iteration  25: 7348.410 ops/s
Iteration  26: 7341.974 ops/s
Iteration  27: 7218.445 ops/s
Iteration  28: 7212.184 ops/s
Iteration  29: 7348.464 ops/s
Iteration  30: 7338.261 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_large":
  7320.952 ±(99.9%) 23.450 ops/s [Average]
  (min, avg, max) = (7212.184, 7320.952, 7354.221), stdev = 35.099
  CI (99.9%): [7297.502, 7344.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt     Score    Error  Units
FastListTest._Benchmark.benchmark_sortThis_large  thrpt   30  7320.952 ± 23.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6288252.280 ops/s
# Warmup Iteration   2: 9492728.371 ops/s
# Warmup Iteration   3: 11201574.745 ops/s
# Warmup Iteration   4: 11202213.027 ops/s
# Warmup Iteration   5: 11162738.443 ops/s
# Warmup Iteration   6: 10218680.793 ops/s
# Warmup Iteration   7: 10439992.146 ops/s
# Warmup Iteration   8: 11272378.606 ops/s
# Warmup Iteration   9: 11217649.431 ops/s
# Warmup Iteration  10: 11276730.157 ops/s
# Warmup Iteration  11: 11288171.745 ops/s
# Warmup Iteration  12: 11272586.747 ops/s
# Warmup Iteration  13: 11325728.305 ops/s
# Warmup Iteration  14: 11283526.734 ops/s
# Warmup Iteration  15: 11294588.422 ops/s
# Warmup Iteration  16: 11294582.516 ops/s
# Warmup Iteration  17: 11259178.800 ops/s
# Warmup Iteration  18: 11273137.500 ops/s
# Warmup Iteration  19: 11246925.607 ops/s
# Warmup Iteration  20: 11218913.426 ops/s
# Warmup Iteration  21: 11194702.006 ops/s
# Warmup Iteration  22: 11210229.652 ops/s
# Warmup Iteration  23: 11282593.128 ops/s
# Warmup Iteration  24: 11252902.252 ops/s
# Warmup Iteration  25: 11283133.238 ops/s
# Warmup Iteration  26: 11213202.941 ops/s
# Warmup Iteration  27: 11262237.878 ops/s
# Warmup Iteration  28: 11291459.613 ops/s
# Warmup Iteration  29: 11264713.102 ops/s
# Warmup Iteration  30: 11288627.344 ops/s
Iteration   1: 11312343.257 ops/s
Iteration   2: 11160053.966 ops/s
Iteration   3: 11272967.954 ops/s
Iteration   4: 11313403.232 ops/s
Iteration   5: 11290999.044 ops/s
Iteration   6: 11257485.253 ops/s
Iteration   7: 11324799.775 ops/s
Iteration   8: 11265790.319 ops/s
Iteration   9: 11300879.724 ops/s
Iteration  10: 11292625.992 ops/s
Iteration  11: 11306853.170 ops/s
Iteration  12: 11043970.614 ops/s
Iteration  13: 11270957.085 ops/s
Iteration  14: 11092738.688 ops/s
Iteration  15: 11277874.838 ops/s
Iteration  16: 11271994.023 ops/s
Iteration  17: 11081734.023 ops/s
Iteration  18: 11225025.088 ops/s
Iteration  19: 11314098.587 ops/s
Iteration  20: 11271199.393 ops/s
Iteration  21: 11285025.094 ops/s
Iteration  22: 11276847.120 ops/s
Iteration  23: 11290567.662 ops/s
Iteration  24: 11207070.085 ops/s
Iteration  25: 11186343.304 ops/s
Iteration  26: 11121885.401 ops/s
Iteration  27: 11311395.767 ops/s
Iteration  28: 11289953.793 ops/s
Iteration  29: 11315027.038 ops/s
Iteration  30: 11286997.649 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_small":
  11250630.231 ±(99.9%) 51299.390 ops/s [Average]
  (min, avg, max) = (11043970.614, 11250630.231, 11324799.775), stdev = 76782.518
  CI (99.9%): [11199330.841, 11301929.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_sortThis_small  thrpt   30  11250630.231 ± 51299.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1677197.942 ops/s
# Warmup Iteration   2: 1757858.120 ops/s
# Warmup Iteration   3: 1771639.388 ops/s
# Warmup Iteration   4: 1775520.656 ops/s
# Warmup Iteration   5: 2033744.293 ops/s
# Warmup Iteration   6: 2046468.897 ops/s
# Warmup Iteration   7: 2039018.847 ops/s
# Warmup Iteration   8: 2030973.913 ops/s
# Warmup Iteration   9: 2040393.817 ops/s
# Warmup Iteration  10: 2040709.269 ops/s
# Warmup Iteration  11: 2018591.215 ops/s
# Warmup Iteration  12: 2039378.844 ops/s
# Warmup Iteration  13: 2042784.556 ops/s
# Warmup Iteration  14: 2037858.528 ops/s
# Warmup Iteration  15: 2022886.059 ops/s
# Warmup Iteration  16: 2039098.196 ops/s
# Warmup Iteration  17: 1969084.464 ops/s
# Warmup Iteration  18: 2015243.101 ops/s
# Warmup Iteration  19: 2032200.869 ops/s
# Warmup Iteration  20: 2033708.575 ops/s
# Warmup Iteration  21: 2023924.926 ops/s
# Warmup Iteration  22: 2032376.947 ops/s
# Warmup Iteration  23: 2042400.329 ops/s
# Warmup Iteration  24: 2023503.785 ops/s
# Warmup Iteration  25: 1909688.760 ops/s
# Warmup Iteration  26: 1808232.429 ops/s
# Warmup Iteration  27: 1999599.877 ops/s
# Warmup Iteration  28: 2038572.358 ops/s
# Warmup Iteration  29: 2053953.768 ops/s
# Warmup Iteration  30: 2051752.136 ops/s
Iteration   1: 2047091.869 ops/s
Iteration   2: 2052467.511 ops/s
Iteration   3: 2050400.307 ops/s
Iteration   4: 2056695.168 ops/s
Iteration   5: 2038087.961 ops/s
Iteration   6: 2041122.896 ops/s
Iteration   7: 2050792.514 ops/s
Iteration   8: 2052748.038 ops/s
Iteration   9: 2022295.028 ops/s
Iteration  10: 2052269.723 ops/s
Iteration  11: 2046017.597 ops/s
Iteration  12: 2047431.384 ops/s
Iteration  13: 2049702.919 ops/s
Iteration  14: 2039606.769 ops/s
Iteration  15: 2053455.427 ops/s
Iteration  16: 2046425.012 ops/s
Iteration  17: 2051378.574 ops/s
Iteration  18: 2053999.812 ops/s
Iteration  19: 2049517.983 ops/s
Iteration  20: 1982880.520 ops/s
Iteration  21: 2051994.696 ops/s
Iteration  22: 2056369.891 ops/s
Iteration  23: 2051803.683 ops/s
Iteration  24: 2043466.707 ops/s
Iteration  25: 2041883.075 ops/s
Iteration  26: 2052015.656 ops/s
Iteration  27: 2052358.565 ops/s
Iteration  28: 2054048.520 ops/s
Iteration  29: 2050595.634 ops/s
Iteration  30: 2055349.054 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator":
  2046475.750 ±(99.9%) 9266.218 ops/s [Average]
  (min, avg, max) = (1982880.520, 2046475.750, 2056695.168), stdev = 13869.239
  CI (99.9%): [2037209.532, 2055741.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  2046475.750 ± 9266.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5436.135 ops/s
# Warmup Iteration   2: 6144.775 ops/s
# Warmup Iteration   3: 6118.793 ops/s
# Warmup Iteration   4: 6135.281 ops/s
# Warmup Iteration   5: 6468.110 ops/s
# Warmup Iteration   6: 7058.661 ops/s
# Warmup Iteration   7: 7001.641 ops/s
# Warmup Iteration   8: 7116.363 ops/s
# Warmup Iteration   9: 7099.807 ops/s
# Warmup Iteration  10: 7120.556 ops/s
# Warmup Iteration  11: 7115.610 ops/s
# Warmup Iteration  12: 7093.691 ops/s
# Warmup Iteration  13: 7079.074 ops/s
# Warmup Iteration  14: 7109.275 ops/s
# Warmup Iteration  15: 7125.006 ops/s
# Warmup Iteration  16: 7031.090 ops/s
# Warmup Iteration  17: 7125.201 ops/s
# Warmup Iteration  18: 7109.569 ops/s
# Warmup Iteration  19: 7123.317 ops/s
# Warmup Iteration  20: 7085.956 ops/s
# Warmup Iteration  21: 7005.271 ops/s
# Warmup Iteration  22: 7105.285 ops/s
# Warmup Iteration  23: 7113.592 ops/s
# Warmup Iteration  24: 6998.882 ops/s
# Warmup Iteration  25: 7042.258 ops/s
# Warmup Iteration  26: 7104.820 ops/s
# Warmup Iteration  27: 7116.785 ops/s
# Warmup Iteration  28: 6603.508 ops/s
# Warmup Iteration  29: 6576.613 ops/s
# Warmup Iteration  30: 7122.526 ops/s
Iteration   1: 7126.676 ops/s
Iteration   2: 7136.564 ops/s
Iteration   3: 7112.512 ops/s
Iteration   4: 7119.304 ops/s
Iteration   5: 7132.501 ops/s
Iteration   6: 7082.518 ops/s
Iteration   7: 7126.102 ops/s
Iteration   8: 7108.925 ops/s
Iteration   9: 7106.502 ops/s
Iteration  10: 7103.632 ops/s
Iteration  11: 7118.638 ops/s
Iteration  12: 7109.980 ops/s
Iteration  13: 7105.721 ops/s
Iteration  14: 7129.342 ops/s
Iteration  15: 7106.536 ops/s
Iteration  16: 7134.110 ops/s
Iteration  17: 7078.318 ops/s
Iteration  18: 7078.151 ops/s
Iteration  19: 7122.438 ops/s
Iteration  20: 7118.160 ops/s
Iteration  21: 7121.829 ops/s
Iteration  22: 7107.552 ops/s
Iteration  23: 7115.223 ops/s
Iteration  24: 7123.992 ops/s
Iteration  25: 7122.765 ops/s
Iteration  26: 7116.421 ops/s
Iteration  27: 7112.765 ops/s
Iteration  28: 7135.348 ops/s
Iteration  29: 7100.474 ops/s
Iteration  30: 7052.233 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_large":
  7112.174 ±(99.9%) 12.689 ops/s [Average]
  (min, avg, max) = (7052.233, 7112.174, 7136.564), stdev = 18.992
  CI (99.9%): [7099.486, 7124.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score    Error  Units
FastListTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  7112.174 ± 12.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6266368.365 ops/s
# Warmup Iteration   2: 9631118.582 ops/s
# Warmup Iteration   3: 10904921.504 ops/s
# Warmup Iteration   4: 11437676.416 ops/s
# Warmup Iteration   5: 11441398.790 ops/s
# Warmup Iteration   6: 10256480.789 ops/s
# Warmup Iteration   7: 10644250.877 ops/s
# Warmup Iteration   8: 11259410.754 ops/s
# Warmup Iteration   9: 11239040.946 ops/s
# Warmup Iteration  10: 11210716.737 ops/s
# Warmup Iteration  11: 11265813.854 ops/s
# Warmup Iteration  12: 11271727.868 ops/s
# Warmup Iteration  13: 11246962.979 ops/s
# Warmup Iteration  14: 11251129.737 ops/s
# Warmup Iteration  15: 11244832.727 ops/s
# Warmup Iteration  16: 11280668.188 ops/s
# Warmup Iteration  17: 11398084.295 ops/s
# Warmup Iteration  18: 11307246.963 ops/s
# Warmup Iteration  19: 11401022.437 ops/s
# Warmup Iteration  20: 11419070.924 ops/s
# Warmup Iteration  21: 11431642.469 ops/s
# Warmup Iteration  22: 11434056.299 ops/s
# Warmup Iteration  23: 11323632.490 ops/s
# Warmup Iteration  24: 11411669.029 ops/s
# Warmup Iteration  25: 11315810.166 ops/s
# Warmup Iteration  26: 11357766.273 ops/s
# Warmup Iteration  27: 11387230.266 ops/s
# Warmup Iteration  28: 11404217.166 ops/s
# Warmup Iteration  29: 11423248.773 ops/s
# Warmup Iteration  30: 11419603.648 ops/s
Iteration   1: 11406427.346 ops/s
Iteration   2: 11363731.373 ops/s
Iteration   3: 11310094.582 ops/s
Iteration   4: 11374951.646 ops/s
Iteration   5: 11403444.970 ops/s
Iteration   6: 11346373.640 ops/s
Iteration   7: 11343618.187 ops/s
Iteration   8: 11307634.146 ops/s
Iteration   9: 11409653.214 ops/s
Iteration  10: 11352378.929 ops/s
Iteration  11: 11409692.358 ops/s
Iteration  12: 11330462.368 ops/s
Iteration  13: 11379919.662 ops/s
Iteration  14: 11383501.763 ops/s
Iteration  15: 11342889.408 ops/s
Iteration  16: 11382132.274 ops/s
Iteration  17: 11408543.977 ops/s
Iteration  18: 11375525.876 ops/s
Iteration  19: 11235925.083 ops/s
Iteration  20: 11348282.615 ops/s
Iteration  21: 11115325.555 ops/s
Iteration  22: 11390104.788 ops/s
Iteration  23: 11420610.748 ops/s
Iteration  24: 11393074.755 ops/s
Iteration  25: 11119919.819 ops/s
Iteration  26: 11392963.589 ops/s
Iteration  27: 11398422.427 ops/s
Iteration  28: 11161308.155 ops/s
Iteration  29: 11392032.550 ops/s
Iteration  30: 11184246.457 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_comparator_small":
  11339439.742 ±(99.9%) 58211.253 ops/s [Average]
  (min, avg, max) = (11115325.555, 11339439.742, 11420610.748), stdev = 87127.869
  CI (99.9%): [11281228.489, 11397650.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  11339439.742 ± 58211.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3385239.856 ops/s
# Warmup Iteration   2: 6982259.237 ops/s
# Warmup Iteration   3: 5720520.984 ops/s
# Warmup Iteration   4: 7014554.123 ops/s
# Warmup Iteration   5: 7029812.736 ops/s
# Warmup Iteration   6: 6980509.491 ops/s
# Warmup Iteration   7: 7011024.861 ops/s
# Warmup Iteration   8: 7001062.954 ops/s
# Warmup Iteration   9: 7033665.631 ops/s
# Warmup Iteration  10: 6986910.142 ops/s
# Warmup Iteration  11: 7033024.862 ops/s
# Warmup Iteration  12: 7048401.057 ops/s
# Warmup Iteration  13: 7024263.663 ops/s
# Warmup Iteration  14: 7016914.529 ops/s
# Warmup Iteration  15: 6984858.363 ops/s
# Warmup Iteration  16: 6927163.451 ops/s
# Warmup Iteration  17: 7032181.260 ops/s
# Warmup Iteration  18: 7015628.299 ops/s
# Warmup Iteration  19: 7060116.185 ops/s
# Warmup Iteration  20: 6948909.585 ops/s
# Warmup Iteration  21: 6964745.531 ops/s
# Warmup Iteration  22: 6987418.970 ops/s
# Warmup Iteration  23: 7045082.711 ops/s
# Warmup Iteration  24: 7004803.065 ops/s
# Warmup Iteration  25: 7008730.260 ops/s
# Warmup Iteration  26: 7049215.573 ops/s
# Warmup Iteration  27: 7023664.053 ops/s
# Warmup Iteration  28: 7031210.634 ops/s
# Warmup Iteration  29: 6879275.993 ops/s
# Warmup Iteration  30: 7037588.728 ops/s
Iteration   1: 7053940.152 ops/s
Iteration   2: 6962129.018 ops/s
Iteration   3: 7038270.345 ops/s
Iteration   4: 7035423.146 ops/s
Iteration   5: 6908684.940 ops/s
Iteration   6: 7057854.445 ops/s
Iteration   7: 6939189.756 ops/s
Iteration   8: 6977002.729 ops/s
Iteration   9: 7021294.684 ops/s
Iteration  10: 7051115.379 ops/s
Iteration  11: 7042081.758 ops/s
Iteration  12: 7035425.382 ops/s
Iteration  13: 7021269.531 ops/s
Iteration  14: 7036398.182 ops/s
Iteration  15: 7022971.767 ops/s
Iteration  16: 6983440.654 ops/s
Iteration  17: 6950576.008 ops/s
Iteration  18: 7043983.885 ops/s
Iteration  19: 7039562.880 ops/s
Iteration  20: 7015160.256 ops/s
Iteration  21: 6924806.588 ops/s
Iteration  22: 7054460.096 ops/s
Iteration  23: 6998209.628 ops/s
Iteration  24: 7038596.164 ops/s
Iteration  25: 7048997.654 ops/s
Iteration  26: 7035979.588 ops/s
Iteration  27: 7032832.704 ops/s
Iteration  28: 7025848.349 ops/s
Iteration  29: 7017019.772 ops/s
Iteration  30: 7055519.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sortThis_with_null":
  7015601.491 ±(99.9%) 27586.979 ops/s [Average]
  (min, avg, max) = (6908684.940, 7015601.491, 7057854.445), stdev = 41290.894
  CI (99.9%): [6988014.512, 7043188.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  7015601.491 ± 27586.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79749.750 ops/s
# Warmup Iteration   2: 154368.691 ops/s
# Warmup Iteration   3: 181382.358 ops/s
# Warmup Iteration   4: 183199.746 ops/s
# Warmup Iteration   5: 183307.697 ops/s
# Warmup Iteration   6: 157633.873 ops/s
# Warmup Iteration   7: 183567.752 ops/s
# Warmup Iteration   8: 184491.255 ops/s
# Warmup Iteration   9: 184559.643 ops/s
# Warmup Iteration  10: 183265.744 ops/s
# Warmup Iteration  11: 184402.142 ops/s
# Warmup Iteration  12: 183733.455 ops/s
# Warmup Iteration  13: 184154.833 ops/s
# Warmup Iteration  14: 182748.052 ops/s
# Warmup Iteration  15: 183035.014 ops/s
# Warmup Iteration  16: 184436.019 ops/s
# Warmup Iteration  17: 185445.763 ops/s
# Warmup Iteration  18: 184243.747 ops/s
# Warmup Iteration  19: 184756.155 ops/s
# Warmup Iteration  20: 184532.439 ops/s
# Warmup Iteration  21: 182502.007 ops/s
# Warmup Iteration  22: 184105.336 ops/s
# Warmup Iteration  23: 184015.759 ops/s
# Warmup Iteration  24: 182638.855 ops/s
# Warmup Iteration  25: 183437.037 ops/s
# Warmup Iteration  26: 184157.486 ops/s
# Warmup Iteration  27: 184054.789 ops/s
# Warmup Iteration  28: 185075.850 ops/s
# Warmup Iteration  29: 182557.701 ops/s
# Warmup Iteration  30: 183513.844 ops/s
Iteration   1: 185143.593 ops/s
Iteration   2: 183623.657 ops/s
Iteration   3: 180118.892 ops/s
Iteration   4: 184313.140 ops/s
Iteration   5: 184147.395 ops/s
Iteration   6: 184915.454 ops/s
Iteration   7: 183966.322 ops/s
Iteration   8: 182100.193 ops/s
Iteration   9: 182994.224 ops/s
Iteration  10: 183110.596 ops/s
Iteration  11: 184564.968 ops/s
Iteration  12: 184082.216 ops/s
Iteration  13: 183703.007 ops/s
Iteration  14: 183818.953 ops/s
Iteration  15: 180652.264 ops/s
Iteration  16: 182027.496 ops/s
Iteration  17: 181931.464 ops/s
Iteration  18: 181909.433 ops/s
Iteration  19: 182234.523 ops/s
Iteration  20: 179441.239 ops/s
Iteration  21: 178221.695 ops/s
Iteration  22: 180865.343 ops/s
Iteration  23: 180141.122 ops/s
Iteration  24: 181077.193 ops/s
Iteration  25: 183030.623 ops/s
Iteration  26: 181645.282 ops/s
Iteration  27: 182352.847 ops/s
Iteration  28: 182886.509 ops/s
Iteration  29: 181929.471 ops/s
Iteration  30: 181235.346 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subList":
  182406.149 ±(99.9%) 1135.605 ops/s [Average]
  (min, avg, max) = (178221.695, 182406.149, 185143.593), stdev = 1699.720
  CI (99.9%): [181270.544, 183541.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_subList  thrpt   30  182406.149 ± 1135.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749984.724 ops/s
# Warmup Iteration   2: 774002.939 ops/s
# Warmup Iteration   3: 1000454.404 ops/s
# Warmup Iteration   4: 1000794.949 ops/s
# Warmup Iteration   5: 999311.159 ops/s
# Warmup Iteration   6: 1004036.797 ops/s
# Warmup Iteration   7: 1002688.377 ops/s
# Warmup Iteration   8: 997708.507 ops/s
# Warmup Iteration   9: 994615.209 ops/s
# Warmup Iteration  10: 995410.495 ops/s
# Warmup Iteration  11: 1001378.329 ops/s
# Warmup Iteration  12: 840463.296 ops/s
# Warmup Iteration  13: 989021.265 ops/s
# Warmup Iteration  14: 994273.345 ops/s
# Warmup Iteration  15: 1000881.002 ops/s
# Warmup Iteration  16: 999998.886 ops/s
# Warmup Iteration  17: 1064240.190 ops/s
# Warmup Iteration  18: 1054708.479 ops/s
# Warmup Iteration  19: 1054273.650 ops/s
# Warmup Iteration  20: 1061525.723 ops/s
# Warmup Iteration  21: 1049760.584 ops/s
# Warmup Iteration  22: 1062166.410 ops/s
# Warmup Iteration  23: 1057481.864 ops/s
# Warmup Iteration  24: 1067924.142 ops/s
# Warmup Iteration  25: 1059011.076 ops/s
# Warmup Iteration  26: 1065953.687 ops/s
# Warmup Iteration  27: 1068812.689 ops/s
# Warmup Iteration  28: 1066260.259 ops/s
# Warmup Iteration  29: 1066685.061 ops/s
# Warmup Iteration  30: 1060625.152 ops/s
Iteration   1: 1070481.156 ops/s
Iteration   2: 1062205.043 ops/s
Iteration   3: 1058695.553 ops/s
Iteration   4: 1064738.883 ops/s
Iteration   5: 1064245.726 ops/s
Iteration   6: 1062832.355 ops/s
Iteration   7: 1059174.552 ops/s
Iteration   8: 1057728.432 ops/s
Iteration   9: 1052712.918 ops/s
Iteration  10: 1058838.691 ops/s
Iteration  11: 1056681.629 ops/s
Iteration  12: 1060704.960 ops/s
Iteration  13: 1061476.660 ops/s
Iteration  14: 1067271.431 ops/s
Iteration  15: 1045547.441 ops/s
Iteration  16: 1062549.223 ops/s
Iteration  17: 1060938.335 ops/s
Iteration  18: 1063763.765 ops/s
Iteration  19: 1065373.871 ops/s
Iteration  20: 1057295.300 ops/s
Iteration  21: 1063000.357 ops/s
Iteration  22: 1063091.309 ops/s
Iteration  23: 1070378.082 ops/s
Iteration  24: 1068288.278 ops/s
Iteration  25: 1042733.827 ops/s
Iteration  26: 1062695.436 ops/s
Iteration  27: 1048863.669 ops/s
Iteration  28: 1047586.387 ops/s
Iteration  29: 1066655.308 ops/s
Iteration  30: 1059850.636 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromGreaterThanToException":
  1060213.307 ±(99.9%) 4608.500 ops/s [Average]
  (min, avg, max) = (1042733.827, 1060213.307, 1070481.156), stdev = 6897.786
  CI (99.9%): [1055604.807, 1064821.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  1060213.307 ± 4608.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764116.108 ops/s
# Warmup Iteration   2: 771700.186 ops/s
# Warmup Iteration   3: 1013596.629 ops/s
# Warmup Iteration   4: 1015367.480 ops/s
# Warmup Iteration   5: 1019591.108 ops/s
# Warmup Iteration   6: 1009792.685 ops/s
# Warmup Iteration   7: 1004699.965 ops/s
# Warmup Iteration   8: 1018268.441 ops/s
# Warmup Iteration   9: 1007628.393 ops/s
# Warmup Iteration  10: 1007606.734 ops/s
# Warmup Iteration  11: 1014295.597 ops/s
# Warmup Iteration  12: 855283.813 ops/s
# Warmup Iteration  13: 1018585.578 ops/s
# Warmup Iteration  14: 1015198.514 ops/s
# Warmup Iteration  15: 1017050.079 ops/s
# Warmup Iteration  16: 1007435.823 ops/s
# Warmup Iteration  17: 1079424.113 ops/s
# Warmup Iteration  18: 1082415.514 ops/s
# Warmup Iteration  19: 1080262.903 ops/s
# Warmup Iteration  20: 1079536.742 ops/s
# Warmup Iteration  21: 1075703.212 ops/s
# Warmup Iteration  22: 1070894.306 ops/s
# Warmup Iteration  23: 1081612.542 ops/s
# Warmup Iteration  24: 1077359.570 ops/s
# Warmup Iteration  25: 1073162.565 ops/s
# Warmup Iteration  26: 1080270.648 ops/s
# Warmup Iteration  27: 1071716.305 ops/s
# Warmup Iteration  28: 1081004.238 ops/s
# Warmup Iteration  29: 1078227.210 ops/s
# Warmup Iteration  30: 1073545.003 ops/s
Iteration   1: 1081041.779 ops/s
Iteration   2: 1084994.946 ops/s
Iteration   3: 1082350.836 ops/s
Iteration   4: 1078826.881 ops/s
Iteration   5: 1082032.941 ops/s
Iteration   6: 1078872.599 ops/s
Iteration   7: 1070490.930 ops/s
Iteration   8: 1080202.614 ops/s
Iteration   9: 1081526.932 ops/s
Iteration  10: 1082470.724 ops/s
Iteration  11: 1069446.259 ops/s
Iteration  12: 1064855.811 ops/s
Iteration  13: 1061484.588 ops/s
Iteration  14: 1065890.546 ops/s
Iteration  15: 1080314.954 ops/s
Iteration  16: 1087636.099 ops/s
Iteration  17: 1083430.767 ops/s
Iteration  18: 1078048.733 ops/s
Iteration  19: 1080898.972 ops/s
Iteration  20: 1080068.827 ops/s
Iteration  21: 1086453.476 ops/s
Iteration  22: 1078672.443 ops/s
Iteration  23: 1079433.621 ops/s
Iteration  24: 1082126.946 ops/s
Iteration  25: 1085313.215 ops/s
Iteration  26: 1081061.165 ops/s
Iteration  27: 1082780.277 ops/s
Iteration  28: 1082234.442 ops/s
Iteration  29: 1051242.013 ops/s
Iteration  30: 1080673.234 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  1078162.586 ±(99.9%) 5423.791 ops/s [Average]
  (min, avg, max) = (1051242.013, 1078162.586, 1087636.099), stdev = 8118.075
  CI (99.9%): [1072738.795, 1083586.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  1078162.586 ± 5423.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762768.463 ops/s
# Warmup Iteration   2: 781844.653 ops/s
# Warmup Iteration   3: 1003351.612 ops/s
# Warmup Iteration   4: 1012169.446 ops/s
# Warmup Iteration   5: 1015173.520 ops/s
# Warmup Iteration   6: 1004617.686 ops/s
# Warmup Iteration   7: 1011829.193 ops/s
# Warmup Iteration   8: 1014039.062 ops/s
# Warmup Iteration   9: 1015528.184 ops/s
# Warmup Iteration  10: 1014515.708 ops/s
# Warmup Iteration  11: 1009546.262 ops/s
# Warmup Iteration  12: 870961.653 ops/s
# Warmup Iteration  13: 995097.053 ops/s
# Warmup Iteration  14: 1013513.737 ops/s
# Warmup Iteration  15: 1012228.237 ops/s
# Warmup Iteration  16: 1000594.959 ops/s
# Warmup Iteration  17: 1079758.651 ops/s
# Warmup Iteration  18: 1081152.528 ops/s
# Warmup Iteration  19: 1081292.192 ops/s
# Warmup Iteration  20: 1078650.804 ops/s
# Warmup Iteration  21: 1079686.958 ops/s
# Warmup Iteration  22: 1078545.740 ops/s
# Warmup Iteration  23: 1077257.401 ops/s
# Warmup Iteration  24: 1074430.672 ops/s
# Warmup Iteration  25: 1075835.019 ops/s
# Warmup Iteration  26: 1082807.217 ops/s
# Warmup Iteration  27: 1080126.773 ops/s
# Warmup Iteration  28: 1055505.873 ops/s
# Warmup Iteration  29: 1080661.028 ops/s
# Warmup Iteration  30: 1068012.213 ops/s
Iteration   1: 1090390.117 ops/s
Iteration   2: 1084244.028 ops/s
Iteration   3: 1086172.681 ops/s
Iteration   4: 1076112.054 ops/s
Iteration   5: 1073421.376 ops/s
Iteration   6: 1086382.135 ops/s
Iteration   7: 1083476.826 ops/s
Iteration   8: 1067299.306 ops/s
Iteration   9: 1081569.027 ops/s
Iteration  10: 1053111.618 ops/s
Iteration  11: 1081386.759 ops/s
Iteration  12: 1084297.361 ops/s
Iteration  13: 1083699.981 ops/s
Iteration  14: 1081732.970 ops/s
Iteration  15: 1078297.281 ops/s
Iteration  16: 1084899.364 ops/s
Iteration  17: 1079800.175 ops/s
Iteration  18: 1086302.308 ops/s
Iteration  19: 1079851.479 ops/s
Iteration  20: 1077681.236 ops/s
Iteration  21: 1082824.123 ops/s
Iteration  22: 1081847.309 ops/s
Iteration  23: 1067531.059 ops/s
Iteration  24: 1081424.243 ops/s
Iteration  25: 1051801.420 ops/s
Iteration  26: 1086360.591 ops/s
Iteration  27: 1085303.453 ops/s
Iteration  28: 1069155.920 ops/s
Iteration  29: 1085702.707 ops/s
Iteration  30: 1082315.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  1079146.481 ±(99.9%) 6125.163 ops/s [Average]
  (min, avg, max) = (1051801.420, 1079146.481, 1090390.117), stdev = 9167.856
  CI (99.9%): [1073021.318, 1085271.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  1079146.481 ± 6125.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1817121.196 ops/s
# Warmup Iteration   2: 2579520.652 ops/s
# Warmup Iteration   3: 3155207.747 ops/s
# Warmup Iteration   4: 3134194.934 ops/s
# Warmup Iteration   5: 3168271.397 ops/s
# Warmup Iteration   6: 3173902.260 ops/s
# Warmup Iteration   7: 2663175.803 ops/s
# Warmup Iteration   8: 3054119.556 ops/s
# Warmup Iteration   9: 3129222.450 ops/s
# Warmup Iteration  10: 3108832.811 ops/s
# Warmup Iteration  11: 3130172.585 ops/s
# Warmup Iteration  12: 3114848.221 ops/s
# Warmup Iteration  13: 3134278.463 ops/s
# Warmup Iteration  14: 3079631.531 ops/s
# Warmup Iteration  15: 3122759.119 ops/s
# Warmup Iteration  16: 3138049.587 ops/s
# Warmup Iteration  17: 3174000.245 ops/s
# Warmup Iteration  18: 3173961.641 ops/s
# Warmup Iteration  19: 3178458.846 ops/s
# Warmup Iteration  20: 3152629.282 ops/s
# Warmup Iteration  21: 3169860.503 ops/s
# Warmup Iteration  22: 3172122.375 ops/s
# Warmup Iteration  23: 3166428.331 ops/s
# Warmup Iteration  24: 3174087.570 ops/s
# Warmup Iteration  25: 3177468.441 ops/s
# Warmup Iteration  26: 3173626.504 ops/s
# Warmup Iteration  27: 3176438.468 ops/s
# Warmup Iteration  28: 3170395.689 ops/s
# Warmup Iteration  29: 3152493.238 ops/s
# Warmup Iteration  30: 3105946.451 ops/s
Iteration   1: 3165820.986 ops/s
Iteration   2: 3178182.985 ops/s
Iteration   3: 3170600.651 ops/s
Iteration   4: 3161340.096 ops/s
Iteration   5: 3119918.952 ops/s
Iteration   6: 3178064.874 ops/s
Iteration   7: 3179069.834 ops/s
Iteration   8: 3169373.553 ops/s
Iteration   9: 3178389.332 ops/s
Iteration  10: 3171779.991 ops/s
Iteration  11: 3175587.042 ops/s
Iteration  12: 3167351.593 ops/s
Iteration  13: 3164217.477 ops/s
Iteration  14: 3108474.113 ops/s
Iteration  15: 3177304.468 ops/s
Iteration  16: 3175724.519 ops/s
Iteration  17: 3164045.091 ops/s
Iteration  18: 3170212.278 ops/s
Iteration  19: 3168749.582 ops/s
Iteration  20: 3125851.579 ops/s
Iteration  21: 3168476.194 ops/s
Iteration  22: 3153674.785 ops/s
Iteration  23: 3175489.192 ops/s
Iteration  24: 3168824.351 ops/s
Iteration  25: 3169617.981 ops/s
Iteration  26: 3164052.049 ops/s
Iteration  27: 3181174.397 ops/s
Iteration  28: 3168960.281 ops/s
Iteration  29: 3172152.367 ops/s
Iteration  30: 3173472.912 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDouble":
  3165531.783 ±(99.9%) 11570.779 ops/s [Average]
  (min, avg, max) = (3108474.113, 3165531.783, 3181174.397), stdev = 17318.599
  CI (99.9%): [3153961.004, 3177102.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sumByDouble  thrpt   30  3165531.783 ± 11570.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.310 ops/s
# Warmup Iteration   2: 63.409 ops/s
# Warmup Iteration   3: 88.198 ops/s
# Warmup Iteration   4: 89.270 ops/s
# Warmup Iteration   5: 90.551 ops/s
# Warmup Iteration   6: 89.729 ops/s
# Warmup Iteration   7: 90.753 ops/s
# Warmup Iteration   8: 91.132 ops/s
# Warmup Iteration   9: 91.330 ops/s
# Warmup Iteration  10: 91.605 ops/s
# Warmup Iteration  11: 72.909 ops/s
# Warmup Iteration  12: 90.035 ops/s
# Warmup Iteration  13: 89.050 ops/s
# Warmup Iteration  14: 88.973 ops/s
# Warmup Iteration  15: 89.813 ops/s
# Warmup Iteration  16: 90.955 ops/s
# Warmup Iteration  17: 89.125 ops/s
# Warmup Iteration  18: 89.134 ops/s
# Warmup Iteration  19: 90.679 ops/s
# Warmup Iteration  20: 89.990 ops/s
# Warmup Iteration  21: 88.672 ops/s
# Warmup Iteration  22: 88.876 ops/s
# Warmup Iteration  23: 90.094 ops/s
# Warmup Iteration  24: 89.206 ops/s
# Warmup Iteration  25: 91.212 ops/s
# Warmup Iteration  26: 89.942 ops/s
# Warmup Iteration  27: 88.699 ops/s
# Warmup Iteration  28: 89.222 ops/s
# Warmup Iteration  29: 90.678 ops/s
# Warmup Iteration  30: 90.409 ops/s
Iteration   1: 90.952 ops/s
Iteration   2: 89.311 ops/s
Iteration   3: 88.518 ops/s
Iteration   4: 88.172 ops/s
Iteration   5: 90.063 ops/s
Iteration   6: 88.454 ops/s
Iteration   7: 88.978 ops/s
Iteration   8: 88.946 ops/s
Iteration   9: 90.187 ops/s
Iteration  10: 88.598 ops/s
Iteration  11: 88.029 ops/s
Iteration  12: 88.165 ops/s
Iteration  13: 89.063 ops/s
Iteration  14: 86.632 ops/s
Iteration  15: 88.916 ops/s
Iteration  16: 89.424 ops/s
Iteration  17: 87.478 ops/s
Iteration  18: 88.457 ops/s
Iteration  19: 87.413 ops/s
Iteration  20: 90.161 ops/s
Iteration  21: 89.160 ops/s
Iteration  22: 88.627 ops/s
Iteration  23: 88.125 ops/s
Iteration  24: 86.287 ops/s
Iteration  25: 85.423 ops/s
Iteration  26: 88.484 ops/s
Iteration  27: 89.266 ops/s
Iteration  28: 89.001 ops/s
Iteration  29: 89.631 ops/s
Iteration  30: 87.565 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  88.583 ±(99.9%) 0.789 ops/s [Average]
  (min, avg, max) = (85.423, 88.583, 90.952), stdev = 1.180
  CI (99.9%): [87.794, 89.371] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt   Score   Error  Units
FastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  88.583 ± 0.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1868729.435 ops/s
# Warmup Iteration   2: 2774330.891 ops/s
# Warmup Iteration   3: 3322764.326 ops/s
# Warmup Iteration   4: 3311877.660 ops/s
# Warmup Iteration   5: 3303058.493 ops/s
# Warmup Iteration   6: 3324190.067 ops/s
# Warmup Iteration   7: 2732462.596 ops/s
# Warmup Iteration   8: 3301262.885 ops/s
# Warmup Iteration   9: 3304132.382 ops/s
# Warmup Iteration  10: 3324646.807 ops/s
# Warmup Iteration  11: 3326389.793 ops/s
# Warmup Iteration  12: 3302821.638 ops/s
# Warmup Iteration  13: 3299667.944 ops/s
# Warmup Iteration  14: 3323292.855 ops/s
# Warmup Iteration  15: 3304603.418 ops/s
# Warmup Iteration  16: 3302894.111 ops/s
# Warmup Iteration  17: 3323516.728 ops/s
# Warmup Iteration  18: 3319122.619 ops/s
# Warmup Iteration  19: 3300264.686 ops/s
# Warmup Iteration  20: 3326045.693 ops/s
# Warmup Iteration  21: 3338774.254 ops/s
# Warmup Iteration  22: 3313508.341 ops/s
# Warmup Iteration  23: 3307924.379 ops/s
# Warmup Iteration  24: 3330737.319 ops/s
# Warmup Iteration  25: 3332538.476 ops/s
# Warmup Iteration  26: 3325123.233 ops/s
# Warmup Iteration  27: 3338367.925 ops/s
# Warmup Iteration  28: 3323458.516 ops/s
# Warmup Iteration  29: 3299000.467 ops/s
# Warmup Iteration  30: 3326113.805 ops/s
Iteration   1: 3330195.656 ops/s
Iteration   2: 3335270.568 ops/s
Iteration   3: 3328334.129 ops/s
Iteration   4: 3323615.099 ops/s
Iteration   5: 3341077.570 ops/s
Iteration   6: 3328342.289 ops/s
Iteration   7: 3327447.718 ops/s
Iteration   8: 3288323.901 ops/s
Iteration   9: 3323418.138 ops/s
Iteration  10: 3327902.951 ops/s
Iteration  11: 3332211.116 ops/s
Iteration  12: 3333098.532 ops/s
Iteration  13: 3335385.769 ops/s
Iteration  14: 3328708.569 ops/s
Iteration  15: 3331577.185 ops/s
Iteration  16: 3335624.512 ops/s
Iteration  17: 3291432.002 ops/s
Iteration  18: 3335348.585 ops/s
Iteration  19: 3335563.645 ops/s
Iteration  20: 3309220.622 ops/s
Iteration  21: 3332124.399 ops/s
Iteration  22: 3312350.161 ops/s
Iteration  23: 3332266.828 ops/s
Iteration  24: 3263635.973 ops/s
Iteration  25: 3273172.157 ops/s
Iteration  26: 3296611.974 ops/s
Iteration  27: 3282328.445 ops/s
Iteration  28: 3331120.171 ops/s
Iteration  29: 3332960.359 ops/s
Iteration  30: 3334220.154 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloat":
  3320429.639 ±(99.9%) 13963.972 ops/s [Average]
  (min, avg, max) = (3263635.973, 3320429.639, 3341077.570), stdev = 20900.618
  CI (99.9%): [3306465.667, 3334393.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sumByFloat  thrpt   30  3320429.639 ± 13963.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.420 ops/s
# Warmup Iteration   2: 62.034 ops/s
# Warmup Iteration   3: 86.334 ops/s
# Warmup Iteration   4: 87.914 ops/s
# Warmup Iteration   5: 88.146 ops/s
# Warmup Iteration   6: 88.925 ops/s
# Warmup Iteration   7: 89.398 ops/s
# Warmup Iteration   8: 88.933 ops/s
# Warmup Iteration   9: 88.600 ops/s
# Warmup Iteration  10: 89.544 ops/s
# Warmup Iteration  11: 77.493 ops/s
# Warmup Iteration  12: 83.847 ops/s
# Warmup Iteration  13: 89.598 ops/s
# Warmup Iteration  14: 88.256 ops/s
# Warmup Iteration  15: 88.634 ops/s
# Warmup Iteration  16: 89.505 ops/s
# Warmup Iteration  17: 87.836 ops/s
# Warmup Iteration  18: 89.606 ops/s
# Warmup Iteration  19: 86.616 ops/s
# Warmup Iteration  20: 88.052 ops/s
# Warmup Iteration  21: 88.095 ops/s
# Warmup Iteration  22: 88.322 ops/s
# Warmup Iteration  23: 87.980 ops/s
# Warmup Iteration  24: 89.361 ops/s
# Warmup Iteration  25: 88.661 ops/s
# Warmup Iteration  26: 89.091 ops/s
# Warmup Iteration  27: 88.523 ops/s
# Warmup Iteration  28: 88.460 ops/s
# Warmup Iteration  29: 89.529 ops/s
# Warmup Iteration  30: 87.471 ops/s
Iteration   1: 89.376 ops/s
Iteration   2: 90.303 ops/s
Iteration   3: 87.895 ops/s
Iteration   4: 87.735 ops/s
Iteration   5: 88.287 ops/s
Iteration   6: 88.342 ops/s
Iteration   7: 87.115 ops/s
Iteration   8: 87.742 ops/s
Iteration   9: 87.918 ops/s
Iteration  10: 86.545 ops/s
Iteration  11: 87.364 ops/s
Iteration  12: 88.286 ops/s
Iteration  13: 88.432 ops/s
Iteration  14: 88.653 ops/s
Iteration  15: 87.788 ops/s
Iteration  16: 88.876 ops/s
Iteration  17: 89.359 ops/s
Iteration  18: 87.213 ops/s
Iteration  19: 86.689 ops/s
Iteration  20: 85.242 ops/s
Iteration  21: 86.063 ops/s
Iteration  22: 83.462 ops/s
Iteration  23: 86.209 ops/s
Iteration  24: 87.579 ops/s
Iteration  25: 88.576 ops/s
Iteration  26: 88.780 ops/s
Iteration  27: 87.743 ops/s
Iteration  28: 85.692 ops/s
Iteration  29: 88.543 ops/s
Iteration  30: 87.212 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  87.634 ±(99.9%) 0.921 ops/s [Average]
  (min, avg, max) = (83.462, 87.634, 90.303), stdev = 1.379
  CI (99.9%): [86.713, 88.555] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt   Score   Error  Units
FastListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  87.634 ± 0.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3479479.450 ops/s
# Warmup Iteration   2: 5625558.139 ops/s
# Warmup Iteration   3: 6315606.033 ops/s
# Warmup Iteration   4: 6408726.545 ops/s
# Warmup Iteration   5: 6403640.323 ops/s
# Warmup Iteration   6: 5305268.539 ops/s
# Warmup Iteration   7: 6404795.398 ops/s
# Warmup Iteration   8: 6451234.578 ops/s
# Warmup Iteration   9: 6363633.188 ops/s
# Warmup Iteration  10: 6412671.119 ops/s
# Warmup Iteration  11: 6444782.298 ops/s
# Warmup Iteration  12: 6461352.344 ops/s
# Warmup Iteration  13: 6462323.321 ops/s
# Warmup Iteration  14: 6419554.714 ops/s
# Warmup Iteration  15: 6414232.336 ops/s
# Warmup Iteration  16: 6458775.110 ops/s
# Warmup Iteration  17: 6463842.777 ops/s
# Warmup Iteration  18: 6469622.271 ops/s
# Warmup Iteration  19: 6469990.555 ops/s
# Warmup Iteration  20: 6455585.092 ops/s
# Warmup Iteration  21: 6459442.341 ops/s
# Warmup Iteration  22: 6424258.175 ops/s
# Warmup Iteration  23: 6456177.349 ops/s
# Warmup Iteration  24: 6461719.047 ops/s
# Warmup Iteration  25: 6387778.449 ops/s
# Warmup Iteration  26: 6456086.477 ops/s
# Warmup Iteration  27: 6366444.662 ops/s
# Warmup Iteration  28: 6403618.338 ops/s
# Warmup Iteration  29: 6459773.660 ops/s
# Warmup Iteration  30: 6466957.403 ops/s
Iteration   1: 6458640.500 ops/s
Iteration   2: 6469214.593 ops/s
Iteration   3: 6484502.856 ops/s
Iteration   4: 6469849.719 ops/s
Iteration   5: 6461535.106 ops/s
Iteration   6: 6416018.064 ops/s
Iteration   7: 6451103.796 ops/s
Iteration   8: 6461747.359 ops/s
Iteration   9: 6484743.920 ops/s
Iteration  10: 6426852.704 ops/s
Iteration  11: 6473961.488 ops/s
Iteration  12: 6459520.111 ops/s
Iteration  13: 6380419.984 ops/s
Iteration  14: 6459597.968 ops/s
Iteration  15: 6442446.213 ops/s
Iteration  16: 6340746.689 ops/s
Iteration  17: 6462007.819 ops/s
Iteration  18: 6462215.131 ops/s
Iteration  19: 6467197.145 ops/s
Iteration  20: 6446917.900 ops/s
Iteration  21: 6457658.694 ops/s
Iteration  22: 6424833.311 ops/s
Iteration  23: 6456391.743 ops/s
Iteration  24: 6484877.051 ops/s
Iteration  25: 6466090.298 ops/s
Iteration  26: 6463717.990 ops/s
Iteration  27: 6450994.960 ops/s
Iteration  28: 6376131.149 ops/s
Iteration  29: 6338638.598 ops/s
Iteration  30: 6484883.142 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByInt":
  6446115.200 ±(99.9%) 26144.561 ops/s [Average]
  (min, avg, max) = (6338638.598, 6446115.200, 6484883.142), stdev = 39131.951
  CI (99.9%): [6419970.639, 6472259.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sumByInt  thrpt   30  6446115.200 ± 26144.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3486731.873 ops/s
# Warmup Iteration   2: 5645413.796 ops/s
# Warmup Iteration   3: 6385289.545 ops/s
# Warmup Iteration   4: 6423906.288 ops/s
# Warmup Iteration   5: 6398514.029 ops/s
# Warmup Iteration   6: 5306574.690 ops/s
# Warmup Iteration   7: 6467205.503 ops/s
# Warmup Iteration   8: 6405983.718 ops/s
# Warmup Iteration   9: 6449065.024 ops/s
# Warmup Iteration  10: 6480103.232 ops/s
# Warmup Iteration  11: 6458233.704 ops/s
# Warmup Iteration  12: 6387955.674 ops/s
# Warmup Iteration  13: 6466671.856 ops/s
# Warmup Iteration  14: 6424770.476 ops/s
# Warmup Iteration  15: 6463118.209 ops/s
# Warmup Iteration  16: 6472926.988 ops/s
# Warmup Iteration  17: 6472254.623 ops/s
# Warmup Iteration  18: 6459713.228 ops/s
# Warmup Iteration  19: 6426742.617 ops/s
# Warmup Iteration  20: 6465707.673 ops/s
# Warmup Iteration  21: 6484054.195 ops/s
# Warmup Iteration  22: 6470574.309 ops/s
# Warmup Iteration  23: 6417349.571 ops/s
# Warmup Iteration  24: 6478425.583 ops/s
# Warmup Iteration  25: 6466477.244 ops/s
# Warmup Iteration  26: 6470739.293 ops/s
# Warmup Iteration  27: 6457353.580 ops/s
# Warmup Iteration  28: 6477518.008 ops/s
# Warmup Iteration  29: 6415096.988 ops/s
# Warmup Iteration  30: 6479218.373 ops/s
Iteration   1: 6434995.359 ops/s
Iteration   2: 6454802.232 ops/s
Iteration   3: 6477928.770 ops/s
Iteration   4: 6464416.252 ops/s
Iteration   5: 6473658.986 ops/s
Iteration   6: 6471251.046 ops/s
Iteration   7: 6467020.231 ops/s
Iteration   8: 6473261.504 ops/s
Iteration   9: 6482307.802 ops/s
Iteration  10: 6468116.389 ops/s
Iteration  11: 6459722.354 ops/s
Iteration  12: 6474639.248 ops/s
Iteration  13: 6472491.282 ops/s
Iteration  14: 6486456.870 ops/s
Iteration  15: 6423930.708 ops/s
Iteration  16: 6489963.345 ops/s
Iteration  17: 6466783.314 ops/s
Iteration  18: 6482626.074 ops/s
Iteration  19: 6473421.605 ops/s
Iteration  20: 6478509.100 ops/s
Iteration  21: 6359724.836 ops/s
Iteration  22: 6470634.954 ops/s
Iteration  23: 6474780.195 ops/s
Iteration  24: 6482052.783 ops/s
Iteration  25: 6466195.263 ops/s
Iteration  26: 6478421.762 ops/s
Iteration  27: 6376711.134 ops/s
Iteration  28: 6377851.656 ops/s
Iteration  29: 6472227.880 ops/s
Iteration  30: 6462713.763 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumByLong":
  6459920.557 ±(99.9%) 22032.600 ops/s [Average]
  (min, avg, max) = (6359724.836, 6459920.557, 6489963.345), stdev = 32977.361
  CI (99.9%): [6437887.957, 6481953.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_sumByLong  thrpt   30  6459920.557 ± 22032.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22634390.023 ops/s
# Warmup Iteration   2: 43669623.019 ops/s
# Warmup Iteration   3: 39993062.025 ops/s
# Warmup Iteration   4: 41470972.061 ops/s
# Warmup Iteration   5: 44186960.314 ops/s
# Warmup Iteration   6: 44324434.223 ops/s
# Warmup Iteration   7: 44399997.901 ops/s
# Warmup Iteration   8: 44268560.351 ops/s
# Warmup Iteration   9: 43273674.719 ops/s
# Warmup Iteration  10: 44257225.427 ops/s
# Warmup Iteration  11: 44230929.518 ops/s
# Warmup Iteration  12: 44353252.843 ops/s
# Warmup Iteration  13: 44169756.776 ops/s
# Warmup Iteration  14: 44102668.102 ops/s
# Warmup Iteration  15: 44349985.222 ops/s
# Warmup Iteration  16: 44272842.039 ops/s
# Warmup Iteration  17: 44330336.095 ops/s
# Warmup Iteration  18: 43435860.027 ops/s
# Warmup Iteration  19: 44251684.785 ops/s
# Warmup Iteration  20: 44181333.328 ops/s
# Warmup Iteration  21: 44224960.678 ops/s
# Warmup Iteration  22: 44185114.354 ops/s
# Warmup Iteration  23: 44339815.878 ops/s
# Warmup Iteration  24: 44325830.672 ops/s
# Warmup Iteration  25: 44197850.417 ops/s
# Warmup Iteration  26: 44335444.558 ops/s
# Warmup Iteration  27: 43828185.093 ops/s
# Warmup Iteration  28: 44328575.277 ops/s
# Warmup Iteration  29: 44297414.630 ops/s
# Warmup Iteration  30: 44068774.588 ops/s
Iteration   1: 44177731.421 ops/s
Iteration   2: 43597890.299 ops/s
Iteration   3: 44325702.204 ops/s
Iteration   4: 43387528.644 ops/s
Iteration   5: 44106703.062 ops/s
Iteration   6: 44133531.515 ops/s
Iteration   7: 44290679.700 ops/s
Iteration   8: 44030211.329 ops/s
Iteration   9: 44177133.998 ops/s
Iteration  10: 44385738.824 ops/s
Iteration  11: 44210617.723 ops/s
Iteration  12: 44400990.617 ops/s
Iteration  13: 43543515.312 ops/s
Iteration  14: 44399694.415 ops/s
Iteration  15: 44363212.194 ops/s
Iteration  16: 44420353.485 ops/s
Iteration  17: 44193425.061 ops/s
Iteration  18: 44236701.339 ops/s
Iteration  19: 44174124.478 ops/s
Iteration  20: 44410434.580 ops/s
Iteration  21: 44207748.766 ops/s
Iteration  22: 43570895.900 ops/s
Iteration  23: 44346039.508 ops/s
Iteration  24: 43545087.901 ops/s
Iteration  25: 43638102.599 ops/s
Iteration  26: 44363956.609 ops/s
Iteration  27: 44263345.889 ops/s
Iteration  28: 44275316.536 ops/s
Iteration  29: 43774130.997 ops/s
Iteration  30: 44193403.522 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDouble":
  44104798.281 ±(99.9%) 209993.601 ops/s [Average]
  (min, avg, max) = (43387528.644, 44104798.281, 44420353.485), stdev = 314308.559
  CI (99.9%): [43894804.680, 44314791.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_sumDouble  thrpt   30  44104798.281 ± 209993.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 178.285 ops/s
# Warmup Iteration   2: 197.617 ops/s
# Warmup Iteration   3: 240.084 ops/s
# Warmup Iteration   4: 255.845 ops/s
# Warmup Iteration   5: 256.797 ops/s
# Warmup Iteration   6: 256.052 ops/s
# Warmup Iteration   7: 257.643 ops/s
# Warmup Iteration   8: 255.547 ops/s
# Warmup Iteration   9: 255.946 ops/s
# Warmup Iteration  10: 257.473 ops/s
# Warmup Iteration  11: 258.297 ops/s
# Warmup Iteration  12: 254.950 ops/s
# Warmup Iteration  13: 231.712 ops/s
# Warmup Iteration  14: 234.167 ops/s
# Warmup Iteration  15: 252.871 ops/s
# Warmup Iteration  16: 254.062 ops/s
# Warmup Iteration  17: 254.037 ops/s
# Warmup Iteration  18: 254.222 ops/s
# Warmup Iteration  19: 254.470 ops/s
# Warmup Iteration  20: 254.928 ops/s
# Warmup Iteration  21: 254.403 ops/s
# Warmup Iteration  22: 254.255 ops/s
# Warmup Iteration  23: 254.646 ops/s
# Warmup Iteration  24: 254.257 ops/s
# Warmup Iteration  25: 253.609 ops/s
# Warmup Iteration  26: 252.709 ops/s
# Warmup Iteration  27: 251.803 ops/s
# Warmup Iteration  28: 255.197 ops/s
# Warmup Iteration  29: 255.214 ops/s
# Warmup Iteration  30: 253.246 ops/s
Iteration   1: 253.918 ops/s
Iteration   2: 254.522 ops/s
Iteration   3: 254.539 ops/s
Iteration   4: 253.223 ops/s
Iteration   5: 254.732 ops/s
Iteration   6: 253.590 ops/s
Iteration   7: 252.803 ops/s
Iteration   8: 254.166 ops/s
Iteration   9: 253.872 ops/s
Iteration  10: 254.407 ops/s
Iteration  11: 249.873 ops/s
Iteration  12: 253.670 ops/s
Iteration  13: 253.905 ops/s
Iteration  14: 254.855 ops/s
Iteration  15: 255.394 ops/s
Iteration  16: 253.001 ops/s
Iteration  17: 253.449 ops/s
Iteration  18: 253.770 ops/s
Iteration  19: 254.420 ops/s
Iteration  20: 255.222 ops/s
Iteration  21: 252.053 ops/s
Iteration  22: 253.906 ops/s
Iteration  23: 254.606 ops/s
Iteration  24: 255.327 ops/s
Iteration  25: 257.081 ops/s
Iteration  26: 253.327 ops/s
Iteration  27: 254.670 ops/s
Iteration  28: 255.449 ops/s
Iteration  29: 256.688 ops/s
Iteration  30: 254.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  254.160 ±(99.9%) 0.889 ops/s [Average]
  (min, avg, max) = (249.873, 254.160, 257.081), stdev = 1.331
  CI (99.9%): [253.271, 255.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt    Score   Error  Units
FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  254.160 ± 0.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217.280 ops/s
# Warmup Iteration   2: 243.647 ops/s
# Warmup Iteration   3: 328.911 ops/s
# Warmup Iteration   4: 326.283 ops/s
# Warmup Iteration   5: 327.902 ops/s
# Warmup Iteration   6: 327.819 ops/s
# Warmup Iteration   7: 328.054 ops/s
# Warmup Iteration   8: 325.729 ops/s
# Warmup Iteration   9: 318.889 ops/s
# Warmup Iteration  10: 304.320 ops/s
# Warmup Iteration  11: 251.087 ops/s
# Warmup Iteration  12: 302.116 ops/s
# Warmup Iteration  13: 302.420 ops/s
# Warmup Iteration  14: 305.748 ops/s
# Warmup Iteration  15: 303.531 ops/s
# Warmup Iteration  16: 304.031 ops/s
# Warmup Iteration  17: 303.575 ops/s
# Warmup Iteration  18: 306.786 ops/s
# Warmup Iteration  19: 306.775 ops/s
# Warmup Iteration  20: 306.420 ops/s
# Warmup Iteration  21: 305.436 ops/s
# Warmup Iteration  22: 305.911 ops/s
# Warmup Iteration  23: 304.802 ops/s
# Warmup Iteration  24: 304.093 ops/s
# Warmup Iteration  25: 306.771 ops/s
# Warmup Iteration  26: 305.554 ops/s
# Warmup Iteration  27: 305.810 ops/s
# Warmup Iteration  28: 303.172 ops/s
# Warmup Iteration  29: 306.583 ops/s
# Warmup Iteration  30: 306.249 ops/s
Iteration   1: 308.098 ops/s
Iteration   2: 309.687 ops/s
Iteration   3: 306.930 ops/s
Iteration   4: 306.430 ops/s
Iteration   5: 307.947 ops/s
Iteration   6: 307.029 ops/s
Iteration   7: 305.768 ops/s
Iteration   8: 304.764 ops/s
Iteration   9: 301.983 ops/s
Iteration  10: 308.250 ops/s
Iteration  11: 301.071 ops/s
Iteration  12: 306.431 ops/s
Iteration  13: 307.926 ops/s
Iteration  14: 306.654 ops/s
Iteration  15: 305.391 ops/s
Iteration  16: 304.463 ops/s
Iteration  17: 305.843 ops/s
Iteration  18: 307.111 ops/s
Iteration  19: 305.155 ops/s
Iteration  20: 306.683 ops/s
Iteration  21: 305.006 ops/s
Iteration  22: 306.791 ops/s
Iteration  23: 303.747 ops/s
Iteration  24: 306.749 ops/s
Iteration  25: 304.648 ops/s
Iteration  26: 305.055 ops/s
Iteration  27: 304.801 ops/s
Iteration  28: 304.346 ops/s
Iteration  29: 308.472 ops/s
Iteration  30: 305.606 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  305.961 ±(99.9%) 1.246 ops/s [Average]
  (min, avg, max) = (301.071, 305.961, 309.687), stdev = 1.865
  CI (99.9%): [304.715, 307.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt    Score   Error  Units
FastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  305.961 ± 1.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19828931.486 ops/s
# Warmup Iteration   2: 44351478.397 ops/s
# Warmup Iteration   3: 39477443.208 ops/s
# Warmup Iteration   4: 34220725.412 ops/s
# Warmup Iteration   5: 39495407.952 ops/s
# Warmup Iteration   6: 39955103.577 ops/s
# Warmup Iteration   7: 40054971.006 ops/s
# Warmup Iteration   8: 40007231.921 ops/s
# Warmup Iteration   9: 39532814.020 ops/s
# Warmup Iteration  10: 40078535.077 ops/s
# Warmup Iteration  11: 40036054.752 ops/s
# Warmup Iteration  12: 40023640.227 ops/s
# Warmup Iteration  13: 39999710.905 ops/s
# Warmup Iteration  14: 39758774.461 ops/s
# Warmup Iteration  15: 39918040.777 ops/s
# Warmup Iteration  16: 40039955.077 ops/s
# Warmup Iteration  17: 39854007.390 ops/s
# Warmup Iteration  18: 39370180.744 ops/s
# Warmup Iteration  19: 39951373.852 ops/s
# Warmup Iteration  20: 39726531.830 ops/s
# Warmup Iteration  21: 39990371.885 ops/s
# Warmup Iteration  22: 40051787.774 ops/s
# Warmup Iteration  23: 39922036.932 ops/s
# Warmup Iteration  24: 39985964.375 ops/s
# Warmup Iteration  25: 40040301.549 ops/s
# Warmup Iteration  26: 39804357.628 ops/s
# Warmup Iteration  27: 39734682.376 ops/s
# Warmup Iteration  28: 40010197.973 ops/s
# Warmup Iteration  29: 39994761.704 ops/s
# Warmup Iteration  30: 39891211.294 ops/s
Iteration   1: 40026631.166 ops/s
Iteration   2: 39965680.573 ops/s
Iteration   3: 39979245.735 ops/s
Iteration   4: 40062106.646 ops/s
Iteration   5: 39625481.239 ops/s
Iteration   6: 39452667.565 ops/s
Iteration   7: 40169659.551 ops/s
Iteration   8: 40081967.193 ops/s
Iteration   9: 39542944.744 ops/s
Iteration  10: 40019197.597 ops/s
Iteration  11: 40126090.289 ops/s
Iteration  12: 40030480.005 ops/s
Iteration  13: 40005243.595 ops/s
Iteration  14: 38763170.436 ops/s
Iteration  15: 40044483.387 ops/s
Iteration  16: 40064991.180 ops/s
Iteration  17: 40028229.840 ops/s
Iteration  18: 39556790.036 ops/s
Iteration  19: 39961347.540 ops/s
Iteration  20: 40067342.981 ops/s
Iteration  21: 39877263.307 ops/s
Iteration  22: 39721743.966 ops/s
Iteration  23: 40091470.106 ops/s
Iteration  24: 40074174.688 ops/s
Iteration  25: 39981340.107 ops/s
Iteration  26: 39937451.123 ops/s
Iteration  27: 39822206.693 ops/s
Iteration  28: 39944194.534 ops/s
Iteration  29: 40004071.544 ops/s
Iteration  30: 39372146.183 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloat":
  39879993.785 ±(99.9%) 198286.182 ops/s [Average]
  (min, avg, max) = (38763170.436, 39879993.785, 40169659.551), stdev = 296785.445
  CI (99.9%): [39681707.603, 40078279.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_sumFloat  thrpt   30  39879993.785 ± 198286.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176.671 ops/s
# Warmup Iteration   2: 196.178 ops/s
# Warmup Iteration   3: 231.851 ops/s
# Warmup Iteration   4: 251.239 ops/s
# Warmup Iteration   5: 250.404 ops/s
# Warmup Iteration   6: 250.475 ops/s
# Warmup Iteration   7: 251.919 ops/s
# Warmup Iteration   8: 250.559 ops/s
# Warmup Iteration   9: 251.047 ops/s
# Warmup Iteration  10: 249.178 ops/s
# Warmup Iteration  11: 250.675 ops/s
# Warmup Iteration  12: 236.423 ops/s
# Warmup Iteration  13: 226.691 ops/s
# Warmup Iteration  14: 188.227 ops/s
# Warmup Iteration  15: 228.742 ops/s
# Warmup Iteration  16: 228.716 ops/s
# Warmup Iteration  17: 230.040 ops/s
# Warmup Iteration  18: 229.572 ops/s
# Warmup Iteration  19: 227.966 ops/s
# Warmup Iteration  20: 229.734 ops/s
# Warmup Iteration  21: 230.253 ops/s
# Warmup Iteration  22: 227.924 ops/s
# Warmup Iteration  23: 228.413 ops/s
# Warmup Iteration  24: 230.564 ops/s
# Warmup Iteration  25: 227.336 ops/s
# Warmup Iteration  26: 229.728 ops/s
# Warmup Iteration  27: 225.661 ops/s
# Warmup Iteration  28: 230.035 ops/s
# Warmup Iteration  29: 229.712 ops/s
# Warmup Iteration  30: 228.746 ops/s
Iteration   1: 226.392 ops/s
Iteration   2: 229.647 ops/s
Iteration   3: 228.636 ops/s
Iteration   4: 229.102 ops/s
Iteration   5: 226.750 ops/s
Iteration   6: 229.477 ops/s
Iteration   7: 229.101 ops/s
Iteration   8: 229.811 ops/s
Iteration   9: 228.027 ops/s
Iteration  10: 228.590 ops/s
Iteration  11: 229.943 ops/s
Iteration  12: 229.130 ops/s
Iteration  13: 230.634 ops/s
Iteration  14: 227.073 ops/s
Iteration  15: 229.220 ops/s
Iteration  16: 229.025 ops/s
Iteration  17: 228.675 ops/s
Iteration  18: 229.821 ops/s
Iteration  19: 226.539 ops/s
Iteration  20: 228.423 ops/s
Iteration  21: 229.200 ops/s
Iteration  22: 230.142 ops/s
Iteration  23: 228.991 ops/s
Iteration  24: 229.232 ops/s
Iteration  25: 225.401 ops/s
Iteration  26: 229.793 ops/s
Iteration  27: 229.686 ops/s
Iteration  28: 230.171 ops/s
Iteration  29: 227.862 ops/s
Iteration  30: 229.003 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  228.783 ±(99.9%) 0.838 ops/s [Average]
  (min, avg, max) = (225.401, 228.783, 230.634), stdev = 1.255
  CI (99.9%): [227.945, 229.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt    Score   Error  Units
FastListTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  228.783 ± 0.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 214.486 ops/s
# Warmup Iteration   2: 244.198 ops/s
# Warmup Iteration   3: 326.027 ops/s
# Warmup Iteration   4: 329.551 ops/s
# Warmup Iteration   5: 327.421 ops/s
# Warmup Iteration   6: 326.355 ops/s
# Warmup Iteration   7: 326.848 ops/s
# Warmup Iteration   8: 326.655 ops/s
# Warmup Iteration   9: 322.661 ops/s
# Warmup Iteration  10: 300.019 ops/s
# Warmup Iteration  11: 252.097 ops/s
# Warmup Iteration  12: 305.570 ops/s
# Warmup Iteration  13: 303.338 ops/s
# Warmup Iteration  14: 306.955 ops/s
# Warmup Iteration  15: 304.863 ops/s
# Warmup Iteration  16: 305.316 ops/s
# Warmup Iteration  17: 305.876 ops/s
# Warmup Iteration  18: 304.709 ops/s
# Warmup Iteration  19: 305.831 ops/s
# Warmup Iteration  20: 305.842 ops/s
# Warmup Iteration  21: 301.522 ops/s
# Warmup Iteration  22: 302.644 ops/s
# Warmup Iteration  23: 301.862 ops/s
# Warmup Iteration  24: 303.308 ops/s
# Warmup Iteration  25: 303.862 ops/s
# Warmup Iteration  26: 302.887 ops/s
# Warmup Iteration  27: 305.007 ops/s
# Warmup Iteration  28: 304.980 ops/s
# Warmup Iteration  29: 303.456 ops/s
# Warmup Iteration  30: 305.229 ops/s
Iteration   1: 303.841 ops/s
Iteration   2: 301.447 ops/s
Iteration   3: 304.219 ops/s
Iteration   4: 305.625 ops/s
Iteration   5: 304.932 ops/s
Iteration   6: 305.590 ops/s
Iteration   7: 304.814 ops/s
Iteration   8: 305.716 ops/s
Iteration   9: 304.808 ops/s
Iteration  10: 305.431 ops/s
Iteration  11: 303.327 ops/s
Iteration  12: 300.166 ops/s
Iteration  13: 302.738 ops/s
Iteration  14: 299.403 ops/s
Iteration  15: 306.137 ops/s
Iteration  16: 300.321 ops/s
Iteration  17: 304.836 ops/s
Iteration  18: 300.605 ops/s
Iteration  19: 306.346 ops/s
Iteration  20: 302.777 ops/s
Iteration  21: 304.166 ops/s
Iteration  22: 298.450 ops/s
Iteration  23: 304.833 ops/s
Iteration  24: 302.960 ops/s
Iteration  25: 301.170 ops/s
Iteration  26: 304.433 ops/s
Iteration  27: 305.758 ops/s
Iteration  28: 302.473 ops/s
Iteration  29: 306.885 ops/s
Iteration  30: 304.191 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  303.613 ±(99.9%) 1.490 ops/s [Average]
  (min, avg, max) = (298.450, 303.613, 306.885), stdev = 2.230
  CI (99.9%): [302.123, 305.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt    Score   Error  Units
FastListTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  303.613 ± 1.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28228704.734 ops/s
# Warmup Iteration   2: 59786528.294 ops/s
# Warmup Iteration   3: 44410707.242 ops/s
# Warmup Iteration   4: 51991836.401 ops/s
# Warmup Iteration   5: 52313380.837 ops/s
# Warmup Iteration   6: 52197556.160 ops/s
# Warmup Iteration   7: 52301540.641 ops/s
# Warmup Iteration   8: 52440983.049 ops/s
# Warmup Iteration   9: 51793772.648 ops/s
# Warmup Iteration  10: 52217652.670 ops/s
# Warmup Iteration  11: 52122369.307 ops/s
# Warmup Iteration  12: 51981066.686 ops/s
# Warmup Iteration  13: 51973104.269 ops/s
# Warmup Iteration  14: 52344303.098 ops/s
# Warmup Iteration  15: 52039629.167 ops/s
# Warmup Iteration  16: 52384816.673 ops/s
# Warmup Iteration  17: 52525410.312 ops/s
# Warmup Iteration  18: 51915713.957 ops/s
# Warmup Iteration  19: 52535121.793 ops/s
# Warmup Iteration  20: 51989887.727 ops/s
# Warmup Iteration  21: 52435255.416 ops/s
# Warmup Iteration  22: 52394963.394 ops/s
# Warmup Iteration  23: 52380171.139 ops/s
# Warmup Iteration  24: 52390186.367 ops/s
# Warmup Iteration  25: 52374506.743 ops/s
# Warmup Iteration  26: 52427577.263 ops/s
# Warmup Iteration  27: 52493792.773 ops/s
# Warmup Iteration  28: 52389605.324 ops/s
# Warmup Iteration  29: 52329598.617 ops/s
# Warmup Iteration  30: 52381846.493 ops/s
Iteration   1: 52156194.839 ops/s
Iteration   2: 51690637.743 ops/s
Iteration   3: 52073378.744 ops/s
Iteration   4: 51383919.989 ops/s
Iteration   5: 52506104.046 ops/s
Iteration   6: 52361056.652 ops/s
Iteration   7: 52487946.169 ops/s
Iteration   8: 50858970.299 ops/s
Iteration   9: 52335443.242 ops/s
Iteration  10: 52359207.291 ops/s
Iteration  11: 52464833.468 ops/s
Iteration  12: 52397275.767 ops/s
Iteration  13: 52490080.262 ops/s
Iteration  14: 51551399.337 ops/s
Iteration  15: 51935162.668 ops/s
Iteration  16: 52207034.716 ops/s
Iteration  17: 51456918.863 ops/s
Iteration  18: 52475061.726 ops/s
Iteration  19: 52186969.385 ops/s
Iteration  20: 52123382.225 ops/s
Iteration  21: 52068568.884 ops/s
Iteration  22: 51622911.483 ops/s
Iteration  23: 52431807.211 ops/s
Iteration  24: 52063723.396 ops/s
Iteration  25: 52108278.400 ops/s
Iteration  26: 52485725.732 ops/s
Iteration  27: 52199741.044 ops/s
Iteration  28: 52355317.414 ops/s
Iteration  29: 51372013.352 ops/s
Iteration  30: 51549082.337 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumInteger":
  52058604.889 ±(99.9%) 287023.177 ops/s [Average]
  (min, avg, max) = (50858970.299, 52058604.889, 52506104.046), stdev = 429602.812
  CI (99.9%): [51771581.712, 52345628.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_sumInteger  thrpt   30  52058604.889 ± 287023.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28183990.146 ops/s
# Warmup Iteration   2: 59102870.978 ops/s
# Warmup Iteration   3: 44111357.094 ops/s
# Warmup Iteration   4: 52225094.036 ops/s
# Warmup Iteration   5: 52143097.098 ops/s
# Warmup Iteration   6: 52202375.189 ops/s
# Warmup Iteration   7: 52298613.473 ops/s
# Warmup Iteration   8: 52298098.147 ops/s
# Warmup Iteration   9: 52104222.462 ops/s
# Warmup Iteration  10: 52172519.053 ops/s
# Warmup Iteration  11: 52112646.019 ops/s
# Warmup Iteration  12: 51889389.602 ops/s
# Warmup Iteration  13: 51703706.959 ops/s
# Warmup Iteration  14: 51788841.406 ops/s
# Warmup Iteration  15: 52205643.259 ops/s
# Warmup Iteration  16: 52240118.579 ops/s
# Warmup Iteration  17: 52406960.651 ops/s
# Warmup Iteration  18: 52325697.082 ops/s
# Warmup Iteration  19: 51913398.759 ops/s
# Warmup Iteration  20: 52150457.509 ops/s
# Warmup Iteration  21: 52069781.308 ops/s
# Warmup Iteration  22: 52336748.899 ops/s
# Warmup Iteration  23: 52219639.569 ops/s
# Warmup Iteration  24: 52306372.209 ops/s
# Warmup Iteration  25: 52269654.839 ops/s
# Warmup Iteration  26: 52375291.242 ops/s
# Warmup Iteration  27: 52267665.418 ops/s
# Warmup Iteration  28: 52373175.243 ops/s
# Warmup Iteration  29: 52292082.550 ops/s
# Warmup Iteration  30: 51930018.491 ops/s
Iteration   1: 51487816.455 ops/s
Iteration   2: 52210899.752 ops/s
Iteration   3: 50737984.379 ops/s
Iteration   4: 52301406.607 ops/s
Iteration   5: 52253183.321 ops/s
Iteration   6: 51713811.489 ops/s
Iteration   7: 52268237.096 ops/s
Iteration   8: 52321307.146 ops/s
Iteration   9: 52319431.340 ops/s
Iteration  10: 52135556.718 ops/s
Iteration  11: 52424873.962 ops/s
Iteration  12: 51600166.994 ops/s
Iteration  13: 52359718.437 ops/s
Iteration  14: 51150242.979 ops/s
Iteration  15: 52290011.623 ops/s
Iteration  16: 52084357.240 ops/s
Iteration  17: 52298052.499 ops/s
Iteration  18: 52037135.083 ops/s
Iteration  19: 52068857.519 ops/s
Iteration  20: 52245802.365 ops/s
Iteration  21: 52210423.978 ops/s
Iteration  22: 51862632.896 ops/s
Iteration  23: 52316395.298 ops/s
Iteration  24: 51683157.818 ops/s
Iteration  25: 52409212.963 ops/s
Iteration  26: 52343480.083 ops/s
Iteration  27: 52448517.366 ops/s
Iteration  28: 52062438.637 ops/s
Iteration  29: 52164686.061 ops/s
Iteration  30: 52066546.743 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_sumLong":
  52062544.828 ±(99.9%) 264313.298 ops/s [Average]
  (min, avg, max) = (50737984.379, 52062544.828, 52448517.366), stdev = 395611.731
  CI (99.9%): [51798231.530, 52326858.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_sumLong  thrpt   30  52062544.828 ± 264313.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20325908.809 ops/s
# Warmup Iteration   2: 41299782.922 ops/s
# Warmup Iteration   3: 41183467.335 ops/s
# Warmup Iteration   4: 34418613.734 ops/s
# Warmup Iteration   5: 40967347.171 ops/s
# Warmup Iteration   6: 40935400.424 ops/s
# Warmup Iteration   7: 40952706.486 ops/s
# Warmup Iteration   8: 41053988.795 ops/s
# Warmup Iteration   9: 40640718.012 ops/s
# Warmup Iteration  10: 40834571.652 ops/s
# Warmup Iteration  11: 40650978.179 ops/s
# Warmup Iteration  12: 40782874.722 ops/s
# Warmup Iteration  13: 40862047.277 ops/s
# Warmup Iteration  14: 41011201.677 ops/s
# Warmup Iteration  15: 40996237.502 ops/s
# Warmup Iteration  16: 41054406.071 ops/s
# Warmup Iteration  17: 40866631.487 ops/s
# Warmup Iteration  18: 40649243.617 ops/s
# Warmup Iteration  19: 40678836.743 ops/s
# Warmup Iteration  20: 40620289.978 ops/s
# Warmup Iteration  21: 40938781.176 ops/s
# Warmup Iteration  22: 40724598.311 ops/s
# Warmup Iteration  23: 40972894.876 ops/s
# Warmup Iteration  24: 40292786.301 ops/s
# Warmup Iteration  25: 40851882.325 ops/s
# Warmup Iteration  26: 41023691.626 ops/s
# Warmup Iteration  27: 40990732.273 ops/s
# Warmup Iteration  28: 41010908.132 ops/s
# Warmup Iteration  29: 40984516.272 ops/s
# Warmup Iteration  30: 40970847.233 ops/s
Iteration   1: 40975387.085 ops/s
Iteration   2: 39639534.808 ops/s
Iteration   3: 40639967.730 ops/s
Iteration   4: 41184765.003 ops/s
Iteration   5: 40665844.836 ops/s
Iteration   6: 40903657.929 ops/s
Iteration   7: 40988773.610 ops/s
Iteration   8: 41067148.959 ops/s
Iteration   9: 40630735.875 ops/s
Iteration  10: 41150740.046 ops/s
Iteration  11: 40426922.333 ops/s
Iteration  12: 40837148.705 ops/s
Iteration  13: 40859444.048 ops/s
Iteration  14: 41065127.251 ops/s
Iteration  15: 40997039.060 ops/s
Iteration  16: 40437198.297 ops/s
Iteration  17: 41075472.270 ops/s
Iteration  18: 40377820.203 ops/s
Iteration  19: 41011259.667 ops/s
Iteration  20: 41093174.605 ops/s
Iteration  21: 41084077.041 ops/s
Iteration  22: 40626645.868 ops/s
Iteration  23: 40744491.719 ops/s
Iteration  24: 40800901.055 ops/s
Iteration  25: 41014156.784 ops/s
Iteration  26: 41068449.891 ops/s
Iteration  27: 40733520.321 ops/s
Iteration  28: 41070585.041 ops/s
Iteration  29: 40995876.078 ops/s
Iteration  30: 41127139.717 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeDouble":
  40843100.194 ±(99.9%) 215142.225 ops/s [Average]
  (min, avg, max) = (39639534.808, 40843100.194, 41184765.003), stdev = 322014.779
  CI (99.9%): [40627957.969, 41058242.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_summarizeDouble  thrpt   30  40843100.194 ± 215142.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18171487.234 ops/s
# Warmup Iteration   2: 36865627.715 ops/s
# Warmup Iteration   3: 37933645.526 ops/s
# Warmup Iteration   4: 29637594.292 ops/s
# Warmup Iteration   5: 32045658.764 ops/s
# Warmup Iteration   6: 32332390.208 ops/s
# Warmup Iteration   7: 32533214.014 ops/s
# Warmup Iteration   8: 32584340.019 ops/s
# Warmup Iteration   9: 32647881.496 ops/s
# Warmup Iteration  10: 32560437.320 ops/s
# Warmup Iteration  11: 32583893.563 ops/s
# Warmup Iteration  12: 32544688.741 ops/s
# Warmup Iteration  13: 32493692.682 ops/s
# Warmup Iteration  14: 32562100.990 ops/s
# Warmup Iteration  15: 32239861.117 ops/s
# Warmup Iteration  16: 32359872.147 ops/s
# Warmup Iteration  17: 32660072.696 ops/s
# Warmup Iteration  18: 32761032.375 ops/s
# Warmup Iteration  19: 32694287.940 ops/s
# Warmup Iteration  20: 32663285.699 ops/s
# Warmup Iteration  21: 32483857.873 ops/s
# Warmup Iteration  22: 32414682.509 ops/s
# Warmup Iteration  23: 32606744.263 ops/s
# Warmup Iteration  24: 32581082.234 ops/s
# Warmup Iteration  25: 32385746.734 ops/s
# Warmup Iteration  26: 32390647.090 ops/s
# Warmup Iteration  27: 32583869.141 ops/s
# Warmup Iteration  28: 32485951.608 ops/s
# Warmup Iteration  29: 32587652.484 ops/s
# Warmup Iteration  30: 32504431.248 ops/s
Iteration   1: 32617120.318 ops/s
Iteration   2: 32676924.650 ops/s
Iteration   3: 32787970.507 ops/s
Iteration   4: 32729881.667 ops/s
Iteration   5: 32594017.246 ops/s
Iteration   6: 32649358.321 ops/s
Iteration   7: 32153300.603 ops/s
Iteration   8: 32194329.133 ops/s
Iteration   9: 32071871.283 ops/s
Iteration  10: 32747630.052 ops/s
Iteration  11: 32762019.701 ops/s
Iteration  12: 32247230.161 ops/s
Iteration  13: 32822335.500 ops/s
Iteration  14: 32640674.421 ops/s
Iteration  15: 32751694.569 ops/s
Iteration  16: 32679229.495 ops/s
Iteration  17: 32287776.863 ops/s
Iteration  18: 32711954.088 ops/s
Iteration  19: 32262972.731 ops/s
Iteration  20: 32759730.589 ops/s
Iteration  21: 32753186.830 ops/s
Iteration  22: 32678489.237 ops/s
Iteration  23: 32622606.248 ops/s
Iteration  24: 32721095.952 ops/s
Iteration  25: 32399673.662 ops/s
Iteration  26: 32700961.793 ops/s
Iteration  27: 32705346.246 ops/s
Iteration  28: 32653927.971 ops/s
Iteration  29: 32695286.607 ops/s
Iteration  30: 32244846.448 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeFloat":
  32577448.096 ±(99.9%) 148619.206 ops/s [Average]
  (min, avg, max) = (32071871.283, 32577448.096, 32822335.500), stdev = 222446.248
  CI (99.9%): [32428828.890, 32726067.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_summarizeFloat  thrpt   30  32577448.096 ± 148619.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30593321.962 ops/s
# Warmup Iteration   2: 59965613.083 ops/s
# Warmup Iteration   3: 50858356.819 ops/s
# Warmup Iteration   4: 59953323.647 ops/s
# Warmup Iteration   5: 59967250.037 ops/s
# Warmup Iteration   6: 59925099.217 ops/s
# Warmup Iteration   7: 59813330.549 ops/s
# Warmup Iteration   8: 59463570.993 ops/s
# Warmup Iteration   9: 59657412.358 ops/s
# Warmup Iteration  10: 60033775.573 ops/s
# Warmup Iteration  11: 59830255.448 ops/s
# Warmup Iteration  12: 60078811.401 ops/s
# Warmup Iteration  13: 59882388.296 ops/s
# Warmup Iteration  14: 59375926.352 ops/s
# Warmup Iteration  15: 60026768.873 ops/s
# Warmup Iteration  16: 59568473.046 ops/s
# Warmup Iteration  17: 60064236.169 ops/s
# Warmup Iteration  18: 59855707.238 ops/s
# Warmup Iteration  19: 59897725.992 ops/s
# Warmup Iteration  20: 59936969.936 ops/s
# Warmup Iteration  21: 60041796.388 ops/s
# Warmup Iteration  22: 59843184.634 ops/s
# Warmup Iteration  23: 59843723.506 ops/s
# Warmup Iteration  24: 59896228.483 ops/s
# Warmup Iteration  25: 59918813.518 ops/s
# Warmup Iteration  26: 59704514.013 ops/s
# Warmup Iteration  27: 59919832.872 ops/s
# Warmup Iteration  28: 59779225.275 ops/s
# Warmup Iteration  29: 59652346.263 ops/s
# Warmup Iteration  30: 58825414.835 ops/s
Iteration   1: 59945357.220 ops/s
Iteration   2: 59929602.753 ops/s
Iteration   3: 59967916.448 ops/s
Iteration   4: 58901122.867 ops/s
Iteration   5: 60055335.954 ops/s
Iteration   6: 59177483.180 ops/s
Iteration   7: 60044735.378 ops/s
Iteration   8: 59807839.228 ops/s
Iteration   9: 59988267.485 ops/s
Iteration  10: 60079193.445 ops/s
Iteration  11: 59709211.292 ops/s
Iteration  12: 59111890.132 ops/s
Iteration  13: 60147437.819 ops/s
Iteration  14: 60036480.471 ops/s
Iteration  15: 60108041.903 ops/s
Iteration  16: 60168367.791 ops/s
Iteration  17: 60027971.741 ops/s
Iteration  18: 60007888.572 ops/s
Iteration  19: 60137305.347 ops/s
Iteration  20: 60083559.624 ops/s
Iteration  21: 59933537.938 ops/s
Iteration  22: 59528370.753 ops/s
Iteration  23: 60033253.702 ops/s
Iteration  24: 59829940.837 ops/s
Iteration  25: 59998513.047 ops/s
Iteration  26: 59878771.836 ops/s
Iteration  27: 60274143.526 ops/s
Iteration  28: 59970500.238 ops/s
Iteration  29: 59940025.443 ops/s
Iteration  30: 59882084.466 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeInt":
  59890138.348 ±(99.9%) 211549.407 ops/s [Average]
  (min, avg, max) = (58901122.867, 59890138.348, 60274143.526), stdev = 316637.218
  CI (99.9%): [59678588.940, 60101687.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_summarizeInt  thrpt   30  59890138.348 ± 211549.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31025183.228 ops/s
# Warmup Iteration   2: 60857993.997 ops/s
# Warmup Iteration   3: 51311058.818 ops/s
# Warmup Iteration   4: 59945618.130 ops/s
# Warmup Iteration   5: 60261524.038 ops/s
# Warmup Iteration   6: 60271082.202 ops/s
# Warmup Iteration   7: 60162257.174 ops/s
# Warmup Iteration   8: 60360983.392 ops/s
# Warmup Iteration   9: 60119643.003 ops/s
# Warmup Iteration  10: 60357264.383 ops/s
# Warmup Iteration  11: 60416178.167 ops/s
# Warmup Iteration  12: 59492564.985 ops/s
# Warmup Iteration  13: 60445341.878 ops/s
# Warmup Iteration  14: 60450979.494 ops/s
# Warmup Iteration  15: 59753932.741 ops/s
# Warmup Iteration  16: 60438563.279 ops/s
# Warmup Iteration  17: 59689561.541 ops/s
# Warmup Iteration  18: 60437960.474 ops/s
# Warmup Iteration  19: 60360064.109 ops/s
# Warmup Iteration  20: 59864376.927 ops/s
# Warmup Iteration  21: 60390578.308 ops/s
# Warmup Iteration  22: 60411970.824 ops/s
# Warmup Iteration  23: 60233515.065 ops/s
# Warmup Iteration  24: 60276193.410 ops/s
# Warmup Iteration  25: 60138602.490 ops/s
# Warmup Iteration  26: 60406829.546 ops/s
# Warmup Iteration  27: 59819204.108 ops/s
# Warmup Iteration  28: 60364963.026 ops/s
# Warmup Iteration  29: 59641821.249 ops/s
# Warmup Iteration  30: 59826156.344 ops/s
Iteration   1: 60324003.585 ops/s
Iteration   2: 60531970.183 ops/s
Iteration   3: 60193698.391 ops/s
Iteration   4: 60547708.676 ops/s
Iteration   5: 60350122.997 ops/s
Iteration   6: 60411327.285 ops/s
Iteration   7: 60200248.248 ops/s
Iteration   8: 59902103.439 ops/s
Iteration   9: 59556689.333 ops/s
Iteration  10: 60407417.952 ops/s
Iteration  11: 60297872.176 ops/s
Iteration  12: 59880796.003 ops/s
Iteration  13: 60431112.827 ops/s
Iteration  14: 60487667.166 ops/s
Iteration  15: 60230033.063 ops/s
Iteration  16: 60370058.965 ops/s
Iteration  17: 60527614.762 ops/s
Iteration  18: 60394224.644 ops/s
Iteration  19: 60380473.956 ops/s
Iteration  20: 60459669.464 ops/s
Iteration  21: 60545816.719 ops/s
Iteration  22: 60439886.461 ops/s
Iteration  23: 60334115.450 ops/s
Iteration  24: 60389894.507 ops/s
Iteration  25: 59390162.374 ops/s
Iteration  26: 60051969.128 ops/s
Iteration  27: 59585036.075 ops/s
Iteration  28: 58377726.623 ops/s
Iteration  29: 60009159.589 ops/s
Iteration  30: 60187602.407 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_summarizeLong":
  60173206.082 ±(99.9%) 304015.338 ops/s [Average]
  (min, avg, max) = (58377726.623, 60173206.082, 60547708.676), stdev = 455035.880
  CI (99.9%): [59869190.744, 60477221.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_summarizeLong  thrpt   30  60173206.082 ± 304015.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2127967.679 ops/s
# Warmup Iteration   2: 4978468.927 ops/s
# Warmup Iteration   3: 5044050.110 ops/s
# Warmup Iteration   4: 4206582.824 ops/s
# Warmup Iteration   5: 5045974.642 ops/s
# Warmup Iteration   6: 5030979.926 ops/s
# Warmup Iteration   7: 5048605.102 ops/s
# Warmup Iteration   8: 5055204.448 ops/s
# Warmup Iteration   9: 5007288.687 ops/s
# Warmup Iteration  10: 5041882.867 ops/s
# Warmup Iteration  11: 5055395.318 ops/s
# Warmup Iteration  12: 5034697.533 ops/s
# Warmup Iteration  13: 5006613.762 ops/s
# Warmup Iteration  14: 4967799.916 ops/s
# Warmup Iteration  15: 5014340.955 ops/s
# Warmup Iteration  16: 5028947.630 ops/s
# Warmup Iteration  17: 4973420.489 ops/s
# Warmup Iteration  18: 5034317.016 ops/s
# Warmup Iteration  19: 5028004.423 ops/s
# Warmup Iteration  20: 5042305.005 ops/s
# Warmup Iteration  21: 5042046.772 ops/s
# Warmup Iteration  22: 5045114.630 ops/s
# Warmup Iteration  23: 5040498.771 ops/s
# Warmup Iteration  24: 5036598.452 ops/s
# Warmup Iteration  25: 5039524.791 ops/s
# Warmup Iteration  26: 5038410.039 ops/s
# Warmup Iteration  27: 5044066.708 ops/s
# Warmup Iteration  28: 5035892.198 ops/s
# Warmup Iteration  29: 4970093.065 ops/s
# Warmup Iteration  30: 5003018.788 ops/s
Iteration   1: 5047548.016 ops/s
Iteration   2: 5046409.808 ops/s
Iteration   3: 5018662.456 ops/s
Iteration   4: 5048395.904 ops/s
Iteration   5: 4950150.755 ops/s
Iteration   6: 5024134.783 ops/s
Iteration   7: 5077992.769 ops/s
Iteration   8: 5044657.598 ops/s
Iteration   9: 5058698.104 ops/s
Iteration  10: 5022174.859 ops/s
Iteration  11: 5053207.679 ops/s
Iteration  12: 5031080.708 ops/s
Iteration  13: 5007282.706 ops/s
Iteration  14: 4994437.651 ops/s
Iteration  15: 5048164.403 ops/s
Iteration  16: 5039149.694 ops/s
Iteration  17: 4982624.684 ops/s
Iteration  18: 5052751.311 ops/s
Iteration  19: 5051442.388 ops/s
Iteration  20: 5033499.292 ops/s
Iteration  21: 5043930.878 ops/s
Iteration  22: 4970632.665 ops/s
Iteration  23: 5061631.115 ops/s
Iteration  24: 5060226.753 ops/s
Iteration  25: 4966377.107 ops/s
Iteration  26: 5051786.694 ops/s
Iteration  27: 5017343.799 ops/s
Iteration  28: 4959448.450 ops/s
Iteration  29: 5054642.652 ops/s
Iteration  30: 4954728.542 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take":
  5025773.807 ±(99.9%) 24138.902 ops/s [Average]
  (min, avg, max) = (4950150.755, 5025773.807, 5077992.769), stdev = 36129.975
  CI (99.9%): [5001634.906, 5049912.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_take  thrpt   30  5025773.807 ± 24138.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3351145.440 ops/s
# Warmup Iteration   2: 8025229.316 ops/s
# Warmup Iteration   3: 8000216.849 ops/s
# Warmup Iteration   4: 6668757.662 ops/s
# Warmup Iteration   5: 8033296.152 ops/s
# Warmup Iteration   6: 8049293.237 ops/s
# Warmup Iteration   7: 7986760.664 ops/s
# Warmup Iteration   8: 8039093.925 ops/s
# Warmup Iteration   9: 8049636.711 ops/s
# Warmup Iteration  10: 8026991.376 ops/s
# Warmup Iteration  11: 8017101.289 ops/s
# Warmup Iteration  12: 8038928.755 ops/s
# Warmup Iteration  13: 8046543.013 ops/s
# Warmup Iteration  14: 8048046.041 ops/s
# Warmup Iteration  15: 8042632.374 ops/s
# Warmup Iteration  16: 8053155.203 ops/s
# Warmup Iteration  17: 8023008.613 ops/s
# Warmup Iteration  18: 8014338.412 ops/s
# Warmup Iteration  19: 8035385.014 ops/s
# Warmup Iteration  20: 8000974.313 ops/s
# Warmup Iteration  21: 8067980.054 ops/s
# Warmup Iteration  22: 8069943.060 ops/s
# Warmup Iteration  23: 8078002.541 ops/s
# Warmup Iteration  24: 8076714.520 ops/s
# Warmup Iteration  25: 7984605.663 ops/s
# Warmup Iteration  26: 8014062.749 ops/s
# Warmup Iteration  27: 8075131.155 ops/s
# Warmup Iteration  28: 8067790.796 ops/s
# Warmup Iteration  29: 8093535.088 ops/s
# Warmup Iteration  30: 8051776.718 ops/s
Iteration   1: 8079963.946 ops/s
Iteration   2: 8029253.008 ops/s
Iteration   3: 8049088.865 ops/s
Iteration   4: 8072594.557 ops/s
Iteration   5: 8078173.023 ops/s
Iteration   6: 7928416.122 ops/s
Iteration   7: 8076953.082 ops/s
Iteration   8: 8064256.743 ops/s
Iteration   9: 8069140.786 ops/s
Iteration  10: 8070272.070 ops/s
Iteration  11: 8073904.556 ops/s
Iteration  12: 7932226.328 ops/s
Iteration  13: 8103806.420 ops/s
Iteration  14: 8075368.813 ops/s
Iteration  15: 8079976.946 ops/s
Iteration  16: 8067869.922 ops/s
Iteration  17: 8097089.527 ops/s
Iteration  18: 8074549.064 ops/s
Iteration  19: 8057628.857 ops/s
Iteration  20: 7869288.721 ops/s
Iteration  21: 8086180.313 ops/s
Iteration  22: 7921423.124 ops/s
Iteration  23: 8112157.016 ops/s
Iteration  24: 8042549.859 ops/s
Iteration  25: 7957911.625 ops/s
Iteration  26: 8098667.927 ops/s
Iteration  27: 8078170.765 ops/s
Iteration  28: 8027773.134 ops/s
Iteration  29: 8072250.940 ops/s
Iteration  30: 8055355.973 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_takeWhile":
  8046742.068 ±(99.9%) 40764.224 ops/s [Average]
  (min, avg, max) = (7869288.721, 8046742.068, 8112157.016), stdev = 61013.977
  CI (99.9%): [8005977.843, 8087506.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_takeWhile  thrpt   30  8046742.068 ± 40764.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748297.284 ops/s
# Warmup Iteration   2: 779537.576 ops/s
# Warmup Iteration   3: 1008844.235 ops/s
# Warmup Iteration   4: 1011647.206 ops/s
# Warmup Iteration   5: 1008486.214 ops/s
# Warmup Iteration   6: 1000649.037 ops/s
# Warmup Iteration   7: 1007244.391 ops/s
# Warmup Iteration   8: 1010868.858 ops/s
# Warmup Iteration   9: 1008765.458 ops/s
# Warmup Iteration  10: 1010281.309 ops/s
# Warmup Iteration  11: 914255.611 ops/s
# Warmup Iteration  12: 953474.605 ops/s
# Warmup Iteration  13: 1006353.911 ops/s
# Warmup Iteration  14: 995341.413 ops/s
# Warmup Iteration  15: 1003942.632 ops/s
# Warmup Iteration  16: 987099.029 ops/s
# Warmup Iteration  17: 1068305.524 ops/s
# Warmup Iteration  18: 1064531.502 ops/s
# Warmup Iteration  19: 1059305.015 ops/s
# Warmup Iteration  20: 1069273.061 ops/s
# Warmup Iteration  21: 1057938.755 ops/s
# Warmup Iteration  22: 1060743.467 ops/s
# Warmup Iteration  23: 1066330.321 ops/s
# Warmup Iteration  24: 1067158.150 ops/s
# Warmup Iteration  25: 1063805.573 ops/s
# Warmup Iteration  26: 1060931.126 ops/s
# Warmup Iteration  27: 1068555.468 ops/s
# Warmup Iteration  28: 1061067.348 ops/s
# Warmup Iteration  29: 1058311.741 ops/s
# Warmup Iteration  30: 1064998.317 ops/s
Iteration   1: 1066374.530 ops/s
Iteration   2: 1067396.267 ops/s
Iteration   3: 1070409.562 ops/s
Iteration   4: 1062875.909 ops/s
Iteration   5: 1072140.387 ops/s
Iteration   6: 1059281.797 ops/s
Iteration   7: 1066290.059 ops/s
Iteration   8: 1055035.536 ops/s
Iteration   9: 1043304.451 ops/s
Iteration  10: 1067967.173 ops/s
Iteration  11: 1052757.034 ops/s
Iteration  12: 1067564.746 ops/s
Iteration  13: 1071385.823 ops/s
Iteration  14: 1068238.214 ops/s
Iteration  15: 1066941.897 ops/s
Iteration  16: 1069539.461 ops/s
Iteration  17: 1060374.103 ops/s
Iteration  18: 1064026.013 ops/s
Iteration  19: 1070129.899 ops/s
Iteration  20: 1071565.540 ops/s
Iteration  21: 1067629.489 ops/s
Iteration  22: 1046319.117 ops/s
Iteration  23: 1064559.945 ops/s
Iteration  24: 1067942.722 ops/s
Iteration  25: 1066590.121 ops/s
Iteration  26: 1066892.321 ops/s
Iteration  27: 1067984.462 ops/s
Iteration  28: 1065820.189 ops/s
Iteration  29: 1069876.123 ops/s
Iteration  30: 1062745.468 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_take_throws":
  1064665.279 ±(99.9%) 4700.355 ops/s [Average]
  (min, avg, max) = (1043304.451, 1064665.279, 1072140.387), stdev = 7035.271
  CI (99.9%): [1059964.924, 1069365.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_take_throws  thrpt   30  1064665.279 ± 4700.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5827155.207 ops/s
# Warmup Iteration   2: 13254175.912 ops/s
# Warmup Iteration   3: 14321706.273 ops/s
# Warmup Iteration   4: 11918753.496 ops/s
# Warmup Iteration   5: 14214871.961 ops/s
# Warmup Iteration   6: 14368417.418 ops/s
# Warmup Iteration   7: 14355633.830 ops/s
# Warmup Iteration   8: 14284728.200 ops/s
# Warmup Iteration   9: 14278555.638 ops/s
# Warmup Iteration  10: 14163580.266 ops/s
# Warmup Iteration  11: 14378333.626 ops/s
# Warmup Iteration  12: 14257354.906 ops/s
# Warmup Iteration  13: 14371528.927 ops/s
# Warmup Iteration  14: 14191049.863 ops/s
# Warmup Iteration  15: 14177219.920 ops/s
# Warmup Iteration  16: 14390317.769 ops/s
# Warmup Iteration  17: 14403025.955 ops/s
# Warmup Iteration  18: 14338603.299 ops/s
# Warmup Iteration  19: 14323764.502 ops/s
# Warmup Iteration  20: 14341220.379 ops/s
# Warmup Iteration  21: 14335824.790 ops/s
# Warmup Iteration  22: 14412965.360 ops/s
# Warmup Iteration  23: 14401888.092 ops/s
# Warmup Iteration  24: 14123797.404 ops/s
# Warmup Iteration  25: 14315263.326 ops/s
# Warmup Iteration  26: 14159724.144 ops/s
# Warmup Iteration  27: 14312678.956 ops/s
# Warmup Iteration  28: 14288469.428 ops/s
# Warmup Iteration  29: 14286827.454 ops/s
# Warmup Iteration  30: 14320376.166 ops/s
Iteration   1: 14361236.312 ops/s
Iteration   2: 14341638.886 ops/s
Iteration   3: 14111877.905 ops/s
Iteration   4: 14348647.496 ops/s
Iteration   5: 14349007.359 ops/s
Iteration   6: 14184260.273 ops/s
Iteration   7: 14225677.491 ops/s
Iteration   8: 14278563.254 ops/s
Iteration   9: 14371790.139 ops/s
Iteration  10: 14354558.730 ops/s
Iteration  11: 14387213.204 ops/s
Iteration  12: 14056312.772 ops/s
Iteration  13: 14266284.778 ops/s
Iteration  14: 14341353.952 ops/s
Iteration  15: 14395337.828 ops/s
Iteration  16: 14336489.758 ops/s
Iteration  17: 14237534.167 ops/s
Iteration  18: 14332562.045 ops/s
Iteration  19: 14043890.346 ops/s
Iteration  20: 14337496.808 ops/s
Iteration  21: 14290152.955 ops/s
Iteration  22: 14125636.906 ops/s
Iteration  23: 14341075.437 ops/s
Iteration  24: 14343366.441 ops/s
Iteration  25: 14045544.733 ops/s
Iteration  26: 14421124.479 ops/s
Iteration  27: 14261324.370 ops/s
Iteration  28: 14332074.503 ops/s
Iteration  29: 14361753.255 ops/s
Iteration  30: 14394657.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_tap":
  14285948.128 ±(99.9%) 73212.224 ops/s [Average]
  (min, avg, max) = (14043890.346, 14285948.128, 14421124.479), stdev = 109580.619
  CI (99.9%): [14212735.904, 14359160.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_tap  thrpt   30  14285948.128 ± 73212.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllAtIndexEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllAtIndexEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2957622.478 ops/s
# Warmup Iteration   2: 5113667.800 ops/s
# Warmup Iteration   3: 6034806.813 ops/s
# Warmup Iteration   4: 6092033.255 ops/s
# Warmup Iteration   5: 6119385.838 ops/s
# Warmup Iteration   6: 6103422.022 ops/s
# Warmup Iteration   7: 6125323.571 ops/s
# Warmup Iteration   8: 6043303.168 ops/s
# Warmup Iteration   9: 6090860.732 ops/s
# Warmup Iteration  10: 6148594.852 ops/s
# Warmup Iteration  11: 5975973.299 ops/s
# Warmup Iteration  12: 6053946.226 ops/s
# Warmup Iteration  13: 6121632.207 ops/s
# Warmup Iteration  14: 6143615.251 ops/s
# Warmup Iteration  15: 6111777.330 ops/s
# Warmup Iteration  16: 6139881.491 ops/s
# Warmup Iteration  17: 6145481.376 ops/s
# Warmup Iteration  18: 6138064.171 ops/s
# Warmup Iteration  19: 6175665.904 ops/s
# Warmup Iteration  20: 6133658.239 ops/s
# Warmup Iteration  21: 6144601.158 ops/s
# Warmup Iteration  22: 6124321.348 ops/s
# Warmup Iteration  23: 6088555.534 ops/s
# Warmup Iteration  24: 6112866.573 ops/s
# Warmup Iteration  25: 6095671.927 ops/s
# Warmup Iteration  26: 6139935.009 ops/s
# Warmup Iteration  27: 6135291.814 ops/s
# Warmup Iteration  28: 6097990.468 ops/s
# Warmup Iteration  29: 6123050.237 ops/s
# Warmup Iteration  30: 6142100.377 ops/s
Iteration   1: 6122838.164 ops/s
Iteration   2: 6135583.566 ops/s
Iteration   3: 6028039.731 ops/s
Iteration   4: 6136288.792 ops/s
Iteration   5: 6108167.183 ops/s
Iteration   6: 5943324.226 ops/s
Iteration   7: 6112668.978 ops/s
Iteration   8: 6127447.643 ops/s
Iteration   9: 6147692.696 ops/s
Iteration  10: 6038415.091 ops/s
Iteration  11: 6154737.998 ops/s
Iteration  12: 6132720.591 ops/s
Iteration  13: 6145989.633 ops/s
Iteration  14: 6144503.475 ops/s
Iteration  15: 6101840.762 ops/s
Iteration  16: 6126347.252 ops/s
Iteration  17: 6128728.575 ops/s
Iteration  18: 6151042.227 ops/s
Iteration  19: 6128216.814 ops/s
Iteration  20: 6150931.322 ops/s
Iteration  21: 6155864.415 ops/s
Iteration  22: 6062925.169 ops/s
Iteration  23: 6131578.887 ops/s
Iteration  24: 6154902.198 ops/s
Iteration  25: 6152536.213 ops/s
Iteration  26: 6058097.959 ops/s
Iteration  27: 6129786.379 ops/s
Iteration  28: 6011654.715 ops/s
Iteration  29: 6132168.434 ops/s
Iteration  30: 6116516.638 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllAtIndexEmpty":
  6112385.191 ±(99.9%) 33744.801 ops/s [Average]
  (min, avg, max) = (5943324.226, 6112385.191, 6155864.415), stdev = 50507.634
  CI (99.9%): [6078640.390, 6146129.992] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testAddAllAtIndexEmpty  thrpt   30  6112385.191 ± 33744.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6805516.604 ops/s
# Warmup Iteration   2: 11453247.291 ops/s
# Warmup Iteration   3: 13524185.479 ops/s
# Warmup Iteration   4: 13539619.108 ops/s
# Warmup Iteration   5: 13654646.051 ops/s
# Warmup Iteration   6: 13652526.012 ops/s
# Warmup Iteration   7: 13663611.980 ops/s
# Warmup Iteration   8: 13679617.482 ops/s
# Warmup Iteration   9: 13387671.373 ops/s
# Warmup Iteration  10: 13723217.174 ops/s
# Warmup Iteration  11: 13469844.062 ops/s
# Warmup Iteration  12: 13664294.488 ops/s
# Warmup Iteration  13: 13605811.650 ops/s
# Warmup Iteration  14: 13673752.264 ops/s
# Warmup Iteration  15: 13667090.510 ops/s
# Warmup Iteration  16: 13626720.254 ops/s
# Warmup Iteration  17: 13642727.601 ops/s
# Warmup Iteration  18: 13699545.869 ops/s
# Warmup Iteration  19: 13702837.661 ops/s
# Warmup Iteration  20: 13635608.025 ops/s
# Warmup Iteration  21: 13649707.335 ops/s
# Warmup Iteration  22: 13616564.944 ops/s
# Warmup Iteration  23: 13646639.714 ops/s
# Warmup Iteration  24: 13521467.447 ops/s
# Warmup Iteration  25: 13528754.243 ops/s
# Warmup Iteration  26: 13659179.355 ops/s
# Warmup Iteration  27: 13534220.316 ops/s
# Warmup Iteration  28: 13593317.183 ops/s
# Warmup Iteration  29: 13679893.359 ops/s
# Warmup Iteration  30: 13632238.957 ops/s
Iteration   1: 13676429.698 ops/s
Iteration   2: 13694405.569 ops/s
Iteration   3: 13644393.642 ops/s
Iteration   4: 13590659.373 ops/s
Iteration   5: 13745779.252 ops/s
Iteration   6: 13623001.378 ops/s
Iteration   7: 13647148.136 ops/s
Iteration   8: 13694290.628 ops/s
Iteration   9: 13648013.961 ops/s
Iteration  10: 13634338.887 ops/s
Iteration  11: 13686502.761 ops/s
Iteration  12: 13711742.231 ops/s
Iteration  13: 13652490.924 ops/s
Iteration  14: 13453603.641 ops/s
Iteration  15: 13723510.452 ops/s
Iteration  16: 13745500.056 ops/s
Iteration  17: 13660511.829 ops/s
Iteration  18: 13546809.428 ops/s
Iteration  19: 13657384.388 ops/s
Iteration  20: 13607949.307 ops/s
Iteration  21: 13672249.978 ops/s
Iteration  22: 13642725.060 ops/s
Iteration  23: 13218289.720 ops/s
Iteration  24: 13709491.552 ops/s
Iteration  25: 13671536.550 ops/s
Iteration  26: 13743639.576 ops/s
Iteration  27: 13722361.784 ops/s
Iteration  28: 13740020.699 ops/s
Iteration  29: 13655940.206 ops/s
Iteration  30: 13591803.194 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddAllEmpty":
  13647084.129 ±(99.9%) 68559.253 ops/s [Average]
  (min, avg, max) = (13218289.720, 13647084.129, 13745779.252), stdev = 102616.271
  CI (99.9%): [13578524.875, 13715643.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testAddAllEmpty  thrpt   30  13647084.129 ± 68559.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddWithZeroBasedConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddWithZeroBasedConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9642783.300 ops/s
# Warmup Iteration   2: 20295020.038 ops/s
# Warmup Iteration   3: 17219514.256 ops/s
# Warmup Iteration   4: 20656742.865 ops/s
# Warmup Iteration   5: 20487274.371 ops/s
# Warmup Iteration   6: 20546876.104 ops/s
# Warmup Iteration   7: 20704164.239 ops/s
# Warmup Iteration   8: 20646012.940 ops/s
# Warmup Iteration   9: 20471678.218 ops/s
# Warmup Iteration  10: 20676050.581 ops/s
# Warmup Iteration  11: 20653583.679 ops/s
# Warmup Iteration  12: 20564816.533 ops/s
# Warmup Iteration  13: 20678799.606 ops/s
# Warmup Iteration  14: 20695477.704 ops/s
# Warmup Iteration  15: 20681216.447 ops/s
# Warmup Iteration  16: 20658170.723 ops/s
# Warmup Iteration  17: 20690356.584 ops/s
# Warmup Iteration  18: 20643506.360 ops/s
# Warmup Iteration  19: 20673870.111 ops/s
# Warmup Iteration  20: 20613367.542 ops/s
# Warmup Iteration  21: 20488403.184 ops/s
# Warmup Iteration  22: 20531546.342 ops/s
# Warmup Iteration  23: 20650035.112 ops/s
# Warmup Iteration  24: 20734441.765 ops/s
# Warmup Iteration  25: 20562190.536 ops/s
# Warmup Iteration  26: 20715022.236 ops/s
# Warmup Iteration  27: 20602617.800 ops/s
# Warmup Iteration  28: 20723641.313 ops/s
# Warmup Iteration  29: 20680495.930 ops/s
# Warmup Iteration  30: 20725795.834 ops/s
Iteration   1: 20325587.868 ops/s
Iteration   2: 20719193.396 ops/s
Iteration   3: 20555650.510 ops/s
Iteration   4: 20429866.735 ops/s
Iteration   5: 20793082.208 ops/s
Iteration   6: 20708167.978 ops/s
Iteration   7: 20772390.210 ops/s
Iteration   8: 20422039.297 ops/s
Iteration   9: 20612912.910 ops/s
Iteration  10: 20682540.611 ops/s
Iteration  11: 20728903.625 ops/s
Iteration  12: 20707499.781 ops/s
Iteration  13: 20651734.890 ops/s
Iteration  14: 20451325.549 ops/s
Iteration  15: 20733426.805 ops/s
Iteration  16: 20732277.231 ops/s
Iteration  17: 20679712.322 ops/s
Iteration  18: 20754953.566 ops/s
Iteration  19: 20625155.935 ops/s
Iteration  20: 20735511.869 ops/s
Iteration  21: 20739658.679 ops/s
Iteration  22: 20601551.248 ops/s
Iteration  23: 20723731.807 ops/s
Iteration  24: 20747597.547 ops/s
Iteration  25: 20689235.826 ops/s
Iteration  26: 20601224.643 ops/s
Iteration  27: 20679305.935 ops/s
Iteration  28: 20711843.247 ops/s
Iteration  29: 20725353.766 ops/s
Iteration  30: 20698706.714 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testAddWithZeroBasedConstructor":
  20658004.757 ±(99.9%) 76807.310 ops/s [Average]
  (min, avg, max) = (20325587.868, 20658004.757, 20793082.208), stdev = 114961.575
  CI (99.9%): [20581197.446, 20734812.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testAddWithZeroBasedConstructor  thrpt   30  20658004.757 ± 76807.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testBAOSSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testBAOSSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101009.043 ops/s
# Warmup Iteration   2: 150926.282 ops/s
# Warmup Iteration   3: 190972.071 ops/s
# Warmup Iteration   4: 184469.951 ops/s
# Warmup Iteration   5: 185002.188 ops/s
# Warmup Iteration   6: 183725.099 ops/s
# Warmup Iteration   7: 159892.471 ops/s
# Warmup Iteration   8: 182911.961 ops/s
# Warmup Iteration   9: 185411.572 ops/s
# Warmup Iteration  10: 185009.307 ops/s
# Warmup Iteration  11: 185347.073 ops/s
# Warmup Iteration  12: 184913.730 ops/s
# Warmup Iteration  13: 185275.023 ops/s
# Warmup Iteration  14: 184836.774 ops/s
# Warmup Iteration  15: 185604.288 ops/s
# Warmup Iteration  16: 185443.379 ops/s
# Warmup Iteration  17: 185905.610 ops/s
# Warmup Iteration  18: 184242.116 ops/s
# Warmup Iteration  19: 186072.954 ops/s
# Warmup Iteration  20: 186126.349 ops/s
# Warmup Iteration  21: 184743.685 ops/s
# Warmup Iteration  22: 185370.432 ops/s
# Warmup Iteration  23: 185672.691 ops/s
# Warmup Iteration  24: 185739.234 ops/s
# Warmup Iteration  25: 185499.683 ops/s
# Warmup Iteration  26: 184362.211 ops/s
# Warmup Iteration  27: 185388.156 ops/s
# Warmup Iteration  28: 184472.676 ops/s
# Warmup Iteration  29: 185843.527 ops/s
# Warmup Iteration  30: 184462.209 ops/s
Iteration   1: 185631.439 ops/s
Iteration   2: 185033.885 ops/s
Iteration   3: 182336.748 ops/s
Iteration   4: 185840.705 ops/s
Iteration   5: 186013.998 ops/s
Iteration   6: 186396.986 ops/s
Iteration   7: 185840.196 ops/s
Iteration   8: 185317.355 ops/s
Iteration   9: 180928.800 ops/s
Iteration  10: 184892.894 ops/s
Iteration  11: 185433.274 ops/s
Iteration  12: 182555.892 ops/s
Iteration  13: 185764.818 ops/s
Iteration  14: 185891.386 ops/s
Iteration  15: 185086.051 ops/s
Iteration  16: 185413.628 ops/s
Iteration  17: 182842.121 ops/s
Iteration  18: 186557.225 ops/s
Iteration  19: 183660.888 ops/s
Iteration  20: 186533.559 ops/s
Iteration  21: 185969.447 ops/s
Iteration  22: 185710.425 ops/s
Iteration  23: 186086.555 ops/s
Iteration  24: 185986.604 ops/s
Iteration  25: 185418.663 ops/s
Iteration  26: 185409.709 ops/s
Iteration  27: 185897.730 ops/s
Iteration  28: 185484.683 ops/s
Iteration  29: 185692.782 ops/s
Iteration  30: 184727.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testBAOSSize":
  185145.207 ±(99.9%) 898.271 ops/s [Average]
  (min, avg, max) = (180928.800, 185145.207, 186557.225), stdev = 1344.490
  CI (99.9%): [184246.936, 186043.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_testBAOSSize  thrpt   30  185145.207 ± 898.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8868126.859 ops/s
# Warmup Iteration   2: 17111337.705 ops/s
# Warmup Iteration   3: 14857618.729 ops/s
# Warmup Iteration   4: 17072686.513 ops/s
# Warmup Iteration   5: 17425483.568 ops/s
# Warmup Iteration   6: 17316318.773 ops/s
# Warmup Iteration   7: 17326763.088 ops/s
# Warmup Iteration   8: 17263970.819 ops/s
# Warmup Iteration   9: 17455319.969 ops/s
# Warmup Iteration  10: 17281403.327 ops/s
# Warmup Iteration  11: 17419921.245 ops/s
# Warmup Iteration  12: 17405545.963 ops/s
# Warmup Iteration  13: 17120172.225 ops/s
# Warmup Iteration  14: 17339869.971 ops/s
# Warmup Iteration  15: 17173570.893 ops/s
# Warmup Iteration  16: 17436092.864 ops/s
# Warmup Iteration  17: 17620502.163 ops/s
# Warmup Iteration  18: 17565685.712 ops/s
# Warmup Iteration  19: 17594929.753 ops/s
# Warmup Iteration  20: 17640204.700 ops/s
# Warmup Iteration  21: 17637253.634 ops/s
# Warmup Iteration  22: 17654959.672 ops/s
# Warmup Iteration  23: 17625772.457 ops/s
# Warmup Iteration  24: 17564892.139 ops/s
# Warmup Iteration  25: 17542243.660 ops/s
# Warmup Iteration  26: 17454753.353 ops/s
# Warmup Iteration  27: 17601041.038 ops/s
# Warmup Iteration  28: 17517782.414 ops/s
# Warmup Iteration  29: 17599837.614 ops/s
# Warmup Iteration  30: 17603362.548 ops/s
Iteration   1: 17663887.703 ops/s
Iteration   2: 17625213.256 ops/s
Iteration   3: 17675819.602 ops/s
Iteration   4: 17654695.622 ops/s
Iteration   5: 17594868.719 ops/s
Iteration   6: 17077490.695 ops/s
Iteration   7: 17588786.478 ops/s
Iteration   8: 17239146.097 ops/s
Iteration   9: 17558681.298 ops/s
Iteration  10: 17609863.664 ops/s
Iteration  11: 17359928.617 ops/s
Iteration  12: 17586524.921 ops/s
Iteration  13: 17486122.581 ops/s
Iteration  14: 17539784.784 ops/s
Iteration  15: 17566730.096 ops/s
Iteration  16: 17672545.647 ops/s
Iteration  17: 17627245.370 ops/s
Iteration  18: 17626342.637 ops/s
Iteration  19: 17384899.072 ops/s
Iteration  20: 17609164.271 ops/s
Iteration  21: 17652257.498 ops/s
Iteration  22: 17409025.179 ops/s
Iteration  23: 17634277.339 ops/s
Iteration  24: 17627203.995 ops/s
Iteration  25: 17645364.096 ops/s
Iteration  26: 17597226.207 ops/s
Iteration  27: 17652808.104 ops/s
Iteration  28: 17654168.193 ops/s
Iteration  29: 17658094.472 ops/s
Iteration  30: 17641377.093 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testClone":
  17563984.777 ±(99.9%) 93032.023 ops/s [Average]
  (min, avg, max) = (17077490.695, 17563984.777, 17675819.602), stdev = 139245.964
  CI (99.9%): [17470952.753, 17657016.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testClone  thrpt   30  17563984.777 ± 93032.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testContainsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testContainsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3254394.450 ops/s
# Warmup Iteration   2: 6402163.082 ops/s
# Warmup Iteration   3: 6711971.350 ops/s
# Warmup Iteration   4: 6675988.595 ops/s
# Warmup Iteration   5: 5627917.908 ops/s
# Warmup Iteration   6: 6702258.885 ops/s
# Warmup Iteration   7: 6724508.470 ops/s
# Warmup Iteration   8: 6723566.293 ops/s
# Warmup Iteration   9: 6673763.471 ops/s
# Warmup Iteration  10: 6720036.229 ops/s
# Warmup Iteration  11: 6719554.224 ops/s
# Warmup Iteration  12: 6695677.565 ops/s
# Warmup Iteration  13: 6702398.197 ops/s
# Warmup Iteration  14: 6697327.669 ops/s
# Warmup Iteration  15: 6718999.736 ops/s
# Warmup Iteration  16: 6718484.811 ops/s
# Warmup Iteration  17: 6725044.730 ops/s
# Warmup Iteration  18: 6713581.764 ops/s
# Warmup Iteration  19: 6668469.805 ops/s
# Warmup Iteration  20: 6619477.673 ops/s
# Warmup Iteration  21: 6713089.150 ops/s
# Warmup Iteration  22: 6732894.710 ops/s
# Warmup Iteration  23: 6705554.422 ops/s
# Warmup Iteration  24: 6717148.741 ops/s
# Warmup Iteration  25: 6613833.574 ops/s
# Warmup Iteration  26: 6676442.748 ops/s
# Warmup Iteration  27: 6654376.068 ops/s
# Warmup Iteration  28: 6667221.101 ops/s
# Warmup Iteration  29: 6668646.430 ops/s
# Warmup Iteration  30: 6726917.338 ops/s
Iteration   1: 6708622.485 ops/s
Iteration   2: 6704889.692 ops/s
Iteration   3: 6719600.512 ops/s
Iteration   4: 6692042.044 ops/s
Iteration   5: 6616335.148 ops/s
Iteration   6: 6628784.679 ops/s
Iteration   7: 6715578.178 ops/s
Iteration   8: 6717248.136 ops/s
Iteration   9: 6716803.181 ops/s
Iteration  10: 6588412.101 ops/s
Iteration  11: 6729238.328 ops/s
Iteration  12: 6717199.262 ops/s
Iteration  13: 6685773.780 ops/s
Iteration  14: 6713428.851 ops/s
Iteration  15: 6722779.517 ops/s
Iteration  16: 6633170.617 ops/s
Iteration  17: 6605698.991 ops/s
Iteration  18: 6720409.303 ops/s
Iteration  19: 6731043.745 ops/s
Iteration  20: 6721877.760 ops/s
Iteration  21: 6707161.100 ops/s
Iteration  22: 6596210.379 ops/s
Iteration  23: 6687589.421 ops/s
Iteration  24: 6537328.759 ops/s
Iteration  25: 6737003.544 ops/s
Iteration  26: 6642612.551 ops/s
Iteration  27: 6736696.374 ops/s
Iteration  28: 6666310.708 ops/s
Iteration  29: 6713582.256 ops/s
Iteration  30: 6718945.209 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testContainsAll":
  6684412.554 ±(99.9%) 35309.575 ops/s [Average]
  (min, avg, max) = (6537328.759, 6684412.554, 6737003.544), stdev = 52849.714
  CI (99.9%): [6649102.978, 6719722.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testContainsAll  thrpt   30  6684412.554 ± 35309.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testDetectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testDetectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7198799.822 ops/s
# Warmup Iteration   2: 15440756.489 ops/s
# Warmup Iteration   3: 15581188.682 ops/s
# Warmup Iteration   4: 13019802.371 ops/s
# Warmup Iteration   5: 15585579.237 ops/s
# Warmup Iteration   6: 15613353.680 ops/s
# Warmup Iteration   7: 15621113.336 ops/s
# Warmup Iteration   8: 15398807.730 ops/s
# Warmup Iteration   9: 15577533.495 ops/s
# Warmup Iteration  10: 15586377.221 ops/s
# Warmup Iteration  11: 15605666.027 ops/s
# Warmup Iteration  12: 15613148.676 ops/s
# Warmup Iteration  13: 15484556.386 ops/s
# Warmup Iteration  14: 15607456.279 ops/s
# Warmup Iteration  15: 15466028.353 ops/s
# Warmup Iteration  16: 15553261.108 ops/s
# Warmup Iteration  17: 15596794.354 ops/s
# Warmup Iteration  18: 15473892.643 ops/s
# Warmup Iteration  19: 15593332.640 ops/s
# Warmup Iteration  20: 15403575.367 ops/s
# Warmup Iteration  21: 15499931.896 ops/s
# Warmup Iteration  22: 15537173.438 ops/s
# Warmup Iteration  23: 15606271.593 ops/s
# Warmup Iteration  24: 15480795.133 ops/s
# Warmup Iteration  25: 15459038.940 ops/s
# Warmup Iteration  26: 15632058.350 ops/s
# Warmup Iteration  27: 15533203.793 ops/s
# Warmup Iteration  28: 15445271.949 ops/s
# Warmup Iteration  29: 15617368.478 ops/s
# Warmup Iteration  30: 15619548.879 ops/s
Iteration   1: 15587484.299 ops/s
Iteration   2: 15501573.428 ops/s
Iteration   3: 15610324.933 ops/s
Iteration   4: 15616780.432 ops/s
Iteration   5: 15384316.352 ops/s
Iteration   6: 15611299.830 ops/s
Iteration   7: 15617991.839 ops/s
Iteration   8: 15611720.673 ops/s
Iteration   9: 15533628.947 ops/s
Iteration  10: 15632531.679 ops/s
Iteration  11: 15605263.768 ops/s
Iteration  12: 15578373.317 ops/s
Iteration  13: 15418095.037 ops/s
Iteration  14: 15094782.989 ops/s
Iteration  15: 15610184.813 ops/s
Iteration  16: 15370477.513 ops/s
Iteration  17: 15407015.081 ops/s
Iteration  18: 15527538.816 ops/s
Iteration  19: 15605613.819 ops/s
Iteration  20: 15646827.708 ops/s
Iteration  21: 15385826.489 ops/s
Iteration  22: 15591129.570 ops/s
Iteration  23: 15571075.301 ops/s
Iteration  24: 15548920.337 ops/s
Iteration  25: 15604581.941 ops/s
Iteration  26: 15656459.497 ops/s
Iteration  27: 15635215.039 ops/s
Iteration  28: 15641202.014 ops/s
Iteration  29: 15597270.203 ops/s
Iteration  30: 15285036.807 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testDetectWithIfNone":
  15536284.749 ±(99.9%) 86142.632 ops/s [Average]
  (min, avg, max) = (15094782.989, 15536284.749, 15656459.497), stdev = 128934.246
  CI (99.9%): [15450142.117, 15622427.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testDetectWithIfNone  thrpt   30  15536284.749 ± 86142.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testFastListNewWithContainsAllItems$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testFastListNewWithContainsAllItems

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1208048.445 ops/s
# Warmup Iteration   2: 2076078.778 ops/s
# Warmup Iteration   3: 2405176.005 ops/s
# Warmup Iteration   4: 2413939.904 ops/s
# Warmup Iteration   5: 2401402.228 ops/s
# Warmup Iteration   6: 1981735.796 ops/s
# Warmup Iteration   7: 2421318.607 ops/s
# Warmup Iteration   8: 2390452.289 ops/s
# Warmup Iteration   9: 2417342.641 ops/s
# Warmup Iteration  10: 2421291.145 ops/s
# Warmup Iteration  11: 2419656.933 ops/s
# Warmup Iteration  12: 2420235.371 ops/s
# Warmup Iteration  13: 2414237.182 ops/s
# Warmup Iteration  14: 2415850.332 ops/s
# Warmup Iteration  15: 2398099.211 ops/s
# Warmup Iteration  16: 2424773.312 ops/s
# Warmup Iteration  17: 2376372.559 ops/s
# Warmup Iteration  18: 2415813.643 ops/s
# Warmup Iteration  19: 2401108.333 ops/s
# Warmup Iteration  20: 2414555.515 ops/s
# Warmup Iteration  21: 2416649.831 ops/s
# Warmup Iteration  22: 2417138.954 ops/s
# Warmup Iteration  23: 2418013.725 ops/s
# Warmup Iteration  24: 2393541.158 ops/s
# Warmup Iteration  25: 2419360.704 ops/s
# Warmup Iteration  26: 2420949.101 ops/s
# Warmup Iteration  27: 2396666.065 ops/s
# Warmup Iteration  28: 2403488.610 ops/s
# Warmup Iteration  29: 2416441.369 ops/s
# Warmup Iteration  30: 2417940.906 ops/s
Iteration   1: 2422620.417 ops/s
Iteration   2: 2360757.113 ops/s
Iteration   3: 2422732.025 ops/s
Iteration   4: 2417252.321 ops/s
Iteration   5: 2405893.034 ops/s
Iteration   6: 2423507.743 ops/s
Iteration   7: 2420294.041 ops/s
Iteration   8: 2413343.885 ops/s
Iteration   9: 2335679.850 ops/s
Iteration  10: 2415750.547 ops/s
Iteration  11: 2413978.160 ops/s
Iteration  12: 2417956.386 ops/s
Iteration  13: 2420118.034 ops/s
Iteration  14: 2416272.734 ops/s
Iteration  15: 2422780.903 ops/s
Iteration  16: 2412318.787 ops/s
Iteration  17: 2427418.530 ops/s
Iteration  18: 2414601.748 ops/s
Iteration  19: 2425339.623 ops/s
Iteration  20: 2417657.433 ops/s
Iteration  21: 2385147.907 ops/s
Iteration  22: 2423654.217 ops/s
Iteration  23: 2414205.252 ops/s
Iteration  24: 2425570.593 ops/s
Iteration  25: 2423000.584 ops/s
Iteration  26: 2421701.440 ops/s
Iteration  27: 2409117.245 ops/s
Iteration  28: 2386220.469 ops/s
Iteration  29: 2414315.990 ops/s
Iteration  30: 2342928.185 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testFastListNewWithContainsAllItems":
  2409071.173 ±(99.9%) 15745.914 ops/s [Average]
  (min, avg, max) = (2335679.850, 2409071.173, 2427418.530), stdev = 23567.744
  CI (99.9%): [2393325.260, 2424817.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testFastListNewWithContainsAllItems  thrpt   30  2409071.173 ± 15745.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31523325.562 ops/s
# Warmup Iteration   2: 58910632.692 ops/s
# Warmup Iteration   3: 51127774.425 ops/s
# Warmup Iteration   4: 59823623.567 ops/s
# Warmup Iteration   5: 60372269.531 ops/s
# Warmup Iteration   6: 60416393.861 ops/s
# Warmup Iteration   7: 60440985.835 ops/s
# Warmup Iteration   8: 60073257.785 ops/s
# Warmup Iteration   9: 60471888.049 ops/s
# Warmup Iteration  10: 60370935.994 ops/s
# Warmup Iteration  11: 60239052.136 ops/s
# Warmup Iteration  12: 60291656.113 ops/s
# Warmup Iteration  13: 60118450.608 ops/s
# Warmup Iteration  14: 59883739.426 ops/s
# Warmup Iteration  15: 60270956.366 ops/s
# Warmup Iteration  16: 60294461.087 ops/s
# Warmup Iteration  17: 59966697.056 ops/s
# Warmup Iteration  18: 60319633.056 ops/s
# Warmup Iteration  19: 60101410.372 ops/s
# Warmup Iteration  20: 60438813.123 ops/s
# Warmup Iteration  21: 60510550.679 ops/s
# Warmup Iteration  22: 60459296.306 ops/s
# Warmup Iteration  23: 60316965.753 ops/s
# Warmup Iteration  24: 60500605.790 ops/s
# Warmup Iteration  25: 60357932.275 ops/s
# Warmup Iteration  26: 59849725.972 ops/s
# Warmup Iteration  27: 60338104.704 ops/s
# Warmup Iteration  28: 60384971.566 ops/s
# Warmup Iteration  29: 59789342.640 ops/s
# Warmup Iteration  30: 60219881.144 ops/s
Iteration   1: 60262197.416 ops/s
Iteration   2: 60397178.292 ops/s
Iteration   3: 60232546.479 ops/s
Iteration   4: 59598137.757 ops/s
Iteration   5: 60348450.460 ops/s
Iteration   6: 60452336.022 ops/s
Iteration   7: 60056790.006 ops/s
Iteration   8: 59467408.195 ops/s
Iteration   9: 60130970.777 ops/s
Iteration  10: 60617499.955 ops/s
Iteration  11: 60496144.867 ops/s
Iteration  12: 60568766.030 ops/s
Iteration  13: 60283109.363 ops/s
Iteration  14: 60341235.075 ops/s
Iteration  15: 60219484.947 ops/s
Iteration  16: 60230260.320 ops/s
Iteration  17: 60582703.010 ops/s
Iteration  18: 59404539.154 ops/s
Iteration  19: 60252329.232 ops/s
Iteration  20: 60493929.994 ops/s
Iteration  21: 59902972.456 ops/s
Iteration  22: 59201163.218 ops/s
Iteration  23: 59596479.812 ops/s
Iteration  24: 60153902.607 ops/s
Iteration  25: 60499726.526 ops/s
Iteration  26: 60147672.811 ops/s
Iteration  27: 60513089.159 ops/s
Iteration  28: 60456799.855 ops/s
Iteration  29: 59336909.897 ops/s
Iteration  30: 60206565.540 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachIf":
  60148376.641 ±(99.9%) 269597.550 ops/s [Average]
  (min, avg, max) = (59201163.218, 60148376.641, 60617499.955), stdev = 403520.951
  CI (99.9%): [59878779.091, 60417974.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testForEachIf  thrpt   30  60148376.641 ± 269597.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11630118.869 ops/s
# Warmup Iteration   2: 19123553.646 ops/s
# Warmup Iteration   3: 21813555.145 ops/s
# Warmup Iteration   4: 22089392.028 ops/s
# Warmup Iteration   5: 22122692.733 ops/s
# Warmup Iteration   6: 22082018.893 ops/s
# Warmup Iteration   7: 21715097.027 ops/s
# Warmup Iteration   8: 22197901.660 ops/s
# Warmup Iteration   9: 21863147.944 ops/s
# Warmup Iteration  10: 22059255.935 ops/s
# Warmup Iteration  11: 21899246.874 ops/s
# Warmup Iteration  12: 21935845.295 ops/s
# Warmup Iteration  13: 21916401.363 ops/s
# Warmup Iteration  14: 22127330.368 ops/s
# Warmup Iteration  15: 22094736.684 ops/s
# Warmup Iteration  16: 22024506.042 ops/s
# Warmup Iteration  17: 21892724.976 ops/s
# Warmup Iteration  18: 22064722.426 ops/s
# Warmup Iteration  19: 22052860.219 ops/s
# Warmup Iteration  20: 22012702.785 ops/s
# Warmup Iteration  21: 22141267.833 ops/s
# Warmup Iteration  22: 22148921.299 ops/s
# Warmup Iteration  23: 22026949.788 ops/s
# Warmup Iteration  24: 22164486.530 ops/s
# Warmup Iteration  25: 22108383.122 ops/s
# Warmup Iteration  26: 22179559.104 ops/s
# Warmup Iteration  27: 21971093.467 ops/s
# Warmup Iteration  28: 22074282.248 ops/s
# Warmup Iteration  29: 22001031.315 ops/s
# Warmup Iteration  30: 22133738.358 ops/s
Iteration   1: 21321381.172 ops/s
Iteration   2: 22062602.966 ops/s
Iteration   3: 22225087.905 ops/s
Iteration   4: 22076829.235 ops/s
Iteration   5: 21643433.167 ops/s
Iteration   6: 22134296.590 ops/s
Iteration   7: 21906711.893 ops/s
Iteration   8: 22038144.870 ops/s
Iteration   9: 22007668.728 ops/s
Iteration  10: 22173884.514 ops/s
Iteration  11: 22092689.632 ops/s
Iteration  12: 22012117.671 ops/s
Iteration  13: 22169559.505 ops/s
Iteration  14: 22165586.693 ops/s
Iteration  15: 22003956.637 ops/s
Iteration  16: 22040874.040 ops/s
Iteration  17: 22060126.235 ops/s
Iteration  18: 22103393.062 ops/s
Iteration  19: 22107026.750 ops/s
Iteration  20: 22124045.803 ops/s
Iteration  21: 22160511.164 ops/s
Iteration  22: 22120027.552 ops/s
Iteration  23: 22167807.683 ops/s
Iteration  24: 22092982.293 ops/s
Iteration  25: 22101668.341 ops/s
Iteration  26: 22119416.117 ops/s
Iteration  27: 21974686.226 ops/s
Iteration  28: 22062521.697 ops/s
Iteration  29: 22048785.376 ops/s
Iteration  30: 22106577.854 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testForEachInBoth":
  22047480.046 ±(99.9%) 115494.822 ops/s [Average]
  (min, avg, max) = (21321381.172, 22047480.046, 22225087.905), stdev = 172867.226
  CI (99.9%): [21931985.224, 22162974.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testForEachInBoth  thrpt   30  22047480.046 ± 115494.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11131713.913 ops/s
# Warmup Iteration   2: 20230131.572 ops/s
# Warmup Iteration   3: 18429966.400 ops/s
# Warmup Iteration   4: 21132272.511 ops/s
# Warmup Iteration   5: 21084167.893 ops/s
# Warmup Iteration   6: 21138833.790 ops/s
# Warmup Iteration   7: 21127166.841 ops/s
# Warmup Iteration   8: 21145851.749 ops/s
# Warmup Iteration   9: 20603715.424 ops/s
# Warmup Iteration  10: 21129786.744 ops/s
# Warmup Iteration  11: 21066665.822 ops/s
# Warmup Iteration  12: 21175426.428 ops/s
# Warmup Iteration  13: 20872857.882 ops/s
# Warmup Iteration  14: 21127410.503 ops/s
# Warmup Iteration  15: 21060398.258 ops/s
# Warmup Iteration  16: 21209638.377 ops/s
# Warmup Iteration  17: 21218426.517 ops/s
# Warmup Iteration  18: 21284644.169 ops/s
# Warmup Iteration  19: 21168899.865 ops/s
# Warmup Iteration  20: 21166909.892 ops/s
# Warmup Iteration  21: 21214112.574 ops/s
# Warmup Iteration  22: 21212949.142 ops/s
# Warmup Iteration  23: 21139138.278 ops/s
# Warmup Iteration  24: 21196748.307 ops/s
# Warmup Iteration  25: 20938328.644 ops/s
# Warmup Iteration  26: 21250231.626 ops/s
# Warmup Iteration  27: 21244213.495 ops/s
# Warmup Iteration  28: 21241466.494 ops/s
# Warmup Iteration  29: 21203411.426 ops/s
# Warmup Iteration  30: 21226129.622 ops/s
Iteration   1: 21203142.537 ops/s
Iteration   2: 21243417.060 ops/s
Iteration   3: 21256342.559 ops/s
Iteration   4: 20920230.981 ops/s
Iteration   5: 21116547.682 ops/s
Iteration   6: 21230362.456 ops/s
Iteration   7: 21281672.500 ops/s
Iteration   8: 21135597.698 ops/s
Iteration   9: 21259427.356 ops/s
Iteration  10: 20937627.413 ops/s
Iteration  11: 21189997.218 ops/s
Iteration  12: 21234783.923 ops/s
Iteration  13: 21247185.210 ops/s
Iteration  14: 21246717.356 ops/s
Iteration  15: 21255445.047 ops/s
Iteration  16: 21289828.015 ops/s
Iteration  17: 21232981.380 ops/s
Iteration  18: 21101777.231 ops/s
Iteration  19: 21205104.709 ops/s
Iteration  20: 21212091.549 ops/s
Iteration  21: 21234901.920 ops/s
Iteration  22: 20910714.232 ops/s
Iteration  23: 20801826.650 ops/s
Iteration  24: 21172642.343 ops/s
Iteration  25: 21133389.415 ops/s
Iteration  26: 21318358.617 ops/s
Iteration  27: 21214272.034 ops/s
Iteration  28: 21041191.884 ops/s
Iteration  29: 21234686.359 ops/s
Iteration  30: 21191331.693 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoDouble":
  21168453.168 ±(99.9%) 84298.042 ops/s [Average]
  (min, avg, max) = (20801826.650, 21168453.168, 21318358.617), stdev = 126173.351
  CI (99.9%): [21084155.125, 21252751.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testInjectIntoDouble  thrpt   30  21168453.168 ± 84298.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12906474.966 ops/s
# Warmup Iteration   2: 24721519.836 ops/s
# Warmup Iteration   3: 19990326.668 ops/s
# Warmup Iteration   4: 23531003.255 ops/s
# Warmup Iteration   5: 23727789.755 ops/s
# Warmup Iteration   6: 23591913.123 ops/s
# Warmup Iteration   7: 23521713.440 ops/s
# Warmup Iteration   8: 23485761.488 ops/s
# Warmup Iteration   9: 23733605.651 ops/s
# Warmup Iteration  10: 23452225.327 ops/s
# Warmup Iteration  11: 23673226.269 ops/s
# Warmup Iteration  12: 23660617.785 ops/s
# Warmup Iteration  13: 23481870.998 ops/s
# Warmup Iteration  14: 23629480.353 ops/s
# Warmup Iteration  15: 23723766.338 ops/s
# Warmup Iteration  16: 23717816.729 ops/s
# Warmup Iteration  17: 23522623.702 ops/s
# Warmup Iteration  18: 23640638.251 ops/s
# Warmup Iteration  19: 23436916.347 ops/s
# Warmup Iteration  20: 23263589.800 ops/s
# Warmup Iteration  21: 23785949.591 ops/s
# Warmup Iteration  22: 23795925.358 ops/s
# Warmup Iteration  23: 23709679.602 ops/s
# Warmup Iteration  24: 23501916.302 ops/s
# Warmup Iteration  25: 23672689.739 ops/s
# Warmup Iteration  26: 23670312.007 ops/s
# Warmup Iteration  27: 23431507.948 ops/s
# Warmup Iteration  28: 23551802.814 ops/s
# Warmup Iteration  29: 23718199.068 ops/s
# Warmup Iteration  30: 23791827.910 ops/s
Iteration   1: 23755380.444 ops/s
Iteration   2: 23701275.750 ops/s
Iteration   3: 23539926.994 ops/s
Iteration   4: 23689186.141 ops/s
Iteration   5: 23723456.366 ops/s
Iteration   6: 23737149.769 ops/s
Iteration   7: 23426087.571 ops/s
Iteration   8: 23706463.297 ops/s
Iteration   9: 23758105.712 ops/s
Iteration  10: 23509852.191 ops/s
Iteration  11: 23723526.712 ops/s
Iteration  12: 23669112.746 ops/s
Iteration  13: 23604578.260 ops/s
Iteration  14: 23749699.721 ops/s
Iteration  15: 23742475.489 ops/s
Iteration  16: 23574844.409 ops/s
Iteration  17: 23760634.259 ops/s
Iteration  18: 23728898.116 ops/s
Iteration  19: 23803519.054 ops/s
Iteration  20: 23398360.840 ops/s
Iteration  21: 23786382.424 ops/s
Iteration  22: 23691812.420 ops/s
Iteration  23: 23697592.956 ops/s
Iteration  24: 23789723.466 ops/s
Iteration  25: 23630651.348 ops/s
Iteration  26: 23753894.137 ops/s
Iteration  27: 23745030.374 ops/s
Iteration  28: 23716481.840 ops/s
Iteration  29: 23697366.241 ops/s
Iteration  30: 23580976.632 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoFloat":
  23679748.189 ±(99.9%) 69029.256 ops/s [Average]
  (min, avg, max) = (23398360.840, 23679748.189, 23803519.054), stdev = 103319.749
  CI (99.9%): [23610718.933, 23748777.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testInjectIntoFloat  thrpt   30  23679748.189 ± 69029.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMaxString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMaxString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29872987.543 ops/s
# Warmup Iteration   2: 55710231.469 ops/s
# Warmup Iteration   3: 51011668.058 ops/s
# Warmup Iteration   4: 57465894.418 ops/s
# Warmup Iteration   5: 57069568.028 ops/s
# Warmup Iteration   6: 57604048.899 ops/s
# Warmup Iteration   7: 57439792.887 ops/s
# Warmup Iteration   8: 57057520.867 ops/s
# Warmup Iteration   9: 57522534.964 ops/s
# Warmup Iteration  10: 57676172.779 ops/s
# Warmup Iteration  11: 57564034.342 ops/s
# Warmup Iteration  12: 57608375.625 ops/s
# Warmup Iteration  13: 57566010.194 ops/s
# Warmup Iteration  14: 57451977.947 ops/s
# Warmup Iteration  15: 57464303.463 ops/s
# Warmup Iteration  16: 56688143.570 ops/s
# Warmup Iteration  17: 57553489.413 ops/s
# Warmup Iteration  18: 57310305.993 ops/s
# Warmup Iteration  19: 56899463.797 ops/s
# Warmup Iteration  20: 57528465.444 ops/s
# Warmup Iteration  21: 57598671.229 ops/s
# Warmup Iteration  22: 56562859.153 ops/s
# Warmup Iteration  23: 57632919.981 ops/s
# Warmup Iteration  24: 57583294.497 ops/s
# Warmup Iteration  25: 57564400.933 ops/s
# Warmup Iteration  26: 57458300.281 ops/s
# Warmup Iteration  27: 57526333.501 ops/s
# Warmup Iteration  28: 57468348.883 ops/s
# Warmup Iteration  29: 57612116.748 ops/s
# Warmup Iteration  30: 57531349.647 ops/s
Iteration   1: 56738463.175 ops/s
Iteration   2: 55748000.211 ops/s
Iteration   3: 57312387.993 ops/s
Iteration   4: 57479032.616 ops/s
Iteration   5: 57604798.302 ops/s
Iteration   6: 55865626.115 ops/s
Iteration   7: 57536611.395 ops/s
Iteration   8: 57367416.583 ops/s
Iteration   9: 57109792.784 ops/s
Iteration  10: 57499335.035 ops/s
Iteration  11: 57560671.652 ops/s
Iteration  12: 57408645.795 ops/s
Iteration  13: 57301838.760 ops/s
Iteration  14: 57575997.164 ops/s
Iteration  15: 56918367.063 ops/s
Iteration  16: 57302283.420 ops/s
Iteration  17: 57413537.400 ops/s
Iteration  18: 57367441.362 ops/s
Iteration  19: 57601880.924 ops/s
Iteration  20: 57550331.045 ops/s
Iteration  21: 56604415.436 ops/s
Iteration  22: 57565932.345 ops/s
Iteration  23: 57514547.283 ops/s
Iteration  24: 57583216.943 ops/s
Iteration  25: 57461603.862 ops/s
Iteration  26: 57553558.529 ops/s
Iteration  27: 56692546.340 ops/s
Iteration  28: 57572264.597 ops/s
Iteration  29: 57433219.733 ops/s
Iteration  30: 57449631.786 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMaxString":
  57256446.522 ±(99.9%) 321456.185 ops/s [Average]
  (min, avg, max) = (55748000.211, 57256446.522, 57604798.302), stdev = 481140.522
  CI (99.9%): [56934990.336, 57577902.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testInjectIntoMaxString  thrpt   30  57256446.522 ± 321456.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMinString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMinString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29204243.764 ops/s
# Warmup Iteration   2: 55576864.814 ops/s
# Warmup Iteration   3: 49437669.346 ops/s
# Warmup Iteration   4: 57829192.729 ops/s
# Warmup Iteration   5: 57680196.363 ops/s
# Warmup Iteration   6: 57566308.281 ops/s
# Warmup Iteration   7: 57421562.723 ops/s
# Warmup Iteration   8: 57624836.465 ops/s
# Warmup Iteration   9: 57477730.789 ops/s
# Warmup Iteration  10: 57612213.347 ops/s
# Warmup Iteration  11: 57654257.413 ops/s
# Warmup Iteration  12: 57186547.245 ops/s
# Warmup Iteration  13: 56768342.808 ops/s
# Warmup Iteration  14: 57455351.897 ops/s
# Warmup Iteration  15: 56940572.770 ops/s
# Warmup Iteration  16: 57772992.680 ops/s
# Warmup Iteration  17: 57168344.394 ops/s
# Warmup Iteration  18: 57034804.936 ops/s
# Warmup Iteration  19: 56823064.489 ops/s
# Warmup Iteration  20: 56875317.709 ops/s
# Warmup Iteration  21: 56707432.000 ops/s
# Warmup Iteration  22: 57086343.653 ops/s
# Warmup Iteration  23: 57025166.955 ops/s
# Warmup Iteration  24: 57138558.699 ops/s
# Warmup Iteration  25: 57019494.600 ops/s
# Warmup Iteration  26: 56956529.056 ops/s
# Warmup Iteration  27: 56968465.526 ops/s
# Warmup Iteration  28: 57046246.840 ops/s
# Warmup Iteration  29: 57170950.397 ops/s
# Warmup Iteration  30: 56962467.559 ops/s
Iteration   1: 56120181.963 ops/s
Iteration   2: 57093324.823 ops/s
Iteration   3: 57028446.379 ops/s
Iteration   4: 56858997.289 ops/s
Iteration   5: 57252812.086 ops/s
Iteration   6: 56913146.036 ops/s
Iteration   7: 56884614.835 ops/s
Iteration   8: 57190101.749 ops/s
Iteration   9: 57055071.944 ops/s
Iteration  10: 57100147.052 ops/s
Iteration  11: 56917555.311 ops/s
Iteration  12: 57127797.368 ops/s
Iteration  13: 57026429.021 ops/s
Iteration  14: 56790608.454 ops/s
Iteration  15: 56925056.644 ops/s
Iteration  16: 56986349.842 ops/s
Iteration  17: 57037544.961 ops/s
Iteration  18: 56935882.524 ops/s
Iteration  19: 56979626.219 ops/s
Iteration  20: 56937789.290 ops/s
Iteration  21: 56920737.496 ops/s
Iteration  22: 57187884.199 ops/s
Iteration  23: 56859431.222 ops/s
Iteration  24: 57035920.396 ops/s
Iteration  25: 57116820.666 ops/s
Iteration  26: 56851429.035 ops/s
Iteration  27: 56825576.533 ops/s
Iteration  28: 56993777.146 ops/s
Iteration  29: 57174096.218 ops/s
Iteration  30: 56876822.098 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoMinString":
  56966799.293 ±(99.9%) 133735.602 ops/s [Average]
  (min, avg, max) = (56120181.963, 56966799.293, 57252812.086), stdev = 200169.169
  CI (99.9%): [56833063.691, 57100534.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testInjectIntoMinString  thrpt   30  56966799.293 ± 133735.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12380049.425 ops/s
# Warmup Iteration   2: 22400472.893 ops/s
# Warmup Iteration   3: 20750861.867 ops/s
# Warmup Iteration   4: 23331217.052 ops/s
# Warmup Iteration   5: 23204882.093 ops/s
# Warmup Iteration   6: 23390570.932 ops/s
# Warmup Iteration   7: 23250029.352 ops/s
# Warmup Iteration   8: 23319086.726 ops/s
# Warmup Iteration   9: 23433335.591 ops/s
# Warmup Iteration  10: 23078737.109 ops/s
# Warmup Iteration  11: 23400328.898 ops/s
# Warmup Iteration  12: 23377497.482 ops/s
# Warmup Iteration  13: 23280518.681 ops/s
# Warmup Iteration  14: 23272035.961 ops/s
# Warmup Iteration  15: 23347806.500 ops/s
# Warmup Iteration  16: 23232428.259 ops/s
# Warmup Iteration  17: 23231381.941 ops/s
# Warmup Iteration  18: 23287843.559 ops/s
# Warmup Iteration  19: 23242366.572 ops/s
# Warmup Iteration  20: 23218340.967 ops/s
# Warmup Iteration  21: 23315709.129 ops/s
# Warmup Iteration  22: 23348019.980 ops/s
# Warmup Iteration  23: 23369563.361 ops/s
# Warmup Iteration  24: 23172091.060 ops/s
# Warmup Iteration  25: 23122628.327 ops/s
# Warmup Iteration  26: 23364288.334 ops/s
# Warmup Iteration  27: 23178741.280 ops/s
# Warmup Iteration  28: 23272857.651 ops/s
# Warmup Iteration  29: 23379525.556 ops/s
# Warmup Iteration  30: 22898983.387 ops/s
Iteration   1: 23247138.111 ops/s
Iteration   2: 23416459.685 ops/s
Iteration   3: 23267730.293 ops/s
Iteration   4: 23090236.323 ops/s
Iteration   5: 23305994.610 ops/s
Iteration   6: 23444766.280 ops/s
Iteration   7: 23066555.962 ops/s
Iteration   8: 23368965.469 ops/s
Iteration   9: 22968917.151 ops/s
Iteration  10: 23420239.291 ops/s
Iteration  11: 23281994.181 ops/s
Iteration  12: 23418946.542 ops/s
Iteration  13: 23314454.781 ops/s
Iteration  14: 22921512.809 ops/s
Iteration  15: 22939000.881 ops/s
Iteration  16: 22959760.716 ops/s
Iteration  17: 23030255.939 ops/s
Iteration  18: 23425370.580 ops/s
Iteration  19: 23254585.248 ops/s
Iteration  20: 23411406.013 ops/s
Iteration  21: 22957491.270 ops/s
Iteration  22: 23460808.225 ops/s
Iteration  23: 23258987.687 ops/s
Iteration  24: 23361203.140 ops/s
Iteration  25: 23371472.253 ops/s
Iteration  26: 23006553.817 ops/s
Iteration  27: 23286366.268 ops/s
Iteration  28: 23339451.131 ops/s
Iteration  29: 22671329.719 ops/s
Iteration  30: 23189396.191 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testInjectIntoString":
  23215245.019 ±(99.9%) 136257.911 ops/s [Average]
  (min, avg, max) = (22671329.719, 23215245.019, 23460808.225), stdev = 203944.441
  CI (99.9%): [23078987.108, 23351502.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testInjectIntoString  thrpt   30  23215245.019 ± 136257.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testIteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testIteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6300386.867 ops/s
# Warmup Iteration   2: 12029143.451 ops/s
# Warmup Iteration   3: 10997856.350 ops/s
# Warmup Iteration   4: 12459843.446 ops/s
# Warmup Iteration   5: 12593196.640 ops/s
# Warmup Iteration   6: 12476689.373 ops/s
# Warmup Iteration   7: 12583414.106 ops/s
# Warmup Iteration   8: 12577885.667 ops/s
# Warmup Iteration   9: 12498241.355 ops/s
# Warmup Iteration  10: 12407206.643 ops/s
# Warmup Iteration  11: 12519314.536 ops/s
# Warmup Iteration  12: 12572427.848 ops/s
# Warmup Iteration  13: 12546993.447 ops/s
# Warmup Iteration  14: 12584072.234 ops/s
# Warmup Iteration  15: 12479410.295 ops/s
# Warmup Iteration  16: 12601968.533 ops/s
# Warmup Iteration  17: 12514182.283 ops/s
# Warmup Iteration  18: 12480646.682 ops/s
# Warmup Iteration  19: 12383137.070 ops/s
# Warmup Iteration  20: 12489094.949 ops/s
# Warmup Iteration  21: 12579232.519 ops/s
# Warmup Iteration  22: 12422707.759 ops/s
# Warmup Iteration  23: 12575876.578 ops/s
# Warmup Iteration  24: 12535591.073 ops/s
# Warmup Iteration  25: 12583677.075 ops/s
# Warmup Iteration  26: 12563937.644 ops/s
# Warmup Iteration  27: 12571938.777 ops/s
# Warmup Iteration  28: 12459585.326 ops/s
# Warmup Iteration  29: 12360126.888 ops/s
# Warmup Iteration  30: 12556719.399 ops/s
Iteration   1: 12577323.202 ops/s
Iteration   2: 12398675.572 ops/s
Iteration   3: 12586983.654 ops/s
Iteration   4: 12539098.116 ops/s
Iteration   5: 12433559.243 ops/s
Iteration   6: 12401738.028 ops/s
Iteration   7: 12621136.281 ops/s
Iteration   8: 12624535.952 ops/s
Iteration   9: 12492991.168 ops/s
Iteration  10: 12555943.756 ops/s
Iteration  11: 12491961.704 ops/s
Iteration  12: 12552968.417 ops/s
Iteration  13: 12581668.116 ops/s
Iteration  14: 12584005.178 ops/s
Iteration  15: 12566149.481 ops/s
Iteration  16: 12603222.565 ops/s
Iteration  17: 12450133.276 ops/s
Iteration  18: 12608497.047 ops/s
Iteration  19: 12630259.978 ops/s
Iteration  20: 12364467.399 ops/s
Iteration  21: 12616754.204 ops/s
Iteration  22: 12560653.624 ops/s
Iteration  23: 12515294.737 ops/s
Iteration  24: 12583806.950 ops/s
Iteration  25: 12603475.979 ops/s
Iteration  26: 12597193.008 ops/s
Iteration  27: 12387013.525 ops/s
Iteration  28: 12593760.803 ops/s
Iteration  29: 12514718.787 ops/s
Iteration  30: 12373316.248 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testIteratorRemove":
  12533710.200 ±(99.9%) 55822.213 ops/s [Average]
  (min, avg, max) = (12364467.399, 12533710.200, 12630259.978), stdev = 83552.068
  CI (99.9%): [12477887.986, 12589532.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testIteratorRemove  thrpt   30  12533710.200 ± 55822.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyCollectForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyCollectForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2568230.915 ops/s
# Warmup Iteration   2: 5656391.892 ops/s
# Warmup Iteration   3: 6029362.206 ops/s
# Warmup Iteration   4: 6093909.856 ops/s
# Warmup Iteration   5: 4911293.265 ops/s
# Warmup Iteration   6: 6083413.783 ops/s
# Warmup Iteration   7: 6082994.437 ops/s
# Warmup Iteration   8: 6104111.337 ops/s
# Warmup Iteration   9: 6111368.387 ops/s
# Warmup Iteration  10: 6071696.756 ops/s
# Warmup Iteration  11: 6080139.254 ops/s
# Warmup Iteration  12: 6014773.558 ops/s
# Warmup Iteration  13: 6114273.560 ops/s
# Warmup Iteration  14: 6054394.159 ops/s
# Warmup Iteration  15: 6072207.970 ops/s
# Warmup Iteration  16: 6116535.359 ops/s
# Warmup Iteration  17: 6112388.172 ops/s
# Warmup Iteration  18: 6128560.070 ops/s
# Warmup Iteration  19: 6098763.810 ops/s
# Warmup Iteration  20: 6104275.872 ops/s
# Warmup Iteration  21: 6116086.756 ops/s
# Warmup Iteration  22: 6104754.449 ops/s
# Warmup Iteration  23: 6090717.056 ops/s
# Warmup Iteration  24: 6112182.352 ops/s
# Warmup Iteration  25: 6096334.925 ops/s
# Warmup Iteration  26: 6053595.787 ops/s
# Warmup Iteration  27: 6097637.950 ops/s
# Warmup Iteration  28: 6104990.804 ops/s
# Warmup Iteration  29: 6040769.238 ops/s
# Warmup Iteration  30: 6116696.693 ops/s
Iteration   1: 6112891.734 ops/s
Iteration   2: 6116678.034 ops/s
Iteration   3: 6118359.122 ops/s
Iteration   4: 6114206.074 ops/s
Iteration   5: 6008233.120 ops/s
Iteration   6: 6086289.187 ops/s
Iteration   7: 6009081.363 ops/s
Iteration   8: 6076225.248 ops/s
Iteration   9: 6134939.446 ops/s
Iteration  10: 6136435.310 ops/s
Iteration  11: 6144947.127 ops/s
Iteration  12: 6118322.215 ops/s
Iteration  13: 6123275.309 ops/s
Iteration  14: 6117228.446 ops/s
Iteration  15: 6021920.370 ops/s
Iteration  16: 6121768.244 ops/s
Iteration  17: 6018023.866 ops/s
Iteration  18: 6088200.796 ops/s
Iteration  19: 6132793.682 ops/s
Iteration  20: 6073106.723 ops/s
Iteration  21: 6016868.274 ops/s
Iteration  22: 6106332.144 ops/s
Iteration  23: 5932006.532 ops/s
Iteration  24: 6103708.135 ops/s
Iteration  25: 6119699.667 ops/s
Iteration  26: 6061533.830 ops/s
Iteration  27: 6117257.431 ops/s
Iteration  28: 6097256.439 ops/s
Iteration  29: 6085985.960 ops/s
Iteration  30: 6086788.921 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyCollectForEach":
  6086678.758 ±(99.9%) 33244.389 ops/s [Average]
  (min, avg, max) = (5932006.532, 6086678.758, 6144947.127), stdev = 49758.640
  CI (99.9%): [6053434.370, 6119923.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testLazyCollectForEach  thrpt   30  6086678.758 ± 33244.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyFlattenForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyFlattenForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1541410.500 ops/s
# Warmup Iteration   2: 3789681.652 ops/s
# Warmup Iteration   3: 3771013.757 ops/s
# Warmup Iteration   4: 3086173.282 ops/s
# Warmup Iteration   5: 3802905.087 ops/s
# Warmup Iteration   6: 3823975.536 ops/s
# Warmup Iteration   7: 3800460.204 ops/s
# Warmup Iteration   8: 3824086.154 ops/s
# Warmup Iteration   9: 3805497.870 ops/s
# Warmup Iteration  10: 3773384.920 ops/s
# Warmup Iteration  11: 3790368.794 ops/s
# Warmup Iteration  12: 3805884.862 ops/s
# Warmup Iteration  13: 3818077.276 ops/s
# Warmup Iteration  14: 3820219.384 ops/s
# Warmup Iteration  15: 3796295.587 ops/s
# Warmup Iteration  16: 3820413.068 ops/s
# Warmup Iteration  17: 3811003.037 ops/s
# Warmup Iteration  18: 3808811.339 ops/s
# Warmup Iteration  19: 3802960.436 ops/s
# Warmup Iteration  20: 3826257.410 ops/s
# Warmup Iteration  21: 3825502.522 ops/s
# Warmup Iteration  22: 3804166.858 ops/s
# Warmup Iteration  23: 3813984.952 ops/s
# Warmup Iteration  24: 3820703.928 ops/s
# Warmup Iteration  25: 3784921.225 ops/s
# Warmup Iteration  26: 3808021.099 ops/s
# Warmup Iteration  27: 3823818.468 ops/s
# Warmup Iteration  28: 3796472.381 ops/s
# Warmup Iteration  29: 3783523.371 ops/s
# Warmup Iteration  30: 3812106.860 ops/s
Iteration   1: 3817803.861 ops/s
Iteration   2: 3807501.130 ops/s
Iteration   3: 3763899.276 ops/s
Iteration   4: 3799816.649 ops/s
Iteration   5: 3811968.935 ops/s
Iteration   6: 3734323.335 ops/s
Iteration   7: 3740812.246 ops/s
Iteration   8: 3784280.984 ops/s
Iteration   9: 3807247.858 ops/s
Iteration  10: 3828274.303 ops/s
Iteration  11: 3825481.710 ops/s
Iteration  12: 3808135.281 ops/s
Iteration  13: 3808031.154 ops/s
Iteration  14: 3785439.667 ops/s
Iteration  15: 3800995.375 ops/s
Iteration  16: 3821888.305 ops/s
Iteration  17: 3772222.837 ops/s
Iteration  18: 3804948.560 ops/s
Iteration  19: 3809752.518 ops/s
Iteration  20: 3816967.636 ops/s
Iteration  21: 3823943.478 ops/s
Iteration  22: 3827945.890 ops/s
Iteration  23: 3766967.291 ops/s
Iteration  24: 3820821.448 ops/s
Iteration  25: 3810011.005 ops/s
Iteration  26: 3800653.409 ops/s
Iteration  27: 3817485.577 ops/s
Iteration  28: 3796462.175 ops/s
Iteration  29: 3795490.364 ops/s
Iteration  30: 3785868.143 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyFlattenForEach":
  3799848.013 ±(99.9%) 16130.344 ops/s [Average]
  (min, avg, max) = (3734323.335, 3799848.013, 3828274.303), stdev = 24143.141
  CI (99.9%): [3783717.670, 3815978.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testLazyFlattenForEach  thrpt   30  3799848.013 ± 16130.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyRejectForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyRejectForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7479981.607 ops/s
# Warmup Iteration   2: 16622672.537 ops/s
# Warmup Iteration   3: 16584763.415 ops/s
# Warmup Iteration   4: 13927029.028 ops/s
# Warmup Iteration   5: 16576460.242 ops/s
# Warmup Iteration   6: 16794875.296 ops/s
# Warmup Iteration   7: 16629299.317 ops/s
# Warmup Iteration   8: 16781431.225 ops/s
# Warmup Iteration   9: 16817987.975 ops/s
# Warmup Iteration  10: 16791183.965 ops/s
# Warmup Iteration  11: 16777613.255 ops/s
# Warmup Iteration  12: 16796042.824 ops/s
# Warmup Iteration  13: 16779600.416 ops/s
# Warmup Iteration  14: 16790758.474 ops/s
# Warmup Iteration  15: 16770692.808 ops/s
# Warmup Iteration  16: 16760209.073 ops/s
# Warmup Iteration  17: 16796997.919 ops/s
# Warmup Iteration  18: 16792234.138 ops/s
# Warmup Iteration  19: 16628867.395 ops/s
# Warmup Iteration  20: 16656741.308 ops/s
# Warmup Iteration  21: 16686612.041 ops/s
# Warmup Iteration  22: 16678235.946 ops/s
# Warmup Iteration  23: 16779120.593 ops/s
# Warmup Iteration  24: 16648254.475 ops/s
# Warmup Iteration  25: 16599475.864 ops/s
# Warmup Iteration  26: 16777072.383 ops/s
# Warmup Iteration  27: 16747456.806 ops/s
# Warmup Iteration  28: 16733891.856 ops/s
# Warmup Iteration  29: 16796317.284 ops/s
# Warmup Iteration  30: 16775389.634 ops/s
Iteration   1: 16865290.670 ops/s
Iteration   2: 16798803.233 ops/s
Iteration   3: 16721434.771 ops/s
Iteration   4: 16736059.298 ops/s
Iteration   5: 16383615.810 ops/s
Iteration   6: 16828986.904 ops/s
Iteration   7: 16715127.314 ops/s
Iteration   8: 16772440.274 ops/s
Iteration   9: 16826986.478 ops/s
Iteration  10: 16816001.158 ops/s
Iteration  11: 16825786.474 ops/s
Iteration  12: 16807265.880 ops/s
Iteration  13: 16800422.792 ops/s
Iteration  14: 16612207.805 ops/s
Iteration  15: 16558936.522 ops/s
Iteration  16: 16728949.075 ops/s
Iteration  17: 16816023.847 ops/s
Iteration  18: 16758712.662 ops/s
Iteration  19: 16808722.261 ops/s
Iteration  20: 16822608.827 ops/s
Iteration  21: 16707735.624 ops/s
Iteration  22: 16504548.739 ops/s
Iteration  23: 16763143.953 ops/s
Iteration  24: 16820602.669 ops/s
Iteration  25: 16503461.380 ops/s
Iteration  26: 16798863.773 ops/s
Iteration  27: 16467076.731 ops/s
Iteration  28: 16739510.510 ops/s
Iteration  29: 16789124.339 ops/s
Iteration  30: 16817745.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazyRejectForEach":
  16730539.851 ±(99.9%) 83695.265 ops/s [Average]
  (min, avg, max) = (16383615.810, 16730539.851, 16865290.670), stdev = 125271.142
  CI (99.9%): [16646844.586, 16814235.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testLazyRejectForEach  thrpt   30  16730539.851 ± 83695.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazySelectForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazySelectForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5269355.326 ops/s
# Warmup Iteration   2: 17897817.678 ops/s
# Warmup Iteration   3: 18141350.289 ops/s
# Warmup Iteration   4: 15398339.061 ops/s
# Warmup Iteration   5: 18251110.081 ops/s
# Warmup Iteration   6: 18098058.921 ops/s
# Warmup Iteration   7: 18119418.531 ops/s
# Warmup Iteration   8: 18231076.846 ops/s
# Warmup Iteration   9: 18244177.692 ops/s
# Warmup Iteration  10: 18223770.307 ops/s
# Warmup Iteration  11: 18061801.919 ops/s
# Warmup Iteration  12: 18166097.117 ops/s
# Warmup Iteration  13: 18125415.517 ops/s
# Warmup Iteration  14: 18226944.011 ops/s
# Warmup Iteration  15: 18254249.378 ops/s
# Warmup Iteration  16: 18206405.188 ops/s
# Warmup Iteration  17: 18256237.418 ops/s
# Warmup Iteration  18: 17974617.791 ops/s
# Warmup Iteration  19: 18191893.780 ops/s
# Warmup Iteration  20: 18241958.931 ops/s
# Warmup Iteration  21: 18241333.363 ops/s
# Warmup Iteration  22: 18253317.955 ops/s
# Warmup Iteration  23: 18249790.975 ops/s
# Warmup Iteration  24: 18185095.842 ops/s
# Warmup Iteration  25: 18279965.403 ops/s
# Warmup Iteration  26: 18178424.804 ops/s
# Warmup Iteration  27: 18259959.889 ops/s
# Warmup Iteration  28: 18196052.195 ops/s
# Warmup Iteration  29: 18226916.464 ops/s
# Warmup Iteration  30: 18087836.734 ops/s
Iteration   1: 18271634.109 ops/s
Iteration   2: 18276739.371 ops/s
Iteration   3: 18209657.831 ops/s
Iteration   4: 17974003.951 ops/s
Iteration   5: 18161664.912 ops/s
Iteration   6: 18285746.093 ops/s
Iteration   7: 18001676.105 ops/s
Iteration   8: 18241902.516 ops/s
Iteration   9: 18215714.927 ops/s
Iteration  10: 18123922.165 ops/s
Iteration  11: 18167334.076 ops/s
Iteration  12: 18225515.887 ops/s
Iteration  13: 18215880.389 ops/s
Iteration  14: 17939656.732 ops/s
Iteration  15: 18263944.654 ops/s
Iteration  16: 18288636.861 ops/s
Iteration  17: 17992785.708 ops/s
Iteration  18: 18172342.294 ops/s
Iteration  19: 18236638.971 ops/s
Iteration  20: 18268423.020 ops/s
Iteration  21: 18279088.542 ops/s
Iteration  22: 18275972.392 ops/s
Iteration  23: 18226002.168 ops/s
Iteration  24: 18139999.792 ops/s
Iteration  25: 18223974.817 ops/s
Iteration  26: 17989199.395 ops/s
Iteration  27: 18182950.655 ops/s
Iteration  28: 18130382.091 ops/s
Iteration  29: 18259160.594 ops/s
Iteration  30: 18006807.064 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testLazySelectForEach":
  18174911.936 ±(99.9%) 72123.239 ops/s [Average]
  (min, avg, max) = (17939656.732, 18174911.936, 18288636.861), stdev = 107950.677
  CI (99.9%): [18102788.697, 18247035.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testLazySelectForEach  thrpt   30  18174911.936 ± 72123.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNegativeInitialCapacity$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNegativeInitialCapacity

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776012.452 ops/s
# Warmup Iteration   2: 803325.990 ops/s
# Warmup Iteration   3: 1018325.362 ops/s
# Warmup Iteration   4: 1015299.073 ops/s
# Warmup Iteration   5: 1002675.081 ops/s
# Warmup Iteration   6: 1020195.889 ops/s
# Warmup Iteration   7: 1003147.240 ops/s
# Warmup Iteration   8: 1020276.236 ops/s
# Warmup Iteration   9: 1008167.376 ops/s
# Warmup Iteration  10: 1020658.066 ops/s
# Warmup Iteration  11: 976337.522 ops/s
# Warmup Iteration  12: 911297.788 ops/s
# Warmup Iteration  13: 1003881.790 ops/s
# Warmup Iteration  14: 1013140.574 ops/s
# Warmup Iteration  15: 1010102.479 ops/s
# Warmup Iteration  16: 1013325.475 ops/s
# Warmup Iteration  17: 1083436.825 ops/s
# Warmup Iteration  18: 1079523.504 ops/s
# Warmup Iteration  19: 1078921.351 ops/s
# Warmup Iteration  20: 1064440.060 ops/s
# Warmup Iteration  21: 1093736.548 ops/s
# Warmup Iteration  22: 1091621.513 ops/s
# Warmup Iteration  23: 1087427.826 ops/s
# Warmup Iteration  24: 1090550.643 ops/s
# Warmup Iteration  25: 1087846.084 ops/s
# Warmup Iteration  26: 1085882.670 ops/s
# Warmup Iteration  27: 1090263.346 ops/s
# Warmup Iteration  28: 1084699.016 ops/s
# Warmup Iteration  29: 1095986.615 ops/s
# Warmup Iteration  30: 1066625.832 ops/s
Iteration   1: 1075162.746 ops/s
Iteration   2: 1083160.806 ops/s
Iteration   3: 1090899.517 ops/s
Iteration   4: 1070752.812 ops/s
Iteration   5: 1073584.480 ops/s
Iteration   6: 1083855.519 ops/s
Iteration   7: 1082133.218 ops/s
Iteration   8: 1069467.023 ops/s
Iteration   9: 1086777.410 ops/s
Iteration  10: 1083144.505 ops/s
Iteration  11: 1080676.764 ops/s
Iteration  12: 1081489.400 ops/s
Iteration  13: 1078105.052 ops/s
Iteration  14: 1102306.808 ops/s
Iteration  15: 1081122.535 ops/s
Iteration  16: 1075998.740 ops/s
Iteration  17: 1088878.970 ops/s
Iteration  18: 1078798.963 ops/s
Iteration  19: 1086232.001 ops/s
Iteration  20: 1077412.228 ops/s
Iteration  21: 1087229.329 ops/s
Iteration  22: 1081439.429 ops/s
Iteration  23: 1080553.136 ops/s
Iteration  24: 1082808.482 ops/s
Iteration  25: 1078510.219 ops/s
Iteration  26: 1086834.542 ops/s
Iteration  27: 1087661.276 ops/s
Iteration  28: 1081264.537 ops/s
Iteration  29: 1078304.513 ops/s
Iteration  30: 1085225.025 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNegativeInitialCapacity":
  1081992.999 ±(99.9%) 4288.342 ops/s [Average]
  (min, avg, max) = (1069467.023, 1081992.999, 1102306.808), stdev = 6418.590
  CI (99.9%): [1077704.657, 1086281.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_testNegativeInitialCapacity  thrpt   30  1081992.999 ± 4288.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15950360.155 ops/s
# Warmup Iteration   2: 25820470.747 ops/s
# Warmup Iteration   3: 30206551.356 ops/s
# Warmup Iteration   4: 30168416.306 ops/s
# Warmup Iteration   5: 30217023.562 ops/s
# Warmup Iteration   6: 30183720.417 ops/s
# Warmup Iteration   7: 30155821.088 ops/s
# Warmup Iteration   8: 30232699.363 ops/s
# Warmup Iteration   9: 30119846.293 ops/s
# Warmup Iteration  10: 30183235.585 ops/s
# Warmup Iteration  11: 30031769.114 ops/s
# Warmup Iteration  12: 30253507.938 ops/s
# Warmup Iteration  13: 30234578.143 ops/s
# Warmup Iteration  14: 29923522.553 ops/s
# Warmup Iteration  15: 30157664.613 ops/s
# Warmup Iteration  16: 29813088.958 ops/s
# Warmup Iteration  17: 30201280.177 ops/s
# Warmup Iteration  18: 30046442.892 ops/s
# Warmup Iteration  19: 30142232.752 ops/s
# Warmup Iteration  20: 30282745.303 ops/s
# Warmup Iteration  21: 30276189.464 ops/s
# Warmup Iteration  22: 30149836.020 ops/s
# Warmup Iteration  23: 30163165.825 ops/s
# Warmup Iteration  24: 30199220.304 ops/s
# Warmup Iteration  25: 30094823.123 ops/s
# Warmup Iteration  26: 29974506.589 ops/s
# Warmup Iteration  27: 30246668.131 ops/s
# Warmup Iteration  28: 29861202.301 ops/s
# Warmup Iteration  29: 30321465.267 ops/s
# Warmup Iteration  30: 30105377.098 ops/s
Iteration   1: 30280286.391 ops/s
Iteration   2: 30284730.626 ops/s
Iteration   3: 30230071.473 ops/s
Iteration   4: 30147888.018 ops/s
Iteration   5: 30180097.777 ops/s
Iteration   6: 30310881.136 ops/s
Iteration   7: 30140461.204 ops/s
Iteration   8: 29744827.832 ops/s
Iteration   9: 29798581.140 ops/s
Iteration  10: 30253132.421 ops/s
Iteration  11: 30301048.607 ops/s
Iteration  12: 30203464.468 ops/s
Iteration  13: 30274598.797 ops/s
Iteration  14: 30195113.119 ops/s
Iteration  15: 30195484.869 ops/s
Iteration  16: 30211840.477 ops/s
Iteration  17: 30356582.167 ops/s
Iteration  18: 30290417.544 ops/s
Iteration  19: 30199120.134 ops/s
Iteration  20: 30295400.653 ops/s
Iteration  21: 30226674.877 ops/s
Iteration  22: 30268394.219 ops/s
Iteration  23: 30089155.553 ops/s
Iteration  24: 30252060.771 ops/s
Iteration  25: 30009591.519 ops/s
Iteration  26: 30345487.479 ops/s
Iteration  27: 30166434.889 ops/s
Iteration  28: 29769439.612 ops/s
Iteration  29: 30105771.595 ops/s
Iteration  30: 30235889.193 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewCollection":
  30178764.285 ±(99.9%) 105517.324 ops/s [Average]
  (min, avg, max) = (29744827.832, 30178764.285, 30356582.167), stdev = 157933.375
  CI (99.9%): [30073246.962, 30284281.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testNewCollection  thrpt   30  30178764.285 ± 105517.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521679.434 ops/s
# Warmup Iteration   2: 1239921.586 ops/s
# Warmup Iteration   3: 1048725.847 ops/s
# Warmup Iteration   4: 1247596.382 ops/s
# Warmup Iteration   5: 1246204.934 ops/s
# Warmup Iteration   6: 1248547.627 ops/s
# Warmup Iteration   7: 1249060.213 ops/s
# Warmup Iteration   8: 1245426.750 ops/s
# Warmup Iteration   9: 1241819.319 ops/s
# Warmup Iteration  10: 1251131.383 ops/s
# Warmup Iteration  11: 1236747.400 ops/s
# Warmup Iteration  12: 1250224.885 ops/s
# Warmup Iteration  13: 1247910.485 ops/s
# Warmup Iteration  14: 1251935.567 ops/s
# Warmup Iteration  15: 1250088.091 ops/s
# Warmup Iteration  16: 1253365.139 ops/s
# Warmup Iteration  17: 1228538.558 ops/s
# Warmup Iteration  18: 1247509.749 ops/s
# Warmup Iteration  19: 1245524.249 ops/s
# Warmup Iteration  20: 1246923.368 ops/s
# Warmup Iteration  21: 1247701.498 ops/s
# Warmup Iteration  22: 1237809.669 ops/s
# Warmup Iteration  23: 1248683.936 ops/s
# Warmup Iteration  24: 1239409.084 ops/s
# Warmup Iteration  25: 1242443.193 ops/s
# Warmup Iteration  26: 1233829.846 ops/s
# Warmup Iteration  27: 1247644.437 ops/s
# Warmup Iteration  28: 1240350.868 ops/s
# Warmup Iteration  29: 1249378.014 ops/s
# Warmup Iteration  30: 1246095.399 ops/s
Iteration   1: 1246103.483 ops/s
Iteration   2: 1249785.514 ops/s
Iteration   3: 1247165.392 ops/s
Iteration   4: 1241377.267 ops/s
Iteration   5: 1245983.814 ops/s
Iteration   6: 1248818.249 ops/s
Iteration   7: 1242865.637 ops/s
Iteration   8: 1206857.634 ops/s
Iteration   9: 1248815.036 ops/s
Iteration  10: 1232629.210 ops/s
Iteration  11: 1243719.894 ops/s
Iteration  12: 1249105.430 ops/s
Iteration  13: 1243589.774 ops/s
Iteration  14: 1247256.048 ops/s
Iteration  15: 1225965.721 ops/s
Iteration  16: 1226661.512 ops/s
Iteration  17: 1249018.762 ops/s
Iteration  18: 1242468.624 ops/s
Iteration  19: 1248956.418 ops/s
Iteration  20: 1244568.725 ops/s
Iteration  21: 1248098.539 ops/s
Iteration  22: 1225417.109 ops/s
Iteration  23: 1244036.877 ops/s
Iteration  24: 1246505.799 ops/s
Iteration  25: 1248598.117 ops/s
Iteration  26: 1248648.973 ops/s
Iteration  27: 1236460.943 ops/s
Iteration  28: 1225980.335 ops/s
Iteration  29: 1245247.909 ops/s
Iteration  30: 1251909.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithCollection":
  1241753.887 ±(99.9%) 6835.926 ops/s [Average]
  (min, avg, max) = (1206857.634, 1241753.887, 1251909.858), stdev = 10231.693
  CI (99.9%): [1234917.961, 1248589.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_testNewListWithCollection  thrpt   30  1241753.887 ± 6835.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8940356.638 ops/s
# Warmup Iteration   2: 17949902.447 ops/s
# Warmup Iteration   3: 16146641.269 ops/s
# Warmup Iteration   4: 19358875.075 ops/s
# Warmup Iteration   5: 19480056.988 ops/s
# Warmup Iteration   6: 19301756.310 ops/s
# Warmup Iteration   7: 19442471.666 ops/s
# Warmup Iteration   8: 19422332.305 ops/s
# Warmup Iteration   9: 19484533.163 ops/s
# Warmup Iteration  10: 19343820.975 ops/s
# Warmup Iteration  11: 19376462.032 ops/s
# Warmup Iteration  12: 19371598.395 ops/s
# Warmup Iteration  13: 19495852.788 ops/s
# Warmup Iteration  14: 19468181.487 ops/s
# Warmup Iteration  15: 19247449.595 ops/s
# Warmup Iteration  16: 19436338.045 ops/s
# Warmup Iteration  17: 19403498.432 ops/s
# Warmup Iteration  18: 19408218.933 ops/s
# Warmup Iteration  19: 19396703.972 ops/s
# Warmup Iteration  20: 19463454.233 ops/s
# Warmup Iteration  21: 19396351.114 ops/s
# Warmup Iteration  22: 19497113.358 ops/s
# Warmup Iteration  23: 19469848.485 ops/s
# Warmup Iteration  24: 19214127.473 ops/s
# Warmup Iteration  25: 19409231.082 ops/s
# Warmup Iteration  26: 19461868.610 ops/s
# Warmup Iteration  27: 19462934.413 ops/s
# Warmup Iteration  28: 19473387.171 ops/s
# Warmup Iteration  29: 19444769.523 ops/s
# Warmup Iteration  30: 19452169.167 ops/s
Iteration   1: 19422432.343 ops/s
Iteration   2: 19457681.352 ops/s
Iteration   3: 19553515.548 ops/s
Iteration   4: 19425305.730 ops/s
Iteration   5: 19101696.488 ops/s
Iteration   6: 19479065.198 ops/s
Iteration   7: 19368457.170 ops/s
Iteration   8: 19443039.371 ops/s
Iteration   9: 19438520.211 ops/s
Iteration  10: 19163019.931 ops/s
Iteration  11: 18801481.266 ops/s
Iteration  12: 19462686.965 ops/s
Iteration  13: 19522614.269 ops/s
Iteration  14: 18954375.990 ops/s
Iteration  15: 19476054.509 ops/s
Iteration  16: 19408761.046 ops/s
Iteration  17: 19491853.153 ops/s
Iteration  18: 19363272.982 ops/s
Iteration  19: 19447549.047 ops/s
Iteration  20: 19438458.702 ops/s
Iteration  21: 19486234.464 ops/s
Iteration  22: 19193221.707 ops/s
Iteration  23: 19408128.728 ops/s
Iteration  24: 19424989.334 ops/s
Iteration  25: 19287702.833 ops/s
Iteration  26: 19162898.219 ops/s
Iteration  27: 19452955.637 ops/s
Iteration  28: 19456235.971 ops/s
Iteration  29: 19452532.383 ops/s
Iteration  30: 19487048.027 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewListWithIterable":
  19367726.286 ±(99.9%) 116627.402 ops/s [Average]
  (min, avg, max) = (18801481.266, 19367726.286, 19553515.548), stdev = 174562.419
  CI (99.9%): [19251098.883, 19484353.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_testNewListWithIterable  thrpt   30  19367726.286 ± 116627.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5982669.107 ops/s
# Warmup Iteration   2: 9879178.082 ops/s
# Warmup Iteration   3: 11491741.775 ops/s
# Warmup Iteration   4: 11611601.186 ops/s
# Warmup Iteration   5: 11662625.233 ops/s
# Warmup Iteration   6: 11658787.686 ops/s
# Warmup Iteration   7: 11604585.481 ops/s
# Warmup Iteration   8: 11687992.639 ops/s
# Warmup Iteration   9: 11667047.783 ops/s
# Warmup Iteration  10: 11520567.691 ops/s
# Warmup Iteration  11: 11634170.728 ops/s
# Warmup Iteration  12: 11636678.352 ops/s
# Warmup Iteration  13: 11606151.729 ops/s
# Warmup Iteration  14: 11633608.717 ops/s
# Warmup Iteration  15: 11499310.717 ops/s
# Warmup Iteration  16: 11571644.672 ops/s
# Warmup Iteration  17: 11654381.776 ops/s
# Warmup Iteration  18: 11498194.586 ops/s
# Warmup Iteration  19: 11588481.939 ops/s
# Warmup Iteration  20: 11652989.210 ops/s
# Warmup Iteration  21: 11580459.848 ops/s
# Warmup Iteration  22: 11608808.265 ops/s
# Warmup Iteration  23: 11573279.028 ops/s
# Warmup Iteration  24: 11577331.090 ops/s
# Warmup Iteration  25: 11642756.698 ops/s
# Warmup Iteration  26: 11623063.802 ops/s
# Warmup Iteration  27: 11627329.778 ops/s
# Warmup Iteration  28: 11633478.251 ops/s
# Warmup Iteration  29: 11636520.611 ops/s
# Warmup Iteration  30: 11570572.814 ops/s
Iteration   1: 11667280.286 ops/s
Iteration   2: 11618455.790 ops/s
Iteration   3: 11569811.959 ops/s
Iteration   4: 11629558.423 ops/s
Iteration   5: 11569454.742 ops/s
Iteration   6: 11650614.018 ops/s
Iteration   7: 11675535.031 ops/s
Iteration   8: 11650005.280 ops/s
Iteration   9: 11610133.302 ops/s
Iteration  10: 11326524.751 ops/s
Iteration  11: 11586972.062 ops/s
Iteration  12: 11565158.383 ops/s
Iteration  13: 11632447.858 ops/s
Iteration  14: 11645001.457 ops/s
Iteration  15: 11610279.136 ops/s
Iteration  16: 11646439.080 ops/s
Iteration  17: 11661485.650 ops/s
Iteration  18: 11617528.749 ops/s
Iteration  19: 11655329.807 ops/s
Iteration  20: 11667369.766 ops/s
Iteration  21: 11615472.522 ops/s
Iteration  22: 11662417.454 ops/s
Iteration  23: 11677001.926 ops/s
Iteration  24: 11693478.864 ops/s
Iteration  25: 11641161.931 ops/s
Iteration  26: 11660080.594 ops/s
Iteration  27: 11643793.346 ops/s
Iteration  28: 11665595.003 ops/s
Iteration  29: 11468634.970 ops/s
Iteration  30: 11412839.730 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWith":
  11613195.396 ±(99.9%) 53942.926 ops/s [Average]
  (min, avg, max) = (11326524.751, 11613195.396, 11693478.864), stdev = 80739.238
  CI (99.9%): [11559252.470, 11667138.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testNewWith  thrpt   30  11613195.396 ± 53942.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3741397.589 ops/s
# Warmup Iteration   2: 6628850.659 ops/s
# Warmup Iteration   3: 7599368.378 ops/s
# Warmup Iteration   4: 7692695.011 ops/s
# Warmup Iteration   5: 7719114.459 ops/s
# Warmup Iteration   6: 7730249.836 ops/s
# Warmup Iteration   7: 7673975.961 ops/s
# Warmup Iteration   8: 7599448.130 ops/s
# Warmup Iteration   9: 7680327.622 ops/s
# Warmup Iteration  10: 7690263.841 ops/s
# Warmup Iteration  11: 7727062.973 ops/s
# Warmup Iteration  12: 7736859.959 ops/s
# Warmup Iteration  13: 7649194.624 ops/s
# Warmup Iteration  14: 7706705.187 ops/s
# Warmup Iteration  15: 7738037.524 ops/s
# Warmup Iteration  16: 7641856.681 ops/s
# Warmup Iteration  17: 7662921.947 ops/s
# Warmup Iteration  18: 7654987.238 ops/s
# Warmup Iteration  19: 7684373.024 ops/s
# Warmup Iteration  20: 7693404.105 ops/s
# Warmup Iteration  21: 7686293.585 ops/s
# Warmup Iteration  22: 7647267.459 ops/s
# Warmup Iteration  23: 7636671.016 ops/s
# Warmup Iteration  24: 7693511.174 ops/s
# Warmup Iteration  25: 7650010.626 ops/s
# Warmup Iteration  26: 7655690.345 ops/s
# Warmup Iteration  27: 7738945.420 ops/s
# Warmup Iteration  28: 7740562.294 ops/s
# Warmup Iteration  29: 7755466.883 ops/s
# Warmup Iteration  30: 7728478.776 ops/s
Iteration   1: 7518484.894 ops/s
Iteration   2: 7601678.088 ops/s
Iteration   3: 7708664.618 ops/s
Iteration   4: 7719659.833 ops/s
Iteration   5: 7747484.079 ops/s
Iteration   6: 7564931.876 ops/s
Iteration   7: 7713577.564 ops/s
Iteration   8: 7618573.386 ops/s
Iteration   9: 7754019.493 ops/s
Iteration  10: 7787319.774 ops/s
Iteration  11: 7760373.421 ops/s
Iteration  12: 7736481.430 ops/s
Iteration  13: 7752355.886 ops/s
Iteration  14: 7592986.220 ops/s
Iteration  15: 7733614.435 ops/s
Iteration  16: 7665737.764 ops/s
Iteration  17: 7731554.241 ops/s
Iteration  18: 7672961.716 ops/s
Iteration  19: 7726167.809 ops/s
Iteration  20: 7665159.211 ops/s
Iteration  21: 7712194.785 ops/s
Iteration  22: 7713997.352 ops/s
Iteration  23: 7721343.069 ops/s
Iteration  24: 7438177.771 ops/s
Iteration  25: 7728589.436 ops/s
Iteration  26: 7749104.242 ops/s
Iteration  27: 7726465.543 ops/s
Iteration  28: 7632820.556 ops/s
Iteration  29: 7660773.384 ops/s
Iteration  30: 7737909.990 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithVarArgs":
  7686438.729 ±(99.9%) 52823.634 ops/s [Average]
  (min, avg, max) = (7438177.771, 7686438.729, 7787319.774), stdev = 79063.934
  CI (99.9%): [7633615.095, 7739262.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  7686438.729 ± 52823.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4321813.458 ops/s
# Warmup Iteration   2: 7205266.794 ops/s
# Warmup Iteration   3: 8595356.576 ops/s
# Warmup Iteration   4: 8495729.618 ops/s
# Warmup Iteration   5: 8567409.447 ops/s
# Warmup Iteration   6: 8484600.744 ops/s
# Warmup Iteration   7: 8476968.166 ops/s
# Warmup Iteration   8: 8490357.890 ops/s
# Warmup Iteration   9: 8510408.356 ops/s
# Warmup Iteration  10: 8562821.862 ops/s
# Warmup Iteration  11: 8374259.191 ops/s
# Warmup Iteration  12: 8469585.401 ops/s
# Warmup Iteration  13: 8584380.964 ops/s
# Warmup Iteration  14: 8587747.714 ops/s
# Warmup Iteration  15: 8543858.198 ops/s
# Warmup Iteration  16: 8499185.152 ops/s
# Warmup Iteration  17: 8519454.517 ops/s
# Warmup Iteration  18: 8563829.768 ops/s
# Warmup Iteration  19: 8572171.472 ops/s
# Warmup Iteration  20: 8521299.142 ops/s
# Warmup Iteration  21: 8515384.598 ops/s
# Warmup Iteration  22: 8536428.817 ops/s
# Warmup Iteration  23: 8504412.066 ops/s
# Warmup Iteration  24: 8565709.169 ops/s
# Warmup Iteration  25: 8548472.679 ops/s
# Warmup Iteration  26: 8562540.439 ops/s
# Warmup Iteration  27: 8539952.060 ops/s
# Warmup Iteration  28: 8552730.420 ops/s
# Warmup Iteration  29: 8584835.715 ops/s
# Warmup Iteration  30: 8561155.711 ops/s
Iteration   1: 8465879.772 ops/s
Iteration   2: 8515715.626 ops/s
Iteration   3: 8593934.636 ops/s
Iteration   4: 8552962.844 ops/s
Iteration   5: 8552923.080 ops/s
Iteration   6: 8483129.381 ops/s
Iteration   7: 8593519.394 ops/s
Iteration   8: 8585249.956 ops/s
Iteration   9: 8570734.775 ops/s
Iteration  10: 8415189.548 ops/s
Iteration  11: 8490739.734 ops/s
Iteration  12: 8586739.420 ops/s
Iteration  13: 8422300.375 ops/s
Iteration  14: 8563567.849 ops/s
Iteration  15: 8522245.216 ops/s
Iteration  16: 8515808.810 ops/s
Iteration  17: 8330863.184 ops/s
Iteration  18: 8558765.607 ops/s
Iteration  19: 8563622.826 ops/s
Iteration  20: 8530395.980 ops/s
Iteration  21: 8529141.191 ops/s
Iteration  22: 8560477.308 ops/s
Iteration  23: 8571029.617 ops/s
Iteration  24: 8589357.373 ops/s
Iteration  25: 8575490.040 ops/s
Iteration  26: 8589739.096 ops/s
Iteration  27: 8417780.484 ops/s
Iteration  28: 8596986.171 ops/s
Iteration  29: 8495316.571 ops/s
Iteration  30: 8545980.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWith":
  8529519.541 ±(99.9%) 43555.414 ops/s [Average]
  (min, avg, max) = (8330863.184, 8529519.541, 8596986.171), stdev = 65191.699
  CI (99.9%): [8485964.126, 8573074.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testNewWithWith  thrpt   30  8529519.541 ± 43555.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4078131.137 ops/s
# Warmup Iteration   2: 6999755.175 ops/s
# Warmup Iteration   3: 8208780.184 ops/s
# Warmup Iteration   4: 8157581.831 ops/s
# Warmup Iteration   5: 8204670.808 ops/s
# Warmup Iteration   6: 8164748.262 ops/s
# Warmup Iteration   7: 8136965.003 ops/s
# Warmup Iteration   8: 8187210.430 ops/s
# Warmup Iteration   9: 8183992.397 ops/s
# Warmup Iteration  10: 8233738.290 ops/s
# Warmup Iteration  11: 8195637.700 ops/s
# Warmup Iteration  12: 8169683.627 ops/s
# Warmup Iteration  13: 8173089.067 ops/s
# Warmup Iteration  14: 8184489.743 ops/s
# Warmup Iteration  15: 8145491.831 ops/s
# Warmup Iteration  16: 8217950.321 ops/s
# Warmup Iteration  17: 8139112.308 ops/s
# Warmup Iteration  18: 8240735.724 ops/s
# Warmup Iteration  19: 8189776.536 ops/s
# Warmup Iteration  20: 8217570.933 ops/s
# Warmup Iteration  21: 8174045.906 ops/s
# Warmup Iteration  22: 8164246.167 ops/s
# Warmup Iteration  23: 8211229.754 ops/s
# Warmup Iteration  24: 8234441.560 ops/s
# Warmup Iteration  25: 8239399.724 ops/s
# Warmup Iteration  26: 8258464.868 ops/s
# Warmup Iteration  27: 8239322.163 ops/s
# Warmup Iteration  28: 8248654.095 ops/s
# Warmup Iteration  29: 8247924.360 ops/s
# Warmup Iteration  30: 8219219.542 ops/s
Iteration   1: 8236945.410 ops/s
Iteration   2: 8236527.706 ops/s
Iteration   3: 8242656.437 ops/s
Iteration   4: 8255089.171 ops/s
Iteration   5: 8246057.334 ops/s
Iteration   6: 8239270.073 ops/s
Iteration   7: 8221255.995 ops/s
Iteration   8: 8221614.298 ops/s
Iteration   9: 8080780.280 ops/s
Iteration  10: 8215785.693 ops/s
Iteration  11: 8241101.817 ops/s
Iteration  12: 8167689.164 ops/s
Iteration  13: 8179131.887 ops/s
Iteration  14: 8217329.401 ops/s
Iteration  15: 8225177.348 ops/s
Iteration  16: 8207240.575 ops/s
Iteration  17: 8234310.428 ops/s
Iteration  18: 8249323.320 ops/s
Iteration  19: 8228486.882 ops/s
Iteration  20: 8152746.549 ops/s
Iteration  21: 8224883.874 ops/s
Iteration  22: 8214188.978 ops/s
Iteration  23: 8242582.591 ops/s
Iteration  24: 8272214.808 ops/s
Iteration  25: 8130903.785 ops/s
Iteration  26: 8173088.850 ops/s
Iteration  27: 8202281.145 ops/s
Iteration  28: 8230165.282 ops/s
Iteration  29: 8160871.742 ops/s
Iteration  30: 8159295.082 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testNewWithWithWith":
  8210299.864 ±(99.9%) 28203.039 ops/s [Average]
  (min, avg, max) = (8080780.280, 8210299.864, 8272214.808), stdev = 42212.984
  CI (99.9%): [8182096.825, 8238502.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  8210299.864 ± 28203.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testOutOfBoundsCondition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testOutOfBoundsCondition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737369.367 ops/s
# Warmup Iteration   2: 766646.807 ops/s
# Warmup Iteration   3: 948211.687 ops/s
# Warmup Iteration   4: 973827.529 ops/s
# Warmup Iteration   5: 977624.890 ops/s
# Warmup Iteration   6: 964130.333 ops/s
# Warmup Iteration   7: 975303.438 ops/s
# Warmup Iteration   8: 966999.647 ops/s
# Warmup Iteration   9: 973907.705 ops/s
# Warmup Iteration  10: 967651.130 ops/s
# Warmup Iteration  11: 973457.433 ops/s
# Warmup Iteration  12: 963969.699 ops/s
# Warmup Iteration  13: 829131.010 ops/s
# Warmup Iteration  14: 980843.162 ops/s
# Warmup Iteration  15: 977305.666 ops/s
# Warmup Iteration  16: 976000.587 ops/s
# Warmup Iteration  17: 1045327.770 ops/s
# Warmup Iteration  18: 1040734.762 ops/s
# Warmup Iteration  19: 1042939.169 ops/s
# Warmup Iteration  20: 1040823.903 ops/s
# Warmup Iteration  21: 1045368.514 ops/s
# Warmup Iteration  22: 1041099.368 ops/s
# Warmup Iteration  23: 1040619.398 ops/s
# Warmup Iteration  24: 1028833.185 ops/s
# Warmup Iteration  25: 1030407.000 ops/s
# Warmup Iteration  26: 1041311.848 ops/s
# Warmup Iteration  27: 1041094.770 ops/s
# Warmup Iteration  28: 1031831.282 ops/s
# Warmup Iteration  29: 1034086.462 ops/s
# Warmup Iteration  30: 1023818.217 ops/s
Iteration   1: 1041948.160 ops/s
Iteration   2: 1039971.664 ops/s
Iteration   3: 1025627.718 ops/s
Iteration   4: 1045617.370 ops/s
Iteration   5: 1040826.142 ops/s
Iteration   6: 1026828.231 ops/s
Iteration   7: 1041050.723 ops/s
Iteration   8: 1039265.580 ops/s
Iteration   9: 1042578.016 ops/s
Iteration  10: 1040530.443 ops/s
Iteration  11: 1041464.074 ops/s
Iteration  12: 1039269.316 ops/s
Iteration  13: 1046225.623 ops/s
Iteration  14: 1040664.505 ops/s
Iteration  15: 1042834.776 ops/s
Iteration  16: 1033556.082 ops/s
Iteration  17: 1042536.797 ops/s
Iteration  18: 1029749.228 ops/s
Iteration  19: 1041862.161 ops/s
Iteration  20: 1032092.468 ops/s
Iteration  21: 1022834.038 ops/s
Iteration  22: 1025270.169 ops/s
Iteration  23: 1037847.502 ops/s
Iteration  24: 1010264.998 ops/s
Iteration  25: 1042350.364 ops/s
Iteration  26: 1023845.872 ops/s
Iteration  27: 1042646.213 ops/s
Iteration  28: 1040024.213 ops/s
Iteration  29: 1044277.322 ops/s
Iteration  30: 1039225.713 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testOutOfBoundsCondition":
  1036769.516 ±(99.9%) 5649.202 ops/s [Average]
  (min, avg, max) = (1010264.998, 1036769.516, 1046225.623), stdev = 8455.460
  CI (99.9%): [1031120.314, 1042418.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_testOutOfBoundsCondition  thrpt   30  1036769.516 ± 5649.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveAllWithWeakReference$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveAllWithWeakReference

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48.895 ops/s
# Warmup Iteration   2: 51.795 ops/s
# Warmup Iteration   3: 52.360 ops/s
# Warmup Iteration   4: 51.162 ops/s
# Warmup Iteration   5: 53.300 ops/s
# Warmup Iteration   6: 51.079 ops/s
# Warmup Iteration   7: 52.010 ops/s
# Warmup Iteration   8: 51.691 ops/s
# Warmup Iteration   9: 52.368 ops/s
# Warmup Iteration  10: 52.063 ops/s
# Warmup Iteration  11: 51.180 ops/s
# Warmup Iteration  12: 51.613 ops/s
# Warmup Iteration  13: 50.901 ops/s
# Warmup Iteration  14: 51.034 ops/s
# Warmup Iteration  15: 51.114 ops/s
# Warmup Iteration  16: 51.013 ops/s
# Warmup Iteration  17: 50.907 ops/s
# Warmup Iteration  18: 49.811 ops/s
# Warmup Iteration  19: 51.138 ops/s
# Warmup Iteration  20: 51.973 ops/s
# Warmup Iteration  21: 51.539 ops/s
# Warmup Iteration  22: 51.241 ops/s
# Warmup Iteration  23: 51.155 ops/s
# Warmup Iteration  24: 51.143 ops/s
# Warmup Iteration  25: 49.862 ops/s
# Warmup Iteration  26: 50.237 ops/s
# Warmup Iteration  27: 51.017 ops/s
# Warmup Iteration  28: 50.952 ops/s
# Warmup Iteration  29: 51.189 ops/s
# Warmup Iteration  30: 50.219 ops/s
Iteration   1: 51.417 ops/s
Iteration   2: 49.848 ops/s
Iteration   3: 49.398 ops/s
Iteration   4: 49.006 ops/s
Iteration   5: 50.919 ops/s
Iteration   6: 49.421 ops/s
Iteration   7: 50.858 ops/s
Iteration   8: 51.441 ops/s
Iteration   9: 50.003 ops/s
Iteration  10: 48.147 ops/s
Iteration  11: 48.894 ops/s
Iteration  12: 50.710 ops/s
Iteration  13: 49.563 ops/s
Iteration  14: 49.114 ops/s
Iteration  15: 52.244 ops/s
Iteration  16: 49.650 ops/s
Iteration  17: 50.928 ops/s
Iteration  18: 49.830 ops/s
Iteration  19: 51.861 ops/s
Iteration  20: 49.490 ops/s
Iteration  21: 50.813 ops/s
Iteration  22: 51.650 ops/s
Iteration  23: 48.274 ops/s
Iteration  24: 51.433 ops/s
Iteration  25: 48.778 ops/s
Iteration  26: 49.406 ops/s
Iteration  27: 50.798 ops/s
Iteration  28: 49.249 ops/s
Iteration  29: 48.677 ops/s
Iteration  30: 50.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveAllWithWeakReference":
  50.088 ±(99.9%) 0.754 ops/s [Average]
  (min, avg, max) = (48.147, 50.088, 52.244), stdev = 1.129
  CI (99.9%): [49.334, 50.843] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt   Score   Error  Units
FastListTest._Benchmark.benchmark_testRemoveAllWithWeakReference  thrpt   30  50.088 ± 0.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveUsingPredicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveUsingPredicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7751132.627 ops/s
# Warmup Iteration   2: 13629608.234 ops/s
# Warmup Iteration   3: 15173080.656 ops/s
# Warmup Iteration   4: 15728748.715 ops/s
# Warmup Iteration   5: 15688373.030 ops/s
# Warmup Iteration   6: 15735702.525 ops/s
# Warmup Iteration   7: 15636102.685 ops/s
# Warmup Iteration   8: 15732329.609 ops/s
# Warmup Iteration   9: 15698826.774 ops/s
# Warmup Iteration  10: 15736186.817 ops/s
# Warmup Iteration  11: 15722444.022 ops/s
# Warmup Iteration  12: 15602011.501 ops/s
# Warmup Iteration  13: 15439032.282 ops/s
# Warmup Iteration  14: 15638001.991 ops/s
# Warmup Iteration  15: 15705816.401 ops/s
# Warmup Iteration  16: 15761194.060 ops/s
# Warmup Iteration  17: 15735003.261 ops/s
# Warmup Iteration  18: 15601900.888 ops/s
# Warmup Iteration  19: 15704359.999 ops/s
# Warmup Iteration  20: 15656705.408 ops/s
# Warmup Iteration  21: 15639651.939 ops/s
# Warmup Iteration  22: 15553575.901 ops/s
# Warmup Iteration  23: 15457026.944 ops/s
# Warmup Iteration  24: 15720189.671 ops/s
# Warmup Iteration  25: 15699138.182 ops/s
# Warmup Iteration  26: 15650353.492 ops/s
# Warmup Iteration  27: 15697677.045 ops/s
# Warmup Iteration  28: 15617699.452 ops/s
# Warmup Iteration  29: 15729542.075 ops/s
# Warmup Iteration  30: 15645416.214 ops/s
Iteration   1: 15723442.842 ops/s
Iteration   2: 15672547.221 ops/s
Iteration   3: 15678635.079 ops/s
Iteration   4: 15469087.251 ops/s
Iteration   5: 15416926.806 ops/s
Iteration   6: 15554375.786 ops/s
Iteration   7: 15734181.045 ops/s
Iteration   8: 15743096.067 ops/s
Iteration   9: 15753812.954 ops/s
Iteration  10: 15546153.940 ops/s
Iteration  11: 15707612.457 ops/s
Iteration  12: 15559374.007 ops/s
Iteration  13: 15714551.158 ops/s
Iteration  14: 15587509.100 ops/s
Iteration  15: 15696611.369 ops/s
Iteration  16: 15691222.097 ops/s
Iteration  17: 15725046.062 ops/s
Iteration  18: 15737851.777 ops/s
Iteration  19: 15710301.622 ops/s
Iteration  20: 15732400.112 ops/s
Iteration  21: 15693638.468 ops/s
Iteration  22: 15160071.380 ops/s
Iteration  23: 15689994.475 ops/s
Iteration  24: 15703639.767 ops/s
Iteration  25: 15753250.433 ops/s
Iteration  26: 15700614.122 ops/s
Iteration  27: 15720150.934 ops/s
Iteration  28: 15270840.540 ops/s
Iteration  29: 15751197.223 ops/s
Iteration  30: 15681864.127 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testRemoveUsingPredicate":
  15642666.674 ±(99.9%) 96535.733 ops/s [Average]
  (min, avg, max) = (15160071.380, 15642666.674, 15753812.954), stdev = 144490.152
  CI (99.9%): [15546130.941, 15739202.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testRemoveUsingPredicate  thrpt   30  15642666.674 ± 96535.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145764.958 ops/s
# Warmup Iteration   2: 256691.039 ops/s
# Warmup Iteration   3: 282415.467 ops/s
# Warmup Iteration   4: 281776.463 ops/s
# Warmup Iteration   5: 264830.804 ops/s
# Warmup Iteration   6: 261372.241 ops/s
# Warmup Iteration   7: 284308.542 ops/s
# Warmup Iteration   8: 285886.262 ops/s
# Warmup Iteration   9: 284074.120 ops/s
# Warmup Iteration  10: 284329.605 ops/s
# Warmup Iteration  11: 284257.021 ops/s
# Warmup Iteration  12: 282835.322 ops/s
# Warmup Iteration  13: 284353.526 ops/s
# Warmup Iteration  14: 283317.707 ops/s
# Warmup Iteration  15: 283599.040 ops/s
# Warmup Iteration  16: 280247.736 ops/s
# Warmup Iteration  17: 280486.844 ops/s
# Warmup Iteration  18: 284915.182 ops/s
# Warmup Iteration  19: 284597.587 ops/s
# Warmup Iteration  20: 282520.492 ops/s
# Warmup Iteration  21: 285109.928 ops/s
# Warmup Iteration  22: 284380.283 ops/s
# Warmup Iteration  23: 285004.987 ops/s
# Warmup Iteration  24: 284766.897 ops/s
# Warmup Iteration  25: 285383.318 ops/s
# Warmup Iteration  26: 282861.319 ops/s
# Warmup Iteration  27: 282496.707 ops/s
# Warmup Iteration  28: 285785.531 ops/s
# Warmup Iteration  29: 284423.740 ops/s
# Warmup Iteration  30: 282100.568 ops/s
Iteration   1: 285780.491 ops/s
Iteration   2: 285141.699 ops/s
Iteration   3: 283844.541 ops/s
Iteration   4: 284960.235 ops/s
Iteration   5: 281139.482 ops/s
Iteration   6: 284662.379 ops/s
Iteration   7: 285348.336 ops/s
Iteration   8: 283699.071 ops/s
Iteration   9: 286625.776 ops/s
Iteration  10: 284904.602 ops/s
Iteration  11: 282881.306 ops/s
Iteration  12: 286410.878 ops/s
Iteration  13: 283553.853 ops/s
Iteration  14: 285862.672 ops/s
Iteration  15: 283510.674 ops/s
Iteration  16: 284952.401 ops/s
Iteration  17: 285176.940 ops/s
Iteration  18: 285125.770 ops/s
Iteration  19: 286564.950 ops/s
Iteration  20: 286129.173 ops/s
Iteration  21: 285797.650 ops/s
Iteration  22: 285282.821 ops/s
Iteration  23: 282786.534 ops/s
Iteration  24: 284871.995 ops/s
Iteration  25: 288246.783 ops/s
Iteration  26: 282524.384 ops/s
Iteration  27: 287261.114 ops/s
Iteration  28: 284361.138 ops/s
Iteration  29: 283337.656 ops/s
Iteration  30: 285829.711 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfEmpty":
  284885.834 ±(99.9%) 1020.358 ops/s [Average]
  (min, avg, max) = (281139.482, 284885.834, 288246.783), stdev = 1527.224
  CI (99.9%): [283865.476, 285906.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_testSerializationOfEmpty  thrpt   30  284885.834 ± 1020.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfSublist$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfSublist

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67218.691 ops/s
# Warmup Iteration   2: 95831.312 ops/s
# Warmup Iteration   3: 127761.639 ops/s
# Warmup Iteration   4: 128233.464 ops/s
# Warmup Iteration   5: 127474.710 ops/s
# Warmup Iteration   6: 128554.018 ops/s
# Warmup Iteration   7: 129736.626 ops/s
# Warmup Iteration   8: 110536.560 ops/s
# Warmup Iteration   9: 129578.812 ops/s
# Warmup Iteration  10: 129327.995 ops/s
# Warmup Iteration  11: 128903.411 ops/s
# Warmup Iteration  12: 129557.814 ops/s
# Warmup Iteration  13: 129636.889 ops/s
# Warmup Iteration  14: 129717.448 ops/s
# Warmup Iteration  15: 129504.903 ops/s
# Warmup Iteration  16: 129400.443 ops/s
# Warmup Iteration  17: 129741.759 ops/s
# Warmup Iteration  18: 129895.773 ops/s
# Warmup Iteration  19: 130017.126 ops/s
# Warmup Iteration  20: 129983.550 ops/s
# Warmup Iteration  21: 129776.889 ops/s
# Warmup Iteration  22: 129970.702 ops/s
# Warmup Iteration  23: 130222.729 ops/s
# Warmup Iteration  24: 128504.330 ops/s
# Warmup Iteration  25: 129671.677 ops/s
# Warmup Iteration  26: 129477.099 ops/s
# Warmup Iteration  27: 129054.099 ops/s
# Warmup Iteration  28: 130168.526 ops/s
# Warmup Iteration  29: 128817.069 ops/s
# Warmup Iteration  30: 129863.139 ops/s
Iteration   1: 129231.009 ops/s
Iteration   2: 130021.683 ops/s
Iteration   3: 129695.627 ops/s
Iteration   4: 129662.591 ops/s
Iteration   5: 130194.907 ops/s
Iteration   6: 130155.507 ops/s
Iteration   7: 127746.472 ops/s
Iteration   8: 127649.520 ops/s
Iteration   9: 130183.977 ops/s
Iteration  10: 129518.564 ops/s
Iteration  11: 129443.935 ops/s
Iteration  12: 129184.629 ops/s
Iteration  13: 130590.276 ops/s
Iteration  14: 130283.075 ops/s
Iteration  15: 130053.603 ops/s
Iteration  16: 130532.242 ops/s
Iteration  17: 130123.530 ops/s
Iteration  18: 130508.344 ops/s
Iteration  19: 130539.401 ops/s
Iteration  20: 129954.345 ops/s
Iteration  21: 125914.759 ops/s
Iteration  22: 130226.946 ops/s
Iteration  23: 130355.567 ops/s
Iteration  24: 130443.246 ops/s
Iteration  25: 128156.926 ops/s
Iteration  26: 127422.550 ops/s
Iteration  27: 130368.762 ops/s
Iteration  28: 130230.563 ops/s
Iteration  29: 130960.842 ops/s
Iteration  30: 130108.215 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSerializationOfSublist":
  129648.720 ±(99.9%) 769.912 ops/s [Average]
  (min, avg, max) = (125914.759, 129648.720, 130960.842), stdev = 1152.368
  CI (99.9%): [128878.808, 130418.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_testSerializationOfSublist  thrpt   30  129648.720 ± 769.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSetAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSetAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5645978.584 ops/s
# Warmup Iteration   2: 10324519.137 ops/s
# Warmup Iteration   3: 9938565.922 ops/s
# Warmup Iteration   4: 11093728.753 ops/s
# Warmup Iteration   5: 11040859.084 ops/s
# Warmup Iteration   6: 10966630.871 ops/s
# Warmup Iteration   7: 11069406.207 ops/s
# Warmup Iteration   8: 11083322.497 ops/s
# Warmup Iteration   9: 10962343.270 ops/s
# Warmup Iteration  10: 11080166.798 ops/s
# Warmup Iteration  11: 10872568.702 ops/s
# Warmup Iteration  12: 10986293.235 ops/s
# Warmup Iteration  13: 11060498.635 ops/s
# Warmup Iteration  14: 11054248.377 ops/s
# Warmup Iteration  15: 10985970.173 ops/s
# Warmup Iteration  16: 11065875.166 ops/s
# Warmup Iteration  17: 11038644.782 ops/s
# Warmup Iteration  18: 11087297.107 ops/s
# Warmup Iteration  19: 10986616.257 ops/s
# Warmup Iteration  20: 11012978.107 ops/s
# Warmup Iteration  21: 11101425.681 ops/s
# Warmup Iteration  22: 11070625.543 ops/s
# Warmup Iteration  23: 11097327.466 ops/s
# Warmup Iteration  24: 10872421.453 ops/s
# Warmup Iteration  25: 10890443.516 ops/s
# Warmup Iteration  26: 10982503.045 ops/s
# Warmup Iteration  27: 11040728.689 ops/s
# Warmup Iteration  28: 11063700.454 ops/s
# Warmup Iteration  29: 10997917.204 ops/s
# Warmup Iteration  30: 11039065.225 ops/s
Iteration   1: 11031274.719 ops/s
Iteration   2: 11031258.197 ops/s
Iteration   3: 11022471.224 ops/s
Iteration   4: 10988332.647 ops/s
Iteration   5: 11082028.346 ops/s
Iteration   6: 11018129.905 ops/s
Iteration   7: 11049577.325 ops/s
Iteration   8: 11082844.801 ops/s
Iteration   9: 11077113.282 ops/s
Iteration  10: 11072247.473 ops/s
Iteration  11: 11070805.428 ops/s
Iteration  12: 11065472.948 ops/s
Iteration  13: 10792379.520 ops/s
Iteration  14: 10924417.877 ops/s
Iteration  15: 11083536.699 ops/s
Iteration  16: 11074559.333 ops/s
Iteration  17: 10893504.864 ops/s
Iteration  18: 11112797.405 ops/s
Iteration  19: 11063193.253 ops/s
Iteration  20: 11007851.248 ops/s
Iteration  21: 10888234.587 ops/s
Iteration  22: 11075572.238 ops/s
Iteration  23: 10964215.511 ops/s
Iteration  24: 10984571.066 ops/s
Iteration  25: 11084457.535 ops/s
Iteration  26: 10923486.488 ops/s
Iteration  27: 11047487.457 ops/s
Iteration  28: 11083322.233 ops/s
Iteration  29: 11017146.401 ops/s
Iteration  30: 10971605.107 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSetAtIndex":
  11019463.171 ±(99.9%) 49712.805 ops/s [Average]
  (min, avg, max) = (10792379.520, 11019463.171, 11112797.405), stdev = 74407.791
  CI (99.9%): [10969750.366, 11069175.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testSetAtIndex  thrpt   30  11019463.171 ± 49712.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16254.764 ops/s
# Warmup Iteration   2: 17499.951 ops/s
# Warmup Iteration   3: 17649.580 ops/s
# Warmup Iteration   4: 17614.651 ops/s
# Warmup Iteration   5: 17650.887 ops/s
# Warmup Iteration   6: 17694.489 ops/s
# Warmup Iteration   7: 17609.013 ops/s
# Warmup Iteration   8: 17687.337 ops/s
# Warmup Iteration   9: 17717.788 ops/s
# Warmup Iteration  10: 17449.205 ops/s
# Warmup Iteration  11: 17730.136 ops/s
# Warmup Iteration  12: 17701.875 ops/s
# Warmup Iteration  13: 17735.650 ops/s
# Warmup Iteration  14: 17704.804 ops/s
# Warmup Iteration  15: 17696.588 ops/s
# Warmup Iteration  16: 17658.356 ops/s
# Warmup Iteration  17: 17706.190 ops/s
# Warmup Iteration  18: 17725.978 ops/s
# Warmup Iteration  19: 17656.141 ops/s
# Warmup Iteration  20: 17721.992 ops/s
# Warmup Iteration  21: 17737.192 ops/s
# Warmup Iteration  22: 17729.733 ops/s
# Warmup Iteration  23: 18011.362 ops/s
# Warmup Iteration  24: 18408.259 ops/s
# Warmup Iteration  25: 18424.652 ops/s
# Warmup Iteration  26: 18426.514 ops/s
# Warmup Iteration  27: 18174.216 ops/s
# Warmup Iteration  28: 18403.158 ops/s
# Warmup Iteration  29: 18372.559 ops/s
# Warmup Iteration  30: 18392.526 ops/s
Iteration   1: 18365.607 ops/s
Iteration   2: 18432.720 ops/s
Iteration   3: 18432.037 ops/s
Iteration   4: 18381.902 ops/s
Iteration   5: 18394.489 ops/s
Iteration   6: 18412.469 ops/s
Iteration   7: 18365.315 ops/s
Iteration   8: 18148.397 ops/s
Iteration   9: 18376.937 ops/s
Iteration  10: 18380.014 ops/s
Iteration  11: 18399.074 ops/s
Iteration  12: 18413.127 ops/s
Iteration  13: 18381.282 ops/s
Iteration  14: 18338.154 ops/s
Iteration  15: 18339.766 ops/s
Iteration  16: 18367.566 ops/s
Iteration  17: 18326.699 ops/s
Iteration  18: 18341.665 ops/s
Iteration  19: 18432.381 ops/s
Iteration  20: 18162.842 ops/s
Iteration  21: 18406.831 ops/s
Iteration  22: 18422.259 ops/s
Iteration  23: 18448.991 ops/s
Iteration  24: 18391.060 ops/s
Iteration  25: 18407.724 ops/s
Iteration  26: 18303.682 ops/s
Iteration  27: 18028.202 ops/s
Iteration  28: 18416.042 ops/s
Iteration  29: 18401.180 ops/s
Iteration  30: 18374.200 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSort":
  18359.754 ±(99.9%) 61.691 ops/s [Average]
  (min, avg, max) = (18028.202, 18359.754, 18448.991), stdev = 92.336
  CI (99.9%): [18298.063, 18421.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt      Score    Error  Units
FastListTest._Benchmark.benchmark_testSort  thrpt   30  18359.754 ± 61.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSortOnListWithLessThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSortOnListWithLessThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734729.149 ops/s
# Warmup Iteration   2: 1466741.362 ops/s
# Warmup Iteration   3: 1253327.146 ops/s
# Warmup Iteration   4: 1462969.901 ops/s
# Warmup Iteration   5: 1474826.104 ops/s
# Warmup Iteration   6: 1473494.694 ops/s
# Warmup Iteration   7: 1478468.407 ops/s
# Warmup Iteration   8: 1489182.730 ops/s
# Warmup Iteration   9: 1480092.630 ops/s
# Warmup Iteration  10: 1485297.279 ops/s
# Warmup Iteration  11: 1488952.857 ops/s
# Warmup Iteration  12: 1489605.197 ops/s
# Warmup Iteration  13: 1480164.293 ops/s
# Warmup Iteration  14: 1484109.169 ops/s
# Warmup Iteration  15: 1475393.494 ops/s
# Warmup Iteration  16: 1492632.596 ops/s
# Warmup Iteration  17: 1487867.351 ops/s
# Warmup Iteration  18: 1491112.290 ops/s
# Warmup Iteration  19: 1491930.952 ops/s
# Warmup Iteration  20: 1491395.704 ops/s
# Warmup Iteration  21: 1492559.963 ops/s
# Warmup Iteration  22: 1479869.852 ops/s
# Warmup Iteration  23: 1491575.928 ops/s
# Warmup Iteration  24: 1490658.653 ops/s
# Warmup Iteration  25: 1491745.174 ops/s
# Warmup Iteration  26: 1488722.395 ops/s
# Warmup Iteration  27: 1491847.687 ops/s
# Warmup Iteration  28: 1486043.661 ops/s
# Warmup Iteration  29: 1486573.851 ops/s
# Warmup Iteration  30: 1491692.097 ops/s
Iteration   1: 1487432.394 ops/s
Iteration   2: 1495020.744 ops/s
Iteration   3: 1491099.679 ops/s
Iteration   4: 1497720.854 ops/s
Iteration   5: 1488692.526 ops/s
Iteration   6: 1494990.706 ops/s
Iteration   7: 1480323.892 ops/s
Iteration   8: 1485435.370 ops/s
Iteration   9: 1490465.148 ops/s
Iteration  10: 1489942.755 ops/s
Iteration  11: 1467621.265 ops/s
Iteration  12: 1487161.625 ops/s
Iteration  13: 1493063.612 ops/s
Iteration  14: 1489090.346 ops/s
Iteration  15: 1488075.248 ops/s
Iteration  16: 1490499.407 ops/s
Iteration  17: 1467367.507 ops/s
Iteration  18: 1485841.731 ops/s
Iteration  19: 1482500.705 ops/s
Iteration  20: 1490708.703 ops/s
Iteration  21: 1489492.702 ops/s
Iteration  22: 1497121.716 ops/s
Iteration  23: 1486578.080 ops/s
Iteration  24: 1493212.035 ops/s
Iteration  25: 1492366.912 ops/s
Iteration  26: 1483788.506 ops/s
Iteration  27: 1494401.201 ops/s
Iteration  28: 1494237.548 ops/s
Iteration  29: 1493574.010 ops/s
Iteration  30: 1490026.716 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSortOnListWithLessThan10Elements":
  1488595.121 ±(99.9%) 4726.378 ops/s [Average]
  (min, avg, max) = (1467367.507, 1488595.121, 1497720.854), stdev = 7074.221
  CI (99.9%): [1483868.743, 1493321.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_testSortOnListWithLessThan10Elements  thrpt   30  1488595.121 ± 4726.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2472447.297 ops/s
# Warmup Iteration   2: 5280654.683 ops/s
# Warmup Iteration   3: 4475432.637 ops/s
# Warmup Iteration   4: 5347021.451 ops/s
# Warmup Iteration   5: 5347506.521 ops/s
# Warmup Iteration   6: 5373221.041 ops/s
# Warmup Iteration   7: 5332566.078 ops/s
# Warmup Iteration   8: 5342875.576 ops/s
# Warmup Iteration   9: 5340489.223 ops/s
# Warmup Iteration  10: 5256845.557 ops/s
# Warmup Iteration  11: 5307033.183 ops/s
# Warmup Iteration  12: 5331080.647 ops/s
# Warmup Iteration  13: 5319370.914 ops/s
# Warmup Iteration  14: 5330279.078 ops/s
# Warmup Iteration  15: 5299345.738 ops/s
# Warmup Iteration  16: 5318562.142 ops/s
# Warmup Iteration  17: 5348987.159 ops/s
# Warmup Iteration  18: 5350572.616 ops/s
# Warmup Iteration  19: 5329746.449 ops/s
# Warmup Iteration  20: 5324274.116 ops/s
# Warmup Iteration  21: 5352232.704 ops/s
# Warmup Iteration  22: 5368019.003 ops/s
# Warmup Iteration  23: 5364664.237 ops/s
# Warmup Iteration  24: 5293050.182 ops/s
# Warmup Iteration  25: 5345490.623 ops/s
# Warmup Iteration  26: 5347738.919 ops/s
# Warmup Iteration  27: 5329843.200 ops/s
# Warmup Iteration  28: 5334188.187 ops/s
# Warmup Iteration  29: 5326723.407 ops/s
# Warmup Iteration  30: 5328311.916 ops/s
Iteration   1: 5373292.913 ops/s
Iteration   2: 5343469.036 ops/s
Iteration   3: 5329144.709 ops/s
Iteration   4: 5358988.012 ops/s
Iteration   5: 5371875.139 ops/s
Iteration   6: 5385910.614 ops/s
Iteration   7: 5314059.770 ops/s
Iteration   8: 5320549.601 ops/s
Iteration   9: 5341259.786 ops/s
Iteration  10: 5264981.099 ops/s
Iteration  11: 5390931.573 ops/s
Iteration  12: 5313674.855 ops/s
Iteration  13: 5312772.398 ops/s
Iteration  14: 5280931.788 ops/s
Iteration  15: 5305634.351 ops/s
Iteration  16: 5315957.541 ops/s
Iteration  17: 5381356.336 ops/s
Iteration  18: 5340603.075 ops/s
Iteration  19: 5254204.047 ops/s
Iteration  20: 5335197.059 ops/s
Iteration  21: 5273474.796 ops/s
Iteration  22: 5343421.854 ops/s
Iteration  23: 5352752.953 ops/s
Iteration  24: 5344922.212 ops/s
Iteration  25: 5286723.792 ops/s
Iteration  26: 5346117.588 ops/s
Iteration  27: 5324419.275 ops/s
Iteration  28: 5359494.720 ops/s
Iteration  29: 5269647.108 ops/s
Iteration  30: 5321813.396 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubList":
  5328586.047 ±(99.9%) 24585.367 ops/s [Average]
  (min, avg, max) = (5254204.047, 5328586.047, 5390931.573), stdev = 36798.223
  CI (99.9%): [5304000.679, 5353171.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testSubList  thrpt   30  5328586.047 ± 24585.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3645699.875 ops/s
# Warmup Iteration   2: 8030090.619 ops/s
# Warmup Iteration   3: 6559279.234 ops/s
# Warmup Iteration   4: 7982066.561 ops/s
# Warmup Iteration   5: 7967738.518 ops/s
# Warmup Iteration   6: 7913826.465 ops/s
# Warmup Iteration   7: 7931260.283 ops/s
# Warmup Iteration   8: 7974258.367 ops/s
# Warmup Iteration   9: 7968552.027 ops/s
# Warmup Iteration  10: 7947049.439 ops/s
# Warmup Iteration  11: 7896359.468 ops/s
# Warmup Iteration  12: 7952047.965 ops/s
# Warmup Iteration  13: 8028591.560 ops/s
# Warmup Iteration  14: 7995085.213 ops/s
# Warmup Iteration  15: 7969194.053 ops/s
# Warmup Iteration  16: 7905054.701 ops/s
# Warmup Iteration  17: 7924802.197 ops/s
# Warmup Iteration  18: 7979256.911 ops/s
# Warmup Iteration  19: 7956368.845 ops/s
# Warmup Iteration  20: 7934590.044 ops/s
# Warmup Iteration  21: 7944346.263 ops/s
# Warmup Iteration  22: 7833782.843 ops/s
# Warmup Iteration  23: 8006871.015 ops/s
# Warmup Iteration  24: 8006446.108 ops/s
# Warmup Iteration  25: 7901266.958 ops/s
# Warmup Iteration  26: 7985419.746 ops/s
# Warmup Iteration  27: 7988328.659 ops/s
# Warmup Iteration  28: 7981840.304 ops/s
# Warmup Iteration  29: 8007241.718 ops/s
# Warmup Iteration  30: 7978098.762 ops/s
Iteration   1: 7960037.050 ops/s
Iteration   2: 7805504.253 ops/s
Iteration   3: 7987566.543 ops/s
Iteration   4: 7977430.522 ops/s
Iteration   5: 7944798.541 ops/s
Iteration   6: 7942889.260 ops/s
Iteration   7: 7995525.751 ops/s
Iteration   8: 8047955.981 ops/s
Iteration   9: 7966071.364 ops/s
Iteration  10: 8005453.430 ops/s
Iteration  11: 8006335.999 ops/s
Iteration  12: 7956065.403 ops/s
Iteration  13: 7933826.204 ops/s
Iteration  14: 8105712.175 ops/s
Iteration  15: 7928667.384 ops/s
Iteration  16: 7872968.032 ops/s
Iteration  17: 7815965.895 ops/s
Iteration  18: 7919205.922 ops/s
Iteration  19: 7993567.774 ops/s
Iteration  20: 7907565.622 ops/s
Iteration  21: 8008174.536 ops/s
Iteration  22: 7972549.923 ops/s
Iteration  23: 8057598.658 ops/s
Iteration  24: 7948182.277 ops/s
Iteration  25: 8022717.150 ops/s
Iteration  26: 7953135.086 ops/s
Iteration  27: 8060354.288 ops/s
Iteration  28: 7942048.266 ops/s
Iteration  29: 7981780.038 ops/s
Iteration  30: 7960875.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListListIterator":
  7966017.637 ±(99.9%) 43224.985 ops/s [Average]
  (min, avg, max) = (7805504.253, 7966017.637, 8105712.175), stdev = 64697.127
  CI (99.9%): [7922792.652, 8009242.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testSubListListIterator  thrpt   30  7966017.637 ± 43224.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListOfSubList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListOfSubList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421870.077 ops/s
# Warmup Iteration   2: 890839.561 ops/s
# Warmup Iteration   3: 921101.638 ops/s
# Warmup Iteration   4: 925885.653 ops/s
# Warmup Iteration   5: 770340.549 ops/s
# Warmup Iteration   6: 928064.256 ops/s
# Warmup Iteration   7: 920092.088 ops/s
# Warmup Iteration   8: 920365.381 ops/s
# Warmup Iteration   9: 929551.448 ops/s
# Warmup Iteration  10: 928787.876 ops/s
# Warmup Iteration  11: 921125.320 ops/s
# Warmup Iteration  12: 929232.486 ops/s
# Warmup Iteration  13: 926866.833 ops/s
# Warmup Iteration  14: 919928.166 ops/s
# Warmup Iteration  15: 921726.114 ops/s
# Warmup Iteration  16: 919467.042 ops/s
# Warmup Iteration  17: 922531.423 ops/s
# Warmup Iteration  18: 917251.349 ops/s
# Warmup Iteration  19: 926715.293 ops/s
# Warmup Iteration  20: 928512.559 ops/s
# Warmup Iteration  21: 921086.886 ops/s
# Warmup Iteration  22: 928536.851 ops/s
# Warmup Iteration  23: 927635.460 ops/s
# Warmup Iteration  24: 928943.521 ops/s
# Warmup Iteration  25: 921910.270 ops/s
# Warmup Iteration  26: 926009.078 ops/s
# Warmup Iteration  27: 925886.351 ops/s
# Warmup Iteration  28: 924838.214 ops/s
# Warmup Iteration  29: 922715.360 ops/s
# Warmup Iteration  30: 925951.891 ops/s
Iteration   1: 910847.356 ops/s
Iteration   2: 926386.026 ops/s
Iteration   3: 928486.823 ops/s
Iteration   4: 915083.838 ops/s
Iteration   5: 925257.770 ops/s
Iteration   6: 919265.389 ops/s
Iteration   7: 907766.489 ops/s
Iteration   8: 924868.057 ops/s
Iteration   9: 925473.937 ops/s
Iteration  10: 927257.005 ops/s
Iteration  11: 917077.466 ops/s
Iteration  12: 926810.144 ops/s
Iteration  13: 928031.376 ops/s
Iteration  14: 915242.695 ops/s
Iteration  15: 928373.789 ops/s
Iteration  16: 923814.047 ops/s
Iteration  17: 925842.327 ops/s
Iteration  18: 924730.954 ops/s
Iteration  19: 922616.458 ops/s
Iteration  20: 911151.397 ops/s
Iteration  21: 930642.424 ops/s
Iteration  22: 929089.283 ops/s
Iteration  23: 924830.769 ops/s
Iteration  24: 925244.421 ops/s
Iteration  25: 927237.528 ops/s
Iteration  26: 931262.565 ops/s
Iteration  27: 926366.651 ops/s
Iteration  28: 913293.126 ops/s
Iteration  29: 929250.499 ops/s
Iteration  30: 928159.975 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListOfSubList":
  923325.353 ±(99.9%) 4307.008 ops/s [Average]
  (min, avg, max) = (907766.489, 923325.353, 931262.565), stdev = 6446.527
  CI (99.9%): [919018.345, 927632.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_testSubListOfSubList  thrpt   30  923325.353 ± 4307.008  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListSort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListSort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2039352.101 ops/s
# Warmup Iteration   2: 2984938.649 ops/s
# Warmup Iteration   3: 3616408.886 ops/s
# Warmup Iteration   4: 3618361.682 ops/s
# Warmup Iteration   5: 3651896.647 ops/s
# Warmup Iteration   6: 3632587.860 ops/s
# Warmup Iteration   7: 3007659.557 ops/s
# Warmup Iteration   8: 3670913.123 ops/s
# Warmup Iteration   9: 3645322.618 ops/s
# Warmup Iteration  10: 3663495.444 ops/s
# Warmup Iteration  11: 3669038.219 ops/s
# Warmup Iteration  12: 3665734.500 ops/s
# Warmup Iteration  13: 3666357.106 ops/s
# Warmup Iteration  14: 3657340.936 ops/s
# Warmup Iteration  15: 3668980.465 ops/s
# Warmup Iteration  16: 3659156.025 ops/s
# Warmup Iteration  17: 3664208.052 ops/s
# Warmup Iteration  18: 3657696.174 ops/s
# Warmup Iteration  19: 3658228.545 ops/s
# Warmup Iteration  20: 3659725.477 ops/s
# Warmup Iteration  21: 3672486.537 ops/s
# Warmup Iteration  22: 3609521.974 ops/s
# Warmup Iteration  23: 3667285.362 ops/s
# Warmup Iteration  24: 3677390.638 ops/s
# Warmup Iteration  25: 3651737.124 ops/s
# Warmup Iteration  26: 3645319.442 ops/s
# Warmup Iteration  27: 3656292.967 ops/s
# Warmup Iteration  28: 3649548.206 ops/s
# Warmup Iteration  29: 3654216.972 ops/s
# Warmup Iteration  30: 3652237.953 ops/s
Iteration   1: 3670322.897 ops/s
Iteration   2: 3611101.381 ops/s
Iteration   3: 3668995.086 ops/s
Iteration   4: 3656017.165 ops/s
Iteration   5: 3679863.461 ops/s
Iteration   6: 3660433.203 ops/s
Iteration   7: 3656027.539 ops/s
Iteration   8: 3663213.133 ops/s
Iteration   9: 3634183.963 ops/s
Iteration  10: 3663093.044 ops/s
Iteration  11: 3617076.548 ops/s
Iteration  12: 3643210.594 ops/s
Iteration  13: 3671711.119 ops/s
Iteration  14: 3634421.666 ops/s
Iteration  15: 3660662.169 ops/s
Iteration  16: 3675043.624 ops/s
Iteration  17: 3663935.556 ops/s
Iteration  18: 3667680.668 ops/s
Iteration  19: 3610393.048 ops/s
Iteration  20: 3673760.848 ops/s
Iteration  21: 3660885.426 ops/s
Iteration  22: 3668961.100 ops/s
Iteration  23: 3648192.985 ops/s
Iteration  24: 3678996.680 ops/s
Iteration  25: 3648961.481 ops/s
Iteration  26: 3668023.370 ops/s
Iteration  27: 3679313.629 ops/s
Iteration  28: 3649382.421 ops/s
Iteration  29: 3619375.305 ops/s
Iteration  30: 3647966.225 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testSubListSort":
  3655040.178 ±(99.9%) 13516.283 ops/s [Average]
  (min, avg, max) = (3610393.048, 3655040.178, 3679863.461), stdev = 20230.538
  CI (99.9%): [3641523.895, 3668556.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testSubListSort  thrpt   30  3655040.178 ± 13516.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToArrayFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToArrayFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8433660.316 ops/s
# Warmup Iteration   2: 16895021.201 ops/s
# Warmup Iteration   3: 13260404.363 ops/s
# Warmup Iteration   4: 15211901.226 ops/s
# Warmup Iteration   5: 15541066.481 ops/s
# Warmup Iteration   6: 15539694.815 ops/s
# Warmup Iteration   7: 15528658.114 ops/s
# Warmup Iteration   8: 15643700.422 ops/s
# Warmup Iteration   9: 15490181.856 ops/s
# Warmup Iteration  10: 15527102.903 ops/s
# Warmup Iteration  11: 15509738.555 ops/s
# Warmup Iteration  12: 15531718.024 ops/s
# Warmup Iteration  13: 15547538.162 ops/s
# Warmup Iteration  14: 15564448.086 ops/s
# Warmup Iteration  15: 15426724.062 ops/s
# Warmup Iteration  16: 15299697.168 ops/s
# Warmup Iteration  17: 15522908.639 ops/s
# Warmup Iteration  18: 15571482.726 ops/s
# Warmup Iteration  19: 15563899.642 ops/s
# Warmup Iteration  20: 15533244.208 ops/s
# Warmup Iteration  21: 15552221.027 ops/s
# Warmup Iteration  22: 15561009.314 ops/s
# Warmup Iteration  23: 15551647.754 ops/s
# Warmup Iteration  24: 15586421.513 ops/s
# Warmup Iteration  25: 15511282.216 ops/s
# Warmup Iteration  26: 15589401.882 ops/s
# Warmup Iteration  27: 15558001.631 ops/s
# Warmup Iteration  28: 15567120.508 ops/s
# Warmup Iteration  29: 15584333.912 ops/s
# Warmup Iteration  30: 15471447.301 ops/s
Iteration   1: 15574876.420 ops/s
Iteration   2: 15626028.676 ops/s
Iteration   3: 15541054.368 ops/s
Iteration   4: 15474018.290 ops/s
Iteration   5: 15621015.490 ops/s
Iteration   6: 15560082.847 ops/s
Iteration   7: 15614398.795 ops/s
Iteration   8: 15549629.743 ops/s
Iteration   9: 15585019.674 ops/s
Iteration  10: 15319292.639 ops/s
Iteration  11: 15336433.268 ops/s
Iteration  12: 15598615.794 ops/s
Iteration  13: 15592406.324 ops/s
Iteration  14: 15584156.503 ops/s
Iteration  15: 15535491.662 ops/s
Iteration  16: 15302282.198 ops/s
Iteration  17: 15327272.352 ops/s
Iteration  18: 15567326.969 ops/s
Iteration  19: 15403035.640 ops/s
Iteration  20: 15501471.979 ops/s
Iteration  21: 15534699.526 ops/s
Iteration  22: 15542752.506 ops/s
Iteration  23: 15195777.279 ops/s
Iteration  24: 15568769.224 ops/s
Iteration  25: 15365668.349 ops/s
Iteration  26: 15568071.118 ops/s
Iteration  27: 15613434.158 ops/s
Iteration  28: 15530490.374 ops/s
Iteration  29: 15327680.244 ops/s
Iteration  30: 15549716.806 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToArrayFromTo":
  15500365.640 ±(99.9%) 78731.527 ops/s [Average]
  (min, avg, max) = (15195777.279, 15500365.640, 15626028.676), stdev = 117841.652
  CI (99.9%): [15421634.113, 15579097.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_testToArrayFromTo  thrpt   30  15500365.640 ± 78731.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1391631.374 ops/s
# Warmup Iteration   2: 2808564.520 ops/s
# Warmup Iteration   3: 2955374.136 ops/s
# Warmup Iteration   4: 2994456.114 ops/s
# Warmup Iteration   5: 2449869.667 ops/s
# Warmup Iteration   6: 2998953.832 ops/s
# Warmup Iteration   7: 2960618.853 ops/s
# Warmup Iteration   8: 2979531.452 ops/s
# Warmup Iteration   9: 3004328.754 ops/s
# Warmup Iteration  10: 2998566.887 ops/s
# Warmup Iteration  11: 2996073.542 ops/s
# Warmup Iteration  12: 3002201.502 ops/s
# Warmup Iteration  13: 2979015.817 ops/s
# Warmup Iteration  14: 2992324.242 ops/s
# Warmup Iteration  15: 2963300.458 ops/s
# Warmup Iteration  16: 2997500.033 ops/s
# Warmup Iteration  17: 3010519.218 ops/s
# Warmup Iteration  18: 2983080.070 ops/s
# Warmup Iteration  19: 3012729.731 ops/s
# Warmup Iteration  20: 3006578.883 ops/s
# Warmup Iteration  21: 2998160.278 ops/s
# Warmup Iteration  22: 2985927.249 ops/s
# Warmup Iteration  23: 2983758.628 ops/s
# Warmup Iteration  24: 2993847.711 ops/s
# Warmup Iteration  25: 2996594.542 ops/s
# Warmup Iteration  26: 2986385.687 ops/s
# Warmup Iteration  27: 2992519.244 ops/s
# Warmup Iteration  28: 3011598.153 ops/s
# Warmup Iteration  29: 2976048.043 ops/s
# Warmup Iteration  30: 3012049.385 ops/s
Iteration   1: 2949776.463 ops/s
Iteration   2: 2962427.614 ops/s
Iteration   3: 2943923.200 ops/s
Iteration   4: 3013854.707 ops/s
Iteration   5: 3007598.429 ops/s
Iteration   6: 3019715.033 ops/s
Iteration   7: 2999940.164 ops/s
Iteration   8: 3012019.364 ops/s
Iteration   9: 3011115.406 ops/s
Iteration  10: 3010992.330 ops/s
Iteration  11: 3017215.584 ops/s
Iteration  12: 2920808.868 ops/s
Iteration  13: 3020314.710 ops/s
Iteration  14: 2994738.568 ops/s
Iteration  15: 3019117.829 ops/s
Iteration  16: 3015056.650 ops/s
Iteration  17: 3012907.611 ops/s
Iteration  18: 2959596.967 ops/s
Iteration  19: 3009398.640 ops/s
Iteration  20: 3012210.262 ops/s
Iteration  21: 2987049.363 ops/s
Iteration  22: 2974801.389 ops/s
Iteration  23: 3010144.796 ops/s
Iteration  24: 3017494.225 ops/s
Iteration  25: 3009903.477 ops/s
Iteration  26: 3017326.941 ops/s
Iteration  27: 3015220.196 ops/s
Iteration  28: 3019531.775 ops/s
Iteration  29: 2973702.625 ops/s
Iteration  30: 2920812.826 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testToString":
  2995290.534 ±(99.9%) 20105.655 ops/s [Average]
  (min, avg, max) = (2920808.868, 2995290.534, 3020314.710), stdev = 30093.200
  CI (99.9%): [2975184.879, 3015396.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testToString  thrpt   30  2995290.534 ± 20105.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2729979.607 ops/s
# Warmup Iteration   2: 5541305.655 ops/s
# Warmup Iteration   3: 5932760.925 ops/s
# Warmup Iteration   4: 5994842.693 ops/s
# Warmup Iteration   5: 4833905.649 ops/s
# Warmup Iteration   6: 6005105.300 ops/s
# Warmup Iteration   7: 5983125.367 ops/s
# Warmup Iteration   8: 5980592.235 ops/s
# Warmup Iteration   9: 6011949.788 ops/s
# Warmup Iteration  10: 5986396.239 ops/s
# Warmup Iteration  11: 5982635.790 ops/s
# Warmup Iteration  12: 6007916.589 ops/s
# Warmup Iteration  13: 5947670.629 ops/s
# Warmup Iteration  14: 5950065.412 ops/s
# Warmup Iteration  15: 5974686.664 ops/s
# Warmup Iteration  16: 5947482.789 ops/s
# Warmup Iteration  17: 5967395.508 ops/s
# Warmup Iteration  18: 6019067.486 ops/s
# Warmup Iteration  19: 5980636.077 ops/s
# Warmup Iteration  20: 5934892.977 ops/s
# Warmup Iteration  21: 5990715.306 ops/s
# Warmup Iteration  22: 5998311.592 ops/s
# Warmup Iteration  23: 6006768.280 ops/s
# Warmup Iteration  24: 5995374.790 ops/s
# Warmup Iteration  25: 5973501.479 ops/s
# Warmup Iteration  26: 5918352.903 ops/s
# Warmup Iteration  27: 5976368.041 ops/s
# Warmup Iteration  28: 5998630.716 ops/s
# Warmup Iteration  29: 5972216.465 ops/s
# Warmup Iteration  30: 5949255.222 ops/s
Iteration   1: 5996119.380 ops/s
Iteration   2: 5996895.662 ops/s
Iteration   3: 5919323.106 ops/s
Iteration   4: 5987847.957 ops/s
Iteration   5: 5987766.782 ops/s
Iteration   6: 6001481.162 ops/s
Iteration   7: 5972091.482 ops/s
Iteration   8: 5996190.249 ops/s
Iteration   9: 5996545.742 ops/s
Iteration  10: 6003587.553 ops/s
Iteration  11: 6019342.239 ops/s
Iteration  12: 6006964.729 ops/s
Iteration  13: 5993630.613 ops/s
Iteration  14: 6036759.874 ops/s
Iteration  15: 6007101.822 ops/s
Iteration  16: 6000320.485 ops/s
Iteration  17: 5892168.342 ops/s
Iteration  18: 5902137.670 ops/s
Iteration  19: 6003729.033 ops/s
Iteration  20: 5997761.747 ops/s
Iteration  21: 5998993.574 ops/s
Iteration  22: 6021191.861 ops/s
Iteration  23: 6018233.872 ops/s
Iteration  24: 5989287.382 ops/s
Iteration  25: 5973459.067 ops/s
Iteration  26: 5971644.666 ops/s
Iteration  27: 5942444.796 ops/s
Iteration  28: 6005250.309 ops/s
Iteration  29: 6030788.886 ops/s
Iteration  30: 6011681.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSize":
  5989358.060 ±(99.9%) 22934.554 ops/s [Average]
  (min, avg, max) = (5892168.342, 5989358.060, 6036759.874), stdev = 34327.363
  CI (99.9%): [5966423.506, 6012292.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testTrimToSize  thrpt   30  5989358.060 ± 22934.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSizeWithLoadFactory$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSizeWithLoadFactory

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2411646.627 ops/s
# Warmup Iteration   2: 5465088.417 ops/s
# Warmup Iteration   3: 5536257.875 ops/s
# Warmup Iteration   4: 4592326.278 ops/s
# Warmup Iteration   5: 5563152.384 ops/s
# Warmup Iteration   6: 5569021.814 ops/s
# Warmup Iteration   7: 5555673.530 ops/s
# Warmup Iteration   8: 5575250.201 ops/s
# Warmup Iteration   9: 5572130.474 ops/s
# Warmup Iteration  10: 5530899.682 ops/s
# Warmup Iteration  11: 5542263.236 ops/s
# Warmup Iteration  12: 5560360.577 ops/s
# Warmup Iteration  13: 5542026.569 ops/s
# Warmup Iteration  14: 5569322.031 ops/s
# Warmup Iteration  15: 5572014.264 ops/s
# Warmup Iteration  16: 5557235.479 ops/s
# Warmup Iteration  17: 5576017.093 ops/s
# Warmup Iteration  18: 5553099.671 ops/s
# Warmup Iteration  19: 5580450.186 ops/s
# Warmup Iteration  20: 5531061.418 ops/s
# Warmup Iteration  21: 5554902.613 ops/s
# Warmup Iteration  22: 5514921.239 ops/s
# Warmup Iteration  23: 5496700.534 ops/s
# Warmup Iteration  24: 5558270.064 ops/s
# Warmup Iteration  25: 5515052.889 ops/s
# Warmup Iteration  26: 5563172.751 ops/s
# Warmup Iteration  27: 5549106.188 ops/s
# Warmup Iteration  28: 5557052.614 ops/s
# Warmup Iteration  29: 5575620.654 ops/s
# Warmup Iteration  30: 5564553.025 ops/s
Iteration   1: 5564106.633 ops/s
Iteration   2: 5574946.830 ops/s
Iteration   3: 5564426.476 ops/s
Iteration   4: 5546086.569 ops/s
Iteration   5: 5574570.345 ops/s
Iteration   6: 5557936.200 ops/s
Iteration   7: 5552493.291 ops/s
Iteration   8: 5578161.349 ops/s
Iteration   9: 5512777.182 ops/s
Iteration  10: 5546820.905 ops/s
Iteration  11: 5564300.169 ops/s
Iteration  12: 5537134.941 ops/s
Iteration  13: 5548431.122 ops/s
Iteration  14: 5540722.283 ops/s
Iteration  15: 5571892.684 ops/s
Iteration  16: 5540627.661 ops/s
Iteration  17: 5549071.540 ops/s
Iteration  18: 5472735.776 ops/s
Iteration  19: 5531115.283 ops/s
Iteration  20: 5551840.642 ops/s
Iteration  21: 5533493.523 ops/s
Iteration  22: 5561348.446 ops/s
Iteration  23: 5540523.023 ops/s
Iteration  24: 5555927.512 ops/s
Iteration  25: 5563392.908 ops/s
Iteration  26: 5491192.332 ops/s
Iteration  27: 5520681.075 ops/s
Iteration  28: 5529209.738 ops/s
Iteration  29: 5534439.017 ops/s
Iteration  30: 5560793.309 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testTrimToSizeWithLoadFactory":
  5545706.625 ±(99.9%) 15948.128 ops/s [Average]
  (min, avg, max) = (5472735.776, 5545706.625, 5578161.349), stdev = 23870.409
  CI (99.9%): [5529758.498, 5561654.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_testTrimToSizeWithLoadFactory  thrpt   30  5545706.625 ± 15948.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 301812.717 ops/s
# Warmup Iteration   2: 573938.431 ops/s
# Warmup Iteration   3: 657055.470 ops/s
# Warmup Iteration   4: 656315.463 ops/s
# Warmup Iteration   5: 654669.551 ops/s
# Warmup Iteration   6: 551107.947 ops/s
# Warmup Iteration   7: 657629.560 ops/s
# Warmup Iteration   8: 655697.103 ops/s
# Warmup Iteration   9: 661553.880 ops/s
# Warmup Iteration  10: 658756.179 ops/s
# Warmup Iteration  11: 658557.941 ops/s
# Warmup Iteration  12: 657268.847 ops/s
# Warmup Iteration  13: 660003.128 ops/s
# Warmup Iteration  14: 659154.463 ops/s
# Warmup Iteration  15: 659014.227 ops/s
# Warmup Iteration  16: 659063.551 ops/s
# Warmup Iteration  17: 659861.096 ops/s
# Warmup Iteration  18: 662957.085 ops/s
# Warmup Iteration  19: 656528.434 ops/s
# Warmup Iteration  20: 658256.912 ops/s
# Warmup Iteration  21: 661786.920 ops/s
# Warmup Iteration  22: 657754.196 ops/s
# Warmup Iteration  23: 661546.088 ops/s
# Warmup Iteration  24: 659434.390 ops/s
# Warmup Iteration  25: 660738.030 ops/s
# Warmup Iteration  26: 663335.761 ops/s
# Warmup Iteration  27: 661423.535 ops/s
# Warmup Iteration  28: 660782.440 ops/s
# Warmup Iteration  29: 661889.752 ops/s
# Warmup Iteration  30: 664257.539 ops/s
Iteration   1: 650015.318 ops/s
Iteration   2: 659681.766 ops/s
Iteration   3: 661088.066 ops/s
Iteration   4: 661615.890 ops/s
Iteration   5: 661249.084 ops/s
Iteration   6: 661057.319 ops/s
Iteration   7: 652410.957 ops/s
Iteration   8: 660321.236 ops/s
Iteration   9: 662684.545 ops/s
Iteration  10: 665237.962 ops/s
Iteration  11: 661957.809 ops/s
Iteration  12: 662221.333 ops/s
Iteration  13: 657717.577 ops/s
Iteration  14: 656985.918 ops/s
Iteration  15: 661680.453 ops/s
Iteration  16: 660638.586 ops/s
Iteration  17: 657647.420 ops/s
Iteration  18: 663202.776 ops/s
Iteration  19: 662344.595 ops/s
Iteration  20: 663018.343 ops/s
Iteration  21: 657374.883 ops/s
Iteration  22: 665432.093 ops/s
Iteration  23: 660470.624 ops/s
Iteration  24: 664622.067 ops/s
Iteration  25: 661474.262 ops/s
Iteration  26: 659494.896 ops/s
Iteration  27: 662142.462 ops/s
Iteration  28: 662822.270 ops/s
Iteration  29: 661216.289 ops/s
Iteration  30: 661241.428 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_testWith":
  660635.608 ±(99.9%) 2216.469 ops/s [Average]
  (min, avg, max) = (650015.318, 660635.608, 665432.093), stdev = 3317.506
  CI (99.9%): [658419.139, 662852.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_testWith  thrpt   30  660635.608 ± 2216.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4993200.959 ops/s
# Warmup Iteration   2: 9972308.896 ops/s
# Warmup Iteration   3: 8517852.488 ops/s
# Warmup Iteration   4: 10009579.851 ops/s
# Warmup Iteration   5: 10018718.454 ops/s
# Warmup Iteration   6: 10024114.215 ops/s
# Warmup Iteration   7: 10012500.129 ops/s
# Warmup Iteration   8: 10028768.679 ops/s
# Warmup Iteration   9: 9964265.788 ops/s
# Warmup Iteration  10: 9974543.707 ops/s
# Warmup Iteration  11: 10024048.298 ops/s
# Warmup Iteration  12: 10028039.668 ops/s
# Warmup Iteration  13: 9959231.845 ops/s
# Warmup Iteration  14: 10014123.945 ops/s
# Warmup Iteration  15: 10043778.008 ops/s
# Warmup Iteration  16: 10025090.661 ops/s
# Warmup Iteration  17: 10037204.709 ops/s
# Warmup Iteration  18: 10037600.172 ops/s
# Warmup Iteration  19: 10039334.107 ops/s
# Warmup Iteration  20: 10009908.839 ops/s
# Warmup Iteration  21: 10018848.928 ops/s
# Warmup Iteration  22: 9977643.798 ops/s
# Warmup Iteration  23: 10064215.385 ops/s
# Warmup Iteration  24: 9902497.074 ops/s
# Warmup Iteration  25: 10008573.975 ops/s
# Warmup Iteration  26: 10035123.842 ops/s
# Warmup Iteration  27: 10013618.686 ops/s
# Warmup Iteration  28: 10023710.601 ops/s
# Warmup Iteration  29: 10035154.873 ops/s
# Warmup Iteration  30: 10006388.416 ops/s
Iteration   1: 10082224.804 ops/s
Iteration   2: 10062591.861 ops/s
Iteration   3: 10032105.163 ops/s
Iteration   4: 10090680.430 ops/s
Iteration   5: 10026609.814 ops/s
Iteration   6: 10071916.231 ops/s
Iteration   7: 9838168.047 ops/s
Iteration   8: 10073793.499 ops/s
Iteration   9: 10084993.155 ops/s
Iteration  10: 9972532.045 ops/s
Iteration  11: 9878802.125 ops/s
Iteration  12: 9852640.487 ops/s
Iteration  13: 9873398.378 ops/s
Iteration  14: 10075507.175 ops/s
Iteration  15: 10091718.661 ops/s
Iteration  16: 10017049.507 ops/s
Iteration  17: 10003169.220 ops/s
Iteration  18: 10046037.136 ops/s
Iteration  19: 10013259.037 ops/s
Iteration  20: 9988323.057 ops/s
Iteration  21: 10061154.554 ops/s
Iteration  22: 9960484.346 ops/s
Iteration  23: 10002067.191 ops/s
Iteration  24: 10007223.548 ops/s
Iteration  25: 10016179.993 ops/s
Iteration  26: 10066224.904 ops/s
Iteration  27: 10118817.667 ops/s
Iteration  28: 10066080.584 ops/s
Iteration  29: 9935054.376 ops/s
Iteration  30: 9967660.366 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toArray":
  10012548.912 ±(99.9%) 50201.698 ops/s [Average]
  (min, avg, max) = (9838168.047, 10012548.912, 10118817.667), stdev = 75139.545
  CI (99.9%): [9962347.214, 10062750.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toArray  thrpt   30  10012548.912 ± 50201.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1232125.283 ops/s
# Warmup Iteration   2: 2098689.371 ops/s
# Warmup Iteration   3: 2447622.455 ops/s
# Warmup Iteration   4: 2455956.923 ops/s
# Warmup Iteration   5: 2425329.498 ops/s
# Warmup Iteration   6: 2003200.442 ops/s
# Warmup Iteration   7: 2470918.919 ops/s
# Warmup Iteration   8: 2469288.391 ops/s
# Warmup Iteration   9: 2462144.606 ops/s
# Warmup Iteration  10: 2448643.803 ops/s
# Warmup Iteration  11: 2472098.622 ops/s
# Warmup Iteration  12: 2467215.880 ops/s
# Warmup Iteration  13: 2444112.478 ops/s
# Warmup Iteration  14: 2449448.748 ops/s
# Warmup Iteration  15: 2457356.897 ops/s
# Warmup Iteration  16: 2451526.493 ops/s
# Warmup Iteration  17: 2465129.557 ops/s
# Warmup Iteration  18: 2445543.100 ops/s
# Warmup Iteration  19: 2463444.382 ops/s
# Warmup Iteration  20: 2469817.690 ops/s
# Warmup Iteration  21: 2450742.622 ops/s
# Warmup Iteration  22: 2467743.961 ops/s
# Warmup Iteration  23: 2457738.906 ops/s
# Warmup Iteration  24: 2444272.111 ops/s
# Warmup Iteration  25: 2472929.565 ops/s
# Warmup Iteration  26: 2461785.074 ops/s
# Warmup Iteration  27: 2467436.457 ops/s
# Warmup Iteration  28: 2463060.319 ops/s
# Warmup Iteration  29: 2471276.620 ops/s
# Warmup Iteration  30: 2463883.785 ops/s
Iteration   1: 2475887.229 ops/s
Iteration   2: 2461333.304 ops/s
Iteration   3: 2474507.405 ops/s
Iteration   4: 2463435.773 ops/s
Iteration   5: 2462126.173 ops/s
Iteration   6: 2463657.166 ops/s
Iteration   7: 2467859.453 ops/s
Iteration   8: 2472063.610 ops/s
Iteration   9: 2470339.039 ops/s
Iteration  10: 2471612.130 ops/s
Iteration  11: 2468010.765 ops/s
Iteration  12: 2453378.200 ops/s
Iteration  13: 2469500.442 ops/s
Iteration  14: 2472694.425 ops/s
Iteration  15: 2433127.659 ops/s
Iteration  16: 2430041.858 ops/s
Iteration  17: 2470492.688 ops/s
Iteration  18: 2472482.419 ops/s
Iteration  19: 2472708.826 ops/s
Iteration  20: 2461613.059 ops/s
Iteration  21: 2466272.676 ops/s
Iteration  22: 2456833.485 ops/s
Iteration  23: 2467606.118 ops/s
Iteration  24: 2468538.747 ops/s
Iteration  25: 2465299.958 ops/s
Iteration  26: 2448260.189 ops/s
Iteration  27: 2468961.179 ops/s
Iteration  28: 2471135.894 ops/s
Iteration  29: 2463918.588 ops/s
Iteration  30: 2464866.338 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBag":
  2464285.493 ±(99.9%) 7224.491 ops/s [Average]
  (min, avg, max) = (2430041.858, 2464285.493, 2475887.229), stdev = 10813.278
  CI (99.9%): [2457061.003, 2471509.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toBag  thrpt   30  2464285.493 ± 7224.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107251.523 ops/s
# Warmup Iteration   2: 147171.708 ops/s
# Warmup Iteration   3: 181139.969 ops/s
# Warmup Iteration   4: 178125.029 ops/s
# Warmup Iteration   5: 181038.413 ops/s
# Warmup Iteration   6: 180136.105 ops/s
# Warmup Iteration   7: 181146.267 ops/s
# Warmup Iteration   8: 150670.422 ops/s
# Warmup Iteration   9: 181405.341 ops/s
# Warmup Iteration  10: 181350.440 ops/s
# Warmup Iteration  11: 180802.126 ops/s
# Warmup Iteration  12: 181051.398 ops/s
# Warmup Iteration  13: 179328.541 ops/s
# Warmup Iteration  14: 179553.964 ops/s
# Warmup Iteration  15: 181525.424 ops/s
# Warmup Iteration  16: 181207.715 ops/s
# Warmup Iteration  17: 187900.879 ops/s
# Warmup Iteration  18: 187526.515 ops/s
# Warmup Iteration  19: 187120.000 ops/s
# Warmup Iteration  20: 187773.113 ops/s
# Warmup Iteration  21: 186611.113 ops/s
# Warmup Iteration  22: 185887.622 ops/s
# Warmup Iteration  23: 187347.005 ops/s
# Warmup Iteration  24: 186771.787 ops/s
# Warmup Iteration  25: 187123.461 ops/s
# Warmup Iteration  26: 186844.558 ops/s
# Warmup Iteration  27: 187072.388 ops/s
# Warmup Iteration  28: 185787.718 ops/s
# Warmup Iteration  29: 187623.120 ops/s
# Warmup Iteration  30: 185368.078 ops/s
Iteration   1: 187515.667 ops/s
Iteration   2: 187777.335 ops/s
Iteration   3: 187810.398 ops/s
Iteration   4: 187546.965 ops/s
Iteration   5: 187074.789 ops/s
Iteration   6: 185044.884 ops/s
Iteration   7: 187640.605 ops/s
Iteration   8: 187605.402 ops/s
Iteration   9: 184342.813 ops/s
Iteration  10: 183878.190 ops/s
Iteration  11: 188010.416 ops/s
Iteration  12: 187698.161 ops/s
Iteration  13: 188054.793 ops/s
Iteration  14: 186743.744 ops/s
Iteration  15: 187292.527 ops/s
Iteration  16: 186772.277 ops/s
Iteration  17: 186527.967 ops/s
Iteration  18: 187548.939 ops/s
Iteration  19: 187623.259 ops/s
Iteration  20: 187873.603 ops/s
Iteration  21: 187592.105 ops/s
Iteration  22: 186973.623 ops/s
Iteration  23: 184626.547 ops/s
Iteration  24: 187764.178 ops/s
Iteration  25: 187533.903 ops/s
Iteration  26: 188067.656 ops/s
Iteration  27: 183684.137 ops/s
Iteration  28: 187284.062 ops/s
Iteration  29: 187874.665 ops/s
Iteration  30: 187512.830 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toBiMap":
  186976.548 ±(99.9%) 857.918 ops/s [Average]
  (min, avg, max) = (183684.137, 186976.548, 188067.656), stdev = 1284.092
  CI (99.9%): [186118.630, 187834.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_toBiMap  thrpt   30  186976.548 ± 857.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4605121.060 ops/s
# Warmup Iteration   2: 10132400.795 ops/s
# Warmup Iteration   3: 8561954.162 ops/s
# Warmup Iteration   4: 10263361.191 ops/s
# Warmup Iteration   5: 10282975.702 ops/s
# Warmup Iteration   6: 10190066.466 ops/s
# Warmup Iteration   7: 10244879.648 ops/s
# Warmup Iteration   8: 10239374.180 ops/s
# Warmup Iteration   9: 10256998.068 ops/s
# Warmup Iteration  10: 10192238.952 ops/s
# Warmup Iteration  11: 10185498.426 ops/s
# Warmup Iteration  12: 10251234.787 ops/s
# Warmup Iteration  13: 10243109.835 ops/s
# Warmup Iteration  14: 10287475.631 ops/s
# Warmup Iteration  15: 10235333.610 ops/s
# Warmup Iteration  16: 10248332.364 ops/s
# Warmup Iteration  17: 10225393.644 ops/s
# Warmup Iteration  18: 10226306.979 ops/s
# Warmup Iteration  19: 10278369.239 ops/s
# Warmup Iteration  20: 10220447.299 ops/s
# Warmup Iteration  21: 10237290.754 ops/s
# Warmup Iteration  22: 10251509.695 ops/s
# Warmup Iteration  23: 10223041.717 ops/s
# Warmup Iteration  24: 10279875.298 ops/s
# Warmup Iteration  25: 10179660.382 ops/s
# Warmup Iteration  26: 10289151.229 ops/s
# Warmup Iteration  27: 10182066.301 ops/s
# Warmup Iteration  28: 10096174.749 ops/s
# Warmup Iteration  29: 10261884.926 ops/s
# Warmup Iteration  30: 10244628.327 ops/s
Iteration   1: 10285927.327 ops/s
Iteration   2: 10238373.195 ops/s
Iteration   3: 10290810.712 ops/s
Iteration   4: 10240020.396 ops/s
Iteration   5: 10110196.961 ops/s
Iteration   6: 10203948.426 ops/s
Iteration   7: 10060852.604 ops/s
Iteration   8: 10279444.121 ops/s
Iteration   9: 10236109.619 ops/s
Iteration  10: 10262878.947 ops/s
Iteration  11: 10249857.407 ops/s
Iteration  12: 10256742.035 ops/s
Iteration  13: 10280133.478 ops/s
Iteration  14: 10256453.744 ops/s
Iteration  15: 10248314.589 ops/s
Iteration  16: 10266109.011 ops/s
Iteration  17: 10121888.272 ops/s
Iteration  18: 10247025.467 ops/s
Iteration  19: 10264494.508 ops/s
Iteration  20: 10269213.713 ops/s
Iteration  21: 10246035.137 ops/s
Iteration  22: 10260403.212 ops/s
Iteration  23: 10244562.860 ops/s
Iteration  24: 10251851.346 ops/s
Iteration  25: 10134591.319 ops/s
Iteration  26: 10225853.762 ops/s
Iteration  27: 10279864.014 ops/s
Iteration  28: 10233437.190 ops/s
Iteration  29: 10261866.179 ops/s
Iteration  30: 10188692.376 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toCollection":
  10233198.398 ±(99.9%) 37379.205 ops/s [Average]
  (min, avg, max) = (10060852.604, 10233198.398, 10290810.712), stdev = 55947.438
  CI (99.9%): [10195819.193, 10270577.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toCollection  thrpt   30  10233198.398 ± 37379.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5391959.332 ops/s
# Warmup Iteration   2: 11421557.762 ops/s
# Warmup Iteration   3: 11407200.740 ops/s
# Warmup Iteration   4: 9690455.681 ops/s
# Warmup Iteration   5: 11589765.378 ops/s
# Warmup Iteration   6: 11608480.287 ops/s
# Warmup Iteration   7: 11560343.829 ops/s
# Warmup Iteration   8: 11592350.155 ops/s
# Warmup Iteration   9: 11502695.230 ops/s
# Warmup Iteration  10: 11603169.734 ops/s
# Warmup Iteration  11: 11600489.307 ops/s
# Warmup Iteration  12: 11564957.003 ops/s
# Warmup Iteration  13: 11580989.042 ops/s
# Warmup Iteration  14: 11619500.799 ops/s
# Warmup Iteration  15: 11590050.190 ops/s
# Warmup Iteration  16: 11505255.669 ops/s
# Warmup Iteration  17: 11504773.280 ops/s
# Warmup Iteration  18: 11608077.253 ops/s
# Warmup Iteration  19: 11603672.201 ops/s
# Warmup Iteration  20: 11596648.036 ops/s
# Warmup Iteration  21: 11431471.737 ops/s
# Warmup Iteration  22: 11621318.195 ops/s
# Warmup Iteration  23: 11510862.298 ops/s
# Warmup Iteration  24: 11586373.198 ops/s
# Warmup Iteration  25: 11580665.153 ops/s
# Warmup Iteration  26: 11418624.086 ops/s
# Warmup Iteration  27: 11562392.517 ops/s
# Warmup Iteration  28: 11506559.513 ops/s
# Warmup Iteration  29: 11537776.277 ops/s
# Warmup Iteration  30: 11506499.615 ops/s
Iteration   1: 11598925.376 ops/s
Iteration   2: 11583050.917 ops/s
Iteration   3: 11592826.279 ops/s
Iteration   4: 11544633.433 ops/s
Iteration   5: 11580979.960 ops/s
Iteration   6: 11613804.166 ops/s
Iteration   7: 11615385.921 ops/s
Iteration   8: 11567908.078 ops/s
Iteration   9: 11585485.523 ops/s
Iteration  10: 11607685.657 ops/s
Iteration  11: 11545877.090 ops/s
Iteration  12: 11419218.185 ops/s
Iteration  13: 11562744.928 ops/s
Iteration  14: 11408208.765 ops/s
Iteration  15: 11613093.069 ops/s
Iteration  16: 11621702.802 ops/s
Iteration  17: 11627821.215 ops/s
Iteration  18: 11610961.444 ops/s
Iteration  19: 11569837.806 ops/s
Iteration  20: 11617617.205 ops/s
Iteration  21: 11629253.773 ops/s
Iteration  22: 11627756.635 ops/s
Iteration  23: 11442543.640 ops/s
Iteration  24: 11609813.560 ops/s
Iteration  25: 11550429.813 ops/s
Iteration  26: 11602520.361 ops/s
Iteration  27: 11600863.525 ops/s
Iteration  28: 11556979.690 ops/s
Iteration  29: 11602561.585 ops/s
Iteration  30: 11607827.014 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutable":
  11577277.247 ±(99.9%) 38727.924 ops/s [Average]
  (min, avg, max) = (11408208.765, 11577277.247, 11629253.773), stdev = 57966.138
  CI (99.9%): [11538549.323, 11616005.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutable  thrpt   30  11577277.247 ± 38727.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627015.580 ops/s
# Warmup Iteration   2: 1081028.655 ops/s
# Warmup Iteration   3: 1284380.208 ops/s
# Warmup Iteration   4: 1281677.091 ops/s
# Warmup Iteration   5: 1294037.691 ops/s
# Warmup Iteration   6: 1053421.299 ops/s
# Warmup Iteration   7: 1297135.960 ops/s
# Warmup Iteration   8: 1297648.950 ops/s
# Warmup Iteration   9: 1282859.864 ops/s
# Warmup Iteration  10: 1283933.749 ops/s
# Warmup Iteration  11: 1293683.652 ops/s
# Warmup Iteration  12: 1295358.969 ops/s
# Warmup Iteration  13: 1295883.203 ops/s
# Warmup Iteration  14: 1296003.331 ops/s
# Warmup Iteration  15: 1296202.380 ops/s
# Warmup Iteration  16: 1295693.077 ops/s
# Warmup Iteration  17: 1292042.509 ops/s
# Warmup Iteration  18: 1286560.955 ops/s
# Warmup Iteration  19: 1296166.511 ops/s
# Warmup Iteration  20: 1293567.599 ops/s
# Warmup Iteration  21: 1295540.933 ops/s
# Warmup Iteration  22: 1297658.833 ops/s
# Warmup Iteration  23: 1284807.010 ops/s
# Warmup Iteration  24: 1293507.688 ops/s
# Warmup Iteration  25: 1295983.483 ops/s
# Warmup Iteration  26: 1294703.830 ops/s
# Warmup Iteration  27: 1295760.353 ops/s
# Warmup Iteration  28: 1296100.219 ops/s
# Warmup Iteration  29: 1295411.780 ops/s
# Warmup Iteration  30: 1293398.855 ops/s
Iteration   1: 1294849.738 ops/s
Iteration   2: 1289629.084 ops/s
Iteration   3: 1296172.808 ops/s
Iteration   4: 1294072.001 ops/s
Iteration   5: 1291453.711 ops/s
Iteration   6: 1296821.561 ops/s
Iteration   7: 1294562.351 ops/s
Iteration   8: 1296223.268 ops/s
Iteration   9: 1295091.633 ops/s
Iteration  10: 1286687.449 ops/s
Iteration  11: 1270823.648 ops/s
Iteration  12: 1294067.569 ops/s
Iteration  13: 1275010.337 ops/s
Iteration  14: 1294279.296 ops/s
Iteration  15: 1293188.133 ops/s
Iteration  16: 1298470.456 ops/s
Iteration  17: 1296147.368 ops/s
Iteration  18: 1280073.050 ops/s
Iteration  19: 1293236.218 ops/s
Iteration  20: 1274961.747 ops/s
Iteration  21: 1296536.817 ops/s
Iteration  22: 1293766.636 ops/s
Iteration  23: 1296569.856 ops/s
Iteration  24: 1276200.628 ops/s
Iteration  25: 1298446.517 ops/s
Iteration  26: 1292436.196 ops/s
Iteration  27: 1276613.038 ops/s
Iteration  28: 1292629.138 ops/s
Iteration  29: 1296885.422 ops/s
Iteration  30: 1294662.096 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBag":
  1290685.592 ±(99.9%) 5428.524 ops/s [Average]
  (min, avg, max) = (1270823.648, 1290685.592, 1298470.456), stdev = 8125.160
  CI (99.9%): [1285257.068, 1296114.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1290685.592 ± 5428.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93886.640 ops/s
# Warmup Iteration   2: 128799.019 ops/s
# Warmup Iteration   3: 158989.641 ops/s
# Warmup Iteration   4: 158466.797 ops/s
# Warmup Iteration   5: 158786.219 ops/s
# Warmup Iteration   6: 158647.368 ops/s
# Warmup Iteration   7: 159264.319 ops/s
# Warmup Iteration   8: 131866.135 ops/s
# Warmup Iteration   9: 158559.415 ops/s
# Warmup Iteration  10: 158825.394 ops/s
# Warmup Iteration  11: 159062.484 ops/s
# Warmup Iteration  12: 159066.570 ops/s
# Warmup Iteration  13: 158974.153 ops/s
# Warmup Iteration  14: 159421.655 ops/s
# Warmup Iteration  15: 157810.203 ops/s
# Warmup Iteration  16: 157699.939 ops/s
# Warmup Iteration  17: 164276.745 ops/s
# Warmup Iteration  18: 163069.833 ops/s
# Warmup Iteration  19: 164594.403 ops/s
# Warmup Iteration  20: 163975.982 ops/s
# Warmup Iteration  21: 162795.364 ops/s
# Warmup Iteration  22: 163562.583 ops/s
# Warmup Iteration  23: 163899.805 ops/s
# Warmup Iteration  24: 164430.010 ops/s
# Warmup Iteration  25: 163296.555 ops/s
# Warmup Iteration  26: 162272.183 ops/s
# Warmup Iteration  27: 164391.708 ops/s
# Warmup Iteration  28: 162666.360 ops/s
# Warmup Iteration  29: 163686.802 ops/s
# Warmup Iteration  30: 162768.334 ops/s
Iteration   1: 164053.516 ops/s
Iteration   2: 161529.300 ops/s
Iteration   3: 164520.810 ops/s
Iteration   4: 163961.843 ops/s
Iteration   5: 161892.915 ops/s
Iteration   6: 164488.073 ops/s
Iteration   7: 163629.749 ops/s
Iteration   8: 164187.555 ops/s
Iteration   9: 163243.736 ops/s
Iteration  10: 164955.292 ops/s
Iteration  11: 164216.432 ops/s
Iteration  12: 163580.382 ops/s
Iteration  13: 164852.852 ops/s
Iteration  14: 164219.827 ops/s
Iteration  15: 164556.775 ops/s
Iteration  16: 164101.078 ops/s
Iteration  17: 163710.395 ops/s
Iteration  18: 160782.787 ops/s
Iteration  19: 163615.192 ops/s
Iteration  20: 163536.102 ops/s
Iteration  21: 164049.763 ops/s
Iteration  22: 160832.363 ops/s
Iteration  23: 163922.451 ops/s
Iteration  24: 163700.804 ops/s
Iteration  25: 164250.558 ops/s
Iteration  26: 164589.438 ops/s
Iteration  27: 164066.357 ops/s
Iteration  28: 164586.993 ops/s
Iteration  29: 164181.511 ops/s
Iteration  30: 160926.958 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableBiMap":
  163624.727 ±(99.9%) 794.154 ops/s [Average]
  (min, avg, max) = (160782.787, 163624.727, 164955.292), stdev = 1188.652
  CI (99.9%): [162830.573, 164418.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  163624.727 ± 794.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2901041.256 ops/s
# Warmup Iteration   2: 6696850.941 ops/s
# Warmup Iteration   3: 6763599.994 ops/s
# Warmup Iteration   4: 5658299.351 ops/s
# Warmup Iteration   5: 6795827.279 ops/s
# Warmup Iteration   6: 6807806.033 ops/s
# Warmup Iteration   7: 6789833.411 ops/s
# Warmup Iteration   8: 6776078.605 ops/s
# Warmup Iteration   9: 6690562.614 ops/s
# Warmup Iteration  10: 6786473.845 ops/s
# Warmup Iteration  11: 6787536.119 ops/s
# Warmup Iteration  12: 6811156.911 ops/s
# Warmup Iteration  13: 6781317.000 ops/s
# Warmup Iteration  14: 6672700.642 ops/s
# Warmup Iteration  15: 6783776.549 ops/s
# Warmup Iteration  16: 6788219.294 ops/s
# Warmup Iteration  17: 6787052.634 ops/s
# Warmup Iteration  18: 6791509.501 ops/s
# Warmup Iteration  19: 6768988.236 ops/s
# Warmup Iteration  20: 6778855.258 ops/s
# Warmup Iteration  21: 6793194.703 ops/s
# Warmup Iteration  22: 6781363.129 ops/s
# Warmup Iteration  23: 6747310.122 ops/s
# Warmup Iteration  24: 6720750.863 ops/s
# Warmup Iteration  25: 6785540.808 ops/s
# Warmup Iteration  26: 6771559.673 ops/s
# Warmup Iteration  27: 6804226.381 ops/s
# Warmup Iteration  28: 6808965.613 ops/s
# Warmup Iteration  29: 6805746.281 ops/s
# Warmup Iteration  30: 6793560.136 ops/s
Iteration   1: 6785999.540 ops/s
Iteration   2: 6809433.898 ops/s
Iteration   3: 6820306.473 ops/s
Iteration   4: 6784815.405 ops/s
Iteration   5: 6794651.575 ops/s
Iteration   6: 6804134.245 ops/s
Iteration   7: 6804784.053 ops/s
Iteration   8: 6821138.635 ops/s
Iteration   9: 6790130.657 ops/s
Iteration  10: 6797277.613 ops/s
Iteration  11: 6785281.822 ops/s
Iteration  12: 6792099.529 ops/s
Iteration  13: 6695263.841 ops/s
Iteration  14: 6801526.406 ops/s
Iteration  15: 6816585.402 ops/s
Iteration  16: 6790520.860 ops/s
Iteration  17: 6809328.314 ops/s
Iteration  18: 6790652.179 ops/s
Iteration  19: 6686240.989 ops/s
Iteration  20: 6686678.957 ops/s
Iteration  21: 6756498.943 ops/s
Iteration  22: 6799099.876 ops/s
Iteration  23: 6823014.872 ops/s
Iteration  24: 6809280.400 ops/s
Iteration  25: 6794644.834 ops/s
Iteration  26: 6722216.748 ops/s
Iteration  27: 6797210.595 ops/s
Iteration  28: 6766100.172 ops/s
Iteration  29: 6802932.675 ops/s
Iteration  30: 6701593.480 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableList":
  6781314.766 ±(99.9%) 27205.285 ops/s [Average]
  (min, avg, max) = (6686240.989, 6781314.766, 6823014.872), stdev = 40719.593
  CI (99.9%): [6754109.481, 6808520.051] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableList  thrpt   30  6781314.766 ± 27205.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785531.934 ops/s
# Warmup Iteration   2: 1872268.143 ops/s
# Warmup Iteration   3: 1924716.348 ops/s
# Warmup Iteration   4: 1596682.224 ops/s
# Warmup Iteration   5: 1956700.225 ops/s
# Warmup Iteration   6: 1949476.663 ops/s
# Warmup Iteration   7: 1938667.138 ops/s
# Warmup Iteration   8: 1951343.411 ops/s
# Warmup Iteration   9: 1974691.431 ops/s
# Warmup Iteration  10: 1968328.795 ops/s
# Warmup Iteration  11: 1975254.305 ops/s
# Warmup Iteration  12: 1969751.536 ops/s
# Warmup Iteration  13: 1968213.412 ops/s
# Warmup Iteration  14: 1955116.765 ops/s
# Warmup Iteration  15: 1944701.029 ops/s
# Warmup Iteration  16: 1969825.207 ops/s
# Warmup Iteration  17: 1921604.879 ops/s
# Warmup Iteration  18: 1957366.057 ops/s
# Warmup Iteration  19: 1948757.211 ops/s
# Warmup Iteration  20: 1959156.620 ops/s
# Warmup Iteration  21: 1955303.745 ops/s
# Warmup Iteration  22: 1943457.524 ops/s
# Warmup Iteration  23: 1926527.488 ops/s
# Warmup Iteration  24: 1970088.100 ops/s
# Warmup Iteration  25: 1967310.159 ops/s
# Warmup Iteration  26: 1954085.124 ops/s
# Warmup Iteration  27: 1956436.294 ops/s
# Warmup Iteration  28: 1957549.559 ops/s
# Warmup Iteration  29: 1940826.328 ops/s
# Warmup Iteration  30: 1944108.193 ops/s
Iteration   1: 1945756.146 ops/s
Iteration   2: 1947586.539 ops/s
Iteration   3: 1974601.442 ops/s
Iteration   4: 1938652.422 ops/s
Iteration   5: 1954065.123 ops/s
Iteration   6: 1937258.880 ops/s
Iteration   7: 1963824.587 ops/s
Iteration   8: 1898071.794 ops/s
Iteration   9: 1959753.052 ops/s
Iteration  10: 1934348.968 ops/s
Iteration  11: 1965752.751 ops/s
Iteration  12: 1945198.010 ops/s
Iteration  13: 1956240.163 ops/s
Iteration  14: 1959814.859 ops/s
Iteration  15: 1953839.721 ops/s
Iteration  16: 1952119.870 ops/s
Iteration  17: 1958801.294 ops/s
Iteration  18: 1899802.696 ops/s
Iteration  19: 1857483.676 ops/s
Iteration  20: 1937986.034 ops/s
Iteration  21: 1961698.829 ops/s
Iteration  22: 1975113.817 ops/s
Iteration  23: 1973784.254 ops/s
Iteration  24: 1947099.668 ops/s
Iteration  25: 1943810.347 ops/s
Iteration  26: 1950389.573 ops/s
Iteration  27: 1966518.924 ops/s
Iteration  28: 1958980.098 ops/s
Iteration  29: 1945734.035 ops/s
Iteration  30: 1966676.454 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableMap":
  1947692.134 ±(99.9%) 16534.321 ops/s [Average]
  (min, avg, max) = (1857483.676, 1947692.134, 1975113.817), stdev = 24747.796
  CI (99.9%): [1931157.813, 1964226.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1947692.134 ± 16534.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1502763.195 ops/s
# Warmup Iteration   2: 2412954.968 ops/s
# Warmup Iteration   3: 2810823.920 ops/s
# Warmup Iteration   4: 2815628.776 ops/s
# Warmup Iteration   5: 2830267.800 ops/s
# Warmup Iteration   6: 2619634.168 ops/s
# Warmup Iteration   7: 2542813.320 ops/s
# Warmup Iteration   8: 2846305.652 ops/s
# Warmup Iteration   9: 2852283.742 ops/s
# Warmup Iteration  10: 2849152.888 ops/s
# Warmup Iteration  11: 2824893.980 ops/s
# Warmup Iteration  12: 2819039.614 ops/s
# Warmup Iteration  13: 2840404.831 ops/s
# Warmup Iteration  14: 2831348.033 ops/s
# Warmup Iteration  15: 2848617.085 ops/s
# Warmup Iteration  16: 2821080.824 ops/s
# Warmup Iteration  17: 2841425.411 ops/s
# Warmup Iteration  18: 2846697.368 ops/s
# Warmup Iteration  19: 2851560.405 ops/s
# Warmup Iteration  20: 2825548.917 ops/s
# Warmup Iteration  21: 2851454.996 ops/s
# Warmup Iteration  22: 2850572.010 ops/s
# Warmup Iteration  23: 2826715.812 ops/s
# Warmup Iteration  24: 2846490.428 ops/s
# Warmup Iteration  25: 2843523.993 ops/s
# Warmup Iteration  26: 2850564.464 ops/s
# Warmup Iteration  27: 2852722.903 ops/s
# Warmup Iteration  28: 2844956.979 ops/s
# Warmup Iteration  29: 2823949.185 ops/s
# Warmup Iteration  30: 2851449.852 ops/s
Iteration   1: 2811724.673 ops/s
Iteration   2: 2856466.624 ops/s
Iteration   3: 2851762.546 ops/s
Iteration   4: 2842385.347 ops/s
Iteration   5: 2838586.893 ops/s
Iteration   6: 2842213.995 ops/s
Iteration   7: 2845597.997 ops/s
Iteration   8: 2852386.389 ops/s
Iteration   9: 2846959.739 ops/s
Iteration  10: 2854292.686 ops/s
Iteration  11: 2848369.703 ops/s
Iteration  12: 2800773.172 ops/s
Iteration  13: 2847041.152 ops/s
Iteration  14: 2851654.996 ops/s
Iteration  15: 2846849.592 ops/s
Iteration  16: 2851053.378 ops/s
Iteration  17: 2829121.991 ops/s
Iteration  18: 2851217.757 ops/s
Iteration  19: 2842797.232 ops/s
Iteration  20: 2854823.774 ops/s
Iteration  21: 2841297.387 ops/s
Iteration  22: 2756900.936 ops/s
Iteration  23: 2854744.512 ops/s
Iteration  24: 2805948.473 ops/s
Iteration  25: 2841307.490 ops/s
Iteration  26: 2837018.425 ops/s
Iteration  27: 2848072.887 ops/s
Iteration  28: 2846695.281 ops/s
Iteration  29: 2843670.678 ops/s
Iteration  30: 2809356.801 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSet":
  2838369.750 ±(99.9%) 14346.336 ops/s [Average]
  (min, avg, max) = (2756900.936, 2838369.750, 2856466.624), stdev = 21472.921
  CI (99.9%): [2824023.415, 2852716.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableSet  thrpt   30  2838369.750 ± 14346.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1084180.363 ops/s
# Warmup Iteration   2: 2465207.113 ops/s
# Warmup Iteration   3: 2556271.374 ops/s
# Warmup Iteration   4: 2351060.210 ops/s
# Warmup Iteration   5: 2326917.102 ops/s
# Warmup Iteration   6: 2541735.500 ops/s
# Warmup Iteration   7: 2563167.021 ops/s
# Warmup Iteration   8: 2551990.077 ops/s
# Warmup Iteration   9: 2538007.424 ops/s
# Warmup Iteration  10: 2553990.331 ops/s
# Warmup Iteration  11: 2550632.590 ops/s
# Warmup Iteration  12: 2548426.265 ops/s
# Warmup Iteration  13: 2567514.396 ops/s
# Warmup Iteration  14: 2571532.819 ops/s
# Warmup Iteration  15: 2569062.331 ops/s
# Warmup Iteration  16: 2568185.539 ops/s
# Warmup Iteration  17: 2563513.162 ops/s
# Warmup Iteration  18: 2567896.810 ops/s
# Warmup Iteration  19: 2575804.453 ops/s
# Warmup Iteration  20: 2565230.677 ops/s
# Warmup Iteration  21: 2551277.340 ops/s
# Warmup Iteration  22: 2567563.492 ops/s
# Warmup Iteration  23: 2566814.819 ops/s
# Warmup Iteration  24: 2560929.004 ops/s
# Warmup Iteration  25: 2551362.437 ops/s
# Warmup Iteration  26: 2559248.400 ops/s
# Warmup Iteration  27: 2569679.136 ops/s
# Warmup Iteration  28: 2562058.096 ops/s
# Warmup Iteration  29: 2571192.629 ops/s
# Warmup Iteration  30: 2559247.160 ops/s
Iteration   1: 2564926.089 ops/s
Iteration   2: 2568286.546 ops/s
Iteration   3: 2525520.015 ops/s
Iteration   4: 2574334.722 ops/s
Iteration   5: 2571279.730 ops/s
Iteration   6: 2572475.714 ops/s
Iteration   7: 2568726.345 ops/s
Iteration   8: 2531144.202 ops/s
Iteration   9: 2568268.962 ops/s
Iteration  10: 2569977.583 ops/s
Iteration  11: 2560297.655 ops/s
Iteration  12: 2563943.499 ops/s
Iteration  13: 2579607.822 ops/s
Iteration  14: 2522826.094 ops/s
Iteration  15: 2564061.321 ops/s
Iteration  16: 2571759.170 ops/s
Iteration  17: 2563732.769 ops/s
Iteration  18: 2569605.298 ops/s
Iteration  19: 2566317.825 ops/s
Iteration  20: 2554581.586 ops/s
Iteration  21: 2557583.148 ops/s
Iteration  22: 2567470.204 ops/s
Iteration  23: 2562507.098 ops/s
Iteration  24: 2574062.712 ops/s
Iteration  25: 2561733.254 ops/s
Iteration  26: 2562397.465 ops/s
Iteration  27: 2571222.758 ops/s
Iteration  28: 2565444.570 ops/s
Iteration  29: 2531732.507 ops/s
Iteration  30: 2507747.815 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2559785.816 ±(99.9%) 11715.580 ops/s [Average]
  (min, avg, max) = (2507747.815, 2559785.816, 2579607.822), stdev = 17535.330
  CI (99.9%): [2548070.236, 2571501.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2559785.816 ± 11715.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 287222.173 ops/s
# Warmup Iteration   2: 479049.203 ops/s
# Warmup Iteration   3: 605661.121 ops/s
# Warmup Iteration   4: 615901.337 ops/s
# Warmup Iteration   5: 615883.358 ops/s
# Warmup Iteration   6: 574076.987 ops/s
# Warmup Iteration   7: 532070.466 ops/s
# Warmup Iteration   8: 612891.618 ops/s
# Warmup Iteration   9: 615023.362 ops/s
# Warmup Iteration  10: 614903.016 ops/s
# Warmup Iteration  11: 614410.624 ops/s
# Warmup Iteration  12: 606892.953 ops/s
# Warmup Iteration  13: 614329.909 ops/s
# Warmup Iteration  14: 612630.288 ops/s
# Warmup Iteration  15: 613847.617 ops/s
# Warmup Iteration  16: 608189.404 ops/s
# Warmup Iteration  17: 614648.285 ops/s
# Warmup Iteration  18: 610391.860 ops/s
# Warmup Iteration  19: 614385.088 ops/s
# Warmup Iteration  20: 608857.481 ops/s
# Warmup Iteration  21: 615025.816 ops/s
# Warmup Iteration  22: 611645.202 ops/s
# Warmup Iteration  23: 605343.946 ops/s
# Warmup Iteration  24: 614593.491 ops/s
# Warmup Iteration  25: 616697.723 ops/s
# Warmup Iteration  26: 615972.051 ops/s
# Warmup Iteration  27: 615355.575 ops/s
# Warmup Iteration  28: 615641.847 ops/s
# Warmup Iteration  29: 609676.883 ops/s
# Warmup Iteration  30: 615806.255 ops/s
Iteration   1: 616625.341 ops/s
Iteration   2: 615569.011 ops/s
Iteration   3: 616211.808 ops/s
Iteration   4: 615746.239 ops/s
Iteration   5: 614677.374 ops/s
Iteration   6: 615318.849 ops/s
Iteration   7: 614069.972 ops/s
Iteration   8: 613920.302 ops/s
Iteration   9: 616477.084 ops/s
Iteration  10: 615699.505 ops/s
Iteration  11: 616982.768 ops/s
Iteration  12: 615576.367 ops/s
Iteration  13: 615209.128 ops/s
Iteration  14: 611983.739 ops/s
Iteration  15: 616135.934 ops/s
Iteration  16: 615360.678 ops/s
Iteration  17: 616509.782 ops/s
Iteration  18: 603110.334 ops/s
Iteration  19: 615686.052 ops/s
Iteration  20: 614546.663 ops/s
Iteration  21: 616906.862 ops/s
Iteration  22: 614486.206 ops/s
Iteration  23: 616921.987 ops/s
Iteration  24: 613129.615 ops/s
Iteration  25: 616919.286 ops/s
Iteration  26: 615037.155 ops/s
Iteration  27: 615018.822 ops/s
Iteration  28: 614995.113 ops/s
Iteration  29: 615622.279 ops/s
Iteration  30: 613296.798 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBagBy":
  614925.035 ±(99.9%) 1696.303 ops/s [Average]
  (min, avg, max) = (603110.334, 614925.035, 616982.768), stdev = 2538.946
  CI (99.9%): [613228.732, 616621.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  614925.035 ± 1696.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 401214.219 ops/s
# Warmup Iteration   2: 667129.865 ops/s
# Warmup Iteration   3: 791342.390 ops/s
# Warmup Iteration   4: 784178.356 ops/s
# Warmup Iteration   5: 793111.500 ops/s
# Warmup Iteration   6: 740915.840 ops/s
# Warmup Iteration   7: 712676.566 ops/s
# Warmup Iteration   8: 793474.736 ops/s
# Warmup Iteration   9: 795205.892 ops/s
# Warmup Iteration  10: 794650.364 ops/s
# Warmup Iteration  11: 793433.354 ops/s
# Warmup Iteration  12: 795007.257 ops/s
# Warmup Iteration  13: 795923.811 ops/s
# Warmup Iteration  14: 795811.373 ops/s
# Warmup Iteration  15: 793549.929 ops/s
# Warmup Iteration  16: 794595.661 ops/s
# Warmup Iteration  17: 788526.018 ops/s
# Warmup Iteration  18: 796498.069 ops/s
# Warmup Iteration  19: 796101.963 ops/s
# Warmup Iteration  20: 795321.626 ops/s
# Warmup Iteration  21: 795112.635 ops/s
# Warmup Iteration  22: 795025.364 ops/s
# Warmup Iteration  23: 795603.621 ops/s
# Warmup Iteration  24: 794586.144 ops/s
# Warmup Iteration  25: 792602.415 ops/s
# Warmup Iteration  26: 788725.709 ops/s
# Warmup Iteration  27: 795851.328 ops/s
# Warmup Iteration  28: 792321.027 ops/s
# Warmup Iteration  29: 795852.307 ops/s
# Warmup Iteration  30: 794033.277 ops/s
Iteration   1: 794032.716 ops/s
Iteration   2: 797797.353 ops/s
Iteration   3: 791784.669 ops/s
Iteration   4: 794297.269 ops/s
Iteration   5: 793690.913 ops/s
Iteration   6: 794519.161 ops/s
Iteration   7: 796495.016 ops/s
Iteration   8: 796819.721 ops/s
Iteration   9: 794107.177 ops/s
Iteration  10: 797196.941 ops/s
Iteration  11: 795170.702 ops/s
Iteration  12: 794729.020 ops/s
Iteration  13: 791001.274 ops/s
Iteration  14: 795348.320 ops/s
Iteration  15: 793657.175 ops/s
Iteration  16: 793846.543 ops/s
Iteration  17: 796525.199 ops/s
Iteration  18: 784705.022 ops/s
Iteration  19: 794092.564 ops/s
Iteration  20: 793779.639 ops/s
Iteration  21: 792539.083 ops/s
Iteration  22: 790165.956 ops/s
Iteration  23: 795311.196 ops/s
Iteration  24: 795768.859 ops/s
Iteration  25: 791833.120 ops/s
Iteration  26: 797155.397 ops/s
Iteration  27: 796013.581 ops/s
Iteration  28: 793810.751 ops/s
Iteration  29: 797164.484 ops/s
Iteration  30: 784683.447 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  793934.742 ±(99.9%) 2101.738 ops/s [Average]
  (min, avg, max) = (784683.447, 793934.742, 797797.353), stdev = 3145.783
  CI (99.9%): [791833.004, 796036.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  793934.742 ± 2101.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634530.205 ops/s
# Warmup Iteration   2: 1233891.966 ops/s
# Warmup Iteration   3: 1408695.782 ops/s
# Warmup Iteration   4: 1405794.955 ops/s
# Warmup Iteration   5: 1335895.796 ops/s
# Warmup Iteration   6: 1262596.577 ops/s
# Warmup Iteration   7: 1403236.810 ops/s
# Warmup Iteration   8: 1415996.277 ops/s
# Warmup Iteration   9: 1405726.306 ops/s
# Warmup Iteration  10: 1415291.053 ops/s
# Warmup Iteration  11: 1417012.337 ops/s
# Warmup Iteration  12: 1415962.636 ops/s
# Warmup Iteration  13: 1416312.404 ops/s
# Warmup Iteration  14: 1414495.046 ops/s
# Warmup Iteration  15: 1412611.852 ops/s
# Warmup Iteration  16: 1402712.839 ops/s
# Warmup Iteration  17: 1402440.465 ops/s
# Warmup Iteration  18: 1398384.957 ops/s
# Warmup Iteration  19: 1405040.533 ops/s
# Warmup Iteration  20: 1413618.909 ops/s
# Warmup Iteration  21: 1415405.252 ops/s
# Warmup Iteration  22: 1401877.423 ops/s
# Warmup Iteration  23: 1416715.291 ops/s
# Warmup Iteration  24: 1414109.560 ops/s
# Warmup Iteration  25: 1414277.330 ops/s
# Warmup Iteration  26: 1417390.354 ops/s
# Warmup Iteration  27: 1416565.158 ops/s
# Warmup Iteration  28: 1412327.284 ops/s
# Warmup Iteration  29: 1412616.526 ops/s
# Warmup Iteration  30: 1414953.054 ops/s
Iteration   1: 1399827.584 ops/s
Iteration   2: 1411081.298 ops/s
Iteration   3: 1383302.392 ops/s
Iteration   4: 1391648.446 ops/s
Iteration   5: 1415235.858 ops/s
Iteration   6: 1413158.974 ops/s
Iteration   7: 1414793.054 ops/s
Iteration   8: 1411837.439 ops/s
Iteration   9: 1415872.340 ops/s
Iteration  10: 1416868.336 ops/s
Iteration  11: 1408854.042 ops/s
Iteration  12: 1414563.842 ops/s
Iteration  13: 1410835.689 ops/s
Iteration  14: 1412079.793 ops/s
Iteration  15: 1413536.055 ops/s
Iteration  16: 1414258.898 ops/s
Iteration  17: 1413436.502 ops/s
Iteration  18: 1415618.300 ops/s
Iteration  19: 1413326.356 ops/s
Iteration  20: 1417162.408 ops/s
Iteration  21: 1413839.655 ops/s
Iteration  22: 1415180.728 ops/s
Iteration  23: 1412217.171 ops/s
Iteration  24: 1410688.543 ops/s
Iteration  25: 1419742.731 ops/s
Iteration  26: 1387642.786 ops/s
Iteration  27: 1413021.468 ops/s
Iteration  28: 1397324.734 ops/s
Iteration  29: 1413348.118 ops/s
Iteration  30: 1409894.140 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1410006.589 ±(99.9%) 5931.688 ops/s [Average]
  (min, avg, max) = (1383302.392, 1410006.589, 1419742.731), stdev = 8878.272
  CI (99.9%): [1404074.901, 1415938.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1410006.589 ± 5931.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1597421.060 ops/s
# Warmup Iteration   2: 2751959.281 ops/s
# Warmup Iteration   3: 3310394.835 ops/s
# Warmup Iteration   4: 3358080.548 ops/s
# Warmup Iteration   5: 3366586.507 ops/s
# Warmup Iteration   6: 2630560.688 ops/s
# Warmup Iteration   7: 3327325.775 ops/s
# Warmup Iteration   8: 3352216.090 ops/s
# Warmup Iteration   9: 3342521.594 ops/s
# Warmup Iteration  10: 3314892.254 ops/s
# Warmup Iteration  11: 3351233.223 ops/s
# Warmup Iteration  12: 3306169.320 ops/s
# Warmup Iteration  13: 3351884.529 ops/s
# Warmup Iteration  14: 3346473.968 ops/s
# Warmup Iteration  15: 3347072.464 ops/s
# Warmup Iteration  16: 3353312.825 ops/s
# Warmup Iteration  17: 3306387.461 ops/s
# Warmup Iteration  18: 3338901.631 ops/s
# Warmup Iteration  19: 3366675.961 ops/s
# Warmup Iteration  20: 3352039.245 ops/s
# Warmup Iteration  21: 3354057.590 ops/s
# Warmup Iteration  22: 3333220.707 ops/s
# Warmup Iteration  23: 3368456.553 ops/s
# Warmup Iteration  24: 3358915.203 ops/s
# Warmup Iteration  25: 3363982.549 ops/s
# Warmup Iteration  26: 3360990.692 ops/s
# Warmup Iteration  27: 3343180.560 ops/s
# Warmup Iteration  28: 3356645.649 ops/s
# Warmup Iteration  29: 3364243.798 ops/s
# Warmup Iteration  30: 3355286.577 ops/s
Iteration   1: 3356911.881 ops/s
Iteration   2: 3311002.074 ops/s
Iteration   3: 3368948.923 ops/s
Iteration   4: 3368560.499 ops/s
Iteration   5: 3352115.841 ops/s
Iteration   6: 3367316.836 ops/s
Iteration   7: 3344866.095 ops/s
Iteration   8: 3365627.011 ops/s
Iteration   9: 3358900.306 ops/s
Iteration  10: 3354773.376 ops/s
Iteration  11: 3361876.405 ops/s
Iteration  12: 3364561.282 ops/s
Iteration  13: 3356101.528 ops/s
Iteration  14: 3363174.343 ops/s
Iteration  15: 3367102.554 ops/s
Iteration  16: 3355013.099 ops/s
Iteration  17: 3371759.622 ops/s
Iteration  18: 3348562.855 ops/s
Iteration  19: 3357035.254 ops/s
Iteration  20: 3315461.716 ops/s
Iteration  21: 3354927.114 ops/s
Iteration  22: 3373543.535 ops/s
Iteration  23: 3368856.650 ops/s
Iteration  24: 3367139.483 ops/s
Iteration  25: 3361727.543 ops/s
Iteration  26: 3370962.729 ops/s
Iteration  27: 3346719.390 ops/s
Iteration  28: 3353793.240 ops/s
Iteration  29: 3341177.294 ops/s
Iteration  30: 3367314.958 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedListBy":
  3357194.448 ±(99.9%) 9771.593 ops/s [Average]
  (min, avg, max) = (3311002.074, 3357194.448, 3373543.535), stdev = 14625.661
  CI (99.9%): [3347422.855, 3366966.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  3357194.448 ± 9771.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2407530.394 ops/s
# Warmup Iteration   2: 3212809.335 ops/s
# Warmup Iteration   3: 3952931.847 ops/s
# Warmup Iteration   4: 3939710.733 ops/s
# Warmup Iteration   5: 3960900.676 ops/s
# Warmup Iteration   6: 3971619.753 ops/s
# Warmup Iteration   7: 3969120.389 ops/s
# Warmup Iteration   8: 3298773.835 ops/s
# Warmup Iteration   9: 3922070.489 ops/s
# Warmup Iteration  10: 3912667.618 ops/s
# Warmup Iteration  11: 3961902.321 ops/s
# Warmup Iteration  12: 3962697.668 ops/s
# Warmup Iteration  13: 3978008.697 ops/s
# Warmup Iteration  14: 3970844.274 ops/s
# Warmup Iteration  15: 3969821.767 ops/s
# Warmup Iteration  16: 3969508.890 ops/s
# Warmup Iteration  17: 3972499.981 ops/s
# Warmup Iteration  18: 3960288.616 ops/s
# Warmup Iteration  19: 3930947.478 ops/s
# Warmup Iteration  20: 3972982.768 ops/s
# Warmup Iteration  21: 3973282.769 ops/s
# Warmup Iteration  22: 3981515.536 ops/s
# Warmup Iteration  23: 3981540.693 ops/s
# Warmup Iteration  24: 3937931.294 ops/s
# Warmup Iteration  25: 3945207.658 ops/s
# Warmup Iteration  26: 3969681.079 ops/s
# Warmup Iteration  27: 3895018.700 ops/s
# Warmup Iteration  28: 3962178.243 ops/s
# Warmup Iteration  29: 3964569.071 ops/s
# Warmup Iteration  30: 3945036.549 ops/s
Iteration   1: 3970662.993 ops/s
Iteration   2: 3881868.436 ops/s
Iteration   3: 3937542.245 ops/s
Iteration   4: 3974228.465 ops/s
Iteration   5: 3973773.243 ops/s
Iteration   6: 3972800.485 ops/s
Iteration   7: 3970052.650 ops/s
Iteration   8: 3835226.678 ops/s
Iteration   9: 3981412.434 ops/s
Iteration  10: 3957271.883 ops/s
Iteration  11: 3980031.723 ops/s
Iteration  12: 3976422.947 ops/s
Iteration  13: 3949282.616 ops/s
Iteration  14: 3937479.992 ops/s
Iteration  15: 3975072.098 ops/s
Iteration  16: 3914019.304 ops/s
Iteration  17: 3970742.606 ops/s
Iteration  18: 3973498.901 ops/s
Iteration  19: 3913213.166 ops/s
Iteration  20: 3875450.962 ops/s
Iteration  21: 3969195.047 ops/s
Iteration  22: 3952263.482 ops/s
Iteration  23: 3969166.577 ops/s
Iteration  24: 3960620.843 ops/s
Iteration  25: 3963117.102 ops/s
Iteration  26: 3952020.972 ops/s
Iteration  27: 3970840.141 ops/s
Iteration  28: 3965409.552 ops/s
Iteration  29: 3977656.847 ops/s
Iteration  30: 3974331.133 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  3952489.184 ±(99.9%) 23525.790 ops/s [Average]
  (min, avg, max) = (3835226.678, 3952489.184, 3981412.434), stdev = 35212.297
  CI (99.9%): [3928963.394, 3976014.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  3952489.184 ± 23525.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6038756.406 ops/s
# Warmup Iteration   2: 14547958.949 ops/s
# Warmup Iteration   3: 14304006.173 ops/s
# Warmup Iteration   4: 11813241.873 ops/s
# Warmup Iteration   5: 14355448.729 ops/s
# Warmup Iteration   6: 14360142.888 ops/s
# Warmup Iteration   7: 14292749.199 ops/s
# Warmup Iteration   8: 14256655.792 ops/s
# Warmup Iteration   9: 14236162.976 ops/s
# Warmup Iteration  10: 14186190.969 ops/s
# Warmup Iteration  11: 14321723.455 ops/s
# Warmup Iteration  12: 14301867.602 ops/s
# Warmup Iteration  13: 14260925.833 ops/s
# Warmup Iteration  14: 14107587.573 ops/s
# Warmup Iteration  15: 14325683.829 ops/s
# Warmup Iteration  16: 14342777.491 ops/s
# Warmup Iteration  17: 14337422.043 ops/s
# Warmup Iteration  18: 14296358.746 ops/s
# Warmup Iteration  19: 14218357.331 ops/s
# Warmup Iteration  20: 14322218.725 ops/s
# Warmup Iteration  21: 14365152.756 ops/s
# Warmup Iteration  22: 14264245.455 ops/s
# Warmup Iteration  23: 14335100.233 ops/s
# Warmup Iteration  24: 14307730.164 ops/s
# Warmup Iteration  25: 14328460.154 ops/s
# Warmup Iteration  26: 14285571.320 ops/s
# Warmup Iteration  27: 14331537.932 ops/s
# Warmup Iteration  28: 14179365.075 ops/s
# Warmup Iteration  29: 14235440.478 ops/s
# Warmup Iteration  30: 14355657.844 ops/s
Iteration   1: 14305751.102 ops/s
Iteration   2: 14284984.671 ops/s
Iteration   3: 14236657.447 ops/s
Iteration   4: 14263008.333 ops/s
Iteration   5: 14162576.819 ops/s
Iteration   6: 14323035.283 ops/s
Iteration   7: 14286320.268 ops/s
Iteration   8: 14302908.375 ops/s
Iteration   9: 14356438.056 ops/s
Iteration  10: 14222543.626 ops/s
Iteration  11: 14175706.726 ops/s
Iteration  12: 14177828.185 ops/s
Iteration  13: 14353883.675 ops/s
Iteration  14: 14097424.257 ops/s
Iteration  15: 14317891.428 ops/s
Iteration  16: 14287181.335 ops/s
Iteration  17: 14203884.305 ops/s
Iteration  18: 14414925.327 ops/s
Iteration  19: 14318312.889 ops/s
Iteration  20: 14249734.734 ops/s
Iteration  21: 14284594.252 ops/s
Iteration  22: 14214263.783 ops/s
Iteration  23: 14130296.805 ops/s
Iteration  24: 14329624.792 ops/s
Iteration  25: 14211459.693 ops/s
Iteration  26: 14384378.889 ops/s
Iteration  27: 14250180.456 ops/s
Iteration  28: 14227285.115 ops/s
Iteration  29: 14290607.729 ops/s
Iteration  30: 14313520.267 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  14265906.954 ±(99.9%) 49616.452 ops/s [Average]
  (min, avg, max) = (14097424.257, 14265906.954, 14414925.327), stdev = 74263.576
  CI (99.9%): [14216290.502, 14315523.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  14265906.954 ± 49616.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646725.579 ops/s
# Warmup Iteration   2: 1333971.531 ops/s
# Warmup Iteration   3: 1499345.755 ops/s
# Warmup Iteration   4: 1505879.217 ops/s
# Warmup Iteration   5: 1220231.809 ops/s
# Warmup Iteration   6: 1512348.611 ops/s
# Warmup Iteration   7: 1512013.440 ops/s
# Warmup Iteration   8: 1512439.277 ops/s
# Warmup Iteration   9: 1512721.516 ops/s
# Warmup Iteration  10: 1507741.372 ops/s
# Warmup Iteration  11: 1506169.343 ops/s
# Warmup Iteration  12: 1510407.044 ops/s
# Warmup Iteration  13: 1506653.773 ops/s
# Warmup Iteration  14: 1509717.247 ops/s
# Warmup Iteration  15: 1498763.078 ops/s
# Warmup Iteration  16: 1501830.641 ops/s
# Warmup Iteration  17: 1515886.762 ops/s
# Warmup Iteration  18: 1492750.676 ops/s
# Warmup Iteration  19: 1514427.511 ops/s
# Warmup Iteration  20: 1514362.940 ops/s
# Warmup Iteration  21: 1511719.371 ops/s
# Warmup Iteration  22: 1512224.961 ops/s
# Warmup Iteration  23: 1510391.996 ops/s
# Warmup Iteration  24: 1499170.910 ops/s
# Warmup Iteration  25: 1508685.932 ops/s
# Warmup Iteration  26: 1503175.712 ops/s
# Warmup Iteration  27: 1492987.688 ops/s
# Warmup Iteration  28: 1499131.274 ops/s
# Warmup Iteration  29: 1513102.640 ops/s
# Warmup Iteration  30: 1513360.771 ops/s
Iteration   1: 1510750.616 ops/s
Iteration   2: 1508311.236 ops/s
Iteration   3: 1514917.885 ops/s
Iteration   4: 1491976.028 ops/s
Iteration   5: 1510243.522 ops/s
Iteration   6: 1507731.679 ops/s
Iteration   7: 1496301.781 ops/s
Iteration   8: 1509566.115 ops/s
Iteration   9: 1518659.434 ops/s
Iteration  10: 1515576.036 ops/s
Iteration  11: 1514253.338 ops/s
Iteration  12: 1517679.446 ops/s
Iteration  13: 1514134.131 ops/s
Iteration  14: 1513156.404 ops/s
Iteration  15: 1512201.447 ops/s
Iteration  16: 1520268.190 ops/s
Iteration  17: 1505053.953 ops/s
Iteration  18: 1512513.923 ops/s
Iteration  19: 1513496.233 ops/s
Iteration  20: 1509669.023 ops/s
Iteration  21: 1514249.840 ops/s
Iteration  22: 1516111.956 ops/s
Iteration  23: 1513649.238 ops/s
Iteration  24: 1514593.839 ops/s
Iteration  25: 1492692.126 ops/s
Iteration  26: 1516452.456 ops/s
Iteration  27: 1513147.953 ops/s
Iteration  28: 1517685.844 ops/s
Iteration  29: 1509027.149 ops/s
Iteration  30: 1514781.238 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1511295.069 ±(99.9%) 4613.167 ops/s [Average]
  (min, avg, max) = (1491976.028, 1511295.069, 1520268.190), stdev = 6904.772
  CI (99.9%): [1506681.902, 1515908.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1511295.069 ± 4613.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1080014.600 ops/s
# Warmup Iteration   2: 2519478.497 ops/s
# Warmup Iteration   3: 2551432.325 ops/s
# Warmup Iteration   4: 2136908.403 ops/s
# Warmup Iteration   5: 2574718.699 ops/s
# Warmup Iteration   6: 2567943.717 ops/s
# Warmup Iteration   7: 2569328.325 ops/s
# Warmup Iteration   8: 2566147.741 ops/s
# Warmup Iteration   9: 2562937.400 ops/s
# Warmup Iteration  10: 2564024.443 ops/s
# Warmup Iteration  11: 2573784.143 ops/s
# Warmup Iteration  12: 2561289.037 ops/s
# Warmup Iteration  13: 2561664.616 ops/s
# Warmup Iteration  14: 2571694.149 ops/s
# Warmup Iteration  15: 2570432.736 ops/s
# Warmup Iteration  16: 2571021.616 ops/s
# Warmup Iteration  17: 2573640.118 ops/s
# Warmup Iteration  18: 2551805.784 ops/s
# Warmup Iteration  19: 2572024.302 ops/s
# Warmup Iteration  20: 2486350.041 ops/s
# Warmup Iteration  21: 2570704.205 ops/s
# Warmup Iteration  22: 2545943.681 ops/s
# Warmup Iteration  23: 2566419.344 ops/s
# Warmup Iteration  24: 2571713.307 ops/s
# Warmup Iteration  25: 2541576.770 ops/s
# Warmup Iteration  26: 2574108.582 ops/s
# Warmup Iteration  27: 2572529.713 ops/s
# Warmup Iteration  28: 2565101.409 ops/s
# Warmup Iteration  29: 2571542.441 ops/s
# Warmup Iteration  30: 2575349.502 ops/s
Iteration   1: 2530831.321 ops/s
Iteration   2: 2557173.472 ops/s
Iteration   3: 2573895.167 ops/s
Iteration   4: 2545932.783 ops/s
Iteration   5: 2529234.811 ops/s
Iteration   6: 2572720.130 ops/s
Iteration   7: 2572451.530 ops/s
Iteration   8: 2532524.013 ops/s
Iteration   9: 2486643.813 ops/s
Iteration  10: 2572082.419 ops/s
Iteration  11: 2577967.760 ops/s
Iteration  12: 2560257.788 ops/s
Iteration  13: 2541337.845 ops/s
Iteration  14: 2533334.759 ops/s
Iteration  15: 2572764.388 ops/s
Iteration  16: 2547514.276 ops/s
Iteration  17: 2568428.671 ops/s
Iteration  18: 2575199.007 ops/s
Iteration  19: 2567576.026 ops/s
Iteration  20: 2571463.119 ops/s
Iteration  21: 2580777.738 ops/s
Iteration  22: 2567276.681 ops/s
Iteration  23: 2534422.793 ops/s
Iteration  24: 2574019.823 ops/s
Iteration  25: 2568863.039 ops/s
Iteration  26: 2572488.850 ops/s
Iteration  27: 2575787.590 ops/s
Iteration  28: 2568961.816 ops/s
Iteration  29: 2534991.392 ops/s
Iteration  30: 2531494.971 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2556613.926 ±(99.9%) 14669.417 ops/s [Average]
  (min, avg, max) = (2486643.813, 2556613.926, 2580777.738), stdev = 21956.495
  CI (99.9%): [2541944.509, 2571283.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2556613.926 ± 14669.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5023708.176 ops/s
# Warmup Iteration   2: 9356642.402 ops/s
# Warmup Iteration   3: 8480055.812 ops/s
# Warmup Iteration   4: 9348284.089 ops/s
# Warmup Iteration   5: 9199084.217 ops/s
# Warmup Iteration   6: 9105648.136 ops/s
# Warmup Iteration   7: 9290373.109 ops/s
# Warmup Iteration   8: 9338382.023 ops/s
# Warmup Iteration   9: 9253896.673 ops/s
# Warmup Iteration  10: 9284512.224 ops/s
# Warmup Iteration  11: 9321494.544 ops/s
# Warmup Iteration  12: 9323043.068 ops/s
# Warmup Iteration  13: 9286974.893 ops/s
# Warmup Iteration  14: 9101925.563 ops/s
# Warmup Iteration  15: 9253745.282 ops/s
# Warmup Iteration  16: 9358225.997 ops/s
# Warmup Iteration  17: 10043140.170 ops/s
# Warmup Iteration  18: 10078867.916 ops/s
# Warmup Iteration  19: 10089678.888 ops/s
# Warmup Iteration  20: 10103049.095 ops/s
# Warmup Iteration  21: 10051044.988 ops/s
# Warmup Iteration  22: 10088316.617 ops/s
# Warmup Iteration  23: 10110506.895 ops/s
# Warmup Iteration  24: 10001468.837 ops/s
# Warmup Iteration  25: 10055645.548 ops/s
# Warmup Iteration  26: 10108741.960 ops/s
# Warmup Iteration  27: 9984111.357 ops/s
# Warmup Iteration  28: 10072727.653 ops/s
# Warmup Iteration  29: 10102226.396 ops/s
# Warmup Iteration  30: 10105643.992 ops/s
Iteration   1: 10103248.856 ops/s
Iteration   2: 10111586.713 ops/s
Iteration   3: 10106675.526 ops/s
Iteration   4: 10106983.100 ops/s
Iteration   5: 10112870.669 ops/s
Iteration   6: 10116799.122 ops/s
Iteration   7: 10087979.150 ops/s
Iteration   8: 10027480.115 ops/s
Iteration   9: 10098810.691 ops/s
Iteration  10: 10083965.455 ops/s
Iteration  11: 10065117.074 ops/s
Iteration  12: 10114984.051 ops/s
Iteration  13: 10122090.537 ops/s
Iteration  14: 10108675.812 ops/s
Iteration  15: 10092272.498 ops/s
Iteration  16: 10074722.688 ops/s
Iteration  17: 10081337.699 ops/s
Iteration  18: 9930832.068 ops/s
Iteration  19: 10130746.757 ops/s
Iteration  20: 10089349.362 ops/s
Iteration  21: 10112724.932 ops/s
Iteration  22: 10137684.588 ops/s
Iteration  23: 9929646.626 ops/s
Iteration  24: 10053711.291 ops/s
Iteration  25: 10057017.731 ops/s
Iteration  26: 10106862.027 ops/s
Iteration  27: 10122419.360 ops/s
Iteration  28: 10079865.623 ops/s
Iteration  29: 9900110.191 ops/s
Iteration  30: 10081400.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toList":
  10078265.682 ±(99.9%) 39380.630 ops/s [Average]
  (min, avg, max) = (9900110.191, 10078265.682, 10137684.588), stdev = 58943.078
  CI (99.9%): [10038885.052, 10117646.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toList  thrpt   30  10078265.682 ± 39380.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1283454.842 ops/s
# Warmup Iteration   2: 2802135.569 ops/s
# Warmup Iteration   3: 2966603.343 ops/s
# Warmup Iteration   4: 2958380.176 ops/s
# Warmup Iteration   5: 2512263.764 ops/s
# Warmup Iteration   6: 3008097.000 ops/s
# Warmup Iteration   7: 2970680.372 ops/s
# Warmup Iteration   8: 2968240.614 ops/s
# Warmup Iteration   9: 2982635.318 ops/s
# Warmup Iteration  10: 2995139.738 ops/s
# Warmup Iteration  11: 2969388.971 ops/s
# Warmup Iteration  12: 3018312.052 ops/s
# Warmup Iteration  13: 3018003.947 ops/s
# Warmup Iteration  14: 3025878.469 ops/s
# Warmup Iteration  15: 3009560.505 ops/s
# Warmup Iteration  16: 3000696.209 ops/s
# Warmup Iteration  17: 3003741.147 ops/s
# Warmup Iteration  18: 2972557.688 ops/s
# Warmup Iteration  19: 3007939.418 ops/s
# Warmup Iteration  20: 3011001.344 ops/s
# Warmup Iteration  21: 3021403.357 ops/s
# Warmup Iteration  22: 2930312.202 ops/s
# Warmup Iteration  23: 2998340.557 ops/s
# Warmup Iteration  24: 2995763.384 ops/s
# Warmup Iteration  25: 3010384.115 ops/s
# Warmup Iteration  26: 3010438.960 ops/s
# Warmup Iteration  27: 2983903.828 ops/s
# Warmup Iteration  28: 3008632.964 ops/s
# Warmup Iteration  29: 2968325.091 ops/s
# Warmup Iteration  30: 3018327.534 ops/s
Iteration   1: 3009759.613 ops/s
Iteration   2: 2964417.710 ops/s
Iteration   3: 2957009.836 ops/s
Iteration   4: 3000553.991 ops/s
Iteration   5: 2992510.545 ops/s
Iteration   6: 3011710.771 ops/s
Iteration   7: 2996975.568 ops/s
Iteration   8: 3024913.871 ops/s
Iteration   9: 2977335.453 ops/s
Iteration  10: 3005271.218 ops/s
Iteration  11: 2969513.758 ops/s
Iteration  12: 2970695.253 ops/s
Iteration  13: 2971829.116 ops/s
Iteration  14: 3001661.750 ops/s
Iteration  15: 3027653.371 ops/s
Iteration  16: 2944864.317 ops/s
Iteration  17: 3008277.783 ops/s
Iteration  18: 2984276.598 ops/s
Iteration  19: 2978137.653 ops/s
Iteration  20: 2982424.316 ops/s
Iteration  21: 2933004.824 ops/s
Iteration  22: 2995746.475 ops/s
Iteration  23: 3016781.900 ops/s
Iteration  24: 2972372.051 ops/s
Iteration  25: 2944354.686 ops/s
Iteration  26: 3029706.772 ops/s
Iteration  27: 2987808.400 ops/s
Iteration  28: 2978646.123 ops/s
Iteration  29: 2964987.501 ops/s
Iteration  30: 2978242.372 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMap":
  2986048.120 ±(99.9%) 16673.162 ops/s [Average]
  (min, avg, max) = (2933004.824, 2986048.120, 3029706.772), stdev = 24955.605
  CI (99.9%): [2969374.958, 3002721.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toMap  thrpt   30  2986048.120 ± 16673.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1092750.319 ops/s
# Warmup Iteration   2: 2699144.792 ops/s
# Warmup Iteration   3: 2699144.789 ops/s
# Warmup Iteration   4: 2220368.632 ops/s
# Warmup Iteration   5: 2691289.328 ops/s
# Warmup Iteration   6: 2678642.826 ops/s
# Warmup Iteration   7: 2673198.571 ops/s
# Warmup Iteration   8: 2697407.967 ops/s
# Warmup Iteration   9: 2683490.487 ops/s
# Warmup Iteration  10: 2692086.167 ops/s
# Warmup Iteration  11: 2689210.611 ops/s
# Warmup Iteration  12: 2720887.384 ops/s
# Warmup Iteration  13: 2702437.442 ops/s
# Warmup Iteration  14: 2699868.470 ops/s
# Warmup Iteration  15: 2697069.963 ops/s
# Warmup Iteration  16: 2710327.383 ops/s
# Warmup Iteration  17: 2681781.197 ops/s
# Warmup Iteration  18: 2680549.222 ops/s
# Warmup Iteration  19: 2687881.387 ops/s
# Warmup Iteration  20: 2694540.626 ops/s
# Warmup Iteration  21: 2697489.650 ops/s
# Warmup Iteration  22: 2682223.839 ops/s
# Warmup Iteration  23: 2668055.473 ops/s
# Warmup Iteration  24: 2665456.152 ops/s
# Warmup Iteration  25: 2702341.590 ops/s
# Warmup Iteration  26: 2697034.938 ops/s
# Warmup Iteration  27: 2663389.871 ops/s
# Warmup Iteration  28: 2654271.343 ops/s
# Warmup Iteration  29: 2683730.571 ops/s
# Warmup Iteration  30: 2683117.905 ops/s
Iteration   1: 2704506.707 ops/s
Iteration   2: 2681738.097 ops/s
Iteration   3: 2698290.758 ops/s
Iteration   4: 2688000.065 ops/s
Iteration   5: 2671186.682 ops/s
Iteration   6: 2687529.727 ops/s
Iteration   7: 2651010.950 ops/s
Iteration   8: 2693709.171 ops/s
Iteration   9: 2697418.458 ops/s
Iteration  10: 2687545.547 ops/s
Iteration  11: 2700465.464 ops/s
Iteration  12: 2671657.974 ops/s
Iteration  13: 2675850.082 ops/s
Iteration  14: 2659048.520 ops/s
Iteration  15: 2698051.128 ops/s
Iteration  16: 2709849.799 ops/s
Iteration  17: 2691839.468 ops/s
Iteration  18: 2700066.984 ops/s
Iteration  19: 2688743.078 ops/s
Iteration  20: 2677937.430 ops/s
Iteration  21: 2705001.451 ops/s
Iteration  22: 2699642.395 ops/s
Iteration  23: 2709943.836 ops/s
Iteration  24: 2698610.862 ops/s
Iteration  25: 2642818.287 ops/s
Iteration  26: 2716982.403 ops/s
Iteration  27: 2671480.921 ops/s
Iteration  28: 2672115.085 ops/s
Iteration  29: 2712431.703 ops/s
Iteration  30: 2677621.974 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toMapTarget":
  2688036.500 ±(99.9%) 12136.185 ops/s [Average]
  (min, avg, max) = (2642818.287, 2688036.500, 2716982.403), stdev = 18164.871
  CI (99.9%): [2675900.316, 2700172.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toMapTarget  thrpt   30  2688036.500 ± 12136.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6929222.867 ops/s
# Warmup Iteration   2: 15302015.327 ops/s
# Warmup Iteration   3: 15087969.504 ops/s
# Warmup Iteration   4: 12491225.873 ops/s
# Warmup Iteration   5: 15145482.650 ops/s
# Warmup Iteration   6: 14993683.685 ops/s
# Warmup Iteration   7: 15179719.512 ops/s
# Warmup Iteration   8: 15043133.059 ops/s
# Warmup Iteration   9: 15129991.548 ops/s
# Warmup Iteration  10: 15131916.993 ops/s
# Warmup Iteration  11: 15001125.791 ops/s
# Warmup Iteration  12: 15180642.047 ops/s
# Warmup Iteration  13: 15135965.895 ops/s
# Warmup Iteration  14: 15158377.008 ops/s
# Warmup Iteration  15: 15106223.011 ops/s
# Warmup Iteration  16: 15140559.947 ops/s
# Warmup Iteration  17: 15154447.045 ops/s
# Warmup Iteration  18: 15024669.396 ops/s
# Warmup Iteration  19: 15088238.645 ops/s
# Warmup Iteration  20: 15109456.631 ops/s
# Warmup Iteration  21: 14921517.207 ops/s
# Warmup Iteration  22: 15115579.249 ops/s
# Warmup Iteration  23: 15192420.630 ops/s
# Warmup Iteration  24: 15167749.102 ops/s
# Warmup Iteration  25: 14999609.447 ops/s
# Warmup Iteration  26: 15158956.329 ops/s
# Warmup Iteration  27: 14968180.798 ops/s
# Warmup Iteration  28: 15128597.668 ops/s
# Warmup Iteration  29: 15171870.953 ops/s
# Warmup Iteration  30: 15022488.260 ops/s
Iteration   1: 14956561.588 ops/s
Iteration   2: 15079498.803 ops/s
Iteration   3: 15138674.795 ops/s
Iteration   4: 15155741.540 ops/s
Iteration   5: 15135727.268 ops/s
Iteration   6: 15180133.681 ops/s
Iteration   7: 15152575.472 ops/s
Iteration   8: 15179460.579 ops/s
Iteration   9: 15183500.131 ops/s
Iteration  10: 15182299.637 ops/s
Iteration  11: 15146132.498 ops/s
Iteration  12: 15115905.872 ops/s
Iteration  13: 14896875.840 ops/s
Iteration  14: 15127130.133 ops/s
Iteration  15: 15028322.249 ops/s
Iteration  16: 15168382.877 ops/s
Iteration  17: 15130889.182 ops/s
Iteration  18: 15101863.232 ops/s
Iteration  19: 15070230.119 ops/s
Iteration  20: 14869719.907 ops/s
Iteration  21: 15178002.704 ops/s
Iteration  22: 15173131.136 ops/s
Iteration  23: 15145438.321 ops/s
Iteration  24: 15117520.584 ops/s
Iteration  25: 15094703.846 ops/s
Iteration  26: 15103724.506 ops/s
Iteration  27: 15145187.870 ops/s
Iteration  28: 15088471.601 ops/s
Iteration  29: 14920503.413 ops/s
Iteration  30: 15190162.483 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toReversed":
  15105215.729 ±(99.9%) 58289.081 ops/s [Average]
  (min, avg, max) = (14869719.907, 15105215.729, 15190162.483), stdev = 87244.359
  CI (99.9%): [15046926.648, 15163504.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toReversed  thrpt   30  15105215.729 ± 58289.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5137708.209 ops/s
# Warmup Iteration   2: 10953143.045 ops/s
# Warmup Iteration   3: 8989982.703 ops/s
# Warmup Iteration   4: 10853613.054 ops/s
# Warmup Iteration   5: 11033370.411 ops/s
# Warmup Iteration   6: 11018086.438 ops/s
# Warmup Iteration   7: 10999123.129 ops/s
# Warmup Iteration   8: 10987806.464 ops/s
# Warmup Iteration   9: 11007497.779 ops/s
# Warmup Iteration  10: 10997918.496 ops/s
# Warmup Iteration  11: 11031104.083 ops/s
# Warmup Iteration  12: 11015973.832 ops/s
# Warmup Iteration  13: 10929796.257 ops/s
# Warmup Iteration  14: 10913131.663 ops/s
# Warmup Iteration  15: 11005454.858 ops/s
# Warmup Iteration  16: 10993001.660 ops/s
# Warmup Iteration  17: 10979402.855 ops/s
# Warmup Iteration  18: 10866525.843 ops/s
# Warmup Iteration  19: 10844117.845 ops/s
# Warmup Iteration  20: 10999515.074 ops/s
# Warmup Iteration  21: 11035396.019 ops/s
# Warmup Iteration  22: 11021716.395 ops/s
# Warmup Iteration  23: 10964982.769 ops/s
# Warmup Iteration  24: 10975810.565 ops/s
# Warmup Iteration  25: 10954909.350 ops/s
# Warmup Iteration  26: 10970934.316 ops/s
# Warmup Iteration  27: 11004643.731 ops/s
# Warmup Iteration  28: 11006280.168 ops/s
# Warmup Iteration  29: 10922943.274 ops/s
# Warmup Iteration  30: 11013269.900 ops/s
Iteration   1: 11017154.985 ops/s
Iteration   2: 10983008.941 ops/s
Iteration   3: 11032233.644 ops/s
Iteration   4: 11011394.379 ops/s
Iteration   5: 11012188.170 ops/s
Iteration   6: 11029551.766 ops/s
Iteration   7: 11010686.020 ops/s
Iteration   8: 10978998.115 ops/s
Iteration   9: 11001058.384 ops/s
Iteration  10: 11027103.077 ops/s
Iteration  11: 10959901.465 ops/s
Iteration  12: 11031983.596 ops/s
Iteration  13: 10933865.171 ops/s
Iteration  14: 11015085.301 ops/s
Iteration  15: 10866879.628 ops/s
Iteration  16: 11014253.221 ops/s
Iteration  17: 11009216.002 ops/s
Iteration  18: 10974323.629 ops/s
Iteration  19: 11021907.244 ops/s
Iteration  20: 11039659.254 ops/s
Iteration  21: 10794011.648 ops/s
Iteration  22: 11058370.491 ops/s
Iteration  23: 10955942.741 ops/s
Iteration  24: 11034452.734 ops/s
Iteration  25: 10986566.009 ops/s
Iteration  26: 10853021.599 ops/s
Iteration  27: 10998136.585 ops/s
Iteration  28: 11048582.754 ops/s
Iteration  29: 10858680.224 ops/s
Iteration  30: 10897881.726 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSet":
  10981869.950 ±(99.9%) 43981.114 ops/s [Average]
  (min, avg, max) = (10794011.648, 10981869.950, 11058370.491), stdev = 65828.866
  CI (99.9%): [10937888.836, 11025851.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toSet  thrpt   30  10981869.950 ± 43981.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 274658.073 ops/s
# Warmup Iteration   2: 448748.097 ops/s
# Warmup Iteration   3: 567915.568 ops/s
# Warmup Iteration   4: 566853.444 ops/s
# Warmup Iteration   5: 569789.957 ops/s
# Warmup Iteration   6: 566015.126 ops/s
# Warmup Iteration   7: 459940.948 ops/s
# Warmup Iteration   8: 571465.218 ops/s
# Warmup Iteration   9: 572306.134 ops/s
# Warmup Iteration  10: 569328.249 ops/s
# Warmup Iteration  11: 570972.486 ops/s
# Warmup Iteration  12: 570569.030 ops/s
# Warmup Iteration  13: 572100.098 ops/s
# Warmup Iteration  14: 572486.677 ops/s
# Warmup Iteration  15: 570552.661 ops/s
# Warmup Iteration  16: 570548.170 ops/s
# Warmup Iteration  17: 571888.481 ops/s
# Warmup Iteration  18: 565769.339 ops/s
# Warmup Iteration  19: 567564.796 ops/s
# Warmup Iteration  20: 572393.034 ops/s
# Warmup Iteration  21: 571630.883 ops/s
# Warmup Iteration  22: 570753.879 ops/s
# Warmup Iteration  23: 566358.922 ops/s
# Warmup Iteration  24: 570034.258 ops/s
# Warmup Iteration  25: 573946.091 ops/s
# Warmup Iteration  26: 572334.215 ops/s
# Warmup Iteration  27: 571883.958 ops/s
# Warmup Iteration  28: 572550.581 ops/s
# Warmup Iteration  29: 572868.481 ops/s
# Warmup Iteration  30: 571912.342 ops/s
Iteration   1: 571927.109 ops/s
Iteration   2: 572936.029 ops/s
Iteration   3: 571192.562 ops/s
Iteration   4: 572793.978 ops/s
Iteration   5: 570835.386 ops/s
Iteration   6: 571937.608 ops/s
Iteration   7: 572232.537 ops/s
Iteration   8: 574127.382 ops/s
Iteration   9: 563448.559 ops/s
Iteration  10: 573140.715 ops/s
Iteration  11: 571759.217 ops/s
Iteration  12: 573812.294 ops/s
Iteration  13: 572248.052 ops/s
Iteration  14: 573497.964 ops/s
Iteration  15: 572650.019 ops/s
Iteration  16: 571639.685 ops/s
Iteration  17: 573794.714 ops/s
Iteration  18: 574065.333 ops/s
Iteration  19: 572886.361 ops/s
Iteration  20: 564604.599 ops/s
Iteration  21: 573843.759 ops/s
Iteration  22: 563295.586 ops/s
Iteration  23: 572339.414 ops/s
Iteration  24: 574784.805 ops/s
Iteration  25: 569255.198 ops/s
Iteration  26: 564732.427 ops/s
Iteration  27: 574407.800 ops/s
Iteration  28: 571417.493 ops/s
Iteration  29: 573591.205 ops/s
Iteration  30: 563622.291 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBagBy":
  571227.336 ±(99.9%) 2354.072 ops/s [Average]
  (min, avg, max) = (563295.586, 571227.336, 574784.805), stdev = 3523.464
  CI (99.9%): [568873.264, 573581.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  571227.336 ± 2354.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603086.102 ops/s
# Warmup Iteration   2: 1214179.568 ops/s
# Warmup Iteration   3: 1358693.281 ops/s
# Warmup Iteration   4: 1363740.700 ops/s
# Warmup Iteration   5: 1136256.020 ops/s
# Warmup Iteration   6: 1351744.304 ops/s
# Warmup Iteration   7: 1360346.575 ops/s
# Warmup Iteration   8: 1358633.024 ops/s
# Warmup Iteration   9: 1359843.088 ops/s
# Warmup Iteration  10: 1340549.310 ops/s
# Warmup Iteration  11: 1359151.174 ops/s
# Warmup Iteration  12: 1359998.902 ops/s
# Warmup Iteration  13: 1359620.794 ops/s
# Warmup Iteration  14: 1355095.692 ops/s
# Warmup Iteration  15: 1361192.896 ops/s
# Warmup Iteration  16: 1357940.115 ops/s
# Warmup Iteration  17: 1357200.383 ops/s
# Warmup Iteration  18: 1346153.834 ops/s
# Warmup Iteration  19: 1359983.692 ops/s
# Warmup Iteration  20: 1346741.172 ops/s
# Warmup Iteration  21: 1358132.509 ops/s
# Warmup Iteration  22: 1358958.866 ops/s
# Warmup Iteration  23: 1334117.428 ops/s
# Warmup Iteration  24: 1361132.840 ops/s
# Warmup Iteration  25: 1344728.133 ops/s
# Warmup Iteration  26: 1352177.623 ops/s
# Warmup Iteration  27: 1361059.754 ops/s
# Warmup Iteration  28: 1359917.062 ops/s
# Warmup Iteration  29: 1359701.689 ops/s
# Warmup Iteration  30: 1360340.990 ops/s
Iteration   1: 1355744.698 ops/s
Iteration   2: 1361846.715 ops/s
Iteration   3: 1363517.404 ops/s
Iteration   4: 1359182.692 ops/s
Iteration   5: 1356684.688 ops/s
Iteration   6: 1362539.836 ops/s
Iteration   7: 1358809.245 ops/s
Iteration   8: 1358788.166 ops/s
Iteration   9: 1358215.402 ops/s
Iteration  10: 1350059.969 ops/s
Iteration  11: 1362158.925 ops/s
Iteration  12: 1359902.888 ops/s
Iteration  13: 1357504.718 ops/s
Iteration  14: 1335239.052 ops/s
Iteration  15: 1360082.880 ops/s
Iteration  16: 1357263.780 ops/s
Iteration  17: 1360781.863 ops/s
Iteration  18: 1362667.699 ops/s
Iteration  19: 1359083.504 ops/s
Iteration  20: 1355515.433 ops/s
Iteration  21: 1360957.630 ops/s
Iteration  22: 1354765.380 ops/s
Iteration  23: 1358827.090 ops/s
Iteration  24: 1359441.890 ops/s
Iteration  25: 1359623.722 ops/s
Iteration  26: 1355833.961 ops/s
Iteration  27: 1360772.132 ops/s
Iteration  28: 1359076.824 ops/s
Iteration  29: 1352732.705 ops/s
Iteration  30: 1361340.172 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1357965.369 ±(99.9%) 3501.239 ops/s [Average]
  (min, avg, max) = (1335239.052, 1357965.369, 1363517.404), stdev = 5240.490
  CI (99.9%): [1354464.130, 1361466.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1357965.369 ± 3501.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690836.026 ops/s
# Warmup Iteration   2: 1392694.040 ops/s
# Warmup Iteration   3: 1505794.927 ops/s
# Warmup Iteration   4: 1534139.567 ops/s
# Warmup Iteration   5: 1282362.620 ops/s
# Warmup Iteration   6: 1536258.195 ops/s
# Warmup Iteration   7: 1526699.344 ops/s
# Warmup Iteration   8: 1533966.674 ops/s
# Warmup Iteration   9: 1538006.615 ops/s
# Warmup Iteration  10: 1539919.804 ops/s
# Warmup Iteration  11: 1532410.958 ops/s
# Warmup Iteration  12: 1538714.818 ops/s
# Warmup Iteration  13: 1534897.463 ops/s
# Warmup Iteration  14: 1512158.865 ops/s
# Warmup Iteration  15: 1532449.648 ops/s
# Warmup Iteration  16: 1532685.312 ops/s
# Warmup Iteration  17: 1535359.091 ops/s
# Warmup Iteration  18: 1535492.211 ops/s
# Warmup Iteration  19: 1537206.721 ops/s
# Warmup Iteration  20: 1531264.186 ops/s
# Warmup Iteration  21: 1522313.526 ops/s
# Warmup Iteration  22: 1531993.221 ops/s
# Warmup Iteration  23: 1533281.630 ops/s
# Warmup Iteration  24: 1534192.063 ops/s
# Warmup Iteration  25: 1526252.225 ops/s
# Warmup Iteration  26: 1536257.725 ops/s
# Warmup Iteration  27: 1533359.973 ops/s
# Warmup Iteration  28: 1538546.654 ops/s
# Warmup Iteration  29: 1534833.830 ops/s
# Warmup Iteration  30: 1536890.173 ops/s
Iteration   1: 1532645.622 ops/s
Iteration   2: 1539147.580 ops/s
Iteration   3: 1533440.248 ops/s
Iteration   4: 1529678.617 ops/s
Iteration   5: 1530640.531 ops/s
Iteration   6: 1529268.957 ops/s
Iteration   7: 1538582.832 ops/s
Iteration   8: 1534893.760 ops/s
Iteration   9: 1529147.837 ops/s
Iteration  10: 1536233.221 ops/s
Iteration  11: 1534563.135 ops/s
Iteration  12: 1534637.873 ops/s
Iteration  13: 1529816.518 ops/s
Iteration  14: 1539853.797 ops/s
Iteration  15: 1535911.043 ops/s
Iteration  16: 1540931.525 ops/s
Iteration  17: 1537482.290 ops/s
Iteration  18: 1538753.157 ops/s
Iteration  19: 1538235.648 ops/s
Iteration  20: 1541561.442 ops/s
Iteration  21: 1539684.419 ops/s
Iteration  22: 1538724.858 ops/s
Iteration  23: 1542958.915 ops/s
Iteration  24: 1518132.148 ops/s
Iteration  25: 1535342.358 ops/s
Iteration  26: 1541074.877 ops/s
Iteration  27: 1536995.731 ops/s
Iteration  28: 1542305.309 ops/s
Iteration  29: 1544949.338 ops/s
Iteration  30: 1540371.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1536198.847 ±(99.9%) 3674.689 ops/s [Average]
  (min, avg, max) = (1518132.148, 1536198.847, 1544949.338), stdev = 5500.102
  CI (99.9%): [1532524.158, 1539873.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1536198.847 ± 3674.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 574533.477 ops/s
# Warmup Iteration   2: 606799.434 ops/s
# Warmup Iteration   3: 757327.822 ops/s
# Warmup Iteration   4: 791384.591 ops/s
# Warmup Iteration   5: 798250.100 ops/s
# Warmup Iteration   6: 793600.375 ops/s
# Warmup Iteration   7: 791527.568 ops/s
# Warmup Iteration   8: 789602.736 ops/s
# Warmup Iteration   9: 790722.741 ops/s
# Warmup Iteration  10: 800044.217 ops/s
# Warmup Iteration  11: 798435.613 ops/s
# Warmup Iteration  12: 798296.077 ops/s
# Warmup Iteration  13: 669083.937 ops/s
# Warmup Iteration  14: 793359.815 ops/s
# Warmup Iteration  15: 798910.847 ops/s
# Warmup Iteration  16: 792291.162 ops/s
# Warmup Iteration  17: 839856.566 ops/s
# Warmup Iteration  18: 839192.635 ops/s
# Warmup Iteration  19: 839689.896 ops/s
# Warmup Iteration  20: 836426.843 ops/s
# Warmup Iteration  21: 836525.334 ops/s
# Warmup Iteration  22: 837671.508 ops/s
# Warmup Iteration  23: 833708.533 ops/s
# Warmup Iteration  24: 839273.102 ops/s
# Warmup Iteration  25: 829687.225 ops/s
# Warmup Iteration  26: 838757.298 ops/s
# Warmup Iteration  27: 833613.937 ops/s
# Warmup Iteration  28: 839225.509 ops/s
# Warmup Iteration  29: 825128.288 ops/s
# Warmup Iteration  30: 841680.173 ops/s
Iteration   1: 825940.764 ops/s
Iteration   2: 837150.702 ops/s
Iteration   3: 837632.002 ops/s
Iteration   4: 838588.871 ops/s
Iteration   5: 837948.904 ops/s
Iteration   6: 839579.151 ops/s
Iteration   7: 837145.890 ops/s
Iteration   8: 839294.673 ops/s
Iteration   9: 837765.066 ops/s
Iteration  10: 840863.104 ops/s
Iteration  11: 829746.767 ops/s
Iteration  12: 841465.819 ops/s
Iteration  13: 835778.428 ops/s
Iteration  14: 839420.413 ops/s
Iteration  15: 828496.933 ops/s
Iteration  16: 838574.312 ops/s
Iteration  17: 838226.792 ops/s
Iteration  18: 838258.905 ops/s
Iteration  19: 839651.840 ops/s
Iteration  20: 837855.164 ops/s
Iteration  21: 837912.991 ops/s
Iteration  22: 835059.631 ops/s
Iteration  23: 839958.099 ops/s
Iteration  24: 839163.893 ops/s
Iteration  25: 834311.953 ops/s
Iteration  26: 835053.502 ops/s
Iteration  27: 829877.971 ops/s
Iteration  28: 837543.661 ops/s
Iteration  29: 825692.455 ops/s
Iteration  30: 839475.008 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedBag_with_null":
  836447.789 ±(99.9%) 2840.101 ops/s [Average]
  (min, avg, max) = (825692.455, 836447.789, 841465.819), stdev = 4250.931
  CI (99.9%): [833607.687, 839287.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  836447.789 ± 2840.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1282373.965 ops/s
# Warmup Iteration   2: 1494563.597 ops/s
# Warmup Iteration   3: 2150327.076 ops/s
# Warmup Iteration   4: 2103650.900 ops/s
# Warmup Iteration   5: 2158136.436 ops/s
# Warmup Iteration   6: 2138112.426 ops/s
# Warmup Iteration   7: 2154736.550 ops/s
# Warmup Iteration   8: 2157827.267 ops/s
# Warmup Iteration   9: 1686938.529 ops/s
# Warmup Iteration  10: 2156755.889 ops/s
# Warmup Iteration  11: 2158662.867 ops/s
# Warmup Iteration  12: 2146987.193 ops/s
# Warmup Iteration  13: 2159919.292 ops/s
# Warmup Iteration  14: 2148248.558 ops/s
# Warmup Iteration  15: 2154060.881 ops/s
# Warmup Iteration  16: 2156600.340 ops/s
# Warmup Iteration  17: 2123591.533 ops/s
# Warmup Iteration  18: 2154753.637 ops/s
# Warmup Iteration  19: 2160478.939 ops/s
# Warmup Iteration  20: 2157867.481 ops/s
# Warmup Iteration  21: 2158672.283 ops/s
# Warmup Iteration  22: 2163926.534 ops/s
# Warmup Iteration  23: 2161799.953 ops/s
# Warmup Iteration  24: 2123526.521 ops/s
# Warmup Iteration  25: 2159452.680 ops/s
# Warmup Iteration  26: 2157787.935 ops/s
# Warmup Iteration  27: 2158955.963 ops/s
# Warmup Iteration  28: 2156548.501 ops/s
# Warmup Iteration  29: 2158139.470 ops/s
# Warmup Iteration  30: 2160496.693 ops/s
Iteration   1: 2151580.356 ops/s
Iteration   2: 2150935.706 ops/s
Iteration   3: 2157736.380 ops/s
Iteration   4: 2157156.875 ops/s
Iteration   5: 2164777.887 ops/s
Iteration   6: 2159375.378 ops/s
Iteration   7: 2162318.131 ops/s
Iteration   8: 2160802.595 ops/s
Iteration   9: 2155508.126 ops/s
Iteration  10: 2161313.400 ops/s
Iteration  11: 2156958.186 ops/s
Iteration  12: 2157048.476 ops/s
Iteration  13: 2165985.556 ops/s
Iteration  14: 2165511.159 ops/s
Iteration  15: 2157417.287 ops/s
Iteration  16: 2154168.536 ops/s
Iteration  17: 2129624.483 ops/s
Iteration  18: 2150149.187 ops/s
Iteration  19: 2159462.318 ops/s
Iteration  20: 2128056.013 ops/s
Iteration  21: 2157172.717 ops/s
Iteration  22: 2162616.320 ops/s
Iteration  23: 2155653.667 ops/s
Iteration  24: 2163636.556 ops/s
Iteration  25: 2161923.736 ops/s
Iteration  26: 2149043.588 ops/s
Iteration  27: 2127625.411 ops/s
Iteration  28: 2146872.689 ops/s
Iteration  29: 2119823.582 ops/s
Iteration  30: 2157514.601 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy":
  2153592.297 ±(99.9%) 8004.246 ops/s [Average]
  (min, avg, max) = (2119823.582, 2153592.297, 2165985.556), stdev = 11980.380
  CI (99.9%): [2145588.051, 2161596.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2153592.297 ± 8004.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2809002.957 ops/s
# Warmup Iteration   2: 2908030.783 ops/s
# Warmup Iteration   3: 3550327.410 ops/s
# Warmup Iteration   4: 3798842.299 ops/s
# Warmup Iteration   5: 3826500.623 ops/s
# Warmup Iteration   6: 3786463.161 ops/s
# Warmup Iteration   7: 3759093.567 ops/s
# Warmup Iteration   8: 3734590.764 ops/s
# Warmup Iteration   9: 3818490.341 ops/s
# Warmup Iteration  10: 3828248.308 ops/s
# Warmup Iteration  11: 3799741.694 ops/s
# Warmup Iteration  12: 3741929.872 ops/s
# Warmup Iteration  13: 3579427.637 ops/s
# Warmup Iteration  14: 3266187.007 ops/s
# Warmup Iteration  15: 3753053.760 ops/s
# Warmup Iteration  16: 3751210.195 ops/s
# Warmup Iteration  17: 3782646.664 ops/s
# Warmup Iteration  18: 3803042.421 ops/s
# Warmup Iteration  19: 3794869.979 ops/s
# Warmup Iteration  20: 3742711.142 ops/s
# Warmup Iteration  21: 3796452.971 ops/s
# Warmup Iteration  22: 3766414.253 ops/s
# Warmup Iteration  23: 3785983.268 ops/s
# Warmup Iteration  24: 3722177.166 ops/s
# Warmup Iteration  25: 3798195.163 ops/s
# Warmup Iteration  26: 3793019.259 ops/s
# Warmup Iteration  27: 3778107.270 ops/s
# Warmup Iteration  28: 3757656.433 ops/s
# Warmup Iteration  29: 3785895.517 ops/s
# Warmup Iteration  30: 3794905.404 ops/s
Iteration   1: 3785303.462 ops/s
Iteration   2: 3728777.028 ops/s
Iteration   3: 3807178.765 ops/s
Iteration   4: 3721544.710 ops/s
Iteration   5: 3774573.750 ops/s
Iteration   6: 3798838.035 ops/s
Iteration   7: 3804488.643 ops/s
Iteration   8: 3811711.528 ops/s
Iteration   9: 3797073.635 ops/s
Iteration  10: 3766580.161 ops/s
Iteration  11: 3805987.070 ops/s
Iteration  12: 3797423.018 ops/s
Iteration  13: 3786173.555 ops/s
Iteration  14: 3793663.399 ops/s
Iteration  15: 3801702.667 ops/s
Iteration  16: 3801223.370 ops/s
Iteration  17: 3800502.999 ops/s
Iteration  18: 3802706.846 ops/s
Iteration  19: 3801369.766 ops/s
Iteration  20: 3807400.736 ops/s
Iteration  21: 3803671.384 ops/s
Iteration  22: 3786578.139 ops/s
Iteration  23: 3761625.905 ops/s
Iteration  24: 3787222.779 ops/s
Iteration  25: 3803243.601 ops/s
Iteration  26: 3806583.361 ops/s
Iteration  27: 3800624.681 ops/s
Iteration  28: 3802399.469 ops/s
Iteration  29: 3794520.092 ops/s
Iteration  30: 3664849.550 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListBy_with_null":
  3786851.403 ±(99.9%) 21042.564 ops/s [Average]
  (min, avg, max) = (3664849.550, 3786851.403, 3811711.528), stdev = 31495.522
  CI (99.9%): [3765808.839, 3807893.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  3786851.403 ± 21042.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607561.906 ops/s
# Warmup Iteration   2: 635094.032 ops/s
# Warmup Iteration   3: 704139.499 ops/s
# Warmup Iteration   4: 796734.793 ops/s
# Warmup Iteration   5: 788744.122 ops/s
# Warmup Iteration   6: 795240.715 ops/s
# Warmup Iteration   7: 795070.640 ops/s
# Warmup Iteration   8: 796602.315 ops/s
# Warmup Iteration   9: 796815.560 ops/s
# Warmup Iteration  10: 794986.088 ops/s
# Warmup Iteration  11: 795825.340 ops/s
# Warmup Iteration  12: 794966.980 ops/s
# Warmup Iteration  13: 794912.503 ops/s
# Warmup Iteration  14: 796053.537 ops/s
# Warmup Iteration  15: 731814.441 ops/s
# Warmup Iteration  16: 723384.028 ops/s
# Warmup Iteration  17: 838247.942 ops/s
# Warmup Iteration  18: 831697.836 ops/s
# Warmup Iteration  19: 838961.534 ops/s
# Warmup Iteration  20: 838505.047 ops/s
# Warmup Iteration  21: 837316.720 ops/s
# Warmup Iteration  22: 838921.780 ops/s
# Warmup Iteration  23: 839933.799 ops/s
# Warmup Iteration  24: 839015.621 ops/s
# Warmup Iteration  25: 840129.692 ops/s
# Warmup Iteration  26: 839060.140 ops/s
# Warmup Iteration  27: 840374.657 ops/s
# Warmup Iteration  28: 835854.961 ops/s
# Warmup Iteration  29: 837733.593 ops/s
# Warmup Iteration  30: 835260.671 ops/s
Iteration   1: 839995.918 ops/s
Iteration   2: 838018.296 ops/s
Iteration   3: 840582.741 ops/s
Iteration   4: 835557.052 ops/s
Iteration   5: 836844.706 ops/s
Iteration   6: 837365.961 ops/s
Iteration   7: 837062.795 ops/s
Iteration   8: 839735.640 ops/s
Iteration   9: 826777.684 ops/s
Iteration  10: 841525.051 ops/s
Iteration  11: 839501.353 ops/s
Iteration  12: 834939.586 ops/s
Iteration  13: 839322.556 ops/s
Iteration  14: 828099.739 ops/s
Iteration  15: 826986.031 ops/s
Iteration  16: 841339.339 ops/s
Iteration  17: 837384.947 ops/s
Iteration  18: 839417.852 ops/s
Iteration  19: 837033.378 ops/s
Iteration  20: 837922.330 ops/s
Iteration  21: 827856.298 ops/s
Iteration  22: 836232.008 ops/s
Iteration  23: 835627.410 ops/s
Iteration  24: 836521.540 ops/s
Iteration  25: 837816.137 ops/s
Iteration  26: 825987.491 ops/s
Iteration  27: 840150.222 ops/s
Iteration  28: 839071.761 ops/s
Iteration  29: 825650.019 ops/s
Iteration  30: 840251.155 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  836019.233 ±(99.9%) 3309.589 ops/s [Average]
  (min, avg, max) = (825650.019, 836019.233, 841525.051), stdev = 4953.637
  CI (99.9%): [832709.644, 839328.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  836019.233 ± 3309.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596627.671 ops/s
# Warmup Iteration   2: 620615.036 ops/s
# Warmup Iteration   3: 716263.812 ops/s
# Warmup Iteration   4: 794004.187 ops/s
# Warmup Iteration   5: 793932.078 ops/s
# Warmup Iteration   6: 792838.200 ops/s
# Warmup Iteration   7: 792716.791 ops/s
# Warmup Iteration   8: 787687.508 ops/s
# Warmup Iteration   9: 784142.978 ops/s
# Warmup Iteration  10: 793513.005 ops/s
# Warmup Iteration  11: 781322.944 ops/s
# Warmup Iteration  12: 786102.241 ops/s
# Warmup Iteration  13: 796183.737 ops/s
# Warmup Iteration  14: 744183.322 ops/s
# Warmup Iteration  15: 703430.098 ops/s
# Warmup Iteration  16: 794249.205 ops/s
# Warmup Iteration  17: 835995.771 ops/s
# Warmup Iteration  18: 836582.357 ops/s
# Warmup Iteration  19: 836636.658 ops/s
# Warmup Iteration  20: 835249.696 ops/s
# Warmup Iteration  21: 833937.443 ops/s
# Warmup Iteration  22: 835368.477 ops/s
# Warmup Iteration  23: 832302.867 ops/s
# Warmup Iteration  24: 833247.725 ops/s
# Warmup Iteration  25: 829838.149 ops/s
# Warmup Iteration  26: 834148.434 ops/s
# Warmup Iteration  27: 831954.473 ops/s
# Warmup Iteration  28: 835877.268 ops/s
# Warmup Iteration  29: 834196.595 ops/s
# Warmup Iteration  30: 825218.131 ops/s
Iteration   1: 833350.510 ops/s
Iteration   2: 824610.486 ops/s
Iteration   3: 835086.905 ops/s
Iteration   4: 837601.443 ops/s
Iteration   5: 835212.230 ops/s
Iteration   6: 835460.025 ops/s
Iteration   7: 834370.501 ops/s
Iteration   8: 819186.225 ops/s
Iteration   9: 834102.774 ops/s
Iteration  10: 814629.615 ops/s
Iteration  11: 836448.003 ops/s
Iteration  12: 833692.655 ops/s
Iteration  13: 835259.422 ops/s
Iteration  14: 830198.826 ops/s
Iteration  15: 815843.080 ops/s
Iteration  16: 835207.726 ops/s
Iteration  17: 821502.082 ops/s
Iteration  18: 830289.626 ops/s
Iteration  19: 831771.571 ops/s
Iteration  20: 837307.876 ops/s
Iteration  21: 835532.746 ops/s
Iteration  22: 823456.088 ops/s
Iteration  23: 830314.172 ops/s
Iteration  24: 835987.299 ops/s
Iteration  25: 825897.352 ops/s
Iteration  26: 837026.730 ops/s
Iteration  27: 833758.413 ops/s
Iteration  28: 835315.216 ops/s
Iteration  29: 837127.292 ops/s
Iteration  30: 835818.463 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  831378.845 ±(99.9%) 4394.976 ops/s [Average]
  (min, avg, max) = (814629.615, 831378.845, 837601.443), stdev = 6578.193
  CI (99.9%): [826983.870, 835773.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  831378.845 ± 4394.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3047202.580 ops/s
# Warmup Iteration   2: 6216605.402 ops/s
# Warmup Iteration   3: 5310452.320 ops/s
# Warmup Iteration   4: 6334643.522 ops/s
# Warmup Iteration   5: 6340587.734 ops/s
# Warmup Iteration   6: 6361965.733 ops/s
# Warmup Iteration   7: 6347573.166 ops/s
# Warmup Iteration   8: 6262781.288 ops/s
# Warmup Iteration   9: 6323135.431 ops/s
# Warmup Iteration  10: 6345614.730 ops/s
# Warmup Iteration  11: 6333103.872 ops/s
# Warmup Iteration  12: 6334873.030 ops/s
# Warmup Iteration  13: 6285539.969 ops/s
# Warmup Iteration  14: 6307539.392 ops/s
# Warmup Iteration  15: 6341495.632 ops/s
# Warmup Iteration  16: 6303461.592 ops/s
# Warmup Iteration  17: 6276374.686 ops/s
# Warmup Iteration  18: 6349542.181 ops/s
# Warmup Iteration  19: 6342479.309 ops/s
# Warmup Iteration  20: 6297918.740 ops/s
# Warmup Iteration  21: 6349326.690 ops/s
# Warmup Iteration  22: 6284640.057 ops/s
# Warmup Iteration  23: 6355883.573 ops/s
# Warmup Iteration  24: 6352452.786 ops/s
# Warmup Iteration  25: 6348621.376 ops/s
# Warmup Iteration  26: 6340366.230 ops/s
# Warmup Iteration  27: 6355018.762 ops/s
# Warmup Iteration  28: 6275577.629 ops/s
# Warmup Iteration  29: 6345273.024 ops/s
# Warmup Iteration  30: 6309585.459 ops/s
Iteration   1: 6349435.690 ops/s
Iteration   2: 6324255.149 ops/s
Iteration   3: 6329077.935 ops/s
Iteration   4: 6338007.809 ops/s
Iteration   5: 6311123.445 ops/s
Iteration   6: 6346397.266 ops/s
Iteration   7: 6246783.326 ops/s
Iteration   8: 6284572.275 ops/s
Iteration   9: 6359651.006 ops/s
Iteration  10: 6294531.853 ops/s
Iteration  11: 6359543.607 ops/s
Iteration  12: 6347812.318 ops/s
Iteration  13: 6362248.153 ops/s
Iteration  14: 6355058.457 ops/s
Iteration  15: 6326077.905 ops/s
Iteration  16: 6339421.504 ops/s
Iteration  17: 6355257.115 ops/s
Iteration  18: 6318033.370 ops/s
Iteration  19: 6328854.855 ops/s
Iteration  20: 6316164.704 ops/s
Iteration  21: 6316853.752 ops/s
Iteration  22: 6336074.203 ops/s
Iteration  23: 6326785.585 ops/s
Iteration  24: 6245760.703 ops/s
Iteration  25: 6361130.994 ops/s
Iteration  26: 6382708.439 ops/s
Iteration  27: 6301771.883 ops/s
Iteration  28: 6345232.927 ops/s
Iteration  29: 6345502.484 ops/s
Iteration  30: 6257357.188 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_natural_ordering":
  6327049.530 ±(99.9%) 22711.569 ops/s [Average]
  (min, avg, max) = (6245760.703, 6327049.530, 6382708.439), stdev = 33993.609
  CI (99.9%): [6304337.962, 6349761.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  6327049.530 ± 22711.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5577497.654 ops/s
# Warmup Iteration   2: 12248847.140 ops/s
# Warmup Iteration   3: 12255090.103 ops/s
# Warmup Iteration   4: 11171172.422 ops/s
# Warmup Iteration   5: 10851369.346 ops/s
# Warmup Iteration   6: 12286966.031 ops/s
# Warmup Iteration   7: 12261613.154 ops/s
# Warmup Iteration   8: 12182783.704 ops/s
# Warmup Iteration   9: 12280752.656 ops/s
# Warmup Iteration  10: 12178782.984 ops/s
# Warmup Iteration  11: 12290063.918 ops/s
# Warmup Iteration  12: 12264234.688 ops/s
# Warmup Iteration  13: 12279460.221 ops/s
# Warmup Iteration  14: 12278729.428 ops/s
# Warmup Iteration  15: 12284386.250 ops/s
# Warmup Iteration  16: 12292059.372 ops/s
# Warmup Iteration  17: 12250992.801 ops/s
# Warmup Iteration  18: 12271043.992 ops/s
# Warmup Iteration  19: 12278263.717 ops/s
# Warmup Iteration  20: 12277778.055 ops/s
# Warmup Iteration  21: 12258618.009 ops/s
# Warmup Iteration  22: 12232594.917 ops/s
# Warmup Iteration  23: 12228874.947 ops/s
# Warmup Iteration  24: 12280138.859 ops/s
# Warmup Iteration  25: 12148823.445 ops/s
# Warmup Iteration  26: 12239595.959 ops/s
# Warmup Iteration  27: 12264939.714 ops/s
# Warmup Iteration  28: 12252686.375 ops/s
# Warmup Iteration  29: 12264534.182 ops/s
# Warmup Iteration  30: 12278477.911 ops/s
Iteration   1: 12254565.383 ops/s
Iteration   2: 12060499.668 ops/s
Iteration   3: 12274052.495 ops/s
Iteration   4: 12286554.612 ops/s
Iteration   5: 12283937.499 ops/s
Iteration   6: 12128955.577 ops/s
Iteration   7: 12264949.365 ops/s
Iteration   8: 12294584.276 ops/s
Iteration   9: 12045891.263 ops/s
Iteration  10: 12250236.360 ops/s
Iteration  11: 12281375.296 ops/s
Iteration  12: 12050671.015 ops/s
Iteration  13: 12300499.183 ops/s
Iteration  14: 12302290.324 ops/s
Iteration  15: 12272606.570 ops/s
Iteration  16: 12268747.399 ops/s
Iteration  17: 12303151.068 ops/s
Iteration  18: 12293509.957 ops/s
Iteration  19: 12250460.372 ops/s
Iteration  20: 12282323.255 ops/s
Iteration  21: 12238194.050 ops/s
Iteration  22: 12147391.171 ops/s
Iteration  23: 12335628.524 ops/s
Iteration  24: 12283677.781 ops/s
Iteration  25: 12261079.064 ops/s
Iteration  26: 12245824.906 ops/s
Iteration  27: 12100067.592 ops/s
Iteration  28: 12289146.522 ops/s
Iteration  29: 12261665.818 ops/s
Iteration  30: 12296056.997 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_comparator":
  12240286.445 ±(99.9%) 54484.543 ops/s [Average]
  (min, avg, max) = (12045891.263, 12240286.445, 12335628.524), stdev = 81549.906
  CI (99.9%): [12185801.902, 12294770.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  12240286.445 ± 54484.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566631.255 ops/s
# Warmup Iteration   2: 581999.418 ops/s
# Warmup Iteration   3: 621685.109 ops/s
# Warmup Iteration   4: 718705.248 ops/s
# Warmup Iteration   5: 712263.008 ops/s
# Warmup Iteration   6: 716080.504 ops/s
# Warmup Iteration   7: 718275.709 ops/s
# Warmup Iteration   8: 715754.040 ops/s
# Warmup Iteration   9: 708687.302 ops/s
# Warmup Iteration  10: 717016.723 ops/s
# Warmup Iteration  11: 712972.963 ops/s
# Warmup Iteration  12: 711755.989 ops/s
# Warmup Iteration  13: 713820.820 ops/s
# Warmup Iteration  14: 718466.891 ops/s
# Warmup Iteration  15: 714298.551 ops/s
# Warmup Iteration  16: 714244.881 ops/s
# Warmup Iteration  17: 624197.814 ops/s
# Warmup Iteration  18: 745819.663 ops/s
# Warmup Iteration  19: 753593.980 ops/s
# Warmup Iteration  20: 752135.510 ops/s
# Warmup Iteration  21: 754464.449 ops/s
# Warmup Iteration  22: 747570.133 ops/s
# Warmup Iteration  23: 745773.513 ops/s
# Warmup Iteration  24: 752777.080 ops/s
# Warmup Iteration  25: 752174.153 ops/s
# Warmup Iteration  26: 751978.597 ops/s
# Warmup Iteration  27: 752558.005 ops/s
# Warmup Iteration  28: 753084.879 ops/s
# Warmup Iteration  29: 748219.856 ops/s
# Warmup Iteration  30: 752554.969 ops/s
Iteration   1: 751187.160 ops/s
Iteration   2: 752921.922 ops/s
Iteration   3: 739164.917 ops/s
Iteration   4: 754740.155 ops/s
Iteration   5: 750245.740 ops/s
Iteration   6: 750411.899 ops/s
Iteration   7: 755120.024 ops/s
Iteration   8: 756586.658 ops/s
Iteration   9: 746162.932 ops/s
Iteration  10: 752931.839 ops/s
Iteration  11: 752742.954 ops/s
Iteration  12: 756400.558 ops/s
Iteration  13: 752994.611 ops/s
Iteration  14: 753146.682 ops/s
Iteration  15: 754378.678 ops/s
Iteration  16: 754460.563 ops/s
Iteration  17: 753635.061 ops/s
Iteration  18: 755031.994 ops/s
Iteration  19: 742223.793 ops/s
Iteration  20: 738696.263 ops/s
Iteration  21: 752994.067 ops/s
Iteration  22: 753369.346 ops/s
Iteration  23: 752115.195 ops/s
Iteration  24: 754100.608 ops/s
Iteration  25: 748291.999 ops/s
Iteration  26: 750907.703 ops/s
Iteration  27: 753791.988 ops/s
Iteration  28: 751399.367 ops/s
Iteration  29: 752448.012 ops/s
Iteration  30: 753714.669 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedList_with_null":
  751543.912 ±(99.9%) 3003.657 ops/s [Average]
  (min, avg, max) = (738696.263, 751543.912, 756586.658), stdev = 4495.733
  CI (99.9%): [748540.254, 754547.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  751543.912 ± 3003.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634689.795 ops/s
# Warmup Iteration   2: 1382560.372 ops/s
# Warmup Iteration   3: 1448520.284 ops/s
# Warmup Iteration   4: 1436803.815 ops/s
# Warmup Iteration   5: 1216277.758 ops/s
# Warmup Iteration   6: 1457114.293 ops/s
# Warmup Iteration   7: 1449706.960 ops/s
# Warmup Iteration   8: 1465635.824 ops/s
# Warmup Iteration   9: 1449713.129 ops/s
# Warmup Iteration  10: 1452873.326 ops/s
# Warmup Iteration  11: 1457021.218 ops/s
# Warmup Iteration  12: 1456599.753 ops/s
# Warmup Iteration  13: 1452545.844 ops/s
# Warmup Iteration  14: 1464743.268 ops/s
# Warmup Iteration  15: 1453039.187 ops/s
# Warmup Iteration  16: 1461293.452 ops/s
# Warmup Iteration  17: 1449722.236 ops/s
# Warmup Iteration  18: 1461457.228 ops/s
# Warmup Iteration  19: 1454690.140 ops/s
# Warmup Iteration  20: 1427717.376 ops/s
# Warmup Iteration  21: 1449052.752 ops/s
# Warmup Iteration  22: 1445999.064 ops/s
# Warmup Iteration  23: 1454790.879 ops/s
# Warmup Iteration  24: 1459777.468 ops/s
# Warmup Iteration  25: 1453499.839 ops/s
# Warmup Iteration  26: 1450344.707 ops/s
# Warmup Iteration  27: 1443285.323 ops/s
# Warmup Iteration  28: 1457019.302 ops/s
# Warmup Iteration  29: 1461854.675 ops/s
# Warmup Iteration  30: 1453396.567 ops/s
Iteration   1: 1454956.239 ops/s
Iteration   2: 1456382.402 ops/s
Iteration   3: 1464517.875 ops/s
Iteration   4: 1453486.844 ops/s
Iteration   5: 1460681.618 ops/s
Iteration   6: 1459160.851 ops/s
Iteration   7: 1463461.740 ops/s
Iteration   8: 1455241.403 ops/s
Iteration   9: 1460148.695 ops/s
Iteration  10: 1460801.977 ops/s
Iteration  11: 1465686.603 ops/s
Iteration  12: 1458871.217 ops/s
Iteration  13: 1451856.452 ops/s
Iteration  14: 1425322.627 ops/s
Iteration  15: 1463345.379 ops/s
Iteration  16: 1454037.426 ops/s
Iteration  17: 1450668.890 ops/s
Iteration  18: 1461668.810 ops/s
Iteration  19: 1462170.609 ops/s
Iteration  20: 1436903.613 ops/s
Iteration  21: 1457025.840 ops/s
Iteration  22: 1463665.324 ops/s
Iteration  23: 1453512.838 ops/s
Iteration  24: 1429510.956 ops/s
Iteration  25: 1430784.054 ops/s
Iteration  26: 1456160.254 ops/s
Iteration  27: 1464527.485 ops/s
Iteration  28: 1455330.320 ops/s
Iteration  29: 1455884.127 ops/s
Iteration  30: 1455882.780 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap":
  1454721.842 ±(99.9%) 7037.596 ops/s [Average]
  (min, avg, max) = (1425322.627, 1454721.842, 1465686.603), stdev = 10533.544
  CI (99.9%): [1447684.245, 1461759.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedMap  thrpt   30  1454721.842 ± 7037.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526776.550 ops/s
# Warmup Iteration   2: 908263.143 ops/s
# Warmup Iteration   3: 1051279.453 ops/s
# Warmup Iteration   4: 1043336.859 ops/s
# Warmup Iteration   5: 1048902.739 ops/s
# Warmup Iteration   6: 863199.073 ops/s
# Warmup Iteration   7: 1057997.826 ops/s
# Warmup Iteration   8: 1058955.212 ops/s
# Warmup Iteration   9: 1061402.216 ops/s
# Warmup Iteration  10: 1055631.072 ops/s
# Warmup Iteration  11: 1063031.428 ops/s
# Warmup Iteration  12: 1052036.509 ops/s
# Warmup Iteration  13: 1051418.577 ops/s
# Warmup Iteration  14: 1057097.230 ops/s
# Warmup Iteration  15: 1057041.592 ops/s
# Warmup Iteration  16: 1058655.965 ops/s
# Warmup Iteration  17: 1055725.727 ops/s
# Warmup Iteration  18: 1046761.250 ops/s
# Warmup Iteration  19: 1058151.611 ops/s
# Warmup Iteration  20: 1048658.972 ops/s
# Warmup Iteration  21: 1059311.934 ops/s
# Warmup Iteration  22: 1049893.637 ops/s
# Warmup Iteration  23: 1060886.992 ops/s
# Warmup Iteration  24: 1056827.958 ops/s
# Warmup Iteration  25: 1058254.264 ops/s
# Warmup Iteration  26: 1059218.147 ops/s
# Warmup Iteration  27: 1055196.716 ops/s
# Warmup Iteration  28: 1057060.254 ops/s
# Warmup Iteration  29: 1056531.937 ops/s
# Warmup Iteration  30: 1059317.770 ops/s
Iteration   1: 1061226.376 ops/s
Iteration   2: 1057767.986 ops/s
Iteration   3: 1058399.363 ops/s
Iteration   4: 1040685.496 ops/s
Iteration   5: 1061762.672 ops/s
Iteration   6: 1057390.611 ops/s
Iteration   7: 1043678.817 ops/s
Iteration   8: 1054259.561 ops/s
Iteration   9: 1059690.624 ops/s
Iteration  10: 1063742.182 ops/s
Iteration  11: 1061621.232 ops/s
Iteration  12: 1048334.967 ops/s
Iteration  13: 1060656.256 ops/s
Iteration  14: 1059745.330 ops/s
Iteration  15: 1060778.658 ops/s
Iteration  16: 1059617.125 ops/s
Iteration  17: 1045852.217 ops/s
Iteration  18: 1041690.482 ops/s
Iteration  19: 1061685.674 ops/s
Iteration  20: 1062843.486 ops/s
Iteration  21: 1058837.029 ops/s
Iteration  22: 1012648.394 ops/s
Iteration  23: 1050809.145 ops/s
Iteration  24: 1044394.552 ops/s
Iteration  25: 1055680.389 ops/s
Iteration  26: 1042137.220 ops/s
Iteration  27: 1060371.391 ops/s
Iteration  28: 1056642.502 ops/s
Iteration  29: 1056571.976 ops/s
Iteration  30: 1044987.136 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMapBy":
  1053483.628 ±(99.9%) 7100.668 ops/s [Average]
  (min, avg, max) = (1012648.394, 1053483.628, 1063742.182), stdev = 10627.947
  CI (99.9%): [1046382.960, 1060584.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1053483.628 ± 7100.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628725.421 ops/s
# Warmup Iteration   2: 1322875.725 ops/s
# Warmup Iteration   3: 1441648.938 ops/s
# Warmup Iteration   4: 1448312.771 ops/s
# Warmup Iteration   5: 1203295.146 ops/s
# Warmup Iteration   6: 1430972.152 ops/s
# Warmup Iteration   7: 1443168.845 ops/s
# Warmup Iteration   8: 1451569.190 ops/s
# Warmup Iteration   9: 1443995.406 ops/s
# Warmup Iteration  10: 1440824.092 ops/s
# Warmup Iteration  11: 1450102.496 ops/s
# Warmup Iteration  12: 1453685.976 ops/s
# Warmup Iteration  13: 1424208.983 ops/s
# Warmup Iteration  14: 1453550.135 ops/s
# Warmup Iteration  15: 1449471.158 ops/s
# Warmup Iteration  16: 1443055.610 ops/s
# Warmup Iteration  17: 1450235.208 ops/s
# Warmup Iteration  18: 1454162.540 ops/s
# Warmup Iteration  19: 1450009.167 ops/s
# Warmup Iteration  20: 1445242.020 ops/s
# Warmup Iteration  21: 1435115.283 ops/s
# Warmup Iteration  22: 1448320.625 ops/s
# Warmup Iteration  23: 1435381.411 ops/s
# Warmup Iteration  24: 1451081.660 ops/s
# Warmup Iteration  25: 1423658.346 ops/s
# Warmup Iteration  26: 1437829.182 ops/s
# Warmup Iteration  27: 1444795.214 ops/s
# Warmup Iteration  28: 1437586.141 ops/s
# Warmup Iteration  29: 1438157.826 ops/s
# Warmup Iteration  30: 1443086.594 ops/s
Iteration   1: 1441728.906 ops/s
Iteration   2: 1432166.750 ops/s
Iteration   3: 1412303.217 ops/s
Iteration   4: 1443982.383 ops/s
Iteration   5: 1446869.879 ops/s
Iteration   6: 1424507.327 ops/s
Iteration   7: 1441643.945 ops/s
Iteration   8: 1446364.373 ops/s
Iteration   9: 1440077.943 ops/s
Iteration  10: 1421050.089 ops/s
Iteration  11: 1447611.463 ops/s
Iteration  12: 1442489.046 ops/s
Iteration  13: 1418058.910 ops/s
Iteration  14: 1421160.707 ops/s
Iteration  15: 1418554.863 ops/s
Iteration  16: 1446197.532 ops/s
Iteration  17: 1418918.054 ops/s
Iteration  18: 1398915.211 ops/s
Iteration  19: 1446470.991 ops/s
Iteration  20: 1451174.437 ops/s
Iteration  21: 1441721.331 ops/s
Iteration  22: 1445584.811 ops/s
Iteration  23: 1425779.112 ops/s
Iteration  24: 1446995.563 ops/s
Iteration  25: 1440548.865 ops/s
Iteration  26: 1449830.290 ops/s
Iteration  27: 1451022.638 ops/s
Iteration  28: 1443864.065 ops/s
Iteration  29: 1449958.357 ops/s
Iteration  30: 1429268.971 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1436160.668 ±(99.9%) 9222.299 ops/s [Average]
  (min, avg, max) = (1398915.211, 1436160.668, 1451174.437), stdev = 13803.503
  CI (99.9%): [1426938.369, 1445382.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1436160.668 ± 9222.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651306.724 ops/s
# Warmup Iteration   2: 1184209.027 ops/s
# Warmup Iteration   3: 1324323.902 ops/s
# Warmup Iteration   4: 1345399.010 ops/s
# Warmup Iteration   5: 1328479.749 ops/s
# Warmup Iteration   6: 1102990.247 ops/s
# Warmup Iteration   7: 1347407.947 ops/s
# Warmup Iteration   8: 1344803.839 ops/s
# Warmup Iteration   9: 1343007.650 ops/s
# Warmup Iteration  10: 1343629.674 ops/s
# Warmup Iteration  11: 1341866.247 ops/s
# Warmup Iteration  12: 1346826.391 ops/s
# Warmup Iteration  13: 1334817.448 ops/s
# Warmup Iteration  14: 1336902.987 ops/s
# Warmup Iteration  15: 1347377.683 ops/s
# Warmup Iteration  16: 1346284.701 ops/s
# Warmup Iteration  17: 1345904.678 ops/s
# Warmup Iteration  18: 1332678.045 ops/s
# Warmup Iteration  19: 1335694.753 ops/s
# Warmup Iteration  20: 1346285.574 ops/s
# Warmup Iteration  21: 1347583.329 ops/s
# Warmup Iteration  22: 1345197.307 ops/s
# Warmup Iteration  23: 1334543.652 ops/s
# Warmup Iteration  24: 1335691.375 ops/s
# Warmup Iteration  25: 1330112.360 ops/s
# Warmup Iteration  26: 1342074.064 ops/s
# Warmup Iteration  27: 1341175.015 ops/s
# Warmup Iteration  28: 1343338.945 ops/s
# Warmup Iteration  29: 1337752.836 ops/s
# Warmup Iteration  30: 1342340.229 ops/s
Iteration   1: 1347153.311 ops/s
Iteration   2: 1344168.796 ops/s
Iteration   3: 1343850.819 ops/s
Iteration   4: 1345062.968 ops/s
Iteration   5: 1343133.911 ops/s
Iteration   6: 1336144.312 ops/s
Iteration   7: 1344434.549 ops/s
Iteration   8: 1324272.264 ops/s
Iteration   9: 1342931.253 ops/s
Iteration  10: 1343870.554 ops/s
Iteration  11: 1343260.792 ops/s
Iteration  12: 1343621.885 ops/s
Iteration  13: 1346211.924 ops/s
Iteration  14: 1342075.454 ops/s
Iteration  15: 1347194.063 ops/s
Iteration  16: 1334688.897 ops/s
Iteration  17: 1341553.669 ops/s
Iteration  18: 1338579.405 ops/s
Iteration  19: 1345843.262 ops/s
Iteration  20: 1322329.293 ops/s
Iteration  21: 1328205.300 ops/s
Iteration  22: 1346870.393 ops/s
Iteration  23: 1343046.352 ops/s
Iteration  24: 1336541.989 ops/s
Iteration  25: 1347585.667 ops/s
Iteration  26: 1334581.477 ops/s
Iteration  27: 1346411.885 ops/s
Iteration  28: 1345591.591 ops/s
Iteration  29: 1341854.179 ops/s
Iteration  30: 1342285.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSetBy":
  1341111.847 ±(99.9%) 4404.145 ops/s [Average]
  (min, avg, max) = (1322329.293, 1341111.847, 1347585.667), stdev = 6591.917
  CI (99.9%): [1336707.702, 1345515.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1341111.847 ± 4404.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1299203.376 ops/s
# Warmup Iteration   2: 3033554.299 ops/s
# Warmup Iteration   3: 2865356.066 ops/s
# Warmup Iteration   4: 2732098.901 ops/s
# Warmup Iteration   5: 3057363.406 ops/s
# Warmup Iteration   6: 3059107.420 ops/s
# Warmup Iteration   7: 3054790.145 ops/s
# Warmup Iteration   8: 3063377.555 ops/s
# Warmup Iteration   9: 3048346.220 ops/s
# Warmup Iteration  10: 3026284.487 ops/s
# Warmup Iteration  11: 2999702.482 ops/s
# Warmup Iteration  12: 3021153.686 ops/s
# Warmup Iteration  13: 3051337.674 ops/s
# Warmup Iteration  14: 3035768.502 ops/s
# Warmup Iteration  15: 2963210.890 ops/s
# Warmup Iteration  16: 3050325.385 ops/s
# Warmup Iteration  17: 3058218.577 ops/s
# Warmup Iteration  18: 3057327.752 ops/s
# Warmup Iteration  19: 2987323.720 ops/s
# Warmup Iteration  20: 3043824.834 ops/s
# Warmup Iteration  21: 3047442.620 ops/s
# Warmup Iteration  22: 3057190.023 ops/s
# Warmup Iteration  23: 3026857.468 ops/s
# Warmup Iteration  24: 3053271.305 ops/s
# Warmup Iteration  25: 3003294.120 ops/s
# Warmup Iteration  26: 3048056.733 ops/s
# Warmup Iteration  27: 3032278.007 ops/s
# Warmup Iteration  28: 2982861.172 ops/s
# Warmup Iteration  29: 3016909.084 ops/s
# Warmup Iteration  30: 3052278.963 ops/s
Iteration   1: 3065198.202 ops/s
Iteration   2: 3048045.877 ops/s
Iteration   3: 3042749.496 ops/s
Iteration   4: 3061109.991 ops/s
Iteration   5: 3059312.520 ops/s
Iteration   6: 3058889.432 ops/s
Iteration   7: 3011028.648 ops/s
Iteration   8: 3059917.646 ops/s
Iteration   9: 3058178.614 ops/s
Iteration  10: 3042675.118 ops/s
Iteration  11: 3053803.508 ops/s
Iteration  12: 3058635.201 ops/s
Iteration  13: 3047775.291 ops/s
Iteration  14: 3005878.705 ops/s
Iteration  15: 3056589.342 ops/s
Iteration  16: 3056102.929 ops/s
Iteration  17: 3046664.595 ops/s
Iteration  18: 3056553.075 ops/s
Iteration  19: 3054295.500 ops/s
Iteration  20: 3036275.301 ops/s
Iteration  21: 3055223.004 ops/s
Iteration  22: 3064028.439 ops/s
Iteration  23: 3015543.583 ops/s
Iteration  24: 3061455.032 ops/s
Iteration  25: 3048938.411 ops/s
Iteration  26: 3044898.477 ops/s
Iteration  27: 3066970.291 ops/s
Iteration  28: 3059752.383 ops/s
Iteration  29: 3052580.216 ops/s
Iteration  30: 3056734.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  3050193.430 ±(99.9%) 10155.284 ops/s [Average]
  (min, avg, max) = (3005878.705, 3050193.430, 3066970.291), stdev = 15199.952
  CI (99.9%): [3040038.146, 3060348.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  3050193.430 ± 10155.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1203310.002 ops/s
# Warmup Iteration   2: 2852785.222 ops/s
# Warmup Iteration   3: 2865546.946 ops/s
# Warmup Iteration   4: 2390488.322 ops/s
# Warmup Iteration   5: 2846254.769 ops/s
# Warmup Iteration   6: 2842801.875 ops/s
# Warmup Iteration   7: 2867944.559 ops/s
# Warmup Iteration   8: 2870112.349 ops/s
# Warmup Iteration   9: 2857747.738 ops/s
# Warmup Iteration  10: 2843290.527 ops/s
# Warmup Iteration  11: 2862618.649 ops/s
# Warmup Iteration  12: 2846723.193 ops/s
# Warmup Iteration  13: 2843721.673 ops/s
# Warmup Iteration  14: 2863424.767 ops/s
# Warmup Iteration  15: 2864571.520 ops/s
# Warmup Iteration  16: 2869895.767 ops/s
# Warmup Iteration  17: 2867287.770 ops/s
# Warmup Iteration  18: 2827712.096 ops/s
# Warmup Iteration  19: 2873897.837 ops/s
# Warmup Iteration  20: 2872408.330 ops/s
# Warmup Iteration  21: 2858550.884 ops/s
# Warmup Iteration  22: 2855467.071 ops/s
# Warmup Iteration  23: 2863178.510 ops/s
# Warmup Iteration  24: 2836287.986 ops/s
# Warmup Iteration  25: 2874810.075 ops/s
# Warmup Iteration  26: 2864760.023 ops/s
# Warmup Iteration  27: 2873396.719 ops/s
# Warmup Iteration  28: 2851746.803 ops/s
# Warmup Iteration  29: 2874906.589 ops/s
# Warmup Iteration  30: 2876339.055 ops/s
Iteration   1: 2869130.455 ops/s
Iteration   2: 2868669.591 ops/s
Iteration   3: 2871305.891 ops/s
Iteration   4: 2855315.106 ops/s
Iteration   5: 2823782.914 ops/s
Iteration   6: 2874735.605 ops/s
Iteration   7: 2870766.234 ops/s
Iteration   8: 2868422.307 ops/s
Iteration   9: 2878278.082 ops/s
Iteration  10: 2871554.460 ops/s
Iteration  11: 2878734.679 ops/s
Iteration  12: 2855963.561 ops/s
Iteration  13: 2867432.891 ops/s
Iteration  14: 2868165.087 ops/s
Iteration  15: 2873031.608 ops/s
Iteration  16: 2870491.950 ops/s
Iteration  17: 2844514.541 ops/s
Iteration  18: 2824647.664 ops/s
Iteration  19: 2863587.598 ops/s
Iteration  20: 2871789.679 ops/s
Iteration  21: 2853825.382 ops/s
Iteration  22: 2853347.682 ops/s
Iteration  23: 2870180.992 ops/s
Iteration  24: 2864861.179 ops/s
Iteration  25: 2873862.463 ops/s
Iteration  26: 2760526.807 ops/s
Iteration  27: 2852453.537 ops/s
Iteration  28: 2860503.971 ops/s
Iteration  29: 2831097.104 ops/s
Iteration  30: 2819756.429 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2857024.515 ±(99.9%) 16386.683 ops/s [Average]
  (min, avg, max) = (2760526.807, 2857024.515, 2878734.679), stdev = 24526.817
  CI (99.9%): [2840637.832, 2873411.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2857024.515 ± 16386.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8427901.025 ops/s
# Warmup Iteration   2: 18102288.290 ops/s
# Warmup Iteration   3: 14970795.677 ops/s
# Warmup Iteration   4: 18012844.633 ops/s
# Warmup Iteration   5: 17767978.744 ops/s
# Warmup Iteration   6: 17970305.421 ops/s
# Warmup Iteration   7: 17972895.051 ops/s
# Warmup Iteration   8: 17937728.893 ops/s
# Warmup Iteration   9: 17849342.515 ops/s
# Warmup Iteration  10: 17972148.873 ops/s
# Warmup Iteration  11: 17908057.633 ops/s
# Warmup Iteration  12: 17908746.727 ops/s
# Warmup Iteration  13: 17985578.888 ops/s
# Warmup Iteration  14: 17930974.022 ops/s
# Warmup Iteration  15: 17964080.064 ops/s
# Warmup Iteration  16: 17887470.351 ops/s
# Warmup Iteration  17: 17920715.191 ops/s
# Warmup Iteration  18: 17867034.291 ops/s
# Warmup Iteration  19: 17930217.330 ops/s
# Warmup Iteration  20: 17918223.983 ops/s
# Warmup Iteration  21: 17858007.812 ops/s
# Warmup Iteration  22: 17979983.646 ops/s
# Warmup Iteration  23: 17824557.228 ops/s
# Warmup Iteration  24: 18035976.454 ops/s
# Warmup Iteration  25: 18011719.031 ops/s
# Warmup Iteration  26: 17975949.472 ops/s
# Warmup Iteration  27: 17920782.546 ops/s
# Warmup Iteration  28: 17948441.966 ops/s
# Warmup Iteration  29: 18015376.431 ops/s
# Warmup Iteration  30: 17969427.133 ops/s
Iteration   1: 17241114.279 ops/s
Iteration   2: 18078463.920 ops/s
Iteration   3: 17733483.687 ops/s
Iteration   4: 17989393.667 ops/s
Iteration   5: 18026309.717 ops/s
Iteration   6: 17894148.443 ops/s
Iteration   7: 17874445.615 ops/s
Iteration   8: 17991245.987 ops/s
Iteration   9: 17993755.019 ops/s
Iteration  10: 17950747.418 ops/s
Iteration  11: 17969803.799 ops/s
Iteration  12: 18008553.994 ops/s
Iteration  13: 18074440.840 ops/s
Iteration  14: 18010481.191 ops/s
Iteration  15: 17966654.666 ops/s
Iteration  16: 18031963.348 ops/s
Iteration  17: 17929022.099 ops/s
Iteration  18: 17712183.964 ops/s
Iteration  19: 17923857.955 ops/s
Iteration  20: 17653059.512 ops/s
Iteration  21: 18050196.726 ops/s
Iteration  22: 17845470.778 ops/s
Iteration  23: 17989703.403 ops/s
Iteration  24: 17866771.817 ops/s
Iteration  25: 17715451.971 ops/s
Iteration  26: 17995466.545 ops/s
Iteration  27: 18016970.371 ops/s
Iteration  28: 18001580.222 ops/s
Iteration  29: 17933882.939 ops/s
Iteration  30: 17727197.979 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStack":
  17906527.396 ±(99.9%) 114277.191 ops/s [Average]
  (min, avg, max) = (17241114.279, 17906527.396, 18078463.920), stdev = 171044.733
  CI (99.9%): [17792250.205, 18020804.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_toStack  thrpt   30  17906527.396 ± 114277.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStringRecursion$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStringRecursion

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2010583.088 ops/s
# Warmup Iteration   2: 4516680.714 ops/s
# Warmup Iteration   3: 4516941.597 ops/s
# Warmup Iteration   4: 3740064.698 ops/s
# Warmup Iteration   5: 4508750.618 ops/s
# Warmup Iteration   6: 4527792.427 ops/s
# Warmup Iteration   7: 4512553.094 ops/s
# Warmup Iteration   8: 4521169.074 ops/s
# Warmup Iteration   9: 4528957.040 ops/s
# Warmup Iteration  10: 4512794.457 ops/s
# Warmup Iteration  11: 4511672.024 ops/s
# Warmup Iteration  12: 4522533.414 ops/s
# Warmup Iteration  13: 4509332.465 ops/s
# Warmup Iteration  14: 4506361.840 ops/s
# Warmup Iteration  15: 4522562.973 ops/s
# Warmup Iteration  16: 4506146.224 ops/s
# Warmup Iteration  17: 4509403.332 ops/s
# Warmup Iteration  18: 4472035.717 ops/s
# Warmup Iteration  19: 4512446.843 ops/s
# Warmup Iteration  20: 4481739.117 ops/s
# Warmup Iteration  21: 4502509.736 ops/s
# Warmup Iteration  22: 4508727.864 ops/s
# Warmup Iteration  23: 4506772.192 ops/s
# Warmup Iteration  24: 4521883.074 ops/s
# Warmup Iteration  25: 4488131.269 ops/s
# Warmup Iteration  26: 4505454.296 ops/s
# Warmup Iteration  27: 4509891.845 ops/s
# Warmup Iteration  28: 4502883.763 ops/s
# Warmup Iteration  29: 4501578.341 ops/s
# Warmup Iteration  30: 4492502.775 ops/s
Iteration   1: 4512010.971 ops/s
Iteration   2: 4496452.604 ops/s
Iteration   3: 4510831.866 ops/s
Iteration   4: 4509408.985 ops/s
Iteration   5: 4439123.379 ops/s
Iteration   6: 4490758.755 ops/s
Iteration   7: 4511179.331 ops/s
Iteration   8: 4524000.112 ops/s
Iteration   9: 4499718.794 ops/s
Iteration  10: 4508432.614 ops/s
Iteration  11: 4490260.268 ops/s
Iteration  12: 4512001.157 ops/s
Iteration  13: 4432466.244 ops/s
Iteration  14: 4410151.384 ops/s
Iteration  15: 4516341.055 ops/s
Iteration  16: 4510333.278 ops/s
Iteration  17: 4517307.684 ops/s
Iteration  18: 4511834.840 ops/s
Iteration  19: 4449089.525 ops/s
Iteration  20: 4431414.952 ops/s
Iteration  21: 4490699.258 ops/s
Iteration  22: 4503599.595 ops/s
Iteration  23: 4512555.406 ops/s
Iteration  24: 4512215.467 ops/s
Iteration  25: 4509385.867 ops/s
Iteration  26: 4460800.976 ops/s
Iteration  27: 4503258.498 ops/s
Iteration  28: 4501054.380 ops/s
Iteration  29: 4511685.966 ops/s
Iteration  30: 4509199.190 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_toStringRecursion":
  4493252.413 ±(99.9%) 20312.631 ops/s [Average]
  (min, avg, max) = (4410151.384, 4493252.413, 4524000.112), stdev = 30402.993
  CI (99.9%): [4472939.782, 4513565.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_toStringRecursion  thrpt   30  4493252.413 ± 20312.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_unoptimizedListToImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_unoptimizedListToImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1739040.430 ops/s
# Warmup Iteration   2: 3962022.866 ops/s
# Warmup Iteration   3: 3986996.356 ops/s
# Warmup Iteration   4: 3306412.425 ops/s
# Warmup Iteration   5: 3999222.677 ops/s
# Warmup Iteration   6: 3959347.278 ops/s
# Warmup Iteration   7: 3995295.973 ops/s
# Warmup Iteration   8: 3981091.736 ops/s
# Warmup Iteration   9: 4006851.040 ops/s
# Warmup Iteration  10: 3995845.415 ops/s
# Warmup Iteration  11: 4003538.445 ops/s
# Warmup Iteration  12: 4003397.891 ops/s
# Warmup Iteration  13: 3954796.508 ops/s
# Warmup Iteration  14: 4007435.743 ops/s
# Warmup Iteration  15: 3987227.774 ops/s
# Warmup Iteration  16: 4009170.263 ops/s
# Warmup Iteration  17: 3979918.285 ops/s
# Warmup Iteration  18: 3994608.365 ops/s
# Warmup Iteration  19: 4012069.700 ops/s
# Warmup Iteration  20: 3972044.443 ops/s
# Warmup Iteration  21: 4001872.142 ops/s
# Warmup Iteration  22: 4001511.462 ops/s
# Warmup Iteration  23: 4005371.509 ops/s
# Warmup Iteration  24: 3953828.642 ops/s
# Warmup Iteration  25: 3981702.059 ops/s
# Warmup Iteration  26: 3999115.976 ops/s
# Warmup Iteration  27: 4007784.247 ops/s
# Warmup Iteration  28: 4001956.337 ops/s
# Warmup Iteration  29: 3970143.936 ops/s
# Warmup Iteration  30: 3966889.726 ops/s
Iteration   1: 3989786.759 ops/s
Iteration   2: 3985696.199 ops/s
Iteration   3: 3988369.497 ops/s
Iteration   4: 3998607.906 ops/s
Iteration   5: 4004836.618 ops/s
Iteration   6: 3998133.735 ops/s
Iteration   7: 4003602.682 ops/s
Iteration   8: 3997688.275 ops/s
Iteration   9: 3996154.480 ops/s
Iteration  10: 4008119.966 ops/s
Iteration  11: 4005916.793 ops/s
Iteration  12: 4008166.488 ops/s
Iteration  13: 3922570.903 ops/s
Iteration  14: 3936532.569 ops/s
Iteration  15: 4001460.670 ops/s
Iteration  16: 3978956.467 ops/s
Iteration  17: 4000065.174 ops/s
Iteration  18: 4014095.744 ops/s
Iteration  19: 4010198.010 ops/s
Iteration  20: 4011134.281 ops/s
Iteration  21: 4010933.403 ops/s
Iteration  22: 4007734.523 ops/s
Iteration  23: 3932781.780 ops/s
Iteration  24: 4010768.181 ops/s
Iteration  25: 3999770.108 ops/s
Iteration  26: 4015261.869 ops/s
Iteration  27: 4007498.443 ops/s
Iteration  28: 4006642.354 ops/s
Iteration  29: 4006102.937 ops/s
Iteration  30: 3951129.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_unoptimizedListToImmutable":
  3993623.878 ±(99.9%) 16608.837 ops/s [Average]
  (min, avg, max) = (3922570.903, 3993623.878, 4015261.869), stdev = 24859.327
  CI (99.9%): [3977015.041, 4010232.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_unoptimizedListToImmutable  thrpt   30  3993623.878 ± 16608.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7997815.843 ops/s
# Warmup Iteration   2: 17465721.258 ops/s
# Warmup Iteration   3: 17457817.290 ops/s
# Warmup Iteration   4: 14437220.493 ops/s
# Warmup Iteration   5: 17386466.277 ops/s
# Warmup Iteration   6: 17483245.381 ops/s
# Warmup Iteration   7: 17450096.201 ops/s
# Warmup Iteration   8: 17566540.159 ops/s
# Warmup Iteration   9: 17386280.106 ops/s
# Warmup Iteration  10: 17462276.506 ops/s
# Warmup Iteration  11: 17502505.535 ops/s
# Warmup Iteration  12: 17306835.304 ops/s
# Warmup Iteration  13: 17520201.248 ops/s
# Warmup Iteration  14: 17418992.987 ops/s
# Warmup Iteration  15: 17534129.581 ops/s
# Warmup Iteration  16: 17451769.261 ops/s
# Warmup Iteration  17: 17089372.888 ops/s
# Warmup Iteration  18: 17508090.533 ops/s
# Warmup Iteration  19: 17462926.127 ops/s
# Warmup Iteration  20: 17368556.600 ops/s
# Warmup Iteration  21: 17513324.245 ops/s
# Warmup Iteration  22: 17312553.783 ops/s
# Warmup Iteration  23: 17465575.074 ops/s
# Warmup Iteration  24: 17387331.000 ops/s
# Warmup Iteration  25: 17470808.590 ops/s
# Warmup Iteration  26: 17485722.625 ops/s
# Warmup Iteration  27: 17516285.435 ops/s
# Warmup Iteration  28: 17435028.884 ops/s
# Warmup Iteration  29: 17400386.635 ops/s
# Warmup Iteration  30: 17373457.160 ops/s
Iteration   1: 17198701.776 ops/s
Iteration   2: 17523188.999 ops/s
Iteration   3: 17516434.057 ops/s
Iteration   4: 17458350.954 ops/s
Iteration   5: 17540343.722 ops/s
Iteration   6: 17362578.063 ops/s
Iteration   7: 17193186.861 ops/s
Iteration   8: 17461491.333 ops/s
Iteration   9: 17459007.079 ops/s
Iteration  10: 17526985.333 ops/s
Iteration  11: 17478719.159 ops/s
Iteration  12: 17244273.134 ops/s
Iteration  13: 17490728.562 ops/s
Iteration  14: 17531509.447 ops/s
Iteration  15: 17463739.166 ops/s
Iteration  16: 17496120.430 ops/s
Iteration  17: 17413164.716 ops/s
Iteration  18: 17516988.357 ops/s
Iteration  19: 17504205.129 ops/s
Iteration  20: 17521997.622 ops/s
Iteration  21: 17487201.170 ops/s
Iteration  22: 17479952.686 ops/s
Iteration  23: 17518426.048 ops/s
Iteration  24: 17405904.909 ops/s
Iteration  25: 17505798.088 ops/s
Iteration  26: 17317935.787 ops/s
Iteration  27: 17330326.308 ops/s
Iteration  28: 17502295.945 ops/s
Iteration  29: 17495676.503 ops/s
Iteration  30: 17476359.873 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_with":
  17447386.374 ±(99.9%) 65380.957 ops/s [Average]
  (min, avg, max) = (17193186.861, 17447386.374, 17540343.722), stdev = 97859.145
  CI (99.9%): [17382005.417, 17512767.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_with  thrpt   30  17447386.374 ± 65380.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6415817.213 ops/s
# Warmup Iteration   2: 13528186.952 ops/s
# Warmup Iteration   3: 13545065.001 ops/s
# Warmup Iteration   4: 11946044.736 ops/s
# Warmup Iteration   5: 13891364.438 ops/s
# Warmup Iteration   6: 13724393.663 ops/s
# Warmup Iteration   7: 13908644.097 ops/s
# Warmup Iteration   8: 13915155.781 ops/s
# Warmup Iteration   9: 13908153.529 ops/s
# Warmup Iteration  10: 13918735.956 ops/s
# Warmup Iteration  11: 13923588.261 ops/s
# Warmup Iteration  12: 13947416.873 ops/s
# Warmup Iteration  13: 13882474.208 ops/s
# Warmup Iteration  14: 13872480.517 ops/s
# Warmup Iteration  15: 13946883.326 ops/s
# Warmup Iteration  16: 13914371.488 ops/s
# Warmup Iteration  17: 13845318.801 ops/s
# Warmup Iteration  18: 13968152.877 ops/s
# Warmup Iteration  19: 13968385.002 ops/s
# Warmup Iteration  20: 13968658.718 ops/s
# Warmup Iteration  21: 13826786.861 ops/s
# Warmup Iteration  22: 13969104.006 ops/s
# Warmup Iteration  23: 13872917.793 ops/s
# Warmup Iteration  24: 13832069.069 ops/s
# Warmup Iteration  25: 13934562.073 ops/s
# Warmup Iteration  26: 13970812.984 ops/s
# Warmup Iteration  27: 13872776.087 ops/s
# Warmup Iteration  28: 13991836.562 ops/s
# Warmup Iteration  29: 13990932.654 ops/s
# Warmup Iteration  30: 13995396.023 ops/s
Iteration   1: 13933640.256 ops/s
Iteration   2: 13970779.904 ops/s
Iteration   3: 14008768.936 ops/s
Iteration   4: 14055362.630 ops/s
Iteration   5: 14041386.860 ops/s
Iteration   6: 13992057.392 ops/s
Iteration   7: 13584614.363 ops/s
Iteration   8: 13996519.939 ops/s
Iteration   9: 14052359.663 ops/s
Iteration  10: 13971610.493 ops/s
Iteration  11: 13880238.880 ops/s
Iteration  12: 13928137.850 ops/s
Iteration  13: 13731152.282 ops/s
Iteration  14: 13963047.686 ops/s
Iteration  15: 14030431.229 ops/s
Iteration  16: 13955235.678 ops/s
Iteration  17: 13924405.909 ops/s
Iteration  18: 13972923.522 ops/s
Iteration  19: 13999251.595 ops/s
Iteration  20: 13966371.622 ops/s
Iteration  21: 13986498.643 ops/s
Iteration  22: 13961534.700 ops/s
Iteration  23: 13981195.455 ops/s
Iteration  24: 13901730.405 ops/s
Iteration  25: 13955859.234 ops/s
Iteration  26: 13918514.806 ops/s
Iteration  27: 13956978.231 ops/s
Iteration  28: 13970060.285 ops/s
Iteration  29: 13782939.172 ops/s
Iteration  30: 14037354.009 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withAll":
  13947032.054 ±(99.9%) 65330.922 ops/s [Average]
  (min, avg, max) = (13584614.363, 13947032.054, 14055362.630), stdev = 97784.255
  CI (99.9%): [13881701.133, 14012362.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_withAll  thrpt   30  13947032.054 ± 65330.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3055786.153 ops/s
# Warmup Iteration   2: 6431489.539 ops/s
# Warmup Iteration   3: 5529102.786 ops/s
# Warmup Iteration   4: 6570230.350 ops/s
# Warmup Iteration   5: 6560844.036 ops/s
# Warmup Iteration   6: 6597565.577 ops/s
# Warmup Iteration   7: 6598205.242 ops/s
# Warmup Iteration   8: 6556583.338 ops/s
# Warmup Iteration   9: 6600303.644 ops/s
# Warmup Iteration  10: 6522938.619 ops/s
# Warmup Iteration  11: 6614074.034 ops/s
# Warmup Iteration  12: 6617001.215 ops/s
# Warmup Iteration  13: 6597155.674 ops/s
# Warmup Iteration  14: 6588418.039 ops/s
# Warmup Iteration  15: 6581484.375 ops/s
# Warmup Iteration  16: 6596973.093 ops/s
# Warmup Iteration  17: 6623348.816 ops/s
# Warmup Iteration  18: 6580344.415 ops/s
# Warmup Iteration  19: 6611212.272 ops/s
# Warmup Iteration  20: 6557327.602 ops/s
# Warmup Iteration  21: 6586347.915 ops/s
# Warmup Iteration  22: 6604407.838 ops/s
# Warmup Iteration  23: 6571481.387 ops/s
# Warmup Iteration  24: 6589807.757 ops/s
# Warmup Iteration  25: 6605529.597 ops/s
# Warmup Iteration  26: 6595461.579 ops/s
# Warmup Iteration  27: 6617474.369 ops/s
# Warmup Iteration  28: 6606044.941 ops/s
# Warmup Iteration  29: 6550275.664 ops/s
# Warmup Iteration  30: 6595474.300 ops/s
Iteration   1: 6594435.968 ops/s
Iteration   2: 6604962.479 ops/s
Iteration   3: 6627120.159 ops/s
Iteration   4: 6599171.348 ops/s
Iteration   5: 6591834.348 ops/s
Iteration   6: 6610030.037 ops/s
Iteration   7: 6575946.096 ops/s
Iteration   8: 6563595.932 ops/s
Iteration   9: 6592105.855 ops/s
Iteration  10: 6625654.086 ops/s
Iteration  11: 6594329.918 ops/s
Iteration  12: 6525846.260 ops/s
Iteration  13: 6611625.716 ops/s
Iteration  14: 6598876.318 ops/s
Iteration  15: 6482606.904 ops/s
Iteration  16: 6624399.382 ops/s
Iteration  17: 6614736.183 ops/s
Iteration  18: 6610174.091 ops/s
Iteration  19: 6600711.520 ops/s
Iteration  20: 6603871.933 ops/s
Iteration  21: 6626133.912 ops/s
Iteration  22: 6596102.828 ops/s
Iteration  23: 6621220.141 ops/s
Iteration  24: 6600962.797 ops/s
Iteration  25: 6604933.751 ops/s
Iteration  26: 6602148.675 ops/s
Iteration  27: 6579863.027 ops/s
Iteration  28: 6583890.586 ops/s
Iteration  29: 6589600.356 ops/s
Iteration  30: 6510108.959 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withMethods":
  6592233.319 ±(99.9%) 22257.771 ops/s [Average]
  (min, avg, max) = (6482606.904, 6592233.319, 6627120.159), stdev = 33314.387
  CI (99.9%): [6569975.547, 6614491.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_withMethods  thrpt   30  6592233.319 ± 22257.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withNValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withNValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6108621.861 ops/s
# Warmup Iteration   2: 10305978.284 ops/s
# Warmup Iteration   3: 12036636.592 ops/s
# Warmup Iteration   4: 12089676.724 ops/s
# Warmup Iteration   5: 12154332.765 ops/s
# Warmup Iteration   6: 12041467.351 ops/s
# Warmup Iteration   7: 12215670.941 ops/s
# Warmup Iteration   8: 12176493.702 ops/s
# Warmup Iteration   9: 12228546.503 ops/s
# Warmup Iteration  10: 12189628.842 ops/s
# Warmup Iteration  11: 12193146.462 ops/s
# Warmup Iteration  12: 12124072.229 ops/s
# Warmup Iteration  13: 11999722.758 ops/s
# Warmup Iteration  14: 12102920.920 ops/s
# Warmup Iteration  15: 12152138.988 ops/s
# Warmup Iteration  16: 12024441.012 ops/s
# Warmup Iteration  17: 12169745.730 ops/s
# Warmup Iteration  18: 12164636.902 ops/s
# Warmup Iteration  19: 12146457.735 ops/s
# Warmup Iteration  20: 12077484.179 ops/s
# Warmup Iteration  21: 12231224.279 ops/s
# Warmup Iteration  22: 12067981.661 ops/s
# Warmup Iteration  23: 12212917.242 ops/s
# Warmup Iteration  24: 12204859.113 ops/s
# Warmup Iteration  25: 12213197.687 ops/s
# Warmup Iteration  26: 12102122.508 ops/s
# Warmup Iteration  27: 12164408.206 ops/s
# Warmup Iteration  28: 12065443.239 ops/s
# Warmup Iteration  29: 12194330.646 ops/s
# Warmup Iteration  30: 12170443.745 ops/s
Iteration   1: 12087932.139 ops/s
Iteration   2: 12201962.027 ops/s
Iteration   3: 12117536.428 ops/s
Iteration   4: 12093274.612 ops/s
Iteration   5: 12236649.507 ops/s
Iteration   6: 12180421.018 ops/s
Iteration   7: 12114028.783 ops/s
Iteration   8: 12181816.612 ops/s
Iteration   9: 12192434.029 ops/s
Iteration  10: 12173175.801 ops/s
Iteration  11: 12210089.793 ops/s
Iteration  12: 11968032.447 ops/s
Iteration  13: 12191513.094 ops/s
Iteration  14: 12177703.704 ops/s
Iteration  15: 12178986.103 ops/s
Iteration  16: 12191058.196 ops/s
Iteration  17: 12160892.874 ops/s
Iteration  18: 12171114.180 ops/s
Iteration  19: 12158585.496 ops/s
Iteration  20: 12199749.876 ops/s
Iteration  21: 12227670.589 ops/s
Iteration  22: 12116262.185 ops/s
Iteration  23: 12243771.683 ops/s
Iteration  24: 12128311.957 ops/s
Iteration  25: 12139144.975 ops/s
Iteration  26: 12066477.564 ops/s
Iteration  27: 12156782.369 ops/s
Iteration  28: 12021936.575 ops/s
Iteration  29: 12253109.102 ops/s
Iteration  30: 12212099.122 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withNValues":
  12158417.428 ±(99.9%) 43172.533 ops/s [Average]
  (min, avg, max) = (11968032.447, 12158417.428, 12253109.102), stdev = 64618.620
  CI (99.9%): [12115244.895, 12201589.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_withNValues  thrpt   30  12158417.428 ± 43172.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12986838.100 ops/s
# Warmup Iteration   2: 25783690.336 ops/s
# Warmup Iteration   3: 24595667.281 ops/s
# Warmup Iteration   4: 24092760.815 ops/s
# Warmup Iteration   5: 26330132.417 ops/s
# Warmup Iteration   6: 25933534.238 ops/s
# Warmup Iteration   7: 26381954.492 ops/s
# Warmup Iteration   8: 26403862.242 ops/s
# Warmup Iteration   9: 26348499.243 ops/s
# Warmup Iteration  10: 26289206.227 ops/s
# Warmup Iteration  11: 26389842.041 ops/s
# Warmup Iteration  12: 26187820.996 ops/s
# Warmup Iteration  13: 26192685.339 ops/s
# Warmup Iteration  14: 26414148.015 ops/s
# Warmup Iteration  15: 26348530.186 ops/s
# Warmup Iteration  16: 26267092.998 ops/s
# Warmup Iteration  17: 26442517.127 ops/s
# Warmup Iteration  18: 26411214.493 ops/s
# Warmup Iteration  19: 26347703.855 ops/s
# Warmup Iteration  20: 26169757.159 ops/s
# Warmup Iteration  21: 26395821.106 ops/s
# Warmup Iteration  22: 26158961.525 ops/s
# Warmup Iteration  23: 26421096.610 ops/s
# Warmup Iteration  24: 26196880.488 ops/s
# Warmup Iteration  25: 26280288.986 ops/s
# Warmup Iteration  26: 26307085.995 ops/s
# Warmup Iteration  27: 26367017.479 ops/s
# Warmup Iteration  28: 26397078.515 ops/s
# Warmup Iteration  29: 26253388.172 ops/s
# Warmup Iteration  30: 26366899.274 ops/s
Iteration   1: 26432271.541 ops/s
Iteration   2: 25959786.722 ops/s
Iteration   3: 26445867.921 ops/s
Iteration   4: 26282359.669 ops/s
Iteration   5: 26372405.803 ops/s
Iteration   6: 26453933.458 ops/s
Iteration   7: 26278206.417 ops/s
Iteration   8: 26359099.211 ops/s
Iteration   9: 26380685.370 ops/s
Iteration  10: 26530409.460 ops/s
Iteration  11: 26400269.701 ops/s
Iteration  12: 26461380.121 ops/s
Iteration  13: 26357698.841 ops/s
Iteration  14: 26396516.780 ops/s
Iteration  15: 26296899.462 ops/s
Iteration  16: 26302309.069 ops/s
Iteration  17: 26309603.036 ops/s
Iteration  18: 26383799.875 ops/s
Iteration  19: 26331855.334 ops/s
Iteration  20: 26427845.947 ops/s
Iteration  21: 25751067.079 ops/s
Iteration  22: 26008740.054 ops/s
Iteration  23: 26409525.474 ops/s
Iteration  24: 25952157.668 ops/s
Iteration  25: 26170545.836 ops/s
Iteration  26: 26365029.794 ops/s
Iteration  27: 26365249.137 ops/s
Iteration  28: 25993939.048 ops/s
Iteration  29: 26381012.468 ops/s
Iteration  30: 25520866.629 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_without":
  26269377.898 ±(99.9%) 154166.650 ops/s [Average]
  (min, avg, max) = (25520866.629, 26269377.898, 26530409.460), stdev = 230749.402
  CI (99.9%): [26115211.247, 26423544.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_without  thrpt   30  26269377.898 ± 154166.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3369417.024 ops/s
# Warmup Iteration   2: 6406029.020 ops/s
# Warmup Iteration   3: 6836948.320 ops/s
# Warmup Iteration   4: 6874083.474 ops/s
# Warmup Iteration   5: 5730600.849 ops/s
# Warmup Iteration   6: 6900792.515 ops/s
# Warmup Iteration   7: 6884795.162 ops/s
# Warmup Iteration   8: 6895657.840 ops/s
# Warmup Iteration   9: 6886853.857 ops/s
# Warmup Iteration  10: 6888401.100 ops/s
# Warmup Iteration  11: 6893130.091 ops/s
# Warmup Iteration  12: 6895589.080 ops/s
# Warmup Iteration  13: 6894264.701 ops/s
# Warmup Iteration  14: 6831975.528 ops/s
# Warmup Iteration  15: 6888854.695 ops/s
# Warmup Iteration  16: 6886588.320 ops/s
# Warmup Iteration  17: 6894193.330 ops/s
# Warmup Iteration  18: 6868871.122 ops/s
# Warmup Iteration  19: 6897768.973 ops/s
# Warmup Iteration  20: 6890301.637 ops/s
# Warmup Iteration  21: 6778897.023 ops/s
# Warmup Iteration  22: 6900141.966 ops/s
# Warmup Iteration  23: 6873346.689 ops/s
# Warmup Iteration  24: 6884279.976 ops/s
# Warmup Iteration  25: 6823215.086 ops/s
# Warmup Iteration  26: 6815035.461 ops/s
# Warmup Iteration  27: 6871471.489 ops/s
# Warmup Iteration  28: 6888695.048 ops/s
# Warmup Iteration  29: 6890996.516 ops/s
# Warmup Iteration  30: 6900441.555 ops/s
Iteration   1: 6880754.044 ops/s
Iteration   2: 6822564.337 ops/s
Iteration   3: 6904194.965 ops/s
Iteration   4: 6853293.143 ops/s
Iteration   5: 6854075.969 ops/s
Iteration   6: 6910279.248 ops/s
Iteration   7: 6880684.414 ops/s
Iteration   8: 6885386.859 ops/s
Iteration   9: 6914673.171 ops/s
Iteration  10: 6880308.978 ops/s
Iteration  11: 6883224.621 ops/s
Iteration  12: 6691608.189 ops/s
Iteration  13: 6866728.095 ops/s
Iteration  14: 6862851.930 ops/s
Iteration  15: 6905568.473 ops/s
Iteration  16: 6898549.191 ops/s
Iteration  17: 6860098.381 ops/s
Iteration  18: 6841454.344 ops/s
Iteration  19: 6774673.770 ops/s
Iteration  20: 6895789.448 ops/s
Iteration  21: 6903179.175 ops/s
Iteration  22: 6788855.237 ops/s
Iteration  23: 6874726.974 ops/s
Iteration  24: 6909144.143 ops/s
Iteration  25: 6789549.095 ops/s
Iteration  26: 6794719.495 ops/s
Iteration  27: 6863301.900 ops/s
Iteration  28: 6786251.265 ops/s
Iteration  29: 6784093.636 ops/s
Iteration  30: 6892957.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_withoutAll":
  6855117.990 ±(99.9%) 35667.366 ops/s [Average]
  (min, avg, max) = (6691608.189, 6855117.990, 6914673.171), stdev = 53385.239
  CI (99.9%): [6819450.623, 6890785.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_withoutAll  thrpt   30  6855117.990 ± 35667.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_wrapCopy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_wrapCopy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11894730.327 ops/s
# Warmup Iteration   2: 24675864.618 ops/s
# Warmup Iteration   3: 19891721.996 ops/s
# Warmup Iteration   4: 23261729.908 ops/s
# Warmup Iteration   5: 23070485.839 ops/s
# Warmup Iteration   6: 23294163.852 ops/s
# Warmup Iteration   7: 23054329.629 ops/s
# Warmup Iteration   8: 23278495.126 ops/s
# Warmup Iteration   9: 22968835.802 ops/s
# Warmup Iteration  10: 23286231.382 ops/s
# Warmup Iteration  11: 22858187.339 ops/s
# Warmup Iteration  12: 23242808.989 ops/s
# Warmup Iteration  13: 23344394.311 ops/s
# Warmup Iteration  14: 23083150.626 ops/s
# Warmup Iteration  15: 22986815.831 ops/s
# Warmup Iteration  16: 23286476.776 ops/s
# Warmup Iteration  17: 23272771.731 ops/s
# Warmup Iteration  18: 23297231.379 ops/s
# Warmup Iteration  19: 23344828.352 ops/s
# Warmup Iteration  20: 23256383.518 ops/s
# Warmup Iteration  21: 23326425.693 ops/s
# Warmup Iteration  22: 23284731.353 ops/s
# Warmup Iteration  23: 23129768.084 ops/s
# Warmup Iteration  24: 23276787.131 ops/s
# Warmup Iteration  25: 23114736.289 ops/s
# Warmup Iteration  26: 23356525.786 ops/s
# Warmup Iteration  27: 23153751.063 ops/s
# Warmup Iteration  28: 23242369.312 ops/s
# Warmup Iteration  29: 23280789.597 ops/s
# Warmup Iteration  30: 23311573.290 ops/s
Iteration   1: 23336224.264 ops/s
Iteration   2: 23225184.093 ops/s
Iteration   3: 23335338.496 ops/s
Iteration   4: 23287337.054 ops/s
Iteration   5: 23346058.734 ops/s
Iteration   6: 23319779.500 ops/s
Iteration   7: 22996268.107 ops/s
Iteration   8: 23288989.791 ops/s
Iteration   9: 23077003.758 ops/s
Iteration  10: 23262820.100 ops/s
Iteration  11: 23321136.995 ops/s
Iteration  12: 23193406.854 ops/s
Iteration  13: 23376548.709 ops/s
Iteration  14: 22433134.605 ops/s
Iteration  15: 23125632.499 ops/s
Iteration  16: 23316844.747 ops/s
Iteration  17: 23236472.010 ops/s
Iteration  18: 23232670.926 ops/s
Iteration  19: 23252107.081 ops/s
Iteration  20: 23181821.471 ops/s
Iteration  21: 23199135.573 ops/s
Iteration  22: 22884928.798 ops/s
Iteration  23: 22999561.683 ops/s
Iteration  24: 23319543.888 ops/s
Iteration  25: 22965594.802 ops/s
Iteration  26: 23267547.458 ops/s
Iteration  27: 23227248.448 ops/s
Iteration  28: 22925180.326 ops/s
Iteration  29: 23269477.741 ops/s
Iteration  30: 23307076.649 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_wrapCopy":
  23183669.172 ±(99.9%) 130458.672 ops/s [Average]
  (min, avg, max) = (22433134.605, 23183669.172, 23376548.709), stdev = 195264.413
  CI (99.9%): [23053210.500, 23314127.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_wrapCopy  thrpt   30  23183669.172 ± 130458.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 198922.800 ops/s
# Warmup Iteration   2: 218002.116 ops/s
# Warmup Iteration   3: 283324.466 ops/s
# Warmup Iteration   4: 290802.701 ops/s
# Warmup Iteration   5: 290780.696 ops/s
# Warmup Iteration   6: 286133.450 ops/s
# Warmup Iteration   7: 291013.593 ops/s
# Warmup Iteration   8: 290424.158 ops/s
# Warmup Iteration   9: 290457.744 ops/s
# Warmup Iteration  10: 290109.382 ops/s
# Warmup Iteration  11: 290839.241 ops/s
# Warmup Iteration  12: 241494.533 ops/s
# Warmup Iteration  13: 288696.179 ops/s
# Warmup Iteration  14: 288553.022 ops/s
# Warmup Iteration  15: 290316.899 ops/s
# Warmup Iteration  16: 289522.741 ops/s
# Warmup Iteration  17: 287101.682 ops/s
# Warmup Iteration  18: 289671.709 ops/s
# Warmup Iteration  19: 291064.554 ops/s
# Warmup Iteration  20: 287923.838 ops/s
# Warmup Iteration  21: 291205.247 ops/s
# Warmup Iteration  22: 289011.415 ops/s
# Warmup Iteration  23: 288267.942 ops/s
# Warmup Iteration  24: 290925.866 ops/s
# Warmup Iteration  25: 288480.722 ops/s
# Warmup Iteration  26: 290520.752 ops/s
# Warmup Iteration  27: 288366.880 ops/s
# Warmup Iteration  28: 290367.957 ops/s
# Warmup Iteration  29: 288087.765 ops/s
# Warmup Iteration  30: 289375.614 ops/s
Iteration   1: 289764.389 ops/s
Iteration   2: 291151.326 ops/s
Iteration   3: 290972.259 ops/s
Iteration   4: 290932.072 ops/s
Iteration   5: 290125.755 ops/s
Iteration   6: 289140.141 ops/s
Iteration   7: 288898.164 ops/s
Iteration   8: 290799.352 ops/s
Iteration   9: 290345.702 ops/s
Iteration  10: 290796.137 ops/s
Iteration  11: 283956.497 ops/s
Iteration  12: 290606.708 ops/s
Iteration  13: 290419.020 ops/s
Iteration  14: 285995.023 ops/s
Iteration  15: 286299.704 ops/s
Iteration  16: 287890.360 ops/s
Iteration  17: 290834.361 ops/s
Iteration  18: 289664.104 ops/s
Iteration  19: 290737.613 ops/s
Iteration  20: 290791.053 ops/s
Iteration  21: 289647.525 ops/s
Iteration  22: 290915.358 ops/s
Iteration  23: 290353.661 ops/s
Iteration  24: 288431.504 ops/s
Iteration  25: 289883.224 ops/s
Iteration  26: 290582.800 ops/s
Iteration  27: 288873.098 ops/s
Iteration  28: 289048.905 ops/s
Iteration  29: 289971.430 ops/s
Iteration  30: 290701.868 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zip":
  289617.637 ±(99.9%) 1123.243 ops/s [Average]
  (min, avg, max) = (283956.497, 289617.637, 291151.326), stdev = 1681.217
  CI (99.9%): [288494.394, 290740.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_zip  thrpt   30  289617.637 ± 1123.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468810.855 ops/s
# Warmup Iteration   2: 742860.408 ops/s
# Warmup Iteration   3: 854041.993 ops/s
# Warmup Iteration   4: 858465.708 ops/s
# Warmup Iteration   5: 858455.952 ops/s
# Warmup Iteration   6: 825393.036 ops/s
# Warmup Iteration   7: 751544.589 ops/s
# Warmup Iteration   8: 849800.482 ops/s
# Warmup Iteration   9: 859205.788 ops/s
# Warmup Iteration  10: 860181.857 ops/s
# Warmup Iteration  11: 859408.924 ops/s
# Warmup Iteration  12: 867050.502 ops/s
# Warmup Iteration  13: 861444.178 ops/s
# Warmup Iteration  14: 860521.877 ops/s
# Warmup Iteration  15: 855597.334 ops/s
# Warmup Iteration  16: 859717.231 ops/s
# Warmup Iteration  17: 859190.439 ops/s
# Warmup Iteration  18: 860571.105 ops/s
# Warmup Iteration  19: 859564.753 ops/s
# Warmup Iteration  20: 860161.804 ops/s
# Warmup Iteration  21: 865890.211 ops/s
# Warmup Iteration  22: 855746.182 ops/s
# Warmup Iteration  23: 852285.733 ops/s
# Warmup Iteration  24: 848427.228 ops/s
# Warmup Iteration  25: 857955.020 ops/s
# Warmup Iteration  26: 865283.633 ops/s
# Warmup Iteration  27: 861639.933 ops/s
# Warmup Iteration  28: 853153.354 ops/s
# Warmup Iteration  29: 853040.975 ops/s
# Warmup Iteration  30: 854969.659 ops/s
Iteration   1: 867243.400 ops/s
Iteration   2: 855227.324 ops/s
Iteration   3: 858317.537 ops/s
Iteration   4: 859278.243 ops/s
Iteration   5: 864291.473 ops/s
Iteration   6: 858499.390 ops/s
Iteration   7: 864044.107 ops/s
Iteration   8: 856673.407 ops/s
Iteration   9: 862708.240 ops/s
Iteration  10: 853989.980 ops/s
Iteration  11: 862821.664 ops/s
Iteration  12: 856226.416 ops/s
Iteration  13: 842128.846 ops/s
Iteration  14: 862828.122 ops/s
Iteration  15: 854028.485 ops/s
Iteration  16: 867470.080 ops/s
Iteration  17: 857696.323 ops/s
Iteration  18: 855530.909 ops/s
Iteration  19: 851619.713 ops/s
Iteration  20: 862464.476 ops/s
Iteration  21: 838507.392 ops/s
Iteration  22: 857252.185 ops/s
Iteration  23: 856860.438 ops/s
Iteration  24: 857252.633 ops/s
Iteration  25: 853384.509 ops/s
Iteration  26: 857751.801 ops/s
Iteration  27: 864698.012 ops/s
Iteration  28: 858639.216 ops/s
Iteration  29: 856971.084 ops/s
Iteration  30: 864084.836 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_zipWithIndex":
  857949.675 ±(99.9%) 4247.567 ops/s [Average]
  (min, avg, max) = (838507.392, 857949.675, 867470.080), stdev = 6357.559
  CI (99.9%): [853702.108, 862197.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  857949.675 ± 4247.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712284.584 ops/s
# Warmup Iteration   2: 754618.868 ops/s
# Warmup Iteration   3: 968183.980 ops/s
# Warmup Iteration   4: 952223.538 ops/s
# Warmup Iteration   5: 960603.697 ops/s
# Warmup Iteration   6: 962412.907 ops/s
# Warmup Iteration   7: 956146.741 ops/s
# Warmup Iteration   8: 964068.201 ops/s
# Warmup Iteration   9: 961421.206 ops/s
# Warmup Iteration  10: 962134.105 ops/s
# Warmup Iteration  11: 931710.571 ops/s
# Warmup Iteration  12: 855489.426 ops/s
# Warmup Iteration  13: 965715.495 ops/s
# Warmup Iteration  14: 953515.972 ops/s
# Warmup Iteration  15: 957206.214 ops/s
# Warmup Iteration  16: 952008.986 ops/s
# Warmup Iteration  17: 1025652.341 ops/s
# Warmup Iteration  18: 1030910.319 ops/s
# Warmup Iteration  19: 1030730.931 ops/s
# Warmup Iteration  20: 1018703.358 ops/s
# Warmup Iteration  21: 1030401.425 ops/s
# Warmup Iteration  22: 1022462.582 ops/s
# Warmup Iteration  23: 1026689.487 ops/s
# Warmup Iteration  24: 1029900.721 ops/s
# Warmup Iteration  25: 1024723.039 ops/s
# Warmup Iteration  26: 1023501.855 ops/s
# Warmup Iteration  27: 1023360.470 ops/s
# Warmup Iteration  28: 1022624.820 ops/s
# Warmup Iteration  29: 1023969.784 ops/s
# Warmup Iteration  30: 1030012.747 ops/s
Iteration   1: 1026343.720 ops/s
Iteration   2: 1028020.268 ops/s
Iteration   3: 1030977.736 ops/s
Iteration   4: 1031769.376 ops/s
Iteration   5: 1032068.125 ops/s
Iteration   6: 1033534.836 ops/s
Iteration   7: 1029724.457 ops/s
Iteration   8: 1013681.039 ops/s
Iteration   9: 1014287.955 ops/s
Iteration  10: 1029942.775 ops/s
Iteration  11: 1016458.687 ops/s
Iteration  12: 1033406.998 ops/s
Iteration  13: 1023740.115 ops/s
Iteration  14: 1033012.160 ops/s
Iteration  15: 1019572.621 ops/s
Iteration  16: 1029418.548 ops/s
Iteration  17: 1029858.935 ops/s
Iteration  18: 1031080.421 ops/s
Iteration  19: 1025403.326 ops/s
Iteration  20: 1032185.440 ops/s
Iteration  21: 1029151.197 ops/s
Iteration  22: 1032920.666 ops/s
Iteration  23: 1027963.626 ops/s
Iteration  24: 1028020.980 ops/s
Iteration  25: 1030852.969 ops/s
Iteration  26: 1034711.472 ops/s
Iteration  27: 1017308.687 ops/s
Iteration  28: 1032184.610 ops/s
Iteration  29: 1030283.249 ops/s
Iteration  30: 1031050.468 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_add":
  1027964.515 ±(99.9%) 3950.208 ops/s [Average]
  (min, avg, max) = (1013681.039, 1027964.515, 1034711.472), stdev = 5912.486
  CI (99.9%): [1024014.307, 1031914.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  1027964.515 ± 3950.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710832.819 ops/s
# Warmup Iteration   2: 758229.703 ops/s
# Warmup Iteration   3: 986210.641 ops/s
# Warmup Iteration   4: 973986.652 ops/s
# Warmup Iteration   5: 973080.516 ops/s
# Warmup Iteration   6: 958340.267 ops/s
# Warmup Iteration   7: 980959.538 ops/s
# Warmup Iteration   8: 978954.021 ops/s
# Warmup Iteration   9: 976161.756 ops/s
# Warmup Iteration  10: 963214.716 ops/s
# Warmup Iteration  11: 890514.572 ops/s
# Warmup Iteration  12: 910332.405 ops/s
# Warmup Iteration  13: 973461.073 ops/s
# Warmup Iteration  14: 973855.167 ops/s
# Warmup Iteration  15: 973868.557 ops/s
# Warmup Iteration  16: 967377.429 ops/s
# Warmup Iteration  17: 1020484.698 ops/s
# Warmup Iteration  18: 1029047.592 ops/s
# Warmup Iteration  19: 1030039.406 ops/s
# Warmup Iteration  20: 1031919.328 ops/s
# Warmup Iteration  21: 1031068.607 ops/s
# Warmup Iteration  22: 1018252.782 ops/s
# Warmup Iteration  23: 1029863.334 ops/s
# Warmup Iteration  24: 1027273.143 ops/s
# Warmup Iteration  25: 1027005.176 ops/s
# Warmup Iteration  26: 1018188.287 ops/s
# Warmup Iteration  27: 1025837.957 ops/s
# Warmup Iteration  28: 1028617.606 ops/s
# Warmup Iteration  29: 1030222.786 ops/s
# Warmup Iteration  30: 1010831.471 ops/s
Iteration   1: 1033707.370 ops/s
Iteration   2: 1027787.683 ops/s
Iteration   3: 1033148.089 ops/s
Iteration   4: 1026422.162 ops/s
Iteration   5: 1013321.384 ops/s
Iteration   6: 1025267.475 ops/s
Iteration   7: 1032322.643 ops/s
Iteration   8: 1032302.295 ops/s
Iteration   9: 1027355.773 ops/s
Iteration  10: 1029402.741 ops/s
Iteration  11: 1029988.272 ops/s
Iteration  12: 1013438.396 ops/s
Iteration  13: 1030461.036 ops/s
Iteration  14: 1033112.746 ops/s
Iteration  15: 1035776.595 ops/s
Iteration  16: 1029793.116 ops/s
Iteration  17: 1015971.047 ops/s
Iteration  18: 1016151.401 ops/s
Iteration  19: 1033853.021 ops/s
Iteration  20: 1035464.345 ops/s
Iteration  21: 1020270.629 ops/s
Iteration  22: 989098.783 ops/s
Iteration  23: 1025798.145 ops/s
Iteration  24: 1028371.788 ops/s
Iteration  25: 1034878.653 ops/s
Iteration  26: 1035934.945 ops/s
Iteration  27: 1034292.611 ops/s
Iteration  28: 1032206.385 ops/s
Iteration  29: 1032791.058 ops/s
Iteration  30: 1031408.854 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll":
  1027336.648 ±(99.9%) 6539.127 ops/s [Average]
  (min, avg, max) = (989098.783, 1027336.648, 1035934.945), stdev = 9787.458
  CI (99.9%): [1020797.521, 1033875.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  1027336.648 ± 6539.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697382.870 ops/s
# Warmup Iteration   2: 724986.807 ops/s
# Warmup Iteration   3: 945181.028 ops/s
# Warmup Iteration   4: 941237.834 ops/s
# Warmup Iteration   5: 942448.011 ops/s
# Warmup Iteration   6: 937364.534 ops/s
# Warmup Iteration   7: 936188.668 ops/s
# Warmup Iteration   8: 942189.919 ops/s
# Warmup Iteration   9: 943531.812 ops/s
# Warmup Iteration  10: 943838.166 ops/s
# Warmup Iteration  11: 932319.412 ops/s
# Warmup Iteration  12: 807763.622 ops/s
# Warmup Iteration  13: 940676.496 ops/s
# Warmup Iteration  14: 942956.760 ops/s
# Warmup Iteration  15: 942422.695 ops/s
# Warmup Iteration  16: 944153.887 ops/s
# Warmup Iteration  17: 990742.387 ops/s
# Warmup Iteration  18: 988947.843 ops/s
# Warmup Iteration  19: 981857.412 ops/s
# Warmup Iteration  20: 990482.101 ops/s
# Warmup Iteration  21: 988661.184 ops/s
# Warmup Iteration  22: 987895.048 ops/s
# Warmup Iteration  23: 989903.523 ops/s
# Warmup Iteration  24: 977922.889 ops/s
# Warmup Iteration  25: 992497.219 ops/s
# Warmup Iteration  26: 990350.030 ops/s
# Warmup Iteration  27: 989901.706 ops/s
# Warmup Iteration  28: 980704.730 ops/s
# Warmup Iteration  29: 986947.302 ops/s
# Warmup Iteration  30: 990000.013 ops/s
Iteration   1: 968724.546 ops/s
Iteration   2: 991373.294 ops/s
Iteration   3: 981259.403 ops/s
Iteration   4: 997087.594 ops/s
Iteration   5: 994352.205 ops/s
Iteration   6: 996112.477 ops/s
Iteration   7: 991129.511 ops/s
Iteration   8: 991310.053 ops/s
Iteration   9: 992815.616 ops/s
Iteration  10: 987126.884 ops/s
Iteration  11: 962317.868 ops/s
Iteration  12: 991204.499 ops/s
Iteration  13: 991838.406 ops/s
Iteration  14: 973228.039 ops/s
Iteration  15: 985023.997 ops/s
Iteration  16: 986492.382 ops/s
Iteration  17: 988939.797 ops/s
Iteration  18: 971620.612 ops/s
Iteration  19: 987325.067 ops/s
Iteration  20: 990018.209 ops/s
Iteration  21: 990867.930 ops/s
Iteration  22: 991385.533 ops/s
Iteration  23: 984239.848 ops/s
Iteration  24: 996163.350 ops/s
Iteration  25: 996522.076 ops/s
Iteration  26: 992181.064 ops/s
Iteration  27: 995672.671 ops/s
Iteration  28: 989145.948 ops/s
Iteration  29: 975829.491 ops/s
Iteration  30: 987800.991 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex":
  987303.645 ±(99.9%) 5863.701 ops/s [Average]
  (min, avg, max) = (962317.868, 987303.645, 997087.594), stdev = 8776.513
  CI (99.9%): [981439.944, 993167.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  987303.645 ± 5863.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708391.411 ops/s
# Warmup Iteration   2: 760415.276 ops/s
# Warmup Iteration   3: 987399.973 ops/s
# Warmup Iteration   4: 974848.060 ops/s
# Warmup Iteration   5: 985110.293 ops/s
# Warmup Iteration   6: 989199.952 ops/s
# Warmup Iteration   7: 987804.120 ops/s
# Warmup Iteration   8: 985898.717 ops/s
# Warmup Iteration   9: 960521.063 ops/s
# Warmup Iteration  10: 989476.268 ops/s
# Warmup Iteration  11: 823658.862 ops/s
# Warmup Iteration  12: 984634.278 ops/s
# Warmup Iteration  13: 988359.192 ops/s
# Warmup Iteration  14: 992132.965 ops/s
# Warmup Iteration  15: 988718.135 ops/s
# Warmup Iteration  16: 993072.813 ops/s
# Warmup Iteration  17: 1043085.032 ops/s
# Warmup Iteration  18: 1049178.914 ops/s
# Warmup Iteration  19: 1054280.359 ops/s
# Warmup Iteration  20: 1052685.002 ops/s
# Warmup Iteration  21: 1052558.333 ops/s
# Warmup Iteration  22: 1052004.370 ops/s
# Warmup Iteration  23: 1051572.082 ops/s
# Warmup Iteration  24: 1052567.815 ops/s
# Warmup Iteration  25: 1048230.124 ops/s
# Warmup Iteration  26: 1055386.325 ops/s
# Warmup Iteration  27: 1034370.929 ops/s
# Warmup Iteration  28: 1052565.622 ops/s
# Warmup Iteration  29: 1045918.463 ops/s
# Warmup Iteration  30: 1051950.499 ops/s
Iteration   1: 1019596.291 ops/s
Iteration   2: 1054080.229 ops/s
Iteration   3: 1053578.153 ops/s
Iteration   4: 1056684.582 ops/s
Iteration   5: 1050164.005 ops/s
Iteration   6: 1051059.195 ops/s
Iteration   7: 1054748.368 ops/s
Iteration   8: 1055948.574 ops/s
Iteration   9: 1048730.787 ops/s
Iteration  10: 1038598.828 ops/s
Iteration  11: 1053156.070 ops/s
Iteration  12: 1035647.269 ops/s
Iteration  13: 1056429.974 ops/s
Iteration  14: 1051010.468 ops/s
Iteration  15: 1051720.384 ops/s
Iteration  16: 1050648.953 ops/s
Iteration  17: 1049722.232 ops/s
Iteration  18: 1047773.874 ops/s
Iteration  19: 1036604.469 ops/s
Iteration  20: 1051749.177 ops/s
Iteration  21: 1046271.897 ops/s
Iteration  22: 1054361.801 ops/s
Iteration  23: 1051986.564 ops/s
Iteration  24: 1049499.927 ops/s
Iteration  25: 1052097.241 ops/s
Iteration  26: 1062927.371 ops/s
Iteration  27: 1049566.922 ops/s
Iteration  28: 1049580.708 ops/s
Iteration  29: 1051774.441 ops/s
Iteration  30: 1050589.036 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  1049543.593 ±(99.9%) 5328.587 ops/s [Average]
  (min, avg, max) = (1019596.291, 1049543.593, 1062927.371), stdev = 7975.579
  CI (99.9%): [1044215.006, 1054872.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1049543.593 ± 5328.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702640.226 ops/s
# Warmup Iteration   2: 731407.332 ops/s
# Warmup Iteration   3: 947100.898 ops/s
# Warmup Iteration   4: 945694.498 ops/s
# Warmup Iteration   5: 944244.367 ops/s
# Warmup Iteration   6: 943908.361 ops/s
# Warmup Iteration   7: 945618.505 ops/s
# Warmup Iteration   8: 941869.440 ops/s
# Warmup Iteration   9: 936902.810 ops/s
# Warmup Iteration  10: 944937.980 ops/s
# Warmup Iteration  11: 931265.885 ops/s
# Warmup Iteration  12: 804503.099 ops/s
# Warmup Iteration  13: 936442.497 ops/s
# Warmup Iteration  14: 944513.900 ops/s
# Warmup Iteration  15: 945218.261 ops/s
# Warmup Iteration  16: 943354.178 ops/s
# Warmup Iteration  17: 989565.264 ops/s
# Warmup Iteration  18: 1000700.096 ops/s
# Warmup Iteration  19: 991745.998 ops/s
# Warmup Iteration  20: 997812.465 ops/s
# Warmup Iteration  21: 991050.373 ops/s
# Warmup Iteration  22: 990881.428 ops/s
# Warmup Iteration  23: 1001318.430 ops/s
# Warmup Iteration  24: 999744.992 ops/s
# Warmup Iteration  25: 1001290.603 ops/s
# Warmup Iteration  26: 997573.000 ops/s
# Warmup Iteration  27: 993302.732 ops/s
# Warmup Iteration  28: 992011.867 ops/s
# Warmup Iteration  29: 989098.358 ops/s
# Warmup Iteration  30: 987451.042 ops/s
Iteration   1: 996763.191 ops/s
Iteration   2: 996578.838 ops/s
Iteration   3: 1000606.492 ops/s
Iteration   4: 999977.631 ops/s
Iteration   5: 1000296.060 ops/s
Iteration   6: 996440.119 ops/s
Iteration   7: 992772.226 ops/s
Iteration   8: 1000676.488 ops/s
Iteration   9: 996108.830 ops/s
Iteration  10: 1000374.608 ops/s
Iteration  11: 998296.454 ops/s
Iteration  12: 997730.292 ops/s
Iteration  13: 1000426.490 ops/s
Iteration  14: 999968.006 ops/s
Iteration  15: 1000275.198 ops/s
Iteration  16: 996793.234 ops/s
Iteration  17: 997779.097 ops/s
Iteration  18: 999597.019 ops/s
Iteration  19: 999471.512 ops/s
Iteration  20: 997328.787 ops/s
Iteration  21: 999047.717 ops/s
Iteration  22: 997306.792 ops/s
Iteration  23: 992982.299 ops/s
Iteration  24: 996841.145 ops/s
Iteration  25: 998515.441 ops/s
Iteration  26: 994780.618 ops/s
Iteration  27: 1003664.217 ops/s
Iteration  28: 998971.923 ops/s
Iteration  29: 998316.567 ops/s
Iteration  30: 994556.293 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex":
  998108.119 ±(99.9%) 1621.429 ops/s [Average]
  (min, avg, max) = (992772.226, 998108.119, 1003664.217), stdev = 2426.879
  CI (99.9%): [996486.690, 999729.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex  thrpt   30  998108.119 ± 1621.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722241.086 ops/s
# Warmup Iteration   2: 762610.011 ops/s
# Warmup Iteration   3: 997229.848 ops/s
# Warmup Iteration   4: 991705.923 ops/s
# Warmup Iteration   5: 987012.661 ops/s
# Warmup Iteration   6: 991007.526 ops/s
# Warmup Iteration   7: 988748.906 ops/s
# Warmup Iteration   8: 988303.760 ops/s
# Warmup Iteration   9: 986255.913 ops/s
# Warmup Iteration  10: 991578.569 ops/s
# Warmup Iteration  11: 858111.447 ops/s
# Warmup Iteration  12: 965611.510 ops/s
# Warmup Iteration  13: 976322.478 ops/s
# Warmup Iteration  14: 990228.750 ops/s
# Warmup Iteration  15: 986852.728 ops/s
# Warmup Iteration  16: 983492.295 ops/s
# Warmup Iteration  17: 1043054.065 ops/s
# Warmup Iteration  18: 1052684.091 ops/s
# Warmup Iteration  19: 1050120.560 ops/s
# Warmup Iteration  20: 1048468.357 ops/s
# Warmup Iteration  21: 1050081.167 ops/s
# Warmup Iteration  22: 1043384.215 ops/s
# Warmup Iteration  23: 1052091.569 ops/s
# Warmup Iteration  24: 1050707.025 ops/s
# Warmup Iteration  25: 1039551.911 ops/s
# Warmup Iteration  26: 1049886.846 ops/s
# Warmup Iteration  27: 1050935.808 ops/s
# Warmup Iteration  28: 1051367.420 ops/s
# Warmup Iteration  29: 1047692.174 ops/s
# Warmup Iteration  30: 1044232.482 ops/s
Iteration   1: 1025116.810 ops/s
Iteration   2: 1035469.975 ops/s
Iteration   3: 1033835.117 ops/s
Iteration   4: 1044739.496 ops/s
Iteration   5: 1053321.485 ops/s
Iteration   6: 1052038.880 ops/s
Iteration   7: 1020730.309 ops/s
Iteration   8: 1053221.874 ops/s
Iteration   9: 1049865.633 ops/s
Iteration  10: 1046956.232 ops/s
Iteration  11: 1050384.684 ops/s
Iteration  12: 1048320.041 ops/s
Iteration  13: 1047993.020 ops/s
Iteration  14: 1045187.526 ops/s
Iteration  15: 1049704.296 ops/s
Iteration  16: 1049600.898 ops/s
Iteration  17: 1052924.552 ops/s
Iteration  18: 1049566.155 ops/s
Iteration  19: 1045954.196 ops/s
Iteration  20: 1055640.771 ops/s
Iteration  21: 1054758.782 ops/s
Iteration  22: 1051247.707 ops/s
Iteration  23: 1049862.701 ops/s
Iteration  24: 1055566.944 ops/s
Iteration  25: 1046596.821 ops/s
Iteration  26: 1054022.081 ops/s
Iteration  27: 1051954.432 ops/s
Iteration  28: 1045485.675 ops/s
Iteration  29: 1055167.280 ops/s
Iteration  30: 1050987.261 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear":
  1047540.721 ±(99.9%) 5619.460 ops/s [Average]
  (min, avg, max) = (1020730.309, 1047540.721, 1055640.771), stdev = 8410.944
  CI (99.9%): [1041921.261, 1053160.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  1047540.721 ± 5619.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2639384.139 ops/s
# Warmup Iteration   2: 4554848.621 ops/s
# Warmup Iteration   3: 5013498.540 ops/s
# Warmup Iteration   4: 5044360.974 ops/s
# Warmup Iteration   5: 4183331.230 ops/s
# Warmup Iteration   6: 4959308.351 ops/s
# Warmup Iteration   7: 5041064.756 ops/s
# Warmup Iteration   8: 5036922.392 ops/s
# Warmup Iteration   9: 5050867.689 ops/s
# Warmup Iteration  10: 5027316.437 ops/s
# Warmup Iteration  11: 5038245.378 ops/s
# Warmup Iteration  12: 5042307.508 ops/s
# Warmup Iteration  13: 5020526.932 ops/s
# Warmup Iteration  14: 5044422.416 ops/s
# Warmup Iteration  15: 5042074.347 ops/s
# Warmup Iteration  16: 5046603.445 ops/s
# Warmup Iteration  17: 4984020.581 ops/s
# Warmup Iteration  18: 5050012.183 ops/s
# Warmup Iteration  19: 4994446.085 ops/s
# Warmup Iteration  20: 4999186.829 ops/s
# Warmup Iteration  21: 4935768.537 ops/s
# Warmup Iteration  22: 5029877.458 ops/s
# Warmup Iteration  23: 5051720.329 ops/s
# Warmup Iteration  24: 5038849.736 ops/s
# Warmup Iteration  25: 5005605.740 ops/s
# Warmup Iteration  26: 5002120.181 ops/s
# Warmup Iteration  27: 5052466.537 ops/s
# Warmup Iteration  28: 5040984.374 ops/s
# Warmup Iteration  29: 5038448.592 ops/s
# Warmup Iteration  30: 5031515.322 ops/s
Iteration   1: 5034184.712 ops/s
Iteration   2: 5035896.649 ops/s
Iteration   3: 5038425.092 ops/s
Iteration   4: 5036592.558 ops/s
Iteration   5: 5038595.159 ops/s
Iteration   6: 5056347.208 ops/s
Iteration   7: 5056281.723 ops/s
Iteration   8: 5039100.907 ops/s
Iteration   9: 5050535.671 ops/s
Iteration  10: 5038902.544 ops/s
Iteration  11: 5047822.030 ops/s
Iteration  12: 5040432.130 ops/s
Iteration  13: 5053676.185 ops/s
Iteration  14: 4863966.947 ops/s
Iteration  15: 5042452.050 ops/s
Iteration  16: 5041960.526 ops/s
Iteration  17: 5028569.306 ops/s
Iteration  18: 4979216.197 ops/s
Iteration  19: 5047601.994 ops/s
Iteration  20: 4961328.299 ops/s
Iteration  21: 5032409.308 ops/s
Iteration  22: 4956644.027 ops/s
Iteration  23: 5046352.817 ops/s
Iteration  24: 5029397.724 ops/s
Iteration  25: 5035336.026 ops/s
Iteration  26: 5031927.009 ops/s
Iteration  27: 5031170.584 ops/s
Iteration  28: 5049533.629 ops/s
Iteration  29: 5043879.347 ops/s
Iteration  30: 5045889.478 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect":
  5027814.261 ±(99.9%) 26329.852 ops/s [Average]
  (min, avg, max) = (4863966.947, 5027814.261, 5056347.208), stdev = 39409.286
  CI (99.9%): [5001484.409, 5054144.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  5027814.261 ± 26329.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2943448.621 ops/s
# Warmup Iteration   2: 7283714.014 ops/s
# Warmup Iteration   3: 7550822.407 ops/s
# Warmup Iteration   4: 7623901.022 ops/s
# Warmup Iteration   5: 6281165.976 ops/s
# Warmup Iteration   6: 7570386.829 ops/s
# Warmup Iteration   7: 7614933.587 ops/s
# Warmup Iteration   8: 7521200.149 ops/s
# Warmup Iteration   9: 7614343.626 ops/s
# Warmup Iteration  10: 7615203.959 ops/s
# Warmup Iteration  11: 7554413.249 ops/s
# Warmup Iteration  12: 7601078.780 ops/s
# Warmup Iteration  13: 7608480.692 ops/s
# Warmup Iteration  14: 7621800.793 ops/s
# Warmup Iteration  15: 7629540.202 ops/s
# Warmup Iteration  16: 7534308.033 ops/s
# Warmup Iteration  17: 7591174.959 ops/s
# Warmup Iteration  18: 7614088.444 ops/s
# Warmup Iteration  19: 7615274.101 ops/s
# Warmup Iteration  20: 7551711.450 ops/s
# Warmup Iteration  21: 7629106.898 ops/s
# Warmup Iteration  22: 7604032.571 ops/s
# Warmup Iteration  23: 7631596.000 ops/s
# Warmup Iteration  24: 7600979.210 ops/s
# Warmup Iteration  25: 7637711.682 ops/s
# Warmup Iteration  26: 7592998.553 ops/s
# Warmup Iteration  27: 7623619.369 ops/s
# Warmup Iteration  28: 7619045.948 ops/s
# Warmup Iteration  29: 7606780.962 ops/s
# Warmup Iteration  30: 7590644.055 ops/s
Iteration   1: 7619899.187 ops/s
Iteration   2: 7575002.536 ops/s
Iteration   3: 7560298.103 ops/s
Iteration   4: 7606509.496 ops/s
Iteration   5: 7611817.778 ops/s
Iteration   6: 7599621.446 ops/s
Iteration   7: 7631997.676 ops/s
Iteration   8: 7613774.720 ops/s
Iteration   9: 7585483.217 ops/s
Iteration  10: 7593249.509 ops/s
Iteration  11: 7611600.014 ops/s
Iteration  12: 7639485.401 ops/s
Iteration  13: 7630760.471 ops/s
Iteration  14: 7605553.274 ops/s
Iteration  15: 7617096.600 ops/s
Iteration  16: 7601953.273 ops/s
Iteration  17: 7635980.910 ops/s
Iteration  18: 7631052.731 ops/s
Iteration  19: 7623961.397 ops/s
Iteration  20: 7600766.037 ops/s
Iteration  21: 7636963.518 ops/s
Iteration  22: 7634904.313 ops/s
Iteration  23: 7618499.739 ops/s
Iteration  24: 7576702.450 ops/s
Iteration  25: 7515203.422 ops/s
Iteration  26: 7637208.550 ops/s
Iteration  27: 7539924.564 ops/s
Iteration  28: 7632610.141 ops/s
Iteration  29: 7368192.721 ops/s
Iteration  30: 7555650.312 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  7597057.450 ±(99.9%) 35572.057 ops/s [Average]
  (min, avg, max) = (7368192.721, 7597057.450, 7639485.401), stdev = 53242.584
  CI (99.9%): [7561485.394, 7632629.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  7597057.450 ± 35572.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4479082.946 ops/s
# Warmup Iteration   2: 8247983.339 ops/s
# Warmup Iteration   3: 8756117.258 ops/s
# Warmup Iteration   4: 8874048.942 ops/s
# Warmup Iteration   5: 7426698.167 ops/s
# Warmup Iteration   6: 8884025.737 ops/s
# Warmup Iteration   7: 8859239.515 ops/s
# Warmup Iteration   8: 8850297.221 ops/s
# Warmup Iteration   9: 8865397.304 ops/s
# Warmup Iteration  10: 8854209.281 ops/s
# Warmup Iteration  11: 8883987.901 ops/s
# Warmup Iteration  12: 8818548.751 ops/s
# Warmup Iteration  13: 8803772.680 ops/s
# Warmup Iteration  14: 8878496.820 ops/s
# Warmup Iteration  15: 8808360.342 ops/s
# Warmup Iteration  16: 8782261.676 ops/s
# Warmup Iteration  17: 8810059.808 ops/s
# Warmup Iteration  18: 8855401.414 ops/s
# Warmup Iteration  19: 8770403.589 ops/s
# Warmup Iteration  20: 8873319.694 ops/s
# Warmup Iteration  21: 8863104.912 ops/s
# Warmup Iteration  22: 8867489.448 ops/s
# Warmup Iteration  23: 8780919.233 ops/s
# Warmup Iteration  24: 8862020.992 ops/s
# Warmup Iteration  25: 8861684.514 ops/s
# Warmup Iteration  26: 8819265.495 ops/s
# Warmup Iteration  27: 8783576.618 ops/s
# Warmup Iteration  28: 8819846.357 ops/s
# Warmup Iteration  29: 8859751.701 ops/s
# Warmup Iteration  30: 8796312.517 ops/s
Iteration   1: 8893023.796 ops/s
Iteration   2: 8802469.273 ops/s
Iteration   3: 8854528.378 ops/s
Iteration   4: 8805614.480 ops/s
Iteration   5: 8852430.098 ops/s
Iteration   6: 8860507.067 ops/s
Iteration   7: 8871147.597 ops/s
Iteration   8: 8861738.189 ops/s
Iteration   9: 8828256.073 ops/s
Iteration  10: 8873056.538 ops/s
Iteration  11: 8847259.907 ops/s
Iteration  12: 8736009.718 ops/s
Iteration  13: 8872328.236 ops/s
Iteration  14: 8834586.681 ops/s
Iteration  15: 8850608.056 ops/s
Iteration  16: 8869787.852 ops/s
Iteration  17: 8721124.380 ops/s
Iteration  18: 8710987.390 ops/s
Iteration  19: 8845183.073 ops/s
Iteration  20: 8710087.812 ops/s
Iteration  21: 8877403.923 ops/s
Iteration  22: 8792271.780 ops/s
Iteration  23: 8825878.023 ops/s
Iteration  24: 8877865.010 ops/s
Iteration  25: 8848038.644 ops/s
Iteration  26: 8834345.719 ops/s
Iteration  27: 8827470.036 ops/s
Iteration  28: 8768943.303 ops/s
Iteration  29: 8874850.167 ops/s
Iteration  30: 8827582.021 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  8828512.774 ±(99.9%) 34539.589 ops/s [Average]
  (min, avg, max) = (8710087.812, 8828512.774, 8893023.796), stdev = 51697.235
  CI (99.9%): [8793973.185, 8863052.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  8828512.774 ± 34539.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4513334.018 ops/s
# Warmup Iteration   2: 8544907.361 ops/s
# Warmup Iteration   3: 9131171.675 ops/s
# Warmup Iteration   4: 9165929.791 ops/s
# Warmup Iteration   5: 7702114.386 ops/s
# Warmup Iteration   6: 9091757.263 ops/s
# Warmup Iteration   7: 9125270.217 ops/s
# Warmup Iteration   8: 9207751.575 ops/s
# Warmup Iteration   9: 9204706.894 ops/s
# Warmup Iteration  10: 9204964.390 ops/s
# Warmup Iteration  11: 9194577.939 ops/s
# Warmup Iteration  12: 9187481.534 ops/s
# Warmup Iteration  13: 9186974.397 ops/s
# Warmup Iteration  14: 9156018.607 ops/s
# Warmup Iteration  15: 9073548.732 ops/s
# Warmup Iteration  16: 9215625.342 ops/s
# Warmup Iteration  17: 9173985.487 ops/s
# Warmup Iteration  18: 9179442.027 ops/s
# Warmup Iteration  19: 9186516.690 ops/s
# Warmup Iteration  20: 9175177.203 ops/s
# Warmup Iteration  21: 9195508.142 ops/s
# Warmup Iteration  22: 9133365.643 ops/s
# Warmup Iteration  23: 9193993.027 ops/s
# Warmup Iteration  24: 9196979.123 ops/s
# Warmup Iteration  25: 9194892.660 ops/s
# Warmup Iteration  26: 9186505.697 ops/s
# Warmup Iteration  27: 9206894.397 ops/s
# Warmup Iteration  28: 9143278.238 ops/s
# Warmup Iteration  29: 9192494.286 ops/s
# Warmup Iteration  30: 9198606.374 ops/s
Iteration   1: 9176905.851 ops/s
Iteration   2: 9179664.389 ops/s
Iteration   3: 8981272.162 ops/s
Iteration   4: 9212820.866 ops/s
Iteration   5: 9179413.977 ops/s
Iteration   6: 9147880.309 ops/s
Iteration   7: 9154887.825 ops/s
Iteration   8: 9195794.379 ops/s
Iteration   9: 9184097.425 ops/s
Iteration  10: 9136029.473 ops/s
Iteration  11: 9195926.223 ops/s
Iteration  12: 9200470.478 ops/s
Iteration  13: 9176454.262 ops/s
Iteration  14: 9185659.468 ops/s
Iteration  15: 9203034.420 ops/s
Iteration  16: 9200090.152 ops/s
Iteration  17: 9208954.168 ops/s
Iteration  18: 9203372.136 ops/s
Iteration  19: 9181435.410 ops/s
Iteration  20: 9189624.220 ops/s
Iteration  21: 9199545.447 ops/s
Iteration  22: 9192332.403 ops/s
Iteration  23: 9199208.129 ops/s
Iteration  24: 9157923.593 ops/s
Iteration  25: 9199791.993 ops/s
Iteration  26: 9177653.766 ops/s
Iteration  27: 9187062.334 ops/s
Iteration  28: 9194766.595 ops/s
Iteration  29: 9037864.429 ops/s
Iteration  30: 9051741.365 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  9169722.588 ±(99.9%) 35767.092 ops/s [Average]
  (min, avg, max) = (8981272.162, 9169722.588, 9212820.866), stdev = 53534.504
  CI (99.9%): [9133955.496, 9205489.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  9169722.588 ± 35767.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4444902.333 ops/s
# Warmup Iteration   2: 8267753.774 ops/s
# Warmup Iteration   3: 8817418.037 ops/s
# Warmup Iteration   4: 8899346.224 ops/s
# Warmup Iteration   5: 7470328.404 ops/s
# Warmup Iteration   6: 8918896.462 ops/s
# Warmup Iteration   7: 8912007.836 ops/s
# Warmup Iteration   8: 8915236.375 ops/s
# Warmup Iteration   9: 8847098.639 ops/s
# Warmup Iteration  10: 8901642.423 ops/s
# Warmup Iteration  11: 8903444.490 ops/s
# Warmup Iteration  12: 8904632.103 ops/s
# Warmup Iteration  13: 8904045.474 ops/s
# Warmup Iteration  14: 8917953.911 ops/s
# Warmup Iteration  15: 8921420.788 ops/s
# Warmup Iteration  16: 8866284.541 ops/s
# Warmup Iteration  17: 8900543.240 ops/s
# Warmup Iteration  18: 8913918.877 ops/s
# Warmup Iteration  19: 8895016.233 ops/s
# Warmup Iteration  20: 8924841.670 ops/s
# Warmup Iteration  21: 8889972.817 ops/s
# Warmup Iteration  22: 8857790.424 ops/s
# Warmup Iteration  23: 8916442.191 ops/s
# Warmup Iteration  24: 8915522.444 ops/s
# Warmup Iteration  25: 8897245.145 ops/s
# Warmup Iteration  26: 8910844.904 ops/s
# Warmup Iteration  27: 8901044.654 ops/s
# Warmup Iteration  28: 8898202.847 ops/s
# Warmup Iteration  29: 8805863.594 ops/s
# Warmup Iteration  30: 8848101.151 ops/s
Iteration   1: 8912435.048 ops/s
Iteration   2: 8919174.279 ops/s
Iteration   3: 8928741.415 ops/s
Iteration   4: 8912245.233 ops/s
Iteration   5: 8921569.158 ops/s
Iteration   6: 8899956.964 ops/s
Iteration   7: 8807136.059 ops/s
Iteration   8: 8901944.313 ops/s
Iteration   9: 8903307.449 ops/s
Iteration  10: 8918088.258 ops/s
Iteration  11: 8894088.686 ops/s
Iteration  12: 8917029.791 ops/s
Iteration  13: 8922965.571 ops/s
Iteration  14: 8895077.061 ops/s
Iteration  15: 8877426.451 ops/s
Iteration  16: 8921443.394 ops/s
Iteration  17: 8776498.833 ops/s
Iteration  18: 8846274.618 ops/s
Iteration  19: 8931416.487 ops/s
Iteration  20: 8918463.928 ops/s
Iteration  21: 8923721.628 ops/s
Iteration  22: 8787068.714 ops/s
Iteration  23: 8885884.346 ops/s
Iteration  24: 8907653.554 ops/s
Iteration  25: 8921215.435 ops/s
Iteration  26: 8903166.451 ops/s
Iteration  27: 8931498.079 ops/s
Iteration  28: 8765877.902 ops/s
Iteration  29: 8910103.643 ops/s
Iteration  30: 8866246.743 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  8890923.983 ±(99.9%) 31393.010 ops/s [Average]
  (min, avg, max) = (8765877.902, 8890923.983, 8931498.079), stdev = 46987.583
  CI (99.9%): [8859530.973, 8922316.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  8890923.983 ± 31393.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4409822.224 ops/s
# Warmup Iteration   2: 8250466.668 ops/s
# Warmup Iteration   3: 8834205.504 ops/s
# Warmup Iteration   4: 8761758.919 ops/s
# Warmup Iteration   5: 7382852.949 ops/s
# Warmup Iteration   6: 8888555.018 ops/s
# Warmup Iteration   7: 8895769.687 ops/s
# Warmup Iteration   8: 8883514.099 ops/s
# Warmup Iteration   9: 8908412.541 ops/s
# Warmup Iteration  10: 8741447.994 ops/s
# Warmup Iteration  11: 8841037.723 ops/s
# Warmup Iteration  12: 8873500.924 ops/s
# Warmup Iteration  13: 8818440.216 ops/s
# Warmup Iteration  14: 8896411.318 ops/s
# Warmup Iteration  15: 8868742.738 ops/s
# Warmup Iteration  16: 8874507.204 ops/s
# Warmup Iteration  17: 8894337.769 ops/s
# Warmup Iteration  18: 8887696.038 ops/s
# Warmup Iteration  19: 8888388.616 ops/s
# Warmup Iteration  20: 8902745.189 ops/s
# Warmup Iteration  21: 8872428.422 ops/s
# Warmup Iteration  22: 8906639.873 ops/s
# Warmup Iteration  23: 8832216.752 ops/s
# Warmup Iteration  24: 8886872.976 ops/s
# Warmup Iteration  25: 8739942.190 ops/s
# Warmup Iteration  26: 8901527.295 ops/s
# Warmup Iteration  27: 8904191.573 ops/s
# Warmup Iteration  28: 8772383.051 ops/s
# Warmup Iteration  29: 8839277.202 ops/s
# Warmup Iteration  30: 8907557.144 ops/s
Iteration   1: 8894008.026 ops/s
Iteration   2: 8899335.070 ops/s
Iteration   3: 8711297.382 ops/s
Iteration   4: 8929356.411 ops/s
Iteration   5: 8892114.550 ops/s
Iteration   6: 8880224.680 ops/s
Iteration   7: 8796587.176 ops/s
Iteration   8: 8885016.709 ops/s
Iteration   9: 8851481.621 ops/s
Iteration  10: 8768936.091 ops/s
Iteration  11: 8892182.939 ops/s
Iteration  12: 8879268.633 ops/s
Iteration  13: 8917717.735 ops/s
Iteration  14: 8903926.140 ops/s
Iteration  15: 8812221.970 ops/s
Iteration  16: 8878118.205 ops/s
Iteration  17: 8881599.140 ops/s
Iteration  18: 8887554.576 ops/s
Iteration  19: 8883135.149 ops/s
Iteration  20: 8877116.048 ops/s
Iteration  21: 8921761.249 ops/s
Iteration  22: 8852036.985 ops/s
Iteration  23: 8751073.637 ops/s
Iteration  24: 8907433.811 ops/s
Iteration  25: 8865555.963 ops/s
Iteration  26: 8751899.555 ops/s
Iteration  27: 8834493.151 ops/s
Iteration  28: 8890384.220 ops/s
Iteration  29: 8871604.219 ops/s
Iteration  30: 8899169.338 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  8862220.346 ±(99.9%) 36848.937 ops/s [Average]
  (min, avg, max) = (8711297.382, 8862220.346, 8929356.411), stdev = 55153.758
  CI (99.9%): [8825371.409, 8899069.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  8862220.346 ± 36848.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2504270.236 ops/s
# Warmup Iteration   2: 5181265.211 ops/s
# Warmup Iteration   3: 5495997.796 ops/s
# Warmup Iteration   4: 5552536.378 ops/s
# Warmup Iteration   5: 4592859.083 ops/s
# Warmup Iteration   6: 5570506.398 ops/s
# Warmup Iteration   7: 5573818.111 ops/s
# Warmup Iteration   8: 5540712.884 ops/s
# Warmup Iteration   9: 5504334.707 ops/s
# Warmup Iteration  10: 5566853.126 ops/s
# Warmup Iteration  11: 5565965.521 ops/s
# Warmup Iteration  12: 5567682.885 ops/s
# Warmup Iteration  13: 5586564.202 ops/s
# Warmup Iteration  14: 5553126.478 ops/s
# Warmup Iteration  15: 5515554.297 ops/s
# Warmup Iteration  16: 5570795.821 ops/s
# Warmup Iteration  17: 5558783.519 ops/s
# Warmup Iteration  18: 5562757.657 ops/s
# Warmup Iteration  19: 5569463.011 ops/s
# Warmup Iteration  20: 5563837.444 ops/s
# Warmup Iteration  21: 5519782.727 ops/s
# Warmup Iteration  22: 5541051.160 ops/s
# Warmup Iteration  23: 5570875.850 ops/s
# Warmup Iteration  24: 5552190.608 ops/s
# Warmup Iteration  25: 5564253.132 ops/s
# Warmup Iteration  26: 5557259.866 ops/s
# Warmup Iteration  27: 5521555.959 ops/s
# Warmup Iteration  28: 5568652.585 ops/s
# Warmup Iteration  29: 5558294.085 ops/s
# Warmup Iteration  30: 5536007.565 ops/s
Iteration   1: 5578635.631 ops/s
Iteration   2: 5552264.919 ops/s
Iteration   3: 5567476.723 ops/s
Iteration   4: 5548408.089 ops/s
Iteration   5: 5483880.236 ops/s
Iteration   6: 5558266.810 ops/s
Iteration   7: 5555622.981 ops/s
Iteration   8: 5567989.320 ops/s
Iteration   9: 5547634.814 ops/s
Iteration  10: 5565019.000 ops/s
Iteration  11: 5553619.813 ops/s
Iteration  12: 5570665.072 ops/s
Iteration  13: 5568165.288 ops/s
Iteration  14: 5543402.499 ops/s
Iteration  15: 5562368.872 ops/s
Iteration  16: 5563880.371 ops/s
Iteration  17: 5574366.888 ops/s
Iteration  18: 5550874.484 ops/s
Iteration  19: 5550606.386 ops/s
Iteration  20: 5371298.917 ops/s
Iteration  21: 5573765.383 ops/s
Iteration  22: 5569499.432 ops/s
Iteration  23: 5563201.304 ops/s
Iteration  24: 5477290.929 ops/s
Iteration  25: 5569688.761 ops/s
Iteration  26: 5560403.018 ops/s
Iteration  27: 5557856.432 ops/s
Iteration  28: 5549176.253 ops/s
Iteration  29: 5546532.054 ops/s
Iteration  30: 5445683.840 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  5544918.151 ±(99.9%) 29602.347 ops/s [Average]
  (min, avg, max) = (5371298.917, 5544918.151, 5578635.631), stdev = 44307.402
  CI (99.9%): [5515315.804, 5574520.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  5544918.151 ± 29602.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4459269.390 ops/s
# Warmup Iteration   2: 8282715.089 ops/s
# Warmup Iteration   3: 8761014.276 ops/s
# Warmup Iteration   4: 8741588.389 ops/s
# Warmup Iteration   5: 7394034.791 ops/s
# Warmup Iteration   6: 8697367.631 ops/s
# Warmup Iteration   7: 8782626.446 ops/s
# Warmup Iteration   8: 8762107.556 ops/s
# Warmup Iteration   9: 8813263.742 ops/s
# Warmup Iteration  10: 8830640.359 ops/s
# Warmup Iteration  11: 8835787.086 ops/s
# Warmup Iteration  12: 8782373.035 ops/s
# Warmup Iteration  13: 8835971.637 ops/s
# Warmup Iteration  14: 8791522.650 ops/s
# Warmup Iteration  15: 8761970.857 ops/s
# Warmup Iteration  16: 8768813.231 ops/s
# Warmup Iteration  17: 8843726.925 ops/s
# Warmup Iteration  18: 8760862.107 ops/s
# Warmup Iteration  19: 8792882.809 ops/s
# Warmup Iteration  20: 8731377.409 ops/s
# Warmup Iteration  21: 8710415.284 ops/s
# Warmup Iteration  22: 8812125.352 ops/s
# Warmup Iteration  23: 8824982.766 ops/s
# Warmup Iteration  24: 8766893.743 ops/s
# Warmup Iteration  25: 8795051.753 ops/s
# Warmup Iteration  26: 8840788.260 ops/s
# Warmup Iteration  27: 8816808.248 ops/s
# Warmup Iteration  28: 8851526.479 ops/s
# Warmup Iteration  29: 8835550.018 ops/s
# Warmup Iteration  30: 8735371.199 ops/s
Iteration   1: 8771787.959 ops/s
Iteration   2: 8835621.413 ops/s
Iteration   3: 8832735.132 ops/s
Iteration   4: 8831146.579 ops/s
Iteration   5: 8790832.879 ops/s
Iteration   6: 8825768.061 ops/s
Iteration   7: 8751827.740 ops/s
Iteration   8: 8814754.629 ops/s
Iteration   9: 8709188.738 ops/s
Iteration  10: 8848136.967 ops/s
Iteration  11: 8833690.682 ops/s
Iteration  12: 8842552.254 ops/s
Iteration  13: 8594261.187 ops/s
Iteration  14: 8822299.294 ops/s
Iteration  15: 8724338.777 ops/s
Iteration  16: 8828964.211 ops/s
Iteration  17: 8864738.012 ops/s
Iteration  18: 8817134.977 ops/s
Iteration  19: 8826587.652 ops/s
Iteration  20: 8843552.355 ops/s
Iteration  21: 8767759.108 ops/s
Iteration  22: 8834837.379 ops/s
Iteration  23: 8842103.676 ops/s
Iteration  24: 8820354.484 ops/s
Iteration  25: 8788891.369 ops/s
Iteration  26: 8700708.590 ops/s
Iteration  27: 8827452.763 ops/s
Iteration  28: 8839778.683 ops/s
Iteration  29: 8775000.185 ops/s
Iteration  30: 8846252.674 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  8801768.614 ±(99.9%) 38601.861 ops/s [Average]
  (min, avg, max) = (8594261.187, 8801768.614, 8864738.012), stdev = 57777.452
  CI (99.9%): [8763166.753, 8840370.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  8801768.614 ± 38601.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4442300.123 ops/s
# Warmup Iteration   2: 8289621.800 ops/s
# Warmup Iteration   3: 8812256.374 ops/s
# Warmup Iteration   4: 8867530.546 ops/s
# Warmup Iteration   5: 7450753.230 ops/s
# Warmup Iteration   6: 8862608.468 ops/s
# Warmup Iteration   7: 8836888.153 ops/s
# Warmup Iteration   8: 8825287.722 ops/s
# Warmup Iteration   9: 8781319.020 ops/s
# Warmup Iteration  10: 8867028.224 ops/s
# Warmup Iteration  11: 8858313.158 ops/s
# Warmup Iteration  12: 8836685.577 ops/s
# Warmup Iteration  13: 8791741.533 ops/s
# Warmup Iteration  14: 8786310.776 ops/s
# Warmup Iteration  15: 8798285.359 ops/s
# Warmup Iteration  16: 8860888.439 ops/s
# Warmup Iteration  17: 8802175.170 ops/s
# Warmup Iteration  18: 8838289.698 ops/s
# Warmup Iteration  19: 8833780.275 ops/s
# Warmup Iteration  20: 8871134.202 ops/s
# Warmup Iteration  21: 8872346.514 ops/s
# Warmup Iteration  22: 8866929.898 ops/s
# Warmup Iteration  23: 8828070.136 ops/s
# Warmup Iteration  24: 8865799.749 ops/s
# Warmup Iteration  25: 8886892.280 ops/s
# Warmup Iteration  26: 8863789.734 ops/s
# Warmup Iteration  27: 8735525.913 ops/s
# Warmup Iteration  28: 8877132.353 ops/s
# Warmup Iteration  29: 8789202.224 ops/s
# Warmup Iteration  30: 8864127.739 ops/s
Iteration   1: 8875458.498 ops/s
Iteration   2: 8717038.341 ops/s
Iteration   3: 8849995.559 ops/s
Iteration   4: 8857796.655 ops/s
Iteration   5: 8725992.194 ops/s
Iteration   6: 8869373.396 ops/s
Iteration   7: 8871395.184 ops/s
Iteration   8: 8842560.817 ops/s
Iteration   9: 8883387.603 ops/s
Iteration  10: 8713366.863 ops/s
Iteration  11: 8858260.520 ops/s
Iteration  12: 8584355.677 ops/s
Iteration  13: 8870970.254 ops/s
Iteration  14: 8864585.005 ops/s
Iteration  15: 8851432.862 ops/s
Iteration  16: 8887252.106 ops/s
Iteration  17: 8874035.722 ops/s
Iteration  18: 8870821.865 ops/s
Iteration  19: 8857846.103 ops/s
Iteration  20: 8844086.283 ops/s
Iteration  21: 8890864.933 ops/s
Iteration  22: 8860042.616 ops/s
Iteration  23: 8883178.025 ops/s
Iteration  24: 8864655.767 ops/s
Iteration  25: 8861130.593 ops/s
Iteration  26: 8831146.443 ops/s
Iteration  27: 8880682.661 ops/s
Iteration  28: 8850210.199 ops/s
Iteration  29: 8870453.552 ops/s
Iteration  30: 8873749.552 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  8841204.195 ±(99.9%) 44971.152 ops/s [Average]
  (min, avg, max) = (8584355.677, 8841204.195, 8890864.933), stdev = 67310.708
  CI (99.9%): [8796233.043, 8886175.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  8841204.195 ± 44971.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4293742.422 ops/s
# Warmup Iteration   2: 7930253.445 ops/s
# Warmup Iteration   3: 8682223.524 ops/s
# Warmup Iteration   4: 8680024.685 ops/s
# Warmup Iteration   5: 7474916.059 ops/s
# Warmup Iteration   6: 8484288.245 ops/s
# Warmup Iteration   7: 8595685.471 ops/s
# Warmup Iteration   8: 8713752.061 ops/s
# Warmup Iteration   9: 8673422.633 ops/s
# Warmup Iteration  10: 8679320.907 ops/s
# Warmup Iteration  11: 8666181.916 ops/s
# Warmup Iteration  12: 8678569.496 ops/s
# Warmup Iteration  13: 8684875.614 ops/s
# Warmup Iteration  14: 8599254.539 ops/s
# Warmup Iteration  15: 8686396.829 ops/s
# Warmup Iteration  16: 8630353.174 ops/s
# Warmup Iteration  17: 8665594.430 ops/s
# Warmup Iteration  18: 8696168.342 ops/s
# Warmup Iteration  19: 8698985.363 ops/s
# Warmup Iteration  20: 8702525.286 ops/s
# Warmup Iteration  21: 8685993.403 ops/s
# Warmup Iteration  22: 8668749.546 ops/s
# Warmup Iteration  23: 8697253.960 ops/s
# Warmup Iteration  24: 8697217.667 ops/s
# Warmup Iteration  25: 8713994.232 ops/s
# Warmup Iteration  26: 8688472.563 ops/s
# Warmup Iteration  27: 8696830.181 ops/s
# Warmup Iteration  28: 8687111.915 ops/s
# Warmup Iteration  29: 8630268.970 ops/s
# Warmup Iteration  30: 8693285.788 ops/s
Iteration   1: 8699315.439 ops/s
Iteration   2: 8676773.081 ops/s
Iteration   3: 8527753.852 ops/s
Iteration   4: 8662604.813 ops/s
Iteration   5: 8721695.292 ops/s
Iteration   6: 8696209.944 ops/s
Iteration   7: 8704199.719 ops/s
Iteration   8: 8689680.813 ops/s
Iteration   9: 8397995.363 ops/s
Iteration  10: 8704284.848 ops/s
Iteration  11: 8676223.481 ops/s
Iteration  12: 8674256.436 ops/s
Iteration  13: 8714032.854 ops/s
Iteration  14: 8683747.584 ops/s
Iteration  15: 8688566.555 ops/s
Iteration  16: 8693863.000 ops/s
Iteration  17: 8660791.559 ops/s
Iteration  18: 8716548.798 ops/s
Iteration  19: 8688037.483 ops/s
Iteration  20: 8683714.547 ops/s
Iteration  21: 8677150.720 ops/s
Iteration  22: 8706886.090 ops/s
Iteration  23: 8690314.974 ops/s
Iteration  24: 8713022.456 ops/s
Iteration  25: 8722608.405 ops/s
Iteration  26: 8699125.004 ops/s
Iteration  27: 8678758.595 ops/s
Iteration  28: 8553423.439 ops/s
Iteration  29: 8708081.682 ops/s
Iteration  30: 8708603.083 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  8673942.330 ±(99.9%) 44830.112 ops/s [Average]
  (min, avg, max) = (8397995.363, 8673942.330, 8722608.405), stdev = 67099.606
  CI (99.9%): [8629112.218, 8718772.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  8673942.330 ± 44830.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2557303.818 ops/s
# Warmup Iteration   2: 4514243.008 ops/s
# Warmup Iteration   3: 4919988.629 ops/s
# Warmup Iteration   4: 4965913.279 ops/s
# Warmup Iteration   5: 4153358.444 ops/s
# Warmup Iteration   6: 4963358.533 ops/s
# Warmup Iteration   7: 4974378.181 ops/s
# Warmup Iteration   8: 4945556.384 ops/s
# Warmup Iteration   9: 4972163.484 ops/s
# Warmup Iteration  10: 4971417.837 ops/s
# Warmup Iteration  11: 4964547.219 ops/s
# Warmup Iteration  12: 4964872.541 ops/s
# Warmup Iteration  13: 4977004.569 ops/s
# Warmup Iteration  14: 4964632.066 ops/s
# Warmup Iteration  15: 4969907.768 ops/s
# Warmup Iteration  16: 4958209.426 ops/s
# Warmup Iteration  17: 4968636.151 ops/s
# Warmup Iteration  18: 4958999.580 ops/s
# Warmup Iteration  19: 4942171.186 ops/s
# Warmup Iteration  20: 4971394.325 ops/s
# Warmup Iteration  21: 4966756.929 ops/s
# Warmup Iteration  22: 4977112.124 ops/s
# Warmup Iteration  23: 4957880.409 ops/s
# Warmup Iteration  24: 4974244.111 ops/s
# Warmup Iteration  25: 4925877.917 ops/s
# Warmup Iteration  26: 4972457.397 ops/s
# Warmup Iteration  27: 4959636.810 ops/s
# Warmup Iteration  28: 4960721.324 ops/s
# Warmup Iteration  29: 4921624.905 ops/s
# Warmup Iteration  30: 4917060.163 ops/s
Iteration   1: 4953596.657 ops/s
Iteration   2: 4892048.528 ops/s
Iteration   3: 4977597.560 ops/s
Iteration   4: 4961513.906 ops/s
Iteration   5: 4985660.627 ops/s
Iteration   6: 4981183.650 ops/s
Iteration   7: 4893907.487 ops/s
Iteration   8: 4987154.847 ops/s
Iteration   9: 4960219.293 ops/s
Iteration  10: 4977077.484 ops/s
Iteration  11: 4976937.695 ops/s
Iteration  12: 4972744.531 ops/s
Iteration  13: 4951510.773 ops/s
Iteration  14: 4977469.031 ops/s
Iteration  15: 4963000.291 ops/s
Iteration  16: 4967277.272 ops/s
Iteration  17: 4985611.058 ops/s
Iteration  18: 4952671.174 ops/s
Iteration  19: 4969743.919 ops/s
Iteration  20: 4971597.632 ops/s
Iteration  21: 4954249.718 ops/s
Iteration  22: 4886307.217 ops/s
Iteration  23: 4981605.835 ops/s
Iteration  24: 4972915.427 ops/s
Iteration  25: 4975852.915 ops/s
Iteration  26: 4983056.691 ops/s
Iteration  27: 4900829.633 ops/s
Iteration  28: 4961984.327 ops/s
Iteration  29: 4975750.157 ops/s
Iteration  30: 4965330.872 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  4960546.874 ±(99.9%) 19202.227 ops/s [Average]
  (min, avg, max) = (4886307.217, 4960546.874, 4987154.847), stdev = 28740.991
  CI (99.9%): [4941344.647, 4979749.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  4960546.874 ± 19202.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2945950.181 ops/s
# Warmup Iteration   2: 6263238.559 ops/s
# Warmup Iteration   3: 6583863.776 ops/s
# Warmup Iteration   4: 6661520.203 ops/s
# Warmup Iteration   5: 5531807.012 ops/s
# Warmup Iteration   6: 6685504.204 ops/s
# Warmup Iteration   7: 6675340.063 ops/s
# Warmup Iteration   8: 6692055.534 ops/s
# Warmup Iteration   9: 6684206.793 ops/s
# Warmup Iteration  10: 6646438.677 ops/s
# Warmup Iteration  11: 6661324.422 ops/s
# Warmup Iteration  12: 6677631.339 ops/s
# Warmup Iteration  13: 6671420.660 ops/s
# Warmup Iteration  14: 6686977.959 ops/s
# Warmup Iteration  15: 6675041.447 ops/s
# Warmup Iteration  16: 6641927.501 ops/s
# Warmup Iteration  17: 6682439.610 ops/s
# Warmup Iteration  18: 6635644.073 ops/s
# Warmup Iteration  19: 6686415.983 ops/s
# Warmup Iteration  20: 6639648.630 ops/s
# Warmup Iteration  21: 6654400.910 ops/s
# Warmup Iteration  22: 6635297.721 ops/s
# Warmup Iteration  23: 6653547.487 ops/s
# Warmup Iteration  24: 6689692.792 ops/s
# Warmup Iteration  25: 6674400.678 ops/s
# Warmup Iteration  26: 6682784.648 ops/s
# Warmup Iteration  27: 6682617.527 ops/s
# Warmup Iteration  28: 6689564.662 ops/s
# Warmup Iteration  29: 6674675.375 ops/s
# Warmup Iteration  30: 6627370.815 ops/s
Iteration   1: 6541260.849 ops/s
Iteration   2: 6485020.852 ops/s
Iteration   3: 6579430.181 ops/s
Iteration   4: 6687843.459 ops/s
Iteration   5: 6692498.351 ops/s
Iteration   6: 6673479.707 ops/s
Iteration   7: 6682697.731 ops/s
Iteration   8: 6676826.589 ops/s
Iteration   9: 6691147.574 ops/s
Iteration  10: 6630901.779 ops/s
Iteration  11: 6687529.562 ops/s
Iteration  12: 6674098.126 ops/s
Iteration  13: 6691081.467 ops/s
Iteration  14: 6682856.483 ops/s
Iteration  15: 6693777.207 ops/s
Iteration  16: 6576240.107 ops/s
Iteration  17: 6601523.394 ops/s
Iteration  18: 6689268.197 ops/s
Iteration  19: 6702026.213 ops/s
Iteration  20: 6660359.391 ops/s
Iteration  21: 6690743.816 ops/s
Iteration  22: 6645589.870 ops/s
Iteration  23: 6651038.356 ops/s
Iteration  24: 6663133.918 ops/s
Iteration  25: 6684454.858 ops/s
Iteration  26: 6687711.635 ops/s
Iteration  27: 6681372.153 ops/s
Iteration  28: 6670636.177 ops/s
Iteration  29: 6668019.424 ops/s
Iteration  30: 6646944.095 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds":
  6656317.051 ±(99.9%) 34086.939 ops/s [Average]
  (min, avg, max) = (6485020.852, 6656317.051, 6702026.213), stdev = 51019.730
  CI (99.9%): [6622230.112, 6690403.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds  thrpt   30  6656317.051 ± 34086.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8591020.916 ops/s
# Warmup Iteration   2: 15254510.538 ops/s
# Warmup Iteration   3: 16298139.648 ops/s
# Warmup Iteration   4: 16558131.874 ops/s
# Warmup Iteration   5: 15668968.643 ops/s
# Warmup Iteration   6: 14739429.603 ops/s
# Warmup Iteration   7: 16479827.604 ops/s
# Warmup Iteration   8: 16611888.102 ops/s
# Warmup Iteration   9: 16580831.004 ops/s
# Warmup Iteration  10: 16462158.295 ops/s
# Warmup Iteration  11: 16611776.464 ops/s
# Warmup Iteration  12: 16533450.241 ops/s
# Warmup Iteration  13: 16618211.168 ops/s
# Warmup Iteration  14: 16616157.025 ops/s
# Warmup Iteration  15: 16336011.752 ops/s
# Warmup Iteration  16: 16456996.477 ops/s
# Warmup Iteration  17: 16618599.066 ops/s
# Warmup Iteration  18: 16594381.263 ops/s
# Warmup Iteration  19: 16440983.873 ops/s
# Warmup Iteration  20: 16623630.830 ops/s
# Warmup Iteration  21: 16532723.514 ops/s
# Warmup Iteration  22: 16628815.218 ops/s
# Warmup Iteration  23: 16542073.158 ops/s
# Warmup Iteration  24: 16527862.995 ops/s
# Warmup Iteration  25: 16471110.525 ops/s
# Warmup Iteration  26: 16607573.939 ops/s
# Warmup Iteration  27: 16634607.692 ops/s
# Warmup Iteration  28: 16647585.614 ops/s
# Warmup Iteration  29: 16612272.785 ops/s
# Warmup Iteration  30: 16507216.147 ops/s
Iteration   1: 16650253.066 ops/s
Iteration   2: 16336613.600 ops/s
Iteration   3: 16643949.384 ops/s
Iteration   4: 16617728.039 ops/s
Iteration   5: 16621157.447 ops/s
Iteration   6: 16613814.458 ops/s
Iteration   7: 16620888.119 ops/s
Iteration   8: 16630240.907 ops/s
Iteration   9: 16587331.236 ops/s
Iteration  10: 16608417.937 ops/s
Iteration  11: 16647258.257 ops/s
Iteration  12: 16622375.575 ops/s
Iteration  13: 16657983.280 ops/s
Iteration  14: 16552649.653 ops/s
Iteration  15: 16622522.531 ops/s
Iteration  16: 16569197.388 ops/s
Iteration  17: 16578082.793 ops/s
Iteration  18: 16701304.604 ops/s
Iteration  19: 16646719.889 ops/s
Iteration  20: 16678008.003 ops/s
Iteration  21: 16668540.000 ops/s
Iteration  22: 16623029.325 ops/s
Iteration  23: 16445280.752 ops/s
Iteration  24: 16634475.326 ops/s
Iteration  25: 16413665.007 ops/s
Iteration  26: 16643634.497 ops/s
Iteration  27: 16583658.342 ops/s
Iteration  28: 16640462.340 ops/s
Iteration  29: 16598050.638 ops/s
Iteration  30: 16635994.211 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex":
  16603109.554 ±(99.9%) 51909.548 ops/s [Average]
  (min, avg, max) = (16336613.600, 16603109.554, 16701304.604), stdev = 77695.773
  CI (99.9%): [16551200.006, 16655019.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex  thrpt   30  16603109.554 ± 51909.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8542976.280 ops/s
# Warmup Iteration   2: 15269033.197 ops/s
# Warmup Iteration   3: 16470075.927 ops/s
# Warmup Iteration   4: 16336098.726 ops/s
# Warmup Iteration   5: 15743135.675 ops/s
# Warmup Iteration   6: 14483807.805 ops/s
# Warmup Iteration   7: 16493713.997 ops/s
# Warmup Iteration   8: 16474660.560 ops/s
# Warmup Iteration   9: 16480277.703 ops/s
# Warmup Iteration  10: 16424870.819 ops/s
# Warmup Iteration  11: 16480839.700 ops/s
# Warmup Iteration  12: 16463206.987 ops/s
# Warmup Iteration  13: 16475508.464 ops/s
# Warmup Iteration  14: 16417715.593 ops/s
# Warmup Iteration  15: 16522825.568 ops/s
# Warmup Iteration  16: 16437871.438 ops/s
# Warmup Iteration  17: 16466545.766 ops/s
# Warmup Iteration  18: 16337101.029 ops/s
# Warmup Iteration  19: 16481594.973 ops/s
# Warmup Iteration  20: 16455388.786 ops/s
# Warmup Iteration  21: 16432837.877 ops/s
# Warmup Iteration  22: 16354275.771 ops/s
# Warmup Iteration  23: 16376213.475 ops/s
# Warmup Iteration  24: 16456808.601 ops/s
# Warmup Iteration  25: 16459910.898 ops/s
# Warmup Iteration  26: 16465023.114 ops/s
# Warmup Iteration  27: 16339306.488 ops/s
# Warmup Iteration  28: 16397972.880 ops/s
# Warmup Iteration  29: 16385379.824 ops/s
# Warmup Iteration  30: 16472116.983 ops/s
Iteration   1: 16388159.485 ops/s
Iteration   2: 16460795.258 ops/s
Iteration   3: 16496387.857 ops/s
Iteration   4: 16312947.711 ops/s
Iteration   5: 16374484.732 ops/s
Iteration   6: 16475437.672 ops/s
Iteration   7: 16552164.752 ops/s
Iteration   8: 16486377.157 ops/s
Iteration   9: 16509555.144 ops/s
Iteration  10: 16430690.738 ops/s
Iteration  11: 16383725.849 ops/s
Iteration  12: 16518963.009 ops/s
Iteration  13: 16428286.320 ops/s
Iteration  14: 16518321.888 ops/s
Iteration  15: 16515358.415 ops/s
Iteration  16: 16263252.580 ops/s
Iteration  17: 16275579.732 ops/s
Iteration  18: 16383145.951 ops/s
Iteration  19: 16521697.845 ops/s
Iteration  20: 16411860.368 ops/s
Iteration  21: 16445882.772 ops/s
Iteration  22: 16213212.213 ops/s
Iteration  23: 16404298.167 ops/s
Iteration  24: 16497157.709 ops/s
Iteration  25: 16488185.479 ops/s
Iteration  26: 16423295.404 ops/s
Iteration  27: 16257552.034 ops/s
Iteration  28: 16483705.066 ops/s
Iteration  29: 16498489.177 ops/s
Iteration  30: 16504170.754 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex":
  16430771.375 ±(99.9%) 60368.013 ops/s [Average]
  (min, avg, max) = (16213212.213, 16430771.375, 16552164.752), stdev = 90356.007
  CI (99.9%): [16370403.362, 16491139.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  16430771.375 ± 60368.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1444179.203 ops/s
# Warmup Iteration   2: 2689173.875 ops/s
# Warmup Iteration   3: 3248231.006 ops/s
# Warmup Iteration   4: 3257241.233 ops/s
# Warmup Iteration   5: 3263405.190 ops/s
# Warmup Iteration   6: 2648229.946 ops/s
# Warmup Iteration   7: 3260581.726 ops/s
# Warmup Iteration   8: 3263952.881 ops/s
# Warmup Iteration   9: 3250759.012 ops/s
# Warmup Iteration  10: 3265347.586 ops/s
# Warmup Iteration  11: 3249171.115 ops/s
# Warmup Iteration  12: 3251690.024 ops/s
# Warmup Iteration  13: 3258314.959 ops/s
# Warmup Iteration  14: 3236213.021 ops/s
# Warmup Iteration  15: 3261904.277 ops/s
# Warmup Iteration  16: 3263489.917 ops/s
# Warmup Iteration  17: 3252271.993 ops/s
# Warmup Iteration  18: 3257920.719 ops/s
# Warmup Iteration  19: 3235573.763 ops/s
# Warmup Iteration  20: 3245108.607 ops/s
# Warmup Iteration  21: 3201939.445 ops/s
# Warmup Iteration  22: 3232510.131 ops/s
# Warmup Iteration  23: 3258070.835 ops/s
# Warmup Iteration  24: 3257128.510 ops/s
# Warmup Iteration  25: 3238022.906 ops/s
# Warmup Iteration  26: 3260387.168 ops/s
# Warmup Iteration  27: 3228977.104 ops/s
# Warmup Iteration  28: 3253026.039 ops/s
# Warmup Iteration  29: 3253558.323 ops/s
# Warmup Iteration  30: 3254211.924 ops/s
Iteration   1: 3262698.971 ops/s
Iteration   2: 3257169.616 ops/s
Iteration   3: 3254900.127 ops/s
Iteration   4: 3255349.291 ops/s
Iteration   5: 3265042.201 ops/s
Iteration   6: 3243738.558 ops/s
Iteration   7: 3255005.412 ops/s
Iteration   8: 3269184.904 ops/s
Iteration   9: 3260858.225 ops/s
Iteration  10: 3266714.744 ops/s
Iteration  11: 3255808.789 ops/s
Iteration  12: 3258861.225 ops/s
Iteration  13: 3258957.354 ops/s
Iteration  14: 3259388.974 ops/s
Iteration  15: 3262494.471 ops/s
Iteration  16: 3249255.521 ops/s
Iteration  17: 3261107.624 ops/s
Iteration  18: 3270256.635 ops/s
Iteration  19: 3259353.052 ops/s
Iteration  20: 3262268.293 ops/s
Iteration  21: 3260046.091 ops/s
Iteration  22: 3259878.450 ops/s
Iteration  23: 3268415.275 ops/s
Iteration  24: 3247222.732 ops/s
Iteration  25: 3262334.484 ops/s
Iteration  26: 3252135.144 ops/s
Iteration  27: 3265143.005 ops/s
Iteration  28: 3263820.678 ops/s
Iteration  29: 3270708.439 ops/s
Iteration  30: 3220322.257 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  3258614.685 ±(99.9%) 6489.193 ops/s [Average]
  (min, avg, max) = (3220322.257, 3258614.685, 3270708.439), stdev = 9712.719
  CI (99.9%): [3252125.492, 3265103.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  3258614.685 ± 6489.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3112095.145 ops/s
# Warmup Iteration   2: 7641053.283 ops/s
# Warmup Iteration   3: 7783920.008 ops/s
# Warmup Iteration   4: 6522382.680 ops/s
# Warmup Iteration   5: 7796493.558 ops/s
# Warmup Iteration   6: 7799117.074 ops/s
# Warmup Iteration   7: 7776013.957 ops/s
# Warmup Iteration   8: 7797844.295 ops/s
# Warmup Iteration   9: 7793495.406 ops/s
# Warmup Iteration  10: 7792549.412 ops/s
# Warmup Iteration  11: 7795572.024 ops/s
# Warmup Iteration  12: 7733924.918 ops/s
# Warmup Iteration  13: 7776529.007 ops/s
# Warmup Iteration  14: 7773120.369 ops/s
# Warmup Iteration  15: 7775510.867 ops/s
# Warmup Iteration  16: 7802096.425 ops/s
# Warmup Iteration  17: 7780868.461 ops/s
# Warmup Iteration  18: 7745415.382 ops/s
# Warmup Iteration  19: 7799868.809 ops/s
# Warmup Iteration  20: 7736121.974 ops/s
# Warmup Iteration  21: 7719742.562 ops/s
# Warmup Iteration  22: 7796791.732 ops/s
# Warmup Iteration  23: 7795694.785 ops/s
# Warmup Iteration  24: 7734203.281 ops/s
# Warmup Iteration  25: 7805612.178 ops/s
# Warmup Iteration  26: 7785091.261 ops/s
# Warmup Iteration  27: 7770897.816 ops/s
# Warmup Iteration  28: 7739043.999 ops/s
# Warmup Iteration  29: 7723120.524 ops/s
# Warmup Iteration  30: 7690887.808 ops/s
Iteration   1: 7755195.106 ops/s
Iteration   2: 7790617.417 ops/s
Iteration   3: 7799928.217 ops/s
Iteration   4: 7694302.098 ops/s
Iteration   5: 7596407.115 ops/s
Iteration   6: 7788151.461 ops/s
Iteration   7: 7784764.489 ops/s
Iteration   8: 7828303.264 ops/s
Iteration   9: 7789493.478 ops/s
Iteration  10: 7766381.378 ops/s
Iteration  11: 7790960.701 ops/s
Iteration  12: 7779751.265 ops/s
Iteration  13: 7745342.031 ops/s
Iteration  14: 7689858.331 ops/s
Iteration  15: 7797213.513 ops/s
Iteration  16: 7809256.786 ops/s
Iteration  17: 7781872.430 ops/s
Iteration  18: 7768035.052 ops/s
Iteration  19: 7817768.758 ops/s
Iteration  20: 7772444.014 ops/s
Iteration  21: 7796619.551 ops/s
Iteration  22: 7785855.836 ops/s
Iteration  23: 7782609.703 ops/s
Iteration  24: 7793599.858 ops/s
Iteration  25: 7664221.453 ops/s
Iteration  26: 7657328.980 ops/s
Iteration  27: 7787135.149 ops/s
Iteration  28: 7760741.817 ops/s
Iteration  29: 7788980.172 ops/s
Iteration  30: 7772960.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  7764536.664 ±(99.9%) 34967.232 ops/s [Average]
  (min, avg, max) = (7596407.115, 7764536.664, 7828303.264), stdev = 52337.310
  CI (99.9%): [7729569.432, 7799503.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  7764536.664 ± 34967.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708467.284 ops/s
# Warmup Iteration   2: 751182.062 ops/s
# Warmup Iteration   3: 993950.813 ops/s
# Warmup Iteration   4: 978848.559 ops/s
# Warmup Iteration   5: 990176.971 ops/s
# Warmup Iteration   6: 984584.762 ops/s
# Warmup Iteration   7: 981245.834 ops/s
# Warmup Iteration   8: 988587.782 ops/s
# Warmup Iteration   9: 983112.280 ops/s
# Warmup Iteration  10: 991510.688 ops/s
# Warmup Iteration  11: 842181.428 ops/s
# Warmup Iteration  12: 961202.574 ops/s
# Warmup Iteration  13: 987127.446 ops/s
# Warmup Iteration  14: 990550.985 ops/s
# Warmup Iteration  15: 987843.528 ops/s
# Warmup Iteration  16: 987454.066 ops/s
# Warmup Iteration  17: 1045748.012 ops/s
# Warmup Iteration  18: 1040352.396 ops/s
# Warmup Iteration  19: 1039453.954 ops/s
# Warmup Iteration  20: 1044745.788 ops/s
# Warmup Iteration  21: 1046497.504 ops/s
# Warmup Iteration  22: 1032074.269 ops/s
# Warmup Iteration  23: 1045841.889 ops/s
# Warmup Iteration  24: 1042802.669 ops/s
# Warmup Iteration  25: 1045071.918 ops/s
# Warmup Iteration  26: 1038737.333 ops/s
# Warmup Iteration  27: 1044501.544 ops/s
# Warmup Iteration  28: 1044515.697 ops/s
# Warmup Iteration  29: 1043137.039 ops/s
# Warmup Iteration  30: 1047045.096 ops/s
Iteration   1: 1048928.705 ops/s
Iteration   2: 1050017.360 ops/s
Iteration   3: 1045022.148 ops/s
Iteration   4: 1033117.649 ops/s
Iteration   5: 1043576.952 ops/s
Iteration   6: 1042359.788 ops/s
Iteration   7: 1041782.761 ops/s
Iteration   8: 1051749.992 ops/s
Iteration   9: 1029907.187 ops/s
Iteration  10: 1022763.834 ops/s
Iteration  11: 1049285.278 ops/s
Iteration  12: 1036351.702 ops/s
Iteration  13: 1047802.744 ops/s
Iteration  14: 1029583.371 ops/s
Iteration  15: 1047976.645 ops/s
Iteration  16: 1045368.729 ops/s
Iteration  17: 1043514.527 ops/s
Iteration  18: 1045980.802 ops/s
Iteration  19: 1048205.196 ops/s
Iteration  20: 1046886.284 ops/s
Iteration  21: 1045130.896 ops/s
Iteration  22: 1048364.493 ops/s
Iteration  23: 1047001.989 ops/s
Iteration  24: 1041740.851 ops/s
Iteration  25: 1046197.027 ops/s
Iteration  26: 1041205.075 ops/s
Iteration  27: 1045655.895 ops/s
Iteration  28: 1048646.796 ops/s
Iteration  29: 1041965.729 ops/s
Iteration  30: 1044656.706 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1043358.237 ±(99.9%) 4503.461 ops/s [Average]
  (min, avg, max) = (1022763.834, 1043358.237, 1051749.992), stdev = 6740.569
  CI (99.9%): [1038854.776, 1047861.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1043358.237 ± 4503.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 234703.282 ops/s
# Warmup Iteration   2: 248153.172 ops/s
# Warmup Iteration   3: 311386.554 ops/s
# Warmup Iteration   4: 311885.578 ops/s
# Warmup Iteration   5: 312980.010 ops/s
# Warmup Iteration   6: 314898.265 ops/s
# Warmup Iteration   7: 314460.679 ops/s
# Warmup Iteration   8: 315624.571 ops/s
# Warmup Iteration   9: 314667.753 ops/s
# Warmup Iteration  10: 314904.910 ops/s
# Warmup Iteration  11: 315820.457 ops/s
# Warmup Iteration  12: 295225.012 ops/s
# Warmup Iteration  13: 292598.981 ops/s
# Warmup Iteration  14: 316209.105 ops/s
# Warmup Iteration  15: 316251.889 ops/s
# Warmup Iteration  16: 313954.523 ops/s
# Warmup Iteration  17: 331084.378 ops/s
# Warmup Iteration  18: 335096.433 ops/s
# Warmup Iteration  19: 334144.481 ops/s
# Warmup Iteration  20: 334304.680 ops/s
# Warmup Iteration  21: 332706.698 ops/s
# Warmup Iteration  22: 334042.570 ops/s
# Warmup Iteration  23: 333939.722 ops/s
# Warmup Iteration  24: 334001.620 ops/s
# Warmup Iteration  25: 332929.186 ops/s
# Warmup Iteration  26: 333831.279 ops/s
# Warmup Iteration  27: 332820.097 ops/s
# Warmup Iteration  28: 334529.714 ops/s
# Warmup Iteration  29: 334892.895 ops/s
# Warmup Iteration  30: 332438.042 ops/s
Iteration   1: 333948.744 ops/s
Iteration   2: 333204.909 ops/s
Iteration   3: 334517.306 ops/s
Iteration   4: 333960.307 ops/s
Iteration   5: 331752.029 ops/s
Iteration   6: 334387.335 ops/s
Iteration   7: 333991.522 ops/s
Iteration   8: 333381.093 ops/s
Iteration   9: 333648.925 ops/s
Iteration  10: 332320.424 ops/s
Iteration  11: 333408.697 ops/s
Iteration  12: 334958.126 ops/s
Iteration  13: 334883.797 ops/s
Iteration  14: 334074.963 ops/s
Iteration  15: 333802.244 ops/s
Iteration  16: 334545.039 ops/s
Iteration  17: 335289.505 ops/s
Iteration  18: 334689.797 ops/s
Iteration  19: 333660.980 ops/s
Iteration  20: 334388.310 ops/s
Iteration  21: 333176.987 ops/s
Iteration  22: 334074.512 ops/s
Iteration  23: 334910.427 ops/s
Iteration  24: 334820.388 ops/s
Iteration  25: 332236.582 ops/s
Iteration  26: 334543.887 ops/s
Iteration  27: 332989.606 ops/s
Iteration  28: 333656.908 ops/s
Iteration  29: 333309.634 ops/s
Iteration  30: 334869.396 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator":
  333913.413 ±(99.9%) 581.469 ops/s [Average]
  (min, avg, max) = (331752.029, 333913.413, 335289.505), stdev = 870.316
  CI (99.9%): [333331.943, 334494.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator  thrpt   30  333913.413 ± 581.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7453368.624 ops/s
# Warmup Iteration   2: 16196491.017 ops/s
# Warmup Iteration   3: 13905107.972 ops/s
# Warmup Iteration   4: 16421270.755 ops/s
# Warmup Iteration   5: 16362626.856 ops/s
# Warmup Iteration   6: 16115430.847 ops/s
# Warmup Iteration   7: 16255455.022 ops/s
# Warmup Iteration   8: 16359996.993 ops/s
# Warmup Iteration   9: 16336858.180 ops/s
# Warmup Iteration  10: 16391495.368 ops/s
# Warmup Iteration  11: 16421650.146 ops/s
# Warmup Iteration  12: 16374880.440 ops/s
# Warmup Iteration  13: 16331721.103 ops/s
# Warmup Iteration  14: 16402208.319 ops/s
# Warmup Iteration  15: 16420747.399 ops/s
# Warmup Iteration  16: 16347083.399 ops/s
# Warmup Iteration  17: 16437543.482 ops/s
# Warmup Iteration  18: 16116751.276 ops/s
# Warmup Iteration  19: 16432494.843 ops/s
# Warmup Iteration  20: 16440517.725 ops/s
# Warmup Iteration  21: 16260644.549 ops/s
# Warmup Iteration  22: 16411799.967 ops/s
# Warmup Iteration  23: 16434211.000 ops/s
# Warmup Iteration  24: 16257119.740 ops/s
# Warmup Iteration  25: 16355396.069 ops/s
# Warmup Iteration  26: 16430356.924 ops/s
# Warmup Iteration  27: 16403550.746 ops/s
# Warmup Iteration  28: 16406314.917 ops/s
# Warmup Iteration  29: 16396023.618 ops/s
# Warmup Iteration  30: 16113958.614 ops/s
Iteration   1: 16430283.971 ops/s
Iteration   2: 16407626.102 ops/s
Iteration   3: 16388522.939 ops/s
Iteration   4: 16416543.342 ops/s
Iteration   5: 16467907.967 ops/s
Iteration   6: 16083209.453 ops/s
Iteration   7: 16451995.500 ops/s
Iteration   8: 16417740.554 ops/s
Iteration   9: 16350572.788 ops/s
Iteration  10: 16462838.252 ops/s
Iteration  11: 16411541.887 ops/s
Iteration  12: 16340717.760 ops/s
Iteration  13: 16179614.685 ops/s
Iteration  14: 16361283.231 ops/s
Iteration  15: 16339092.792 ops/s
Iteration  16: 16164131.844 ops/s
Iteration  17: 16090123.978 ops/s
Iteration  18: 16413069.809 ops/s
Iteration  19: 16366368.383 ops/s
Iteration  20: 16129931.405 ops/s
Iteration  21: 16371071.552 ops/s
Iteration  22: 16428498.512 ops/s
Iteration  23: 16429480.039 ops/s
Iteration  24: 16398771.392 ops/s
Iteration  25: 16415083.469 ops/s
Iteration  26: 16438278.695 ops/s
Iteration  27: 16407264.807 ops/s
Iteration  28: 16443987.788 ops/s
Iteration  29: 16200277.853 ops/s
Iteration  30: 16368777.793 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  16352486.951 ±(99.9%) 76319.854 ops/s [Average]
  (min, avg, max) = (16083209.453, 16352486.951, 16467907.967), stdev = 114231.974
  CI (99.9%): [16276167.097, 16428806.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  16352486.951 ± 76319.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2989118.652 ops/s
# Warmup Iteration   2: 6518967.266 ops/s
# Warmup Iteration   3: 6569588.456 ops/s
# Warmup Iteration   4: 5843299.840 ops/s
# Warmup Iteration   5: 6603887.451 ops/s
# Warmup Iteration   6: 6779205.226 ops/s
# Warmup Iteration   7: 6769290.770 ops/s
# Warmup Iteration   8: 6779113.081 ops/s
# Warmup Iteration   9: 6766996.082 ops/s
# Warmup Iteration  10: 6777740.045 ops/s
# Warmup Iteration  11: 6779149.988 ops/s
# Warmup Iteration  12: 6782632.811 ops/s
# Warmup Iteration  13: 6794593.685 ops/s
# Warmup Iteration  14: 6724022.017 ops/s
# Warmup Iteration  15: 6774665.260 ops/s
# Warmup Iteration  16: 6767706.112 ops/s
# Warmup Iteration  17: 6727304.235 ops/s
# Warmup Iteration  18: 6796597.066 ops/s
# Warmup Iteration  19: 6779407.906 ops/s
# Warmup Iteration  20: 6739575.332 ops/s
# Warmup Iteration  21: 6800681.751 ops/s
# Warmup Iteration  22: 6784442.569 ops/s
# Warmup Iteration  23: 6703606.664 ops/s
# Warmup Iteration  24: 6740284.561 ops/s
# Warmup Iteration  25: 6795994.206 ops/s
# Warmup Iteration  26: 6792207.164 ops/s
# Warmup Iteration  27: 6808722.962 ops/s
# Warmup Iteration  28: 6790515.008 ops/s
# Warmup Iteration  29: 6778902.131 ops/s
# Warmup Iteration  30: 6700629.067 ops/s
Iteration   1: 6785491.391 ops/s
Iteration   2: 6817784.649 ops/s
Iteration   3: 6805991.131 ops/s
Iteration   4: 6797883.196 ops/s
Iteration   5: 6793742.833 ops/s
Iteration   6: 6766593.378 ops/s
Iteration   7: 6774848.652 ops/s
Iteration   8: 6778954.396 ops/s
Iteration   9: 6810356.136 ops/s
Iteration  10: 6774609.774 ops/s
Iteration  11: 6801893.499 ops/s
Iteration  12: 6800625.100 ops/s
Iteration  13: 6789786.185 ops/s
Iteration  14: 6795477.791 ops/s
Iteration  15: 6804413.640 ops/s
Iteration  16: 6799447.290 ops/s
Iteration  17: 6798061.071 ops/s
Iteration  18: 6584330.106 ops/s
Iteration  19: 6798241.120 ops/s
Iteration  20: 6809030.939 ops/s
Iteration  21: 6784092.902 ops/s
Iteration  22: 6788649.590 ops/s
Iteration  23: 6772327.895 ops/s
Iteration  24: 6790963.286 ops/s
Iteration  25: 6769535.141 ops/s
Iteration  26: 6799011.933 ops/s
Iteration  27: 6751993.909 ops/s
Iteration  28: 6748993.276 ops/s
Iteration  29: 6801790.817 ops/s
Iteration  30: 6802911.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition":
  6783261.079 ±(99.9%) 27454.863 ops/s [Average]
  (min, avg, max) = (6584330.106, 6783261.079, 6817784.649), stdev = 41093.149
  CI (99.9%): [6755806.216, 6810715.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  6783261.079 ± 27454.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3333840.914 ops/s
# Warmup Iteration   2: 6985573.422 ops/s
# Warmup Iteration   3: 7087744.857 ops/s
# Warmup Iteration   4: 7053523.955 ops/s
# Warmup Iteration   5: 6028235.178 ops/s
# Warmup Iteration   6: 7088722.258 ops/s
# Warmup Iteration   7: 7130640.967 ops/s
# Warmup Iteration   8: 7015119.002 ops/s
# Warmup Iteration   9: 7109295.193 ops/s
# Warmup Iteration  10: 7130566.443 ops/s
# Warmup Iteration  11: 7114091.518 ops/s
# Warmup Iteration  12: 7133982.228 ops/s
# Warmup Iteration  13: 7128559.494 ops/s
# Warmup Iteration  14: 7126553.398 ops/s
# Warmup Iteration  15: 7105889.093 ops/s
# Warmup Iteration  16: 7103679.872 ops/s
# Warmup Iteration  17: 7109384.890 ops/s
# Warmup Iteration  18: 7087720.191 ops/s
# Warmup Iteration  19: 7114106.499 ops/s
# Warmup Iteration  20: 7142548.775 ops/s
# Warmup Iteration  21: 7115409.764 ops/s
# Warmup Iteration  22: 7129895.856 ops/s
# Warmup Iteration  23: 7046524.244 ops/s
# Warmup Iteration  24: 7090655.033 ops/s
# Warmup Iteration  25: 7123107.230 ops/s
# Warmup Iteration  26: 7129913.982 ops/s
# Warmup Iteration  27: 7107544.288 ops/s
# Warmup Iteration  28: 7102823.485 ops/s
# Warmup Iteration  29: 7104582.829 ops/s
# Warmup Iteration  30: 7119388.294 ops/s
Iteration   1: 7055601.615 ops/s
Iteration   2: 7012747.475 ops/s
Iteration   3: 7131551.505 ops/s
Iteration   4: 7157574.894 ops/s
Iteration   5: 7141129.374 ops/s
Iteration   6: 7109069.294 ops/s
Iteration   7: 7124816.104 ops/s
Iteration   8: 7074349.649 ops/s
Iteration   9: 7127438.941 ops/s
Iteration  10: 7115354.840 ops/s
Iteration  11: 7123457.965 ops/s
Iteration  12: 7121386.865 ops/s
Iteration  13: 7130571.063 ops/s
Iteration  14: 7098671.257 ops/s
Iteration  15: 7125004.591 ops/s
Iteration  16: 7129671.276 ops/s
Iteration  17: 7114327.279 ops/s
Iteration  18: 7016758.252 ops/s
Iteration  19: 7012611.532 ops/s
Iteration  20: 7128247.860 ops/s
Iteration  21: 7008333.635 ops/s
Iteration  22: 7012962.464 ops/s
Iteration  23: 7130487.501 ops/s
Iteration  24: 7126057.054 ops/s
Iteration  25: 7035030.180 ops/s
Iteration  26: 7119921.076 ops/s
Iteration  27: 7122144.765 ops/s
Iteration  28: 7137566.736 ops/s
Iteration  29: 7141025.025 ops/s
Iteration  30: 7104163.295 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  7099601.112 ±(99.9%) 31078.730 ops/s [Average]
  (min, avg, max) = (7008333.635, 7099601.112, 7157574.894), stdev = 46517.183
  CI (99.9%): [7068522.383, 7130679.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  7099601.112 ± 31078.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2661155.568 ops/s
# Warmup Iteration   2: 5115845.982 ops/s
# Warmup Iteration   3: 5471027.781 ops/s
# Warmup Iteration   4: 5434020.744 ops/s
# Warmup Iteration   5: 4595161.388 ops/s
# Warmup Iteration   6: 5489853.614 ops/s
# Warmup Iteration   7: 5507883.075 ops/s
# Warmup Iteration   8: 5448828.234 ops/s
# Warmup Iteration   9: 5513241.024 ops/s
# Warmup Iteration  10: 5492546.679 ops/s
# Warmup Iteration  11: 5457794.983 ops/s
# Warmup Iteration  12: 5482516.292 ops/s
# Warmup Iteration  13: 5501316.725 ops/s
# Warmup Iteration  14: 5495844.595 ops/s
# Warmup Iteration  15: 5504877.984 ops/s
# Warmup Iteration  16: 5491981.663 ops/s
# Warmup Iteration  17: 5506010.305 ops/s
# Warmup Iteration  18: 5491647.093 ops/s
# Warmup Iteration  19: 5486141.860 ops/s
# Warmup Iteration  20: 5501838.462 ops/s
# Warmup Iteration  21: 5464212.028 ops/s
# Warmup Iteration  22: 5510420.560 ops/s
# Warmup Iteration  23: 5458468.954 ops/s
# Warmup Iteration  24: 5476812.841 ops/s
# Warmup Iteration  25: 5485484.087 ops/s
# Warmup Iteration  26: 5492284.987 ops/s
# Warmup Iteration  27: 5445007.068 ops/s
# Warmup Iteration  28: 5485000.364 ops/s
# Warmup Iteration  29: 5485439.782 ops/s
# Warmup Iteration  30: 5443623.661 ops/s
Iteration   1: 5503230.731 ops/s
Iteration   2: 5497028.940 ops/s
Iteration   3: 5508574.479 ops/s
Iteration   4: 5490571.002 ops/s
Iteration   5: 5500867.657 ops/s
Iteration   6: 5505249.875 ops/s
Iteration   7: 5499990.196 ops/s
Iteration   8: 5488426.036 ops/s
Iteration   9: 5507984.715 ops/s
Iteration  10: 5502242.457 ops/s
Iteration  11: 5513696.628 ops/s
Iteration  12: 5478648.985 ops/s
Iteration  13: 5497959.381 ops/s
Iteration  14: 5518896.303 ops/s
Iteration  15: 5509135.225 ops/s
Iteration  16: 5496440.193 ops/s
Iteration  17: 5516567.050 ops/s
Iteration  18: 5508115.678 ops/s
Iteration  19: 5488334.864 ops/s
Iteration  20: 5493087.656 ops/s
Iteration  21: 5497630.945 ops/s
Iteration  22: 5484693.769 ops/s
Iteration  23: 5511334.929 ops/s
Iteration  24: 5505105.413 ops/s
Iteration  25: 5418034.941 ops/s
Iteration  26: 5509278.140 ops/s
Iteration  27: 5507439.953 ops/s
Iteration  28: 5486407.480 ops/s
Iteration  29: 5505875.290 ops/s
Iteration  30: 5485002.654 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject":
  5497861.719 ±(99.9%) 12155.206 ops/s [Average]
  (min, avg, max) = (5418034.941, 5497861.719, 5518896.303), stdev = 18193.341
  CI (99.9%): [5485706.513, 5510016.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  5497861.719 ± 12155.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2673897.805 ops/s
# Warmup Iteration   2: 5104086.873 ops/s
# Warmup Iteration   3: 5502489.920 ops/s
# Warmup Iteration   4: 5398070.588 ops/s
# Warmup Iteration   5: 4560442.001 ops/s
# Warmup Iteration   6: 5463856.761 ops/s
# Warmup Iteration   7: 5452585.639 ops/s
# Warmup Iteration   8: 5494267.491 ops/s
# Warmup Iteration   9: 5466052.344 ops/s
# Warmup Iteration  10: 5471338.888 ops/s
# Warmup Iteration  11: 5503617.669 ops/s
# Warmup Iteration  12: 5490225.922 ops/s
# Warmup Iteration  13: 5452614.654 ops/s
# Warmup Iteration  14: 5437787.375 ops/s
# Warmup Iteration  15: 5500980.564 ops/s
# Warmup Iteration  16: 5513732.726 ops/s
# Warmup Iteration  17: 5500231.646 ops/s
# Warmup Iteration  18: 5483372.367 ops/s
# Warmup Iteration  19: 5460319.131 ops/s
# Warmup Iteration  20: 5494981.736 ops/s
# Warmup Iteration  21: 5487802.081 ops/s
# Warmup Iteration  22: 5492275.385 ops/s
# Warmup Iteration  23: 5492343.261 ops/s
# Warmup Iteration  24: 5471503.245 ops/s
# Warmup Iteration  25: 5449399.625 ops/s
# Warmup Iteration  26: 5469339.414 ops/s
# Warmup Iteration  27: 5502804.098 ops/s
# Warmup Iteration  28: 5478878.806 ops/s
# Warmup Iteration  29: 5472126.628 ops/s
# Warmup Iteration  30: 5409092.590 ops/s
Iteration   1: 5431228.753 ops/s
Iteration   2: 5423605.933 ops/s
Iteration   3: 5490767.176 ops/s
Iteration   4: 5492765.621 ops/s
Iteration   5: 5501967.449 ops/s
Iteration   6: 5522085.340 ops/s
Iteration   7: 5495201.519 ops/s
Iteration   8: 5495180.735 ops/s
Iteration   9: 5506616.048 ops/s
Iteration  10: 5491468.253 ops/s
Iteration  11: 5495317.176 ops/s
Iteration  12: 5483780.869 ops/s
Iteration  13: 5474628.961 ops/s
Iteration  14: 5508445.683 ops/s
Iteration  15: 5455521.755 ops/s
Iteration  16: 5464572.461 ops/s
Iteration  17: 5492677.498 ops/s
Iteration  18: 5462717.088 ops/s
Iteration  19: 5472832.142 ops/s
Iteration  20: 5499609.915 ops/s
Iteration  21: 5483109.162 ops/s
Iteration  22: 5482166.655 ops/s
Iteration  23: 5494112.803 ops/s
Iteration  24: 5466793.270 ops/s
Iteration  25: 5419241.766 ops/s
Iteration  26: 5504429.808 ops/s
Iteration  27: 5508081.391 ops/s
Iteration  28: 5504388.305 ops/s
Iteration  29: 5402959.298 ops/s
Iteration  30: 5406602.354 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  5477762.506 ±(99.9%) 21288.875 ops/s [Average]
  (min, avg, max) = (5402959.298, 5477762.506, 5522085.340), stdev = 31864.188
  CI (99.9%): [5456473.631, 5499051.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  5477762.506 ± 21288.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719484.595 ops/s
# Warmup Iteration   2: 764143.649 ops/s
# Warmup Iteration   3: 992142.459 ops/s
# Warmup Iteration   4: 984596.924 ops/s
# Warmup Iteration   5: 982639.692 ops/s
# Warmup Iteration   6: 989691.559 ops/s
# Warmup Iteration   7: 983389.895 ops/s
# Warmup Iteration   8: 984489.651 ops/s
# Warmup Iteration   9: 983858.769 ops/s
# Warmup Iteration  10: 992157.786 ops/s
# Warmup Iteration  11: 867395.411 ops/s
# Warmup Iteration  12: 956294.181 ops/s
# Warmup Iteration  13: 978831.425 ops/s
# Warmup Iteration  14: 984545.130 ops/s
# Warmup Iteration  15: 985345.597 ops/s
# Warmup Iteration  16: 974383.617 ops/s
# Warmup Iteration  17: 1036233.220 ops/s
# Warmup Iteration  18: 1034839.375 ops/s
# Warmup Iteration  19: 1042325.123 ops/s
# Warmup Iteration  20: 1034720.661 ops/s
# Warmup Iteration  21: 1032942.367 ops/s
# Warmup Iteration  22: 1043399.458 ops/s
# Warmup Iteration  23: 1034589.945 ops/s
# Warmup Iteration  24: 1041770.911 ops/s
# Warmup Iteration  25: 1034777.382 ops/s
# Warmup Iteration  26: 1036382.325 ops/s
# Warmup Iteration  27: 1043483.933 ops/s
# Warmup Iteration  28: 1041575.701 ops/s
# Warmup Iteration  29: 1039939.421 ops/s
# Warmup Iteration  30: 1037086.946 ops/s
Iteration   1: 1042634.144 ops/s
Iteration   2: 1045688.139 ops/s
Iteration   3: 1046138.311 ops/s
Iteration   4: 1042092.252 ops/s
Iteration   5: 1035299.375 ops/s
Iteration   6: 1041519.919 ops/s
Iteration   7: 1045977.726 ops/s
Iteration   8: 1045960.423 ops/s
Iteration   9: 1039406.446 ops/s
Iteration  10: 1039698.705 ops/s
Iteration  11: 1043100.719 ops/s
Iteration  12: 1042829.018 ops/s
Iteration  13: 1045619.535 ops/s
Iteration  14: 1043363.007 ops/s
Iteration  15: 1043545.086 ops/s
Iteration  16: 1037613.719 ops/s
Iteration  17: 1045861.124 ops/s
Iteration  18: 1034419.584 ops/s
Iteration  19: 1042489.466 ops/s
Iteration  20: 1045973.549 ops/s
Iteration  21: 1047024.077 ops/s
Iteration  22: 1042062.089 ops/s
Iteration  23: 1042264.808 ops/s
Iteration  24: 1045132.938 ops/s
Iteration  25: 1031952.393 ops/s
Iteration  26: 1041067.358 ops/s
Iteration  27: 1037242.079 ops/s
Iteration  28: 1039346.005 ops/s
Iteration  29: 1042593.594 ops/s
Iteration  30: 1038944.304 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove":
  1041895.330 ±(99.9%) 2550.680 ops/s [Average]
  (min, avg, max) = (1031952.393, 1041895.330, 1047024.077), stdev = 3817.738
  CI (99.9%): [1039344.650, 1044446.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  1041895.330 ± 2550.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717598.706 ops/s
# Warmup Iteration   2: 761686.511 ops/s
# Warmup Iteration   3: 985059.934 ops/s
# Warmup Iteration   4: 975565.182 ops/s
# Warmup Iteration   5: 972306.793 ops/s
# Warmup Iteration   6: 975499.240 ops/s
# Warmup Iteration   7: 974591.126 ops/s
# Warmup Iteration   8: 977222.442 ops/s
# Warmup Iteration   9: 975976.107 ops/s
# Warmup Iteration  10: 986082.853 ops/s
# Warmup Iteration  11: 859529.173 ops/s
# Warmup Iteration  12: 951593.690 ops/s
# Warmup Iteration  13: 975145.500 ops/s
# Warmup Iteration  14: 959668.949 ops/s
# Warmup Iteration  15: 984115.765 ops/s
# Warmup Iteration  16: 984174.109 ops/s
# Warmup Iteration  17: 1001551.351 ops/s
# Warmup Iteration  18: 1005085.480 ops/s
# Warmup Iteration  19: 994889.307 ops/s
# Warmup Iteration  20: 996449.887 ops/s
# Warmup Iteration  21: 994526.478 ops/s
# Warmup Iteration  22: 999926.045 ops/s
# Warmup Iteration  23: 993363.827 ops/s
# Warmup Iteration  24: 1004044.464 ops/s
# Warmup Iteration  25: 1002846.027 ops/s
# Warmup Iteration  26: 1003968.016 ops/s
# Warmup Iteration  27: 1001201.079 ops/s
# Warmup Iteration  28: 999967.409 ops/s
# Warmup Iteration  29: 1001516.414 ops/s
# Warmup Iteration  30: 995453.789 ops/s
Iteration   1: 1002788.167 ops/s
Iteration   2: 1001106.415 ops/s
Iteration   3: 1001718.734 ops/s
Iteration   4: 1001391.935 ops/s
Iteration   5: 1003943.906 ops/s
Iteration   6: 1003854.651 ops/s
Iteration   7: 1004789.971 ops/s
Iteration   8: 951887.289 ops/s
Iteration   9: 1005322.441 ops/s
Iteration  10: 1003781.757 ops/s
Iteration  11: 1005512.639 ops/s
Iteration  12: 1002921.976 ops/s
Iteration  13: 1000430.720 ops/s
Iteration  14: 1002963.146 ops/s
Iteration  15: 1003482.583 ops/s
Iteration  16: 1004343.576 ops/s
Iteration  17: 1001997.189 ops/s
Iteration  18: 1003722.723 ops/s
Iteration  19: 999767.832 ops/s
Iteration  20: 1001647.877 ops/s
Iteration  21: 1007143.504 ops/s
Iteration  22: 1003887.384 ops/s
Iteration  23: 999225.376 ops/s
Iteration  24: 1000861.997 ops/s
Iteration  25: 1002559.668 ops/s
Iteration  26: 998753.235 ops/s
Iteration  27: 1001078.932 ops/s
Iteration  28: 1004224.557 ops/s
Iteration  29: 1007012.052 ops/s
Iteration  30: 1000679.091 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  1001093.378 ±(99.9%) 6365.635 ops/s [Average]
  (min, avg, max) = (951887.289, 1001093.378, 1007143.504), stdev = 9527.784
  CI (99.9%): [994727.742, 1007459.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  1001093.378 ± 6365.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711850.474 ops/s
# Warmup Iteration   2: 765501.235 ops/s
# Warmup Iteration   3: 988458.663 ops/s
# Warmup Iteration   4: 984182.073 ops/s
# Warmup Iteration   5: 986093.467 ops/s
# Warmup Iteration   6: 983962.091 ops/s
# Warmup Iteration   7: 986575.091 ops/s
# Warmup Iteration   8: 986586.280 ops/s
# Warmup Iteration   9: 982509.094 ops/s
# Warmup Iteration  10: 979891.442 ops/s
# Warmup Iteration  11: 834663.987 ops/s
# Warmup Iteration  12: 973677.581 ops/s
# Warmup Iteration  13: 980470.386 ops/s
# Warmup Iteration  14: 985854.535 ops/s
# Warmup Iteration  15: 981952.926 ops/s
# Warmup Iteration  16: 987006.319 ops/s
# Warmup Iteration  17: 1022958.463 ops/s
# Warmup Iteration  18: 1039510.229 ops/s
# Warmup Iteration  19: 1032773.303 ops/s
# Warmup Iteration  20: 1043239.647 ops/s
# Warmup Iteration  21: 1036027.425 ops/s
# Warmup Iteration  22: 1018181.216 ops/s
# Warmup Iteration  23: 1043195.472 ops/s
# Warmup Iteration  24: 1024317.849 ops/s
# Warmup Iteration  25: 1026955.310 ops/s
# Warmup Iteration  26: 1042042.800 ops/s
# Warmup Iteration  27: 1043148.619 ops/s
# Warmup Iteration  28: 1038160.088 ops/s
# Warmup Iteration  29: 1039595.577 ops/s
# Warmup Iteration  30: 1043892.988 ops/s
Iteration   1: 1044011.145 ops/s
Iteration   2: 1039394.223 ops/s
Iteration   3: 1039511.267 ops/s
Iteration   4: 1042246.569 ops/s
Iteration   5: 1042282.718 ops/s
Iteration   6: 1041507.702 ops/s
Iteration   7: 1039104.320 ops/s
Iteration   8: 1026617.499 ops/s
Iteration   9: 1041146.269 ops/s
Iteration  10: 1039983.295 ops/s
Iteration  11: 1018499.318 ops/s
Iteration  12: 1040020.868 ops/s
Iteration  13: 1039417.501 ops/s
Iteration  14: 1041166.308 ops/s
Iteration  15: 1043445.840 ops/s
Iteration  16: 1037238.508 ops/s
Iteration  17: 1041319.462 ops/s
Iteration  18: 1044564.591 ops/s
Iteration  19: 1041954.374 ops/s
Iteration  20: 1039669.494 ops/s
Iteration  21: 1024315.869 ops/s
Iteration  22: 1037384.331 ops/s
Iteration  23: 1016824.461 ops/s
Iteration  24: 1043692.935 ops/s
Iteration  25: 1047487.109 ops/s
Iteration  26: 1024700.902 ops/s
Iteration  27: 1039283.043 ops/s
Iteration  28: 1040974.048 ops/s
Iteration  29: 1022854.762 ops/s
Iteration  30: 1034494.218 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  1037170.432 ±(99.9%) 5407.398 ops/s [Average]
  (min, avg, max) = (1016824.461, 1037170.432, 1047487.109), stdev = 8093.540
  CI (99.9%): [1031763.033, 1042577.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1037170.432 ± 5407.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703379.480 ops/s
# Warmup Iteration   2: 740992.382 ops/s
# Warmup Iteration   3: 937292.304 ops/s
# Warmup Iteration   4: 938127.528 ops/s
# Warmup Iteration   5: 931019.609 ops/s
# Warmup Iteration   6: 941692.342 ops/s
# Warmup Iteration   7: 931179.084 ops/s
# Warmup Iteration   8: 928392.388 ops/s
# Warmup Iteration   9: 939144.127 ops/s
# Warmup Iteration  10: 929536.343 ops/s
# Warmup Iteration  11: 940249.954 ops/s
# Warmup Iteration  12: 796905.747 ops/s
# Warmup Iteration  13: 939764.423 ops/s
# Warmup Iteration  14: 940045.693 ops/s
# Warmup Iteration  15: 933753.327 ops/s
# Warmup Iteration  16: 935928.189 ops/s
# Warmup Iteration  17: 1009690.443 ops/s
# Warmup Iteration  18: 1005940.106 ops/s
# Warmup Iteration  19: 1006749.889 ops/s
# Warmup Iteration  20: 1003228.111 ops/s
# Warmup Iteration  21: 1001489.404 ops/s
# Warmup Iteration  22: 997587.704 ops/s
# Warmup Iteration  23: 995322.890 ops/s
# Warmup Iteration  24: 1000909.582 ops/s
# Warmup Iteration  25: 1006460.869 ops/s
# Warmup Iteration  26: 1007755.057 ops/s
# Warmup Iteration  27: 1007068.100 ops/s
# Warmup Iteration  28: 1006183.877 ops/s
# Warmup Iteration  29: 1005885.586 ops/s
# Warmup Iteration  30: 1012635.462 ops/s
Iteration   1: 1007634.491 ops/s
Iteration   2: 1005470.432 ops/s
Iteration   3: 1005961.841 ops/s
Iteration   4: 1005005.867 ops/s
Iteration   5: 1002407.252 ops/s
Iteration   6: 1000649.864 ops/s
Iteration   7: 1003976.503 ops/s
Iteration   8: 993294.354 ops/s
Iteration   9: 1006316.871 ops/s
Iteration  10: 1004813.497 ops/s
Iteration  11: 979235.966 ops/s
Iteration  12: 1006708.771 ops/s
Iteration  13: 1000094.542 ops/s
Iteration  14: 1003154.027 ops/s
Iteration  15: 992241.553 ops/s
Iteration  16: 1007158.738 ops/s
Iteration  17: 1011863.675 ops/s
Iteration  18: 1002688.893 ops/s
Iteration  19: 993040.827 ops/s
Iteration  20: 1001271.508 ops/s
Iteration  21: 1002494.585 ops/s
Iteration  22: 1009582.906 ops/s
Iteration  23: 1002647.232 ops/s
Iteration  24: 1009182.444 ops/s
Iteration  25: 999265.613 ops/s
Iteration  26: 1003566.398 ops/s
Iteration  27: 1008682.221 ops/s
Iteration  28: 1006889.175 ops/s
Iteration  29: 990077.540 ops/s
Iteration  30: 987167.166 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex":
  1001751.492 ±(99.9%) 4917.503 ops/s [Average]
  (min, avg, max) = (979235.966, 1001751.492, 1011863.675), stdev = 7360.288
  CI (99.9%): [996833.989, 1006668.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1001751.492 ± 4917.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708396.667 ops/s
# Warmup Iteration   2: 748542.583 ops/s
# Warmup Iteration   3: 952195.180 ops/s
# Warmup Iteration   4: 942898.959 ops/s
# Warmup Iteration   5: 936418.990 ops/s
# Warmup Iteration   6: 951654.217 ops/s
# Warmup Iteration   7: 950266.287 ops/s
# Warmup Iteration   8: 945523.006 ops/s
# Warmup Iteration   9: 936315.029 ops/s
# Warmup Iteration  10: 942542.865 ops/s
# Warmup Iteration  11: 924062.367 ops/s
# Warmup Iteration  12: 824813.087 ops/s
# Warmup Iteration  13: 947701.847 ops/s
# Warmup Iteration  14: 947999.942 ops/s
# Warmup Iteration  15: 948350.569 ops/s
# Warmup Iteration  16: 948090.947 ops/s
# Warmup Iteration  17: 1011728.313 ops/s
# Warmup Iteration  18: 999846.679 ops/s
# Warmup Iteration  19: 1010195.926 ops/s
# Warmup Iteration  20: 1007204.247 ops/s
# Warmup Iteration  21: 1009924.189 ops/s
# Warmup Iteration  22: 1007811.074 ops/s
# Warmup Iteration  23: 999719.196 ops/s
# Warmup Iteration  24: 1002898.108 ops/s
# Warmup Iteration  25: 1006556.876 ops/s
# Warmup Iteration  26: 1009456.399 ops/s
# Warmup Iteration  27: 1001018.948 ops/s
# Warmup Iteration  28: 998655.852 ops/s
# Warmup Iteration  29: 999379.142 ops/s
# Warmup Iteration  30: 1009929.680 ops/s
Iteration   1: 1002921.589 ops/s
Iteration   2: 1004536.950 ops/s
Iteration   3: 1007970.430 ops/s
Iteration   4: 1003741.378 ops/s
Iteration   5: 1016293.882 ops/s
Iteration   6: 1007558.016 ops/s
Iteration   7: 1008212.713 ops/s
Iteration   8: 1008524.187 ops/s
Iteration   9: 988477.073 ops/s
Iteration  10: 1009561.828 ops/s
Iteration  11: 1012126.329 ops/s
Iteration  12: 1005208.206 ops/s
Iteration  13: 1010439.310 ops/s
Iteration  14: 1008714.563 ops/s
Iteration  15: 1008069.561 ops/s
Iteration  16: 1011045.918 ops/s
Iteration  17: 998141.283 ops/s
Iteration  18: 1006543.641 ops/s
Iteration  19: 1007414.170 ops/s
Iteration  20: 1012084.162 ops/s
Iteration  21: 1007233.732 ops/s
Iteration  22: 1009436.828 ops/s
Iteration  23: 999954.581 ops/s
Iteration  24: 1008506.304 ops/s
Iteration  25: 1012505.427 ops/s
Iteration  26: 1004363.236 ops/s
Iteration  27: 1012741.547 ops/s
Iteration  28: 994519.741 ops/s
Iteration  29: 996355.449 ops/s
Iteration  30: 1011361.598 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex":
  1006485.454 ±(99.9%) 4018.557 ops/s [Average]
  (min, avg, max) = (988477.073, 1006485.454, 1016293.882), stdev = 6014.787
  CI (99.9%): [1002466.898, 1010504.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  1006485.454 ± 4018.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696607.771 ops/s
# Warmup Iteration   2: 754975.980 ops/s
# Warmup Iteration   3: 992614.558 ops/s
# Warmup Iteration   4: 974203.121 ops/s
# Warmup Iteration   5: 984057.867 ops/s
# Warmup Iteration   6: 983156.861 ops/s
# Warmup Iteration   7: 987688.493 ops/s
# Warmup Iteration   8: 983801.341 ops/s
# Warmup Iteration   9: 979583.654 ops/s
# Warmup Iteration  10: 981925.981 ops/s
# Warmup Iteration  11: 854622.469 ops/s
# Warmup Iteration  12: 933861.149 ops/s
# Warmup Iteration  13: 983670.197 ops/s
# Warmup Iteration  14: 982154.523 ops/s
# Warmup Iteration  15: 983405.517 ops/s
# Warmup Iteration  16: 985376.010 ops/s
# Warmup Iteration  17: 1043016.526 ops/s
# Warmup Iteration  18: 1044686.771 ops/s
# Warmup Iteration  19: 1043000.219 ops/s
# Warmup Iteration  20: 1045922.277 ops/s
# Warmup Iteration  21: 1042424.251 ops/s
# Warmup Iteration  22: 1034761.622 ops/s
# Warmup Iteration  23: 1040412.351 ops/s
# Warmup Iteration  24: 1033146.902 ops/s
# Warmup Iteration  25: 1043549.361 ops/s
# Warmup Iteration  26: 1032764.089 ops/s
# Warmup Iteration  27: 1041358.389 ops/s
# Warmup Iteration  28: 1034806.181 ops/s
# Warmup Iteration  29: 1038131.644 ops/s
# Warmup Iteration  30: 1041394.956 ops/s
Iteration   1: 1044151.752 ops/s
Iteration   2: 1040018.562 ops/s
Iteration   3: 1026071.074 ops/s
Iteration   4: 1044499.849 ops/s
Iteration   5: 1043977.432 ops/s
Iteration   6: 1046716.488 ops/s
Iteration   7: 1037988.334 ops/s
Iteration   8: 1017310.201 ops/s
Iteration   9: 1043131.702 ops/s
Iteration  10: 1038563.564 ops/s
Iteration  11: 1043996.415 ops/s
Iteration  12: 1045590.674 ops/s
Iteration  13: 1044331.051 ops/s
Iteration  14: 1042097.041 ops/s
Iteration  15: 1044794.308 ops/s
Iteration  16: 1025495.578 ops/s
Iteration  17: 1039539.563 ops/s
Iteration  18: 1033581.317 ops/s
Iteration  19: 1045919.711 ops/s
Iteration  20: 1043595.042 ops/s
Iteration  21: 1043714.370 ops/s
Iteration  22: 1045806.159 ops/s
Iteration  23: 1039747.232 ops/s
Iteration  24: 1043563.764 ops/s
Iteration  25: 1041858.225 ops/s
Iteration  26: 1042976.021 ops/s
Iteration  27: 1013061.895 ops/s
Iteration  28: 1043347.585 ops/s
Iteration  29: 1041316.537 ops/s
Iteration  30: 1026392.227 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  1039105.122 ±(99.9%) 5804.132 ops/s [Average]
  (min, avg, max) = (1013061.895, 1039105.122, 1046716.488), stdev = 8687.352
  CI (99.9%): [1033300.991, 1044909.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  1039105.122 ± 5804.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713671.524 ops/s
# Warmup Iteration   2: 757342.884 ops/s
# Warmup Iteration   3: 989965.087 ops/s
# Warmup Iteration   4: 979244.591 ops/s
# Warmup Iteration   5: 971273.658 ops/s
# Warmup Iteration   6: 981671.592 ops/s
# Warmup Iteration   7: 980792.332 ops/s
# Warmup Iteration   8: 984748.995 ops/s
# Warmup Iteration   9: 971076.584 ops/s
# Warmup Iteration  10: 968887.420 ops/s
# Warmup Iteration  11: 833683.265 ops/s
# Warmup Iteration  12: 985804.054 ops/s
# Warmup Iteration  13: 976654.808 ops/s
# Warmup Iteration  14: 985035.050 ops/s
# Warmup Iteration  15: 985046.648 ops/s
# Warmup Iteration  16: 987009.631 ops/s
# Warmup Iteration  17: 1029601.880 ops/s
# Warmup Iteration  18: 1040487.981 ops/s
# Warmup Iteration  19: 1039959.448 ops/s
# Warmup Iteration  20: 1040512.233 ops/s
# Warmup Iteration  21: 1042308.827 ops/s
# Warmup Iteration  22: 1034473.309 ops/s
# Warmup Iteration  23: 1040991.310 ops/s
# Warmup Iteration  24: 1040264.412 ops/s
# Warmup Iteration  25: 1040460.814 ops/s
# Warmup Iteration  26: 1016893.662 ops/s
# Warmup Iteration  27: 1044847.795 ops/s
# Warmup Iteration  28: 1031840.737 ops/s
# Warmup Iteration  29: 1023624.430 ops/s
# Warmup Iteration  30: 1042845.720 ops/s
Iteration   1: 1042458.458 ops/s
Iteration   2: 1019753.363 ops/s
Iteration   3: 1036646.453 ops/s
Iteration   4: 1042603.419 ops/s
Iteration   5: 1044159.981 ops/s
Iteration   6: 1038828.987 ops/s
Iteration   7: 1036997.385 ops/s
Iteration   8: 1048033.908 ops/s
Iteration   9: 1042223.429 ops/s
Iteration  10: 1040361.466 ops/s
Iteration  11: 1041250.519 ops/s
Iteration  12: 1044357.384 ops/s
Iteration  13: 1040196.253 ops/s
Iteration  14: 1042586.517 ops/s
Iteration  15: 1043420.109 ops/s
Iteration  16: 1028633.500 ops/s
Iteration  17: 1040368.618 ops/s
Iteration  18: 1042330.994 ops/s
Iteration  19: 1042642.145 ops/s
Iteration  20: 1008038.410 ops/s
Iteration  21: 1029763.825 ops/s
Iteration  22: 1044230.890 ops/s
Iteration  23: 1044137.680 ops/s
Iteration  24: 1032932.199 ops/s
Iteration  25: 1042411.987 ops/s
Iteration  26: 1039437.044 ops/s
Iteration  27: 1041601.391 ops/s
Iteration  28: 1029452.404 ops/s
Iteration  29: 1022661.452 ops/s
Iteration  30: 1023781.472 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  1037210.055 ±(99.9%) 6044.202 ops/s [Average]
  (min, avg, max) = (1008038.410, 1037210.055, 1048033.908), stdev = 9046.677
  CI (99.9%): [1031165.853, 1043254.257] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1037210.055 ± 6044.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701027.520 ops/s
# Warmup Iteration   2: 751148.481 ops/s
# Warmup Iteration   3: 969659.879 ops/s
# Warmup Iteration   4: 966904.129 ops/s
# Warmup Iteration   5: 964196.721 ops/s
# Warmup Iteration   6: 965944.385 ops/s
# Warmup Iteration   7: 966735.375 ops/s
# Warmup Iteration   8: 958192.247 ops/s
# Warmup Iteration   9: 965016.392 ops/s
# Warmup Iteration  10: 962235.244 ops/s
# Warmup Iteration  11: 879925.135 ops/s
# Warmup Iteration  12: 909269.431 ops/s
# Warmup Iteration  13: 966179.630 ops/s
# Warmup Iteration  14: 958721.456 ops/s
# Warmup Iteration  15: 964960.691 ops/s
# Warmup Iteration  16: 961577.565 ops/s
# Warmup Iteration  17: 1032855.317 ops/s
# Warmup Iteration  18: 1029240.866 ops/s
# Warmup Iteration  19: 1029756.486 ops/s
# Warmup Iteration  20: 1015669.356 ops/s
# Warmup Iteration  21: 1021880.974 ops/s
# Warmup Iteration  22: 1023050.212 ops/s
# Warmup Iteration  23: 1028807.125 ops/s
# Warmup Iteration  24: 1017550.647 ops/s
# Warmup Iteration  25: 1024103.301 ops/s
# Warmup Iteration  26: 1013357.793 ops/s
# Warmup Iteration  27: 1021803.733 ops/s
# Warmup Iteration  28: 1029911.603 ops/s
# Warmup Iteration  29: 1030759.623 ops/s
# Warmup Iteration  30: 1022376.608 ops/s
Iteration   1: 1031772.015 ops/s
Iteration   2: 1030358.433 ops/s
Iteration   3: 1033238.444 ops/s
Iteration   4: 1029231.911 ops/s
Iteration   5: 1024123.900 ops/s
Iteration   6: 1030822.195 ops/s
Iteration   7: 1030881.694 ops/s
Iteration   8: 1014235.833 ops/s
Iteration   9: 1034748.997 ops/s
Iteration  10: 1025176.009 ops/s
Iteration  11: 1026404.919 ops/s
Iteration  12: 1025319.514 ops/s
Iteration  13: 992979.110 ops/s
Iteration  14: 1029018.638 ops/s
Iteration  15: 1021498.359 ops/s
Iteration  16: 1034282.562 ops/s
Iteration  17: 1032413.119 ops/s
Iteration  18: 1026367.685 ops/s
Iteration  19: 1023920.783 ops/s
Iteration  20: 1032439.824 ops/s
Iteration  21: 1028711.387 ops/s
Iteration  22: 1025608.564 ops/s
Iteration  23: 1031811.005 ops/s
Iteration  24: 1028504.606 ops/s
Iteration  25: 1034758.997 ops/s
Iteration  26: 1023901.466 ops/s
Iteration  27: 1031476.929 ops/s
Iteration  28: 1034853.926 ops/s
Iteration  29: 1011627.621 ops/s
Iteration  30: 1032778.294 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  1027108.891 ±(99.9%) 5699.045 ops/s [Average]
  (min, avg, max) = (992979.110, 1027108.891, 1034853.926), stdev = 8530.064
  CI (99.9%): [1021409.846, 1032807.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  1027108.891 ± 5699.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703052.699 ops/s
# Warmup Iteration   2: 764400.984 ops/s
# Warmup Iteration   3: 982181.888 ops/s
# Warmup Iteration   4: 976047.534 ops/s
# Warmup Iteration   5: 972282.056 ops/s
# Warmup Iteration   6: 974702.864 ops/s
# Warmup Iteration   7: 977070.765 ops/s
# Warmup Iteration   8: 974538.278 ops/s
# Warmup Iteration   9: 972020.738 ops/s
# Warmup Iteration  10: 978966.122 ops/s
# Warmup Iteration  11: 827384.830 ops/s
# Warmup Iteration  12: 970664.620 ops/s
# Warmup Iteration  13: 976191.017 ops/s
# Warmup Iteration  14: 971671.740 ops/s
# Warmup Iteration  15: 974172.448 ops/s
# Warmup Iteration  16: 973742.011 ops/s
# Warmup Iteration  17: 1033895.284 ops/s
# Warmup Iteration  18: 1033547.512 ops/s
# Warmup Iteration  19: 1034443.293 ops/s
# Warmup Iteration  20: 1032874.725 ops/s
# Warmup Iteration  21: 1031019.532 ops/s
# Warmup Iteration  22: 1032510.393 ops/s
# Warmup Iteration  23: 1023301.134 ops/s
# Warmup Iteration  24: 1033139.247 ops/s
# Warmup Iteration  25: 1034117.096 ops/s
# Warmup Iteration  26: 1031199.676 ops/s
# Warmup Iteration  27: 1033591.940 ops/s
# Warmup Iteration  28: 1032579.249 ops/s
# Warmup Iteration  29: 1034137.817 ops/s
# Warmup Iteration  30: 1029279.558 ops/s
Iteration   1: 1034543.171 ops/s
Iteration   2: 1028611.437 ops/s
Iteration   3: 1032710.410 ops/s
Iteration   4: 1018803.511 ops/s
Iteration   5: 1035687.683 ops/s
Iteration   6: 1032555.296 ops/s
Iteration   7: 1032414.278 ops/s
Iteration   8: 1018565.116 ops/s
Iteration   9: 1029529.716 ops/s
Iteration  10: 1029423.905 ops/s
Iteration  11: 1035773.502 ops/s
Iteration  12: 1034169.794 ops/s
Iteration  13: 1036078.248 ops/s
Iteration  14: 1032740.213 ops/s
Iteration  15: 1035867.700 ops/s
Iteration  16: 1031469.048 ops/s
Iteration  17: 1037043.671 ops/s
Iteration  18: 1031675.026 ops/s
Iteration  19: 1036261.816 ops/s
Iteration  20: 1033242.763 ops/s
Iteration  21: 1036616.426 ops/s
Iteration  22: 1030079.454 ops/s
Iteration  23: 1033739.564 ops/s
Iteration  24: 1016678.279 ops/s
Iteration  25: 1036357.516 ops/s
Iteration  26: 1036389.554 ops/s
Iteration  27: 1029762.481 ops/s
Iteration  28: 1025457.025 ops/s
Iteration  29: 1035681.450 ops/s
Iteration  30: 1035546.277 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  1031782.478 ±(99.9%) 3659.615 ops/s [Average]
  (min, avg, max) = (1016678.279, 1031782.478, 1037043.671), stdev = 5477.540
  CI (99.9%): [1028122.863, 1035442.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1031782.478 ± 3659.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700922.598 ops/s
# Warmup Iteration   2: 746479.517 ops/s
# Warmup Iteration   3: 954463.828 ops/s
# Warmup Iteration   4: 951813.928 ops/s
# Warmup Iteration   5: 947163.763 ops/s
# Warmup Iteration   6: 951131.753 ops/s
# Warmup Iteration   7: 941983.952 ops/s
# Warmup Iteration   8: 950752.637 ops/s
# Warmup Iteration   9: 938403.202 ops/s
# Warmup Iteration  10: 947322.301 ops/s
# Warmup Iteration  11: 898274.856 ops/s
# Warmup Iteration  12: 853382.530 ops/s
# Warmup Iteration  13: 935188.523 ops/s
# Warmup Iteration  14: 945791.613 ops/s
# Warmup Iteration  15: 941719.783 ops/s
# Warmup Iteration  16: 939616.923 ops/s
# Warmup Iteration  17: 1004426.797 ops/s
# Warmup Iteration  18: 1005950.041 ops/s
# Warmup Iteration  19: 1003463.228 ops/s
# Warmup Iteration  20: 995569.864 ops/s
# Warmup Iteration  21: 998541.979 ops/s
# Warmup Iteration  22: 993139.125 ops/s
# Warmup Iteration  23: 1005823.520 ops/s
# Warmup Iteration  24: 1005764.520 ops/s
# Warmup Iteration  25: 997445.839 ops/s
# Warmup Iteration  26: 1009174.429 ops/s
# Warmup Iteration  27: 997306.709 ops/s
# Warmup Iteration  28: 997597.566 ops/s
# Warmup Iteration  29: 1002911.557 ops/s
# Warmup Iteration  30: 1008930.112 ops/s
Iteration   1: 1005597.783 ops/s
Iteration   2: 1007812.964 ops/s
Iteration   3: 1005573.509 ops/s
Iteration   4: 1006238.333 ops/s
Iteration   5: 997743.282 ops/s
Iteration   6: 1006531.666 ops/s
Iteration   7: 1002630.114 ops/s
Iteration   8: 1005666.285 ops/s
Iteration   9: 1001075.147 ops/s
Iteration  10: 1006705.121 ops/s
Iteration  11: 1003439.168 ops/s
Iteration  12: 992623.134 ops/s
Iteration  13: 986117.998 ops/s
Iteration  14: 1007789.655 ops/s
Iteration  15: 1006637.698 ops/s
Iteration  16: 1004485.624 ops/s
Iteration  17: 1001590.518 ops/s
Iteration  18: 1002422.465 ops/s
Iteration  19: 988475.589 ops/s
Iteration  20: 997103.451 ops/s
Iteration  21: 1005790.453 ops/s
Iteration  22: 1007060.216 ops/s
Iteration  23: 1001918.299 ops/s
Iteration  24: 1002449.873 ops/s
Iteration  25: 1009124.324 ops/s
Iteration  26: 1004027.686 ops/s
Iteration  27: 1002277.289 ops/s
Iteration  28: 1005499.333 ops/s
Iteration  29: 998542.717 ops/s
Iteration  30: 1004851.552 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis":
  1002593.375 ±(99.9%) 3681.469 ops/s [Average]
  (min, avg, max) = (986117.998, 1002593.375, 1009124.324), stdev = 5510.250
  CI (99.9%): [998911.906, 1006274.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis  thrpt   30  1002593.375 ± 3681.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2538457.587 ops/s
# Warmup Iteration   2: 5265310.181 ops/s
# Warmup Iteration   3: 5403788.306 ops/s
# Warmup Iteration   4: 5487458.973 ops/s
# Warmup Iteration   5: 4605981.077 ops/s
# Warmup Iteration   6: 5490865.997 ops/s
# Warmup Iteration   7: 5442247.456 ops/s
# Warmup Iteration   8: 5457847.646 ops/s
# Warmup Iteration   9: 5493017.156 ops/s
# Warmup Iteration  10: 5439729.409 ops/s
# Warmup Iteration  11: 5436744.108 ops/s
# Warmup Iteration  12: 5504351.995 ops/s
# Warmup Iteration  13: 5505411.081 ops/s
# Warmup Iteration  14: 5486008.167 ops/s
# Warmup Iteration  15: 5494676.092 ops/s
# Warmup Iteration  16: 5501161.921 ops/s
# Warmup Iteration  17: 5490743.042 ops/s
# Warmup Iteration  18: 5497106.179 ops/s
# Warmup Iteration  19: 5443025.652 ops/s
# Warmup Iteration  20: 5502709.121 ops/s
# Warmup Iteration  21: 5470861.942 ops/s
# Warmup Iteration  22: 5489037.589 ops/s
# Warmup Iteration  23: 5459630.598 ops/s
# Warmup Iteration  24: 5465055.467 ops/s
# Warmup Iteration  25: 5500238.211 ops/s
# Warmup Iteration  26: 5499079.739 ops/s
# Warmup Iteration  27: 5488760.987 ops/s
# Warmup Iteration  28: 5480913.179 ops/s
# Warmup Iteration  29: 5478515.246 ops/s
# Warmup Iteration  30: 5510805.912 ops/s
Iteration   1: 5507664.313 ops/s
Iteration   2: 5483657.208 ops/s
Iteration   3: 5515672.195 ops/s
Iteration   4: 5416346.214 ops/s
Iteration   5: 5491949.499 ops/s
Iteration   6: 5510399.635 ops/s
Iteration   7: 5512584.915 ops/s
Iteration   8: 5489512.101 ops/s
Iteration   9: 5511096.424 ops/s
Iteration  10: 5508762.873 ops/s
Iteration  11: 5509639.797 ops/s
Iteration  12: 5488229.346 ops/s
Iteration  13: 5500022.354 ops/s
Iteration  14: 5443790.698 ops/s
Iteration  15: 5507394.675 ops/s
Iteration  16: 5501190.774 ops/s
Iteration  17: 5407418.650 ops/s
Iteration  18: 5506287.277 ops/s
Iteration  19: 5490422.474 ops/s
Iteration  20: 5506240.703 ops/s
Iteration  21: 5501887.557 ops/s
Iteration  22: 5484525.106 ops/s
Iteration  23: 5517337.699 ops/s
Iteration  24: 5497512.621 ops/s
Iteration  25: 5510771.459 ops/s
Iteration  26: 5512231.960 ops/s
Iteration  27: 5499643.650 ops/s
Iteration  28: 5488644.203 ops/s
Iteration  29: 5511573.959 ops/s
Iteration  30: 5510637.332 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_select":
  5494768.256 ±(99.9%) 17879.958 ops/s [Average]
  (min, avg, max) = (5407418.650, 5494768.256, 5517337.699), stdev = 26761.881
  CI (99.9%): [5476888.298, 5512648.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  5494768.256 ± 17879.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2674838.750 ops/s
# Warmup Iteration   2: 5124733.815 ops/s
# Warmup Iteration   3: 5508727.016 ops/s
# Warmup Iteration   4: 5457381.098 ops/s
# Warmup Iteration   5: 4605320.971 ops/s
# Warmup Iteration   6: 5504518.835 ops/s
# Warmup Iteration   7: 5508456.050 ops/s
# Warmup Iteration   8: 5414002.732 ops/s
# Warmup Iteration   9: 5516199.678 ops/s
# Warmup Iteration  10: 5463512.343 ops/s
# Warmup Iteration  11: 5482202.938 ops/s
# Warmup Iteration  12: 5491736.635 ops/s
# Warmup Iteration  13: 5514182.987 ops/s
# Warmup Iteration  14: 5463914.450 ops/s
# Warmup Iteration  15: 5480981.107 ops/s
# Warmup Iteration  16: 5459885.389 ops/s
# Warmup Iteration  17: 5508329.792 ops/s
# Warmup Iteration  18: 5494595.585 ops/s
# Warmup Iteration  19: 5462261.940 ops/s
# Warmup Iteration  20: 5459790.181 ops/s
# Warmup Iteration  21: 5514106.641 ops/s
# Warmup Iteration  22: 5506961.734 ops/s
# Warmup Iteration  23: 5505651.006 ops/s
# Warmup Iteration  24: 5505210.560 ops/s
# Warmup Iteration  25: 5502386.407 ops/s
# Warmup Iteration  26: 5515721.157 ops/s
# Warmup Iteration  27: 5507149.394 ops/s
# Warmup Iteration  28: 5464043.552 ops/s
# Warmup Iteration  29: 5469227.577 ops/s
# Warmup Iteration  30: 5518012.559 ops/s
Iteration   1: 5498632.719 ops/s
Iteration   2: 5484595.025 ops/s
Iteration   3: 5511744.429 ops/s
Iteration   4: 5513561.422 ops/s
Iteration   5: 5404868.162 ops/s
Iteration   6: 5498898.568 ops/s
Iteration   7: 5480350.606 ops/s
Iteration   8: 5409511.001 ops/s
Iteration   9: 5506372.397 ops/s
Iteration  10: 5501898.094 ops/s
Iteration  11: 5413499.969 ops/s
Iteration  12: 5506715.331 ops/s
Iteration  13: 5497349.285 ops/s
Iteration  14: 5424915.788 ops/s
Iteration  15: 5519744.004 ops/s
Iteration  16: 5505004.630 ops/s
Iteration  17: 5422005.772 ops/s
Iteration  18: 5504288.339 ops/s
Iteration  19: 5517178.011 ops/s
Iteration  20: 5496862.073 ops/s
Iteration  21: 5517541.642 ops/s
Iteration  22: 5515221.786 ops/s
Iteration  23: 5520948.298 ops/s
Iteration  24: 5511634.005 ops/s
Iteration  25: 5507256.824 ops/s
Iteration  26: 5515227.661 ops/s
Iteration  27: 5504548.090 ops/s
Iteration  28: 5415635.139 ops/s
Iteration  29: 5504976.537 ops/s
Iteration  30: 5513536.818 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  5488150.748 ±(99.9%) 25653.754 ops/s [Average]
  (min, avg, max) = (5404868.162, 5488150.748, 5520948.298), stdev = 38397.334
  CI (99.9%): [5462496.994, 5513804.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  5488150.748 ± 25653.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35274.973 ops/s
# Warmup Iteration   2: 44193.448 ops/s
# Warmup Iteration   3: 64857.694 ops/s
# Warmup Iteration   4: 64786.318 ops/s
# Warmup Iteration   5: 64643.325 ops/s
# Warmup Iteration   6: 65170.967 ops/s
# Warmup Iteration   7: 65418.307 ops/s
# Warmup Iteration   8: 65370.017 ops/s
# Warmup Iteration   9: 65248.302 ops/s
# Warmup Iteration  10: 58579.444 ops/s
# Warmup Iteration  11: 61607.612 ops/s
# Warmup Iteration  12: 64864.378 ops/s
# Warmup Iteration  13: 64950.330 ops/s
# Warmup Iteration  14: 65371.853 ops/s
# Warmup Iteration  15: 65368.315 ops/s
# Warmup Iteration  16: 64924.398 ops/s
# Warmup Iteration  17: 65571.092 ops/s
# Warmup Iteration  18: 64971.653 ops/s
# Warmup Iteration  19: 64934.374 ops/s
# Warmup Iteration  20: 64800.029 ops/s
# Warmup Iteration  21: 65624.813 ops/s
# Warmup Iteration  22: 65524.646 ops/s
# Warmup Iteration  23: 65462.837 ops/s
# Warmup Iteration  24: 65503.000 ops/s
# Warmup Iteration  25: 64820.669 ops/s
# Warmup Iteration  26: 65280.645 ops/s
# Warmup Iteration  27: 65257.679 ops/s
# Warmup Iteration  28: 65443.762 ops/s
# Warmup Iteration  29: 65443.051 ops/s
# Warmup Iteration  30: 65257.523 ops/s
Iteration   1: 65426.680 ops/s
Iteration   2: 65118.465 ops/s
Iteration   3: 65455.589 ops/s
Iteration   4: 65649.760 ops/s
Iteration   5: 65258.028 ops/s
Iteration   6: 64442.260 ops/s
Iteration   7: 65552.947 ops/s
Iteration   8: 65539.226 ops/s
Iteration   9: 65814.851 ops/s
Iteration  10: 65289.658 ops/s
Iteration  11: 65555.643 ops/s
Iteration  12: 65297.510 ops/s
Iteration  13: 65511.019 ops/s
Iteration  14: 65464.869 ops/s
Iteration  15: 64707.174 ops/s
Iteration  16: 63096.784 ops/s
Iteration  17: 64153.781 ops/s
Iteration  18: 65279.983 ops/s
Iteration  19: 64503.176 ops/s
Iteration  20: 65328.591 ops/s
Iteration  21: 64567.801 ops/s
Iteration  22: 65067.162 ops/s
Iteration  23: 65295.240 ops/s
Iteration  24: 65128.322 ops/s
Iteration  25: 65346.485 ops/s
Iteration  26: 65124.024 ops/s
Iteration  27: 65497.639 ops/s
Iteration  28: 65519.289 ops/s
Iteration  29: 65025.972 ops/s
Iteration  30: 65086.654 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization":
  65136.819 ±(99.9%) 365.392 ops/s [Average]
  (min, avg, max) = (63096.784, 65136.819, 65814.851), stdev = 546.901
  CI (99.9%): [64771.428, 65502.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization  thrpt   30  65136.819 ± 365.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708850.620 ops/s
# Warmup Iteration   2: 741379.906 ops/s
# Warmup Iteration   3: 956801.017 ops/s
# Warmup Iteration   4: 951424.032 ops/s
# Warmup Iteration   5: 951037.855 ops/s
# Warmup Iteration   6: 950132.016 ops/s
# Warmup Iteration   7: 953442.549 ops/s
# Warmup Iteration   8: 955676.850 ops/s
# Warmup Iteration   9: 951431.769 ops/s
# Warmup Iteration  10: 955069.872 ops/s
# Warmup Iteration  11: 942348.644 ops/s
# Warmup Iteration  12: 816341.600 ops/s
# Warmup Iteration  13: 954115.628 ops/s
# Warmup Iteration  14: 945964.006 ops/s
# Warmup Iteration  15: 953308.858 ops/s
# Warmup Iteration  16: 954013.080 ops/s
# Warmup Iteration  17: 1010025.810 ops/s
# Warmup Iteration  18: 1001762.301 ops/s
# Warmup Iteration  19: 1004755.469 ops/s
# Warmup Iteration  20: 1010554.059 ops/s
# Warmup Iteration  21: 1010781.911 ops/s
# Warmup Iteration  22: 1011085.477 ops/s
# Warmup Iteration  23: 1011134.922 ops/s
# Warmup Iteration  24: 1010141.880 ops/s
# Warmup Iteration  25: 1004278.546 ops/s
# Warmup Iteration  26: 1009360.965 ops/s
# Warmup Iteration  27: 1001404.921 ops/s
# Warmup Iteration  28: 1006861.605 ops/s
# Warmup Iteration  29: 1009416.700 ops/s
# Warmup Iteration  30: 1007162.934 ops/s
Iteration   1: 1011759.214 ops/s
Iteration   2: 1010167.903 ops/s
Iteration   3: 1011672.818 ops/s
Iteration   4: 1011823.800 ops/s
Iteration   5: 1007468.379 ops/s
Iteration   6: 994414.493 ops/s
Iteration   7: 1013354.780 ops/s
Iteration   8: 1014177.353 ops/s
Iteration   9: 1011866.189 ops/s
Iteration  10: 984926.604 ops/s
Iteration  11: 984424.854 ops/s
Iteration  12: 1006773.968 ops/s
Iteration  13: 994158.627 ops/s
Iteration  14: 1004304.968 ops/s
Iteration  15: 1010129.911 ops/s
Iteration  16: 1009450.009 ops/s
Iteration  17: 1010934.473 ops/s
Iteration  18: 1000041.780 ops/s
Iteration  19: 1010292.035 ops/s
Iteration  20: 1008631.136 ops/s
Iteration  21: 1013902.639 ops/s
Iteration  22: 1011964.687 ops/s
Iteration  23: 1004308.746 ops/s
Iteration  24: 990964.159 ops/s
Iteration  25: 1006706.963 ops/s
Iteration  26: 1007516.634 ops/s
Iteration  27: 1013820.325 ops/s
Iteration  28: 1010518.001 ops/s
Iteration  29: 1004786.813 ops/s
Iteration  30: 1011191.851 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_set":
  1006215.137 ±(99.9%) 5568.015 ops/s [Average]
  (min, avg, max) = (984424.854, 1006215.137, 1014177.353), stdev = 8333.944
  CI (99.9%): [1000647.122, 1011783.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_set  thrpt   30  1006215.137 ± 5568.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709836.910 ops/s
# Warmup Iteration   2: 743070.606 ops/s
# Warmup Iteration   3: 955771.174 ops/s
# Warmup Iteration   4: 938448.858 ops/s
# Warmup Iteration   5: 946794.970 ops/s
# Warmup Iteration   6: 950305.894 ops/s
# Warmup Iteration   7: 950681.516 ops/s
# Warmup Iteration   8: 947036.628 ops/s
# Warmup Iteration   9: 950613.955 ops/s
# Warmup Iteration  10: 949161.154 ops/s
# Warmup Iteration  11: 945114.974 ops/s
# Warmup Iteration  12: 816854.539 ops/s
# Warmup Iteration  13: 952079.425 ops/s
# Warmup Iteration  14: 943706.588 ops/s
# Warmup Iteration  15: 948984.423 ops/s
# Warmup Iteration  16: 953659.101 ops/s
# Warmup Iteration  17: 1006474.877 ops/s
# Warmup Iteration  18: 1003353.760 ops/s
# Warmup Iteration  19: 997380.515 ops/s
# Warmup Iteration  20: 1000919.045 ops/s
# Warmup Iteration  21: 1010831.008 ops/s
# Warmup Iteration  22: 1006214.284 ops/s
# Warmup Iteration  23: 997875.585 ops/s
# Warmup Iteration  24: 1007037.641 ops/s
# Warmup Iteration  25: 1005759.713 ops/s
# Warmup Iteration  26: 1000799.452 ops/s
# Warmup Iteration  27: 1008785.204 ops/s
# Warmup Iteration  28: 1008821.570 ops/s
# Warmup Iteration  29: 1001916.446 ops/s
# Warmup Iteration  30: 999284.716 ops/s
Iteration   1: 1009005.298 ops/s
Iteration   2: 1004709.622 ops/s
Iteration   3: 1006079.579 ops/s
Iteration   4: 1009147.099 ops/s
Iteration   5: 991928.439 ops/s
Iteration   6: 1006835.952 ops/s
Iteration   7: 1010919.281 ops/s
Iteration   8: 1002580.796 ops/s
Iteration   9: 1006004.123 ops/s
Iteration  10: 991552.162 ops/s
Iteration  11: 1005630.532 ops/s
Iteration  12: 1008370.389 ops/s
Iteration  13: 1003642.009 ops/s
Iteration  14: 1007487.419 ops/s
Iteration  15: 1009383.987 ops/s
Iteration  16: 1004369.976 ops/s
Iteration  17: 1007871.791 ops/s
Iteration  18: 1000686.861 ops/s
Iteration  19: 1009256.066 ops/s
Iteration  20: 991316.283 ops/s
Iteration  21: 1005468.810 ops/s
Iteration  22: 1005871.825 ops/s
Iteration  23: 1006377.190 ops/s
Iteration  24: 972805.654 ops/s
Iteration  25: 982307.351 ops/s
Iteration  26: 1007134.606 ops/s
Iteration  27: 1006564.182 ops/s
Iteration  28: 1005597.160 ops/s
Iteration  29: 999251.206 ops/s
Iteration  30: 1007581.881 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex":
  1002857.918 ±(99.9%) 5775.125 ops/s [Average]
  (min, avg, max) = (972805.654, 1002857.918, 1010919.281), stdev = 8643.936
  CI (99.9%): [997082.793, 1008633.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex  thrpt   30  1002857.918 ± 5775.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 585375.114 ops/s
# Warmup Iteration   2: 692594.703 ops/s
# Warmup Iteration   3: 886616.371 ops/s
# Warmup Iteration   4: 879376.015 ops/s
# Warmup Iteration   5: 880486.883 ops/s
# Warmup Iteration   6: 880086.297 ops/s
# Warmup Iteration   7: 877422.867 ops/s
# Warmup Iteration   8: 879521.750 ops/s
# Warmup Iteration   9: 736863.374 ops/s
# Warmup Iteration  10: 882205.210 ops/s
# Warmup Iteration  11: 879880.663 ops/s
# Warmup Iteration  12: 877769.271 ops/s
# Warmup Iteration  13: 882385.339 ops/s
# Warmup Iteration  14: 880871.723 ops/s
# Warmup Iteration  15: 880291.458 ops/s
# Warmup Iteration  16: 877763.474 ops/s
# Warmup Iteration  17: 928066.795 ops/s
# Warmup Iteration  18: 928521.296 ops/s
# Warmup Iteration  19: 928930.389 ops/s
# Warmup Iteration  20: 929312.305 ops/s
# Warmup Iteration  21: 919701.780 ops/s
# Warmup Iteration  22: 929790.180 ops/s
# Warmup Iteration  23: 916931.145 ops/s
# Warmup Iteration  24: 923500.578 ops/s
# Warmup Iteration  25: 924301.831 ops/s
# Warmup Iteration  26: 926697.537 ops/s
# Warmup Iteration  27: 928400.590 ops/s
# Warmup Iteration  28: 930528.849 ops/s
# Warmup Iteration  29: 920950.360 ops/s
# Warmup Iteration  30: 917852.938 ops/s
Iteration   1: 926938.248 ops/s
Iteration   2: 927479.657 ops/s
Iteration   3: 919835.631 ops/s
Iteration   4: 927514.096 ops/s
Iteration   5: 918811.090 ops/s
Iteration   6: 930988.826 ops/s
Iteration   7: 916234.499 ops/s
Iteration   8: 917125.065 ops/s
Iteration   9: 917282.965 ops/s
Iteration  10: 929102.807 ops/s
Iteration  11: 930164.844 ops/s
Iteration  12: 927132.005 ops/s
Iteration  13: 928252.633 ops/s
Iteration  14: 929113.818 ops/s
Iteration  15: 921256.756 ops/s
Iteration  16: 926639.601 ops/s
Iteration  17: 931165.629 ops/s
Iteration  18: 926482.593 ops/s
Iteration  19: 927572.978 ops/s
Iteration  20: 915793.137 ops/s
Iteration  21: 929673.827 ops/s
Iteration  22: 929161.688 ops/s
Iteration  23: 925718.274 ops/s
Iteration  24: 927361.290 ops/s
Iteration  25: 925861.528 ops/s
Iteration  26: 899137.810 ops/s
Iteration  27: 927496.343 ops/s
Iteration  28: 911720.801 ops/s
Iteration  29: 930131.173 ops/s
Iteration  30: 928116.305 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis":
  924308.864 ±(99.9%) 4738.023 ops/s [Average]
  (min, avg, max) = (899137.810, 924308.864, 931165.629), stdev = 7091.651
  CI (99.9%): [919570.841, 929046.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis  thrpt   30  924308.864 ± 4738.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700463.497 ops/s
# Warmup Iteration   2: 746204.551 ops/s
# Warmup Iteration   3: 956937.587 ops/s
# Warmup Iteration   4: 951312.350 ops/s
# Warmup Iteration   5: 954173.468 ops/s
# Warmup Iteration   6: 953643.321 ops/s
# Warmup Iteration   7: 946321.817 ops/s
# Warmup Iteration   8: 946382.458 ops/s
# Warmup Iteration   9: 954781.854 ops/s
# Warmup Iteration  10: 945281.616 ops/s
# Warmup Iteration  11: 894358.301 ops/s
# Warmup Iteration  12: 864536.081 ops/s
# Warmup Iteration  13: 953644.068 ops/s
# Warmup Iteration  14: 951320.204 ops/s
# Warmup Iteration  15: 946770.432 ops/s
# Warmup Iteration  16: 943607.708 ops/s
# Warmup Iteration  17: 1005539.940 ops/s
# Warmup Iteration  18: 1007669.803 ops/s
# Warmup Iteration  19: 1007198.744 ops/s
# Warmup Iteration  20: 1005520.058 ops/s
# Warmup Iteration  21: 1001364.615 ops/s
# Warmup Iteration  22: 1002605.998 ops/s
# Warmup Iteration  23: 1007819.623 ops/s
# Warmup Iteration  24: 1008634.932 ops/s
# Warmup Iteration  25: 1007710.403 ops/s
# Warmup Iteration  26: 996087.295 ops/s
# Warmup Iteration  27: 1006649.091 ops/s
# Warmup Iteration  28: 1006873.123 ops/s
# Warmup Iteration  29: 1008006.624 ops/s
# Warmup Iteration  30: 1006331.355 ops/s
Iteration   1: 1003690.025 ops/s
Iteration   2: 1007865.849 ops/s
Iteration   3: 1004312.054 ops/s
Iteration   4: 1008684.841 ops/s
Iteration   5: 1008988.773 ops/s
Iteration   6: 1008917.709 ops/s
Iteration   7: 994034.380 ops/s
Iteration   8: 1002979.337 ops/s
Iteration   9: 1007237.112 ops/s
Iteration  10: 1007258.231 ops/s
Iteration  11: 993576.510 ops/s
Iteration  12: 1004970.357 ops/s
Iteration  13: 1003903.937 ops/s
Iteration  14: 991903.744 ops/s
Iteration  15: 1008742.193 ops/s
Iteration  16: 991066.781 ops/s
Iteration  17: 1006980.788 ops/s
Iteration  18: 992281.707 ops/s
Iteration  19: 1003762.610 ops/s
Iteration  20: 1008960.985 ops/s
Iteration  21: 1010533.870 ops/s
Iteration  22: 1007768.754 ops/s
Iteration  23: 1005674.601 ops/s
Iteration  24: 1005901.157 ops/s
Iteration  25: 1007993.030 ops/s
Iteration  26: 1007720.407 ops/s
Iteration  27: 1001012.679 ops/s
Iteration  28: 1008436.283 ops/s
Iteration  29: 1004301.632 ops/s
Iteration  30: 1009404.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy":
  1004295.511 ±(99.9%) 3869.061 ops/s [Average]
  (min, avg, max) = (991066.781, 1004295.511, 1010533.870), stdev = 5791.029
  CI (99.9%): [1000426.450, 1008164.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy  thrpt   30  1004295.511 ± 3869.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689055.195 ops/s
# Warmup Iteration   2: 745252.171 ops/s
# Warmup Iteration   3: 958873.548 ops/s
# Warmup Iteration   4: 953193.053 ops/s
# Warmup Iteration   5: 951067.999 ops/s
# Warmup Iteration   6: 955859.424 ops/s
# Warmup Iteration   7: 955877.303 ops/s
# Warmup Iteration   8: 954020.009 ops/s
# Warmup Iteration   9: 940845.262 ops/s
# Warmup Iteration  10: 952970.145 ops/s
# Warmup Iteration  11: 836175.878 ops/s
# Warmup Iteration  12: 921273.064 ops/s
# Warmup Iteration  13: 955947.183 ops/s
# Warmup Iteration  14: 953934.358 ops/s
# Warmup Iteration  15: 956556.037 ops/s
# Warmup Iteration  16: 954645.356 ops/s
# Warmup Iteration  17: 998559.543 ops/s
# Warmup Iteration  18: 1006300.731 ops/s
# Warmup Iteration  19: 1002191.321 ops/s
# Warmup Iteration  20: 1006378.332 ops/s
# Warmup Iteration  21: 1004202.784 ops/s
# Warmup Iteration  22: 1000854.174 ops/s
# Warmup Iteration  23: 994502.876 ops/s
# Warmup Iteration  24: 998958.669 ops/s
# Warmup Iteration  25: 999315.240 ops/s
# Warmup Iteration  26: 995720.835 ops/s
# Warmup Iteration  27: 996996.995 ops/s
# Warmup Iteration  28: 1006921.149 ops/s
# Warmup Iteration  29: 1000207.527 ops/s
# Warmup Iteration  30: 1006270.384 ops/s
Iteration   1: 998627.817 ops/s
Iteration   2: 1007043.002 ops/s
Iteration   3: 1006889.844 ops/s
Iteration   4: 990642.900 ops/s
Iteration   5: 1006187.930 ops/s
Iteration   6: 1008501.418 ops/s
Iteration   7: 1001155.283 ops/s
Iteration   8: 1002322.498 ops/s
Iteration   9: 1006642.845 ops/s
Iteration  10: 1007913.915 ops/s
Iteration  11: 1003223.081 ops/s
Iteration  12: 1009331.943 ops/s
Iteration  13: 1002536.648 ops/s
Iteration  14: 1006155.908 ops/s
Iteration  15: 1003393.942 ops/s
Iteration  16: 990037.254 ops/s
Iteration  17: 1004229.797 ops/s
Iteration  18: 1003841.837 ops/s
Iteration  19: 1005399.071 ops/s
Iteration  20: 1001534.183 ops/s
Iteration  21: 1001821.540 ops/s
Iteration  22: 994962.858 ops/s
Iteration  23: 1007277.200 ops/s
Iteration  24: 1003146.402 ops/s
Iteration  25: 1007755.294 ops/s
Iteration  26: 1004846.336 ops/s
Iteration  27: 996291.335 ops/s
Iteration  28: 991823.525 ops/s
Iteration  29: 1005336.660 ops/s
Iteration  30: 1008205.419 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean":
  1002902.589 ±(99.9%) 3565.975 ops/s [Average]
  (min, avg, max) = (990037.254, 1002902.589, 1009331.943), stdev = 5337.384
  CI (99.9%): [999336.614, 1006468.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  1002902.589 ± 3565.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698695.118 ops/s
# Warmup Iteration   2: 740584.842 ops/s
# Warmup Iteration   3: 961828.280 ops/s
# Warmup Iteration   4: 957119.718 ops/s
# Warmup Iteration   5: 959341.533 ops/s
# Warmup Iteration   6: 964162.814 ops/s
# Warmup Iteration   7: 959565.784 ops/s
# Warmup Iteration   8: 953443.623 ops/s
# Warmup Iteration   9: 958858.186 ops/s
# Warmup Iteration  10: 965949.199 ops/s
# Warmup Iteration  11: 857795.556 ops/s
# Warmup Iteration  12: 912746.839 ops/s
# Warmup Iteration  13: 959043.431 ops/s
# Warmup Iteration  14: 948155.766 ops/s
# Warmup Iteration  15: 958607.556 ops/s
# Warmup Iteration  16: 950683.730 ops/s
# Warmup Iteration  17: 1013323.966 ops/s
# Warmup Iteration  18: 1011420.182 ops/s
# Warmup Iteration  19: 1012962.506 ops/s
# Warmup Iteration  20: 1007097.906 ops/s
# Warmup Iteration  21: 1004891.970 ops/s
# Warmup Iteration  22: 1017420.356 ops/s
# Warmup Iteration  23: 1010730.368 ops/s
# Warmup Iteration  24: 1018911.833 ops/s
# Warmup Iteration  25: 1013694.434 ops/s
# Warmup Iteration  26: 1020648.592 ops/s
# Warmup Iteration  27: 1007397.692 ops/s
# Warmup Iteration  28: 1016207.483 ops/s
# Warmup Iteration  29: 1018661.392 ops/s
# Warmup Iteration  30: 1016046.240 ops/s
Iteration   1: 1019074.756 ops/s
Iteration   2: 1015761.478 ops/s
Iteration   3: 1016516.256 ops/s
Iteration   4: 1013377.013 ops/s
Iteration   5: 1001510.163 ops/s
Iteration   6: 1016599.090 ops/s
Iteration   7: 1012373.889 ops/s
Iteration   8: 1012984.438 ops/s
Iteration   9: 1010465.736 ops/s
Iteration  10: 1011690.542 ops/s
Iteration  11: 1015297.250 ops/s
Iteration  12: 1006143.070 ops/s
Iteration  13: 1016621.333 ops/s
Iteration  14: 1014363.998 ops/s
Iteration  15: 1017551.997 ops/s
Iteration  16: 1002097.103 ops/s
Iteration  17: 998131.827 ops/s
Iteration  18: 999932.104 ops/s
Iteration  19: 1019741.352 ops/s
Iteration  20: 1016182.862 ops/s
Iteration  21: 994787.756 ops/s
Iteration  22: 1016074.038 ops/s
Iteration  23: 1011775.673 ops/s
Iteration  24: 1000794.502 ops/s
Iteration  25: 1018131.789 ops/s
Iteration  26: 1015097.264 ops/s
Iteration  27: 1014696.956 ops/s
Iteration  28: 1011953.690 ops/s
Iteration  29: 1008955.256 ops/s
Iteration  30: 1018382.064 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte":
  1011568.841 ±(99.9%) 4600.475 ops/s [Average]
  (min, avg, max) = (994787.756, 1011568.841, 1019741.352), stdev = 6885.775
  CI (99.9%): [1006968.366, 1016169.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1011568.841 ± 4600.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690164.949 ops/s
# Warmup Iteration   2: 731664.288 ops/s
# Warmup Iteration   3: 940496.439 ops/s
# Warmup Iteration   4: 951526.010 ops/s
# Warmup Iteration   5: 950100.257 ops/s
# Warmup Iteration   6: 951564.383 ops/s
# Warmup Iteration   7: 935899.979 ops/s
# Warmup Iteration   8: 952057.120 ops/s
# Warmup Iteration   9: 954366.558 ops/s
# Warmup Iteration  10: 945789.426 ops/s
# Warmup Iteration  11: 883354.721 ops/s
# Warmup Iteration  12: 880018.989 ops/s
# Warmup Iteration  13: 952304.572 ops/s
# Warmup Iteration  14: 953661.245 ops/s
# Warmup Iteration  15: 952196.027 ops/s
# Warmup Iteration  16: 946194.129 ops/s
# Warmup Iteration  17: 1009820.762 ops/s
# Warmup Iteration  18: 1010474.335 ops/s
# Warmup Iteration  19: 1004388.441 ops/s
# Warmup Iteration  20: 997052.557 ops/s
# Warmup Iteration  21: 1006439.212 ops/s
# Warmup Iteration  22: 1006413.896 ops/s
# Warmup Iteration  23: 1003577.058 ops/s
# Warmup Iteration  24: 1009795.473 ops/s
# Warmup Iteration  25: 998156.584 ops/s
# Warmup Iteration  26: 1009696.693 ops/s
# Warmup Iteration  27: 1007053.823 ops/s
# Warmup Iteration  28: 1001328.721 ops/s
# Warmup Iteration  29: 997916.007 ops/s
# Warmup Iteration  30: 1003627.412 ops/s
Iteration   1: 1008201.836 ops/s
Iteration   2: 1007383.486 ops/s
Iteration   3: 1009314.840 ops/s
Iteration   4: 1011622.579 ops/s
Iteration   5: 1012575.296 ops/s
Iteration   6: 1009673.967 ops/s
Iteration   7: 992567.577 ops/s
Iteration   8: 1006165.105 ops/s
Iteration   9: 1004272.926 ops/s
Iteration  10: 1012003.386 ops/s
Iteration  11: 1007952.295 ops/s
Iteration  12: 1001210.480 ops/s
Iteration  13: 1008158.230 ops/s
Iteration  14: 1006204.908 ops/s
Iteration  15: 1004980.084 ops/s
Iteration  16: 1008239.355 ops/s
Iteration  17: 1002623.884 ops/s
Iteration  18: 1011445.519 ops/s
Iteration  19: 1001918.818 ops/s
Iteration  20: 1006927.571 ops/s
Iteration  21: 1011183.213 ops/s
Iteration  22: 991497.665 ops/s
Iteration  23: 1009370.869 ops/s
Iteration  24: 997526.369 ops/s
Iteration  25: 1004317.133 ops/s
Iteration  26: 1008044.510 ops/s
Iteration  27: 995505.124 ops/s
Iteration  28: 1004833.056 ops/s
Iteration  29: 1010801.962 ops/s
Iteration  30: 988424.276 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar":
  1005164.877 ±(99.9%) 4246.516 ops/s [Average]
  (min, avg, max) = (988424.276, 1005164.877, 1012575.296), stdev = 6355.985
  CI (99.9%): [1000918.362, 1009411.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1005164.877 ± 4246.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693166.514 ops/s
# Warmup Iteration   2: 733869.664 ops/s
# Warmup Iteration   3: 955470.000 ops/s
# Warmup Iteration   4: 948626.449 ops/s
# Warmup Iteration   5: 945929.592 ops/s
# Warmup Iteration   6: 946267.275 ops/s
# Warmup Iteration   7: 947683.442 ops/s
# Warmup Iteration   8: 946463.445 ops/s
# Warmup Iteration   9: 938606.860 ops/s
# Warmup Iteration  10: 951465.618 ops/s
# Warmup Iteration  11: 856332.463 ops/s
# Warmup Iteration  12: 902613.122 ops/s
# Warmup Iteration  13: 941957.785 ops/s
# Warmup Iteration  14: 946532.318 ops/s
# Warmup Iteration  15: 941781.986 ops/s
# Warmup Iteration  16: 941981.697 ops/s
# Warmup Iteration  17: 1001643.228 ops/s
# Warmup Iteration  18: 1000045.611 ops/s
# Warmup Iteration  19: 992891.458 ops/s
# Warmup Iteration  20: 985337.518 ops/s
# Warmup Iteration  21: 1003635.602 ops/s
# Warmup Iteration  22: 987563.170 ops/s
# Warmup Iteration  23: 1004619.803 ops/s
# Warmup Iteration  24: 993248.571 ops/s
# Warmup Iteration  25: 1002351.442 ops/s
# Warmup Iteration  26: 996966.819 ops/s
# Warmup Iteration  27: 999836.506 ops/s
# Warmup Iteration  28: 1001703.026 ops/s
# Warmup Iteration  29: 992869.285 ops/s
# Warmup Iteration  30: 1001566.969 ops/s
Iteration   1: 1004972.386 ops/s
Iteration   2: 1000454.686 ops/s
Iteration   3: 1002455.173 ops/s
Iteration   4: 1003891.050 ops/s
Iteration   5: 990502.336 ops/s
Iteration   6: 1000828.854 ops/s
Iteration   7: 1002837.401 ops/s
Iteration   8: 997837.053 ops/s
Iteration   9: 1002328.298 ops/s
Iteration  10: 984231.953 ops/s
Iteration  11: 996115.764 ops/s
Iteration  12: 1003190.913 ops/s
Iteration  13: 1002130.945 ops/s
Iteration  14: 1001760.427 ops/s
Iteration  15: 1000809.054 ops/s
Iteration  16: 996404.649 ops/s
Iteration  17: 1003883.213 ops/s
Iteration  18: 1000887.917 ops/s
Iteration  19: 997393.902 ops/s
Iteration  20: 992771.146 ops/s
Iteration  21: 1001101.903 ops/s
Iteration  22: 999161.495 ops/s
Iteration  23: 996473.868 ops/s
Iteration  24: 1001935.175 ops/s
Iteration  25: 1002639.865 ops/s
Iteration  26: 1000779.656 ops/s
Iteration  27: 1001663.917 ops/s
Iteration  28: 998815.574 ops/s
Iteration  29: 996298.866 ops/s
Iteration  30: 997953.918 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble":
  999417.045 ±(99.9%) 2943.029 ops/s [Average]
  (min, avg, max) = (984231.953, 999417.045, 1004972.386), stdev = 4404.988
  CI (99.9%): [996474.016, 1002360.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  999417.045 ± 2943.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695747.129 ops/s
# Warmup Iteration   2: 740318.541 ops/s
# Warmup Iteration   3: 948704.677 ops/s
# Warmup Iteration   4: 932813.639 ops/s
# Warmup Iteration   5: 941640.039 ops/s
# Warmup Iteration   6: 944510.443 ops/s
# Warmup Iteration   7: 934582.125 ops/s
# Warmup Iteration   8: 943465.267 ops/s
# Warmup Iteration   9: 942200.597 ops/s
# Warmup Iteration  10: 944391.161 ops/s
# Warmup Iteration  11: 884681.933 ops/s
# Warmup Iteration  12: 866427.172 ops/s
# Warmup Iteration  13: 943480.154 ops/s
# Warmup Iteration  14: 945922.970 ops/s
# Warmup Iteration  15: 937848.899 ops/s
# Warmup Iteration  16: 940942.693 ops/s
# Warmup Iteration  17: 1011907.534 ops/s
# Warmup Iteration  18: 1014350.914 ops/s
# Warmup Iteration  19: 1007070.658 ops/s
# Warmup Iteration  20: 1002394.619 ops/s
# Warmup Iteration  21: 1010075.045 ops/s
# Warmup Iteration  22: 1015656.610 ops/s
# Warmup Iteration  23: 1002445.911 ops/s
# Warmup Iteration  24: 997995.769 ops/s
# Warmup Iteration  25: 1007789.143 ops/s
# Warmup Iteration  26: 1009113.081 ops/s
# Warmup Iteration  27: 1008870.757 ops/s
# Warmup Iteration  28: 1014093.818 ops/s
# Warmup Iteration  29: 1009661.149 ops/s
# Warmup Iteration  30: 1016374.916 ops/s
Iteration   1: 993699.111 ops/s
Iteration   2: 1019526.963 ops/s
Iteration   3: 1012589.841 ops/s
Iteration   4: 992815.566 ops/s
Iteration   5: 1012645.263 ops/s
Iteration   6: 1010001.980 ops/s
Iteration   7: 1011571.158 ops/s
Iteration   8: 1012222.555 ops/s
Iteration   9: 1014951.262 ops/s
Iteration  10: 995606.580 ops/s
Iteration  11: 1015836.682 ops/s
Iteration  12: 1008864.179 ops/s
Iteration  13: 1014752.403 ops/s
Iteration  14: 1011325.787 ops/s
Iteration  15: 1005805.342 ops/s
Iteration  16: 1010145.328 ops/s
Iteration  17: 1009832.951 ops/s
Iteration  18: 1014729.551 ops/s
Iteration  19: 1014839.331 ops/s
Iteration  20: 1014590.634 ops/s
Iteration  21: 1001978.497 ops/s
Iteration  22: 1013531.928 ops/s
Iteration  23: 1008171.284 ops/s
Iteration  24: 1022717.459 ops/s
Iteration  25: 1014027.949 ops/s
Iteration  26: 1017159.152 ops/s
Iteration  27: 1016715.215 ops/s
Iteration  28: 1009163.452 ops/s
Iteration  29: 997018.070 ops/s
Iteration  30: 1009851.281 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat":
  1010222.892 ±(99.9%) 4917.473 ops/s [Average]
  (min, avg, max) = (992815.566, 1010222.892, 1022717.459), stdev = 7360.243
  CI (99.9%): [1005305.419, 1015140.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  1010222.892 ± 4917.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701930.035 ops/s
# Warmup Iteration   2: 743016.161 ops/s
# Warmup Iteration   3: 952097.408 ops/s
# Warmup Iteration   4: 955022.267 ops/s
# Warmup Iteration   5: 951036.019 ops/s
# Warmup Iteration   6: 956263.321 ops/s
# Warmup Iteration   7: 948141.987 ops/s
# Warmup Iteration   8: 951647.719 ops/s
# Warmup Iteration   9: 957795.413 ops/s
# Warmup Iteration  10: 941836.642 ops/s
# Warmup Iteration  11: 871565.063 ops/s
# Warmup Iteration  12: 896946.911 ops/s
# Warmup Iteration  13: 947889.511 ops/s
# Warmup Iteration  14: 951581.927 ops/s
# Warmup Iteration  15: 950370.574 ops/s
# Warmup Iteration  16: 954864.173 ops/s
# Warmup Iteration  17: 1012354.755 ops/s
# Warmup Iteration  18: 1007212.620 ops/s
# Warmup Iteration  19: 1015615.153 ops/s
# Warmup Iteration  20: 1015304.836 ops/s
# Warmup Iteration  21: 1012683.865 ops/s
# Warmup Iteration  22: 1013786.754 ops/s
# Warmup Iteration  23: 1012844.613 ops/s
# Warmup Iteration  24: 1012948.884 ops/s
# Warmup Iteration  25: 1012938.420 ops/s
# Warmup Iteration  26: 1009985.843 ops/s
# Warmup Iteration  27: 1010560.725 ops/s
# Warmup Iteration  28: 1013521.502 ops/s
# Warmup Iteration  29: 1012253.550 ops/s
# Warmup Iteration  30: 1008131.344 ops/s
Iteration   1: 1013047.567 ops/s
Iteration   2: 1016126.284 ops/s
Iteration   3: 1017719.017 ops/s
Iteration   4: 1014214.255 ops/s
Iteration   5: 1014780.175 ops/s
Iteration   6: 1012831.676 ops/s
Iteration   7: 1008817.504 ops/s
Iteration   8: 986809.179 ops/s
Iteration   9: 1016783.936 ops/s
Iteration  10: 1008631.552 ops/s
Iteration  11: 994225.306 ops/s
Iteration  12: 1006646.075 ops/s
Iteration  13: 1010846.736 ops/s
Iteration  14: 995757.636 ops/s
Iteration  15: 994407.260 ops/s
Iteration  16: 984793.906 ops/s
Iteration  17: 1008671.364 ops/s
Iteration  18: 1007095.732 ops/s
Iteration  19: 988675.877 ops/s
Iteration  20: 1011070.338 ops/s
Iteration  21: 999199.924 ops/s
Iteration  22: 992140.839 ops/s
Iteration  23: 1010925.851 ops/s
Iteration  24: 1009166.827 ops/s
Iteration  25: 1011597.910 ops/s
Iteration  26: 1007521.300 ops/s
Iteration  27: 996086.562 ops/s
Iteration  28: 1014965.456 ops/s
Iteration  29: 1020602.137 ops/s
Iteration  30: 1013310.793 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt":
  1006248.966 ±(99.9%) 6699.158 ops/s [Average]
  (min, avg, max) = (984793.906, 1006248.966, 1020602.137), stdev = 10026.985
  CI (99.9%): [999549.808, 1012948.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1006248.966 ± 6699.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685178.450 ops/s
# Warmup Iteration   2: 740848.057 ops/s
# Warmup Iteration   3: 958898.558 ops/s
# Warmup Iteration   4: 956171.121 ops/s
# Warmup Iteration   5: 951243.970 ops/s
# Warmup Iteration   6: 962347.387 ops/s
# Warmup Iteration   7: 960207.491 ops/s
# Warmup Iteration   8: 953328.169 ops/s
# Warmup Iteration   9: 960117.726 ops/s
# Warmup Iteration  10: 958765.318 ops/s
# Warmup Iteration  11: 852035.435 ops/s
# Warmup Iteration  12: 903672.963 ops/s
# Warmup Iteration  13: 947647.024 ops/s
# Warmup Iteration  14: 949052.020 ops/s
# Warmup Iteration  15: 959720.735 ops/s
# Warmup Iteration  16: 959081.105 ops/s
# Warmup Iteration  17: 1010956.347 ops/s
# Warmup Iteration  18: 997223.006 ops/s
# Warmup Iteration  19: 1007569.025 ops/s
# Warmup Iteration  20: 1009974.394 ops/s
# Warmup Iteration  21: 1004160.649 ops/s
# Warmup Iteration  22: 1013245.068 ops/s
# Warmup Iteration  23: 1010298.431 ops/s
# Warmup Iteration  24: 999532.854 ops/s
# Warmup Iteration  25: 1011958.884 ops/s
# Warmup Iteration  26: 1010325.910 ops/s
# Warmup Iteration  27: 1021584.916 ops/s
# Warmup Iteration  28: 1014245.782 ops/s
# Warmup Iteration  29: 1010304.049 ops/s
# Warmup Iteration  30: 1007482.784 ops/s
Iteration   1: 1005778.312 ops/s
Iteration   2: 1010876.954 ops/s
Iteration   3: 1003123.086 ops/s
Iteration   4: 1008426.330 ops/s
Iteration   5: 1011919.741 ops/s
Iteration   6: 1006668.514 ops/s
Iteration   7: 1017588.626 ops/s
Iteration   8: 1007880.119 ops/s
Iteration   9: 1012136.604 ops/s
Iteration  10: 1013876.717 ops/s
Iteration  11: 1013553.410 ops/s
Iteration  12: 1010789.834 ops/s
Iteration  13: 1011374.223 ops/s
Iteration  14: 1015843.783 ops/s
Iteration  15: 1008430.123 ops/s
Iteration  16: 1002232.712 ops/s
Iteration  17: 1009212.167 ops/s
Iteration  18: 1001883.766 ops/s
Iteration  19: 1010659.544 ops/s
Iteration  20: 1019854.668 ops/s
Iteration  21: 1015678.738 ops/s
Iteration  22: 992317.698 ops/s
Iteration  23: 1015261.234 ops/s
Iteration  24: 1013057.324 ops/s
Iteration  25: 1014430.018 ops/s
Iteration  26: 1007379.692 ops/s
Iteration  27: 1010149.277 ops/s
Iteration  28: 1011564.286 ops/s
Iteration  29: 1005121.824 ops/s
Iteration  30: 1011815.682 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong":
  1009962.833 ±(99.9%) 3678.073 ops/s [Average]
  (min, avg, max) = (992317.698, 1009962.833, 1019854.668), stdev = 5505.166
  CI (99.9%): [1006284.761, 1013640.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1009962.833 ± 3678.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697445.532 ops/s
# Warmup Iteration   2: 743560.372 ops/s
# Warmup Iteration   3: 951295.702 ops/s
# Warmup Iteration   4: 946895.295 ops/s
# Warmup Iteration   5: 944004.720 ops/s
# Warmup Iteration   6: 944494.562 ops/s
# Warmup Iteration   7: 938731.703 ops/s
# Warmup Iteration   8: 948209.799 ops/s
# Warmup Iteration   9: 948215.600 ops/s
# Warmup Iteration  10: 948048.609 ops/s
# Warmup Iteration  11: 876436.247 ops/s
# Warmup Iteration  12: 875215.612 ops/s
# Warmup Iteration  13: 951874.891 ops/s
# Warmup Iteration  14: 938736.283 ops/s
# Warmup Iteration  15: 948070.758 ops/s
# Warmup Iteration  16: 938638.533 ops/s
# Warmup Iteration  17: 1002159.564 ops/s
# Warmup Iteration  18: 1009729.647 ops/s
# Warmup Iteration  19: 1001468.137 ops/s
# Warmup Iteration  20: 1008717.830 ops/s
# Warmup Iteration  21: 1007917.229 ops/s
# Warmup Iteration  22: 1010466.193 ops/s
# Warmup Iteration  23: 1004162.035 ops/s
# Warmup Iteration  24: 1010198.741 ops/s
# Warmup Iteration  25: 1005358.877 ops/s
# Warmup Iteration  26: 1002458.622 ops/s
# Warmup Iteration  27: 1006402.182 ops/s
# Warmup Iteration  28: 1003402.489 ops/s
# Warmup Iteration  29: 998758.839 ops/s
# Warmup Iteration  30: 988790.318 ops/s
Iteration   1: 1006165.446 ops/s
Iteration   2: 1007492.146 ops/s
Iteration   3: 989724.765 ops/s
Iteration   4: 1008686.188 ops/s
Iteration   5: 1009393.324 ops/s
Iteration   6: 1004723.586 ops/s
Iteration   7: 1008733.093 ops/s
Iteration   8: 984826.416 ops/s
Iteration   9: 1004981.561 ops/s
Iteration  10: 1015678.636 ops/s
Iteration  11: 1010273.190 ops/s
Iteration  12: 1004012.683 ops/s
Iteration  13: 989286.990 ops/s
Iteration  14: 1006660.756 ops/s
Iteration  15: 1006625.257 ops/s
Iteration  16: 992138.487 ops/s
Iteration  17: 1013776.912 ops/s
Iteration  18: 1008915.089 ops/s
Iteration  19: 975098.178 ops/s
Iteration  20: 1007001.479 ops/s
Iteration  21: 1008308.229 ops/s
Iteration  22: 1003485.882 ops/s
Iteration  23: 1005183.993 ops/s
Iteration  24: 1010275.050 ops/s
Iteration  25: 1007175.534 ops/s
Iteration  26: 1008616.187 ops/s
Iteration  27: 1009210.031 ops/s
Iteration  28: 1009753.926 ops/s
Iteration  29: 1011160.801 ops/s
Iteration  30: 1008847.424 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort":
  1004540.375 ±(99.9%) 6067.101 ops/s [Average]
  (min, avg, max) = (975098.178, 1004540.375, 1015678.636), stdev = 9080.952
  CI (99.9%): [998473.273, 1010607.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1004540.375 ± 6067.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581805.118 ops/s
# Warmup Iteration   2: 691666.709 ops/s
# Warmup Iteration   3: 879621.674 ops/s
# Warmup Iteration   4: 867389.916 ops/s
# Warmup Iteration   5: 868980.970 ops/s
# Warmup Iteration   6: 871021.458 ops/s
# Warmup Iteration   7: 874514.027 ops/s
# Warmup Iteration   8: 874659.057 ops/s
# Warmup Iteration   9: 718882.396 ops/s
# Warmup Iteration  10: 869833.480 ops/s
# Warmup Iteration  11: 869824.778 ops/s
# Warmup Iteration  12: 869319.211 ops/s
# Warmup Iteration  13: 871775.982 ops/s
# Warmup Iteration  14: 871670.976 ops/s
# Warmup Iteration  15: 876755.595 ops/s
# Warmup Iteration  16: 869888.276 ops/s
# Warmup Iteration  17: 921287.521 ops/s
# Warmup Iteration  18: 916953.443 ops/s
# Warmup Iteration  19: 923129.117 ops/s
# Warmup Iteration  20: 921285.142 ops/s
# Warmup Iteration  21: 919430.284 ops/s
# Warmup Iteration  22: 916892.543 ops/s
# Warmup Iteration  23: 922450.697 ops/s
# Warmup Iteration  24: 918522.410 ops/s
# Warmup Iteration  25: 918932.327 ops/s
# Warmup Iteration  26: 920594.490 ops/s
# Warmup Iteration  27: 920085.913 ops/s
# Warmup Iteration  28: 921648.058 ops/s
# Warmup Iteration  29: 919980.101 ops/s
# Warmup Iteration  30: 918776.706 ops/s
Iteration   1: 920875.835 ops/s
Iteration   2: 919053.889 ops/s
Iteration   3: 922589.711 ops/s
Iteration   4: 922696.637 ops/s
Iteration   5: 922172.197 ops/s
Iteration   6: 920417.392 ops/s
Iteration   7: 910020.428 ops/s
Iteration   8: 917648.003 ops/s
Iteration   9: 907545.306 ops/s
Iteration  10: 921622.726 ops/s
Iteration  11: 921526.203 ops/s
Iteration  12: 915152.961 ops/s
Iteration  13: 906965.095 ops/s
Iteration  14: 919536.830 ops/s
Iteration  15: 922300.495 ops/s
Iteration  16: 924367.091 ops/s
Iteration  17: 921170.030 ops/s
Iteration  18: 902931.645 ops/s
Iteration  19: 920624.144 ops/s
Iteration  20: 918042.327 ops/s
Iteration  21: 921017.889 ops/s
Iteration  22: 921165.380 ops/s
Iteration  23: 919829.194 ops/s
Iteration  24: 923490.077 ops/s
Iteration  25: 919709.945 ops/s
Iteration  26: 922001.575 ops/s
Iteration  27: 920749.678 ops/s
Iteration  28: 921063.068 ops/s
Iteration  29: 912446.627 ops/s
Iteration  30: 921077.989 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator":
  918660.346 ±(99.9%) 3564.376 ops/s [Average]
  (min, avg, max) = (902931.645, 918660.346, 924367.091), stdev = 5334.990
  CI (99.9%): [915095.970, 922224.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  918660.346 ± 3564.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96860.431 ops/s
# Warmup Iteration   2: 104111.190 ops/s
# Warmup Iteration   3: 129312.337 ops/s
# Warmup Iteration   4: 134326.555 ops/s
# Warmup Iteration   5: 134109.782 ops/s
# Warmup Iteration   6: 133860.365 ops/s
# Warmup Iteration   7: 133645.604 ops/s
# Warmup Iteration   8: 134798.902 ops/s
# Warmup Iteration   9: 134816.065 ops/s
# Warmup Iteration  10: 134952.685 ops/s
# Warmup Iteration  11: 134827.376 ops/s
# Warmup Iteration  12: 124661.136 ops/s
# Warmup Iteration  13: 125130.054 ops/s
# Warmup Iteration  14: 133777.872 ops/s
# Warmup Iteration  15: 133353.370 ops/s
# Warmup Iteration  16: 134904.875 ops/s
# Warmup Iteration  17: 140991.119 ops/s
# Warmup Iteration  18: 142101.290 ops/s
# Warmup Iteration  19: 142052.083 ops/s
# Warmup Iteration  20: 142006.319 ops/s
# Warmup Iteration  21: 140669.611 ops/s
# Warmup Iteration  22: 140694.795 ops/s
# Warmup Iteration  23: 141702.558 ops/s
# Warmup Iteration  24: 141761.874 ops/s
# Warmup Iteration  25: 141950.509 ops/s
# Warmup Iteration  26: 140972.228 ops/s
# Warmup Iteration  27: 141848.748 ops/s
# Warmup Iteration  28: 141617.074 ops/s
# Warmup Iteration  29: 141765.724 ops/s
# Warmup Iteration  30: 142611.113 ops/s
Iteration   1: 142034.048 ops/s
Iteration   2: 141868.847 ops/s
Iteration   3: 141740.662 ops/s
Iteration   4: 141022.037 ops/s
Iteration   5: 141892.599 ops/s
Iteration   6: 139409.822 ops/s
Iteration   7: 141651.968 ops/s
Iteration   8: 142082.724 ops/s
Iteration   9: 141315.938 ops/s
Iteration  10: 139779.592 ops/s
Iteration  11: 142187.950 ops/s
Iteration  12: 141607.072 ops/s
Iteration  13: 141972.989 ops/s
Iteration  14: 142236.731 ops/s
Iteration  15: 141770.942 ops/s
Iteration  16: 142111.194 ops/s
Iteration  17: 142115.293 ops/s
Iteration  18: 139396.250 ops/s
Iteration  19: 142334.632 ops/s
Iteration  20: 141992.193 ops/s
Iteration  21: 141044.977 ops/s
Iteration  22: 139550.012 ops/s
Iteration  23: 142440.750 ops/s
Iteration  24: 142482.922 ops/s
Iteration  25: 142692.971 ops/s
Iteration  26: 141698.174 ops/s
Iteration  27: 142202.254 ops/s
Iteration  28: 139954.868 ops/s
Iteration  29: 141561.512 ops/s
Iteration  30: 142235.515 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList":
  141546.248 ±(99.9%) 641.223 ops/s [Average]
  (min, avg, max) = (139396.250, 141546.248, 142692.971), stdev = 959.753
  CI (99.9%): [140905.025, 142187.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subList  thrpt   30  141546.248 ± 641.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 222785.596 ops/s
# Warmup Iteration   2: 239633.250 ops/s
# Warmup Iteration   3: 289941.368 ops/s
# Warmup Iteration   4: 300912.893 ops/s
# Warmup Iteration   5: 301416.138 ops/s
# Warmup Iteration   6: 298055.045 ops/s
# Warmup Iteration   7: 299799.099 ops/s
# Warmup Iteration   8: 297874.151 ops/s
# Warmup Iteration   9: 296391.184 ops/s
# Warmup Iteration  10: 294042.950 ops/s
# Warmup Iteration  11: 298693.814 ops/s
# Warmup Iteration  12: 292866.148 ops/s
# Warmup Iteration  13: 266089.273 ops/s
# Warmup Iteration  14: 301502.962 ops/s
# Warmup Iteration  15: 299995.567 ops/s
# Warmup Iteration  16: 301992.735 ops/s
# Warmup Iteration  17: 317985.857 ops/s
# Warmup Iteration  18: 319279.676 ops/s
# Warmup Iteration  19: 318892.717 ops/s
# Warmup Iteration  20: 318186.516 ops/s
# Warmup Iteration  21: 316692.315 ops/s
# Warmup Iteration  22: 320455.599 ops/s
# Warmup Iteration  23: 318725.054 ops/s
# Warmup Iteration  24: 317937.280 ops/s
# Warmup Iteration  25: 318230.471 ops/s
# Warmup Iteration  26: 317473.356 ops/s
# Warmup Iteration  27: 319400.288 ops/s
# Warmup Iteration  28: 317330.878 ops/s
# Warmup Iteration  29: 319860.445 ops/s
# Warmup Iteration  30: 319016.146 ops/s
Iteration   1: 318614.202 ops/s
Iteration   2: 317401.765 ops/s
Iteration   3: 319999.874 ops/s
Iteration   4: 317732.069 ops/s
Iteration   5: 314240.680 ops/s
Iteration   6: 318201.554 ops/s
Iteration   7: 317802.504 ops/s
Iteration   8: 317704.471 ops/s
Iteration   9: 317806.190 ops/s
Iteration  10: 313594.363 ops/s
Iteration  11: 318169.577 ops/s
Iteration  12: 317898.937 ops/s
Iteration  13: 318986.292 ops/s
Iteration  14: 320478.291 ops/s
Iteration  15: 317897.646 ops/s
Iteration  16: 319901.331 ops/s
Iteration  17: 319124.857 ops/s
Iteration  18: 320670.839 ops/s
Iteration  19: 317966.394 ops/s
Iteration  20: 319721.043 ops/s
Iteration  21: 314073.939 ops/s
Iteration  22: 319203.639 ops/s
Iteration  23: 312642.810 ops/s
Iteration  24: 319301.852 ops/s
Iteration  25: 319544.242 ops/s
Iteration  26: 317961.258 ops/s
Iteration  27: 311259.587 ops/s
Iteration  28: 318016.829 ops/s
Iteration  29: 318741.129 ops/s
Iteration  30: 320198.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator":
  317828.541 ±(99.9%) 1570.639 ops/s [Average]
  (min, avg, max) = (311259.587, 317828.541, 320670.839), stdev = 2350.858
  CI (99.9%): [316257.902, 319399.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator  thrpt   30  317828.541 ± 1570.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4857827.413 ops/s
# Warmup Iteration   2: 16273513.375 ops/s
# Warmup Iteration   3: 14731440.064 ops/s
# Warmup Iteration   4: 14769747.338 ops/s
# Warmup Iteration   5: 15984773.717 ops/s
# Warmup Iteration   6: 16071126.623 ops/s
# Warmup Iteration   7: 16055711.932 ops/s
# Warmup Iteration   8: 15919859.095 ops/s
# Warmup Iteration   9: 16072860.660 ops/s
# Warmup Iteration  10: 16037147.860 ops/s
# Warmup Iteration  11: 16051665.973 ops/s
# Warmup Iteration  12: 16083476.789 ops/s
# Warmup Iteration  13: 16051451.036 ops/s
# Warmup Iteration  14: 16038730.167 ops/s
# Warmup Iteration  15: 15845951.653 ops/s
# Warmup Iteration  16: 16051472.476 ops/s
# Warmup Iteration  17: 16067402.911 ops/s
# Warmup Iteration  18: 15859738.490 ops/s
# Warmup Iteration  19: 15953211.425 ops/s
# Warmup Iteration  20: 15995004.972 ops/s
# Warmup Iteration  21: 16091078.778 ops/s
# Warmup Iteration  22: 16087938.586 ops/s
# Warmup Iteration  23: 15943911.148 ops/s
# Warmup Iteration  24: 15984818.081 ops/s
# Warmup Iteration  25: 16069624.822 ops/s
# Warmup Iteration  26: 16044651.957 ops/s
# Warmup Iteration  27: 16077479.252 ops/s
# Warmup Iteration  28: 16055454.566 ops/s
# Warmup Iteration  29: 15888863.272 ops/s
# Warmup Iteration  30: 16040637.554 ops/s
Iteration   1: 16099315.078 ops/s
Iteration   2: 16042008.669 ops/s
Iteration   3: 16004743.935 ops/s
Iteration   4: 16076409.753 ops/s
Iteration   5: 16090288.776 ops/s
Iteration   6: 16063022.417 ops/s
Iteration   7: 16115988.491 ops/s
Iteration   8: 15831593.426 ops/s
Iteration   9: 15985607.127 ops/s
Iteration  10: 16135922.911 ops/s
Iteration  11: 15772445.264 ops/s
Iteration  12: 16070705.645 ops/s
Iteration  13: 16053932.406 ops/s
Iteration  14: 16065473.157 ops/s
Iteration  15: 16040718.426 ops/s
Iteration  16: 15835371.757 ops/s
Iteration  17: 16033255.123 ops/s
Iteration  18: 16019295.241 ops/s
Iteration  19: 16069502.468 ops/s
Iteration  20: 16047790.180 ops/s
Iteration  21: 16045913.715 ops/s
Iteration  22: 16025389.179 ops/s
Iteration  23: 16099950.577 ops/s
Iteration  24: 16080516.528 ops/s
Iteration  25: 16066720.572 ops/s
Iteration  26: 16090887.866 ops/s
Iteration  27: 16002220.197 ops/s
Iteration  28: 16093745.945 ops/s
Iteration  29: 16087908.674 ops/s
Iteration  30: 16046780.311 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap":
  16036447.460 ±(99.9%) 55792.687 ops/s [Average]
  (min, avg, max) = (15772445.264, 16036447.460, 16135922.911), stdev = 83507.873
  CI (99.9%): [15980654.774, 16092240.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  16036447.460 ± 55792.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2703507.906 ops/s
# Warmup Iteration   2: 6279513.011 ops/s
# Warmup Iteration   3: 6188816.473 ops/s
# Warmup Iteration   4: 5148922.659 ops/s
# Warmup Iteration   5: 6176989.053 ops/s
# Warmup Iteration   6: 6212002.452 ops/s
# Warmup Iteration   7: 6241687.672 ops/s
# Warmup Iteration   8: 6187215.366 ops/s
# Warmup Iteration   9: 6210200.526 ops/s
# Warmup Iteration  10: 6207947.874 ops/s
# Warmup Iteration  11: 6215190.413 ops/s
# Warmup Iteration  12: 6182717.097 ops/s
# Warmup Iteration  13: 6232905.922 ops/s
# Warmup Iteration  14: 6187306.078 ops/s
# Warmup Iteration  15: 6230652.350 ops/s
# Warmup Iteration  16: 6228483.957 ops/s
# Warmup Iteration  17: 6234110.328 ops/s
# Warmup Iteration  18: 6239527.046 ops/s
# Warmup Iteration  19: 6145979.032 ops/s
# Warmup Iteration  20: 6243065.062 ops/s
# Warmup Iteration  21: 6235717.083 ops/s
# Warmup Iteration  22: 6180331.300 ops/s
# Warmup Iteration  23: 6213544.432 ops/s
# Warmup Iteration  24: 6195199.191 ops/s
# Warmup Iteration  25: 6226024.880 ops/s
# Warmup Iteration  26: 6233862.122 ops/s
# Warmup Iteration  27: 6172995.339 ops/s
# Warmup Iteration  28: 6172261.322 ops/s
# Warmup Iteration  29: 6238157.030 ops/s
# Warmup Iteration  30: 6086678.477 ops/s
Iteration   1: 6224828.654 ops/s
Iteration   2: 6131701.008 ops/s
Iteration   3: 6212015.182 ops/s
Iteration   4: 6257117.351 ops/s
Iteration   5: 6204909.125 ops/s
Iteration   6: 6134183.050 ops/s
Iteration   7: 6244187.669 ops/s
Iteration   8: 6240098.254 ops/s
Iteration   9: 6186338.057 ops/s
Iteration  10: 6255525.415 ops/s
Iteration  11: 6245090.433 ops/s
Iteration  12: 6254540.308 ops/s
Iteration  13: 6250677.711 ops/s
Iteration  14: 6111811.765 ops/s
Iteration  15: 6233330.363 ops/s
Iteration  16: 6179958.602 ops/s
Iteration  17: 6257157.455 ops/s
Iteration  18: 6240844.939 ops/s
Iteration  19: 6226127.790 ops/s
Iteration  20: 6226828.187 ops/s
Iteration  21: 6227151.162 ops/s
Iteration  22: 6245320.139 ops/s
Iteration  23: 6224716.003 ops/s
Iteration  24: 6255017.518 ops/s
Iteration  25: 6208885.982 ops/s
Iteration  26: 6220039.452 ops/s
Iteration  27: 6224931.980 ops/s
Iteration  28: 6119610.697 ops/s
Iteration  29: 6216388.142 ops/s
Iteration  30: 6246653.219 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  6216866.187 ±(99.9%) 28012.999 ops/s [Average]
  (min, avg, max) = (6111811.765, 6216866.187, 6257157.455), stdev = 41928.541
  CI (99.9%): [6188853.188, 6244879.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  6216866.187 ± 28012.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3198245.967 ops/s
# Warmup Iteration   2: 5326430.542 ops/s
# Warmup Iteration   3: 5881924.721 ops/s
# Warmup Iteration   4: 5868112.994 ops/s
# Warmup Iteration   5: 5923183.181 ops/s
# Warmup Iteration   6: 4958719.417 ops/s
# Warmup Iteration   7: 5940653.173 ops/s
# Warmup Iteration   8: 5911761.158 ops/s
# Warmup Iteration   9: 5924449.877 ops/s
# Warmup Iteration  10: 5911379.527 ops/s
# Warmup Iteration  11: 5923449.321 ops/s
# Warmup Iteration  12: 5869702.764 ops/s
# Warmup Iteration  13: 5901582.729 ops/s
# Warmup Iteration  14: 5916671.120 ops/s
# Warmup Iteration  15: 5924440.929 ops/s
# Warmup Iteration  16: 5885034.865 ops/s
# Warmup Iteration  17: 5891445.467 ops/s
# Warmup Iteration  18: 5920815.492 ops/s
# Warmup Iteration  19: 5877662.567 ops/s
# Warmup Iteration  20: 5922948.481 ops/s
# Warmup Iteration  21: 5928127.937 ops/s
# Warmup Iteration  22: 5922712.752 ops/s
# Warmup Iteration  23: 5903611.688 ops/s
# Warmup Iteration  24: 5908466.191 ops/s
# Warmup Iteration  25: 5921153.626 ops/s
# Warmup Iteration  26: 5924707.221 ops/s
# Warmup Iteration  27: 5913568.601 ops/s
# Warmup Iteration  28: 5926367.432 ops/s
# Warmup Iteration  29: 5919115.503 ops/s
# Warmup Iteration  30: 5916984.439 ops/s
Iteration   1: 5933969.153 ops/s
Iteration   2: 5902873.462 ops/s
Iteration   3: 5900419.715 ops/s
Iteration   4: 5922817.186 ops/s
Iteration   5: 5920645.384 ops/s
Iteration   6: 5942100.403 ops/s
Iteration   7: 5928367.311 ops/s
Iteration   8: 5919511.153 ops/s
Iteration   9: 5913618.509 ops/s
Iteration  10: 5880891.506 ops/s
Iteration  11: 5939380.692 ops/s
Iteration  12: 5921000.743 ops/s
Iteration  13: 5933209.882 ops/s
Iteration  14: 5918500.255 ops/s
Iteration  15: 5936698.282 ops/s
Iteration  16: 5929837.184 ops/s
Iteration  17: 5795902.793 ops/s
Iteration  18: 5848127.324 ops/s
Iteration  19: 5922013.305 ops/s
Iteration  20: 5924949.061 ops/s
Iteration  21: 5910313.723 ops/s
Iteration  22: 5932062.558 ops/s
Iteration  23: 5897803.636 ops/s
Iteration  24: 5916260.688 ops/s
Iteration  25: 5941444.608 ops/s
Iteration  26: 5887137.480 ops/s
Iteration  27: 5914567.283 ops/s
Iteration  28: 5842203.281 ops/s
Iteration  29: 5918203.302 ops/s
Iteration  30: 5835273.843 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone":
  5907670.124 ±(99.9%) 23382.637 ops/s [Average]
  (min, avg, max) = (5795902.793, 5907670.124, 5942100.403), stdev = 34998.033
  CI (99.9%): [5884287.486, 5931052.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone  thrpt   30  5907670.124 ± 23382.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4928905.655 ops/s
# Warmup Iteration   2: 9083347.334 ops/s
# Warmup Iteration   3: 9770881.428 ops/s
# Warmup Iteration   4: 9820905.837 ops/s
# Warmup Iteration   5: 8170698.353 ops/s
# Warmup Iteration   6: 9857980.905 ops/s
# Warmup Iteration   7: 9888900.851 ops/s
# Warmup Iteration   8: 9854033.449 ops/s
# Warmup Iteration   9: 9871278.403 ops/s
# Warmup Iteration  10: 9895063.334 ops/s
# Warmup Iteration  11: 9892041.875 ops/s
# Warmup Iteration  12: 9894179.609 ops/s
# Warmup Iteration  13: 9776356.421 ops/s
# Warmup Iteration  14: 9773573.426 ops/s
# Warmup Iteration  15: 9869151.625 ops/s
# Warmup Iteration  16: 9863143.497 ops/s
# Warmup Iteration  17: 9854998.083 ops/s
# Warmup Iteration  18: 9847786.203 ops/s
# Warmup Iteration  19: 9852160.623 ops/s
# Warmup Iteration  20: 9857250.798 ops/s
# Warmup Iteration  21: 9882400.880 ops/s
# Warmup Iteration  22: 9876077.023 ops/s
# Warmup Iteration  23: 9847202.926 ops/s
# Warmup Iteration  24: 9882314.390 ops/s
# Warmup Iteration  25: 9878859.012 ops/s
# Warmup Iteration  26: 9885190.666 ops/s
# Warmup Iteration  27: 9859769.588 ops/s
# Warmup Iteration  28: 9888400.567 ops/s
# Warmup Iteration  29: 9681240.427 ops/s
# Warmup Iteration  30: 9866033.153 ops/s
Iteration   1: 9910465.533 ops/s
Iteration   2: 9878047.348 ops/s
Iteration   3: 9894463.332 ops/s
Iteration   4: 9871242.567 ops/s
Iteration   5: 9869274.706 ops/s
Iteration   6: 9723758.693 ops/s
Iteration   7: 9840021.280 ops/s
Iteration   8: 9848471.246 ops/s
Iteration   9: 9871250.042 ops/s
Iteration  10: 9903322.399 ops/s
Iteration  11: 9829974.498 ops/s
Iteration  12: 9881367.636 ops/s
Iteration  13: 9885912.392 ops/s
Iteration  14: 9684969.355 ops/s
Iteration  15: 9880307.824 ops/s
Iteration  16: 9876559.563 ops/s
Iteration  17: 9875535.577 ops/s
Iteration  18: 9882425.871 ops/s
Iteration  19: 9892424.420 ops/s
Iteration  20: 9856283.280 ops/s
Iteration  21: 9868139.899 ops/s
Iteration  22: 9857351.545 ops/s
Iteration  23: 9862208.761 ops/s
Iteration  24: 9775910.907 ops/s
Iteration  25: 9868250.059 ops/s
Iteration  26: 9877232.877 ops/s
Iteration  27: 9882739.296 ops/s
Iteration  28: 9890723.720 ops/s
Iteration  29: 9831651.053 ops/s
Iteration  30: 9829882.201 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals":
  9856672.263 ±(99.9%) 33031.437 ops/s [Average]
  (min, avg, max) = (9684969.355, 9856672.263, 9910465.533), stdev = 49439.904
  CI (99.9%): [9823640.825, 9889703.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals  thrpt   30  9856672.263 ± 33031.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2727862.191 ops/s
# Warmup Iteration   2: 6086432.835 ops/s
# Warmup Iteration   3: 6195854.869 ops/s
# Warmup Iteration   4: 5192504.216 ops/s
# Warmup Iteration   5: 6259661.050 ops/s
# Warmup Iteration   6: 6244687.251 ops/s
# Warmup Iteration   7: 6253959.688 ops/s
# Warmup Iteration   8: 6248125.728 ops/s
# Warmup Iteration   9: 6195390.721 ops/s
# Warmup Iteration  10: 6263374.872 ops/s
# Warmup Iteration  11: 6264018.214 ops/s
# Warmup Iteration  12: 6210485.433 ops/s
# Warmup Iteration  13: 6194256.069 ops/s
# Warmup Iteration  14: 6243283.290 ops/s
# Warmup Iteration  15: 6254906.399 ops/s
# Warmup Iteration  16: 6246050.702 ops/s
# Warmup Iteration  17: 6240798.022 ops/s
# Warmup Iteration  18: 6254598.343 ops/s
# Warmup Iteration  19: 6263925.696 ops/s
# Warmup Iteration  20: 6249790.380 ops/s
# Warmup Iteration  21: 6239026.905 ops/s
# Warmup Iteration  22: 6259310.361 ops/s
# Warmup Iteration  23: 6243971.816 ops/s
# Warmup Iteration  24: 6236801.149 ops/s
# Warmup Iteration  25: 6157468.824 ops/s
# Warmup Iteration  26: 6212595.272 ops/s
# Warmup Iteration  27: 6186083.140 ops/s
# Warmup Iteration  28: 6231771.125 ops/s
# Warmup Iteration  29: 6198073.759 ops/s
# Warmup Iteration  30: 6255175.247 ops/s
Iteration   1: 6274138.661 ops/s
Iteration   2: 6227009.060 ops/s
Iteration   3: 6231052.866 ops/s
Iteration   4: 6279720.395 ops/s
Iteration   5: 6267616.388 ops/s
Iteration   6: 6241354.717 ops/s
Iteration   7: 6170591.527 ops/s
Iteration   8: 6263416.514 ops/s
Iteration   9: 6276519.482 ops/s
Iteration  10: 6223070.621 ops/s
Iteration  11: 6255776.594 ops/s
Iteration  12: 6262328.529 ops/s
Iteration  13: 6255138.032 ops/s
Iteration  14: 6255296.348 ops/s
Iteration  15: 6115774.674 ops/s
Iteration  16: 6260904.283 ops/s
Iteration  17: 6268484.527 ops/s
Iteration  18: 6271675.479 ops/s
Iteration  19: 6249107.277 ops/s
Iteration  20: 6262215.188 ops/s
Iteration  21: 6251227.697 ops/s
Iteration  22: 6265942.418 ops/s
Iteration  23: 6169141.702 ops/s
Iteration  24: 6259979.662 ops/s
Iteration  25: 6221295.380 ops/s
Iteration  26: 6243170.198 ops/s
Iteration  27: 6255251.683 ops/s
Iteration  28: 6229551.336 ops/s
Iteration  29: 6273081.646 ops/s
Iteration  30: 6257681.146 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  6244583.801 ±(99.9%) 24156.420 ops/s [Average]
  (min, avg, max) = (6115774.674, 6244583.801, 6279720.395), stdev = 36156.195
  CI (99.9%): [6220427.381, 6268740.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  6244583.801 ± 24156.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707514.321 ops/s
# Warmup Iteration   2: 736454.375 ops/s
# Warmup Iteration   3: 946790.831 ops/s
# Warmup Iteration   4: 950387.283 ops/s
# Warmup Iteration   5: 951881.329 ops/s
# Warmup Iteration   6: 951788.510 ops/s
# Warmup Iteration   7: 949498.638 ops/s
# Warmup Iteration   8: 950837.816 ops/s
# Warmup Iteration   9: 949183.910 ops/s
# Warmup Iteration  10: 950832.643 ops/s
# Warmup Iteration  11: 924305.098 ops/s
# Warmup Iteration  12: 816802.905 ops/s
# Warmup Iteration  13: 951533.320 ops/s
# Warmup Iteration  14: 948640.107 ops/s
# Warmup Iteration  15: 947564.131 ops/s
# Warmup Iteration  16: 947587.474 ops/s
# Warmup Iteration  17: 996966.361 ops/s
# Warmup Iteration  18: 996904.448 ops/s
# Warmup Iteration  19: 1002745.260 ops/s
# Warmup Iteration  20: 1006647.655 ops/s
# Warmup Iteration  21: 1006564.069 ops/s
# Warmup Iteration  22: 1005819.036 ops/s
# Warmup Iteration  23: 1009324.182 ops/s
# Warmup Iteration  24: 1006693.294 ops/s
# Warmup Iteration  25: 1001763.752 ops/s
# Warmup Iteration  26: 994561.732 ops/s
# Warmup Iteration  27: 1005814.010 ops/s
# Warmup Iteration  28: 999935.049 ops/s
# Warmup Iteration  29: 1007607.037 ops/s
# Warmup Iteration  30: 1002936.275 ops/s
Iteration   1: 1011430.108 ops/s
Iteration   2: 1002021.734 ops/s
Iteration   3: 1007516.230 ops/s
Iteration   4: 1006080.665 ops/s
Iteration   5: 1001466.537 ops/s
Iteration   6: 1008795.654 ops/s
Iteration   7: 1005273.701 ops/s
Iteration   8: 1006668.124 ops/s
Iteration   9: 996100.694 ops/s
Iteration  10: 1006964.794 ops/s
Iteration  11: 1007870.771 ops/s
Iteration  12: 1004238.690 ops/s
Iteration  13: 1007815.341 ops/s
Iteration  14: 998524.038 ops/s
Iteration  15: 1008930.224 ops/s
Iteration  16: 1009372.219 ops/s
Iteration  17: 1002726.881 ops/s
Iteration  18: 1006779.488 ops/s
Iteration  19: 1008978.675 ops/s
Iteration  20: 1001433.348 ops/s
Iteration  21: 1010794.827 ops/s
Iteration  22: 999568.719 ops/s
Iteration  23: 1009581.444 ops/s
Iteration  24: 1009770.435 ops/s
Iteration  25: 986659.354 ops/s
Iteration  26: 1006662.741 ops/s
Iteration  27: 1003682.486 ops/s
Iteration  28: 1006301.439 ops/s
Iteration  29: 1006145.314 ops/s
Iteration  30: 1007607.562 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_with":
  1005192.075 ±(99.9%) 3413.626 ops/s [Average]
  (min, avg, max) = (986659.354, 1005192.075, 1011430.108), stdev = 5109.355
  CI (99.9%): [1001778.449, 1008605.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  1005192.075 ± 3413.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693395.807 ops/s
# Warmup Iteration   2: 747059.187 ops/s
# Warmup Iteration   3: 969049.153 ops/s
# Warmup Iteration   4: 969526.884 ops/s
# Warmup Iteration   5: 970745.417 ops/s
# Warmup Iteration   6: 970116.067 ops/s
# Warmup Iteration   7: 968828.479 ops/s
# Warmup Iteration   8: 972261.589 ops/s
# Warmup Iteration   9: 972785.942 ops/s
# Warmup Iteration  10: 970392.123 ops/s
# Warmup Iteration  11: 821114.314 ops/s
# Warmup Iteration  12: 970017.471 ops/s
# Warmup Iteration  13: 968884.518 ops/s
# Warmup Iteration  14: 961384.342 ops/s
# Warmup Iteration  15: 968827.851 ops/s
# Warmup Iteration  16: 965185.018 ops/s
# Warmup Iteration  17: 1013398.391 ops/s
# Warmup Iteration  18: 1021420.477 ops/s
# Warmup Iteration  19: 1022843.880 ops/s
# Warmup Iteration  20: 1025689.156 ops/s
# Warmup Iteration  21: 1020585.824 ops/s
# Warmup Iteration  22: 1028959.889 ops/s
# Warmup Iteration  23: 1021050.964 ops/s
# Warmup Iteration  24: 1012225.328 ops/s
# Warmup Iteration  25: 1028425.239 ops/s
# Warmup Iteration  26: 1016815.588 ops/s
# Warmup Iteration  27: 1030339.821 ops/s
# Warmup Iteration  28: 1030989.712 ops/s
# Warmup Iteration  29: 1017351.846 ops/s
# Warmup Iteration  30: 1020791.034 ops/s
Iteration   1: 1031821.052 ops/s
Iteration   2: 1025300.283 ops/s
Iteration   3: 1024968.922 ops/s
Iteration   4: 1030292.558 ops/s
Iteration   5: 1026030.966 ops/s
Iteration   6: 1024692.163 ops/s
Iteration   7: 1031107.157 ops/s
Iteration   8: 1022273.441 ops/s
Iteration   9: 1028854.951 ops/s
Iteration  10: 1028671.252 ops/s
Iteration  11: 1026990.221 ops/s
Iteration  12: 1029278.410 ops/s
Iteration  13: 1021496.807 ops/s
Iteration  14: 1031644.789 ops/s
Iteration  15: 1030333.840 ops/s
Iteration  16: 1028250.288 ops/s
Iteration  17: 1011093.517 ops/s
Iteration  18: 1011496.748 ops/s
Iteration  19: 1030507.894 ops/s
Iteration  20: 1027282.635 ops/s
Iteration  21: 1033541.531 ops/s
Iteration  22: 1009782.125 ops/s
Iteration  23: 1027174.330 ops/s
Iteration  24: 1030714.332 ops/s
Iteration  25: 1028042.492 ops/s
Iteration  26: 1027590.645 ops/s
Iteration  27: 1029865.161 ops/s
Iteration  28: 1028136.818 ops/s
Iteration  29: 1031915.419 ops/s
Iteration  30: 1023160.007 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll":
  1026410.358 ±(99.9%) 4040.752 ops/s [Average]
  (min, avg, max) = (1009782.125, 1026410.358, 1033541.531), stdev = 6048.008
  CI (99.9%): [1022369.606, 1030451.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  1026410.358 ± 4040.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711399.581 ops/s
# Warmup Iteration   2: 742713.502 ops/s
# Warmup Iteration   3: 971563.730 ops/s
# Warmup Iteration   4: 965315.987 ops/s
# Warmup Iteration   5: 961253.770 ops/s
# Warmup Iteration   6: 964068.853 ops/s
# Warmup Iteration   7: 956937.692 ops/s
# Warmup Iteration   8: 957771.075 ops/s
# Warmup Iteration   9: 970052.370 ops/s
# Warmup Iteration  10: 956617.980 ops/s
# Warmup Iteration  11: 903697.603 ops/s
# Warmup Iteration  12: 873545.940 ops/s
# Warmup Iteration  13: 965538.536 ops/s
# Warmup Iteration  14: 968005.728 ops/s
# Warmup Iteration  15: 967765.667 ops/s
# Warmup Iteration  16: 967667.037 ops/s
# Warmup Iteration  17: 1017325.444 ops/s
# Warmup Iteration  18: 1025786.311 ops/s
# Warmup Iteration  19: 1024417.253 ops/s
# Warmup Iteration  20: 1024569.073 ops/s
# Warmup Iteration  21: 1021554.999 ops/s
# Warmup Iteration  22: 1018270.164 ops/s
# Warmup Iteration  23: 1021248.219 ops/s
# Warmup Iteration  24: 1013838.661 ops/s
# Warmup Iteration  25: 1020545.005 ops/s
# Warmup Iteration  26: 1021781.043 ops/s
# Warmup Iteration  27: 1014552.244 ops/s
# Warmup Iteration  28: 1024149.213 ops/s
# Warmup Iteration  29: 1022468.046 ops/s
# Warmup Iteration  30: 1022424.283 ops/s
Iteration   1: 1025439.527 ops/s
Iteration   2: 1021578.526 ops/s
Iteration   3: 1022533.051 ops/s
Iteration   4: 1026365.964 ops/s
Iteration   5: 1025430.077 ops/s
Iteration   6: 1006532.435 ops/s
Iteration   7: 1024284.280 ops/s
Iteration   8: 1023281.243 ops/s
Iteration   9: 1017732.501 ops/s
Iteration  10: 1002828.164 ops/s
Iteration  11: 1020887.767 ops/s
Iteration  12: 1017432.002 ops/s
Iteration  13: 1022437.287 ops/s
Iteration  14: 1023401.503 ops/s
Iteration  15: 1015225.102 ops/s
Iteration  16: 1020217.137 ops/s
Iteration  17: 1017693.552 ops/s
Iteration  18: 1022665.015 ops/s
Iteration  19: 1005056.967 ops/s
Iteration  20: 1025339.624 ops/s
Iteration  21: 1024257.813 ops/s
Iteration  22: 1022976.740 ops/s
Iteration  23: 1005873.587 ops/s
Iteration  24: 1023381.341 ops/s
Iteration  25: 1019697.072 ops/s
Iteration  26: 1026496.856 ops/s
Iteration  27: 1024619.812 ops/s
Iteration  28: 1018609.423 ops/s
Iteration  29: 1023603.814 ops/s
Iteration  30: 1021538.006 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_without":
  1019913.873 ±(99.9%) 4385.802 ops/s [Average]
  (min, avg, max) = (1002828.164, 1019913.873, 1026496.856), stdev = 6564.462
  CI (99.9%): [1015528.071, 1024299.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  1019913.873 ± 4385.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696214.975 ops/s
# Warmup Iteration   2: 737898.379 ops/s
# Warmup Iteration   3: 973571.822 ops/s
# Warmup Iteration   4: 967064.081 ops/s
# Warmup Iteration   5: 968613.007 ops/s
# Warmup Iteration   6: 969190.193 ops/s
# Warmup Iteration   7: 965283.551 ops/s
# Warmup Iteration   8: 953967.314 ops/s
# Warmup Iteration   9: 963589.306 ops/s
# Warmup Iteration  10: 970359.654 ops/s
# Warmup Iteration  11: 820720.719 ops/s
# Warmup Iteration  12: 969670.954 ops/s
# Warmup Iteration  13: 967325.240 ops/s
# Warmup Iteration  14: 964516.954 ops/s
# Warmup Iteration  15: 970044.726 ops/s
# Warmup Iteration  16: 959425.365 ops/s
# Warmup Iteration  17: 1016552.018 ops/s
# Warmup Iteration  18: 1024519.823 ops/s
# Warmup Iteration  19: 1023099.213 ops/s
# Warmup Iteration  20: 1025636.924 ops/s
# Warmup Iteration  21: 1022409.597 ops/s
# Warmup Iteration  22: 1006767.642 ops/s
# Warmup Iteration  23: 1025625.334 ops/s
# Warmup Iteration  24: 1023244.982 ops/s
# Warmup Iteration  25: 1025111.853 ops/s
# Warmup Iteration  26: 1023556.835 ops/s
# Warmup Iteration  27: 1015557.842 ops/s
# Warmup Iteration  28: 1015496.717 ops/s
# Warmup Iteration  29: 1027393.762 ops/s
# Warmup Iteration  30: 1022442.139 ops/s
Iteration   1: 1027504.782 ops/s
Iteration   2: 1005118.473 ops/s
Iteration   3: 1019410.456 ops/s
Iteration   4: 1026541.689 ops/s
Iteration   5: 1026311.787 ops/s
Iteration   6: 1020401.783 ops/s
Iteration   7: 1024233.461 ops/s
Iteration   8: 1022930.866 ops/s
Iteration   9: 1020762.335 ops/s
Iteration  10: 993943.559 ops/s
Iteration  11: 1025583.417 ops/s
Iteration  12: 1022751.456 ops/s
Iteration  13: 1020640.833 ops/s
Iteration  14: 1027374.011 ops/s
Iteration  15: 1021680.577 ops/s
Iteration  16: 1023717.106 ops/s
Iteration  17: 1025160.858 ops/s
Iteration  18: 1023746.407 ops/s
Iteration  19: 1016064.985 ops/s
Iteration  20: 1022540.595 ops/s
Iteration  21: 1021407.559 ops/s
Iteration  22: 1025220.112 ops/s
Iteration  23: 1020748.571 ops/s
Iteration  24: 1006914.540 ops/s
Iteration  25: 1028813.853 ops/s
Iteration  26: 1023677.849 ops/s
Iteration  27: 1022008.108 ops/s
Iteration  28: 1023744.170 ops/s
Iteration  29: 1027568.351 ops/s
Iteration  30: 1023359.788 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  1021329.411 ±(99.9%) 4908.928 ops/s [Average]
  (min, avg, max) = (993943.559, 1021329.411, 1028813.853), stdev = 7347.453
  CI (99.9%): [1016420.483, 1026238.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  1021329.411 ± 4908.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 357712.691 ops/s
# Warmup Iteration   2: 622970.790 ops/s
# Warmup Iteration   3: 879012.863 ops/s
# Warmup Iteration   4: 872597.661 ops/s
# Warmup Iteration   5: 876519.143 ops/s
# Warmup Iteration   6: 872401.087 ops/s
# Warmup Iteration   7: 871459.314 ops/s
# Warmup Iteration   8: 724225.753 ops/s
# Warmup Iteration   9: 876149.933 ops/s
# Warmup Iteration  10: 878873.292 ops/s
# Warmup Iteration  11: 877846.149 ops/s
# Warmup Iteration  12: 876911.508 ops/s
# Warmup Iteration  13: 877679.260 ops/s
# Warmup Iteration  14: 871311.768 ops/s
# Warmup Iteration  15: 872754.764 ops/s
# Warmup Iteration  16: 879383.385 ops/s
# Warmup Iteration  17: 879571.008 ops/s
# Warmup Iteration  18: 874366.479 ops/s
# Warmup Iteration  19: 883225.346 ops/s
# Warmup Iteration  20: 880122.966 ops/s
# Warmup Iteration  21: 882302.249 ops/s
# Warmup Iteration  22: 882296.489 ops/s
# Warmup Iteration  23: 880574.875 ops/s
# Warmup Iteration  24: 868930.536 ops/s
# Warmup Iteration  25: 878209.915 ops/s
# Warmup Iteration  26: 859035.128 ops/s
# Warmup Iteration  27: 881426.202 ops/s
# Warmup Iteration  28: 864612.815 ops/s
# Warmup Iteration  29: 880509.126 ops/s
# Warmup Iteration  30: 881206.651 ops/s
Iteration   1: 882147.005 ops/s
Iteration   2: 883080.647 ops/s
Iteration   3: 879259.956 ops/s
Iteration   4: 879773.469 ops/s
Iteration   5: 880168.853 ops/s
Iteration   6: 882809.813 ops/s
Iteration   7: 881265.351 ops/s
Iteration   8: 880440.788 ops/s
Iteration   9: 882142.258 ops/s
Iteration  10: 879902.272 ops/s
Iteration  11: 868131.717 ops/s
Iteration  12: 884089.104 ops/s
Iteration  13: 880057.362 ops/s
Iteration  14: 869731.367 ops/s
Iteration  15: 879116.493 ops/s
Iteration  16: 882138.304 ops/s
Iteration  17: 883757.403 ops/s
Iteration  18: 866277.714 ops/s
Iteration  19: 868674.972 ops/s
Iteration  20: 869273.339 ops/s
Iteration  21: 882491.810 ops/s
Iteration  22: 883671.465 ops/s
Iteration  23: 879672.099 ops/s
Iteration  24: 879533.297 ops/s
Iteration  25: 865282.746 ops/s
Iteration  26: 882662.560 ops/s
Iteration  27: 867643.648 ops/s
Iteration  28: 882193.575 ops/s
Iteration  29: 883156.152 ops/s
Iteration  30: 878627.881 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip":
  878239.114 ±(99.9%) 4045.268 ops/s [Average]
  (min, avg, max) = (865282.746, 878239.114, 884089.104), stdev = 6054.767
  CI (99.9%): [874193.846, 882284.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  878239.114 ± 4045.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712967.372 ops/s
# Warmup Iteration   2: 1047232.150 ops/s
# Warmup Iteration   3: 1325595.910 ops/s
# Warmup Iteration   4: 1311959.032 ops/s
# Warmup Iteration   5: 1316722.766 ops/s
# Warmup Iteration   6: 1315668.458 ops/s
# Warmup Iteration   7: 1258092.277 ops/s
# Warmup Iteration   8: 1144425.408 ops/s
# Warmup Iteration   9: 1317027.177 ops/s
# Warmup Iteration  10: 1324909.968 ops/s
# Warmup Iteration  11: 1309583.143 ops/s
# Warmup Iteration  12: 1319863.844 ops/s
# Warmup Iteration  13: 1326029.829 ops/s
# Warmup Iteration  14: 1315894.041 ops/s
# Warmup Iteration  15: 1322081.347 ops/s
# Warmup Iteration  16: 1324883.208 ops/s
# Warmup Iteration  17: 1327500.239 ops/s
# Warmup Iteration  18: 1328436.325 ops/s
# Warmup Iteration  19: 1317659.944 ops/s
# Warmup Iteration  20: 1328621.008 ops/s
# Warmup Iteration  21: 1326463.424 ops/s
# Warmup Iteration  22: 1315100.286 ops/s
# Warmup Iteration  23: 1329683.324 ops/s
# Warmup Iteration  24: 1317544.795 ops/s
# Warmup Iteration  25: 1315960.255 ops/s
# Warmup Iteration  26: 1318739.849 ops/s
# Warmup Iteration  27: 1329754.149 ops/s
# Warmup Iteration  28: 1330435.933 ops/s
# Warmup Iteration  29: 1326651.141 ops/s
# Warmup Iteration  30: 1329778.020 ops/s
Iteration   1: 1328927.852 ops/s
Iteration   2: 1310730.894 ops/s
Iteration   3: 1325290.603 ops/s
Iteration   4: 1329847.776 ops/s
Iteration   5: 1324966.325 ops/s
Iteration   6: 1318201.422 ops/s
Iteration   7: 1329319.774 ops/s
Iteration   8: 1329227.029 ops/s
Iteration   9: 1329095.625 ops/s
Iteration  10: 1325622.160 ops/s
Iteration  11: 1328663.396 ops/s
Iteration  12: 1322995.205 ops/s
Iteration  13: 1323708.459 ops/s
Iteration  14: 1326761.655 ops/s
Iteration  15: 1326687.388 ops/s
Iteration  16: 1298707.399 ops/s
Iteration  17: 1326255.863 ops/s
Iteration  18: 1327170.298 ops/s
Iteration  19: 1329679.789 ops/s
Iteration  20: 1328130.771 ops/s
Iteration  21: 1330969.745 ops/s
Iteration  22: 1328247.496 ops/s
Iteration  23: 1327804.113 ops/s
Iteration  24: 1325622.817 ops/s
Iteration  25: 1321146.701 ops/s
Iteration  26: 1330197.627 ops/s
Iteration  27: 1325884.299 ops/s
Iteration  28: 1304568.757 ops/s
Iteration  29: 1321898.803 ops/s
Iteration  30: 1330163.706 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  1324549.791 ±(99.9%) 5026.714 ops/s [Average]
  (min, avg, max) = (1298707.399, 1324549.791, 1330969.745), stdev = 7523.750
  CI (99.9%): [1319523.077, 1329576.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ListAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1324549.791 ± 5026.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adapt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adapt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4872326.863 ops/s
# Warmup Iteration   2: 8818961.612 ops/s
# Warmup Iteration   3: 9331963.930 ops/s
# Warmup Iteration   4: 9444235.584 ops/s
# Warmup Iteration   5: 7905090.012 ops/s
# Warmup Iteration   6: 9355760.552 ops/s
# Warmup Iteration   7: 9417802.026 ops/s
# Warmup Iteration   8: 9349792.416 ops/s
# Warmup Iteration   9: 9421175.999 ops/s
# Warmup Iteration  10: 9443263.527 ops/s
# Warmup Iteration  11: 9290641.188 ops/s
# Warmup Iteration  12: 9307456.995 ops/s
# Warmup Iteration  13: 9428403.559 ops/s
# Warmup Iteration  14: 9417639.317 ops/s
# Warmup Iteration  15: 9434229.836 ops/s
# Warmup Iteration  16: 9443176.958 ops/s
# Warmup Iteration  17: 9387228.677 ops/s
# Warmup Iteration  18: 9435962.274 ops/s
# Warmup Iteration  19: 9414255.735 ops/s
# Warmup Iteration  20: 9426446.124 ops/s
# Warmup Iteration  21: 9341496.423 ops/s
# Warmup Iteration  22: 9397620.764 ops/s
# Warmup Iteration  23: 9361483.422 ops/s
# Warmup Iteration  24: 9388417.076 ops/s
# Warmup Iteration  25: 9362645.926 ops/s
# Warmup Iteration  26: 9435184.013 ops/s
# Warmup Iteration  27: 9448507.751 ops/s
# Warmup Iteration  28: 9419221.950 ops/s
# Warmup Iteration  29: 9413809.884 ops/s
# Warmup Iteration  30: 9439360.215 ops/s
Iteration   1: 9421402.519 ops/s
Iteration   2: 9414930.784 ops/s
Iteration   3: 9420527.765 ops/s
Iteration   4: 9424136.694 ops/s
Iteration   5: 9407412.202 ops/s
Iteration   6: 9452981.154 ops/s
Iteration   7: 9275155.250 ops/s
Iteration   8: 9439913.849 ops/s
Iteration   9: 9453356.269 ops/s
Iteration  10: 9419094.038 ops/s
Iteration  11: 9445878.313 ops/s
Iteration  12: 9433342.449 ops/s
Iteration  13: 9419846.852 ops/s
Iteration  14: 9422525.070 ops/s
Iteration  15: 9436848.815 ops/s
Iteration  16: 9433993.762 ops/s
Iteration  17: 9388395.180 ops/s
Iteration  18: 9431333.393 ops/s
Iteration  19: 9409527.927 ops/s
Iteration  20: 9412996.991 ops/s
Iteration  21: 9461387.999 ops/s
Iteration  22: 9435605.306 ops/s
Iteration  23: 9289006.001 ops/s
Iteration  24: 9419679.646 ops/s
Iteration  25: 9435980.886 ops/s
Iteration  26: 9232947.656 ops/s
Iteration  27: 9424194.372 ops/s
Iteration  28: 9441080.489 ops/s
Iteration  29: 9423098.116 ops/s
Iteration  30: 9432602.236 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adapt":
  9411972.733 ±(99.9%) 34972.022 ops/s [Average]
  (min, avg, max) = (9232947.656, 9411972.733, 9461387.999), stdev = 52344.481
  CI (99.9%): [9377000.710, 9446944.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_adapt  thrpt   30  9411972.733 ± 34972.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adaptNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adaptNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 395344.677 ops/s
# Warmup Iteration   2: 408608.285 ops/s
# Warmup Iteration   3: 459682.769 ops/s
# Warmup Iteration   4: 501630.683 ops/s
# Warmup Iteration   5: 503197.567 ops/s
# Warmup Iteration   6: 502691.307 ops/s
# Warmup Iteration   7: 498811.149 ops/s
# Warmup Iteration   8: 495806.597 ops/s
# Warmup Iteration   9: 497830.879 ops/s
# Warmup Iteration  10: 500052.446 ops/s
# Warmup Iteration  11: 498574.152 ops/s
# Warmup Iteration  12: 503493.718 ops/s
# Warmup Iteration  13: 502561.621 ops/s
# Warmup Iteration  14: 502353.435 ops/s
# Warmup Iteration  15: 423926.621 ops/s
# Warmup Iteration  16: 503475.835 ops/s
# Warmup Iteration  17: 531614.725 ops/s
# Warmup Iteration  18: 531082.873 ops/s
# Warmup Iteration  19: 527128.987 ops/s
# Warmup Iteration  20: 529898.982 ops/s
# Warmup Iteration  21: 527841.922 ops/s
# Warmup Iteration  22: 531115.743 ops/s
# Warmup Iteration  23: 530069.442 ops/s
# Warmup Iteration  24: 532082.007 ops/s
# Warmup Iteration  25: 532384.445 ops/s
# Warmup Iteration  26: 529789.555 ops/s
# Warmup Iteration  27: 529788.806 ops/s
# Warmup Iteration  28: 532047.818 ops/s
# Warmup Iteration  29: 530906.109 ops/s
# Warmup Iteration  30: 530964.107 ops/s
Iteration   1: 528597.462 ops/s
Iteration   2: 528893.808 ops/s
Iteration   3: 531021.256 ops/s
Iteration   4: 532276.199 ops/s
Iteration   5: 528727.138 ops/s
Iteration   6: 525335.410 ops/s
Iteration   7: 530706.282 ops/s
Iteration   8: 530872.980 ops/s
Iteration   9: 521125.795 ops/s
Iteration  10: 530555.414 ops/s
Iteration  11: 531687.219 ops/s
Iteration  12: 519868.140 ops/s
Iteration  13: 529853.320 ops/s
Iteration  14: 529391.395 ops/s
Iteration  15: 529617.537 ops/s
Iteration  16: 527039.978 ops/s
Iteration  17: 530977.221 ops/s
Iteration  18: 529149.845 ops/s
Iteration  19: 530866.042 ops/s
Iteration  20: 530829.993 ops/s
Iteration  21: 526698.651 ops/s
Iteration  22: 520010.551 ops/s
Iteration  23: 531246.432 ops/s
Iteration  24: 531171.408 ops/s
Iteration  25: 530489.195 ops/s
Iteration  26: 530310.171 ops/s
Iteration  27: 530082.398 ops/s
Iteration  28: 528123.943 ops/s
Iteration  29: 532648.693 ops/s
Iteration  30: 531150.830 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_adaptNull":
  528977.490 ±(99.9%) 2238.280 ops/s [Average]
  (min, avg, max) = (519868.140, 528977.490, 532648.693), stdev = 3350.152
  CI (99.9%): [526739.210, 531215.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_adaptNull  thrpt   30  528977.490 ± 2238.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2884521.208 ops/s
# Warmup Iteration   2: 6075187.094 ops/s
# Warmup Iteration   3: 5100683.179 ops/s
# Warmup Iteration   4: 6025371.995 ops/s
# Warmup Iteration   5: 6036292.991 ops/s
# Warmup Iteration   6: 6009631.073 ops/s
# Warmup Iteration   7: 6012913.155 ops/s
# Warmup Iteration   8: 5972112.261 ops/s
# Warmup Iteration   9: 5956343.664 ops/s
# Warmup Iteration  10: 6031241.005 ops/s
# Warmup Iteration  11: 6024246.601 ops/s
# Warmup Iteration  12: 5997746.498 ops/s
# Warmup Iteration  13: 6019006.131 ops/s
# Warmup Iteration  14: 6016663.583 ops/s
# Warmup Iteration  15: 5968922.849 ops/s
# Warmup Iteration  16: 6026176.678 ops/s
# Warmup Iteration  17: 6009383.652 ops/s
# Warmup Iteration  18: 6004553.286 ops/s
# Warmup Iteration  19: 5983039.728 ops/s
# Warmup Iteration  20: 5932868.823 ops/s
# Warmup Iteration  21: 5984937.556 ops/s
# Warmup Iteration  22: 6014694.515 ops/s
# Warmup Iteration  23: 6028243.979 ops/s
# Warmup Iteration  24: 6019310.365 ops/s
# Warmup Iteration  25: 6022802.698 ops/s
# Warmup Iteration  26: 5993439.471 ops/s
# Warmup Iteration  27: 6016756.140 ops/s
# Warmup Iteration  28: 5963388.956 ops/s
# Warmup Iteration  29: 6019243.160 ops/s
# Warmup Iteration  30: 5954343.357 ops/s
Iteration   1: 5963822.199 ops/s
Iteration   2: 6022761.265 ops/s
Iteration   3: 6027134.761 ops/s
Iteration   4: 6025471.263 ops/s
Iteration   5: 6038786.896 ops/s
Iteration   6: 6018128.000 ops/s
Iteration   7: 6034000.444 ops/s
Iteration   8: 6033198.543 ops/s
Iteration   9: 5992768.169 ops/s
Iteration  10: 6021917.492 ops/s
Iteration  11: 6017809.255 ops/s
Iteration  12: 6005800.095 ops/s
Iteration  13: 5996463.463 ops/s
Iteration  14: 6014513.265 ops/s
Iteration  15: 5993614.722 ops/s
Iteration  16: 6009501.226 ops/s
Iteration  17: 6013485.164 ops/s
Iteration  18: 5895066.867 ops/s
Iteration  19: 5991233.257 ops/s
Iteration  20: 6038635.092 ops/s
Iteration  21: 6045416.055 ops/s
Iteration  22: 6002943.569 ops/s
Iteration  23: 6018638.641 ops/s
Iteration  24: 5991625.344 ops/s
Iteration  25: 6019926.310 ops/s
Iteration  26: 5925965.976 ops/s
Iteration  27: 6029560.815 ops/s
Iteration  28: 6055479.434 ops/s
Iteration  29: 6004569.743 ops/s
Iteration  30: 5889307.804 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAll":
  6004584.838 ±(99.9%) 26395.625 ops/s [Average]
  (min, avg, max) = (5889307.804, 6004584.838, 6055479.434), stdev = 39507.732
  CI (99.9%): [5978189.213, 6030980.462] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_addAll  thrpt   30  6004584.838 ± 26395.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2495967.620 ops/s
# Warmup Iteration   2: 6097537.922 ops/s
# Warmup Iteration   3: 5139121.213 ops/s
# Warmup Iteration   4: 6127084.693 ops/s
# Warmup Iteration   5: 6079391.315 ops/s
# Warmup Iteration   6: 6093208.265 ops/s
# Warmup Iteration   7: 6142254.051 ops/s
# Warmup Iteration   8: 6141878.713 ops/s
# Warmup Iteration   9: 6164085.941 ops/s
# Warmup Iteration  10: 6044688.671 ops/s
# Warmup Iteration  11: 6149657.709 ops/s
# Warmup Iteration  12: 6144083.071 ops/s
# Warmup Iteration  13: 6166088.653 ops/s
# Warmup Iteration  14: 6109951.184 ops/s
# Warmup Iteration  15: 6149129.599 ops/s
# Warmup Iteration  16: 6145555.266 ops/s
# Warmup Iteration  17: 6138284.097 ops/s
# Warmup Iteration  18: 6156594.444 ops/s
# Warmup Iteration  19: 6149779.298 ops/s
# Warmup Iteration  20: 6161058.137 ops/s
# Warmup Iteration  21: 6145169.331 ops/s
# Warmup Iteration  22: 6148462.915 ops/s
# Warmup Iteration  23: 6144220.946 ops/s
# Warmup Iteration  24: 6164179.851 ops/s
# Warmup Iteration  25: 6089542.759 ops/s
# Warmup Iteration  26: 6152617.972 ops/s
# Warmup Iteration  27: 6089097.381 ops/s
# Warmup Iteration  28: 6106485.866 ops/s
# Warmup Iteration  29: 6118526.820 ops/s
# Warmup Iteration  30: 6172021.395 ops/s
Iteration   1: 6164447.385 ops/s
Iteration   2: 6126402.467 ops/s
Iteration   3: 6154573.577 ops/s
Iteration   4: 6046745.113 ops/s
Iteration   5: 6060034.042 ops/s
Iteration   6: 6166377.501 ops/s
Iteration   7: 6171805.059 ops/s
Iteration   8: 6131992.184 ops/s
Iteration   9: 6116133.277 ops/s
Iteration  10: 6059201.967 ops/s
Iteration  11: 5971871.038 ops/s
Iteration  12: 6132872.248 ops/s
Iteration  13: 6153310.798 ops/s
Iteration  14: 6151380.174 ops/s
Iteration  15: 6145913.719 ops/s
Iteration  16: 6152198.991 ops/s
Iteration  17: 6168158.516 ops/s
Iteration  18: 6166888.241 ops/s
Iteration  19: 6166081.603 ops/s
Iteration  20: 6023167.653 ops/s
Iteration  21: 6102432.281 ops/s
Iteration  22: 6038340.185 ops/s
Iteration  23: 6145507.764 ops/s
Iteration  24: 6079050.221 ops/s
Iteration  25: 6178781.653 ops/s
Iteration  26: 6155957.648 ops/s
Iteration  27: 6154882.872 ops/s
Iteration  28: 6163460.371 ops/s
Iteration  29: 6159518.145 ops/s
Iteration  30: 6108666.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllAtIndex":
  6123871.787 ±(99.9%) 35351.229 ops/s [Average]
  (min, avg, max) = (5971871.038, 6123871.787, 6178781.653), stdev = 52912.060
  CI (99.9%): [6088520.558, 6159223.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  6123871.787 ± 35351.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 952829.616 ops/s
# Warmup Iteration   2: 2160109.130 ops/s
# Warmup Iteration   3: 1811409.932 ops/s
# Warmup Iteration   4: 2169831.813 ops/s
# Warmup Iteration   5: 2173008.769 ops/s
# Warmup Iteration   6: 2172616.077 ops/s
# Warmup Iteration   7: 2175050.943 ops/s
# Warmup Iteration   8: 2171939.113 ops/s
# Warmup Iteration   9: 2171376.283 ops/s
# Warmup Iteration  10: 2160960.850 ops/s
# Warmup Iteration  11: 2137312.367 ops/s
# Warmup Iteration  12: 2176371.100 ops/s
# Warmup Iteration  13: 2158082.662 ops/s
# Warmup Iteration  14: 2167104.106 ops/s
# Warmup Iteration  15: 2165839.456 ops/s
# Warmup Iteration  16: 2164912.432 ops/s
# Warmup Iteration  17: 2168772.302 ops/s
# Warmup Iteration  18: 2171855.323 ops/s
# Warmup Iteration  19: 2171825.171 ops/s
# Warmup Iteration  20: 2171186.719 ops/s
# Warmup Iteration  21: 2164588.186 ops/s
# Warmup Iteration  22: 2169972.662 ops/s
# Warmup Iteration  23: 2154231.150 ops/s
# Warmup Iteration  24: 2165440.091 ops/s
# Warmup Iteration  25: 2166741.908 ops/s
# Warmup Iteration  26: 2147332.142 ops/s
# Warmup Iteration  27: 2171661.561 ops/s
# Warmup Iteration  28: 2156853.882 ops/s
# Warmup Iteration  29: 2174492.705 ops/s
# Warmup Iteration  30: 2168680.542 ops/s
Iteration   1: 2169782.805 ops/s
Iteration   2: 2177498.780 ops/s
Iteration   3: 2165036.326 ops/s
Iteration   4: 2166539.622 ops/s
Iteration   5: 2173359.725 ops/s
Iteration   6: 2162727.445 ops/s
Iteration   7: 2174420.171 ops/s
Iteration   8: 2152603.080 ops/s
Iteration   9: 2178134.633 ops/s
Iteration  10: 2162555.080 ops/s
Iteration  11: 2169784.974 ops/s
Iteration  12: 2169302.879 ops/s
Iteration  13: 2174664.610 ops/s
Iteration  14: 2175118.850 ops/s
Iteration  15: 2170685.672 ops/s
Iteration  16: 2155501.391 ops/s
Iteration  17: 2174568.010 ops/s
Iteration  18: 2175605.135 ops/s
Iteration  19: 2176328.859 ops/s
Iteration  20: 2178033.170 ops/s
Iteration  21: 2177782.253 ops/s
Iteration  22: 2160737.353 ops/s
Iteration  23: 2171681.506 ops/s
Iteration  24: 2168124.517 ops/s
Iteration  25: 2160958.872 ops/s
Iteration  26: 2167175.716 ops/s
Iteration  27: 2162078.902 ops/s
Iteration  28: 2173079.228 ops/s
Iteration  29: 2168403.933 ops/s
Iteration  30: 2177923.993 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAllIterable":
  2169673.250 ±(99.9%) 4631.624 ops/s [Average]
  (min, avg, max) = (2152603.080, 2169673.250, 2178134.633), stdev = 6932.397
  CI (99.9%): [2165041.626, 2174304.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_addAllIterable  thrpt   30  2169673.250 ± 4631.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4576747.448 ops/s
# Warmup Iteration   2: 9808079.370 ops/s
# Warmup Iteration   3: 9827332.235 ops/s
# Warmup Iteration   4: 8292552.587 ops/s
# Warmup Iteration   5: 9934339.663 ops/s
# Warmup Iteration   6: 9878270.601 ops/s
# Warmup Iteration   7: 9828471.321 ops/s
# Warmup Iteration   8: 9831084.045 ops/s
# Warmup Iteration   9: 9907746.186 ops/s
# Warmup Iteration  10: 9920097.241 ops/s
# Warmup Iteration  11: 9923227.880 ops/s
# Warmup Iteration  12: 9905612.763 ops/s
# Warmup Iteration  13: 9830930.096 ops/s
# Warmup Iteration  14: 9891127.307 ops/s
# Warmup Iteration  15: 9908983.753 ops/s
# Warmup Iteration  16: 9897219.852 ops/s
# Warmup Iteration  17: 9826348.320 ops/s
# Warmup Iteration  18: 9912206.389 ops/s
# Warmup Iteration  19: 9922530.779 ops/s
# Warmup Iteration  20: 9909056.076 ops/s
# Warmup Iteration  21: 9915611.599 ops/s
# Warmup Iteration  22: 9884648.013 ops/s
# Warmup Iteration  23: 9914646.266 ops/s
# Warmup Iteration  24: 9843176.253 ops/s
# Warmup Iteration  25: 9877740.133 ops/s
# Warmup Iteration  26: 9876418.976 ops/s
# Warmup Iteration  27: 9925975.860 ops/s
# Warmup Iteration  28: 9859490.373 ops/s
# Warmup Iteration  29: 9923696.520 ops/s
# Warmup Iteration  30: 9815300.934 ops/s
Iteration   1: 9863169.797 ops/s
Iteration   2: 9888626.575 ops/s
Iteration   3: 9908268.594 ops/s
Iteration   4: 9926316.578 ops/s
Iteration   5: 9749752.496 ops/s
Iteration   6: 9901179.737 ops/s
Iteration   7: 9922549.640 ops/s
Iteration   8: 9907310.498 ops/s
Iteration   9: 9909668.414 ops/s
Iteration  10: 9738229.405 ops/s
Iteration  11: 9901798.887 ops/s
Iteration  12: 9922401.112 ops/s
Iteration  13: 9914299.877 ops/s
Iteration  14: 9547432.732 ops/s
Iteration  15: 9755255.206 ops/s
Iteration  16: 9896546.491 ops/s
Iteration  17: 9857671.301 ops/s
Iteration  18: 9921716.586 ops/s
Iteration  19: 9905752.501 ops/s
Iteration  20: 9904364.831 ops/s
Iteration  21: 9947181.700 ops/s
Iteration  22: 9918182.997 ops/s
Iteration  23: 9922583.133 ops/s
Iteration  24: 9906342.515 ops/s
Iteration  25: 9903703.899 ops/s
Iteration  26: 9901698.441 ops/s
Iteration  27: 9856988.133 ops/s
Iteration  28: 9901413.393 ops/s
Iteration  29: 9906899.416 ops/s
Iteration  30: 9927893.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_addAtIndex":
  9877839.947 ±(99.9%) 54222.201 ops/s [Average]
  (min, avg, max) = (9547432.732, 9877839.947, 9947181.700), stdev = 81157.244
  CI (99.9%): [9823617.747, 9932062.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_addAtIndex  thrpt   30  9877839.947 ± 54222.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1367809.419 ops/s
# Warmup Iteration   2: 2931909.175 ops/s
# Warmup Iteration   3: 2963203.843 ops/s
# Warmup Iteration   4: 2467279.039 ops/s
# Warmup Iteration   5: 2954180.534 ops/s
# Warmup Iteration   6: 2991120.190 ops/s
# Warmup Iteration   7: 2955238.982 ops/s
# Warmup Iteration   8: 2958398.794 ops/s
# Warmup Iteration   9: 2924702.265 ops/s
# Warmup Iteration  10: 2935045.294 ops/s
# Warmup Iteration  11: 2972785.485 ops/s
# Warmup Iteration  12: 2933512.468 ops/s
# Warmup Iteration  13: 2957533.044 ops/s
# Warmup Iteration  14: 2946945.337 ops/s
# Warmup Iteration  15: 2950016.275 ops/s
# Warmup Iteration  16: 2938139.515 ops/s
# Warmup Iteration  17: 3004171.600 ops/s
# Warmup Iteration  18: 2974491.587 ops/s
# Warmup Iteration  19: 2965900.448 ops/s
# Warmup Iteration  20: 2985447.917 ops/s
# Warmup Iteration  21: 2951907.341 ops/s
# Warmup Iteration  22: 2988734.908 ops/s
# Warmup Iteration  23: 2989407.811 ops/s
# Warmup Iteration  24: 2926962.269 ops/s
# Warmup Iteration  25: 2949504.970 ops/s
# Warmup Iteration  26: 2964865.859 ops/s
# Warmup Iteration  27: 2990783.605 ops/s
# Warmup Iteration  28: 2939566.201 ops/s
# Warmup Iteration  29: 2960442.808 ops/s
# Warmup Iteration  30: 2992508.246 ops/s
Iteration   1: 2928696.113 ops/s
Iteration   2: 2949657.320 ops/s
Iteration   3: 2929645.063 ops/s
Iteration   4: 2969089.533 ops/s
Iteration   5: 2982653.045 ops/s
Iteration   6: 2983457.135 ops/s
Iteration   7: 2994679.757 ops/s
Iteration   8: 2978944.293 ops/s
Iteration   9: 2979572.085 ops/s
Iteration  10: 2999270.344 ops/s
Iteration  11: 2973183.008 ops/s
Iteration  12: 2969986.031 ops/s
Iteration  13: 2982352.238 ops/s
Iteration  14: 2980461.399 ops/s
Iteration  15: 2959368.448 ops/s
Iteration  16: 2894021.918 ops/s
Iteration  17: 2944700.715 ops/s
Iteration  18: 2946072.865 ops/s
Iteration  19: 2984024.503 ops/s
Iteration  20: 2960524.023 ops/s
Iteration  21: 2980389.717 ops/s
Iteration  22: 2993006.152 ops/s
Iteration  23: 2972137.146 ops/s
Iteration  24: 2955650.988 ops/s
Iteration  25: 2994179.220 ops/s
Iteration  26: 2951526.722 ops/s
Iteration  27: 2992784.602 ops/s
Iteration  28: 2988257.211 ops/s
Iteration  29: 2976849.076 ops/s
Iteration  30: 3020052.504 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByMutating":
  2970506.439 ±(99.9%) 16899.909 ops/s [Average]
  (min, avg, max) = (2894021.918, 2970506.439, 3020052.504), stdev = 25294.990
  CI (99.9%): [2953606.530, 2987406.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2970506.439 ± 16899.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1092459.867 ops/s
# Warmup Iteration   2: 2512399.262 ops/s
# Warmup Iteration   3: 2527660.020 ops/s
# Warmup Iteration   4: 2124008.909 ops/s
# Warmup Iteration   5: 2567336.529 ops/s
# Warmup Iteration   6: 2559716.914 ops/s
# Warmup Iteration   7: 2552912.852 ops/s
# Warmup Iteration   8: 2549449.789 ops/s
# Warmup Iteration   9: 2539107.377 ops/s
# Warmup Iteration  10: 2549055.776 ops/s
# Warmup Iteration  11: 2563859.686 ops/s
# Warmup Iteration  12: 2556839.460 ops/s
# Warmup Iteration  13: 2566450.509 ops/s
# Warmup Iteration  14: 2564217.562 ops/s
# Warmup Iteration  15: 2545020.494 ops/s
# Warmup Iteration  16: 2562221.867 ops/s
# Warmup Iteration  17: 2544660.009 ops/s
# Warmup Iteration  18: 2552807.322 ops/s
# Warmup Iteration  19: 2566193.383 ops/s
# Warmup Iteration  20: 2548940.363 ops/s
# Warmup Iteration  21: 2555052.566 ops/s
# Warmup Iteration  22: 2532742.982 ops/s
# Warmup Iteration  23: 2529631.865 ops/s
# Warmup Iteration  24: 2546865.258 ops/s
# Warmup Iteration  25: 2563541.201 ops/s
# Warmup Iteration  26: 2499086.784 ops/s
# Warmup Iteration  27: 2536258.411 ops/s
# Warmup Iteration  28: 2543480.488 ops/s
# Warmup Iteration  29: 2549305.518 ops/s
# Warmup Iteration  30: 2533805.231 ops/s
Iteration   1: 2562388.513 ops/s
Iteration   2: 2528092.080 ops/s
Iteration   3: 2538007.992 ops/s
Iteration   4: 2539368.312 ops/s
Iteration   5: 2540467.676 ops/s
Iteration   6: 2557944.312 ops/s
Iteration   7: 2545442.086 ops/s
Iteration   8: 2531536.080 ops/s
Iteration   9: 2532671.254 ops/s
Iteration  10: 2520965.544 ops/s
Iteration  11: 2581046.223 ops/s
Iteration  12: 2547954.299 ops/s
Iteration  13: 2535099.772 ops/s
Iteration  14: 2583237.972 ops/s
Iteration  15: 2527037.130 ops/s
Iteration  16: 2575254.944 ops/s
Iteration  17: 2570325.427 ops/s
Iteration  18: 2563463.837 ops/s
Iteration  19: 2549751.532 ops/s
Iteration  20: 2537659.334 ops/s
Iteration  21: 2567788.102 ops/s
Iteration  22: 2549007.632 ops/s
Iteration  23: 2547988.287 ops/s
Iteration  24: 2550547.297 ops/s
Iteration  25: 2504033.041 ops/s
Iteration  26: 2542101.554 ops/s
Iteration  27: 2577396.309 ops/s
Iteration  28: 2538892.362 ops/s
Iteration  29: 2524794.399 ops/s
Iteration  30: 2557716.488 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_aggregateByNonMutating":
  2547599.326 ±(99.9%) 12802.760 ops/s [Average]
  (min, avg, max) = (2504033.041, 2547599.326, 2583237.972), stdev = 19162.569
  CI (99.9%): [2534796.567, 2560402.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2547599.326 ± 12802.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2539134.500 ops/s
# Warmup Iteration   2: 5568213.634 ops/s
# Warmup Iteration   3: 5595350.109 ops/s
# Warmup Iteration   4: 4809535.714 ops/s
# Warmup Iteration   5: 5373704.789 ops/s
# Warmup Iteration   6: 5595223.075 ops/s
# Warmup Iteration   7: 5595924.522 ops/s
# Warmup Iteration   8: 5590032.008 ops/s
# Warmup Iteration   9: 5550077.641 ops/s
# Warmup Iteration  10: 5573373.371 ops/s
# Warmup Iteration  11: 5579023.022 ops/s
# Warmup Iteration  12: 5579240.847 ops/s
# Warmup Iteration  13: 5534016.218 ops/s
# Warmup Iteration  14: 5583115.757 ops/s
# Warmup Iteration  15: 5578214.881 ops/s
# Warmup Iteration  16: 5559598.301 ops/s
# Warmup Iteration  17: 5581584.837 ops/s
# Warmup Iteration  18: 5575631.703 ops/s
# Warmup Iteration  19: 5571142.054 ops/s
# Warmup Iteration  20: 5599249.335 ops/s
# Warmup Iteration  21: 5521233.638 ops/s
# Warmup Iteration  22: 5501180.071 ops/s
# Warmup Iteration  23: 5572128.147 ops/s
# Warmup Iteration  24: 5572839.581 ops/s
# Warmup Iteration  25: 5596406.101 ops/s
# Warmup Iteration  26: 5546657.817 ops/s
# Warmup Iteration  27: 5579356.056 ops/s
# Warmup Iteration  28: 5588427.531 ops/s
# Warmup Iteration  29: 5589390.695 ops/s
# Warmup Iteration  30: 5549664.614 ops/s
Iteration   1: 5580338.453 ops/s
Iteration   2: 5586958.826 ops/s
Iteration   3: 5576126.663 ops/s
Iteration   4: 5489368.394 ops/s
Iteration   5: 5460490.686 ops/s
Iteration   6: 5601243.350 ops/s
Iteration   7: 5438402.242 ops/s
Iteration   8: 5590004.568 ops/s
Iteration   9: 5536744.579 ops/s
Iteration  10: 5583540.622 ops/s
Iteration  11: 5603960.337 ops/s
Iteration  12: 5589488.068 ops/s
Iteration  13: 5580911.027 ops/s
Iteration  14: 5580914.084 ops/s
Iteration  15: 5513416.949 ops/s
Iteration  16: 5472972.057 ops/s
Iteration  17: 5592635.077 ops/s
Iteration  18: 5510332.455 ops/s
Iteration  19: 5584947.907 ops/s
Iteration  20: 5580202.963 ops/s
Iteration  21: 5575523.009 ops/s
Iteration  22: 5604094.717 ops/s
Iteration  23: 5579112.541 ops/s
Iteration  24: 5592558.212 ops/s
Iteration  25: 5580364.663 ops/s
Iteration  26: 5578165.651 ops/s
Iteration  27: 5585671.539 ops/s
Iteration  28: 5582501.363 ops/s
Iteration  29: 5562934.222 ops/s
Iteration  30: 5568937.061 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfy":
  5562095.409 ±(99.9%) 29939.178 ops/s [Average]
  (min, avg, max) = (5438402.242, 5562095.409, 5604094.717), stdev = 44811.556
  CI (99.9%): [5532156.231, 5592034.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_allSatisfy  thrpt   30  5562095.409 ± 29939.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2553196.832 ops/s
# Warmup Iteration   2: 4478318.331 ops/s
# Warmup Iteration   3: 4835277.910 ops/s
# Warmup Iteration   4: 4849100.519 ops/s
# Warmup Iteration   5: 4630898.723 ops/s
# Warmup Iteration   6: 4274143.065 ops/s
# Warmup Iteration   7: 4860182.952 ops/s
# Warmup Iteration   8: 4853244.242 ops/s
# Warmup Iteration   9: 4849964.197 ops/s
# Warmup Iteration  10: 4858566.012 ops/s
# Warmup Iteration  11: 4840930.227 ops/s
# Warmup Iteration  12: 4840410.690 ops/s
# Warmup Iteration  13: 4859840.234 ops/s
# Warmup Iteration  14: 4863091.607 ops/s
# Warmup Iteration  15: 4864173.756 ops/s
# Warmup Iteration  16: 4807035.146 ops/s
# Warmup Iteration  17: 4850097.335 ops/s
# Warmup Iteration  18: 4852973.985 ops/s
# Warmup Iteration  19: 4851689.193 ops/s
# Warmup Iteration  20: 4857339.930 ops/s
# Warmup Iteration  21: 4860190.489 ops/s
# Warmup Iteration  22: 4811866.526 ops/s
# Warmup Iteration  23: 4846301.017 ops/s
# Warmup Iteration  24: 4856095.672 ops/s
# Warmup Iteration  25: 4823101.577 ops/s
# Warmup Iteration  26: 4854339.405 ops/s
# Warmup Iteration  27: 4846467.801 ops/s
# Warmup Iteration  28: 4851070.242 ops/s
# Warmup Iteration  29: 4849089.874 ops/s
# Warmup Iteration  30: 4855474.345 ops/s
Iteration   1: 4791332.455 ops/s
Iteration   2: 4859902.701 ops/s
Iteration   3: 4847355.607 ops/s
Iteration   4: 4850642.171 ops/s
Iteration   5: 4832980.500 ops/s
Iteration   6: 4863304.222 ops/s
Iteration   7: 4858777.004 ops/s
Iteration   8: 4855131.060 ops/s
Iteration   9: 4804654.812 ops/s
Iteration  10: 4773677.157 ops/s
Iteration  11: 4849961.884 ops/s
Iteration  12: 4847993.851 ops/s
Iteration  13: 4842871.042 ops/s
Iteration  14: 4863737.113 ops/s
Iteration  15: 4845051.187 ops/s
Iteration  16: 4858332.592 ops/s
Iteration  17: 4863816.164 ops/s
Iteration  18: 4834905.391 ops/s
Iteration  19: 4858700.041 ops/s
Iteration  20: 4862028.267 ops/s
Iteration  21: 4867010.130 ops/s
Iteration  22: 4846841.971 ops/s
Iteration  23: 4856142.889 ops/s
Iteration  24: 4850713.090 ops/s
Iteration  25: 4846554.857 ops/s
Iteration  26: 4750489.680 ops/s
Iteration  27: 4841199.135 ops/s
Iteration  28: 4852444.396 ops/s
Iteration  29: 4778614.312 ops/s
Iteration  30: 4868011.024 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_allSatisfyWith":
  4840772.557 ±(99.9%) 20072.713 ops/s [Average]
  (min, avg, max) = (4750489.680, 4840772.557, 4868011.024), stdev = 30043.893
  CI (99.9%): [4820699.844, 4860845.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  4840772.557 ± 20072.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2570528.956 ops/s
# Warmup Iteration   2: 5663988.521 ops/s
# Warmup Iteration   3: 5687667.157 ops/s
# Warmup Iteration   4: 4702516.402 ops/s
# Warmup Iteration   5: 5660236.845 ops/s
# Warmup Iteration   6: 5690935.883 ops/s
# Warmup Iteration   7: 5669058.363 ops/s
# Warmup Iteration   8: 5665989.333 ops/s
# Warmup Iteration   9: 5673528.677 ops/s
# Warmup Iteration  10: 5629136.873 ops/s
# Warmup Iteration  11: 5678029.339 ops/s
# Warmup Iteration  12: 5642568.207 ops/s
# Warmup Iteration  13: 5672966.861 ops/s
# Warmup Iteration  14: 5687005.219 ops/s
# Warmup Iteration  15: 5655329.335 ops/s
# Warmup Iteration  16: 5691142.020 ops/s
# Warmup Iteration  17: 5625316.525 ops/s
# Warmup Iteration  18: 5643825.177 ops/s
# Warmup Iteration  19: 5690270.961 ops/s
# Warmup Iteration  20: 5657268.584 ops/s
# Warmup Iteration  21: 5605176.861 ops/s
# Warmup Iteration  22: 5682519.143 ops/s
# Warmup Iteration  23: 5675176.521 ops/s
# Warmup Iteration  24: 5634489.648 ops/s
# Warmup Iteration  25: 5661789.629 ops/s
# Warmup Iteration  26: 5678064.207 ops/s
# Warmup Iteration  27: 5595537.469 ops/s
# Warmup Iteration  28: 5659879.408 ops/s
# Warmup Iteration  29: 5680298.953 ops/s
# Warmup Iteration  30: 5670220.961 ops/s
Iteration   1: 5683476.304 ops/s
Iteration   2: 5670653.532 ops/s
Iteration   3: 5668913.099 ops/s
Iteration   4: 5677360.147 ops/s
Iteration   5: 5683209.024 ops/s
Iteration   6: 5689320.502 ops/s
Iteration   7: 5684132.599 ops/s
Iteration   8: 5689378.494 ops/s
Iteration   9: 5684944.806 ops/s
Iteration  10: 5689042.082 ops/s
Iteration  11: 5688621.686 ops/s
Iteration  12: 5685544.054 ops/s
Iteration  13: 5694704.335 ops/s
Iteration  14: 5685429.493 ops/s
Iteration  15: 5690610.369 ops/s
Iteration  16: 5672088.755 ops/s
Iteration  17: 5670071.040 ops/s
Iteration  18: 5668409.018 ops/s
Iteration  19: 5574937.307 ops/s
Iteration  20: 5669975.535 ops/s
Iteration  21: 5679489.999 ops/s
Iteration  22: 5664138.532 ops/s
Iteration  23: 5678727.991 ops/s
Iteration  24: 5689429.292 ops/s
Iteration  25: 5662216.492 ops/s
Iteration  26: 5675074.074 ops/s
Iteration  27: 5673376.070 ops/s
Iteration  28: 5691139.866 ops/s
Iteration  29: 5684132.103 ops/s
Iteration  30: 5693192.001 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfy":
  5677057.953 ±(99.9%) 14263.520 ops/s [Average]
  (min, avg, max) = (5574937.307, 5677057.953, 5694704.335), stdev = 21348.967
  CI (99.9%): [5662794.433, 5691321.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_anySatisfy  thrpt   30  5677057.953 ± 14263.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2599026.316 ops/s
# Warmup Iteration   2: 4537293.450 ops/s
# Warmup Iteration   3: 4881533.880 ops/s
# Warmup Iteration   4: 4849397.305 ops/s
# Warmup Iteration   5: 4601776.323 ops/s
# Warmup Iteration   6: 4321196.506 ops/s
# Warmup Iteration   7: 4824817.256 ops/s
# Warmup Iteration   8: 4890955.895 ops/s
# Warmup Iteration   9: 4877860.353 ops/s
# Warmup Iteration  10: 4881148.428 ops/s
# Warmup Iteration  11: 4871506.018 ops/s
# Warmup Iteration  12: 4859035.385 ops/s
# Warmup Iteration  13: 4803194.262 ops/s
# Warmup Iteration  14: 4878308.214 ops/s
# Warmup Iteration  15: 4885261.229 ops/s
# Warmup Iteration  16: 4839819.389 ops/s
# Warmup Iteration  17: 4886493.754 ops/s
# Warmup Iteration  18: 4878272.250 ops/s
# Warmup Iteration  19: 4805699.012 ops/s
# Warmup Iteration  20: 4889055.925 ops/s
# Warmup Iteration  21: 4889202.840 ops/s
# Warmup Iteration  22: 4846844.912 ops/s
# Warmup Iteration  23: 4878203.371 ops/s
# Warmup Iteration  24: 4808147.122 ops/s
# Warmup Iteration  25: 4875923.733 ops/s
# Warmup Iteration  26: 4881297.070 ops/s
# Warmup Iteration  27: 4882186.878 ops/s
# Warmup Iteration  28: 4887205.845 ops/s
# Warmup Iteration  29: 4790424.866 ops/s
# Warmup Iteration  30: 4886816.410 ops/s
Iteration   1: 4880746.510 ops/s
Iteration   2: 4895178.053 ops/s
Iteration   3: 4875676.649 ops/s
Iteration   4: 4842235.558 ops/s
Iteration   5: 4881467.450 ops/s
Iteration   6: 4883250.231 ops/s
Iteration   7: 4889783.244 ops/s
Iteration   8: 4792488.071 ops/s
Iteration   9: 4881173.273 ops/s
Iteration  10: 4895672.623 ops/s
Iteration  11: 4803293.166 ops/s
Iteration  12: 4811494.340 ops/s
Iteration  13: 4892652.355 ops/s
Iteration  14: 4880046.550 ops/s
Iteration  15: 4888348.537 ops/s
Iteration  16: 4870884.099 ops/s
Iteration  17: 4880782.025 ops/s
Iteration  18: 4881800.415 ops/s
Iteration  19: 4853772.389 ops/s
Iteration  20: 4894873.656 ops/s
Iteration  21: 4873859.430 ops/s
Iteration  22: 4892874.773 ops/s
Iteration  23: 4884295.345 ops/s
Iteration  24: 4888954.799 ops/s
Iteration  25: 4892047.294 ops/s
Iteration  26: 4886838.952 ops/s
Iteration  27: 4890133.163 ops/s
Iteration  28: 4883174.676 ops/s
Iteration  29: 4883087.757 ops/s
Iteration  30: 4875558.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_anySatisfyWith":
  4874214.807 ±(99.9%) 18031.939 ops/s [Average]
  (min, avg, max) = (4792488.071, 4874214.807, 4895672.623), stdev = 26989.359
  CI (99.9%): [4856182.869, 4892246.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4874214.807 ± 18031.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1536019.715 ops/s
# Warmup Iteration   2: 3492658.486 ops/s
# Warmup Iteration   3: 2892024.968 ops/s
# Warmup Iteration   4: 3476803.240 ops/s
# Warmup Iteration   5: 3469787.706 ops/s
# Warmup Iteration   6: 3444559.534 ops/s
# Warmup Iteration   7: 3465559.739 ops/s
# Warmup Iteration   8: 3481768.149 ops/s
# Warmup Iteration   9: 3479180.336 ops/s
# Warmup Iteration  10: 3485235.208 ops/s
# Warmup Iteration  11: 3467140.178 ops/s
# Warmup Iteration  12: 3441882.982 ops/s
# Warmup Iteration  13: 3464708.855 ops/s
# Warmup Iteration  14: 3475898.804 ops/s
# Warmup Iteration  15: 3475570.204 ops/s
# Warmup Iteration  16: 3462352.529 ops/s
# Warmup Iteration  17: 3484133.775 ops/s
# Warmup Iteration  18: 3460947.305 ops/s
# Warmup Iteration  19: 3476607.673 ops/s
# Warmup Iteration  20: 3483914.364 ops/s
# Warmup Iteration  21: 3470064.306 ops/s
# Warmup Iteration  22: 3453376.456 ops/s
# Warmup Iteration  23: 3482183.158 ops/s
# Warmup Iteration  24: 3445717.423 ops/s
# Warmup Iteration  25: 3472731.410 ops/s
# Warmup Iteration  26: 3485285.668 ops/s
# Warmup Iteration  27: 3484969.553 ops/s
# Warmup Iteration  28: 3479306.296 ops/s
# Warmup Iteration  29: 3490401.608 ops/s
# Warmup Iteration  30: 3447409.941 ops/s
Iteration   1: 3480445.595 ops/s
Iteration   2: 3474509.258 ops/s
Iteration   3: 3451403.251 ops/s
Iteration   4: 3481308.849 ops/s
Iteration   5: 3469113.278 ops/s
Iteration   6: 3375961.825 ops/s
Iteration   7: 3430519.411 ops/s
Iteration   8: 3430383.529 ops/s
Iteration   9: 3440489.973 ops/s
Iteration  10: 3491011.090 ops/s
Iteration  11: 3380792.500 ops/s
Iteration  12: 3470022.800 ops/s
Iteration  13: 3445141.168 ops/s
Iteration  14: 3476379.987 ops/s
Iteration  15: 3495064.982 ops/s
Iteration  16: 3489408.076 ops/s
Iteration  17: 3491806.192 ops/s
Iteration  18: 3491120.749 ops/s
Iteration  19: 3469253.390 ops/s
Iteration  20: 3485510.178 ops/s
Iteration  21: 3483265.270 ops/s
Iteration  22: 3491022.880 ops/s
Iteration  23: 3485067.894 ops/s
Iteration  24: 3423475.449 ops/s
Iteration  25: 3430806.112 ops/s
Iteration  26: 3494541.226 ops/s
Iteration  27: 3478469.960 ops/s
Iteration  28: 3492808.530 ops/s
Iteration  29: 3426541.076 ops/s
Iteration  30: 3470530.477 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendString":
  3463205.832 ±(99.9%) 21814.348 ops/s [Average]
  (min, avg, max) = (3375961.825, 3463205.832, 3495064.982), stdev = 32650.691
  CI (99.9%): [3441391.484, 3485020.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_appendString  thrpt   30  3463205.832 ± 21814.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110016.254 ops/s
# Warmup Iteration   2: 118906.678 ops/s
# Warmup Iteration   3: 133822.525 ops/s
# Warmup Iteration   4: 149439.306 ops/s
# Warmup Iteration   5: 148129.495 ops/s
# Warmup Iteration   6: 148201.258 ops/s
# Warmup Iteration   7: 148270.968 ops/s
# Warmup Iteration   8: 149741.449 ops/s
# Warmup Iteration   9: 149617.353 ops/s
# Warmup Iteration  10: 148897.832 ops/s
# Warmup Iteration  11: 149780.042 ops/s
# Warmup Iteration  12: 149591.903 ops/s
# Warmup Iteration  13: 149935.084 ops/s
# Warmup Iteration  14: 141829.189 ops/s
# Warmup Iteration  15: 129840.536 ops/s
# Warmup Iteration  16: 149470.557 ops/s
# Warmup Iteration  17: 158249.932 ops/s
# Warmup Iteration  18: 156951.488 ops/s
# Warmup Iteration  19: 156804.881 ops/s
# Warmup Iteration  20: 158075.498 ops/s
# Warmup Iteration  21: 156404.844 ops/s
# Warmup Iteration  22: 157291.576 ops/s
# Warmup Iteration  23: 158099.090 ops/s
# Warmup Iteration  24: 155858.831 ops/s
# Warmup Iteration  25: 157417.096 ops/s
# Warmup Iteration  26: 156846.869 ops/s
# Warmup Iteration  27: 158332.017 ops/s
# Warmup Iteration  28: 155715.074 ops/s
# Warmup Iteration  29: 157091.478 ops/s
# Warmup Iteration  30: 156109.460 ops/s
Iteration   1: 155406.983 ops/s
Iteration   2: 157838.244 ops/s
Iteration   3: 158229.878 ops/s
Iteration   4: 158254.202 ops/s
Iteration   5: 157909.120 ops/s
Iteration   6: 158272.530 ops/s
Iteration   7: 158566.310 ops/s
Iteration   8: 157646.690 ops/s
Iteration   9: 158382.701 ops/s
Iteration  10: 155622.422 ops/s
Iteration  11: 157667.729 ops/s
Iteration  12: 157928.796 ops/s
Iteration  13: 156787.520 ops/s
Iteration  14: 156432.171 ops/s
Iteration  15: 158217.758 ops/s
Iteration  16: 158298.018 ops/s
Iteration  17: 157293.582 ops/s
Iteration  18: 157782.633 ops/s
Iteration  19: 157578.089 ops/s
Iteration  20: 158251.120 ops/s
Iteration  21: 158164.154 ops/s
Iteration  22: 158490.365 ops/s
Iteration  23: 158298.779 ops/s
Iteration  24: 158478.740 ops/s
Iteration  25: 158621.546 ops/s
Iteration  26: 158245.231 ops/s
Iteration  27: 158536.973 ops/s
Iteration  28: 157665.282 ops/s
Iteration  29: 158634.525 ops/s
Iteration  30: 158489.852 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringThrows":
  157866.398 ±(99.9%) 550.686 ops/s [Average]
  (min, avg, max) = (155406.983, 157866.398, 158634.525), stdev = 824.241
  CI (99.9%): [157315.712, 158417.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_appendStringThrows  thrpt   30  157866.398 ± 550.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2926074.280 ops/s
# Warmup Iteration   2: 6296805.631 ops/s
# Warmup Iteration   3: 6188608.993 ops/s
# Warmup Iteration   4: 5237274.367 ops/s
# Warmup Iteration   5: 6210190.029 ops/s
# Warmup Iteration   6: 6119371.000 ops/s
# Warmup Iteration   7: 6216709.636 ops/s
# Warmup Iteration   8: 6162168.276 ops/s
# Warmup Iteration   9: 6201502.020 ops/s
# Warmup Iteration  10: 6176519.907 ops/s
# Warmup Iteration  11: 6205202.703 ops/s
# Warmup Iteration  12: 6221586.538 ops/s
# Warmup Iteration  13: 6218416.186 ops/s
# Warmup Iteration  14: 6196011.143 ops/s
# Warmup Iteration  15: 6163489.741 ops/s
# Warmup Iteration  16: 6053256.323 ops/s
# Warmup Iteration  17: 6152177.785 ops/s
# Warmup Iteration  18: 6199886.111 ops/s
# Warmup Iteration  19: 6147904.890 ops/s
# Warmup Iteration  20: 6209956.160 ops/s
# Warmup Iteration  21: 6197603.836 ops/s
# Warmup Iteration  22: 6199482.591 ops/s
# Warmup Iteration  23: 6216372.011 ops/s
# Warmup Iteration  24: 6200405.174 ops/s
# Warmup Iteration  25: 6216129.971 ops/s
# Warmup Iteration  26: 6119372.036 ops/s
# Warmup Iteration  27: 6205044.364 ops/s
# Warmup Iteration  28: 6196198.463 ops/s
# Warmup Iteration  29: 6204651.700 ops/s
# Warmup Iteration  30: 6158269.291 ops/s
Iteration   1: 6180700.731 ops/s
Iteration   2: 6206567.378 ops/s
Iteration   3: 6205246.833 ops/s
Iteration   4: 6204509.979 ops/s
Iteration   5: 6215086.022 ops/s
Iteration   6: 6204799.161 ops/s
Iteration   7: 6198826.627 ops/s
Iteration   8: 6200906.350 ops/s
Iteration   9: 6216120.400 ops/s
Iteration  10: 6217839.380 ops/s
Iteration  11: 6184519.011 ops/s
Iteration  12: 6174948.381 ops/s
Iteration  13: 6196005.978 ops/s
Iteration  14: 6103330.572 ops/s
Iteration  15: 6203377.768 ops/s
Iteration  16: 6202015.564 ops/s
Iteration  17: 6104223.291 ops/s
Iteration  18: 6210731.923 ops/s
Iteration  19: 6191674.478 ops/s
Iteration  20: 6199274.010 ops/s
Iteration  21: 6208895.135 ops/s
Iteration  22: 6213653.272 ops/s
Iteration  23: 6228140.921 ops/s
Iteration  24: 6208288.635 ops/s
Iteration  25: 6204057.447 ops/s
Iteration  26: 6184673.089 ops/s
Iteration  27: 6211369.797 ops/s
Iteration  28: 6185486.008 ops/s
Iteration  29: 6220991.788 ops/s
Iteration  30: 6204754.502 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparator":
  6196367.148 ±(99.9%) 18684.527 ops/s [Average]
  (min, avg, max) = (6103330.572, 6196367.148, 6228140.921), stdev = 27966.123
  CI (99.9%): [6177682.621, 6215051.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  6196367.148 ± 18684.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3494931.726 ops/s
# Warmup Iteration   2: 7587913.869 ops/s
# Warmup Iteration   3: 6713292.899 ops/s
# Warmup Iteration   4: 7250208.868 ops/s
# Warmup Iteration   5: 7491550.883 ops/s
# Warmup Iteration   6: 7438097.432 ops/s
# Warmup Iteration   7: 7513634.667 ops/s
# Warmup Iteration   8: 7396711.659 ops/s
# Warmup Iteration   9: 7513894.056 ops/s
# Warmup Iteration  10: 7496346.764 ops/s
# Warmup Iteration  11: 7452489.260 ops/s
# Warmup Iteration  12: 7518617.694 ops/s
# Warmup Iteration  13: 7513051.903 ops/s
# Warmup Iteration  14: 7516680.924 ops/s
# Warmup Iteration  15: 7500068.680 ops/s
# Warmup Iteration  16: 7514790.047 ops/s
# Warmup Iteration  17: 7477466.752 ops/s
# Warmup Iteration  18: 7493505.316 ops/s
# Warmup Iteration  19: 7462350.618 ops/s
# Warmup Iteration  20: 7400713.126 ops/s
# Warmup Iteration  21: 7469223.447 ops/s
# Warmup Iteration  22: 7531779.248 ops/s
# Warmup Iteration  23: 7513938.315 ops/s
# Warmup Iteration  24: 7502690.417 ops/s
# Warmup Iteration  25: 7523044.405 ops/s
# Warmup Iteration  26: 7461000.686 ops/s
# Warmup Iteration  27: 7483509.319 ops/s
# Warmup Iteration  28: 7469468.050 ops/s
# Warmup Iteration  29: 7498140.054 ops/s
# Warmup Iteration  30: 7483808.420 ops/s
Iteration   1: 7505438.403 ops/s
Iteration   2: 7579205.985 ops/s
Iteration   3: 7535923.762 ops/s
Iteration   4: 7540653.169 ops/s
Iteration   5: 7527757.621 ops/s
Iteration   6: 7541540.668 ops/s
Iteration   7: 7487276.953 ops/s
Iteration   8: 7504384.515 ops/s
Iteration   9: 7521097.395 ops/s
Iteration  10: 7405927.499 ops/s
Iteration  11: 7522066.425 ops/s
Iteration  12: 7493529.698 ops/s
Iteration  13: 7527790.066 ops/s
Iteration  14: 7532213.008 ops/s
Iteration  15: 7299559.403 ops/s
Iteration  16: 7500973.199 ops/s
Iteration  17: 7543506.546 ops/s
Iteration  18: 7559744.108 ops/s
Iteration  19: 7522373.435 ops/s
Iteration  20: 7502925.739 ops/s
Iteration  21: 7491502.068 ops/s
Iteration  22: 7409641.484 ops/s
Iteration  23: 7548446.760 ops/s
Iteration  24: 7404025.295 ops/s
Iteration  25: 7548078.960 ops/s
Iteration  26: 7402073.480 ops/s
Iteration  27: 7478956.123 ops/s
Iteration  28: 7511467.169 ops/s
Iteration  29: 7394281.836 ops/s
Iteration  30: 7527705.054 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  7495668.861 ±(99.9%) 41771.113 ops/s [Average]
  (min, avg, max) = (7299559.403, 7495668.861, 7579205.985), stdev = 62521.040
  CI (99.9%): [7453897.748, 7537439.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  7495668.861 ± 41771.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7349723.798 ops/s
# Warmup Iteration   2: 12497767.584 ops/s
# Warmup Iteration   3: 13420894.061 ops/s
# Warmup Iteration   4: 13453576.212 ops/s
# Warmup Iteration   5: 13336018.907 ops/s
# Warmup Iteration   6: 11325351.755 ops/s
# Warmup Iteration   7: 13327528.823 ops/s
# Warmup Iteration   8: 13446785.171 ops/s
# Warmup Iteration   9: 13477381.480 ops/s
# Warmup Iteration  10: 13415476.969 ops/s
# Warmup Iteration  11: 13488370.227 ops/s
# Warmup Iteration  12: 13473609.478 ops/s
# Warmup Iteration  13: 13335663.990 ops/s
# Warmup Iteration  14: 13493476.401 ops/s
# Warmup Iteration  15: 13481613.357 ops/s
# Warmup Iteration  16: 13470932.178 ops/s
# Warmup Iteration  17: 13358187.806 ops/s
# Warmup Iteration  18: 13388228.390 ops/s
# Warmup Iteration  19: 13493503.072 ops/s
# Warmup Iteration  20: 13374881.495 ops/s
# Warmup Iteration  21: 13477261.164 ops/s
# Warmup Iteration  22: 13459442.941 ops/s
# Warmup Iteration  23: 13517359.606 ops/s
# Warmup Iteration  24: 13389825.159 ops/s
# Warmup Iteration  25: 13471015.188 ops/s
# Warmup Iteration  26: 13492590.323 ops/s
# Warmup Iteration  27: 13502580.461 ops/s
# Warmup Iteration  28: 13470795.540 ops/s
# Warmup Iteration  29: 13495102.135 ops/s
# Warmup Iteration  30: 13478357.099 ops/s
Iteration   1: 13462011.220 ops/s
Iteration   2: 13511089.551 ops/s
Iteration   3: 13435617.152 ops/s
Iteration   4: 13525180.204 ops/s
Iteration   5: 13177611.011 ops/s
Iteration   6: 13487351.344 ops/s
Iteration   7: 13447900.621 ops/s
Iteration   8: 13450963.630 ops/s
Iteration   9: 13323132.365 ops/s
Iteration  10: 13430276.498 ops/s
Iteration  11: 13473501.708 ops/s
Iteration  12: 13455940.370 ops/s
Iteration  13: 13270666.290 ops/s
Iteration  14: 13488340.637 ops/s
Iteration  15: 13457391.029 ops/s
Iteration  16: 13464009.769 ops/s
Iteration  17: 13498246.038 ops/s
Iteration  18: 13501159.752 ops/s
Iteration  19: 13189304.549 ops/s
Iteration  20: 13456186.642 ops/s
Iteration  21: 13421245.997 ops/s
Iteration  22: 13507707.269 ops/s
Iteration  23: 13514524.618 ops/s
Iteration  24: 13464104.157 ops/s
Iteration  25: 13482438.367 ops/s
Iteration  26: 13421922.634 ops/s
Iteration  27: 13271611.349 ops/s
Iteration  28: 13411782.913 ops/s
Iteration  29: 13492746.341 ops/s
Iteration  30: 13429776.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asLazy":
  13430791.354 ±(99.9%) 61288.866 ops/s [Average]
  (min, avg, max) = (13177611.011, 13430791.354, 13525180.204), stdev = 91734.296
  CI (99.9%): [13369502.488, 13492080.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_asLazy  thrpt   30  13430791.354 ± 61288.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2324461.501 ops/s
# Warmup Iteration   2: 5283115.743 ops/s
# Warmup Iteration   3: 4792491.675 ops/s
# Warmup Iteration   4: 5062052.688 ops/s
# Warmup Iteration   5: 5361486.000 ops/s
# Warmup Iteration   6: 5330326.934 ops/s
# Warmup Iteration   7: 5319939.190 ops/s
# Warmup Iteration   8: 5364021.309 ops/s
# Warmup Iteration   9: 5376036.061 ops/s
# Warmup Iteration  10: 5359933.750 ops/s
# Warmup Iteration  11: 5314307.087 ops/s
# Warmup Iteration  12: 5371963.876 ops/s
# Warmup Iteration  13: 5382987.216 ops/s
# Warmup Iteration  14: 5362845.120 ops/s
# Warmup Iteration  15: 5362788.621 ops/s
# Warmup Iteration  16: 5373085.155 ops/s
# Warmup Iteration  17: 5321472.933 ops/s
# Warmup Iteration  18: 5379098.555 ops/s
# Warmup Iteration  19: 5362507.114 ops/s
# Warmup Iteration  20: 5369556.323 ops/s
# Warmup Iteration  21: 5381730.775 ops/s
# Warmup Iteration  22: 5374231.230 ops/s
# Warmup Iteration  23: 5376999.678 ops/s
# Warmup Iteration  24: 5379980.702 ops/s
# Warmup Iteration  25: 5368590.397 ops/s
# Warmup Iteration  26: 5370439.928 ops/s
# Warmup Iteration  27: 5373554.070 ops/s
# Warmup Iteration  28: 5374476.827 ops/s
# Warmup Iteration  29: 5369702.666 ops/s
# Warmup Iteration  30: 5368873.025 ops/s
Iteration   1: 5343390.222 ops/s
Iteration   2: 5389397.871 ops/s
Iteration   3: 5358996.336 ops/s
Iteration   4: 5388054.898 ops/s
Iteration   5: 5364157.997 ops/s
Iteration   6: 5367706.063 ops/s
Iteration   7: 5346590.089 ops/s
Iteration   8: 5364721.927 ops/s
Iteration   9: 5358168.151 ops/s
Iteration  10: 5373695.699 ops/s
Iteration  11: 5377039.246 ops/s
Iteration  12: 5341596.753 ops/s
Iteration  13: 5375676.777 ops/s
Iteration  14: 5372711.576 ops/s
Iteration  15: 5381974.042 ops/s
Iteration  16: 5377006.493 ops/s
Iteration  17: 5358616.213 ops/s
Iteration  18: 5363732.001 ops/s
Iteration  19: 5379197.175 ops/s
Iteration  20: 5385699.337 ops/s
Iteration  21: 5349009.414 ops/s
Iteration  22: 5376750.628 ops/s
Iteration  23: 5385259.176 ops/s
Iteration  24: 5359872.300 ops/s
Iteration  25: 5370451.686 ops/s
Iteration  26: 5384030.927 ops/s
Iteration  27: 5370268.261 ops/s
Iteration  28: 5391845.656 ops/s
Iteration  29: 5261099.424 ops/s
Iteration  30: 5372985.777 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asReversed":
  5366323.404 ±(99.9%) 16103.348 ops/s [Average]
  (min, avg, max) = (5261099.424, 5366323.404, 5391845.656), stdev = 24102.735
  CI (99.9%): [5350220.056, 5382426.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_asReversed  thrpt   30  5366323.404 ± 16103.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6658920.422 ops/s
# Warmup Iteration   2: 12335783.898 ops/s
# Warmup Iteration   3: 12907789.963 ops/s
# Warmup Iteration   4: 13030266.539 ops/s
# Warmup Iteration   5: 10903547.828 ops/s
# Warmup Iteration   6: 13071481.116 ops/s
# Warmup Iteration   7: 13096903.313 ops/s
# Warmup Iteration   8: 13047061.814 ops/s
# Warmup Iteration   9: 13031674.859 ops/s
# Warmup Iteration  10: 13072370.867 ops/s
# Warmup Iteration  11: 13054836.462 ops/s
# Warmup Iteration  12: 13099618.166 ops/s
# Warmup Iteration  13: 12994511.718 ops/s
# Warmup Iteration  14: 13106785.740 ops/s
# Warmup Iteration  15: 12967795.294 ops/s
# Warmup Iteration  16: 12977704.620 ops/s
# Warmup Iteration  17: 13110930.037 ops/s
# Warmup Iteration  18: 13095775.254 ops/s
# Warmup Iteration  19: 13033316.399 ops/s
# Warmup Iteration  20: 13076626.203 ops/s
# Warmup Iteration  21: 13063172.542 ops/s
# Warmup Iteration  22: 13043690.327 ops/s
# Warmup Iteration  23: 13092866.415 ops/s
# Warmup Iteration  24: 13054677.787 ops/s
# Warmup Iteration  25: 13005017.261 ops/s
# Warmup Iteration  26: 12887853.926 ops/s
# Warmup Iteration  27: 13062243.511 ops/s
# Warmup Iteration  28: 13066007.611 ops/s
# Warmup Iteration  29: 13082472.524 ops/s
# Warmup Iteration  30: 13105538.518 ops/s
Iteration   1: 13097780.799 ops/s
Iteration   2: 13070550.618 ops/s
Iteration   3: 13027946.005 ops/s
Iteration   4: 12970960.934 ops/s
Iteration   5: 13120784.645 ops/s
Iteration   6: 13064019.915 ops/s
Iteration   7: 13084687.097 ops/s
Iteration   8: 13044631.711 ops/s
Iteration   9: 13090360.778 ops/s
Iteration  10: 13108846.311 ops/s
Iteration  11: 13073035.312 ops/s
Iteration  12: 13090818.603 ops/s
Iteration  13: 13103316.705 ops/s
Iteration  14: 13092245.964 ops/s
Iteration  15: 13113873.353 ops/s
Iteration  16: 13101508.594 ops/s
Iteration  17: 13067174.131 ops/s
Iteration  18: 13110318.533 ops/s
Iteration  19: 12828888.645 ops/s
Iteration  20: 13104286.652 ops/s
Iteration  21: 13105852.068 ops/s
Iteration  22: 13087437.525 ops/s
Iteration  23: 12896043.504 ops/s
Iteration  24: 12913968.809 ops/s
Iteration  25: 13086848.533 ops/s
Iteration  26: 13095738.307 ops/s
Iteration  27: 13077519.643 ops/s
Iteration  28: 13056987.583 ops/s
Iteration  29: 12867599.471 ops/s
Iteration  30: 13098771.693 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asSynchronized":
  13055093.415 ±(99.9%) 52070.830 ops/s [Average]
  (min, avg, max) = (12828888.645, 13055093.415, 13120784.645), stdev = 77937.173
  CI (99.9%): [13003022.584, 13107164.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_asSynchronized  thrpt   30  13055093.415 ± 52070.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5938377.183 ops/s
# Warmup Iteration   2: 8063426.449 ops/s
# Warmup Iteration   3: 9599205.618 ops/s
# Warmup Iteration   4: 9612999.167 ops/s
# Warmup Iteration   5: 9668775.626 ops/s
# Warmup Iteration   6: 9662216.168 ops/s
# Warmup Iteration   7: 9467272.434 ops/s
# Warmup Iteration   8: 8022048.364 ops/s
# Warmup Iteration   9: 9670892.260 ops/s
# Warmup Iteration  10: 9654780.915 ops/s
# Warmup Iteration  11: 9603902.025 ops/s
# Warmup Iteration  12: 9597805.758 ops/s
# Warmup Iteration  13: 9644112.387 ops/s
# Warmup Iteration  14: 9662251.987 ops/s
# Warmup Iteration  15: 9661225.258 ops/s
# Warmup Iteration  16: 9641865.473 ops/s
# Warmup Iteration  17: 9687108.445 ops/s
# Warmup Iteration  18: 9658851.943 ops/s
# Warmup Iteration  19: 9671535.265 ops/s
# Warmup Iteration  20: 9675142.674 ops/s
# Warmup Iteration  21: 9599819.480 ops/s
# Warmup Iteration  22: 9691201.887 ops/s
# Warmup Iteration  23: 9548251.913 ops/s
# Warmup Iteration  24: 9679435.877 ops/s
# Warmup Iteration  25: 9681435.266 ops/s
# Warmup Iteration  26: 9687308.785 ops/s
# Warmup Iteration  27: 9691748.854 ops/s
# Warmup Iteration  28: 9677103.837 ops/s
# Warmup Iteration  29: 9677599.473 ops/s
# Warmup Iteration  30: 9665712.929 ops/s
Iteration   1: 9549383.477 ops/s
Iteration   2: 9595946.258 ops/s
Iteration   3: 9692099.752 ops/s
Iteration   4: 9658118.558 ops/s
Iteration   5: 9531953.911 ops/s
Iteration   6: 9675413.625 ops/s
Iteration   7: 9642040.156 ops/s
Iteration   8: 9654740.344 ops/s
Iteration   9: 9642557.023 ops/s
Iteration  10: 9654329.742 ops/s
Iteration  11: 9660045.335 ops/s
Iteration  12: 9670489.582 ops/s
Iteration  13: 9668071.403 ops/s
Iteration  14: 9696391.923 ops/s
Iteration  15: 9657045.280 ops/s
Iteration  16: 9649212.157 ops/s
Iteration  17: 9549745.386 ops/s
Iteration  18: 9686278.922 ops/s
Iteration  19: 9656305.584 ops/s
Iteration  20: 9653101.444 ops/s
Iteration  21: 9686389.452 ops/s
Iteration  22: 9690160.154 ops/s
Iteration  23: 9677760.517 ops/s
Iteration  24: 9682773.314 ops/s
Iteration  25: 9501619.244 ops/s
Iteration  26: 9671490.619 ops/s
Iteration  27: 9642979.652 ops/s
Iteration  28: 9372626.651 ops/s
Iteration  29: 9650847.406 ops/s
Iteration  30: 9695249.304 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_asUnmodifiable":
  9637172.206 ±(99.9%) 47315.669 ops/s [Average]
  (min, avg, max) = (9372626.651, 9637172.206, 9696391.923), stdev = 70819.871
  CI (99.9%): [9589856.537, 9684487.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  9637172.206 ± 47315.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2222205.997 ops/s
# Warmup Iteration   2: 2631827.036 ops/s
# Warmup Iteration   3: 3316915.131 ops/s
# Warmup Iteration   4: 3325727.018 ops/s
# Warmup Iteration   5: 3303757.995 ops/s
# Warmup Iteration   6: 3322600.393 ops/s
# Warmup Iteration   7: 3296851.059 ops/s
# Warmup Iteration   8: 3329494.362 ops/s
# Warmup Iteration   9: 3080748.564 ops/s
# Warmup Iteration  10: 3034207.679 ops/s
# Warmup Iteration  11: 3331546.896 ops/s
# Warmup Iteration  12: 3309207.558 ops/s
# Warmup Iteration  13: 3335855.021 ops/s
# Warmup Iteration  14: 3338974.347 ops/s
# Warmup Iteration  15: 3324052.190 ops/s
# Warmup Iteration  16: 3328476.440 ops/s
# Warmup Iteration  17: 3331684.106 ops/s
# Warmup Iteration  18: 3327228.003 ops/s
# Warmup Iteration  19: 3334504.273 ops/s
# Warmup Iteration  20: 3292975.761 ops/s
# Warmup Iteration  21: 3277286.140 ops/s
# Warmup Iteration  22: 3333601.864 ops/s
# Warmup Iteration  23: 3324862.020 ops/s
# Warmup Iteration  24: 3302916.443 ops/s
# Warmup Iteration  25: 3341291.759 ops/s
# Warmup Iteration  26: 3324807.404 ops/s
# Warmup Iteration  27: 3328053.977 ops/s
# Warmup Iteration  28: 3334585.669 ops/s
# Warmup Iteration  29: 3304749.579 ops/s
# Warmup Iteration  30: 3330491.757 ops/s
Iteration   1: 3315563.015 ops/s
Iteration   2: 3317982.389 ops/s
Iteration   3: 3325399.190 ops/s
Iteration   4: 3343149.751 ops/s
Iteration   5: 3341731.609 ops/s
Iteration   6: 3328754.900 ops/s
Iteration   7: 3341987.024 ops/s
Iteration   8: 3337220.242 ops/s
Iteration   9: 3344542.223 ops/s
Iteration  10: 3318569.944 ops/s
Iteration  11: 3345480.479 ops/s
Iteration  12: 3339779.463 ops/s
Iteration  13: 3338640.484 ops/s
Iteration  14: 3339111.439 ops/s
Iteration  15: 3275451.783 ops/s
Iteration  16: 3334447.132 ops/s
Iteration  17: 3314338.089 ops/s
Iteration  18: 3330010.677 ops/s
Iteration  19: 3333017.926 ops/s
Iteration  20: 3316245.289 ops/s
Iteration  21: 3303170.419 ops/s
Iteration  22: 3313976.351 ops/s
Iteration  23: 3307876.595 ops/s
Iteration  24: 3333660.335 ops/s
Iteration  25: 3305463.726 ops/s
Iteration  26: 3341662.479 ops/s
Iteration  27: 3333087.763 ops/s
Iteration  28: 3333409.627 ops/s
Iteration  29: 3322944.225 ops/s
Iteration  30: 3330239.308 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearch":
  3326897.129 ±(99.9%) 10494.744 ops/s [Average]
  (min, avg, max) = (3275451.783, 3326897.129, 3345480.479), stdev = 15708.040
  CI (99.9%): [3316402.386, 3337391.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_binarySearch  thrpt   30  3326897.129 ± 10494.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2241051.853 ops/s
# Warmup Iteration   2: 2665060.298 ops/s
# Warmup Iteration   3: 3362935.604 ops/s
# Warmup Iteration   4: 3353541.001 ops/s
# Warmup Iteration   5: 3382114.655 ops/s
# Warmup Iteration   6: 3382403.628 ops/s
# Warmup Iteration   7: 3378975.017 ops/s
# Warmup Iteration   8: 3361674.703 ops/s
# Warmup Iteration   9: 3008560.550 ops/s
# Warmup Iteration  10: 3218755.620 ops/s
# Warmup Iteration  11: 3385947.124 ops/s
# Warmup Iteration  12: 3373537.414 ops/s
# Warmup Iteration  13: 3390317.617 ops/s
# Warmup Iteration  14: 3383966.329 ops/s
# Warmup Iteration  15: 3390914.461 ops/s
# Warmup Iteration  16: 3358650.448 ops/s
# Warmup Iteration  17: 3395925.620 ops/s
# Warmup Iteration  18: 3357096.544 ops/s
# Warmup Iteration  19: 3389186.562 ops/s
# Warmup Iteration  20: 3354062.386 ops/s
# Warmup Iteration  21: 3385245.152 ops/s
# Warmup Iteration  22: 3354430.793 ops/s
# Warmup Iteration  23: 3388567.341 ops/s
# Warmup Iteration  24: 3350453.548 ops/s
# Warmup Iteration  25: 3386381.660 ops/s
# Warmup Iteration  26: 3387362.641 ops/s
# Warmup Iteration  27: 3389444.520 ops/s
# Warmup Iteration  28: 3389884.467 ops/s
# Warmup Iteration  29: 3394973.558 ops/s
# Warmup Iteration  30: 3327360.989 ops/s
Iteration   1: 3337996.351 ops/s
Iteration   2: 3365014.892 ops/s
Iteration   3: 3380474.609 ops/s
Iteration   4: 3387430.842 ops/s
Iteration   5: 3375481.311 ops/s
Iteration   6: 3334899.859 ops/s
Iteration   7: 3305494.725 ops/s
Iteration   8: 3370528.276 ops/s
Iteration   9: 3387485.023 ops/s
Iteration  10: 3393266.077 ops/s
Iteration  11: 3381012.578 ops/s
Iteration  12: 3391824.143 ops/s
Iteration  13: 3382886.376 ops/s
Iteration  14: 3386136.600 ops/s
Iteration  15: 3388136.460 ops/s
Iteration  16: 3382422.577 ops/s
Iteration  17: 3393713.918 ops/s
Iteration  18: 3328880.317 ops/s
Iteration  19: 3338129.521 ops/s
Iteration  20: 3379444.606 ops/s
Iteration  21: 3388353.114 ops/s
Iteration  22: 3340476.462 ops/s
Iteration  23: 3351909.288 ops/s
Iteration  24: 3372300.635 ops/s
Iteration  25: 3378719.096 ops/s
Iteration  26: 3387022.744 ops/s
Iteration  27: 3402044.677 ops/s
Iteration  28: 3378438.159 ops/s
Iteration  29: 3393399.362 ops/s
Iteration  30: 3362646.861 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_binarySearchWithComparator":
  3371532.315 ±(99.9%) 15758.943 ops/s [Average]
  (min, avg, max) = (3305494.725, 3371532.315, 3402044.677), stdev = 23587.245
  CI (99.9%): [3355773.373, 3387291.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  3371532.315 ± 15758.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 954108.442 ops/s
# Warmup Iteration   2: 1964996.903 ops/s
# Warmup Iteration   3: 1665716.719 ops/s
# Warmup Iteration   4: 1945558.221 ops/s
# Warmup Iteration   5: 1960062.822 ops/s
# Warmup Iteration   6: 1940410.413 ops/s
# Warmup Iteration   7: 1942860.300 ops/s
# Warmup Iteration   8: 1958015.460 ops/s
# Warmup Iteration   9: 1925127.429 ops/s
# Warmup Iteration  10: 1966066.902 ops/s
# Warmup Iteration  11: 1956447.526 ops/s
# Warmup Iteration  12: 1958433.149 ops/s
# Warmup Iteration  13: 1963698.147 ops/s
# Warmup Iteration  14: 1967180.920 ops/s
# Warmup Iteration  15: 1962579.719 ops/s
# Warmup Iteration  16: 1964694.867 ops/s
# Warmup Iteration  17: 1970489.979 ops/s
# Warmup Iteration  18: 1952744.188 ops/s
# Warmup Iteration  19: 1959412.314 ops/s
# Warmup Iteration  20: 1941660.848 ops/s
# Warmup Iteration  21: 1970261.362 ops/s
# Warmup Iteration  22: 1955102.191 ops/s
# Warmup Iteration  23: 1951273.124 ops/s
# Warmup Iteration  24: 1967797.516 ops/s
# Warmup Iteration  25: 1954314.932 ops/s
# Warmup Iteration  26: 1948655.368 ops/s
# Warmup Iteration  27: 1961610.799 ops/s
# Warmup Iteration  28: 1942354.435 ops/s
# Warmup Iteration  29: 1952879.602 ops/s
# Warmup Iteration  30: 1969856.546 ops/s
Iteration   1: 1962775.369 ops/s
Iteration   2: 1936419.990 ops/s
Iteration   3: 1965321.400 ops/s
Iteration   4: 1974328.606 ops/s
Iteration   5: 1970204.336 ops/s
Iteration   6: 1961731.180 ops/s
Iteration   7: 1971177.954 ops/s
Iteration   8: 1964072.301 ops/s
Iteration   9: 1971320.903 ops/s
Iteration  10: 1954042.047 ops/s
Iteration  11: 1926223.989 ops/s
Iteration  12: 1972461.713 ops/s
Iteration  13: 1977121.198 ops/s
Iteration  14: 1971094.042 ops/s
Iteration  15: 1938405.734 ops/s
Iteration  16: 1973463.859 ops/s
Iteration  17: 1967331.233 ops/s
Iteration  18: 1972666.123 ops/s
Iteration  19: 1967820.054 ops/s
Iteration  20: 1959130.296 ops/s
Iteration  21: 1972211.152 ops/s
Iteration  22: 1973197.641 ops/s
Iteration  23: 1969517.689 ops/s
Iteration  24: 1962838.576 ops/s
Iteration  25: 1883783.978 ops/s
Iteration  26: 1963678.947 ops/s
Iteration  27: 1957718.560 ops/s
Iteration  28: 1969606.256 ops/s
Iteration  29: 1966341.679 ops/s
Iteration  30: 1966959.099 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk":
  1961432.197 ±(99.9%) 12538.966 ops/s [Average]
  (min, avg, max) = (1883783.978, 1961432.197, 1977121.198), stdev = 18767.736
  CI (99.9%): [1948893.231, 1973971.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_chunk  thrpt   30  1961432.197 ± 12538.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6169608.782 ops/s
# Warmup Iteration   2: 12382976.446 ops/s
# Warmup Iteration   3: 12841343.331 ops/s
# Warmup Iteration   4: 12877365.103 ops/s
# Warmup Iteration   5: 10683282.340 ops/s
# Warmup Iteration   6: 12677592.795 ops/s
# Warmup Iteration   7: 12483522.682 ops/s
# Warmup Iteration   8: 12677371.221 ops/s
# Warmup Iteration   9: 12491643.750 ops/s
# Warmup Iteration  10: 12605592.074 ops/s
# Warmup Iteration  11: 12648104.647 ops/s
# Warmup Iteration  12: 12585394.952 ops/s
# Warmup Iteration  13: 12679910.185 ops/s
# Warmup Iteration  14: 12602733.380 ops/s
# Warmup Iteration  15: 12685319.902 ops/s
# Warmup Iteration  16: 12653752.913 ops/s
# Warmup Iteration  17: 12859520.169 ops/s
# Warmup Iteration  18: 12683739.215 ops/s
# Warmup Iteration  19: 12867578.736 ops/s
# Warmup Iteration  20: 12868866.830 ops/s
# Warmup Iteration  21: 12852338.060 ops/s
# Warmup Iteration  22: 12712745.317 ops/s
# Warmup Iteration  23: 12833289.121 ops/s
# Warmup Iteration  24: 12844578.376 ops/s
# Warmup Iteration  25: 12852373.906 ops/s
# Warmup Iteration  26: 12855783.062 ops/s
# Warmup Iteration  27: 12890717.240 ops/s
# Warmup Iteration  28: 12824392.066 ops/s
# Warmup Iteration  29: 12856956.063 ops/s
# Warmup Iteration  30: 12827782.432 ops/s
Iteration   1: 12672273.798 ops/s
Iteration   2: 12873577.172 ops/s
Iteration   3: 12857758.375 ops/s
Iteration   4: 12875558.461 ops/s
Iteration   5: 12874002.950 ops/s
Iteration   6: 12866492.206 ops/s
Iteration   7: 12846344.585 ops/s
Iteration   8: 12862404.906 ops/s
Iteration   9: 12885218.990 ops/s
Iteration  10: 12877528.400 ops/s
Iteration  11: 12849594.753 ops/s
Iteration  12: 12840459.663 ops/s
Iteration  13: 12896808.953 ops/s
Iteration  14: 12836287.263 ops/s
Iteration  15: 12825180.120 ops/s
Iteration  16: 12894378.392 ops/s
Iteration  17: 12882118.296 ops/s
Iteration  18: 12875609.443 ops/s
Iteration  19: 12665142.781 ops/s
Iteration  20: 12861275.194 ops/s
Iteration  21: 12749066.653 ops/s
Iteration  22: 12673825.072 ops/s
Iteration  23: 12673599.614 ops/s
Iteration  24: 12866840.212 ops/s
Iteration  25: 12858106.859 ops/s
Iteration  26: 12871555.335 ops/s
Iteration  27: 12884428.567 ops/s
Iteration  28: 12893589.034 ops/s
Iteration  29: 12870333.930 ops/s
Iteration  30: 12870536.192 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_empty":
  12837663.206 ±(99.9%) 47957.808 ops/s [Average]
  (min, avg, max) = (12665142.781, 12837663.206, 12896808.953), stdev = 71780.995
  CI (99.9%): [12789705.397, 12885621.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_chunk_empty  thrpt   30  12837663.206 ± 47957.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2370785.453 ops/s
# Warmup Iteration   2: 5108160.389 ops/s
# Warmup Iteration   3: 5306338.180 ops/s
# Warmup Iteration   4: 4457181.202 ops/s
# Warmup Iteration   5: 5276122.359 ops/s
# Warmup Iteration   6: 5268945.921 ops/s
# Warmup Iteration   7: 5319379.001 ops/s
# Warmup Iteration   8: 5331811.350 ops/s
# Warmup Iteration   9: 5313744.235 ops/s
# Warmup Iteration  10: 5270378.879 ops/s
# Warmup Iteration  11: 5323490.518 ops/s
# Warmup Iteration  12: 5328364.759 ops/s
# Warmup Iteration  13: 5329122.370 ops/s
# Warmup Iteration  14: 5322877.634 ops/s
# Warmup Iteration  15: 5333062.553 ops/s
# Warmup Iteration  16: 5308561.181 ops/s
# Warmup Iteration  17: 5334604.580 ops/s
# Warmup Iteration  18: 5318688.150 ops/s
# Warmup Iteration  19: 5324483.332 ops/s
# Warmup Iteration  20: 5337232.017 ops/s
# Warmup Iteration  21: 5319434.293 ops/s
# Warmup Iteration  22: 5323460.803 ops/s
# Warmup Iteration  23: 5336493.863 ops/s
# Warmup Iteration  24: 5268547.255 ops/s
# Warmup Iteration  25: 5300058.502 ops/s
# Warmup Iteration  26: 5326924.638 ops/s
# Warmup Iteration  27: 5309992.612 ops/s
# Warmup Iteration  28: 5279699.925 ops/s
# Warmup Iteration  29: 5329312.789 ops/s
# Warmup Iteration  30: 5291792.296 ops/s
Iteration   1: 5324396.706 ops/s
Iteration   2: 5337179.649 ops/s
Iteration   3: 5224977.562 ops/s
Iteration   4: 5349187.529 ops/s
Iteration   5: 5253676.817 ops/s
Iteration   6: 5302772.296 ops/s
Iteration   7: 5314827.764 ops/s
Iteration   8: 5286119.090 ops/s
Iteration   9: 5318616.644 ops/s
Iteration  10: 5315913.285 ops/s
Iteration  11: 5325871.446 ops/s
Iteration  12: 5332915.692 ops/s
Iteration  13: 5333583.609 ops/s
Iteration  14: 5337461.412 ops/s
Iteration  15: 5331822.490 ops/s
Iteration  16: 5251341.819 ops/s
Iteration  17: 5338454.476 ops/s
Iteration  18: 5231464.997 ops/s
Iteration  19: 5333031.645 ops/s
Iteration  20: 5335250.416 ops/s
Iteration  21: 5309079.176 ops/s
Iteration  22: 5341317.363 ops/s
Iteration  23: 5334931.912 ops/s
Iteration  24: 5333945.142 ops/s
Iteration  25: 5317598.778 ops/s
Iteration  26: 5342972.890 ops/s
Iteration  27: 5323741.573 ops/s
Iteration  28: 5251144.099 ops/s
Iteration  29: 5326826.862 ops/s
Iteration  30: 5329396.028 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_large_size":
  5312993.972 ±(99.9%) 23261.018 ops/s [Average]
  (min, avg, max) = (5224977.562, 5312993.972, 5349187.529), stdev = 34815.999
  CI (99.9%): [5289732.955, 5336254.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_chunk_large_size  thrpt   30  5312993.972 ± 23261.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6842274.005 ops/s
# Warmup Iteration   2: 14382696.188 ops/s
# Warmup Iteration   3: 12367439.058 ops/s
# Warmup Iteration   4: 14610177.380 ops/s
# Warmup Iteration   5: 14551716.312 ops/s
# Warmup Iteration   6: 14511873.706 ops/s
# Warmup Iteration   7: 14503419.252 ops/s
# Warmup Iteration   8: 14563882.459 ops/s
# Warmup Iteration   9: 14450521.755 ops/s
# Warmup Iteration  10: 14473595.611 ops/s
# Warmup Iteration  11: 14590675.739 ops/s
# Warmup Iteration  12: 14576713.543 ops/s
# Warmup Iteration  13: 14549506.929 ops/s
# Warmup Iteration  14: 14598794.470 ops/s
# Warmup Iteration  15: 14613803.237 ops/s
# Warmup Iteration  16: 14578653.124 ops/s
# Warmup Iteration  17: 14592123.443 ops/s
# Warmup Iteration  18: 14570410.377 ops/s
# Warmup Iteration  19: 14610816.899 ops/s
# Warmup Iteration  20: 14619649.052 ops/s
# Warmup Iteration  21: 14448094.852 ops/s
# Warmup Iteration  22: 14604606.015 ops/s
# Warmup Iteration  23: 14570999.997 ops/s
# Warmup Iteration  24: 14434562.522 ops/s
# Warmup Iteration  25: 14594042.700 ops/s
# Warmup Iteration  26: 14559123.069 ops/s
# Warmup Iteration  27: 14513679.367 ops/s
# Warmup Iteration  28: 14467362.391 ops/s
# Warmup Iteration  29: 14617404.837 ops/s
# Warmup Iteration  30: 14580776.381 ops/s
Iteration   1: 14598735.448 ops/s
Iteration   2: 14606606.613 ops/s
Iteration   3: 14621624.379 ops/s
Iteration   4: 14609221.195 ops/s
Iteration   5: 14513308.851 ops/s
Iteration   6: 14558699.652 ops/s
Iteration   7: 14424397.728 ops/s
Iteration   8: 14573262.633 ops/s
Iteration   9: 14587649.812 ops/s
Iteration  10: 14557962.083 ops/s
Iteration  11: 14439039.144 ops/s
Iteration  12: 14632460.223 ops/s
Iteration  13: 14360313.593 ops/s
Iteration  14: 14560786.185 ops/s
Iteration  15: 14559843.670 ops/s
Iteration  16: 14585383.259 ops/s
Iteration  17: 14393291.286 ops/s
Iteration  18: 14544841.694 ops/s
Iteration  19: 14604592.423 ops/s
Iteration  20: 14632028.340 ops/s
Iteration  21: 14614225.630 ops/s
Iteration  22: 14562523.902 ops/s
Iteration  23: 14599927.724 ops/s
Iteration  24: 14595772.081 ops/s
Iteration  25: 14379327.157 ops/s
Iteration  26: 14598115.269 ops/s
Iteration  27: 14505064.413 ops/s
Iteration  28: 14513845.570 ops/s
Iteration  29: 14551482.797 ops/s
Iteration  30: 14589424.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_single":
  14549125.247 ±(99.9%) 51072.451 ops/s [Average]
  (min, avg, max) = (14360313.593, 14549125.247, 14632460.223), stdev = 76442.846
  CI (99.9%): [14498052.795, 14600197.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_chunk_single  thrpt   30  14549125.247 ± 51072.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625053.438 ops/s
# Warmup Iteration   2: 737813.065 ops/s
# Warmup Iteration   3: 920072.916 ops/s
# Warmup Iteration   4: 921198.299 ops/s
# Warmup Iteration   5: 932142.224 ops/s
# Warmup Iteration   6: 930520.702 ops/s
# Warmup Iteration   7: 917985.545 ops/s
# Warmup Iteration   8: 928341.404 ops/s
# Warmup Iteration   9: 825662.442 ops/s
# Warmup Iteration  10: 871844.415 ops/s
# Warmup Iteration  11: 928307.483 ops/s
# Warmup Iteration  12: 930378.996 ops/s
# Warmup Iteration  13: 930825.619 ops/s
# Warmup Iteration  14: 928866.894 ops/s
# Warmup Iteration  15: 927353.813 ops/s
# Warmup Iteration  16: 926494.122 ops/s
# Warmup Iteration  17: 973673.214 ops/s
# Warmup Iteration  18: 980678.499 ops/s
# Warmup Iteration  19: 972000.476 ops/s
# Warmup Iteration  20: 958321.096 ops/s
# Warmup Iteration  21: 981407.769 ops/s
# Warmup Iteration  22: 980429.336 ops/s
# Warmup Iteration  23: 976485.476 ops/s
# Warmup Iteration  24: 982546.320 ops/s
# Warmup Iteration  25: 960675.651 ops/s
# Warmup Iteration  26: 981446.226 ops/s
# Warmup Iteration  27: 975792.594 ops/s
# Warmup Iteration  28: 980132.206 ops/s
# Warmup Iteration  29: 971130.586 ops/s
# Warmup Iteration  30: 980911.308 ops/s
Iteration   1: 970153.125 ops/s
Iteration   2: 983909.931 ops/s
Iteration   3: 964701.467 ops/s
Iteration   4: 982889.626 ops/s
Iteration   5: 983174.480 ops/s
Iteration   6: 984837.752 ops/s
Iteration   7: 982902.678 ops/s
Iteration   8: 977331.598 ops/s
Iteration   9: 982534.493 ops/s
Iteration  10: 978735.657 ops/s
Iteration  11: 983252.743 ops/s
Iteration  12: 984985.479 ops/s
Iteration  13: 980312.224 ops/s
Iteration  14: 981448.084 ops/s
Iteration  15: 979771.124 ops/s
Iteration  16: 980037.779 ops/s
Iteration  17: 985139.250 ops/s
Iteration  18: 981451.661 ops/s
Iteration  19: 976748.180 ops/s
Iteration  20: 982438.522 ops/s
Iteration  21: 986020.048 ops/s
Iteration  22: 978070.582 ops/s
Iteration  23: 981516.539 ops/s
Iteration  24: 983332.188 ops/s
Iteration  25: 978748.696 ops/s
Iteration  26: 980927.201 ops/s
Iteration  27: 983451.752 ops/s
Iteration  28: 977083.188 ops/s
Iteration  29: 978586.986 ops/s
Iteration  30: 979048.820 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_chunk_zero_throws":
  980451.395 ±(99.9%) 2955.310 ops/s [Average]
  (min, avg, max) = (964701.467, 980451.395, 986020.048), stdev = 4423.370
  CI (99.9%): [977496.085, 983406.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  980451.395 ± 2955.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5341503.268 ops/s
# Warmup Iteration   2: 10735711.660 ops/s
# Warmup Iteration   3: 9236834.933 ops/s
# Warmup Iteration   4: 10833421.756 ops/s
# Warmup Iteration   5: 10794747.304 ops/s
# Warmup Iteration   6: 10916278.944 ops/s
# Warmup Iteration   7: 10881675.373 ops/s
# Warmup Iteration   8: 10829536.349 ops/s
# Warmup Iteration   9: 10886662.722 ops/s
# Warmup Iteration  10: 10920166.770 ops/s
# Warmup Iteration  11: 10885527.132 ops/s
# Warmup Iteration  12: 10771917.150 ops/s
# Warmup Iteration  13: 10806185.345 ops/s
# Warmup Iteration  14: 10884394.514 ops/s
# Warmup Iteration  15: 10916241.714 ops/s
# Warmup Iteration  16: 10899275.345 ops/s
# Warmup Iteration  17: 10889788.792 ops/s
# Warmup Iteration  18: 10804738.853 ops/s
# Warmup Iteration  19: 10763861.901 ops/s
# Warmup Iteration  20: 10839228.315 ops/s
# Warmup Iteration  21: 10875800.089 ops/s
# Warmup Iteration  22: 10799827.196 ops/s
# Warmup Iteration  23: 10894292.465 ops/s
# Warmup Iteration  24: 10916480.912 ops/s
# Warmup Iteration  25: 10933145.900 ops/s
# Warmup Iteration  26: 10897119.978 ops/s
# Warmup Iteration  27: 10911890.356 ops/s
# Warmup Iteration  28: 10814265.054 ops/s
# Warmup Iteration  29: 10832652.733 ops/s
# Warmup Iteration  30: 10915516.475 ops/s
Iteration   1: 10847504.480 ops/s
Iteration   2: 10924810.203 ops/s
Iteration   3: 10888109.745 ops/s
Iteration   4: 10886590.136 ops/s
Iteration   5: 10837445.861 ops/s
Iteration   6: 10760598.051 ops/s
Iteration   7: 10884047.940 ops/s
Iteration   8: 10921246.200 ops/s
Iteration   9: 10873953.698 ops/s
Iteration  10: 10901791.366 ops/s
Iteration  11: 10836406.572 ops/s
Iteration  12: 10904638.339 ops/s
Iteration  13: 10772692.242 ops/s
Iteration  14: 10808437.806 ops/s
Iteration  15: 10880713.957 ops/s
Iteration  16: 10883226.056 ops/s
Iteration  17: 10897633.473 ops/s
Iteration  18: 10898684.414 ops/s
Iteration  19: 10901345.928 ops/s
Iteration  20: 10740729.995 ops/s
Iteration  21: 10931551.999 ops/s
Iteration  22: 10869396.031 ops/s
Iteration  23: 10922004.492 ops/s
Iteration  24: 10898186.553 ops/s
Iteration  25: 10816990.747 ops/s
Iteration  26: 10889664.399 ops/s
Iteration  27: 10916539.083 ops/s
Iteration  28: 10878703.850 ops/s
Iteration  29: 10925947.726 ops/s
Iteration  30: 10591547.346 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_clear":
  10863037.956 ±(99.9%) 47742.871 ops/s [Average]
  (min, avg, max) = (10591547.346, 10863037.956, 10931551.999), stdev = 71459.287
  CI (99.9%): [10815295.085, 10910780.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_clear  thrpt   30  10863037.956 ± 47742.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 831621.404 ops/s
# Warmup Iteration   2: 1929755.677 ops/s
# Warmup Iteration   3: 1946564.385 ops/s
# Warmup Iteration   4: 1656811.459 ops/s
# Warmup Iteration   5: 1985521.433 ops/s
# Warmup Iteration   6: 1960767.170 ops/s
# Warmup Iteration   7: 1969085.753 ops/s
# Warmup Iteration   8: 1956496.468 ops/s
# Warmup Iteration   9: 1980195.795 ops/s
# Warmup Iteration  10: 1972278.910 ops/s
# Warmup Iteration  11: 1963363.884 ops/s
# Warmup Iteration  12: 1952134.117 ops/s
# Warmup Iteration  13: 1971474.276 ops/s
# Warmup Iteration  14: 1967471.318 ops/s
# Warmup Iteration  15: 1977923.072 ops/s
# Warmup Iteration  16: 1989148.524 ops/s
# Warmup Iteration  17: 1971527.817 ops/s
# Warmup Iteration  18: 1978527.368 ops/s
# Warmup Iteration  19: 1977251.748 ops/s
# Warmup Iteration  20: 1976788.423 ops/s
# Warmup Iteration  21: 1963780.510 ops/s
# Warmup Iteration  22: 1983506.254 ops/s
# Warmup Iteration  23: 1975422.187 ops/s
# Warmup Iteration  24: 1951544.422 ops/s
# Warmup Iteration  25: 1986811.039 ops/s
# Warmup Iteration  26: 1966834.624 ops/s
# Warmup Iteration  27: 1973676.736 ops/s
# Warmup Iteration  28: 1961939.537 ops/s
# Warmup Iteration  29: 1967074.827 ops/s
# Warmup Iteration  30: 1983723.004 ops/s
Iteration   1: 1996092.407 ops/s
Iteration   2: 1959142.633 ops/s
Iteration   3: 1959833.520 ops/s
Iteration   4: 1987766.506 ops/s
Iteration   5: 1979783.494 ops/s
Iteration   6: 1947998.118 ops/s
Iteration   7: 1947809.575 ops/s
Iteration   8: 1974492.397 ops/s
Iteration   9: 1971489.464 ops/s
Iteration  10: 1957557.901 ops/s
Iteration  11: 1958280.226 ops/s
Iteration  12: 1979966.575 ops/s
Iteration  13: 1968487.342 ops/s
Iteration  14: 1984393.178 ops/s
Iteration  15: 1980928.263 ops/s
Iteration  16: 1973578.210 ops/s
Iteration  17: 1928743.898 ops/s
Iteration  18: 1977923.027 ops/s
Iteration  19: 1918443.562 ops/s
Iteration  20: 1981639.362 ops/s
Iteration  21: 1964295.267 ops/s
Iteration  22: 1977032.746 ops/s
Iteration  23: 1960226.643 ops/s
Iteration  24: 1963495.951 ops/s
Iteration  25: 1978149.418 ops/s
Iteration  26: 1964222.832 ops/s
Iteration  27: 1967332.388 ops/s
Iteration  28: 1969093.438 ops/s
Iteration  29: 1967403.835 ops/s
Iteration  30: 1967761.167 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collect":
  1967112.111 ±(99.9%) 10881.734 ops/s [Average]
  (min, avg, max) = (1918443.562, 1967112.111, 1996092.407), stdev = 16287.269
  CI (99.9%): [1956230.377, 1977993.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collect  thrpt   30  1967112.111 ± 10881.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1241929.478 ops/s
# Warmup Iteration   2: 2638328.957 ops/s
# Warmup Iteration   3: 2780180.643 ops/s
# Warmup Iteration   4: 2746614.305 ops/s
# Warmup Iteration   5: 2311812.424 ops/s
# Warmup Iteration   6: 2790455.444 ops/s
# Warmup Iteration   7: 2786608.803 ops/s
# Warmup Iteration   8: 2783080.042 ops/s
# Warmup Iteration   9: 2780158.186 ops/s
# Warmup Iteration  10: 2790016.904 ops/s
# Warmup Iteration  11: 2791116.174 ops/s
# Warmup Iteration  12: 2789997.716 ops/s
# Warmup Iteration  13: 2748891.989 ops/s
# Warmup Iteration  14: 2784248.080 ops/s
# Warmup Iteration  15: 2766996.608 ops/s
# Warmup Iteration  16: 2787390.322 ops/s
# Warmup Iteration  17: 2790874.896 ops/s
# Warmup Iteration  18: 2790294.569 ops/s
# Warmup Iteration  19: 2769037.558 ops/s
# Warmup Iteration  20: 2789121.458 ops/s
# Warmup Iteration  21: 2767081.229 ops/s
# Warmup Iteration  22: 2787851.360 ops/s
# Warmup Iteration  23: 2770118.007 ops/s
# Warmup Iteration  24: 2781856.720 ops/s
# Warmup Iteration  25: 2766924.971 ops/s
# Warmup Iteration  26: 2784914.655 ops/s
# Warmup Iteration  27: 2772262.428 ops/s
# Warmup Iteration  28: 2788546.659 ops/s
# Warmup Iteration  29: 2769256.869 ops/s
# Warmup Iteration  30: 2790963.857 ops/s
Iteration   1: 2792674.370 ops/s
Iteration   2: 2784218.511 ops/s
Iteration   3: 2784982.911 ops/s
Iteration   4: 2738152.678 ops/s
Iteration   5: 2791193.815 ops/s
Iteration   6: 2793400.324 ops/s
Iteration   7: 2718011.500 ops/s
Iteration   8: 2786395.695 ops/s
Iteration   9: 2741385.369 ops/s
Iteration  10: 2795494.318 ops/s
Iteration  11: 2796284.976 ops/s
Iteration  12: 2777248.875 ops/s
Iteration  13: 2782540.109 ops/s
Iteration  14: 2792252.218 ops/s
Iteration  15: 2785139.271 ops/s
Iteration  16: 2771881.721 ops/s
Iteration  17: 2789469.811 ops/s
Iteration  18: 2797616.923 ops/s
Iteration  19: 2775362.376 ops/s
Iteration  20: 2790086.136 ops/s
Iteration  21: 2785953.057 ops/s
Iteration  22: 2744090.763 ops/s
Iteration  23: 2784842.745 ops/s
Iteration  24: 2787290.033 ops/s
Iteration  25: 2749163.504 ops/s
Iteration  26: 2792627.529 ops/s
Iteration  27: 2782310.892 ops/s
Iteration  28: 2788692.657 ops/s
Iteration  29: 2791873.785 ops/s
Iteration  30: 2775243.842 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBoolean":
  2778862.690 ±(99.9%) 13383.242 ops/s [Average]
  (min, avg, max) = (2718011.500, 2778862.690, 2797616.923), stdev = 20031.409
  CI (99.9%): [2765479.448, 2792245.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectBoolean  thrpt   30  2778862.690 ± 13383.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3229153.392 ops/s
# Warmup Iteration   2: 5441102.111 ops/s
# Warmup Iteration   3: 6068854.824 ops/s
# Warmup Iteration   4: 6095919.978 ops/s
# Warmup Iteration   5: 6090286.996 ops/s
# Warmup Iteration   6: 5039526.900 ops/s
# Warmup Iteration   7: 6123754.086 ops/s
# Warmup Iteration   8: 6068149.783 ops/s
# Warmup Iteration   9: 6102236.215 ops/s
# Warmup Iteration  10: 5961833.711 ops/s
# Warmup Iteration  11: 6102382.489 ops/s
# Warmup Iteration  12: 6093140.870 ops/s
# Warmup Iteration  13: 6063771.455 ops/s
# Warmup Iteration  14: 6099732.489 ops/s
# Warmup Iteration  15: 6053644.636 ops/s
# Warmup Iteration  16: 6111402.208 ops/s
# Warmup Iteration  17: 6115793.372 ops/s
# Warmup Iteration  18: 6119825.706 ops/s
# Warmup Iteration  19: 6111310.234 ops/s
# Warmup Iteration  20: 6063322.043 ops/s
# Warmup Iteration  21: 6096627.678 ops/s
# Warmup Iteration  22: 6117550.850 ops/s
# Warmup Iteration  23: 6115684.808 ops/s
# Warmup Iteration  24: 6108994.092 ops/s
# Warmup Iteration  25: 6095023.239 ops/s
# Warmup Iteration  26: 6064868.920 ops/s
# Warmup Iteration  27: 6121724.406 ops/s
# Warmup Iteration  28: 6101300.265 ops/s
# Warmup Iteration  29: 6113486.473 ops/s
# Warmup Iteration  30: 6078734.845 ops/s
Iteration   1: 5975980.473 ops/s
Iteration   2: 6064677.149 ops/s
Iteration   3: 6095556.703 ops/s
Iteration   4: 6127648.220 ops/s
Iteration   5: 6097634.729 ops/s
Iteration   6: 6108996.228 ops/s
Iteration   7: 6104103.256 ops/s
Iteration   8: 6014412.724 ops/s
Iteration   9: 6016497.402 ops/s
Iteration  10: 6114420.292 ops/s
Iteration  11: 6098046.424 ops/s
Iteration  12: 6109173.898 ops/s
Iteration  13: 6115991.127 ops/s
Iteration  14: 6024101.474 ops/s
Iteration  15: 6109584.101 ops/s
Iteration  16: 6027496.411 ops/s
Iteration  17: 6116654.556 ops/s
Iteration  18: 6123868.973 ops/s
Iteration  19: 6103596.158 ops/s
Iteration  20: 6108085.779 ops/s
Iteration  21: 6003351.736 ops/s
Iteration  22: 6089373.882 ops/s
Iteration  23: 6119032.924 ops/s
Iteration  24: 6120944.157 ops/s
Iteration  25: 6114459.409 ops/s
Iteration  26: 6098106.240 ops/s
Iteration  27: 6110405.164 ops/s
Iteration  28: 6104342.538 ops/s
Iteration  29: 6067115.557 ops/s
Iteration  30: 6097560.470 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  6086040.605 ±(99.9%) 27807.299 ops/s [Average]
  (min, avg, max) = (5975980.473, 6086040.605, 6127648.220), stdev = 41620.660
  CI (99.9%): [6058233.306, 6113847.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  6086040.605 ± 27807.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3411241.271 ops/s
# Warmup Iteration   2: 6309558.393 ops/s
# Warmup Iteration   3: 6762629.294 ops/s
# Warmup Iteration   4: 6804092.906 ops/s
# Warmup Iteration   5: 5891304.703 ops/s
# Warmup Iteration   6: 6556034.820 ops/s
# Warmup Iteration   7: 6823478.673 ops/s
# Warmup Iteration   8: 6813236.241 ops/s
# Warmup Iteration   9: 6820992.441 ops/s
# Warmup Iteration  10: 6810846.169 ops/s
# Warmup Iteration  11: 6811378.973 ops/s
# Warmup Iteration  12: 6782376.754 ops/s
# Warmup Iteration  13: 6779487.185 ops/s
# Warmup Iteration  14: 6792600.912 ops/s
# Warmup Iteration  15: 6805291.742 ops/s
# Warmup Iteration  16: 6656321.629 ops/s
# Warmup Iteration  17: 6790317.103 ops/s
# Warmup Iteration  18: 6810075.911 ops/s
# Warmup Iteration  19: 6821359.133 ops/s
# Warmup Iteration  20: 6819139.319 ops/s
# Warmup Iteration  21: 6803500.419 ops/s
# Warmup Iteration  22: 6815240.213 ops/s
# Warmup Iteration  23: 6805279.877 ops/s
# Warmup Iteration  24: 6799966.958 ops/s
# Warmup Iteration  25: 6815900.165 ops/s
# Warmup Iteration  26: 6816887.752 ops/s
# Warmup Iteration  27: 6771873.729 ops/s
# Warmup Iteration  28: 6824061.749 ops/s
# Warmup Iteration  29: 6805201.314 ops/s
# Warmup Iteration  30: 6775039.859 ops/s
Iteration   1: 6822145.500 ops/s
Iteration   2: 6744398.025 ops/s
Iteration   3: 6770045.398 ops/s
Iteration   4: 6831913.015 ops/s
Iteration   5: 6809757.216 ops/s
Iteration   6: 6790560.403 ops/s
Iteration   7: 6832302.765 ops/s
Iteration   8: 6811663.073 ops/s
Iteration   9: 6791649.875 ops/s
Iteration  10: 6819719.415 ops/s
Iteration  11: 6803257.615 ops/s
Iteration  12: 6834759.187 ops/s
Iteration  13: 6821164.960 ops/s
Iteration  14: 6813232.055 ops/s
Iteration  15: 6837402.380 ops/s
Iteration  16: 6817064.301 ops/s
Iteration  17: 6800251.708 ops/s
Iteration  18: 6790840.561 ops/s
Iteration  19: 6675403.015 ops/s
Iteration  20: 6817000.404 ops/s
Iteration  21: 6814689.725 ops/s
Iteration  22: 6811213.928 ops/s
Iteration  23: 6800287.433 ops/s
Iteration  24: 6823445.816 ops/s
Iteration  25: 6814995.476 ops/s
Iteration  26: 6791347.662 ops/s
Iteration  27: 6794356.207 ops/s
Iteration  28: 6706174.103 ops/s
Iteration  29: 6815223.600 ops/s
Iteration  30: 6700268.010 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget":
  6796884.428 ±(99.9%) 26800.062 ops/s [Average]
  (min, avg, max) = (6675403.015, 6796884.428, 6837402.380), stdev = 40113.075
  CI (99.9%): [6770084.366, 6823684.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  6796884.428 ± 26800.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607371.163 ops/s
# Warmup Iteration   2: 1272627.740 ops/s
# Warmup Iteration   3: 1317277.964 ops/s
# Warmup Iteration   4: 1326455.397 ops/s
# Warmup Iteration   5: 1112761.048 ops/s
# Warmup Iteration   6: 1327051.054 ops/s
# Warmup Iteration   7: 1329023.683 ops/s
# Warmup Iteration   8: 1319075.724 ops/s
# Warmup Iteration   9: 1320888.542 ops/s
# Warmup Iteration  10: 1327180.923 ops/s
# Warmup Iteration  11: 1330717.728 ops/s
# Warmup Iteration  12: 1329909.025 ops/s
# Warmup Iteration  13: 1320654.956 ops/s
# Warmup Iteration  14: 1330041.684 ops/s
# Warmup Iteration  15: 1329961.951 ops/s
# Warmup Iteration  16: 1330404.913 ops/s
# Warmup Iteration  17: 1330340.490 ops/s
# Warmup Iteration  18: 1325912.161 ops/s
# Warmup Iteration  19: 1328907.858 ops/s
# Warmup Iteration  20: 1325425.724 ops/s
# Warmup Iteration  21: 1330491.000 ops/s
# Warmup Iteration  22: 1325558.518 ops/s
# Warmup Iteration  23: 1330087.857 ops/s
# Warmup Iteration  24: 1321772.030 ops/s
# Warmup Iteration  25: 1327881.839 ops/s
# Warmup Iteration  26: 1319687.044 ops/s
# Warmup Iteration  27: 1324512.114 ops/s
# Warmup Iteration  28: 1297890.950 ops/s
# Warmup Iteration  29: 1318401.610 ops/s
# Warmup Iteration  30: 1328989.344 ops/s
Iteration   1: 1329081.814 ops/s
Iteration   2: 1328663.979 ops/s
Iteration   3: 1329055.130 ops/s
Iteration   4: 1330932.432 ops/s
Iteration   5: 1327126.487 ops/s
Iteration   6: 1307032.168 ops/s
Iteration   7: 1328717.081 ops/s
Iteration   8: 1329938.661 ops/s
Iteration   9: 1329316.818 ops/s
Iteration  10: 1332002.685 ops/s
Iteration  11: 1327412.670 ops/s
Iteration  12: 1326399.247 ops/s
Iteration  13: 1324299.695 ops/s
Iteration  14: 1311525.655 ops/s
Iteration  15: 1291712.504 ops/s
Iteration  16: 1329193.823 ops/s
Iteration  17: 1328123.353 ops/s
Iteration  18: 1307610.454 ops/s
Iteration  19: 1325197.320 ops/s
Iteration  20: 1326937.749 ops/s
Iteration  21: 1330603.372 ops/s
Iteration  22: 1329478.056 ops/s
Iteration  23: 1332407.619 ops/s
Iteration  24: 1331481.483 ops/s
Iteration  25: 1309303.920 ops/s
Iteration  26: 1320522.421 ops/s
Iteration  27: 1330115.746 ops/s
Iteration  28: 1328333.937 ops/s
Iteration  29: 1329361.026 ops/s
Iteration  30: 1329334.985 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByte":
  1324707.410 ±(99.9%) 6366.944 ops/s [Average]
  (min, avg, max) = (1291712.504, 1324707.410, 1332407.619), stdev = 9529.743
  CI (99.9%): [1318340.466, 1331074.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectByte  thrpt   30  1324707.410 ± 6366.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1630288.387 ops/s
# Warmup Iteration   2: 3819282.806 ops/s
# Warmup Iteration   3: 3831270.312 ops/s
# Warmup Iteration   4: 3240627.686 ops/s
# Warmup Iteration   5: 3835369.868 ops/s
# Warmup Iteration   6: 3867659.038 ops/s
# Warmup Iteration   7: 3878735.756 ops/s
# Warmup Iteration   8: 3863866.410 ops/s
# Warmup Iteration   9: 3866242.648 ops/s
# Warmup Iteration  10: 3846210.267 ops/s
# Warmup Iteration  11: 3862329.069 ops/s
# Warmup Iteration  12: 3859223.771 ops/s
# Warmup Iteration  13: 3861748.364 ops/s
# Warmup Iteration  14: 3871506.945 ops/s
# Warmup Iteration  15: 3872554.031 ops/s
# Warmup Iteration  16: 3835440.855 ops/s
# Warmup Iteration  17: 3866893.738 ops/s
# Warmup Iteration  18: 3862376.861 ops/s
# Warmup Iteration  19: 3872292.852 ops/s
# Warmup Iteration  20: 3875161.820 ops/s
# Warmup Iteration  21: 3841501.850 ops/s
# Warmup Iteration  22: 3812712.148 ops/s
# Warmup Iteration  23: 3867496.949 ops/s
# Warmup Iteration  24: 3876933.072 ops/s
# Warmup Iteration  25: 3872759.578 ops/s
# Warmup Iteration  26: 3825344.868 ops/s
# Warmup Iteration  27: 3802056.930 ops/s
# Warmup Iteration  28: 3870440.949 ops/s
# Warmup Iteration  29: 3865278.238 ops/s
# Warmup Iteration  30: 3841253.165 ops/s
Iteration   1: 3878747.142 ops/s
Iteration   2: 3870733.300 ops/s
Iteration   3: 3870039.902 ops/s
Iteration   4: 3878194.705 ops/s
Iteration   5: 3862668.661 ops/s
Iteration   6: 3876893.832 ops/s
Iteration   7: 3859386.719 ops/s
Iteration   8: 3879198.501 ops/s
Iteration   9: 3874900.678 ops/s
Iteration  10: 3871402.611 ops/s
Iteration  11: 3878772.436 ops/s
Iteration  12: 3863610.045 ops/s
Iteration  13: 3864259.230 ops/s
Iteration  14: 3790276.036 ops/s
Iteration  15: 3870286.211 ops/s
Iteration  16: 3864386.337 ops/s
Iteration  17: 3870846.212 ops/s
Iteration  18: 3873833.665 ops/s
Iteration  19: 3874377.587 ops/s
Iteration  20: 3863756.221 ops/s
Iteration  21: 3869751.530 ops/s
Iteration  22: 3867338.344 ops/s
Iteration  23: 3873714.915 ops/s
Iteration  24: 3878256.506 ops/s
Iteration  25: 3860306.424 ops/s
Iteration  26: 3816357.870 ops/s
Iteration  27: 3874040.351 ops/s
Iteration  28: 3858646.429 ops/s
Iteration  29: 3879512.313 ops/s
Iteration  30: 3876445.017 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget":
  3866364.658 ±(99.9%) 12420.102 ops/s [Average]
  (min, avg, max) = (3790276.036, 3866364.658, 3879512.313), stdev = 18589.825
  CI (99.9%): [3853944.556, 3878784.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  3866364.658 ± 12420.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1315604.621 ops/s
# Warmup Iteration   2: 3180036.562 ops/s
# Warmup Iteration   3: 3167017.257 ops/s
# Warmup Iteration   4: 2655735.645 ops/s
# Warmup Iteration   5: 3207672.679 ops/s
# Warmup Iteration   6: 3226050.919 ops/s
# Warmup Iteration   7: 3191887.559 ops/s
# Warmup Iteration   8: 3213403.818 ops/s
# Warmup Iteration   9: 3219063.120 ops/s
# Warmup Iteration  10: 3218534.479 ops/s
# Warmup Iteration  11: 3219580.051 ops/s
# Warmup Iteration  12: 3193779.483 ops/s
# Warmup Iteration  13: 3210448.341 ops/s
# Warmup Iteration  14: 3216161.581 ops/s
# Warmup Iteration  15: 3178015.021 ops/s
# Warmup Iteration  16: 3176552.431 ops/s
# Warmup Iteration  17: 3154749.134 ops/s
# Warmup Iteration  18: 3215093.283 ops/s
# Warmup Iteration  19: 3201619.091 ops/s
# Warmup Iteration  20: 3195912.326 ops/s
# Warmup Iteration  21: 3189078.023 ops/s
# Warmup Iteration  22: 3210084.361 ops/s
# Warmup Iteration  23: 3158332.088 ops/s
# Warmup Iteration  24: 3217996.055 ops/s
# Warmup Iteration  25: 3202379.820 ops/s
# Warmup Iteration  26: 3193652.476 ops/s
# Warmup Iteration  27: 3203941.403 ops/s
# Warmup Iteration  28: 3213137.101 ops/s
# Warmup Iteration  29: 3208938.489 ops/s
# Warmup Iteration  30: 3208472.081 ops/s
Iteration   1: 3216336.593 ops/s
Iteration   2: 3204075.886 ops/s
Iteration   3: 3202872.486 ops/s
Iteration   4: 3219806.745 ops/s
Iteration   5: 3213706.473 ops/s
Iteration   6: 3162491.964 ops/s
Iteration   7: 3212086.192 ops/s
Iteration   8: 3212203.404 ops/s
Iteration   9: 3156783.226 ops/s
Iteration  10: 3219502.137 ops/s
Iteration  11: 3211745.702 ops/s
Iteration  12: 3212807.039 ops/s
Iteration  13: 3139003.420 ops/s
Iteration  14: 3220037.225 ops/s
Iteration  15: 3202657.153 ops/s
Iteration  16: 3205824.807 ops/s
Iteration  17: 3214519.641 ops/s
Iteration  18: 3180372.098 ops/s
Iteration  19: 3195740.617 ops/s
Iteration  20: 3221404.895 ops/s
Iteration  21: 3215110.208 ops/s
Iteration  22: 3218747.004 ops/s
Iteration  23: 3218359.585 ops/s
Iteration  24: 3198925.148 ops/s
Iteration  25: 3213236.964 ops/s
Iteration  26: 3209944.531 ops/s
Iteration  27: 3198512.212 ops/s
Iteration  28: 3216450.523 ops/s
Iteration  29: 3202522.732 ops/s
Iteration  30: 3215988.688 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectByteWithTarget":
  3204392.510 ±(99.9%) 13308.787 ops/s [Average]
  (min, avg, max) = (3139003.420, 3204392.510, 3221404.895), stdev = 19919.967
  CI (99.9%): [3191083.723, 3217701.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  3204392.510 ± 13308.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588273.834 ops/s
# Warmup Iteration   2: 1234887.035 ops/s
# Warmup Iteration   3: 1269149.667 ops/s
# Warmup Iteration   4: 1265071.551 ops/s
# Warmup Iteration   5: 1074996.720 ops/s
# Warmup Iteration   6: 1278369.235 ops/s
# Warmup Iteration   7: 1275673.045 ops/s
# Warmup Iteration   8: 1279377.959 ops/s
# Warmup Iteration   9: 1264175.968 ops/s
# Warmup Iteration  10: 1275118.595 ops/s
# Warmup Iteration  11: 1276581.119 ops/s
# Warmup Iteration  12: 1268784.662 ops/s
# Warmup Iteration  13: 1277030.816 ops/s
# Warmup Iteration  14: 1274612.371 ops/s
# Warmup Iteration  15: 1265855.900 ops/s
# Warmup Iteration  16: 1276420.287 ops/s
# Warmup Iteration  17: 1279489.985 ops/s
# Warmup Iteration  18: 1276589.766 ops/s
# Warmup Iteration  19: 1264366.607 ops/s
# Warmup Iteration  20: 1275284.147 ops/s
# Warmup Iteration  21: 1277089.575 ops/s
# Warmup Iteration  22: 1280430.007 ops/s
# Warmup Iteration  23: 1272904.025 ops/s
# Warmup Iteration  24: 1248524.888 ops/s
# Warmup Iteration  25: 1279666.931 ops/s
# Warmup Iteration  26: 1279009.004 ops/s
# Warmup Iteration  27: 1280710.536 ops/s
# Warmup Iteration  28: 1251799.521 ops/s
# Warmup Iteration  29: 1258643.466 ops/s
# Warmup Iteration  30: 1276211.094 ops/s
Iteration   1: 1277951.692 ops/s
Iteration   2: 1280705.061 ops/s
Iteration   3: 1275818.887 ops/s
Iteration   4: 1281100.219 ops/s
Iteration   5: 1270233.669 ops/s
Iteration   6: 1279779.589 ops/s
Iteration   7: 1282027.217 ops/s
Iteration   8: 1280052.124 ops/s
Iteration   9: 1279712.058 ops/s
Iteration  10: 1277054.014 ops/s
Iteration  11: 1281807.867 ops/s
Iteration  12: 1269519.495 ops/s
Iteration  13: 1281367.451 ops/s
Iteration  14: 1267921.419 ops/s
Iteration  15: 1281451.548 ops/s
Iteration  16: 1275672.614 ops/s
Iteration  17: 1278781.403 ops/s
Iteration  18: 1251177.155 ops/s
Iteration  19: 1283140.605 ops/s
Iteration  20: 1278074.165 ops/s
Iteration  21: 1276941.716 ops/s
Iteration  22: 1273709.952 ops/s
Iteration  23: 1281475.864 ops/s
Iteration  24: 1277036.724 ops/s
Iteration  25: 1278472.920 ops/s
Iteration  26: 1259088.264 ops/s
Iteration  27: 1281672.860 ops/s
Iteration  28: 1275296.885 ops/s
Iteration  29: 1267393.608 ops/s
Iteration  30: 1278051.486 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectChar":
  1276082.951 ±(99.9%) 4782.645 ops/s [Average]
  (min, avg, max) = (1251177.155, 1276082.951, 1283140.605), stdev = 7158.439
  CI (99.9%): [1271300.306, 1280865.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectChar  thrpt   30  1276082.951 ± 4782.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1655822.400 ops/s
# Warmup Iteration   2: 3872349.249 ops/s
# Warmup Iteration   3: 3933876.451 ops/s
# Warmup Iteration   4: 3275283.811 ops/s
# Warmup Iteration   5: 3939839.349 ops/s
# Warmup Iteration   6: 3934268.864 ops/s
# Warmup Iteration   7: 3887540.675 ops/s
# Warmup Iteration   8: 3901138.662 ops/s
# Warmup Iteration   9: 3915321.760 ops/s
# Warmup Iteration  10: 3937368.383 ops/s
# Warmup Iteration  11: 3900086.127 ops/s
# Warmup Iteration  12: 3908960.960 ops/s
# Warmup Iteration  13: 3931812.162 ops/s
# Warmup Iteration  14: 3908337.861 ops/s
# Warmup Iteration  15: 3928788.254 ops/s
# Warmup Iteration  16: 3934868.916 ops/s
# Warmup Iteration  17: 3897902.896 ops/s
# Warmup Iteration  18: 3906432.466 ops/s
# Warmup Iteration  19: 3931409.636 ops/s
# Warmup Iteration  20: 3933988.149 ops/s
# Warmup Iteration  21: 3925332.152 ops/s
# Warmup Iteration  22: 3928164.116 ops/s
# Warmup Iteration  23: 3910822.986 ops/s
# Warmup Iteration  24: 3930894.104 ops/s
# Warmup Iteration  25: 3942297.987 ops/s
# Warmup Iteration  26: 3944610.836 ops/s
# Warmup Iteration  27: 3935405.935 ops/s
# Warmup Iteration  28: 3900807.702 ops/s
# Warmup Iteration  29: 3929401.909 ops/s
# Warmup Iteration  30: 3934417.680 ops/s
Iteration   1: 3930994.049 ops/s
Iteration   2: 3885623.464 ops/s
Iteration   3: 3933651.273 ops/s
Iteration   4: 3942136.459 ops/s
Iteration   5: 3909005.739 ops/s
Iteration   6: 3929835.322 ops/s
Iteration   7: 3930329.922 ops/s
Iteration   8: 3945083.961 ops/s
Iteration   9: 3874302.476 ops/s
Iteration  10: 3937012.049 ops/s
Iteration  11: 3928385.206 ops/s
Iteration  12: 3931087.453 ops/s
Iteration  13: 3933952.762 ops/s
Iteration  14: 3938387.509 ops/s
Iteration  15: 3941611.489 ops/s
Iteration  16: 3943164.338 ops/s
Iteration  17: 3930503.893 ops/s
Iteration  18: 3926531.867 ops/s
Iteration  19: 3933558.138 ops/s
Iteration  20: 3942556.778 ops/s
Iteration  21: 3942846.805 ops/s
Iteration  22: 3928698.177 ops/s
Iteration  23: 3940502.734 ops/s
Iteration  24: 3871103.689 ops/s
Iteration  25: 3940850.014 ops/s
Iteration  26: 3936886.743 ops/s
Iteration  27: 3940918.387 ops/s
Iteration  28: 3940708.708 ops/s
Iteration  29: 3937905.841 ops/s
Iteration  30: 3939249.475 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget":
  3929579.491 ±(99.9%) 12904.480 ops/s [Average]
  (min, avg, max) = (3871103.689, 3929579.491, 3945083.961), stdev = 19314.820
  CI (99.9%): [3916675.010, 3942483.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  3929579.491 ± 12904.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1385396.932 ops/s
# Warmup Iteration   2: 3292279.108 ops/s
# Warmup Iteration   3: 3360603.339 ops/s
# Warmup Iteration   4: 2824557.718 ops/s
# Warmup Iteration   5: 3364989.318 ops/s
# Warmup Iteration   6: 3370703.888 ops/s
# Warmup Iteration   7: 3371899.575 ops/s
# Warmup Iteration   8: 3360226.161 ops/s
# Warmup Iteration   9: 3372952.718 ops/s
# Warmup Iteration  10: 3354470.685 ops/s
# Warmup Iteration  11: 3344072.580 ops/s
# Warmup Iteration  12: 3376645.324 ops/s
# Warmup Iteration  13: 3375145.438 ops/s
# Warmup Iteration  14: 3368999.759 ops/s
# Warmup Iteration  15: 3374494.242 ops/s
# Warmup Iteration  16: 3339445.282 ops/s
# Warmup Iteration  17: 3353509.493 ops/s
# Warmup Iteration  18: 3343885.484 ops/s
# Warmup Iteration  19: 3375072.861 ops/s
# Warmup Iteration  20: 3375695.351 ops/s
# Warmup Iteration  21: 3371456.722 ops/s
# Warmup Iteration  22: 3378551.535 ops/s
# Warmup Iteration  23: 3364090.067 ops/s
# Warmup Iteration  24: 3368660.158 ops/s
# Warmup Iteration  25: 3348063.320 ops/s
# Warmup Iteration  26: 3381258.582 ops/s
# Warmup Iteration  27: 3307374.542 ops/s
# Warmup Iteration  28: 3367811.818 ops/s
# Warmup Iteration  29: 3378296.475 ops/s
# Warmup Iteration  30: 3380482.757 ops/s
Iteration   1: 3388668.360 ops/s
Iteration   2: 3379241.673 ops/s
Iteration   3: 3378599.466 ops/s
Iteration   4: 3379097.888 ops/s
Iteration   5: 3380001.094 ops/s
Iteration   6: 3370014.292 ops/s
Iteration   7: 3381081.526 ops/s
Iteration   8: 3320824.928 ops/s
Iteration   9: 3375599.945 ops/s
Iteration  10: 3369068.577 ops/s
Iteration  11: 3369415.771 ops/s
Iteration  12: 3380456.594 ops/s
Iteration  13: 3392405.342 ops/s
Iteration  14: 3306722.202 ops/s
Iteration  15: 3343375.616 ops/s
Iteration  16: 3355789.093 ops/s
Iteration  17: 3368327.394 ops/s
Iteration  18: 3372282.892 ops/s
Iteration  19: 3321244.017 ops/s
Iteration  20: 3377034.479 ops/s
Iteration  21: 3385854.720 ops/s
Iteration  22: 3376337.583 ops/s
Iteration  23: 3269251.879 ops/s
Iteration  24: 3325613.380 ops/s
Iteration  25: 3375205.411 ops/s
Iteration  26: 3379900.091 ops/s
Iteration  27: 3378146.331 ops/s
Iteration  28: 3389605.444 ops/s
Iteration  29: 3368847.144 ops/s
Iteration  30: 3386174.810 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectCharWithTarget":
  3364806.265 ±(99.9%) 19086.141 ops/s [Average]
  (min, avg, max) = (3269251.879, 3364806.265, 3392405.342), stdev = 28567.239
  CI (99.9%): [3345720.124, 3383892.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  3364806.265 ± 19086.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478434.446 ops/s
# Warmup Iteration   2: 1049871.866 ops/s
# Warmup Iteration   3: 1045295.325 ops/s
# Warmup Iteration   4: 893510.089 ops/s
# Warmup Iteration   5: 1060045.115 ops/s
# Warmup Iteration   6: 1057298.278 ops/s
# Warmup Iteration   7: 1049088.846 ops/s
# Warmup Iteration   8: 1056883.676 ops/s
# Warmup Iteration   9: 1055306.910 ops/s
# Warmup Iteration  10: 1044970.036 ops/s
# Warmup Iteration  11: 1058279.565 ops/s
# Warmup Iteration  12: 1057750.099 ops/s
# Warmup Iteration  13: 1057995.493 ops/s
# Warmup Iteration  14: 1056484.693 ops/s
# Warmup Iteration  15: 1052668.502 ops/s
# Warmup Iteration  16: 1057080.120 ops/s
# Warmup Iteration  17: 1054920.049 ops/s
# Warmup Iteration  18: 1051905.105 ops/s
# Warmup Iteration  19: 1055435.594 ops/s
# Warmup Iteration  20: 1054229.273 ops/s
# Warmup Iteration  21: 1046595.534 ops/s
# Warmup Iteration  22: 1051611.944 ops/s
# Warmup Iteration  23: 1044186.790 ops/s
# Warmup Iteration  24: 1040395.688 ops/s
# Warmup Iteration  25: 1055795.952 ops/s
# Warmup Iteration  26: 1048277.765 ops/s
# Warmup Iteration  27: 1057208.809 ops/s
# Warmup Iteration  28: 1058426.194 ops/s
# Warmup Iteration  29: 1055893.767 ops/s
# Warmup Iteration  30: 1052453.153 ops/s
Iteration   1: 1055644.392 ops/s
Iteration   2: 1054845.147 ops/s
Iteration   3: 1058951.051 ops/s
Iteration   4: 1053018.100 ops/s
Iteration   5: 1055115.605 ops/s
Iteration   6: 1040734.616 ops/s
Iteration   7: 1032004.240 ops/s
Iteration   8: 1060764.455 ops/s
Iteration   9: 1056804.360 ops/s
Iteration  10: 1058385.791 ops/s
Iteration  11: 1056866.523 ops/s
Iteration  12: 1057971.518 ops/s
Iteration  13: 1053055.919 ops/s
Iteration  14: 1061545.793 ops/s
Iteration  15: 1056156.950 ops/s
Iteration  16: 1056617.815 ops/s
Iteration  17: 1054084.519 ops/s
Iteration  18: 1054129.724 ops/s
Iteration  19: 1056254.268 ops/s
Iteration  20: 1055776.727 ops/s
Iteration  21: 1058111.750 ops/s
Iteration  22: 1055340.584 ops/s
Iteration  23: 1060215.501 ops/s
Iteration  24: 1056301.876 ops/s
Iteration  25: 1056437.216 ops/s
Iteration  26: 1055609.547 ops/s
Iteration  27: 1057053.909 ops/s
Iteration  28: 1040905.751 ops/s
Iteration  29: 1051423.538 ops/s
Iteration  30: 1041628.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDouble":
  1054058.517 ±(99.9%) 4431.611 ops/s [Average]
  (min, avg, max) = (1032004.240, 1054058.517, 1061545.793), stdev = 6633.027
  CI (99.9%): [1049626.906, 1058490.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectDouble  thrpt   30  1054058.517 ± 4431.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1265971.903 ops/s
# Warmup Iteration   2: 2930825.860 ops/s
# Warmup Iteration   3: 2936670.085 ops/s
# Warmup Iteration   4: 2460890.351 ops/s
# Warmup Iteration   5: 2942630.544 ops/s
# Warmup Iteration   6: 2939014.653 ops/s
# Warmup Iteration   7: 2948381.612 ops/s
# Warmup Iteration   8: 2917916.161 ops/s
# Warmup Iteration   9: 2938899.279 ops/s
# Warmup Iteration  10: 2929903.220 ops/s
# Warmup Iteration  11: 2943398.168 ops/s
# Warmup Iteration  12: 2926701.836 ops/s
# Warmup Iteration  13: 2940959.119 ops/s
# Warmup Iteration  14: 2951700.491 ops/s
# Warmup Iteration  15: 2947156.726 ops/s
# Warmup Iteration  16: 2915288.481 ops/s
# Warmup Iteration  17: 2925375.537 ops/s
# Warmup Iteration  18: 2954266.289 ops/s
# Warmup Iteration  19: 2947779.122 ops/s
# Warmup Iteration  20: 2951400.353 ops/s
# Warmup Iteration  21: 2945809.868 ops/s
# Warmup Iteration  22: 2943905.017 ops/s
# Warmup Iteration  23: 2948660.885 ops/s
# Warmup Iteration  24: 2943212.840 ops/s
# Warmup Iteration  25: 2905057.933 ops/s
# Warmup Iteration  26: 2951436.985 ops/s
# Warmup Iteration  27: 2916702.144 ops/s
# Warmup Iteration  28: 2927866.442 ops/s
# Warmup Iteration  29: 2927116.526 ops/s
# Warmup Iteration  30: 2941099.926 ops/s
Iteration   1: 2944934.038 ops/s
Iteration   2: 2944545.393 ops/s
Iteration   3: 2940691.875 ops/s
Iteration   4: 2941968.788 ops/s
Iteration   5: 2943916.835 ops/s
Iteration   6: 2956185.472 ops/s
Iteration   7: 2939552.306 ops/s
Iteration   8: 2931022.186 ops/s
Iteration   9: 2929687.203 ops/s
Iteration  10: 2947918.629 ops/s
Iteration  11: 2947190.195 ops/s
Iteration  12: 2936769.693 ops/s
Iteration  13: 2946130.283 ops/s
Iteration  14: 2940213.480 ops/s
Iteration  15: 2900394.410 ops/s
Iteration  16: 2951887.588 ops/s
Iteration  17: 2935269.988 ops/s
Iteration  18: 2904233.774 ops/s
Iteration  19: 2959958.013 ops/s
Iteration  20: 2941040.762 ops/s
Iteration  21: 2952539.678 ops/s
Iteration  22: 2932917.886 ops/s
Iteration  23: 2953883.931 ops/s
Iteration  24: 2940091.979 ops/s
Iteration  25: 2953166.512 ops/s
Iteration  26: 2945382.888 ops/s
Iteration  27: 2943147.545 ops/s
Iteration  28: 2956507.583 ops/s
Iteration  29: 2893603.836 ops/s
Iteration  30: 2961218.641 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2940532.380 ±(99.9%) 10791.878 ops/s [Average]
  (min, avg, max) = (2893603.836, 2940532.380, 2961218.641), stdev = 16152.777
  CI (99.9%): [2929740.501, 2951324.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2940532.380 ± 10791.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1036849.198 ops/s
# Warmup Iteration   2: 2468084.005 ops/s
# Warmup Iteration   3: 2506434.374 ops/s
# Warmup Iteration   4: 2092957.730 ops/s
# Warmup Iteration   5: 2503990.233 ops/s
# Warmup Iteration   6: 2523251.115 ops/s
# Warmup Iteration   7: 2505148.186 ops/s
# Warmup Iteration   8: 2515475.836 ops/s
# Warmup Iteration   9: 2515191.302 ops/s
# Warmup Iteration  10: 2519464.678 ops/s
# Warmup Iteration  11: 2497378.417 ops/s
# Warmup Iteration  12: 2514381.389 ops/s
# Warmup Iteration  13: 2515567.984 ops/s
# Warmup Iteration  14: 2517901.908 ops/s
# Warmup Iteration  15: 2519658.707 ops/s
# Warmup Iteration  16: 2521429.972 ops/s
# Warmup Iteration  17: 2515231.931 ops/s
# Warmup Iteration  18: 2517535.533 ops/s
# Warmup Iteration  19: 2512230.769 ops/s
# Warmup Iteration  20: 2519949.076 ops/s
# Warmup Iteration  21: 2519915.860 ops/s
# Warmup Iteration  22: 2502536.250 ops/s
# Warmup Iteration  23: 2514067.653 ops/s
# Warmup Iteration  24: 2493372.390 ops/s
# Warmup Iteration  25: 2496062.222 ops/s
# Warmup Iteration  26: 2520899.384 ops/s
# Warmup Iteration  27: 2509759.232 ops/s
# Warmup Iteration  28: 2497451.021 ops/s
# Warmup Iteration  29: 2518361.274 ops/s
# Warmup Iteration  30: 2518121.329 ops/s
Iteration   1: 2523674.820 ops/s
Iteration   2: 2475326.727 ops/s
Iteration   3: 2515174.671 ops/s
Iteration   4: 2515699.607 ops/s
Iteration   5: 2480706.521 ops/s
Iteration   6: 2515413.712 ops/s
Iteration   7: 2522180.837 ops/s
Iteration   8: 2517785.792 ops/s
Iteration   9: 2500547.108 ops/s
Iteration  10: 2515127.132 ops/s
Iteration  11: 2512196.204 ops/s
Iteration  12: 2480652.896 ops/s
Iteration  13: 2518632.072 ops/s
Iteration  14: 2522136.953 ops/s
Iteration  15: 2515888.565 ops/s
Iteration  16: 2520621.032 ops/s
Iteration  17: 2493924.514 ops/s
Iteration  18: 2471007.826 ops/s
Iteration  19: 2515682.539 ops/s
Iteration  20: 2522536.544 ops/s
Iteration  21: 2497918.802 ops/s
Iteration  22: 2506125.160 ops/s
Iteration  23: 2470783.399 ops/s
Iteration  24: 2469290.644 ops/s
Iteration  25: 2511194.059 ops/s
Iteration  26: 2521803.383 ops/s
Iteration  27: 2519802.144 ops/s
Iteration  28: 2512995.897 ops/s
Iteration  29: 2521013.296 ops/s
Iteration  30: 2524290.100 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget":
  2507004.432 ±(99.9%) 12106.688 ops/s [Average]
  (min, avg, max) = (2469290.644, 2507004.432, 2524290.100), stdev = 18120.723
  CI (99.9%): [2494897.743, 2519111.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2507004.432 ± 12106.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512956.544 ops/s
# Warmup Iteration   2: 1037388.214 ops/s
# Warmup Iteration   3: 1086176.600 ops/s
# Warmup Iteration   4: 1084586.431 ops/s
# Warmup Iteration   5: 908668.949 ops/s
# Warmup Iteration   6: 1090189.364 ops/s
# Warmup Iteration   7: 1085340.775 ops/s
# Warmup Iteration   8: 1094090.879 ops/s
# Warmup Iteration   9: 1090667.052 ops/s
# Warmup Iteration  10: 1092225.183 ops/s
# Warmup Iteration  11: 1091247.149 ops/s
# Warmup Iteration  12: 1091744.652 ops/s
# Warmup Iteration  13: 1090273.149 ops/s
# Warmup Iteration  14: 1072273.243 ops/s
# Warmup Iteration  15: 1093088.946 ops/s
# Warmup Iteration  16: 1090198.670 ops/s
# Warmup Iteration  17: 1092446.691 ops/s
# Warmup Iteration  18: 1092001.578 ops/s
# Warmup Iteration  19: 1085664.425 ops/s
# Warmup Iteration  20: 1091684.007 ops/s
# Warmup Iteration  21: 1091245.266 ops/s
# Warmup Iteration  22: 1089485.408 ops/s
# Warmup Iteration  23: 1091425.868 ops/s
# Warmup Iteration  24: 1091893.772 ops/s
# Warmup Iteration  25: 1091467.699 ops/s
# Warmup Iteration  26: 1091927.242 ops/s
# Warmup Iteration  27: 1082048.553 ops/s
# Warmup Iteration  28: 1070232.722 ops/s
# Warmup Iteration  29: 1083834.666 ops/s
# Warmup Iteration  30: 1088165.536 ops/s
Iteration   1: 1094573.389 ops/s
Iteration   2: 1091330.118 ops/s
Iteration   3: 1090313.900 ops/s
Iteration   4: 1073326.041 ops/s
Iteration   5: 1094200.008 ops/s
Iteration   6: 1090497.231 ops/s
Iteration   7: 1075784.270 ops/s
Iteration   8: 1094426.842 ops/s
Iteration   9: 1092916.170 ops/s
Iteration  10: 1073362.729 ops/s
Iteration  11: 1094777.205 ops/s
Iteration  12: 1091497.845 ops/s
Iteration  13: 1093181.081 ops/s
Iteration  14: 1091805.978 ops/s
Iteration  15: 1094389.702 ops/s
Iteration  16: 1076411.830 ops/s
Iteration  17: 1091875.763 ops/s
Iteration  18: 1090873.573 ops/s
Iteration  19: 1093144.495 ops/s
Iteration  20: 1090736.820 ops/s
Iteration  21: 1094087.280 ops/s
Iteration  22: 1089564.160 ops/s
Iteration  23: 1087403.464 ops/s
Iteration  24: 1093236.934 ops/s
Iteration  25: 1088452.462 ops/s
Iteration  26: 1085102.003 ops/s
Iteration  27: 1086726.255 ops/s
Iteration  28: 1094545.983 ops/s
Iteration  29: 1089134.061 ops/s
Iteration  30: 1093269.226 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloat":
  1089364.894 ±(99.9%) 4250.878 ops/s [Average]
  (min, avg, max) = (1073326.041, 1089364.894, 1094777.205), stdev = 6362.514
  CI (99.9%): [1085114.016, 1093615.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectFloat  thrpt   30  1089364.894 ± 4250.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1432067.989 ops/s
# Warmup Iteration   2: 3266991.582 ops/s
# Warmup Iteration   3: 3276321.519 ops/s
# Warmup Iteration   4: 2741280.791 ops/s
# Warmup Iteration   5: 3294903.760 ops/s
# Warmup Iteration   6: 3283188.413 ops/s
# Warmup Iteration   7: 3289929.239 ops/s
# Warmup Iteration   8: 3276089.465 ops/s
# Warmup Iteration   9: 3291309.941 ops/s
# Warmup Iteration  10: 3292724.144 ops/s
# Warmup Iteration  11: 3251690.223 ops/s
# Warmup Iteration  12: 3279300.075 ops/s
# Warmup Iteration  13: 3292402.026 ops/s
# Warmup Iteration  14: 3289013.224 ops/s
# Warmup Iteration  15: 3290730.253 ops/s
# Warmup Iteration  16: 3278854.454 ops/s
# Warmup Iteration  17: 3291333.926 ops/s
# Warmup Iteration  18: 3287615.834 ops/s
# Warmup Iteration  19: 3259205.773 ops/s
# Warmup Iteration  20: 3290412.805 ops/s
# Warmup Iteration  21: 3260930.991 ops/s
# Warmup Iteration  22: 3291103.239 ops/s
# Warmup Iteration  23: 3266908.115 ops/s
# Warmup Iteration  24: 3291077.051 ops/s
# Warmup Iteration  25: 3280356.620 ops/s
# Warmup Iteration  26: 3277518.886 ops/s
# Warmup Iteration  27: 3264746.560 ops/s
# Warmup Iteration  28: 3276186.242 ops/s
# Warmup Iteration  29: 3287721.001 ops/s
# Warmup Iteration  30: 3282685.670 ops/s
Iteration   1: 3280271.824 ops/s
Iteration   2: 3243475.546 ops/s
Iteration   3: 3292815.682 ops/s
Iteration   4: 3285066.961 ops/s
Iteration   5: 3281169.743 ops/s
Iteration   6: 3283516.494 ops/s
Iteration   7: 3291731.363 ops/s
Iteration   8: 3290521.033 ops/s
Iteration   9: 3290425.527 ops/s
Iteration  10: 3291968.415 ops/s
Iteration  11: 3288620.295 ops/s
Iteration  12: 3236825.994 ops/s
Iteration  13: 3274954.578 ops/s
Iteration  14: 3294593.611 ops/s
Iteration  15: 3289686.176 ops/s
Iteration  16: 3271057.455 ops/s
Iteration  17: 3258254.131 ops/s
Iteration  18: 3293969.388 ops/s
Iteration  19: 3285903.143 ops/s
Iteration  20: 3284391.416 ops/s
Iteration  21: 3278671.901 ops/s
Iteration  22: 3278786.774 ops/s
Iteration  23: 3291164.318 ops/s
Iteration  24: 3286138.905 ops/s
Iteration  25: 3274579.715 ops/s
Iteration  26: 3222556.694 ops/s
Iteration  27: 3292637.042 ops/s
Iteration  28: 3289210.279 ops/s
Iteration  29: 3284890.535 ops/s
Iteration  30: 3295380.727 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget":
  3280107.856 ±(99.9%) 11841.610 ops/s [Average]
  (min, avg, max) = (3222556.694, 3280107.856, 3295380.727), stdev = 17723.966
  CI (99.9%): [3268266.245, 3291949.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  3280107.856 ± 11841.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1135366.591 ops/s
# Warmup Iteration   2: 2727338.687 ops/s
# Warmup Iteration   3: 2736262.775 ops/s
# Warmup Iteration   4: 2288021.136 ops/s
# Warmup Iteration   5: 2716150.859 ops/s
# Warmup Iteration   6: 2704700.865 ops/s
# Warmup Iteration   7: 2716740.110 ops/s
# Warmup Iteration   8: 2721099.558 ops/s
# Warmup Iteration   9: 2727586.891 ops/s
# Warmup Iteration  10: 2709601.898 ops/s
# Warmup Iteration  11: 2730199.331 ops/s
# Warmup Iteration  12: 2724878.309 ops/s
# Warmup Iteration  13: 2731439.276 ops/s
# Warmup Iteration  14: 2692728.595 ops/s
# Warmup Iteration  15: 2723476.871 ops/s
# Warmup Iteration  16: 2725250.017 ops/s
# Warmup Iteration  17: 2727872.709 ops/s
# Warmup Iteration  18: 2688902.187 ops/s
# Warmup Iteration  19: 2729564.333 ops/s
# Warmup Iteration  20: 2723417.092 ops/s
# Warmup Iteration  21: 2730577.847 ops/s
# Warmup Iteration  22: 2724190.927 ops/s
# Warmup Iteration  23: 2728736.430 ops/s
# Warmup Iteration  24: 2730512.259 ops/s
# Warmup Iteration  25: 2718422.155 ops/s
# Warmup Iteration  26: 2685529.726 ops/s
# Warmup Iteration  27: 2725120.007 ops/s
# Warmup Iteration  28: 2688782.806 ops/s
# Warmup Iteration  29: 2699059.694 ops/s
# Warmup Iteration  30: 2677728.147 ops/s
Iteration   1: 2709316.813 ops/s
Iteration   2: 2705501.243 ops/s
Iteration   3: 2736984.931 ops/s
Iteration   4: 2729322.643 ops/s
Iteration   5: 2716626.586 ops/s
Iteration   6: 2725598.354 ops/s
Iteration   7: 2723131.768 ops/s
Iteration   8: 2718670.311 ops/s
Iteration   9: 2688441.368 ops/s
Iteration  10: 2724165.987 ops/s
Iteration  11: 2741247.165 ops/s
Iteration  12: 2727681.376 ops/s
Iteration  13: 2684077.408 ops/s
Iteration  14: 2717448.214 ops/s
Iteration  15: 2726966.657 ops/s
Iteration  16: 2728606.651 ops/s
Iteration  17: 2676365.795 ops/s
Iteration  18: 2729784.468 ops/s
Iteration  19: 2726787.018 ops/s
Iteration  20: 2721753.025 ops/s
Iteration  21: 2671062.235 ops/s
Iteration  22: 2706849.935 ops/s
Iteration  23: 2732192.329 ops/s
Iteration  24: 2719676.693 ops/s
Iteration  25: 2733418.505 ops/s
Iteration  26: 2724264.354 ops/s
Iteration  27: 2723340.369 ops/s
Iteration  28: 2733686.716 ops/s
Iteration  29: 2728836.844 ops/s
Iteration  30: 2688574.112 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectFloatWithTarget":
  2717345.996 ±(99.9%) 12227.740 ops/s [Average]
  (min, avg, max) = (2671062.235, 2717345.996, 2741247.165), stdev = 18301.908
  CI (99.9%): [2705118.255, 2729573.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  2717345.996 ± 12227.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 944609.447 ops/s
# Warmup Iteration   2: 2175383.845 ops/s
# Warmup Iteration   3: 2153694.187 ops/s
# Warmup Iteration   4: 1791545.784 ops/s
# Warmup Iteration   5: 2141068.311 ops/s
# Warmup Iteration   6: 2124912.704 ops/s
# Warmup Iteration   7: 2159195.676 ops/s
# Warmup Iteration   8: 2147762.542 ops/s
# Warmup Iteration   9: 2167198.558 ops/s
# Warmup Iteration  10: 2155297.696 ops/s
# Warmup Iteration  11: 2163316.986 ops/s
# Warmup Iteration  12: 2166953.729 ops/s
# Warmup Iteration  13: 2168798.009 ops/s
# Warmup Iteration  14: 2159514.057 ops/s
# Warmup Iteration  15: 2142465.813 ops/s
# Warmup Iteration  16: 2168509.585 ops/s
# Warmup Iteration  17: 2161291.341 ops/s
# Warmup Iteration  18: 2173192.389 ops/s
# Warmup Iteration  19: 2179389.189 ops/s
# Warmup Iteration  20: 2160537.056 ops/s
# Warmup Iteration  21: 2164222.430 ops/s
# Warmup Iteration  22: 2176477.195 ops/s
# Warmup Iteration  23: 2171407.749 ops/s
# Warmup Iteration  24: 2174629.319 ops/s
# Warmup Iteration  25: 2148313.504 ops/s
# Warmup Iteration  26: 2161220.670 ops/s
# Warmup Iteration  27: 2171287.893 ops/s
# Warmup Iteration  28: 2169687.533 ops/s
# Warmup Iteration  29: 2175625.867 ops/s
# Warmup Iteration  30: 2124887.983 ops/s
Iteration   1: 2143368.535 ops/s
Iteration   2: 2158655.089 ops/s
Iteration   3: 2155185.122 ops/s
Iteration   4: 2156429.522 ops/s
Iteration   5: 2182472.805 ops/s
Iteration   6: 2143045.084 ops/s
Iteration   7: 2171724.038 ops/s
Iteration   8: 2174330.600 ops/s
Iteration   9: 2153362.408 ops/s
Iteration  10: 2166429.589 ops/s
Iteration  11: 2165254.914 ops/s
Iteration  12: 2174289.982 ops/s
Iteration  13: 2159336.870 ops/s
Iteration  14: 2170497.778 ops/s
Iteration  15: 2154468.674 ops/s
Iteration  16: 2152522.568 ops/s
Iteration  17: 2129020.348 ops/s
Iteration  18: 2150822.502 ops/s
Iteration  19: 2183810.156 ops/s
Iteration  20: 2169781.535 ops/s
Iteration  21: 2160106.514 ops/s
Iteration  22: 2167262.209 ops/s
Iteration  23: 2153172.274 ops/s
Iteration  24: 2161842.899 ops/s
Iteration  25: 2162564.698 ops/s
Iteration  26: 2174729.811 ops/s
Iteration  27: 2125814.962 ops/s
Iteration  28: 2163101.823 ops/s
Iteration  29: 2134629.964 ops/s
Iteration  30: 2163354.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIf":
  2159379.603 ±(99.9%) 9463.591 ops/s [Average]
  (min, avg, max) = (2125814.962, 2159379.603, 2183810.156), stdev = 14164.659
  CI (99.9%): [2149916.012, 2168843.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectIf  thrpt   30  2159379.603 ± 9463.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556030.600 ops/s
# Warmup Iteration   2: 1159576.272 ops/s
# Warmup Iteration   3: 1201862.156 ops/s
# Warmup Iteration   4: 1213558.073 ops/s
# Warmup Iteration   5: 998705.367 ops/s
# Warmup Iteration   6: 1207370.381 ops/s
# Warmup Iteration   7: 1204889.266 ops/s
# Warmup Iteration   8: 1206341.155 ops/s
# Warmup Iteration   9: 1213984.529 ops/s
# Warmup Iteration  10: 1223041.868 ops/s
# Warmup Iteration  11: 1214576.789 ops/s
# Warmup Iteration  12: 1207005.514 ops/s
# Warmup Iteration  13: 1211026.618 ops/s
# Warmup Iteration  14: 1202414.303 ops/s
# Warmup Iteration  15: 1188567.363 ops/s
# Warmup Iteration  16: 1196742.079 ops/s
# Warmup Iteration  17: 1208677.114 ops/s
# Warmup Iteration  18: 1192962.554 ops/s
# Warmup Iteration  19: 1215257.064 ops/s
# Warmup Iteration  20: 1217291.290 ops/s
# Warmup Iteration  21: 1214174.951 ops/s
# Warmup Iteration  22: 1193318.128 ops/s
# Warmup Iteration  23: 1207835.799 ops/s
# Warmup Iteration  24: 1208699.519 ops/s
# Warmup Iteration  25: 1207371.399 ops/s
# Warmup Iteration  26: 1196646.346 ops/s
# Warmup Iteration  27: 1215570.961 ops/s
# Warmup Iteration  28: 1210740.185 ops/s
# Warmup Iteration  29: 1209300.898 ops/s
# Warmup Iteration  30: 1211995.564 ops/s
Iteration   1: 1222898.555 ops/s
Iteration   2: 1208804.591 ops/s
Iteration   3: 1198893.893 ops/s
Iteration   4: 1202672.880 ops/s
Iteration   5: 1208845.132 ops/s
Iteration   6: 1198359.121 ops/s
Iteration   7: 1206458.856 ops/s
Iteration   8: 1205051.336 ops/s
Iteration   9: 1221241.077 ops/s
Iteration  10: 1219458.614 ops/s
Iteration  11: 1207976.236 ops/s
Iteration  12: 1205402.820 ops/s
Iteration  13: 1211248.349 ops/s
Iteration  14: 1215190.898 ops/s
Iteration  15: 1218954.216 ops/s
Iteration  16: 1210780.158 ops/s
Iteration  17: 1186082.420 ops/s
Iteration  18: 1210163.858 ops/s
Iteration  19: 1190537.995 ops/s
Iteration  20: 1221752.822 ops/s
Iteration  21: 1211522.622 ops/s
Iteration  22: 1202989.450 ops/s
Iteration  23: 1214095.141 ops/s
Iteration  24: 1191543.448 ops/s
Iteration  25: 1209643.315 ops/s
Iteration  26: 1221868.182 ops/s
Iteration  27: 1208934.521 ops/s
Iteration  28: 1207121.695 ops/s
Iteration  29: 1216679.075 ops/s
Iteration  30: 1213192.547 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectInt":
  1208945.461 ±(99.9%) 6251.166 ops/s [Average]
  (min, avg, max) = (1186082.420, 1208945.461, 1222898.555), stdev = 9356.452
  CI (99.9%): [1202694.295, 1215196.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectInt  thrpt   30  1208945.461 ± 6251.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1562034.852 ops/s
# Warmup Iteration   2: 3770198.267 ops/s
# Warmup Iteration   3: 3851825.519 ops/s
# Warmup Iteration   4: 3213643.527 ops/s
# Warmup Iteration   5: 3876293.775 ops/s
# Warmup Iteration   6: 3834999.731 ops/s
# Warmup Iteration   7: 3832972.370 ops/s
# Warmup Iteration   8: 3881804.553 ops/s
# Warmup Iteration   9: 3871629.654 ops/s
# Warmup Iteration  10: 3872004.803 ops/s
# Warmup Iteration  11: 3845371.614 ops/s
# Warmup Iteration  12: 3868036.498 ops/s
# Warmup Iteration  13: 3876730.487 ops/s
# Warmup Iteration  14: 3873438.230 ops/s
# Warmup Iteration  15: 3857647.519 ops/s
# Warmup Iteration  16: 3865057.811 ops/s
# Warmup Iteration  17: 3868030.721 ops/s
# Warmup Iteration  18: 3871442.106 ops/s
# Warmup Iteration  19: 3874580.815 ops/s
# Warmup Iteration  20: 3851114.154 ops/s
# Warmup Iteration  21: 3864405.399 ops/s
# Warmup Iteration  22: 3869631.320 ops/s
# Warmup Iteration  23: 3857930.715 ops/s
# Warmup Iteration  24: 3861081.198 ops/s
# Warmup Iteration  25: 3841187.730 ops/s
# Warmup Iteration  26: 3859245.470 ops/s
# Warmup Iteration  27: 3878694.744 ops/s
# Warmup Iteration  28: 3843243.084 ops/s
# Warmup Iteration  29: 3838220.823 ops/s
# Warmup Iteration  30: 3866933.598 ops/s
Iteration   1: 3873250.003 ops/s
Iteration   2: 3826950.067 ops/s
Iteration   3: 3871768.477 ops/s
Iteration   4: 3871619.629 ops/s
Iteration   5: 3783456.949 ops/s
Iteration   6: 3876201.213 ops/s
Iteration   7: 3875105.191 ops/s
Iteration   8: 3874646.182 ops/s
Iteration   9: 3880148.129 ops/s
Iteration  10: 3863975.720 ops/s
Iteration  11: 3868712.310 ops/s
Iteration  12: 3856198.837 ops/s
Iteration  13: 3880366.464 ops/s
Iteration  14: 3875867.260 ops/s
Iteration  15: 3873930.906 ops/s
Iteration  16: 3875256.416 ops/s
Iteration  17: 3828765.508 ops/s
Iteration  18: 3849300.461 ops/s
Iteration  19: 3806770.322 ops/s
Iteration  20: 3810126.184 ops/s
Iteration  21: 3873380.846 ops/s
Iteration  22: 3872388.962 ops/s
Iteration  23: 3849605.385 ops/s
Iteration  24: 3874409.835 ops/s
Iteration  25: 3877535.047 ops/s
Iteration  26: 3809362.647 ops/s
Iteration  27: 3869438.981 ops/s
Iteration  28: 3873220.422 ops/s
Iteration  29: 3799857.778 ops/s
Iteration  30: 3879787.528 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget":
  3856713.455 ±(99.9%) 19055.276 ops/s [Average]
  (min, avg, max) = (3783456.949, 3856713.455, 3880366.464), stdev = 28521.043
  CI (99.9%): [3837658.179, 3875768.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  3856713.455 ± 19055.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1278083.480 ops/s
# Warmup Iteration   2: 3085492.005 ops/s
# Warmup Iteration   3: 3085490.497 ops/s
# Warmup Iteration   4: 2591658.715 ops/s
# Warmup Iteration   5: 3134139.417 ops/s
# Warmup Iteration   6: 3138981.792 ops/s
# Warmup Iteration   7: 3079567.311 ops/s
# Warmup Iteration   8: 3093603.297 ops/s
# Warmup Iteration   9: 3130010.258 ops/s
# Warmup Iteration  10: 3104313.087 ops/s
# Warmup Iteration  11: 3128294.960 ops/s
# Warmup Iteration  12: 3108173.528 ops/s
# Warmup Iteration  13: 3127583.799 ops/s
# Warmup Iteration  14: 3141036.918 ops/s
# Warmup Iteration  15: 3133929.260 ops/s
# Warmup Iteration  16: 3102441.070 ops/s
# Warmup Iteration  17: 3138144.151 ops/s
# Warmup Iteration  18: 3138460.529 ops/s
# Warmup Iteration  19: 3123467.336 ops/s
# Warmup Iteration  20: 3135229.624 ops/s
# Warmup Iteration  21: 3089935.372 ops/s
# Warmup Iteration  22: 3138088.848 ops/s
# Warmup Iteration  23: 3121593.546 ops/s
# Warmup Iteration  24: 3142808.492 ops/s
# Warmup Iteration  25: 3127889.645 ops/s
# Warmup Iteration  26: 3114326.531 ops/s
# Warmup Iteration  27: 3105403.766 ops/s
# Warmup Iteration  28: 3133142.932 ops/s
# Warmup Iteration  29: 3138728.020 ops/s
# Warmup Iteration  30: 3130759.999 ops/s
Iteration   1: 3135498.567 ops/s
Iteration   2: 3116637.196 ops/s
Iteration   3: 3130375.852 ops/s
Iteration   4: 3136515.105 ops/s
Iteration   5: 3040673.644 ops/s
Iteration   6: 3128382.433 ops/s
Iteration   7: 3100164.099 ops/s
Iteration   8: 3134074.140 ops/s
Iteration   9: 3135034.558 ops/s
Iteration  10: 3108439.484 ops/s
Iteration  11: 3134663.257 ops/s
Iteration  12: 3134819.577 ops/s
Iteration  13: 3132354.788 ops/s
Iteration  14: 3128969.173 ops/s
Iteration  15: 3138799.448 ops/s
Iteration  16: 3124586.542 ops/s
Iteration  17: 3134750.662 ops/s
Iteration  18: 3133911.452 ops/s
Iteration  19: 3128347.801 ops/s
Iteration  20: 3134294.198 ops/s
Iteration  21: 3131392.503 ops/s
Iteration  22: 3146528.545 ops/s
Iteration  23: 3128069.678 ops/s
Iteration  24: 3119681.970 ops/s
Iteration  25: 3101692.965 ops/s
Iteration  26: 3131464.341 ops/s
Iteration  27: 3077782.101 ops/s
Iteration  28: 3134356.623 ops/s
Iteration  29: 3133478.042 ops/s
Iteration  30: 3092790.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectIntWithTarget":
  3122950.968 ±(99.9%) 14515.113 ops/s [Average]
  (min, avg, max) = (3040673.644, 3122950.968, 3146528.545), stdev = 21725.540
  CI (99.9%): [3108435.855, 3137466.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3122950.968 ± 14515.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496262.198 ops/s
# Warmup Iteration   2: 1098793.020 ops/s
# Warmup Iteration   3: 1111944.817 ops/s
# Warmup Iteration   4: 940779.617 ops/s
# Warmup Iteration   5: 1107265.653 ops/s
# Warmup Iteration   6: 1107443.165 ops/s
# Warmup Iteration   7: 1106432.430 ops/s
# Warmup Iteration   8: 1114435.144 ops/s
# Warmup Iteration   9: 1103006.929 ops/s
# Warmup Iteration  10: 1112653.031 ops/s
# Warmup Iteration  11: 1112335.057 ops/s
# Warmup Iteration  12: 1113927.421 ops/s
# Warmup Iteration  13: 1087107.850 ops/s
# Warmup Iteration  14: 1110976.450 ops/s
# Warmup Iteration  15: 1111128.938 ops/s
# Warmup Iteration  16: 1103765.472 ops/s
# Warmup Iteration  17: 1105519.050 ops/s
# Warmup Iteration  18: 1101807.820 ops/s
# Warmup Iteration  19: 1111620.181 ops/s
# Warmup Iteration  20: 1099187.974 ops/s
# Warmup Iteration  21: 1098973.717 ops/s
# Warmup Iteration  22: 1105897.453 ops/s
# Warmup Iteration  23: 1103197.255 ops/s
# Warmup Iteration  24: 1105838.446 ops/s
# Warmup Iteration  25: 1102205.727 ops/s
# Warmup Iteration  26: 1113268.685 ops/s
# Warmup Iteration  27: 1095024.949 ops/s
# Warmup Iteration  28: 1111199.050 ops/s
# Warmup Iteration  29: 1108684.689 ops/s
# Warmup Iteration  30: 1115482.484 ops/s
Iteration   1: 1113260.181 ops/s
Iteration   2: 1111371.238 ops/s
Iteration   3: 1094275.717 ops/s
Iteration   4: 1113405.370 ops/s
Iteration   5: 1106266.805 ops/s
Iteration   6: 1106298.595 ops/s
Iteration   7: 1111064.286 ops/s
Iteration   8: 1101697.941 ops/s
Iteration   9: 1117018.155 ops/s
Iteration  10: 1099214.251 ops/s
Iteration  11: 1107405.661 ops/s
Iteration  12: 1108756.477 ops/s
Iteration  13: 1107100.025 ops/s
Iteration  14: 1106454.231 ops/s
Iteration  15: 1115054.994 ops/s
Iteration  16: 1098122.699 ops/s
Iteration  17: 1112725.573 ops/s
Iteration  18: 1107177.760 ops/s
Iteration  19: 1119066.480 ops/s
Iteration  20: 1112740.544 ops/s
Iteration  21: 1104968.411 ops/s
Iteration  22: 1109390.066 ops/s
Iteration  23: 1104470.382 ops/s
Iteration  24: 1137076.270 ops/s
Iteration  25: 1116185.348 ops/s
Iteration  26: 1106997.376 ops/s
Iteration  27: 1114826.564 ops/s
Iteration  28: 1112521.826 ops/s
Iteration  29: 1098786.776 ops/s
Iteration  30: 1110912.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLong":
  1109487.088 ±(99.9%) 5293.720 ops/s [Average]
  (min, avg, max) = (1094275.717, 1109487.088, 1137076.270), stdev = 7923.392
  CI (99.9%): [1104193.367, 1114780.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectLong  thrpt   30  1109487.088 ± 5293.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1525555.095 ops/s
# Warmup Iteration   2: 3513113.631 ops/s
# Warmup Iteration   3: 2927213.191 ops/s
# Warmup Iteration   4: 3494775.758 ops/s
# Warmup Iteration   5: 3505125.220 ops/s
# Warmup Iteration   6: 3509708.697 ops/s
# Warmup Iteration   7: 3510775.315 ops/s
# Warmup Iteration   8: 3489883.100 ops/s
# Warmup Iteration   9: 3521422.549 ops/s
# Warmup Iteration  10: 3507653.562 ops/s
# Warmup Iteration  11: 3515713.420 ops/s
# Warmup Iteration  12: 3510583.694 ops/s
# Warmup Iteration  13: 3509470.436 ops/s
# Warmup Iteration  14: 3515791.697 ops/s
# Warmup Iteration  15: 3528519.507 ops/s
# Warmup Iteration  16: 3422836.292 ops/s
# Warmup Iteration  17: 3518865.339 ops/s
# Warmup Iteration  18: 3493930.636 ops/s
# Warmup Iteration  19: 3523374.868 ops/s
# Warmup Iteration  20: 3493555.761 ops/s
# Warmup Iteration  21: 3508836.323 ops/s
# Warmup Iteration  22: 3509931.339 ops/s
# Warmup Iteration  23: 3512492.414 ops/s
# Warmup Iteration  24: 3520849.294 ops/s
# Warmup Iteration  25: 3524594.130 ops/s
# Warmup Iteration  26: 3516896.550 ops/s
# Warmup Iteration  27: 3525276.656 ops/s
# Warmup Iteration  28: 3515333.725 ops/s
# Warmup Iteration  29: 3502143.988 ops/s
# Warmup Iteration  30: 3495681.473 ops/s
Iteration   1: 3524484.483 ops/s
Iteration   2: 3507213.171 ops/s
Iteration   3: 3514298.033 ops/s
Iteration   4: 3469736.293 ops/s
Iteration   5: 3481766.167 ops/s
Iteration   6: 3511097.632 ops/s
Iteration   7: 3502440.557 ops/s
Iteration   8: 3509548.250 ops/s
Iteration   9: 3497751.775 ops/s
Iteration  10: 3522565.765 ops/s
Iteration  11: 3527084.380 ops/s
Iteration  12: 3510364.553 ops/s
Iteration  13: 3399062.065 ops/s
Iteration  14: 3520231.394 ops/s
Iteration  15: 3531414.297 ops/s
Iteration  16: 3528912.075 ops/s
Iteration  17: 3505810.366 ops/s
Iteration  18: 3530285.857 ops/s
Iteration  19: 3415174.528 ops/s
Iteration  20: 3515158.896 ops/s
Iteration  21: 3521279.721 ops/s
Iteration  22: 3516376.589 ops/s
Iteration  23: 3503501.429 ops/s
Iteration  24: 3534118.772 ops/s
Iteration  25: 3523221.605 ops/s
Iteration  26: 3511225.497 ops/s
Iteration  27: 3527398.057 ops/s
Iteration  28: 3497482.775 ops/s
Iteration  29: 3511640.540 ops/s
Iteration  30: 3517691.216 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget":
  3506277.891 ±(99.9%) 20409.533 ops/s [Average]
  (min, avg, max) = (3399062.065, 3506277.891, 3534118.772), stdev = 30548.031
  CI (99.9%): [3485868.358, 3526687.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  3506277.891 ± 20409.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1171777.696 ops/s
# Warmup Iteration   2: 2883423.289 ops/s
# Warmup Iteration   3: 2709326.274 ops/s
# Warmup Iteration   4: 2677192.307 ops/s
# Warmup Iteration   5: 2934319.232 ops/s
# Warmup Iteration   6: 2942842.905 ops/s
# Warmup Iteration   7: 2944790.673 ops/s
# Warmup Iteration   8: 2933523.859 ops/s
# Warmup Iteration   9: 2937726.277 ops/s
# Warmup Iteration  10: 2936523.485 ops/s
# Warmup Iteration  11: 2935713.936 ops/s
# Warmup Iteration  12: 2941695.345 ops/s
# Warmup Iteration  13: 2938480.584 ops/s
# Warmup Iteration  14: 2914258.326 ops/s
# Warmup Iteration  15: 2920284.568 ops/s
# Warmup Iteration  16: 2915388.909 ops/s
# Warmup Iteration  17: 2941366.219 ops/s
# Warmup Iteration  18: 2933919.212 ops/s
# Warmup Iteration  19: 2924997.026 ops/s
# Warmup Iteration  20: 2918556.426 ops/s
# Warmup Iteration  21: 2937667.250 ops/s
# Warmup Iteration  22: 2942167.394 ops/s
# Warmup Iteration  23: 2941270.135 ops/s
# Warmup Iteration  24: 2908228.728 ops/s
# Warmup Iteration  25: 2920662.335 ops/s
# Warmup Iteration  26: 2933366.325 ops/s
# Warmup Iteration  27: 2940933.089 ops/s
# Warmup Iteration  28: 2939792.030 ops/s
# Warmup Iteration  29: 2935363.022 ops/s
# Warmup Iteration  30: 2926948.553 ops/s
Iteration   1: 2949482.217 ops/s
Iteration   2: 2934916.059 ops/s
Iteration   3: 2918636.003 ops/s
Iteration   4: 2943408.415 ops/s
Iteration   5: 2898303.441 ops/s
Iteration   6: 2909545.265 ops/s
Iteration   7: 2935623.091 ops/s
Iteration   8: 2937964.736 ops/s
Iteration   9: 2923321.429 ops/s
Iteration  10: 2948527.802 ops/s
Iteration  11: 2902745.190 ops/s
Iteration  12: 2915655.717 ops/s
Iteration  13: 2946515.229 ops/s
Iteration  14: 2888707.588 ops/s
Iteration  15: 2935237.834 ops/s
Iteration  16: 2936215.419 ops/s
Iteration  17: 2889809.781 ops/s
Iteration  18: 2949026.870 ops/s
Iteration  19: 2935989.389 ops/s
Iteration  20: 2943356.335 ops/s
Iteration  21: 2923798.133 ops/s
Iteration  22: 2936811.491 ops/s
Iteration  23: 2927855.409 ops/s
Iteration  24: 2944367.353 ops/s
Iteration  25: 2940233.470 ops/s
Iteration  26: 2884186.112 ops/s
Iteration  27: 2932820.123 ops/s
Iteration  28: 2944635.272 ops/s
Iteration  29: 2939436.375 ops/s
Iteration  30: 2888307.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectLongWithTarget":
  2926847.965 ±(99.9%) 13620.997 ops/s [Average]
  (min, avg, max) = (2884186.112, 2926847.965, 2949482.217), stdev = 20387.269
  CI (99.9%): [2913226.968, 2940468.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2926847.965 ± 13620.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 572626.567 ops/s
# Warmup Iteration   2: 1197744.997 ops/s
# Warmup Iteration   3: 1248989.820 ops/s
# Warmup Iteration   4: 1237187.569 ops/s
# Warmup Iteration   5: 1052966.467 ops/s
# Warmup Iteration   6: 1251314.821 ops/s
# Warmup Iteration   7: 1243517.182 ops/s
# Warmup Iteration   8: 1245174.973 ops/s
# Warmup Iteration   9: 1247452.014 ops/s
# Warmup Iteration  10: 1255709.382 ops/s
# Warmup Iteration  11: 1256242.000 ops/s
# Warmup Iteration  12: 1257790.178 ops/s
# Warmup Iteration  13: 1255682.053 ops/s
# Warmup Iteration  14: 1255398.905 ops/s
# Warmup Iteration  15: 1258930.128 ops/s
# Warmup Iteration  16: 1242248.329 ops/s
# Warmup Iteration  17: 1258465.007 ops/s
# Warmup Iteration  18: 1253637.949 ops/s
# Warmup Iteration  19: 1256141.630 ops/s
# Warmup Iteration  20: 1253453.743 ops/s
# Warmup Iteration  21: 1255794.795 ops/s
# Warmup Iteration  22: 1241155.957 ops/s
# Warmup Iteration  23: 1256449.212 ops/s
# Warmup Iteration  24: 1255594.919 ops/s
# Warmup Iteration  25: 1257197.544 ops/s
# Warmup Iteration  26: 1242929.020 ops/s
# Warmup Iteration  27: 1259335.784 ops/s
# Warmup Iteration  28: 1240423.763 ops/s
# Warmup Iteration  29: 1256666.082 ops/s
# Warmup Iteration  30: 1229724.576 ops/s
Iteration   1: 1235004.781 ops/s
Iteration   2: 1256583.226 ops/s
Iteration   3: 1255761.198 ops/s
Iteration   4: 1259595.981 ops/s
Iteration   5: 1250422.086 ops/s
Iteration   6: 1256763.323 ops/s
Iteration   7: 1244509.791 ops/s
Iteration   8: 1249509.202 ops/s
Iteration   9: 1235065.166 ops/s
Iteration  10: 1250591.592 ops/s
Iteration  11: 1249348.523 ops/s
Iteration  12: 1251985.824 ops/s
Iteration  13: 1229412.612 ops/s
Iteration  14: 1251833.597 ops/s
Iteration  15: 1258251.229 ops/s
Iteration  16: 1248743.692 ops/s
Iteration  17: 1253223.080 ops/s
Iteration  18: 1255930.203 ops/s
Iteration  19: 1250050.245 ops/s
Iteration  20: 1236779.993 ops/s
Iteration  21: 1255495.179 ops/s
Iteration  22: 1254529.274 ops/s
Iteration  23: 1255222.926 ops/s
Iteration  24: 1255505.997 ops/s
Iteration  25: 1251045.838 ops/s
Iteration  26: 1250747.195 ops/s
Iteration  27: 1256305.012 ops/s
Iteration  28: 1253686.268 ops/s
Iteration  29: 1256542.961 ops/s
Iteration  30: 1260359.099 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShort":
  1250960.170 ±(99.9%) 5116.094 ops/s [Average]
  (min, avg, max) = (1229412.612, 1250960.170, 1260359.099), stdev = 7657.529
  CI (99.9%): [1245844.076, 1256076.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectShort  thrpt   30  1250960.170 ± 5116.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1689038.655 ops/s
# Warmup Iteration   2: 3849957.478 ops/s
# Warmup Iteration   3: 3833976.240 ops/s
# Warmup Iteration   4: 3245809.364 ops/s
# Warmup Iteration   5: 3855158.568 ops/s
# Warmup Iteration   6: 3887611.758 ops/s
# Warmup Iteration   7: 3886986.003 ops/s
# Warmup Iteration   8: 3881814.766 ops/s
# Warmup Iteration   9: 3888212.327 ops/s
# Warmup Iteration  10: 3844396.853 ops/s
# Warmup Iteration  11: 3855821.868 ops/s
# Warmup Iteration  12: 3888784.748 ops/s
# Warmup Iteration  13: 3857574.141 ops/s
# Warmup Iteration  14: 3868974.726 ops/s
# Warmup Iteration  15: 3877024.296 ops/s
# Warmup Iteration  16: 3851371.874 ops/s
# Warmup Iteration  17: 3824187.284 ops/s
# Warmup Iteration  18: 3831704.168 ops/s
# Warmup Iteration  19: 3827189.463 ops/s
# Warmup Iteration  20: 3824282.758 ops/s
# Warmup Iteration  21: 3853832.546 ops/s
# Warmup Iteration  22: 3858342.009 ops/s
# Warmup Iteration  23: 3835363.590 ops/s
# Warmup Iteration  24: 3858300.285 ops/s
# Warmup Iteration  25: 3860847.243 ops/s
# Warmup Iteration  26: 3842101.234 ops/s
# Warmup Iteration  27: 3864199.329 ops/s
# Warmup Iteration  28: 3864898.062 ops/s
# Warmup Iteration  29: 3866083.662 ops/s
# Warmup Iteration  30: 3832719.316 ops/s
Iteration   1: 3876890.337 ops/s
Iteration   2: 3857416.456 ops/s
Iteration   3: 3835848.543 ops/s
Iteration   4: 3859697.139 ops/s
Iteration   5: 3831708.650 ops/s
Iteration   6: 3794974.323 ops/s
Iteration   7: 3792206.766 ops/s
Iteration   8: 3860479.934 ops/s
Iteration   9: 3854199.275 ops/s
Iteration  10: 3867072.397 ops/s
Iteration  11: 3815179.528 ops/s
Iteration  12: 3809376.179 ops/s
Iteration  13: 3853133.441 ops/s
Iteration  14: 3867774.003 ops/s
Iteration  15: 3798885.896 ops/s
Iteration  16: 3867239.503 ops/s
Iteration  17: 3871405.228 ops/s
Iteration  18: 3871597.295 ops/s
Iteration  19: 3835468.361 ops/s
Iteration  20: 3805947.946 ops/s
Iteration  21: 3874174.605 ops/s
Iteration  22: 3798332.095 ops/s
Iteration  23: 3854910.676 ops/s
Iteration  24: 3854568.588 ops/s
Iteration  25: 3872584.840 ops/s
Iteration  26: 3871399.324 ops/s
Iteration  27: 3861589.979 ops/s
Iteration  28: 3829690.785 ops/s
Iteration  29: 3864141.743 ops/s
Iteration  30: 3776341.779 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget":
  3842807.854 ±(99.9%) 20103.192 ops/s [Average]
  (min, avg, max) = (3776341.779, 3842807.854, 3876890.337), stdev = 30089.513
  CI (99.9%): [3822704.662, 3862911.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  3842807.854 ± 20103.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1402022.279 ops/s
# Warmup Iteration   2: 3299222.297 ops/s
# Warmup Iteration   3: 3333504.621 ops/s
# Warmup Iteration   4: 2791735.453 ops/s
# Warmup Iteration   5: 3331376.023 ops/s
# Warmup Iteration   6: 3317883.536 ops/s
# Warmup Iteration   7: 3304886.175 ops/s
# Warmup Iteration   8: 3307045.549 ops/s
# Warmup Iteration   9: 3327627.068 ops/s
# Warmup Iteration  10: 3333706.179 ops/s
# Warmup Iteration  11: 3315318.429 ops/s
# Warmup Iteration  12: 3319001.537 ops/s
# Warmup Iteration  13: 3337571.040 ops/s
# Warmup Iteration  14: 3329048.424 ops/s
# Warmup Iteration  15: 3310777.754 ops/s
# Warmup Iteration  16: 3331839.260 ops/s
# Warmup Iteration  17: 3327691.060 ops/s
# Warmup Iteration  18: 3309344.042 ops/s
# Warmup Iteration  19: 3334421.148 ops/s
# Warmup Iteration  20: 3323322.794 ops/s
# Warmup Iteration  21: 3333552.879 ops/s
# Warmup Iteration  22: 3337362.716 ops/s
# Warmup Iteration  23: 3311194.543 ops/s
# Warmup Iteration  24: 3297056.296 ops/s
# Warmup Iteration  25: 3335405.713 ops/s
# Warmup Iteration  26: 3337092.775 ops/s
# Warmup Iteration  27: 3323776.208 ops/s
# Warmup Iteration  28: 3333812.983 ops/s
# Warmup Iteration  29: 3332913.712 ops/s
# Warmup Iteration  30: 3306915.257 ops/s
Iteration   1: 3334977.129 ops/s
Iteration   2: 3317442.461 ops/s
Iteration   3: 3327996.196 ops/s
Iteration   4: 3331577.168 ops/s
Iteration   5: 3331963.894 ops/s
Iteration   6: 3341384.419 ops/s
Iteration   7: 3326147.368 ops/s
Iteration   8: 3323710.172 ops/s
Iteration   9: 3338998.873 ops/s
Iteration  10: 3304885.143 ops/s
Iteration  11: 3337646.386 ops/s
Iteration  12: 3328211.448 ops/s
Iteration  13: 3332969.807 ops/s
Iteration  14: 3322357.359 ops/s
Iteration  15: 3334567.488 ops/s
Iteration  16: 3331832.915 ops/s
Iteration  17: 3257608.439 ops/s
Iteration  18: 3333263.921 ops/s
Iteration  19: 3329472.374 ops/s
Iteration  20: 3329536.469 ops/s
Iteration  21: 3317439.091 ops/s
Iteration  22: 3340516.372 ops/s
Iteration  23: 3335022.781 ops/s
Iteration  24: 3351584.354 ops/s
Iteration  25: 3324499.013 ops/s
Iteration  26: 3334755.248 ops/s
Iteration  27: 3325699.345 ops/s
Iteration  28: 3344918.885 ops/s
Iteration  29: 3326129.724 ops/s
Iteration  30: 3332279.974 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectShortWithTarget":
  3328313.140 ±(99.9%) 10731.201 ops/s [Average]
  (min, avg, max) = (3257608.439, 3328313.140, 3351584.354), stdev = 16061.958
  CI (99.9%): [3317581.939, 3339044.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  3328313.140 ± 10731.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119504.814 ops/s
# Warmup Iteration   2: 204492.439 ops/s
# Warmup Iteration   3: 259996.314 ops/s
# Warmup Iteration   4: 259121.802 ops/s
# Warmup Iteration   5: 260601.796 ops/s
# Warmup Iteration   6: 260583.352 ops/s
# Warmup Iteration   7: 214173.211 ops/s
# Warmup Iteration   8: 259938.487 ops/s
# Warmup Iteration   9: 260257.198 ops/s
# Warmup Iteration  10: 259852.611 ops/s
# Warmup Iteration  11: 260154.893 ops/s
# Warmup Iteration  12: 257796.807 ops/s
# Warmup Iteration  13: 257929.377 ops/s
# Warmup Iteration  14: 260339.395 ops/s
# Warmup Iteration  15: 260690.604 ops/s
# Warmup Iteration  16: 258445.037 ops/s
# Warmup Iteration  17: 258402.343 ops/s
# Warmup Iteration  18: 260147.714 ops/s
# Warmup Iteration  19: 260295.893 ops/s
# Warmup Iteration  20: 259644.219 ops/s
# Warmup Iteration  21: 257763.447 ops/s
# Warmup Iteration  22: 259657.150 ops/s
# Warmup Iteration  23: 260551.803 ops/s
# Warmup Iteration  24: 259998.356 ops/s
# Warmup Iteration  25: 260048.037 ops/s
# Warmup Iteration  26: 259666.829 ops/s
# Warmup Iteration  27: 260477.596 ops/s
# Warmup Iteration  28: 258409.562 ops/s
# Warmup Iteration  29: 260389.060 ops/s
# Warmup Iteration  30: 259593.566 ops/s
Iteration   1: 260579.589 ops/s
Iteration   2: 260669.151 ops/s
Iteration   3: 260567.859 ops/s
Iteration   4: 259798.837 ops/s
Iteration   5: 260502.530 ops/s
Iteration   6: 251957.852 ops/s
Iteration   7: 260013.053 ops/s
Iteration   8: 260335.988 ops/s
Iteration   9: 259888.429 ops/s
Iteration  10: 260382.895 ops/s
Iteration  11: 259565.729 ops/s
Iteration  12: 259962.361 ops/s
Iteration  13: 260349.378 ops/s
Iteration  14: 260258.143 ops/s
Iteration  15: 260517.790 ops/s
Iteration  16: 254314.285 ops/s
Iteration  17: 260572.316 ops/s
Iteration  18: 259935.734 ops/s
Iteration  19: 255414.975 ops/s
Iteration  20: 260654.771 ops/s
Iteration  21: 259701.028 ops/s
Iteration  22: 260114.647 ops/s
Iteration  23: 260298.528 ops/s
Iteration  24: 259950.328 ops/s
Iteration  25: 256650.784 ops/s
Iteration  26: 255926.573 ops/s
Iteration  27: 256815.372 ops/s
Iteration  28: 260180.237 ops/s
Iteration  29: 260437.556 ops/s
Iteration  30: 260742.628 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectTarget":
  259235.312 ±(99.9%) 1480.925 ops/s [Average]
  (min, avg, max) = (251957.852, 259235.312, 260742.628), stdev = 2216.579
  CI (99.9%): [257754.387, 260716.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectTarget  thrpt   30  259235.312 ± 1480.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 955991.297 ops/s
# Warmup Iteration   2: 1873693.167 ops/s
# Warmup Iteration   3: 2077386.971 ops/s
# Warmup Iteration   4: 2095278.643 ops/s
# Warmup Iteration   5: 1724540.414 ops/s
# Warmup Iteration   6: 2085717.108 ops/s
# Warmup Iteration   7: 2093874.646 ops/s
# Warmup Iteration   8: 2094180.269 ops/s
# Warmup Iteration   9: 2031527.087 ops/s
# Warmup Iteration  10: 2088252.424 ops/s
# Warmup Iteration  11: 2091307.805 ops/s
# Warmup Iteration  12: 2082375.322 ops/s
# Warmup Iteration  13: 2091351.761 ops/s
# Warmup Iteration  14: 2095223.600 ops/s
# Warmup Iteration  15: 2086159.510 ops/s
# Warmup Iteration  16: 2072798.867 ops/s
# Warmup Iteration  17: 2090163.796 ops/s
# Warmup Iteration  18: 2075848.965 ops/s
# Warmup Iteration  19: 2077873.408 ops/s
# Warmup Iteration  20: 2092511.082 ops/s
# Warmup Iteration  21: 2078568.068 ops/s
# Warmup Iteration  22: 2091686.761 ops/s
# Warmup Iteration  23: 2060900.980 ops/s
# Warmup Iteration  24: 2091167.851 ops/s
# Warmup Iteration  25: 2092909.242 ops/s
# Warmup Iteration  26: 2092077.374 ops/s
# Warmup Iteration  27: 2094655.276 ops/s
# Warmup Iteration  28: 2093479.165 ops/s
# Warmup Iteration  29: 2089221.613 ops/s
# Warmup Iteration  30: 2081638.739 ops/s
Iteration   1: 2092979.577 ops/s
Iteration   2: 2095170.579 ops/s
Iteration   3: 2066739.904 ops/s
Iteration   4: 2093443.027 ops/s
Iteration   5: 2065183.935 ops/s
Iteration   6: 2090633.668 ops/s
Iteration   7: 2095366.059 ops/s
Iteration   8: 2090304.986 ops/s
Iteration   9: 2093730.014 ops/s
Iteration  10: 2096660.884 ops/s
Iteration  11: 2096600.997 ops/s
Iteration  12: 2088461.948 ops/s
Iteration  13: 2094767.590 ops/s
Iteration  14: 2086094.511 ops/s
Iteration  15: 2059455.767 ops/s
Iteration  16: 2093177.772 ops/s
Iteration  17: 2093420.414 ops/s
Iteration  18: 2091874.394 ops/s
Iteration  19: 2097533.556 ops/s
Iteration  20: 2060082.935 ops/s
Iteration  21: 2093080.469 ops/s
Iteration  22: 2093864.149 ops/s
Iteration  23: 2093091.600 ops/s
Iteration  24: 2094567.077 ops/s
Iteration  25: 2097552.547 ops/s
Iteration  26: 2088659.684 ops/s
Iteration  27: 2096277.877 ops/s
Iteration  28: 2094539.542 ops/s
Iteration  29: 2093509.817 ops/s
Iteration  30: 2086933.644 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith":
  2089125.297 ±(99.9%) 7295.993 ops/s [Average]
  (min, avg, max) = (2059455.767, 2089125.297, 2097552.547), stdev = 10920.300
  CI (99.9%): [2081829.304, 2096421.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectWith  thrpt   30  2089125.297 ± 7295.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2236471.741 ops/s
# Warmup Iteration   2: 5466419.233 ops/s
# Warmup Iteration   3: 5393759.330 ops/s
# Warmup Iteration   4: 4626050.593 ops/s
# Warmup Iteration   5: 5552832.363 ops/s
# Warmup Iteration   6: 5547828.054 ops/s
# Warmup Iteration   7: 5568278.644 ops/s
# Warmup Iteration   8: 5519933.339 ops/s
# Warmup Iteration   9: 5554232.365 ops/s
# Warmup Iteration  10: 5570614.516 ops/s
# Warmup Iteration  11: 5522955.521 ops/s
# Warmup Iteration  12: 5554235.524 ops/s
# Warmup Iteration  13: 5526395.739 ops/s
# Warmup Iteration  14: 5567899.405 ops/s
# Warmup Iteration  15: 5541120.860 ops/s
# Warmup Iteration  16: 5558894.544 ops/s
# Warmup Iteration  17: 5561641.134 ops/s
# Warmup Iteration  18: 5569983.451 ops/s
# Warmup Iteration  19: 5557166.021 ops/s
# Warmup Iteration  20: 5567877.701 ops/s
# Warmup Iteration  21: 5551804.916 ops/s
# Warmup Iteration  22: 5561058.568 ops/s
# Warmup Iteration  23: 5528653.747 ops/s
# Warmup Iteration  24: 5556567.019 ops/s
# Warmup Iteration  25: 5567753.543 ops/s
# Warmup Iteration  26: 5556355.974 ops/s
# Warmup Iteration  27: 5547508.359 ops/s
# Warmup Iteration  28: 5527024.135 ops/s
# Warmup Iteration  29: 5527750.081 ops/s
# Warmup Iteration  30: 5538590.470 ops/s
Iteration   1: 5555960.091 ops/s
Iteration   2: 5574714.478 ops/s
Iteration   3: 5571383.640 ops/s
Iteration   4: 5578518.680 ops/s
Iteration   5: 5561518.351 ops/s
Iteration   6: 5567811.031 ops/s
Iteration   7: 5557161.613 ops/s
Iteration   8: 5581921.106 ops/s
Iteration   9: 5571470.620 ops/s
Iteration  10: 5562230.005 ops/s
Iteration  11: 5473120.058 ops/s
Iteration  12: 5559023.921 ops/s
Iteration  13: 5575172.152 ops/s
Iteration  14: 5462305.772 ops/s
Iteration  15: 5548865.923 ops/s
Iteration  16: 5562942.804 ops/s
Iteration  17: 5574799.994 ops/s
Iteration  18: 5571585.808 ops/s
Iteration  19: 5486853.556 ops/s
Iteration  20: 5565986.709 ops/s
Iteration  21: 5534924.250 ops/s
Iteration  22: 5553360.965 ops/s
Iteration  23: 5566732.533 ops/s
Iteration  24: 5568517.077 ops/s
Iteration  25: 5559025.691 ops/s
Iteration  26: 5561581.362 ops/s
Iteration  27: 5579601.596 ops/s
Iteration  28: 5576377.078 ops/s
Iteration  29: 5557692.098 ops/s
Iteration  30: 5551471.862 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndex":
  5555754.361 ±(99.9%) 19840.121 ops/s [Average]
  (min, avg, max) = (5462305.772, 5555754.361, 5581921.106), stdev = 29695.761
  CI (99.9%): [5535914.240, 5575594.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5555754.361 ± 19840.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577859.408 ops/s
# Warmup Iteration   2: 1429601.730 ops/s
# Warmup Iteration   3: 1468628.006 ops/s
# Warmup Iteration   4: 1222594.083 ops/s
# Warmup Iteration   5: 1471502.033 ops/s
# Warmup Iteration   6: 1458308.188 ops/s
# Warmup Iteration   7: 1461535.293 ops/s
# Warmup Iteration   8: 1468547.471 ops/s
# Warmup Iteration   9: 1471509.969 ops/s
# Warmup Iteration  10: 1472772.457 ops/s
# Warmup Iteration  11: 1462043.882 ops/s
# Warmup Iteration  12: 1471490.871 ops/s
# Warmup Iteration  13: 1474183.485 ops/s
# Warmup Iteration  14: 1446607.138 ops/s
# Warmup Iteration  15: 1461261.233 ops/s
# Warmup Iteration  16: 1465576.844 ops/s
# Warmup Iteration  17: 1459795.544 ops/s
# Warmup Iteration  18: 1462222.625 ops/s
# Warmup Iteration  19: 1474299.324 ops/s
# Warmup Iteration  20: 1473940.262 ops/s
# Warmup Iteration  21: 1473316.172 ops/s
# Warmup Iteration  22: 1462336.291 ops/s
# Warmup Iteration  23: 1470981.856 ops/s
# Warmup Iteration  24: 1477164.523 ops/s
# Warmup Iteration  25: 1471891.374 ops/s
# Warmup Iteration  26: 1472771.032 ops/s
# Warmup Iteration  27: 1470193.526 ops/s
# Warmup Iteration  28: 1467874.700 ops/s
# Warmup Iteration  29: 1472858.542 ops/s
# Warmup Iteration  30: 1471328.929 ops/s
Iteration   1: 1471720.936 ops/s
Iteration   2: 1477222.467 ops/s
Iteration   3: 1474552.555 ops/s
Iteration   4: 1469609.407 ops/s
Iteration   5: 1446967.704 ops/s
Iteration   6: 1478107.737 ops/s
Iteration   7: 1476049.968 ops/s
Iteration   8: 1472728.541 ops/s
Iteration   9: 1475532.233 ops/s
Iteration  10: 1475441.560 ops/s
Iteration  11: 1473188.308 ops/s
Iteration  12: 1462208.449 ops/s
Iteration  13: 1469347.689 ops/s
Iteration  14: 1471538.007 ops/s
Iteration  15: 1470943.960 ops/s
Iteration  16: 1481387.391 ops/s
Iteration  17: 1471898.177 ops/s
Iteration  18: 1449456.899 ops/s
Iteration  19: 1478655.430 ops/s
Iteration  20: 1467235.278 ops/s
Iteration  21: 1470932.730 ops/s
Iteration  22: 1471131.652 ops/s
Iteration  23: 1451028.166 ops/s
Iteration  24: 1469603.587 ops/s
Iteration  25: 1466354.749 ops/s
Iteration  26: 1471141.416 ops/s
Iteration  27: 1452727.564 ops/s
Iteration  28: 1474085.778 ops/s
Iteration  29: 1476766.105 ops/s
Iteration  30: 1471005.722 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1469619.005 ±(99.9%) 5849.783 ops/s [Average]
  (min, avg, max) = (1446967.704, 1469619.005, 1481387.391), stdev = 8755.680
  CI (99.9%): [1463769.223, 1475468.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1469619.005 ± 5849.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 128516.051 ops/s
# Warmup Iteration   2: 220176.622 ops/s
# Warmup Iteration   3: 275366.884 ops/s
# Warmup Iteration   4: 273995.212 ops/s
# Warmup Iteration   5: 271408.194 ops/s
# Warmup Iteration   6: 274559.281 ops/s
# Warmup Iteration   7: 227817.844 ops/s
# Warmup Iteration   8: 275675.697 ops/s
# Warmup Iteration   9: 273240.807 ops/s
# Warmup Iteration  10: 275845.260 ops/s
# Warmup Iteration  11: 275528.232 ops/s
# Warmup Iteration  12: 275336.491 ops/s
# Warmup Iteration  13: 275420.783 ops/s
# Warmup Iteration  14: 275251.210 ops/s
# Warmup Iteration  15: 276065.988 ops/s
# Warmup Iteration  16: 275614.451 ops/s
# Warmup Iteration  17: 274583.759 ops/s
# Warmup Iteration  18: 276345.474 ops/s
# Warmup Iteration  19: 276367.582 ops/s
# Warmup Iteration  20: 275913.594 ops/s
# Warmup Iteration  21: 275932.346 ops/s
# Warmup Iteration  22: 274852.644 ops/s
# Warmup Iteration  23: 276002.386 ops/s
# Warmup Iteration  24: 274073.314 ops/s
# Warmup Iteration  25: 273136.645 ops/s
# Warmup Iteration  26: 275938.622 ops/s
# Warmup Iteration  27: 273895.946 ops/s
# Warmup Iteration  28: 275265.449 ops/s
# Warmup Iteration  29: 275297.934 ops/s
# Warmup Iteration  30: 273579.694 ops/s
Iteration   1: 276280.497 ops/s
Iteration   2: 276301.792 ops/s
Iteration   3: 275951.248 ops/s
Iteration   4: 276007.107 ops/s
Iteration   5: 276308.804 ops/s
Iteration   6: 272139.003 ops/s
Iteration   7: 275953.007 ops/s
Iteration   8: 275329.458 ops/s
Iteration   9: 276007.629 ops/s
Iteration  10: 273960.541 ops/s
Iteration  11: 276856.442 ops/s
Iteration  12: 276112.164 ops/s
Iteration  13: 276309.943 ops/s
Iteration  14: 275839.482 ops/s
Iteration  15: 276095.957 ops/s
Iteration  16: 276282.589 ops/s
Iteration  17: 275889.575 ops/s
Iteration  18: 274563.170 ops/s
Iteration  19: 276783.135 ops/s
Iteration  20: 274573.791 ops/s
Iteration  21: 275937.041 ops/s
Iteration  22: 276144.523 ops/s
Iteration  23: 275653.598 ops/s
Iteration  24: 276507.430 ops/s
Iteration  25: 275820.416 ops/s
Iteration  26: 275202.632 ops/s
Iteration  27: 275789.040 ops/s
Iteration  28: 276446.437 ops/s
Iteration  29: 275946.987 ops/s
Iteration  30: 274350.732 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_collectWith_target":
  275711.472 ±(99.9%) 644.744 ops/s [Average]
  (min, avg, max) = (272139.003, 275711.472, 276856.442), stdev = 965.022
  CI (99.9%): [275066.728, 276356.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_collectWith_target  thrpt   30  275711.472 ± 644.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4524559.234 ops/s
# Warmup Iteration   2: 9626419.535 ops/s
# Warmup Iteration   3: 9819171.484 ops/s
# Warmup Iteration   4: 8895047.889 ops/s
# Warmup Iteration   5: 9263576.743 ops/s
# Warmup Iteration   6: 9903571.286 ops/s
# Warmup Iteration   7: 9985489.417 ops/s
# Warmup Iteration   8: 9956951.522 ops/s
# Warmup Iteration   9: 9962323.218 ops/s
# Warmup Iteration  10: 9962915.652 ops/s
# Warmup Iteration  11: 9960478.709 ops/s
# Warmup Iteration  12: 9976248.540 ops/s
# Warmup Iteration  13: 9915675.630 ops/s
# Warmup Iteration  14: 9966895.198 ops/s
# Warmup Iteration  15: 9947539.346 ops/s
# Warmup Iteration  16: 9967193.868 ops/s
# Warmup Iteration  17: 9981380.321 ops/s
# Warmup Iteration  18: 9919113.658 ops/s
# Warmup Iteration  19: 9948241.123 ops/s
# Warmup Iteration  20: 9909124.094 ops/s
# Warmup Iteration  21: 9868338.811 ops/s
# Warmup Iteration  22: 9963720.219 ops/s
# Warmup Iteration  23: 9936448.952 ops/s
# Warmup Iteration  24: 9933033.487 ops/s
# Warmup Iteration  25: 9971786.868 ops/s
# Warmup Iteration  26: 9951943.707 ops/s
# Warmup Iteration  27: 9844206.365 ops/s
# Warmup Iteration  28: 9954264.547 ops/s
# Warmup Iteration  29: 9966467.170 ops/s
# Warmup Iteration  30: 9984523.048 ops/s
Iteration   1: 9820769.834 ops/s
Iteration   2: 9964478.461 ops/s
Iteration   3: 9866583.461 ops/s
Iteration   4: 9920538.260 ops/s
Iteration   5: 9806981.542 ops/s
Iteration   6: 9985885.295 ops/s
Iteration   7: 9962957.230 ops/s
Iteration   8: 9959579.478 ops/s
Iteration   9: 9942918.500 ops/s
Iteration  10: 9997921.451 ops/s
Iteration  11: 9915542.447 ops/s
Iteration  12: 9941554.166 ops/s
Iteration  13: 9924339.839 ops/s
Iteration  14: 9832010.764 ops/s
Iteration  15: 9911136.906 ops/s
Iteration  16: 9943816.495 ops/s
Iteration  17: 9945302.048 ops/s
Iteration  18: 9953179.595 ops/s
Iteration  19: 9930932.748 ops/s
Iteration  20: 9981977.975 ops/s
Iteration  21: 9960940.229 ops/s
Iteration  22: 9963859.036 ops/s
Iteration  23: 9948384.401 ops/s
Iteration  24: 9953603.768 ops/s
Iteration  25: 9895318.906 ops/s
Iteration  26: 9940199.625 ops/s
Iteration  27: 9968765.763 ops/s
Iteration  28: 9879678.077 ops/s
Iteration  29: 9951754.743 ops/s
Iteration  30: 9974608.480 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_contains":
  9931517.317 ±(99.9%) 32104.262 ops/s [Average]
  (min, avg, max) = (9806981.542, 9931517.317, 9997921.451), stdev = 48052.152
  CI (99.9%): [9899413.056, 9963621.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_contains  thrpt   30  9931517.317 ± 32104.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5331006.166 ops/s
# Warmup Iteration   2: 11165904.335 ops/s
# Warmup Iteration   3: 11255072.645 ops/s
# Warmup Iteration   4: 9503210.474 ops/s
# Warmup Iteration   5: 11295455.008 ops/s
# Warmup Iteration   6: 11331892.100 ops/s
# Warmup Iteration   7: 11217962.606 ops/s
# Warmup Iteration   8: 11201160.371 ops/s
# Warmup Iteration   9: 11222262.002 ops/s
# Warmup Iteration  10: 11313441.989 ops/s
# Warmup Iteration  11: 11301227.094 ops/s
# Warmup Iteration  12: 11326571.808 ops/s
# Warmup Iteration  13: 11225504.860 ops/s
# Warmup Iteration  14: 11335740.108 ops/s
# Warmup Iteration  15: 11302711.685 ops/s
# Warmup Iteration  16: 11248728.023 ops/s
# Warmup Iteration  17: 11326389.415 ops/s
# Warmup Iteration  18: 11339954.669 ops/s
# Warmup Iteration  19: 11114770.769 ops/s
# Warmup Iteration  20: 11355634.417 ops/s
# Warmup Iteration  21: 11311130.424 ops/s
# Warmup Iteration  22: 11197170.486 ops/s
# Warmup Iteration  23: 11274934.369 ops/s
# Warmup Iteration  24: 11342353.546 ops/s
# Warmup Iteration  25: 11310457.938 ops/s
# Warmup Iteration  26: 11288566.805 ops/s
# Warmup Iteration  27: 11304711.499 ops/s
# Warmup Iteration  28: 11311024.579 ops/s
# Warmup Iteration  29: 11207437.800 ops/s
# Warmup Iteration  30: 11229953.777 ops/s
Iteration   1: 11319226.115 ops/s
Iteration   2: 11055735.324 ops/s
Iteration   3: 11339018.105 ops/s
Iteration   4: 11333400.670 ops/s
Iteration   5: 11340929.274 ops/s
Iteration   6: 11337977.877 ops/s
Iteration   7: 11313042.974 ops/s
Iteration   8: 11292541.838 ops/s
Iteration   9: 11174008.995 ops/s
Iteration  10: 11169068.673 ops/s
Iteration  11: 11341483.124 ops/s
Iteration  12: 11350774.615 ops/s
Iteration  13: 11310490.126 ops/s
Iteration  14: 11292750.723 ops/s
Iteration  15: 11318548.304 ops/s
Iteration  16: 11098234.451 ops/s
Iteration  17: 11308285.669 ops/s
Iteration  18: 11329954.510 ops/s
Iteration  19: 11332738.893 ops/s
Iteration  20: 11315739.176 ops/s
Iteration  21: 11311168.518 ops/s
Iteration  22: 11328767.390 ops/s
Iteration  23: 11305740.029 ops/s
Iteration  24: 11334853.313 ops/s
Iteration  25: 11295409.378 ops/s
Iteration  26: 11293331.338 ops/s
Iteration  27: 11323490.797 ops/s
Iteration  28: 11257762.610 ops/s
Iteration  29: 11286951.176 ops/s
Iteration  30: 11289017.820 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllArray":
  11290014.727 ±(99.9%) 47847.194 ops/s [Average]
  (min, avg, max) = (11055735.324, 11290014.727, 11350774.615), stdev = 71615.434
  CI (99.9%): [11242167.532, 11337861.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_containsAllArray  thrpt   30  11290014.727 ± 47847.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5505837.524 ops/s
# Warmup Iteration   2: 11675698.469 ops/s
# Warmup Iteration   3: 9866696.738 ops/s
# Warmup Iteration   4: 11816572.449 ops/s
# Warmup Iteration   5: 11684045.244 ops/s
# Warmup Iteration   6: 11798438.926 ops/s
# Warmup Iteration   7: 11786980.485 ops/s
# Warmup Iteration   8: 11702466.462 ops/s
# Warmup Iteration   9: 11812327.263 ops/s
# Warmup Iteration  10: 11652911.510 ops/s
# Warmup Iteration  11: 11718000.762 ops/s
# Warmup Iteration  12: 11713400.991 ops/s
# Warmup Iteration  13: 11647241.524 ops/s
# Warmup Iteration  14: 11708563.547 ops/s
# Warmup Iteration  15: 11788753.575 ops/s
# Warmup Iteration  16: 11840757.353 ops/s
# Warmup Iteration  17: 11801728.454 ops/s
# Warmup Iteration  18: 11707685.991 ops/s
# Warmup Iteration  19: 11749921.135 ops/s
# Warmup Iteration  20: 11693693.998 ops/s
# Warmup Iteration  21: 11795405.936 ops/s
# Warmup Iteration  22: 11687360.487 ops/s
# Warmup Iteration  23: 11820527.851 ops/s
# Warmup Iteration  24: 11806842.617 ops/s
# Warmup Iteration  25: 11721411.653 ops/s
# Warmup Iteration  26: 11808071.384 ops/s
# Warmup Iteration  27: 11714795.204 ops/s
# Warmup Iteration  28: 11776970.648 ops/s
# Warmup Iteration  29: 11796191.534 ops/s
# Warmup Iteration  30: 11686342.207 ops/s
Iteration   1: 11780727.520 ops/s
Iteration   2: 11767651.621 ops/s
Iteration   3: 11806159.534 ops/s
Iteration   4: 11808795.822 ops/s
Iteration   5: 11814044.292 ops/s
Iteration   6: 11826164.630 ops/s
Iteration   7: 11816853.124 ops/s
Iteration   8: 11812685.936 ops/s
Iteration   9: 11800388.846 ops/s
Iteration  10: 11849252.148 ops/s
Iteration  11: 11617092.788 ops/s
Iteration  12: 11812097.650 ops/s
Iteration  13: 11780845.257 ops/s
Iteration  14: 11813330.972 ops/s
Iteration  15: 11826810.931 ops/s
Iteration  16: 11799062.510 ops/s
Iteration  17: 11746669.697 ops/s
Iteration  18: 11803097.268 ops/s
Iteration  19: 11806294.280 ops/s
Iteration  20: 11769629.882 ops/s
Iteration  21: 11811656.894 ops/s
Iteration  22: 11823877.975 ops/s
Iteration  23: 11812500.203 ops/s
Iteration  24: 11783899.516 ops/s
Iteration  25: 11809609.580 ops/s
Iteration  26: 11814695.026 ops/s
Iteration  27: 11785030.127 ops/s
Iteration  28: 11832476.737 ops/s
Iteration  29: 11633909.421 ops/s
Iteration  30: 11739148.281 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllCollection":
  11790148.616 ±(99.9%) 33988.824 ops/s [Average]
  (min, avg, max) = (11617092.788, 11790148.616, 11849252.148), stdev = 50872.875
  CI (99.9%): [11756159.792, 11824137.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_containsAllCollection  thrpt   30  11790148.616 ± 33988.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3599152.751 ops/s
# Warmup Iteration   2: 7821355.076 ops/s
# Warmup Iteration   3: 7877966.528 ops/s
# Warmup Iteration   4: 6488572.891 ops/s
# Warmup Iteration   5: 7832603.811 ops/s
# Warmup Iteration   6: 7924226.411 ops/s
# Warmup Iteration   7: 7930900.755 ops/s
# Warmup Iteration   8: 7858403.519 ops/s
# Warmup Iteration   9: 7899093.852 ops/s
# Warmup Iteration  10: 7895045.408 ops/s
# Warmup Iteration  11: 7918844.516 ops/s
# Warmup Iteration  12: 7931284.578 ops/s
# Warmup Iteration  13: 7847892.523 ops/s
# Warmup Iteration  14: 7843319.088 ops/s
# Warmup Iteration  15: 7903541.081 ops/s
# Warmup Iteration  16: 7863989.657 ops/s
# Warmup Iteration  17: 7927975.403 ops/s
# Warmup Iteration  18: 7911057.961 ops/s
# Warmup Iteration  19: 7927279.888 ops/s
# Warmup Iteration  20: 7893032.446 ops/s
# Warmup Iteration  21: 7924832.953 ops/s
# Warmup Iteration  22: 7920272.218 ops/s
# Warmup Iteration  23: 7932600.855 ops/s
# Warmup Iteration  24: 7786333.440 ops/s
# Warmup Iteration  25: 7930126.682 ops/s
# Warmup Iteration  26: 7908681.693 ops/s
# Warmup Iteration  27: 7899531.954 ops/s
# Warmup Iteration  28: 7909621.786 ops/s
# Warmup Iteration  29: 7885456.226 ops/s
# Warmup Iteration  30: 7915085.679 ops/s
Iteration   1: 7899377.537 ops/s
Iteration   2: 7921960.268 ops/s
Iteration   3: 7910451.532 ops/s
Iteration   4: 7910177.385 ops/s
Iteration   5: 7952542.750 ops/s
Iteration   6: 7931613.185 ops/s
Iteration   7: 7934815.578 ops/s
Iteration   8: 7900849.208 ops/s
Iteration   9: 7906765.455 ops/s
Iteration  10: 7921667.917 ops/s
Iteration  11: 7906923.463 ops/s
Iteration  12: 7931656.320 ops/s
Iteration  13: 7941246.902 ops/s
Iteration  14: 7909176.769 ops/s
Iteration  15: 7935755.333 ops/s
Iteration  16: 7811513.447 ops/s
Iteration  17: 7910128.760 ops/s
Iteration  18: 7950687.749 ops/s
Iteration  19: 7887217.747 ops/s
Iteration  20: 7924266.707 ops/s
Iteration  21: 7941916.320 ops/s
Iteration  22: 7942828.513 ops/s
Iteration  23: 7916435.073 ops/s
Iteration  24: 7933111.706 ops/s
Iteration  25: 7758084.349 ops/s
Iteration  26: 7930558.504 ops/s
Iteration  27: 7805752.870 ops/s
Iteration  28: 7943283.872 ops/s
Iteration  29: 7950779.040 ops/s
Iteration  30: 7803904.271 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAllIterable":
  7907514.951 ±(99.9%) 32461.080 ops/s [Average]
  (min, avg, max) = (7758084.349, 7907514.951, 7952542.750), stdev = 48586.221
  CI (99.9%): [7875053.871, 7939976.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_containsAllIterable  thrpt   30  7907514.951 ± 32461.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93849.544 ops/s
# Warmup Iteration   2: 167288.616 ops/s
# Warmup Iteration   3: 179558.672 ops/s
# Warmup Iteration   4: 179811.137 ops/s
# Warmup Iteration   5: 174634.984 ops/s
# Warmup Iteration   6: 158620.081 ops/s
# Warmup Iteration   7: 180468.560 ops/s
# Warmup Iteration   8: 179703.298 ops/s
# Warmup Iteration   9: 180286.401 ops/s
# Warmup Iteration  10: 180411.554 ops/s
# Warmup Iteration  11: 180165.351 ops/s
# Warmup Iteration  12: 180258.545 ops/s
# Warmup Iteration  13: 178194.743 ops/s
# Warmup Iteration  14: 179087.073 ops/s
# Warmup Iteration  15: 180677.054 ops/s
# Warmup Iteration  16: 180640.739 ops/s
# Warmup Iteration  17: 180865.275 ops/s
# Warmup Iteration  18: 180560.281 ops/s
# Warmup Iteration  19: 181144.958 ops/s
# Warmup Iteration  20: 181069.599 ops/s
# Warmup Iteration  21: 180892.904 ops/s
# Warmup Iteration  22: 180897.921 ops/s
# Warmup Iteration  23: 180430.724 ops/s
# Warmup Iteration  24: 179918.785 ops/s
# Warmup Iteration  25: 179040.071 ops/s
# Warmup Iteration  26: 181031.109 ops/s
# Warmup Iteration  27: 180740.364 ops/s
# Warmup Iteration  28: 180871.078 ops/s
# Warmup Iteration  29: 180905.859 ops/s
# Warmup Iteration  30: 179520.994 ops/s
Iteration   1: 181085.412 ops/s
Iteration   2: 181220.551 ops/s
Iteration   3: 178789.804 ops/s
Iteration   4: 180890.012 ops/s
Iteration   5: 178072.980 ops/s
Iteration   6: 181174.598 ops/s
Iteration   7: 180561.837 ops/s
Iteration   8: 180100.295 ops/s
Iteration   9: 180874.649 ops/s
Iteration  10: 177819.313 ops/s
Iteration  11: 181199.047 ops/s
Iteration  12: 179436.096 ops/s
Iteration  13: 180674.560 ops/s
Iteration  14: 181153.963 ops/s
Iteration  15: 179941.100 ops/s
Iteration  16: 181341.683 ops/s
Iteration  17: 178502.199 ops/s
Iteration  18: 180483.008 ops/s
Iteration  19: 181141.664 ops/s
Iteration  20: 180643.558 ops/s
Iteration  21: 178106.459 ops/s
Iteration  22: 179046.442 ops/s
Iteration  23: 179407.143 ops/s
Iteration  24: 180941.089 ops/s
Iteration  25: 180740.682 ops/s
Iteration  26: 181260.431 ops/s
Iteration  27: 180845.582 ops/s
Iteration  28: 181020.898 ops/s
Iteration  29: 181006.764 ops/s
Iteration  30: 180654.222 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyCollection":
  180271.201 ±(99.9%) 726.239 ops/s [Average]
  (min, avg, max) = (177819.313, 180271.201, 181341.683), stdev = 1087.000
  CI (99.9%): [179544.963, 180997.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  180271.201 ± 726.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 84510.235 ops/s
# Warmup Iteration   2: 140426.956 ops/s
# Warmup Iteration   3: 157519.700 ops/s
# Warmup Iteration   4: 158299.034 ops/s
# Warmup Iteration   5: 158340.508 ops/s
# Warmup Iteration   6: 134643.252 ops/s
# Warmup Iteration   7: 158746.469 ops/s
# Warmup Iteration   8: 158514.757 ops/s
# Warmup Iteration   9: 158491.739 ops/s
# Warmup Iteration  10: 158581.036 ops/s
# Warmup Iteration  11: 158639.855 ops/s
# Warmup Iteration  12: 158622.734 ops/s
# Warmup Iteration  13: 158559.468 ops/s
# Warmup Iteration  14: 158494.466 ops/s
# Warmup Iteration  15: 158842.341 ops/s
# Warmup Iteration  16: 158294.032 ops/s
# Warmup Iteration  17: 158411.743 ops/s
# Warmup Iteration  18: 156982.219 ops/s
# Warmup Iteration  19: 158412.766 ops/s
# Warmup Iteration  20: 158321.178 ops/s
# Warmup Iteration  21: 156790.046 ops/s
# Warmup Iteration  22: 157805.847 ops/s
# Warmup Iteration  23: 157625.156 ops/s
# Warmup Iteration  24: 157871.531 ops/s
# Warmup Iteration  25: 158129.190 ops/s
# Warmup Iteration  26: 157644.612 ops/s
# Warmup Iteration  27: 157785.059 ops/s
# Warmup Iteration  28: 157631.198 ops/s
# Warmup Iteration  29: 158343.499 ops/s
# Warmup Iteration  30: 158155.526 ops/s
Iteration   1: 158328.191 ops/s
Iteration   2: 158193.607 ops/s
Iteration   3: 156724.813 ops/s
Iteration   4: 157968.012 ops/s
Iteration   5: 157637.517 ops/s
Iteration   6: 158400.182 ops/s
Iteration   7: 157424.839 ops/s
Iteration   8: 158266.314 ops/s
Iteration   9: 157546.234 ops/s
Iteration  10: 157534.525 ops/s
Iteration  11: 157959.274 ops/s
Iteration  12: 157775.333 ops/s
Iteration  13: 158488.025 ops/s
Iteration  14: 157863.865 ops/s
Iteration  15: 155525.285 ops/s
Iteration  16: 158482.624 ops/s
Iteration  17: 157708.674 ops/s
Iteration  18: 158637.265 ops/s
Iteration  19: 155063.462 ops/s
Iteration  20: 158257.034 ops/s
Iteration  21: 158023.837 ops/s
Iteration  22: 158080.038 ops/s
Iteration  23: 158053.955 ops/s
Iteration  24: 158149.679 ops/s
Iteration  25: 158393.401 ops/s
Iteration  26: 158165.334 ops/s
Iteration  27: 156674.625 ops/s
Iteration  28: 157056.914 ops/s
Iteration  29: 158152.616 ops/s
Iteration  30: 158339.516 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsAnyIterable":
  157762.500 ±(99.9%) 555.409 ops/s [Average]
  (min, avg, max) = (155063.462, 157762.500, 158637.265), stdev = 831.310
  CI (99.9%): [157207.091, 158317.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  157762.500 ± 555.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658201.337 ops/s
# Warmup Iteration   2: 693404.861 ops/s
# Warmup Iteration   3: 824235.965 ops/s
# Warmup Iteration   4: 890719.399 ops/s
# Warmup Iteration   5: 897749.521 ops/s
# Warmup Iteration   6: 897578.537 ops/s
# Warmup Iteration   7: 900227.486 ops/s
# Warmup Iteration   8: 901915.185 ops/s
# Warmup Iteration   9: 888110.128 ops/s
# Warmup Iteration  10: 900534.084 ops/s
# Warmup Iteration  11: 888708.148 ops/s
# Warmup Iteration  12: 899626.082 ops/s
# Warmup Iteration  13: 821549.641 ops/s
# Warmup Iteration  14: 829933.438 ops/s
# Warmup Iteration  15: 893649.444 ops/s
# Warmup Iteration  16: 897584.232 ops/s
# Warmup Iteration  17: 949763.448 ops/s
# Warmup Iteration  18: 949080.323 ops/s
# Warmup Iteration  19: 955225.171 ops/s
# Warmup Iteration  20: 953437.255 ops/s
# Warmup Iteration  21: 955173.236 ops/s
# Warmup Iteration  22: 941710.020 ops/s
# Warmup Iteration  23: 953764.251 ops/s
# Warmup Iteration  24: 954347.289 ops/s
# Warmup Iteration  25: 952638.267 ops/s
# Warmup Iteration  26: 954527.169 ops/s
# Warmup Iteration  27: 953487.317 ops/s
# Warmup Iteration  28: 956415.939 ops/s
# Warmup Iteration  29: 947919.002 ops/s
# Warmup Iteration  30: 948468.925 ops/s
Iteration   1: 955361.859 ops/s
Iteration   2: 953650.286 ops/s
Iteration   3: 939151.419 ops/s
Iteration   4: 953663.012 ops/s
Iteration   5: 954917.822 ops/s
Iteration   6: 960577.233 ops/s
Iteration   7: 954260.499 ops/s
Iteration   8: 949744.548 ops/s
Iteration   9: 956448.554 ops/s
Iteration  10: 942700.016 ops/s
Iteration  11: 947305.946 ops/s
Iteration  12: 951808.280 ops/s
Iteration  13: 958724.579 ops/s
Iteration  14: 953963.072 ops/s
Iteration  15: 936756.031 ops/s
Iteration  16: 954585.447 ops/s
Iteration  17: 958043.338 ops/s
Iteration  18: 959397.631 ops/s
Iteration  19: 955415.546 ops/s
Iteration  20: 952921.440 ops/s
Iteration  21: 951479.293 ops/s
Iteration  22: 954697.125 ops/s
Iteration  23: 957526.016 ops/s
Iteration  24: 943509.046 ops/s
Iteration  25: 956844.059 ops/s
Iteration  26: 940201.005 ops/s
Iteration  27: 952921.193 ops/s
Iteration  28: 954692.386 ops/s
Iteration  29: 956300.267 ops/s
Iteration  30: 946881.749 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsBy":
  952148.290 ±(99.9%) 4150.897 ops/s [Average]
  (min, avg, max) = (936756.031, 952148.290, 960577.233), stdev = 6212.868
  CI (99.9%): [947997.393, 956299.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_containsBy  thrpt   30  952148.290 ± 4150.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93078.224 ops/s
# Warmup Iteration   2: 165401.547 ops/s
# Warmup Iteration   3: 178915.934 ops/s
# Warmup Iteration   4: 179221.558 ops/s
# Warmup Iteration   5: 175050.387 ops/s
# Warmup Iteration   6: 157301.109 ops/s
# Warmup Iteration   7: 179289.135 ops/s
# Warmup Iteration   8: 179778.658 ops/s
# Warmup Iteration   9: 179385.889 ops/s
# Warmup Iteration  10: 179349.237 ops/s
# Warmup Iteration  11: 177860.092 ops/s
# Warmup Iteration  12: 178172.596 ops/s
# Warmup Iteration  13: 176448.469 ops/s
# Warmup Iteration  14: 178928.180 ops/s
# Warmup Iteration  15: 176578.501 ops/s
# Warmup Iteration  16: 177786.310 ops/s
# Warmup Iteration  17: 179264.690 ops/s
# Warmup Iteration  18: 179328.403 ops/s
# Warmup Iteration  19: 179252.299 ops/s
# Warmup Iteration  20: 179934.040 ops/s
# Warmup Iteration  21: 178035.847 ops/s
# Warmup Iteration  22: 178424.014 ops/s
# Warmup Iteration  23: 179427.802 ops/s
# Warmup Iteration  24: 179512.960 ops/s
# Warmup Iteration  25: 179802.691 ops/s
# Warmup Iteration  26: 179142.955 ops/s
# Warmup Iteration  27: 179541.039 ops/s
# Warmup Iteration  28: 179328.452 ops/s
# Warmup Iteration  29: 179273.890 ops/s
# Warmup Iteration  30: 178122.728 ops/s
Iteration   1: 178934.190 ops/s
Iteration   2: 179922.115 ops/s
Iteration   3: 179273.950 ops/s
Iteration   4: 179449.607 ops/s
Iteration   5: 179791.621 ops/s
Iteration   6: 180001.486 ops/s
Iteration   7: 177219.889 ops/s
Iteration   8: 179011.406 ops/s
Iteration   9: 178776.088 ops/s
Iteration  10: 179396.485 ops/s
Iteration  11: 179421.436 ops/s
Iteration  12: 179493.868 ops/s
Iteration  13: 177910.993 ops/s
Iteration  14: 179627.551 ops/s
Iteration  15: 179352.380 ops/s
Iteration  16: 178807.439 ops/s
Iteration  17: 178616.679 ops/s
Iteration  18: 178955.514 ops/s
Iteration  19: 179163.360 ops/s
Iteration  20: 179192.755 ops/s
Iteration  21: 179578.135 ops/s
Iteration  22: 179750.351 ops/s
Iteration  23: 179179.522 ops/s
Iteration  24: 179330.700 ops/s
Iteration  25: 179491.951 ops/s
Iteration  26: 180176.775 ops/s
Iteration  27: 179142.651 ops/s
Iteration  28: 177126.525 ops/s
Iteration  29: 176223.645 ops/s
Iteration  30: 179692.863 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneCollection":
  179067.064 ±(99.9%) 591.913 ops/s [Average]
  (min, avg, max) = (176223.645, 179067.064, 180176.775), stdev = 885.948
  CI (99.9%): [178475.151, 179658.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  179067.064 ± 591.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 84415.280 ops/s
# Warmup Iteration   2: 135562.545 ops/s
# Warmup Iteration   3: 153074.437 ops/s
# Warmup Iteration   4: 152435.052 ops/s
# Warmup Iteration   5: 154106.823 ops/s
# Warmup Iteration   6: 130991.019 ops/s
# Warmup Iteration   7: 151705.911 ops/s
# Warmup Iteration   8: 153131.518 ops/s
# Warmup Iteration   9: 154559.746 ops/s
# Warmup Iteration  10: 154662.481 ops/s
# Warmup Iteration  11: 154769.898 ops/s
# Warmup Iteration  12: 153953.900 ops/s
# Warmup Iteration  13: 151931.791 ops/s
# Warmup Iteration  14: 154426.143 ops/s
# Warmup Iteration  15: 154341.046 ops/s
# Warmup Iteration  16: 154546.226 ops/s
# Warmup Iteration  17: 154384.023 ops/s
# Warmup Iteration  18: 154170.398 ops/s
# Warmup Iteration  19: 153827.594 ops/s
# Warmup Iteration  20: 153037.554 ops/s
# Warmup Iteration  21: 152143.940 ops/s
# Warmup Iteration  22: 153347.006 ops/s
# Warmup Iteration  23: 154021.500 ops/s
# Warmup Iteration  24: 154079.614 ops/s
# Warmup Iteration  25: 150977.376 ops/s
# Warmup Iteration  26: 154301.952 ops/s
# Warmup Iteration  27: 151943.533 ops/s
# Warmup Iteration  28: 153635.562 ops/s
# Warmup Iteration  29: 152621.541 ops/s
# Warmup Iteration  30: 154328.866 ops/s
Iteration   1: 153437.070 ops/s
Iteration   2: 152008.056 ops/s
Iteration   3: 154013.686 ops/s
Iteration   4: 152151.458 ops/s
Iteration   5: 151721.708 ops/s
Iteration   6: 151033.420 ops/s
Iteration   7: 153799.468 ops/s
Iteration   8: 154441.077 ops/s
Iteration   9: 153993.503 ops/s
Iteration  10: 153732.516 ops/s
Iteration  11: 154062.080 ops/s
Iteration  12: 154533.568 ops/s
Iteration  13: 152687.930 ops/s
Iteration  14: 154347.751 ops/s
Iteration  15: 152043.860 ops/s
Iteration  16: 154444.258 ops/s
Iteration  17: 153818.181 ops/s
Iteration  18: 154276.866 ops/s
Iteration  19: 153696.778 ops/s
Iteration  20: 154081.891 ops/s
Iteration  21: 153698.098 ops/s
Iteration  22: 154668.489 ops/s
Iteration  23: 153766.563 ops/s
Iteration  24: 154292.154 ops/s
Iteration  25: 153827.671 ops/s
Iteration  26: 153432.743 ops/s
Iteration  27: 153743.557 ops/s
Iteration  28: 154111.998 ops/s
Iteration  29: 154799.703 ops/s
Iteration  30: 150654.960 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_containsNoneIterable":
  153510.702 ±(99.9%) 724.662 ops/s [Average]
  (min, avg, max) = (150654.960, 153510.702, 154799.703), stdev = 1084.640
  CI (99.9%): [152786.040, 154235.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  153510.702 ± 724.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499585.488 ops/s
# Warmup Iteration   2: 809610.676 ops/s
# Warmup Iteration   3: 900582.006 ops/s
# Warmup Iteration   4: 899212.345 ops/s
# Warmup Iteration   5: 904351.587 ops/s
# Warmup Iteration   6: 760460.288 ops/s
# Warmup Iteration   7: 908114.252 ops/s
# Warmup Iteration   8: 906149.669 ops/s
# Warmup Iteration   9: 907196.296 ops/s
# Warmup Iteration  10: 905475.899 ops/s
# Warmup Iteration  11: 908448.053 ops/s
# Warmup Iteration  12: 906219.172 ops/s
# Warmup Iteration  13: 907836.787 ops/s
# Warmup Iteration  14: 906870.045 ops/s
# Warmup Iteration  15: 905930.471 ops/s
# Warmup Iteration  16: 906926.876 ops/s
# Warmup Iteration  17: 903443.399 ops/s
# Warmup Iteration  18: 901927.865 ops/s
# Warmup Iteration  19: 905191.873 ops/s
# Warmup Iteration  20: 905610.753 ops/s
# Warmup Iteration  21: 899398.916 ops/s
# Warmup Iteration  22: 904548.701 ops/s
# Warmup Iteration  23: 906035.854 ops/s
# Warmup Iteration  24: 907449.523 ops/s
# Warmup Iteration  25: 901096.393 ops/s
# Warmup Iteration  26: 907286.835 ops/s
# Warmup Iteration  27: 908639.606 ops/s
# Warmup Iteration  28: 900300.572 ops/s
# Warmup Iteration  29: 905424.429 ops/s
# Warmup Iteration  30: 907845.073 ops/s
Iteration   1: 903271.495 ops/s
Iteration   2: 907041.971 ops/s
Iteration   3: 904427.245 ops/s
Iteration   4: 905016.660 ops/s
Iteration   5: 893654.058 ops/s
Iteration   6: 905767.191 ops/s
Iteration   7: 904111.523 ops/s
Iteration   8: 891804.385 ops/s
Iteration   9: 905405.867 ops/s
Iteration  10: 906363.021 ops/s
Iteration  11: 900686.093 ops/s
Iteration  12: 902467.351 ops/s
Iteration  13: 909399.154 ops/s
Iteration  14: 905296.688 ops/s
Iteration  15: 908392.486 ops/s
Iteration  16: 907159.902 ops/s
Iteration  17: 907990.926 ops/s
Iteration  18: 903209.704 ops/s
Iteration  19: 903602.814 ops/s
Iteration  20: 906661.288 ops/s
Iteration  21: 907615.823 ops/s
Iteration  22: 906683.929 ops/s
Iteration  23: 905569.111 ops/s
Iteration  24: 906868.343 ops/s
Iteration  25: 869425.376 ops/s
Iteration  26: 894941.934 ops/s
Iteration  27: 905486.501 ops/s
Iteration  28: 909293.699 ops/s
Iteration  29: 899895.930 ops/s
Iteration  30: 907585.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_corresponds":
  903169.868 ±(99.9%) 5148.913 ops/s [Average]
  (min, avg, max) = (869425.376, 903169.868, 909399.154), stdev = 7706.651
  CI (99.9%): [898020.955, 908318.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_corresponds  thrpt   30  903169.868 ± 5148.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3777636.099 ops/s
# Warmup Iteration   2: 7383162.990 ops/s
# Warmup Iteration   3: 7724206.437 ops/s
# Warmup Iteration   4: 7785724.854 ops/s
# Warmup Iteration   5: 6451099.455 ops/s
# Warmup Iteration   6: 7803936.138 ops/s
# Warmup Iteration   7: 7764118.886 ops/s
# Warmup Iteration   8: 7716915.976 ops/s
# Warmup Iteration   9: 7790267.696 ops/s
# Warmup Iteration  10: 7761777.858 ops/s
# Warmup Iteration  11: 7769920.740 ops/s
# Warmup Iteration  12: 7775758.751 ops/s
# Warmup Iteration  13: 7786894.186 ops/s
# Warmup Iteration  14: 7792795.562 ops/s
# Warmup Iteration  15: 7807332.012 ops/s
# Warmup Iteration  16: 7782784.428 ops/s
# Warmup Iteration  17: 7787280.997 ops/s
# Warmup Iteration  18: 7776286.125 ops/s
# Warmup Iteration  19: 7774924.366 ops/s
# Warmup Iteration  20: 7771744.602 ops/s
# Warmup Iteration  21: 7780757.047 ops/s
# Warmup Iteration  22: 7708866.694 ops/s
# Warmup Iteration  23: 7729283.598 ops/s
# Warmup Iteration  24: 7787767.806 ops/s
# Warmup Iteration  25: 7663663.422 ops/s
# Warmup Iteration  26: 7755492.195 ops/s
# Warmup Iteration  27: 7725127.609 ops/s
# Warmup Iteration  28: 7784667.594 ops/s
# Warmup Iteration  29: 7718050.238 ops/s
# Warmup Iteration  30: 7746400.779 ops/s
Iteration   1: 7791933.323 ops/s
Iteration   2: 7786560.882 ops/s
Iteration   3: 7792936.261 ops/s
Iteration   4: 7752888.677 ops/s
Iteration   5: 7653080.889 ops/s
Iteration   6: 7748183.880 ops/s
Iteration   7: 7794551.495 ops/s
Iteration   8: 7758782.168 ops/s
Iteration   9: 7793706.467 ops/s
Iteration  10: 7780018.288 ops/s
Iteration  11: 7808026.752 ops/s
Iteration  12: 7773153.376 ops/s
Iteration  13: 7780959.965 ops/s
Iteration  14: 7796496.126 ops/s
Iteration  15: 7694701.875 ops/s
Iteration  16: 7777452.386 ops/s
Iteration  17: 7754732.018 ops/s
Iteration  18: 7775044.072 ops/s
Iteration  19: 7757783.484 ops/s
Iteration  20: 7794237.230 ops/s
Iteration  21: 7736070.577 ops/s
Iteration  22: 7782739.868 ops/s
Iteration  23: 7800975.543 ops/s
Iteration  24: 7799926.728 ops/s
Iteration  25: 7701581.968 ops/s
Iteration  26: 7781791.907 ops/s
Iteration  27: 7784941.613 ops/s
Iteration  28: 7811484.995 ops/s
Iteration  29: 7763747.165 ops/s
Iteration  30: 7735134.343 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_count":
  7768787.477 ±(99.9%) 23946.070 ops/s [Average]
  (min, avg, max) = (7653080.889, 7768787.477, 7811484.995), stdev = 35841.353
  CI (99.9%): [7744841.408, 7792733.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_count  thrpt   30  7768787.477 ± 23946.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1145455.549 ops/s
# Warmup Iteration   2: 1879838.786 ops/s
# Warmup Iteration   3: 2182491.784 ops/s
# Warmup Iteration   4: 2220438.425 ops/s
# Warmup Iteration   5: 2235938.729 ops/s
# Warmup Iteration   6: 2038635.575 ops/s
# Warmup Iteration   7: 2010285.475 ops/s
# Warmup Iteration   8: 2230079.104 ops/s
# Warmup Iteration   9: 2236499.024 ops/s
# Warmup Iteration  10: 2221108.783 ops/s
# Warmup Iteration  11: 2230385.573 ops/s
# Warmup Iteration  12: 2203420.914 ops/s
# Warmup Iteration  13: 2228859.383 ops/s
# Warmup Iteration  14: 2238097.353 ops/s
# Warmup Iteration  15: 2230798.084 ops/s
# Warmup Iteration  16: 2230880.051 ops/s
# Warmup Iteration  17: 2237753.447 ops/s
# Warmup Iteration  18: 2237503.995 ops/s
# Warmup Iteration  19: 2224916.574 ops/s
# Warmup Iteration  20: 2218178.759 ops/s
# Warmup Iteration  21: 2233799.275 ops/s
# Warmup Iteration  22: 2240124.472 ops/s
# Warmup Iteration  23: 2234958.722 ops/s
# Warmup Iteration  24: 2239120.393 ops/s
# Warmup Iteration  25: 2236161.904 ops/s
# Warmup Iteration  26: 2239175.552 ops/s
# Warmup Iteration  27: 2223709.740 ops/s
# Warmup Iteration  28: 2235787.122 ops/s
# Warmup Iteration  29: 2233556.546 ops/s
# Warmup Iteration  30: 2233716.379 ops/s
Iteration   1: 2242176.851 ops/s
Iteration   2: 2231955.258 ops/s
Iteration   3: 2241667.626 ops/s
Iteration   4: 2235758.799 ops/s
Iteration   5: 2236105.604 ops/s
Iteration   6: 2243059.752 ops/s
Iteration   7: 2246622.483 ops/s
Iteration   8: 2231783.948 ops/s
Iteration   9: 2243007.700 ops/s
Iteration  10: 2235405.808 ops/s
Iteration  11: 2242936.293 ops/s
Iteration  12: 2240134.289 ops/s
Iteration  13: 2230853.793 ops/s
Iteration  14: 2240460.876 ops/s
Iteration  15: 2244635.394 ops/s
Iteration  16: 2233095.410 ops/s
Iteration  17: 2240049.457 ops/s
Iteration  18: 2230184.079 ops/s
Iteration  19: 2247453.177 ops/s
Iteration  20: 2235682.550 ops/s
Iteration  21: 2246122.894 ops/s
Iteration  22: 2204363.613 ops/s
Iteration  23: 2212250.614 ops/s
Iteration  24: 2227309.103 ops/s
Iteration  25: 2241256.837 ops/s
Iteration  26: 2238990.818 ops/s
Iteration  27: 2247941.483 ops/s
Iteration  28: 2236129.378 ops/s
Iteration  29: 2237767.900 ops/s
Iteration  30: 2208653.970 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countBy":
  2235793.859 ±(99.9%) 7196.289 ops/s [Average]
  (min, avg, max) = (2204363.613, 2235793.859, 2247941.483), stdev = 10771.068
  CI (99.9%): [2228597.569, 2242990.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_countBy  thrpt   30  2235793.859 ± 7196.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 257419.239 ops/s
# Warmup Iteration   2: 445317.117 ops/s
# Warmup Iteration   3: 517697.387 ops/s
# Warmup Iteration   4: 519645.356 ops/s
# Warmup Iteration   5: 520365.795 ops/s
# Warmup Iteration   6: 424173.967 ops/s
# Warmup Iteration   7: 517832.057 ops/s
# Warmup Iteration   8: 515029.221 ops/s
# Warmup Iteration   9: 517763.292 ops/s
# Warmup Iteration  10: 517691.407 ops/s
# Warmup Iteration  11: 518153.103 ops/s
# Warmup Iteration  12: 516697.131 ops/s
# Warmup Iteration  13: 514119.414 ops/s
# Warmup Iteration  14: 509929.136 ops/s
# Warmup Iteration  15: 517196.472 ops/s
# Warmup Iteration  16: 518329.995 ops/s
# Warmup Iteration  17: 518285.175 ops/s
# Warmup Iteration  18: 518130.230 ops/s
# Warmup Iteration  19: 517548.590 ops/s
# Warmup Iteration  20: 516865.928 ops/s
# Warmup Iteration  21: 517312.984 ops/s
# Warmup Iteration  22: 518433.747 ops/s
# Warmup Iteration  23: 518116.366 ops/s
# Warmup Iteration  24: 517888.104 ops/s
# Warmup Iteration  25: 517899.099 ops/s
# Warmup Iteration  26: 517160.473 ops/s
# Warmup Iteration  27: 516921.635 ops/s
# Warmup Iteration  28: 514609.150 ops/s
# Warmup Iteration  29: 517274.241 ops/s
# Warmup Iteration  30: 517087.756 ops/s
Iteration   1: 515559.856 ops/s
Iteration   2: 517986.406 ops/s
Iteration   3: 509194.571 ops/s
Iteration   4: 515900.887 ops/s
Iteration   5: 519374.829 ops/s
Iteration   6: 518305.083 ops/s
Iteration   7: 513739.742 ops/s
Iteration   8: 516604.257 ops/s
Iteration   9: 518495.065 ops/s
Iteration  10: 517302.738 ops/s
Iteration  11: 518871.296 ops/s
Iteration  12: 518818.573 ops/s
Iteration  13: 517563.979 ops/s
Iteration  14: 518114.034 ops/s
Iteration  15: 518758.779 ops/s
Iteration  16: 518277.110 ops/s
Iteration  17: 519190.933 ops/s
Iteration  18: 518176.688 ops/s
Iteration  19: 508046.649 ops/s
Iteration  20: 518718.754 ops/s
Iteration  21: 518021.650 ops/s
Iteration  22: 518092.538 ops/s
Iteration  23: 518309.728 ops/s
Iteration  24: 517016.435 ops/s
Iteration  25: 518546.912 ops/s
Iteration  26: 517134.716 ops/s
Iteration  27: 518427.874 ops/s
Iteration  28: 517734.271 ops/s
Iteration  29: 518688.813 ops/s
Iteration  30: 518106.320 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByEach":
  517235.983 ±(99.9%) 1751.815 ops/s [Average]
  (min, avg, max) = (508046.649, 517235.983, 519374.829), stdev = 2622.035
  CI (99.9%): [515484.168, 518987.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_countByEach  thrpt   30  517235.983 ± 1751.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1079620.519 ops/s
# Warmup Iteration   2: 1785637.524 ops/s
# Warmup Iteration   3: 2085892.320 ops/s
# Warmup Iteration   4: 2108116.214 ops/s
# Warmup Iteration   5: 2087548.727 ops/s
# Warmup Iteration   6: 1899179.383 ops/s
# Warmup Iteration   7: 1951150.153 ops/s
# Warmup Iteration   8: 2105256.678 ops/s
# Warmup Iteration   9: 2104030.036 ops/s
# Warmup Iteration  10: 2106838.361 ops/s
# Warmup Iteration  11: 2097173.197 ops/s
# Warmup Iteration  12: 2108433.091 ops/s
# Warmup Iteration  13: 2106823.065 ops/s
# Warmup Iteration  14: 2090488.160 ops/s
# Warmup Iteration  15: 2106849.308 ops/s
# Warmup Iteration  16: 2109701.743 ops/s
# Warmup Iteration  17: 2106859.517 ops/s
# Warmup Iteration  18: 2105869.847 ops/s
# Warmup Iteration  19: 2112466.165 ops/s
# Warmup Iteration  20: 2072321.876 ops/s
# Warmup Iteration  21: 2108403.099 ops/s
# Warmup Iteration  22: 2101178.282 ops/s
# Warmup Iteration  23: 2103712.474 ops/s
# Warmup Iteration  24: 2103887.593 ops/s
# Warmup Iteration  25: 2105083.522 ops/s
# Warmup Iteration  26: 2090900.961 ops/s
# Warmup Iteration  27: 2109092.105 ops/s
# Warmup Iteration  28: 2106058.419 ops/s
# Warmup Iteration  29: 2072071.061 ops/s
# Warmup Iteration  30: 2100451.310 ops/s
Iteration   1: 2110698.104 ops/s
Iteration   2: 2106984.342 ops/s
Iteration   3: 2110851.786 ops/s
Iteration   4: 2106238.288 ops/s
Iteration   5: 2108035.565 ops/s
Iteration   6: 2106439.240 ops/s
Iteration   7: 2107185.957 ops/s
Iteration   8: 2070476.849 ops/s
Iteration   9: 2112030.395 ops/s
Iteration  10: 2103080.379 ops/s
Iteration  11: 2113280.827 ops/s
Iteration  12: 2105684.350 ops/s
Iteration  13: 2076648.675 ops/s
Iteration  14: 2073325.126 ops/s
Iteration  15: 2109624.255 ops/s
Iteration  16: 2095707.311 ops/s
Iteration  17: 2077891.882 ops/s
Iteration  18: 2092311.269 ops/s
Iteration  19: 2111944.326 ops/s
Iteration  20: 2099764.441 ops/s
Iteration  21: 2110987.432 ops/s
Iteration  22: 2098241.802 ops/s
Iteration  23: 2092540.038 ops/s
Iteration  24: 2096367.668 ops/s
Iteration  25: 2096322.792 ops/s
Iteration  26: 2045683.144 ops/s
Iteration  27: 2111433.931 ops/s
Iteration  28: 2102976.212 ops/s
Iteration  29: 2112413.552 ops/s
Iteration  30: 2080453.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countByWith":
  2098187.448 ±(99.9%) 10747.462 ops/s [Average]
  (min, avg, max) = (2045683.144, 2098187.448, 2113280.827), stdev = 16086.297
  CI (99.9%): [2087439.985, 2108934.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_countByWith  thrpt   30  2098187.448 ± 10747.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3666887.048 ops/s
# Warmup Iteration   2: 5797863.123 ops/s
# Warmup Iteration   3: 6420406.645 ops/s
# Warmup Iteration   4: 6498626.064 ops/s
# Warmup Iteration   5: 6512406.302 ops/s
# Warmup Iteration   6: 5550429.636 ops/s
# Warmup Iteration   7: 6349989.613 ops/s
# Warmup Iteration   8: 6511940.828 ops/s
# Warmup Iteration   9: 6501326.922 ops/s
# Warmup Iteration  10: 6495843.029 ops/s
# Warmup Iteration  11: 6513818.434 ops/s
# Warmup Iteration  12: 6504675.036 ops/s
# Warmup Iteration  13: 6520154.094 ops/s
# Warmup Iteration  14: 6518705.677 ops/s
# Warmup Iteration  15: 6501055.454 ops/s
# Warmup Iteration  16: 6513233.582 ops/s
# Warmup Iteration  17: 6481294.748 ops/s
# Warmup Iteration  18: 6499386.173 ops/s
# Warmup Iteration  19: 6519057.835 ops/s
# Warmup Iteration  20: 6508964.368 ops/s
# Warmup Iteration  21: 6497020.139 ops/s
# Warmup Iteration  22: 6427005.861 ops/s
# Warmup Iteration  23: 6515791.543 ops/s
# Warmup Iteration  24: 6504971.060 ops/s
# Warmup Iteration  25: 6459364.653 ops/s
# Warmup Iteration  26: 6517746.746 ops/s
# Warmup Iteration  27: 6462907.870 ops/s
# Warmup Iteration  28: 6487639.171 ops/s
# Warmup Iteration  29: 6535698.459 ops/s
# Warmup Iteration  30: 6404267.407 ops/s
Iteration   1: 6490232.481 ops/s
Iteration   2: 6516003.107 ops/s
Iteration   3: 6513808.297 ops/s
Iteration   4: 6488194.134 ops/s
Iteration   5: 6476303.137 ops/s
Iteration   6: 6519509.434 ops/s
Iteration   7: 6519173.278 ops/s
Iteration   8: 6528349.055 ops/s
Iteration   9: 6501812.417 ops/s
Iteration  10: 6515120.608 ops/s
Iteration  11: 6492607.066 ops/s
Iteration  12: 6505738.920 ops/s
Iteration  13: 6501480.225 ops/s
Iteration  14: 6481653.835 ops/s
Iteration  15: 6517494.519 ops/s
Iteration  16: 6474453.200 ops/s
Iteration  17: 6494988.668 ops/s
Iteration  18: 6502492.835 ops/s
Iteration  19: 6502714.872 ops/s
Iteration  20: 6433494.923 ops/s
Iteration  21: 6443511.863 ops/s
Iteration  22: 6536512.039 ops/s
Iteration  23: 6495815.963 ops/s
Iteration  24: 6422564.118 ops/s
Iteration  25: 6496289.046 ops/s
Iteration  26: 6409586.467 ops/s
Iteration  27: 6422357.114 ops/s
Iteration  28: 6514519.757 ops/s
Iteration  29: 6482872.263 ops/s
Iteration  30: 6545734.676 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_countWith":
  6491512.944 ±(99.9%) 22897.788 ops/s [Average]
  (min, avg, max) = (6409586.467, 6491512.944, 6545734.676), stdev = 34272.333
  CI (99.9%): [6468615.156, 6514410.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_countWith  thrpt   30  6491512.944 ± 22897.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2548239.140 ops/s
# Warmup Iteration   2: 5492071.597 ops/s
# Warmup Iteration   3: 5466998.130 ops/s
# Warmup Iteration   4: 4567788.902 ops/s
# Warmup Iteration   5: 5472687.825 ops/s
# Warmup Iteration   6: 5470369.760 ops/s
# Warmup Iteration   7: 5471805.879 ops/s
# Warmup Iteration   8: 5422268.733 ops/s
# Warmup Iteration   9: 5491366.939 ops/s
# Warmup Iteration  10: 5474116.811 ops/s
# Warmup Iteration  11: 5444145.696 ops/s
# Warmup Iteration  12: 5497673.329 ops/s
# Warmup Iteration  13: 5493662.311 ops/s
# Warmup Iteration  14: 5486311.760 ops/s
# Warmup Iteration  15: 5491417.059 ops/s
# Warmup Iteration  16: 5439107.114 ops/s
# Warmup Iteration  17: 5492931.429 ops/s
# Warmup Iteration  18: 5488958.760 ops/s
# Warmup Iteration  19: 5499413.798 ops/s
# Warmup Iteration  20: 5498536.339 ops/s
# Warmup Iteration  21: 5453647.308 ops/s
# Warmup Iteration  22: 5487563.607 ops/s
# Warmup Iteration  23: 5435611.351 ops/s
# Warmup Iteration  24: 5481099.648 ops/s
# Warmup Iteration  25: 5497531.552 ops/s
# Warmup Iteration  26: 5444628.463 ops/s
# Warmup Iteration  27: 5502135.099 ops/s
# Warmup Iteration  28: 5461438.866 ops/s
# Warmup Iteration  29: 5480704.783 ops/s
# Warmup Iteration  30: 5487974.681 ops/s
Iteration   1: 5504221.766 ops/s
Iteration   2: 5499701.000 ops/s
Iteration   3: 5495844.493 ops/s
Iteration   4: 5398077.480 ops/s
Iteration   5: 5491571.591 ops/s
Iteration   6: 5476298.557 ops/s
Iteration   7: 5509929.755 ops/s
Iteration   8: 5490104.002 ops/s
Iteration   9: 5512432.462 ops/s
Iteration  10: 5482660.352 ops/s
Iteration  11: 5505578.198 ops/s
Iteration  12: 5510280.924 ops/s
Iteration  13: 5410046.354 ops/s
Iteration  14: 5470340.770 ops/s
Iteration  15: 5496078.009 ops/s
Iteration  16: 5493149.841 ops/s
Iteration  17: 5462391.059 ops/s
Iteration  18: 5396090.179 ops/s
Iteration  19: 5433618.318 ops/s
Iteration  20: 5391294.589 ops/s
Iteration  21: 5498385.330 ops/s
Iteration  22: 5484741.506 ops/s
Iteration  23: 5501075.248 ops/s
Iteration  24: 5507965.350 ops/s
Iteration  25: 5466380.739 ops/s
Iteration  26: 5515804.781 ops/s
Iteration  27: 5459475.443 ops/s
Iteration  28: 5404216.963 ops/s
Iteration  29: 5500422.162 ops/s
Iteration  30: 5497198.203 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detect":
  5475512.514 ±(99.9%) 25973.596 ops/s [Average]
  (min, avg, max) = (5391294.589, 5475512.514, 5515804.781), stdev = 38876.059
  CI (99.9%): [5449538.918, 5501486.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_detect  thrpt   30  5475512.514 ± 25973.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2537553.953 ops/s
# Warmup Iteration   2: 5402364.216 ops/s
# Warmup Iteration   3: 5393690.175 ops/s
# Warmup Iteration   4: 4551648.906 ops/s
# Warmup Iteration   5: 5393313.389 ops/s
# Warmup Iteration   6: 5360045.819 ops/s
# Warmup Iteration   7: 5356856.289 ops/s
# Warmup Iteration   8: 5324406.741 ops/s
# Warmup Iteration   9: 5394141.026 ops/s
# Warmup Iteration  10: 5403086.080 ops/s
# Warmup Iteration  11: 5398255.532 ops/s
# Warmup Iteration  12: 5401494.667 ops/s
# Warmup Iteration  13: 5400920.631 ops/s
# Warmup Iteration  14: 5403706.345 ops/s
# Warmup Iteration  15: 5397920.162 ops/s
# Warmup Iteration  16: 5405854.305 ops/s
# Warmup Iteration  17: 5356513.683 ops/s
# Warmup Iteration  18: 5378957.890 ops/s
# Warmup Iteration  19: 5399710.824 ops/s
# Warmup Iteration  20: 5404226.583 ops/s
# Warmup Iteration  21: 5344563.497 ops/s
# Warmup Iteration  22: 5354199.947 ops/s
# Warmup Iteration  23: 5401994.927 ops/s
# Warmup Iteration  24: 5394620.936 ops/s
# Warmup Iteration  25: 5420576.301 ops/s
# Warmup Iteration  26: 5371426.031 ops/s
# Warmup Iteration  27: 5394488.348 ops/s
# Warmup Iteration  28: 5366138.643 ops/s
# Warmup Iteration  29: 5411401.029 ops/s
# Warmup Iteration  30: 5404598.203 ops/s
Iteration   1: 5405264.147 ops/s
Iteration   2: 5414659.480 ops/s
Iteration   3: 5322335.783 ops/s
Iteration   4: 5336524.976 ops/s
Iteration   5: 5417702.072 ops/s
Iteration   6: 5369073.205 ops/s
Iteration   7: 5292142.388 ops/s
Iteration   8: 5376983.683 ops/s
Iteration   9: 5390021.606 ops/s
Iteration  10: 5387508.006 ops/s
Iteration  11: 5408651.580 ops/s
Iteration  12: 5403977.002 ops/s
Iteration  13: 5360075.398 ops/s
Iteration  14: 5411682.606 ops/s
Iteration  15: 5383262.573 ops/s
Iteration  16: 5396252.749 ops/s
Iteration  17: 5423245.301 ops/s
Iteration  18: 5419365.831 ops/s
Iteration  19: 5383259.258 ops/s
Iteration  20: 5416800.208 ops/s
Iteration  21: 5413508.045 ops/s
Iteration  22: 5402165.199 ops/s
Iteration  23: 5406517.942 ops/s
Iteration  24: 5399103.744 ops/s
Iteration  25: 5393153.738 ops/s
Iteration  26: 5415703.320 ops/s
Iteration  27: 5375798.266 ops/s
Iteration  28: 5417933.590 ops/s
Iteration  29: 5404143.561 ops/s
Iteration  30: 5419111.876 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIfNone":
  5392197.571 ±(99.9%) 20600.997 ops/s [Average]
  (min, avg, max) = (5292142.388, 5392197.571, 5423245.301), stdev = 30834.604
  CI (99.9%): [5371596.575, 5412798.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_detectIfNone  thrpt   30  5392197.571 ± 20600.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705927.066 ops/s
# Warmup Iteration   2: 1588576.695 ops/s
# Warmup Iteration   3: 1594773.653 ops/s
# Warmup Iteration   4: 1338595.877 ops/s
# Warmup Iteration   5: 1592090.243 ops/s
# Warmup Iteration   6: 1588374.836 ops/s
# Warmup Iteration   7: 1593936.512 ops/s
# Warmup Iteration   8: 1585914.825 ops/s
# Warmup Iteration   9: 1592245.236 ops/s
# Warmup Iteration  10: 1589654.725 ops/s
# Warmup Iteration  11: 1587677.827 ops/s
# Warmup Iteration  12: 1592330.818 ops/s
# Warmup Iteration  13: 1581326.552 ops/s
# Warmup Iteration  14: 1558288.334 ops/s
# Warmup Iteration  15: 1586322.716 ops/s
# Warmup Iteration  16: 1581277.634 ops/s
# Warmup Iteration  17: 1590098.002 ops/s
# Warmup Iteration  18: 1593205.651 ops/s
# Warmup Iteration  19: 1596043.285 ops/s
# Warmup Iteration  20: 1591481.713 ops/s
# Warmup Iteration  21: 1593220.768 ops/s
# Warmup Iteration  22: 1594469.245 ops/s
# Warmup Iteration  23: 1590770.135 ops/s
# Warmup Iteration  24: 1592577.884 ops/s
# Warmup Iteration  25: 1590964.729 ops/s
# Warmup Iteration  26: 1594046.892 ops/s
# Warmup Iteration  27: 1592598.932 ops/s
# Warmup Iteration  28: 1580791.705 ops/s
# Warmup Iteration  29: 1584554.915 ops/s
# Warmup Iteration  30: 1594989.798 ops/s
Iteration   1: 1598304.075 ops/s
Iteration   2: 1594103.334 ops/s
Iteration   3: 1566427.197 ops/s
Iteration   4: 1591102.342 ops/s
Iteration   5: 1595167.728 ops/s
Iteration   6: 1590638.000 ops/s
Iteration   7: 1587009.321 ops/s
Iteration   8: 1591761.433 ops/s
Iteration   9: 1594024.156 ops/s
Iteration  10: 1590787.416 ops/s
Iteration  11: 1596669.845 ops/s
Iteration  12: 1562386.489 ops/s
Iteration  13: 1598685.734 ops/s
Iteration  14: 1598475.802 ops/s
Iteration  15: 1593389.998 ops/s
Iteration  16: 1588599.035 ops/s
Iteration  17: 1591754.434 ops/s
Iteration  18: 1593869.938 ops/s
Iteration  19: 1587766.911 ops/s
Iteration  20: 1595865.681 ops/s
Iteration  21: 1594131.323 ops/s
Iteration  22: 1588455.020 ops/s
Iteration  23: 1587965.899 ops/s
Iteration  24: 1596877.161 ops/s
Iteration  25: 1566199.865 ops/s
Iteration  26: 1598243.458 ops/s
Iteration  27: 1591191.181 ops/s
Iteration  28: 1591889.138 ops/s
Iteration  29: 1595215.265 ops/s
Iteration  30: 1573567.925 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectIndex":
  1589684.170 ±(99.9%) 6480.366 ops/s [Average]
  (min, avg, max) = (1562386.489, 1589684.170, 1598685.734), stdev = 9699.507
  CI (99.9%): [1583203.804, 1596164.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_detectIndex  thrpt   30  1589684.170 ± 6480.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699680.819 ops/s
# Warmup Iteration   2: 1584016.320 ops/s
# Warmup Iteration   3: 1589268.563 ops/s
# Warmup Iteration   4: 1324225.458 ops/s
# Warmup Iteration   5: 1581358.945 ops/s
# Warmup Iteration   6: 1593940.201 ops/s
# Warmup Iteration   7: 1594118.556 ops/s
# Warmup Iteration   8: 1584286.288 ops/s
# Warmup Iteration   9: 1590574.429 ops/s
# Warmup Iteration  10: 1592934.241 ops/s
# Warmup Iteration  11: 1587205.638 ops/s
# Warmup Iteration  12: 1577884.413 ops/s
# Warmup Iteration  13: 1578944.581 ops/s
# Warmup Iteration  14: 1594826.364 ops/s
# Warmup Iteration  15: 1592870.658 ops/s
# Warmup Iteration  16: 1568067.272 ops/s
# Warmup Iteration  17: 1590671.705 ops/s
# Warmup Iteration  18: 1592312.435 ops/s
# Warmup Iteration  19: 1591768.511 ops/s
# Warmup Iteration  20: 1577540.476 ops/s
# Warmup Iteration  21: 1575164.917 ops/s
# Warmup Iteration  22: 1573026.132 ops/s
# Warmup Iteration  23: 1593315.632 ops/s
# Warmup Iteration  24: 1594385.884 ops/s
# Warmup Iteration  25: 1588931.353 ops/s
# Warmup Iteration  26: 1594935.975 ops/s
# Warmup Iteration  27: 1581203.790 ops/s
# Warmup Iteration  28: 1576304.145 ops/s
# Warmup Iteration  29: 1591321.657 ops/s
# Warmup Iteration  30: 1595381.346 ops/s
Iteration   1: 1595357.225 ops/s
Iteration   2: 1594713.105 ops/s
Iteration   3: 1596782.935 ops/s
Iteration   4: 1591783.708 ops/s
Iteration   5: 1595483.634 ops/s
Iteration   6: 1598213.765 ops/s
Iteration   7: 1592713.624 ops/s
Iteration   8: 1591045.038 ops/s
Iteration   9: 1594792.987 ops/s
Iteration  10: 1590072.431 ops/s
Iteration  11: 1551393.897 ops/s
Iteration  12: 1571853.884 ops/s
Iteration  13: 1597149.674 ops/s
Iteration  14: 1591892.429 ops/s
Iteration  15: 1585352.861 ops/s
Iteration  16: 1593273.201 ops/s
Iteration  17: 1591013.306 ops/s
Iteration  18: 1591584.809 ops/s
Iteration  19: 1593548.676 ops/s
Iteration  20: 1592804.038 ops/s
Iteration  21: 1566222.041 ops/s
Iteration  22: 1593261.005 ops/s
Iteration  23: 1593264.660 ops/s
Iteration  24: 1595212.633 ops/s
Iteration  25: 1589981.768 ops/s
Iteration  26: 1568394.601 ops/s
Iteration  27: 1584658.526 ops/s
Iteration  28: 1596629.270 ops/s
Iteration  29: 1591328.734 ops/s
Iteration  30: 1572817.687 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectLastIndex":
  1588419.872 ±(99.9%) 7376.428 ops/s [Average]
  (min, avg, max) = (1551393.897, 1588419.872, 1598213.765), stdev = 11040.692
  CI (99.9%): [1581043.443, 1595796.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_detectLastIndex  thrpt   30  1588419.872 ± 7376.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 443076.759 ops/s
# Warmup Iteration   2: 511224.799 ops/s
# Warmup Iteration   3: 655532.595 ops/s
# Warmup Iteration   4: 655258.349 ops/s
# Warmup Iteration   5: 652087.566 ops/s
# Warmup Iteration   6: 652970.590 ops/s
# Warmup Iteration   7: 654083.102 ops/s
# Warmup Iteration   8: 654569.268 ops/s
# Warmup Iteration   9: 655418.046 ops/s
# Warmup Iteration  10: 551018.639 ops/s
# Warmup Iteration  11: 652967.037 ops/s
# Warmup Iteration  12: 650704.873 ops/s
# Warmup Iteration  13: 655681.919 ops/s
# Warmup Iteration  14: 655437.161 ops/s
# Warmup Iteration  15: 654207.436 ops/s
# Warmup Iteration  16: 652987.106 ops/s
# Warmup Iteration  17: 678715.282 ops/s
# Warmup Iteration  18: 681901.264 ops/s
# Warmup Iteration  19: 679084.494 ops/s
# Warmup Iteration  20: 672355.033 ops/s
# Warmup Iteration  21: 681648.257 ops/s
# Warmup Iteration  22: 682439.084 ops/s
# Warmup Iteration  23: 680325.584 ops/s
# Warmup Iteration  24: 676774.017 ops/s
# Warmup Iteration  25: 683487.076 ops/s
# Warmup Iteration  26: 681703.535 ops/s
# Warmup Iteration  27: 681197.885 ops/s
# Warmup Iteration  28: 682557.500 ops/s
# Warmup Iteration  29: 678825.148 ops/s
# Warmup Iteration  30: 681836.792 ops/s
Iteration   1: 683577.124 ops/s
Iteration   2: 681692.191 ops/s
Iteration   3: 682432.520 ops/s
Iteration   4: 681577.148 ops/s
Iteration   5: 668747.487 ops/s
Iteration   6: 683791.207 ops/s
Iteration   7: 682034.011 ops/s
Iteration   8: 679450.198 ops/s
Iteration   9: 682825.291 ops/s
Iteration  10: 681786.523 ops/s
Iteration  11: 680346.525 ops/s
Iteration  12: 683194.268 ops/s
Iteration  13: 681048.704 ops/s
Iteration  14: 680750.559 ops/s
Iteration  15: 680204.914 ops/s
Iteration  16: 677375.713 ops/s
Iteration  17: 681422.743 ops/s
Iteration  18: 682789.409 ops/s
Iteration  19: 679042.071 ops/s
Iteration  20: 676353.839 ops/s
Iteration  21: 679859.440 ops/s
Iteration  22: 682387.759 ops/s
Iteration  23: 681053.575 ops/s
Iteration  24: 681627.144 ops/s
Iteration  25: 682291.659 ops/s
Iteration  26: 680925.309 ops/s
Iteration  27: 671658.948 ops/s
Iteration  28: 682578.799 ops/s
Iteration  29: 682700.082 ops/s
Iteration  30: 679129.089 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectOptional":
  680488.475 ±(99.9%) 2206.492 ops/s [Average]
  (min, avg, max) = (668747.487, 680488.475, 683791.207), stdev = 3302.574
  CI (99.9%): [678281.983, 682694.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_detectOptional  thrpt   30  680488.475 ± 2206.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2103610.370 ops/s
# Warmup Iteration   2: 4175106.022 ops/s
# Warmup Iteration   3: 4286353.023 ops/s
# Warmup Iteration   4: 4312900.821 ops/s
# Warmup Iteration   5: 3611631.646 ops/s
# Warmup Iteration   6: 4278046.671 ops/s
# Warmup Iteration   7: 4304881.178 ops/s
# Warmup Iteration   8: 4311325.982 ops/s
# Warmup Iteration   9: 4320440.883 ops/s
# Warmup Iteration  10: 4304217.773 ops/s
# Warmup Iteration  11: 4301722.507 ops/s
# Warmup Iteration  12: 4311687.580 ops/s
# Warmup Iteration  13: 4307079.327 ops/s
# Warmup Iteration  14: 4303553.166 ops/s
# Warmup Iteration  15: 4312687.783 ops/s
# Warmup Iteration  16: 4256798.920 ops/s
# Warmup Iteration  17: 4276338.942 ops/s
# Warmup Iteration  18: 4313717.627 ops/s
# Warmup Iteration  19: 4278427.464 ops/s
# Warmup Iteration  20: 4306218.174 ops/s
# Warmup Iteration  21: 4256325.145 ops/s
# Warmup Iteration  22: 4302682.881 ops/s
# Warmup Iteration  23: 4318538.777 ops/s
# Warmup Iteration  24: 4312022.331 ops/s
# Warmup Iteration  25: 4296454.116 ops/s
# Warmup Iteration  26: 4300657.746 ops/s
# Warmup Iteration  27: 4284032.910 ops/s
# Warmup Iteration  28: 4304363.856 ops/s
# Warmup Iteration  29: 4277434.172 ops/s
# Warmup Iteration  30: 4314894.995 ops/s
Iteration   1: 4274586.577 ops/s
Iteration   2: 4242254.776 ops/s
Iteration   3: 4316443.643 ops/s
Iteration   4: 4321165.282 ops/s
Iteration   5: 4294348.793 ops/s
Iteration   6: 4311752.607 ops/s
Iteration   7: 4285647.352 ops/s
Iteration   8: 4307252.491 ops/s
Iteration   9: 4244445.309 ops/s
Iteration  10: 4314726.020 ops/s
Iteration  11: 4319814.352 ops/s
Iteration  12: 4297547.589 ops/s
Iteration  13: 4309041.636 ops/s
Iteration  14: 4320057.321 ops/s
Iteration  15: 4311220.246 ops/s
Iteration  16: 4312985.364 ops/s
Iteration  17: 4299456.962 ops/s
Iteration  18: 4311511.948 ops/s
Iteration  19: 4304083.302 ops/s
Iteration  20: 4287863.964 ops/s
Iteration  21: 4279657.280 ops/s
Iteration  22: 4319247.689 ops/s
Iteration  23: 4299720.407 ops/s
Iteration  24: 4184728.478 ops/s
Iteration  25: 4326214.883 ops/s
Iteration  26: 4278703.896 ops/s
Iteration  27: 4296260.182 ops/s
Iteration  28: 4303448.043 ops/s
Iteration  29: 4314008.280 ops/s
Iteration  30: 4302609.480 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWith":
  4296360.138 ±(99.9%) 19596.301 ops/s [Average]
  (min, avg, max) = (4184728.478, 4296360.138, 4326214.883), stdev = 29330.822
  CI (99.9%): [4276763.838, 4315956.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_detectWith  thrpt   30  4296360.138 ± 19596.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1947209.514 ops/s
# Warmup Iteration   2: 3575253.298 ops/s
# Warmup Iteration   3: 3792201.450 ops/s
# Warmup Iteration   4: 3811847.069 ops/s
# Warmup Iteration   5: 3173921.033 ops/s
# Warmup Iteration   6: 3771149.873 ops/s
# Warmup Iteration   7: 3809402.284 ops/s
# Warmup Iteration   8: 3786643.964 ops/s
# Warmup Iteration   9: 3811200.966 ops/s
# Warmup Iteration  10: 3825515.087 ops/s
# Warmup Iteration  11: 3821618.925 ops/s
# Warmup Iteration  12: 3782424.512 ops/s
# Warmup Iteration  13: 3814027.178 ops/s
# Warmup Iteration  14: 3792203.682 ops/s
# Warmup Iteration  15: 3821866.350 ops/s
# Warmup Iteration  16: 3793288.618 ops/s
# Warmup Iteration  17: 3819367.246 ops/s
# Warmup Iteration  18: 3799614.061 ops/s
# Warmup Iteration  19: 3783934.414 ops/s
# Warmup Iteration  20: 3815517.136 ops/s
# Warmup Iteration  21: 3816285.627 ops/s
# Warmup Iteration  22: 3809677.778 ops/s
# Warmup Iteration  23: 3816976.942 ops/s
# Warmup Iteration  24: 3823174.982 ops/s
# Warmup Iteration  25: 3812891.101 ops/s
# Warmup Iteration  26: 3806379.951 ops/s
# Warmup Iteration  27: 3776229.615 ops/s
# Warmup Iteration  28: 3802808.153 ops/s
# Warmup Iteration  29: 3787380.420 ops/s
# Warmup Iteration  30: 3762991.824 ops/s
Iteration   1: 3808289.132 ops/s
Iteration   2: 3814205.469 ops/s
Iteration   3: 3747022.370 ops/s
Iteration   4: 3811096.935 ops/s
Iteration   5: 3812252.094 ops/s
Iteration   6: 3819828.888 ops/s
Iteration   7: 3804329.552 ops/s
Iteration   8: 3750546.960 ops/s
Iteration   9: 3742955.866 ops/s
Iteration  10: 3795480.292 ops/s
Iteration  11: 3780226.388 ops/s
Iteration  12: 3825243.955 ops/s
Iteration  13: 3816304.623 ops/s
Iteration  14: 3810185.504 ops/s
Iteration  15: 3818983.750 ops/s
Iteration  16: 3822741.007 ops/s
Iteration  17: 3821474.277 ops/s
Iteration  18: 3761232.730 ops/s
Iteration  19: 3817509.595 ops/s
Iteration  20: 3766791.946 ops/s
Iteration  21: 3809220.625 ops/s
Iteration  22: 3809752.295 ops/s
Iteration  23: 3826453.292 ops/s
Iteration  24: 3808892.025 ops/s
Iteration  25: 3813706.414 ops/s
Iteration  26: 3801120.193 ops/s
Iteration  27: 3818360.757 ops/s
Iteration  28: 3820473.073 ops/s
Iteration  29: 3756407.217 ops/s
Iteration  30: 3743218.686 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock":
  3798476.864 ±(99.9%) 18439.637 ops/s [Average]
  (min, avg, max) = (3742955.866, 3798476.864, 3826453.292), stdev = 27599.583
  CI (99.9%): [3780037.227, 3816916.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  3798476.864 ± 18439.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441176.670 ops/s
# Warmup Iteration   2: 509813.870 ops/s
# Warmup Iteration   3: 653837.229 ops/s
# Warmup Iteration   4: 654280.542 ops/s
# Warmup Iteration   5: 639502.092 ops/s
# Warmup Iteration   6: 653652.025 ops/s
# Warmup Iteration   7: 650697.703 ops/s
# Warmup Iteration   8: 649651.441 ops/s
# Warmup Iteration   9: 652056.357 ops/s
# Warmup Iteration  10: 545681.831 ops/s
# Warmup Iteration  11: 654371.354 ops/s
# Warmup Iteration  12: 652777.051 ops/s
# Warmup Iteration  13: 654213.104 ops/s
# Warmup Iteration  14: 650051.789 ops/s
# Warmup Iteration  15: 651136.701 ops/s
# Warmup Iteration  16: 655338.905 ops/s
# Warmup Iteration  17: 677768.888 ops/s
# Warmup Iteration  18: 679512.967 ops/s
# Warmup Iteration  19: 680666.791 ops/s
# Warmup Iteration  20: 679082.127 ops/s
# Warmup Iteration  21: 673743.153 ops/s
# Warmup Iteration  22: 677774.908 ops/s
# Warmup Iteration  23: 675042.486 ops/s
# Warmup Iteration  24: 673192.952 ops/s
# Warmup Iteration  25: 679609.049 ops/s
# Warmup Iteration  26: 671782.773 ops/s
# Warmup Iteration  27: 674668.140 ops/s
# Warmup Iteration  28: 673741.557 ops/s
# Warmup Iteration  29: 678835.777 ops/s
# Warmup Iteration  30: 677839.491 ops/s
Iteration   1: 680149.394 ops/s
Iteration   2: 679311.634 ops/s
Iteration   3: 679461.018 ops/s
Iteration   4: 681940.325 ops/s
Iteration   5: 678147.851 ops/s
Iteration   6: 683258.403 ops/s
Iteration   7: 678568.062 ops/s
Iteration   8: 679084.708 ops/s
Iteration   9: 662596.126 ops/s
Iteration  10: 680049.070 ops/s
Iteration  11: 677346.286 ops/s
Iteration  12: 681336.976 ops/s
Iteration  13: 669331.155 ops/s
Iteration  14: 681869.048 ops/s
Iteration  15: 678197.598 ops/s
Iteration  16: 681853.617 ops/s
Iteration  17: 681343.916 ops/s
Iteration  18: 677618.477 ops/s
Iteration  19: 679979.983 ops/s
Iteration  20: 680902.333 ops/s
Iteration  21: 680073.920 ops/s
Iteration  22: 670123.874 ops/s
Iteration  23: 678797.799 ops/s
Iteration  24: 679582.783 ops/s
Iteration  25: 679954.307 ops/s
Iteration  26: 679399.897 ops/s
Iteration  27: 670324.933 ops/s
Iteration  28: 681218.764 ops/s
Iteration  29: 680408.319 ops/s
Iteration  30: 678638.013 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_detectWithOptional":
  678362.286 ±(99.9%) 2992.228 ops/s [Average]
  (min, avg, max) = (662596.126, 678362.286, 683258.403), stdev = 4478.626
  CI (99.9%): [675370.059, 681354.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_detectWithOptional  thrpt   30  678362.286 ± 2992.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2287719.921 ops/s
# Warmup Iteration   2: 5088588.409 ops/s
# Warmup Iteration   3: 5110549.648 ops/s
# Warmup Iteration   4: 4298486.539 ops/s
# Warmup Iteration   5: 5123320.697 ops/s
# Warmup Iteration   6: 5121960.349 ops/s
# Warmup Iteration   7: 5072566.914 ops/s
# Warmup Iteration   8: 5112003.496 ops/s
# Warmup Iteration   9: 5122742.410 ops/s
# Warmup Iteration  10: 5107810.770 ops/s
# Warmup Iteration  11: 5114517.558 ops/s
# Warmup Iteration  12: 5104023.245 ops/s
# Warmup Iteration  13: 5116945.144 ops/s
# Warmup Iteration  14: 5115416.237 ops/s
# Warmup Iteration  15: 5075788.302 ops/s
# Warmup Iteration  16: 5128941.409 ops/s
# Warmup Iteration  17: 5065247.766 ops/s
# Warmup Iteration  18: 5089075.821 ops/s
# Warmup Iteration  19: 5107268.100 ops/s
# Warmup Iteration  20: 5005585.143 ops/s
# Warmup Iteration  21: 5090639.455 ops/s
# Warmup Iteration  22: 5095335.061 ops/s
# Warmup Iteration  23: 5096857.578 ops/s
# Warmup Iteration  24: 5052579.133 ops/s
# Warmup Iteration  25: 5099970.974 ops/s
# Warmup Iteration  26: 5094423.437 ops/s
# Warmup Iteration  27: 5087700.337 ops/s
# Warmup Iteration  28: 5100572.239 ops/s
# Warmup Iteration  29: 5095841.904 ops/s
# Warmup Iteration  30: 5094286.252 ops/s
Iteration   1: 5106528.370 ops/s
Iteration   2: 5090493.705 ops/s
Iteration   3: 5025458.728 ops/s
Iteration   4: 5088756.704 ops/s
Iteration   5: 5066547.543 ops/s
Iteration   6: 5050614.638 ops/s
Iteration   7: 5085600.797 ops/s
Iteration   8: 5112604.955 ops/s
Iteration   9: 5105671.638 ops/s
Iteration  10: 5090338.588 ops/s
Iteration  11: 5060499.992 ops/s
Iteration  12: 5111623.122 ops/s
Iteration  13: 5100053.314 ops/s
Iteration  14: 5084305.582 ops/s
Iteration  15: 5083643.515 ops/s
Iteration  16: 5108661.526 ops/s
Iteration  17: 5102543.214 ops/s
Iteration  18: 5092440.171 ops/s
Iteration  19: 5089833.142 ops/s
Iteration  20: 5108060.880 ops/s
Iteration  21: 5108137.428 ops/s
Iteration  22: 5102929.115 ops/s
Iteration  23: 5114971.193 ops/s
Iteration  24: 5104966.839 ops/s
Iteration  25: 5100867.406 ops/s
Iteration  26: 5108807.079 ops/s
Iteration  27: 5107175.913 ops/s
Iteration  28: 5111048.902 ops/s
Iteration  29: 5097066.945 ops/s
Iteration  30: 5109029.783 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinct":
  5094309.358 ±(99.9%) 13633.562 ops/s [Average]
  (min, avg, max) = (5025458.728, 5094309.358, 5114971.193), stdev = 20406.075
  CI (99.9%): [5080675.796, 5107942.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_distinct  thrpt   30  5094309.358 ± 13633.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1003502.112 ops/s
# Warmup Iteration   2: 2215479.670 ops/s
# Warmup Iteration   3: 2304106.894 ops/s
# Warmup Iteration   4: 2027013.987 ops/s
# Warmup Iteration   5: 2214736.615 ops/s
# Warmup Iteration   6: 2301659.328 ops/s
# Warmup Iteration   7: 2290359.587 ops/s
# Warmup Iteration   8: 2316495.378 ops/s
# Warmup Iteration   9: 2321293.183 ops/s
# Warmup Iteration  10: 2322471.697 ops/s
# Warmup Iteration  11: 2317506.811 ops/s
# Warmup Iteration  12: 2274417.204 ops/s
# Warmup Iteration  13: 2310739.501 ops/s
# Warmup Iteration  14: 2319365.368 ops/s
# Warmup Iteration  15: 2306940.750 ops/s
# Warmup Iteration  16: 2316902.773 ops/s
# Warmup Iteration  17: 2320277.667 ops/s
# Warmup Iteration  18: 2323915.173 ops/s
# Warmup Iteration  19: 2321512.975 ops/s
# Warmup Iteration  20: 2313326.057 ops/s
# Warmup Iteration  21: 2325631.244 ops/s
# Warmup Iteration  22: 2316066.883 ops/s
# Warmup Iteration  23: 2316947.791 ops/s
# Warmup Iteration  24: 2322913.660 ops/s
# Warmup Iteration  25: 2324759.227 ops/s
# Warmup Iteration  26: 2319145.552 ops/s
# Warmup Iteration  27: 2299123.696 ops/s
# Warmup Iteration  28: 2319160.429 ops/s
# Warmup Iteration  29: 2319342.021 ops/s
# Warmup Iteration  30: 2315713.173 ops/s
Iteration   1: 2287277.411 ops/s
Iteration   2: 2322470.833 ops/s
Iteration   3: 2306409.352 ops/s
Iteration   4: 2281818.588 ops/s
Iteration   5: 2289803.116 ops/s
Iteration   6: 2310462.666 ops/s
Iteration   7: 2313720.575 ops/s
Iteration   8: 2311520.550 ops/s
Iteration   9: 2312933.256 ops/s
Iteration  10: 2309694.799 ops/s
Iteration  11: 2318377.308 ops/s
Iteration  12: 2323099.669 ops/s
Iteration  13: 2320353.140 ops/s
Iteration  14: 2317511.641 ops/s
Iteration  15: 2323248.829 ops/s
Iteration  16: 2296770.258 ops/s
Iteration  17: 2325425.599 ops/s
Iteration  18: 2317843.195 ops/s
Iteration  19: 2310314.535 ops/s
Iteration  20: 2321801.085 ops/s
Iteration  21: 2324256.625 ops/s
Iteration  22: 2316864.330 ops/s
Iteration  23: 2311929.493 ops/s
Iteration  24: 2322650.045 ops/s
Iteration  25: 2315698.836 ops/s
Iteration  26: 2279292.220 ops/s
Iteration  27: 2288743.532 ops/s
Iteration  28: 2326335.470 ops/s
Iteration  29: 2315209.939 ops/s
Iteration  30: 2310232.020 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctBy":
  2311068.964 ±(99.9%) 8953.233 ops/s [Average]
  (min, avg, max) = (2279292.220, 2311068.964, 2326335.470), stdev = 13400.779
  CI (99.9%): [2302115.731, 2320022.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_distinctBy  thrpt   30  2311068.964 ± 8953.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1003680.572 ops/s
# Warmup Iteration   2: 2181769.062 ops/s
# Warmup Iteration   3: 2243673.928 ops/s
# Warmup Iteration   4: 2044453.242 ops/s
# Warmup Iteration   5: 2060978.588 ops/s
# Warmup Iteration   6: 2231772.979 ops/s
# Warmup Iteration   7: 2252387.962 ops/s
# Warmup Iteration   8: 2241978.039 ops/s
# Warmup Iteration   9: 2233803.494 ops/s
# Warmup Iteration  10: 2243840.351 ops/s
# Warmup Iteration  11: 2257800.130 ops/s
# Warmup Iteration  12: 2238510.060 ops/s
# Warmup Iteration  13: 2233989.816 ops/s
# Warmup Iteration  14: 2257223.495 ops/s
# Warmup Iteration  15: 2246079.291 ops/s
# Warmup Iteration  16: 2249124.193 ops/s
# Warmup Iteration  17: 2258076.939 ops/s
# Warmup Iteration  18: 2229991.936 ops/s
# Warmup Iteration  19: 2253512.025 ops/s
# Warmup Iteration  20: 2243630.862 ops/s
# Warmup Iteration  21: 2257288.414 ops/s
# Warmup Iteration  22: 2255626.290 ops/s
# Warmup Iteration  23: 2258833.067 ops/s
# Warmup Iteration  24: 2249937.295 ops/s
# Warmup Iteration  25: 2256490.159 ops/s
# Warmup Iteration  26: 2227274.929 ops/s
# Warmup Iteration  27: 2250159.938 ops/s
# Warmup Iteration  28: 2254961.060 ops/s
# Warmup Iteration  29: 2257850.775 ops/s
# Warmup Iteration  30: 2245591.581 ops/s
Iteration   1: 2248510.839 ops/s
Iteration   2: 2241101.963 ops/s
Iteration   3: 2248122.718 ops/s
Iteration   4: 2234756.286 ops/s
Iteration   5: 2257209.704 ops/s
Iteration   6: 2259672.554 ops/s
Iteration   7: 2268680.536 ops/s
Iteration   8: 2211269.301 ops/s
Iteration   9: 2252313.516 ops/s
Iteration  10: 2222875.305 ops/s
Iteration  11: 2252237.617 ops/s
Iteration  12: 2269152.464 ops/s
Iteration  13: 2255786.990 ops/s
Iteration  14: 2243647.268 ops/s
Iteration  15: 2256263.806 ops/s
Iteration  16: 2256031.067 ops/s
Iteration  17: 2263714.708 ops/s
Iteration  18: 2243506.727 ops/s
Iteration  19: 2254316.535 ops/s
Iteration  20: 2251528.448 ops/s
Iteration  21: 2260233.202 ops/s
Iteration  22: 2258028.182 ops/s
Iteration  23: 2255893.229 ops/s
Iteration  24: 2256286.669 ops/s
Iteration  25: 2253252.096 ops/s
Iteration  26: 2259231.391 ops/s
Iteration  27: 2259190.677 ops/s
Iteration  28: 2253700.184 ops/s
Iteration  29: 2260883.661 ops/s
Iteration  30: 2254556.594 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2252065.141 ±(99.9%) 8110.987 ops/s [Average]
  (min, avg, max) = (2211269.301, 2252065.141, 2269152.464), stdev = 12140.144
  CI (99.9%): [2243954.154, 2260176.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2252065.141 ± 8110.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1147874.355 ops/s
# Warmup Iteration   2: 1913485.590 ops/s
# Warmup Iteration   3: 2118638.523 ops/s
# Warmup Iteration   4: 2129286.472 ops/s
# Warmup Iteration   5: 2130334.948 ops/s
# Warmup Iteration   6: 1761650.025 ops/s
# Warmup Iteration   7: 2136654.083 ops/s
# Warmup Iteration   8: 2116450.400 ops/s
# Warmup Iteration   9: 2132134.116 ops/s
# Warmup Iteration  10: 2124162.402 ops/s
# Warmup Iteration  11: 2113147.959 ops/s
# Warmup Iteration  12: 2135845.010 ops/s
# Warmup Iteration  13: 2129763.354 ops/s
# Warmup Iteration  14: 2132081.942 ops/s
# Warmup Iteration  15: 2112007.064 ops/s
# Warmup Iteration  16: 2111992.916 ops/s
# Warmup Iteration  17: 2134300.809 ops/s
# Warmup Iteration  18: 2127137.892 ops/s
# Warmup Iteration  19: 2112759.003 ops/s
# Warmup Iteration  20: 2129359.875 ops/s
# Warmup Iteration  21: 2132684.223 ops/s
# Warmup Iteration  22: 2129826.912 ops/s
# Warmup Iteration  23: 2113890.163 ops/s
# Warmup Iteration  24: 2125625.482 ops/s
# Warmup Iteration  25: 2131036.654 ops/s
# Warmup Iteration  26: 2134944.919 ops/s
# Warmup Iteration  27: 2130619.953 ops/s
# Warmup Iteration  28: 2131147.798 ops/s
# Warmup Iteration  29: 2136254.515 ops/s
# Warmup Iteration  30: 2133541.400 ops/s
Iteration   1: 2136378.524 ops/s
Iteration   2: 2129744.804 ops/s
Iteration   3: 2129066.036 ops/s
Iteration   4: 2130894.348 ops/s
Iteration   5: 2126028.995 ops/s
Iteration   6: 2137033.944 ops/s
Iteration   7: 2124319.302 ops/s
Iteration   8: 2124450.049 ops/s
Iteration   9: 2132139.099 ops/s
Iteration  10: 2134442.148 ops/s
Iteration  11: 2136508.959 ops/s
Iteration  12: 2132155.235 ops/s
Iteration  13: 2132909.380 ops/s
Iteration  14: 2138999.016 ops/s
Iteration  15: 2131039.419 ops/s
Iteration  16: 2128355.328 ops/s
Iteration  17: 2138439.450 ops/s
Iteration  18: 2123597.334 ops/s
Iteration  19: 2112795.301 ops/s
Iteration  20: 2132168.437 ops/s
Iteration  21: 2131431.372 ops/s
Iteration  22: 2129413.288 ops/s
Iteration  23: 2133307.841 ops/s
Iteration  24: 2094489.538 ops/s
Iteration  25: 2099123.064 ops/s
Iteration  26: 2122115.532 ops/s
Iteration  27: 2131584.009 ops/s
Iteration  28: 2130576.354 ops/s
Iteration  29: 2132538.914 ops/s
Iteration  30: 2138960.634 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop":
  2128500.188 ±(99.9%) 6863.174 ops/s [Average]
  (min, avg, max) = (2094489.538, 2128500.188, 2138999.016), stdev = 10272.477
  CI (99.9%): [2121637.014, 2135363.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_drop  thrpt   30  2128500.188 ± 6863.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1123819.776 ops/s
# Warmup Iteration   2: 2658783.554 ops/s
# Warmup Iteration   3: 2674675.053 ops/s
# Warmup Iteration   4: 2238108.267 ops/s
# Warmup Iteration   5: 2677662.206 ops/s
# Warmup Iteration   6: 2674354.034 ops/s
# Warmup Iteration   7: 2682848.076 ops/s
# Warmup Iteration   8: 2678083.860 ops/s
# Warmup Iteration   9: 2663554.704 ops/s
# Warmup Iteration  10: 2684584.733 ops/s
# Warmup Iteration  11: 2681578.595 ops/s
# Warmup Iteration  12: 2681699.658 ops/s
# Warmup Iteration  13: 2681871.662 ops/s
# Warmup Iteration  14: 2662148.161 ops/s
# Warmup Iteration  15: 2613433.275 ops/s
# Warmup Iteration  16: 2681002.797 ops/s
# Warmup Iteration  17: 2673658.375 ops/s
# Warmup Iteration  18: 2649765.818 ops/s
# Warmup Iteration  19: 2631908.246 ops/s
# Warmup Iteration  20: 2680769.921 ops/s
# Warmup Iteration  21: 2674486.832 ops/s
# Warmup Iteration  22: 2648620.519 ops/s
# Warmup Iteration  23: 2682567.074 ops/s
# Warmup Iteration  24: 2680328.500 ops/s
# Warmup Iteration  25: 2659521.293 ops/s
# Warmup Iteration  26: 2679789.426 ops/s
# Warmup Iteration  27: 2682945.429 ops/s
# Warmup Iteration  28: 2681981.544 ops/s
# Warmup Iteration  29: 2673443.188 ops/s
# Warmup Iteration  30: 2683096.814 ops/s
Iteration   1: 2668345.430 ops/s
Iteration   2: 2679665.309 ops/s
Iteration   3: 2679098.440 ops/s
Iteration   4: 2683563.030 ops/s
Iteration   5: 2648185.024 ops/s
Iteration   6: 2685074.568 ops/s
Iteration   7: 2689131.338 ops/s
Iteration   8: 2687128.358 ops/s
Iteration   9: 2639881.868 ops/s
Iteration  10: 2688088.338 ops/s
Iteration  11: 2676599.000 ops/s
Iteration  12: 2685328.775 ops/s
Iteration  13: 2682338.041 ops/s
Iteration  14: 2680856.323 ops/s
Iteration  15: 2575803.082 ops/s
Iteration  16: 2643199.426 ops/s
Iteration  17: 2676082.603 ops/s
Iteration  18: 2679286.377 ops/s
Iteration  19: 2680604.267 ops/s
Iteration  20: 2694679.804 ops/s
Iteration  21: 2638147.048 ops/s
Iteration  22: 2679468.732 ops/s
Iteration  23: 2676985.639 ops/s
Iteration  24: 2678975.284 ops/s
Iteration  25: 2683678.839 ops/s
Iteration  26: 2687900.461 ops/s
Iteration  27: 2679009.677 ops/s
Iteration  28: 2679375.719 ops/s
Iteration  29: 2681267.999 ops/s
Iteration  30: 2692924.123 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_dropWhile":
  2673355.764 ±(99.9%) 15775.988 ops/s [Average]
  (min, avg, max) = (2575803.082, 2673355.764, 2694679.804), stdev = 23612.758
  CI (99.9%): [2657579.776, 2689131.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_dropWhile  thrpt   30  2673355.764 ± 15775.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643544.124 ops/s
# Warmup Iteration   2: 735852.088 ops/s
# Warmup Iteration   3: 936359.576 ops/s
# Warmup Iteration   4: 935133.634 ops/s
# Warmup Iteration   5: 928614.947 ops/s
# Warmup Iteration   6: 940466.150 ops/s
# Warmup Iteration   7: 941868.399 ops/s
# Warmup Iteration   8: 938038.535 ops/s
# Warmup Iteration   9: 940049.165 ops/s
# Warmup Iteration  10: 784551.660 ops/s
# Warmup Iteration  11: 931055.560 ops/s
# Warmup Iteration  12: 938207.079 ops/s
# Warmup Iteration  13: 938695.202 ops/s
# Warmup Iteration  14: 940777.314 ops/s
# Warmup Iteration  15: 936195.912 ops/s
# Warmup Iteration  16: 938087.647 ops/s
# Warmup Iteration  17: 995334.329 ops/s
# Warmup Iteration  18: 993934.384 ops/s
# Warmup Iteration  19: 981742.829 ops/s
# Warmup Iteration  20: 994323.773 ops/s
# Warmup Iteration  21: 996421.103 ops/s
# Warmup Iteration  22: 993644.866 ops/s
# Warmup Iteration  23: 997761.496 ops/s
# Warmup Iteration  24: 995423.562 ops/s
# Warmup Iteration  25: 994033.976 ops/s
# Warmup Iteration  26: 996030.747 ops/s
# Warmup Iteration  27: 999074.111 ops/s
# Warmup Iteration  28: 1000381.179 ops/s
# Warmup Iteration  29: 1000826.044 ops/s
# Warmup Iteration  30: 999354.752 ops/s
Iteration   1: 1000418.845 ops/s
Iteration   2: 999493.247 ops/s
Iteration   3: 999040.122 ops/s
Iteration   4: 997364.384 ops/s
Iteration   5: 996270.608 ops/s
Iteration   6: 1002842.694 ops/s
Iteration   7: 999763.367 ops/s
Iteration   8: 999161.441 ops/s
Iteration   9: 994378.248 ops/s
Iteration  10: 996254.728 ops/s
Iteration  11: 1000738.820 ops/s
Iteration  12: 991022.437 ops/s
Iteration  13: 997143.432 ops/s
Iteration  14: 998724.587 ops/s
Iteration  15: 1002085.224 ops/s
Iteration  16: 995010.116 ops/s
Iteration  17: 998005.692 ops/s
Iteration  18: 983511.582 ops/s
Iteration  19: 996074.676 ops/s
Iteration  20: 1000457.611 ops/s
Iteration  21: 995611.574 ops/s
Iteration  22: 992982.328 ops/s
Iteration  23: 996363.232 ops/s
Iteration  24: 983709.044 ops/s
Iteration  25: 993063.147 ops/s
Iteration  26: 998903.383 ops/s
Iteration  27: 990395.502 ops/s
Iteration  28: 992106.959 ops/s
Iteration  29: 998208.558 ops/s
Iteration  30: 995129.206 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_drop_throws":
  996141.160 ±(99.9%) 3088.032 ops/s [Average]
  (min, avg, max) = (983511.582, 996141.160, 1002842.694), stdev = 4622.022
  CI (99.9%): [993053.128, 999229.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_drop_throws  thrpt   30  996141.160 ± 3088.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2565401.400 ops/s
# Warmup Iteration   2: 4274558.232 ops/s
# Warmup Iteration   3: 4662372.979 ops/s
# Warmup Iteration   4: 4678468.371 ops/s
# Warmup Iteration   5: 4695704.362 ops/s
# Warmup Iteration   6: 3840847.543 ops/s
# Warmup Iteration   7: 4692995.830 ops/s
# Warmup Iteration   8: 4700028.857 ops/s
# Warmup Iteration   9: 4619822.124 ops/s
# Warmup Iteration  10: 4614209.656 ops/s
# Warmup Iteration  11: 4696377.087 ops/s
# Warmup Iteration  12: 4672872.705 ops/s
# Warmup Iteration  13: 4674362.685 ops/s
# Warmup Iteration  14: 4700033.820 ops/s
# Warmup Iteration  15: 4642576.064 ops/s
# Warmup Iteration  16: 4656524.069 ops/s
# Warmup Iteration  17: 4648133.368 ops/s
# Warmup Iteration  18: 4702849.383 ops/s
# Warmup Iteration  19: 4697614.529 ops/s
# Warmup Iteration  20: 4689213.943 ops/s
# Warmup Iteration  21: 4647822.442 ops/s
# Warmup Iteration  22: 4678136.251 ops/s
# Warmup Iteration  23: 4689369.437 ops/s
# Warmup Iteration  24: 4693300.751 ops/s
# Warmup Iteration  25: 4680251.379 ops/s
# Warmup Iteration  26: 4699941.477 ops/s
# Warmup Iteration  27: 4683506.162 ops/s
# Warmup Iteration  28: 4680952.785 ops/s
# Warmup Iteration  29: 4698661.624 ops/s
# Warmup Iteration  30: 4697612.878 ops/s
Iteration   1: 4698046.664 ops/s
Iteration   2: 4684406.962 ops/s
Iteration   3: 4695019.730 ops/s
Iteration   4: 4648547.362 ops/s
Iteration   5: 4681064.361 ops/s
Iteration   6: 4705950.202 ops/s
Iteration   7: 4678474.756 ops/s
Iteration   8: 4684346.380 ops/s
Iteration   9: 4652692.259 ops/s
Iteration  10: 4684886.706 ops/s
Iteration  11: 4697507.333 ops/s
Iteration  12: 4608427.789 ops/s
Iteration  13: 4686368.776 ops/s
Iteration  14: 4696737.506 ops/s
Iteration  15: 4700430.552 ops/s
Iteration  16: 4689799.234 ops/s
Iteration  17: 4699361.647 ops/s
Iteration  18: 4699970.022 ops/s
Iteration  19: 4695262.923 ops/s
Iteration  20: 4622203.980 ops/s
Iteration  21: 4664022.529 ops/s
Iteration  22: 4621487.134 ops/s
Iteration  23: 4686344.522 ops/s
Iteration  24: 4692101.275 ops/s
Iteration  25: 4701741.826 ops/s
Iteration  26: 4694930.004 ops/s
Iteration  27: 4599996.993 ops/s
Iteration  28: 4694320.298 ops/s
Iteration  29: 4689694.440 ops/s
Iteration  30: 4700823.372 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_empty":
  4678498.918 ±(99.9%) 19719.167 ops/s [Average]
  (min, avg, max) = (4599996.993, 4678498.918, 4705950.202), stdev = 29514.724
  CI (99.9%): [4658779.751, 4698218.085] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_empty  thrpt   30  4678498.918 ± 19719.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125015.711 ops/s
# Warmup Iteration   2: 257463.516 ops/s
# Warmup Iteration   3: 265906.307 ops/s
# Warmup Iteration   4: 267814.158 ops/s
# Warmup Iteration   5: 224162.602 ops/s
# Warmup Iteration   6: 267642.178 ops/s
# Warmup Iteration   7: 268417.249 ops/s
# Warmup Iteration   8: 264661.414 ops/s
# Warmup Iteration   9: 268270.598 ops/s
# Warmup Iteration  10: 268026.146 ops/s
# Warmup Iteration  11: 268134.396 ops/s
# Warmup Iteration  12: 268553.928 ops/s
# Warmup Iteration  13: 267831.562 ops/s
# Warmup Iteration  14: 267986.551 ops/s
# Warmup Iteration  15: 268043.652 ops/s
# Warmup Iteration  16: 268810.505 ops/s
# Warmup Iteration  17: 269305.490 ops/s
# Warmup Iteration  18: 268848.778 ops/s
# Warmup Iteration  19: 269553.361 ops/s
# Warmup Iteration  20: 266644.529 ops/s
# Warmup Iteration  21: 269301.351 ops/s
# Warmup Iteration  22: 268752.762 ops/s
# Warmup Iteration  23: 267268.617 ops/s
# Warmup Iteration  24: 268901.486 ops/s
# Warmup Iteration  25: 269372.547 ops/s
# Warmup Iteration  26: 267473.359 ops/s
# Warmup Iteration  27: 268954.441 ops/s
# Warmup Iteration  28: 267478.637 ops/s
# Warmup Iteration  29: 267410.973 ops/s
# Warmup Iteration  30: 266849.062 ops/s
Iteration   1: 269387.424 ops/s
Iteration   2: 267872.601 ops/s
Iteration   3: 269353.726 ops/s
Iteration   4: 267683.949 ops/s
Iteration   5: 264665.319 ops/s
Iteration   6: 268783.123 ops/s
Iteration   7: 269409.485 ops/s
Iteration   8: 268709.465 ops/s
Iteration   9: 269512.984 ops/s
Iteration  10: 268674.013 ops/s
Iteration  11: 269245.693 ops/s
Iteration  12: 269503.450 ops/s
Iteration  13: 260260.030 ops/s
Iteration  14: 269160.407 ops/s
Iteration  15: 268972.005 ops/s
Iteration  16: 268881.626 ops/s
Iteration  17: 269443.556 ops/s
Iteration  18: 268610.057 ops/s
Iteration  19: 268983.122 ops/s
Iteration  20: 268560.323 ops/s
Iteration  21: 268084.043 ops/s
Iteration  22: 267643.641 ops/s
Iteration  23: 269028.371 ops/s
Iteration  24: 269299.361 ops/s
Iteration  25: 269452.032 ops/s
Iteration  26: 269615.895 ops/s
Iteration  27: 269312.947 ops/s
Iteration  28: 268799.242 ops/s
Iteration  29: 269061.198 ops/s
Iteration  30: 268609.218 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_equalsAndHashCode":
  268485.944 ±(99.9%) 1213.940 ops/s [Average]
  (min, avg, max) = (260260.030, 268485.944, 269615.895), stdev = 1816.969
  CI (99.9%): [267272.003, 269699.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  268485.944 ± 1213.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432534.361 ops/s
# Warmup Iteration   2: 619852.259 ops/s
# Warmup Iteration   3: 747099.169 ops/s
# Warmup Iteration   4: 750653.488 ops/s
# Warmup Iteration   5: 748860.075 ops/s
# Warmup Iteration   6: 744270.609 ops/s
# Warmup Iteration   7: 735461.564 ops/s
# Warmup Iteration   8: 649183.977 ops/s
# Warmup Iteration   9: 746751.230 ops/s
# Warmup Iteration  10: 747176.592 ops/s
# Warmup Iteration  11: 751798.201 ops/s
# Warmup Iteration  12: 754904.399 ops/s
# Warmup Iteration  13: 753775.557 ops/s
# Warmup Iteration  14: 755242.963 ops/s
# Warmup Iteration  15: 749051.820 ops/s
# Warmup Iteration  16: 753913.973 ops/s
# Warmup Iteration  17: 748961.872 ops/s
# Warmup Iteration  18: 750317.825 ops/s
# Warmup Iteration  19: 750636.103 ops/s
# Warmup Iteration  20: 747951.902 ops/s
# Warmup Iteration  21: 746713.185 ops/s
# Warmup Iteration  22: 749567.999 ops/s
# Warmup Iteration  23: 749757.999 ops/s
# Warmup Iteration  24: 751056.750 ops/s
# Warmup Iteration  25: 741362.075 ops/s
# Warmup Iteration  26: 749241.176 ops/s
# Warmup Iteration  27: 743771.192 ops/s
# Warmup Iteration  28: 748410.493 ops/s
# Warmup Iteration  29: 750045.569 ops/s
# Warmup Iteration  30: 749505.083 ops/s
Iteration   1: 745972.698 ops/s
Iteration   2: 749630.395 ops/s
Iteration   3: 752169.064 ops/s
Iteration   4: 750906.543 ops/s
Iteration   5: 751285.918 ops/s
Iteration   6: 749444.207 ops/s
Iteration   7: 749938.814 ops/s
Iteration   8: 750211.922 ops/s
Iteration   9: 746160.506 ops/s
Iteration  10: 751667.907 ops/s
Iteration  11: 743685.371 ops/s
Iteration  12: 752391.530 ops/s
Iteration  13: 735328.209 ops/s
Iteration  14: 749491.743 ops/s
Iteration  15: 733813.575 ops/s
Iteration  16: 748157.147 ops/s
Iteration  17: 751405.639 ops/s
Iteration  18: 752873.120 ops/s
Iteration  19: 747983.710 ops/s
Iteration  20: 743374.845 ops/s
Iteration  21: 737900.642 ops/s
Iteration  22: 747091.652 ops/s
Iteration  23: 748032.070 ops/s
Iteration  24: 745764.954 ops/s
Iteration  25: 752148.584 ops/s
Iteration  26: 749759.439 ops/s
Iteration  27: 750686.751 ops/s
Iteration  28: 748333.468 ops/s
Iteration  29: 750869.372 ops/s
Iteration  30: 738694.532 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollect":
  747505.811 ±(99.9%) 3403.649 ops/s [Average]
  (min, avg, max) = (733813.575, 747505.811, 752873.120), stdev = 5094.421
  CI (99.9%): [744102.162, 750909.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollect  thrpt   30  747505.811 ± 3403.649  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1287157.466 ops/s
# Warmup Iteration   2: 3112968.688 ops/s
# Warmup Iteration   3: 3136481.991 ops/s
# Warmup Iteration   4: 2611078.461 ops/s
# Warmup Iteration   5: 3146211.588 ops/s
# Warmup Iteration   6: 3138709.729 ops/s
# Warmup Iteration   7: 3138518.085 ops/s
# Warmup Iteration   8: 3139222.201 ops/s
# Warmup Iteration   9: 3118038.402 ops/s
# Warmup Iteration  10: 3130427.749 ops/s
# Warmup Iteration  11: 3127725.028 ops/s
# Warmup Iteration  12: 3086432.960 ops/s
# Warmup Iteration  13: 3108249.424 ops/s
# Warmup Iteration  14: 3112457.802 ops/s
# Warmup Iteration  15: 3117061.289 ops/s
# Warmup Iteration  16: 3124757.449 ops/s
# Warmup Iteration  17: 3120987.836 ops/s
# Warmup Iteration  18: 3143403.686 ops/s
# Warmup Iteration  19: 3143186.759 ops/s
# Warmup Iteration  20: 3152416.117 ops/s
# Warmup Iteration  21: 3145044.019 ops/s
# Warmup Iteration  22: 3147965.891 ops/s
# Warmup Iteration  23: 3152505.311 ops/s
# Warmup Iteration  24: 3145871.799 ops/s
# Warmup Iteration  25: 3131949.844 ops/s
# Warmup Iteration  26: 3139663.067 ops/s
# Warmup Iteration  27: 3131689.619 ops/s
# Warmup Iteration  28: 3144162.778 ops/s
# Warmup Iteration  29: 3117500.720 ops/s
# Warmup Iteration  30: 3088486.876 ops/s
Iteration   1: 3149170.153 ops/s
Iteration   2: 3151146.766 ops/s
Iteration   3: 3147904.697 ops/s
Iteration   4: 3139658.784 ops/s
Iteration   5: 3146978.885 ops/s
Iteration   6: 3110868.326 ops/s
Iteration   7: 3149117.900 ops/s
Iteration   8: 3133074.369 ops/s
Iteration   9: 3103200.629 ops/s
Iteration  10: 3122166.394 ops/s
Iteration  11: 3142414.094 ops/s
Iteration  12: 3146997.593 ops/s
Iteration  13: 3155120.220 ops/s
Iteration  14: 3132716.648 ops/s
Iteration  15: 3151358.193 ops/s
Iteration  16: 3142390.448 ops/s
Iteration  17: 3132712.222 ops/s
Iteration  18: 3136002.850 ops/s
Iteration  19: 3156002.195 ops/s
Iteration  20: 3098227.830 ops/s
Iteration  21: 3150024.244 ops/s
Iteration  22: 3135758.618 ops/s
Iteration  23: 3134689.001 ops/s
Iteration  24: 3147012.226 ops/s
Iteration  25: 3143948.189 ops/s
Iteration  26: 3136452.959 ops/s
Iteration  27: 3151672.064 ops/s
Iteration  28: 3146205.730 ops/s
Iteration  29: 3096407.132 ops/s
Iteration  30: 3142020.499 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectBoolean":
  3137713.995 ±(99.9%) 10857.895 ops/s [Average]
  (min, avg, max) = (3096407.132, 3137713.995, 3156002.195), stdev = 16251.588
  CI (99.9%): [3126856.100, 3148571.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3137713.995 ± 10857.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703428.972 ops/s
# Warmup Iteration   2: 1385803.511 ops/s
# Warmup Iteration   3: 1488122.057 ops/s
# Warmup Iteration   4: 1492973.456 ops/s
# Warmup Iteration   5: 1264113.654 ops/s
# Warmup Iteration   6: 1503987.990 ops/s
# Warmup Iteration   7: 1505633.280 ops/s
# Warmup Iteration   8: 1508664.461 ops/s
# Warmup Iteration   9: 1513726.936 ops/s
# Warmup Iteration  10: 1508218.552 ops/s
# Warmup Iteration  11: 1502536.325 ops/s
# Warmup Iteration  12: 1515611.084 ops/s
# Warmup Iteration  13: 1499967.362 ops/s
# Warmup Iteration  14: 1508705.340 ops/s
# Warmup Iteration  15: 1499889.051 ops/s
# Warmup Iteration  16: 1508548.683 ops/s
# Warmup Iteration  17: 1502974.163 ops/s
# Warmup Iteration  18: 1514808.732 ops/s
# Warmup Iteration  19: 1511146.562 ops/s
# Warmup Iteration  20: 1499621.934 ops/s
# Warmup Iteration  21: 1513826.365 ops/s
# Warmup Iteration  22: 1499040.872 ops/s
# Warmup Iteration  23: 1514722.989 ops/s
# Warmup Iteration  24: 1512629.617 ops/s
# Warmup Iteration  25: 1501921.212 ops/s
# Warmup Iteration  26: 1507797.401 ops/s
# Warmup Iteration  27: 1511148.128 ops/s
# Warmup Iteration  28: 1500353.923 ops/s
# Warmup Iteration  29: 1511897.511 ops/s
# Warmup Iteration  30: 1495943.722 ops/s
Iteration   1: 1515955.067 ops/s
Iteration   2: 1504041.445 ops/s
Iteration   3: 1506761.903 ops/s
Iteration   4: 1491269.326 ops/s
Iteration   5: 1495477.029 ops/s
Iteration   6: 1489435.506 ops/s
Iteration   7: 1515445.680 ops/s
Iteration   8: 1486637.738 ops/s
Iteration   9: 1506290.329 ops/s
Iteration  10: 1516085.648 ops/s
Iteration  11: 1514554.386 ops/s
Iteration  12: 1513724.439 ops/s
Iteration  13: 1515249.282 ops/s
Iteration  14: 1513002.822 ops/s
Iteration  15: 1514834.905 ops/s
Iteration  16: 1484776.107 ops/s
Iteration  17: 1503777.370 ops/s
Iteration  18: 1514372.085 ops/s
Iteration  19: 1515766.103 ops/s
Iteration  20: 1514225.970 ops/s
Iteration  21: 1483779.154 ops/s
Iteration  22: 1482425.832 ops/s
Iteration  23: 1512899.153 ops/s
Iteration  24: 1513264.850 ops/s
Iteration  25: 1515953.018 ops/s
Iteration  26: 1514444.008 ops/s
Iteration  27: 1513491.446 ops/s
Iteration  28: 1517204.810 ops/s
Iteration  29: 1487955.554 ops/s
Iteration  30: 1510581.009 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectByte":
  1506122.732 ±(99.9%) 7995.844 ops/s [Average]
  (min, avg, max) = (1482425.832, 1506122.732, 1517204.810), stdev = 11967.803
  CI (99.9%): [1498126.889, 1514118.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1506122.732 ± 7995.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763896.086 ops/s
# Warmup Iteration   2: 1813015.368 ops/s
# Warmup Iteration   3: 1869706.772 ops/s
# Warmup Iteration   4: 1543536.136 ops/s
# Warmup Iteration   5: 1865083.670 ops/s
# Warmup Iteration   6: 1864376.563 ops/s
# Warmup Iteration   7: 1874108.354 ops/s
# Warmup Iteration   8: 1868775.577 ops/s
# Warmup Iteration   9: 1871842.030 ops/s
# Warmup Iteration  10: 1874952.241 ops/s
# Warmup Iteration  11: 1868775.922 ops/s
# Warmup Iteration  12: 1871713.250 ops/s
# Warmup Iteration  13: 1873294.470 ops/s
# Warmup Iteration  14: 1863059.774 ops/s
# Warmup Iteration  15: 1870300.848 ops/s
# Warmup Iteration  16: 1863042.472 ops/s
# Warmup Iteration  17: 1868517.350 ops/s
# Warmup Iteration  18: 1841534.011 ops/s
# Warmup Iteration  19: 1865244.933 ops/s
# Warmup Iteration  20: 1871688.044 ops/s
# Warmup Iteration  21: 1873360.743 ops/s
# Warmup Iteration  22: 1866865.497 ops/s
# Warmup Iteration  23: 1861030.514 ops/s
# Warmup Iteration  24: 1837689.548 ops/s
# Warmup Iteration  25: 1846913.864 ops/s
# Warmup Iteration  26: 1864408.025 ops/s
# Warmup Iteration  27: 1870518.928 ops/s
# Warmup Iteration  28: 1863639.115 ops/s
# Warmup Iteration  29: 1865890.862 ops/s
# Warmup Iteration  30: 1868351.515 ops/s
Iteration   1: 1866500.269 ops/s
Iteration   2: 1852905.227 ops/s
Iteration   3: 1864324.731 ops/s
Iteration   4: 1867222.174 ops/s
Iteration   5: 1865159.458 ops/s
Iteration   6: 1868873.848 ops/s
Iteration   7: 1864894.595 ops/s
Iteration   8: 1870783.705 ops/s
Iteration   9: 1841188.903 ops/s
Iteration  10: 1867628.368 ops/s
Iteration  11: 1859125.620 ops/s
Iteration  12: 1870202.220 ops/s
Iteration  13: 1875073.539 ops/s
Iteration  14: 1870119.958 ops/s
Iteration  15: 1871919.896 ops/s
Iteration  16: 1869189.887 ops/s
Iteration  17: 1868140.351 ops/s
Iteration  18: 1878001.645 ops/s
Iteration  19: 1831629.567 ops/s
Iteration  20: 1869225.842 ops/s
Iteration  21: 1867647.168 ops/s
Iteration  22: 1860920.951 ops/s
Iteration  23: 1840189.627 ops/s
Iteration  24: 1865642.933 ops/s
Iteration  25: 1862968.457 ops/s
Iteration  26: 1863876.254 ops/s
Iteration  27: 1865622.928 ops/s
Iteration  28: 1874725.815 ops/s
Iteration  29: 1870525.539 ops/s
Iteration  30: 1849959.551 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectChar":
  1863806.301 ±(99.9%) 7121.975 ops/s [Average]
  (min, avg, max) = (1831629.567, 1863806.301, 1878001.645), stdev = 10659.838
  CI (99.9%): [1856684.326, 1870928.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1863806.301 ± 7121.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425513.986 ops/s
# Warmup Iteration   2: 1017289.529 ops/s
# Warmup Iteration   3: 1032360.388 ops/s
# Warmup Iteration   4: 862706.831 ops/s
# Warmup Iteration   5: 1031335.854 ops/s
# Warmup Iteration   6: 1030876.363 ops/s
# Warmup Iteration   7: 1030202.998 ops/s
# Warmup Iteration   8: 1022460.568 ops/s
# Warmup Iteration   9: 1024467.654 ops/s
# Warmup Iteration  10: 1034159.550 ops/s
# Warmup Iteration  11: 1034459.859 ops/s
# Warmup Iteration  12: 1035442.043 ops/s
# Warmup Iteration  13: 1035424.990 ops/s
# Warmup Iteration  14: 1025370.170 ops/s
# Warmup Iteration  15: 1030728.726 ops/s
# Warmup Iteration  16: 1016873.394 ops/s
# Warmup Iteration  17: 1034502.570 ops/s
# Warmup Iteration  18: 1030028.558 ops/s
# Warmup Iteration  19: 1033027.235 ops/s
# Warmup Iteration  20: 1035533.560 ops/s
# Warmup Iteration  21: 1016780.237 ops/s
# Warmup Iteration  22: 1032732.310 ops/s
# Warmup Iteration  23: 1033337.555 ops/s
# Warmup Iteration  24: 1034591.124 ops/s
# Warmup Iteration  25: 1031881.639 ops/s
# Warmup Iteration  26: 1034236.469 ops/s
# Warmup Iteration  27: 1031041.566 ops/s
# Warmup Iteration  28: 1036249.234 ops/s
# Warmup Iteration  29: 1032742.230 ops/s
# Warmup Iteration  30: 1035539.587 ops/s
Iteration   1: 1033241.181 ops/s
Iteration   2: 1033222.356 ops/s
Iteration   3: 1028822.265 ops/s
Iteration   4: 1031022.884 ops/s
Iteration   5: 1019595.521 ops/s
Iteration   6: 1035466.541 ops/s
Iteration   7: 1031603.485 ops/s
Iteration   8: 1031443.212 ops/s
Iteration   9: 1035540.197 ops/s
Iteration  10: 1018355.593 ops/s
Iteration  11: 1032989.826 ops/s
Iteration  12: 1032950.354 ops/s
Iteration  13: 1036413.325 ops/s
Iteration  14: 1028662.870 ops/s
Iteration  15: 1028810.659 ops/s
Iteration  16: 1028681.950 ops/s
Iteration  17: 1036526.361 ops/s
Iteration  18: 1032606.246 ops/s
Iteration  19: 1031009.502 ops/s
Iteration  20: 1014372.762 ops/s
Iteration  21: 1034682.348 ops/s
Iteration  22: 1034043.451 ops/s
Iteration  23: 1032007.317 ops/s
Iteration  24: 1035767.081 ops/s
Iteration  25: 997130.520 ops/s
Iteration  26: 1032039.725 ops/s
Iteration  27: 1018649.783 ops/s
Iteration  28: 1021187.711 ops/s
Iteration  29: 1018397.576 ops/s
Iteration  30: 1033996.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectDouble":
  1028641.318 ±(99.9%) 5756.087 ops/s [Average]
  (min, avg, max) = (997130.520, 1028641.318, 1036526.361), stdev = 8615.441
  CI (99.9%): [1022885.231, 1034397.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1028641.318 ± 5756.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 605648.175 ops/s
# Warmup Iteration   2: 1337734.387 ops/s
# Warmup Iteration   3: 1408665.539 ops/s
# Warmup Iteration   4: 1419813.669 ops/s
# Warmup Iteration   5: 1175544.547 ops/s
# Warmup Iteration   6: 1420311.706 ops/s
# Warmup Iteration   7: 1417698.527 ops/s
# Warmup Iteration   8: 1414903.565 ops/s
# Warmup Iteration   9: 1409913.905 ops/s
# Warmup Iteration  10: 1421299.337 ops/s
# Warmup Iteration  11: 1418882.038 ops/s
# Warmup Iteration  12: 1418908.202 ops/s
# Warmup Iteration  13: 1418220.096 ops/s
# Warmup Iteration  14: 1408037.080 ops/s
# Warmup Iteration  15: 1402962.264 ops/s
# Warmup Iteration  16: 1403987.898 ops/s
# Warmup Iteration  17: 1409225.360 ops/s
# Warmup Iteration  18: 1419963.642 ops/s
# Warmup Iteration  19: 1418935.934 ops/s
# Warmup Iteration  20: 1419809.887 ops/s
# Warmup Iteration  21: 1392249.950 ops/s
# Warmup Iteration  22: 1408592.374 ops/s
# Warmup Iteration  23: 1421204.996 ops/s
# Warmup Iteration  24: 1416126.559 ops/s
# Warmup Iteration  25: 1407116.171 ops/s
# Warmup Iteration  26: 1414988.441 ops/s
# Warmup Iteration  27: 1415666.267 ops/s
# Warmup Iteration  28: 1419950.127 ops/s
# Warmup Iteration  29: 1415271.431 ops/s
# Warmup Iteration  30: 1418272.547 ops/s
Iteration   1: 1397513.556 ops/s
Iteration   2: 1424348.922 ops/s
Iteration   3: 1421331.238 ops/s
Iteration   4: 1422868.373 ops/s
Iteration   5: 1413941.187 ops/s
Iteration   6: 1420564.809 ops/s
Iteration   7: 1415560.324 ops/s
Iteration   8: 1414571.087 ops/s
Iteration   9: 1422405.194 ops/s
Iteration  10: 1423893.275 ops/s
Iteration  11: 1418513.761 ops/s
Iteration  12: 1416842.980 ops/s
Iteration  13: 1422236.557 ops/s
Iteration  14: 1419614.617 ops/s
Iteration  15: 1414695.470 ops/s
Iteration  16: 1415971.580 ops/s
Iteration  17: 1394267.705 ops/s
Iteration  18: 1419250.493 ops/s
Iteration  19: 1418434.305 ops/s
Iteration  20: 1396560.958 ops/s
Iteration  21: 1421546.847 ops/s
Iteration  22: 1420329.513 ops/s
Iteration  23: 1424282.332 ops/s
Iteration  24: 1421765.986 ops/s
Iteration  25: 1419719.030 ops/s
Iteration  26: 1421898.033 ops/s
Iteration  27: 1422985.118 ops/s
Iteration  28: 1420176.352 ops/s
Iteration  29: 1401691.337 ops/s
Iteration  30: 1419550.853 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectFloat":
  1416911.060 ±(99.9%) 5553.502 ops/s [Average]
  (min, avg, max) = (1394267.705, 1416911.060, 1424348.922), stdev = 8312.220
  CI (99.9%): [1411357.558, 1422464.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1416911.060 ± 5553.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722961.309 ops/s
# Warmup Iteration   2: 1880538.826 ops/s
# Warmup Iteration   3: 1905883.252 ops/s
# Warmup Iteration   4: 1584123.848 ops/s
# Warmup Iteration   5: 1906689.968 ops/s
# Warmup Iteration   6: 1902272.991 ops/s
# Warmup Iteration   7: 1907258.972 ops/s
# Warmup Iteration   8: 1910069.266 ops/s
# Warmup Iteration   9: 1907659.881 ops/s
# Warmup Iteration  10: 1896871.409 ops/s
# Warmup Iteration  11: 1903483.810 ops/s
# Warmup Iteration  12: 1907583.519 ops/s
# Warmup Iteration  13: 1910037.450 ops/s
# Warmup Iteration  14: 1891795.086 ops/s
# Warmup Iteration  15: 1901481.570 ops/s
# Warmup Iteration  16: 1894852.009 ops/s
# Warmup Iteration  17: 1907420.572 ops/s
# Warmup Iteration  18: 1903320.151 ops/s
# Warmup Iteration  19: 1912215.240 ops/s
# Warmup Iteration  20: 1901304.739 ops/s
# Warmup Iteration  21: 1912133.153 ops/s
# Warmup Iteration  22: 1911367.836 ops/s
# Warmup Iteration  23: 1909429.155 ops/s
# Warmup Iteration  24: 1908736.464 ops/s
# Warmup Iteration  25: 1896207.622 ops/s
# Warmup Iteration  26: 1892278.233 ops/s
# Warmup Iteration  27: 1908215.469 ops/s
# Warmup Iteration  28: 1903682.398 ops/s
# Warmup Iteration  29: 1909132.366 ops/s
# Warmup Iteration  30: 1898670.001 ops/s
Iteration   1: 1909326.748 ops/s
Iteration   2: 1835793.740 ops/s
Iteration   3: 1905077.254 ops/s
Iteration   4: 1907287.131 ops/s
Iteration   5: 1911319.544 ops/s
Iteration   6: 1910372.026 ops/s
Iteration   7: 1905317.574 ops/s
Iteration   8: 1908484.686 ops/s
Iteration   9: 1909578.318 ops/s
Iteration  10: 1876706.133 ops/s
Iteration  11: 1901847.559 ops/s
Iteration  12: 1908624.180 ops/s
Iteration  13: 1911664.277 ops/s
Iteration  14: 1908059.379 ops/s
Iteration  15: 1908664.798 ops/s
Iteration  16: 1908090.822 ops/s
Iteration  17: 1911092.829 ops/s
Iteration  18: 1905990.479 ops/s
Iteration  19: 1904049.333 ops/s
Iteration  20: 1882809.312 ops/s
Iteration  21: 1907281.239 ops/s
Iteration  22: 1905313.289 ops/s
Iteration  23: 1904906.563 ops/s
Iteration  24: 1909159.166 ops/s
Iteration  25: 1878485.588 ops/s
Iteration  26: 1905173.006 ops/s
Iteration  27: 1910030.811 ops/s
Iteration  28: 1911260.870 ops/s
Iteration  29: 1875999.171 ops/s
Iteration  30: 1916020.524 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectInt":
  1901792.878 ±(99.9%) 10951.095 ops/s [Average]
  (min, avg, max) = (1835793.740, 1901792.878, 1916020.524), stdev = 16391.085
  CI (99.9%): [1890841.783, 1912743.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1901792.878 ± 10951.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 667031.906 ops/s
# Warmup Iteration   2: 1640718.422 ops/s
# Warmup Iteration   3: 1612667.261 ops/s
# Warmup Iteration   4: 1414813.619 ops/s
# Warmup Iteration   5: 1650340.173 ops/s
# Warmup Iteration   6: 1656064.267 ops/s
# Warmup Iteration   7: 1653670.460 ops/s
# Warmup Iteration   8: 1658197.921 ops/s
# Warmup Iteration   9: 1653820.651 ops/s
# Warmup Iteration  10: 1658668.340 ops/s
# Warmup Iteration  11: 1658476.092 ops/s
# Warmup Iteration  12: 1646940.643 ops/s
# Warmup Iteration  13: 1658387.507 ops/s
# Warmup Iteration  14: 1642112.620 ops/s
# Warmup Iteration  15: 1654650.444 ops/s
# Warmup Iteration  16: 1658230.244 ops/s
# Warmup Iteration  17: 1640596.144 ops/s
# Warmup Iteration  18: 1650920.323 ops/s
# Warmup Iteration  19: 1647892.227 ops/s
# Warmup Iteration  20: 1656180.496 ops/s
# Warmup Iteration  21: 1657506.368 ops/s
# Warmup Iteration  22: 1650787.404 ops/s
# Warmup Iteration  23: 1657581.357 ops/s
# Warmup Iteration  24: 1633243.908 ops/s
# Warmup Iteration  25: 1659321.401 ops/s
# Warmup Iteration  26: 1654537.987 ops/s
# Warmup Iteration  27: 1645249.498 ops/s
# Warmup Iteration  28: 1654023.119 ops/s
# Warmup Iteration  29: 1653017.809 ops/s
# Warmup Iteration  30: 1658616.600 ops/s
Iteration   1: 1652396.938 ops/s
Iteration   2: 1653465.795 ops/s
Iteration   3: 1639652.849 ops/s
Iteration   4: 1656670.353 ops/s
Iteration   5: 1652105.783 ops/s
Iteration   6: 1657937.648 ops/s
Iteration   7: 1655744.488 ops/s
Iteration   8: 1653989.533 ops/s
Iteration   9: 1658132.007 ops/s
Iteration  10: 1630576.611 ops/s
Iteration  11: 1650258.974 ops/s
Iteration  12: 1657675.126 ops/s
Iteration  13: 1649576.319 ops/s
Iteration  14: 1656109.697 ops/s
Iteration  15: 1650443.139 ops/s
Iteration  16: 1656121.131 ops/s
Iteration  17: 1652599.596 ops/s
Iteration  18: 1649964.048 ops/s
Iteration  19: 1660589.109 ops/s
Iteration  20: 1622406.309 ops/s
Iteration  21: 1652227.149 ops/s
Iteration  22: 1657862.996 ops/s
Iteration  23: 1655063.398 ops/s
Iteration  24: 1662232.904 ops/s
Iteration  25: 1658815.100 ops/s
Iteration  26: 1653130.191 ops/s
Iteration  27: 1646195.875 ops/s
Iteration  28: 1655633.044 ops/s
Iteration  29: 1655578.620 ops/s
Iteration  30: 1626955.874 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectLong":
  1651337.020 ±(99.9%) 6359.870 ops/s [Average]
  (min, avg, max) = (1622406.309, 1651337.020, 1662232.904), stdev = 9519.154
  CI (99.9%): [1644977.150, 1657696.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1651337.020 ± 6359.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754044.151 ops/s
# Warmup Iteration   2: 1903916.859 ops/s
# Warmup Iteration   3: 1919458.586 ops/s
# Warmup Iteration   4: 1605478.803 ops/s
# Warmup Iteration   5: 1920931.618 ops/s
# Warmup Iteration   6: 1911336.834 ops/s
# Warmup Iteration   7: 1911538.256 ops/s
# Warmup Iteration   8: 1928424.021 ops/s
# Warmup Iteration   9: 1912341.651 ops/s
# Warmup Iteration  10: 1924233.586 ops/s
# Warmup Iteration  11: 1928056.933 ops/s
# Warmup Iteration  12: 1928430.829 ops/s
# Warmup Iteration  13: 1923156.094 ops/s
# Warmup Iteration  14: 1923119.902 ops/s
# Warmup Iteration  15: 1924630.978 ops/s
# Warmup Iteration  16: 1913894.744 ops/s
# Warmup Iteration  17: 1925577.970 ops/s
# Warmup Iteration  18: 1900347.644 ops/s
# Warmup Iteration  19: 1907777.828 ops/s
# Warmup Iteration  20: 1909410.169 ops/s
# Warmup Iteration  21: 1912892.330 ops/s
# Warmup Iteration  22: 1920799.998 ops/s
# Warmup Iteration  23: 1912268.294 ops/s
# Warmup Iteration  24: 1925456.297 ops/s
# Warmup Iteration  25: 1906802.076 ops/s
# Warmup Iteration  26: 1911820.954 ops/s
# Warmup Iteration  27: 1921642.785 ops/s
# Warmup Iteration  28: 1927110.583 ops/s
# Warmup Iteration  29: 1920083.050 ops/s
# Warmup Iteration  30: 1916277.063 ops/s
Iteration   1: 1906825.330 ops/s
Iteration   2: 1928354.806 ops/s
Iteration   3: 1923628.468 ops/s
Iteration   4: 1923876.866 ops/s
Iteration   5: 1928310.263 ops/s
Iteration   6: 1927055.389 ops/s
Iteration   7: 1921533.572 ops/s
Iteration   8: 1925095.454 ops/s
Iteration   9: 1890153.465 ops/s
Iteration  10: 1923651.530 ops/s
Iteration  11: 1922604.516 ops/s
Iteration  12: 1914330.938 ops/s
Iteration  13: 1920868.406 ops/s
Iteration  14: 1931120.257 ops/s
Iteration  15: 1924946.401 ops/s
Iteration  16: 1918315.204 ops/s
Iteration  17: 1905592.033 ops/s
Iteration  18: 1927110.658 ops/s
Iteration  19: 1923457.298 ops/s
Iteration  20: 1898987.127 ops/s
Iteration  21: 1915415.375 ops/s
Iteration  22: 1924449.363 ops/s
Iteration  23: 1922141.289 ops/s
Iteration  24: 1925882.924 ops/s
Iteration  25: 1928443.177 ops/s
Iteration  26: 1928341.092 ops/s
Iteration  27: 1925999.808 ops/s
Iteration  28: 1926140.549 ops/s
Iteration  29: 1907659.386 ops/s
Iteration  30: 1931577.759 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectShort":
  1920728.957 ±(99.9%) 6553.344 ops/s [Average]
  (min, avg, max) = (1890153.465, 1920728.957, 1931577.759), stdev = 9808.738
  CI (99.9%): [1914175.612, 1927282.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1920728.957 ± 6553.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 209097.835 ops/s
# Warmup Iteration   2: 363899.752 ops/s
# Warmup Iteration   3: 428900.469 ops/s
# Warmup Iteration   4: 431656.174 ops/s
# Warmup Iteration   5: 433079.023 ops/s
# Warmup Iteration   6: 376727.167 ops/s
# Warmup Iteration   7: 412148.514 ops/s
# Warmup Iteration   8: 430676.275 ops/s
# Warmup Iteration   9: 432613.930 ops/s
# Warmup Iteration  10: 430913.224 ops/s
# Warmup Iteration  11: 433597.431 ops/s
# Warmup Iteration  12: 433119.997 ops/s
# Warmup Iteration  13: 434078.484 ops/s
# Warmup Iteration  14: 433674.034 ops/s
# Warmup Iteration  15: 434228.011 ops/s
# Warmup Iteration  16: 434338.501 ops/s
# Warmup Iteration  17: 433920.720 ops/s
# Warmup Iteration  18: 433167.691 ops/s
# Warmup Iteration  19: 433698.678 ops/s
# Warmup Iteration  20: 430336.388 ops/s
# Warmup Iteration  21: 434368.233 ops/s
# Warmup Iteration  22: 434660.030 ops/s
# Warmup Iteration  23: 433393.288 ops/s
# Warmup Iteration  24: 430421.755 ops/s
# Warmup Iteration  25: 434779.247 ops/s
# Warmup Iteration  26: 434150.207 ops/s
# Warmup Iteration  27: 434489.474 ops/s
# Warmup Iteration  28: 434575.823 ops/s
# Warmup Iteration  29: 433947.111 ops/s
# Warmup Iteration  30: 433554.863 ops/s
Iteration   1: 434106.748 ops/s
Iteration   2: 434039.909 ops/s
Iteration   3: 433904.508 ops/s
Iteration   4: 431526.557 ops/s
Iteration   5: 426607.274 ops/s
Iteration   6: 427253.245 ops/s
Iteration   7: 433411.993 ops/s
Iteration   8: 434995.923 ops/s
Iteration   9: 434564.190 ops/s
Iteration  10: 433473.420 ops/s
Iteration  11: 432401.337 ops/s
Iteration  12: 434363.244 ops/s
Iteration  13: 435407.172 ops/s
Iteration  14: 431895.458 ops/s
Iteration  15: 432155.229 ops/s
Iteration  16: 431953.054 ops/s
Iteration  17: 434219.378 ops/s
Iteration  18: 433749.071 ops/s
Iteration  19: 432252.084 ops/s
Iteration  20: 433768.710 ops/s
Iteration  21: 427333.362 ops/s
Iteration  22: 425675.498 ops/s
Iteration  23: 434451.641 ops/s
Iteration  24: 433796.180 ops/s
Iteration  25: 427482.288 ops/s
Iteration  26: 433554.345 ops/s
Iteration  27: 435360.143 ops/s
Iteration  28: 433560.142 ops/s
Iteration  29: 434756.196 ops/s
Iteration  30: 432978.037 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_flatCollectWith":
  432499.878 ±(99.9%) 1844.236 ops/s [Average]
  (min, avg, max) = (425675.498, 432499.878, 435407.172), stdev = 2760.366
  CI (99.9%): [430655.642, 434344.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_flatCollectWith  thrpt   30  432499.878 ± 1844.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1010685.693 ops/s
# Warmup Iteration   2: 2256839.243 ops/s
# Warmup Iteration   3: 2261144.871 ops/s
# Warmup Iteration   4: 1906401.777 ops/s
# Warmup Iteration   5: 2271283.018 ops/s
# Warmup Iteration   6: 2252615.096 ops/s
# Warmup Iteration   7: 2269990.793 ops/s
# Warmup Iteration   8: 2265680.489 ops/s
# Warmup Iteration   9: 2261237.997 ops/s
# Warmup Iteration  10: 2262912.232 ops/s
# Warmup Iteration  11: 2265856.338 ops/s
# Warmup Iteration  12: 2265173.148 ops/s
# Warmup Iteration  13: 2266644.978 ops/s
# Warmup Iteration  14: 2239710.829 ops/s
# Warmup Iteration  15: 2251236.844 ops/s
# Warmup Iteration  16: 2266903.875 ops/s
# Warmup Iteration  17: 2250806.614 ops/s
# Warmup Iteration  18: 2271928.453 ops/s
# Warmup Iteration  19: 2271246.574 ops/s
# Warmup Iteration  20: 2259231.959 ops/s
# Warmup Iteration  21: 2247322.529 ops/s
# Warmup Iteration  22: 2260446.204 ops/s
# Warmup Iteration  23: 2264846.925 ops/s
# Warmup Iteration  24: 2267992.996 ops/s
# Warmup Iteration  25: 2270688.201 ops/s
# Warmup Iteration  26: 2272818.857 ops/s
# Warmup Iteration  27: 2260109.446 ops/s
# Warmup Iteration  28: 2273057.977 ops/s
# Warmup Iteration  29: 2256628.214 ops/s
# Warmup Iteration  30: 2272396.415 ops/s
Iteration   1: 2264699.151 ops/s
Iteration   2: 2258000.128 ops/s
Iteration   3: 2266349.850 ops/s
Iteration   4: 2262608.469 ops/s
Iteration   5: 2274488.490 ops/s
Iteration   6: 2268420.082 ops/s
Iteration   7: 2244833.233 ops/s
Iteration   8: 2234326.092 ops/s
Iteration   9: 2255018.141 ops/s
Iteration  10: 2270486.472 ops/s
Iteration  11: 2273137.323 ops/s
Iteration  12: 2272282.612 ops/s
Iteration  13: 2266526.350 ops/s
Iteration  14: 2218578.061 ops/s
Iteration  15: 2260711.711 ops/s
Iteration  16: 2272803.318 ops/s
Iteration  17: 2275015.306 ops/s
Iteration  18: 2239337.525 ops/s
Iteration  19: 2266992.124 ops/s
Iteration  20: 2274577.570 ops/s
Iteration  21: 2261727.971 ops/s
Iteration  22: 2257688.698 ops/s
Iteration  23: 2266828.595 ops/s
Iteration  24: 2247003.619 ops/s
Iteration  25: 2234056.942 ops/s
Iteration  26: 2277498.997 ops/s
Iteration  27: 2274276.396 ops/s
Iteration  28: 2272650.020 ops/s
Iteration  29: 2272368.592 ops/s
Iteration  30: 2260464.165 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEach":
  2261458.533 ±(99.9%) 9764.486 ops/s [Average]
  (min, avg, max) = (2218578.061, 2261458.533, 2277498.997), stdev = 14615.024
  CI (99.9%): [2251694.047, 2271223.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEach  thrpt   30  2261458.533 ± 9764.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235012.430 ops/s
# Warmup Iteration   2: 265071.881 ops/s
# Warmup Iteration   3: 332585.096 ops/s
# Warmup Iteration   4: 328608.334 ops/s
# Warmup Iteration   5: 329977.021 ops/s
# Warmup Iteration   6: 331781.220 ops/s
# Warmup Iteration   7: 330733.640 ops/s
# Warmup Iteration   8: 331493.285 ops/s
# Warmup Iteration   9: 328563.826 ops/s
# Warmup Iteration  10: 325686.393 ops/s
# Warmup Iteration  11: 289307.189 ops/s
# Warmup Iteration  12: 332010.784 ops/s
# Warmup Iteration  13: 330115.352 ops/s
# Warmup Iteration  14: 333576.750 ops/s
# Warmup Iteration  15: 330894.203 ops/s
# Warmup Iteration  16: 329230.090 ops/s
# Warmup Iteration  17: 349241.163 ops/s
# Warmup Iteration  18: 345951.399 ops/s
# Warmup Iteration  19: 346937.701 ops/s
# Warmup Iteration  20: 346949.929 ops/s
# Warmup Iteration  21: 345526.336 ops/s
# Warmup Iteration  22: 345098.005 ops/s
# Warmup Iteration  23: 345597.601 ops/s
# Warmup Iteration  24: 341680.995 ops/s
# Warmup Iteration  25: 346704.039 ops/s
# Warmup Iteration  26: 346315.431 ops/s
# Warmup Iteration  27: 345038.076 ops/s
# Warmup Iteration  28: 346233.647 ops/s
# Warmup Iteration  29: 340375.267 ops/s
# Warmup Iteration  30: 344977.837 ops/s
Iteration   1: 342003.823 ops/s
Iteration   2: 345890.125 ops/s
Iteration   3: 339755.694 ops/s
Iteration   4: 345965.249 ops/s
Iteration   5: 346014.778 ops/s
Iteration   6: 345722.635 ops/s
Iteration   7: 345515.085 ops/s
Iteration   8: 345030.259 ops/s
Iteration   9: 345521.396 ops/s
Iteration  10: 347174.168 ops/s
Iteration  11: 344854.828 ops/s
Iteration  12: 345922.693 ops/s
Iteration  13: 346542.216 ops/s
Iteration  14: 345401.179 ops/s
Iteration  15: 346523.370 ops/s
Iteration  16: 345809.978 ops/s
Iteration  17: 342054.134 ops/s
Iteration  18: 346372.587 ops/s
Iteration  19: 346783.142 ops/s
Iteration  20: 345072.498 ops/s
Iteration  21: 343343.639 ops/s
Iteration  22: 347098.499 ops/s
Iteration  23: 346505.937 ops/s
Iteration  24: 345663.113 ops/s
Iteration  25: 340198.492 ops/s
Iteration  26: 348196.411 ops/s
Iteration  27: 346306.453 ops/s
Iteration  28: 345053.790 ops/s
Iteration  29: 346321.457 ops/s
Iteration  30: 347995.226 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromTo":
  345353.762 ±(99.9%) 1341.719 ops/s [Average]
  (min, avg, max) = (339755.694, 345353.762, 348196.411), stdev = 2008.222
  CI (99.9%): [344012.043, 346695.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachFromTo  thrpt   30  345353.762 ± 1341.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5071392.525 ops/s
# Warmup Iteration   2: 10525054.685 ops/s
# Warmup Iteration   3: 9120185.929 ops/s
# Warmup Iteration   4: 10213376.644 ops/s
# Warmup Iteration   5: 10612971.996 ops/s
# Warmup Iteration   6: 10584289.730 ops/s
# Warmup Iteration   7: 10612023.431 ops/s
# Warmup Iteration   8: 10605298.834 ops/s
# Warmup Iteration   9: 10577466.354 ops/s
# Warmup Iteration  10: 10597684.193 ops/s
# Warmup Iteration  11: 10612253.267 ops/s
# Warmup Iteration  12: 10608039.214 ops/s
# Warmup Iteration  13: 10571061.971 ops/s
# Warmup Iteration  14: 10590257.508 ops/s
# Warmup Iteration  15: 10517726.695 ops/s
# Warmup Iteration  16: 10595106.516 ops/s
# Warmup Iteration  17: 10597539.506 ops/s
# Warmup Iteration  18: 10525323.324 ops/s
# Warmup Iteration  19: 10627145.207 ops/s
# Warmup Iteration  20: 10633938.101 ops/s
# Warmup Iteration  21: 10604566.711 ops/s
# Warmup Iteration  22: 10620422.854 ops/s
# Warmup Iteration  23: 10579244.791 ops/s
# Warmup Iteration  24: 10523919.385 ops/s
# Warmup Iteration  25: 10546238.505 ops/s
# Warmup Iteration  26: 10574849.469 ops/s
# Warmup Iteration  27: 10611959.683 ops/s
# Warmup Iteration  28: 10523637.608 ops/s
# Warmup Iteration  29: 10621011.657 ops/s
# Warmup Iteration  30: 10586618.769 ops/s
Iteration   1: 10622451.709 ops/s
Iteration   2: 10418412.234 ops/s
Iteration   3: 10621884.010 ops/s
Iteration   4: 10613078.024 ops/s
Iteration   5: 10582071.401 ops/s
Iteration   6: 10571338.739 ops/s
Iteration   7: 10604179.840 ops/s
Iteration   8: 10634399.937 ops/s
Iteration   9: 10460877.476 ops/s
Iteration  10: 10598900.806 ops/s
Iteration  11: 10623525.342 ops/s
Iteration  12: 10604392.192 ops/s
Iteration  13: 10625714.001 ops/s
Iteration  14: 10432060.030 ops/s
Iteration  15: 10596405.093 ops/s
Iteration  16: 10598508.479 ops/s
Iteration  17: 10543350.721 ops/s
Iteration  18: 10601985.281 ops/s
Iteration  19: 10638310.408 ops/s
Iteration  20: 10596755.121 ops/s
Iteration  21: 10464703.386 ops/s
Iteration  22: 10587234.612 ops/s
Iteration  23: 10599532.590 ops/s
Iteration  24: 10611194.278 ops/s
Iteration  25: 10612608.230 ops/s
Iteration  26: 10621894.517 ops/s
Iteration  27: 10649738.000 ops/s
Iteration  28: 10558201.596 ops/s
Iteration  29: 10628336.761 ops/s
Iteration  30: 10612924.264 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachFromToInReverse":
  10584498.969 ±(99.9%) 40618.297 ops/s [Average]
  (min, avg, max) = (10418412.234, 10584498.969, 10649738.000), stdev = 60795.559
  CI (99.9%): [10543880.672, 10625117.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  10584498.969 ± 40618.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1568173.865 ops/s
# Warmup Iteration   2: 3546680.301 ops/s
# Warmup Iteration   3: 3651491.109 ops/s
# Warmup Iteration   4: 3047365.783 ops/s
# Warmup Iteration   5: 3647362.171 ops/s
# Warmup Iteration   6: 3655392.104 ops/s
# Warmup Iteration   7: 3652024.609 ops/s
# Warmup Iteration   8: 3664985.352 ops/s
# Warmup Iteration   9: 3615696.940 ops/s
# Warmup Iteration  10: 3665107.913 ops/s
# Warmup Iteration  11: 3665432.068 ops/s
# Warmup Iteration  12: 3602554.298 ops/s
# Warmup Iteration  13: 3647086.112 ops/s
# Warmup Iteration  14: 3649884.311 ops/s
# Warmup Iteration  15: 3660527.468 ops/s
# Warmup Iteration  16: 3657437.095 ops/s
# Warmup Iteration  17: 3663640.049 ops/s
# Warmup Iteration  18: 3650863.912 ops/s
# Warmup Iteration  19: 3651855.724 ops/s
# Warmup Iteration  20: 3665608.137 ops/s
# Warmup Iteration  21: 3657618.631 ops/s
# Warmup Iteration  22: 3625006.171 ops/s
# Warmup Iteration  23: 3659186.704 ops/s
# Warmup Iteration  24: 3651452.337 ops/s
# Warmup Iteration  25: 3659644.433 ops/s
# Warmup Iteration  26: 3666082.272 ops/s
# Warmup Iteration  27: 3630387.253 ops/s
# Warmup Iteration  28: 3651541.302 ops/s
# Warmup Iteration  29: 3636182.277 ops/s
# Warmup Iteration  30: 3634428.951 ops/s
Iteration   1: 3644971.730 ops/s
Iteration   2: 3657654.798 ops/s
Iteration   3: 3658853.011 ops/s
Iteration   4: 3645205.200 ops/s
Iteration   5: 3651018.585 ops/s
Iteration   6: 3610423.408 ops/s
Iteration   7: 3666211.099 ops/s
Iteration   8: 3549073.976 ops/s
Iteration   9: 3660058.822 ops/s
Iteration  10: 3672324.076 ops/s
Iteration  11: 3655563.187 ops/s
Iteration  12: 3652545.521 ops/s
Iteration  13: 3659202.653 ops/s
Iteration  14: 3648142.634 ops/s
Iteration  15: 3652319.656 ops/s
Iteration  16: 3660797.716 ops/s
Iteration  17: 3651158.531 ops/s
Iteration  18: 3654416.385 ops/s
Iteration  19: 3663275.174 ops/s
Iteration  20: 3658834.704 ops/s
Iteration  21: 3661264.451 ops/s
Iteration  22: 3665474.605 ops/s
Iteration  23: 3668039.264 ops/s
Iteration  24: 3647391.236 ops/s
Iteration  25: 3661629.461 ops/s
Iteration  26: 3656294.800 ops/s
Iteration  27: 3656043.145 ops/s
Iteration  28: 3660378.253 ops/s
Iteration  29: 3654103.930 ops/s
Iteration  30: 3662232.577 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBoth":
  3652163.420 ±(99.9%) 14870.992 ops/s [Average]
  (min, avg, max) = (3549073.976, 3652163.420, 3672324.076), stdev = 22258.202
  CI (99.9%): [3637292.428, 3667034.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_forEachInBoth  thrpt   30  3652163.420 ± 14870.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552186.366 ops/s
# Warmup Iteration   2: 664293.644 ops/s
# Warmup Iteration   3: 837423.075 ops/s
# Warmup Iteration   4: 831829.058 ops/s
# Warmup Iteration   5: 828849.446 ops/s
# Warmup Iteration   6: 831285.242 ops/s
# Warmup Iteration   7: 832579.955 ops/s
# Warmup Iteration   8: 827327.148 ops/s
# Warmup Iteration   9: 775944.710 ops/s
# Warmup Iteration  10: 752747.007 ops/s
# Warmup Iteration  11: 832022.588 ops/s
# Warmup Iteration  12: 833291.465 ops/s
# Warmup Iteration  13: 831632.649 ops/s
# Warmup Iteration  14: 834807.729 ops/s
# Warmup Iteration  15: 823217.189 ops/s
# Warmup Iteration  16: 834280.831 ops/s
# Warmup Iteration  17: 872005.841 ops/s
# Warmup Iteration  18: 878863.511 ops/s
# Warmup Iteration  19: 879082.765 ops/s
# Warmup Iteration  20: 878314.632 ops/s
# Warmup Iteration  21: 878240.783 ops/s
# Warmup Iteration  22: 872178.743 ops/s
# Warmup Iteration  23: 877742.651 ops/s
# Warmup Iteration  24: 876724.664 ops/s
# Warmup Iteration  25: 879367.860 ops/s
# Warmup Iteration  26: 872111.030 ops/s
# Warmup Iteration  27: 877887.305 ops/s
# Warmup Iteration  28: 876263.312 ops/s
# Warmup Iteration  29: 878338.723 ops/s
# Warmup Iteration  30: 873039.482 ops/s
Iteration   1: 875047.880 ops/s
Iteration   2: 870352.928 ops/s
Iteration   3: 875741.508 ops/s
Iteration   4: 879845.084 ops/s
Iteration   5: 878365.711 ops/s
Iteration   6: 879226.279 ops/s
Iteration   7: 877257.500 ops/s
Iteration   8: 876655.699 ops/s
Iteration   9: 877462.640 ops/s
Iteration  10: 872516.860 ops/s
Iteration  11: 878910.415 ops/s
Iteration  12: 880809.350 ops/s
Iteration  13: 877246.909 ops/s
Iteration  14: 877687.929 ops/s
Iteration  15: 868028.035 ops/s
Iteration  16: 878685.653 ops/s
Iteration  17: 876133.305 ops/s
Iteration  18: 879022.938 ops/s
Iteration  19: 867560.206 ops/s
Iteration  20: 862228.206 ops/s
Iteration  21: 877722.814 ops/s
Iteration  22: 874512.453 ops/s
Iteration  23: 877819.734 ops/s
Iteration  24: 880075.115 ops/s
Iteration  25: 879983.586 ops/s
Iteration  26: 846712.567 ops/s
Iteration  27: 876643.979 ops/s
Iteration  28: 881254.781 ops/s
Iteration  29: 862121.155 ops/s
Iteration  30: 880571.554 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  874873.426 ±(99.9%) 4898.541 ops/s [Average]
  (min, avg, max) = (846712.567, 874873.426, 881254.781), stdev = 7331.906
  CI (99.9%): [869974.885, 879771.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  874873.426 ± 4898.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672126.459 ops/s
# Warmup Iteration   2: 712935.339 ops/s
# Warmup Iteration   3: 940831.006 ops/s
# Warmup Iteration   4: 942968.805 ops/s
# Warmup Iteration   5: 933886.648 ops/s
# Warmup Iteration   6: 940165.846 ops/s
# Warmup Iteration   7: 949668.615 ops/s
# Warmup Iteration   8: 948223.021 ops/s
# Warmup Iteration   9: 948641.231 ops/s
# Warmup Iteration  10: 949177.251 ops/s
# Warmup Iteration  11: 883194.615 ops/s
# Warmup Iteration  12: 851274.798 ops/s
# Warmup Iteration  13: 947105.337 ops/s
# Warmup Iteration  14: 947304.777 ops/s
# Warmup Iteration  15: 937517.073 ops/s
# Warmup Iteration  16: 947025.455 ops/s
# Warmup Iteration  17: 997670.116 ops/s
# Warmup Iteration  18: 997928.447 ops/s
# Warmup Iteration  19: 1002125.897 ops/s
# Warmup Iteration  20: 1000423.701 ops/s
# Warmup Iteration  21: 997614.262 ops/s
# Warmup Iteration  22: 992700.708 ops/s
# Warmup Iteration  23: 1000096.463 ops/s
# Warmup Iteration  24: 1000329.266 ops/s
# Warmup Iteration  25: 992140.378 ops/s
# Warmup Iteration  26: 1001740.584 ops/s
# Warmup Iteration  27: 997900.532 ops/s
# Warmup Iteration  28: 995897.735 ops/s
# Warmup Iteration  29: 992357.818 ops/s
# Warmup Iteration  30: 1001302.181 ops/s
Iteration   1: 997084.971 ops/s
Iteration   2: 1000259.876 ops/s
Iteration   3: 1001980.245 ops/s
Iteration   4: 998628.551 ops/s
Iteration   5: 1001039.103 ops/s
Iteration   6: 1003285.233 ops/s
Iteration   7: 1001202.870 ops/s
Iteration   8: 979501.010 ops/s
Iteration   9: 1004688.986 ops/s
Iteration  10: 1003417.391 ops/s
Iteration  11: 1000789.845 ops/s
Iteration  12: 984225.648 ops/s
Iteration  13: 1002822.555 ops/s
Iteration  14: 999708.860 ops/s
Iteration  15: 997133.698 ops/s
Iteration  16: 999773.150 ops/s
Iteration  17: 990613.036 ops/s
Iteration  18: 1000690.556 ops/s
Iteration  19: 998765.480 ops/s
Iteration  20: 997893.013 ops/s
Iteration  21: 996537.149 ops/s
Iteration  22: 1000221.735 ops/s
Iteration  23: 1000597.130 ops/s
Iteration  24: 1002144.296 ops/s
Iteration  25: 1000506.562 ops/s
Iteration  26: 998936.042 ops/s
Iteration  27: 999176.980 ops/s
Iteration  28: 1000307.277 ops/s
Iteration  29: 1002836.417 ops/s
Iteration  30: 1003677.144 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  998948.160 ±(99.9%) 3615.863 ops/s [Average]
  (min, avg, max) = (979501.010, 998948.160, 1004688.986), stdev = 5412.054
  CI (99.9%): [995332.297, 1002564.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  998948.160 ± 3615.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344568.591 ops/s
# Warmup Iteration   2: 435024.295 ops/s
# Warmup Iteration   3: 528131.895 ops/s
# Warmup Iteration   4: 531971.330 ops/s
# Warmup Iteration   5: 531776.005 ops/s
# Warmup Iteration   6: 531890.575 ops/s
# Warmup Iteration   7: 531686.505 ops/s
# Warmup Iteration   8: 531771.405 ops/s
# Warmup Iteration   9: 454172.372 ops/s
# Warmup Iteration  10: 532990.246 ops/s
# Warmup Iteration  11: 528283.969 ops/s
# Warmup Iteration  12: 527886.453 ops/s
# Warmup Iteration  13: 533306.958 ops/s
# Warmup Iteration  14: 530280.519 ops/s
# Warmup Iteration  15: 530795.989 ops/s
# Warmup Iteration  16: 529294.639 ops/s
# Warmup Iteration  17: 549540.607 ops/s
# Warmup Iteration  18: 550608.927 ops/s
# Warmup Iteration  19: 551355.824 ops/s
# Warmup Iteration  20: 551009.286 ops/s
# Warmup Iteration  21: 548505.448 ops/s
# Warmup Iteration  22: 551509.897 ops/s
# Warmup Iteration  23: 551565.407 ops/s
# Warmup Iteration  24: 549281.939 ops/s
# Warmup Iteration  25: 551426.708 ops/s
# Warmup Iteration  26: 545347.099 ops/s
# Warmup Iteration  27: 550006.320 ops/s
# Warmup Iteration  28: 546080.813 ops/s
# Warmup Iteration  29: 546379.132 ops/s
# Warmup Iteration  30: 546904.029 ops/s
Iteration   1: 550675.966 ops/s
Iteration   2: 550445.260 ops/s
Iteration   3: 547767.321 ops/s
Iteration   4: 549969.209 ops/s
Iteration   5: 552441.428 ops/s
Iteration   6: 551383.755 ops/s
Iteration   7: 549730.294 ops/s
Iteration   8: 544069.857 ops/s
Iteration   9: 550654.961 ops/s
Iteration  10: 550580.888 ops/s
Iteration  11: 551532.265 ops/s
Iteration  12: 549378.486 ops/s
Iteration  13: 541559.272 ops/s
Iteration  14: 549948.467 ops/s
Iteration  15: 548900.442 ops/s
Iteration  16: 549872.624 ops/s
Iteration  17: 550341.605 ops/s
Iteration  18: 551111.877 ops/s
Iteration  19: 548868.392 ops/s
Iteration  20: 551295.477 ops/s
Iteration  21: 551905.731 ops/s
Iteration  22: 550097.024 ops/s
Iteration  23: 549518.022 ops/s
Iteration  24: 549299.433 ops/s
Iteration  25: 551151.588 ops/s
Iteration  26: 548085.723 ops/s
Iteration  27: 551073.980 ops/s
Iteration  28: 551558.382 ops/s
Iteration  29: 551570.404 ops/s
Iteration  30: 550699.946 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachOnRange":
  549849.603 ±(99.9%) 1490.109 ops/s [Average]
  (min, avg, max) = (541559.272, 549849.603, 552441.428), stdev = 2230.325
  CI (99.9%): [548359.493, 551339.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachOnRange  thrpt   30  549849.603 ± 1490.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2128726.480 ops/s
# Warmup Iteration   2: 4729032.614 ops/s
# Warmup Iteration   3: 4770298.996 ops/s
# Warmup Iteration   4: 4038358.320 ops/s
# Warmup Iteration   5: 4762569.496 ops/s
# Warmup Iteration   6: 4805316.030 ops/s
# Warmup Iteration   7: 4802956.701 ops/s
# Warmup Iteration   8: 4772478.707 ops/s
# Warmup Iteration   9: 4822919.309 ops/s
# Warmup Iteration  10: 4811980.505 ops/s
# Warmup Iteration  11: 4773788.115 ops/s
# Warmup Iteration  12: 4785468.780 ops/s
# Warmup Iteration  13: 4802852.404 ops/s
# Warmup Iteration  14: 4808787.515 ops/s
# Warmup Iteration  15: 4813752.261 ops/s
# Warmup Iteration  16: 4813121.541 ops/s
# Warmup Iteration  17: 4815990.655 ops/s
# Warmup Iteration  18: 4816238.980 ops/s
# Warmup Iteration  19: 4802173.402 ops/s
# Warmup Iteration  20: 4819398.493 ops/s
# Warmup Iteration  21: 4814485.407 ops/s
# Warmup Iteration  22: 4779842.465 ops/s
# Warmup Iteration  23: 4819963.576 ops/s
# Warmup Iteration  24: 4785138.740 ops/s
# Warmup Iteration  25: 4823703.585 ops/s
# Warmup Iteration  26: 4774623.044 ops/s
# Warmup Iteration  27: 4768870.143 ops/s
# Warmup Iteration  28: 4813305.336 ops/s
# Warmup Iteration  29: 4814484.201 ops/s
# Warmup Iteration  30: 4824866.812 ops/s
Iteration   1: 4803734.901 ops/s
Iteration   2: 4825292.814 ops/s
Iteration   3: 4819805.073 ops/s
Iteration   4: 4800639.520 ops/s
Iteration   5: 4836999.792 ops/s
Iteration   6: 4808608.345 ops/s
Iteration   7: 4830014.410 ops/s
Iteration   8: 4795747.864 ops/s
Iteration   9: 4810840.483 ops/s
Iteration  10: 4796672.894 ops/s
Iteration  11: 4737063.612 ops/s
Iteration  12: 4809221.184 ops/s
Iteration  13: 4775394.458 ops/s
Iteration  14: 4826197.101 ops/s
Iteration  15: 4811994.829 ops/s
Iteration  16: 4806587.216 ops/s
Iteration  17: 4823490.182 ops/s
Iteration  18: 4820051.042 ops/s
Iteration  19: 4814173.148 ops/s
Iteration  20: 4787591.583 ops/s
Iteration  21: 4749125.276 ops/s
Iteration  22: 4801528.537 ops/s
Iteration  23: 4791844.579 ops/s
Iteration  24: 4773648.652 ops/s
Iteration  25: 4816280.243 ops/s
Iteration  26: 4813300.488 ops/s
Iteration  27: 4824466.806 ops/s
Iteration  28: 4810444.848 ops/s
Iteration  29: 4738692.433 ops/s
Iteration  30: 4823713.421 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWith":
  4802772.191 ±(99.9%) 17084.210 ops/s [Average]
  (min, avg, max) = (4737063.612, 4802772.191, 4836999.792), stdev = 25570.843
  CI (99.9%): [4785687.981, 4819856.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_forEachWith  thrpt   30  4802772.191 ± 17084.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433648.323 ops/s
# Warmup Iteration   2: 836013.226 ops/s
# Warmup Iteration   3: 921819.155 ops/s
# Warmup Iteration   4: 930033.760 ops/s
# Warmup Iteration   5: 771104.834 ops/s
# Warmup Iteration   6: 916552.618 ops/s
# Warmup Iteration   7: 923376.745 ops/s
# Warmup Iteration   8: 924014.213 ops/s
# Warmup Iteration   9: 930814.537 ops/s
# Warmup Iteration  10: 931628.604 ops/s
# Warmup Iteration  11: 930127.425 ops/s
# Warmup Iteration  12: 920799.148 ops/s
# Warmup Iteration  13: 928343.988 ops/s
# Warmup Iteration  14: 930106.210 ops/s
# Warmup Iteration  15: 931117.874 ops/s
# Warmup Iteration  16: 923071.210 ops/s
# Warmup Iteration  17: 918643.474 ops/s
# Warmup Iteration  18: 930265.493 ops/s
# Warmup Iteration  19: 928610.252 ops/s
# Warmup Iteration  20: 920223.957 ops/s
# Warmup Iteration  21: 930922.898 ops/s
# Warmup Iteration  22: 928762.478 ops/s
# Warmup Iteration  23: 931060.278 ops/s
# Warmup Iteration  24: 925697.605 ops/s
# Warmup Iteration  25: 931656.664 ops/s
# Warmup Iteration  26: 929731.775 ops/s
# Warmup Iteration  27: 929749.272 ops/s
# Warmup Iteration  28: 931222.190 ops/s
# Warmup Iteration  29: 923771.386 ops/s
# Warmup Iteration  30: 928794.717 ops/s
Iteration   1: 926928.538 ops/s
Iteration   2: 930594.864 ops/s
Iteration   3: 929543.726 ops/s
Iteration   4: 931249.566 ops/s
Iteration   5: 929559.910 ops/s
Iteration   6: 931979.368 ops/s
Iteration   7: 932808.423 ops/s
Iteration   8: 931170.025 ops/s
Iteration   9: 931374.674 ops/s
Iteration  10: 933677.842 ops/s
Iteration  11: 925918.082 ops/s
Iteration  12: 917145.284 ops/s
Iteration  13: 935232.709 ops/s
Iteration  14: 929844.770 ops/s
Iteration  15: 926922.655 ops/s
Iteration  16: 931992.379 ops/s
Iteration  17: 926293.296 ops/s
Iteration  18: 930716.646 ops/s
Iteration  19: 933924.269 ops/s
Iteration  20: 933679.742 ops/s
Iteration  21: 931869.830 ops/s
Iteration  22: 931794.294 ops/s
Iteration  23: 932513.054 ops/s
Iteration  24: 932557.051 ops/s
Iteration  25: 928148.129 ops/s
Iteration  26: 929375.663 ops/s
Iteration  27: 917209.528 ops/s
Iteration  28: 916257.634 ops/s
Iteration  29: 933299.785 ops/s
Iteration  30: 933047.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndex":
  929554.295 ±(99.9%) 3273.864 ops/s [Average]
  (min, avg, max) = (916257.634, 929554.295, 935232.709), stdev = 4900.167
  CI (99.9%): [926280.430, 932828.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  929554.295 ± 3273.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 323608.787 ops/s
# Warmup Iteration   2: 403373.533 ops/s
# Warmup Iteration   3: 496476.629 ops/s
# Warmup Iteration   4: 496695.635 ops/s
# Warmup Iteration   5: 498954.758 ops/s
# Warmup Iteration   6: 497458.461 ops/s
# Warmup Iteration   7: 494784.126 ops/s
# Warmup Iteration   8: 498346.681 ops/s
# Warmup Iteration   9: 421688.037 ops/s
# Warmup Iteration  10: 500060.742 ops/s
# Warmup Iteration  11: 498537.601 ops/s
# Warmup Iteration  12: 499426.454 ops/s
# Warmup Iteration  13: 496108.567 ops/s
# Warmup Iteration  14: 500118.130 ops/s
# Warmup Iteration  15: 498788.533 ops/s
# Warmup Iteration  16: 495420.540 ops/s
# Warmup Iteration  17: 514790.238 ops/s
# Warmup Iteration  18: 516207.631 ops/s
# Warmup Iteration  19: 516811.190 ops/s
# Warmup Iteration  20: 516218.662 ops/s
# Warmup Iteration  21: 514454.510 ops/s
# Warmup Iteration  22: 515954.705 ops/s
# Warmup Iteration  23: 511679.503 ops/s
# Warmup Iteration  24: 514656.269 ops/s
# Warmup Iteration  25: 515651.083 ops/s
# Warmup Iteration  26: 514352.211 ops/s
# Warmup Iteration  27: 505146.273 ops/s
# Warmup Iteration  28: 515508.487 ops/s
# Warmup Iteration  29: 516542.705 ops/s
# Warmup Iteration  30: 515116.173 ops/s
Iteration   1: 514821.695 ops/s
Iteration   2: 515040.606 ops/s
Iteration   3: 516408.583 ops/s
Iteration   4: 516075.438 ops/s
Iteration   5: 511678.270 ops/s
Iteration   6: 514129.795 ops/s
Iteration   7: 506526.965 ops/s
Iteration   8: 515374.236 ops/s
Iteration   9: 514612.433 ops/s
Iteration  10: 515053.463 ops/s
Iteration  11: 509585.267 ops/s
Iteration  12: 512795.982 ops/s
Iteration  13: 506381.339 ops/s
Iteration  14: 515919.043 ops/s
Iteration  15: 516143.412 ops/s
Iteration  16: 506826.084 ops/s
Iteration  17: 516896.226 ops/s
Iteration  18: 516699.575 ops/s
Iteration  19: 515398.128 ops/s
Iteration  20: 516011.223 ops/s
Iteration  21: 515827.127 ops/s
Iteration  22: 516317.072 ops/s
Iteration  23: 508669.879 ops/s
Iteration  24: 515286.833 ops/s
Iteration  25: 505898.242 ops/s
Iteration  26: 517256.993 ops/s
Iteration  27: 515738.594 ops/s
Iteration  28: 514428.645 ops/s
Iteration  29: 516476.995 ops/s
Iteration  30: 510208.382 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange":
  513616.217 ±(99.9%) 2390.359 ops/s [Average]
  (min, avg, max) = (505898.242, 513616.217, 517256.993), stdev = 3577.778
  CI (99.9%): [511225.858, 516006.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  513616.217 ± 2390.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154817.268 ops/s
# Warmup Iteration   2: 187020.219 ops/s
# Warmup Iteration   3: 241208.352 ops/s
# Warmup Iteration   4: 243445.629 ops/s
# Warmup Iteration   5: 242474.946 ops/s
# Warmup Iteration   6: 243960.835 ops/s
# Warmup Iteration   7: 243764.147 ops/s
# Warmup Iteration   8: 241656.275 ops/s
# Warmup Iteration   9: 221210.304 ops/s
# Warmup Iteration  10: 222150.907 ops/s
# Warmup Iteration  11: 243001.703 ops/s
# Warmup Iteration  12: 243269.220 ops/s
# Warmup Iteration  13: 243413.567 ops/s
# Warmup Iteration  14: 243184.422 ops/s
# Warmup Iteration  15: 244007.730 ops/s
# Warmup Iteration  16: 242572.612 ops/s
# Warmup Iteration  17: 251508.334 ops/s
# Warmup Iteration  18: 251335.904 ops/s
# Warmup Iteration  19: 251473.838 ops/s
# Warmup Iteration  20: 252129.452 ops/s
# Warmup Iteration  21: 251408.150 ops/s
# Warmup Iteration  22: 251516.255 ops/s
# Warmup Iteration  23: 249986.311 ops/s
# Warmup Iteration  24: 248153.684 ops/s
# Warmup Iteration  25: 251613.326 ops/s
# Warmup Iteration  26: 252186.051 ops/s
# Warmup Iteration  27: 247648.026 ops/s
# Warmup Iteration  28: 250246.546 ops/s
# Warmup Iteration  29: 251560.867 ops/s
# Warmup Iteration  30: 250001.962 ops/s
Iteration   1: 250189.320 ops/s
Iteration   2: 248911.157 ops/s
Iteration   3: 250822.281 ops/s
Iteration   4: 252575.285 ops/s
Iteration   5: 250336.448 ops/s
Iteration   6: 251977.818 ops/s
Iteration   7: 251699.873 ops/s
Iteration   8: 247700.657 ops/s
Iteration   9: 251697.897 ops/s
Iteration  10: 251516.716 ops/s
Iteration  11: 250998.146 ops/s
Iteration  12: 252543.502 ops/s
Iteration  13: 251529.567 ops/s
Iteration  14: 250676.878 ops/s
Iteration  15: 251318.189 ops/s
Iteration  16: 250679.741 ops/s
Iteration  17: 250503.729 ops/s
Iteration  18: 252298.046 ops/s
Iteration  19: 251562.690 ops/s
Iteration  20: 251362.913 ops/s
Iteration  21: 251992.683 ops/s
Iteration  22: 251782.213 ops/s
Iteration  23: 247289.804 ops/s
Iteration  24: 251703.945 ops/s
Iteration  25: 250887.696 ops/s
Iteration  26: 251241.283 ops/s
Iteration  27: 252448.389 ops/s
Iteration  28: 251126.717 ops/s
Iteration  29: 250586.655 ops/s
Iteration  30: 252333.307 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  251076.452 ±(99.9%) 843.521 ops/s [Average]
  (min, avg, max) = (247289.804, 251076.452, 252575.285), stdev = 1262.543
  CI (99.9%): [250232.930, 251919.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  251076.452 ± 843.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4427105.865 ops/s
# Warmup Iteration   2: 9600299.752 ops/s
# Warmup Iteration   3: 9617565.473 ops/s
# Warmup Iteration   4: 8127787.852 ops/s
# Warmup Iteration   5: 9614070.597 ops/s
# Warmup Iteration   6: 9653268.551 ops/s
# Warmup Iteration   7: 9647395.598 ops/s
# Warmup Iteration   8: 9687572.289 ops/s
# Warmup Iteration   9: 9692893.307 ops/s
# Warmup Iteration  10: 9561088.457 ops/s
# Warmup Iteration  11: 9680580.708 ops/s
# Warmup Iteration  12: 9661130.944 ops/s
# Warmup Iteration  13: 9676205.819 ops/s
# Warmup Iteration  14: 9578814.539 ops/s
# Warmup Iteration  15: 9668370.871 ops/s
# Warmup Iteration  16: 9679580.283 ops/s
# Warmup Iteration  17: 9681949.078 ops/s
# Warmup Iteration  18: 9670598.107 ops/s
# Warmup Iteration  19: 9703478.327 ops/s
# Warmup Iteration  20: 9593214.635 ops/s
# Warmup Iteration  21: 9614363.044 ops/s
# Warmup Iteration  22: 9693435.309 ops/s
# Warmup Iteration  23: 9709162.105 ops/s
# Warmup Iteration  24: 9690507.089 ops/s
# Warmup Iteration  25: 9555665.245 ops/s
# Warmup Iteration  26: 9599080.909 ops/s
# Warmup Iteration  27: 9676369.055 ops/s
# Warmup Iteration  28: 9603539.940 ops/s
# Warmup Iteration  29: 9581490.576 ops/s
# Warmup Iteration  30: 9672182.586 ops/s
Iteration   1: 9677862.331 ops/s
Iteration   2: 9705993.916 ops/s
Iteration   3: 9694701.108 ops/s
Iteration   4: 9686871.283 ops/s
Iteration   5: 9620161.423 ops/s
Iteration   6: 9587400.852 ops/s
Iteration   7: 9623625.958 ops/s
Iteration   8: 9693036.237 ops/s
Iteration   9: 9702057.306 ops/s
Iteration  10: 9683528.769 ops/s
Iteration  11: 9671258.634 ops/s
Iteration  12: 9544889.328 ops/s
Iteration  13: 9720841.903 ops/s
Iteration  14: 9739298.365 ops/s
Iteration  15: 9688203.427 ops/s
Iteration  16: 9671417.812 ops/s
Iteration  17: 9610527.786 ops/s
Iteration  18: 9703998.447 ops/s
Iteration  19: 9667641.828 ops/s
Iteration  20: 9532014.451 ops/s
Iteration  21: 9709189.516 ops/s
Iteration  22: 9646253.815 ops/s
Iteration  23: 9684924.539 ops/s
Iteration  24: 9672653.075 ops/s
Iteration  25: 9694060.698 ops/s
Iteration  26: 9704181.207 ops/s
Iteration  27: 9674258.536 ops/s
Iteration  28: 9680212.227 ops/s
Iteration  29: 9683547.116 ops/s
Iteration  30: 9611153.191 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  9666192.169 ±(99.9%) 32818.644 ops/s [Average]
  (min, avg, max) = (9532014.451, 9666192.169, 9739298.365), stdev = 49121.404
  CI (99.9%): [9633373.526, 9699010.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  9666192.169 ± 32818.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1241242.208 ops/s
# Warmup Iteration   2: 2867755.968 ops/s
# Warmup Iteration   3: 2856721.535 ops/s
# Warmup Iteration   4: 2423954.178 ops/s
# Warmup Iteration   5: 2847663.265 ops/s
# Warmup Iteration   6: 2880121.192 ops/s
# Warmup Iteration   7: 2860887.493 ops/s
# Warmup Iteration   8: 2896600.657 ops/s
# Warmup Iteration   9: 2889546.524 ops/s
# Warmup Iteration  10: 2879797.100 ops/s
# Warmup Iteration  11: 2852064.606 ops/s
# Warmup Iteration  12: 2896108.439 ops/s
# Warmup Iteration  13: 2877242.802 ops/s
# Warmup Iteration  14: 2898630.983 ops/s
# Warmup Iteration  15: 2894996.923 ops/s
# Warmup Iteration  16: 2896828.600 ops/s
# Warmup Iteration  17: 2884440.669 ops/s
# Warmup Iteration  18: 2891055.472 ops/s
# Warmup Iteration  19: 2894855.974 ops/s
# Warmup Iteration  20: 2892949.604 ops/s
# Warmup Iteration  21: 2900970.948 ops/s
# Warmup Iteration  22: 2863548.893 ops/s
# Warmup Iteration  23: 2899836.053 ops/s
# Warmup Iteration  24: 2857247.748 ops/s
# Warmup Iteration  25: 2902111.770 ops/s
# Warmup Iteration  26: 2871519.642 ops/s
# Warmup Iteration  27: 2874748.687 ops/s
# Warmup Iteration  28: 2884084.617 ops/s
# Warmup Iteration  29: 2866733.346 ops/s
# Warmup Iteration  30: 2887467.501 ops/s
Iteration   1: 2895867.269 ops/s
Iteration   2: 2889051.264 ops/s
Iteration   3: 2899435.494 ops/s
Iteration   4: 2860368.564 ops/s
Iteration   5: 2885964.878 ops/s
Iteration   6: 2894225.683 ops/s
Iteration   7: 2890160.374 ops/s
Iteration   8: 2897282.344 ops/s
Iteration   9: 2903383.591 ops/s
Iteration  10: 2900670.127 ops/s
Iteration  11: 2894391.167 ops/s
Iteration  12: 2883907.687 ops/s
Iteration  13: 2881702.203 ops/s
Iteration  14: 2850393.383 ops/s
Iteration  15: 2895216.820 ops/s
Iteration  16: 2846900.339 ops/s
Iteration  17: 2888818.549 ops/s
Iteration  18: 2895873.474 ops/s
Iteration  19: 2896935.996 ops/s
Iteration  20: 2849573.767 ops/s
Iteration  21: 2859451.758 ops/s
Iteration  22: 2905794.186 ops/s
Iteration  23: 2863437.169 ops/s
Iteration  24: 2900273.132 ops/s
Iteration  25: 2897248.460 ops/s
Iteration  26: 2870703.924 ops/s
Iteration  27: 2827067.443 ops/s
Iteration  28: 2882890.855 ops/s
Iteration  29: 2887243.014 ops/s
Iteration  30: 2895466.863 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_fusedCollectMakeString":
  2882989.992 ±(99.9%) 13403.972 ops/s [Average]
  (min, avg, max) = (2827067.443, 2882989.992, 2905794.186), stdev = 20062.435
  CI (99.9%): [2869586.021, 2896393.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2882989.992 ± 13403.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3146215.537 ops/s
# Warmup Iteration   2: 6687094.258 ops/s
# Warmup Iteration   3: 6735258.584 ops/s
# Warmup Iteration   4: 5674606.277 ops/s
# Warmup Iteration   5: 6636966.476 ops/s
# Warmup Iteration   6: 6749309.385 ops/s
# Warmup Iteration   7: 6705596.891 ops/s
# Warmup Iteration   8: 6735878.375 ops/s
# Warmup Iteration   9: 6721632.311 ops/s
# Warmup Iteration  10: 6714374.881 ops/s
# Warmup Iteration  11: 6706458.810 ops/s
# Warmup Iteration  12: 6676610.358 ops/s
# Warmup Iteration  13: 6734910.343 ops/s
# Warmup Iteration  14: 6717055.384 ops/s
# Warmup Iteration  15: 6689894.480 ops/s
# Warmup Iteration  16: 6686674.867 ops/s
# Warmup Iteration  17: 6739324.799 ops/s
# Warmup Iteration  18: 6721050.393 ops/s
# Warmup Iteration  19: 6712286.918 ops/s
# Warmup Iteration  20: 6733995.973 ops/s
# Warmup Iteration  21: 6665557.604 ops/s
# Warmup Iteration  22: 6730082.349 ops/s
# Warmup Iteration  23: 6742959.235 ops/s
# Warmup Iteration  24: 6695351.084 ops/s
# Warmup Iteration  25: 6730659.190 ops/s
# Warmup Iteration  26: 6676603.408 ops/s
# Warmup Iteration  27: 6747667.283 ops/s
# Warmup Iteration  28: 6674126.239 ops/s
# Warmup Iteration  29: 6686993.115 ops/s
# Warmup Iteration  30: 6722742.267 ops/s
Iteration   1: 6738507.136 ops/s
Iteration   2: 6747047.184 ops/s
Iteration   3: 6710132.568 ops/s
Iteration   4: 6673817.526 ops/s
Iteration   5: 6741412.856 ops/s
Iteration   6: 6730950.547 ops/s
Iteration   7: 6756487.169 ops/s
Iteration   8: 6743328.569 ops/s
Iteration   9: 6614923.375 ops/s
Iteration  10: 6750109.941 ops/s
Iteration  11: 6674629.154 ops/s
Iteration  12: 6749279.478 ops/s
Iteration  13: 6747536.646 ops/s
Iteration  14: 6681820.227 ops/s
Iteration  15: 6738790.558 ops/s
Iteration  16: 6742347.629 ops/s
Iteration  17: 6653957.414 ops/s
Iteration  18: 6705808.888 ops/s
Iteration  19: 6747661.223 ops/s
Iteration  20: 6728399.193 ops/s
Iteration  21: 6696396.238 ops/s
Iteration  22: 6737304.972 ops/s
Iteration  23: 6639944.236 ops/s
Iteration  24: 6653665.874 ops/s
Iteration  25: 6736530.795 ops/s
Iteration  26: 6752540.366 ops/s
Iteration  27: 6713017.320 ops/s
Iteration  28: 6716083.303 ops/s
Iteration  29: 6750449.835 ops/s
Iteration  30: 6751087.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getAny":
  6717465.583 ±(99.9%) 25980.317 ops/s [Average]
  (min, avg, max) = (6614923.375, 6717465.583, 6756487.169), stdev = 38886.119
  CI (99.9%): [6691485.265, 6743445.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getAny  thrpt   30  6717465.583 ± 25980.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3182032.313 ops/s
# Warmup Iteration   2: 6741192.424 ops/s
# Warmup Iteration   3: 6736110.937 ops/s
# Warmup Iteration   4: 5652628.435 ops/s
# Warmup Iteration   5: 6686102.499 ops/s
# Warmup Iteration   6: 6733016.054 ops/s
# Warmup Iteration   7: 6684685.848 ops/s
# Warmup Iteration   8: 6729565.143 ops/s
# Warmup Iteration   9: 6658983.147 ops/s
# Warmup Iteration  10: 6675764.843 ops/s
# Warmup Iteration  11: 6682042.953 ops/s
# Warmup Iteration  12: 6722621.367 ops/s
# Warmup Iteration  13: 6670866.786 ops/s
# Warmup Iteration  14: 6633945.786 ops/s
# Warmup Iteration  15: 6679302.356 ops/s
# Warmup Iteration  16: 6725743.170 ops/s
# Warmup Iteration  17: 6750247.576 ops/s
# Warmup Iteration  18: 6741800.758 ops/s
# Warmup Iteration  19: 6741303.775 ops/s
# Warmup Iteration  20: 6715585.182 ops/s
# Warmup Iteration  21: 6747964.489 ops/s
# Warmup Iteration  22: 6747637.898 ops/s
# Warmup Iteration  23: 6640659.577 ops/s
# Warmup Iteration  24: 6735443.338 ops/s
# Warmup Iteration  25: 6738619.310 ops/s
# Warmup Iteration  26: 6749091.742 ops/s
# Warmup Iteration  27: 6736149.242 ops/s
# Warmup Iteration  28: 6679189.583 ops/s
# Warmup Iteration  29: 6721079.009 ops/s
# Warmup Iteration  30: 6681603.075 ops/s
Iteration   1: 6748418.722 ops/s
Iteration   2: 6623675.452 ops/s
Iteration   3: 6736499.853 ops/s
Iteration   4: 6736742.528 ops/s
Iteration   5: 6717804.228 ops/s
Iteration   6: 6708074.722 ops/s
Iteration   7: 6711346.091 ops/s
Iteration   8: 6742990.726 ops/s
Iteration   9: 6737568.274 ops/s
Iteration  10: 6736612.713 ops/s
Iteration  11: 6738434.519 ops/s
Iteration  12: 6750099.072 ops/s
Iteration  13: 6730134.282 ops/s
Iteration  14: 6713117.485 ops/s
Iteration  15: 6744419.686 ops/s
Iteration  16: 6716758.954 ops/s
Iteration  17: 6708399.745 ops/s
Iteration  18: 6758424.382 ops/s
Iteration  19: 6721367.377 ops/s
Iteration  20: 6710649.176 ops/s
Iteration  21: 6732001.125 ops/s
Iteration  22: 6753066.343 ops/s
Iteration  23: 6734218.821 ops/s
Iteration  24: 6732384.914 ops/s
Iteration  25: 6732149.942 ops/s
Iteration  26: 6739491.629 ops/s
Iteration  27: 6748509.334 ops/s
Iteration  28: 6733327.357 ops/s
Iteration  29: 6751015.517 ops/s
Iteration  30: 6654529.282 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirst":
  6726741.075 ±(99.9%) 18681.120 ops/s [Average]
  (min, avg, max) = (6623675.452, 6726741.075, 6758424.382), stdev = 27961.023
  CI (99.9%): [6708059.955, 6745422.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getFirst  thrpt   30  6726741.075 ± 18681.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2492827.078 ops/s
# Warmup Iteration   2: 5475825.313 ops/s
# Warmup Iteration   3: 5454848.065 ops/s
# Warmup Iteration   4: 4586054.387 ops/s
# Warmup Iteration   5: 5465868.074 ops/s
# Warmup Iteration   6: 5416306.630 ops/s
# Warmup Iteration   7: 5418188.026 ops/s
# Warmup Iteration   8: 5471714.397 ops/s
# Warmup Iteration   9: 5467073.923 ops/s
# Warmup Iteration  10: 5468355.263 ops/s
# Warmup Iteration  11: 5473097.043 ops/s
# Warmup Iteration  12: 5429903.516 ops/s
# Warmup Iteration  13: 5471404.221 ops/s
# Warmup Iteration  14: 5471809.180 ops/s
# Warmup Iteration  15: 5466602.910 ops/s
# Warmup Iteration  16: 5448105.519 ops/s
# Warmup Iteration  17: 5472816.505 ops/s
# Warmup Iteration  18: 5459905.963 ops/s
# Warmup Iteration  19: 5468106.048 ops/s
# Warmup Iteration  20: 5396179.117 ops/s
# Warmup Iteration  21: 5424684.392 ops/s
# Warmup Iteration  22: 5480190.676 ops/s
# Warmup Iteration  23: 5445274.886 ops/s
# Warmup Iteration  24: 5461524.609 ops/s
# Warmup Iteration  25: 5429764.668 ops/s
# Warmup Iteration  26: 5469563.524 ops/s
# Warmup Iteration  27: 5462389.560 ops/s
# Warmup Iteration  28: 5438631.004 ops/s
# Warmup Iteration  29: 5472936.280 ops/s
# Warmup Iteration  30: 5467405.656 ops/s
Iteration   1: 5461466.387 ops/s
Iteration   2: 5487036.352 ops/s
Iteration   3: 5388485.082 ops/s
Iteration   4: 5467130.775 ops/s
Iteration   5: 5389552.605 ops/s
Iteration   6: 5376379.353 ops/s
Iteration   7: 5477640.253 ops/s
Iteration   8: 5437516.149 ops/s
Iteration   9: 5454669.789 ops/s
Iteration  10: 5457455.586 ops/s
Iteration  11: 5478446.890 ops/s
Iteration  12: 5465019.583 ops/s
Iteration  13: 5446058.944 ops/s
Iteration  14: 5469570.692 ops/s
Iteration  15: 5470223.407 ops/s
Iteration  16: 5477732.750 ops/s
Iteration  17: 5478976.112 ops/s
Iteration  18: 5456648.402 ops/s
Iteration  19: 5449250.292 ops/s
Iteration  20: 5422063.160 ops/s
Iteration  21: 5471333.865 ops/s
Iteration  22: 5460957.992 ops/s
Iteration  23: 5482007.044 ops/s
Iteration  24: 5439803.072 ops/s
Iteration  25: 5466230.491 ops/s
Iteration  26: 5464213.447 ops/s
Iteration  27: 5470949.996 ops/s
Iteration  28: 5447256.614 ops/s
Iteration  29: 5471847.680 ops/s
Iteration  30: 5481412.924 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getFirstOptional":
  5455577.856 ±(99.9%) 18845.848 ops/s [Average]
  (min, avg, max) = (5376379.353, 5455577.856, 5487036.352), stdev = 28207.580
  CI (99.9%): [5436732.008, 5474423.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getFirstOptional  thrpt   30  5455577.856 ± 18845.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2258599.088 ops/s
# Warmup Iteration   2: 3416037.445 ops/s
# Warmup Iteration   3: 3842034.807 ops/s
# Warmup Iteration   4: 3892265.714 ops/s
# Warmup Iteration   5: 3893531.875 ops/s
# Warmup Iteration   6: 3842459.649 ops/s
# Warmup Iteration   7: 3238339.099 ops/s
# Warmup Iteration   8: 3900855.010 ops/s
# Warmup Iteration   9: 3891601.461 ops/s
# Warmup Iteration  10: 3905691.485 ops/s
# Warmup Iteration  11: 3840426.223 ops/s
# Warmup Iteration  12: 3890183.043 ops/s
# Warmup Iteration  13: 3891454.535 ops/s
# Warmup Iteration  14: 3905898.506 ops/s
# Warmup Iteration  15: 3889540.262 ops/s
# Warmup Iteration  16: 3895696.697 ops/s
# Warmup Iteration  17: 3898047.434 ops/s
# Warmup Iteration  18: 3894459.786 ops/s
# Warmup Iteration  19: 3904511.393 ops/s
# Warmup Iteration  20: 3887528.650 ops/s
# Warmup Iteration  21: 3860262.494 ops/s
# Warmup Iteration  22: 3849135.659 ops/s
# Warmup Iteration  23: 3906995.269 ops/s
# Warmup Iteration  24: 3864834.037 ops/s
# Warmup Iteration  25: 3884985.012 ops/s
# Warmup Iteration  26: 3897506.069 ops/s
# Warmup Iteration  27: 3873496.354 ops/s
# Warmup Iteration  28: 3902714.642 ops/s
# Warmup Iteration  29: 3886803.321 ops/s
# Warmup Iteration  30: 3900275.526 ops/s
Iteration   1: 3839311.842 ops/s
Iteration   2: 3885016.927 ops/s
Iteration   3: 3902312.204 ops/s
Iteration   4: 3907439.774 ops/s
Iteration   5: 3735466.752 ops/s
Iteration   6: 3904367.743 ops/s
Iteration   7: 3902497.808 ops/s
Iteration   8: 3908507.627 ops/s
Iteration   9: 3902934.662 ops/s
Iteration  10: 3904627.705 ops/s
Iteration  11: 3906119.229 ops/s
Iteration  12: 3899898.556 ops/s
Iteration  13: 3912947.524 ops/s
Iteration  14: 3900445.055 ops/s
Iteration  15: 3905179.585 ops/s
Iteration  16: 3906520.775 ops/s
Iteration  17: 3898404.135 ops/s
Iteration  18: 3882321.923 ops/s
Iteration  19: 3905577.645 ops/s
Iteration  20: 3895422.625 ops/s
Iteration  21: 3898462.551 ops/s
Iteration  22: 3794804.091 ops/s
Iteration  23: 3907954.039 ops/s
Iteration  24: 3894942.680 ops/s
Iteration  25: 3908786.618 ops/s
Iteration  26: 3903399.307 ops/s
Iteration  27: 3901871.920 ops/s
Iteration  28: 3907047.549 ops/s
Iteration  29: 3896457.212 ops/s
Iteration  30: 3901196.636 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLast":
  3890674.757 ±(99.9%) 24971.825 ops/s [Average]
  (min, avg, max) = (3735466.752, 3890674.757, 3912947.524), stdev = 37376.655
  CI (99.9%): [3865702.932, 3915646.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getLast  thrpt   30  3890674.757 ± 24971.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1906975.784 ops/s
# Warmup Iteration   2: 3094170.361 ops/s
# Warmup Iteration   3: 3466924.064 ops/s
# Warmup Iteration   4: 3496212.747 ops/s
# Warmup Iteration   5: 3473670.080 ops/s
# Warmup Iteration   6: 2895768.881 ops/s
# Warmup Iteration   7: 3487123.664 ops/s
# Warmup Iteration   8: 3486716.072 ops/s
# Warmup Iteration   9: 3459734.075 ops/s
# Warmup Iteration  10: 3484349.405 ops/s
# Warmup Iteration  11: 3477671.669 ops/s
# Warmup Iteration  12: 3463623.672 ops/s
# Warmup Iteration  13: 3475665.093 ops/s
# Warmup Iteration  14: 3490715.613 ops/s
# Warmup Iteration  15: 3487959.692 ops/s
# Warmup Iteration  16: 3485653.116 ops/s
# Warmup Iteration  17: 3481028.709 ops/s
# Warmup Iteration  18: 3480079.397 ops/s
# Warmup Iteration  19: 3480747.391 ops/s
# Warmup Iteration  20: 3485495.475 ops/s
# Warmup Iteration  21: 3489509.841 ops/s
# Warmup Iteration  22: 3488841.969 ops/s
# Warmup Iteration  23: 3483859.196 ops/s
# Warmup Iteration  24: 3483289.766 ops/s
# Warmup Iteration  25: 3493137.445 ops/s
# Warmup Iteration  26: 3463682.032 ops/s
# Warmup Iteration  27: 3481233.152 ops/s
# Warmup Iteration  28: 3458428.007 ops/s
# Warmup Iteration  29: 3483265.657 ops/s
# Warmup Iteration  30: 3450541.701 ops/s
Iteration   1: 3495811.672 ops/s
Iteration   2: 3476783.225 ops/s
Iteration   3: 3484412.016 ops/s
Iteration   4: 3430370.970 ops/s
Iteration   5: 3479154.149 ops/s
Iteration   6: 3496158.499 ops/s
Iteration   7: 3485531.851 ops/s
Iteration   8: 3493163.401 ops/s
Iteration   9: 3478482.110 ops/s
Iteration  10: 3491929.081 ops/s
Iteration  11: 3487493.266 ops/s
Iteration  12: 3490437.177 ops/s
Iteration  13: 3478668.616 ops/s
Iteration  14: 3495365.244 ops/s
Iteration  15: 3476576.672 ops/s
Iteration  16: 3483053.220 ops/s
Iteration  17: 3480192.197 ops/s
Iteration  18: 3491452.424 ops/s
Iteration  19: 3484533.549 ops/s
Iteration  20: 3487326.183 ops/s
Iteration  21: 3475543.529 ops/s
Iteration  22: 3495879.104 ops/s
Iteration  23: 3450224.944 ops/s
Iteration  24: 3488221.652 ops/s
Iteration  25: 3482782.239 ops/s
Iteration  26: 3486913.157 ops/s
Iteration  27: 3464952.440 ops/s
Iteration  28: 3488842.304 ops/s
Iteration  29: 3493361.250 ops/s
Iteration  30: 3427387.382 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getLastOptional":
  3480700.117 ±(99.9%) 11438.793 ops/s [Average]
  (min, avg, max) = (3427387.382, 3480700.117, 3496158.499), stdev = 17121.047
  CI (99.9%): [3469261.325, 3492138.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getLastOptional  thrpt   30  3480700.117 ± 11438.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3515473.483 ops/s
# Warmup Iteration   2: 6633846.482 ops/s
# Warmup Iteration   3: 6991367.448 ops/s
# Warmup Iteration   4: 7058306.178 ops/s
# Warmup Iteration   5: 5785531.135 ops/s
# Warmup Iteration   6: 7134796.985 ops/s
# Warmup Iteration   7: 7016992.524 ops/s
# Warmup Iteration   8: 7043200.542 ops/s
# Warmup Iteration   9: 7137527.691 ops/s
# Warmup Iteration  10: 7049081.888 ops/s
# Warmup Iteration  11: 7075686.458 ops/s
# Warmup Iteration  12: 7122069.942 ops/s
# Warmup Iteration  13: 7118758.147 ops/s
# Warmup Iteration  14: 7137458.786 ops/s
# Warmup Iteration  15: 7125736.193 ops/s
# Warmup Iteration  16: 7133139.197 ops/s
# Warmup Iteration  17: 7137563.509 ops/s
# Warmup Iteration  18: 7094975.220 ops/s
# Warmup Iteration  19: 7116151.357 ops/s
# Warmup Iteration  20: 7134624.948 ops/s
# Warmup Iteration  21: 7129653.538 ops/s
# Warmup Iteration  22: 7119448.863 ops/s
# Warmup Iteration  23: 7057486.170 ops/s
# Warmup Iteration  24: 7112515.115 ops/s
# Warmup Iteration  25: 7139506.471 ops/s
# Warmup Iteration  26: 7116992.857 ops/s
# Warmup Iteration  27: 7104761.623 ops/s
# Warmup Iteration  28: 7070929.031 ops/s
# Warmup Iteration  29: 7110494.318 ops/s
# Warmup Iteration  30: 7092019.761 ops/s
Iteration   1: 7136624.454 ops/s
Iteration   2: 7010910.463 ops/s
Iteration   3: 7018866.812 ops/s
Iteration   4: 7010751.603 ops/s
Iteration   5: 7126493.723 ops/s
Iteration   6: 7014677.954 ops/s
Iteration   7: 6994552.411 ops/s
Iteration   8: 7108177.035 ops/s
Iteration   9: 7113628.568 ops/s
Iteration  10: 7130166.434 ops/s
Iteration  11: 7062234.158 ops/s
Iteration  12: 7123248.792 ops/s
Iteration  13: 7148472.018 ops/s
Iteration  14: 7116107.454 ops/s
Iteration  15: 7118017.146 ops/s
Iteration  16: 7136279.667 ops/s
Iteration  17: 7127333.715 ops/s
Iteration  18: 7126506.305 ops/s
Iteration  19: 7135785.179 ops/s
Iteration  20: 7138176.728 ops/s
Iteration  21: 7137990.330 ops/s
Iteration  22: 7147352.105 ops/s
Iteration  23: 7111488.126 ops/s
Iteration  24: 7104666.884 ops/s
Iteration  25: 7110412.765 ops/s
Iteration  26: 7021762.602 ops/s
Iteration  27: 7019303.997 ops/s
Iteration  28: 7122326.925 ops/s
Iteration  29: 7149490.102 ops/s
Iteration  30: 7102495.638 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly":
  7097476.670 ±(99.9%) 33712.412 ops/s [Average]
  (min, avg, max) = (6994552.411, 7097476.670, 7149490.102), stdev = 50459.156
  CI (99.9%): [7063764.257, 7131189.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_getOnly  thrpt   30  7097476.670 ± 33712.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717206.925 ops/s
# Warmup Iteration   2: 748046.114 ops/s
# Warmup Iteration   3: 947137.362 ops/s
# Warmup Iteration   4: 981296.191 ops/s
# Warmup Iteration   5: 983028.850 ops/s
# Warmup Iteration   6: 976266.177 ops/s
# Warmup Iteration   7: 975184.117 ops/s
# Warmup Iteration   8: 982510.787 ops/s
# Warmup Iteration   9: 975679.579 ops/s
# Warmup Iteration  10: 982010.810 ops/s
# Warmup Iteration  11: 972699.295 ops/s
# Warmup Iteration  12: 947396.947 ops/s
# Warmup Iteration  13: 856931.363 ops/s
# Warmup Iteration  14: 979757.443 ops/s
# Warmup Iteration  15: 971518.171 ops/s
# Warmup Iteration  16: 982240.591 ops/s
# Warmup Iteration  17: 1038679.355 ops/s
# Warmup Iteration  18: 1039954.844 ops/s
# Warmup Iteration  19: 1031537.999 ops/s
# Warmup Iteration  20: 1033840.320 ops/s
# Warmup Iteration  21: 1044156.340 ops/s
# Warmup Iteration  22: 1035325.885 ops/s
# Warmup Iteration  23: 1041813.033 ops/s
# Warmup Iteration  24: 1042156.739 ops/s
# Warmup Iteration  25: 1041350.761 ops/s
# Warmup Iteration  26: 1044286.378 ops/s
# Warmup Iteration  27: 1034369.880 ops/s
# Warmup Iteration  28: 1032288.895 ops/s
# Warmup Iteration  29: 1043434.575 ops/s
# Warmup Iteration  30: 1038262.960 ops/s
Iteration   1: 1044310.178 ops/s
Iteration   2: 1026094.358 ops/s
Iteration   3: 1039937.757 ops/s
Iteration   4: 1044029.707 ops/s
Iteration   5: 1038593.882 ops/s
Iteration   6: 1042617.383 ops/s
Iteration   7: 1034840.327 ops/s
Iteration   8: 1041199.763 ops/s
Iteration   9: 1040781.794 ops/s
Iteration  10: 1045020.979 ops/s
Iteration  11: 1028709.662 ops/s
Iteration  12: 1016214.935 ops/s
Iteration  13: 1029463.747 ops/s
Iteration  14: 1044798.193 ops/s
Iteration  15: 1042502.453 ops/s
Iteration  16: 1044176.314 ops/s
Iteration  17: 1036724.951 ops/s
Iteration  18: 1041502.553 ops/s
Iteration  19: 1017804.019 ops/s
Iteration  20: 1041248.702 ops/s
Iteration  21: 1044114.206 ops/s
Iteration  22: 1037892.400 ops/s
Iteration  23: 991491.630 ops/s
Iteration  24: 1040853.464 ops/s
Iteration  25: 1011344.468 ops/s
Iteration  26: 1041351.600 ops/s
Iteration  27: 1039345.107 ops/s
Iteration  28: 1042904.133 ops/s
Iteration  29: 1044210.514 ops/s
Iteration  30: 1039816.427 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_empty_throws":
  1035796.520 ±(99.9%) 8176.765 ops/s [Average]
  (min, avg, max) = (991491.630, 1035796.520, 1045020.979), stdev = 12238.599
  CI (99.9%): [1027619.755, 1043973.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1035796.520 ± 8176.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696175.694 ops/s
# Warmup Iteration   2: 722450.090 ops/s
# Warmup Iteration   3: 954987.530 ops/s
# Warmup Iteration   4: 959392.667 ops/s
# Warmup Iteration   5: 955179.894 ops/s
# Warmup Iteration   6: 957471.423 ops/s
# Warmup Iteration   7: 957450.126 ops/s
# Warmup Iteration   8: 959944.517 ops/s
# Warmup Iteration   9: 959536.046 ops/s
# Warmup Iteration  10: 955361.895 ops/s
# Warmup Iteration  11: 962769.820 ops/s
# Warmup Iteration  12: 798498.006 ops/s
# Warmup Iteration  13: 961044.671 ops/s
# Warmup Iteration  14: 957421.220 ops/s
# Warmup Iteration  15: 957402.805 ops/s
# Warmup Iteration  16: 956873.425 ops/s
# Warmup Iteration  17: 1020431.339 ops/s
# Warmup Iteration  18: 1010900.884 ops/s
# Warmup Iteration  19: 1022960.957 ops/s
# Warmup Iteration  20: 1024361.885 ops/s
# Warmup Iteration  21: 1023263.550 ops/s
# Warmup Iteration  22: 1020763.722 ops/s
# Warmup Iteration  23: 1022108.109 ops/s
# Warmup Iteration  24: 1018647.121 ops/s
# Warmup Iteration  25: 1023102.506 ops/s
# Warmup Iteration  26: 1019798.829 ops/s
# Warmup Iteration  27: 1024619.926 ops/s
# Warmup Iteration  28: 1021508.836 ops/s
# Warmup Iteration  29: 1022517.978 ops/s
# Warmup Iteration  30: 1022770.682 ops/s
Iteration   1: 1024859.986 ops/s
Iteration   2: 1019920.492 ops/s
Iteration   3: 1024236.250 ops/s
Iteration   4: 1023385.213 ops/s
Iteration   5: 1022173.723 ops/s
Iteration   6: 1021030.778 ops/s
Iteration   7: 1020687.772 ops/s
Iteration   8: 1023632.208 ops/s
Iteration   9: 1023119.422 ops/s
Iteration  10: 1020693.344 ops/s
Iteration  11: 1006618.306 ops/s
Iteration  12: 1017351.367 ops/s
Iteration  13: 1023053.699 ops/s
Iteration  14: 1011252.749 ops/s
Iteration  15: 1023154.707 ops/s
Iteration  16: 1008375.005 ops/s
Iteration  17: 1006021.049 ops/s
Iteration  18: 1016288.425 ops/s
Iteration  19: 1020028.077 ops/s
Iteration  20: 1016777.261 ops/s
Iteration  21: 1021083.616 ops/s
Iteration  22: 1021296.819 ops/s
Iteration  23: 1007358.135 ops/s
Iteration  24: 1022575.523 ops/s
Iteration  25: 1006842.104 ops/s
Iteration  26: 1019989.587 ops/s
Iteration  27: 1018004.313 ops/s
Iteration  28: 1022717.007 ops/s
Iteration  29: 1021283.354 ops/s
Iteration  30: 1021451.286 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1018508.719 ±(99.9%) 3943.104 ops/s [Average]
  (min, avg, max) = (1006021.049, 1018508.719, 1024859.986), stdev = 5901.853
  CI (99.9%): [1014565.615, 1022451.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1018508.719 ± 3943.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642475.233 ops/s
# Warmup Iteration   2: 659697.625 ops/s
# Warmup Iteration   3: 854907.101 ops/s
# Warmup Iteration   4: 883879.615 ops/s
# Warmup Iteration   5: 877874.489 ops/s
# Warmup Iteration   6: 879441.211 ops/s
# Warmup Iteration   7: 885076.916 ops/s
# Warmup Iteration   8: 887470.452 ops/s
# Warmup Iteration   9: 861893.804 ops/s
# Warmup Iteration  10: 884657.282 ops/s
# Warmup Iteration  11: 877155.508 ops/s
# Warmup Iteration  12: 803800.583 ops/s
# Warmup Iteration  13: 807217.947 ops/s
# Warmup Iteration  14: 884261.333 ops/s
# Warmup Iteration  15: 878416.725 ops/s
# Warmup Iteration  16: 871704.768 ops/s
# Warmup Iteration  17: 927107.002 ops/s
# Warmup Iteration  18: 927884.499 ops/s
# Warmup Iteration  19: 934238.038 ops/s
# Warmup Iteration  20: 935602.124 ops/s
# Warmup Iteration  21: 935138.412 ops/s
# Warmup Iteration  22: 937244.278 ops/s
# Warmup Iteration  23: 928232.170 ops/s
# Warmup Iteration  24: 926782.175 ops/s
# Warmup Iteration  25: 930606.472 ops/s
# Warmup Iteration  26: 934424.308 ops/s
# Warmup Iteration  27: 930395.174 ops/s
# Warmup Iteration  28: 936491.055 ops/s
# Warmup Iteration  29: 936540.454 ops/s
# Warmup Iteration  30: 935146.739 ops/s
Iteration   1: 938221.205 ops/s
Iteration   2: 933318.771 ops/s
Iteration   3: 928722.246 ops/s
Iteration   4: 934009.440 ops/s
Iteration   5: 926908.911 ops/s
Iteration   6: 936937.434 ops/s
Iteration   7: 934624.489 ops/s
Iteration   8: 931934.889 ops/s
Iteration   9: 933692.992 ops/s
Iteration  10: 934436.368 ops/s
Iteration  11: 930731.800 ops/s
Iteration  12: 934125.530 ops/s
Iteration  13: 934737.123 ops/s
Iteration  14: 932887.415 ops/s
Iteration  15: 927513.383 ops/s
Iteration  16: 937058.846 ops/s
Iteration  17: 937756.962 ops/s
Iteration  18: 935821.687 ops/s
Iteration  19: 937170.104 ops/s
Iteration  20: 933995.589 ops/s
Iteration  21: 938059.067 ops/s
Iteration  22: 924746.963 ops/s
Iteration  23: 934458.894 ops/s
Iteration  24: 934339.258 ops/s
Iteration  25: 938878.095 ops/s
Iteration  26: 933378.463 ops/s
Iteration  27: 924451.769 ops/s
Iteration  28: 932744.185 ops/s
Iteration  29: 938080.826 ops/s
Iteration  30: 933845.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  933586.265 ±(99.9%) 2579.466 ops/s [Average]
  (min, avg, max) = (924451.769, 933586.265, 938878.095), stdev = 3860.823
  CI (99.9%): [931006.800, 936165.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  933586.265 ± 2579.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661201.806 ops/s
# Warmup Iteration   2: 687988.072 ops/s
# Warmup Iteration   3: 930527.813 ops/s
# Warmup Iteration   4: 926069.833 ops/s
# Warmup Iteration   5: 928435.036 ops/s
# Warmup Iteration   6: 928941.109 ops/s
# Warmup Iteration   7: 930338.706 ops/s
# Warmup Iteration   8: 929977.513 ops/s
# Warmup Iteration   9: 930544.315 ops/s
# Warmup Iteration  10: 929466.050 ops/s
# Warmup Iteration  11: 869266.870 ops/s
# Warmup Iteration  12: 835581.667 ops/s
# Warmup Iteration  13: 929328.665 ops/s
# Warmup Iteration  14: 930865.266 ops/s
# Warmup Iteration  15: 927335.675 ops/s
# Warmup Iteration  16: 930050.263 ops/s
# Warmup Iteration  17: 975621.082 ops/s
# Warmup Iteration  18: 981873.814 ops/s
# Warmup Iteration  19: 978176.748 ops/s
# Warmup Iteration  20: 983424.359 ops/s
# Warmup Iteration  21: 980154.309 ops/s
# Warmup Iteration  22: 976489.028 ops/s
# Warmup Iteration  23: 980507.541 ops/s
# Warmup Iteration  24: 972383.601 ops/s
# Warmup Iteration  25: 975012.559 ops/s
# Warmup Iteration  26: 984233.461 ops/s
# Warmup Iteration  27: 981889.267 ops/s
# Warmup Iteration  28: 981543.610 ops/s
# Warmup Iteration  29: 983292.861 ops/s
# Warmup Iteration  30: 977080.636 ops/s
Iteration   1: 968323.454 ops/s
Iteration   2: 984279.240 ops/s
Iteration   3: 985808.368 ops/s
Iteration   4: 970865.157 ops/s
Iteration   5: 980786.392 ops/s
Iteration   6: 982278.610 ops/s
Iteration   7: 968491.597 ops/s
Iteration   8: 981422.352 ops/s
Iteration   9: 978694.077 ops/s
Iteration  10: 980547.176 ops/s
Iteration  11: 983748.647 ops/s
Iteration  12: 978487.396 ops/s
Iteration  13: 986474.197 ops/s
Iteration  14: 982523.331 ops/s
Iteration  15: 983803.031 ops/s
Iteration  16: 964670.958 ops/s
Iteration  17: 959267.222 ops/s
Iteration  18: 969030.345 ops/s
Iteration  19: 981256.107 ops/s
Iteration  20: 985046.816 ops/s
Iteration  21: 983481.152 ops/s
Iteration  22: 983075.814 ops/s
Iteration  23: 983097.885 ops/s
Iteration  24: 980846.701 ops/s
Iteration  25: 983180.909 ops/s
Iteration  26: 982648.040 ops/s
Iteration  27: 982833.523 ops/s
Iteration  28: 974156.260 ops/s
Iteration  29: 978791.988 ops/s
Iteration  30: 985232.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  979104.976 ±(99.9%) 4644.459 ops/s [Average]
  (min, avg, max) = (959267.222, 979104.976, 986474.197), stdev = 6951.608
  CI (99.9%): [974460.517, 983749.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  979104.976 ± 4644.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 308059.100 ops/s
# Warmup Iteration   2: 572005.824 ops/s
# Warmup Iteration   3: 643684.335 ops/s
# Warmup Iteration   4: 644843.899 ops/s
# Warmup Iteration   5: 627704.357 ops/s
# Warmup Iteration   6: 552597.773 ops/s
# Warmup Iteration   7: 643697.410 ops/s
# Warmup Iteration   8: 639154.886 ops/s
# Warmup Iteration   9: 640111.226 ops/s
# Warmup Iteration  10: 645422.651 ops/s
# Warmup Iteration  11: 645783.426 ops/s
# Warmup Iteration  12: 645254.209 ops/s
# Warmup Iteration  13: 645589.497 ops/s
# Warmup Iteration  14: 639005.604 ops/s
# Warmup Iteration  15: 646778.982 ops/s
# Warmup Iteration  16: 642090.919 ops/s
# Warmup Iteration  17: 646521.334 ops/s
# Warmup Iteration  18: 648563.712 ops/s
# Warmup Iteration  19: 642724.270 ops/s
# Warmup Iteration  20: 646433.288 ops/s
# Warmup Iteration  21: 645366.693 ops/s
# Warmup Iteration  22: 645092.213 ops/s
# Warmup Iteration  23: 646461.426 ops/s
# Warmup Iteration  24: 647141.143 ops/s
# Warmup Iteration  25: 642001.723 ops/s
# Warmup Iteration  26: 637027.998 ops/s
# Warmup Iteration  27: 640620.381 ops/s
# Warmup Iteration  28: 642274.928 ops/s
# Warmup Iteration  29: 642926.611 ops/s
# Warmup Iteration  30: 639345.310 ops/s
Iteration   1: 646649.686 ops/s
Iteration   2: 645808.911 ops/s
Iteration   3: 647774.660 ops/s
Iteration   4: 644771.542 ops/s
Iteration   5: 646972.977 ops/s
Iteration   6: 646268.782 ops/s
Iteration   7: 642804.759 ops/s
Iteration   8: 647251.952 ops/s
Iteration   9: 645662.819 ops/s
Iteration  10: 645944.767 ops/s
Iteration  11: 647975.433 ops/s
Iteration  12: 647464.261 ops/s
Iteration  13: 644992.738 ops/s
Iteration  14: 646227.927 ops/s
Iteration  15: 647142.543 ops/s
Iteration  16: 636122.171 ops/s
Iteration  17: 646613.624 ops/s
Iteration  18: 646295.535 ops/s
Iteration  19: 646640.643 ops/s
Iteration  20: 642905.926 ops/s
Iteration  21: 644736.315 ops/s
Iteration  22: 644045.303 ops/s
Iteration  23: 645942.673 ops/s
Iteration  24: 639106.915 ops/s
Iteration  25: 649299.050 ops/s
Iteration  26: 647066.317 ops/s
Iteration  27: 645921.996 ops/s
Iteration  28: 648918.517 ops/s
Iteration  29: 644098.589 ops/s
Iteration  30: 648170.710 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupBy":
  645653.268 ±(99.9%) 1809.264 ops/s [Average]
  (min, avg, max) = (636122.171, 645653.268, 649299.050), stdev = 2708.022
  CI (99.9%): [643844.004, 647462.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_groupBy  thrpt   30  645653.268 ± 1809.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121499.319 ops/s
# Warmup Iteration   2: 199163.307 ops/s
# Warmup Iteration   3: 239882.685 ops/s
# Warmup Iteration   4: 241313.055 ops/s
# Warmup Iteration   5: 241351.340 ops/s
# Warmup Iteration   6: 233702.026 ops/s
# Warmup Iteration   7: 202065.828 ops/s
# Warmup Iteration   8: 238114.416 ops/s
# Warmup Iteration   9: 239758.585 ops/s
# Warmup Iteration  10: 240334.532 ops/s
# Warmup Iteration  11: 240422.429 ops/s
# Warmup Iteration  12: 242111.418 ops/s
# Warmup Iteration  13: 239350.178 ops/s
# Warmup Iteration  14: 242301.231 ops/s
# Warmup Iteration  15: 241856.626 ops/s
# Warmup Iteration  16: 240443.630 ops/s
# Warmup Iteration  17: 242547.812 ops/s
# Warmup Iteration  18: 240636.308 ops/s
# Warmup Iteration  19: 241505.342 ops/s
# Warmup Iteration  20: 240046.472 ops/s
# Warmup Iteration  21: 240310.249 ops/s
# Warmup Iteration  22: 240818.395 ops/s
# Warmup Iteration  23: 241093.125 ops/s
# Warmup Iteration  24: 241621.285 ops/s
# Warmup Iteration  25: 242046.922 ops/s
# Warmup Iteration  26: 241409.650 ops/s
# Warmup Iteration  27: 241795.888 ops/s
# Warmup Iteration  28: 240730.308 ops/s
# Warmup Iteration  29: 241450.182 ops/s
# Warmup Iteration  30: 241094.679 ops/s
Iteration   1: 242046.021 ops/s
Iteration   2: 238289.332 ops/s
Iteration   3: 242439.886 ops/s
Iteration   4: 242106.821 ops/s
Iteration   5: 242648.595 ops/s
Iteration   6: 242003.687 ops/s
Iteration   7: 242459.484 ops/s
Iteration   8: 242608.232 ops/s
Iteration   9: 242244.703 ops/s
Iteration  10: 242130.974 ops/s
Iteration  11: 242593.285 ops/s
Iteration  12: 237467.810 ops/s
Iteration  13: 241961.554 ops/s
Iteration  14: 241315.146 ops/s
Iteration  15: 242616.388 ops/s
Iteration  16: 241780.953 ops/s
Iteration  17: 240931.523 ops/s
Iteration  18: 241216.606 ops/s
Iteration  19: 239048.869 ops/s
Iteration  20: 238520.738 ops/s
Iteration  21: 238503.810 ops/s
Iteration  22: 242050.805 ops/s
Iteration  23: 241232.143 ops/s
Iteration  24: 241979.233 ops/s
Iteration  25: 242339.208 ops/s
Iteration  26: 242383.213 ops/s
Iteration  27: 242329.612 ops/s
Iteration  28: 242370.122 ops/s
Iteration  29: 242435.234 ops/s
Iteration  30: 241580.141 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByEach":
  241454.471 ±(99.9%) 993.895 ops/s [Average]
  (min, avg, max) = (237467.810, 241454.471, 242648.595), stdev = 1487.615
  CI (99.9%): [240460.576, 242448.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_groupByEach  thrpt   30  241454.471 ± 993.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2522213.341 ops/s
# Warmup Iteration   2: 5734609.534 ops/s
# Warmup Iteration   3: 5877952.627 ops/s
# Warmup Iteration   4: 4891907.847 ops/s
# Warmup Iteration   5: 5862828.133 ops/s
# Warmup Iteration   6: 5900877.794 ops/s
# Warmup Iteration   7: 5866583.765 ops/s
# Warmup Iteration   8: 5901021.204 ops/s
# Warmup Iteration   9: 5900657.336 ops/s
# Warmup Iteration  10: 5835636.424 ops/s
# Warmup Iteration  11: 5885217.926 ops/s
# Warmup Iteration  12: 5904188.252 ops/s
# Warmup Iteration  13: 5893653.529 ops/s
# Warmup Iteration  14: 5896903.402 ops/s
# Warmup Iteration  15: 5901977.413 ops/s
# Warmup Iteration  16: 5897828.235 ops/s
# Warmup Iteration  17: 5890796.993 ops/s
# Warmup Iteration  18: 5885578.011 ops/s
# Warmup Iteration  19: 5906294.001 ops/s
# Warmup Iteration  20: 5842955.190 ops/s
# Warmup Iteration  21: 5899647.248 ops/s
# Warmup Iteration  22: 5902498.075 ops/s
# Warmup Iteration  23: 5848813.117 ops/s
# Warmup Iteration  24: 5884265.756 ops/s
# Warmup Iteration  25: 5899614.636 ops/s
# Warmup Iteration  26: 5806928.425 ops/s
# Warmup Iteration  27: 5814133.888 ops/s
# Warmup Iteration  28: 5902234.970 ops/s
# Warmup Iteration  29: 5909042.398 ops/s
# Warmup Iteration  30: 5910095.012 ops/s
Iteration   1: 5900548.041 ops/s
Iteration   2: 5901699.113 ops/s
Iteration   3: 5893464.909 ops/s
Iteration   4: 5897179.853 ops/s
Iteration   5: 5899412.199 ops/s
Iteration   6: 5889996.962 ops/s
Iteration   7: 5907765.018 ops/s
Iteration   8: 5901338.459 ops/s
Iteration   9: 5902773.095 ops/s
Iteration  10: 5905506.509 ops/s
Iteration  11: 5879033.123 ops/s
Iteration  12: 5905279.591 ops/s
Iteration  13: 5904060.008 ops/s
Iteration  14: 5886806.453 ops/s
Iteration  15: 5892507.452 ops/s
Iteration  16: 5888357.516 ops/s
Iteration  17: 5876842.165 ops/s
Iteration  18: 5905687.749 ops/s
Iteration  19: 5897610.847 ops/s
Iteration  20: 5893572.409 ops/s
Iteration  21: 5904443.644 ops/s
Iteration  22: 5896726.708 ops/s
Iteration  23: 5890568.511 ops/s
Iteration  24: 5902880.040 ops/s
Iteration  25: 5809785.426 ops/s
Iteration  26: 5858991.493 ops/s
Iteration  27: 5884563.998 ops/s
Iteration  28: 5885000.280 ops/s
Iteration  29: 5910084.655 ops/s
Iteration  30: 5899982.275 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey":
  5892415.617 ±(99.9%) 12717.214 ops/s [Average]
  (min, avg, max) = (5809785.426, 5892415.617, 5910084.655), stdev = 19034.529
  CI (99.9%): [5879698.403, 5905132.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  5892415.617 ± 12717.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1868952.024 ops/s
# Warmup Iteration   2: 3524813.674 ops/s
# Warmup Iteration   3: 3743751.362 ops/s
# Warmup Iteration   4: 3767031.303 ops/s
# Warmup Iteration   5: 3111198.154 ops/s
# Warmup Iteration   6: 3783394.767 ops/s
# Warmup Iteration   7: 3804712.447 ops/s
# Warmup Iteration   8: 3794012.578 ops/s
# Warmup Iteration   9: 3800160.944 ops/s
# Warmup Iteration  10: 3798285.539 ops/s
# Warmup Iteration  11: 3803630.820 ops/s
# Warmup Iteration  12: 3796139.306 ops/s
# Warmup Iteration  13: 3806403.682 ops/s
# Warmup Iteration  14: 3808578.958 ops/s
# Warmup Iteration  15: 3786558.884 ops/s
# Warmup Iteration  16: 3794708.893 ops/s
# Warmup Iteration  17: 3804642.610 ops/s
# Warmup Iteration  18: 3802517.418 ops/s
# Warmup Iteration  19: 3800841.142 ops/s
# Warmup Iteration  20: 3797612.415 ops/s
# Warmup Iteration  21: 3807512.101 ops/s
# Warmup Iteration  22: 3781399.609 ops/s
# Warmup Iteration  23: 3749969.860 ops/s
# Warmup Iteration  24: 3770880.777 ops/s
# Warmup Iteration  25: 3767236.110 ops/s
# Warmup Iteration  26: 3777011.274 ops/s
# Warmup Iteration  27: 3777372.012 ops/s
# Warmup Iteration  28: 3767336.391 ops/s
# Warmup Iteration  29: 3791376.317 ops/s
# Warmup Iteration  30: 3804001.652 ops/s
Iteration   1: 3793977.491 ops/s
Iteration   2: 3802803.440 ops/s
Iteration   3: 3802660.153 ops/s
Iteration   4: 3777150.363 ops/s
Iteration   5: 3807721.450 ops/s
Iteration   6: 3796244.985 ops/s
Iteration   7: 3753585.567 ops/s
Iteration   8: 3795595.722 ops/s
Iteration   9: 3788626.329 ops/s
Iteration  10: 3749381.933 ops/s
Iteration  11: 3802584.015 ops/s
Iteration  12: 3802871.566 ops/s
Iteration  13: 3812075.885 ops/s
Iteration  14: 3799679.888 ops/s
Iteration  15: 3738309.689 ops/s
Iteration  16: 3804752.961 ops/s
Iteration  17: 3808029.953 ops/s
Iteration  18: 3745134.830 ops/s
Iteration  19: 3812633.082 ops/s
Iteration  20: 3804619.976 ops/s
Iteration  21: 3802541.949 ops/s
Iteration  22: 3745207.733 ops/s
Iteration  23: 3800028.892 ops/s
Iteration  24: 3789266.943 ops/s
Iteration  25: 3742618.876 ops/s
Iteration  26: 3784725.417 ops/s
Iteration  27: 3806792.327 ops/s
Iteration  28: 3809468.500 ops/s
Iteration  29: 3686616.628 ops/s
Iteration  30: 3813770.879 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target":
  3785982.581 ±(99.9%) 20269.939 ops/s [Average]
  (min, avg, max) = (3686616.628, 3785982.581, 3813770.879), stdev = 30339.093
  CI (99.9%): [3765712.642, 3806252.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  3785982.581 ± 20269.939  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465028.605 ops/s
# Warmup Iteration   2: 574271.821 ops/s
# Warmup Iteration   3: 745493.234 ops/s
# Warmup Iteration   4: 740801.939 ops/s
# Warmup Iteration   5: 744809.066 ops/s
# Warmup Iteration   6: 745530.748 ops/s
# Warmup Iteration   7: 741202.476 ops/s
# Warmup Iteration   8: 744255.380 ops/s
# Warmup Iteration   9: 618867.389 ops/s
# Warmup Iteration  10: 735998.697 ops/s
# Warmup Iteration  11: 745794.632 ops/s
# Warmup Iteration  12: 739163.346 ops/s
# Warmup Iteration  13: 743530.300 ops/s
# Warmup Iteration  14: 745586.354 ops/s
# Warmup Iteration  15: 744704.865 ops/s
# Warmup Iteration  16: 743735.297 ops/s
# Warmup Iteration  17: 779942.366 ops/s
# Warmup Iteration  18: 779642.479 ops/s
# Warmup Iteration  19: 773068.769 ops/s
# Warmup Iteration  20: 776037.204 ops/s
# Warmup Iteration  21: 774256.557 ops/s
# Warmup Iteration  22: 770050.267 ops/s
# Warmup Iteration  23: 772460.342 ops/s
# Warmup Iteration  24: 775687.612 ops/s
# Warmup Iteration  25: 779311.791 ops/s
# Warmup Iteration  26: 771933.453 ops/s
# Warmup Iteration  27: 765576.478 ops/s
# Warmup Iteration  28: 770757.791 ops/s
# Warmup Iteration  29: 778209.628 ops/s
# Warmup Iteration  30: 773014.593 ops/s
Iteration   1: 778910.692 ops/s
Iteration   2: 776673.692 ops/s
Iteration   3: 770131.932 ops/s
Iteration   4: 778370.935 ops/s
Iteration   5: 764966.677 ops/s
Iteration   6: 779670.177 ops/s
Iteration   7: 771866.820 ops/s
Iteration   8: 766031.229 ops/s
Iteration   9: 776781.065 ops/s
Iteration  10: 775342.850 ops/s
Iteration  11: 782112.842 ops/s
Iteration  12: 779524.504 ops/s
Iteration  13: 777099.491 ops/s
Iteration  14: 777492.436 ops/s
Iteration  15: 777312.882 ops/s
Iteration  16: 776296.941 ops/s
Iteration  17: 778964.107 ops/s
Iteration  18: 778888.231 ops/s
Iteration  19: 779885.140 ops/s
Iteration  20: 778264.471 ops/s
Iteration  21: 762069.717 ops/s
Iteration  22: 776690.210 ops/s
Iteration  23: 771418.268 ops/s
Iteration  24: 778442.104 ops/s
Iteration  25: 775782.705 ops/s
Iteration  26: 779187.900 ops/s
Iteration  27: 767377.417 ops/s
Iteration  28: 774942.489 ops/s
Iteration  29: 780275.053 ops/s
Iteration  30: 779792.017 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  775685.500 ±(99.9%) 3354.187 ops/s [Average]
  (min, avg, max) = (762069.717, 775685.500, 782112.842), stdev = 5020.390
  CI (99.9%): [772331.313, 779039.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  775685.500 ± 3354.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487930.463 ops/s
# Warmup Iteration   2: 588342.919 ops/s
# Warmup Iteration   3: 746771.821 ops/s
# Warmup Iteration   4: 741156.245 ops/s
# Warmup Iteration   5: 745092.192 ops/s
# Warmup Iteration   6: 745573.045 ops/s
# Warmup Iteration   7: 746996.234 ops/s
# Warmup Iteration   8: 744913.745 ops/s
# Warmup Iteration   9: 652602.416 ops/s
# Warmup Iteration  10: 723009.037 ops/s
# Warmup Iteration  11: 747798.046 ops/s
# Warmup Iteration  12: 748340.939 ops/s
# Warmup Iteration  13: 747339.285 ops/s
# Warmup Iteration  14: 749020.171 ops/s
# Warmup Iteration  15: 746667.713 ops/s
# Warmup Iteration  16: 741420.564 ops/s
# Warmup Iteration  17: 776917.650 ops/s
# Warmup Iteration  18: 781410.064 ops/s
# Warmup Iteration  19: 771727.197 ops/s
# Warmup Iteration  20: 775372.067 ops/s
# Warmup Iteration  21: 777459.618 ops/s
# Warmup Iteration  22: 778686.351 ops/s
# Warmup Iteration  23: 776271.433 ops/s
# Warmup Iteration  24: 779945.494 ops/s
# Warmup Iteration  25: 779776.990 ops/s
# Warmup Iteration  26: 774013.711 ops/s
# Warmup Iteration  27: 775249.595 ops/s
# Warmup Iteration  28: 780043.896 ops/s
# Warmup Iteration  29: 778874.734 ops/s
# Warmup Iteration  30: 775995.038 ops/s
Iteration   1: 780048.328 ops/s
Iteration   2: 779722.820 ops/s
Iteration   3: 780752.806 ops/s
Iteration   4: 780270.780 ops/s
Iteration   5: 781108.772 ops/s
Iteration   6: 782919.515 ops/s
Iteration   7: 780122.429 ops/s
Iteration   8: 770061.855 ops/s
Iteration   9: 780490.984 ops/s
Iteration  10: 768318.190 ops/s
Iteration  11: 786192.703 ops/s
Iteration  12: 780108.136 ops/s
Iteration  13: 768093.837 ops/s
Iteration  14: 772832.273 ops/s
Iteration  15: 780358.469 ops/s
Iteration  16: 782394.518 ops/s
Iteration  17: 773956.173 ops/s
Iteration  18: 779487.869 ops/s
Iteration  19: 784791.807 ops/s
Iteration  20: 778747.313 ops/s
Iteration  21: 777300.859 ops/s
Iteration  22: 782578.169 ops/s
Iteration  23: 764720.865 ops/s
Iteration  24: 779705.099 ops/s
Iteration  25: 784366.079 ops/s
Iteration  26: 779251.689 ops/s
Iteration  27: 780191.796 ops/s
Iteration  28: 781963.567 ops/s
Iteration  29: 779224.529 ops/s
Iteration  30: 778293.623 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  778612.528 ±(99.9%) 3423.361 ops/s [Average]
  (min, avg, max) = (764720.865, 778612.528, 786192.703), stdev = 5123.926
  CI (99.9%): [775189.167, 782035.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  778612.528 ± 3423.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7674042.639 ops/s
# Warmup Iteration   2: 17211345.320 ops/s
# Warmup Iteration   3: 16161976.069 ops/s
# Warmup Iteration   4: 15343391.613 ops/s
# Warmup Iteration   5: 17258764.963 ops/s
# Warmup Iteration   6: 17269108.454 ops/s
# Warmup Iteration   7: 17152130.160 ops/s
# Warmup Iteration   8: 17196576.519 ops/s
# Warmup Iteration   9: 17269543.404 ops/s
# Warmup Iteration  10: 17253684.121 ops/s
# Warmup Iteration  11: 17257032.386 ops/s
# Warmup Iteration  12: 17259356.341 ops/s
# Warmup Iteration  13: 17250717.952 ops/s
# Warmup Iteration  14: 17248018.714 ops/s
# Warmup Iteration  15: 17287575.154 ops/s
# Warmup Iteration  16: 17260731.248 ops/s
# Warmup Iteration  17: 17283872.201 ops/s
# Warmup Iteration  18: 17143626.791 ops/s
# Warmup Iteration  19: 17227593.822 ops/s
# Warmup Iteration  20: 17293618.611 ops/s
# Warmup Iteration  21: 17300609.742 ops/s
# Warmup Iteration  22: 17170755.143 ops/s
# Warmup Iteration  23: 17307141.770 ops/s
# Warmup Iteration  24: 17299060.706 ops/s
# Warmup Iteration  25: 17258660.075 ops/s
# Warmup Iteration  26: 17226243.060 ops/s
# Warmup Iteration  27: 17270035.013 ops/s
# Warmup Iteration  28: 17168113.610 ops/s
# Warmup Iteration  29: 17271724.850 ops/s
# Warmup Iteration  30: 17218477.335 ops/s
Iteration   1: 17290102.253 ops/s
Iteration   2: 17211289.771 ops/s
Iteration   3: 17339251.464 ops/s
Iteration   4: 17284538.232 ops/s
Iteration   5: 17341128.526 ops/s
Iteration   6: 17291998.310 ops/s
Iteration   7: 17330939.009 ops/s
Iteration   8: 17222248.665 ops/s
Iteration   9: 17247878.526 ops/s
Iteration  10: 17317599.118 ops/s
Iteration  11: 17280027.458 ops/s
Iteration  12: 17298229.146 ops/s
Iteration  13: 17235254.737 ops/s
Iteration  14: 17258422.391 ops/s
Iteration  15: 17272887.691 ops/s
Iteration  16: 17277700.838 ops/s
Iteration  17: 17279326.034 ops/s
Iteration  18: 17284156.145 ops/s
Iteration  19: 17285837.434 ops/s
Iteration  20: 17215555.788 ops/s
Iteration  21: 17303491.103 ops/s
Iteration  22: 17269115.997 ops/s
Iteration  23: 17307783.921 ops/s
Iteration  24: 17022880.019 ops/s
Iteration  25: 17055078.448 ops/s
Iteration  26: 17293893.538 ops/s
Iteration  27: 17145765.976 ops/s
Iteration  28: 17221231.371 ops/s
Iteration  29: 17262157.778 ops/s
Iteration  30: 17294781.393 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_indexOf":
  17258018.369 ±(99.9%) 48610.965 ops/s [Average]
  (min, avg, max) = (17022880.019, 17258018.369, 17341128.526), stdev = 72758.610
  CI (99.9%): [17209407.404, 17306629.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_indexOf  thrpt   30  17258018.369 ± 48610.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4197611.073 ops/s
# Warmup Iteration   2: 6323198.503 ops/s
# Warmup Iteration   3: 7230347.441 ops/s
# Warmup Iteration   4: 7281315.263 ops/s
# Warmup Iteration   5: 7316047.709 ops/s
# Warmup Iteration   6: 7286758.667 ops/s
# Warmup Iteration   7: 6108341.708 ops/s
# Warmup Iteration   8: 7312024.404 ops/s
# Warmup Iteration   9: 7259543.049 ops/s
# Warmup Iteration  10: 7296507.284 ops/s
# Warmup Iteration  11: 7246223.979 ops/s
# Warmup Iteration  12: 7326394.104 ops/s
# Warmup Iteration  13: 7261827.930 ops/s
# Warmup Iteration  14: 7220511.654 ops/s
# Warmup Iteration  15: 7311711.630 ops/s
# Warmup Iteration  16: 7279688.699 ops/s
# Warmup Iteration  17: 7272943.688 ops/s
# Warmup Iteration  18: 7298552.280 ops/s
# Warmup Iteration  19: 7302183.439 ops/s
# Warmup Iteration  20: 7311308.285 ops/s
# Warmup Iteration  21: 7184994.492 ops/s
# Warmup Iteration  22: 7299750.894 ops/s
# Warmup Iteration  23: 7294566.762 ops/s
# Warmup Iteration  24: 7304551.289 ops/s
# Warmup Iteration  25: 7324833.849 ops/s
# Warmup Iteration  26: 7251825.425 ops/s
# Warmup Iteration  27: 7250856.758 ops/s
# Warmup Iteration  28: 7217105.085 ops/s
# Warmup Iteration  29: 7251938.901 ops/s
# Warmup Iteration  30: 7303187.161 ops/s
Iteration   1: 7323689.509 ops/s
Iteration   2: 7321912.485 ops/s
Iteration   3: 7295773.352 ops/s
Iteration   4: 7324832.860 ops/s
Iteration   5: 7315634.238 ops/s
Iteration   6: 7312596.702 ops/s
Iteration   7: 7298830.549 ops/s
Iteration   8: 7309383.637 ops/s
Iteration   9: 7304408.764 ops/s
Iteration  10: 7306961.306 ops/s
Iteration  11: 7299512.320 ops/s
Iteration  12: 7286695.788 ops/s
Iteration  13: 7306535.905 ops/s
Iteration  14: 7324954.529 ops/s
Iteration  15: 7205774.773 ops/s
Iteration  16: 7240221.736 ops/s
Iteration  17: 7286874.578 ops/s
Iteration  18: 7283313.229 ops/s
Iteration  19: 7280291.505 ops/s
Iteration  20: 7259333.922 ops/s
Iteration  21: 7313650.948 ops/s
Iteration  22: 7275582.615 ops/s
Iteration  23: 7305021.097 ops/s
Iteration  24: 7307569.431 ops/s
Iteration  25: 7319999.697 ops/s
Iteration  26: 7299040.264 ops/s
Iteration  27: 7198426.704 ops/s
Iteration  28: 7309611.688 ops/s
Iteration  29: 7319771.078 ops/s
Iteration  30: 7304680.542 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectInto":
  7294696.192 ±(99.9%) 21225.018 ops/s [Average]
  (min, avg, max) = (7198426.704, 7294696.192, 7324954.529), stdev = 31768.610
  CI (99.9%): [7273471.173, 7315921.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectInto  thrpt   30  7294696.192 ± 21225.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3773536.563 ops/s
# Warmup Iteration   2: 4980106.815 ops/s
# Warmup Iteration   3: 5975845.270 ops/s
# Warmup Iteration   4: 5966152.459 ops/s
# Warmup Iteration   5: 5985562.174 ops/s
# Warmup Iteration   6: 5986319.706 ops/s
# Warmup Iteration   7: 5998177.602 ops/s
# Warmup Iteration   8: 5019483.577 ops/s
# Warmup Iteration   9: 5991895.411 ops/s
# Warmup Iteration  10: 5996669.145 ops/s
# Warmup Iteration  11: 5989586.344 ops/s
# Warmup Iteration  12: 5936922.448 ops/s
# Warmup Iteration  13: 5954439.007 ops/s
# Warmup Iteration  14: 5998605.917 ops/s
# Warmup Iteration  15: 5922813.238 ops/s
# Warmup Iteration  16: 5934196.603 ops/s
# Warmup Iteration  17: 5993562.239 ops/s
# Warmup Iteration  18: 5949578.999 ops/s
# Warmup Iteration  19: 5990661.758 ops/s
# Warmup Iteration  20: 5971081.725 ops/s
# Warmup Iteration  21: 5976506.463 ops/s
# Warmup Iteration  22: 5998870.901 ops/s
# Warmup Iteration  23: 5935126.277 ops/s
# Warmup Iteration  24: 5939196.724 ops/s
# Warmup Iteration  25: 6001227.481 ops/s
# Warmup Iteration  26: 5998852.042 ops/s
# Warmup Iteration  27: 5962179.679 ops/s
# Warmup Iteration  28: 5998528.964 ops/s
# Warmup Iteration  29: 5987106.185 ops/s
# Warmup Iteration  30: 5997655.648 ops/s
Iteration   1: 5981925.085 ops/s
Iteration   2: 5975092.284 ops/s
Iteration   3: 5985448.060 ops/s
Iteration   4: 5996863.985 ops/s
Iteration   5: 5991730.748 ops/s
Iteration   6: 5971242.530 ops/s
Iteration   7: 5979956.821 ops/s
Iteration   8: 5841532.471 ops/s
Iteration   9: 5974329.646 ops/s
Iteration  10: 5996163.863 ops/s
Iteration  11: 5972296.393 ops/s
Iteration  12: 6003066.136 ops/s
Iteration  13: 5975595.606 ops/s
Iteration  14: 6010160.004 ops/s
Iteration  15: 6002040.191 ops/s
Iteration  16: 5974414.229 ops/s
Iteration  17: 5907730.617 ops/s
Iteration  18: 5994073.232 ops/s
Iteration  19: 6016118.970 ops/s
Iteration  20: 5878740.872 ops/s
Iteration  21: 5949967.653 ops/s
Iteration  22: 5914897.520 ops/s
Iteration  23: 6007398.010 ops/s
Iteration  24: 5942409.120 ops/s
Iteration  25: 5997568.799 ops/s
Iteration  26: 5982820.397 ops/s
Iteration  27: 5996762.843 ops/s
Iteration  28: 5990312.301 ops/s
Iteration  29: 5991246.925 ops/s
Iteration  30: 5991884.562 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoDouble":
  5973126.329 ±(99.9%) 26579.389 ops/s [Average]
  (min, avg, max) = (5841532.471, 5973126.329, 6016118.970), stdev = 39782.781
  CI (99.9%): [5946546.940, 5999705.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  5973126.329 ± 26579.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3771973.805 ops/s
# Warmup Iteration   2: 4922893.624 ops/s
# Warmup Iteration   3: 5908372.227 ops/s
# Warmup Iteration   4: 5886974.861 ops/s
# Warmup Iteration   5: 5897597.061 ops/s
# Warmup Iteration   6: 5909404.806 ops/s
# Warmup Iteration   7: 5914324.052 ops/s
# Warmup Iteration   8: 4968932.894 ops/s
# Warmup Iteration   9: 5927493.205 ops/s
# Warmup Iteration  10: 5869290.605 ops/s
# Warmup Iteration  11: 5920916.943 ops/s
# Warmup Iteration  12: 5925446.498 ops/s
# Warmup Iteration  13: 5921830.899 ops/s
# Warmup Iteration  14: 5887373.965 ops/s
# Warmup Iteration  15: 5878723.806 ops/s
# Warmup Iteration  16: 5902803.779 ops/s
# Warmup Iteration  17: 5922983.183 ops/s
# Warmup Iteration  18: 5916742.419 ops/s
# Warmup Iteration  19: 5921490.536 ops/s
# Warmup Iteration  20: 5918190.850 ops/s
# Warmup Iteration  21: 5861224.288 ops/s
# Warmup Iteration  22: 5907902.245 ops/s
# Warmup Iteration  23: 5920583.374 ops/s
# Warmup Iteration  24: 5878816.806 ops/s
# Warmup Iteration  25: 5905998.093 ops/s
# Warmup Iteration  26: 5907711.541 ops/s
# Warmup Iteration  27: 5912961.391 ops/s
# Warmup Iteration  28: 5920378.739 ops/s
# Warmup Iteration  29: 5908070.051 ops/s
# Warmup Iteration  30: 5904421.407 ops/s
Iteration   1: 5835639.383 ops/s
Iteration   2: 5923432.507 ops/s
Iteration   3: 5905805.246 ops/s
Iteration   4: 5880197.906 ops/s
Iteration   5: 5933419.586 ops/s
Iteration   6: 5907222.920 ops/s
Iteration   7: 5925410.409 ops/s
Iteration   8: 5926314.135 ops/s
Iteration   9: 5908119.403 ops/s
Iteration  10: 5922667.414 ops/s
Iteration  11: 5914501.332 ops/s
Iteration  12: 5919071.450 ops/s
Iteration  13: 5825477.726 ops/s
Iteration  14: 5907514.744 ops/s
Iteration  15: 5917331.908 ops/s
Iteration  16: 5927059.008 ops/s
Iteration  17: 5914047.202 ops/s
Iteration  18: 5917674.785 ops/s
Iteration  19: 5890227.209 ops/s
Iteration  20: 5918131.113 ops/s
Iteration  21: 5942925.974 ops/s
Iteration  22: 5907522.258 ops/s
Iteration  23: 5928544.523 ops/s
Iteration  24: 5886067.691 ops/s
Iteration  25: 5931124.462 ops/s
Iteration  26: 5904801.486 ops/s
Iteration  27: 5915642.216 ops/s
Iteration  28: 5912865.130 ops/s
Iteration  29: 5899814.322 ops/s
Iteration  30: 5915196.376 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoFloat":
  5908792.328 ±(99.9%) 16909.628 ops/s [Average]
  (min, avg, max) = (5825477.726, 5908792.328, 5942925.974), stdev = 25309.537
  CI (99.9%): [5891882.699, 5925701.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  5908792.328 ± 16909.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3845841.795 ops/s
# Warmup Iteration   2: 5070266.076 ops/s
# Warmup Iteration   3: 6090826.462 ops/s
# Warmup Iteration   4: 6046349.703 ops/s
# Warmup Iteration   5: 6124990.516 ops/s
# Warmup Iteration   6: 5969712.534 ops/s
# Warmup Iteration   7: 6126875.926 ops/s
# Warmup Iteration   8: 5145655.256 ops/s
# Warmup Iteration   9: 6116542.223 ops/s
# Warmup Iteration  10: 6084606.540 ops/s
# Warmup Iteration  11: 6131464.172 ops/s
# Warmup Iteration  12: 6087926.571 ops/s
# Warmup Iteration  13: 6108356.783 ops/s
# Warmup Iteration  14: 6071034.475 ops/s
# Warmup Iteration  15: 6089253.678 ops/s
# Warmup Iteration  16: 6134809.972 ops/s
# Warmup Iteration  17: 6087033.746 ops/s
# Warmup Iteration  18: 6139762.572 ops/s
# Warmup Iteration  19: 6114388.178 ops/s
# Warmup Iteration  20: 6130255.446 ops/s
# Warmup Iteration  21: 6121235.234 ops/s
# Warmup Iteration  22: 6131188.050 ops/s
# Warmup Iteration  23: 6134425.541 ops/s
# Warmup Iteration  24: 6135454.704 ops/s
# Warmup Iteration  25: 6115177.988 ops/s
# Warmup Iteration  26: 6124482.469 ops/s
# Warmup Iteration  27: 6111949.089 ops/s
# Warmup Iteration  28: 6126465.569 ops/s
# Warmup Iteration  29: 6140867.015 ops/s
# Warmup Iteration  30: 6122112.485 ops/s
Iteration   1: 6104961.015 ops/s
Iteration   2: 6139485.477 ops/s
Iteration   3: 6137768.804 ops/s
Iteration   4: 6026730.189 ops/s
Iteration   5: 6134194.488 ops/s
Iteration   6: 6143256.001 ops/s
Iteration   7: 6116180.903 ops/s
Iteration   8: 6119874.300 ops/s
Iteration   9: 6131208.382 ops/s
Iteration  10: 6132922.904 ops/s
Iteration  11: 6039398.902 ops/s
Iteration  12: 6120325.878 ops/s
Iteration  13: 6127599.812 ops/s
Iteration  14: 6108700.069 ops/s
Iteration  15: 6109734.516 ops/s
Iteration  16: 6050593.446 ops/s
Iteration  17: 6132402.918 ops/s
Iteration  18: 6111767.524 ops/s
Iteration  19: 6033936.992 ops/s
Iteration  20: 6134139.609 ops/s
Iteration  21: 6030256.914 ops/s
Iteration  22: 6038171.358 ops/s
Iteration  23: 6128731.797 ops/s
Iteration  24: 6119105.014 ops/s
Iteration  25: 6041546.484 ops/s
Iteration  26: 6122781.220 ops/s
Iteration  27: 6106483.690 ops/s
Iteration  28: 6139698.087 ops/s
Iteration  29: 6008447.177 ops/s
Iteration  30: 6138351.824 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoInt":
  6100958.523 ±(99.9%) 28714.435 ops/s [Average]
  (min, avg, max) = (6008447.177, 6100958.523, 6143256.001), stdev = 42978.418
  CI (99.9%): [6072244.088, 6129672.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectIntoInt  thrpt   30  6100958.523 ± 28714.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3838185.347 ops/s
# Warmup Iteration   2: 5145360.254 ops/s
# Warmup Iteration   3: 6113041.834 ops/s
# Warmup Iteration   4: 6176033.372 ops/s
# Warmup Iteration   5: 6150151.989 ops/s
# Warmup Iteration   6: 6215494.482 ops/s
# Warmup Iteration   7: 6213848.471 ops/s
# Warmup Iteration   8: 5194797.308 ops/s
# Warmup Iteration   9: 6209447.336 ops/s
# Warmup Iteration  10: 6223439.760 ops/s
# Warmup Iteration  11: 6208635.595 ops/s
# Warmup Iteration  12: 6219380.713 ops/s
# Warmup Iteration  13: 6153307.107 ops/s
# Warmup Iteration  14: 6170286.342 ops/s
# Warmup Iteration  15: 6217743.235 ops/s
# Warmup Iteration  16: 6161549.106 ops/s
# Warmup Iteration  17: 6162932.762 ops/s
# Warmup Iteration  18: 6161755.972 ops/s
# Warmup Iteration  19: 6159461.134 ops/s
# Warmup Iteration  20: 6213607.989 ops/s
# Warmup Iteration  21: 6196416.943 ops/s
# Warmup Iteration  22: 6159198.028 ops/s
# Warmup Iteration  23: 6208879.712 ops/s
# Warmup Iteration  24: 6189434.590 ops/s
# Warmup Iteration  25: 6211794.084 ops/s
# Warmup Iteration  26: 6197681.386 ops/s
# Warmup Iteration  27: 6213031.205 ops/s
# Warmup Iteration  28: 6203422.224 ops/s
# Warmup Iteration  29: 6195265.188 ops/s
# Warmup Iteration  30: 6219575.939 ops/s
Iteration   1: 6209588.721 ops/s
Iteration   2: 6231297.813 ops/s
Iteration   3: 6203682.139 ops/s
Iteration   4: 6168015.294 ops/s
Iteration   5: 6103343.676 ops/s
Iteration   6: 6213116.392 ops/s
Iteration   7: 6220690.527 ops/s
Iteration   8: 6210909.614 ops/s
Iteration   9: 6235774.823 ops/s
Iteration  10: 6183668.564 ops/s
Iteration  11: 6208040.870 ops/s
Iteration  12: 6192851.250 ops/s
Iteration  13: 6209827.938 ops/s
Iteration  14: 6194420.747 ops/s
Iteration  15: 6224739.369 ops/s
Iteration  16: 6188783.180 ops/s
Iteration  17: 6135691.521 ops/s
Iteration  18: 6202799.029 ops/s
Iteration  19: 6215318.374 ops/s
Iteration  20: 6216915.813 ops/s
Iteration  21: 6206449.923 ops/s
Iteration  22: 6117450.152 ops/s
Iteration  23: 6205446.150 ops/s
Iteration  24: 6194910.329 ops/s
Iteration  25: 6222040.828 ops/s
Iteration  26: 6194411.493 ops/s
Iteration  27: 6217877.970 ops/s
Iteration  28: 6168165.886 ops/s
Iteration  29: 6220456.160 ops/s
Iteration  30: 6107185.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoLong":
  6194129.017 ±(99.9%) 23579.724 ops/s [Average]
  (min, avg, max) = (6103343.676, 6194129.017, 6235774.823), stdev = 35293.024
  CI (99.9%): [6170549.292, 6217708.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectIntoLong  thrpt   30  6194129.017 ± 23579.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4855709.280 ops/s
# Warmup Iteration   2: 8511293.445 ops/s
# Warmup Iteration   3: 9211479.193 ops/s
# Warmup Iteration   4: 9325969.815 ops/s
# Warmup Iteration   5: 8877171.386 ops/s
# Warmup Iteration   6: 8043552.318 ops/s
# Warmup Iteration   7: 9144282.722 ops/s
# Warmup Iteration   8: 9286393.937 ops/s
# Warmup Iteration   9: 9263575.074 ops/s
# Warmup Iteration  10: 9219133.601 ops/s
# Warmup Iteration  11: 9193872.123 ops/s
# Warmup Iteration  12: 9165879.554 ops/s
# Warmup Iteration  13: 9141645.737 ops/s
# Warmup Iteration  14: 9229266.658 ops/s
# Warmup Iteration  15: 9241452.172 ops/s
# Warmup Iteration  16: 9220720.145 ops/s
# Warmup Iteration  17: 9120383.068 ops/s
# Warmup Iteration  18: 9313226.081 ops/s
# Warmup Iteration  19: 9380758.078 ops/s
# Warmup Iteration  20: 9365959.487 ops/s
# Warmup Iteration  21: 9284532.066 ops/s
# Warmup Iteration  22: 9369740.104 ops/s
# Warmup Iteration  23: 9297998.976 ops/s
# Warmup Iteration  24: 9368057.952 ops/s
# Warmup Iteration  25: 9356999.524 ops/s
# Warmup Iteration  26: 9357156.499 ops/s
# Warmup Iteration  27: 9359503.869 ops/s
# Warmup Iteration  28: 9346416.733 ops/s
# Warmup Iteration  29: 9347243.921 ops/s
# Warmup Iteration  30: 9364890.130 ops/s
Iteration   1: 9343294.342 ops/s
Iteration   2: 9387119.750 ops/s
Iteration   3: 9334794.411 ops/s
Iteration   4: 9394014.618 ops/s
Iteration   5: 9324551.784 ops/s
Iteration   6: 9354560.528 ops/s
Iteration   7: 9344713.669 ops/s
Iteration   8: 9305357.173 ops/s
Iteration   9: 9386644.766 ops/s
Iteration  10: 9345373.853 ops/s
Iteration  11: 9373732.245 ops/s
Iteration  12: 9386595.506 ops/s
Iteration  13: 9344660.554 ops/s
Iteration  14: 9371015.652 ops/s
Iteration  15: 9399677.744 ops/s
Iteration  16: 9353818.339 ops/s
Iteration  17: 9396424.429 ops/s
Iteration  18: 9207109.270 ops/s
Iteration  19: 9374347.795 ops/s
Iteration  20: 9396419.193 ops/s
Iteration  21: 9378394.183 ops/s
Iteration  22: 9410048.034 ops/s
Iteration  23: 9334840.396 ops/s
Iteration  24: 9310360.889 ops/s
Iteration  25: 9394322.507 ops/s
Iteration  26: 9330857.551 ops/s
Iteration  27: 9384827.845 ops/s
Iteration  28: 9354116.840 ops/s
Iteration  29: 9384373.584 ops/s
Iteration  30: 9401970.673 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_injectIntoWith":
  9360277.937 ±(99.9%) 27268.407 ops/s [Average]
  (min, avg, max) = (9207109.270, 9360277.937, 9410048.034), stdev = 40814.071
  CI (99.9%): [9333009.530, 9387546.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_injectIntoWith  thrpt   30  9360277.937 ± 27268.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2479015.372 ops/s
# Warmup Iteration   2: 5459159.880 ops/s
# Warmup Iteration   3: 4582249.739 ops/s
# Warmup Iteration   4: 5501709.468 ops/s
# Warmup Iteration   5: 5506007.180 ops/s
# Warmup Iteration   6: 5450780.736 ops/s
# Warmup Iteration   7: 5406043.391 ops/s
# Warmup Iteration   8: 5489017.281 ops/s
# Warmup Iteration   9: 5488065.528 ops/s
# Warmup Iteration  10: 5488100.993 ops/s
# Warmup Iteration  11: 5451936.873 ops/s
# Warmup Iteration  12: 5433539.505 ops/s
# Warmup Iteration  13: 5495384.777 ops/s
# Warmup Iteration  14: 5507767.627 ops/s
# Warmup Iteration  15: 5454700.476 ops/s
# Warmup Iteration  16: 5506339.164 ops/s
# Warmup Iteration  17: 5478526.518 ops/s
# Warmup Iteration  18: 5488973.825 ops/s
# Warmup Iteration  19: 5494677.363 ops/s
# Warmup Iteration  20: 5492495.551 ops/s
# Warmup Iteration  21: 5486317.074 ops/s
# Warmup Iteration  22: 5504517.612 ops/s
# Warmup Iteration  23: 5463797.170 ops/s
# Warmup Iteration  24: 5475496.222 ops/s
# Warmup Iteration  25: 5497884.791 ops/s
# Warmup Iteration  26: 5499202.259 ops/s
# Warmup Iteration  27: 5499558.948 ops/s
# Warmup Iteration  28: 5489077.837 ops/s
# Warmup Iteration  29: 5474939.824 ops/s
# Warmup Iteration  30: 5515816.383 ops/s
Iteration   1: 5478866.250 ops/s
Iteration   2: 5514052.040 ops/s
Iteration   3: 5501036.236 ops/s
Iteration   4: 5467190.377 ops/s
Iteration   5: 5502417.043 ops/s
Iteration   6: 5504726.335 ops/s
Iteration   7: 5410579.513 ops/s
Iteration   8: 5493134.485 ops/s
Iteration   9: 5476601.705 ops/s
Iteration  10: 5469279.199 ops/s
Iteration  11: 5520246.514 ops/s
Iteration  12: 5508450.974 ops/s
Iteration  13: 5420845.750 ops/s
Iteration  14: 5422476.987 ops/s
Iteration  15: 5497832.107 ops/s
Iteration  16: 5498997.564 ops/s
Iteration  17: 5513486.099 ops/s
Iteration  18: 5511671.564 ops/s
Iteration  19: 5510495.092 ops/s
Iteration  20: 5499208.763 ops/s
Iteration  21: 5485418.107 ops/s
Iteration  22: 5487866.469 ops/s
Iteration  23: 5515625.663 ops/s
Iteration  24: 5502169.064 ops/s
Iteration  25: 5467238.014 ops/s
Iteration  26: 5486665.690 ops/s
Iteration  27: 5455289.604 ops/s
Iteration  28: 5508661.747 ops/s
Iteration  29: 5504515.150 ops/s
Iteration  30: 5501505.215 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_isEmpty":
  5487884.977 ±(99.9%) 19231.631 ops/s [Average]
  (min, avg, max) = (5410579.513, 5487884.977, 5520246.514), stdev = 28785.002
  CI (99.9%): [5468653.346, 5507116.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_isEmpty  thrpt   30  5487884.977 ± 19231.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5050753.798 ops/s
# Warmup Iteration   2: 10871086.670 ops/s
# Warmup Iteration   3: 11085411.696 ops/s
# Warmup Iteration   4: 9753292.688 ops/s
# Warmup Iteration   5: 10405722.491 ops/s
# Warmup Iteration   6: 11071120.499 ops/s
# Warmup Iteration   7: 11018214.513 ops/s
# Warmup Iteration   8: 11028822.873 ops/s
# Warmup Iteration   9: 11030659.076 ops/s
# Warmup Iteration  10: 10952254.550 ops/s
# Warmup Iteration  11: 10974638.205 ops/s
# Warmup Iteration  12: 11032829.585 ops/s
# Warmup Iteration  13: 10928092.864 ops/s
# Warmup Iteration  14: 11017549.013 ops/s
# Warmup Iteration  15: 11017706.762 ops/s
# Warmup Iteration  16: 10875364.374 ops/s
# Warmup Iteration  17: 11056930.954 ops/s
# Warmup Iteration  18: 11038307.461 ops/s
# Warmup Iteration  19: 11080678.930 ops/s
# Warmup Iteration  20: 10922449.980 ops/s
# Warmup Iteration  21: 11051592.192 ops/s
# Warmup Iteration  22: 11110208.710 ops/s
# Warmup Iteration  23: 11073479.439 ops/s
# Warmup Iteration  24: 11048911.984 ops/s
# Warmup Iteration  25: 11125309.273 ops/s
# Warmup Iteration  26: 11023828.338 ops/s
# Warmup Iteration  27: 10962578.442 ops/s
# Warmup Iteration  28: 11039320.027 ops/s
# Warmup Iteration  29: 11030710.004 ops/s
# Warmup Iteration  30: 11009596.346 ops/s
Iteration   1: 11090833.285 ops/s
Iteration   2: 11067555.413 ops/s
Iteration   3: 11042550.192 ops/s
Iteration   4: 11104928.140 ops/s
Iteration   5: 11022803.768 ops/s
Iteration   6: 11045811.800 ops/s
Iteration   7: 11036490.168 ops/s
Iteration   8: 11011638.485 ops/s
Iteration   9: 11105882.812 ops/s
Iteration  10: 11055791.066 ops/s
Iteration  11: 10981764.867 ops/s
Iteration  12: 11039591.455 ops/s
Iteration  13: 11079056.782 ops/s
Iteration  14: 11110954.364 ops/s
Iteration  15: 11051483.154 ops/s
Iteration  16: 10880044.555 ops/s
Iteration  17: 10995196.067 ops/s
Iteration  18: 11076547.333 ops/s
Iteration  19: 10997392.017 ops/s
Iteration  20: 11099616.780 ops/s
Iteration  21: 10967551.466 ops/s
Iteration  22: 11033900.751 ops/s
Iteration  23: 11042081.947 ops/s
Iteration  24: 11063569.884 ops/s
Iteration  25: 10871063.800 ops/s
Iteration  26: 10924332.384 ops/s
Iteration  27: 10988596.378 ops/s
Iteration  28: 10994415.216 ops/s
Iteration  29: 11065753.446 ops/s
Iteration  30: 11033094.057 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator":
  11029343.061 ±(99.9%) 40672.235 ops/s [Average]
  (min, avg, max) = (10871063.800, 11029343.061, 11110954.364), stdev = 60876.291
  CI (99.9%): [10988670.826, 11070015.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_iterator  thrpt   30  11029343.061 ± 40672.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711922.234 ops/s
# Warmup Iteration   2: 749136.312 ops/s
# Warmup Iteration   3: 1014705.452 ops/s
# Warmup Iteration   4: 1005306.807 ops/s
# Warmup Iteration   5: 1005476.978 ops/s
# Warmup Iteration   6: 1012333.834 ops/s
# Warmup Iteration   7: 1015183.168 ops/s
# Warmup Iteration   8: 1011912.347 ops/s
# Warmup Iteration   9: 1013679.458 ops/s
# Warmup Iteration  10: 1009917.205 ops/s
# Warmup Iteration  11: 915107.650 ops/s
# Warmup Iteration  12: 930963.215 ops/s
# Warmup Iteration  13: 1001507.383 ops/s
# Warmup Iteration  14: 1011101.860 ops/s
# Warmup Iteration  15: 1015108.799 ops/s
# Warmup Iteration  16: 1007327.869 ops/s
# Warmup Iteration  17: 1073592.762 ops/s
# Warmup Iteration  18: 1074561.139 ops/s
# Warmup Iteration  19: 1073129.431 ops/s
# Warmup Iteration  20: 1071799.304 ops/s
# Warmup Iteration  21: 1074126.064 ops/s
# Warmup Iteration  22: 1076662.263 ops/s
# Warmup Iteration  23: 1064739.455 ops/s
# Warmup Iteration  24: 1067713.192 ops/s
# Warmup Iteration  25: 1068446.088 ops/s
# Warmup Iteration  26: 1060499.998 ops/s
# Warmup Iteration  27: 1075285.985 ops/s
# Warmup Iteration  28: 1075846.839 ops/s
# Warmup Iteration  29: 1073558.272 ops/s
# Warmup Iteration  30: 1073761.571 ops/s
Iteration   1: 1079877.028 ops/s
Iteration   2: 1075305.840 ops/s
Iteration   3: 1076137.294 ops/s
Iteration   4: 1073142.942 ops/s
Iteration   5: 1075415.277 ops/s
Iteration   6: 1076259.909 ops/s
Iteration   7: 1079642.552 ops/s
Iteration   8: 1076402.872 ops/s
Iteration   9: 1075483.463 ops/s
Iteration  10: 1073616.010 ops/s
Iteration  11: 1073643.471 ops/s
Iteration  12: 1074895.124 ops/s
Iteration  13: 1075569.866 ops/s
Iteration  14: 1073794.133 ops/s
Iteration  15: 1071412.154 ops/s
Iteration  16: 1075626.259 ops/s
Iteration  17: 1077310.894 ops/s
Iteration  18: 1072711.266 ops/s
Iteration  19: 1067830.704 ops/s
Iteration  20: 1072620.141 ops/s
Iteration  21: 1078071.840 ops/s
Iteration  22: 1075531.213 ops/s
Iteration  23: 1076589.273 ops/s
Iteration  24: 1069001.927 ops/s
Iteration  25: 1058037.696 ops/s
Iteration  26: 1075904.951 ops/s
Iteration  27: 1073168.348 ops/s
Iteration  28: 1076917.632 ops/s
Iteration  29: 1073722.930 ops/s
Iteration  30: 1078869.877 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_iterator_throws":
  1074417.096 ±(99.9%) 2748.527 ops/s [Average]
  (min, avg, max) = (1058037.696, 1074417.096, 1079877.028), stdev = 4113.866
  CI (99.9%): [1071668.570, 1077165.623] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_iterator_throws  thrpt   30  1074417.096 ± 2748.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.361 ops/s
# Warmup Iteration   2: 6.537 ops/s
# Warmup Iteration   3: 7.837 ops/s
# Warmup Iteration   4: 7.949 ops/s
# Warmup Iteration   5: 8.107 ops/s
# Warmup Iteration   6: 8.167 ops/s
# Warmup Iteration   7: 8.169 ops/s
# Warmup Iteration   8: 8.061 ops/s
# Warmup Iteration   9: 8.128 ops/s
# Warmup Iteration  10: 8.144 ops/s
# Warmup Iteration  11: 8.143 ops/s
# Warmup Iteration  12: 8.167 ops/s
# Warmup Iteration  13: 7.167 ops/s
# Warmup Iteration  14: 8.189 ops/s
# Warmup Iteration  15: 8.054 ops/s
# Warmup Iteration  16: 8.160 ops/s
# Warmup Iteration  17: 8.165 ops/s
# Warmup Iteration  18: 7.999 ops/s
# Warmup Iteration  19: 8.196 ops/s
# Warmup Iteration  20: 8.108 ops/s
# Warmup Iteration  21: 8.213 ops/s
# Warmup Iteration  22: 8.136 ops/s
# Warmup Iteration  23: 8.130 ops/s
# Warmup Iteration  24: 8.108 ops/s
# Warmup Iteration  25: 8.206 ops/s
# Warmup Iteration  26: 8.186 ops/s
# Warmup Iteration  27: 8.140 ops/s
# Warmup Iteration  28: 8.125 ops/s
# Warmup Iteration  29: 8.211 ops/s
# Warmup Iteration  30: 8.107 ops/s
Iteration   1: 8.180 ops/s
Iteration   2: 8.190 ops/s
Iteration   3: 8.194 ops/s
Iteration   4: 8.228 ops/s
Iteration   5: 8.138 ops/s
Iteration   6: 8.208 ops/s
Iteration   7: 8.221 ops/s
Iteration   8: 8.214 ops/s
Iteration   9: 8.203 ops/s
Iteration  10: 8.204 ops/s
Iteration  11: 8.179 ops/s
Iteration  12: 8.208 ops/s
Iteration  13: 8.170 ops/s
Iteration  14: 8.133 ops/s
Iteration  15: 8.070 ops/s
Iteration  16: 8.143 ops/s
Iteration  17: 8.194 ops/s
Iteration  18: 8.067 ops/s
Iteration  19: 8.236 ops/s
Iteration  20: 8.203 ops/s
Iteration  21: 8.176 ops/s
Iteration  22: 8.214 ops/s
Iteration  23: 8.171 ops/s
Iteration  24: 8.190 ops/s
Iteration  25: 7.998 ops/s
Iteration  26: 7.916 ops/s
Iteration  27: 8.163 ops/s
Iteration  28: 8.237 ops/s
Iteration  29: 8.203 ops/s
Iteration  30: 8.172 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  8.168 ±(99.9%) 0.047 ops/s [Average]
  (min, avg, max) = (7.916, 8.168, 8.237), stdev = 0.071
  CI (99.9%): [8.120, 8.215] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt  Score   Error  Units
ListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  8.168 ± 0.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4938830.343 ops/s
# Warmup Iteration   2: 17059353.208 ops/s
# Warmup Iteration   3: 17353518.056 ops/s
# Warmup Iteration   4: 14622450.454 ops/s
# Warmup Iteration   5: 17217726.106 ops/s
# Warmup Iteration   6: 17314154.066 ops/s
# Warmup Iteration   7: 17369984.342 ops/s
# Warmup Iteration   8: 17376111.276 ops/s
# Warmup Iteration   9: 17359051.040 ops/s
# Warmup Iteration  10: 17327455.587 ops/s
# Warmup Iteration  11: 17377416.378 ops/s
# Warmup Iteration  12: 17367684.135 ops/s
# Warmup Iteration  13: 17356133.953 ops/s
# Warmup Iteration  14: 17261971.633 ops/s
# Warmup Iteration  15: 17164687.624 ops/s
# Warmup Iteration  16: 17354217.193 ops/s
# Warmup Iteration  17: 17325060.774 ops/s
# Warmup Iteration  18: 17348391.458 ops/s
# Warmup Iteration  19: 17259703.627 ops/s
# Warmup Iteration  20: 17368512.303 ops/s
# Warmup Iteration  21: 17402121.363 ops/s
# Warmup Iteration  22: 17356153.788 ops/s
# Warmup Iteration  23: 17298132.970 ops/s
# Warmup Iteration  24: 17238627.907 ops/s
# Warmup Iteration  25: 17080192.278 ops/s
# Warmup Iteration  26: 17371241.763 ops/s
# Warmup Iteration  27: 17302973.611 ops/s
# Warmup Iteration  28: 17348050.248 ops/s
# Warmup Iteration  29: 17202778.807 ops/s
# Warmup Iteration  30: 17305487.463 ops/s
Iteration   1: 17286523.661 ops/s
Iteration   2: 17403128.415 ops/s
Iteration   3: 17372639.630 ops/s
Iteration   4: 17231806.240 ops/s
Iteration   5: 17381333.914 ops/s
Iteration   6: 17447657.251 ops/s
Iteration   7: 17342508.331 ops/s
Iteration   8: 17392396.559 ops/s
Iteration   9: 17338138.376 ops/s
Iteration  10: 17378313.841 ops/s
Iteration  11: 17260926.777 ops/s
Iteration  12: 17364508.648 ops/s
Iteration  13: 17351670.514 ops/s
Iteration  14: 17375316.748 ops/s
Iteration  15: 17334108.106 ops/s
Iteration  16: 17162188.026 ops/s
Iteration  17: 17431652.317 ops/s
Iteration  18: 17384455.312 ops/s
Iteration  19: 17317661.644 ops/s
Iteration  20: 17321097.785 ops/s
Iteration  21: 17349827.773 ops/s
Iteration  22: 17308288.407 ops/s
Iteration  23: 17362818.299 ops/s
Iteration  24: 17088771.173 ops/s
Iteration  25: 17379555.704 ops/s
Iteration  26: 17333251.566 ops/s
Iteration  27: 17390606.345 ops/s
Iteration  28: 17084102.116 ops/s
Iteration  29: 17237545.032 ops/s
Iteration  30: 17385932.207 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_lastIndexOf":
  17326624.357 ±(99.9%) 59485.776 ops/s [Average]
  (min, avg, max) = (17084102.116, 17326624.357, 17447657.251), stdev = 89035.516
  CI (99.9%): [17267138.581, 17386110.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_lastIndexOf  thrpt   30  17326624.357 ± 59485.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4561953.872 ops/s
# Warmup Iteration   2: 9654463.297 ops/s
# Warmup Iteration   3: 10126331.384 ops/s
# Warmup Iteration   4: 8811650.609 ops/s
# Warmup Iteration   5: 9732386.437 ops/s
# Warmup Iteration   6: 10185236.504 ops/s
# Warmup Iteration   7: 10106405.731 ops/s
# Warmup Iteration   8: 10119144.456 ops/s
# Warmup Iteration   9: 10165714.272 ops/s
# Warmup Iteration  10: 10212712.138 ops/s
# Warmup Iteration  11: 10167641.393 ops/s
# Warmup Iteration  12: 10206736.092 ops/s
# Warmup Iteration  13: 10202791.514 ops/s
# Warmup Iteration  14: 10163553.338 ops/s
# Warmup Iteration  15: 10216133.127 ops/s
# Warmup Iteration  16: 10195343.595 ops/s
# Warmup Iteration  17: 10163243.482 ops/s
# Warmup Iteration  18: 10164559.342 ops/s
# Warmup Iteration  19: 10148856.103 ops/s
# Warmup Iteration  20: 10167900.156 ops/s
# Warmup Iteration  21: 10192721.469 ops/s
# Warmup Iteration  22: 10188124.345 ops/s
# Warmup Iteration  23: 10086451.379 ops/s
# Warmup Iteration  24: 10173869.477 ops/s
# Warmup Iteration  25: 10170034.794 ops/s
# Warmup Iteration  26: 10189699.955 ops/s
# Warmup Iteration  27: 10170376.192 ops/s
# Warmup Iteration  28: 10183065.433 ops/s
# Warmup Iteration  29: 10168352.837 ops/s
# Warmup Iteration  30: 10168587.977 ops/s
Iteration   1: 10198430.740 ops/s
Iteration   2: 10178064.696 ops/s
Iteration   3: 10156376.548 ops/s
Iteration   4: 10202186.459 ops/s
Iteration   5: 10186983.691 ops/s
Iteration   6: 10125654.247 ops/s
Iteration   7: 10186064.844 ops/s
Iteration   8: 10155146.260 ops/s
Iteration   9: 10122223.636 ops/s
Iteration  10: 10172746.880 ops/s
Iteration  11: 10171193.368 ops/s
Iteration  12: 10150149.667 ops/s
Iteration  13: 10180964.987 ops/s
Iteration  14: 10173538.412 ops/s
Iteration  15: 10120442.584 ops/s
Iteration  16: 10120935.048 ops/s
Iteration  17: 10174421.906 ops/s
Iteration  18: 10037951.481 ops/s
Iteration  19: 10168096.653 ops/s
Iteration  20: 10212431.986 ops/s
Iteration  21: 10142260.447 ops/s
Iteration  22: 10188387.437 ops/s
Iteration  23: 10176477.128 ops/s
Iteration  24: 10163888.457 ops/s
Iteration  25: 10160076.456 ops/s
Iteration  26: 10186811.919 ops/s
Iteration  27: 10187853.682 ops/s
Iteration  28: 10036344.097 ops/s
Iteration  29: 10200190.058 ops/s
Iteration  30: 10139267.108 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIterator":
  10159185.363 ±(99.9%) 27705.412 ops/s [Average]
  (min, avg, max) = (10036344.097, 10159185.363, 10212431.986), stdev = 41468.159
  CI (99.9%): [10131479.951, 10186890.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_listIterator  thrpt   30  10159185.363 ± 27705.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673212.328 ops/s
# Warmup Iteration   2: 698185.824 ops/s
# Warmup Iteration   3: 927282.775 ops/s
# Warmup Iteration   4: 925501.007 ops/s
# Warmup Iteration   5: 915140.440 ops/s
# Warmup Iteration   6: 916010.418 ops/s
# Warmup Iteration   7: 922634.008 ops/s
# Warmup Iteration   8: 925600.903 ops/s
# Warmup Iteration   9: 925387.163 ops/s
# Warmup Iteration  10: 924879.496 ops/s
# Warmup Iteration  11: 923541.633 ops/s
# Warmup Iteration  12: 781038.976 ops/s
# Warmup Iteration  13: 924318.447 ops/s
# Warmup Iteration  14: 923730.005 ops/s
# Warmup Iteration  15: 922625.999 ops/s
# Warmup Iteration  16: 917839.759 ops/s
# Warmup Iteration  17: 976086.277 ops/s
# Warmup Iteration  18: 965849.430 ops/s
# Warmup Iteration  19: 973750.791 ops/s
# Warmup Iteration  20: 973910.067 ops/s
# Warmup Iteration  21: 975643.494 ops/s
# Warmup Iteration  22: 976239.822 ops/s
# Warmup Iteration  23: 968193.800 ops/s
# Warmup Iteration  24: 973453.638 ops/s
# Warmup Iteration  25: 966884.350 ops/s
# Warmup Iteration  26: 971872.435 ops/s
# Warmup Iteration  27: 974705.791 ops/s
# Warmup Iteration  28: 973798.595 ops/s
# Warmup Iteration  29: 973959.159 ops/s
# Warmup Iteration  30: 972611.262 ops/s
Iteration   1: 966804.282 ops/s
Iteration   2: 973425.377 ops/s
Iteration   3: 971617.036 ops/s
Iteration   4: 976876.912 ops/s
Iteration   5: 973344.821 ops/s
Iteration   6: 971054.027 ops/s
Iteration   7: 974146.835 ops/s
Iteration   8: 972929.525 ops/s
Iteration   9: 976207.923 ops/s
Iteration  10: 962951.573 ops/s
Iteration  11: 962225.659 ops/s
Iteration  12: 960533.301 ops/s
Iteration  13: 975694.544 ops/s
Iteration  14: 973038.644 ops/s
Iteration  15: 961117.984 ops/s
Iteration  16: 977422.641 ops/s
Iteration  17: 977694.024 ops/s
Iteration  18: 973766.006 ops/s
Iteration  19: 975851.185 ops/s
Iteration  20: 967897.157 ops/s
Iteration  21: 975167.349 ops/s
Iteration  22: 966343.053 ops/s
Iteration  23: 977720.049 ops/s
Iteration  24: 974592.688 ops/s
Iteration  25: 974501.579 ops/s
Iteration  26: 971834.389 ops/s
Iteration  27: 978399.898 ops/s
Iteration  28: 972620.277 ops/s
Iteration  29: 972058.295 ops/s
Iteration  30: 973909.433 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig":
  972058.216 ±(99.9%) 3398.003 ops/s [Average]
  (min, avg, max) = (960533.301, 972058.216, 978399.898), stdev = 5085.971
  CI (99.9%): [968660.213, 975456.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  972058.216 ± 3398.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685587.863 ops/s
# Warmup Iteration   2: 716612.457 ops/s
# Warmup Iteration   3: 942897.425 ops/s
# Warmup Iteration   4: 950901.555 ops/s
# Warmup Iteration   5: 942256.691 ops/s
# Warmup Iteration   6: 941371.806 ops/s
# Warmup Iteration   7: 943840.004 ops/s
# Warmup Iteration   8: 944965.164 ops/s
# Warmup Iteration   9: 945541.010 ops/s
# Warmup Iteration  10: 942508.243 ops/s
# Warmup Iteration  11: 945225.950 ops/s
# Warmup Iteration  12: 791224.654 ops/s
# Warmup Iteration  13: 949839.071 ops/s
# Warmup Iteration  14: 938293.946 ops/s
# Warmup Iteration  15: 943377.501 ops/s
# Warmup Iteration  16: 948523.743 ops/s
# Warmup Iteration  17: 1009248.152 ops/s
# Warmup Iteration  18: 1000408.712 ops/s
# Warmup Iteration  19: 1002106.287 ops/s
# Warmup Iteration  20: 1005805.569 ops/s
# Warmup Iteration  21: 1004528.410 ops/s
# Warmup Iteration  22: 1006880.894 ops/s
# Warmup Iteration  23: 1006733.307 ops/s
# Warmup Iteration  24: 1008714.932 ops/s
# Warmup Iteration  25: 1007547.275 ops/s
# Warmup Iteration  26: 994768.065 ops/s
# Warmup Iteration  27: 1007331.856 ops/s
# Warmup Iteration  28: 1004095.186 ops/s
# Warmup Iteration  29: 1007189.179 ops/s
# Warmup Iteration  30: 1007344.996 ops/s
Iteration   1: 1009439.026 ops/s
Iteration   2: 1008725.570 ops/s
Iteration   3: 993126.197 ops/s
Iteration   4: 1008088.105 ops/s
Iteration   5: 995791.475 ops/s
Iteration   6: 1003752.844 ops/s
Iteration   7: 1004821.346 ops/s
Iteration   8: 1008559.583 ops/s
Iteration   9: 1006859.810 ops/s
Iteration  10: 1007222.680 ops/s
Iteration  11: 1009793.626 ops/s
Iteration  12: 992565.932 ops/s
Iteration  13: 1006673.943 ops/s
Iteration  14: 1003654.675 ops/s
Iteration  15: 1009542.583 ops/s
Iteration  16: 1007555.157 ops/s
Iteration  17: 1011836.906 ops/s
Iteration  18: 1007410.000 ops/s
Iteration  19: 1004493.319 ops/s
Iteration  20: 1011230.432 ops/s
Iteration  21: 1011047.759 ops/s
Iteration  22: 1007827.820 ops/s
Iteration  23: 1005803.455 ops/s
Iteration  24: 1007738.174 ops/s
Iteration  25: 1010685.202 ops/s
Iteration  26: 1001862.909 ops/s
Iteration  27: 1009905.036 ops/s
Iteration  28: 1009653.084 ops/s
Iteration  29: 1008831.198 ops/s
Iteration  30: 1015125.924 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1006654.126 ±(99.9%) 3438.799 ops/s [Average]
  (min, avg, max) = (992565.932, 1006654.126, 1015125.924), stdev = 5147.033
  CI (99.9%): [1003215.326, 1010092.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1006654.126 ± 3438.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1477825.591 ops/s
# Warmup Iteration   2: 3349000.529 ops/s
# Warmup Iteration   3: 2744680.258 ops/s
# Warmup Iteration   4: 3383329.513 ops/s
# Warmup Iteration   5: 3324424.500 ops/s
# Warmup Iteration   6: 3347332.295 ops/s
# Warmup Iteration   7: 3358269.701 ops/s
# Warmup Iteration   8: 3385492.119 ops/s
# Warmup Iteration   9: 3364743.601 ops/s
# Warmup Iteration  10: 3391495.062 ops/s
# Warmup Iteration  11: 3388427.444 ops/s
# Warmup Iteration  12: 3390375.049 ops/s
# Warmup Iteration  13: 3380188.676 ops/s
# Warmup Iteration  14: 3391755.692 ops/s
# Warmup Iteration  15: 3387445.868 ops/s
# Warmup Iteration  16: 3359273.347 ops/s
# Warmup Iteration  17: 3378545.628 ops/s
# Warmup Iteration  18: 3390649.211 ops/s
# Warmup Iteration  19: 3372792.907 ops/s
# Warmup Iteration  20: 3385237.367 ops/s
# Warmup Iteration  21: 3364271.190 ops/s
# Warmup Iteration  22: 3369590.589 ops/s
# Warmup Iteration  23: 3395561.924 ops/s
# Warmup Iteration  24: 3366415.853 ops/s
# Warmup Iteration  25: 3399410.989 ops/s
# Warmup Iteration  26: 3363532.269 ops/s
# Warmup Iteration  27: 3400910.206 ops/s
# Warmup Iteration  28: 3388975.672 ops/s
# Warmup Iteration  29: 3405533.491 ops/s
# Warmup Iteration  30: 3403997.193 ops/s
Iteration   1: 3392250.166 ops/s
Iteration   2: 3398701.735 ops/s
Iteration   3: 3372537.587 ops/s
Iteration   4: 3394319.042 ops/s
Iteration   5: 3399976.433 ops/s
Iteration   6: 3404046.259 ops/s
Iteration   7: 3361498.126 ops/s
Iteration   8: 3394356.082 ops/s
Iteration   9: 3386192.462 ops/s
Iteration  10: 3386938.954 ops/s
Iteration  11: 3386931.955 ops/s
Iteration  12: 3387240.078 ops/s
Iteration  13: 3391040.948 ops/s
Iteration  14: 3344098.752 ops/s
Iteration  15: 3389563.397 ops/s
Iteration  16: 3405071.742 ops/s
Iteration  17: 3386093.082 ops/s
Iteration  18: 3410352.095 ops/s
Iteration  19: 3388235.269 ops/s
Iteration  20: 3403315.252 ops/s
Iteration  21: 3398054.830 ops/s
Iteration  22: 3390655.822 ops/s
Iteration  23: 3407566.682 ops/s
Iteration  24: 3391034.497 ops/s
Iteration  25: 3410263.880 ops/s
Iteration  26: 3342381.798 ops/s
Iteration  27: 3322057.744 ops/s
Iteration  28: 3394752.940 ops/s
Iteration  29: 3407710.977 ops/s
Iteration  30: 3386473.164 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeString":
  3387790.392 ±(99.9%) 13809.851 ops/s [Average]
  (min, avg, max) = (3322057.744, 3387790.392, 3410352.095), stdev = 20669.936
  CI (99.9%): [3373980.541, 3401600.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_makeString  thrpt   30  3387790.392 ± 13809.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2982154.958 ops/s
# Warmup Iteration   2: 6243892.996 ops/s
# Warmup Iteration   3: 6336330.421 ops/s
# Warmup Iteration   4: 5321534.756 ops/s
# Warmup Iteration   5: 6339357.629 ops/s
# Warmup Iteration   6: 6332060.872 ops/s
# Warmup Iteration   7: 6284396.230 ops/s
# Warmup Iteration   8: 6315377.374 ops/s
# Warmup Iteration   9: 6317622.629 ops/s
# Warmup Iteration  10: 6285276.989 ops/s
# Warmup Iteration  11: 6279636.749 ops/s
# Warmup Iteration  12: 6329504.560 ops/s
# Warmup Iteration  13: 6223415.736 ops/s
# Warmup Iteration  14: 6305777.861 ops/s
# Warmup Iteration  15: 6166875.222 ops/s
# Warmup Iteration  16: 6302517.400 ops/s
# Warmup Iteration  17: 6248793.325 ops/s
# Warmup Iteration  18: 6271576.687 ops/s
# Warmup Iteration  19: 6303571.352 ops/s
# Warmup Iteration  20: 6242319.225 ops/s
# Warmup Iteration  21: 6326452.062 ops/s
# Warmup Iteration  22: 6310583.948 ops/s
# Warmup Iteration  23: 6272384.395 ops/s
# Warmup Iteration  24: 6327215.105 ops/s
# Warmup Iteration  25: 6329378.466 ops/s
# Warmup Iteration  26: 6315353.676 ops/s
# Warmup Iteration  27: 6320868.927 ops/s
# Warmup Iteration  28: 6285995.117 ops/s
# Warmup Iteration  29: 6251194.135 ops/s
# Warmup Iteration  30: 6327583.565 ops/s
Iteration   1: 6295802.034 ops/s
Iteration   2: 6315916.533 ops/s
Iteration   3: 6294859.599 ops/s
Iteration   4: 6323970.828 ops/s
Iteration   5: 6318663.709 ops/s
Iteration   6: 6272919.126 ops/s
Iteration   7: 6336879.861 ops/s
Iteration   8: 6333281.856 ops/s
Iteration   9: 6329195.764 ops/s
Iteration  10: 6308902.429 ops/s
Iteration  11: 6331554.182 ops/s
Iteration  12: 6307634.786 ops/s
Iteration  13: 6271683.372 ops/s
Iteration  14: 6281472.119 ops/s
Iteration  15: 6302580.599 ops/s
Iteration  16: 6321835.536 ops/s
Iteration  17: 6331559.924 ops/s
Iteration  18: 6296455.873 ops/s
Iteration  19: 6313344.588 ops/s
Iteration  20: 6323610.240 ops/s
Iteration  21: 6315186.744 ops/s
Iteration  22: 6283443.793 ops/s
Iteration  23: 6324812.969 ops/s
Iteration  24: 6275559.254 ops/s
Iteration  25: 6209495.089 ops/s
Iteration  26: 6330273.083 ops/s
Iteration  27: 6248694.965 ops/s
Iteration  28: 6316477.696 ops/s
Iteration  29: 6329255.117 ops/s
Iteration  30: 6308540.031 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparator":
  6305128.723 ±(99.9%) 19078.891 ops/s [Average]
  (min, avg, max) = (6209495.089, 6305128.723, 6336879.861), stdev = 28556.389
  CI (99.9%): [6286049.832, 6324207.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  6305128.723 ± 19078.891  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2715137.601 ops/s
# Warmup Iteration   2: 5873169.960 ops/s
# Warmup Iteration   3: 5977115.786 ops/s
# Warmup Iteration   4: 5032099.031 ops/s
# Warmup Iteration   5: 5991795.198 ops/s
# Warmup Iteration   6: 5968581.401 ops/s
# Warmup Iteration   7: 5983433.932 ops/s
# Warmup Iteration   8: 5964259.646 ops/s
# Warmup Iteration   9: 5963747.982 ops/s
# Warmup Iteration  10: 5949893.937 ops/s
# Warmup Iteration  11: 5965097.204 ops/s
# Warmup Iteration  12: 5971916.033 ops/s
# Warmup Iteration  13: 5991854.581 ops/s
# Warmup Iteration  14: 5995004.771 ops/s
# Warmup Iteration  15: 5987553.053 ops/s
# Warmup Iteration  16: 5967419.588 ops/s
# Warmup Iteration  17: 5929621.515 ops/s
# Warmup Iteration  18: 5884938.125 ops/s
# Warmup Iteration  19: 5980273.617 ops/s
# Warmup Iteration  20: 5941993.841 ops/s
# Warmup Iteration  21: 5941863.882 ops/s
# Warmup Iteration  22: 5970878.557 ops/s
# Warmup Iteration  23: 6000050.760 ops/s
# Warmup Iteration  24: 5990202.843 ops/s
# Warmup Iteration  25: 5990842.566 ops/s
# Warmup Iteration  26: 5972740.993 ops/s
# Warmup Iteration  27: 5970723.385 ops/s
# Warmup Iteration  28: 5994621.907 ops/s
# Warmup Iteration  29: 5996071.085 ops/s
# Warmup Iteration  30: 5947156.449 ops/s
Iteration   1: 5992999.343 ops/s
Iteration   2: 5991123.030 ops/s
Iteration   3: 5975494.636 ops/s
Iteration   4: 5967406.761 ops/s
Iteration   5: 6006656.113 ops/s
Iteration   6: 5991821.391 ops/s
Iteration   7: 5983951.530 ops/s
Iteration   8: 5940450.090 ops/s
Iteration   9: 5994219.756 ops/s
Iteration  10: 5978503.630 ops/s
Iteration  11: 5981651.867 ops/s
Iteration  12: 6003488.602 ops/s
Iteration  13: 6004805.711 ops/s
Iteration  14: 5995924.726 ops/s
Iteration  15: 5999510.829 ops/s
Iteration  16: 5983469.198 ops/s
Iteration  17: 5993145.724 ops/s
Iteration  18: 5868182.677 ops/s
Iteration  19: 5979530.405 ops/s
Iteration  20: 5990751.585 ops/s
Iteration  21: 5863296.260 ops/s
Iteration  22: 5968114.678 ops/s
Iteration  23: 6001381.304 ops/s
Iteration  24: 5885496.206 ops/s
Iteration  25: 5989034.339 ops/s
Iteration  26: 5950819.259 ops/s
Iteration  27: 6004674.325 ops/s
Iteration  28: 5995095.453 ops/s
Iteration  29: 5984243.340 ops/s
Iteration  30: 5917935.065 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  5972772.594 ±(99.9%) 26299.514 ops/s [Average]
  (min, avg, max) = (5863296.260, 5972772.594, 6006656.113), stdev = 39363.877
  CI (99.9%): [5946473.081, 5999072.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  5972772.594 ± 26299.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4649028.570 ops/s
# Warmup Iteration   2: 9397007.232 ops/s
# Warmup Iteration   3: 9582580.533 ops/s
# Warmup Iteration   4: 9628068.655 ops/s
# Warmup Iteration   5: 7998867.279 ops/s
# Warmup Iteration   6: 9655864.815 ops/s
# Warmup Iteration   7: 9666322.831 ops/s
# Warmup Iteration   8: 9593095.864 ops/s
# Warmup Iteration   9: 9673900.936 ops/s
# Warmup Iteration  10: 9660891.973 ops/s
# Warmup Iteration  11: 9669936.052 ops/s
# Warmup Iteration  12: 9580916.536 ops/s
# Warmup Iteration  13: 9672601.036 ops/s
# Warmup Iteration  14: 9615838.757 ops/s
# Warmup Iteration  15: 9565833.809 ops/s
# Warmup Iteration  16: 9494454.916 ops/s
# Warmup Iteration  17: 9605482.473 ops/s
# Warmup Iteration  18: 9583760.365 ops/s
# Warmup Iteration  19: 9675591.274 ops/s
# Warmup Iteration  20: 9658299.270 ops/s
# Warmup Iteration  21: 9647871.414 ops/s
# Warmup Iteration  22: 9676306.924 ops/s
# Warmup Iteration  23: 9656252.447 ops/s
# Warmup Iteration  24: 9581902.519 ops/s
# Warmup Iteration  25: 9663664.761 ops/s
# Warmup Iteration  26: 9667748.507 ops/s
# Warmup Iteration  27: 9585565.975 ops/s
# Warmup Iteration  28: 9674605.615 ops/s
# Warmup Iteration  29: 9678536.974 ops/s
# Warmup Iteration  30: 9659029.089 ops/s
Iteration   1: 9651175.114 ops/s
Iteration   2: 9667531.126 ops/s
Iteration   3: 9655323.597 ops/s
Iteration   4: 9665520.176 ops/s
Iteration   5: 9676473.524 ops/s
Iteration   6: 9518117.097 ops/s
Iteration   7: 9648060.784 ops/s
Iteration   8: 9609977.481 ops/s
Iteration   9: 9681343.748 ops/s
Iteration  10: 9609484.752 ops/s
Iteration  11: 9667986.462 ops/s
Iteration  12: 9683826.520 ops/s
Iteration  13: 9672981.442 ops/s
Iteration  14: 9644109.380 ops/s
Iteration  15: 9650923.831 ops/s
Iteration  16: 9653727.056 ops/s
Iteration  17: 9593183.080 ops/s
Iteration  18: 9665450.323 ops/s
Iteration  19: 9513749.867 ops/s
Iteration  20: 9669028.156 ops/s
Iteration  21: 9665115.180 ops/s
Iteration  22: 9655746.075 ops/s
Iteration  23: 9683482.970 ops/s
Iteration  24: 9673041.295 ops/s
Iteration  25: 9519473.696 ops/s
Iteration  26: 9688149.881 ops/s
Iteration  27: 9685848.153 ops/s
Iteration  28: 9514105.044 ops/s
Iteration  29: 9627361.281 ops/s
Iteration  30: 9641567.650 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max":
  9638395.491 ±(99.9%) 35966.567 ops/s [Average]
  (min, avg, max) = (9513749.867, 9638395.491, 9688149.881), stdev = 53833.068
  CI (99.9%): [9602428.924, 9674362.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_max  thrpt   30  9638395.491 ± 35966.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5812593.720 ops/s
# Warmup Iteration   2: 12020501.345 ops/s
# Warmup Iteration   3: 10165075.238 ops/s
# Warmup Iteration   4: 12038357.346 ops/s
# Warmup Iteration   5: 11949987.023 ops/s
# Warmup Iteration   6: 12068421.079 ops/s
# Warmup Iteration   7: 11913590.144 ops/s
# Warmup Iteration   8: 12058542.811 ops/s
# Warmup Iteration   9: 12073814.752 ops/s
# Warmup Iteration  10: 12034306.915 ops/s
# Warmup Iteration  11: 12035246.384 ops/s
# Warmup Iteration  12: 12089535.395 ops/s
# Warmup Iteration  13: 12063086.794 ops/s
# Warmup Iteration  14: 12054344.756 ops/s
# Warmup Iteration  15: 12011205.863 ops/s
# Warmup Iteration  16: 12048174.752 ops/s
# Warmup Iteration  17: 11942260.516 ops/s
# Warmup Iteration  18: 12036515.059 ops/s
# Warmup Iteration  19: 11821820.195 ops/s
# Warmup Iteration  20: 12006031.480 ops/s
# Warmup Iteration  21: 11960689.224 ops/s
# Warmup Iteration  22: 12016828.991 ops/s
# Warmup Iteration  23: 11992190.490 ops/s
# Warmup Iteration  24: 11679804.717 ops/s
# Warmup Iteration  25: 11949845.193 ops/s
# Warmup Iteration  26: 11988821.134 ops/s
# Warmup Iteration  27: 12052958.961 ops/s
# Warmup Iteration  28: 12010447.914 ops/s
# Warmup Iteration  29: 11997654.693 ops/s
# Warmup Iteration  30: 12022826.661 ops/s
Iteration   1: 11996034.360 ops/s
Iteration   2: 12018696.301 ops/s
Iteration   3: 11972331.918 ops/s
Iteration   4: 12034031.767 ops/s
Iteration   5: 11978419.173 ops/s
Iteration   6: 11997591.356 ops/s
Iteration   7: 12012591.723 ops/s
Iteration   8: 11880840.121 ops/s
Iteration   9: 12081678.165 ops/s
Iteration  10: 11924387.497 ops/s
Iteration  11: 11807805.682 ops/s
Iteration  12: 12026550.523 ops/s
Iteration  13: 11989367.007 ops/s
Iteration  14: 12050944.229 ops/s
Iteration  15: 12040550.005 ops/s
Iteration  16: 12042281.504 ops/s
Iteration  17: 12057326.919 ops/s
Iteration  18: 12027306.797 ops/s
Iteration  19: 11879002.548 ops/s
Iteration  20: 11905744.649 ops/s
Iteration  21: 12026114.579 ops/s
Iteration  22: 12035995.657 ops/s
Iteration  23: 11833978.386 ops/s
Iteration  24: 11798210.455 ops/s
Iteration  25: 12046723.533 ops/s
Iteration  26: 12050020.360 ops/s
Iteration  27: 11993606.692 ops/s
Iteration  28: 11960812.155 ops/s
Iteration  29: 12029506.511 ops/s
Iteration  30: 12030158.111 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy":
  11984286.956 ±(99.9%) 51414.895 ops/s [Average]
  (min, avg, max) = (11798210.455, 11984286.956, 12081678.165), stdev = 76955.400
  CI (99.9%): [11932872.061, 12035701.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_maxBy  thrpt   30  11984286.956 ± 51414.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2308722.911 ops/s
# Warmup Iteration   2: 7756349.575 ops/s
# Warmup Iteration   3: 7381499.448 ops/s
# Warmup Iteration   4: 7009971.913 ops/s
# Warmup Iteration   5: 7795954.208 ops/s
# Warmup Iteration   6: 7823161.519 ops/s
# Warmup Iteration   7: 7826816.462 ops/s
# Warmup Iteration   8: 7822736.803 ops/s
# Warmup Iteration   9: 7823644.969 ops/s
# Warmup Iteration  10: 7816294.048 ops/s
# Warmup Iteration  11: 7829238.440 ops/s
# Warmup Iteration  12: 7791420.146 ops/s
# Warmup Iteration  13: 7834456.408 ops/s
# Warmup Iteration  14: 7822552.069 ops/s
# Warmup Iteration  15: 7826746.340 ops/s
# Warmup Iteration  16: 7832836.293 ops/s
# Warmup Iteration  17: 7823875.829 ops/s
# Warmup Iteration  18: 7843108.343 ops/s
# Warmup Iteration  19: 7845746.158 ops/s
# Warmup Iteration  20: 7841650.891 ops/s
# Warmup Iteration  21: 7687617.192 ops/s
# Warmup Iteration  22: 7775465.502 ops/s
# Warmup Iteration  23: 7773077.890 ops/s
# Warmup Iteration  24: 7769374.445 ops/s
# Warmup Iteration  25: 7779495.939 ops/s
# Warmup Iteration  26: 7847807.407 ops/s
# Warmup Iteration  27: 7827749.653 ops/s
# Warmup Iteration  28: 7831664.249 ops/s
# Warmup Iteration  29: 7850552.287 ops/s
# Warmup Iteration  30: 7825148.520 ops/s
Iteration   1: 7836572.810 ops/s
Iteration   2: 7810298.309 ops/s
Iteration   3: 7831331.079 ops/s
Iteration   4: 7822201.040 ops/s
Iteration   5: 7822596.249 ops/s
Iteration   6: 7841376.523 ops/s
Iteration   7: 7867773.779 ops/s
Iteration   8: 7826521.396 ops/s
Iteration   9: 7802595.061 ops/s
Iteration  10: 7821866.392 ops/s
Iteration  11: 7832513.995 ops/s
Iteration  12: 7813471.048 ops/s
Iteration  13: 7827861.101 ops/s
Iteration  14: 7850942.070 ops/s
Iteration  15: 7725948.137 ops/s
Iteration  16: 7843653.001 ops/s
Iteration  17: 7806959.164 ops/s
Iteration  18: 7701857.360 ops/s
Iteration  19: 7831300.137 ops/s
Iteration  20: 7817132.257 ops/s
Iteration  21: 7830858.296 ops/s
Iteration  22: 7822094.280 ops/s
Iteration  23: 7840761.277 ops/s
Iteration  24: 7798257.947 ops/s
Iteration  25: 7849768.331 ops/s
Iteration  26: 7848146.394 ops/s
Iteration  27: 7817579.682 ops/s
Iteration  28: 7804468.613 ops/s
Iteration  29: 7822863.115 ops/s
Iteration  30: 7837628.596 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxByOptional":
  7820239.915 ±(99.9%) 22107.697 ops/s [Average]
  (min, avg, max) = (7701857.360, 7820239.915, 7867773.779), stdev = 33089.762
  CI (99.9%): [7798132.218, 7842347.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_maxByOptional  thrpt   30  7820239.915 ± 22107.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7170041.675 ops/s
# Warmup Iteration   2: 15696377.576 ops/s
# Warmup Iteration   3: 14000768.150 ops/s
# Warmup Iteration   4: 15002259.233 ops/s
# Warmup Iteration   5: 15588463.197 ops/s
# Warmup Iteration   6: 15733305.064 ops/s
# Warmup Iteration   7: 15701684.751 ops/s
# Warmup Iteration   8: 15637282.966 ops/s
# Warmup Iteration   9: 15712551.899 ops/s
# Warmup Iteration  10: 15750810.304 ops/s
# Warmup Iteration  11: 15748038.207 ops/s
# Warmup Iteration  12: 15529373.307 ops/s
# Warmup Iteration  13: 15752541.217 ops/s
# Warmup Iteration  14: 15674294.374 ops/s
# Warmup Iteration  15: 15767904.129 ops/s
# Warmup Iteration  16: 15698780.952 ops/s
# Warmup Iteration  17: 15755923.675 ops/s
# Warmup Iteration  18: 15750676.076 ops/s
# Warmup Iteration  19: 15655588.778 ops/s
# Warmup Iteration  20: 15761981.503 ops/s
# Warmup Iteration  21: 15766745.760 ops/s
# Warmup Iteration  22: 15631247.977 ops/s
# Warmup Iteration  23: 15748423.049 ops/s
# Warmup Iteration  24: 15641868.071 ops/s
# Warmup Iteration  25: 15751030.775 ops/s
# Warmup Iteration  26: 15796565.024 ops/s
# Warmup Iteration  27: 15755420.120 ops/s
# Warmup Iteration  28: 15731313.921 ops/s
# Warmup Iteration  29: 15705622.992 ops/s
# Warmup Iteration  30: 15763268.633 ops/s
Iteration   1: 15638035.548 ops/s
Iteration   2: 15766004.851 ops/s
Iteration   3: 15759903.899 ops/s
Iteration   4: 15792113.620 ops/s
Iteration   5: 15780760.387 ops/s
Iteration   6: 15749985.150 ops/s
Iteration   7: 15764756.965 ops/s
Iteration   8: 15731647.116 ops/s
Iteration   9: 15765369.520 ops/s
Iteration  10: 15618888.611 ops/s
Iteration  11: 15807322.366 ops/s
Iteration  12: 15771145.450 ops/s
Iteration  13: 15759891.596 ops/s
Iteration  14: 15708144.190 ops/s
Iteration  15: 15765363.955 ops/s
Iteration  16: 15464223.406 ops/s
Iteration  17: 15730612.016 ops/s
Iteration  18: 15817508.530 ops/s
Iteration  19: 15769051.755 ops/s
Iteration  20: 15793471.029 ops/s
Iteration  21: 15786927.540 ops/s
Iteration  22: 15746973.617 ops/s
Iteration  23: 15783061.281 ops/s
Iteration  24: 15731498.769 ops/s
Iteration  25: 15790926.940 ops/s
Iteration  26: 15768473.427 ops/s
Iteration  27: 15501889.870 ops/s
Iteration  28: 15544588.559 ops/s
Iteration  29: 15794865.748 ops/s
Iteration  30: 15788001.560 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxBy_null_throws":
  15733046.909 ±(99.9%) 59716.073 ops/s [Average]
  (min, avg, max) = (15464223.406, 15733046.909, 15817508.530), stdev = 89380.214
  CI (99.9%): [15673330.836, 15792762.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  15733046.909 ± 59716.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1682447.031 ops/s
# Warmup Iteration   2: 3659548.298 ops/s
# Warmup Iteration   3: 3740635.807 ops/s
# Warmup Iteration   4: 3583275.834 ops/s
# Warmup Iteration   5: 3280605.399 ops/s
# Warmup Iteration   6: 3790659.407 ops/s
# Warmup Iteration   7: 3784957.662 ops/s
# Warmup Iteration   8: 3783332.696 ops/s
# Warmup Iteration   9: 3788976.972 ops/s
# Warmup Iteration  10: 3785036.905 ops/s
# Warmup Iteration  11: 3785071.908 ops/s
# Warmup Iteration  12: 3786110.793 ops/s
# Warmup Iteration  13: 3782160.869 ops/s
# Warmup Iteration  14: 3786595.568 ops/s
# Warmup Iteration  15: 3767650.092 ops/s
# Warmup Iteration  16: 3777506.184 ops/s
# Warmup Iteration  17: 3746554.564 ops/s
# Warmup Iteration  18: 3758744.328 ops/s
# Warmup Iteration  19: 3770642.130 ops/s
# Warmup Iteration  20: 3797566.750 ops/s
# Warmup Iteration  21: 3782083.704 ops/s
# Warmup Iteration  22: 3785126.878 ops/s
# Warmup Iteration  23: 3756067.830 ops/s
# Warmup Iteration  24: 3786681.840 ops/s
# Warmup Iteration  25: 3754263.787 ops/s
# Warmup Iteration  26: 3792823.756 ops/s
# Warmup Iteration  27: 3799367.674 ops/s
# Warmup Iteration  28: 3795755.129 ops/s
# Warmup Iteration  29: 3788336.896 ops/s
# Warmup Iteration  30: 3792389.891 ops/s
Iteration   1: 3797447.782 ops/s
Iteration   2: 3795536.425 ops/s
Iteration   3: 3789588.816 ops/s
Iteration   4: 3788715.342 ops/s
Iteration   5: 3744047.903 ops/s
Iteration   6: 3777606.849 ops/s
Iteration   7: 3803975.926 ops/s
Iteration   8: 3793088.196 ops/s
Iteration   9: 3790430.090 ops/s
Iteration  10: 3790299.274 ops/s
Iteration  11: 3795059.454 ops/s
Iteration  12: 3796171.117 ops/s
Iteration  13: 3789983.121 ops/s
Iteration  14: 3799200.743 ops/s
Iteration  15: 3759489.775 ops/s
Iteration  16: 3771801.447 ops/s
Iteration  17: 3789353.553 ops/s
Iteration  18: 3789696.704 ops/s
Iteration  19: 3800812.806 ops/s
Iteration  20: 3792102.043 ops/s
Iteration  21: 3798028.472 ops/s
Iteration  22: 3793970.785 ops/s
Iteration  23: 3736168.011 ops/s
Iteration  24: 3795882.444 ops/s
Iteration  25: 3796240.466 ops/s
Iteration  26: 3689412.675 ops/s
Iteration  27: 3727888.728 ops/s
Iteration  28: 3790945.007 ops/s
Iteration  29: 3764790.502 ops/s
Iteration  30: 3796103.728 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_maxOptional":
  3781461.273 ±(99.9%) 17371.002 ops/s [Average]
  (min, avg, max) = (3689412.675, 3781461.273, 3803975.926), stdev = 26000.100
  CI (99.9%): [3764090.271, 3798832.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_maxOptional  thrpt   30  3781461.273 ± 17371.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694546.550 ops/s
# Warmup Iteration   2: 718821.853 ops/s
# Warmup Iteration   3: 872052.554 ops/s
# Warmup Iteration   4: 910434.076 ops/s
# Warmup Iteration   5: 919350.937 ops/s
# Warmup Iteration   6: 902741.606 ops/s
# Warmup Iteration   7: 920634.409 ops/s
# Warmup Iteration   8: 909960.179 ops/s
# Warmup Iteration   9: 917451.607 ops/s
# Warmup Iteration  10: 918966.341 ops/s
# Warmup Iteration  11: 917768.564 ops/s
# Warmup Iteration  12: 919794.288 ops/s
# Warmup Iteration  13: 853972.236 ops/s
# Warmup Iteration  14: 834699.051 ops/s
# Warmup Iteration  15: 917238.461 ops/s
# Warmup Iteration  16: 908278.855 ops/s
# Warmup Iteration  17: 974318.553 ops/s
# Warmup Iteration  18: 971084.178 ops/s
# Warmup Iteration  19: 976115.707 ops/s
# Warmup Iteration  20: 974423.187 ops/s
# Warmup Iteration  21: 973782.193 ops/s
# Warmup Iteration  22: 969163.771 ops/s
# Warmup Iteration  23: 966264.098 ops/s
# Warmup Iteration  24: 970034.678 ops/s
# Warmup Iteration  25: 970422.010 ops/s
# Warmup Iteration  26: 966958.351 ops/s
# Warmup Iteration  27: 973485.590 ops/s
# Warmup Iteration  28: 970790.521 ops/s
# Warmup Iteration  29: 971337.827 ops/s
# Warmup Iteration  30: 961673.866 ops/s
Iteration   1: 973108.076 ops/s
Iteration   2: 972641.831 ops/s
Iteration   3: 971648.466 ops/s
Iteration   4: 970367.931 ops/s
Iteration   5: 971890.483 ops/s
Iteration   6: 957442.802 ops/s
Iteration   7: 972221.430 ops/s
Iteration   8: 973280.573 ops/s
Iteration   9: 966385.188 ops/s
Iteration  10: 971401.013 ops/s
Iteration  11: 971829.359 ops/s
Iteration  12: 970901.514 ops/s
Iteration  13: 971994.021 ops/s
Iteration  14: 960790.902 ops/s
Iteration  15: 941775.437 ops/s
Iteration  16: 973418.210 ops/s
Iteration  17: 974459.214 ops/s
Iteration  18: 970196.150 ops/s
Iteration  19: 972618.445 ops/s
Iteration  20: 976505.097 ops/s
Iteration  21: 967329.916 ops/s
Iteration  22: 952598.952 ops/s
Iteration  23: 971880.697 ops/s
Iteration  24: 971593.903 ops/s
Iteration  25: 973474.506 ops/s
Iteration  26: 961660.171 ops/s
Iteration  27: 973159.182 ops/s
Iteration  28: 964123.917 ops/s
Iteration  29: 973488.758 ops/s
Iteration  30: 968392.988 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_empty_throws":
  968752.638 ±(99.9%) 4950.255 ops/s [Average]
  (min, avg, max) = (941775.437, 968752.638, 976505.097), stdev = 7409.310
  CI (99.9%): [963802.382, 973702.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_max_empty_throws  thrpt   30  968752.638 ± 4950.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3111120.875 ops/s
# Warmup Iteration   2: 5792262.903 ops/s
# Warmup Iteration   3: 6109437.636 ops/s
# Warmup Iteration   4: 6129484.733 ops/s
# Warmup Iteration   5: 5143496.076 ops/s
# Warmup Iteration   6: 6150283.482 ops/s
# Warmup Iteration   7: 6146680.763 ops/s
# Warmup Iteration   8: 6129605.066 ops/s
# Warmup Iteration   9: 6125748.270 ops/s
# Warmup Iteration  10: 6094619.829 ops/s
# Warmup Iteration  11: 6138626.810 ops/s
# Warmup Iteration  12: 6145560.365 ops/s
# Warmup Iteration  13: 6076297.721 ops/s
# Warmup Iteration  14: 6122473.670 ops/s
# Warmup Iteration  15: 6082820.111 ops/s
# Warmup Iteration  16: 6141441.265 ops/s
# Warmup Iteration  17: 6084102.995 ops/s
# Warmup Iteration  18: 6111730.290 ops/s
# Warmup Iteration  19: 6143668.434 ops/s
# Warmup Iteration  20: 6134060.063 ops/s
# Warmup Iteration  21: 6148363.918 ops/s
# Warmup Iteration  22: 6099678.802 ops/s
# Warmup Iteration  23: 6149403.425 ops/s
# Warmup Iteration  24: 6095557.227 ops/s
# Warmup Iteration  25: 6133666.178 ops/s
# Warmup Iteration  26: 6137229.325 ops/s
# Warmup Iteration  27: 6110660.169 ops/s
# Warmup Iteration  28: 6103022.766 ops/s
# Warmup Iteration  29: 6146156.131 ops/s
# Warmup Iteration  30: 6145061.562 ops/s
Iteration   1: 6052192.115 ops/s
Iteration   2: 6111649.677 ops/s
Iteration   3: 6127080.524 ops/s
Iteration   4: 6141495.322 ops/s
Iteration   5: 6091030.109 ops/s
Iteration   6: 6145775.291 ops/s
Iteration   7: 6135776.215 ops/s
Iteration   8: 6153017.383 ops/s
Iteration   9: 6133497.747 ops/s
Iteration  10: 6154124.833 ops/s
Iteration  11: 6148101.574 ops/s
Iteration  12: 6136057.647 ops/s
Iteration  13: 6140002.744 ops/s
Iteration  14: 6119275.560 ops/s
Iteration  15: 6138444.136 ops/s
Iteration  16: 6142170.712 ops/s
Iteration  17: 6151613.290 ops/s
Iteration  18: 6144607.212 ops/s
Iteration  19: 6143079.379 ops/s
Iteration  20: 6166618.146 ops/s
Iteration  21: 6136425.036 ops/s
Iteration  22: 6067228.756 ops/s
Iteration  23: 6153509.531 ops/s
Iteration  24: 6154218.886 ops/s
Iteration  25: 6137981.698 ops/s
Iteration  26: 6180363.116 ops/s
Iteration  27: 6140215.531 ops/s
Iteration  28: 6152729.551 ops/s
Iteration  29: 6155183.346 ops/s
Iteration  30: 6143617.438 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_safe":
  6136569.417 ±(99.9%) 17682.931 ops/s [Average]
  (min, avg, max) = (6052192.115, 6136569.417, 6180363.116), stdev = 26466.981
  CI (99.9%): [6118886.486, 6154252.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_max_null_safe  thrpt   30  6136569.417 ± 17682.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3496627.353 ops/s
# Warmup Iteration   2: 5138845.696 ops/s
# Warmup Iteration   3: 5958240.220 ops/s
# Warmup Iteration   4: 5958485.075 ops/s
# Warmup Iteration   5: 5836515.636 ops/s
# Warmup Iteration   6: 5908308.370 ops/s
# Warmup Iteration   7: 4940364.910 ops/s
# Warmup Iteration   8: 5920290.147 ops/s
# Warmup Iteration   9: 5932946.937 ops/s
# Warmup Iteration  10: 5896779.584 ops/s
# Warmup Iteration  11: 5883825.257 ops/s
# Warmup Iteration  12: 5883853.114 ops/s
# Warmup Iteration  13: 5927404.857 ops/s
# Warmup Iteration  14: 5947449.383 ops/s
# Warmup Iteration  15: 5913937.710 ops/s
# Warmup Iteration  16: 5874093.104 ops/s
# Warmup Iteration  17: 5872319.951 ops/s
# Warmup Iteration  18: 5887561.055 ops/s
# Warmup Iteration  19: 5913551.912 ops/s
# Warmup Iteration  20: 5877583.716 ops/s
# Warmup Iteration  21: 5922785.263 ops/s
# Warmup Iteration  22: 5918160.660 ops/s
# Warmup Iteration  23: 5916092.310 ops/s
# Warmup Iteration  24: 5859428.142 ops/s
# Warmup Iteration  25: 5908103.345 ops/s
# Warmup Iteration  26: 5921663.935 ops/s
# Warmup Iteration  27: 5875535.005 ops/s
# Warmup Iteration  28: 5913564.168 ops/s
# Warmup Iteration  29: 5933435.112 ops/s
# Warmup Iteration  30: 5917023.978 ops/s
Iteration   1: 5903585.247 ops/s
Iteration   2: 5931024.945 ops/s
Iteration   3: 5893437.928 ops/s
Iteration   4: 5935971.953 ops/s
Iteration   5: 5890620.485 ops/s
Iteration   6: 5938884.734 ops/s
Iteration   7: 5935895.852 ops/s
Iteration   8: 5926463.215 ops/s
Iteration   9: 5915899.333 ops/s
Iteration  10: 5912176.358 ops/s
Iteration  11: 5949664.065 ops/s
Iteration  12: 5914464.171 ops/s
Iteration  13: 5915454.756 ops/s
Iteration  14: 5907234.371 ops/s
Iteration  15: 5923458.448 ops/s
Iteration  16: 5936967.568 ops/s
Iteration  17: 5907839.306 ops/s
Iteration  18: 5927191.909 ops/s
Iteration  19: 5916933.045 ops/s
Iteration  20: 5927372.337 ops/s
Iteration  21: 5919084.082 ops/s
Iteration  22: 5936507.835 ops/s
Iteration  23: 5918305.175 ops/s
Iteration  24: 5922568.707 ops/s
Iteration  25: 5889231.982 ops/s
Iteration  26: 5910782.961 ops/s
Iteration  27: 5918735.848 ops/s
Iteration  28: 5831026.659 ops/s
Iteration  29: 5936409.767 ops/s
Iteration  30: 5868321.257 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws":
  5915383.810 ±(99.9%) 15758.922 ops/s [Average]
  (min, avg, max) = (5831026.659, 5915383.810, 5949664.065), stdev = 23587.215
  CI (99.9%): [5899624.888, 5931142.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_max_null_throws  thrpt   30  5915383.810 ± 15758.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544568.083 ops/s
# Warmup Iteration   2: 565927.224 ops/s
# Warmup Iteration   3: 649700.571 ops/s
# Warmup Iteration   4: 730075.269 ops/s
# Warmup Iteration   5: 729079.866 ops/s
# Warmup Iteration   6: 724346.714 ops/s
# Warmup Iteration   7: 725720.218 ops/s
# Warmup Iteration   8: 729400.916 ops/s
# Warmup Iteration   9: 729250.628 ops/s
# Warmup Iteration  10: 727925.730 ops/s
# Warmup Iteration  11: 718342.937 ops/s
# Warmup Iteration  12: 728381.339 ops/s
# Warmup Iteration  13: 730587.111 ops/s
# Warmup Iteration  14: 658835.670 ops/s
# Warmup Iteration  15: 672026.170 ops/s
# Warmup Iteration  16: 727117.496 ops/s
# Warmup Iteration  17: 758584.882 ops/s
# Warmup Iteration  18: 755085.944 ops/s
# Warmup Iteration  19: 760712.229 ops/s
# Warmup Iteration  20: 759815.313 ops/s
# Warmup Iteration  21: 761576.357 ops/s
# Warmup Iteration  22: 759448.308 ops/s
# Warmup Iteration  23: 761251.712 ops/s
# Warmup Iteration  24: 759499.222 ops/s
# Warmup Iteration  25: 760303.108 ops/s
# Warmup Iteration  26: 751711.271 ops/s
# Warmup Iteration  27: 761458.346 ops/s
# Warmup Iteration  28: 760609.889 ops/s
# Warmup Iteration  29: 753292.419 ops/s
# Warmup Iteration  30: 755534.991 ops/s
Iteration   1: 758763.471 ops/s
Iteration   2: 763040.033 ops/s
Iteration   3: 758462.828 ops/s
Iteration   4: 761053.594 ops/s
Iteration   5: 760902.466 ops/s
Iteration   6: 760354.651 ops/s
Iteration   7: 762281.678 ops/s
Iteration   8: 740421.538 ops/s
Iteration   9: 758789.253 ops/s
Iteration  10: 759434.668 ops/s
Iteration  11: 761126.899 ops/s
Iteration  12: 759389.521 ops/s
Iteration  13: 749774.713 ops/s
Iteration  14: 758253.923 ops/s
Iteration  15: 762558.307 ops/s
Iteration  16: 759486.394 ops/s
Iteration  17: 758861.788 ops/s
Iteration  18: 761871.698 ops/s
Iteration  19: 746989.790 ops/s
Iteration  20: 760744.776 ops/s
Iteration  21: 746667.920 ops/s
Iteration  22: 758217.732 ops/s
Iteration  23: 761190.431 ops/s
Iteration  24: 761054.648 ops/s
Iteration  25: 749063.345 ops/s
Iteration  26: 760835.314 ops/s
Iteration  27: 757468.463 ops/s
Iteration  28: 761332.815 ops/s
Iteration  29: 762240.030 ops/s
Iteration  30: 747969.641 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator":
  757620.078 ±(99.9%) 3899.559 ops/s [Average]
  (min, avg, max) = (740421.538, 757620.078, 763040.033), stdev = 5836.677
  CI (99.9%): [753720.518, 761519.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  757620.078 ± 3899.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4608510.537 ops/s
# Warmup Iteration   2: 9427866.281 ops/s
# Warmup Iteration   3: 9688017.380 ops/s
# Warmup Iteration   4: 9706967.929 ops/s
# Warmup Iteration   5: 8168508.827 ops/s
# Warmup Iteration   6: 9742173.763 ops/s
# Warmup Iteration   7: 9803889.820 ops/s
# Warmup Iteration   8: 9650655.859 ops/s
# Warmup Iteration   9: 9830881.032 ops/s
# Warmup Iteration  10: 9734546.753 ops/s
# Warmup Iteration  11: 9825308.313 ops/s
# Warmup Iteration  12: 9795419.770 ops/s
# Warmup Iteration  13: 9654807.675 ops/s
# Warmup Iteration  14: 9805848.993 ops/s
# Warmup Iteration  15: 9826972.427 ops/s
# Warmup Iteration  16: 9761190.735 ops/s
# Warmup Iteration  17: 9801612.017 ops/s
# Warmup Iteration  18: 9808831.806 ops/s
# Warmup Iteration  19: 9740334.646 ops/s
# Warmup Iteration  20: 9826426.768 ops/s
# Warmup Iteration  21: 9780035.278 ops/s
# Warmup Iteration  22: 9802841.071 ops/s
# Warmup Iteration  23: 9816857.666 ops/s
# Warmup Iteration  24: 9833111.631 ops/s
# Warmup Iteration  25: 9818756.505 ops/s
# Warmup Iteration  26: 9737315.722 ops/s
# Warmup Iteration  27: 9796360.788 ops/s
# Warmup Iteration  28: 9819273.545 ops/s
# Warmup Iteration  29: 9828823.641 ops/s
# Warmup Iteration  30: 9811425.699 ops/s
Iteration   1: 9668981.134 ops/s
Iteration   2: 9676879.077 ops/s
Iteration   3: 9832100.993 ops/s
Iteration   4: 9684966.230 ops/s
Iteration   5: 9823080.267 ops/s
Iteration   6: 9656104.942 ops/s
Iteration   7: 9807841.899 ops/s
Iteration   8: 9786431.045 ops/s
Iteration   9: 9783088.518 ops/s
Iteration  10: 9835679.934 ops/s
Iteration  11: 9689286.904 ops/s
Iteration  12: 9822287.839 ops/s
Iteration  13: 9797701.378 ops/s
Iteration  14: 9802549.604 ops/s
Iteration  15: 9670799.774 ops/s
Iteration  16: 9805046.572 ops/s
Iteration  17: 9817746.673 ops/s
Iteration  18: 9806110.328 ops/s
Iteration  19: 9743305.502 ops/s
Iteration  20: 9664437.866 ops/s
Iteration  21: 9800029.570 ops/s
Iteration  22: 9779925.519 ops/s
Iteration  23: 9793976.388 ops/s
Iteration  24: 9676634.063 ops/s
Iteration  25: 9801997.171 ops/s
Iteration  26: 9814830.175 ops/s
Iteration  27: 9844322.441 ops/s
Iteration  28: 9795647.661 ops/s
Iteration  29: 9775016.404 ops/s
Iteration  30: 9822881.466 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_max_without_comparator":
  9769322.911 ±(99.9%) 41490.540 ops/s [Average]
  (min, avg, max) = (9656104.942, 9769322.911, 9844322.441), stdev = 62101.092
  CI (99.9%): [9727832.371, 9810813.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_max_without_comparator  thrpt   30  9769322.911 ± 41490.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4622778.493 ops/s
# Warmup Iteration   2: 9440608.099 ops/s
# Warmup Iteration   3: 9544263.460 ops/s
# Warmup Iteration   4: 9756105.527 ops/s
# Warmup Iteration   5: 8130512.843 ops/s
# Warmup Iteration   6: 9672540.677 ops/s
# Warmup Iteration   7: 9642721.628 ops/s
# Warmup Iteration   8: 9743623.904 ops/s
# Warmup Iteration   9: 9769639.710 ops/s
# Warmup Iteration  10: 9744507.373 ops/s
# Warmup Iteration  11: 9753311.134 ops/s
# Warmup Iteration  12: 9750954.639 ops/s
# Warmup Iteration  13: 9608212.772 ops/s
# Warmup Iteration  14: 9585185.027 ops/s
# Warmup Iteration  15: 9767487.707 ops/s
# Warmup Iteration  16: 9731544.904 ops/s
# Warmup Iteration  17: 9655576.849 ops/s
# Warmup Iteration  18: 9775274.440 ops/s
# Warmup Iteration  19: 9757632.095 ops/s
# Warmup Iteration  20: 9782663.772 ops/s
# Warmup Iteration  21: 9771021.213 ops/s
# Warmup Iteration  22: 9769811.372 ops/s
# Warmup Iteration  23: 9441488.627 ops/s
# Warmup Iteration  24: 9701046.778 ops/s
# Warmup Iteration  25: 9749931.280 ops/s
# Warmup Iteration  26: 9777538.561 ops/s
# Warmup Iteration  27: 9679121.192 ops/s
# Warmup Iteration  28: 9777213.843 ops/s
# Warmup Iteration  29: 9769534.618 ops/s
# Warmup Iteration  30: 9766415.063 ops/s
Iteration   1: 9773003.084 ops/s
Iteration   2: 9712014.250 ops/s
Iteration   3: 9780507.288 ops/s
Iteration   4: 9744206.931 ops/s
Iteration   5: 9727583.655 ops/s
Iteration   6: 9762447.021 ops/s
Iteration   7: 9733427.278 ops/s
Iteration   8: 9740317.475 ops/s
Iteration   9: 9764430.572 ops/s
Iteration  10: 9736716.758 ops/s
Iteration  11: 9747289.679 ops/s
Iteration  12: 9782413.215 ops/s
Iteration  13: 9670302.820 ops/s
Iteration  14: 9787965.017 ops/s
Iteration  15: 9759141.058 ops/s
Iteration  16: 9746600.930 ops/s
Iteration  17: 9783699.401 ops/s
Iteration  18: 9750597.943 ops/s
Iteration  19: 9738994.744 ops/s
Iteration  20: 9776210.030 ops/s
Iteration  21: 9722285.311 ops/s
Iteration  22: 9697339.286 ops/s
Iteration  23: 9773618.850 ops/s
Iteration  24: 9736744.591 ops/s
Iteration  25: 9779578.187 ops/s
Iteration  26: 9782024.610 ops/s
Iteration  27: 9768530.736 ops/s
Iteration  28: 9757273.731 ops/s
Iteration  29: 9702801.711 ops/s
Iteration  30: 9772154.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min":
  9750340.682 ±(99.9%) 19428.639 ops/s [Average]
  (min, avg, max) = (9670302.820, 9750340.682, 9787965.017), stdev = 29079.874
  CI (99.9%): [9730912.043, 9769769.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_min  thrpt   30  9750340.682 ± 19428.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3819409.688 ops/s
# Warmup Iteration   2: 8419599.602 ops/s
# Warmup Iteration   3: 8521175.129 ops/s
# Warmup Iteration   4: 6996843.211 ops/s
# Warmup Iteration   5: 8448818.629 ops/s
# Warmup Iteration   6: 8510553.252 ops/s
# Warmup Iteration   7: 8538101.112 ops/s
# Warmup Iteration   8: 8497433.667 ops/s
# Warmup Iteration   9: 8512474.263 ops/s
# Warmup Iteration  10: 8493852.673 ops/s
# Warmup Iteration  11: 8542916.028 ops/s
# Warmup Iteration  12: 8498472.274 ops/s
# Warmup Iteration  13: 8514332.073 ops/s
# Warmup Iteration  14: 8547049.603 ops/s
# Warmup Iteration  15: 8475932.494 ops/s
# Warmup Iteration  16: 8555050.978 ops/s
# Warmup Iteration  17: 8531471.403 ops/s
# Warmup Iteration  18: 8546926.205 ops/s
# Warmup Iteration  19: 8525986.372 ops/s
# Warmup Iteration  20: 8472518.766 ops/s
# Warmup Iteration  21: 8475047.741 ops/s
# Warmup Iteration  22: 8537250.019 ops/s
# Warmup Iteration  23: 8460988.433 ops/s
# Warmup Iteration  24: 8541282.122 ops/s
# Warmup Iteration  25: 8524566.871 ops/s
# Warmup Iteration  26: 8517462.190 ops/s
# Warmup Iteration  27: 8557472.074 ops/s
# Warmup Iteration  28: 8468539.118 ops/s
# Warmup Iteration  29: 8460250.136 ops/s
# Warmup Iteration  30: 8458917.588 ops/s
Iteration   1: 8528559.942 ops/s
Iteration   2: 8502943.734 ops/s
Iteration   3: 8524682.967 ops/s
Iteration   4: 8538254.664 ops/s
Iteration   5: 8526458.491 ops/s
Iteration   6: 8455272.677 ops/s
Iteration   7: 8545769.901 ops/s
Iteration   8: 8484617.926 ops/s
Iteration   9: 8547128.439 ops/s
Iteration  10: 8494512.604 ops/s
Iteration  11: 8546582.690 ops/s
Iteration  12: 8531878.002 ops/s
Iteration  13: 8489581.923 ops/s
Iteration  14: 8510890.567 ops/s
Iteration  15: 8543030.834 ops/s
Iteration  16: 8556050.648 ops/s
Iteration  17: 8523767.051 ops/s
Iteration  18: 8151519.535 ops/s
Iteration  19: 8525532.936 ops/s
Iteration  20: 8548710.748 ops/s
Iteration  21: 8429284.675 ops/s
Iteration  22: 8546745.466 ops/s
Iteration  23: 8533085.815 ops/s
Iteration  24: 8546958.560 ops/s
Iteration  25: 8534635.081 ops/s
Iteration  26: 8543784.502 ops/s
Iteration  27: 8522577.615 ops/s
Iteration  28: 8518643.109 ops/s
Iteration  29: 8519780.540 ops/s
Iteration  30: 8519483.175 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy":
  8509690.827 ±(99.9%) 49006.346 ops/s [Average]
  (min, avg, max) = (8151519.535, 8509690.827, 8556050.648), stdev = 73350.396
  CI (99.9%): [8460684.482, 8558697.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_minBy  thrpt   30  8509690.827 ± 49006.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4034411.942 ops/s
# Warmup Iteration   2: 8614232.546 ops/s
# Warmup Iteration   3: 8508003.586 ops/s
# Warmup Iteration   4: 7490925.969 ops/s
# Warmup Iteration   5: 8740012.590 ops/s
# Warmup Iteration   6: 8693070.254 ops/s
# Warmup Iteration   7: 8704682.990 ops/s
# Warmup Iteration   8: 8730818.763 ops/s
# Warmup Iteration   9: 8737649.754 ops/s
# Warmup Iteration  10: 8748312.183 ops/s
# Warmup Iteration  11: 8739101.873 ops/s
# Warmup Iteration  12: 8756110.571 ops/s
# Warmup Iteration  13: 8637702.856 ops/s
# Warmup Iteration  14: 8748175.610 ops/s
# Warmup Iteration  15: 8752936.524 ops/s
# Warmup Iteration  16: 8754884.218 ops/s
# Warmup Iteration  17: 8676317.042 ops/s
# Warmup Iteration  18: 8755334.034 ops/s
# Warmup Iteration  19: 8754194.871 ops/s
# Warmup Iteration  20: 8754727.879 ops/s
# Warmup Iteration  21: 8695569.218 ops/s
# Warmup Iteration  22: 8669848.539 ops/s
# Warmup Iteration  23: 8742194.818 ops/s
# Warmup Iteration  24: 8684372.322 ops/s
# Warmup Iteration  25: 8753112.887 ops/s
# Warmup Iteration  26: 8748295.773 ops/s
# Warmup Iteration  27: 8748745.962 ops/s
# Warmup Iteration  28: 8742030.617 ops/s
# Warmup Iteration  29: 8736661.912 ops/s
# Warmup Iteration  30: 8756357.982 ops/s
Iteration   1: 8736093.879 ops/s
Iteration   2: 8728657.712 ops/s
Iteration   3: 8742089.733 ops/s
Iteration   4: 8783821.112 ops/s
Iteration   5: 8737756.744 ops/s
Iteration   6: 8738117.370 ops/s
Iteration   7: 8761790.976 ops/s
Iteration   8: 8754656.408 ops/s
Iteration   9: 8747146.258 ops/s
Iteration  10: 8784712.504 ops/s
Iteration  11: 8741141.864 ops/s
Iteration  12: 8756587.864 ops/s
Iteration  13: 8740307.712 ops/s
Iteration  14: 8740582.521 ops/s
Iteration  15: 8743556.450 ops/s
Iteration  16: 8759313.190 ops/s
Iteration  17: 8741389.131 ops/s
Iteration  18: 8747966.821 ops/s
Iteration  19: 8732017.170 ops/s
Iteration  20: 8732230.373 ops/s
Iteration  21: 8632285.578 ops/s
Iteration  22: 8596342.297 ops/s
Iteration  23: 8605647.989 ops/s
Iteration  24: 8769434.055 ops/s
Iteration  25: 8735167.718 ops/s
Iteration  26: 8717523.267 ops/s
Iteration  27: 8747276.573 ops/s
Iteration  28: 8774490.899 ops/s
Iteration  29: 8734207.248 ops/s
Iteration  30: 8753297.226 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minByOptional":
  8733853.621 ±(99.9%) 29794.835 ops/s [Average]
  (min, avg, max) = (8596342.297, 8733853.621, 8784712.504), stdev = 44595.510
  CI (99.9%): [8704058.786, 8763648.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_minByOptional  thrpt   30  8733853.621 ± 29794.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7467380.329 ops/s
# Warmup Iteration   2: 15689282.582 ops/s
# Warmup Iteration   3: 13840353.069 ops/s
# Warmup Iteration   4: 15300786.454 ops/s
# Warmup Iteration   5: 15835293.551 ops/s
# Warmup Iteration   6: 15766882.987 ops/s
# Warmup Iteration   7: 15648447.051 ops/s
# Warmup Iteration   8: 15678492.937 ops/s
# Warmup Iteration   9: 15707318.529 ops/s
# Warmup Iteration  10: 15643998.678 ops/s
# Warmup Iteration  11: 15750259.434 ops/s
# Warmup Iteration  12: 15776350.255 ops/s
# Warmup Iteration  13: 15637696.960 ops/s
# Warmup Iteration  14: 15761920.237 ops/s
# Warmup Iteration  15: 15550586.297 ops/s
# Warmup Iteration  16: 15787528.791 ops/s
# Warmup Iteration  17: 15506549.701 ops/s
# Warmup Iteration  18: 15569761.921 ops/s
# Warmup Iteration  19: 15476629.196 ops/s
# Warmup Iteration  20: 15579119.902 ops/s
# Warmup Iteration  21: 15479955.275 ops/s
# Warmup Iteration  22: 15624846.547 ops/s
# Warmup Iteration  23: 15467408.691 ops/s
# Warmup Iteration  24: 15641385.524 ops/s
# Warmup Iteration  25: 15587687.052 ops/s
# Warmup Iteration  26: 15514611.126 ops/s
# Warmup Iteration  27: 15352768.547 ops/s
# Warmup Iteration  28: 15483227.512 ops/s
# Warmup Iteration  29: 15408169.962 ops/s
# Warmup Iteration  30: 15579096.983 ops/s
Iteration   1: 15637079.988 ops/s
Iteration   2: 15626919.165 ops/s
Iteration   3: 15373639.899 ops/s
Iteration   4: 15660620.479 ops/s
Iteration   5: 15666361.623 ops/s
Iteration   6: 15595917.035 ops/s
Iteration   7: 15628688.362 ops/s
Iteration   8: 15572995.730 ops/s
Iteration   9: 15379928.115 ops/s
Iteration  10: 15564774.190 ops/s
Iteration  11: 15568015.932 ops/s
Iteration  12: 15364079.092 ops/s
Iteration  13: 15594800.796 ops/s
Iteration  14: 15646567.333 ops/s
Iteration  15: 15532442.870 ops/s
Iteration  16: 15649670.572 ops/s
Iteration  17: 15613601.387 ops/s
Iteration  18: 15655430.073 ops/s
Iteration  19: 15587355.904 ops/s
Iteration  20: 15483269.403 ops/s
Iteration  21: 15548914.899 ops/s
Iteration  22: 15669839.337 ops/s
Iteration  23: 15561870.839 ops/s
Iteration  24: 15592983.251 ops/s
Iteration  25: 15485019.795 ops/s
Iteration  26: 15644699.446 ops/s
Iteration  27: 15356076.852 ops/s
Iteration  28: 15624429.018 ops/s
Iteration  29: 15308240.868 ops/s
Iteration  30: 15655714.251 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minBy_null_throws":
  15561664.883 ±(99.9%) 70625.221 ops/s [Average]
  (min, avg, max) = (15308240.868, 15561664.883, 15669839.337), stdev = 105708.514
  CI (99.9%): [15491039.663, 15632290.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  15561664.883 ± 70625.221  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1735104.196 ops/s
# Warmup Iteration   2: 3770058.463 ops/s
# Warmup Iteration   3: 3830847.330 ops/s
# Warmup Iteration   4: 3496132.355 ops/s
# Warmup Iteration   5: 3497646.584 ops/s
# Warmup Iteration   6: 3837673.215 ops/s
# Warmup Iteration   7: 3835479.210 ops/s
# Warmup Iteration   8: 3832574.490 ops/s
# Warmup Iteration   9: 3764042.228 ops/s
# Warmup Iteration  10: 3803328.371 ops/s
# Warmup Iteration  11: 3840313.839 ops/s
# Warmup Iteration  12: 3796762.235 ops/s
# Warmup Iteration  13: 3834032.727 ops/s
# Warmup Iteration  14: 3830741.912 ops/s
# Warmup Iteration  15: 3813614.804 ops/s
# Warmup Iteration  16: 3817844.438 ops/s
# Warmup Iteration  17: 3841866.200 ops/s
# Warmup Iteration  18: 3833578.966 ops/s
# Warmup Iteration  19: 3835030.458 ops/s
# Warmup Iteration  20: 3836377.942 ops/s
# Warmup Iteration  21: 3832942.414 ops/s
# Warmup Iteration  22: 3837725.004 ops/s
# Warmup Iteration  23: 3796889.232 ops/s
# Warmup Iteration  24: 3830751.171 ops/s
# Warmup Iteration  25: 3833183.005 ops/s
# Warmup Iteration  26: 3812119.311 ops/s
# Warmup Iteration  27: 3805025.128 ops/s
# Warmup Iteration  28: 3783217.304 ops/s
# Warmup Iteration  29: 3836940.616 ops/s
# Warmup Iteration  30: 3800570.189 ops/s
Iteration   1: 3843194.157 ops/s
Iteration   2: 3820246.785 ops/s
Iteration   3: 3824044.231 ops/s
Iteration   4: 3835059.668 ops/s
Iteration   5: 3786067.163 ops/s
Iteration   6: 3835896.628 ops/s
Iteration   7: 3833609.626 ops/s
Iteration   8: 3835000.046 ops/s
Iteration   9: 3842494.229 ops/s
Iteration  10: 3839643.733 ops/s
Iteration  11: 3832039.778 ops/s
Iteration  12: 3823945.541 ops/s
Iteration  13: 3821623.631 ops/s
Iteration  14: 3829563.640 ops/s
Iteration  15: 3801734.158 ops/s
Iteration  16: 3783393.028 ops/s
Iteration  17: 3841449.634 ops/s
Iteration  18: 3814457.480 ops/s
Iteration  19: 3841783.577 ops/s
Iteration  20: 3833617.653 ops/s
Iteration  21: 3779678.550 ops/s
Iteration  22: 3838100.214 ops/s
Iteration  23: 3830869.466 ops/s
Iteration  24: 3840975.834 ops/s
Iteration  25: 3845502.508 ops/s
Iteration  26: 3838652.851 ops/s
Iteration  27: 3838673.130 ops/s
Iteration  28: 3831584.133 ops/s
Iteration  29: 3846642.948 ops/s
Iteration  30: 3780179.724 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_minOptional":
  3826324.125 ±(99.9%) 13393.859 ops/s [Average]
  (min, avg, max) = (3779678.550, 3826324.125, 3846642.948), stdev = 20047.299
  CI (99.9%): [3812930.266, 3839717.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_minOptional  thrpt   30  3826324.125 ± 13393.859  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696584.673 ops/s
# Warmup Iteration   2: 723760.595 ops/s
# Warmup Iteration   3: 879682.154 ops/s
# Warmup Iteration   4: 914557.374 ops/s
# Warmup Iteration   5: 918905.247 ops/s
# Warmup Iteration   6: 917139.552 ops/s
# Warmup Iteration   7: 925375.902 ops/s
# Warmup Iteration   8: 917085.437 ops/s
# Warmup Iteration   9: 922119.647 ops/s
# Warmup Iteration  10: 924118.602 ops/s
# Warmup Iteration  11: 920309.858 ops/s
# Warmup Iteration  12: 919888.404 ops/s
# Warmup Iteration  13: 851817.779 ops/s
# Warmup Iteration  14: 849260.784 ops/s
# Warmup Iteration  15: 926681.433 ops/s
# Warmup Iteration  16: 917682.034 ops/s
# Warmup Iteration  17: 976487.068 ops/s
# Warmup Iteration  18: 968352.488 ops/s
# Warmup Iteration  19: 975341.326 ops/s
# Warmup Iteration  20: 975694.457 ops/s
# Warmup Iteration  21: 971972.297 ops/s
# Warmup Iteration  22: 974345.959 ops/s
# Warmup Iteration  23: 965589.843 ops/s
# Warmup Iteration  24: 968385.473 ops/s
# Warmup Iteration  25: 964256.131 ops/s
# Warmup Iteration  26: 973764.260 ops/s
# Warmup Iteration  27: 963069.654 ops/s
# Warmup Iteration  28: 977040.711 ops/s
# Warmup Iteration  29: 974954.637 ops/s
# Warmup Iteration  30: 967440.416 ops/s
Iteration   1: 977179.076 ops/s
Iteration   2: 978286.422 ops/s
Iteration   3: 973517.546 ops/s
Iteration   4: 977451.423 ops/s
Iteration   5: 973330.324 ops/s
Iteration   6: 975665.177 ops/s
Iteration   7: 973659.470 ops/s
Iteration   8: 976906.282 ops/s
Iteration   9: 971769.314 ops/s
Iteration  10: 976065.262 ops/s
Iteration  11: 975864.738 ops/s
Iteration  12: 967647.983 ops/s
Iteration  13: 969878.841 ops/s
Iteration  14: 958658.518 ops/s
Iteration  15: 976182.887 ops/s
Iteration  16: 958867.677 ops/s
Iteration  17: 972628.499 ops/s
Iteration  18: 975807.324 ops/s
Iteration  19: 972523.523 ops/s
Iteration  20: 974710.285 ops/s
Iteration  21: 963671.538 ops/s
Iteration  22: 973661.544 ops/s
Iteration  23: 970526.653 ops/s
Iteration  24: 964097.766 ops/s
Iteration  25: 957556.512 ops/s
Iteration  26: 973573.133 ops/s
Iteration  27: 978221.936 ops/s
Iteration  28: 975468.006 ops/s
Iteration  29: 974243.180 ops/s
Iteration  30: 967745.908 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_empty_throws":
  971845.558 ±(99.9%) 3936.589 ops/s [Average]
  (min, avg, max) = (957556.512, 971845.558, 978286.422), stdev = 5892.102
  CI (99.9%): [967908.969, 975782.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_min_empty_throws  thrpt   30  971845.558 ± 3936.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3197384.216 ops/s
# Warmup Iteration   2: 6030919.049 ops/s
# Warmup Iteration   3: 6323794.844 ops/s
# Warmup Iteration   4: 6372890.634 ops/s
# Warmup Iteration   5: 5332606.920 ops/s
# Warmup Iteration   6: 6373310.421 ops/s
# Warmup Iteration   7: 6371782.022 ops/s
# Warmup Iteration   8: 6375322.360 ops/s
# Warmup Iteration   9: 6382302.898 ops/s
# Warmup Iteration  10: 6365677.101 ops/s
# Warmup Iteration  11: 6328018.947 ops/s
# Warmup Iteration  12: 6328477.225 ops/s
# Warmup Iteration  13: 6311250.260 ops/s
# Warmup Iteration  14: 6346035.059 ops/s
# Warmup Iteration  15: 6370687.460 ops/s
# Warmup Iteration  16: 6314520.164 ops/s
# Warmup Iteration  17: 6372948.139 ops/s
# Warmup Iteration  18: 6375989.362 ops/s
# Warmup Iteration  19: 6369541.973 ops/s
# Warmup Iteration  20: 6322809.599 ops/s
# Warmup Iteration  21: 6319400.839 ops/s
# Warmup Iteration  22: 6362321.434 ops/s
# Warmup Iteration  23: 6369768.998 ops/s
# Warmup Iteration  24: 6351390.257 ops/s
# Warmup Iteration  25: 6309725.139 ops/s
# Warmup Iteration  26: 6356585.798 ops/s
# Warmup Iteration  27: 6348443.177 ops/s
# Warmup Iteration  28: 6373074.613 ops/s
# Warmup Iteration  29: 6324608.825 ops/s
# Warmup Iteration  30: 6319172.030 ops/s
Iteration   1: 6374912.578 ops/s
Iteration   2: 6334271.020 ops/s
Iteration   3: 6291260.299 ops/s
Iteration   4: 6383378.508 ops/s
Iteration   5: 6377504.463 ops/s
Iteration   6: 6383525.317 ops/s
Iteration   7: 6356477.330 ops/s
Iteration   8: 6369437.183 ops/s
Iteration   9: 6355738.024 ops/s
Iteration  10: 6387605.531 ops/s
Iteration  11: 6387119.266 ops/s
Iteration  12: 6382485.507 ops/s
Iteration  13: 6397420.646 ops/s
Iteration  14: 6348804.911 ops/s
Iteration  15: 6249368.324 ops/s
Iteration  16: 6335778.738 ops/s
Iteration  17: 6357856.304 ops/s
Iteration  18: 6373988.608 ops/s
Iteration  19: 6367690.900 ops/s
Iteration  20: 6278803.139 ops/s
Iteration  21: 6371002.729 ops/s
Iteration  22: 6350869.522 ops/s
Iteration  23: 6384474.344 ops/s
Iteration  24: 6379951.319 ops/s
Iteration  25: 6274816.151 ops/s
Iteration  26: 6378209.964 ops/s
Iteration  27: 6265473.414 ops/s
Iteration  28: 6332726.213 ops/s
Iteration  29: 6378386.881 ops/s
Iteration  30: 6357938.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_safe":
  6352242.508 ±(99.9%) 26996.186 ops/s [Average]
  (min, avg, max) = (6249368.324, 6352242.508, 6397420.646), stdev = 40406.624
  CI (99.9%): [6325246.322, 6379238.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_min_null_safe  thrpt   30  6352242.508 ± 26996.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2927273.175 ops/s
# Warmup Iteration   2: 4516444.954 ops/s
# Warmup Iteration   3: 5081071.614 ops/s
# Warmup Iteration   4: 5114635.178 ops/s
# Warmup Iteration   5: 5091472.852 ops/s
# Warmup Iteration   6: 5134854.925 ops/s
# Warmup Iteration   7: 4242530.986 ops/s
# Warmup Iteration   8: 5121134.442 ops/s
# Warmup Iteration   9: 5133215.650 ops/s
# Warmup Iteration  10: 5096894.698 ops/s
# Warmup Iteration  11: 5138715.470 ops/s
# Warmup Iteration  12: 5100675.321 ops/s
# Warmup Iteration  13: 5144343.912 ops/s
# Warmup Iteration  14: 5134907.239 ops/s
# Warmup Iteration  15: 5111613.793 ops/s
# Warmup Iteration  16: 5133277.875 ops/s
# Warmup Iteration  17: 5134091.039 ops/s
# Warmup Iteration  18: 5119841.010 ops/s
# Warmup Iteration  19: 5127400.145 ops/s
# Warmup Iteration  20: 5127340.915 ops/s
# Warmup Iteration  21: 5084694.535 ops/s
# Warmup Iteration  22: 5126395.495 ops/s
# Warmup Iteration  23: 5121436.671 ops/s
# Warmup Iteration  24: 5105390.841 ops/s
# Warmup Iteration  25: 5126131.813 ops/s
# Warmup Iteration  26: 5127499.924 ops/s
# Warmup Iteration  27: 5116555.956 ops/s
# Warmup Iteration  28: 5124642.510 ops/s
# Warmup Iteration  29: 5127465.367 ops/s
# Warmup Iteration  30: 5124212.784 ops/s
Iteration   1: 5125650.641 ops/s
Iteration   2: 5126760.002 ops/s
Iteration   3: 5136870.468 ops/s
Iteration   4: 5096797.048 ops/s
Iteration   5: 5141101.715 ops/s
Iteration   6: 5117566.946 ops/s
Iteration   7: 5106420.953 ops/s
Iteration   8: 5121171.940 ops/s
Iteration   9: 5125166.045 ops/s
Iteration  10: 5117493.937 ops/s
Iteration  11: 5136179.594 ops/s
Iteration  12: 5132415.456 ops/s
Iteration  13: 5122989.029 ops/s
Iteration  14: 5118117.547 ops/s
Iteration  15: 5124908.884 ops/s
Iteration  16: 5110350.300 ops/s
Iteration  17: 5074226.201 ops/s
Iteration  18: 5140435.599 ops/s
Iteration  19: 5111342.209 ops/s
Iteration  20: 5128355.680 ops/s
Iteration  21: 5129415.845 ops/s
Iteration  22: 5101573.479 ops/s
Iteration  23: 5117530.746 ops/s
Iteration  24: 5134313.695 ops/s
Iteration  25: 5119692.117 ops/s
Iteration  26: 5111909.447 ops/s
Iteration  27: 4967792.785 ops/s
Iteration  28: 5123609.242 ops/s
Iteration  29: 5134693.641 ops/s
Iteration  30: 5143307.610 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws":
  5116605.293 ±(99.9%) 21153.800 ops/s [Average]
  (min, avg, max) = (4967792.785, 5116605.293, 5143307.610), stdev = 31662.014
  CI (99.9%): [5095451.494, 5137759.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_min_null_throws  thrpt   30  5116605.293 ± 21153.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543961.023 ops/s
# Warmup Iteration   2: 569411.155 ops/s
# Warmup Iteration   3: 663667.819 ops/s
# Warmup Iteration   4: 725487.122 ops/s
# Warmup Iteration   5: 727664.770 ops/s
# Warmup Iteration   6: 726915.642 ops/s
# Warmup Iteration   7: 727148.291 ops/s
# Warmup Iteration   8: 727446.739 ops/s
# Warmup Iteration   9: 727385.869 ops/s
# Warmup Iteration  10: 727973.506 ops/s
# Warmup Iteration  11: 729118.526 ops/s
# Warmup Iteration  12: 727134.445 ops/s
# Warmup Iteration  13: 723284.841 ops/s
# Warmup Iteration  14: 659097.377 ops/s
# Warmup Iteration  15: 674981.100 ops/s
# Warmup Iteration  16: 731009.055 ops/s
# Warmup Iteration  17: 754275.608 ops/s
# Warmup Iteration  18: 754940.626 ops/s
# Warmup Iteration  19: 759183.912 ops/s
# Warmup Iteration  20: 756201.296 ops/s
# Warmup Iteration  21: 758550.767 ops/s
# Warmup Iteration  22: 759604.434 ops/s
# Warmup Iteration  23: 759298.208 ops/s
# Warmup Iteration  24: 758878.297 ops/s
# Warmup Iteration  25: 759341.551 ops/s
# Warmup Iteration  26: 761584.685 ops/s
# Warmup Iteration  27: 753514.092 ops/s
# Warmup Iteration  28: 760846.643 ops/s
# Warmup Iteration  29: 758002.792 ops/s
# Warmup Iteration  30: 758915.063 ops/s
Iteration   1: 761774.700 ops/s
Iteration   2: 760171.142 ops/s
Iteration   3: 750387.434 ops/s
Iteration   4: 761316.132 ops/s
Iteration   5: 757107.277 ops/s
Iteration   6: 755359.073 ops/s
Iteration   7: 759569.501 ops/s
Iteration   8: 754815.609 ops/s
Iteration   9: 760462.305 ops/s
Iteration  10: 758731.286 ops/s
Iteration  11: 760603.622 ops/s
Iteration  12: 759524.473 ops/s
Iteration  13: 761432.771 ops/s
Iteration  14: 759168.374 ops/s
Iteration  15: 758427.806 ops/s
Iteration  16: 758525.987 ops/s
Iteration  17: 755175.804 ops/s
Iteration  18: 759102.505 ops/s
Iteration  19: 753798.253 ops/s
Iteration  20: 760336.278 ops/s
Iteration  21: 759596.712 ops/s
Iteration  22: 758921.986 ops/s
Iteration  23: 761234.617 ops/s
Iteration  24: 762132.979 ops/s
Iteration  25: 763182.321 ops/s
Iteration  26: 757866.911 ops/s
Iteration  27: 756634.301 ops/s
Iteration  28: 758306.098 ops/s
Iteration  29: 760459.870 ops/s
Iteration  30: 761224.479 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator":
  758845.020 ±(99.9%) 1859.750 ops/s [Average]
  (min, avg, max) = (750387.434, 758845.020, 763182.321), stdev = 2783.586
  CI (99.9%): [756985.270, 760704.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  758845.020 ± 1859.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4563915.878 ops/s
# Warmup Iteration   2: 9381074.880 ops/s
# Warmup Iteration   3: 9626056.101 ops/s
# Warmup Iteration   4: 9757342.412 ops/s
# Warmup Iteration   5: 8148945.269 ops/s
# Warmup Iteration   6: 9677554.063 ops/s
# Warmup Iteration   7: 9768552.174 ops/s
# Warmup Iteration   8: 9746923.609 ops/s
# Warmup Iteration   9: 9666650.117 ops/s
# Warmup Iteration  10: 9761015.428 ops/s
# Warmup Iteration  11: 9659031.752 ops/s
# Warmup Iteration  12: 9745966.954 ops/s
# Warmup Iteration  13: 9760723.330 ops/s
# Warmup Iteration  14: 9575941.538 ops/s
# Warmup Iteration  15: 9728304.831 ops/s
# Warmup Iteration  16: 9730289.244 ops/s
# Warmup Iteration  17: 9706756.395 ops/s
# Warmup Iteration  18: 9744058.280 ops/s
# Warmup Iteration  19: 9661615.610 ops/s
# Warmup Iteration  20: 9742184.715 ops/s
# Warmup Iteration  21: 9709690.533 ops/s
# Warmup Iteration  22: 9674060.266 ops/s
# Warmup Iteration  23: 9669806.050 ops/s
# Warmup Iteration  24: 9770422.694 ops/s
# Warmup Iteration  25: 9740835.907 ops/s
# Warmup Iteration  26: 9756293.982 ops/s
# Warmup Iteration  27: 9644458.257 ops/s
# Warmup Iteration  28: 9749848.025 ops/s
# Warmup Iteration  29: 9731833.329 ops/s
# Warmup Iteration  30: 9757049.229 ops/s
Iteration   1: 9732625.913 ops/s
Iteration   2: 9721713.867 ops/s
Iteration   3: 9778635.364 ops/s
Iteration   4: 9717697.460 ops/s
Iteration   5: 9750092.805 ops/s
Iteration   6: 9719397.761 ops/s
Iteration   7: 9726291.920 ops/s
Iteration   8: 9617464.632 ops/s
Iteration   9: 9738676.793 ops/s
Iteration  10: 9679125.658 ops/s
Iteration  11: 9718057.748 ops/s
Iteration  12: 9743756.067 ops/s
Iteration  13: 9738466.379 ops/s
Iteration  14: 9773121.404 ops/s
Iteration  15: 9737865.746 ops/s
Iteration  16: 9744969.105 ops/s
Iteration  17: 9560744.006 ops/s
Iteration  18: 9765396.781 ops/s
Iteration  19: 9749606.884 ops/s
Iteration  20: 9734385.625 ops/s
Iteration  21: 9752460.490 ops/s
Iteration  22: 9775474.148 ops/s
Iteration  23: 9562128.722 ops/s
Iteration  24: 9702055.971 ops/s
Iteration  25: 9758252.309 ops/s
Iteration  26: 9536144.059 ops/s
Iteration  27: 9734263.217 ops/s
Iteration  28: 9693801.410 ops/s
Iteration  29: 9751120.519 ops/s
Iteration  30: 9743955.908 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_min_without_comparator":
  9715258.289 ±(99.9%) 42376.140 ops/s [Average]
  (min, avg, max) = (9536144.059, 9715258.289, 9778635.364), stdev = 63426.616
  CI (99.9%): [9672882.149, 9757634.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_min_without_comparator  thrpt   30  9715258.289 ± 42376.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7271815.611 ops/s
# Warmup Iteration   2: 12587434.234 ops/s
# Warmup Iteration   3: 13473217.251 ops/s
# Warmup Iteration   4: 13551863.792 ops/s
# Warmup Iteration   5: 12501524.500 ops/s
# Warmup Iteration   6: 12295082.924 ops/s
# Warmup Iteration   7: 13512533.666 ops/s
# Warmup Iteration   8: 13529332.332 ops/s
# Warmup Iteration   9: 13526613.359 ops/s
# Warmup Iteration  10: 13557894.022 ops/s
# Warmup Iteration  11: 13545534.732 ops/s
# Warmup Iteration  12: 13551748.913 ops/s
# Warmup Iteration  13: 13570118.208 ops/s
# Warmup Iteration  14: 13566443.190 ops/s
# Warmup Iteration  15: 13553710.078 ops/s
# Warmup Iteration  16: 13491784.015 ops/s
# Warmup Iteration  17: 13532250.310 ops/s
# Warmup Iteration  18: 13474537.470 ops/s
# Warmup Iteration  19: 13437334.584 ops/s
# Warmup Iteration  20: 13550517.756 ops/s
# Warmup Iteration  21: 13049947.013 ops/s
# Warmup Iteration  22: 13502543.088 ops/s
# Warmup Iteration  23: 13545582.871 ops/s
# Warmup Iteration  24: 13435859.948 ops/s
# Warmup Iteration  25: 13549282.855 ops/s
# Warmup Iteration  26: 13438228.274 ops/s
# Warmup Iteration  27: 13516380.053 ops/s
# Warmup Iteration  28: 13543931.721 ops/s
# Warmup Iteration  29: 13373183.048 ops/s
# Warmup Iteration  30: 13564947.949 ops/s
Iteration   1: 13537671.623 ops/s
Iteration   2: 13488086.902 ops/s
Iteration   3: 13546823.263 ops/s
Iteration   4: 13300756.827 ops/s
Iteration   5: 13547949.524 ops/s
Iteration   6: 13276029.207 ops/s
Iteration   7: 13519510.624 ops/s
Iteration   8: 13557704.784 ops/s
Iteration   9: 13398718.310 ops/s
Iteration  10: 13506188.184 ops/s
Iteration  11: 13572617.560 ops/s
Iteration  12: 13573585.979 ops/s
Iteration  13: 13590157.974 ops/s
Iteration  14: 13543403.047 ops/s
Iteration  15: 13374667.768 ops/s
Iteration  16: 13594699.053 ops/s
Iteration  17: 13532403.019 ops/s
Iteration  18: 13555403.421 ops/s
Iteration  19: 13559819.782 ops/s
Iteration  20: 13508568.741 ops/s
Iteration  21: 13509792.549 ops/s
Iteration  22: 13222980.190 ops/s
Iteration  23: 13607903.353 ops/s
Iteration  24: 13538460.271 ops/s
Iteration  25: 13549791.209 ops/s
Iteration  26: 13547305.279 ops/s
Iteration  27: 13553308.311 ops/s
Iteration  28: 13570079.906 ops/s
Iteration  29: 13555197.105 ops/s
Iteration  30: 13546650.430 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newEmpty":
  13509541.140 ±(99.9%) 64225.675 ops/s [Average]
  (min, avg, max) = (13222980.190, 13509541.140, 13607903.353), stdev = 96129.974
  CI (99.9%): [13445315.465, 13573766.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_newEmpty  thrpt   30  13509541.140 ± 64225.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4660022.961 ops/s
# Warmup Iteration   2: 9525954.866 ops/s
# Warmup Iteration   3: 8216710.206 ops/s
# Warmup Iteration   4: 9694039.394 ops/s
# Warmup Iteration   5: 9690021.804 ops/s
# Warmup Iteration   6: 9705831.028 ops/s
# Warmup Iteration   7: 9723598.194 ops/s
# Warmup Iteration   8: 9675871.490 ops/s
# Warmup Iteration   9: 9706857.874 ops/s
# Warmup Iteration  10: 9706351.487 ops/s
# Warmup Iteration  11: 9693168.131 ops/s
# Warmup Iteration  12: 9671238.803 ops/s
# Warmup Iteration  13: 9575066.670 ops/s
# Warmup Iteration  14: 9673016.460 ops/s
# Warmup Iteration  15: 9670136.179 ops/s
# Warmup Iteration  16: 9631248.610 ops/s
# Warmup Iteration  17: 9602999.158 ops/s
# Warmup Iteration  18: 9715964.392 ops/s
# Warmup Iteration  19: 9696985.316 ops/s
# Warmup Iteration  20: 9661978.275 ops/s
# Warmup Iteration  21: 9700162.641 ops/s
# Warmup Iteration  22: 9731685.740 ops/s
# Warmup Iteration  23: 9688984.050 ops/s
# Warmup Iteration  24: 9628146.309 ops/s
# Warmup Iteration  25: 9622789.784 ops/s
# Warmup Iteration  26: 9737942.845 ops/s
# Warmup Iteration  27: 9715207.615 ops/s
# Warmup Iteration  28: 9640006.464 ops/s
# Warmup Iteration  29: 9732481.769 ops/s
# Warmup Iteration  30: 9737997.028 ops/s
Iteration   1: 9774045.747 ops/s
Iteration   2: 9674697.015 ops/s
Iteration   3: 9708468.497 ops/s
Iteration   4: 9713376.423 ops/s
Iteration   5: 9703584.079 ops/s
Iteration   6: 9701140.477 ops/s
Iteration   7: 9745774.779 ops/s
Iteration   8: 9763001.358 ops/s
Iteration   9: 9744658.596 ops/s
Iteration  10: 9691543.754 ops/s
Iteration  11: 9692705.853 ops/s
Iteration  12: 9716561.801 ops/s
Iteration  13: 9708387.652 ops/s
Iteration  14: 9601100.254 ops/s
Iteration  15: 9392543.388 ops/s
Iteration  16: 9589979.782 ops/s
Iteration  17: 9530091.949 ops/s
Iteration  18: 9694067.931 ops/s
Iteration  19: 9712330.060 ops/s
Iteration  20: 9737341.139 ops/s
Iteration  21: 9587226.828 ops/s
Iteration  22: 9722315.861 ops/s
Iteration  23: 9742839.084 ops/s
Iteration  24: 9663470.832 ops/s
Iteration  25: 9719986.771 ops/s
Iteration  26: 9685582.319 ops/s
Iteration  27: 9692814.933 ops/s
Iteration  28: 9711564.001 ops/s
Iteration  29: 9634507.655 ops/s
Iteration  30: 9757395.939 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_newListWithSize":
  9683770.159 ±(99.9%) 52437.420 ops/s [Average]
  (min, avg, max) = (9392543.388, 9683770.159, 9774045.747), stdev = 78485.868
  CI (99.9%): [9631332.739, 9736207.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_newListWithSize  thrpt   30  9683770.159 ± 52437.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1986624.328 ops/s
# Warmup Iteration   2: 4316053.117 ops/s
# Warmup Iteration   3: 4391325.670 ops/s
# Warmup Iteration   4: 3972825.576 ops/s
# Warmup Iteration   5: 4057015.674 ops/s
# Warmup Iteration   6: 4405035.590 ops/s
# Warmup Iteration   7: 4392801.062 ops/s
# Warmup Iteration   8: 4397718.336 ops/s
# Warmup Iteration   9: 4398785.720 ops/s
# Warmup Iteration  10: 4401175.084 ops/s
# Warmup Iteration  11: 4391394.682 ops/s
# Warmup Iteration  12: 4411930.169 ops/s
# Warmup Iteration  13: 4407574.598 ops/s
# Warmup Iteration  14: 4372595.215 ops/s
# Warmup Iteration  15: 4407541.700 ops/s
# Warmup Iteration  16: 4391289.060 ops/s
# Warmup Iteration  17: 4404752.536 ops/s
# Warmup Iteration  18: 4405895.648 ops/s
# Warmup Iteration  19: 4373299.101 ops/s
# Warmup Iteration  20: 4396614.913 ops/s
# Warmup Iteration  21: 4400783.131 ops/s
# Warmup Iteration  22: 4405049.952 ops/s
# Warmup Iteration  23: 4402800.599 ops/s
# Warmup Iteration  24: 4398879.190 ops/s
# Warmup Iteration  25: 4395452.555 ops/s
# Warmup Iteration  26: 4394245.047 ops/s
# Warmup Iteration  27: 4368145.110 ops/s
# Warmup Iteration  28: 4366222.181 ops/s
# Warmup Iteration  29: 4401988.325 ops/s
# Warmup Iteration  30: 4398358.579 ops/s
Iteration   1: 4399190.862 ops/s
Iteration   2: 4412834.458 ops/s
Iteration   3: 4407489.683 ops/s
Iteration   4: 4264817.406 ops/s
Iteration   5: 4407557.797 ops/s
Iteration   6: 4406191.513 ops/s
Iteration   7: 4391091.150 ops/s
Iteration   8: 4381020.439 ops/s
Iteration   9: 4271447.710 ops/s
Iteration  10: 4400898.289 ops/s
Iteration  11: 4402334.460 ops/s
Iteration  12: 4412092.743 ops/s
Iteration  13: 4386980.904 ops/s
Iteration  14: 4404684.013 ops/s
Iteration  15: 4409485.003 ops/s
Iteration  16: 4408412.251 ops/s
Iteration  17: 4409356.987 ops/s
Iteration  18: 4410679.688 ops/s
Iteration  19: 4406861.241 ops/s
Iteration  20: 4408449.522 ops/s
Iteration  21: 4374530.732 ops/s
Iteration  22: 4407942.757 ops/s
Iteration  23: 4405229.575 ops/s
Iteration  24: 4327159.616 ops/s
Iteration  25: 4386046.738 ops/s
Iteration  26: 4403741.989 ops/s
Iteration  27: 4396833.724 ops/s
Iteration  28: 4410427.813 ops/s
Iteration  29: 4410907.682 ops/s
Iteration  30: 4399987.159 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfy":
  4390822.797 ±(99.9%) 24920.154 ops/s [Average]
  (min, avg, max) = (4264817.406, 4390822.797, 4412834.458), stdev = 37299.317
  CI (99.9%): [4365902.642, 4415742.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_noneSatisfy  thrpt   30  4390822.797 ± 24920.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2277603.581 ops/s
# Warmup Iteration   2: 3967549.942 ops/s
# Warmup Iteration   3: 4400652.553 ops/s
# Warmup Iteration   4: 4414979.524 ops/s
# Warmup Iteration   5: 4343874.508 ops/s
# Warmup Iteration   6: 3756991.867 ops/s
# Warmup Iteration   7: 4420663.719 ops/s
# Warmup Iteration   8: 4410281.259 ops/s
# Warmup Iteration   9: 4429472.345 ops/s
# Warmup Iteration  10: 4423897.173 ops/s
# Warmup Iteration  11: 4419707.683 ops/s
# Warmup Iteration  12: 4399736.920 ops/s
# Warmup Iteration  13: 4413037.864 ops/s
# Warmup Iteration  14: 4396842.610 ops/s
# Warmup Iteration  15: 4378471.066 ops/s
# Warmup Iteration  16: 4423477.227 ops/s
# Warmup Iteration  17: 4383380.996 ops/s
# Warmup Iteration  18: 4416025.671 ops/s
# Warmup Iteration  19: 4424777.874 ops/s
# Warmup Iteration  20: 4423415.455 ops/s
# Warmup Iteration  21: 4428888.726 ops/s
# Warmup Iteration  22: 4352450.124 ops/s
# Warmup Iteration  23: 4386554.911 ops/s
# Warmup Iteration  24: 4422455.501 ops/s
# Warmup Iteration  25: 4425277.389 ops/s
# Warmup Iteration  26: 4415196.127 ops/s
# Warmup Iteration  27: 4424082.438 ops/s
# Warmup Iteration  28: 4422618.220 ops/s
# Warmup Iteration  29: 4391974.667 ops/s
# Warmup Iteration  30: 4355720.842 ops/s
Iteration   1: 4438267.347 ops/s
Iteration   2: 4414073.909 ops/s
Iteration   3: 4427558.224 ops/s
Iteration   4: 4392965.330 ops/s
Iteration   5: 4425290.583 ops/s
Iteration   6: 4424433.280 ops/s
Iteration   7: 4430812.265 ops/s
Iteration   8: 4430405.347 ops/s
Iteration   9: 4434881.050 ops/s
Iteration  10: 4411834.102 ops/s
Iteration  11: 4428246.819 ops/s
Iteration  12: 4398126.762 ops/s
Iteration  13: 4434629.324 ops/s
Iteration  14: 4426806.297 ops/s
Iteration  15: 4415219.331 ops/s
Iteration  16: 4434692.225 ops/s
Iteration  17: 4433241.312 ops/s
Iteration  18: 4410436.543 ops/s
Iteration  19: 4417188.063 ops/s
Iteration  20: 4405270.490 ops/s
Iteration  21: 4434345.534 ops/s
Iteration  22: 4408784.769 ops/s
Iteration  23: 4441214.048 ops/s
Iteration  24: 4414602.994 ops/s
Iteration  25: 4415525.279 ops/s
Iteration  26: 4429683.292 ops/s
Iteration  27: 4429737.186 ops/s
Iteration  28: 4422832.577 ops/s
Iteration  29: 4423996.428 ops/s
Iteration  30: 4332888.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_noneSatisfyWith":
  4419599.641 ±(99.9%) 13523.625 ops/s [Average]
  (min, avg, max) = (4332888.533, 4419599.641, 4441214.048), stdev = 20241.527
  CI (99.9%): [4406076.016, 4433123.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  4419599.641 ± 13523.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5037290.851 ops/s
# Warmup Iteration   2: 9808765.271 ops/s
# Warmup Iteration   3: 8749235.554 ops/s
# Warmup Iteration   4: 10044732.061 ops/s
# Warmup Iteration   5: 10117023.365 ops/s
# Warmup Iteration   6: 10076857.689 ops/s
# Warmup Iteration   7: 9977537.344 ops/s
# Warmup Iteration   8: 10042762.839 ops/s
# Warmup Iteration   9: 10092756.316 ops/s
# Warmup Iteration  10: 10081119.975 ops/s
# Warmup Iteration  11: 10101401.789 ops/s
# Warmup Iteration  12: 10106967.307 ops/s
# Warmup Iteration  13: 10113040.181 ops/s
# Warmup Iteration  14: 10095750.440 ops/s
# Warmup Iteration  15: 10118557.017 ops/s
# Warmup Iteration  16: 10058087.997 ops/s
# Warmup Iteration  17: 10119094.019 ops/s
# Warmup Iteration  18: 9957892.275 ops/s
# Warmup Iteration  19: 10145376.023 ops/s
# Warmup Iteration  20: 10066265.963 ops/s
# Warmup Iteration  21: 10136669.771 ops/s
# Warmup Iteration  22: 10088199.209 ops/s
# Warmup Iteration  23: 10125721.812 ops/s
# Warmup Iteration  24: 10064972.001 ops/s
# Warmup Iteration  25: 10138276.669 ops/s
# Warmup Iteration  26: 10138566.537 ops/s
# Warmup Iteration  27: 10080298.376 ops/s
# Warmup Iteration  28: 10155587.880 ops/s
# Warmup Iteration  29: 10084954.818 ops/s
# Warmup Iteration  30: 10120706.795 ops/s
Iteration   1: 10101781.123 ops/s
Iteration   2: 10110036.401 ops/s
Iteration   3: 10140285.449 ops/s
Iteration   4: 10090838.092 ops/s
Iteration   5: 10091119.116 ops/s
Iteration   6: 9758992.474 ops/s
Iteration   7: 10137203.446 ops/s
Iteration   8: 10133710.342 ops/s
Iteration   9: 10060688.987 ops/s
Iteration  10: 10109202.328 ops/s
Iteration  11: 10146648.545 ops/s
Iteration  12: 10112435.060 ops/s
Iteration  13: 9962747.516 ops/s
Iteration  14: 9954443.558 ops/s
Iteration  15: 10037538.675 ops/s
Iteration  16: 9948757.607 ops/s
Iteration  17: 10154609.526 ops/s
Iteration  18: 9808249.432 ops/s
Iteration  19: 10141206.111 ops/s
Iteration  20: 10120097.155 ops/s
Iteration  21: 9966530.200 ops/s
Iteration  22: 10084780.703 ops/s
Iteration  23: 10122997.037 ops/s
Iteration  24: 9968142.758 ops/s
Iteration  25: 10126818.747 ops/s
Iteration  26: 10119957.534 ops/s
Iteration  27: 10121508.970 ops/s
Iteration  28: 10147712.204 ops/s
Iteration  29: 10136794.281 ops/s
Iteration  30: 10114053.834 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_notEmpty":
  10067662.907 ±(99.9%) 67002.050 ops/s [Average]
  (min, avg, max) = (9758992.474, 10067662.907, 10154609.526), stdev = 100285.521
  CI (99.9%): [10000660.857, 10134664.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_notEmpty  thrpt   30  10067662.907 ± 67002.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 838128.090 ops/s
# Warmup Iteration   2: 864618.628 ops/s
# Warmup Iteration   3: 1003265.221 ops/s
# Warmup Iteration   4: 1082489.684 ops/s
# Warmup Iteration   5: 1082328.404 ops/s
# Warmup Iteration   6: 1080825.993 ops/s
# Warmup Iteration   7: 1084458.916 ops/s
# Warmup Iteration   8: 1079174.608 ops/s
# Warmup Iteration   9: 1082661.503 ops/s
# Warmup Iteration  10: 1081558.341 ops/s
# Warmup Iteration  11: 1082136.476 ops/s
# Warmup Iteration  12: 1081844.738 ops/s
# Warmup Iteration  13: 1083938.368 ops/s
# Warmup Iteration  14: 916403.140 ops/s
# Warmup Iteration  15: 1068256.558 ops/s
# Warmup Iteration  16: 1084618.464 ops/s
# Warmup Iteration  17: 1146433.176 ops/s
# Warmup Iteration  18: 1151451.404 ops/s
# Warmup Iteration  19: 1143983.041 ops/s
# Warmup Iteration  20: 1136742.365 ops/s
# Warmup Iteration  21: 1146817.697 ops/s
# Warmup Iteration  22: 1147935.269 ops/s
# Warmup Iteration  23: 1151577.941 ops/s
# Warmup Iteration  24: 1145959.871 ops/s
# Warmup Iteration  25: 1148942.012 ops/s
# Warmup Iteration  26: 1137986.907 ops/s
# Warmup Iteration  27: 1146206.676 ops/s
# Warmup Iteration  28: 1147184.670 ops/s
# Warmup Iteration  29: 1146439.152 ops/s
# Warmup Iteration  30: 1150169.764 ops/s
Iteration   1: 1145662.826 ops/s
Iteration   2: 1149306.206 ops/s
Iteration   3: 1151002.283 ops/s
Iteration   4: 1129268.216 ops/s
Iteration   5: 1142919.596 ops/s
Iteration   6: 1150994.470 ops/s
Iteration   7: 1148093.058 ops/s
Iteration   8: 1150726.201 ops/s
Iteration   9: 1149265.146 ops/s
Iteration  10: 1144082.392 ops/s
Iteration  11: 1148366.420 ops/s
Iteration  12: 1149568.571 ops/s
Iteration  13: 1148816.091 ops/s
Iteration  14: 1146770.428 ops/s
Iteration  15: 1138953.853 ops/s
Iteration  16: 1146002.519 ops/s
Iteration  17: 1153244.663 ops/s
Iteration  18: 1149518.138 ops/s
Iteration  19: 1147234.685 ops/s
Iteration  20: 1147076.654 ops/s
Iteration  21: 1150820.910 ops/s
Iteration  22: 1132404.656 ops/s
Iteration  23: 1153164.904 ops/s
Iteration  24: 1147485.436 ops/s
Iteration  25: 1147165.069 ops/s
Iteration  26: 1142811.886 ops/s
Iteration  27: 1153995.116 ops/s
Iteration  28: 1148792.581 ops/s
Iteration  29: 1128043.777 ops/s
Iteration  30: 1128028.270 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_null_throws":
  1145652.834 ±(99.9%) 4840.485 ops/s [Average]
  (min, avg, max) = (1128028.270, 1145652.834, 1153995.116), stdev = 7245.010
  CI (99.9%): [1140812.349, 1150493.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_null_throws  thrpt   30  1145652.834 ± 4840.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1050495.985 ops/s
# Warmup Iteration   2: 2230709.084 ops/s
# Warmup Iteration   3: 2244848.269 ops/s
# Warmup Iteration   4: 1893850.837 ops/s
# Warmup Iteration   5: 2245582.851 ops/s
# Warmup Iteration   6: 2245867.890 ops/s
# Warmup Iteration   7: 2191564.555 ops/s
# Warmup Iteration   8: 2245336.786 ops/s
# Warmup Iteration   9: 2236579.094 ops/s
# Warmup Iteration  10: 2235990.206 ops/s
# Warmup Iteration  11: 2210689.728 ops/s
# Warmup Iteration  12: 2239981.064 ops/s
# Warmup Iteration  13: 2233239.964 ops/s
# Warmup Iteration  14: 2238111.114 ops/s
# Warmup Iteration  15: 2208633.635 ops/s
# Warmup Iteration  16: 2250205.888 ops/s
# Warmup Iteration  17: 2254131.770 ops/s
# Warmup Iteration  18: 2218417.765 ops/s
# Warmup Iteration  19: 2247749.657 ops/s
# Warmup Iteration  20: 2242184.313 ops/s
# Warmup Iteration  21: 2243483.075 ops/s
# Warmup Iteration  22: 2247220.250 ops/s
# Warmup Iteration  23: 2253401.267 ops/s
# Warmup Iteration  24: 2247868.334 ops/s
# Warmup Iteration  25: 2232838.874 ops/s
# Warmup Iteration  26: 2251410.833 ops/s
# Warmup Iteration  27: 2249772.894 ops/s
# Warmup Iteration  28: 2253821.098 ops/s
# Warmup Iteration  29: 2231572.158 ops/s
# Warmup Iteration  30: 2232654.675 ops/s
Iteration   1: 2250307.501 ops/s
Iteration   2: 2250587.241 ops/s
Iteration   3: 2251560.931 ops/s
Iteration   4: 2233700.246 ops/s
Iteration   5: 2255978.066 ops/s
Iteration   6: 2217327.624 ops/s
Iteration   7: 2248558.318 ops/s
Iteration   8: 2253255.585 ops/s
Iteration   9: 2239801.468 ops/s
Iteration  10: 2248313.953 ops/s
Iteration  11: 2248551.441 ops/s
Iteration  12: 2247926.695 ops/s
Iteration  13: 2247906.563 ops/s
Iteration  14: 2246912.607 ops/s
Iteration  15: 2252959.936 ops/s
Iteration  16: 2251597.920 ops/s
Iteration  17: 2250548.973 ops/s
Iteration  18: 2246791.979 ops/s
Iteration  19: 2254458.860 ops/s
Iteration  20: 2248819.536 ops/s
Iteration  21: 2249365.479 ops/s
Iteration  22: 2256447.358 ops/s
Iteration  23: 2239870.079 ops/s
Iteration  24: 2251822.841 ops/s
Iteration  25: 2216442.243 ops/s
Iteration  26: 2257307.379 ops/s
Iteration  27: 2254769.042 ops/s
Iteration  28: 2253025.841 ops/s
Iteration  29: 2242801.568 ops/s
Iteration  30: 2257255.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partition":
  2247499.081 ±(99.9%) 6601.109 ops/s [Average]
  (min, avg, max) = (2216442.243, 2247499.081, 2257307.379), stdev = 9880.230
  CI (99.9%): [2240897.972, 2254100.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_partition  thrpt   30  2247499.081 ± 6601.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 816482.806 ops/s
# Warmup Iteration   2: 1885440.698 ops/s
# Warmup Iteration   3: 1899456.843 ops/s
# Warmup Iteration   4: 1595175.690 ops/s
# Warmup Iteration   5: 1892486.811 ops/s
# Warmup Iteration   6: 1899599.896 ops/s
# Warmup Iteration   7: 1907441.608 ops/s
# Warmup Iteration   8: 1902690.519 ops/s
# Warmup Iteration   9: 1906408.331 ops/s
# Warmup Iteration  10: 1890310.609 ops/s
# Warmup Iteration  11: 1879456.669 ops/s
# Warmup Iteration  12: 1899862.503 ops/s
# Warmup Iteration  13: 1906538.911 ops/s
# Warmup Iteration  14: 1889513.105 ops/s
# Warmup Iteration  15: 1903765.421 ops/s
# Warmup Iteration  16: 1902073.229 ops/s
# Warmup Iteration  17: 1879455.614 ops/s
# Warmup Iteration  18: 1905207.844 ops/s
# Warmup Iteration  19: 1906055.695 ops/s
# Warmup Iteration  20: 1907474.007 ops/s
# Warmup Iteration  21: 1905048.410 ops/s
# Warmup Iteration  22: 1907800.989 ops/s
# Warmup Iteration  23: 1906531.721 ops/s
# Warmup Iteration  24: 1889087.017 ops/s
# Warmup Iteration  25: 1899705.298 ops/s
# Warmup Iteration  26: 1901155.667 ops/s
# Warmup Iteration  27: 1907832.645 ops/s
# Warmup Iteration  28: 1905595.561 ops/s
# Warmup Iteration  29: 1909229.719 ops/s
# Warmup Iteration  30: 1894414.276 ops/s
Iteration   1: 1908807.691 ops/s
Iteration   2: 1900555.328 ops/s
Iteration   3: 1905238.215 ops/s
Iteration   4: 1907324.346 ops/s
Iteration   5: 1903916.273 ops/s
Iteration   6: 1899875.228 ops/s
Iteration   7: 1906372.204 ops/s
Iteration   8: 1904103.255 ops/s
Iteration   9: 1908291.354 ops/s
Iteration  10: 1905190.062 ops/s
Iteration  11: 1866945.618 ops/s
Iteration  12: 1906769.200 ops/s
Iteration  13: 1909371.684 ops/s
Iteration  14: 1906795.004 ops/s
Iteration  15: 1912991.818 ops/s
Iteration  16: 1909090.280 ops/s
Iteration  17: 1904396.936 ops/s
Iteration  18: 1899955.971 ops/s
Iteration  19: 1900402.655 ops/s
Iteration  20: 1912114.935 ops/s
Iteration  21: 1905931.783 ops/s
Iteration  22: 1908984.117 ops/s
Iteration  23: 1907910.126 ops/s
Iteration  24: 1898783.519 ops/s
Iteration  25: 1905990.760 ops/s
Iteration  26: 1905960.241 ops/s
Iteration  27: 1912516.737 ops/s
Iteration  28: 1883897.788 ops/s
Iteration  29: 1911867.432 ops/s
Iteration  30: 1904599.549 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWhile":
  1904165.004 ±(99.9%) 5984.070 ops/s [Average]
  (min, avg, max) = (1866945.618, 1904165.004, 1912991.818), stdev = 8956.675
  CI (99.9%): [1898180.934, 1910149.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_partitionWhile  thrpt   30  1904165.004 ± 5984.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 836289.889 ops/s
# Warmup Iteration   2: 1875092.343 ops/s
# Warmup Iteration   3: 1849599.966 ops/s
# Warmup Iteration   4: 1582833.165 ops/s
# Warmup Iteration   5: 1873812.957 ops/s
# Warmup Iteration   6: 1878691.064 ops/s
# Warmup Iteration   7: 1865103.520 ops/s
# Warmup Iteration   8: 1890222.538 ops/s
# Warmup Iteration   9: 1886428.328 ops/s
# Warmup Iteration  10: 1888963.840 ops/s
# Warmup Iteration  11: 1879550.882 ops/s
# Warmup Iteration  12: 1875923.394 ops/s
# Warmup Iteration  13: 1882607.806 ops/s
# Warmup Iteration  14: 1884170.298 ops/s
# Warmup Iteration  15: 1871337.905 ops/s
# Warmup Iteration  16: 1883400.961 ops/s
# Warmup Iteration  17: 1887465.448 ops/s
# Warmup Iteration  18: 1889847.134 ops/s
# Warmup Iteration  19: 1887933.392 ops/s
# Warmup Iteration  20: 1893889.032 ops/s
# Warmup Iteration  21: 1891878.852 ops/s
# Warmup Iteration  22: 1891890.031 ops/s
# Warmup Iteration  23: 1891026.598 ops/s
# Warmup Iteration  24: 1895008.940 ops/s
# Warmup Iteration  25: 1893583.522 ops/s
# Warmup Iteration  26: 1893415.516 ops/s
# Warmup Iteration  27: 1891896.141 ops/s
# Warmup Iteration  28: 1891332.507 ops/s
# Warmup Iteration  29: 1891699.131 ops/s
# Warmup Iteration  30: 1896682.231 ops/s
Iteration   1: 1881626.284 ops/s
Iteration   2: 1890293.471 ops/s
Iteration   3: 1868929.715 ops/s
Iteration   4: 1890779.438 ops/s
Iteration   5: 1899505.719 ops/s
Iteration   6: 1888709.617 ops/s
Iteration   7: 1894984.388 ops/s
Iteration   8: 1893525.108 ops/s
Iteration   9: 1894243.057 ops/s
Iteration  10: 1862457.588 ops/s
Iteration  11: 1893793.901 ops/s
Iteration  12: 1892187.792 ops/s
Iteration  13: 1885305.172 ops/s
Iteration  14: 1895400.870 ops/s
Iteration  15: 1897470.165 ops/s
Iteration  16: 1894542.038 ops/s
Iteration  17: 1894251.144 ops/s
Iteration  18: 1873603.506 ops/s
Iteration  19: 1885269.451 ops/s
Iteration  20: 1891227.364 ops/s
Iteration  21: 1893004.766 ops/s
Iteration  22: 1894500.301 ops/s
Iteration  23: 1876715.521 ops/s
Iteration  24: 1887953.348 ops/s
Iteration  25: 1889198.288 ops/s
Iteration  26: 1894390.082 ops/s
Iteration  27: 1895539.921 ops/s
Iteration  28: 1864167.797 ops/s
Iteration  29: 1889986.790 ops/s
Iteration  30: 1891512.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_partitionWith":
  1888169.185 ±(99.9%) 6456.015 ops/s [Average]
  (min, avg, max) = (1862457.588, 1888169.185, 1899505.719), stdev = 9663.060
  CI (99.9%): [1881713.170, 1894625.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_partitionWith  thrpt   30  1888169.185 ± 6456.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774652.089 ops/s
# Warmup Iteration   2: 814571.266 ops/s
# Warmup Iteration   3: 974467.413 ops/s
# Warmup Iteration   4: 1019677.881 ops/s
# Warmup Iteration   5: 1017701.860 ops/s
# Warmup Iteration   6: 1020089.158 ops/s
# Warmup Iteration   7: 1024565.611 ops/s
# Warmup Iteration   8: 1024874.868 ops/s
# Warmup Iteration   9: 1020423.766 ops/s
# Warmup Iteration  10: 1027619.710 ops/s
# Warmup Iteration  11: 1024826.789 ops/s
# Warmup Iteration  12: 1022496.761 ops/s
# Warmup Iteration  13: 892325.302 ops/s
# Warmup Iteration  14: 993159.829 ops/s
# Warmup Iteration  15: 1021943.763 ops/s
# Warmup Iteration  16: 1022772.404 ops/s
# Warmup Iteration  17: 1090418.506 ops/s
# Warmup Iteration  18: 1077634.314 ops/s
# Warmup Iteration  19: 1090387.925 ops/s
# Warmup Iteration  20: 1085921.333 ops/s
# Warmup Iteration  21: 1079054.843 ops/s
# Warmup Iteration  22: 1087980.026 ops/s
# Warmup Iteration  23: 1085522.655 ops/s
# Warmup Iteration  24: 1087471.983 ops/s
# Warmup Iteration  25: 1085448.856 ops/s
# Warmup Iteration  26: 1085465.485 ops/s
# Warmup Iteration  27: 1087132.646 ops/s
# Warmup Iteration  28: 1086852.310 ops/s
# Warmup Iteration  29: 1086319.751 ops/s
# Warmup Iteration  30: 1088693.895 ops/s
Iteration   1: 1085749.731 ops/s
Iteration   2: 1085124.736 ops/s
Iteration   3: 1087074.039 ops/s
Iteration   4: 1086731.663 ops/s
Iteration   5: 1089745.834 ops/s
Iteration   6: 1086255.621 ops/s
Iteration   7: 1088252.058 ops/s
Iteration   8: 1083599.059 ops/s
Iteration   9: 1075982.604 ops/s
Iteration  10: 1083667.620 ops/s
Iteration  11: 1085897.478 ops/s
Iteration  12: 1088167.812 ops/s
Iteration  13: 1068350.048 ops/s
Iteration  14: 1080272.437 ops/s
Iteration  15: 1084955.455 ops/s
Iteration  16: 1084821.478 ops/s
Iteration  17: 1080634.621 ops/s
Iteration  18: 1079102.009 ops/s
Iteration  19: 1083273.872 ops/s
Iteration  20: 1087104.507 ops/s
Iteration  21: 1086146.234 ops/s
Iteration  22: 1083316.703 ops/s
Iteration  23: 1085474.657 ops/s
Iteration  24: 1087896.822 ops/s
Iteration  25: 1088271.187 ops/s
Iteration  26: 1091195.768 ops/s
Iteration  27: 1085133.645 ops/s
Iteration  28: 1088326.878 ops/s
Iteration  29: 1080198.586 ops/s
Iteration  30: 1090619.346 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_randomAccess_throws":
  1084711.417 ±(99.9%) 3100.077 ops/s [Average]
  (min, avg, max) = (1068350.048, 1084711.417, 1091195.768), stdev = 4640.049
  CI (99.9%): [1081611.340, 1087811.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1084711.417 ± 3100.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754364.687 ops/s
# Warmup Iteration   2: 1481488.200 ops/s
# Warmup Iteration   3: 1561177.250 ops/s
# Warmup Iteration   4: 1570455.324 ops/s
# Warmup Iteration   5: 1301229.296 ops/s
# Warmup Iteration   6: 1572097.936 ops/s
# Warmup Iteration   7: 1573688.684 ops/s
# Warmup Iteration   8: 1575060.426 ops/s
# Warmup Iteration   9: 1562494.554 ops/s
# Warmup Iteration  10: 1575257.985 ops/s
# Warmup Iteration  11: 1574716.678 ops/s
# Warmup Iteration  12: 1556019.970 ops/s
# Warmup Iteration  13: 1573892.496 ops/s
# Warmup Iteration  14: 1570956.890 ops/s
# Warmup Iteration  15: 1573136.648 ops/s
# Warmup Iteration  16: 1571566.841 ops/s
# Warmup Iteration  17: 1562197.395 ops/s
# Warmup Iteration  18: 1563946.908 ops/s
# Warmup Iteration  19: 1575460.173 ops/s
# Warmup Iteration  20: 1570646.936 ops/s
# Warmup Iteration  21: 1575519.744 ops/s
# Warmup Iteration  22: 1576955.061 ops/s
# Warmup Iteration  23: 1563467.408 ops/s
# Warmup Iteration  24: 1563177.497 ops/s
# Warmup Iteration  25: 1558755.138 ops/s
# Warmup Iteration  26: 1577460.278 ops/s
# Warmup Iteration  27: 1549001.608 ops/s
# Warmup Iteration  28: 1573389.099 ops/s
# Warmup Iteration  29: 1572885.483 ops/s
# Warmup Iteration  30: 1571899.623 ops/s
Iteration   1: 1564685.040 ops/s
Iteration   2: 1559331.552 ops/s
Iteration   3: 1567544.077 ops/s
Iteration   4: 1570106.727 ops/s
Iteration   5: 1541443.174 ops/s
Iteration   6: 1574400.710 ops/s
Iteration   7: 1572825.295 ops/s
Iteration   8: 1574371.909 ops/s
Iteration   9: 1570384.063 ops/s
Iteration  10: 1579529.442 ops/s
Iteration  11: 1575242.301 ops/s
Iteration  12: 1571357.067 ops/s
Iteration  13: 1548928.217 ops/s
Iteration  14: 1574990.811 ops/s
Iteration  15: 1569929.721 ops/s
Iteration  16: 1579232.921 ops/s
Iteration  17: 1573690.472 ops/s
Iteration  18: 1574009.406 ops/s
Iteration  19: 1568710.837 ops/s
Iteration  20: 1579617.137 ops/s
Iteration  21: 1546504.984 ops/s
Iteration  22: 1573263.658 ops/s
Iteration  23: 1563152.761 ops/s
Iteration  24: 1576062.978 ops/s
Iteration  25: 1574664.554 ops/s
Iteration  26: 1569105.787 ops/s
Iteration  27: 1575764.487 ops/s
Iteration  28: 1574820.050 ops/s
Iteration  29: 1579092.346 ops/s
Iteration  30: 1577348.147 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reduceOptional":
  1570003.688 ±(99.9%) 6411.155 ops/s [Average]
  (min, avg, max) = (1541443.174, 1570003.688, 1579617.137), stdev = 9595.916
  CI (99.9%): [1563592.533, 1576414.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_reduceOptional  thrpt   30  1570003.688 ± 6411.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1162239.700 ops/s
# Warmup Iteration   2: 2617651.743 ops/s
# Warmup Iteration   3: 2675496.930 ops/s
# Warmup Iteration   4: 2250678.801 ops/s
# Warmup Iteration   5: 2685916.439 ops/s
# Warmup Iteration   6: 2688249.289 ops/s
# Warmup Iteration   7: 2673582.481 ops/s
# Warmup Iteration   8: 2668876.072 ops/s
# Warmup Iteration   9: 2678567.634 ops/s
# Warmup Iteration  10: 2661241.486 ops/s
# Warmup Iteration  11: 2683708.060 ops/s
# Warmup Iteration  12: 2685576.588 ops/s
# Warmup Iteration  13: 2677223.743 ops/s
# Warmup Iteration  14: 2683314.644 ops/s
# Warmup Iteration  15: 2684633.664 ops/s
# Warmup Iteration  16: 2665032.156 ops/s
# Warmup Iteration  17: 2674024.553 ops/s
# Warmup Iteration  18: 2653077.835 ops/s
# Warmup Iteration  19: 2676945.842 ops/s
# Warmup Iteration  20: 2695066.131 ops/s
# Warmup Iteration  21: 2669291.276 ops/s
# Warmup Iteration  22: 2673638.588 ops/s
# Warmup Iteration  23: 2679588.375 ops/s
# Warmup Iteration  24: 2679065.853 ops/s
# Warmup Iteration  25: 2684620.808 ops/s
# Warmup Iteration  26: 2679723.848 ops/s
# Warmup Iteration  27: 2685820.352 ops/s
# Warmup Iteration  28: 2675652.023 ops/s
# Warmup Iteration  29: 2664290.532 ops/s
# Warmup Iteration  30: 2675571.651 ops/s
Iteration   1: 2678889.909 ops/s
Iteration   2: 2649131.832 ops/s
Iteration   3: 2689599.169 ops/s
Iteration   4: 2652675.391 ops/s
Iteration   5: 2693304.576 ops/s
Iteration   6: 2678927.917 ops/s
Iteration   7: 2676185.196 ops/s
Iteration   8: 2679005.417 ops/s
Iteration   9: 2660663.949 ops/s
Iteration  10: 2683785.005 ops/s
Iteration  11: 2681771.121 ops/s
Iteration  12: 2680913.231 ops/s
Iteration  13: 2686123.383 ops/s
Iteration  14: 2656913.421 ops/s
Iteration  15: 2676111.504 ops/s
Iteration  16: 2680214.624 ops/s
Iteration  17: 2663420.262 ops/s
Iteration  18: 2673159.451 ops/s
Iteration  19: 2676758.156 ops/s
Iteration  20: 2669730.134 ops/s
Iteration  21: 2689578.660 ops/s
Iteration  22: 2681221.171 ops/s
Iteration  23: 2676034.911 ops/s
Iteration  24: 2702888.329 ops/s
Iteration  25: 2672159.486 ops/s
Iteration  26: 2657026.012 ops/s
Iteration  27: 2674859.090 ops/s
Iteration  28: 2676445.201 ops/s
Iteration  29: 2684943.573 ops/s
Iteration  30: 2665412.851 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reject":
  2675595.098 ±(99.9%) 8152.867 ops/s [Average]
  (min, avg, max) = (2649131.832, 2675595.098, 2702888.329), stdev = 12202.829
  CI (99.9%): [2667442.230, 2683747.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_reject  thrpt   30  2675595.098 ± 8152.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1277048.071 ops/s
# Warmup Iteration   2: 2876629.583 ops/s
# Warmup Iteration   3: 2827138.645 ops/s
# Warmup Iteration   4: 2547543.754 ops/s
# Warmup Iteration   5: 2928530.819 ops/s
# Warmup Iteration   6: 2920208.291 ops/s
# Warmup Iteration   7: 2936437.262 ops/s
# Warmup Iteration   8: 2889476.531 ops/s
# Warmup Iteration   9: 2883152.730 ops/s
# Warmup Iteration  10: 2927589.189 ops/s
# Warmup Iteration  11: 2929440.110 ops/s
# Warmup Iteration  12: 2880176.814 ops/s
# Warmup Iteration  13: 2898022.798 ops/s
# Warmup Iteration  14: 2921654.370 ops/s
# Warmup Iteration  15: 2928471.694 ops/s
# Warmup Iteration  16: 2892287.111 ops/s
# Warmup Iteration  17: 2906386.015 ops/s
# Warmup Iteration  18: 2935205.589 ops/s
# Warmup Iteration  19: 2931491.125 ops/s
# Warmup Iteration  20: 2929070.364 ops/s
# Warmup Iteration  21: 2927920.950 ops/s
# Warmup Iteration  22: 2913126.995 ops/s
# Warmup Iteration  23: 2934460.423 ops/s
# Warmup Iteration  24: 2929242.021 ops/s
# Warmup Iteration  25: 2931801.810 ops/s
# Warmup Iteration  26: 2893298.648 ops/s
# Warmup Iteration  27: 2909148.812 ops/s
# Warmup Iteration  28: 2920825.512 ops/s
# Warmup Iteration  29: 2931809.332 ops/s
# Warmup Iteration  30: 2916107.909 ops/s
Iteration   1: 2928746.090 ops/s
Iteration   2: 2939060.783 ops/s
Iteration   3: 2917530.307 ops/s
Iteration   4: 2931058.371 ops/s
Iteration   5: 2922607.030 ops/s
Iteration   6: 2931351.458 ops/s
Iteration   7: 2884914.277 ops/s
Iteration   8: 2887434.001 ops/s
Iteration   9: 2930573.138 ops/s
Iteration  10: 2938620.753 ops/s
Iteration  11: 2927060.626 ops/s
Iteration  12: 2903865.852 ops/s
Iteration  13: 2873725.526 ops/s
Iteration  14: 2934317.453 ops/s
Iteration  15: 2931481.574 ops/s
Iteration  16: 2926968.685 ops/s
Iteration  17: 2940073.020 ops/s
Iteration  18: 2913579.988 ops/s
Iteration  19: 2931076.303 ops/s
Iteration  20: 2934698.418 ops/s
Iteration  21: 2936249.550 ops/s
Iteration  22: 2854893.121 ops/s
Iteration  23: 2943634.968 ops/s
Iteration  24: 2932566.873 ops/s
Iteration  25: 2926645.677 ops/s
Iteration  26: 2929468.653 ops/s
Iteration  27: 2936003.487 ops/s
Iteration  28: 2927647.473 ops/s
Iteration  29: 2933300.264 ops/s
Iteration  30: 2927899.914 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith":
  2922568.454 ±(99.9%) 14027.061 ops/s [Average]
  (min, avg, max) = (2854893.121, 2922568.454, 2943634.968), stdev = 20995.046
  CI (99.9%): [2908541.394, 2936595.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_rejectWith  thrpt   30  2922568.454 ± 14027.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1573426.754 ops/s
# Warmup Iteration   2: 3457060.435 ops/s
# Warmup Iteration   3: 3476487.278 ops/s
# Warmup Iteration   4: 2885899.030 ops/s
# Warmup Iteration   5: 3471923.333 ops/s
# Warmup Iteration   6: 3473247.714 ops/s
# Warmup Iteration   7: 3472768.563 ops/s
# Warmup Iteration   8: 3484684.964 ops/s
# Warmup Iteration   9: 3410126.127 ops/s
# Warmup Iteration  10: 3477989.855 ops/s
# Warmup Iteration  11: 3474778.385 ops/s
# Warmup Iteration  12: 3415171.790 ops/s
# Warmup Iteration  13: 3448739.379 ops/s
# Warmup Iteration  14: 3478629.306 ops/s
# Warmup Iteration  15: 3458749.082 ops/s
# Warmup Iteration  16: 3479404.999 ops/s
# Warmup Iteration  17: 3466013.969 ops/s
# Warmup Iteration  18: 3478867.365 ops/s
# Warmup Iteration  19: 3477949.835 ops/s
# Warmup Iteration  20: 3469218.676 ops/s
# Warmup Iteration  21: 3471630.836 ops/s
# Warmup Iteration  22: 3443654.031 ops/s
# Warmup Iteration  23: 3479374.171 ops/s
# Warmup Iteration  24: 3476384.788 ops/s
# Warmup Iteration  25: 3476628.765 ops/s
# Warmup Iteration  26: 3465460.990 ops/s
# Warmup Iteration  27: 3481532.253 ops/s
# Warmup Iteration  28: 3444608.000 ops/s
# Warmup Iteration  29: 3477602.265 ops/s
# Warmup Iteration  30: 3482017.486 ops/s
Iteration   1: 3479773.986 ops/s
Iteration   2: 3467115.856 ops/s
Iteration   3: 3475712.305 ops/s
Iteration   4: 3479556.866 ops/s
Iteration   5: 3476625.989 ops/s
Iteration   6: 3460748.210 ops/s
Iteration   7: 3481537.079 ops/s
Iteration   8: 3480065.764 ops/s
Iteration   9: 3482078.540 ops/s
Iteration  10: 3418925.668 ops/s
Iteration  11: 3483483.731 ops/s
Iteration  12: 3479066.522 ops/s
Iteration  13: 3480655.023 ops/s
Iteration  14: 3477174.942 ops/s
Iteration  15: 3476371.827 ops/s
Iteration  16: 3483805.848 ops/s
Iteration  17: 3362149.012 ops/s
Iteration  18: 3475705.408 ops/s
Iteration  19: 3470537.988 ops/s
Iteration  20: 3431486.660 ops/s
Iteration  21: 3467627.280 ops/s
Iteration  22: 3478532.804 ops/s
Iteration  23: 3481848.504 ops/s
Iteration  24: 3474037.267 ops/s
Iteration  25: 3483554.372 ops/s
Iteration  26: 3469700.992 ops/s
Iteration  27: 3474736.141 ops/s
Iteration  28: 3464847.428 ops/s
Iteration  29: 3481456.113 ops/s
Iteration  30: 3478671.989 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndex":
  3469253.004 ±(99.9%) 16557.981 ops/s [Average]
  (min, avg, max) = (3362149.012, 3469253.004, 3483805.848), stdev = 24783.208
  CI (99.9%): [3452695.023, 3485810.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  3469253.004 ± 16557.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1543368.363 ops/s
# Warmup Iteration   2: 3350131.862 ops/s
# Warmup Iteration   3: 3511982.522 ops/s
# Warmup Iteration   4: 3281023.220 ops/s
# Warmup Iteration   5: 3211476.279 ops/s
# Warmup Iteration   6: 3503239.994 ops/s
# Warmup Iteration   7: 3553563.807 ops/s
# Warmup Iteration   8: 3538880.523 ops/s
# Warmup Iteration   9: 3548583.509 ops/s
# Warmup Iteration  10: 3492610.219 ops/s
# Warmup Iteration  11: 3522560.755 ops/s
# Warmup Iteration  12: 3511932.085 ops/s
# Warmup Iteration  13: 3545077.858 ops/s
# Warmup Iteration  14: 3515723.390 ops/s
# Warmup Iteration  15: 3540648.664 ops/s
# Warmup Iteration  16: 3500356.352 ops/s
# Warmup Iteration  17: 3544961.678 ops/s
# Warmup Iteration  18: 3504688.295 ops/s
# Warmup Iteration  19: 3549029.694 ops/s
# Warmup Iteration  20: 3511513.991 ops/s
# Warmup Iteration  21: 3545554.463 ops/s
# Warmup Iteration  22: 3509868.219 ops/s
# Warmup Iteration  23: 3546028.037 ops/s
# Warmup Iteration  24: 3519001.973 ops/s
# Warmup Iteration  25: 3546279.431 ops/s
# Warmup Iteration  26: 3548196.314 ops/s
# Warmup Iteration  27: 3544776.885 ops/s
# Warmup Iteration  28: 3549934.998 ops/s
# Warmup Iteration  29: 3547768.266 ops/s
# Warmup Iteration  30: 3538571.014 ops/s
Iteration   1: 3465973.959 ops/s
Iteration   2: 3526783.105 ops/s
Iteration   3: 3537490.966 ops/s
Iteration   4: 3544836.397 ops/s
Iteration   5: 3538207.479 ops/s
Iteration   6: 3471444.989 ops/s
Iteration   7: 3549128.005 ops/s
Iteration   8: 3537089.240 ops/s
Iteration   9: 3549352.091 ops/s
Iteration  10: 3536874.592 ops/s
Iteration  11: 3538787.529 ops/s
Iteration  12: 3541968.370 ops/s
Iteration  13: 3546106.502 ops/s
Iteration  14: 3554465.407 ops/s
Iteration  15: 3544234.940 ops/s
Iteration  16: 3545139.629 ops/s
Iteration  17: 3531735.808 ops/s
Iteration  18: 3537983.524 ops/s
Iteration  19: 3504624.481 ops/s
Iteration  20: 3546007.084 ops/s
Iteration  21: 3543023.907 ops/s
Iteration  22: 3544079.918 ops/s
Iteration  23: 3493109.973 ops/s
Iteration  24: 3513784.024 ops/s
Iteration  25: 3530427.413 ops/s
Iteration  26: 3541005.885 ops/s
Iteration  27: 3495969.846 ops/s
Iteration  28: 3491563.124 ops/s
Iteration  29: 3543085.322 ops/s
Iteration  30: 3550540.078 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  3529827.453 ±(99.9%) 15954.703 ops/s [Average]
  (min, avg, max) = (3465973.959, 3529827.453, 3554465.407), stdev = 23880.251
  CI (99.9%): [3513872.750, 3545782.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  3529827.453 ± 15954.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 905167.261 ops/s
# Warmup Iteration   2: 2243861.868 ops/s
# Warmup Iteration   3: 2235436.884 ops/s
# Warmup Iteration   4: 1880085.736 ops/s
# Warmup Iteration   5: 2255189.567 ops/s
# Warmup Iteration   6: 2252460.291 ops/s
# Warmup Iteration   7: 2257036.770 ops/s
# Warmup Iteration   8: 2252431.030 ops/s
# Warmup Iteration   9: 2255103.258 ops/s
# Warmup Iteration  10: 2257366.275 ops/s
# Warmup Iteration  11: 2252047.741 ops/s
# Warmup Iteration  12: 2237286.185 ops/s
# Warmup Iteration  13: 2257219.589 ops/s
# Warmup Iteration  14: 2251455.988 ops/s
# Warmup Iteration  15: 2252648.585 ops/s
# Warmup Iteration  16: 2249259.842 ops/s
# Warmup Iteration  17: 2209632.445 ops/s
# Warmup Iteration  18: 2248971.742 ops/s
# Warmup Iteration  19: 2235021.290 ops/s
# Warmup Iteration  20: 2253848.094 ops/s
# Warmup Iteration  21: 2236380.813 ops/s
# Warmup Iteration  22: 2255831.165 ops/s
# Warmup Iteration  23: 2236894.128 ops/s
# Warmup Iteration  24: 2255751.463 ops/s
# Warmup Iteration  25: 2255477.004 ops/s
# Warmup Iteration  26: 2256729.111 ops/s
# Warmup Iteration  27: 2252712.402 ops/s
# Warmup Iteration  28: 2254386.961 ops/s
# Warmup Iteration  29: 2253175.398 ops/s
# Warmup Iteration  30: 2242536.021 ops/s
Iteration   1: 2256973.752 ops/s
Iteration   2: 2258719.784 ops/s
Iteration   3: 2255843.988 ops/s
Iteration   4: 2253415.880 ops/s
Iteration   5: 2257214.102 ops/s
Iteration   6: 2251061.278 ops/s
Iteration   7: 2256812.554 ops/s
Iteration   8: 2257281.687 ops/s
Iteration   9: 2254010.765 ops/s
Iteration  10: 2247954.296 ops/s
Iteration  11: 2236020.342 ops/s
Iteration  12: 2255104.055 ops/s
Iteration  13: 2249725.919 ops/s
Iteration  14: 2252609.618 ops/s
Iteration  15: 2246662.639 ops/s
Iteration  16: 2256841.955 ops/s
Iteration  17: 2252383.602 ops/s
Iteration  18: 2251871.020 ops/s
Iteration  19: 2259409.986 ops/s
Iteration  20: 2180103.488 ops/s
Iteration  21: 2222803.760 ops/s
Iteration  22: 2254609.968 ops/s
Iteration  23: 2257131.521 ops/s
Iteration  24: 2268810.549 ops/s
Iteration  25: 2247159.382 ops/s
Iteration  26: 2252112.399 ops/s
Iteration  27: 2246492.846 ops/s
Iteration  28: 2256329.467 ops/s
Iteration  29: 2238090.613 ops/s
Iteration  30: 2255619.032 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_rejectWith_target":
  2249639.342 ±(99.9%) 10389.631 ops/s [Average]
  (min, avg, max) = (2180103.488, 2249639.342, 2268810.549), stdev = 15550.711
  CI (99.9%): [2239249.711, 2260028.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_rejectWith_target  thrpt   30  2249639.342 ± 10389.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496325.941 ops/s
# Warmup Iteration   2: 897669.299 ops/s
# Warmup Iteration   3: 1049196.490 ops/s
# Warmup Iteration   4: 1045331.230 ops/s
# Warmup Iteration   5: 1045278.418 ops/s
# Warmup Iteration   6: 851580.118 ops/s
# Warmup Iteration   7: 1046587.268 ops/s
# Warmup Iteration   8: 1037148.274 ops/s
# Warmup Iteration   9: 1045173.367 ops/s
# Warmup Iteration  10: 1039296.043 ops/s
# Warmup Iteration  11: 1043934.553 ops/s
# Warmup Iteration  12: 1044523.664 ops/s
# Warmup Iteration  13: 1047702.187 ops/s
# Warmup Iteration  14: 1047798.493 ops/s
# Warmup Iteration  15: 1049011.885 ops/s
# Warmup Iteration  16: 1044610.205 ops/s
# Warmup Iteration  17: 1049047.643 ops/s
# Warmup Iteration  18: 1040606.765 ops/s
# Warmup Iteration  19: 1047850.235 ops/s
# Warmup Iteration  20: 1049313.728 ops/s
# Warmup Iteration  21: 1033818.686 ops/s
# Warmup Iteration  22: 1045678.782 ops/s
# Warmup Iteration  23: 1047071.646 ops/s
# Warmup Iteration  24: 1044468.482 ops/s
# Warmup Iteration  25: 1045476.432 ops/s
# Warmup Iteration  26: 1047851.207 ops/s
# Warmup Iteration  27: 1046850.021 ops/s
# Warmup Iteration  28: 1045574.006 ops/s
# Warmup Iteration  29: 1034027.847 ops/s
# Warmup Iteration  30: 1045484.271 ops/s
Iteration   1: 1050783.404 ops/s
Iteration   2: 1045922.700 ops/s
Iteration   3: 1034762.103 ops/s
Iteration   4: 1036999.453 ops/s
Iteration   5: 1047628.076 ops/s
Iteration   6: 1051682.990 ops/s
Iteration   7: 1049379.688 ops/s
Iteration   8: 1047660.725 ops/s
Iteration   9: 1048334.456 ops/s
Iteration  10: 1048184.248 ops/s
Iteration  11: 1045929.421 ops/s
Iteration  12: 1038343.609 ops/s
Iteration  13: 1048083.562 ops/s
Iteration  14: 1047989.574 ops/s
Iteration  15: 1046384.265 ops/s
Iteration  16: 1050931.695 ops/s
Iteration  17: 1048572.845 ops/s
Iteration  18: 1046260.347 ops/s
Iteration  19: 1048398.639 ops/s
Iteration  20: 1048294.356 ops/s
Iteration  21: 1046636.619 ops/s
Iteration  22: 1046091.252 ops/s
Iteration  23: 1048114.340 ops/s
Iteration  24: 1046175.648 ops/s
Iteration  25: 1049666.640 ops/s
Iteration  26: 1046192.344 ops/s
Iteration  27: 1042985.526 ops/s
Iteration  28: 1049876.928 ops/s
Iteration  29: 1048519.457 ops/s
Iteration  30: 1048075.914 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAll":
  1046762.027 ±(99.9%) 2585.758 ops/s [Average]
  (min, avg, max) = (1034762.103, 1046762.027, 1051682.990), stdev = 3870.242
  CI (99.9%): [1044176.269, 1049347.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_removeAll  thrpt   30  1046762.027 ± 2585.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 413603.895 ops/s
# Warmup Iteration   2: 700963.022 ops/s
# Warmup Iteration   3: 830538.969 ops/s
# Warmup Iteration   4: 835006.041 ops/s
# Warmup Iteration   5: 832922.551 ops/s
# Warmup Iteration   6: 716363.973 ops/s
# Warmup Iteration   7: 806391.392 ops/s
# Warmup Iteration   8: 829252.236 ops/s
# Warmup Iteration   9: 829292.420 ops/s
# Warmup Iteration  10: 836545.702 ops/s
# Warmup Iteration  11: 835324.265 ops/s
# Warmup Iteration  12: 835111.434 ops/s
# Warmup Iteration  13: 837018.541 ops/s
# Warmup Iteration  14: 836568.061 ops/s
# Warmup Iteration  15: 830812.331 ops/s
# Warmup Iteration  16: 830654.814 ops/s
# Warmup Iteration  17: 835519.991 ops/s
# Warmup Iteration  18: 830397.189 ops/s
# Warmup Iteration  19: 836731.138 ops/s
# Warmup Iteration  20: 830866.433 ops/s
# Warmup Iteration  21: 836524.484 ops/s
# Warmup Iteration  22: 835725.837 ops/s
# Warmup Iteration  23: 832033.247 ops/s
# Warmup Iteration  24: 837686.782 ops/s
# Warmup Iteration  25: 830104.414 ops/s
# Warmup Iteration  26: 835750.997 ops/s
# Warmup Iteration  27: 828006.028 ops/s
# Warmup Iteration  28: 835724.497 ops/s
# Warmup Iteration  29: 824681.436 ops/s
# Warmup Iteration  30: 835596.815 ops/s
Iteration   1: 837583.909 ops/s
Iteration   2: 837277.111 ops/s
Iteration   3: 823945.272 ops/s
Iteration   4: 837658.574 ops/s
Iteration   5: 835590.277 ops/s
Iteration   6: 836512.339 ops/s
Iteration   7: 834103.243 ops/s
Iteration   8: 837386.966 ops/s
Iteration   9: 809294.821 ops/s
Iteration  10: 835119.593 ops/s
Iteration  11: 837823.136 ops/s
Iteration  12: 835369.511 ops/s
Iteration  13: 834374.412 ops/s
Iteration  14: 823822.238 ops/s
Iteration  15: 824330.357 ops/s
Iteration  16: 838067.943 ops/s
Iteration  17: 838177.780 ops/s
Iteration  18: 836579.298 ops/s
Iteration  19: 839237.753 ops/s
Iteration  20: 836598.429 ops/s
Iteration  21: 838546.969 ops/s
Iteration  22: 834737.298 ops/s
Iteration  23: 832763.106 ops/s
Iteration  24: 836481.242 ops/s
Iteration  25: 824969.562 ops/s
Iteration  26: 833433.605 ops/s
Iteration  27: 838056.653 ops/s
Iteration  28: 834879.904 ops/s
Iteration  29: 838941.476 ops/s
Iteration  30: 826069.901 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeAllIterable":
  833591.089 ±(99.9%) 4419.316 ops/s [Average]
  (min, avg, max) = (809294.821, 833591.089, 839237.753), stdev = 6614.624
  CI (99.9%): [829171.774, 838010.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_removeAllIterable  thrpt   30  833591.089 ± 4419.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3289339.781 ops/s
# Warmup Iteration   2: 5716292.637 ops/s
# Warmup Iteration   3: 6228781.287 ops/s
# Warmup Iteration   4: 6242915.862 ops/s
# Warmup Iteration   5: 5977159.980 ops/s
# Warmup Iteration   6: 5416955.360 ops/s
# Warmup Iteration   7: 6242146.295 ops/s
# Warmup Iteration   8: 6203485.196 ops/s
# Warmup Iteration   9: 6269382.169 ops/s
# Warmup Iteration  10: 6242746.349 ops/s
# Warmup Iteration  11: 6244836.619 ops/s
# Warmup Iteration  12: 6269855.101 ops/s
# Warmup Iteration  13: 6199226.008 ops/s
# Warmup Iteration  14: 6270356.804 ops/s
# Warmup Iteration  15: 6262751.939 ops/s
# Warmup Iteration  16: 6250550.797 ops/s
# Warmup Iteration  17: 6255534.695 ops/s
# Warmup Iteration  18: 6252653.322 ops/s
# Warmup Iteration  19: 6263116.579 ops/s
# Warmup Iteration  20: 6257700.212 ops/s
# Warmup Iteration  21: 6256003.376 ops/s
# Warmup Iteration  22: 6261255.997 ops/s
# Warmup Iteration  23: 6263840.446 ops/s
# Warmup Iteration  24: 6208634.109 ops/s
# Warmup Iteration  25: 6266861.054 ops/s
# Warmup Iteration  26: 6256791.601 ops/s
# Warmup Iteration  27: 6206338.234 ops/s
# Warmup Iteration  28: 6268509.493 ops/s
# Warmup Iteration  29: 6252769.468 ops/s
# Warmup Iteration  30: 6184776.319 ops/s
Iteration   1: 6245229.980 ops/s
Iteration   2: 6270556.044 ops/s
Iteration   3: 6257525.357 ops/s
Iteration   4: 6281919.083 ops/s
Iteration   5: 6225183.232 ops/s
Iteration   6: 6256568.654 ops/s
Iteration   7: 6237242.019 ops/s
Iteration   8: 6251890.873 ops/s
Iteration   9: 5983752.261 ops/s
Iteration  10: 6256666.564 ops/s
Iteration  11: 6283845.695 ops/s
Iteration  12: 6213922.311 ops/s
Iteration  13: 6262852.620 ops/s
Iteration  14: 6272110.990 ops/s
Iteration  15: 6157381.834 ops/s
Iteration  16: 6263292.116 ops/s
Iteration  17: 6154777.978 ops/s
Iteration  18: 6225142.475 ops/s
Iteration  19: 6282750.526 ops/s
Iteration  20: 6264521.073 ops/s
Iteration  21: 6233566.105 ops/s
Iteration  22: 6267100.697 ops/s
Iteration  23: 6229289.399 ops/s
Iteration  24: 6149366.645 ops/s
Iteration  25: 6267298.651 ops/s
Iteration  26: 6283034.273 ops/s
Iteration  27: 6275471.408 ops/s
Iteration  28: 6240321.992 ops/s
Iteration  29: 6282371.825 ops/s
Iteration  30: 6268072.706 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIf":
  6238100.846 ±(99.9%) 40484.396 ops/s [Average]
  (min, avg, max) = (5983752.261, 6238100.846, 6283845.695), stdev = 60595.143
  CI (99.9%): [6197616.450, 6278585.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_removeIf  thrpt   30  6238100.846 ± 40484.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 870700.694 ops/s
# Warmup Iteration   2: 1847595.135 ops/s
# Warmup Iteration   3: 2149368.124 ops/s
# Warmup Iteration   4: 2140003.233 ops/s
# Warmup Iteration   5: 2141558.018 ops/s
# Warmup Iteration   6: 1779837.820 ops/s
# Warmup Iteration   7: 2141439.238 ops/s
# Warmup Iteration   8: 2140867.742 ops/s
# Warmup Iteration   9: 2164356.437 ops/s
# Warmup Iteration  10: 2160129.814 ops/s
# Warmup Iteration  11: 2130937.169 ops/s
# Warmup Iteration  12: 2142567.208 ops/s
# Warmup Iteration  13: 2157481.539 ops/s
# Warmup Iteration  14: 2123594.754 ops/s
# Warmup Iteration  15: 2157114.607 ops/s
# Warmup Iteration  16: 2156637.855 ops/s
# Warmup Iteration  17: 2164607.458 ops/s
# Warmup Iteration  18: 2157326.223 ops/s
# Warmup Iteration  19: 2131029.311 ops/s
# Warmup Iteration  20: 2162736.865 ops/s
# Warmup Iteration  21: 2160014.858 ops/s
# Warmup Iteration  22: 2160929.595 ops/s
# Warmup Iteration  23: 2166653.498 ops/s
# Warmup Iteration  24: 2149174.082 ops/s
# Warmup Iteration  25: 2142764.539 ops/s
# Warmup Iteration  26: 2158517.875 ops/s
# Warmup Iteration  27: 2144654.307 ops/s
# Warmup Iteration  28: 2161011.277 ops/s
# Warmup Iteration  29: 2158951.919 ops/s
# Warmup Iteration  30: 2161579.677 ops/s
Iteration   1: 2159611.465 ops/s
Iteration   2: 2159481.202 ops/s
Iteration   3: 2160023.210 ops/s
Iteration   4: 2164671.270 ops/s
Iteration   5: 2147193.350 ops/s
Iteration   6: 2152410.502 ops/s
Iteration   7: 2159714.492 ops/s
Iteration   8: 2160440.753 ops/s
Iteration   9: 2096980.489 ops/s
Iteration  10: 2154923.311 ops/s
Iteration  11: 2160559.492 ops/s
Iteration  12: 2166888.744 ops/s
Iteration  13: 2154969.056 ops/s
Iteration  14: 2151135.345 ops/s
Iteration  15: 2158615.479 ops/s
Iteration  16: 2164998.067 ops/s
Iteration  17: 2154989.431 ops/s
Iteration  18: 2132412.221 ops/s
Iteration  19: 2154343.922 ops/s
Iteration  20: 2164612.554 ops/s
Iteration  21: 2131091.747 ops/s
Iteration  22: 2153998.184 ops/s
Iteration  23: 2167101.359 ops/s
Iteration  24: 2141399.570 ops/s
Iteration  25: 2167334.672 ops/s
Iteration  26: 2143158.342 ops/s
Iteration  27: 2129831.043 ops/s
Iteration  28: 2156168.044 ops/s
Iteration  29: 2155462.854 ops/s
Iteration  30: 2151528.145 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIfWith":
  2152534.944 ±(99.9%) 9777.054 ops/s [Average]
  (min, avg, max) = (2096980.489, 2152534.944, 2167334.672), stdev = 14633.835
  CI (99.9%): [2142757.890, 2162311.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_removeIfWith  thrpt   30  2152534.944 ± 9777.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4977596.835 ops/s
# Warmup Iteration   2: 10327639.555 ops/s
# Warmup Iteration   3: 10507108.681 ops/s
# Warmup Iteration   4: 8845363.521 ops/s
# Warmup Iteration   5: 10506404.160 ops/s
# Warmup Iteration   6: 10526780.217 ops/s
# Warmup Iteration   7: 10505526.823 ops/s
# Warmup Iteration   8: 10548701.867 ops/s
# Warmup Iteration   9: 10493097.996 ops/s
# Warmup Iteration  10: 10491995.335 ops/s
# Warmup Iteration  11: 10552646.697 ops/s
# Warmup Iteration  12: 10531863.061 ops/s
# Warmup Iteration  13: 10469205.202 ops/s
# Warmup Iteration  14: 10470820.643 ops/s
# Warmup Iteration  15: 10428989.997 ops/s
# Warmup Iteration  16: 10364453.049 ops/s
# Warmup Iteration  17: 10504830.058 ops/s
# Warmup Iteration  18: 10544501.251 ops/s
# Warmup Iteration  19: 10448501.515 ops/s
# Warmup Iteration  20: 10529975.487 ops/s
# Warmup Iteration  21: 10525440.938 ops/s
# Warmup Iteration  22: 10526377.591 ops/s
# Warmup Iteration  23: 10524431.001 ops/s
# Warmup Iteration  24: 10525030.658 ops/s
# Warmup Iteration  25: 10445636.147 ops/s
# Warmup Iteration  26: 10453885.009 ops/s
# Warmup Iteration  27: 10507340.782 ops/s
# Warmup Iteration  28: 10461945.174 ops/s
# Warmup Iteration  29: 10523458.591 ops/s
# Warmup Iteration  30: 10507674.912 ops/s
Iteration   1: 10558781.026 ops/s
Iteration   2: 10503010.273 ops/s
Iteration   3: 10477621.680 ops/s
Iteration   4: 10562327.486 ops/s
Iteration   5: 10556935.514 ops/s
Iteration   6: 10542603.611 ops/s
Iteration   7: 10523346.360 ops/s
Iteration   8: 10526560.456 ops/s
Iteration   9: 10540665.325 ops/s
Iteration  10: 10544166.242 ops/s
Iteration  11: 10418162.857 ops/s
Iteration  12: 10407485.972 ops/s
Iteration  13: 10374204.364 ops/s
Iteration  14: 10493475.326 ops/s
Iteration  15: 10561643.086 ops/s
Iteration  16: 10551329.656 ops/s
Iteration  17: 10555621.802 ops/s
Iteration  18: 10494908.392 ops/s
Iteration  19: 10381337.960 ops/s
Iteration  20: 10368675.683 ops/s
Iteration  21: 10442339.230 ops/s
Iteration  22: 10483241.915 ops/s
Iteration  23: 10537461.199 ops/s
Iteration  24: 10438653.612 ops/s
Iteration  25: 10383399.615 ops/s
Iteration  26: 10548714.217 ops/s
Iteration  27: 10523959.346 ops/s
Iteration  28: 10558320.316 ops/s
Iteration  29: 10576994.475 ops/s
Iteration  30: 10549070.824 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeIndex":
  10499500.594 ±(99.9%) 44180.305 ops/s [Average]
  (min, avg, max) = (10368675.683, 10499500.594, 10576994.475), stdev = 66127.005
  CI (99.9%): [10455320.289, 10543680.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_removeIndex  thrpt   30  10499500.594 ± 44180.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6949414.384 ops/s
# Warmup Iteration   2: 14628191.660 ops/s
# Warmup Iteration   3: 12512425.069 ops/s
# Warmup Iteration   4: 14631508.486 ops/s
# Warmup Iteration   5: 14729158.863 ops/s
# Warmup Iteration   6: 14735828.762 ops/s
# Warmup Iteration   7: 14805880.417 ops/s
# Warmup Iteration   8: 14635876.401 ops/s
# Warmup Iteration   9: 14678120.250 ops/s
# Warmup Iteration  10: 14571531.420 ops/s
# Warmup Iteration  11: 14770485.864 ops/s
# Warmup Iteration  12: 14776438.488 ops/s
# Warmup Iteration  13: 14745243.576 ops/s
# Warmup Iteration  14: 14794948.057 ops/s
# Warmup Iteration  15: 14793305.814 ops/s
# Warmup Iteration  16: 14688780.152 ops/s
# Warmup Iteration  17: 14775521.699 ops/s
# Warmup Iteration  18: 14771976.498 ops/s
# Warmup Iteration  19: 14789774.071 ops/s
# Warmup Iteration  20: 14789236.626 ops/s
# Warmup Iteration  21: 14791844.593 ops/s
# Warmup Iteration  22: 14759994.790 ops/s
# Warmup Iteration  23: 14728338.597 ops/s
# Warmup Iteration  24: 14730625.452 ops/s
# Warmup Iteration  25: 14645955.229 ops/s
# Warmup Iteration  26: 14682780.981 ops/s
# Warmup Iteration  27: 14795294.302 ops/s
# Warmup Iteration  28: 14808546.504 ops/s
# Warmup Iteration  29: 14767338.020 ops/s
# Warmup Iteration  30: 14725914.813 ops/s
Iteration   1: 14770826.396 ops/s
Iteration   2: 14789800.045 ops/s
Iteration   3: 14812575.644 ops/s
Iteration   4: 14787003.592 ops/s
Iteration   5: 14802514.178 ops/s
Iteration   6: 14813002.449 ops/s
Iteration   7: 14777282.116 ops/s
Iteration   8: 14806182.330 ops/s
Iteration   9: 14730898.750 ops/s
Iteration  10: 14764982.379 ops/s
Iteration  11: 14836750.563 ops/s
Iteration  12: 14827815.379 ops/s
Iteration  13: 14769072.117 ops/s
Iteration  14: 14810352.779 ops/s
Iteration  15: 14830238.328 ops/s
Iteration  16: 14769495.913 ops/s
Iteration  17: 14730473.989 ops/s
Iteration  18: 14723939.128 ops/s
Iteration  19: 14804314.182 ops/s
Iteration  20: 14770387.530 ops/s
Iteration  21: 14774122.622 ops/s
Iteration  22: 14806998.733 ops/s
Iteration  23: 14778359.720 ops/s
Iteration  24: 14729947.366 ops/s
Iteration  25: 14542637.531 ops/s
Iteration  26: 14754716.084 ops/s
Iteration  27: 14819198.365 ops/s
Iteration  28: 14712887.690 ops/s
Iteration  29: 14767271.543 ops/s
Iteration  30: 14839123.006 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_removeObject":
  14775105.682 ±(99.9%) 37406.930 ops/s [Average]
  (min, avg, max) = (14542637.531, 14775105.682, 14839123.006), stdev = 55988.936
  CI (99.9%): [14737698.752, 14812512.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_removeObject  thrpt   30  14775105.682 ± 37406.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4029206.019 ops/s
# Warmup Iteration   2: 8616440.285 ops/s
# Warmup Iteration   3: 8827688.423 ops/s
# Warmup Iteration   4: 8157777.832 ops/s
# Warmup Iteration   5: 8156075.535 ops/s
# Warmup Iteration   6: 8919841.264 ops/s
# Warmup Iteration   7: 8896650.027 ops/s
# Warmup Iteration   8: 8920535.693 ops/s
# Warmup Iteration   9: 8912731.270 ops/s
# Warmup Iteration  10: 8819524.099 ops/s
# Warmup Iteration  11: 8912635.133 ops/s
# Warmup Iteration  12: 8897543.885 ops/s
# Warmup Iteration  13: 8802804.470 ops/s
# Warmup Iteration  14: 8866930.858 ops/s
# Warmup Iteration  15: 8897734.857 ops/s
# Warmup Iteration  16: 8797770.616 ops/s
# Warmup Iteration  17: 8897729.036 ops/s
# Warmup Iteration  18: 8888117.708 ops/s
# Warmup Iteration  19: 8907598.510 ops/s
# Warmup Iteration  20: 8896649.342 ops/s
# Warmup Iteration  21: 8912951.870 ops/s
# Warmup Iteration  22: 8898927.136 ops/s
# Warmup Iteration  23: 8851144.193 ops/s
# Warmup Iteration  24: 8893775.941 ops/s
# Warmup Iteration  25: 8907866.272 ops/s
# Warmup Iteration  26: 8811295.832 ops/s
# Warmup Iteration  27: 8898544.450 ops/s
# Warmup Iteration  28: 8917522.936 ops/s
# Warmup Iteration  29: 8905892.332 ops/s
# Warmup Iteration  30: 8904453.256 ops/s
Iteration   1: 8895753.304 ops/s
Iteration   2: 8915695.804 ops/s
Iteration   3: 8855013.638 ops/s
Iteration   4: 8912431.520 ops/s
Iteration   5: 8887488.250 ops/s
Iteration   6: 8903560.575 ops/s
Iteration   7: 8909119.325 ops/s
Iteration   8: 8895466.933 ops/s
Iteration   9: 8883811.248 ops/s
Iteration  10: 8908597.901 ops/s
Iteration  11: 8908338.017 ops/s
Iteration  12: 8917597.167 ops/s
Iteration  13: 8738194.968 ops/s
Iteration  14: 8829290.481 ops/s
Iteration  15: 8863927.907 ops/s
Iteration  16: 8899627.676 ops/s
Iteration  17: 8890425.074 ops/s
Iteration  18: 8861691.281 ops/s
Iteration  19: 8832872.261 ops/s
Iteration  20: 8858243.394 ops/s
Iteration  21: 8923581.319 ops/s
Iteration  22: 8822714.809 ops/s
Iteration  23: 8908381.073 ops/s
Iteration  24: 8903447.245 ops/s
Iteration  25: 8723121.055 ops/s
Iteration  26: 8758258.214 ops/s
Iteration  27: 8911322.424 ops/s
Iteration  28: 8887359.010 ops/s
Iteration  29: 8843771.231 ops/s
Iteration  30: 8910896.528 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_replaceAll":
  8871999.988 ±(99.9%) 35474.546 ops/s [Average]
  (min, avg, max) = (8723121.055, 8871999.988, 8923581.319), stdev = 53096.635
  CI (99.9%): [8836525.441, 8907474.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_replaceAll  thrpt   30  8871999.988 ± 35474.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344038.585 ops/s
# Warmup Iteration   2: 610465.021 ops/s
# Warmup Iteration   3: 749972.810 ops/s
# Warmup Iteration   4: 755084.462 ops/s
# Warmup Iteration   5: 755059.309 ops/s
# Warmup Iteration   6: 711255.252 ops/s
# Warmup Iteration   7: 668660.063 ops/s
# Warmup Iteration   8: 746554.948 ops/s
# Warmup Iteration   9: 750393.753 ops/s
# Warmup Iteration  10: 745058.818 ops/s
# Warmup Iteration  11: 755418.595 ops/s
# Warmup Iteration  12: 736335.517 ops/s
# Warmup Iteration  13: 753538.789 ops/s
# Warmup Iteration  14: 754970.795 ops/s
# Warmup Iteration  15: 748749.509 ops/s
# Warmup Iteration  16: 753993.350 ops/s
# Warmup Iteration  17: 754662.295 ops/s
# Warmup Iteration  18: 747659.449 ops/s
# Warmup Iteration  19: 754013.836 ops/s
# Warmup Iteration  20: 755016.843 ops/s
# Warmup Iteration  21: 755407.678 ops/s
# Warmup Iteration  22: 752552.841 ops/s
# Warmup Iteration  23: 755546.612 ops/s
# Warmup Iteration  24: 748546.087 ops/s
# Warmup Iteration  25: 755497.566 ops/s
# Warmup Iteration  26: 748804.591 ops/s
# Warmup Iteration  27: 747965.637 ops/s
# Warmup Iteration  28: 755714.864 ops/s
# Warmup Iteration  29: 755807.364 ops/s
# Warmup Iteration  30: 748773.342 ops/s
Iteration   1: 753804.477 ops/s
Iteration   2: 755232.649 ops/s
Iteration   3: 753124.018 ops/s
Iteration   4: 755198.621 ops/s
Iteration   5: 745313.693 ops/s
Iteration   6: 744745.890 ops/s
Iteration   7: 753327.813 ops/s
Iteration   8: 754443.169 ops/s
Iteration   9: 754053.064 ops/s
Iteration  10: 758528.581 ops/s
Iteration  11: 755705.426 ops/s
Iteration  12: 753593.821 ops/s
Iteration  13: 755472.182 ops/s
Iteration  14: 755296.813 ops/s
Iteration  15: 755903.484 ops/s
Iteration  16: 738846.096 ops/s
Iteration  17: 754445.782 ops/s
Iteration  18: 751522.875 ops/s
Iteration  19: 753337.196 ops/s
Iteration  20: 755395.450 ops/s
Iteration  21: 747072.608 ops/s
Iteration  22: 755998.027 ops/s
Iteration  23: 750981.484 ops/s
Iteration  24: 754540.614 ops/s
Iteration  25: 755345.639 ops/s
Iteration  26: 754842.190 ops/s
Iteration  27: 756022.150 ops/s
Iteration  28: 743673.839 ops/s
Iteration  29: 756175.768 ops/s
Iteration  30: 753963.276 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAll":
  752863.557 ±(99.9%) 2976.363 ops/s [Average]
  (min, avg, max) = (738846.096, 752863.557, 758528.581), stdev = 4454.880
  CI (99.9%): [749887.194, 755839.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_retainAll  thrpt   30  752863.557 ± 2976.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482154.354 ops/s
# Warmup Iteration   2: 731320.780 ops/s
# Warmup Iteration   3: 926694.172 ops/s
# Warmup Iteration   4: 920760.258 ops/s
# Warmup Iteration   5: 925531.786 ops/s
# Warmup Iteration   6: 927696.858 ops/s
# Warmup Iteration   7: 845744.880 ops/s
# Warmup Iteration   8: 849177.156 ops/s
# Warmup Iteration   9: 917284.165 ops/s
# Warmup Iteration  10: 924687.109 ops/s
# Warmup Iteration  11: 927233.576 ops/s
# Warmup Iteration  12: 922325.096 ops/s
# Warmup Iteration  13: 927031.130 ops/s
# Warmup Iteration  14: 917551.878 ops/s
# Warmup Iteration  15: 923043.154 ops/s
# Warmup Iteration  16: 927626.220 ops/s
# Warmup Iteration  17: 924078.472 ops/s
# Warmup Iteration  18: 926102.657 ops/s
# Warmup Iteration  19: 919968.488 ops/s
# Warmup Iteration  20: 927230.788 ops/s
# Warmup Iteration  21: 914413.190 ops/s
# Warmup Iteration  22: 924323.511 ops/s
# Warmup Iteration  23: 926091.983 ops/s
# Warmup Iteration  24: 924373.323 ops/s
# Warmup Iteration  25: 921637.000 ops/s
# Warmup Iteration  26: 921909.182 ops/s
# Warmup Iteration  27: 926655.001 ops/s
# Warmup Iteration  28: 927921.127 ops/s
# Warmup Iteration  29: 927511.903 ops/s
# Warmup Iteration  30: 926355.142 ops/s
Iteration   1: 927698.813 ops/s
Iteration   2: 926416.720 ops/s
Iteration   3: 929628.341 ops/s
Iteration   4: 928088.193 ops/s
Iteration   5: 925505.205 ops/s
Iteration   6: 929718.369 ops/s
Iteration   7: 918860.249 ops/s
Iteration   8: 929130.331 ops/s
Iteration   9: 916656.872 ops/s
Iteration  10: 929154.063 ops/s
Iteration  11: 925995.643 ops/s
Iteration  12: 917382.412 ops/s
Iteration  13: 930450.428 ops/s
Iteration  14: 928861.847 ops/s
Iteration  15: 928303.970 ops/s
Iteration  16: 925958.887 ops/s
Iteration  17: 912496.968 ops/s
Iteration  18: 926477.561 ops/s
Iteration  19: 928272.431 ops/s
Iteration  20: 927445.032 ops/s
Iteration  21: 922476.800 ops/s
Iteration  22: 928005.931 ops/s
Iteration  23: 924469.906 ops/s
Iteration  24: 925983.994 ops/s
Iteration  25: 927226.254 ops/s
Iteration  26: 927648.029 ops/s
Iteration  27: 928526.704 ops/s
Iteration  28: 918429.329 ops/s
Iteration  29: 923453.987 ops/s
Iteration  30: 926184.847 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_retainAllIterable":
  925496.937 ±(99.9%) 2976.733 ops/s [Average]
  (min, avg, max) = (912496.968, 925496.937, 930450.428), stdev = 4455.434
  CI (99.9%): [922520.204, 928473.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_retainAllIterable  thrpt   30  925496.937 ± 2976.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4054617.685 ops/s
# Warmup Iteration   2: 8772444.601 ops/s
# Warmup Iteration   3: 8789691.262 ops/s
# Warmup Iteration   4: 7408664.843 ops/s
# Warmup Iteration   5: 8722912.918 ops/s
# Warmup Iteration   6: 8797723.520 ops/s
# Warmup Iteration   7: 8742393.563 ops/s
# Warmup Iteration   8: 8825449.325 ops/s
# Warmup Iteration   9: 8715171.090 ops/s
# Warmup Iteration  10: 8749495.664 ops/s
# Warmup Iteration  11: 8738650.766 ops/s
# Warmup Iteration  12: 8807019.461 ops/s
# Warmup Iteration  13: 8641867.201 ops/s
# Warmup Iteration  14: 8801302.093 ops/s
# Warmup Iteration  15: 8687044.096 ops/s
# Warmup Iteration  16: 8743431.250 ops/s
# Warmup Iteration  17: 8655769.861 ops/s
# Warmup Iteration  18: 8781330.669 ops/s
# Warmup Iteration  19: 8741847.116 ops/s
# Warmup Iteration  20: 8794485.890 ops/s
# Warmup Iteration  21: 8794688.687 ops/s
# Warmup Iteration  22: 8723166.222 ops/s
# Warmup Iteration  23: 8779302.885 ops/s
# Warmup Iteration  24: 8803914.094 ops/s
# Warmup Iteration  25: 8800517.941 ops/s
# Warmup Iteration  26: 8827465.988 ops/s
# Warmup Iteration  27: 8805753.363 ops/s
# Warmup Iteration  28: 8822895.319 ops/s
# Warmup Iteration  29: 8802936.677 ops/s
# Warmup Iteration  30: 8814149.255 ops/s
Iteration   1: 8822182.985 ops/s
Iteration   2: 8812344.600 ops/s
Iteration   3: 8786847.624 ops/s
Iteration   4: 8821741.525 ops/s
Iteration   5: 8780611.062 ops/s
Iteration   6: 8829008.388 ops/s
Iteration   7: 8816501.061 ops/s
Iteration   8: 8824500.021 ops/s
Iteration   9: 8842217.323 ops/s
Iteration  10: 8695345.513 ops/s
Iteration  11: 8836229.256 ops/s
Iteration  12: 8795754.444 ops/s
Iteration  13: 8792820.144 ops/s
Iteration  14: 8785424.955 ops/s
Iteration  15: 8799161.154 ops/s
Iteration  16: 8826560.745 ops/s
Iteration  17: 8826844.457 ops/s
Iteration  18: 8758136.808 ops/s
Iteration  19: 8676592.059 ops/s
Iteration  20: 8799307.756 ops/s
Iteration  21: 8820883.214 ops/s
Iteration  22: 8827803.197 ops/s
Iteration  23: 8801854.831 ops/s
Iteration  24: 8828195.973 ops/s
Iteration  25: 8840852.190 ops/s
Iteration  26: 8795086.181 ops/s
Iteration  27: 8798227.952 ops/s
Iteration  28: 8792213.537 ops/s
Iteration  29: 8810996.844 ops/s
Iteration  30: 8823308.870 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach":
  8802251.822 ±(99.9%) 24935.419 ops/s [Average]
  (min, avg, max) = (8676592.059, 8802251.822, 8842217.323), stdev = 37322.164
  CI (99.9%): [8777316.404, 8827187.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_reverseForEach  thrpt   30  8802251.822 ± 24935.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3710344.765 ops/s
# Warmup Iteration   2: 7801207.943 ops/s
# Warmup Iteration   3: 7937465.112 ops/s
# Warmup Iteration   4: 6668316.514 ops/s
# Warmup Iteration   5: 7913831.811 ops/s
# Warmup Iteration   6: 7843674.513 ops/s
# Warmup Iteration   7: 7903854.678 ops/s
# Warmup Iteration   8: 7875603.846 ops/s
# Warmup Iteration   9: 7858382.473 ops/s
# Warmup Iteration  10: 7824314.072 ops/s
# Warmup Iteration  11: 7921340.009 ops/s
# Warmup Iteration  12: 7907264.943 ops/s
# Warmup Iteration  13: 7842274.718 ops/s
# Warmup Iteration  14: 7902665.262 ops/s
# Warmup Iteration  15: 7842094.240 ops/s
# Warmup Iteration  16: 7887540.296 ops/s
# Warmup Iteration  17: 7932714.371 ops/s
# Warmup Iteration  18: 7947964.459 ops/s
# Warmup Iteration  19: 7935043.312 ops/s
# Warmup Iteration  20: 7932091.111 ops/s
# Warmup Iteration  21: 7934636.927 ops/s
# Warmup Iteration  22: 7947057.565 ops/s
# Warmup Iteration  23: 7912408.779 ops/s
# Warmup Iteration  24: 7949704.553 ops/s
# Warmup Iteration  25: 7953083.169 ops/s
# Warmup Iteration  26: 7929772.742 ops/s
# Warmup Iteration  27: 7934343.197 ops/s
# Warmup Iteration  28: 7949102.880 ops/s
# Warmup Iteration  29: 7832650.259 ops/s
# Warmup Iteration  30: 7942092.784 ops/s
Iteration   1: 7960751.685 ops/s
Iteration   2: 7887784.939 ops/s
Iteration   3: 7915564.030 ops/s
Iteration   4: 7966721.976 ops/s
Iteration   5: 7945299.732 ops/s
Iteration   6: 7923895.836 ops/s
Iteration   7: 7941259.384 ops/s
Iteration   8: 7945435.396 ops/s
Iteration   9: 7935095.313 ops/s
Iteration  10: 7828727.264 ops/s
Iteration  11: 7904713.507 ops/s
Iteration  12: 7921898.869 ops/s
Iteration  13: 7950800.541 ops/s
Iteration  14: 7823132.711 ops/s
Iteration  15: 7959666.797 ops/s
Iteration  16: 7954240.747 ops/s
Iteration  17: 7953967.482 ops/s
Iteration  18: 7944354.308 ops/s
Iteration  19: 7824198.220 ops/s
Iteration  20: 7938724.280 ops/s
Iteration  21: 7941456.446 ops/s
Iteration  22: 7943093.253 ops/s
Iteration  23: 7922052.835 ops/s
Iteration  24: 7922201.919 ops/s
Iteration  25: 7942905.030 ops/s
Iteration  26: 7949747.257 ops/s
Iteration  27: 7959951.769 ops/s
Iteration  28: 7964724.411 ops/s
Iteration  29: 7947613.643 ops/s
Iteration  30: 7947603.351 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex":
  7928919.431 ±(99.9%) 26303.914 ops/s [Average]
  (min, avg, max) = (7823132.711, 7928919.431, 7966721.976), stdev = 39370.463
  CI (99.9%): [7902615.517, 7955223.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  7928919.431 ± 26303.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56505143.017 ops/s
# Warmup Iteration   2: 108687392.820 ops/s
# Warmup Iteration   3: 97977198.608 ops/s
# Warmup Iteration   4: 114467049.563 ops/s
# Warmup Iteration   5: 114595568.321 ops/s
# Warmup Iteration   6: 114553443.924 ops/s
# Warmup Iteration   7: 114347222.148 ops/s
# Warmup Iteration   8: 114744935.414 ops/s
# Warmup Iteration   9: 114128007.179 ops/s
# Warmup Iteration  10: 114442655.564 ops/s
# Warmup Iteration  11: 114632182.343 ops/s
# Warmup Iteration  12: 114156194.070 ops/s
# Warmup Iteration  13: 113859739.250 ops/s
# Warmup Iteration  14: 113333970.812 ops/s
# Warmup Iteration  15: 113852781.674 ops/s
# Warmup Iteration  16: 114681217.913 ops/s
# Warmup Iteration  17: 113184090.952 ops/s
# Warmup Iteration  18: 113585332.830 ops/s
# Warmup Iteration  19: 114133102.932 ops/s
# Warmup Iteration  20: 114285801.759 ops/s
# Warmup Iteration  21: 114330687.270 ops/s
# Warmup Iteration  22: 112724929.817 ops/s
# Warmup Iteration  23: 114460834.809 ops/s
# Warmup Iteration  24: 114077069.308 ops/s
# Warmup Iteration  25: 112610638.791 ops/s
# Warmup Iteration  26: 113173665.804 ops/s
# Warmup Iteration  27: 114123499.253 ops/s
# Warmup Iteration  28: 113745587.424 ops/s
# Warmup Iteration  29: 113552704.721 ops/s
# Warmup Iteration  30: 114166217.541 ops/s
Iteration   1: 113604702.755 ops/s
Iteration   2: 114236450.795 ops/s
Iteration   3: 114707060.553 ops/s
Iteration   4: 114204062.224 ops/s
Iteration   5: 112369700.161 ops/s
Iteration   6: 114366755.908 ops/s
Iteration   7: 114221001.834 ops/s
Iteration   8: 112731836.145 ops/s
Iteration   9: 113804114.908 ops/s
Iteration  10: 114648512.153 ops/s
Iteration  11: 114523498.398 ops/s
Iteration  12: 113709909.629 ops/s
Iteration  13: 114293313.202 ops/s
Iteration  14: 113949772.868 ops/s
Iteration  15: 114164998.077 ops/s
Iteration  16: 112567350.588 ops/s
Iteration  17: 114432901.105 ops/s
Iteration  18: 114443192.531 ops/s
Iteration  19: 114197480.008 ops/s
Iteration  20: 114218386.271 ops/s
Iteration  21: 114177468.914 ops/s
Iteration  22: 113807181.906 ops/s
Iteration  23: 114142138.088 ops/s
Iteration  24: 113954246.912 ops/s
Iteration  25: 114372305.009 ops/s
Iteration  26: 113884287.642 ops/s
Iteration  27: 113525663.707 ops/s
Iteration  28: 114391614.693 ops/s
Iteration  29: 113954586.903 ops/s
Iteration  30: 114438519.949 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  114001433.795 ±(99.9%) 381887.120 ops/s [Average]
  (min, avg, max) = (112369700.161, 114001433.795, 114707060.553), stdev = 571590.706
  CI (99.9%): [113619546.675, 114383320.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
ListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  114001433.795 ± 381887.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35504569.085 ops/s
# Warmup Iteration   2: 66779738.506 ops/s
# Warmup Iteration   3: 62252166.320 ops/s
# Warmup Iteration   4: 72080370.179 ops/s
# Warmup Iteration   5: 72333673.577 ops/s
# Warmup Iteration   6: 73299110.705 ops/s
# Warmup Iteration   7: 72705899.597 ops/s
# Warmup Iteration   8: 72549713.321 ops/s
# Warmup Iteration   9: 71605878.793 ops/s
# Warmup Iteration  10: 72960678.951 ops/s
# Warmup Iteration  11: 73128918.808 ops/s
# Warmup Iteration  12: 72707461.228 ops/s
# Warmup Iteration  13: 73117557.057 ops/s
# Warmup Iteration  14: 72962632.550 ops/s
# Warmup Iteration  15: 72839561.119 ops/s
# Warmup Iteration  16: 72582817.314 ops/s
# Warmup Iteration  17: 71766008.726 ops/s
# Warmup Iteration  18: 71339673.841 ops/s
# Warmup Iteration  19: 72045837.188 ops/s
# Warmup Iteration  20: 72027765.462 ops/s
# Warmup Iteration  21: 71965741.978 ops/s
# Warmup Iteration  22: 71860446.850 ops/s
# Warmup Iteration  23: 72062273.194 ops/s
# Warmup Iteration  24: 72188883.612 ops/s
# Warmup Iteration  25: 72017683.525 ops/s
# Warmup Iteration  26: 71996728.511 ops/s
# Warmup Iteration  27: 71676912.699 ops/s
# Warmup Iteration  28: 71643566.097 ops/s
# Warmup Iteration  29: 71547845.885 ops/s
# Warmup Iteration  30: 71998093.326 ops/s
Iteration   1: 72089549.223 ops/s
Iteration   2: 72378124.457 ops/s
Iteration   3: 71896249.700 ops/s
Iteration   4: 71759142.389 ops/s
Iteration   5: 71936344.408 ops/s
Iteration   6: 71482657.398 ops/s
Iteration   7: 70640075.921 ops/s
Iteration   8: 71754435.468 ops/s
Iteration   9: 72137830.274 ops/s
Iteration  10: 71916299.312 ops/s
Iteration  11: 72057302.672 ops/s
Iteration  12: 71456991.776 ops/s
Iteration  13: 71802666.819 ops/s
Iteration  14: 71836477.895 ops/s
Iteration  15: 70761454.873 ops/s
Iteration  16: 71892834.955 ops/s
Iteration  17: 72369090.884 ops/s
Iteration  18: 72083203.746 ops/s
Iteration  19: 72332349.605 ops/s
Iteration  20: 71955926.498 ops/s
Iteration  21: 72233219.521 ops/s
Iteration  22: 72103937.819 ops/s
Iteration  23: 71927936.651 ops/s
Iteration  24: 71857350.565 ops/s
Iteration  25: 70559538.373 ops/s
Iteration  26: 72068789.980 ops/s
Iteration  27: 71830297.381 ops/s
Iteration  28: 71770527.702 ops/s
Iteration  29: 72172134.815 ops/s
Iteration  30: 70645088.749 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList":
  71790260.994 ±(99.9%) 337256.653 ops/s [Average]
  (min, avg, max) = (70559538.373, 71790260.994, 72378124.457), stdev = 504789.919
  CI (99.9%): [71453004.341, 72127517.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  71790260.994 ± 337256.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4087419.807 ops/s
# Warmup Iteration   2: 8764613.017 ops/s
# Warmup Iteration   3: 8811356.000 ops/s
# Warmup Iteration   4: 7427255.033 ops/s
# Warmup Iteration   5: 8770423.781 ops/s
# Warmup Iteration   6: 8828163.610 ops/s
# Warmup Iteration   7: 8812878.263 ops/s
# Warmup Iteration   8: 8838363.858 ops/s
# Warmup Iteration   9: 8841190.417 ops/s
# Warmup Iteration  10: 8835032.354 ops/s
# Warmup Iteration  11: 8855769.659 ops/s
# Warmup Iteration  12: 8772514.934 ops/s
# Warmup Iteration  13: 8832302.509 ops/s
# Warmup Iteration  14: 8840862.397 ops/s
# Warmup Iteration  15: 8837154.576 ops/s
# Warmup Iteration  16: 8712606.552 ops/s
# Warmup Iteration  17: 8802635.711 ops/s
# Warmup Iteration  18: 8844449.975 ops/s
# Warmup Iteration  19: 8842055.986 ops/s
# Warmup Iteration  20: 8784023.069 ops/s
# Warmup Iteration  21: 8806669.997 ops/s
# Warmup Iteration  22: 8846804.045 ops/s
# Warmup Iteration  23: 8809218.309 ops/s
# Warmup Iteration  24: 8848623.590 ops/s
# Warmup Iteration  25: 8831712.630 ops/s
# Warmup Iteration  26: 8822846.863 ops/s
# Warmup Iteration  27: 8849277.148 ops/s
# Warmup Iteration  28: 8818162.186 ops/s
# Warmup Iteration  29: 8769924.706 ops/s
# Warmup Iteration  30: 8832954.448 ops/s
Iteration   1: 8841541.767 ops/s
Iteration   2: 8835361.493 ops/s
Iteration   3: 8687503.421 ops/s
Iteration   4: 8824109.628 ops/s
Iteration   5: 8861342.044 ops/s
Iteration   6: 8805355.812 ops/s
Iteration   7: 8703440.661 ops/s
Iteration   8: 8810709.240 ops/s
Iteration   9: 8846838.464 ops/s
Iteration  10: 8862075.813 ops/s
Iteration  11: 8853610.362 ops/s
Iteration  12: 8839284.162 ops/s
Iteration  13: 8738626.619 ops/s
Iteration  14: 8848191.103 ops/s
Iteration  15: 8855993.195 ops/s
Iteration  16: 8704021.798 ops/s
Iteration  17: 8666250.335 ops/s
Iteration  18: 8859702.877 ops/s
Iteration  19: 8851910.871 ops/s
Iteration  20: 8803662.461 ops/s
Iteration  21: 8737171.374 ops/s
Iteration  22: 8852493.955 ops/s
Iteration  23: 8829388.315 ops/s
Iteration  24: 8718493.794 ops/s
Iteration  25: 8818291.499 ops/s
Iteration  26: 8852244.673 ops/s
Iteration  27: 8690902.365 ops/s
Iteration  28: 8759924.442 ops/s
Iteration  29: 8624511.988 ops/s
Iteration  30: 8858348.896 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_reverseThis":
  8794710.114 ±(99.9%) 47510.531 ops/s [Average]
  (min, avg, max) = (8624511.988, 8794710.114, 8862075.813), stdev = 71111.532
  CI (99.9%): [8747199.583, 8842220.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_reverseThis  thrpt   30  8794710.114 ± 47510.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735671.448 ops/s
# Warmup Iteration   2: 1659458.124 ops/s
# Warmup Iteration   3: 1660115.928 ops/s
# Warmup Iteration   4: 1398377.529 ops/s
# Warmup Iteration   5: 1670632.722 ops/s
# Warmup Iteration   6: 1659763.854 ops/s
# Warmup Iteration   7: 1664131.297 ops/s
# Warmup Iteration   8: 1663240.447 ops/s
# Warmup Iteration   9: 1669267.314 ops/s
# Warmup Iteration  10: 1655757.066 ops/s
# Warmup Iteration  11: 1667210.435 ops/s
# Warmup Iteration  12: 1669316.593 ops/s
# Warmup Iteration  13: 1674749.433 ops/s
# Warmup Iteration  14: 1667542.726 ops/s
# Warmup Iteration  15: 1662524.355 ops/s
# Warmup Iteration  16: 1654134.224 ops/s
# Warmup Iteration  17: 1672725.063 ops/s
# Warmup Iteration  18: 1673879.989 ops/s
# Warmup Iteration  19: 1671167.067 ops/s
# Warmup Iteration  20: 1674600.655 ops/s
# Warmup Iteration  21: 1668608.912 ops/s
# Warmup Iteration  22: 1681913.534 ops/s
# Warmup Iteration  23: 1676945.851 ops/s
# Warmup Iteration  24: 1676117.112 ops/s
# Warmup Iteration  25: 1672900.794 ops/s
# Warmup Iteration  26: 1674019.731 ops/s
# Warmup Iteration  27: 1672805.070 ops/s
# Warmup Iteration  28: 1679134.316 ops/s
# Warmup Iteration  29: 1658467.044 ops/s
# Warmup Iteration  30: 1664826.805 ops/s
Iteration   1: 1677980.578 ops/s
Iteration   2: 1673380.524 ops/s
Iteration   3: 1675082.478 ops/s
Iteration   4: 1647669.420 ops/s
Iteration   5: 1672414.323 ops/s
Iteration   6: 1675327.569 ops/s
Iteration   7: 1666620.712 ops/s
Iteration   8: 1675672.339 ops/s
Iteration   9: 1673720.913 ops/s
Iteration  10: 1672179.803 ops/s
Iteration  11: 1674763.064 ops/s
Iteration  12: 1660330.368 ops/s
Iteration  13: 1674883.270 ops/s
Iteration  14: 1670755.105 ops/s
Iteration  15: 1668245.191 ops/s
Iteration  16: 1660943.803 ops/s
Iteration  17: 1670482.694 ops/s
Iteration  18: 1678056.932 ops/s
Iteration  19: 1671753.707 ops/s
Iteration  20: 1679032.041 ops/s
Iteration  21: 1671657.005 ops/s
Iteration  22: 1672929.883 ops/s
Iteration  23: 1667251.115 ops/s
Iteration  24: 1674326.867 ops/s
Iteration  25: 1674735.696 ops/s
Iteration  26: 1675644.635 ops/s
Iteration  27: 1669554.020 ops/s
Iteration  28: 1672880.357 ops/s
Iteration  29: 1681045.720 ops/s
Iteration  30: 1669943.106 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_select":
  1671642.108 ±(99.9%) 4320.997 ops/s [Average]
  (min, avg, max) = (1647669.420, 1671642.108, 1681045.720), stdev = 6467.465
  CI (99.9%): [1667321.111, 1675963.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_select  thrpt   30  1671642.108 ± 4320.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3089484.535 ops/s
# Warmup Iteration   2: 6757668.755 ops/s
# Warmup Iteration   3: 6746425.481 ops/s
# Warmup Iteration   4: 5779820.472 ops/s
# Warmup Iteration   5: 6744759.672 ops/s
# Warmup Iteration   6: 6812492.585 ops/s
# Warmup Iteration   7: 6820501.422 ops/s
# Warmup Iteration   8: 6749426.952 ops/s
# Warmup Iteration   9: 6763729.301 ops/s
# Warmup Iteration  10: 6801870.167 ops/s
# Warmup Iteration  11: 6797269.768 ops/s
# Warmup Iteration  12: 6821790.155 ops/s
# Warmup Iteration  13: 6772530.676 ops/s
# Warmup Iteration  14: 6753852.031 ops/s
# Warmup Iteration  15: 6748211.993 ops/s
# Warmup Iteration  16: 6796909.846 ops/s
# Warmup Iteration  17: 6819163.228 ops/s
# Warmup Iteration  18: 6804743.765 ops/s
# Warmup Iteration  19: 6815007.032 ops/s
# Warmup Iteration  20: 6812751.753 ops/s
# Warmup Iteration  21: 6822106.789 ops/s
# Warmup Iteration  22: 6760239.060 ops/s
# Warmup Iteration  23: 6747024.081 ops/s
# Warmup Iteration  24: 6803767.967 ops/s
# Warmup Iteration  25: 6799545.356 ops/s
# Warmup Iteration  26: 6822636.253 ops/s
# Warmup Iteration  27: 6797954.262 ops/s
# Warmup Iteration  28: 6816220.525 ops/s
# Warmup Iteration  29: 6813818.704 ops/s
# Warmup Iteration  30: 6817351.653 ops/s
Iteration   1: 6787219.638 ops/s
Iteration   2: 6814006.330 ops/s
Iteration   3: 6608525.439 ops/s
Iteration   4: 6719619.664 ops/s
Iteration   5: 6702850.375 ops/s
Iteration   6: 6828009.544 ops/s
Iteration   7: 6828629.244 ops/s
Iteration   8: 6815992.628 ops/s
Iteration   9: 6821083.770 ops/s
Iteration  10: 6811273.779 ops/s
Iteration  11: 6768406.588 ops/s
Iteration  12: 6822711.332 ops/s
Iteration  13: 6815980.604 ops/s
Iteration  14: 6705073.278 ops/s
Iteration  15: 6784755.357 ops/s
Iteration  16: 6707043.677 ops/s
Iteration  17: 6802364.346 ops/s
Iteration  18: 6820867.882 ops/s
Iteration  19: 6811464.189 ops/s
Iteration  20: 6816769.439 ops/s
Iteration  21: 6679668.841 ops/s
Iteration  22: 6801697.958 ops/s
Iteration  23: 6811496.191 ops/s
Iteration  24: 6817061.162 ops/s
Iteration  25: 6812636.482 ops/s
Iteration  26: 6766033.621 ops/s
Iteration  27: 6724666.595 ops/s
Iteration  28: 6817763.288 ops/s
Iteration  29: 6793499.189 ops/s
Iteration  30: 6823444.647 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectAndRejectWith":
  6781353.836 ±(99.9%) 36852.098 ops/s [Average]
  (min, avg, max) = (6608525.439, 6781353.836, 6828629.244), stdev = 55158.490
  CI (99.9%): [6744501.738, 6818205.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  6781353.836 ± 36852.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344834.721 ops/s
# Warmup Iteration   2: 626260.384 ops/s
# Warmup Iteration   3: 711571.369 ops/s
# Warmup Iteration   4: 713061.628 ops/s
# Warmup Iteration   5: 707031.465 ops/s
# Warmup Iteration   6: 593360.782 ops/s
# Warmup Iteration   7: 711621.613 ops/s
# Warmup Iteration   8: 713533.647 ops/s
# Warmup Iteration   9: 710989.343 ops/s
# Warmup Iteration  10: 716339.801 ops/s
# Warmup Iteration  11: 714326.881 ops/s
# Warmup Iteration  12: 714490.019 ops/s
# Warmup Iteration  13: 711916.852 ops/s
# Warmup Iteration  14: 714224.605 ops/s
# Warmup Iteration  15: 709110.139 ops/s
# Warmup Iteration  16: 712988.813 ops/s
# Warmup Iteration  17: 703126.474 ops/s
# Warmup Iteration  18: 705285.403 ops/s
# Warmup Iteration  19: 715166.489 ops/s
# Warmup Iteration  20: 712931.091 ops/s
# Warmup Iteration  21: 711612.392 ops/s
# Warmup Iteration  22: 705413.545 ops/s
# Warmup Iteration  23: 713753.717 ops/s
# Warmup Iteration  24: 714631.050 ops/s
# Warmup Iteration  25: 709121.840 ops/s
# Warmup Iteration  26: 703767.741 ops/s
# Warmup Iteration  27: 715110.833 ops/s
# Warmup Iteration  28: 713936.854 ops/s
# Warmup Iteration  29: 714452.191 ops/s
# Warmup Iteration  30: 714741.996 ops/s
Iteration   1: 714775.700 ops/s
Iteration   2: 716488.643 ops/s
Iteration   3: 711887.599 ops/s
Iteration   4: 715716.710 ops/s
Iteration   5: 713905.934 ops/s
Iteration   6: 701854.926 ops/s
Iteration   7: 714430.036 ops/s
Iteration   8: 701798.825 ops/s
Iteration   9: 715113.636 ops/s
Iteration  10: 712953.316 ops/s
Iteration  11: 715102.875 ops/s
Iteration  12: 715413.493 ops/s
Iteration  13: 703371.196 ops/s
Iteration  14: 706489.680 ops/s
Iteration  15: 715738.469 ops/s
Iteration  16: 703240.517 ops/s
Iteration  17: 716311.198 ops/s
Iteration  18: 712219.652 ops/s
Iteration  19: 713859.156 ops/s
Iteration  20: 712381.014 ops/s
Iteration  21: 716123.245 ops/s
Iteration  22: 714305.726 ops/s
Iteration  23: 713148.269 ops/s
Iteration  24: 716936.318 ops/s
Iteration  25: 715752.078 ops/s
Iteration  26: 705040.996 ops/s
Iteration  27: 716567.883 ops/s
Iteration  28: 707527.007 ops/s
Iteration  29: 715719.536 ops/s
Iteration  30: 713907.962 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectInstancesOf":
  712269.386 ±(99.9%) 3222.188 ops/s [Average]
  (min, avg, max) = (701798.825, 712269.386, 716936.318), stdev = 4822.819
  CI (99.9%): [709047.199, 715491.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  712269.386 ± 3222.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888841.245 ops/s
# Warmup Iteration   2: 1846630.388 ops/s
# Warmup Iteration   3: 1751794.621 ops/s
# Warmup Iteration   4: 1692131.898 ops/s
# Warmup Iteration   5: 1870835.463 ops/s
# Warmup Iteration   6: 1883719.914 ops/s
# Warmup Iteration   7: 1871147.870 ops/s
# Warmup Iteration   8: 1871530.867 ops/s
# Warmup Iteration   9: 1877409.627 ops/s
# Warmup Iteration  10: 1885682.052 ops/s
# Warmup Iteration  11: 1878169.282 ops/s
# Warmup Iteration  12: 1862492.828 ops/s
# Warmup Iteration  13: 1863970.584 ops/s
# Warmup Iteration  14: 1879853.371 ops/s
# Warmup Iteration  15: 1881386.113 ops/s
# Warmup Iteration  16: 1884431.238 ops/s
# Warmup Iteration  17: 1888730.502 ops/s
# Warmup Iteration  18: 1878097.343 ops/s
# Warmup Iteration  19: 1884676.512 ops/s
# Warmup Iteration  20: 1868333.045 ops/s
# Warmup Iteration  21: 1881161.650 ops/s
# Warmup Iteration  22: 1875535.548 ops/s
# Warmup Iteration  23: 1883400.899 ops/s
# Warmup Iteration  24: 1882049.690 ops/s
# Warmup Iteration  25: 1882797.514 ops/s
# Warmup Iteration  26: 1876336.723 ops/s
# Warmup Iteration  27: 1887882.834 ops/s
# Warmup Iteration  28: 1878535.935 ops/s
# Warmup Iteration  29: 1878063.787 ops/s
# Warmup Iteration  30: 1887972.737 ops/s
Iteration   1: 1884994.643 ops/s
Iteration   2: 1882157.362 ops/s
Iteration   3: 1882460.178 ops/s
Iteration   4: 1886794.116 ops/s
Iteration   5: 1863858.036 ops/s
Iteration   6: 1885317.511 ops/s
Iteration   7: 1868396.915 ops/s
Iteration   8: 1884883.640 ops/s
Iteration   9: 1883578.759 ops/s
Iteration  10: 1851639.541 ops/s
Iteration  11: 1887568.614 ops/s
Iteration  12: 1886537.114 ops/s
Iteration  13: 1864052.312 ops/s
Iteration  14: 1874916.031 ops/s
Iteration  15: 1887182.608 ops/s
Iteration  16: 1881099.737 ops/s
Iteration  17: 1877016.429 ops/s
Iteration  18: 1874632.619 ops/s
Iteration  19: 1885908.383 ops/s
Iteration  20: 1885253.618 ops/s
Iteration  21: 1861636.343 ops/s
Iteration  22: 1874445.850 ops/s
Iteration  23: 1873032.052 ops/s
Iteration  24: 1871725.555 ops/s
Iteration  25: 1876117.594 ops/s
Iteration  26: 1880536.706 ops/s
Iteration  27: 1884567.229 ops/s
Iteration  28: 1883867.522 ops/s
Iteration  29: 1880794.332 ops/s
Iteration  30: 1879273.852 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith":
  1878141.507 ±(99.9%) 5967.119 ops/s [Average]
  (min, avg, max) = (1851639.541, 1878141.507, 1887568.614), stdev = 8931.303
  CI (99.9%): [1872174.388, 1884108.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_selectWith  thrpt   30  1878141.507 ± 5967.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1345590.483 ops/s
# Warmup Iteration   2: 2915189.565 ops/s
# Warmup Iteration   3: 2916806.685 ops/s
# Warmup Iteration   4: 2442458.827 ops/s
# Warmup Iteration   5: 2935040.469 ops/s
# Warmup Iteration   6: 2935235.877 ops/s
# Warmup Iteration   7: 2943335.981 ops/s
# Warmup Iteration   8: 2919148.172 ops/s
# Warmup Iteration   9: 2941522.879 ops/s
# Warmup Iteration  10: 2904248.919 ops/s
# Warmup Iteration  11: 2933309.731 ops/s
# Warmup Iteration  12: 2897721.153 ops/s
# Warmup Iteration  13: 2944322.711 ops/s
# Warmup Iteration  14: 2949873.894 ops/s
# Warmup Iteration  15: 2942617.845 ops/s
# Warmup Iteration  16: 2934478.690 ops/s
# Warmup Iteration  17: 2942276.477 ops/s
# Warmup Iteration  18: 2929234.373 ops/s
# Warmup Iteration  19: 2932189.030 ops/s
# Warmup Iteration  20: 2940889.623 ops/s
# Warmup Iteration  21: 2948852.736 ops/s
# Warmup Iteration  22: 2919232.876 ops/s
# Warmup Iteration  23: 2941220.428 ops/s
# Warmup Iteration  24: 2944396.003 ops/s
# Warmup Iteration  25: 2938082.527 ops/s
# Warmup Iteration  26: 2937293.801 ops/s
# Warmup Iteration  27: 2944071.776 ops/s
# Warmup Iteration  28: 2940848.792 ops/s
# Warmup Iteration  29: 2936556.471 ops/s
# Warmup Iteration  30: 2942771.986 ops/s
Iteration   1: 2942251.946 ops/s
Iteration   2: 2943719.739 ops/s
Iteration   3: 2896973.954 ops/s
Iteration   4: 2931606.269 ops/s
Iteration   5: 2934403.975 ops/s
Iteration   6: 2949127.167 ops/s
Iteration   7: 2930057.295 ops/s
Iteration   8: 2942684.501 ops/s
Iteration   9: 2928677.499 ops/s
Iteration  10: 2941775.885 ops/s
Iteration  11: 2940370.191 ops/s
Iteration  12: 2953227.829 ops/s
Iteration  13: 2936944.776 ops/s
Iteration  14: 2950569.558 ops/s
Iteration  15: 2944880.435 ops/s
Iteration  16: 2949599.028 ops/s
Iteration  17: 2896796.697 ops/s
Iteration  18: 2944263.482 ops/s
Iteration  19: 2947465.024 ops/s
Iteration  20: 2947386.699 ops/s
Iteration  21: 2942952.209 ops/s
Iteration  22: 2942439.552 ops/s
Iteration  23: 2946623.115 ops/s
Iteration  24: 2936692.384 ops/s
Iteration  25: 2946894.956 ops/s
Iteration  26: 2944323.192 ops/s
Iteration  27: 2944090.373 ops/s
Iteration  28: 2955661.473 ops/s
Iteration  29: 2944582.331 ops/s
Iteration  30: 2912923.106 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndex":
  2938998.821 ±(99.9%) 9466.086 ops/s [Average]
  (min, avg, max) = (2896796.697, 2938998.821, 2955661.473), stdev = 14168.392
  CI (99.9%): [2929532.736, 2948464.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_selectWithIndex  thrpt   30  2938998.821 ± 9466.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1336170.805 ops/s
# Warmup Iteration   2: 2594689.180 ops/s
# Warmup Iteration   3: 2855039.590 ops/s
# Warmup Iteration   4: 2880524.203 ops/s
# Warmup Iteration   5: 2374344.472 ops/s
# Warmup Iteration   6: 2882062.512 ops/s
# Warmup Iteration   7: 2865012.245 ops/s
# Warmup Iteration   8: 2861451.618 ops/s
# Warmup Iteration   9: 2883970.790 ops/s
# Warmup Iteration  10: 2884544.814 ops/s
# Warmup Iteration  11: 2868474.036 ops/s
# Warmup Iteration  12: 2877571.870 ops/s
# Warmup Iteration  13: 2884606.060 ops/s
# Warmup Iteration  14: 2852487.355 ops/s
# Warmup Iteration  15: 2886811.799 ops/s
# Warmup Iteration  16: 2882562.354 ops/s
# Warmup Iteration  17: 2880443.174 ops/s
# Warmup Iteration  18: 2880575.603 ops/s
# Warmup Iteration  19: 2886673.464 ops/s
# Warmup Iteration  20: 2887768.438 ops/s
# Warmup Iteration  21: 2862621.264 ops/s
# Warmup Iteration  22: 2887396.267 ops/s
# Warmup Iteration  23: 2855947.017 ops/s
# Warmup Iteration  24: 2869062.835 ops/s
# Warmup Iteration  25: 2880988.259 ops/s
# Warmup Iteration  26: 2880064.810 ops/s
# Warmup Iteration  27: 2878901.680 ops/s
# Warmup Iteration  28: 2886047.922 ops/s
# Warmup Iteration  29: 2888776.898 ops/s
# Warmup Iteration  30: 2882073.151 ops/s
Iteration   1: 2887404.531 ops/s
Iteration   2: 2873636.267 ops/s
Iteration   3: 2890955.625 ops/s
Iteration   4: 2885441.355 ops/s
Iteration   5: 2888449.032 ops/s
Iteration   6: 2887617.388 ops/s
Iteration   7: 2878148.506 ops/s
Iteration   8: 2891375.393 ops/s
Iteration   9: 2836773.977 ops/s
Iteration  10: 2879007.756 ops/s
Iteration  11: 2893725.368 ops/s
Iteration  12: 2843057.615 ops/s
Iteration  13: 2880474.820 ops/s
Iteration  14: 2887343.427 ops/s
Iteration  15: 2878958.397 ops/s
Iteration  16: 2874669.020 ops/s
Iteration  17: 2884258.841 ops/s
Iteration  18: 2830474.090 ops/s
Iteration  19: 2861835.668 ops/s
Iteration  20: 2882368.073 ops/s
Iteration  21: 2882452.775 ops/s
Iteration  22: 2882719.945 ops/s
Iteration  23: 2841097.204 ops/s
Iteration  24: 2841484.421 ops/s
Iteration  25: 2862433.480 ops/s
Iteration  26: 2885050.496 ops/s
Iteration  27: 2844889.926 ops/s
Iteration  28: 2892188.568 ops/s
Iteration  29: 2872777.936 ops/s
Iteration  30: 2878715.050 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget":
  2873326.165 ±(99.9%) 12568.769 ops/s [Average]
  (min, avg, max) = (2830474.090, 2873326.165, 2893725.368), stdev = 18812.343
  CI (99.9%): [2860757.396, 2885894.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  2873326.165 ± 12568.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388556.226 ops/s
# Warmup Iteration   2: 817163.601 ops/s
# Warmup Iteration   3: 885127.091 ops/s
# Warmup Iteration   4: 887221.101 ops/s
# Warmup Iteration   5: 742443.317 ops/s
# Warmup Iteration   6: 890220.477 ops/s
# Warmup Iteration   7: 884712.326 ops/s
# Warmup Iteration   8: 892775.748 ops/s
# Warmup Iteration   9: 889436.301 ops/s
# Warmup Iteration  10: 888741.675 ops/s
# Warmup Iteration  11: 891588.715 ops/s
# Warmup Iteration  12: 878622.126 ops/s
# Warmup Iteration  13: 887984.154 ops/s
# Warmup Iteration  14: 886451.935 ops/s
# Warmup Iteration  15: 889170.139 ops/s
# Warmup Iteration  16: 887232.609 ops/s
# Warmup Iteration  17: 890506.830 ops/s
# Warmup Iteration  18: 884050.482 ops/s
# Warmup Iteration  19: 886360.892 ops/s
# Warmup Iteration  20: 882569.047 ops/s
# Warmup Iteration  21: 886532.232 ops/s
# Warmup Iteration  22: 881659.582 ops/s
# Warmup Iteration  23: 890616.671 ops/s
# Warmup Iteration  24: 893167.032 ops/s
# Warmup Iteration  25: 881893.495 ops/s
# Warmup Iteration  26: 892639.802 ops/s
# Warmup Iteration  27: 889627.272 ops/s
# Warmup Iteration  28: 890725.201 ops/s
# Warmup Iteration  29: 891079.540 ops/s
# Warmup Iteration  30: 884172.025 ops/s
Iteration   1: 888894.131 ops/s
Iteration   2: 890317.811 ops/s
Iteration   3: 888208.688 ops/s
Iteration   4: 887974.817 ops/s
Iteration   5: 893752.419 ops/s
Iteration   6: 889795.665 ops/s
Iteration   7: 890330.165 ops/s
Iteration   8: 891888.713 ops/s
Iteration   9: 892171.768 ops/s
Iteration  10: 887874.229 ops/s
Iteration  11: 888188.189 ops/s
Iteration  12: 889761.269 ops/s
Iteration  13: 887859.687 ops/s
Iteration  14: 892716.496 ops/s
Iteration  15: 892437.585 ops/s
Iteration  16: 878241.789 ops/s
Iteration  17: 875683.798 ops/s
Iteration  18: 893150.661 ops/s
Iteration  19: 890603.967 ops/s
Iteration  20: 889411.368 ops/s
Iteration  21: 891397.697 ops/s
Iteration  22: 892065.540 ops/s
Iteration  23: 892331.474 ops/s
Iteration  24: 890803.692 ops/s
Iteration  25: 894152.681 ops/s
Iteration  26: 887015.884 ops/s
Iteration  27: 891097.484 ops/s
Iteration  28: 892736.437 ops/s
Iteration  29: 878940.738 ops/s
Iteration  30: 876726.104 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_selectWith_target":
  888884.365 ±(99.9%) 3326.864 ops/s [Average]
  (min, avg, max) = (875683.798, 888884.365, 894152.681), stdev = 4979.494
  CI (99.9%): [885557.501, 892211.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_selectWith_target  thrpt   30  888884.365 ± 3326.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38898.776 ops/s
# Warmup Iteration   2: 50072.575 ops/s
# Warmup Iteration   3: 74540.733 ops/s
# Warmup Iteration   4: 75714.585 ops/s
# Warmup Iteration   5: 74790.711 ops/s
# Warmup Iteration   6: 75898.019 ops/s
# Warmup Iteration   7: 75658.574 ops/s
# Warmup Iteration   8: 75696.137 ops/s
# Warmup Iteration   9: 75261.568 ops/s
# Warmup Iteration  10: 63800.097 ops/s
# Warmup Iteration  11: 75796.603 ops/s
# Warmup Iteration  12: 75173.323 ops/s
# Warmup Iteration  13: 75892.802 ops/s
# Warmup Iteration  14: 75808.820 ops/s
# Warmup Iteration  15: 75852.467 ops/s
# Warmup Iteration  16: 75601.072 ops/s
# Warmup Iteration  17: 75934.727 ops/s
# Warmup Iteration  18: 76079.995 ops/s
# Warmup Iteration  19: 75233.391 ops/s
# Warmup Iteration  20: 75498.209 ops/s
# Warmup Iteration  21: 75886.480 ops/s
# Warmup Iteration  22: 75890.317 ops/s
# Warmup Iteration  23: 76045.741 ops/s
# Warmup Iteration  24: 75880.954 ops/s
# Warmup Iteration  25: 75850.520 ops/s
# Warmup Iteration  26: 75941.940 ops/s
# Warmup Iteration  27: 75881.232 ops/s
# Warmup Iteration  28: 73831.831 ops/s
# Warmup Iteration  29: 75722.694 ops/s
# Warmup Iteration  30: 75861.496 ops/s
Iteration   1: 74854.299 ops/s
Iteration   2: 76087.466 ops/s
Iteration   3: 75722.868 ops/s
Iteration   4: 75814.900 ops/s
Iteration   5: 76062.624 ops/s
Iteration   6: 75971.082 ops/s
Iteration   7: 76172.619 ops/s
Iteration   8: 75782.795 ops/s
Iteration   9: 75912.536 ops/s
Iteration  10: 75573.686 ops/s
Iteration  11: 75928.509 ops/s
Iteration  12: 75779.691 ops/s
Iteration  13: 75355.595 ops/s
Iteration  14: 75886.904 ops/s
Iteration  15: 76012.998 ops/s
Iteration  16: 76039.042 ops/s
Iteration  17: 75099.353 ops/s
Iteration  18: 76332.754 ops/s
Iteration  19: 76111.732 ops/s
Iteration  20: 76178.701 ops/s
Iteration  21: 76043.350 ops/s
Iteration  22: 76189.122 ops/s
Iteration  23: 76389.019 ops/s
Iteration  24: 76382.627 ops/s
Iteration  25: 75964.407 ops/s
Iteration  26: 76407.768 ops/s
Iteration  27: 76387.010 ops/s
Iteration  28: 76322.521 ops/s
Iteration  29: 76153.984 ops/s
Iteration  30: 75890.934 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_serialization":
  75960.363 ±(99.9%) 244.927 ops/s [Average]
  (min, avg, max) = (74854.299, 75960.363, 76407.768), stdev = 366.595
  CI (99.9%): [75715.436, 76205.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
ListAdapterTest._Benchmark.benchmark_serialization  thrpt   30  75960.363 ± 244.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4014007.103 ops/s
# Warmup Iteration   2: 8834197.422 ops/s
# Warmup Iteration   3: 8850154.592 ops/s
# Warmup Iteration   4: 7387644.329 ops/s
# Warmup Iteration   5: 8776868.931 ops/s
# Warmup Iteration   6: 8836629.937 ops/s
# Warmup Iteration   7: 8789903.801 ops/s
# Warmup Iteration   8: 8856143.210 ops/s
# Warmup Iteration   9: 8835764.623 ops/s
# Warmup Iteration  10: 8850090.037 ops/s
# Warmup Iteration  11: 8859264.099 ops/s
# Warmup Iteration  12: 8780609.613 ops/s
# Warmup Iteration  13: 8792291.261 ops/s
# Warmup Iteration  14: 8828289.958 ops/s
# Warmup Iteration  15: 8864176.368 ops/s
# Warmup Iteration  16: 8860266.884 ops/s
# Warmup Iteration  17: 8832309.033 ops/s
# Warmup Iteration  18: 8843672.836 ops/s
# Warmup Iteration  19: 8829661.724 ops/s
# Warmup Iteration  20: 8842319.338 ops/s
# Warmup Iteration  21: 8852133.014 ops/s
# Warmup Iteration  22: 8866650.377 ops/s
# Warmup Iteration  23: 8853676.820 ops/s
# Warmup Iteration  24: 8745708.953 ops/s
# Warmup Iteration  25: 8782909.509 ops/s
# Warmup Iteration  26: 8806723.346 ops/s
# Warmup Iteration  27: 8750857.787 ops/s
# Warmup Iteration  28: 8793110.182 ops/s
# Warmup Iteration  29: 8842894.364 ops/s
# Warmup Iteration  30: 8760573.577 ops/s
Iteration   1: 8688986.515 ops/s
Iteration   2: 8805451.682 ops/s
Iteration   3: 8851761.190 ops/s
Iteration   4: 8696964.032 ops/s
Iteration   5: 8829511.751 ops/s
Iteration   6: 8858670.536 ops/s
Iteration   7: 8659178.956 ops/s
Iteration   8: 8843318.822 ops/s
Iteration   9: 8803808.815 ops/s
Iteration  10: 8833161.804 ops/s
Iteration  11: 8830507.651 ops/s
Iteration  12: 8816577.468 ops/s
Iteration  13: 8824239.841 ops/s
Iteration  14: 8817549.027 ops/s
Iteration  15: 8764131.201 ops/s
Iteration  16: 8796260.320 ops/s
Iteration  17: 8810312.171 ops/s
Iteration  18: 8828687.370 ops/s
Iteration  19: 8768242.649 ops/s
Iteration  20: 8804961.258 ops/s
Iteration  21: 8833996.690 ops/s
Iteration  22: 8795963.897 ops/s
Iteration  23: 8834438.668 ops/s
Iteration  24: 8854488.622 ops/s
Iteration  25: 8819711.277 ops/s
Iteration  26: 8817245.530 ops/s
Iteration  27: 8695730.221 ops/s
Iteration  28: 8826247.620 ops/s
Iteration  29: 8819189.968 ops/s
Iteration  30: 8831376.569 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_set":
  8802022.404 ±(99.9%) 34416.055 ops/s [Average]
  (min, avg, max) = (8659178.956, 8802022.404, 8858670.536), stdev = 51512.335
  CI (99.9%): [8767606.349, 8836438.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_set  thrpt   30  8802022.404 ± 34416.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3225605.976 ops/s
# Warmup Iteration   2: 6685900.869 ops/s
# Warmup Iteration   3: 6899960.770 ops/s
# Warmup Iteration   4: 7039522.266 ops/s
# Warmup Iteration   5: 5842623.464 ops/s
# Warmup Iteration   6: 7023880.702 ops/s
# Warmup Iteration   7: 7060503.930 ops/s
# Warmup Iteration   8: 7042148.234 ops/s
# Warmup Iteration   9: 7049178.148 ops/s
# Warmup Iteration  10: 7044266.102 ops/s
# Warmup Iteration  11: 7039061.074 ops/s
# Warmup Iteration  12: 7054427.154 ops/s
# Warmup Iteration  13: 7003018.791 ops/s
# Warmup Iteration  14: 7027335.864 ops/s
# Warmup Iteration  15: 7037760.124 ops/s
# Warmup Iteration  16: 7015858.328 ops/s
# Warmup Iteration  17: 7012660.792 ops/s
# Warmup Iteration  18: 7024426.719 ops/s
# Warmup Iteration  19: 6976736.869 ops/s
# Warmup Iteration  20: 7030478.527 ops/s
# Warmup Iteration  21: 7031753.741 ops/s
# Warmup Iteration  22: 7025903.026 ops/s
# Warmup Iteration  23: 6976359.471 ops/s
# Warmup Iteration  24: 7024808.494 ops/s
# Warmup Iteration  25: 7039306.921 ops/s
# Warmup Iteration  26: 7048640.964 ops/s
# Warmup Iteration  27: 7033674.919 ops/s
# Warmup Iteration  28: 7030037.148 ops/s
# Warmup Iteration  29: 7014840.317 ops/s
# Warmup Iteration  30: 7048849.239 ops/s
Iteration   1: 7061980.861 ops/s
Iteration   2: 7049622.854 ops/s
Iteration   3: 7037211.503 ops/s
Iteration   4: 6992868.212 ops/s
Iteration   5: 6886108.948 ops/s
Iteration   6: 7068703.221 ops/s
Iteration   7: 7058251.032 ops/s
Iteration   8: 7042117.973 ops/s
Iteration   9: 7034997.077 ops/s
Iteration  10: 7016155.765 ops/s
Iteration  11: 6938891.863 ops/s
Iteration  12: 7042430.459 ops/s
Iteration  13: 7050947.200 ops/s
Iteration  14: 6987377.583 ops/s
Iteration  15: 7041101.292 ops/s
Iteration  16: 7054217.843 ops/s
Iteration  17: 7044502.882 ops/s
Iteration  18: 7040480.843 ops/s
Iteration  19: 7018768.373 ops/s
Iteration  20: 7022224.579 ops/s
Iteration  21: 6995178.381 ops/s
Iteration  22: 6894326.455 ops/s
Iteration  23: 7004839.016 ops/s
Iteration  24: 6924860.433 ops/s
Iteration  25: 6890201.611 ops/s
Iteration  26: 6940856.141 ops/s
Iteration  27: 7043420.785 ops/s
Iteration  28: 6916335.410 ops/s
Iteration  29: 7064871.499 ops/s
Iteration  30: 7005016.703 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sort":
  7005628.893 ±(99.9%) 38047.633 ops/s [Average]
  (min, avg, max) = (6886108.948, 7005628.893, 7068703.221), stdev = 56947.911
  CI (99.9%): [6967581.260, 7043676.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sort  thrpt   30  7005628.893 ± 38047.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 988356.204 ops/s
# Warmup Iteration   2: 1176801.493 ops/s
# Warmup Iteration   3: 1476805.103 ops/s
# Warmup Iteration   4: 1480142.595 ops/s
# Warmup Iteration   5: 1504372.024 ops/s
# Warmup Iteration   6: 1475454.909 ops/s
# Warmup Iteration   7: 1503799.878 ops/s
# Warmup Iteration   8: 1499429.864 ops/s
# Warmup Iteration   9: 1310746.486 ops/s
# Warmup Iteration  10: 1420707.926 ops/s
# Warmup Iteration  11: 1498870.428 ops/s
# Warmup Iteration  12: 1505009.212 ops/s
# Warmup Iteration  13: 1502618.873 ops/s
# Warmup Iteration  14: 1505522.099 ops/s
# Warmup Iteration  15: 1496004.168 ops/s
# Warmup Iteration  16: 1495121.027 ops/s
# Warmup Iteration  17: 1506729.455 ops/s
# Warmup Iteration  18: 1495699.258 ops/s
# Warmup Iteration  19: 1488764.316 ops/s
# Warmup Iteration  20: 1506310.918 ops/s
# Warmup Iteration  21: 1502189.054 ops/s
# Warmup Iteration  22: 1495370.209 ops/s
# Warmup Iteration  23: 1499442.933 ops/s
# Warmup Iteration  24: 1504572.882 ops/s
# Warmup Iteration  25: 1500632.229 ops/s
# Warmup Iteration  26: 1505114.208 ops/s
# Warmup Iteration  27: 1506116.308 ops/s
# Warmup Iteration  28: 1502971.330 ops/s
# Warmup Iteration  29: 1506396.693 ops/s
# Warmup Iteration  30: 1497715.507 ops/s
Iteration   1: 1478869.663 ops/s
Iteration   2: 1503241.959 ops/s
Iteration   3: 1509235.264 ops/s
Iteration   4: 1502596.413 ops/s
Iteration   5: 1500969.602 ops/s
Iteration   6: 1509285.807 ops/s
Iteration   7: 1491453.393 ops/s
Iteration   8: 1503446.505 ops/s
Iteration   9: 1504030.199 ops/s
Iteration  10: 1502940.266 ops/s
Iteration  11: 1505345.410 ops/s
Iteration  12: 1506013.076 ops/s
Iteration  13: 1481526.326 ops/s
Iteration  14: 1492354.475 ops/s
Iteration  15: 1504316.793 ops/s
Iteration  16: 1510533.062 ops/s
Iteration  17: 1471655.451 ops/s
Iteration  18: 1464160.342 ops/s
Iteration  19: 1506445.962 ops/s
Iteration  20: 1501412.945 ops/s
Iteration  21: 1479240.921 ops/s
Iteration  22: 1507826.497 ops/s
Iteration  23: 1503180.628 ops/s
Iteration  24: 1506781.528 ops/s
Iteration  25: 1498248.266 ops/s
Iteration  26: 1504349.327 ops/s
Iteration  27: 1500202.444 ops/s
Iteration  28: 1499929.068 ops/s
Iteration  29: 1505454.344 ops/s
Iteration  30: 1504268.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis":
  1498643.823 ±(99.9%) 7880.469 ops/s [Average]
  (min, avg, max) = (1464160.342, 1498643.823, 1510533.062), stdev = 11795.116
  CI (99.9%): [1490763.354, 1506524.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis  thrpt   30  1498643.823 ± 7880.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 348961.533 ops/s
# Warmup Iteration   2: 457649.310 ops/s
# Warmup Iteration   3: 627348.735 ops/s
# Warmup Iteration   4: 629492.467 ops/s
# Warmup Iteration   5: 631908.289 ops/s
# Warmup Iteration   6: 633164.223 ops/s
# Warmup Iteration   7: 635128.673 ops/s
# Warmup Iteration   8: 489476.059 ops/s
# Warmup Iteration   9: 633117.321 ops/s
# Warmup Iteration  10: 632021.436 ops/s
# Warmup Iteration  11: 632464.301 ops/s
# Warmup Iteration  12: 632281.454 ops/s
# Warmup Iteration  13: 630971.881 ops/s
# Warmup Iteration  14: 620409.831 ops/s
# Warmup Iteration  15: 633250.039 ops/s
# Warmup Iteration  16: 626126.051 ops/s
# Warmup Iteration  17: 623832.055 ops/s
# Warmup Iteration  18: 632952.210 ops/s
# Warmup Iteration  19: 628214.485 ops/s
# Warmup Iteration  20: 630585.651 ops/s
# Warmup Iteration  21: 628374.631 ops/s
# Warmup Iteration  22: 632562.743 ops/s
# Warmup Iteration  23: 626523.687 ops/s
# Warmup Iteration  24: 629208.188 ops/s
# Warmup Iteration  25: 632467.778 ops/s
# Warmup Iteration  26: 634454.695 ops/s
# Warmup Iteration  27: 631568.339 ops/s
# Warmup Iteration  28: 634152.948 ops/s
# Warmup Iteration  29: 632160.349 ops/s
# Warmup Iteration  30: 627121.816 ops/s
Iteration   1: 634219.187 ops/s
Iteration   2: 634409.088 ops/s
Iteration   3: 619722.370 ops/s
Iteration   4: 630932.704 ops/s
Iteration   5: 633952.518 ops/s
Iteration   6: 618714.148 ops/s
Iteration   7: 635004.698 ops/s
Iteration   8: 635313.060 ops/s
Iteration   9: 633033.334 ops/s
Iteration  10: 625609.716 ops/s
Iteration  11: 632210.931 ops/s
Iteration  12: 632835.527 ops/s
Iteration  13: 630701.751 ops/s
Iteration  14: 630381.469 ops/s
Iteration  15: 634629.867 ops/s
Iteration  16: 631634.233 ops/s
Iteration  17: 634748.400 ops/s
Iteration  18: 625350.075 ops/s
Iteration  19: 624365.956 ops/s
Iteration  20: 628109.868 ops/s
Iteration  21: 629123.783 ops/s
Iteration  22: 633015.246 ops/s
Iteration  23: 633750.215 ops/s
Iteration  24: 634887.496 ops/s
Iteration  25: 638372.522 ops/s
Iteration  26: 633626.174 ops/s
Iteration  27: 635881.700 ops/s
Iteration  28: 637094.395 ops/s
Iteration  29: 634291.547 ops/s
Iteration  30: 636674.036 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisBy":
  631753.201 ±(99.9%) 3217.042 ops/s [Average]
  (min, avg, max) = (618714.148, 631753.201, 638372.522), stdev = 4815.118
  CI (99.9%): [628536.158, 634970.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisBy  thrpt   30  631753.201 ± 3217.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1675196.009 ops/s
# Warmup Iteration   2: 3275725.183 ops/s
# Warmup Iteration   3: 3508048.219 ops/s
# Warmup Iteration   4: 3543441.753 ops/s
# Warmup Iteration   5: 2933985.245 ops/s
# Warmup Iteration   6: 3522528.043 ops/s
# Warmup Iteration   7: 3518602.520 ops/s
# Warmup Iteration   8: 3544342.567 ops/s
# Warmup Iteration   9: 3507192.547 ops/s
# Warmup Iteration  10: 3540136.894 ops/s
# Warmup Iteration  11: 3521218.164 ops/s
# Warmup Iteration  12: 3535940.528 ops/s
# Warmup Iteration  13: 3543666.697 ops/s
# Warmup Iteration  14: 3530522.929 ops/s
# Warmup Iteration  15: 3532302.578 ops/s
# Warmup Iteration  16: 3538953.136 ops/s
# Warmup Iteration  17: 3522284.711 ops/s
# Warmup Iteration  18: 3520982.013 ops/s
# Warmup Iteration  19: 3510004.400 ops/s
# Warmup Iteration  20: 3513156.703 ops/s
# Warmup Iteration  21: 3527468.949 ops/s
# Warmup Iteration  22: 3526585.618 ops/s
# Warmup Iteration  23: 3519995.520 ops/s
# Warmup Iteration  24: 3528455.021 ops/s
# Warmup Iteration  25: 3503890.692 ops/s
# Warmup Iteration  26: 3509332.441 ops/s
# Warmup Iteration  27: 3519842.035 ops/s
# Warmup Iteration  28: 3500838.692 ops/s
# Warmup Iteration  29: 3509377.319 ops/s
# Warmup Iteration  30: 3521364.993 ops/s
Iteration   1: 3519053.936 ops/s
Iteration   2: 3504619.815 ops/s
Iteration   3: 3507196.381 ops/s
Iteration   4: 3443245.554 ops/s
Iteration   5: 3454544.344 ops/s
Iteration   6: 3530769.913 ops/s
Iteration   7: 3472331.385 ops/s
Iteration   8: 3536112.759 ops/s
Iteration   9: 3527601.259 ops/s
Iteration  10: 3527564.757 ops/s
Iteration  11: 3523747.157 ops/s
Iteration  12: 3518965.990 ops/s
Iteration  13: 3448374.618 ops/s
Iteration  14: 3521691.581 ops/s
Iteration  15: 3504475.761 ops/s
Iteration  16: 3533967.785 ops/s
Iteration  17: 3518256.668 ops/s
Iteration  18: 3453342.616 ops/s
Iteration  19: 3525225.178 ops/s
Iteration  20: 3520440.437 ops/s
Iteration  21: 3527048.861 ops/s
Iteration  22: 3530624.055 ops/s
Iteration  23: 3546164.096 ops/s
Iteration  24: 3530657.765 ops/s
Iteration  25: 3533591.989 ops/s
Iteration  26: 3486721.812 ops/s
Iteration  27: 3459850.278 ops/s
Iteration  28: 3454920.810 ops/s
Iteration  29: 3474564.962 ops/s
Iteration  30: 3535509.068 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByBoolean":
  3505706.053 ±(99.9%) 21373.683 ops/s [Average]
  (min, avg, max) = (3443245.554, 3505706.053, 3546164.096), stdev = 31991.125
  CI (99.9%): [3484332.370, 3527079.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  3505706.053 ± 21373.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 755919.870 ops/s
# Warmup Iteration   2: 800518.341 ops/s
# Warmup Iteration   3: 1035960.331 ops/s
# Warmup Iteration   4: 1064655.500 ops/s
# Warmup Iteration   5: 1071240.794 ops/s
# Warmup Iteration   6: 1067052.534 ops/s
# Warmup Iteration   7: 1078372.291 ops/s
# Warmup Iteration   8: 1077681.337 ops/s
# Warmup Iteration   9: 1068500.372 ops/s
# Warmup Iteration  10: 1078964.775 ops/s
# Warmup Iteration  11: 1074853.813 ops/s
# Warmup Iteration  12: 944851.802 ops/s
# Warmup Iteration  13: 1022601.444 ops/s
# Warmup Iteration  14: 1071698.124 ops/s
# Warmup Iteration  15: 1074788.910 ops/s
# Warmup Iteration  16: 1083680.776 ops/s
# Warmup Iteration  17: 1079287.935 ops/s
# Warmup Iteration  18: 1083501.085 ops/s
# Warmup Iteration  19: 1075105.339 ops/s
# Warmup Iteration  20: 1079349.321 ops/s
# Warmup Iteration  21: 1081946.502 ops/s
# Warmup Iteration  22: 1084298.337 ops/s
# Warmup Iteration  23: 1078728.556 ops/s
# Warmup Iteration  24: 1081658.976 ops/s
# Warmup Iteration  25: 1070809.633 ops/s
# Warmup Iteration  26: 1083634.278 ops/s
# Warmup Iteration  27: 1080863.067 ops/s
# Warmup Iteration  28: 1079696.480 ops/s
# Warmup Iteration  29: 1069739.411 ops/s
# Warmup Iteration  30: 1075213.154 ops/s
Iteration   1: 1084635.388 ops/s
Iteration   2: 1080380.013 ops/s
Iteration   3: 1082910.415 ops/s
Iteration   4: 1080691.895 ops/s
Iteration   5: 1082293.513 ops/s
Iteration   6: 1074143.659 ops/s
Iteration   7: 1065482.748 ops/s
Iteration   8: 1081104.379 ops/s
Iteration   9: 1060045.331 ops/s
Iteration  10: 1082315.481 ops/s
Iteration  11: 1072736.400 ops/s
Iteration  12: 1074540.646 ops/s
Iteration  13: 1080445.123 ops/s
Iteration  14: 1083365.041 ops/s
Iteration  15: 1078953.212 ops/s
Iteration  16: 1083575.258 ops/s
Iteration  17: 1082069.598 ops/s
Iteration  18: 1084003.258 ops/s
Iteration  19: 1080029.845 ops/s
Iteration  20: 1082044.522 ops/s
Iteration  21: 1083682.868 ops/s
Iteration  22: 1083945.478 ops/s
Iteration  23: 1080713.793 ops/s
Iteration  24: 1086271.430 ops/s
Iteration  25: 1084315.267 ops/s
Iteration  26: 1059020.894 ops/s
Iteration  27: 1081125.976 ops/s
Iteration  28: 1082758.701 ops/s
Iteration  29: 1077316.288 ops/s
Iteration  30: 1076661.210 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByByte":
  1079052.588 ±(99.9%) 4551.914 ops/s [Average]
  (min, avg, max) = (1059020.894, 1079052.588, 1086271.430), stdev = 6813.091
  CI (99.9%): [1074500.674, 1083604.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1079052.588 ± 4551.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033666.771 ops/s
# Warmup Iteration   2: 1297421.309 ops/s
# Warmup Iteration   3: 1665405.403 ops/s
# Warmup Iteration   4: 1656198.561 ops/s
# Warmup Iteration   5: 1663670.989 ops/s
# Warmup Iteration   6: 1655787.119 ops/s
# Warmup Iteration   7: 1663539.802 ops/s
# Warmup Iteration   8: 1625218.948 ops/s
# Warmup Iteration   9: 1404869.564 ops/s
# Warmup Iteration  10: 1668520.127 ops/s
# Warmup Iteration  11: 1670694.414 ops/s
# Warmup Iteration  12: 1663059.285 ops/s
# Warmup Iteration  13: 1641330.326 ops/s
# Warmup Iteration  14: 1662578.329 ops/s
# Warmup Iteration  15: 1664157.604 ops/s
# Warmup Iteration  16: 1646744.684 ops/s
# Warmup Iteration  17: 1649232.032 ops/s
# Warmup Iteration  18: 1656796.046 ops/s
# Warmup Iteration  19: 1661921.065 ops/s
# Warmup Iteration  20: 1666593.501 ops/s
# Warmup Iteration  21: 1657477.960 ops/s
# Warmup Iteration  22: 1664083.721 ops/s
# Warmup Iteration  23: 1662339.123 ops/s
# Warmup Iteration  24: 1666755.423 ops/s
# Warmup Iteration  25: 1660079.225 ops/s
# Warmup Iteration  26: 1665081.700 ops/s
# Warmup Iteration  27: 1664708.979 ops/s
# Warmup Iteration  28: 1638296.487 ops/s
# Warmup Iteration  29: 1658206.705 ops/s
# Warmup Iteration  30: 1650284.997 ops/s
Iteration   1: 1668820.223 ops/s
Iteration   2: 1665926.677 ops/s
Iteration   3: 1654397.599 ops/s
Iteration   4: 1664573.160 ops/s
Iteration   5: 1656309.331 ops/s
Iteration   6: 1667766.432 ops/s
Iteration   7: 1665985.259 ops/s
Iteration   8: 1662708.842 ops/s
Iteration   9: 1617599.392 ops/s
Iteration  10: 1647439.584 ops/s
Iteration  11: 1663062.394 ops/s
Iteration  12: 1667522.236 ops/s
Iteration  13: 1657059.141 ops/s
Iteration  14: 1663138.109 ops/s
Iteration  15: 1665398.521 ops/s
Iteration  16: 1643899.191 ops/s
Iteration  17: 1669085.236 ops/s
Iteration  18: 1643826.466 ops/s
Iteration  19: 1668027.479 ops/s
Iteration  20: 1669748.248 ops/s
Iteration  21: 1639839.477 ops/s
Iteration  22: 1647087.766 ops/s
Iteration  23: 1658902.764 ops/s
Iteration  24: 1664501.750 ops/s
Iteration  25: 1665849.170 ops/s
Iteration  26: 1663383.703 ops/s
Iteration  27: 1665694.576 ops/s
Iteration  28: 1663959.729 ops/s
Iteration  29: 1667105.261 ops/s
Iteration  30: 1637639.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByChar":
  1658541.907 ±(99.9%) 8125.518 ops/s [Average]
  (min, avg, max) = (1617599.392, 1658541.907, 1669748.248), stdev = 12161.894
  CI (99.9%): [1650416.389, 1666667.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1658541.907 ± 8125.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242910.965 ops/s
# Warmup Iteration   2: 405380.965 ops/s
# Warmup Iteration   3: 472074.757 ops/s
# Warmup Iteration   4: 472059.709 ops/s
# Warmup Iteration   5: 470527.844 ops/s
# Warmup Iteration   6: 383531.827 ops/s
# Warmup Iteration   7: 470075.373 ops/s
# Warmup Iteration   8: 474884.624 ops/s
# Warmup Iteration   9: 476354.547 ops/s
# Warmup Iteration  10: 471858.258 ops/s
# Warmup Iteration  11: 471935.382 ops/s
# Warmup Iteration  12: 476448.428 ops/s
# Warmup Iteration  13: 476470.238 ops/s
# Warmup Iteration  14: 474123.167 ops/s
# Warmup Iteration  15: 472795.774 ops/s
# Warmup Iteration  16: 475500.431 ops/s
# Warmup Iteration  17: 472787.205 ops/s
# Warmup Iteration  18: 472475.510 ops/s
# Warmup Iteration  19: 478273.699 ops/s
# Warmup Iteration  20: 472274.891 ops/s
# Warmup Iteration  21: 477609.053 ops/s
# Warmup Iteration  22: 474215.321 ops/s
# Warmup Iteration  23: 469070.163 ops/s
# Warmup Iteration  24: 477655.810 ops/s
# Warmup Iteration  25: 476938.686 ops/s
# Warmup Iteration  26: 472878.014 ops/s
# Warmup Iteration  27: 477283.962 ops/s
# Warmup Iteration  28: 477494.916 ops/s
# Warmup Iteration  29: 474340.444 ops/s
# Warmup Iteration  30: 477523.604 ops/s
Iteration   1: 477005.908 ops/s
Iteration   2: 478213.659 ops/s
Iteration   3: 477895.888 ops/s
Iteration   4: 477028.000 ops/s
Iteration   5: 477947.598 ops/s
Iteration   6: 477138.104 ops/s
Iteration   7: 477098.950 ops/s
Iteration   8: 476134.974 ops/s
Iteration   9: 478704.226 ops/s
Iteration  10: 478317.908 ops/s
Iteration  11: 476799.441 ops/s
Iteration  12: 476934.762 ops/s
Iteration  13: 475060.747 ops/s
Iteration  14: 476118.100 ops/s
Iteration  15: 477473.440 ops/s
Iteration  16: 478602.407 ops/s
Iteration  17: 476314.725 ops/s
Iteration  18: 478056.475 ops/s
Iteration  19: 469796.568 ops/s
Iteration  20: 471077.343 ops/s
Iteration  21: 476518.805 ops/s
Iteration  22: 469412.622 ops/s
Iteration  23: 477035.692 ops/s
Iteration  24: 475586.054 ops/s
Iteration  25: 470425.133 ops/s
Iteration  26: 479171.848 ops/s
Iteration  27: 477568.405 ops/s
Iteration  28: 477888.121 ops/s
Iteration  29: 475995.694 ops/s
Iteration  30: 475645.702 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByDouble":
  476232.243 ±(99.9%) 1748.125 ops/s [Average]
  (min, avg, max) = (469412.622, 476232.243, 479171.848), stdev = 2616.511
  CI (99.9%): [474484.118, 477980.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  476232.243 ± 1748.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245402.496 ops/s
# Warmup Iteration   2: 409437.608 ops/s
# Warmup Iteration   3: 479071.965 ops/s
# Warmup Iteration   4: 476768.075 ops/s
# Warmup Iteration   5: 471585.548 ops/s
# Warmup Iteration   6: 380657.996 ops/s
# Warmup Iteration   7: 480216.825 ops/s
# Warmup Iteration   8: 476528.506 ops/s
# Warmup Iteration   9: 478213.266 ops/s
# Warmup Iteration  10: 479089.924 ops/s
# Warmup Iteration  11: 479778.397 ops/s
# Warmup Iteration  12: 479801.063 ops/s
# Warmup Iteration  13: 480661.314 ops/s
# Warmup Iteration  14: 476228.803 ops/s
# Warmup Iteration  15: 481254.294 ops/s
# Warmup Iteration  16: 479611.217 ops/s
# Warmup Iteration  17: 475398.344 ops/s
# Warmup Iteration  18: 472067.186 ops/s
# Warmup Iteration  19: 477559.843 ops/s
# Warmup Iteration  20: 468525.779 ops/s
# Warmup Iteration  21: 474900.421 ops/s
# Warmup Iteration  22: 476043.472 ops/s
# Warmup Iteration  23: 472516.760 ops/s
# Warmup Iteration  24: 477544.026 ops/s
# Warmup Iteration  25: 476421.329 ops/s
# Warmup Iteration  26: 475576.643 ops/s
# Warmup Iteration  27: 476990.480 ops/s
# Warmup Iteration  28: 477316.994 ops/s
# Warmup Iteration  29: 476185.098 ops/s
# Warmup Iteration  30: 470740.982 ops/s
Iteration   1: 476981.738 ops/s
Iteration   2: 476516.501 ops/s
Iteration   3: 475131.629 ops/s
Iteration   4: 476817.960 ops/s
Iteration   5: 475858.758 ops/s
Iteration   6: 475615.132 ops/s
Iteration   7: 472499.335 ops/s
Iteration   8: 476154.119 ops/s
Iteration   9: 476873.823 ops/s
Iteration  10: 471692.927 ops/s
Iteration  11: 473808.801 ops/s
Iteration  12: 473018.768 ops/s
Iteration  13: 469024.186 ops/s
Iteration  14: 476572.243 ops/s
Iteration  15: 468557.603 ops/s
Iteration  16: 475238.354 ops/s
Iteration  17: 477015.278 ops/s
Iteration  18: 477449.288 ops/s
Iteration  19: 475126.645 ops/s
Iteration  20: 476080.970 ops/s
Iteration  21: 474871.390 ops/s
Iteration  22: 469405.043 ops/s
Iteration  23: 476270.360 ops/s
Iteration  24: 476410.978 ops/s
Iteration  25: 477593.320 ops/s
Iteration  26: 477372.651 ops/s
Iteration  27: 469407.184 ops/s
Iteration  28: 476449.224 ops/s
Iteration  29: 477825.957 ops/s
Iteration  30: 476963.388 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByFloat":
  474953.452 ±(99.9%) 1846.311 ops/s [Average]
  (min, avg, max) = (468557.603, 474953.452, 477825.957), stdev = 2763.472
  CI (99.9%): [473107.141, 476799.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  474953.452 ± 1846.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769706.837 ops/s
# Warmup Iteration   2: 822637.314 ops/s
# Warmup Iteration   3: 1077062.663 ops/s
# Warmup Iteration   4: 1112109.634 ops/s
# Warmup Iteration   5: 1116127.427 ops/s
# Warmup Iteration   6: 1084713.413 ops/s
# Warmup Iteration   7: 1106192.872 ops/s
# Warmup Iteration   8: 1113679.842 ops/s
# Warmup Iteration   9: 1116633.776 ops/s
# Warmup Iteration  10: 1116519.231 ops/s
# Warmup Iteration  11: 1116932.620 ops/s
# Warmup Iteration  12: 917290.993 ops/s
# Warmup Iteration  13: 1119139.313 ops/s
# Warmup Iteration  14: 1104298.024 ops/s
# Warmup Iteration  15: 1118262.515 ops/s
# Warmup Iteration  16: 1115544.741 ops/s
# Warmup Iteration  17: 1107651.356 ops/s
# Warmup Iteration  18: 1111075.928 ops/s
# Warmup Iteration  19: 1107770.532 ops/s
# Warmup Iteration  20: 1116111.070 ops/s
# Warmup Iteration  21: 1119254.398 ops/s
# Warmup Iteration  22: 1115306.437 ops/s
# Warmup Iteration  23: 1115172.462 ops/s
# Warmup Iteration  24: 1108102.979 ops/s
# Warmup Iteration  25: 1106734.778 ops/s
# Warmup Iteration  26: 1105836.057 ops/s
# Warmup Iteration  27: 1105854.163 ops/s
# Warmup Iteration  28: 1109641.555 ops/s
# Warmup Iteration  29: 1107236.843 ops/s
# Warmup Iteration  30: 1109268.231 ops/s
Iteration   1: 1107198.505 ops/s
Iteration   2: 1106840.305 ops/s
Iteration   3: 1111903.675 ops/s
Iteration   4: 1107179.361 ops/s
Iteration   5: 1102314.836 ops/s
Iteration   6: 1113279.002 ops/s
Iteration   7: 1111742.435 ops/s
Iteration   8: 1105500.361 ops/s
Iteration   9: 1109717.768 ops/s
Iteration  10: 1095764.543 ops/s
Iteration  11: 1111383.549 ops/s
Iteration  12: 1102582.226 ops/s
Iteration  13: 1108608.388 ops/s
Iteration  14: 1110061.320 ops/s
Iteration  15: 1109933.147 ops/s
Iteration  16: 1109481.534 ops/s
Iteration  17: 1111041.249 ops/s
Iteration  18: 1101865.212 ops/s
Iteration  19: 1111741.793 ops/s
Iteration  20: 1091690.987 ops/s
Iteration  21: 1107381.940 ops/s
Iteration  22: 1105813.373 ops/s
Iteration  23: 1109144.678 ops/s
Iteration  24: 1108010.247 ops/s
Iteration  25: 1099143.802 ops/s
Iteration  26: 1105156.369 ops/s
Iteration  27: 1090344.979 ops/s
Iteration  28: 1108777.488 ops/s
Iteration  29: 1110670.508 ops/s
Iteration  30: 1093684.921 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByInt":
  1105931.950 ±(99.9%) 4148.808 ops/s [Average]
  (min, avg, max) = (1090344.979, 1105931.950, 1113279.002), stdev = 6209.741
  CI (99.9%): [1101783.142, 1110080.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1105931.950 ± 4148.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765232.961 ops/s
# Warmup Iteration   2: 814438.271 ops/s
# Warmup Iteration   3: 1064566.168 ops/s
# Warmup Iteration   4: 1098924.275 ops/s
# Warmup Iteration   5: 1096868.535 ops/s
# Warmup Iteration   6: 1089209.715 ops/s
# Warmup Iteration   7: 1094564.715 ops/s
# Warmup Iteration   8: 1097408.659 ops/s
# Warmup Iteration   9: 1087121.251 ops/s
# Warmup Iteration  10: 1078429.505 ops/s
# Warmup Iteration  11: 1087477.741 ops/s
# Warmup Iteration  12: 898576.388 ops/s
# Warmup Iteration  13: 1094360.310 ops/s
# Warmup Iteration  14: 1096737.198 ops/s
# Warmup Iteration  15: 1093023.558 ops/s
# Warmup Iteration  16: 1086183.902 ops/s
# Warmup Iteration  17: 1085794.608 ops/s
# Warmup Iteration  18: 1095383.950 ops/s
# Warmup Iteration  19: 1095171.958 ops/s
# Warmup Iteration  20: 1088916.577 ops/s
# Warmup Iteration  21: 1091992.151 ops/s
# Warmup Iteration  22: 1088526.992 ops/s
# Warmup Iteration  23: 1091871.104 ops/s
# Warmup Iteration  24: 1095449.153 ops/s
# Warmup Iteration  25: 1090102.340 ops/s
# Warmup Iteration  26: 1095246.547 ops/s
# Warmup Iteration  27: 1088483.507 ops/s
# Warmup Iteration  28: 1086432.570 ops/s
# Warmup Iteration  29: 1092017.484 ops/s
# Warmup Iteration  30: 1094552.559 ops/s
Iteration   1: 1093783.437 ops/s
Iteration   2: 1088202.790 ops/s
Iteration   3: 1091529.882 ops/s
Iteration   4: 1093865.245 ops/s
Iteration   5: 1093231.363 ops/s
Iteration   6: 1091322.149 ops/s
Iteration   7: 1088917.025 ops/s
Iteration   8: 1092992.244 ops/s
Iteration   9: 1077091.084 ops/s
Iteration  10: 1071413.553 ops/s
Iteration  11: 1078202.046 ops/s
Iteration  12: 1093108.223 ops/s
Iteration  13: 1093486.265 ops/s
Iteration  14: 1092041.263 ops/s
Iteration  15: 1088525.101 ops/s
Iteration  16: 1092651.631 ops/s
Iteration  17: 1092010.979 ops/s
Iteration  18: 1091995.416 ops/s
Iteration  19: 1093075.228 ops/s
Iteration  20: 1090208.804 ops/s
Iteration  21: 1092298.597 ops/s
Iteration  22: 1092832.621 ops/s
Iteration  23: 1073160.282 ops/s
Iteration  24: 1092328.546 ops/s
Iteration  25: 1086069.979 ops/s
Iteration  26: 1072764.790 ops/s
Iteration  27: 1083359.009 ops/s
Iteration  28: 1075410.536 ops/s
Iteration  29: 1075715.194 ops/s
Iteration  30: 1088973.229 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByLong":
  1087352.217 ±(99.9%) 5005.375 ops/s [Average]
  (min, avg, max) = (1071413.553, 1087352.217, 1093865.245), stdev = 7491.810
  CI (99.9%): [1082346.842, 1092357.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1087352.217 ± 5005.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759039.354 ops/s
# Warmup Iteration   2: 804367.193 ops/s
# Warmup Iteration   3: 1042331.793 ops/s
# Warmup Iteration   4: 1075944.800 ops/s
# Warmup Iteration   5: 1080151.889 ops/s
# Warmup Iteration   6: 1069675.242 ops/s
# Warmup Iteration   7: 1077283.378 ops/s
# Warmup Iteration   8: 1099135.281 ops/s
# Warmup Iteration   9: 1098940.140 ops/s
# Warmup Iteration  10: 1097010.892 ops/s
# Warmup Iteration  11: 1101640.887 ops/s
# Warmup Iteration  12: 910771.957 ops/s
# Warmup Iteration  13: 1077032.635 ops/s
# Warmup Iteration  14: 1092791.518 ops/s
# Warmup Iteration  15: 1099620.213 ops/s
# Warmup Iteration  16: 1103106.198 ops/s
# Warmup Iteration  17: 1100047.525 ops/s
# Warmup Iteration  18: 1094335.911 ops/s
# Warmup Iteration  19: 1103245.850 ops/s
# Warmup Iteration  20: 1087670.173 ops/s
# Warmup Iteration  21: 1095856.516 ops/s
# Warmup Iteration  22: 1098891.666 ops/s
# Warmup Iteration  23: 1096399.179 ops/s
# Warmup Iteration  24: 1099745.084 ops/s
# Warmup Iteration  25: 1099387.719 ops/s
# Warmup Iteration  26: 1090545.599 ops/s
# Warmup Iteration  27: 1092375.738 ops/s
# Warmup Iteration  28: 1083634.395 ops/s
# Warmup Iteration  29: 1098952.961 ops/s
# Warmup Iteration  30: 1091165.954 ops/s
Iteration   1: 1084587.395 ops/s
Iteration   2: 1098127.487 ops/s
Iteration   3: 1103497.848 ops/s
Iteration   4: 1100707.670 ops/s
Iteration   5: 1084347.742 ops/s
Iteration   6: 1091587.434 ops/s
Iteration   7: 1103689.396 ops/s
Iteration   8: 1096295.745 ops/s
Iteration   9: 1094647.297 ops/s
Iteration  10: 1099949.930 ops/s
Iteration  11: 1098117.157 ops/s
Iteration  12: 1105061.840 ops/s
Iteration  13: 1103686.902 ops/s
Iteration  14: 1098399.212 ops/s
Iteration  15: 1100674.614 ops/s
Iteration  16: 1100830.427 ops/s
Iteration  17: 1082138.471 ops/s
Iteration  18: 1097165.505 ops/s
Iteration  19: 1100981.930 ops/s
Iteration  20: 1104200.802 ops/s
Iteration  21: 1103145.746 ops/s
Iteration  22: 1094197.254 ops/s
Iteration  23: 1102369.339 ops/s
Iteration  24: 1103570.270 ops/s
Iteration  25: 1076433.430 ops/s
Iteration  26: 1104109.229 ops/s
Iteration  27: 1095128.520 ops/s
Iteration  28: 1103359.883 ops/s
Iteration  29: 1104214.140 ops/s
Iteration  30: 1099053.978 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisByShort":
  1097809.220 ±(99.9%) 4902.666 ops/s [Average]
  (min, avg, max) = (1076433.430, 1097809.220, 1105061.840), stdev = 7338.080
  CI (99.9%): [1092906.554, 1102711.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1097809.220 ± 4902.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2459379.561 ops/s
# Warmup Iteration   2: 4052057.405 ops/s
# Warmup Iteration   3: 4723570.190 ops/s
# Warmup Iteration   4: 4766400.023 ops/s
# Warmup Iteration   5: 4771389.563 ops/s
# Warmup Iteration   6: 3936734.510 ops/s
# Warmup Iteration   7: 4762288.906 ops/s
# Warmup Iteration   8: 4770702.458 ops/s
# Warmup Iteration   9: 4774338.661 ops/s
# Warmup Iteration  10: 4774535.456 ops/s
# Warmup Iteration  11: 4734476.769 ops/s
# Warmup Iteration  12: 4754023.772 ops/s
# Warmup Iteration  13: 4776023.617 ops/s
# Warmup Iteration  14: 4717473.583 ops/s
# Warmup Iteration  15: 4758063.973 ops/s
# Warmup Iteration  16: 4766582.706 ops/s
# Warmup Iteration  17: 4761709.572 ops/s
# Warmup Iteration  18: 4745477.285 ops/s
# Warmup Iteration  19: 4719764.699 ops/s
# Warmup Iteration  20: 4720872.793 ops/s
# Warmup Iteration  21: 4764334.819 ops/s
# Warmup Iteration  22: 4722685.011 ops/s
# Warmup Iteration  23: 4753051.671 ops/s
# Warmup Iteration  24: 4764933.011 ops/s
# Warmup Iteration  25: 4712261.311 ops/s
# Warmup Iteration  26: 4752830.225 ops/s
# Warmup Iteration  27: 4752542.993 ops/s
# Warmup Iteration  28: 4731446.456 ops/s
# Warmup Iteration  29: 4701769.990 ops/s
# Warmup Iteration  30: 4714511.930 ops/s
Iteration   1: 4695443.540 ops/s
Iteration   2: 4763887.359 ops/s
Iteration   3: 4769398.863 ops/s
Iteration   4: 4773042.513 ops/s
Iteration   5: 4711007.565 ops/s
Iteration   6: 4724633.120 ops/s
Iteration   7: 4755980.654 ops/s
Iteration   8: 4686922.427 ops/s
Iteration   9: 4752705.370 ops/s
Iteration  10: 4744439.216 ops/s
Iteration  11: 4759747.239 ops/s
Iteration  12: 4762525.397 ops/s
Iteration  13: 4679486.346 ops/s
Iteration  14: 4765285.790 ops/s
Iteration  15: 4763685.269 ops/s
Iteration  16: 4656841.935 ops/s
Iteration  17: 4748418.123 ops/s
Iteration  18: 4751251.355 ops/s
Iteration  19: 4764043.660 ops/s
Iteration  20: 4762839.000 ops/s
Iteration  21: 4718791.321 ops/s
Iteration  22: 4763424.121 ops/s
Iteration  23: 4776438.569 ops/s
Iteration  24: 4606561.287 ops/s
Iteration  25: 4756847.351 ops/s
Iteration  26: 4760918.105 ops/s
Iteration  27: 4672769.387 ops/s
Iteration  28: 4762719.829 ops/s
Iteration  29: 4760805.307 ops/s
Iteration  30: 4738804.476 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  4736988.816 ±(99.9%) 27425.609 ops/s [Average]
  (min, avg, max) = (4606561.287, 4736988.816, 4776438.569), stdev = 41049.364
  CI (99.9%): [4709563.207, 4764414.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  4736988.816 ± 27425.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1906340.037 ops/s
# Warmup Iteration   2: 4401765.738 ops/s
# Warmup Iteration   3: 4451916.649 ops/s
# Warmup Iteration   4: 3697675.180 ops/s
# Warmup Iteration   5: 4493053.788 ops/s
# Warmup Iteration   6: 4479550.254 ops/s
# Warmup Iteration   7: 4437790.751 ops/s
# Warmup Iteration   8: 4485194.855 ops/s
# Warmup Iteration   9: 4492496.445 ops/s
# Warmup Iteration  10: 4451160.649 ops/s
# Warmup Iteration  11: 4418921.373 ops/s
# Warmup Iteration  12: 4486698.950 ops/s
# Warmup Iteration  13: 4475276.334 ops/s
# Warmup Iteration  14: 4454625.411 ops/s
# Warmup Iteration  15: 4467988.057 ops/s
# Warmup Iteration  16: 4480537.894 ops/s
# Warmup Iteration  17: 4434480.374 ops/s
# Warmup Iteration  18: 4459320.764 ops/s
# Warmup Iteration  19: 4456060.044 ops/s
# Warmup Iteration  20: 4468310.893 ops/s
# Warmup Iteration  21: 4432315.520 ops/s
# Warmup Iteration  22: 4417350.225 ops/s
# Warmup Iteration  23: 4471276.659 ops/s
# Warmup Iteration  24: 4437069.929 ops/s
# Warmup Iteration  25: 4457983.316 ops/s
# Warmup Iteration  26: 4456981.871 ops/s
# Warmup Iteration  27: 4463079.839 ops/s
# Warmup Iteration  28: 4464594.965 ops/s
# Warmup Iteration  29: 4469165.434 ops/s
# Warmup Iteration  30: 4463907.341 ops/s
Iteration   1: 4402762.652 ops/s
Iteration   2: 4459251.825 ops/s
Iteration   3: 4459113.187 ops/s
Iteration   4: 4473373.902 ops/s
Iteration   5: 4371546.134 ops/s
Iteration   6: 4458623.356 ops/s
Iteration   7: 4474632.325 ops/s
Iteration   8: 4473918.889 ops/s
Iteration   9: 4460597.912 ops/s
Iteration  10: 4478206.151 ops/s
Iteration  11: 4458772.802 ops/s
Iteration  12: 4467411.676 ops/s
Iteration  13: 4356739.508 ops/s
Iteration  14: 4443016.646 ops/s
Iteration  15: 4440900.355 ops/s
Iteration  16: 4465999.399 ops/s
Iteration  17: 4460034.854 ops/s
Iteration  18: 4437770.673 ops/s
Iteration  19: 4451854.045 ops/s
Iteration  20: 4478899.570 ops/s
Iteration  21: 4466990.645 ops/s
Iteration  22: 4415745.202 ops/s
Iteration  23: 4455987.069 ops/s
Iteration  24: 4472950.725 ops/s
Iteration  25: 4466267.863 ops/s
Iteration  26: 4466529.899 ops/s
Iteration  27: 4446323.181 ops/s
Iteration  28: 4454668.681 ops/s
Iteration  29: 4478191.042 ops/s
Iteration  30: 4453557.689 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4451687.928 ±(99.9%) 19669.887 ops/s [Average]
  (min, avg, max) = (4356739.508, 4451687.928, 4478899.570), stdev = 29440.962
  CI (99.9%): [4432018.042, 4471357.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4451687.928 ± 19669.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4886.545 ops/s
# Warmup Iteration   2: 5241.256 ops/s
# Warmup Iteration   3: 5513.065 ops/s
# Warmup Iteration   4: 6075.589 ops/s
# Warmup Iteration   5: 6102.011 ops/s
# Warmup Iteration   6: 6118.133 ops/s
# Warmup Iteration   7: 6164.147 ops/s
# Warmup Iteration   8: 6151.761 ops/s
# Warmup Iteration   9: 6222.704 ops/s
# Warmup Iteration  10: 6142.259 ops/s
# Warmup Iteration  11: 6225.213 ops/s
# Warmup Iteration  12: 6202.719 ops/s
# Warmup Iteration  13: 6147.202 ops/s
# Warmup Iteration  14: 6180.715 ops/s
# Warmup Iteration  15: 6180.873 ops/s
# Warmup Iteration  16: 6181.213 ops/s
# Warmup Iteration  17: 5673.925 ops/s
# Warmup Iteration  18: 5891.867 ops/s
# Warmup Iteration  19: 6206.819 ops/s
# Warmup Iteration  20: 6191.728 ops/s
# Warmup Iteration  21: 6171.630 ops/s
# Warmup Iteration  22: 6173.488 ops/s
# Warmup Iteration  23: 6172.117 ops/s
# Warmup Iteration  24: 6198.082 ops/s
# Warmup Iteration  25: 6208.639 ops/s
# Warmup Iteration  26: 6034.251 ops/s
# Warmup Iteration  27: 6172.106 ops/s
# Warmup Iteration  28: 6157.040 ops/s
# Warmup Iteration  29: 6188.177 ops/s
# Warmup Iteration  30: 6114.662 ops/s
Iteration   1: 6179.255 ops/s
Iteration   2: 6200.685 ops/s
Iteration   3: 6110.434 ops/s
Iteration   4: 6182.052 ops/s
Iteration   5: 6092.510 ops/s
Iteration   6: 6182.623 ops/s
Iteration   7: 6221.783 ops/s
Iteration   8: 6194.479 ops/s
Iteration   9: 6203.371 ops/s
Iteration  10: 6094.007 ops/s
Iteration  11: 6203.880 ops/s
Iteration  12: 6167.015 ops/s
Iteration  13: 6201.920 ops/s
Iteration  14: 6222.434 ops/s
Iteration  15: 6194.365 ops/s
Iteration  16: 6187.095 ops/s
Iteration  17: 6171.502 ops/s
Iteration  18: 6171.513 ops/s
Iteration  19: 6209.890 ops/s
Iteration  20: 6181.139 ops/s
Iteration  21: 6019.542 ops/s
Iteration  22: 6187.174 ops/s
Iteration  23: 6202.964 ops/s
Iteration  24: 6185.489 ops/s
Iteration  25: 6195.102 ops/s
Iteration  26: 6097.101 ops/s
Iteration  27: 6209.346 ops/s
Iteration  28: 6183.686 ops/s
Iteration  29: 6099.842 ops/s
Iteration  30: 6198.276 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_large":
  6171.682 ±(99.9%) 31.912 ops/s [Average]
  (min, avg, max) = (6019.542, 6171.682, 6222.434), stdev = 47.764
  CI (99.9%): [6139.771, 6203.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt     Score    Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_large  thrpt   30  6171.682 ± 31.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3012735.235 ops/s
# Warmup Iteration   2: 5173077.255 ops/s
# Warmup Iteration   3: 5888829.091 ops/s
# Warmup Iteration   4: 5940172.891 ops/s
# Warmup Iteration   5: 5944330.342 ops/s
# Warmup Iteration   6: 4895217.808 ops/s
# Warmup Iteration   7: 5927165.866 ops/s
# Warmup Iteration   8: 5920031.960 ops/s
# Warmup Iteration   9: 5939209.696 ops/s
# Warmup Iteration  10: 5929935.140 ops/s
# Warmup Iteration  11: 5927957.575 ops/s
# Warmup Iteration  12: 5903403.995 ops/s
# Warmup Iteration  13: 5851929.952 ops/s
# Warmup Iteration  14: 5955981.342 ops/s
# Warmup Iteration  15: 5839604.431 ops/s
# Warmup Iteration  16: 5928806.428 ops/s
# Warmup Iteration  17: 5937029.011 ops/s
# Warmup Iteration  18: 5925346.762 ops/s
# Warmup Iteration  19: 5919221.850 ops/s
# Warmup Iteration  20: 5893402.961 ops/s
# Warmup Iteration  21: 5911287.524 ops/s
# Warmup Iteration  22: 5913032.760 ops/s
# Warmup Iteration  23: 5926717.144 ops/s
# Warmup Iteration  24: 5871856.032 ops/s
# Warmup Iteration  25: 5923932.793 ops/s
# Warmup Iteration  26: 5919248.885 ops/s
# Warmup Iteration  27: 5943352.260 ops/s
# Warmup Iteration  28: 5926677.070 ops/s
# Warmup Iteration  29: 5936056.278 ops/s
# Warmup Iteration  30: 5935684.624 ops/s
Iteration   1: 5919966.446 ops/s
Iteration   2: 5893788.104 ops/s
Iteration   3: 5930802.070 ops/s
Iteration   4: 5874879.899 ops/s
Iteration   5: 5926765.202 ops/s
Iteration   6: 5924978.768 ops/s
Iteration   7: 5890699.853 ops/s
Iteration   8: 5925737.328 ops/s
Iteration   9: 5910540.560 ops/s
Iteration  10: 5942374.280 ops/s
Iteration  11: 5930976.094 ops/s
Iteration  12: 5924823.169 ops/s
Iteration  13: 5936972.880 ops/s
Iteration  14: 5827755.674 ops/s
Iteration  15: 5913854.755 ops/s
Iteration  16: 5930530.162 ops/s
Iteration  17: 5933565.938 ops/s
Iteration  18: 5936636.074 ops/s
Iteration  19: 5939667.560 ops/s
Iteration  20: 5739433.372 ops/s
Iteration  21: 5927673.057 ops/s
Iteration  22: 5937579.423 ops/s
Iteration  23: 5940040.675 ops/s
Iteration  24: 5914629.061 ops/s
Iteration  25: 5927920.970 ops/s
Iteration  26: 5917005.843 ops/s
Iteration  27: 5905968.989 ops/s
Iteration  28: 5919788.162 ops/s
Iteration  29: 5807712.715 ops/s
Iteration  30: 5842303.475 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_small":
  5906512.352 ±(99.9%) 30689.018 ops/s [Average]
  (min, avg, max) = (5739433.372, 5906512.352, 5942374.280), stdev = 45933.881
  CI (99.9%): [5875823.334, 5937201.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_small  thrpt   30  5906512.352 ± 30689.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939539.047 ops/s
# Warmup Iteration   2: 1133159.836 ops/s
# Warmup Iteration   3: 1455789.770 ops/s
# Warmup Iteration   4: 1453400.384 ops/s
# Warmup Iteration   5: 1464854.174 ops/s
# Warmup Iteration   6: 1462738.823 ops/s
# Warmup Iteration   7: 1465190.253 ops/s
# Warmup Iteration   8: 1460867.842 ops/s
# Warmup Iteration   9: 1206634.085 ops/s
# Warmup Iteration  10: 1459095.412 ops/s
# Warmup Iteration  11: 1463593.301 ops/s
# Warmup Iteration  12: 1464902.604 ops/s
# Warmup Iteration  13: 1445988.912 ops/s
# Warmup Iteration  14: 1502662.926 ops/s
# Warmup Iteration  15: 1538462.407 ops/s
# Warmup Iteration  16: 1538675.903 ops/s
# Warmup Iteration  17: 1543036.020 ops/s
# Warmup Iteration  18: 1526504.201 ops/s
# Warmup Iteration  19: 1533388.097 ops/s
# Warmup Iteration  20: 1525964.470 ops/s
# Warmup Iteration  21: 1523488.886 ops/s
# Warmup Iteration  22: 1526120.661 ops/s
# Warmup Iteration  23: 1538560.254 ops/s
# Warmup Iteration  24: 1535550.180 ops/s
# Warmup Iteration  25: 1534761.819 ops/s
# Warmup Iteration  26: 1540163.214 ops/s
# Warmup Iteration  27: 1537545.353 ops/s
# Warmup Iteration  28: 1520339.054 ops/s
# Warmup Iteration  29: 1525872.490 ops/s
# Warmup Iteration  30: 1534908.843 ops/s
Iteration   1: 1534699.598 ops/s
Iteration   2: 1544727.378 ops/s
Iteration   3: 1529845.918 ops/s
Iteration   4: 1536274.184 ops/s
Iteration   5: 1514446.654 ops/s
Iteration   6: 1528176.522 ops/s
Iteration   7: 1542009.914 ops/s
Iteration   8: 1546084.725 ops/s
Iteration   9: 1537828.011 ops/s
Iteration  10: 1530337.185 ops/s
Iteration  11: 1537926.113 ops/s
Iteration  12: 1537828.519 ops/s
Iteration  13: 1538899.164 ops/s
Iteration  14: 1540782.873 ops/s
Iteration  15: 1531638.768 ops/s
Iteration  16: 1539427.941 ops/s
Iteration  17: 1514416.726 ops/s
Iteration  18: 1533910.703 ops/s
Iteration  19: 1533801.089 ops/s
Iteration  20: 1537436.993 ops/s
Iteration  21: 1509233.076 ops/s
Iteration  22: 1520340.965 ops/s
Iteration  23: 1536593.605 ops/s
Iteration  24: 1540837.371 ops/s
Iteration  25: 1535622.912 ops/s
Iteration  26: 1531711.844 ops/s
Iteration  27: 1539086.488 ops/s
Iteration  28: 1538346.241 ops/s
Iteration  29: 1502840.824 ops/s
Iteration  30: 1537234.125 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator":
  1532744.881 ±(99.9%) 6977.693 ops/s [Average]
  (min, avg, max) = (1502840.824, 1532744.881, 1546084.725), stdev = 10443.883
  CI (99.9%): [1525767.188, 1539722.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  1532744.881 ± 6977.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4653.778 ops/s
# Warmup Iteration   2: 4973.407 ops/s
# Warmup Iteration   3: 5051.726 ops/s
# Warmup Iteration   4: 5684.192 ops/s
# Warmup Iteration   5: 5637.165 ops/s
# Warmup Iteration   6: 5720.110 ops/s
# Warmup Iteration   7: 5939.909 ops/s
# Warmup Iteration   8: 5953.908 ops/s
# Warmup Iteration   9: 5989.219 ops/s
# Warmup Iteration  10: 5970.075 ops/s
# Warmup Iteration  11: 5975.801 ops/s
# Warmup Iteration  12: 5988.676 ops/s
# Warmup Iteration  13: 5904.233 ops/s
# Warmup Iteration  14: 5876.634 ops/s
# Warmup Iteration  15: 5985.166 ops/s
# Warmup Iteration  16: 6008.958 ops/s
# Warmup Iteration  17: 6015.843 ops/s
# Warmup Iteration  18: 5353.136 ops/s
# Warmup Iteration  19: 5957.705 ops/s
# Warmup Iteration  20: 6007.769 ops/s
# Warmup Iteration  21: 5973.429 ops/s
# Warmup Iteration  22: 6005.224 ops/s
# Warmup Iteration  23: 6004.311 ops/s
# Warmup Iteration  24: 6003.274 ops/s
# Warmup Iteration  25: 6015.207 ops/s
# Warmup Iteration  26: 5894.007 ops/s
# Warmup Iteration  27: 6025.733 ops/s
# Warmup Iteration  28: 5944.717 ops/s
# Warmup Iteration  29: 6015.256 ops/s
# Warmup Iteration  30: 5975.404 ops/s
Iteration   1: 5986.251 ops/s
Iteration   2: 5987.787 ops/s
Iteration   3: 6000.086 ops/s
Iteration   4: 5930.719 ops/s
Iteration   5: 6033.516 ops/s
Iteration   6: 6014.206 ops/s
Iteration   7: 5933.555 ops/s
Iteration   8: 5824.420 ops/s
Iteration   9: 6017.310 ops/s
Iteration  10: 5949.115 ops/s
Iteration  11: 5930.843 ops/s
Iteration  12: 6036.548 ops/s
Iteration  13: 5997.897 ops/s
Iteration  14: 5937.730 ops/s
Iteration  15: 5935.668 ops/s
Iteration  16: 6029.798 ops/s
Iteration  17: 5989.749 ops/s
Iteration  18: 6017.355 ops/s
Iteration  19: 6022.817 ops/s
Iteration  20: 5926.520 ops/s
Iteration  21: 5905.260 ops/s
Iteration  22: 6000.402 ops/s
Iteration  23: 5907.229 ops/s
Iteration  24: 5939.101 ops/s
Iteration  25: 5999.260 ops/s
Iteration  26: 6009.755 ops/s
Iteration  27: 6026.100 ops/s
Iteration  28: 5984.894 ops/s
Iteration  29: 6023.434 ops/s
Iteration  30: 6005.263 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large":
  5976.753 ±(99.9%) 33.431 ops/s [Average]
  (min, avg, max) = (5824.420, 5976.753, 6036.548), stdev = 50.037
  CI (99.9%): [5943.322, 6010.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt     Score    Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  5976.753 ± 33.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3049814.880 ops/s
# Warmup Iteration   2: 5376429.699 ops/s
# Warmup Iteration   3: 5959088.701 ops/s
# Warmup Iteration   4: 5945700.800 ops/s
# Warmup Iteration   5: 6001254.621 ops/s
# Warmup Iteration   6: 4868122.230 ops/s
# Warmup Iteration   7: 5979585.014 ops/s
# Warmup Iteration   8: 5956457.231 ops/s
# Warmup Iteration   9: 5960511.978 ops/s
# Warmup Iteration  10: 5961853.367 ops/s
# Warmup Iteration  11: 6008247.926 ops/s
# Warmup Iteration  12: 5986902.057 ops/s
# Warmup Iteration  13: 6004616.313 ops/s
# Warmup Iteration  14: 5965267.472 ops/s
# Warmup Iteration  15: 5907931.441 ops/s
# Warmup Iteration  16: 5977098.297 ops/s
# Warmup Iteration  17: 5996865.605 ops/s
# Warmup Iteration  18: 5983048.027 ops/s
# Warmup Iteration  19: 5965868.852 ops/s
# Warmup Iteration  20: 6006716.294 ops/s
# Warmup Iteration  21: 5996435.457 ops/s
# Warmup Iteration  22: 5981739.455 ops/s
# Warmup Iteration  23: 5889508.561 ops/s
# Warmup Iteration  24: 5979143.372 ops/s
# Warmup Iteration  25: 5958849.566 ops/s
# Warmup Iteration  26: 5958148.703 ops/s
# Warmup Iteration  27: 6008861.496 ops/s
# Warmup Iteration  28: 6011825.031 ops/s
# Warmup Iteration  29: 5980573.908 ops/s
# Warmup Iteration  30: 5945281.426 ops/s
Iteration   1: 5845612.816 ops/s
Iteration   2: 5874456.682 ops/s
Iteration   3: 5949291.074 ops/s
Iteration   4: 5929369.165 ops/s
Iteration   5: 5938068.284 ops/s
Iteration   6: 5934650.082 ops/s
Iteration   7: 5907420.262 ops/s
Iteration   8: 5881787.961 ops/s
Iteration   9: 5922431.872 ops/s
Iteration  10: 5945480.246 ops/s
Iteration  11: 5931448.261 ops/s
Iteration  12: 5942553.827 ops/s
Iteration  13: 5953549.219 ops/s
Iteration  14: 5954292.965 ops/s
Iteration  15: 5917261.388 ops/s
Iteration  16: 5935666.405 ops/s
Iteration  17: 5898177.970 ops/s
Iteration  18: 5805363.890 ops/s
Iteration  19: 5932868.607 ops/s
Iteration  20: 5938324.207 ops/s
Iteration  21: 5961103.083 ops/s
Iteration  22: 5916442.261 ops/s
Iteration  23: 5931727.830 ops/s
Iteration  24: 5954190.658 ops/s
Iteration  25: 5915551.845 ops/s
Iteration  26: 5944589.351 ops/s
Iteration  27: 5929029.477 ops/s
Iteration  28: 5929355.814 ops/s
Iteration  29: 5917349.054 ops/s
Iteration  30: 5912989.374 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small":
  5921680.131 ±(99.9%) 22350.706 ops/s [Average]
  (min, avg, max) = (5805363.890, 5921680.131, 5961103.083), stdev = 33453.487
  CI (99.9%): [5899329.425, 5944030.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  5921680.131 ± 22350.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1608124.769 ops/s
# Warmup Iteration   2: 3540584.441 ops/s
# Warmup Iteration   3: 3644051.487 ops/s
# Warmup Iteration   4: 3045829.895 ops/s
# Warmup Iteration   5: 3671603.055 ops/s
# Warmup Iteration   6: 3674511.846 ops/s
# Warmup Iteration   7: 3689264.894 ops/s
# Warmup Iteration   8: 3690134.008 ops/s
# Warmup Iteration   9: 3684242.953 ops/s
# Warmup Iteration  10: 3665314.042 ops/s
# Warmup Iteration  11: 3690957.669 ops/s
# Warmup Iteration  12: 3679905.892 ops/s
# Warmup Iteration  13: 3642604.616 ops/s
# Warmup Iteration  14: 3664896.234 ops/s
# Warmup Iteration  15: 3670298.289 ops/s
# Warmup Iteration  16: 3686763.364 ops/s
# Warmup Iteration  17: 3663943.796 ops/s
# Warmup Iteration  18: 3686338.579 ops/s
# Warmup Iteration  19: 3669613.712 ops/s
# Warmup Iteration  20: 3685758.029 ops/s
# Warmup Iteration  21: 3669636.215 ops/s
# Warmup Iteration  22: 3698625.584 ops/s
# Warmup Iteration  23: 3686300.726 ops/s
# Warmup Iteration  24: 3686733.488 ops/s
# Warmup Iteration  25: 3681637.118 ops/s
# Warmup Iteration  26: 3662684.953 ops/s
# Warmup Iteration  27: 3689554.165 ops/s
# Warmup Iteration  28: 3671069.592 ops/s
# Warmup Iteration  29: 3677407.335 ops/s
# Warmup Iteration  30: 3676498.328 ops/s
Iteration   1: 3670782.876 ops/s
Iteration   2: 3688028.914 ops/s
Iteration   3: 3701648.798 ops/s
Iteration   4: 3686827.761 ops/s
Iteration   5: 3690029.495 ops/s
Iteration   6: 3692949.996 ops/s
Iteration   7: 3688241.943 ops/s
Iteration   8: 3695405.060 ops/s
Iteration   9: 3687549.341 ops/s
Iteration  10: 3671619.444 ops/s
Iteration  11: 3627623.733 ops/s
Iteration  12: 3683396.517 ops/s
Iteration  13: 3698531.683 ops/s
Iteration  14: 3683304.070 ops/s
Iteration  15: 3614098.408 ops/s
Iteration  16: 3670837.471 ops/s
Iteration  17: 3688339.270 ops/s
Iteration  18: 3665027.048 ops/s
Iteration  19: 3684736.617 ops/s
Iteration  20: 3693377.549 ops/s
Iteration  21: 3675178.809 ops/s
Iteration  22: 3688607.890 ops/s
Iteration  23: 3670270.856 ops/s
Iteration  24: 3612009.735 ops/s
Iteration  25: 3687088.733 ops/s
Iteration  26: 3642654.086 ops/s
Iteration  27: 3667632.109 ops/s
Iteration  28: 3615423.847 ops/s
Iteration  29: 3683784.666 ops/s
Iteration  30: 3683528.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sortThis_with_null":
  3673617.832 ±(99.9%) 17003.855 ops/s [Average]
  (min, avg, max) = (3612009.735, 3673617.832, 3701648.798), stdev = 25450.571
  CI (99.9%): [3656613.978, 3690621.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  3673617.832 ± 17003.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 238790.561 ops/s
# Warmup Iteration   2: 569737.517 ops/s
# Warmup Iteration   3: 589597.210 ops/s
# Warmup Iteration   4: 486587.792 ops/s
# Warmup Iteration   5: 587834.493 ops/s
# Warmup Iteration   6: 587419.252 ops/s
# Warmup Iteration   7: 584509.666 ops/s
# Warmup Iteration   8: 588470.646 ops/s
# Warmup Iteration   9: 579941.875 ops/s
# Warmup Iteration  10: 589541.299 ops/s
# Warmup Iteration  11: 584742.095 ops/s
# Warmup Iteration  12: 588944.199 ops/s
# Warmup Iteration  13: 584944.538 ops/s
# Warmup Iteration  14: 585368.204 ops/s
# Warmup Iteration  15: 578856.446 ops/s
# Warmup Iteration  16: 590518.240 ops/s
# Warmup Iteration  17: 582810.506 ops/s
# Warmup Iteration  18: 584515.701 ops/s
# Warmup Iteration  19: 586965.945 ops/s
# Warmup Iteration  20: 585515.965 ops/s
# Warmup Iteration  21: 586202.156 ops/s
# Warmup Iteration  22: 583379.374 ops/s
# Warmup Iteration  23: 582974.102 ops/s
# Warmup Iteration  24: 588161.385 ops/s
# Warmup Iteration  25: 590473.729 ops/s
# Warmup Iteration  26: 584807.011 ops/s
# Warmup Iteration  27: 583207.658 ops/s
# Warmup Iteration  28: 580067.935 ops/s
# Warmup Iteration  29: 584629.775 ops/s
# Warmup Iteration  30: 578214.372 ops/s
Iteration   1: 579149.915 ops/s
Iteration   2: 586435.163 ops/s
Iteration   3: 585031.117 ops/s
Iteration   4: 588167.899 ops/s
Iteration   5: 589583.792 ops/s
Iteration   6: 587795.390 ops/s
Iteration   7: 580414.520 ops/s
Iteration   8: 578124.201 ops/s
Iteration   9: 590181.168 ops/s
Iteration  10: 584614.832 ops/s
Iteration  11: 575526.944 ops/s
Iteration  12: 583640.026 ops/s
Iteration  13: 588687.398 ops/s
Iteration  14: 585678.265 ops/s
Iteration  15: 579278.149 ops/s
Iteration  16: 589895.421 ops/s
Iteration  17: 586114.095 ops/s
Iteration  18: 581439.604 ops/s
Iteration  19: 588051.267 ops/s
Iteration  20: 588547.785 ops/s
Iteration  21: 579014.783 ops/s
Iteration  22: 589602.484 ops/s
Iteration  23: 588049.335 ops/s
Iteration  24: 587678.876 ops/s
Iteration  25: 579875.835 ops/s
Iteration  26: 584022.912 ops/s
Iteration  27: 589599.107 ops/s
Iteration  28: 583429.400 ops/s
Iteration  29: 585631.592 ops/s
Iteration  30: 583457.595 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subList":
  584890.629 ±(99.9%) 2761.218 ops/s [Average]
  (min, avg, max) = (575526.944, 584890.629, 590181.168), stdev = 4132.861
  CI (99.9%): [582129.411, 587651.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_subList  thrpt   30  584890.629 ± 2761.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664320.144 ops/s
# Warmup Iteration   2: 688448.679 ops/s
# Warmup Iteration   3: 909777.539 ops/s
# Warmup Iteration   4: 916334.629 ops/s
# Warmup Iteration   5: 916512.531 ops/s
# Warmup Iteration   6: 904740.502 ops/s
# Warmup Iteration   7: 907877.381 ops/s
# Warmup Iteration   8: 911890.192 ops/s
# Warmup Iteration   9: 907348.807 ops/s
# Warmup Iteration  10: 912573.656 ops/s
# Warmup Iteration  11: 908813.401 ops/s
# Warmup Iteration  12: 761872.678 ops/s
# Warmup Iteration  13: 912554.661 ops/s
# Warmup Iteration  14: 912595.758 ops/s
# Warmup Iteration  15: 916686.807 ops/s
# Warmup Iteration  16: 914409.124 ops/s
# Warmup Iteration  17: 967726.128 ops/s
# Warmup Iteration  18: 961708.329 ops/s
# Warmup Iteration  19: 968269.548 ops/s
# Warmup Iteration  20: 958465.307 ops/s
# Warmup Iteration  21: 968056.488 ops/s
# Warmup Iteration  22: 952748.670 ops/s
# Warmup Iteration  23: 969376.031 ops/s
# Warmup Iteration  24: 959520.833 ops/s
# Warmup Iteration  25: 961334.871 ops/s
# Warmup Iteration  26: 966360.222 ops/s
# Warmup Iteration  27: 960500.771 ops/s
# Warmup Iteration  28: 961775.463 ops/s
# Warmup Iteration  29: 966514.504 ops/s
# Warmup Iteration  30: 966386.918 ops/s
Iteration   1: 965789.664 ops/s
Iteration   2: 968848.248 ops/s
Iteration   3: 967781.270 ops/s
Iteration   4: 967753.332 ops/s
Iteration   5: 968701.506 ops/s
Iteration   6: 960328.384 ops/s
Iteration   7: 961593.695 ops/s
Iteration   8: 952522.416 ops/s
Iteration   9: 969653.565 ops/s
Iteration  10: 968068.011 ops/s
Iteration  11: 963020.450 ops/s
Iteration  12: 970840.633 ops/s
Iteration  13: 968057.982 ops/s
Iteration  14: 960744.895 ops/s
Iteration  15: 938920.316 ops/s
Iteration  16: 968184.679 ops/s
Iteration  17: 939343.224 ops/s
Iteration  18: 969999.414 ops/s
Iteration  19: 952047.381 ops/s
Iteration  20: 967917.010 ops/s
Iteration  21: 966855.834 ops/s
Iteration  22: 967516.230 ops/s
Iteration  23: 963104.617 ops/s
Iteration  24: 971628.494 ops/s
Iteration  25: 967453.682 ops/s
Iteration  26: 967394.354 ops/s
Iteration  27: 959930.456 ops/s
Iteration  28: 969576.308 ops/s
Iteration  29: 969560.257 ops/s
Iteration  30: 956694.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException":
  963661.012 ±(99.9%) 5592.118 ops/s [Average]
  (min, avg, max) = (938920.316, 963661.012, 971628.494), stdev = 8370.019
  CI (99.9%): [958068.894, 969253.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  963661.012 ± 5592.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671779.048 ops/s
# Warmup Iteration   2: 697892.812 ops/s
# Warmup Iteration   3: 899146.621 ops/s
# Warmup Iteration   4: 914120.261 ops/s
# Warmup Iteration   5: 922653.502 ops/s
# Warmup Iteration   6: 912767.076 ops/s
# Warmup Iteration   7: 915990.464 ops/s
# Warmup Iteration   8: 921800.435 ops/s
# Warmup Iteration   9: 922471.513 ops/s
# Warmup Iteration  10: 910777.252 ops/s
# Warmup Iteration  11: 919084.715 ops/s
# Warmup Iteration  12: 810485.824 ops/s
# Warmup Iteration  13: 879640.065 ops/s
# Warmup Iteration  14: 917239.819 ops/s
# Warmup Iteration  15: 920480.051 ops/s
# Warmup Iteration  16: 926213.238 ops/s
# Warmup Iteration  17: 964521.817 ops/s
# Warmup Iteration  18: 980874.368 ops/s
# Warmup Iteration  19: 973873.779 ops/s
# Warmup Iteration  20: 978510.449 ops/s
# Warmup Iteration  21: 973362.717 ops/s
# Warmup Iteration  22: 981000.331 ops/s
# Warmup Iteration  23: 975980.100 ops/s
# Warmup Iteration  24: 978878.596 ops/s
# Warmup Iteration  25: 971317.715 ops/s
# Warmup Iteration  26: 973328.061 ops/s
# Warmup Iteration  27: 979289.019 ops/s
# Warmup Iteration  28: 981950.206 ops/s
# Warmup Iteration  29: 969579.956 ops/s
# Warmup Iteration  30: 979364.190 ops/s
Iteration   1: 975753.879 ops/s
Iteration   2: 979731.565 ops/s
Iteration   3: 979702.539 ops/s
Iteration   4: 978330.201 ops/s
Iteration   5: 944556.305 ops/s
Iteration   6: 979223.040 ops/s
Iteration   7: 982158.186 ops/s
Iteration   8: 980780.943 ops/s
Iteration   9: 979458.505 ops/s
Iteration  10: 981261.342 ops/s
Iteration  11: 980432.742 ops/s
Iteration  12: 978600.929 ops/s
Iteration  13: 977354.625 ops/s
Iteration  14: 971126.556 ops/s
Iteration  15: 973201.944 ops/s
Iteration  16: 969798.232 ops/s
Iteration  17: 978652.164 ops/s
Iteration  18: 980763.750 ops/s
Iteration  19: 974396.648 ops/s
Iteration  20: 975166.439 ops/s
Iteration  21: 974508.067 ops/s
Iteration  22: 974937.532 ops/s
Iteration  23: 978297.704 ops/s
Iteration  24: 968084.707 ops/s
Iteration  25: 974012.214 ops/s
Iteration  26: 968402.852 ops/s
Iteration  27: 979441.439 ops/s
Iteration  28: 962560.047 ops/s
Iteration  29: 975157.196 ops/s
Iteration  30: 978374.908 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  975140.907 ±(99.9%) 4921.450 ops/s [Average]
  (min, avg, max) = (944556.305, 975140.907, 982158.186), stdev = 7366.195
  CI (99.9%): [970219.457, 980062.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  975140.907 ± 4921.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656701.120 ops/s
# Warmup Iteration   2: 681821.466 ops/s
# Warmup Iteration   3: 918958.508 ops/s
# Warmup Iteration   4: 917119.004 ops/s
# Warmup Iteration   5: 905987.944 ops/s
# Warmup Iteration   6: 903836.860 ops/s
# Warmup Iteration   7: 915714.638 ops/s
# Warmup Iteration   8: 919900.481 ops/s
# Warmup Iteration   9: 910803.179 ops/s
# Warmup Iteration  10: 913835.481 ops/s
# Warmup Iteration  11: 907572.827 ops/s
# Warmup Iteration  12: 753898.818 ops/s
# Warmup Iteration  13: 915314.070 ops/s
# Warmup Iteration  14: 909739.560 ops/s
# Warmup Iteration  15: 908247.609 ops/s
# Warmup Iteration  16: 914675.251 ops/s
# Warmup Iteration  17: 968071.119 ops/s
# Warmup Iteration  18: 967790.626 ops/s
# Warmup Iteration  19: 967797.472 ops/s
# Warmup Iteration  20: 962282.506 ops/s
# Warmup Iteration  21: 966593.443 ops/s
# Warmup Iteration  22: 967269.196 ops/s
# Warmup Iteration  23: 962914.992 ops/s
# Warmup Iteration  24: 952327.427 ops/s
# Warmup Iteration  25: 962656.883 ops/s
# Warmup Iteration  26: 967607.607 ops/s
# Warmup Iteration  27: 964138.533 ops/s
# Warmup Iteration  28: 961256.189 ops/s
# Warmup Iteration  29: 948097.105 ops/s
# Warmup Iteration  30: 970415.600 ops/s
Iteration   1: 961027.517 ops/s
Iteration   2: 961222.051 ops/s
Iteration   3: 967126.710 ops/s
Iteration   4: 964116.916 ops/s
Iteration   5: 963638.201 ops/s
Iteration   6: 957854.351 ops/s
Iteration   7: 965496.773 ops/s
Iteration   8: 969752.360 ops/s
Iteration   9: 965087.414 ops/s
Iteration  10: 968397.900 ops/s
Iteration  11: 967308.746 ops/s
Iteration  12: 949821.186 ops/s
Iteration  13: 969452.477 ops/s
Iteration  14: 953261.793 ops/s
Iteration  15: 964366.956 ops/s
Iteration  16: 963267.858 ops/s
Iteration  17: 964296.328 ops/s
Iteration  18: 967901.911 ops/s
Iteration  19: 951694.078 ops/s
Iteration  20: 965671.260 ops/s
Iteration  21: 960843.047 ops/s
Iteration  22: 963686.762 ops/s
Iteration  23: 964588.732 ops/s
Iteration  24: 943482.795 ops/s
Iteration  25: 962207.422 ops/s
Iteration  26: 953544.767 ops/s
Iteration  27: 950085.755 ops/s
Iteration  28: 964243.999 ops/s
Iteration  29: 964047.494 ops/s
Iteration  30: 968279.125 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  961859.090 ±(99.9%) 4413.836 ops/s [Average]
  (min, avg, max) = (943482.795, 961859.090, 969752.360), stdev = 6606.423
  CI (99.9%): [957445.253, 966272.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  961859.090 ± 4413.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1161095.370 ops/s
# Warmup Iteration   2: 2131015.359 ops/s
# Warmup Iteration   3: 2364930.422 ops/s
# Warmup Iteration   4: 2370190.687 ops/s
# Warmup Iteration   5: 2178489.132 ops/s
# Warmup Iteration   6: 2191960.829 ops/s
# Warmup Iteration   7: 2376248.967 ops/s
# Warmup Iteration   8: 2402185.393 ops/s
# Warmup Iteration   9: 2385928.504 ops/s
# Warmup Iteration  10: 2389957.845 ops/s
# Warmup Iteration  11: 2393138.873 ops/s
# Warmup Iteration  12: 2396563.157 ops/s
# Warmup Iteration  13: 2397804.626 ops/s
# Warmup Iteration  14: 2392347.806 ops/s
# Warmup Iteration  15: 2392067.870 ops/s
# Warmup Iteration  16: 2375252.210 ops/s
# Warmup Iteration  17: 2401178.125 ops/s
# Warmup Iteration  18: 2403552.512 ops/s
# Warmup Iteration  19: 2401643.427 ops/s
# Warmup Iteration  20: 2362196.593 ops/s
# Warmup Iteration  21: 2405509.793 ops/s
# Warmup Iteration  22: 2404973.653 ops/s
# Warmup Iteration  23: 2395578.751 ops/s
# Warmup Iteration  24: 2401829.245 ops/s
# Warmup Iteration  25: 2405743.304 ops/s
# Warmup Iteration  26: 2400721.474 ops/s
# Warmup Iteration  27: 2399711.882 ops/s
# Warmup Iteration  28: 2392678.181 ops/s
# Warmup Iteration  29: 2405047.090 ops/s
# Warmup Iteration  30: 2405847.625 ops/s
Iteration   1: 2366360.672 ops/s
Iteration   2: 2398598.646 ops/s
Iteration   3: 2405807.467 ops/s
Iteration   4: 2359735.079 ops/s
Iteration   5: 2403216.069 ops/s
Iteration   6: 2405038.981 ops/s
Iteration   7: 2400286.268 ops/s
Iteration   8: 2404781.591 ops/s
Iteration   9: 2406248.886 ops/s
Iteration  10: 2406868.252 ops/s
Iteration  11: 2407568.462 ops/s
Iteration  12: 2386673.959 ops/s
Iteration  13: 2398597.329 ops/s
Iteration  14: 2402553.029 ops/s
Iteration  15: 2397800.321 ops/s
Iteration  16: 2383432.597 ops/s
Iteration  17: 2385938.998 ops/s
Iteration  18: 2395355.974 ops/s
Iteration  19: 2369133.781 ops/s
Iteration  20: 2393905.567 ops/s
Iteration  21: 2355778.141 ops/s
Iteration  22: 2401490.887 ops/s
Iteration  23: 2388390.709 ops/s
Iteration  24: 2404627.358 ops/s
Iteration  25: 2358184.384 ops/s
Iteration  26: 2402865.996 ops/s
Iteration  27: 2397785.695 ops/s
Iteration  28: 2354112.940 ops/s
Iteration  29: 2404326.402 ops/s
Iteration  30: 2408441.935 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDouble":
  2391796.879 ±(99.9%) 11583.880 ops/s [Average]
  (min, avg, max) = (2354112.940, 2391796.879, 2408441.935), stdev = 17338.207
  CI (99.9%): [2380212.999, 2403380.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumByDouble  thrpt   30  2391796.879 ± 11583.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54.546 ops/s
# Warmup Iteration   2: 60.547 ops/s
# Warmup Iteration   3: 80.663 ops/s
# Warmup Iteration   4: 84.875 ops/s
# Warmup Iteration   5: 85.077 ops/s
# Warmup Iteration   6: 83.696 ops/s
# Warmup Iteration   7: 84.726 ops/s
# Warmup Iteration   8: 84.081 ops/s
# Warmup Iteration   9: 85.420 ops/s
# Warmup Iteration  10: 85.394 ops/s
# Warmup Iteration  11: 85.380 ops/s
# Warmup Iteration  12: 69.435 ops/s
# Warmup Iteration  13: 85.129 ops/s
# Warmup Iteration  14: 85.263 ops/s
# Warmup Iteration  15: 84.813 ops/s
# Warmup Iteration  16: 85.520 ops/s
# Warmup Iteration  17: 84.798 ops/s
# Warmup Iteration  18: 86.363 ops/s
# Warmup Iteration  19: 84.886 ops/s
# Warmup Iteration  20: 85.080 ops/s
# Warmup Iteration  21: 85.429 ops/s
# Warmup Iteration  22: 84.994 ops/s
# Warmup Iteration  23: 83.889 ops/s
# Warmup Iteration  24: 85.147 ops/s
# Warmup Iteration  25: 84.480 ops/s
# Warmup Iteration  26: 83.976 ops/s
# Warmup Iteration  27: 83.983 ops/s
# Warmup Iteration  28: 82.640 ops/s
# Warmup Iteration  29: 83.863 ops/s
# Warmup Iteration  30: 84.732 ops/s
Iteration   1: 85.238 ops/s
Iteration   2: 83.745 ops/s
Iteration   3: 84.063 ops/s
Iteration   4: 84.890 ops/s
Iteration   5: 85.870 ops/s
Iteration   6: 82.950 ops/s
Iteration   7: 82.272 ops/s
Iteration   8: 81.344 ops/s
Iteration   9: 81.669 ops/s
Iteration  10: 84.061 ops/s
Iteration  11: 82.645 ops/s
Iteration  12: 82.002 ops/s
Iteration  13: 84.309 ops/s
Iteration  14: 82.264 ops/s
Iteration  15: 82.593 ops/s
Iteration  16: 83.638 ops/s
Iteration  17: 83.643 ops/s
Iteration  18: 81.885 ops/s
Iteration  19: 83.450 ops/s
Iteration  20: 83.287 ops/s
Iteration  21: 83.738 ops/s
Iteration  22: 83.372 ops/s
Iteration  23: 83.000 ops/s
Iteration  24: 82.709 ops/s
Iteration  25: 84.558 ops/s
Iteration  26: 83.470 ops/s
Iteration  27: 80.504 ops/s
Iteration  28: 82.795 ops/s
Iteration  29: 83.567 ops/s
Iteration  30: 82.346 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  83.196 ±(99.9%) 0.783 ops/s [Average]
  (min, avg, max) = (80.504, 83.196, 85.870), stdev = 1.172
  CI (99.9%): [82.413, 83.979] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt   Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  83.196 ± 0.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1133098.470 ops/s
# Warmup Iteration   2: 2145308.466 ops/s
# Warmup Iteration   3: 2300793.570 ops/s
# Warmup Iteration   4: 2329231.405 ops/s
# Warmup Iteration   5: 2001581.806 ops/s
# Warmup Iteration   6: 2214807.235 ops/s
# Warmup Iteration   7: 2339543.251 ops/s
# Warmup Iteration   8: 2318828.073 ops/s
# Warmup Iteration   9: 2333332.928 ops/s
# Warmup Iteration  10: 2317185.807 ops/s
# Warmup Iteration  11: 2321497.724 ops/s
# Warmup Iteration  12: 2327136.850 ops/s
# Warmup Iteration  13: 2332517.266 ops/s
# Warmup Iteration  14: 2333274.016 ops/s
# Warmup Iteration  15: 2336809.176 ops/s
# Warmup Iteration  16: 2333781.473 ops/s
# Warmup Iteration  17: 2322190.413 ops/s
# Warmup Iteration  18: 2329046.539 ops/s
# Warmup Iteration  19: 2333746.169 ops/s
# Warmup Iteration  20: 2316547.572 ops/s
# Warmup Iteration  21: 2333189.144 ops/s
# Warmup Iteration  22: 2333658.853 ops/s
# Warmup Iteration  23: 2331192.303 ops/s
# Warmup Iteration  24: 2274639.938 ops/s
# Warmup Iteration  25: 2326084.859 ops/s
# Warmup Iteration  26: 2317076.948 ops/s
# Warmup Iteration  27: 2331447.463 ops/s
# Warmup Iteration  28: 2335287.112 ops/s
# Warmup Iteration  29: 2329175.763 ops/s
# Warmup Iteration  30: 2334921.554 ops/s
Iteration   1: 2336662.642 ops/s
Iteration   2: 2300160.641 ops/s
Iteration   3: 2328176.460 ops/s
Iteration   4: 2340746.455 ops/s
Iteration   5: 2329887.138 ops/s
Iteration   6: 2326237.315 ops/s
Iteration   7: 2336429.773 ops/s
Iteration   8: 2324094.820 ops/s
Iteration   9: 2328028.368 ops/s
Iteration  10: 2332678.848 ops/s
Iteration  11: 2322638.016 ops/s
Iteration  12: 2336884.490 ops/s
Iteration  13: 2339763.978 ops/s
Iteration  14: 2336906.606 ops/s
Iteration  15: 2320051.290 ops/s
Iteration  16: 2289255.695 ops/s
Iteration  17: 2329082.438 ops/s
Iteration  18: 2335485.410 ops/s
Iteration  19: 2333757.664 ops/s
Iteration  20: 2314481.315 ops/s
Iteration  21: 2340857.047 ops/s
Iteration  22: 2315535.250 ops/s
Iteration  23: 2324229.853 ops/s
Iteration  24: 2342043.279 ops/s
Iteration  25: 2332763.169 ops/s
Iteration  26: 2336164.896 ops/s
Iteration  27: 2335651.057 ops/s
Iteration  28: 2295894.856 ops/s
Iteration  29: 2299298.493 ops/s
Iteration  30: 2317702.531 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloat":
  2326051.660 ±(99.9%) 9462.323 ops/s [Average]
  (min, avg, max) = (2289255.695, 2326051.660, 2342043.279), stdev = 14162.760
  CI (99.9%): [2316589.337, 2335513.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sumByFloat  thrpt   30  2326051.660 ± 9462.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54.928 ops/s
# Warmup Iteration   2: 61.046 ops/s
# Warmup Iteration   3: 79.679 ops/s
# Warmup Iteration   4: 85.483 ops/s
# Warmup Iteration   5: 83.681 ops/s
# Warmup Iteration   6: 84.090 ops/s
# Warmup Iteration   7: 84.792 ops/s
# Warmup Iteration   8: 84.142 ops/s
# Warmup Iteration   9: 83.560 ops/s
# Warmup Iteration  10: 86.465 ops/s
# Warmup Iteration  11: 83.858 ops/s
# Warmup Iteration  12: 69.829 ops/s
# Warmup Iteration  13: 84.505 ops/s
# Warmup Iteration  14: 84.649 ops/s
# Warmup Iteration  15: 84.166 ops/s
# Warmup Iteration  16: 84.537 ops/s
# Warmup Iteration  17: 86.108 ops/s
# Warmup Iteration  18: 85.665 ops/s
# Warmup Iteration  19: 85.401 ops/s
# Warmup Iteration  20: 85.544 ops/s
# Warmup Iteration  21: 84.622 ops/s
# Warmup Iteration  22: 85.307 ops/s
# Warmup Iteration  23: 85.833 ops/s
# Warmup Iteration  24: 85.937 ops/s
# Warmup Iteration  25: 84.426 ops/s
# Warmup Iteration  26: 84.744 ops/s
# Warmup Iteration  27: 86.061 ops/s
# Warmup Iteration  28: 85.187 ops/s
# Warmup Iteration  29: 86.208 ops/s
# Warmup Iteration  30: 84.301 ops/s
Iteration   1: 82.796 ops/s
Iteration   2: 83.243 ops/s
Iteration   3: 82.363 ops/s
Iteration   4: 84.034 ops/s
Iteration   5: 85.153 ops/s
Iteration   6: 82.363 ops/s
Iteration   7: 83.223 ops/s
Iteration   8: 83.604 ops/s
Iteration   9: 84.661 ops/s
Iteration  10: 83.847 ops/s
Iteration  11: 81.675 ops/s
Iteration  12: 83.685 ops/s
Iteration  13: 83.429 ops/s
Iteration  14: 83.368 ops/s
Iteration  15: 85.131 ops/s
Iteration  16: 82.086 ops/s
Iteration  17: 83.198 ops/s
Iteration  18: 80.746 ops/s
Iteration  19: 81.616 ops/s
Iteration  20: 83.171 ops/s
Iteration  21: 81.677 ops/s
Iteration  22: 83.224 ops/s
Iteration  23: 83.705 ops/s
Iteration  24: 82.374 ops/s
Iteration  25: 84.146 ops/s
Iteration  26: 83.771 ops/s
Iteration  27: 83.492 ops/s
Iteration  28: 84.816 ops/s
Iteration  29: 84.541 ops/s
Iteration  30: 83.200 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  83.278 ±(99.9%) 0.721 ops/s [Average]
  (min, avg, max) = (80.746, 83.278, 85.153), stdev = 1.078
  CI (99.9%): [82.557, 83.998] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt   Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  83.278 ± 0.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1735183.394 ops/s
# Warmup Iteration   2: 3758782.776 ops/s
# Warmup Iteration   3: 3886249.007 ops/s
# Warmup Iteration   4: 3594253.734 ops/s
# Warmup Iteration   5: 3467090.783 ops/s
# Warmup Iteration   6: 3900285.696 ops/s
# Warmup Iteration   7: 3891620.863 ops/s
# Warmup Iteration   8: 3862235.462 ops/s
# Warmup Iteration   9: 3862186.806 ops/s
# Warmup Iteration  10: 3878163.003 ops/s
# Warmup Iteration  11: 3895682.982 ops/s
# Warmup Iteration  12: 3863196.210 ops/s
# Warmup Iteration  13: 3891480.829 ops/s
# Warmup Iteration  14: 3895245.109 ops/s
# Warmup Iteration  15: 3900372.832 ops/s
# Warmup Iteration  16: 3905628.414 ops/s
# Warmup Iteration  17: 3895826.238 ops/s
# Warmup Iteration  18: 3900006.863 ops/s
# Warmup Iteration  19: 3902060.113 ops/s
# Warmup Iteration  20: 3881946.165 ops/s
# Warmup Iteration  21: 3883303.352 ops/s
# Warmup Iteration  22: 3890805.843 ops/s
# Warmup Iteration  23: 3897405.210 ops/s
# Warmup Iteration  24: 3900014.155 ops/s
# Warmup Iteration  25: 3882542.997 ops/s
# Warmup Iteration  26: 3893148.988 ops/s
# Warmup Iteration  27: 3890889.851 ops/s
# Warmup Iteration  28: 3858108.965 ops/s
# Warmup Iteration  29: 3896825.564 ops/s
# Warmup Iteration  30: 3878243.461 ops/s
Iteration   1: 3905098.734 ops/s
Iteration   2: 3874033.247 ops/s
Iteration   3: 3892349.419 ops/s
Iteration   4: 3770206.237 ops/s
Iteration   5: 3906415.518 ops/s
Iteration   6: 3886868.527 ops/s
Iteration   7: 3887160.563 ops/s
Iteration   8: 3867449.148 ops/s
Iteration   9: 3872506.191 ops/s
Iteration  10: 3895650.473 ops/s
Iteration  11: 3881322.728 ops/s
Iteration  12: 3836915.008 ops/s
Iteration  13: 3882170.339 ops/s
Iteration  14: 3889636.185 ops/s
Iteration  15: 3899804.668 ops/s
Iteration  16: 3901247.143 ops/s
Iteration  17: 3883843.302 ops/s
Iteration  18: 3897267.943 ops/s
Iteration  19: 3907738.439 ops/s
Iteration  20: 3906429.189 ops/s
Iteration  21: 3898330.197 ops/s
Iteration  22: 3903273.529 ops/s
Iteration  23: 3887661.185 ops/s
Iteration  24: 3892583.803 ops/s
Iteration  25: 3905366.443 ops/s
Iteration  26: 3892999.709 ops/s
Iteration  27: 3871597.572 ops/s
Iteration  28: 3751614.215 ops/s
Iteration  29: 3866997.170 ops/s
Iteration  30: 3900836.277 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByInt":
  3880512.437 ±(99.9%) 24109.513 ops/s [Average]
  (min, avg, max) = (3751614.215, 3880512.437, 3907738.439), stdev = 36085.987
  CI (99.9%): [3856402.924, 3904621.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumByInt  thrpt   30  3880512.437 ± 24109.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1679628.359 ops/s
# Warmup Iteration   2: 3682453.127 ops/s
# Warmup Iteration   3: 3803553.767 ops/s
# Warmup Iteration   4: 3672522.258 ops/s
# Warmup Iteration   5: 3324467.206 ops/s
# Warmup Iteration   6: 3845818.013 ops/s
# Warmup Iteration   7: 3803722.508 ops/s
# Warmup Iteration   8: 3843828.635 ops/s
# Warmup Iteration   9: 3825256.733 ops/s
# Warmup Iteration  10: 3830407.675 ops/s
# Warmup Iteration  11: 3848018.246 ops/s
# Warmup Iteration  12: 3827807.955 ops/s
# Warmup Iteration  13: 3828795.851 ops/s
# Warmup Iteration  14: 3803406.215 ops/s
# Warmup Iteration  15: 3844881.316 ops/s
# Warmup Iteration  16: 3839523.791 ops/s
# Warmup Iteration  17: 3798332.242 ops/s
# Warmup Iteration  18: 3801103.805 ops/s
# Warmup Iteration  19: 3792845.335 ops/s
# Warmup Iteration  20: 3822501.926 ops/s
# Warmup Iteration  21: 3811002.833 ops/s
# Warmup Iteration  22: 3808944.534 ops/s
# Warmup Iteration  23: 3824375.915 ops/s
# Warmup Iteration  24: 3801092.704 ops/s
# Warmup Iteration  25: 3826357.325 ops/s
# Warmup Iteration  26: 3820535.702 ops/s
# Warmup Iteration  27: 3783259.268 ops/s
# Warmup Iteration  28: 3761484.335 ops/s
# Warmup Iteration  29: 3813320.065 ops/s
# Warmup Iteration  30: 3834529.589 ops/s
Iteration   1: 3827062.196 ops/s
Iteration   2: 3812891.087 ops/s
Iteration   3: 3818564.970 ops/s
Iteration   4: 3827706.990 ops/s
Iteration   5: 3819630.160 ops/s
Iteration   6: 3803670.612 ops/s
Iteration   7: 3818707.941 ops/s
Iteration   8: 3793616.434 ops/s
Iteration   9: 3831715.878 ops/s
Iteration  10: 3824867.139 ops/s
Iteration  11: 3823753.291 ops/s
Iteration  12: 3823337.886 ops/s
Iteration  13: 3809838.992 ops/s
Iteration  14: 3816393.152 ops/s
Iteration  15: 3807803.957 ops/s
Iteration  16: 3823723.353 ops/s
Iteration  17: 3816526.259 ops/s
Iteration  18: 3821952.983 ops/s
Iteration  19: 3819679.222 ops/s
Iteration  20: 3788143.721 ops/s
Iteration  21: 3823838.191 ops/s
Iteration  22: 3832798.924 ops/s
Iteration  23: 3824724.678 ops/s
Iteration  24: 3810945.302 ops/s
Iteration  25: 3823505.443 ops/s
Iteration  26: 3808111.715 ops/s
Iteration  27: 3822692.520 ops/s
Iteration  28: 3816205.207 ops/s
Iteration  29: 3811164.840 ops/s
Iteration  30: 3802517.536 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumByLong":
  3816869.686 ±(99.9%) 6985.357 ops/s [Average]
  (min, avg, max) = (3788143.721, 3816869.686, 3832798.924), stdev = 10455.354
  CI (99.9%): [3809884.329, 3823855.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_sumByLong  thrpt   30  3816869.686 ± 6985.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3642492.320 ops/s
# Warmup Iteration   2: 4747869.890 ops/s
# Warmup Iteration   3: 5773299.141 ops/s
# Warmup Iteration   4: 5753998.684 ops/s
# Warmup Iteration   5: 5767375.764 ops/s
# Warmup Iteration   6: 5754229.703 ops/s
# Warmup Iteration   7: 5728660.601 ops/s
# Warmup Iteration   8: 4889978.804 ops/s
# Warmup Iteration   9: 5737620.442 ops/s
# Warmup Iteration  10: 5731056.536 ops/s
# Warmup Iteration  11: 5730310.917 ops/s
# Warmup Iteration  12: 5744482.767 ops/s
# Warmup Iteration  13: 5760078.084 ops/s
# Warmup Iteration  14: 5753971.529 ops/s
# Warmup Iteration  15: 5729084.703 ops/s
# Warmup Iteration  16: 5770187.351 ops/s
# Warmup Iteration  17: 5779075.949 ops/s
# Warmup Iteration  18: 5731925.442 ops/s
# Warmup Iteration  19: 5733891.271 ops/s
# Warmup Iteration  20: 5751170.979 ops/s
# Warmup Iteration  21: 5767955.630 ops/s
# Warmup Iteration  22: 5776628.563 ops/s
# Warmup Iteration  23: 5706835.244 ops/s
# Warmup Iteration  24: 5743338.530 ops/s
# Warmup Iteration  25: 5709687.383 ops/s
# Warmup Iteration  26: 5769173.690 ops/s
# Warmup Iteration  27: 5726802.575 ops/s
# Warmup Iteration  28: 5788279.833 ops/s
# Warmup Iteration  29: 5767397.963 ops/s
# Warmup Iteration  30: 5774796.337 ops/s
Iteration   1: 5776077.409 ops/s
Iteration   2: 5779862.166 ops/s
Iteration   3: 5783064.051 ops/s
Iteration   4: 5794135.738 ops/s
Iteration   5: 5761053.436 ops/s
Iteration   6: 5771039.319 ops/s
Iteration   7: 5776921.151 ops/s
Iteration   8: 5748963.349 ops/s
Iteration   9: 5782787.250 ops/s
Iteration  10: 5769766.495 ops/s
Iteration  11: 5778149.585 ops/s
Iteration  12: 5693969.915 ops/s
Iteration  13: 5629271.507 ops/s
Iteration  14: 5770988.488 ops/s
Iteration  15: 5792447.024 ops/s
Iteration  16: 5781317.380 ops/s
Iteration  17: 5783291.488 ops/s
Iteration  18: 5791226.151 ops/s
Iteration  19: 5757689.142 ops/s
Iteration  20: 5699553.669 ops/s
Iteration  21: 5762539.469 ops/s
Iteration  22: 5782496.470 ops/s
Iteration  23: 5786625.288 ops/s
Iteration  24: 5768669.455 ops/s
Iteration  25: 5741279.700 ops/s
Iteration  26: 5786316.591 ops/s
Iteration  27: 5762600.685 ops/s
Iteration  28: 5780802.062 ops/s
Iteration  29: 5788456.509 ops/s
Iteration  30: 5775343.141 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDouble":
  5765223.469 ±(99.9%) 23238.907 ops/s [Average]
  (min, avg, max) = (5629271.507, 5765223.469, 5794135.738), stdev = 34782.905
  CI (99.9%): [5741984.562, 5788462.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumDouble  thrpt   30  5765223.469 ± 23238.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133.182 ops/s
# Warmup Iteration   2: 192.509 ops/s
# Warmup Iteration   3: 229.264 ops/s
# Warmup Iteration   4: 226.721 ops/s
# Warmup Iteration   5: 229.706 ops/s
# Warmup Iteration   6: 228.979 ops/s
# Warmup Iteration   7: 212.894 ops/s
# Warmup Iteration   8: 211.370 ops/s
# Warmup Iteration   9: 228.871 ops/s
# Warmup Iteration  10: 227.691 ops/s
# Warmup Iteration  11: 228.067 ops/s
# Warmup Iteration  12: 229.821 ops/s
# Warmup Iteration  13: 203.223 ops/s
# Warmup Iteration  14: 181.477 ops/s
# Warmup Iteration  15: 180.238 ops/s
# Warmup Iteration  16: 179.548 ops/s
# Warmup Iteration  17: 180.358 ops/s
# Warmup Iteration  18: 181.946 ops/s
# Warmup Iteration  19: 182.925 ops/s
# Warmup Iteration  20: 181.700 ops/s
# Warmup Iteration  21: 181.438 ops/s
# Warmup Iteration  22: 179.254 ops/s
# Warmup Iteration  23: 182.258 ops/s
# Warmup Iteration  24: 181.758 ops/s
# Warmup Iteration  25: 182.241 ops/s
# Warmup Iteration  26: 181.031 ops/s
# Warmup Iteration  27: 181.339 ops/s
# Warmup Iteration  28: 181.328 ops/s
# Warmup Iteration  29: 182.090 ops/s
# Warmup Iteration  30: 180.763 ops/s
Iteration   1: 181.793 ops/s
Iteration   2: 182.315 ops/s
Iteration   3: 182.306 ops/s
Iteration   4: 180.787 ops/s
Iteration   5: 181.619 ops/s
Iteration   6: 181.039 ops/s
Iteration   7: 182.023 ops/s
Iteration   8: 182.863 ops/s
Iteration   9: 180.834 ops/s
Iteration  10: 182.653 ops/s
Iteration  11: 181.546 ops/s
Iteration  12: 182.182 ops/s
Iteration  13: 182.278 ops/s
Iteration  14: 181.545 ops/s
Iteration  15: 181.519 ops/s
Iteration  16: 181.678 ops/s
Iteration  17: 178.325 ops/s
Iteration  18: 180.038 ops/s
Iteration  19: 182.031 ops/s
Iteration  20: 181.934 ops/s
Iteration  21: 181.648 ops/s
Iteration  22: 181.782 ops/s
Iteration  23: 176.776 ops/s
Iteration  24: 182.157 ops/s
Iteration  25: 182.417 ops/s
Iteration  26: 182.160 ops/s
Iteration  27: 177.999 ops/s
Iteration  28: 178.965 ops/s
Iteration  29: 182.464 ops/s
Iteration  30: 181.879 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  181.318 ±(99.9%) 0.983 ops/s [Average]
  (min, avg, max) = (176.776, 181.318, 182.863), stdev = 1.471
  CI (99.9%): [180.336, 182.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt    Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  181.318 ± 0.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146.698 ops/s
# Warmup Iteration   2: 234.192 ops/s
# Warmup Iteration   3: 268.138 ops/s
# Warmup Iteration   4: 270.692 ops/s
# Warmup Iteration   5: 268.307 ops/s
# Warmup Iteration   6: 257.161 ops/s
# Warmup Iteration   7: 241.145 ops/s
# Warmup Iteration   8: 271.202 ops/s
# Warmup Iteration   9: 272.284 ops/s
# Warmup Iteration  10: 268.255 ops/s
# Warmup Iteration  11: 265.672 ops/s
# Warmup Iteration  12: 256.471 ops/s
# Warmup Iteration  13: 257.384 ops/s
# Warmup Iteration  14: 253.764 ops/s
# Warmup Iteration  15: 256.105 ops/s
# Warmup Iteration  16: 257.174 ops/s
# Warmup Iteration  17: 257.921 ops/s
# Warmup Iteration  18: 256.614 ops/s
# Warmup Iteration  19: 257.554 ops/s
# Warmup Iteration  20: 256.366 ops/s
# Warmup Iteration  21: 256.036 ops/s
# Warmup Iteration  22: 256.005 ops/s
# Warmup Iteration  23: 255.140 ops/s
# Warmup Iteration  24: 257.409 ops/s
# Warmup Iteration  25: 255.556 ops/s
# Warmup Iteration  26: 256.180 ops/s
# Warmup Iteration  27: 255.609 ops/s
# Warmup Iteration  28: 257.334 ops/s
# Warmup Iteration  29: 257.007 ops/s
# Warmup Iteration  30: 257.291 ops/s
Iteration   1: 254.656 ops/s
Iteration   2: 256.051 ops/s
Iteration   3: 256.877 ops/s
Iteration   4: 249.794 ops/s
Iteration   5: 257.495 ops/s
Iteration   6: 256.691 ops/s
Iteration   7: 253.811 ops/s
Iteration   8: 257.952 ops/s
Iteration   9: 257.584 ops/s
Iteration  10: 256.378 ops/s
Iteration  11: 255.197 ops/s
Iteration  12: 257.622 ops/s
Iteration  13: 256.154 ops/s
Iteration  14: 256.065 ops/s
Iteration  15: 258.408 ops/s
Iteration  16: 255.808 ops/s
Iteration  17: 253.653 ops/s
Iteration  18: 252.307 ops/s
Iteration  19: 256.402 ops/s
Iteration  20: 257.180 ops/s
Iteration  21: 255.760 ops/s
Iteration  22: 256.822 ops/s
Iteration  23: 254.778 ops/s
Iteration  24: 252.553 ops/s
Iteration  25: 255.191 ops/s
Iteration  26: 253.325 ops/s
Iteration  27: 257.431 ops/s
Iteration  28: 258.189 ops/s
Iteration  29: 256.189 ops/s
Iteration  30: 258.293 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  255.821 ±(99.9%) 1.348 ops/s [Average]
  (min, avg, max) = (249.794, 255.821, 258.408), stdev = 2.017
  CI (99.9%): [254.473, 257.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt    Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  255.821 ± 1.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3578269.068 ops/s
# Warmup Iteration   2: 4551243.140 ops/s
# Warmup Iteration   3: 5530218.476 ops/s
# Warmup Iteration   4: 5493858.287 ops/s
# Warmup Iteration   5: 5550702.780 ops/s
# Warmup Iteration   6: 5586815.706 ops/s
# Warmup Iteration   7: 5594851.263 ops/s
# Warmup Iteration   8: 5209554.384 ops/s
# Warmup Iteration   9: 5087525.601 ops/s
# Warmup Iteration  10: 5593861.033 ops/s
# Warmup Iteration  11: 5568982.852 ops/s
# Warmup Iteration  12: 5543328.818 ops/s
# Warmup Iteration  13: 5602125.092 ops/s
# Warmup Iteration  14: 5592004.500 ops/s
# Warmup Iteration  15: 5607253.964 ops/s
# Warmup Iteration  16: 5603863.728 ops/s
# Warmup Iteration  17: 5561340.881 ops/s
# Warmup Iteration  18: 5565178.851 ops/s
# Warmup Iteration  19: 5547496.122 ops/s
# Warmup Iteration  20: 5607454.941 ops/s
# Warmup Iteration  21: 5606066.597 ops/s
# Warmup Iteration  22: 5576725.275 ops/s
# Warmup Iteration  23: 5608553.783 ops/s
# Warmup Iteration  24: 5454153.079 ops/s
# Warmup Iteration  25: 5596009.974 ops/s
# Warmup Iteration  26: 5517629.229 ops/s
# Warmup Iteration  27: 5539822.950 ops/s
# Warmup Iteration  28: 5615074.852 ops/s
# Warmup Iteration  29: 5614804.380 ops/s
# Warmup Iteration  30: 5614350.641 ops/s
Iteration   1: 5614393.916 ops/s
Iteration   2: 5579185.819 ops/s
Iteration   3: 5625558.291 ops/s
Iteration   4: 5606147.201 ops/s
Iteration   5: 5504606.495 ops/s
Iteration   6: 5518031.472 ops/s
Iteration   7: 5596760.359 ops/s
Iteration   8: 5616776.351 ops/s
Iteration   9: 5612158.378 ops/s
Iteration  10: 5510416.931 ops/s
Iteration  11: 5610439.673 ops/s
Iteration  12: 5591517.860 ops/s
Iteration  13: 5575421.381 ops/s
Iteration  14: 5588588.679 ops/s
Iteration  15: 5590332.301 ops/s
Iteration  16: 5615970.195 ops/s
Iteration  17: 5521008.287 ops/s
Iteration  18: 5609015.643 ops/s
Iteration  19: 5619152.681 ops/s
Iteration  20: 5581523.065 ops/s
Iteration  21: 5532640.073 ops/s
Iteration  22: 5620720.719 ops/s
Iteration  23: 5528960.707 ops/s
Iteration  24: 5608134.313 ops/s
Iteration  25: 5618941.135 ops/s
Iteration  26: 5579827.873 ops/s
Iteration  27: 5617205.424 ops/s
Iteration  28: 5587670.026 ops/s
Iteration  29: 5528286.194 ops/s
Iteration  30: 5589457.544 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloat":
  5583294.966 ±(99.9%) 25451.116 ops/s [Average]
  (min, avg, max) = (5504606.495, 5583294.966, 5625558.291), stdev = 38094.036
  CI (99.9%): [5557843.850, 5608746.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumFloat  thrpt   30  5583294.966 ± 25451.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 128.918 ops/s
# Warmup Iteration   2: 179.355 ops/s
# Warmup Iteration   3: 217.285 ops/s
# Warmup Iteration   4: 214.458 ops/s
# Warmup Iteration   5: 217.477 ops/s
# Warmup Iteration   6: 215.342 ops/s
# Warmup Iteration   7: 217.002 ops/s
# Warmup Iteration   8: 181.862 ops/s
# Warmup Iteration   9: 216.412 ops/s
# Warmup Iteration  10: 217.390 ops/s
# Warmup Iteration  11: 216.110 ops/s
# Warmup Iteration  12: 217.155 ops/s
# Warmup Iteration  13: 217.284 ops/s
# Warmup Iteration  14: 195.689 ops/s
# Warmup Iteration  15: 195.258 ops/s
# Warmup Iteration  16: 194.747 ops/s
# Warmup Iteration  17: 193.754 ops/s
# Warmup Iteration  18: 194.118 ops/s
# Warmup Iteration  19: 195.403 ops/s
# Warmup Iteration  20: 192.686 ops/s
# Warmup Iteration  21: 194.709 ops/s
# Warmup Iteration  22: 194.948 ops/s
# Warmup Iteration  23: 193.903 ops/s
# Warmup Iteration  24: 194.208 ops/s
# Warmup Iteration  25: 195.657 ops/s
# Warmup Iteration  26: 193.070 ops/s
# Warmup Iteration  27: 194.990 ops/s
# Warmup Iteration  28: 194.098 ops/s
# Warmup Iteration  29: 194.831 ops/s
# Warmup Iteration  30: 195.546 ops/s
Iteration   1: 194.257 ops/s
Iteration   2: 191.069 ops/s
Iteration   3: 194.987 ops/s
Iteration   4: 194.556 ops/s
Iteration   5: 193.469 ops/s
Iteration   6: 194.610 ops/s
Iteration   7: 195.140 ops/s
Iteration   8: 193.762 ops/s
Iteration   9: 195.899 ops/s
Iteration  10: 195.581 ops/s
Iteration  11: 195.021 ops/s
Iteration  12: 195.270 ops/s
Iteration  13: 193.847 ops/s
Iteration  14: 194.997 ops/s
Iteration  15: 194.351 ops/s
Iteration  16: 194.858 ops/s
Iteration  17: 195.402 ops/s
Iteration  18: 192.551 ops/s
Iteration  19: 194.781 ops/s
Iteration  20: 195.399 ops/s
Iteration  21: 193.919 ops/s
Iteration  22: 195.454 ops/s
Iteration  23: 195.669 ops/s
Iteration  24: 193.794 ops/s
Iteration  25: 190.325 ops/s
Iteration  26: 194.845 ops/s
Iteration  27: 194.727 ops/s
Iteration  28: 195.841 ops/s
Iteration  29: 194.958 ops/s
Iteration  30: 196.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  194.520 ±(99.9%) 0.879 ops/s [Average]
  (min, avg, max) = (190.325, 194.520, 196.265), stdev = 1.316
  CI (99.9%): [193.641, 195.399] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt    Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  194.520 ± 0.879  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147.407 ops/s
# Warmup Iteration   2: 235.147 ops/s
# Warmup Iteration   3: 268.883 ops/s
# Warmup Iteration   4: 272.184 ops/s
# Warmup Iteration   5: 269.808 ops/s
# Warmup Iteration   6: 254.929 ops/s
# Warmup Iteration   7: 247.674 ops/s
# Warmup Iteration   8: 269.218 ops/s
# Warmup Iteration   9: 270.577 ops/s
# Warmup Iteration  10: 270.657 ops/s
# Warmup Iteration  11: 266.972 ops/s
# Warmup Iteration  12: 253.815 ops/s
# Warmup Iteration  13: 258.292 ops/s
# Warmup Iteration  14: 257.454 ops/s
# Warmup Iteration  15: 257.482 ops/s
# Warmup Iteration  16: 256.370 ops/s
# Warmup Iteration  17: 256.043 ops/s
# Warmup Iteration  18: 256.503 ops/s
# Warmup Iteration  19: 256.645 ops/s
# Warmup Iteration  20: 256.512 ops/s
# Warmup Iteration  21: 256.279 ops/s
# Warmup Iteration  22: 256.290 ops/s
# Warmup Iteration  23: 255.253 ops/s
# Warmup Iteration  24: 257.300 ops/s
# Warmup Iteration  25: 251.973 ops/s
# Warmup Iteration  26: 257.053 ops/s
# Warmup Iteration  27: 257.444 ops/s
# Warmup Iteration  28: 256.431 ops/s
# Warmup Iteration  29: 257.486 ops/s
# Warmup Iteration  30: 255.893 ops/s
Iteration   1: 255.834 ops/s
Iteration   2: 258.853 ops/s
Iteration   3: 257.853 ops/s
Iteration   4: 258.208 ops/s
Iteration   5: 257.035 ops/s
Iteration   6: 256.206 ops/s
Iteration   7: 257.316 ops/s
Iteration   8: 255.857 ops/s
Iteration   9: 255.240 ops/s
Iteration  10: 257.052 ops/s
Iteration  11: 255.763 ops/s
Iteration  12: 257.416 ops/s
Iteration  13: 256.611 ops/s
Iteration  14: 258.347 ops/s
Iteration  15: 257.441 ops/s
Iteration  16: 257.837 ops/s
Iteration  17: 257.443 ops/s
Iteration  18: 257.115 ops/s
Iteration  19: 253.655 ops/s
Iteration  20: 255.989 ops/s
Iteration  21: 257.630 ops/s
Iteration  22: 254.269 ops/s
Iteration  23: 257.233 ops/s
Iteration  24: 258.850 ops/s
Iteration  25: 257.493 ops/s
Iteration  26: 257.584 ops/s
Iteration  27: 256.709 ops/s
Iteration  28: 256.316 ops/s
Iteration  29: 257.328 ops/s
Iteration  30: 253.120 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  256.787 ±(99.9%) 0.923 ops/s [Average]
  (min, avg, max) = (253.120, 256.787, 258.853), stdev = 1.382
  CI (99.9%): [255.864, 257.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt    Score   Error  Units
ListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  256.787 ± 0.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3822533.580 ops/s
# Warmup Iteration   2: 5103398.905 ops/s
# Warmup Iteration   3: 6167252.965 ops/s
# Warmup Iteration   4: 6155193.530 ops/s
# Warmup Iteration   5: 6204415.361 ops/s
# Warmup Iteration   6: 6157833.628 ops/s
# Warmup Iteration   7: 6163858.328 ops/s
# Warmup Iteration   8: 5120576.340 ops/s
# Warmup Iteration   9: 6173610.006 ops/s
# Warmup Iteration  10: 6165677.668 ops/s
# Warmup Iteration  11: 6162943.904 ops/s
# Warmup Iteration  12: 6217897.006 ops/s
# Warmup Iteration  13: 6160671.635 ops/s
# Warmup Iteration  14: 6205616.599 ops/s
# Warmup Iteration  15: 6054967.703 ops/s
# Warmup Iteration  16: 6186232.761 ops/s
# Warmup Iteration  17: 6204561.647 ops/s
# Warmup Iteration  18: 6159930.414 ops/s
# Warmup Iteration  19: 6202226.267 ops/s
# Warmup Iteration  20: 6224972.318 ops/s
# Warmup Iteration  21: 6192940.942 ops/s
# Warmup Iteration  22: 6188516.750 ops/s
# Warmup Iteration  23: 6191815.939 ops/s
# Warmup Iteration  24: 6203637.466 ops/s
# Warmup Iteration  25: 6188086.153 ops/s
# Warmup Iteration  26: 6208297.342 ops/s
# Warmup Iteration  27: 6192036.802 ops/s
# Warmup Iteration  28: 6196646.185 ops/s
# Warmup Iteration  29: 6215106.012 ops/s
# Warmup Iteration  30: 6170778.650 ops/s
Iteration   1: 6116849.301 ops/s
Iteration   2: 6184086.166 ops/s
Iteration   3: 6164118.167 ops/s
Iteration   4: 6147961.611 ops/s
Iteration   5: 6199856.505 ops/s
Iteration   6: 6198314.968 ops/s
Iteration   7: 6225997.197 ops/s
Iteration   8: 6202439.980 ops/s
Iteration   9: 6191401.860 ops/s
Iteration  10: 6209588.782 ops/s
Iteration  11: 6212518.855 ops/s
Iteration  12: 6130460.147 ops/s
Iteration  13: 6198352.055 ops/s
Iteration  14: 6122709.928 ops/s
Iteration  15: 6233056.884 ops/s
Iteration  16: 6211502.694 ops/s
Iteration  17: 6208954.379 ops/s
Iteration  18: 6198614.920 ops/s
Iteration  19: 6212262.396 ops/s
Iteration  20: 6123680.344 ops/s
Iteration  21: 6204140.642 ops/s
Iteration  22: 6216061.723 ops/s
Iteration  23: 6213688.334 ops/s
Iteration  24: 6207347.690 ops/s
Iteration  25: 6191073.274 ops/s
Iteration  26: 6200796.232 ops/s
Iteration  27: 6133516.977 ops/s
Iteration  28: 6224587.349 ops/s
Iteration  29: 6229894.918 ops/s
Iteration  30: 6105562.764 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumInteger":
  6187313.235 ±(99.9%) 25081.281 ops/s [Average]
  (min, avg, max) = (6105562.764, 6187313.235, 6233056.884), stdev = 37540.483
  CI (99.9%): [6162231.954, 6212394.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumInteger  thrpt   30  6187313.235 ± 25081.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3823191.111 ops/s
# Warmup Iteration   2: 5154577.305 ops/s
# Warmup Iteration   3: 6191350.653 ops/s
# Warmup Iteration   4: 6072886.969 ops/s
# Warmup Iteration   5: 6177327.405 ops/s
# Warmup Iteration   6: 6175043.049 ops/s
# Warmup Iteration   7: 6137218.248 ops/s
# Warmup Iteration   8: 5186947.317 ops/s
# Warmup Iteration   9: 6143632.191 ops/s
# Warmup Iteration  10: 6181208.527 ops/s
# Warmup Iteration  11: 6184326.657 ops/s
# Warmup Iteration  12: 6191662.273 ops/s
# Warmup Iteration  13: 6124490.646 ops/s
# Warmup Iteration  14: 6187320.311 ops/s
# Warmup Iteration  15: 6186450.979 ops/s
# Warmup Iteration  16: 6069700.276 ops/s
# Warmup Iteration  17: 6148586.562 ops/s
# Warmup Iteration  18: 6183811.601 ops/s
# Warmup Iteration  19: 6171204.663 ops/s
# Warmup Iteration  20: 6197331.421 ops/s
# Warmup Iteration  21: 6183288.716 ops/s
# Warmup Iteration  22: 6166934.678 ops/s
# Warmup Iteration  23: 6188320.679 ops/s
# Warmup Iteration  24: 6099402.770 ops/s
# Warmup Iteration  25: 6173524.887 ops/s
# Warmup Iteration  26: 6192215.212 ops/s
# Warmup Iteration  27: 6153527.773 ops/s
# Warmup Iteration  28: 6185475.445 ops/s
# Warmup Iteration  29: 6192435.378 ops/s
# Warmup Iteration  30: 6169072.733 ops/s
Iteration   1: 6175129.448 ops/s
Iteration   2: 6082475.729 ops/s
Iteration   3: 6187491.197 ops/s
Iteration   4: 6073884.535 ops/s
Iteration   5: 6199723.933 ops/s
Iteration   6: 6153075.083 ops/s
Iteration   7: 6200166.771 ops/s
Iteration   8: 6197994.696 ops/s
Iteration   9: 6190010.751 ops/s
Iteration  10: 6184942.544 ops/s
Iteration  11: 6193757.239 ops/s
Iteration  12: 6188684.826 ops/s
Iteration  13: 6174965.944 ops/s
Iteration  14: 6176214.932 ops/s
Iteration  15: 6189392.851 ops/s
Iteration  16: 6181259.252 ops/s
Iteration  17: 6090043.815 ops/s
Iteration  18: 6081326.180 ops/s
Iteration  19: 6207605.706 ops/s
Iteration  20: 6205106.889 ops/s
Iteration  21: 6198156.846 ops/s
Iteration  22: 6198438.903 ops/s
Iteration  23: 6140329.298 ops/s
Iteration  24: 6185280.741 ops/s
Iteration  25: 6203292.608 ops/s
Iteration  26: 6202827.476 ops/s
Iteration  27: 6208892.377 ops/s
Iteration  28: 6204842.024 ops/s
Iteration  29: 6191357.923 ops/s
Iteration  30: 6185090.482 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_sumLong":
  6175058.700 ±(99.9%) 26794.966 ops/s [Average]
  (min, avg, max) = (6073884.535, 6175058.700, 6208892.377), stdev = 40105.447
  CI (99.9%): [6148263.734, 6201853.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_sumLong  thrpt   30  6175058.700 ± 26794.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4597833.437 ops/s
# Warmup Iteration   2: 9864167.870 ops/s
# Warmup Iteration   3: 9815125.695 ops/s
# Warmup Iteration   4: 8258525.235 ops/s
# Warmup Iteration   5: 9836778.672 ops/s
# Warmup Iteration   6: 9882456.521 ops/s
# Warmup Iteration   7: 9900105.669 ops/s
# Warmup Iteration   8: 9844619.589 ops/s
# Warmup Iteration   9: 9888889.396 ops/s
# Warmup Iteration  10: 9907832.480 ops/s
# Warmup Iteration  11: 9913037.174 ops/s
# Warmup Iteration  12: 9912690.107 ops/s
# Warmup Iteration  13: 9825684.603 ops/s
# Warmup Iteration  14: 9923585.775 ops/s
# Warmup Iteration  15: 9906177.078 ops/s
# Warmup Iteration  16: 9946642.984 ops/s
# Warmup Iteration  17: 9899178.020 ops/s
# Warmup Iteration  18: 9905003.677 ops/s
# Warmup Iteration  19: 9913960.870 ops/s
# Warmup Iteration  20: 9897405.878 ops/s
# Warmup Iteration  21: 9889722.586 ops/s
# Warmup Iteration  22: 9902204.934 ops/s
# Warmup Iteration  23: 9817904.019 ops/s
# Warmup Iteration  24: 9904659.571 ops/s
# Warmup Iteration  25: 9903359.409 ops/s
# Warmup Iteration  26: 9765939.221 ops/s
# Warmup Iteration  27: 9906966.120 ops/s
# Warmup Iteration  28: 9807115.205 ops/s
# Warmup Iteration  29: 9931924.316 ops/s
# Warmup Iteration  30: 9908726.249 ops/s
Iteration   1: 9866820.626 ops/s
Iteration   2: 9541939.200 ops/s
Iteration   3: 9908383.483 ops/s
Iteration   4: 9902812.182 ops/s
Iteration   5: 9895042.649 ops/s
Iteration   6: 9925739.810 ops/s
Iteration   7: 9890334.908 ops/s
Iteration   8: 9941832.417 ops/s
Iteration   9: 9905040.900 ops/s
Iteration  10: 9907207.614 ops/s
Iteration  11: 9936715.096 ops/s
Iteration  12: 9818565.190 ops/s
Iteration  13: 9915794.951 ops/s
Iteration  14: 9913205.549 ops/s
Iteration  15: 9880102.423 ops/s
Iteration  16: 9769227.883 ops/s
Iteration  17: 9890771.587 ops/s
Iteration  18: 9907991.613 ops/s
Iteration  19: 9578234.028 ops/s
Iteration  20: 9942113.333 ops/s
Iteration  21: 9886591.750 ops/s
Iteration  22: 9904143.107 ops/s
Iteration  23: 9907172.665 ops/s
Iteration  24: 9921647.117 ops/s
Iteration  25: 9909980.464 ops/s
Iteration  26: 9932141.316 ops/s
Iteration  27: 9917186.695 ops/s
Iteration  28: 9895436.092 ops/s
Iteration  29: 9925376.696 ops/s
Iteration  30: 9753061.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeDouble":
  9873020.429 ±(99.9%) 63976.757 ops/s [Average]
  (min, avg, max) = (9541939.200, 9873020.429, 9942113.333), stdev = 95757.406
  CI (99.9%): [9809043.672, 9936997.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_summarizeDouble  thrpt   30  9873020.429 ± 63976.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4570339.602 ops/s
# Warmup Iteration   2: 9709015.502 ops/s
# Warmup Iteration   3: 9697047.832 ops/s
# Warmup Iteration   4: 8211106.465 ops/s
# Warmup Iteration   5: 9793511.883 ops/s
# Warmup Iteration   6: 9798466.994 ops/s
# Warmup Iteration   7: 9794757.446 ops/s
# Warmup Iteration   8: 9718351.306 ops/s
# Warmup Iteration   9: 9721550.065 ops/s
# Warmup Iteration  10: 9644158.105 ops/s
# Warmup Iteration  11: 9606059.413 ops/s
# Warmup Iteration  12: 9745305.410 ops/s
# Warmup Iteration  13: 9802136.171 ops/s
# Warmup Iteration  14: 9767713.015 ops/s
# Warmup Iteration  15: 9732146.228 ops/s
# Warmup Iteration  16: 9801472.343 ops/s
# Warmup Iteration  17: 9775456.115 ops/s
# Warmup Iteration  18: 9789304.821 ops/s
# Warmup Iteration  19: 9805897.623 ops/s
# Warmup Iteration  20: 9587285.112 ops/s
# Warmup Iteration  21: 9786250.553 ops/s
# Warmup Iteration  22: 9769827.201 ops/s
# Warmup Iteration  23: 9772030.368 ops/s
# Warmup Iteration  24: 9704786.899 ops/s
# Warmup Iteration  25: 9801145.618 ops/s
# Warmup Iteration  26: 9702887.574 ops/s
# Warmup Iteration  27: 9774169.163 ops/s
# Warmup Iteration  28: 9720903.333 ops/s
# Warmup Iteration  29: 9762603.395 ops/s
# Warmup Iteration  30: 9762184.410 ops/s
Iteration   1: 9757945.742 ops/s
Iteration   2: 9798004.448 ops/s
Iteration   3: 9786617.831 ops/s
Iteration   4: 9792898.506 ops/s
Iteration   5: 9708450.613 ops/s
Iteration   6: 9624676.534 ops/s
Iteration   7: 9648951.262 ops/s
Iteration   8: 9800856.396 ops/s
Iteration   9: 9774117.685 ops/s
Iteration  10: 9780242.004 ops/s
Iteration  11: 9759247.034 ops/s
Iteration  12: 9813666.313 ops/s
Iteration  13: 9791716.921 ops/s
Iteration  14: 9717533.903 ops/s
Iteration  15: 9612346.054 ops/s
Iteration  16: 9822764.098 ops/s
Iteration  17: 9788730.364 ops/s
Iteration  18: 9790812.391 ops/s
Iteration  19: 9614114.786 ops/s
Iteration  20: 9694068.890 ops/s
Iteration  21: 9646540.356 ops/s
Iteration  22: 9813083.372 ops/s
Iteration  23: 9583083.201 ops/s
Iteration  24: 9805844.486 ops/s
Iteration  25: 9774857.101 ops/s
Iteration  26: 9796218.300 ops/s
Iteration  27: 9816332.313 ops/s
Iteration  28: 9772261.689 ops/s
Iteration  29: 9823496.972 ops/s
Iteration  30: 9796614.987 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeFloat":
  9750203.152 ±(99.9%) 48701.982 ops/s [Average]
  (min, avg, max) = (9583083.201, 9750203.152, 9823496.972), stdev = 72894.839
  CI (99.9%): [9701501.170, 9798905.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_summarizeFloat  thrpt   30  9750203.152 ± 48701.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5386168.617 ops/s
# Warmup Iteration   2: 12130901.955 ops/s
# Warmup Iteration   3: 12127515.292 ops/s
# Warmup Iteration   4: 10075011.628 ops/s
# Warmup Iteration   5: 12175189.060 ops/s
# Warmup Iteration   6: 12169400.228 ops/s
# Warmup Iteration   7: 12077718.674 ops/s
# Warmup Iteration   8: 12035852.325 ops/s
# Warmup Iteration   9: 12176351.892 ops/s
# Warmup Iteration  10: 12085556.273 ops/s
# Warmup Iteration  11: 12052727.868 ops/s
# Warmup Iteration  12: 12069128.354 ops/s
# Warmup Iteration  13: 11973087.647 ops/s
# Warmup Iteration  14: 12054526.678 ops/s
# Warmup Iteration  15: 12123362.399 ops/s
# Warmup Iteration  16: 12065427.937 ops/s
# Warmup Iteration  17: 12063983.699 ops/s
# Warmup Iteration  18: 12132680.784 ops/s
# Warmup Iteration  19: 12119357.997 ops/s
# Warmup Iteration  20: 12169583.347 ops/s
# Warmup Iteration  21: 12149746.681 ops/s
# Warmup Iteration  22: 12095287.230 ops/s
# Warmup Iteration  23: 12158037.947 ops/s
# Warmup Iteration  24: 12015495.752 ops/s
# Warmup Iteration  25: 12172034.629 ops/s
# Warmup Iteration  26: 12133227.748 ops/s
# Warmup Iteration  27: 12172500.231 ops/s
# Warmup Iteration  28: 12050430.013 ops/s
# Warmup Iteration  29: 12153575.293 ops/s
# Warmup Iteration  30: 12087792.272 ops/s
Iteration   1: 12171099.337 ops/s
Iteration   2: 12128901.189 ops/s
Iteration   3: 11982622.814 ops/s
Iteration   4: 12125006.183 ops/s
Iteration   5: 12165869.964 ops/s
Iteration   6: 12121297.509 ops/s
Iteration   7: 12108668.908 ops/s
Iteration   8: 12010312.378 ops/s
Iteration   9: 12163694.210 ops/s
Iteration  10: 12150021.096 ops/s
Iteration  11: 11957363.220 ops/s
Iteration  12: 12139825.170 ops/s
Iteration  13: 12044448.058 ops/s
Iteration  14: 12115586.018 ops/s
Iteration  15: 12130194.088 ops/s
Iteration  16: 12022030.298 ops/s
Iteration  17: 12162169.831 ops/s
Iteration  18: 12124525.569 ops/s
Iteration  19: 12137212.958 ops/s
Iteration  20: 11940998.806 ops/s
Iteration  21: 12106286.815 ops/s
Iteration  22: 12082979.101 ops/s
Iteration  23: 12110666.728 ops/s
Iteration  24: 11847875.646 ops/s
Iteration  25: 12132849.351 ops/s
Iteration  26: 11933162.749 ops/s
Iteration  27: 12027263.105 ops/s
Iteration  28: 12125681.568 ops/s
Iteration  29: 12130290.044 ops/s
Iteration  30: 12037517.025 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeInt":
  12081213.991 ±(99.9%) 54961.895 ops/s [Average]
  (min, avg, max) = (11847875.646, 12081213.991, 12171099.337), stdev = 82264.383
  CI (99.9%): [12026252.096, 12136175.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_summarizeInt  thrpt   30  12081213.991 ± 54961.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5526490.053 ops/s
# Warmup Iteration   2: 11888880.579 ops/s
# Warmup Iteration   3: 11770040.818 ops/s
# Warmup Iteration   4: 10037941.692 ops/s
# Warmup Iteration   5: 11826424.291 ops/s
# Warmup Iteration   6: 11818059.733 ops/s
# Warmup Iteration   7: 11867623.303 ops/s
# Warmup Iteration   8: 11896822.325 ops/s
# Warmup Iteration   9: 11804361.110 ops/s
# Warmup Iteration  10: 11705268.131 ops/s
# Warmup Iteration  11: 11882580.424 ops/s
# Warmup Iteration  12: 11747490.735 ops/s
# Warmup Iteration  13: 11777315.872 ops/s
# Warmup Iteration  14: 11838305.706 ops/s
# Warmup Iteration  15: 11876515.694 ops/s
# Warmup Iteration  16: 11869865.568 ops/s
# Warmup Iteration  17: 11892262.921 ops/s
# Warmup Iteration  18: 11836390.562 ops/s
# Warmup Iteration  19: 11862919.230 ops/s
# Warmup Iteration  20: 11815150.051 ops/s
# Warmup Iteration  21: 11799022.126 ops/s
# Warmup Iteration  22: 11860564.304 ops/s
# Warmup Iteration  23: 11764470.787 ops/s
# Warmup Iteration  24: 11855950.455 ops/s
# Warmup Iteration  25: 11900450.016 ops/s
# Warmup Iteration  26: 11875236.681 ops/s
# Warmup Iteration  27: 11904153.068 ops/s
# Warmup Iteration  28: 11792302.005 ops/s
# Warmup Iteration  29: 11719321.689 ops/s
# Warmup Iteration  30: 11890212.675 ops/s
Iteration   1: 11844763.632 ops/s
Iteration   2: 11889662.035 ops/s
Iteration   3: 11831258.163 ops/s
Iteration   4: 11850520.087 ops/s
Iteration   5: 11899309.293 ops/s
Iteration   6: 11830610.746 ops/s
Iteration   7: 11836629.824 ops/s
Iteration   8: 11919688.658 ops/s
Iteration   9: 11838539.677 ops/s
Iteration  10: 11888707.993 ops/s
Iteration  11: 11788215.815 ops/s
Iteration  12: 11702830.543 ops/s
Iteration  13: 11902409.746 ops/s
Iteration  14: 11573467.904 ops/s
Iteration  15: 11699278.138 ops/s
Iteration  16: 11862038.214 ops/s
Iteration  17: 11891101.989 ops/s
Iteration  18: 11902405.695 ops/s
Iteration  19: 11852210.874 ops/s
Iteration  20: 11889370.253 ops/s
Iteration  21: 11849662.090 ops/s
Iteration  22: 11879030.363 ops/s
Iteration  23: 11685329.880 ops/s
Iteration  24: 11894094.273 ops/s
Iteration  25: 11901502.659 ops/s
Iteration  26: 11708387.389 ops/s
Iteration  27: 11755435.626 ops/s
Iteration  28: 11943293.684 ops/s
Iteration  29: 11848634.084 ops/s
Iteration  30: 11903199.656 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_summarizeLong":
  11835386.299 ±(99.9%) 57077.027 ops/s [Average]
  (min, avg, max) = (11573467.904, 11835386.299, 11943293.684), stdev = 85430.214
  CI (99.9%): [11778309.272, 11892463.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_summarizeLong  thrpt   30  11835386.299 ± 57077.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 944038.649 ops/s
# Warmup Iteration   2: 1550960.274 ops/s
# Warmup Iteration   3: 1750290.670 ops/s
# Warmup Iteration   4: 1741229.199 ops/s
# Warmup Iteration   5: 1750971.236 ops/s
# Warmup Iteration   6: 1469003.832 ops/s
# Warmup Iteration   7: 1752238.044 ops/s
# Warmup Iteration   8: 1755925.756 ops/s
# Warmup Iteration   9: 1750383.440 ops/s
# Warmup Iteration  10: 1747684.146 ops/s
# Warmup Iteration  11: 1752535.281 ops/s
# Warmup Iteration  12: 1741341.312 ops/s
# Warmup Iteration  13: 1739418.947 ops/s
# Warmup Iteration  14: 1755778.242 ops/s
# Warmup Iteration  15: 1745891.483 ops/s
# Warmup Iteration  16: 1733555.201 ops/s
# Warmup Iteration  17: 1759284.942 ops/s
# Warmup Iteration  18: 1742770.280 ops/s
# Warmup Iteration  19: 1756217.375 ops/s
# Warmup Iteration  20: 1754317.424 ops/s
# Warmup Iteration  21: 1761277.682 ops/s
# Warmup Iteration  22: 1760256.673 ops/s
# Warmup Iteration  23: 1751189.198 ops/s
# Warmup Iteration  24: 1744207.024 ops/s
# Warmup Iteration  25: 1752667.556 ops/s
# Warmup Iteration  26: 1761977.653 ops/s
# Warmup Iteration  27: 1758285.741 ops/s
# Warmup Iteration  28: 1756300.508 ops/s
# Warmup Iteration  29: 1741667.338 ops/s
# Warmup Iteration  30: 1731530.181 ops/s
Iteration   1: 1751496.619 ops/s
Iteration   2: 1757308.174 ops/s
Iteration   3: 1743159.529 ops/s
Iteration   4: 1739192.966 ops/s
Iteration   5: 1761481.972 ops/s
Iteration   6: 1755629.364 ops/s
Iteration   7: 1764146.941 ops/s
Iteration   8: 1761148.506 ops/s
Iteration   9: 1731768.035 ops/s
Iteration  10: 1705240.381 ops/s
Iteration  11: 1749122.901 ops/s
Iteration  12: 1762188.729 ops/s
Iteration  13: 1730508.505 ops/s
Iteration  14: 1753166.018 ops/s
Iteration  15: 1723427.788 ops/s
Iteration  16: 1720212.993 ops/s
Iteration  17: 1755071.453 ops/s
Iteration  18: 1759622.462 ops/s
Iteration  19: 1735963.120 ops/s
Iteration  20: 1726232.880 ops/s
Iteration  21: 1757567.970 ops/s
Iteration  22: 1760503.883 ops/s
Iteration  23: 1749914.889 ops/s
Iteration  24: 1760401.746 ops/s
Iteration  25: 1762509.097 ops/s
Iteration  26: 1757741.452 ops/s
Iteration  27: 1754575.258 ops/s
Iteration  28: 1733013.384 ops/s
Iteration  29: 1755311.171 ops/s
Iteration  30: 1765267.877 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take":
  1748096.535 ±(99.9%) 10387.601 ops/s [Average]
  (min, avg, max) = (1705240.381, 1748096.535, 1765267.877), stdev = 15547.673
  CI (99.9%): [1737708.935, 1758484.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_take  thrpt   30  1748096.535 ± 10387.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1147213.392 ops/s
# Warmup Iteration   2: 2668534.466 ops/s
# Warmup Iteration   3: 2667400.190 ops/s
# Warmup Iteration   4: 2275044.458 ops/s
# Warmup Iteration   5: 2717601.657 ops/s
# Warmup Iteration   6: 2721398.873 ops/s
# Warmup Iteration   7: 2722487.847 ops/s
# Warmup Iteration   8: 2696063.873 ops/s
# Warmup Iteration   9: 2697973.927 ops/s
# Warmup Iteration  10: 2712985.725 ops/s
# Warmup Iteration  11: 2704507.650 ops/s
# Warmup Iteration  12: 2699384.396 ops/s
# Warmup Iteration  13: 2721514.848 ops/s
# Warmup Iteration  14: 2712284.373 ops/s
# Warmup Iteration  15: 2697371.185 ops/s
# Warmup Iteration  16: 2725797.094 ops/s
# Warmup Iteration  17: 2732829.944 ops/s
# Warmup Iteration  18: 2700124.285 ops/s
# Warmup Iteration  19: 2722120.063 ops/s
# Warmup Iteration  20: 2693767.245 ops/s
# Warmup Iteration  21: 2706271.786 ops/s
# Warmup Iteration  22: 2696263.363 ops/s
# Warmup Iteration  23: 2726061.242 ops/s
# Warmup Iteration  24: 2697343.754 ops/s
# Warmup Iteration  25: 2697385.188 ops/s
# Warmup Iteration  26: 2706722.330 ops/s
# Warmup Iteration  27: 2715210.693 ops/s
# Warmup Iteration  28: 2725667.311 ops/s
# Warmup Iteration  29: 2687995.690 ops/s
# Warmup Iteration  30: 2722155.840 ops/s
Iteration   1: 2723585.076 ops/s
Iteration   2: 2716829.945 ops/s
Iteration   3: 2682914.518 ops/s
Iteration   4: 2709672.736 ops/s
Iteration   5: 2707452.170 ops/s
Iteration   6: 2686431.052 ops/s
Iteration   7: 2688416.442 ops/s
Iteration   8: 2711378.357 ops/s
Iteration   9: 2729465.980 ops/s
Iteration  10: 2715588.329 ops/s
Iteration  11: 2700617.902 ops/s
Iteration  12: 2708745.431 ops/s
Iteration  13: 2701727.906 ops/s
Iteration  14: 2715480.826 ops/s
Iteration  15: 2681298.140 ops/s
Iteration  16: 2677779.129 ops/s
Iteration  17: 2695120.503 ops/s
Iteration  18: 2736856.491 ops/s
Iteration  19: 2720605.196 ops/s
Iteration  20: 2730374.764 ops/s
Iteration  21: 2714863.966 ops/s
Iteration  22: 2720231.276 ops/s
Iteration  23: 2727936.354 ops/s
Iteration  24: 2732969.219 ops/s
Iteration  25: 2714391.918 ops/s
Iteration  26: 2721449.111 ops/s
Iteration  27: 2692211.888 ops/s
Iteration  28: 2666070.468 ops/s
Iteration  29: 2699943.837 ops/s
Iteration  30: 2720145.982 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_takeWhile":
  2708351.830 ±(99.9%) 12042.622 ops/s [Average]
  (min, avg, max) = (2666070.468, 2708351.830, 2736856.491), stdev = 18024.831
  CI (99.9%): [2696309.209, 2720394.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_takeWhile  thrpt   30  2708351.830 ± 12042.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640906.071 ops/s
# Warmup Iteration   2: 722561.576 ops/s
# Warmup Iteration   3: 932395.419 ops/s
# Warmup Iteration   4: 924009.238 ops/s
# Warmup Iteration   5: 938791.704 ops/s
# Warmup Iteration   6: 940942.953 ops/s
# Warmup Iteration   7: 935834.571 ops/s
# Warmup Iteration   8: 938485.494 ops/s
# Warmup Iteration   9: 946946.895 ops/s
# Warmup Iteration  10: 774443.314 ops/s
# Warmup Iteration  11: 937931.498 ops/s
# Warmup Iteration  12: 944380.776 ops/s
# Warmup Iteration  13: 946485.375 ops/s
# Warmup Iteration  14: 934556.574 ops/s
# Warmup Iteration  15: 944004.477 ops/s
# Warmup Iteration  16: 945790.680 ops/s
# Warmup Iteration  17: 996013.216 ops/s
# Warmup Iteration  18: 990943.227 ops/s
# Warmup Iteration  19: 997881.184 ops/s
# Warmup Iteration  20: 994972.593 ops/s
# Warmup Iteration  21: 983222.933 ops/s
# Warmup Iteration  22: 1001303.341 ops/s
# Warmup Iteration  23: 992384.525 ops/s
# Warmup Iteration  24: 992345.056 ops/s
# Warmup Iteration  25: 999437.014 ops/s
# Warmup Iteration  26: 989548.027 ops/s
# Warmup Iteration  27: 989022.994 ops/s
# Warmup Iteration  28: 993308.234 ops/s
# Warmup Iteration  29: 998193.492 ops/s
# Warmup Iteration  30: 990898.885 ops/s
Iteration   1: 998230.404 ops/s
Iteration   2: 983163.222 ops/s
Iteration   3: 995238.609 ops/s
Iteration   4: 993567.569 ops/s
Iteration   5: 1000391.609 ops/s
Iteration   6: 997454.661 ops/s
Iteration   7: 999814.593 ops/s
Iteration   8: 992913.236 ops/s
Iteration   9: 1000344.790 ops/s
Iteration  10: 982373.668 ops/s
Iteration  11: 995160.675 ops/s
Iteration  12: 999852.177 ops/s
Iteration  13: 978586.382 ops/s
Iteration  14: 991442.486 ops/s
Iteration  15: 995474.484 ops/s
Iteration  16: 993823.237 ops/s
Iteration  17: 997801.712 ops/s
Iteration  18: 998351.590 ops/s
Iteration  19: 996336.475 ops/s
Iteration  20: 995622.444 ops/s
Iteration  21: 999227.241 ops/s
Iteration  22: 1001406.320 ops/s
Iteration  23: 981905.279 ops/s
Iteration  24: 995357.585 ops/s
Iteration  25: 987743.583 ops/s
Iteration  26: 997306.379 ops/s
Iteration  27: 998727.767 ops/s
Iteration  28: 996586.965 ops/s
Iteration  29: 970723.903 ops/s
Iteration  30: 1004688.155 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_take_throws":
  993987.240 ±(99.9%) 5098.911 ops/s [Average]
  (min, avg, max) = (970723.903, 993987.240, 1004688.155), stdev = 7631.810
  CI (99.9%): [988888.329, 999086.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_take_throws  thrpt   30  993987.240 ± 5098.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2889403.504 ops/s
# Warmup Iteration   2: 6798514.883 ops/s
# Warmup Iteration   3: 6834234.012 ops/s
# Warmup Iteration   4: 5743995.457 ops/s
# Warmup Iteration   5: 6894856.746 ops/s
# Warmup Iteration   6: 6895522.076 ops/s
# Warmup Iteration   7: 6895945.766 ops/s
# Warmup Iteration   8: 6887786.398 ops/s
# Warmup Iteration   9: 6879634.247 ops/s
# Warmup Iteration  10: 6887357.857 ops/s
# Warmup Iteration  11: 6888806.332 ops/s
# Warmup Iteration  12: 6844602.519 ops/s
# Warmup Iteration  13: 6843967.788 ops/s
# Warmup Iteration  14: 6888680.429 ops/s
# Warmup Iteration  15: 6793410.347 ops/s
# Warmup Iteration  16: 6870378.353 ops/s
# Warmup Iteration  17: 6857527.227 ops/s
# Warmup Iteration  18: 6877960.039 ops/s
# Warmup Iteration  19: 6896146.159 ops/s
# Warmup Iteration  20: 6886713.578 ops/s
# Warmup Iteration  21: 6887718.793 ops/s
# Warmup Iteration  22: 6870776.527 ops/s
# Warmup Iteration  23: 6897021.119 ops/s
# Warmup Iteration  24: 6878845.856 ops/s
# Warmup Iteration  25: 6888136.079 ops/s
# Warmup Iteration  26: 6761529.353 ops/s
# Warmup Iteration  27: 6699683.025 ops/s
# Warmup Iteration  28: 6899342.998 ops/s
# Warmup Iteration  29: 6832078.518 ops/s
# Warmup Iteration  30: 6872780.933 ops/s
Iteration   1: 6893133.942 ops/s
Iteration   2: 6906758.226 ops/s
Iteration   3: 6889149.966 ops/s
Iteration   4: 6899058.370 ops/s
Iteration   5: 6909642.880 ops/s
Iteration   6: 6870005.123 ops/s
Iteration   7: 6911696.696 ops/s
Iteration   8: 6911077.961 ops/s
Iteration   9: 6891916.505 ops/s
Iteration  10: 6923621.349 ops/s
Iteration  11: 6905177.552 ops/s
Iteration  12: 6911098.335 ops/s
Iteration  13: 6787007.787 ops/s
Iteration  14: 6867772.885 ops/s
Iteration  15: 6780739.747 ops/s
Iteration  16: 6917789.572 ops/s
Iteration  17: 6887532.062 ops/s
Iteration  18: 6862986.879 ops/s
Iteration  19: 6747407.204 ops/s
Iteration  20: 6898353.903 ops/s
Iteration  21: 6831891.691 ops/s
Iteration  22: 6891430.819 ops/s
Iteration  23: 6780113.899 ops/s
Iteration  24: 6884468.732 ops/s
Iteration  25: 6790235.994 ops/s
Iteration  26: 6763706.840 ops/s
Iteration  27: 6891184.745 ops/s
Iteration  28: 6831513.476 ops/s
Iteration  29: 6868474.831 ops/s
Iteration  30: 6898887.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_tap":
  6866794.513 ±(99.9%) 34656.260 ops/s [Average]
  (min, avg, max) = (6747407.204, 6866794.513, 6923621.349), stdev = 51871.862
  CI (99.9%): [6832138.253, 6901450.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_tap  thrpt   30  6866794.513 ± 34656.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6525307.381 ops/s
# Warmup Iteration   2: 13736106.106 ops/s
# Warmup Iteration   3: 11785308.373 ops/s
# Warmup Iteration   4: 13825463.143 ops/s
# Warmup Iteration   5: 13884779.302 ops/s
# Warmup Iteration   6: 13714460.523 ops/s
# Warmup Iteration   7: 13886288.883 ops/s
# Warmup Iteration   8: 13930541.564 ops/s
# Warmup Iteration   9: 13790933.390 ops/s
# Warmup Iteration  10: 13940789.675 ops/s
# Warmup Iteration  11: 13904517.340 ops/s
# Warmup Iteration  12: 13852054.387 ops/s
# Warmup Iteration  13: 13804879.024 ops/s
# Warmup Iteration  14: 13907139.304 ops/s
# Warmup Iteration  15: 13943616.699 ops/s
# Warmup Iteration  16: 13911139.312 ops/s
# Warmup Iteration  17: 13907863.463 ops/s
# Warmup Iteration  18: 13952132.606 ops/s
# Warmup Iteration  19: 13869766.641 ops/s
# Warmup Iteration  20: 13736384.048 ops/s
# Warmup Iteration  21: 13939617.324 ops/s
# Warmup Iteration  22: 13843013.192 ops/s
# Warmup Iteration  23: 13788326.967 ops/s
# Warmup Iteration  24: 13946695.615 ops/s
# Warmup Iteration  25: 13940386.329 ops/s
# Warmup Iteration  26: 13870445.335 ops/s
# Warmup Iteration  27: 13911949.495 ops/s
# Warmup Iteration  28: 13876916.628 ops/s
# Warmup Iteration  29: 13957875.640 ops/s
# Warmup Iteration  30: 13766370.249 ops/s
Iteration   1: 13967027.872 ops/s
Iteration   2: 13988081.467 ops/s
Iteration   3: 13926433.352 ops/s
Iteration   4: 13883745.926 ops/s
Iteration   5: 13928766.997 ops/s
Iteration   6: 13829131.254 ops/s
Iteration   7: 13739691.980 ops/s
Iteration   8: 13885862.882 ops/s
Iteration   9: 13745112.837 ops/s
Iteration  10: 13948235.347 ops/s
Iteration  11: 13917598.317 ops/s
Iteration  12: 13918719.668 ops/s
Iteration  13: 13957293.548 ops/s
Iteration  14: 13919338.976 ops/s
Iteration  15: 13771891.340 ops/s
Iteration  16: 13939247.388 ops/s
Iteration  17: 13950213.702 ops/s
Iteration  18: 13849564.278 ops/s
Iteration  19: 13890169.925 ops/s
Iteration  20: 13879704.133 ops/s
Iteration  21: 13895649.274 ops/s
Iteration  22: 13931704.619 ops/s
Iteration  23: 13919938.499 ops/s
Iteration  24: 13975662.657 ops/s
Iteration  25: 13701909.995 ops/s
Iteration  26: 13989199.509 ops/s
Iteration  27: 13976431.696 ops/s
Iteration  28: 13675007.432 ops/s
Iteration  29: 13932306.125 ops/s
Iteration  30: 13934629.943 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testClone":
  13892275.698 ±(99.9%) 56905.461 ops/s [Average]
  (min, avg, max) = (13675007.432, 13892275.698, 13989199.509), stdev = 85173.421
  CI (99.9%): [13835370.237, 13949181.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testClone  thrpt   30  13892275.698 ± 56905.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5113423.407 ops/s
# Warmup Iteration   2: 10937571.158 ops/s
# Warmup Iteration   3: 10913848.232 ops/s
# Warmup Iteration   4: 9184799.354 ops/s
# Warmup Iteration   5: 10964099.341 ops/s
# Warmup Iteration   6: 10878827.430 ops/s
# Warmup Iteration   7: 10925768.609 ops/s
# Warmup Iteration   8: 10917566.100 ops/s
# Warmup Iteration   9: 10959882.817 ops/s
# Warmup Iteration  10: 10915496.026 ops/s
# Warmup Iteration  11: 10943323.214 ops/s
# Warmup Iteration  12: 10942742.356 ops/s
# Warmup Iteration  13: 10836116.454 ops/s
# Warmup Iteration  14: 10947242.281 ops/s
# Warmup Iteration  15: 10959014.183 ops/s
# Warmup Iteration  16: 10834301.990 ops/s
# Warmup Iteration  17: 10700991.712 ops/s
# Warmup Iteration  18: 10867089.209 ops/s
# Warmup Iteration  19: 10847092.606 ops/s
# Warmup Iteration  20: 10947142.569 ops/s
# Warmup Iteration  21: 10938442.717 ops/s
# Warmup Iteration  22: 10952742.274 ops/s
# Warmup Iteration  23: 10815340.034 ops/s
# Warmup Iteration  24: 10923594.442 ops/s
# Warmup Iteration  25: 10933555.559 ops/s
# Warmup Iteration  26: 10929653.197 ops/s
# Warmup Iteration  27: 10972655.914 ops/s
# Warmup Iteration  28: 10952763.453 ops/s
# Warmup Iteration  29: 10842193.675 ops/s
# Warmup Iteration  30: 10790989.983 ops/s
Iteration   1: 10913683.815 ops/s
Iteration   2: 10900085.683 ops/s
Iteration   3: 10936454.674 ops/s
Iteration   4: 10771877.792 ops/s
Iteration   5: 10954795.284 ops/s
Iteration   6: 10979315.328 ops/s
Iteration   7: 10956005.495 ops/s
Iteration   8: 10920886.860 ops/s
Iteration   9: 10929252.294 ops/s
Iteration  10: 10970755.542 ops/s
Iteration  11: 10930936.442 ops/s
Iteration  12: 10886606.333 ops/s
Iteration  13: 10765802.536 ops/s
Iteration  14: 10924132.443 ops/s
Iteration  15: 10951301.918 ops/s
Iteration  16: 10943385.040 ops/s
Iteration  17: 10767753.647 ops/s
Iteration  18: 10749939.804 ops/s
Iteration  19: 10943021.359 ops/s
Iteration  20: 10953692.985 ops/s
Iteration  21: 10787435.462 ops/s
Iteration  22: 10978971.070 ops/s
Iteration  23: 10847253.219 ops/s
Iteration  24: 10956671.903 ops/s
Iteration  25: 10905419.539 ops/s
Iteration  26: 10955972.351 ops/s
Iteration  27: 10933847.440 ops/s
Iteration  28: 10946834.831 ops/s
Iteration  29: 10966694.326 ops/s
Iteration  30: 10956278.764 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewCollection":
  10909502.139 ±(99.9%) 46743.542 ops/s [Average]
  (min, avg, max) = (10749939.804, 10909502.139, 10979315.328), stdev = 69963.538
  CI (99.9%): [10862758.597, 10956245.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testNewCollection  thrpt   30  10909502.139 ± 46743.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3887497.073 ops/s
# Warmup Iteration   2: 7549322.392 ops/s
# Warmup Iteration   3: 7072384.519 ops/s
# Warmup Iteration   4: 7893487.112 ops/s
# Warmup Iteration   5: 7930968.944 ops/s
# Warmup Iteration   6: 7920766.271 ops/s
# Warmup Iteration   7: 7937194.347 ops/s
# Warmup Iteration   8: 7879188.142 ops/s
# Warmup Iteration   9: 7955299.256 ops/s
# Warmup Iteration  10: 7856154.940 ops/s
# Warmup Iteration  11: 7853578.705 ops/s
# Warmup Iteration  12: 7920552.432 ops/s
# Warmup Iteration  13: 7913709.291 ops/s
# Warmup Iteration  14: 7862175.684 ops/s
# Warmup Iteration  15: 7929876.432 ops/s
# Warmup Iteration  16: 7922650.980 ops/s
# Warmup Iteration  17: 7880985.566 ops/s
# Warmup Iteration  18: 7953704.150 ops/s
# Warmup Iteration  19: 7929040.173 ops/s
# Warmup Iteration  20: 7887288.686 ops/s
# Warmup Iteration  21: 7962010.679 ops/s
# Warmup Iteration  22: 7878822.395 ops/s
# Warmup Iteration  23: 7938469.481 ops/s
# Warmup Iteration  24: 7946992.733 ops/s
# Warmup Iteration  25: 7865213.279 ops/s
# Warmup Iteration  26: 7905420.768 ops/s
# Warmup Iteration  27: 7864924.195 ops/s
# Warmup Iteration  28: 7956802.527 ops/s
# Warmup Iteration  29: 7945157.629 ops/s
# Warmup Iteration  30: 7827791.625 ops/s
Iteration   1: 7939200.954 ops/s
Iteration   2: 7959437.520 ops/s
Iteration   3: 7854133.723 ops/s
Iteration   4: 7885901.842 ops/s
Iteration   5: 7865271.961 ops/s
Iteration   6: 7923188.837 ops/s
Iteration   7: 7772442.458 ops/s
Iteration   8: 7946768.867 ops/s
Iteration   9: 7829874.427 ops/s
Iteration  10: 7798495.601 ops/s
Iteration  11: 7876147.101 ops/s
Iteration  12: 7839769.544 ops/s
Iteration  13: 7829027.908 ops/s
Iteration  14: 7863932.784 ops/s
Iteration  15: 7802323.321 ops/s
Iteration  16: 7888885.878 ops/s
Iteration  17: 7890969.202 ops/s
Iteration  18: 7899945.000 ops/s
Iteration  19: 7895632.733 ops/s
Iteration  20: 7955682.318 ops/s
Iteration  21: 7941095.311 ops/s
Iteration  22: 7967562.494 ops/s
Iteration  23: 7825106.563 ops/s
Iteration  24: 7919046.510 ops/s
Iteration  25: 7923884.950 ops/s
Iteration  26: 7851353.065 ops/s
Iteration  27: 7702938.807 ops/s
Iteration  28: 7936467.109 ops/s
Iteration  29: 7946402.548 ops/s
Iteration  30: 7912183.368 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWith":
  7881435.757 ±(99.9%) 41794.169 ops/s [Average]
  (min, avg, max) = (7702938.807, 7881435.757, 7967562.494), stdev = 62555.549
  CI (99.9%): [7839641.588, 7923229.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testNewWith  thrpt   30  7881435.757 ± 41794.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2525201.041 ops/s
# Warmup Iteration   2: 5226661.432 ops/s
# Warmup Iteration   3: 4441468.237 ops/s
# Warmup Iteration   4: 5135908.163 ops/s
# Warmup Iteration   5: 5211904.983 ops/s
# Warmup Iteration   6: 5202566.288 ops/s
# Warmup Iteration   7: 5239665.900 ops/s
# Warmup Iteration   8: 5195270.423 ops/s
# Warmup Iteration   9: 5218844.424 ops/s
# Warmup Iteration  10: 5221172.904 ops/s
# Warmup Iteration  11: 5203637.263 ops/s
# Warmup Iteration  12: 5187818.135 ops/s
# Warmup Iteration  13: 5193363.151 ops/s
# Warmup Iteration  14: 5185249.120 ops/s
# Warmup Iteration  15: 5200170.352 ops/s
# Warmup Iteration  16: 5238973.529 ops/s
# Warmup Iteration  17: 5189612.696 ops/s
# Warmup Iteration  18: 5240293.059 ops/s
# Warmup Iteration  19: 5234178.601 ops/s
# Warmup Iteration  20: 5211725.102 ops/s
# Warmup Iteration  21: 5236357.402 ops/s
# Warmup Iteration  22: 5239966.758 ops/s
# Warmup Iteration  23: 5256183.959 ops/s
# Warmup Iteration  24: 5246007.095 ops/s
# Warmup Iteration  25: 5217481.859 ops/s
# Warmup Iteration  26: 5165633.580 ops/s
# Warmup Iteration  27: 5249250.708 ops/s
# Warmup Iteration  28: 5231952.144 ops/s
# Warmup Iteration  29: 5239516.137 ops/s
# Warmup Iteration  30: 5261926.188 ops/s
Iteration   1: 5227120.571 ops/s
Iteration   2: 5251915.839 ops/s
Iteration   3: 5177273.360 ops/s
Iteration   4: 5215112.712 ops/s
Iteration   5: 5162247.642 ops/s
Iteration   6: 5241239.143 ops/s
Iteration   7: 5179318.611 ops/s
Iteration   8: 5236541.015 ops/s
Iteration   9: 5205744.042 ops/s
Iteration  10: 5234345.429 ops/s
Iteration  11: 5194046.003 ops/s
Iteration  12: 5243550.013 ops/s
Iteration  13: 5231674.603 ops/s
Iteration  14: 5133389.450 ops/s
Iteration  15: 5232265.808 ops/s
Iteration  16: 5263390.710 ops/s
Iteration  17: 5258923.926 ops/s
Iteration  18: 5256085.714 ops/s
Iteration  19: 5225015.080 ops/s
Iteration  20: 5266610.348 ops/s
Iteration  21: 5236878.997 ops/s
Iteration  22: 5265844.801 ops/s
Iteration  23: 5247923.605 ops/s
Iteration  24: 5265446.776 ops/s
Iteration  25: 5224797.338 ops/s
Iteration  26: 5270556.295 ops/s
Iteration  27: 5269338.974 ops/s
Iteration  28: 5247973.225 ops/s
Iteration  29: 5256991.423 ops/s
Iteration  30: 5251077.017 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithVarArgs":
  5232421.282 ±(99.9%) 22771.980 ops/s [Average]
  (min, avg, max) = (5133389.450, 5232421.282, 5270556.295), stdev = 34084.031
  CI (99.9%): [5209649.302, 5255193.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  5232421.282 ± 22771.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2886805.961 ops/s
# Warmup Iteration   2: 5890070.457 ops/s
# Warmup Iteration   3: 5207416.203 ops/s
# Warmup Iteration   4: 6133423.588 ops/s
# Warmup Iteration   5: 6136182.807 ops/s
# Warmup Iteration   6: 6084540.224 ops/s
# Warmup Iteration   7: 6116342.547 ops/s
# Warmup Iteration   8: 6157160.560 ops/s
# Warmup Iteration   9: 6157481.023 ops/s
# Warmup Iteration  10: 6006803.085 ops/s
# Warmup Iteration  11: 6123285.592 ops/s
# Warmup Iteration  12: 6080545.672 ops/s
# Warmup Iteration  13: 6102843.897 ops/s
# Warmup Iteration  14: 6046079.323 ops/s
# Warmup Iteration  15: 6119227.729 ops/s
# Warmup Iteration  16: 6063010.408 ops/s
# Warmup Iteration  17: 6118400.735 ops/s
# Warmup Iteration  18: 6066584.996 ops/s
# Warmup Iteration  19: 6100074.720 ops/s
# Warmup Iteration  20: 6138126.663 ops/s
# Warmup Iteration  21: 6111600.452 ops/s
# Warmup Iteration  22: 6115430.171 ops/s
# Warmup Iteration  23: 6118071.861 ops/s
# Warmup Iteration  24: 6147450.217 ops/s
# Warmup Iteration  25: 6132161.567 ops/s
# Warmup Iteration  26: 6138973.071 ops/s
# Warmup Iteration  27: 6154649.717 ops/s
# Warmup Iteration  28: 6154907.937 ops/s
# Warmup Iteration  29: 6086574.572 ops/s
# Warmup Iteration  30: 6134957.896 ops/s
Iteration   1: 6141308.794 ops/s
Iteration   2: 6021712.486 ops/s
Iteration   3: 6142202.963 ops/s
Iteration   4: 6119816.396 ops/s
Iteration   5: 6047136.755 ops/s
Iteration   6: 6156498.284 ops/s
Iteration   7: 6050738.066 ops/s
Iteration   8: 6160778.630 ops/s
Iteration   9: 6143987.505 ops/s
Iteration  10: 6133736.951 ops/s
Iteration  11: 5960540.651 ops/s
Iteration  12: 6135214.923 ops/s
Iteration  13: 6060595.611 ops/s
Iteration  14: 6148146.621 ops/s
Iteration  15: 6133125.836 ops/s
Iteration  16: 6166350.571 ops/s
Iteration  17: 6058030.785 ops/s
Iteration  18: 6153313.008 ops/s
Iteration  19: 6139720.085 ops/s
Iteration  20: 6153672.943 ops/s
Iteration  21: 6160616.362 ops/s
Iteration  22: 6119324.799 ops/s
Iteration  23: 6142059.435 ops/s
Iteration  24: 6150533.499 ops/s
Iteration  25: 6171591.197 ops/s
Iteration  26: 6064085.858 ops/s
Iteration  27: 5949549.865 ops/s
Iteration  28: 6143274.757 ops/s
Iteration  29: 6141057.626 ops/s
Iteration  30: 6044263.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWith":
  6110432.834 ±(99.9%) 40227.003 ops/s [Average]
  (min, avg, max) = (5949549.865, 6110432.834, 6171591.197), stdev = 60209.888
  CI (99.9%): [6070205.831, 6150659.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testNewWithWith  thrpt   30  6110432.834 ± 40227.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2775104.655 ops/s
# Warmup Iteration   2: 5725744.605 ops/s
# Warmup Iteration   3: 4934426.338 ops/s
# Warmup Iteration   4: 5806240.022 ops/s
# Warmup Iteration   5: 5714911.341 ops/s
# Warmup Iteration   6: 5795551.864 ops/s
# Warmup Iteration   7: 5789395.511 ops/s
# Warmup Iteration   8: 5783367.408 ops/s
# Warmup Iteration   9: 5779828.621 ops/s
# Warmup Iteration  10: 5817967.222 ops/s
# Warmup Iteration  11: 5795921.465 ops/s
# Warmup Iteration  12: 5832968.462 ops/s
# Warmup Iteration  13: 5808988.410 ops/s
# Warmup Iteration  14: 5813389.094 ops/s
# Warmup Iteration  15: 5803296.171 ops/s
# Warmup Iteration  16: 5726961.277 ops/s
# Warmup Iteration  17: 5752936.590 ops/s
# Warmup Iteration  18: 5762520.943 ops/s
# Warmup Iteration  19: 5797998.369 ops/s
# Warmup Iteration  20: 5788399.221 ops/s
# Warmup Iteration  21: 5753453.064 ops/s
# Warmup Iteration  22: 5809678.895 ops/s
# Warmup Iteration  23: 5795189.500 ops/s
# Warmup Iteration  24: 5794256.324 ops/s
# Warmup Iteration  25: 5792293.174 ops/s
# Warmup Iteration  26: 5730236.786 ops/s
# Warmup Iteration  27: 5802135.363 ops/s
# Warmup Iteration  28: 5789129.058 ops/s
# Warmup Iteration  29: 5713025.480 ops/s
# Warmup Iteration  30: 5798938.835 ops/s
Iteration   1: 5790502.334 ops/s
Iteration   2: 5809499.929 ops/s
Iteration   3: 5803186.490 ops/s
Iteration   4: 5807448.634 ops/s
Iteration   5: 5825831.446 ops/s
Iteration   6: 5817038.299 ops/s
Iteration   7: 5792978.471 ops/s
Iteration   8: 5800606.275 ops/s
Iteration   9: 5834331.081 ops/s
Iteration  10: 5803494.538 ops/s
Iteration  11: 5717115.737 ops/s
Iteration  12: 5810562.566 ops/s
Iteration  13: 5695472.780 ops/s
Iteration  14: 5804162.215 ops/s
Iteration  15: 5695392.939 ops/s
Iteration  16: 5773500.036 ops/s
Iteration  17: 5789547.299 ops/s
Iteration  18: 5814801.442 ops/s
Iteration  19: 5792466.590 ops/s
Iteration  20: 5800361.997 ops/s
Iteration  21: 5806260.135 ops/s
Iteration  22: 5804749.569 ops/s
Iteration  23: 5793577.387 ops/s
Iteration  24: 5796832.580 ops/s
Iteration  25: 5678293.185 ops/s
Iteration  26: 5799704.093 ops/s
Iteration  27: 5821171.239 ops/s
Iteration  28: 5808500.120 ops/s
Iteration  29: 5789657.526 ops/s
Iteration  30: 5822774.892 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testNewWithWithWith":
  5789994.061 ±(99.9%) 26454.508 ops/s [Average]
  (min, avg, max) = (5678293.185, 5789994.061, 5834331.081), stdev = 39595.865
  CI (99.9%): [5763539.553, 5816448.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  5789994.061 ± 26454.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1344776.523 ops/s
# Warmup Iteration   2: 3205687.463 ops/s
# Warmup Iteration   3: 2651366.835 ops/s
# Warmup Iteration   4: 3093057.194 ops/s
# Warmup Iteration   5: 3154535.582 ops/s
# Warmup Iteration   6: 3144002.850 ops/s
# Warmup Iteration   7: 3164101.046 ops/s
# Warmup Iteration   8: 3143530.297 ops/s
# Warmup Iteration   9: 3127768.334 ops/s
# Warmup Iteration  10: 3133179.903 ops/s
# Warmup Iteration  11: 3163124.790 ops/s
# Warmup Iteration  12: 3145839.993 ops/s
# Warmup Iteration  13: 3168675.082 ops/s
# Warmup Iteration  14: 3157549.071 ops/s
# Warmup Iteration  15: 3154991.515 ops/s
# Warmup Iteration  16: 3101530.015 ops/s
# Warmup Iteration  17: 3123293.946 ops/s
# Warmup Iteration  18: 3138373.768 ops/s
# Warmup Iteration  19: 3163933.362 ops/s
# Warmup Iteration  20: 3164011.122 ops/s
# Warmup Iteration  21: 3165048.224 ops/s
# Warmup Iteration  22: 3148489.877 ops/s
# Warmup Iteration  23: 3158870.635 ops/s
# Warmup Iteration  24: 3134595.639 ops/s
# Warmup Iteration  25: 3151885.826 ops/s
# Warmup Iteration  26: 3159003.706 ops/s
# Warmup Iteration  27: 3151179.821 ops/s
# Warmup Iteration  28: 3133961.460 ops/s
# Warmup Iteration  29: 3163392.044 ops/s
# Warmup Iteration  30: 3099083.151 ops/s
Iteration   1: 3167391.070 ops/s
Iteration   2: 3151738.894 ops/s
Iteration   3: 3166594.028 ops/s
Iteration   4: 3115409.102 ops/s
Iteration   5: 3181056.689 ops/s
Iteration   6: 3127679.604 ops/s
Iteration   7: 3158944.952 ops/s
Iteration   8: 3155091.545 ops/s
Iteration   9: 3151309.898 ops/s
Iteration  10: 3144325.128 ops/s
Iteration  11: 3152887.655 ops/s
Iteration  12: 3158102.207 ops/s
Iteration  13: 3155430.004 ops/s
Iteration  14: 3159303.459 ops/s
Iteration  15: 3155197.660 ops/s
Iteration  16: 3086679.622 ops/s
Iteration  17: 3044553.790 ops/s
Iteration  18: 3150325.232 ops/s
Iteration  19: 3151378.228 ops/s
Iteration  20: 3117737.470 ops/s
Iteration  21: 3139081.401 ops/s
Iteration  22: 3169776.223 ops/s
Iteration  23: 3162407.942 ops/s
Iteration  24: 3148078.826 ops/s
Iteration  25: 3155988.745 ops/s
Iteration  26: 3149636.213 ops/s
Iteration  27: 3178801.011 ops/s
Iteration  28: 3159381.795 ops/s
Iteration  29: 3150138.692 ops/s
Iteration  30: 3170521.226 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_testToString":
  3147831.610 ±(99.9%) 18263.255 ops/s [Average]
  (min, avg, max) = (3044553.790, 3147831.610, 3181056.689), stdev = 27335.582
  CI (99.9%): [3129568.356, 3166094.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_testToString  thrpt   30  3147831.610 ± 18263.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5655329.762 ops/s
# Warmup Iteration   2: 11451309.590 ops/s
# Warmup Iteration   3: 9830267.028 ops/s
# Warmup Iteration   4: 11545026.337 ops/s
# Warmup Iteration   5: 11616323.229 ops/s
# Warmup Iteration   6: 11512838.746 ops/s
# Warmup Iteration   7: 11592315.412 ops/s
# Warmup Iteration   8: 11569220.726 ops/s
# Warmup Iteration   9: 11583505.351 ops/s
# Warmup Iteration  10: 11587174.256 ops/s
# Warmup Iteration  11: 11617025.263 ops/s
# Warmup Iteration  12: 11532034.510 ops/s
# Warmup Iteration  13: 11582409.156 ops/s
# Warmup Iteration  14: 11590201.548 ops/s
# Warmup Iteration  15: 11527655.719 ops/s
# Warmup Iteration  16: 11315136.740 ops/s
# Warmup Iteration  17: 11564704.348 ops/s
# Warmup Iteration  18: 11512913.891 ops/s
# Warmup Iteration  19: 11592784.025 ops/s
# Warmup Iteration  20: 11531684.897 ops/s
# Warmup Iteration  21: 11573746.781 ops/s
# Warmup Iteration  22: 11592316.863 ops/s
# Warmup Iteration  23: 11542491.434 ops/s
# Warmup Iteration  24: 11586112.563 ops/s
# Warmup Iteration  25: 11605392.104 ops/s
# Warmup Iteration  26: 11621157.196 ops/s
# Warmup Iteration  27: 11478107.679 ops/s
# Warmup Iteration  28: 11545660.558 ops/s
# Warmup Iteration  29: 11607723.084 ops/s
# Warmup Iteration  30: 11473928.127 ops/s
Iteration   1: 11546178.241 ops/s
Iteration   2: 11614321.743 ops/s
Iteration   3: 11505187.830 ops/s
Iteration   4: 11593065.666 ops/s
Iteration   5: 11626696.178 ops/s
Iteration   6: 11492251.842 ops/s
Iteration   7: 11509286.559 ops/s
Iteration   8: 11518952.193 ops/s
Iteration   9: 11575312.433 ops/s
Iteration  10: 11599345.368 ops/s
Iteration  11: 11398191.340 ops/s
Iteration  12: 11622697.441 ops/s
Iteration  13: 11591471.299 ops/s
Iteration  14: 11613234.448 ops/s
Iteration  15: 11611296.317 ops/s
Iteration  16: 11429838.394 ops/s
Iteration  17: 11609323.162 ops/s
Iteration  18: 11299966.712 ops/s
Iteration  19: 11435138.156 ops/s
Iteration  20: 11369201.509 ops/s
Iteration  21: 11388587.684 ops/s
Iteration  22: 11373498.904 ops/s
Iteration  23: 11417534.363 ops/s
Iteration  24: 11347042.126 ops/s
Iteration  25: 11599143.723 ops/s
Iteration  26: 11401320.998 ops/s
Iteration  27: 11634500.686 ops/s
Iteration  28: 11201154.546 ops/s
Iteration  29: 11619632.038 ops/s
Iteration  30: 11545944.461 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toArray":
  11502977.212 ±(99.9%) 77966.233 ops/s [Average]
  (min, avg, max) = (11201154.546, 11502977.212, 11634500.686), stdev = 116696.196
  CI (99.9%): [11425010.979, 11580943.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toArray  thrpt   30  11502977.212 ± 77966.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 925138.541 ops/s
# Warmup Iteration   2: 1677771.182 ops/s
# Warmup Iteration   3: 1895968.264 ops/s
# Warmup Iteration   4: 1920352.764 ops/s
# Warmup Iteration   5: 1923553.114 ops/s
# Warmup Iteration   6: 1576879.960 ops/s
# Warmup Iteration   7: 1933326.230 ops/s
# Warmup Iteration   8: 1942918.892 ops/s
# Warmup Iteration   9: 1930246.651 ops/s
# Warmup Iteration  10: 1931839.776 ops/s
# Warmup Iteration  11: 1941845.867 ops/s
# Warmup Iteration  12: 1926042.756 ops/s
# Warmup Iteration  13: 1931138.154 ops/s
# Warmup Iteration  14: 1922312.566 ops/s
# Warmup Iteration  15: 1940831.292 ops/s
# Warmup Iteration  16: 1927182.424 ops/s
# Warmup Iteration  17: 1929198.384 ops/s
# Warmup Iteration  18: 1925096.918 ops/s
# Warmup Iteration  19: 1910605.199 ops/s
# Warmup Iteration  20: 1919780.536 ops/s
# Warmup Iteration  21: 1927549.846 ops/s
# Warmup Iteration  22: 1910572.265 ops/s
# Warmup Iteration  23: 1901999.937 ops/s
# Warmup Iteration  24: 1925480.971 ops/s
# Warmup Iteration  25: 1928490.251 ops/s
# Warmup Iteration  26: 1924650.666 ops/s
# Warmup Iteration  27: 1914552.338 ops/s
# Warmup Iteration  28: 1922876.465 ops/s
# Warmup Iteration  29: 1926376.875 ops/s
# Warmup Iteration  30: 1927743.270 ops/s
Iteration   1: 1922895.759 ops/s
Iteration   2: 1923136.450 ops/s
Iteration   3: 1903034.522 ops/s
Iteration   4: 1886519.913 ops/s
Iteration   5: 1894978.042 ops/s
Iteration   6: 1920266.567 ops/s
Iteration   7: 1926126.861 ops/s
Iteration   8: 1924838.217 ops/s
Iteration   9: 1928200.836 ops/s
Iteration  10: 1889953.679 ops/s
Iteration  11: 1918105.250 ops/s
Iteration  12: 1922117.530 ops/s
Iteration  13: 1914964.205 ops/s
Iteration  14: 1923329.237 ops/s
Iteration  15: 1922507.651 ops/s
Iteration  16: 1899816.346 ops/s
Iteration  17: 1923856.873 ops/s
Iteration  18: 1886867.696 ops/s
Iteration  19: 1924920.631 ops/s
Iteration  20: 1927624.131 ops/s
Iteration  21: 1933750.198 ops/s
Iteration  22: 1902765.589 ops/s
Iteration  23: 1926548.038 ops/s
Iteration  24: 1918748.803 ops/s
Iteration  25: 1909097.708 ops/s
Iteration  26: 1923878.610 ops/s
Iteration  27: 1896620.963 ops/s
Iteration  28: 1915584.019 ops/s
Iteration  29: 1920958.301 ops/s
Iteration  30: 1863543.466 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBag":
  1913185.203 ±(99.9%) 10931.005 ops/s [Average]
  (min, avg, max) = (1863543.466, 1913185.203, 1933750.198), stdev = 16361.015
  CI (99.9%): [1902254.198, 1924116.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toBag  thrpt   30  1913185.203 ± 10931.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100639.186 ops/s
# Warmup Iteration   2: 137662.797 ops/s
# Warmup Iteration   3: 174206.048 ops/s
# Warmup Iteration   4: 174525.793 ops/s
# Warmup Iteration   5: 173210.714 ops/s
# Warmup Iteration   6: 174184.460 ops/s
# Warmup Iteration   7: 175239.650 ops/s
# Warmup Iteration   8: 147047.224 ops/s
# Warmup Iteration   9: 172734.754 ops/s
# Warmup Iteration  10: 175009.886 ops/s
# Warmup Iteration  11: 175587.953 ops/s
# Warmup Iteration  12: 175336.669 ops/s
# Warmup Iteration  13: 174189.516 ops/s
# Warmup Iteration  14: 175716.221 ops/s
# Warmup Iteration  15: 174344.574 ops/s
# Warmup Iteration  16: 175423.024 ops/s
# Warmup Iteration  17: 180459.714 ops/s
# Warmup Iteration  18: 180223.613 ops/s
# Warmup Iteration  19: 179693.682 ops/s
# Warmup Iteration  20: 179743.362 ops/s
# Warmup Iteration  21: 180798.716 ops/s
# Warmup Iteration  22: 180948.199 ops/s
# Warmup Iteration  23: 181393.415 ops/s
# Warmup Iteration  24: 181391.896 ops/s
# Warmup Iteration  25: 180478.796 ops/s
# Warmup Iteration  26: 181383.503 ops/s
# Warmup Iteration  27: 181538.784 ops/s
# Warmup Iteration  28: 181088.931 ops/s
# Warmup Iteration  29: 179728.540 ops/s
# Warmup Iteration  30: 180311.101 ops/s
Iteration   1: 181112.262 ops/s
Iteration   2: 180853.965 ops/s
Iteration   3: 180270.609 ops/s
Iteration   4: 179790.040 ops/s
Iteration   5: 178927.644 ops/s
Iteration   6: 180530.860 ops/s
Iteration   7: 180225.218 ops/s
Iteration   8: 178008.488 ops/s
Iteration   9: 181905.057 ops/s
Iteration  10: 181417.459 ops/s
Iteration  11: 178073.294 ops/s
Iteration  12: 181335.409 ops/s
Iteration  13: 180545.731 ops/s
Iteration  14: 181596.599 ops/s
Iteration  15: 180369.052 ops/s
Iteration  16: 181161.625 ops/s
Iteration  17: 181321.847 ops/s
Iteration  18: 181052.553 ops/s
Iteration  19: 180026.630 ops/s
Iteration  20: 180980.628 ops/s
Iteration  21: 181366.471 ops/s
Iteration  22: 181816.071 ops/s
Iteration  23: 181676.892 ops/s
Iteration  24: 177822.903 ops/s
Iteration  25: 181821.457 ops/s
Iteration  26: 181067.272 ops/s
Iteration  27: 178882.007 ops/s
Iteration  28: 181209.010 ops/s
Iteration  29: 181613.183 ops/s
Iteration  30: 180960.737 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toBiMap":
  180591.366 ±(99.9%) 782.062 ops/s [Average]
  (min, avg, max) = (177822.903, 180591.366, 181905.057), stdev = 1170.554
  CI (99.9%): [179809.304, 181373.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_toBiMap  thrpt   30  180591.366 ± 782.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1781198.480 ops/s
# Warmup Iteration   2: 3856427.312 ops/s
# Warmup Iteration   3: 3992521.458 ops/s
# Warmup Iteration   4: 3874386.254 ops/s
# Warmup Iteration   5: 3437436.898 ops/s
# Warmup Iteration   6: 3949265.345 ops/s
# Warmup Iteration   7: 3988002.461 ops/s
# Warmup Iteration   8: 4017493.891 ops/s
# Warmup Iteration   9: 4001146.564 ops/s
# Warmup Iteration  10: 4009384.555 ops/s
# Warmup Iteration  11: 3965529.958 ops/s
# Warmup Iteration  12: 4012563.485 ops/s
# Warmup Iteration  13: 4006110.484 ops/s
# Warmup Iteration  14: 3991433.945 ops/s
# Warmup Iteration  15: 3945973.578 ops/s
# Warmup Iteration  16: 4005320.420 ops/s
# Warmup Iteration  17: 4012450.788 ops/s
# Warmup Iteration  18: 3970763.668 ops/s
# Warmup Iteration  19: 4010833.025 ops/s
# Warmup Iteration  20: 4009577.031 ops/s
# Warmup Iteration  21: 4001498.296 ops/s
# Warmup Iteration  22: 4000946.679 ops/s
# Warmup Iteration  23: 4007391.252 ops/s
# Warmup Iteration  24: 3976448.196 ops/s
# Warmup Iteration  25: 3965012.105 ops/s
# Warmup Iteration  26: 3980940.476 ops/s
# Warmup Iteration  27: 3999401.934 ops/s
# Warmup Iteration  28: 4012040.049 ops/s
# Warmup Iteration  29: 3952103.985 ops/s
# Warmup Iteration  30: 4006136.577 ops/s
Iteration   1: 4017195.914 ops/s
Iteration   2: 4004608.382 ops/s
Iteration   3: 4009633.308 ops/s
Iteration   4: 3954388.951 ops/s
Iteration   5: 4008202.244 ops/s
Iteration   6: 4008350.800 ops/s
Iteration   7: 4014648.010 ops/s
Iteration   8: 4006129.389 ops/s
Iteration   9: 4001912.368 ops/s
Iteration  10: 4004210.161 ops/s
Iteration  11: 3990038.329 ops/s
Iteration  12: 4009139.209 ops/s
Iteration  13: 4019922.355 ops/s
Iteration  14: 4004401.484 ops/s
Iteration  15: 4008053.171 ops/s
Iteration  16: 3993583.254 ops/s
Iteration  17: 4020614.828 ops/s
Iteration  18: 4012706.958 ops/s
Iteration  19: 3988804.287 ops/s
Iteration  20: 4018120.070 ops/s
Iteration  21: 3948612.064 ops/s
Iteration  22: 4012926.001 ops/s
Iteration  23: 4006132.327 ops/s
Iteration  24: 4002351.232 ops/s
Iteration  25: 3982743.029 ops/s
Iteration  26: 4011121.265 ops/s
Iteration  27: 4001446.466 ops/s
Iteration  28: 3918445.366 ops/s
Iteration  29: 4005857.809 ops/s
Iteration  30: 4018753.712 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toCollection":
  4000101.758 ±(99.9%) 15173.154 ops/s [Average]
  (min, avg, max) = (3918445.366, 4000101.758, 4020614.828), stdev = 22710.465
  CI (99.9%): [3984928.604, 4015274.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toCollection  thrpt   30  4000101.758 ± 15173.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2180800.226 ops/s
# Warmup Iteration   2: 2382988.145 ops/s
# Warmup Iteration   3: 3140317.799 ops/s
# Warmup Iteration   4: 3142431.267 ops/s
# Warmup Iteration   5: 3155866.279 ops/s
# Warmup Iteration   6: 3171869.342 ops/s
# Warmup Iteration   7: 3158314.100 ops/s
# Warmup Iteration   8: 3140309.510 ops/s
# Warmup Iteration   9: 3174008.096 ops/s
# Warmup Iteration  10: 3171325.986 ops/s
# Warmup Iteration  11: 2601243.622 ops/s
# Warmup Iteration  12: 3178882.427 ops/s
# Warmup Iteration  13: 3179799.916 ops/s
# Warmup Iteration  14: 3177921.323 ops/s
# Warmup Iteration  15: 3142572.491 ops/s
# Warmup Iteration  16: 3175363.002 ops/s
# Warmup Iteration  17: 3124745.213 ops/s
# Warmup Iteration  18: 3168718.889 ops/s
# Warmup Iteration  19: 3122615.582 ops/s
# Warmup Iteration  20: 3169000.845 ops/s
# Warmup Iteration  21: 3156253.525 ops/s
# Warmup Iteration  22: 3167673.485 ops/s
# Warmup Iteration  23: 3152751.034 ops/s
# Warmup Iteration  24: 3167059.822 ops/s
# Warmup Iteration  25: 3112070.869 ops/s
# Warmup Iteration  26: 3119332.223 ops/s
# Warmup Iteration  27: 3129420.007 ops/s
# Warmup Iteration  28: 3137583.529 ops/s
# Warmup Iteration  29: 3160828.825 ops/s
# Warmup Iteration  30: 3136248.020 ops/s
Iteration   1: 3171033.405 ops/s
Iteration   2: 3177385.714 ops/s
Iteration   3: 3164643.756 ops/s
Iteration   4: 3090367.818 ops/s
Iteration   5: 3169337.565 ops/s
Iteration   6: 3139943.195 ops/s
Iteration   7: 3121200.562 ops/s
Iteration   8: 3149257.425 ops/s
Iteration   9: 3152330.790 ops/s
Iteration  10: 3150973.543 ops/s
Iteration  11: 3154246.603 ops/s
Iteration  12: 3176054.345 ops/s
Iteration  13: 3152235.640 ops/s
Iteration  14: 3165014.504 ops/s
Iteration  15: 3103506.192 ops/s
Iteration  16: 3053355.577 ops/s
Iteration  17: 3156331.945 ops/s
Iteration  18: 3171717.192 ops/s
Iteration  19: 3145244.964 ops/s
Iteration  20: 3170527.243 ops/s
Iteration  21: 3088961.665 ops/s
Iteration  22: 3138746.031 ops/s
Iteration  23: 3147350.480 ops/s
Iteration  24: 3167343.855 ops/s
Iteration  25: 3174277.529 ops/s
Iteration  26: 3170438.284 ops/s
Iteration  27: 3133949.091 ops/s
Iteration  28: 3116510.704 ops/s
Iteration  29: 3165425.658 ops/s
Iteration  30: 3138748.647 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutable":
  3145881.997 ±(99.9%) 20028.526 ops/s [Average]
  (min, avg, max) = (3053355.577, 3145881.997, 3177385.714), stdev = 29977.757
  CI (99.9%): [3125853.471, 3165910.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutable  thrpt   30  3145881.997 ± 20028.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536046.346 ops/s
# Warmup Iteration   2: 994155.869 ops/s
# Warmup Iteration   3: 1150032.677 ops/s
# Warmup Iteration   4: 1159496.499 ops/s
# Warmup Iteration   5: 1161247.241 ops/s
# Warmup Iteration   6: 943330.312 ops/s
# Warmup Iteration   7: 1163156.319 ops/s
# Warmup Iteration   8: 1166873.904 ops/s
# Warmup Iteration   9: 1166264.332 ops/s
# Warmup Iteration  10: 1157054.986 ops/s
# Warmup Iteration  11: 1154941.343 ops/s
# Warmup Iteration  12: 1164269.948 ops/s
# Warmup Iteration  13: 1166839.388 ops/s
# Warmup Iteration  14: 1163654.379 ops/s
# Warmup Iteration  15: 1150388.203 ops/s
# Warmup Iteration  16: 1154457.783 ops/s
# Warmup Iteration  17: 1163243.342 ops/s
# Warmup Iteration  18: 1157923.748 ops/s
# Warmup Iteration  19: 1156703.988 ops/s
# Warmup Iteration  20: 1153641.820 ops/s
# Warmup Iteration  21: 1164606.445 ops/s
# Warmup Iteration  22: 1163442.681 ops/s
# Warmup Iteration  23: 1151078.513 ops/s
# Warmup Iteration  24: 1167930.446 ops/s
# Warmup Iteration  25: 1165300.951 ops/s
# Warmup Iteration  26: 1160417.070 ops/s
# Warmup Iteration  27: 1163009.760 ops/s
# Warmup Iteration  28: 1162448.841 ops/s
# Warmup Iteration  29: 1158643.772 ops/s
# Warmup Iteration  30: 1154666.703 ops/s
Iteration   1: 1144710.321 ops/s
Iteration   2: 1145023.291 ops/s
Iteration   3: 1167686.557 ops/s
Iteration   4: 1165066.645 ops/s
Iteration   5: 1166646.608 ops/s
Iteration   6: 1162020.947 ops/s
Iteration   7: 1147834.351 ops/s
Iteration   8: 1165272.051 ops/s
Iteration   9: 1162734.606 ops/s
Iteration  10: 1168307.550 ops/s
Iteration  11: 1165234.561 ops/s
Iteration  12: 1142360.663 ops/s
Iteration  13: 1165428.393 ops/s
Iteration  14: 1163957.211 ops/s
Iteration  15: 1159672.845 ops/s
Iteration  16: 1162692.003 ops/s
Iteration  17: 1166417.107 ops/s
Iteration  18: 1125608.881 ops/s
Iteration  19: 1161383.743 ops/s
Iteration  20: 1140757.381 ops/s
Iteration  21: 1155904.866 ops/s
Iteration  22: 1150181.467 ops/s
Iteration  23: 1143971.662 ops/s
Iteration  24: 1162759.004 ops/s
Iteration  25: 1166034.818 ops/s
Iteration  26: 1150865.400 ops/s
Iteration  27: 1165985.861 ops/s
Iteration  28: 1164038.010 ops/s
Iteration  29: 1165699.417 ops/s
Iteration  30: 1157723.713 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBag":
  1157732.664 ±(99.9%) 7087.669 ops/s [Average]
  (min, avg, max) = (1125608.881, 1157732.664, 1168307.550), stdev = 10608.490
  CI (99.9%): [1150644.995, 1164820.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1157732.664 ± 7087.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86641.110 ops/s
# Warmup Iteration   2: 115403.913 ops/s
# Warmup Iteration   3: 151903.508 ops/s
# Warmup Iteration   4: 148894.186 ops/s
# Warmup Iteration   5: 150669.958 ops/s
# Warmup Iteration   6: 151986.564 ops/s
# Warmup Iteration   7: 151552.383 ops/s
# Warmup Iteration   8: 137798.111 ops/s
# Warmup Iteration   9: 138873.362 ops/s
# Warmup Iteration  10: 150819.584 ops/s
# Warmup Iteration  11: 151305.584 ops/s
# Warmup Iteration  12: 152347.092 ops/s
# Warmup Iteration  13: 151082.512 ops/s
# Warmup Iteration  14: 150793.752 ops/s
# Warmup Iteration  15: 151604.414 ops/s
# Warmup Iteration  16: 152416.990 ops/s
# Warmup Iteration  17: 154971.310 ops/s
# Warmup Iteration  18: 156186.598 ops/s
# Warmup Iteration  19: 153662.799 ops/s
# Warmup Iteration  20: 155877.448 ops/s
# Warmup Iteration  21: 156048.765 ops/s
# Warmup Iteration  22: 156303.915 ops/s
# Warmup Iteration  23: 154956.129 ops/s
# Warmup Iteration  24: 155891.354 ops/s
# Warmup Iteration  25: 154372.315 ops/s
# Warmup Iteration  26: 156273.860 ops/s
# Warmup Iteration  27: 154681.971 ops/s
# Warmup Iteration  28: 156461.946 ops/s
# Warmup Iteration  29: 155304.448 ops/s
# Warmup Iteration  30: 155051.390 ops/s
Iteration   1: 156338.498 ops/s
Iteration   2: 155800.787 ops/s
Iteration   3: 156678.747 ops/s
Iteration   4: 156619.777 ops/s
Iteration   5: 155845.035 ops/s
Iteration   6: 155999.700 ops/s
Iteration   7: 156482.759 ops/s
Iteration   8: 153367.624 ops/s
Iteration   9: 155911.815 ops/s
Iteration  10: 155255.417 ops/s
Iteration  11: 156807.199 ops/s
Iteration  12: 155887.097 ops/s
Iteration  13: 155584.246 ops/s
Iteration  14: 156101.386 ops/s
Iteration  15: 156860.334 ops/s
Iteration  16: 156761.082 ops/s
Iteration  17: 156410.455 ops/s
Iteration  18: 155867.890 ops/s
Iteration  19: 154006.921 ops/s
Iteration  20: 156474.144 ops/s
Iteration  21: 156056.746 ops/s
Iteration  22: 156394.799 ops/s
Iteration  23: 153731.551 ops/s
Iteration  24: 156710.542 ops/s
Iteration  25: 153231.251 ops/s
Iteration  26: 154955.219 ops/s
Iteration  27: 156264.960 ops/s
Iteration  28: 154244.497 ops/s
Iteration  29: 155558.502 ops/s
Iteration  30: 153307.581 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableBiMap":
  155650.552 ±(99.9%) 752.595 ops/s [Average]
  (min, avg, max) = (153231.251, 155650.552, 156860.334), stdev = 1126.448
  CI (99.9%): [154897.957, 156403.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  155650.552 ± 752.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291005.561 ops/s
# Warmup Iteration   2: 2400554.270 ops/s
# Warmup Iteration   3: 2588301.032 ops/s
# Warmup Iteration   4: 2607205.970 ops/s
# Warmup Iteration   5: 2283465.694 ops/s
# Warmup Iteration   6: 2543839.710 ops/s
# Warmup Iteration   7: 2628955.108 ops/s
# Warmup Iteration   8: 2614530.192 ops/s
# Warmup Iteration   9: 2611914.073 ops/s
# Warmup Iteration  10: 2599667.961 ops/s
# Warmup Iteration  11: 2623433.457 ops/s
# Warmup Iteration  12: 2562671.975 ops/s
# Warmup Iteration  13: 2628162.082 ops/s
# Warmup Iteration  14: 2625566.684 ops/s
# Warmup Iteration  15: 2620731.950 ops/s
# Warmup Iteration  16: 2627668.894 ops/s
# Warmup Iteration  17: 2630218.379 ops/s
# Warmup Iteration  18: 2628352.668 ops/s
# Warmup Iteration  19: 2630039.074 ops/s
# Warmup Iteration  20: 2628845.723 ops/s
# Warmup Iteration  21: 2593991.158 ops/s
# Warmup Iteration  22: 2626546.620 ops/s
# Warmup Iteration  23: 2624972.198 ops/s
# Warmup Iteration  24: 2631982.554 ops/s
# Warmup Iteration  25: 2630968.166 ops/s
# Warmup Iteration  26: 2583581.644 ops/s
# Warmup Iteration  27: 2631134.997 ops/s
# Warmup Iteration  28: 2629812.186 ops/s
# Warmup Iteration  29: 2624731.982 ops/s
# Warmup Iteration  30: 2627474.614 ops/s
Iteration   1: 2614306.747 ops/s
Iteration   2: 2595231.574 ops/s
Iteration   3: 2613016.207 ops/s
Iteration   4: 2627264.069 ops/s
Iteration   5: 2629099.258 ops/s
Iteration   6: 2626694.123 ops/s
Iteration   7: 2600003.091 ops/s
Iteration   8: 2632696.288 ops/s
Iteration   9: 2622486.077 ops/s
Iteration  10: 2637434.311 ops/s
Iteration  11: 2623935.106 ops/s
Iteration  12: 2623133.244 ops/s
Iteration  13: 2636948.122 ops/s
Iteration  14: 2591812.389 ops/s
Iteration  15: 2629971.250 ops/s
Iteration  16: 2632276.350 ops/s
Iteration  17: 2618866.546 ops/s
Iteration  18: 2603958.698 ops/s
Iteration  19: 2628306.697 ops/s
Iteration  20: 2632530.258 ops/s
Iteration  21: 2631749.550 ops/s
Iteration  22: 2542693.955 ops/s
Iteration  23: 2576395.582 ops/s
Iteration  24: 2622694.058 ops/s
Iteration  25: 2632961.495 ops/s
Iteration  26: 2625541.973 ops/s
Iteration  27: 2627101.302 ops/s
Iteration  28: 2638332.548 ops/s
Iteration  29: 2620924.797 ops/s
Iteration  30: 2628688.719 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableList":
  2618901.813 ±(99.9%) 13723.877 ops/s [Average]
  (min, avg, max) = (2542693.955, 2618901.813, 2638332.548), stdev = 20541.254
  CI (99.9%): [2605177.936, 2632625.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableList  thrpt   30  2618901.813 ± 13723.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701225.095 ops/s
# Warmup Iteration   2: 1365384.833 ops/s
# Warmup Iteration   3: 1492936.427 ops/s
# Warmup Iteration   4: 1506668.446 ops/s
# Warmup Iteration   5: 1236211.346 ops/s
# Warmup Iteration   6: 1511135.898 ops/s
# Warmup Iteration   7: 1504707.783 ops/s
# Warmup Iteration   8: 1497444.623 ops/s
# Warmup Iteration   9: 1487985.095 ops/s
# Warmup Iteration  10: 1504738.323 ops/s
# Warmup Iteration  11: 1506106.288 ops/s
# Warmup Iteration  12: 1503096.941 ops/s
# Warmup Iteration  13: 1494643.076 ops/s
# Warmup Iteration  14: 1506976.053 ops/s
# Warmup Iteration  15: 1500898.166 ops/s
# Warmup Iteration  16: 1512037.952 ops/s
# Warmup Iteration  17: 1504770.631 ops/s
# Warmup Iteration  18: 1499420.144 ops/s
# Warmup Iteration  19: 1478459.254 ops/s
# Warmup Iteration  20: 1495867.091 ops/s
# Warmup Iteration  21: 1492157.277 ops/s
# Warmup Iteration  22: 1484817.441 ops/s
# Warmup Iteration  23: 1505157.788 ops/s
# Warmup Iteration  24: 1494844.025 ops/s
# Warmup Iteration  25: 1477365.084 ops/s
# Warmup Iteration  26: 1477102.447 ops/s
# Warmup Iteration  27: 1479081.398 ops/s
# Warmup Iteration  28: 1495470.035 ops/s
# Warmup Iteration  29: 1488808.014 ops/s
# Warmup Iteration  30: 1512722.245 ops/s
Iteration   1: 1507235.643 ops/s
Iteration   2: 1487565.221 ops/s
Iteration   3: 1484280.124 ops/s
Iteration   4: 1519653.147 ops/s
Iteration   5: 1514458.825 ops/s
Iteration   6: 1497745.047 ops/s
Iteration   7: 1499100.895 ops/s
Iteration   8: 1499117.650 ops/s
Iteration   9: 1502941.699 ops/s
Iteration  10: 1506754.630 ops/s
Iteration  11: 1490393.624 ops/s
Iteration  12: 1499899.227 ops/s
Iteration  13: 1514135.134 ops/s
Iteration  14: 1494575.268 ops/s
Iteration  15: 1483174.971 ops/s
Iteration  16: 1483365.180 ops/s
Iteration  17: 1511761.093 ops/s
Iteration  18: 1478930.181 ops/s
Iteration  19: 1494423.633 ops/s
Iteration  20: 1493873.325 ops/s
Iteration  21: 1503261.747 ops/s
Iteration  22: 1480084.770 ops/s
Iteration  23: 1513290.330 ops/s
Iteration  24: 1498924.147 ops/s
Iteration  25: 1518878.515 ops/s
Iteration  26: 1496985.532 ops/s
Iteration  27: 1501111.100 ops/s
Iteration  28: 1509284.347 ops/s
Iteration  29: 1473717.269 ops/s
Iteration  30: 1487220.293 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableMap":
  1498204.752 ±(99.9%) 8264.976 ops/s [Average]
  (min, avg, max) = (1473717.269, 1498204.752, 1519653.147), stdev = 12370.628
  CI (99.9%): [1489939.776, 1506469.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1498204.752 ± 8264.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022793.823 ops/s
# Warmup Iteration   2: 1675474.287 ops/s
# Warmup Iteration   3: 1927023.319 ops/s
# Warmup Iteration   4: 1917065.363 ops/s
# Warmup Iteration   5: 1936895.350 ops/s
# Warmup Iteration   6: 1697236.545 ops/s
# Warmup Iteration   7: 1832100.524 ops/s
# Warmup Iteration   8: 1922844.187 ops/s
# Warmup Iteration   9: 1939337.668 ops/s
# Warmup Iteration  10: 1937602.707 ops/s
# Warmup Iteration  11: 1926806.900 ops/s
# Warmup Iteration  12: 1933861.095 ops/s
# Warmup Iteration  13: 1920851.385 ops/s
# Warmup Iteration  14: 1942437.064 ops/s
# Warmup Iteration  15: 1926023.276 ops/s
# Warmup Iteration  16: 1933186.102 ops/s
# Warmup Iteration  17: 1935059.387 ops/s
# Warmup Iteration  18: 1938426.210 ops/s
# Warmup Iteration  19: 1937099.939 ops/s
# Warmup Iteration  20: 1925438.081 ops/s
# Warmup Iteration  21: 1937628.375 ops/s
# Warmup Iteration  22: 1916158.328 ops/s
# Warmup Iteration  23: 1939779.280 ops/s
# Warmup Iteration  24: 1908791.064 ops/s
# Warmup Iteration  25: 1940114.096 ops/s
# Warmup Iteration  26: 1934717.945 ops/s
# Warmup Iteration  27: 1939402.761 ops/s
# Warmup Iteration  28: 1909444.069 ops/s
# Warmup Iteration  29: 1937729.535 ops/s
# Warmup Iteration  30: 1927409.385 ops/s
Iteration   1: 1936627.507 ops/s
Iteration   2: 1942069.335 ops/s
Iteration   3: 1944709.327 ops/s
Iteration   4: 1926246.762 ops/s
Iteration   5: 1944479.225 ops/s
Iteration   6: 1937921.185 ops/s
Iteration   7: 1933956.849 ops/s
Iteration   8: 1896898.880 ops/s
Iteration   9: 1929274.038 ops/s
Iteration  10: 1938999.297 ops/s
Iteration  11: 1932413.214 ops/s
Iteration  12: 1941286.727 ops/s
Iteration  13: 1900771.235 ops/s
Iteration  14: 1937126.973 ops/s
Iteration  15: 1940401.372 ops/s
Iteration  16: 1934197.442 ops/s
Iteration  17: 1937610.243 ops/s
Iteration  18: 1922249.334 ops/s
Iteration  19: 1909577.689 ops/s
Iteration  20: 1936629.003 ops/s
Iteration  21: 1938742.095 ops/s
Iteration  22: 1926953.864 ops/s
Iteration  23: 1928910.359 ops/s
Iteration  24: 1934976.098 ops/s
Iteration  25: 1935546.146 ops/s
Iteration  26: 1909227.167 ops/s
Iteration  27: 1941385.358 ops/s
Iteration  28: 1929999.833 ops/s
Iteration  29: 1934510.224 ops/s
Iteration  30: 1911109.391 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSet":
  1930493.539 ±(99.9%) 8507.190 ops/s [Average]
  (min, avg, max) = (1896898.880, 1930493.539, 1944709.327), stdev = 12733.162
  CI (99.9%): [1921986.349, 1939000.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1930493.539 ± 8507.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886064.849 ops/s
# Warmup Iteration   2: 2024378.513 ops/s
# Warmup Iteration   3: 2128633.611 ops/s
# Warmup Iteration   4: 1915189.107 ops/s
# Warmup Iteration   5: 1982354.768 ops/s
# Warmup Iteration   6: 2137644.050 ops/s
# Warmup Iteration   7: 2147992.231 ops/s
# Warmup Iteration   8: 2118103.280 ops/s
# Warmup Iteration   9: 2144509.826 ops/s
# Warmup Iteration  10: 2133382.424 ops/s
# Warmup Iteration  11: 2147418.415 ops/s
# Warmup Iteration  12: 2151573.892 ops/s
# Warmup Iteration  13: 2133128.940 ops/s
# Warmup Iteration  14: 2149981.076 ops/s
# Warmup Iteration  15: 2149699.202 ops/s
# Warmup Iteration  16: 2131032.376 ops/s
# Warmup Iteration  17: 2129281.622 ops/s
# Warmup Iteration  18: 2137111.001 ops/s
# Warmup Iteration  19: 2129206.482 ops/s
# Warmup Iteration  20: 2139798.872 ops/s
# Warmup Iteration  21: 2147713.512 ops/s
# Warmup Iteration  22: 2137838.040 ops/s
# Warmup Iteration  23: 2150657.136 ops/s
# Warmup Iteration  24: 2143404.951 ops/s
# Warmup Iteration  25: 2145117.129 ops/s
# Warmup Iteration  26: 2133715.086 ops/s
# Warmup Iteration  27: 2146529.868 ops/s
# Warmup Iteration  28: 2146687.419 ops/s
# Warmup Iteration  29: 2128375.651 ops/s
# Warmup Iteration  30: 2145716.131 ops/s
Iteration   1: 2149264.074 ops/s
Iteration   2: 2149631.114 ops/s
Iteration   3: 2148039.603 ops/s
Iteration   4: 2149293.889 ops/s
Iteration   5: 2146867.123 ops/s
Iteration   6: 2141849.167 ops/s
Iteration   7: 2149324.952 ops/s
Iteration   8: 2152460.356 ops/s
Iteration   9: 2153597.839 ops/s
Iteration  10: 2150043.556 ops/s
Iteration  11: 2135327.170 ops/s
Iteration  12: 2146101.856 ops/s
Iteration  13: 2146016.658 ops/s
Iteration  14: 2145150.466 ops/s
Iteration  15: 2148630.793 ops/s
Iteration  16: 2140963.716 ops/s
Iteration  17: 2123576.320 ops/s
Iteration  18: 2107673.352 ops/s
Iteration  19: 2150018.145 ops/s
Iteration  20: 2126138.414 ops/s
Iteration  21: 2111029.687 ops/s
Iteration  22: 2112172.560 ops/s
Iteration  23: 2151656.962 ops/s
Iteration  24: 2135977.650 ops/s
Iteration  25: 2153203.685 ops/s
Iteration  26: 2150659.848 ops/s
Iteration  27: 2147070.382 ops/s
Iteration  28: 2144495.385 ops/s
Iteration  29: 2146092.259 ops/s
Iteration  30: 2115092.703 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2140913.989 ±(99.9%) 9174.920 ops/s [Average]
  (min, avg, max) = (2107673.352, 2140913.989, 2153597.839), stdev = 13732.589
  CI (99.9%): [2131739.070, 2150088.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2140913.989 ± 9174.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248360.818 ops/s
# Warmup Iteration   2: 412490.118 ops/s
# Warmup Iteration   3: 542670.769 ops/s
# Warmup Iteration   4: 535853.238 ops/s
# Warmup Iteration   5: 543183.561 ops/s
# Warmup Iteration   6: 541657.285 ops/s
# Warmup Iteration   7: 437160.812 ops/s
# Warmup Iteration   8: 540925.092 ops/s
# Warmup Iteration   9: 544509.407 ops/s
# Warmup Iteration  10: 545015.104 ops/s
# Warmup Iteration  11: 539453.943 ops/s
# Warmup Iteration  12: 543132.725 ops/s
# Warmup Iteration  13: 542708.842 ops/s
# Warmup Iteration  14: 543626.445 ops/s
# Warmup Iteration  15: 540870.491 ops/s
# Warmup Iteration  16: 542667.646 ops/s
# Warmup Iteration  17: 543837.874 ops/s
# Warmup Iteration  18: 543809.130 ops/s
# Warmup Iteration  19: 543507.128 ops/s
# Warmup Iteration  20: 543780.624 ops/s
# Warmup Iteration  21: 543873.624 ops/s
# Warmup Iteration  22: 539360.224 ops/s
# Warmup Iteration  23: 539165.360 ops/s
# Warmup Iteration  24: 539299.360 ops/s
# Warmup Iteration  25: 537732.920 ops/s
# Warmup Iteration  26: 543203.200 ops/s
# Warmup Iteration  27: 543209.154 ops/s
# Warmup Iteration  28: 538828.040 ops/s
# Warmup Iteration  29: 539213.494 ops/s
# Warmup Iteration  30: 538410.471 ops/s
Iteration   1: 538696.817 ops/s
Iteration   2: 536707.477 ops/s
Iteration   3: 543578.883 ops/s
Iteration   4: 541230.301 ops/s
Iteration   5: 544575.335 ops/s
Iteration   6: 544503.494 ops/s
Iteration   7: 545373.623 ops/s
Iteration   8: 539976.401 ops/s
Iteration   9: 545541.001 ops/s
Iteration  10: 536191.813 ops/s
Iteration  11: 542616.335 ops/s
Iteration  12: 542743.840 ops/s
Iteration  13: 537220.698 ops/s
Iteration  14: 542415.171 ops/s
Iteration  15: 543850.956 ops/s
Iteration  16: 543843.822 ops/s
Iteration  17: 540436.879 ops/s
Iteration  18: 533501.172 ops/s
Iteration  19: 545807.831 ops/s
Iteration  20: 543971.204 ops/s
Iteration  21: 542116.660 ops/s
Iteration  22: 537050.368 ops/s
Iteration  23: 544987.438 ops/s
Iteration  24: 535409.070 ops/s
Iteration  25: 544717.187 ops/s
Iteration  26: 540740.864 ops/s
Iteration  27: 542322.581 ops/s
Iteration  28: 543869.218 ops/s
Iteration  29: 541696.301 ops/s
Iteration  30: 544238.384 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy":
  541664.371 ±(99.9%) 2259.408 ops/s [Average]
  (min, avg, max) = (533501.172, 541664.371, 545807.831), stdev = 3381.776
  CI (99.9%): [539404.962, 543923.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  541664.371 ± 2259.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 304415.210 ops/s
# Warmup Iteration   2: 451900.411 ops/s
# Warmup Iteration   3: 569328.821 ops/s
# Warmup Iteration   4: 563683.155 ops/s
# Warmup Iteration   5: 564190.388 ops/s
# Warmup Iteration   6: 568913.462 ops/s
# Warmup Iteration   7: 563894.163 ops/s
# Warmup Iteration   8: 472256.087 ops/s
# Warmup Iteration   9: 570038.179 ops/s
# Warmup Iteration  10: 568749.301 ops/s
# Warmup Iteration  11: 570063.871 ops/s
# Warmup Iteration  12: 568795.750 ops/s
# Warmup Iteration  13: 563432.681 ops/s
# Warmup Iteration  14: 565998.779 ops/s
# Warmup Iteration  15: 564989.159 ops/s
# Warmup Iteration  16: 564257.890 ops/s
# Warmup Iteration  17: 569680.994 ops/s
# Warmup Iteration  18: 564549.877 ops/s
# Warmup Iteration  19: 566262.336 ops/s
# Warmup Iteration  20: 565124.171 ops/s
# Warmup Iteration  21: 569277.963 ops/s
# Warmup Iteration  22: 569965.726 ops/s
# Warmup Iteration  23: 563696.041 ops/s
# Warmup Iteration  24: 569179.823 ops/s
# Warmup Iteration  25: 561285.224 ops/s
# Warmup Iteration  26: 566607.069 ops/s
# Warmup Iteration  27: 570129.866 ops/s
# Warmup Iteration  28: 569423.873 ops/s
# Warmup Iteration  29: 562725.743 ops/s
# Warmup Iteration  30: 569382.559 ops/s
Iteration   1: 570183.208 ops/s
Iteration   2: 571022.215 ops/s
Iteration   3: 567042.189 ops/s
Iteration   4: 568855.082 ops/s
Iteration   5: 567972.604 ops/s
Iteration   6: 570336.137 ops/s
Iteration   7: 568891.479 ops/s
Iteration   8: 569122.681 ops/s
Iteration   9: 568308.166 ops/s
Iteration  10: 568955.047 ops/s
Iteration  11: 570262.627 ops/s
Iteration  12: 569821.589 ops/s
Iteration  13: 569422.584 ops/s
Iteration  14: 571038.293 ops/s
Iteration  15: 567519.285 ops/s
Iteration  16: 568908.614 ops/s
Iteration  17: 570202.053 ops/s
Iteration  18: 569908.754 ops/s
Iteration  19: 569329.515 ops/s
Iteration  20: 561121.607 ops/s
Iteration  21: 558978.203 ops/s
Iteration  22: 565677.574 ops/s
Iteration  23: 571211.314 ops/s
Iteration  24: 560531.295 ops/s
Iteration  25: 569716.082 ops/s
Iteration  26: 569793.007 ops/s
Iteration  27: 567693.898 ops/s
Iteration  28: 569537.725 ops/s
Iteration  29: 568075.627 ops/s
Iteration  30: 569093.482 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  568284.398 ±(99.9%) 2010.720 ops/s [Average]
  (min, avg, max) = (558978.203, 568284.398, 571211.314), stdev = 3009.551
  CI (99.9%): [566273.678, 570295.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  568284.398 ± 2010.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499306.565 ops/s
# Warmup Iteration   2: 891393.726 ops/s
# Warmup Iteration   3: 1063954.350 ops/s
# Warmup Iteration   4: 1068828.611 ops/s
# Warmup Iteration   5: 1066045.609 ops/s
# Warmup Iteration   6: 885345.327 ops/s
# Warmup Iteration   7: 1056260.212 ops/s
# Warmup Iteration   8: 1065251.934 ops/s
# Warmup Iteration   9: 1067389.438 ops/s
# Warmup Iteration  10: 1064955.451 ops/s
# Warmup Iteration  11: 1067226.380 ops/s
# Warmup Iteration  12: 1065922.680 ops/s
# Warmup Iteration  13: 1069767.120 ops/s
# Warmup Iteration  14: 1064545.904 ops/s
# Warmup Iteration  15: 1064939.920 ops/s
# Warmup Iteration  16: 1068430.597 ops/s
# Warmup Iteration  17: 1057731.022 ops/s
# Warmup Iteration  18: 1060086.274 ops/s
# Warmup Iteration  19: 1058519.587 ops/s
# Warmup Iteration  20: 1063973.612 ops/s
# Warmup Iteration  21: 1065883.647 ops/s
# Warmup Iteration  22: 1050813.140 ops/s
# Warmup Iteration  23: 1056788.448 ops/s
# Warmup Iteration  24: 1048631.466 ops/s
# Warmup Iteration  25: 1064814.979 ops/s
# Warmup Iteration  26: 1068733.186 ops/s
# Warmup Iteration  27: 1067892.210 ops/s
# Warmup Iteration  28: 1067935.016 ops/s
# Warmup Iteration  29: 1068617.089 ops/s
# Warmup Iteration  30: 1054195.907 ops/s
Iteration   1: 1071022.202 ops/s
Iteration   2: 1067773.451 ops/s
Iteration   3: 1069342.222 ops/s
Iteration   4: 1068917.128 ops/s
Iteration   5: 1066980.984 ops/s
Iteration   6: 1068057.875 ops/s
Iteration   7: 1069807.216 ops/s
Iteration   8: 1050074.103 ops/s
Iteration   9: 1065806.615 ops/s
Iteration  10: 1060493.925 ops/s
Iteration  11: 1052833.045 ops/s
Iteration  12: 1065136.474 ops/s
Iteration  13: 1068435.383 ops/s
Iteration  14: 1070103.066 ops/s
Iteration  15: 1062913.398 ops/s
Iteration  16: 1065030.626 ops/s
Iteration  17: 1050132.720 ops/s
Iteration  18: 1047705.058 ops/s
Iteration  19: 1068695.537 ops/s
Iteration  20: 1050162.327 ops/s
Iteration  21: 1065878.842 ops/s
Iteration  22: 1068532.006 ops/s
Iteration  23: 1061858.634 ops/s
Iteration  24: 1068412.707 ops/s
Iteration  25: 1062206.348 ops/s
Iteration  26: 1070090.166 ops/s
Iteration  27: 1051689.805 ops/s
Iteration  28: 1049404.718 ops/s
Iteration  29: 1068521.245 ops/s
Iteration  30: 1069150.347 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1063172.273 ±(99.9%) 5146.478 ops/s [Average]
  (min, avg, max) = (1047705.058, 1063172.273, 1071022.202), stdev = 7703.007
  CI (99.9%): [1058025.794, 1068318.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1063172.273 ± 5146.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2477971.961 ops/s
# Warmup Iteration   2: 5696482.996 ops/s
# Warmup Iteration   3: 4646609.162 ops/s
# Warmup Iteration   4: 5571969.664 ops/s
# Warmup Iteration   5: 5541137.731 ops/s
# Warmup Iteration   6: 5580153.389 ops/s
# Warmup Iteration   7: 5571444.974 ops/s
# Warmup Iteration   8: 5570960.776 ops/s
# Warmup Iteration   9: 5525000.364 ops/s
# Warmup Iteration  10: 5583552.590 ops/s
# Warmup Iteration  11: 5533967.170 ops/s
# Warmup Iteration  12: 5586117.447 ops/s
# Warmup Iteration  13: 5590642.204 ops/s
# Warmup Iteration  14: 5542536.095 ops/s
# Warmup Iteration  15: 5578033.555 ops/s
# Warmup Iteration  16: 5575355.067 ops/s
# Warmup Iteration  17: 5591412.564 ops/s
# Warmup Iteration  18: 5565834.041 ops/s
# Warmup Iteration  19: 5611683.608 ops/s
# Warmup Iteration  20: 5606282.343 ops/s
# Warmup Iteration  21: 5556310.650 ops/s
# Warmup Iteration  22: 5614358.481 ops/s
# Warmup Iteration  23: 5585455.672 ops/s
# Warmup Iteration  24: 5540368.624 ops/s
# Warmup Iteration  25: 5621815.311 ops/s
# Warmup Iteration  26: 5604565.896 ops/s
# Warmup Iteration  27: 5595959.286 ops/s
# Warmup Iteration  28: 5541971.497 ops/s
# Warmup Iteration  29: 5607118.358 ops/s
# Warmup Iteration  30: 5552420.648 ops/s
Iteration   1: 5530375.426 ops/s
Iteration   2: 5595106.512 ops/s
Iteration   3: 5614351.503 ops/s
Iteration   4: 5584836.075 ops/s
Iteration   5: 5634585.031 ops/s
Iteration   6: 5583559.398 ops/s
Iteration   7: 5616613.871 ops/s
Iteration   8: 5615546.809 ops/s
Iteration   9: 5593605.680 ops/s
Iteration  10: 5621165.253 ops/s
Iteration  11: 5537414.320 ops/s
Iteration  12: 5569744.985 ops/s
Iteration  13: 5565861.689 ops/s
Iteration  14: 5611000.444 ops/s
Iteration  15: 5594665.382 ops/s
Iteration  16: 5611508.131 ops/s
Iteration  17: 5624130.762 ops/s
Iteration  18: 5540461.069 ops/s
Iteration  19: 5610337.376 ops/s
Iteration  20: 5532954.374 ops/s
Iteration  21: 5609011.248 ops/s
Iteration  22: 5598969.447 ops/s
Iteration  23: 5604028.713 ops/s
Iteration  24: 5627384.069 ops/s
Iteration  25: 5581933.830 ops/s
Iteration  26: 5594302.887 ops/s
Iteration  27: 5591611.833 ops/s
Iteration  28: 5600344.758 ops/s
Iteration  29: 5608938.492 ops/s
Iteration  30: 5568560.507 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy":
  5592430.329 ±(99.9%) 18984.973 ops/s [Average]
  (min, avg, max) = (5530375.426, 5592430.329, 5634585.031), stdev = 28415.816
  CI (99.9%): [5573445.356, 5611415.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  5592430.329 ± 18984.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1441077.592 ops/s
# Warmup Iteration   2: 2266307.934 ops/s
# Warmup Iteration   3: 2625224.610 ops/s
# Warmup Iteration   4: 2660567.353 ops/s
# Warmup Iteration   5: 2659807.650 ops/s
# Warmup Iteration   6: 2541242.637 ops/s
# Warmup Iteration   7: 2294184.783 ops/s
# Warmup Iteration   8: 2632000.125 ops/s
# Warmup Iteration   9: 2621553.468 ops/s
# Warmup Iteration  10: 2632557.646 ops/s
# Warmup Iteration  11: 2658120.142 ops/s
# Warmup Iteration  12: 2648037.316 ops/s
# Warmup Iteration  13: 2653463.413 ops/s
# Warmup Iteration  14: 2638555.214 ops/s
# Warmup Iteration  15: 2636513.766 ops/s
# Warmup Iteration  16: 2659293.650 ops/s
# Warmup Iteration  17: 2655287.561 ops/s
# Warmup Iteration  18: 2651394.415 ops/s
# Warmup Iteration  19: 2601149.151 ops/s
# Warmup Iteration  20: 2652104.645 ops/s
# Warmup Iteration  21: 2646191.062 ops/s
# Warmup Iteration  22: 2650171.770 ops/s
# Warmup Iteration  23: 2615721.923 ops/s
# Warmup Iteration  24: 2636887.833 ops/s
# Warmup Iteration  25: 2593174.058 ops/s
# Warmup Iteration  26: 2653755.390 ops/s
# Warmup Iteration  27: 2641461.383 ops/s
# Warmup Iteration  28: 2655135.994 ops/s
# Warmup Iteration  29: 2651450.524 ops/s
# Warmup Iteration  30: 2648829.787 ops/s
Iteration   1: 2655312.189 ops/s
Iteration   2: 2629920.783 ops/s
Iteration   3: 2647357.747 ops/s
Iteration   4: 2662568.182 ops/s
Iteration   5: 2659330.958 ops/s
Iteration   6: 2648255.127 ops/s
Iteration   7: 2640223.763 ops/s
Iteration   8: 2597623.974 ops/s
Iteration   9: 2621658.748 ops/s
Iteration  10: 2648251.903 ops/s
Iteration  11: 2657415.209 ops/s
Iteration  12: 2651143.485 ops/s
Iteration  13: 2654742.526 ops/s
Iteration  14: 2663530.483 ops/s
Iteration  15: 2638896.405 ops/s
Iteration  16: 2614490.245 ops/s
Iteration  17: 2635297.858 ops/s
Iteration  18: 2662756.138 ops/s
Iteration  19: 2634974.849 ops/s
Iteration  20: 2605993.652 ops/s
Iteration  21: 2646133.005 ops/s
Iteration  22: 2662791.942 ops/s
Iteration  23: 2601040.346 ops/s
Iteration  24: 2665474.038 ops/s
Iteration  25: 2616477.141 ops/s
Iteration  26: 2572577.787 ops/s
Iteration  27: 2614656.419 ops/s
Iteration  28: 2660656.799 ops/s
Iteration  29: 2629847.813 ops/s
Iteration  30: 2606450.084 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  2636861.653 ±(99.9%) 16147.035 ops/s [Average]
  (min, avg, max) = (2572577.787, 2636861.653, 2665474.038), stdev = 24168.124
  CI (99.9%): [2620714.618, 2653008.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  2636861.653 ± 16147.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2913747.069 ops/s
# Warmup Iteration   2: 6210924.184 ops/s
# Warmup Iteration   3: 6549011.175 ops/s
# Warmup Iteration   4: 6508158.207 ops/s
# Warmup Iteration   5: 5498065.783 ops/s
# Warmup Iteration   6: 6518752.664 ops/s
# Warmup Iteration   7: 6580265.274 ops/s
# Warmup Iteration   8: 6588685.431 ops/s
# Warmup Iteration   9: 6591657.805 ops/s
# Warmup Iteration  10: 6500642.437 ops/s
# Warmup Iteration  11: 6599103.191 ops/s
# Warmup Iteration  12: 6564033.273 ops/s
# Warmup Iteration  13: 6592713.585 ops/s
# Warmup Iteration  14: 6589033.822 ops/s
# Warmup Iteration  15: 6608474.504 ops/s
# Warmup Iteration  16: 6564863.340 ops/s
# Warmup Iteration  17: 6600803.545 ops/s
# Warmup Iteration  18: 6602482.899 ops/s
# Warmup Iteration  19: 6587210.014 ops/s
# Warmup Iteration  20: 6480958.061 ops/s
# Warmup Iteration  21: 6594830.466 ops/s
# Warmup Iteration  22: 6466145.498 ops/s
# Warmup Iteration  23: 6584854.041 ops/s
# Warmup Iteration  24: 6535636.817 ops/s
# Warmup Iteration  25: 6552417.592 ops/s
# Warmup Iteration  26: 6597406.694 ops/s
# Warmup Iteration  27: 6609701.893 ops/s
# Warmup Iteration  28: 6601250.638 ops/s
# Warmup Iteration  29: 6597605.261 ops/s
# Warmup Iteration  30: 6599556.150 ops/s
Iteration   1: 6599457.717 ops/s
Iteration   2: 6562673.972 ops/s
Iteration   3: 6567508.523 ops/s
Iteration   4: 6609384.752 ops/s
Iteration   5: 6608398.930 ops/s
Iteration   6: 6615036.310 ops/s
Iteration   7: 6594503.161 ops/s
Iteration   8: 6610500.158 ops/s
Iteration   9: 6603687.480 ops/s
Iteration  10: 6581642.420 ops/s
Iteration  11: 6494646.466 ops/s
Iteration  12: 6618132.281 ops/s
Iteration  13: 6617431.185 ops/s
Iteration  14: 6619111.929 ops/s
Iteration  15: 6605774.156 ops/s
Iteration  16: 6559327.275 ops/s
Iteration  17: 6609499.207 ops/s
Iteration  18: 6488110.905 ops/s
Iteration  19: 6598220.584 ops/s
Iteration  20: 6586744.804 ops/s
Iteration  21: 6615064.560 ops/s
Iteration  22: 6604449.227 ops/s
Iteration  23: 6604738.562 ops/s
Iteration  24: 6603235.450 ops/s
Iteration  25: 6619612.103 ops/s
Iteration  26: 6518224.973 ops/s
Iteration  27: 6605879.478 ops/s
Iteration  28: 6610623.184 ops/s
Iteration  29: 6621753.073 ops/s
Iteration  30: 6595968.092 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  6591644.697 ±(99.9%) 23471.703 ops/s [Average]
  (min, avg, max) = (6488110.905, 6591644.697, 6621753.073), stdev = 35131.342
  CI (99.9%): [6568172.994, 6615116.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  6591644.697 ± 23471.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738524.299 ops/s
# Warmup Iteration   2: 1890998.278 ops/s
# Warmup Iteration   3: 1900135.323 ops/s
# Warmup Iteration   4: 1581659.178 ops/s
# Warmup Iteration   5: 1901572.860 ops/s
# Warmup Iteration   6: 1902178.594 ops/s
# Warmup Iteration   7: 1905768.956 ops/s
# Warmup Iteration   8: 1902841.002 ops/s
# Warmup Iteration   9: 1892638.025 ops/s
# Warmup Iteration  10: 1901128.822 ops/s
# Warmup Iteration  11: 1888285.543 ops/s
# Warmup Iteration  12: 1886897.273 ops/s
# Warmup Iteration  13: 1884882.822 ops/s
# Warmup Iteration  14: 1900033.114 ops/s
# Warmup Iteration  15: 1888276.268 ops/s
# Warmup Iteration  16: 1905205.642 ops/s
# Warmup Iteration  17: 1886788.744 ops/s
# Warmup Iteration  18: 1900556.646 ops/s
# Warmup Iteration  19: 1889555.807 ops/s
# Warmup Iteration  20: 1892403.332 ops/s
# Warmup Iteration  21: 1903854.302 ops/s
# Warmup Iteration  22: 1906688.584 ops/s
# Warmup Iteration  23: 1892445.833 ops/s
# Warmup Iteration  24: 1897235.666 ops/s
# Warmup Iteration  25: 1889594.944 ops/s
# Warmup Iteration  26: 1887943.048 ops/s
# Warmup Iteration  27: 1879675.712 ops/s
# Warmup Iteration  28: 1904417.825 ops/s
# Warmup Iteration  29: 1892969.577 ops/s
# Warmup Iteration  30: 1872878.572 ops/s
Iteration   1: 1903414.520 ops/s
Iteration   2: 1906347.375 ops/s
Iteration   3: 1901094.076 ops/s
Iteration   4: 1873771.562 ops/s
Iteration   5: 1907908.257 ops/s
Iteration   6: 1893133.130 ops/s
Iteration   7: 1868620.373 ops/s
Iteration   8: 1885233.521 ops/s
Iteration   9: 1899618.651 ops/s
Iteration  10: 1903558.114 ops/s
Iteration  11: 1903879.876 ops/s
Iteration  12: 1838978.688 ops/s
Iteration  13: 1891791.715 ops/s
Iteration  14: 1902151.387 ops/s
Iteration  15: 1908367.380 ops/s
Iteration  16: 1903258.098 ops/s
Iteration  17: 1903068.017 ops/s
Iteration  18: 1900442.386 ops/s
Iteration  19: 1904274.498 ops/s
Iteration  20: 1877519.689 ops/s
Iteration  21: 1901554.371 ops/s
Iteration  22: 1872954.420 ops/s
Iteration  23: 1902676.305 ops/s
Iteration  24: 1904026.608 ops/s
Iteration  25: 1879125.628 ops/s
Iteration  26: 1907468.008 ops/s
Iteration  27: 1898201.752 ops/s
Iteration  28: 1876994.720 ops/s
Iteration  29: 1899246.052 ops/s
Iteration  30: 1871254.957 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1892997.805 ±(99.9%) 10835.683 ops/s [Average]
  (min, avg, max) = (1838978.688, 1892997.805, 1908367.380), stdev = 16218.341
  CI (99.9%): [1882162.122, 1903833.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1892997.805 ± 10835.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847721.852 ops/s
# Warmup Iteration   2: 2236726.817 ops/s
# Warmup Iteration   3: 2289188.427 ops/s
# Warmup Iteration   4: 1872279.627 ops/s
# Warmup Iteration   5: 2292140.442 ops/s
# Warmup Iteration   6: 2283853.494 ops/s
# Warmup Iteration   7: 2299798.914 ops/s
# Warmup Iteration   8: 2297534.695 ops/s
# Warmup Iteration   9: 2292368.226 ops/s
# Warmup Iteration  10: 2291839.574 ops/s
# Warmup Iteration  11: 2275862.346 ops/s
# Warmup Iteration  12: 2278339.748 ops/s
# Warmup Iteration  13: 2287913.932 ops/s
# Warmup Iteration  14: 2299607.117 ops/s
# Warmup Iteration  15: 2297124.646 ops/s
# Warmup Iteration  16: 2297945.618 ops/s
# Warmup Iteration  17: 2274980.373 ops/s
# Warmup Iteration  18: 2261265.073 ops/s
# Warmup Iteration  19: 2294547.131 ops/s
# Warmup Iteration  20: 2281222.020 ops/s
# Warmup Iteration  21: 2299054.765 ops/s
# Warmup Iteration  22: 2296177.324 ops/s
# Warmup Iteration  23: 2291574.984 ops/s
# Warmup Iteration  24: 2259299.570 ops/s
# Warmup Iteration  25: 2289037.670 ops/s
# Warmup Iteration  26: 2254774.447 ops/s
# Warmup Iteration  27: 2282491.994 ops/s
# Warmup Iteration  28: 2281520.041 ops/s
# Warmup Iteration  29: 2280430.349 ops/s
# Warmup Iteration  30: 2296214.567 ops/s
Iteration   1: 2283156.237 ops/s
Iteration   2: 2294724.113 ops/s
Iteration   3: 2255487.563 ops/s
Iteration   4: 2246665.298 ops/s
Iteration   5: 2287367.400 ops/s
Iteration   6: 2296478.890 ops/s
Iteration   7: 2295918.819 ops/s
Iteration   8: 2294131.351 ops/s
Iteration   9: 2285973.271 ops/s
Iteration  10: 2292767.930 ops/s
Iteration  11: 2290999.100 ops/s
Iteration  12: 2271972.855 ops/s
Iteration  13: 2287139.958 ops/s
Iteration  14: 2264747.529 ops/s
Iteration  15: 2299251.053 ops/s
Iteration  16: 2301814.435 ops/s
Iteration  17: 2284942.251 ops/s
Iteration  18: 2293557.618 ops/s
Iteration  19: 2265974.125 ops/s
Iteration  20: 2254880.878 ops/s
Iteration  21: 2296551.091 ops/s
Iteration  22: 2253300.826 ops/s
Iteration  23: 2279354.041 ops/s
Iteration  24: 2293166.616 ops/s
Iteration  25: 2289085.911 ops/s
Iteration  26: 2293761.453 ops/s
Iteration  27: 2299618.162 ops/s
Iteration  28: 2303090.266 ops/s
Iteration  29: 2298311.551 ops/s
Iteration  30: 2296031.386 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2285007.399 ±(99.9%) 10714.628 ops/s [Average]
  (min, avg, max) = (2246665.298, 2285007.399, 2303090.266), stdev = 16037.152
  CI (99.9%): [2274292.771, 2295722.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2285007.399 ± 10714.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6278752.560 ops/s
# Warmup Iteration   2: 13589590.912 ops/s
# Warmup Iteration   3: 11389296.689 ops/s
# Warmup Iteration   4: 13626555.263 ops/s
# Warmup Iteration   5: 13590245.906 ops/s
# Warmup Iteration   6: 13511588.259 ops/s
# Warmup Iteration   7: 13555741.678 ops/s
# Warmup Iteration   8: 13644835.477 ops/s
# Warmup Iteration   9: 13427947.817 ops/s
# Warmup Iteration  10: 13684729.230 ops/s
# Warmup Iteration  11: 13679608.591 ops/s
# Warmup Iteration  12: 13466409.223 ops/s
# Warmup Iteration  13: 13669184.363 ops/s
# Warmup Iteration  14: 13565437.879 ops/s
# Warmup Iteration  15: 13523700.272 ops/s
# Warmup Iteration  16: 13630763.367 ops/s
# Warmup Iteration  17: 13622585.532 ops/s
# Warmup Iteration  18: 13554773.161 ops/s
# Warmup Iteration  19: 13667071.023 ops/s
# Warmup Iteration  20: 13687215.406 ops/s
# Warmup Iteration  21: 13373367.292 ops/s
# Warmup Iteration  22: 13629110.196 ops/s
# Warmup Iteration  23: 13690702.812 ops/s
# Warmup Iteration  24: 13625981.298 ops/s
# Warmup Iteration  25: 13679203.207 ops/s
# Warmup Iteration  26: 13664389.552 ops/s
# Warmup Iteration  27: 13592696.052 ops/s
# Warmup Iteration  28: 13657302.979 ops/s
# Warmup Iteration  29: 13621492.992 ops/s
# Warmup Iteration  30: 13419191.145 ops/s
Iteration   1: 13666866.674 ops/s
Iteration   2: 13677752.171 ops/s
Iteration   3: 13588858.146 ops/s
Iteration   4: 13678980.947 ops/s
Iteration   5: 13655547.013 ops/s
Iteration   6: 13654446.860 ops/s
Iteration   7: 13701963.610 ops/s
Iteration   8: 13596212.038 ops/s
Iteration   9: 13625072.197 ops/s
Iteration  10: 13638700.764 ops/s
Iteration  11: 13625981.949 ops/s
Iteration  12: 13644023.722 ops/s
Iteration  13: 13499546.814 ops/s
Iteration  14: 13651622.059 ops/s
Iteration  15: 13680347.964 ops/s
Iteration  16: 13580371.593 ops/s
Iteration  17: 13662649.538 ops/s
Iteration  18: 13647934.918 ops/s
Iteration  19: 13355550.542 ops/s
Iteration  20: 13679503.125 ops/s
Iteration  21: 13709843.281 ops/s
Iteration  22: 13662837.686 ops/s
Iteration  23: 13541231.819 ops/s
Iteration  24: 13618827.815 ops/s
Iteration  25: 13588096.695 ops/s
Iteration  26: 13613456.065 ops/s
Iteration  27: 13661493.950 ops/s
Iteration  28: 13440060.904 ops/s
Iteration  29: 13673995.374 ops/s
Iteration  30: 13622104.218 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toList":
  13621462.682 ±(99.9%) 51397.607 ops/s [Average]
  (min, avg, max) = (13355550.542, 13621462.682, 13709843.281), stdev = 76929.525
  CI (99.9%): [13570065.074, 13672860.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toList  thrpt   30  13621462.682 ± 51397.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1173207.725 ops/s
# Warmup Iteration   2: 2589318.908 ops/s
# Warmup Iteration   3: 2674322.653 ops/s
# Warmup Iteration   4: 2334408.247 ops/s
# Warmup Iteration   5: 2515088.736 ops/s
# Warmup Iteration   6: 2645561.570 ops/s
# Warmup Iteration   7: 2672908.840 ops/s
# Warmup Iteration   8: 2601614.086 ops/s
# Warmup Iteration   9: 2634621.055 ops/s
# Warmup Iteration  10: 2637076.227 ops/s
# Warmup Iteration  11: 2637338.982 ops/s
# Warmup Iteration  12: 2686280.781 ops/s
# Warmup Iteration  13: 2653421.142 ops/s
# Warmup Iteration  14: 2658922.021 ops/s
# Warmup Iteration  15: 2666943.637 ops/s
# Warmup Iteration  16: 2668407.991 ops/s
# Warmup Iteration  17: 2652465.950 ops/s
# Warmup Iteration  18: 2667196.615 ops/s
# Warmup Iteration  19: 2654183.131 ops/s
# Warmup Iteration  20: 2650019.970 ops/s
# Warmup Iteration  21: 2624022.896 ops/s
# Warmup Iteration  22: 2663899.003 ops/s
# Warmup Iteration  23: 2655434.406 ops/s
# Warmup Iteration  24: 2659056.454 ops/s
# Warmup Iteration  25: 2663270.926 ops/s
# Warmup Iteration  26: 2620196.997 ops/s
# Warmup Iteration  27: 2647705.266 ops/s
# Warmup Iteration  28: 2678233.664 ops/s
# Warmup Iteration  29: 2640242.558 ops/s
# Warmup Iteration  30: 2650056.363 ops/s
Iteration   1: 2660915.101 ops/s
Iteration   2: 2613279.931 ops/s
Iteration   3: 2653324.796 ops/s
Iteration   4: 2667280.721 ops/s
Iteration   5: 2681715.431 ops/s
Iteration   6: 2668883.055 ops/s
Iteration   7: 2651146.917 ops/s
Iteration   8: 2670871.223 ops/s
Iteration   9: 2644441.812 ops/s
Iteration  10: 2666812.842 ops/s
Iteration  11: 2664188.384 ops/s
Iteration  12: 2656914.986 ops/s
Iteration  13: 2643215.639 ops/s
Iteration  14: 2685298.029 ops/s
Iteration  15: 2658095.170 ops/s
Iteration  16: 2674381.180 ops/s
Iteration  17: 2671028.301 ops/s
Iteration  18: 2667618.984 ops/s
Iteration  19: 2653246.815 ops/s
Iteration  20: 2663146.074 ops/s
Iteration  21: 2664725.761 ops/s
Iteration  22: 2639476.359 ops/s
Iteration  23: 2656124.338 ops/s
Iteration  24: 2669950.793 ops/s
Iteration  25: 2667770.439 ops/s
Iteration  26: 2664887.327 ops/s
Iteration  27: 2665981.537 ops/s
Iteration  28: 2633421.346 ops/s
Iteration  29: 2668232.998 ops/s
Iteration  30: 2662854.896 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMap":
  2660307.706 ±(99.9%) 9743.847 ops/s [Average]
  (min, avg, max) = (2613279.931, 2660307.706, 2685298.029), stdev = 14584.133
  CI (99.9%): [2650563.859, 2670051.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toMap  thrpt   30  2660307.706 ± 9743.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1056878.280 ops/s
# Warmup Iteration   2: 2497382.481 ops/s
# Warmup Iteration   3: 2527403.579 ops/s
# Warmup Iteration   4: 2090257.985 ops/s
# Warmup Iteration   5: 2515292.600 ops/s
# Warmup Iteration   6: 2494114.587 ops/s
# Warmup Iteration   7: 2545530.845 ops/s
# Warmup Iteration   8: 2545591.265 ops/s
# Warmup Iteration   9: 2541431.664 ops/s
# Warmup Iteration  10: 2556281.801 ops/s
# Warmup Iteration  11: 2489458.689 ops/s
# Warmup Iteration  12: 2534778.255 ops/s
# Warmup Iteration  13: 2537756.833 ops/s
# Warmup Iteration  14: 2546768.971 ops/s
# Warmup Iteration  15: 2556978.626 ops/s
# Warmup Iteration  16: 2499002.807 ops/s
# Warmup Iteration  17: 2509848.248 ops/s
# Warmup Iteration  18: 2532993.336 ops/s
# Warmup Iteration  19: 2548085.811 ops/s
# Warmup Iteration  20: 2535748.564 ops/s
# Warmup Iteration  21: 2546657.785 ops/s
# Warmup Iteration  22: 2542334.854 ops/s
# Warmup Iteration  23: 2507187.406 ops/s
# Warmup Iteration  24: 2513591.022 ops/s
# Warmup Iteration  25: 2521430.605 ops/s
# Warmup Iteration  26: 2524777.513 ops/s
# Warmup Iteration  27: 2531776.588 ops/s
# Warmup Iteration  28: 2538598.057 ops/s
# Warmup Iteration  29: 2506773.371 ops/s
# Warmup Iteration  30: 2537406.969 ops/s
Iteration   1: 2523645.968 ops/s
Iteration   2: 2525232.519 ops/s
Iteration   3: 2548674.431 ops/s
Iteration   4: 2542891.549 ops/s
Iteration   5: 2535696.459 ops/s
Iteration   6: 2529503.969 ops/s
Iteration   7: 2539192.018 ops/s
Iteration   8: 2545818.198 ops/s
Iteration   9: 2558757.859 ops/s
Iteration  10: 2538442.503 ops/s
Iteration  11: 2536162.731 ops/s
Iteration  12: 2539762.028 ops/s
Iteration  13: 2521486.083 ops/s
Iteration  14: 2537695.184 ops/s
Iteration  15: 2517526.678 ops/s
Iteration  16: 2580929.511 ops/s
Iteration  17: 2549083.323 ops/s
Iteration  18: 2520232.972 ops/s
Iteration  19: 2552807.364 ops/s
Iteration  20: 2536992.977 ops/s
Iteration  21: 2515702.422 ops/s
Iteration  22: 2537346.608 ops/s
Iteration  23: 2523835.931 ops/s
Iteration  24: 2547841.878 ops/s
Iteration  25: 2531669.862 ops/s
Iteration  26: 2489350.108 ops/s
Iteration  27: 2549612.248 ops/s
Iteration  28: 2539084.317 ops/s
Iteration  29: 2532653.103 ops/s
Iteration  30: 2518940.917 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toMapTarget":
  2535552.391 ±(99.9%) 10977.028 ops/s [Average]
  (min, avg, max) = (2489350.108, 2535552.391, 2580929.511), stdev = 16429.900
  CI (99.9%): [2524575.362, 2546529.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toMapTarget  thrpt   30  2535552.391 ± 10977.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2688429.998 ops/s
# Warmup Iteration   2: 6094744.477 ops/s
# Warmup Iteration   3: 5843779.236 ops/s
# Warmup Iteration   4: 5323709.013 ops/s
# Warmup Iteration   5: 6085708.567 ops/s
# Warmup Iteration   6: 6103961.786 ops/s
# Warmup Iteration   7: 6072674.940 ops/s
# Warmup Iteration   8: 6103372.092 ops/s
# Warmup Iteration   9: 6089868.041 ops/s
# Warmup Iteration  10: 6100290.373 ops/s
# Warmup Iteration  11: 6088789.123 ops/s
# Warmup Iteration  12: 6110180.043 ops/s
# Warmup Iteration  13: 6064177.571 ops/s
# Warmup Iteration  14: 6095987.229 ops/s
# Warmup Iteration  15: 6086672.702 ops/s
# Warmup Iteration  16: 6030775.554 ops/s
# Warmup Iteration  17: 6079842.228 ops/s
# Warmup Iteration  18: 6092628.879 ops/s
# Warmup Iteration  19: 6052084.102 ops/s
# Warmup Iteration  20: 6088899.386 ops/s
# Warmup Iteration  21: 6103207.431 ops/s
# Warmup Iteration  22: 6028846.089 ops/s
# Warmup Iteration  23: 6071997.350 ops/s
# Warmup Iteration  24: 6056421.386 ops/s
# Warmup Iteration  25: 6095003.077 ops/s
# Warmup Iteration  26: 6104007.289 ops/s
# Warmup Iteration  27: 6040462.122 ops/s
# Warmup Iteration  28: 6057834.801 ops/s
# Warmup Iteration  29: 6079328.899 ops/s
# Warmup Iteration  30: 6109142.236 ops/s
Iteration   1: 6109476.461 ops/s
Iteration   2: 6100633.181 ops/s
Iteration   3: 5993135.544 ops/s
Iteration   4: 6109424.690 ops/s
Iteration   5: 6102597.377 ops/s
Iteration   6: 6000965.474 ops/s
Iteration   7: 6074975.055 ops/s
Iteration   8: 6121855.697 ops/s
Iteration   9: 6018298.679 ops/s
Iteration  10: 6075538.583 ops/s
Iteration  11: 6014055.423 ops/s
Iteration  12: 6096137.798 ops/s
Iteration  13: 6135737.928 ops/s
Iteration  14: 6107045.246 ops/s
Iteration  15: 6131116.389 ops/s
Iteration  16: 6008827.243 ops/s
Iteration  17: 6095496.680 ops/s
Iteration  18: 6099389.635 ops/s
Iteration  19: 5990269.273 ops/s
Iteration  20: 6080550.242 ops/s
Iteration  21: 6118680.110 ops/s
Iteration  22: 6097453.102 ops/s
Iteration  23: 6022887.395 ops/s
Iteration  24: 6072745.207 ops/s
Iteration  25: 6062116.455 ops/s
Iteration  26: 6100640.328 ops/s
Iteration  27: 6021183.510 ops/s
Iteration  28: 6020534.760 ops/s
Iteration  29: 6085675.674 ops/s
Iteration  30: 6089161.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toReversed":
  6071886.812 ±(99.9%) 29842.521 ops/s [Average]
  (min, avg, max) = (5990269.273, 6071886.812, 6135737.928), stdev = 44666.884
  CI (99.9%): [6042044.291, 6101729.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toReversed  thrpt   30  6071886.812 ± 29842.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2723192.893 ops/s
# Warmup Iteration   2: 5420693.738 ops/s
# Warmup Iteration   3: 5793372.385 ops/s
# Warmup Iteration   4: 5669440.804 ops/s
# Warmup Iteration   5: 4805236.872 ops/s
# Warmup Iteration   6: 5741972.974 ops/s
# Warmup Iteration   7: 5731927.034 ops/s
# Warmup Iteration   8: 5801072.685 ops/s
# Warmup Iteration   9: 5713131.321 ops/s
# Warmup Iteration  10: 5758213.098 ops/s
# Warmup Iteration  11: 5738215.939 ops/s
# Warmup Iteration  12: 5658509.488 ops/s
# Warmup Iteration  13: 5722852.563 ops/s
# Warmup Iteration  14: 5740482.392 ops/s
# Warmup Iteration  15: 5770222.415 ops/s
# Warmup Iteration  16: 5656692.987 ops/s
# Warmup Iteration  17: 5757429.823 ops/s
# Warmup Iteration  18: 5734930.520 ops/s
# Warmup Iteration  19: 5728056.343 ops/s
# Warmup Iteration  20: 5746750.961 ops/s
# Warmup Iteration  21: 5776785.873 ops/s
# Warmup Iteration  22: 5674121.705 ops/s
# Warmup Iteration  23: 5799089.440 ops/s
# Warmup Iteration  24: 5747347.982 ops/s
# Warmup Iteration  25: 5763769.327 ops/s
# Warmup Iteration  26: 5746453.424 ops/s
# Warmup Iteration  27: 5738211.302 ops/s
# Warmup Iteration  28: 5773389.810 ops/s
# Warmup Iteration  29: 5803476.339 ops/s
# Warmup Iteration  30: 5775138.202 ops/s
Iteration   1: 5767759.815 ops/s
Iteration   2: 5774942.266 ops/s
Iteration   3: 5693002.847 ops/s
Iteration   4: 5705000.394 ops/s
Iteration   5: 5759109.433 ops/s
Iteration   6: 5762109.784 ops/s
Iteration   7: 5720009.079 ops/s
Iteration   8: 5663561.878 ops/s
Iteration   9: 5740052.419 ops/s
Iteration  10: 5787503.704 ops/s
Iteration  11: 5710356.658 ops/s
Iteration  12: 5970311.793 ops/s
Iteration  13: 6070879.833 ops/s
Iteration  14: 5605262.758 ops/s
Iteration  15: 5790619.907 ops/s
Iteration  16: 5778447.221 ops/s
Iteration  17: 5778517.443 ops/s
Iteration  18: 5685149.713 ops/s
Iteration  19: 5787488.368 ops/s
Iteration  20: 5814207.047 ops/s
Iteration  21: 5776960.340 ops/s
Iteration  22: 5617460.348 ops/s
Iteration  23: 5809087.635 ops/s
Iteration  24: 5622086.838 ops/s
Iteration  25: 5754099.303 ops/s
Iteration  26: 5617062.563 ops/s
Iteration  27: 5789396.760 ops/s
Iteration  28: 5765902.467 ops/s
Iteration  29: 5809263.598 ops/s
Iteration  30: 5719113.430 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSet":
  5754824.188 ±(99.9%) 63836.915 ops/s [Average]
  (min, avg, max) = (5605262.758, 5754824.188, 6070879.833), stdev = 95548.096
  CI (99.9%): [5690987.273, 5818661.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSet  thrpt   30  5754824.188 ± 63836.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262585.856 ops/s
# Warmup Iteration   2: 462055.615 ops/s
# Warmup Iteration   3: 579940.416 ops/s
# Warmup Iteration   4: 580990.526 ops/s
# Warmup Iteration   5: 575672.973 ops/s
# Warmup Iteration   6: 478134.312 ops/s
# Warmup Iteration   7: 569188.045 ops/s
# Warmup Iteration   8: 577807.733 ops/s
# Warmup Iteration   9: 574688.731 ops/s
# Warmup Iteration  10: 575358.361 ops/s
# Warmup Iteration  11: 578905.899 ops/s
# Warmup Iteration  12: 579993.267 ops/s
# Warmup Iteration  13: 579937.954 ops/s
# Warmup Iteration  14: 577088.873 ops/s
# Warmup Iteration  15: 582456.879 ops/s
# Warmup Iteration  16: 579251.618 ops/s
# Warmup Iteration  17: 583156.083 ops/s
# Warmup Iteration  18: 577558.562 ops/s
# Warmup Iteration  19: 577065.385 ops/s
# Warmup Iteration  20: 575467.734 ops/s
# Warmup Iteration  21: 576231.260 ops/s
# Warmup Iteration  22: 583059.300 ops/s
# Warmup Iteration  23: 575390.655 ops/s
# Warmup Iteration  24: 570649.648 ops/s
# Warmup Iteration  25: 581959.230 ops/s
# Warmup Iteration  26: 584216.896 ops/s
# Warmup Iteration  27: 582895.415 ops/s
# Warmup Iteration  28: 582394.788 ops/s
# Warmup Iteration  29: 580811.022 ops/s
# Warmup Iteration  30: 578474.079 ops/s
Iteration   1: 580360.513 ops/s
Iteration   2: 582211.000 ops/s
Iteration   3: 573558.765 ops/s
Iteration   4: 571131.411 ops/s
Iteration   5: 571694.004 ops/s
Iteration   6: 582271.708 ops/s
Iteration   7: 582858.634 ops/s
Iteration   8: 583485.325 ops/s
Iteration   9: 582847.846 ops/s
Iteration  10: 580405.735 ops/s
Iteration  11: 574131.915 ops/s
Iteration  12: 580939.153 ops/s
Iteration  13: 583086.390 ops/s
Iteration  14: 582348.177 ops/s
Iteration  15: 580603.180 ops/s
Iteration  16: 583233.477 ops/s
Iteration  17: 582252.738 ops/s
Iteration  18: 581752.985 ops/s
Iteration  19: 581018.546 ops/s
Iteration  20: 582762.023 ops/s
Iteration  21: 585229.225 ops/s
Iteration  22: 578887.162 ops/s
Iteration  23: 583583.157 ops/s
Iteration  24: 582235.649 ops/s
Iteration  25: 573244.973 ops/s
Iteration  26: 583491.298 ops/s
Iteration  27: 583508.703 ops/s
Iteration  28: 582563.168 ops/s
Iteration  29: 583997.904 ops/s
Iteration  30: 582317.397 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBagBy":
  580733.739 ±(99.9%) 2585.259 ops/s [Average]
  (min, avg, max) = (571131.411, 580733.739, 585229.225), stdev = 3869.495
  CI (99.9%): [578148.479, 583318.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  580733.739 ± 2585.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 436927.784 ops/s
# Warmup Iteration   2: 708927.610 ops/s
# Warmup Iteration   3: 867236.163 ops/s
# Warmup Iteration   4: 861761.142 ops/s
# Warmup Iteration   5: 869470.384 ops/s
# Warmup Iteration   6: 865149.730 ops/s
# Warmup Iteration   7: 724333.290 ops/s
# Warmup Iteration   8: 859817.739 ops/s
# Warmup Iteration   9: 866001.086 ops/s
# Warmup Iteration  10: 863325.752 ops/s
# Warmup Iteration  11: 864468.643 ops/s
# Warmup Iteration  12: 868685.270 ops/s
# Warmup Iteration  13: 869308.130 ops/s
# Warmup Iteration  14: 859002.975 ops/s
# Warmup Iteration  15: 864635.880 ops/s
# Warmup Iteration  16: 868243.630 ops/s
# Warmup Iteration  17: 863136.584 ops/s
# Warmup Iteration  18: 869667.965 ops/s
# Warmup Iteration  19: 864382.833 ops/s
# Warmup Iteration  20: 866244.873 ops/s
# Warmup Iteration  21: 869922.403 ops/s
# Warmup Iteration  22: 858394.258 ops/s
# Warmup Iteration  23: 867706.608 ops/s
# Warmup Iteration  24: 859907.797 ops/s
# Warmup Iteration  25: 864402.874 ops/s
# Warmup Iteration  26: 869051.447 ops/s
# Warmup Iteration  27: 868764.051 ops/s
# Warmup Iteration  28: 866995.839 ops/s
# Warmup Iteration  29: 868249.348 ops/s
# Warmup Iteration  30: 870802.659 ops/s
Iteration   1: 871174.399 ops/s
Iteration   2: 867687.046 ops/s
Iteration   3: 868961.871 ops/s
Iteration   4: 867234.392 ops/s
Iteration   5: 871771.022 ops/s
Iteration   6: 865673.817 ops/s
Iteration   7: 868278.812 ops/s
Iteration   8: 863277.365 ops/s
Iteration   9: 866442.706 ops/s
Iteration  10: 865566.961 ops/s
Iteration  11: 854850.630 ops/s
Iteration  12: 873178.130 ops/s
Iteration  13: 868273.403 ops/s
Iteration  14: 870037.698 ops/s
Iteration  15: 859056.677 ops/s
Iteration  16: 855760.768 ops/s
Iteration  17: 866929.421 ops/s
Iteration  18: 860572.648 ops/s
Iteration  19: 865504.533 ops/s
Iteration  20: 869633.957 ops/s
Iteration  21: 865450.229 ops/s
Iteration  22: 867185.715 ops/s
Iteration  23: 868372.473 ops/s
Iteration  24: 867006.348 ops/s
Iteration  25: 868553.764 ops/s
Iteration  26: 868282.698 ops/s
Iteration  27: 869814.405 ops/s
Iteration  28: 866421.112 ops/s
Iteration  29: 858675.877 ops/s
Iteration  30: 869587.696 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  866307.219 ±(99.9%) 2985.153 ops/s [Average]
  (min, avg, max) = (854850.630, 866307.219, 873178.130), stdev = 4468.036
  CI (99.9%): [863322.066, 869292.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  866307.219 ± 2985.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527522.866 ops/s
# Warmup Iteration   2: 967723.472 ops/s
# Warmup Iteration   3: 1119008.558 ops/s
# Warmup Iteration   4: 1120577.114 ops/s
# Warmup Iteration   5: 1120335.502 ops/s
# Warmup Iteration   6: 925558.621 ops/s
# Warmup Iteration   7: 1108867.697 ops/s
# Warmup Iteration   8: 1110021.754 ops/s
# Warmup Iteration   9: 1113801.295 ops/s
# Warmup Iteration  10: 1118637.104 ops/s
# Warmup Iteration  11: 1119979.157 ops/s
# Warmup Iteration  12: 1121397.046 ops/s
# Warmup Iteration  13: 1115493.079 ops/s
# Warmup Iteration  14: 1123360.097 ops/s
# Warmup Iteration  15: 1119208.774 ops/s
# Warmup Iteration  16: 1122055.355 ops/s
# Warmup Iteration  17: 1113359.050 ops/s
# Warmup Iteration  18: 1120732.297 ops/s
# Warmup Iteration  19: 1121278.061 ops/s
# Warmup Iteration  20: 1121130.501 ops/s
# Warmup Iteration  21: 1120227.245 ops/s
# Warmup Iteration  22: 1114059.559 ops/s
# Warmup Iteration  23: 1124426.453 ops/s
# Warmup Iteration  24: 1118416.124 ops/s
# Warmup Iteration  25: 1121585.429 ops/s
# Warmup Iteration  26: 1116856.222 ops/s
# Warmup Iteration  27: 1113483.663 ops/s
# Warmup Iteration  28: 1119138.256 ops/s
# Warmup Iteration  29: 1112984.863 ops/s
# Warmup Iteration  30: 1121104.506 ops/s
Iteration   1: 1120976.948 ops/s
Iteration   2: 1123368.177 ops/s
Iteration   3: 1122357.907 ops/s
Iteration   4: 1096318.616 ops/s
Iteration   5: 1120641.755 ops/s
Iteration   6: 1111072.766 ops/s
Iteration   7: 1125679.473 ops/s
Iteration   8: 1114757.546 ops/s
Iteration   9: 1120838.450 ops/s
Iteration  10: 1121933.822 ops/s
Iteration  11: 1118873.266 ops/s
Iteration  12: 1103402.482 ops/s
Iteration  13: 1124325.078 ops/s
Iteration  14: 1119966.080 ops/s
Iteration  15: 1124159.371 ops/s
Iteration  16: 1108920.662 ops/s
Iteration  17: 1126461.962 ops/s
Iteration  18: 1117235.893 ops/s
Iteration  19: 1128157.357 ops/s
Iteration  20: 1125062.747 ops/s
Iteration  21: 1126900.137 ops/s
Iteration  22: 1108620.563 ops/s
Iteration  23: 1126119.462 ops/s
Iteration  24: 1127624.283 ops/s
Iteration  25: 1105151.120 ops/s
Iteration  26: 1127762.580 ops/s
Iteration  27: 1123326.122 ops/s
Iteration  28: 1127658.193 ops/s
Iteration  29: 1117484.999 ops/s
Iteration  30: 1127393.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1119751.704 ±(99.9%) 5523.783 ops/s [Average]
  (min, avg, max) = (1096318.616, 1119751.704, 1128157.357), stdev = 8267.739
  CI (99.9%): [1114227.921, 1125275.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1119751.704 ± 5523.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338731.110 ops/s
# Warmup Iteration   2: 366166.124 ops/s
# Warmup Iteration   3: 494093.737 ops/s
# Warmup Iteration   4: 487862.171 ops/s
# Warmup Iteration   5: 483984.678 ops/s
# Warmup Iteration   6: 493500.855 ops/s
# Warmup Iteration   7: 489373.980 ops/s
# Warmup Iteration   8: 493526.436 ops/s
# Warmup Iteration   9: 494612.896 ops/s
# Warmup Iteration  10: 491769.968 ops/s
# Warmup Iteration  11: 463247.091 ops/s
# Warmup Iteration  12: 441411.633 ops/s
# Warmup Iteration  13: 493149.874 ops/s
# Warmup Iteration  14: 493117.253 ops/s
# Warmup Iteration  15: 492342.807 ops/s
# Warmup Iteration  16: 493222.259 ops/s
# Warmup Iteration  17: 510404.112 ops/s
# Warmup Iteration  18: 511487.533 ops/s
# Warmup Iteration  19: 511142.824 ops/s
# Warmup Iteration  20: 506605.276 ops/s
# Warmup Iteration  21: 508840.529 ops/s
# Warmup Iteration  22: 510314.272 ops/s
# Warmup Iteration  23: 509902.617 ops/s
# Warmup Iteration  24: 511023.582 ops/s
# Warmup Iteration  25: 509888.474 ops/s
# Warmup Iteration  26: 511072.283 ops/s
# Warmup Iteration  27: 504010.905 ops/s
# Warmup Iteration  28: 506629.438 ops/s
# Warmup Iteration  29: 508608.814 ops/s
# Warmup Iteration  30: 508279.814 ops/s
Iteration   1: 510291.220 ops/s
Iteration   2: 511600.832 ops/s
Iteration   3: 510526.972 ops/s
Iteration   4: 512519.536 ops/s
Iteration   5: 509300.823 ops/s
Iteration   6: 511923.702 ops/s
Iteration   7: 508184.638 ops/s
Iteration   8: 511393.012 ops/s
Iteration   9: 503887.761 ops/s
Iteration  10: 509096.619 ops/s
Iteration  11: 509559.493 ops/s
Iteration  12: 510313.767 ops/s
Iteration  13: 507241.269 ops/s
Iteration  14: 509671.741 ops/s
Iteration  15: 510290.420 ops/s
Iteration  16: 497724.418 ops/s
Iteration  17: 507913.182 ops/s
Iteration  18: 506808.590 ops/s
Iteration  19: 509971.834 ops/s
Iteration  20: 506314.570 ops/s
Iteration  21: 511470.547 ops/s
Iteration  22: 510573.917 ops/s
Iteration  23: 508409.844 ops/s
Iteration  24: 501210.779 ops/s
Iteration  25: 510198.110 ops/s
Iteration  26: 493807.329 ops/s
Iteration  27: 506091.041 ops/s
Iteration  28: 509858.768 ops/s
Iteration  29: 510509.058 ops/s
Iteration  30: 508410.727 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedBag_with_null":
  508169.151 ±(99.9%) 2790.286 ops/s [Average]
  (min, avg, max) = (493807.329, 508169.151, 512519.536), stdev = 4176.369
  CI (99.9%): [505378.864, 510959.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  508169.151 ± 2790.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2408830.004 ops/s
# Warmup Iteration   2: 5389776.684 ops/s
# Warmup Iteration   3: 4263625.193 ops/s
# Warmup Iteration   4: 5073335.057 ops/s
# Warmup Iteration   5: 5068418.100 ops/s
# Warmup Iteration   6: 5067773.185 ops/s
# Warmup Iteration   7: 5083437.013 ops/s
# Warmup Iteration   8: 5068524.629 ops/s
# Warmup Iteration   9: 5033712.826 ops/s
# Warmup Iteration  10: 5068792.922 ops/s
# Warmup Iteration  11: 5081610.208 ops/s
# Warmup Iteration  12: 5057261.124 ops/s
# Warmup Iteration  13: 5070575.449 ops/s
# Warmup Iteration  14: 5084884.762 ops/s
# Warmup Iteration  15: 5050366.287 ops/s
# Warmup Iteration  16: 5084904.587 ops/s
# Warmup Iteration  17: 5054695.975 ops/s
# Warmup Iteration  18: 5056329.633 ops/s
# Warmup Iteration  19: 5089033.599 ops/s
# Warmup Iteration  20: 5042166.977 ops/s
# Warmup Iteration  21: 5097243.140 ops/s
# Warmup Iteration  22: 5094342.921 ops/s
# Warmup Iteration  23: 5096188.310 ops/s
# Warmup Iteration  24: 5047521.030 ops/s
# Warmup Iteration  25: 5039185.008 ops/s
# Warmup Iteration  26: 5090111.676 ops/s
# Warmup Iteration  27: 5063063.009 ops/s
# Warmup Iteration  28: 5061156.173 ops/s
# Warmup Iteration  29: 5029429.789 ops/s
# Warmup Iteration  30: 5043811.343 ops/s
Iteration   1: 5092852.143 ops/s
Iteration   2: 4991851.690 ops/s
Iteration   3: 5104857.885 ops/s
Iteration   4: 5090640.423 ops/s
Iteration   5: 5093578.496 ops/s
Iteration   6: 5093075.802 ops/s
Iteration   7: 5090406.425 ops/s
Iteration   8: 5096541.032 ops/s
Iteration   9: 5081536.530 ops/s
Iteration  10: 5069720.011 ops/s
Iteration  11: 5058699.887 ops/s
Iteration  12: 5095405.399 ops/s
Iteration  13: 5068377.424 ops/s
Iteration  14: 4943835.463 ops/s
Iteration  15: 5018817.558 ops/s
Iteration  16: 5105980.696 ops/s
Iteration  17: 5082576.209 ops/s
Iteration  18: 5090757.723 ops/s
Iteration  19: 5109553.509 ops/s
Iteration  20: 5012163.451 ops/s
Iteration  21: 5097872.634 ops/s
Iteration  22: 5092729.028 ops/s
Iteration  23: 4998072.290 ops/s
Iteration  24: 4992608.946 ops/s
Iteration  25: 4941783.623 ops/s
Iteration  26: 5016150.029 ops/s
Iteration  27: 5095402.097 ops/s
Iteration  28: 5102950.327 ops/s
Iteration  29: 5082432.442 ops/s
Iteration  30: 5078279.222 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy":
  5062983.613 ±(99.9%) 32587.429 ops/s [Average]
  (min, avg, max) = (4941783.623, 5062983.613, 5109553.509), stdev = 48775.333
  CI (99.9%): [5030396.184, 5095571.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedListBy  thrpt   30  5062983.613 ± 32587.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512588.026 ops/s
# Warmup Iteration   2: 551370.105 ops/s
# Warmup Iteration   3: 671605.384 ops/s
# Warmup Iteration   4: 719571.887 ops/s
# Warmup Iteration   5: 721502.301 ops/s
# Warmup Iteration   6: 713737.624 ops/s
# Warmup Iteration   7: 720522.308 ops/s
# Warmup Iteration   8: 713807.327 ops/s
# Warmup Iteration   9: 715496.474 ops/s
# Warmup Iteration  10: 712157.155 ops/s
# Warmup Iteration  11: 713418.874 ops/s
# Warmup Iteration  12: 715476.271 ops/s
# Warmup Iteration  13: 601111.134 ops/s
# Warmup Iteration  14: 708202.114 ops/s
# Warmup Iteration  15: 717935.816 ops/s
# Warmup Iteration  16: 713324.932 ops/s
# Warmup Iteration  17: 751900.183 ops/s
# Warmup Iteration  18: 751417.739 ops/s
# Warmup Iteration  19: 753330.839 ops/s
# Warmup Iteration  20: 747215.909 ops/s
# Warmup Iteration  21: 750476.552 ops/s
# Warmup Iteration  22: 748059.677 ops/s
# Warmup Iteration  23: 751183.407 ops/s
# Warmup Iteration  24: 738482.438 ops/s
# Warmup Iteration  25: 739356.764 ops/s
# Warmup Iteration  26: 747751.403 ops/s
# Warmup Iteration  27: 749534.759 ops/s
# Warmup Iteration  28: 749289.268 ops/s
# Warmup Iteration  29: 748659.955 ops/s
# Warmup Iteration  30: 744280.618 ops/s
Iteration   1: 748763.826 ops/s
Iteration   2: 750466.530 ops/s
Iteration   3: 750873.575 ops/s
Iteration   4: 751059.744 ops/s
Iteration   5: 751017.220 ops/s
Iteration   6: 749615.712 ops/s
Iteration   7: 750118.894 ops/s
Iteration   8: 750778.518 ops/s
Iteration   9: 747598.762 ops/s
Iteration  10: 751340.663 ops/s
Iteration  11: 738581.243 ops/s
Iteration  12: 752560.724 ops/s
Iteration  13: 740369.165 ops/s
Iteration  14: 749725.568 ops/s
Iteration  15: 748615.191 ops/s
Iteration  16: 737364.336 ops/s
Iteration  17: 749874.136 ops/s
Iteration  18: 739887.363 ops/s
Iteration  19: 750749.064 ops/s
Iteration  20: 753516.193 ops/s
Iteration  21: 750625.392 ops/s
Iteration  22: 752586.348 ops/s
Iteration  23: 749710.328 ops/s
Iteration  24: 750586.858 ops/s
Iteration  25: 740766.795 ops/s
Iteration  26: 731619.619 ops/s
Iteration  27: 751470.356 ops/s
Iteration  28: 738516.419 ops/s
Iteration  29: 752173.292 ops/s
Iteration  30: 750007.331 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null":
  747697.972 ±(99.9%) 3783.350 ops/s [Average]
  (min, avg, max) = (731619.619, 747697.972, 753516.193), stdev = 5662.740
  CI (99.9%): [743914.622, 751481.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  747697.972 ± 3783.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2694552.180 ops/s
# Warmup Iteration   2: 5212458.190 ops/s
# Warmup Iteration   3: 5465567.333 ops/s
# Warmup Iteration   4: 5522504.929 ops/s
# Warmup Iteration   5: 4562960.085 ops/s
# Warmup Iteration   6: 5549452.274 ops/s
# Warmup Iteration   7: 5521464.965 ops/s
# Warmup Iteration   8: 5553125.186 ops/s
# Warmup Iteration   9: 5558277.795 ops/s
# Warmup Iteration  10: 5533244.647 ops/s
# Warmup Iteration  11: 5569028.727 ops/s
# Warmup Iteration  12: 5548641.209 ops/s
# Warmup Iteration  13: 5467494.995 ops/s
# Warmup Iteration  14: 5524738.342 ops/s
# Warmup Iteration  15: 5565719.458 ops/s
# Warmup Iteration  16: 5552434.679 ops/s
# Warmup Iteration  17: 5543818.559 ops/s
# Warmup Iteration  18: 5469448.918 ops/s
# Warmup Iteration  19: 5469014.530 ops/s
# Warmup Iteration  20: 5494508.848 ops/s
# Warmup Iteration  21: 5405990.941 ops/s
# Warmup Iteration  22: 5524113.074 ops/s
# Warmup Iteration  23: 5481397.187 ops/s
# Warmup Iteration  24: 5547504.044 ops/s
# Warmup Iteration  25: 5506033.597 ops/s
# Warmup Iteration  26: 5536665.555 ops/s
# Warmup Iteration  27: 5489767.548 ops/s
# Warmup Iteration  28: 5539306.749 ops/s
# Warmup Iteration  29: 5510651.861 ops/s
# Warmup Iteration  30: 5531658.279 ops/s
Iteration   1: 5534423.269 ops/s
Iteration   2: 5532340.988 ops/s
Iteration   3: 5514610.620 ops/s
Iteration   4: 5521661.732 ops/s
Iteration   5: 5528836.734 ops/s
Iteration   6: 5531764.300 ops/s
Iteration   7: 5421688.066 ops/s
Iteration   8: 5432612.668 ops/s
Iteration   9: 5528600.047 ops/s
Iteration  10: 5427991.506 ops/s
Iteration  11: 5518131.512 ops/s
Iteration  12: 5516984.928 ops/s
Iteration  13: 5535156.249 ops/s
Iteration  14: 5431913.854 ops/s
Iteration  15: 5389262.809 ops/s
Iteration  16: 5534508.109 ops/s
Iteration  17: 5509226.452 ops/s
Iteration  18: 5470946.265 ops/s
Iteration  19: 5534957.545 ops/s
Iteration  20: 5480120.275 ops/s
Iteration  21: 5509319.579 ops/s
Iteration  22: 5433700.627 ops/s
Iteration  23: 5444136.040 ops/s
Iteration  24: 5532130.880 ops/s
Iteration  25: 5547225.361 ops/s
Iteration  26: 5449019.841 ops/s
Iteration  27: 5531341.955 ops/s
Iteration  28: 5528535.312 ops/s
Iteration  29: 5513462.425 ops/s
Iteration  30: 5474294.026 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  5495296.799 ±(99.9%) 30227.174 ops/s [Average]
  (min, avg, max) = (5389262.809, 5495296.799, 5547225.361), stdev = 45242.614
  CI (99.9%): [5465069.626, 5525523.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  5495296.799 ± 30227.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1849212.247 ops/s
# Warmup Iteration   2: 4252858.931 ops/s
# Warmup Iteration   3: 4299484.219 ops/s
# Warmup Iteration   4: 3609529.385 ops/s
# Warmup Iteration   5: 4263178.235 ops/s
# Warmup Iteration   6: 4275491.888 ops/s
# Warmup Iteration   7: 4292750.178 ops/s
# Warmup Iteration   8: 4316544.592 ops/s
# Warmup Iteration   9: 4314171.276 ops/s
# Warmup Iteration  10: 4325431.814 ops/s
# Warmup Iteration  11: 4318878.403 ops/s
# Warmup Iteration  12: 4280295.449 ops/s
# Warmup Iteration  13: 4314513.589 ops/s
# Warmup Iteration  14: 4319641.659 ops/s
# Warmup Iteration  15: 4286056.875 ops/s
# Warmup Iteration  16: 4315304.210 ops/s
# Warmup Iteration  17: 4288501.674 ops/s
# Warmup Iteration  18: 4307033.415 ops/s
# Warmup Iteration  19: 4294346.626 ops/s
# Warmup Iteration  20: 4309407.483 ops/s
# Warmup Iteration  21: 4289421.319 ops/s
# Warmup Iteration  22: 4263844.773 ops/s
# Warmup Iteration  23: 4259788.607 ops/s
# Warmup Iteration  24: 4266324.710 ops/s
# Warmup Iteration  25: 4259503.924 ops/s
# Warmup Iteration  26: 4274272.456 ops/s
# Warmup Iteration  27: 4273392.996 ops/s
# Warmup Iteration  28: 4223562.016 ops/s
# Warmup Iteration  29: 4230508.521 ops/s
# Warmup Iteration  30: 4258814.317 ops/s
Iteration   1: 4254398.792 ops/s
Iteration   2: 4308440.644 ops/s
Iteration   3: 4183882.551 ops/s
Iteration   4: 4297660.458 ops/s
Iteration   5: 4295959.069 ops/s
Iteration   6: 4300226.442 ops/s
Iteration   7: 4283794.426 ops/s
Iteration   8: 4279365.589 ops/s
Iteration   9: 4293747.365 ops/s
Iteration  10: 4305862.158 ops/s
Iteration  11: 4289220.326 ops/s
Iteration  12: 4294369.620 ops/s
Iteration  13: 4271828.690 ops/s
Iteration  14: 4306456.103 ops/s
Iteration  15: 4288219.516 ops/s
Iteration  16: 4298474.612 ops/s
Iteration  17: 4301568.328 ops/s
Iteration  18: 4294780.479 ops/s
Iteration  19: 4303709.661 ops/s
Iteration  20: 4317256.858 ops/s
Iteration  21: 4296736.245 ops/s
Iteration  22: 4274818.922 ops/s
Iteration  23: 4275819.396 ops/s
Iteration  24: 4307985.690 ops/s
Iteration  25: 4281125.692 ops/s
Iteration  26: 4280416.778 ops/s
Iteration  27: 4296854.015 ops/s
Iteration  28: 4299110.870 ops/s
Iteration  29: 4303495.680 ops/s
Iteration  30: 4135893.112 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4284049.270 ±(99.9%) 24575.429 ops/s [Average]
  (min, avg, max) = (4135893.112, 4284049.270, 4317256.858), stdev = 36783.348
  CI (99.9%): [4259473.841, 4308624.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4284049.270 ± 24575.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2404423.293 ops/s
# Warmup Iteration   2: 5013290.654 ops/s
# Warmup Iteration   3: 4271824.915 ops/s
# Warmup Iteration   4: 5089791.765 ops/s
# Warmup Iteration   5: 5086353.326 ops/s
# Warmup Iteration   6: 5092492.185 ops/s
# Warmup Iteration   7: 5098611.760 ops/s
# Warmup Iteration   8: 5091188.358 ops/s
# Warmup Iteration   9: 5056224.363 ops/s
# Warmup Iteration  10: 5058648.642 ops/s
# Warmup Iteration  11: 5058156.251 ops/s
# Warmup Iteration  12: 5104567.641 ops/s
# Warmup Iteration  13: 5104074.222 ops/s
# Warmup Iteration  14: 5074649.291 ops/s
# Warmup Iteration  15: 5092505.379 ops/s
# Warmup Iteration  16: 5088898.585 ops/s
# Warmup Iteration  17: 5055216.370 ops/s
# Warmup Iteration  18: 5100742.385 ops/s
# Warmup Iteration  19: 5110781.893 ops/s
# Warmup Iteration  20: 5081148.493 ops/s
# Warmup Iteration  21: 5061760.567 ops/s
# Warmup Iteration  22: 5051553.176 ops/s
# Warmup Iteration  23: 5103159.356 ops/s
# Warmup Iteration  24: 4984802.464 ops/s
# Warmup Iteration  25: 5090662.216 ops/s
# Warmup Iteration  26: 5087693.194 ops/s
# Warmup Iteration  27: 5093068.182 ops/s
# Warmup Iteration  28: 5096724.708 ops/s
# Warmup Iteration  29: 5084453.821 ops/s
# Warmup Iteration  30: 5086969.905 ops/s
Iteration   1: 5105128.319 ops/s
Iteration   2: 5097034.918 ops/s
Iteration   3: 5106197.831 ops/s
Iteration   4: 4960157.531 ops/s
Iteration   5: 5111375.433 ops/s
Iteration   6: 5034168.305 ops/s
Iteration   7: 5094646.622 ops/s
Iteration   8: 5093400.823 ops/s
Iteration   9: 5079825.288 ops/s
Iteration  10: 5020448.890 ops/s
Iteration  11: 5038498.872 ops/s
Iteration  12: 5097754.551 ops/s
Iteration  13: 5088296.463 ops/s
Iteration  14: 5001904.156 ops/s
Iteration  15: 5016661.257 ops/s
Iteration  16: 5036417.849 ops/s
Iteration  17: 5109519.811 ops/s
Iteration  18: 5103041.601 ops/s
Iteration  19: 5084918.379 ops/s
Iteration  20: 5020979.017 ops/s
Iteration  21: 5102179.280 ops/s
Iteration  22: 5088411.403 ops/s
Iteration  23: 5093170.662 ops/s
Iteration  24: 5105189.133 ops/s
Iteration  25: 5057974.547 ops/s
Iteration  26: 5009126.642 ops/s
Iteration  27: 5089402.140 ops/s
Iteration  28: 5105255.713 ops/s
Iteration  29: 5047125.528 ops/s
Iteration  30: 5045191.605 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering":
  5068113.419 ±(99.9%) 27090.857 ops/s [Average]
  (min, avg, max) = (4960157.531, 5068113.419, 5111375.433), stdev = 40548.322
  CI (99.9%): [5041022.563, 5095204.276] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  5068113.419 ± 27090.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4676428.361 ops/s
# Warmup Iteration   2: 10386797.477 ops/s
# Warmup Iteration   3: 10194050.947 ops/s
# Warmup Iteration   4: 9062758.242 ops/s
# Warmup Iteration   5: 10420609.249 ops/s
# Warmup Iteration   6: 10566470.274 ops/s
# Warmup Iteration   7: 10540072.893 ops/s
# Warmup Iteration   8: 10561324.971 ops/s
# Warmup Iteration   9: 10538849.738 ops/s
# Warmup Iteration  10: 10570636.730 ops/s
# Warmup Iteration  11: 10507957.023 ops/s
# Warmup Iteration  12: 10502816.043 ops/s
# Warmup Iteration  13: 10455504.050 ops/s
# Warmup Iteration  14: 10579986.944 ops/s
# Warmup Iteration  15: 10587734.203 ops/s
# Warmup Iteration  16: 10544231.824 ops/s
# Warmup Iteration  17: 10513458.595 ops/s
# Warmup Iteration  18: 10500139.315 ops/s
# Warmup Iteration  19: 10525741.339 ops/s
# Warmup Iteration  20: 10541034.427 ops/s
# Warmup Iteration  21: 10457109.513 ops/s
# Warmup Iteration  22: 10564182.352 ops/s
# Warmup Iteration  23: 10496274.522 ops/s
# Warmup Iteration  24: 10488554.047 ops/s
# Warmup Iteration  25: 10558749.648 ops/s
# Warmup Iteration  26: 10553204.641 ops/s
# Warmup Iteration  27: 10555050.919 ops/s
# Warmup Iteration  28: 10546706.593 ops/s
# Warmup Iteration  29: 10564312.303 ops/s
# Warmup Iteration  30: 10602671.119 ops/s
Iteration   1: 10388758.545 ops/s
Iteration   2: 10572553.651 ops/s
Iteration   3: 10571630.714 ops/s
Iteration   4: 10599964.821 ops/s
Iteration   5: 10557887.210 ops/s
Iteration   6: 10603319.088 ops/s
Iteration   7: 10478548.165 ops/s
Iteration   8: 10566364.744 ops/s
Iteration   9: 10588130.216 ops/s
Iteration  10: 10458084.958 ops/s
Iteration  11: 10559500.185 ops/s
Iteration  12: 10576335.739 ops/s
Iteration  13: 10565921.422 ops/s
Iteration  14: 10520598.906 ops/s
Iteration  15: 10550302.978 ops/s
Iteration  16: 10417809.816 ops/s
Iteration  17: 10380617.804 ops/s
Iteration  18: 10521593.980 ops/s
Iteration  19: 10477662.864 ops/s
Iteration  20: 10547827.137 ops/s
Iteration  21: 10548481.018 ops/s
Iteration  22: 10541683.115 ops/s
Iteration  23: 10563509.478 ops/s
Iteration  24: 10599956.865 ops/s
Iteration  25: 10363653.173 ops/s
Iteration  26: 10543741.878 ops/s
Iteration  27: 10554516.256 ops/s
Iteration  28: 10605059.553 ops/s
Iteration  29: 10553816.639 ops/s
Iteration  30: 10559842.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator":
  10531255.776 ±(99.9%) 45058.159 ops/s [Average]
  (min, avg, max) = (10363653.173, 10531255.776, 10605059.553), stdev = 67440.936
  CI (99.9%): [10486197.617, 10576313.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  10531255.776 ± 45058.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2692381.667 ops/s
# Warmup Iteration   2: 5199373.630 ops/s
# Warmup Iteration   3: 5562340.649 ops/s
# Warmup Iteration   4: 5625134.638 ops/s
# Warmup Iteration   5: 4692131.200 ops/s
# Warmup Iteration   6: 5591506.917 ops/s
# Warmup Iteration   7: 5613641.115 ops/s
# Warmup Iteration   8: 5637906.480 ops/s
# Warmup Iteration   9: 5621870.483 ops/s
# Warmup Iteration  10: 5644799.966 ops/s
# Warmup Iteration  11: 5593780.359 ops/s
# Warmup Iteration  12: 5555643.145 ops/s
# Warmup Iteration  13: 5634020.332 ops/s
# Warmup Iteration  14: 5635045.347 ops/s
# Warmup Iteration  15: 5605274.672 ops/s
# Warmup Iteration  16: 5638120.998 ops/s
# Warmup Iteration  17: 5598470.759 ops/s
# Warmup Iteration  18: 5628701.889 ops/s
# Warmup Iteration  19: 5620174.324 ops/s
# Warmup Iteration  20: 5586718.588 ops/s
# Warmup Iteration  21: 5572383.010 ops/s
# Warmup Iteration  22: 5572341.169 ops/s
# Warmup Iteration  23: 5607809.177 ops/s
# Warmup Iteration  24: 5614303.055 ops/s
# Warmup Iteration  25: 5619430.700 ops/s
# Warmup Iteration  26: 5626774.211 ops/s
# Warmup Iteration  27: 5537738.816 ops/s
# Warmup Iteration  28: 5621963.078 ops/s
# Warmup Iteration  29: 5579858.589 ops/s
# Warmup Iteration  30: 5618956.346 ops/s
Iteration   1: 5622625.525 ops/s
Iteration   2: 5531873.649 ops/s
Iteration   3: 5623154.942 ops/s
Iteration   4: 5640391.298 ops/s
Iteration   5: 5478405.371 ops/s
Iteration   6: 5517574.633 ops/s
Iteration   7: 5623896.151 ops/s
Iteration   8: 5626501.139 ops/s
Iteration   9: 5614050.897 ops/s
Iteration  10: 5427117.197 ops/s
Iteration  11: 5624029.497 ops/s
Iteration  12: 5611295.708 ops/s
Iteration  13: 5613223.252 ops/s
Iteration  14: 5537112.832 ops/s
Iteration  15: 5617951.348 ops/s
Iteration  16: 5626571.256 ops/s
Iteration  17: 5614034.395 ops/s
Iteration  18: 5557074.397 ops/s
Iteration  19: 5642832.246 ops/s
Iteration  20: 5609729.258 ops/s
Iteration  21: 5628578.663 ops/s
Iteration  22: 5606305.400 ops/s
Iteration  23: 5537347.175 ops/s
Iteration  24: 5611215.368 ops/s
Iteration  25: 5616926.788 ops/s
Iteration  26: 5636840.584 ops/s
Iteration  27: 5599679.521 ops/s
Iteration  28: 5625239.213 ops/s
Iteration  29: 5622109.246 ops/s
Iteration  30: 5579638.688 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedList_with_null":
  5594110.855 ±(99.9%) 34458.580 ops/s [Average]
  (min, avg, max) = (5427117.197, 5594110.855, 5642832.246), stdev = 51575.985
  CI (99.9%): [5559652.274, 5628569.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  5594110.855 ± 34458.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549776.202 ops/s
# Warmup Iteration   2: 1155471.946 ops/s
# Warmup Iteration   3: 1246696.458 ops/s
# Warmup Iteration   4: 1245438.346 ops/s
# Warmup Iteration   5: 1041511.955 ops/s
# Warmup Iteration   6: 1238482.273 ops/s
# Warmup Iteration   7: 1241098.260 ops/s
# Warmup Iteration   8: 1240751.942 ops/s
# Warmup Iteration   9: 1248533.394 ops/s
# Warmup Iteration  10: 1247085.609 ops/s
# Warmup Iteration  11: 1249662.217 ops/s
# Warmup Iteration  12: 1244588.509 ops/s
# Warmup Iteration  13: 1246560.272 ops/s
# Warmup Iteration  14: 1247866.110 ops/s
# Warmup Iteration  15: 1249606.474 ops/s
# Warmup Iteration  16: 1253305.188 ops/s
# Warmup Iteration  17: 1232722.993 ops/s
# Warmup Iteration  18: 1250616.413 ops/s
# Warmup Iteration  19: 1240437.947 ops/s
# Warmup Iteration  20: 1241850.367 ops/s
# Warmup Iteration  21: 1247069.011 ops/s
# Warmup Iteration  22: 1251380.479 ops/s
# Warmup Iteration  23: 1246150.703 ops/s
# Warmup Iteration  24: 1250856.933 ops/s
# Warmup Iteration  25: 1251423.176 ops/s
# Warmup Iteration  26: 1251234.462 ops/s
# Warmup Iteration  27: 1247167.321 ops/s
# Warmup Iteration  28: 1252119.899 ops/s
# Warmup Iteration  29: 1238458.879 ops/s
# Warmup Iteration  30: 1253729.602 ops/s
Iteration   1: 1253357.304 ops/s
Iteration   2: 1245734.574 ops/s
Iteration   3: 1258107.286 ops/s
Iteration   4: 1250864.305 ops/s
Iteration   5: 1230861.704 ops/s
Iteration   6: 1252957.564 ops/s
Iteration   7: 1250997.642 ops/s
Iteration   8: 1258702.407 ops/s
Iteration   9: 1254045.294 ops/s
Iteration  10: 1257176.495 ops/s
Iteration  11: 1243889.202 ops/s
Iteration  12: 1256324.306 ops/s
Iteration  13: 1260604.244 ops/s
Iteration  14: 1238652.560 ops/s
Iteration  15: 1258162.962 ops/s
Iteration  16: 1253361.650 ops/s
Iteration  17: 1249190.551 ops/s
Iteration  18: 1248045.186 ops/s
Iteration  19: 1241894.226 ops/s
Iteration  20: 1255710.537 ops/s
Iteration  21: 1236592.266 ops/s
Iteration  22: 1227455.472 ops/s
Iteration  23: 1254394.374 ops/s
Iteration  24: 1254441.691 ops/s
Iteration  25: 1252261.433 ops/s
Iteration  26: 1246698.268 ops/s
Iteration  27: 1247207.423 ops/s
Iteration  28: 1261508.429 ops/s
Iteration  29: 1234847.130 ops/s
Iteration  30: 1253101.433 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap":
  1249571.597 ±(99.9%) 5861.192 ops/s [Average]
  (min, avg, max) = (1227455.472, 1249571.597, 1261508.429), stdev = 8772.756
  CI (99.9%): [1243710.406, 1255432.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedMap  thrpt   30  1249571.597 ± 5861.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516510.987 ops/s
# Warmup Iteration   2: 1018370.500 ops/s
# Warmup Iteration   3: 1084334.210 ops/s
# Warmup Iteration   4: 1130129.261 ops/s
# Warmup Iteration   5: 935488.911 ops/s
# Warmup Iteration   6: 1112069.001 ops/s
# Warmup Iteration   7: 1118393.210 ops/s
# Warmup Iteration   8: 1126393.384 ops/s
# Warmup Iteration   9: 1126967.725 ops/s
# Warmup Iteration  10: 1122759.201 ops/s
# Warmup Iteration  11: 1131549.664 ops/s
# Warmup Iteration  12: 1119970.870 ops/s
# Warmup Iteration  13: 1127816.474 ops/s
# Warmup Iteration  14: 1131458.745 ops/s
# Warmup Iteration  15: 1121856.580 ops/s
# Warmup Iteration  16: 1111357.560 ops/s
# Warmup Iteration  17: 1125390.063 ops/s
# Warmup Iteration  18: 1119486.749 ops/s
# Warmup Iteration  19: 1125703.242 ops/s
# Warmup Iteration  20: 1129079.510 ops/s
# Warmup Iteration  21: 1128638.758 ops/s
# Warmup Iteration  22: 1121950.366 ops/s
# Warmup Iteration  23: 1113372.375 ops/s
# Warmup Iteration  24: 1125140.199 ops/s
# Warmup Iteration  25: 1120463.236 ops/s
# Warmup Iteration  26: 1127036.559 ops/s
# Warmup Iteration  27: 1112752.090 ops/s
# Warmup Iteration  28: 1130001.802 ops/s
# Warmup Iteration  29: 1126716.368 ops/s
# Warmup Iteration  30: 1123493.623 ops/s
Iteration   1: 1129331.263 ops/s
Iteration   2: 1133790.511 ops/s
Iteration   3: 1128623.537 ops/s
Iteration   4: 1126657.259 ops/s
Iteration   5: 1129452.815 ops/s
Iteration   6: 1125688.879 ops/s
Iteration   7: 1127178.123 ops/s
Iteration   8: 1128340.072 ops/s
Iteration   9: 1130463.103 ops/s
Iteration  10: 1114672.828 ops/s
Iteration  11: 1125492.604 ops/s
Iteration  12: 1120462.225 ops/s
Iteration  13: 1132171.620 ops/s
Iteration  14: 1120185.873 ops/s
Iteration  15: 1124539.071 ops/s
Iteration  16: 1118678.079 ops/s
Iteration  17: 1120798.802 ops/s
Iteration  18: 1127315.574 ops/s
Iteration  19: 1130339.634 ops/s
Iteration  20: 1124906.337 ops/s
Iteration  21: 1133415.702 ops/s
Iteration  22: 1132154.007 ops/s
Iteration  23: 1109076.621 ops/s
Iteration  24: 1130575.318 ops/s
Iteration  25: 1118391.694 ops/s
Iteration  26: 1101864.179 ops/s
Iteration  27: 1102496.128 ops/s
Iteration  28: 1123945.227 ops/s
Iteration  29: 1130533.032 ops/s
Iteration  30: 1131588.030 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMapBy":
  1124437.605 ±(99.9%) 5589.013 ops/s [Average]
  (min, avg, max) = (1101864.179, 1124437.605, 1133790.511), stdev = 8365.372
  CI (99.9%): [1118848.592, 1130026.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1124437.605 ± 5589.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536916.754 ops/s
# Warmup Iteration   2: 1099710.844 ops/s
# Warmup Iteration   3: 1194384.130 ops/s
# Warmup Iteration   4: 1204535.191 ops/s
# Warmup Iteration   5: 1005716.365 ops/s
# Warmup Iteration   6: 1198317.007 ops/s
# Warmup Iteration   7: 1202637.307 ops/s
# Warmup Iteration   8: 1190963.756 ops/s
# Warmup Iteration   9: 1206768.216 ops/s
# Warmup Iteration  10: 1182178.304 ops/s
# Warmup Iteration  11: 1205780.286 ops/s
# Warmup Iteration  12: 1202778.397 ops/s
# Warmup Iteration  13: 1203148.263 ops/s
# Warmup Iteration  14: 1204293.918 ops/s
# Warmup Iteration  15: 1189599.871 ops/s
# Warmup Iteration  16: 1208094.574 ops/s
# Warmup Iteration  17: 1205187.917 ops/s
# Warmup Iteration  18: 1205970.502 ops/s
# Warmup Iteration  19: 1200746.008 ops/s
# Warmup Iteration  20: 1196535.450 ops/s
# Warmup Iteration  21: 1205846.937 ops/s
# Warmup Iteration  22: 1199970.355 ops/s
# Warmup Iteration  23: 1191913.532 ops/s
# Warmup Iteration  24: 1199608.916 ops/s
# Warmup Iteration  25: 1205324.783 ops/s
# Warmup Iteration  26: 1202312.772 ops/s
# Warmup Iteration  27: 1194853.352 ops/s
# Warmup Iteration  28: 1202663.352 ops/s
# Warmup Iteration  29: 1201972.255 ops/s
# Warmup Iteration  30: 1195614.432 ops/s
Iteration   1: 1205431.241 ops/s
Iteration   2: 1174673.334 ops/s
Iteration   3: 1204215.054 ops/s
Iteration   4: 1196619.614 ops/s
Iteration   5: 1202735.352 ops/s
Iteration   6: 1207464.237 ops/s
Iteration   7: 1202770.101 ops/s
Iteration   8: 1201056.248 ops/s
Iteration   9: 1200181.951 ops/s
Iteration  10: 1195500.225 ops/s
Iteration  11: 1204091.557 ops/s
Iteration  12: 1204228.816 ops/s
Iteration  13: 1202159.917 ops/s
Iteration  14: 1183625.280 ops/s
Iteration  15: 1204089.886 ops/s
Iteration  16: 1195221.131 ops/s
Iteration  17: 1204583.079 ops/s
Iteration  18: 1197505.775 ops/s
Iteration  19: 1182522.910 ops/s
Iteration  20: 1205631.008 ops/s
Iteration  21: 1199864.295 ops/s
Iteration  22: 1207550.211 ops/s
Iteration  23: 1205789.840 ops/s
Iteration  24: 1196198.517 ops/s
Iteration  25: 1205308.286 ops/s
Iteration  26: 1205087.874 ops/s
Iteration  27: 1205344.566 ops/s
Iteration  28: 1180556.522 ops/s
Iteration  29: 1206622.249 ops/s
Iteration  30: 1208546.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1199839.186 ±(99.9%) 5800.061 ops/s [Average]
  (min, avg, max) = (1174673.334, 1199839.186, 1208546.512), stdev = 8681.259
  CI (99.9%): [1194039.125, 1205639.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1199839.186 ± 5800.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716471.892 ops/s
# Warmup Iteration   2: 1789220.295 ops/s
# Warmup Iteration   3: 1803942.298 ops/s
# Warmup Iteration   4: 1507991.190 ops/s
# Warmup Iteration   5: 1791165.292 ops/s
# Warmup Iteration   6: 1788080.036 ops/s
# Warmup Iteration   7: 1803492.802 ops/s
# Warmup Iteration   8: 1799964.586 ops/s
# Warmup Iteration   9: 1789493.111 ops/s
# Warmup Iteration  10: 1806474.378 ops/s
# Warmup Iteration  11: 1806666.388 ops/s
# Warmup Iteration  12: 1805107.915 ops/s
# Warmup Iteration  13: 1804848.678 ops/s
# Warmup Iteration  14: 1791576.751 ops/s
# Warmup Iteration  15: 1802285.079 ops/s
# Warmup Iteration  16: 1801388.904 ops/s
# Warmup Iteration  17: 1805666.436 ops/s
# Warmup Iteration  18: 1791958.569 ops/s
# Warmup Iteration  19: 1789482.921 ops/s
# Warmup Iteration  20: 1794279.058 ops/s
# Warmup Iteration  21: 1787770.057 ops/s
# Warmup Iteration  22: 1806597.445 ops/s
# Warmup Iteration  23: 1761605.151 ops/s
# Warmup Iteration  24: 1802563.388 ops/s
# Warmup Iteration  25: 1802027.912 ops/s
# Warmup Iteration  26: 1807985.802 ops/s
# Warmup Iteration  27: 1791527.766 ops/s
# Warmup Iteration  28: 1802300.091 ops/s
# Warmup Iteration  29: 1803394.513 ops/s
# Warmup Iteration  30: 1801670.486 ops/s
Iteration   1: 1779280.565 ops/s
Iteration   2: 1798469.481 ops/s
Iteration   3: 1803496.847 ops/s
Iteration   4: 1798215.131 ops/s
Iteration   5: 1790814.298 ops/s
Iteration   6: 1798756.461 ops/s
Iteration   7: 1775458.611 ops/s
Iteration   8: 1783587.670 ops/s
Iteration   9: 1804448.354 ops/s
Iteration  10: 1800729.114 ops/s
Iteration  11: 1774481.130 ops/s
Iteration  12: 1808872.807 ops/s
Iteration  13: 1791786.076 ops/s
Iteration  14: 1797701.759 ops/s
Iteration  15: 1801592.236 ops/s
Iteration  16: 1800500.833 ops/s
Iteration  17: 1781212.809 ops/s
Iteration  18: 1761426.563 ops/s
Iteration  19: 1800233.719 ops/s
Iteration  20: 1807042.219 ops/s
Iteration  21: 1808508.932 ops/s
Iteration  22: 1800430.500 ops/s
Iteration  23: 1798632.939 ops/s
Iteration  24: 1807381.470 ops/s
Iteration  25: 1807305.088 ops/s
Iteration  26: 1806166.372 ops/s
Iteration  27: 1806267.959 ops/s
Iteration  28: 1805928.774 ops/s
Iteration  29: 1795820.176 ops/s
Iteration  30: 1803721.193 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSetBy":
  1796609.003 ±(99.9%) 7946.052 ops/s [Average]
  (min, avg, max) = (1761426.563, 1796609.003, 1808872.807), stdev = 11893.277
  CI (99.9%): [1788662.951, 1804555.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1796609.003 ± 7946.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746813.446 ops/s
# Warmup Iteration   2: 1716515.861 ops/s
# Warmup Iteration   3: 1777628.646 ops/s
# Warmup Iteration   4: 1546206.261 ops/s
# Warmup Iteration   5: 1678786.454 ops/s
# Warmup Iteration   6: 1763006.259 ops/s
# Warmup Iteration   7: 1751984.075 ops/s
# Warmup Iteration   8: 1773119.413 ops/s
# Warmup Iteration   9: 1763245.201 ops/s
# Warmup Iteration  10: 1762509.125 ops/s
# Warmup Iteration  11: 1763277.718 ops/s
# Warmup Iteration  12: 1760194.071 ops/s
# Warmup Iteration  13: 1772591.294 ops/s
# Warmup Iteration  14: 1754797.476 ops/s
# Warmup Iteration  15: 1775688.233 ops/s
# Warmup Iteration  16: 1777922.920 ops/s
# Warmup Iteration  17: 1775678.720 ops/s
# Warmup Iteration  18: 1782203.676 ops/s
# Warmup Iteration  19: 1776472.770 ops/s
# Warmup Iteration  20: 1778168.763 ops/s
# Warmup Iteration  21: 1773545.342 ops/s
# Warmup Iteration  22: 1756636.536 ops/s
# Warmup Iteration  23: 1766214.704 ops/s
# Warmup Iteration  24: 1765300.823 ops/s
# Warmup Iteration  25: 1764013.873 ops/s
# Warmup Iteration  26: 1761732.001 ops/s
# Warmup Iteration  27: 1776348.175 ops/s
# Warmup Iteration  28: 1777987.068 ops/s
# Warmup Iteration  29: 1775264.840 ops/s
# Warmup Iteration  30: 1774048.920 ops/s
Iteration   1: 1773770.024 ops/s
Iteration   2: 1772293.311 ops/s
Iteration   3: 1745920.291 ops/s
Iteration   4: 1779787.602 ops/s
Iteration   5: 1779801.236 ops/s
Iteration   6: 1769981.951 ops/s
Iteration   7: 1777080.778 ops/s
Iteration   8: 1771342.644 ops/s
Iteration   9: 1776553.062 ops/s
Iteration  10: 1781486.188 ops/s
Iteration  11: 1781970.371 ops/s
Iteration  12: 1762068.854 ops/s
Iteration  13: 1773519.190 ops/s
Iteration  14: 1776699.524 ops/s
Iteration  15: 1778406.831 ops/s
Iteration  16: 1782505.468 ops/s
Iteration  17: 1780208.433 ops/s
Iteration  18: 1766156.865 ops/s
Iteration  19: 1752134.301 ops/s
Iteration  20: 1780294.327 ops/s
Iteration  21: 1783211.090 ops/s
Iteration  22: 1777390.291 ops/s
Iteration  23: 1773725.348 ops/s
Iteration  24: 1747100.077 ops/s
Iteration  25: 1774391.914 ops/s
Iteration  26: 1774304.106 ops/s
Iteration  27: 1781974.404 ops/s
Iteration  28: 1767300.742 ops/s
Iteration  29: 1779847.687 ops/s
Iteration  30: 1778290.851 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1773317.259 ±(99.9%) 6616.484 ops/s [Average]
  (min, avg, max) = (1745920.291, 1773317.259, 1783211.090), stdev = 9903.243
  CI (99.9%): [1766700.775, 1779933.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1773317.259 ± 6616.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780786.517 ops/s
# Warmup Iteration   2: 1727527.614 ops/s
# Warmup Iteration   3: 1796470.386 ops/s
# Warmup Iteration   4: 1682427.480 ops/s
# Warmup Iteration   5: 1641851.903 ops/s
# Warmup Iteration   6: 1811224.499 ops/s
# Warmup Iteration   7: 1800534.896 ops/s
# Warmup Iteration   8: 1816499.669 ops/s
# Warmup Iteration   9: 1779346.482 ops/s
# Warmup Iteration  10: 1813970.125 ops/s
# Warmup Iteration  11: 1809683.872 ops/s
# Warmup Iteration  12: 1806673.623 ops/s
# Warmup Iteration  13: 1809869.295 ops/s
# Warmup Iteration  14: 1817101.470 ops/s
# Warmup Iteration  15: 1814247.095 ops/s
# Warmup Iteration  16: 1814560.547 ops/s
# Warmup Iteration  17: 1811078.107 ops/s
# Warmup Iteration  18: 1813552.494 ops/s
# Warmup Iteration  19: 1812654.063 ops/s
# Warmup Iteration  20: 1784314.149 ops/s
# Warmup Iteration  21: 1801869.108 ops/s
# Warmup Iteration  22: 1813783.688 ops/s
# Warmup Iteration  23: 1798050.144 ops/s
# Warmup Iteration  24: 1808174.858 ops/s
# Warmup Iteration  25: 1813815.956 ops/s
# Warmup Iteration  26: 1806894.079 ops/s
# Warmup Iteration  27: 1811508.505 ops/s
# Warmup Iteration  28: 1809400.156 ops/s
# Warmup Iteration  29: 1816352.705 ops/s
# Warmup Iteration  30: 1813936.913 ops/s
Iteration   1: 1786446.270 ops/s
Iteration   2: 1813420.997 ops/s
Iteration   3: 1798845.630 ops/s
Iteration   4: 1780344.023 ops/s
Iteration   5: 1773893.509 ops/s
Iteration   6: 1805384.573 ops/s
Iteration   7: 1814521.058 ops/s
Iteration   8: 1804814.807 ops/s
Iteration   9: 1813507.124 ops/s
Iteration  10: 1810306.477 ops/s
Iteration  11: 1815473.285 ops/s
Iteration  12: 1810935.365 ops/s
Iteration  13: 1785782.399 ops/s
Iteration  14: 1817882.493 ops/s
Iteration  15: 1806519.025 ops/s
Iteration  16: 1810687.935 ops/s
Iteration  17: 1814839.207 ops/s
Iteration  18: 1818296.438 ops/s
Iteration  19: 1792200.437 ops/s
Iteration  20: 1813982.521 ops/s
Iteration  21: 1814289.045 ops/s
Iteration  22: 1795065.356 ops/s
Iteration  23: 1809630.555 ops/s
Iteration  24: 1803235.507 ops/s
Iteration  25: 1786944.732 ops/s
Iteration  26: 1817091.499 ops/s
Iteration  27: 1807992.062 ops/s
Iteration  28: 1808392.707 ops/s
Iteration  29: 1814343.249 ops/s
Iteration  30: 1810774.888 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1805194.772 ±(99.9%) 8111.455 ops/s [Average]
  (min, avg, max) = (1773893.509, 1805194.772, 1818296.438), stdev = 12140.845
  CI (99.9%): [1797083.318, 1813306.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1805194.772 ± 8111.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5516873.226 ops/s
# Warmup Iteration   2: 11198615.138 ops/s
# Warmup Iteration   3: 9919010.291 ops/s
# Warmup Iteration   4: 11595336.694 ops/s
# Warmup Iteration   5: 11819532.947 ops/s
# Warmup Iteration   6: 11684923.470 ops/s
# Warmup Iteration   7: 11780611.636 ops/s
# Warmup Iteration   8: 11690847.880 ops/s
# Warmup Iteration   9: 11693382.221 ops/s
# Warmup Iteration  10: 11748773.991 ops/s
# Warmup Iteration  11: 11815844.951 ops/s
# Warmup Iteration  12: 11817358.428 ops/s
# Warmup Iteration  13: 11828922.301 ops/s
# Warmup Iteration  14: 11729183.681 ops/s
# Warmup Iteration  15: 11787349.333 ops/s
# Warmup Iteration  16: 11820895.816 ops/s
# Warmup Iteration  17: 11579939.356 ops/s
# Warmup Iteration  18: 11780438.644 ops/s
# Warmup Iteration  19: 11788749.817 ops/s
# Warmup Iteration  20: 11820195.325 ops/s
# Warmup Iteration  21: 11761192.674 ops/s
# Warmup Iteration  22: 11773053.132 ops/s
# Warmup Iteration  23: 11701684.776 ops/s
# Warmup Iteration  24: 11838138.190 ops/s
# Warmup Iteration  25: 11697010.832 ops/s
# Warmup Iteration  26: 11797858.255 ops/s
# Warmup Iteration  27: 11833737.738 ops/s
# Warmup Iteration  28: 11798453.513 ops/s
# Warmup Iteration  29: 11751801.277 ops/s
# Warmup Iteration  30: 11813007.761 ops/s
Iteration   1: 11737097.478 ops/s
Iteration   2: 11797142.113 ops/s
Iteration   3: 11750321.071 ops/s
Iteration   4: 11774239.541 ops/s
Iteration   5: 11772337.367 ops/s
Iteration   6: 11762010.715 ops/s
Iteration   7: 11804504.742 ops/s
Iteration   8: 11606474.673 ops/s
Iteration   9: 11806275.946 ops/s
Iteration  10: 11620083.226 ops/s
Iteration  11: 11724277.623 ops/s
Iteration  12: 11801559.881 ops/s
Iteration  13: 11622031.974 ops/s
Iteration  14: 11828139.963 ops/s
Iteration  15: 11614939.111 ops/s
Iteration  16: 11846561.611 ops/s
Iteration  17: 11586566.122 ops/s
Iteration  18: 11790404.566 ops/s
Iteration  19: 11782714.635 ops/s
Iteration  20: 11840373.483 ops/s
Iteration  21: 11840096.902 ops/s
Iteration  22: 11807357.370 ops/s
Iteration  23: 11649961.982 ops/s
Iteration  24: 11814447.047 ops/s
Iteration  25: 11613353.753 ops/s
Iteration  26: 11841246.057 ops/s
Iteration  27: 11746966.163 ops/s
Iteration  28: 11757118.445 ops/s
Iteration  29: 11781074.628 ops/s
Iteration  30: 11833630.309 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_toStack":
  11751776.950 ±(99.9%) 55299.613 ops/s [Average]
  (min, avg, max) = (11586566.122, 11751776.950, 11846561.611), stdev = 82769.863
  CI (99.9%): [11696477.337, 11807076.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ListAdapterTest._Benchmark.benchmark_toStack  thrpt   30  11751776.950 ± 55299.613  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3474917.988 ops/s
# Warmup Iteration   2: 7587820.703 ops/s
# Warmup Iteration   3: 6675140.707 ops/s
# Warmup Iteration   4: 7172172.114 ops/s
# Warmup Iteration   5: 7611021.178 ops/s
# Warmup Iteration   6: 7603415.276 ops/s
# Warmup Iteration   7: 7504511.505 ops/s
# Warmup Iteration   8: 7616226.549 ops/s
# Warmup Iteration   9: 7599085.051 ops/s
# Warmup Iteration  10: 7626639.616 ops/s
# Warmup Iteration  11: 7603427.423 ops/s
# Warmup Iteration  12: 7587867.804 ops/s
# Warmup Iteration  13: 7542539.938 ops/s
# Warmup Iteration  14: 7610659.103 ops/s
# Warmup Iteration  15: 7573188.741 ops/s
# Warmup Iteration  16: 7583049.479 ops/s
# Warmup Iteration  17: 7578263.254 ops/s
# Warmup Iteration  18: 7640072.361 ops/s
# Warmup Iteration  19: 7611243.634 ops/s
# Warmup Iteration  20: 7605789.751 ops/s
# Warmup Iteration  21: 7653519.306 ops/s
# Warmup Iteration  22: 7643168.513 ops/s
# Warmup Iteration  23: 7652773.509 ops/s
# Warmup Iteration  24: 7629300.112 ops/s
# Warmup Iteration  25: 7637907.410 ops/s
# Warmup Iteration  26: 7620872.287 ops/s
# Warmup Iteration  27: 7618804.738 ops/s
# Warmup Iteration  28: 7626327.144 ops/s
# Warmup Iteration  29: 7607688.070 ops/s
# Warmup Iteration  30: 7640630.793 ops/s
Iteration   1: 7411247.119 ops/s
Iteration   2: 7601150.066 ops/s
Iteration   3: 7643975.787 ops/s
Iteration   4: 7598836.492 ops/s
Iteration   5: 7626568.666 ops/s
Iteration   6: 7624094.875 ops/s
Iteration   7: 7640518.723 ops/s
Iteration   8: 7632314.276 ops/s
Iteration   9: 7641854.598 ops/s
Iteration  10: 7556135.526 ops/s
Iteration  11: 7643710.851 ops/s
Iteration  12: 7660091.005 ops/s
Iteration  13: 7630866.360 ops/s
Iteration  14: 7636745.577 ops/s
Iteration  15: 7577328.470 ops/s
Iteration  16: 7605135.635 ops/s
Iteration  17: 7649799.751 ops/s
Iteration  18: 7643253.431 ops/s
Iteration  19: 7613309.324 ops/s
Iteration  20: 7632306.871 ops/s
Iteration  21: 7600573.860 ops/s
Iteration  22: 7633640.410 ops/s
Iteration  23: 7617810.569 ops/s
Iteration  24: 7614124.423 ops/s
Iteration  25: 7608036.039 ops/s
Iteration  26: 7639293.183 ops/s
Iteration  27: 7649681.924 ops/s
Iteration  28: 7625962.328 ops/s
Iteration  29: 7524653.668 ops/s
Iteration  30: 7631087.806 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_with":
  7613803.587 ±(99.9%) 31987.752 ops/s [Average]
  (min, avg, max) = (7411247.119, 7613803.587, 7660091.005), stdev = 47877.765
  CI (99.9%): [7581815.835, 7645791.339] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_with  thrpt   30  7613803.587 ± 31987.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2901831.817 ops/s
# Warmup Iteration   2: 6382202.521 ops/s
# Warmup Iteration   3: 5349492.038 ops/s
# Warmup Iteration   4: 6413027.185 ops/s
# Warmup Iteration   5: 6454911.900 ops/s
# Warmup Iteration   6: 6341661.800 ops/s
# Warmup Iteration   7: 6464758.060 ops/s
# Warmup Iteration   8: 6409918.230 ops/s
# Warmup Iteration   9: 6458797.997 ops/s
# Warmup Iteration  10: 6439914.632 ops/s
# Warmup Iteration  11: 6398010.205 ops/s
# Warmup Iteration  12: 6462378.754 ops/s
# Warmup Iteration  13: 6473612.723 ops/s
# Warmup Iteration  14: 6397175.403 ops/s
# Warmup Iteration  15: 6460691.091 ops/s
# Warmup Iteration  16: 6460156.990 ops/s
# Warmup Iteration  17: 6348233.805 ops/s
# Warmup Iteration  18: 6441261.745 ops/s
# Warmup Iteration  19: 6419565.278 ops/s
# Warmup Iteration  20: 6295032.583 ops/s
# Warmup Iteration  21: 6451776.235 ops/s
# Warmup Iteration  22: 6393372.775 ops/s
# Warmup Iteration  23: 6454691.413 ops/s
# Warmup Iteration  24: 6468678.125 ops/s
# Warmup Iteration  25: 6418432.649 ops/s
# Warmup Iteration  26: 6464823.142 ops/s
# Warmup Iteration  27: 6447113.140 ops/s
# Warmup Iteration  28: 6470271.711 ops/s
# Warmup Iteration  29: 6437397.257 ops/s
# Warmup Iteration  30: 6427883.700 ops/s
Iteration   1: 6462441.473 ops/s
Iteration   2: 6346979.437 ops/s
Iteration   3: 6451509.480 ops/s
Iteration   4: 6452008.132 ops/s
Iteration   5: 6338569.718 ops/s
Iteration   6: 6466269.614 ops/s
Iteration   7: 6449131.683 ops/s
Iteration   8: 6448141.357 ops/s
Iteration   9: 6389320.196 ops/s
Iteration  10: 6418627.684 ops/s
Iteration  11: 6367136.061 ops/s
Iteration  12: 6373391.907 ops/s
Iteration  13: 6355295.138 ops/s
Iteration  14: 6478576.002 ops/s
Iteration  15: 6360395.785 ops/s
Iteration  16: 6455998.105 ops/s
Iteration  17: 6436406.710 ops/s
Iteration  18: 6455758.320 ops/s
Iteration  19: 6460608.119 ops/s
Iteration  20: 6437116.394 ops/s
Iteration  21: 6441785.903 ops/s
Iteration  22: 6445091.764 ops/s
Iteration  23: 6471844.909 ops/s
Iteration  24: 6400774.810 ops/s
Iteration  25: 6297352.354 ops/s
Iteration  26: 6481783.693 ops/s
Iteration  27: 6439765.846 ops/s
Iteration  28: 6467694.818 ops/s
Iteration  29: 6423169.484 ops/s
Iteration  30: 6419643.245 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withAll":
  6423086.271 ±(99.9%) 32075.315 ops/s [Average]
  (min, avg, max) = (6297352.354, 6423086.271, 6481783.693), stdev = 48008.826
  CI (99.9%): [6391010.956, 6455161.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_withAll  thrpt   30  6423086.271 ± 32075.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 456136.267 ops/s
# Warmup Iteration   2: 1485162.015 ops/s
# Warmup Iteration   3: 1376879.187 ops/s
# Warmup Iteration   4: 1372641.175 ops/s
# Warmup Iteration   5: 1486860.560 ops/s
# Warmup Iteration   6: 1490358.507 ops/s
# Warmup Iteration   7: 1495194.859 ops/s
# Warmup Iteration   8: 1494227.558 ops/s
# Warmup Iteration   9: 1458213.674 ops/s
# Warmup Iteration  10: 1484527.854 ops/s
# Warmup Iteration  11: 1498748.906 ops/s
# Warmup Iteration  12: 1494017.197 ops/s
# Warmup Iteration  13: 1493194.068 ops/s
# Warmup Iteration  14: 1485497.029 ops/s
# Warmup Iteration  15: 1488070.216 ops/s
# Warmup Iteration  16: 1485293.287 ops/s
# Warmup Iteration  17: 1475692.934 ops/s
# Warmup Iteration  18: 1483253.846 ops/s
# Warmup Iteration  19: 1493273.299 ops/s
# Warmup Iteration  20: 1483766.091 ops/s
# Warmup Iteration  21: 1481809.510 ops/s
# Warmup Iteration  22: 1497658.043 ops/s
# Warmup Iteration  23: 1492918.354 ops/s
# Warmup Iteration  24: 1495051.255 ops/s
# Warmup Iteration  25: 1452677.755 ops/s
# Warmup Iteration  26: 1485048.468 ops/s
# Warmup Iteration  27: 1485188.365 ops/s
# Warmup Iteration  28: 1483510.190 ops/s
# Warmup Iteration  29: 1490826.989 ops/s
# Warmup Iteration  30: 1502994.544 ops/s
Iteration   1: 1500185.272 ops/s
Iteration   2: 1500129.309 ops/s
Iteration   3: 1477968.752 ops/s
Iteration   4: 1474258.735 ops/s
Iteration   5: 1488551.148 ops/s
Iteration   6: 1474299.572 ops/s
Iteration   7: 1494910.707 ops/s
Iteration   8: 1492865.813 ops/s
Iteration   9: 1496810.013 ops/s
Iteration  10: 1473604.788 ops/s
Iteration  11: 1497137.300 ops/s
Iteration  12: 1497232.263 ops/s
Iteration  13: 1470804.291 ops/s
Iteration  14: 1494741.453 ops/s
Iteration  15: 1470936.313 ops/s
Iteration  16: 1497837.693 ops/s
Iteration  17: 1502937.702 ops/s
Iteration  18: 1490114.884 ops/s
Iteration  19: 1504354.092 ops/s
Iteration  20: 1500707.319 ops/s
Iteration  21: 1501623.798 ops/s
Iteration  22: 1501208.787 ops/s
Iteration  23: 1494313.837 ops/s
Iteration  24: 1501397.646 ops/s
Iteration  25: 1501324.869 ops/s
Iteration  26: 1488060.932 ops/s
Iteration  27: 1497264.041 ops/s
Iteration  28: 1493455.451 ops/s
Iteration  29: 1504290.943 ops/s
Iteration  30: 1493730.540 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withMethods":
  1492568.609 ±(99.9%) 7049.201 ops/s [Average]
  (min, avg, max) = (1470804.291, 1492568.609, 1504354.092), stdev = 10550.913
  CI (99.9%): [1485519.408, 1499617.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ListAdapterTest._Benchmark.benchmark_withMethods  thrpt   30  1492568.609 ± 7049.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3949825.655 ops/s
# Warmup Iteration   2: 8631737.658 ops/s
# Warmup Iteration   3: 8581664.143 ops/s
# Warmup Iteration   4: 7243328.908 ops/s
# Warmup Iteration   5: 8621974.771 ops/s
# Warmup Iteration   6: 8561337.901 ops/s
# Warmup Iteration   7: 8566632.112 ops/s
# Warmup Iteration   8: 8567240.780 ops/s
# Warmup Iteration   9: 8555052.807 ops/s
# Warmup Iteration  10: 8586213.119 ops/s
# Warmup Iteration  11: 8554457.678 ops/s
# Warmup Iteration  12: 8606962.009 ops/s
# Warmup Iteration  13: 8540911.299 ops/s
# Warmup Iteration  14: 8557464.700 ops/s
# Warmup Iteration  15: 8493056.615 ops/s
# Warmup Iteration  16: 8607067.334 ops/s
# Warmup Iteration  17: 8548279.729 ops/s
# Warmup Iteration  18: 8447324.956 ops/s
# Warmup Iteration  19: 8607334.734 ops/s
# Warmup Iteration  20: 8637757.777 ops/s
# Warmup Iteration  21: 8506218.868 ops/s
# Warmup Iteration  22: 8645824.795 ops/s
# Warmup Iteration  23: 8631076.969 ops/s
# Warmup Iteration  24: 8557364.613 ops/s
# Warmup Iteration  25: 8629157.534 ops/s
# Warmup Iteration  26: 8552415.865 ops/s
# Warmup Iteration  27: 8633851.470 ops/s
# Warmup Iteration  28: 8610745.467 ops/s
# Warmup Iteration  29: 8587016.131 ops/s
# Warmup Iteration  30: 8585446.119 ops/s
Iteration   1: 8492223.719 ops/s
Iteration   2: 8578093.986 ops/s
Iteration   3: 8657908.033 ops/s
Iteration   4: 8661405.742 ops/s
Iteration   5: 8607172.379 ops/s
Iteration   6: 8648842.611 ops/s
Iteration   7: 8665696.644 ops/s
Iteration   8: 8534065.935 ops/s
Iteration   9: 8492726.826 ops/s
Iteration  10: 8651237.279 ops/s
Iteration  11: 8513475.900 ops/s
Iteration  12: 8621137.719 ops/s
Iteration  13: 8617410.687 ops/s
Iteration  14: 8625377.616 ops/s
Iteration  15: 8638367.460 ops/s
Iteration  16: 8655981.238 ops/s
Iteration  17: 8623353.230 ops/s
Iteration  18: 8559404.727 ops/s
Iteration  19: 8554277.906 ops/s
Iteration  20: 8578025.408 ops/s
Iteration  21: 8643996.024 ops/s
Iteration  22: 8573484.098 ops/s
Iteration  23: 8643220.777 ops/s
Iteration  24: 8542079.917 ops/s
Iteration  25: 8658692.185 ops/s
Iteration  26: 8618104.862 ops/s
Iteration  27: 8599118.756 ops/s
Iteration  28: 8591565.866 ops/s
Iteration  29: 8510761.123 ops/s
Iteration  30: 8647104.262 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_without":
  8600143.764 ±(99.9%) 36084.415 ops/s [Average]
  (min, avg, max) = (8492223.719, 8600143.764, 8665696.644), stdev = 54009.458
  CI (99.9%): [8564059.348, 8636228.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_without  thrpt   30  8600143.764 ± 36084.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1349468.865 ops/s
# Warmup Iteration   2: 2536814.784 ops/s
# Warmup Iteration   3: 2782235.744 ops/s
# Warmup Iteration   4: 2807279.134 ops/s
# Warmup Iteration   5: 2328099.081 ops/s
# Warmup Iteration   6: 2752017.420 ops/s
# Warmup Iteration   7: 2809068.197 ops/s
# Warmup Iteration   8: 2796952.463 ops/s
# Warmup Iteration   9: 2808360.524 ops/s
# Warmup Iteration  10: 2809402.652 ops/s
# Warmup Iteration  11: 2812219.643 ops/s
# Warmup Iteration  12: 2803637.884 ops/s
# Warmup Iteration  13: 2805743.315 ops/s
# Warmup Iteration  14: 2758080.644 ops/s
# Warmup Iteration  15: 2787639.779 ops/s
# Warmup Iteration  16: 2801779.204 ops/s
# Warmup Iteration  17: 2773050.730 ops/s
# Warmup Iteration  18: 2762835.704 ops/s
# Warmup Iteration  19: 2772896.223 ops/s
# Warmup Iteration  20: 2799886.941 ops/s
# Warmup Iteration  21: 2796312.361 ops/s
# Warmup Iteration  22: 2803596.815 ops/s
# Warmup Iteration  23: 2758372.198 ops/s
# Warmup Iteration  24: 2795887.078 ops/s
# Warmup Iteration  25: 2793446.517 ops/s
# Warmup Iteration  26: 2799501.078 ops/s
# Warmup Iteration  27: 2773633.623 ops/s
# Warmup Iteration  28: 2807522.912 ops/s
# Warmup Iteration  29: 2785607.624 ops/s
# Warmup Iteration  30: 2781145.725 ops/s
Iteration   1: 2798103.636 ops/s
Iteration   2: 2760526.975 ops/s
Iteration   3: 2706460.251 ops/s
Iteration   4: 2801601.543 ops/s
Iteration   5: 2801010.440 ops/s
Iteration   6: 2802103.058 ops/s
Iteration   7: 2801903.924 ops/s
Iteration   8: 2799942.586 ops/s
Iteration   9: 2806499.161 ops/s
Iteration  10: 2800810.507 ops/s
Iteration  11: 2802846.316 ops/s
Iteration  12: 2799173.931 ops/s
Iteration  13: 2795300.496 ops/s
Iteration  14: 2722888.721 ops/s
Iteration  15: 2759733.147 ops/s
Iteration  16: 2787829.361 ops/s
Iteration  17: 2796831.056 ops/s
Iteration  18: 2782146.131 ops/s
Iteration  19: 2794591.897 ops/s
Iteration  20: 2803705.523 ops/s
Iteration  21: 2783094.381 ops/s
Iteration  22: 2786528.045 ops/s
Iteration  23: 2803903.218 ops/s
Iteration  24: 2807857.196 ops/s
Iteration  25: 2801821.020 ops/s
Iteration  26: 2798000.878 ops/s
Iteration  27: 2787786.046 ops/s
Iteration  28: 2794396.402 ops/s
Iteration  29: 2798276.388 ops/s
Iteration  30: 2791852.136 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_withoutAll":
  2789250.812 ±(99.9%) 15604.377 ops/s [Average]
  (min, avg, max) = (2706460.251, 2789250.812, 2807857.196), stdev = 23355.899
  CI (99.9%): [2773646.435, 2804855.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ListAdapterTest._Benchmark.benchmark_withoutAll  thrpt   30  2789250.812 ± 15604.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174311.135 ops/s
# Warmup Iteration   2: 184096.710 ops/s
# Warmup Iteration   3: 242662.581 ops/s
# Warmup Iteration   4: 248271.992 ops/s
# Warmup Iteration   5: 249973.361 ops/s
# Warmup Iteration   6: 245688.996 ops/s
# Warmup Iteration   7: 249748.441 ops/s
# Warmup Iteration   8: 247870.143 ops/s
# Warmup Iteration   9: 249151.602 ops/s
# Warmup Iteration  10: 247648.107 ops/s
# Warmup Iteration  11: 249177.394 ops/s
# Warmup Iteration  12: 206859.046 ops/s
# Warmup Iteration  13: 250584.500 ops/s
# Warmup Iteration  14: 249970.540 ops/s
# Warmup Iteration  15: 249196.610 ops/s
# Warmup Iteration  16: 248670.754 ops/s
# Warmup Iteration  17: 245427.289 ops/s
# Warmup Iteration  18: 248686.173 ops/s
# Warmup Iteration  19: 247759.942 ops/s
# Warmup Iteration  20: 247281.920 ops/s
# Warmup Iteration  21: 249600.387 ops/s
# Warmup Iteration  22: 249646.553 ops/s
# Warmup Iteration  23: 249429.190 ops/s
# Warmup Iteration  24: 249662.167 ops/s
# Warmup Iteration  25: 249036.459 ops/s
# Warmup Iteration  26: 249391.258 ops/s
# Warmup Iteration  27: 249255.166 ops/s
# Warmup Iteration  28: 248746.338 ops/s
# Warmup Iteration  29: 248806.887 ops/s
# Warmup Iteration  30: 247082.231 ops/s
Iteration   1: 248787.907 ops/s
Iteration   2: 249942.681 ops/s
Iteration   3: 249763.423 ops/s
Iteration   4: 249493.655 ops/s
Iteration   5: 248720.005 ops/s
Iteration   6: 245862.391 ops/s
Iteration   7: 244937.484 ops/s
Iteration   8: 248567.504 ops/s
Iteration   9: 249507.525 ops/s
Iteration  10: 243093.933 ops/s
Iteration  11: 249459.457 ops/s
Iteration  12: 251077.846 ops/s
Iteration  13: 248798.280 ops/s
Iteration  14: 249263.641 ops/s
Iteration  15: 249596.005 ops/s
Iteration  16: 249658.859 ops/s
Iteration  17: 249620.831 ops/s
Iteration  18: 249056.012 ops/s
Iteration  19: 248668.689 ops/s
Iteration  20: 248619.471 ops/s
Iteration  21: 247972.360 ops/s
Iteration  22: 249168.513 ops/s
Iteration  23: 250636.612 ops/s
Iteration  24: 250002.564 ops/s
Iteration  25: 248495.019 ops/s
Iteration  26: 249754.492 ops/s
Iteration  27: 245581.683 ops/s
Iteration  28: 249347.445 ops/s
Iteration  29: 247809.113 ops/s
Iteration  30: 247515.635 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zip":
  248625.968 ±(99.9%) 1153.256 ops/s [Average]
  (min, avg, max) = (243093.933, 248625.968, 251077.846), stdev = 1726.139
  CI (99.9%): [247472.712, 249779.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_zip  thrpt   30  248625.968 ± 1153.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322125.213 ops/s
# Warmup Iteration   2: 441047.327 ops/s
# Warmup Iteration   3: 556515.060 ops/s
# Warmup Iteration   4: 555525.662 ops/s
# Warmup Iteration   5: 557365.014 ops/s
# Warmup Iteration   6: 561846.727 ops/s
# Warmup Iteration   7: 560274.823 ops/s
# Warmup Iteration   8: 466768.244 ops/s
# Warmup Iteration   9: 559244.949 ops/s
# Warmup Iteration  10: 559804.139 ops/s
# Warmup Iteration  11: 554812.627 ops/s
# Warmup Iteration  12: 557869.279 ops/s
# Warmup Iteration  13: 556198.199 ops/s
# Warmup Iteration  14: 554593.072 ops/s
# Warmup Iteration  15: 553170.680 ops/s
# Warmup Iteration  16: 559638.888 ops/s
# Warmup Iteration  17: 551183.968 ops/s
# Warmup Iteration  18: 558695.870 ops/s
# Warmup Iteration  19: 559577.772 ops/s
# Warmup Iteration  20: 553634.034 ops/s
# Warmup Iteration  21: 558363.424 ops/s
# Warmup Iteration  22: 558156.599 ops/s
# Warmup Iteration  23: 556292.748 ops/s
# Warmup Iteration  24: 556833.264 ops/s
# Warmup Iteration  25: 556408.015 ops/s
# Warmup Iteration  26: 555523.827 ops/s
# Warmup Iteration  27: 558310.266 ops/s
# Warmup Iteration  28: 559816.939 ops/s
# Warmup Iteration  29: 557032.373 ops/s
# Warmup Iteration  30: 552107.855 ops/s
Iteration   1: 556557.154 ops/s
Iteration   2: 557539.822 ops/s
Iteration   3: 556976.307 ops/s
Iteration   4: 551073.778 ops/s
Iteration   5: 560742.675 ops/s
Iteration   6: 549041.871 ops/s
Iteration   7: 560906.267 ops/s
Iteration   8: 548602.130 ops/s
Iteration   9: 557274.563 ops/s
Iteration  10: 557730.849 ops/s
Iteration  11: 556746.957 ops/s
Iteration  12: 548994.569 ops/s
Iteration  13: 555217.352 ops/s
Iteration  14: 555422.266 ops/s
Iteration  15: 560852.361 ops/s
Iteration  16: 546900.492 ops/s
Iteration  17: 557875.486 ops/s
Iteration  18: 550639.712 ops/s
Iteration  19: 547947.303 ops/s
Iteration  20: 556028.411 ops/s
Iteration  21: 560669.498 ops/s
Iteration  22: 559651.592 ops/s
Iteration  23: 553515.949 ops/s
Iteration  24: 557737.957 ops/s
Iteration  25: 559850.071 ops/s
Iteration  26: 558252.247 ops/s
Iteration  27: 561192.822 ops/s
Iteration  28: 560203.408 ops/s
Iteration  29: 558655.524 ops/s
Iteration  30: 554895.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.ListAdapterTest._Benchmark.benchmark_zipWithIndex":
  555923.156 ±(99.9%) 2918.068 ops/s [Average]
  (min, avg, max) = (546900.492, 555923.156, 561192.822), stdev = 4367.627
  CI (99.9%): [553005.088, 558841.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ListAdapterTest._Benchmark.benchmark_zipWithIndex  thrpt   30  555923.156 ± 2918.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567227.092 ops/s
# Warmup Iteration   2: 662939.840 ops/s
# Warmup Iteration   3: 841408.619 ops/s
# Warmup Iteration   4: 834622.206 ops/s
# Warmup Iteration   5: 835602.082 ops/s
# Warmup Iteration   6: 838393.938 ops/s
# Warmup Iteration   7: 842547.081 ops/s
# Warmup Iteration   8: 842708.275 ops/s
# Warmup Iteration   9: 836860.125 ops/s
# Warmup Iteration  10: 704465.123 ops/s
# Warmup Iteration  11: 842640.430 ops/s
# Warmup Iteration  12: 829044.419 ops/s
# Warmup Iteration  13: 846556.830 ops/s
# Warmup Iteration  14: 842519.283 ops/s
# Warmup Iteration  15: 839288.557 ops/s
# Warmup Iteration  16: 843150.071 ops/s
# Warmup Iteration  17: 885436.672 ops/s
# Warmup Iteration  18: 886015.029 ops/s
# Warmup Iteration  19: 887302.441 ops/s
# Warmup Iteration  20: 886695.796 ops/s
# Warmup Iteration  21: 879537.618 ops/s
# Warmup Iteration  22: 880668.704 ops/s
# Warmup Iteration  23: 888279.679 ops/s
# Warmup Iteration  24: 879181.541 ops/s
# Warmup Iteration  25: 888601.547 ops/s
# Warmup Iteration  26: 888309.641 ops/s
# Warmup Iteration  27: 872299.461 ops/s
# Warmup Iteration  28: 885969.037 ops/s
# Warmup Iteration  29: 888255.859 ops/s
# Warmup Iteration  30: 883620.595 ops/s
Iteration   1: 884594.639 ops/s
Iteration   2: 888388.615 ops/s
Iteration   3: 888257.178 ops/s
Iteration   4: 884256.709 ops/s
Iteration   5: 888355.311 ops/s
Iteration   6: 889512.041 ops/s
Iteration   7: 887836.779 ops/s
Iteration   8: 888353.897 ops/s
Iteration   9: 885155.323 ops/s
Iteration  10: 886135.191 ops/s
Iteration  11: 888401.446 ops/s
Iteration  12: 892121.863 ops/s
Iteration  13: 880826.371 ops/s
Iteration  14: 890845.652 ops/s
Iteration  15: 886893.629 ops/s
Iteration  16: 885697.436 ops/s
Iteration  17: 886636.124 ops/s
Iteration  18: 887454.524 ops/s
Iteration  19: 890625.591 ops/s
Iteration  20: 883858.052 ops/s
Iteration  21: 884559.131 ops/s
Iteration  22: 887276.586 ops/s
Iteration  23: 871121.945 ops/s
Iteration  24: 871570.236 ops/s
Iteration  25: 890003.587 ops/s
Iteration  26: 891091.800 ops/s
Iteration  27: 875397.254 ops/s
Iteration  28: 888632.063 ops/s
Iteration  29: 888511.392 ops/s
Iteration  30: 891779.563 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_add":
  886138.331 ±(99.9%) 3508.982 ops/s [Average]
  (min, avg, max) = (871121.945, 886138.331, 892121.863), stdev = 5252.080
  CI (99.9%): [882629.349, 889647.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_add  thrpt   30  886138.331 ± 3508.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 609659.290 ops/s
# Warmup Iteration   2: 737944.927 ops/s
# Warmup Iteration   3: 929893.138 ops/s
# Warmup Iteration   4: 926088.368 ops/s
# Warmup Iteration   5: 925476.820 ops/s
# Warmup Iteration   6: 925405.676 ops/s
# Warmup Iteration   7: 923092.402 ops/s
# Warmup Iteration   8: 928548.849 ops/s
# Warmup Iteration   9: 786055.755 ops/s
# Warmup Iteration  10: 925761.138 ops/s
# Warmup Iteration  11: 929969.088 ops/s
# Warmup Iteration  12: 927162.403 ops/s
# Warmup Iteration  13: 924524.770 ops/s
# Warmup Iteration  14: 914586.845 ops/s
# Warmup Iteration  15: 927300.326 ops/s
# Warmup Iteration  16: 917801.513 ops/s
# Warmup Iteration  17: 974722.399 ops/s
# Warmup Iteration  18: 978856.213 ops/s
# Warmup Iteration  19: 975831.152 ops/s
# Warmup Iteration  20: 955675.853 ops/s
# Warmup Iteration  21: 981698.507 ops/s
# Warmup Iteration  22: 980692.472 ops/s
# Warmup Iteration  23: 973192.251 ops/s
# Warmup Iteration  24: 973117.469 ops/s
# Warmup Iteration  25: 979203.521 ops/s
# Warmup Iteration  26: 972707.026 ops/s
# Warmup Iteration  27: 974313.418 ops/s
# Warmup Iteration  28: 972446.204 ops/s
# Warmup Iteration  29: 972564.030 ops/s
# Warmup Iteration  30: 974553.040 ops/s
Iteration   1: 980750.314 ops/s
Iteration   2: 976432.696 ops/s
Iteration   3: 975576.422 ops/s
Iteration   4: 978503.409 ops/s
Iteration   5: 974708.622 ops/s
Iteration   6: 979530.483 ops/s
Iteration   7: 976771.279 ops/s
Iteration   8: 959820.051 ops/s
Iteration   9: 977481.073 ops/s
Iteration  10: 980702.616 ops/s
Iteration  11: 977245.520 ops/s
Iteration  12: 971779.783 ops/s
Iteration  13: 978547.161 ops/s
Iteration  14: 977236.627 ops/s
Iteration  15: 978041.782 ops/s
Iteration  16: 983486.610 ops/s
Iteration  17: 979041.060 ops/s
Iteration  18: 976800.549 ops/s
Iteration  19: 980237.808 ops/s
Iteration  20: 950523.561 ops/s
Iteration  21: 961746.230 ops/s
Iteration  22: 982465.530 ops/s
Iteration  23: 977564.175 ops/s
Iteration  24: 979452.164 ops/s
Iteration  25: 974707.724 ops/s
Iteration  26: 960002.257 ops/s
Iteration  27: 960920.514 ops/s
Iteration  28: 964817.489 ops/s
Iteration  29: 974869.033 ops/s
Iteration  30: 970007.027 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAll":
  973992.319 ±(99.9%) 5379.585 ops/s [Average]
  (min, avg, max) = (950523.561, 973992.319, 983486.610), stdev = 8051.910
  CI (99.9%): [968612.734, 979371.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAll  thrpt   30  973992.319 ± 5379.585  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 595710.602 ops/s
# Warmup Iteration   2: 709358.706 ops/s
# Warmup Iteration   3: 890241.791 ops/s
# Warmup Iteration   4: 894923.571 ops/s
# Warmup Iteration   5: 900878.561 ops/s
# Warmup Iteration   6: 900225.579 ops/s
# Warmup Iteration   7: 899928.915 ops/s
# Warmup Iteration   8: 884764.661 ops/s
# Warmup Iteration   9: 797172.596 ops/s
# Warmup Iteration  10: 855988.183 ops/s
# Warmup Iteration  11: 895066.463 ops/s
# Warmup Iteration  12: 900715.070 ops/s
# Warmup Iteration  13: 897607.406 ops/s
# Warmup Iteration  14: 892215.434 ops/s
# Warmup Iteration  15: 893175.813 ops/s
# Warmup Iteration  16: 897490.327 ops/s
# Warmup Iteration  17: 942545.197 ops/s
# Warmup Iteration  18: 939273.067 ops/s
# Warmup Iteration  19: 948329.445 ops/s
# Warmup Iteration  20: 942040.304 ops/s
# Warmup Iteration  21: 938663.302 ops/s
# Warmup Iteration  22: 940791.383 ops/s
# Warmup Iteration  23: 945141.878 ops/s
# Warmup Iteration  24: 939126.173 ops/s
# Warmup Iteration  25: 944397.690 ops/s
# Warmup Iteration  26: 942706.206 ops/s
# Warmup Iteration  27: 947552.366 ops/s
# Warmup Iteration  28: 939777.058 ops/s
# Warmup Iteration  29: 936938.841 ops/s
# Warmup Iteration  30: 952265.231 ops/s
Iteration   1: 936189.029 ops/s
Iteration   2: 939480.896 ops/s
Iteration   3: 943723.832 ops/s
Iteration   4: 951677.792 ops/s
Iteration   5: 946557.041 ops/s
Iteration   6: 944952.069 ops/s
Iteration   7: 951431.889 ops/s
Iteration   8: 936342.127 ops/s
Iteration   9: 949332.257 ops/s
Iteration  10: 935642.613 ops/s
Iteration  11: 946470.437 ops/s
Iteration  12: 945432.406 ops/s
Iteration  13: 935165.978 ops/s
Iteration  14: 952217.561 ops/s
Iteration  15: 940100.473 ops/s
Iteration  16: 944019.171 ops/s
Iteration  17: 934187.760 ops/s
Iteration  18: 937571.435 ops/s
Iteration  19: 939604.993 ops/s
Iteration  20: 943189.801 ops/s
Iteration  21: 949750.014 ops/s
Iteration  22: 931322.332 ops/s
Iteration  23: 940572.358 ops/s
Iteration  24: 954397.143 ops/s
Iteration  25: 944351.901 ops/s
Iteration  26: 942548.090 ops/s
Iteration  27: 951885.970 ops/s
Iteration  28: 945093.284 ops/s
Iteration  29: 950044.276 ops/s
Iteration  30: 934644.385 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllAtIndex":
  943263.310 ±(99.9%) 4250.210 ops/s [Average]
  (min, avg, max) = (931322.332, 943263.310, 954397.143), stdev = 6361.515
  CI (99.9%): [939013.100, 947513.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  943263.310 ± 4250.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607881.383 ops/s
# Warmup Iteration   2: 737297.729 ops/s
# Warmup Iteration   3: 913958.189 ops/s
# Warmup Iteration   4: 910418.644 ops/s
# Warmup Iteration   5: 902253.320 ops/s
# Warmup Iteration   6: 919945.352 ops/s
# Warmup Iteration   7: 904137.699 ops/s
# Warmup Iteration   8: 907301.941 ops/s
# Warmup Iteration   9: 770911.855 ops/s
# Warmup Iteration  10: 909114.779 ops/s
# Warmup Iteration  11: 902775.272 ops/s
# Warmup Iteration  12: 913815.321 ops/s
# Warmup Iteration  13: 912972.841 ops/s
# Warmup Iteration  14: 920494.350 ops/s
# Warmup Iteration  15: 908218.621 ops/s
# Warmup Iteration  16: 918017.539 ops/s
# Warmup Iteration  17: 958758.323 ops/s
# Warmup Iteration  18: 961587.217 ops/s
# Warmup Iteration  19: 961538.476 ops/s
# Warmup Iteration  20: 960494.664 ops/s
# Warmup Iteration  21: 956203.063 ops/s
# Warmup Iteration  22: 957346.336 ops/s
# Warmup Iteration  23: 954822.357 ops/s
# Warmup Iteration  24: 959898.285 ops/s
# Warmup Iteration  25: 957880.053 ops/s
# Warmup Iteration  26: 955472.979 ops/s
# Warmup Iteration  27: 963373.808 ops/s
# Warmup Iteration  28: 949823.215 ops/s
# Warmup Iteration  29: 961333.354 ops/s
# Warmup Iteration  30: 959483.342 ops/s
Iteration   1: 947509.852 ops/s
Iteration   2: 964064.768 ops/s
Iteration   3: 950418.146 ops/s
Iteration   4: 965433.429 ops/s
Iteration   5: 954865.304 ops/s
Iteration   6: 955922.718 ops/s
Iteration   7: 959461.527 ops/s
Iteration   8: 956808.921 ops/s
Iteration   9: 948970.876 ops/s
Iteration  10: 951636.567 ops/s
Iteration  11: 940964.822 ops/s
Iteration  12: 967621.664 ops/s
Iteration  13: 951443.830 ops/s
Iteration  14: 959940.251 ops/s
Iteration  15: 948532.206 ops/s
Iteration  16: 964342.944 ops/s
Iteration  17: 956332.106 ops/s
Iteration  18: 970338.189 ops/s
Iteration  19: 937229.766 ops/s
Iteration  20: 961791.938 ops/s
Iteration  21: 962807.242 ops/s
Iteration  22: 943964.748 ops/s
Iteration  23: 960636.883 ops/s
Iteration  24: 960097.889 ops/s
Iteration  25: 959332.758 ops/s
Iteration  26: 929386.985 ops/s
Iteration  27: 957004.119 ops/s
Iteration  28: 952404.566 ops/s
Iteration  29: 954400.424 ops/s
Iteration  30: 962331.213 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllIterable":
  955199.888 ±(99.9%) 6128.631 ops/s [Average]
  (min, avg, max) = (929386.985, 955199.888, 970338.189), stdev = 9173.047
  CI (99.9%): [949071.258, 961328.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAllIterable  thrpt   30  955199.888 ± 6128.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593002.728 ops/s
# Warmup Iteration   2: 718252.628 ops/s
# Warmup Iteration   3: 906464.063 ops/s
# Warmup Iteration   4: 890515.623 ops/s
# Warmup Iteration   5: 900273.550 ops/s
# Warmup Iteration   6: 904188.941 ops/s
# Warmup Iteration   7: 903058.883 ops/s
# Warmup Iteration   8: 892348.162 ops/s
# Warmup Iteration   9: 811738.380 ops/s
# Warmup Iteration  10: 860431.120 ops/s
# Warmup Iteration  11: 900949.986 ops/s
# Warmup Iteration  12: 899943.733 ops/s
# Warmup Iteration  13: 894981.152 ops/s
# Warmup Iteration  14: 898459.925 ops/s
# Warmup Iteration  15: 891508.735 ops/s
# Warmup Iteration  16: 893860.220 ops/s
# Warmup Iteration  17: 956815.597 ops/s
# Warmup Iteration  18: 949275.324 ops/s
# Warmup Iteration  19: 940078.908 ops/s
# Warmup Iteration  20: 938234.928 ops/s
# Warmup Iteration  21: 956404.477 ops/s
# Warmup Iteration  22: 956940.596 ops/s
# Warmup Iteration  23: 954953.495 ops/s
# Warmup Iteration  24: 956496.058 ops/s
# Warmup Iteration  25: 959686.110 ops/s
# Warmup Iteration  26: 950835.493 ops/s
# Warmup Iteration  27: 947242.488 ops/s
# Warmup Iteration  28: 957088.010 ops/s
# Warmup Iteration  29: 949834.059 ops/s
# Warmup Iteration  30: 951454.066 ops/s
Iteration   1: 938418.745 ops/s
Iteration   2: 959014.833 ops/s
Iteration   3: 957496.147 ops/s
Iteration   4: 955307.620 ops/s
Iteration   5: 940462.897 ops/s
Iteration   6: 956969.134 ops/s
Iteration   7: 945896.825 ops/s
Iteration   8: 958489.103 ops/s
Iteration   9: 959330.106 ops/s
Iteration  10: 940436.913 ops/s
Iteration  11: 955077.016 ops/s
Iteration  12: 951635.233 ops/s
Iteration  13: 947193.762 ops/s
Iteration  14: 956998.807 ops/s
Iteration  15: 955899.773 ops/s
Iteration  16: 959670.978 ops/s
Iteration  17: 957896.875 ops/s
Iteration  18: 953053.513 ops/s
Iteration  19: 942491.697 ops/s
Iteration  20: 963013.492 ops/s
Iteration  21: 956304.366 ops/s
Iteration  22: 956110.971 ops/s
Iteration  23: 955635.601 ops/s
Iteration  24: 956751.755 ops/s
Iteration  25: 954900.920 ops/s
Iteration  26: 954946.164 ops/s
Iteration  27: 959687.795 ops/s
Iteration  28: 955414.766 ops/s
Iteration  29: 954819.358 ops/s
Iteration  30: 956370.151 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAtIndex":
  953856.511 ±(99.9%) 4228.167 ops/s [Average]
  (min, avg, max) = (938418.745, 953856.511, 963013.492), stdev = 6328.522
  CI (99.9%): [949628.343, 958084.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_addAtIndex  thrpt   30  953856.511 ± 4228.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602035.257 ops/s
# Warmup Iteration   2: 726820.911 ops/s
# Warmup Iteration   3: 899607.826 ops/s
# Warmup Iteration   4: 896951.263 ops/s
# Warmup Iteration   5: 908031.843 ops/s
# Warmup Iteration   6: 909340.602 ops/s
# Warmup Iteration   7: 908987.706 ops/s
# Warmup Iteration   8: 903748.552 ops/s
# Warmup Iteration   9: 817551.118 ops/s
# Warmup Iteration  10: 862652.340 ops/s
# Warmup Iteration  11: 905622.373 ops/s
# Warmup Iteration  12: 911121.212 ops/s
# Warmup Iteration  13: 914029.914 ops/s
# Warmup Iteration  14: 908043.431 ops/s
# Warmup Iteration  15: 905762.620 ops/s
# Warmup Iteration  16: 909031.933 ops/s
# Warmup Iteration  17: 953805.565 ops/s
# Warmup Iteration  18: 961705.481 ops/s
# Warmup Iteration  19: 950897.308 ops/s
# Warmup Iteration  20: 947571.385 ops/s
# Warmup Iteration  21: 960627.064 ops/s
# Warmup Iteration  22: 949278.942 ops/s
# Warmup Iteration  23: 952986.608 ops/s
# Warmup Iteration  24: 959620.248 ops/s
# Warmup Iteration  25: 961005.764 ops/s
# Warmup Iteration  26: 955135.205 ops/s
# Warmup Iteration  27: 957660.815 ops/s
# Warmup Iteration  28: 940896.468 ops/s
# Warmup Iteration  29: 956208.408 ops/s
# Warmup Iteration  30: 956367.496 ops/s
Iteration   1: 956988.103 ops/s
Iteration   2: 958973.063 ops/s
Iteration   3: 953646.104 ops/s
Iteration   4: 960297.985 ops/s
Iteration   5: 956006.266 ops/s
Iteration   6: 957242.415 ops/s
Iteration   7: 956279.462 ops/s
Iteration   8: 959360.880 ops/s
Iteration   9: 942303.069 ops/s
Iteration  10: 956254.458 ops/s
Iteration  11: 957932.323 ops/s
Iteration  12: 958309.580 ops/s
Iteration  13: 941680.876 ops/s
Iteration  14: 961606.032 ops/s
Iteration  15: 929283.026 ops/s
Iteration  16: 954480.451 ops/s
Iteration  17: 959550.973 ops/s
Iteration  18: 958391.917 ops/s
Iteration  19: 956872.615 ops/s
Iteration  20: 942323.121 ops/s
Iteration  21: 951259.121 ops/s
Iteration  22: 962578.439 ops/s
Iteration  23: 952610.305 ops/s
Iteration  24: 957565.876 ops/s
Iteration  25: 951967.353 ops/s
Iteration  26: 930313.938 ops/s
Iteration  27: 960249.233 ops/s
Iteration  28: 957219.034 ops/s
Iteration  29: 939017.272 ops/s
Iteration  30: 956845.175 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_clear":
  953246.949 ±(99.9%) 5870.833 ops/s [Average]
  (min, avg, max) = (929283.026, 953246.949, 962578.439), stdev = 8787.187
  CI (99.9%): [947376.116, 959117.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_clear  thrpt   30  953246.949 ± 5870.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1123315.829 ops/s
# Warmup Iteration   2: 3387686.839 ops/s
# Warmup Iteration   3: 2893028.081 ops/s
# Warmup Iteration   4: 3441520.852 ops/s
# Warmup Iteration   5: 3443665.104 ops/s
# Warmup Iteration   6: 3420599.036 ops/s
# Warmup Iteration   7: 3416630.538 ops/s
# Warmup Iteration   8: 3388263.422 ops/s
# Warmup Iteration   9: 3426394.883 ops/s
# Warmup Iteration  10: 3443218.990 ops/s
# Warmup Iteration  11: 3440027.798 ops/s
# Warmup Iteration  12: 3419270.291 ops/s
# Warmup Iteration  13: 3431465.998 ops/s
# Warmup Iteration  14: 3447805.234 ops/s
# Warmup Iteration  15: 3430583.850 ops/s
# Warmup Iteration  16: 3434115.468 ops/s
# Warmup Iteration  17: 3409210.702 ops/s
# Warmup Iteration  18: 3414851.360 ops/s
# Warmup Iteration  19: 3440757.255 ops/s
# Warmup Iteration  20: 3420796.038 ops/s
# Warmup Iteration  21: 3381951.595 ops/s
# Warmup Iteration  22: 3438292.054 ops/s
# Warmup Iteration  23: 3406178.201 ops/s
# Warmup Iteration  24: 3429656.860 ops/s
# Warmup Iteration  25: 3448459.021 ops/s
# Warmup Iteration  26: 3440399.129 ops/s
# Warmup Iteration  27: 3439605.246 ops/s
# Warmup Iteration  28: 3427371.123 ops/s
# Warmup Iteration  29: 3404064.934 ops/s
# Warmup Iteration  30: 3416753.704 ops/s
Iteration   1: 3428378.194 ops/s
Iteration   2: 3446556.522 ops/s
Iteration   3: 3448690.536 ops/s
Iteration   4: 3419453.834 ops/s
Iteration   5: 3458244.640 ops/s
Iteration   6: 3432960.741 ops/s
Iteration   7: 3459536.371 ops/s
Iteration   8: 3451331.802 ops/s
Iteration   9: 3449155.961 ops/s
Iteration  10: 3444889.539 ops/s
Iteration  11: 3462752.025 ops/s
Iteration  12: 3435862.523 ops/s
Iteration  13: 3422467.251 ops/s
Iteration  14: 3427855.039 ops/s
Iteration  15: 3445552.234 ops/s
Iteration  16: 3460136.931 ops/s
Iteration  17: 3388006.704 ops/s
Iteration  18: 3431464.647 ops/s
Iteration  19: 3410079.514 ops/s
Iteration  20: 3431542.708 ops/s
Iteration  21: 3445759.518 ops/s
Iteration  22: 3429147.948 ops/s
Iteration  23: 3438059.197 ops/s
Iteration  24: 3450092.506 ops/s
Iteration  25: 3434547.116 ops/s
Iteration  26: 3436107.141 ops/s
Iteration  27: 3429541.174 ops/s
Iteration  28: 3410115.140 ops/s
Iteration  29: 3429672.227 ops/s
Iteration  30: 3444708.596 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collect":
  3436755.609 ±(99.9%) 11070.273 ops/s [Average]
  (min, avg, max) = (3388006.704, 3436755.609, 3462752.025), stdev = 16569.465
  CI (99.9%): [3425685.336, 3447825.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collect  thrpt   30  3436755.609 ± 11070.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2122148.399 ops/s
# Warmup Iteration   2: 5451498.016 ops/s
# Warmup Iteration   3: 4627657.195 ops/s
# Warmup Iteration   4: 5475564.704 ops/s
# Warmup Iteration   5: 5443269.184 ops/s
# Warmup Iteration   6: 5443574.076 ops/s
# Warmup Iteration   7: 5504595.468 ops/s
# Warmup Iteration   8: 5501729.185 ops/s
# Warmup Iteration   9: 5505427.968 ops/s
# Warmup Iteration  10: 5461729.322 ops/s
# Warmup Iteration  11: 5473081.932 ops/s
# Warmup Iteration  12: 5413175.526 ops/s
# Warmup Iteration  13: 5480725.827 ops/s
# Warmup Iteration  14: 5505729.449 ops/s
# Warmup Iteration  15: 5419531.815 ops/s
# Warmup Iteration  16: 5499138.524 ops/s
# Warmup Iteration  17: 5491394.922 ops/s
# Warmup Iteration  18: 5477113.293 ops/s
# Warmup Iteration  19: 5557566.328 ops/s
# Warmup Iteration  20: 5513629.744 ops/s
# Warmup Iteration  21: 5504134.610 ops/s
# Warmup Iteration  22: 5472412.810 ops/s
# Warmup Iteration  23: 5535028.511 ops/s
# Warmup Iteration  24: 5551498.633 ops/s
# Warmup Iteration  25: 5543104.878 ops/s
# Warmup Iteration  26: 5533797.236 ops/s
# Warmup Iteration  27: 5507182.252 ops/s
# Warmup Iteration  28: 5530348.072 ops/s
# Warmup Iteration  29: 5481430.330 ops/s
# Warmup Iteration  30: 5555250.924 ops/s
Iteration   1: 5560707.560 ops/s
Iteration   2: 5545118.865 ops/s
Iteration   3: 5530933.075 ops/s
Iteration   4: 5564517.839 ops/s
Iteration   5: 5531605.498 ops/s
Iteration   6: 5486688.238 ops/s
Iteration   7: 5542870.698 ops/s
Iteration   8: 5559968.346 ops/s
Iteration   9: 5541640.126 ops/s
Iteration  10: 5447512.877 ops/s
Iteration  11: 5518518.976 ops/s
Iteration  12: 5525244.069 ops/s
Iteration  13: 5540954.206 ops/s
Iteration  14: 5525087.673 ops/s
Iteration  15: 5487181.795 ops/s
Iteration  16: 5551093.278 ops/s
Iteration  17: 5519097.126 ops/s
Iteration  18: 5539163.852 ops/s
Iteration  19: 5530373.143 ops/s
Iteration  20: 5541594.346 ops/s
Iteration  21: 5538055.928 ops/s
Iteration  22: 5432852.686 ops/s
Iteration  23: 5548642.003 ops/s
Iteration  24: 5508815.231 ops/s
Iteration  25: 5499116.748 ops/s
Iteration  26: 5448623.083 ops/s
Iteration  27: 5532985.144 ops/s
Iteration  28: 5552364.891 ops/s
Iteration  29: 5539564.724 ops/s
Iteration  30: 5552575.211 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectBoolean":
  5524782.241 ±(99.9%) 22649.444 ops/s [Average]
  (min, avg, max) = (5432852.686, 5524782.241, 5564517.839), stdev = 33900.624
  CI (99.9%): [5502132.798, 5547431.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectBoolean  thrpt   30  5524782.241 ± 22649.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2235715.525 ops/s
# Warmup Iteration   2: 6190990.545 ops/s
# Warmup Iteration   3: 5184629.488 ops/s
# Warmup Iteration   4: 6150363.910 ops/s
# Warmup Iteration   5: 6083288.358 ops/s
# Warmup Iteration   6: 6068299.176 ops/s
# Warmup Iteration   7: 6154409.720 ops/s
# Warmup Iteration   8: 6122182.384 ops/s
# Warmup Iteration   9: 6131170.790 ops/s
# Warmup Iteration  10: 6074577.123 ops/s
# Warmup Iteration  11: 6142138.514 ops/s
# Warmup Iteration  12: 6073312.513 ops/s
# Warmup Iteration  13: 6122266.457 ops/s
# Warmup Iteration  14: 6141317.001 ops/s
# Warmup Iteration  15: 6155030.469 ops/s
# Warmup Iteration  16: 6111336.190 ops/s
# Warmup Iteration  17: 6179447.329 ops/s
# Warmup Iteration  18: 6168400.722 ops/s
# Warmup Iteration  19: 6190227.230 ops/s
# Warmup Iteration  20: 6184923.970 ops/s
# Warmup Iteration  21: 6176922.286 ops/s
# Warmup Iteration  22: 6167210.599 ops/s
# Warmup Iteration  23: 6203517.475 ops/s
# Warmup Iteration  24: 6218566.183 ops/s
# Warmup Iteration  25: 6192255.133 ops/s
# Warmup Iteration  26: 6153277.557 ops/s
# Warmup Iteration  27: 6182061.517 ops/s
# Warmup Iteration  28: 6213258.918 ops/s
# Warmup Iteration  29: 6182196.815 ops/s
# Warmup Iteration  30: 6184296.150 ops/s
Iteration   1: 6009443.313 ops/s
Iteration   2: 6172703.616 ops/s
Iteration   3: 6187523.638 ops/s
Iteration   4: 6177927.881 ops/s
Iteration   5: 6139813.099 ops/s
Iteration   6: 6234973.940 ops/s
Iteration   7: 6176866.415 ops/s
Iteration   8: 6177522.924 ops/s
Iteration   9: 6189488.427 ops/s
Iteration  10: 6191047.718 ops/s
Iteration  11: 6170543.723 ops/s
Iteration  12: 6229152.796 ops/s
Iteration  13: 6090143.373 ops/s
Iteration  14: 6248811.040 ops/s
Iteration  15: 6158999.846 ops/s
Iteration  16: 6193938.870 ops/s
Iteration  17: 6162925.461 ops/s
Iteration  18: 6133012.167 ops/s
Iteration  19: 6162158.679 ops/s
Iteration  20: 6151613.344 ops/s
Iteration  21: 6181422.931 ops/s
Iteration  22: 6186085.281 ops/s
Iteration  23: 6168374.584 ops/s
Iteration  24: 6012724.917 ops/s
Iteration  25: 6185938.358 ops/s
Iteration  26: 6209038.914 ops/s
Iteration  27: 6151319.236 ops/s
Iteration  28: 6171096.118 ops/s
Iteration  29: 6050150.812 ops/s
Iteration  30: 6201950.514 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectByte":
  6162557.065 ±(99.9%) 37588.511 ops/s [Average]
  (min, avg, max) = (6009443.313, 6162557.065, 6248811.040), stdev = 56260.718
  CI (99.9%): [6124968.554, 6200145.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectByte  thrpt   30  6162557.065 ± 37588.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2731497.603 ops/s
# Warmup Iteration   2: 6165686.440 ops/s
# Warmup Iteration   3: 5203758.653 ops/s
# Warmup Iteration   4: 6178242.413 ops/s
# Warmup Iteration   5: 6209128.935 ops/s
# Warmup Iteration   6: 6129697.142 ops/s
# Warmup Iteration   7: 6201574.166 ops/s
# Warmup Iteration   8: 6218547.758 ops/s
# Warmup Iteration   9: 6203175.364 ops/s
# Warmup Iteration  10: 6187953.516 ops/s
# Warmup Iteration  11: 6204396.403 ops/s
# Warmup Iteration  12: 6186679.496 ops/s
# Warmup Iteration  13: 6193791.545 ops/s
# Warmup Iteration  14: 6172176.180 ops/s
# Warmup Iteration  15: 6191058.455 ops/s
# Warmup Iteration  16: 6126665.383 ops/s
# Warmup Iteration  17: 6242231.293 ops/s
# Warmup Iteration  18: 6247050.286 ops/s
# Warmup Iteration  19: 6202868.418 ops/s
# Warmup Iteration  20: 6235009.701 ops/s
# Warmup Iteration  21: 6174737.791 ops/s
# Warmup Iteration  22: 6274166.721 ops/s
# Warmup Iteration  23: 6132416.491 ops/s
# Warmup Iteration  24: 6257442.700 ops/s
# Warmup Iteration  25: 6212164.773 ops/s
# Warmup Iteration  26: 6205805.998 ops/s
# Warmup Iteration  27: 6244980.807 ops/s
# Warmup Iteration  28: 6230483.759 ops/s
# Warmup Iteration  29: 6243487.582 ops/s
# Warmup Iteration  30: 6222796.888 ops/s
Iteration   1: 6229940.740 ops/s
Iteration   2: 6169006.196 ops/s
Iteration   3: 6220056.198 ops/s
Iteration   4: 6235343.155 ops/s
Iteration   5: 6117084.276 ops/s
Iteration   6: 6241714.842 ops/s
Iteration   7: 6227724.745 ops/s
Iteration   8: 6112371.214 ops/s
Iteration   9: 6230127.299 ops/s
Iteration  10: 6233316.252 ops/s
Iteration  11: 6178272.904 ops/s
Iteration  12: 6250128.692 ops/s
Iteration  13: 6128000.363 ops/s
Iteration  14: 6161107.242 ops/s
Iteration  15: 6112070.640 ops/s
Iteration  16: 6220273.213 ops/s
Iteration  17: 6268178.875 ops/s
Iteration  18: 6202605.813 ops/s
Iteration  19: 6205037.630 ops/s
Iteration  20: 6277677.003 ops/s
Iteration  21: 6250664.060 ops/s
Iteration  22: 6267314.406 ops/s
Iteration  23: 6216350.470 ops/s
Iteration  24: 6225552.113 ops/s
Iteration  25: 6241551.136 ops/s
Iteration  26: 6236716.759 ops/s
Iteration  27: 6154457.031 ops/s
Iteration  28: 6210377.376 ops/s
Iteration  29: 6206282.483 ops/s
Iteration  30: 6073377.104 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectChar":
  6203422.674 ±(99.9%) 35118.026 ops/s [Average]
  (min, avg, max) = (6073377.104, 6203422.674, 6277677.003), stdev = 52563.012
  CI (99.9%): [6168304.648, 6238540.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectChar  thrpt   30  6203422.674 ± 35118.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2755929.501 ops/s
# Warmup Iteration   2: 6159195.588 ops/s
# Warmup Iteration   3: 5232883.229 ops/s
# Warmup Iteration   4: 6307277.516 ops/s
# Warmup Iteration   5: 6267065.046 ops/s
# Warmup Iteration   6: 6227906.713 ops/s
# Warmup Iteration   7: 6126343.159 ops/s
# Warmup Iteration   8: 6286819.327 ops/s
# Warmup Iteration   9: 6208898.705 ops/s
# Warmup Iteration  10: 6259823.624 ops/s
# Warmup Iteration  11: 6211868.171 ops/s
# Warmup Iteration  12: 6285495.167 ops/s
# Warmup Iteration  13: 6250443.613 ops/s
# Warmup Iteration  14: 6259239.394 ops/s
# Warmup Iteration  15: 6290326.576 ops/s
# Warmup Iteration  16: 6314623.422 ops/s
# Warmup Iteration  17: 6341213.777 ops/s
# Warmup Iteration  18: 6328017.563 ops/s
# Warmup Iteration  19: 6297868.276 ops/s
# Warmup Iteration  20: 6315999.504 ops/s
# Warmup Iteration  21: 6190599.788 ops/s
# Warmup Iteration  22: 6320469.669 ops/s
# Warmup Iteration  23: 6271129.437 ops/s
# Warmup Iteration  24: 6315699.823 ops/s
# Warmup Iteration  25: 6287179.412 ops/s
# Warmup Iteration  26: 6281347.082 ops/s
# Warmup Iteration  27: 6265639.655 ops/s
# Warmup Iteration  28: 6319448.998 ops/s
# Warmup Iteration  29: 6292869.881 ops/s
# Warmup Iteration  30: 6261053.696 ops/s
Iteration   1: 6251521.643 ops/s
Iteration   2: 6334383.452 ops/s
Iteration   3: 6317801.642 ops/s
Iteration   4: 6319828.594 ops/s
Iteration   5: 6330689.338 ops/s
Iteration   6: 6359304.723 ops/s
Iteration   7: 6364955.411 ops/s
Iteration   8: 6323445.495 ops/s
Iteration   9: 6309525.350 ops/s
Iteration  10: 6361611.404 ops/s
Iteration  11: 6328846.092 ops/s
Iteration  12: 6318904.188 ops/s
Iteration  13: 6371700.594 ops/s
Iteration  14: 6297235.832 ops/s
Iteration  15: 6328877.234 ops/s
Iteration  16: 6320198.309 ops/s
Iteration  17: 6195074.844 ops/s
Iteration  18: 6326393.094 ops/s
Iteration  19: 6334256.241 ops/s
Iteration  20: 6252563.060 ops/s
Iteration  21: 6323476.783 ops/s
Iteration  22: 6352956.067 ops/s
Iteration  23: 6313929.190 ops/s
Iteration  24: 6245935.304 ops/s
Iteration  25: 6251200.864 ops/s
Iteration  26: 6272630.914 ops/s
Iteration  27: 6256951.285 ops/s
Iteration  28: 6300933.278 ops/s
Iteration  29: 6207647.532 ops/s
Iteration  30: 6352737.883 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectDouble":
  6307517.188 ±(99.9%) 30676.680 ops/s [Average]
  (min, avg, max) = (6195074.844, 6307517.188, 6371700.594), stdev = 45915.414
  CI (99.9%): [6276840.508, 6338193.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectDouble  thrpt   30  6307517.188 ± 30676.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2091186.629 ops/s
# Warmup Iteration   2: 6740075.556 ops/s
# Warmup Iteration   3: 5751795.450 ops/s
# Warmup Iteration   4: 6794601.883 ops/s
# Warmup Iteration   5: 6740898.010 ops/s
# Warmup Iteration   6: 6728361.985 ops/s
# Warmup Iteration   7: 6794702.289 ops/s
# Warmup Iteration   8: 6853005.358 ops/s
# Warmup Iteration   9: 6731506.467 ops/s
# Warmup Iteration  10: 6789189.502 ops/s
# Warmup Iteration  11: 6761494.518 ops/s
# Warmup Iteration  12: 6801104.096 ops/s
# Warmup Iteration  13: 6834902.023 ops/s
# Warmup Iteration  14: 6797062.737 ops/s
# Warmup Iteration  15: 6843768.787 ops/s
# Warmup Iteration  16: 6806526.094 ops/s
# Warmup Iteration  17: 6725109.884 ops/s
# Warmup Iteration  18: 6758489.733 ops/s
# Warmup Iteration  19: 6877596.478 ops/s
# Warmup Iteration  20: 6862961.995 ops/s
# Warmup Iteration  21: 6818688.429 ops/s
# Warmup Iteration  22: 6867004.304 ops/s
# Warmup Iteration  23: 6796489.565 ops/s
# Warmup Iteration  24: 6859039.417 ops/s
# Warmup Iteration  25: 6877204.250 ops/s
# Warmup Iteration  26: 6778133.964 ops/s
# Warmup Iteration  27: 6847065.722 ops/s
# Warmup Iteration  28: 6801543.052 ops/s
# Warmup Iteration  29: 6811638.123 ops/s
# Warmup Iteration  30: 6850820.896 ops/s
Iteration   1: 6810532.727 ops/s
Iteration   2: 6784397.457 ops/s
Iteration   3: 6803704.093 ops/s
Iteration   4: 6842538.089 ops/s
Iteration   5: 6846728.550 ops/s
Iteration   6: 6865126.861 ops/s
Iteration   7: 6869161.256 ops/s
Iteration   8: 6869082.564 ops/s
Iteration   9: 6867433.110 ops/s
Iteration  10: 6845004.010 ops/s
Iteration  11: 6889613.947 ops/s
Iteration  12: 6885900.529 ops/s
Iteration  13: 6878179.288 ops/s
Iteration  14: 6810086.233 ops/s
Iteration  15: 6856783.933 ops/s
Iteration  16: 6843712.335 ops/s
Iteration  17: 6777829.811 ops/s
Iteration  18: 6864408.512 ops/s
Iteration  19: 6861950.816 ops/s
Iteration  20: 6833163.749 ops/s
Iteration  21: 6803917.683 ops/s
Iteration  22: 6884503.536 ops/s
Iteration  23: 6685445.454 ops/s
Iteration  24: 6863254.280 ops/s
Iteration  25: 6845994.954 ops/s
Iteration  26: 6717639.476 ops/s
Iteration  27: 6656578.071 ops/s
Iteration  28: 6874595.508 ops/s
Iteration  29: 6848045.927 ops/s
Iteration  30: 6849873.297 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectFloat":
  6831172.869 ±(99.9%) 38444.999 ops/s [Average]
  (min, avg, max) = (6656578.071, 6831172.869, 6889613.947), stdev = 57542.669
  CI (99.9%): [6792727.869, 6869617.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectFloat  thrpt   30  6831172.869 ± 38444.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1209393.085 ops/s
# Warmup Iteration   2: 3679739.838 ops/s
# Warmup Iteration   3: 3176509.009 ops/s
# Warmup Iteration   4: 3725636.735 ops/s
# Warmup Iteration   5: 3705363.988 ops/s
# Warmup Iteration   6: 3732178.634 ops/s
# Warmup Iteration   7: 3721079.143 ops/s
# Warmup Iteration   8: 3715990.325 ops/s
# Warmup Iteration   9: 3741564.261 ops/s
# Warmup Iteration  10: 3733746.226 ops/s
# Warmup Iteration  11: 3699456.695 ops/s
# Warmup Iteration  12: 3716910.512 ops/s
# Warmup Iteration  13: 3741036.974 ops/s
# Warmup Iteration  14: 3702135.124 ops/s
# Warmup Iteration  15: 3712761.666 ops/s
# Warmup Iteration  16: 3746209.650 ops/s
# Warmup Iteration  17: 3718151.961 ops/s
# Warmup Iteration  18: 3677969.576 ops/s
# Warmup Iteration  19: 3710378.102 ops/s
# Warmup Iteration  20: 3702850.146 ops/s
# Warmup Iteration  21: 3703158.060 ops/s
# Warmup Iteration  22: 3678257.337 ops/s
# Warmup Iteration  23: 3672906.788 ops/s
# Warmup Iteration  24: 3697610.990 ops/s
# Warmup Iteration  25: 3682942.796 ops/s
# Warmup Iteration  26: 3682654.280 ops/s
# Warmup Iteration  27: 3709218.600 ops/s
# Warmup Iteration  28: 3724226.951 ops/s
# Warmup Iteration  29: 3704342.131 ops/s
# Warmup Iteration  30: 3686583.213 ops/s
Iteration   1: 3654238.865 ops/s
Iteration   2: 3652525.931 ops/s
Iteration   3: 3698062.782 ops/s
Iteration   4: 3696461.063 ops/s
Iteration   5: 3696737.360 ops/s
Iteration   6: 3693433.250 ops/s
Iteration   7: 3720150.729 ops/s
Iteration   8: 3697987.534 ops/s
Iteration   9: 3709604.352 ops/s
Iteration  10: 3715653.517 ops/s
Iteration  11: 3668515.531 ops/s
Iteration  12: 3718888.903 ops/s
Iteration  13: 3716635.640 ops/s
Iteration  14: 3704500.567 ops/s
Iteration  15: 3727134.769 ops/s
Iteration  16: 3701727.970 ops/s
Iteration  17: 3704388.110 ops/s
Iteration  18: 3705306.432 ops/s
Iteration  19: 3699285.849 ops/s
Iteration  20: 3712817.547 ops/s
Iteration  21: 3726428.466 ops/s
Iteration  22: 3731802.905 ops/s
Iteration  23: 3713145.655 ops/s
Iteration  24: 3713488.349 ops/s
Iteration  25: 3648263.129 ops/s
Iteration  26: 3720842.237 ops/s
Iteration  27: 3699318.193 ops/s
Iteration  28: 3705059.244 ops/s
Iteration  29: 3664011.412 ops/s
Iteration  30: 3713052.210 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectIf":
  3700982.283 ±(99.9%) 14887.976 ops/s [Average]
  (min, avg, max) = (3648263.129, 3700982.283, 3731802.905), stdev = 22283.623
  CI (99.9%): [3686094.308, 3715870.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectIf  thrpt   30  3700982.283 ± 14887.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2080871.863 ops/s
# Warmup Iteration   2: 6132261.924 ops/s
# Warmup Iteration   3: 5233904.075 ops/s
# Warmup Iteration   4: 6143144.430 ops/s
# Warmup Iteration   5: 6227474.791 ops/s
# Warmup Iteration   6: 6224747.796 ops/s
# Warmup Iteration   7: 6214659.130 ops/s
# Warmup Iteration   8: 6220848.135 ops/s
# Warmup Iteration   9: 6184014.729 ops/s
# Warmup Iteration  10: 6229879.549 ops/s
# Warmup Iteration  11: 6179276.064 ops/s
# Warmup Iteration  12: 6213622.868 ops/s
# Warmup Iteration  13: 6174302.973 ops/s
# Warmup Iteration  14: 6185678.840 ops/s
# Warmup Iteration  15: 6121482.858 ops/s
# Warmup Iteration  16: 6212361.329 ops/s
# Warmup Iteration  17: 6277209.875 ops/s
# Warmup Iteration  18: 6265405.537 ops/s
# Warmup Iteration  19: 6230383.966 ops/s
# Warmup Iteration  20: 6282534.848 ops/s
# Warmup Iteration  21: 6285497.460 ops/s
# Warmup Iteration  22: 6268601.475 ops/s
# Warmup Iteration  23: 6256124.005 ops/s
# Warmup Iteration  24: 6275989.703 ops/s
# Warmup Iteration  25: 6266252.998 ops/s
# Warmup Iteration  26: 6270105.451 ops/s
# Warmup Iteration  27: 6240221.723 ops/s
# Warmup Iteration  28: 6226697.096 ops/s
# Warmup Iteration  29: 6261167.791 ops/s
# Warmup Iteration  30: 6221749.438 ops/s
Iteration   1: 6219228.621 ops/s
Iteration   2: 6267120.895 ops/s
Iteration   3: 6302532.055 ops/s
Iteration   4: 6299500.597 ops/s
Iteration   5: 6256507.394 ops/s
Iteration   6: 6294674.166 ops/s
Iteration   7: 6309255.253 ops/s
Iteration   8: 6304947.671 ops/s
Iteration   9: 6176985.239 ops/s
Iteration  10: 6246052.224 ops/s
Iteration  11: 6246484.314 ops/s
Iteration  12: 6324944.258 ops/s
Iteration  13: 6282409.598 ops/s
Iteration  14: 6178449.661 ops/s
Iteration  15: 6300191.993 ops/s
Iteration  16: 6268647.629 ops/s
Iteration  17: 6266812.656 ops/s
Iteration  18: 6261971.336 ops/s
Iteration  19: 6256172.763 ops/s
Iteration  20: 6204282.076 ops/s
Iteration  21: 6133737.263 ops/s
Iteration  22: 6284828.754 ops/s
Iteration  23: 6120562.273 ops/s
Iteration  24: 6286306.105 ops/s
Iteration  25: 6166628.412 ops/s
Iteration  26: 6259384.612 ops/s
Iteration  27: 6174897.712 ops/s
Iteration  28: 6281839.225 ops/s
Iteration  29: 6304652.098 ops/s
Iteration  30: 6300685.696 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectInt":
  6252689.752 ±(99.9%) 37099.386 ops/s [Average]
  (min, avg, max) = (6120562.273, 6252689.752, 6324944.258), stdev = 55528.619
  CI (99.9%): [6215590.365, 6289789.138] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectInt  thrpt   30  6252689.752 ± 37099.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2075092.232 ops/s
# Warmup Iteration   2: 6880049.359 ops/s
# Warmup Iteration   3: 5743203.236 ops/s
# Warmup Iteration   4: 6905420.727 ops/s
# Warmup Iteration   5: 6927695.574 ops/s
# Warmup Iteration   6: 6868817.030 ops/s
# Warmup Iteration   7: 6924230.886 ops/s
# Warmup Iteration   8: 6845728.816 ops/s
# Warmup Iteration   9: 6919868.191 ops/s
# Warmup Iteration  10: 6899244.718 ops/s
# Warmup Iteration  11: 6867692.581 ops/s
# Warmup Iteration  12: 6887024.815 ops/s
# Warmup Iteration  13: 6899646.367 ops/s
# Warmup Iteration  14: 6911276.909 ops/s
# Warmup Iteration  15: 6820525.527 ops/s
# Warmup Iteration  16: 6922425.017 ops/s
# Warmup Iteration  17: 6880829.949 ops/s
# Warmup Iteration  18: 6832478.363 ops/s
# Warmup Iteration  19: 6902504.783 ops/s
# Warmup Iteration  20: 6944183.573 ops/s
# Warmup Iteration  21: 6909402.437 ops/s
# Warmup Iteration  22: 6929189.185 ops/s
# Warmup Iteration  23: 6872726.941 ops/s
# Warmup Iteration  24: 6816416.356 ops/s
# Warmup Iteration  25: 6878349.853 ops/s
# Warmup Iteration  26: 6903810.661 ops/s
# Warmup Iteration  27: 6828645.657 ops/s
# Warmup Iteration  28: 6854471.230 ops/s
# Warmup Iteration  29: 6907827.851 ops/s
# Warmup Iteration  30: 6909859.614 ops/s
Iteration   1: 6918817.476 ops/s
Iteration   2: 6921230.913 ops/s
Iteration   3: 6775621.087 ops/s
Iteration   4: 6908472.082 ops/s
Iteration   5: 6938580.780 ops/s
Iteration   6: 6916954.680 ops/s
Iteration   7: 6909177.911 ops/s
Iteration   8: 6909050.656 ops/s
Iteration   9: 6825218.917 ops/s
Iteration  10: 6913982.046 ops/s
Iteration  11: 6948637.828 ops/s
Iteration  12: 6931445.134 ops/s
Iteration  13: 6948886.683 ops/s
Iteration  14: 6916763.772 ops/s
Iteration  15: 6903113.626 ops/s
Iteration  16: 6915662.105 ops/s
Iteration  17: 6916179.005 ops/s
Iteration  18: 6893962.522 ops/s
Iteration  19: 6929572.879 ops/s
Iteration  20: 6936474.051 ops/s
Iteration  21: 6902615.116 ops/s
Iteration  22: 6787576.347 ops/s
Iteration  23: 6908231.751 ops/s
Iteration  24: 6893627.896 ops/s
Iteration  25: 6929944.074 ops/s
Iteration  26: 6937600.792 ops/s
Iteration  27: 6915713.854 ops/s
Iteration  28: 6902397.252 ops/s
Iteration  29: 6894848.868 ops/s
Iteration  30: 6806603.272 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectLong":
  6901898.779 ±(99.9%) 29573.092 ops/s [Average]
  (min, avg, max) = (6775621.087, 6901898.779, 6948886.683), stdev = 44263.616
  CI (99.9%): [6872325.687, 6931471.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectLong  thrpt   30  6901898.779 ± 29573.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2609720.452 ops/s
# Warmup Iteration   2: 6150163.455 ops/s
# Warmup Iteration   3: 5232955.849 ops/s
# Warmup Iteration   4: 6197859.319 ops/s
# Warmup Iteration   5: 6048003.137 ops/s
# Warmup Iteration   6: 6139871.014 ops/s
# Warmup Iteration   7: 6194051.069 ops/s
# Warmup Iteration   8: 6197745.268 ops/s
# Warmup Iteration   9: 6149802.235 ops/s
# Warmup Iteration  10: 6230896.272 ops/s
# Warmup Iteration  11: 6198289.282 ops/s
# Warmup Iteration  12: 6192260.966 ops/s
# Warmup Iteration  13: 6215261.184 ops/s
# Warmup Iteration  14: 6213446.052 ops/s
# Warmup Iteration  15: 6174645.979 ops/s
# Warmup Iteration  16: 6162827.057 ops/s
# Warmup Iteration  17: 6292166.257 ops/s
# Warmup Iteration  18: 6282945.569 ops/s
# Warmup Iteration  19: 6283147.242 ops/s
# Warmup Iteration  20: 6243588.044 ops/s
# Warmup Iteration  21: 6213401.059 ops/s
# Warmup Iteration  22: 6232163.955 ops/s
# Warmup Iteration  23: 6255323.487 ops/s
# Warmup Iteration  24: 6290159.931 ops/s
# Warmup Iteration  25: 6182709.915 ops/s
# Warmup Iteration  26: 6223420.334 ops/s
# Warmup Iteration  27: 6284248.010 ops/s
# Warmup Iteration  28: 6143519.930 ops/s
# Warmup Iteration  29: 6268311.760 ops/s
# Warmup Iteration  30: 6222019.045 ops/s
Iteration   1: 6243534.434 ops/s
Iteration   2: 6292202.199 ops/s
Iteration   3: 6248146.873 ops/s
Iteration   4: 6257937.444 ops/s
Iteration   5: 6296259.818 ops/s
Iteration   6: 6259416.473 ops/s
Iteration   7: 6288747.234 ops/s
Iteration   8: 6280344.034 ops/s
Iteration   9: 6193264.576 ops/s
Iteration  10: 6300575.276 ops/s
Iteration  11: 6223143.679 ops/s
Iteration  12: 6197437.007 ops/s
Iteration  13: 6294787.054 ops/s
Iteration  14: 6259833.512 ops/s
Iteration  15: 6187405.521 ops/s
Iteration  16: 6157698.317 ops/s
Iteration  17: 6256063.568 ops/s
Iteration  18: 6271512.674 ops/s
Iteration  19: 6290266.401 ops/s
Iteration  20: 6221974.577 ops/s
Iteration  21: 6253896.382 ops/s
Iteration  22: 6247053.552 ops/s
Iteration  23: 6231239.533 ops/s
Iteration  24: 6226055.074 ops/s
Iteration  25: 6263168.913 ops/s
Iteration  26: 6144526.456 ops/s
Iteration  27: 6150300.907 ops/s
Iteration  28: 6109564.873 ops/s
Iteration  29: 6271538.884 ops/s
Iteration  30: 6259799.400 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectShort":
  6239256.488 ±(99.9%) 33348.920 ops/s [Average]
  (min, avg, max) = (6109564.873, 6239256.488, 6300575.276), stdev = 49915.097
  CI (99.9%): [6205907.568, 6272605.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectShort  thrpt   30  6239256.488 ± 33348.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103394.406 ops/s
# Warmup Iteration   2: 3387272.205 ops/s
# Warmup Iteration   3: 2867401.334 ops/s
# Warmup Iteration   4: 3431513.392 ops/s
# Warmup Iteration   5: 3394370.865 ops/s
# Warmup Iteration   6: 3425444.894 ops/s
# Warmup Iteration   7: 3431115.008 ops/s
# Warmup Iteration   8: 3418559.115 ops/s
# Warmup Iteration   9: 3433093.839 ops/s
# Warmup Iteration  10: 3439355.177 ops/s
# Warmup Iteration  11: 3384891.080 ops/s
# Warmup Iteration  12: 3422185.470 ops/s
# Warmup Iteration  13: 3414005.673 ops/s
# Warmup Iteration  14: 3382597.894 ops/s
# Warmup Iteration  15: 3435828.721 ops/s
# Warmup Iteration  16: 3404528.749 ops/s
# Warmup Iteration  17: 3413958.363 ops/s
# Warmup Iteration  18: 3422351.016 ops/s
# Warmup Iteration  19: 3429210.390 ops/s
# Warmup Iteration  20: 3400012.221 ops/s
# Warmup Iteration  21: 3407329.406 ops/s
# Warmup Iteration  22: 3390913.332 ops/s
# Warmup Iteration  23: 3379954.236 ops/s
# Warmup Iteration  24: 3413998.661 ops/s
# Warmup Iteration  25: 3430079.819 ops/s
# Warmup Iteration  26: 3404068.505 ops/s
# Warmup Iteration  27: 3396878.382 ops/s
# Warmup Iteration  28: 3406863.070 ops/s
# Warmup Iteration  29: 3419719.487 ops/s
# Warmup Iteration  30: 3407025.412 ops/s
Iteration   1: 3378739.383 ops/s
Iteration   2: 3435079.351 ops/s
Iteration   3: 3427167.224 ops/s
Iteration   4: 3386206.821 ops/s
Iteration   5: 3402126.617 ops/s
Iteration   6: 3379948.491 ops/s
Iteration   7: 3436287.252 ops/s
Iteration   8: 3398080.681 ops/s
Iteration   9: 3402221.519 ops/s
Iteration  10: 3304834.753 ops/s
Iteration  11: 3362506.688 ops/s
Iteration  12: 3376959.328 ops/s
Iteration  13: 3356301.291 ops/s
Iteration  14: 3396108.140 ops/s
Iteration  15: 3355673.703 ops/s
Iteration  16: 3408868.725 ops/s
Iteration  17: 3347532.787 ops/s
Iteration  18: 3427527.602 ops/s
Iteration  19: 3409098.378 ops/s
Iteration  20: 3406779.133 ops/s
Iteration  21: 3422321.604 ops/s
Iteration  22: 3428276.403 ops/s
Iteration  23: 3426849.630 ops/s
Iteration  24: 3428848.894 ops/s
Iteration  25: 3420219.656 ops/s
Iteration  26: 3435489.486 ops/s
Iteration  27: 3363056.440 ops/s
Iteration  28: 3384142.099 ops/s
Iteration  29: 3412430.298 ops/s
Iteration  30: 3426070.023 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectWith":
  3398191.747 ±(99.9%) 21422.437 ops/s [Average]
  (min, avg, max) = (3304834.753, 3398191.747, 3436287.252), stdev = 32064.098
  CI (99.9%): [3376769.309, 3419614.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_collectWith  thrpt   30  3398191.747 ± 21422.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1693503.150 ops/s
# Warmup Iteration   2: 4163770.787 ops/s
# Warmup Iteration   3: 3467941.023 ops/s
# Warmup Iteration   4: 4153496.294 ops/s
# Warmup Iteration   5: 4168882.928 ops/s
# Warmup Iteration   6: 4162666.155 ops/s
# Warmup Iteration   7: 4198631.080 ops/s
# Warmup Iteration   8: 4194569.277 ops/s
# Warmup Iteration   9: 4196081.394 ops/s
# Warmup Iteration  10: 4209836.578 ops/s
# Warmup Iteration  11: 4212305.863 ops/s
# Warmup Iteration  12: 4178109.192 ops/s
# Warmup Iteration  13: 4146987.322 ops/s
# Warmup Iteration  14: 4183562.110 ops/s
# Warmup Iteration  15: 4197232.255 ops/s
# Warmup Iteration  16: 4182577.070 ops/s
# Warmup Iteration  17: 4199441.288 ops/s
# Warmup Iteration  18: 4145367.183 ops/s
# Warmup Iteration  19: 4206701.579 ops/s
# Warmup Iteration  20: 4196918.551 ops/s
# Warmup Iteration  21: 4178790.008 ops/s
# Warmup Iteration  22: 4167095.451 ops/s
# Warmup Iteration  23: 4208274.980 ops/s
# Warmup Iteration  24: 4203530.720 ops/s
# Warmup Iteration  25: 4194746.858 ops/s
# Warmup Iteration  26: 4209868.049 ops/s
# Warmup Iteration  27: 4185100.907 ops/s
# Warmup Iteration  28: 4211454.447 ops/s
# Warmup Iteration  29: 4221091.593 ops/s
# Warmup Iteration  30: 4215801.509 ops/s
Iteration   1: 4170345.739 ops/s
Iteration   2: 4202732.166 ops/s
Iteration   3: 4155164.077 ops/s
Iteration   4: 4217710.846 ops/s
Iteration   5: 4141518.885 ops/s
Iteration   6: 4210542.884 ops/s
Iteration   7: 4207543.977 ops/s
Iteration   8: 4160965.243 ops/s
Iteration   9: 4227793.056 ops/s
Iteration  10: 4189160.086 ops/s
Iteration  11: 4138943.472 ops/s
Iteration  12: 4214394.895 ops/s
Iteration  13: 4207785.430 ops/s
Iteration  14: 4214584.331 ops/s
Iteration  15: 4211562.854 ops/s
Iteration  16: 4194617.899 ops/s
Iteration  17: 4196025.124 ops/s
Iteration  18: 4225160.153 ops/s
Iteration  19: 4222472.713 ops/s
Iteration  20: 4191728.539 ops/s
Iteration  21: 4196956.944 ops/s
Iteration  22: 4191736.982 ops/s
Iteration  23: 4220072.405 ops/s
Iteration  24: 4195107.536 ops/s
Iteration  25: 4183889.424 ops/s
Iteration  26: 4216042.831 ops/s
Iteration  27: 4132607.510 ops/s
Iteration  28: 4129250.963 ops/s
Iteration  29: 4179779.174 ops/s
Iteration  30: 4144721.262 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_corresponds":
  4189697.247 ±(99.9%) 19871.632 ops/s [Average]
  (min, avg, max) = (4129250.963, 4189697.247, 4227793.056), stdev = 29742.926
  CI (99.9%): [4169825.614, 4209568.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_corresponds  thrpt   30  4189697.247 ± 19871.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4767827.794 ops/s
# Warmup Iteration   2: 10546049.678 ops/s
# Warmup Iteration   3: 8980828.083 ops/s
# Warmup Iteration   4: 10570383.623 ops/s
# Warmup Iteration   5: 10547694.749 ops/s
# Warmup Iteration   6: 10570072.842 ops/s
# Warmup Iteration   7: 10600098.300 ops/s
# Warmup Iteration   8: 10534379.373 ops/s
# Warmup Iteration   9: 10499459.280 ops/s
# Warmup Iteration  10: 10583455.301 ops/s
# Warmup Iteration  11: 10600874.612 ops/s
# Warmup Iteration  12: 10502908.657 ops/s
# Warmup Iteration  13: 10535853.085 ops/s
# Warmup Iteration  14: 10566631.424 ops/s
# Warmup Iteration  15: 10503246.868 ops/s
# Warmup Iteration  16: 10554622.210 ops/s
# Warmup Iteration  17: 10776447.976 ops/s
# Warmup Iteration  18: 10719481.342 ops/s
# Warmup Iteration  19: 10699291.540 ops/s
# Warmup Iteration  20: 10706566.602 ops/s
# Warmup Iteration  21: 10656837.180 ops/s
# Warmup Iteration  22: 10622489.360 ops/s
# Warmup Iteration  23: 10727840.443 ops/s
# Warmup Iteration  24: 10722300.531 ops/s
# Warmup Iteration  25: 10665467.687 ops/s
# Warmup Iteration  26: 10748393.870 ops/s
# Warmup Iteration  27: 10737276.672 ops/s
# Warmup Iteration  28: 10725088.605 ops/s
# Warmup Iteration  29: 10634425.930 ops/s
# Warmup Iteration  30: 10771770.412 ops/s
Iteration   1: 10721661.924 ops/s
Iteration   2: 10658832.193 ops/s
Iteration   3: 10751136.045 ops/s
Iteration   4: 10675276.310 ops/s
Iteration   5: 10753756.508 ops/s
Iteration   6: 10718378.801 ops/s
Iteration   7: 10692843.868 ops/s
Iteration   8: 10510063.095 ops/s
Iteration   9: 10650859.184 ops/s
Iteration  10: 10618059.944 ops/s
Iteration  11: 10797822.594 ops/s
Iteration  12: 10693106.613 ops/s
Iteration  13: 10687564.603 ops/s
Iteration  14: 10705399.220 ops/s
Iteration  15: 10619764.799 ops/s
Iteration  16: 10759603.475 ops/s
Iteration  17: 10698252.679 ops/s
Iteration  18: 10798800.048 ops/s
Iteration  19: 10709917.680 ops/s
Iteration  20: 10775183.192 ops/s
Iteration  21: 10762185.459 ops/s
Iteration  22: 10743291.221 ops/s
Iteration  23: 10779028.583 ops/s
Iteration  24: 10736259.436 ops/s
Iteration  25: 10761033.351 ops/s
Iteration  26: 10774088.415 ops/s
Iteration  27: 10486807.692 ops/s
Iteration  28: 10535565.749 ops/s
Iteration  29: 10742845.367 ops/s
Iteration  30: 10694048.422 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectIndex":
  10700381.216 ±(99.9%) 53514.093 ops/s [Average]
  (min, avg, max) = (10486807.692, 10700381.216, 10798800.048), stdev = 80097.381
  CI (99.9%): [10646867.123, 10753895.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectIndex  thrpt   30  10700381.216 ± 53514.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4774322.965 ops/s
# Warmup Iteration   2: 10702278.460 ops/s
# Warmup Iteration   3: 9139397.655 ops/s
# Warmup Iteration   4: 10770823.957 ops/s
# Warmup Iteration   5: 10713558.531 ops/s
# Warmup Iteration   6: 10774743.903 ops/s
# Warmup Iteration   7: 10766264.589 ops/s
# Warmup Iteration   8: 10521471.395 ops/s
# Warmup Iteration   9: 10770680.574 ops/s
# Warmup Iteration  10: 10796206.050 ops/s
# Warmup Iteration  11: 10744486.213 ops/s
# Warmup Iteration  12: 10764032.446 ops/s
# Warmup Iteration  13: 10682122.223 ops/s
# Warmup Iteration  14: 10785925.444 ops/s
# Warmup Iteration  15: 10732973.861 ops/s
# Warmup Iteration  16: 10784418.162 ops/s
# Warmup Iteration  17: 10758216.284 ops/s
# Warmup Iteration  18: 10995246.947 ops/s
# Warmup Iteration  19: 11005425.328 ops/s
# Warmup Iteration  20: 10882147.970 ops/s
# Warmup Iteration  21: 10964895.590 ops/s
# Warmup Iteration  22: 10995367.299 ops/s
# Warmup Iteration  23: 10986717.430 ops/s
# Warmup Iteration  24: 10951768.129 ops/s
# Warmup Iteration  25: 10810150.655 ops/s
# Warmup Iteration  26: 10875661.808 ops/s
# Warmup Iteration  27: 10954109.067 ops/s
# Warmup Iteration  28: 10908795.185 ops/s
# Warmup Iteration  29: 10990907.534 ops/s
# Warmup Iteration  30: 10962464.089 ops/s
Iteration   1: 10965156.614 ops/s
Iteration   2: 10782421.892 ops/s
Iteration   3: 10898240.739 ops/s
Iteration   4: 10988834.753 ops/s
Iteration   5: 10965132.419 ops/s
Iteration   6: 10955626.205 ops/s
Iteration   7: 10941485.468 ops/s
Iteration   8: 10971544.031 ops/s
Iteration   9: 11016442.190 ops/s
Iteration  10: 10965914.897 ops/s
Iteration  11: 10662918.473 ops/s
Iteration  12: 10984561.848 ops/s
Iteration  13: 10857635.142 ops/s
Iteration  14: 10957096.264 ops/s
Iteration  15: 10978201.248 ops/s
Iteration  16: 10768979.289 ops/s
Iteration  17: 11029555.731 ops/s
Iteration  18: 10738311.255 ops/s
Iteration  19: 10788861.399 ops/s
Iteration  20: 10863404.384 ops/s
Iteration  21: 10931665.555 ops/s
Iteration  22: 11006273.440 ops/s
Iteration  23: 10757590.038 ops/s
Iteration  24: 11007652.684 ops/s
Iteration  25: 10955559.821 ops/s
Iteration  26: 10775597.230 ops/s
Iteration  27: 10969598.923 ops/s
Iteration  28: 10990281.457 ops/s
Iteration  29: 10773536.307 ops/s
Iteration  30: 10847386.900 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectLastIndex":
  10903182.220 ±(99.9%) 68014.560 ops/s [Average]
  (min, avg, max) = (10662918.473, 10903182.220, 11029555.731), stdev = 101800.999
  CI (99.9%): [10835167.660, 10971196.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  10903182.220 ± 68014.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980845.814 ops/s
# Warmup Iteration   2: 3042918.436 ops/s
# Warmup Iteration   3: 2961311.577 ops/s
# Warmup Iteration   4: 2670083.380 ops/s
# Warmup Iteration   5: 3043320.065 ops/s
# Warmup Iteration   6: 3069786.229 ops/s
# Warmup Iteration   7: 3077175.346 ops/s
# Warmup Iteration   8: 3053880.851 ops/s
# Warmup Iteration   9: 3055567.000 ops/s
# Warmup Iteration  10: 3082275.616 ops/s
# Warmup Iteration  11: 3054604.938 ops/s
# Warmup Iteration  12: 3061723.167 ops/s
# Warmup Iteration  13: 3088508.898 ops/s
# Warmup Iteration  14: 3052100.671 ops/s
# Warmup Iteration  15: 3069641.991 ops/s
# Warmup Iteration  16: 3045998.810 ops/s
# Warmup Iteration  17: 3041592.131 ops/s
# Warmup Iteration  18: 3024650.701 ops/s
# Warmup Iteration  19: 3045461.570 ops/s
# Warmup Iteration  20: 3064799.979 ops/s
# Warmup Iteration  21: 3056036.665 ops/s
# Warmup Iteration  22: 3054734.647 ops/s
# Warmup Iteration  23: 3072739.433 ops/s
# Warmup Iteration  24: 3068483.498 ops/s
# Warmup Iteration  25: 3064132.646 ops/s
# Warmup Iteration  26: 3067760.913 ops/s
# Warmup Iteration  27: 3063089.663 ops/s
# Warmup Iteration  28: 3056236.016 ops/s
# Warmup Iteration  29: 3059046.696 ops/s
# Warmup Iteration  30: 3076919.629 ops/s
Iteration   1: 3025189.360 ops/s
Iteration   2: 3073069.394 ops/s
Iteration   3: 3082265.781 ops/s
Iteration   4: 3065030.825 ops/s
Iteration   5: 3030248.826 ops/s
Iteration   6: 3063397.880 ops/s
Iteration   7: 3068700.039 ops/s
Iteration   8: 3075901.511 ops/s
Iteration   9: 3074240.260 ops/s
Iteration  10: 3076805.847 ops/s
Iteration  11: 3047820.554 ops/s
Iteration  12: 3065929.586 ops/s
Iteration  13: 3015987.230 ops/s
Iteration  14: 3056604.034 ops/s
Iteration  15: 3061504.175 ops/s
Iteration  16: 3073439.921 ops/s
Iteration  17: 3049961.144 ops/s
Iteration  18: 3017237.005 ops/s
Iteration  19: 3074463.584 ops/s
Iteration  20: 3038424.323 ops/s
Iteration  21: 3071476.980 ops/s
Iteration  22: 3071259.295 ops/s
Iteration  23: 3082631.845 ops/s
Iteration  24: 3066358.701 ops/s
Iteration  25: 3074420.981 ops/s
Iteration  26: 3026995.705 ops/s
Iteration  27: 3079771.100 ops/s
Iteration  28: 3072442.229 ops/s
Iteration  29: 3015777.383 ops/s
Iteration  30: 3074590.263 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_flatCollect":
  3059064.859 ±(99.9%) 14323.881 ops/s [Average]
  (min, avg, max) = (3015777.383, 3059064.859, 3082631.845), stdev = 21439.313
  CI (99.9%): [3044740.977, 3073388.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_flatCollect  thrpt   30  3059064.859 ± 14323.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1875654.937 ops/s
# Warmup Iteration   2: 5141328.840 ops/s
# Warmup Iteration   3: 4361127.575 ops/s
# Warmup Iteration   4: 5142592.101 ops/s
# Warmup Iteration   5: 5111053.173 ops/s
# Warmup Iteration   6: 5135933.620 ops/s
# Warmup Iteration   7: 5173587.344 ops/s
# Warmup Iteration   8: 5138123.763 ops/s
# Warmup Iteration   9: 5135318.937 ops/s
# Warmup Iteration  10: 5171279.047 ops/s
# Warmup Iteration  11: 5143339.677 ops/s
# Warmup Iteration  12: 5136356.530 ops/s
# Warmup Iteration  13: 5184371.825 ops/s
# Warmup Iteration  14: 5181176.645 ops/s
# Warmup Iteration  15: 5189166.393 ops/s
# Warmup Iteration  16: 5118585.308 ops/s
# Warmup Iteration  17: 5145971.493 ops/s
# Warmup Iteration  18: 5216059.056 ops/s
# Warmup Iteration  19: 5172597.455 ops/s
# Warmup Iteration  20: 5202177.610 ops/s
# Warmup Iteration  21: 5146012.883 ops/s
# Warmup Iteration  22: 5177471.847 ops/s
# Warmup Iteration  23: 5216958.470 ops/s
# Warmup Iteration  24: 5167272.796 ops/s
# Warmup Iteration  25: 5212777.345 ops/s
# Warmup Iteration  26: 5160558.849 ops/s
# Warmup Iteration  27: 5146274.762 ops/s
# Warmup Iteration  28: 5200069.656 ops/s
# Warmup Iteration  29: 5210709.597 ops/s
# Warmup Iteration  30: 5204405.472 ops/s
Iteration   1: 5216314.148 ops/s
Iteration   2: 5209556.075 ops/s
Iteration   3: 5211139.350 ops/s
Iteration   4: 5183631.009 ops/s
Iteration   5: 5201260.106 ops/s
Iteration   6: 5211306.167 ops/s
Iteration   7: 5022946.733 ops/s
Iteration   8: 5226904.215 ops/s
Iteration   9: 5166879.033 ops/s
Iteration  10: 5190616.767 ops/s
Iteration  11: 5167331.136 ops/s
Iteration  12: 5220704.460 ops/s
Iteration  13: 5192378.888 ops/s
Iteration  14: 5218148.420 ops/s
Iteration  15: 5199502.148 ops/s
Iteration  16: 5199872.031 ops/s
Iteration  17: 5192252.580 ops/s
Iteration  18: 5193917.740 ops/s
Iteration  19: 5191735.438 ops/s
Iteration  20: 5206981.195 ops/s
Iteration  21: 5193195.479 ops/s
Iteration  22: 5210141.882 ops/s
Iteration  23: 5181467.085 ops/s
Iteration  24: 5204588.285 ops/s
Iteration  25: 5230425.718 ops/s
Iteration  26: 5191613.633 ops/s
Iteration  27: 5210073.210 ops/s
Iteration  28: 5093293.897 ops/s
Iteration  29: 5212474.278 ops/s
Iteration  30: 5181948.968 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_groupBy":
  5191086.669 ±(99.9%) 26990.658 ops/s [Average]
  (min, avg, max) = (5022946.733, 5191086.669, 5230425.718), stdev = 40398.350
  CI (99.9%): [5164096.011, 5218077.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_groupBy  thrpt   30  5191086.669 ± 26990.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580355.205 ops/s
# Warmup Iteration   2: 738049.976 ops/s
# Warmup Iteration   3: 905151.878 ops/s
# Warmup Iteration   4: 903796.656 ops/s
# Warmup Iteration   5: 906256.709 ops/s
# Warmup Iteration   6: 914046.774 ops/s
# Warmup Iteration   7: 905588.922 ops/s
# Warmup Iteration   8: 895421.204 ops/s
# Warmup Iteration   9: 789896.900 ops/s
# Warmup Iteration  10: 907991.018 ops/s
# Warmup Iteration  11: 915085.588 ops/s
# Warmup Iteration  12: 911285.445 ops/s
# Warmup Iteration  13: 911997.776 ops/s
# Warmup Iteration  14: 911060.745 ops/s
# Warmup Iteration  15: 909815.787 ops/s
# Warmup Iteration  16: 902304.380 ops/s
# Warmup Iteration  17: 959983.370 ops/s
# Warmup Iteration  18: 963496.340 ops/s
# Warmup Iteration  19: 959870.042 ops/s
# Warmup Iteration  20: 941222.319 ops/s
# Warmup Iteration  21: 961937.069 ops/s
# Warmup Iteration  22: 960755.438 ops/s
# Warmup Iteration  23: 959404.662 ops/s
# Warmup Iteration  24: 960029.171 ops/s
# Warmup Iteration  25: 961380.170 ops/s
# Warmup Iteration  26: 963605.154 ops/s
# Warmup Iteration  27: 961225.741 ops/s
# Warmup Iteration  28: 944928.757 ops/s
# Warmup Iteration  29: 946398.054 ops/s
# Warmup Iteration  30: 961494.827 ops/s
Iteration   1: 960028.417 ops/s
Iteration   2: 945430.456 ops/s
Iteration   3: 950095.909 ops/s
Iteration   4: 950290.140 ops/s
Iteration   5: 959892.584 ops/s
Iteration   6: 964880.101 ops/s
Iteration   7: 964786.974 ops/s
Iteration   8: 960929.365 ops/s
Iteration   9: 944350.723 ops/s
Iteration  10: 959360.299 ops/s
Iteration  11: 965015.184 ops/s
Iteration  12: 958900.781 ops/s
Iteration  13: 965107.972 ops/s
Iteration  14: 957238.276 ops/s
Iteration  15: 961552.538 ops/s
Iteration  16: 966391.446 ops/s
Iteration  17: 957118.409 ops/s
Iteration  18: 960863.249 ops/s
Iteration  19: 944707.963 ops/s
Iteration  20: 958641.842 ops/s
Iteration  21: 966897.129 ops/s
Iteration  22: 962401.537 ops/s
Iteration  23: 964193.568 ops/s
Iteration  24: 965585.192 ops/s
Iteration  25: 963566.976 ops/s
Iteration  26: 959839.224 ops/s
Iteration  27: 965601.220 ops/s
Iteration  28: 948592.686 ops/s
Iteration  29: 961162.565 ops/s
Iteration  30: 964942.647 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove":
  959278.846 ±(99.9%) 4528.281 ops/s [Average]
  (min, avg, max) = (944350.723, 959278.846, 966897.129), stdev = 6777.718
  CI (99.9%): [954750.565, 963807.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  959278.846 ± 4528.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 207878.654 ops/s
# Warmup Iteration   2: 231401.184 ops/s
# Warmup Iteration   3: 298468.986 ops/s
# Warmup Iteration   4: 294182.446 ops/s
# Warmup Iteration   5: 299009.322 ops/s
# Warmup Iteration   6: 298710.980 ops/s
# Warmup Iteration   7: 297074.948 ops/s
# Warmup Iteration   8: 297381.025 ops/s
# Warmup Iteration   9: 295564.267 ops/s
# Warmup Iteration  10: 298093.838 ops/s
# Warmup Iteration  11: 279974.178 ops/s
# Warmup Iteration  12: 276598.030 ops/s
# Warmup Iteration  13: 298049.854 ops/s
# Warmup Iteration  14: 299995.920 ops/s
# Warmup Iteration  15: 300915.658 ops/s
# Warmup Iteration  16: 300092.388 ops/s
# Warmup Iteration  17: 316739.903 ops/s
# Warmup Iteration  18: 317403.108 ops/s
# Warmup Iteration  19: 316784.142 ops/s
# Warmup Iteration  20: 314492.018 ops/s
# Warmup Iteration  21: 316090.782 ops/s
# Warmup Iteration  22: 311341.477 ops/s
# Warmup Iteration  23: 314021.296 ops/s
# Warmup Iteration  24: 314341.250 ops/s
# Warmup Iteration  25: 317037.141 ops/s
# Warmup Iteration  26: 316165.882 ops/s
# Warmup Iteration  27: 316390.699 ops/s
# Warmup Iteration  28: 315860.530 ops/s
# Warmup Iteration  29: 316441.191 ops/s
# Warmup Iteration  30: 315516.370 ops/s
Iteration   1: 310989.367 ops/s
Iteration   2: 307732.208 ops/s
Iteration   3: 311527.163 ops/s
Iteration   4: 317235.080 ops/s
Iteration   5: 316333.080 ops/s
Iteration   6: 311663.765 ops/s
Iteration   7: 316292.308 ops/s
Iteration   8: 316171.360 ops/s
Iteration   9: 316885.831 ops/s
Iteration  10: 316536.591 ops/s
Iteration  11: 312478.859 ops/s
Iteration  12: 316837.550 ops/s
Iteration  13: 316227.203 ops/s
Iteration  14: 312377.343 ops/s
Iteration  15: 316076.973 ops/s
Iteration  16: 315496.880 ops/s
Iteration  17: 314844.447 ops/s
Iteration  18: 317143.713 ops/s
Iteration  19: 314180.747 ops/s
Iteration  20: 316430.650 ops/s
Iteration  21: 311169.039 ops/s
Iteration  22: 311440.536 ops/s
Iteration  23: 314668.752 ops/s
Iteration  24: 310535.072 ops/s
Iteration  25: 315555.570 ops/s
Iteration  26: 316009.642 ops/s
Iteration  27: 316958.030 ops/s
Iteration  28: 317145.866 ops/s
Iteration  29: 316724.768 ops/s
Iteration  30: 317162.405 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_listIterator":
  314694.360 ±(99.9%) 1740.003 ops/s [Average]
  (min, avg, max) = (307732.208, 314694.360, 317235.080), stdev = 2604.354
  CI (99.9%): [312954.357, 316434.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_listIterator  thrpt   30  314694.360 ± 1740.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5023296.101 ops/s
# Warmup Iteration   2: 10369983.567 ops/s
# Warmup Iteration   3: 9614192.858 ops/s
# Warmup Iteration   4: 10788383.791 ops/s
# Warmup Iteration   5: 10854334.751 ops/s
# Warmup Iteration   6: 10782471.200 ops/s
# Warmup Iteration   7: 10860232.185 ops/s
# Warmup Iteration   8: 10834482.803 ops/s
# Warmup Iteration   9: 10826141.644 ops/s
# Warmup Iteration  10: 10720655.566 ops/s
# Warmup Iteration  11: 10635793.404 ops/s
# Warmup Iteration  12: 10680874.194 ops/s
# Warmup Iteration  13: 10731310.856 ops/s
# Warmup Iteration  14: 10853339.271 ops/s
# Warmup Iteration  15: 10861106.267 ops/s
# Warmup Iteration  16: 10866509.009 ops/s
# Warmup Iteration  17: 10879153.713 ops/s
# Warmup Iteration  18: 10966449.042 ops/s
# Warmup Iteration  19: 10958861.182 ops/s
# Warmup Iteration  20: 10908286.778 ops/s
# Warmup Iteration  21: 10889851.419 ops/s
# Warmup Iteration  22: 10895956.182 ops/s
# Warmup Iteration  23: 10953102.232 ops/s
# Warmup Iteration  24: 10935548.180 ops/s
# Warmup Iteration  25: 10907328.572 ops/s
# Warmup Iteration  26: 10702890.537 ops/s
# Warmup Iteration  27: 10867724.816 ops/s
# Warmup Iteration  28: 10962073.693 ops/s
# Warmup Iteration  29: 10928886.436 ops/s
# Warmup Iteration  30: 10937377.321 ops/s
Iteration   1: 10973042.111 ops/s
Iteration   2: 10860779.570 ops/s
Iteration   3: 10872065.353 ops/s
Iteration   4: 10992702.360 ops/s
Iteration   5: 10835107.355 ops/s
Iteration   6: 10966208.856 ops/s
Iteration   7: 10893506.652 ops/s
Iteration   8: 10925239.319 ops/s
Iteration   9: 10918011.043 ops/s
Iteration  10: 10947892.727 ops/s
Iteration  11: 10953531.975 ops/s
Iteration  12: 10941917.651 ops/s
Iteration  13: 10941967.233 ops/s
Iteration  14: 10896420.043 ops/s
Iteration  15: 10694547.079 ops/s
Iteration  16: 10951996.484 ops/s
Iteration  17: 10796550.411 ops/s
Iteration  18: 10607740.608 ops/s
Iteration  19: 10962810.656 ops/s
Iteration  20: 10951955.348 ops/s
Iteration  21: 10433468.001 ops/s
Iteration  22: 10866894.007 ops/s
Iteration  23: 10910013.305 ops/s
Iteration  24: 10831333.442 ops/s
Iteration  25: 10870299.593 ops/s
Iteration  26: 10898784.060 ops/s
Iteration  27: 10915935.295 ops/s
Iteration  28: 10917679.393 ops/s
Iteration  29: 10877171.917 ops/s
Iteration  30: 10961757.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_newEmpty":
  10878910.973 ±(99.9%) 78290.995 ops/s [Average]
  (min, avg, max) = (10433468.001, 10878910.973, 10992702.360), stdev = 117182.284
  CI (99.9%): [10800619.979, 10957201.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_newEmpty  thrpt   30  10878910.973 ± 78290.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1718684.240 ops/s
# Warmup Iteration   2: 4926407.753 ops/s
# Warmup Iteration   3: 4249137.315 ops/s
# Warmup Iteration   4: 4995458.183 ops/s
# Warmup Iteration   5: 4942896.088 ops/s
# Warmup Iteration   6: 5022623.795 ops/s
# Warmup Iteration   7: 5042165.859 ops/s
# Warmup Iteration   8: 4983839.313 ops/s
# Warmup Iteration   9: 4998448.142 ops/s
# Warmup Iteration  10: 5044201.833 ops/s
# Warmup Iteration  11: 5041392.686 ops/s
# Warmup Iteration  12: 5001981.828 ops/s
# Warmup Iteration  13: 5042112.094 ops/s
# Warmup Iteration  14: 5020985.804 ops/s
# Warmup Iteration  15: 5013225.461 ops/s
# Warmup Iteration  16: 4998182.063 ops/s
# Warmup Iteration  17: 4931390.886 ops/s
# Warmup Iteration  18: 4997345.976 ops/s
# Warmup Iteration  19: 4971360.171 ops/s
# Warmup Iteration  20: 4975419.603 ops/s
# Warmup Iteration  21: 4999716.159 ops/s
# Warmup Iteration  22: 4993185.899 ops/s
# Warmup Iteration  23: 4987583.682 ops/s
# Warmup Iteration  24: 4956567.524 ops/s
# Warmup Iteration  25: 4972835.081 ops/s
# Warmup Iteration  26: 4986989.077 ops/s
# Warmup Iteration  27: 4946721.933 ops/s
# Warmup Iteration  28: 4993919.715 ops/s
# Warmup Iteration  29: 4999542.393 ops/s
# Warmup Iteration  30: 5005493.562 ops/s
Iteration   1: 5001361.235 ops/s
Iteration   2: 4995383.619 ops/s
Iteration   3: 4982957.337 ops/s
Iteration   4: 5015081.460 ops/s
Iteration   5: 4936442.300 ops/s
Iteration   6: 4991169.904 ops/s
Iteration   7: 4988279.282 ops/s
Iteration   8: 5000289.173 ops/s
Iteration   9: 5008118.216 ops/s
Iteration  10: 5011935.415 ops/s
Iteration  11: 5025088.115 ops/s
Iteration  12: 4930718.022 ops/s
Iteration  13: 5008707.619 ops/s
Iteration  14: 4849505.747 ops/s
Iteration  15: 5016054.060 ops/s
Iteration  16: 4890038.765 ops/s
Iteration  17: 4929471.986 ops/s
Iteration  18: 5011442.048 ops/s
Iteration  19: 5005068.662 ops/s
Iteration  20: 4914583.192 ops/s
Iteration  21: 5001378.420 ops/s
Iteration  22: 4994316.005 ops/s
Iteration  23: 4945274.456 ops/s
Iteration  24: 5016798.587 ops/s
Iteration  25: 4966039.151 ops/s
Iteration  26: 4991774.775 ops/s
Iteration  27: 4911423.445 ops/s
Iteration  28: 5003148.910 ops/s
Iteration  29: 5003028.564 ops/s
Iteration  30: 4981705.734 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partition":
  4977552.807 ±(99.9%) 29240.991 ops/s [Average]
  (min, avg, max) = (4849505.747, 4977552.807, 5025088.115), stdev = 43766.541
  CI (99.9%): [4948311.816, 5006793.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partition  thrpt   30  4977552.807 ± 29240.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2148866.670 ops/s
# Warmup Iteration   2: 4894415.358 ops/s
# Warmup Iteration   3: 4199246.449 ops/s
# Warmup Iteration   4: 4952086.061 ops/s
# Warmup Iteration   5: 4955793.451 ops/s
# Warmup Iteration   6: 4987302.514 ops/s
# Warmup Iteration   7: 4994103.383 ops/s
# Warmup Iteration   8: 5008676.928 ops/s
# Warmup Iteration   9: 4932483.249 ops/s
# Warmup Iteration  10: 4990202.691 ops/s
# Warmup Iteration  11: 4995709.075 ops/s
# Warmup Iteration  12: 5011752.986 ops/s
# Warmup Iteration  13: 4967551.363 ops/s
# Warmup Iteration  14: 4999951.483 ops/s
# Warmup Iteration  15: 5005502.807 ops/s
# Warmup Iteration  16: 5010507.441 ops/s
# Warmup Iteration  17: 4975302.692 ops/s
# Warmup Iteration  18: 4964387.885 ops/s
# Warmup Iteration  19: 4955174.810 ops/s
# Warmup Iteration  20: 4968148.119 ops/s
# Warmup Iteration  21: 4976390.590 ops/s
# Warmup Iteration  22: 4912323.689 ops/s
# Warmup Iteration  23: 4882756.522 ops/s
# Warmup Iteration  24: 4957868.488 ops/s
# Warmup Iteration  25: 4971382.893 ops/s
# Warmup Iteration  26: 4960323.820 ops/s
# Warmup Iteration  27: 4964160.142 ops/s
# Warmup Iteration  28: 4969131.133 ops/s
# Warmup Iteration  29: 4957230.030 ops/s
# Warmup Iteration  30: 4972424.017 ops/s
Iteration   1: 4932938.993 ops/s
Iteration   2: 4869705.793 ops/s
Iteration   3: 4996572.340 ops/s
Iteration   4: 4967595.870 ops/s
Iteration   5: 4940880.654 ops/s
Iteration   6: 4958544.683 ops/s
Iteration   7: 4960285.789 ops/s
Iteration   8: 4950972.149 ops/s
Iteration   9: 4977317.697 ops/s
Iteration  10: 4923595.364 ops/s
Iteration  11: 4977995.317 ops/s
Iteration  12: 4959193.519 ops/s
Iteration  13: 4974509.540 ops/s
Iteration  14: 4943228.865 ops/s
Iteration  15: 4993435.928 ops/s
Iteration  16: 4964272.142 ops/s
Iteration  17: 4982364.657 ops/s
Iteration  18: 4958640.305 ops/s
Iteration  19: 4977554.761 ops/s
Iteration  20: 4956067.030 ops/s
Iteration  21: 4929548.809 ops/s
Iteration  22: 4984443.229 ops/s
Iteration  23: 4981563.999 ops/s
Iteration  24: 4946843.141 ops/s
Iteration  25: 4835227.694 ops/s
Iteration  26: 4955748.564 ops/s
Iteration  27: 4941306.406 ops/s
Iteration  28: 4903789.089 ops/s
Iteration  29: 4940555.179 ops/s
Iteration  30: 4982449.828 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partitionWith":
  4952238.244 ±(99.9%) 23364.561 ops/s [Average]
  (min, avg, max) = (4835227.694, 4952238.244, 4996572.340), stdev = 34970.977
  CI (99.9%): [4928873.684, 4975602.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_partitionWith  thrpt   30  4952238.244 ± 23364.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1674278.894 ops/s
# Warmup Iteration   2: 3625660.222 ops/s
# Warmup Iteration   3: 3131141.179 ops/s
# Warmup Iteration   4: 3668444.136 ops/s
# Warmup Iteration   5: 3685377.129 ops/s
# Warmup Iteration   6: 3702190.751 ops/s
# Warmup Iteration   7: 3641152.280 ops/s
# Warmup Iteration   8: 3682526.110 ops/s
# Warmup Iteration   9: 3696032.970 ops/s
# Warmup Iteration  10: 3696673.812 ops/s
# Warmup Iteration  11: 3683922.117 ops/s
# Warmup Iteration  12: 3709753.457 ops/s
# Warmup Iteration  13: 3612165.286 ops/s
# Warmup Iteration  14: 3687000.132 ops/s
# Warmup Iteration  15: 3685775.758 ops/s
# Warmup Iteration  16: 3703970.366 ops/s
# Warmup Iteration  17: 3655905.578 ops/s
# Warmup Iteration  18: 3705434.709 ops/s
# Warmup Iteration  19: 3640911.668 ops/s
# Warmup Iteration  20: 3684188.474 ops/s
# Warmup Iteration  21: 3682629.242 ops/s
# Warmup Iteration  22: 3690134.771 ops/s
# Warmup Iteration  23: 3687006.954 ops/s
# Warmup Iteration  24: 3685465.576 ops/s
# Warmup Iteration  25: 3690270.022 ops/s
# Warmup Iteration  26: 3672204.693 ops/s
# Warmup Iteration  27: 3684902.176 ops/s
# Warmup Iteration  28: 3697267.234 ops/s
# Warmup Iteration  29: 3640786.628 ops/s
# Warmup Iteration  30: 3681730.773 ops/s
Iteration   1: 3612782.309 ops/s
Iteration   2: 3678117.738 ops/s
Iteration   3: 3574325.221 ops/s
Iteration   4: 3675586.608 ops/s
Iteration   5: 3681254.110 ops/s
Iteration   6: 3668550.708 ops/s
Iteration   7: 3633508.846 ops/s
Iteration   8: 3700258.927 ops/s
Iteration   9: 3654851.027 ops/s
Iteration  10: 3624399.017 ops/s
Iteration  11: 3632432.731 ops/s
Iteration  12: 3689791.309 ops/s
Iteration  13: 3685888.129 ops/s
Iteration  14: 3664899.028 ops/s
Iteration  15: 3672384.113 ops/s
Iteration  16: 3618550.752 ops/s
Iteration  17: 3626535.634 ops/s
Iteration  18: 3683037.877 ops/s
Iteration  19: 3610883.118 ops/s
Iteration  20: 3686576.173 ops/s
Iteration  21: 3691600.631 ops/s
Iteration  22: 3662493.493 ops/s
Iteration  23: 3702948.414 ops/s
Iteration  24: 3683638.755 ops/s
Iteration  25: 3696463.457 ops/s
Iteration  26: 3686079.302 ops/s
Iteration  27: 3685187.288 ops/s
Iteration  28: 3634938.283 ops/s
Iteration  29: 3708706.950 ops/s
Iteration  30: 3680773.336 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reject":
  3663581.443 ±(99.9%) 22319.423 ops/s [Average]
  (min, avg, max) = (3574325.221, 3663581.443, 3708706.950), stdev = 33406.664
  CI (99.9%): [3641262.020, 3685900.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reject  thrpt   30  3663581.443 ± 22319.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1666338.363 ops/s
# Warmup Iteration   2: 3655641.313 ops/s
# Warmup Iteration   3: 3150492.965 ops/s
# Warmup Iteration   4: 3735023.976 ops/s
# Warmup Iteration   5: 3745920.693 ops/s
# Warmup Iteration   6: 3760041.055 ops/s
# Warmup Iteration   7: 3727112.698 ops/s
# Warmup Iteration   8: 3736927.111 ops/s
# Warmup Iteration   9: 3726848.866 ops/s
# Warmup Iteration  10: 3742382.487 ops/s
# Warmup Iteration  11: 3754696.589 ops/s
# Warmup Iteration  12: 3718019.179 ops/s
# Warmup Iteration  13: 3759269.197 ops/s
# Warmup Iteration  14: 3739432.516 ops/s
# Warmup Iteration  15: 3742374.159 ops/s
# Warmup Iteration  16: 3740888.794 ops/s
# Warmup Iteration  17: 3668970.390 ops/s
# Warmup Iteration  18: 3724269.663 ops/s
# Warmup Iteration  19: 3718963.439 ops/s
# Warmup Iteration  20: 3659490.147 ops/s
# Warmup Iteration  21: 3688846.621 ops/s
# Warmup Iteration  22: 3710411.495 ops/s
# Warmup Iteration  23: 3697058.659 ops/s
# Warmup Iteration  24: 3672377.276 ops/s
# Warmup Iteration  25: 3704066.985 ops/s
# Warmup Iteration  26: 3728893.032 ops/s
# Warmup Iteration  27: 3692114.913 ops/s
# Warmup Iteration  28: 3707683.552 ops/s
# Warmup Iteration  29: 3730255.744 ops/s
# Warmup Iteration  30: 3734657.887 ops/s
Iteration   1: 3725818.100 ops/s
Iteration   2: 3731959.393 ops/s
Iteration   3: 3719778.441 ops/s
Iteration   4: 3730053.813 ops/s
Iteration   5: 3613196.098 ops/s
Iteration   6: 3722964.932 ops/s
Iteration   7: 3732304.197 ops/s
Iteration   8: 3752254.334 ops/s
Iteration   9: 3743867.617 ops/s
Iteration  10: 3716161.580 ops/s
Iteration  11: 3748835.675 ops/s
Iteration  12: 3690610.835 ops/s
Iteration  13: 3709884.659 ops/s
Iteration  14: 3734229.052 ops/s
Iteration  15: 3715276.241 ops/s
Iteration  16: 3603813.067 ops/s
Iteration  17: 3706160.174 ops/s
Iteration  18: 3719205.110 ops/s
Iteration  19: 3733247.316 ops/s
Iteration  20: 3723964.544 ops/s
Iteration  21: 3711198.661 ops/s
Iteration  22: 3738047.935 ops/s
Iteration  23: 3726632.362 ops/s
Iteration  24: 3719093.587 ops/s
Iteration  25: 3746064.656 ops/s
Iteration  26: 3737081.055 ops/s
Iteration  27: 3703034.944 ops/s
Iteration  28: 3734298.240 ops/s
Iteration  29: 3710346.049 ops/s
Iteration  30: 3735968.218 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_rejectWith":
  3717845.030 ±(99.9%) 22017.809 ops/s [Average]
  (min, avg, max) = (3603813.067, 3717845.030, 3752254.334), stdev = 32955.223
  CI (99.9%): [3695827.220, 3739862.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_rejectWith  thrpt   30  3717845.030 ± 22017.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565307.189 ops/s
# Warmup Iteration   2: 654631.808 ops/s
# Warmup Iteration   3: 823463.353 ops/s
# Warmup Iteration   4: 821744.302 ops/s
# Warmup Iteration   5: 823821.379 ops/s
# Warmup Iteration   6: 822364.815 ops/s
# Warmup Iteration   7: 828207.994 ops/s
# Warmup Iteration   8: 820784.838 ops/s
# Warmup Iteration   9: 825172.862 ops/s
# Warmup Iteration  10: 702324.192 ops/s
# Warmup Iteration  11: 821331.940 ops/s
# Warmup Iteration  12: 825280.097 ops/s
# Warmup Iteration  13: 813769.132 ops/s
# Warmup Iteration  14: 826128.180 ops/s
# Warmup Iteration  15: 820874.660 ops/s
# Warmup Iteration  16: 821763.852 ops/s
# Warmup Iteration  17: 860193.393 ops/s
# Warmup Iteration  18: 869748.015 ops/s
# Warmup Iteration  19: 860596.929 ops/s
# Warmup Iteration  20: 869637.355 ops/s
# Warmup Iteration  21: 861030.257 ops/s
# Warmup Iteration  22: 859578.975 ops/s
# Warmup Iteration  23: 869328.862 ops/s
# Warmup Iteration  24: 857331.596 ops/s
# Warmup Iteration  25: 868129.185 ops/s
# Warmup Iteration  26: 865309.583 ops/s
# Warmup Iteration  27: 862331.664 ops/s
# Warmup Iteration  28: 850575.251 ops/s
# Warmup Iteration  29: 862981.209 ops/s
# Warmup Iteration  30: 862373.945 ops/s
Iteration   1: 871354.362 ops/s
Iteration   2: 873055.597 ops/s
Iteration   3: 868723.115 ops/s
Iteration   4: 869027.238 ops/s
Iteration   5: 864542.115 ops/s
Iteration   6: 866356.132 ops/s
Iteration   7: 869826.615 ops/s
Iteration   8: 868404.450 ops/s
Iteration   9: 867812.778 ops/s
Iteration  10: 865855.525 ops/s
Iteration  11: 872671.506 ops/s
Iteration  12: 863857.305 ops/s
Iteration  13: 861792.576 ops/s
Iteration  14: 872445.807 ops/s
Iteration  15: 871236.513 ops/s
Iteration  16: 869601.203 ops/s
Iteration  17: 857676.402 ops/s
Iteration  18: 869595.848 ops/s
Iteration  19: 870706.883 ops/s
Iteration  20: 861400.542 ops/s
Iteration  21: 870934.428 ops/s
Iteration  22: 868614.972 ops/s
Iteration  23: 869002.071 ops/s
Iteration  24: 869383.491 ops/s
Iteration  25: 869105.341 ops/s
Iteration  26: 870341.383 ops/s
Iteration  27: 860795.149 ops/s
Iteration  28: 861248.143 ops/s
Iteration  29: 867570.897 ops/s
Iteration  30: 862284.444 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_remove":
  867507.428 ±(99.9%) 2698.782 ops/s [Average]
  (min, avg, max) = (857676.402, 867507.428, 873055.597), stdev = 4039.410
  CI (99.9%): [864808.646, 870206.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_remove  thrpt   30  867507.428 ± 2698.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604531.040 ops/s
# Warmup Iteration   2: 733954.277 ops/s
# Warmup Iteration   3: 921509.317 ops/s
# Warmup Iteration   4: 911947.254 ops/s
# Warmup Iteration   5: 919223.729 ops/s
# Warmup Iteration   6: 919952.300 ops/s
# Warmup Iteration   7: 924668.870 ops/s
# Warmup Iteration   8: 922029.371 ops/s
# Warmup Iteration   9: 776722.412 ops/s
# Warmup Iteration  10: 908260.529 ops/s
# Warmup Iteration  11: 912796.659 ops/s
# Warmup Iteration  12: 919416.753 ops/s
# Warmup Iteration  13: 918510.541 ops/s
# Warmup Iteration  14: 917701.962 ops/s
# Warmup Iteration  15: 910820.915 ops/s
# Warmup Iteration  16: 912149.271 ops/s
# Warmup Iteration  17: 969236.378 ops/s
# Warmup Iteration  18: 975598.846 ops/s
# Warmup Iteration  19: 970919.483 ops/s
# Warmup Iteration  20: 974975.599 ops/s
# Warmup Iteration  21: 971419.893 ops/s
# Warmup Iteration  22: 974762.220 ops/s
# Warmup Iteration  23: 970976.476 ops/s
# Warmup Iteration  24: 959822.795 ops/s
# Warmup Iteration  25: 966174.340 ops/s
# Warmup Iteration  26: 975066.417 ops/s
# Warmup Iteration  27: 974211.706 ops/s
# Warmup Iteration  28: 963674.677 ops/s
# Warmup Iteration  29: 974012.835 ops/s
# Warmup Iteration  30: 974367.769 ops/s
Iteration   1: 976235.493 ops/s
Iteration   2: 970801.086 ops/s
Iteration   3: 968564.092 ops/s
Iteration   4: 975083.779 ops/s
Iteration   5: 956848.495 ops/s
Iteration   6: 970612.363 ops/s
Iteration   7: 978063.601 ops/s
Iteration   8: 955001.936 ops/s
Iteration   9: 949948.680 ops/s
Iteration  10: 952650.048 ops/s
Iteration  11: 974649.069 ops/s
Iteration  12: 972067.207 ops/s
Iteration  13: 972399.931 ops/s
Iteration  14: 973724.665 ops/s
Iteration  15: 960475.827 ops/s
Iteration  16: 978591.879 ops/s
Iteration  17: 975614.095 ops/s
Iteration  18: 958613.830 ops/s
Iteration  19: 972366.594 ops/s
Iteration  20: 971771.841 ops/s
Iteration  21: 965352.417 ops/s
Iteration  22: 973177.338 ops/s
Iteration  23: 966402.555 ops/s
Iteration  24: 973100.987 ops/s
Iteration  25: 973422.249 ops/s
Iteration  26: 968904.507 ops/s
Iteration  27: 974460.740 ops/s
Iteration  28: 977033.290 ops/s
Iteration  29: 974164.730 ops/s
Iteration  30: 974063.989 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAll":
  969472.244 ±(99.9%) 5228.142 ops/s [Average]
  (min, avg, max) = (949948.680, 969472.244, 978591.879), stdev = 7825.237
  CI (99.9%): [964244.102, 974700.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAll  thrpt   30  969472.244 ± 5228.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 568093.065 ops/s
# Warmup Iteration   2: 667854.057 ops/s
# Warmup Iteration   3: 835508.976 ops/s
# Warmup Iteration   4: 821712.936 ops/s
# Warmup Iteration   5: 829701.536 ops/s
# Warmup Iteration   6: 834181.445 ops/s
# Warmup Iteration   7: 825711.306 ops/s
# Warmup Iteration   8: 840261.332 ops/s
# Warmup Iteration   9: 844500.585 ops/s
# Warmup Iteration  10: 709444.837 ops/s
# Warmup Iteration  11: 841361.350 ops/s
# Warmup Iteration  12: 840752.812 ops/s
# Warmup Iteration  13: 840952.890 ops/s
# Warmup Iteration  14: 826384.036 ops/s
# Warmup Iteration  15: 835050.942 ops/s
# Warmup Iteration  16: 832151.551 ops/s
# Warmup Iteration  17: 878346.939 ops/s
# Warmup Iteration  18: 870168.937 ops/s
# Warmup Iteration  19: 879488.106 ops/s
# Warmup Iteration  20: 883129.828 ops/s
# Warmup Iteration  21: 885333.008 ops/s
# Warmup Iteration  22: 885381.429 ops/s
# Warmup Iteration  23: 882758.564 ops/s
# Warmup Iteration  24: 880626.264 ops/s
# Warmup Iteration  25: 885458.172 ops/s
# Warmup Iteration  26: 880927.565 ops/s
# Warmup Iteration  27: 886520.630 ops/s
# Warmup Iteration  28: 884200.467 ops/s
# Warmup Iteration  29: 872011.000 ops/s
# Warmup Iteration  30: 884128.817 ops/s
Iteration   1: 885868.744 ops/s
Iteration   2: 885142.878 ops/s
Iteration   3: 885373.724 ops/s
Iteration   4: 887805.879 ops/s
Iteration   5: 886047.228 ops/s
Iteration   6: 885964.288 ops/s
Iteration   7: 888251.721 ops/s
Iteration   8: 882723.583 ops/s
Iteration   9: 889738.876 ops/s
Iteration  10: 889463.476 ops/s
Iteration  11: 883142.555 ops/s
Iteration  12: 881324.317 ops/s
Iteration  13: 886180.588 ops/s
Iteration  14: 886500.555 ops/s
Iteration  15: 884293.102 ops/s
Iteration  16: 886217.798 ops/s
Iteration  17: 887086.500 ops/s
Iteration  18: 884969.284 ops/s
Iteration  19: 877476.564 ops/s
Iteration  20: 884200.250 ops/s
Iteration  21: 886727.352 ops/s
Iteration  22: 864113.813 ops/s
Iteration  23: 854418.976 ops/s
Iteration  24: 887092.796 ops/s
Iteration  25: 882742.590 ops/s
Iteration  26: 872954.762 ops/s
Iteration  27: 884386.717 ops/s
Iteration  28: 882258.826 ops/s
Iteration  29: 884920.465 ops/s
Iteration  30: 877512.859 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable":
  882830.035 ±(99.9%) 4970.064 ops/s [Average]
  (min, avg, max) = (854418.976, 882830.035, 889738.876), stdev = 7438.959
  CI (99.9%): [877859.971, 887800.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  882830.035 ± 4970.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583026.263 ops/s
# Warmup Iteration   2: 697779.282 ops/s
# Warmup Iteration   3: 865836.420 ops/s
# Warmup Iteration   4: 859827.317 ops/s
# Warmup Iteration   5: 865725.732 ops/s
# Warmup Iteration   6: 866357.848 ops/s
# Warmup Iteration   7: 860151.242 ops/s
# Warmup Iteration   8: 865119.980 ops/s
# Warmup Iteration   9: 822730.486 ops/s
# Warmup Iteration  10: 765534.285 ops/s
# Warmup Iteration  11: 868180.133 ops/s
# Warmup Iteration  12: 873196.317 ops/s
# Warmup Iteration  13: 850024.943 ops/s
# Warmup Iteration  14: 847066.379 ops/s
# Warmup Iteration  15: 869089.763 ops/s
# Warmup Iteration  16: 860134.249 ops/s
# Warmup Iteration  17: 904090.939 ops/s
# Warmup Iteration  18: 907591.872 ops/s
# Warmup Iteration  19: 897488.341 ops/s
# Warmup Iteration  20: 909557.012 ops/s
# Warmup Iteration  21: 903578.453 ops/s
# Warmup Iteration  22: 912073.189 ops/s
# Warmup Iteration  23: 909102.913 ops/s
# Warmup Iteration  24: 906814.586 ops/s
# Warmup Iteration  25: 901466.185 ops/s
# Warmup Iteration  26: 905828.304 ops/s
# Warmup Iteration  27: 911024.832 ops/s
# Warmup Iteration  28: 909689.988 ops/s
# Warmup Iteration  29: 907861.686 ops/s
# Warmup Iteration  30: 904994.683 ops/s
Iteration   1: 897117.058 ops/s
Iteration   2: 909514.252 ops/s
Iteration   3: 909711.303 ops/s
Iteration   4: 878870.644 ops/s
Iteration   5: 912573.946 ops/s
Iteration   6: 907264.758 ops/s
Iteration   7: 910655.478 ops/s
Iteration   8: 908422.683 ops/s
Iteration   9: 906761.921 ops/s
Iteration  10: 911718.604 ops/s
Iteration  11: 899830.636 ops/s
Iteration  12: 911788.127 ops/s
Iteration  13: 912752.716 ops/s
Iteration  14: 909266.970 ops/s
Iteration  15: 908852.026 ops/s
Iteration  16: 899388.994 ops/s
Iteration  17: 899393.854 ops/s
Iteration  18: 905605.875 ops/s
Iteration  19: 909058.783 ops/s
Iteration  20: 913322.217 ops/s
Iteration  21: 904906.254 ops/s
Iteration  22: 913141.612 ops/s
Iteration  23: 911819.298 ops/s
Iteration  24: 908999.632 ops/s
Iteration  25: 909510.846 ops/s
Iteration  26: 913056.066 ops/s
Iteration  27: 905279.995 ops/s
Iteration  28: 911531.889 ops/s
Iteration  29: 901330.156 ops/s
Iteration  30: 911333.070 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAtIndex":
  907092.655 ±(99.9%) 4701.155 ops/s [Average]
  (min, avg, max) = (878870.644, 907092.655, 913322.217), stdev = 7036.468
  CI (99.9%): [902391.500, 911793.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  907092.655 ± 4701.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589764.543 ops/s
# Warmup Iteration   2: 711367.054 ops/s
# Warmup Iteration   3: 884993.281 ops/s
# Warmup Iteration   4: 891157.420 ops/s
# Warmup Iteration   5: 880390.993 ops/s
# Warmup Iteration   6: 878009.430 ops/s
# Warmup Iteration   7: 885342.378 ops/s
# Warmup Iteration   8: 892535.765 ops/s
# Warmup Iteration   9: 814616.198 ops/s
# Warmup Iteration  10: 829244.739 ops/s
# Warmup Iteration  11: 888283.390 ops/s
# Warmup Iteration  12: 891649.385 ops/s
# Warmup Iteration  13: 886372.542 ops/s
# Warmup Iteration  14: 895192.810 ops/s
# Warmup Iteration  15: 890015.049 ops/s
# Warmup Iteration  16: 896959.343 ops/s
# Warmup Iteration  17: 943615.372 ops/s
# Warmup Iteration  18: 945987.156 ops/s
# Warmup Iteration  19: 942974.032 ops/s
# Warmup Iteration  20: 950064.643 ops/s
# Warmup Iteration  21: 938773.120 ops/s
# Warmup Iteration  22: 940311.903 ops/s
# Warmup Iteration  23: 942453.079 ops/s
# Warmup Iteration  24: 940113.467 ops/s
# Warmup Iteration  25: 941052.376 ops/s
# Warmup Iteration  26: 945299.661 ops/s
# Warmup Iteration  27: 936170.470 ops/s
# Warmup Iteration  28: 939241.948 ops/s
# Warmup Iteration  29: 936204.534 ops/s
# Warmup Iteration  30: 938904.602 ops/s
Iteration   1: 937780.586 ops/s
Iteration   2: 944124.399 ops/s
Iteration   3: 943567.785 ops/s
Iteration   4: 940253.705 ops/s
Iteration   5: 939850.283 ops/s
Iteration   6: 923958.450 ops/s
Iteration   7: 943932.276 ops/s
Iteration   8: 943192.524 ops/s
Iteration   9: 942063.794 ops/s
Iteration  10: 928392.790 ops/s
Iteration  11: 938972.812 ops/s
Iteration  12: 941705.662 ops/s
Iteration  13: 930462.441 ops/s
Iteration  14: 938097.638 ops/s
Iteration  15: 930378.047 ops/s
Iteration  16: 941663.635 ops/s
Iteration  17: 936459.954 ops/s
Iteration  18: 942580.728 ops/s
Iteration  19: 942380.501 ops/s
Iteration  20: 945732.587 ops/s
Iteration  21: 927807.526 ops/s
Iteration  22: 936511.407 ops/s
Iteration  23: 918708.302 ops/s
Iteration  24: 939087.226 ops/s
Iteration  25: 946164.219 ops/s
Iteration  26: 944309.063 ops/s
Iteration  27: 947868.007 ops/s
Iteration  28: 943191.825 ops/s
Iteration  29: 945380.894 ops/s
Iteration  30: 947348.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeFromIndex":
  939064.257 ±(99.9%) 4818.930 ops/s [Average]
  (min, avg, max) = (918708.302, 939064.257, 947868.007), stdev = 7212.747
  CI (99.9%): [934245.327, 943883.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  939064.257 ± 4818.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521736.002 ops/s
# Warmup Iteration   2: 577834.547 ops/s
# Warmup Iteration   3: 759139.729 ops/s
# Warmup Iteration   4: 752596.014 ops/s
# Warmup Iteration   5: 759599.912 ops/s
# Warmup Iteration   6: 759091.532 ops/s
# Warmup Iteration   7: 765367.886 ops/s
# Warmup Iteration   8: 764733.153 ops/s
# Warmup Iteration   9: 765162.614 ops/s
# Warmup Iteration  10: 760934.630 ops/s
# Warmup Iteration  11: 647246.726 ops/s
# Warmup Iteration  12: 760049.932 ops/s
# Warmup Iteration  13: 762046.046 ops/s
# Warmup Iteration  14: 756821.767 ops/s
# Warmup Iteration  15: 764374.737 ops/s
# Warmup Iteration  16: 763008.605 ops/s
# Warmup Iteration  17: 791780.839 ops/s
# Warmup Iteration  18: 791116.042 ops/s
# Warmup Iteration  19: 784607.670 ops/s
# Warmup Iteration  20: 792750.430 ops/s
# Warmup Iteration  21: 790819.385 ops/s
# Warmup Iteration  22: 776327.981 ops/s
# Warmup Iteration  23: 784117.948 ops/s
# Warmup Iteration  24: 785383.755 ops/s
# Warmup Iteration  25: 793312.000 ops/s
# Warmup Iteration  26: 790321.903 ops/s
# Warmup Iteration  27: 784728.601 ops/s
# Warmup Iteration  28: 788212.709 ops/s
# Warmup Iteration  29: 791265.519 ops/s
# Warmup Iteration  30: 783345.434 ops/s
Iteration   1: 791087.968 ops/s
Iteration   2: 790480.390 ops/s
Iteration   3: 779775.541 ops/s
Iteration   4: 791882.161 ops/s
Iteration   5: 788917.953 ops/s
Iteration   6: 790213.652 ops/s
Iteration   7: 791747.690 ops/s
Iteration   8: 791101.499 ops/s
Iteration   9: 792816.932 ops/s
Iteration  10: 793401.299 ops/s
Iteration  11: 783842.621 ops/s
Iteration  12: 787119.927 ops/s
Iteration  13: 789783.649 ops/s
Iteration  14: 789883.740 ops/s
Iteration  15: 790471.929 ops/s
Iteration  16: 791411.461 ops/s
Iteration  17: 793957.016 ops/s
Iteration  18: 787685.848 ops/s
Iteration  19: 788196.140 ops/s
Iteration  20: 789989.488 ops/s
Iteration  21: 792885.262 ops/s
Iteration  22: 789081.817 ops/s
Iteration  23: 788701.153 ops/s
Iteration  24: 778315.827 ops/s
Iteration  25: 791484.994 ops/s
Iteration  26: 780770.750 ops/s
Iteration  27: 773886.784 ops/s
Iteration  28: 794108.462 ops/s
Iteration  29: 778227.515 ops/s
Iteration  30: 790597.659 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIf":
  788394.238 ±(99.9%) 3465.190 ops/s [Average]
  (min, avg, max) = (773886.784, 788394.238, 794108.462), stdev = 5186.534
  CI (99.9%): [784929.047, 791859.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIf  thrpt   30  788394.238 ± 3465.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606339.105 ops/s
# Warmup Iteration   2: 734115.706 ops/s
# Warmup Iteration   3: 904907.198 ops/s
# Warmup Iteration   4: 901176.870 ops/s
# Warmup Iteration   5: 909142.335 ops/s
# Warmup Iteration   6: 907056.088 ops/s
# Warmup Iteration   7: 906573.900 ops/s
# Warmup Iteration   8: 907115.374 ops/s
# Warmup Iteration   9: 778986.336 ops/s
# Warmup Iteration  10: 885530.841 ops/s
# Warmup Iteration  11: 896769.052 ops/s
# Warmup Iteration  12: 893502.946 ops/s
# Warmup Iteration  13: 886556.632 ops/s
# Warmup Iteration  14: 892528.652 ops/s
# Warmup Iteration  15: 892651.384 ops/s
# Warmup Iteration  16: 893660.745 ops/s
# Warmup Iteration  17: 935966.124 ops/s
# Warmup Iteration  18: 942406.944 ops/s
# Warmup Iteration  19: 939983.452 ops/s
# Warmup Iteration  20: 938426.866 ops/s
# Warmup Iteration  21: 935830.846 ops/s
# Warmup Iteration  22: 940625.713 ops/s
# Warmup Iteration  23: 935017.173 ops/s
# Warmup Iteration  24: 922580.944 ops/s
# Warmup Iteration  25: 932059.005 ops/s
# Warmup Iteration  26: 936431.991 ops/s
# Warmup Iteration  27: 940504.650 ops/s
# Warmup Iteration  28: 946495.215 ops/s
# Warmup Iteration  29: 931167.653 ops/s
# Warmup Iteration  30: 941554.024 ops/s
Iteration   1: 941460.390 ops/s
Iteration   2: 937964.805 ops/s
Iteration   3: 941395.867 ops/s
Iteration   4: 942047.830 ops/s
Iteration   5: 944229.407 ops/s
Iteration   6: 949496.916 ops/s
Iteration   7: 937494.972 ops/s
Iteration   8: 939841.229 ops/s
Iteration   9: 938746.137 ops/s
Iteration  10: 934601.142 ops/s
Iteration  11: 937774.451 ops/s
Iteration  12: 948540.994 ops/s
Iteration  13: 944675.893 ops/s
Iteration  14: 953407.252 ops/s
Iteration  15: 925555.201 ops/s
Iteration  16: 946243.042 ops/s
Iteration  17: 917962.164 ops/s
Iteration  18: 946661.083 ops/s
Iteration  19: 940660.462 ops/s
Iteration  20: 930666.989 ops/s
Iteration  21: 941835.346 ops/s
Iteration  22: 932312.689 ops/s
Iteration  23: 927626.740 ops/s
Iteration  24: 940328.975 ops/s
Iteration  25: 938632.848 ops/s
Iteration  26: 947356.193 ops/s
Iteration  27: 933745.777 ops/s
Iteration  28: 934761.782 ops/s
Iteration  29: 945075.931 ops/s
Iteration  30: 933431.186 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIfWith":
  939151.123 ±(99.9%) 5096.877 ops/s [Average]
  (min, avg, max) = (917962.164, 939151.123, 953407.252), stdev = 7628.767
  CI (99.9%): [934054.246, 944248.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_removeIfWith  thrpt   30  939151.123 ± 5096.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603847.756 ops/s
# Warmup Iteration   2: 735856.214 ops/s
# Warmup Iteration   3: 902373.281 ops/s
# Warmup Iteration   4: 892782.828 ops/s
# Warmup Iteration   5: 902913.851 ops/s
# Warmup Iteration   6: 911440.338 ops/s
# Warmup Iteration   7: 913041.254 ops/s
# Warmup Iteration   8: 903637.662 ops/s
# Warmup Iteration   9: 795890.279 ops/s
# Warmup Iteration  10: 877267.528 ops/s
# Warmup Iteration  11: 907123.757 ops/s
# Warmup Iteration  12: 910297.754 ops/s
# Warmup Iteration  13: 910202.577 ops/s
# Warmup Iteration  14: 906248.100 ops/s
# Warmup Iteration  15: 909937.894 ops/s
# Warmup Iteration  16: 907567.668 ops/s
# Warmup Iteration  17: 954531.186 ops/s
# Warmup Iteration  18: 959763.531 ops/s
# Warmup Iteration  19: 962118.758 ops/s
# Warmup Iteration  20: 960439.186 ops/s
# Warmup Iteration  21: 961053.156 ops/s
# Warmup Iteration  22: 962179.887 ops/s
# Warmup Iteration  23: 954990.084 ops/s
# Warmup Iteration  24: 947908.952 ops/s
# Warmup Iteration  25: 950746.425 ops/s
# Warmup Iteration  26: 956462.611 ops/s
# Warmup Iteration  27: 959953.141 ops/s
# Warmup Iteration  28: 960402.357 ops/s
# Warmup Iteration  29: 963255.369 ops/s
# Warmup Iteration  30: 952095.488 ops/s
Iteration   1: 961215.532 ops/s
Iteration   2: 960019.211 ops/s
Iteration   3: 959553.333 ops/s
Iteration   4: 962447.353 ops/s
Iteration   5: 962340.336 ops/s
Iteration   6: 938230.627 ops/s
Iteration   7: 960241.707 ops/s
Iteration   8: 954890.531 ops/s
Iteration   9: 961065.600 ops/s
Iteration  10: 957438.424 ops/s
Iteration  11: 956485.314 ops/s
Iteration  12: 956183.665 ops/s
Iteration  13: 959315.263 ops/s
Iteration  14: 958253.304 ops/s
Iteration  15: 956102.663 ops/s
Iteration  16: 963423.706 ops/s
Iteration  17: 962615.841 ops/s
Iteration  18: 955335.747 ops/s
Iteration  19: 946363.722 ops/s
Iteration  20: 959617.721 ops/s
Iteration  21: 944431.945 ops/s
Iteration  22: 961562.716 ops/s
Iteration  23: 961560.867 ops/s
Iteration  24: 944408.480 ops/s
Iteration  25: 957570.762 ops/s
Iteration  26: 964467.769 ops/s
Iteration  27: 958445.073 ops/s
Iteration  28: 960272.232 ops/s
Iteration  29: 960210.151 ops/s
Iteration  30: 962925.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAll":
  957566.518 ±(99.9%) 4193.697 ops/s [Average]
  (min, avg, max) = (938230.627, 957566.518, 964467.769), stdev = 6276.928
  CI (99.9%): [953372.822, 961760.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAll  thrpt   30  957566.518 ± 4193.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597644.697 ops/s
# Warmup Iteration   2: 732193.097 ops/s
# Warmup Iteration   3: 918718.984 ops/s
# Warmup Iteration   4: 916364.952 ops/s
# Warmup Iteration   5: 926245.225 ops/s
# Warmup Iteration   6: 920153.676 ops/s
# Warmup Iteration   7: 920805.189 ops/s
# Warmup Iteration   8: 915307.729 ops/s
# Warmup Iteration   9: 774949.591 ops/s
# Warmup Iteration  10: 915501.885 ops/s
# Warmup Iteration  11: 911909.131 ops/s
# Warmup Iteration  12: 918171.180 ops/s
# Warmup Iteration  13: 920037.509 ops/s
# Warmup Iteration  14: 917708.496 ops/s
# Warmup Iteration  15: 921528.281 ops/s
# Warmup Iteration  16: 920613.180 ops/s
# Warmup Iteration  17: 968190.095 ops/s
# Warmup Iteration  18: 963582.358 ops/s
# Warmup Iteration  19: 968425.833 ops/s
# Warmup Iteration  20: 967028.678 ops/s
# Warmup Iteration  21: 970704.630 ops/s
# Warmup Iteration  22: 967780.123 ops/s
# Warmup Iteration  23: 967948.536 ops/s
# Warmup Iteration  24: 967778.995 ops/s
# Warmup Iteration  25: 965450.997 ops/s
# Warmup Iteration  26: 960197.260 ops/s
# Warmup Iteration  27: 965912.773 ops/s
# Warmup Iteration  28: 970552.603 ops/s
# Warmup Iteration  29: 970229.795 ops/s
# Warmup Iteration  30: 969822.448 ops/s
Iteration   1: 972895.283 ops/s
Iteration   2: 965853.684 ops/s
Iteration   3: 973031.326 ops/s
Iteration   4: 966262.876 ops/s
Iteration   5: 965157.572 ops/s
Iteration   6: 965339.328 ops/s
Iteration   7: 971279.834 ops/s
Iteration   8: 970825.012 ops/s
Iteration   9: 968377.043 ops/s
Iteration  10: 967770.437 ops/s
Iteration  11: 964196.802 ops/s
Iteration  12: 970350.205 ops/s
Iteration  13: 964973.303 ops/s
Iteration  14: 971569.822 ops/s
Iteration  15: 975087.351 ops/s
Iteration  16: 951723.370 ops/s
Iteration  17: 963918.146 ops/s
Iteration  18: 969668.559 ops/s
Iteration  19: 971732.998 ops/s
Iteration  20: 970101.159 ops/s
Iteration  21: 971263.868 ops/s
Iteration  22: 973841.816 ops/s
Iteration  23: 968243.275 ops/s
Iteration  24: 967614.682 ops/s
Iteration  25: 951581.561 ops/s
Iteration  26: 946490.000 ops/s
Iteration  27: 960321.497 ops/s
Iteration  28: 969040.046 ops/s
Iteration  29: 971338.577 ops/s
Iteration  30: 973385.285 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable":
  967107.824 ±(99.9%) 4540.495 ops/s [Average]
  (min, avg, max) = (946490.000, 967107.824, 975087.351), stdev = 6796.000
  CI (99.9%): [962567.329, 971648.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  967107.824 ± 4540.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588446.928 ops/s
# Warmup Iteration   2: 716302.067 ops/s
# Warmup Iteration   3: 875081.747 ops/s
# Warmup Iteration   4: 887332.114 ops/s
# Warmup Iteration   5: 887734.534 ops/s
# Warmup Iteration   6: 886630.838 ops/s
# Warmup Iteration   7: 878270.730 ops/s
# Warmup Iteration   8: 885467.144 ops/s
# Warmup Iteration   9: 797708.233 ops/s
# Warmup Iteration  10: 832943.220 ops/s
# Warmup Iteration  11: 882899.372 ops/s
# Warmup Iteration  12: 889592.741 ops/s
# Warmup Iteration  13: 886977.158 ops/s
# Warmup Iteration  14: 876207.727 ops/s
# Warmup Iteration  15: 880520.585 ops/s
# Warmup Iteration  16: 886098.769 ops/s
# Warmup Iteration  17: 928689.949 ops/s
# Warmup Iteration  18: 935375.057 ops/s
# Warmup Iteration  19: 932772.136 ops/s
# Warmup Iteration  20: 931955.889 ops/s
# Warmup Iteration  21: 930989.442 ops/s
# Warmup Iteration  22: 932673.214 ops/s
# Warmup Iteration  23: 930834.492 ops/s
# Warmup Iteration  24: 921210.556 ops/s
# Warmup Iteration  25: 935466.456 ops/s
# Warmup Iteration  26: 935997.458 ops/s
# Warmup Iteration  27: 937343.523 ops/s
# Warmup Iteration  28: 924084.466 ops/s
# Warmup Iteration  29: 928517.753 ops/s
# Warmup Iteration  30: 927916.515 ops/s
Iteration   1: 937016.812 ops/s
Iteration   2: 937125.448 ops/s
Iteration   3: 935878.055 ops/s
Iteration   4: 924039.044 ops/s
Iteration   5: 938688.527 ops/s
Iteration   6: 937730.514 ops/s
Iteration   7: 933679.033 ops/s
Iteration   8: 935842.579 ops/s
Iteration   9: 935744.488 ops/s
Iteration  10: 938914.569 ops/s
Iteration  11: 931861.271 ops/s
Iteration  12: 923201.262 ops/s
Iteration  13: 915638.658 ops/s
Iteration  14: 934362.972 ops/s
Iteration  15: 935987.816 ops/s
Iteration  16: 919639.769 ops/s
Iteration  17: 930898.501 ops/s
Iteration  18: 930355.183 ops/s
Iteration  19: 930811.492 ops/s
Iteration  20: 934382.874 ops/s
Iteration  21: 933351.494 ops/s
Iteration  22: 929896.013 ops/s
Iteration  23: 931662.136 ops/s
Iteration  24: 934383.880 ops/s
Iteration  25: 932577.298 ops/s
Iteration  26: 935575.601 ops/s
Iteration  27: 916575.927 ops/s
Iteration  28: 931656.524 ops/s
Iteration  29: 932141.568 ops/s
Iteration  30: 938514.009 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reverseThis":
  931937.777 ±(99.9%) 4157.161 ops/s [Average]
  (min, avg, max) = (915638.658, 931937.777, 938914.569), stdev = 6222.244
  CI (99.9%): [927780.616, 936094.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_reverseThis  thrpt   30  931937.777 ± 4157.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1491862.167 ops/s
# Warmup Iteration   2: 3648398.932 ops/s
# Warmup Iteration   3: 3170016.318 ops/s
# Warmup Iteration   4: 3714161.899 ops/s
# Warmup Iteration   5: 3724854.158 ops/s
# Warmup Iteration   6: 3770917.797 ops/s
# Warmup Iteration   7: 3745998.296 ops/s
# Warmup Iteration   8: 3739013.815 ops/s
# Warmup Iteration   9: 3735339.137 ops/s
# Warmup Iteration  10: 3765624.889 ops/s
# Warmup Iteration  11: 3753826.398 ops/s
# Warmup Iteration  12: 3750226.422 ops/s
# Warmup Iteration  13: 3767928.218 ops/s
# Warmup Iteration  14: 3764045.371 ops/s
# Warmup Iteration  15: 3751084.786 ops/s
# Warmup Iteration  16: 3751687.950 ops/s
# Warmup Iteration  17: 3742586.841 ops/s
# Warmup Iteration  18: 3740581.059 ops/s
# Warmup Iteration  19: 3661310.487 ops/s
# Warmup Iteration  20: 3741976.632 ops/s
# Warmup Iteration  21: 3719186.366 ops/s
# Warmup Iteration  22: 3739458.780 ops/s
# Warmup Iteration  23: 3696912.660 ops/s
# Warmup Iteration  24: 3732883.348 ops/s
# Warmup Iteration  25: 3727562.575 ops/s
# Warmup Iteration  26: 3746511.185 ops/s
# Warmup Iteration  27: 3749752.951 ops/s
# Warmup Iteration  28: 3746346.709 ops/s
# Warmup Iteration  29: 3749521.077 ops/s
# Warmup Iteration  30: 3712371.325 ops/s
Iteration   1: 3744584.006 ops/s
Iteration   2: 3761182.064 ops/s
Iteration   3: 3741659.987 ops/s
Iteration   4: 3747410.198 ops/s
Iteration   5: 3696310.808 ops/s
Iteration   6: 3741437.704 ops/s
Iteration   7: 3736287.652 ops/s
Iteration   8: 3748297.535 ops/s
Iteration   9: 3768758.501 ops/s
Iteration  10: 3759298.419 ops/s
Iteration  11: 3735805.058 ops/s
Iteration  12: 3769939.639 ops/s
Iteration  13: 3730552.665 ops/s
Iteration  14: 3732843.741 ops/s
Iteration  15: 3754143.203 ops/s
Iteration  16: 3734749.223 ops/s
Iteration  17: 3713315.442 ops/s
Iteration  18: 3727960.710 ops/s
Iteration  19: 3658855.194 ops/s
Iteration  20: 3724386.387 ops/s
Iteration  21: 3732081.240 ops/s
Iteration  22: 3683677.673 ops/s
Iteration  23: 3645324.403 ops/s
Iteration  24: 3751820.482 ops/s
Iteration  25: 3737958.948 ops/s
Iteration  26: 3759781.854 ops/s
Iteration  27: 3730139.350 ops/s
Iteration  28: 3704250.933 ops/s
Iteration  29: 3764767.604 ops/s
Iteration  30: 3758313.980 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_select":
  3733196.487 ±(99.9%) 20141.682 ops/s [Average]
  (min, avg, max) = (3645324.403, 3733196.487, 3769939.639), stdev = 30147.124
  CI (99.9%): [3713054.804, 3753338.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_select  thrpt   30  3733196.487 ± 20141.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1689569.957 ops/s
# Warmup Iteration   2: 3614376.894 ops/s
# Warmup Iteration   3: 3140854.949 ops/s
# Warmup Iteration   4: 3720990.482 ops/s
# Warmup Iteration   5: 3712953.577 ops/s
# Warmup Iteration   6: 3703740.892 ops/s
# Warmup Iteration   7: 3688732.011 ops/s
# Warmup Iteration   8: 3715580.711 ops/s
# Warmup Iteration   9: 3674494.399 ops/s
# Warmup Iteration  10: 3660092.288 ops/s
# Warmup Iteration  11: 3678372.150 ops/s
# Warmup Iteration  12: 3704236.377 ops/s
# Warmup Iteration  13: 3705397.220 ops/s
# Warmup Iteration  14: 3715647.222 ops/s
# Warmup Iteration  15: 3680532.643 ops/s
# Warmup Iteration  16: 3637280.725 ops/s
# Warmup Iteration  17: 3642381.415 ops/s
# Warmup Iteration  18: 3692443.696 ops/s
# Warmup Iteration  19: 3693821.101 ops/s
# Warmup Iteration  20: 3694811.607 ops/s
# Warmup Iteration  21: 3693932.602 ops/s
# Warmup Iteration  22: 3655275.618 ops/s
# Warmup Iteration  23: 3690163.757 ops/s
# Warmup Iteration  24: 3675547.489 ops/s
# Warmup Iteration  25: 3696003.389 ops/s
# Warmup Iteration  26: 3683026.315 ops/s
# Warmup Iteration  27: 3692278.027 ops/s
# Warmup Iteration  28: 3691574.322 ops/s
# Warmup Iteration  29: 3690227.015 ops/s
# Warmup Iteration  30: 3681238.249 ops/s
Iteration   1: 3683819.503 ops/s
Iteration   2: 3688691.817 ops/s
Iteration   3: 3678660.946 ops/s
Iteration   4: 3685565.390 ops/s
Iteration   5: 3696532.319 ops/s
Iteration   6: 3647795.349 ops/s
Iteration   7: 3689969.929 ops/s
Iteration   8: 3694455.612 ops/s
Iteration   9: 3691146.710 ops/s
Iteration  10: 3675784.927 ops/s
Iteration  11: 3706560.645 ops/s
Iteration  12: 3704950.525 ops/s
Iteration  13: 3689110.326 ops/s
Iteration  14: 3707127.218 ops/s
Iteration  15: 3643645.787 ops/s
Iteration  16: 3701008.934 ops/s
Iteration  17: 3703625.468 ops/s
Iteration  18: 3697481.311 ops/s
Iteration  19: 3563112.658 ops/s
Iteration  20: 3698547.807 ops/s
Iteration  21: 3637083.932 ops/s
Iteration  22: 3676274.125 ops/s
Iteration  23: 3691847.720 ops/s
Iteration  24: 3690058.011 ops/s
Iteration  25: 3681507.017 ops/s
Iteration  26: 3678704.927 ops/s
Iteration  27: 3706209.358 ops/s
Iteration  28: 3670460.570 ops/s
Iteration  29: 3692658.082 ops/s
Iteration  30: 3678504.961 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_selectWith":
  3681696.729 ±(99.9%) 19067.061 ops/s [Average]
  (min, avg, max) = (3563112.658, 3681696.729, 3707127.218), stdev = 28538.681
  CI (99.9%): [3662629.668, 3700763.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_selectWith  thrpt   30  3681696.729 ± 19067.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4988959.781 ops/s
# Warmup Iteration   2: 10566765.249 ops/s
# Warmup Iteration   3: 8946181.239 ops/s
# Warmup Iteration   4: 10560489.833 ops/s
# Warmup Iteration   5: 10563619.310 ops/s
# Warmup Iteration   6: 10616229.696 ops/s
# Warmup Iteration   7: 10600955.096 ops/s
# Warmup Iteration   8: 10652052.501 ops/s
# Warmup Iteration   9: 10646339.414 ops/s
# Warmup Iteration  10: 10609076.943 ops/s
# Warmup Iteration  11: 10378158.635 ops/s
# Warmup Iteration  12: 10578602.866 ops/s
# Warmup Iteration  13: 10535833.097 ops/s
# Warmup Iteration  14: 10509189.352 ops/s
# Warmup Iteration  15: 10615411.673 ops/s
# Warmup Iteration  16: 10584981.508 ops/s
# Warmup Iteration  17: 10748819.378 ops/s
# Warmup Iteration  18: 10675225.998 ops/s
# Warmup Iteration  19: 10759070.961 ops/s
# Warmup Iteration  20: 10765766.308 ops/s
# Warmup Iteration  21: 10517287.148 ops/s
# Warmup Iteration  22: 10674530.744 ops/s
# Warmup Iteration  23: 10578601.662 ops/s
# Warmup Iteration  24: 10717130.574 ops/s
# Warmup Iteration  25: 10730141.566 ops/s
# Warmup Iteration  26: 10715038.583 ops/s
# Warmup Iteration  27: 10667664.793 ops/s
# Warmup Iteration  28: 10752266.768 ops/s
# Warmup Iteration  29: 10727695.402 ops/s
# Warmup Iteration  30: 10690127.749 ops/s
Iteration   1: 10693485.292 ops/s
Iteration   2: 10722803.608 ops/s
Iteration   3: 10548873.005 ops/s
Iteration   4: 10764157.529 ops/s
Iteration   5: 10742711.667 ops/s
Iteration   6: 10618946.437 ops/s
Iteration   7: 10767800.382 ops/s
Iteration   8: 10713862.436 ops/s
Iteration   9: 10702985.212 ops/s
Iteration  10: 10661279.499 ops/s
Iteration  11: 10728473.362 ops/s
Iteration  12: 10737559.064 ops/s
Iteration  13: 10570425.250 ops/s
Iteration  14: 10733659.169 ops/s
Iteration  15: 10746150.772 ops/s
Iteration  16: 10728333.020 ops/s
Iteration  17: 10575517.325 ops/s
Iteration  18: 10683596.309 ops/s
Iteration  19: 10525337.986 ops/s
Iteration  20: 10768300.562 ops/s
Iteration  21: 10782467.667 ops/s
Iteration  22: 10538017.815 ops/s
Iteration  23: 10519147.279 ops/s
Iteration  24: 10740370.056 ops/s
Iteration  25: 10711336.176 ops/s
Iteration  26: 10801800.335 ops/s
Iteration  27: 10752275.110 ops/s
Iteration  28: 10599762.285 ops/s
Iteration  29: 10510170.479 ops/s
Iteration  30: 10776998.026 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_serialization":
  10682220.104 ±(99.9%) 60697.244 ops/s [Average]
  (min, avg, max) = (10510170.479, 10682220.104, 10801800.335), stdev = 90848.784
  CI (99.9%): [10621522.860, 10742917.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_serialization  thrpt   30  10682220.104 ± 60697.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 583334.462 ops/s
# Warmup Iteration   2: 694891.396 ops/s
# Warmup Iteration   3: 867511.114 ops/s
# Warmup Iteration   4: 873636.111 ops/s
# Warmup Iteration   5: 867185.118 ops/s
# Warmup Iteration   6: 872145.686 ops/s
# Warmup Iteration   7: 870869.140 ops/s
# Warmup Iteration   8: 862243.918 ops/s
# Warmup Iteration   9: 837260.033 ops/s
# Warmup Iteration  10: 773187.869 ops/s
# Warmup Iteration  11: 867440.304 ops/s
# Warmup Iteration  12: 858376.475 ops/s
# Warmup Iteration  13: 867725.902 ops/s
# Warmup Iteration  14: 871972.352 ops/s
# Warmup Iteration  15: 874516.417 ops/s
# Warmup Iteration  16: 871469.769 ops/s
# Warmup Iteration  17: 912754.725 ops/s
# Warmup Iteration  18: 909394.541 ops/s
# Warmup Iteration  19: 904370.233 ops/s
# Warmup Iteration  20: 909341.968 ops/s
# Warmup Iteration  21: 908069.481 ops/s
# Warmup Iteration  22: 903984.513 ops/s
# Warmup Iteration  23: 915087.854 ops/s
# Warmup Iteration  24: 901962.417 ops/s
# Warmup Iteration  25: 906777.732 ops/s
# Warmup Iteration  26: 912265.440 ops/s
# Warmup Iteration  27: 911955.049 ops/s
# Warmup Iteration  28: 918129.619 ops/s
# Warmup Iteration  29: 922505.301 ops/s
# Warmup Iteration  30: 912074.561 ops/s
Iteration   1: 920867.770 ops/s
Iteration   2: 914752.977 ops/s
Iteration   3: 904045.483 ops/s
Iteration   4: 919434.505 ops/s
Iteration   5: 918845.633 ops/s
Iteration   6: 917612.580 ops/s
Iteration   7: 918724.702 ops/s
Iteration   8: 906004.223 ops/s
Iteration   9: 919411.306 ops/s
Iteration  10: 912962.174 ops/s
Iteration  11: 899296.957 ops/s
Iteration  12: 898479.638 ops/s
Iteration  13: 913593.227 ops/s
Iteration  14: 909685.735 ops/s
Iteration  15: 920884.423 ops/s
Iteration  16: 913765.971 ops/s
Iteration  17: 920842.290 ops/s
Iteration  18: 911099.008 ops/s
Iteration  19: 915989.962 ops/s
Iteration  20: 912850.451 ops/s
Iteration  21: 920733.814 ops/s
Iteration  22: 891718.628 ops/s
Iteration  23: 913599.480 ops/s
Iteration  24: 922909.015 ops/s
Iteration  25: 912956.832 ops/s
Iteration  26: 912661.271 ops/s
Iteration  27: 926274.062 ops/s
Iteration  28: 912804.224 ops/s
Iteration  29: 916921.679 ops/s
Iteration  30: 914223.880 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_set":
  913798.397 ±(99.9%) 5110.794 ops/s [Average]
  (min, avg, max) = (891718.628, 913798.397, 926274.062), stdev = 7649.596
  CI (99.9%): [908687.603, 918909.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_set  thrpt   30  913798.397 ± 5110.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573182.230 ops/s
# Warmup Iteration   2: 674837.319 ops/s
# Warmup Iteration   3: 849295.825 ops/s
# Warmup Iteration   4: 852045.105 ops/s
# Warmup Iteration   5: 832907.866 ops/s
# Warmup Iteration   6: 845788.189 ops/s
# Warmup Iteration   7: 845036.477 ops/s
# Warmup Iteration   8: 845604.551 ops/s
# Warmup Iteration   9: 849978.342 ops/s
# Warmup Iteration  10: 714289.221 ops/s
# Warmup Iteration  11: 842493.918 ops/s
# Warmup Iteration  12: 849242.036 ops/s
# Warmup Iteration  13: 847791.896 ops/s
# Warmup Iteration  14: 840976.481 ops/s
# Warmup Iteration  15: 856808.621 ops/s
# Warmup Iteration  16: 850476.731 ops/s
# Warmup Iteration  17: 894336.082 ops/s
# Warmup Iteration  18: 889664.247 ops/s
# Warmup Iteration  19: 890301.909 ops/s
# Warmup Iteration  20: 890070.536 ops/s
# Warmup Iteration  21: 880521.850 ops/s
# Warmup Iteration  22: 892221.670 ops/s
# Warmup Iteration  23: 893894.127 ops/s
# Warmup Iteration  24: 896256.332 ops/s
# Warmup Iteration  25: 894549.865 ops/s
# Warmup Iteration  26: 893822.406 ops/s
# Warmup Iteration  27: 875112.446 ops/s
# Warmup Iteration  28: 895482.614 ops/s
# Warmup Iteration  29: 891716.029 ops/s
# Warmup Iteration  30: 888295.269 ops/s
Iteration   1: 892874.458 ops/s
Iteration   2: 881934.725 ops/s
Iteration   3: 899473.961 ops/s
Iteration   4: 900678.539 ops/s
Iteration   5: 889315.988 ops/s
Iteration   6: 877427.265 ops/s
Iteration   7: 895159.669 ops/s
Iteration   8: 898851.782 ops/s
Iteration   9: 890785.424 ops/s
Iteration  10: 893375.797 ops/s
Iteration  11: 906760.909 ops/s
Iteration  12: 883192.277 ops/s
Iteration  13: 902576.085 ops/s
Iteration  14: 892021.546 ops/s
Iteration  15: 894275.318 ops/s
Iteration  16: 896017.227 ops/s
Iteration  17: 882049.619 ops/s
Iteration  18: 893284.343 ops/s
Iteration  19: 891982.012 ops/s
Iteration  20: 895467.279 ops/s
Iteration  21: 876165.136 ops/s
Iteration  22: 906842.213 ops/s
Iteration  23: 891911.442 ops/s
Iteration  24: 896130.761 ops/s
Iteration  25: 895188.701 ops/s
Iteration  26: 896369.049 ops/s
Iteration  27: 883271.745 ops/s
Iteration  28: 886104.581 ops/s
Iteration  29: 890523.569 ops/s
Iteration  30: 889322.148 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_setAtIndex":
  892311.119 ±(99.9%) 5099.040 ops/s [Average]
  (min, avg, max) = (876165.136, 892311.119, 906842.213), stdev = 7632.004
  CI (99.9%): [887212.079, 897410.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_setAtIndex  thrpt   30  892311.119 ± 5099.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558927.076 ops/s
# Warmup Iteration   2: 675939.326 ops/s
# Warmup Iteration   3: 850008.313 ops/s
# Warmup Iteration   4: 851808.784 ops/s
# Warmup Iteration   5: 845811.004 ops/s
# Warmup Iteration   6: 851190.765 ops/s
# Warmup Iteration   7: 852695.650 ops/s
# Warmup Iteration   8: 856146.835 ops/s
# Warmup Iteration   9: 833501.642 ops/s
# Warmup Iteration  10: 751541.017 ops/s
# Warmup Iteration  11: 859921.115 ops/s
# Warmup Iteration  12: 846864.313 ops/s
# Warmup Iteration  13: 855377.403 ops/s
# Warmup Iteration  14: 860146.917 ops/s
# Warmup Iteration  15: 856657.418 ops/s
# Warmup Iteration  16: 851019.347 ops/s
# Warmup Iteration  17: 906917.180 ops/s
# Warmup Iteration  18: 906411.790 ops/s
# Warmup Iteration  19: 890620.832 ops/s
# Warmup Iteration  20: 902770.516 ops/s
# Warmup Iteration  21: 901918.324 ops/s
# Warmup Iteration  22: 904352.025 ops/s
# Warmup Iteration  23: 903500.932 ops/s
# Warmup Iteration  24: 900031.218 ops/s
# Warmup Iteration  25: 900249.750 ops/s
# Warmup Iteration  26: 894667.170 ops/s
# Warmup Iteration  27: 900162.634 ops/s
# Warmup Iteration  28: 902393.643 ops/s
# Warmup Iteration  29: 898104.054 ops/s
# Warmup Iteration  30: 893933.958 ops/s
Iteration   1: 902528.780 ops/s
Iteration   2: 889320.103 ops/s
Iteration   3: 901768.619 ops/s
Iteration   4: 901781.968 ops/s
Iteration   5: 905176.751 ops/s
Iteration   6: 883211.193 ops/s
Iteration   7: 902147.913 ops/s
Iteration   8: 898339.556 ops/s
Iteration   9: 899545.984 ops/s
Iteration  10: 900033.060 ops/s
Iteration  11: 889397.563 ops/s
Iteration  12: 890658.532 ops/s
Iteration  13: 900985.348 ops/s
Iteration  14: 889342.984 ops/s
Iteration  15: 888947.932 ops/s
Iteration  16: 903856.721 ops/s
Iteration  17: 901244.080 ops/s
Iteration  18: 900523.152 ops/s
Iteration  19: 902083.417 ops/s
Iteration  20: 901770.472 ops/s
Iteration  21: 903910.564 ops/s
Iteration  22: 886759.360 ops/s
Iteration  23: 901619.950 ops/s
Iteration  24: 895225.086 ops/s
Iteration  25: 900038.542 ops/s
Iteration  26: 900269.813 ops/s
Iteration  27: 897032.240 ops/s
Iteration  28: 901894.126 ops/s
Iteration  29: 905543.850 ops/s
Iteration  30: 899203.259 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThis":
  898138.697 ±(99.9%) 4038.272 ops/s [Average]
  (min, avg, max) = (883211.193, 898138.697, 905543.850), stdev = 6044.296
  CI (99.9%): [894100.425, 902176.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThis  thrpt   30  898138.697 ± 4038.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570870.653 ops/s
# Warmup Iteration   2: 687785.165 ops/s
# Warmup Iteration   3: 853922.665 ops/s
# Warmup Iteration   4: 865668.995 ops/s
# Warmup Iteration   5: 860891.605 ops/s
# Warmup Iteration   6: 853537.642 ops/s
# Warmup Iteration   7: 861830.783 ops/s
# Warmup Iteration   8: 860639.995 ops/s
# Warmup Iteration   9: 822625.916 ops/s
# Warmup Iteration  10: 779853.500 ops/s
# Warmup Iteration  11: 864502.033 ops/s
# Warmup Iteration  12: 864131.338 ops/s
# Warmup Iteration  13: 861582.821 ops/s
# Warmup Iteration  14: 864298.967 ops/s
# Warmup Iteration  15: 864479.728 ops/s
# Warmup Iteration  16: 840178.266 ops/s
# Warmup Iteration  17: 911233.266 ops/s
# Warmup Iteration  18: 908481.321 ops/s
# Warmup Iteration  19: 910257.866 ops/s
# Warmup Iteration  20: 909755.716 ops/s
# Warmup Iteration  21: 903298.058 ops/s
# Warmup Iteration  22: 888181.962 ops/s
# Warmup Iteration  23: 907470.223 ops/s
# Warmup Iteration  24: 909196.603 ops/s
# Warmup Iteration  25: 900382.942 ops/s
# Warmup Iteration  26: 905375.530 ops/s
# Warmup Iteration  27: 906687.810 ops/s
# Warmup Iteration  28: 908145.046 ops/s
# Warmup Iteration  29: 909106.062 ops/s
# Warmup Iteration  30: 909717.279 ops/s
Iteration   1: 893461.810 ops/s
Iteration   2: 902323.149 ops/s
Iteration   3: 916454.958 ops/s
Iteration   4: 904104.881 ops/s
Iteration   5: 892552.954 ops/s
Iteration   6: 900817.997 ops/s
Iteration   7: 899045.073 ops/s
Iteration   8: 903776.295 ops/s
Iteration   9: 908251.231 ops/s
Iteration  10: 907293.930 ops/s
Iteration  11: 912264.373 ops/s
Iteration  12: 912410.258 ops/s
Iteration  13: 910320.056 ops/s
Iteration  14: 908310.365 ops/s
Iteration  15: 896134.425 ops/s
Iteration  16: 911794.074 ops/s
Iteration  17: 910160.151 ops/s
Iteration  18: 900633.538 ops/s
Iteration  19: 896363.175 ops/s
Iteration  20: 893338.487 ops/s
Iteration  21: 909829.502 ops/s
Iteration  22: 910248.582 ops/s
Iteration  23: 909764.596 ops/s
Iteration  24: 904878.052 ops/s
Iteration  25: 911026.974 ops/s
Iteration  26: 907193.073 ops/s
Iteration  27: 890654.329 ops/s
Iteration  28: 912759.033 ops/s
Iteration  29: 901382.495 ops/s
Iteration  30: 906403.815 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisBy":
  904798.388 ±(99.9%) 4675.249 ops/s [Average]
  (min, avg, max) = (890654.329, 904798.388, 916454.958), stdev = 6997.693
  CI (99.9%): [900123.139, 909473.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisBy  thrpt   30  904798.388 ± 4675.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522751.341 ops/s
# Warmup Iteration   2: 597471.123 ops/s
# Warmup Iteration   3: 764880.610 ops/s
# Warmup Iteration   4: 762986.134 ops/s
# Warmup Iteration   5: 761587.373 ops/s
# Warmup Iteration   6: 767568.315 ops/s
# Warmup Iteration   7: 774598.566 ops/s
# Warmup Iteration   8: 762981.255 ops/s
# Warmup Iteration   9: 764971.144 ops/s
# Warmup Iteration  10: 705101.344 ops/s
# Warmup Iteration  11: 705385.782 ops/s
# Warmup Iteration  12: 771997.954 ops/s
# Warmup Iteration  13: 770662.111 ops/s
# Warmup Iteration  14: 761961.731 ops/s
# Warmup Iteration  15: 761267.789 ops/s
# Warmup Iteration  16: 770822.541 ops/s
# Warmup Iteration  17: 804006.717 ops/s
# Warmup Iteration  18: 800772.315 ops/s
# Warmup Iteration  19: 803365.312 ops/s
# Warmup Iteration  20: 804676.918 ops/s
# Warmup Iteration  21: 806772.165 ops/s
# Warmup Iteration  22: 808005.006 ops/s
# Warmup Iteration  23: 806342.391 ops/s
# Warmup Iteration  24: 799444.729 ops/s
# Warmup Iteration  25: 813739.259 ops/s
# Warmup Iteration  26: 806715.039 ops/s
# Warmup Iteration  27: 810854.696 ops/s
# Warmup Iteration  28: 793910.362 ops/s
# Warmup Iteration  29: 799324.105 ops/s
# Warmup Iteration  30: 802521.077 ops/s
Iteration   1: 805063.339 ops/s
Iteration   2: 807910.051 ops/s
Iteration   3: 797186.430 ops/s
Iteration   4: 805679.785 ops/s
Iteration   5: 804278.029 ops/s
Iteration   6: 802977.968 ops/s
Iteration   7: 810506.755 ops/s
Iteration   8: 802905.747 ops/s
Iteration   9: 783656.112 ops/s
Iteration  10: 803181.366 ops/s
Iteration  11: 813007.632 ops/s
Iteration  12: 807574.575 ops/s
Iteration  13: 808352.440 ops/s
Iteration  14: 793032.849 ops/s
Iteration  15: 793715.320 ops/s
Iteration  16: 804007.027 ops/s
Iteration  17: 810458.079 ops/s
Iteration  18: 808301.905 ops/s
Iteration  19: 810992.969 ops/s
Iteration  20: 809147.800 ops/s
Iteration  21: 787143.037 ops/s
Iteration  22: 805680.619 ops/s
Iteration  23: 807352.833 ops/s
Iteration  24: 804086.385 ops/s
Iteration  25: 807173.411 ops/s
Iteration  26: 811278.092 ops/s
Iteration  27: 805380.225 ops/s
Iteration  28: 807869.077 ops/s
Iteration  29: 804294.846 ops/s
Iteration  30: 808222.118 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByBoolean":
  804347.227 ±(99.9%) 4628.549 ops/s [Average]
  (min, avg, max) = (783656.112, 804347.227, 813007.632), stdev = 6927.795
  CI (99.9%): [799718.678, 808975.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  804347.227 ± 4628.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570070.560 ops/s
# Warmup Iteration   2: 683785.784 ops/s
# Warmup Iteration   3: 860338.020 ops/s
# Warmup Iteration   4: 867331.110 ops/s
# Warmup Iteration   5: 868083.409 ops/s
# Warmup Iteration   6: 864860.637 ops/s
# Warmup Iteration   7: 858177.094 ops/s
# Warmup Iteration   8: 867877.838 ops/s
# Warmup Iteration   9: 795153.136 ops/s
# Warmup Iteration  10: 792207.277 ops/s
# Warmup Iteration  11: 861073.327 ops/s
# Warmup Iteration  12: 867983.464 ops/s
# Warmup Iteration  13: 864380.357 ops/s
# Warmup Iteration  14: 861667.464 ops/s
# Warmup Iteration  15: 864914.023 ops/s
# Warmup Iteration  16: 856505.484 ops/s
# Warmup Iteration  17: 902635.867 ops/s
# Warmup Iteration  18: 903532.811 ops/s
# Warmup Iteration  19: 898203.024 ops/s
# Warmup Iteration  20: 893449.182 ops/s
# Warmup Iteration  21: 892812.231 ops/s
# Warmup Iteration  22: 899980.772 ops/s
# Warmup Iteration  23: 896590.804 ops/s
# Warmup Iteration  24: 900249.569 ops/s
# Warmup Iteration  25: 886152.960 ops/s
# Warmup Iteration  26: 903036.100 ops/s
# Warmup Iteration  27: 901055.351 ops/s
# Warmup Iteration  28: 902443.541 ops/s
# Warmup Iteration  29: 894653.965 ops/s
# Warmup Iteration  30: 901964.947 ops/s
Iteration   1: 898757.668 ops/s
Iteration   2: 878984.638 ops/s
Iteration   3: 902489.811 ops/s
Iteration   4: 904678.057 ops/s
Iteration   5: 904792.422 ops/s
Iteration   6: 905477.918 ops/s
Iteration   7: 905390.051 ops/s
Iteration   8: 868908.608 ops/s
Iteration   9: 900991.404 ops/s
Iteration  10: 886293.419 ops/s
Iteration  11: 908899.643 ops/s
Iteration  12: 894263.368 ops/s
Iteration  13: 887546.625 ops/s
Iteration  14: 897906.571 ops/s
Iteration  15: 899315.870 ops/s
Iteration  16: 874655.822 ops/s
Iteration  17: 890499.308 ops/s
Iteration  18: 904802.018 ops/s
Iteration  19: 896296.538 ops/s
Iteration  20: 899690.569 ops/s
Iteration  21: 904100.220 ops/s
Iteration  22: 905323.521 ops/s
Iteration  23: 902975.090 ops/s
Iteration  24: 906089.461 ops/s
Iteration  25: 898651.385 ops/s
Iteration  26: 901606.008 ops/s
Iteration  27: 903168.756 ops/s
Iteration  28: 905567.054 ops/s
Iteration  29: 902731.151 ops/s
Iteration  30: 907443.505 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByByte":
  898276.549 ±(99.9%) 6635.600 ops/s [Average]
  (min, avg, max) = (868908.608, 898276.549, 908899.643), stdev = 9931.855
  CI (99.9%): [891640.949, 904912.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  898276.549 ± 6635.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 523605.911 ops/s
# Warmup Iteration   2: 588623.591 ops/s
# Warmup Iteration   3: 765025.639 ops/s
# Warmup Iteration   4: 764583.642 ops/s
# Warmup Iteration   5: 761665.206 ops/s
# Warmup Iteration   6: 761874.630 ops/s
# Warmup Iteration   7: 767240.201 ops/s
# Warmup Iteration   8: 762229.166 ops/s
# Warmup Iteration   9: 764275.902 ops/s
# Warmup Iteration  10: 722957.507 ops/s
# Warmup Iteration  11: 680650.055 ops/s
# Warmup Iteration  12: 766612.076 ops/s
# Warmup Iteration  13: 760637.629 ops/s
# Warmup Iteration  14: 759532.470 ops/s
# Warmup Iteration  15: 766797.231 ops/s
# Warmup Iteration  16: 762446.567 ops/s
# Warmup Iteration  17: 799315.895 ops/s
# Warmup Iteration  18: 788962.318 ops/s
# Warmup Iteration  19: 793982.463 ops/s
# Warmup Iteration  20: 799398.175 ops/s
# Warmup Iteration  21: 800560.497 ops/s
# Warmup Iteration  22: 793482.928 ops/s
# Warmup Iteration  23: 799105.610 ops/s
# Warmup Iteration  24: 799799.681 ops/s
# Warmup Iteration  25: 794361.873 ops/s
# Warmup Iteration  26: 799933.585 ops/s
# Warmup Iteration  27: 787379.550 ops/s
# Warmup Iteration  28: 800168.278 ops/s
# Warmup Iteration  29: 801740.723 ops/s
# Warmup Iteration  30: 796588.103 ops/s
Iteration   1: 800122.685 ops/s
Iteration   2: 797918.057 ops/s
Iteration   3: 787205.568 ops/s
Iteration   4: 794457.258 ops/s
Iteration   5: 788886.679 ops/s
Iteration   6: 797432.656 ops/s
Iteration   7: 799162.908 ops/s
Iteration   8: 800971.837 ops/s
Iteration   9: 784753.567 ops/s
Iteration  10: 797730.631 ops/s
Iteration  11: 795847.663 ops/s
Iteration  12: 802674.192 ops/s
Iteration  13: 796650.716 ops/s
Iteration  14: 796678.400 ops/s
Iteration  15: 797226.725 ops/s
Iteration  16: 798215.435 ops/s
Iteration  17: 783952.601 ops/s
Iteration  18: 799994.303 ops/s
Iteration  19: 799261.724 ops/s
Iteration  20: 791562.571 ops/s
Iteration  21: 785917.205 ops/s
Iteration  22: 800623.285 ops/s
Iteration  23: 790869.891 ops/s
Iteration  24: 799981.153 ops/s
Iteration  25: 789245.916 ops/s
Iteration  26: 799443.165 ops/s
Iteration  27: 798404.736 ops/s
Iteration  28: 802774.789 ops/s
Iteration  29: 801490.219 ops/s
Iteration  30: 798010.602 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByChar":
  795915.571 ±(99.9%) 3657.024 ops/s [Average]
  (min, avg, max) = (783952.601, 795915.571, 802774.789), stdev = 5473.662
  CI (99.9%): [792258.547, 799572.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  795915.571 ± 3657.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526130.958 ops/s
# Warmup Iteration   2: 600566.717 ops/s
# Warmup Iteration   3: 754977.783 ops/s
# Warmup Iteration   4: 766662.081 ops/s
# Warmup Iteration   5: 761455.685 ops/s
# Warmup Iteration   6: 766032.286 ops/s
# Warmup Iteration   7: 767790.538 ops/s
# Warmup Iteration   8: 760954.785 ops/s
# Warmup Iteration   9: 769965.776 ops/s
# Warmup Iteration  10: 708429.792 ops/s
# Warmup Iteration  11: 710422.484 ops/s
# Warmup Iteration  12: 763816.940 ops/s
# Warmup Iteration  13: 767439.322 ops/s
# Warmup Iteration  14: 766097.170 ops/s
# Warmup Iteration  15: 767698.617 ops/s
# Warmup Iteration  16: 767089.555 ops/s
# Warmup Iteration  17: 800565.945 ops/s
# Warmup Iteration  18: 792995.651 ops/s
# Warmup Iteration  19: 797239.097 ops/s
# Warmup Iteration  20: 803400.392 ops/s
# Warmup Iteration  21: 806299.660 ops/s
# Warmup Iteration  22: 792231.144 ops/s
# Warmup Iteration  23: 792929.048 ops/s
# Warmup Iteration  24: 800792.607 ops/s
# Warmup Iteration  25: 789690.240 ops/s
# Warmup Iteration  26: 803785.324 ops/s
# Warmup Iteration  27: 801612.441 ops/s
# Warmup Iteration  28: 794977.344 ops/s
# Warmup Iteration  29: 797077.499 ops/s
# Warmup Iteration  30: 799950.748 ops/s
Iteration   1: 801114.390 ops/s
Iteration   2: 800729.253 ops/s
Iteration   3: 773419.097 ops/s
Iteration   4: 804868.862 ops/s
Iteration   5: 804305.607 ops/s
Iteration   6: 786415.102 ops/s
Iteration   7: 805288.773 ops/s
Iteration   8: 793823.867 ops/s
Iteration   9: 804410.125 ops/s
Iteration  10: 783182.972 ops/s
Iteration  11: 802236.554 ops/s
Iteration  12: 798025.292 ops/s
Iteration  13: 791104.508 ops/s
Iteration  14: 797856.942 ops/s
Iteration  15: 800578.710 ops/s
Iteration  16: 788057.654 ops/s
Iteration  17: 788306.932 ops/s
Iteration  18: 800969.785 ops/s
Iteration  19: 792552.642 ops/s
Iteration  20: 791220.398 ops/s
Iteration  21: 800216.605 ops/s
Iteration  22: 787792.411 ops/s
Iteration  23: 791950.200 ops/s
Iteration  24: 786533.426 ops/s
Iteration  25: 803179.222 ops/s
Iteration  26: 800945.537 ops/s
Iteration  27: 800622.302 ops/s
Iteration  28: 790491.432 ops/s
Iteration  29: 801337.000 ops/s
Iteration  30: 799655.100 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByDouble":
  795706.357 ±(99.9%) 5197.657 ops/s [Average]
  (min, avg, max) = (773419.097, 795706.357, 805288.773), stdev = 7779.610
  CI (99.9%): [790508.699, 800904.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  795706.357 ± 5197.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518755.989 ops/s
# Warmup Iteration   2: 591322.644 ops/s
# Warmup Iteration   3: 701965.962 ops/s
# Warmup Iteration   4: 689645.889 ops/s
# Warmup Iteration   5: 692454.973 ops/s
# Warmup Iteration   6: 703768.922 ops/s
# Warmup Iteration   7: 702355.936 ops/s
# Warmup Iteration   8: 698104.822 ops/s
# Warmup Iteration   9: 700268.033 ops/s
# Warmup Iteration  10: 696247.716 ops/s
# Warmup Iteration  11: 622663.563 ops/s
# Warmup Iteration  12: 674379.000 ops/s
# Warmup Iteration  13: 701375.412 ops/s
# Warmup Iteration  14: 694281.372 ops/s
# Warmup Iteration  15: 702345.445 ops/s
# Warmup Iteration  16: 703524.392 ops/s
# Warmup Iteration  17: 723405.785 ops/s
# Warmup Iteration  18: 730532.393 ops/s
# Warmup Iteration  19: 731893.167 ops/s
# Warmup Iteration  20: 731815.981 ops/s
# Warmup Iteration  21: 727849.508 ops/s
# Warmup Iteration  22: 727957.680 ops/s
# Warmup Iteration  23: 730038.121 ops/s
# Warmup Iteration  24: 733076.585 ops/s
# Warmup Iteration  25: 731396.257 ops/s
# Warmup Iteration  26: 732694.626 ops/s
# Warmup Iteration  27: 733633.370 ops/s
# Warmup Iteration  28: 731924.830 ops/s
# Warmup Iteration  29: 731810.809 ops/s
# Warmup Iteration  30: 724784.230 ops/s
Iteration   1: 733495.116 ops/s
Iteration   2: 730000.512 ops/s
Iteration   3: 730894.427 ops/s
Iteration   4: 728041.559 ops/s
Iteration   5: 733124.316 ops/s
Iteration   6: 733403.525 ops/s
Iteration   7: 732009.322 ops/s
Iteration   8: 732284.655 ops/s
Iteration   9: 730044.163 ops/s
Iteration  10: 728418.858 ops/s
Iteration  11: 731155.501 ops/s
Iteration  12: 729315.667 ops/s
Iteration  13: 733083.195 ops/s
Iteration  14: 734007.465 ops/s
Iteration  15: 730991.759 ops/s
Iteration  16: 734132.979 ops/s
Iteration  17: 732582.662 ops/s
Iteration  18: 732857.249 ops/s
Iteration  19: 732548.655 ops/s
Iteration  20: 713479.447 ops/s
Iteration  21: 734378.914 ops/s
Iteration  22: 734321.160 ops/s
Iteration  23: 729111.174 ops/s
Iteration  24: 733686.887 ops/s
Iteration  25: 731680.335 ops/s
Iteration  26: 734930.998 ops/s
Iteration  27: 731023.982 ops/s
Iteration  28: 726988.907 ops/s
Iteration  29: 732569.393 ops/s
Iteration  30: 710993.565 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByFloat":
  730518.545 ±(99.9%) 3593.429 ops/s [Average]
  (min, avg, max) = (710993.565, 730518.545, 734930.998), stdev = 5378.476
  CI (99.9%): [726925.116, 734111.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  730518.545 ± 3593.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537385.200 ops/s
# Warmup Iteration   2: 615441.630 ops/s
# Warmup Iteration   3: 790221.123 ops/s
# Warmup Iteration   4: 797785.370 ops/s
# Warmup Iteration   5: 793309.481 ops/s
# Warmup Iteration   6: 775667.718 ops/s
# Warmup Iteration   7: 786399.512 ops/s
# Warmup Iteration   8: 796859.556 ops/s
# Warmup Iteration   9: 788604.895 ops/s
# Warmup Iteration  10: 690777.410 ops/s
# Warmup Iteration  11: 766002.453 ops/s
# Warmup Iteration  12: 796532.525 ops/s
# Warmup Iteration  13: 788929.206 ops/s
# Warmup Iteration  14: 795857.204 ops/s
# Warmup Iteration  15: 796996.448 ops/s
# Warmup Iteration  16: 792238.293 ops/s
# Warmup Iteration  17: 827112.576 ops/s
# Warmup Iteration  18: 832676.249 ops/s
# Warmup Iteration  19: 830507.914 ops/s
# Warmup Iteration  20: 828130.328 ops/s
# Warmup Iteration  21: 823496.101 ops/s
# Warmup Iteration  22: 824775.347 ops/s
# Warmup Iteration  23: 815484.409 ops/s
# Warmup Iteration  24: 828930.038 ops/s
# Warmup Iteration  25: 825337.099 ops/s
# Warmup Iteration  26: 821685.517 ops/s
# Warmup Iteration  27: 827757.470 ops/s
# Warmup Iteration  28: 826549.120 ops/s
# Warmup Iteration  29: 829903.247 ops/s
# Warmup Iteration  30: 829398.645 ops/s
Iteration   1: 828533.049 ops/s
Iteration   2: 829169.365 ops/s
Iteration   3: 828757.117 ops/s
Iteration   4: 824498.314 ops/s
Iteration   5: 826053.921 ops/s
Iteration   6: 829921.101 ops/s
Iteration   7: 829061.411 ops/s
Iteration   8: 825879.666 ops/s
Iteration   9: 826049.825 ops/s
Iteration  10: 829572.505 ops/s
Iteration  11: 828159.144 ops/s
Iteration  12: 830465.330 ops/s
Iteration  13: 816556.689 ops/s
Iteration  14: 825781.308 ops/s
Iteration  15: 832584.515 ops/s
Iteration  16: 829364.155 ops/s
Iteration  17: 827791.963 ops/s
Iteration  18: 815204.599 ops/s
Iteration  19: 810961.899 ops/s
Iteration  20: 819149.273 ops/s
Iteration  21: 826500.207 ops/s
Iteration  22: 824872.991 ops/s
Iteration  23: 828268.334 ops/s
Iteration  24: 829033.852 ops/s
Iteration  25: 829764.132 ops/s
Iteration  26: 830062.119 ops/s
Iteration  27: 827368.337 ops/s
Iteration  28: 831354.256 ops/s
Iteration  29: 828272.059 ops/s
Iteration  30: 829791.964 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByInt":
  826626.780 ±(99.9%) 3305.851 ops/s [Average]
  (min, avg, max) = (810961.899, 826626.780, 832584.515), stdev = 4948.042
  CI (99.9%): [823320.929, 829932.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  826626.780 ± 3305.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587064.184 ops/s
# Warmup Iteration   2: 705193.830 ops/s
# Warmup Iteration   3: 897913.719 ops/s
# Warmup Iteration   4: 887757.609 ops/s
# Warmup Iteration   5: 901050.695 ops/s
# Warmup Iteration   6: 893202.536 ops/s
# Warmup Iteration   7: 897693.269 ops/s
# Warmup Iteration   8: 901176.892 ops/s
# Warmup Iteration   9: 819786.051 ops/s
# Warmup Iteration  10: 840131.589 ops/s
# Warmup Iteration  11: 902812.406 ops/s
# Warmup Iteration  12: 903216.153 ops/s
# Warmup Iteration  13: 896014.661 ops/s
# Warmup Iteration  14: 906399.670 ops/s
# Warmup Iteration  15: 905113.625 ops/s
# Warmup Iteration  16: 879520.465 ops/s
# Warmup Iteration  17: 944573.134 ops/s
# Warmup Iteration  18: 951923.971 ops/s
# Warmup Iteration  19: 954748.853 ops/s
# Warmup Iteration  20: 934639.793 ops/s
# Warmup Iteration  21: 955374.444 ops/s
# Warmup Iteration  22: 954664.681 ops/s
# Warmup Iteration  23: 933202.282 ops/s
# Warmup Iteration  24: 954990.566 ops/s
# Warmup Iteration  25: 941723.779 ops/s
# Warmup Iteration  26: 948229.204 ops/s
# Warmup Iteration  27: 939886.323 ops/s
# Warmup Iteration  28: 955594.356 ops/s
# Warmup Iteration  29: 952371.939 ops/s
# Warmup Iteration  30: 950922.986 ops/s
Iteration   1: 951027.988 ops/s
Iteration   2: 949858.330 ops/s
Iteration   3: 954650.106 ops/s
Iteration   4: 949787.895 ops/s
Iteration   5: 937165.989 ops/s
Iteration   6: 952450.148 ops/s
Iteration   7: 949816.785 ops/s
Iteration   8: 953842.492 ops/s
Iteration   9: 954545.149 ops/s
Iteration  10: 951746.141 ops/s
Iteration  11: 939192.008 ops/s
Iteration  12: 947634.328 ops/s
Iteration  13: 948688.260 ops/s
Iteration  14: 950332.066 ops/s
Iteration  15: 951698.045 ops/s
Iteration  16: 949586.023 ops/s
Iteration  17: 947556.106 ops/s
Iteration  18: 932517.111 ops/s
Iteration  19: 938219.406 ops/s
Iteration  20: 947565.072 ops/s
Iteration  21: 936250.929 ops/s
Iteration  22: 954733.028 ops/s
Iteration  23: 956557.753 ops/s
Iteration  24: 947643.557 ops/s
Iteration  25: 945482.113 ops/s
Iteration  26: 947361.963 ops/s
Iteration  27: 950598.194 ops/s
Iteration  28: 951151.910 ops/s
Iteration  29: 948400.473 ops/s
Iteration  30: 947528.926 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByLong":
  948119.610 ±(99.9%) 3937.462 ops/s [Average]
  (min, avg, max) = (932517.111, 948119.610, 956557.753), stdev = 5893.408
  CI (99.9%): [944182.148, 952057.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  948119.610 ± 3937.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519722.845 ops/s
# Warmup Iteration   2: 591999.560 ops/s
# Warmup Iteration   3: 761941.506 ops/s
# Warmup Iteration   4: 758633.371 ops/s
# Warmup Iteration   5: 759324.678 ops/s
# Warmup Iteration   6: 759770.217 ops/s
# Warmup Iteration   7: 765867.943 ops/s
# Warmup Iteration   8: 756088.332 ops/s
# Warmup Iteration   9: 758816.432 ops/s
# Warmup Iteration  10: 729228.766 ops/s
# Warmup Iteration  11: 669655.299 ops/s
# Warmup Iteration  12: 763219.679 ops/s
# Warmup Iteration  13: 753818.915 ops/s
# Warmup Iteration  14: 759338.897 ops/s
# Warmup Iteration  15: 758737.309 ops/s
# Warmup Iteration  16: 763290.873 ops/s
# Warmup Iteration  17: 801814.711 ops/s
# Warmup Iteration  18: 803531.283 ops/s
# Warmup Iteration  19: 793321.943 ops/s
# Warmup Iteration  20: 798413.259 ops/s
# Warmup Iteration  21: 805090.355 ops/s
# Warmup Iteration  22: 806741.664 ops/s
# Warmup Iteration  23: 803727.235 ops/s
# Warmup Iteration  24: 804653.908 ops/s
# Warmup Iteration  25: 801304.120 ops/s
# Warmup Iteration  26: 804786.057 ops/s
# Warmup Iteration  27: 791226.278 ops/s
# Warmup Iteration  28: 777985.481 ops/s
# Warmup Iteration  29: 798518.194 ops/s
# Warmup Iteration  30: 804483.023 ops/s
Iteration   1: 798728.748 ops/s
Iteration   2: 801016.900 ops/s
Iteration   3: 802015.784 ops/s
Iteration   4: 801502.331 ops/s
Iteration   5: 803133.935 ops/s
Iteration   6: 802839.923 ops/s
Iteration   7: 804542.577 ops/s
Iteration   8: 807783.440 ops/s
Iteration   9: 803515.228 ops/s
Iteration  10: 804929.325 ops/s
Iteration  11: 797366.375 ops/s
Iteration  12: 801643.528 ops/s
Iteration  13: 783886.680 ops/s
Iteration  14: 802231.784 ops/s
Iteration  15: 802514.920 ops/s
Iteration  16: 804574.281 ops/s
Iteration  17: 803264.185 ops/s
Iteration  18: 791186.096 ops/s
Iteration  19: 799568.400 ops/s
Iteration  20: 798874.714 ops/s
Iteration  21: 805151.550 ops/s
Iteration  22: 810783.924 ops/s
Iteration  23: 800690.664 ops/s
Iteration  24: 803340.830 ops/s
Iteration  25: 797114.688 ops/s
Iteration  26: 805522.814 ops/s
Iteration  27: 802953.932 ops/s
Iteration  28: 794829.859 ops/s
Iteration  29: 804860.347 ops/s
Iteration  30: 791763.673 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByShort":
  801071.048 ±(99.9%) 3556.646 ops/s [Average]
  (min, avg, max) = (783886.680, 801071.048, 810783.924), stdev = 5323.421
  CI (99.9%): [797514.401, 804627.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  801071.048 ± 3556.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565269.396 ops/s
# Warmup Iteration   2: 681500.827 ops/s
# Warmup Iteration   3: 856189.487 ops/s
# Warmup Iteration   4: 858498.992 ops/s
# Warmup Iteration   5: 856043.482 ops/s
# Warmup Iteration   6: 857271.139 ops/s
# Warmup Iteration   7: 853060.670 ops/s
# Warmup Iteration   8: 857755.620 ops/s
# Warmup Iteration   9: 822359.004 ops/s
# Warmup Iteration  10: 764559.457 ops/s
# Warmup Iteration  11: 859381.387 ops/s
# Warmup Iteration  12: 859640.214 ops/s
# Warmup Iteration  13: 845787.153 ops/s
# Warmup Iteration  14: 845022.120 ops/s
# Warmup Iteration  15: 852304.437 ops/s
# Warmup Iteration  16: 852784.497 ops/s
# Warmup Iteration  17: 897544.093 ops/s
# Warmup Iteration  18: 894520.967 ops/s
# Warmup Iteration  19: 903596.514 ops/s
# Warmup Iteration  20: 894029.497 ops/s
# Warmup Iteration  21: 900815.281 ops/s
# Warmup Iteration  22: 890251.038 ops/s
# Warmup Iteration  23: 899013.427 ops/s
# Warmup Iteration  24: 898604.209 ops/s
# Warmup Iteration  25: 897828.695 ops/s
# Warmup Iteration  26: 899642.233 ops/s
# Warmup Iteration  27: 896280.422 ops/s
# Warmup Iteration  28: 889214.739 ops/s
# Warmup Iteration  29: 894706.420 ops/s
# Warmup Iteration  30: 899488.765 ops/s
Iteration   1: 903853.506 ops/s
Iteration   2: 899620.265 ops/s
Iteration   3: 899660.852 ops/s
Iteration   4: 872175.630 ops/s
Iteration   5: 902758.545 ops/s
Iteration   6: 896776.002 ops/s
Iteration   7: 889701.071 ops/s
Iteration   8: 899581.545 ops/s
Iteration   9: 897888.875 ops/s
Iteration  10: 904082.160 ops/s
Iteration  11: 884271.737 ops/s
Iteration  12: 895831.068 ops/s
Iteration  13: 898891.580 ops/s
Iteration  14: 899192.133 ops/s
Iteration  15: 871091.448 ops/s
Iteration  16: 902326.332 ops/s
Iteration  17: 902095.659 ops/s
Iteration  18: 898516.722 ops/s
Iteration  19: 899878.428 ops/s
Iteration  20: 904961.979 ops/s
Iteration  21: 903305.949 ops/s
Iteration  22: 900330.956 ops/s
Iteration  23: 902535.163 ops/s
Iteration  24: 898116.653 ops/s
Iteration  25: 900522.696 ops/s
Iteration  26: 902785.574 ops/s
Iteration  27: 900668.882 ops/s
Iteration  28: 900279.545 ops/s
Iteration  29: 905985.888 ops/s
Iteration  30: 900414.514 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisWithComparator":
  897936.712 ±(99.9%) 5564.324 ops/s [Average]
  (min, avg, max) = (871091.448, 897936.712, 905985.888), stdev = 8328.420
  CI (99.9%): [892372.387, 903501.036] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  897936.712 ± 5564.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86435.659 ops/s
# Warmup Iteration   2: 96619.346 ops/s
# Warmup Iteration   3: 128266.021 ops/s
# Warmup Iteration   4: 128702.220 ops/s
# Warmup Iteration   5: 126747.596 ops/s
# Warmup Iteration   6: 128529.424 ops/s
# Warmup Iteration   7: 128343.652 ops/s
# Warmup Iteration   8: 128289.046 ops/s
# Warmup Iteration   9: 128453.647 ops/s
# Warmup Iteration  10: 128581.735 ops/s
# Warmup Iteration  11: 118406.459 ops/s
# Warmup Iteration  12: 119136.798 ops/s
# Warmup Iteration  13: 128596.186 ops/s
# Warmup Iteration  14: 128597.880 ops/s
# Warmup Iteration  15: 128644.655 ops/s
# Warmup Iteration  16: 128574.844 ops/s
# Warmup Iteration  17: 133917.856 ops/s
# Warmup Iteration  18: 134908.939 ops/s
# Warmup Iteration  19: 134919.586 ops/s
# Warmup Iteration  20: 134735.987 ops/s
# Warmup Iteration  21: 135078.320 ops/s
# Warmup Iteration  22: 134327.605 ops/s
# Warmup Iteration  23: 135388.455 ops/s
# Warmup Iteration  24: 134450.851 ops/s
# Warmup Iteration  25: 135077.970 ops/s
# Warmup Iteration  26: 134860.720 ops/s
# Warmup Iteration  27: 133989.545 ops/s
# Warmup Iteration  28: 134791.406 ops/s
# Warmup Iteration  29: 135476.400 ops/s
# Warmup Iteration  30: 135399.542 ops/s
Iteration   1: 135192.531 ops/s
Iteration   2: 135252.770 ops/s
Iteration   3: 132126.512 ops/s
Iteration   4: 134581.251 ops/s
Iteration   5: 135292.752 ops/s
Iteration   6: 135224.008 ops/s
Iteration   7: 131007.120 ops/s
Iteration   8: 132514.626 ops/s
Iteration   9: 135103.261 ops/s
Iteration  10: 133068.594 ops/s
Iteration  11: 134443.311 ops/s
Iteration  12: 135555.062 ops/s
Iteration  13: 135183.993 ops/s
Iteration  14: 134495.776 ops/s
Iteration  15: 133131.440 ops/s
Iteration  16: 135875.849 ops/s
Iteration  17: 135560.681 ops/s
Iteration  18: 135205.142 ops/s
Iteration  19: 134924.360 ops/s
Iteration  20: 133973.536 ops/s
Iteration  21: 135248.843 ops/s
Iteration  22: 135350.034 ops/s
Iteration  23: 135212.791 ops/s
Iteration  24: 135348.933 ops/s
Iteration  25: 135625.172 ops/s
Iteration  26: 134300.217 ops/s
Iteration  27: 134810.504 ops/s
Iteration  28: 135695.555 ops/s
Iteration  29: 134788.218 ops/s
Iteration  30: 134557.315 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subList":
  134621.672 ±(99.9%) 772.893 ops/s [Average]
  (min, avg, max) = (131007.120, 134621.672, 135875.849), stdev = 1156.830
  CI (99.9%): [133848.779, 135394.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subList  thrpt   30  134621.672 ± 772.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194122.929 ops/s
# Warmup Iteration   2: 222524.831 ops/s
# Warmup Iteration   3: 289911.800 ops/s
# Warmup Iteration   4: 289939.022 ops/s
# Warmup Iteration   5: 286633.458 ops/s
# Warmup Iteration   6: 288056.220 ops/s
# Warmup Iteration   7: 289313.376 ops/s
# Warmup Iteration   8: 289648.043 ops/s
# Warmup Iteration   9: 290381.491 ops/s
# Warmup Iteration  10: 287200.569 ops/s
# Warmup Iteration  11: 245111.966 ops/s
# Warmup Iteration  12: 291173.533 ops/s
# Warmup Iteration  13: 288984.930 ops/s
# Warmup Iteration  14: 291342.170 ops/s
# Warmup Iteration  15: 290382.262 ops/s
# Warmup Iteration  16: 291733.937 ops/s
# Warmup Iteration  17: 304697.792 ops/s
# Warmup Iteration  18: 302596.767 ops/s
# Warmup Iteration  19: 304062.039 ops/s
# Warmup Iteration  20: 304981.448 ops/s
# Warmup Iteration  21: 304000.804 ops/s
# Warmup Iteration  22: 303206.880 ops/s
# Warmup Iteration  23: 305711.578 ops/s
# Warmup Iteration  24: 305419.006 ops/s
# Warmup Iteration  25: 302648.998 ops/s
# Warmup Iteration  26: 303315.761 ops/s
# Warmup Iteration  27: 304574.654 ops/s
# Warmup Iteration  28: 303272.010 ops/s
# Warmup Iteration  29: 305580.637 ops/s
# Warmup Iteration  30: 305103.034 ops/s
Iteration   1: 304986.923 ops/s
Iteration   2: 298730.721 ops/s
Iteration   3: 303522.716 ops/s
Iteration   4: 304767.407 ops/s
Iteration   5: 301806.994 ops/s
Iteration   6: 304720.263 ops/s
Iteration   7: 305152.884 ops/s
Iteration   8: 305521.488 ops/s
Iteration   9: 303037.626 ops/s
Iteration  10: 304623.890 ops/s
Iteration  11: 305479.220 ops/s
Iteration  12: 305405.220 ops/s
Iteration  13: 299724.326 ops/s
Iteration  14: 304816.174 ops/s
Iteration  15: 295314.540 ops/s
Iteration  16: 304165.154 ops/s
Iteration  17: 305653.733 ops/s
Iteration  18: 304596.665 ops/s
Iteration  19: 304246.791 ops/s
Iteration  20: 299856.258 ops/s
Iteration  21: 300415.855 ops/s
Iteration  22: 300757.795 ops/s
Iteration  23: 305339.005 ops/s
Iteration  24: 305659.873 ops/s
Iteration  25: 305167.536 ops/s
Iteration  26: 305110.415 ops/s
Iteration  27: 305378.019 ops/s
Iteration  28: 305449.711 ops/s
Iteration  29: 301929.553 ops/s
Iteration  30: 305744.123 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subListListIterator":
  303569.363 ±(99.9%) 1732.519 ops/s [Average]
  (min, avg, max) = (295314.540, 303569.363, 305744.123), stdev = 2593.153
  CI (99.9%): [301836.844, 305301.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_subListListIterator  thrpt   30  303569.363 ± 1732.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4147961.214 ops/s
# Warmup Iteration   2: 9300191.353 ops/s
# Warmup Iteration   3: 7884529.399 ops/s
# Warmup Iteration   4: 9320803.592 ops/s
# Warmup Iteration   5: 9361164.469 ops/s
# Warmup Iteration   6: 9369123.770 ops/s
# Warmup Iteration   7: 9372853.097 ops/s
# Warmup Iteration   8: 9353067.548 ops/s
# Warmup Iteration   9: 9359683.737 ops/s
# Warmup Iteration  10: 9290848.404 ops/s
# Warmup Iteration  11: 9313136.825 ops/s
# Warmup Iteration  12: 9190532.606 ops/s
# Warmup Iteration  13: 9367658.938 ops/s
# Warmup Iteration  14: 9354616.795 ops/s
# Warmup Iteration  15: 9392822.158 ops/s
# Warmup Iteration  16: 9390517.706 ops/s
# Warmup Iteration  17: 9311916.741 ops/s
# Warmup Iteration  18: 9300841.931 ops/s
# Warmup Iteration  19: 9383411.044 ops/s
# Warmup Iteration  20: 9348783.386 ops/s
# Warmup Iteration  21: 9348918.698 ops/s
# Warmup Iteration  22: 9389170.496 ops/s
# Warmup Iteration  23: 9368242.332 ops/s
# Warmup Iteration  24: 9366113.551 ops/s
# Warmup Iteration  25: 9310833.136 ops/s
# Warmup Iteration  26: 9364752.943 ops/s
# Warmup Iteration  27: 9382603.467 ops/s
# Warmup Iteration  28: 9386293.248 ops/s
# Warmup Iteration  29: 9341125.639 ops/s
# Warmup Iteration  30: 9381492.926 ops/s
Iteration   1: 9375931.631 ops/s
Iteration   2: 9374216.753 ops/s
Iteration   3: 9317303.331 ops/s
Iteration   4: 9361373.615 ops/s
Iteration   5: 9372819.493 ops/s
Iteration   6: 9331370.584 ops/s
Iteration   7: 9344143.468 ops/s
Iteration   8: 9346549.976 ops/s
Iteration   9: 9304470.602 ops/s
Iteration  10: 9368881.191 ops/s
Iteration  11: 9359215.542 ops/s
Iteration  12: 9385724.344 ops/s
Iteration  13: 9366523.235 ops/s
Iteration  14: 9395894.801 ops/s
Iteration  15: 9234767.594 ops/s
Iteration  16: 9396251.409 ops/s
Iteration  17: 9295818.589 ops/s
Iteration  18: 9360118.574 ops/s
Iteration  19: 9373216.556 ops/s
Iteration  20: 9236747.558 ops/s
Iteration  21: 9333853.371 ops/s
Iteration  22: 9238831.826 ops/s
Iteration  23: 9259573.462 ops/s
Iteration  24: 9386744.849 ops/s
Iteration  25: 9391074.425 ops/s
Iteration  26: 9404875.268 ops/s
Iteration  27: 9382348.232 ops/s
Iteration  28: 9365788.140 ops/s
Iteration  29: 9228665.797 ops/s
Iteration  30: 9329521.258 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_tap":
  9340753.849 ±(99.9%) 35544.049 ops/s [Average]
  (min, avg, max) = (9228665.797, 9340753.849, 9404875.268), stdev = 53200.664
  CI (99.9%): [9305209.800, 9376297.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_tap  thrpt   30  9340753.849 ± 35544.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2004669.065 ops/s
# Warmup Iteration   2: 4441114.879 ops/s
# Warmup Iteration   3: 3779641.393 ops/s
# Warmup Iteration   4: 4465329.050 ops/s
# Warmup Iteration   5: 4503530.110 ops/s
# Warmup Iteration   6: 4485305.208 ops/s
# Warmup Iteration   7: 4509040.976 ops/s
# Warmup Iteration   8: 4509134.919 ops/s
# Warmup Iteration   9: 4506251.076 ops/s
# Warmup Iteration  10: 4517141.762 ops/s
# Warmup Iteration  11: 4504521.749 ops/s
# Warmup Iteration  12: 4476149.909 ops/s
# Warmup Iteration  13: 4513685.050 ops/s
# Warmup Iteration  14: 4519693.400 ops/s
# Warmup Iteration  15: 4471981.382 ops/s
# Warmup Iteration  16: 4498131.239 ops/s
# Warmup Iteration  17: 4507927.451 ops/s
# Warmup Iteration  18: 4538773.020 ops/s
# Warmup Iteration  19: 4492412.689 ops/s
# Warmup Iteration  20: 4539054.418 ops/s
# Warmup Iteration  21: 4491365.950 ops/s
# Warmup Iteration  22: 4540657.649 ops/s
# Warmup Iteration  23: 4516790.146 ops/s
# Warmup Iteration  24: 4495278.255 ops/s
# Warmup Iteration  25: 4502021.404 ops/s
# Warmup Iteration  26: 4538401.553 ops/s
# Warmup Iteration  27: 4527749.335 ops/s
# Warmup Iteration  28: 4514242.871 ops/s
# Warmup Iteration  29: 4542506.946 ops/s
# Warmup Iteration  30: 4522070.932 ops/s
Iteration   1: 4541359.118 ops/s
Iteration   2: 4519119.264 ops/s
Iteration   3: 4469756.942 ops/s
Iteration   4: 4521855.721 ops/s
Iteration   5: 4533701.551 ops/s
Iteration   6: 4422765.889 ops/s
Iteration   7: 4523528.722 ops/s
Iteration   8: 4535017.899 ops/s
Iteration   9: 4437691.481 ops/s
Iteration  10: 4539775.917 ops/s
Iteration  11: 4536420.244 ops/s
Iteration  12: 4543502.147 ops/s
Iteration  13: 4547573.713 ops/s
Iteration  14: 4535626.632 ops/s
Iteration  15: 4492439.168 ops/s
Iteration  16: 4523702.545 ops/s
Iteration  17: 4537846.439 ops/s
Iteration  18: 4520088.962 ops/s
Iteration  19: 4539043.467 ops/s
Iteration  20: 4474940.454 ops/s
Iteration  21: 4551836.630 ops/s
Iteration  22: 4544685.571 ops/s
Iteration  23: 4512076.289 ops/s
Iteration  24: 4411464.826 ops/s
Iteration  25: 4507176.319 ops/s
Iteration  26: 4554045.121 ops/s
Iteration  27: 4516007.572 ops/s
Iteration  28: 4554088.491 ops/s
Iteration  29: 4535832.913 ops/s
Iteration  30: 4549871.091 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testAppendString":
  4517761.370 ±(99.9%) 25517.037 ops/s [Average]
  (min, avg, max) = (4411464.826, 4517761.370, 4554088.491), stdev = 38192.702
  CI (99.9%): [4492244.333, 4543278.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testAppendString  thrpt   30  4517761.370 ± 25517.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1689696.018 ops/s
# Warmup Iteration   2: 3684518.752 ops/s
# Warmup Iteration   3: 3182052.579 ops/s
# Warmup Iteration   4: 3720760.813 ops/s
# Warmup Iteration   5: 3738458.970 ops/s
# Warmup Iteration   6: 3725640.223 ops/s
# Warmup Iteration   7: 3751310.079 ops/s
# Warmup Iteration   8: 3730144.851 ops/s
# Warmup Iteration   9: 3742794.703 ops/s
# Warmup Iteration  10: 3750021.909 ops/s
# Warmup Iteration  11: 3692223.324 ops/s
# Warmup Iteration  12: 3702298.439 ops/s
# Warmup Iteration  13: 3730932.838 ops/s
# Warmup Iteration  14: 3719866.876 ops/s
# Warmup Iteration  15: 3686806.287 ops/s
# Warmup Iteration  16: 3712003.345 ops/s
# Warmup Iteration  17: 3729117.439 ops/s
# Warmup Iteration  18: 3725090.961 ops/s
# Warmup Iteration  19: 3717698.455 ops/s
# Warmup Iteration  20: 3734356.162 ops/s
# Warmup Iteration  21: 3708370.380 ops/s
# Warmup Iteration  22: 3723821.031 ops/s
# Warmup Iteration  23: 3743586.040 ops/s
# Warmup Iteration  24: 3700428.067 ops/s
# Warmup Iteration  25: 3738472.004 ops/s
# Warmup Iteration  26: 3701732.555 ops/s
# Warmup Iteration  27: 3723105.204 ops/s
# Warmup Iteration  28: 3675634.698 ops/s
# Warmup Iteration  29: 3736972.095 ops/s
# Warmup Iteration  30: 3729995.218 ops/s
Iteration   1: 3666487.112 ops/s
Iteration   2: 3736854.538 ops/s
Iteration   3: 3663778.045 ops/s
Iteration   4: 3712489.761 ops/s
Iteration   5: 3743139.564 ops/s
Iteration   6: 3734558.109 ops/s
Iteration   7: 3726817.178 ops/s
Iteration   8: 3742660.522 ops/s
Iteration   9: 3670319.611 ops/s
Iteration  10: 3754355.418 ops/s
Iteration  11: 3714158.519 ops/s
Iteration  12: 3641478.974 ops/s
Iteration  13: 3739440.918 ops/s
Iteration  14: 3750885.861 ops/s
Iteration  15: 3746037.026 ops/s
Iteration  16: 3728927.959 ops/s
Iteration  17: 3724043.659 ops/s
Iteration  18: 3732349.917 ops/s
Iteration  19: 3731936.594 ops/s
Iteration  20: 3713341.215 ops/s
Iteration  21: 3747817.964 ops/s
Iteration  22: 3721416.573 ops/s
Iteration  23: 3694823.530 ops/s
Iteration  24: 3672073.949 ops/s
Iteration  25: 3738484.283 ops/s
Iteration  26: 3678326.989 ops/s
Iteration  27: 3757733.406 ops/s
Iteration  28: 3735657.020 ops/s
Iteration  29: 3656625.559 ops/s
Iteration  30: 3719107.629 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testClone":
  3716537.580 ±(99.9%) 21871.097 ops/s [Average]
  (min, avg, max) = (3641478.974, 3716537.580, 3757733.406), stdev = 32735.631
  CI (99.9%): [3694666.483, 3738408.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testClone  thrpt   30  3716537.580 ± 21871.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2373098.219 ops/s
# Warmup Iteration   2: 5207194.833 ops/s
# Warmup Iteration   3: 4450706.832 ops/s
# Warmup Iteration   4: 5271386.475 ops/s
# Warmup Iteration   5: 5298793.895 ops/s
# Warmup Iteration   6: 5272844.216 ops/s
# Warmup Iteration   7: 5279720.669 ops/s
# Warmup Iteration   8: 5252142.046 ops/s
# Warmup Iteration   9: 5288331.827 ops/s
# Warmup Iteration  10: 5291092.584 ops/s
# Warmup Iteration  11: 5294179.614 ops/s
# Warmup Iteration  12: 5289396.315 ops/s
# Warmup Iteration  13: 5271297.261 ops/s
# Warmup Iteration  14: 5314664.572 ops/s
# Warmup Iteration  15: 5306856.813 ops/s
# Warmup Iteration  16: 5292973.713 ops/s
# Warmup Iteration  17: 5295369.925 ops/s
# Warmup Iteration  18: 5313541.148 ops/s
# Warmup Iteration  19: 5291664.611 ops/s
# Warmup Iteration  20: 5294494.789 ops/s
# Warmup Iteration  21: 5289642.800 ops/s
# Warmup Iteration  22: 5272396.916 ops/s
# Warmup Iteration  23: 5299365.665 ops/s
# Warmup Iteration  24: 5326895.639 ops/s
# Warmup Iteration  25: 5302561.164 ops/s
# Warmup Iteration  26: 5305442.543 ops/s
# Warmup Iteration  27: 5326763.031 ops/s
# Warmup Iteration  28: 5238197.007 ops/s
# Warmup Iteration  29: 5289179.166 ops/s
# Warmup Iteration  30: 5301285.158 ops/s
Iteration   1: 5238235.858 ops/s
Iteration   2: 5174795.762 ops/s
Iteration   3: 5313579.732 ops/s
Iteration   4: 5229186.066 ops/s
Iteration   5: 5268263.060 ops/s
Iteration   6: 5210562.717 ops/s
Iteration   7: 5189722.181 ops/s
Iteration   8: 5296198.786 ops/s
Iteration   9: 5221512.639 ops/s
Iteration  10: 5279870.133 ops/s
Iteration  11: 5281453.040 ops/s
Iteration  12: 5206593.228 ops/s
Iteration  13: 5283643.224 ops/s
Iteration  14: 5305711.696 ops/s
Iteration  15: 5206658.144 ops/s
Iteration  16: 5277737.140 ops/s
Iteration  17: 5308337.336 ops/s
Iteration  18: 5307249.173 ops/s
Iteration  19: 5267334.339 ops/s
Iteration  20: 5327208.629 ops/s
Iteration  21: 5302473.821 ops/s
Iteration  22: 5268274.010 ops/s
Iteration  23: 5269548.678 ops/s
Iteration  24: 5291410.256 ops/s
Iteration  25: 5307294.435 ops/s
Iteration  26: 5310065.032 ops/s
Iteration  27: 5268633.886 ops/s
Iteration  28: 5301185.299 ops/s
Iteration  29: 5283326.622 ops/s
Iteration  30: 5336095.451 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testEquals":
  5271072.012 ±(99.9%) 28446.874 ops/s [Average]
  (min, avg, max) = (5174795.762, 5271072.012, 5336095.451), stdev = 42577.945
  CI (99.9%): [5242625.139, 5299518.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testEquals  thrpt   30  5271072.012 ± 28446.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1990087.547 ops/s
# Warmup Iteration   2: 4587451.920 ops/s
# Warmup Iteration   3: 3874717.235 ops/s
# Warmup Iteration   4: 4578254.581 ops/s
# Warmup Iteration   5: 4587663.289 ops/s
# Warmup Iteration   6: 4590400.355 ops/s
# Warmup Iteration   7: 4577965.159 ops/s
# Warmup Iteration   8: 4537938.691 ops/s
# Warmup Iteration   9: 4616415.293 ops/s
# Warmup Iteration  10: 4598578.659 ops/s
# Warmup Iteration  11: 4588828.778 ops/s
# Warmup Iteration  12: 4601690.500 ops/s
# Warmup Iteration  13: 4571440.042 ops/s
# Warmup Iteration  14: 4573075.327 ops/s
# Warmup Iteration  15: 4610929.737 ops/s
# Warmup Iteration  16: 4586983.667 ops/s
# Warmup Iteration  17: 4498120.621 ops/s
# Warmup Iteration  18: 4559459.576 ops/s
# Warmup Iteration  19: 4603587.457 ops/s
# Warmup Iteration  20: 4583616.619 ops/s
# Warmup Iteration  21: 4617583.707 ops/s
# Warmup Iteration  22: 4573172.278 ops/s
# Warmup Iteration  23: 4548969.820 ops/s
# Warmup Iteration  24: 4595584.783 ops/s
# Warmup Iteration  25: 4596921.320 ops/s
# Warmup Iteration  26: 4590432.639 ops/s
# Warmup Iteration  27: 4604311.479 ops/s
# Warmup Iteration  28: 4610944.754 ops/s
# Warmup Iteration  29: 4604691.669 ops/s
# Warmup Iteration  30: 4605035.995 ops/s
Iteration   1: 4631934.265 ops/s
Iteration   2: 4596534.826 ops/s
Iteration   3: 4552527.918 ops/s
Iteration   4: 4598435.033 ops/s
Iteration   5: 4629557.705 ops/s
Iteration   6: 4563042.983 ops/s
Iteration   7: 4554330.807 ops/s
Iteration   8: 4606078.944 ops/s
Iteration   9: 4614363.870 ops/s
Iteration  10: 4550392.862 ops/s
Iteration  11: 4571999.728 ops/s
Iteration  12: 4608427.931 ops/s
Iteration  13: 4569419.050 ops/s
Iteration  14: 4604927.437 ops/s
Iteration  15: 4630809.174 ops/s
Iteration  16: 4623639.872 ops/s
Iteration  17: 4612640.379 ops/s
Iteration  18: 4612171.646 ops/s
Iteration  19: 4600834.414 ops/s
Iteration  20: 4586070.639 ops/s
Iteration  21: 4471037.529 ops/s
Iteration  22: 4448958.277 ops/s
Iteration  23: 4613796.466 ops/s
Iteration  24: 4599788.151 ops/s
Iteration  25: 4613087.132 ops/s
Iteration  26: 4621475.216 ops/s
Iteration  27: 4589182.294 ops/s
Iteration  28: 4617197.359 ops/s
Iteration  29: 4602524.743 ops/s
Iteration  30: 4634897.974 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testMakeString":
  4591002.821 ±(99.9%) 28728.231 ops/s [Average]
  (min, avg, max) = (4448958.277, 4591002.821, 4634897.974), stdev = 42999.067
  CI (99.9%): [4562274.590, 4619731.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_testMakeString  thrpt   30  4591002.821 ± 28728.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587715.844 ops/s
# Warmup Iteration   2: 704846.511 ops/s
# Warmup Iteration   3: 889818.078 ops/s
# Warmup Iteration   4: 887585.212 ops/s
# Warmup Iteration   5: 892417.243 ops/s
# Warmup Iteration   6: 886386.533 ops/s
# Warmup Iteration   7: 885588.449 ops/s
# Warmup Iteration   8: 897231.516 ops/s
# Warmup Iteration   9: 856727.962 ops/s
# Warmup Iteration  10: 787093.279 ops/s
# Warmup Iteration  11: 896109.017 ops/s
# Warmup Iteration  12: 896272.779 ops/s
# Warmup Iteration  13: 897517.544 ops/s
# Warmup Iteration  14: 878911.172 ops/s
# Warmup Iteration  15: 890920.628 ops/s
# Warmup Iteration  16: 898736.172 ops/s
# Warmup Iteration  17: 946212.203 ops/s
# Warmup Iteration  18: 945628.955 ops/s
# Warmup Iteration  19: 945946.461 ops/s
# Warmup Iteration  20: 948048.733 ops/s
# Warmup Iteration  21: 938949.820 ops/s
# Warmup Iteration  22: 948443.819 ops/s
# Warmup Iteration  23: 938992.312 ops/s
# Warmup Iteration  24: 946648.149 ops/s
# Warmup Iteration  25: 947883.291 ops/s
# Warmup Iteration  26: 939120.221 ops/s
# Warmup Iteration  27: 935164.130 ops/s
# Warmup Iteration  28: 935773.109 ops/s
# Warmup Iteration  29: 944159.331 ops/s
# Warmup Iteration  30: 930495.105 ops/s
Iteration   1: 938798.371 ops/s
Iteration   2: 940639.220 ops/s
Iteration   3: 943737.965 ops/s
Iteration   4: 941806.518 ops/s
Iteration   5: 924962.036 ops/s
Iteration   6: 949472.926 ops/s
Iteration   7: 943702.835 ops/s
Iteration   8: 929373.113 ops/s
Iteration   9: 932362.808 ops/s
Iteration  10: 947242.086 ops/s
Iteration  11: 941130.114 ops/s
Iteration  12: 942079.579 ops/s
Iteration  13: 945583.072 ops/s
Iteration  14: 941429.557 ops/s
Iteration  15: 947908.449 ops/s
Iteration  16: 945158.256 ops/s
Iteration  17: 945962.716 ops/s
Iteration  18: 939272.832 ops/s
Iteration  19: 947732.051 ops/s
Iteration  20: 943379.750 ops/s
Iteration  21: 923303.617 ops/s
Iteration  22: 930955.584 ops/s
Iteration  23: 944925.207 ops/s
Iteration  24: 942374.632 ops/s
Iteration  25: 930014.089 ops/s
Iteration  26: 945355.335 ops/s
Iteration  27: 944916.704 ops/s
Iteration  28: 946977.221 ops/s
Iteration  29: 940698.972 ops/s
Iteration  30: 939520.175 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_with":
  940692.526 ±(99.9%) 4618.320 ops/s [Average]
  (min, avg, max) = (923303.617, 940692.526, 949472.926), stdev = 6912.484
  CI (99.9%): [936074.207, 945310.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_with  thrpt   30  940692.526 ± 4618.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588719.200 ops/s
# Warmup Iteration   2: 706832.737 ops/s
# Warmup Iteration   3: 883051.374 ops/s
# Warmup Iteration   4: 874467.246 ops/s
# Warmup Iteration   5: 883731.643 ops/s
# Warmup Iteration   6: 878137.877 ops/s
# Warmup Iteration   7: 879923.631 ops/s
# Warmup Iteration   8: 884737.658 ops/s
# Warmup Iteration   9: 817874.324 ops/s
# Warmup Iteration  10: 808890.042 ops/s
# Warmup Iteration  11: 884606.514 ops/s
# Warmup Iteration  12: 869330.618 ops/s
# Warmup Iteration  13: 874390.167 ops/s
# Warmup Iteration  14: 870612.130 ops/s
# Warmup Iteration  15: 881207.531 ops/s
# Warmup Iteration  16: 861032.580 ops/s
# Warmup Iteration  17: 918711.439 ops/s
# Warmup Iteration  18: 921967.513 ops/s
# Warmup Iteration  19: 925604.041 ops/s
# Warmup Iteration  20: 911319.098 ops/s
# Warmup Iteration  21: 917962.898 ops/s
# Warmup Iteration  22: 920463.888 ops/s
# Warmup Iteration  23: 922519.653 ops/s
# Warmup Iteration  24: 924450.511 ops/s
# Warmup Iteration  25: 921249.608 ops/s
# Warmup Iteration  26: 926176.861 ops/s
# Warmup Iteration  27: 916311.206 ops/s
# Warmup Iteration  28: 923774.764 ops/s
# Warmup Iteration  29: 915684.611 ops/s
# Warmup Iteration  30: 924171.096 ops/s
Iteration   1: 906833.372 ops/s
Iteration   2: 924205.703 ops/s
Iteration   3: 927702.479 ops/s
Iteration   4: 924905.292 ops/s
Iteration   5: 926648.322 ops/s
Iteration   6: 912482.771 ops/s
Iteration   7: 921899.942 ops/s
Iteration   8: 917310.665 ops/s
Iteration   9: 934754.590 ops/s
Iteration  10: 922410.319 ops/s
Iteration  11: 918817.693 ops/s
Iteration  12: 913921.118 ops/s
Iteration  13: 926017.808 ops/s
Iteration  14: 928391.465 ops/s
Iteration  15: 920510.774 ops/s
Iteration  16: 926483.909 ops/s
Iteration  17: 922981.457 ops/s
Iteration  18: 902698.559 ops/s
Iteration  19: 931204.142 ops/s
Iteration  20: 919462.218 ops/s
Iteration  21: 927080.424 ops/s
Iteration  22: 909049.485 ops/s
Iteration  23: 927168.816 ops/s
Iteration  24: 923372.669 ops/s
Iteration  25: 918916.703 ops/s
Iteration  26: 912571.882 ops/s
Iteration  27: 917702.430 ops/s
Iteration  28: 919954.552 ops/s
Iteration  29: 909857.853 ops/s
Iteration  30: 925551.245 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withAll":
  920695.622 ±(99.9%) 5031.062 ops/s [Average]
  (min, avg, max) = (902698.559, 920695.622, 934754.590), stdev = 7530.257
  CI (99.9%): [915664.560, 925726.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withAll  thrpt   30  920695.622 ± 5031.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577666.157 ops/s
# Warmup Iteration   2: 692343.924 ops/s
# Warmup Iteration   3: 884934.408 ops/s
# Warmup Iteration   4: 871571.949 ops/s
# Warmup Iteration   5: 881042.152 ops/s
# Warmup Iteration   6: 878445.221 ops/s
# Warmup Iteration   7: 884748.223 ops/s
# Warmup Iteration   8: 878158.184 ops/s
# Warmup Iteration   9: 862956.613 ops/s
# Warmup Iteration  10: 773610.172 ops/s
# Warmup Iteration  11: 884732.409 ops/s
# Warmup Iteration  12: 881989.765 ops/s
# Warmup Iteration  13: 885617.113 ops/s
# Warmup Iteration  14: 884279.870 ops/s
# Warmup Iteration  15: 885944.643 ops/s
# Warmup Iteration  16: 884057.447 ops/s
# Warmup Iteration  17: 924978.612 ops/s
# Warmup Iteration  18: 922969.116 ops/s
# Warmup Iteration  19: 923729.575 ops/s
# Warmup Iteration  20: 920966.722 ops/s
# Warmup Iteration  21: 922451.565 ops/s
# Warmup Iteration  22: 929099.778 ops/s
# Warmup Iteration  23: 925565.973 ops/s
# Warmup Iteration  24: 917934.911 ops/s
# Warmup Iteration  25: 920957.160 ops/s
# Warmup Iteration  26: 930428.715 ops/s
# Warmup Iteration  27: 925802.422 ops/s
# Warmup Iteration  28: 926254.095 ops/s
# Warmup Iteration  29: 924236.236 ops/s
# Warmup Iteration  30: 926267.463 ops/s
Iteration   1: 916655.735 ops/s
Iteration   2: 924806.526 ops/s
Iteration   3: 924997.549 ops/s
Iteration   4: 924624.340 ops/s
Iteration   5: 919245.965 ops/s
Iteration   6: 910632.185 ops/s
Iteration   7: 925447.372 ops/s
Iteration   8: 929204.951 ops/s
Iteration   9: 925142.346 ops/s
Iteration  10: 909793.691 ops/s
Iteration  11: 926108.099 ops/s
Iteration  12: 909731.887 ops/s
Iteration  13: 923260.778 ops/s
Iteration  14: 908067.853 ops/s
Iteration  15: 925095.687 ops/s
Iteration  16: 910094.745 ops/s
Iteration  17: 917895.862 ops/s
Iteration  18: 912512.849 ops/s
Iteration  19: 913451.569 ops/s
Iteration  20: 932438.937 ops/s
Iteration  21: 925596.403 ops/s
Iteration  22: 926721.276 ops/s
Iteration  23: 921133.675 ops/s
Iteration  24: 926174.960 ops/s
Iteration  25: 928240.638 ops/s
Iteration  26: 930426.752 ops/s
Iteration  27: 926731.935 ops/s
Iteration  28: 926097.075 ops/s
Iteration  29: 928259.040 ops/s
Iteration  30: 922403.163 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_without":
  921699.795 ±(99.9%) 4731.193 ops/s [Average]
  (min, avg, max) = (908067.853, 921699.795, 932438.937), stdev = 7081.427
  CI (99.9%): [916968.602, 926430.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_without  thrpt   30  921699.795 ± 4731.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 579391.513 ops/s
# Warmup Iteration   2: 705412.840 ops/s
# Warmup Iteration   3: 873953.170 ops/s
# Warmup Iteration   4: 882692.370 ops/s
# Warmup Iteration   5: 877174.016 ops/s
# Warmup Iteration   6: 878722.656 ops/s
# Warmup Iteration   7: 875700.464 ops/s
# Warmup Iteration   8: 870983.321 ops/s
# Warmup Iteration   9: 812249.085 ops/s
# Warmup Iteration  10: 816133.204 ops/s
# Warmup Iteration  11: 878081.498 ops/s
# Warmup Iteration  12: 876618.389 ops/s
# Warmup Iteration  13: 878376.316 ops/s
# Warmup Iteration  14: 878006.269 ops/s
# Warmup Iteration  15: 878564.074 ops/s
# Warmup Iteration  16: 870895.432 ops/s
# Warmup Iteration  17: 916926.527 ops/s
# Warmup Iteration  18: 920756.675 ops/s
# Warmup Iteration  19: 924203.152 ops/s
# Warmup Iteration  20: 924061.471 ops/s
# Warmup Iteration  21: 916976.357 ops/s
# Warmup Iteration  22: 914168.419 ops/s
# Warmup Iteration  23: 924253.630 ops/s
# Warmup Iteration  24: 923300.428 ops/s
# Warmup Iteration  25: 912615.114 ops/s
# Warmup Iteration  26: 925074.219 ops/s
# Warmup Iteration  27: 917831.959 ops/s
# Warmup Iteration  28: 921812.904 ops/s
# Warmup Iteration  29: 925160.291 ops/s
# Warmup Iteration  30: 925588.979 ops/s
Iteration   1: 922406.937 ops/s
Iteration   2: 926855.811 ops/s
Iteration   3: 925099.666 ops/s
Iteration   4: 924565.304 ops/s
Iteration   5: 922626.706 ops/s
Iteration   6: 919910.695 ops/s
Iteration   7: 926015.625 ops/s
Iteration   8: 923680.182 ops/s
Iteration   9: 927307.844 ops/s
Iteration  10: 926810.717 ops/s
Iteration  11: 906791.364 ops/s
Iteration  12: 911852.639 ops/s
Iteration  13: 925427.416 ops/s
Iteration  14: 923972.589 ops/s
Iteration  15: 922544.141 ops/s
Iteration  16: 923611.313 ops/s
Iteration  17: 923415.514 ops/s
Iteration  18: 925753.786 ops/s
Iteration  19: 908642.883 ops/s
Iteration  20: 923096.377 ops/s
Iteration  21: 926812.519 ops/s
Iteration  22: 915162.691 ops/s
Iteration  23: 905837.505 ops/s
Iteration  24: 927914.536 ops/s
Iteration  25: 924227.949 ops/s
Iteration  26: 897232.290 ops/s
Iteration  27: 926114.142 ops/s
Iteration  28: 922415.108 ops/s
Iteration  29: 920388.074 ops/s
Iteration  30: 924294.806 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withoutAll":
  921026.238 ±(99.9%) 5031.162 ops/s [Average]
  (min, avg, max) = (897232.290, 921026.238, 927914.536), stdev = 7530.407
  CI (99.9%): [915995.076, 926057.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_withoutAll  thrpt   30  921026.238 ± 5031.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 579725.687 ops/s
# Warmup Iteration   2: 1549724.087 ops/s
# Warmup Iteration   3: 1707444.991 ops/s
# Warmup Iteration   4: 1405878.429 ops/s
# Warmup Iteration   5: 1708734.534 ops/s
# Warmup Iteration   6: 1704542.510 ops/s
# Warmup Iteration   7: 1704066.365 ops/s
# Warmup Iteration   8: 1716903.729 ops/s
# Warmup Iteration   9: 1700661.531 ops/s
# Warmup Iteration  10: 1713448.346 ops/s
# Warmup Iteration  11: 1700458.480 ops/s
# Warmup Iteration  12: 1717296.875 ops/s
# Warmup Iteration  13: 1716147.431 ops/s
# Warmup Iteration  14: 1717539.410 ops/s
# Warmup Iteration  15: 1716865.638 ops/s
# Warmup Iteration  16: 1668610.969 ops/s
# Warmup Iteration  17: 1716787.274 ops/s
# Warmup Iteration  18: 1704407.304 ops/s
# Warmup Iteration  19: 1701066.936 ops/s
# Warmup Iteration  20: 1716520.377 ops/s
# Warmup Iteration  21: 1715207.604 ops/s
# Warmup Iteration  22: 1712500.682 ops/s
# Warmup Iteration  23: 1693698.927 ops/s
# Warmup Iteration  24: 1713099.702 ops/s
# Warmup Iteration  25: 1718643.766 ops/s
# Warmup Iteration  26: 1697097.492 ops/s
# Warmup Iteration  27: 1700551.919 ops/s
# Warmup Iteration  28: 1712869.399 ops/s
# Warmup Iteration  29: 1701832.516 ops/s
# Warmup Iteration  30: 1711164.995 ops/s
Iteration   1: 1711033.862 ops/s
Iteration   2: 1716727.653 ops/s
Iteration   3: 1717110.917 ops/s
Iteration   4: 1717410.059 ops/s
Iteration   5: 1716487.362 ops/s
Iteration   6: 1718203.783 ops/s
Iteration   7: 1705039.759 ops/s
Iteration   8: 1719234.169 ops/s
Iteration   9: 1709118.371 ops/s
Iteration  10: 1717411.610 ops/s
Iteration  11: 1692770.634 ops/s
Iteration  12: 1718941.723 ops/s
Iteration  13: 1713610.037 ops/s
Iteration  14: 1721425.528 ops/s
Iteration  15: 1695724.601 ops/s
Iteration  16: 1707975.466 ops/s
Iteration  17: 1721836.864 ops/s
Iteration  18: 1717070.463 ops/s
Iteration  19: 1717440.727 ops/s
Iteration  20: 1713773.903 ops/s
Iteration  21: 1707557.721 ops/s
Iteration  22: 1711152.775 ops/s
Iteration  23: 1716444.167 ops/s
Iteration  24: 1717288.327 ops/s
Iteration  25: 1713445.090 ops/s
Iteration  26: 1709088.025 ops/s
Iteration  27: 1704193.203 ops/s
Iteration  28: 1690176.641 ops/s
Iteration  29: 1718556.763 ops/s
Iteration  30: 1712738.314 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zip":
  1712299.617 ±(99.9%) 5376.696 ops/s [Average]
  (min, avg, max) = (1690176.641, 1712299.617, 1721836.864), stdev = 8047.587
  CI (99.9%): [1706922.921, 1717676.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zip  thrpt   30  1712299.617 ± 5376.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 890628.759 ops/s
# Warmup Iteration   2: 2678389.132 ops/s
# Warmup Iteration   3: 2687848.224 ops/s
# Warmup Iteration   4: 2174498.380 ops/s
# Warmup Iteration   5: 2664158.431 ops/s
# Warmup Iteration   6: 2698911.105 ops/s
# Warmup Iteration   7: 2692105.581 ops/s
# Warmup Iteration   8: 2681708.856 ops/s
# Warmup Iteration   9: 2659747.600 ops/s
# Warmup Iteration  10: 2694267.901 ops/s
# Warmup Iteration  11: 2690258.884 ops/s
# Warmup Iteration  12: 2672821.254 ops/s
# Warmup Iteration  13: 2646455.616 ops/s
# Warmup Iteration  14: 2691323.848 ops/s
# Warmup Iteration  15: 2696085.249 ops/s
# Warmup Iteration  16: 2665189.934 ops/s
# Warmup Iteration  17: 2694963.502 ops/s
# Warmup Iteration  18: 2693763.298 ops/s
# Warmup Iteration  19: 2685100.486 ops/s
# Warmup Iteration  20: 2692298.654 ops/s
# Warmup Iteration  21: 2689124.672 ops/s
# Warmup Iteration  22: 2671399.315 ops/s
# Warmup Iteration  23: 2686731.022 ops/s
# Warmup Iteration  24: 2689541.891 ops/s
# Warmup Iteration  25: 2691652.724 ops/s
# Warmup Iteration  26: 2668159.590 ops/s
# Warmup Iteration  27: 2694802.284 ops/s
# Warmup Iteration  28: 2693170.778 ops/s
# Warmup Iteration  29: 2695555.936 ops/s
# Warmup Iteration  30: 2691929.059 ops/s
Iteration   1: 2689773.175 ops/s
Iteration   2: 2695797.651 ops/s
Iteration   3: 2700678.191 ops/s
Iteration   4: 2683202.898 ops/s
Iteration   5: 2691974.720 ops/s
Iteration   6: 2655363.112 ops/s
Iteration   7: 2677843.277 ops/s
Iteration   8: 2652006.102 ops/s
Iteration   9: 2689866.879 ops/s
Iteration  10: 2668278.096 ops/s
Iteration  11: 2637996.747 ops/s
Iteration  12: 2673985.452 ops/s
Iteration  13: 2680268.099 ops/s
Iteration  14: 2685629.413 ops/s
Iteration  15: 2690187.570 ops/s
Iteration  16: 2691584.612 ops/s
Iteration  17: 2693331.859 ops/s
Iteration  18: 2682227.027 ops/s
Iteration  19: 2685437.739 ops/s
Iteration  20: 2687318.849 ops/s
Iteration  21: 2696028.216 ops/s
Iteration  22: 2697924.302 ops/s
Iteration  23: 2692907.421 ops/s
Iteration  24: 2686143.423 ops/s
Iteration  25: 2686305.231 ops/s
Iteration  26: 2690891.285 ops/s
Iteration  27: 2686816.302 ops/s
Iteration  28: 2689516.301 ops/s
Iteration  29: 2669879.778 ops/s
Iteration  30: 2691759.114 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex":
  2683364.095 ±(99.9%) 9506.608 ops/s [Average]
  (min, avg, max) = (2637996.747, 2683364.095, 2700678.191), stdev = 14229.044
  CI (99.9%): [2673857.487, 2692870.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2683364.095 ± 9506.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622002.410 ops/s
# Warmup Iteration   2: 708453.999 ops/s
# Warmup Iteration   3: 935651.615 ops/s
# Warmup Iteration   4: 929007.928 ops/s
# Warmup Iteration   5: 925155.503 ops/s
# Warmup Iteration   6: 939800.281 ops/s
# Warmup Iteration   7: 930048.260 ops/s
# Warmup Iteration   8: 932595.638 ops/s
# Warmup Iteration   9: 939970.699 ops/s
# Warmup Iteration  10: 791836.662 ops/s
# Warmup Iteration  11: 936681.833 ops/s
# Warmup Iteration  12: 940109.340 ops/s
# Warmup Iteration  13: 940783.360 ops/s
# Warmup Iteration  14: 938732.507 ops/s
# Warmup Iteration  15: 936205.807 ops/s
# Warmup Iteration  16: 940048.018 ops/s
# Warmup Iteration  17: 991862.158 ops/s
# Warmup Iteration  18: 992853.920 ops/s
# Warmup Iteration  19: 985287.806 ops/s
# Warmup Iteration  20: 985719.567 ops/s
# Warmup Iteration  21: 979962.906 ops/s
# Warmup Iteration  22: 994040.220 ops/s
# Warmup Iteration  23: 991487.285 ops/s
# Warmup Iteration  24: 993782.151 ops/s
# Warmup Iteration  25: 992260.216 ops/s
# Warmup Iteration  26: 991683.664 ops/s
# Warmup Iteration  27: 986359.448 ops/s
# Warmup Iteration  28: 981361.893 ops/s
# Warmup Iteration  29: 976464.659 ops/s
# Warmup Iteration  30: 992117.872 ops/s
Iteration   1: 998580.549 ops/s
Iteration   2: 980209.876 ops/s
Iteration   3: 996809.128 ops/s
Iteration   4: 985017.136 ops/s
Iteration   5: 978329.585 ops/s
Iteration   6: 995342.353 ops/s
Iteration   7: 991913.014 ops/s
Iteration   8: 988679.982 ops/s
Iteration   9: 982731.877 ops/s
Iteration  10: 992993.209 ops/s
Iteration  11: 989101.685 ops/s
Iteration  12: 973919.889 ops/s
Iteration  13: 990698.092 ops/s
Iteration  14: 993926.614 ops/s
Iteration  15: 987778.733 ops/s
Iteration  16: 991587.186 ops/s
Iteration  17: 991454.954 ops/s
Iteration  18: 992660.143 ops/s
Iteration  19: 971804.222 ops/s
Iteration  20: 995696.730 ops/s
Iteration  21: 981606.951 ops/s
Iteration  22: 983430.566 ops/s
Iteration  23: 993621.500 ops/s
Iteration  24: 992465.291 ops/s
Iteration  25: 992136.487 ops/s
Iteration  26: 998023.284 ops/s
Iteration  27: 987582.885 ops/s
Iteration  28: 990682.581 ops/s
Iteration  29: 990525.325 ops/s
Iteration  30: 991606.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_add":
  989030.541 ±(99.9%) 4491.719 ops/s [Average]
  (min, avg, max) = (971804.222, 989030.541, 998580.549), stdev = 6722.993
  CI (99.9%): [984538.823, 993522.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  989030.541 ± 4491.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630006.031 ops/s
# Warmup Iteration   2: 737938.418 ops/s
# Warmup Iteration   3: 935072.355 ops/s
# Warmup Iteration   4: 934201.878 ops/s
# Warmup Iteration   5: 932313.738 ops/s
# Warmup Iteration   6: 935174.203 ops/s
# Warmup Iteration   7: 926965.339 ops/s
# Warmup Iteration   8: 934641.165 ops/s
# Warmup Iteration   9: 910550.340 ops/s
# Warmup Iteration  10: 800358.922 ops/s
# Warmup Iteration  11: 933070.720 ops/s
# Warmup Iteration  12: 932371.564 ops/s
# Warmup Iteration  13: 926534.093 ops/s
# Warmup Iteration  14: 936894.125 ops/s
# Warmup Iteration  15: 931853.689 ops/s
# Warmup Iteration  16: 933480.183 ops/s
# Warmup Iteration  17: 988216.879 ops/s
# Warmup Iteration  18: 986754.067 ops/s
# Warmup Iteration  19: 986093.708 ops/s
# Warmup Iteration  20: 990598.934 ops/s
# Warmup Iteration  21: 985057.891 ops/s
# Warmup Iteration  22: 976842.537 ops/s
# Warmup Iteration  23: 971584.391 ops/s
# Warmup Iteration  24: 987269.255 ops/s
# Warmup Iteration  25: 985150.170 ops/s
# Warmup Iteration  26: 981120.602 ops/s
# Warmup Iteration  27: 983830.241 ops/s
# Warmup Iteration  28: 980991.650 ops/s
# Warmup Iteration  29: 976103.233 ops/s
# Warmup Iteration  30: 983610.764 ops/s
Iteration   1: 989632.277 ops/s
Iteration   2: 986254.763 ops/s
Iteration   3: 982065.951 ops/s
Iteration   4: 987988.511 ops/s
Iteration   5: 987177.972 ops/s
Iteration   6: 991849.535 ops/s
Iteration   7: 988878.289 ops/s
Iteration   8: 985990.088 ops/s
Iteration   9: 988071.306 ops/s
Iteration  10: 971194.703 ops/s
Iteration  11: 989897.081 ops/s
Iteration  12: 982643.893 ops/s
Iteration  13: 985323.671 ops/s
Iteration  14: 980390.130 ops/s
Iteration  15: 984752.566 ops/s
Iteration  16: 984924.750 ops/s
Iteration  17: 983061.119 ops/s
Iteration  18: 986049.637 ops/s
Iteration  19: 988291.746 ops/s
Iteration  20: 987609.545 ops/s
Iteration  21: 987284.867 ops/s
Iteration  22: 985866.083 ops/s
Iteration  23: 989257.628 ops/s
Iteration  24: 990425.811 ops/s
Iteration  25: 978058.191 ops/s
Iteration  26: 988117.568 ops/s
Iteration  27: 982139.698 ops/s
Iteration  28: 969763.135 ops/s
Iteration  29: 988590.399 ops/s
Iteration  30: 984336.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAll":
  985196.239 ±(99.9%) 3387.916 ops/s [Average]
  (min, avg, max) = (969763.135, 985196.239, 991849.535), stdev = 5070.874
  CI (99.9%): [981808.323, 988584.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  985196.239 ± 3387.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 599170.237 ops/s
# Warmup Iteration   2: 697894.100 ops/s
# Warmup Iteration   3: 892924.822 ops/s
# Warmup Iteration   4: 894689.414 ops/s
# Warmup Iteration   5: 899241.383 ops/s
# Warmup Iteration   6: 894338.421 ops/s
# Warmup Iteration   7: 890668.626 ops/s
# Warmup Iteration   8: 896026.926 ops/s
# Warmup Iteration   9: 889635.401 ops/s
# Warmup Iteration  10: 754109.973 ops/s
# Warmup Iteration  11: 897579.031 ops/s
# Warmup Iteration  12: 890518.590 ops/s
# Warmup Iteration  13: 897905.261 ops/s
# Warmup Iteration  14: 901606.313 ops/s
# Warmup Iteration  15: 893888.819 ops/s
# Warmup Iteration  16: 899364.978 ops/s
# Warmup Iteration  17: 947239.727 ops/s
# Warmup Iteration  18: 942871.218 ops/s
# Warmup Iteration  19: 945642.313 ops/s
# Warmup Iteration  20: 946878.672 ops/s
# Warmup Iteration  21: 949171.290 ops/s
# Warmup Iteration  22: 950578.492 ops/s
# Warmup Iteration  23: 947127.599 ops/s
# Warmup Iteration  24: 945778.229 ops/s
# Warmup Iteration  25: 942785.398 ops/s
# Warmup Iteration  26: 943912.537 ops/s
# Warmup Iteration  27: 945361.957 ops/s
# Warmup Iteration  28: 946313.439 ops/s
# Warmup Iteration  29: 943053.116 ops/s
# Warmup Iteration  30: 942987.782 ops/s
Iteration   1: 943400.798 ops/s
Iteration   2: 948348.108 ops/s
Iteration   3: 947467.398 ops/s
Iteration   4: 957922.532 ops/s
Iteration   5: 944069.716 ops/s
Iteration   6: 957624.468 ops/s
Iteration   7: 949576.182 ops/s
Iteration   8: 944703.431 ops/s
Iteration   9: 952411.984 ops/s
Iteration  10: 942686.959 ops/s
Iteration  11: 948167.562 ops/s
Iteration  12: 947370.815 ops/s
Iteration  13: 940039.128 ops/s
Iteration  14: 943966.711 ops/s
Iteration  15: 941259.045 ops/s
Iteration  16: 932895.154 ops/s
Iteration  17: 947546.702 ops/s
Iteration  18: 948242.502 ops/s
Iteration  19: 944707.416 ops/s
Iteration  20: 929244.353 ops/s
Iteration  21: 950138.473 ops/s
Iteration  22: 945265.031 ops/s
Iteration  23: 943221.406 ops/s
Iteration  24: 949536.581 ops/s
Iteration  25: 947537.992 ops/s
Iteration  26: 947101.777 ops/s
Iteration  27: 935618.300 ops/s
Iteration  28: 945169.888 ops/s
Iteration  29: 924948.404 ops/s
Iteration  30: 938544.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex":
  944624.438 ±(99.9%) 4779.692 ops/s [Average]
  (min, avg, max) = (924948.404, 944624.438, 957922.532), stdev = 7154.019
  CI (99.9%): [939844.745, 949404.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  944624.438 ± 4779.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627626.404 ops/s
# Warmup Iteration   2: 739835.112 ops/s
# Warmup Iteration   3: 934486.310 ops/s
# Warmup Iteration   4: 928738.254 ops/s
# Warmup Iteration   5: 937374.846 ops/s
# Warmup Iteration   6: 943549.103 ops/s
# Warmup Iteration   7: 936578.399 ops/s
# Warmup Iteration   8: 938811.523 ops/s
# Warmup Iteration   9: 881932.791 ops/s
# Warmup Iteration  10: 840502.368 ops/s
# Warmup Iteration  11: 941012.937 ops/s
# Warmup Iteration  12: 945000.190 ops/s
# Warmup Iteration  13: 940407.983 ops/s
# Warmup Iteration  14: 941669.465 ops/s
# Warmup Iteration  15: 942985.046 ops/s
# Warmup Iteration  16: 931793.905 ops/s
# Warmup Iteration  17: 998801.413 ops/s
# Warmup Iteration  18: 990742.969 ops/s
# Warmup Iteration  19: 999386.672 ops/s
# Warmup Iteration  20: 990326.683 ops/s
# Warmup Iteration  21: 999498.106 ops/s
# Warmup Iteration  22: 998497.954 ops/s
# Warmup Iteration  23: 986894.814 ops/s
# Warmup Iteration  24: 995004.332 ops/s
# Warmup Iteration  25: 989928.717 ops/s
# Warmup Iteration  26: 986013.522 ops/s
# Warmup Iteration  27: 999846.813 ops/s
# Warmup Iteration  28: 993372.572 ops/s
# Warmup Iteration  29: 1001200.515 ops/s
# Warmup Iteration  30: 996167.885 ops/s
Iteration   1: 1001693.545 ops/s
Iteration   2: 989310.030 ops/s
Iteration   3: 973252.511 ops/s
Iteration   4: 994224.666 ops/s
Iteration   5: 997803.355 ops/s
Iteration   6: 994542.574 ops/s
Iteration   7: 982478.225 ops/s
Iteration   8: 1002515.485 ops/s
Iteration   9: 986352.998 ops/s
Iteration  10: 997192.662 ops/s
Iteration  11: 992726.040 ops/s
Iteration  12: 1003899.881 ops/s
Iteration  13: 991998.072 ops/s
Iteration  14: 1004367.463 ops/s
Iteration  15: 980916.545 ops/s
Iteration  16: 961813.729 ops/s
Iteration  17: 992278.331 ops/s
Iteration  18: 997651.189 ops/s
Iteration  19: 975528.168 ops/s
Iteration  20: 996947.912 ops/s
Iteration  21: 1001350.888 ops/s
Iteration  22: 994322.326 ops/s
Iteration  23: 998916.969 ops/s
Iteration  24: 1001183.291 ops/s
Iteration  25: 1002172.090 ops/s
Iteration  26: 975470.485 ops/s
Iteration  27: 993677.732 ops/s
Iteration  28: 992888.707 ops/s
Iteration  29: 973489.312 ops/s
Iteration  30: 997911.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  991629.210 ±(99.9%) 7227.369 ops/s [Average]
  (min, avg, max) = (961813.729, 991629.210, 1004367.463), stdev = 10817.587
  CI (99.9%): [984401.841, 998856.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  991629.210 ± 7227.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603392.018 ops/s
# Warmup Iteration   2: 695194.878 ops/s
# Warmup Iteration   3: 892098.380 ops/s
# Warmup Iteration   4: 907534.384 ops/s
# Warmup Iteration   5: 900114.340 ops/s
# Warmup Iteration   6: 903134.343 ops/s
# Warmup Iteration   7: 904923.502 ops/s
# Warmup Iteration   8: 896415.862 ops/s
# Warmup Iteration   9: 899523.305 ops/s
# Warmup Iteration  10: 758178.774 ops/s
# Warmup Iteration  11: 898688.668 ops/s
# Warmup Iteration  12: 902402.148 ops/s
# Warmup Iteration  13: 900375.569 ops/s
# Warmup Iteration  14: 892504.726 ops/s
# Warmup Iteration  15: 901428.073 ops/s
# Warmup Iteration  16: 903409.137 ops/s
# Warmup Iteration  17: 950690.400 ops/s
# Warmup Iteration  18: 947533.442 ops/s
# Warmup Iteration  19: 944304.076 ops/s
# Warmup Iteration  20: 950252.083 ops/s
# Warmup Iteration  21: 944144.482 ops/s
# Warmup Iteration  22: 942293.990 ops/s
# Warmup Iteration  23: 944958.027 ops/s
# Warmup Iteration  24: 945193.395 ops/s
# Warmup Iteration  25: 942783.620 ops/s
# Warmup Iteration  26: 937190.091 ops/s
# Warmup Iteration  27: 947596.167 ops/s
# Warmup Iteration  28: 950619.228 ops/s
# Warmup Iteration  29: 950090.433 ops/s
# Warmup Iteration  30: 945664.086 ops/s
Iteration   1: 949084.684 ops/s
Iteration   2: 946879.104 ops/s
Iteration   3: 944645.443 ops/s
Iteration   4: 945352.103 ops/s
Iteration   5: 948878.133 ops/s
Iteration   6: 934838.204 ops/s
Iteration   7: 932729.682 ops/s
Iteration   8: 943971.667 ops/s
Iteration   9: 947779.311 ops/s
Iteration  10: 947546.196 ops/s
Iteration  11: 943948.052 ops/s
Iteration  12: 948478.858 ops/s
Iteration  13: 933884.491 ops/s
Iteration  14: 929791.374 ops/s
Iteration  15: 944539.990 ops/s
Iteration  16: 922670.650 ops/s
Iteration  17: 948364.953 ops/s
Iteration  18: 948782.029 ops/s
Iteration  19: 948208.735 ops/s
Iteration  20: 933266.069 ops/s
Iteration  21: 946534.124 ops/s
Iteration  22: 934390.263 ops/s
Iteration  23: 939160.267 ops/s
Iteration  24: 947590.952 ops/s
Iteration  25: 949815.009 ops/s
Iteration  26: 945928.588 ops/s
Iteration  27: 946774.708 ops/s
Iteration  28: 944290.429 ops/s
Iteration  29: 932242.041 ops/s
Iteration  30: 945609.771 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex":
  942532.529 ±(99.9%) 4819.426 ops/s [Average]
  (min, avg, max) = (922670.650, 942532.529, 949815.009), stdev = 7213.490
  CI (99.9%): [937713.104, 947351.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex  thrpt   30  942532.529 ± 4819.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635239.437 ops/s
# Warmup Iteration   2: 737867.282 ops/s
# Warmup Iteration   3: 943017.637 ops/s
# Warmup Iteration   4: 943757.449 ops/s
# Warmup Iteration   5: 935117.433 ops/s
# Warmup Iteration   6: 934447.347 ops/s
# Warmup Iteration   7: 940223.917 ops/s
# Warmup Iteration   8: 941401.026 ops/s
# Warmup Iteration   9: 915717.361 ops/s
# Warmup Iteration  10: 824903.249 ops/s
# Warmup Iteration  11: 944808.754 ops/s
# Warmup Iteration  12: 931632.581 ops/s
# Warmup Iteration  13: 939292.379 ops/s
# Warmup Iteration  14: 943355.642 ops/s
# Warmup Iteration  15: 937611.726 ops/s
# Warmup Iteration  16: 940150.606 ops/s
# Warmup Iteration  17: 995243.032 ops/s
# Warmup Iteration  18: 998067.282 ops/s
# Warmup Iteration  19: 994595.513 ops/s
# Warmup Iteration  20: 994871.308 ops/s
# Warmup Iteration  21: 997759.361 ops/s
# Warmup Iteration  22: 998918.253 ops/s
# Warmup Iteration  23: 998684.367 ops/s
# Warmup Iteration  24: 997194.724 ops/s
# Warmup Iteration  25: 987529.367 ops/s
# Warmup Iteration  26: 996274.576 ops/s
# Warmup Iteration  27: 987511.863 ops/s
# Warmup Iteration  28: 994367.756 ops/s
# Warmup Iteration  29: 987051.281 ops/s
# Warmup Iteration  30: 996503.257 ops/s
Iteration   1: 994970.067 ops/s
Iteration   2: 998433.827 ops/s
Iteration   3: 995880.378 ops/s
Iteration   4: 999899.923 ops/s
Iteration   5: 997913.472 ops/s
Iteration   6: 994419.071 ops/s
Iteration   7: 978630.904 ops/s
Iteration   8: 1001939.708 ops/s
Iteration   9: 983042.602 ops/s
Iteration  10: 986930.536 ops/s
Iteration  11: 998234.823 ops/s
Iteration  12: 983039.970 ops/s
Iteration  13: 996151.282 ops/s
Iteration  14: 997454.368 ops/s
Iteration  15: 994379.802 ops/s
Iteration  16: 998349.552 ops/s
Iteration  17: 998052.699 ops/s
Iteration  18: 997166.700 ops/s
Iteration  19: 1004244.393 ops/s
Iteration  20: 997250.595 ops/s
Iteration  21: 999194.597 ops/s
Iteration  22: 989447.209 ops/s
Iteration  23: 984565.939 ops/s
Iteration  24: 998007.517 ops/s
Iteration  25: 994637.005 ops/s
Iteration  26: 985970.469 ops/s
Iteration  27: 996802.027 ops/s
Iteration  28: 996558.420 ops/s
Iteration  29: 998875.412 ops/s
Iteration  30: 999955.234 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_clear":
  994679.950 ±(99.9%) 4183.022 ops/s [Average]
  (min, avg, max) = (978630.904, 994679.950, 1004244.393), stdev = 6260.950
  CI (99.9%): [990496.929, 998862.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  994679.950 ± 4183.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1052059.865 ops/s
# Warmup Iteration   2: 2390248.612 ops/s
# Warmup Iteration   3: 2433131.691 ops/s
# Warmup Iteration   4: 2048922.166 ops/s
# Warmup Iteration   5: 2406745.559 ops/s
# Warmup Iteration   6: 2457105.741 ops/s
# Warmup Iteration   7: 2399850.276 ops/s
# Warmup Iteration   8: 2441820.292 ops/s
# Warmup Iteration   9: 2409546.055 ops/s
# Warmup Iteration  10: 2434893.804 ops/s
# Warmup Iteration  11: 2425630.948 ops/s
# Warmup Iteration  12: 2438793.079 ops/s
# Warmup Iteration  13: 2443857.095 ops/s
# Warmup Iteration  14: 2442615.473 ops/s
# Warmup Iteration  15: 2410991.704 ops/s
# Warmup Iteration  16: 2436476.817 ops/s
# Warmup Iteration  17: 2454043.912 ops/s
# Warmup Iteration  18: 2448865.142 ops/s
# Warmup Iteration  19: 2419618.270 ops/s
# Warmup Iteration  20: 2447954.552 ops/s
# Warmup Iteration  21: 2434511.349 ops/s
# Warmup Iteration  22: 2442872.347 ops/s
# Warmup Iteration  23: 2443647.812 ops/s
# Warmup Iteration  24: 2454168.406 ops/s
# Warmup Iteration  25: 2429992.045 ops/s
# Warmup Iteration  26: 2451853.790 ops/s
# Warmup Iteration  27: 2445512.746 ops/s
# Warmup Iteration  28: 2455496.825 ops/s
# Warmup Iteration  29: 2408764.296 ops/s
# Warmup Iteration  30: 2426005.040 ops/s
Iteration   1: 2423458.632 ops/s
Iteration   2: 2446946.017 ops/s
Iteration   3: 2412590.416 ops/s
Iteration   4: 2447361.786 ops/s
Iteration   5: 2458760.642 ops/s
Iteration   6: 2439585.331 ops/s
Iteration   7: 2429216.806 ops/s
Iteration   8: 2449168.524 ops/s
Iteration   9: 2398079.196 ops/s
Iteration  10: 2336115.393 ops/s
Iteration  11: 2399836.563 ops/s
Iteration  12: 2462856.427 ops/s
Iteration  13: 2471394.595 ops/s
Iteration  14: 2424443.688 ops/s
Iteration  15: 2419889.085 ops/s
Iteration  16: 2446699.911 ops/s
Iteration  17: 2451033.249 ops/s
Iteration  18: 2434136.229 ops/s
Iteration  19: 2433822.945 ops/s
Iteration  20: 2454052.334 ops/s
Iteration  21: 2445234.608 ops/s
Iteration  22: 2450291.961 ops/s
Iteration  23: 2466466.021 ops/s
Iteration  24: 2453647.143 ops/s
Iteration  25: 2454591.010 ops/s
Iteration  26: 2434961.045 ops/s
Iteration  27: 2398097.633 ops/s
Iteration  28: 2437484.736 ops/s
Iteration  29: 2437207.812 ops/s
Iteration  30: 2423466.871 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collect":
  2434696.554 ±(99.9%) 17932.152 ops/s [Average]
  (min, avg, max) = (2336115.393, 2434696.554, 2471394.595), stdev = 26840.003
  CI (99.9%): [2416764.402, 2452628.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  2434696.554 ± 17932.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1856903.266 ops/s
# Warmup Iteration   2: 4422207.590 ops/s
# Warmup Iteration   3: 4118643.186 ops/s
# Warmup Iteration   4: 4024375.791 ops/s
# Warmup Iteration   5: 4413568.819 ops/s
# Warmup Iteration   6: 4413772.740 ops/s
# Warmup Iteration   7: 4467626.158 ops/s
# Warmup Iteration   8: 4432069.254 ops/s
# Warmup Iteration   9: 4450664.232 ops/s
# Warmup Iteration  10: 4426199.717 ops/s
# Warmup Iteration  11: 4304853.589 ops/s
# Warmup Iteration  12: 4422230.458 ops/s
# Warmup Iteration  13: 4431332.799 ops/s
# Warmup Iteration  14: 4434059.108 ops/s
# Warmup Iteration  15: 4400198.330 ops/s
# Warmup Iteration  16: 4414708.722 ops/s
# Warmup Iteration  17: 4459382.491 ops/s
# Warmup Iteration  18: 4449207.523 ops/s
# Warmup Iteration  19: 4404403.914 ops/s
# Warmup Iteration  20: 4404458.711 ops/s
# Warmup Iteration  21: 4437196.004 ops/s
# Warmup Iteration  22: 4452839.482 ops/s
# Warmup Iteration  23: 4421636.365 ops/s
# Warmup Iteration  24: 4406867.319 ops/s
# Warmup Iteration  25: 4454671.881 ops/s
# Warmup Iteration  26: 4431338.104 ops/s
# Warmup Iteration  27: 4440519.195 ops/s
# Warmup Iteration  28: 4444345.838 ops/s
# Warmup Iteration  29: 4457121.368 ops/s
# Warmup Iteration  30: 4359500.353 ops/s
Iteration   1: 4379058.977 ops/s
Iteration   2: 4414748.878 ops/s
Iteration   3: 4451251.498 ops/s
Iteration   4: 4450850.528 ops/s
Iteration   5: 4428331.136 ops/s
Iteration   6: 4419849.795 ops/s
Iteration   7: 4431617.605 ops/s
Iteration   8: 4387837.524 ops/s
Iteration   9: 4483505.553 ops/s
Iteration  10: 4435036.902 ops/s
Iteration  11: 4455381.692 ops/s
Iteration  12: 4451451.601 ops/s
Iteration  13: 4429942.572 ops/s
Iteration  14: 4423060.355 ops/s
Iteration  15: 4465197.334 ops/s
Iteration  16: 4451579.045 ops/s
Iteration  17: 4395554.438 ops/s
Iteration  18: 4439808.874 ops/s
Iteration  19: 4434428.646 ops/s
Iteration  20: 4406089.256 ops/s
Iteration  21: 4480919.762 ops/s
Iteration  22: 4437602.487 ops/s
Iteration  23: 4463073.559 ops/s
Iteration  24: 4439844.619 ops/s
Iteration  25: 4426184.715 ops/s
Iteration  26: 4471815.010 ops/s
Iteration  27: 4439266.678 ops/s
Iteration  28: 4436343.093 ops/s
Iteration  29: 4422954.749 ops/s
Iteration  30: 4438932.281 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  4436383.972 ±(99.9%) 16578.744 ops/s [Average]
  (min, avg, max) = (4379058.977, 4436383.972, 4483505.553), stdev = 24814.285
  CI (99.9%): [4419805.228, 4452962.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  4436383.972 ± 16578.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2031976.118 ops/s
# Warmup Iteration   2: 4677558.789 ops/s
# Warmup Iteration   3: 4652097.138 ops/s
# Warmup Iteration   4: 4036312.070 ops/s
# Warmup Iteration   5: 4723520.988 ops/s
# Warmup Iteration   6: 4675810.674 ops/s
# Warmup Iteration   7: 4731140.580 ops/s
# Warmup Iteration   8: 4748653.737 ops/s
# Warmup Iteration   9: 4695524.322 ops/s
# Warmup Iteration  10: 4717261.238 ops/s
# Warmup Iteration  11: 4673509.358 ops/s
# Warmup Iteration  12: 4706889.952 ops/s
# Warmup Iteration  13: 4736391.259 ops/s
# Warmup Iteration  14: 4743636.644 ops/s
# Warmup Iteration  15: 4705611.794 ops/s
# Warmup Iteration  16: 4752406.432 ops/s
# Warmup Iteration  17: 4743579.730 ops/s
# Warmup Iteration  18: 4746527.777 ops/s
# Warmup Iteration  19: 4756961.985 ops/s
# Warmup Iteration  20: 4696357.964 ops/s
# Warmup Iteration  21: 4750430.884 ops/s
# Warmup Iteration  22: 4764647.657 ops/s
# Warmup Iteration  23: 4725678.115 ops/s
# Warmup Iteration  24: 4728415.315 ops/s
# Warmup Iteration  25: 4752677.741 ops/s
# Warmup Iteration  26: 4738157.452 ops/s
# Warmup Iteration  27: 4758036.377 ops/s
# Warmup Iteration  28: 4760756.957 ops/s
# Warmup Iteration  29: 4755016.023 ops/s
# Warmup Iteration  30: 4750681.772 ops/s
Iteration   1: 4804560.668 ops/s
Iteration   2: 4739957.542 ops/s
Iteration   3: 4805451.713 ops/s
Iteration   4: 4768992.993 ops/s
Iteration   5: 4761042.456 ops/s
Iteration   6: 4760730.440 ops/s
Iteration   7: 4732258.320 ops/s
Iteration   8: 4699867.237 ops/s
Iteration   9: 4767338.844 ops/s
Iteration  10: 4714786.395 ops/s
Iteration  11: 4756405.997 ops/s
Iteration  12: 4734173.405 ops/s
Iteration  13: 4760024.800 ops/s
Iteration  14: 4680199.177 ops/s
Iteration  15: 4770679.260 ops/s
Iteration  16: 4758781.086 ops/s
Iteration  17: 4782947.328 ops/s
Iteration  18: 4727302.519 ops/s
Iteration  19: 4695814.133 ops/s
Iteration  20: 4738347.433 ops/s
Iteration  21: 4773408.457 ops/s
Iteration  22: 4744016.389 ops/s
Iteration  23: 4612292.626 ops/s
Iteration  24: 4748981.078 ops/s
Iteration  25: 4725941.657 ops/s
Iteration  26: 4764742.209 ops/s
Iteration  27: 4731103.972 ops/s
Iteration  28: 4755721.024 ops/s
Iteration  29: 4760427.464 ops/s
Iteration  30: 4693904.527 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  4742340.038 ±(99.9%) 25961.965 ops/s [Average]
  (min, avg, max) = (4612292.626, 4742340.038, 4805451.713), stdev = 38858.650
  CI (99.9%): [4716378.073, 4768302.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  4742340.038 ± 25961.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2011191.575 ops/s
# Warmup Iteration   2: 4614474.995 ops/s
# Warmup Iteration   3: 4696663.858 ops/s
# Warmup Iteration   4: 4002564.041 ops/s
# Warmup Iteration   5: 4724277.865 ops/s
# Warmup Iteration   6: 4687384.470 ops/s
# Warmup Iteration   7: 4680898.143 ops/s
# Warmup Iteration   8: 4720998.510 ops/s
# Warmup Iteration   9: 4744573.777 ops/s
# Warmup Iteration  10: 4702801.322 ops/s
# Warmup Iteration  11: 4752273.428 ops/s
# Warmup Iteration  12: 4681130.034 ops/s
# Warmup Iteration  13: 4719372.072 ops/s
# Warmup Iteration  14: 4746660.808 ops/s
# Warmup Iteration  15: 4687226.419 ops/s
# Warmup Iteration  16: 4707834.578 ops/s
# Warmup Iteration  17: 4688698.987 ops/s
# Warmup Iteration  18: 4693738.858 ops/s
# Warmup Iteration  19: 4714693.260 ops/s
# Warmup Iteration  20: 4641124.449 ops/s
# Warmup Iteration  21: 4757006.529 ops/s
# Warmup Iteration  22: 4717890.557 ops/s
# Warmup Iteration  23: 4744271.596 ops/s
# Warmup Iteration  24: 4730847.054 ops/s
# Warmup Iteration  25: 4716519.865 ops/s
# Warmup Iteration  26: 4765207.450 ops/s
# Warmup Iteration  27: 4751256.256 ops/s
# Warmup Iteration  28: 4750506.941 ops/s
# Warmup Iteration  29: 4733601.202 ops/s
# Warmup Iteration  30: 4741819.693 ops/s
Iteration   1: 4747065.002 ops/s
Iteration   2: 4741665.267 ops/s
Iteration   3: 4716834.922 ops/s
Iteration   4: 4755588.424 ops/s
Iteration   5: 4690703.702 ops/s
Iteration   6: 4678717.390 ops/s
Iteration   7: 4745422.367 ops/s
Iteration   8: 4744564.044 ops/s
Iteration   9: 4686253.811 ops/s
Iteration  10: 4761178.618 ops/s
Iteration  11: 4728504.072 ops/s
Iteration  12: 4645747.997 ops/s
Iteration  13: 4645796.385 ops/s
Iteration  14: 4735396.822 ops/s
Iteration  15: 4756171.588 ops/s
Iteration  16: 4781198.692 ops/s
Iteration  17: 4732141.946 ops/s
Iteration  18: 4727485.733 ops/s
Iteration  19: 4751084.144 ops/s
Iteration  20: 4682250.989 ops/s
Iteration  21: 4729720.236 ops/s
Iteration  22: 4764486.105 ops/s
Iteration  23: 4749678.293 ops/s
Iteration  24: 4769154.066 ops/s
Iteration  25: 4734322.187 ops/s
Iteration  26: 4769730.412 ops/s
Iteration  27: 4662652.812 ops/s
Iteration  28: 4685443.850 ops/s
Iteration  29: 4753974.852 ops/s
Iteration  30: 4726855.101 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  4726659.661 ±(99.9%) 24969.122 ops/s [Average]
  (min, avg, max) = (4645747.997, 4726659.661, 4781198.692), stdev = 37372.609
  CI (99.9%): [4701690.539, 4751628.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  4726659.661 ± 24969.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2014032.618 ops/s
# Warmup Iteration   2: 4712749.219 ops/s
# Warmup Iteration   3: 4631723.788 ops/s
# Warmup Iteration   4: 4043887.174 ops/s
# Warmup Iteration   5: 4746627.816 ops/s
# Warmup Iteration   6: 4714667.001 ops/s
# Warmup Iteration   7: 4757000.870 ops/s
# Warmup Iteration   8: 4717148.591 ops/s
# Warmup Iteration   9: 4711128.645 ops/s
# Warmup Iteration  10: 4706680.729 ops/s
# Warmup Iteration  11: 4701189.286 ops/s
# Warmup Iteration  12: 4730498.217 ops/s
# Warmup Iteration  13: 4741337.597 ops/s
# Warmup Iteration  14: 4762130.792 ops/s
# Warmup Iteration  15: 4745999.234 ops/s
# Warmup Iteration  16: 4749394.249 ops/s
# Warmup Iteration  17: 4745159.685 ops/s
# Warmup Iteration  18: 4714585.429 ops/s
# Warmup Iteration  19: 4756812.720 ops/s
# Warmup Iteration  20: 4692039.282 ops/s
# Warmup Iteration  21: 4765180.682 ops/s
# Warmup Iteration  22: 4695548.647 ops/s
# Warmup Iteration  23: 4728281.122 ops/s
# Warmup Iteration  24: 4746101.045 ops/s
# Warmup Iteration  25: 4726667.996 ops/s
# Warmup Iteration  26: 4761708.850 ops/s
# Warmup Iteration  27: 4748346.024 ops/s
# Warmup Iteration  28: 4731035.844 ops/s
# Warmup Iteration  29: 4747642.408 ops/s
# Warmup Iteration  30: 4752933.726 ops/s
Iteration   1: 4782794.725 ops/s
Iteration   2: 4714957.625 ops/s
Iteration   3: 4756083.416 ops/s
Iteration   4: 4762357.065 ops/s
Iteration   5: 4700773.841 ops/s
Iteration   6: 4781894.791 ops/s
Iteration   7: 4776146.072 ops/s
Iteration   8: 4626397.460 ops/s
Iteration   9: 4738036.770 ops/s
Iteration  10: 4750488.887 ops/s
Iteration  11: 4747959.033 ops/s
Iteration  12: 4716003.919 ops/s
Iteration  13: 4746378.969 ops/s
Iteration  14: 4728358.050 ops/s
Iteration  15: 4751281.649 ops/s
Iteration  16: 4715850.812 ops/s
Iteration  17: 4737956.541 ops/s
Iteration  18: 4694728.224 ops/s
Iteration  19: 4665331.997 ops/s
Iteration  20: 4729147.931 ops/s
Iteration  21: 4746091.475 ops/s
Iteration  22: 4672113.015 ops/s
Iteration  23: 4760347.974 ops/s
Iteration  24: 4676330.140 ops/s
Iteration  25: 4733467.435 ops/s
Iteration  26: 4748453.902 ops/s
Iteration  27: 4745692.675 ops/s
Iteration  28: 4679644.117 ops/s
Iteration  29: 4756186.855 ops/s
Iteration  30: 4800605.001 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  4731395.346 ±(99.9%) 26238.087 ops/s [Average]
  (min, avg, max) = (4626397.460, 4731395.346, 4800605.001), stdev = 39271.937
  CI (99.9%): [4705157.258, 4757633.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  4731395.346 ± 26238.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2039622.067 ops/s
# Warmup Iteration   2: 4704987.762 ops/s
# Warmup Iteration   3: 4570497.989 ops/s
# Warmup Iteration   4: 3963025.019 ops/s
# Warmup Iteration   5: 4710440.903 ops/s
# Warmup Iteration   6: 4692223.844 ops/s
# Warmup Iteration   7: 4726889.121 ops/s
# Warmup Iteration   8: 4724972.015 ops/s
# Warmup Iteration   9: 4661200.239 ops/s
# Warmup Iteration  10: 4640663.470 ops/s
# Warmup Iteration  11: 4723866.362 ops/s
# Warmup Iteration  12: 4652748.827 ops/s
# Warmup Iteration  13: 4682853.616 ops/s
# Warmup Iteration  14: 4721925.452 ops/s
# Warmup Iteration  15: 4675692.445 ops/s
# Warmup Iteration  16: 4681382.916 ops/s
# Warmup Iteration  17: 4740156.356 ops/s
# Warmup Iteration  18: 4759476.048 ops/s
# Warmup Iteration  19: 4772381.989 ops/s
# Warmup Iteration  20: 4741295.726 ops/s
# Warmup Iteration  21: 4717827.982 ops/s
# Warmup Iteration  22: 4710560.669 ops/s
# Warmup Iteration  23: 4689847.149 ops/s
# Warmup Iteration  24: 4744853.900 ops/s
# Warmup Iteration  25: 4731015.040 ops/s
# Warmup Iteration  26: 4734385.170 ops/s
# Warmup Iteration  27: 4735426.077 ops/s
# Warmup Iteration  28: 4686931.525 ops/s
# Warmup Iteration  29: 4662794.597 ops/s
# Warmup Iteration  30: 4739429.507 ops/s
Iteration   1: 4598317.433 ops/s
Iteration   2: 4648286.360 ops/s
Iteration   3: 4727829.132 ops/s
Iteration   4: 4725404.031 ops/s
Iteration   5: 4679955.433 ops/s
Iteration   6: 4753503.371 ops/s
Iteration   7: 4738875.259 ops/s
Iteration   8: 4755587.698 ops/s
Iteration   9: 4645988.931 ops/s
Iteration  10: 4745384.695 ops/s
Iteration  11: 4726847.969 ops/s
Iteration  12: 4763310.523 ops/s
Iteration  13: 4739553.128 ops/s
Iteration  14: 4753987.211 ops/s
Iteration  15: 4609042.696 ops/s
Iteration  16: 4758574.978 ops/s
Iteration  17: 4714663.054 ops/s
Iteration  18: 4758814.241 ops/s
Iteration  19: 4688806.942 ops/s
Iteration  20: 4755468.465 ops/s
Iteration  21: 4753454.743 ops/s
Iteration  22: 4739744.968 ops/s
Iteration  23: 4710733.521 ops/s
Iteration  24: 4765644.184 ops/s
Iteration  25: 4741949.639 ops/s
Iteration  26: 4750828.991 ops/s
Iteration  27: 4702725.541 ops/s
Iteration  28: 4689492.889 ops/s
Iteration  29: 4743782.281 ops/s
Iteration  30: 4763853.180 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  4721680.383 ±(99.9%) 30460.582 ops/s [Average]
  (min, avg, max) = (4598317.433, 4721680.383, 4765644.184), stdev = 45591.969
  CI (99.9%): [4691219.801, 4752140.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  4721680.383 ± 30460.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1143787.339 ops/s
# Warmup Iteration   2: 2514153.799 ops/s
# Warmup Iteration   3: 2541733.068 ops/s
# Warmup Iteration   4: 2112923.010 ops/s
# Warmup Iteration   5: 2547264.664 ops/s
# Warmup Iteration   6: 2536527.073 ops/s
# Warmup Iteration   7: 2553377.532 ops/s
# Warmup Iteration   8: 2549971.706 ops/s
# Warmup Iteration   9: 2541209.903 ops/s
# Warmup Iteration  10: 2516056.442 ops/s
# Warmup Iteration  11: 2542594.004 ops/s
# Warmup Iteration  12: 2506291.818 ops/s
# Warmup Iteration  13: 2529982.583 ops/s
# Warmup Iteration  14: 2531071.001 ops/s
# Warmup Iteration  15: 2525237.496 ops/s
# Warmup Iteration  16: 2526881.941 ops/s
# Warmup Iteration  17: 2499202.563 ops/s
# Warmup Iteration  18: 2524520.456 ops/s
# Warmup Iteration  19: 2546020.731 ops/s
# Warmup Iteration  20: 2516698.186 ops/s
# Warmup Iteration  21: 2499297.242 ops/s
# Warmup Iteration  22: 2526996.651 ops/s
# Warmup Iteration  23: 2526599.546 ops/s
# Warmup Iteration  24: 2512997.792 ops/s
# Warmup Iteration  25: 2485111.265 ops/s
# Warmup Iteration  26: 2518706.706 ops/s
# Warmup Iteration  27: 2520868.230 ops/s
# Warmup Iteration  28: 2509552.814 ops/s
# Warmup Iteration  29: 2537022.662 ops/s
# Warmup Iteration  30: 2546716.413 ops/s
Iteration   1: 2547021.222 ops/s
Iteration   2: 2561001.546 ops/s
Iteration   3: 2545779.653 ops/s
Iteration   4: 2537903.628 ops/s
Iteration   5: 2528829.292 ops/s
Iteration   6: 2540476.987 ops/s
Iteration   7: 2524482.118 ops/s
Iteration   8: 2550536.115 ops/s
Iteration   9: 2513590.249 ops/s
Iteration  10: 2529451.693 ops/s
Iteration  11: 2517255.872 ops/s
Iteration  12: 2526278.635 ops/s
Iteration  13: 2533875.156 ops/s
Iteration  14: 2512694.600 ops/s
Iteration  15: 2540657.671 ops/s
Iteration  16: 2542591.702 ops/s
Iteration  17: 2544104.605 ops/s
Iteration  18: 2528843.682 ops/s
Iteration  19: 2548195.970 ops/s
Iteration  20: 2504556.675 ops/s
Iteration  21: 2521058.592 ops/s
Iteration  22: 2541746.452 ops/s
Iteration  23: 2528683.518 ops/s
Iteration  24: 2526973.883 ops/s
Iteration  25: 2541952.726 ops/s
Iteration  26: 2516711.857 ops/s
Iteration  27: 2513158.443 ops/s
Iteration  28: 2527744.361 ops/s
Iteration  29: 2499065.905 ops/s
Iteration  30: 2523783.141 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  2530633.532 ±(99.9%) 9735.240 ops/s [Average]
  (min, avg, max) = (2499065.905, 2530633.532, 2561001.546), stdev = 14571.250
  CI (99.9%): [2520898.292, 2540368.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  2530633.532 ± 9735.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1947371.283 ops/s
# Warmup Iteration   2: 4559511.993 ops/s
# Warmup Iteration   3: 4551167.834 ops/s
# Warmup Iteration   4: 3817657.507 ops/s
# Warmup Iteration   5: 4546692.567 ops/s
# Warmup Iteration   6: 4602118.546 ops/s
# Warmup Iteration   7: 4600073.317 ops/s
# Warmup Iteration   8: 4600135.324 ops/s
# Warmup Iteration   9: 4547968.770 ops/s
# Warmup Iteration  10: 4602672.945 ops/s
# Warmup Iteration  11: 4588824.453 ops/s
# Warmup Iteration  12: 4533068.526 ops/s
# Warmup Iteration  13: 4582355.354 ops/s
# Warmup Iteration  14: 4558527.071 ops/s
# Warmup Iteration  15: 4571838.089 ops/s
# Warmup Iteration  16: 4590369.678 ops/s
# Warmup Iteration  17: 4522480.788 ops/s
# Warmup Iteration  18: 4597041.110 ops/s
# Warmup Iteration  19: 4594018.547 ops/s
# Warmup Iteration  20: 4545893.487 ops/s
# Warmup Iteration  21: 4599685.604 ops/s
# Warmup Iteration  22: 4576389.256 ops/s
# Warmup Iteration  23: 4632683.285 ops/s
# Warmup Iteration  24: 4554272.656 ops/s
# Warmup Iteration  25: 4582709.183 ops/s
# Warmup Iteration  26: 4583269.986 ops/s
# Warmup Iteration  27: 4603388.437 ops/s
# Warmup Iteration  28: 4600075.528 ops/s
# Warmup Iteration  29: 4586345.917 ops/s
# Warmup Iteration  30: 4617419.762 ops/s
Iteration   1: 4646513.369 ops/s
Iteration   2: 4617256.803 ops/s
Iteration   3: 4597291.106 ops/s
Iteration   4: 4551940.905 ops/s
Iteration   5: 4617565.436 ops/s
Iteration   6: 4592857.227 ops/s
Iteration   7: 4551502.474 ops/s
Iteration   8: 4654107.394 ops/s
Iteration   9: 4583002.926 ops/s
Iteration  10: 4597087.255 ops/s
Iteration  11: 4554937.366 ops/s
Iteration  12: 4593871.779 ops/s
Iteration  13: 4594281.042 ops/s
Iteration  14: 4621625.011 ops/s
Iteration  15: 4621674.637 ops/s
Iteration  16: 4554757.382 ops/s
Iteration  17: 4592608.959 ops/s
Iteration  18: 4615766.258 ops/s
Iteration  19: 4630517.119 ops/s
Iteration  20: 4598985.229 ops/s
Iteration  21: 4633538.692 ops/s
Iteration  22: 4619026.138 ops/s
Iteration  23: 4552653.533 ops/s
Iteration  24: 4612483.462 ops/s
Iteration  25: 4580366.925 ops/s
Iteration  26: 4635670.576 ops/s
Iteration  27: 4592231.258 ops/s
Iteration  28: 4538156.874 ops/s
Iteration  29: 4622930.494 ops/s
Iteration  30: 4619774.570 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  4599832.740 ±(99.9%) 20528.527 ops/s [Average]
  (min, avg, max) = (4538156.874, 4599832.740, 4654107.394), stdev = 30726.135
  CI (99.9%): [4579304.213, 4620361.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  4599832.740 ± 20528.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1973738.126 ops/s
# Warmup Iteration   2: 4454380.412 ops/s
# Warmup Iteration   3: 4571941.568 ops/s
# Warmup Iteration   4: 3847518.038 ops/s
# Warmup Iteration   5: 4600402.656 ops/s
# Warmup Iteration   6: 4568694.762 ops/s
# Warmup Iteration   7: 4601906.200 ops/s
# Warmup Iteration   8: 4614090.971 ops/s
# Warmup Iteration   9: 4569527.504 ops/s
# Warmup Iteration  10: 4565249.879 ops/s
# Warmup Iteration  11: 4583751.113 ops/s
# Warmup Iteration  12: 4595601.153 ops/s
# Warmup Iteration  13: 4572863.314 ops/s
# Warmup Iteration  14: 4621317.030 ops/s
# Warmup Iteration  15: 4573250.778 ops/s
# Warmup Iteration  16: 4566147.722 ops/s
# Warmup Iteration  17: 4602201.281 ops/s
# Warmup Iteration  18: 4590509.799 ops/s
# Warmup Iteration  19: 4595471.797 ops/s
# Warmup Iteration  20: 4567269.250 ops/s
# Warmup Iteration  21: 4600316.834 ops/s
# Warmup Iteration  22: 4615443.514 ops/s
# Warmup Iteration  23: 4623064.676 ops/s
# Warmup Iteration  24: 4605036.390 ops/s
# Warmup Iteration  25: 4612263.886 ops/s
# Warmup Iteration  26: 4607041.189 ops/s
# Warmup Iteration  27: 4561200.747 ops/s
# Warmup Iteration  28: 4608384.416 ops/s
# Warmup Iteration  29: 4588779.158 ops/s
# Warmup Iteration  30: 4593695.446 ops/s
Iteration   1: 4616503.051 ops/s
Iteration   2: 4620437.272 ops/s
Iteration   3: 4600010.987 ops/s
Iteration   4: 4662115.564 ops/s
Iteration   5: 4645507.664 ops/s
Iteration   6: 4596008.291 ops/s
Iteration   7: 4596940.882 ops/s
Iteration   8: 4557376.162 ops/s
Iteration   9: 4622720.910 ops/s
Iteration  10: 4613391.618 ops/s
Iteration  11: 4616477.168 ops/s
Iteration  12: 4645387.001 ops/s
Iteration  13: 4598873.743 ops/s
Iteration  14: 4628455.947 ops/s
Iteration  15: 4560933.630 ops/s
Iteration  16: 4605398.452 ops/s
Iteration  17: 4578998.494 ops/s
Iteration  18: 4534055.585 ops/s
Iteration  19: 4625674.999 ops/s
Iteration  20: 4645442.813 ops/s
Iteration  21: 4592478.409 ops/s
Iteration  22: 4540447.955 ops/s
Iteration  23: 4620845.924 ops/s
Iteration  24: 4619398.080 ops/s
Iteration  25: 4598524.097 ops/s
Iteration  26: 4563557.491 ops/s
Iteration  27: 4535707.508 ops/s
Iteration  28: 4509272.322 ops/s
Iteration  29: 4541432.230 ops/s
Iteration  30: 4592235.635 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  4596153.663 ±(99.9%) 25584.133 ops/s [Average]
  (min, avg, max) = (4509272.322, 4596153.663, 4662115.564), stdev = 38293.128
  CI (99.9%): [4570569.530, 4621737.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  4596153.663 ± 25584.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2039312.036 ops/s
# Warmup Iteration   2: 4656644.171 ops/s
# Warmup Iteration   3: 4666558.380 ops/s
# Warmup Iteration   4: 4024040.472 ops/s
# Warmup Iteration   5: 4702629.051 ops/s
# Warmup Iteration   6: 4678362.492 ops/s
# Warmup Iteration   7: 4742403.857 ops/s
# Warmup Iteration   8: 4713327.408 ops/s
# Warmup Iteration   9: 4708052.032 ops/s
# Warmup Iteration  10: 4694831.620 ops/s
# Warmup Iteration  11: 4652635.700 ops/s
# Warmup Iteration  12: 4733783.274 ops/s
# Warmup Iteration  13: 4678221.228 ops/s
# Warmup Iteration  14: 4728446.537 ops/s
# Warmup Iteration  15: 4714171.436 ops/s
# Warmup Iteration  16: 4712607.905 ops/s
# Warmup Iteration  17: 4713586.544 ops/s
# Warmup Iteration  18: 4709552.269 ops/s
# Warmup Iteration  19: 4751528.417 ops/s
# Warmup Iteration  20: 4680296.327 ops/s
# Warmup Iteration  21: 4731989.280 ops/s
# Warmup Iteration  22: 4733670.706 ops/s
# Warmup Iteration  23: 4744451.079 ops/s
# Warmup Iteration  24: 4743728.695 ops/s
# Warmup Iteration  25: 4699394.579 ops/s
# Warmup Iteration  26: 4761681.025 ops/s
# Warmup Iteration  27: 4718802.206 ops/s
# Warmup Iteration  28: 4732726.958 ops/s
# Warmup Iteration  29: 4638706.362 ops/s
# Warmup Iteration  30: 4700733.386 ops/s
Iteration   1: 4706743.826 ops/s
Iteration   2: 4744563.979 ops/s
Iteration   3: 4715333.189 ops/s
Iteration   4: 4682991.048 ops/s
Iteration   5: 4734457.412 ops/s
Iteration   6: 4740806.104 ops/s
Iteration   7: 4715949.685 ops/s
Iteration   8: 4704188.281 ops/s
Iteration   9: 4717228.571 ops/s
Iteration  10: 4753757.267 ops/s
Iteration  11: 4723209.211 ops/s
Iteration  12: 4739968.099 ops/s
Iteration  13: 4726107.103 ops/s
Iteration  14: 4720573.683 ops/s
Iteration  15: 4702494.057 ops/s
Iteration  16: 4644621.915 ops/s
Iteration  17: 4760294.278 ops/s
Iteration  18: 4745513.463 ops/s
Iteration  19: 4650295.582 ops/s
Iteration  20: 4742644.168 ops/s
Iteration  21: 4706791.579 ops/s
Iteration  22: 4670556.931 ops/s
Iteration  23: 4676900.417 ops/s
Iteration  24: 4728122.405 ops/s
Iteration  25: 4780828.548 ops/s
Iteration  26: 4700506.787 ops/s
Iteration  27: 4652538.401 ops/s
Iteration  28: 4719259.173 ops/s
Iteration  29: 4735040.125 ops/s
Iteration  30: 4689473.662 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  4714391.965 ±(99.9%) 22087.836 ops/s [Average]
  (min, avg, max) = (4644621.915, 4714391.965, 4780828.548), stdev = 33060.035
  CI (99.9%): [4692304.129, 4736479.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  4714391.965 ± 22087.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1071640.615 ops/s
# Warmup Iteration   2: 2409013.434 ops/s
# Warmup Iteration   3: 2415574.943 ops/s
# Warmup Iteration   4: 2022867.205 ops/s
# Warmup Iteration   5: 2427987.288 ops/s
# Warmup Iteration   6: 2426662.841 ops/s
# Warmup Iteration   7: 2416249.681 ops/s
# Warmup Iteration   8: 2429207.906 ops/s
# Warmup Iteration   9: 2430861.848 ops/s
# Warmup Iteration  10: 2389477.885 ops/s
# Warmup Iteration  11: 2387503.547 ops/s
# Warmup Iteration  12: 2434326.189 ops/s
# Warmup Iteration  13: 2429285.461 ops/s
# Warmup Iteration  14: 2418845.852 ops/s
# Warmup Iteration  15: 2403360.891 ops/s
# Warmup Iteration  16: 2406580.399 ops/s
# Warmup Iteration  17: 2419669.102 ops/s
# Warmup Iteration  18: 2432680.126 ops/s
# Warmup Iteration  19: 2421966.126 ops/s
# Warmup Iteration  20: 2423148.433 ops/s
# Warmup Iteration  21: 2428361.579 ops/s
# Warmup Iteration  22: 2381599.932 ops/s
# Warmup Iteration  23: 2415788.863 ops/s
# Warmup Iteration  24: 2419534.072 ops/s
# Warmup Iteration  25: 2421912.048 ops/s
# Warmup Iteration  26: 2404200.129 ops/s
# Warmup Iteration  27: 2422479.441 ops/s
# Warmup Iteration  28: 2429205.199 ops/s
# Warmup Iteration  29: 2436092.163 ops/s
# Warmup Iteration  30: 2412359.327 ops/s
Iteration   1: 2424542.645 ops/s
Iteration   2: 2432277.359 ops/s
Iteration   3: 2422171.624 ops/s
Iteration   4: 2386820.859 ops/s
Iteration   5: 2383532.754 ops/s
Iteration   6: 2428753.369 ops/s
Iteration   7: 2370835.989 ops/s
Iteration   8: 2413500.612 ops/s
Iteration   9: 2425285.249 ops/s
Iteration  10: 2423185.219 ops/s
Iteration  11: 2441693.610 ops/s
Iteration  12: 2422782.892 ops/s
Iteration  13: 2419341.541 ops/s
Iteration  14: 2426764.487 ops/s
Iteration  15: 2441935.986 ops/s
Iteration  16: 2413757.059 ops/s
Iteration  17: 2413438.360 ops/s
Iteration  18: 2424143.182 ops/s
Iteration  19: 2411210.258 ops/s
Iteration  20: 2426189.149 ops/s
Iteration  21: 2425489.344 ops/s
Iteration  22: 2382408.520 ops/s
Iteration  23: 2411414.051 ops/s
Iteration  24: 2427306.376 ops/s
Iteration  25: 2341569.980 ops/s
Iteration  26: 2437177.418 ops/s
Iteration  27: 2407087.701 ops/s
Iteration  28: 2412419.188 ops/s
Iteration  29: 2415093.785 ops/s
Iteration  30: 2446281.511 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  2415280.336 ±(99.9%) 15036.382 ops/s [Average]
  (min, avg, max) = (2341569.980, 2415280.336, 2446281.511), stdev = 22505.750
  CI (99.9%): [2400243.954, 2430316.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  2415280.336 ± 15036.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1326307.293 ops/s
# Warmup Iteration   2: 3013556.571 ops/s
# Warmup Iteration   3: 3090390.490 ops/s
# Warmup Iteration   4: 2692545.107 ops/s
# Warmup Iteration   5: 2995039.481 ops/s
# Warmup Iteration   6: 3121164.883 ops/s
# Warmup Iteration   7: 3139598.225 ops/s
# Warmup Iteration   8: 3113221.769 ops/s
# Warmup Iteration   9: 3122821.289 ops/s
# Warmup Iteration  10: 3113729.973 ops/s
# Warmup Iteration  11: 3136729.275 ops/s
# Warmup Iteration  12: 3065299.299 ops/s
# Warmup Iteration  13: 3120765.284 ops/s
# Warmup Iteration  14: 3125397.175 ops/s
# Warmup Iteration  15: 3117189.725 ops/s
# Warmup Iteration  16: 3092523.750 ops/s
# Warmup Iteration  17: 3126749.589 ops/s
# Warmup Iteration  18: 3120328.314 ops/s
# Warmup Iteration  19: 3123865.559 ops/s
# Warmup Iteration  20: 3129609.149 ops/s
# Warmup Iteration  21: 3101083.897 ops/s
# Warmup Iteration  22: 3134570.682 ops/s
# Warmup Iteration  23: 3115572.263 ops/s
# Warmup Iteration  24: 3127301.165 ops/s
# Warmup Iteration  25: 3085445.044 ops/s
# Warmup Iteration  26: 3088934.646 ops/s
# Warmup Iteration  27: 3113819.847 ops/s
# Warmup Iteration  28: 3131095.381 ops/s
# Warmup Iteration  29: 3113129.814 ops/s
# Warmup Iteration  30: 3116467.675 ops/s
Iteration   1: 3060405.647 ops/s
Iteration   2: 3137728.472 ops/s
Iteration   3: 3122170.412 ops/s
Iteration   4: 3141383.571 ops/s
Iteration   5: 3114839.275 ops/s
Iteration   6: 3097511.786 ops/s
Iteration   7: 3136867.995 ops/s
Iteration   8: 3127548.671 ops/s
Iteration   9: 3124562.775 ops/s
Iteration  10: 3117589.987 ops/s
Iteration  11: 3153028.223 ops/s
Iteration  12: 3071812.701 ops/s
Iteration  13: 3072573.671 ops/s
Iteration  14: 3123795.346 ops/s
Iteration  15: 3121830.876 ops/s
Iteration  16: 3153671.855 ops/s
Iteration  17: 3137145.255 ops/s
Iteration  18: 3154231.497 ops/s
Iteration  19: 3124060.486 ops/s
Iteration  20: 3057890.232 ops/s
Iteration  21: 3056949.111 ops/s
Iteration  22: 3114004.995 ops/s
Iteration  23: 3115108.746 ops/s
Iteration  24: 3123113.887 ops/s
Iteration  25: 3140147.192 ops/s
Iteration  26: 3117899.919 ops/s
Iteration  27: 3119592.576 ops/s
Iteration  28: 3082809.683 ops/s
Iteration  29: 3139759.104 ops/s
Iteration  30: 3130162.937 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_corresponds":
  3116339.896 ±(99.9%) 18942.724 ops/s [Average]
  (min, avg, max) = (3056949.111, 3116339.896, 3154231.497), stdev = 28352.580
  CI (99.9%): [3097397.172, 3135282.620] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_corresponds  thrpt   30  3116339.896 ± 18942.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3648516.092 ops/s
# Warmup Iteration   2: 7897119.139 ops/s
# Warmup Iteration   3: 7844588.046 ops/s
# Warmup Iteration   4: 6612423.492 ops/s
# Warmup Iteration   5: 7869898.766 ops/s
# Warmup Iteration   6: 7913051.745 ops/s
# Warmup Iteration   7: 7940382.975 ops/s
# Warmup Iteration   8: 7763516.241 ops/s
# Warmup Iteration   9: 7903194.182 ops/s
# Warmup Iteration  10: 7878697.293 ops/s
# Warmup Iteration  11: 7889550.135 ops/s
# Warmup Iteration  12: 7915008.943 ops/s
# Warmup Iteration  13: 7902731.004 ops/s
# Warmup Iteration  14: 7891892.946 ops/s
# Warmup Iteration  15: 7878718.764 ops/s
# Warmup Iteration  16: 7858932.728 ops/s
# Warmup Iteration  17: 7833386.826 ops/s
# Warmup Iteration  18: 7904674.300 ops/s
# Warmup Iteration  19: 7894976.289 ops/s
# Warmup Iteration  20: 7863974.792 ops/s
# Warmup Iteration  21: 7880339.344 ops/s
# Warmup Iteration  22: 7840271.654 ops/s
# Warmup Iteration  23: 7803048.031 ops/s
# Warmup Iteration  24: 7888135.418 ops/s
# Warmup Iteration  25: 7778322.878 ops/s
# Warmup Iteration  26: 7833332.762 ops/s
# Warmup Iteration  27: 7840616.677 ops/s
# Warmup Iteration  28: 7821750.954 ops/s
# Warmup Iteration  29: 7894617.371 ops/s
# Warmup Iteration  30: 7880524.466 ops/s
Iteration   1: 7850150.957 ops/s
Iteration   2: 7854743.971 ops/s
Iteration   3: 7942167.143 ops/s
Iteration   4: 7759649.370 ops/s
Iteration   5: 7885521.733 ops/s
Iteration   6: 7920715.485 ops/s
Iteration   7: 7758758.956 ops/s
Iteration   8: 7898567.101 ops/s
Iteration   9: 7884714.278 ops/s
Iteration  10: 7819372.628 ops/s
Iteration  11: 7814093.233 ops/s
Iteration  12: 7909710.763 ops/s
Iteration  13: 7906665.180 ops/s
Iteration  14: 7928008.400 ops/s
Iteration  15: 7882887.917 ops/s
Iteration  16: 7928519.954 ops/s
Iteration  17: 7877393.955 ops/s
Iteration  18: 7904279.475 ops/s
Iteration  19: 7880260.308 ops/s
Iteration  20: 7680454.433 ops/s
Iteration  21: 7745872.261 ops/s
Iteration  22: 7896415.648 ops/s
Iteration  23: 7891432.822 ops/s
Iteration  24: 7897574.133 ops/s
Iteration  25: 7903740.929 ops/s
Iteration  26: 7877256.462 ops/s
Iteration  27: 7889974.855 ops/s
Iteration  28: 7880280.812 ops/s
Iteration  29: 7878273.754 ops/s
Iteration  30: 7752052.229 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex":
  7863316.972 ±(99.9%) 42748.000 ops/s [Average]
  (min, avg, max) = (7680454.433, 7863316.972, 7942167.143), stdev = 63983.198
  CI (99.9%): [7820568.972, 7906064.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex  thrpt   30  7863316.972 ± 42748.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3220368.738 ops/s
# Warmup Iteration   2: 7108831.950 ops/s
# Warmup Iteration   3: 7160375.121 ops/s
# Warmup Iteration   4: 6142079.540 ops/s
# Warmup Iteration   5: 7127786.711 ops/s
# Warmup Iteration   6: 7171023.021 ops/s
# Warmup Iteration   7: 7223026.775 ops/s
# Warmup Iteration   8: 7218107.594 ops/s
# Warmup Iteration   9: 7120554.493 ops/s
# Warmup Iteration  10: 7146513.282 ops/s
# Warmup Iteration  11: 7165736.408 ops/s
# Warmup Iteration  12: 7167438.185 ops/s
# Warmup Iteration  13: 7217130.612 ops/s
# Warmup Iteration  14: 7220575.525 ops/s
# Warmup Iteration  15: 7227881.204 ops/s
# Warmup Iteration  16: 7185155.132 ops/s
# Warmup Iteration  17: 7202323.229 ops/s
# Warmup Iteration  18: 7226489.667 ops/s
# Warmup Iteration  19: 7251666.273 ops/s
# Warmup Iteration  20: 7222873.310 ops/s
# Warmup Iteration  21: 7229415.977 ops/s
# Warmup Iteration  22: 7280292.863 ops/s
# Warmup Iteration  23: 7157709.321 ops/s
# Warmup Iteration  24: 7205647.220 ops/s
# Warmup Iteration  25: 7170034.756 ops/s
# Warmup Iteration  26: 7179587.048 ops/s
# Warmup Iteration  27: 7233717.306 ops/s
# Warmup Iteration  28: 7244853.745 ops/s
# Warmup Iteration  29: 7257552.872 ops/s
# Warmup Iteration  30: 7284377.068 ops/s
Iteration   1: 7339910.040 ops/s
Iteration   2: 7272810.614 ops/s
Iteration   3: 7163009.493 ops/s
Iteration   4: 7239640.759 ops/s
Iteration   5: 7036745.762 ops/s
Iteration   6: 7232327.163 ops/s
Iteration   7: 7287871.138 ops/s
Iteration   8: 7219005.772 ops/s
Iteration   9: 7232280.777 ops/s
Iteration  10: 7204738.241 ops/s
Iteration  11: 7229792.608 ops/s
Iteration  12: 7311196.168 ops/s
Iteration  13: 7255192.046 ops/s
Iteration  14: 7282286.251 ops/s
Iteration  15: 7255608.945 ops/s
Iteration  16: 7166711.768 ops/s
Iteration  17: 7299236.852 ops/s
Iteration  18: 7279802.415 ops/s
Iteration  19: 7222272.344 ops/s
Iteration  20: 7276735.794 ops/s
Iteration  21: 7291998.069 ops/s
Iteration  22: 7309612.098 ops/s
Iteration  23: 7188539.681 ops/s
Iteration  24: 7231064.777 ops/s
Iteration  25: 7131635.874 ops/s
Iteration  26: 7272263.489 ops/s
Iteration  27: 7221439.479 ops/s
Iteration  28: 7137099.039 ops/s
Iteration  29: 7278321.818 ops/s
Iteration  30: 7280938.757 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex":
  7238336.268 ±(99.9%) 42800.344 ops/s [Average]
  (min, avg, max) = (7036745.762, 7238336.268, 7339910.040), stdev = 64061.545
  CI (99.9%): [7195535.923, 7281136.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  7238336.268 ± 42800.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 989806.663 ops/s
# Warmup Iteration   2: 2670740.323 ops/s
# Warmup Iteration   3: 2741865.657 ops/s
# Warmup Iteration   4: 2290657.314 ops/s
# Warmup Iteration   5: 2751464.394 ops/s
# Warmup Iteration   6: 2772529.823 ops/s
# Warmup Iteration   7: 2776752.647 ops/s
# Warmup Iteration   8: 2756644.930 ops/s
# Warmup Iteration   9: 2765733.095 ops/s
# Warmup Iteration  10: 2769961.070 ops/s
# Warmup Iteration  11: 2729052.730 ops/s
# Warmup Iteration  12: 2768738.527 ops/s
# Warmup Iteration  13: 2769404.699 ops/s
# Warmup Iteration  14: 2762046.280 ops/s
# Warmup Iteration  15: 2751985.619 ops/s
# Warmup Iteration  16: 2770409.830 ops/s
# Warmup Iteration  17: 2782589.389 ops/s
# Warmup Iteration  18: 2741925.596 ops/s
# Warmup Iteration  19: 2778450.999 ops/s
# Warmup Iteration  20: 2771810.306 ops/s
# Warmup Iteration  21: 2778823.584 ops/s
# Warmup Iteration  22: 2759411.005 ops/s
# Warmup Iteration  23: 2780466.346 ops/s
# Warmup Iteration  24: 2753638.217 ops/s
# Warmup Iteration  25: 2776863.299 ops/s
# Warmup Iteration  26: 2755708.196 ops/s
# Warmup Iteration  27: 2770935.992 ops/s
# Warmup Iteration  28: 2768007.168 ops/s
# Warmup Iteration  29: 2759426.796 ops/s
# Warmup Iteration  30: 2756141.336 ops/s
Iteration   1: 2782878.353 ops/s
Iteration   2: 2778356.349 ops/s
Iteration   3: 2770626.270 ops/s
Iteration   4: 2769469.234 ops/s
Iteration   5: 2776975.891 ops/s
Iteration   6: 2781707.025 ops/s
Iteration   7: 2782636.668 ops/s
Iteration   8: 2776627.524 ops/s
Iteration   9: 2701886.278 ops/s
Iteration  10: 2726534.690 ops/s
Iteration  11: 2774500.208 ops/s
Iteration  12: 2783635.055 ops/s
Iteration  13: 2770974.749 ops/s
Iteration  14: 2779159.180 ops/s
Iteration  15: 2776326.026 ops/s
Iteration  16: 2769023.158 ops/s
Iteration  17: 2657479.791 ops/s
Iteration  18: 2781217.124 ops/s
Iteration  19: 2778898.338 ops/s
Iteration  20: 2772865.471 ops/s
Iteration  21: 2785446.432 ops/s
Iteration  22: 2778105.433 ops/s
Iteration  23: 2775025.599 ops/s
Iteration  24: 2761314.816 ops/s
Iteration  25: 2782178.753 ops/s
Iteration  26: 2767095.479 ops/s
Iteration  27: 2743756.726 ops/s
Iteration  28: 2781554.641 ops/s
Iteration  29: 2759888.872 ops/s
Iteration  30: 2779759.414 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  2766863.452 ±(99.9%) 18253.517 ops/s [Average]
  (min, avg, max) = (2657479.791, 2766863.452, 2785446.432), stdev = 27321.008
  CI (99.9%): [2748609.934, 2785116.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  2766863.452 ± 18253.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1676902.183 ops/s
# Warmup Iteration   2: 4137243.213 ops/s
# Warmup Iteration   3: 3800566.588 ops/s
# Warmup Iteration   4: 3883602.027 ops/s
# Warmup Iteration   5: 4218903.437 ops/s
# Warmup Iteration   6: 4182919.307 ops/s
# Warmup Iteration   7: 4192145.348 ops/s
# Warmup Iteration   8: 4172831.640 ops/s
# Warmup Iteration   9: 4177791.269 ops/s
# Warmup Iteration  10: 4204826.602 ops/s
# Warmup Iteration  11: 4186979.524 ops/s
# Warmup Iteration  12: 4182796.163 ops/s
# Warmup Iteration  13: 4200096.986 ops/s
# Warmup Iteration  14: 4170561.044 ops/s
# Warmup Iteration  15: 4189929.051 ops/s
# Warmup Iteration  16: 4200809.594 ops/s
# Warmup Iteration  17: 4199975.009 ops/s
# Warmup Iteration  18: 4172769.223 ops/s
# Warmup Iteration  19: 4210169.072 ops/s
# Warmup Iteration  20: 4188070.393 ops/s
# Warmup Iteration  21: 4204896.935 ops/s
# Warmup Iteration  22: 4209916.202 ops/s
# Warmup Iteration  23: 4185985.489 ops/s
# Warmup Iteration  24: 4216120.439 ops/s
# Warmup Iteration  25: 4209386.391 ops/s
# Warmup Iteration  26: 4215533.712 ops/s
# Warmup Iteration  27: 4181895.118 ops/s
# Warmup Iteration  28: 4207554.498 ops/s
# Warmup Iteration  29: 4154745.867 ops/s
# Warmup Iteration  30: 4219855.149 ops/s
Iteration   1: 4224147.887 ops/s
Iteration   2: 4150371.070 ops/s
Iteration   3: 4195383.805 ops/s
Iteration   4: 4183991.545 ops/s
Iteration   5: 4208768.890 ops/s
Iteration   6: 4214877.717 ops/s
Iteration   7: 4220388.534 ops/s
Iteration   8: 4190926.943 ops/s
Iteration   9: 4213944.150 ops/s
Iteration  10: 4149651.937 ops/s
Iteration  11: 4203227.864 ops/s
Iteration  12: 4202087.060 ops/s
Iteration  13: 4213293.502 ops/s
Iteration  14: 4230571.110 ops/s
Iteration  15: 4207880.258 ops/s
Iteration  16: 4203397.005 ops/s
Iteration  17: 4093097.520 ops/s
Iteration  18: 4213286.711 ops/s
Iteration  19: 4183346.901 ops/s
Iteration  20: 4214855.986 ops/s
Iteration  21: 4213386.220 ops/s
Iteration  22: 4220418.897 ops/s
Iteration  23: 4204056.734 ops/s
Iteration  24: 4199699.406 ops/s
Iteration  25: 4204036.060 ops/s
Iteration  26: 4220017.166 ops/s
Iteration  27: 4197096.487 ops/s
Iteration  28: 4199235.948 ops/s
Iteration  29: 4213772.882 ops/s
Iteration  30: 4190265.187 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  4199316.046 ±(99.9%) 18175.001 ops/s [Average]
  (min, avg, max) = (4093097.520, 4199316.046, 4230571.110), stdev = 27203.487
  CI (99.9%): [4181141.045, 4217491.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  4199316.046 ± 18175.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670162.449 ops/s
# Warmup Iteration   2: 720492.196 ops/s
# Warmup Iteration   3: 962760.988 ops/s
# Warmup Iteration   4: 950348.096 ops/s
# Warmup Iteration   5: 954812.443 ops/s
# Warmup Iteration   6: 964325.282 ops/s
# Warmup Iteration   7: 958090.730 ops/s
# Warmup Iteration   8: 951015.822 ops/s
# Warmup Iteration   9: 961064.117 ops/s
# Warmup Iteration  10: 956320.328 ops/s
# Warmup Iteration  11: 820256.367 ops/s
# Warmup Iteration  12: 942634.115 ops/s
# Warmup Iteration  13: 958759.894 ops/s
# Warmup Iteration  14: 959728.591 ops/s
# Warmup Iteration  15: 959118.714 ops/s
# Warmup Iteration  16: 962218.775 ops/s
# Warmup Iteration  17: 1016734.688 ops/s
# Warmup Iteration  18: 1021533.811 ops/s
# Warmup Iteration  19: 1015955.889 ops/s
# Warmup Iteration  20: 1012073.154 ops/s
# Warmup Iteration  21: 1009874.288 ops/s
# Warmup Iteration  22: 1019322.594 ops/s
# Warmup Iteration  23: 1017667.809 ops/s
# Warmup Iteration  24: 1016288.054 ops/s
# Warmup Iteration  25: 1014962.066 ops/s
# Warmup Iteration  26: 1012662.887 ops/s
# Warmup Iteration  27: 1013943.199 ops/s
# Warmup Iteration  28: 1011832.963 ops/s
# Warmup Iteration  29: 1016905.267 ops/s
# Warmup Iteration  30: 994412.594 ops/s
Iteration   1: 1019271.292 ops/s
Iteration   2: 1014201.760 ops/s
Iteration   3: 1016504.191 ops/s
Iteration   4: 1003408.623 ops/s
Iteration   5: 1018885.491 ops/s
Iteration   6: 1015073.640 ops/s
Iteration   7: 1018595.401 ops/s
Iteration   8: 1014237.234 ops/s
Iteration   9: 1017758.242 ops/s
Iteration  10: 1015309.354 ops/s
Iteration  11: 1014983.984 ops/s
Iteration  12: 1018151.840 ops/s
Iteration  13: 1015857.458 ops/s
Iteration  14: 1015311.107 ops/s
Iteration  15: 1018842.572 ops/s
Iteration  16: 1014002.954 ops/s
Iteration  17: 1014801.484 ops/s
Iteration  18: 1021086.016 ops/s
Iteration  19: 1015584.835 ops/s
Iteration  20: 998577.927 ops/s
Iteration  21: 988352.519 ops/s
Iteration  22: 1010435.206 ops/s
Iteration  23: 1015425.580 ops/s
Iteration  24: 1014097.158 ops/s
Iteration  25: 1008655.365 ops/s
Iteration  26: 1019351.010 ops/s
Iteration  27: 1013962.797 ops/s
Iteration  28: 1013949.542 ops/s
Iteration  29: 1016052.424 ops/s
Iteration  30: 1019172.273 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1013996.643 ±(99.9%) 4485.357 ops/s [Average]
  (min, avg, max) = (988352.519, 1013996.643, 1021086.016), stdev = 6713.472
  CI (99.9%): [1009511.286, 1018482.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1013996.643 ± 4485.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607245.053 ops/s
# Warmup Iteration   2: 645436.946 ops/s
# Warmup Iteration   3: 810329.081 ops/s
# Warmup Iteration   4: 835909.363 ops/s
# Warmup Iteration   5: 845604.106 ops/s
# Warmup Iteration   6: 834574.201 ops/s
# Warmup Iteration   7: 832175.346 ops/s
# Warmup Iteration   8: 835085.985 ops/s
# Warmup Iteration   9: 840774.826 ops/s
# Warmup Iteration  10: 833625.375 ops/s
# Warmup Iteration  11: 840797.208 ops/s
# Warmup Iteration  12: 810940.389 ops/s
# Warmup Iteration  13: 735152.268 ops/s
# Warmup Iteration  14: 846886.820 ops/s
# Warmup Iteration  15: 847278.954 ops/s
# Warmup Iteration  16: 847930.445 ops/s
# Warmup Iteration  17: 878811.989 ops/s
# Warmup Iteration  18: 880920.457 ops/s
# Warmup Iteration  19: 881772.184 ops/s
# Warmup Iteration  20: 884441.116 ops/s
# Warmup Iteration  21: 886707.635 ops/s
# Warmup Iteration  22: 879343.438 ops/s
# Warmup Iteration  23: 879514.934 ops/s
# Warmup Iteration  24: 883860.732 ops/s
# Warmup Iteration  25: 889407.091 ops/s
# Warmup Iteration  26: 880913.058 ops/s
# Warmup Iteration  27: 881265.438 ops/s
# Warmup Iteration  28: 879135.090 ops/s
# Warmup Iteration  29: 889529.435 ops/s
# Warmup Iteration  30: 890206.683 ops/s
Iteration   1: 887313.803 ops/s
Iteration   2: 876495.672 ops/s
Iteration   3: 886697.636 ops/s
Iteration   4: 890922.356 ops/s
Iteration   5: 873753.718 ops/s
Iteration   6: 891077.948 ops/s
Iteration   7: 881167.406 ops/s
Iteration   8: 893019.836 ops/s
Iteration   9: 889547.540 ops/s
Iteration  10: 887413.640 ops/s
Iteration  11: 886088.754 ops/s
Iteration  12: 884258.097 ops/s
Iteration  13: 877207.741 ops/s
Iteration  14: 890286.157 ops/s
Iteration  15: 887686.143 ops/s
Iteration  16: 889022.470 ops/s
Iteration  17: 889476.311 ops/s
Iteration  18: 893725.048 ops/s
Iteration  19: 883071.803 ops/s
Iteration  20: 891243.379 ops/s
Iteration  21: 886410.940 ops/s
Iteration  22: 890621.970 ops/s
Iteration  23: 888633.163 ops/s
Iteration  24: 890473.740 ops/s
Iteration  25: 889325.287 ops/s
Iteration  26: 889590.709 ops/s
Iteration  27: 887550.454 ops/s
Iteration  28: 884775.926 ops/s
Iteration  29: 890930.338 ops/s
Iteration  30: 890325.451 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_listIterator":
  887270.448 ±(99.9%) 3209.437 ops/s [Average]
  (min, avg, max) = (873753.718, 887270.448, 893725.048), stdev = 4803.734
  CI (99.9%): [884061.011, 890479.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_listIterator  thrpt   30  887270.448 ± 3209.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2535102.643 ops/s
# Warmup Iteration   2: 5652656.864 ops/s
# Warmup Iteration   3: 4735664.162 ops/s
# Warmup Iteration   4: 5581734.222 ops/s
# Warmup Iteration   5: 5693377.914 ops/s
# Warmup Iteration   6: 5653538.287 ops/s
# Warmup Iteration   7: 5677938.037 ops/s
# Warmup Iteration   8: 5662409.986 ops/s
# Warmup Iteration   9: 5668916.085 ops/s
# Warmup Iteration  10: 5585913.245 ops/s
# Warmup Iteration  11: 5680937.625 ops/s
# Warmup Iteration  12: 5648139.343 ops/s
# Warmup Iteration  13: 5633058.232 ops/s
# Warmup Iteration  14: 5570370.581 ops/s
# Warmup Iteration  15: 5663833.002 ops/s
# Warmup Iteration  16: 5661155.071 ops/s
# Warmup Iteration  17: 5677183.686 ops/s
# Warmup Iteration  18: 5693314.168 ops/s
# Warmup Iteration  19: 5649569.826 ops/s
# Warmup Iteration  20: 5671607.198 ops/s
# Warmup Iteration  21: 5588378.570 ops/s
# Warmup Iteration  22: 5571520.920 ops/s
# Warmup Iteration  23: 5663764.551 ops/s
# Warmup Iteration  24: 5664193.267 ops/s
# Warmup Iteration  25: 5682225.598 ops/s
# Warmup Iteration  26: 5698875.626 ops/s
# Warmup Iteration  27: 5685697.481 ops/s
# Warmup Iteration  28: 5638629.303 ops/s
# Warmup Iteration  29: 5674126.227 ops/s
# Warmup Iteration  30: 5614206.416 ops/s
Iteration   1: 5698068.977 ops/s
Iteration   2: 5665015.264 ops/s
Iteration   3: 5698502.132 ops/s
Iteration   4: 5643968.104 ops/s
Iteration   5: 5608616.099 ops/s
Iteration   6: 5655004.460 ops/s
Iteration   7: 5600608.739 ops/s
Iteration   8: 5684432.084 ops/s
Iteration   9: 5709561.112 ops/s
Iteration  10: 5622101.951 ops/s
Iteration  11: 5641045.306 ops/s
Iteration  12: 5649869.943 ops/s
Iteration  13: 5648275.917 ops/s
Iteration  14: 5690643.152 ops/s
Iteration  15: 5650637.702 ops/s
Iteration  16: 5678304.725 ops/s
Iteration  17: 5647986.204 ops/s
Iteration  18: 5682256.675 ops/s
Iteration  19: 5575508.243 ops/s
Iteration  20: 5658764.501 ops/s
Iteration  21: 5707553.939 ops/s
Iteration  22: 5744121.886 ops/s
Iteration  23: 5592187.983 ops/s
Iteration  24: 5659020.970 ops/s
Iteration  25: 5719252.880 ops/s
Iteration  26: 5696058.570 ops/s
Iteration  27: 5594346.090 ops/s
Iteration  28: 5684685.486 ops/s
Iteration  29: 5654246.441 ops/s
Iteration  30: 5656952.850 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  5660586.613 ±(99.9%) 26993.104 ops/s [Average]
  (min, avg, max) = (5575508.243, 5660586.613, 5744121.886), stdev = 40402.011
  CI (99.9%): [5633593.509, 5687579.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  5660586.613 ± 26993.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1471971.223 ops/s
# Warmup Iteration   2: 3222565.304 ops/s
# Warmup Iteration   3: 3274881.544 ops/s
# Warmup Iteration   4: 2714439.764 ops/s
# Warmup Iteration   5: 3257248.721 ops/s
# Warmup Iteration   6: 3220048.819 ops/s
# Warmup Iteration   7: 3251086.470 ops/s
# Warmup Iteration   8: 3257858.173 ops/s
# Warmup Iteration   9: 3241034.262 ops/s
# Warmup Iteration  10: 3272654.345 ops/s
# Warmup Iteration  11: 3252543.062 ops/s
# Warmup Iteration  12: 3241576.976 ops/s
# Warmup Iteration  13: 3191863.188 ops/s
# Warmup Iteration  14: 3265088.260 ops/s
# Warmup Iteration  15: 3278402.855 ops/s
# Warmup Iteration  16: 3258953.527 ops/s
# Warmup Iteration  17: 3218020.705 ops/s
# Warmup Iteration  18: 3232752.353 ops/s
# Warmup Iteration  19: 3260196.301 ops/s
# Warmup Iteration  20: 3244198.834 ops/s
# Warmup Iteration  21: 3243283.551 ops/s
# Warmup Iteration  22: 3208585.907 ops/s
# Warmup Iteration  23: 3230126.453 ops/s
# Warmup Iteration  24: 3256954.101 ops/s
# Warmup Iteration  25: 3268744.717 ops/s
# Warmup Iteration  26: 3255788.797 ops/s
# Warmup Iteration  27: 3255032.326 ops/s
# Warmup Iteration  28: 3225815.259 ops/s
# Warmup Iteration  29: 3279442.594 ops/s
# Warmup Iteration  30: 3254223.859 ops/s
Iteration   1: 3233640.052 ops/s
Iteration   2: 3259398.399 ops/s
Iteration   3: 3293365.050 ops/s
Iteration   4: 3242863.317 ops/s
Iteration   5: 3273383.337 ops/s
Iteration   6: 3231530.487 ops/s
Iteration   7: 3255938.910 ops/s
Iteration   8: 3275095.014 ops/s
Iteration   9: 3203614.279 ops/s
Iteration  10: 3260224.483 ops/s
Iteration  11: 3275492.939 ops/s
Iteration  12: 3256359.377 ops/s
Iteration  13: 3265007.471 ops/s
Iteration  14: 3273684.608 ops/s
Iteration  15: 3187770.764 ops/s
Iteration  16: 3238788.828 ops/s
Iteration  17: 3261854.781 ops/s
Iteration  18: 3240406.766 ops/s
Iteration  19: 3183203.774 ops/s
Iteration  20: 3249965.435 ops/s
Iteration  21: 3250233.564 ops/s
Iteration  22: 3264646.272 ops/s
Iteration  23: 3238847.936 ops/s
Iteration  24: 3181660.314 ops/s
Iteration  25: 3247778.712 ops/s
Iteration  26: 3238833.613 ops/s
Iteration  27: 3238705.172 ops/s
Iteration  28: 3238831.337 ops/s
Iteration  29: 3248549.799 ops/s
Iteration  30: 3242343.572 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partition":
  3245067.279 ±(99.9%) 17973.436 ops/s [Average]
  (min, avg, max) = (3181660.314, 3245067.279, 3293365.050), stdev = 26901.794
  CI (99.9%): [3227093.843, 3263040.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  3245067.279 ± 17973.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1474997.342 ops/s
# Warmup Iteration   2: 3220920.575 ops/s
# Warmup Iteration   3: 3222500.966 ops/s
# Warmup Iteration   4: 2649988.282 ops/s
# Warmup Iteration   5: 3246424.849 ops/s
# Warmup Iteration   6: 3258501.298 ops/s
# Warmup Iteration   7: 3224642.549 ops/s
# Warmup Iteration   8: 3232658.890 ops/s
# Warmup Iteration   9: 3242375.709 ops/s
# Warmup Iteration  10: 3248596.429 ops/s
# Warmup Iteration  11: 3262177.367 ops/s
# Warmup Iteration  12: 3274099.390 ops/s
# Warmup Iteration  13: 3276914.216 ops/s
# Warmup Iteration  14: 3253067.444 ops/s
# Warmup Iteration  15: 3244089.771 ops/s
# Warmup Iteration  16: 3243777.209 ops/s
# Warmup Iteration  17: 3260026.408 ops/s
# Warmup Iteration  18: 3255147.791 ops/s
# Warmup Iteration  19: 3259603.582 ops/s
# Warmup Iteration  20: 3249068.224 ops/s
# Warmup Iteration  21: 3239804.434 ops/s
# Warmup Iteration  22: 3246163.612 ops/s
# Warmup Iteration  23: 3266001.360 ops/s
# Warmup Iteration  24: 3264151.499 ops/s
# Warmup Iteration  25: 3229493.310 ops/s
# Warmup Iteration  26: 3253575.190 ops/s
# Warmup Iteration  27: 3264045.036 ops/s
# Warmup Iteration  28: 3259047.167 ops/s
# Warmup Iteration  29: 3285301.866 ops/s
# Warmup Iteration  30: 3254547.213 ops/s
Iteration   1: 3231672.698 ops/s
Iteration   2: 3260532.497 ops/s
Iteration   3: 3260129.817 ops/s
Iteration   4: 3258716.566 ops/s
Iteration   5: 3269821.744 ops/s
Iteration   6: 3280823.761 ops/s
Iteration   7: 3260496.653 ops/s
Iteration   8: 3259549.194 ops/s
Iteration   9: 3265053.073 ops/s
Iteration  10: 3266217.750 ops/s
Iteration  11: 3273045.372 ops/s
Iteration  12: 3243740.660 ops/s
Iteration  13: 3232179.886 ops/s
Iteration  14: 3245448.748 ops/s
Iteration  15: 3231000.897 ops/s
Iteration  16: 3276015.954 ops/s
Iteration  17: 3220850.873 ops/s
Iteration  18: 3244291.859 ops/s
Iteration  19: 3263263.692 ops/s
Iteration  20: 3243147.526 ops/s
Iteration  21: 3256315.751 ops/s
Iteration  22: 3268800.831 ops/s
Iteration  23: 3281187.675 ops/s
Iteration  24: 3255133.385 ops/s
Iteration  25: 3255452.564 ops/s
Iteration  26: 3255118.555 ops/s
Iteration  27: 3279831.904 ops/s
Iteration  28: 3252001.490 ops/s
Iteration  29: 3199364.232 ops/s
Iteration  30: 3199041.425 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  3252941.568 ±(99.9%) 14120.754 ops/s [Average]
  (min, avg, max) = (3199041.425, 3252941.568, 3281187.675), stdev = 21135.281
  CI (99.9%): [3238820.814, 3267062.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  3252941.568 ± 14120.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1132280.543 ops/s
# Warmup Iteration   2: 2518912.293 ops/s
# Warmup Iteration   3: 2517488.613 ops/s
# Warmup Iteration   4: 2101405.130 ops/s
# Warmup Iteration   5: 2507288.658 ops/s
# Warmup Iteration   6: 2509424.223 ops/s
# Warmup Iteration   7: 2479479.331 ops/s
# Warmup Iteration   8: 2513330.577 ops/s
# Warmup Iteration   9: 2516390.535 ops/s
# Warmup Iteration  10: 2540218.465 ops/s
# Warmup Iteration  11: 2503291.213 ops/s
# Warmup Iteration  12: 2513439.944 ops/s
# Warmup Iteration  13: 2485764.671 ops/s
# Warmup Iteration  14: 2516562.659 ops/s
# Warmup Iteration  15: 2490058.731 ops/s
# Warmup Iteration  16: 2522479.831 ops/s
# Warmup Iteration  17: 2518381.618 ops/s
# Warmup Iteration  18: 2507357.763 ops/s
# Warmup Iteration  19: 2517975.908 ops/s
# Warmup Iteration  20: 2477164.427 ops/s
# Warmup Iteration  21: 2484906.756 ops/s
# Warmup Iteration  22: 2499626.283 ops/s
# Warmup Iteration  23: 2507684.264 ops/s
# Warmup Iteration  24: 2473560.804 ops/s
# Warmup Iteration  25: 2519364.569 ops/s
# Warmup Iteration  26: 2509498.536 ops/s
# Warmup Iteration  27: 2522625.365 ops/s
# Warmup Iteration  28: 2518001.781 ops/s
# Warmup Iteration  29: 2510088.412 ops/s
# Warmup Iteration  30: 2509903.638 ops/s
Iteration   1: 2472831.455 ops/s
Iteration   2: 2486694.702 ops/s
Iteration   3: 2514544.545 ops/s
Iteration   4: 2495210.422 ops/s
Iteration   5: 2504612.263 ops/s
Iteration   6: 2489903.610 ops/s
Iteration   7: 2518597.206 ops/s
Iteration   8: 2496519.153 ops/s
Iteration   9: 2499564.295 ops/s
Iteration  10: 2514447.677 ops/s
Iteration  11: 2519495.556 ops/s
Iteration  12: 2509109.588 ops/s
Iteration  13: 2460955.146 ops/s
Iteration  14: 2512049.002 ops/s
Iteration  15: 2509989.798 ops/s
Iteration  16: 2509603.290 ops/s
Iteration  17: 2500151.251 ops/s
Iteration  18: 2467029.488 ops/s
Iteration  19: 2463960.245 ops/s
Iteration  20: 2515833.834 ops/s
Iteration  21: 2508363.776 ops/s
Iteration  22: 2532638.515 ops/s
Iteration  23: 2518043.176 ops/s
Iteration  24: 2502757.299 ops/s
Iteration  25: 2517063.922 ops/s
Iteration  26: 2506269.939 ops/s
Iteration  27: 2508587.479 ops/s
Iteration  28: 2531803.434 ops/s
Iteration  29: 2514579.270 ops/s
Iteration  30: 2504623.754 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reject":
  2503527.770 ±(99.9%) 12121.531 ops/s [Average]
  (min, avg, max) = (2460955.146, 2503527.770, 2532638.515), stdev = 18142.938
  CI (99.9%): [2491406.239, 2515649.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  2503527.770 ± 12121.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1142178.585 ops/s
# Warmup Iteration   2: 2480302.008 ops/s
# Warmup Iteration   3: 2494183.792 ops/s
# Warmup Iteration   4: 2071681.566 ops/s
# Warmup Iteration   5: 2502727.907 ops/s
# Warmup Iteration   6: 2526734.548 ops/s
# Warmup Iteration   7: 2513101.126 ops/s
# Warmup Iteration   8: 2513186.794 ops/s
# Warmup Iteration   9: 2509910.032 ops/s
# Warmup Iteration  10: 2502177.517 ops/s
# Warmup Iteration  11: 2524357.980 ops/s
# Warmup Iteration  12: 2507848.226 ops/s
# Warmup Iteration  13: 2512404.599 ops/s
# Warmup Iteration  14: 2489452.765 ops/s
# Warmup Iteration  15: 2511006.536 ops/s
# Warmup Iteration  16: 2507933.074 ops/s
# Warmup Iteration  17: 2493787.175 ops/s
# Warmup Iteration  18: 2526694.776 ops/s
# Warmup Iteration  19: 2509605.898 ops/s
# Warmup Iteration  20: 2502914.075 ops/s
# Warmup Iteration  21: 2500189.301 ops/s
# Warmup Iteration  22: 2492120.223 ops/s
# Warmup Iteration  23: 2488301.886 ops/s
# Warmup Iteration  24: 2520675.042 ops/s
# Warmup Iteration  25: 2510954.393 ops/s
# Warmup Iteration  26: 2512384.591 ops/s
# Warmup Iteration  27: 2507230.512 ops/s
# Warmup Iteration  28: 2495575.766 ops/s
# Warmup Iteration  29: 2512651.373 ops/s
# Warmup Iteration  30: 2504122.817 ops/s
Iteration   1: 2510386.399 ops/s
Iteration   2: 2515298.556 ops/s
Iteration   3: 2513058.442 ops/s
Iteration   4: 2479089.498 ops/s
Iteration   5: 2519429.402 ops/s
Iteration   6: 2467987.753 ops/s
Iteration   7: 2520638.420 ops/s
Iteration   8: 2427546.272 ops/s
Iteration   9: 2513669.448 ops/s
Iteration  10: 2521869.707 ops/s
Iteration  11: 2500128.075 ops/s
Iteration  12: 2511792.194 ops/s
Iteration  13: 2475752.568 ops/s
Iteration  14: 2510148.421 ops/s
Iteration  15: 2468682.998 ops/s
Iteration  16: 2503520.477 ops/s
Iteration  17: 2523908.235 ops/s
Iteration  18: 2516166.001 ops/s
Iteration  19: 2467037.278 ops/s
Iteration  20: 2512666.402 ops/s
Iteration  21: 2505286.832 ops/s
Iteration  22: 2511649.486 ops/s
Iteration  23: 2513135.873 ops/s
Iteration  24: 2518580.922 ops/s
Iteration  25: 2527069.691 ops/s
Iteration  26: 2506448.674 ops/s
Iteration  27: 2500477.288 ops/s
Iteration  28: 2499084.565 ops/s
Iteration  29: 2506483.238 ops/s
Iteration  30: 2473338.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  2501344.397 ±(99.9%) 15068.304 ops/s [Average]
  (min, avg, max) = (2427546.272, 2501344.397, 2527069.691), stdev = 22553.530
  CI (99.9%): [2486276.093, 2516412.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  2501344.397 ± 15068.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629050.694 ops/s
# Warmup Iteration   2: 744772.280 ops/s
# Warmup Iteration   3: 945526.912 ops/s
# Warmup Iteration   4: 948633.172 ops/s
# Warmup Iteration   5: 938792.979 ops/s
# Warmup Iteration   6: 949896.774 ops/s
# Warmup Iteration   7: 949119.007 ops/s
# Warmup Iteration   8: 941301.123 ops/s
# Warmup Iteration   9: 911514.360 ops/s
# Warmup Iteration  10: 838178.906 ops/s
# Warmup Iteration  11: 947200.971 ops/s
# Warmup Iteration  12: 938783.490 ops/s
# Warmup Iteration  13: 936481.074 ops/s
# Warmup Iteration  14: 944973.500 ops/s
# Warmup Iteration  15: 938793.265 ops/s
# Warmup Iteration  16: 944747.226 ops/s
# Warmup Iteration  17: 997961.203 ops/s
# Warmup Iteration  18: 1002609.341 ops/s
# Warmup Iteration  19: 1002005.488 ops/s
# Warmup Iteration  20: 1001565.086 ops/s
# Warmup Iteration  21: 999674.088 ops/s
# Warmup Iteration  22: 990513.139 ops/s
# Warmup Iteration  23: 1002424.604 ops/s
# Warmup Iteration  24: 1003584.598 ops/s
# Warmup Iteration  25: 999104.258 ops/s
# Warmup Iteration  26: 988900.883 ops/s
# Warmup Iteration  27: 996260.932 ops/s
# Warmup Iteration  28: 1001870.988 ops/s
# Warmup Iteration  29: 1001030.334 ops/s
# Warmup Iteration  30: 996306.140 ops/s
Iteration   1: 990471.138 ops/s
Iteration   2: 982885.614 ops/s
Iteration   3: 998003.798 ops/s
Iteration   4: 993702.993 ops/s
Iteration   5: 998829.483 ops/s
Iteration   6: 1004578.086 ops/s
Iteration   7: 1006306.256 ops/s
Iteration   8: 1001491.382 ops/s
Iteration   9: 982823.833 ops/s
Iteration  10: 1003545.832 ops/s
Iteration  11: 1004215.375 ops/s
Iteration  12: 986344.962 ops/s
Iteration  13: 1006932.514 ops/s
Iteration  14: 1002208.940 ops/s
Iteration  15: 1003958.417 ops/s
Iteration  16: 998426.332 ops/s
Iteration  17: 1000060.293 ops/s
Iteration  18: 1004370.835 ops/s
Iteration  19: 998522.817 ops/s
Iteration  20: 1004690.572 ops/s
Iteration  21: 990600.857 ops/s
Iteration  22: 990281.276 ops/s
Iteration  23: 1008471.587 ops/s
Iteration  24: 1001515.892 ops/s
Iteration  25: 1001524.504 ops/s
Iteration  26: 1005941.844 ops/s
Iteration  27: 996849.890 ops/s
Iteration  28: 1001298.505 ops/s
Iteration  29: 1003624.016 ops/s
Iteration  30: 998475.031 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_remove":
  999031.762 ±(99.9%) 4660.795 ops/s [Average]
  (min, avg, max) = (982823.833, 999031.762, 1008471.587), stdev = 6976.059
  CI (99.9%): [994370.968, 1003692.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  999031.762 ± 4660.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627325.524 ops/s
# Warmup Iteration   2: 742513.708 ops/s
# Warmup Iteration   3: 937819.554 ops/s
# Warmup Iteration   4: 929124.307 ops/s
# Warmup Iteration   5: 936093.297 ops/s
# Warmup Iteration   6: 921492.647 ops/s
# Warmup Iteration   7: 938290.447 ops/s
# Warmup Iteration   8: 938303.002 ops/s
# Warmup Iteration   9: 886140.756 ops/s
# Warmup Iteration  10: 815871.297 ops/s
# Warmup Iteration  11: 939340.707 ops/s
# Warmup Iteration  12: 937004.648 ops/s
# Warmup Iteration  13: 937036.953 ops/s
# Warmup Iteration  14: 934830.378 ops/s
# Warmup Iteration  15: 924102.378 ops/s
# Warmup Iteration  16: 938462.401 ops/s
# Warmup Iteration  17: 998223.334 ops/s
# Warmup Iteration  18: 1003254.228 ops/s
# Warmup Iteration  19: 999836.115 ops/s
# Warmup Iteration  20: 1004469.200 ops/s
# Warmup Iteration  21: 989893.596 ops/s
# Warmup Iteration  22: 998682.389 ops/s
# Warmup Iteration  23: 1000297.105 ops/s
# Warmup Iteration  24: 993457.457 ops/s
# Warmup Iteration  25: 989962.840 ops/s
# Warmup Iteration  26: 999414.909 ops/s
# Warmup Iteration  27: 994524.532 ops/s
# Warmup Iteration  28: 990294.357 ops/s
# Warmup Iteration  29: 1000578.868 ops/s
# Warmup Iteration  30: 999607.761 ops/s
Iteration   1: 1001363.530 ops/s
Iteration   2: 998637.832 ops/s
Iteration   3: 1000175.860 ops/s
Iteration   4: 1001481.042 ops/s
Iteration   5: 982928.340 ops/s
Iteration   6: 998059.659 ops/s
Iteration   7: 985859.253 ops/s
Iteration   8: 1001275.544 ops/s
Iteration   9: 1001300.687 ops/s
Iteration  10: 1001735.172 ops/s
Iteration  11: 995201.644 ops/s
Iteration  12: 1001666.732 ops/s
Iteration  13: 997622.840 ops/s
Iteration  14: 989422.259 ops/s
Iteration  15: 1002957.589 ops/s
Iteration  16: 992583.002 ops/s
Iteration  17: 970510.450 ops/s
Iteration  18: 1001834.238 ops/s
Iteration  19: 975725.027 ops/s
Iteration  20: 996442.428 ops/s
Iteration  21: 999927.329 ops/s
Iteration  22: 999580.161 ops/s
Iteration  23: 996821.508 ops/s
Iteration  24: 999671.408 ops/s
Iteration  25: 982956.004 ops/s
Iteration  26: 1000957.959 ops/s
Iteration  27: 1007422.947 ops/s
Iteration  28: 983678.402 ops/s
Iteration  29: 998674.073 ops/s
Iteration  30: 1001105.621 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  995585.951 ±(99.9%) 5860.348 ops/s [Average]
  (min, avg, max) = (970510.450, 995585.951, 1007422.947), stdev = 8771.493
  CI (99.9%): [989725.604, 1001446.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  995585.951 ± 5860.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624638.842 ops/s
# Warmup Iteration   2: 732642.863 ops/s
# Warmup Iteration   3: 932146.940 ops/s
# Warmup Iteration   4: 930405.441 ops/s
# Warmup Iteration   5: 925622.795 ops/s
# Warmup Iteration   6: 930557.471 ops/s
# Warmup Iteration   7: 929369.786 ops/s
# Warmup Iteration   8: 925918.536 ops/s
# Warmup Iteration   9: 875478.314 ops/s
# Warmup Iteration  10: 843897.875 ops/s
# Warmup Iteration  11: 933787.269 ops/s
# Warmup Iteration  12: 933155.222 ops/s
# Warmup Iteration  13: 934349.932 ops/s
# Warmup Iteration  14: 935568.253 ops/s
# Warmup Iteration  15: 935309.918 ops/s
# Warmup Iteration  16: 934630.749 ops/s
# Warmup Iteration  17: 976574.392 ops/s
# Warmup Iteration  18: 976362.140 ops/s
# Warmup Iteration  19: 983979.258 ops/s
# Warmup Iteration  20: 986440.492 ops/s
# Warmup Iteration  21: 981510.728 ops/s
# Warmup Iteration  22: 974646.169 ops/s
# Warmup Iteration  23: 974117.871 ops/s
# Warmup Iteration  24: 985513.879 ops/s
# Warmup Iteration  25: 986717.195 ops/s
# Warmup Iteration  26: 981780.310 ops/s
# Warmup Iteration  27: 977615.479 ops/s
# Warmup Iteration  28: 987822.945 ops/s
# Warmup Iteration  29: 986533.142 ops/s
# Warmup Iteration  30: 983676.768 ops/s
Iteration   1: 982281.033 ops/s
Iteration   2: 984828.243 ops/s
Iteration   3: 985773.795 ops/s
Iteration   4: 982356.025 ops/s
Iteration   5: 982341.847 ops/s
Iteration   6: 985808.507 ops/s
Iteration   7: 973199.884 ops/s
Iteration   8: 983466.293 ops/s
Iteration   9: 985966.433 ops/s
Iteration  10: 969097.923 ops/s
Iteration  11: 990511.716 ops/s
Iteration  12: 987237.310 ops/s
Iteration  13: 979255.993 ops/s
Iteration  14: 981967.918 ops/s
Iteration  15: 976998.413 ops/s
Iteration  16: 979611.778 ops/s
Iteration  17: 952979.704 ops/s
Iteration  18: 989514.587 ops/s
Iteration  19: 976813.984 ops/s
Iteration  20: 983208.962 ops/s
Iteration  21: 985234.602 ops/s
Iteration  22: 987941.439 ops/s
Iteration  23: 986176.327 ops/s
Iteration  24: 986346.229 ops/s
Iteration  25: 985482.068 ops/s
Iteration  26: 982325.153 ops/s
Iteration  27: 969770.061 ops/s
Iteration  28: 981828.354 ops/s
Iteration  29: 978885.659 ops/s
Iteration  30: 985466.097 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  981422.545 ±(99.9%) 4992.957 ops/s [Average]
  (min, avg, max) = (952979.704, 981422.545, 990511.716), stdev = 7473.224
  CI (99.9%): [976429.587, 986415.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  981422.545 ± 4992.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592628.422 ops/s
# Warmup Iteration   2: 690797.622 ops/s
# Warmup Iteration   3: 890555.229 ops/s
# Warmup Iteration   4: 893713.194 ops/s
# Warmup Iteration   5: 895977.257 ops/s
# Warmup Iteration   6: 895537.055 ops/s
# Warmup Iteration   7: 890642.687 ops/s
# Warmup Iteration   8: 890365.031 ops/s
# Warmup Iteration   9: 892351.920 ops/s
# Warmup Iteration  10: 741614.022 ops/s
# Warmup Iteration  11: 890704.330 ops/s
# Warmup Iteration  12: 882105.722 ops/s
# Warmup Iteration  13: 894371.317 ops/s
# Warmup Iteration  14: 897477.358 ops/s
# Warmup Iteration  15: 894109.358 ops/s
# Warmup Iteration  16: 894550.458 ops/s
# Warmup Iteration  17: 926385.984 ops/s
# Warmup Iteration  18: 938366.367 ops/s
# Warmup Iteration  19: 936136.310 ops/s
# Warmup Iteration  20: 938765.700 ops/s
# Warmup Iteration  21: 926972.707 ops/s
# Warmup Iteration  22: 937506.988 ops/s
# Warmup Iteration  23: 939518.195 ops/s
# Warmup Iteration  24: 927679.459 ops/s
# Warmup Iteration  25: 940651.420 ops/s
# Warmup Iteration  26: 927772.761 ops/s
# Warmup Iteration  27: 939679.186 ops/s
# Warmup Iteration  28: 931369.866 ops/s
# Warmup Iteration  29: 938328.078 ops/s
# Warmup Iteration  30: 944894.039 ops/s
Iteration   1: 930098.449 ops/s
Iteration   2: 938123.190 ops/s
Iteration   3: 942338.771 ops/s
Iteration   4: 938407.845 ops/s
Iteration   5: 920824.270 ops/s
Iteration   6: 947068.708 ops/s
Iteration   7: 951356.086 ops/s
Iteration   8: 947042.053 ops/s
Iteration   9: 942687.840 ops/s
Iteration  10: 935343.788 ops/s
Iteration  11: 939345.534 ops/s
Iteration  12: 937393.357 ops/s
Iteration  13: 937768.835 ops/s
Iteration  14: 928037.323 ops/s
Iteration  15: 943026.032 ops/s
Iteration  16: 942630.592 ops/s
Iteration  17: 927636.113 ops/s
Iteration  18: 936989.295 ops/s
Iteration  19: 940766.879 ops/s
Iteration  20: 937730.538 ops/s
Iteration  21: 940418.981 ops/s
Iteration  22: 941050.275 ops/s
Iteration  23: 945586.728 ops/s
Iteration  24: 941668.857 ops/s
Iteration  25: 938718.561 ops/s
Iteration  26: 941557.126 ops/s
Iteration  27: 939502.926 ops/s
Iteration  28: 934854.969 ops/s
Iteration  29: 944321.183 ops/s
Iteration  30: 940274.538 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex":
  939085.655 ±(99.9%) 4176.934 ops/s [Average]
  (min, avg, max) = (920824.270, 939085.655, 951356.086), stdev = 6251.838
  CI (99.9%): [934908.721, 943262.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  939085.655 ± 4176.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 602062.555 ops/s
# Warmup Iteration   2: 698518.410 ops/s
# Warmup Iteration   3: 892506.642 ops/s
# Warmup Iteration   4: 898680.233 ops/s
# Warmup Iteration   5: 900829.128 ops/s
# Warmup Iteration   6: 893617.176 ops/s
# Warmup Iteration   7: 898433.917 ops/s
# Warmup Iteration   8: 896650.893 ops/s
# Warmup Iteration   9: 874858.738 ops/s
# Warmup Iteration  10: 749259.369 ops/s
# Warmup Iteration  11: 895452.640 ops/s
# Warmup Iteration  12: 888391.159 ops/s
# Warmup Iteration  13: 898287.667 ops/s
# Warmup Iteration  14: 901980.554 ops/s
# Warmup Iteration  15: 897131.983 ops/s
# Warmup Iteration  16: 890020.182 ops/s
# Warmup Iteration  17: 943732.262 ops/s
# Warmup Iteration  18: 940311.445 ops/s
# Warmup Iteration  19: 940697.706 ops/s
# Warmup Iteration  20: 944324.311 ops/s
# Warmup Iteration  21: 943593.265 ops/s
# Warmup Iteration  22: 947053.822 ops/s
# Warmup Iteration  23: 943610.964 ops/s
# Warmup Iteration  24: 935044.207 ops/s
# Warmup Iteration  25: 936861.220 ops/s
# Warmup Iteration  26: 933192.205 ops/s
# Warmup Iteration  27: 934050.533 ops/s
# Warmup Iteration  28: 934848.873 ops/s
# Warmup Iteration  29: 947542.737 ops/s
# Warmup Iteration  30: 914815.688 ops/s
Iteration   1: 940907.143 ops/s
Iteration   2: 938028.694 ops/s
Iteration   3: 937558.592 ops/s
Iteration   4: 943732.226 ops/s
Iteration   5: 926492.810 ops/s
Iteration   6: 948674.885 ops/s
Iteration   7: 931664.019 ops/s
Iteration   8: 906937.538 ops/s
Iteration   9: 940030.259 ops/s
Iteration  10: 942294.149 ops/s
Iteration  11: 940358.085 ops/s
Iteration  12: 935792.219 ops/s
Iteration  13: 941798.072 ops/s
Iteration  14: 935963.757 ops/s
Iteration  15: 940025.749 ops/s
Iteration  16: 926913.330 ops/s
Iteration  17: 943593.235 ops/s
Iteration  18: 923971.385 ops/s
Iteration  19: 926311.050 ops/s
Iteration  20: 952369.092 ops/s
Iteration  21: 927806.736 ops/s
Iteration  22: 926808.477 ops/s
Iteration  23: 944372.362 ops/s
Iteration  24: 942790.242 ops/s
Iteration  25: 941760.586 ops/s
Iteration  26: 946444.829 ops/s
Iteration  27: 945226.069 ops/s
Iteration  28: 933654.950 ops/s
Iteration  29: 930109.966 ops/s
Iteration  30: 938746.781 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex":
  936704.576 ±(99.9%) 6208.723 ops/s [Average]
  (min, avg, max) = (906937.538, 936704.576, 952369.092), stdev = 9292.926
  CI (99.9%): [930495.853, 942913.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  936704.576 ± 6208.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628862.279 ops/s
# Warmup Iteration   2: 736917.478 ops/s
# Warmup Iteration   3: 930488.939 ops/s
# Warmup Iteration   4: 932089.402 ops/s
# Warmup Iteration   5: 930787.280 ops/s
# Warmup Iteration   6: 936032.352 ops/s
# Warmup Iteration   7: 903727.755 ops/s
# Warmup Iteration   8: 934087.872 ops/s
# Warmup Iteration   9: 910106.406 ops/s
# Warmup Iteration  10: 802835.456 ops/s
# Warmup Iteration  11: 940149.089 ops/s
# Warmup Iteration  12: 931121.692 ops/s
# Warmup Iteration  13: 932809.026 ops/s
# Warmup Iteration  14: 937264.212 ops/s
# Warmup Iteration  15: 938895.350 ops/s
# Warmup Iteration  16: 936979.397 ops/s
# Warmup Iteration  17: 990159.223 ops/s
# Warmup Iteration  18: 986798.302 ops/s
# Warmup Iteration  19: 985258.725 ops/s
# Warmup Iteration  20: 991233.655 ops/s
# Warmup Iteration  21: 979507.669 ops/s
# Warmup Iteration  22: 989950.541 ops/s
# Warmup Iteration  23: 979986.080 ops/s
# Warmup Iteration  24: 982595.734 ops/s
# Warmup Iteration  25: 986440.337 ops/s
# Warmup Iteration  26: 989154.985 ops/s
# Warmup Iteration  27: 988531.626 ops/s
# Warmup Iteration  28: 981250.569 ops/s
# Warmup Iteration  29: 985286.230 ops/s
# Warmup Iteration  30: 989840.221 ops/s
Iteration   1: 988231.305 ops/s
Iteration   2: 974445.028 ops/s
Iteration   3: 993827.062 ops/s
Iteration   4: 994199.191 ops/s
Iteration   5: 983439.043 ops/s
Iteration   6: 976700.485 ops/s
Iteration   7: 989879.629 ops/s
Iteration   8: 952515.566 ops/s
Iteration   9: 986735.086 ops/s
Iteration  10: 989719.150 ops/s
Iteration  11: 989470.920 ops/s
Iteration  12: 972642.480 ops/s
Iteration  13: 990950.013 ops/s
Iteration  14: 993094.234 ops/s
Iteration  15: 992133.354 ops/s
Iteration  16: 987909.773 ops/s
Iteration  17: 992096.532 ops/s
Iteration  18: 988708.166 ops/s
Iteration  19: 987439.913 ops/s
Iteration  20: 971784.059 ops/s
Iteration  21: 984970.434 ops/s
Iteration  22: 994126.778 ops/s
Iteration  23: 972885.575 ops/s
Iteration  24: 988088.716 ops/s
Iteration  25: 960203.480 ops/s
Iteration  26: 992708.351 ops/s
Iteration  27: 978635.640 ops/s
Iteration  28: 995224.886 ops/s
Iteration  29: 988637.373 ops/s
Iteration  30: 983962.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  984512.160 ±(99.9%) 6911.947 ops/s [Average]
  (min, avg, max) = (952515.566, 984512.160, 995224.886), stdev = 10345.478
  CI (99.9%): [977600.213, 991424.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  984512.160 ± 6911.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631666.428 ops/s
# Warmup Iteration   2: 749423.757 ops/s
# Warmup Iteration   3: 946619.004 ops/s
# Warmup Iteration   4: 943707.404 ops/s
# Warmup Iteration   5: 942627.856 ops/s
# Warmup Iteration   6: 939301.510 ops/s
# Warmup Iteration   7: 938146.689 ops/s
# Warmup Iteration   8: 945251.517 ops/s
# Warmup Iteration   9: 867165.052 ops/s
# Warmup Iteration  10: 870506.480 ops/s
# Warmup Iteration  11: 944865.545 ops/s
# Warmup Iteration  12: 940055.288 ops/s
# Warmup Iteration  13: 928579.781 ops/s
# Warmup Iteration  14: 943094.156 ops/s
# Warmup Iteration  15: 944520.958 ops/s
# Warmup Iteration  16: 936712.165 ops/s
# Warmup Iteration  17: 992492.221 ops/s
# Warmup Iteration  18: 987546.088 ops/s
# Warmup Iteration  19: 989400.218 ops/s
# Warmup Iteration  20: 999110.895 ops/s
# Warmup Iteration  21: 999353.780 ops/s
# Warmup Iteration  22: 994776.642 ops/s
# Warmup Iteration  23: 989327.189 ops/s
# Warmup Iteration  24: 999392.850 ops/s
# Warmup Iteration  25: 988528.719 ops/s
# Warmup Iteration  26: 999445.390 ops/s
# Warmup Iteration  27: 997788.521 ops/s
# Warmup Iteration  28: 999126.300 ops/s
# Warmup Iteration  29: 998203.488 ops/s
# Warmup Iteration  30: 1000801.811 ops/s
Iteration   1: 994715.633 ops/s
Iteration   2: 992694.278 ops/s
Iteration   3: 995308.185 ops/s
Iteration   4: 999201.911 ops/s
Iteration   5: 992732.336 ops/s
Iteration   6: 995397.565 ops/s
Iteration   7: 1001594.379 ops/s
Iteration   8: 1002303.050 ops/s
Iteration   9: 981214.668 ops/s
Iteration  10: 999340.119 ops/s
Iteration  11: 999843.235 ops/s
Iteration  12: 997819.715 ops/s
Iteration  13: 999599.715 ops/s
Iteration  14: 984657.727 ops/s
Iteration  15: 980615.273 ops/s
Iteration  16: 995761.279 ops/s
Iteration  17: 992975.209 ops/s
Iteration  18: 1000875.215 ops/s
Iteration  19: 994030.307 ops/s
Iteration  20: 998361.482 ops/s
Iteration  21: 1004752.703 ops/s
Iteration  22: 992823.096 ops/s
Iteration  23: 998861.403 ops/s
Iteration  24: 999718.721 ops/s
Iteration  25: 996534.860 ops/s
Iteration  26: 996925.099 ops/s
Iteration  27: 997259.293 ops/s
Iteration  28: 997985.024 ops/s
Iteration  29: 998235.251 ops/s
Iteration  30: 996035.665 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  995939.080 ±(99.9%) 3709.987 ops/s [Average]
  (min, avg, max) = (980615.273, 995939.080, 1004752.703), stdev = 5552.934
  CI (99.9%): [992229.093, 999649.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  995939.080 ± 3709.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627798.172 ops/s
# Warmup Iteration   2: 739580.394 ops/s
# Warmup Iteration   3: 936756.824 ops/s
# Warmup Iteration   4: 937001.804 ops/s
# Warmup Iteration   5: 915021.329 ops/s
# Warmup Iteration   6: 933148.660 ops/s
# Warmup Iteration   7: 933091.209 ops/s
# Warmup Iteration   8: 936195.793 ops/s
# Warmup Iteration   9: 908469.796 ops/s
# Warmup Iteration  10: 825302.831 ops/s
# Warmup Iteration  11: 939434.241 ops/s
# Warmup Iteration  12: 938639.667 ops/s
# Warmup Iteration  13: 932634.794 ops/s
# Warmup Iteration  14: 934372.664 ops/s
# Warmup Iteration  15: 938340.801 ops/s
# Warmup Iteration  16: 930120.519 ops/s
# Warmup Iteration  17: 994410.532 ops/s
# Warmup Iteration  18: 987952.431 ops/s
# Warmup Iteration  19: 995076.379 ops/s
# Warmup Iteration  20: 995159.303 ops/s
# Warmup Iteration  21: 990724.281 ops/s
# Warmup Iteration  22: 994320.713 ops/s
# Warmup Iteration  23: 985411.178 ops/s
# Warmup Iteration  24: 996102.221 ops/s
# Warmup Iteration  25: 994438.692 ops/s
# Warmup Iteration  26: 994922.308 ops/s
# Warmup Iteration  27: 996725.943 ops/s
# Warmup Iteration  28: 988351.909 ops/s
# Warmup Iteration  29: 985646.939 ops/s
# Warmup Iteration  30: 990079.673 ops/s
Iteration   1: 985785.198 ops/s
Iteration   2: 988180.959 ops/s
Iteration   3: 993300.197 ops/s
Iteration   4: 989337.409 ops/s
Iteration   5: 986443.413 ops/s
Iteration   6: 983399.525 ops/s
Iteration   7: 984868.643 ops/s
Iteration   8: 990951.165 ops/s
Iteration   9: 992367.541 ops/s
Iteration  10: 996058.287 ops/s
Iteration  11: 991155.062 ops/s
Iteration  12: 999191.414 ops/s
Iteration  13: 989225.416 ops/s
Iteration  14: 994964.738 ops/s
Iteration  15: 993309.027 ops/s
Iteration  16: 988364.258 ops/s
Iteration  17: 982452.551 ops/s
Iteration  18: 993329.668 ops/s
Iteration  19: 995705.211 ops/s
Iteration  20: 981319.907 ops/s
Iteration  21: 988479.520 ops/s
Iteration  22: 995316.748 ops/s
Iteration  23: 980878.065 ops/s
Iteration  24: 990246.225 ops/s
Iteration  25: 975610.918 ops/s
Iteration  26: 981626.675 ops/s
Iteration  27: 993030.084 ops/s
Iteration  28: 994797.503 ops/s
Iteration  29: 993096.387 ops/s
Iteration  30: 991202.082 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  989466.460 ±(99.9%) 3689.765 ops/s [Average]
  (min, avg, max) = (975610.918, 989466.460, 999191.414), stdev = 5522.667
  CI (99.9%): [985776.695, 993156.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  989466.460 ± 3689.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623192.400 ops/s
# Warmup Iteration   2: 743330.403 ops/s
# Warmup Iteration   3: 944631.455 ops/s
# Warmup Iteration   4: 951476.695 ops/s
# Warmup Iteration   5: 957917.840 ops/s
# Warmup Iteration   6: 948584.723 ops/s
# Warmup Iteration   7: 947760.718 ops/s
# Warmup Iteration   8: 948892.538 ops/s
# Warmup Iteration   9: 853059.621 ops/s
# Warmup Iteration  10: 913699.534 ops/s
# Warmup Iteration  11: 961009.480 ops/s
# Warmup Iteration  12: 959494.377 ops/s
# Warmup Iteration  13: 954284.988 ops/s
# Warmup Iteration  14: 960496.031 ops/s
# Warmup Iteration  15: 959692.572 ops/s
# Warmup Iteration  16: 950745.482 ops/s
# Warmup Iteration  17: 1002107.465 ops/s
# Warmup Iteration  18: 990436.493 ops/s
# Warmup Iteration  19: 999444.985 ops/s
# Warmup Iteration  20: 1002811.796 ops/s
# Warmup Iteration  21: 995265.620 ops/s
# Warmup Iteration  22: 1002855.971 ops/s
# Warmup Iteration  23: 1001551.066 ops/s
# Warmup Iteration  24: 995606.557 ops/s
# Warmup Iteration  25: 1002111.659 ops/s
# Warmup Iteration  26: 997374.792 ops/s
# Warmup Iteration  27: 994796.243 ops/s
# Warmup Iteration  28: 1001002.108 ops/s
# Warmup Iteration  29: 1003365.045 ops/s
# Warmup Iteration  30: 1005999.363 ops/s
Iteration   1: 1001998.743 ops/s
Iteration   2: 1002412.149 ops/s
Iteration   3: 1002633.939 ops/s
Iteration   4: 1000614.988 ops/s
Iteration   5: 1003549.874 ops/s
Iteration   6: 1002011.023 ops/s
Iteration   7: 1002897.947 ops/s
Iteration   8: 1005746.304 ops/s
Iteration   9: 1002366.019 ops/s
Iteration  10: 970237.976 ops/s
Iteration  11: 989523.456 ops/s
Iteration  12: 1001290.006 ops/s
Iteration  13: 987278.282 ops/s
Iteration  14: 1004550.970 ops/s
Iteration  15: 1003465.111 ops/s
Iteration  16: 995225.522 ops/s
Iteration  17: 1002426.595 ops/s
Iteration  18: 1000932.214 ops/s
Iteration  19: 990588.179 ops/s
Iteration  20: 1000857.372 ops/s
Iteration  21: 982390.814 ops/s
Iteration  22: 998684.923 ops/s
Iteration  23: 993274.632 ops/s
Iteration  24: 979158.324 ops/s
Iteration  25: 1003731.792 ops/s
Iteration  26: 998255.496 ops/s
Iteration  27: 995889.778 ops/s
Iteration  28: 1001201.575 ops/s
Iteration  29: 1002486.968 ops/s
Iteration  30: 1000874.665 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  997551.854 ±(99.9%) 5610.854 ops/s [Average]
  (min, avg, max) = (970237.976, 997551.854, 1005746.304), stdev = 8398.062
  CI (99.9%): [991941.001, 1003162.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  997551.854 ± 5610.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 600975.521 ops/s
# Warmup Iteration   2: 699937.004 ops/s
# Warmup Iteration   3: 884827.301 ops/s
# Warmup Iteration   4: 885547.408 ops/s
# Warmup Iteration   5: 886520.619 ops/s
# Warmup Iteration   6: 877868.588 ops/s
# Warmup Iteration   7: 890064.027 ops/s
# Warmup Iteration   8: 889219.093 ops/s
# Warmup Iteration   9: 893118.947 ops/s
# Warmup Iteration  10: 745674.528 ops/s
# Warmup Iteration  11: 884838.925 ops/s
# Warmup Iteration  12: 887108.561 ops/s
# Warmup Iteration  13: 887117.696 ops/s
# Warmup Iteration  14: 886836.842 ops/s
# Warmup Iteration  15: 879162.518 ops/s
# Warmup Iteration  16: 882613.340 ops/s
# Warmup Iteration  17: 923848.352 ops/s
# Warmup Iteration  18: 931763.728 ops/s
# Warmup Iteration  19: 928201.900 ops/s
# Warmup Iteration  20: 931091.848 ops/s
# Warmup Iteration  21: 926410.448 ops/s
# Warmup Iteration  22: 914515.679 ops/s
# Warmup Iteration  23: 930681.762 ops/s
# Warmup Iteration  24: 933300.494 ops/s
# Warmup Iteration  25: 929949.169 ops/s
# Warmup Iteration  26: 928503.245 ops/s
# Warmup Iteration  27: 922120.822 ops/s
# Warmup Iteration  28: 923620.244 ops/s
# Warmup Iteration  29: 931262.340 ops/s
# Warmup Iteration  30: 933565.768 ops/s
Iteration   1: 931487.799 ops/s
Iteration   2: 930386.747 ops/s
Iteration   3: 930898.843 ops/s
Iteration   4: 921152.789 ops/s
Iteration   5: 931407.212 ops/s
Iteration   6: 923974.734 ops/s
Iteration   7: 930902.585 ops/s
Iteration   8: 911799.741 ops/s
Iteration   9: 929933.872 ops/s
Iteration  10: 923719.545 ops/s
Iteration  11: 922127.802 ops/s
Iteration  12: 931587.370 ops/s
Iteration  13: 932250.625 ops/s
Iteration  14: 929578.634 ops/s
Iteration  15: 932848.329 ops/s
Iteration  16: 932946.568 ops/s
Iteration  17: 930084.583 ops/s
Iteration  18: 929734.384 ops/s
Iteration  19: 931945.260 ops/s
Iteration  20: 915120.399 ops/s
Iteration  21: 927201.640 ops/s
Iteration  22: 912486.581 ops/s
Iteration  23: 933835.096 ops/s
Iteration  24: 930274.069 ops/s
Iteration  25: 932983.971 ops/s
Iteration  26: 931702.704 ops/s
Iteration  27: 931993.286 ops/s
Iteration  28: 929729.774 ops/s
Iteration  29: 932621.808 ops/s
Iteration  30: 926177.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis":
  928096.482 ±(99.9%) 4041.183 ops/s [Average]
  (min, avg, max) = (911799.741, 928096.482, 933835.096), stdev = 6048.653
  CI (99.9%): [924055.299, 932137.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis  thrpt   30  928096.482 ± 4041.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1145030.394 ops/s
# Warmup Iteration   2: 2518483.872 ops/s
# Warmup Iteration   3: 2527426.628 ops/s
# Warmup Iteration   4: 2109334.454 ops/s
# Warmup Iteration   5: 2532310.709 ops/s
# Warmup Iteration   6: 2450283.160 ops/s
# Warmup Iteration   7: 2505123.215 ops/s
# Warmup Iteration   8: 2507465.827 ops/s
# Warmup Iteration   9: 2501867.902 ops/s
# Warmup Iteration  10: 2528917.904 ops/s
# Warmup Iteration  11: 2500667.297 ops/s
# Warmup Iteration  12: 2510221.496 ops/s
# Warmup Iteration  13: 2513019.321 ops/s
# Warmup Iteration  14: 2533836.076 ops/s
# Warmup Iteration  15: 2520104.137 ops/s
# Warmup Iteration  16: 2537276.782 ops/s
# Warmup Iteration  17: 2518755.013 ops/s
# Warmup Iteration  18: 2535939.781 ops/s
# Warmup Iteration  19: 2512888.503 ops/s
# Warmup Iteration  20: 2491924.615 ops/s
# Warmup Iteration  21: 2525261.243 ops/s
# Warmup Iteration  22: 2529847.413 ops/s
# Warmup Iteration  23: 2522582.603 ops/s
# Warmup Iteration  24: 2520726.414 ops/s
# Warmup Iteration  25: 2505658.850 ops/s
# Warmup Iteration  26: 2524774.694 ops/s
# Warmup Iteration  27: 2510586.949 ops/s
# Warmup Iteration  28: 2518460.865 ops/s
# Warmup Iteration  29: 2523978.877 ops/s
# Warmup Iteration  30: 2517913.039 ops/s
Iteration   1: 2530883.755 ops/s
Iteration   2: 2530713.477 ops/s
Iteration   3: 2515967.517 ops/s
Iteration   4: 2522789.102 ops/s
Iteration   5: 2536694.069 ops/s
Iteration   6: 2525275.313 ops/s
Iteration   7: 2504090.628 ops/s
Iteration   8: 2537973.505 ops/s
Iteration   9: 2521006.292 ops/s
Iteration  10: 2526422.713 ops/s
Iteration  11: 2448585.886 ops/s
Iteration  12: 2536265.159 ops/s
Iteration  13: 2540194.470 ops/s
Iteration  14: 2526430.136 ops/s
Iteration  15: 2520898.167 ops/s
Iteration  16: 2544440.074 ops/s
Iteration  17: 2526963.562 ops/s
Iteration  18: 2538069.861 ops/s
Iteration  19: 2534167.636 ops/s
Iteration  20: 2533806.335 ops/s
Iteration  21: 2521267.385 ops/s
Iteration  22: 2446373.080 ops/s
Iteration  23: 2526408.053 ops/s
Iteration  24: 2528088.105 ops/s
Iteration  25: 2535353.386 ops/s
Iteration  26: 2539409.794 ops/s
Iteration  27: 2524518.767 ops/s
Iteration  28: 2509220.286 ops/s
Iteration  29: 2500035.594 ops/s
Iteration  30: 2519973.506 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_select":
  2521742.854 ±(99.9%) 15167.442 ops/s [Average]
  (min, avg, max) = (2446373.080, 2521742.854, 2544440.074), stdev = 22701.915
  CI (99.9%): [2506575.412, 2536910.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  2521742.854 ± 15167.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1158857.080 ops/s
# Warmup Iteration   2: 2526932.007 ops/s
# Warmup Iteration   3: 2520483.271 ops/s
# Warmup Iteration   4: 2119235.123 ops/s
# Warmup Iteration   5: 2535293.904 ops/s
# Warmup Iteration   6: 2525958.797 ops/s
# Warmup Iteration   7: 2528669.238 ops/s
# Warmup Iteration   8: 2528761.150 ops/s
# Warmup Iteration   9: 2514646.890 ops/s
# Warmup Iteration  10: 2496381.591 ops/s
# Warmup Iteration  11: 2515640.381 ops/s
# Warmup Iteration  12: 2535666.794 ops/s
# Warmup Iteration  13: 2511686.288 ops/s
# Warmup Iteration  14: 2528542.318 ops/s
# Warmup Iteration  15: 2537736.307 ops/s
# Warmup Iteration  16: 2513793.877 ops/s
# Warmup Iteration  17: 2403056.820 ops/s
# Warmup Iteration  18: 2393578.650 ops/s
# Warmup Iteration  19: 2384507.446 ops/s
# Warmup Iteration  20: 2394896.502 ops/s
# Warmup Iteration  21: 2394471.187 ops/s
# Warmup Iteration  22: 2397665.719 ops/s
# Warmup Iteration  23: 2391262.010 ops/s
# Warmup Iteration  24: 2398635.308 ops/s
# Warmup Iteration  25: 2367864.577 ops/s
# Warmup Iteration  26: 2390282.464 ops/s
# Warmup Iteration  27: 2404732.829 ops/s
# Warmup Iteration  28: 2414667.156 ops/s
# Warmup Iteration  29: 2378712.727 ops/s
# Warmup Iteration  30: 2375631.378 ops/s
Iteration   1: 2387335.125 ops/s
Iteration   2: 2385390.451 ops/s
Iteration   3: 2340736.508 ops/s
Iteration   4: 2391553.097 ops/s
Iteration   5: 2397946.024 ops/s
Iteration   6: 2399055.110 ops/s
Iteration   7: 2393360.425 ops/s
Iteration   8: 2361136.467 ops/s
Iteration   9: 2406353.076 ops/s
Iteration  10: 2320664.874 ops/s
Iteration  11: 2420423.707 ops/s
Iteration  12: 2407712.863 ops/s
Iteration  13: 2380844.237 ops/s
Iteration  14: 2413701.712 ops/s
Iteration  15: 2397360.940 ops/s
Iteration  16: 2410801.264 ops/s
Iteration  17: 2404182.948 ops/s
Iteration  18: 2406972.927 ops/s
Iteration  19: 2391147.430 ops/s
Iteration  20: 2372932.761 ops/s
Iteration  21: 2407987.174 ops/s
Iteration  22: 2407727.634 ops/s
Iteration  23: 2393394.893 ops/s
Iteration  24: 2408958.752 ops/s
Iteration  25: 2405357.470 ops/s
Iteration  26: 2353305.842 ops/s
Iteration  27: 2396570.235 ops/s
Iteration  28: 2398485.954 ops/s
Iteration  29: 2410800.201 ops/s
Iteration  30: 2397344.687 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  2392318.160 ±(99.9%) 15045.855 ops/s [Average]
  (min, avg, max) = (2320664.874, 2392318.160, 2420423.707), stdev = 22519.929
  CI (99.9%): [2377272.305, 2407364.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  2392318.160 ± 15045.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39397.313 ops/s
# Warmup Iteration   2: 51571.302 ops/s
# Warmup Iteration   3: 74733.795 ops/s
# Warmup Iteration   4: 75489.770 ops/s
# Warmup Iteration   5: 75210.466 ops/s
# Warmup Iteration   6: 74705.938 ops/s
# Warmup Iteration   7: 74964.776 ops/s
# Warmup Iteration   8: 75268.592 ops/s
# Warmup Iteration   9: 75257.550 ops/s
# Warmup Iteration  10: 66699.028 ops/s
# Warmup Iteration  11: 71251.252 ops/s
# Warmup Iteration  12: 75103.797 ops/s
# Warmup Iteration  13: 74909.386 ops/s
# Warmup Iteration  14: 75320.023 ops/s
# Warmup Iteration  15: 75435.809 ops/s
# Warmup Iteration  16: 75339.990 ops/s
# Warmup Iteration  17: 74928.466 ops/s
# Warmup Iteration  18: 74491.053 ops/s
# Warmup Iteration  19: 75179.756 ops/s
# Warmup Iteration  20: 74955.659 ops/s
# Warmup Iteration  21: 74176.978 ops/s
# Warmup Iteration  22: 75381.427 ops/s
# Warmup Iteration  23: 74386.469 ops/s
# Warmup Iteration  24: 75177.351 ops/s
# Warmup Iteration  25: 74795.504 ops/s
# Warmup Iteration  26: 75139.516 ops/s
# Warmup Iteration  27: 75307.788 ops/s
# Warmup Iteration  28: 75455.143 ops/s
# Warmup Iteration  29: 74913.822 ops/s
# Warmup Iteration  30: 75310.438 ops/s
Iteration   1: 75334.594 ops/s
Iteration   2: 74261.723 ops/s
Iteration   3: 75159.162 ops/s
Iteration   4: 75151.693 ops/s
Iteration   5: 75772.769 ops/s
Iteration   6: 75652.460 ops/s
Iteration   7: 75425.135 ops/s
Iteration   8: 74809.658 ops/s
Iteration   9: 75071.150 ops/s
Iteration  10: 74697.248 ops/s
Iteration  11: 75097.914 ops/s
Iteration  12: 75347.918 ops/s
Iteration  13: 75591.129 ops/s
Iteration  14: 75671.900 ops/s
Iteration  15: 74836.172 ops/s
Iteration  16: 73851.962 ops/s
Iteration  17: 75427.064 ops/s
Iteration  18: 75471.792 ops/s
Iteration  19: 75343.919 ops/s
Iteration  20: 75127.930 ops/s
Iteration  21: 75573.384 ops/s
Iteration  22: 75315.318 ops/s
Iteration  23: 75430.727 ops/s
Iteration  24: 75121.679 ops/s
Iteration  25: 75213.899 ops/s
Iteration  26: 75438.479 ops/s
Iteration  27: 75301.514 ops/s
Iteration  28: 75613.286 ops/s
Iteration  29: 75389.343 ops/s
Iteration  30: 75481.442 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_serialization":
  75232.745 ±(99.9%) 276.020 ops/s [Average]
  (min, avg, max) = (73851.962, 75232.745, 75772.769), stdev = 413.134
  CI (99.9%): [74956.725, 75508.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt      Score     Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_serialization  thrpt   30  75232.745 ± 276.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606193.390 ops/s
# Warmup Iteration   2: 686026.682 ops/s
# Warmup Iteration   3: 884286.802 ops/s
# Warmup Iteration   4: 877946.721 ops/s
# Warmup Iteration   5: 885154.037 ops/s
# Warmup Iteration   6: 882069.027 ops/s
# Warmup Iteration   7: 879653.064 ops/s
# Warmup Iteration   8: 876755.827 ops/s
# Warmup Iteration   9: 881309.824 ops/s
# Warmup Iteration  10: 746930.861 ops/s
# Warmup Iteration  11: 884679.275 ops/s
# Warmup Iteration  12: 879444.571 ops/s
# Warmup Iteration  13: 878113.246 ops/s
# Warmup Iteration  14: 888643.563 ops/s
# Warmup Iteration  15: 889143.655 ops/s
# Warmup Iteration  16: 889618.105 ops/s
# Warmup Iteration  17: 934784.241 ops/s
# Warmup Iteration  18: 932855.505 ops/s
# Warmup Iteration  19: 932910.856 ops/s
# Warmup Iteration  20: 938998.656 ops/s
# Warmup Iteration  21: 937976.497 ops/s
# Warmup Iteration  22: 934540.585 ops/s
# Warmup Iteration  23: 939755.761 ops/s
# Warmup Iteration  24: 937043.773 ops/s
# Warmup Iteration  25: 938017.272 ops/s
# Warmup Iteration  26: 931121.309 ops/s
# Warmup Iteration  27: 936571.555 ops/s
# Warmup Iteration  28: 935051.736 ops/s
# Warmup Iteration  29: 931303.294 ops/s
# Warmup Iteration  30: 934287.382 ops/s
Iteration   1: 907243.290 ops/s
Iteration   2: 937048.023 ops/s
Iteration   3: 942769.106 ops/s
Iteration   4: 937918.153 ops/s
Iteration   5: 937345.443 ops/s
Iteration   6: 921066.328 ops/s
Iteration   7: 936354.816 ops/s
Iteration   8: 939196.490 ops/s
Iteration   9: 934212.558 ops/s
Iteration  10: 939109.839 ops/s
Iteration  11: 937443.049 ops/s
Iteration  12: 934421.744 ops/s
Iteration  13: 940754.414 ops/s
Iteration  14: 937836.603 ops/s
Iteration  15: 936881.527 ops/s
Iteration  16: 921822.399 ops/s
Iteration  17: 938389.248 ops/s
Iteration  18: 937396.087 ops/s
Iteration  19: 905434.373 ops/s
Iteration  20: 936957.052 ops/s
Iteration  21: 930613.068 ops/s
Iteration  22: 937167.493 ops/s
Iteration  23: 924627.346 ops/s
Iteration  24: 922866.980 ops/s
Iteration  25: 932689.674 ops/s
Iteration  26: 938625.131 ops/s
Iteration  27: 937318.203 ops/s
Iteration  28: 935076.214 ops/s
Iteration  29: 935951.872 ops/s
Iteration  30: 937616.614 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_set":
  933071.771 ±(99.9%) 6076.371 ops/s [Average]
  (min, avg, max) = (905434.373, 933071.771, 942769.106), stdev = 9094.827
  CI (99.9%): [926995.400, 939148.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_set  thrpt   30  933071.771 ± 6076.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 599165.377 ops/s
# Warmup Iteration   2: 690700.570 ops/s
# Warmup Iteration   3: 894204.726 ops/s
# Warmup Iteration   4: 889979.435 ops/s
# Warmup Iteration   5: 894854.369 ops/s
# Warmup Iteration   6: 896351.870 ops/s
# Warmup Iteration   7: 881833.381 ops/s
# Warmup Iteration   8: 890896.752 ops/s
# Warmup Iteration   9: 892452.613 ops/s
# Warmup Iteration  10: 749210.657 ops/s
# Warmup Iteration  11: 895335.368 ops/s
# Warmup Iteration  12: 897045.174 ops/s
# Warmup Iteration  13: 885111.906 ops/s
# Warmup Iteration  14: 896741.128 ops/s
# Warmup Iteration  15: 895331.998 ops/s
# Warmup Iteration  16: 892241.674 ops/s
# Warmup Iteration  17: 941294.684 ops/s
# Warmup Iteration  18: 935509.044 ops/s
# Warmup Iteration  19: 929060.941 ops/s
# Warmup Iteration  20: 944660.549 ops/s
# Warmup Iteration  21: 945662.289 ops/s
# Warmup Iteration  22: 943400.873 ops/s
# Warmup Iteration  23: 939040.605 ops/s
# Warmup Iteration  24: 940672.568 ops/s
# Warmup Iteration  25: 941196.665 ops/s
# Warmup Iteration  26: 922650.534 ops/s
# Warmup Iteration  27: 948084.044 ops/s
# Warmup Iteration  28: 938174.229 ops/s
# Warmup Iteration  29: 943264.669 ops/s
# Warmup Iteration  30: 942805.219 ops/s
Iteration   1: 947643.630 ops/s
Iteration   2: 911602.127 ops/s
Iteration   3: 945152.809 ops/s
Iteration   4: 927267.984 ops/s
Iteration   5: 942954.586 ops/s
Iteration   6: 932132.627 ops/s
Iteration   7: 942920.551 ops/s
Iteration   8: 941164.768 ops/s
Iteration   9: 939759.184 ops/s
Iteration  10: 942510.075 ops/s
Iteration  11: 940809.114 ops/s
Iteration  12: 943653.567 ops/s
Iteration  13: 942675.567 ops/s
Iteration  14: 943738.999 ops/s
Iteration  15: 936692.218 ops/s
Iteration  16: 933270.590 ops/s
Iteration  17: 951137.028 ops/s
Iteration  18: 943258.368 ops/s
Iteration  19: 926381.854 ops/s
Iteration  20: 940551.419 ops/s
Iteration  21: 944279.347 ops/s
Iteration  22: 945694.634 ops/s
Iteration  23: 949283.397 ops/s
Iteration  24: 928024.694 ops/s
Iteration  25: 943986.666 ops/s
Iteration  26: 943111.048 ops/s
Iteration  27: 945140.897 ops/s
Iteration  28: 941626.107 ops/s
Iteration  29: 943616.133 ops/s
Iteration  30: 941792.549 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex":
  940061.085 ±(99.9%) 5412.611 ops/s [Average]
  (min, avg, max) = (911602.127, 940061.085, 951137.028), stdev = 8101.342
  CI (99.9%): [934648.473, 945473.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex  thrpt   30  940061.085 ± 5412.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586170.164 ops/s
# Warmup Iteration   2: 675895.206 ops/s
# Warmup Iteration   3: 871710.243 ops/s
# Warmup Iteration   4: 863190.092 ops/s
# Warmup Iteration   5: 860724.036 ops/s
# Warmup Iteration   6: 868722.083 ops/s
# Warmup Iteration   7: 868062.162 ops/s
# Warmup Iteration   8: 867827.092 ops/s
# Warmup Iteration   9: 870082.331 ops/s
# Warmup Iteration  10: 724610.771 ops/s
# Warmup Iteration  11: 858592.675 ops/s
# Warmup Iteration  12: 863943.005 ops/s
# Warmup Iteration  13: 871446.743 ops/s
# Warmup Iteration  14: 868443.702 ops/s
# Warmup Iteration  15: 873089.910 ops/s
# Warmup Iteration  16: 861707.050 ops/s
# Warmup Iteration  17: 919962.870 ops/s
# Warmup Iteration  18: 922526.707 ops/s
# Warmup Iteration  19: 918781.955 ops/s
# Warmup Iteration  20: 918312.448 ops/s
# Warmup Iteration  21: 919120.366 ops/s
# Warmup Iteration  22: 919181.423 ops/s
# Warmup Iteration  23: 925866.188 ops/s
# Warmup Iteration  24: 921746.548 ops/s
# Warmup Iteration  25: 916611.331 ops/s
# Warmup Iteration  26: 926686.523 ops/s
# Warmup Iteration  27: 923282.267 ops/s
# Warmup Iteration  28: 923492.188 ops/s
# Warmup Iteration  29: 916958.575 ops/s
# Warmup Iteration  30: 921453.427 ops/s
Iteration   1: 922491.910 ops/s
Iteration   2: 925630.652 ops/s
Iteration   3: 907319.389 ops/s
Iteration   4: 919478.802 ops/s
Iteration   5: 916285.730 ops/s
Iteration   6: 922299.515 ops/s
Iteration   7: 920141.888 ops/s
Iteration   8: 922819.216 ops/s
Iteration   9: 907035.516 ops/s
Iteration  10: 909523.825 ops/s
Iteration  11: 919484.360 ops/s
Iteration  12: 921443.206 ops/s
Iteration  13: 907894.551 ops/s
Iteration  14: 925672.565 ops/s
Iteration  15: 927195.706 ops/s
Iteration  16: 918602.586 ops/s
Iteration  17: 919917.525 ops/s
Iteration  18: 920371.932 ops/s
Iteration  19: 917874.174 ops/s
Iteration  20: 892484.191 ops/s
Iteration  21: 915137.743 ops/s
Iteration  22: 922622.612 ops/s
Iteration  23: 916813.728 ops/s
Iteration  24: 923498.069 ops/s
Iteration  25: 925076.437 ops/s
Iteration  26: 909961.692 ops/s
Iteration  27: 922299.448 ops/s
Iteration  28: 917709.375 ops/s
Iteration  29: 915372.007 ops/s
Iteration  30: 909277.205 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThis":
  917391.185 ±(99.9%) 4997.615 ops/s [Average]
  (min, avg, max) = (892484.191, 917391.185, 927195.706), stdev = 7480.196
  CI (99.9%): [912393.570, 922388.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThis  thrpt   30  917391.185 ± 4997.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590671.865 ops/s
# Warmup Iteration   2: 690798.069 ops/s
# Warmup Iteration   3: 891347.064 ops/s
# Warmup Iteration   4: 890744.959 ops/s
# Warmup Iteration   5: 890777.208 ops/s
# Warmup Iteration   6: 885343.343 ops/s
# Warmup Iteration   7: 882651.636 ops/s
# Warmup Iteration   8: 880956.250 ops/s
# Warmup Iteration   9: 890430.326 ops/s
# Warmup Iteration  10: 752546.218 ops/s
# Warmup Iteration  11: 877310.203 ops/s
# Warmup Iteration  12: 896107.876 ops/s
# Warmup Iteration  13: 895823.425 ops/s
# Warmup Iteration  14: 889178.283 ops/s
# Warmup Iteration  15: 894698.307 ops/s
# Warmup Iteration  16: 889668.324 ops/s
# Warmup Iteration  17: 938603.795 ops/s
# Warmup Iteration  18: 938302.635 ops/s
# Warmup Iteration  19: 936702.953 ops/s
# Warmup Iteration  20: 925974.093 ops/s
# Warmup Iteration  21: 935097.097 ops/s
# Warmup Iteration  22: 939676.842 ops/s
# Warmup Iteration  23: 937823.435 ops/s
# Warmup Iteration  24: 936596.491 ops/s
# Warmup Iteration  25: 937692.773 ops/s
# Warmup Iteration  26: 935557.121 ops/s
# Warmup Iteration  27: 935355.892 ops/s
# Warmup Iteration  28: 937788.161 ops/s
# Warmup Iteration  29: 923608.548 ops/s
# Warmup Iteration  30: 938902.877 ops/s
Iteration   1: 934132.227 ops/s
Iteration   2: 932277.402 ops/s
Iteration   3: 938396.466 ops/s
Iteration   4: 924411.914 ops/s
Iteration   5: 937281.270 ops/s
Iteration   6: 940260.623 ops/s
Iteration   7: 922837.041 ops/s
Iteration   8: 918942.310 ops/s
Iteration   9: 935721.861 ops/s
Iteration  10: 938868.908 ops/s
Iteration  11: 937252.586 ops/s
Iteration  12: 907781.351 ops/s
Iteration  13: 929934.985 ops/s
Iteration  14: 918130.133 ops/s
Iteration  15: 942134.830 ops/s
Iteration  16: 941988.059 ops/s
Iteration  17: 938853.029 ops/s
Iteration  18: 941193.443 ops/s
Iteration  19: 938863.807 ops/s
Iteration  20: 942324.888 ops/s
Iteration  21: 917548.167 ops/s
Iteration  22: 929285.031 ops/s
Iteration  23: 941766.388 ops/s
Iteration  24: 936420.050 ops/s
Iteration  25: 926085.285 ops/s
Iteration  26: 924416.500 ops/s
Iteration  27: 940853.730 ops/s
Iteration  28: 943740.073 ops/s
Iteration  29: 938975.203 ops/s
Iteration  30: 939359.051 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy":
  933334.554 ±(99.9%) 6206.279 ops/s [Average]
  (min, avg, max) = (907781.351, 933334.554, 943740.073), stdev = 9289.267
  CI (99.9%): [927128.275, 939540.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy  thrpt   30  933334.554 ± 6206.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594787.066 ops/s
# Warmup Iteration   2: 700104.827 ops/s
# Warmup Iteration   3: 896653.085 ops/s
# Warmup Iteration   4: 896141.775 ops/s
# Warmup Iteration   5: 890060.405 ops/s
# Warmup Iteration   6: 886311.911 ops/s
# Warmup Iteration   7: 884563.329 ops/s
# Warmup Iteration   8: 885037.670 ops/s
# Warmup Iteration   9: 894686.362 ops/s
# Warmup Iteration  10: 754157.584 ops/s
# Warmup Iteration  11: 897996.699 ops/s
# Warmup Iteration  12: 888314.589 ops/s
# Warmup Iteration  13: 886749.320 ops/s
# Warmup Iteration  14: 897210.055 ops/s
# Warmup Iteration  15: 892153.040 ops/s
# Warmup Iteration  16: 885513.480 ops/s
# Warmup Iteration  17: 935557.959 ops/s
# Warmup Iteration  18: 930307.328 ops/s
# Warmup Iteration  19: 932448.446 ops/s
# Warmup Iteration  20: 936425.834 ops/s
# Warmup Iteration  21: 931876.257 ops/s
# Warmup Iteration  22: 933970.668 ops/s
# Warmup Iteration  23: 935727.019 ops/s
# Warmup Iteration  24: 928362.042 ops/s
# Warmup Iteration  25: 939282.603 ops/s
# Warmup Iteration  26: 930499.374 ops/s
# Warmup Iteration  27: 936959.362 ops/s
# Warmup Iteration  28: 928888.759 ops/s
# Warmup Iteration  29: 935800.084 ops/s
# Warmup Iteration  30: 934398.019 ops/s
Iteration   1: 925825.598 ops/s
Iteration   2: 936104.594 ops/s
Iteration   3: 928545.112 ops/s
Iteration   4: 933204.569 ops/s
Iteration   5: 939942.996 ops/s
Iteration   6: 934285.190 ops/s
Iteration   7: 935254.330 ops/s
Iteration   8: 941077.452 ops/s
Iteration   9: 935475.619 ops/s
Iteration  10: 937932.519 ops/s
Iteration  11: 936890.097 ops/s
Iteration  12: 935273.206 ops/s
Iteration  13: 928473.083 ops/s
Iteration  14: 939897.748 ops/s
Iteration  15: 936727.214 ops/s
Iteration  16: 921983.163 ops/s
Iteration  17: 933788.322 ops/s
Iteration  18: 921252.854 ops/s
Iteration  19: 931182.097 ops/s
Iteration  20: 939427.491 ops/s
Iteration  21: 936422.922 ops/s
Iteration  22: 936987.850 ops/s
Iteration  23: 936319.495 ops/s
Iteration  24: 937238.897 ops/s
Iteration  25: 937192.457 ops/s
Iteration  26: 920285.295 ops/s
Iteration  27: 928805.947 ops/s
Iteration  28: 926709.673 ops/s
Iteration  29: 935042.837 ops/s
Iteration  30: 937625.347 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean":
  933505.799 ±(99.9%) 3822.762 ops/s [Average]
  (min, avg, max) = (920285.295, 933505.799, 941077.452), stdev = 5721.730
  CI (99.9%): [929683.037, 937328.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  933505.799 ± 3822.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 591765.756 ops/s
# Warmup Iteration   2: 689392.136 ops/s
# Warmup Iteration   3: 890123.880 ops/s
# Warmup Iteration   4: 897756.085 ops/s
# Warmup Iteration   5: 876920.846 ops/s
# Warmup Iteration   6: 892711.324 ops/s
# Warmup Iteration   7: 896612.587 ops/s
# Warmup Iteration   8: 892088.600 ops/s
# Warmup Iteration   9: 884519.746 ops/s
# Warmup Iteration  10: 752743.402 ops/s
# Warmup Iteration  11: 884802.072 ops/s
# Warmup Iteration  12: 891867.206 ops/s
# Warmup Iteration  13: 886656.962 ops/s
# Warmup Iteration  14: 890960.051 ops/s
# Warmup Iteration  15: 894240.146 ops/s
# Warmup Iteration  16: 893395.682 ops/s
# Warmup Iteration  17: 939589.031 ops/s
# Warmup Iteration  18: 933809.986 ops/s
# Warmup Iteration  19: 941617.789 ops/s
# Warmup Iteration  20: 930471.889 ops/s
# Warmup Iteration  21: 933547.513 ops/s
# Warmup Iteration  22: 936424.993 ops/s
# Warmup Iteration  23: 941357.384 ops/s
# Warmup Iteration  24: 939237.063 ops/s
# Warmup Iteration  25: 935247.957 ops/s
# Warmup Iteration  26: 943231.812 ops/s
# Warmup Iteration  27: 933626.121 ops/s
# Warmup Iteration  28: 936558.836 ops/s
# Warmup Iteration  29: 924862.933 ops/s
# Warmup Iteration  30: 939989.636 ops/s
Iteration   1: 929813.651 ops/s
Iteration   2: 938597.197 ops/s
Iteration   3: 945308.793 ops/s
Iteration   4: 936356.243 ops/s
Iteration   5: 940701.280 ops/s
Iteration   6: 937185.441 ops/s
Iteration   7: 935469.159 ops/s
Iteration   8: 926319.686 ops/s
Iteration   9: 925922.199 ops/s
Iteration  10: 933347.781 ops/s
Iteration  11: 939844.874 ops/s
Iteration  12: 942764.318 ops/s
Iteration  13: 940407.603 ops/s
Iteration  14: 938255.594 ops/s
Iteration  15: 937650.023 ops/s
Iteration  16: 940125.002 ops/s
Iteration  17: 931337.643 ops/s
Iteration  18: 943031.950 ops/s
Iteration  19: 941123.738 ops/s
Iteration  20: 936042.110 ops/s
Iteration  21: 941951.206 ops/s
Iteration  22: 937759.777 ops/s
Iteration  23: 933598.349 ops/s
Iteration  24: 941780.740 ops/s
Iteration  25: 936967.977 ops/s
Iteration  26: 935370.603 ops/s
Iteration  27: 932489.262 ops/s
Iteration  28: 946902.053 ops/s
Iteration  29: 925905.205 ops/s
Iteration  30: 934551.841 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte":
  936896.043 ±(99.9%) 3617.630 ops/s [Average]
  (min, avg, max) = (925905.205, 936896.043, 946902.053), stdev = 5414.699
  CI (99.9%): [933278.413, 940513.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  936896.043 ± 3617.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535076.271 ops/s
# Warmup Iteration   2: 581023.117 ops/s
# Warmup Iteration   3: 798452.806 ops/s
# Warmup Iteration   4: 797309.377 ops/s
# Warmup Iteration   5: 791773.272 ops/s
# Warmup Iteration   6: 796043.960 ops/s
# Warmup Iteration   7: 794307.319 ops/s
# Warmup Iteration   8: 792504.115 ops/s
# Warmup Iteration   9: 792733.441 ops/s
# Warmup Iteration  10: 796505.982 ops/s
# Warmup Iteration  11: 666156.639 ops/s
# Warmup Iteration  12: 793579.159 ops/s
# Warmup Iteration  13: 792609.165 ops/s
# Warmup Iteration  14: 790246.797 ops/s
# Warmup Iteration  15: 798430.655 ops/s
# Warmup Iteration  16: 799266.610 ops/s
# Warmup Iteration  17: 832095.330 ops/s
# Warmup Iteration  18: 833604.395 ops/s
# Warmup Iteration  19: 832281.044 ops/s
# Warmup Iteration  20: 832934.551 ops/s
# Warmup Iteration  21: 836623.057 ops/s
# Warmup Iteration  22: 835825.080 ops/s
# Warmup Iteration  23: 828987.937 ops/s
# Warmup Iteration  24: 823916.391 ops/s
# Warmup Iteration  25: 826136.948 ops/s
# Warmup Iteration  26: 831530.376 ops/s
# Warmup Iteration  27: 827733.788 ops/s
# Warmup Iteration  28: 822088.805 ops/s
# Warmup Iteration  29: 834434.969 ops/s
# Warmup Iteration  30: 821154.412 ops/s
Iteration   1: 827548.903 ops/s
Iteration   2: 834662.188 ops/s
Iteration   3: 825276.351 ops/s
Iteration   4: 830287.075 ops/s
Iteration   5: 833203.427 ops/s
Iteration   6: 821364.254 ops/s
Iteration   7: 835247.182 ops/s
Iteration   8: 820228.477 ops/s
Iteration   9: 830146.657 ops/s
Iteration  10: 816598.703 ops/s
Iteration  11: 832873.226 ops/s
Iteration  12: 830658.781 ops/s
Iteration  13: 832105.594 ops/s
Iteration  14: 837508.602 ops/s
Iteration  15: 834615.463 ops/s
Iteration  16: 833206.970 ops/s
Iteration  17: 831505.901 ops/s
Iteration  18: 836592.511 ops/s
Iteration  19: 834983.685 ops/s
Iteration  20: 829572.642 ops/s
Iteration  21: 830891.841 ops/s
Iteration  22: 828253.431 ops/s
Iteration  23: 834850.555 ops/s
Iteration  24: 821417.725 ops/s
Iteration  25: 837281.430 ops/s
Iteration  26: 832798.605 ops/s
Iteration  27: 833843.271 ops/s
Iteration  28: 833269.192 ops/s
Iteration  29: 822517.413 ops/s
Iteration  30: 837787.520 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar":
  830703.252 ±(99.9%) 3719.034 ops/s [Average]
  (min, avg, max) = (816598.703, 830703.252, 837787.520), stdev = 5566.475
  CI (99.9%): [826984.219, 834422.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  830703.252 ± 3719.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597475.950 ops/s
# Warmup Iteration   2: 697277.039 ops/s
# Warmup Iteration   3: 889373.385 ops/s
# Warmup Iteration   4: 891601.656 ops/s
# Warmup Iteration   5: 890675.322 ops/s
# Warmup Iteration   6: 896499.961 ops/s
# Warmup Iteration   7: 890985.987 ops/s
# Warmup Iteration   8: 894142.111 ops/s
# Warmup Iteration   9: 885502.033 ops/s
# Warmup Iteration  10: 754925.270 ops/s
# Warmup Iteration  11: 895043.574 ops/s
# Warmup Iteration  12: 879786.323 ops/s
# Warmup Iteration  13: 893017.032 ops/s
# Warmup Iteration  14: 898010.450 ops/s
# Warmup Iteration  15: 880668.167 ops/s
# Warmup Iteration  16: 890122.662 ops/s
# Warmup Iteration  17: 941344.791 ops/s
# Warmup Iteration  18: 940794.958 ops/s
# Warmup Iteration  19: 939918.531 ops/s
# Warmup Iteration  20: 937149.205 ops/s
# Warmup Iteration  21: 937457.306 ops/s
# Warmup Iteration  22: 937441.611 ops/s
# Warmup Iteration  23: 939654.517 ops/s
# Warmup Iteration  24: 943589.374 ops/s
# Warmup Iteration  25: 932133.446 ops/s
# Warmup Iteration  26: 936148.635 ops/s
# Warmup Iteration  27: 933888.097 ops/s
# Warmup Iteration  28: 938240.878 ops/s
# Warmup Iteration  29: 929068.466 ops/s
# Warmup Iteration  30: 940849.559 ops/s
Iteration   1: 943122.416 ops/s
Iteration   2: 929466.754 ops/s
Iteration   3: 936123.353 ops/s
Iteration   4: 935266.333 ops/s
Iteration   5: 924518.632 ops/s
Iteration   6: 937607.387 ops/s
Iteration   7: 924911.295 ops/s
Iteration   8: 937869.904 ops/s
Iteration   9: 929009.362 ops/s
Iteration  10: 940091.943 ops/s
Iteration  11: 940030.474 ops/s
Iteration  12: 940459.441 ops/s
Iteration  13: 933366.495 ops/s
Iteration  14: 937432.223 ops/s
Iteration  15: 939202.326 ops/s
Iteration  16: 942284.991 ops/s
Iteration  17: 941377.379 ops/s
Iteration  18: 943417.870 ops/s
Iteration  19: 936180.910 ops/s
Iteration  20: 935705.506 ops/s
Iteration  21: 942378.332 ops/s
Iteration  22: 939456.601 ops/s
Iteration  23: 941115.125 ops/s
Iteration  24: 938001.788 ops/s
Iteration  25: 937793.656 ops/s
Iteration  26: 906899.597 ops/s
Iteration  27: 942177.638 ops/s
Iteration  28: 933474.465 ops/s
Iteration  29: 927144.049 ops/s
Iteration  30: 934395.061 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble":
  935676.043 ±(99.9%) 5046.620 ops/s [Average]
  (min, avg, max) = (906899.597, 935676.043, 943417.870), stdev = 7553.544
  CI (99.9%): [930629.423, 940722.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  935676.043 ± 5046.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594808.441 ops/s
# Warmup Iteration   2: 699302.186 ops/s
# Warmup Iteration   3: 903484.758 ops/s
# Warmup Iteration   4: 905048.191 ops/s
# Warmup Iteration   5: 897765.470 ops/s
# Warmup Iteration   6: 894466.968 ops/s
# Warmup Iteration   7: 902544.174 ops/s
# Warmup Iteration   8: 889879.608 ops/s
# Warmup Iteration   9: 901622.253 ops/s
# Warmup Iteration  10: 756786.325 ops/s
# Warmup Iteration  11: 906004.424 ops/s
# Warmup Iteration  12: 899535.920 ops/s
# Warmup Iteration  13: 898263.739 ops/s
# Warmup Iteration  14: 904564.878 ops/s
# Warmup Iteration  15: 893591.119 ops/s
# Warmup Iteration  16: 905192.741 ops/s
# Warmup Iteration  17: 950797.986 ops/s
# Warmup Iteration  18: 953106.979 ops/s
# Warmup Iteration  19: 946276.112 ops/s
# Warmup Iteration  20: 940675.581 ops/s
# Warmup Iteration  21: 945660.839 ops/s
# Warmup Iteration  22: 956060.899 ops/s
# Warmup Iteration  23: 949861.683 ops/s
# Warmup Iteration  24: 948694.535 ops/s
# Warmup Iteration  25: 955797.746 ops/s
# Warmup Iteration  26: 928076.072 ops/s
# Warmup Iteration  27: 952459.407 ops/s
# Warmup Iteration  28: 951568.209 ops/s
# Warmup Iteration  29: 951498.682 ops/s
# Warmup Iteration  30: 946112.959 ops/s
Iteration   1: 952868.231 ops/s
Iteration   2: 924470.464 ops/s
Iteration   3: 948198.540 ops/s
Iteration   4: 948164.817 ops/s
Iteration   5: 958937.621 ops/s
Iteration   6: 955731.179 ops/s
Iteration   7: 951766.577 ops/s
Iteration   8: 946425.748 ops/s
Iteration   9: 956022.159 ops/s
Iteration  10: 946065.811 ops/s
Iteration  11: 957083.270 ops/s
Iteration  12: 941277.180 ops/s
Iteration  13: 952067.165 ops/s
Iteration  14: 952126.071 ops/s
Iteration  15: 943671.188 ops/s
Iteration  16: 951720.025 ops/s
Iteration  17: 954935.838 ops/s
Iteration  18: 955252.774 ops/s
Iteration  19: 941812.238 ops/s
Iteration  20: 951460.021 ops/s
Iteration  21: 954208.938 ops/s
Iteration  22: 947064.447 ops/s
Iteration  23: 937897.951 ops/s
Iteration  24: 956525.896 ops/s
Iteration  25: 950375.683 ops/s
Iteration  26: 953340.915 ops/s
Iteration  27: 925522.925 ops/s
Iteration  28: 949855.569 ops/s
Iteration  29: 949655.917 ops/s
Iteration  30: 955209.125 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat":
  948990.476 ±(99.9%) 5504.741 ops/s [Average]
  (min, avg, max) = (924470.464, 948990.476, 958937.621), stdev = 8239.237
  CI (99.9%): [943485.736, 954495.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  948990.476 ± 5504.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546641.289 ops/s
# Warmup Iteration   2: 599171.289 ops/s
# Warmup Iteration   3: 790475.489 ops/s
# Warmup Iteration   4: 791621.591 ops/s
# Warmup Iteration   5: 784428.757 ops/s
# Warmup Iteration   6: 790211.346 ops/s
# Warmup Iteration   7: 784377.231 ops/s
# Warmup Iteration   8: 792328.547 ops/s
# Warmup Iteration   9: 786803.732 ops/s
# Warmup Iteration  10: 792173.504 ops/s
# Warmup Iteration  11: 662151.526 ops/s
# Warmup Iteration  12: 779563.616 ops/s
# Warmup Iteration  13: 796033.303 ops/s
# Warmup Iteration  14: 786639.969 ops/s
# Warmup Iteration  15: 790152.265 ops/s
# Warmup Iteration  16: 789114.236 ops/s
# Warmup Iteration  17: 824760.484 ops/s
# Warmup Iteration  18: 828828.086 ops/s
# Warmup Iteration  19: 829110.224 ops/s
# Warmup Iteration  20: 828426.551 ops/s
# Warmup Iteration  21: 822509.274 ops/s
# Warmup Iteration  22: 830801.146 ops/s
# Warmup Iteration  23: 831279.071 ops/s
# Warmup Iteration  24: 830168.920 ops/s
# Warmup Iteration  25: 828813.344 ops/s
# Warmup Iteration  26: 823008.660 ops/s
# Warmup Iteration  27: 823623.605 ops/s
# Warmup Iteration  28: 828511.602 ops/s
# Warmup Iteration  29: 825924.419 ops/s
# Warmup Iteration  30: 828176.316 ops/s
Iteration   1: 825116.320 ops/s
Iteration   2: 818204.810 ops/s
Iteration   3: 830230.517 ops/s
Iteration   4: 825773.009 ops/s
Iteration   5: 804747.465 ops/s
Iteration   6: 833652.901 ops/s
Iteration   7: 831405.023 ops/s
Iteration   8: 830051.404 ops/s
Iteration   9: 831926.272 ops/s
Iteration  10: 801380.970 ops/s
Iteration  11: 829598.437 ops/s
Iteration  12: 822543.075 ops/s
Iteration  13: 831618.544 ops/s
Iteration  14: 830741.283 ops/s
Iteration  15: 833618.864 ops/s
Iteration  16: 830730.014 ops/s
Iteration  17: 831018.583 ops/s
Iteration  18: 817462.698 ops/s
Iteration  19: 830958.482 ops/s
Iteration  20: 833035.553 ops/s
Iteration  21: 832205.492 ops/s
Iteration  22: 825193.072 ops/s
Iteration  23: 831097.879 ops/s
Iteration  24: 823174.995 ops/s
Iteration  25: 833485.369 ops/s
Iteration  26: 827925.129 ops/s
Iteration  27: 832251.362 ops/s
Iteration  28: 831629.358 ops/s
Iteration  29: 817914.933 ops/s
Iteration  30: 817718.482 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt":
  826547.010 ±(99.9%) 5459.882 ops/s [Average]
  (min, avg, max) = (801380.970, 826547.010, 833652.901), stdev = 8172.095
  CI (99.9%): [821087.127, 832006.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  826547.010 ± 5459.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594616.978 ops/s
# Warmup Iteration   2: 690541.402 ops/s
# Warmup Iteration   3: 885473.225 ops/s
# Warmup Iteration   4: 897610.661 ops/s
# Warmup Iteration   5: 885243.397 ops/s
# Warmup Iteration   6: 888325.462 ops/s
# Warmup Iteration   7: 896800.216 ops/s
# Warmup Iteration   8: 898229.526 ops/s
# Warmup Iteration   9: 889918.155 ops/s
# Warmup Iteration  10: 742279.042 ops/s
# Warmup Iteration  11: 894067.210 ops/s
# Warmup Iteration  12: 893480.771 ops/s
# Warmup Iteration  13: 889088.021 ops/s
# Warmup Iteration  14: 885308.028 ops/s
# Warmup Iteration  15: 888180.702 ops/s
# Warmup Iteration  16: 890972.001 ops/s
# Warmup Iteration  17: 928233.632 ops/s
# Warmup Iteration  18: 935768.696 ops/s
# Warmup Iteration  19: 935122.656 ops/s
# Warmup Iteration  20: 932855.556 ops/s
# Warmup Iteration  21: 927165.265 ops/s
# Warmup Iteration  22: 932101.549 ops/s
# Warmup Iteration  23: 935495.291 ops/s
# Warmup Iteration  24: 935801.048 ops/s
# Warmup Iteration  25: 937178.731 ops/s
# Warmup Iteration  26: 927723.394 ops/s
# Warmup Iteration  27: 932689.373 ops/s
# Warmup Iteration  28: 934544.613 ops/s
# Warmup Iteration  29: 929960.563 ops/s
# Warmup Iteration  30: 927362.118 ops/s
Iteration   1: 932218.580 ops/s
Iteration   2: 937942.777 ops/s
Iteration   3: 937171.110 ops/s
Iteration   4: 935711.819 ops/s
Iteration   5: 933310.193 ops/s
Iteration   6: 931664.765 ops/s
Iteration   7: 936137.261 ops/s
Iteration   8: 936106.199 ops/s
Iteration   9: 934525.178 ops/s
Iteration  10: 929206.926 ops/s
Iteration  11: 932559.992 ops/s
Iteration  12: 937382.902 ops/s
Iteration  13: 923685.008 ops/s
Iteration  14: 933140.444 ops/s
Iteration  15: 934396.859 ops/s
Iteration  16: 932201.081 ops/s
Iteration  17: 918896.059 ops/s
Iteration  18: 937611.605 ops/s
Iteration  19: 938107.203 ops/s
Iteration  20: 931372.755 ops/s
Iteration  21: 920809.898 ops/s
Iteration  22: 915885.143 ops/s
Iteration  23: 933888.949 ops/s
Iteration  24: 934629.204 ops/s
Iteration  25: 931600.829 ops/s
Iteration  26: 932128.284 ops/s
Iteration  27: 918875.595 ops/s
Iteration  28: 921125.214 ops/s
Iteration  29: 933069.403 ops/s
Iteration  30: 936380.628 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong":
  931391.395 ±(99.9%) 4239.286 ops/s [Average]
  (min, avg, max) = (915885.143, 931391.395, 938107.203), stdev = 6345.164
  CI (99.9%): [927152.110, 935630.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  931391.395 ± 4239.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588770.665 ops/s
# Warmup Iteration   2: 695937.000 ops/s
# Warmup Iteration   3: 896410.783 ops/s
# Warmup Iteration   4: 883106.971 ops/s
# Warmup Iteration   5: 893589.775 ops/s
# Warmup Iteration   6: 899811.388 ops/s
# Warmup Iteration   7: 896589.275 ops/s
# Warmup Iteration   8: 898290.813 ops/s
# Warmup Iteration   9: 894501.895 ops/s
# Warmup Iteration  10: 746968.838 ops/s
# Warmup Iteration  11: 881295.210 ops/s
# Warmup Iteration  12: 897978.268 ops/s
# Warmup Iteration  13: 897137.163 ops/s
# Warmup Iteration  14: 899455.751 ops/s
# Warmup Iteration  15: 886079.183 ops/s
# Warmup Iteration  16: 897993.271 ops/s
# Warmup Iteration  17: 937603.597 ops/s
# Warmup Iteration  18: 950053.904 ops/s
# Warmup Iteration  19: 945210.023 ops/s
# Warmup Iteration  20: 948636.067 ops/s
# Warmup Iteration  21: 951281.133 ops/s
# Warmup Iteration  22: 954219.637 ops/s
# Warmup Iteration  23: 943573.866 ops/s
# Warmup Iteration  24: 953339.009 ops/s
# Warmup Iteration  25: 950338.737 ops/s
# Warmup Iteration  26: 950320.246 ops/s
# Warmup Iteration  27: 951156.318 ops/s
# Warmup Iteration  28: 950758.730 ops/s
# Warmup Iteration  29: 951986.759 ops/s
# Warmup Iteration  30: 949237.228 ops/s
Iteration   1: 951228.435 ops/s
Iteration   2: 941171.405 ops/s
Iteration   3: 950477.746 ops/s
Iteration   4: 947638.053 ops/s
Iteration   5: 935006.296 ops/s
Iteration   6: 952879.717 ops/s
Iteration   7: 951540.076 ops/s
Iteration   8: 946300.629 ops/s
Iteration   9: 942786.624 ops/s
Iteration  10: 952030.447 ops/s
Iteration  11: 934335.351 ops/s
Iteration  12: 939949.132 ops/s
Iteration  13: 951117.041 ops/s
Iteration  14: 949873.641 ops/s
Iteration  15: 949779.031 ops/s
Iteration  16: 947457.341 ops/s
Iteration  17: 936283.777 ops/s
Iteration  18: 951649.258 ops/s
Iteration  19: 941294.212 ops/s
Iteration  20: 953500.603 ops/s
Iteration  21: 949002.837 ops/s
Iteration  22: 944961.064 ops/s
Iteration  23: 946106.632 ops/s
Iteration  24: 932480.256 ops/s
Iteration  25: 945879.115 ops/s
Iteration  26: 947100.543 ops/s
Iteration  27: 940850.312 ops/s
Iteration  28: 946079.308 ops/s
Iteration  29: 944185.465 ops/s
Iteration  30: 948367.763 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort":
  945710.404 ±(99.9%) 3885.986 ops/s [Average]
  (min, avg, max) = (932480.256, 945710.404, 953500.603), stdev = 5816.361
  CI (99.9%): [941824.418, 949596.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  945710.404 ± 3885.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590993.321 ops/s
# Warmup Iteration   2: 678694.339 ops/s
# Warmup Iteration   3: 878235.189 ops/s
# Warmup Iteration   4: 882946.017 ops/s
# Warmup Iteration   5: 870368.348 ops/s
# Warmup Iteration   6: 879613.079 ops/s
# Warmup Iteration   7: 868190.542 ops/s
# Warmup Iteration   8: 883666.676 ops/s
# Warmup Iteration   9: 877794.707 ops/s
# Warmup Iteration  10: 738724.284 ops/s
# Warmup Iteration  11: 879889.028 ops/s
# Warmup Iteration  12: 879016.444 ops/s
# Warmup Iteration  13: 876357.117 ops/s
# Warmup Iteration  14: 884942.452 ops/s
# Warmup Iteration  15: 875812.395 ops/s
# Warmup Iteration  16: 887171.365 ops/s
# Warmup Iteration  17: 935327.010 ops/s
# Warmup Iteration  18: 932692.712 ops/s
# Warmup Iteration  19: 928739.417 ops/s
# Warmup Iteration  20: 917442.594 ops/s
# Warmup Iteration  21: 925676.689 ops/s
# Warmup Iteration  22: 930069.397 ops/s
# Warmup Iteration  23: 926285.152 ops/s
# Warmup Iteration  24: 927355.662 ops/s
# Warmup Iteration  25: 923241.516 ops/s
# Warmup Iteration  26: 922060.074 ops/s
# Warmup Iteration  27: 933452.595 ops/s
# Warmup Iteration  28: 932451.699 ops/s
# Warmup Iteration  29: 931909.406 ops/s
# Warmup Iteration  30: 935360.189 ops/s
Iteration   1: 926781.386 ops/s
Iteration   2: 933823.619 ops/s
Iteration   3: 930135.079 ops/s
Iteration   4: 920339.211 ops/s
Iteration   5: 933286.193 ops/s
Iteration   6: 932426.348 ops/s
Iteration   7: 930018.352 ops/s
Iteration   8: 913710.570 ops/s
Iteration   9: 932974.709 ops/s
Iteration  10: 936627.855 ops/s
Iteration  11: 927544.308 ops/s
Iteration  12: 915488.797 ops/s
Iteration  13: 927475.554 ops/s
Iteration  14: 936726.980 ops/s
Iteration  15: 919789.272 ops/s
Iteration  16: 927888.184 ops/s
Iteration  17: 917879.291 ops/s
Iteration  18: 918960.422 ops/s
Iteration  19: 929744.152 ops/s
Iteration  20: 929389.535 ops/s
Iteration  21: 932248.574 ops/s
Iteration  22: 935744.296 ops/s
Iteration  23: 918004.444 ops/s
Iteration  24: 934735.818 ops/s
Iteration  25: 933548.654 ops/s
Iteration  26: 924317.275 ops/s
Iteration  27: 935744.169 ops/s
Iteration  28: 935715.053 ops/s
Iteration  29: 930406.535 ops/s
Iteration  30: 939686.320 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator":
  928705.365 ±(99.9%) 4737.181 ops/s [Average]
  (min, avg, max) = (913710.570, 928705.365, 939686.320), stdev = 7090.389
  CI (99.9%): [923968.185, 933442.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  928705.365 ± 4737.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 90248.699 ops/s
# Warmup Iteration   2: 99637.738 ops/s
# Warmup Iteration   3: 129896.307 ops/s
# Warmup Iteration   4: 129440.396 ops/s
# Warmup Iteration   5: 128210.774 ops/s
# Warmup Iteration   6: 130063.725 ops/s
# Warmup Iteration   7: 128910.101 ops/s
# Warmup Iteration   8: 129359.225 ops/s
# Warmup Iteration   9: 130140.550 ops/s
# Warmup Iteration  10: 127526.153 ops/s
# Warmup Iteration  11: 126804.956 ops/s
# Warmup Iteration  12: 113872.518 ops/s
# Warmup Iteration  13: 129862.957 ops/s
# Warmup Iteration  14: 129832.938 ops/s
# Warmup Iteration  15: 130227.676 ops/s
# Warmup Iteration  16: 129762.170 ops/s
# Warmup Iteration  17: 136222.347 ops/s
# Warmup Iteration  18: 135915.849 ops/s
# Warmup Iteration  19: 136002.493 ops/s
# Warmup Iteration  20: 136952.867 ops/s
# Warmup Iteration  21: 136618.388 ops/s
# Warmup Iteration  22: 137297.928 ops/s
# Warmup Iteration  23: 132970.808 ops/s
# Warmup Iteration  24: 136918.283 ops/s
# Warmup Iteration  25: 136150.393 ops/s
# Warmup Iteration  26: 135990.811 ops/s
# Warmup Iteration  27: 137402.624 ops/s
# Warmup Iteration  28: 135727.847 ops/s
# Warmup Iteration  29: 136996.188 ops/s
# Warmup Iteration  30: 137506.803 ops/s
Iteration   1: 137601.207 ops/s
Iteration   2: 135543.820 ops/s
Iteration   3: 136171.332 ops/s
Iteration   4: 135956.462 ops/s
Iteration   5: 137628.262 ops/s
Iteration   6: 136953.764 ops/s
Iteration   7: 137371.015 ops/s
Iteration   8: 137954.959 ops/s
Iteration   9: 135012.301 ops/s
Iteration  10: 136612.694 ops/s
Iteration  11: 137483.645 ops/s
Iteration  12: 137111.723 ops/s
Iteration  13: 137581.927 ops/s
Iteration  14: 137724.732 ops/s
Iteration  15: 134687.881 ops/s
Iteration  16: 137428.390 ops/s
Iteration  17: 136757.842 ops/s
Iteration  18: 135172.689 ops/s
Iteration  19: 137415.111 ops/s
Iteration  20: 137151.942 ops/s
Iteration  21: 135982.306 ops/s
Iteration  22: 137330.692 ops/s
Iteration  23: 136966.905 ops/s
Iteration  24: 136436.684 ops/s
Iteration  25: 137207.695 ops/s
Iteration  26: 138074.742 ops/s
Iteration  27: 136819.565 ops/s
Iteration  28: 137295.091 ops/s
Iteration  29: 136625.671 ops/s
Iteration  30: 137239.614 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subList":
  136843.355 ±(99.9%) 585.617 ops/s [Average]
  (min, avg, max) = (134687.881, 136843.355, 138074.742), stdev = 876.523
  CI (99.9%): [136257.739, 137428.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subList  thrpt   30  136843.355 ± 585.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614045.929 ops/s
# Warmup Iteration   2: 684792.589 ops/s
# Warmup Iteration   3: 900620.086 ops/s
# Warmup Iteration   4: 908127.281 ops/s
# Warmup Iteration   5: 904352.264 ops/s
# Warmup Iteration   6: 911099.753 ops/s
# Warmup Iteration   7: 900127.641 ops/s
# Warmup Iteration   8: 902181.318 ops/s
# Warmup Iteration   9: 903942.698 ops/s
# Warmup Iteration  10: 846507.051 ops/s
# Warmup Iteration  11: 807062.811 ops/s
# Warmup Iteration  12: 905232.560 ops/s
# Warmup Iteration  13: 898510.134 ops/s
# Warmup Iteration  14: 895094.624 ops/s
# Warmup Iteration  15: 904504.373 ops/s
# Warmup Iteration  16: 905950.978 ops/s
# Warmup Iteration  17: 956401.142 ops/s
# Warmup Iteration  18: 957547.126 ops/s
# Warmup Iteration  19: 960726.127 ops/s
# Warmup Iteration  20: 958992.318 ops/s
# Warmup Iteration  21: 957972.404 ops/s
# Warmup Iteration  22: 956831.593 ops/s
# Warmup Iteration  23: 954358.601 ops/s
# Warmup Iteration  24: 960048.593 ops/s
# Warmup Iteration  25: 956185.977 ops/s
# Warmup Iteration  26: 958524.764 ops/s
# Warmup Iteration  27: 956838.499 ops/s
# Warmup Iteration  28: 940536.730 ops/s
# Warmup Iteration  29: 959248.305 ops/s
# Warmup Iteration  30: 939839.994 ops/s
Iteration   1: 959544.903 ops/s
Iteration   2: 945004.049 ops/s
Iteration   3: 958751.607 ops/s
Iteration   4: 961617.935 ops/s
Iteration   5: 959303.565 ops/s
Iteration   6: 959016.240 ops/s
Iteration   7: 957436.069 ops/s
Iteration   8: 950251.353 ops/s
Iteration   9: 957477.032 ops/s
Iteration  10: 960243.370 ops/s
Iteration  11: 959449.543 ops/s
Iteration  12: 957937.163 ops/s
Iteration  13: 930213.877 ops/s
Iteration  14: 944568.970 ops/s
Iteration  15: 961845.047 ops/s
Iteration  16: 960859.441 ops/s
Iteration  17: 958612.748 ops/s
Iteration  18: 956268.863 ops/s
Iteration  19: 955256.386 ops/s
Iteration  20: 945150.651 ops/s
Iteration  21: 939792.859 ops/s
Iteration  22: 956709.641 ops/s
Iteration  23: 959683.780 ops/s
Iteration  24: 958075.166 ops/s
Iteration  25: 959902.792 ops/s
Iteration  26: 957965.164 ops/s
Iteration  27: 940173.904 ops/s
Iteration  28: 957379.326 ops/s
Iteration  29: 957267.929 ops/s
Iteration  30: 939330.950 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator":
  954169.677 ±(99.9%) 5511.603 ops/s [Average]
  (min, avg, max) = (930213.877, 954169.677, 961845.047), stdev = 8249.508
  CI (99.9%): [948658.075, 959681.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator  thrpt   30  954169.677 ± 5511.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2923975.787 ops/s
# Warmup Iteration   2: 6707237.266 ops/s
# Warmup Iteration   3: 6794838.336 ops/s
# Warmup Iteration   4: 5692343.880 ops/s
# Warmup Iteration   5: 6763942.123 ops/s
# Warmup Iteration   6: 6780869.571 ops/s
# Warmup Iteration   7: 6775532.649 ops/s
# Warmup Iteration   8: 6734871.624 ops/s
# Warmup Iteration   9: 6781690.386 ops/s
# Warmup Iteration  10: 6628388.149 ops/s
# Warmup Iteration  11: 6526732.900 ops/s
# Warmup Iteration  12: 6755497.144 ops/s
# Warmup Iteration  13: 6764029.887 ops/s
# Warmup Iteration  14: 6783103.545 ops/s
# Warmup Iteration  15: 6778248.880 ops/s
# Warmup Iteration  16: 6742549.672 ops/s
# Warmup Iteration  17: 6768752.448 ops/s
# Warmup Iteration  18: 6678521.877 ops/s
# Warmup Iteration  19: 6760383.228 ops/s
# Warmup Iteration  20: 6727818.997 ops/s
# Warmup Iteration  21: 6799199.159 ops/s
# Warmup Iteration  22: 6693269.190 ops/s
# Warmup Iteration  23: 6768682.479 ops/s
# Warmup Iteration  24: 6728543.091 ops/s
# Warmup Iteration  25: 6710777.485 ops/s
# Warmup Iteration  26: 6756705.280 ops/s
# Warmup Iteration  27: 6674730.664 ops/s
# Warmup Iteration  28: 6798765.640 ops/s
# Warmup Iteration  29: 6773903.709 ops/s
# Warmup Iteration  30: 6755825.633 ops/s
Iteration   1: 6796622.064 ops/s
Iteration   2: 6720468.375 ops/s
Iteration   3: 6809468.680 ops/s
Iteration   4: 6773372.559 ops/s
Iteration   5: 6795783.071 ops/s
Iteration   6: 6689953.671 ops/s
Iteration   7: 6785909.609 ops/s
Iteration   8: 6813732.661 ops/s
Iteration   9: 6762304.171 ops/s
Iteration  10: 6856753.252 ops/s
Iteration  11: 6729010.803 ops/s
Iteration  12: 6792199.847 ops/s
Iteration  13: 6755533.792 ops/s
Iteration  14: 6686587.367 ops/s
Iteration  15: 6830415.495 ops/s
Iteration  16: 6804952.002 ops/s
Iteration  17: 6738933.247 ops/s
Iteration  18: 6749536.164 ops/s
Iteration  19: 6866311.994 ops/s
Iteration  20: 6762667.339 ops/s
Iteration  21: 6820752.026 ops/s
Iteration  22: 6787291.233 ops/s
Iteration  23: 6707834.018 ops/s
Iteration  24: 6741377.363 ops/s
Iteration  25: 6811999.790 ops/s
Iteration  26: 6736674.021 ops/s
Iteration  27: 6847600.649 ops/s
Iteration  28: 6780914.815 ops/s
Iteration  29: 6684241.483 ops/s
Iteration  30: 6766278.437 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_tap":
  6773516.000 ±(99.9%) 32836.688 ops/s [Average]
  (min, avg, max) = (6684241.483, 6773516.000, 6866311.994), stdev = 49148.412
  CI (99.9%): [6740679.312, 6806352.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  6773516.000 ± 32836.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1659285.401 ops/s
# Warmup Iteration   2: 3727166.226 ops/s
# Warmup Iteration   3: 3152169.953 ops/s
# Warmup Iteration   4: 3771949.934 ops/s
# Warmup Iteration   5: 3793162.839 ops/s
# Warmup Iteration   6: 3795691.139 ops/s
# Warmup Iteration   7: 3799256.696 ops/s
# Warmup Iteration   8: 3746884.497 ops/s
# Warmup Iteration   9: 3789160.242 ops/s
# Warmup Iteration  10: 3793682.860 ops/s
# Warmup Iteration  11: 3763102.111 ops/s
# Warmup Iteration  12: 3742589.586 ops/s
# Warmup Iteration  13: 3764226.029 ops/s
# Warmup Iteration  14: 3784674.136 ops/s
# Warmup Iteration  15: 3775921.242 ops/s
# Warmup Iteration  16: 3731001.318 ops/s
# Warmup Iteration  17: 3749612.827 ops/s
# Warmup Iteration  18: 3751208.451 ops/s
# Warmup Iteration  19: 3765636.483 ops/s
# Warmup Iteration  20: 3792798.553 ops/s
# Warmup Iteration  21: 3744151.452 ops/s
# Warmup Iteration  22: 3773295.586 ops/s
# Warmup Iteration  23: 3772285.002 ops/s
# Warmup Iteration  24: 3755312.461 ops/s
# Warmup Iteration  25: 3769063.279 ops/s
# Warmup Iteration  26: 3756051.752 ops/s
# Warmup Iteration  27: 3749521.655 ops/s
# Warmup Iteration  28: 3758686.004 ops/s
# Warmup Iteration  29: 3777330.671 ops/s
# Warmup Iteration  30: 3759660.319 ops/s
Iteration   1: 3643403.241 ops/s
Iteration   2: 3715591.522 ops/s
Iteration   3: 3718862.054 ops/s
Iteration   4: 3782598.955 ops/s
Iteration   5: 3736591.527 ops/s
Iteration   6: 3732960.758 ops/s
Iteration   7: 3760350.476 ops/s
Iteration   8: 3766070.405 ops/s
Iteration   9: 3769695.881 ops/s
Iteration  10: 3770820.995 ops/s
Iteration  11: 3796810.949 ops/s
Iteration  12: 3759144.846 ops/s
Iteration  13: 3715480.493 ops/s
Iteration  14: 3701863.305 ops/s
Iteration  15: 3761376.583 ops/s
Iteration  16: 3781031.926 ops/s
Iteration  17: 3736406.656 ops/s
Iteration  18: 3718953.132 ops/s
Iteration  19: 3729346.275 ops/s
Iteration  20: 3772698.721 ops/s
Iteration  21: 3739952.531 ops/s
Iteration  22: 3757285.219 ops/s
Iteration  23: 3767940.908 ops/s
Iteration  24: 3758619.248 ops/s
Iteration  25: 3757053.940 ops/s
Iteration  26: 3706901.426 ops/s
Iteration  27: 3762975.171 ops/s
Iteration  28: 3792656.261 ops/s
Iteration  29: 3757008.087 ops/s
Iteration  30: 3767688.332 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  3747937.994 ±(99.9%) 21446.588 ops/s [Average]
  (min, avg, max) = (3643403.241, 3747937.994, 3796810.949), stdev = 32100.246
  CI (99.9%): [3726491.406, 3769384.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  3747937.994 ± 21446.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1345434.398 ops/s
# Warmup Iteration   2: 2937481.531 ops/s
# Warmup Iteration   3: 2753576.290 ops/s
# Warmup Iteration   4: 2644293.810 ops/s
# Warmup Iteration   5: 2914021.936 ops/s
# Warmup Iteration   6: 2898712.865 ops/s
# Warmup Iteration   7: 2913637.695 ops/s
# Warmup Iteration   8: 2922234.575 ops/s
# Warmup Iteration   9: 2883585.181 ops/s
# Warmup Iteration  10: 2920913.759 ops/s
# Warmup Iteration  11: 2953488.309 ops/s
# Warmup Iteration  12: 2938725.189 ops/s
# Warmup Iteration  13: 2919099.563 ops/s
# Warmup Iteration  14: 2907216.757 ops/s
# Warmup Iteration  15: 2910730.437 ops/s
# Warmup Iteration  16: 2941178.534 ops/s
# Warmup Iteration  17: 2929660.181 ops/s
# Warmup Iteration  18: 2934428.995 ops/s
# Warmup Iteration  19: 2879910.165 ops/s
# Warmup Iteration  20: 2932090.063 ops/s
# Warmup Iteration  21: 2905869.958 ops/s
# Warmup Iteration  22: 2932536.108 ops/s
# Warmup Iteration  23: 2934506.130 ops/s
# Warmup Iteration  24: 2904967.819 ops/s
# Warmup Iteration  25: 2925702.211 ops/s
# Warmup Iteration  26: 2916710.882 ops/s
# Warmup Iteration  27: 2939444.180 ops/s
# Warmup Iteration  28: 2937775.867 ops/s
# Warmup Iteration  29: 2939078.023 ops/s
# Warmup Iteration  30: 2922278.881 ops/s
Iteration   1: 2944260.343 ops/s
Iteration   2: 2906506.966 ops/s
Iteration   3: 2946753.131 ops/s
Iteration   4: 2925575.681 ops/s
Iteration   5: 2929201.715 ops/s
Iteration   6: 2934142.644 ops/s
Iteration   7: 2922084.629 ops/s
Iteration   8: 2920922.648 ops/s
Iteration   9: 2941493.085 ops/s
Iteration  10: 2935975.630 ops/s
Iteration  11: 2961436.248 ops/s
Iteration  12: 2931469.219 ops/s
Iteration  13: 2896714.392 ops/s
Iteration  14: 2945752.617 ops/s
Iteration  15: 2880974.508 ops/s
Iteration  16: 2899190.040 ops/s
Iteration  17: 2928758.204 ops/s
Iteration  18: 2973939.239 ops/s
Iteration  19: 2934323.968 ops/s
Iteration  20: 2924980.136 ops/s
Iteration  21: 2937810.960 ops/s
Iteration  22: 2930163.788 ops/s
Iteration  23: 2925834.276 ops/s
Iteration  24: 2869285.094 ops/s
Iteration  25: 2846882.353 ops/s
Iteration  26: 2929542.586 ops/s
Iteration  27: 2891798.283 ops/s
Iteration  28: 2939059.146 ops/s
Iteration  29: 2943656.953 ops/s
Iteration  30: 2928602.232 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testClone":
  2924236.357 ±(99.9%) 17749.709 ops/s [Average]
  (min, avg, max) = (2846882.353, 2924236.357, 2973939.239), stdev = 26566.931
  CI (99.9%): [2906486.648, 2941986.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testClone  thrpt   30  2924236.357 ± 17749.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2143522.581 ops/s
# Warmup Iteration   2: 4724592.242 ops/s
# Warmup Iteration   3: 4761355.717 ops/s
# Warmup Iteration   4: 4010694.877 ops/s
# Warmup Iteration   5: 4719043.184 ops/s
# Warmup Iteration   6: 4797115.315 ops/s
# Warmup Iteration   7: 4785672.418 ops/s
# Warmup Iteration   8: 4784532.819 ops/s
# Warmup Iteration   9: 4725120.668 ops/s
# Warmup Iteration  10: 4674874.414 ops/s
# Warmup Iteration  11: 4755667.107 ops/s
# Warmup Iteration  12: 4761459.243 ops/s
# Warmup Iteration  13: 4770378.870 ops/s
# Warmup Iteration  14: 4738068.695 ops/s
# Warmup Iteration  15: 4764637.297 ops/s
# Warmup Iteration  16: 4765286.530 ops/s
# Warmup Iteration  17: 4710233.937 ops/s
# Warmup Iteration  18: 4755765.007 ops/s
# Warmup Iteration  19: 4770389.221 ops/s
# Warmup Iteration  20: 4774530.287 ops/s
# Warmup Iteration  21: 4726528.049 ops/s
# Warmup Iteration  22: 4779013.325 ops/s
# Warmup Iteration  23: 4734087.034 ops/s
# Warmup Iteration  24: 4788142.187 ops/s
# Warmup Iteration  25: 4725639.091 ops/s
# Warmup Iteration  26: 4765910.342 ops/s
# Warmup Iteration  27: 4754367.150 ops/s
# Warmup Iteration  28: 4768451.867 ops/s
# Warmup Iteration  29: 4771908.425 ops/s
# Warmup Iteration  30: 4762532.838 ops/s
Iteration   1: 4724524.547 ops/s
Iteration   2: 4768562.106 ops/s
Iteration   3: 4755549.405 ops/s
Iteration   4: 4738447.168 ops/s
Iteration   5: 4821911.252 ops/s
Iteration   6: 4677644.177 ops/s
Iteration   7: 4846891.246 ops/s
Iteration   8: 4730556.159 ops/s
Iteration   9: 4736318.324 ops/s
Iteration  10: 4832146.221 ops/s
Iteration  11: 4787377.397 ops/s
Iteration  12: 4754331.823 ops/s
Iteration  13: 4750798.697 ops/s
Iteration  14: 4755010.664 ops/s
Iteration  15: 4741232.250 ops/s
Iteration  16: 4699701.472 ops/s
Iteration  17: 4776953.271 ops/s
Iteration  18: 4791464.417 ops/s
Iteration  19: 4769815.816 ops/s
Iteration  20: 4763242.106 ops/s
Iteration  21: 4716578.895 ops/s
Iteration  22: 4730053.193 ops/s
Iteration  23: 4770210.202 ops/s
Iteration  24: 4751630.378 ops/s
Iteration  25: 4741069.307 ops/s
Iteration  26: 4814104.747 ops/s
Iteration  27: 4790904.060 ops/s
Iteration  28: 4767555.319 ops/s
Iteration  29: 4787950.431 ops/s
Iteration  30: 4772788.487 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testEquals":
  4762177.451 ±(99.9%) 25101.439 ops/s [Average]
  (min, avg, max) = (4677644.177, 4762177.451, 4846891.246), stdev = 37570.655
  CI (99.9%): [4737076.012, 4787278.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testEquals  thrpt   30  4762177.451 ± 25101.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1715770.124 ops/s
# Warmup Iteration   2: 3778560.595 ops/s
# Warmup Iteration   3: 3214789.362 ops/s
# Warmup Iteration   4: 3812457.088 ops/s
# Warmup Iteration   5: 3775920.392 ops/s
# Warmup Iteration   6: 3814323.120 ops/s
# Warmup Iteration   7: 3793788.895 ops/s
# Warmup Iteration   8: 3775443.625 ops/s
# Warmup Iteration   9: 3773306.290 ops/s
# Warmup Iteration  10: 3799922.514 ops/s
# Warmup Iteration  11: 3810689.526 ops/s
# Warmup Iteration  12: 3827188.880 ops/s
# Warmup Iteration  13: 3810964.423 ops/s
# Warmup Iteration  14: 3822809.011 ops/s
# Warmup Iteration  15: 3817659.266 ops/s
# Warmup Iteration  16: 3837405.239 ops/s
# Warmup Iteration  17: 3800674.320 ops/s
# Warmup Iteration  18: 3810798.108 ops/s
# Warmup Iteration  19: 3813457.434 ops/s
# Warmup Iteration  20: 3806244.874 ops/s
# Warmup Iteration  21: 3826291.459 ops/s
# Warmup Iteration  22: 3824642.631 ops/s
# Warmup Iteration  23: 3816055.098 ops/s
# Warmup Iteration  24: 3821766.774 ops/s
# Warmup Iteration  25: 3797964.795 ops/s
# Warmup Iteration  26: 3839760.037 ops/s
# Warmup Iteration  27: 3824436.129 ops/s
# Warmup Iteration  28: 3761536.118 ops/s
# Warmup Iteration  29: 3804627.447 ops/s
# Warmup Iteration  30: 3799326.568 ops/s
Iteration   1: 3827678.566 ops/s
Iteration   2: 3824700.671 ops/s
Iteration   3: 3806522.157 ops/s
Iteration   4: 3819983.467 ops/s
Iteration   5: 3760808.207 ops/s
Iteration   6: 3830718.241 ops/s
Iteration   7: 3837126.516 ops/s
Iteration   8: 3839954.915 ops/s
Iteration   9: 3819253.874 ops/s
Iteration  10: 3799745.596 ops/s
Iteration  11: 3815117.069 ops/s
Iteration  12: 3749283.202 ops/s
Iteration  13: 3795927.210 ops/s
Iteration  14: 3819638.939 ops/s
Iteration  15: 3746664.392 ops/s
Iteration  16: 3819057.567 ops/s
Iteration  17: 3802417.720 ops/s
Iteration  18: 3804208.354 ops/s
Iteration  19: 3783859.010 ops/s
Iteration  20: 3810649.520 ops/s
Iteration  21: 3825052.799 ops/s
Iteration  22: 3840467.240 ops/s
Iteration  23: 3743098.979 ops/s
Iteration  24: 3808344.064 ops/s
Iteration  25: 3839477.367 ops/s
Iteration  26: 3809759.920 ops/s
Iteration  27: 3822279.404 ops/s
Iteration  28: 3758374.291 ops/s
Iteration  29: 3779510.825 ops/s
Iteration  30: 3823963.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  3805454.796 ±(99.9%) 19223.515 ops/s [Average]
  (min, avg, max) = (3743098.979, 3805454.796, 3840467.240), stdev = 28772.855
  CI (99.9%): [3786231.280, 3824678.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  3805454.796 ± 19223.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622010.532 ops/s
# Warmup Iteration   2: 727073.843 ops/s
# Warmup Iteration   3: 925755.821 ops/s
# Warmup Iteration   4: 923019.861 ops/s
# Warmup Iteration   5: 922462.157 ops/s
# Warmup Iteration   6: 919456.532 ops/s
# Warmup Iteration   7: 921253.120 ops/s
# Warmup Iteration   8: 917623.085 ops/s
# Warmup Iteration   9: 921008.960 ops/s
# Warmup Iteration  10: 772039.785 ops/s
# Warmup Iteration  11: 919989.499 ops/s
# Warmup Iteration  12: 922566.504 ops/s
# Warmup Iteration  13: 910963.392 ops/s
# Warmup Iteration  14: 928040.075 ops/s
# Warmup Iteration  15: 905739.322 ops/s
# Warmup Iteration  16: 926419.926 ops/s
# Warmup Iteration  17: 974182.574 ops/s
# Warmup Iteration  18: 974361.060 ops/s
# Warmup Iteration  19: 963425.143 ops/s
# Warmup Iteration  20: 979570.678 ops/s
# Warmup Iteration  21: 979464.746 ops/s
# Warmup Iteration  22: 971558.009 ops/s
# Warmup Iteration  23: 973383.317 ops/s
# Warmup Iteration  24: 977503.810 ops/s
# Warmup Iteration  25: 974451.991 ops/s
# Warmup Iteration  26: 980473.799 ops/s
# Warmup Iteration  27: 969860.080 ops/s
# Warmup Iteration  28: 974638.178 ops/s
# Warmup Iteration  29: 958811.828 ops/s
# Warmup Iteration  30: 978079.357 ops/s
Iteration   1: 971170.212 ops/s
Iteration   2: 976650.168 ops/s
Iteration   3: 977795.602 ops/s
Iteration   4: 970672.213 ops/s
Iteration   5: 970114.966 ops/s
Iteration   6: 977141.942 ops/s
Iteration   7: 963293.731 ops/s
Iteration   8: 962820.557 ops/s
Iteration   9: 979268.654 ops/s
Iteration  10: 977503.327 ops/s
Iteration  11: 976833.080 ops/s
Iteration  12: 974605.287 ops/s
Iteration  13: 977071.735 ops/s
Iteration  14: 979920.013 ops/s
Iteration  15: 979881.053 ops/s
Iteration  16: 974641.106 ops/s
Iteration  17: 978254.880 ops/s
Iteration  18: 978544.554 ops/s
Iteration  19: 979209.797 ops/s
Iteration  20: 980099.770 ops/s
Iteration  21: 977849.757 ops/s
Iteration  22: 981766.860 ops/s
Iteration  23: 964025.112 ops/s
Iteration  24: 978675.269 ops/s
Iteration  25: 969918.378 ops/s
Iteration  26: 970096.859 ops/s
Iteration  27: 980171.521 ops/s
Iteration  28: 974384.402 ops/s
Iteration  29: 974857.916 ops/s
Iteration  30: 976484.256 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_with":
  975124.099 ±(99.9%) 3446.525 ops/s [Average]
  (min, avg, max) = (962820.557, 975124.099, 981766.860), stdev = 5158.597
  CI (99.9%): [971677.574, 978570.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  975124.099 ± 3446.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625477.872 ops/s
# Warmup Iteration   2: 713001.363 ops/s
# Warmup Iteration   3: 911883.007 ops/s
# Warmup Iteration   4: 927777.244 ops/s
# Warmup Iteration   5: 919008.313 ops/s
# Warmup Iteration   6: 903132.929 ops/s
# Warmup Iteration   7: 923983.636 ops/s
# Warmup Iteration   8: 921738.314 ops/s
# Warmup Iteration   9: 926316.512 ops/s
# Warmup Iteration  10: 784086.268 ops/s
# Warmup Iteration  11: 923816.617 ops/s
# Warmup Iteration  12: 924911.721 ops/s
# Warmup Iteration  13: 914052.004 ops/s
# Warmup Iteration  14: 924260.758 ops/s
# Warmup Iteration  15: 920338.151 ops/s
# Warmup Iteration  16: 915805.146 ops/s
# Warmup Iteration  17: 976146.447 ops/s
# Warmup Iteration  18: 970151.020 ops/s
# Warmup Iteration  19: 974231.110 ops/s
# Warmup Iteration  20: 975461.897 ops/s
# Warmup Iteration  21: 978452.895 ops/s
# Warmup Iteration  22: 957863.485 ops/s
# Warmup Iteration  23: 971937.453 ops/s
# Warmup Iteration  24: 971392.078 ops/s
# Warmup Iteration  25: 966829.934 ops/s
# Warmup Iteration  26: 975881.928 ops/s
# Warmup Iteration  27: 977230.562 ops/s
# Warmup Iteration  28: 966620.370 ops/s
# Warmup Iteration  29: 974275.014 ops/s
# Warmup Iteration  30: 962185.273 ops/s
Iteration   1: 979879.241 ops/s
Iteration   2: 963812.357 ops/s
Iteration   3: 976686.703 ops/s
Iteration   4: 968908.289 ops/s
Iteration   5: 969088.570 ops/s
Iteration   6: 976995.968 ops/s
Iteration   7: 976965.697 ops/s
Iteration   8: 969557.295 ops/s
Iteration   9: 976649.239 ops/s
Iteration  10: 974997.415 ops/s
Iteration  11: 961279.399 ops/s
Iteration  12: 975718.405 ops/s
Iteration  13: 958388.987 ops/s
Iteration  14: 974217.793 ops/s
Iteration  15: 977046.030 ops/s
Iteration  16: 962257.236 ops/s
Iteration  17: 978681.105 ops/s
Iteration  18: 971372.634 ops/s
Iteration  19: 971198.969 ops/s
Iteration  20: 975071.001 ops/s
Iteration  21: 966011.299 ops/s
Iteration  22: 974890.659 ops/s
Iteration  23: 970698.034 ops/s
Iteration  24: 965154.599 ops/s
Iteration  25: 974516.104 ops/s
Iteration  26: 973387.047 ops/s
Iteration  27: 976702.356 ops/s
Iteration  28: 982296.314 ops/s
Iteration  29: 959861.965 ops/s
Iteration  30: 966513.951 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withAll":
  971626.822 ±(99.9%) 4211.168 ops/s [Average]
  (min, avg, max) = (958388.987, 971626.822, 982296.314), stdev = 6303.078
  CI (99.9%): [967415.654, 975837.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  971626.822 ± 4211.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615588.663 ops/s
# Warmup Iteration   2: 716658.831 ops/s
# Warmup Iteration   3: 920064.432 ops/s
# Warmup Iteration   4: 923381.058 ops/s
# Warmup Iteration   5: 912043.643 ops/s
# Warmup Iteration   6: 916495.911 ops/s
# Warmup Iteration   7: 907056.639 ops/s
# Warmup Iteration   8: 920790.416 ops/s
# Warmup Iteration   9: 920247.055 ops/s
# Warmup Iteration  10: 768475.780 ops/s
# Warmup Iteration  11: 922637.516 ops/s
# Warmup Iteration  12: 920487.667 ops/s
# Warmup Iteration  13: 913646.169 ops/s
# Warmup Iteration  14: 916625.637 ops/s
# Warmup Iteration  15: 923032.810 ops/s
# Warmup Iteration  16: 922235.141 ops/s
# Warmup Iteration  17: 981515.753 ops/s
# Warmup Iteration  18: 979893.401 ops/s
# Warmup Iteration  19: 972933.876 ops/s
# Warmup Iteration  20: 976768.678 ops/s
# Warmup Iteration  21: 970812.304 ops/s
# Warmup Iteration  22: 962401.078 ops/s
# Warmup Iteration  23: 982194.102 ops/s
# Warmup Iteration  24: 977562.213 ops/s
# Warmup Iteration  25: 980670.871 ops/s
# Warmup Iteration  26: 982966.807 ops/s
# Warmup Iteration  27: 970479.344 ops/s
# Warmup Iteration  28: 981753.563 ops/s
# Warmup Iteration  29: 981074.879 ops/s
# Warmup Iteration  30: 981394.462 ops/s
Iteration   1: 983956.617 ops/s
Iteration   2: 966703.001 ops/s
Iteration   3: 975522.580 ops/s
Iteration   4: 944192.206 ops/s
Iteration   5: 979247.040 ops/s
Iteration   6: 987648.543 ops/s
Iteration   7: 979208.152 ops/s
Iteration   8: 986445.850 ops/s
Iteration   9: 982290.492 ops/s
Iteration  10: 981535.421 ops/s
Iteration  11: 983018.202 ops/s
Iteration  12: 966393.667 ops/s
Iteration  13: 980960.779 ops/s
Iteration  14: 975732.811 ops/s
Iteration  15: 975627.644 ops/s
Iteration  16: 980261.754 ops/s
Iteration  17: 976947.957 ops/s
Iteration  18: 979837.561 ops/s
Iteration  19: 980652.678 ops/s
Iteration  20: 975445.223 ops/s
Iteration  21: 965674.396 ops/s
Iteration  22: 978214.050 ops/s
Iteration  23: 986253.957 ops/s
Iteration  24: 958293.799 ops/s
Iteration  25: 960241.903 ops/s
Iteration  26: 984461.042 ops/s
Iteration  27: 978243.393 ops/s
Iteration  28: 979647.504 ops/s
Iteration  29: 968501.464 ops/s
Iteration  30: 984361.283 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_without":
  976184.032 ±(99.9%) 6462.365 ops/s [Average]
  (min, avg, max) = (944192.206, 976184.032, 987648.543), stdev = 9672.564
  CI (99.9%): [969721.667, 982646.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  976184.032 ± 6462.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580929.689 ops/s
# Warmup Iteration   2: 649203.301 ops/s
# Warmup Iteration   3: 850419.946 ops/s
# Warmup Iteration   4: 840820.760 ops/s
# Warmup Iteration   5: 838800.615 ops/s
# Warmup Iteration   6: 840847.020 ops/s
# Warmup Iteration   7: 846015.733 ops/s
# Warmup Iteration   8: 845542.240 ops/s
# Warmup Iteration   9: 843948.550 ops/s
# Warmup Iteration  10: 792546.085 ops/s
# Warmup Iteration  11: 750390.778 ops/s
# Warmup Iteration  12: 841131.876 ops/s
# Warmup Iteration  13: 836483.894 ops/s
# Warmup Iteration  14: 847897.090 ops/s
# Warmup Iteration  15: 846137.285 ops/s
# Warmup Iteration  16: 841217.785 ops/s
# Warmup Iteration  17: 888579.061 ops/s
# Warmup Iteration  18: 881754.510 ops/s
# Warmup Iteration  19: 878989.951 ops/s
# Warmup Iteration  20: 882768.628 ops/s
# Warmup Iteration  21: 887017.349 ops/s
# Warmup Iteration  22: 882229.202 ops/s
# Warmup Iteration  23: 886267.576 ops/s
# Warmup Iteration  24: 886903.106 ops/s
# Warmup Iteration  25: 873724.698 ops/s
# Warmup Iteration  26: 880461.040 ops/s
# Warmup Iteration  27: 876665.548 ops/s
# Warmup Iteration  28: 887485.484 ops/s
# Warmup Iteration  29: 882256.498 ops/s
# Warmup Iteration  30: 879957.862 ops/s
Iteration   1: 889931.201 ops/s
Iteration   2: 887043.539 ops/s
Iteration   3: 886414.840 ops/s
Iteration   4: 877343.173 ops/s
Iteration   5: 886919.777 ops/s
Iteration   6: 888507.880 ops/s
Iteration   7: 885112.694 ops/s
Iteration   8: 886541.356 ops/s
Iteration   9: 887688.145 ops/s
Iteration  10: 867875.093 ops/s
Iteration  11: 892446.646 ops/s
Iteration  12: 868201.741 ops/s
Iteration  13: 877663.201 ops/s
Iteration  14: 892497.576 ops/s
Iteration  15: 888661.563 ops/s
Iteration  16: 885187.149 ops/s
Iteration  17: 890197.672 ops/s
Iteration  18: 891349.028 ops/s
Iteration  19: 885295.120 ops/s
Iteration  20: 882267.765 ops/s
Iteration  21: 870623.812 ops/s
Iteration  22: 882984.493 ops/s
Iteration  23: 881612.622 ops/s
Iteration  24: 885198.980 ops/s
Iteration  25: 875508.224 ops/s
Iteration  26: 881658.473 ops/s
Iteration  27: 877040.034 ops/s
Iteration  28: 885882.292 ops/s
Iteration  29: 872833.122 ops/s
Iteration  30: 882737.879 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  883107.503 ±(99.9%) 4604.383 ops/s [Average]
  (min, avg, max) = (867875.093, 883107.503, 892497.576), stdev = 6891.624
  CI (99.9%): [878503.121, 887711.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  883107.503 ± 4604.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489590.786 ops/s
# Warmup Iteration   2: 1044153.764 ops/s
# Warmup Iteration   3: 1192124.673 ops/s
# Warmup Iteration   4: 1177376.139 ops/s
# Warmup Iteration   5: 983118.882 ops/s
# Warmup Iteration   6: 1200601.708 ops/s
# Warmup Iteration   7: 1201721.622 ops/s
# Warmup Iteration   8: 1190706.822 ops/s
# Warmup Iteration   9: 1200698.865 ops/s
# Warmup Iteration  10: 1204594.122 ops/s
# Warmup Iteration  11: 1189798.965 ops/s
# Warmup Iteration  12: 1206118.887 ops/s
# Warmup Iteration  13: 1193223.630 ops/s
# Warmup Iteration  14: 1206174.012 ops/s
# Warmup Iteration  15: 1199587.052 ops/s
# Warmup Iteration  16: 1206176.788 ops/s
# Warmup Iteration  17: 1200614.346 ops/s
# Warmup Iteration  18: 1203954.598 ops/s
# Warmup Iteration  19: 1199913.493 ops/s
# Warmup Iteration  20: 1206871.082 ops/s
# Warmup Iteration  21: 1188539.488 ops/s
# Warmup Iteration  22: 1206258.114 ops/s
# Warmup Iteration  23: 1211609.323 ops/s
# Warmup Iteration  24: 1201191.536 ops/s
# Warmup Iteration  25: 1183865.871 ops/s
# Warmup Iteration  26: 1206079.669 ops/s
# Warmup Iteration  27: 1202719.729 ops/s
# Warmup Iteration  28: 1193447.855 ops/s
# Warmup Iteration  29: 1196215.085 ops/s
# Warmup Iteration  30: 1201072.835 ops/s
Iteration   1: 1191729.336 ops/s
Iteration   2: 1208562.335 ops/s
Iteration   3: 1204801.755 ops/s
Iteration   4: 1209607.880 ops/s
Iteration   5: 1193962.156 ops/s
Iteration   6: 1207879.756 ops/s
Iteration   7: 1205480.682 ops/s
Iteration   8: 1203027.136 ops/s
Iteration   9: 1193748.352 ops/s
Iteration  10: 1209227.826 ops/s
Iteration  11: 1207524.406 ops/s
Iteration  12: 1210231.784 ops/s
Iteration  13: 1146236.536 ops/s
Iteration  14: 1202000.212 ops/s
Iteration  15: 1202867.819 ops/s
Iteration  16: 1199178.815 ops/s
Iteration  17: 1211853.471 ops/s
Iteration  18: 1187081.302 ops/s
Iteration  19: 1187333.654 ops/s
Iteration  20: 1205152.838 ops/s
Iteration  21: 1210443.745 ops/s
Iteration  22: 1205319.470 ops/s
Iteration  23: 1187409.528 ops/s
Iteration  24: 1208502.555 ops/s
Iteration  25: 1202828.445 ops/s
Iteration  26: 1192066.427 ops/s
Iteration  27: 1197022.027 ops/s
Iteration  28: 1210458.919 ops/s
Iteration  29: 1207671.073 ops/s
Iteration  30: 1205191.297 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zip":
  1200480.051 ±(99.9%) 8518.548 ops/s [Average]
  (min, avg, max) = (1146236.536, 1200480.051, 1211853.471), stdev = 12750.163
  CI (99.9%): [1191961.503, 1208998.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  1200480.051 ± 8518.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455640.942 ops/s
# Warmup Iteration   2: 1744445.000 ops/s
# Warmup Iteration   3: 2340529.802 ops/s
# Warmup Iteration   4: 2226276.139 ops/s
# Warmup Iteration   5: 2057765.574 ops/s
# Warmup Iteration   6: 2351956.562 ops/s
# Warmup Iteration   7: 2335861.457 ops/s
# Warmup Iteration   8: 2357079.988 ops/s
# Warmup Iteration   9: 2364246.531 ops/s
# Warmup Iteration  10: 2362545.608 ops/s
# Warmup Iteration  11: 2367948.251 ops/s
# Warmup Iteration  12: 2344914.471 ops/s
# Warmup Iteration  13: 2350480.633 ops/s
# Warmup Iteration  14: 2332753.275 ops/s
# Warmup Iteration  15: 2330584.067 ops/s
# Warmup Iteration  16: 2355433.290 ops/s
# Warmup Iteration  17: 2344809.052 ops/s
# Warmup Iteration  18: 2364986.725 ops/s
# Warmup Iteration  19: 2370782.207 ops/s
# Warmup Iteration  20: 2370369.533 ops/s
# Warmup Iteration  21: 2359595.594 ops/s
# Warmup Iteration  22: 2341321.794 ops/s
# Warmup Iteration  23: 2345153.374 ops/s
# Warmup Iteration  24: 2340246.750 ops/s
# Warmup Iteration  25: 2358949.749 ops/s
# Warmup Iteration  26: 2365312.010 ops/s
# Warmup Iteration  27: 2362044.150 ops/s
# Warmup Iteration  28: 2361270.533 ops/s
# Warmup Iteration  29: 2369242.339 ops/s
# Warmup Iteration  30: 2345872.140 ops/s
Iteration   1: 2308513.922 ops/s
Iteration   2: 2370364.399 ops/s
Iteration   3: 2295214.743 ops/s
Iteration   4: 2369151.217 ops/s
Iteration   5: 2368852.255 ops/s
Iteration   6: 2365936.956 ops/s
Iteration   7: 2361405.674 ops/s
Iteration   8: 2362857.638 ops/s
Iteration   9: 2373051.095 ops/s
Iteration  10: 2362592.743 ops/s
Iteration  11: 2356120.041 ops/s
Iteration  12: 2352635.656 ops/s
Iteration  13: 2369267.967 ops/s
Iteration  14: 2375339.246 ops/s
Iteration  15: 2370311.900 ops/s
Iteration  16: 2373905.927 ops/s
Iteration  17: 2368780.199 ops/s
Iteration  18: 2330219.986 ops/s
Iteration  19: 2353707.429 ops/s
Iteration  20: 2357207.720 ops/s
Iteration  21: 2308344.315 ops/s
Iteration  22: 2367410.274 ops/s
Iteration  23: 2358059.245 ops/s
Iteration  24: 2323180.295 ops/s
Iteration  25: 2363471.555 ops/s
Iteration  26: 2376112.859 ops/s
Iteration  27: 2366258.654 ops/s
Iteration  28: 2372837.933 ops/s
Iteration  29: 2333552.697 ops/s
Iteration  30: 2367408.089 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  2356069.088 ±(99.9%) 14622.129 ops/s [Average]
  (min, avg, max) = (2295214.743, 2356069.088, 2376112.859), stdev = 21885.716
  CI (99.9%): [2341446.959, 2370691.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2356069.088 ± 14622.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1961263.722 ops/s
# Warmup Iteration   2: 4380451.219 ops/s
# Warmup Iteration   3: 3793610.275 ops/s
# Warmup Iteration   4: 4543910.470 ops/s
# Warmup Iteration   5: 4479019.091 ops/s
# Warmup Iteration   6: 4543838.654 ops/s
# Warmup Iteration   7: 4531553.473 ops/s
# Warmup Iteration   8: 4545563.666 ops/s
# Warmup Iteration   9: 4511979.293 ops/s
# Warmup Iteration  10: 4542191.432 ops/s
# Warmup Iteration  11: 4543682.743 ops/s
# Warmup Iteration  12: 4546628.051 ops/s
# Warmup Iteration  13: 4556930.138 ops/s
# Warmup Iteration  14: 4526793.254 ops/s
# Warmup Iteration  15: 4545613.633 ops/s
# Warmup Iteration  16: 4545505.384 ops/s
# Warmup Iteration  17: 4546373.665 ops/s
# Warmup Iteration  18: 4480814.350 ops/s
# Warmup Iteration  19: 4484817.740 ops/s
# Warmup Iteration  20: 4488532.832 ops/s
# Warmup Iteration  21: 4499238.573 ops/s
# Warmup Iteration  22: 4494454.590 ops/s
# Warmup Iteration  23: 4475339.339 ops/s
# Warmup Iteration  24: 4509279.756 ops/s
# Warmup Iteration  25: 4470283.892 ops/s
# Warmup Iteration  26: 4555816.154 ops/s
# Warmup Iteration  27: 4428238.420 ops/s
# Warmup Iteration  28: 4546533.940 ops/s
# Warmup Iteration  29: 4538565.633 ops/s
# Warmup Iteration  30: 4561028.698 ops/s
Iteration   1: 4541002.597 ops/s
Iteration   2: 4432796.920 ops/s
Iteration   3: 4485840.814 ops/s
Iteration   4: 4546135.990 ops/s
Iteration   5: 4546356.704 ops/s
Iteration   6: 4554195.395 ops/s
Iteration   7: 4547144.936 ops/s
Iteration   8: 4560181.179 ops/s
Iteration   9: 4549001.515 ops/s
Iteration  10: 4461933.958 ops/s
Iteration  11: 4545082.720 ops/s
Iteration  12: 4533619.239 ops/s
Iteration  13: 4535999.770 ops/s
Iteration  14: 4522510.602 ops/s
Iteration  15: 4556983.583 ops/s
Iteration  16: 4536511.104 ops/s
Iteration  17: 4556588.693 ops/s
Iteration  18: 4484158.904 ops/s
Iteration  19: 4527635.658 ops/s
Iteration  20: 4565385.875 ops/s
Iteration  21: 4547539.147 ops/s
Iteration  22: 4564128.359 ops/s
Iteration  23: 4550898.954 ops/s
Iteration  24: 4562346.143 ops/s
Iteration  25: 4514875.769 ops/s
Iteration  26: 4557892.973 ops/s
Iteration  27: 4569562.680 ops/s
Iteration  28: 4549970.267 ops/s
Iteration  29: 4555418.700 ops/s
Iteration  30: 4421964.593 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAll":
  4532788.791 ±(99.9%) 25429.385 ops/s [Average]
  (min, avg, max) = (4421964.593, 4532788.791, 4569562.680), stdev = 38061.509
  CI (99.9%): [4507359.407, 4558218.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAll  thrpt   30  4532788.791 ± 25429.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1208688.652 ops/s
# Warmup Iteration   2: 2758483.349 ops/s
# Warmup Iteration   3: 2821040.221 ops/s
# Warmup Iteration   4: 2543357.012 ops/s
# Warmup Iteration   5: 2627834.578 ops/s
# Warmup Iteration   6: 2845056.400 ops/s
# Warmup Iteration   7: 2827463.071 ops/s
# Warmup Iteration   8: 2845273.166 ops/s
# Warmup Iteration   9: 2823570.751 ops/s
# Warmup Iteration  10: 2851267.439 ops/s
# Warmup Iteration  11: 2819852.259 ops/s
# Warmup Iteration  12: 2858190.783 ops/s
# Warmup Iteration  13: 2821475.640 ops/s
# Warmup Iteration  14: 2867286.404 ops/s
# Warmup Iteration  15: 2831483.232 ops/s
# Warmup Iteration  16: 2831038.321 ops/s
# Warmup Iteration  17: 2848240.781 ops/s
# Warmup Iteration  18: 2846847.758 ops/s
# Warmup Iteration  19: 2854170.987 ops/s
# Warmup Iteration  20: 2853070.003 ops/s
# Warmup Iteration  21: 2850983.011 ops/s
# Warmup Iteration  22: 2834280.287 ops/s
# Warmup Iteration  23: 2855488.222 ops/s
# Warmup Iteration  24: 2822766.355 ops/s
# Warmup Iteration  25: 2845832.935 ops/s
# Warmup Iteration  26: 2806540.265 ops/s
# Warmup Iteration  27: 2856505.528 ops/s
# Warmup Iteration  28: 2834996.972 ops/s
# Warmup Iteration  29: 2856011.947 ops/s
# Warmup Iteration  30: 2837280.624 ops/s
Iteration   1: 2828579.755 ops/s
Iteration   2: 2833300.594 ops/s
Iteration   3: 2858537.394 ops/s
Iteration   4: 2856159.347 ops/s
Iteration   5: 2776234.437 ops/s
Iteration   6: 2858248.468 ops/s
Iteration   7: 2843768.003 ops/s
Iteration   8: 2835224.392 ops/s
Iteration   9: 2811178.227 ops/s
Iteration  10: 2861432.852 ops/s
Iteration  11: 2862330.488 ops/s
Iteration  12: 2849317.611 ops/s
Iteration  13: 2864472.060 ops/s
Iteration  14: 2837583.210 ops/s
Iteration  15: 2860407.049 ops/s
Iteration  16: 2798713.871 ops/s
Iteration  17: 2860638.326 ops/s
Iteration  18: 2847277.996 ops/s
Iteration  19: 2865513.917 ops/s
Iteration  20: 2847605.862 ops/s
Iteration  21: 2848106.744 ops/s
Iteration  22: 2855477.440 ops/s
Iteration  23: 2858375.306 ops/s
Iteration  24: 2867678.704 ops/s
Iteration  25: 2854571.404 ops/s
Iteration  26: 2833685.313 ops/s
Iteration  27: 2829211.385 ops/s
Iteration  28: 2858125.039 ops/s
Iteration  29: 2856297.504 ops/s
Iteration  30: 2847544.392 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllAtIndex":
  2845519.903 ±(99.9%) 13881.852 ops/s [Average]
  (min, avg, max) = (2776234.437, 2845519.903, 2867678.704), stdev = 20777.704
  CI (99.9%): [2831638.051, 2859401.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  2845519.903 ± 13881.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539731.875 ops/s
# Warmup Iteration   2: 1325606.901 ops/s
# Warmup Iteration   3: 1320295.124 ops/s
# Warmup Iteration   4: 1109718.491 ops/s
# Warmup Iteration   5: 1326110.187 ops/s
# Warmup Iteration   6: 1328658.188 ops/s
# Warmup Iteration   7: 1327080.599 ops/s
# Warmup Iteration   8: 1325127.736 ops/s
# Warmup Iteration   9: 1312791.481 ops/s
# Warmup Iteration  10: 1325440.124 ops/s
# Warmup Iteration  11: 1326843.924 ops/s
# Warmup Iteration  12: 1321950.436 ops/s
# Warmup Iteration  13: 1320187.768 ops/s
# Warmup Iteration  14: 1319765.964 ops/s
# Warmup Iteration  15: 1325431.254 ops/s
# Warmup Iteration  16: 1308582.943 ops/s
# Warmup Iteration  17: 1327279.852 ops/s
# Warmup Iteration  18: 1320274.645 ops/s
# Warmup Iteration  19: 1302054.849 ops/s
# Warmup Iteration  20: 1316822.493 ops/s
# Warmup Iteration  21: 1326462.125 ops/s
# Warmup Iteration  22: 1329191.049 ops/s
# Warmup Iteration  23: 1334457.271 ops/s
# Warmup Iteration  24: 1321464.313 ops/s
# Warmup Iteration  25: 1327231.458 ops/s
# Warmup Iteration  26: 1329529.764 ops/s
# Warmup Iteration  27: 1325757.576 ops/s
# Warmup Iteration  28: 1303901.535 ops/s
# Warmup Iteration  29: 1329950.799 ops/s
# Warmup Iteration  30: 1332419.006 ops/s
Iteration   1: 1324757.557 ops/s
Iteration   2: 1332949.130 ops/s
Iteration   3: 1329464.055 ops/s
Iteration   4: 1324310.348 ops/s
Iteration   5: 1329762.468 ops/s
Iteration   6: 1328515.044 ops/s
Iteration   7: 1324349.845 ops/s
Iteration   8: 1335798.730 ops/s
Iteration   9: 1308623.147 ops/s
Iteration  10: 1324414.146 ops/s
Iteration  11: 1307851.045 ops/s
Iteration  12: 1329776.202 ops/s
Iteration  13: 1305425.507 ops/s
Iteration  14: 1319818.191 ops/s
Iteration  15: 1324953.539 ops/s
Iteration  16: 1304697.733 ops/s
Iteration  17: 1328210.641 ops/s
Iteration  18: 1320237.694 ops/s
Iteration  19: 1326213.893 ops/s
Iteration  20: 1322667.917 ops/s
Iteration  21: 1329323.160 ops/s
Iteration  22: 1330725.332 ops/s
Iteration  23: 1320848.327 ops/s
Iteration  24: 1311894.816 ops/s
Iteration  25: 1314602.292 ops/s
Iteration  26: 1309641.629 ops/s
Iteration  27: 1329977.028 ops/s
Iteration  28: 1330184.255 ops/s
Iteration  29: 1328841.167 ops/s
Iteration  30: 1303583.738 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable":
  1322080.619 ±(99.9%) 6249.107 ops/s [Average]
  (min, avg, max) = (1303583.738, 1322080.619, 1335798.730), stdev = 9353.369
  CI (99.9%): [1315831.513, 1328329.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1322080.619 ± 6249.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3164167.544 ops/s
# Warmup Iteration   2: 7097580.739 ops/s
# Warmup Iteration   3: 5925912.888 ops/s
# Warmup Iteration   4: 7153330.459 ops/s
# Warmup Iteration   5: 7143564.040 ops/s
# Warmup Iteration   6: 7137890.037 ops/s
# Warmup Iteration   7: 7128136.471 ops/s
# Warmup Iteration   8: 7090981.317 ops/s
# Warmup Iteration   9: 7147107.605 ops/s
# Warmup Iteration  10: 7141447.215 ops/s
# Warmup Iteration  11: 7129119.135 ops/s
# Warmup Iteration  12: 7151133.220 ops/s
# Warmup Iteration  13: 7114921.269 ops/s
# Warmup Iteration  14: 7164588.775 ops/s
# Warmup Iteration  15: 7133983.752 ops/s
# Warmup Iteration  16: 7054555.685 ops/s
# Warmup Iteration  17: 7095981.976 ops/s
# Warmup Iteration  18: 7176447.315 ops/s
# Warmup Iteration  19: 7175295.944 ops/s
# Warmup Iteration  20: 7192077.608 ops/s
# Warmup Iteration  21: 7111938.819 ops/s
# Warmup Iteration  22: 7187012.459 ops/s
# Warmup Iteration  23: 7188753.974 ops/s
# Warmup Iteration  24: 7154023.098 ops/s
# Warmup Iteration  25: 7086804.727 ops/s
# Warmup Iteration  26: 7097205.558 ops/s
# Warmup Iteration  27: 7174925.061 ops/s
# Warmup Iteration  28: 7100959.949 ops/s
# Warmup Iteration  29: 7147216.615 ops/s
# Warmup Iteration  30: 7142311.874 ops/s
Iteration   1: 7188857.670 ops/s
Iteration   2: 7193942.902 ops/s
Iteration   3: 7182667.777 ops/s
Iteration   4: 7158820.523 ops/s
Iteration   5: 7168522.228 ops/s
Iteration   6: 7185000.260 ops/s
Iteration   7: 7171185.230 ops/s
Iteration   8: 7164996.594 ops/s
Iteration   9: 7176398.587 ops/s
Iteration  10: 7111118.207 ops/s
Iteration  11: 7139173.648 ops/s
Iteration  12: 7147565.436 ops/s
Iteration  13: 7160603.346 ops/s
Iteration  14: 7172102.867 ops/s
Iteration  15: 7165843.250 ops/s
Iteration  16: 7064535.627 ops/s
Iteration  17: 7185250.539 ops/s
Iteration  18: 7100577.227 ops/s
Iteration  19: 7145215.263 ops/s
Iteration  20: 7164678.939 ops/s
Iteration  21: 7158290.683 ops/s
Iteration  22: 7100805.452 ops/s
Iteration  23: 7149861.655 ops/s
Iteration  24: 7127731.870 ops/s
Iteration  25: 7050267.359 ops/s
Iteration  26: 7168142.844 ops/s
Iteration  27: 7153630.958 ops/s
Iteration  28: 7086820.756 ops/s
Iteration  29: 7200363.199 ops/s
Iteration  30: 7142596.279 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAtIndex":
  7149518.906 ±(99.9%) 25148.537 ops/s [Average]
  (min, avg, max) = (7050267.359, 7149518.906, 7200363.199), stdev = 37641.149
  CI (99.9%): [7124370.369, 7174667.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_addAtIndex  thrpt   30  7149518.906 ± 25148.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1422412.369 ops/s
# Warmup Iteration   2: 3241451.789 ops/s
# Warmup Iteration   3: 3261900.636 ops/s
# Warmup Iteration   4: 2777788.700 ops/s
# Warmup Iteration   5: 3275622.134 ops/s
# Warmup Iteration   6: 3278588.142 ops/s
# Warmup Iteration   7: 3274236.695 ops/s
# Warmup Iteration   8: 3277278.099 ops/s
# Warmup Iteration   9: 3295389.530 ops/s
# Warmup Iteration  10: 3308837.671 ops/s
# Warmup Iteration  11: 3273750.970 ops/s
# Warmup Iteration  12: 3260591.475 ops/s
# Warmup Iteration  13: 3319314.269 ops/s
# Warmup Iteration  14: 3286882.867 ops/s
# Warmup Iteration  15: 3280669.139 ops/s
# Warmup Iteration  16: 3256410.253 ops/s
# Warmup Iteration  17: 3233030.139 ops/s
# Warmup Iteration  18: 3310384.109 ops/s
# Warmup Iteration  19: 3250701.746 ops/s
# Warmup Iteration  20: 3289750.650 ops/s
# Warmup Iteration  21: 3312062.449 ops/s
# Warmup Iteration  22: 3291610.647 ops/s
# Warmup Iteration  23: 3317273.356 ops/s
# Warmup Iteration  24: 3306222.872 ops/s
# Warmup Iteration  25: 3283108.974 ops/s
# Warmup Iteration  26: 3286839.174 ops/s
# Warmup Iteration  27: 3286013.998 ops/s
# Warmup Iteration  28: 3299612.307 ops/s
# Warmup Iteration  29: 3319320.373 ops/s
# Warmup Iteration  30: 3303045.856 ops/s
Iteration   1: 3303073.253 ops/s
Iteration   2: 3236788.293 ops/s
Iteration   3: 3271631.385 ops/s
Iteration   4: 3299204.366 ops/s
Iteration   5: 3293662.431 ops/s
Iteration   6: 3317029.573 ops/s
Iteration   7: 3333291.699 ops/s
Iteration   8: 3298756.083 ops/s
Iteration   9: 3325421.374 ops/s
Iteration  10: 3249409.401 ops/s
Iteration  11: 3247158.326 ops/s
Iteration  12: 3367472.836 ops/s
Iteration  13: 3335404.899 ops/s
Iteration  14: 3308936.019 ops/s
Iteration  15: 3297176.127 ops/s
Iteration  16: 3322928.542 ops/s
Iteration  17: 3299866.713 ops/s
Iteration  18: 3316729.050 ops/s
Iteration  19: 3246382.999 ops/s
Iteration  20: 3239279.451 ops/s
Iteration  21: 3267247.970 ops/s
Iteration  22: 3320195.953 ops/s
Iteration  23: 3251948.566 ops/s
Iteration  24: 3323232.983 ops/s
Iteration  25: 3189159.069 ops/s
Iteration  26: 3267879.101 ops/s
Iteration  27: 3275739.131 ops/s
Iteration  28: 3311568.512 ops/s
Iteration  29: 3277397.357 ops/s
Iteration  30: 3309642.182 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating":
  3290120.455 ±(99.9%) 25290.695 ops/s [Average]
  (min, avg, max) = (3189159.069, 3290120.455, 3367472.836), stdev = 37853.924
  CI (99.9%): [3264829.760, 3315411.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3290120.455 ± 25290.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1298704.943 ops/s
# Warmup Iteration   2: 3140311.293 ops/s
# Warmup Iteration   3: 2660866.980 ops/s
# Warmup Iteration   4: 3069390.115 ops/s
# Warmup Iteration   5: 3143407.959 ops/s
# Warmup Iteration   6: 3152606.462 ops/s
# Warmup Iteration   7: 3159550.122 ops/s
# Warmup Iteration   8: 3134686.475 ops/s
# Warmup Iteration   9: 3109040.144 ops/s
# Warmup Iteration  10: 3129604.857 ops/s
# Warmup Iteration  11: 3128235.972 ops/s
# Warmup Iteration  12: 3143606.499 ops/s
# Warmup Iteration  13: 3089092.430 ops/s
# Warmup Iteration  14: 3128267.765 ops/s
# Warmup Iteration  15: 3164689.834 ops/s
# Warmup Iteration  16: 3136903.942 ops/s
# Warmup Iteration  17: 3132358.824 ops/s
# Warmup Iteration  18: 3183622.054 ops/s
# Warmup Iteration  19: 3166398.814 ops/s
# Warmup Iteration  20: 3120774.362 ops/s
# Warmup Iteration  21: 3132845.481 ops/s
# Warmup Iteration  22: 3133004.990 ops/s
# Warmup Iteration  23: 3167658.170 ops/s
# Warmup Iteration  24: 3134632.401 ops/s
# Warmup Iteration  25: 3131962.479 ops/s
# Warmup Iteration  26: 3177129.916 ops/s
# Warmup Iteration  27: 3176608.881 ops/s
# Warmup Iteration  28: 3166175.466 ops/s
# Warmup Iteration  29: 3142478.056 ops/s
# Warmup Iteration  30: 3187578.985 ops/s
Iteration   1: 3147625.843 ops/s
Iteration   2: 3117364.729 ops/s
Iteration   3: 3077045.883 ops/s
Iteration   4: 3116966.926 ops/s
Iteration   5: 3165431.260 ops/s
Iteration   6: 3120702.336 ops/s
Iteration   7: 3182920.316 ops/s
Iteration   8: 3172485.963 ops/s
Iteration   9: 3150819.857 ops/s
Iteration  10: 3099274.114 ops/s
Iteration  11: 3179492.716 ops/s
Iteration  12: 3209330.211 ops/s
Iteration  13: 3202093.868 ops/s
Iteration  14: 3173608.903 ops/s
Iteration  15: 3117238.963 ops/s
Iteration  16: 3182511.326 ops/s
Iteration  17: 3159108.923 ops/s
Iteration  18: 3136780.414 ops/s
Iteration  19: 3160511.933 ops/s
Iteration  20: 3156504.375 ops/s
Iteration  21: 3121063.001 ops/s
Iteration  22: 3154200.855 ops/s
Iteration  23: 3195323.563 ops/s
Iteration  24: 3110592.244 ops/s
Iteration  25: 3179408.599 ops/s
Iteration  26: 3191599.129 ops/s
Iteration  27: 3142834.701 ops/s
Iteration  28: 3148421.882 ops/s
Iteration  29: 3163660.513 ops/s
Iteration  30: 3166491.138 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating":
  3153380.483 ±(99.9%) 21550.560 ops/s [Average]
  (min, avg, max) = (3077045.883, 3153380.483, 3209330.211), stdev = 32255.866
  CI (99.9%): [3131829.923, 3174931.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3153380.483 ± 21550.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3744341.121 ops/s
# Warmup Iteration   2: 7587283.399 ops/s
# Warmup Iteration   3: 6491270.409 ops/s
# Warmup Iteration   4: 7664894.800 ops/s
# Warmup Iteration   5: 7633724.922 ops/s
# Warmup Iteration   6: 7664273.914 ops/s
# Warmup Iteration   7: 7688259.113 ops/s
# Warmup Iteration   8: 7639169.599 ops/s
# Warmup Iteration   9: 7648720.122 ops/s
# Warmup Iteration  10: 7673103.203 ops/s
# Warmup Iteration  11: 7615755.407 ops/s
# Warmup Iteration  12: 7620203.112 ops/s
# Warmup Iteration  13: 7550764.083 ops/s
# Warmup Iteration  14: 7657638.772 ops/s
# Warmup Iteration  15: 7632395.871 ops/s
# Warmup Iteration  16: 7635126.216 ops/s
# Warmup Iteration  17: 7752585.618 ops/s
# Warmup Iteration  18: 7776761.794 ops/s
# Warmup Iteration  19: 7683656.883 ops/s
# Warmup Iteration  20: 7665003.488 ops/s
# Warmup Iteration  21: 7741170.157 ops/s
# Warmup Iteration  22: 7718019.727 ops/s
# Warmup Iteration  23: 7733177.802 ops/s
# Warmup Iteration  24: 7696690.213 ops/s
# Warmup Iteration  25: 7749236.472 ops/s
# Warmup Iteration  26: 7704678.412 ops/s
# Warmup Iteration  27: 7774653.990 ops/s
# Warmup Iteration  28: 7777789.470 ops/s
# Warmup Iteration  29: 7727125.861 ops/s
# Warmup Iteration  30: 7789603.609 ops/s
Iteration   1: 7754223.807 ops/s
Iteration   2: 7740342.425 ops/s
Iteration   3: 7611313.444 ops/s
Iteration   4: 7855763.707 ops/s
Iteration   5: 7797521.719 ops/s
Iteration   6: 7719603.092 ops/s
Iteration   7: 7735642.416 ops/s
Iteration   8: 7811706.520 ops/s
Iteration   9: 7748311.191 ops/s
Iteration  10: 7677022.182 ops/s
Iteration  11: 7765581.878 ops/s
Iteration  12: 7688944.606 ops/s
Iteration  13: 7744686.330 ops/s
Iteration  14: 7757618.473 ops/s
Iteration  15: 7772816.397 ops/s
Iteration  16: 7770056.167 ops/s
Iteration  17: 7765755.839 ops/s
Iteration  18: 7799914.059 ops/s
Iteration  19: 7773219.126 ops/s
Iteration  20: 7691104.299 ops/s
Iteration  21: 7797796.957 ops/s
Iteration  22: 7677957.461 ops/s
Iteration  23: 7780570.132 ops/s
Iteration  24: 7779224.565 ops/s
Iteration  25: 7787791.359 ops/s
Iteration  26: 7820185.887 ops/s
Iteration  27: 7787424.481 ops/s
Iteration  28: 7769902.745 ops/s
Iteration  29: 7867313.356 ops/s
Iteration  30: 7705344.190 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy":
  7758488.627 ±(99.9%) 36339.113 ops/s [Average]
  (min, avg, max) = (7611313.444, 7758488.627, 7867313.356), stdev = 54390.678
  CI (99.9%): [7722149.514, 7794827.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy  thrpt   30  7758488.627 ± 36339.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3756357.229 ops/s
# Warmup Iteration   2: 7590889.799 ops/s
# Warmup Iteration   3: 6551116.587 ops/s
# Warmup Iteration   4: 7634393.122 ops/s
# Warmup Iteration   5: 7633160.379 ops/s
# Warmup Iteration   6: 7619377.796 ops/s
# Warmup Iteration   7: 7635618.809 ops/s
# Warmup Iteration   8: 7651613.869 ops/s
# Warmup Iteration   9: 7660558.398 ops/s
# Warmup Iteration  10: 7670150.995 ops/s
# Warmup Iteration  11: 7651056.360 ops/s
# Warmup Iteration  12: 7671106.901 ops/s
# Warmup Iteration  13: 7633295.704 ops/s
# Warmup Iteration  14: 7639243.044 ops/s
# Warmup Iteration  15: 7574021.168 ops/s
# Warmup Iteration  16: 7682358.368 ops/s
# Warmup Iteration  17: 7734655.405 ops/s
# Warmup Iteration  18: 7778065.303 ops/s
# Warmup Iteration  19: 7632126.858 ops/s
# Warmup Iteration  20: 7755303.359 ops/s
# Warmup Iteration  21: 7733772.475 ops/s
# Warmup Iteration  22: 7613840.166 ops/s
# Warmup Iteration  23: 7648956.204 ops/s
# Warmup Iteration  24: 7681063.729 ops/s
# Warmup Iteration  25: 7749328.551 ops/s
# Warmup Iteration  26: 7709667.884 ops/s
# Warmup Iteration  27: 7765223.490 ops/s
# Warmup Iteration  28: 7742043.618 ops/s
# Warmup Iteration  29: 7633276.998 ops/s
# Warmup Iteration  30: 7683007.079 ops/s
Iteration   1: 7725111.481 ops/s
Iteration   2: 7669154.108 ops/s
Iteration   3: 7699351.915 ops/s
Iteration   4: 7707962.732 ops/s
Iteration   5: 7676521.371 ops/s
Iteration   6: 7687609.590 ops/s
Iteration   7: 7601137.158 ops/s
Iteration   8: 7719528.817 ops/s
Iteration   9: 7709433.145 ops/s
Iteration  10: 7759310.864 ops/s
Iteration  11: 7688896.338 ops/s
Iteration  12: 7738331.068 ops/s
Iteration  13: 7572610.571 ops/s
Iteration  14: 7711046.442 ops/s
Iteration  15: 7580255.119 ops/s
Iteration  16: 7665161.828 ops/s
Iteration  17: 7571854.833 ops/s
Iteration  18: 7613463.576 ops/s
Iteration  19: 7687824.249 ops/s
Iteration  20: 7694842.707 ops/s
Iteration  21: 7651034.949 ops/s
Iteration  22: 7733196.636 ops/s
Iteration  23: 7761382.737 ops/s
Iteration  24: 7696856.099 ops/s
Iteration  25: 7717051.679 ops/s
Iteration  26: 7718267.140 ops/s
Iteration  27: 7690056.964 ops/s
Iteration  28: 7768486.538 ops/s
Iteration  29: 7726370.388 ops/s
Iteration  30: 7725216.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith":
  7688910.926 ±(99.9%) 35963.086 ops/s [Average]
  (min, avg, max) = (7571854.833, 7688910.926, 7768486.538), stdev = 53827.857
  CI (99.9%): [7652947.841, 7724874.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  7688910.926 ± 35963.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3560170.974 ops/s
# Warmup Iteration   2: 7689927.824 ops/s
# Warmup Iteration   3: 6516586.387 ops/s
# Warmup Iteration   4: 7687510.481 ops/s
# Warmup Iteration   5: 7723105.413 ops/s
# Warmup Iteration   6: 7614749.004 ops/s
# Warmup Iteration   7: 7744620.149 ops/s
# Warmup Iteration   8: 7622215.301 ops/s
# Warmup Iteration   9: 7779045.208 ops/s
# Warmup Iteration  10: 7757274.769 ops/s
# Warmup Iteration  11: 7741669.441 ops/s
# Warmup Iteration  12: 7755466.892 ops/s
# Warmup Iteration  13: 7738304.247 ops/s
# Warmup Iteration  14: 7752302.376 ops/s
# Warmup Iteration  15: 7751804.597 ops/s
# Warmup Iteration  16: 7745963.359 ops/s
# Warmup Iteration  17: 7853577.355 ops/s
# Warmup Iteration  18: 7688391.065 ops/s
# Warmup Iteration  19: 7817512.886 ops/s
# Warmup Iteration  20: 7827255.169 ops/s
# Warmup Iteration  21: 7786788.470 ops/s
# Warmup Iteration  22: 7828834.872 ops/s
# Warmup Iteration  23: 7819927.199 ops/s
# Warmup Iteration  24: 7798120.681 ops/s
# Warmup Iteration  25: 7845865.729 ops/s
# Warmup Iteration  26: 7851414.716 ops/s
# Warmup Iteration  27: 7854137.241 ops/s
# Warmup Iteration  28: 7775336.119 ops/s
# Warmup Iteration  29: 7592018.540 ops/s
# Warmup Iteration  30: 7774853.769 ops/s
Iteration   1: 7876731.466 ops/s
Iteration   2: 7744795.929 ops/s
Iteration   3: 7827540.718 ops/s
Iteration   4: 7874604.213 ops/s
Iteration   5: 7890388.150 ops/s
Iteration   6: 7851978.645 ops/s
Iteration   7: 7761774.373 ops/s
Iteration   8: 7940419.877 ops/s
Iteration   9: 7850952.057 ops/s
Iteration  10: 7861103.494 ops/s
Iteration  11: 7693060.147 ops/s
Iteration  12: 7848943.562 ops/s
Iteration  13: 7901529.345 ops/s
Iteration  14: 7827026.836 ops/s
Iteration  15: 7716711.980 ops/s
Iteration  16: 7873647.045 ops/s
Iteration  17: 7910752.564 ops/s
Iteration  18: 7855628.310 ops/s
Iteration  19: 7843143.989 ops/s
Iteration  20: 7707383.037 ops/s
Iteration  21: 7779584.694 ops/s
Iteration  22: 7866197.787 ops/s
Iteration  23: 7729036.205 ops/s
Iteration  24: 7870053.803 ops/s
Iteration  25: 7743628.995 ops/s
Iteration  26: 7723117.968 ops/s
Iteration  27: 7803248.504 ops/s
Iteration  28: 7770849.969 ops/s
Iteration  29: 7775665.835 ops/s
Iteration  30: 7811446.479 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy":
  7817698.199 ±(99.9%) 45192.616 ops/s [Average]
  (min, avg, max) = (7693060.147, 7817698.199, 7940419.877), stdev = 67642.185
  CI (99.9%): [7772505.584, 7862890.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy  thrpt   30  7817698.199 ± 45192.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3765916.446 ops/s
# Warmup Iteration   2: 7705869.018 ops/s
# Warmup Iteration   3: 6512936.840 ops/s
# Warmup Iteration   4: 7646339.990 ops/s
# Warmup Iteration   5: 7692247.478 ops/s
# Warmup Iteration   6: 7589529.390 ops/s
# Warmup Iteration   7: 7596041.443 ops/s
# Warmup Iteration   8: 7686944.482 ops/s
# Warmup Iteration   9: 7687911.873 ops/s
# Warmup Iteration  10: 7599335.782 ops/s
# Warmup Iteration  11: 7619818.441 ops/s
# Warmup Iteration  12: 7545420.754 ops/s
# Warmup Iteration  13: 7578502.594 ops/s
# Warmup Iteration  14: 7670985.420 ops/s
# Warmup Iteration  15: 7682985.860 ops/s
# Warmup Iteration  16: 7572235.857 ops/s
# Warmup Iteration  17: 7805617.183 ops/s
# Warmup Iteration  18: 7825021.719 ops/s
# Warmup Iteration  19: 7732790.460 ops/s
# Warmup Iteration  20: 7783222.644 ops/s
# Warmup Iteration  21: 7724591.733 ops/s
# Warmup Iteration  22: 7767604.278 ops/s
# Warmup Iteration  23: 7746382.686 ops/s
# Warmup Iteration  24: 7799999.515 ops/s
# Warmup Iteration  25: 7798360.751 ops/s
# Warmup Iteration  26: 7799207.047 ops/s
# Warmup Iteration  27: 7800350.646 ops/s
# Warmup Iteration  28: 7637381.450 ops/s
# Warmup Iteration  29: 7772928.861 ops/s
# Warmup Iteration  30: 7720616.729 ops/s
Iteration   1: 7791971.579 ops/s
Iteration   2: 7761094.580 ops/s
Iteration   3: 7738253.256 ops/s
Iteration   4: 7799786.408 ops/s
Iteration   5: 7681652.286 ops/s
Iteration   6: 7803000.206 ops/s
Iteration   7: 7559946.017 ops/s
Iteration   8: 7815156.528 ops/s
Iteration   9: 7773532.039 ops/s
Iteration  10: 7773887.496 ops/s
Iteration  11: 7776145.934 ops/s
Iteration  12: 7805592.990 ops/s
Iteration  13: 7780199.878 ops/s
Iteration  14: 7805394.151 ops/s
Iteration  15: 7778048.499 ops/s
Iteration  16: 7767784.258 ops/s
Iteration  17: 7774487.691 ops/s
Iteration  18: 7815237.924 ops/s
Iteration  19: 7827836.381 ops/s
Iteration  20: 7829678.682 ops/s
Iteration  21: 7819554.308 ops/s
Iteration  22: 7613666.022 ops/s
Iteration  23: 7853468.405 ops/s
Iteration  24: 7654108.076 ops/s
Iteration  25: 7789792.203 ops/s
Iteration  26: 7812965.170 ops/s
Iteration  27: 7680899.211 ops/s
Iteration  28: 7704589.271 ops/s
Iteration  29: 7867180.451 ops/s
Iteration  30: 7805661.408 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith":
  7768685.710 ±(99.9%) 46695.146 ops/s [Average]
  (min, avg, max) = (7559946.017, 7768685.710, 7867180.451), stdev = 69891.102
  CI (99.9%): [7721990.564, 7815380.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  7768685.710 ± 46695.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2966922.190 ops/s
# Warmup Iteration   2: 6565223.113 ops/s
# Warmup Iteration   3: 5481436.368 ops/s
# Warmup Iteration   4: 6540797.279 ops/s
# Warmup Iteration   5: 6542588.710 ops/s
# Warmup Iteration   6: 6577325.106 ops/s
# Warmup Iteration   7: 6531455.922 ops/s
# Warmup Iteration   8: 6531635.404 ops/s
# Warmup Iteration   9: 6554843.576 ops/s
# Warmup Iteration  10: 6533952.169 ops/s
# Warmup Iteration  11: 6465508.139 ops/s
# Warmup Iteration  12: 6543400.886 ops/s
# Warmup Iteration  13: 6557506.234 ops/s
# Warmup Iteration  14: 6550411.667 ops/s
# Warmup Iteration  15: 6476576.524 ops/s
# Warmup Iteration  16: 6510098.662 ops/s
# Warmup Iteration  17: 6400282.106 ops/s
# Warmup Iteration  18: 6399087.338 ops/s
# Warmup Iteration  19: 6471120.369 ops/s
# Warmup Iteration  20: 6512448.127 ops/s
# Warmup Iteration  21: 6427793.820 ops/s
# Warmup Iteration  22: 6448003.928 ops/s
# Warmup Iteration  23: 6403100.022 ops/s
# Warmup Iteration  24: 6464181.751 ops/s
# Warmup Iteration  25: 6451356.131 ops/s
# Warmup Iteration  26: 6480964.926 ops/s
# Warmup Iteration  27: 6416402.913 ops/s
# Warmup Iteration  28: 6434398.339 ops/s
# Warmup Iteration  29: 6485522.478 ops/s
# Warmup Iteration  30: 6446296.387 ops/s
Iteration   1: 6428610.861 ops/s
Iteration   2: 6454557.781 ops/s
Iteration   3: 6488123.517 ops/s
Iteration   4: 6468563.527 ops/s
Iteration   5: 6464013.394 ops/s
Iteration   6: 6337349.599 ops/s
Iteration   7: 6459144.219 ops/s
Iteration   8: 6433973.516 ops/s
Iteration   9: 6421816.044 ops/s
Iteration  10: 6435821.081 ops/s
Iteration  11: 6483935.653 ops/s
Iteration  12: 6464958.937 ops/s
Iteration  13: 6511971.537 ops/s
Iteration  14: 6506434.869 ops/s
Iteration  15: 6485376.768 ops/s
Iteration  16: 6481380.465 ops/s
Iteration  17: 6353984.391 ops/s
Iteration  18: 6334399.640 ops/s
Iteration  19: 6507042.959 ops/s
Iteration  20: 6479649.639 ops/s
Iteration  21: 6466189.760 ops/s
Iteration  22: 6358007.674 ops/s
Iteration  23: 6489509.211 ops/s
Iteration  24: 6333526.515 ops/s
Iteration  25: 6483493.424 ops/s
Iteration  26: 6459730.947 ops/s
Iteration  27: 6406577.680 ops/s
Iteration  28: 6457485.291 ops/s
Iteration  29: 6441028.899 ops/s
Iteration  30: 6458937.986 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendString":
  6445186.526 ±(99.9%) 35162.459 ops/s [Average]
  (min, avg, max) = (6333526.515, 6445186.526, 6511971.537), stdev = 52629.518
  CI (99.9%): [6410024.067, 6480348.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendString  thrpt   30  6445186.526 ± 35162.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104312.199 ops/s
# Warmup Iteration   2: 112590.690 ops/s
# Warmup Iteration   3: 131911.973 ops/s
# Warmup Iteration   4: 141004.744 ops/s
# Warmup Iteration   5: 139843.613 ops/s
# Warmup Iteration   6: 140367.091 ops/s
# Warmup Iteration   7: 140297.811 ops/s
# Warmup Iteration   8: 141044.233 ops/s
# Warmup Iteration   9: 141614.580 ops/s
# Warmup Iteration  10: 141121.949 ops/s
# Warmup Iteration  11: 141500.919 ops/s
# Warmup Iteration  12: 141267.434 ops/s
# Warmup Iteration  13: 141610.242 ops/s
# Warmup Iteration  14: 119271.221 ops/s
# Warmup Iteration  15: 141690.171 ops/s
# Warmup Iteration  16: 140567.537 ops/s
# Warmup Iteration  17: 147787.221 ops/s
# Warmup Iteration  18: 147355.570 ops/s
# Warmup Iteration  19: 147941.804 ops/s
# Warmup Iteration  20: 147322.724 ops/s
# Warmup Iteration  21: 148564.295 ops/s
# Warmup Iteration  22: 148277.387 ops/s
# Warmup Iteration  23: 147942.161 ops/s
# Warmup Iteration  24: 145281.181 ops/s
# Warmup Iteration  25: 147215.535 ops/s
# Warmup Iteration  26: 148631.621 ops/s
# Warmup Iteration  27: 148366.554 ops/s
# Warmup Iteration  28: 145590.239 ops/s
# Warmup Iteration  29: 147509.515 ops/s
# Warmup Iteration  30: 147932.404 ops/s
Iteration   1: 144777.289 ops/s
Iteration   2: 146952.285 ops/s
Iteration   3: 146481.323 ops/s
Iteration   4: 148204.626 ops/s
Iteration   5: 147985.565 ops/s
Iteration   6: 145843.999 ops/s
Iteration   7: 147570.860 ops/s
Iteration   8: 145839.966 ops/s
Iteration   9: 145978.040 ops/s
Iteration  10: 148319.911 ops/s
Iteration  11: 145763.337 ops/s
Iteration  12: 148295.575 ops/s
Iteration  13: 148515.658 ops/s
Iteration  14: 147823.379 ops/s
Iteration  15: 148474.854 ops/s
Iteration  16: 148683.127 ops/s
Iteration  17: 148149.624 ops/s
Iteration  18: 148242.346 ops/s
Iteration  19: 145933.036 ops/s
Iteration  20: 145501.549 ops/s
Iteration  21: 145724.299 ops/s
Iteration  22: 148174.923 ops/s
Iteration  23: 148228.081 ops/s
Iteration  24: 145104.573 ops/s
Iteration  25: 148068.134 ops/s
Iteration  26: 148123.585 ops/s
Iteration  27: 147987.513 ops/s
Iteration  28: 147005.195 ops/s
Iteration  29: 147410.290 ops/s
Iteration  30: 147771.184 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows":
  147231.138 ±(99.9%) 799.392 ops/s [Average]
  (min, avg, max) = (144777.289, 147231.138, 148683.127), stdev = 1196.492
  CI (99.9%): [146431.746, 148030.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows  thrpt   30  147231.138 ± 799.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3063724.190 ops/s
# Warmup Iteration   2: 6495666.943 ops/s
# Warmup Iteration   3: 5416482.718 ops/s
# Warmup Iteration   4: 6494278.823 ops/s
# Warmup Iteration   5: 6547538.020 ops/s
# Warmup Iteration   6: 6557907.541 ops/s
# Warmup Iteration   7: 6523848.349 ops/s
# Warmup Iteration   8: 6526380.554 ops/s
# Warmup Iteration   9: 6482182.583 ops/s
# Warmup Iteration  10: 6549077.429 ops/s
# Warmup Iteration  11: 6511785.277 ops/s
# Warmup Iteration  12: 6533372.069 ops/s
# Warmup Iteration  13: 6531872.255 ops/s
# Warmup Iteration  14: 6554771.078 ops/s
# Warmup Iteration  15: 6452863.355 ops/s
# Warmup Iteration  16: 6491460.285 ops/s
# Warmup Iteration  17: 6529795.245 ops/s
# Warmup Iteration  18: 6561301.175 ops/s
# Warmup Iteration  19: 6491632.113 ops/s
# Warmup Iteration  20: 6589546.209 ops/s
# Warmup Iteration  21: 6552815.133 ops/s
# Warmup Iteration  22: 6572682.162 ops/s
# Warmup Iteration  23: 6603646.900 ops/s
# Warmup Iteration  24: 6489937.354 ops/s
# Warmup Iteration  25: 6483171.138 ops/s
# Warmup Iteration  26: 6473270.628 ops/s
# Warmup Iteration  27: 6576244.150 ops/s
# Warmup Iteration  28: 6593870.473 ops/s
# Warmup Iteration  29: 6553751.398 ops/s
# Warmup Iteration  30: 6568582.580 ops/s
Iteration   1: 6580438.726 ops/s
Iteration   2: 6324136.108 ops/s
Iteration   3: 6513843.494 ops/s
Iteration   4: 6572448.964 ops/s
Iteration   5: 6590707.456 ops/s
Iteration   6: 6599525.940 ops/s
Iteration   7: 6599745.220 ops/s
Iteration   8: 6568412.221 ops/s
Iteration   9: 6581696.617 ops/s
Iteration  10: 6596101.005 ops/s
Iteration  11: 6523858.484 ops/s
Iteration  12: 6565519.168 ops/s
Iteration  13: 6591521.422 ops/s
Iteration  14: 6575128.882 ops/s
Iteration  15: 6542637.935 ops/s
Iteration  16: 6560322.124 ops/s
Iteration  17: 6485052.723 ops/s
Iteration  18: 6550064.502 ops/s
Iteration  19: 6588771.790 ops/s
Iteration  20: 6568757.305 ops/s
Iteration  21: 6583359.498 ops/s
Iteration  22: 6477840.253 ops/s
Iteration  23: 6605340.543 ops/s
Iteration  24: 6604345.233 ops/s
Iteration  25: 6557699.231 ops/s
Iteration  26: 6586583.660 ops/s
Iteration  27: 6604293.801 ops/s
Iteration  28: 6476879.203 ops/s
Iteration  29: 6525153.529 ops/s
Iteration  30: 6472829.005 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator":
  6552433.801 ±(99.9%) 39573.268 ops/s [Average]
  (min, avg, max) = (6324136.108, 6552433.801, 6605340.543), stdev = 59231.410
  CI (99.9%): [6512860.533, 6592007.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  6552433.801 ± 39573.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2622481.130 ops/s
# Warmup Iteration   2: 5624301.985 ops/s
# Warmup Iteration   3: 5156741.257 ops/s
# Warmup Iteration   4: 5281273.271 ops/s
# Warmup Iteration   5: 5660120.894 ops/s
# Warmup Iteration   6: 5688726.369 ops/s
# Warmup Iteration   7: 5651458.222 ops/s
# Warmup Iteration   8: 5685310.693 ops/s
# Warmup Iteration   9: 5688286.067 ops/s
# Warmup Iteration  10: 5695168.169 ops/s
# Warmup Iteration  11: 5698266.843 ops/s
# Warmup Iteration  12: 5686666.435 ops/s
# Warmup Iteration  13: 5700054.218 ops/s
# Warmup Iteration  14: 5649694.667 ops/s
# Warmup Iteration  15: 5644843.024 ops/s
# Warmup Iteration  16: 5656857.085 ops/s
# Warmup Iteration  17: 5713576.584 ops/s
# Warmup Iteration  18: 5688344.362 ops/s
# Warmup Iteration  19: 5673524.201 ops/s
# Warmup Iteration  20: 5710899.258 ops/s
# Warmup Iteration  21: 5707921.446 ops/s
# Warmup Iteration  22: 5688110.551 ops/s
# Warmup Iteration  23: 5713721.213 ops/s
# Warmup Iteration  24: 5719770.521 ops/s
# Warmup Iteration  25: 5718539.856 ops/s
# Warmup Iteration  26: 5729465.381 ops/s
# Warmup Iteration  27: 5627199.448 ops/s
# Warmup Iteration  28: 5689823.559 ops/s
# Warmup Iteration  29: 5694892.049 ops/s
# Warmup Iteration  30: 5650807.577 ops/s
Iteration   1: 5634372.648 ops/s
Iteration   2: 5689951.175 ops/s
Iteration   3: 5569176.015 ops/s
Iteration   4: 5598168.336 ops/s
Iteration   5: 5714832.068 ops/s
Iteration   6: 5689746.085 ops/s
Iteration   7: 5723298.695 ops/s
Iteration   8: 5682152.572 ops/s
Iteration   9: 5711352.770 ops/s
Iteration  10: 5688584.126 ops/s
Iteration  11: 5682859.909 ops/s
Iteration  12: 5682673.980 ops/s
Iteration  13: 5600426.328 ops/s
Iteration  14: 5703703.902 ops/s
Iteration  15: 5677703.888 ops/s
Iteration  16: 5700629.111 ops/s
Iteration  17: 5643931.291 ops/s
Iteration  18: 5669626.606 ops/s
Iteration  19: 5665507.815 ops/s
Iteration  20: 5580664.502 ops/s
Iteration  21: 5714217.634 ops/s
Iteration  22: 5624394.429 ops/s
Iteration  23: 5712879.939 ops/s
Iteration  24: 5679171.105 ops/s
Iteration  25: 5658086.281 ops/s
Iteration  26: 5624308.301 ops/s
Iteration  27: 5706651.651 ops/s
Iteration  28: 5685985.722 ops/s
Iteration  29: 5704743.021 ops/s
Iteration  30: 5620207.065 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  5668000.232 ±(99.9%) 28768.699 ops/s [Average]
  (min, avg, max) = (5569176.015, 5668000.232, 5723298.695), stdev = 43059.638
  CI (99.9%): [5639231.533, 5696768.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  5668000.232 ± 28768.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6274445.017 ops/s
# Warmup Iteration   2: 12582742.761 ops/s
# Warmup Iteration   3: 10606803.755 ops/s
# Warmup Iteration   4: 12657899.809 ops/s
# Warmup Iteration   5: 12731419.937 ops/s
# Warmup Iteration   6: 12576233.601 ops/s
# Warmup Iteration   7: 12679571.886 ops/s
# Warmup Iteration   8: 12675179.911 ops/s
# Warmup Iteration   9: 12601093.390 ops/s
# Warmup Iteration  10: 12609267.513 ops/s
# Warmup Iteration  11: 12611191.812 ops/s
# Warmup Iteration  12: 12488113.875 ops/s
# Warmup Iteration  13: 12463066.631 ops/s
# Warmup Iteration  14: 12595596.975 ops/s
# Warmup Iteration  15: 12749026.809 ops/s
# Warmup Iteration  16: 12609903.110 ops/s
# Warmup Iteration  17: 12615124.355 ops/s
# Warmup Iteration  18: 12661902.405 ops/s
# Warmup Iteration  19: 12702257.903 ops/s
# Warmup Iteration  20: 12739961.552 ops/s
# Warmup Iteration  21: 12521239.626 ops/s
# Warmup Iteration  22: 12786912.975 ops/s
# Warmup Iteration  23: 12752979.112 ops/s
# Warmup Iteration  24: 12487597.513 ops/s
# Warmup Iteration  25: 12759368.697 ops/s
# Warmup Iteration  26: 12661146.641 ops/s
# Warmup Iteration  27: 12697676.185 ops/s
# Warmup Iteration  28: 12552949.998 ops/s
# Warmup Iteration  29: 12647646.938 ops/s
# Warmup Iteration  30: 12742240.850 ops/s
Iteration   1: 12683508.038 ops/s
Iteration   2: 12302578.554 ops/s
Iteration   3: 12775183.396 ops/s
Iteration   4: 12586455.403 ops/s
Iteration   5: 12764032.259 ops/s
Iteration   6: 12680759.034 ops/s
Iteration   7: 12723731.408 ops/s
Iteration   8: 12683290.052 ops/s
Iteration   9: 12734364.586 ops/s
Iteration  10: 12702765.682 ops/s
Iteration  11: 12582823.061 ops/s
Iteration  12: 12679916.562 ops/s
Iteration  13: 12731760.977 ops/s
Iteration  14: 12761255.077 ops/s
Iteration  15: 12806591.096 ops/s
Iteration  16: 12762255.686 ops/s
Iteration  17: 12703604.659 ops/s
Iteration  18: 12755329.796 ops/s
Iteration  19: 12749846.045 ops/s
Iteration  20: 12651326.044 ops/s
Iteration  21: 12796063.692 ops/s
Iteration  22: 12772052.564 ops/s
Iteration  23: 12753008.356 ops/s
Iteration  24: 12743865.685 ops/s
Iteration  25: 12645987.383 ops/s
Iteration  26: 12778551.423 ops/s
Iteration  27: 12585173.512 ops/s
Iteration  28: 12752136.801 ops/s
Iteration  29: 12514834.844 ops/s
Iteration  30: 12790692.781 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asLazy":
  12698458.148 ±(99.9%) 69288.892 ops/s [Average]
  (min, avg, max) = (12302578.554, 12698458.148, 12806591.096), stdev = 103708.359
  CI (99.9%): [12629169.257, 12767747.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asLazy  thrpt   30  12698458.148 ± 69288.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2244469.755 ops/s
# Warmup Iteration   2: 4971839.097 ops/s
# Warmup Iteration   3: 4126693.464 ops/s
# Warmup Iteration   4: 4917090.420 ops/s
# Warmup Iteration   5: 4983347.489 ops/s
# Warmup Iteration   6: 4976806.890 ops/s
# Warmup Iteration   7: 4969991.260 ops/s
# Warmup Iteration   8: 4962555.719 ops/s
# Warmup Iteration   9: 4949808.285 ops/s
# Warmup Iteration  10: 4989163.612 ops/s
# Warmup Iteration  11: 4939241.080 ops/s
# Warmup Iteration  12: 4979124.443 ops/s
# Warmup Iteration  13: 4976491.537 ops/s
# Warmup Iteration  14: 4947263.991 ops/s
# Warmup Iteration  15: 4970209.573 ops/s
# Warmup Iteration  16: 4913816.827 ops/s
# Warmup Iteration  17: 4992633.486 ops/s
# Warmup Iteration  18: 4990901.743 ops/s
# Warmup Iteration  19: 4986880.071 ops/s
# Warmup Iteration  20: 5007587.050 ops/s
# Warmup Iteration  21: 4959620.749 ops/s
# Warmup Iteration  22: 4954279.309 ops/s
# Warmup Iteration  23: 4960702.590 ops/s
# Warmup Iteration  24: 4996525.667 ops/s
# Warmup Iteration  25: 4934475.162 ops/s
# Warmup Iteration  26: 4992870.077 ops/s
# Warmup Iteration  27: 4990783.941 ops/s
# Warmup Iteration  28: 4991250.684 ops/s
# Warmup Iteration  29: 4962799.887 ops/s
# Warmup Iteration  30: 4867341.889 ops/s
Iteration   1: 4901442.820 ops/s
Iteration   2: 4979669.177 ops/s
Iteration   3: 4997140.676 ops/s
Iteration   4: 5009914.232 ops/s
Iteration   5: 4994336.121 ops/s
Iteration   6: 4996787.747 ops/s
Iteration   7: 5024083.981 ops/s
Iteration   8: 4980052.499 ops/s
Iteration   9: 4964924.083 ops/s
Iteration  10: 4964008.148 ops/s
Iteration  11: 5008473.163 ops/s
Iteration  12: 4980247.706 ops/s
Iteration  13: 4948895.871 ops/s
Iteration  14: 4984280.929 ops/s
Iteration  15: 4996205.218 ops/s
Iteration  16: 4925279.906 ops/s
Iteration  17: 5034870.743 ops/s
Iteration  18: 4987933.275 ops/s
Iteration  19: 5009373.508 ops/s
Iteration  20: 4995776.308 ops/s
Iteration  21: 4986002.789 ops/s
Iteration  22: 5008401.204 ops/s
Iteration  23: 4868840.252 ops/s
Iteration  24: 5006928.146 ops/s
Iteration  25: 4894001.483 ops/s
Iteration  26: 4921561.281 ops/s
Iteration  27: 4961742.526 ops/s
Iteration  28: 5005852.102 ops/s
Iteration  29: 5011853.835 ops/s
Iteration  30: 4995830.259 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asReversed":
  4978157.000 ±(99.9%) 26728.207 ops/s [Average]
  (min, avg, max) = (4868840.252, 4978157.000, 5034870.743), stdev = 40005.525
  CI (99.9%): [4951428.793, 5004885.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asReversed  thrpt   30  4978157.000 ± 26728.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535950.306 ops/s
# Warmup Iteration   2: 692673.755 ops/s
# Warmup Iteration   3: 834931.771 ops/s
# Warmup Iteration   4: 838400.061 ops/s
# Warmup Iteration   5: 835445.675 ops/s
# Warmup Iteration   6: 834777.266 ops/s
# Warmup Iteration   7: 839733.377 ops/s
# Warmup Iteration   8: 709148.152 ops/s
# Warmup Iteration   9: 844090.234 ops/s
# Warmup Iteration  10: 837106.920 ops/s
# Warmup Iteration  11: 835802.861 ops/s
# Warmup Iteration  12: 840895.891 ops/s
# Warmup Iteration  13: 837375.979 ops/s
# Warmup Iteration  14: 836500.852 ops/s
# Warmup Iteration  15: 841834.406 ops/s
# Warmup Iteration  16: 840099.546 ops/s
# Warmup Iteration  17: 884528.143 ops/s
# Warmup Iteration  18: 877356.071 ops/s
# Warmup Iteration  19: 880281.912 ops/s
# Warmup Iteration  20: 874054.241 ops/s
# Warmup Iteration  21: 869343.960 ops/s
# Warmup Iteration  22: 882317.291 ops/s
# Warmup Iteration  23: 886486.892 ops/s
# Warmup Iteration  24: 882221.774 ops/s
# Warmup Iteration  25: 885944.444 ops/s
# Warmup Iteration  26: 868856.291 ops/s
# Warmup Iteration  27: 885510.426 ops/s
# Warmup Iteration  28: 885065.563 ops/s
# Warmup Iteration  29: 876952.107 ops/s
# Warmup Iteration  30: 877939.688 ops/s
Iteration   1: 879275.013 ops/s
Iteration   2: 883748.781 ops/s
Iteration   3: 884270.858 ops/s
Iteration   4: 885504.142 ops/s
Iteration   5: 870125.418 ops/s
Iteration   6: 883210.387 ops/s
Iteration   7: 881821.061 ops/s
Iteration   8: 883900.049 ops/s
Iteration   9: 885008.265 ops/s
Iteration  10: 886452.118 ops/s
Iteration  11: 885080.375 ops/s
Iteration  12: 870913.223 ops/s
Iteration  13: 882751.268 ops/s
Iteration  14: 882254.607 ops/s
Iteration  15: 886312.010 ops/s
Iteration  16: 871787.027 ops/s
Iteration  17: 881194.728 ops/s
Iteration  18: 888944.043 ops/s
Iteration  19: 884185.558 ops/s
Iteration  20: 880911.649 ops/s
Iteration  21: 871271.106 ops/s
Iteration  22: 864331.254 ops/s
Iteration  23: 881457.985 ops/s
Iteration  24: 881551.722 ops/s
Iteration  25: 882213.627 ops/s
Iteration  26: 884165.420 ops/s
Iteration  27: 883059.769 ops/s
Iteration  28: 882414.684 ops/s
Iteration  29: 875046.744 ops/s
Iteration  30: 877725.439 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized":
  880696.278 ±(99.9%) 3850.255 ops/s [Average]
  (min, avg, max) = (864331.254, 880696.278, 888944.043), stdev = 5762.880
  CI (99.9%): [876846.023, 884546.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized  thrpt   30  880696.278 ± 3850.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 608237.062 ops/s
# Warmup Iteration   2: 704267.901 ops/s
# Warmup Iteration   3: 870370.856 ops/s
# Warmup Iteration   4: 864772.943 ops/s
# Warmup Iteration   5: 865457.502 ops/s
# Warmup Iteration   6: 864171.871 ops/s
# Warmup Iteration   7: 855440.067 ops/s
# Warmup Iteration   8: 870179.118 ops/s
# Warmup Iteration   9: 871989.865 ops/s
# Warmup Iteration  10: 732726.343 ops/s
# Warmup Iteration  11: 867343.998 ops/s
# Warmup Iteration  12: 854205.731 ops/s
# Warmup Iteration  13: 867219.292 ops/s
# Warmup Iteration  14: 867281.732 ops/s
# Warmup Iteration  15: 862672.701 ops/s
# Warmup Iteration  16: 868152.197 ops/s
# Warmup Iteration  17: 898759.776 ops/s
# Warmup Iteration  18: 905654.206 ops/s
# Warmup Iteration  19: 907629.774 ops/s
# Warmup Iteration  20: 913343.468 ops/s
# Warmup Iteration  21: 914494.126 ops/s
# Warmup Iteration  22: 912971.234 ops/s
# Warmup Iteration  23: 912940.001 ops/s
# Warmup Iteration  24: 904727.240 ops/s
# Warmup Iteration  25: 911897.198 ops/s
# Warmup Iteration  26: 910284.678 ops/s
# Warmup Iteration  27: 903562.719 ops/s
# Warmup Iteration  28: 911018.788 ops/s
# Warmup Iteration  29: 912448.632 ops/s
# Warmup Iteration  30: 914446.534 ops/s
Iteration   1: 917948.686 ops/s
Iteration   2: 914474.696 ops/s
Iteration   3: 916966.048 ops/s
Iteration   4: 910231.871 ops/s
Iteration   5: 914313.455 ops/s
Iteration   6: 913290.080 ops/s
Iteration   7: 914890.294 ops/s
Iteration   8: 915402.466 ops/s
Iteration   9: 921191.727 ops/s
Iteration  10: 915833.150 ops/s
Iteration  11: 886533.698 ops/s
Iteration  12: 912157.374 ops/s
Iteration  13: 902507.593 ops/s
Iteration  14: 914214.504 ops/s
Iteration  15: 914634.590 ops/s
Iteration  16: 910617.191 ops/s
Iteration  17: 913858.452 ops/s
Iteration  18: 915811.095 ops/s
Iteration  19: 909362.176 ops/s
Iteration  20: 912929.184 ops/s
Iteration  21: 915250.799 ops/s
Iteration  22: 915417.565 ops/s
Iteration  23: 890269.386 ops/s
Iteration  24: 915179.889 ops/s
Iteration  25: 900701.431 ops/s
Iteration  26: 903901.099 ops/s
Iteration  27: 887469.601 ops/s
Iteration  28: 899805.487 ops/s
Iteration  29: 898516.503 ops/s
Iteration  30: 911869.548 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable":
  909518.321 ±(99.9%) 6101.929 ops/s [Average]
  (min, avg, max) = (886533.698, 909518.321, 921191.727), stdev = 9133.081
  CI (99.9%): [903416.392, 915620.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  909518.321 ± 6101.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2033664.928 ops/s
# Warmup Iteration   2: 3573002.510 ops/s
# Warmup Iteration   3: 3961647.817 ops/s
# Warmup Iteration   4: 3986057.689 ops/s
# Warmup Iteration   5: 3976979.883 ops/s
# Warmup Iteration   6: 3329989.479 ops/s
# Warmup Iteration   7: 4013451.035 ops/s
# Warmup Iteration   8: 3983838.303 ops/s
# Warmup Iteration   9: 4013880.435 ops/s
# Warmup Iteration  10: 4015028.553 ops/s
# Warmup Iteration  11: 4004250.452 ops/s
# Warmup Iteration  12: 3978392.796 ops/s
# Warmup Iteration  13: 3958648.259 ops/s
# Warmup Iteration  14: 4006586.230 ops/s
# Warmup Iteration  15: 3986149.144 ops/s
# Warmup Iteration  16: 4025498.682 ops/s
# Warmup Iteration  17: 4024952.594 ops/s
# Warmup Iteration  18: 3999996.578 ops/s
# Warmup Iteration  19: 3964714.049 ops/s
# Warmup Iteration  20: 4018126.468 ops/s
# Warmup Iteration  21: 4026415.776 ops/s
# Warmup Iteration  22: 4038879.384 ops/s
# Warmup Iteration  23: 4030266.146 ops/s
# Warmup Iteration  24: 4018784.485 ops/s
# Warmup Iteration  25: 4009755.726 ops/s
# Warmup Iteration  26: 4025654.606 ops/s
# Warmup Iteration  27: 3979440.210 ops/s
# Warmup Iteration  28: 4008933.541 ops/s
# Warmup Iteration  29: 4021181.238 ops/s
# Warmup Iteration  30: 4035026.347 ops/s
Iteration   1: 3968165.581 ops/s
Iteration   2: 4032930.890 ops/s
Iteration   3: 4023935.999 ops/s
Iteration   4: 4029606.120 ops/s
Iteration   5: 4015261.941 ops/s
Iteration   6: 4034477.044 ops/s
Iteration   7: 4008751.233 ops/s
Iteration   8: 3905573.320 ops/s
Iteration   9: 4041807.048 ops/s
Iteration  10: 4027480.743 ops/s
Iteration  11: 4016751.808 ops/s
Iteration  12: 4019760.047 ops/s
Iteration  13: 3980737.602 ops/s
Iteration  14: 4017151.093 ops/s
Iteration  15: 3959547.128 ops/s
Iteration  16: 4038056.132 ops/s
Iteration  17: 4025559.463 ops/s
Iteration  18: 4028386.073 ops/s
Iteration  19: 4030859.283 ops/s
Iteration  20: 4029954.092 ops/s
Iteration  21: 4041564.484 ops/s
Iteration  22: 4017464.729 ops/s
Iteration  23: 4037067.803 ops/s
Iteration  24: 4040133.462 ops/s
Iteration  25: 4014051.870 ops/s
Iteration  26: 4040818.786 ops/s
Iteration  27: 4017568.719 ops/s
Iteration  28: 4004592.708 ops/s
Iteration  29: 4027006.355 ops/s
Iteration  30: 4023064.472 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearch":
  4016602.868 ±(99.9%) 19378.406 ops/s [Average]
  (min, avg, max) = (3905573.320, 4016602.868, 4041807.048), stdev = 29004.688
  CI (99.9%): [3997224.461, 4035981.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearch  thrpt   30  4016602.868 ± 19378.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2052008.236 ops/s
# Warmup Iteration   2: 3582272.637 ops/s
# Warmup Iteration   3: 3967304.268 ops/s
# Warmup Iteration   4: 4020905.746 ops/s
# Warmup Iteration   5: 3951641.589 ops/s
# Warmup Iteration   6: 3405262.864 ops/s
# Warmup Iteration   7: 4013474.382 ops/s
# Warmup Iteration   8: 4008803.443 ops/s
# Warmup Iteration   9: 4002398.282 ops/s
# Warmup Iteration  10: 4005979.265 ops/s
# Warmup Iteration  11: 4029037.492 ops/s
# Warmup Iteration  12: 4034271.620 ops/s
# Warmup Iteration  13: 3987299.885 ops/s
# Warmup Iteration  14: 4028263.857 ops/s
# Warmup Iteration  15: 3979792.795 ops/s
# Warmup Iteration  16: 4027402.165 ops/s
# Warmup Iteration  17: 4037208.568 ops/s
# Warmup Iteration  18: 3964345.267 ops/s
# Warmup Iteration  19: 4026390.060 ops/s
# Warmup Iteration  20: 4000850.316 ops/s
# Warmup Iteration  21: 4011256.088 ops/s
# Warmup Iteration  22: 4010450.950 ops/s
# Warmup Iteration  23: 3991551.517 ops/s
# Warmup Iteration  24: 4020369.891 ops/s
# Warmup Iteration  25: 4033841.772 ops/s
# Warmup Iteration  26: 4025839.771 ops/s
# Warmup Iteration  27: 3968872.907 ops/s
# Warmup Iteration  28: 4029848.159 ops/s
# Warmup Iteration  29: 4022871.804 ops/s
# Warmup Iteration  30: 3989423.660 ops/s
Iteration   1: 4015312.246 ops/s
Iteration   2: 4017028.133 ops/s
Iteration   3: 3952488.314 ops/s
Iteration   4: 4040020.242 ops/s
Iteration   5: 4026974.530 ops/s
Iteration   6: 3977505.972 ops/s
Iteration   7: 4036395.482 ops/s
Iteration   8: 3982056.923 ops/s
Iteration   9: 3954368.067 ops/s
Iteration  10: 4018662.424 ops/s
Iteration  11: 3965555.547 ops/s
Iteration  12: 4027420.634 ops/s
Iteration  13: 3942434.046 ops/s
Iteration  14: 4028356.409 ops/s
Iteration  15: 4016458.250 ops/s
Iteration  16: 4036286.857 ops/s
Iteration  17: 4023736.612 ops/s
Iteration  18: 4006339.240 ops/s
Iteration  19: 4034245.128 ops/s
Iteration  20: 4028975.664 ops/s
Iteration  21: 4025189.573 ops/s
Iteration  22: 4009220.156 ops/s
Iteration  23: 4007933.355 ops/s
Iteration  24: 4026921.263 ops/s
Iteration  25: 4028340.990 ops/s
Iteration  26: 4032498.283 ops/s
Iteration  27: 3974738.122 ops/s
Iteration  28: 4020850.937 ops/s
Iteration  29: 4029951.074 ops/s
Iteration  30: 4023869.306 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearchWithComparator":
  4010337.793 ±(99.9%) 18673.451 ops/s [Average]
  (min, avg, max) = (3942434.046, 4010337.793, 4040020.242), stdev = 27949.545
  CI (99.9%): [3991664.341, 4029011.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  4010337.793 ± 18673.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 889085.706 ops/s
# Warmup Iteration   2: 2166023.810 ops/s
# Warmup Iteration   3: 2136372.992 ops/s
# Warmup Iteration   4: 1867443.131 ops/s
# Warmup Iteration   5: 2188532.418 ops/s
# Warmup Iteration   6: 2186355.914 ops/s
# Warmup Iteration   7: 2185947.347 ops/s
# Warmup Iteration   8: 2199792.167 ops/s
# Warmup Iteration   9: 2202734.895 ops/s
# Warmup Iteration  10: 2180089.013 ops/s
# Warmup Iteration  11: 2200934.770 ops/s
# Warmup Iteration  12: 2201505.407 ops/s
# Warmup Iteration  13: 2190833.089 ops/s
# Warmup Iteration  14: 2201062.650 ops/s
# Warmup Iteration  15: 2189278.977 ops/s
# Warmup Iteration  16: 2169125.761 ops/s
# Warmup Iteration  17: 2184273.224 ops/s
# Warmup Iteration  18: 2212892.985 ops/s
# Warmup Iteration  19: 2199861.614 ops/s
# Warmup Iteration  20: 2186103.902 ops/s
# Warmup Iteration  21: 2208196.230 ops/s
# Warmup Iteration  22: 2168723.396 ops/s
# Warmup Iteration  23: 2203870.066 ops/s
# Warmup Iteration  24: 2199282.297 ops/s
# Warmup Iteration  25: 2188216.023 ops/s
# Warmup Iteration  26: 2197189.288 ops/s
# Warmup Iteration  27: 2207942.255 ops/s
# Warmup Iteration  28: 2193757.354 ops/s
# Warmup Iteration  29: 2203703.666 ops/s
# Warmup Iteration  30: 2180241.009 ops/s
Iteration   1: 2173652.106 ops/s
Iteration   2: 2206628.292 ops/s
Iteration   3: 2207338.038 ops/s
Iteration   4: 2205652.237 ops/s
Iteration   5: 2203275.753 ops/s
Iteration   6: 2205467.326 ops/s
Iteration   7: 2205388.312 ops/s
Iteration   8: 2202288.472 ops/s
Iteration   9: 2201171.239 ops/s
Iteration  10: 2160261.257 ops/s
Iteration  11: 2202557.319 ops/s
Iteration  12: 2182888.189 ops/s
Iteration  13: 2203266.553 ops/s
Iteration  14: 2199574.760 ops/s
Iteration  15: 2196227.378 ops/s
Iteration  16: 2189125.362 ops/s
Iteration  17: 2190977.065 ops/s
Iteration  18: 2176806.509 ops/s
Iteration  19: 2207826.599 ops/s
Iteration  20: 2207208.922 ops/s
Iteration  21: 2200186.559 ops/s
Iteration  22: 2192304.237 ops/s
Iteration  23: 2199503.141 ops/s
Iteration  24: 2202583.333 ops/s
Iteration  25: 2198561.958 ops/s
Iteration  26: 2215563.935 ops/s
Iteration  27: 2189400.526 ops/s
Iteration  28: 2200152.132 ops/s
Iteration  29: 2196437.153 ops/s
Iteration  30: 2198490.524 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk":
  2197358.840 ±(99.9%) 7731.180 ops/s [Average]
  (min, avg, max) = (2160261.257, 2197358.840, 2215563.935), stdev = 11571.667
  CI (99.9%): [2189627.660, 2205090.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk  thrpt   30  2197358.840 ± 7731.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5942120.696 ops/s
# Warmup Iteration   2: 11842330.196 ops/s
# Warmup Iteration   3: 10213043.828 ops/s
# Warmup Iteration   4: 11910063.190 ops/s
# Warmup Iteration   5: 11874800.281 ops/s
# Warmup Iteration   6: 12059057.344 ops/s
# Warmup Iteration   7: 12086227.259 ops/s
# Warmup Iteration   8: 11932096.667 ops/s
# Warmup Iteration   9: 11989865.242 ops/s
# Warmup Iteration  10: 12071137.933 ops/s
# Warmup Iteration  11: 12056428.070 ops/s
# Warmup Iteration  12: 11993139.215 ops/s
# Warmup Iteration  13: 11961012.133 ops/s
# Warmup Iteration  14: 11846320.009 ops/s
# Warmup Iteration  15: 12044287.818 ops/s
# Warmup Iteration  16: 11962335.389 ops/s
# Warmup Iteration  17: 12036314.248 ops/s
# Warmup Iteration  18: 12047523.045 ops/s
# Warmup Iteration  19: 11945930.606 ops/s
# Warmup Iteration  20: 12032390.638 ops/s
# Warmup Iteration  21: 12072523.423 ops/s
# Warmup Iteration  22: 11969495.559 ops/s
# Warmup Iteration  23: 12030581.541 ops/s
# Warmup Iteration  24: 11922868.903 ops/s
# Warmup Iteration  25: 12083810.981 ops/s
# Warmup Iteration  26: 12066478.572 ops/s
# Warmup Iteration  27: 11967460.943 ops/s
# Warmup Iteration  28: 11964082.121 ops/s
# Warmup Iteration  29: 12079249.355 ops/s
# Warmup Iteration  30: 12053998.189 ops/s
Iteration   1: 11873144.791 ops/s
Iteration   2: 12017639.171 ops/s
Iteration   3: 12046370.889 ops/s
Iteration   4: 12029372.821 ops/s
Iteration   5: 12070856.466 ops/s
Iteration   6: 11948782.083 ops/s
Iteration   7: 12062017.320 ops/s
Iteration   8: 11834957.132 ops/s
Iteration   9: 12082906.313 ops/s
Iteration  10: 12066026.276 ops/s
Iteration  11: 12052519.969 ops/s
Iteration  12: 12015682.985 ops/s
Iteration  13: 11985807.576 ops/s
Iteration  14: 12039620.739 ops/s
Iteration  15: 11793182.217 ops/s
Iteration  16: 11896172.198 ops/s
Iteration  17: 12032175.700 ops/s
Iteration  18: 12072363.603 ops/s
Iteration  19: 11834673.085 ops/s
Iteration  20: 12053544.003 ops/s
Iteration  21: 11785800.183 ops/s
Iteration  22: 12024474.194 ops/s
Iteration  23: 12003158.643 ops/s
Iteration  24: 12011137.558 ops/s
Iteration  25: 11820164.881 ops/s
Iteration  26: 12012779.712 ops/s
Iteration  27: 12024019.539 ops/s
Iteration  28: 12107717.948 ops/s
Iteration  29: 11977434.514 ops/s
Iteration  30: 12084978.642 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty":
  11988649.372 ±(99.9%) 63181.324 ops/s [Average]
  (min, avg, max) = (11785800.183, 11988649.372, 12107717.948), stdev = 94566.838
  CI (99.9%): [11925468.048, 12051830.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty  thrpt   30  11988649.372 ± 63181.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3897709.087 ops/s
# Warmup Iteration   2: 8143791.101 ops/s
# Warmup Iteration   3: 6890677.657 ops/s
# Warmup Iteration   4: 8240123.848 ops/s
# Warmup Iteration   5: 8245148.041 ops/s
# Warmup Iteration   6: 8308669.123 ops/s
# Warmup Iteration   7: 8291896.191 ops/s
# Warmup Iteration   8: 8275267.533 ops/s
# Warmup Iteration   9: 8315522.458 ops/s
# Warmup Iteration  10: 8295908.926 ops/s
# Warmup Iteration  11: 8314691.863 ops/s
# Warmup Iteration  12: 8236328.390 ops/s
# Warmup Iteration  13: 8323704.846 ops/s
# Warmup Iteration  14: 8299473.892 ops/s
# Warmup Iteration  15: 8254648.516 ops/s
# Warmup Iteration  16: 8172678.609 ops/s
# Warmup Iteration  17: 8270271.488 ops/s
# Warmup Iteration  18: 8345709.946 ops/s
# Warmup Iteration  19: 8280482.647 ops/s
# Warmup Iteration  20: 8349203.058 ops/s
# Warmup Iteration  21: 8353301.928 ops/s
# Warmup Iteration  22: 8355093.920 ops/s
# Warmup Iteration  23: 8335134.736 ops/s
# Warmup Iteration  24: 8335583.195 ops/s
# Warmup Iteration  25: 8210130.555 ops/s
# Warmup Iteration  26: 8252061.361 ops/s
# Warmup Iteration  27: 8246267.054 ops/s
# Warmup Iteration  28: 8283395.301 ops/s
# Warmup Iteration  29: 8238585.574 ops/s
# Warmup Iteration  30: 8364972.996 ops/s
Iteration   1: 8359843.700 ops/s
Iteration   2: 8331823.353 ops/s
Iteration   3: 8214638.958 ops/s
Iteration   4: 8214922.483 ops/s
Iteration   5: 8364418.966 ops/s
Iteration   6: 8326630.123 ops/s
Iteration   7: 8342316.174 ops/s
Iteration   8: 8278003.142 ops/s
Iteration   9: 8321368.965 ops/s
Iteration  10: 8320991.737 ops/s
Iteration  11: 8172032.271 ops/s
Iteration  12: 8312111.187 ops/s
Iteration  13: 8332796.761 ops/s
Iteration  14: 8291748.363 ops/s
Iteration  15: 8288306.687 ops/s
Iteration  16: 8330641.295 ops/s
Iteration  17: 8192952.278 ops/s
Iteration  18: 8350395.220 ops/s
Iteration  19: 8176949.334 ops/s
Iteration  20: 8380958.787 ops/s
Iteration  21: 7930073.075 ops/s
Iteration  22: 8276581.443 ops/s
Iteration  23: 8124217.007 ops/s
Iteration  24: 8349191.170 ops/s
Iteration  25: 8306410.720 ops/s
Iteration  26: 8268381.992 ops/s
Iteration  27: 8331218.250 ops/s
Iteration  28: 8330966.718 ops/s
Iteration  29: 8332914.687 ops/s
Iteration  30: 8329169.051 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size":
  8282765.797 ±(99.9%) 61821.165 ops/s [Average]
  (min, avg, max) = (7930073.075, 8282765.797, 8380958.787), stdev = 92531.017
  CI (99.9%): [8220944.631, 8344586.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size  thrpt   30  8282765.797 ± 61821.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3856352.530 ops/s
# Warmup Iteration   2: 8984375.329 ops/s
# Warmup Iteration   3: 7479359.439 ops/s
# Warmup Iteration   4: 9068154.992 ops/s
# Warmup Iteration   5: 9199589.911 ops/s
# Warmup Iteration   6: 9147852.614 ops/s
# Warmup Iteration   7: 9104446.529 ops/s
# Warmup Iteration   8: 9154659.598 ops/s
# Warmup Iteration   9: 9209412.659 ops/s
# Warmup Iteration  10: 9073549.467 ops/s
# Warmup Iteration  11: 9120411.310 ops/s
# Warmup Iteration  12: 9219920.649 ops/s
# Warmup Iteration  13: 9203256.660 ops/s
# Warmup Iteration  14: 9194402.663 ops/s
# Warmup Iteration  15: 9083700.494 ops/s
# Warmup Iteration  16: 9120876.085 ops/s
# Warmup Iteration  17: 9146976.991 ops/s
# Warmup Iteration  18: 9121767.332 ops/s
# Warmup Iteration  19: 9192682.148 ops/s
# Warmup Iteration  20: 9203844.863 ops/s
# Warmup Iteration  21: 9208909.764 ops/s
# Warmup Iteration  22: 9220951.533 ops/s
# Warmup Iteration  23: 9244229.292 ops/s
# Warmup Iteration  24: 9161813.791 ops/s
# Warmup Iteration  25: 9108885.019 ops/s
# Warmup Iteration  26: 9065113.088 ops/s
# Warmup Iteration  27: 9201665.616 ops/s
# Warmup Iteration  28: 9226815.975 ops/s
# Warmup Iteration  29: 9250815.404 ops/s
# Warmup Iteration  30: 9211396.864 ops/s
Iteration   1: 9241272.132 ops/s
Iteration   2: 9165993.636 ops/s
Iteration   3: 9152504.684 ops/s
Iteration   4: 9210996.925 ops/s
Iteration   5: 9070034.114 ops/s
Iteration   6: 9193666.098 ops/s
Iteration   7: 9200374.162 ops/s
Iteration   8: 9105312.002 ops/s
Iteration   9: 9253954.513 ops/s
Iteration  10: 9197352.072 ops/s
Iteration  11: 9255845.418 ops/s
Iteration  12: 9245118.877 ops/s
Iteration  13: 9207201.682 ops/s
Iteration  14: 9233184.178 ops/s
Iteration  15: 9065116.713 ops/s
Iteration  16: 9199721.006 ops/s
Iteration  17: 9236890.565 ops/s
Iteration  18: 9150028.983 ops/s
Iteration  19: 9228871.662 ops/s
Iteration  20: 9039532.778 ops/s
Iteration  21: 9251291.423 ops/s
Iteration  22: 9159036.884 ops/s
Iteration  23: 9238085.438 ops/s
Iteration  24: 9069852.554 ops/s
Iteration  25: 9224847.136 ops/s
Iteration  26: 9207986.663 ops/s
Iteration  27: 9253657.961 ops/s
Iteration  28: 9192417.704 ops/s
Iteration  29: 9177568.665 ops/s
Iteration  30: 9210271.396 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_single":
  9187932.934 ±(99.9%) 41436.739 ops/s [Average]
  (min, avg, max) = (9039532.778, 9187932.934, 9255845.418), stdev = 62020.566
  CI (99.9%): [9146496.195, 9229369.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_single  thrpt   30  9187932.934 ± 41436.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626164.118 ops/s
# Warmup Iteration   2: 732499.731 ops/s
# Warmup Iteration   3: 911025.488 ops/s
# Warmup Iteration   4: 907392.813 ops/s
# Warmup Iteration   5: 904994.984 ops/s
# Warmup Iteration   6: 907602.522 ops/s
# Warmup Iteration   7: 909906.468 ops/s
# Warmup Iteration   8: 909188.647 ops/s
# Warmup Iteration   9: 902576.651 ops/s
# Warmup Iteration  10: 765013.986 ops/s
# Warmup Iteration  11: 907323.296 ops/s
# Warmup Iteration  12: 897876.539 ops/s
# Warmup Iteration  13: 902947.166 ops/s
# Warmup Iteration  14: 910192.385 ops/s
# Warmup Iteration  15: 910721.371 ops/s
# Warmup Iteration  16: 906116.294 ops/s
# Warmup Iteration  17: 968430.306 ops/s
# Warmup Iteration  18: 969568.947 ops/s
# Warmup Iteration  19: 970174.761 ops/s
# Warmup Iteration  20: 967304.244 ops/s
# Warmup Iteration  21: 962617.628 ops/s
# Warmup Iteration  22: 962964.977 ops/s
# Warmup Iteration  23: 966628.070 ops/s
# Warmup Iteration  24: 956244.244 ops/s
# Warmup Iteration  25: 970618.854 ops/s
# Warmup Iteration  26: 968737.731 ops/s
# Warmup Iteration  27: 968131.326 ops/s
# Warmup Iteration  28: 963974.969 ops/s
# Warmup Iteration  29: 961180.730 ops/s
# Warmup Iteration  30: 961079.308 ops/s
Iteration   1: 970028.233 ops/s
Iteration   2: 970686.668 ops/s
Iteration   3: 965772.859 ops/s
Iteration   4: 963696.153 ops/s
Iteration   5: 963526.092 ops/s
Iteration   6: 969592.962 ops/s
Iteration   7: 952297.819 ops/s
Iteration   8: 952478.112 ops/s
Iteration   9: 965741.172 ops/s
Iteration  10: 962530.449 ops/s
Iteration  11: 969091.589 ops/s
Iteration  12: 969501.005 ops/s
Iteration  13: 973623.468 ops/s
Iteration  14: 970879.542 ops/s
Iteration  15: 971997.853 ops/s
Iteration  16: 970565.566 ops/s
Iteration  17: 946533.292 ops/s
Iteration  18: 957879.150 ops/s
Iteration  19: 970728.709 ops/s
Iteration  20: 971835.122 ops/s
Iteration  21: 956562.964 ops/s
Iteration  22: 954660.850 ops/s
Iteration  23: 953901.777 ops/s
Iteration  24: 972502.781 ops/s
Iteration  25: 950308.405 ops/s
Iteration  26: 972724.467 ops/s
Iteration  27: 965546.982 ops/s
Iteration  28: 970245.581 ops/s
Iteration  29: 968622.005 ops/s
Iteration  30: 952608.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws":
  964222.329 ±(99.9%) 5428.512 ops/s [Average]
  (min, avg, max) = (946533.292, 964222.329, 973623.468), stdev = 8125.142
  CI (99.9%): [958793.817, 969650.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  964222.329 ± 5428.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4619886.115 ops/s
# Warmup Iteration   2: 9298269.536 ops/s
# Warmup Iteration   3: 8502150.172 ops/s
# Warmup Iteration   4: 9709194.264 ops/s
# Warmup Iteration   5: 9692460.697 ops/s
# Warmup Iteration   6: 9757911.012 ops/s
# Warmup Iteration   7: 9721916.681 ops/s
# Warmup Iteration   8: 9691671.280 ops/s
# Warmup Iteration   9: 9696239.884 ops/s
# Warmup Iteration  10: 9673634.024 ops/s
# Warmup Iteration  11: 9721522.327 ops/s
# Warmup Iteration  12: 9632000.162 ops/s
# Warmup Iteration  13: 9735532.732 ops/s
# Warmup Iteration  14: 9737151.932 ops/s
# Warmup Iteration  15: 9668761.370 ops/s
# Warmup Iteration  16: 9649848.274 ops/s
# Warmup Iteration  17: 9796856.638 ops/s
# Warmup Iteration  18: 9770737.218 ops/s
# Warmup Iteration  19: 9753306.361 ops/s
# Warmup Iteration  20: 9783433.678 ops/s
# Warmup Iteration  21: 9688473.467 ops/s
# Warmup Iteration  22: 9623082.686 ops/s
# Warmup Iteration  23: 9803782.031 ops/s
# Warmup Iteration  24: 9754077.929 ops/s
# Warmup Iteration  25: 9814102.110 ops/s
# Warmup Iteration  26: 9843464.127 ops/s
# Warmup Iteration  27: 9723683.303 ops/s
# Warmup Iteration  28: 9741698.818 ops/s
# Warmup Iteration  29: 9699915.831 ops/s
# Warmup Iteration  30: 9785735.695 ops/s
Iteration   1: 9776899.612 ops/s
Iteration   2: 9780794.745 ops/s
Iteration   3: 9459878.698 ops/s
Iteration   4: 9744586.565 ops/s
Iteration   5: 9745690.358 ops/s
Iteration   6: 9736997.900 ops/s
Iteration   7: 9794952.566 ops/s
Iteration   8: 9727849.336 ops/s
Iteration   9: 9731678.941 ops/s
Iteration  10: 9701537.683 ops/s
Iteration  11: 9743446.905 ops/s
Iteration  12: 9510446.189 ops/s
Iteration  13: 9574093.589 ops/s
Iteration  14: 9731495.297 ops/s
Iteration  15: 9781064.826 ops/s
Iteration  16: 9817158.459 ops/s
Iteration  17: 9619828.492 ops/s
Iteration  18: 9609570.351 ops/s
Iteration  19: 9678939.828 ops/s
Iteration  20: 9578668.562 ops/s
Iteration  21: 9614819.528 ops/s
Iteration  22: 9760048.499 ops/s
Iteration  23: 9702518.362 ops/s
Iteration  24: 9796248.791 ops/s
Iteration  25: 9377030.201 ops/s
Iteration  26: 9743094.064 ops/s
Iteration  27: 9808010.824 ops/s
Iteration  28: 9676654.779 ops/s
Iteration  29: 9767322.582 ops/s
Iteration  30: 9774526.277 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_clear":
  9695528.427 ±(99.9%) 72242.735 ops/s [Average]
  (min, avg, max) = (9377030.201, 9695528.427, 9817158.459), stdev = 108129.533
  CI (99.9%): [9623285.692, 9767771.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_clear  thrpt   30  9695528.427 ± 72242.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 926099.124 ops/s
# Warmup Iteration   2: 2052309.572 ops/s
# Warmup Iteration   3: 1857326.203 ops/s
# Warmup Iteration   4: 2068842.152 ops/s
# Warmup Iteration   5: 2132791.754 ops/s
# Warmup Iteration   6: 2118258.436 ops/s
# Warmup Iteration   7: 2124623.651 ops/s
# Warmup Iteration   8: 2128675.634 ops/s
# Warmup Iteration   9: 2137612.841 ops/s
# Warmup Iteration  10: 2126872.418 ops/s
# Warmup Iteration  11: 2123820.307 ops/s
# Warmup Iteration  12: 2127796.863 ops/s
# Warmup Iteration  13: 2132326.879 ops/s
# Warmup Iteration  14: 2134976.891 ops/s
# Warmup Iteration  15: 2135495.986 ops/s
# Warmup Iteration  16: 2136429.428 ops/s
# Warmup Iteration  17: 2107975.415 ops/s
# Warmup Iteration  18: 2135995.162 ops/s
# Warmup Iteration  19: 2127885.628 ops/s
# Warmup Iteration  20: 2129747.053 ops/s
# Warmup Iteration  21: 2087912.420 ops/s
# Warmup Iteration  22: 2128118.803 ops/s
# Warmup Iteration  23: 2120657.658 ops/s
# Warmup Iteration  24: 2157397.887 ops/s
# Warmup Iteration  25: 2136326.417 ops/s
# Warmup Iteration  26: 2136365.601 ops/s
# Warmup Iteration  27: 2140512.746 ops/s
# Warmup Iteration  28: 2077233.790 ops/s
# Warmup Iteration  29: 2068166.498 ops/s
# Warmup Iteration  30: 2073260.339 ops/s
Iteration   1: 2170741.733 ops/s
Iteration   2: 2124351.847 ops/s
Iteration   3: 2094963.194 ops/s
Iteration   4: 2143203.816 ops/s
Iteration   5: 2097429.315 ops/s
Iteration   6: 2158629.761 ops/s
Iteration   7: 2119176.015 ops/s
Iteration   8: 2158840.279 ops/s
Iteration   9: 2098419.208 ops/s
Iteration  10: 2131901.957 ops/s
Iteration  11: 2129605.924 ops/s
Iteration  12: 2105372.250 ops/s
Iteration  13: 2138004.558 ops/s
Iteration  14: 2123583.880 ops/s
Iteration  15: 2156180.883 ops/s
Iteration  16: 2154357.989 ops/s
Iteration  17: 2139206.162 ops/s
Iteration  18: 2122593.159 ops/s
Iteration  19: 2116259.361 ops/s
Iteration  20: 2143081.987 ops/s
Iteration  21: 2079271.828 ops/s
Iteration  22: 2144925.271 ops/s
Iteration  23: 2111029.747 ops/s
Iteration  24: 2142303.980 ops/s
Iteration  25: 2136471.995 ops/s
Iteration  26: 2169616.492 ops/s
Iteration  27: 2132132.121 ops/s
Iteration  28: 2126188.832 ops/s
Iteration  29: 2161511.089 ops/s
Iteration  30: 2135187.132 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collect":
  2132151.392 ±(99.9%) 15312.476 ops/s [Average]
  (min, avg, max) = (2079271.828, 2132151.392, 2170741.733), stdev = 22918.995
  CI (99.9%): [2116838.916, 2147463.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collect  thrpt   30  2132151.392 ± 15312.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1015353.842 ops/s
# Warmup Iteration   2: 3327197.526 ops/s
# Warmup Iteration   3: 3192919.148 ops/s
# Warmup Iteration   4: 2933598.236 ops/s
# Warmup Iteration   5: 3324323.200 ops/s
# Warmup Iteration   6: 3325708.646 ops/s
# Warmup Iteration   7: 3344809.906 ops/s
# Warmup Iteration   8: 3326116.312 ops/s
# Warmup Iteration   9: 3309929.210 ops/s
# Warmup Iteration  10: 3344323.885 ops/s
# Warmup Iteration  11: 3326048.858 ops/s
# Warmup Iteration  12: 3338897.309 ops/s
# Warmup Iteration  13: 3345502.417 ops/s
# Warmup Iteration  14: 3328806.950 ops/s
# Warmup Iteration  15: 3350975.485 ops/s
# Warmup Iteration  16: 3341380.587 ops/s
# Warmup Iteration  17: 3356774.982 ops/s
# Warmup Iteration  18: 3344784.239 ops/s
# Warmup Iteration  19: 3336724.521 ops/s
# Warmup Iteration  20: 3368229.711 ops/s
# Warmup Iteration  21: 3361223.989 ops/s
# Warmup Iteration  22: 3342068.208 ops/s
# Warmup Iteration  23: 3345100.940 ops/s
# Warmup Iteration  24: 3309979.045 ops/s
# Warmup Iteration  25: 3369307.714 ops/s
# Warmup Iteration  26: 3370129.141 ops/s
# Warmup Iteration  27: 3332043.680 ops/s
# Warmup Iteration  28: 3363683.220 ops/s
# Warmup Iteration  29: 3364068.454 ops/s
# Warmup Iteration  30: 3369619.548 ops/s
Iteration   1: 3371377.688 ops/s
Iteration   2: 3313485.464 ops/s
Iteration   3: 3379407.267 ops/s
Iteration   4: 3309890.112 ops/s
Iteration   5: 3310360.086 ops/s
Iteration   6: 3367260.579 ops/s
Iteration   7: 3291465.642 ops/s
Iteration   8: 3358441.402 ops/s
Iteration   9: 3353980.958 ops/s
Iteration  10: 3334651.813 ops/s
Iteration  11: 3360177.393 ops/s
Iteration  12: 3316773.098 ops/s
Iteration  13: 3361855.676 ops/s
Iteration  14: 3365633.582 ops/s
Iteration  15: 3369939.055 ops/s
Iteration  16: 3376022.980 ops/s
Iteration  17: 3356135.131 ops/s
Iteration  18: 3306051.732 ops/s
Iteration  19: 3358096.299 ops/s
Iteration  20: 3343535.955 ops/s
Iteration  21: 3314025.766 ops/s
Iteration  22: 3366757.931 ops/s
Iteration  23: 3333368.786 ops/s
Iteration  24: 3376238.187 ops/s
Iteration  25: 3373707.604 ops/s
Iteration  26: 3376408.123 ops/s
Iteration  27: 3199102.778 ops/s
Iteration  28: 3367435.632 ops/s
Iteration  29: 3367959.518 ops/s
Iteration  30: 3264775.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean":
  3341477.377 ±(99.9%) 26869.857 ops/s [Average]
  (min, avg, max) = (3199102.778, 3341477.377, 3379407.267), stdev = 40217.540
  CI (99.9%): [3314607.520, 3368347.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean  thrpt   30  3341477.377 ± 26869.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7383049.243 ops/s
# Warmup Iteration   2: 14970718.699 ops/s
# Warmup Iteration   3: 12573322.344 ops/s
# Warmup Iteration   4: 14942574.049 ops/s
# Warmup Iteration   5: 14860248.342 ops/s
# Warmup Iteration   6: 14861278.211 ops/s
# Warmup Iteration   7: 14654709.758 ops/s
# Warmup Iteration   8: 14725650.617 ops/s
# Warmup Iteration   9: 14948986.816 ops/s
# Warmup Iteration  10: 15034323.067 ops/s
# Warmup Iteration  11: 14828713.129 ops/s
# Warmup Iteration  12: 14829400.339 ops/s
# Warmup Iteration  13: 14962205.109 ops/s
# Warmup Iteration  14: 15002100.532 ops/s
# Warmup Iteration  15: 14913172.107 ops/s
# Warmup Iteration  16: 15003601.156 ops/s
# Warmup Iteration  17: 15059956.847 ops/s
# Warmup Iteration  18: 15181400.733 ops/s
# Warmup Iteration  19: 15241432.723 ops/s
# Warmup Iteration  20: 15199822.451 ops/s
# Warmup Iteration  21: 15091711.436 ops/s
# Warmup Iteration  22: 15164368.044 ops/s
# Warmup Iteration  23: 15250085.874 ops/s
# Warmup Iteration  24: 15078847.388 ops/s
# Warmup Iteration  25: 15203788.055 ops/s
# Warmup Iteration  26: 15196770.363 ops/s
# Warmup Iteration  27: 15188453.702 ops/s
# Warmup Iteration  28: 15084959.974 ops/s
# Warmup Iteration  29: 15125859.619 ops/s
# Warmup Iteration  30: 15093914.683 ops/s
Iteration   1: 15149976.053 ops/s
Iteration   2: 15132356.668 ops/s
Iteration   3: 15308986.034 ops/s
Iteration   4: 15156997.250 ops/s
Iteration   5: 15153515.247 ops/s
Iteration   6: 15264933.050 ops/s
Iteration   7: 14933674.858 ops/s
Iteration   8: 15183550.531 ops/s
Iteration   9: 15229503.322 ops/s
Iteration  10: 15110294.063 ops/s
Iteration  11: 15333243.263 ops/s
Iteration  12: 15224982.818 ops/s
Iteration  13: 15039631.724 ops/s
Iteration  14: 15347042.335 ops/s
Iteration  15: 15240953.953 ops/s
Iteration  16: 15001363.230 ops/s
Iteration  17: 14914541.997 ops/s
Iteration  18: 15101878.687 ops/s
Iteration  19: 15141812.356 ops/s
Iteration  20: 15207872.210 ops/s
Iteration  21: 15188534.113 ops/s
Iteration  22: 15140493.687 ops/s
Iteration  23: 15121216.095 ops/s
Iteration  24: 15230365.460 ops/s
Iteration  25: 15106114.347 ops/s
Iteration  26: 15073366.519 ops/s
Iteration  27: 15251367.421 ops/s
Iteration  28: 15200395.451 ops/s
Iteration  29: 15054007.206 ops/s
Iteration  30: 15212983.700 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  15158531.788 ±(99.9%) 69840.962 ops/s [Average]
  (min, avg, max) = (14914541.997, 15158531.788, 15347042.335), stdev = 104534.671
  CI (99.9%): [15088690.827, 15228372.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt         Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  15158531.788 ± 69840.962  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3845676.994 ops/s
# Warmup Iteration   2: 8403181.963 ops/s
# Warmup Iteration   3: 7078836.400 ops/s
# Warmup Iteration   4: 8341517.657 ops/s
# Warmup Iteration   5: 8402893.743 ops/s
# Warmup Iteration   6: 8286273.379 ops/s
# Warmup Iteration   7: 8392297.869 ops/s
# Warmup Iteration   8: 8395978.433 ops/s
# Warmup Iteration   9: 8364534.993 ops/s
# Warmup Iteration  10: 8390953.112 ops/s
# Warmup Iteration  11: 8274953.290 ops/s
# Warmup Iteration  12: 8389907.918 ops/s
# Warmup Iteration  13: 8271044.345 ops/s
# Warmup Iteration  14: 8282159.942 ops/s
# Warmup Iteration  15: 8366749.927 ops/s
# Warmup Iteration  16: 8402400.372 ops/s
# Warmup Iteration  17: 8486334.519 ops/s
# Warmup Iteration  18: 8474729.010 ops/s
# Warmup Iteration  19: 8475632.887 ops/s
# Warmup Iteration  20: 8379234.170 ops/s
# Warmup Iteration  21: 8444229.398 ops/s
# Warmup Iteration  22: 8489528.113 ops/s
# Warmup Iteration  23: 8405273.922 ops/s
# Warmup Iteration  24: 8399855.057 ops/s
# Warmup Iteration  25: 8443478.480 ops/s
# Warmup Iteration  26: 8301458.167 ops/s
# Warmup Iteration  27: 8495847.050 ops/s
# Warmup Iteration  28: 8500475.065 ops/s
# Warmup Iteration  29: 8422383.372 ops/s
# Warmup Iteration  30: 8470962.712 ops/s
Iteration   1: 8480288.412 ops/s
Iteration   2: 8409714.440 ops/s
Iteration   3: 8446046.087 ops/s
Iteration   4: 8488097.392 ops/s
Iteration   5: 8484165.753 ops/s
Iteration   6: 8498856.355 ops/s
Iteration   7: 8529640.097 ops/s
Iteration   8: 8466343.589 ops/s
Iteration   9: 8373669.956 ops/s
Iteration  10: 8509374.812 ops/s
Iteration  11: 8485014.937 ops/s
Iteration  12: 8493828.938 ops/s
Iteration  13: 8504998.575 ops/s
Iteration  14: 8359630.585 ops/s
Iteration  15: 8500391.392 ops/s
Iteration  16: 8473925.875 ops/s
Iteration  17: 8458336.569 ops/s
Iteration  18: 8390799.766 ops/s
Iteration  19: 8478339.272 ops/s
Iteration  20: 8341653.154 ops/s
Iteration  21: 8486478.834 ops/s
Iteration  22: 8380906.010 ops/s
Iteration  23: 8483237.642 ops/s
Iteration  24: 8234469.262 ops/s
Iteration  25: 8303386.240 ops/s
Iteration  26: 8419125.232 ops/s
Iteration  27: 8441803.499 ops/s
Iteration  28: 8468971.973 ops/s
Iteration  29: 8413325.896 ops/s
Iteration  30: 8485599.695 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget":
  8443014.008 ±(99.9%) 45546.816 ops/s [Average]
  (min, avg, max) = (8234469.262, 8443014.008, 8529640.097), stdev = 68172.336
  CI (99.9%): [8397467.192, 8488560.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  8443014.008 ± 45546.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647398.788 ops/s
# Warmup Iteration   2: 1586770.394 ops/s
# Warmup Iteration   3: 1583819.584 ops/s
# Warmup Iteration   4: 1342883.544 ops/s
# Warmup Iteration   5: 1599056.012 ops/s
# Warmup Iteration   6: 1602661.493 ops/s
# Warmup Iteration   7: 1602075.763 ops/s
# Warmup Iteration   8: 1602977.471 ops/s
# Warmup Iteration   9: 1577917.909 ops/s
# Warmup Iteration  10: 1602640.867 ops/s
# Warmup Iteration  11: 1575699.735 ops/s
# Warmup Iteration  12: 1594926.984 ops/s
# Warmup Iteration  13: 1594920.369 ops/s
# Warmup Iteration  14: 1589249.104 ops/s
# Warmup Iteration  15: 1599940.873 ops/s
# Warmup Iteration  16: 1604047.830 ops/s
# Warmup Iteration  17: 1604468.849 ops/s
# Warmup Iteration  18: 1589965.451 ops/s
# Warmup Iteration  19: 1594321.631 ops/s
# Warmup Iteration  20: 1591477.343 ops/s
# Warmup Iteration  21: 1606767.400 ops/s
# Warmup Iteration  22: 1596121.790 ops/s
# Warmup Iteration  23: 1589832.146 ops/s
# Warmup Iteration  24: 1589284.705 ops/s
# Warmup Iteration  25: 1599377.967 ops/s
# Warmup Iteration  26: 1605751.835 ops/s
# Warmup Iteration  27: 1600064.579 ops/s
# Warmup Iteration  28: 1571810.846 ops/s
# Warmup Iteration  29: 1600547.380 ops/s
# Warmup Iteration  30: 1582230.252 ops/s
Iteration   1: 1593949.433 ops/s
Iteration   2: 1592132.776 ops/s
Iteration   3: 1585537.343 ops/s
Iteration   4: 1573873.802 ops/s
Iteration   5: 1594156.150 ops/s
Iteration   6: 1600304.508 ops/s
Iteration   7: 1591451.281 ops/s
Iteration   8: 1561898.907 ops/s
Iteration   9: 1601963.626 ops/s
Iteration  10: 1578023.072 ops/s
Iteration  11: 1607137.625 ops/s
Iteration  12: 1600966.752 ops/s
Iteration  13: 1603323.655 ops/s
Iteration  14: 1607125.891 ops/s
Iteration  15: 1601275.152 ops/s
Iteration  16: 1594235.996 ops/s
Iteration  17: 1603243.170 ops/s
Iteration  18: 1602842.291 ops/s
Iteration  19: 1600702.947 ops/s
Iteration  20: 1596458.712 ops/s
Iteration  21: 1587471.191 ops/s
Iteration  22: 1575980.404 ops/s
Iteration  23: 1596397.375 ops/s
Iteration  24: 1591826.044 ops/s
Iteration  25: 1572658.079 ops/s
Iteration  26: 1595380.901 ops/s
Iteration  27: 1573915.783 ops/s
Iteration  28: 1593589.437 ops/s
Iteration  29: 1605816.094 ops/s
Iteration  30: 1593807.545 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByte":
  1592581.531 ±(99.9%) 7789.058 ops/s [Average]
  (min, avg, max) = (1561898.907, 1592581.531, 1607137.625), stdev = 11658.296
  CI (99.9%): [1584792.473, 1600370.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByte  thrpt   30  1592581.531 ± 7789.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2003214.299 ops/s
# Warmup Iteration   2: 4569521.077 ops/s
# Warmup Iteration   3: 3907344.127 ops/s
# Warmup Iteration   4: 4648339.212 ops/s
# Warmup Iteration   5: 4660664.113 ops/s
# Warmup Iteration   6: 4653208.920 ops/s
# Warmup Iteration   7: 4673485.576 ops/s
# Warmup Iteration   8: 4596958.872 ops/s
# Warmup Iteration   9: 4672078.882 ops/s
# Warmup Iteration  10: 4629352.650 ops/s
# Warmup Iteration  11: 4631056.036 ops/s
# Warmup Iteration  12: 4652520.502 ops/s
# Warmup Iteration  13: 4633745.020 ops/s
# Warmup Iteration  14: 4669743.192 ops/s
# Warmup Iteration  15: 4663688.286 ops/s
# Warmup Iteration  16: 4677701.743 ops/s
# Warmup Iteration  17: 4668471.280 ops/s
# Warmup Iteration  18: 4629909.855 ops/s
# Warmup Iteration  19: 4675955.772 ops/s
# Warmup Iteration  20: 4629555.925 ops/s
# Warmup Iteration  21: 4605748.787 ops/s
# Warmup Iteration  22: 4659655.136 ops/s
# Warmup Iteration  23: 4656488.194 ops/s
# Warmup Iteration  24: 4647047.017 ops/s
# Warmup Iteration  25: 4674914.444 ops/s
# Warmup Iteration  26: 4624646.561 ops/s
# Warmup Iteration  27: 4654710.040 ops/s
# Warmup Iteration  28: 4657636.429 ops/s
# Warmup Iteration  29: 4674743.149 ops/s
# Warmup Iteration  30: 4676122.717 ops/s
Iteration   1: 4663647.208 ops/s
Iteration   2: 4689765.276 ops/s
Iteration   3: 4699717.060 ops/s
Iteration   4: 4659866.146 ops/s
Iteration   5: 4594511.124 ops/s
Iteration   6: 4570716.994 ops/s
Iteration   7: 4674199.687 ops/s
Iteration   8: 4655510.438 ops/s
Iteration   9: 4686945.171 ops/s
Iteration  10: 4675420.427 ops/s
Iteration  11: 4609085.800 ops/s
Iteration  12: 4680373.873 ops/s
Iteration  13: 4683100.586 ops/s
Iteration  14: 4685817.036 ops/s
Iteration  15: 4658342.410 ops/s
Iteration  16: 4682194.200 ops/s
Iteration  17: 4670156.164 ops/s
Iteration  18: 4661424.044 ops/s
Iteration  19: 4587928.194 ops/s
Iteration  20: 4672871.938 ops/s
Iteration  21: 4670439.761 ops/s
Iteration  22: 4630871.742 ops/s
Iteration  23: 4693565.710 ops/s
Iteration  24: 4673063.202 ops/s
Iteration  25: 4691738.135 ops/s
Iteration  26: 4680804.857 ops/s
Iteration  27: 4681852.587 ops/s
Iteration  28: 4683867.707 ops/s
Iteration  29: 4680249.197 ops/s
Iteration  30: 4606389.380 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget":
  4661814.535 ±(99.9%) 22882.628 ops/s [Average]
  (min, avg, max) = (4570716.994, 4661814.535, 4699717.060), stdev = 34249.643
  CI (99.9%): [4638931.907, 4684697.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  4661814.535 ± 22882.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1509177.350 ops/s
# Warmup Iteration   2: 3699839.984 ops/s
# Warmup Iteration   3: 3378358.505 ops/s
# Warmup Iteration   4: 3488299.250 ops/s
# Warmup Iteration   5: 3762211.429 ops/s
# Warmup Iteration   6: 3748713.478 ops/s
# Warmup Iteration   7: 3735922.816 ops/s
# Warmup Iteration   8: 3712802.282 ops/s
# Warmup Iteration   9: 3761527.994 ops/s
# Warmup Iteration  10: 3743186.925 ops/s
# Warmup Iteration  11: 3744954.836 ops/s
# Warmup Iteration  12: 3744284.801 ops/s
# Warmup Iteration  13: 3746674.348 ops/s
# Warmup Iteration  14: 3733447.035 ops/s
# Warmup Iteration  15: 3756844.633 ops/s
# Warmup Iteration  16: 3682652.893 ops/s
# Warmup Iteration  17: 3737768.729 ops/s
# Warmup Iteration  18: 3755126.558 ops/s
# Warmup Iteration  19: 3731417.242 ops/s
# Warmup Iteration  20: 3744065.201 ops/s
# Warmup Iteration  21: 3757734.864 ops/s
# Warmup Iteration  22: 3756186.814 ops/s
# Warmup Iteration  23: 3763985.460 ops/s
# Warmup Iteration  24: 3740861.303 ops/s
# Warmup Iteration  25: 3709501.642 ops/s
# Warmup Iteration  26: 3741966.250 ops/s
# Warmup Iteration  27: 3766280.494 ops/s
# Warmup Iteration  28: 3743061.510 ops/s
# Warmup Iteration  29: 3757635.731 ops/s
# Warmup Iteration  30: 3763163.470 ops/s
Iteration   1: 3758282.620 ops/s
Iteration   2: 3761253.122 ops/s
Iteration   3: 3747212.214 ops/s
Iteration   4: 3705730.657 ops/s
Iteration   5: 3778694.345 ops/s
Iteration   6: 3764357.155 ops/s
Iteration   7: 3688664.709 ops/s
Iteration   8: 3771911.359 ops/s
Iteration   9: 3766249.269 ops/s
Iteration  10: 3766112.326 ops/s
Iteration  11: 3767222.511 ops/s
Iteration  12: 3777788.174 ops/s
Iteration  13: 3738876.129 ops/s
Iteration  14: 3714098.522 ops/s
Iteration  15: 3692457.987 ops/s
Iteration  16: 3769273.954 ops/s
Iteration  17: 3774038.307 ops/s
Iteration  18: 3738395.702 ops/s
Iteration  19: 3769624.968 ops/s
Iteration  20: 3765944.220 ops/s
Iteration  21: 3749159.621 ops/s
Iteration  22: 3772879.282 ops/s
Iteration  23: 3711035.752 ops/s
Iteration  24: 3700856.385 ops/s
Iteration  25: 3755083.691 ops/s
Iteration  26: 3753004.653 ops/s
Iteration  27: 3719260.316 ops/s
Iteration  28: 3742968.323 ops/s
Iteration  29: 3766049.260 ops/s
Iteration  30: 3702653.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget":
  3746304.628 ±(99.9%) 18836.004 ops/s [Average]
  (min, avg, max) = (3688664.709, 3746304.628, 3778694.345), stdev = 28192.846
  CI (99.9%): [3727468.624, 3765140.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  3746304.628 ± 18836.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 600239.679 ops/s
# Warmup Iteration   2: 1472293.675 ops/s
# Warmup Iteration   3: 1467437.803 ops/s
# Warmup Iteration   4: 1248982.168 ops/s
# Warmup Iteration   5: 1482653.410 ops/s
# Warmup Iteration   6: 1478328.387 ops/s
# Warmup Iteration   7: 1464454.732 ops/s
# Warmup Iteration   8: 1471070.911 ops/s
# Warmup Iteration   9: 1482711.289 ops/s
# Warmup Iteration  10: 1475781.085 ops/s
# Warmup Iteration  11: 1461933.775 ops/s
# Warmup Iteration  12: 1483018.427 ops/s
# Warmup Iteration  13: 1455064.278 ops/s
# Warmup Iteration  14: 1485373.945 ops/s
# Warmup Iteration  15: 1482788.874 ops/s
# Warmup Iteration  16: 1482360.221 ops/s
# Warmup Iteration  17: 1465364.986 ops/s
# Warmup Iteration  18: 1471491.920 ops/s
# Warmup Iteration  19: 1471959.916 ops/s
# Warmup Iteration  20: 1475949.904 ops/s
# Warmup Iteration  21: 1484644.095 ops/s
# Warmup Iteration  22: 1486172.506 ops/s
# Warmup Iteration  23: 1481918.444 ops/s
# Warmup Iteration  24: 1485563.608 ops/s
# Warmup Iteration  25: 1483427.671 ops/s
# Warmup Iteration  26: 1488599.273 ops/s
# Warmup Iteration  27: 1479427.544 ops/s
# Warmup Iteration  28: 1478747.225 ops/s
# Warmup Iteration  29: 1484639.125 ops/s
# Warmup Iteration  30: 1485487.446 ops/s
Iteration   1: 1488364.548 ops/s
Iteration   2: 1481978.934 ops/s
Iteration   3: 1486439.380 ops/s
Iteration   4: 1459104.957 ops/s
Iteration   5: 1460740.349 ops/s
Iteration   6: 1478155.403 ops/s
Iteration   7: 1490455.434 ops/s
Iteration   8: 1483934.649 ops/s
Iteration   9: 1480297.830 ops/s
Iteration  10: 1468259.649 ops/s
Iteration  11: 1465330.609 ops/s
Iteration  12: 1488883.206 ops/s
Iteration  13: 1484274.924 ops/s
Iteration  14: 1464259.349 ops/s
Iteration  15: 1479859.292 ops/s
Iteration  16: 1482520.433 ops/s
Iteration  17: 1487652.844 ops/s
Iteration  18: 1489312.773 ops/s
Iteration  19: 1488288.025 ops/s
Iteration  20: 1481145.757 ops/s
Iteration  21: 1486828.666 ops/s
Iteration  22: 1488493.766 ops/s
Iteration  23: 1481789.249 ops/s
Iteration  24: 1480879.711 ops/s
Iteration  25: 1482760.515 ops/s
Iteration  26: 1454472.363 ops/s
Iteration  27: 1487475.936 ops/s
Iteration  28: 1474342.424 ops/s
Iteration  29: 1477751.008 ops/s
Iteration  30: 1482918.179 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectChar":
  1479565.672 ±(99.9%) 6621.734 ops/s [Average]
  (min, avg, max) = (1454472.363, 1479565.672, 1490455.434), stdev = 9911.101
  CI (99.9%): [1472943.938, 1486187.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectChar  thrpt   30  1479565.672 ± 6621.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2099716.001 ops/s
# Warmup Iteration   2: 4836666.396 ops/s
# Warmup Iteration   3: 4151488.367 ops/s
# Warmup Iteration   4: 4898403.007 ops/s
# Warmup Iteration   5: 4851309.009 ops/s
# Warmup Iteration   6: 4873294.164 ops/s
# Warmup Iteration   7: 4932422.399 ops/s
# Warmup Iteration   8: 4929285.574 ops/s
# Warmup Iteration   9: 4899962.278 ops/s
# Warmup Iteration  10: 4874590.269 ops/s
# Warmup Iteration  11: 4885361.621 ops/s
# Warmup Iteration  12: 4942865.971 ops/s
# Warmup Iteration  13: 4923797.624 ops/s
# Warmup Iteration  14: 4914256.953 ops/s
# Warmup Iteration  15: 4891069.098 ops/s
# Warmup Iteration  16: 4936841.045 ops/s
# Warmup Iteration  17: 4924561.660 ops/s
# Warmup Iteration  18: 4935320.219 ops/s
# Warmup Iteration  19: 4882602.056 ops/s
# Warmup Iteration  20: 4898383.558 ops/s
# Warmup Iteration  21: 4869265.175 ops/s
# Warmup Iteration  22: 4901696.332 ops/s
# Warmup Iteration  23: 4923449.509 ops/s
# Warmup Iteration  24: 4935565.766 ops/s
# Warmup Iteration  25: 4935914.708 ops/s
# Warmup Iteration  26: 4916380.897 ops/s
# Warmup Iteration  27: 4949495.713 ops/s
# Warmup Iteration  28: 4864554.219 ops/s
# Warmup Iteration  29: 4936512.608 ops/s
# Warmup Iteration  30: 4908036.767 ops/s
Iteration   1: 4945575.331 ops/s
Iteration   2: 4910998.719 ops/s
Iteration   3: 4931491.187 ops/s
Iteration   4: 4920647.224 ops/s
Iteration   5: 4935322.601 ops/s
Iteration   6: 4962264.445 ops/s
Iteration   7: 4924507.162 ops/s
Iteration   8: 4934194.084 ops/s
Iteration   9: 4936717.481 ops/s
Iteration  10: 4868344.548 ops/s
Iteration  11: 4931766.463 ops/s
Iteration  12: 4912372.262 ops/s
Iteration  13: 4864139.659 ops/s
Iteration  14: 4949050.471 ops/s
Iteration  15: 4947613.019 ops/s
Iteration  16: 4909396.872 ops/s
Iteration  17: 4877715.532 ops/s
Iteration  18: 4955553.530 ops/s
Iteration  19: 4763805.877 ops/s
Iteration  20: 4881644.840 ops/s
Iteration  21: 4852914.650 ops/s
Iteration  22: 4950892.382 ops/s
Iteration  23: 4937565.855 ops/s
Iteration  24: 4938667.713 ops/s
Iteration  25: 4946920.447 ops/s
Iteration  26: 4942889.389 ops/s
Iteration  27: 4947005.178 ops/s
Iteration  28: 4891872.231 ops/s
Iteration  29: 4951730.992 ops/s
Iteration  30: 4956410.214 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget":
  4919333.012 ±(99.9%) 28076.623 ops/s [Average]
  (min, avg, max) = (4763805.877, 4919333.012, 4962264.445), stdev = 42023.770
  CI (99.9%): [4891256.389, 4947409.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  4919333.012 ± 28076.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855107.967 ops/s
# Warmup Iteration   2: 3453778.679 ops/s
# Warmup Iteration   3: 3647913.584 ops/s
# Warmup Iteration   4: 3535327.431 ops/s
# Warmup Iteration   5: 3917309.213 ops/s
# Warmup Iteration   6: 3920030.251 ops/s
# Warmup Iteration   7: 3879056.753 ops/s
# Warmup Iteration   8: 3903534.942 ops/s
# Warmup Iteration   9: 3902990.550 ops/s
# Warmup Iteration  10: 3926366.004 ops/s
# Warmup Iteration  11: 3936749.049 ops/s
# Warmup Iteration  12: 3860956.782 ops/s
# Warmup Iteration  13: 3909181.282 ops/s
# Warmup Iteration  14: 3926446.787 ops/s
# Warmup Iteration  15: 3933507.385 ops/s
# Warmup Iteration  16: 3931258.425 ops/s
# Warmup Iteration  17: 3925953.035 ops/s
# Warmup Iteration  18: 3879290.747 ops/s
# Warmup Iteration  19: 3929686.519 ops/s
# Warmup Iteration  20: 3944818.226 ops/s
# Warmup Iteration  21: 3934507.906 ops/s
# Warmup Iteration  22: 3942293.918 ops/s
# Warmup Iteration  23: 3928317.636 ops/s
# Warmup Iteration  24: 3934598.016 ops/s
# Warmup Iteration  25: 3943426.658 ops/s
# Warmup Iteration  26: 3928777.937 ops/s
# Warmup Iteration  27: 3936031.706 ops/s
# Warmup Iteration  28: 3932760.461 ops/s
# Warmup Iteration  29: 3909246.064 ops/s
# Warmup Iteration  30: 3893299.910 ops/s
Iteration   1: 3945260.335 ops/s
Iteration   2: 3919538.052 ops/s
Iteration   3: 3939742.120 ops/s
Iteration   4: 3945874.396 ops/s
Iteration   5: 3938477.986 ops/s
Iteration   6: 3859585.142 ops/s
Iteration   7: 3866492.948 ops/s
Iteration   8: 3908881.077 ops/s
Iteration   9: 3804413.401 ops/s
Iteration  10: 3925243.273 ops/s
Iteration  11: 3945835.807 ops/s
Iteration  12: 3926220.802 ops/s
Iteration  13: 3934749.253 ops/s
Iteration  14: 3944400.521 ops/s
Iteration  15: 3926839.408 ops/s
Iteration  16: 3916588.610 ops/s
Iteration  17: 3922336.894 ops/s
Iteration  18: 3915582.580 ops/s
Iteration  19: 3917000.911 ops/s
Iteration  20: 3931818.193 ops/s
Iteration  21: 3931201.108 ops/s
Iteration  22: 3934093.552 ops/s
Iteration  23: 3938481.547 ops/s
Iteration  24: 3932013.228 ops/s
Iteration  25: 3930569.259 ops/s
Iteration  26: 3873544.452 ops/s
Iteration  27: 3926569.407 ops/s
Iteration  28: 3946121.135 ops/s
Iteration  29: 3923564.557 ops/s
Iteration  30: 3829426.646 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget":
  3916682.220 ±(99.9%) 23377.620 ops/s [Average]
  (min, avg, max) = (3804413.401, 3916682.220, 3946121.135), stdev = 34990.524
  CI (99.9%): [3893304.600, 3940059.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  3916682.220 ± 23377.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503732.655 ops/s
# Warmup Iteration   2: 1133864.264 ops/s
# Warmup Iteration   3: 1138171.870 ops/s
# Warmup Iteration   4: 968779.092 ops/s
# Warmup Iteration   5: 1123275.757 ops/s
# Warmup Iteration   6: 1131135.455 ops/s
# Warmup Iteration   7: 1123231.663 ops/s
# Warmup Iteration   8: 1138323.337 ops/s
# Warmup Iteration   9: 1142159.299 ops/s
# Warmup Iteration  10: 1141087.759 ops/s
# Warmup Iteration  11: 1128089.748 ops/s
# Warmup Iteration  12: 1139582.193 ops/s
# Warmup Iteration  13: 1131160.351 ops/s
# Warmup Iteration  14: 1123289.402 ops/s
# Warmup Iteration  15: 1138433.000 ops/s
# Warmup Iteration  16: 1138538.506 ops/s
# Warmup Iteration  17: 1138350.351 ops/s
# Warmup Iteration  18: 1122053.263 ops/s
# Warmup Iteration  19: 1138979.824 ops/s
# Warmup Iteration  20: 1131853.776 ops/s
# Warmup Iteration  21: 1135445.560 ops/s
# Warmup Iteration  22: 1134088.844 ops/s
# Warmup Iteration  23: 1135585.182 ops/s
# Warmup Iteration  24: 1128247.259 ops/s
# Warmup Iteration  25: 1126337.066 ops/s
# Warmup Iteration  26: 1133092.559 ops/s
# Warmup Iteration  27: 1136782.645 ops/s
# Warmup Iteration  28: 1133067.459 ops/s
# Warmup Iteration  29: 1118738.541 ops/s
# Warmup Iteration  30: 1131689.010 ops/s
Iteration   1: 1139482.786 ops/s
Iteration   2: 1107674.964 ops/s
Iteration   3: 1121866.472 ops/s
Iteration   4: 1132877.466 ops/s
Iteration   5: 1132941.128 ops/s
Iteration   6: 1137973.953 ops/s
Iteration   7: 1135952.404 ops/s
Iteration   8: 1136580.010 ops/s
Iteration   9: 1134723.820 ops/s
Iteration  10: 1135418.692 ops/s
Iteration  11: 1123319.998 ops/s
Iteration  12: 1136317.741 ops/s
Iteration  13: 1136662.305 ops/s
Iteration  14: 1135272.689 ops/s
Iteration  15: 1140987.337 ops/s
Iteration  16: 1141816.341 ops/s
Iteration  17: 1121739.009 ops/s
Iteration  18: 1142422.680 ops/s
Iteration  19: 1139534.305 ops/s
Iteration  20: 1141019.608 ops/s
Iteration  21: 1135086.934 ops/s
Iteration  22: 1137125.292 ops/s
Iteration  23: 1128629.760 ops/s
Iteration  24: 1121650.086 ops/s
Iteration  25: 1141160.650 ops/s
Iteration  26: 1120948.132 ops/s
Iteration  27: 1138959.091 ops/s
Iteration  28: 1136948.323 ops/s
Iteration  29: 1142351.408 ops/s
Iteration  30: 1140401.371 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDouble":
  1133928.159 ±(99.9%) 5546.288 ops/s [Average]
  (min, avg, max) = (1107674.964, 1133928.159, 1142422.680), stdev = 8301.423
  CI (99.9%): [1128381.871, 1139474.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDouble  thrpt   30  1133928.159 ± 5546.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1471073.452 ops/s
# Warmup Iteration   2: 3098607.362 ops/s
# Warmup Iteration   3: 2671833.737 ops/s
# Warmup Iteration   4: 3197334.437 ops/s
# Warmup Iteration   5: 3134431.130 ops/s
# Warmup Iteration   6: 3128703.308 ops/s
# Warmup Iteration   7: 3103199.094 ops/s
# Warmup Iteration   8: 3104235.249 ops/s
# Warmup Iteration   9: 3178720.233 ops/s
# Warmup Iteration  10: 3089558.248 ops/s
# Warmup Iteration  11: 3134706.120 ops/s
# Warmup Iteration  12: 3086823.021 ops/s
# Warmup Iteration  13: 3095508.521 ops/s
# Warmup Iteration  14: 3022612.706 ops/s
# Warmup Iteration  15: 3106912.459 ops/s
# Warmup Iteration  16: 3091232.511 ops/s
# Warmup Iteration  17: 3135709.565 ops/s
# Warmup Iteration  18: 3122974.687 ops/s
# Warmup Iteration  19: 3145239.175 ops/s
# Warmup Iteration  20: 3090968.315 ops/s
# Warmup Iteration  21: 3065217.196 ops/s
# Warmup Iteration  22: 3126131.533 ops/s
# Warmup Iteration  23: 3122078.643 ops/s
# Warmup Iteration  24: 3152060.593 ops/s
# Warmup Iteration  25: 3096786.473 ops/s
# Warmup Iteration  26: 3106225.482 ops/s
# Warmup Iteration  27: 3126676.394 ops/s
# Warmup Iteration  28: 3142062.743 ops/s
# Warmup Iteration  29: 3168912.700 ops/s
# Warmup Iteration  30: 3078130.939 ops/s
Iteration   1: 3143675.820 ops/s
Iteration   2: 3194487.256 ops/s
Iteration   3: 3153783.586 ops/s
Iteration   4: 3148759.105 ops/s
Iteration   5: 3131300.407 ops/s
Iteration   6: 3117900.198 ops/s
Iteration   7: 3143378.172 ops/s
Iteration   8: 3109210.990 ops/s
Iteration   9: 3075185.767 ops/s
Iteration  10: 3043852.524 ops/s
Iteration  11: 3102764.309 ops/s
Iteration  12: 3145773.006 ops/s
Iteration  13: 3130382.700 ops/s
Iteration  14: 3173251.971 ops/s
Iteration  15: 3126754.945 ops/s
Iteration  16: 3126184.311 ops/s
Iteration  17: 3088022.480 ops/s
Iteration  18: 3140931.348 ops/s
Iteration  19: 3132412.437 ops/s
Iteration  20: 3161620.323 ops/s
Iteration  21: 3143221.100 ops/s
Iteration  22: 3163878.223 ops/s
Iteration  23: 3157278.288 ops/s
Iteration  24: 3119457.193 ops/s
Iteration  25: 3214995.169 ops/s
Iteration  26: 3093052.891 ops/s
Iteration  27: 3054352.238 ops/s
Iteration  28: 3101881.853 ops/s
Iteration  29: 3139131.537 ops/s
Iteration  30: 3102273.986 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3129305.138 ±(99.9%) 24918.369 ops/s [Average]
  (min, avg, max) = (3043852.524, 3129305.138, 3214995.169), stdev = 37296.645
  CI (99.9%): [3104386.769, 3154223.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3129305.138 ± 24918.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1103796.780 ops/s
# Warmup Iteration   2: 2746607.936 ops/s
# Warmup Iteration   3: 2391936.507 ops/s
# Warmup Iteration   4: 2631815.000 ops/s
# Warmup Iteration   5: 2757741.595 ops/s
# Warmup Iteration   6: 2760253.554 ops/s
# Warmup Iteration   7: 2763218.364 ops/s
# Warmup Iteration   8: 2764361.694 ops/s
# Warmup Iteration   9: 2751983.721 ops/s
# Warmup Iteration  10: 2738688.097 ops/s
# Warmup Iteration  11: 2764268.715 ops/s
# Warmup Iteration  12: 2760214.175 ops/s
# Warmup Iteration  13: 2760204.841 ops/s
# Warmup Iteration  14: 2766958.704 ops/s
# Warmup Iteration  15: 2761961.536 ops/s
# Warmup Iteration  16: 2765218.820 ops/s
# Warmup Iteration  17: 2767297.811 ops/s
# Warmup Iteration  18: 2743692.724 ops/s
# Warmup Iteration  19: 2730743.480 ops/s
# Warmup Iteration  20: 2734915.084 ops/s
# Warmup Iteration  21: 2762703.573 ops/s
# Warmup Iteration  22: 2763107.231 ops/s
# Warmup Iteration  23: 2755281.369 ops/s
# Warmup Iteration  24: 2763871.375 ops/s
# Warmup Iteration  25: 2749651.160 ops/s
# Warmup Iteration  26: 2771865.737 ops/s
# Warmup Iteration  27: 2766041.535 ops/s
# Warmup Iteration  28: 2761607.660 ops/s
# Warmup Iteration  29: 2730225.715 ops/s
# Warmup Iteration  30: 2754260.002 ops/s
Iteration   1: 2767427.305 ops/s
Iteration   2: 2755131.374 ops/s
Iteration   3: 2751563.649 ops/s
Iteration   4: 2761073.957 ops/s
Iteration   5: 2770620.791 ops/s
Iteration   6: 2747543.052 ops/s
Iteration   7: 2766244.856 ops/s
Iteration   8: 2759890.184 ops/s
Iteration   9: 2744002.584 ops/s
Iteration  10: 2710113.404 ops/s
Iteration  11: 2759407.304 ops/s
Iteration  12: 2755002.335 ops/s
Iteration  13: 2729590.678 ops/s
Iteration  14: 2757753.568 ops/s
Iteration  15: 2713832.685 ops/s
Iteration  16: 2762158.191 ops/s
Iteration  17: 2761770.545 ops/s
Iteration  18: 2723766.393 ops/s
Iteration  19: 2752027.266 ops/s
Iteration  20: 2759258.629 ops/s
Iteration  21: 2765504.387 ops/s
Iteration  22: 2757064.711 ops/s
Iteration  23: 2759312.390 ops/s
Iteration  24: 2708805.903 ops/s
Iteration  25: 2761531.217 ops/s
Iteration  26: 2716904.544 ops/s
Iteration  27: 2756663.813 ops/s
Iteration  28: 2774924.827 ops/s
Iteration  29: 2759353.535 ops/s
Iteration  30: 2759499.897 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget":
  2750924.799 ±(99.9%) 12380.234 ops/s [Average]
  (min, avg, max) = (2708805.903, 2750924.799, 2774924.827), stdev = 18530.152
  CI (99.9%): [2738544.565, 2763305.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2750924.799 ± 12380.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521388.532 ops/s
# Warmup Iteration   2: 1252112.091 ops/s
# Warmup Iteration   3: 1272252.373 ops/s
# Warmup Iteration   4: 1059978.142 ops/s
# Warmup Iteration   5: 1262212.925 ops/s
# Warmup Iteration   6: 1277814.599 ops/s
# Warmup Iteration   7: 1271886.086 ops/s
# Warmup Iteration   8: 1265473.934 ops/s
# Warmup Iteration   9: 1279836.239 ops/s
# Warmup Iteration  10: 1278225.743 ops/s
# Warmup Iteration  11: 1270409.825 ops/s
# Warmup Iteration  12: 1272292.815 ops/s
# Warmup Iteration  13: 1267943.512 ops/s
# Warmup Iteration  14: 1264457.055 ops/s
# Warmup Iteration  15: 1276847.149 ops/s
# Warmup Iteration  16: 1260106.361 ops/s
# Warmup Iteration  17: 1258552.490 ops/s
# Warmup Iteration  18: 1270304.365 ops/s
# Warmup Iteration  19: 1267194.645 ops/s
# Warmup Iteration  20: 1258695.102 ops/s
# Warmup Iteration  21: 1264188.462 ops/s
# Warmup Iteration  22: 1269878.117 ops/s
# Warmup Iteration  23: 1265001.088 ops/s
# Warmup Iteration  24: 1261395.334 ops/s
# Warmup Iteration  25: 1258543.668 ops/s
# Warmup Iteration  26: 1262422.028 ops/s
# Warmup Iteration  27: 1255406.783 ops/s
# Warmup Iteration  28: 1265862.786 ops/s
# Warmup Iteration  29: 1261543.968 ops/s
# Warmup Iteration  30: 1262520.587 ops/s
Iteration   1: 1268233.700 ops/s
Iteration   2: 1246798.406 ops/s
Iteration   3: 1267897.461 ops/s
Iteration   4: 1248712.789 ops/s
Iteration   5: 1267432.145 ops/s
Iteration   6: 1253590.566 ops/s
Iteration   7: 1259781.282 ops/s
Iteration   8: 1259994.265 ops/s
Iteration   9: 1245850.490 ops/s
Iteration  10: 1263531.857 ops/s
Iteration  11: 1272568.519 ops/s
Iteration  12: 1259888.344 ops/s
Iteration  13: 1249854.573 ops/s
Iteration  14: 1270645.835 ops/s
Iteration  15: 1256764.628 ops/s
Iteration  16: 1257373.889 ops/s
Iteration  17: 1260380.431 ops/s
Iteration  18: 1241837.385 ops/s
Iteration  19: 1267396.024 ops/s
Iteration  20: 1253557.985 ops/s
Iteration  21: 1262604.652 ops/s
Iteration  22: 1267372.075 ops/s
Iteration  23: 1236533.351 ops/s
Iteration  24: 1260885.135 ops/s
Iteration  25: 1266898.962 ops/s
Iteration  26: 1260613.688 ops/s
Iteration  27: 1262540.276 ops/s
Iteration  28: 1268217.927 ops/s
Iteration  29: 1262855.300 ops/s
Iteration  30: 1237688.166 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloat":
  1258610.003 ±(99.9%) 6495.742 ops/s [Average]
  (min, avg, max) = (1236533.351, 1258610.003, 1272568.519), stdev = 9722.521
  CI (99.9%): [1252114.262, 1265105.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloat  thrpt   30  1258610.003 ± 6495.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1792541.561 ops/s
# Warmup Iteration   2: 4097165.790 ops/s
# Warmup Iteration   3: 3523075.312 ops/s
# Warmup Iteration   4: 4115047.413 ops/s
# Warmup Iteration   5: 4193353.147 ops/s
# Warmup Iteration   6: 4162063.460 ops/s
# Warmup Iteration   7: 4194232.162 ops/s
# Warmup Iteration   8: 4192751.549 ops/s
# Warmup Iteration   9: 4184235.366 ops/s
# Warmup Iteration  10: 4132756.928 ops/s
# Warmup Iteration  11: 4158060.590 ops/s
# Warmup Iteration  12: 4177928.373 ops/s
# Warmup Iteration  13: 4101321.060 ops/s
# Warmup Iteration  14: 4192222.363 ops/s
# Warmup Iteration  15: 4176414.311 ops/s
# Warmup Iteration  16: 4175895.483 ops/s
# Warmup Iteration  17: 4188464.111 ops/s
# Warmup Iteration  18: 4147359.802 ops/s
# Warmup Iteration  19: 4192422.813 ops/s
# Warmup Iteration  20: 4163842.631 ops/s
# Warmup Iteration  21: 4193634.944 ops/s
# Warmup Iteration  22: 4181936.081 ops/s
# Warmup Iteration  23: 4183806.285 ops/s
# Warmup Iteration  24: 4169787.507 ops/s
# Warmup Iteration  25: 4177950.955 ops/s
# Warmup Iteration  26: 4153857.707 ops/s
# Warmup Iteration  27: 4137920.276 ops/s
# Warmup Iteration  28: 4166786.487 ops/s
# Warmup Iteration  29: 4150686.879 ops/s
# Warmup Iteration  30: 4179795.092 ops/s
Iteration   1: 4165152.076 ops/s
Iteration   2: 4168997.969 ops/s
Iteration   3: 4160819.250 ops/s
Iteration   4: 4174260.676 ops/s
Iteration   5: 4184759.478 ops/s
Iteration   6: 4091954.915 ops/s
Iteration   7: 4162612.595 ops/s
Iteration   8: 4189593.721 ops/s
Iteration   9: 4168821.412 ops/s
Iteration  10: 4186566.610 ops/s
Iteration  11: 4164164.337 ops/s
Iteration  12: 4190430.574 ops/s
Iteration  13: 4182686.635 ops/s
Iteration  14: 4175005.161 ops/s
Iteration  15: 4183703.665 ops/s
Iteration  16: 4169221.542 ops/s
Iteration  17: 4094421.450 ops/s
Iteration  18: 4168733.058 ops/s
Iteration  19: 4173788.904 ops/s
Iteration  20: 4197931.677 ops/s
Iteration  21: 4183339.682 ops/s
Iteration  22: 4182523.641 ops/s
Iteration  23: 4188584.972 ops/s
Iteration  24: 4177286.676 ops/s
Iteration  25: 4204788.824 ops/s
Iteration  26: 4122276.765 ops/s
Iteration  27: 4084068.515 ops/s
Iteration  28: 4178701.045 ops/s
Iteration  29: 4168147.170 ops/s
Iteration  30: 4123517.271 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget":
  4165562.009 ±(99.9%) 20662.935 ops/s [Average]
  (min, avg, max) = (4084068.515, 4165562.009, 4204788.824), stdev = 30927.311
  CI (99.9%): [4144899.074, 4186224.944] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  4165562.009 ± 20662.935  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1343242.590 ops/s
# Warmup Iteration   2: 3330357.697 ops/s
# Warmup Iteration   3: 2839031.952 ops/s
# Warmup Iteration   4: 3374738.611 ops/s
# Warmup Iteration   5: 3417900.634 ops/s
# Warmup Iteration   6: 3379246.628 ops/s
# Warmup Iteration   7: 3375162.114 ops/s
# Warmup Iteration   8: 3376255.540 ops/s
# Warmup Iteration   9: 3413295.958 ops/s
# Warmup Iteration  10: 3387325.320 ops/s
# Warmup Iteration  11: 3421143.937 ops/s
# Warmup Iteration  12: 3410612.460 ops/s
# Warmup Iteration  13: 3409471.020 ops/s
# Warmup Iteration  14: 3356147.982 ops/s
# Warmup Iteration  15: 3410351.149 ops/s
# Warmup Iteration  16: 3416163.540 ops/s
# Warmup Iteration  17: 3403438.281 ops/s
# Warmup Iteration  18: 3409679.364 ops/s
# Warmup Iteration  19: 3427248.867 ops/s
# Warmup Iteration  20: 3420963.163 ops/s
# Warmup Iteration  21: 3410526.435 ops/s
# Warmup Iteration  22: 3395517.592 ops/s
# Warmup Iteration  23: 3420913.803 ops/s
# Warmup Iteration  24: 3407996.191 ops/s
# Warmup Iteration  25: 3415981.111 ops/s
# Warmup Iteration  26: 3398153.615 ops/s
# Warmup Iteration  27: 3424965.797 ops/s
# Warmup Iteration  28: 3420315.573 ops/s
# Warmup Iteration  29: 3417223.062 ops/s
# Warmup Iteration  30: 3391525.632 ops/s
Iteration   1: 3420452.125 ops/s
Iteration   2: 3423260.660 ops/s
Iteration   3: 3420560.207 ops/s
Iteration   4: 3359604.343 ops/s
Iteration   5: 3413995.913 ops/s
Iteration   6: 3406425.251 ops/s
Iteration   7: 3414636.626 ops/s
Iteration   8: 3423391.581 ops/s
Iteration   9: 3431464.986 ops/s
Iteration  10: 3431356.081 ops/s
Iteration  11: 3427325.729 ops/s
Iteration  12: 3420845.640 ops/s
Iteration  13: 3410684.933 ops/s
Iteration  14: 3389359.174 ops/s
Iteration  15: 3432378.012 ops/s
Iteration  16: 3432628.911 ops/s
Iteration  17: 3363557.150 ops/s
Iteration  18: 3410933.118 ops/s
Iteration  19: 3417735.532 ops/s
Iteration  20: 3426546.502 ops/s
Iteration  21: 3421560.757 ops/s
Iteration  22: 3427948.967 ops/s
Iteration  23: 3406052.707 ops/s
Iteration  24: 3422460.405 ops/s
Iteration  25: 3361700.717 ops/s
Iteration  26: 3352847.626 ops/s
Iteration  27: 3419345.820 ops/s
Iteration  28: 3424305.355 ops/s
Iteration  29: 3410491.554 ops/s
Iteration  30: 3357801.375 ops/s


Result "org.eclipse.collections.impl.list.mutable.MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget":
  3409388.592 ±(99.9%) 16488.538 ops/s [Average]
  (min, avg, max) = (3352847.626, 3409388.592, 3432628.911), stdev = 24679.269
  CI (99.9%): [3392900.054, 3425877.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderFastListAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  3409388.592 ± 16488.538  ops/s
----------------------------------------
