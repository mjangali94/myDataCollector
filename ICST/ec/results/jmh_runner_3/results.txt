=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441895.579 ops/s
# Warmup Iteration   2: 794205.821 ops/s
# Warmup Iteration   3: 912579.959 ops/s
# Warmup Iteration   4: 895533.244 ops/s
# Warmup Iteration   5: 908321.154 ops/s
# Warmup Iteration   6: 738599.592 ops/s
# Warmup Iteration   7: 944143.503 ops/s
# Warmup Iteration   8: 938811.461 ops/s
# Warmup Iteration   9: 938304.244 ops/s
# Warmup Iteration  10: 931811.243 ops/s
# Warmup Iteration  11: 935513.642 ops/s
# Warmup Iteration  12: 936739.497 ops/s
# Warmup Iteration  13: 932406.862 ops/s
# Warmup Iteration  14: 928234.412 ops/s
# Warmup Iteration  15: 945695.532 ops/s
# Warmup Iteration  16: 941424.355 ops/s
# Warmup Iteration  17: 940485.294 ops/s
# Warmup Iteration  18: 936835.865 ops/s
# Warmup Iteration  19: 950741.430 ops/s
# Warmup Iteration  20: 942505.559 ops/s
# Warmup Iteration  21: 917211.073 ops/s
# Warmup Iteration  22: 895468.299 ops/s
# Warmup Iteration  23: 922478.679 ops/s
# Warmup Iteration  24: 934405.037 ops/s
# Warmup Iteration  25: 934461.435 ops/s
# Warmup Iteration  26: 937048.767 ops/s
# Warmup Iteration  27: 931043.101 ops/s
# Warmup Iteration  28: 929746.282 ops/s
# Warmup Iteration  29: 928735.013 ops/s
# Warmup Iteration  30: 931050.535 ops/s
Iteration   1: 938526.989 ops/s
Iteration   2: 940487.288 ops/s
Iteration   3: 921377.116 ops/s
Iteration   4: 937002.407 ops/s
Iteration   5: 940967.465 ops/s
Iteration   6: 934041.705 ops/s
Iteration   7: 932452.614 ops/s
Iteration   8: 917462.877 ops/s
Iteration   9: 908195.572 ops/s
Iteration  10: 931667.041 ops/s
Iteration  11: 937458.236 ops/s
Iteration  12: 892256.946 ops/s
Iteration  13: 937530.577 ops/s
Iteration  14: 937193.729 ops/s
Iteration  15: 939224.834 ops/s
Iteration  16: 936257.604 ops/s
Iteration  17: 918348.851 ops/s
Iteration  18: 925000.278 ops/s
Iteration  19: 878451.179 ops/s
Iteration  20: 909462.992 ops/s
Iteration  21: 928848.603 ops/s
Iteration  22: 906026.380 ops/s
Iteration  23: 911886.425 ops/s
Iteration  24: 923332.769 ops/s
Iteration  25: 938526.045 ops/s
Iteration  26: 922117.552 ops/s
Iteration  27: 898260.307 ops/s
Iteration  28: 895938.963 ops/s
Iteration  29: 886000.525 ops/s
Iteration  30: 906622.673 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex":
  921030.885 ±(99.9%) 12000.976 ops/s [Average]
  (min, avg, max) = (878451.179, 921030.885, 940967.465), stdev = 17962.497
  CI (99.9%): [909029.909, 933031.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  921030.885 ± 12000.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837016.111 ops/s
# Warmup Iteration   2: 1965911.216 ops/s
# Warmup Iteration   3: 2015176.366 ops/s
# Warmup Iteration   4: 1672905.422 ops/s
# Warmup Iteration   5: 2001031.290 ops/s
# Warmup Iteration   6: 2001818.447 ops/s
# Warmup Iteration   7: 1996787.096 ops/s
# Warmup Iteration   8: 2013865.886 ops/s
# Warmup Iteration   9: 1995566.079 ops/s
# Warmup Iteration  10: 1974114.959 ops/s
# Warmup Iteration  11: 2018255.518 ops/s
# Warmup Iteration  12: 2019969.638 ops/s
# Warmup Iteration  13: 1924708.587 ops/s
# Warmup Iteration  14: 1969426.952 ops/s
# Warmup Iteration  15: 1966027.759 ops/s
# Warmup Iteration  16: 1920088.162 ops/s
# Warmup Iteration  17: 1947621.368 ops/s
# Warmup Iteration  18: 1989852.152 ops/s
# Warmup Iteration  19: 1900478.289 ops/s
# Warmup Iteration  20: 1919006.604 ops/s
# Warmup Iteration  21: 1983894.025 ops/s
# Warmup Iteration  22: 1953838.530 ops/s
# Warmup Iteration  23: 2015657.111 ops/s
# Warmup Iteration  24: 1963134.387 ops/s
# Warmup Iteration  25: 2026659.277 ops/s
# Warmup Iteration  26: 1945615.699 ops/s
# Warmup Iteration  27: 2014650.566 ops/s
# Warmup Iteration  28: 1974618.867 ops/s
# Warmup Iteration  29: 1945122.404 ops/s
# Warmup Iteration  30: 1996861.048 ops/s
Iteration   1: 1942959.061 ops/s
Iteration   2: 2012979.420 ops/s
Iteration   3: 2038644.509 ops/s
Iteration   4: 2010005.214 ops/s
Iteration   5: 2025276.570 ops/s
Iteration   6: 2023739.460 ops/s
Iteration   7: 2013019.257 ops/s
Iteration   8: 2012891.573 ops/s
Iteration   9: 1985872.664 ops/s
Iteration  10: 2012353.322 ops/s
Iteration  11: 2002676.255 ops/s
Iteration  12: 2018370.424 ops/s
Iteration  13: 2022025.035 ops/s
Iteration  14: 2009449.621 ops/s
Iteration  15: 2018279.522 ops/s
Iteration  16: 1998892.354 ops/s
Iteration  17: 1969715.712 ops/s
Iteration  18: 1945316.940 ops/s
Iteration  19: 2011057.527 ops/s
Iteration  20: 1900678.742 ops/s
Iteration  21: 1992007.577 ops/s
Iteration  22: 2015275.388 ops/s
Iteration  23: 1950488.729 ops/s
Iteration  24: 2021136.802 ops/s
Iteration  25: 1992210.256 ops/s
Iteration  26: 2020155.375 ops/s
Iteration  27: 2013044.686 ops/s
Iteration  28: 2038939.171 ops/s
Iteration  29: 2040880.404 ops/s
Iteration  30: 2021587.776 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString":
  2002664.312 ±(99.9%) 21246.624 ops/s [Average]
  (min, avg, max) = (1900678.742, 2002664.312, 2040880.404), stdev = 31800.950
  CI (99.9%): [1981417.687, 2023910.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2002664.312 ± 21246.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033012.968 ops/s
# Warmup Iteration   2: 2640568.063 ops/s
# Warmup Iteration   3: 2655625.752 ops/s
# Warmup Iteration   4: 2100703.023 ops/s
# Warmup Iteration   5: 2574393.969 ops/s
# Warmup Iteration   6: 2724091.429 ops/s
# Warmup Iteration   7: 2713913.637 ops/s
# Warmup Iteration   8: 2724820.971 ops/s
# Warmup Iteration   9: 2628379.827 ops/s
# Warmup Iteration  10: 2668622.581 ops/s
# Warmup Iteration  11: 2735205.204 ops/s
# Warmup Iteration  12: 2730274.229 ops/s
# Warmup Iteration  13: 2740258.422 ops/s
# Warmup Iteration  14: 2717434.188 ops/s
# Warmup Iteration  15: 2631795.390 ops/s
# Warmup Iteration  16: 2714263.988 ops/s
# Warmup Iteration  17: 2758740.243 ops/s
# Warmup Iteration  18: 2729740.883 ops/s
# Warmup Iteration  19: 2685358.469 ops/s
# Warmup Iteration  20: 2610849.423 ops/s
# Warmup Iteration  21: 2581810.026 ops/s
# Warmup Iteration  22: 2643952.103 ops/s
# Warmup Iteration  23: 2581983.582 ops/s
# Warmup Iteration  24: 2722274.327 ops/s
# Warmup Iteration  25: 2698104.423 ops/s
# Warmup Iteration  26: 2722488.694 ops/s
# Warmup Iteration  27: 2710575.409 ops/s
# Warmup Iteration  28: 2608358.229 ops/s
# Warmup Iteration  29: 2698027.681 ops/s
# Warmup Iteration  30: 2596467.060 ops/s
Iteration   1: 2691530.970 ops/s
Iteration   2: 2712968.175 ops/s
Iteration   3: 2734970.511 ops/s
Iteration   4: 2726468.721 ops/s
Iteration   5: 2693920.548 ops/s
Iteration   6: 2682408.823 ops/s
Iteration   7: 2728267.045 ops/s
Iteration   8: 2722268.038 ops/s
Iteration   9: 2689170.081 ops/s
Iteration  10: 2617124.914 ops/s
Iteration  11: 2701062.860 ops/s
Iteration  12: 2607376.289 ops/s
Iteration  13: 2617084.141 ops/s
Iteration  14: 2703323.245 ops/s
Iteration  15: 2664458.311 ops/s
Iteration  16: 2631009.600 ops/s
Iteration  17: 2706278.630 ops/s
Iteration  18: 2615425.936 ops/s
Iteration  19: 2665138.292 ops/s
Iteration  20: 2707078.953 ops/s
Iteration  21: 2672644.666 ops/s
Iteration  22: 2613167.829 ops/s
Iteration  23: 2541651.960 ops/s
Iteration  24: 2601237.703 ops/s
Iteration  25: 2584584.478 ops/s
Iteration  26: 2725235.366 ops/s
Iteration  27: 2740278.555 ops/s
Iteration  28: 2668751.517 ops/s
Iteration  29: 2676656.716 ops/s
Iteration  30: 2683443.870 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getAny":
  2670832.891 ±(99.9%) 34136.542 ops/s [Average]
  (min, avg, max) = (2541651.960, 2670832.891, 2740278.555), stdev = 51093.973
  CI (99.9%): [2636696.349, 2704969.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getAny  thrpt   30  2670832.891 ± 34136.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 908791.941 ops/s
# Warmup Iteration   2: 2192921.267 ops/s
# Warmup Iteration   3: 2340910.569 ops/s
# Warmup Iteration   4: 1906505.131 ops/s
# Warmup Iteration   5: 2323472.468 ops/s
# Warmup Iteration   6: 2308422.637 ops/s
# Warmup Iteration   7: 2299718.428 ops/s
# Warmup Iteration   8: 2312914.268 ops/s
# Warmup Iteration   9: 2311750.741 ops/s
# Warmup Iteration  10: 2328464.791 ops/s
# Warmup Iteration  11: 2263883.788 ops/s
# Warmup Iteration  12: 2274173.099 ops/s
# Warmup Iteration  13: 2291748.855 ops/s
# Warmup Iteration  14: 2325386.082 ops/s
# Warmup Iteration  15: 2293516.299 ops/s
# Warmup Iteration  16: 2300029.971 ops/s
# Warmup Iteration  17: 2314460.148 ops/s
# Warmup Iteration  18: 2311346.531 ops/s
# Warmup Iteration  19: 2324354.023 ops/s
# Warmup Iteration  20: 2327957.863 ops/s
# Warmup Iteration  21: 2282188.930 ops/s
# Warmup Iteration  22: 2279721.371 ops/s
# Warmup Iteration  23: 2221011.781 ops/s
# Warmup Iteration  24: 2315649.059 ops/s
# Warmup Iteration  25: 2313803.772 ops/s
# Warmup Iteration  26: 2279192.052 ops/s
# Warmup Iteration  27: 2234517.926 ops/s
# Warmup Iteration  28: 2275583.289 ops/s
# Warmup Iteration  29: 2330996.378 ops/s
# Warmup Iteration  30: 2283121.229 ops/s
Iteration   1: 2329533.404 ops/s
Iteration   2: 2240704.208 ops/s
Iteration   3: 2309020.969 ops/s
Iteration   4: 2299661.050 ops/s
Iteration   5: 2319591.872 ops/s
Iteration   6: 2332569.825 ops/s
Iteration   7: 2355077.522 ops/s
Iteration   8: 2299582.860 ops/s
Iteration   9: 2215617.016 ops/s
Iteration  10: 2290599.188 ops/s
Iteration  11: 2278126.011 ops/s
Iteration  12: 2345496.739 ops/s
Iteration  13: 2325670.185 ops/s
Iteration  14: 2328697.125 ops/s
Iteration  15: 2313216.298 ops/s
Iteration  16: 2300207.250 ops/s
Iteration  17: 2346043.730 ops/s
Iteration  18: 2335502.033 ops/s
Iteration  19: 2320426.808 ops/s
Iteration  20: 2332331.348 ops/s
Iteration  21: 2325313.293 ops/s
Iteration  22: 2252654.961 ops/s
Iteration  23: 2292988.481 ops/s
Iteration  24: 2268514.137 ops/s
Iteration  25: 2294333.225 ops/s
Iteration  26: 2260834.076 ops/s
Iteration  27: 2345901.561 ops/s
Iteration  28: 2333515.234 ops/s
Iteration  29: 2322081.215 ops/s
Iteration  30: 2299142.766 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getFirst":
  2307098.480 ±(99.9%) 22503.888 ops/s [Average]
  (min, avg, max) = (2215617.016, 2307098.480, 2355077.522), stdev = 33682.763
  CI (99.9%): [2284594.591, 2329602.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getFirst  thrpt   30  2307098.480 ± 22503.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 897464.925 ops/s
# Warmup Iteration   2: 2220947.441 ops/s
# Warmup Iteration   3: 2318267.181 ops/s
# Warmup Iteration   4: 1853518.365 ops/s
# Warmup Iteration   5: 2252189.279 ops/s
# Warmup Iteration   6: 2333077.600 ops/s
# Warmup Iteration   7: 2334241.850 ops/s
# Warmup Iteration   8: 2328527.195 ops/s
# Warmup Iteration   9: 2230977.024 ops/s
# Warmup Iteration  10: 2300178.250 ops/s
# Warmup Iteration  11: 2275058.386 ops/s
# Warmup Iteration  12: 2302079.403 ops/s
# Warmup Iteration  13: 2334096.702 ops/s
# Warmup Iteration  14: 2338508.854 ops/s
# Warmup Iteration  15: 2347800.484 ops/s
# Warmup Iteration  16: 2262021.167 ops/s
# Warmup Iteration  17: 2250274.400 ops/s
# Warmup Iteration  18: 2221005.657 ops/s
# Warmup Iteration  19: 2339638.840 ops/s
# Warmup Iteration  20: 2298498.209 ops/s
# Warmup Iteration  21: 2264962.729 ops/s
# Warmup Iteration  22: 2288570.856 ops/s
# Warmup Iteration  23: 2314332.240 ops/s
# Warmup Iteration  24: 2296719.051 ops/s
# Warmup Iteration  25: 2288151.365 ops/s
# Warmup Iteration  26: 2262795.958 ops/s
# Warmup Iteration  27: 2300440.608 ops/s
# Warmup Iteration  28: 2242612.052 ops/s
# Warmup Iteration  29: 2279947.971 ops/s
# Warmup Iteration  30: 2278147.290 ops/s
Iteration   1: 2318054.521 ops/s
Iteration   2: 2213476.873 ops/s
Iteration   3: 2343983.805 ops/s
Iteration   4: 2329782.205 ops/s
Iteration   5: 2327250.035 ops/s
Iteration   6: 2335838.606 ops/s
Iteration   7: 2355922.335 ops/s
Iteration   8: 2300840.957 ops/s
Iteration   9: 2360153.462 ops/s
Iteration  10: 2346427.166 ops/s
Iteration  11: 2343969.474 ops/s
Iteration  12: 2323480.595 ops/s
Iteration  13: 2328825.908 ops/s
Iteration  14: 2318747.497 ops/s
Iteration  15: 2313928.598 ops/s
Iteration  16: 2346917.270 ops/s
Iteration  17: 2332645.481 ops/s
Iteration  18: 2316402.456 ops/s
Iteration  19: 2332181.569 ops/s
Iteration  20: 2303672.691 ops/s
Iteration  21: 2311378.000 ops/s
Iteration  22: 2299420.486 ops/s
Iteration  23: 2329651.157 ops/s
Iteration  24: 2318398.245 ops/s
Iteration  25: 2201764.135 ops/s
Iteration  26: 2257373.808 ops/s
Iteration  27: 2276466.338 ops/s
Iteration  28: 2265139.691 ops/s
Iteration  29: 2308191.073 ops/s
Iteration  30: 2354325.513 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getLast":
  2313820.332 ±(99.9%) 25389.811 ops/s [Average]
  (min, avg, max) = (2201764.135, 2313820.332, 2360153.462), stdev = 38002.277
  CI (99.9%): [2288430.520, 2339210.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getLast  thrpt   30  2313820.332 ± 25389.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1385803.579 ops/s
# Warmup Iteration   2: 3632610.383 ops/s
# Warmup Iteration   3: 3502179.865 ops/s
# Warmup Iteration   4: 3127464.267 ops/s
# Warmup Iteration   5: 3591992.564 ops/s
# Warmup Iteration   6: 3538207.635 ops/s
# Warmup Iteration   7: 3549989.614 ops/s
# Warmup Iteration   8: 3415889.587 ops/s
# Warmup Iteration   9: 3500743.356 ops/s
# Warmup Iteration  10: 3534139.184 ops/s
# Warmup Iteration  11: 3478383.262 ops/s
# Warmup Iteration  12: 3383737.474 ops/s
# Warmup Iteration  13: 3377603.091 ops/s
# Warmup Iteration  14: 3411375.645 ops/s
# Warmup Iteration  15: 3531304.888 ops/s
# Warmup Iteration  16: 3423383.610 ops/s
# Warmup Iteration  17: 3499126.772 ops/s
# Warmup Iteration  18: 3487907.225 ops/s
# Warmup Iteration  19: 3583281.502 ops/s
# Warmup Iteration  20: 3637824.400 ops/s
# Warmup Iteration  21: 3538949.570 ops/s
# Warmup Iteration  22: 3596817.273 ops/s
# Warmup Iteration  23: 3591105.799 ops/s
# Warmup Iteration  24: 3589668.797 ops/s
# Warmup Iteration  25: 3626351.363 ops/s
# Warmup Iteration  26: 3725432.326 ops/s
# Warmup Iteration  27: 3726810.537 ops/s
# Warmup Iteration  28: 3661201.145 ops/s
# Warmup Iteration  29: 3696955.836 ops/s
# Warmup Iteration  30: 3712905.981 ops/s
Iteration   1: 3684867.235 ops/s
Iteration   2: 3679359.943 ops/s
Iteration   3: 3728337.502 ops/s
Iteration   4: 3692140.736 ops/s
Iteration   5: 3695545.490 ops/s
Iteration   6: 3731721.939 ops/s
Iteration   7: 3644367.188 ops/s
Iteration   8: 3682496.235 ops/s
Iteration   9: 3655297.236 ops/s
Iteration  10: 3704167.604 ops/s
Iteration  11: 3707734.603 ops/s
Iteration  12: 3663252.337 ops/s
Iteration  13: 3686355.679 ops/s
Iteration  14: 3600157.400 ops/s
Iteration  15: 3666060.625 ops/s
Iteration  16: 3646837.171 ops/s
Iteration  17: 3649562.321 ops/s
Iteration  18: 3726295.072 ops/s
Iteration  19: 3710152.015 ops/s
Iteration  20: 3710135.450 ops/s
Iteration  21: 3674805.255 ops/s
Iteration  22: 3679005.077 ops/s
Iteration  23: 3646986.054 ops/s
Iteration  24: 3696280.343 ops/s
Iteration  25: 3750572.107 ops/s
Iteration  26: 3733992.780 ops/s
Iteration  27: 3723352.796 ops/s
Iteration  28: 3627746.153 ops/s
Iteration  29: 3679641.021 ops/s
Iteration  30: 3715443.891 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly":
  3686422.309 ±(99.9%) 23358.786 ops/s [Average]
  (min, avg, max) = (3600157.400, 3686422.309, 3750572.107), stdev = 34962.333
  CI (99.9%): [3663063.523, 3709781.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly  thrpt   30  3686422.309 ± 23358.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 598696.464 ops/s
# Warmup Iteration   2: 644269.788 ops/s
# Warmup Iteration   3: 856742.281 ops/s
# Warmup Iteration   4: 874047.984 ops/s
# Warmup Iteration   5: 873763.184 ops/s
# Warmup Iteration   6: 884978.154 ops/s
# Warmup Iteration   7: 874047.778 ops/s
# Warmup Iteration   8: 855124.864 ops/s
# Warmup Iteration   9: 865240.338 ops/s
# Warmup Iteration  10: 780669.487 ops/s
# Warmup Iteration  11: 900237.853 ops/s
# Warmup Iteration  12: 872472.540 ops/s
# Warmup Iteration  13: 880936.763 ops/s
# Warmup Iteration  14: 910053.945 ops/s
# Warmup Iteration  15: 901518.728 ops/s
# Warmup Iteration  16: 896504.599 ops/s
# Warmup Iteration  17: 921702.959 ops/s
# Warmup Iteration  18: 954589.650 ops/s
# Warmup Iteration  19: 922698.377 ops/s
# Warmup Iteration  20: 918554.803 ops/s
# Warmup Iteration  21: 966351.801 ops/s
# Warmup Iteration  22: 948847.774 ops/s
# Warmup Iteration  23: 948197.967 ops/s
# Warmup Iteration  24: 932713.970 ops/s
# Warmup Iteration  25: 922237.942 ops/s
# Warmup Iteration  26: 911433.242 ops/s
# Warmup Iteration  27: 937949.872 ops/s
# Warmup Iteration  28: 905735.264 ops/s
# Warmup Iteration  29: 952586.937 ops/s
# Warmup Iteration  30: 958617.895 ops/s
Iteration   1: 962952.356 ops/s
Iteration   2: 962086.564 ops/s
Iteration   3: 955439.438 ops/s
Iteration   4: 959467.281 ops/s
Iteration   5: 960214.103 ops/s
Iteration   6: 950013.682 ops/s
Iteration   7: 951167.482 ops/s
Iteration   8: 952897.606 ops/s
Iteration   9: 957971.059 ops/s
Iteration  10: 933711.003 ops/s
Iteration  11: 948204.522 ops/s
Iteration  12: 939740.397 ops/s
Iteration  13: 934352.063 ops/s
Iteration  14: 965496.807 ops/s
Iteration  15: 943283.798 ops/s
Iteration  16: 946916.243 ops/s
Iteration  17: 956731.967 ops/s
Iteration  18: 952598.052 ops/s
Iteration  19: 948844.954 ops/s
Iteration  20: 956276.185 ops/s
Iteration  21: 958811.476 ops/s
Iteration  22: 957043.636 ops/s
Iteration  23: 957450.881 ops/s
Iteration  24: 961971.391 ops/s
Iteration  25: 955961.479 ops/s
Iteration  26: 940136.840 ops/s
Iteration  27: 958673.960 ops/s
Iteration  28: 956489.833 ops/s
Iteration  29: 964931.801 ops/s
Iteration  30: 957612.617 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws":
  953581.649 ±(99.9%) 5670.823 ops/s [Average]
  (min, avg, max) = (933711.003, 953581.649, 965496.807), stdev = 8487.822
  CI (99.9%): [947910.826, 959252.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  953581.649 ± 5670.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 529003.702 ops/s
# Warmup Iteration   2: 650921.255 ops/s
# Warmup Iteration   3: 867077.435 ops/s
# Warmup Iteration   4: 865332.408 ops/s
# Warmup Iteration   5: 840276.484 ops/s
# Warmup Iteration   6: 876922.064 ops/s
# Warmup Iteration   7: 852628.995 ops/s
# Warmup Iteration   8: 843315.327 ops/s
# Warmup Iteration   9: 840596.836 ops/s
# Warmup Iteration  10: 706720.401 ops/s
# Warmup Iteration  11: 866551.346 ops/s
# Warmup Iteration  12: 863961.689 ops/s
# Warmup Iteration  13: 872627.185 ops/s
# Warmup Iteration  14: 865131.447 ops/s
# Warmup Iteration  15: 865984.878 ops/s
# Warmup Iteration  16: 860456.996 ops/s
# Warmup Iteration  17: 905714.381 ops/s
# Warmup Iteration  18: 909105.413 ops/s
# Warmup Iteration  19: 912945.803 ops/s
# Warmup Iteration  20: 910039.595 ops/s
# Warmup Iteration  21: 913823.901 ops/s
# Warmup Iteration  22: 919306.855 ops/s
# Warmup Iteration  23: 878444.610 ops/s
# Warmup Iteration  24: 889149.448 ops/s
# Warmup Iteration  25: 903907.656 ops/s
# Warmup Iteration  26: 916638.430 ops/s
# Warmup Iteration  27: 930370.760 ops/s
# Warmup Iteration  28: 928849.965 ops/s
# Warmup Iteration  29: 929866.282 ops/s
# Warmup Iteration  30: 930127.278 ops/s
Iteration   1: 929373.111 ops/s
Iteration   2: 914487.071 ops/s
Iteration   3: 871750.107 ops/s
Iteration   4: 877763.622 ops/s
Iteration   5: 915428.994 ops/s
Iteration   6: 923924.172 ops/s
Iteration   7: 909881.758 ops/s
Iteration   8: 882039.688 ops/s
Iteration   9: 918155.976 ops/s
Iteration  10: 909625.397 ops/s
Iteration  11: 907441.360 ops/s
Iteration  12: 919226.048 ops/s
Iteration  13: 926730.360 ops/s
Iteration  14: 925416.310 ops/s
Iteration  15: 923299.621 ops/s
Iteration  16: 914795.693 ops/s
Iteration  17: 918512.807 ops/s
Iteration  18: 894414.901 ops/s
Iteration  19: 919207.876 ops/s
Iteration  20: 905559.481 ops/s
Iteration  21: 905567.912 ops/s
Iteration  22: 926001.222 ops/s
Iteration  23: 924085.568 ops/s
Iteration  24: 922579.911 ops/s
Iteration  25: 904871.693 ops/s
Iteration  26: 893437.506 ops/s
Iteration  27: 913955.310 ops/s
Iteration  28: 911934.164 ops/s
Iteration  29: 910189.695 ops/s
Iteration  30: 913037.083 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  911089.814 ±(99.9%) 9709.220 ops/s [Average]
  (min, avg, max) = (871750.107, 911089.814, 929373.111), stdev = 14532.305
  CI (99.9%): [901380.594, 920799.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  911089.814 ± 9709.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108943.326 ops/s
# Warmup Iteration   2: 171639.619 ops/s
# Warmup Iteration   3: 214637.491 ops/s
# Warmup Iteration   4: 222106.747 ops/s
# Warmup Iteration   5: 222131.839 ops/s
# Warmup Iteration   6: 223910.541 ops/s
# Warmup Iteration   7: 180231.605 ops/s
# Warmup Iteration   8: 218531.199 ops/s
# Warmup Iteration   9: 222508.821 ops/s
# Warmup Iteration  10: 222420.431 ops/s
# Warmup Iteration  11: 221551.246 ops/s
# Warmup Iteration  12: 222861.212 ops/s
# Warmup Iteration  13: 224549.470 ops/s
# Warmup Iteration  14: 221549.142 ops/s
# Warmup Iteration  15: 222037.684 ops/s
# Warmup Iteration  16: 222044.780 ops/s
# Warmup Iteration  17: 219573.802 ops/s
# Warmup Iteration  18: 222437.681 ops/s
# Warmup Iteration  19: 214555.138 ops/s
# Warmup Iteration  20: 212964.479 ops/s
# Warmup Iteration  21: 216031.884 ops/s
# Warmup Iteration  22: 224883.773 ops/s
# Warmup Iteration  23: 224480.756 ops/s
# Warmup Iteration  24: 221396.143 ops/s
# Warmup Iteration  25: 209320.000 ops/s
# Warmup Iteration  26: 213275.462 ops/s
# Warmup Iteration  27: 220466.865 ops/s
# Warmup Iteration  28: 220751.969 ops/s
# Warmup Iteration  29: 223890.799 ops/s
# Warmup Iteration  30: 220397.199 ops/s
Iteration   1: 220453.641 ops/s
Iteration   2: 222859.230 ops/s
Iteration   3: 223807.850 ops/s
Iteration   4: 218056.405 ops/s
Iteration   5: 216593.864 ops/s
Iteration   6: 213550.321 ops/s
Iteration   7: 220594.850 ops/s
Iteration   8: 219998.941 ops/s
Iteration   9: 221776.837 ops/s
Iteration  10: 222148.074 ops/s
Iteration  11: 212906.196 ops/s
Iteration  12: 224505.299 ops/s
Iteration  13: 217347.843 ops/s
Iteration  14: 222374.463 ops/s
Iteration  15: 215610.489 ops/s
Iteration  16: 223455.630 ops/s
Iteration  17: 222867.257 ops/s
Iteration  18: 221671.972 ops/s
Iteration  19: 218699.321 ops/s
Iteration  20: 223933.061 ops/s
Iteration  21: 218526.308 ops/s
Iteration  22: 219805.174 ops/s
Iteration  23: 219990.198 ops/s
Iteration  24: 221541.681 ops/s
Iteration  25: 221640.043 ops/s
Iteration  26: 225590.078 ops/s
Iteration  27: 223094.170 ops/s
Iteration  28: 220923.445 ops/s
Iteration  29: 221509.702 ops/s
Iteration  30: 215392.143 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupBy":
  220374.150 ±(99.9%) 2145.026 ops/s [Average]
  (min, avg, max) = (212906.196, 220374.150, 225590.078), stdev = 3210.574
  CI (99.9%): [218229.123, 222519.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupBy  thrpt   30  220374.150 ± 2145.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33259.255 ops/s
# Warmup Iteration   2: 49586.740 ops/s
# Warmup Iteration   3: 62518.610 ops/s
# Warmup Iteration   4: 61404.251 ops/s
# Warmup Iteration   5: 58805.631 ops/s
# Warmup Iteration   6: 62036.354 ops/s
# Warmup Iteration   7: 60722.342 ops/s
# Warmup Iteration   8: 53438.172 ops/s
# Warmup Iteration   9: 62052.403 ops/s
# Warmup Iteration  10: 61393.564 ops/s
# Warmup Iteration  11: 62460.974 ops/s
# Warmup Iteration  12: 61751.046 ops/s
# Warmup Iteration  13: 62201.281 ops/s
# Warmup Iteration  14: 62051.971 ops/s
# Warmup Iteration  15: 62032.299 ops/s
# Warmup Iteration  16: 61370.849 ops/s
# Warmup Iteration  17: 60349.178 ops/s
# Warmup Iteration  18: 59764.740 ops/s
# Warmup Iteration  19: 61084.491 ops/s
# Warmup Iteration  20: 61485.258 ops/s
# Warmup Iteration  21: 62450.336 ops/s
# Warmup Iteration  22: 62001.381 ops/s
# Warmup Iteration  23: 58952.314 ops/s
# Warmup Iteration  24: 61752.668 ops/s
# Warmup Iteration  25: 61211.162 ops/s
# Warmup Iteration  26: 61810.662 ops/s
# Warmup Iteration  27: 62555.592 ops/s
# Warmup Iteration  28: 62057.758 ops/s
# Warmup Iteration  29: 62062.498 ops/s
# Warmup Iteration  30: 61691.115 ops/s
Iteration   1: 61631.778 ops/s
Iteration   2: 62574.337 ops/s
Iteration   3: 62219.199 ops/s
Iteration   4: 61276.237 ops/s
Iteration   5: 62408.654 ops/s
Iteration   6: 62059.903 ops/s
Iteration   7: 61782.832 ops/s
Iteration   8: 62528.922 ops/s
Iteration   9: 62014.212 ops/s
Iteration  10: 61267.840 ops/s
Iteration  11: 62088.685 ops/s
Iteration  12: 62143.434 ops/s
Iteration  13: 62533.211 ops/s
Iteration  14: 62616.179 ops/s
Iteration  15: 61767.113 ops/s
Iteration  16: 61953.699 ops/s
Iteration  17: 63230.822 ops/s
Iteration  18: 62927.996 ops/s
Iteration  19: 62333.784 ops/s
Iteration  20: 62842.327 ops/s
Iteration  21: 63212.199 ops/s
Iteration  22: 63204.866 ops/s
Iteration  23: 61765.917 ops/s
Iteration  24: 62623.127 ops/s
Iteration  25: 62634.924 ops/s
Iteration  26: 62359.224 ops/s
Iteration  27: 61535.290 ops/s
Iteration  28: 62158.618 ops/s
Iteration  29: 61668.874 ops/s
Iteration  30: 61311.268 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByEach":
  62222.516 ±(99.9%) 377.392 ops/s [Average]
  (min, avg, max) = (61267.840, 62222.516, 63230.822), stdev = 564.863
  CI (99.9%): [61845.124, 62599.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt      Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByEach  thrpt   30  62222.516 ± 377.392  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1314775.564 ops/s
# Warmup Iteration   2: 3011390.074 ops/s
# Warmup Iteration   3: 3117502.895 ops/s
# Warmup Iteration   4: 2955471.905 ops/s
# Warmup Iteration   5: 2760363.324 ops/s
# Warmup Iteration   6: 3213673.937 ops/s
# Warmup Iteration   7: 3079679.425 ops/s
# Warmup Iteration   8: 3092159.219 ops/s
# Warmup Iteration   9: 3209864.163 ops/s
# Warmup Iteration  10: 3276418.730 ops/s
# Warmup Iteration  11: 3229345.023 ops/s
# Warmup Iteration  12: 3237052.407 ops/s
# Warmup Iteration  13: 3169794.323 ops/s
# Warmup Iteration  14: 3096026.646 ops/s
# Warmup Iteration  15: 3168493.187 ops/s
# Warmup Iteration  16: 3223305.848 ops/s
# Warmup Iteration  17: 3237396.455 ops/s
# Warmup Iteration  18: 3248964.750 ops/s
# Warmup Iteration  19: 3216467.976 ops/s
# Warmup Iteration  20: 3208483.941 ops/s
# Warmup Iteration  21: 3221490.074 ops/s
# Warmup Iteration  22: 3213457.660 ops/s
# Warmup Iteration  23: 3198851.265 ops/s
# Warmup Iteration  24: 3241006.718 ops/s
# Warmup Iteration  25: 3234048.378 ops/s
# Warmup Iteration  26: 3200151.927 ops/s
# Warmup Iteration  27: 3226014.034 ops/s
# Warmup Iteration  28: 3191817.636 ops/s
# Warmup Iteration  29: 3195893.974 ops/s
# Warmup Iteration  30: 3229876.075 ops/s
Iteration   1: 3041939.758 ops/s
Iteration   2: 3249745.051 ops/s
Iteration   3: 3128587.470 ops/s
Iteration   4: 3103448.869 ops/s
Iteration   5: 3188371.025 ops/s
Iteration   6: 3060368.670 ops/s
Iteration   7: 3111331.883 ops/s
Iteration   8: 3077009.897 ops/s
Iteration   9: 3207125.086 ops/s
Iteration  10: 3210226.138 ops/s
Iteration  11: 3179973.631 ops/s
Iteration  12: 3244813.812 ops/s
Iteration  13: 3242140.657 ops/s
Iteration  14: 3095320.562 ops/s
Iteration  15: 3261861.798 ops/s
Iteration  16: 3186724.886 ops/s
Iteration  17: 3167765.829 ops/s
Iteration  18: 3060711.723 ops/s
Iteration  19: 3032467.602 ops/s
Iteration  20: 3178949.782 ops/s
Iteration  21: 3203926.241 ops/s
Iteration  22: 3190446.008 ops/s
Iteration  23: 3225292.460 ops/s
Iteration  24: 3115554.092 ops/s
Iteration  25: 3156700.637 ops/s
Iteration  26: 3045906.780 ops/s
Iteration  27: 3094589.088 ops/s
Iteration  28: 3251999.178 ops/s
Iteration  29: 3182004.097 ops/s
Iteration  30: 3086762.188 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey":
  3152735.497 ±(99.9%) 47436.698 ops/s [Average]
  (min, avg, max) = (3032467.602, 3152735.497, 3261861.798), stdev = 71001.022
  CI (99.9%): [3105298.799, 3200172.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3152735.497 ± 47436.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1052826.724 ops/s
# Warmup Iteration   2: 2145608.726 ops/s
# Warmup Iteration   3: 2423399.034 ops/s
# Warmup Iteration   4: 2418201.951 ops/s
# Warmup Iteration   5: 1993059.303 ops/s
# Warmup Iteration   6: 2430162.134 ops/s
# Warmup Iteration   7: 2434686.292 ops/s
# Warmup Iteration   8: 2404940.660 ops/s
# Warmup Iteration   9: 2420033.247 ops/s
# Warmup Iteration  10: 2464485.771 ops/s
# Warmup Iteration  11: 2433308.347 ops/s
# Warmup Iteration  12: 2431550.399 ops/s
# Warmup Iteration  13: 2398695.657 ops/s
# Warmup Iteration  14: 2405552.623 ops/s
# Warmup Iteration  15: 2409301.446 ops/s
# Warmup Iteration  16: 2439550.751 ops/s
# Warmup Iteration  17: 2339591.093 ops/s
# Warmup Iteration  18: 2420508.865 ops/s
# Warmup Iteration  19: 2430005.443 ops/s
# Warmup Iteration  20: 2433395.380 ops/s
# Warmup Iteration  21: 2424496.642 ops/s
# Warmup Iteration  22: 2326353.995 ops/s
# Warmup Iteration  23: 2308298.115 ops/s
# Warmup Iteration  24: 2410752.407 ops/s
# Warmup Iteration  25: 2327435.938 ops/s
# Warmup Iteration  26: 2341298.886 ops/s
# Warmup Iteration  27: 2332752.997 ops/s
# Warmup Iteration  28: 2316037.962 ops/s
# Warmup Iteration  29: 2414614.873 ops/s
# Warmup Iteration  30: 2288583.892 ops/s
Iteration   1: 2383823.181 ops/s
Iteration   2: 2388778.691 ops/s
Iteration   3: 2402442.306 ops/s
Iteration   4: 2437143.242 ops/s
Iteration   5: 2420886.189 ops/s
Iteration   6: 2425192.441 ops/s
Iteration   7: 2440815.016 ops/s
Iteration   8: 2427551.076 ops/s
Iteration   9: 2440748.311 ops/s
Iteration  10: 2420417.653 ops/s
Iteration  11: 2409165.232 ops/s
Iteration  12: 2415749.995 ops/s
Iteration  13: 2425422.291 ops/s
Iteration  14: 2293365.950 ops/s
Iteration  15: 2430974.036 ops/s
Iteration  16: 2360902.162 ops/s
Iteration  17: 2325125.584 ops/s
Iteration  18: 2445103.666 ops/s
Iteration  19: 2424686.133 ops/s
Iteration  20: 2452609.019 ops/s
Iteration  21: 2463047.394 ops/s
Iteration  22: 2440416.504 ops/s
Iteration  23: 2377444.687 ops/s
Iteration  24: 2301651.535 ops/s
Iteration  25: 2323906.803 ops/s
Iteration  26: 2353949.053 ops/s
Iteration  27: 2312513.584 ops/s
Iteration  28: 2270125.443 ops/s
Iteration  29: 2406854.625 ops/s
Iteration  30: 2307139.583 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target":
  2390931.713 ±(99.9%) 36725.459 ops/s [Average]
  (min, avg, max) = (2270125.443, 2390931.713, 2463047.394), stdev = 54968.943
  CI (99.9%): [2354206.253, 2427657.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2390931.713 ± 36725.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 368593.679 ops/s
# Warmup Iteration   2: 459113.572 ops/s
# Warmup Iteration   3: 592651.594 ops/s
# Warmup Iteration   4: 566280.370 ops/s
# Warmup Iteration   5: 591620.344 ops/s
# Warmup Iteration   6: 592547.760 ops/s
# Warmup Iteration   7: 593019.425 ops/s
# Warmup Iteration   8: 594678.117 ops/s
# Warmup Iteration   9: 514420.978 ops/s
# Warmup Iteration  10: 568860.378 ops/s
# Warmup Iteration  11: 590864.698 ops/s
# Warmup Iteration  12: 589297.807 ops/s
# Warmup Iteration  13: 592991.540 ops/s
# Warmup Iteration  14: 591951.929 ops/s
# Warmup Iteration  15: 590017.344 ops/s
# Warmup Iteration  16: 586422.398 ops/s
# Warmup Iteration  17: 623090.448 ops/s
# Warmup Iteration  18: 625273.613 ops/s
# Warmup Iteration  19: 628930.437 ops/s
# Warmup Iteration  20: 620888.821 ops/s
# Warmup Iteration  21: 618342.685 ops/s
# Warmup Iteration  22: 616144.369 ops/s
# Warmup Iteration  23: 618823.549 ops/s
# Warmup Iteration  24: 617847.881 ops/s
# Warmup Iteration  25: 617263.290 ops/s
# Warmup Iteration  26: 625352.453 ops/s
# Warmup Iteration  27: 616559.424 ops/s
# Warmup Iteration  28: 593990.139 ops/s
# Warmup Iteration  29: 586074.381 ops/s
# Warmup Iteration  30: 616072.242 ops/s
Iteration   1: 620554.655 ops/s
Iteration   2: 613667.374 ops/s
Iteration   3: 616154.762 ops/s
Iteration   4: 612384.711 ops/s
Iteration   5: 619449.583 ops/s
Iteration   6: 614865.578 ops/s
Iteration   7: 617594.705 ops/s
Iteration   8: 601200.675 ops/s
Iteration   9: 581193.840 ops/s
Iteration  10: 601841.770 ops/s
Iteration  11: 584994.533 ops/s
Iteration  12: 597378.972 ops/s
Iteration  13: 592457.169 ops/s
Iteration  14: 585712.637 ops/s
Iteration  15: 609127.016 ops/s
Iteration  16: 588554.415 ops/s
Iteration  17: 592209.364 ops/s
Iteration  18: 589639.647 ops/s
Iteration  19: 581460.031 ops/s
Iteration  20: 602714.630 ops/s
Iteration  21: 599820.675 ops/s
Iteration  22: 602336.072 ops/s
Iteration  23: 592253.631 ops/s
Iteration  24: 617576.667 ops/s
Iteration  25: 605919.637 ops/s
Iteration  26: 617344.095 ops/s
Iteration  27: 620886.343 ops/s
Iteration  28: 609713.901 ops/s
Iteration  29: 617724.529 ops/s
Iteration  30: 606912.101 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  603788.124 ±(99.9%) 8496.286 ops/s [Average]
  (min, avg, max) = (581193.840, 603788.124, 620886.343), stdev = 12716.842
  CI (99.9%): [595291.838, 612284.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  603788.124 ± 8496.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 387740.907 ops/s
# Warmup Iteration   2: 439198.545 ops/s
# Warmup Iteration   3: 603425.145 ops/s
# Warmup Iteration   4: 585631.732 ops/s
# Warmup Iteration   5: 593897.996 ops/s
# Warmup Iteration   6: 595743.453 ops/s
# Warmup Iteration   7: 602411.577 ops/s
# Warmup Iteration   8: 599218.241 ops/s
# Warmup Iteration   9: 603820.076 ops/s
# Warmup Iteration  10: 496698.709 ops/s
# Warmup Iteration  11: 607072.244 ops/s
# Warmup Iteration  12: 607428.629 ops/s
# Warmup Iteration  13: 578901.314 ops/s
# Warmup Iteration  14: 597421.768 ops/s
# Warmup Iteration  15: 592233.387 ops/s
# Warmup Iteration  16: 584331.146 ops/s
# Warmup Iteration  17: 623825.649 ops/s
# Warmup Iteration  18: 631624.330 ops/s
# Warmup Iteration  19: 634470.689 ops/s
# Warmup Iteration  20: 622824.301 ops/s
# Warmup Iteration  21: 630691.395 ops/s
# Warmup Iteration  22: 622041.579 ops/s
# Warmup Iteration  23: 619184.158 ops/s
# Warmup Iteration  24: 621634.989 ops/s
# Warmup Iteration  25: 620167.189 ops/s
# Warmup Iteration  26: 627191.743 ops/s
# Warmup Iteration  27: 630218.346 ops/s
# Warmup Iteration  28: 616276.758 ops/s
# Warmup Iteration  29: 626139.103 ops/s
# Warmup Iteration  30: 609019.617 ops/s
Iteration   1: 624075.320 ops/s
Iteration   2: 628228.648 ops/s
Iteration   3: 622503.869 ops/s
Iteration   4: 633529.869 ops/s
Iteration   5: 621599.110 ops/s
Iteration   6: 626213.380 ops/s
Iteration   7: 626002.614 ops/s
Iteration   8: 627923.159 ops/s
Iteration   9: 624821.613 ops/s
Iteration  10: 623185.550 ops/s
Iteration  11: 628576.201 ops/s
Iteration  12: 620150.592 ops/s
Iteration  13: 625076.574 ops/s
Iteration  14: 626930.470 ops/s
Iteration  15: 632027.611 ops/s
Iteration  16: 634522.779 ops/s
Iteration  17: 640943.497 ops/s
Iteration  18: 634959.546 ops/s
Iteration  19: 630921.565 ops/s
Iteration  20: 631731.413 ops/s
Iteration  21: 636756.617 ops/s
Iteration  22: 631403.676 ops/s
Iteration  23: 634157.135 ops/s
Iteration  24: 628572.192 ops/s
Iteration  25: 639665.131 ops/s
Iteration  26: 623338.019 ops/s
Iteration  27: 623667.462 ops/s
Iteration  28: 630952.640 ops/s
Iteration  29: 624999.864 ops/s
Iteration  30: 613715.123 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  628371.708 ±(99.9%) 4014.869 ops/s [Average]
  (min, avg, max) = (613715.123, 628371.708, 640943.497), stdev = 6009.267
  CI (99.9%): [624356.839, 632386.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  628371.708 ± 4014.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1645080.897 ops/s
# Warmup Iteration   2: 3850289.791 ops/s
# Warmup Iteration   3: 4115524.787 ops/s
# Warmup Iteration   4: 3563223.729 ops/s
# Warmup Iteration   5: 3948415.113 ops/s
# Warmup Iteration   6: 4127443.154 ops/s
# Warmup Iteration   7: 4079947.332 ops/s
# Warmup Iteration   8: 4102776.431 ops/s
# Warmup Iteration   9: 4186971.016 ops/s
# Warmup Iteration  10: 4158291.348 ops/s
# Warmup Iteration  11: 4098919.923 ops/s
# Warmup Iteration  12: 4097469.742 ops/s
# Warmup Iteration  13: 4102514.685 ops/s
# Warmup Iteration  14: 4132147.631 ops/s
# Warmup Iteration  15: 4084563.948 ops/s
# Warmup Iteration  16: 4120013.169 ops/s
# Warmup Iteration  17: 4081467.251 ops/s
# Warmup Iteration  18: 4080950.845 ops/s
# Warmup Iteration  19: 4141146.436 ops/s
# Warmup Iteration  20: 4045915.076 ops/s
# Warmup Iteration  21: 3995986.715 ops/s
# Warmup Iteration  22: 4124177.660 ops/s
# Warmup Iteration  23: 4133940.169 ops/s
# Warmup Iteration  24: 4137670.316 ops/s
# Warmup Iteration  25: 4101832.595 ops/s
# Warmup Iteration  26: 4104648.989 ops/s
# Warmup Iteration  27: 4128296.197 ops/s
# Warmup Iteration  28: 4184288.404 ops/s
# Warmup Iteration  29: 4130231.370 ops/s
# Warmup Iteration  30: 4141407.922 ops/s
Iteration   1: 4178819.200 ops/s
Iteration   2: 4147696.766 ops/s
Iteration   3: 4116048.062 ops/s
Iteration   4: 4092548.392 ops/s
Iteration   5: 4147419.490 ops/s
Iteration   6: 4123534.298 ops/s
Iteration   7: 4124890.831 ops/s
Iteration   8: 4101259.375 ops/s
Iteration   9: 4125594.473 ops/s
Iteration  10: 4079944.774 ops/s
Iteration  11: 4113254.878 ops/s
Iteration  12: 3964633.765 ops/s
Iteration  13: 3954134.426 ops/s
Iteration  14: 3970495.149 ops/s
Iteration  15: 4095178.854 ops/s
Iteration  16: 4156598.664 ops/s
Iteration  17: 4141873.442 ops/s
Iteration  18: 4116532.836 ops/s
Iteration  19: 4141013.058 ops/s
Iteration  20: 4066603.320 ops/s
Iteration  21: 4024921.176 ops/s
Iteration  22: 4115703.459 ops/s
Iteration  23: 3931942.904 ops/s
Iteration  24: 3897990.814 ops/s
Iteration  25: 3943055.645 ops/s
Iteration  26: 3939062.306 ops/s
Iteration  27: 3968045.299 ops/s
Iteration  28: 3984026.184 ops/s
Iteration  29: 3988017.718 ops/s
Iteration  30: 3970249.621 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectInto":
  4057369.639 ±(99.9%) 56727.047 ops/s [Average]
  (min, avg, max) = (3897990.814, 4057369.639, 4178819.200), stdev = 84906.380
  CI (99.9%): [4000642.592, 4114096.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectInto  thrpt   30  4057369.639 ± 56727.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1725717.934 ops/s
# Warmup Iteration   2: 3997565.996 ops/s
# Warmup Iteration   3: 4181981.605 ops/s
# Warmup Iteration   4: 3524066.890 ops/s
# Warmup Iteration   5: 4274529.066 ops/s
# Warmup Iteration   6: 4257937.646 ops/s
# Warmup Iteration   7: 4172180.843 ops/s
# Warmup Iteration   8: 4188459.010 ops/s
# Warmup Iteration   9: 4138638.561 ops/s
# Warmup Iteration  10: 4283070.686 ops/s
# Warmup Iteration  11: 4123163.491 ops/s
# Warmup Iteration  12: 4197656.031 ops/s
# Warmup Iteration  13: 4341732.379 ops/s
# Warmup Iteration  14: 4366408.641 ops/s
# Warmup Iteration  15: 4325682.195 ops/s
# Warmup Iteration  16: 4307270.441 ops/s
# Warmup Iteration  17: 4316758.846 ops/s
# Warmup Iteration  18: 4378220.054 ops/s
# Warmup Iteration  19: 4264411.092 ops/s
# Warmup Iteration  20: 4343780.360 ops/s
# Warmup Iteration  21: 4300950.842 ops/s
# Warmup Iteration  22: 4135690.727 ops/s
# Warmup Iteration  23: 4338639.059 ops/s
# Warmup Iteration  24: 4292785.378 ops/s
# Warmup Iteration  25: 4163054.628 ops/s
# Warmup Iteration  26: 4270559.307 ops/s
# Warmup Iteration  27: 4108830.353 ops/s
# Warmup Iteration  28: 4190362.849 ops/s
# Warmup Iteration  29: 4323211.292 ops/s
# Warmup Iteration  30: 4282549.418 ops/s
Iteration   1: 4349198.910 ops/s
Iteration   2: 4289801.425 ops/s
Iteration   3: 4300253.881 ops/s
Iteration   4: 4253137.664 ops/s
Iteration   5: 4314286.312 ops/s
Iteration   6: 4418478.065 ops/s
Iteration   7: 4309664.016 ops/s
Iteration   8: 4347314.046 ops/s
Iteration   9: 4351316.836 ops/s
Iteration  10: 4199040.047 ops/s
Iteration  11: 4342708.147 ops/s
Iteration  12: 4310652.924 ops/s
Iteration  13: 4403233.433 ops/s
Iteration  14: 4397438.433 ops/s
Iteration  15: 4390691.508 ops/s
Iteration  16: 4201150.935 ops/s
Iteration  17: 4231126.264 ops/s
Iteration  18: 4224541.120 ops/s
Iteration  19: 4263247.722 ops/s
Iteration  20: 4223587.812 ops/s
Iteration  21: 4213440.864 ops/s
Iteration  22: 4303056.817 ops/s
Iteration  23: 4313445.952 ops/s
Iteration  24: 4283106.468 ops/s
Iteration  25: 4356689.078 ops/s
Iteration  26: 4280368.560 ops/s
Iteration  27: 4349598.397 ops/s
Iteration  28: 4412061.995 ops/s
Iteration  29: 4363745.042 ops/s
Iteration  30: 4349695.343 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble":
  4311535.934 ±(99.9%) 43148.741 ops/s [Average]
  (min, avg, max) = (4199040.047, 4311535.934, 4418478.065), stdev = 64583.009
  CI (99.9%): [4268387.193, 4354684.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  4311535.934 ± 43148.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1738475.874 ops/s
# Warmup Iteration   2: 4089813.397 ops/s
# Warmup Iteration   3: 4093039.731 ops/s
# Warmup Iteration   4: 3478147.327 ops/s
# Warmup Iteration   5: 4325245.596 ops/s
# Warmup Iteration   6: 4300728.189 ops/s
# Warmup Iteration   7: 4317069.794 ops/s
# Warmup Iteration   8: 4323887.734 ops/s
# Warmup Iteration   9: 4369244.163 ops/s
# Warmup Iteration  10: 4346573.622 ops/s
# Warmup Iteration  11: 4300178.519 ops/s
# Warmup Iteration  12: 4302561.451 ops/s
# Warmup Iteration  13: 4238855.914 ops/s
# Warmup Iteration  14: 4206070.206 ops/s
# Warmup Iteration  15: 4334906.436 ops/s
# Warmup Iteration  16: 4365177.084 ops/s
# Warmup Iteration  17: 4360646.244 ops/s
# Warmup Iteration  18: 4365591.623 ops/s
# Warmup Iteration  19: 4379414.451 ops/s
# Warmup Iteration  20: 4309170.452 ops/s
# Warmup Iteration  21: 4316155.329 ops/s
# Warmup Iteration  22: 4301788.651 ops/s
# Warmup Iteration  23: 4335606.936 ops/s
# Warmup Iteration  24: 4273387.537 ops/s
# Warmup Iteration  25: 4276855.303 ops/s
# Warmup Iteration  26: 4175412.887 ops/s
# Warmup Iteration  27: 4235648.683 ops/s
# Warmup Iteration  28: 4346861.347 ops/s
# Warmup Iteration  29: 4295762.132 ops/s
# Warmup Iteration  30: 4408937.489 ops/s
Iteration   1: 4187226.528 ops/s
Iteration   2: 4135016.810 ops/s
Iteration   3: 4098722.036 ops/s
Iteration   4: 4319068.405 ops/s
Iteration   5: 4332841.574 ops/s
Iteration   6: 4316691.828 ops/s
Iteration   7: 4329764.146 ops/s
Iteration   8: 4266050.181 ops/s
Iteration   9: 4380206.728 ops/s
Iteration  10: 4164101.530 ops/s
Iteration  11: 4289372.410 ops/s
Iteration  12: 4223637.753 ops/s
Iteration  13: 4133644.619 ops/s
Iteration  14: 4265802.000 ops/s
Iteration  15: 4155612.506 ops/s
Iteration  16: 4331163.709 ops/s
Iteration  17: 4351416.714 ops/s
Iteration  18: 4321387.810 ops/s
Iteration  19: 4373649.892 ops/s
Iteration  20: 4383049.966 ops/s
Iteration  21: 4365100.494 ops/s
Iteration  22: 4204552.594 ops/s
Iteration  23: 4217144.562 ops/s
Iteration  24: 4349631.334 ops/s
Iteration  25: 4157714.535 ops/s
Iteration  26: 4159073.520 ops/s
Iteration  27: 4092672.015 ops/s
Iteration  28: 4152502.460 ops/s
Iteration  29: 4352895.573 ops/s
Iteration  30: 4162436.920 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat":
  4252405.038 ±(99.9%) 63555.652 ops/s [Average]
  (min, avg, max) = (4092672.015, 4252405.038, 4383049.966), stdev = 95127.116
  CI (99.9%): [4188849.386, 4315960.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  4252405.038 ± 63555.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1767728.819 ops/s
# Warmup Iteration   2: 4164801.425 ops/s
# Warmup Iteration   3: 4310565.579 ops/s
# Warmup Iteration   4: 3403450.314 ops/s
# Warmup Iteration   5: 4203733.319 ops/s
# Warmup Iteration   6: 4210524.146 ops/s
# Warmup Iteration   7: 4202544.482 ops/s
# Warmup Iteration   8: 4154131.513 ops/s
# Warmup Iteration   9: 4145331.283 ops/s
# Warmup Iteration  10: 4187460.019 ops/s
# Warmup Iteration  11: 4259052.953 ops/s
# Warmup Iteration  12: 4071458.297 ops/s
# Warmup Iteration  13: 4182170.352 ops/s
# Warmup Iteration  14: 4226637.228 ops/s
# Warmup Iteration  15: 4282618.647 ops/s
# Warmup Iteration  16: 4167369.442 ops/s
# Warmup Iteration  17: 4168954.027 ops/s
# Warmup Iteration  18: 4186148.750 ops/s
# Warmup Iteration  19: 4279736.356 ops/s
# Warmup Iteration  20: 4137539.671 ops/s
# Warmup Iteration  21: 4117167.462 ops/s
# Warmup Iteration  22: 4220396.208 ops/s
# Warmup Iteration  23: 4223791.058 ops/s
# Warmup Iteration  24: 4254630.165 ops/s
# Warmup Iteration  25: 4324154.579 ops/s
# Warmup Iteration  26: 4313896.079 ops/s
# Warmup Iteration  27: 4136573.095 ops/s
# Warmup Iteration  28: 4311960.198 ops/s
# Warmup Iteration  29: 4305861.241 ops/s
# Warmup Iteration  30: 4135564.665 ops/s
Iteration   1: 4198076.412 ops/s
Iteration   2: 4257458.915 ops/s
Iteration   3: 4290576.366 ops/s
Iteration   4: 4293300.020 ops/s
Iteration   5: 4348205.865 ops/s
Iteration   6: 4325883.816 ops/s
Iteration   7: 4260236.182 ops/s
Iteration   8: 4334789.455 ops/s
Iteration   9: 4317788.710 ops/s
Iteration  10: 4348804.898 ops/s
Iteration  11: 4335948.991 ops/s
Iteration  12: 4381120.293 ops/s
Iteration  13: 4380263.208 ops/s
Iteration  14: 4240487.657 ops/s
Iteration  15: 4306752.878 ops/s
Iteration  16: 4308391.269 ops/s
Iteration  17: 4283164.669 ops/s
Iteration  18: 4295833.882 ops/s
Iteration  19: 4275900.778 ops/s
Iteration  20: 4288369.570 ops/s
Iteration  21: 4059072.468 ops/s
Iteration  22: 4155927.265 ops/s
Iteration  23: 4185389.091 ops/s
Iteration  24: 4118725.715 ops/s
Iteration  25: 4177856.075 ops/s
Iteration  26: 4325887.706 ops/s
Iteration  27: 4265519.691 ops/s
Iteration  28: 4289115.860 ops/s
Iteration  29: 4342110.042 ops/s
Iteration  30: 4329772.148 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt":
  4277357.663 ±(99.9%) 50969.633 ops/s [Average]
  (min, avg, max) = (4059072.468, 4277357.663, 4381120.293), stdev = 76288.953
  CI (99.9%): [4226388.030, 4328327.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoInt  thrpt   30  4277357.663 ± 50969.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1732631.404 ops/s
# Warmup Iteration   2: 3878791.803 ops/s
# Warmup Iteration   3: 4077526.466 ops/s
# Warmup Iteration   4: 3440932.700 ops/s
# Warmup Iteration   5: 3818628.940 ops/s
# Warmup Iteration   6: 4018522.579 ops/s
# Warmup Iteration   7: 3902980.093 ops/s
# Warmup Iteration   8: 4084200.578 ops/s
# Warmup Iteration   9: 4109133.688 ops/s
# Warmup Iteration  10: 4068205.166 ops/s
# Warmup Iteration  11: 4061357.768 ops/s
# Warmup Iteration  12: 4049954.885 ops/s
# Warmup Iteration  13: 4067431.947 ops/s
# Warmup Iteration  14: 3882225.820 ops/s
# Warmup Iteration  15: 3902706.263 ops/s
# Warmup Iteration  16: 4011065.360 ops/s
# Warmup Iteration  17: 4011083.119 ops/s
# Warmup Iteration  18: 4103618.907 ops/s
# Warmup Iteration  19: 4013080.464 ops/s
# Warmup Iteration  20: 4077440.339 ops/s
# Warmup Iteration  21: 3960624.786 ops/s
# Warmup Iteration  22: 4048914.451 ops/s
# Warmup Iteration  23: 4087616.289 ops/s
# Warmup Iteration  24: 4051734.397 ops/s
# Warmup Iteration  25: 4033078.700 ops/s
# Warmup Iteration  26: 4078012.326 ops/s
# Warmup Iteration  27: 4060813.265 ops/s
# Warmup Iteration  28: 4081359.070 ops/s
# Warmup Iteration  29: 3971704.826 ops/s
# Warmup Iteration  30: 4062164.701 ops/s
Iteration   1: 4087201.296 ops/s
Iteration   2: 4051128.305 ops/s
Iteration   3: 4142632.501 ops/s
Iteration   4: 4061301.630 ops/s
Iteration   5: 4067282.045 ops/s
Iteration   6: 4061668.848 ops/s
Iteration   7: 4117300.563 ops/s
Iteration   8: 4065737.563 ops/s
Iteration   9: 4022440.958 ops/s
Iteration  10: 4070258.980 ops/s
Iteration  11: 3856006.527 ops/s
Iteration  12: 4116466.608 ops/s
Iteration  13: 4069197.960 ops/s
Iteration  14: 4016852.734 ops/s
Iteration  15: 4092774.537 ops/s
Iteration  16: 4006013.413 ops/s
Iteration  17: 4034174.339 ops/s
Iteration  18: 3966274.317 ops/s
Iteration  19: 3970761.913 ops/s
Iteration  20: 4067861.234 ops/s
Iteration  21: 3856587.420 ops/s
Iteration  22: 3983467.775 ops/s
Iteration  23: 3902082.160 ops/s
Iteration  24: 4050339.115 ops/s
Iteration  25: 3727843.423 ops/s
Iteration  26: 3901464.288 ops/s
Iteration  27: 3936116.741 ops/s
Iteration  28: 4054241.966 ops/s
Iteration  29: 3928114.326 ops/s
Iteration  30: 3994458.141 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong":
  4009268.388 ±(99.9%) 61825.895 ops/s [Average]
  (min, avg, max) = (3727843.423, 4009268.388, 4142632.501), stdev = 92538.096
  CI (99.9%): [3947442.493, 4071094.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoLong  thrpt   30  4009268.388 ± 61825.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1789134.997 ops/s
# Warmup Iteration   2: 4135506.075 ops/s
# Warmup Iteration   3: 4481769.146 ops/s
# Warmup Iteration   4: 3698600.001 ops/s
# Warmup Iteration   5: 4413929.698 ops/s
# Warmup Iteration   6: 4278523.231 ops/s
# Warmup Iteration   7: 4220362.881 ops/s
# Warmup Iteration   8: 4330201.977 ops/s
# Warmup Iteration   9: 4320092.974 ops/s
# Warmup Iteration  10: 4232039.270 ops/s
# Warmup Iteration  11: 4453997.698 ops/s
# Warmup Iteration  12: 4482277.651 ops/s
# Warmup Iteration  13: 4457637.450 ops/s
# Warmup Iteration  14: 4434499.614 ops/s
# Warmup Iteration  15: 4345297.135 ops/s
# Warmup Iteration  16: 4450239.943 ops/s
# Warmup Iteration  17: 4456740.333 ops/s
# Warmup Iteration  18: 4449336.808 ops/s
# Warmup Iteration  19: 4403890.161 ops/s
# Warmup Iteration  20: 4403606.776 ops/s
# Warmup Iteration  21: 4344358.584 ops/s
# Warmup Iteration  22: 4413591.354 ops/s
# Warmup Iteration  23: 4392366.906 ops/s
# Warmup Iteration  24: 4417061.600 ops/s
# Warmup Iteration  25: 4306150.381 ops/s
# Warmup Iteration  26: 4292497.118 ops/s
# Warmup Iteration  27: 4410855.907 ops/s
# Warmup Iteration  28: 4433703.933 ops/s
# Warmup Iteration  29: 4428183.712 ops/s
# Warmup Iteration  30: 4360658.254 ops/s
Iteration   1: 4427651.396 ops/s
Iteration   2: 4396471.382 ops/s
Iteration   3: 4419333.070 ops/s
Iteration   4: 4211898.765 ops/s
Iteration   5: 4407240.061 ops/s
Iteration   6: 4378826.833 ops/s
Iteration   7: 4451273.569 ops/s
Iteration   8: 4403490.060 ops/s
Iteration   9: 4457383.781 ops/s
Iteration  10: 4447134.054 ops/s
Iteration  11: 4489212.746 ops/s
Iteration  12: 4413369.674 ops/s
Iteration  13: 4420872.361 ops/s
Iteration  14: 4373200.571 ops/s
Iteration  15: 4270187.362 ops/s
Iteration  16: 4276262.706 ops/s
Iteration  17: 4325413.912 ops/s
Iteration  18: 4260342.093 ops/s
Iteration  19: 4127934.004 ops/s
Iteration  20: 4297803.710 ops/s
Iteration  21: 4269212.444 ops/s
Iteration  22: 4345574.277 ops/s
Iteration  23: 4458559.784 ops/s
Iteration  24: 4470131.564 ops/s
Iteration  25: 4391087.293 ops/s
Iteration  26: 4445903.444 ops/s
Iteration  27: 4447074.208 ops/s
Iteration  28: 4410320.418 ops/s
Iteration  29: 4405237.292 ops/s
Iteration  30: 4377149.044 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith":
  4375851.729 ±(99.9%) 57144.790 ops/s [Average]
  (min, avg, max) = (4127934.004, 4375851.729, 4489212.746), stdev = 85531.638
  CI (99.9%): [4318706.939, 4432996.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_injectIntoWith  thrpt   30  4375851.729 ± 57144.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1042786.386 ops/s
# Warmup Iteration   2: 2323907.926 ops/s
# Warmup Iteration   3: 1977605.498 ops/s
# Warmup Iteration   4: 2214286.868 ops/s
# Warmup Iteration   5: 2311903.700 ops/s
# Warmup Iteration   6: 2286778.193 ops/s
# Warmup Iteration   7: 2354973.311 ops/s
# Warmup Iteration   8: 2367984.799 ops/s
# Warmup Iteration   9: 2350473.971 ops/s
# Warmup Iteration  10: 2366859.366 ops/s
# Warmup Iteration  11: 2370285.935 ops/s
# Warmup Iteration  12: 2345186.118 ops/s
# Warmup Iteration  13: 2328209.834 ops/s
# Warmup Iteration  14: 2309900.214 ops/s
# Warmup Iteration  15: 2334777.998 ops/s
# Warmup Iteration  16: 2325438.454 ops/s
# Warmup Iteration  17: 2327111.432 ops/s
# Warmup Iteration  18: 2315311.357 ops/s
# Warmup Iteration  19: 2354145.582 ops/s
# Warmup Iteration  20: 2324462.903 ops/s
# Warmup Iteration  21: 2302611.729 ops/s
# Warmup Iteration  22: 2333352.567 ops/s
# Warmup Iteration  23: 2335088.088 ops/s
# Warmup Iteration  24: 2320557.875 ops/s
# Warmup Iteration  25: 2341338.698 ops/s
# Warmup Iteration  26: 2316682.992 ops/s
# Warmup Iteration  27: 2336812.829 ops/s
# Warmup Iteration  28: 2299960.702 ops/s
# Warmup Iteration  29: 2294365.790 ops/s
# Warmup Iteration  30: 2219445.707 ops/s
Iteration   1: 2230622.040 ops/s
Iteration   2: 2225646.548 ops/s
Iteration   3: 2291617.731 ops/s
Iteration   4: 2311408.974 ops/s
Iteration   5: 2260301.208 ops/s
Iteration   6: 2394935.455 ops/s
Iteration   7: 2392818.074 ops/s
Iteration   8: 2268430.684 ops/s
Iteration   9: 2351252.015 ops/s
Iteration  10: 2227533.197 ops/s
Iteration  11: 2292693.785 ops/s
Iteration  12: 2359893.200 ops/s
Iteration  13: 2344812.982 ops/s
Iteration  14: 2355395.852 ops/s
Iteration  15: 2353758.233 ops/s
Iteration  16: 2352736.497 ops/s
Iteration  17: 2331413.808 ops/s
Iteration  18: 2261750.946 ops/s
Iteration  19: 2268195.794 ops/s
Iteration  20: 2369686.175 ops/s
Iteration  21: 2350341.974 ops/s
Iteration  22: 2351658.046 ops/s
Iteration  23: 2308199.946 ops/s
Iteration  24: 2338581.707 ops/s
Iteration  25: 2310178.265 ops/s
Iteration  26: 2291282.082 ops/s
Iteration  27: 2347412.575 ops/s
Iteration  28: 2319861.965 ops/s
Iteration  29: 2347335.027 ops/s
Iteration  30: 2277944.225 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_isEmpty":
  2316256.634 ±(99.9%) 31802.018 ops/s [Average]
  (min, avg, max) = (2225646.548, 2316256.634, 2394935.455), stdev = 47599.768
  CI (99.9%): [2284454.615, 2348058.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_isEmpty  thrpt   30  2316256.634 ± 31802.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1518345.861 ops/s
# Warmup Iteration   2: 3707862.097 ops/s
# Warmup Iteration   3: 3757446.353 ops/s
# Warmup Iteration   4: 3058516.179 ops/s
# Warmup Iteration   5: 3717740.632 ops/s
# Warmup Iteration   6: 3608335.960 ops/s
# Warmup Iteration   7: 3720450.704 ops/s
# Warmup Iteration   8: 3691012.140 ops/s
# Warmup Iteration   9: 3669167.941 ops/s
# Warmup Iteration  10: 3658013.253 ops/s
# Warmup Iteration  11: 3697731.523 ops/s
# Warmup Iteration  12: 3768126.016 ops/s
# Warmup Iteration  13: 3776084.841 ops/s
# Warmup Iteration  14: 3791040.540 ops/s
# Warmup Iteration  15: 3752198.346 ops/s
# Warmup Iteration  16: 3788418.527 ops/s
# Warmup Iteration  17: 3803098.457 ops/s
# Warmup Iteration  18: 3782362.942 ops/s
# Warmup Iteration  19: 3850651.522 ops/s
# Warmup Iteration  20: 3710075.039 ops/s
# Warmup Iteration  21: 3802630.739 ops/s
# Warmup Iteration  22: 3809691.220 ops/s
# Warmup Iteration  23: 3786808.975 ops/s
# Warmup Iteration  24: 3722548.613 ops/s
# Warmup Iteration  25: 3763954.243 ops/s
# Warmup Iteration  26: 3750660.640 ops/s
# Warmup Iteration  27: 3761893.851 ops/s
# Warmup Iteration  28: 3805713.485 ops/s
# Warmup Iteration  29: 3646027.407 ops/s
# Warmup Iteration  30: 3790463.178 ops/s
Iteration   1: 3794424.994 ops/s
Iteration   2: 3764830.672 ops/s
Iteration   3: 3764743.273 ops/s
Iteration   4: 3831982.398 ops/s
Iteration   5: 3806053.141 ops/s
Iteration   6: 3790953.875 ops/s
Iteration   7: 3851842.244 ops/s
Iteration   8: 3815690.431 ops/s
Iteration   9: 3850022.504 ops/s
Iteration  10: 3766687.507 ops/s
Iteration  11: 3742849.890 ops/s
Iteration  12: 3737924.267 ops/s
Iteration  13: 3751170.574 ops/s
Iteration  14: 3758377.853 ops/s
Iteration  15: 3808329.688 ops/s
Iteration  16: 3791964.442 ops/s
Iteration  17: 3756452.861 ops/s
Iteration  18: 3809806.351 ops/s
Iteration  19: 3777202.896 ops/s
Iteration  20: 3790697.977 ops/s
Iteration  21: 3819347.509 ops/s
Iteration  22: 3781981.751 ops/s
Iteration  23: 3784571.441 ops/s
Iteration  24: 3752284.959 ops/s
Iteration  25: 3750022.433 ops/s
Iteration  26: 3750183.003 ops/s
Iteration  27: 3778815.936 ops/s
Iteration  28: 3607134.959 ops/s
Iteration  29: 3763407.902 ops/s
Iteration  30: 3727388.500 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator":
  3775904.874 ±(99.9%) 30186.470 ops/s [Average]
  (min, avg, max) = (3607134.959, 3775904.874, 3851842.244), stdev = 45181.690
  CI (99.9%): [3745718.405, 3806091.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator  thrpt   30  3775904.874 ± 30186.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 448499.264 ops/s
# Warmup Iteration   2: 531129.747 ops/s
# Warmup Iteration   3: 687688.517 ops/s
# Warmup Iteration   4: 691490.210 ops/s
# Warmup Iteration   5: 696351.539 ops/s
# Warmup Iteration   6: 687348.282 ops/s
# Warmup Iteration   7: 694664.030 ops/s
# Warmup Iteration   8: 703007.240 ops/s
# Warmup Iteration   9: 665107.854 ops/s
# Warmup Iteration  10: 593030.293 ops/s
# Warmup Iteration  11: 641632.376 ops/s
# Warmup Iteration  12: 689836.205 ops/s
# Warmup Iteration  13: 693261.240 ops/s
# Warmup Iteration  14: 670190.731 ops/s
# Warmup Iteration  15: 692233.613 ops/s
# Warmup Iteration  16: 666015.168 ops/s
# Warmup Iteration  17: 724428.206 ops/s
# Warmup Iteration  18: 714030.381 ops/s
# Warmup Iteration  19: 715375.767 ops/s
# Warmup Iteration  20: 722389.986 ops/s
# Warmup Iteration  21: 681364.912 ops/s
# Warmup Iteration  22: 718282.932 ops/s
# Warmup Iteration  23: 696656.858 ops/s
# Warmup Iteration  24: 719155.021 ops/s
# Warmup Iteration  25: 700635.214 ops/s
# Warmup Iteration  26: 693827.153 ops/s
# Warmup Iteration  27: 691508.426 ops/s
# Warmup Iteration  28: 704783.167 ops/s
# Warmup Iteration  29: 683656.122 ops/s
# Warmup Iteration  30: 715602.795 ops/s
Iteration   1: 699917.674 ops/s
Iteration   2: 675892.005 ops/s
Iteration   3: 705370.552 ops/s
Iteration   4: 696588.317 ops/s
Iteration   5: 721673.933 ops/s
Iteration   6: 723442.219 ops/s
Iteration   7: 719337.305 ops/s
Iteration   8: 722462.581 ops/s
Iteration   9: 707327.833 ops/s
Iteration  10: 731847.953 ops/s
Iteration  11: 719261.337 ops/s
Iteration  12: 685874.926 ops/s
Iteration  13: 680362.911 ops/s
Iteration  14: 699053.482 ops/s
Iteration  15: 717275.764 ops/s
Iteration  16: 718101.366 ops/s
Iteration  17: 706861.816 ops/s
Iteration  18: 723020.782 ops/s
Iteration  19: 724989.293 ops/s
Iteration  20: 721506.682 ops/s
Iteration  21: 723493.894 ops/s
Iteration  22: 709602.952 ops/s
Iteration  23: 715400.499 ops/s
Iteration  24: 723577.972 ops/s
Iteration  25: 719427.295 ops/s
Iteration  26: 700006.773 ops/s
Iteration  27: 685017.201 ops/s
Iteration  28: 688999.398 ops/s
Iteration  29: 696438.166 ops/s
Iteration  30: 730725.628 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws":
  709761.950 ±(99.9%) 10448.584 ops/s [Average]
  (min, avg, max) = (675892.005, 709761.950, 731847.953), stdev = 15638.950
  CI (99.9%): [699313.366, 720210.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_iterator_throws  thrpt   30  709761.950 ± 10448.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4.932 ops/s
# Warmup Iteration   2: 6.201 ops/s
# Warmup Iteration   3: 7.354 ops/s
# Warmup Iteration   4: 7.662 ops/s
# Warmup Iteration   5: 7.676 ops/s
# Warmup Iteration   6: 7.622 ops/s
# Warmup Iteration   7: 7.881 ops/s
# Warmup Iteration   8: 7.705 ops/s
# Warmup Iteration   9: 7.701 ops/s
# Warmup Iteration  10: 7.834 ops/s
# Warmup Iteration  11: 7.854 ops/s
# Warmup Iteration  12: 7.805 ops/s
# Warmup Iteration  13: 6.785 ops/s
# Warmup Iteration  14: 7.863 ops/s
# Warmup Iteration  15: 7.837 ops/s
# Warmup Iteration  16: 7.765 ops/s
# Warmup Iteration  17: 7.763 ops/s
# Warmup Iteration  18: 7.813 ops/s
# Warmup Iteration  19: 7.866 ops/s
# Warmup Iteration  20: 7.934 ops/s
# Warmup Iteration  21: 7.860 ops/s
# Warmup Iteration  22: 7.845 ops/s
# Warmup Iteration  23: 7.863 ops/s
# Warmup Iteration  24: 7.857 ops/s
# Warmup Iteration  25: 7.773 ops/s
# Warmup Iteration  26: 7.819 ops/s
# Warmup Iteration  27: 7.731 ops/s
# Warmup Iteration  28: 7.911 ops/s
# Warmup Iteration  29: 7.876 ops/s
# Warmup Iteration  30: 7.816 ops/s
Iteration   1: 7.845 ops/s
Iteration   2: 7.709 ops/s
Iteration   3: 7.880 ops/s
Iteration   4: 8.016 ops/s
Iteration   5: 8.054 ops/s
Iteration   6: 7.798 ops/s
Iteration   7: 7.775 ops/s
Iteration   8: 7.687 ops/s
Iteration   9: 7.851 ops/s
Iteration  10: 7.735 ops/s
Iteration  11: 7.900 ops/s
Iteration  12: 7.808 ops/s
Iteration  13: 7.643 ops/s
Iteration  14: 7.873 ops/s
Iteration  15: 7.937 ops/s
Iteration  16: 7.833 ops/s
Iteration  17: 7.959 ops/s
Iteration  18: 7.867 ops/s
Iteration  19: 7.819 ops/s
Iteration  20: 7.979 ops/s
Iteration  21: 7.815 ops/s
Iteration  22: 7.769 ops/s
Iteration  23: 7.834 ops/s
Iteration  24: 7.782 ops/s
Iteration  25: 7.862 ops/s
Iteration  26: 7.820 ops/s
Iteration  27: 7.928 ops/s
Iteration  28: 7.710 ops/s
Iteration  29: 7.831 ops/s
Iteration  30: 7.836 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  7.838 ±(99.9%) 0.063 ops/s [Average]
  (min, avg, max) = (7.643, 7.838, 8.054), stdev = 0.095
  CI (99.9%): [7.775, 7.902] (assumes normal distribution)


# Run complete. Total time: 00:01:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt  Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  7.838 ± 0.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1199835.194 ops/s
# Warmup Iteration   2: 2599330.765 ops/s
# Warmup Iteration   3: 2689656.231 ops/s
# Warmup Iteration   4: 2569930.268 ops/s
# Warmup Iteration   5: 2479270.054 ops/s
# Warmup Iteration   6: 2702921.119 ops/s
# Warmup Iteration   7: 2773949.044 ops/s
# Warmup Iteration   8: 2757141.656 ops/s
# Warmup Iteration   9: 2767978.602 ops/s
# Warmup Iteration  10: 2655161.850 ops/s
# Warmup Iteration  11: 2707973.883 ops/s
# Warmup Iteration  12: 2734777.296 ops/s
# Warmup Iteration  13: 2780129.462 ops/s
# Warmup Iteration  14: 2752752.416 ops/s
# Warmup Iteration  15: 2772728.004 ops/s
# Warmup Iteration  16: 2736312.594 ops/s
# Warmup Iteration  17: 2737529.110 ops/s
# Warmup Iteration  18: 2658014.681 ops/s
# Warmup Iteration  19: 2624117.858 ops/s
# Warmup Iteration  20: 2626915.652 ops/s
# Warmup Iteration  21: 2731186.705 ops/s
# Warmup Iteration  22: 2703500.620 ops/s
# Warmup Iteration  23: 2755285.081 ops/s
# Warmup Iteration  24: 2663492.263 ops/s
# Warmup Iteration  25: 2761239.101 ops/s
# Warmup Iteration  26: 2683393.135 ops/s
# Warmup Iteration  27: 2636491.406 ops/s
# Warmup Iteration  28: 2691793.403 ops/s
# Warmup Iteration  29: 2741344.911 ops/s
# Warmup Iteration  30: 2764965.411 ops/s
Iteration   1: 2748689.928 ops/s
Iteration   2: 2619833.531 ops/s
Iteration   3: 2649716.147 ops/s
Iteration   4: 2644563.424 ops/s
Iteration   5: 2699929.303 ops/s
Iteration   6: 2749258.408 ops/s
Iteration   7: 2759467.249 ops/s
Iteration   8: 2735415.089 ops/s
Iteration   9: 2751489.491 ops/s
Iteration  10: 2785935.884 ops/s
Iteration  11: 2800131.219 ops/s
Iteration  12: 2794008.328 ops/s
Iteration  13: 2740464.681 ops/s
Iteration  14: 2700632.743 ops/s
Iteration  15: 2740518.642 ops/s
Iteration  16: 2768110.448 ops/s
Iteration  17: 2761746.059 ops/s
Iteration  18: 2658172.265 ops/s
Iteration  19: 2623827.203 ops/s
Iteration  20: 2788982.828 ops/s
Iteration  21: 2706695.928 ops/s
Iteration  22: 2650239.928 ops/s
Iteration  23: 2735071.865 ops/s
Iteration  24: 2760363.563 ops/s
Iteration  25: 2728867.655 ops/s
Iteration  26: 2747190.425 ops/s
Iteration  27: 2705185.144 ops/s
Iteration  28: 2607032.089 ops/s
Iteration  29: 2659107.444 ops/s
Iteration  30: 2693557.395 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeString":
  2717140.144 ±(99.9%) 37166.253 ops/s [Average]
  (min, avg, max) = (2607032.089, 2717140.144, 2800131.219), stdev = 55628.702
  CI (99.9%): [2679973.891, 2754306.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeString  thrpt   30  2717140.144 ± 37166.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 904893.384 ops/s
# Warmup Iteration   2: 2236722.640 ops/s
# Warmup Iteration   3: 2257815.941 ops/s
# Warmup Iteration   4: 1882292.387 ops/s
# Warmup Iteration   5: 2253799.062 ops/s
# Warmup Iteration   6: 2240872.664 ops/s
# Warmup Iteration   7: 2249933.055 ops/s
# Warmup Iteration   8: 2270405.124 ops/s
# Warmup Iteration   9: 2243772.678 ops/s
# Warmup Iteration  10: 2250655.832 ops/s
# Warmup Iteration  11: 2264909.547 ops/s
# Warmup Iteration  12: 2244538.650 ops/s
# Warmup Iteration  13: 2256435.367 ops/s
# Warmup Iteration  14: 2247302.898 ops/s
# Warmup Iteration  15: 2230853.070 ops/s
# Warmup Iteration  16: 2260131.567 ops/s
# Warmup Iteration  17: 2277447.655 ops/s
# Warmup Iteration  18: 2202274.079 ops/s
# Warmup Iteration  19: 2200745.643 ops/s
# Warmup Iteration  20: 2203740.571 ops/s
# Warmup Iteration  21: 2243525.204 ops/s
# Warmup Iteration  22: 2276833.074 ops/s
# Warmup Iteration  23: 2232207.805 ops/s
# Warmup Iteration  24: 2264227.255 ops/s
# Warmup Iteration  25: 2254857.880 ops/s
# Warmup Iteration  26: 2263037.854 ops/s
# Warmup Iteration  27: 2213673.899 ops/s
# Warmup Iteration  28: 2236507.840 ops/s
# Warmup Iteration  29: 2271323.760 ops/s
# Warmup Iteration  30: 2265780.527 ops/s
Iteration   1: 2302561.690 ops/s
Iteration   2: 2310874.947 ops/s
Iteration   3: 2222412.763 ops/s
Iteration   4: 2274918.633 ops/s
Iteration   5: 2283738.521 ops/s
Iteration   6: 2306736.419 ops/s
Iteration   7: 2271613.053 ops/s
Iteration   8: 2308416.224 ops/s
Iteration   9: 2290870.110 ops/s
Iteration  10: 2261444.683 ops/s
Iteration  11: 2238007.971 ops/s
Iteration  12: 2237965.520 ops/s
Iteration  13: 2238682.524 ops/s
Iteration  14: 2261641.252 ops/s
Iteration  15: 2273437.328 ops/s
Iteration  16: 2269040.641 ops/s
Iteration  17: 2177723.087 ops/s
Iteration  18: 2237071.036 ops/s
Iteration  19: 2260714.230 ops/s
Iteration  20: 2190360.913 ops/s
Iteration  21: 2156367.379 ops/s
Iteration  22: 2266250.197 ops/s
Iteration  23: 2283712.266 ops/s
Iteration  24: 2264708.609 ops/s
Iteration  25: 2236069.391 ops/s
Iteration  26: 2212740.591 ops/s
Iteration  27: 2201873.376 ops/s
Iteration  28: 2284205.583 ops/s
Iteration  29: 2264075.385 ops/s
Iteration  30: 2264786.479 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator":
  2255100.693 ±(99.9%) 25877.180 ops/s [Average]
  (min, avg, max) = (2156367.379, 2255100.693, 2310874.947), stdev = 38731.748
  CI (99.9%): [2229223.513, 2280977.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2255100.693 ± 25877.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869800.878 ops/s
# Warmup Iteration   2: 2251247.401 ops/s
# Warmup Iteration   3: 2296016.746 ops/s
# Warmup Iteration   4: 1891135.629 ops/s
# Warmup Iteration   5: 2234367.623 ops/s
# Warmup Iteration   6: 2387130.445 ops/s
# Warmup Iteration   7: 2367211.231 ops/s
# Warmup Iteration   8: 2360489.024 ops/s
# Warmup Iteration   9: 2337228.688 ops/s
# Warmup Iteration  10: 2327459.118 ops/s
# Warmup Iteration  11: 2328791.551 ops/s
# Warmup Iteration  12: 2359072.801 ops/s
# Warmup Iteration  13: 2338317.559 ops/s
# Warmup Iteration  14: 2351732.050 ops/s
# Warmup Iteration  15: 2354813.325 ops/s
# Warmup Iteration  16: 2359429.381 ops/s
# Warmup Iteration  17: 2355808.222 ops/s
# Warmup Iteration  18: 2347497.983 ops/s
# Warmup Iteration  19: 2356235.834 ops/s
# Warmup Iteration  20: 2274583.662 ops/s
# Warmup Iteration  21: 2283867.719 ops/s
# Warmup Iteration  22: 2286141.077 ops/s
# Warmup Iteration  23: 2338780.994 ops/s
# Warmup Iteration  24: 2306685.014 ops/s
# Warmup Iteration  25: 2219576.693 ops/s
# Warmup Iteration  26: 2297855.437 ops/s
# Warmup Iteration  27: 2295298.318 ops/s
# Warmup Iteration  28: 2345302.842 ops/s
# Warmup Iteration  29: 2332695.372 ops/s
# Warmup Iteration  30: 2339543.670 ops/s
Iteration   1: 2349392.723 ops/s
Iteration   2: 2334573.100 ops/s
Iteration   3: 2327667.334 ops/s
Iteration   4: 2328109.799 ops/s
Iteration   5: 2366220.708 ops/s
Iteration   6: 2304784.942 ops/s
Iteration   7: 2346533.226 ops/s
Iteration   8: 2352725.433 ops/s
Iteration   9: 2329509.563 ops/s
Iteration  10: 2223644.357 ops/s
Iteration  11: 2242549.751 ops/s
Iteration  12: 2294196.252 ops/s
Iteration  13: 2324888.832 ops/s
Iteration  14: 2358768.770 ops/s
Iteration  15: 2370785.574 ops/s
Iteration  16: 2369715.880 ops/s
Iteration  17: 2317768.350 ops/s
Iteration  18: 2355946.872 ops/s
Iteration  19: 2325027.766 ops/s
Iteration  20: 2320721.326 ops/s
Iteration  21: 2331479.312 ops/s
Iteration  22: 2355962.060 ops/s
Iteration  23: 2349452.076 ops/s
Iteration  24: 2356190.484 ops/s
Iteration  25: 2334411.129 ops/s
Iteration  26: 2341106.575 ops/s
Iteration  27: 2272308.023 ops/s
Iteration  28: 2317395.456 ops/s
Iteration  29: 2331884.850 ops/s
Iteration  30: 2317255.254 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2328365.859 ±(99.9%) 22832.583 ops/s [Average]
  (min, avg, max) = (2223644.357, 2328365.859, 2370785.574), stdev = 34174.738
  CI (99.9%): [2305533.276, 2351198.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2328365.859 ± 22832.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1800712.384 ops/s
# Warmup Iteration   2: 4299554.320 ops/s
# Warmup Iteration   3: 4450569.793 ops/s
# Warmup Iteration   4: 3843742.732 ops/s
# Warmup Iteration   5: 4416557.625 ops/s
# Warmup Iteration   6: 4428510.835 ops/s
# Warmup Iteration   7: 4590130.660 ops/s
# Warmup Iteration   8: 4586538.188 ops/s
# Warmup Iteration   9: 4559168.898 ops/s
# Warmup Iteration  10: 4541870.704 ops/s
# Warmup Iteration  11: 4568102.128 ops/s
# Warmup Iteration  12: 4548702.605 ops/s
# Warmup Iteration  13: 4523045.165 ops/s
# Warmup Iteration  14: 4391484.174 ops/s
# Warmup Iteration  15: 4350857.875 ops/s
# Warmup Iteration  16: 4428338.120 ops/s
# Warmup Iteration  17: 4426828.991 ops/s
# Warmup Iteration  18: 4610439.857 ops/s
# Warmup Iteration  19: 4494952.669 ops/s
# Warmup Iteration  20: 4413070.490 ops/s
# Warmup Iteration  21: 4467795.299 ops/s
# Warmup Iteration  22: 4563342.426 ops/s
# Warmup Iteration  23: 4638037.656 ops/s
# Warmup Iteration  24: 4478010.152 ops/s
# Warmup Iteration  25: 4532335.517 ops/s
# Warmup Iteration  26: 4508913.732 ops/s
# Warmup Iteration  27: 4610061.940 ops/s
# Warmup Iteration  28: 4520382.405 ops/s
# Warmup Iteration  29: 4444169.899 ops/s
# Warmup Iteration  30: 4626643.910 ops/s
Iteration   1: 4649605.366 ops/s
Iteration   2: 4580094.040 ops/s
Iteration   3: 4559970.504 ops/s
Iteration   4: 4571791.610 ops/s
Iteration   5: 4517926.460 ops/s
Iteration   6: 4572762.719 ops/s
Iteration   7: 4576384.440 ops/s
Iteration   8: 4626108.540 ops/s
Iteration   9: 4556938.170 ops/s
Iteration  10: 4606667.862 ops/s
Iteration  11: 4582421.031 ops/s
Iteration  12: 4637049.702 ops/s
Iteration  13: 4626249.207 ops/s
Iteration  14: 4586860.268 ops/s
Iteration  15: 4563829.031 ops/s
Iteration  16: 4563394.717 ops/s
Iteration  17: 4604282.401 ops/s
Iteration  18: 4574235.794 ops/s
Iteration  19: 4511698.273 ops/s
Iteration  20: 4485462.921 ops/s
Iteration  21: 4469671.722 ops/s
Iteration  22: 4628577.770 ops/s
Iteration  23: 4532960.225 ops/s
Iteration  24: 4625551.815 ops/s
Iteration  25: 4582434.737 ops/s
Iteration  26: 4607906.770 ops/s
Iteration  27: 4565753.527 ops/s
Iteration  28: 4481527.705 ops/s
Iteration  29: 4563956.091 ops/s
Iteration  30: 4590664.013 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max":
  4573424.581 ±(99.9%) 30739.324 ops/s [Average]
  (min, avg, max) = (4469671.722, 4573424.581, 4649605.366), stdev = 46009.176
  CI (99.9%): [4542685.257, 4604163.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max  thrpt   30  4573424.581 ± 30739.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1539370.292 ops/s
# Warmup Iteration   2: 4059044.836 ops/s
# Warmup Iteration   3: 4125044.458 ops/s
# Warmup Iteration   4: 3431686.135 ops/s
# Warmup Iteration   5: 4121446.163 ops/s
# Warmup Iteration   6: 3998277.973 ops/s
# Warmup Iteration   7: 4029123.686 ops/s
# Warmup Iteration   8: 4110813.595 ops/s
# Warmup Iteration   9: 4156940.835 ops/s
# Warmup Iteration  10: 3961696.179 ops/s
# Warmup Iteration  11: 4146600.335 ops/s
# Warmup Iteration  12: 4126274.227 ops/s
# Warmup Iteration  13: 4027760.935 ops/s
# Warmup Iteration  14: 3942047.450 ops/s
# Warmup Iteration  15: 4078633.109 ops/s
# Warmup Iteration  16: 4053754.311 ops/s
# Warmup Iteration  17: 4184881.318 ops/s
# Warmup Iteration  18: 4173693.722 ops/s
# Warmup Iteration  19: 4160975.766 ops/s
# Warmup Iteration  20: 4157683.901 ops/s
# Warmup Iteration  21: 4190078.030 ops/s
# Warmup Iteration  22: 4143941.582 ops/s
# Warmup Iteration  23: 4188941.671 ops/s
# Warmup Iteration  24: 4159620.993 ops/s
# Warmup Iteration  25: 4126203.630 ops/s
# Warmup Iteration  26: 4010226.949 ops/s
# Warmup Iteration  27: 4121323.373 ops/s
# Warmup Iteration  28: 4138907.836 ops/s
# Warmup Iteration  29: 4115324.495 ops/s
# Warmup Iteration  30: 4189630.749 ops/s
Iteration   1: 4169754.514 ops/s
Iteration   2: 4185997.806 ops/s
Iteration   3: 4113299.185 ops/s
Iteration   4: 4001226.261 ops/s
Iteration   5: 4059242.854 ops/s
Iteration   6: 4159820.836 ops/s
Iteration   7: 4156233.168 ops/s
Iteration   8: 4146044.142 ops/s
Iteration   9: 4189325.331 ops/s
Iteration  10: 4176606.674 ops/s
Iteration  11: 4195945.557 ops/s
Iteration  12: 4172542.942 ops/s
Iteration  13: 4125262.774 ops/s
Iteration  14: 4019361.459 ops/s
Iteration  15: 3992438.256 ops/s
Iteration  16: 4092560.606 ops/s
Iteration  17: 4137158.375 ops/s
Iteration  18: 4173132.302 ops/s
Iteration  19: 4224417.291 ops/s
Iteration  20: 4059661.362 ops/s
Iteration  21: 4106130.386 ops/s
Iteration  22: 4055046.075 ops/s
Iteration  23: 4023722.880 ops/s
Iteration  24: 4101033.550 ops/s
Iteration  25: 4109010.580 ops/s
Iteration  26: 4049414.881 ops/s
Iteration  27: 3943806.989 ops/s
Iteration  28: 4157788.139 ops/s
Iteration  29: 3977416.601 ops/s
Iteration  30: 4044583.568 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy":
  4103932.845 ±(99.9%) 49551.793 ops/s [Average]
  (min, avg, max) = (3943806.989, 4103932.845, 4224417.291), stdev = 74166.797
  CI (99.9%): [4054381.052, 4153484.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy  thrpt   30  4103932.845 ± 49551.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1081993.160 ops/s
# Warmup Iteration   2: 2782455.332 ops/s
# Warmup Iteration   3: 2954092.529 ops/s
# Warmup Iteration   4: 2408985.908 ops/s
# Warmup Iteration   5: 2921920.079 ops/s
# Warmup Iteration   6: 2906062.474 ops/s
# Warmup Iteration   7: 2869388.533 ops/s
# Warmup Iteration   8: 2915678.427 ops/s
# Warmup Iteration   9: 2759722.012 ops/s
# Warmup Iteration  10: 2792771.226 ops/s
# Warmup Iteration  11: 2775000.598 ops/s
# Warmup Iteration  12: 2901010.269 ops/s
# Warmup Iteration  13: 2881293.245 ops/s
# Warmup Iteration  14: 2876548.897 ops/s
# Warmup Iteration  15: 2909931.754 ops/s
# Warmup Iteration  16: 2900283.447 ops/s
# Warmup Iteration  17: 2872605.911 ops/s
# Warmup Iteration  18: 2904190.914 ops/s
# Warmup Iteration  19: 2907787.710 ops/s
# Warmup Iteration  20: 2916645.970 ops/s
# Warmup Iteration  21: 2911235.263 ops/s
# Warmup Iteration  22: 2929210.664 ops/s
# Warmup Iteration  23: 2841739.570 ops/s
# Warmup Iteration  24: 2868535.570 ops/s
# Warmup Iteration  25: 2959140.799 ops/s
# Warmup Iteration  26: 2818161.121 ops/s
# Warmup Iteration  27: 2858214.040 ops/s
# Warmup Iteration  28: 2856596.626 ops/s
# Warmup Iteration  29: 2938348.768 ops/s
# Warmup Iteration  30: 2825225.603 ops/s
Iteration   1: 2807683.347 ops/s
Iteration   2: 2779613.484 ops/s
Iteration   3: 2855214.526 ops/s
Iteration   4: 2782182.072 ops/s
Iteration   5: 2800537.649 ops/s
Iteration   6: 2915486.648 ops/s
Iteration   7: 2895529.474 ops/s
Iteration   8: 2890760.086 ops/s
Iteration   9: 2927633.743 ops/s
Iteration  10: 2949877.945 ops/s
Iteration  11: 2934231.248 ops/s
Iteration  12: 2901851.196 ops/s
Iteration  13: 2924710.105 ops/s
Iteration  14: 2933083.390 ops/s
Iteration  15: 2762686.142 ops/s
Iteration  16: 2936534.612 ops/s
Iteration  17: 2766334.711 ops/s
Iteration  18: 2814315.131 ops/s
Iteration  19: 2875394.085 ops/s
Iteration  20: 2904985.806 ops/s
Iteration  21: 2910911.351 ops/s
Iteration  22: 2912147.775 ops/s
Iteration  23: 2902407.250 ops/s
Iteration  24: 2915532.223 ops/s
Iteration  25: 2922811.172 ops/s
Iteration  26: 2901180.248 ops/s
Iteration  27: 2911234.327 ops/s
Iteration  28: 2905981.944 ops/s
Iteration  29: 2947795.908 ops/s
Iteration  30: 2940322.077 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional":
  2884298.989 ±(99.9%) 39038.715 ops/s [Average]
  (min, avg, max) = (2762686.142, 2884298.989, 2949877.945), stdev = 58431.315
  CI (99.9%): [2845260.274, 2923337.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxByOptional  thrpt   30  2884298.989 ± 39038.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1703781.554 ops/s
# Warmup Iteration   2: 3915512.652 ops/s
# Warmup Iteration   3: 4195595.478 ops/s
# Warmup Iteration   4: 4198126.866 ops/s
# Warmup Iteration   5: 3540797.428 ops/s
# Warmup Iteration   6: 4295659.594 ops/s
# Warmup Iteration   7: 4273012.207 ops/s
# Warmup Iteration   8: 4233936.734 ops/s
# Warmup Iteration   9: 4218594.629 ops/s
# Warmup Iteration  10: 4302111.714 ops/s
# Warmup Iteration  11: 4180424.969 ops/s
# Warmup Iteration  12: 4140895.427 ops/s
# Warmup Iteration  13: 4167061.523 ops/s
# Warmup Iteration  14: 4212784.360 ops/s
# Warmup Iteration  15: 4270226.467 ops/s
# Warmup Iteration  16: 4233201.244 ops/s
# Warmup Iteration  17: 4254293.830 ops/s
# Warmup Iteration  18: 4304428.462 ops/s
# Warmup Iteration  19: 4294315.329 ops/s
# Warmup Iteration  20: 4259707.553 ops/s
# Warmup Iteration  21: 4273746.872 ops/s
# Warmup Iteration  22: 4282240.508 ops/s
# Warmup Iteration  23: 4332460.818 ops/s
# Warmup Iteration  24: 4283231.626 ops/s
# Warmup Iteration  25: 4272673.457 ops/s
# Warmup Iteration  26: 4277680.575 ops/s
# Warmup Iteration  27: 4317547.292 ops/s
# Warmup Iteration  28: 4274567.691 ops/s
# Warmup Iteration  29: 4265531.213 ops/s
# Warmup Iteration  30: 4283235.630 ops/s
Iteration   1: 4058346.603 ops/s
Iteration   2: 4046611.184 ops/s
Iteration   3: 4208891.989 ops/s
Iteration   4: 4020365.601 ops/s
Iteration   5: 4187846.503 ops/s
Iteration   6: 4230438.721 ops/s
Iteration   7: 4285899.254 ops/s
Iteration   8: 4207827.778 ops/s
Iteration   9: 4194461.036 ops/s
Iteration  10: 4277813.962 ops/s
Iteration  11: 4307702.578 ops/s
Iteration  12: 4231550.652 ops/s
Iteration  13: 4330012.933 ops/s
Iteration  14: 4217223.131 ops/s
Iteration  15: 4289184.021 ops/s
Iteration  16: 4068949.182 ops/s
Iteration  17: 4239778.904 ops/s
Iteration  18: 4248720.979 ops/s
Iteration  19: 4275283.234 ops/s
Iteration  20: 4293005.613 ops/s
Iteration  21: 4289495.269 ops/s
Iteration  22: 4328253.869 ops/s
Iteration  23: 4329831.100 ops/s
Iteration  24: 4322115.763 ops/s
Iteration  25: 4289650.006 ops/s
Iteration  26: 4223678.446 ops/s
Iteration  27: 4250007.249 ops/s
Iteration  28: 4298366.543 ops/s
Iteration  29: 4139289.094 ops/s
Iteration  30: 4314522.934 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws":
  4233504.138 ±(99.9%) 58700.816 ops/s [Average]
  (min, avg, max) = (4020365.601, 4233504.138, 4330012.933), stdev = 87860.625
  CI (99.9%): [4174803.321, 4292204.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  4233504.138 ± 58700.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631634.284 ops/s
# Warmup Iteration   2: 1395494.639 ops/s
# Warmup Iteration   3: 1433253.844 ops/s
# Warmup Iteration   4: 1186227.063 ops/s
# Warmup Iteration   5: 1453947.215 ops/s
# Warmup Iteration   6: 1440867.356 ops/s
# Warmup Iteration   7: 1464926.158 ops/s
# Warmup Iteration   8: 1458218.623 ops/s
# Warmup Iteration   9: 1442984.435 ops/s
# Warmup Iteration  10: 1455722.396 ops/s
# Warmup Iteration  11: 1468624.061 ops/s
# Warmup Iteration  12: 1409679.097 ops/s
# Warmup Iteration  13: 1458833.571 ops/s
# Warmup Iteration  14: 1462166.403 ops/s
# Warmup Iteration  15: 1462293.143 ops/s
# Warmup Iteration  16: 1460313.179 ops/s
# Warmup Iteration  17: 1462770.238 ops/s
# Warmup Iteration  18: 1394273.581 ops/s
# Warmup Iteration  19: 1432104.540 ops/s
# Warmup Iteration  20: 1453638.714 ops/s
# Warmup Iteration  21: 1406479.532 ops/s
# Warmup Iteration  22: 1422062.184 ops/s
# Warmup Iteration  23: 1453207.710 ops/s
# Warmup Iteration  24: 1452043.245 ops/s
# Warmup Iteration  25: 1479304.568 ops/s
# Warmup Iteration  26: 1471044.366 ops/s
# Warmup Iteration  27: 1487038.605 ops/s
# Warmup Iteration  28: 1485423.130 ops/s
# Warmup Iteration  29: 1456730.652 ops/s
# Warmup Iteration  30: 1466004.027 ops/s
Iteration   1: 1473305.989 ops/s
Iteration   2: 1484671.457 ops/s
Iteration   3: 1460524.350 ops/s
Iteration   4: 1484533.196 ops/s
Iteration   5: 1457926.784 ops/s
Iteration   6: 1451390.391 ops/s
Iteration   7: 1468310.464 ops/s
Iteration   8: 1483392.220 ops/s
Iteration   9: 1478130.103 ops/s
Iteration  10: 1452515.497 ops/s
Iteration  11: 1473002.647 ops/s
Iteration  12: 1463181.532 ops/s
Iteration  13: 1465364.176 ops/s
Iteration  14: 1461215.422 ops/s
Iteration  15: 1424062.255 ops/s
Iteration  16: 1456294.748 ops/s
Iteration  17: 1462201.048 ops/s
Iteration  18: 1481021.502 ops/s
Iteration  19: 1399693.057 ops/s
Iteration  20: 1441257.038 ops/s
Iteration  21: 1439936.699 ops/s
Iteration  22: 1427356.075 ops/s
Iteration  23: 1433805.251 ops/s
Iteration  24: 1455410.169 ops/s
Iteration  25: 1455924.309 ops/s
Iteration  26: 1460202.484 ops/s
Iteration  27: 1468233.072 ops/s
Iteration  28: 1456057.031 ops/s
Iteration  29: 1479272.144 ops/s
Iteration  30: 1373164.530 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxOptional":
  1455711.855 ±(99.9%) 16669.382 ops/s [Average]
  (min, avg, max) = (1373164.530, 1455711.855, 1484671.457), stdev = 24949.947
  CI (99.9%): [1439042.473, 1472381.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_maxOptional  thrpt   30  1455711.855 ± 16669.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 608978.363 ops/s
# Warmup Iteration   2: 661034.946 ops/s
# Warmup Iteration   3: 899317.074 ops/s
# Warmup Iteration   4: 883624.171 ops/s
# Warmup Iteration   5: 888226.349 ops/s
# Warmup Iteration   6: 901407.509 ops/s
# Warmup Iteration   7: 897487.912 ops/s
# Warmup Iteration   8: 901353.371 ops/s
# Warmup Iteration   9: 900688.150 ops/s
# Warmup Iteration  10: 896571.160 ops/s
# Warmup Iteration  11: 750975.377 ops/s
# Warmup Iteration  12: 910492.705 ops/s
# Warmup Iteration  13: 902074.932 ops/s
# Warmup Iteration  14: 896303.344 ops/s
# Warmup Iteration  15: 895464.342 ops/s
# Warmup Iteration  16: 903352.997 ops/s
# Warmup Iteration  17: 936715.824 ops/s
# Warmup Iteration  18: 944681.803 ops/s
# Warmup Iteration  19: 949259.345 ops/s
# Warmup Iteration  20: 953971.688 ops/s
# Warmup Iteration  21: 943545.908 ops/s
# Warmup Iteration  22: 925366.221 ops/s
# Warmup Iteration  23: 941019.559 ops/s
# Warmup Iteration  24: 943439.089 ops/s
# Warmup Iteration  25: 948043.439 ops/s
# Warmup Iteration  26: 943059.899 ops/s
# Warmup Iteration  27: 940705.208 ops/s
# Warmup Iteration  28: 931152.963 ops/s
# Warmup Iteration  29: 939649.099 ops/s
# Warmup Iteration  30: 940026.949 ops/s
Iteration   1: 920102.641 ops/s
Iteration   2: 947523.199 ops/s
Iteration   3: 939040.593 ops/s
Iteration   4: 938781.493 ops/s
Iteration   5: 909536.040 ops/s
Iteration   6: 900462.754 ops/s
Iteration   7: 895825.017 ops/s
Iteration   8: 938042.932 ops/s
Iteration   9: 945229.528 ops/s
Iteration  10: 940541.974 ops/s
Iteration  11: 943821.838 ops/s
Iteration  12: 948034.732 ops/s
Iteration  13: 948334.661 ops/s
Iteration  14: 950088.415 ops/s
Iteration  15: 950434.052 ops/s
Iteration  16: 934694.509 ops/s
Iteration  17: 947329.904 ops/s
Iteration  18: 945860.436 ops/s
Iteration  19: 942145.232 ops/s
Iteration  20: 938712.110 ops/s
Iteration  21: 948650.095 ops/s
Iteration  22: 945349.949 ops/s
Iteration  23: 937778.175 ops/s
Iteration  24: 927948.002 ops/s
Iteration  25: 944477.497 ops/s
Iteration  26: 955684.253 ops/s
Iteration  27: 885794.250 ops/s
Iteration  28: 901774.459 ops/s
Iteration  29: 896673.496 ops/s
Iteration  30: 895302.496 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws":
  932132.491 ±(99.9%) 13786.383 ops/s [Average]
  (min, avg, max) = (885794.250, 932132.491, 955684.253), stdev = 20634.811
  CI (99.9%): [918346.108, 945918.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_empty_throws  thrpt   30  932132.491 ± 13786.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1633016.813 ops/s
# Warmup Iteration   2: 3257370.098 ops/s
# Warmup Iteration   3: 3457738.456 ops/s
# Warmup Iteration   4: 3378655.149 ops/s
# Warmup Iteration   5: 2895121.025 ops/s
# Warmup Iteration   6: 3538604.356 ops/s
# Warmup Iteration   7: 3532534.087 ops/s
# Warmup Iteration   8: 3529621.210 ops/s
# Warmup Iteration   9: 3521398.306 ops/s
# Warmup Iteration  10: 3546479.963 ops/s
# Warmup Iteration  11: 3536539.664 ops/s
# Warmup Iteration  12: 3539837.273 ops/s
# Warmup Iteration  13: 3524616.576 ops/s
# Warmup Iteration  14: 3524066.835 ops/s
# Warmup Iteration  15: 3550191.301 ops/s
# Warmup Iteration  16: 3538198.645 ops/s
# Warmup Iteration  17: 3537353.327 ops/s
# Warmup Iteration  18: 3527298.157 ops/s
# Warmup Iteration  19: 3498826.578 ops/s
# Warmup Iteration  20: 3348922.920 ops/s
# Warmup Iteration  21: 3399601.582 ops/s
# Warmup Iteration  22: 3440290.985 ops/s
# Warmup Iteration  23: 3435464.106 ops/s
# Warmup Iteration  24: 3528173.140 ops/s
# Warmup Iteration  25: 3524881.465 ops/s
# Warmup Iteration  26: 3570940.305 ops/s
# Warmup Iteration  27: 3581928.502 ops/s
# Warmup Iteration  28: 3564220.981 ops/s
# Warmup Iteration  29: 3494217.490 ops/s
# Warmup Iteration  30: 3524701.835 ops/s
Iteration   1: 3462097.176 ops/s
Iteration   2: 3515193.216 ops/s
Iteration   3: 3419053.074 ops/s
Iteration   4: 3527370.816 ops/s
Iteration   5: 3447953.930 ops/s
Iteration   6: 3459339.189 ops/s
Iteration   7: 3474730.435 ops/s
Iteration   8: 3539803.426 ops/s
Iteration   9: 3550336.655 ops/s
Iteration  10: 3539630.177 ops/s
Iteration  11: 3531797.156 ops/s
Iteration  12: 3325073.630 ops/s
Iteration  13: 3420741.452 ops/s
Iteration  14: 3539246.987 ops/s
Iteration  15: 3521311.123 ops/s
Iteration  16: 3432867.781 ops/s
Iteration  17: 3544390.304 ops/s
Iteration  18: 3518567.752 ops/s
Iteration  19: 3498317.396 ops/s
Iteration  20: 3550786.061 ops/s
Iteration  21: 3556601.100 ops/s
Iteration  22: 3491177.140 ops/s
Iteration  23: 3551408.844 ops/s
Iteration  24: 3529239.952 ops/s
Iteration  25: 3546762.457 ops/s
Iteration  26: 3549760.337 ops/s
Iteration  27: 3512843.057 ops/s
Iteration  28: 3556691.180 ops/s
Iteration  29: 3344538.476 ops/s
Iteration  30: 3520409.488 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe":
  3499267.992 ±(99.9%) 40835.977 ops/s [Average]
  (min, avg, max) = (3325073.630, 3499267.992, 3556691.180), stdev = 61121.373
  CI (99.9%): [3458432.015, 3540103.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_safe  thrpt   30  3499267.992 ± 40835.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390888.627 ops/s
# Warmup Iteration   2: 2468315.928 ops/s
# Warmup Iteration   3: 2850535.553 ops/s
# Warmup Iteration   4: 2865604.459 ops/s
# Warmup Iteration   5: 2891878.635 ops/s
# Warmup Iteration   6: 2348795.900 ops/s
# Warmup Iteration   7: 2865934.011 ops/s
# Warmup Iteration   8: 2857378.129 ops/s
# Warmup Iteration   9: 2882740.976 ops/s
# Warmup Iteration  10: 2854162.897 ops/s
# Warmup Iteration  11: 2846629.575 ops/s
# Warmup Iteration  12: 2861772.092 ops/s
# Warmup Iteration  13: 2854078.874 ops/s
# Warmup Iteration  14: 2921110.201 ops/s
# Warmup Iteration  15: 2900003.426 ops/s
# Warmup Iteration  16: 2873006.450 ops/s
# Warmup Iteration  17: 2913930.331 ops/s
# Warmup Iteration  18: 2930404.475 ops/s
# Warmup Iteration  19: 2920540.864 ops/s
# Warmup Iteration  20: 2917547.974 ops/s
# Warmup Iteration  21: 2924065.114 ops/s
# Warmup Iteration  22: 2903582.715 ops/s
# Warmup Iteration  23: 2869491.303 ops/s
# Warmup Iteration  24: 2799194.266 ops/s
# Warmup Iteration  25: 2863838.531 ops/s
# Warmup Iteration  26: 2869201.618 ops/s
# Warmup Iteration  27: 2828712.407 ops/s
# Warmup Iteration  28: 2822480.689 ops/s
# Warmup Iteration  29: 2784991.771 ops/s
# Warmup Iteration  30: 2889778.230 ops/s
Iteration   1: 2872563.927 ops/s
Iteration   2: 2736305.640 ops/s
Iteration   3: 2903898.777 ops/s
Iteration   4: 2845194.985 ops/s
Iteration   5: 2910551.830 ops/s
Iteration   6: 2792601.291 ops/s
Iteration   7: 2885401.609 ops/s
Iteration   8: 2873463.315 ops/s
Iteration   9: 2782196.862 ops/s
Iteration  10: 2830912.144 ops/s
Iteration  11: 2873209.586 ops/s
Iteration  12: 2865149.215 ops/s
Iteration  13: 2823087.527 ops/s
Iteration  14: 2901509.832 ops/s
Iteration  15: 2917878.770 ops/s
Iteration  16: 2913077.333 ops/s
Iteration  17: 2815906.011 ops/s
Iteration  18: 2856735.239 ops/s
Iteration  19: 2843350.141 ops/s
Iteration  20: 2864761.421 ops/s
Iteration  21: 2867458.354 ops/s
Iteration  22: 2880745.040 ops/s
Iteration  23: 2855720.647 ops/s
Iteration  24: 2883258.146 ops/s
Iteration  25: 2859790.063 ops/s
Iteration  26: 2915351.262 ops/s
Iteration  27: 2865660.858 ops/s
Iteration  28: 2877891.599 ops/s
Iteration  29: 2928420.419 ops/s
Iteration  30: 2922861.545 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws":
  2865497.113 ±(99.9%) 29444.213 ops/s [Average]
  (min, avg, max) = (2736305.640, 2865497.113, 2928420.419), stdev = 44070.716
  CI (99.9%): [2836052.899, 2894941.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws  thrpt   30  2865497.113 ± 29444.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1398066.212 ops/s
# Warmup Iteration   2: 2382774.974 ops/s
# Warmup Iteration   3: 2774029.810 ops/s
# Warmup Iteration   4: 2841528.665 ops/s
# Warmup Iteration   5: 2718694.484 ops/s
# Warmup Iteration   6: 2348785.830 ops/s
# Warmup Iteration   7: 2571010.547 ops/s
# Warmup Iteration   8: 2838554.277 ops/s
# Warmup Iteration   9: 2742654.677 ops/s
# Warmup Iteration  10: 2680100.807 ops/s
# Warmup Iteration  11: 2865442.983 ops/s
# Warmup Iteration  12: 2764637.317 ops/s
# Warmup Iteration  13: 2741317.813 ops/s
# Warmup Iteration  14: 2728391.359 ops/s
# Warmup Iteration  15: 2722313.972 ops/s
# Warmup Iteration  16: 2746367.351 ops/s
# Warmup Iteration  17: 2820325.848 ops/s
# Warmup Iteration  18: 2749716.183 ops/s
# Warmup Iteration  19: 2833016.078 ops/s
# Warmup Iteration  20: 2701322.119 ops/s
# Warmup Iteration  21: 2652833.517 ops/s
# Warmup Iteration  22: 2784724.432 ops/s
# Warmup Iteration  23: 2756116.839 ops/s
# Warmup Iteration  24: 2712406.471 ops/s
# Warmup Iteration  25: 2786121.910 ops/s
# Warmup Iteration  26: 2849329.406 ops/s
# Warmup Iteration  27: 2768176.240 ops/s
# Warmup Iteration  28: 2841937.040 ops/s
# Warmup Iteration  29: 2848109.144 ops/s
# Warmup Iteration  30: 2880385.102 ops/s
Iteration   1: 2898846.743 ops/s
Iteration   2: 2829694.640 ops/s
Iteration   3: 2716531.003 ops/s
Iteration   4: 2869861.312 ops/s
Iteration   5: 2844870.638 ops/s
Iteration   6: 2808758.070 ops/s
Iteration   7: 2822045.079 ops/s
Iteration   8: 2877993.223 ops/s
Iteration   9: 2856072.133 ops/s
Iteration  10: 2855341.867 ops/s
Iteration  11: 2895300.622 ops/s
Iteration  12: 2768875.695 ops/s
Iteration  13: 2807453.536 ops/s
Iteration  14: 2824713.007 ops/s
Iteration  15: 2869080.130 ops/s
Iteration  16: 2851108.891 ops/s
Iteration  17: 2716980.877 ops/s
Iteration  18: 2784447.384 ops/s
Iteration  19: 2799255.382 ops/s
Iteration  20: 2856687.309 ops/s
Iteration  21: 2857268.300 ops/s
Iteration  22: 2728026.892 ops/s
Iteration  23: 2754591.996 ops/s
Iteration  24: 2771461.592 ops/s
Iteration  25: 2850793.677 ops/s
Iteration  26: 2857128.685 ops/s
Iteration  27: 2859148.782 ops/s
Iteration  28: 2828077.265 ops/s
Iteration  29: 2831995.131 ops/s
Iteration  30: 2838261.411 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator":
  2824355.709 ±(99.9%) 33284.178 ops/s [Average]
  (min, avg, max) = (2716531.003, 2824355.709, 2898846.743), stdev = 49818.194
  CI (99.9%): [2791071.531, 2857639.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  2824355.709 ± 33284.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1819500.019 ops/s
# Warmup Iteration   2: 4253615.116 ops/s
# Warmup Iteration   3: 4420247.921 ops/s
# Warmup Iteration   4: 3901919.059 ops/s
# Warmup Iteration   5: 4401172.242 ops/s
# Warmup Iteration   6: 4526399.597 ops/s
# Warmup Iteration   7: 4603339.794 ops/s
# Warmup Iteration   8: 4575009.039 ops/s
# Warmup Iteration   9: 4575286.323 ops/s
# Warmup Iteration  10: 4476344.843 ops/s
# Warmup Iteration  11: 4588010.106 ops/s
# Warmup Iteration  12: 4601963.998 ops/s
# Warmup Iteration  13: 4615122.957 ops/s
# Warmup Iteration  14: 4589858.539 ops/s
# Warmup Iteration  15: 4613213.744 ops/s
# Warmup Iteration  16: 4658618.648 ops/s
# Warmup Iteration  17: 4530578.821 ops/s
# Warmup Iteration  18: 4527460.523 ops/s
# Warmup Iteration  19: 4470488.824 ops/s
# Warmup Iteration  20: 4354050.835 ops/s
# Warmup Iteration  21: 4400465.300 ops/s
# Warmup Iteration  22: 4409956.336 ops/s
# Warmup Iteration  23: 4563621.370 ops/s
# Warmup Iteration  24: 4556653.460 ops/s
# Warmup Iteration  25: 4491723.128 ops/s
# Warmup Iteration  26: 4511249.071 ops/s
# Warmup Iteration  27: 4619199.809 ops/s
# Warmup Iteration  28: 4595524.782 ops/s
# Warmup Iteration  29: 4483252.437 ops/s
# Warmup Iteration  30: 4540975.116 ops/s
Iteration   1: 4541745.692 ops/s
Iteration   2: 4372682.078 ops/s
Iteration   3: 4618696.764 ops/s
Iteration   4: 4535672.852 ops/s
Iteration   5: 4477090.349 ops/s
Iteration   6: 4527103.383 ops/s
Iteration   7: 4577847.471 ops/s
Iteration   8: 4560978.474 ops/s
Iteration   9: 4557873.995 ops/s
Iteration  10: 4513394.872 ops/s
Iteration  11: 4539720.719 ops/s
Iteration  12: 4634666.573 ops/s
Iteration  13: 4629688.808 ops/s
Iteration  14: 4626532.446 ops/s
Iteration  15: 4413506.468 ops/s
Iteration  16: 4581956.289 ops/s
Iteration  17: 4571840.952 ops/s
Iteration  18: 4539998.549 ops/s
Iteration  19: 4550762.313 ops/s
Iteration  20: 4547002.849 ops/s
Iteration  21: 4489307.930 ops/s
Iteration  22: 4387771.437 ops/s
Iteration  23: 4362100.622 ops/s
Iteration  24: 4480249.059 ops/s
Iteration  25: 4398173.548 ops/s
Iteration  26: 4423110.418 ops/s
Iteration  27: 4519232.775 ops/s
Iteration  28: 4398758.373 ops/s
Iteration  29: 4605786.749 ops/s
Iteration  30: 4440018.892 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator":
  4514109.057 ±(99.9%) 54645.350 ops/s [Average]
  (min, avg, max) = (4362100.622, 4514109.057, 4634666.573), stdev = 81790.594
  CI (99.9%): [4459463.707, 4568754.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_max_without_comparator  thrpt   30  4514109.057 ± 54645.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1906858.835 ops/s
# Warmup Iteration   2: 4417841.167 ops/s
# Warmup Iteration   3: 4527276.235 ops/s
# Warmup Iteration   4: 3763671.846 ops/s
# Warmup Iteration   5: 4385456.521 ops/s
# Warmup Iteration   6: 4579448.866 ops/s
# Warmup Iteration   7: 4483671.585 ops/s
# Warmup Iteration   8: 4496217.459 ops/s
# Warmup Iteration   9: 4590043.575 ops/s
# Warmup Iteration  10: 4448856.355 ops/s
# Warmup Iteration  11: 4609644.843 ops/s
# Warmup Iteration  12: 4527612.500 ops/s
# Warmup Iteration  13: 4490774.984 ops/s
# Warmup Iteration  14: 4526677.093 ops/s
# Warmup Iteration  15: 4524954.425 ops/s
# Warmup Iteration  16: 4603113.819 ops/s
# Warmup Iteration  17: 4548021.023 ops/s
# Warmup Iteration  18: 4640982.553 ops/s
# Warmup Iteration  19: 4602112.930 ops/s
# Warmup Iteration  20: 4590762.990 ops/s
# Warmup Iteration  21: 4624699.451 ops/s
# Warmup Iteration  22: 4524069.908 ops/s
# Warmup Iteration  23: 4628339.840 ops/s
# Warmup Iteration  24: 4677717.218 ops/s
# Warmup Iteration  25: 4679273.311 ops/s
# Warmup Iteration  26: 4632258.481 ops/s
# Warmup Iteration  27: 4624126.589 ops/s
# Warmup Iteration  28: 4621119.351 ops/s
# Warmup Iteration  29: 4615497.941 ops/s
# Warmup Iteration  30: 4640462.753 ops/s
Iteration   1: 4533058.656 ops/s
Iteration   2: 4356363.445 ops/s
Iteration   3: 4596161.637 ops/s
Iteration   4: 4690931.721 ops/s
Iteration   5: 4570649.374 ops/s
Iteration   6: 4608191.964 ops/s
Iteration   7: 4587243.522 ops/s
Iteration   8: 4640127.389 ops/s
Iteration   9: 4662807.626 ops/s
Iteration  10: 4553142.746 ops/s
Iteration  11: 4503463.934 ops/s
Iteration  12: 4376721.144 ops/s
Iteration  13: 4570015.022 ops/s
Iteration  14: 4596770.374 ops/s
Iteration  15: 4457869.955 ops/s
Iteration  16: 4480819.787 ops/s
Iteration  17: 4618332.907 ops/s
Iteration  18: 4640542.300 ops/s
Iteration  19: 4636565.734 ops/s
Iteration  20: 4618658.796 ops/s
Iteration  21: 4492529.787 ops/s
Iteration  22: 4610034.872 ops/s
Iteration  23: 4595344.646 ops/s
Iteration  24: 4620051.767 ops/s
Iteration  25: 4639008.043 ops/s
Iteration  26: 4622750.474 ops/s
Iteration  27: 4650981.119 ops/s
Iteration  28: 4668419.497 ops/s
Iteration  29: 4601648.529 ops/s
Iteration  30: 4646514.658 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min":
  4581524.047 ±(99.9%) 54424.513 ops/s [Average]
  (min, avg, max) = (4356363.445, 4581524.047, 4690931.721), stdev = 81460.055
  CI (99.9%): [4527099.534, 4635948.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min  thrpt   30  4581524.047 ± 54424.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1596041.530 ops/s
# Warmup Iteration   2: 4183697.724 ops/s
# Warmup Iteration   3: 4261195.749 ops/s
# Warmup Iteration   4: 3589185.337 ops/s
# Warmup Iteration   5: 4264188.501 ops/s
# Warmup Iteration   6: 4254012.195 ops/s
# Warmup Iteration   7: 4245207.236 ops/s
# Warmup Iteration   8: 4161588.239 ops/s
# Warmup Iteration   9: 4120510.155 ops/s
# Warmup Iteration  10: 4097051.872 ops/s
# Warmup Iteration  11: 4224361.840 ops/s
# Warmup Iteration  12: 4074146.687 ops/s
# Warmup Iteration  13: 4243255.890 ops/s
# Warmup Iteration  14: 4146783.152 ops/s
# Warmup Iteration  15: 4075085.036 ops/s
# Warmup Iteration  16: 4189093.275 ops/s
# Warmup Iteration  17: 4336778.910 ops/s
# Warmup Iteration  18: 4358170.048 ops/s
# Warmup Iteration  19: 4272921.946 ops/s
# Warmup Iteration  20: 4314368.356 ops/s
# Warmup Iteration  21: 4282973.251 ops/s
# Warmup Iteration  22: 4291691.812 ops/s
# Warmup Iteration  23: 4262642.243 ops/s
# Warmup Iteration  24: 4233664.654 ops/s
# Warmup Iteration  25: 4138449.453 ops/s
# Warmup Iteration  26: 4306657.195 ops/s
# Warmup Iteration  27: 4152284.162 ops/s
# Warmup Iteration  28: 4251261.199 ops/s
# Warmup Iteration  29: 4311038.310 ops/s
# Warmup Iteration  30: 4303929.141 ops/s
Iteration   1: 4287717.899 ops/s
Iteration   2: 4315198.741 ops/s
Iteration   3: 4262648.517 ops/s
Iteration   4: 4232057.642 ops/s
Iteration   5: 4311838.218 ops/s
Iteration   6: 4328066.388 ops/s
Iteration   7: 4175028.480 ops/s
Iteration   8: 4214539.174 ops/s
Iteration   9: 4354027.203 ops/s
Iteration  10: 4341983.208 ops/s
Iteration  11: 4210666.282 ops/s
Iteration  12: 4215234.283 ops/s
Iteration  13: 4259786.335 ops/s
Iteration  14: 4232932.411 ops/s
Iteration  15: 4326369.019 ops/s
Iteration  16: 4224201.319 ops/s
Iteration  17: 4257106.800 ops/s
Iteration  18: 4305294.002 ops/s
Iteration  19: 4340701.383 ops/s
Iteration  20: 4169428.246 ops/s
Iteration  21: 4090143.012 ops/s
Iteration  22: 4129520.049 ops/s
Iteration  23: 4034984.124 ops/s
Iteration  24: 4228743.161 ops/s
Iteration  25: 4333178.644 ops/s
Iteration  26: 4241797.706 ops/s
Iteration  27: 4292381.706 ops/s
Iteration  28: 4266830.688 ops/s
Iteration  29: 4345589.786 ops/s
Iteration  30: 4316887.192 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy":
  4254829.387 ±(99.9%) 52406.763 ops/s [Average]
  (min, avg, max) = (4034984.124, 4254829.387, 4354027.203), stdev = 78439.982
  CI (99.9%): [4202422.624, 4307236.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy  thrpt   30  4254829.387 ± 52406.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1294397.258 ops/s
# Warmup Iteration   2: 2863993.494 ops/s
# Warmup Iteration   3: 2984166.890 ops/s
# Warmup Iteration   4: 2510088.939 ops/s
# Warmup Iteration   5: 2977067.885 ops/s
# Warmup Iteration   6: 2989030.941 ops/s
# Warmup Iteration   7: 2929790.873 ops/s
# Warmup Iteration   8: 2915638.678 ops/s
# Warmup Iteration   9: 2932092.694 ops/s
# Warmup Iteration  10: 2963352.923 ops/s
# Warmup Iteration  11: 2863055.355 ops/s
# Warmup Iteration  12: 2930183.932 ops/s
# Warmup Iteration  13: 2831843.554 ops/s
# Warmup Iteration  14: 2871407.348 ops/s
# Warmup Iteration  15: 2876775.183 ops/s
# Warmup Iteration  16: 2875985.042 ops/s
# Warmup Iteration  17: 2946584.724 ops/s
# Warmup Iteration  18: 2859603.844 ops/s
# Warmup Iteration  19: 2897903.557 ops/s
# Warmup Iteration  20: 2942552.204 ops/s
# Warmup Iteration  21: 2870137.889 ops/s
# Warmup Iteration  22: 2843413.081 ops/s
# Warmup Iteration  23: 2978153.852 ops/s
# Warmup Iteration  24: 2972277.602 ops/s
# Warmup Iteration  25: 2947356.658 ops/s
# Warmup Iteration  26: 2937148.053 ops/s
# Warmup Iteration  27: 2892319.955 ops/s
# Warmup Iteration  28: 2820118.972 ops/s
# Warmup Iteration  29: 2857558.836 ops/s
# Warmup Iteration  30: 2908655.022 ops/s
Iteration   1: 2931030.137 ops/s
Iteration   2: 2900285.632 ops/s
Iteration   3: 2873833.536 ops/s
Iteration   4: 2863193.665 ops/s
Iteration   5: 2831365.174 ops/s
Iteration   6: 2782622.475 ops/s
Iteration   7: 3008758.780 ops/s
Iteration   8: 2991338.328 ops/s
Iteration   9: 2944967.958 ops/s
Iteration  10: 2951724.179 ops/s
Iteration  11: 2890334.297 ops/s
Iteration  12: 2844977.999 ops/s
Iteration  13: 2783271.420 ops/s
Iteration  14: 2955662.491 ops/s
Iteration  15: 2801116.735 ops/s
Iteration  16: 2940097.408 ops/s
Iteration  17: 2932021.223 ops/s
Iteration  18: 2948360.194 ops/s
Iteration  19: 2981978.863 ops/s
Iteration  20: 2997585.589 ops/s
Iteration  21: 2959942.078 ops/s
Iteration  22: 2882692.263 ops/s
Iteration  23: 2943409.656 ops/s
Iteration  24: 2993632.545 ops/s
Iteration  25: 2977826.051 ops/s
Iteration  26: 2935856.615 ops/s
Iteration  27: 2943022.215 ops/s
Iteration  28: 2933752.489 ops/s
Iteration  29: 2926558.240 ops/s
Iteration  30: 2946378.646 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minByOptional":
  2919919.896 ±(99.9%) 41710.031 ops/s [Average]
  (min, avg, max) = (2782622.475, 2919919.896, 3008758.780), stdev = 62429.616
  CI (99.9%): [2878209.865, 2961629.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minByOptional  thrpt   30  2919919.896 ± 41710.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1704862.320 ops/s
# Warmup Iteration   2: 3881230.869 ops/s
# Warmup Iteration   3: 3999715.790 ops/s
# Warmup Iteration   4: 4189971.547 ops/s
# Warmup Iteration   5: 3470140.642 ops/s
# Warmup Iteration   6: 4214538.126 ops/s
# Warmup Iteration   7: 4017245.122 ops/s
# Warmup Iteration   8: 4065462.064 ops/s
# Warmup Iteration   9: 4161518.539 ops/s
# Warmup Iteration  10: 4227377.185 ops/s
# Warmup Iteration  11: 4232465.049 ops/s
# Warmup Iteration  12: 4237130.466 ops/s
# Warmup Iteration  13: 4241103.834 ops/s
# Warmup Iteration  14: 4256874.493 ops/s
# Warmup Iteration  15: 4267639.273 ops/s
# Warmup Iteration  16: 4201682.939 ops/s
# Warmup Iteration  17: 4182385.509 ops/s
# Warmup Iteration  18: 4230856.270 ops/s
# Warmup Iteration  19: 4260938.188 ops/s
# Warmup Iteration  20: 4221102.351 ops/s
# Warmup Iteration  21: 4182984.245 ops/s
# Warmup Iteration  22: 4213879.897 ops/s
# Warmup Iteration  23: 4114974.994 ops/s
# Warmup Iteration  24: 4104752.695 ops/s
# Warmup Iteration  25: 4245245.317 ops/s
# Warmup Iteration  26: 4240425.778 ops/s
# Warmup Iteration  27: 4246623.070 ops/s
# Warmup Iteration  28: 4066693.651 ops/s
# Warmup Iteration  29: 4108056.701 ops/s
# Warmup Iteration  30: 4179688.909 ops/s
Iteration   1: 4098921.320 ops/s
Iteration   2: 4244044.286 ops/s
Iteration   3: 4249314.427 ops/s
Iteration   4: 4245265.282 ops/s
Iteration   5: 4075685.278 ops/s
Iteration   6: 4235636.192 ops/s
Iteration   7: 4242796.604 ops/s
Iteration   8: 4271485.204 ops/s
Iteration   9: 4245814.205 ops/s
Iteration  10: 4249945.063 ops/s
Iteration  11: 4257932.700 ops/s
Iteration  12: 4257560.584 ops/s
Iteration  13: 4275887.189 ops/s
Iteration  14: 4260543.802 ops/s
Iteration  15: 4207616.897 ops/s
Iteration  16: 4235114.553 ops/s
Iteration  17: 4107256.421 ops/s
Iteration  18: 4083667.807 ops/s
Iteration  19: 4031165.322 ops/s
Iteration  20: 4079261.021 ops/s
Iteration  21: 4104470.189 ops/s
Iteration  22: 4213862.683 ops/s
Iteration  23: 4279065.737 ops/s
Iteration  24: 4146868.122 ops/s
Iteration  25: 4050215.392 ops/s
Iteration  26: 4102074.672 ops/s
Iteration  27: 4219565.658 ops/s
Iteration  28: 4303268.188 ops/s
Iteration  29: 4216494.244 ops/s
Iteration  30: 4073702.194 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws":
  4188816.708 ±(99.9%) 55682.450 ops/s [Average]
  (min, avg, max) = (4031165.322, 4188816.708, 4303268.188), stdev = 83342.877
  CI (99.9%): [4133134.257, 4244499.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  4188816.708 ± 55682.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626377.881 ops/s
# Warmup Iteration   2: 1387330.050 ops/s
# Warmup Iteration   3: 1426420.927 ops/s
# Warmup Iteration   4: 1235858.992 ops/s
# Warmup Iteration   5: 1476084.080 ops/s
# Warmup Iteration   6: 1453179.811 ops/s
# Warmup Iteration   7: 1459231.236 ops/s
# Warmup Iteration   8: 1442907.962 ops/s
# Warmup Iteration   9: 1478335.102 ops/s
# Warmup Iteration  10: 1463980.134 ops/s
# Warmup Iteration  11: 1485307.043 ops/s
# Warmup Iteration  12: 1495824.113 ops/s
# Warmup Iteration  13: 1487683.696 ops/s
# Warmup Iteration  14: 1495623.098 ops/s
# Warmup Iteration  15: 1480207.634 ops/s
# Warmup Iteration  16: 1425026.606 ops/s
# Warmup Iteration  17: 1426417.843 ops/s
# Warmup Iteration  18: 1461027.987 ops/s
# Warmup Iteration  19: 1457817.124 ops/s
# Warmup Iteration  20: 1479130.826 ops/s
# Warmup Iteration  21: 1470813.030 ops/s
# Warmup Iteration  22: 1485564.715 ops/s
# Warmup Iteration  23: 1481910.595 ops/s
# Warmup Iteration  24: 1467997.364 ops/s
# Warmup Iteration  25: 1468925.906 ops/s
# Warmup Iteration  26: 1462807.765 ops/s
# Warmup Iteration  27: 1458110.993 ops/s
# Warmup Iteration  28: 1409858.907 ops/s
# Warmup Iteration  29: 1449158.354 ops/s
# Warmup Iteration  30: 1452651.939 ops/s
Iteration   1: 1436073.598 ops/s
Iteration   2: 1420263.323 ops/s
Iteration   3: 1432574.309 ops/s
Iteration   4: 1394862.183 ops/s
Iteration   5: 1419971.603 ops/s
Iteration   6: 1386992.190 ops/s
Iteration   7: 1437464.986 ops/s
Iteration   8: 1391084.444 ops/s
Iteration   9: 1372003.226 ops/s
Iteration  10: 1474388.991 ops/s
Iteration  11: 1491729.219 ops/s
Iteration  12: 1476755.670 ops/s
Iteration  13: 1458872.130 ops/s
Iteration  14: 1442852.107 ops/s
Iteration  15: 1420186.112 ops/s
Iteration  16: 1405877.700 ops/s
Iteration  17: 1435382.552 ops/s
Iteration  18: 1439080.628 ops/s
Iteration  19: 1427063.784 ops/s
Iteration  20: 1407303.885 ops/s
Iteration  21: 1425272.436 ops/s
Iteration  22: 1472606.891 ops/s
Iteration  23: 1455213.758 ops/s
Iteration  24: 1416464.140 ops/s
Iteration  25: 1473969.192 ops/s
Iteration  26: 1480813.178 ops/s
Iteration  27: 1436352.771 ops/s
Iteration  28: 1484290.570 ops/s
Iteration  29: 1442943.685 ops/s
Iteration  30: 1474523.342 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minOptional":
  1437774.420 ±(99.9%) 21139.409 ops/s [Average]
  (min, avg, max) = (1372003.226, 1437774.420, 1491729.219), stdev = 31640.475
  CI (99.9%): [1416635.011, 1458913.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_minOptional  thrpt   30  1437774.420 ± 21139.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604707.529 ops/s
# Warmup Iteration   2: 616683.764 ops/s
# Warmup Iteration   3: 911152.039 ops/s
# Warmup Iteration   4: 897949.488 ops/s
# Warmup Iteration   5: 890281.074 ops/s
# Warmup Iteration   6: 893676.874 ops/s
# Warmup Iteration   7: 895381.956 ops/s
# Warmup Iteration   8: 891013.659 ops/s
# Warmup Iteration   9: 884209.037 ops/s
# Warmup Iteration  10: 894313.495 ops/s
# Warmup Iteration  11: 740436.844 ops/s
# Warmup Iteration  12: 890891.167 ops/s
# Warmup Iteration  13: 896760.983 ops/s
# Warmup Iteration  14: 891613.277 ops/s
# Warmup Iteration  15: 896146.213 ops/s
# Warmup Iteration  16: 895079.113 ops/s
# Warmup Iteration  17: 930298.195 ops/s
# Warmup Iteration  18: 918661.909 ops/s
# Warmup Iteration  19: 931898.990 ops/s
# Warmup Iteration  20: 950006.368 ops/s
# Warmup Iteration  21: 952270.868 ops/s
# Warmup Iteration  22: 942102.735 ops/s
# Warmup Iteration  23: 938798.240 ops/s
# Warmup Iteration  24: 935534.962 ops/s
# Warmup Iteration  25: 935724.329 ops/s
# Warmup Iteration  26: 937284.714 ops/s
# Warmup Iteration  27: 929751.609 ops/s
# Warmup Iteration  28: 940886.070 ops/s
# Warmup Iteration  29: 929935.371 ops/s
# Warmup Iteration  30: 934098.045 ops/s
Iteration   1: 939847.786 ops/s
Iteration   2: 873317.771 ops/s
Iteration   3: 868985.278 ops/s
Iteration   4: 909438.977 ops/s
Iteration   5: 936424.227 ops/s
Iteration   6: 952139.987 ops/s
Iteration   7: 923054.561 ops/s
Iteration   8: 919593.204 ops/s
Iteration   9: 936864.561 ops/s
Iteration  10: 914981.114 ops/s
Iteration  11: 931660.306 ops/s
Iteration  12: 930466.676 ops/s
Iteration  13: 946019.677 ops/s
Iteration  14: 938903.183 ops/s
Iteration  15: 948328.792 ops/s
Iteration  16: 934113.438 ops/s
Iteration  17: 936343.299 ops/s
Iteration  18: 932885.247 ops/s
Iteration  19: 932616.451 ops/s
Iteration  20: 926635.692 ops/s
Iteration  21: 936386.120 ops/s
Iteration  22: 933144.019 ops/s
Iteration  23: 938056.710 ops/s
Iteration  24: 939597.108 ops/s
Iteration  25: 885604.414 ops/s
Iteration  26: 938807.098 ops/s
Iteration  27: 939762.461 ops/s
Iteration  28: 944438.997 ops/s
Iteration  29: 939895.876 ops/s
Iteration  30: 936634.993 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws":
  928831.601 ±(99.9%) 13497.244 ops/s [Average]
  (min, avg, max) = (868985.278, 928831.601, 952139.987), stdev = 20202.040
  CI (99.9%): [915334.357, 942328.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_empty_throws  thrpt   30  928831.601 ± 13497.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1623698.820 ops/s
# Warmup Iteration   2: 3328154.243 ops/s
# Warmup Iteration   3: 3547855.223 ops/s
# Warmup Iteration   4: 3558633.081 ops/s
# Warmup Iteration   5: 2948400.147 ops/s
# Warmup Iteration   6: 3592101.115 ops/s
# Warmup Iteration   7: 3628106.233 ops/s
# Warmup Iteration   8: 3578883.783 ops/s
# Warmup Iteration   9: 3605004.035 ops/s
# Warmup Iteration  10: 3552670.253 ops/s
# Warmup Iteration  11: 3589085.522 ops/s
# Warmup Iteration  12: 3537838.706 ops/s
# Warmup Iteration  13: 3581260.616 ops/s
# Warmup Iteration  14: 3597298.179 ops/s
# Warmup Iteration  15: 3543300.649 ops/s
# Warmup Iteration  16: 3577362.386 ops/s
# Warmup Iteration  17: 3598039.692 ops/s
# Warmup Iteration  18: 3606714.754 ops/s
# Warmup Iteration  19: 3582480.845 ops/s
# Warmup Iteration  20: 3549843.991 ops/s
# Warmup Iteration  21: 3612681.255 ops/s
# Warmup Iteration  22: 3613294.284 ops/s
# Warmup Iteration  23: 3595345.121 ops/s
# Warmup Iteration  24: 3580323.123 ops/s
# Warmup Iteration  25: 3593769.981 ops/s
# Warmup Iteration  26: 3595720.189 ops/s
# Warmup Iteration  27: 3605823.004 ops/s
# Warmup Iteration  28: 3585816.809 ops/s
# Warmup Iteration  29: 3581778.053 ops/s
# Warmup Iteration  30: 3479421.111 ops/s
Iteration   1: 3543037.911 ops/s
Iteration   2: 3558709.939 ops/s
Iteration   3: 3574361.107 ops/s
Iteration   4: 3558918.811 ops/s
Iteration   5: 3563072.247 ops/s
Iteration   6: 3496022.544 ops/s
Iteration   7: 3559906.006 ops/s
Iteration   8: 3609847.918 ops/s
Iteration   9: 3558986.077 ops/s
Iteration  10: 3571738.131 ops/s
Iteration  11: 3624170.109 ops/s
Iteration  12: 3597157.720 ops/s
Iteration  13: 3613734.372 ops/s
Iteration  14: 3651111.808 ops/s
Iteration  15: 3661393.295 ops/s
Iteration  16: 3522577.208 ops/s
Iteration  17: 3493749.230 ops/s
Iteration  18: 3571633.160 ops/s
Iteration  19: 3585265.409 ops/s
Iteration  20: 3597945.050 ops/s
Iteration  21: 3616545.062 ops/s
Iteration  22: 3545450.928 ops/s
Iteration  23: 3538819.362 ops/s
Iteration  24: 3595564.827 ops/s
Iteration  25: 3549092.629 ops/s
Iteration  26: 3371671.377 ops/s
Iteration  27: 3564491.774 ops/s
Iteration  28: 3577320.115 ops/s
Iteration  29: 3610908.621 ops/s
Iteration  30: 3548415.592 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe":
  3567720.611 ±(99.9%) 35992.005 ops/s [Average]
  (min, avg, max) = (3371671.377, 3567720.611, 3661393.295), stdev = 53871.142
  CI (99.9%): [3531728.607, 3603712.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_safe  thrpt   30  3567720.611 ± 35992.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1339830.439 ops/s
# Warmup Iteration   2: 2413145.056 ops/s
# Warmup Iteration   3: 2788046.612 ops/s
# Warmup Iteration   4: 2817310.340 ops/s
# Warmup Iteration   5: 2851089.561 ops/s
# Warmup Iteration   6: 2316421.817 ops/s
# Warmup Iteration   7: 2878721.015 ops/s
# Warmup Iteration   8: 2868022.362 ops/s
# Warmup Iteration   9: 2850890.250 ops/s
# Warmup Iteration  10: 2874908.340 ops/s
# Warmup Iteration  11: 2886047.915 ops/s
# Warmup Iteration  12: 2878850.885 ops/s
# Warmup Iteration  13: 2747529.588 ops/s
# Warmup Iteration  14: 2730138.612 ops/s
# Warmup Iteration  15: 2869670.148 ops/s
# Warmup Iteration  16: 2745755.810 ops/s
# Warmup Iteration  17: 2879464.282 ops/s
# Warmup Iteration  18: 2852820.070 ops/s
# Warmup Iteration  19: 2862595.274 ops/s
# Warmup Iteration  20: 2871969.575 ops/s
# Warmup Iteration  21: 2859471.372 ops/s
# Warmup Iteration  22: 2751690.530 ops/s
# Warmup Iteration  23: 2912801.816 ops/s
# Warmup Iteration  24: 2870501.381 ops/s
# Warmup Iteration  25: 2878301.925 ops/s
# Warmup Iteration  26: 2844287.641 ops/s
# Warmup Iteration  27: 2877523.983 ops/s
# Warmup Iteration  28: 2856338.772 ops/s
# Warmup Iteration  29: 2861479.494 ops/s
# Warmup Iteration  30: 2879502.751 ops/s
Iteration   1: 2848862.684 ops/s
Iteration   2: 2854026.039 ops/s
Iteration   3: 2858192.865 ops/s
Iteration   4: 2883695.253 ops/s
Iteration   5: 2827028.696 ops/s
Iteration   6: 2761568.593 ops/s
Iteration   7: 2743387.039 ops/s
Iteration   8: 2729629.634 ops/s
Iteration   9: 2773725.623 ops/s
Iteration  10: 2638097.769 ops/s
Iteration  11: 2715028.920 ops/s
Iteration  12: 2775868.000 ops/s
Iteration  13: 2840979.198 ops/s
Iteration  14: 2828126.465 ops/s
Iteration  15: 2861046.263 ops/s
Iteration  16: 2870349.147 ops/s
Iteration  17: 2882166.790 ops/s
Iteration  18: 2880030.763 ops/s
Iteration  19: 2875118.054 ops/s
Iteration  20: 2862328.368 ops/s
Iteration  21: 2860016.042 ops/s
Iteration  22: 2880960.363 ops/s
Iteration  23: 2879385.908 ops/s
Iteration  24: 2909461.477 ops/s
Iteration  25: 2878003.578 ops/s
Iteration  26: 2892492.455 ops/s
Iteration  27: 2859668.759 ops/s
Iteration  28: 2889132.012 ops/s
Iteration  29: 2858281.696 ops/s
Iteration  30: 2855004.220 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws":
  2835722.089 ±(99.9%) 42495.296 ops/s [Average]
  (min, avg, max) = (2638097.769, 2835722.089, 2909461.477), stdev = 63604.963
  CI (99.9%): [2793226.793, 2878217.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws  thrpt   30  2835722.089 ± 42495.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1407186.253 ops/s
# Warmup Iteration   2: 2500680.347 ops/s
# Warmup Iteration   3: 2934435.738 ops/s
# Warmup Iteration   4: 2901689.836 ops/s
# Warmup Iteration   5: 2969189.361 ops/s
# Warmup Iteration   6: 2445328.525 ops/s
# Warmup Iteration   7: 2984034.511 ops/s
# Warmup Iteration   8: 2962030.507 ops/s
# Warmup Iteration   9: 2987492.253 ops/s
# Warmup Iteration  10: 2899758.861 ops/s
# Warmup Iteration  11: 2959371.250 ops/s
# Warmup Iteration  12: 2957282.645 ops/s
# Warmup Iteration  13: 2978092.726 ops/s
# Warmup Iteration  14: 2941987.172 ops/s
# Warmup Iteration  15: 2945049.816 ops/s
# Warmup Iteration  16: 2948803.875 ops/s
# Warmup Iteration  17: 2955409.200 ops/s
# Warmup Iteration  18: 2931731.224 ops/s
# Warmup Iteration  19: 2939320.593 ops/s
# Warmup Iteration  20: 2989406.620 ops/s
# Warmup Iteration  21: 2972263.309 ops/s
# Warmup Iteration  22: 2944903.932 ops/s
# Warmup Iteration  23: 2932848.406 ops/s
# Warmup Iteration  24: 2966103.589 ops/s
# Warmup Iteration  25: 2796979.306 ops/s
# Warmup Iteration  26: 2851055.788 ops/s
# Warmup Iteration  27: 2986358.448 ops/s
# Warmup Iteration  28: 2870813.665 ops/s
# Warmup Iteration  29: 2854380.806 ops/s
# Warmup Iteration  30: 2942501.697 ops/s
Iteration   1: 2841433.041 ops/s
Iteration   2: 2968739.261 ops/s
Iteration   3: 2912257.063 ops/s
Iteration   4: 2915315.775 ops/s
Iteration   5: 2955315.176 ops/s
Iteration   6: 2958973.221 ops/s
Iteration   7: 2960646.995 ops/s
Iteration   8: 2901430.704 ops/s
Iteration   9: 2901624.413 ops/s
Iteration  10: 2981524.595 ops/s
Iteration  11: 3011018.019 ops/s
Iteration  12: 2968355.760 ops/s
Iteration  13: 3010323.596 ops/s
Iteration  14: 3016223.007 ops/s
Iteration  15: 2924687.650 ops/s
Iteration  16: 2936048.562 ops/s
Iteration  17: 2970918.885 ops/s
Iteration  18: 2988346.267 ops/s
Iteration  19: 2992354.349 ops/s
Iteration  20: 2934190.276 ops/s
Iteration  21: 2948060.003 ops/s
Iteration  22: 2950724.716 ops/s
Iteration  23: 2971819.516 ops/s
Iteration  24: 2987100.731 ops/s
Iteration  25: 2965715.715 ops/s
Iteration  26: 2969205.527 ops/s
Iteration  27: 2971403.680 ops/s
Iteration  28: 2911647.527 ops/s
Iteration  29: 2890508.517 ops/s
Iteration  30: 2784661.272 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator":
  2946685.794 ±(99.9%) 33405.802 ops/s [Average]
  (min, avg, max) = (2784661.272, 2946685.794, 3016223.007), stdev = 50000.235
  CI (99.9%): [2913279.992, 2980091.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  2946685.794 ± 33405.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1962860.845 ops/s
# Warmup Iteration   2: 4701343.327 ops/s
# Warmup Iteration   3: 4856196.852 ops/s
# Warmup Iteration   4: 3768153.606 ops/s
# Warmup Iteration   5: 4836932.711 ops/s
# Warmup Iteration   6: 4726408.477 ops/s
# Warmup Iteration   7: 4654504.477 ops/s
# Warmup Iteration   8: 4833951.830 ops/s
# Warmup Iteration   9: 4786316.609 ops/s
# Warmup Iteration  10: 4609054.239 ops/s
# Warmup Iteration  11: 4729097.184 ops/s
# Warmup Iteration  12: 4779707.323 ops/s
# Warmup Iteration  13: 4817492.812 ops/s
# Warmup Iteration  14: 4764983.442 ops/s
# Warmup Iteration  15: 4799283.318 ops/s
# Warmup Iteration  16: 4820856.970 ops/s
# Warmup Iteration  17: 4759076.566 ops/s
# Warmup Iteration  18: 4811050.076 ops/s
# Warmup Iteration  19: 4694270.029 ops/s
# Warmup Iteration  20: 4743609.832 ops/s
# Warmup Iteration  21: 4820169.411 ops/s
# Warmup Iteration  22: 4819010.169 ops/s
# Warmup Iteration  23: 4800240.967 ops/s
# Warmup Iteration  24: 4813339.232 ops/s
# Warmup Iteration  25: 4880010.331 ops/s
# Warmup Iteration  26: 4792304.687 ops/s
# Warmup Iteration  27: 4777995.370 ops/s
# Warmup Iteration  28: 4825860.665 ops/s
# Warmup Iteration  29: 4797172.677 ops/s
# Warmup Iteration  30: 4775516.206 ops/s
Iteration   1: 4763283.982 ops/s
Iteration   2: 4847887.602 ops/s
Iteration   3: 4817043.415 ops/s
Iteration   4: 4799198.589 ops/s
Iteration   5: 4838170.981 ops/s
Iteration   6: 4810809.652 ops/s
Iteration   7: 4745979.399 ops/s
Iteration   8: 4780478.502 ops/s
Iteration   9: 4843845.877 ops/s
Iteration  10: 4780789.636 ops/s
Iteration  11: 4776926.149 ops/s
Iteration  12: 4814443.814 ops/s
Iteration  13: 4745013.902 ops/s
Iteration  14: 4780330.243 ops/s
Iteration  15: 4644572.821 ops/s
Iteration  16: 4738705.958 ops/s
Iteration  17: 4777041.226 ops/s
Iteration  18: 4630625.324 ops/s
Iteration  19: 4799964.195 ops/s
Iteration  20: 4566624.450 ops/s
Iteration  21: 4494157.909 ops/s
Iteration  22: 4818513.453 ops/s
Iteration  23: 4680226.761 ops/s
Iteration  24: 4580096.535 ops/s
Iteration  25: 4824772.662 ops/s
Iteration  26: 4800811.432 ops/s
Iteration  27: 4848239.792 ops/s
Iteration  28: 4725998.340 ops/s
Iteration  29: 4627144.588 ops/s
Iteration  30: 4574761.789 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator":
  4742548.633 ±(99.9%) 64875.259 ops/s [Average]
  (min, avg, max) = (4494157.909, 4742548.633, 4848239.792), stdev = 97102.241
  CI (99.9%): [4677673.374, 4807423.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_min_without_comparator  thrpt   30  4742548.633 ± 64875.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4368562.367 ops/s
# Warmup Iteration   2: 8471529.620 ops/s
# Warmup Iteration   3: 8992396.394 ops/s
# Warmup Iteration   4: 9652858.900 ops/s
# Warmup Iteration   5: 9530762.899 ops/s
# Warmup Iteration   6: 9592371.177 ops/s
# Warmup Iteration   7: 9350098.366 ops/s
# Warmup Iteration   8: 9501052.290 ops/s
# Warmup Iteration   9: 9617501.446 ops/s
# Warmup Iteration  10: 9805168.604 ops/s
# Warmup Iteration  11: 9743618.139 ops/s
# Warmup Iteration  12: 9777613.029 ops/s
# Warmup Iteration  13: 9772391.724 ops/s
# Warmup Iteration  14: 9399731.183 ops/s
# Warmup Iteration  15: 9593184.670 ops/s
# Warmup Iteration  16: 9683604.105 ops/s
# Warmup Iteration  17: 9538376.970 ops/s
# Warmup Iteration  18: 9621570.769 ops/s
# Warmup Iteration  19: 9855047.560 ops/s
# Warmup Iteration  20: 9752960.540 ops/s
# Warmup Iteration  21: 9702124.362 ops/s
# Warmup Iteration  22: 9556167.031 ops/s
# Warmup Iteration  23: 9652420.841 ops/s
# Warmup Iteration  24: 9381242.191 ops/s
# Warmup Iteration  25: 9523532.193 ops/s
# Warmup Iteration  26: 9566702.556 ops/s
# Warmup Iteration  27: 9493951.110 ops/s
# Warmup Iteration  28: 9773766.039 ops/s
# Warmup Iteration  29: 9558316.999 ops/s
# Warmup Iteration  30: 9568718.544 ops/s
Iteration   1: 9670188.767 ops/s
Iteration   2: 9379792.188 ops/s
Iteration   3: 9630892.433 ops/s
Iteration   4: 9588190.296 ops/s
Iteration   5: 9560462.917 ops/s
Iteration   6: 9380230.540 ops/s
Iteration   7: 9829080.166 ops/s
Iteration   8: 9679361.263 ops/s
Iteration   9: 9420559.250 ops/s
Iteration  10: 9583964.105 ops/s
Iteration  11: 9521835.338 ops/s
Iteration  12: 9379437.442 ops/s
Iteration  13: 9375986.322 ops/s
Iteration  14: 9752410.696 ops/s
Iteration  15: 9503600.311 ops/s
Iteration  16: 9510478.813 ops/s
Iteration  17: 9427186.031 ops/s
Iteration  18: 9455248.460 ops/s
Iteration  19: 9392108.925 ops/s
Iteration  20: 9524698.294 ops/s
Iteration  21: 9603567.139 ops/s
Iteration  22: 9774164.845 ops/s
Iteration  23: 9704315.918 ops/s
Iteration  24: 9880881.939 ops/s
Iteration  25: 9677263.751 ops/s
Iteration  26: 9729633.155 ops/s
Iteration  27: 9702216.928 ops/s
Iteration  28: 9766330.596 ops/s
Iteration  29: 9575635.802 ops/s
Iteration  30: 9511754.092 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_newEmpty":
  9583049.224 ±(99.9%) 97812.077 ops/s [Average]
  (min, avg, max) = (9375986.322, 9583049.224, 9880881.939), stdev = 146400.523
  CI (99.9%): [9485237.147, 9680861.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_newEmpty  thrpt   30  9583049.224 ± 97812.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645626.272 ops/s
# Warmup Iteration   2: 1421399.992 ops/s
# Warmup Iteration   3: 1475914.719 ops/s
# Warmup Iteration   4: 1393015.268 ops/s
# Warmup Iteration   5: 1290172.623 ops/s
# Warmup Iteration   6: 1488522.797 ops/s
# Warmup Iteration   7: 1480234.843 ops/s
# Warmup Iteration   8: 1459348.702 ops/s
# Warmup Iteration   9: 1487468.385 ops/s
# Warmup Iteration  10: 1496212.923 ops/s
# Warmup Iteration  11: 1473032.774 ops/s
# Warmup Iteration  12: 1489372.688 ops/s
# Warmup Iteration  13: 1501741.953 ops/s
# Warmup Iteration  14: 1491052.992 ops/s
# Warmup Iteration  15: 1481513.438 ops/s
# Warmup Iteration  16: 1452089.055 ops/s
# Warmup Iteration  17: 1477507.501 ops/s
# Warmup Iteration  18: 1476429.434 ops/s
# Warmup Iteration  19: 1471615.085 ops/s
# Warmup Iteration  20: 1479649.318 ops/s
# Warmup Iteration  21: 1483365.700 ops/s
# Warmup Iteration  22: 1456790.238 ops/s
# Warmup Iteration  23: 1476263.757 ops/s
# Warmup Iteration  24: 1482386.871 ops/s
# Warmup Iteration  25: 1458536.282 ops/s
# Warmup Iteration  26: 1497240.135 ops/s
# Warmup Iteration  27: 1508225.543 ops/s
# Warmup Iteration  28: 1484747.758 ops/s
# Warmup Iteration  29: 1480764.321 ops/s
# Warmup Iteration  30: 1499777.958 ops/s
Iteration   1: 1491424.895 ops/s
Iteration   2: 1462709.330 ops/s
Iteration   3: 1486141.115 ops/s
Iteration   4: 1443431.252 ops/s
Iteration   5: 1461368.958 ops/s
Iteration   6: 1484653.953 ops/s
Iteration   7: 1485652.229 ops/s
Iteration   8: 1471334.011 ops/s
Iteration   9: 1479283.101 ops/s
Iteration  10: 1463227.795 ops/s
Iteration  11: 1474187.056 ops/s
Iteration  12: 1486964.956 ops/s
Iteration  13: 1482283.833 ops/s
Iteration  14: 1487705.839 ops/s
Iteration  15: 1474181.320 ops/s
Iteration  16: 1484310.111 ops/s
Iteration  17: 1468881.984 ops/s
Iteration  18: 1441308.434 ops/s
Iteration  19: 1479866.576 ops/s
Iteration  20: 1501848.945 ops/s
Iteration  21: 1489349.973 ops/s
Iteration  22: 1473865.356 ops/s
Iteration  23: 1405822.102 ops/s
Iteration  24: 1462217.624 ops/s
Iteration  25: 1469234.073 ops/s
Iteration  26: 1484842.248 ops/s
Iteration  27: 1464469.828 ops/s
Iteration  28: 1495259.912 ops/s
Iteration  29: 1476481.824 ops/s
Iteration  30: 1489833.298 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy":
  1474071.398 ±(99.9%) 12695.450 ops/s [Average]
  (min, avg, max) = (1405822.102, 1474071.398, 1501848.945), stdev = 19001.953
  CI (99.9%): [1461375.948, 1486766.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1474071.398 ± 12695.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 862486.941 ops/s
# Warmup Iteration   2: 2027803.547 ops/s
# Warmup Iteration   3: 2106219.232 ops/s
# Warmup Iteration   4: 1968661.390 ops/s
# Warmup Iteration   5: 1967690.057 ops/s
# Warmup Iteration   6: 2169107.848 ops/s
# Warmup Iteration   7: 2179150.887 ops/s
# Warmup Iteration   8: 2156775.227 ops/s
# Warmup Iteration   9: 2145539.711 ops/s
# Warmup Iteration  10: 2171403.571 ops/s
# Warmup Iteration  11: 2133696.320 ops/s
# Warmup Iteration  12: 2189579.695 ops/s
# Warmup Iteration  13: 2126344.858 ops/s
# Warmup Iteration  14: 2130699.013 ops/s
# Warmup Iteration  15: 2178526.925 ops/s
# Warmup Iteration  16: 2147237.730 ops/s
# Warmup Iteration  17: 2113501.520 ops/s
# Warmup Iteration  18: 2180553.006 ops/s
# Warmup Iteration  19: 2136902.543 ops/s
# Warmup Iteration  20: 2141006.817 ops/s
# Warmup Iteration  21: 2113542.293 ops/s
# Warmup Iteration  22: 2096499.490 ops/s
# Warmup Iteration  23: 2116920.844 ops/s
# Warmup Iteration  24: 2047095.218 ops/s
# Warmup Iteration  25: 2146979.142 ops/s
# Warmup Iteration  26: 2104574.820 ops/s
# Warmup Iteration  27: 2145111.514 ops/s
# Warmup Iteration  28: 2132241.507 ops/s
# Warmup Iteration  29: 2138917.978 ops/s
# Warmup Iteration  30: 2153581.961 ops/s
Iteration   1: 2131684.344 ops/s
Iteration   2: 2186567.303 ops/s
Iteration   3: 2011625.244 ops/s
Iteration   4: 2089019.948 ops/s
Iteration   5: 2157406.997 ops/s
Iteration   6: 2046532.717 ops/s
Iteration   7: 2152826.041 ops/s
Iteration   8: 2042127.233 ops/s
Iteration   9: 2132275.357 ops/s
Iteration  10: 2105412.419 ops/s
Iteration  11: 2075249.311 ops/s
Iteration  12: 2149828.845 ops/s
Iteration  13: 2117992.655 ops/s
Iteration  14: 2062573.939 ops/s
Iteration  15: 2046815.842 ops/s
Iteration  16: 2113588.979 ops/s
Iteration  17: 2059060.417 ops/s
Iteration  18: 2042749.796 ops/s
Iteration  19: 2121871.885 ops/s
Iteration  20: 2168311.227 ops/s
Iteration  21: 2096526.130 ops/s
Iteration  22: 2182127.209 ops/s
Iteration  23: 2137472.668 ops/s
Iteration  24: 2149923.184 ops/s
Iteration  25: 2194893.291 ops/s
Iteration  26: 2183448.257 ops/s
Iteration  27: 2047187.835 ops/s
Iteration  28: 2073158.958 ops/s
Iteration  29: 2110173.719 ops/s
Iteration  30: 2109280.246 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith":
  2109923.733 ±(99.9%) 33997.514 ops/s [Average]
  (min, avg, max) = (2011625.244, 2109923.733, 2194893.291), stdev = 50885.882
  CI (99.9%): [2075926.219, 2143921.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2109923.733 ± 33997.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2527165.057 ops/s
# Warmup Iteration   2: 6056717.967 ops/s
# Warmup Iteration   3: 5103869.615 ops/s
# Warmup Iteration   4: 6052250.037 ops/s
# Warmup Iteration   5: 5970331.550 ops/s
# Warmup Iteration   6: 5968185.586 ops/s
# Warmup Iteration   7: 5898823.916 ops/s
# Warmup Iteration   8: 5977586.283 ops/s
# Warmup Iteration   9: 5960078.131 ops/s
# Warmup Iteration  10: 6074900.812 ops/s
# Warmup Iteration  11: 6112011.847 ops/s
# Warmup Iteration  12: 6020619.697 ops/s
# Warmup Iteration  13: 5994957.349 ops/s
# Warmup Iteration  14: 5990587.936 ops/s
# Warmup Iteration  15: 6094115.771 ops/s
# Warmup Iteration  16: 6042479.961 ops/s
# Warmup Iteration  17: 6159848.641 ops/s
# Warmup Iteration  18: 6120039.676 ops/s
# Warmup Iteration  19: 6145818.011 ops/s
# Warmup Iteration  20: 6055739.188 ops/s
# Warmup Iteration  21: 5925610.162 ops/s
# Warmup Iteration  22: 6010632.559 ops/s
# Warmup Iteration  23: 6121057.873 ops/s
# Warmup Iteration  24: 6079994.600 ops/s
# Warmup Iteration  25: 6142772.898 ops/s
# Warmup Iteration  26: 5906687.469 ops/s
# Warmup Iteration  27: 6113414.071 ops/s
# Warmup Iteration  28: 6118438.633 ops/s
# Warmup Iteration  29: 6170346.493 ops/s
# Warmup Iteration  30: 6124420.175 ops/s
Iteration   1: 6128952.637 ops/s
Iteration   2: 6125187.448 ops/s
Iteration   3: 6096501.717 ops/s
Iteration   4: 5920591.910 ops/s
Iteration   5: 6098498.767 ops/s
Iteration   6: 6108566.114 ops/s
Iteration   7: 5825291.052 ops/s
Iteration   8: 5910591.399 ops/s
Iteration   9: 5777093.360 ops/s
Iteration  10: 6100562.065 ops/s
Iteration  11: 6018094.264 ops/s
Iteration  12: 6005452.777 ops/s
Iteration  13: 5851898.117 ops/s
Iteration  14: 5965366.819 ops/s
Iteration  15: 5943572.174 ops/s
Iteration  16: 5869908.642 ops/s
Iteration  17: 6041095.998 ops/s
Iteration  18: 5953702.096 ops/s
Iteration  19: 5987928.704 ops/s
Iteration  20: 5984355.715 ops/s
Iteration  21: 5948031.839 ops/s
Iteration  22: 6068395.801 ops/s
Iteration  23: 6022178.420 ops/s
Iteration  24: 5868981.854 ops/s
Iteration  25: 5773372.934 ops/s
Iteration  26: 5838999.210 ops/s
Iteration  27: 5998683.708 ops/s
Iteration  28: 6131443.864 ops/s
Iteration  29: 6069172.790 ops/s
Iteration  30: 6128682.980 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_notEmpty":
  5985371.839 ±(99.9%) 73405.186 ops/s [Average]
  (min, avg, max) = (5773372.934, 5985371.839, 6131443.864), stdev = 109869.435
  CI (99.9%): [5911966.653, 6058777.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_notEmpty  thrpt   30  5985371.839 ± 73405.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 227506.103 ops/s
# Warmup Iteration   2: 408742.186 ops/s
# Warmup Iteration   3: 462054.617 ops/s
# Warmup Iteration   4: 463304.157 ops/s
# Warmup Iteration   5: 458504.792 ops/s
# Warmup Iteration   6: 370292.511 ops/s
# Warmup Iteration   7: 448255.715 ops/s
# Warmup Iteration   8: 449486.034 ops/s
# Warmup Iteration   9: 446069.694 ops/s
# Warmup Iteration  10: 454657.464 ops/s
# Warmup Iteration  11: 466839.613 ops/s
# Warmup Iteration  12: 461096.190 ops/s
# Warmup Iteration  13: 455734.231 ops/s
# Warmup Iteration  14: 474631.573 ops/s
# Warmup Iteration  15: 467381.254 ops/s
# Warmup Iteration  16: 464336.438 ops/s
# Warmup Iteration  17: 471514.749 ops/s
# Warmup Iteration  18: 461133.261 ops/s
# Warmup Iteration  19: 460984.967 ops/s
# Warmup Iteration  20: 459236.330 ops/s
# Warmup Iteration  21: 449137.300 ops/s
# Warmup Iteration  22: 457836.071 ops/s
# Warmup Iteration  23: 444973.209 ops/s
# Warmup Iteration  24: 452321.399 ops/s
# Warmup Iteration  25: 464422.711 ops/s
# Warmup Iteration  26: 455300.088 ops/s
# Warmup Iteration  27: 458466.232 ops/s
# Warmup Iteration  28: 450222.307 ops/s
# Warmup Iteration  29: 449012.832 ops/s
# Warmup Iteration  30: 465220.165 ops/s
Iteration   1: 444372.156 ops/s
Iteration   2: 462999.021 ops/s
Iteration   3: 464790.867 ops/s
Iteration   4: 471041.762 ops/s
Iteration   5: 461575.266 ops/s
Iteration   6: 465457.058 ops/s
Iteration   7: 457431.815 ops/s
Iteration   8: 466591.215 ops/s
Iteration   9: 467982.342 ops/s
Iteration  10: 464136.146 ops/s
Iteration  11: 471808.780 ops/s
Iteration  12: 466619.468 ops/s
Iteration  13: 462556.307 ops/s
Iteration  14: 458178.542 ops/s
Iteration  15: 465208.240 ops/s
Iteration  16: 464538.939 ops/s
Iteration  17: 468307.454 ops/s
Iteration  18: 466877.751 ops/s
Iteration  19: 466731.551 ops/s
Iteration  20: 465126.945 ops/s
Iteration  21: 471467.844 ops/s
Iteration  22: 465084.703 ops/s
Iteration  23: 464327.344 ops/s
Iteration  24: 468466.832 ops/s
Iteration  25: 463412.287 ops/s
Iteration  26: 469438.676 ops/s
Iteration  27: 465143.884 ops/s
Iteration  28: 471881.860 ops/s
Iteration  29: 471889.938 ops/s
Iteration  30: 469351.953 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partition":
  465426.565 ±(99.9%) 3620.362 ops/s [Average]
  (min, avg, max) = (444372.156, 465426.565, 471889.938), stdev = 5418.788
  CI (99.9%): [461806.202, 469046.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partition  thrpt   30  465426.565 ± 3620.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228293.663 ops/s
# Warmup Iteration   2: 435284.055 ops/s
# Warmup Iteration   3: 467656.719 ops/s
# Warmup Iteration   4: 466402.911 ops/s
# Warmup Iteration   5: 445240.932 ops/s
# Warmup Iteration   6: 427844.106 ops/s
# Warmup Iteration   7: 466919.886 ops/s
# Warmup Iteration   8: 484685.413 ops/s
# Warmup Iteration   9: 476321.542 ops/s
# Warmup Iteration  10: 467418.209 ops/s
# Warmup Iteration  11: 485205.705 ops/s
# Warmup Iteration  12: 484113.267 ops/s
# Warmup Iteration  13: 479069.755 ops/s
# Warmup Iteration  14: 482650.814 ops/s
# Warmup Iteration  15: 471864.772 ops/s
# Warmup Iteration  16: 476797.594 ops/s
# Warmup Iteration  17: 472256.969 ops/s
# Warmup Iteration  18: 475948.364 ops/s
# Warmup Iteration  19: 478804.333 ops/s
# Warmup Iteration  20: 472029.384 ops/s
# Warmup Iteration  21: 493524.526 ops/s
# Warmup Iteration  22: 482909.512 ops/s
# Warmup Iteration  23: 484346.438 ops/s
# Warmup Iteration  24: 469186.537 ops/s
# Warmup Iteration  25: 467530.577 ops/s
# Warmup Iteration  26: 487168.384 ops/s
# Warmup Iteration  27: 488669.760 ops/s
# Warmup Iteration  28: 488709.556 ops/s
# Warmup Iteration  29: 485742.771 ops/s
# Warmup Iteration  30: 492269.488 ops/s
Iteration   1: 482885.972 ops/s
Iteration   2: 488090.324 ops/s
Iteration   3: 475857.190 ops/s
Iteration   4: 472769.752 ops/s
Iteration   5: 461834.882 ops/s
Iteration   6: 480551.228 ops/s
Iteration   7: 459394.445 ops/s
Iteration   8: 487494.253 ops/s
Iteration   9: 461705.359 ops/s
Iteration  10: 472131.651 ops/s
Iteration  11: 457504.478 ops/s
Iteration  12: 467610.126 ops/s
Iteration  13: 465782.051 ops/s
Iteration  14: 485287.803 ops/s
Iteration  15: 487518.287 ops/s
Iteration  16: 490446.273 ops/s
Iteration  17: 491407.041 ops/s
Iteration  18: 481602.835 ops/s
Iteration  19: 484764.054 ops/s
Iteration  20: 486911.985 ops/s
Iteration  21: 461029.577 ops/s
Iteration  22: 475564.973 ops/s
Iteration  23: 489001.962 ops/s
Iteration  24: 472259.747 ops/s
Iteration  25: 468693.331 ops/s
Iteration  26: 465340.605 ops/s
Iteration  27: 456732.251 ops/s
Iteration  28: 468545.080 ops/s
Iteration  29: 484480.890 ops/s
Iteration  30: 470750.574 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partitionWith":
  475131.633 ±(99.9%) 7381.393 ops/s [Average]
  (min, avg, max) = (456732.251, 475131.633, 491407.041), stdev = 11048.122
  CI (99.9%): [467750.240, 482513.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_partitionWith  thrpt   30  475131.633 ± 7381.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295502.901 ops/s
# Warmup Iteration   2: 526030.273 ops/s
# Warmup Iteration   3: 588677.002 ops/s
# Warmup Iteration   4: 560244.356 ops/s
# Warmup Iteration   5: 559475.189 ops/s
# Warmup Iteration   6: 488697.654 ops/s
# Warmup Iteration   7: 574564.575 ops/s
# Warmup Iteration   8: 568100.307 ops/s
# Warmup Iteration   9: 588504.767 ops/s
# Warmup Iteration  10: 576653.667 ops/s
# Warmup Iteration  11: 586545.874 ops/s
# Warmup Iteration  12: 587179.992 ops/s
# Warmup Iteration  13: 589021.026 ops/s
# Warmup Iteration  14: 584593.492 ops/s
# Warmup Iteration  15: 587861.191 ops/s
# Warmup Iteration  16: 598480.744 ops/s
# Warmup Iteration  17: 573280.641 ops/s
# Warmup Iteration  18: 561196.025 ops/s
# Warmup Iteration  19: 581970.020 ops/s
# Warmup Iteration  20: 585043.791 ops/s
# Warmup Iteration  21: 580980.349 ops/s
# Warmup Iteration  22: 584304.478 ops/s
# Warmup Iteration  23: 585983.969 ops/s
# Warmup Iteration  24: 587291.777 ops/s
# Warmup Iteration  25: 585960.559 ops/s
# Warmup Iteration  26: 580815.621 ops/s
# Warmup Iteration  27: 589589.379 ops/s
# Warmup Iteration  28: 584223.686 ops/s
# Warmup Iteration  29: 581208.349 ops/s
# Warmup Iteration  30: 583848.581 ops/s
Iteration   1: 578773.027 ops/s
Iteration   2: 556212.374 ops/s
Iteration   3: 578988.393 ops/s
Iteration   4: 583413.698 ops/s
Iteration   5: 593136.992 ops/s
Iteration   6: 559992.021 ops/s
Iteration   7: 574381.891 ops/s
Iteration   8: 585582.966 ops/s
Iteration   9: 585731.490 ops/s
Iteration  10: 590674.538 ops/s
Iteration  11: 579106.425 ops/s
Iteration  12: 560760.330 ops/s
Iteration  13: 570337.208 ops/s
Iteration  14: 579473.161 ops/s
Iteration  15: 577917.270 ops/s
Iteration  16: 572646.086 ops/s
Iteration  17: 582894.156 ops/s
Iteration  18: 563408.983 ops/s
Iteration  19: 582008.712 ops/s
Iteration  20: 577492.135 ops/s
Iteration  21: 576111.893 ops/s
Iteration  22: 582250.163 ops/s
Iteration  23: 581583.905 ops/s
Iteration  24: 586633.992 ops/s
Iteration  25: 590414.377 ops/s
Iteration  26: 583054.316 ops/s
Iteration  27: 587110.993 ops/s
Iteration  28: 570881.322 ops/s
Iteration  29: 585287.201 ops/s
Iteration  30: 574961.420 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional":
  578374.048 ±(99.9%) 6168.045 ops/s [Average]
  (min, avg, max) = (556212.374, 578374.048, 593136.992), stdev = 9232.040
  CI (99.9%): [572206.003, 584542.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reduceOptional  thrpt   30  578374.048 ± 6168.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506792.518 ops/s
# Warmup Iteration   2: 1096454.244 ops/s
# Warmup Iteration   3: 1137978.245 ops/s
# Warmup Iteration   4: 1146396.310 ops/s
# Warmup Iteration   5: 951249.194 ops/s
# Warmup Iteration   6: 1090890.550 ops/s
# Warmup Iteration   7: 1142202.357 ops/s
# Warmup Iteration   8: 1151383.619 ops/s
# Warmup Iteration   9: 1111312.539 ops/s
# Warmup Iteration  10: 1106336.307 ops/s
# Warmup Iteration  11: 1128319.541 ops/s
# Warmup Iteration  12: 1106770.757 ops/s
# Warmup Iteration  13: 1145938.091 ops/s
# Warmup Iteration  14: 1107957.349 ops/s
# Warmup Iteration  15: 1142798.640 ops/s
# Warmup Iteration  16: 1112696.296 ops/s
# Warmup Iteration  17: 1142856.155 ops/s
# Warmup Iteration  18: 1142688.712 ops/s
# Warmup Iteration  19: 1129265.324 ops/s
# Warmup Iteration  20: 1134543.518 ops/s
# Warmup Iteration  21: 1143529.713 ops/s
# Warmup Iteration  22: 1146844.701 ops/s
# Warmup Iteration  23: 1096148.724 ops/s
# Warmup Iteration  24: 1126591.450 ops/s
# Warmup Iteration  25: 1138544.563 ops/s
# Warmup Iteration  26: 1135693.591 ops/s
# Warmup Iteration  27: 1133402.899 ops/s
# Warmup Iteration  28: 1130951.460 ops/s
# Warmup Iteration  29: 1125222.644 ops/s
# Warmup Iteration  30: 1100735.924 ops/s
Iteration   1: 1103786.145 ops/s
Iteration   2: 1142997.874 ops/s
Iteration   3: 1158835.896 ops/s
Iteration   4: 1166228.513 ops/s
Iteration   5: 1159394.735 ops/s
Iteration   6: 1156444.602 ops/s
Iteration   7: 1142031.608 ops/s
Iteration   8: 1138387.549 ops/s
Iteration   9: 1145965.035 ops/s
Iteration  10: 1163777.297 ops/s
Iteration  11: 1155650.458 ops/s
Iteration  12: 1139243.803 ops/s
Iteration  13: 1156496.354 ops/s
Iteration  14: 1158506.600 ops/s
Iteration  15: 1152532.503 ops/s
Iteration  16: 1151492.949 ops/s
Iteration  17: 1103494.721 ops/s
Iteration  18: 1099702.470 ops/s
Iteration  19: 1151343.844 ops/s
Iteration  20: 1138560.125 ops/s
Iteration  21: 1147852.181 ops/s
Iteration  22: 1139699.513 ops/s
Iteration  23: 1144228.002 ops/s
Iteration  24: 1132036.838 ops/s
Iteration  25: 1135261.297 ops/s
Iteration  26: 1139939.562 ops/s
Iteration  27: 1148731.601 ops/s
Iteration  28: 1141452.709 ops/s
Iteration  29: 1139703.200 ops/s
Iteration  30: 1160042.532 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reject":
  1143794.017 ±(99.9%) 11143.655 ops/s [Average]
  (min, avg, max) = (1099702.470, 1143794.017, 1166228.513), stdev = 16679.299
  CI (99.9%): [1132650.362, 1154937.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_reject  thrpt   30  1143794.017 ± 11143.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497262.169 ops/s
# Warmup Iteration   2: 1053339.021 ops/s
# Warmup Iteration   3: 1112175.891 ops/s
# Warmup Iteration   4: 1112532.563 ops/s
# Warmup Iteration   5: 923275.016 ops/s
# Warmup Iteration   6: 1116313.979 ops/s
# Warmup Iteration   7: 1126857.202 ops/s
# Warmup Iteration   8: 1072578.431 ops/s
# Warmup Iteration   9: 1089500.427 ops/s
# Warmup Iteration  10: 1073498.386 ops/s
# Warmup Iteration  11: 1116141.808 ops/s
# Warmup Iteration  12: 1106235.969 ops/s
# Warmup Iteration  13: 1112230.891 ops/s
# Warmup Iteration  14: 1118180.961 ops/s
# Warmup Iteration  15: 1139338.155 ops/s
# Warmup Iteration  16: 1125987.342 ops/s
# Warmup Iteration  17: 1121242.979 ops/s
# Warmup Iteration  18: 1143187.662 ops/s
# Warmup Iteration  19: 1098596.085 ops/s
# Warmup Iteration  20: 1126639.777 ops/s
# Warmup Iteration  21: 1128513.968 ops/s
# Warmup Iteration  22: 1127684.756 ops/s
# Warmup Iteration  23: 1134452.730 ops/s
# Warmup Iteration  24: 1134324.123 ops/s
# Warmup Iteration  25: 1133012.842 ops/s
# Warmup Iteration  26: 1134528.817 ops/s
# Warmup Iteration  27: 1124675.691 ops/s
# Warmup Iteration  28: 1116965.121 ops/s
# Warmup Iteration  29: 1124094.656 ops/s
# Warmup Iteration  30: 1120778.581 ops/s
Iteration   1: 1130220.061 ops/s
Iteration   2: 1129257.327 ops/s
Iteration   3: 1103243.092 ops/s
Iteration   4: 1129156.292 ops/s
Iteration   5: 1139097.374 ops/s
Iteration   6: 1105514.473 ops/s
Iteration   7: 1135633.062 ops/s
Iteration   8: 1088130.938 ops/s
Iteration   9: 1082624.751 ops/s
Iteration  10: 1077050.271 ops/s
Iteration  11: 1061458.890 ops/s
Iteration  12: 1091473.371 ops/s
Iteration  13: 1149300.494 ops/s
Iteration  14: 1145093.018 ops/s
Iteration  15: 1129297.587 ops/s
Iteration  16: 1155383.363 ops/s
Iteration  17: 1117210.247 ops/s
Iteration  18: 1138986.448 ops/s
Iteration  19: 1131902.888 ops/s
Iteration  20: 1128078.324 ops/s
Iteration  21: 1129858.819 ops/s
Iteration  22: 1121505.606 ops/s
Iteration  23: 1136630.508 ops/s
Iteration  24: 1126039.435 ops/s
Iteration  25: 1128024.394 ops/s
Iteration  26: 1125185.742 ops/s
Iteration  27: 1125344.303 ops/s
Iteration  28: 1132387.069 ops/s
Iteration  29: 1126776.970 ops/s
Iteration  30: 1131850.855 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith":
  1121723.866 ±(99.9%) 14709.263 ops/s [Average]
  (min, avg, max) = (1061458.890, 1121723.866, 1155383.363), stdev = 22016.134
  CI (99.9%): [1107014.603, 1136433.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith  thrpt   30  1121723.866 ± 14709.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 545423.921 ops/s
# Warmup Iteration   2: 1249178.208 ops/s
# Warmup Iteration   3: 1348009.870 ops/s
# Warmup Iteration   4: 1105988.566 ops/s
# Warmup Iteration   5: 1269076.299 ops/s
# Warmup Iteration   6: 1305715.166 ops/s
# Warmup Iteration   7: 1337365.597 ops/s
# Warmup Iteration   8: 1331383.208 ops/s
# Warmup Iteration   9: 1333614.813 ops/s
# Warmup Iteration  10: 1314860.663 ops/s
# Warmup Iteration  11: 1296830.996 ops/s
# Warmup Iteration  12: 1295258.002 ops/s
# Warmup Iteration  13: 1277230.799 ops/s
# Warmup Iteration  14: 1274492.570 ops/s
# Warmup Iteration  15: 1311779.500 ops/s
# Warmup Iteration  16: 1344178.839 ops/s
# Warmup Iteration  17: 1284369.160 ops/s
# Warmup Iteration  18: 1313671.314 ops/s
# Warmup Iteration  19: 1328088.068 ops/s
# Warmup Iteration  20: 1334603.496 ops/s
# Warmup Iteration  21: 1329281.292 ops/s
# Warmup Iteration  22: 1319560.455 ops/s
# Warmup Iteration  23: 1282921.552 ops/s
# Warmup Iteration  24: 1275336.429 ops/s
# Warmup Iteration  25: 1307025.855 ops/s
# Warmup Iteration  26: 1318969.015 ops/s
# Warmup Iteration  27: 1284529.187 ops/s
# Warmup Iteration  28: 1272333.497 ops/s
# Warmup Iteration  29: 1312769.800 ops/s
# Warmup Iteration  30: 1327062.469 ops/s
Iteration   1: 1312652.550 ops/s
Iteration   2: 1234135.443 ops/s
Iteration   3: 1323404.896 ops/s
Iteration   4: 1316139.163 ops/s
Iteration   5: 1321689.520 ops/s
Iteration   6: 1338255.666 ops/s
Iteration   7: 1348718.784 ops/s
Iteration   8: 1347511.015 ops/s
Iteration   9: 1323790.336 ops/s
Iteration  10: 1317808.134 ops/s
Iteration  11: 1331242.605 ops/s
Iteration  12: 1336708.172 ops/s
Iteration  13: 1337995.427 ops/s
Iteration  14: 1325344.126 ops/s
Iteration  15: 1325050.344 ops/s
Iteration  16: 1336269.288 ops/s
Iteration  17: 1324326.252 ops/s
Iteration  18: 1333689.885 ops/s
Iteration  19: 1252766.219 ops/s
Iteration  20: 1275819.981 ops/s
Iteration  21: 1297821.162 ops/s
Iteration  22: 1301734.317 ops/s
Iteration  23: 1255768.730 ops/s
Iteration  24: 1265921.006 ops/s
Iteration  25: 1331809.658 ops/s
Iteration  26: 1302652.374 ops/s
Iteration  27: 1314127.144 ops/s
Iteration  28: 1326025.340 ops/s
Iteration  29: 1299431.783 ops/s
Iteration  30: 1326305.871 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target":
  1312830.506 ±(99.9%) 19389.314 ops/s [Average]
  (min, avg, max) = (1234135.443, 1312830.506, 1348718.784), stdev = 29021.015
  CI (99.9%): [1293441.192, 1332219.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1312830.506 ± 19389.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433459.822 ops/s
# Warmup Iteration   2: 868321.963 ops/s
# Warmup Iteration   3: 944586.292 ops/s
# Warmup Iteration   4: 952096.779 ops/s
# Warmup Iteration   5: 778977.592 ops/s
# Warmup Iteration   6: 961561.964 ops/s
# Warmup Iteration   7: 945727.439 ops/s
# Warmup Iteration   8: 963584.748 ops/s
# Warmup Iteration   9: 951156.213 ops/s
# Warmup Iteration  10: 952420.943 ops/s
# Warmup Iteration  11: 902933.777 ops/s
# Warmup Iteration  12: 915454.105 ops/s
# Warmup Iteration  13: 945820.996 ops/s
# Warmup Iteration  14: 974377.572 ops/s
# Warmup Iteration  15: 938601.425 ops/s
# Warmup Iteration  16: 907171.182 ops/s
# Warmup Iteration  17: 961094.212 ops/s
# Warmup Iteration  18: 934007.097 ops/s
# Warmup Iteration  19: 961343.093 ops/s
# Warmup Iteration  20: 948043.299 ops/s
# Warmup Iteration  21: 967226.896 ops/s
# Warmup Iteration  22: 965586.465 ops/s
# Warmup Iteration  23: 959260.498 ops/s
# Warmup Iteration  24: 966229.010 ops/s
# Warmup Iteration  25: 945680.221 ops/s
# Warmup Iteration  26: 962611.605 ops/s
# Warmup Iteration  27: 914334.218 ops/s
# Warmup Iteration  28: 934929.138 ops/s
# Warmup Iteration  29: 956690.837 ops/s
# Warmup Iteration  30: 929837.043 ops/s
Iteration   1: 951606.864 ops/s
Iteration   2: 954788.690 ops/s
Iteration   3: 929338.959 ops/s
Iteration   4: 962642.229 ops/s
Iteration   5: 957473.567 ops/s
Iteration   6: 958673.145 ops/s
Iteration   7: 960500.677 ops/s
Iteration   8: 942377.673 ops/s
Iteration   9: 954961.194 ops/s
Iteration  10: 960308.600 ops/s
Iteration  11: 962402.119 ops/s
Iteration  12: 976257.249 ops/s
Iteration  13: 965952.181 ops/s
Iteration  14: 958326.368 ops/s
Iteration  15: 959380.647 ops/s
Iteration  16: 958415.378 ops/s
Iteration  17: 957037.337 ops/s
Iteration  18: 946728.345 ops/s
Iteration  19: 963918.982 ops/s
Iteration  20: 963813.022 ops/s
Iteration  21: 967976.010 ops/s
Iteration  22: 958090.578 ops/s
Iteration  23: 969499.467 ops/s
Iteration  24: 962472.928 ops/s
Iteration  25: 917636.778 ops/s
Iteration  26: 927202.272 ops/s
Iteration  27: 967938.597 ops/s
Iteration  28: 918215.642 ops/s
Iteration  29: 926140.429 ops/s
Iteration  30: 959410.203 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAll":
  953982.871 ±(99.9%) 10244.727 ops/s [Average]
  (min, avg, max) = (917636.778, 953982.871, 976257.249), stdev = 15333.827
  CI (99.9%): [943738.144, 964227.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAll  thrpt   30  953982.871 ± 10244.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431675.199 ops/s
# Warmup Iteration   2: 874826.168 ops/s
# Warmup Iteration   3: 951650.342 ops/s
# Warmup Iteration   4: 954902.498 ops/s
# Warmup Iteration   5: 790724.899 ops/s
# Warmup Iteration   6: 958879.248 ops/s
# Warmup Iteration   7: 954472.243 ops/s
# Warmup Iteration   8: 953911.094 ops/s
# Warmup Iteration   9: 957973.772 ops/s
# Warmup Iteration  10: 956560.612 ops/s
# Warmup Iteration  11: 957656.135 ops/s
# Warmup Iteration  12: 903653.930 ops/s
# Warmup Iteration  13: 940676.650 ops/s
# Warmup Iteration  14: 943298.792 ops/s
# Warmup Iteration  15: 945781.012 ops/s
# Warmup Iteration  16: 940462.532 ops/s
# Warmup Iteration  17: 935211.817 ops/s
# Warmup Iteration  18: 942509.880 ops/s
# Warmup Iteration  19: 934708.370 ops/s
# Warmup Iteration  20: 932913.871 ops/s
# Warmup Iteration  21: 945174.941 ops/s
# Warmup Iteration  22: 942501.178 ops/s
# Warmup Iteration  23: 941798.600 ops/s
# Warmup Iteration  24: 939704.653 ops/s
# Warmup Iteration  25: 944456.432 ops/s
# Warmup Iteration  26: 937009.639 ops/s
# Warmup Iteration  27: 936734.413 ops/s
# Warmup Iteration  28: 936875.779 ops/s
# Warmup Iteration  29: 944966.020 ops/s
# Warmup Iteration  30: 918991.642 ops/s
Iteration   1: 924438.788 ops/s
Iteration   2: 873042.224 ops/s
Iteration   3: 925701.393 ops/s
Iteration   4: 896560.590 ops/s
Iteration   5: 929504.755 ops/s
Iteration   6: 939327.397 ops/s
Iteration   7: 940719.730 ops/s
Iteration   8: 941172.111 ops/s
Iteration   9: 945106.989 ops/s
Iteration  10: 953656.798 ops/s
Iteration  11: 959499.830 ops/s
Iteration  12: 947808.776 ops/s
Iteration  13: 944261.832 ops/s
Iteration  14: 925807.351 ops/s
Iteration  15: 941669.623 ops/s
Iteration  16: 934353.903 ops/s
Iteration  17: 928731.326 ops/s
Iteration  18: 946107.181 ops/s
Iteration  19: 932660.914 ops/s
Iteration  20: 935391.997 ops/s
Iteration  21: 915740.405 ops/s
Iteration  22: 920335.636 ops/s
Iteration  23: 942292.108 ops/s
Iteration  24: 907389.884 ops/s
Iteration  25: 945566.373 ops/s
Iteration  26: 921543.926 ops/s
Iteration  27: 903244.614 ops/s
Iteration  28: 922458.478 ops/s
Iteration  29: 898609.357 ops/s
Iteration  30: 926336.369 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable":
  928968.022 ±(99.9%) 12652.107 ops/s [Average]
  (min, avg, max) = (873042.224, 928968.022, 959499.830), stdev = 18937.079
  CI (99.9%): [916315.915, 941620.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  928968.022 ± 12652.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393768.108 ops/s
# Warmup Iteration   2: 781693.380 ops/s
# Warmup Iteration   3: 871444.164 ops/s
# Warmup Iteration   4: 862497.543 ops/s
# Warmup Iteration   5: 759315.865 ops/s
# Warmup Iteration   6: 803318.835 ops/s
# Warmup Iteration   7: 881649.096 ops/s
# Warmup Iteration   8: 882867.484 ops/s
# Warmup Iteration   9: 878086.702 ops/s
# Warmup Iteration  10: 856099.430 ops/s
# Warmup Iteration  11: 862622.473 ops/s
# Warmup Iteration  12: 861387.583 ops/s
# Warmup Iteration  13: 888800.180 ops/s
# Warmup Iteration  14: 875622.221 ops/s
# Warmup Iteration  15: 880582.044 ops/s
# Warmup Iteration  16: 883160.475 ops/s
# Warmup Iteration  17: 834028.591 ops/s
# Warmup Iteration  18: 873365.600 ops/s
# Warmup Iteration  19: 886874.231 ops/s
# Warmup Iteration  20: 880210.834 ops/s
# Warmup Iteration  21: 890974.178 ops/s
# Warmup Iteration  22: 882442.007 ops/s
# Warmup Iteration  23: 872391.308 ops/s
# Warmup Iteration  24: 880778.957 ops/s
# Warmup Iteration  25: 858742.965 ops/s
# Warmup Iteration  26: 875234.042 ops/s
# Warmup Iteration  27: 869407.697 ops/s
# Warmup Iteration  28: 878145.686 ops/s
# Warmup Iteration  29: 875782.142 ops/s
# Warmup Iteration  30: 858827.332 ops/s
Iteration   1: 849293.311 ops/s
Iteration   2: 884570.060 ops/s
Iteration   3: 878907.757 ops/s
Iteration   4: 856870.216 ops/s
Iteration   5: 885295.315 ops/s
Iteration   6: 878103.162 ops/s
Iteration   7: 876798.182 ops/s
Iteration   8: 880543.157 ops/s
Iteration   9: 862518.381 ops/s
Iteration  10: 839212.123 ops/s
Iteration  11: 867723.831 ops/s
Iteration  12: 882357.142 ops/s
Iteration  13: 875736.228 ops/s
Iteration  14: 869050.800 ops/s
Iteration  15: 875513.251 ops/s
Iteration  16: 872326.900 ops/s
Iteration  17: 866303.336 ops/s
Iteration  18: 874748.753 ops/s
Iteration  19: 884556.228 ops/s
Iteration  20: 874552.742 ops/s
Iteration  21: 852872.558 ops/s
Iteration  22: 864835.914 ops/s
Iteration  23: 880041.005 ops/s
Iteration  24: 871040.564 ops/s
Iteration  25: 875838.261 ops/s
Iteration  26: 870768.044 ops/s
Iteration  27: 858317.554 ops/s
Iteration  28: 881573.765 ops/s
Iteration  29: 876564.815 ops/s
Iteration  30: 871115.503 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIf":
  871264.962 ±(99.9%) 7416.303 ops/s [Average]
  (min, avg, max) = (839212.123, 871264.962, 885295.315), stdev = 11100.374
  CI (99.9%): [863848.659, 878681.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIf  thrpt   30  871264.962 ± 7416.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607769.531 ops/s
# Warmup Iteration   2: 1218752.082 ops/s
# Warmup Iteration   3: 1300767.721 ops/s
# Warmup Iteration   4: 1302403.269 ops/s
# Warmup Iteration   5: 1096194.646 ops/s
# Warmup Iteration   6: 1302724.291 ops/s
# Warmup Iteration   7: 1330553.899 ops/s
# Warmup Iteration   8: 1307202.967 ops/s
# Warmup Iteration   9: 1315618.065 ops/s
# Warmup Iteration  10: 1315665.333 ops/s
# Warmup Iteration  11: 1315547.146 ops/s
# Warmup Iteration  12: 1309380.257 ops/s
# Warmup Iteration  13: 1304214.032 ops/s
# Warmup Iteration  14: 1331187.573 ops/s
# Warmup Iteration  15: 1336096.182 ops/s
# Warmup Iteration  16: 1341827.539 ops/s
# Warmup Iteration  17: 1319246.585 ops/s
# Warmup Iteration  18: 1316940.111 ops/s
# Warmup Iteration  19: 1337344.497 ops/s
# Warmup Iteration  20: 1325215.024 ops/s
# Warmup Iteration  21: 1309628.004 ops/s
# Warmup Iteration  22: 1295775.771 ops/s
# Warmup Iteration  23: 1300259.533 ops/s
# Warmup Iteration  24: 1328181.927 ops/s
# Warmup Iteration  25: 1312529.860 ops/s
# Warmup Iteration  26: 1315141.254 ops/s
# Warmup Iteration  27: 1323370.762 ops/s
# Warmup Iteration  28: 1320487.987 ops/s
# Warmup Iteration  29: 1284829.349 ops/s
# Warmup Iteration  30: 1290363.191 ops/s
Iteration   1: 1320244.892 ops/s
Iteration   2: 1267181.536 ops/s
Iteration   3: 1314236.940 ops/s
Iteration   4: 1226512.724 ops/s
Iteration   5: 1317180.411 ops/s
Iteration   6: 1301422.304 ops/s
Iteration   7: 1318078.048 ops/s
Iteration   8: 1273999.817 ops/s
Iteration   9: 1264708.115 ops/s
Iteration  10: 1281771.001 ops/s
Iteration  11: 1284911.788 ops/s
Iteration  12: 1236528.652 ops/s
Iteration  13: 1239793.011 ops/s
Iteration  14: 1339067.116 ops/s
Iteration  15: 1331666.981 ops/s
Iteration  16: 1301904.175 ops/s
Iteration  17: 1324542.273 ops/s
Iteration  18: 1291933.506 ops/s
Iteration  19: 1323350.748 ops/s
Iteration  20: 1326473.950 ops/s
Iteration  21: 1321604.894 ops/s
Iteration  22: 1320567.923 ops/s
Iteration  23: 1316733.936 ops/s
Iteration  24: 1319410.958 ops/s
Iteration  25: 1309359.257 ops/s
Iteration  26: 1311196.616 ops/s
Iteration  27: 1321163.469 ops/s
Iteration  28: 1320943.407 ops/s
Iteration  29: 1315265.545 ops/s
Iteration  30: 1300481.339 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith":
  1301407.844 ±(99.9%) 19661.553 ops/s [Average]
  (min, avg, max) = (1226512.724, 1301407.844, 1339067.116), stdev = 29428.489
  CI (99.9%): [1281746.292, 1321069.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1301407.844 ± 19661.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1712524.989 ops/s
# Warmup Iteration   2: 4328674.541 ops/s
# Warmup Iteration   3: 4457557.444 ops/s
# Warmup Iteration   4: 3662282.102 ops/s
# Warmup Iteration   5: 4480868.391 ops/s
# Warmup Iteration   6: 4446809.306 ops/s
# Warmup Iteration   7: 4470322.249 ops/s
# Warmup Iteration   8: 4438634.551 ops/s
# Warmup Iteration   9: 4467538.462 ops/s
# Warmup Iteration  10: 4417388.904 ops/s
# Warmup Iteration  11: 4481753.991 ops/s
# Warmup Iteration  12: 4528738.476 ops/s
# Warmup Iteration  13: 4458050.046 ops/s
# Warmup Iteration  14: 4433359.252 ops/s
# Warmup Iteration  15: 4484338.980 ops/s
# Warmup Iteration  16: 4279975.880 ops/s
# Warmup Iteration  17: 4273088.725 ops/s
# Warmup Iteration  18: 4382445.796 ops/s
# Warmup Iteration  19: 4477506.940 ops/s
# Warmup Iteration  20: 4342949.712 ops/s
# Warmup Iteration  21: 4379435.681 ops/s
# Warmup Iteration  22: 4502826.888 ops/s
# Warmup Iteration  23: 4569077.883 ops/s
# Warmup Iteration  24: 4507126.324 ops/s
# Warmup Iteration  25: 4482614.435 ops/s
# Warmup Iteration  26: 4456637.623 ops/s
# Warmup Iteration  27: 4497411.417 ops/s
# Warmup Iteration  28: 4489159.827 ops/s
# Warmup Iteration  29: 4490933.692 ops/s
# Warmup Iteration  30: 4427297.312 ops/s
Iteration   1: 4538681.702 ops/s
Iteration   2: 4473797.832 ops/s
Iteration   3: 4458147.005 ops/s
Iteration   4: 4532529.163 ops/s
Iteration   5: 4493002.637 ops/s
Iteration   6: 4534007.424 ops/s
Iteration   7: 4489123.688 ops/s
Iteration   8: 4458586.523 ops/s
Iteration   9: 4373749.666 ops/s
Iteration  10: 4303814.149 ops/s
Iteration  11: 4426289.300 ops/s
Iteration  12: 4340976.621 ops/s
Iteration  13: 4457075.007 ops/s
Iteration  14: 4455893.117 ops/s
Iteration  15: 4444248.026 ops/s
Iteration  16: 4468912.718 ops/s
Iteration  17: 4445444.301 ops/s
Iteration  18: 4419110.204 ops/s
Iteration  19: 4422642.103 ops/s
Iteration  20: 4461260.266 ops/s
Iteration  21: 4460604.816 ops/s
Iteration  22: 4498414.411 ops/s
Iteration  23: 4430455.715 ops/s
Iteration  24: 4350893.280 ops/s
Iteration  25: 4460983.298 ops/s
Iteration  26: 4454592.973 ops/s
Iteration  27: 4525447.054 ops/s
Iteration  28: 4482898.359 ops/s
Iteration  29: 4531842.432 ops/s
Iteration  30: 4559367.330 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeObject":
  4458426.371 ±(99.9%) 39987.518 ops/s [Average]
  (min, avg, max) = (4303814.149, 4458426.371, 4559367.330), stdev = 59851.439
  CI (99.9%): [4418438.853, 4498413.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_removeObject  thrpt   30  4458426.371 ± 39987.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 249892.413 ops/s
# Warmup Iteration   2: 486582.759 ops/s
# Warmup Iteration   3: 566150.922 ops/s
# Warmup Iteration   4: 565140.861 ops/s
# Warmup Iteration   5: 571639.986 ops/s
# Warmup Iteration   6: 467098.935 ops/s
# Warmup Iteration   7: 566802.041 ops/s
# Warmup Iteration   8: 585169.677 ops/s
# Warmup Iteration   9: 584117.337 ops/s
# Warmup Iteration  10: 564837.411 ops/s
# Warmup Iteration  11: 579820.319 ops/s
# Warmup Iteration  12: 580288.224 ops/s
# Warmup Iteration  13: 583255.658 ops/s
# Warmup Iteration  14: 580239.108 ops/s
# Warmup Iteration  15: 581657.149 ops/s
# Warmup Iteration  16: 578221.466 ops/s
# Warmup Iteration  17: 594499.933 ops/s
# Warmup Iteration  18: 593472.165 ops/s
# Warmup Iteration  19: 596528.249 ops/s
# Warmup Iteration  20: 571411.340 ops/s
# Warmup Iteration  21: 599240.194 ops/s
# Warmup Iteration  22: 576284.438 ops/s
# Warmup Iteration  23: 602671.412 ops/s
# Warmup Iteration  24: 601298.486 ops/s
# Warmup Iteration  25: 591792.703 ops/s
# Warmup Iteration  26: 587953.818 ops/s
# Warmup Iteration  27: 600219.617 ops/s
# Warmup Iteration  28: 593069.734 ops/s
# Warmup Iteration  29: 573542.668 ops/s
# Warmup Iteration  30: 566406.154 ops/s
Iteration   1: 569935.605 ops/s
Iteration   2: 591562.481 ops/s
Iteration   3: 574352.019 ops/s
Iteration   4: 592679.635 ops/s
Iteration   5: 600233.337 ops/s
Iteration   6: 593821.350 ops/s
Iteration   7: 598544.076 ops/s
Iteration   8: 586873.100 ops/s
Iteration   9: 594872.093 ops/s
Iteration  10: 594563.425 ops/s
Iteration  11: 584676.745 ops/s
Iteration  12: 590326.487 ops/s
Iteration  13: 592964.798 ops/s
Iteration  14: 585970.517 ops/s
Iteration  15: 573733.301 ops/s
Iteration  16: 589567.161 ops/s
Iteration  17: 592791.217 ops/s
Iteration  18: 604176.897 ops/s
Iteration  19: 590732.858 ops/s
Iteration  20: 590144.074 ops/s
Iteration  21: 597105.296 ops/s
Iteration  22: 596331.146 ops/s
Iteration  23: 595343.402 ops/s
Iteration  24: 592146.038 ops/s
Iteration  25: 605881.599 ops/s
Iteration  26: 605331.522 ops/s
Iteration  27: 601537.770 ops/s
Iteration  28: 603643.750 ops/s
Iteration  29: 602890.864 ops/s
Iteration  30: 592747.303 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAll":
  592849.329 ±(99.9%) 5939.306 ops/s [Average]
  (min, avg, max) = (569935.605, 592849.329, 605881.599), stdev = 8889.674
  CI (99.9%): [586910.023, 598788.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAll  thrpt   30  592849.329 ± 5939.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424288.003 ops/s
# Warmup Iteration   2: 854455.414 ops/s
# Warmup Iteration   3: 954695.138 ops/s
# Warmup Iteration   4: 919029.735 ops/s
# Warmup Iteration   5: 829781.302 ops/s
# Warmup Iteration   6: 869698.455 ops/s
# Warmup Iteration   7: 949682.136 ops/s
# Warmup Iteration   8: 949158.991 ops/s
# Warmup Iteration   9: 945803.700 ops/s
# Warmup Iteration  10: 947855.895 ops/s
# Warmup Iteration  11: 960848.011 ops/s
# Warmup Iteration  12: 939054.682 ops/s
# Warmup Iteration  13: 932159.979 ops/s
# Warmup Iteration  14: 934348.982 ops/s
# Warmup Iteration  15: 943935.714 ops/s
# Warmup Iteration  16: 945367.385 ops/s
# Warmup Iteration  17: 925734.127 ops/s
# Warmup Iteration  18: 943438.574 ops/s
# Warmup Iteration  19: 944812.069 ops/s
# Warmup Iteration  20: 945664.787 ops/s
# Warmup Iteration  21: 947849.317 ops/s
# Warmup Iteration  22: 940075.855 ops/s
# Warmup Iteration  23: 943027.055 ops/s
# Warmup Iteration  24: 921403.080 ops/s
# Warmup Iteration  25: 949533.378 ops/s
# Warmup Iteration  26: 921176.725 ops/s
# Warmup Iteration  27: 912136.211 ops/s
# Warmup Iteration  28: 911968.838 ops/s
# Warmup Iteration  29: 900859.815 ops/s
# Warmup Iteration  30: 914626.860 ops/s
Iteration   1: 946338.049 ops/s
Iteration   2: 952142.674 ops/s
Iteration   3: 953723.989 ops/s
Iteration   4: 947485.194 ops/s
Iteration   5: 949851.253 ops/s
Iteration   6: 951084.883 ops/s
Iteration   7: 949190.266 ops/s
Iteration   8: 949973.789 ops/s
Iteration   9: 947576.728 ops/s
Iteration  10: 944780.791 ops/s
Iteration  11: 942002.616 ops/s
Iteration  12: 937761.751 ops/s
Iteration  13: 956002.379 ops/s
Iteration  14: 939611.816 ops/s
Iteration  15: 956919.621 ops/s
Iteration  16: 953348.650 ops/s
Iteration  17: 958121.470 ops/s
Iteration  18: 943162.131 ops/s
Iteration  19: 934746.053 ops/s
Iteration  20: 948471.667 ops/s
Iteration  21: 950586.004 ops/s
Iteration  22: 902515.017 ops/s
Iteration  23: 912419.363 ops/s
Iteration  24: 929002.698 ops/s
Iteration  25: 959100.324 ops/s
Iteration  26: 909270.389 ops/s
Iteration  27: 940766.547 ops/s
Iteration  28: 943162.185 ops/s
Iteration  29: 945345.992 ops/s
Iteration  30: 938756.887 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable":
  943107.372 ±(99.9%) 9236.479 ops/s [Average]
  (min, avg, max) = (902515.017, 943107.372, 959100.324), stdev = 13824.728
  CI (99.9%): [933870.893, 952343.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  943107.372 ± 9236.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 253352.789 ops/s
# Warmup Iteration   2: 521505.557 ops/s
# Warmup Iteration   3: 568201.447 ops/s
# Warmup Iteration   4: 554271.075 ops/s
# Warmup Iteration   5: 454394.347 ops/s
# Warmup Iteration   6: 555364.733 ops/s
# Warmup Iteration   7: 584825.041 ops/s
# Warmup Iteration   8: 572811.375 ops/s
# Warmup Iteration   9: 562273.415 ops/s
# Warmup Iteration  10: 584373.176 ops/s
# Warmup Iteration  11: 571369.848 ops/s
# Warmup Iteration  12: 566832.995 ops/s
# Warmup Iteration  13: 564379.896 ops/s
# Warmup Iteration  14: 570627.406 ops/s
# Warmup Iteration  15: 585371.373 ops/s
# Warmup Iteration  16: 585217.705 ops/s
# Warmup Iteration  17: 586445.298 ops/s
# Warmup Iteration  18: 582876.189 ops/s
# Warmup Iteration  19: 579326.347 ops/s
# Warmup Iteration  20: 545461.564 ops/s
# Warmup Iteration  21: 568710.075 ops/s
# Warmup Iteration  22: 587755.054 ops/s
# Warmup Iteration  23: 579242.678 ops/s
# Warmup Iteration  24: 581601.615 ops/s
# Warmup Iteration  25: 580661.026 ops/s
# Warmup Iteration  26: 578212.774 ops/s
# Warmup Iteration  27: 583528.158 ops/s
# Warmup Iteration  28: 579375.281 ops/s
# Warmup Iteration  29: 575573.309 ops/s
# Warmup Iteration  30: 574772.456 ops/s
Iteration   1: 581003.442 ops/s
Iteration   2: 579429.795 ops/s
Iteration   3: 587480.299 ops/s
Iteration   4: 588215.755 ops/s
Iteration   5: 586251.882 ops/s
Iteration   6: 580845.887 ops/s
Iteration   7: 584412.277 ops/s
Iteration   8: 580407.548 ops/s
Iteration   9: 579982.068 ops/s
Iteration  10: 585970.651 ops/s
Iteration  11: 581387.414 ops/s
Iteration  12: 583045.821 ops/s
Iteration  13: 587028.082 ops/s
Iteration  14: 580222.939 ops/s
Iteration  15: 586791.538 ops/s
Iteration  16: 549100.515 ops/s
Iteration  17: 579822.398 ops/s
Iteration  18: 554209.344 ops/s
Iteration  19: 579132.109 ops/s
Iteration  20: 589225.989 ops/s
Iteration  21: 584681.587 ops/s
Iteration  22: 591104.850 ops/s
Iteration  23: 588891.577 ops/s
Iteration  24: 584521.750 ops/s
Iteration  25: 580003.783 ops/s
Iteration  26: 583164.699 ops/s
Iteration  27: 576091.811 ops/s
Iteration  28: 576980.171 ops/s
Iteration  29: 581464.930 ops/s
Iteration  30: 554425.330 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_select":
  580176.541 ±(99.9%) 6757.759 ops/s [Average]
  (min, avg, max) = (549100.515, 580176.541, 591104.850), stdev = 10114.696
  CI (99.9%): [573418.782, 586934.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_select  thrpt   30  580176.541 ± 6757.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2008915.640 ops/s
# Warmup Iteration   2: 4625104.315 ops/s
# Warmup Iteration   3: 3841707.452 ops/s
# Warmup Iteration   4: 4611345.752 ops/s
# Warmup Iteration   5: 4542504.638 ops/s
# Warmup Iteration   6: 4831416.502 ops/s
# Warmup Iteration   7: 4781866.519 ops/s
# Warmup Iteration   8: 4527600.031 ops/s
# Warmup Iteration   9: 4845781.769 ops/s
# Warmup Iteration  10: 4857620.338 ops/s
# Warmup Iteration  11: 4778845.377 ops/s
# Warmup Iteration  12: 4801482.839 ops/s
# Warmup Iteration  13: 4792813.730 ops/s
# Warmup Iteration  14: 4582834.982 ops/s
# Warmup Iteration  15: 4771788.715 ops/s
# Warmup Iteration  16: 4825268.943 ops/s
# Warmup Iteration  17: 4817972.024 ops/s
# Warmup Iteration  18: 4815583.264 ops/s
# Warmup Iteration  19: 4767090.502 ops/s
# Warmup Iteration  20: 4776014.306 ops/s
# Warmup Iteration  21: 4797096.608 ops/s
# Warmup Iteration  22: 4827078.245 ops/s
# Warmup Iteration  23: 4763624.151 ops/s
# Warmup Iteration  24: 4774977.047 ops/s
# Warmup Iteration  25: 4771548.981 ops/s
# Warmup Iteration  26: 4784089.932 ops/s
# Warmup Iteration  27: 4855650.770 ops/s
# Warmup Iteration  28: 4786367.308 ops/s
# Warmup Iteration  29: 4767184.972 ops/s
# Warmup Iteration  30: 4753383.818 ops/s
Iteration   1: 4578694.099 ops/s
Iteration   2: 4762613.776 ops/s
Iteration   3: 4440800.340 ops/s
Iteration   4: 4719888.844 ops/s
Iteration   5: 4734306.418 ops/s
Iteration   6: 4582832.975 ops/s
Iteration   7: 4610244.479 ops/s
Iteration   8: 4828973.525 ops/s
Iteration   9: 4787972.939 ops/s
Iteration  10: 4475294.961 ops/s
Iteration  11: 4625442.687 ops/s
Iteration  12: 4787536.917 ops/s
Iteration  13: 4740164.344 ops/s
Iteration  14: 4595802.653 ops/s
Iteration  15: 4605410.391 ops/s
Iteration  16: 4856498.486 ops/s
Iteration  17: 4678528.521 ops/s
Iteration  18: 4663484.791 ops/s
Iteration  19: 4844007.558 ops/s
Iteration  20: 4761845.395 ops/s
Iteration  21: 4577063.463 ops/s
Iteration  22: 4833538.116 ops/s
Iteration  23: 4788555.164 ops/s
Iteration  24: 4781061.638 ops/s
Iteration  25: 4833380.404 ops/s
Iteration  26: 4761263.325 ops/s
Iteration  27: 4814141.104 ops/s
Iteration  28: 4873104.971 ops/s
Iteration  29: 4878373.773 ops/s
Iteration  30: 4832782.175 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith":
  4721786.941 ±(99.9%) 80080.832 ops/s [Average]
  (min, avg, max) = (4440800.340, 4721786.941, 4878373.773), stdev = 119861.228
  CI (99.9%): [4641706.109, 4801867.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  4721786.941 ± 80080.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 269588.551 ops/s
# Warmup Iteration   2: 503924.993 ops/s
# Warmup Iteration   3: 561823.173 ops/s
# Warmup Iteration   4: 567291.134 ops/s
# Warmup Iteration   5: 562662.582 ops/s
# Warmup Iteration   6: 478676.692 ops/s
# Warmup Iteration   7: 581329.276 ops/s
# Warmup Iteration   8: 571495.523 ops/s
# Warmup Iteration   9: 570282.511 ops/s
# Warmup Iteration  10: 575371.972 ops/s
# Warmup Iteration  11: 575557.650 ops/s
# Warmup Iteration  12: 582514.166 ops/s
# Warmup Iteration  13: 572681.249 ops/s
# Warmup Iteration  14: 540144.997 ops/s
# Warmup Iteration  15: 559074.370 ops/s
# Warmup Iteration  16: 547582.247 ops/s
# Warmup Iteration  17: 560786.045 ops/s
# Warmup Iteration  18: 552965.777 ops/s
# Warmup Iteration  19: 548155.720 ops/s
# Warmup Iteration  20: 544886.141 ops/s
# Warmup Iteration  21: 572179.565 ops/s
# Warmup Iteration  22: 554967.904 ops/s
# Warmup Iteration  23: 569670.671 ops/s
# Warmup Iteration  24: 555105.421 ops/s
# Warmup Iteration  25: 550001.901 ops/s
# Warmup Iteration  26: 557432.920 ops/s
# Warmup Iteration  27: 549460.535 ops/s
# Warmup Iteration  28: 552766.775 ops/s
# Warmup Iteration  29: 549293.680 ops/s
# Warmup Iteration  30: 556224.259 ops/s
Iteration   1: 562754.234 ops/s
Iteration   2: 571191.090 ops/s
Iteration   3: 578989.457 ops/s
Iteration   4: 576463.367 ops/s
Iteration   5: 576692.471 ops/s
Iteration   6: 571892.655 ops/s
Iteration   7: 549925.030 ops/s
Iteration   8: 550674.520 ops/s
Iteration   9: 573323.937 ops/s
Iteration  10: 560048.113 ops/s
Iteration  11: 552626.751 ops/s
Iteration  12: 575849.134 ops/s
Iteration  13: 581417.393 ops/s
Iteration  14: 573027.963 ops/s
Iteration  15: 570503.736 ops/s
Iteration  16: 577057.891 ops/s
Iteration  17: 566556.321 ops/s
Iteration  18: 566342.272 ops/s
Iteration  19: 574798.512 ops/s
Iteration  20: 575797.785 ops/s
Iteration  21: 581505.475 ops/s
Iteration  22: 577505.783 ops/s
Iteration  23: 571055.971 ops/s
Iteration  24: 575730.469 ops/s
Iteration  25: 584476.584 ops/s
Iteration  26: 582297.241 ops/s
Iteration  27: 576411.164 ops/s
Iteration  28: 564565.780 ops/s
Iteration  29: 574094.945 ops/s
Iteration  30: 574351.808 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf":
  571597.595 ±(99.9%) 5991.459 ops/s [Average]
  (min, avg, max) = (549925.030, 571597.595, 584476.584), stdev = 8967.735
  CI (99.9%): [565606.136, 577589.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  571597.595 ± 5991.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886913.258 ops/s
# Warmup Iteration   2: 1795917.421 ops/s
# Warmup Iteration   3: 1885736.258 ops/s
# Warmup Iteration   4: 1883899.773 ops/s
# Warmup Iteration   5: 1597534.353 ops/s
# Warmup Iteration   6: 1961409.910 ops/s
# Warmup Iteration   7: 1929344.948 ops/s
# Warmup Iteration   8: 1985646.084 ops/s
# Warmup Iteration   9: 2024147.726 ops/s
# Warmup Iteration  10: 1983182.341 ops/s
# Warmup Iteration  11: 1993761.077 ops/s
# Warmup Iteration  12: 1992542.596 ops/s
# Warmup Iteration  13: 2002995.096 ops/s
# Warmup Iteration  14: 1987128.816 ops/s
# Warmup Iteration  15: 2006597.345 ops/s
# Warmup Iteration  16: 1978188.086 ops/s
# Warmup Iteration  17: 1984983.456 ops/s
# Warmup Iteration  18: 2016466.196 ops/s
# Warmup Iteration  19: 2002375.747 ops/s
# Warmup Iteration  20: 1966208.475 ops/s
# Warmup Iteration  21: 2014926.202 ops/s
# Warmup Iteration  22: 1989338.759 ops/s
# Warmup Iteration  23: 1981311.550 ops/s
# Warmup Iteration  24: 1970996.552 ops/s
# Warmup Iteration  25: 1942536.391 ops/s
# Warmup Iteration  26: 1955610.904 ops/s
# Warmup Iteration  27: 1941467.274 ops/s
# Warmup Iteration  28: 1964916.154 ops/s
# Warmup Iteration  29: 1994112.885 ops/s
# Warmup Iteration  30: 1957164.663 ops/s
Iteration   1: 1973545.902 ops/s
Iteration   2: 1969705.629 ops/s
Iteration   3: 1980658.714 ops/s
Iteration   4: 1979266.148 ops/s
Iteration   5: 1974182.931 ops/s
Iteration   6: 1928779.178 ops/s
Iteration   7: 1948513.241 ops/s
Iteration   8: 1942985.529 ops/s
Iteration   9: 2003568.429 ops/s
Iteration  10: 2013739.219 ops/s
Iteration  11: 1977435.394 ops/s
Iteration  12: 1988829.104 ops/s
Iteration  13: 1999218.943 ops/s
Iteration  14: 1983806.515 ops/s
Iteration  15: 1836545.833 ops/s
Iteration  16: 1962676.595 ops/s
Iteration  17: 2012497.511 ops/s
Iteration  18: 1899400.423 ops/s
Iteration  19: 1896604.455 ops/s
Iteration  20: 1916821.278 ops/s
Iteration  21: 1981663.428 ops/s
Iteration  22: 1980377.871 ops/s
Iteration  23: 1987344.395 ops/s
Iteration  24: 1986142.380 ops/s
Iteration  25: 1980178.597 ops/s
Iteration  26: 2004601.009 ops/s
Iteration  27: 1974731.138 ops/s
Iteration  28: 1988518.020 ops/s
Iteration  29: 2020569.631 ops/s
Iteration  30: 1996089.331 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectUnique":
  1969633.226 ±(99.9%) 26663.521 ops/s [Average]
  (min, avg, max) = (1836545.833, 1969633.226, 2020569.631), stdev = 39908.706
  CI (99.9%): [1942969.705, 1996296.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectUnique  thrpt   30  1969633.226 ± 26663.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 272047.417 ops/s
# Warmup Iteration   2: 616688.899 ops/s
# Warmup Iteration   3: 640742.009 ops/s
# Warmup Iteration   4: 638837.542 ops/s
# Warmup Iteration   5: 513209.571 ops/s
# Warmup Iteration   6: 639684.328 ops/s
# Warmup Iteration   7: 649801.795 ops/s
# Warmup Iteration   8: 661351.504 ops/s
# Warmup Iteration   9: 656257.955 ops/s
# Warmup Iteration  10: 657710.377 ops/s
# Warmup Iteration  11: 656768.329 ops/s
# Warmup Iteration  12: 663385.607 ops/s
# Warmup Iteration  13: 663639.664 ops/s
# Warmup Iteration  14: 665395.931 ops/s
# Warmup Iteration  15: 654954.157 ops/s
# Warmup Iteration  16: 659171.309 ops/s
# Warmup Iteration  17: 660266.529 ops/s
# Warmup Iteration  18: 638388.967 ops/s
# Warmup Iteration  19: 637868.857 ops/s
# Warmup Iteration  20: 644930.037 ops/s
# Warmup Iteration  21: 655861.441 ops/s
# Warmup Iteration  22: 660454.235 ops/s
# Warmup Iteration  23: 656814.919 ops/s
# Warmup Iteration  24: 658173.643 ops/s
# Warmup Iteration  25: 634974.471 ops/s
# Warmup Iteration  26: 661922.341 ops/s
# Warmup Iteration  27: 644808.767 ops/s
# Warmup Iteration  28: 660375.430 ops/s
# Warmup Iteration  29: 649975.705 ops/s
# Warmup Iteration  30: 658406.953 ops/s
Iteration   1: 655844.889 ops/s
Iteration   2: 631926.352 ops/s
Iteration   3: 662787.259 ops/s
Iteration   4: 646794.858 ops/s
Iteration   5: 658326.917 ops/s
Iteration   6: 656072.399 ops/s
Iteration   7: 656412.961 ops/s
Iteration   8: 659659.224 ops/s
Iteration   9: 646928.948 ops/s
Iteration  10: 656320.671 ops/s
Iteration  11: 653014.845 ops/s
Iteration  12: 659837.171 ops/s
Iteration  13: 657007.680 ops/s
Iteration  14: 659441.424 ops/s
Iteration  15: 663070.737 ops/s
Iteration  16: 656053.513 ops/s
Iteration  17: 662339.657 ops/s
Iteration  18: 662846.422 ops/s
Iteration  19: 661049.615 ops/s
Iteration  20: 663858.339 ops/s
Iteration  21: 656651.355 ops/s
Iteration  22: 660420.597 ops/s
Iteration  23: 658855.589 ops/s
Iteration  24: 652743.174 ops/s
Iteration  25: 655019.763 ops/s
Iteration  26: 662147.236 ops/s
Iteration  27: 651262.547 ops/s
Iteration  28: 667555.889 ops/s
Iteration  29: 670717.274 ops/s
Iteration  30: 663781.428 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith":
  657624.958 ±(99.9%) 4811.332 ops/s [Average]
  (min, avg, max) = (631926.352, 657624.958, 670717.274), stdev = 7201.376
  CI (99.9%): [652813.625, 662436.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith  thrpt   30  657624.958 ± 4811.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 219204.641 ops/s
# Warmup Iteration   2: 476352.539 ops/s
# Warmup Iteration   3: 539354.784 ops/s
# Warmup Iteration   4: 542661.761 ops/s
# Warmup Iteration   5: 448345.495 ops/s
# Warmup Iteration   6: 534524.496 ops/s
# Warmup Iteration   7: 543890.032 ops/s
# Warmup Iteration   8: 549600.017 ops/s
# Warmup Iteration   9: 542341.329 ops/s
# Warmup Iteration  10: 542806.625 ops/s
# Warmup Iteration  11: 533053.491 ops/s
# Warmup Iteration  12: 536314.243 ops/s
# Warmup Iteration  13: 537939.856 ops/s
# Warmup Iteration  14: 540760.892 ops/s
# Warmup Iteration  15: 541845.701 ops/s
# Warmup Iteration  16: 537468.441 ops/s
# Warmup Iteration  17: 538910.173 ops/s
# Warmup Iteration  18: 518870.177 ops/s
# Warmup Iteration  19: 520642.393 ops/s
# Warmup Iteration  20: 520898.015 ops/s
# Warmup Iteration  21: 531315.417 ops/s
# Warmup Iteration  22: 537409.856 ops/s
# Warmup Iteration  23: 535586.006 ops/s
# Warmup Iteration  24: 538469.867 ops/s
# Warmup Iteration  25: 541953.833 ops/s
# Warmup Iteration  26: 520527.849 ops/s
# Warmup Iteration  27: 521491.479 ops/s
# Warmup Iteration  28: 530038.738 ops/s
# Warmup Iteration  29: 545106.956 ops/s
# Warmup Iteration  30: 548235.583 ops/s
Iteration   1: 547414.740 ops/s
Iteration   2: 543139.919 ops/s
Iteration   3: 537244.481 ops/s
Iteration   4: 540278.652 ops/s
Iteration   5: 541055.412 ops/s
Iteration   6: 535117.969 ops/s
Iteration   7: 545433.876 ops/s
Iteration   8: 548121.021 ops/s
Iteration   9: 541799.447 ops/s
Iteration  10: 544196.849 ops/s
Iteration  11: 531848.889 ops/s
Iteration  12: 547291.360 ops/s
Iteration  13: 538428.865 ops/s
Iteration  14: 519126.461 ops/s
Iteration  15: 539213.084 ops/s
Iteration  16: 538728.646 ops/s
Iteration  17: 535554.859 ops/s
Iteration  18: 534806.966 ops/s
Iteration  19: 520540.927 ops/s
Iteration  20: 535508.270 ops/s
Iteration  21: 531618.643 ops/s
Iteration  22: 527088.028 ops/s
Iteration  23: 509441.085 ops/s
Iteration  24: 533121.755 ops/s
Iteration  25: 517387.689 ops/s
Iteration  26: 540833.259 ops/s
Iteration  27: 550894.152 ops/s
Iteration  28: 550181.313 ops/s
Iteration  29: 533804.395 ops/s
Iteration  30: 532833.020 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target":
  536401.801 ±(99.9%) 6650.155 ops/s [Average]
  (min, avg, max) = (509441.085, 536401.801, 550894.152), stdev = 9953.640
  CI (99.9%): [529751.646, 543051.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_selectWith_target  thrpt   30  536401.801 ± 6650.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546413.808 ops/s
# Warmup Iteration   2: 918592.059 ops/s
# Warmup Iteration   3: 1103798.900 ops/s
# Warmup Iteration   4: 1088130.409 ops/s
# Warmup Iteration   5: 1125521.263 ops/s
# Warmup Iteration   6: 906736.199 ops/s
# Warmup Iteration   7: 1117604.961 ops/s
# Warmup Iteration   8: 1118163.759 ops/s
# Warmup Iteration   9: 1103993.960 ops/s
# Warmup Iteration  10: 1115458.839 ops/s
# Warmup Iteration  11: 1110497.351 ops/s
# Warmup Iteration  12: 1113579.412 ops/s
# Warmup Iteration  13: 1105574.384 ops/s
# Warmup Iteration  14: 1106054.705 ops/s
# Warmup Iteration  15: 1120281.932 ops/s
# Warmup Iteration  16: 1127685.762 ops/s
# Warmup Iteration  17: 1109831.710 ops/s
# Warmup Iteration  18: 1065441.046 ops/s
# Warmup Iteration  19: 1110595.970 ops/s
# Warmup Iteration  20: 1120419.916 ops/s
# Warmup Iteration  21: 1115598.471 ops/s
# Warmup Iteration  22: 1110177.074 ops/s
# Warmup Iteration  23: 1112608.835 ops/s
# Warmup Iteration  24: 1106213.705 ops/s
# Warmup Iteration  25: 1104689.776 ops/s
# Warmup Iteration  26: 1073865.126 ops/s
# Warmup Iteration  27: 1115770.034 ops/s
# Warmup Iteration  28: 1110920.648 ops/s
# Warmup Iteration  29: 1108481.941 ops/s
# Warmup Iteration  30: 1102197.439 ops/s
Iteration   1: 1112432.292 ops/s
Iteration   2: 1111452.143 ops/s
Iteration   3: 1102969.284 ops/s
Iteration   4: 1116534.460 ops/s
Iteration   5: 1103914.373 ops/s
Iteration   6: 1117970.331 ops/s
Iteration   7: 1086784.210 ops/s
Iteration   8: 1075538.311 ops/s
Iteration   9: 1110947.040 ops/s
Iteration  10: 1113248.377 ops/s
Iteration  11: 1107397.023 ops/s
Iteration  12: 1105004.839 ops/s
Iteration  13: 1102727.916 ops/s
Iteration  14: 1106966.018 ops/s
Iteration  15: 1115502.122 ops/s
Iteration  16: 1130536.638 ops/s
Iteration  17: 1114294.097 ops/s
Iteration  18: 1116054.315 ops/s
Iteration  19: 1108315.439 ops/s
Iteration  20: 1119256.299 ops/s
Iteration  21: 1114764.000 ops/s
Iteration  22: 1104207.387 ops/s
Iteration  23: 1116422.668 ops/s
Iteration  24: 1108736.237 ops/s
Iteration  25: 1103716.942 ops/s
Iteration  26: 1112315.972 ops/s
Iteration  27: 1123614.517 ops/s
Iteration  28: 1110649.419 ops/s
Iteration  29: 1117168.789 ops/s
Iteration  30: 1080612.114 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble":
  1109001.786 ±(99.9%) 7691.118 ops/s [Average]
  (min, avg, max) = (1075538.311, 1109001.786, 1130536.638), stdev = 11511.704
  CI (99.9%): [1101310.668, 1116692.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDouble  thrpt   30  1109001.786 ± 7691.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.954 ops/s
# Warmup Iteration   2: 71.307 ops/s
# Warmup Iteration   3: 99.457 ops/s
# Warmup Iteration   4: 100.797 ops/s
# Warmup Iteration   5: 97.332 ops/s
# Warmup Iteration   6: 101.670 ops/s
# Warmup Iteration   7: 98.631 ops/s
# Warmup Iteration   8: 101.254 ops/s
# Warmup Iteration   9: 100.452 ops/s
# Warmup Iteration  10: 81.332 ops/s
# Warmup Iteration  11: 99.053 ops/s
# Warmup Iteration  12: 98.634 ops/s
# Warmup Iteration  13: 98.512 ops/s
# Warmup Iteration  14: 100.271 ops/s
# Warmup Iteration  15: 100.546 ops/s
# Warmup Iteration  16: 98.728 ops/s
# Warmup Iteration  17: 98.453 ops/s
# Warmup Iteration  18: 99.793 ops/s
# Warmup Iteration  19: 101.671 ops/s
# Warmup Iteration  20: 101.477 ops/s
# Warmup Iteration  21: 100.118 ops/s
# Warmup Iteration  22: 98.827 ops/s
# Warmup Iteration  23: 100.598 ops/s
# Warmup Iteration  24: 100.160 ops/s
# Warmup Iteration  25: 98.669 ops/s
# Warmup Iteration  26: 96.669 ops/s
# Warmup Iteration  27: 97.573 ops/s
# Warmup Iteration  28: 99.050 ops/s
# Warmup Iteration  29: 93.694 ops/s
# Warmup Iteration  30: 95.869 ops/s
Iteration   1: 94.441 ops/s
Iteration   2: 97.124 ops/s
Iteration   3: 97.890 ops/s
Iteration   4: 98.428 ops/s
Iteration   5: 95.944 ops/s
Iteration   6: 98.380 ops/s
Iteration   7: 90.907 ops/s
Iteration   8: 94.449 ops/s
Iteration   9: 97.236 ops/s
Iteration  10: 96.433 ops/s
Iteration  11: 97.670 ops/s
Iteration  12: 96.396 ops/s
Iteration  13: 96.495 ops/s
Iteration  14: 97.074 ops/s
Iteration  15: 99.871 ops/s
Iteration  16: 95.285 ops/s
Iteration  17: 94.591 ops/s
Iteration  18: 97.271 ops/s
Iteration  19: 98.443 ops/s
Iteration  20: 99.918 ops/s
Iteration  21: 99.093 ops/s
Iteration  22: 97.966 ops/s
Iteration  23: 96.742 ops/s
Iteration  24: 95.964 ops/s
Iteration  25: 96.406 ops/s
Iteration  26: 97.721 ops/s
Iteration  27: 99.199 ops/s
Iteration  28: 99.708 ops/s
Iteration  29: 98.715 ops/s
Iteration  30: 99.970 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  97.191 ±(99.9%) 1.332 ops/s [Average]
  (min, avg, max) = (90.907, 97.191, 99.970), stdev = 1.994
  CI (99.9%): [95.859, 98.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt   Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  97.191 ± 1.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551796.173 ops/s
# Warmup Iteration   2: 902841.392 ops/s
# Warmup Iteration   3: 1054259.932 ops/s
# Warmup Iteration   4: 1077629.504 ops/s
# Warmup Iteration   5: 1122546.428 ops/s
# Warmup Iteration   6: 923842.900 ops/s
# Warmup Iteration   7: 1123215.339 ops/s
# Warmup Iteration   8: 1121201.039 ops/s
# Warmup Iteration   9: 1106761.146 ops/s
# Warmup Iteration  10: 1071178.612 ops/s
# Warmup Iteration  11: 1108273.739 ops/s
# Warmup Iteration  12: 1076512.445 ops/s
# Warmup Iteration  13: 1104376.329 ops/s
# Warmup Iteration  14: 1078616.219 ops/s
# Warmup Iteration  15: 1099681.387 ops/s
# Warmup Iteration  16: 1077130.644 ops/s
# Warmup Iteration  17: 1138367.804 ops/s
# Warmup Iteration  18: 1123909.099 ops/s
# Warmup Iteration  19: 1085836.844 ops/s
# Warmup Iteration  20: 1126146.811 ops/s
# Warmup Iteration  21: 1125227.176 ops/s
# Warmup Iteration  22: 1064789.797 ops/s
# Warmup Iteration  23: 1122518.502 ops/s
# Warmup Iteration  24: 1131887.872 ops/s
# Warmup Iteration  25: 1135784.313 ops/s
# Warmup Iteration  26: 1130080.877 ops/s
# Warmup Iteration  27: 1097619.913 ops/s
# Warmup Iteration  28: 1127754.694 ops/s
# Warmup Iteration  29: 1133945.360 ops/s
# Warmup Iteration  30: 1122742.695 ops/s
Iteration   1: 1120110.927 ops/s
Iteration   2: 1128682.698 ops/s
Iteration   3: 1120283.877 ops/s
Iteration   4: 1128599.974 ops/s
Iteration   5: 1121792.166 ops/s
Iteration   6: 1133651.340 ops/s
Iteration   7: 1130411.646 ops/s
Iteration   8: 1075615.226 ops/s
Iteration   9: 1072132.362 ops/s
Iteration  10: 1069726.635 ops/s
Iteration  11: 1102519.428 ops/s
Iteration  12: 1062955.322 ops/s
Iteration  13: 1077047.611 ops/s
Iteration  14: 1102976.406 ops/s
Iteration  15: 1137719.797 ops/s
Iteration  16: 1126225.231 ops/s
Iteration  17: 1131723.366 ops/s
Iteration  18: 1129853.886 ops/s
Iteration  19: 1120953.790 ops/s
Iteration  20: 1116394.827 ops/s
Iteration  21: 1122460.044 ops/s
Iteration  22: 1107591.802 ops/s
Iteration  23: 1102042.704 ops/s
Iteration  24: 1100254.715 ops/s
Iteration  25: 1124717.163 ops/s
Iteration  26: 1130347.979 ops/s
Iteration  27: 1113883.385 ops/s
Iteration  28: 1122778.063 ops/s
Iteration  29: 1123100.892 ops/s
Iteration  30: 1129235.957 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat":
  1112859.641 ±(99.9%) 14223.715 ops/s [Average]
  (min, avg, max) = (1062955.322, 1112859.641, 1137719.797), stdev = 21289.389
  CI (99.9%): [1098635.925, 1127083.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloat  thrpt   30  1112859.641 ± 14223.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63.191 ops/s
# Warmup Iteration   2: 69.768 ops/s
# Warmup Iteration   3: 99.476 ops/s
# Warmup Iteration   4: 98.197 ops/s
# Warmup Iteration   5: 97.011 ops/s
# Warmup Iteration   6: 98.681 ops/s
# Warmup Iteration   7: 97.055 ops/s
# Warmup Iteration   8: 97.711 ops/s
# Warmup Iteration   9: 99.164 ops/s
# Warmup Iteration  10: 84.776 ops/s
# Warmup Iteration  11: 92.651 ops/s
# Warmup Iteration  12: 98.742 ops/s
# Warmup Iteration  13: 99.029 ops/s
# Warmup Iteration  14: 98.982 ops/s
# Warmup Iteration  15: 99.890 ops/s
# Warmup Iteration  16: 97.244 ops/s
# Warmup Iteration  17: 96.314 ops/s
# Warmup Iteration  18: 98.488 ops/s
# Warmup Iteration  19: 98.597 ops/s
# Warmup Iteration  20: 99.307 ops/s
# Warmup Iteration  21: 99.374 ops/s
# Warmup Iteration  22: 96.871 ops/s
# Warmup Iteration  23: 98.420 ops/s
# Warmup Iteration  24: 98.387 ops/s
# Warmup Iteration  25: 98.026 ops/s
# Warmup Iteration  26: 99.548 ops/s
# Warmup Iteration  27: 99.538 ops/s
# Warmup Iteration  28: 99.529 ops/s
# Warmup Iteration  29: 97.298 ops/s
# Warmup Iteration  30: 96.383 ops/s
Iteration   1: 96.666 ops/s
Iteration   2: 98.683 ops/s
Iteration   3: 98.531 ops/s
Iteration   4: 96.326 ops/s
Iteration   5: 95.584 ops/s
Iteration   6: 98.131 ops/s
Iteration   7: 96.562 ops/s
Iteration   8: 92.923 ops/s
Iteration   9: 94.421 ops/s
Iteration  10: 96.983 ops/s
Iteration  11: 95.198 ops/s
Iteration  12: 95.890 ops/s
Iteration  13: 96.973 ops/s
Iteration  14: 96.186 ops/s
Iteration  15: 96.255 ops/s
Iteration  16: 92.947 ops/s
Iteration  17: 92.269 ops/s
Iteration  18: 97.391 ops/s
Iteration  19: 96.031 ops/s
Iteration  20: 97.597 ops/s
Iteration  21: 97.068 ops/s
Iteration  22: 97.370 ops/s
Iteration  23: 97.892 ops/s
Iteration  24: 96.982 ops/s
Iteration  25: 96.338 ops/s
Iteration  26: 97.346 ops/s
Iteration  27: 96.066 ops/s
Iteration  28: 95.309 ops/s
Iteration  29: 96.685 ops/s
Iteration  30: 96.796 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  96.313 ±(99.9%) 1.036 ops/s [Average]
  (min, avg, max) = (92.269, 96.313, 98.683), stdev = 1.550
  CI (99.9%): [95.278, 97.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt   Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  96.313 ± 1.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724409.471 ops/s
# Warmup Iteration   2: 1324601.141 ops/s
# Warmup Iteration   3: 1477109.244 ops/s
# Warmup Iteration   4: 1441508.522 ops/s
# Warmup Iteration   5: 1360141.040 ops/s
# Warmup Iteration   6: 1313012.951 ops/s
# Warmup Iteration   7: 1469611.535 ops/s
# Warmup Iteration   8: 1434988.977 ops/s
# Warmup Iteration   9: 1441964.390 ops/s
# Warmup Iteration  10: 1435270.499 ops/s
# Warmup Iteration  11: 1480289.007 ops/s
# Warmup Iteration  12: 1483881.320 ops/s
# Warmup Iteration  13: 1441790.173 ops/s
# Warmup Iteration  14: 1457531.155 ops/s
# Warmup Iteration  15: 1423184.228 ops/s
# Warmup Iteration  16: 1475559.181 ops/s
# Warmup Iteration  17: 1425036.249 ops/s
# Warmup Iteration  18: 1491475.573 ops/s
# Warmup Iteration  19: 1503804.946 ops/s
# Warmup Iteration  20: 1472778.239 ops/s
# Warmup Iteration  21: 1426887.769 ops/s
# Warmup Iteration  22: 1433866.907 ops/s
# Warmup Iteration  23: 1481157.343 ops/s
# Warmup Iteration  24: 1447307.861 ops/s
# Warmup Iteration  25: 1416358.407 ops/s
# Warmup Iteration  26: 1490166.006 ops/s
# Warmup Iteration  27: 1478880.617 ops/s
# Warmup Iteration  28: 1483240.767 ops/s
# Warmup Iteration  29: 1470333.429 ops/s
# Warmup Iteration  30: 1456905.145 ops/s
Iteration   1: 1487607.405 ops/s
Iteration   2: 1419920.015 ops/s
Iteration   3: 1470865.360 ops/s
Iteration   4: 1487159.608 ops/s
Iteration   5: 1487009.578 ops/s
Iteration   6: 1481111.579 ops/s
Iteration   7: 1469707.257 ops/s
Iteration   8: 1416262.492 ops/s
Iteration   9: 1418146.111 ops/s
Iteration  10: 1438568.596 ops/s
Iteration  11: 1445472.908 ops/s
Iteration  12: 1492906.146 ops/s
Iteration  13: 1489549.496 ops/s
Iteration  14: 1479126.980 ops/s
Iteration  15: 1484215.119 ops/s
Iteration  16: 1496069.382 ops/s
Iteration  17: 1467370.019 ops/s
Iteration  18: 1480371.117 ops/s
Iteration  19: 1472107.338 ops/s
Iteration  20: 1485658.328 ops/s
Iteration  21: 1481195.599 ops/s
Iteration  22: 1421237.521 ops/s
Iteration  23: 1462708.978 ops/s
Iteration  24: 1446303.708 ops/s
Iteration  25: 1469029.636 ops/s
Iteration  26: 1427086.227 ops/s
Iteration  27: 1406097.286 ops/s
Iteration  28: 1418969.213 ops/s
Iteration  29: 1410961.616 ops/s
Iteration  30: 1416202.692 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByInt":
  1457633.244 ±(99.9%) 20145.925 ops/s [Average]
  (min, avg, max) = (1406097.286, 1457633.244, 1496069.382), stdev = 30153.474
  CI (99.9%): [1437487.319, 1477779.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByInt  thrpt   30  1457633.244 ± 20145.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690068.803 ops/s
# Warmup Iteration   2: 1229772.807 ops/s
# Warmup Iteration   3: 1393450.853 ops/s
# Warmup Iteration   4: 1445328.916 ops/s
# Warmup Iteration   5: 1442100.773 ops/s
# Warmup Iteration   6: 1110515.512 ops/s
# Warmup Iteration   7: 1407301.872 ops/s
# Warmup Iteration   8: 1411638.172 ops/s
# Warmup Iteration   9: 1361453.609 ops/s
# Warmup Iteration  10: 1425465.823 ops/s
# Warmup Iteration  11: 1384000.641 ops/s
# Warmup Iteration  12: 1413423.405 ops/s
# Warmup Iteration  13: 1360065.692 ops/s
# Warmup Iteration  14: 1374245.047 ops/s
# Warmup Iteration  15: 1378733.481 ops/s
# Warmup Iteration  16: 1361037.486 ops/s
# Warmup Iteration  17: 1407094.850 ops/s
# Warmup Iteration  18: 1360181.782 ops/s
# Warmup Iteration  19: 1404424.223 ops/s
# Warmup Iteration  20: 1426561.803 ops/s
# Warmup Iteration  21: 1431569.540 ops/s
# Warmup Iteration  22: 1409885.112 ops/s
# Warmup Iteration  23: 1417683.595 ops/s
# Warmup Iteration  24: 1426432.854 ops/s
# Warmup Iteration  25: 1426239.478 ops/s
# Warmup Iteration  26: 1405569.999 ops/s
# Warmup Iteration  27: 1374833.341 ops/s
# Warmup Iteration  28: 1365764.008 ops/s
# Warmup Iteration  29: 1358872.178 ops/s
# Warmup Iteration  30: 1389036.765 ops/s
Iteration   1: 1368596.658 ops/s
Iteration   2: 1419541.379 ops/s
Iteration   3: 1427795.774 ops/s
Iteration   4: 1426321.446 ops/s
Iteration   5: 1422640.960 ops/s
Iteration   6: 1418167.784 ops/s
Iteration   7: 1432715.321 ops/s
Iteration   8: 1430223.079 ops/s
Iteration   9: 1439728.974 ops/s
Iteration  10: 1450868.265 ops/s
Iteration  11: 1412474.770 ops/s
Iteration  12: 1429062.782 ops/s
Iteration  13: 1436494.626 ops/s
Iteration  14: 1433004.592 ops/s
Iteration  15: 1426192.510 ops/s
Iteration  16: 1421043.717 ops/s
Iteration  17: 1453232.523 ops/s
Iteration  18: 1454933.170 ops/s
Iteration  19: 1400235.766 ops/s
Iteration  20: 1431661.999 ops/s
Iteration  21: 1441777.117 ops/s
Iteration  22: 1429617.915 ops/s
Iteration  23: 1409220.744 ops/s
Iteration  24: 1420689.472 ops/s
Iteration  25: 1437003.383 ops/s
Iteration  26: 1429663.549 ops/s
Iteration  27: 1412484.764 ops/s
Iteration  28: 1412007.509 ops/s
Iteration  29: 1424156.782 ops/s
Iteration  30: 1440016.357 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByLong":
  1426385.790 ±(99.9%) 11243.818 ops/s [Average]
  (min, avg, max) = (1368596.658, 1426385.790, 1454933.170), stdev = 16829.219
  CI (99.9%): [1415141.971, 1437629.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumByLong  thrpt   30  1426385.790 ± 11243.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1750082.932 ops/s
# Warmup Iteration   2: 4167390.754 ops/s
# Warmup Iteration   3: 4199485.723 ops/s
# Warmup Iteration   4: 3487423.786 ops/s
# Warmup Iteration   5: 4292997.897 ops/s
# Warmup Iteration   6: 4256733.381 ops/s
# Warmup Iteration   7: 4246405.456 ops/s
# Warmup Iteration   8: 4191611.362 ops/s
# Warmup Iteration   9: 4247984.489 ops/s
# Warmup Iteration  10: 4259624.556 ops/s
# Warmup Iteration  11: 4254525.502 ops/s
# Warmup Iteration  12: 4228197.478 ops/s
# Warmup Iteration  13: 4248677.455 ops/s
# Warmup Iteration  14: 4243917.417 ops/s
# Warmup Iteration  15: 4180777.061 ops/s
# Warmup Iteration  16: 4246272.870 ops/s
# Warmup Iteration  17: 4251712.044 ops/s
# Warmup Iteration  18: 4193640.027 ops/s
# Warmup Iteration  19: 4070487.836 ops/s
# Warmup Iteration  20: 4189636.446 ops/s
# Warmup Iteration  21: 4324590.078 ops/s
# Warmup Iteration  22: 4304161.985 ops/s
# Warmup Iteration  23: 4048014.490 ops/s
# Warmup Iteration  24: 4235091.397 ops/s
# Warmup Iteration  25: 4282789.120 ops/s
# Warmup Iteration  26: 4110563.044 ops/s
# Warmup Iteration  27: 4174711.586 ops/s
# Warmup Iteration  28: 4024415.811 ops/s
# Warmup Iteration  29: 4049197.806 ops/s
# Warmup Iteration  30: 4115286.217 ops/s
Iteration   1: 4283871.464 ops/s
Iteration   2: 4194113.266 ops/s
Iteration   3: 4238498.477 ops/s
Iteration   4: 4234301.596 ops/s
Iteration   5: 4278085.473 ops/s
Iteration   6: 4199115.715 ops/s
Iteration   7: 4236885.012 ops/s
Iteration   8: 4220933.548 ops/s
Iteration   9: 4254814.789 ops/s
Iteration  10: 4242843.582 ops/s
Iteration  11: 4230651.616 ops/s
Iteration  12: 4261166.308 ops/s
Iteration  13: 4258926.478 ops/s
Iteration  14: 4266221.637 ops/s
Iteration  15: 4113769.259 ops/s
Iteration  16: 4261589.820 ops/s
Iteration  17: 4241983.385 ops/s
Iteration  18: 4171992.554 ops/s
Iteration  19: 4273752.898 ops/s
Iteration  20: 4258410.673 ops/s
Iteration  21: 4248067.737 ops/s
Iteration  22: 4208998.238 ops/s
Iteration  23: 4311449.732 ops/s
Iteration  24: 4226993.619 ops/s
Iteration  25: 4295951.104 ops/s
Iteration  26: 4190949.308 ops/s
Iteration  27: 4213100.117 ops/s
Iteration  28: 4257014.886 ops/s
Iteration  29: 4327343.122 ops/s
Iteration  30: 4284237.008 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDouble":
  4242867.747 ±(99.9%) 28847.702 ops/s [Average]
  (min, avg, max) = (4113769.259, 4242867.747, 4327343.122), stdev = 43177.886
  CI (99.9%): [4214020.045, 4271715.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDouble  thrpt   30  4242867.747 ± 28847.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.973 ops/s
# Warmup Iteration   2: 86.735 ops/s
# Warmup Iteration   3: 117.400 ops/s
# Warmup Iteration   4: 112.706 ops/s
# Warmup Iteration   5: 111.954 ops/s
# Warmup Iteration   6: 117.891 ops/s
# Warmup Iteration   7: 117.685 ops/s
# Warmup Iteration   8: 116.835 ops/s
# Warmup Iteration   9: 118.262 ops/s
# Warmup Iteration  10: 118.398 ops/s
# Warmup Iteration  11: 98.651 ops/s
# Warmup Iteration  12: 119.076 ops/s
# Warmup Iteration  13: 118.029 ops/s
# Warmup Iteration  14: 117.614 ops/s
# Warmup Iteration  15: 115.867 ops/s
# Warmup Iteration  16: 113.269 ops/s
# Warmup Iteration  17: 114.708 ops/s
# Warmup Iteration  18: 118.103 ops/s
# Warmup Iteration  19: 115.353 ops/s
# Warmup Iteration  20: 117.755 ops/s
# Warmup Iteration  21: 116.876 ops/s
# Warmup Iteration  22: 116.647 ops/s
# Warmup Iteration  23: 113.194 ops/s
# Warmup Iteration  24: 112.347 ops/s
# Warmup Iteration  25: 110.842 ops/s
# Warmup Iteration  26: 113.420 ops/s
# Warmup Iteration  27: 117.648 ops/s
# Warmup Iteration  28: 116.589 ops/s
# Warmup Iteration  29: 117.124 ops/s
# Warmup Iteration  30: 115.772 ops/s
Iteration   1: 116.908 ops/s
Iteration   2: 113.422 ops/s
Iteration   3: 115.442 ops/s
Iteration   4: 114.762 ops/s
Iteration   5: 114.875 ops/s
Iteration   6: 115.218 ops/s
Iteration   7: 114.572 ops/s
Iteration   8: 117.382 ops/s
Iteration   9: 114.433 ops/s
Iteration  10: 118.432 ops/s
Iteration  11: 115.808 ops/s
Iteration  12: 115.822 ops/s
Iteration  13: 117.473 ops/s
Iteration  14: 116.029 ops/s
Iteration  15: 115.837 ops/s
Iteration  16: 115.025 ops/s
Iteration  17: 112.425 ops/s
Iteration  18: 116.965 ops/s
Iteration  19: 117.323 ops/s
Iteration  20: 117.250 ops/s
Iteration  21: 118.076 ops/s
Iteration  22: 117.540 ops/s
Iteration  23: 116.820 ops/s
Iteration  24: 116.848 ops/s
Iteration  25: 116.232 ops/s
Iteration  26: 115.597 ops/s
Iteration  27: 116.548 ops/s
Iteration  28: 114.673 ops/s
Iteration  29: 110.695 ops/s
Iteration  30: 115.348 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  115.793 ±(99.9%) 1.119 ops/s [Average]
  (min, avg, max) = (110.695, 115.793, 118.432), stdev = 1.675
  CI (99.9%): [114.674, 116.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt    Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  115.793 ± 1.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80.231 ops/s
# Warmup Iteration   2: 91.733 ops/s
# Warmup Iteration   3: 122.184 ops/s
# Warmup Iteration   4: 124.128 ops/s
# Warmup Iteration   5: 121.604 ops/s
# Warmup Iteration   6: 120.290 ops/s
# Warmup Iteration   7: 122.410 ops/s
# Warmup Iteration   8: 119.355 ops/s
# Warmup Iteration   9: 123.302 ops/s
# Warmup Iteration  10: 113.901 ops/s
# Warmup Iteration  11: 112.088 ops/s
# Warmup Iteration  12: 122.565 ops/s
# Warmup Iteration  13: 119.518 ops/s
# Warmup Iteration  14: 122.035 ops/s
# Warmup Iteration  15: 119.549 ops/s
# Warmup Iteration  16: 120.822 ops/s
# Warmup Iteration  17: 120.354 ops/s
# Warmup Iteration  18: 121.038 ops/s
# Warmup Iteration  19: 120.126 ops/s
# Warmup Iteration  20: 120.616 ops/s
# Warmup Iteration  21: 122.410 ops/s
# Warmup Iteration  22: 123.137 ops/s
# Warmup Iteration  23: 123.685 ops/s
# Warmup Iteration  24: 121.592 ops/s
# Warmup Iteration  25: 120.275 ops/s
# Warmup Iteration  26: 122.144 ops/s
# Warmup Iteration  27: 120.741 ops/s
# Warmup Iteration  28: 121.907 ops/s
# Warmup Iteration  29: 118.862 ops/s
# Warmup Iteration  30: 120.522 ops/s
Iteration   1: 121.222 ops/s
Iteration   2: 118.964 ops/s
Iteration   3: 120.660 ops/s
Iteration   4: 120.927 ops/s
Iteration   5: 121.712 ops/s
Iteration   6: 121.973 ops/s
Iteration   7: 119.661 ops/s
Iteration   8: 119.953 ops/s
Iteration   9: 120.154 ops/s
Iteration  10: 119.362 ops/s
Iteration  11: 120.885 ops/s
Iteration  12: 118.893 ops/s
Iteration  13: 120.269 ops/s
Iteration  14: 121.617 ops/s
Iteration  15: 121.692 ops/s
Iteration  16: 122.355 ops/s
Iteration  17: 120.076 ops/s
Iteration  18: 118.893 ops/s
Iteration  19: 121.372 ops/s
Iteration  20: 121.946 ops/s
Iteration  21: 121.151 ops/s
Iteration  22: 121.842 ops/s
Iteration  23: 121.051 ops/s
Iteration  24: 119.380 ops/s
Iteration  25: 120.135 ops/s
Iteration  26: 122.219 ops/s
Iteration  27: 121.561 ops/s
Iteration  28: 119.740 ops/s
Iteration  29: 115.840 ops/s
Iteration  30: 122.091 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  120.586 ±(99.9%) 0.930 ops/s [Average]
  (min, avg, max) = (115.840, 120.586, 122.355), stdev = 1.393
  CI (99.9%): [119.656, 121.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt    Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  120.586 ± 0.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1688718.611 ops/s
# Warmup Iteration   2: 3997988.856 ops/s
# Warmup Iteration   3: 3982307.029 ops/s
# Warmup Iteration   4: 3359925.241 ops/s
# Warmup Iteration   5: 3971321.646 ops/s
# Warmup Iteration   6: 4023141.490 ops/s
# Warmup Iteration   7: 4045276.131 ops/s
# Warmup Iteration   8: 4099449.434 ops/s
# Warmup Iteration   9: 4081637.492 ops/s
# Warmup Iteration  10: 4091845.170 ops/s
# Warmup Iteration  11: 3939758.492 ops/s
# Warmup Iteration  12: 3982822.812 ops/s
# Warmup Iteration  13: 3936232.891 ops/s
# Warmup Iteration  14: 3837263.418 ops/s
# Warmup Iteration  15: 3920492.708 ops/s
# Warmup Iteration  16: 3819056.654 ops/s
# Warmup Iteration  17: 3906180.789 ops/s
# Warmup Iteration  18: 4021922.933 ops/s
# Warmup Iteration  19: 3993652.860 ops/s
# Warmup Iteration  20: 4021474.494 ops/s
# Warmup Iteration  21: 4032076.654 ops/s
# Warmup Iteration  22: 3929879.437 ops/s
# Warmup Iteration  23: 3899626.871 ops/s
# Warmup Iteration  24: 4048253.699 ops/s
# Warmup Iteration  25: 3975954.843 ops/s
# Warmup Iteration  26: 3870147.338 ops/s
# Warmup Iteration  27: 3970625.770 ops/s
# Warmup Iteration  28: 3945331.448 ops/s
# Warmup Iteration  29: 3919281.790 ops/s
# Warmup Iteration  30: 4032945.328 ops/s
Iteration   1: 3808894.376 ops/s
Iteration   2: 4070683.102 ops/s
Iteration   3: 3948201.630 ops/s
Iteration   4: 3979595.080 ops/s
Iteration   5: 3886051.118 ops/s
Iteration   6: 3820888.388 ops/s
Iteration   7: 3941738.535 ops/s
Iteration   8: 3823565.264 ops/s
Iteration   9: 3906976.779 ops/s
Iteration  10: 3963855.927 ops/s
Iteration  11: 3896291.534 ops/s
Iteration  12: 3845727.796 ops/s
Iteration  13: 3899061.308 ops/s
Iteration  14: 4086932.150 ops/s
Iteration  15: 4118970.323 ops/s
Iteration  16: 4075618.816 ops/s
Iteration  17: 4130946.311 ops/s
Iteration  18: 4039805.497 ops/s
Iteration  19: 4050252.772 ops/s
Iteration  20: 4096527.597 ops/s
Iteration  21: 3904472.418 ops/s
Iteration  22: 4066379.706 ops/s
Iteration  23: 3992510.559 ops/s
Iteration  24: 3849946.395 ops/s
Iteration  25: 3955543.952 ops/s
Iteration  26: 4069745.745 ops/s
Iteration  27: 4081695.965 ops/s
Iteration  28: 3932516.293 ops/s
Iteration  29: 3999722.396 ops/s
Iteration  30: 3997738.770 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloat":
  3974695.217 ±(99.9%) 64690.522 ops/s [Average]
  (min, avg, max) = (3808894.376, 3974695.217, 4130946.311), stdev = 96825.736
  CI (99.9%): [3910004.694, 4039385.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloat  thrpt   30  3974695.217 ± 64690.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.304 ops/s
# Warmup Iteration   2: 87.101 ops/s
# Warmup Iteration   3: 118.215 ops/s
# Warmup Iteration   4: 117.535 ops/s
# Warmup Iteration   5: 112.936 ops/s
# Warmup Iteration   6: 112.906 ops/s
# Warmup Iteration   7: 116.721 ops/s
# Warmup Iteration   8: 114.818 ops/s
# Warmup Iteration   9: 117.019 ops/s
# Warmup Iteration  10: 115.951 ops/s
# Warmup Iteration  11: 93.371 ops/s
# Warmup Iteration  12: 112.224 ops/s
# Warmup Iteration  13: 112.338 ops/s
# Warmup Iteration  14: 117.217 ops/s
# Warmup Iteration  15: 114.550 ops/s
# Warmup Iteration  16: 111.901 ops/s
# Warmup Iteration  17: 114.329 ops/s
# Warmup Iteration  18: 113.775 ops/s
# Warmup Iteration  19: 114.131 ops/s
# Warmup Iteration  20: 114.815 ops/s
# Warmup Iteration  21: 114.946 ops/s
# Warmup Iteration  22: 115.237 ops/s
# Warmup Iteration  23: 115.829 ops/s
# Warmup Iteration  24: 118.199 ops/s
# Warmup Iteration  25: 106.651 ops/s
# Warmup Iteration  26: 104.645 ops/s
# Warmup Iteration  27: 105.573 ops/s
# Warmup Iteration  28: 107.803 ops/s
# Warmup Iteration  29: 108.010 ops/s
# Warmup Iteration  30: 106.976 ops/s
Iteration   1: 107.096 ops/s
Iteration   2: 108.588 ops/s
Iteration   3: 105.954 ops/s
Iteration   4: 102.411 ops/s
Iteration   5: 106.875 ops/s
Iteration   6: 104.836 ops/s
Iteration   7: 105.278 ops/s
Iteration   8: 106.182 ops/s
Iteration   9: 106.787 ops/s
Iteration  10: 106.268 ops/s
Iteration  11: 106.163 ops/s
Iteration  12: 106.505 ops/s
Iteration  13: 107.324 ops/s
Iteration  14: 107.642 ops/s
Iteration  15: 101.112 ops/s
Iteration  16: 100.024 ops/s
Iteration  17: 102.961 ops/s
Iteration  18: 108.312 ops/s
Iteration  19: 106.887 ops/s
Iteration  20: 105.957 ops/s
Iteration  21: 105.547 ops/s
Iteration  22: 105.896 ops/s
Iteration  23: 106.627 ops/s
Iteration  24: 107.669 ops/s
Iteration  25: 107.361 ops/s
Iteration  26: 104.628 ops/s
Iteration  27: 107.204 ops/s
Iteration  28: 108.933 ops/s
Iteration  29: 109.354 ops/s
Iteration  30: 109.902 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  106.209 ±(99.9%) 1.500 ops/s [Average]
  (min, avg, max) = (100.024, 106.209, 109.902), stdev = 2.245
  CI (99.9%): [104.709, 107.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt    Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  106.209 ± 1.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80.776 ops/s
# Warmup Iteration   2: 94.470 ops/s
# Warmup Iteration   3: 124.365 ops/s
# Warmup Iteration   4: 124.893 ops/s
# Warmup Iteration   5: 124.558 ops/s
# Warmup Iteration   6: 125.726 ops/s
# Warmup Iteration   7: 124.565 ops/s
# Warmup Iteration   8: 124.251 ops/s
# Warmup Iteration   9: 127.218 ops/s
# Warmup Iteration  10: 110.392 ops/s
# Warmup Iteration  11: 123.082 ops/s
# Warmup Iteration  12: 126.193 ops/s
# Warmup Iteration  13: 126.454 ops/s
# Warmup Iteration  14: 126.963 ops/s
# Warmup Iteration  15: 125.741 ops/s
# Warmup Iteration  16: 127.113 ops/s
# Warmup Iteration  17: 127.171 ops/s
# Warmup Iteration  18: 125.773 ops/s
# Warmup Iteration  19: 125.178 ops/s
# Warmup Iteration  20: 124.190 ops/s
# Warmup Iteration  21: 125.571 ops/s
# Warmup Iteration  22: 126.596 ops/s
# Warmup Iteration  23: 123.058 ops/s
# Warmup Iteration  24: 122.641 ops/s
# Warmup Iteration  25: 123.217 ops/s
# Warmup Iteration  26: 120.829 ops/s
# Warmup Iteration  27: 117.831 ops/s
# Warmup Iteration  28: 115.410 ops/s
# Warmup Iteration  29: 118.513 ops/s
# Warmup Iteration  30: 119.464 ops/s
Iteration   1: 118.898 ops/s
Iteration   2: 121.873 ops/s
Iteration   3: 122.169 ops/s
Iteration   4: 121.551 ops/s
Iteration   5: 121.421 ops/s
Iteration   6: 121.330 ops/s
Iteration   7: 120.839 ops/s
Iteration   8: 121.809 ops/s
Iteration   9: 122.158 ops/s
Iteration  10: 120.923 ops/s
Iteration  11: 122.525 ops/s
Iteration  12: 122.103 ops/s
Iteration  13: 121.988 ops/s
Iteration  14: 120.176 ops/s
Iteration  15: 116.442 ops/s
Iteration  16: 121.857 ops/s
Iteration  17: 120.882 ops/s
Iteration  18: 122.873 ops/s
Iteration  19: 122.458 ops/s
Iteration  20: 123.667 ops/s
Iteration  21: 124.099 ops/s
Iteration  22: 124.443 ops/s
Iteration  23: 123.370 ops/s
Iteration  24: 121.876 ops/s
Iteration  25: 121.807 ops/s
Iteration  26: 122.672 ops/s
Iteration  27: 120.114 ops/s
Iteration  28: 115.150 ops/s
Iteration  29: 116.076 ops/s
Iteration  30: 114.765 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  121.077 ±(99.9%) 1.655 ops/s [Average]
  (min, avg, max) = (114.765, 121.077, 124.443), stdev = 2.477
  CI (99.9%): [119.422, 122.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt    Score   Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  121.077 ± 1.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1745898.997 ops/s
# Warmup Iteration   2: 4272233.414 ops/s
# Warmup Iteration   3: 4205134.130 ops/s
# Warmup Iteration   4: 3497249.758 ops/s
# Warmup Iteration   5: 4179723.348 ops/s
# Warmup Iteration   6: 4137932.942 ops/s
# Warmup Iteration   7: 4231695.015 ops/s
# Warmup Iteration   8: 4272139.560 ops/s
# Warmup Iteration   9: 4202198.157 ops/s
# Warmup Iteration  10: 4194713.036 ops/s
# Warmup Iteration  11: 4234180.265 ops/s
# Warmup Iteration  12: 4251524.684 ops/s
# Warmup Iteration  13: 4251415.140 ops/s
# Warmup Iteration  14: 4191044.111 ops/s
# Warmup Iteration  15: 4257624.354 ops/s
# Warmup Iteration  16: 4230546.756 ops/s
# Warmup Iteration  17: 4201146.178 ops/s
# Warmup Iteration  18: 4194615.139 ops/s
# Warmup Iteration  19: 4225146.893 ops/s
# Warmup Iteration  20: 4190118.739 ops/s
# Warmup Iteration  21: 4230949.846 ops/s
# Warmup Iteration  22: 4229326.754 ops/s
# Warmup Iteration  23: 4245180.750 ops/s
# Warmup Iteration  24: 4294617.752 ops/s
# Warmup Iteration  25: 4171939.680 ops/s
# Warmup Iteration  26: 4287176.722 ops/s
# Warmup Iteration  27: 4084665.100 ops/s
# Warmup Iteration  28: 4242070.872 ops/s
# Warmup Iteration  29: 4164804.130 ops/s
# Warmup Iteration  30: 4194085.305 ops/s
Iteration   1: 4190689.469 ops/s
Iteration   2: 4191770.818 ops/s
Iteration   3: 4232215.847 ops/s
Iteration   4: 4221637.706 ops/s
Iteration   5: 4198362.823 ops/s
Iteration   6: 4261406.158 ops/s
Iteration   7: 4183098.397 ops/s
Iteration   8: 4266627.317 ops/s
Iteration   9: 4223161.819 ops/s
Iteration  10: 4242862.866 ops/s
Iteration  11: 4083106.618 ops/s
Iteration  12: 4108909.715 ops/s
Iteration  13: 4236992.546 ops/s
Iteration  14: 4202638.598 ops/s
Iteration  15: 4285977.989 ops/s
Iteration  16: 4273880.854 ops/s
Iteration  17: 4262440.363 ops/s
Iteration  18: 4296046.107 ops/s
Iteration  19: 4329929.868 ops/s
Iteration  20: 4284449.042 ops/s
Iteration  21: 4289332.163 ops/s
Iteration  22: 4294560.943 ops/s
Iteration  23: 4234161.045 ops/s
Iteration  24: 4206115.184 ops/s
Iteration  25: 4271315.886 ops/s
Iteration  26: 4283748.426 ops/s
Iteration  27: 4251801.228 ops/s
Iteration  28: 4310146.022 ops/s
Iteration  29: 4287785.056 ops/s
Iteration  30: 4334380.473 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumInteger":
  4244651.712 ±(99.9%) 38610.017 ops/s [Average]
  (min, avg, max) = (4083106.618, 4244651.712, 4334380.473), stdev = 57789.660
  CI (99.9%): [4206041.694, 4283261.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumInteger  thrpt   30  4244651.712 ± 38610.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1677457.394 ops/s
# Warmup Iteration   2: 4115365.919 ops/s
# Warmup Iteration   3: 4332401.045 ops/s
# Warmup Iteration   4: 3561466.534 ops/s
# Warmup Iteration   5: 4302037.094 ops/s
# Warmup Iteration   6: 4381335.321 ops/s
# Warmup Iteration   7: 4319835.975 ops/s
# Warmup Iteration   8: 4370415.261 ops/s
# Warmup Iteration   9: 4317520.856 ops/s
# Warmup Iteration  10: 4267915.875 ops/s
# Warmup Iteration  11: 4423363.286 ops/s
# Warmup Iteration  12: 4214820.457 ops/s
# Warmup Iteration  13: 4307593.652 ops/s
# Warmup Iteration  14: 4224931.291 ops/s
# Warmup Iteration  15: 4348843.091 ops/s
# Warmup Iteration  16: 4317162.373 ops/s
# Warmup Iteration  17: 4192705.106 ops/s
# Warmup Iteration  18: 4357320.898 ops/s
# Warmup Iteration  19: 4352261.527 ops/s
# Warmup Iteration  20: 4359689.540 ops/s
# Warmup Iteration  21: 4307154.352 ops/s
# Warmup Iteration  22: 4262951.668 ops/s
# Warmup Iteration  23: 4367147.058 ops/s
# Warmup Iteration  24: 4314592.342 ops/s
# Warmup Iteration  25: 4380968.841 ops/s
# Warmup Iteration  26: 4403388.264 ops/s
# Warmup Iteration  27: 4322453.867 ops/s
# Warmup Iteration  28: 4286444.552 ops/s
# Warmup Iteration  29: 4221620.097 ops/s
# Warmup Iteration  30: 4211424.215 ops/s
Iteration   1: 4086794.388 ops/s
Iteration   2: 4353487.958 ops/s
Iteration   3: 4342093.791 ops/s
Iteration   4: 4287835.617 ops/s
Iteration   5: 4317263.177 ops/s
Iteration   6: 4342776.406 ops/s
Iteration   7: 4237167.822 ops/s
Iteration   8: 4257607.495 ops/s
Iteration   9: 4305299.714 ops/s
Iteration  10: 4230490.709 ops/s
Iteration  11: 4299661.909 ops/s
Iteration  12: 4335429.263 ops/s
Iteration  13: 4254301.343 ops/s
Iteration  14: 4271751.287 ops/s
Iteration  15: 4335432.454 ops/s
Iteration  16: 4118157.282 ops/s
Iteration  17: 4335852.032 ops/s
Iteration  18: 4338632.291 ops/s
Iteration  19: 4375565.466 ops/s
Iteration  20: 4334840.174 ops/s
Iteration  21: 4241131.376 ops/s
Iteration  22: 4149705.141 ops/s
Iteration  23: 4398237.430 ops/s
Iteration  24: 4428010.900 ops/s
Iteration  25: 4399390.365 ops/s
Iteration  26: 4176644.956 ops/s
Iteration  27: 4158894.124 ops/s
Iteration  28: 4249826.903 ops/s
Iteration  29: 4328415.520 ops/s
Iteration  30: 4336064.835 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumLong":
  4287558.738 ±(99.9%) 56611.758 ops/s [Average]
  (min, avg, max) = (4086794.388, 4287558.738, 4428010.900), stdev = 84733.821
  CI (99.9%): [4230946.980, 4344170.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_sumLong  thrpt   30  4287558.738 ± 56611.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1682401.413 ops/s
# Warmup Iteration   2: 4095339.539 ops/s
# Warmup Iteration   3: 4216320.307 ops/s
# Warmup Iteration   4: 3465675.150 ops/s
# Warmup Iteration   5: 4295401.707 ops/s
# Warmup Iteration   6: 4216571.138 ops/s
# Warmup Iteration   7: 4369124.272 ops/s
# Warmup Iteration   8: 4308949.517 ops/s
# Warmup Iteration   9: 4231633.649 ops/s
# Warmup Iteration  10: 4401438.516 ops/s
# Warmup Iteration  11: 4214703.870 ops/s
# Warmup Iteration  12: 4233114.995 ops/s
# Warmup Iteration  13: 4359437.813 ops/s
# Warmup Iteration  14: 4347448.344 ops/s
# Warmup Iteration  15: 4393024.423 ops/s
# Warmup Iteration  16: 4416779.202 ops/s
# Warmup Iteration  17: 4386570.114 ops/s
# Warmup Iteration  18: 4296209.572 ops/s
# Warmup Iteration  19: 4166937.280 ops/s
# Warmup Iteration  20: 4394807.705 ops/s
# Warmup Iteration  21: 4355064.164 ops/s
# Warmup Iteration  22: 4371904.656 ops/s
# Warmup Iteration  23: 4418409.748 ops/s
# Warmup Iteration  24: 4460537.789 ops/s
# Warmup Iteration  25: 4471591.877 ops/s
# Warmup Iteration  26: 4476102.105 ops/s
# Warmup Iteration  27: 4472308.113 ops/s
# Warmup Iteration  28: 4455815.535 ops/s
# Warmup Iteration  29: 4471032.113 ops/s
# Warmup Iteration  30: 4460376.596 ops/s
Iteration   1: 4459671.994 ops/s
Iteration   2: 4456387.955 ops/s
Iteration   3: 4457324.189 ops/s
Iteration   4: 4453020.757 ops/s
Iteration   5: 4475286.199 ops/s
Iteration   6: 4453401.082 ops/s
Iteration   7: 4364221.910 ops/s
Iteration   8: 4374953.643 ops/s
Iteration   9: 4356320.697 ops/s
Iteration  10: 4368048.504 ops/s
Iteration  11: 4418034.497 ops/s
Iteration  12: 4338926.715 ops/s
Iteration  13: 4407948.543 ops/s
Iteration  14: 4387720.644 ops/s
Iteration  15: 4173822.366 ops/s
Iteration  16: 4177682.931 ops/s
Iteration  17: 4366282.732 ops/s
Iteration  18: 4376524.203 ops/s
Iteration  19: 4254411.160 ops/s
Iteration  20: 4377030.383 ops/s
Iteration  21: 4422658.337 ops/s
Iteration  22: 4357212.956 ops/s
Iteration  23: 4352807.437 ops/s
Iteration  24: 4390648.306 ops/s
Iteration  25: 4444520.717 ops/s
Iteration  26: 4428616.786 ops/s
Iteration  27: 4453694.470 ops/s
Iteration  28: 4442667.457 ops/s
Iteration  29: 4363584.042 ops/s
Iteration  30: 4360378.018 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble":
  4383793.654 ±(99.9%) 49879.172 ops/s [Average]
  (min, avg, max) = (4173822.366, 4383793.654, 4475286.199), stdev = 74656.802
  CI (99.9%): [4333914.482, 4433672.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4383793.654 ± 49879.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1643148.454 ops/s
# Warmup Iteration   2: 3845551.210 ops/s
# Warmup Iteration   3: 4173168.736 ops/s
# Warmup Iteration   4: 3285609.019 ops/s
# Warmup Iteration   5: 4225584.462 ops/s
# Warmup Iteration   6: 4276600.819 ops/s
# Warmup Iteration   7: 4256439.187 ops/s
# Warmup Iteration   8: 4220868.440 ops/s
# Warmup Iteration   9: 4219692.784 ops/s
# Warmup Iteration  10: 4224743.978 ops/s
# Warmup Iteration  11: 4263269.214 ops/s
# Warmup Iteration  12: 4317191.816 ops/s
# Warmup Iteration  13: 4351909.724 ops/s
# Warmup Iteration  14: 4297179.454 ops/s
# Warmup Iteration  15: 4331641.721 ops/s
# Warmup Iteration  16: 4312843.575 ops/s
# Warmup Iteration  17: 4169810.292 ops/s
# Warmup Iteration  18: 4222589.703 ops/s
# Warmup Iteration  19: 4271987.509 ops/s
# Warmup Iteration  20: 4278299.173 ops/s
# Warmup Iteration  21: 4239788.492 ops/s
# Warmup Iteration  22: 4266209.848 ops/s
# Warmup Iteration  23: 4234821.601 ops/s
# Warmup Iteration  24: 4261316.939 ops/s
# Warmup Iteration  25: 4239773.497 ops/s
# Warmup Iteration  26: 4218346.430 ops/s
# Warmup Iteration  27: 4235902.360 ops/s
# Warmup Iteration  28: 4232557.405 ops/s
# Warmup Iteration  29: 4160953.247 ops/s
# Warmup Iteration  30: 4204605.401 ops/s
Iteration   1: 4248583.251 ops/s
Iteration   2: 4232267.438 ops/s
Iteration   3: 4240893.002 ops/s
Iteration   4: 4269832.304 ops/s
Iteration   5: 4233316.561 ops/s
Iteration   6: 4196507.742 ops/s
Iteration   7: 4266367.820 ops/s
Iteration   8: 4188732.391 ops/s
Iteration   9: 4249782.911 ops/s
Iteration  10: 4271632.507 ops/s
Iteration  11: 4287877.252 ops/s
Iteration  12: 4266036.334 ops/s
Iteration  13: 4284818.296 ops/s
Iteration  14: 4247203.174 ops/s
Iteration  15: 4217253.498 ops/s
Iteration  16: 4293008.454 ops/s
Iteration  17: 4300934.099 ops/s
Iteration  18: 4225468.230 ops/s
Iteration  19: 4339532.002 ops/s
Iteration  20: 4331818.239 ops/s
Iteration  21: 4330213.938 ops/s
Iteration  22: 4327853.275 ops/s
Iteration  23: 4301594.620 ops/s
Iteration  24: 4238190.135 ops/s
Iteration  25: 4270048.029 ops/s
Iteration  26: 4288576.185 ops/s
Iteration  27: 4337977.862 ops/s
Iteration  28: 4339010.057 ops/s
Iteration  29: 4327795.670 ops/s
Iteration  30: 4329597.144 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat":
  4276090.747 ±(99.9%) 29614.589 ops/s [Average]
  (min, avg, max) = (4188732.391, 4276090.747, 4339532.002), stdev = 44325.726
  CI (99.9%): [4246476.158, 4305705.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4276090.747 ± 29614.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1834856.618 ops/s
# Warmup Iteration   2: 4423944.789 ops/s
# Warmup Iteration   3: 4341889.736 ops/s
# Warmup Iteration   4: 3675281.186 ops/s
# Warmup Iteration   5: 4432626.169 ops/s
# Warmup Iteration   6: 4391520.849 ops/s
# Warmup Iteration   7: 4327652.459 ops/s
# Warmup Iteration   8: 4220407.390 ops/s
# Warmup Iteration   9: 4408536.623 ops/s
# Warmup Iteration  10: 4382592.902 ops/s
# Warmup Iteration  11: 4407165.053 ops/s
# Warmup Iteration  12: 4384306.884 ops/s
# Warmup Iteration  13: 4335376.790 ops/s
# Warmup Iteration  14: 4391440.241 ops/s
# Warmup Iteration  15: 4332383.645 ops/s
# Warmup Iteration  16: 4373133.947 ops/s
# Warmup Iteration  17: 4268191.570 ops/s
# Warmup Iteration  18: 4390262.140 ops/s
# Warmup Iteration  19: 4351763.179 ops/s
# Warmup Iteration  20: 4435869.824 ops/s
# Warmup Iteration  21: 4402687.895 ops/s
# Warmup Iteration  22: 4371953.847 ops/s
# Warmup Iteration  23: 4377932.598 ops/s
# Warmup Iteration  24: 4292605.356 ops/s
# Warmup Iteration  25: 4419833.352 ops/s
# Warmup Iteration  26: 4399359.036 ops/s
# Warmup Iteration  27: 4415021.168 ops/s
# Warmup Iteration  28: 4409985.429 ops/s
# Warmup Iteration  29: 4451637.442 ops/s
# Warmup Iteration  30: 4338536.796 ops/s
Iteration   1: 4404328.951 ops/s
Iteration   2: 4396740.717 ops/s
Iteration   3: 4361477.712 ops/s
Iteration   4: 4337088.306 ops/s
Iteration   5: 4372551.940 ops/s
Iteration   6: 4361305.095 ops/s
Iteration   7: 4392051.805 ops/s
Iteration   8: 4367283.883 ops/s
Iteration   9: 4424627.470 ops/s
Iteration  10: 4430851.782 ops/s
Iteration  11: 4421755.050 ops/s
Iteration  12: 4437789.679 ops/s
Iteration  13: 4240149.989 ops/s
Iteration  14: 4470244.748 ops/s
Iteration  15: 4487434.141 ops/s
Iteration  16: 4477945.707 ops/s
Iteration  17: 4477426.513 ops/s
Iteration  18: 4480286.515 ops/s
Iteration  19: 4472191.268 ops/s
Iteration  20: 4500708.895 ops/s
Iteration  21: 4479528.788 ops/s
Iteration  22: 4488945.575 ops/s
Iteration  23: 4477105.936 ops/s
Iteration  24: 4492242.743 ops/s
Iteration  25: 4474167.009 ops/s
Iteration  26: 4455010.081 ops/s
Iteration  27: 4343783.426 ops/s
Iteration  28: 4357102.906 ops/s
Iteration  29: 4330049.373 ops/s
Iteration  30: 4360322.713 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt":
  4419083.290 ±(99.9%) 43347.711 ops/s [Average]
  (min, avg, max) = (4240149.989, 4419083.290, 4500708.895), stdev = 64880.819
  CI (99.9%): [4375735.579, 4462431.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeInt  thrpt   30  4419083.290 ± 43347.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1775000.689 ops/s
# Warmup Iteration   2: 4201127.963 ops/s
# Warmup Iteration   3: 4356917.745 ops/s
# Warmup Iteration   4: 3690668.068 ops/s
# Warmup Iteration   5: 4378763.302 ops/s
# Warmup Iteration   6: 4339705.486 ops/s
# Warmup Iteration   7: 4440807.545 ops/s
# Warmup Iteration   8: 4423038.678 ops/s
# Warmup Iteration   9: 4331995.994 ops/s
# Warmup Iteration  10: 4369072.227 ops/s
# Warmup Iteration  11: 4338876.675 ops/s
# Warmup Iteration  12: 4271239.139 ops/s
# Warmup Iteration  13: 4397105.029 ops/s
# Warmup Iteration  14: 4496720.129 ops/s
# Warmup Iteration  15: 4498777.070 ops/s
# Warmup Iteration  16: 4409769.317 ops/s
# Warmup Iteration  17: 4449107.931 ops/s
# Warmup Iteration  18: 4438955.615 ops/s
# Warmup Iteration  19: 4387248.829 ops/s
# Warmup Iteration  20: 4336064.498 ops/s
# Warmup Iteration  21: 4322654.983 ops/s
# Warmup Iteration  22: 4433067.390 ops/s
# Warmup Iteration  23: 4287467.276 ops/s
# Warmup Iteration  24: 4294499.809 ops/s
# Warmup Iteration  25: 4381041.079 ops/s
# Warmup Iteration  26: 4331977.544 ops/s
# Warmup Iteration  27: 4230209.033 ops/s
# Warmup Iteration  28: 4203761.215 ops/s
# Warmup Iteration  29: 4333014.736 ops/s
# Warmup Iteration  30: 4459792.434 ops/s
Iteration   1: 4447891.104 ops/s
Iteration   2: 4365280.789 ops/s
Iteration   3: 4422528.267 ops/s
Iteration   4: 4488822.356 ops/s
Iteration   5: 4491208.725 ops/s
Iteration   6: 4448657.120 ops/s
Iteration   7: 4437246.049 ops/s
Iteration   8: 4467538.593 ops/s
Iteration   9: 4499812.542 ops/s
Iteration  10: 4473984.969 ops/s
Iteration  11: 4457097.979 ops/s
Iteration  12: 4398198.257 ops/s
Iteration  13: 4343074.694 ops/s
Iteration  14: 4446465.328 ops/s
Iteration  15: 4256620.675 ops/s
Iteration  16: 4303793.781 ops/s
Iteration  17: 4397336.424 ops/s
Iteration  18: 4459096.110 ops/s
Iteration  19: 4299720.919 ops/s
Iteration  20: 4443437.478 ops/s
Iteration  21: 4474384.378 ops/s
Iteration  22: 4315991.650 ops/s
Iteration  23: 4456190.856 ops/s
Iteration  24: 4437341.101 ops/s
Iteration  25: 4258532.295 ops/s
Iteration  26: 4303454.002 ops/s
Iteration  27: 4367712.803 ops/s
Iteration  28: 4349830.354 ops/s
Iteration  29: 4457298.446 ops/s
Iteration  30: 4419388.413 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong":
  4406264.549 ±(99.9%) 48114.921 ops/s [Average]
  (min, avg, max) = (4256620.675, 4406264.549, 4499812.542), stdev = 72016.154
  CI (99.9%): [4358149.628, 4454379.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_summarizeLong  thrpt   30  4406264.549 ± 48114.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1310863.165 ops/s
# Warmup Iteration   2: 3084254.081 ops/s
# Warmup Iteration   3: 3286087.008 ops/s
# Warmup Iteration   4: 2937187.390 ops/s
# Warmup Iteration   5: 3120944.254 ops/s
# Warmup Iteration   6: 3311702.300 ops/s
# Warmup Iteration   7: 3332265.074 ops/s
# Warmup Iteration   8: 3336203.136 ops/s
# Warmup Iteration   9: 3134578.428 ops/s
# Warmup Iteration  10: 3220804.448 ops/s
# Warmup Iteration  11: 3308716.379 ops/s
# Warmup Iteration  12: 3254582.286 ops/s
# Warmup Iteration  13: 3314565.462 ops/s
# Warmup Iteration  14: 3245700.907 ops/s
# Warmup Iteration  15: 3245357.159 ops/s
# Warmup Iteration  16: 3288344.929 ops/s
# Warmup Iteration  17: 3251457.122 ops/s
# Warmup Iteration  18: 3320442.912 ops/s
# Warmup Iteration  19: 3312024.144 ops/s
# Warmup Iteration  20: 3313333.992 ops/s
# Warmup Iteration  21: 3282676.152 ops/s
# Warmup Iteration  22: 3296057.159 ops/s
# Warmup Iteration  23: 3290376.884 ops/s
# Warmup Iteration  24: 3295383.885 ops/s
# Warmup Iteration  25: 3301694.504 ops/s
# Warmup Iteration  26: 3294835.426 ops/s
# Warmup Iteration  27: 3309479.111 ops/s
# Warmup Iteration  28: 3320646.494 ops/s
# Warmup Iteration  29: 3252732.784 ops/s
# Warmup Iteration  30: 3254409.062 ops/s
Iteration   1: 3349727.034 ops/s
Iteration   2: 3364887.940 ops/s
Iteration   3: 3328350.874 ops/s
Iteration   4: 3336353.296 ops/s
Iteration   5: 3256708.250 ops/s
Iteration   6: 3134290.439 ops/s
Iteration   7: 3208546.599 ops/s
Iteration   8: 3241975.343 ops/s
Iteration   9: 3200977.792 ops/s
Iteration  10: 3182825.851 ops/s
Iteration  11: 3206723.183 ops/s
Iteration  12: 3304958.253 ops/s
Iteration  13: 3281153.404 ops/s
Iteration  14: 3278549.677 ops/s
Iteration  15: 3338259.809 ops/s
Iteration  16: 3316086.551 ops/s
Iteration  17: 3262164.160 ops/s
Iteration  18: 3135986.326 ops/s
Iteration  19: 3316448.676 ops/s
Iteration  20: 3285307.097 ops/s
Iteration  21: 3344713.623 ops/s
Iteration  22: 3360895.759 ops/s
Iteration  23: 3361160.430 ops/s
Iteration  24: 3325648.673 ops/s
Iteration  25: 3284188.572 ops/s
Iteration  26: 3300227.032 ops/s
Iteration  27: 3324110.085 ops/s
Iteration  28: 3278657.482 ops/s
Iteration  29: 3267759.459 ops/s
Iteration  30: 3303630.625 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_tap":
  3282709.076 ±(99.9%) 42430.736 ops/s [Average]
  (min, avg, max) = (3134290.439, 3282709.076, 3364887.940), stdev = 63508.332
  CI (99.9%): [3240278.341, 3325139.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_tap  thrpt   30  3282709.076 ± 42430.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4954851.439 ops/s
# Warmup Iteration   2: 10314769.577 ops/s
# Warmup Iteration   3: 9121398.154 ops/s
# Warmup Iteration   4: 10178019.960 ops/s
# Warmup Iteration   5: 10219344.165 ops/s
# Warmup Iteration   6: 10221013.676 ops/s
# Warmup Iteration   7: 10339523.561 ops/s
# Warmup Iteration   8: 10504032.139 ops/s
# Warmup Iteration   9: 10569858.093 ops/s
# Warmup Iteration  10: 10693198.367 ops/s
# Warmup Iteration  11: 10587680.864 ops/s
# Warmup Iteration  12: 10610391.658 ops/s
# Warmup Iteration  13: 10513835.019 ops/s
# Warmup Iteration  14: 10434567.201 ops/s
# Warmup Iteration  15: 10519592.478 ops/s
# Warmup Iteration  16: 10658236.981 ops/s
# Warmup Iteration  17: 10535317.129 ops/s
# Warmup Iteration  18: 10242784.003 ops/s
# Warmup Iteration  19: 10116263.434 ops/s
# Warmup Iteration  20: 10394676.148 ops/s
# Warmup Iteration  21: 10160097.792 ops/s
# Warmup Iteration  22: 10501151.803 ops/s
# Warmup Iteration  23: 10381312.165 ops/s
# Warmup Iteration  24: 10359115.370 ops/s
# Warmup Iteration  25: 10203800.533 ops/s
# Warmup Iteration  26: 10356655.184 ops/s
# Warmup Iteration  27: 10600513.838 ops/s
# Warmup Iteration  28: 10187924.287 ops/s
# Warmup Iteration  29: 10227439.417 ops/s
# Warmup Iteration  30: 10370756.745 ops/s
Iteration   1: 10309271.023 ops/s
Iteration   2: 10393305.729 ops/s
Iteration   3: 10378898.621 ops/s
Iteration   4: 10496553.116 ops/s
Iteration   5: 10528079.700 ops/s
Iteration   6: 10417741.246 ops/s
Iteration   7: 10473223.464 ops/s
Iteration   8: 10393049.261 ops/s
Iteration   9: 10289807.522 ops/s
Iteration  10: 10284162.176 ops/s
Iteration  11: 9989146.202 ops/s
Iteration  12: 10528672.898 ops/s
Iteration  13: 10301859.749 ops/s
Iteration  14: 10576548.350 ops/s
Iteration  15: 10456995.441 ops/s
Iteration  16: 10357258.833 ops/s
Iteration  17: 10556976.490 ops/s
Iteration  18: 10766011.783 ops/s
Iteration  19: 10679345.707 ops/s
Iteration  20: 10676072.436 ops/s
Iteration  21: 10511253.002 ops/s
Iteration  22: 10541521.202 ops/s
Iteration  23: 10510166.728 ops/s
Iteration  24: 10416894.938 ops/s
Iteration  25: 10435702.166 ops/s
Iteration  26: 10320767.873 ops/s
Iteration  27: 10196653.143 ops/s
Iteration  28: 10347699.331 ops/s
Iteration  29: 10461199.997 ops/s
Iteration  30: 10443154.438 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection":
  10434599.752 ±(99.9%) 102004.359 ops/s [Average]
  (min, avg, max) = (9989146.202, 10434599.752, 10766011.783), stdev = 152675.333
  CI (99.9%): [10332595.394, 10536604.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score        Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewCollection  thrpt   30  10434599.752 ± 102004.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1941309.317 ops/s
# Warmup Iteration   2: 5177190.037 ops/s
# Warmup Iteration   3: 4177850.868 ops/s
# Warmup Iteration   4: 5048409.029 ops/s
# Warmup Iteration   5: 4986947.851 ops/s
# Warmup Iteration   6: 4990156.659 ops/s
# Warmup Iteration   7: 5075172.836 ops/s
# Warmup Iteration   8: 5028664.283 ops/s
# Warmup Iteration   9: 4991235.352 ops/s
# Warmup Iteration  10: 5015099.526 ops/s
# Warmup Iteration  11: 5015676.225 ops/s
# Warmup Iteration  12: 5054764.746 ops/s
# Warmup Iteration  13: 5035128.274 ops/s
# Warmup Iteration  14: 4868044.478 ops/s
# Warmup Iteration  15: 5000291.761 ops/s
# Warmup Iteration  16: 4968219.181 ops/s
# Warmup Iteration  17: 5112158.218 ops/s
# Warmup Iteration  18: 5129850.961 ops/s
# Warmup Iteration  19: 5117290.769 ops/s
# Warmup Iteration  20: 5126122.299 ops/s
# Warmup Iteration  21: 5098556.130 ops/s
# Warmup Iteration  22: 5055980.511 ops/s
# Warmup Iteration  23: 5097387.564 ops/s
# Warmup Iteration  24: 5051089.732 ops/s
# Warmup Iteration  25: 4956955.620 ops/s
# Warmup Iteration  26: 5061211.019 ops/s
# Warmup Iteration  27: 4976076.212 ops/s
# Warmup Iteration  28: 5009548.315 ops/s
# Warmup Iteration  29: 4978008.489 ops/s
# Warmup Iteration  30: 4949264.506 ops/s
Iteration   1: 5097312.446 ops/s
Iteration   2: 5118355.267 ops/s
Iteration   3: 5088331.262 ops/s
Iteration   4: 5083773.833 ops/s
Iteration   5: 5169753.723 ops/s
Iteration   6: 5158191.021 ops/s
Iteration   7: 5158594.908 ops/s
Iteration   8: 5124214.269 ops/s
Iteration   9: 5074827.666 ops/s
Iteration  10: 5176437.290 ops/s
Iteration  11: 5061222.801 ops/s
Iteration  12: 5121369.938 ops/s
Iteration  13: 5167296.798 ops/s
Iteration  14: 5133302.562 ops/s
Iteration  15: 5049672.225 ops/s
Iteration  16: 5128033.212 ops/s
Iteration  17: 5119471.649 ops/s
Iteration  18: 5154552.179 ops/s
Iteration  19: 5177453.473 ops/s
Iteration  20: 5187247.952 ops/s
Iteration  21: 5160327.910 ops/s
Iteration  22: 5157242.944 ops/s
Iteration  23: 5092298.717 ops/s
Iteration  24: 5087822.494 ops/s
Iteration  25: 5141527.772 ops/s
Iteration  26: 5116824.034 ops/s
Iteration  27: 5183739.818 ops/s
Iteration  28: 5115964.564 ops/s
Iteration  29: 5069431.154 ops/s
Iteration  30: 5078379.461 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWith":
  5125099.111 ±(99.9%) 26688.865 ops/s [Average]
  (min, avg, max) = (5049672.225, 5125099.111, 5187247.952), stdev = 39946.640
  CI (99.9%): [5098410.246, 5151787.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWith  thrpt   30  5125099.111 ± 26688.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1086763.843 ops/s
# Warmup Iteration   2: 2873826.535 ops/s
# Warmup Iteration   3: 2440965.680 ops/s
# Warmup Iteration   4: 2864092.816 ops/s
# Warmup Iteration   5: 2824044.797 ops/s
# Warmup Iteration   6: 2822133.979 ops/s
# Warmup Iteration   7: 2899077.339 ops/s
# Warmup Iteration   8: 2888523.826 ops/s
# Warmup Iteration   9: 2898162.875 ops/s
# Warmup Iteration  10: 2879216.118 ops/s
# Warmup Iteration  11: 2915784.546 ops/s
# Warmup Iteration  12: 2848368.231 ops/s
# Warmup Iteration  13: 2892461.818 ops/s
# Warmup Iteration  14: 2906876.840 ops/s
# Warmup Iteration  15: 2891586.059 ops/s
# Warmup Iteration  16: 2898875.512 ops/s
# Warmup Iteration  17: 2873988.554 ops/s
# Warmup Iteration  18: 2915034.871 ops/s
# Warmup Iteration  19: 2901975.707 ops/s
# Warmup Iteration  20: 2884885.843 ops/s
# Warmup Iteration  21: 2906735.555 ops/s
# Warmup Iteration  22: 2890547.336 ops/s
# Warmup Iteration  23: 2890476.867 ops/s
# Warmup Iteration  24: 2883786.860 ops/s
# Warmup Iteration  25: 2891686.597 ops/s
# Warmup Iteration  26: 2907794.527 ops/s
# Warmup Iteration  27: 2898851.999 ops/s
# Warmup Iteration  28: 2890383.855 ops/s
# Warmup Iteration  29: 2888675.357 ops/s
# Warmup Iteration  30: 2862508.424 ops/s
Iteration   1: 2734427.781 ops/s
Iteration   2: 2907623.802 ops/s
Iteration   3: 2836122.781 ops/s
Iteration   4: 2919102.489 ops/s
Iteration   5: 2744534.963 ops/s
Iteration   6: 2909811.462 ops/s
Iteration   7: 2897910.306 ops/s
Iteration   8: 2858733.512 ops/s
Iteration   9: 2766951.871 ops/s
Iteration  10: 2755908.757 ops/s
Iteration  11: 2808095.144 ops/s
Iteration  12: 2880131.308 ops/s
Iteration  13: 2757816.910 ops/s
Iteration  14: 2884587.254 ops/s
Iteration  15: 2816266.986 ops/s
Iteration  16: 2878822.212 ops/s
Iteration  17: 2808343.597 ops/s
Iteration  18: 2865697.946 ops/s
Iteration  19: 2821474.376 ops/s
Iteration  20: 2800578.880 ops/s
Iteration  21: 2847732.249 ops/s
Iteration  22: 2809440.777 ops/s
Iteration  23: 2842329.693 ops/s
Iteration  24: 2907412.127 ops/s
Iteration  25: 2801045.589 ops/s
Iteration  26: 2797437.215 ops/s
Iteration  27: 2762463.737 ops/s
Iteration  28: 2821478.389 ops/s
Iteration  29: 2892420.871 ops/s
Iteration  30: 2865031.463 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs":
  2833324.482 ±(99.9%) 36458.274 ops/s [Average]
  (min, avg, max) = (2734427.781, 2833324.482, 2919102.489), stdev = 54569.032
  CI (99.9%): [2796866.208, 2869782.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  2833324.482 ± 36458.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1593958.113 ops/s
# Warmup Iteration   2: 3902385.440 ops/s
# Warmup Iteration   3: 3311991.940 ops/s
# Warmup Iteration   4: 3949558.037 ops/s
# Warmup Iteration   5: 3954582.754 ops/s
# Warmup Iteration   6: 3914879.256 ops/s
# Warmup Iteration   7: 3896573.147 ops/s
# Warmup Iteration   8: 3869747.211 ops/s
# Warmup Iteration   9: 3780902.312 ops/s
# Warmup Iteration  10: 3682238.391 ops/s
# Warmup Iteration  11: 3792485.614 ops/s
# Warmup Iteration  12: 3698645.683 ops/s
# Warmup Iteration  13: 3864532.708 ops/s
# Warmup Iteration  14: 3857473.727 ops/s
# Warmup Iteration  15: 3829225.736 ops/s
# Warmup Iteration  16: 3903214.998 ops/s
# Warmup Iteration  17: 3875110.091 ops/s
# Warmup Iteration  18: 3841084.528 ops/s
# Warmup Iteration  19: 3866386.287 ops/s
# Warmup Iteration  20: 3884899.975 ops/s
# Warmup Iteration  21: 3907999.629 ops/s
# Warmup Iteration  22: 3912257.893 ops/s
# Warmup Iteration  23: 3896552.445 ops/s
# Warmup Iteration  24: 3897887.241 ops/s
# Warmup Iteration  25: 3866925.371 ops/s
# Warmup Iteration  26: 3920329.706 ops/s
# Warmup Iteration  27: 3925581.625 ops/s
# Warmup Iteration  28: 3862219.480 ops/s
# Warmup Iteration  29: 3785732.918 ops/s
# Warmup Iteration  30: 3896261.555 ops/s
Iteration   1: 3888984.247 ops/s
Iteration   2: 3911490.548 ops/s
Iteration   3: 3911782.541 ops/s
Iteration   4: 3884513.504 ops/s
Iteration   5: 3879753.639 ops/s
Iteration   6: 3766671.067 ops/s
Iteration   7: 3866928.283 ops/s
Iteration   8: 3884638.812 ops/s
Iteration   9: 3950530.744 ops/s
Iteration  10: 3913111.338 ops/s
Iteration  11: 3918408.521 ops/s
Iteration  12: 3892428.369 ops/s
Iteration  13: 3778704.708 ops/s
Iteration  14: 3852086.378 ops/s
Iteration  15: 3903739.266 ops/s
Iteration  16: 3877713.163 ops/s
Iteration  17: 3946217.152 ops/s
Iteration  18: 3953388.764 ops/s
Iteration  19: 3959564.794 ops/s
Iteration  20: 3913761.052 ops/s
Iteration  21: 3883507.684 ops/s
Iteration  22: 3829151.585 ops/s
Iteration  23: 3878025.315 ops/s
Iteration  24: 3874558.314 ops/s
Iteration  25: 3813421.443 ops/s
Iteration  26: 3755831.349 ops/s
Iteration  27: 3880013.341 ops/s
Iteration  28: 3820861.679 ops/s
Iteration  29: 3891255.015 ops/s
Iteration  30: 3888440.544 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith":
  3878982.772 ±(99.9%) 34612.976 ops/s [Average]
  (min, avg, max) = (3755831.349, 3878982.772, 3959564.794), stdev = 51807.076
  CI (99.9%): [3844369.796, 3913595.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWith  thrpt   30  3878982.772 ± 34612.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1258526.165 ops/s
# Warmup Iteration   2: 2948403.853 ops/s
# Warmup Iteration   3: 2468875.815 ops/s
# Warmup Iteration   4: 2972477.204 ops/s
# Warmup Iteration   5: 2976024.877 ops/s
# Warmup Iteration   6: 2920060.830 ops/s
# Warmup Iteration   7: 2981836.987 ops/s
# Warmup Iteration   8: 2939422.169 ops/s
# Warmup Iteration   9: 2981394.559 ops/s
# Warmup Iteration  10: 2999306.038 ops/s
# Warmup Iteration  11: 2982434.012 ops/s
# Warmup Iteration  12: 2988974.861 ops/s
# Warmup Iteration  13: 2967568.539 ops/s
# Warmup Iteration  14: 2969477.307 ops/s
# Warmup Iteration  15: 2975859.193 ops/s
# Warmup Iteration  16: 2969169.055 ops/s
# Warmup Iteration  17: 2915089.748 ops/s
# Warmup Iteration  18: 2856637.907 ops/s
# Warmup Iteration  19: 2967122.183 ops/s
# Warmup Iteration  20: 3036409.029 ops/s
# Warmup Iteration  21: 3007490.645 ops/s
# Warmup Iteration  22: 2988351.782 ops/s
# Warmup Iteration  23: 2971507.343 ops/s
# Warmup Iteration  24: 2941774.650 ops/s
# Warmup Iteration  25: 2968993.653 ops/s
# Warmup Iteration  26: 2975086.094 ops/s
# Warmup Iteration  27: 2983488.823 ops/s
# Warmup Iteration  28: 2989434.505 ops/s
# Warmup Iteration  29: 2991541.082 ops/s
# Warmup Iteration  30: 3004994.538 ops/s
Iteration   1: 2973616.617 ops/s
Iteration   2: 3028865.559 ops/s
Iteration   3: 3006505.111 ops/s
Iteration   4: 2961637.497 ops/s
Iteration   5: 2958634.370 ops/s
Iteration   6: 2968326.015 ops/s
Iteration   7: 2875182.274 ops/s
Iteration   8: 2896752.097 ops/s
Iteration   9: 2849226.266 ops/s
Iteration  10: 2967959.319 ops/s
Iteration  11: 2901743.013 ops/s
Iteration  12: 2933987.487 ops/s
Iteration  13: 2965064.051 ops/s
Iteration  14: 2954817.308 ops/s
Iteration  15: 2888367.747 ops/s
Iteration  16: 2954527.287 ops/s
Iteration  17: 3033014.412 ops/s
Iteration  18: 3041133.352 ops/s
Iteration  19: 3021146.381 ops/s
Iteration  20: 3003757.843 ops/s
Iteration  21: 2988785.884 ops/s
Iteration  22: 2971473.863 ops/s
Iteration  23: 2988206.221 ops/s
Iteration  24: 2968008.215 ops/s
Iteration  25: 2931138.284 ops/s
Iteration  26: 2943511.747 ops/s
Iteration  27: 2948065.587 ops/s
Iteration  28: 2967954.482 ops/s
Iteration  29: 2993993.290 ops/s
Iteration  30: 2947799.079 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith":
  2961106.689 ±(99.9%) 30877.777 ops/s [Average]
  (min, avg, max) = (2849226.266, 2961106.689, 3041133.352), stdev = 46216.406
  CI (99.9%): [2930228.912, 2991984.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  2961106.689 ± 30877.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1234049.199 ops/s
# Warmup Iteration   2: 2762983.934 ops/s
# Warmup Iteration   3: 2680856.032 ops/s
# Warmup Iteration   4: 2499744.494 ops/s
# Warmup Iteration   5: 2740004.318 ops/s
# Warmup Iteration   6: 2868653.275 ops/s
# Warmup Iteration   7: 2837508.613 ops/s
# Warmup Iteration   8: 2862289.110 ops/s
# Warmup Iteration   9: 2832971.730 ops/s
# Warmup Iteration  10: 2878448.079 ops/s
# Warmup Iteration  11: 2785551.690 ops/s
# Warmup Iteration  12: 2764520.358 ops/s
# Warmup Iteration  13: 2713695.257 ops/s
# Warmup Iteration  14: 2705355.429 ops/s
# Warmup Iteration  15: 2756443.071 ops/s
# Warmup Iteration  16: 2794049.157 ops/s
# Warmup Iteration  17: 2837081.698 ops/s
# Warmup Iteration  18: 2844732.293 ops/s
# Warmup Iteration  19: 2833267.869 ops/s
# Warmup Iteration  20: 2849193.204 ops/s
# Warmup Iteration  21: 2868263.617 ops/s
# Warmup Iteration  22: 2856409.844 ops/s
# Warmup Iteration  23: 2826659.641 ops/s
# Warmup Iteration  24: 2840157.628 ops/s
# Warmup Iteration  25: 2808143.136 ops/s
# Warmup Iteration  26: 2798234.645 ops/s
# Warmup Iteration  27: 2716560.912 ops/s
# Warmup Iteration  28: 2800431.719 ops/s
# Warmup Iteration  29: 2817893.022 ops/s
# Warmup Iteration  30: 2837303.876 ops/s
Iteration   1: 2872770.215 ops/s
Iteration   2: 2770464.048 ops/s
Iteration   3: 2760656.489 ops/s
Iteration   4: 2862144.548 ops/s
Iteration   5: 2764739.189 ops/s
Iteration   6: 2735364.366 ops/s
Iteration   7: 2693106.783 ops/s
Iteration   8: 2741502.009 ops/s
Iteration   9: 2878203.093 ops/s
Iteration  10: 2808427.177 ops/s
Iteration  11: 2779623.596 ops/s
Iteration  12: 2885220.806 ops/s
Iteration  13: 2897050.551 ops/s
Iteration  14: 2882935.721 ops/s
Iteration  15: 2914782.943 ops/s
Iteration  16: 2874204.332 ops/s
Iteration  17: 2907871.751 ops/s
Iteration  18: 2856752.059 ops/s
Iteration  19: 2835844.688 ops/s
Iteration  20: 2822227.928 ops/s
Iteration  21: 2870087.954 ops/s
Iteration  22: 2847889.012 ops/s
Iteration  23: 2854152.832 ops/s
Iteration  24: 2881213.879 ops/s
Iteration  25: 2812317.637 ops/s
Iteration  26: 2752446.405 ops/s
Iteration  27: 2828507.463 ops/s
Iteration  28: 2768288.191 ops/s
Iteration  29: 2762629.176 ops/s
Iteration  30: 2767060.160 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testToString":
  2822949.500 ±(99.9%) 40196.558 ops/s [Average]
  (min, avg, max) = (2693106.783, 2822949.500, 2914782.943), stdev = 60164.320
  CI (99.9%): [2782752.942, 2863146.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_testToString  thrpt   30  2822949.500 ± 40196.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1286864.946 ops/s
# Warmup Iteration   2: 3115794.057 ops/s
# Warmup Iteration   3: 3163785.715 ops/s
# Warmup Iteration   4: 2692733.881 ops/s
# Warmup Iteration   5: 3156606.943 ops/s
# Warmup Iteration   6: 3193493.812 ops/s
# Warmup Iteration   7: 3163861.914 ops/s
# Warmup Iteration   8: 3136477.362 ops/s
# Warmup Iteration   9: 3277811.274 ops/s
# Warmup Iteration  10: 3251597.502 ops/s
# Warmup Iteration  11: 3200633.133 ops/s
# Warmup Iteration  12: 3160843.736 ops/s
# Warmup Iteration  13: 3216693.375 ops/s
# Warmup Iteration  14: 3225067.015 ops/s
# Warmup Iteration  15: 3192597.893 ops/s
# Warmup Iteration  16: 3264051.100 ops/s
# Warmup Iteration  17: 3287740.588 ops/s
# Warmup Iteration  18: 3261894.462 ops/s
# Warmup Iteration  19: 3237949.572 ops/s
# Warmup Iteration  20: 3274506.825 ops/s
# Warmup Iteration  21: 3323099.811 ops/s
# Warmup Iteration  22: 3358436.292 ops/s
# Warmup Iteration  23: 3334642.253 ops/s
# Warmup Iteration  24: 3216204.275 ops/s
# Warmup Iteration  25: 3269210.148 ops/s
# Warmup Iteration  26: 3312078.884 ops/s
# Warmup Iteration  27: 3301518.797 ops/s
# Warmup Iteration  28: 3298043.446 ops/s
# Warmup Iteration  29: 3274860.378 ops/s
# Warmup Iteration  30: 3256394.969 ops/s
Iteration   1: 3236658.351 ops/s
Iteration   2: 3307971.396 ops/s
Iteration   3: 3237225.102 ops/s
Iteration   4: 3326374.279 ops/s
Iteration   5: 3141130.439 ops/s
Iteration   6: 3319694.524 ops/s
Iteration   7: 3348537.264 ops/s
Iteration   8: 3328915.024 ops/s
Iteration   9: 3332150.072 ops/s
Iteration  10: 3345607.295 ops/s
Iteration  11: 3315212.563 ops/s
Iteration  12: 3201915.781 ops/s
Iteration  13: 3204934.090 ops/s
Iteration  14: 3227094.205 ops/s
Iteration  15: 3309824.848 ops/s
Iteration  16: 3302978.467 ops/s
Iteration  17: 3340315.753 ops/s
Iteration  18: 3326992.815 ops/s
Iteration  19: 3331764.252 ops/s
Iteration  20: 3223438.746 ops/s
Iteration  21: 3274236.991 ops/s
Iteration  22: 3381178.230 ops/s
Iteration  23: 3364250.809 ops/s
Iteration  24: 3276300.692 ops/s
Iteration  25: 3368199.325 ops/s
Iteration  26: 3311476.580 ops/s
Iteration  27: 3314375.991 ops/s
Iteration  28: 3332523.275 ops/s
Iteration  29: 3299078.057 ops/s
Iteration  30: 3342819.740 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toArray":
  3299105.832 ±(99.9%) 38033.869 ops/s [Average]
  (min, avg, max) = (3141130.439, 3299105.832, 3381178.230), stdev = 56927.309
  CI (99.9%): [3261071.963, 3337139.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toArray  thrpt   30  3299105.832 ± 38033.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747111.308 ops/s
# Warmup Iteration   2: 1367987.852 ops/s
# Warmup Iteration   3: 1575367.680 ops/s
# Warmup Iteration   4: 1549792.760 ops/s
# Warmup Iteration   5: 1482838.642 ops/s
# Warmup Iteration   6: 1313356.649 ops/s
# Warmup Iteration   7: 1556107.546 ops/s
# Warmup Iteration   8: 1536708.457 ops/s
# Warmup Iteration   9: 1525046.986 ops/s
# Warmup Iteration  10: 1575955.875 ops/s
# Warmup Iteration  11: 1546364.504 ops/s
# Warmup Iteration  12: 1558920.867 ops/s
# Warmup Iteration  13: 1579921.776 ops/s
# Warmup Iteration  14: 1580450.553 ops/s
# Warmup Iteration  15: 1566373.894 ops/s
# Warmup Iteration  16: 1584213.422 ops/s
# Warmup Iteration  17: 1584683.749 ops/s
# Warmup Iteration  18: 1597121.238 ops/s
# Warmup Iteration  19: 1587050.601 ops/s
# Warmup Iteration  20: 1569613.038 ops/s
# Warmup Iteration  21: 1585585.998 ops/s
# Warmup Iteration  22: 1589840.703 ops/s
# Warmup Iteration  23: 1596895.866 ops/s
# Warmup Iteration  24: 1600257.053 ops/s
# Warmup Iteration  25: 1588805.936 ops/s
# Warmup Iteration  26: 1557148.130 ops/s
# Warmup Iteration  27: 1528008.950 ops/s
# Warmup Iteration  28: 1526989.642 ops/s
# Warmup Iteration  29: 1571024.312 ops/s
# Warmup Iteration  30: 1559621.234 ops/s
Iteration   1: 1590325.279 ops/s
Iteration   2: 1543615.579 ops/s
Iteration   3: 1581686.672 ops/s
Iteration   4: 1579258.997 ops/s
Iteration   5: 1556868.824 ops/s
Iteration   6: 1559777.211 ops/s
Iteration   7: 1577479.137 ops/s
Iteration   8: 1517710.787 ops/s
Iteration   9: 1572399.742 ops/s
Iteration  10: 1578283.814 ops/s
Iteration  11: 1587180.698 ops/s
Iteration  12: 1611269.763 ops/s
Iteration  13: 1612255.902 ops/s
Iteration  14: 1614599.508 ops/s
Iteration  15: 1615695.516 ops/s
Iteration  16: 1619373.078 ops/s
Iteration  17: 1613558.274 ops/s
Iteration  18: 1575740.977 ops/s
Iteration  19: 1582430.576 ops/s
Iteration  20: 1571232.012 ops/s
Iteration  21: 1590042.141 ops/s
Iteration  22: 1592158.859 ops/s
Iteration  23: 1592854.648 ops/s
Iteration  24: 1582107.874 ops/s
Iteration  25: 1581442.123 ops/s
Iteration  26: 1560534.668 ops/s
Iteration  27: 1595365.918 ops/s
Iteration  28: 1589540.683 ops/s
Iteration  29: 1590227.575 ops/s
Iteration  30: 1586523.785 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBag":
  1584051.354 ±(99.9%) 14900.522 ops/s [Average]
  (min, avg, max) = (1517710.787, 1584051.354, 1619373.078), stdev = 22302.402
  CI (99.9%): [1569150.832, 1598951.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBag  thrpt   30  1584051.354 ± 14900.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91078.757 ops/s
# Warmup Iteration   2: 117362.273 ops/s
# Warmup Iteration   3: 154949.043 ops/s
# Warmup Iteration   4: 154795.281 ops/s
# Warmup Iteration   5: 154167.729 ops/s
# Warmup Iteration   6: 155064.601 ops/s
# Warmup Iteration   7: 154487.858 ops/s
# Warmup Iteration   8: 137709.762 ops/s
# Warmup Iteration   9: 143829.582 ops/s
# Warmup Iteration  10: 153706.569 ops/s
# Warmup Iteration  11: 156997.084 ops/s
# Warmup Iteration  12: 154875.947 ops/s
# Warmup Iteration  13: 155786.115 ops/s
# Warmup Iteration  14: 156140.756 ops/s
# Warmup Iteration  15: 155742.655 ops/s
# Warmup Iteration  16: 150426.510 ops/s
# Warmup Iteration  17: 157699.620 ops/s
# Warmup Iteration  18: 160453.245 ops/s
# Warmup Iteration  19: 161395.508 ops/s
# Warmup Iteration  20: 160649.418 ops/s
# Warmup Iteration  21: 160370.330 ops/s
# Warmup Iteration  22: 161995.474 ops/s
# Warmup Iteration  23: 160575.125 ops/s
# Warmup Iteration  24: 163567.733 ops/s
# Warmup Iteration  25: 158810.853 ops/s
# Warmup Iteration  26: 160519.838 ops/s
# Warmup Iteration  27: 162413.800 ops/s
# Warmup Iteration  28: 160755.097 ops/s
# Warmup Iteration  29: 160023.145 ops/s
# Warmup Iteration  30: 161373.262 ops/s
Iteration   1: 160879.200 ops/s
Iteration   2: 157850.403 ops/s
Iteration   3: 162322.107 ops/s
Iteration   4: 160633.756 ops/s
Iteration   5: 155846.989 ops/s
Iteration   6: 163142.582 ops/s
Iteration   7: 160574.399 ops/s
Iteration   8: 160109.716 ops/s
Iteration   9: 161246.530 ops/s
Iteration  10: 161294.435 ops/s
Iteration  11: 159410.976 ops/s
Iteration  12: 159663.841 ops/s
Iteration  13: 160998.390 ops/s
Iteration  14: 160484.006 ops/s
Iteration  15: 161293.395 ops/s
Iteration  16: 163805.487 ops/s
Iteration  17: 164130.568 ops/s
Iteration  18: 159362.114 ops/s
Iteration  19: 160532.133 ops/s
Iteration  20: 160746.148 ops/s
Iteration  21: 161451.626 ops/s
Iteration  22: 159559.829 ops/s
Iteration  23: 160534.654 ops/s
Iteration  24: 161642.074 ops/s
Iteration  25: 159280.613 ops/s
Iteration  26: 154603.837 ops/s
Iteration  27: 151821.668 ops/s
Iteration  28: 154040.991 ops/s
Iteration  29: 153881.965 ops/s
Iteration  30: 161341.886 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBiMap":
  159749.544 ±(99.9%) 1972.210 ops/s [Average]
  (min, avg, max) = (151821.668, 159749.544, 164130.568), stdev = 2951.912
  CI (99.9%): [157777.334, 161721.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toBiMap  thrpt   30  159749.544 ± 1972.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1064709.442 ops/s
# Warmup Iteration   2: 2331413.544 ops/s
# Warmup Iteration   3: 2479948.764 ops/s
# Warmup Iteration   4: 2358539.644 ops/s
# Warmup Iteration   5: 1951246.015 ops/s
# Warmup Iteration   6: 2385233.236 ops/s
# Warmup Iteration   7: 2487401.605 ops/s
# Warmup Iteration   8: 2473465.963 ops/s
# Warmup Iteration   9: 2494046.118 ops/s
# Warmup Iteration  10: 2479783.308 ops/s
# Warmup Iteration  11: 2429434.584 ops/s
# Warmup Iteration  12: 2477296.043 ops/s
# Warmup Iteration  13: 2492800.819 ops/s
# Warmup Iteration  14: 2488510.889 ops/s
# Warmup Iteration  15: 2472621.002 ops/s
# Warmup Iteration  16: 2459946.337 ops/s
# Warmup Iteration  17: 2506876.484 ops/s
# Warmup Iteration  18: 2475450.327 ops/s
# Warmup Iteration  19: 2498494.219 ops/s
# Warmup Iteration  20: 2487678.655 ops/s
# Warmup Iteration  21: 2480228.772 ops/s
# Warmup Iteration  22: 2468288.235 ops/s
# Warmup Iteration  23: 2476255.131 ops/s
# Warmup Iteration  24: 2458335.916 ops/s
# Warmup Iteration  25: 2470084.378 ops/s
# Warmup Iteration  26: 2491509.025 ops/s
# Warmup Iteration  27: 2468973.161 ops/s
# Warmup Iteration  28: 2481447.469 ops/s
# Warmup Iteration  29: 2494736.977 ops/s
# Warmup Iteration  30: 2487789.915 ops/s
Iteration   1: 2436598.777 ops/s
Iteration   2: 2320759.781 ops/s
Iteration   3: 2494576.681 ops/s
Iteration   4: 2429636.404 ops/s
Iteration   5: 2500076.250 ops/s
Iteration   6: 2474047.495 ops/s
Iteration   7: 2503066.862 ops/s
Iteration   8: 2417223.978 ops/s
Iteration   9: 2412162.809 ops/s
Iteration  10: 2498352.482 ops/s
Iteration  11: 2526172.351 ops/s
Iteration  12: 2524083.912 ops/s
Iteration  13: 2512769.019 ops/s
Iteration  14: 2513333.530 ops/s
Iteration  15: 2501479.039 ops/s
Iteration  16: 2444193.138 ops/s
Iteration  17: 2430335.238 ops/s
Iteration  18: 2347491.413 ops/s
Iteration  19: 2504699.005 ops/s
Iteration  20: 2531153.810 ops/s
Iteration  21: 2432366.459 ops/s
Iteration  22: 2396575.811 ops/s
Iteration  23: 2469157.771 ops/s
Iteration  24: 2379154.910 ops/s
Iteration  25: 2508417.598 ops/s
Iteration  26: 2483382.102 ops/s
Iteration  27: 2488888.882 ops/s
Iteration  28: 2466889.707 ops/s
Iteration  29: 2487653.700 ops/s
Iteration  30: 2465640.337 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toCollection":
  2463344.642 ±(99.9%) 35877.063 ops/s [Average]
  (min, avg, max) = (2320759.781, 2463344.642, 2531153.810), stdev = 53699.102
  CI (99.9%): [2427467.579, 2499221.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toCollection  thrpt   30  2463344.642 ± 35877.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2789441.711 ops/s
# Warmup Iteration   2: 6442226.508 ops/s
# Warmup Iteration   3: 5347550.855 ops/s
# Warmup Iteration   4: 6568245.464 ops/s
# Warmup Iteration   5: 6314691.697 ops/s
# Warmup Iteration   6: 6483144.072 ops/s
# Warmup Iteration   7: 6554077.256 ops/s
# Warmup Iteration   8: 6605357.442 ops/s
# Warmup Iteration   9: 6508158.721 ops/s
# Warmup Iteration  10: 6520679.152 ops/s
# Warmup Iteration  11: 6462825.372 ops/s
# Warmup Iteration  12: 6606598.736 ops/s
# Warmup Iteration  13: 6652499.927 ops/s
# Warmup Iteration  14: 6499143.163 ops/s
# Warmup Iteration  15: 6430254.610 ops/s
# Warmup Iteration  16: 6537587.369 ops/s
# Warmup Iteration  17: 6619343.486 ops/s
# Warmup Iteration  18: 6507268.239 ops/s
# Warmup Iteration  19: 6600901.134 ops/s
# Warmup Iteration  20: 6370876.662 ops/s
# Warmup Iteration  21: 6468107.153 ops/s
# Warmup Iteration  22: 6261152.311 ops/s
# Warmup Iteration  23: 6299557.185 ops/s
# Warmup Iteration  24: 6605653.698 ops/s
# Warmup Iteration  25: 6589013.317 ops/s
# Warmup Iteration  26: 6582005.372 ops/s
# Warmup Iteration  27: 6531559.229 ops/s
# Warmup Iteration  28: 6535722.800 ops/s
# Warmup Iteration  29: 6490791.913 ops/s
# Warmup Iteration  30: 6444124.552 ops/s
Iteration   1: 6503722.143 ops/s
Iteration   2: 6510661.633 ops/s
Iteration   3: 6257972.838 ops/s
Iteration   4: 6399204.286 ops/s
Iteration   5: 6457291.880 ops/s
Iteration   6: 6518875.919 ops/s
Iteration   7: 6505006.897 ops/s
Iteration   8: 6241570.812 ops/s
Iteration   9: 6415994.971 ops/s
Iteration  10: 6290202.197 ops/s
Iteration  11: 6387745.093 ops/s
Iteration  12: 6258585.556 ops/s
Iteration  13: 6241464.671 ops/s
Iteration  14: 6567336.219 ops/s
Iteration  15: 6588964.597 ops/s
Iteration  16: 6627729.564 ops/s
Iteration  17: 6379519.831 ops/s
Iteration  18: 6462699.211 ops/s
Iteration  19: 6420575.636 ops/s
Iteration  20: 6520901.199 ops/s
Iteration  21: 6524163.503 ops/s
Iteration  22: 6386166.461 ops/s
Iteration  23: 6356202.732 ops/s
Iteration  24: 6321174.646 ops/s
Iteration  25: 6499967.862 ops/s
Iteration  26: 6498984.684 ops/s
Iteration  27: 6407989.107 ops/s
Iteration  28: 6563663.102 ops/s
Iteration  29: 6337060.207 ops/s
Iteration  30: 6113659.936 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutable":
  6418835.246 ±(99.9%) 81823.048 ops/s [Average]
  (min, avg, max) = (6113659.936, 6418835.246, 6627729.564), stdev = 122468.896
  CI (99.9%): [6337012.198, 6500658.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutable  thrpt   30  6418835.246 ± 81823.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459604.769 ops/s
# Warmup Iteration   2: 1013559.851 ops/s
# Warmup Iteration   3: 1116481.227 ops/s
# Warmup Iteration   4: 1122666.738 ops/s
# Warmup Iteration   5: 931023.210 ops/s
# Warmup Iteration   6: 1145531.951 ops/s
# Warmup Iteration   7: 1145262.505 ops/s
# Warmup Iteration   8: 1153383.768 ops/s
# Warmup Iteration   9: 1143003.749 ops/s
# Warmup Iteration  10: 1144504.077 ops/s
# Warmup Iteration  11: 1166200.895 ops/s
# Warmup Iteration  12: 1154204.581 ops/s
# Warmup Iteration  13: 1147848.811 ops/s
# Warmup Iteration  14: 1137560.488 ops/s
# Warmup Iteration  15: 1123971.377 ops/s
# Warmup Iteration  16: 1099625.679 ops/s
# Warmup Iteration  17: 1145364.318 ops/s
# Warmup Iteration  18: 1155067.894 ops/s
# Warmup Iteration  19: 1146165.462 ops/s
# Warmup Iteration  20: 1126562.968 ops/s
# Warmup Iteration  21: 1102773.545 ops/s
# Warmup Iteration  22: 1149326.818 ops/s
# Warmup Iteration  23: 1109003.924 ops/s
# Warmup Iteration  24: 1157653.851 ops/s
# Warmup Iteration  25: 1146800.101 ops/s
# Warmup Iteration  26: 1103977.499 ops/s
# Warmup Iteration  27: 1083533.933 ops/s
# Warmup Iteration  28: 1138332.785 ops/s
# Warmup Iteration  29: 1099823.313 ops/s
# Warmup Iteration  30: 1141020.991 ops/s
Iteration   1: 1128677.369 ops/s
Iteration   2: 1114429.933 ops/s
Iteration   3: 1120065.384 ops/s
Iteration   4: 1106858.438 ops/s
Iteration   5: 1111665.712 ops/s
Iteration   6: 1155374.935 ops/s
Iteration   7: 1153680.338 ops/s
Iteration   8: 1151907.066 ops/s
Iteration   9: 1167266.687 ops/s
Iteration  10: 1159999.087 ops/s
Iteration  11: 1147224.529 ops/s
Iteration  12: 1100207.205 ops/s
Iteration  13: 1118792.941 ops/s
Iteration  14: 1158624.218 ops/s
Iteration  15: 1150388.584 ops/s
Iteration  16: 1124205.220 ops/s
Iteration  17: 1156506.130 ops/s
Iteration  18: 1142397.821 ops/s
Iteration  19: 1136046.536 ops/s
Iteration  20: 1148777.672 ops/s
Iteration  21: 1152074.284 ops/s
Iteration  22: 1151001.822 ops/s
Iteration  23: 1172607.298 ops/s
Iteration  24: 1161248.983 ops/s
Iteration  25: 1162665.842 ops/s
Iteration  26: 1118852.789 ops/s
Iteration  27: 1113720.267 ops/s
Iteration  28: 1114612.848 ops/s
Iteration  29: 1138100.789 ops/s
Iteration  30: 1142066.360 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag":
  1139334.903 ±(99.9%) 13603.239 ops/s [Average]
  (min, avg, max) = (1100207.205, 1139334.903, 1172607.298), stdev = 20360.690
  CI (99.9%): [1125731.664, 1152938.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1139334.903 ± 13603.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 82619.929 ops/s
# Warmup Iteration   2: 119139.797 ops/s
# Warmup Iteration   3: 151915.173 ops/s
# Warmup Iteration   4: 150256.593 ops/s
# Warmup Iteration   5: 144162.169 ops/s
# Warmup Iteration   6: 147538.821 ops/s
# Warmup Iteration   7: 148606.440 ops/s
# Warmup Iteration   8: 119812.559 ops/s
# Warmup Iteration   9: 149494.681 ops/s
# Warmup Iteration  10: 149513.227 ops/s
# Warmup Iteration  11: 145647.248 ops/s
# Warmup Iteration  12: 147665.041 ops/s
# Warmup Iteration  13: 150369.002 ops/s
# Warmup Iteration  14: 149436.011 ops/s
# Warmup Iteration  15: 143513.283 ops/s
# Warmup Iteration  16: 144238.176 ops/s
# Warmup Iteration  17: 150022.427 ops/s
# Warmup Iteration  18: 153871.040 ops/s
# Warmup Iteration  19: 154940.817 ops/s
# Warmup Iteration  20: 153862.558 ops/s
# Warmup Iteration  21: 153582.652 ops/s
# Warmup Iteration  22: 147867.774 ops/s
# Warmup Iteration  23: 154087.862 ops/s
# Warmup Iteration  24: 154842.967 ops/s
# Warmup Iteration  25: 153104.741 ops/s
# Warmup Iteration  26: 154006.647 ops/s
# Warmup Iteration  27: 155116.433 ops/s
# Warmup Iteration  28: 156077.972 ops/s
# Warmup Iteration  29: 148292.146 ops/s
# Warmup Iteration  30: 153638.927 ops/s
Iteration   1: 154560.575 ops/s
Iteration   2: 154688.150 ops/s
Iteration   3: 147912.543 ops/s
Iteration   4: 147019.872 ops/s
Iteration   5: 153749.261 ops/s
Iteration   6: 153110.175 ops/s
Iteration   7: 157100.370 ops/s
Iteration   8: 153725.593 ops/s
Iteration   9: 154092.981 ops/s
Iteration  10: 153812.021 ops/s
Iteration  11: 155508.430 ops/s
Iteration  12: 151485.242 ops/s
Iteration  13: 148370.482 ops/s
Iteration  14: 157195.997 ops/s
Iteration  15: 157639.985 ops/s
Iteration  16: 156315.653 ops/s
Iteration  17: 154601.920 ops/s
Iteration  18: 155690.368 ops/s
Iteration  19: 150534.292 ops/s
Iteration  20: 148393.331 ops/s
Iteration  21: 147821.191 ops/s
Iteration  22: 145396.670 ops/s
Iteration  23: 148627.932 ops/s
Iteration  24: 149382.987 ops/s
Iteration  25: 155436.795 ops/s
Iteration  26: 154121.246 ops/s
Iteration  27: 154030.214 ops/s
Iteration  28: 154565.065 ops/s
Iteration  29: 154612.114 ops/s
Iteration  30: 153059.868 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap":
  152752.044 ±(99.9%) 2261.406 ops/s [Average]
  (min, avg, max) = (145396.670, 152752.044, 157639.985), stdev = 3384.767
  CI (99.9%): [150490.638, 155013.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  152752.044 ± 2261.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551823.732 ops/s
# Warmup Iteration   2: 1274312.640 ops/s
# Warmup Iteration   3: 1451557.401 ops/s
# Warmup Iteration   4: 1271090.875 ops/s
# Warmup Iteration   5: 1404331.448 ops/s
# Warmup Iteration   6: 1442827.621 ops/s
# Warmup Iteration   7: 1452957.634 ops/s
# Warmup Iteration   8: 1460180.783 ops/s
# Warmup Iteration   9: 1444481.040 ops/s
# Warmup Iteration  10: 1432269.872 ops/s
# Warmup Iteration  11: 1470918.302 ops/s
# Warmup Iteration  12: 1459946.943 ops/s
# Warmup Iteration  13: 1480055.597 ops/s
# Warmup Iteration  14: 1463003.245 ops/s
# Warmup Iteration  15: 1447973.306 ops/s
# Warmup Iteration  16: 1448807.345 ops/s
# Warmup Iteration  17: 1464124.118 ops/s
# Warmup Iteration  18: 1420140.289 ops/s
# Warmup Iteration  19: 1427087.122 ops/s
# Warmup Iteration  20: 1462064.513 ops/s
# Warmup Iteration  21: 1460928.133 ops/s
# Warmup Iteration  22: 1457571.204 ops/s
# Warmup Iteration  23: 1461773.003 ops/s
# Warmup Iteration  24: 1446984.480 ops/s
# Warmup Iteration  25: 1460679.768 ops/s
# Warmup Iteration  26: 1449876.323 ops/s
# Warmup Iteration  27: 1480620.481 ops/s
# Warmup Iteration  28: 1445886.829 ops/s
# Warmup Iteration  29: 1426641.137 ops/s
# Warmup Iteration  30: 1451974.798 ops/s
Iteration   1: 1475572.415 ops/s
Iteration   2: 1451389.777 ops/s
Iteration   3: 1372506.508 ops/s
Iteration   4: 1410763.136 ops/s
Iteration   5: 1464423.790 ops/s
Iteration   6: 1469476.107 ops/s
Iteration   7: 1479246.072 ops/s
Iteration   8: 1474969.487 ops/s
Iteration   9: 1448797.498 ops/s
Iteration  10: 1441437.093 ops/s
Iteration  11: 1445994.880 ops/s
Iteration  12: 1449078.300 ops/s
Iteration  13: 1452082.687 ops/s
Iteration  14: 1467485.403 ops/s
Iteration  15: 1441872.175 ops/s
Iteration  16: 1457072.907 ops/s
Iteration  17: 1428757.083 ops/s
Iteration  18: 1385361.308 ops/s
Iteration  19: 1440836.852 ops/s
Iteration  20: 1424682.204 ops/s
Iteration  21: 1447553.961 ops/s
Iteration  22: 1415209.175 ops/s
Iteration  23: 1397239.612 ops/s
Iteration  24: 1458282.978 ops/s
Iteration  25: 1398229.222 ops/s
Iteration  26: 1407810.101 ops/s
Iteration  27: 1482713.357 ops/s
Iteration  28: 1449761.709 ops/s
Iteration  29: 1397847.218 ops/s
Iteration  30: 1448376.228 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList":
  1439494.308 ±(99.9%) 19675.059 ops/s [Average]
  (min, avg, max) = (1372506.508, 1439494.308, 1482713.357), stdev = 29448.705
  CI (99.9%): [1419819.249, 1459169.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableList  thrpt   30  1439494.308 ± 19675.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 464097.174 ops/s
# Warmup Iteration   2: 1208462.041 ops/s
# Warmup Iteration   3: 1259082.126 ops/s
# Warmup Iteration   4: 1048904.704 ops/s
# Warmup Iteration   5: 1283591.904 ops/s
# Warmup Iteration   6: 1293409.331 ops/s
# Warmup Iteration   7: 1252938.751 ops/s
# Warmup Iteration   8: 1255220.364 ops/s
# Warmup Iteration   9: 1298560.728 ops/s
# Warmup Iteration  10: 1253070.323 ops/s
# Warmup Iteration  11: 1270951.660 ops/s
# Warmup Iteration  12: 1295492.492 ops/s
# Warmup Iteration  13: 1293514.025 ops/s
# Warmup Iteration  14: 1303009.689 ops/s
# Warmup Iteration  15: 1317413.164 ops/s
# Warmup Iteration  16: 1299017.175 ops/s
# Warmup Iteration  17: 1291452.249 ops/s
# Warmup Iteration  18: 1297236.991 ops/s
# Warmup Iteration  19: 1311759.494 ops/s
# Warmup Iteration  20: 1268641.793 ops/s
# Warmup Iteration  21: 1296081.293 ops/s
# Warmup Iteration  22: 1300841.610 ops/s
# Warmup Iteration  23: 1286640.167 ops/s
# Warmup Iteration  24: 1319118.867 ops/s
# Warmup Iteration  25: 1281037.407 ops/s
# Warmup Iteration  26: 1300955.578 ops/s
# Warmup Iteration  27: 1294447.586 ops/s
# Warmup Iteration  28: 1307793.169 ops/s
# Warmup Iteration  29: 1311795.755 ops/s
# Warmup Iteration  30: 1284967.935 ops/s
Iteration   1: 1305727.603 ops/s
Iteration   2: 1314351.785 ops/s
Iteration   3: 1285870.416 ops/s
Iteration   4: 1313824.709 ops/s
Iteration   5: 1323010.254 ops/s
Iteration   6: 1304441.569 ops/s
Iteration   7: 1299158.948 ops/s
Iteration   8: 1276751.462 ops/s
Iteration   9: 1325190.552 ops/s
Iteration  10: 1314751.896 ops/s
Iteration  11: 1312260.163 ops/s
Iteration  12: 1299531.240 ops/s
Iteration  13: 1284518.211 ops/s
Iteration  14: 1295915.546 ops/s
Iteration  15: 1296840.064 ops/s
Iteration  16: 1291391.265 ops/s
Iteration  17: 1303179.488 ops/s
Iteration  18: 1273817.908 ops/s
Iteration  19: 1278133.722 ops/s
Iteration  20: 1264449.592 ops/s
Iteration  21: 1281327.670 ops/s
Iteration  22: 1303609.580 ops/s
Iteration  23: 1313136.252 ops/s
Iteration  24: 1313517.851 ops/s
Iteration  25: 1302518.305 ops/s
Iteration  26: 1325934.977 ops/s
Iteration  27: 1286321.745 ops/s
Iteration  28: 1270425.117 ops/s
Iteration  29: 1291016.636 ops/s
Iteration  30: 1307515.786 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap":
  1298614.677 ±(99.9%) 11123.094 ops/s [Average]
  (min, avg, max) = (1264449.592, 1298614.677, 1325934.977), stdev = 16648.525
  CI (99.9%): [1287491.583, 1309737.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1298614.677 ± 11123.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 515082.312 ops/s
# Warmup Iteration   2: 1097176.545 ops/s
# Warmup Iteration   3: 1167089.378 ops/s
# Warmup Iteration   4: 1185850.388 ops/s
# Warmup Iteration   5: 990641.456 ops/s
# Warmup Iteration   6: 1189410.860 ops/s
# Warmup Iteration   7: 1188590.593 ops/s
# Warmup Iteration   8: 1195011.676 ops/s
# Warmup Iteration   9: 1196399.503 ops/s
# Warmup Iteration  10: 1165258.274 ops/s
# Warmup Iteration  11: 1179837.909 ops/s
# Warmup Iteration  12: 1188082.181 ops/s
# Warmup Iteration  13: 1188277.191 ops/s
# Warmup Iteration  14: 1176473.058 ops/s
# Warmup Iteration  15: 1207274.929 ops/s
# Warmup Iteration  16: 1192079.945 ops/s
# Warmup Iteration  17: 1202515.681 ops/s
# Warmup Iteration  18: 1147078.282 ops/s
# Warmup Iteration  19: 1195341.580 ops/s
# Warmup Iteration  20: 1202353.055 ops/s
# Warmup Iteration  21: 1190916.129 ops/s
# Warmup Iteration  22: 1195476.341 ops/s
# Warmup Iteration  23: 1187774.201 ops/s
# Warmup Iteration  24: 1205789.503 ops/s
# Warmup Iteration  25: 1164771.956 ops/s
# Warmup Iteration  26: 1200480.342 ops/s
# Warmup Iteration  27: 1188340.802 ops/s
# Warmup Iteration  28: 1181852.163 ops/s
# Warmup Iteration  29: 1176491.963 ops/s
# Warmup Iteration  30: 1204882.531 ops/s
Iteration   1: 1195562.819 ops/s
Iteration   2: 1149433.751 ops/s
Iteration   3: 1174150.360 ops/s
Iteration   4: 1193139.802 ops/s
Iteration   5: 1209666.759 ops/s
Iteration   6: 1211218.792 ops/s
Iteration   7: 1202856.307 ops/s
Iteration   8: 1179736.445 ops/s
Iteration   9: 1191185.829 ops/s
Iteration  10: 1195960.745 ops/s
Iteration  11: 1187001.066 ops/s
Iteration  12: 1183496.377 ops/s
Iteration  13: 1192090.228 ops/s
Iteration  14: 1166967.977 ops/s
Iteration  15: 1192020.195 ops/s
Iteration  16: 1192470.308 ops/s
Iteration  17: 1178320.017 ops/s
Iteration  18: 1204791.863 ops/s
Iteration  19: 1183552.002 ops/s
Iteration  20: 1191384.733 ops/s
Iteration  21: 1200754.597 ops/s
Iteration  22: 1190154.355 ops/s
Iteration  23: 1200775.685 ops/s
Iteration  24: 1173883.138 ops/s
Iteration  25: 1137237.929 ops/s
Iteration  26: 1182047.576 ops/s
Iteration  27: 1191446.348 ops/s
Iteration  28: 1197436.147 ops/s
Iteration  29: 1189239.253 ops/s
Iteration  30: 1204752.084 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet":
  1188091.116 ±(99.9%) 10803.070 ops/s [Average]
  (min, avg, max) = (1137237.929, 1188091.116, 1211218.792), stdev = 16169.527
  CI (99.9%): [1177288.046, 1198894.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1188091.116 ± 10803.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458275.100 ops/s
# Warmup Iteration   2: 1072390.840 ops/s
# Warmup Iteration   3: 1142929.713 ops/s
# Warmup Iteration   4: 993996.635 ops/s
# Warmup Iteration   5: 1104904.615 ops/s
# Warmup Iteration   6: 1127091.073 ops/s
# Warmup Iteration   7: 1122746.493 ops/s
# Warmup Iteration   8: 1145450.849 ops/s
# Warmup Iteration   9: 1139710.070 ops/s
# Warmup Iteration  10: 1144385.324 ops/s
# Warmup Iteration  11: 1143781.108 ops/s
# Warmup Iteration  12: 1137215.811 ops/s
# Warmup Iteration  13: 1137010.060 ops/s
# Warmup Iteration  14: 1150333.941 ops/s
# Warmup Iteration  15: 1137960.329 ops/s
# Warmup Iteration  16: 1143259.494 ops/s
# Warmup Iteration  17: 1128290.201 ops/s
# Warmup Iteration  18: 1136572.128 ops/s
# Warmup Iteration  19: 1142800.975 ops/s
# Warmup Iteration  20: 1119117.531 ops/s
# Warmup Iteration  21: 1096277.114 ops/s
# Warmup Iteration  22: 1136402.360 ops/s
# Warmup Iteration  23: 1142996.344 ops/s
# Warmup Iteration  24: 1128026.617 ops/s
# Warmup Iteration  25: 1142235.868 ops/s
# Warmup Iteration  26: 1142268.030 ops/s
# Warmup Iteration  27: 1133441.688 ops/s
# Warmup Iteration  28: 1140377.774 ops/s
# Warmup Iteration  29: 1138450.067 ops/s
# Warmup Iteration  30: 1142382.554 ops/s
Iteration   1: 1151763.236 ops/s
Iteration   2: 1156403.735 ops/s
Iteration   3: 1144995.819 ops/s
Iteration   4: 1125617.568 ops/s
Iteration   5: 1150368.809 ops/s
Iteration   6: 1142932.473 ops/s
Iteration   7: 1157268.551 ops/s
Iteration   8: 1157014.087 ops/s
Iteration   9: 1133380.168 ops/s
Iteration  10: 1109280.310 ops/s
Iteration  11: 1132267.921 ops/s
Iteration  12: 1130827.765 ops/s
Iteration  13: 1162535.401 ops/s
Iteration  14: 1169141.931 ops/s
Iteration  15: 1106937.379 ops/s
Iteration  16: 1157828.546 ops/s
Iteration  17: 1122726.621 ops/s
Iteration  18: 1107255.141 ops/s
Iteration  19: 1147827.311 ops/s
Iteration  20: 1152414.445 ops/s
Iteration  21: 1144667.573 ops/s
Iteration  22: 1156877.625 ops/s
Iteration  23: 1150523.849 ops/s
Iteration  24: 1158745.109 ops/s
Iteration  25: 1151605.316 ops/s
Iteration  26: 1153662.698 ops/s
Iteration  27: 1166105.602 ops/s
Iteration  28: 1147306.290 ops/s
Iteration  29: 1153170.635 ops/s
Iteration  30: 1155875.463 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1145244.246 ±(99.9%) 11271.543 ops/s [Average]
  (min, avg, max) = (1106937.379, 1145244.246, 1169141.931), stdev = 16870.716
  CI (99.9%): [1133972.703, 1156515.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1145244.246 ± 11271.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 277254.920 ops/s
# Warmup Iteration   2: 608713.431 ops/s
# Warmup Iteration   3: 675112.589 ops/s
# Warmup Iteration   4: 671677.024 ops/s
# Warmup Iteration   5: 571799.700 ops/s
# Warmup Iteration   6: 690861.644 ops/s
# Warmup Iteration   7: 693485.329 ops/s
# Warmup Iteration   8: 681607.517 ops/s
# Warmup Iteration   9: 687771.877 ops/s
# Warmup Iteration  10: 684280.553 ops/s
# Warmup Iteration  11: 670812.492 ops/s
# Warmup Iteration  12: 676258.285 ops/s
# Warmup Iteration  13: 696563.995 ops/s
# Warmup Iteration  14: 681300.098 ops/s
# Warmup Iteration  15: 675810.908 ops/s
# Warmup Iteration  16: 702419.295 ops/s
# Warmup Iteration  17: 693684.589 ops/s
# Warmup Iteration  18: 692486.381 ops/s
# Warmup Iteration  19: 697292.780 ops/s
# Warmup Iteration  20: 695837.401 ops/s
# Warmup Iteration  21: 700235.324 ops/s
# Warmup Iteration  22: 695211.080 ops/s
# Warmup Iteration  23: 700614.170 ops/s
# Warmup Iteration  24: 687891.889 ops/s
# Warmup Iteration  25: 697507.094 ops/s
# Warmup Iteration  26: 701135.767 ops/s
# Warmup Iteration  27: 701005.310 ops/s
# Warmup Iteration  28: 698680.642 ops/s
# Warmup Iteration  29: 674979.833 ops/s
# Warmup Iteration  30: 678112.465 ops/s
Iteration   1: 657341.488 ops/s
Iteration   2: 710578.762 ops/s
Iteration   3: 709418.958 ops/s
Iteration   4: 710985.272 ops/s
Iteration   5: 705020.845 ops/s
Iteration   6: 694867.323 ops/s
Iteration   7: 669541.881 ops/s
Iteration   8: 662864.238 ops/s
Iteration   9: 694667.366 ops/s
Iteration  10: 690501.064 ops/s
Iteration  11: 695386.016 ops/s
Iteration  12: 698185.351 ops/s
Iteration  13: 689593.794 ops/s
Iteration  14: 693613.646 ops/s
Iteration  15: 675326.791 ops/s
Iteration  16: 699902.556 ops/s
Iteration  17: 703732.589 ops/s
Iteration  18: 699473.382 ops/s
Iteration  19: 696853.383 ops/s
Iteration  20: 687667.669 ops/s
Iteration  21: 689569.553 ops/s
Iteration  22: 686550.797 ops/s
Iteration  23: 665659.029 ops/s
Iteration  24: 644971.617 ops/s
Iteration  25: 662823.712 ops/s
Iteration  26: 677204.833 ops/s
Iteration  27: 708564.610 ops/s
Iteration  28: 687462.882 ops/s
Iteration  29: 705107.878 ops/s
Iteration  30: 708047.426 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy":
  689382.824 ±(99.9%) 11714.243 ops/s [Average]
  (min, avg, max) = (644971.617, 689382.824, 710985.272), stdev = 17533.329
  CI (99.9%): [677668.581, 701097.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  689382.824 ± 11714.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 258247.470 ops/s
# Warmup Iteration   2: 493651.742 ops/s
# Warmup Iteration   3: 567861.683 ops/s
# Warmup Iteration   4: 565818.183 ops/s
# Warmup Iteration   5: 570010.354 ops/s
# Warmup Iteration   6: 460509.640 ops/s
# Warmup Iteration   7: 544853.603 ops/s
# Warmup Iteration   8: 536451.989 ops/s
# Warmup Iteration   9: 539068.229 ops/s
# Warmup Iteration  10: 566908.892 ops/s
# Warmup Iteration  11: 568129.366 ops/s
# Warmup Iteration  12: 565567.648 ops/s
# Warmup Iteration  13: 570772.654 ops/s
# Warmup Iteration  14: 562847.986 ops/s
# Warmup Iteration  15: 561780.803 ops/s
# Warmup Iteration  16: 568786.341 ops/s
# Warmup Iteration  17: 559700.470 ops/s
# Warmup Iteration  18: 564174.351 ops/s
# Warmup Iteration  19: 568993.135 ops/s
# Warmup Iteration  20: 542230.994 ops/s
# Warmup Iteration  21: 562907.945 ops/s
# Warmup Iteration  22: 547192.380 ops/s
# Warmup Iteration  23: 558072.954 ops/s
# Warmup Iteration  24: 546550.951 ops/s
# Warmup Iteration  25: 559264.303 ops/s
# Warmup Iteration  26: 555048.343 ops/s
# Warmup Iteration  27: 540754.055 ops/s
# Warmup Iteration  28: 545624.282 ops/s
# Warmup Iteration  29: 539240.154 ops/s
# Warmup Iteration  30: 539928.182 ops/s
Iteration   1: 552981.503 ops/s
Iteration   2: 550245.166 ops/s
Iteration   3: 539243.099 ops/s
Iteration   4: 558850.384 ops/s
Iteration   5: 578523.621 ops/s
Iteration   6: 574761.284 ops/s
Iteration   7: 542740.906 ops/s
Iteration   8: 552488.121 ops/s
Iteration   9: 560742.934 ops/s
Iteration  10: 569836.137 ops/s
Iteration  11: 570356.520 ops/s
Iteration  12: 563171.261 ops/s
Iteration  13: 566132.563 ops/s
Iteration  14: 540788.565 ops/s
Iteration  15: 573168.559 ops/s
Iteration  16: 563520.028 ops/s
Iteration  17: 564178.385 ops/s
Iteration  18: 567488.705 ops/s
Iteration  19: 566319.967 ops/s
Iteration  20: 560993.252 ops/s
Iteration  21: 568247.002 ops/s
Iteration  22: 561506.017 ops/s
Iteration  23: 555441.375 ops/s
Iteration  24: 557091.146 ops/s
Iteration  25: 569727.685 ops/s
Iteration  26: 565435.731 ops/s
Iteration  27: 567122.061 ops/s
Iteration  28: 564426.711 ops/s
Iteration  29: 560052.648 ops/s
Iteration  30: 560124.421 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  561523.525 ±(99.9%) 6372.047 ops/s [Average]
  (min, avg, max) = (539243.099, 561523.525, 578523.621), stdev = 9537.380
  CI (99.9%): [555151.478, 567895.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  561523.525 ± 6372.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451030.204 ops/s
# Warmup Iteration   2: 925314.885 ops/s
# Warmup Iteration   3: 1058949.412 ops/s
# Warmup Iteration   4: 1075941.531 ops/s
# Warmup Iteration   5: 891770.164 ops/s
# Warmup Iteration   6: 1058791.420 ops/s
# Warmup Iteration   7: 1062011.589 ops/s
# Warmup Iteration   8: 1076981.296 ops/s
# Warmup Iteration   9: 1071834.936 ops/s
# Warmup Iteration  10: 1075227.359 ops/s
# Warmup Iteration  11: 1074157.603 ops/s
# Warmup Iteration  12: 1055307.199 ops/s
# Warmup Iteration  13: 1084645.134 ops/s
# Warmup Iteration  14: 1086744.959 ops/s
# Warmup Iteration  15: 1094317.492 ops/s
# Warmup Iteration  16: 1081943.629 ops/s
# Warmup Iteration  17: 1081014.428 ops/s
# Warmup Iteration  18: 1098389.009 ops/s
# Warmup Iteration  19: 1090447.726 ops/s
# Warmup Iteration  20: 1080127.635 ops/s
# Warmup Iteration  21: 1082175.333 ops/s
# Warmup Iteration  22: 1061460.004 ops/s
# Warmup Iteration  23: 1081760.907 ops/s
# Warmup Iteration  24: 1077598.519 ops/s
# Warmup Iteration  25: 1055126.599 ops/s
# Warmup Iteration  26: 1078695.763 ops/s
# Warmup Iteration  27: 1088677.391 ops/s
# Warmup Iteration  28: 1038595.192 ops/s
# Warmup Iteration  29: 1074747.890 ops/s
# Warmup Iteration  30: 1089582.738 ops/s
Iteration   1: 1101637.274 ops/s
Iteration   2: 1102163.560 ops/s
Iteration   3: 1086165.629 ops/s
Iteration   4: 1082261.021 ops/s
Iteration   5: 1075887.512 ops/s
Iteration   6: 1080353.117 ops/s
Iteration   7: 1072317.572 ops/s
Iteration   8: 1076486.639 ops/s
Iteration   9: 1081502.473 ops/s
Iteration  10: 1080738.332 ops/s
Iteration  11: 1071714.512 ops/s
Iteration  12: 1070208.034 ops/s
Iteration  13: 1077679.990 ops/s
Iteration  14: 1084751.950 ops/s
Iteration  15: 1071271.272 ops/s
Iteration  16: 1058651.344 ops/s
Iteration  17: 1069967.072 ops/s
Iteration  18: 1083458.579 ops/s
Iteration  19: 1086270.499 ops/s
Iteration  20: 1079799.617 ops/s
Iteration  21: 1079141.055 ops/s
Iteration  22: 1065653.981 ops/s
Iteration  23: 1086183.455 ops/s
Iteration  24: 1089277.114 ops/s
Iteration  25: 1096170.233 ops/s
Iteration  26: 1087555.198 ops/s
Iteration  27: 1086550.305 ops/s
Iteration  28: 1081035.123 ops/s
Iteration  29: 1084657.800 ops/s
Iteration  30: 1083999.029 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1081116.976 ±(99.9%) 6403.264 ops/s [Average]
  (min, avg, max) = (1058651.344, 1081116.976, 1102163.560), stdev = 9584.105
  CI (99.9%): [1074713.712, 1087520.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1081116.976 ± 6403.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1091542.014 ops/s
# Warmup Iteration   2: 2805374.410 ops/s
# Warmup Iteration   3: 2816438.035 ops/s
# Warmup Iteration   4: 2378342.109 ops/s
# Warmup Iteration   5: 2780106.486 ops/s
# Warmup Iteration   6: 2794914.529 ops/s
# Warmup Iteration   7: 2799439.385 ops/s
# Warmup Iteration   8: 2844760.249 ops/s
# Warmup Iteration   9: 2791489.371 ops/s
# Warmup Iteration  10: 2762863.848 ops/s
# Warmup Iteration  11: 2800389.085 ops/s
# Warmup Iteration  12: 2939365.300 ops/s
# Warmup Iteration  13: 2907824.338 ops/s
# Warmup Iteration  14: 2937474.659 ops/s
# Warmup Iteration  15: 2919597.686 ops/s
# Warmup Iteration  16: 2892766.442 ops/s
# Warmup Iteration  17: 2885283.792 ops/s
# Warmup Iteration  18: 2903269.556 ops/s
# Warmup Iteration  19: 2895320.540 ops/s
# Warmup Iteration  20: 2762579.750 ops/s
# Warmup Iteration  21: 2815425.353 ops/s
# Warmup Iteration  22: 2842769.820 ops/s
# Warmup Iteration  23: 2792144.361 ops/s
# Warmup Iteration  24: 2753618.476 ops/s
# Warmup Iteration  25: 2838775.073 ops/s
# Warmup Iteration  26: 2722262.336 ops/s
# Warmup Iteration  27: 2860026.841 ops/s
# Warmup Iteration  28: 2857498.109 ops/s
# Warmup Iteration  29: 2863008.366 ops/s
# Warmup Iteration  30: 2825314.030 ops/s
Iteration   1: 2775668.831 ops/s
Iteration   2: 2819558.562 ops/s
Iteration   3: 2946736.565 ops/s
Iteration   4: 2919042.403 ops/s
Iteration   5: 2849683.619 ops/s
Iteration   6: 2822263.932 ops/s
Iteration   7: 2841532.621 ops/s
Iteration   8: 2913536.404 ops/s
Iteration   9: 2899019.862 ops/s
Iteration  10: 2787776.879 ops/s
Iteration  11: 2923725.052 ops/s
Iteration  12: 2939262.915 ops/s
Iteration  13: 2929222.250 ops/s
Iteration  14: 2843437.219 ops/s
Iteration  15: 2906971.216 ops/s
Iteration  16: 2915427.824 ops/s
Iteration  17: 2884835.263 ops/s
Iteration  18: 2857232.530 ops/s
Iteration  19: 2887072.700 ops/s
Iteration  20: 2881692.043 ops/s
Iteration  21: 2870755.046 ops/s
Iteration  22: 2824427.718 ops/s
Iteration  23: 2899594.157 ops/s
Iteration  24: 2882675.479 ops/s
Iteration  25: 2908690.885 ops/s
Iteration  26: 2845315.159 ops/s
Iteration  27: 2873104.793 ops/s
Iteration  28: 2889110.707 ops/s
Iteration  29: 2913681.559 ops/s
Iteration  30: 2896410.282 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy":
  2878248.816 ±(99.9%) 29104.983 ops/s [Average]
  (min, avg, max) = (2775668.831, 2878248.816, 2946736.565), stdev = 43562.971
  CI (99.9%): [2849143.833, 2907353.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  2878248.816 ± 29104.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628519.137 ops/s
# Warmup Iteration   2: 1357022.472 ops/s
# Warmup Iteration   3: 1513654.700 ops/s
# Warmup Iteration   4: 1417741.590 ops/s
# Warmup Iteration   5: 1211302.892 ops/s
# Warmup Iteration   6: 1499811.374 ops/s
# Warmup Iteration   7: 1520052.177 ops/s
# Warmup Iteration   8: 1519127.199 ops/s
# Warmup Iteration   9: 1520670.380 ops/s
# Warmup Iteration  10: 1520177.832 ops/s
# Warmup Iteration  11: 1485553.142 ops/s
# Warmup Iteration  12: 1505764.634 ops/s
# Warmup Iteration  13: 1521437.294 ops/s
# Warmup Iteration  14: 1527548.532 ops/s
# Warmup Iteration  15: 1520697.310 ops/s
# Warmup Iteration  16: 1511055.154 ops/s
# Warmup Iteration  17: 1524541.878 ops/s
# Warmup Iteration  18: 1528788.989 ops/s
# Warmup Iteration  19: 1528939.879 ops/s
# Warmup Iteration  20: 1551781.610 ops/s
# Warmup Iteration  21: 1502324.583 ops/s
# Warmup Iteration  22: 1518416.464 ops/s
# Warmup Iteration  23: 1498403.107 ops/s
# Warmup Iteration  24: 1517687.779 ops/s
# Warmup Iteration  25: 1481770.845 ops/s
# Warmup Iteration  26: 1533883.616 ops/s
# Warmup Iteration  27: 1530022.308 ops/s
# Warmup Iteration  28: 1520650.251 ops/s
# Warmup Iteration  29: 1524033.032 ops/s
# Warmup Iteration  30: 1548114.991 ops/s
Iteration   1: 1523826.960 ops/s
Iteration   2: 1539456.423 ops/s
Iteration   3: 1534336.479 ops/s
Iteration   4: 1539346.128 ops/s
Iteration   5: 1529888.012 ops/s
Iteration   6: 1512450.273 ops/s
Iteration   7: 1500667.740 ops/s
Iteration   8: 1491939.414 ops/s
Iteration   9: 1465564.962 ops/s
Iteration  10: 1457378.410 ops/s
Iteration  11: 1443689.137 ops/s
Iteration  12: 1502520.677 ops/s
Iteration  13: 1532476.820 ops/s
Iteration  14: 1540543.630 ops/s
Iteration  15: 1521246.319 ops/s
Iteration  16: 1481532.179 ops/s
Iteration  17: 1440647.045 ops/s
Iteration  18: 1531072.551 ops/s
Iteration  19: 1522043.014 ops/s
Iteration  20: 1519036.769 ops/s
Iteration  21: 1516837.482 ops/s
Iteration  22: 1484917.315 ops/s
Iteration  23: 1526718.592 ops/s
Iteration  24: 1520939.660 ops/s
Iteration  25: 1519113.386 ops/s
Iteration  26: 1541093.007 ops/s
Iteration  27: 1527359.366 ops/s
Iteration  28: 1550243.618 ops/s
Iteration  29: 1530596.943 ops/s
Iteration  30: 1519712.217 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1512239.818 ±(99.9%) 19535.158 ops/s [Average]
  (min, avg, max) = (1440647.045, 1512239.818, 1550243.618), stdev = 29239.307
  CI (99.9%): [1492704.660, 1531774.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1512239.818 ± 19535.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1463686.316 ops/s
# Warmup Iteration   2: 3223647.625 ops/s
# Warmup Iteration   3: 3489690.491 ops/s
# Warmup Iteration   4: 3498089.062 ops/s
# Warmup Iteration   5: 2917341.686 ops/s
# Warmup Iteration   6: 3520589.902 ops/s
# Warmup Iteration   7: 3416015.001 ops/s
# Warmup Iteration   8: 3502649.652 ops/s
# Warmup Iteration   9: 3514687.965 ops/s
# Warmup Iteration  10: 3417068.578 ops/s
# Warmup Iteration  11: 3467816.236 ops/s
# Warmup Iteration  12: 3441723.238 ops/s
# Warmup Iteration  13: 3506731.792 ops/s
# Warmup Iteration  14: 3461683.907 ops/s
# Warmup Iteration  15: 3365586.079 ops/s
# Warmup Iteration  16: 3379991.998 ops/s
# Warmup Iteration  17: 3412186.959 ops/s
# Warmup Iteration  18: 3532868.807 ops/s
# Warmup Iteration  19: 3333952.343 ops/s
# Warmup Iteration  20: 3460355.477 ops/s
# Warmup Iteration  21: 3485088.886 ops/s
# Warmup Iteration  22: 3520960.206 ops/s
# Warmup Iteration  23: 3488705.592 ops/s
# Warmup Iteration  24: 3446842.842 ops/s
# Warmup Iteration  25: 3381410.137 ops/s
# Warmup Iteration  26: 3411733.326 ops/s
# Warmup Iteration  27: 3507608.461 ops/s
# Warmup Iteration  28: 3467515.433 ops/s
# Warmup Iteration  29: 3543725.175 ops/s
# Warmup Iteration  30: 3508490.735 ops/s
Iteration   1: 3531000.368 ops/s
Iteration   2: 3539545.476 ops/s
Iteration   3: 3508729.957 ops/s
Iteration   4: 3493585.885 ops/s
Iteration   5: 3541454.404 ops/s
Iteration   6: 3486141.622 ops/s
Iteration   7: 3392267.706 ops/s
Iteration   8: 3421636.764 ops/s
Iteration   9: 3567695.659 ops/s
Iteration  10: 3512808.560 ops/s
Iteration  11: 3342137.079 ops/s
Iteration  12: 3583545.714 ops/s
Iteration  13: 3545350.299 ops/s
Iteration  14: 3357993.631 ops/s
Iteration  15: 3508435.211 ops/s
Iteration  16: 3391642.411 ops/s
Iteration  17: 3521955.146 ops/s
Iteration  18: 3469788.899 ops/s
Iteration  19: 3520639.756 ops/s
Iteration  20: 3351882.829 ops/s
Iteration  21: 3501442.161 ops/s
Iteration  22: 3437012.387 ops/s
Iteration  23: 3512988.184 ops/s
Iteration  24: 3510963.896 ops/s
Iteration  25: 3493847.571 ops/s
Iteration  26: 3516914.828 ops/s
Iteration  27: 3566696.398 ops/s
Iteration  28: 3504313.331 ops/s
Iteration  29: 3404230.202 ops/s
Iteration  30: 3351558.002 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3479606.811 ±(99.9%) 47164.678 ops/s [Average]
  (min, avg, max) = (3342137.079, 3479606.811, 3583545.714), stdev = 70593.876
  CI (99.9%): [3432442.133, 3526771.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3479606.811 ± 47164.678  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481768.841 ops/s
# Warmup Iteration   2: 1091447.457 ops/s
# Warmup Iteration   3: 1173368.246 ops/s
# Warmup Iteration   4: 1182860.067 ops/s
# Warmup Iteration   5: 974508.611 ops/s
# Warmup Iteration   6: 1182785.801 ops/s
# Warmup Iteration   7: 1189632.339 ops/s
# Warmup Iteration   8: 1173233.728 ops/s
# Warmup Iteration   9: 1176132.457 ops/s
# Warmup Iteration  10: 1192370.626 ops/s
# Warmup Iteration  11: 1190017.244 ops/s
# Warmup Iteration  12: 1188338.153 ops/s
# Warmup Iteration  13: 1189090.909 ops/s
# Warmup Iteration  14: 1174015.645 ops/s
# Warmup Iteration  15: 1179738.327 ops/s
# Warmup Iteration  16: 1200655.637 ops/s
# Warmup Iteration  17: 1183166.323 ops/s
# Warmup Iteration  18: 1193796.144 ops/s
# Warmup Iteration  19: 1185607.705 ops/s
# Warmup Iteration  20: 1187899.785 ops/s
# Warmup Iteration  21: 1196015.374 ops/s
# Warmup Iteration  22: 1196366.736 ops/s
# Warmup Iteration  23: 1193950.180 ops/s
# Warmup Iteration  24: 1185872.250 ops/s
# Warmup Iteration  25: 1169031.055 ops/s
# Warmup Iteration  26: 1154644.874 ops/s
# Warmup Iteration  27: 1186827.246 ops/s
# Warmup Iteration  28: 1204115.200 ops/s
# Warmup Iteration  29: 1204561.390 ops/s
# Warmup Iteration  30: 1175202.853 ops/s
Iteration   1: 1172134.682 ops/s
Iteration   2: 1140298.728 ops/s
Iteration   3: 1145541.930 ops/s
Iteration   4: 1166755.314 ops/s
Iteration   5: 1188874.855 ops/s
Iteration   6: 1191195.940 ops/s
Iteration   7: 1157206.807 ops/s
Iteration   8: 1180169.789 ops/s
Iteration   9: 1187157.446 ops/s
Iteration  10: 1199112.496 ops/s
Iteration  11: 1202948.127 ops/s
Iteration  12: 1191927.477 ops/s
Iteration  13: 1184356.973 ops/s
Iteration  14: 1192207.579 ops/s
Iteration  15: 1176487.422 ops/s
Iteration  16: 1191540.167 ops/s
Iteration  17: 1169405.248 ops/s
Iteration  18: 1117058.252 ops/s
Iteration  19: 1174784.925 ops/s
Iteration  20: 1160615.228 ops/s
Iteration  21: 1140642.982 ops/s
Iteration  22: 1157319.933 ops/s
Iteration  23: 1121064.740 ops/s
Iteration  24: 1166750.780 ops/s
Iteration  25: 1190148.208 ops/s
Iteration  26: 1200439.021 ops/s
Iteration  27: 1188423.131 ops/s
Iteration  28: 1196417.932 ops/s
Iteration  29: 1195589.821 ops/s
Iteration  30: 1194716.590 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1174709.751 ±(99.9%) 15591.738 ops/s [Average]
  (min, avg, max) = (1117058.252, 1174709.751, 1202948.127), stdev = 23336.981
  CI (99.9%): [1159118.013, 1190301.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1174709.751 ± 15591.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562032.137 ops/s
# Warmup Iteration   2: 1127727.909 ops/s
# Warmup Iteration   3: 1282335.734 ops/s
# Warmup Iteration   4: 1242623.908 ops/s
# Warmup Iteration   5: 1050881.046 ops/s
# Warmup Iteration   6: 1206107.191 ops/s
# Warmup Iteration   7: 1316424.518 ops/s
# Warmup Iteration   8: 1303970.132 ops/s
# Warmup Iteration   9: 1306419.489 ops/s
# Warmup Iteration  10: 1307148.460 ops/s
# Warmup Iteration  11: 1293312.110 ops/s
# Warmup Iteration  12: 1298225.033 ops/s
# Warmup Iteration  13: 1254766.490 ops/s
# Warmup Iteration  14: 1280140.782 ops/s
# Warmup Iteration  15: 1283678.417 ops/s
# Warmup Iteration  16: 1290056.209 ops/s
# Warmup Iteration  17: 1295177.673 ops/s
# Warmup Iteration  18: 1296444.540 ops/s
# Warmup Iteration  19: 1290579.021 ops/s
# Warmup Iteration  20: 1313813.295 ops/s
# Warmup Iteration  21: 1293692.182 ops/s
# Warmup Iteration  22: 1292602.405 ops/s
# Warmup Iteration  23: 1286718.079 ops/s
# Warmup Iteration  24: 1303807.776 ops/s
# Warmup Iteration  25: 1292758.322 ops/s
# Warmup Iteration  26: 1279021.528 ops/s
# Warmup Iteration  27: 1238755.214 ops/s
# Warmup Iteration  28: 1254663.586 ops/s
# Warmup Iteration  29: 1298068.689 ops/s
# Warmup Iteration  30: 1279898.664 ops/s
Iteration   1: 1238007.231 ops/s
Iteration   2: 1292288.666 ops/s
Iteration   3: 1245305.054 ops/s
Iteration   4: 1299986.557 ops/s
Iteration   5: 1297948.007 ops/s
Iteration   6: 1292493.654 ops/s
Iteration   7: 1312310.562 ops/s
Iteration   8: 1299976.997 ops/s
Iteration   9: 1309386.330 ops/s
Iteration  10: 1322836.260 ops/s
Iteration  11: 1322316.127 ops/s
Iteration  12: 1306037.543 ops/s
Iteration  13: 1279677.590 ops/s
Iteration  14: 1252036.613 ops/s
Iteration  15: 1312365.424 ops/s
Iteration  16: 1322593.351 ops/s
Iteration  17: 1293773.965 ops/s
Iteration  18: 1297535.680 ops/s
Iteration  19: 1315987.230 ops/s
Iteration  20: 1298856.415 ops/s
Iteration  21: 1265091.726 ops/s
Iteration  22: 1297479.303 ops/s
Iteration  23: 1288353.275 ops/s
Iteration  24: 1297021.191 ops/s
Iteration  25: 1298692.130 ops/s
Iteration  26: 1299768.570 ops/s
Iteration  27: 1298277.372 ops/s
Iteration  28: 1290611.276 ops/s
Iteration  29: 1317659.283 ops/s
Iteration  30: 1289849.057 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1295150.748 ±(99.9%) 14200.282 ops/s [Average]
  (min, avg, max) = (1238007.231, 1295150.748, 1322836.260), stdev = 21254.316
  CI (99.9%): [1280950.466, 1309351.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1295150.748 ± 14200.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1579775.925 ops/s
# Warmup Iteration   2: 3473364.170 ops/s
# Warmup Iteration   3: 3719425.655 ops/s
# Warmup Iteration   4: 3685654.594 ops/s
# Warmup Iteration   5: 2980687.589 ops/s
# Warmup Iteration   6: 3698251.157 ops/s
# Warmup Iteration   7: 3585306.153 ops/s
# Warmup Iteration   8: 3559329.335 ops/s
# Warmup Iteration   9: 3666896.603 ops/s
# Warmup Iteration  10: 3657384.940 ops/s
# Warmup Iteration  11: 3707933.726 ops/s
# Warmup Iteration  12: 3656976.519 ops/s
# Warmup Iteration  13: 3757051.014 ops/s
# Warmup Iteration  14: 3772178.422 ops/s
# Warmup Iteration  15: 3735606.321 ops/s
# Warmup Iteration  16: 3794996.147 ops/s
# Warmup Iteration  17: 3716553.865 ops/s
# Warmup Iteration  18: 3600702.677 ops/s
# Warmup Iteration  19: 3696533.069 ops/s
# Warmup Iteration  20: 3612958.764 ops/s
# Warmup Iteration  21: 3744728.328 ops/s
# Warmup Iteration  22: 3622809.343 ops/s
# Warmup Iteration  23: 3746680.123 ops/s
# Warmup Iteration  24: 3792806.099 ops/s
# Warmup Iteration  25: 3601733.629 ops/s
# Warmup Iteration  26: 3573139.296 ops/s
# Warmup Iteration  27: 3687959.654 ops/s
# Warmup Iteration  28: 3773722.898 ops/s
# Warmup Iteration  29: 3541412.001 ops/s
# Warmup Iteration  30: 3794272.917 ops/s
Iteration   1: 3791560.279 ops/s
Iteration   2: 3747107.554 ops/s
Iteration   3: 3730055.298 ops/s
Iteration   4: 3736920.123 ops/s
Iteration   5: 3725274.418 ops/s
Iteration   6: 3729293.927 ops/s
Iteration   7: 3745812.511 ops/s
Iteration   8: 3755531.429 ops/s
Iteration   9: 3774404.610 ops/s
Iteration  10: 3762448.244 ops/s
Iteration  11: 3766117.338 ops/s
Iteration  12: 3733401.636 ops/s
Iteration  13: 3764894.206 ops/s
Iteration  14: 3728529.357 ops/s
Iteration  15: 3758611.818 ops/s
Iteration  16: 3729690.173 ops/s
Iteration  17: 3740262.458 ops/s
Iteration  18: 3716348.061 ops/s
Iteration  19: 3789301.682 ops/s
Iteration  20: 3639750.536 ops/s
Iteration  21: 3717666.413 ops/s
Iteration  22: 3735304.180 ops/s
Iteration  23: 3716924.754 ops/s
Iteration  24: 3774392.814 ops/s
Iteration  25: 3587745.390 ops/s
Iteration  26: 3728476.118 ops/s
Iteration  27: 3740764.980 ops/s
Iteration  28: 3775081.076 ops/s
Iteration  29: 3745755.460 ops/s
Iteration  30: 3725733.100 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toList":
  3737105.331 ±(99.9%) 26853.271 ops/s [Average]
  (min, avg, max) = (3587745.390, 3737105.331, 3791560.279), stdev = 40192.715
  CI (99.9%): [3710252.060, 3763958.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toList  thrpt   30  3737105.331 ± 26853.271  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795425.421 ops/s
# Warmup Iteration   2: 1918956.536 ops/s
# Warmup Iteration   3: 2024221.441 ops/s
# Warmup Iteration   4: 1618058.083 ops/s
# Warmup Iteration   5: 2059161.259 ops/s
# Warmup Iteration   6: 1977409.569 ops/s
# Warmup Iteration   7: 1993863.940 ops/s
# Warmup Iteration   8: 2060101.312 ops/s
# Warmup Iteration   9: 2075551.686 ops/s
# Warmup Iteration  10: 2063017.784 ops/s
# Warmup Iteration  11: 2034728.119 ops/s
# Warmup Iteration  12: 2050112.038 ops/s
# Warmup Iteration  13: 2050415.704 ops/s
# Warmup Iteration  14: 2051023.467 ops/s
# Warmup Iteration  15: 1999855.058 ops/s
# Warmup Iteration  16: 2038130.835 ops/s
# Warmup Iteration  17: 2023233.466 ops/s
# Warmup Iteration  18: 2048415.776 ops/s
# Warmup Iteration  19: 2020858.126 ops/s
# Warmup Iteration  20: 2005916.341 ops/s
# Warmup Iteration  21: 2072587.658 ops/s
# Warmup Iteration  22: 2025413.894 ops/s
# Warmup Iteration  23: 2056185.557 ops/s
# Warmup Iteration  24: 2033441.683 ops/s
# Warmup Iteration  25: 2048920.727 ops/s
# Warmup Iteration  26: 2038467.631 ops/s
# Warmup Iteration  27: 2033595.648 ops/s
# Warmup Iteration  28: 2027853.533 ops/s
# Warmup Iteration  29: 2053851.245 ops/s
# Warmup Iteration  30: 2068752.243 ops/s
Iteration   1: 2036096.476 ops/s
Iteration   2: 2053196.735 ops/s
Iteration   3: 1977982.066 ops/s
Iteration   4: 2049187.821 ops/s
Iteration   5: 2040171.113 ops/s
Iteration   6: 1948657.778 ops/s
Iteration   7: 1963320.921 ops/s
Iteration   8: 2010046.830 ops/s
Iteration   9: 2031826.751 ops/s
Iteration  10: 2053590.270 ops/s
Iteration  11: 1944771.895 ops/s
Iteration  12: 2033314.410 ops/s
Iteration  13: 2027420.958 ops/s
Iteration  14: 2045306.086 ops/s
Iteration  15: 2011638.855 ops/s
Iteration  16: 2020682.962 ops/s
Iteration  17: 2020326.026 ops/s
Iteration  18: 1994867.810 ops/s
Iteration  19: 2061506.358 ops/s
Iteration  20: 2087792.951 ops/s
Iteration  21: 2065551.092 ops/s
Iteration  22: 2063081.429 ops/s
Iteration  23: 2062155.265 ops/s
Iteration  24: 2067222.720 ops/s
Iteration  25: 2033504.014 ops/s
Iteration  26: 2018044.731 ops/s
Iteration  27: 2071816.723 ops/s
Iteration  28: 2061358.554 ops/s
Iteration  29: 2074325.346 ops/s
Iteration  30: 2087487.544 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMap":
  2033875.083 ±(99.9%) 25382.713 ops/s [Average]
  (min, avg, max) = (1944771.895, 2033875.083, 2087792.951), stdev = 37991.653
  CI (99.9%): [2008492.370, 2059257.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMap  thrpt   30  2033875.083 ± 25382.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762371.652 ops/s
# Warmup Iteration   2: 1853414.675 ops/s
# Warmup Iteration   3: 1882979.196 ops/s
# Warmup Iteration   4: 1569318.155 ops/s
# Warmup Iteration   5: 1893973.406 ops/s
# Warmup Iteration   6: 1839386.359 ops/s
# Warmup Iteration   7: 1837396.898 ops/s
# Warmup Iteration   8: 1848060.088 ops/s
# Warmup Iteration   9: 1897498.410 ops/s
# Warmup Iteration  10: 1885163.873 ops/s
# Warmup Iteration  11: 1868605.212 ops/s
# Warmup Iteration  12: 1821789.526 ops/s
# Warmup Iteration  13: 1848499.415 ops/s
# Warmup Iteration  14: 1881000.263 ops/s
# Warmup Iteration  15: 1860826.650 ops/s
# Warmup Iteration  16: 1822211.587 ops/s
# Warmup Iteration  17: 1860689.402 ops/s
# Warmup Iteration  18: 1831860.389 ops/s
# Warmup Iteration  19: 1796164.443 ops/s
# Warmup Iteration  20: 1810782.356 ops/s
# Warmup Iteration  21: 1871806.796 ops/s
# Warmup Iteration  22: 1834756.628 ops/s
# Warmup Iteration  23: 1870415.071 ops/s
# Warmup Iteration  24: 1837592.500 ops/s
# Warmup Iteration  25: 1864401.816 ops/s
# Warmup Iteration  26: 1910758.934 ops/s
# Warmup Iteration  27: 1905965.051 ops/s
# Warmup Iteration  28: 1826620.957 ops/s
# Warmup Iteration  29: 1818909.260 ops/s
# Warmup Iteration  30: 1894991.227 ops/s
Iteration   1: 1884416.105 ops/s
Iteration   2: 1876573.647 ops/s
Iteration   3: 1872917.126 ops/s
Iteration   4: 1887531.479 ops/s
Iteration   5: 1898390.833 ops/s
Iteration   6: 1891511.271 ops/s
Iteration   7: 1896818.269 ops/s
Iteration   8: 1889330.969 ops/s
Iteration   9: 1813725.383 ops/s
Iteration  10: 1893356.975 ops/s
Iteration  11: 1863744.239 ops/s
Iteration  12: 1870579.086 ops/s
Iteration  13: 1800944.762 ops/s
Iteration  14: 1793451.585 ops/s
Iteration  15: 1781395.232 ops/s
Iteration  16: 1889661.898 ops/s
Iteration  17: 1883101.298 ops/s
Iteration  18: 1867338.277 ops/s
Iteration  19: 1881676.430 ops/s
Iteration  20: 1869556.296 ops/s
Iteration  21: 1903503.043 ops/s
Iteration  22: 1876890.462 ops/s
Iteration  23: 1865852.906 ops/s
Iteration  24: 1822930.070 ops/s
Iteration  25: 1864218.034 ops/s
Iteration  26: 1868789.754 ops/s
Iteration  27: 1787835.608 ops/s
Iteration  28: 1843276.242 ops/s
Iteration  29: 1788998.005 ops/s
Iteration  30: 1841089.221 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget":
  1858980.150 ±(99.9%) 24973.290 ops/s [Average]
  (min, avg, max) = (1781395.232, 1858980.150, 1903503.043), stdev = 37378.848
  CI (99.9%): [1834006.860, 1883953.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toMapTarget  thrpt   30  1858980.150 ± 24973.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1449443.240 ops/s
# Warmup Iteration   2: 3128937.937 ops/s
# Warmup Iteration   3: 3292979.666 ops/s
# Warmup Iteration   4: 3264084.258 ops/s
# Warmup Iteration   5: 2745423.751 ops/s
# Warmup Iteration   6: 3408266.020 ops/s
# Warmup Iteration   7: 3428160.765 ops/s
# Warmup Iteration   8: 3396144.365 ops/s
# Warmup Iteration   9: 3402493.895 ops/s
# Warmup Iteration  10: 3352258.566 ops/s
# Warmup Iteration  11: 3463750.343 ops/s
# Warmup Iteration  12: 3410068.069 ops/s
# Warmup Iteration  13: 3374781.785 ops/s
# Warmup Iteration  14: 3364020.226 ops/s
# Warmup Iteration  15: 3390735.580 ops/s
# Warmup Iteration  16: 3383444.781 ops/s
# Warmup Iteration  17: 3393329.056 ops/s
# Warmup Iteration  18: 3387278.281 ops/s
# Warmup Iteration  19: 3316931.974 ops/s
# Warmup Iteration  20: 3271084.637 ops/s
# Warmup Iteration  21: 3363754.389 ops/s
# Warmup Iteration  22: 3322527.656 ops/s
# Warmup Iteration  23: 3251692.694 ops/s
# Warmup Iteration  24: 3298297.693 ops/s
# Warmup Iteration  25: 3396699.344 ops/s
# Warmup Iteration  26: 3410470.295 ops/s
# Warmup Iteration  27: 3373176.857 ops/s
# Warmup Iteration  28: 3384970.125 ops/s
# Warmup Iteration  29: 3258524.191 ops/s
# Warmup Iteration  30: 3317787.984 ops/s
Iteration   1: 3386338.527 ops/s
Iteration   2: 3418029.152 ops/s
Iteration   3: 3396901.327 ops/s
Iteration   4: 3373560.428 ops/s
Iteration   5: 3222395.448 ops/s
Iteration   6: 3294014.120 ops/s
Iteration   7: 3299104.787 ops/s
Iteration   8: 3473332.264 ops/s
Iteration   9: 3464229.867 ops/s
Iteration  10: 3405914.674 ops/s
Iteration  11: 3244063.851 ops/s
Iteration  12: 3402029.666 ops/s
Iteration  13: 3291040.531 ops/s
Iteration  14: 3343970.118 ops/s
Iteration  15: 3429841.215 ops/s
Iteration  16: 3217830.704 ops/s
Iteration  17: 3382663.444 ops/s
Iteration  18: 3360294.285 ops/s
Iteration  19: 3281261.234 ops/s
Iteration  20: 3200356.763 ops/s
Iteration  21: 3346471.414 ops/s
Iteration  22: 3442169.523 ops/s
Iteration  23: 3470664.805 ops/s
Iteration  24: 3451691.100 ops/s
Iteration  25: 3270462.388 ops/s
Iteration  26: 3247184.564 ops/s
Iteration  27: 3415828.003 ops/s
Iteration  28: 3426266.005 ops/s
Iteration  29: 3257189.668 ops/s
Iteration  30: 3377776.595 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSet":
  3353095.882 ±(99.9%) 55653.658 ops/s [Average]
  (min, avg, max) = (3200356.763, 3353095.882, 3473332.264), stdev = 83299.781
  CI (99.9%): [3297442.224, 3408749.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSet  thrpt   30  3353095.882 ± 55653.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 272835.994 ops/s
# Warmup Iteration   2: 558978.779 ops/s
# Warmup Iteration   3: 623091.703 ops/s
# Warmup Iteration   4: 627531.369 ops/s
# Warmup Iteration   5: 521138.084 ops/s
# Warmup Iteration   6: 623707.838 ops/s
# Warmup Iteration   7: 611628.548 ops/s
# Warmup Iteration   8: 622947.018 ops/s
# Warmup Iteration   9: 625328.006 ops/s
# Warmup Iteration  10: 629524.743 ops/s
# Warmup Iteration  11: 623478.993 ops/s
# Warmup Iteration  12: 629467.605 ops/s
# Warmup Iteration  13: 624090.586 ops/s
# Warmup Iteration  14: 623842.213 ops/s
# Warmup Iteration  15: 625144.704 ops/s
# Warmup Iteration  16: 625625.987 ops/s
# Warmup Iteration  17: 625944.821 ops/s
# Warmup Iteration  18: 623148.988 ops/s
# Warmup Iteration  19: 626446.505 ops/s
# Warmup Iteration  20: 618956.543 ops/s
# Warmup Iteration  21: 627031.794 ops/s
# Warmup Iteration  22: 606350.090 ops/s
# Warmup Iteration  23: 607838.931 ops/s
# Warmup Iteration  24: 593501.308 ops/s
# Warmup Iteration  25: 623920.895 ops/s
# Warmup Iteration  26: 629627.571 ops/s
# Warmup Iteration  27: 631300.937 ops/s
# Warmup Iteration  28: 622690.013 ops/s
# Warmup Iteration  29: 623821.167 ops/s
# Warmup Iteration  30: 625879.745 ops/s
Iteration   1: 617059.997 ops/s
Iteration   2: 623202.957 ops/s
Iteration   3: 619079.240 ops/s
Iteration   4: 609198.403 ops/s
Iteration   5: 608241.742 ops/s
Iteration   6: 616163.820 ops/s
Iteration   7: 629772.953 ops/s
Iteration   8: 622027.039 ops/s
Iteration   9: 589854.038 ops/s
Iteration  10: 593944.600 ops/s
Iteration  11: 590422.361 ops/s
Iteration  12: 597158.674 ops/s
Iteration  13: 607817.529 ops/s
Iteration  14: 622822.379 ops/s
Iteration  15: 626655.069 ops/s
Iteration  16: 600936.653 ops/s
Iteration  17: 610908.215 ops/s
Iteration  18: 631952.568 ops/s
Iteration  19: 581126.293 ops/s
Iteration  20: 628980.681 ops/s
Iteration  21: 621266.165 ops/s
Iteration  22: 603231.374 ops/s
Iteration  23: 627658.243 ops/s
Iteration  24: 631070.520 ops/s
Iteration  25: 626702.503 ops/s
Iteration  26: 621236.332 ops/s
Iteration  27: 626936.420 ops/s
Iteration  28: 633322.451 ops/s
Iteration  29: 609912.397 ops/s
Iteration  30: 628955.713 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy":
  615253.911 ±(99.9%) 9607.599 ops/s [Average]
  (min, avg, max) = (581126.293, 615253.911, 633322.451), stdev = 14380.203
  CI (99.9%): [605646.312, 624861.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  615253.911 ± 9607.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431491.773 ops/s
# Warmup Iteration   2: 817081.095 ops/s
# Warmup Iteration   3: 928367.099 ops/s
# Warmup Iteration   4: 971976.038 ops/s
# Warmup Iteration   5: 958512.450 ops/s
# Warmup Iteration   6: 804218.079 ops/s
# Warmup Iteration   7: 955189.422 ops/s
# Warmup Iteration   8: 965449.147 ops/s
# Warmup Iteration   9: 968513.129 ops/s
# Warmup Iteration  10: 978325.994 ops/s
# Warmup Iteration  11: 933799.785 ops/s
# Warmup Iteration  12: 979861.212 ops/s
# Warmup Iteration  13: 987187.519 ops/s
# Warmup Iteration  14: 991334.056 ops/s
# Warmup Iteration  15: 976306.855 ops/s
# Warmup Iteration  16: 977131.663 ops/s
# Warmup Iteration  17: 978588.634 ops/s
# Warmup Iteration  18: 970405.351 ops/s
# Warmup Iteration  19: 969536.175 ops/s
# Warmup Iteration  20: 918268.732 ops/s
# Warmup Iteration  21: 965982.055 ops/s
# Warmup Iteration  22: 979897.080 ops/s
# Warmup Iteration  23: 970258.875 ops/s
# Warmup Iteration  24: 932701.536 ops/s
# Warmup Iteration  25: 969940.323 ops/s
# Warmup Iteration  26: 960654.443 ops/s
# Warmup Iteration  27: 954508.478 ops/s
# Warmup Iteration  28: 973433.272 ops/s
# Warmup Iteration  29: 926272.250 ops/s
# Warmup Iteration  30: 972445.695 ops/s
Iteration   1: 960209.280 ops/s
Iteration   2: 930188.824 ops/s
Iteration   3: 933751.869 ops/s
Iteration   4: 947985.259 ops/s
Iteration   5: 948584.308 ops/s
Iteration   6: 915745.414 ops/s
Iteration   7: 945327.275 ops/s
Iteration   8: 920313.466 ops/s
Iteration   9: 931575.499 ops/s
Iteration  10: 929649.010 ops/s
Iteration  11: 967739.153 ops/s
Iteration  12: 980115.068 ops/s
Iteration  13: 986623.611 ops/s
Iteration  14: 983624.130 ops/s
Iteration  15: 965705.987 ops/s
Iteration  16: 982007.581 ops/s
Iteration  17: 950004.557 ops/s
Iteration  18: 973906.496 ops/s
Iteration  19: 940162.942 ops/s
Iteration  20: 979451.422 ops/s
Iteration  21: 962194.558 ops/s
Iteration  22: 964977.004 ops/s
Iteration  23: 966863.078 ops/s
Iteration  24: 979533.068 ops/s
Iteration  25: 942991.813 ops/s
Iteration  26: 968388.717 ops/s
Iteration  27: 989304.328 ops/s
Iteration  28: 971041.378 ops/s
Iteration  29: 979051.526 ops/s
Iteration  30: 971601.076 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  958953.923 ±(99.9%) 14094.968 ops/s [Average]
  (min, avg, max) = (915745.414, 958953.923, 989304.328), stdev = 21096.687
  CI (99.9%): [944858.955, 973048.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  958953.923 ± 14094.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 466403.050 ops/s
# Warmup Iteration   2: 969728.460 ops/s
# Warmup Iteration   3: 1073912.717 ops/s
# Warmup Iteration   4: 1096300.687 ops/s
# Warmup Iteration   5: 910445.166 ops/s
# Warmup Iteration   6: 1089091.548 ops/s
# Warmup Iteration   7: 1068139.333 ops/s
# Warmup Iteration   8: 1090720.758 ops/s
# Warmup Iteration   9: 1050100.937 ops/s
# Warmup Iteration  10: 1036478.230 ops/s
# Warmup Iteration  11: 1096101.479 ops/s
# Warmup Iteration  12: 1090435.729 ops/s
# Warmup Iteration  13: 1059376.658 ops/s
# Warmup Iteration  14: 1091224.095 ops/s
# Warmup Iteration  15: 1100074.683 ops/s
# Warmup Iteration  16: 1093048.246 ops/s
# Warmup Iteration  17: 1094184.293 ops/s
# Warmup Iteration  18: 1074600.047 ops/s
# Warmup Iteration  19: 1073606.917 ops/s
# Warmup Iteration  20: 1097297.955 ops/s
# Warmup Iteration  21: 1089640.684 ops/s
# Warmup Iteration  22: 1083209.696 ops/s
# Warmup Iteration  23: 1084487.031 ops/s
# Warmup Iteration  24: 1098788.787 ops/s
# Warmup Iteration  25: 1109019.134 ops/s
# Warmup Iteration  26: 1090665.189 ops/s
# Warmup Iteration  27: 1093069.367 ops/s
# Warmup Iteration  28: 1080093.667 ops/s
# Warmup Iteration  29: 1113228.300 ops/s
# Warmup Iteration  30: 1061378.731 ops/s
Iteration   1: 1083997.001 ops/s
Iteration   2: 1076189.406 ops/s
Iteration   3: 1055060.224 ops/s
Iteration   4: 1056491.860 ops/s
Iteration   5: 1067799.510 ops/s
Iteration   6: 1053714.230 ops/s
Iteration   7: 1062625.516 ops/s
Iteration   8: 1093839.495 ops/s
Iteration   9: 1093617.314 ops/s
Iteration  10: 1099325.664 ops/s
Iteration  11: 1096969.750 ops/s
Iteration  12: 1093984.263 ops/s
Iteration  13: 1081583.502 ops/s
Iteration  14: 1099676.732 ops/s
Iteration  15: 1083694.109 ops/s
Iteration  16: 1043000.002 ops/s
Iteration  17: 1035898.573 ops/s
Iteration  18: 1108735.429 ops/s
Iteration  19: 1101383.644 ops/s
Iteration  20: 1094704.500 ops/s
Iteration  21: 1073881.557 ops/s
Iteration  22: 1075595.384 ops/s
Iteration  23: 1085677.787 ops/s
Iteration  24: 1081849.131 ops/s
Iteration  25: 1099726.680 ops/s
Iteration  26: 1092224.551 ops/s
Iteration  27: 1087570.683 ops/s
Iteration  28: 1097852.244 ops/s
Iteration  29: 1079910.427 ops/s
Iteration  30: 1096141.048 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1081757.341 ±(99.9%) 12389.301 ops/s [Average]
  (min, avg, max) = (1035898.573, 1081757.341, 1108735.429), stdev = 18543.724
  CI (99.9%): [1069368.040, 1094146.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1081757.341 ± 12389.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 401803.337 ops/s
# Warmup Iteration   2: 468014.665 ops/s
# Warmup Iteration   3: 575687.440 ops/s
# Warmup Iteration   4: 604181.571 ops/s
# Warmup Iteration   5: 606169.913 ops/s
# Warmup Iteration   6: 603563.447 ops/s
# Warmup Iteration   7: 614098.077 ops/s
# Warmup Iteration   8: 600394.022 ops/s
# Warmup Iteration   9: 627481.576 ops/s
# Warmup Iteration  10: 631050.877 ops/s
# Warmup Iteration  11: 605700.063 ops/s
# Warmup Iteration  12: 498555.447 ops/s
# Warmup Iteration  13: 633495.019 ops/s
# Warmup Iteration  14: 638396.589 ops/s
# Warmup Iteration  15: 636099.931 ops/s
# Warmup Iteration  16: 610242.980 ops/s
# Warmup Iteration  17: 627498.368 ops/s
# Warmup Iteration  18: 636980.118 ops/s
# Warmup Iteration  19: 628196.497 ops/s
# Warmup Iteration  20: 640016.205 ops/s
# Warmup Iteration  21: 654711.271 ops/s
# Warmup Iteration  22: 632929.043 ops/s
# Warmup Iteration  23: 627356.103 ops/s
# Warmup Iteration  24: 638963.363 ops/s
# Warmup Iteration  25: 629002.291 ops/s
# Warmup Iteration  26: 649104.780 ops/s
# Warmup Iteration  27: 660272.790 ops/s
# Warmup Iteration  28: 654403.031 ops/s
# Warmup Iteration  29: 657349.016 ops/s
# Warmup Iteration  30: 655294.236 ops/s
Iteration   1: 651207.789 ops/s
Iteration   2: 657562.229 ops/s
Iteration   3: 647958.561 ops/s
Iteration   4: 657791.560 ops/s
Iteration   5: 658412.724 ops/s
Iteration   6: 657687.164 ops/s
Iteration   7: 669178.601 ops/s
Iteration   8: 672909.995 ops/s
Iteration   9: 664432.763 ops/s
Iteration  10: 658612.444 ops/s
Iteration  11: 664152.460 ops/s
Iteration  12: 665175.925 ops/s
Iteration  13: 656194.744 ops/s
Iteration  14: 651962.214 ops/s
Iteration  15: 656811.616 ops/s
Iteration  16: 657769.632 ops/s
Iteration  17: 663676.621 ops/s
Iteration  18: 658059.574 ops/s
Iteration  19: 663480.253 ops/s
Iteration  20: 660241.800 ops/s
Iteration  21: 672979.803 ops/s
Iteration  22: 671796.417 ops/s
Iteration  23: 669977.911 ops/s
Iteration  24: 669785.607 ops/s
Iteration  25: 666628.122 ops/s
Iteration  26: 670479.962 ops/s
Iteration  27: 669041.219 ops/s
Iteration  28: 665890.180 ops/s
Iteration  29: 665017.597 ops/s
Iteration  30: 662464.562 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null":
  662578.002 ±(99.9%) 4449.445 ops/s [Average]
  (min, avg, max) = (647958.561, 662578.002, 672979.803), stdev = 6659.721
  CI (99.9%): [658128.556, 667027.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  662578.002 ± 4449.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782044.755 ops/s
# Warmup Iteration   2: 1486318.969 ops/s
# Warmup Iteration   3: 1639508.605 ops/s
# Warmup Iteration   4: 1641683.177 ops/s
# Warmup Iteration   5: 1419720.520 ops/s
# Warmup Iteration   6: 1574053.449 ops/s
# Warmup Iteration   7: 1627911.087 ops/s
# Warmup Iteration   8: 1628020.218 ops/s
# Warmup Iteration   9: 1630542.309 ops/s
# Warmup Iteration  10: 1628284.760 ops/s
# Warmup Iteration  11: 1630515.755 ops/s
# Warmup Iteration  12: 1630569.533 ops/s
# Warmup Iteration  13: 1626750.582 ops/s
# Warmup Iteration  14: 1616402.085 ops/s
# Warmup Iteration  15: 1629225.638 ops/s
# Warmup Iteration  16: 1624765.693 ops/s
# Warmup Iteration  17: 1644516.375 ops/s
# Warmup Iteration  18: 1646074.736 ops/s
# Warmup Iteration  19: 1648591.268 ops/s
# Warmup Iteration  20: 1647040.959 ops/s
# Warmup Iteration  21: 1645436.665 ops/s
# Warmup Iteration  22: 1649046.988 ops/s
# Warmup Iteration  23: 1646846.725 ops/s
# Warmup Iteration  24: 1645800.414 ops/s
# Warmup Iteration  25: 1646209.659 ops/s
# Warmup Iteration  26: 1649823.001 ops/s
# Warmup Iteration  27: 1650148.016 ops/s
# Warmup Iteration  28: 1643015.711 ops/s
# Warmup Iteration  29: 1650218.540 ops/s
# Warmup Iteration  30: 1649874.440 ops/s
Iteration   1: 1642451.031 ops/s
Iteration   2: 1651844.683 ops/s
Iteration   3: 1648541.839 ops/s
Iteration   4: 1636455.870 ops/s
Iteration   5: 1635958.813 ops/s
Iteration   6: 1636612.921 ops/s
Iteration   7: 1644295.858 ops/s
Iteration   8: 1640108.540 ops/s
Iteration   9: 1632021.558 ops/s
Iteration  10: 1638134.330 ops/s
Iteration  11: 1633867.762 ops/s
Iteration  12: 1648189.912 ops/s
Iteration  13: 1627829.149 ops/s
Iteration  14: 1642421.182 ops/s
Iteration  15: 1648741.928 ops/s
Iteration  16: 1649097.682 ops/s
Iteration  17: 1647412.549 ops/s
Iteration  18: 1621131.972 ops/s
Iteration  19: 1627035.908 ops/s
Iteration  20: 1641270.492 ops/s
Iteration  21: 1640111.246 ops/s
Iteration  22: 1647664.743 ops/s
Iteration  23: 1648290.412 ops/s
Iteration  24: 1650380.185 ops/s
Iteration  25: 1646053.323 ops/s
Iteration  26: 1644256.622 ops/s
Iteration  27: 1637795.104 ops/s
Iteration  28: 1647154.744 ops/s
Iteration  29: 1643321.315 ops/s
Iteration  30: 1647739.792 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy":
  1641539.716 ±(99.9%) 5099.665 ops/s [Average]
  (min, avg, max) = (1621131.972, 1641539.716, 1651844.683), stdev = 7632.939
  CI (99.9%): [1636440.050, 1646639.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1641539.716 ± 5099.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716072.006 ops/s
# Warmup Iteration   2: 1009445.566 ops/s
# Warmup Iteration   3: 1300163.323 ops/s
# Warmup Iteration   4: 1297243.125 ops/s
# Warmup Iteration   5: 1303995.160 ops/s
# Warmup Iteration   6: 1299607.665 ops/s
# Warmup Iteration   7: 1228316.729 ops/s
# Warmup Iteration   8: 1139363.788 ops/s
# Warmup Iteration   9: 1307366.966 ops/s
# Warmup Iteration  10: 1295353.427 ops/s
# Warmup Iteration  11: 1294620.211 ops/s
# Warmup Iteration  12: 1307411.599 ops/s
# Warmup Iteration  13: 1306000.889 ops/s
# Warmup Iteration  14: 1306972.162 ops/s
# Warmup Iteration  15: 1307255.145 ops/s
# Warmup Iteration  16: 1305797.020 ops/s
# Warmup Iteration  17: 1290264.691 ops/s
# Warmup Iteration  18: 1273230.789 ops/s
# Warmup Iteration  19: 1289548.822 ops/s
# Warmup Iteration  20: 1281222.821 ops/s
# Warmup Iteration  21: 1276850.358 ops/s
# Warmup Iteration  22: 1281596.346 ops/s
# Warmup Iteration  23: 1283894.637 ops/s
# Warmup Iteration  24: 1289940.412 ops/s
# Warmup Iteration  25: 1288066.082 ops/s
# Warmup Iteration  26: 1286303.279 ops/s
# Warmup Iteration  27: 1277085.680 ops/s
# Warmup Iteration  28: 1267725.199 ops/s
# Warmup Iteration  29: 1293044.312 ops/s
# Warmup Iteration  30: 1281847.976 ops/s
Iteration   1: 1268660.922 ops/s
Iteration   2: 1294555.191 ops/s
Iteration   3: 1269891.068 ops/s
Iteration   4: 1219163.715 ops/s
Iteration   5: 1229048.021 ops/s
Iteration   6: 1267291.427 ops/s
Iteration   7: 1284435.372 ops/s
Iteration   8: 1301374.064 ops/s
Iteration   9: 1285399.376 ops/s
Iteration  10: 1297410.266 ops/s
Iteration  11: 1274524.153 ops/s
Iteration  12: 1294418.150 ops/s
Iteration  13: 1285852.217 ops/s
Iteration  14: 1282440.962 ops/s
Iteration  15: 1291110.684 ops/s
Iteration  16: 1274338.589 ops/s
Iteration  17: 1281955.694 ops/s
Iteration  18: 1288176.698 ops/s
Iteration  19: 1282789.508 ops/s
Iteration  20: 1297225.586 ops/s
Iteration  21: 1279584.008 ops/s
Iteration  22: 1293392.888 ops/s
Iteration  23: 1284522.423 ops/s
Iteration  24: 1289066.244 ops/s
Iteration  25: 1289506.066 ops/s
Iteration  26: 1291961.796 ops/s
Iteration  27: 1283419.909 ops/s
Iteration  28: 1293876.773 ops/s
Iteration  29: 1288758.334 ops/s
Iteration  30: 1299641.815 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null":
  1282126.397 ±(99.9%) 12134.084 ops/s [Average]
  (min, avg, max) = (1219163.715, 1282126.397, 1301374.064), stdev = 18161.727
  CI (99.9%): [1269992.314, 1294260.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1282126.397 ± 12134.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 816860.163 ops/s
# Warmup Iteration   2: 1980080.903 ops/s
# Warmup Iteration   3: 2018434.951 ops/s
# Warmup Iteration   4: 1658505.962 ops/s
# Warmup Iteration   5: 2008326.826 ops/s
# Warmup Iteration   6: 2015160.436 ops/s
# Warmup Iteration   7: 2010831.979 ops/s
# Warmup Iteration   8: 1946167.451 ops/s
# Warmup Iteration   9: 2011907.839 ops/s
# Warmup Iteration  10: 2021977.566 ops/s
# Warmup Iteration  11: 2047931.001 ops/s
# Warmup Iteration  12: 1963699.088 ops/s
# Warmup Iteration  13: 1940873.060 ops/s
# Warmup Iteration  14: 1986211.802 ops/s
# Warmup Iteration  15: 1937957.707 ops/s
# Warmup Iteration  16: 1976384.119 ops/s
# Warmup Iteration  17: 2016067.154 ops/s
# Warmup Iteration  18: 1932129.584 ops/s
# Warmup Iteration  19: 1979432.031 ops/s
# Warmup Iteration  20: 1957210.514 ops/s
# Warmup Iteration  21: 1938801.934 ops/s
# Warmup Iteration  22: 2033245.452 ops/s
# Warmup Iteration  23: 2025252.604 ops/s
# Warmup Iteration  24: 1945382.851 ops/s
# Warmup Iteration  25: 2016350.568 ops/s
# Warmup Iteration  26: 2006209.780 ops/s
# Warmup Iteration  27: 2015822.202 ops/s
# Warmup Iteration  28: 2019225.308 ops/s
# Warmup Iteration  29: 2026041.512 ops/s
# Warmup Iteration  30: 2029317.811 ops/s
Iteration   1: 2025079.056 ops/s
Iteration   2: 2017392.287 ops/s
Iteration   3: 2006628.691 ops/s
Iteration   4: 2037684.582 ops/s
Iteration   5: 2040528.662 ops/s
Iteration   6: 2017523.400 ops/s
Iteration   7: 1997805.585 ops/s
Iteration   8: 1996242.817 ops/s
Iteration   9: 1984514.664 ops/s
Iteration  10: 1994419.143 ops/s
Iteration  11: 1936602.832 ops/s
Iteration  12: 1928022.776 ops/s
Iteration  13: 2006395.646 ops/s
Iteration  14: 1997134.777 ops/s
Iteration  15: 2009266.271 ops/s
Iteration  16: 2013522.835 ops/s
Iteration  17: 2037615.936 ops/s
Iteration  18: 2019672.092 ops/s
Iteration  19: 2016784.462 ops/s
Iteration  20: 1976521.736 ops/s
Iteration  21: 1989274.706 ops/s
Iteration  22: 1999957.505 ops/s
Iteration  23: 2007755.149 ops/s
Iteration  24: 2013054.018 ops/s
Iteration  25: 2021713.174 ops/s
Iteration  26: 1975161.480 ops/s
Iteration  27: 2006569.944 ops/s
Iteration  28: 1972951.826 ops/s
Iteration  29: 2002860.040 ops/s
Iteration  30: 2021775.627 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2002347.724 ±(99.9%) 17241.735 ops/s [Average]
  (min, avg, max) = (1928022.776, 2002347.724, 2040528.662), stdev = 25806.619
  CI (99.9%): [1985105.989, 2019589.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2002347.724 ± 17241.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1203697.706 ops/s
# Warmup Iteration   2: 2695594.480 ops/s
# Warmup Iteration   3: 2823091.007 ops/s
# Warmup Iteration   4: 2757845.413 ops/s
# Warmup Iteration   5: 2442892.408 ops/s
# Warmup Iteration   6: 2782976.388 ops/s
# Warmup Iteration   7: 2836231.953 ops/s
# Warmup Iteration   8: 2682099.212 ops/s
# Warmup Iteration   9: 2749900.040 ops/s
# Warmup Iteration  10: 2766623.260 ops/s
# Warmup Iteration  11: 2695933.802 ops/s
# Warmup Iteration  12: 2726579.940 ops/s
# Warmup Iteration  13: 2820746.224 ops/s
# Warmup Iteration  14: 2837974.868 ops/s
# Warmup Iteration  15: 2699849.848 ops/s
# Warmup Iteration  16: 2781192.520 ops/s
# Warmup Iteration  17: 2800678.177 ops/s
# Warmup Iteration  18: 2905410.808 ops/s
# Warmup Iteration  19: 2837994.679 ops/s
# Warmup Iteration  20: 2763464.159 ops/s
# Warmup Iteration  21: 2844505.695 ops/s
# Warmup Iteration  22: 2763342.217 ops/s
# Warmup Iteration  23: 2750690.424 ops/s
# Warmup Iteration  24: 2847385.465 ops/s
# Warmup Iteration  25: 2712677.851 ops/s
# Warmup Iteration  26: 2727426.121 ops/s
# Warmup Iteration  27: 2745050.555 ops/s
# Warmup Iteration  28: 2758479.973 ops/s
# Warmup Iteration  29: 2757205.050 ops/s
# Warmup Iteration  30: 2802680.119 ops/s
Iteration   1: 2818294.933 ops/s
Iteration   2: 2869736.241 ops/s
Iteration   3: 2843158.943 ops/s
Iteration   4: 2831895.205 ops/s
Iteration   5: 2879180.787 ops/s
Iteration   6: 2894237.371 ops/s
Iteration   7: 2893460.294 ops/s
Iteration   8: 2698259.153 ops/s
Iteration   9: 2795906.382 ops/s
Iteration  10: 2876747.869 ops/s
Iteration  11: 2875167.167 ops/s
Iteration  12: 2833966.109 ops/s
Iteration  13: 2886842.478 ops/s
Iteration  14: 2814769.596 ops/s
Iteration  15: 2776337.373 ops/s
Iteration  16: 2860039.865 ops/s
Iteration  17: 2871727.024 ops/s
Iteration  18: 2849845.645 ops/s
Iteration  19: 2858633.996 ops/s
Iteration  20: 2877608.735 ops/s
Iteration  21: 2829865.178 ops/s
Iteration  22: 2821035.404 ops/s
Iteration  23: 2727998.631 ops/s
Iteration  24: 2802831.847 ops/s
Iteration  25: 2868780.864 ops/s
Iteration  26: 2874466.894 ops/s
Iteration  27: 2839527.473 ops/s
Iteration  28: 2817498.474 ops/s
Iteration  29: 2864026.048 ops/s
Iteration  30: 2889971.920 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator":
  2841393.930 ±(99.9%) 31263.941 ops/s [Average]
  (min, avg, max) = (2698259.153, 2841393.930, 2894237.371), stdev = 46794.399
  CI (99.9%): [2810129.989, 2872657.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  2841393.930 ± 31263.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933277.191 ops/s
# Warmup Iteration   2: 1428577.717 ops/s
# Warmup Iteration   3: 1781476.651 ops/s
# Warmup Iteration   4: 1786650.297 ops/s
# Warmup Iteration   5: 1778329.731 ops/s
# Warmup Iteration   6: 1773680.511 ops/s
# Warmup Iteration   7: 1450032.660 ops/s
# Warmup Iteration   8: 1789384.895 ops/s
# Warmup Iteration   9: 1752611.801 ops/s
# Warmup Iteration  10: 1712150.686 ops/s
# Warmup Iteration  11: 1779163.312 ops/s
# Warmup Iteration  12: 1787829.274 ops/s
# Warmup Iteration  13: 1766551.007 ops/s
# Warmup Iteration  14: 1770029.932 ops/s
# Warmup Iteration  15: 1765346.620 ops/s
# Warmup Iteration  16: 1701276.746 ops/s
# Warmup Iteration  17: 1767448.195 ops/s
# Warmup Iteration  18: 1737676.232 ops/s
# Warmup Iteration  19: 1750477.636 ops/s
# Warmup Iteration  20: 1778385.043 ops/s
# Warmup Iteration  21: 1813114.802 ops/s
# Warmup Iteration  22: 1811933.549 ops/s
# Warmup Iteration  23: 1818445.129 ops/s
# Warmup Iteration  24: 1816937.070 ops/s
# Warmup Iteration  25: 1812282.807 ops/s
# Warmup Iteration  26: 1705311.786 ops/s
# Warmup Iteration  27: 1744994.394 ops/s
# Warmup Iteration  28: 1793773.592 ops/s
# Warmup Iteration  29: 1779824.047 ops/s
# Warmup Iteration  30: 1789218.852 ops/s
Iteration   1: 1796246.659 ops/s
Iteration   2: 1772413.883 ops/s
Iteration   3: 1790621.198 ops/s
Iteration   4: 1783240.261 ops/s
Iteration   5: 1789450.804 ops/s
Iteration   6: 1772826.374 ops/s
Iteration   7: 1794702.405 ops/s
Iteration   8: 1816681.102 ops/s
Iteration   9: 1810314.112 ops/s
Iteration  10: 1756914.724 ops/s
Iteration  11: 1785181.986 ops/s
Iteration  12: 1787266.479 ops/s
Iteration  13: 1758158.588 ops/s
Iteration  14: 1790526.350 ops/s
Iteration  15: 1769403.852 ops/s
Iteration  16: 1765688.782 ops/s
Iteration  17: 1778563.613 ops/s
Iteration  18: 1763794.225 ops/s
Iteration  19: 1778426.233 ops/s
Iteration  20: 1769475.295 ops/s
Iteration  21: 1751407.367 ops/s
Iteration  22: 1798160.443 ops/s
Iteration  23: 1751692.732 ops/s
Iteration  24: 1773432.945 ops/s
Iteration  25: 1771199.174 ops/s
Iteration  26: 1787931.052 ops/s
Iteration  27: 1781537.770 ops/s
Iteration  28: 1783670.884 ops/s
Iteration  29: 1764475.830 ops/s
Iteration  30: 1762222.616 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null":
  1778520.925 ±(99.9%) 10816.509 ops/s [Average]
  (min, avg, max) = (1751407.367, 1778520.925, 1816681.102), stdev = 16189.643
  CI (99.9%): [1767704.416, 1789337.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  1778520.925 ± 10816.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 456732.695 ops/s
# Warmup Iteration   2: 1029426.884 ops/s
# Warmup Iteration   3: 1089565.383 ops/s
# Warmup Iteration   4: 1084200.880 ops/s
# Warmup Iteration   5: 906304.387 ops/s
# Warmup Iteration   6: 1090599.329 ops/s
# Warmup Iteration   7: 1071971.060 ops/s
# Warmup Iteration   8: 1088632.557 ops/s
# Warmup Iteration   9: 1080878.388 ops/s
# Warmup Iteration  10: 1086458.160 ops/s
# Warmup Iteration  11: 1097685.532 ops/s
# Warmup Iteration  12: 1096392.723 ops/s
# Warmup Iteration  13: 1094663.410 ops/s
# Warmup Iteration  14: 1098154.287 ops/s
# Warmup Iteration  15: 1088992.979 ops/s
# Warmup Iteration  16: 1101471.359 ops/s
# Warmup Iteration  17: 1093858.446 ops/s
# Warmup Iteration  18: 1027677.195 ops/s
# Warmup Iteration  19: 1078574.283 ops/s
# Warmup Iteration  20: 1111086.380 ops/s
# Warmup Iteration  21: 1085696.615 ops/s
# Warmup Iteration  22: 1084943.104 ops/s
# Warmup Iteration  23: 1094228.430 ops/s
# Warmup Iteration  24: 1089314.259 ops/s
# Warmup Iteration  25: 1081157.834 ops/s
# Warmup Iteration  26: 1085197.601 ops/s
# Warmup Iteration  27: 1088773.039 ops/s
# Warmup Iteration  28: 1084152.589 ops/s
# Warmup Iteration  29: 1099738.809 ops/s
# Warmup Iteration  30: 1064266.384 ops/s
Iteration   1: 1085133.244 ops/s
Iteration   2: 1089355.624 ops/s
Iteration   3: 1063658.932 ops/s
Iteration   4: 1074722.021 ops/s
Iteration   5: 1073978.641 ops/s
Iteration   6: 1048226.286 ops/s
Iteration   7: 1041640.127 ops/s
Iteration   8: 1062285.377 ops/s
Iteration   9: 1036127.860 ops/s
Iteration  10: 1048456.748 ops/s
Iteration  11: 1080305.288 ops/s
Iteration  12: 1079675.204 ops/s
Iteration  13: 1073154.678 ops/s
Iteration  14: 1089306.328 ops/s
Iteration  15: 1088715.515 ops/s
Iteration  16: 1097224.087 ops/s
Iteration  17: 1087378.358 ops/s
Iteration  18: 1092641.061 ops/s
Iteration  19: 1091005.497 ops/s
Iteration  20: 1090584.284 ops/s
Iteration  21: 1089316.456 ops/s
Iteration  22: 1110363.771 ops/s
Iteration  23: 1102683.224 ops/s
Iteration  24: 1100204.253 ops/s
Iteration  25: 1103347.975 ops/s
Iteration  26: 1092480.085 ops/s
Iteration  27: 1085839.043 ops/s
Iteration  28: 1098296.757 ops/s
Iteration  29: 1080817.435 ops/s
Iteration  30: 1092611.029 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap":
  1081651.173 ±(99.9%) 12525.362 ops/s [Average]
  (min, avg, max) = (1036127.860, 1081651.173, 1110363.771), stdev = 18747.373
  CI (99.9%): [1069125.811, 1094176.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap  thrpt   30  1081651.173 ± 12525.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393177.264 ops/s
# Warmup Iteration   2: 705852.086 ops/s
# Warmup Iteration   3: 830915.229 ops/s
# Warmup Iteration   4: 831125.452 ops/s
# Warmup Iteration   5: 841396.141 ops/s
# Warmup Iteration   6: 712386.136 ops/s
# Warmup Iteration   7: 825410.558 ops/s
# Warmup Iteration   8: 801094.908 ops/s
# Warmup Iteration   9: 818907.897 ops/s
# Warmup Iteration  10: 842255.048 ops/s
# Warmup Iteration  11: 836242.896 ops/s
# Warmup Iteration  12: 817071.004 ops/s
# Warmup Iteration  13: 829622.540 ops/s
# Warmup Iteration  14: 808904.672 ops/s
# Warmup Iteration  15: 802551.265 ops/s
# Warmup Iteration  16: 817409.151 ops/s
# Warmup Iteration  17: 833145.912 ops/s
# Warmup Iteration  18: 841306.626 ops/s
# Warmup Iteration  19: 836213.985 ops/s
# Warmup Iteration  20: 847845.662 ops/s
# Warmup Iteration  21: 847358.416 ops/s
# Warmup Iteration  22: 842178.523 ops/s
# Warmup Iteration  23: 836599.599 ops/s
# Warmup Iteration  24: 836720.370 ops/s
# Warmup Iteration  25: 837667.568 ops/s
# Warmup Iteration  26: 844279.912 ops/s
# Warmup Iteration  27: 844062.653 ops/s
# Warmup Iteration  28: 837259.952 ops/s
# Warmup Iteration  29: 838328.857 ops/s
# Warmup Iteration  30: 842748.725 ops/s
Iteration   1: 835176.300 ops/s
Iteration   2: 834379.763 ops/s
Iteration   3: 839444.656 ops/s
Iteration   4: 828424.913 ops/s
Iteration   5: 841906.872 ops/s
Iteration   6: 836755.106 ops/s
Iteration   7: 844573.259 ops/s
Iteration   8: 806786.124 ops/s
Iteration   9: 787209.968 ops/s
Iteration  10: 839943.185 ops/s
Iteration  11: 843900.337 ops/s
Iteration  12: 854113.853 ops/s
Iteration  13: 852733.694 ops/s
Iteration  14: 853626.265 ops/s
Iteration  15: 854349.542 ops/s
Iteration  16: 855455.512 ops/s
Iteration  17: 858485.270 ops/s
Iteration  18: 851790.168 ops/s
Iteration  19: 858397.470 ops/s
Iteration  20: 851985.016 ops/s
Iteration  21: 850898.822 ops/s
Iteration  22: 853671.532 ops/s
Iteration  23: 834629.553 ops/s
Iteration  24: 853735.636 ops/s
Iteration  25: 853564.104 ops/s
Iteration  26: 846887.378 ops/s
Iteration  27: 814265.270 ops/s
Iteration  28: 825843.418 ops/s
Iteration  29: 794770.551 ops/s
Iteration  30: 823713.765 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy":
  839380.577 ±(99.9%) 12407.017 ops/s [Average]
  (min, avg, max) = (787209.968, 839380.577, 858485.270), stdev = 18570.241
  CI (99.9%): [826973.559, 851787.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  839380.577 ± 12407.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445273.433 ops/s
# Warmup Iteration   2: 971954.983 ops/s
# Warmup Iteration   3: 1039429.007 ops/s
# Warmup Iteration   4: 1021804.976 ops/s
# Warmup Iteration   5: 888030.386 ops/s
# Warmup Iteration   6: 1059826.440 ops/s
# Warmup Iteration   7: 1058008.552 ops/s
# Warmup Iteration   8: 1046525.913 ops/s
# Warmup Iteration   9: 1048868.757 ops/s
# Warmup Iteration  10: 1047377.195 ops/s
# Warmup Iteration  11: 1059025.158 ops/s
# Warmup Iteration  12: 1058338.507 ops/s
# Warmup Iteration  13: 1055583.926 ops/s
# Warmup Iteration  14: 1052621.169 ops/s
# Warmup Iteration  15: 1042509.769 ops/s
# Warmup Iteration  16: 1052451.433 ops/s
# Warmup Iteration  17: 1058721.689 ops/s
# Warmup Iteration  18: 1057713.319 ops/s
# Warmup Iteration  19: 1061725.456 ops/s
# Warmup Iteration  20: 1055623.090 ops/s
# Warmup Iteration  21: 1052611.427 ops/s
# Warmup Iteration  22: 1073369.017 ops/s
# Warmup Iteration  23: 1050967.118 ops/s
# Warmup Iteration  24: 1058782.080 ops/s
# Warmup Iteration  25: 1072951.669 ops/s
# Warmup Iteration  26: 1064273.708 ops/s
# Warmup Iteration  27: 1052918.899 ops/s
# Warmup Iteration  28: 1059168.629 ops/s
# Warmup Iteration  29: 1062670.327 ops/s
# Warmup Iteration  30: 1014710.839 ops/s
Iteration   1: 1012080.766 ops/s
Iteration   2: 1051054.779 ops/s
Iteration   3: 1042308.832 ops/s
Iteration   4: 1076692.976 ops/s
Iteration   5: 1077427.389 ops/s
Iteration   6: 1035102.169 ops/s
Iteration   7: 1018027.482 ops/s
Iteration   8: 1070355.910 ops/s
Iteration   9: 1068898.275 ops/s
Iteration  10: 1052986.508 ops/s
Iteration  11: 1048368.861 ops/s
Iteration  12: 986373.824 ops/s
Iteration  13: 1008110.080 ops/s
Iteration  14: 1065620.269 ops/s
Iteration  15: 1058769.957 ops/s
Iteration  16: 1046373.285 ops/s
Iteration  17: 1042138.231 ops/s
Iteration  18: 1041143.080 ops/s
Iteration  19: 1030431.235 ops/s
Iteration  20: 1056641.820 ops/s
Iteration  21: 1061023.252 ops/s
Iteration  22: 1058064.531 ops/s
Iteration  23: 1072553.388 ops/s
Iteration  24: 1065359.479 ops/s
Iteration  25: 1053124.274 ops/s
Iteration  26: 1038512.242 ops/s
Iteration  27: 1060276.820 ops/s
Iteration  28: 1004524.766 ops/s
Iteration  29: 1037334.945 ops/s
Iteration  30: 1020144.297 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1045327.457 ±(99.9%) 15365.017 ops/s [Average]
  (min, avg, max) = (986373.824, 1045327.457, 1077427.389), stdev = 22997.636
  CI (99.9%): [1029962.440, 1060692.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1045327.457 ± 15365.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484621.863 ops/s
# Warmup Iteration   2: 1001292.199 ops/s
# Warmup Iteration   3: 1104689.415 ops/s
# Warmup Iteration   4: 1110255.799 ops/s
# Warmup Iteration   5: 905807.953 ops/s
# Warmup Iteration   6: 1101203.766 ops/s
# Warmup Iteration   7: 1129673.056 ops/s
# Warmup Iteration   8: 1103723.546 ops/s
# Warmup Iteration   9: 1099605.327 ops/s
# Warmup Iteration  10: 1112741.023 ops/s
# Warmup Iteration  11: 1120849.230 ops/s
# Warmup Iteration  12: 1117121.592 ops/s
# Warmup Iteration  13: 1089690.353 ops/s
# Warmup Iteration  14: 1082718.575 ops/s
# Warmup Iteration  15: 1088660.473 ops/s
# Warmup Iteration  16: 1100192.458 ops/s
# Warmup Iteration  17: 1114317.017 ops/s
# Warmup Iteration  18: 1116223.024 ops/s
# Warmup Iteration  19: 1126043.166 ops/s
# Warmup Iteration  20: 1112930.342 ops/s
# Warmup Iteration  21: 1117859.618 ops/s
# Warmup Iteration  22: 1122338.739 ops/s
# Warmup Iteration  23: 1116455.667 ops/s
# Warmup Iteration  24: 1103166.007 ops/s
# Warmup Iteration  25: 1108565.634 ops/s
# Warmup Iteration  26: 1108104.657 ops/s
# Warmup Iteration  27: 1105521.311 ops/s
# Warmup Iteration  28: 1081014.238 ops/s
# Warmup Iteration  29: 1080041.092 ops/s
# Warmup Iteration  30: 1087725.887 ops/s
Iteration   1: 1115120.506 ops/s
Iteration   2: 1083772.460 ops/s
Iteration   3: 1067295.162 ops/s
Iteration   4: 1105448.783 ops/s
Iteration   5: 1081193.720 ops/s
Iteration   6: 1043289.490 ops/s
Iteration   7: 1064427.978 ops/s
Iteration   8: 1123387.929 ops/s
Iteration   9: 1104480.695 ops/s
Iteration  10: 1111315.756 ops/s
Iteration  11: 1109363.181 ops/s
Iteration  12: 1117096.182 ops/s
Iteration  13: 1067835.860 ops/s
Iteration  14: 1112304.318 ops/s
Iteration  15: 1130862.123 ops/s
Iteration  16: 1134048.854 ops/s
Iteration  17: 1108473.956 ops/s
Iteration  18: 1113227.576 ops/s
Iteration  19: 1110308.276 ops/s
Iteration  20: 1120339.695 ops/s
Iteration  21: 1114357.788 ops/s
Iteration  22: 1111750.483 ops/s
Iteration  23: 1127960.170 ops/s
Iteration  24: 1118109.101 ops/s
Iteration  25: 1120625.898 ops/s
Iteration  26: 1117351.941 ops/s
Iteration  27: 1113583.212 ops/s
Iteration  28: 1108477.219 ops/s
Iteration  29: 1129218.772 ops/s
Iteration  30: 1127905.550 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy":
  1107097.755 ±(99.9%) 14744.407 ops/s [Average]
  (min, avg, max) = (1043289.490, 1107097.755, 1134048.854), stdev = 22068.736
  CI (99.9%): [1092353.348, 1121842.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1107097.755 ± 14744.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622376.452 ops/s
# Warmup Iteration   2: 1545819.684 ops/s
# Warmup Iteration   3: 1627046.805 ops/s
# Warmup Iteration   4: 1356489.254 ops/s
# Warmup Iteration   5: 1642710.015 ops/s
# Warmup Iteration   6: 1626949.794 ops/s
# Warmup Iteration   7: 1634658.601 ops/s
# Warmup Iteration   8: 1623665.494 ops/s
# Warmup Iteration   9: 1632417.595 ops/s
# Warmup Iteration  10: 1639707.110 ops/s
# Warmup Iteration  11: 1633402.914 ops/s
# Warmup Iteration  12: 1642100.861 ops/s
# Warmup Iteration  13: 1641228.441 ops/s
# Warmup Iteration  14: 1628559.511 ops/s
# Warmup Iteration  15: 1608434.886 ops/s
# Warmup Iteration  16: 1628609.316 ops/s
# Warmup Iteration  17: 1641119.920 ops/s
# Warmup Iteration  18: 1646135.738 ops/s
# Warmup Iteration  19: 1652364.408 ops/s
# Warmup Iteration  20: 1646536.162 ops/s
# Warmup Iteration  21: 1647549.144 ops/s
# Warmup Iteration  22: 1628721.874 ops/s
# Warmup Iteration  23: 1644208.282 ops/s
# Warmup Iteration  24: 1637687.455 ops/s
# Warmup Iteration  25: 1545937.250 ops/s
# Warmup Iteration  26: 1585626.466 ops/s
# Warmup Iteration  27: 1618312.776 ops/s
# Warmup Iteration  28: 1636333.064 ops/s
# Warmup Iteration  29: 1638442.550 ops/s
# Warmup Iteration  30: 1659208.304 ops/s
Iteration   1: 1646388.366 ops/s
Iteration   2: 1647095.648 ops/s
Iteration   3: 1547264.292 ops/s
Iteration   4: 1642573.678 ops/s
Iteration   5: 1628951.059 ops/s
Iteration   6: 1630758.087 ops/s
Iteration   7: 1632810.815 ops/s
Iteration   8: 1600475.527 ops/s
Iteration   9: 1587428.915 ops/s
Iteration  10: 1574169.862 ops/s
Iteration  11: 1570622.151 ops/s
Iteration  12: 1565353.793 ops/s
Iteration  13: 1627175.743 ops/s
Iteration  14: 1572094.504 ops/s
Iteration  15: 1601946.782 ops/s
Iteration  16: 1609555.272 ops/s
Iteration  17: 1601589.641 ops/s
Iteration  18: 1617981.937 ops/s
Iteration  19: 1583475.768 ops/s
Iteration  20: 1649231.035 ops/s
Iteration  21: 1576922.562 ops/s
Iteration  22: 1623800.044 ops/s
Iteration  23: 1613662.500 ops/s
Iteration  24: 1608846.206 ops/s
Iteration  25: 1630390.995 ops/s
Iteration  26: 1651135.714 ops/s
Iteration  27: 1628092.823 ops/s
Iteration  28: 1628996.367 ops/s
Iteration  29: 1624620.291 ops/s
Iteration  30: 1629601.414 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1611767.060 ±(99.9%) 18900.728 ops/s [Average]
  (min, avg, max) = (1547264.292, 1611767.060, 1651135.714), stdev = 28289.722
  CI (99.9%): [1592866.332, 1630667.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1611767.060 ± 18900.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646280.186 ops/s
# Warmup Iteration   2: 1555773.491 ops/s
# Warmup Iteration   3: 1624484.174 ops/s
# Warmup Iteration   4: 1268647.576 ops/s
# Warmup Iteration   5: 1597192.738 ops/s
# Warmup Iteration   6: 1593021.777 ops/s
# Warmup Iteration   7: 1574116.109 ops/s
# Warmup Iteration   8: 1601136.464 ops/s
# Warmup Iteration   9: 1644409.123 ops/s
# Warmup Iteration  10: 1549369.216 ops/s
# Warmup Iteration  11: 1594162.048 ops/s
# Warmup Iteration  12: 1559933.418 ops/s
# Warmup Iteration  13: 1585512.301 ops/s
# Warmup Iteration  14: 1548712.589 ops/s
# Warmup Iteration  15: 1582067.601 ops/s
# Warmup Iteration  16: 1596306.671 ops/s
# Warmup Iteration  17: 1587452.247 ops/s
# Warmup Iteration  18: 1634029.579 ops/s
# Warmup Iteration  19: 1600936.692 ops/s
# Warmup Iteration  20: 1532110.040 ops/s
# Warmup Iteration  21: 1542353.190 ops/s
# Warmup Iteration  22: 1546138.995 ops/s
# Warmup Iteration  23: 1562467.981 ops/s
# Warmup Iteration  24: 1625822.350 ops/s
# Warmup Iteration  25: 1593450.650 ops/s
# Warmup Iteration  26: 1591701.680 ops/s
# Warmup Iteration  27: 1611723.194 ops/s
# Warmup Iteration  28: 1617773.908 ops/s
# Warmup Iteration  29: 1609083.232 ops/s
# Warmup Iteration  30: 1581449.006 ops/s
Iteration   1: 1647062.962 ops/s
Iteration   2: 1585380.483 ops/s
Iteration   3: 1622430.162 ops/s
Iteration   4: 1632506.384 ops/s
Iteration   5: 1545825.745 ops/s
Iteration   6: 1597918.658 ops/s
Iteration   7: 1529483.062 ops/s
Iteration   8: 1633621.374 ops/s
Iteration   9: 1630260.257 ops/s
Iteration  10: 1623502.275 ops/s
Iteration  11: 1546498.490 ops/s
Iteration  12: 1575829.452 ops/s
Iteration  13: 1580433.349 ops/s
Iteration  14: 1535998.835 ops/s
Iteration  15: 1618336.287 ops/s
Iteration  16: 1618466.666 ops/s
Iteration  17: 1605688.023 ops/s
Iteration  18: 1620947.631 ops/s
Iteration  19: 1645375.620 ops/s
Iteration  20: 1645674.779 ops/s
Iteration  21: 1626908.557 ops/s
Iteration  22: 1625198.032 ops/s
Iteration  23: 1597115.290 ops/s
Iteration  24: 1615102.101 ops/s
Iteration  25: 1610355.856 ops/s
Iteration  26: 1613326.234 ops/s
Iteration  27: 1632801.615 ops/s
Iteration  28: 1623229.424 ops/s
Iteration  29: 1611008.675 ops/s
Iteration  30: 1615178.327 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1607048.820 ±(99.9%) 21515.478 ops/s [Average]
  (min, avg, max) = (1529483.062, 1607048.820, 1647062.962), stdev = 32203.357
  CI (99.9%): [1585533.342, 1628564.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1607048.820 ± 21515.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 853233.296 ops/s
# Warmup Iteration   2: 1840750.649 ops/s
# Warmup Iteration   3: 2015422.577 ops/s
# Warmup Iteration   4: 1988699.108 ops/s
# Warmup Iteration   5: 1666443.530 ops/s
# Warmup Iteration   6: 2018523.064 ops/s
# Warmup Iteration   7: 2000871.999 ops/s
# Warmup Iteration   8: 2009740.619 ops/s
# Warmup Iteration   9: 2027088.006 ops/s
# Warmup Iteration  10: 1967663.747 ops/s
# Warmup Iteration  11: 2019007.024 ops/s
# Warmup Iteration  12: 2013138.820 ops/s
# Warmup Iteration  13: 2015455.881 ops/s
# Warmup Iteration  14: 2010311.402 ops/s
# Warmup Iteration  15: 2002599.980 ops/s
# Warmup Iteration  16: 2012185.317 ops/s
# Warmup Iteration  17: 2018264.148 ops/s
# Warmup Iteration  18: 2015446.743 ops/s
# Warmup Iteration  19: 2032769.869 ops/s
# Warmup Iteration  20: 1976003.146 ops/s
# Warmup Iteration  21: 1939695.970 ops/s
# Warmup Iteration  22: 1999328.958 ops/s
# Warmup Iteration  23: 2006717.078 ops/s
# Warmup Iteration  24: 1946845.858 ops/s
# Warmup Iteration  25: 2038753.456 ops/s
# Warmup Iteration  26: 1960561.563 ops/s
# Warmup Iteration  27: 2007318.084 ops/s
# Warmup Iteration  28: 2018002.287 ops/s
# Warmup Iteration  29: 2036903.487 ops/s
# Warmup Iteration  30: 2004575.028 ops/s
Iteration   1: 2003054.757 ops/s
Iteration   2: 2053744.011 ops/s
Iteration   3: 2059678.163 ops/s
Iteration   4: 2057739.251 ops/s
Iteration   5: 2046626.284 ops/s
Iteration   6: 1920147.397 ops/s
Iteration   7: 2008027.470 ops/s
Iteration   8: 1966923.645 ops/s
Iteration   9: 2025577.262 ops/s
Iteration  10: 1915674.247 ops/s
Iteration  11: 1934159.087 ops/s
Iteration  12: 1975387.420 ops/s
Iteration  13: 2011809.621 ops/s
Iteration  14: 1925847.238 ops/s
Iteration  15: 2026550.166 ops/s
Iteration  16: 1999044.324 ops/s
Iteration  17: 2013546.885 ops/s
Iteration  18: 2025604.839 ops/s
Iteration  19: 1996733.365 ops/s
Iteration  20: 2023875.455 ops/s
Iteration  21: 2027803.180 ops/s
Iteration  22: 1989834.617 ops/s
Iteration  23: 1902533.935 ops/s
Iteration  24: 2013946.104 ops/s
Iteration  25: 1937434.771 ops/s
Iteration  26: 2019196.132 ops/s
Iteration  27: 2000136.064 ops/s
Iteration  28: 2053642.982 ops/s
Iteration  29: 2010778.689 ops/s
Iteration  30: 1905677.415 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_with":
  1995024.493 ±(99.9%) 31866.424 ops/s [Average]
  (min, avg, max) = (1902533.935, 1995024.493, 2059678.163), stdev = 47696.167
  CI (99.9%): [1963158.068, 2026890.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_with  thrpt   30  1995024.493 ± 31866.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 608871.843 ops/s
# Warmup Iteration   2: 1258870.983 ops/s
# Warmup Iteration   3: 1321543.570 ops/s
# Warmup Iteration   4: 1362894.681 ops/s
# Warmup Iteration   5: 1079577.095 ops/s
# Warmup Iteration   6: 1343850.172 ops/s
# Warmup Iteration   7: 1373793.485 ops/s
# Warmup Iteration   8: 1381352.419 ops/s
# Warmup Iteration   9: 1382046.657 ops/s
# Warmup Iteration  10: 1380765.995 ops/s
# Warmup Iteration  11: 1402672.446 ops/s
# Warmup Iteration  12: 1372985.700 ops/s
# Warmup Iteration  13: 1376621.487 ops/s
# Warmup Iteration  14: 1391036.847 ops/s
# Warmup Iteration  15: 1366055.554 ops/s
# Warmup Iteration  16: 1368010.405 ops/s
# Warmup Iteration  17: 1401474.040 ops/s
# Warmup Iteration  18: 1347806.382 ops/s
# Warmup Iteration  19: 1363447.566 ops/s
# Warmup Iteration  20: 1364168.215 ops/s
# Warmup Iteration  21: 1319371.501 ops/s
# Warmup Iteration  22: 1321055.624 ops/s
# Warmup Iteration  23: 1321776.818 ops/s
# Warmup Iteration  24: 1381591.971 ops/s
# Warmup Iteration  25: 1389939.533 ops/s
# Warmup Iteration  26: 1309385.625 ops/s
# Warmup Iteration  27: 1314756.429 ops/s
# Warmup Iteration  28: 1387500.583 ops/s
# Warmup Iteration  29: 1394698.972 ops/s
# Warmup Iteration  30: 1352870.957 ops/s
Iteration   1: 1372139.557 ops/s
Iteration   2: 1375438.573 ops/s
Iteration   3: 1377318.971 ops/s
Iteration   4: 1388158.128 ops/s
Iteration   5: 1378783.561 ops/s
Iteration   6: 1374692.295 ops/s
Iteration   7: 1385665.199 ops/s
Iteration   8: 1353495.128 ops/s
Iteration   9: 1356659.887 ops/s
Iteration  10: 1334512.451 ops/s
Iteration  11: 1330576.693 ops/s
Iteration  12: 1303405.536 ops/s
Iteration  13: 1325640.527 ops/s
Iteration  14: 1329768.258 ops/s
Iteration  15: 1323660.586 ops/s
Iteration  16: 1365288.850 ops/s
Iteration  17: 1358201.340 ops/s
Iteration  18: 1350522.691 ops/s
Iteration  19: 1324875.546 ops/s
Iteration  20: 1328735.654 ops/s
Iteration  21: 1334690.166 ops/s
Iteration  22: 1395023.433 ops/s
Iteration  23: 1399469.971 ops/s
Iteration  24: 1338944.960 ops/s
Iteration  25: 1333678.270 ops/s
Iteration  26: 1340583.792 ops/s
Iteration  27: 1377017.241 ops/s
Iteration  28: 1314007.290 ops/s
Iteration  29: 1358618.594 ops/s
Iteration  30: 1325778.032 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withAll":
  1351845.039 ±(99.9%) 17433.774 ops/s [Average]
  (min, avg, max) = (1303405.536, 1351845.039, 1399469.971), stdev = 26094.054
  CI (99.9%): [1334411.265, 1369278.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withAll  thrpt   30  1351845.039 ± 17433.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1032852.091 ops/s
# Warmup Iteration   2: 2610595.235 ops/s
# Warmup Iteration   3: 2632814.423 ops/s
# Warmup Iteration   4: 2157601.165 ops/s
# Warmup Iteration   5: 2632474.362 ops/s
# Warmup Iteration   6: 2627679.581 ops/s
# Warmup Iteration   7: 2646005.135 ops/s
# Warmup Iteration   8: 2656345.684 ops/s
# Warmup Iteration   9: 2641734.452 ops/s
# Warmup Iteration  10: 2629144.606 ops/s
# Warmup Iteration  11: 2611866.442 ops/s
# Warmup Iteration  12: 2624907.727 ops/s
# Warmup Iteration  13: 2595973.505 ops/s
# Warmup Iteration  14: 2595762.794 ops/s
# Warmup Iteration  15: 2570396.783 ops/s
# Warmup Iteration  16: 2468681.086 ops/s
# Warmup Iteration  17: 2541611.405 ops/s
# Warmup Iteration  18: 2565261.448 ops/s
# Warmup Iteration  19: 2652196.357 ops/s
# Warmup Iteration  20: 2578053.404 ops/s
# Warmup Iteration  21: 2616516.527 ops/s
# Warmup Iteration  22: 2571268.229 ops/s
# Warmup Iteration  23: 2605047.327 ops/s
# Warmup Iteration  24: 2601820.644 ops/s
# Warmup Iteration  25: 2568284.288 ops/s
# Warmup Iteration  26: 2583371.786 ops/s
# Warmup Iteration  27: 2674236.483 ops/s
# Warmup Iteration  28: 2609145.951 ops/s
# Warmup Iteration  29: 2548024.221 ops/s
# Warmup Iteration  30: 2545216.603 ops/s
Iteration   1: 2536714.333 ops/s
Iteration   2: 2649845.998 ops/s
Iteration   3: 2662401.546 ops/s
Iteration   4: 2632489.943 ops/s
Iteration   5: 2616956.984 ops/s
Iteration   6: 2586557.655 ops/s
Iteration   7: 2601602.526 ops/s
Iteration   8: 2618066.846 ops/s
Iteration   9: 2647270.594 ops/s
Iteration  10: 2630057.405 ops/s
Iteration  11: 2643831.448 ops/s
Iteration  12: 2620400.260 ops/s
Iteration  13: 2664411.698 ops/s
Iteration  14: 2652241.637 ops/s
Iteration  15: 2659580.709 ops/s
Iteration  16: 2634992.303 ops/s
Iteration  17: 2553297.015 ops/s
Iteration  18: 2552741.017 ops/s
Iteration  19: 2559659.724 ops/s
Iteration  20: 2599646.760 ops/s
Iteration  21: 2604350.506 ops/s
Iteration  22: 2533171.616 ops/s
Iteration  23: 2487746.025 ops/s
Iteration  24: 2652268.527 ops/s
Iteration  25: 2652445.280 ops/s
Iteration  26: 2619807.581 ops/s
Iteration  27: 2621238.513 ops/s
Iteration  28: 2655048.876 ops/s
Iteration  29: 2627489.404 ops/s
Iteration  30: 2655772.818 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_without":
  2614403.518 ±(99.9%) 30260.490 ops/s [Average]
  (min, avg, max) = (2487746.025, 2614403.518, 2664411.698), stdev = 45292.481
  CI (99.9%): [2584143.028, 2644664.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_without  thrpt   30  2614403.518 ± 30260.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683398.471 ops/s
# Warmup Iteration   2: 1365369.071 ops/s
# Warmup Iteration   3: 1481956.695 ops/s
# Warmup Iteration   4: 1472486.613 ops/s
# Warmup Iteration   5: 1213458.601 ops/s
# Warmup Iteration   6: 1463079.652 ops/s
# Warmup Iteration   7: 1470008.139 ops/s
# Warmup Iteration   8: 1490341.209 ops/s
# Warmup Iteration   9: 1487874.009 ops/s
# Warmup Iteration  10: 1491050.934 ops/s
# Warmup Iteration  11: 1466749.729 ops/s
# Warmup Iteration  12: 1479634.561 ops/s
# Warmup Iteration  13: 1482918.666 ops/s
# Warmup Iteration  14: 1486312.492 ops/s
# Warmup Iteration  15: 1486467.245 ops/s
# Warmup Iteration  16: 1509036.040 ops/s
# Warmup Iteration  17: 1483359.703 ops/s
# Warmup Iteration  18: 1475584.118 ops/s
# Warmup Iteration  19: 1469763.498 ops/s
# Warmup Iteration  20: 1485530.772 ops/s
# Warmup Iteration  21: 1473632.360 ops/s
# Warmup Iteration  22: 1472316.581 ops/s
# Warmup Iteration  23: 1472991.825 ops/s
# Warmup Iteration  24: 1479265.531 ops/s
# Warmup Iteration  25: 1476159.677 ops/s
# Warmup Iteration  26: 1483336.767 ops/s
# Warmup Iteration  27: 1449031.856 ops/s
# Warmup Iteration  28: 1487605.440 ops/s
# Warmup Iteration  29: 1469150.889 ops/s
# Warmup Iteration  30: 1478858.722 ops/s
Iteration   1: 1478017.518 ops/s
Iteration   2: 1437545.822 ops/s
Iteration   3: 1393787.565 ops/s
Iteration   4: 1492949.517 ops/s
Iteration   5: 1494394.301 ops/s
Iteration   6: 1471282.246 ops/s
Iteration   7: 1490924.317 ops/s
Iteration   8: 1461774.854 ops/s
Iteration   9: 1465503.235 ops/s
Iteration  10: 1481595.323 ops/s
Iteration  11: 1462161.296 ops/s
Iteration  12: 1484623.168 ops/s
Iteration  13: 1475108.947 ops/s
Iteration  14: 1484464.169 ops/s
Iteration  15: 1392942.063 ops/s
Iteration  16: 1482778.626 ops/s
Iteration  17: 1433305.302 ops/s
Iteration  18: 1485486.959 ops/s
Iteration  19: 1470483.269 ops/s
Iteration  20: 1460874.975 ops/s
Iteration  21: 1384336.240 ops/s
Iteration  22: 1417210.925 ops/s
Iteration  23: 1442314.402 ops/s
Iteration  24: 1443322.735 ops/s
Iteration  25: 1498503.780 ops/s
Iteration  26: 1507209.571 ops/s
Iteration  27: 1497573.755 ops/s
Iteration  28: 1478265.042 ops/s
Iteration  29: 1478327.382 ops/s
Iteration  30: 1477292.389 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withoutAll":
  1464145.323 ±(99.9%) 21743.011 ops/s [Average]
  (min, avg, max) = (1384336.240, 1464145.323, 1507209.571), stdev = 32543.918
  CI (99.9%): [1442402.312, 1485888.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_withoutAll  thrpt   30  1464145.323 ± 21743.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98031.627 ops/s
# Warmup Iteration   2: 122751.429 ops/s
# Warmup Iteration   3: 165769.362 ops/s
# Warmup Iteration   4: 165203.828 ops/s
# Warmup Iteration   5: 162767.806 ops/s
# Warmup Iteration   6: 165552.087 ops/s
# Warmup Iteration   7: 168067.104 ops/s
# Warmup Iteration   8: 167524.568 ops/s
# Warmup Iteration   9: 167682.168 ops/s
# Warmup Iteration  10: 137017.119 ops/s
# Warmup Iteration  11: 165281.341 ops/s
# Warmup Iteration  12: 164918.193 ops/s
# Warmup Iteration  13: 165541.579 ops/s
# Warmup Iteration  14: 157574.703 ops/s
# Warmup Iteration  15: 161079.237 ops/s
# Warmup Iteration  16: 159654.815 ops/s
# Warmup Iteration  17: 164233.917 ops/s
# Warmup Iteration  18: 160730.223 ops/s
# Warmup Iteration  19: 168691.281 ops/s
# Warmup Iteration  20: 162285.512 ops/s
# Warmup Iteration  21: 162201.547 ops/s
# Warmup Iteration  22: 162436.968 ops/s
# Warmup Iteration  23: 166373.005 ops/s
# Warmup Iteration  24: 168056.184 ops/s
# Warmup Iteration  25: 166949.204 ops/s
# Warmup Iteration  26: 166618.467 ops/s
# Warmup Iteration  27: 169404.551 ops/s
# Warmup Iteration  28: 168049.096 ops/s
# Warmup Iteration  29: 171023.589 ops/s
# Warmup Iteration  30: 168392.714 ops/s
Iteration   1: 171597.693 ops/s
Iteration   2: 171670.031 ops/s
Iteration   3: 167271.812 ops/s
Iteration   4: 163522.777 ops/s
Iteration   5: 162022.579 ops/s
Iteration   6: 163714.109 ops/s
Iteration   7: 167508.717 ops/s
Iteration   8: 160980.233 ops/s
Iteration   9: 162539.684 ops/s
Iteration  10: 163753.178 ops/s
Iteration  11: 163351.655 ops/s
Iteration  12: 163082.590 ops/s
Iteration  13: 163280.696 ops/s
Iteration  14: 162917.807 ops/s
Iteration  15: 163427.200 ops/s
Iteration  16: 161636.910 ops/s
Iteration  17: 165466.562 ops/s
Iteration  18: 159682.424 ops/s
Iteration  19: 159434.136 ops/s
Iteration  20: 162484.962 ops/s
Iteration  21: 163332.951 ops/s
Iteration  22: 160593.438 ops/s
Iteration  23: 163348.075 ops/s
Iteration  24: 166853.716 ops/s
Iteration  25: 157628.245 ops/s
Iteration  26: 170031.762 ops/s
Iteration  27: 162421.848 ops/s
Iteration  28: 168711.974 ops/s
Iteration  29: 166942.795 ops/s
Iteration  30: 166734.627 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zip":
  164198.173 ±(99.9%) 2304.924 ops/s [Average]
  (min, avg, max) = (157628.245, 164198.173, 171670.031), stdev = 3449.902
  CI (99.9%): [161893.249, 166503.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zip  thrpt   30  164198.173 ± 2304.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 260991.467 ops/s
# Warmup Iteration   2: 419716.582 ops/s
# Warmup Iteration   3: 496337.144 ops/s
# Warmup Iteration   4: 506971.699 ops/s
# Warmup Iteration   5: 510883.097 ops/s
# Warmup Iteration   6: 508041.324 ops/s
# Warmup Iteration   7: 423846.548 ops/s
# Warmup Iteration   8: 509721.550 ops/s
# Warmup Iteration   9: 509391.896 ops/s
# Warmup Iteration  10: 488825.645 ops/s
# Warmup Iteration  11: 511543.592 ops/s
# Warmup Iteration  12: 513119.541 ops/s
# Warmup Iteration  13: 509182.326 ops/s
# Warmup Iteration  14: 513694.382 ops/s
# Warmup Iteration  15: 517187.029 ops/s
# Warmup Iteration  16: 492554.610 ops/s
# Warmup Iteration  17: 503349.538 ops/s
# Warmup Iteration  18: 503754.190 ops/s
# Warmup Iteration  19: 500352.767 ops/s
# Warmup Iteration  20: 506388.869 ops/s
# Warmup Iteration  21: 508907.113 ops/s
# Warmup Iteration  22: 507416.056 ops/s
# Warmup Iteration  23: 503187.978 ops/s
# Warmup Iteration  24: 503257.566 ops/s
# Warmup Iteration  25: 507282.347 ops/s
# Warmup Iteration  26: 485620.337 ops/s
# Warmup Iteration  27: 491198.824 ops/s
# Warmup Iteration  28: 489522.201 ops/s
# Warmup Iteration  29: 484254.953 ops/s
# Warmup Iteration  30: 486509.897 ops/s
Iteration   1: 511058.765 ops/s
Iteration   2: 509413.338 ops/s
Iteration   3: 512281.407 ops/s
Iteration   4: 502954.901 ops/s
Iteration   5: 505428.021 ops/s
Iteration   6: 506308.404 ops/s
Iteration   7: 500859.095 ops/s
Iteration   8: 482912.739 ops/s
Iteration   9: 482616.305 ops/s
Iteration  10: 489300.155 ops/s
Iteration  11: 479436.924 ops/s
Iteration  12: 484820.409 ops/s
Iteration  13: 481794.536 ops/s
Iteration  14: 506306.937 ops/s
Iteration  15: 486533.675 ops/s
Iteration  16: 482621.765 ops/s
Iteration  17: 475994.361 ops/s
Iteration  18: 508787.236 ops/s
Iteration  19: 500910.792 ops/s
Iteration  20: 500561.817 ops/s
Iteration  21: 506564.741 ops/s
Iteration  22: 511672.530 ops/s
Iteration  23: 506789.043 ops/s
Iteration  24: 505076.752 ops/s
Iteration  25: 506296.839 ops/s
Iteration  26: 508159.754 ops/s
Iteration  27: 507047.356 ops/s
Iteration  28: 499212.894 ops/s
Iteration  29: 512728.567 ops/s
Iteration  30: 513614.065 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex":
  499602.137 ±(99.9%) 7907.079 ops/s [Average]
  (min, avg, max) = (475994.361, 499602.137, 513614.065), stdev = 11834.944
  CI (99.9%): [491695.059, 507509.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  499602.137 ± 7907.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 800628.404 ops/s
# Warmup Iteration   2: 1384092.443 ops/s
# Warmup Iteration   3: 1537242.133 ops/s
# Warmup Iteration   4: 1547021.552 ops/s
# Warmup Iteration   5: 1546625.927 ops/s
# Warmup Iteration   6: 1296406.750 ops/s
# Warmup Iteration   7: 1550977.362 ops/s
# Warmup Iteration   8: 1559083.880 ops/s
# Warmup Iteration   9: 1546069.549 ops/s
# Warmup Iteration  10: 1562702.692 ops/s
# Warmup Iteration  11: 1552046.728 ops/s
# Warmup Iteration  12: 1557778.514 ops/s
# Warmup Iteration  13: 1552613.174 ops/s
# Warmup Iteration  14: 1543559.233 ops/s
# Warmup Iteration  15: 1484032.395 ops/s
# Warmup Iteration  16: 1564536.162 ops/s
# Warmup Iteration  17: 1578189.679 ops/s
# Warmup Iteration  18: 1577665.873 ops/s
# Warmup Iteration  19: 1531670.964 ops/s
# Warmup Iteration  20: 1531866.605 ops/s
# Warmup Iteration  21: 1544943.280 ops/s
# Warmup Iteration  22: 1572416.784 ops/s
# Warmup Iteration  23: 1548035.216 ops/s
# Warmup Iteration  24: 1527905.249 ops/s
# Warmup Iteration  25: 1462290.059 ops/s
# Warmup Iteration  26: 1565088.645 ops/s
# Warmup Iteration  27: 1560722.966 ops/s
# Warmup Iteration  28: 1553190.776 ops/s
# Warmup Iteration  29: 1557903.698 ops/s
# Warmup Iteration  30: 1557158.956 ops/s
Iteration   1: 1567537.234 ops/s
Iteration   2: 1536899.589 ops/s
Iteration   3: 1535259.913 ops/s
Iteration   4: 1540652.402 ops/s
Iteration   5: 1543877.662 ops/s
Iteration   6: 1498324.851 ops/s
Iteration   7: 1532689.495 ops/s
Iteration   8: 1541135.833 ops/s
Iteration   9: 1558659.532 ops/s
Iteration  10: 1534768.676 ops/s
Iteration  11: 1561070.400 ops/s
Iteration  12: 1559918.633 ops/s
Iteration  13: 1556151.272 ops/s
Iteration  14: 1556790.318 ops/s
Iteration  15: 1566857.700 ops/s
Iteration  16: 1556949.167 ops/s
Iteration  17: 1561452.629 ops/s
Iteration  18: 1549432.762 ops/s
Iteration  19: 1541815.537 ops/s
Iteration  20: 1533122.896 ops/s
Iteration  21: 1535630.947 ops/s
Iteration  22: 1544582.165 ops/s
Iteration  23: 1536305.061 ops/s
Iteration  24: 1542031.451 ops/s
Iteration  25: 1543488.306 ops/s
Iteration  26: 1514277.235 ops/s
Iteration  27: 1526982.514 ops/s
Iteration  28: 1557811.442 ops/s
Iteration  29: 1558766.407 ops/s
Iteration  30: 1562344.253 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAll":
  1545186.209 ±(99.9%) 10547.577 ops/s [Average]
  (min, avg, max) = (1498324.851, 1545186.209, 1567537.234), stdev = 15787.119
  CI (99.9%): [1534638.632, 1555733.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_addAll  thrpt   30  1545186.209 ± 10547.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388560.617 ops/s
# Warmup Iteration   2: 717328.489 ops/s
# Warmup Iteration   3: 769703.768 ops/s
# Warmup Iteration   4: 792877.978 ops/s
# Warmup Iteration   5: 747860.702 ops/s
# Warmup Iteration   6: 694991.078 ops/s
# Warmup Iteration   7: 802102.845 ops/s
# Warmup Iteration   8: 793352.862 ops/s
# Warmup Iteration   9: 791874.923 ops/s
# Warmup Iteration  10: 791505.451 ops/s
# Warmup Iteration  11: 794064.729 ops/s
# Warmup Iteration  12: 793985.226 ops/s
# Warmup Iteration  13: 796894.976 ops/s
# Warmup Iteration  14: 798242.063 ops/s
# Warmup Iteration  15: 788786.417 ops/s
# Warmup Iteration  16: 804472.951 ops/s
# Warmup Iteration  17: 774661.520 ops/s
# Warmup Iteration  18: 777314.784 ops/s
# Warmup Iteration  19: 772400.230 ops/s
# Warmup Iteration  20: 796950.406 ops/s
# Warmup Iteration  21: 803678.045 ops/s
# Warmup Iteration  22: 798981.657 ops/s
# Warmup Iteration  23: 799748.042 ops/s
# Warmup Iteration  24: 799303.791 ops/s
# Warmup Iteration  25: 791538.155 ops/s
# Warmup Iteration  26: 779776.269 ops/s
# Warmup Iteration  27: 804667.478 ops/s
# Warmup Iteration  28: 776734.123 ops/s
# Warmup Iteration  29: 789043.880 ops/s
# Warmup Iteration  30: 788147.925 ops/s
Iteration   1: 797193.322 ops/s
Iteration   2: 800726.647 ops/s
Iteration   3: 803777.477 ops/s
Iteration   4: 796704.448 ops/s
Iteration   5: 790700.481 ops/s
Iteration   6: 781666.076 ops/s
Iteration   7: 790431.296 ops/s
Iteration   8: 791865.435 ops/s
Iteration   9: 791355.224 ops/s
Iteration  10: 794195.980 ops/s
Iteration  11: 789254.447 ops/s
Iteration  12: 795255.424 ops/s
Iteration  13: 795080.531 ops/s
Iteration  14: 796565.051 ops/s
Iteration  15: 794541.959 ops/s
Iteration  16: 795029.032 ops/s
Iteration  17: 794218.466 ops/s
Iteration  18: 770711.850 ops/s
Iteration  19: 794614.507 ops/s
Iteration  20: 806234.813 ops/s
Iteration  21: 794826.584 ops/s
Iteration  22: 797846.344 ops/s
Iteration  23: 803512.725 ops/s
Iteration  24: 801644.710 ops/s
Iteration  25: 790471.994 ops/s
Iteration  26: 788313.854 ops/s
Iteration  27: 796674.746 ops/s
Iteration  28: 801030.299 ops/s
Iteration  29: 801381.742 ops/s
Iteration  30: 809528.824 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addAllIterable":
  795178.476 ±(99.9%) 4948.774 ops/s [Average]
  (min, avg, max) = (770711.850, 795178.476, 809528.824), stdev = 7407.093
  CI (99.9%): [790229.702, 800127.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  795178.476 ± 4948.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 212249.548 ops/s
# Warmup Iteration   2: 321398.691 ops/s
# Warmup Iteration   3: 383597.589 ops/s
# Warmup Iteration   4: 383593.266 ops/s
# Warmup Iteration   5: 384055.016 ops/s
# Warmup Iteration   6: 383710.327 ops/s
# Warmup Iteration   7: 345075.669 ops/s
# Warmup Iteration   8: 365768.846 ops/s
# Warmup Iteration   9: 371065.471 ops/s
# Warmup Iteration  10: 371392.563 ops/s
# Warmup Iteration  11: 387867.494 ops/s
# Warmup Iteration  12: 389740.797 ops/s
# Warmup Iteration  13: 387317.597 ops/s
# Warmup Iteration  14: 390779.617 ops/s
# Warmup Iteration  15: 389309.857 ops/s
# Warmup Iteration  16: 386227.560 ops/s
# Warmup Iteration  17: 391699.901 ops/s
# Warmup Iteration  18: 391337.266 ops/s
# Warmup Iteration  19: 388232.835 ops/s
# Warmup Iteration  20: 374476.872 ops/s
# Warmup Iteration  21: 384224.778 ops/s
# Warmup Iteration  22: 388040.795 ops/s
# Warmup Iteration  23: 387032.182 ops/s
# Warmup Iteration  24: 385058.412 ops/s
# Warmup Iteration  25: 389147.404 ops/s
# Warmup Iteration  26: 384378.192 ops/s
# Warmup Iteration  27: 386400.291 ops/s
# Warmup Iteration  28: 383316.782 ops/s
# Warmup Iteration  29: 375468.519 ops/s
# Warmup Iteration  30: 389684.978 ops/s
Iteration   1: 397002.411 ops/s
Iteration   2: 385280.143 ops/s
Iteration   3: 375041.036 ops/s
Iteration   4: 391272.272 ops/s
Iteration   5: 390665.575 ops/s
Iteration   6: 367082.342 ops/s
Iteration   7: 374998.481 ops/s
Iteration   8: 372543.488 ops/s
Iteration   9: 383608.137 ops/s
Iteration  10: 381933.535 ops/s
Iteration  11: 388855.274 ops/s
Iteration  12: 386499.884 ops/s
Iteration  13: 387230.124 ops/s
Iteration  14: 382272.117 ops/s
Iteration  15: 392549.574 ops/s
Iteration  16: 384873.191 ops/s
Iteration  17: 385203.877 ops/s
Iteration  18: 383122.207 ops/s
Iteration  19: 384154.054 ops/s
Iteration  20: 382355.334 ops/s
Iteration  21: 385723.128 ops/s
Iteration  22: 383203.504 ops/s
Iteration  23: 382756.440 ops/s
Iteration  24: 383214.938 ops/s
Iteration  25: 388874.787 ops/s
Iteration  26: 378202.659 ops/s
Iteration  27: 383759.084 ops/s
Iteration  28: 390969.354 ops/s
Iteration  29: 391467.080 ops/s
Iteration  30: 390731.940 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences":
  384514.866 ±(99.9%) 4258.413 ops/s [Average]
  (min, avg, max) = (367082.342, 384514.866, 397002.411), stdev = 6373.792
  CI (99.9%): [380256.453, 388773.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  384514.866 ± 4258.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649411.445 ops/s
# Warmup Iteration   2: 679502.694 ops/s
# Warmup Iteration   3: 907466.362 ops/s
# Warmup Iteration   4: 909176.239 ops/s
# Warmup Iteration   5: 925989.323 ops/s
# Warmup Iteration   6: 953365.894 ops/s
# Warmup Iteration   7: 947000.424 ops/s
# Warmup Iteration   8: 963072.091 ops/s
# Warmup Iteration   9: 963798.664 ops/s
# Warmup Iteration  10: 944636.661 ops/s
# Warmup Iteration  11: 807783.790 ops/s
# Warmup Iteration  12: 961703.660 ops/s
# Warmup Iteration  13: 961390.695 ops/s
# Warmup Iteration  14: 944744.558 ops/s
# Warmup Iteration  15: 950386.645 ops/s
# Warmup Iteration  16: 954150.015 ops/s
# Warmup Iteration  17: 1006140.119 ops/s
# Warmup Iteration  18: 1024563.987 ops/s
# Warmup Iteration  19: 1012716.377 ops/s
# Warmup Iteration  20: 1010148.433 ops/s
# Warmup Iteration  21: 1008988.899 ops/s
# Warmup Iteration  22: 1007053.236 ops/s
# Warmup Iteration  23: 1014328.764 ops/s
# Warmup Iteration  24: 965904.963 ops/s
# Warmup Iteration  25: 961824.646 ops/s
# Warmup Iteration  26: 975799.329 ops/s
# Warmup Iteration  27: 958419.005 ops/s
# Warmup Iteration  28: 1014090.349 ops/s
# Warmup Iteration  29: 992637.698 ops/s
# Warmup Iteration  30: 981037.351 ops/s
Iteration   1: 996521.184 ops/s
Iteration   2: 1017353.724 ops/s
Iteration   3: 1015619.818 ops/s
Iteration   4: 1027933.343 ops/s
Iteration   5: 1019303.542 ops/s
Iteration   6: 1015565.526 ops/s
Iteration   7: 1026866.574 ops/s
Iteration   8: 992110.340 ops/s
Iteration   9: 1010444.919 ops/s
Iteration  10: 1015906.038 ops/s
Iteration  11: 1018958.749 ops/s
Iteration  12: 986439.623 ops/s
Iteration  13: 965712.704 ops/s
Iteration  14: 960854.333 ops/s
Iteration  15: 976120.656 ops/s
Iteration  16: 991593.737 ops/s
Iteration  17: 992259.485 ops/s
Iteration  18: 997121.373 ops/s
Iteration  19: 1003075.863 ops/s
Iteration  20: 967630.659 ops/s
Iteration  21: 1001044.596 ops/s
Iteration  22: 1001193.650 ops/s
Iteration  23: 950672.911 ops/s
Iteration  24: 975652.363 ops/s
Iteration  25: 977034.394 ops/s
Iteration  26: 1008792.195 ops/s
Iteration  27: 1012506.305 ops/s
Iteration  28: 1009954.184 ops/s
Iteration  29: 1001305.118 ops/s
Iteration  30: 1016963.359 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences_throws":
  998417.042 ±(99.9%) 13714.259 ops/s [Average]
  (min, avg, max) = (950672.911, 998417.042, 1027933.343), stdev = 20526.859
  CI (99.9%): [984702.783, 1012131.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  998417.042 ± 13714.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 926042.238 ops/s
# Warmup Iteration   2: 2013632.384 ops/s
# Warmup Iteration   3: 2082926.113 ops/s
# Warmup Iteration   4: 1999011.206 ops/s
# Warmup Iteration   5: 1705534.333 ops/s
# Warmup Iteration   6: 1935994.082 ops/s
# Warmup Iteration   7: 1951672.756 ops/s
# Warmup Iteration   8: 2008307.411 ops/s
# Warmup Iteration   9: 1955227.731 ops/s
# Warmup Iteration  10: 1954258.344 ops/s
# Warmup Iteration  11: 1979185.901 ops/s
# Warmup Iteration  12: 1921607.258 ops/s
# Warmup Iteration  13: 2020163.987 ops/s
# Warmup Iteration  14: 2027251.997 ops/s
# Warmup Iteration  15: 2046308.364 ops/s
# Warmup Iteration  16: 2066353.977 ops/s
# Warmup Iteration  17: 2025825.248 ops/s
# Warmup Iteration  18: 2041248.954 ops/s
# Warmup Iteration  19: 2013173.893 ops/s
# Warmup Iteration  20: 1950939.428 ops/s
# Warmup Iteration  21: 1986698.825 ops/s
# Warmup Iteration  22: 1962499.832 ops/s
# Warmup Iteration  23: 2045641.619 ops/s
# Warmup Iteration  24: 2101482.266 ops/s
# Warmup Iteration  25: 2019039.671 ops/s
# Warmup Iteration  26: 1952341.833 ops/s
# Warmup Iteration  27: 2002929.714 ops/s
# Warmup Iteration  28: 2038649.569 ops/s
# Warmup Iteration  29: 2026406.018 ops/s
# Warmup Iteration  30: 2021949.272 ops/s
Iteration   1: 1994468.115 ops/s
Iteration   2: 2051299.824 ops/s
Iteration   3: 2034607.519 ops/s
Iteration   4: 2057494.681 ops/s
Iteration   5: 2039613.986 ops/s
Iteration   6: 2071388.071 ops/s
Iteration   7: 2098739.043 ops/s
Iteration   8: 2138804.009 ops/s
Iteration   9: 2014409.653 ops/s
Iteration  10: 1943553.805 ops/s
Iteration  11: 2103082.851 ops/s
Iteration  12: 1935130.701 ops/s
Iteration  13: 1934205.343 ops/s
Iteration  14: 1998254.301 ops/s
Iteration  15: 2027531.044 ops/s
Iteration  16: 2040450.757 ops/s
Iteration  17: 2052072.938 ops/s
Iteration  18: 2007890.600 ops/s
Iteration  19: 2048952.103 ops/s
Iteration  20: 2093950.520 ops/s
Iteration  21: 2053303.825 ops/s
Iteration  22: 2001369.509 ops/s
Iteration  23: 2019890.750 ops/s
Iteration  24: 2021380.836 ops/s
Iteration  25: 2032748.892 ops/s
Iteration  26: 2101786.846 ops/s
Iteration  27: 2067970.375 ops/s
Iteration  28: 2048168.151 ops/s
Iteration  29: 2054429.064 ops/s
Iteration  30: 2043923.361 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByMutating":
  2037695.716 ±(99.9%) 31904.359 ops/s [Average]
  (min, avg, max) = (1934205.343, 2037695.716, 2138804.009), stdev = 47752.946
  CI (99.9%): [2005791.357, 2069600.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2037695.716 ± 31904.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670362.197 ops/s
# Warmup Iteration   2: 1284311.457 ops/s
# Warmup Iteration   3: 1371809.784 ops/s
# Warmup Iteration   4: 1380458.152 ops/s
# Warmup Iteration   5: 1194556.390 ops/s
# Warmup Iteration   6: 1403206.178 ops/s
# Warmup Iteration   7: 1419139.432 ops/s
# Warmup Iteration   8: 1436431.765 ops/s
# Warmup Iteration   9: 1411973.649 ops/s
# Warmup Iteration  10: 1407778.269 ops/s
# Warmup Iteration  11: 1434873.362 ops/s
# Warmup Iteration  12: 1410442.477 ops/s
# Warmup Iteration  13: 1347197.673 ops/s
# Warmup Iteration  14: 1343442.132 ops/s
# Warmup Iteration  15: 1356741.346 ops/s
# Warmup Iteration  16: 1376528.882 ops/s
# Warmup Iteration  17: 1380147.452 ops/s
# Warmup Iteration  18: 1419872.240 ops/s
# Warmup Iteration  19: 1425271.261 ops/s
# Warmup Iteration  20: 1393682.087 ops/s
# Warmup Iteration  21: 1341535.857 ops/s
# Warmup Iteration  22: 1373415.967 ops/s
# Warmup Iteration  23: 1390504.708 ops/s
# Warmup Iteration  24: 1418512.856 ops/s
# Warmup Iteration  25: 1417485.672 ops/s
# Warmup Iteration  26: 1393348.157 ops/s
# Warmup Iteration  27: 1401144.466 ops/s
# Warmup Iteration  28: 1418685.064 ops/s
# Warmup Iteration  29: 1378952.162 ops/s
# Warmup Iteration  30: 1415579.948 ops/s
Iteration   1: 1407522.440 ops/s
Iteration   2: 1395934.163 ops/s
Iteration   3: 1413846.531 ops/s
Iteration   4: 1342254.860 ops/s
Iteration   5: 1342838.353 ops/s
Iteration   6: 1327834.697 ops/s
Iteration   7: 1341649.412 ops/s
Iteration   8: 1359807.551 ops/s
Iteration   9: 1357476.776 ops/s
Iteration  10: 1352309.685 ops/s
Iteration  11: 1341215.541 ops/s
Iteration  12: 1310688.728 ops/s
Iteration  13: 1370123.889 ops/s
Iteration  14: 1429598.455 ops/s
Iteration  15: 1374227.195 ops/s
Iteration  16: 1405309.757 ops/s
Iteration  17: 1346000.817 ops/s
Iteration  18: 1417169.813 ops/s
Iteration  19: 1409212.732 ops/s
Iteration  20: 1409950.914 ops/s
Iteration  21: 1391013.780 ops/s
Iteration  22: 1363422.205 ops/s
Iteration  23: 1417307.231 ops/s
Iteration  24: 1403190.318 ops/s
Iteration  25: 1414776.558 ops/s
Iteration  26: 1410280.738 ops/s
Iteration  27: 1408766.425 ops/s
Iteration  28: 1410995.036 ops/s
Iteration  29: 1430074.338 ops/s
Iteration  30: 1368302.067 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1382436.700 ±(99.9%) 22663.800 ops/s [Average]
  (min, avg, max) = (1310688.728, 1382436.700, 1430074.338), stdev = 33922.111
  CI (99.9%): [1359772.900, 1405100.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1382436.700 ± 22663.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 932600.879 ops/s
# Warmup Iteration   2: 2018686.992 ops/s
# Warmup Iteration   3: 2066390.151 ops/s
# Warmup Iteration   4: 2114174.751 ops/s
# Warmup Iteration   5: 1794785.938 ops/s
# Warmup Iteration   6: 2008034.464 ops/s
# Warmup Iteration   7: 2077210.729 ops/s
# Warmup Iteration   8: 2092187.309 ops/s
# Warmup Iteration   9: 2095972.901 ops/s
# Warmup Iteration  10: 2078893.297 ops/s
# Warmup Iteration  11: 2081698.684 ops/s
# Warmup Iteration  12: 2129404.906 ops/s
# Warmup Iteration  13: 2121101.524 ops/s
# Warmup Iteration  14: 2128127.546 ops/s
# Warmup Iteration  15: 2108254.283 ops/s
# Warmup Iteration  16: 2130276.159 ops/s
# Warmup Iteration  17: 2122396.997 ops/s
# Warmup Iteration  18: 2137734.396 ops/s
# Warmup Iteration  19: 2140554.821 ops/s
# Warmup Iteration  20: 2120903.153 ops/s
# Warmup Iteration  21: 2088663.859 ops/s
# Warmup Iteration  22: 2122104.371 ops/s
# Warmup Iteration  23: 2106537.153 ops/s
# Warmup Iteration  24: 2148645.211 ops/s
# Warmup Iteration  25: 2116756.817 ops/s
# Warmup Iteration  26: 2099770.152 ops/s
# Warmup Iteration  27: 2096468.059 ops/s
# Warmup Iteration  28: 2083081.227 ops/s
# Warmup Iteration  29: 2137165.993 ops/s
# Warmup Iteration  30: 2152239.420 ops/s
Iteration   1: 2084247.670 ops/s
Iteration   2: 2094632.698 ops/s
Iteration   3: 2043348.242 ops/s
Iteration   4: 2080573.378 ops/s
Iteration   5: 2106222.541 ops/s
Iteration   6: 2023033.168 ops/s
Iteration   7: 2099907.666 ops/s
Iteration   8: 2149625.155 ops/s
Iteration   9: 2107081.109 ops/s
Iteration  10: 2119755.391 ops/s
Iteration  11: 2172055.576 ops/s
Iteration  12: 2151788.587 ops/s
Iteration  13: 2149248.446 ops/s
Iteration  14: 2136850.059 ops/s
Iteration  15: 2040401.867 ops/s
Iteration  16: 2005252.917 ops/s
Iteration  17: 2033699.267 ops/s
Iteration  18: 2056038.760 ops/s
Iteration  19: 2030050.497 ops/s
Iteration  20: 2081431.918 ops/s
Iteration  21: 2060771.170 ops/s
Iteration  22: 2021526.834 ops/s
Iteration  23: 2046133.753 ops/s
Iteration  24: 2065622.232 ops/s
Iteration  25: 2110896.398 ops/s
Iteration  26: 2040357.322 ops/s
Iteration  27: 2079362.107 ops/s
Iteration  28: 2101684.617 ops/s
Iteration  29: 2103814.360 ops/s
Iteration  30: 2041739.339 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfy":
  2081238.435 ±(99.9%) 29676.272 ops/s [Average]
  (min, avg, max) = (2005252.917, 2081238.435, 2172055.576), stdev = 44418.051
  CI (99.9%): [2051562.162, 2110914.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  2081238.435 ± 29676.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 916106.599 ops/s
# Warmup Iteration   2: 2034349.988 ops/s
# Warmup Iteration   3: 2124450.337 ops/s
# Warmup Iteration   4: 1919843.535 ops/s
# Warmup Iteration   5: 1855383.551 ops/s
# Warmup Iteration   6: 2067989.701 ops/s
# Warmup Iteration   7: 2082911.485 ops/s
# Warmup Iteration   8: 2086375.415 ops/s
# Warmup Iteration   9: 2126686.269 ops/s
# Warmup Iteration  10: 2111257.161 ops/s
# Warmup Iteration  11: 2115630.818 ops/s
# Warmup Iteration  12: 2068020.352 ops/s
# Warmup Iteration  13: 2091189.645 ops/s
# Warmup Iteration  14: 2089331.905 ops/s
# Warmup Iteration  15: 2050503.559 ops/s
# Warmup Iteration  16: 1987383.841 ops/s
# Warmup Iteration  17: 2118415.234 ops/s
# Warmup Iteration  18: 2118778.746 ops/s
# Warmup Iteration  19: 2106068.059 ops/s
# Warmup Iteration  20: 2091066.661 ops/s
# Warmup Iteration  21: 2116787.500 ops/s
# Warmup Iteration  22: 2094122.370 ops/s
# Warmup Iteration  23: 2059693.485 ops/s
# Warmup Iteration  24: 2088748.859 ops/s
# Warmup Iteration  25: 2076334.306 ops/s
# Warmup Iteration  26: 2101798.794 ops/s
# Warmup Iteration  27: 2100130.311 ops/s
# Warmup Iteration  28: 2097387.198 ops/s
# Warmup Iteration  29: 2105524.354 ops/s
# Warmup Iteration  30: 2088337.155 ops/s
Iteration   1: 2027214.967 ops/s
Iteration   2: 2077932.807 ops/s
Iteration   3: 1997273.811 ops/s
Iteration   4: 1984508.422 ops/s
Iteration   5: 2116571.934 ops/s
Iteration   6: 2104186.421 ops/s
Iteration   7: 2061858.503 ops/s
Iteration   8: 2116748.733 ops/s
Iteration   9: 2142466.071 ops/s
Iteration  10: 2121424.026 ops/s
Iteration  11: 2106712.095 ops/s
Iteration  12: 2110280.718 ops/s
Iteration  13: 2114870.382 ops/s
Iteration  14: 2086023.208 ops/s
Iteration  15: 2104407.027 ops/s
Iteration  16: 2129149.564 ops/s
Iteration  17: 2097942.587 ops/s
Iteration  18: 2110331.920 ops/s
Iteration  19: 2105341.086 ops/s
Iteration  20: 2096056.097 ops/s
Iteration  21: 2104418.430 ops/s
Iteration  22: 2097641.955 ops/s
Iteration  23: 2087423.265 ops/s
Iteration  24: 2098991.396 ops/s
Iteration  25: 2113422.048 ops/s
Iteration  26: 2104450.578 ops/s
Iteration  27: 2098380.940 ops/s
Iteration  28: 2078629.864 ops/s
Iteration  29: 2101209.383 ops/s
Iteration  30: 2112432.924 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_allSatisfyWith":
  2093610.039 ±(99.9%) 23320.159 ops/s [Average]
  (min, avg, max) = (1984508.422, 2093610.039, 2142466.071), stdev = 34904.519
  CI (99.9%): [2070289.880, 2116930.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2093610.039 ± 23320.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914580.884 ops/s
# Warmup Iteration   2: 2039411.691 ops/s
# Warmup Iteration   3: 2088301.065 ops/s
# Warmup Iteration   4: 1954066.370 ops/s
# Warmup Iteration   5: 1813071.876 ops/s
# Warmup Iteration   6: 2026557.327 ops/s
# Warmup Iteration   7: 2129516.286 ops/s
# Warmup Iteration   8: 2093474.078 ops/s
# Warmup Iteration   9: 2072623.759 ops/s
# Warmup Iteration  10: 2064117.403 ops/s
# Warmup Iteration  11: 2141010.123 ops/s
# Warmup Iteration  12: 2067379.625 ops/s
# Warmup Iteration  13: 2104965.807 ops/s
# Warmup Iteration  14: 2073506.381 ops/s
# Warmup Iteration  15: 2093088.890 ops/s
# Warmup Iteration  16: 2020436.456 ops/s
# Warmup Iteration  17: 2091541.730 ops/s
# Warmup Iteration  18: 2027283.800 ops/s
# Warmup Iteration  19: 2015450.870 ops/s
# Warmup Iteration  20: 2044700.444 ops/s
# Warmup Iteration  21: 2050013.038 ops/s
# Warmup Iteration  22: 2049859.914 ops/s
# Warmup Iteration  23: 2130448.257 ops/s
# Warmup Iteration  24: 2123807.908 ops/s
# Warmup Iteration  25: 2132572.414 ops/s
# Warmup Iteration  26: 2120600.310 ops/s
# Warmup Iteration  27: 2120023.462 ops/s
# Warmup Iteration  28: 2139320.345 ops/s
# Warmup Iteration  29: 2107038.591 ops/s
# Warmup Iteration  30: 2080071.402 ops/s
Iteration   1: 2074502.626 ops/s
Iteration   2: 2134713.493 ops/s
Iteration   3: 2128591.302 ops/s
Iteration   4: 2144359.586 ops/s
Iteration   5: 2081038.893 ops/s
Iteration   6: 2101906.453 ops/s
Iteration   7: 2138258.160 ops/s
Iteration   8: 2098358.972 ops/s
Iteration   9: 2113566.873 ops/s
Iteration  10: 2111835.203 ops/s
Iteration  11: 2036638.887 ops/s
Iteration  12: 2084841.769 ops/s
Iteration  13: 2046180.096 ops/s
Iteration  14: 2109924.388 ops/s
Iteration  15: 2150366.340 ops/s
Iteration  16: 2136766.750 ops/s
Iteration  17: 2097606.523 ops/s
Iteration  18: 2086469.287 ops/s
Iteration  19: 2102749.595 ops/s
Iteration  20: 2125917.880 ops/s
Iteration  21: 2092484.873 ops/s
Iteration  22: 2140281.507 ops/s
Iteration  23: 2111945.500 ops/s
Iteration  24: 2097295.322 ops/s
Iteration  25: 2085121.628 ops/s
Iteration  26: 2117510.092 ops/s
Iteration  27: 2134556.166 ops/s
Iteration  28: 2097429.100 ops/s
Iteration  29: 2129314.626 ops/s
Iteration  30: 2105965.912 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfy":
  2107216.593 ±(99.9%) 18267.790 ops/s [Average]
  (min, avg, max) = (2036638.887, 2107216.593, 2150366.340), stdev = 27342.371
  CI (99.9%): [2088948.803, 2125484.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  2107216.593 ± 18267.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 873958.565 ops/s
# Warmup Iteration   2: 1837215.677 ops/s
# Warmup Iteration   3: 2032305.736 ops/s
# Warmup Iteration   4: 2051743.682 ops/s
# Warmup Iteration   5: 1692927.112 ops/s
# Warmup Iteration   6: 2050346.052 ops/s
# Warmup Iteration   7: 2015610.089 ops/s
# Warmup Iteration   8: 2019131.508 ops/s
# Warmup Iteration   9: 2058717.637 ops/s
# Warmup Iteration  10: 2048307.076 ops/s
# Warmup Iteration  11: 2035136.423 ops/s
# Warmup Iteration  12: 1999069.518 ops/s
# Warmup Iteration  13: 2020733.580 ops/s
# Warmup Iteration  14: 1977763.662 ops/s
# Warmup Iteration  15: 2004287.827 ops/s
# Warmup Iteration  16: 1962976.882 ops/s
# Warmup Iteration  17: 2043006.572 ops/s
# Warmup Iteration  18: 2008539.574 ops/s
# Warmup Iteration  19: 2042653.403 ops/s
# Warmup Iteration  20: 2019254.288 ops/s
# Warmup Iteration  21: 2043270.170 ops/s
# Warmup Iteration  22: 2052553.750 ops/s
# Warmup Iteration  23: 2092103.417 ops/s
# Warmup Iteration  24: 2073149.016 ops/s
# Warmup Iteration  25: 2056456.043 ops/s
# Warmup Iteration  26: 2081000.562 ops/s
# Warmup Iteration  27: 2002022.585 ops/s
# Warmup Iteration  28: 2003910.900 ops/s
# Warmup Iteration  29: 1993110.186 ops/s
# Warmup Iteration  30: 2025132.746 ops/s
Iteration   1: 2078057.654 ops/s
Iteration   2: 2042241.317 ops/s
Iteration   3: 2009538.284 ops/s
Iteration   4: 2100120.871 ops/s
Iteration   5: 2095112.103 ops/s
Iteration   6: 2035448.214 ops/s
Iteration   7: 1998698.675 ops/s
Iteration   8: 1941383.101 ops/s
Iteration   9: 2065991.642 ops/s
Iteration  10: 2067109.934 ops/s
Iteration  11: 2116344.326 ops/s
Iteration  12: 2086201.922 ops/s
Iteration  13: 2004941.550 ops/s
Iteration  14: 2089892.050 ops/s
Iteration  15: 2075457.227 ops/s
Iteration  16: 2053155.988 ops/s
Iteration  17: 2045590.045 ops/s
Iteration  18: 2099571.605 ops/s
Iteration  19: 2043186.556 ops/s
Iteration  20: 2067178.278 ops/s
Iteration  21: 2067838.918 ops/s
Iteration  22: 2063797.217 ops/s
Iteration  23: 2083975.880 ops/s
Iteration  24: 1983397.149 ops/s
Iteration  25: 2068280.865 ops/s
Iteration  26: 2068281.257 ops/s
Iteration  27: 2089738.066 ops/s
Iteration  28: 2056707.102 ops/s
Iteration  29: 2068744.631 ops/s
Iteration  30: 2086919.559 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_anySatisfyWith":
  2058430.066 ±(99.9%) 25728.381 ops/s [Average]
  (min, avg, max) = (1941383.101, 2058430.066, 2116344.326), stdev = 38509.033
  CI (99.9%): [2032701.685, 2084158.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2058430.066 ± 25728.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1220485.667 ops/s
# Warmup Iteration   2: 2816452.365 ops/s
# Warmup Iteration   3: 2853112.914 ops/s
# Warmup Iteration   4: 2394153.626 ops/s
# Warmup Iteration   5: 2830866.108 ops/s
# Warmup Iteration   6: 2738390.683 ops/s
# Warmup Iteration   7: 2738419.927 ops/s
# Warmup Iteration   8: 2843304.106 ops/s
# Warmup Iteration   9: 2873345.146 ops/s
# Warmup Iteration  10: 2821116.655 ops/s
# Warmup Iteration  11: 2863471.617 ops/s
# Warmup Iteration  12: 2849833.690 ops/s
# Warmup Iteration  13: 2868890.382 ops/s
# Warmup Iteration  14: 2882021.369 ops/s
# Warmup Iteration  15: 2885232.076 ops/s
# Warmup Iteration  16: 2860626.726 ops/s
# Warmup Iteration  17: 2796286.718 ops/s
# Warmup Iteration  18: 2901338.655 ops/s
# Warmup Iteration  19: 2884309.259 ops/s
# Warmup Iteration  20: 2816166.568 ops/s
# Warmup Iteration  21: 2813597.819 ops/s
# Warmup Iteration  22: 2859703.932 ops/s
# Warmup Iteration  23: 2801611.334 ops/s
# Warmup Iteration  24: 2822208.404 ops/s
# Warmup Iteration  25: 2868059.232 ops/s
# Warmup Iteration  26: 2783807.151 ops/s
# Warmup Iteration  27: 2797821.145 ops/s
# Warmup Iteration  28: 2857883.483 ops/s
# Warmup Iteration  29: 2919094.274 ops/s
# Warmup Iteration  30: 2831699.969 ops/s
Iteration   1: 2827286.124 ops/s
Iteration   2: 2905858.582 ops/s
Iteration   3: 2872727.021 ops/s
Iteration   4: 2888935.810 ops/s
Iteration   5: 2785908.381 ops/s
Iteration   6: 2696563.347 ops/s
Iteration   7: 2788542.275 ops/s
Iteration   8: 2775080.118 ops/s
Iteration   9: 2726877.412 ops/s
Iteration  10: 2779307.867 ops/s
Iteration  11: 2776575.431 ops/s
Iteration  12: 2865006.982 ops/s
Iteration  13: 2865654.939 ops/s
Iteration  14: 2847073.216 ops/s
Iteration  15: 2850488.923 ops/s
Iteration  16: 2742299.031 ops/s
Iteration  17: 2888289.819 ops/s
Iteration  18: 2885919.037 ops/s
Iteration  19: 2916681.832 ops/s
Iteration  20: 2884021.824 ops/s
Iteration  21: 2837162.682 ops/s
Iteration  22: 2806053.999 ops/s
Iteration  23: 2724440.072 ops/s
Iteration  24: 2766816.796 ops/s
Iteration  25: 2875787.911 ops/s
Iteration  26: 2796703.931 ops/s
Iteration  27: 2898607.425 ops/s
Iteration  28: 2852842.466 ops/s
Iteration  29: 2897330.554 ops/s
Iteration  30: 2915788.489 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendString":
  2831354.410 ±(99.9%) 42162.425 ops/s [Average]
  (min, avg, max) = (2696563.347, 2831354.410, 2916681.832), stdev = 63106.737
  CI (99.9%): [2789191.985, 2873516.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_appendString  thrpt   30  2831354.410 ± 42162.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87750.956 ops/s
# Warmup Iteration   2: 98297.610 ops/s
# Warmup Iteration   3: 117547.604 ops/s
# Warmup Iteration   4: 126405.277 ops/s
# Warmup Iteration   5: 127689.865 ops/s
# Warmup Iteration   6: 126991.074 ops/s
# Warmup Iteration   7: 126907.544 ops/s
# Warmup Iteration   8: 129004.339 ops/s
# Warmup Iteration   9: 128027.284 ops/s
# Warmup Iteration  10: 126900.319 ops/s
# Warmup Iteration  11: 128261.502 ops/s
# Warmup Iteration  12: 127005.483 ops/s
# Warmup Iteration  13: 115061.485 ops/s
# Warmup Iteration  14: 116844.198 ops/s
# Warmup Iteration  15: 127446.899 ops/s
# Warmup Iteration  16: 125769.608 ops/s
# Warmup Iteration  17: 125954.614 ops/s
# Warmup Iteration  18: 126861.505 ops/s
# Warmup Iteration  19: 126232.195 ops/s
# Warmup Iteration  20: 126967.329 ops/s
# Warmup Iteration  21: 125930.338 ops/s
# Warmup Iteration  22: 126910.080 ops/s
# Warmup Iteration  23: 127985.853 ops/s
# Warmup Iteration  24: 128355.624 ops/s
# Warmup Iteration  25: 134685.437 ops/s
# Warmup Iteration  26: 132155.597 ops/s
# Warmup Iteration  27: 131538.572 ops/s
# Warmup Iteration  28: 131736.687 ops/s
# Warmup Iteration  29: 132674.663 ops/s
# Warmup Iteration  30: 130110.689 ops/s
Iteration   1: 132950.740 ops/s
Iteration   2: 133010.571 ops/s
Iteration   3: 131376.714 ops/s
Iteration   4: 129401.931 ops/s
Iteration   5: 129855.607 ops/s
Iteration   6: 132598.474 ops/s
Iteration   7: 131395.296 ops/s
Iteration   8: 133057.196 ops/s
Iteration   9: 132796.997 ops/s
Iteration  10: 131507.989 ops/s
Iteration  11: 131200.734 ops/s
Iteration  12: 133486.225 ops/s
Iteration  13: 131573.380 ops/s
Iteration  14: 124651.436 ops/s
Iteration  15: 126137.510 ops/s
Iteration  16: 133332.102 ops/s
Iteration  17: 131587.981 ops/s
Iteration  18: 130409.025 ops/s
Iteration  19: 131902.399 ops/s
Iteration  20: 133105.155 ops/s
Iteration  21: 132705.497 ops/s
Iteration  22: 132324.091 ops/s
Iteration  23: 132270.500 ops/s
Iteration  24: 130177.595 ops/s
Iteration  25: 126537.347 ops/s
Iteration  26: 126399.565 ops/s
Iteration  27: 132022.883 ops/s
Iteration  28: 133162.724 ops/s
Iteration  29: 132813.595 ops/s
Iteration  30: 134410.173 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringThrows":
  131272.048 ±(99.9%) 1620.541 ops/s [Average]
  (min, avg, max) = (124651.436, 131272.048, 134410.173), stdev = 2425.550
  CI (99.9%): [129651.507, 132892.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  131272.048 ± 1620.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 915845.537 ops/s
# Warmup Iteration   2: 2087452.900 ops/s
# Warmup Iteration   3: 2047973.795 ops/s
# Warmup Iteration   4: 1786596.726 ops/s
# Warmup Iteration   5: 2141355.326 ops/s
# Warmup Iteration   6: 2153334.463 ops/s
# Warmup Iteration   7: 2074411.039 ops/s
# Warmup Iteration   8: 2109556.968 ops/s
# Warmup Iteration   9: 2160261.726 ops/s
# Warmup Iteration  10: 2145085.371 ops/s
# Warmup Iteration  11: 2148703.473 ops/s
# Warmup Iteration  12: 2087791.327 ops/s
# Warmup Iteration  13: 2068732.509 ops/s
# Warmup Iteration  14: 2109267.593 ops/s
# Warmup Iteration  15: 2123252.198 ops/s
# Warmup Iteration  16: 2132693.285 ops/s
# Warmup Iteration  17: 2086327.059 ops/s
# Warmup Iteration  18: 2136799.523 ops/s
# Warmup Iteration  19: 2163288.458 ops/s
# Warmup Iteration  20: 2145924.969 ops/s
# Warmup Iteration  21: 2145209.184 ops/s
# Warmup Iteration  22: 2139126.305 ops/s
# Warmup Iteration  23: 2106347.911 ops/s
# Warmup Iteration  24: 2125409.797 ops/s
# Warmup Iteration  25: 2072395.826 ops/s
# Warmup Iteration  26: 2127732.332 ops/s
# Warmup Iteration  27: 2114340.431 ops/s
# Warmup Iteration  28: 2129748.254 ops/s
# Warmup Iteration  29: 2150132.263 ops/s
# Warmup Iteration  30: 2117277.488 ops/s
Iteration   1: 2153868.214 ops/s
Iteration   2: 2160590.094 ops/s
Iteration   3: 2119152.973 ops/s
Iteration   4: 2135662.957 ops/s
Iteration   5: 2154556.686 ops/s
Iteration   6: 2164340.444 ops/s
Iteration   7: 2161351.387 ops/s
Iteration   8: 2132944.701 ops/s
Iteration   9: 2132827.717 ops/s
Iteration  10: 2151453.817 ops/s
Iteration  11: 2137786.764 ops/s
Iteration  12: 2142402.288 ops/s
Iteration  13: 2126665.599 ops/s
Iteration  14: 2140860.527 ops/s
Iteration  15: 2147875.375 ops/s
Iteration  16: 2059867.073 ops/s
Iteration  17: 2141672.985 ops/s
Iteration  18: 2185530.833 ops/s
Iteration  19: 2152335.741 ops/s
Iteration  20: 2175513.539 ops/s
Iteration  21: 2178683.609 ops/s
Iteration  22: 2187034.194 ops/s
Iteration  23: 2139649.993 ops/s
Iteration  24: 2174776.217 ops/s
Iteration  25: 2122881.131 ops/s
Iteration  26: 2150932.644 ops/s
Iteration  27: 2187497.403 ops/s
Iteration  28: 2185249.351 ops/s
Iteration  29: 2177252.344 ops/s
Iteration  30: 2175719.169 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2151897.859 ±(99.9%) 17882.281 ops/s [Average]
  (min, avg, max) = (2059867.073, 2151897.859, 2187497.403), stdev = 26765.359
  CI (99.9%): [2134015.578, 2169780.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2151897.859 ± 17882.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942457.490 ops/s
# Warmup Iteration   2: 2197437.619 ops/s
# Warmup Iteration   3: 2195673.346 ops/s
# Warmup Iteration   4: 1816296.482 ops/s
# Warmup Iteration   5: 2188403.482 ops/s
# Warmup Iteration   6: 2190774.875 ops/s
# Warmup Iteration   7: 2233072.151 ops/s
# Warmup Iteration   8: 2208825.982 ops/s
# Warmup Iteration   9: 2100057.448 ops/s
# Warmup Iteration  10: 2182606.222 ops/s
# Warmup Iteration  11: 2167431.973 ops/s
# Warmup Iteration  12: 2187906.802 ops/s
# Warmup Iteration  13: 2192510.383 ops/s
# Warmup Iteration  14: 2200900.805 ops/s
# Warmup Iteration  15: 2190289.322 ops/s
# Warmup Iteration  16: 2212889.268 ops/s
# Warmup Iteration  17: 2210232.345 ops/s
# Warmup Iteration  18: 2227650.740 ops/s
# Warmup Iteration  19: 2201858.147 ops/s
# Warmup Iteration  20: 2208868.295 ops/s
# Warmup Iteration  21: 2208682.394 ops/s
# Warmup Iteration  22: 2209637.499 ops/s
# Warmup Iteration  23: 2213505.623 ops/s
# Warmup Iteration  24: 2222977.731 ops/s
# Warmup Iteration  25: 2152435.227 ops/s
# Warmup Iteration  26: 2142116.500 ops/s
# Warmup Iteration  27: 2250137.881 ops/s
# Warmup Iteration  28: 2204070.760 ops/s
# Warmup Iteration  29: 2140271.646 ops/s
# Warmup Iteration  30: 2204919.690 ops/s
Iteration   1: 2179269.592 ops/s
Iteration   2: 2110941.510 ops/s
Iteration   3: 2142717.816 ops/s
Iteration   4: 2247282.527 ops/s
Iteration   5: 2218276.630 ops/s
Iteration   6: 2243180.385 ops/s
Iteration   7: 2237278.623 ops/s
Iteration   8: 2207533.996 ops/s
Iteration   9: 2242377.508 ops/s
Iteration  10: 2217459.068 ops/s
Iteration  11: 2239313.946 ops/s
Iteration  12: 2095377.145 ops/s
Iteration  13: 2183809.087 ops/s
Iteration  14: 2201768.925 ops/s
Iteration  15: 2213208.345 ops/s
Iteration  16: 2219668.279 ops/s
Iteration  17: 2212963.278 ops/s
Iteration  18: 2217913.632 ops/s
Iteration  19: 2167568.846 ops/s
Iteration  20: 2160633.860 ops/s
Iteration  21: 2219127.822 ops/s
Iteration  22: 2190137.517 ops/s
Iteration  23: 2149308.097 ops/s
Iteration  24: 2227392.711 ops/s
Iteration  25: 2218356.550 ops/s
Iteration  26: 2223717.967 ops/s
Iteration  27: 2231118.206 ops/s
Iteration  28: 2220080.875 ops/s
Iteration  29: 2207814.316 ops/s
Iteration  30: 2197559.764 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2201438.561 ±(99.9%) 25453.525 ops/s [Average]
  (min, avg, max) = (2095377.145, 2201438.561, 2247282.527), stdev = 38097.641
  CI (99.9%): [2175985.035, 2226892.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2201438.561 ± 25453.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6005743.846 ops/s
# Warmup Iteration   2: 12545835.108 ops/s
# Warmup Iteration   3: 10954123.665 ops/s
# Warmup Iteration   4: 12507525.682 ops/s
# Warmup Iteration   5: 12560436.886 ops/s
# Warmup Iteration   6: 12496131.606 ops/s
# Warmup Iteration   7: 12775005.443 ops/s
# Warmup Iteration   8: 12702251.945 ops/s
# Warmup Iteration   9: 12380609.967 ops/s
# Warmup Iteration  10: 12571992.158 ops/s
# Warmup Iteration  11: 12544396.942 ops/s
# Warmup Iteration  12: 12892352.443 ops/s
# Warmup Iteration  13: 12991433.958 ops/s
# Warmup Iteration  14: 12647424.047 ops/s
# Warmup Iteration  15: 12979821.762 ops/s
# Warmup Iteration  16: 13025486.011 ops/s
# Warmup Iteration  17: 13114687.835 ops/s
# Warmup Iteration  18: 13006323.908 ops/s
# Warmup Iteration  19: 12916855.791 ops/s
# Warmup Iteration  20: 12649686.237 ops/s
# Warmup Iteration  21: 12660814.126 ops/s
# Warmup Iteration  22: 13050688.227 ops/s
# Warmup Iteration  23: 12663979.540 ops/s
# Warmup Iteration  24: 12568815.471 ops/s
# Warmup Iteration  25: 12746671.222 ops/s
# Warmup Iteration  26: 12119563.384 ops/s
# Warmup Iteration  27: 12811531.672 ops/s
# Warmup Iteration  28: 13025585.098 ops/s
# Warmup Iteration  29: 12893916.782 ops/s
# Warmup Iteration  30: 12804490.924 ops/s
Iteration   1: 13124017.617 ops/s
Iteration   2: 12376237.530 ops/s
Iteration   3: 12678556.736 ops/s
Iteration   4: 13099115.008 ops/s
Iteration   5: 12572022.275 ops/s
Iteration   6: 13023228.437 ops/s
Iteration   7: 12898347.598 ops/s
Iteration   8: 13010206.839 ops/s
Iteration   9: 13080253.863 ops/s
Iteration  10: 12870279.302 ops/s
Iteration  11: 12734123.971 ops/s
Iteration  12: 12565646.039 ops/s
Iteration  13: 12496743.808 ops/s
Iteration  14: 12763356.492 ops/s
Iteration  15: 12487284.845 ops/s
Iteration  16: 12649103.627 ops/s
Iteration  17: 12555999.127 ops/s
Iteration  18: 12883915.476 ops/s
Iteration  19: 12939866.005 ops/s
Iteration  20: 12969357.676 ops/s
Iteration  21: 13001243.457 ops/s
Iteration  22: 13012563.351 ops/s
Iteration  23: 12915577.216 ops/s
Iteration  24: 12797898.341 ops/s
Iteration  25: 13233681.736 ops/s
Iteration  26: 13331781.768 ops/s
Iteration  27: 13114309.081 ops/s
Iteration  28: 12988673.225 ops/s
Iteration  29: 13058508.710 ops/s
Iteration  30: 13033283.896 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asLazy":
  12875506.102 ±(99.9%) 160346.829 ops/s [Average]
  (min, avg, max) = (12376237.530, 12875506.102, 13331781.768), stdev = 239999.603
  CI (99.9%): [12715159.273, 13035852.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_asLazy  thrpt   30  12875506.102 ± 160346.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5426632.488 ops/s
# Warmup Iteration   2: 11188221.918 ops/s
# Warmup Iteration   3: 9662801.658 ops/s
# Warmup Iteration   4: 10983478.381 ops/s
# Warmup Iteration   5: 11001916.515 ops/s
# Warmup Iteration   6: 11449229.778 ops/s
# Warmup Iteration   7: 11065544.228 ops/s
# Warmup Iteration   8: 10931819.312 ops/s
# Warmup Iteration   9: 11095464.475 ops/s
# Warmup Iteration  10: 10751231.305 ops/s
# Warmup Iteration  11: 10910213.408 ops/s
# Warmup Iteration  12: 10633395.420 ops/s
# Warmup Iteration  13: 10895735.319 ops/s
# Warmup Iteration  14: 11036453.968 ops/s
# Warmup Iteration  15: 10998436.922 ops/s
# Warmup Iteration  16: 10476592.674 ops/s
# Warmup Iteration  17: 11007505.046 ops/s
# Warmup Iteration  18: 10992406.751 ops/s
# Warmup Iteration  19: 10808829.753 ops/s
# Warmup Iteration  20: 11150465.352 ops/s
# Warmup Iteration  21: 11009012.429 ops/s
# Warmup Iteration  22: 10989520.426 ops/s
# Warmup Iteration  23: 10819782.543 ops/s
# Warmup Iteration  24: 10816353.340 ops/s
# Warmup Iteration  25: 11230597.162 ops/s
# Warmup Iteration  26: 11027014.747 ops/s
# Warmup Iteration  27: 11338795.704 ops/s
# Warmup Iteration  28: 11251939.834 ops/s
# Warmup Iteration  29: 11231408.022 ops/s
# Warmup Iteration  30: 11352603.111 ops/s
Iteration   1: 11158487.654 ops/s
Iteration   2: 11162281.583 ops/s
Iteration   3: 11059171.529 ops/s
Iteration   4: 11264726.275 ops/s
Iteration   5: 11363774.325 ops/s
Iteration   6: 11152349.211 ops/s
Iteration   7: 11359720.493 ops/s
Iteration   8: 11261220.301 ops/s
Iteration   9: 11225484.474 ops/s
Iteration  10: 11253267.365 ops/s
Iteration  11: 10673693.906 ops/s
Iteration  12: 11015401.555 ops/s
Iteration  13: 11096279.587 ops/s
Iteration  14: 11007563.660 ops/s
Iteration  15: 11078341.618 ops/s
Iteration  16: 11004274.170 ops/s
Iteration  17: 10865736.148 ops/s
Iteration  18: 10828500.894 ops/s
Iteration  19: 11047387.411 ops/s
Iteration  20: 10967372.705 ops/s
Iteration  21: 11052309.387 ops/s
Iteration  22: 11119055.266 ops/s
Iteration  23: 10624214.274 ops/s
Iteration  24: 10875312.161 ops/s
Iteration  25: 10807417.258 ops/s
Iteration  26: 10904881.618 ops/s
Iteration  27: 10931683.519 ops/s
Iteration  28: 10994435.657 ops/s
Iteration  29: 10666177.380 ops/s
Iteration  30: 11426769.146 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asSynchronized":
  11041576.351 ±(99.9%) 137727.266 ops/s [Average]
  (min, avg, max) = (10624214.274, 11041576.351, 11426769.146), stdev = 206143.704
  CI (99.9%): [10903849.085, 11179303.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  11041576.351 ± 137727.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5936675.563 ops/s
# Warmup Iteration   2: 12290481.991 ops/s
# Warmup Iteration   3: 10380009.558 ops/s
# Warmup Iteration   4: 12242696.504 ops/s
# Warmup Iteration   5: 12175963.343 ops/s
# Warmup Iteration   6: 12326743.374 ops/s
# Warmup Iteration   7: 12428994.901 ops/s
# Warmup Iteration   8: 12363031.830 ops/s
# Warmup Iteration   9: 12345271.975 ops/s
# Warmup Iteration  10: 12159577.202 ops/s
# Warmup Iteration  11: 12186926.419 ops/s
# Warmup Iteration  12: 12281924.267 ops/s
# Warmup Iteration  13: 12223787.790 ops/s
# Warmup Iteration  14: 12649374.755 ops/s
# Warmup Iteration  15: 12448970.600 ops/s
# Warmup Iteration  16: 12435358.618 ops/s
# Warmup Iteration  17: 12394312.032 ops/s
# Warmup Iteration  18: 12091739.884 ops/s
# Warmup Iteration  19: 12254134.776 ops/s
# Warmup Iteration  20: 12160905.053 ops/s
# Warmup Iteration  21: 12361988.648 ops/s
# Warmup Iteration  22: 12392092.032 ops/s
# Warmup Iteration  23: 12182769.370 ops/s
# Warmup Iteration  24: 12167095.082 ops/s
# Warmup Iteration  25: 11886735.133 ops/s
# Warmup Iteration  26: 12070378.568 ops/s
# Warmup Iteration  27: 12126218.594 ops/s
# Warmup Iteration  28: 12027128.963 ops/s
# Warmup Iteration  29: 12300481.081 ops/s
# Warmup Iteration  30: 12163832.493 ops/s
Iteration   1: 11843069.319 ops/s
Iteration   2: 12102474.491 ops/s
Iteration   3: 11921610.388 ops/s
Iteration   4: 11885679.272 ops/s
Iteration   5: 12356558.276 ops/s
Iteration   6: 12360373.947 ops/s
Iteration   7: 12480491.199 ops/s
Iteration   8: 12057829.192 ops/s
Iteration   9: 11823736.254 ops/s
Iteration  10: 11959818.983 ops/s
Iteration  11: 12596597.594 ops/s
Iteration  12: 12450594.590 ops/s
Iteration  13: 12299363.705 ops/s
Iteration  14: 12623144.186 ops/s
Iteration  15: 12214731.644 ops/s
Iteration  16: 12405467.795 ops/s
Iteration  17: 12349615.192 ops/s
Iteration  18: 12051357.044 ops/s
Iteration  19: 11728430.263 ops/s
Iteration  20: 12489929.939 ops/s
Iteration  21: 12635679.443 ops/s
Iteration  22: 12506593.793 ops/s
Iteration  23: 12385476.679 ops/s
Iteration  24: 12686248.023 ops/s
Iteration  25: 12482340.635 ops/s
Iteration  26: 12792680.412 ops/s
Iteration  27: 12586305.299 ops/s
Iteration  28: 12500692.816 ops/s
Iteration  29: 12831366.798 ops/s
Iteration  30: 12799320.356 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_asUnmodifiable":
  12340252.584 ±(99.9%) 209700.906 ops/s [Average]
  (min, avg, max) = (11728430.263, 12340252.584, 12831366.798), stdev = 313870.468
  CI (99.9%): [12130551.678, 12549953.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  12340252.584 ± 209700.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 559563.958 ops/s
# Warmup Iteration   2: 1277266.945 ops/s
# Warmup Iteration   3: 1367837.676 ops/s
# Warmup Iteration   4: 1400260.572 ops/s
# Warmup Iteration   5: 1168988.837 ops/s
# Warmup Iteration   6: 1401297.267 ops/s
# Warmup Iteration   7: 1397739.675 ops/s
# Warmup Iteration   8: 1387214.622 ops/s
# Warmup Iteration   9: 1378606.627 ops/s
# Warmup Iteration  10: 1383720.767 ops/s
# Warmup Iteration  11: 1368827.329 ops/s
# Warmup Iteration  12: 1364734.631 ops/s
# Warmup Iteration  13: 1354415.448 ops/s
# Warmup Iteration  14: 1369229.801 ops/s
# Warmup Iteration  15: 1329181.785 ops/s
# Warmup Iteration  16: 1327478.523 ops/s
# Warmup Iteration  17: 1370878.609 ops/s
# Warmup Iteration  18: 1321844.166 ops/s
# Warmup Iteration  19: 1328146.682 ops/s
# Warmup Iteration  20: 1340016.345 ops/s
# Warmup Iteration  21: 1346119.725 ops/s
# Warmup Iteration  22: 1389303.061 ops/s
# Warmup Iteration  23: 1375597.312 ops/s
# Warmup Iteration  24: 1395334.362 ops/s
# Warmup Iteration  25: 1334018.726 ops/s
# Warmup Iteration  26: 1364595.844 ops/s
# Warmup Iteration  27: 1381702.783 ops/s
# Warmup Iteration  28: 1381535.966 ops/s
# Warmup Iteration  29: 1378768.368 ops/s
# Warmup Iteration  30: 1381782.877 ops/s
Iteration   1: 1406054.902 ops/s
Iteration   2: 1362791.712 ops/s
Iteration   3: 1400819.783 ops/s
Iteration   4: 1390716.372 ops/s
Iteration   5: 1387669.277 ops/s
Iteration   6: 1364365.167 ops/s
Iteration   7: 1347273.662 ops/s
Iteration   8: 1320328.361 ops/s
Iteration   9: 1398843.454 ops/s
Iteration  10: 1366078.950 ops/s
Iteration  11: 1402762.462 ops/s
Iteration  12: 1396036.555 ops/s
Iteration  13: 1377880.065 ops/s
Iteration  14: 1376426.335 ops/s
Iteration  15: 1390252.839 ops/s
Iteration  16: 1390727.645 ops/s
Iteration  17: 1393928.886 ops/s
Iteration  18: 1376166.383 ops/s
Iteration  19: 1380367.642 ops/s
Iteration  20: 1367165.013 ops/s
Iteration  21: 1377186.081 ops/s
Iteration  22: 1388255.086 ops/s
Iteration  23: 1339312.005 ops/s
Iteration  24: 1388893.360 ops/s
Iteration  25: 1382540.177 ops/s
Iteration  26: 1352691.037 ops/s
Iteration  27: 1332034.272 ops/s
Iteration  28: 1296993.352 ops/s
Iteration  29: 1326211.734 ops/s
Iteration  30: 1299882.659 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_bottomOccurrences":
  1369355.174 ±(99.9%) 20027.947 ops/s [Average]
  (min, avg, max) = (1296993.352, 1369355.174, 1406054.902), stdev = 29976.891
  CI (99.9%): [1349327.227, 1389383.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  1369355.174 ± 20027.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575651.037 ops/s
# Warmup Iteration   2: 1178191.557 ops/s
# Warmup Iteration   3: 1264523.817 ops/s
# Warmup Iteration   4: 1263656.546 ops/s
# Warmup Iteration   5: 1051204.914 ops/s
# Warmup Iteration   6: 1267920.263 ops/s
# Warmup Iteration   7: 1276697.593 ops/s
# Warmup Iteration   8: 1274130.199 ops/s
# Warmup Iteration   9: 1267176.573 ops/s
# Warmup Iteration  10: 1263341.300 ops/s
# Warmup Iteration  11: 1262880.818 ops/s
# Warmup Iteration  12: 1264355.663 ops/s
# Warmup Iteration  13: 1276754.446 ops/s
# Warmup Iteration  14: 1255726.263 ops/s
# Warmup Iteration  15: 1271207.487 ops/s
# Warmup Iteration  16: 1293467.293 ops/s
# Warmup Iteration  17: 1260111.888 ops/s
# Warmup Iteration  18: 1239785.942 ops/s
# Warmup Iteration  19: 1221819.498 ops/s
# Warmup Iteration  20: 1235518.235 ops/s
# Warmup Iteration  21: 1221187.938 ops/s
# Warmup Iteration  22: 1218070.221 ops/s
# Warmup Iteration  23: 1221996.180 ops/s
# Warmup Iteration  24: 1210130.130 ops/s
# Warmup Iteration  25: 1230088.196 ops/s
# Warmup Iteration  26: 1283029.238 ops/s
# Warmup Iteration  27: 1281164.653 ops/s
# Warmup Iteration  28: 1285182.411 ops/s
# Warmup Iteration  29: 1266939.482 ops/s
# Warmup Iteration  30: 1272981.515 ops/s
Iteration   1: 1279837.798 ops/s
Iteration   2: 1259270.963 ops/s
Iteration   3: 1255583.327 ops/s
Iteration   4: 1270209.895 ops/s
Iteration   5: 1273977.334 ops/s
Iteration   6: 1278605.877 ops/s
Iteration   7: 1274319.418 ops/s
Iteration   8: 1262587.301 ops/s
Iteration   9: 1272556.127 ops/s
Iteration  10: 1279037.372 ops/s
Iteration  11: 1277311.971 ops/s
Iteration  12: 1268349.528 ops/s
Iteration  13: 1266682.624 ops/s
Iteration  14: 1272882.725 ops/s
Iteration  15: 1272264.438 ops/s
Iteration  16: 1258200.077 ops/s
Iteration  17: 1194419.066 ops/s
Iteration  18: 1232301.813 ops/s
Iteration  19: 1260990.601 ops/s
Iteration  20: 1278382.419 ops/s
Iteration  21: 1273130.956 ops/s
Iteration  22: 1276927.209 ops/s
Iteration  23: 1263530.834 ops/s
Iteration  24: 1272789.455 ops/s
Iteration  25: 1207876.156 ops/s
Iteration  26: 1228097.964 ops/s
Iteration  27: 1255741.704 ops/s
Iteration  28: 1223426.844 ops/s
Iteration  29: 1200380.491 ops/s
Iteration  30: 1205565.531 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk":
  1256507.927 ±(99.9%) 17461.495 ops/s [Average]
  (min, avg, max) = (1194419.066, 1256507.927, 1279837.798), stdev = 26135.545
  CI (99.9%): [1239046.433, 1273969.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_chunk  thrpt   30  1256507.927 ± 17461.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5831598.737 ops/s
# Warmup Iteration   2: 11552587.556 ops/s
# Warmup Iteration   3: 9902110.159 ops/s
# Warmup Iteration   4: 11861943.095 ops/s
# Warmup Iteration   5: 11734531.666 ops/s
# Warmup Iteration   6: 11547969.767 ops/s
# Warmup Iteration   7: 11742168.195 ops/s
# Warmup Iteration   8: 11648535.940 ops/s
# Warmup Iteration   9: 11312987.972 ops/s
# Warmup Iteration  10: 11646330.641 ops/s
# Warmup Iteration  11: 11658800.964 ops/s
# Warmup Iteration  12: 11836696.716 ops/s
# Warmup Iteration  13: 11737830.195 ops/s
# Warmup Iteration  14: 11629152.472 ops/s
# Warmup Iteration  15: 11668319.001 ops/s
# Warmup Iteration  16: 11688386.579 ops/s
# Warmup Iteration  17: 11526995.700 ops/s
# Warmup Iteration  18: 11810318.702 ops/s
# Warmup Iteration  19: 11722152.234 ops/s
# Warmup Iteration  20: 11744899.216 ops/s
# Warmup Iteration  21: 11877799.144 ops/s
# Warmup Iteration  22: 12078546.591 ops/s
# Warmup Iteration  23: 11995533.648 ops/s
# Warmup Iteration  24: 11634325.165 ops/s
# Warmup Iteration  25: 11666612.717 ops/s
# Warmup Iteration  26: 11589263.909 ops/s
# Warmup Iteration  27: 11722321.290 ops/s
# Warmup Iteration  28: 11546040.508 ops/s
# Warmup Iteration  29: 11405436.405 ops/s
# Warmup Iteration  30: 11688024.217 ops/s
Iteration   1: 11982763.798 ops/s
Iteration   2: 11699171.262 ops/s
Iteration   3: 11748164.212 ops/s
Iteration   4: 11877628.694 ops/s
Iteration   5: 11880256.742 ops/s
Iteration   6: 11589984.800 ops/s
Iteration   7: 11621314.509 ops/s
Iteration   8: 11842136.357 ops/s
Iteration   9: 11829937.192 ops/s
Iteration  10: 11690017.882 ops/s
Iteration  11: 11731072.180 ops/s
Iteration  12: 11393378.317 ops/s
Iteration  13: 11573474.572 ops/s
Iteration  14: 11371330.203 ops/s
Iteration  15: 11810928.460 ops/s
Iteration  16: 11607712.721 ops/s
Iteration  17: 11121884.287 ops/s
Iteration  18: 11659385.397 ops/s
Iteration  19: 11464239.479 ops/s
Iteration  20: 11729188.041 ops/s
Iteration  21: 11854625.265 ops/s
Iteration  22: 11827747.305 ops/s
Iteration  23: 11811153.229 ops/s
Iteration  24: 11636760.631 ops/s
Iteration  25: 11779008.106 ops/s
Iteration  26: 11696280.823 ops/s
Iteration  27: 11572954.789 ops/s
Iteration  28: 11635217.951 ops/s
Iteration  29: 11715850.468 ops/s
Iteration  30: 11578770.749 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_empty":
  11677744.614 ±(99.9%) 118818.494 ops/s [Average]
  (min, avg, max) = (11121884.287, 11677744.614, 11982763.798), stdev = 177841.942
  CI (99.9%): [11558926.120, 11796563.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  11677744.614 ± 118818.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584720.914 ops/s
# Warmup Iteration   2: 971338.651 ops/s
# Warmup Iteration   3: 1178517.703 ops/s
# Warmup Iteration   4: 1168498.565 ops/s
# Warmup Iteration   5: 1220682.094 ops/s
# Warmup Iteration   6: 1011558.551 ops/s
# Warmup Iteration   7: 1230520.026 ops/s
# Warmup Iteration   8: 1238407.481 ops/s
# Warmup Iteration   9: 1179810.079 ops/s
# Warmup Iteration  10: 1219609.991 ops/s
# Warmup Iteration  11: 1238176.379 ops/s
# Warmup Iteration  12: 1234774.880 ops/s
# Warmup Iteration  13: 1226905.682 ops/s
# Warmup Iteration  14: 1177496.435 ops/s
# Warmup Iteration  15: 1232852.796 ops/s
# Warmup Iteration  16: 1234298.519 ops/s
# Warmup Iteration  17: 1225533.403 ops/s
# Warmup Iteration  18: 1245508.763 ops/s
# Warmup Iteration  19: 1243578.989 ops/s
# Warmup Iteration  20: 1212491.711 ops/s
# Warmup Iteration  21: 1227730.845 ops/s
# Warmup Iteration  22: 1230695.926 ops/s
# Warmup Iteration  23: 1156795.159 ops/s
# Warmup Iteration  24: 1165416.101 ops/s
# Warmup Iteration  25: 1195742.618 ops/s
# Warmup Iteration  26: 1215085.255 ops/s
# Warmup Iteration  27: 1231760.908 ops/s
# Warmup Iteration  28: 1210745.360 ops/s
# Warmup Iteration  29: 1221277.635 ops/s
# Warmup Iteration  30: 1221096.774 ops/s
Iteration   1: 1183486.725 ops/s
Iteration   2: 1206370.476 ops/s
Iteration   3: 1227939.575 ops/s
Iteration   4: 1223483.951 ops/s
Iteration   5: 1214229.821 ops/s
Iteration   6: 1221936.023 ops/s
Iteration   7: 1230304.227 ops/s
Iteration   8: 1220219.770 ops/s
Iteration   9: 1230319.661 ops/s
Iteration  10: 1235338.474 ops/s
Iteration  11: 1237179.753 ops/s
Iteration  12: 1227385.366 ops/s
Iteration  13: 1226031.229 ops/s
Iteration  14: 1212890.811 ops/s
Iteration  15: 1221442.914 ops/s
Iteration  16: 1198074.192 ops/s
Iteration  17: 1165285.512 ops/s
Iteration  18: 1229384.210 ops/s
Iteration  19: 1227889.371 ops/s
Iteration  20: 1161795.802 ops/s
Iteration  21: 1156338.862 ops/s
Iteration  22: 1217847.090 ops/s
Iteration  23: 1226105.682 ops/s
Iteration  24: 1223091.752 ops/s
Iteration  25: 1227127.464 ops/s
Iteration  26: 1235705.420 ops/s
Iteration  27: 1204203.553 ops/s
Iteration  28: 1232896.562 ops/s
Iteration  29: 1219423.318 ops/s
Iteration  30: 1239058.113 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_large_size":
  1216092.856 ±(99.9%) 14811.888 ops/s [Average]
  (min, avg, max) = (1156338.862, 1216092.856, 1239058.113), stdev = 22169.739
  CI (99.9%): [1201280.968, 1230904.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  1216092.856 ± 14811.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1559725.125 ops/s
# Warmup Iteration   2: 4364671.690 ops/s
# Warmup Iteration   3: 4477153.696 ops/s
# Warmup Iteration   4: 3615876.091 ops/s
# Warmup Iteration   5: 4328556.744 ops/s
# Warmup Iteration   6: 4277147.020 ops/s
# Warmup Iteration   7: 4365719.018 ops/s
# Warmup Iteration   8: 4252754.865 ops/s
# Warmup Iteration   9: 4262290.692 ops/s
# Warmup Iteration  10: 4359135.546 ops/s
# Warmup Iteration  11: 4400300.390 ops/s
# Warmup Iteration  12: 4325982.687 ops/s
# Warmup Iteration  13: 4413238.776 ops/s
# Warmup Iteration  14: 4400319.904 ops/s
# Warmup Iteration  15: 4264710.041 ops/s
# Warmup Iteration  16: 4447693.168 ops/s
# Warmup Iteration  17: 4288868.982 ops/s
# Warmup Iteration  18: 4215142.155 ops/s
# Warmup Iteration  19: 4307145.221 ops/s
# Warmup Iteration  20: 4394986.072 ops/s
# Warmup Iteration  21: 4363136.793 ops/s
# Warmup Iteration  22: 4273776.311 ops/s
# Warmup Iteration  23: 4198818.393 ops/s
# Warmup Iteration  24: 4287415.352 ops/s
# Warmup Iteration  25: 4407739.716 ops/s
# Warmup Iteration  26: 4471216.766 ops/s
# Warmup Iteration  27: 4261041.534 ops/s
# Warmup Iteration  28: 4194249.333 ops/s
# Warmup Iteration  29: 4241633.070 ops/s
# Warmup Iteration  30: 4450873.262 ops/s
Iteration   1: 4341027.262 ops/s
Iteration   2: 4427442.988 ops/s
Iteration   3: 4327640.512 ops/s
Iteration   4: 4241892.922 ops/s
Iteration   5: 4301468.849 ops/s
Iteration   6: 4387388.316 ops/s
Iteration   7: 4444123.620 ops/s
Iteration   8: 4491086.475 ops/s
Iteration   9: 4392185.914 ops/s
Iteration  10: 4301468.501 ops/s
Iteration  11: 4329851.234 ops/s
Iteration  12: 4277087.670 ops/s
Iteration  13: 4240826.658 ops/s
Iteration  14: 4396191.772 ops/s
Iteration  15: 4394332.415 ops/s
Iteration  16: 4469912.268 ops/s
Iteration  17: 4377816.744 ops/s
Iteration  18: 4433537.607 ops/s
Iteration  19: 4431809.300 ops/s
Iteration  20: 4369319.997 ops/s
Iteration  21: 4320795.624 ops/s
Iteration  22: 4411518.878 ops/s
Iteration  23: 4408611.885 ops/s
Iteration  24: 4372330.265 ops/s
Iteration  25: 4389974.304 ops/s
Iteration  26: 4361995.893 ops/s
Iteration  27: 4453952.840 ops/s
Iteration  28: 4383755.152 ops/s
Iteration  29: 4418851.184 ops/s
Iteration  30: 4371059.442 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_single":
  4375641.883 ±(99.9%) 41810.758 ops/s [Average]
  (min, avg, max) = (4240826.658, 4375641.883, 4491086.475), stdev = 62580.379
  CI (99.9%): [4333831.125, 4417452.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_chunk_single  thrpt   30  4375641.883 ± 41810.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441764.856 ops/s
# Warmup Iteration   2: 531475.668 ops/s
# Warmup Iteration   3: 702078.102 ops/s
# Warmup Iteration   4: 701218.129 ops/s
# Warmup Iteration   5: 656990.671 ops/s
# Warmup Iteration   6: 691119.206 ops/s
# Warmup Iteration   7: 679350.156 ops/s
# Warmup Iteration   8: 676707.055 ops/s
# Warmup Iteration   9: 656920.439 ops/s
# Warmup Iteration  10: 621172.039 ops/s
# Warmup Iteration  11: 680229.995 ops/s
# Warmup Iteration  12: 696040.891 ops/s
# Warmup Iteration  13: 689725.358 ops/s
# Warmup Iteration  14: 696113.569 ops/s
# Warmup Iteration  15: 688827.215 ops/s
# Warmup Iteration  16: 699409.826 ops/s
# Warmup Iteration  17: 716371.893 ops/s
# Warmup Iteration  18: 716816.134 ops/s
# Warmup Iteration  19: 732020.319 ops/s
# Warmup Iteration  20: 731491.898 ops/s
# Warmup Iteration  21: 735895.938 ops/s
# Warmup Iteration  22: 700902.261 ops/s
# Warmup Iteration  23: 721092.173 ops/s
# Warmup Iteration  24: 734690.195 ops/s
# Warmup Iteration  25: 728650.020 ops/s
# Warmup Iteration  26: 735939.562 ops/s
# Warmup Iteration  27: 741178.855 ops/s
# Warmup Iteration  28: 716228.676 ops/s
# Warmup Iteration  29: 733837.207 ops/s
# Warmup Iteration  30: 723871.632 ops/s
Iteration   1: 726591.989 ops/s
Iteration   2: 737561.049 ops/s
Iteration   3: 730885.512 ops/s
Iteration   4: 733390.130 ops/s
Iteration   5: 730743.872 ops/s
Iteration   6: 721850.722 ops/s
Iteration   7: 728545.521 ops/s
Iteration   8: 738144.528 ops/s
Iteration   9: 727712.281 ops/s
Iteration  10: 740681.937 ops/s
Iteration  11: 729423.721 ops/s
Iteration  12: 738013.327 ops/s
Iteration  13: 722221.831 ops/s
Iteration  14: 729568.901 ops/s
Iteration  15: 724464.939 ops/s
Iteration  16: 725577.718 ops/s
Iteration  17: 729688.931 ops/s
Iteration  18: 721414.012 ops/s
Iteration  19: 732287.425 ops/s
Iteration  20: 726188.660 ops/s
Iteration  21: 724197.994 ops/s
Iteration  22: 719143.580 ops/s
Iteration  23: 691758.685 ops/s
Iteration  24: 732251.772 ops/s
Iteration  25: 711125.695 ops/s
Iteration  26: 716471.042 ops/s
Iteration  27: 709823.115 ops/s
Iteration  28: 704207.119 ops/s
Iteration  29: 696833.852 ops/s
Iteration  30: 691004.438 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_chunk_zero_throws":
  723059.143 ±(99.9%) 8782.255 ops/s [Average]
  (min, avg, max) = (691004.438, 723059.143, 740681.937), stdev = 13144.867
  CI (99.9%): [714276.888, 731841.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  723059.143 ± 8782.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1101857.099 ops/s
# Warmup Iteration   2: 1958560.063 ops/s
# Warmup Iteration   3: 2154276.779 ops/s
# Warmup Iteration   4: 2148485.256 ops/s
# Warmup Iteration   5: 2205167.002 ops/s
# Warmup Iteration   6: 1824025.385 ops/s
# Warmup Iteration   7: 2195478.268 ops/s
# Warmup Iteration   8: 2164451.404 ops/s
# Warmup Iteration   9: 2092513.924 ops/s
# Warmup Iteration  10: 2146367.715 ops/s
# Warmup Iteration  11: 2144617.684 ops/s
# Warmup Iteration  12: 2184299.368 ops/s
# Warmup Iteration  13: 2170089.359 ops/s
# Warmup Iteration  14: 2178828.373 ops/s
# Warmup Iteration  15: 2190454.030 ops/s
# Warmup Iteration  16: 2031775.822 ops/s
# Warmup Iteration  17: 2138562.657 ops/s
# Warmup Iteration  18: 2143869.357 ops/s
# Warmup Iteration  19: 2194730.118 ops/s
# Warmup Iteration  20: 2185787.143 ops/s
# Warmup Iteration  21: 2082071.166 ops/s
# Warmup Iteration  22: 2096187.759 ops/s
# Warmup Iteration  23: 2136234.002 ops/s
# Warmup Iteration  24: 2186776.066 ops/s
# Warmup Iteration  25: 2119290.229 ops/s
# Warmup Iteration  26: 2090309.795 ops/s
# Warmup Iteration  27: 2149796.841 ops/s
# Warmup Iteration  28: 2186942.504 ops/s
# Warmup Iteration  29: 2128390.907 ops/s
# Warmup Iteration  30: 2087948.784 ops/s
Iteration   1: 2077972.993 ops/s
Iteration   2: 2182100.600 ops/s
Iteration   3: 2181488.197 ops/s
Iteration   4: 2192327.070 ops/s
Iteration   5: 2135091.282 ops/s
Iteration   6: 2102079.835 ops/s
Iteration   7: 2069711.361 ops/s
Iteration   8: 2157064.077 ops/s
Iteration   9: 2194910.150 ops/s
Iteration  10: 2209562.105 ops/s
Iteration  11: 2225806.344 ops/s
Iteration  12: 2219188.100 ops/s
Iteration  13: 2180247.500 ops/s
Iteration  14: 2192019.986 ops/s
Iteration  15: 2174806.872 ops/s
Iteration  16: 2185624.151 ops/s
Iteration  17: 2206489.041 ops/s
Iteration  18: 2203185.490 ops/s
Iteration  19: 2189864.734 ops/s
Iteration  20: 2144291.194 ops/s
Iteration  21: 2128996.108 ops/s
Iteration  22: 2135381.857 ops/s
Iteration  23: 2173447.046 ops/s
Iteration  24: 2190387.979 ops/s
Iteration  25: 2155036.313 ops/s
Iteration  26: 2054666.549 ops/s
Iteration  27: 2131202.998 ops/s
Iteration  28: 2199966.540 ops/s
Iteration  29: 2187569.980 ops/s
Iteration  30: 2168748.409 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_clear":
  2164974.495 ±(99.9%) 29400.233 ops/s [Average]
  (min, avg, max) = (2054666.549, 2164974.495, 2225806.344), stdev = 44004.887
  CI (99.9%): [2135574.263, 2194374.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_clear  thrpt   30  2164974.495 ± 29400.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718288.093 ops/s
# Warmup Iteration   2: 1331589.172 ops/s
# Warmup Iteration   3: 1491262.362 ops/s
# Warmup Iteration   4: 1499060.854 ops/s
# Warmup Iteration   5: 1365876.481 ops/s
# Warmup Iteration   6: 1319148.391 ops/s
# Warmup Iteration   7: 1507683.254 ops/s
# Warmup Iteration   8: 1498517.767 ops/s
# Warmup Iteration   9: 1490197.092 ops/s
# Warmup Iteration  10: 1479071.639 ops/s
# Warmup Iteration  11: 1479575.398 ops/s
# Warmup Iteration  12: 1494987.417 ops/s
# Warmup Iteration  13: 1504234.035 ops/s
# Warmup Iteration  14: 1502061.556 ops/s
# Warmup Iteration  15: 1492679.870 ops/s
# Warmup Iteration  16: 1439000.153 ops/s
# Warmup Iteration  17: 1491093.774 ops/s
# Warmup Iteration  18: 1488190.393 ops/s
# Warmup Iteration  19: 1499482.637 ops/s
# Warmup Iteration  20: 1485547.879 ops/s
# Warmup Iteration  21: 1481929.732 ops/s
# Warmup Iteration  22: 1456054.826 ops/s
# Warmup Iteration  23: 1501118.502 ops/s
# Warmup Iteration  24: 1472065.195 ops/s
# Warmup Iteration  25: 1503278.095 ops/s
# Warmup Iteration  26: 1507708.797 ops/s
# Warmup Iteration  27: 1500470.452 ops/s
# Warmup Iteration  28: 1504917.782 ops/s
# Warmup Iteration  29: 1491210.725 ops/s
# Warmup Iteration  30: 1441786.310 ops/s
Iteration   1: 1444748.417 ops/s
Iteration   2: 1484893.467 ops/s
Iteration   3: 1490891.798 ops/s
Iteration   4: 1499495.281 ops/s
Iteration   5: 1499323.699 ops/s
Iteration   6: 1502115.836 ops/s
Iteration   7: 1472286.222 ops/s
Iteration   8: 1420900.469 ops/s
Iteration   9: 1433096.518 ops/s
Iteration  10: 1442484.512 ops/s
Iteration  11: 1457371.628 ops/s
Iteration  12: 1523345.636 ops/s
Iteration  13: 1526657.046 ops/s
Iteration  14: 1520662.466 ops/s
Iteration  15: 1514258.743 ops/s
Iteration  16: 1506481.565 ops/s
Iteration  17: 1471084.755 ops/s
Iteration  18: 1491641.865 ops/s
Iteration  19: 1435263.638 ops/s
Iteration  20: 1510332.213 ops/s
Iteration  21: 1494151.832 ops/s
Iteration  22: 1478480.618 ops/s
Iteration  23: 1435000.288 ops/s
Iteration  24: 1481141.960 ops/s
Iteration  25: 1511763.394 ops/s
Iteration  26: 1512725.526 ops/s
Iteration  27: 1487492.052 ops/s
Iteration  28: 1499115.865 ops/s
Iteration  29: 1496938.262 ops/s
Iteration  30: 1487210.664 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collect":
  1484378.541 ±(99.9%) 19817.104 ops/s [Average]
  (min, avg, max) = (1420900.469, 1484378.541, 1526657.046), stdev = 29661.311
  CI (99.9%): [1464561.437, 1504195.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collect  thrpt   30  1484378.541 ± 19817.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2707925.195 ops/s
# Warmup Iteration   2: 6164186.496 ops/s
# Warmup Iteration   3: 6128460.978 ops/s
# Warmup Iteration   4: 5256846.509 ops/s
# Warmup Iteration   5: 6383415.501 ops/s
# Warmup Iteration   6: 6434158.548 ops/s
# Warmup Iteration   7: 6485914.549 ops/s
# Warmup Iteration   8: 6381447.378 ops/s
# Warmup Iteration   9: 6230712.225 ops/s
# Warmup Iteration  10: 6246949.421 ops/s
# Warmup Iteration  11: 6238187.645 ops/s
# Warmup Iteration  12: 6337459.630 ops/s
# Warmup Iteration  13: 6410678.106 ops/s
# Warmup Iteration  14: 6308119.068 ops/s
# Warmup Iteration  15: 6362353.421 ops/s
# Warmup Iteration  16: 6230662.938 ops/s
# Warmup Iteration  17: 6318481.636 ops/s
# Warmup Iteration  18: 6443123.813 ops/s
# Warmup Iteration  19: 6368731.315 ops/s
# Warmup Iteration  20: 6324849.423 ops/s
# Warmup Iteration  21: 6375501.019 ops/s
# Warmup Iteration  22: 6413350.169 ops/s
# Warmup Iteration  23: 6354956.852 ops/s
# Warmup Iteration  24: 6331687.429 ops/s
# Warmup Iteration  25: 6303945.082 ops/s
# Warmup Iteration  26: 6188563.017 ops/s
# Warmup Iteration  27: 6273452.565 ops/s
# Warmup Iteration  28: 6388994.386 ops/s
# Warmup Iteration  29: 6355448.639 ops/s
# Warmup Iteration  30: 6335553.143 ops/s
Iteration   1: 6400600.600 ops/s
Iteration   2: 6325866.448 ops/s
Iteration   3: 6334372.696 ops/s
Iteration   4: 6402191.786 ops/s
Iteration   5: 6042551.004 ops/s
Iteration   6: 6161852.520 ops/s
Iteration   7: 5908748.666 ops/s
Iteration   8: 6236564.740 ops/s
Iteration   9: 6371965.972 ops/s
Iteration  10: 6393807.588 ops/s
Iteration  11: 6361219.693 ops/s
Iteration  12: 6401210.435 ops/s
Iteration  13: 6356272.185 ops/s
Iteration  14: 6512491.354 ops/s
Iteration  15: 6502718.856 ops/s
Iteration  16: 6458695.713 ops/s
Iteration  17: 6329895.013 ops/s
Iteration  18: 6415097.450 ops/s
Iteration  19: 6327659.193 ops/s
Iteration  20: 6034404.043 ops/s
Iteration  21: 6092121.532 ops/s
Iteration  22: 6154853.794 ops/s
Iteration  23: 6114594.656 ops/s
Iteration  24: 6246485.854 ops/s
Iteration  25: 6100112.000 ops/s
Iteration  26: 6175332.523 ops/s
Iteration  27: 6119726.844 ops/s
Iteration  28: 6209932.835 ops/s
Iteration  29: 6293747.838 ops/s
Iteration  30: 6028878.044 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBoolean":
  6260465.729 ±(99.9%) 105066.781 ops/s [Average]
  (min, avg, max) = (5908748.666, 6260465.729, 6512491.354), stdev = 157259.024
  CI (99.9%): [6155398.948, 6365532.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  6260465.729 ± 105066.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2832077.664 ops/s
# Warmup Iteration   2: 6971229.434 ops/s
# Warmup Iteration   3: 7059837.094 ops/s
# Warmup Iteration   4: 5699396.995 ops/s
# Warmup Iteration   5: 6983520.170 ops/s
# Warmup Iteration   6: 7109695.137 ops/s
# Warmup Iteration   7: 7119838.754 ops/s
# Warmup Iteration   8: 7123906.796 ops/s
# Warmup Iteration   9: 7050221.181 ops/s
# Warmup Iteration  10: 6925186.489 ops/s
# Warmup Iteration  11: 7146205.872 ops/s
# Warmup Iteration  12: 7276842.391 ops/s
# Warmup Iteration  13: 7153072.246 ops/s
# Warmup Iteration  14: 7302453.080 ops/s
# Warmup Iteration  15: 7037311.836 ops/s
# Warmup Iteration  16: 7163600.493 ops/s
# Warmup Iteration  17: 7224914.355 ops/s
# Warmup Iteration  18: 7107749.157 ops/s
# Warmup Iteration  19: 7285984.021 ops/s
# Warmup Iteration  20: 6876377.802 ops/s
# Warmup Iteration  21: 7018636.090 ops/s
# Warmup Iteration  22: 7179392.384 ops/s
# Warmup Iteration  23: 7275487.251 ops/s
# Warmup Iteration  24: 7275949.803 ops/s
# Warmup Iteration  25: 7238881.657 ops/s
# Warmup Iteration  26: 7379469.659 ops/s
# Warmup Iteration  27: 7288137.872 ops/s
# Warmup Iteration  28: 7270839.025 ops/s
# Warmup Iteration  29: 7265773.837 ops/s
# Warmup Iteration  30: 7056694.115 ops/s
Iteration   1: 7116848.561 ops/s
Iteration   2: 6878958.124 ops/s
Iteration   3: 7117013.750 ops/s
Iteration   4: 7188249.793 ops/s
Iteration   5: 6955979.470 ops/s
Iteration   6: 7174959.653 ops/s
Iteration   7: 7081413.466 ops/s
Iteration   8: 6992950.021 ops/s
Iteration   9: 7118671.102 ops/s
Iteration  10: 7146145.056 ops/s
Iteration  11: 6998251.602 ops/s
Iteration  12: 6692118.173 ops/s
Iteration  13: 7122849.617 ops/s
Iteration  14: 7191021.012 ops/s
Iteration  15: 7039485.400 ops/s
Iteration  16: 7295463.867 ops/s
Iteration  17: 7283259.022 ops/s
Iteration  18: 7196951.852 ops/s
Iteration  19: 7023325.682 ops/s
Iteration  20: 6994476.414 ops/s
Iteration  21: 7147053.534 ops/s
Iteration  22: 6997808.263 ops/s
Iteration  23: 6969421.186 ops/s
Iteration  24: 6894469.197 ops/s
Iteration  25: 6797365.324 ops/s
Iteration  26: 7082228.498 ops/s
Iteration  27: 7069723.104 ops/s
Iteration  28: 7166414.589 ops/s
Iteration  29: 7276934.506 ops/s
Iteration  30: 7254202.369 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  7075467.074 ±(99.9%) 95414.987 ops/s [Average]
  (min, avg, max) = (6692118.173, 7075467.074, 7295463.867), stdev = 142812.672
  CI (99.9%): [6980052.087, 7170882.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  7075467.074 ± 95414.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1767638.964 ops/s
# Warmup Iteration   2: 3636874.905 ops/s
# Warmup Iteration   3: 3889863.678 ops/s
# Warmup Iteration   4: 3955675.082 ops/s
# Warmup Iteration   5: 3383641.479 ops/s
# Warmup Iteration   6: 4083863.751 ops/s
# Warmup Iteration   7: 4077645.286 ops/s
# Warmup Iteration   8: 4077944.712 ops/s
# Warmup Iteration   9: 4038966.175 ops/s
# Warmup Iteration  10: 4010758.870 ops/s
# Warmup Iteration  11: 3999143.916 ops/s
# Warmup Iteration  12: 3984073.242 ops/s
# Warmup Iteration  13: 3987818.248 ops/s
# Warmup Iteration  14: 3988148.918 ops/s
# Warmup Iteration  15: 3968305.629 ops/s
# Warmup Iteration  16: 3991836.560 ops/s
# Warmup Iteration  17: 3973714.511 ops/s
# Warmup Iteration  18: 3986722.593 ops/s
# Warmup Iteration  19: 3971363.342 ops/s
# Warmup Iteration  20: 3855356.078 ops/s
# Warmup Iteration  21: 3927548.746 ops/s
# Warmup Iteration  22: 4016776.761 ops/s
# Warmup Iteration  23: 4013678.741 ops/s
# Warmup Iteration  24: 3986769.989 ops/s
# Warmup Iteration  25: 3988112.579 ops/s
# Warmup Iteration  26: 3974083.734 ops/s
# Warmup Iteration  27: 4033782.053 ops/s
# Warmup Iteration  28: 3992991.246 ops/s
# Warmup Iteration  29: 4012247.597 ops/s
# Warmup Iteration  30: 3976848.107 ops/s
Iteration   1: 3954267.055 ops/s
Iteration   2: 3965174.821 ops/s
Iteration   3: 3948127.256 ops/s
Iteration   4: 4013798.235 ops/s
Iteration   5: 3975430.945 ops/s
Iteration   6: 4014049.809 ops/s
Iteration   7: 3940644.235 ops/s
Iteration   8: 4042694.344 ops/s
Iteration   9: 3970031.324 ops/s
Iteration  10: 3970932.246 ops/s
Iteration  11: 4023102.103 ops/s
Iteration  12: 4001073.309 ops/s
Iteration  13: 3999440.413 ops/s
Iteration  14: 3989738.705 ops/s
Iteration  15: 3861516.387 ops/s
Iteration  16: 3876625.493 ops/s
Iteration  17: 3901850.532 ops/s
Iteration  18: 4072038.782 ops/s
Iteration  19: 4073812.433 ops/s
Iteration  20: 3969638.275 ops/s
Iteration  21: 4029239.730 ops/s
Iteration  22: 3987171.981 ops/s
Iteration  23: 3994138.229 ops/s
Iteration  24: 3997596.443 ops/s
Iteration  25: 4000537.075 ops/s
Iteration  26: 3940440.159 ops/s
Iteration  27: 3983879.315 ops/s
Iteration  28: 3970261.242 ops/s
Iteration  29: 4020516.170 ops/s
Iteration  30: 3989661.259 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  3982580.944 ±(99.9%) 32229.477 ops/s [Average]
  (min, avg, max) = (3861516.387, 3982580.944, 4073812.433), stdev = 48239.568
  CI (99.9%): [3950351.466, 4014810.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  3982580.944 ± 32229.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573990.601 ops/s
# Warmup Iteration   2: 1269741.875 ops/s
# Warmup Iteration   3: 1355027.228 ops/s
# Warmup Iteration   4: 1262556.963 ops/s
# Warmup Iteration   5: 1241612.845 ops/s
# Warmup Iteration   6: 1372874.033 ops/s
# Warmup Iteration   7: 1364906.910 ops/s
# Warmup Iteration   8: 1363969.524 ops/s
# Warmup Iteration   9: 1365683.743 ops/s
# Warmup Iteration  10: 1381333.786 ops/s
# Warmup Iteration  11: 1365008.618 ops/s
# Warmup Iteration  12: 1332330.521 ops/s
# Warmup Iteration  13: 1371988.440 ops/s
# Warmup Iteration  14: 1377401.517 ops/s
# Warmup Iteration  15: 1354338.624 ops/s
# Warmup Iteration  16: 1357491.879 ops/s
# Warmup Iteration  17: 1303707.509 ops/s
# Warmup Iteration  18: 1323183.939 ops/s
# Warmup Iteration  19: 1321005.880 ops/s
# Warmup Iteration  20: 1350552.745 ops/s
# Warmup Iteration  21: 1364225.137 ops/s
# Warmup Iteration  22: 1313988.537 ops/s
# Warmup Iteration  23: 1312774.023 ops/s
# Warmup Iteration  24: 1375758.324 ops/s
# Warmup Iteration  25: 1389992.606 ops/s
# Warmup Iteration  26: 1323728.180 ops/s
# Warmup Iteration  27: 1365375.522 ops/s
# Warmup Iteration  28: 1335753.650 ops/s
# Warmup Iteration  29: 1334985.113 ops/s
# Warmup Iteration  30: 1328992.363 ops/s
Iteration   1: 1386303.659 ops/s
Iteration   2: 1365364.031 ops/s
Iteration   3: 1349630.350 ops/s
Iteration   4: 1300994.942 ops/s
Iteration   5: 1350924.252 ops/s
Iteration   6: 1369783.569 ops/s
Iteration   7: 1345853.031 ops/s
Iteration   8: 1361585.240 ops/s
Iteration   9: 1378245.152 ops/s
Iteration  10: 1341794.333 ops/s
Iteration  11: 1364785.224 ops/s
Iteration  12: 1378652.687 ops/s
Iteration  13: 1348972.257 ops/s
Iteration  14: 1360778.546 ops/s
Iteration  15: 1366466.062 ops/s
Iteration  16: 1344268.797 ops/s
Iteration  17: 1350479.787 ops/s
Iteration  18: 1369515.838 ops/s
Iteration  19: 1336581.040 ops/s
Iteration  20: 1357002.031 ops/s
Iteration  21: 1368151.370 ops/s
Iteration  22: 1372699.659 ops/s
Iteration  23: 1282636.890 ops/s
Iteration  24: 1309933.183 ops/s
Iteration  25: 1330076.142 ops/s
Iteration  26: 1327889.443 ops/s
Iteration  27: 1376419.021 ops/s
Iteration  28: 1396448.180 ops/s
Iteration  29: 1380639.536 ops/s
Iteration  30: 1323984.405 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByte":
  1353228.622 ±(99.9%) 17310.309 ops/s [Average]
  (min, avg, max) = (1282636.890, 1353228.622, 1396448.180), stdev = 25909.258
  CI (99.9%): [1335918.313, 1370538.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectByte  thrpt   30  1353228.622 ± 17310.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 912311.198 ops/s
# Warmup Iteration   2: 2068023.992 ops/s
# Warmup Iteration   3: 2289803.892 ops/s
# Warmup Iteration   4: 2111892.220 ops/s
# Warmup Iteration   5: 2058610.294 ops/s
# Warmup Iteration   6: 2299910.841 ops/s
# Warmup Iteration   7: 2275957.094 ops/s
# Warmup Iteration   8: 2281248.556 ops/s
# Warmup Iteration   9: 2287989.269 ops/s
# Warmup Iteration  10: 2333901.231 ops/s
# Warmup Iteration  11: 2302666.292 ops/s
# Warmup Iteration  12: 2294924.982 ops/s
# Warmup Iteration  13: 2292607.877 ops/s
# Warmup Iteration  14: 2269644.253 ops/s
# Warmup Iteration  15: 2246103.833 ops/s
# Warmup Iteration  16: 2276186.312 ops/s
# Warmup Iteration  17: 2294703.200 ops/s
# Warmup Iteration  18: 2314082.969 ops/s
# Warmup Iteration  19: 2277219.246 ops/s
# Warmup Iteration  20: 2293902.459 ops/s
# Warmup Iteration  21: 2282221.968 ops/s
# Warmup Iteration  22: 2314329.673 ops/s
# Warmup Iteration  23: 2288507.571 ops/s
# Warmup Iteration  24: 2281976.647 ops/s
# Warmup Iteration  25: 2309186.503 ops/s
# Warmup Iteration  26: 2302956.870 ops/s
# Warmup Iteration  27: 2300530.470 ops/s
# Warmup Iteration  28: 2290967.983 ops/s
# Warmup Iteration  29: 2238197.283 ops/s
# Warmup Iteration  30: 2204306.022 ops/s
Iteration   1: 2330734.984 ops/s
Iteration   2: 2212516.385 ops/s
Iteration   3: 2315355.573 ops/s
Iteration   4: 2285448.049 ops/s
Iteration   5: 2242919.193 ops/s
Iteration   6: 2200847.506 ops/s
Iteration   7: 2190893.830 ops/s
Iteration   8: 2185235.914 ops/s
Iteration   9: 2215490.535 ops/s
Iteration  10: 2294210.675 ops/s
Iteration  11: 2268690.402 ops/s
Iteration  12: 2286033.574 ops/s
Iteration  13: 2204147.010 ops/s
Iteration  14: 2273903.634 ops/s
Iteration  15: 2293334.586 ops/s
Iteration  16: 2283112.612 ops/s
Iteration  17: 2308112.699 ops/s
Iteration  18: 2216805.602 ops/s
Iteration  19: 2200685.318 ops/s
Iteration  20: 2268181.537 ops/s
Iteration  21: 2265061.175 ops/s
Iteration  22: 2345625.918 ops/s
Iteration  23: 2329658.152 ops/s
Iteration  24: 2294245.467 ops/s
Iteration  25: 2215316.838 ops/s
Iteration  26: 2168736.442 ops/s
Iteration  27: 2222318.273 ops/s
Iteration  28: 2185873.633 ops/s
Iteration  29: 2309210.029 ops/s
Iteration  30: 2331446.330 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2258138.396 ±(99.9%) 35047.059 ops/s [Average]
  (min, avg, max) = (2168736.442, 2258138.396, 2345625.918), stdev = 52456.792
  CI (99.9%): [2223091.337, 2293185.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2258138.396 ± 35047.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 831619.270 ops/s
# Warmup Iteration   2: 1786331.005 ops/s
# Warmup Iteration   3: 1878467.001 ops/s
# Warmup Iteration   4: 1907988.690 ops/s
# Warmup Iteration   5: 1609983.009 ops/s
# Warmup Iteration   6: 1936634.324 ops/s
# Warmup Iteration   7: 1937537.711 ops/s
# Warmup Iteration   8: 1943203.507 ops/s
# Warmup Iteration   9: 1958705.420 ops/s
# Warmup Iteration  10: 1952512.522 ops/s
# Warmup Iteration  11: 1949216.703 ops/s
# Warmup Iteration  12: 1932345.485 ops/s
# Warmup Iteration  13: 1914399.831 ops/s
# Warmup Iteration  14: 1919154.368 ops/s
# Warmup Iteration  15: 1886650.597 ops/s
# Warmup Iteration  16: 1830747.276 ops/s
# Warmup Iteration  17: 1940830.984 ops/s
# Warmup Iteration  18: 1874236.063 ops/s
# Warmup Iteration  19: 1854926.323 ops/s
# Warmup Iteration  20: 1947121.806 ops/s
# Warmup Iteration  21: 1956487.730 ops/s
# Warmup Iteration  22: 1968021.838 ops/s
# Warmup Iteration  23: 1941172.467 ops/s
# Warmup Iteration  24: 1915483.329 ops/s
# Warmup Iteration  25: 1970474.683 ops/s
# Warmup Iteration  26: 1967582.312 ops/s
# Warmup Iteration  27: 1969988.744 ops/s
# Warmup Iteration  28: 1857086.918 ops/s
# Warmup Iteration  29: 1852192.021 ops/s
# Warmup Iteration  30: 1903774.258 ops/s
Iteration   1: 1919042.340 ops/s
Iteration   2: 1944680.675 ops/s
Iteration   3: 1944602.904 ops/s
Iteration   4: 1946260.890 ops/s
Iteration   5: 1937561.030 ops/s
Iteration   6: 1892926.480 ops/s
Iteration   7: 1933769.276 ops/s
Iteration   8: 1938978.062 ops/s
Iteration   9: 1935633.441 ops/s
Iteration  10: 1969041.217 ops/s
Iteration  11: 1967671.000 ops/s
Iteration  12: 1963153.990 ops/s
Iteration  13: 1938838.875 ops/s
Iteration  14: 1960662.420 ops/s
Iteration  15: 1962134.544 ops/s
Iteration  16: 1966897.154 ops/s
Iteration  17: 1956300.515 ops/s
Iteration  18: 1947100.188 ops/s
Iteration  19: 1966494.099 ops/s
Iteration  20: 1968955.305 ops/s
Iteration  21: 1945676.247 ops/s
Iteration  22: 1957464.661 ops/s
Iteration  23: 1956234.415 ops/s
Iteration  24: 1951173.437 ops/s
Iteration  25: 1945923.694 ops/s
Iteration  26: 1982671.814 ops/s
Iteration  27: 1986118.011 ops/s
Iteration  28: 1948665.500 ops/s
Iteration  29: 1959040.787 ops/s
Iteration  30: 1963355.885 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithTarget":
  1951900.962 ±(99.9%) 12337.046 ops/s [Average]
  (min, avg, max) = (1892926.480, 1951900.962, 1986118.011), stdev = 18465.512
  CI (99.9%): [1939563.915, 1964238.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  1951900.962 ± 12337.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587857.097 ops/s
# Warmup Iteration   2: 1372294.397 ops/s
# Warmup Iteration   3: 1469849.664 ops/s
# Warmup Iteration   4: 1202233.023 ops/s
# Warmup Iteration   5: 1452667.376 ops/s
# Warmup Iteration   6: 1457890.371 ops/s
# Warmup Iteration   7: 1422080.851 ops/s
# Warmup Iteration   8: 1403090.333 ops/s
# Warmup Iteration   9: 1457030.322 ops/s
# Warmup Iteration  10: 1478870.615 ops/s
# Warmup Iteration  11: 1484118.693 ops/s
# Warmup Iteration  12: 1501030.379 ops/s
# Warmup Iteration  13: 1464303.914 ops/s
# Warmup Iteration  14: 1471996.861 ops/s
# Warmup Iteration  15: 1489125.601 ops/s
# Warmup Iteration  16: 1455315.888 ops/s
# Warmup Iteration  17: 1482527.760 ops/s
# Warmup Iteration  18: 1458869.476 ops/s
# Warmup Iteration  19: 1489708.424 ops/s
# Warmup Iteration  20: 1476137.179 ops/s
# Warmup Iteration  21: 1457146.609 ops/s
# Warmup Iteration  22: 1441000.258 ops/s
# Warmup Iteration  23: 1468239.458 ops/s
# Warmup Iteration  24: 1470132.733 ops/s
# Warmup Iteration  25: 1485330.633 ops/s
# Warmup Iteration  26: 1485234.684 ops/s
# Warmup Iteration  27: 1434466.642 ops/s
# Warmup Iteration  28: 1415464.202 ops/s
# Warmup Iteration  29: 1443772.703 ops/s
# Warmup Iteration  30: 1489788.141 ops/s
Iteration   1: 1481597.564 ops/s
Iteration   2: 1482821.824 ops/s
Iteration   3: 1453766.043 ops/s
Iteration   4: 1458977.906 ops/s
Iteration   5: 1441676.475 ops/s
Iteration   6: 1431214.785 ops/s
Iteration   7: 1487504.484 ops/s
Iteration   8: 1487336.874 ops/s
Iteration   9: 1444185.545 ops/s
Iteration  10: 1461707.843 ops/s
Iteration  11: 1477584.746 ops/s
Iteration  12: 1489831.459 ops/s
Iteration  13: 1424620.510 ops/s
Iteration  14: 1478035.808 ops/s
Iteration  15: 1484157.651 ops/s
Iteration  16: 1491602.811 ops/s
Iteration  17: 1407831.517 ops/s
Iteration  18: 1421065.695 ops/s
Iteration  19: 1412633.253 ops/s
Iteration  20: 1464517.286 ops/s
Iteration  21: 1416314.994 ops/s
Iteration  22: 1446278.189 ops/s
Iteration  23: 1438623.449 ops/s
Iteration  24: 1400122.181 ops/s
Iteration  25: 1497119.067 ops/s
Iteration  26: 1500612.915 ops/s
Iteration  27: 1451235.105 ops/s
Iteration  28: 1480110.539 ops/s
Iteration  29: 1473731.303 ops/s
Iteration  30: 1470611.884 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectChar":
  1458580.990 ±(99.9%) 19497.030 ops/s [Average]
  (min, avg, max) = (1400122.181, 1458580.990, 1500612.915), stdev = 29182.238
  CI (99.9%): [1439083.961, 1478078.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectChar  thrpt   30  1458580.990 ± 19497.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1035950.972 ops/s
# Warmup Iteration   2: 2508803.289 ops/s
# Warmup Iteration   3: 2543367.636 ops/s
# Warmup Iteration   4: 2112440.021 ops/s
# Warmup Iteration   5: 2531256.856 ops/s
# Warmup Iteration   6: 2585127.232 ops/s
# Warmup Iteration   7: 2508428.069 ops/s
# Warmup Iteration   8: 2549480.378 ops/s
# Warmup Iteration   9: 2575547.107 ops/s
# Warmup Iteration  10: 2578741.190 ops/s
# Warmup Iteration  11: 2542118.489 ops/s
# Warmup Iteration  12: 2567981.529 ops/s
# Warmup Iteration  13: 2536211.976 ops/s
# Warmup Iteration  14: 2549661.744 ops/s
# Warmup Iteration  15: 2573708.202 ops/s
# Warmup Iteration  16: 2530396.078 ops/s
# Warmup Iteration  17: 2538651.080 ops/s
# Warmup Iteration  18: 2551590.395 ops/s
# Warmup Iteration  19: 2575405.555 ops/s
# Warmup Iteration  20: 2559386.442 ops/s
# Warmup Iteration  21: 2545863.213 ops/s
# Warmup Iteration  22: 2545496.422 ops/s
# Warmup Iteration  23: 2558477.762 ops/s
# Warmup Iteration  24: 2545612.913 ops/s
# Warmup Iteration  25: 2570700.565 ops/s
# Warmup Iteration  26: 2502392.880 ops/s
# Warmup Iteration  27: 2540609.756 ops/s
# Warmup Iteration  28: 2575296.446 ops/s
# Warmup Iteration  29: 2571527.183 ops/s
# Warmup Iteration  30: 2551690.374 ops/s
Iteration   1: 2554918.717 ops/s
Iteration   2: 2563739.654 ops/s
Iteration   3: 2534555.921 ops/s
Iteration   4: 2569955.708 ops/s
Iteration   5: 2572694.926 ops/s
Iteration   6: 2553193.141 ops/s
Iteration   7: 2488832.016 ops/s
Iteration   8: 2443602.206 ops/s
Iteration   9: 2460703.756 ops/s
Iteration  10: 2449764.779 ops/s
Iteration  11: 2437699.170 ops/s
Iteration  12: 2545655.965 ops/s
Iteration  13: 2484950.394 ops/s
Iteration  14: 2526955.175 ops/s
Iteration  15: 2497122.119 ops/s
Iteration  16: 2574589.963 ops/s
Iteration  17: 2569671.496 ops/s
Iteration  18: 2465659.667 ops/s
Iteration  19: 2456939.514 ops/s
Iteration  20: 2431782.215 ops/s
Iteration  21: 2468437.253 ops/s
Iteration  22: 2500793.139 ops/s
Iteration  23: 2578298.520 ops/s
Iteration  24: 2600383.677 ops/s
Iteration  25: 2555913.817 ops/s
Iteration  26: 2468462.240 ops/s
Iteration  27: 2546744.127 ops/s
Iteration  28: 2460254.508 ops/s
Iteration  29: 2400962.573 ops/s
Iteration  30: 2505768.034 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2508966.813 ±(99.9%) 36426.631 ops/s [Average]
  (min, avg, max) = (2400962.573, 2508966.813, 2600383.677), stdev = 54521.671
  CI (99.9%): [2472540.182, 2545393.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2508966.813 ± 36426.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875011.060 ops/s
# Warmup Iteration   2: 1950994.362 ops/s
# Warmup Iteration   3: 2015607.943 ops/s
# Warmup Iteration   4: 1879607.218 ops/s
# Warmup Iteration   5: 1715621.346 ops/s
# Warmup Iteration   6: 2001440.434 ops/s
# Warmup Iteration   7: 1995563.240 ops/s
# Warmup Iteration   8: 2032027.908 ops/s
# Warmup Iteration   9: 2010373.457 ops/s
# Warmup Iteration  10: 1986633.123 ops/s
# Warmup Iteration  11: 2030954.047 ops/s
# Warmup Iteration  12: 2040452.782 ops/s
# Warmup Iteration  13: 2035185.682 ops/s
# Warmup Iteration  14: 2075808.638 ops/s
# Warmup Iteration  15: 2039913.232 ops/s
# Warmup Iteration  16: 2005405.726 ops/s
# Warmup Iteration  17: 2044560.754 ops/s
# Warmup Iteration  18: 2057031.540 ops/s
# Warmup Iteration  19: 2048205.788 ops/s
# Warmup Iteration  20: 2069529.116 ops/s
# Warmup Iteration  21: 2042641.762 ops/s
# Warmup Iteration  22: 2047543.254 ops/s
# Warmup Iteration  23: 2065439.025 ops/s
# Warmup Iteration  24: 2033383.649 ops/s
# Warmup Iteration  25: 2049381.790 ops/s
# Warmup Iteration  26: 2038312.088 ops/s
# Warmup Iteration  27: 1981772.792 ops/s
# Warmup Iteration  28: 2047525.234 ops/s
# Warmup Iteration  29: 2022144.649 ops/s
# Warmup Iteration  30: 2046646.252 ops/s
Iteration   1: 2031344.017 ops/s
Iteration   2: 2033958.867 ops/s
Iteration   3: 2006191.949 ops/s
Iteration   4: 1958389.192 ops/s
Iteration   5: 2001808.135 ops/s
Iteration   6: 2075519.938 ops/s
Iteration   7: 2058879.942 ops/s
Iteration   8: 2041367.199 ops/s
Iteration   9: 2048007.293 ops/s
Iteration  10: 2067051.300 ops/s
Iteration  11: 2053659.891 ops/s
Iteration  12: 2076818.984 ops/s
Iteration  13: 2067045.747 ops/s
Iteration  14: 2084683.448 ops/s
Iteration  15: 2068000.574 ops/s
Iteration  16: 2078358.216 ops/s
Iteration  17: 2069830.878 ops/s
Iteration  18: 2056069.185 ops/s
Iteration  19: 2060840.942 ops/s
Iteration  20: 2078743.353 ops/s
Iteration  21: 2060345.672 ops/s
Iteration  22: 2077652.766 ops/s
Iteration  23: 2071619.744 ops/s
Iteration  24: 2075537.356 ops/s
Iteration  25: 2041600.241 ops/s
Iteration  26: 2062895.492 ops/s
Iteration  27: 1959109.484 ops/s
Iteration  28: 1972870.662 ops/s
Iteration  29: 2078990.315 ops/s
Iteration  30: 2049999.321 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithTarget":
  2048906.337 ±(99.9%) 23640.813 ops/s [Average]
  (min, avg, max) = (1958389.192, 2048906.337, 2084683.448), stdev = 35384.459
  CI (99.9%): [2025265.523, 2072547.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2048906.337 ± 23640.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 442385.705 ops/s
# Warmup Iteration   2: 1051127.802 ops/s
# Warmup Iteration   3: 1105917.410 ops/s
# Warmup Iteration   4: 924007.240 ops/s
# Warmup Iteration   5: 1059382.373 ops/s
# Warmup Iteration   6: 1108482.776 ops/s
# Warmup Iteration   7: 1109048.715 ops/s
# Warmup Iteration   8: 1054810.156 ops/s
# Warmup Iteration   9: 1098417.157 ops/s
# Warmup Iteration  10: 1092035.712 ops/s
# Warmup Iteration  11: 1079903.411 ops/s
# Warmup Iteration  12: 1098916.749 ops/s
# Warmup Iteration  13: 1066660.857 ops/s
# Warmup Iteration  14: 1098528.834 ops/s
# Warmup Iteration  15: 1100516.630 ops/s
# Warmup Iteration  16: 1043959.528 ops/s
# Warmup Iteration  17: 1099630.410 ops/s
# Warmup Iteration  18: 1102548.936 ops/s
# Warmup Iteration  19: 1098006.667 ops/s
# Warmup Iteration  20: 1104430.121 ops/s
# Warmup Iteration  21: 1095724.820 ops/s
# Warmup Iteration  22: 1099742.826 ops/s
# Warmup Iteration  23: 1074701.823 ops/s
# Warmup Iteration  24: 1115638.745 ops/s
# Warmup Iteration  25: 1110327.997 ops/s
# Warmup Iteration  26: 1055992.067 ops/s
# Warmup Iteration  27: 1076028.502 ops/s
# Warmup Iteration  28: 1111437.841 ops/s
# Warmup Iteration  29: 1087599.808 ops/s
# Warmup Iteration  30: 1089283.639 ops/s
Iteration   1: 1105059.998 ops/s
Iteration   2: 1099246.065 ops/s
Iteration   3: 1102733.952 ops/s
Iteration   4: 1090288.345 ops/s
Iteration   5: 1086096.373 ops/s
Iteration   6: 1084519.557 ops/s
Iteration   7: 1069636.728 ops/s
Iteration   8: 1104679.625 ops/s
Iteration   9: 1049346.632 ops/s
Iteration  10: 1044367.049 ops/s
Iteration  11: 1024102.369 ops/s
Iteration  12: 1055621.006 ops/s
Iteration  13: 1033608.809 ops/s
Iteration  14: 1060919.646 ops/s
Iteration  15: 1102063.123 ops/s
Iteration  16: 1088402.315 ops/s
Iteration  17: 1049818.319 ops/s
Iteration  18: 1069043.979 ops/s
Iteration  19: 1091916.346 ops/s
Iteration  20: 1104327.260 ops/s
Iteration  21: 1124230.979 ops/s
Iteration  22: 1121680.718 ops/s
Iteration  23: 1085493.885 ops/s
Iteration  24: 1044389.093 ops/s
Iteration  25: 1076629.626 ops/s
Iteration  26: 1051611.117 ops/s
Iteration  27: 1051724.526 ops/s
Iteration  28: 1102116.402 ops/s
Iteration  29: 1102346.768 ops/s
Iteration  30: 1061822.700 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDouble":
  1077928.110 ±(99.9%) 17961.948 ops/s [Average]
  (min, avg, max) = (1024102.369, 1077928.110, 1124230.979), stdev = 26884.601
  CI (99.9%): [1059966.162, 1095890.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectDouble  thrpt   30  1077928.110 ± 17961.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834322.713 ops/s
# Warmup Iteration   2: 2106655.876 ops/s
# Warmup Iteration   3: 2069159.807 ops/s
# Warmup Iteration   4: 1662609.487 ops/s
# Warmup Iteration   5: 2087705.314 ops/s
# Warmup Iteration   6: 2098041.379 ops/s
# Warmup Iteration   7: 2033512.581 ops/s
# Warmup Iteration   8: 2102698.258 ops/s
# Warmup Iteration   9: 2048678.225 ops/s
# Warmup Iteration  10: 2085995.364 ops/s
# Warmup Iteration  11: 2085204.271 ops/s
# Warmup Iteration  12: 2113178.948 ops/s
# Warmup Iteration  13: 2108302.641 ops/s
# Warmup Iteration  14: 2081915.384 ops/s
# Warmup Iteration  15: 2080726.974 ops/s
# Warmup Iteration  16: 2110262.444 ops/s
# Warmup Iteration  17: 2051210.451 ops/s
# Warmup Iteration  18: 2078818.430 ops/s
# Warmup Iteration  19: 2037815.495 ops/s
# Warmup Iteration  20: 2090952.108 ops/s
# Warmup Iteration  21: 2061620.643 ops/s
# Warmup Iteration  22: 2080668.220 ops/s
# Warmup Iteration  23: 2098510.056 ops/s
# Warmup Iteration  24: 2091609.832 ops/s
# Warmup Iteration  25: 2088688.010 ops/s
# Warmup Iteration  26: 2104003.815 ops/s
# Warmup Iteration  27: 2100749.787 ops/s
# Warmup Iteration  28: 2088165.395 ops/s
# Warmup Iteration  29: 2090687.628 ops/s
# Warmup Iteration  30: 2071148.955 ops/s
Iteration   1: 2081030.476 ops/s
Iteration   2: 2082689.679 ops/s
Iteration   3: 2114881.421 ops/s
Iteration   4: 2109339.727 ops/s
Iteration   5: 2094915.689 ops/s
Iteration   6: 2019738.680 ops/s
Iteration   7: 2048253.714 ops/s
Iteration   8: 2106691.380 ops/s
Iteration   9: 2089394.357 ops/s
Iteration  10: 2109003.630 ops/s
Iteration  11: 2092031.369 ops/s
Iteration  12: 2074407.491 ops/s
Iteration  13: 2078630.267 ops/s
Iteration  14: 2087183.542 ops/s
Iteration  15: 2000493.988 ops/s
Iteration  16: 2082978.915 ops/s
Iteration  17: 2091465.497 ops/s
Iteration  18: 2110475.502 ops/s
Iteration  19: 2093373.696 ops/s
Iteration  20: 2091763.350 ops/s
Iteration  21: 2085446.783 ops/s
Iteration  22: 2114081.267 ops/s
Iteration  23: 2079671.964 ops/s
Iteration  24: 2061654.135 ops/s
Iteration  25: 2028860.134 ops/s
Iteration  26: 2058804.819 ops/s
Iteration  27: 2119167.773 ops/s
Iteration  28: 1984123.570 ops/s
Iteration  29: 2090693.645 ops/s
Iteration  30: 2029718.134 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2077032.153 ±(99.9%) 22951.662 ops/s [Average]
  (min, avg, max) = (1984123.570, 2077032.153, 2119167.773), stdev = 34352.971
  CI (99.9%): [2054080.491, 2099983.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2077032.153 ± 22951.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709460.213 ops/s
# Warmup Iteration   2: 1619415.997 ops/s
# Warmup Iteration   3: 1650491.867 ops/s
# Warmup Iteration   4: 1460902.515 ops/s
# Warmup Iteration   5: 1496194.071 ops/s
# Warmup Iteration   6: 1659758.313 ops/s
# Warmup Iteration   7: 1652242.923 ops/s
# Warmup Iteration   8: 1658410.814 ops/s
# Warmup Iteration   9: 1655436.575 ops/s
# Warmup Iteration  10: 1655179.749 ops/s
# Warmup Iteration  11: 1648681.901 ops/s
# Warmup Iteration  12: 1644468.515 ops/s
# Warmup Iteration  13: 1644990.789 ops/s
# Warmup Iteration  14: 1634870.871 ops/s
# Warmup Iteration  15: 1660291.375 ops/s
# Warmup Iteration  16: 1646094.549 ops/s
# Warmup Iteration  17: 1664471.048 ops/s
# Warmup Iteration  18: 1647025.945 ops/s
# Warmup Iteration  19: 1626001.137 ops/s
# Warmup Iteration  20: 1635865.924 ops/s
# Warmup Iteration  21: 1619672.700 ops/s
# Warmup Iteration  22: 1644649.274 ops/s
# Warmup Iteration  23: 1627874.263 ops/s
# Warmup Iteration  24: 1653139.802 ops/s
# Warmup Iteration  25: 1644949.933 ops/s
# Warmup Iteration  26: 1658354.592 ops/s
# Warmup Iteration  27: 1654814.563 ops/s
# Warmup Iteration  28: 1635906.631 ops/s
# Warmup Iteration  29: 1652491.945 ops/s
# Warmup Iteration  30: 1593185.631 ops/s
Iteration   1: 1600886.027 ops/s
Iteration   2: 1626240.725 ops/s
Iteration   3: 1653246.404 ops/s
Iteration   4: 1682853.861 ops/s
Iteration   5: 1663325.620 ops/s
Iteration   6: 1657105.086 ops/s
Iteration   7: 1648102.709 ops/s
Iteration   8: 1587000.144 ops/s
Iteration   9: 1614401.245 ops/s
Iteration  10: 1607230.489 ops/s
Iteration  11: 1640148.440 ops/s
Iteration  12: 1652009.274 ops/s
Iteration  13: 1681209.919 ops/s
Iteration  14: 1639586.436 ops/s
Iteration  15: 1667085.832 ops/s
Iteration  16: 1540997.352 ops/s
Iteration  17: 1608344.868 ops/s
Iteration  18: 1649073.164 ops/s
Iteration  19: 1677235.493 ops/s
Iteration  20: 1679761.967 ops/s
Iteration  21: 1663061.552 ops/s
Iteration  22: 1580355.396 ops/s
Iteration  23: 1574619.008 ops/s
Iteration  24: 1544276.422 ops/s
Iteration  25: 1648596.896 ops/s
Iteration  26: 1623294.132 ops/s
Iteration  27: 1600847.853 ops/s
Iteration  28: 1551756.754 ops/s
Iteration  29: 1585720.860 ops/s
Iteration  30: 1632885.057 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1626041.966 ±(99.9%) 27728.859 ops/s [Average]
  (min, avg, max) = (1540997.352, 1626041.966, 1682853.861), stdev = 41503.254
  CI (99.9%): [1598313.107, 1653770.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1626041.966 ± 27728.859  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521729.890 ops/s
# Warmup Iteration   2: 1185564.296 ops/s
# Warmup Iteration   3: 1209423.313 ops/s
# Warmup Iteration   4: 1075688.342 ops/s
# Warmup Iteration   5: 1033333.710 ops/s
# Warmup Iteration   6: 1243115.037 ops/s
# Warmup Iteration   7: 1239409.144 ops/s
# Warmup Iteration   8: 1240391.696 ops/s
# Warmup Iteration   9: 1229368.615 ops/s
# Warmup Iteration  10: 1229982.907 ops/s
# Warmup Iteration  11: 1238548.601 ops/s
# Warmup Iteration  12: 1224992.452 ops/s
# Warmup Iteration  13: 1214758.543 ops/s
# Warmup Iteration  14: 1208533.144 ops/s
# Warmup Iteration  15: 1224032.545 ops/s
# Warmup Iteration  16: 1195462.317 ops/s
# Warmup Iteration  17: 1235966.664 ops/s
# Warmup Iteration  18: 1241535.236 ops/s
# Warmup Iteration  19: 1214936.389 ops/s
# Warmup Iteration  20: 1230875.878 ops/s
# Warmup Iteration  21: 1238791.086 ops/s
# Warmup Iteration  22: 1228672.421 ops/s
# Warmup Iteration  23: 1220903.972 ops/s
# Warmup Iteration  24: 1232165.976 ops/s
# Warmup Iteration  25: 1225981.885 ops/s
# Warmup Iteration  26: 1196162.815 ops/s
# Warmup Iteration  27: 1214474.164 ops/s
# Warmup Iteration  28: 1184949.534 ops/s
# Warmup Iteration  29: 1189953.873 ops/s
# Warmup Iteration  30: 1170692.989 ops/s
Iteration   1: 1188874.876 ops/s
Iteration   2: 1242146.885 ops/s
Iteration   3: 1206840.389 ops/s
Iteration   4: 1230602.776 ops/s
Iteration   5: 1232948.959 ops/s
Iteration   6: 1236062.324 ops/s
Iteration   7: 1236174.293 ops/s
Iteration   8: 1219044.882 ops/s
Iteration   9: 1233776.462 ops/s
Iteration  10: 1231735.229 ops/s
Iteration  11: 1221994.886 ops/s
Iteration  12: 1235548.378 ops/s
Iteration  13: 1229607.464 ops/s
Iteration  14: 1222910.718 ops/s
Iteration  15: 1205387.942 ops/s
Iteration  16: 1217638.516 ops/s
Iteration  17: 1204421.473 ops/s
Iteration  18: 1233100.884 ops/s
Iteration  19: 1218034.483 ops/s
Iteration  20: 1240867.343 ops/s
Iteration  21: 1246937.685 ops/s
Iteration  22: 1232704.642 ops/s
Iteration  23: 1224130.448 ops/s
Iteration  24: 1223510.308 ops/s
Iteration  25: 1212797.106 ops/s
Iteration  26: 1180019.880 ops/s
Iteration  27: 1229737.864 ops/s
Iteration  28: 1171890.513 ops/s
Iteration  29: 1195026.943 ops/s
Iteration  30: 1177813.992 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloat":
  1219409.618 ±(99.9%) 13332.683 ops/s [Average]
  (min, avg, max) = (1171890.513, 1219409.618, 1246937.685), stdev = 19955.734
  CI (99.9%): [1206076.935, 1232742.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectFloat  thrpt   30  1219409.618 ± 13332.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 917578.885 ops/s
# Warmup Iteration   2: 2179260.478 ops/s
# Warmup Iteration   3: 2237433.247 ops/s
# Warmup Iteration   4: 1812107.980 ops/s
# Warmup Iteration   5: 2189089.312 ops/s
# Warmup Iteration   6: 2215330.249 ops/s
# Warmup Iteration   7: 2171577.482 ops/s
# Warmup Iteration   8: 2097210.068 ops/s
# Warmup Iteration   9: 2198626.719 ops/s
# Warmup Iteration  10: 2194760.670 ops/s
# Warmup Iteration  11: 2200353.362 ops/s
# Warmup Iteration  12: 2190752.078 ops/s
# Warmup Iteration  13: 2205315.825 ops/s
# Warmup Iteration  14: 2181231.719 ops/s
# Warmup Iteration  15: 2186974.255 ops/s
# Warmup Iteration  16: 2215126.793 ops/s
# Warmup Iteration  17: 2202873.777 ops/s
# Warmup Iteration  18: 2177428.198 ops/s
# Warmup Iteration  19: 2199793.459 ops/s
# Warmup Iteration  20: 2191097.890 ops/s
# Warmup Iteration  21: 2198895.077 ops/s
# Warmup Iteration  22: 2185507.213 ops/s
# Warmup Iteration  23: 2121140.453 ops/s
# Warmup Iteration  24: 2249972.459 ops/s
# Warmup Iteration  25: 2216543.745 ops/s
# Warmup Iteration  26: 2191944.481 ops/s
# Warmup Iteration  27: 2208828.506 ops/s
# Warmup Iteration  28: 2109314.792 ops/s
# Warmup Iteration  29: 2140391.165 ops/s
# Warmup Iteration  30: 2097999.149 ops/s
Iteration   1: 2114825.014 ops/s
Iteration   2: 2210509.573 ops/s
Iteration   3: 2071127.746 ops/s
Iteration   4: 2128277.295 ops/s
Iteration   5: 2113383.741 ops/s
Iteration   6: 2099431.511 ops/s
Iteration   7: 2251366.651 ops/s
Iteration   8: 2239568.735 ops/s
Iteration   9: 2120092.892 ops/s
Iteration  10: 2133954.464 ops/s
Iteration  11: 2181588.359 ops/s
Iteration  12: 2064294.626 ops/s
Iteration  13: 2105439.803 ops/s
Iteration  14: 2193492.488 ops/s
Iteration  15: 2177745.450 ops/s
Iteration  16: 2216500.695 ops/s
Iteration  17: 2244104.455 ops/s
Iteration  18: 2245041.003 ops/s
Iteration  19: 2204380.547 ops/s
Iteration  20: 2170094.408 ops/s
Iteration  21: 2212749.250 ops/s
Iteration  22: 2056087.746 ops/s
Iteration  23: 2119116.058 ops/s
Iteration  24: 2141665.869 ops/s
Iteration  25: 2195805.121 ops/s
Iteration  26: 2210060.153 ops/s
Iteration  27: 2190456.945 ops/s
Iteration  28: 2198944.353 ops/s
Iteration  29: 2233735.660 ops/s
Iteration  30: 2198194.125 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2168067.825 ±(99.9%) 38572.162 ops/s [Average]
  (min, avg, max) = (2056087.746, 2168067.825, 2251366.651), stdev = 57733.001
  CI (99.9%): [2129495.663, 2206639.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2168067.825 ± 38572.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767177.456 ops/s
# Warmup Iteration   2: 1652974.060 ops/s
# Warmup Iteration   3: 1741338.762 ops/s
# Warmup Iteration   4: 1779752.447 ops/s
# Warmup Iteration   5: 1478799.321 ops/s
# Warmup Iteration   6: 1770944.107 ops/s
# Warmup Iteration   7: 1768771.789 ops/s
# Warmup Iteration   8: 1786820.504 ops/s
# Warmup Iteration   9: 1776646.152 ops/s
# Warmup Iteration  10: 1777317.407 ops/s
# Warmup Iteration  11: 1776759.988 ops/s
# Warmup Iteration  12: 1778593.517 ops/s
# Warmup Iteration  13: 1768231.454 ops/s
# Warmup Iteration  14: 1784653.394 ops/s
# Warmup Iteration  15: 1774877.742 ops/s
# Warmup Iteration  16: 1776336.129 ops/s
# Warmup Iteration  17: 1786296.630 ops/s
# Warmup Iteration  18: 1745976.564 ops/s
# Warmup Iteration  19: 1788142.452 ops/s
# Warmup Iteration  20: 1783082.160 ops/s
# Warmup Iteration  21: 1779548.721 ops/s
# Warmup Iteration  22: 1749943.473 ops/s
# Warmup Iteration  23: 1779669.245 ops/s
# Warmup Iteration  24: 1765808.147 ops/s
# Warmup Iteration  25: 1751648.341 ops/s
# Warmup Iteration  26: 1760337.317 ops/s
# Warmup Iteration  27: 1768907.351 ops/s
# Warmup Iteration  28: 1756353.376 ops/s
# Warmup Iteration  29: 1779435.108 ops/s
# Warmup Iteration  30: 1767232.304 ops/s
Iteration   1: 1780911.251 ops/s
Iteration   2: 1790159.646 ops/s
Iteration   3: 1783315.827 ops/s
Iteration   4: 1675122.909 ops/s
Iteration   5: 1688869.299 ops/s
Iteration   6: 1660105.312 ops/s
Iteration   7: 1737568.008 ops/s
Iteration   8: 1763736.605 ops/s
Iteration   9: 1786999.136 ops/s
Iteration  10: 1759545.038 ops/s
Iteration  11: 1780031.742 ops/s
Iteration  12: 1770635.427 ops/s
Iteration  13: 1696085.012 ops/s
Iteration  14: 1744990.689 ops/s
Iteration  15: 1677393.233 ops/s
Iteration  16: 1679613.429 ops/s
Iteration  17: 1666688.514 ops/s
Iteration  18: 1712767.745 ops/s
Iteration  19: 1734036.697 ops/s
Iteration  20: 1748536.868 ops/s
Iteration  21: 1763658.596 ops/s
Iteration  22: 1692406.856 ops/s
Iteration  23: 1725506.248 ops/s
Iteration  24: 1771802.104 ops/s
Iteration  25: 1773796.697 ops/s
Iteration  26: 1745237.095 ops/s
Iteration  27: 1784180.659 ops/s
Iteration  28: 1779744.331 ops/s
Iteration  29: 1788531.229 ops/s
Iteration  30: 1754854.060 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1740561.009 ±(99.9%) 28299.979 ops/s [Average]
  (min, avg, max) = (1660105.312, 1740561.009, 1790159.646), stdev = 42358.080
  CI (99.9%): [1712261.030, 1768860.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1740561.009 ± 28299.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381566.888 ops/s
# Warmup Iteration   2: 737934.859 ops/s
# Warmup Iteration   3: 780092.415 ops/s
# Warmup Iteration   4: 818559.391 ops/s
# Warmup Iteration   5: 684100.332 ops/s
# Warmup Iteration   6: 780632.709 ops/s
# Warmup Iteration   7: 772157.473 ops/s
# Warmup Iteration   8: 775477.586 ops/s
# Warmup Iteration   9: 801098.098 ops/s
# Warmup Iteration  10: 795720.362 ops/s
# Warmup Iteration  11: 807480.719 ops/s
# Warmup Iteration  12: 804020.212 ops/s
# Warmup Iteration  13: 793434.970 ops/s
# Warmup Iteration  14: 806226.519 ops/s
# Warmup Iteration  15: 793798.638 ops/s
# Warmup Iteration  16: 805838.368 ops/s
# Warmup Iteration  17: 808557.505 ops/s
# Warmup Iteration  18: 813271.481 ops/s
# Warmup Iteration  19: 814972.395 ops/s
# Warmup Iteration  20: 816290.881 ops/s
# Warmup Iteration  21: 815672.156 ops/s
# Warmup Iteration  22: 813239.560 ops/s
# Warmup Iteration  23: 830311.821 ops/s
# Warmup Iteration  24: 813392.405 ops/s
# Warmup Iteration  25: 791441.897 ops/s
# Warmup Iteration  26: 803972.626 ops/s
# Warmup Iteration  27: 817825.716 ops/s
# Warmup Iteration  28: 806806.448 ops/s
# Warmup Iteration  29: 813222.451 ops/s
# Warmup Iteration  30: 799174.107 ops/s
Iteration   1: 803884.374 ops/s
Iteration   2: 820032.368 ops/s
Iteration   3: 817267.370 ops/s
Iteration   4: 805714.928 ops/s
Iteration   5: 798250.412 ops/s
Iteration   6: 813031.925 ops/s
Iteration   7: 802571.707 ops/s
Iteration   8: 802991.763 ops/s
Iteration   9: 799752.628 ops/s
Iteration  10: 820211.576 ops/s
Iteration  11: 824851.430 ops/s
Iteration  12: 800090.642 ops/s
Iteration  13: 774319.858 ops/s
Iteration  14: 824913.205 ops/s
Iteration  15: 829032.770 ops/s
Iteration  16: 820050.946 ops/s
Iteration  17: 813135.551 ops/s
Iteration  18: 811995.640 ops/s
Iteration  19: 813112.302 ops/s
Iteration  20: 816122.721 ops/s
Iteration  21: 807505.730 ops/s
Iteration  22: 818148.673 ops/s
Iteration  23: 810965.517 ops/s
Iteration  24: 819795.513 ops/s
Iteration  25: 816724.598 ops/s
Iteration  26: 818150.213 ops/s
Iteration  27: 807933.117 ops/s
Iteration  28: 819052.543 ops/s
Iteration  29: 822231.161 ops/s
Iteration  30: 821692.262 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIf":
  812451.115 ±(99.9%) 7320.901 ops/s [Average]
  (min, avg, max) = (774319.858, 812451.115, 829032.770), stdev = 10957.580
  CI (99.9%): [805130.214, 819772.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectIf  thrpt   30  812451.115 ± 7320.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577425.208 ops/s
# Warmup Iteration   2: 1397333.501 ops/s
# Warmup Iteration   3: 1426086.936 ops/s
# Warmup Iteration   4: 1174985.082 ops/s
# Warmup Iteration   5: 1431487.643 ops/s
# Warmup Iteration   6: 1419312.807 ops/s
# Warmup Iteration   7: 1442240.025 ops/s
# Warmup Iteration   8: 1438266.848 ops/s
# Warmup Iteration   9: 1451613.279 ops/s
# Warmup Iteration  10: 1432918.996 ops/s
# Warmup Iteration  11: 1431395.128 ops/s
# Warmup Iteration  12: 1407832.725 ops/s
# Warmup Iteration  13: 1443838.454 ops/s
# Warmup Iteration  14: 1441613.673 ops/s
# Warmup Iteration  15: 1442877.119 ops/s
# Warmup Iteration  16: 1434522.093 ops/s
# Warmup Iteration  17: 1437890.999 ops/s
# Warmup Iteration  18: 1375824.937 ops/s
# Warmup Iteration  19: 1457186.422 ops/s
# Warmup Iteration  20: 1434571.748 ops/s
# Warmup Iteration  21: 1456684.361 ops/s
# Warmup Iteration  22: 1426079.775 ops/s
# Warmup Iteration  23: 1437117.581 ops/s
# Warmup Iteration  24: 1427848.148 ops/s
# Warmup Iteration  25: 1395851.881 ops/s
# Warmup Iteration  26: 1439739.765 ops/s
# Warmup Iteration  27: 1421719.549 ops/s
# Warmup Iteration  28: 1409088.217 ops/s
# Warmup Iteration  29: 1428436.718 ops/s
# Warmup Iteration  30: 1379830.657 ops/s
Iteration   1: 1433435.418 ops/s
Iteration   2: 1434824.347 ops/s
Iteration   3: 1451435.159 ops/s
Iteration   4: 1445571.080 ops/s
Iteration   5: 1434260.696 ops/s
Iteration   6: 1433042.889 ops/s
Iteration   7: 1438678.598 ops/s
Iteration   8: 1442689.944 ops/s
Iteration   9: 1450989.233 ops/s
Iteration  10: 1448470.421 ops/s
Iteration  11: 1449394.638 ops/s
Iteration  12: 1438398.492 ops/s
Iteration  13: 1442128.071 ops/s
Iteration  14: 1428759.612 ops/s
Iteration  15: 1414485.422 ops/s
Iteration  16: 1452598.035 ops/s
Iteration  17: 1438555.176 ops/s
Iteration  18: 1423840.006 ops/s
Iteration  19: 1440558.495 ops/s
Iteration  20: 1441123.275 ops/s
Iteration  21: 1442525.139 ops/s
Iteration  22: 1443498.388 ops/s
Iteration  23: 1428729.983 ops/s
Iteration  24: 1419457.907 ops/s
Iteration  25: 1423076.126 ops/s
Iteration  26: 1409719.687 ops/s
Iteration  27: 1438843.315 ops/s
Iteration  28: 1449674.683 ops/s
Iteration  29: 1436483.573 ops/s
Iteration  30: 1424103.893 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectInt":
  1436645.057 ±(99.9%) 7448.025 ops/s [Average]
  (min, avg, max) = (1409719.687, 1436645.057, 1452598.035), stdev = 11147.855
  CI (99.9%): [1429197.031, 1444093.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectInt  thrpt   30  1436645.057 ± 7448.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1004420.698 ops/s
# Warmup Iteration   2: 2464605.884 ops/s
# Warmup Iteration   3: 2448341.082 ops/s
# Warmup Iteration   4: 2069665.851 ops/s
# Warmup Iteration   5: 2501699.979 ops/s
# Warmup Iteration   6: 2533874.606 ops/s
# Warmup Iteration   7: 2534239.557 ops/s
# Warmup Iteration   8: 2527868.911 ops/s
# Warmup Iteration   9: 2420099.294 ops/s
# Warmup Iteration  10: 2421151.278 ops/s
# Warmup Iteration  11: 2439251.116 ops/s
# Warmup Iteration  12: 2444945.717 ops/s
# Warmup Iteration  13: 2454759.941 ops/s
# Warmup Iteration  14: 2500062.686 ops/s
# Warmup Iteration  15: 2463720.973 ops/s
# Warmup Iteration  16: 2462854.292 ops/s
# Warmup Iteration  17: 2459738.831 ops/s
# Warmup Iteration  18: 2519891.451 ops/s
# Warmup Iteration  19: 2445342.886 ops/s
# Warmup Iteration  20: 2434150.204 ops/s
# Warmup Iteration  21: 2479281.952 ops/s
# Warmup Iteration  22: 2500750.735 ops/s
# Warmup Iteration  23: 2557736.973 ops/s
# Warmup Iteration  24: 2508329.636 ops/s
# Warmup Iteration  25: 2515468.333 ops/s
# Warmup Iteration  26: 2440443.751 ops/s
# Warmup Iteration  27: 2452599.833 ops/s
# Warmup Iteration  28: 2529607.610 ops/s
# Warmup Iteration  29: 2463401.137 ops/s
# Warmup Iteration  30: 2496054.507 ops/s
Iteration   1: 2492077.625 ops/s
Iteration   2: 2532779.313 ops/s
Iteration   3: 2470082.818 ops/s
Iteration   4: 2383813.247 ops/s
Iteration   5: 2425429.652 ops/s
Iteration   6: 2539589.725 ops/s
Iteration   7: 2548458.135 ops/s
Iteration   8: 2535651.211 ops/s
Iteration   9: 2422251.229 ops/s
Iteration  10: 2439902.178 ops/s
Iteration  11: 2486554.966 ops/s
Iteration  12: 2574314.871 ops/s
Iteration  13: 2557059.954 ops/s
Iteration  14: 2566325.034 ops/s
Iteration  15: 2530308.260 ops/s
Iteration  16: 2462876.224 ops/s
Iteration  17: 2474991.563 ops/s
Iteration  18: 2468537.639 ops/s
Iteration  19: 2513279.068 ops/s
Iteration  20: 2508804.173 ops/s
Iteration  21: 2515346.149 ops/s
Iteration  22: 2563296.059 ops/s
Iteration  23: 2506496.646 ops/s
Iteration  24: 2517389.897 ops/s
Iteration  25: 2513399.509 ops/s
Iteration  26: 2559669.863 ops/s
Iteration  27: 2554982.430 ops/s
Iteration  28: 2495623.957 ops/s
Iteration  29: 2541586.495 ops/s
Iteration  30: 2519250.895 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2507337.626 ±(99.9%) 31706.760 ops/s [Average]
  (min, avg, max) = (2383813.247, 2507337.626, 2574314.871), stdev = 47457.189
  CI (99.9%): [2475630.866, 2539044.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2507337.626 ± 31706.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837298.828 ops/s
# Warmup Iteration   2: 1856028.556 ops/s
# Warmup Iteration   3: 1970220.234 ops/s
# Warmup Iteration   4: 1852453.580 ops/s
# Warmup Iteration   5: 1780815.966 ops/s
# Warmup Iteration   6: 1998757.881 ops/s
# Warmup Iteration   7: 1980292.063 ops/s
# Warmup Iteration   8: 1971020.693 ops/s
# Warmup Iteration   9: 1970482.016 ops/s
# Warmup Iteration  10: 1991193.108 ops/s
# Warmup Iteration  11: 1989065.489 ops/s
# Warmup Iteration  12: 1978263.091 ops/s
# Warmup Iteration  13: 1987932.933 ops/s
# Warmup Iteration  14: 1977792.386 ops/s
# Warmup Iteration  15: 1910699.863 ops/s
# Warmup Iteration  16: 1904247.447 ops/s
# Warmup Iteration  17: 1895678.503 ops/s
# Warmup Iteration  18: 1966963.697 ops/s
# Warmup Iteration  19: 1947943.279 ops/s
# Warmup Iteration  20: 1974469.715 ops/s
# Warmup Iteration  21: 1919721.839 ops/s
# Warmup Iteration  22: 1984337.900 ops/s
# Warmup Iteration  23: 2012022.246 ops/s
# Warmup Iteration  24: 1972469.352 ops/s
# Warmup Iteration  25: 1980475.345 ops/s
# Warmup Iteration  26: 1990596.275 ops/s
# Warmup Iteration  27: 1988966.681 ops/s
# Warmup Iteration  28: 1997247.519 ops/s
# Warmup Iteration  29: 1984984.412 ops/s
# Warmup Iteration  30: 1968476.281 ops/s
Iteration   1: 1979266.745 ops/s
Iteration   2: 1985212.275 ops/s
Iteration   3: 1972632.654 ops/s
Iteration   4: 1967412.425 ops/s
Iteration   5: 1890316.843 ops/s
Iteration   6: 1881303.098 ops/s
Iteration   7: 1816727.295 ops/s
Iteration   8: 1962146.577 ops/s
Iteration   9: 1956064.855 ops/s
Iteration  10: 1968224.733 ops/s
Iteration  11: 1992762.498 ops/s
Iteration  12: 1986583.756 ops/s
Iteration  13: 1990677.447 ops/s
Iteration  14: 2023160.873 ops/s
Iteration  15: 1950066.842 ops/s
Iteration  16: 2021640.182 ops/s
Iteration  17: 2004968.681 ops/s
Iteration  18: 1905411.700 ops/s
Iteration  19: 1949722.873 ops/s
Iteration  20: 1963521.814 ops/s
Iteration  21: 1962029.436 ops/s
Iteration  22: 1982781.013 ops/s
Iteration  23: 1998049.630 ops/s
Iteration  24: 2009166.212 ops/s
Iteration  25: 1894655.359 ops/s
Iteration  26: 1927741.928 ops/s
Iteration  27: 1989012.632 ops/s
Iteration  28: 1946524.945 ops/s
Iteration  29: 1992640.260 ops/s
Iteration  30: 1978452.815 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithTarget":
  1961629.280 ±(99.9%) 30556.932 ops/s [Average]
  (min, avg, max) = (1816727.295, 1961629.280, 2023160.873), stdev = 45736.180
  CI (99.9%): [1931072.348, 1992186.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1961629.280 ± 30556.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493411.801 ops/s
# Warmup Iteration   2: 1251010.817 ops/s
# Warmup Iteration   3: 1241568.218 ops/s
# Warmup Iteration   4: 998671.843 ops/s
# Warmup Iteration   5: 1266793.052 ops/s
# Warmup Iteration   6: 1271495.885 ops/s
# Warmup Iteration   7: 1250520.420 ops/s
# Warmup Iteration   8: 1279057.261 ops/s
# Warmup Iteration   9: 1259887.131 ops/s
# Warmup Iteration  10: 1269241.310 ops/s
# Warmup Iteration  11: 1273281.464 ops/s
# Warmup Iteration  12: 1274484.670 ops/s
# Warmup Iteration  13: 1249273.587 ops/s
# Warmup Iteration  14: 1261597.978 ops/s
# Warmup Iteration  15: 1240564.608 ops/s
# Warmup Iteration  16: 1221893.771 ops/s
# Warmup Iteration  17: 1272702.881 ops/s
# Warmup Iteration  18: 1255172.901 ops/s
# Warmup Iteration  19: 1253812.068 ops/s
# Warmup Iteration  20: 1253956.354 ops/s
# Warmup Iteration  21: 1275738.080 ops/s
# Warmup Iteration  22: 1267375.368 ops/s
# Warmup Iteration  23: 1266313.964 ops/s
# Warmup Iteration  24: 1277313.181 ops/s
# Warmup Iteration  25: 1223826.914 ops/s
# Warmup Iteration  26: 1272010.329 ops/s
# Warmup Iteration  27: 1261059.648 ops/s
# Warmup Iteration  28: 1269176.929 ops/s
# Warmup Iteration  29: 1275347.610 ops/s
# Warmup Iteration  30: 1273774.403 ops/s
Iteration   1: 1269856.146 ops/s
Iteration   2: 1267967.302 ops/s
Iteration   3: 1226797.072 ops/s
Iteration   4: 1259992.944 ops/s
Iteration   5: 1275422.232 ops/s
Iteration   6: 1275809.221 ops/s
Iteration   7: 1204237.190 ops/s
Iteration   8: 1217511.386 ops/s
Iteration   9: 1259963.662 ops/s
Iteration  10: 1283626.438 ops/s
Iteration  11: 1291719.858 ops/s
Iteration  12: 1290888.000 ops/s
Iteration  13: 1271031.694 ops/s
Iteration  14: 1257885.611 ops/s
Iteration  15: 1290294.037 ops/s
Iteration  16: 1264494.724 ops/s
Iteration  17: 1284613.915 ops/s
Iteration  18: 1286108.393 ops/s
Iteration  19: 1263242.760 ops/s
Iteration  20: 1253887.187 ops/s
Iteration  21: 1237839.588 ops/s
Iteration  22: 1266385.441 ops/s
Iteration  23: 1263525.159 ops/s
Iteration  24: 1286150.687 ops/s
Iteration  25: 1258495.876 ops/s
Iteration  26: 1268476.742 ops/s
Iteration  27: 1228546.050 ops/s
Iteration  28: 1246588.738 ops/s
Iteration  29: 1255640.013 ops/s
Iteration  30: 1274736.791 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLong":
  1262724.495 ±(99.9%) 14715.480 ops/s [Average]
  (min, avg, max) = (1204237.190, 1262724.495, 1291719.858), stdev = 22025.439
  CI (99.9%): [1248009.016, 1277439.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectLong  thrpt   30  1262724.495 ± 14715.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 887553.663 ops/s
# Warmup Iteration   2: 2178182.895 ops/s
# Warmup Iteration   3: 2260897.155 ops/s
# Warmup Iteration   4: 1855022.722 ops/s
# Warmup Iteration   5: 2280179.094 ops/s
# Warmup Iteration   6: 2258167.712 ops/s
# Warmup Iteration   7: 2292822.394 ops/s
# Warmup Iteration   8: 2194076.670 ops/s
# Warmup Iteration   9: 2232161.974 ops/s
# Warmup Iteration  10: 2212901.858 ops/s
# Warmup Iteration  11: 2235789.119 ops/s
# Warmup Iteration  12: 2207579.217 ops/s
# Warmup Iteration  13: 2275197.440 ops/s
# Warmup Iteration  14: 2289976.995 ops/s
# Warmup Iteration  15: 2284851.777 ops/s
# Warmup Iteration  16: 2268258.199 ops/s
# Warmup Iteration  17: 2265337.909 ops/s
# Warmup Iteration  18: 2264138.491 ops/s
# Warmup Iteration  19: 2180664.126 ops/s
# Warmup Iteration  20: 2281192.083 ops/s
# Warmup Iteration  21: 2280989.731 ops/s
# Warmup Iteration  22: 2253108.204 ops/s
# Warmup Iteration  23: 2258289.166 ops/s
# Warmup Iteration  24: 2267909.193 ops/s
# Warmup Iteration  25: 2250547.708 ops/s
# Warmup Iteration  26: 2270522.252 ops/s
# Warmup Iteration  27: 2260521.018 ops/s
# Warmup Iteration  28: 2207798.835 ops/s
# Warmup Iteration  29: 2264862.348 ops/s
# Warmup Iteration  30: 2228338.184 ops/s
Iteration   1: 2172401.362 ops/s
Iteration   2: 2262900.245 ops/s
Iteration   3: 2265676.544 ops/s
Iteration   4: 2240451.833 ops/s
Iteration   5: 2280234.922 ops/s
Iteration   6: 2265737.981 ops/s
Iteration   7: 2238772.489 ops/s
Iteration   8: 2274512.831 ops/s
Iteration   9: 2229446.590 ops/s
Iteration  10: 2254245.306 ops/s
Iteration  11: 2255842.883 ops/s
Iteration  12: 2263265.558 ops/s
Iteration  13: 2202669.159 ops/s
Iteration  14: 2194927.228 ops/s
Iteration  15: 2225977.161 ops/s
Iteration  16: 2282176.386 ops/s
Iteration  17: 2177708.030 ops/s
Iteration  18: 2280061.924 ops/s
Iteration  19: 2149034.642 ops/s
Iteration  20: 2228387.165 ops/s
Iteration  21: 2281584.654 ops/s
Iteration  22: 2177850.126 ops/s
Iteration  23: 2268170.557 ops/s
Iteration  24: 2266507.978 ops/s
Iteration  25: 2281750.790 ops/s
Iteration  26: 2255121.469 ops/s
Iteration  27: 2236708.283 ops/s
Iteration  28: 2246648.053 ops/s
Iteration  29: 2243198.923 ops/s
Iteration  30: 2202868.985 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2240161.335 ±(99.9%) 24854.174 ops/s [Average]
  (min, avg, max) = (2149034.642, 2240161.335, 2282176.386), stdev = 37200.561
  CI (99.9%): [2215307.161, 2265015.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2240161.335 ± 24854.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725070.835 ops/s
# Warmup Iteration   2: 1735784.190 ops/s
# Warmup Iteration   3: 1800157.345 ops/s
# Warmup Iteration   4: 1437887.318 ops/s
# Warmup Iteration   5: 1766812.127 ops/s
# Warmup Iteration   6: 1790493.197 ops/s
# Warmup Iteration   7: 1828577.280 ops/s
# Warmup Iteration   8: 1793351.448 ops/s
# Warmup Iteration   9: 1818974.234 ops/s
# Warmup Iteration  10: 1865726.836 ops/s
# Warmup Iteration  11: 1832117.854 ops/s
# Warmup Iteration  12: 1776232.606 ops/s
# Warmup Iteration  13: 1831077.696 ops/s
# Warmup Iteration  14: 1827535.948 ops/s
# Warmup Iteration  15: 1832428.827 ops/s
# Warmup Iteration  16: 1832356.359 ops/s
# Warmup Iteration  17: 1819177.364 ops/s
# Warmup Iteration  18: 1837462.180 ops/s
# Warmup Iteration  19: 1822398.793 ops/s
# Warmup Iteration  20: 1828236.447 ops/s
# Warmup Iteration  21: 1791099.542 ops/s
# Warmup Iteration  22: 1871316.994 ops/s
# Warmup Iteration  23: 1853578.611 ops/s
# Warmup Iteration  24: 1831258.604 ops/s
# Warmup Iteration  25: 1834115.227 ops/s
# Warmup Iteration  26: 1836286.341 ops/s
# Warmup Iteration  27: 1839898.898 ops/s
# Warmup Iteration  28: 1836280.853 ops/s
# Warmup Iteration  29: 1836748.025 ops/s
# Warmup Iteration  30: 1839556.812 ops/s
Iteration   1: 1850666.596 ops/s
Iteration   2: 1841895.533 ops/s
Iteration   3: 1744333.572 ops/s
Iteration   4: 1848836.027 ops/s
Iteration   5: 1828502.834 ops/s
Iteration   6: 1848750.390 ops/s
Iteration   7: 1845505.754 ops/s
Iteration   8: 1870778.392 ops/s
Iteration   9: 1873771.553 ops/s
Iteration  10: 1855006.743 ops/s
Iteration  11: 1834759.648 ops/s
Iteration  12: 1820505.217 ops/s
Iteration  13: 1832809.041 ops/s
Iteration  14: 1808561.324 ops/s
Iteration  15: 1815374.775 ops/s
Iteration  16: 1796944.135 ops/s
Iteration  17: 1795626.693 ops/s
Iteration  18: 1794630.176 ops/s
Iteration  19: 1751291.811 ops/s
Iteration  20: 1802104.424 ops/s
Iteration  21: 1862304.493 ops/s
Iteration  22: 1875952.882 ops/s
Iteration  23: 1847223.205 ops/s
Iteration  24: 1825864.270 ops/s
Iteration  25: 1839514.511 ops/s
Iteration  26: 1813709.393 ops/s
Iteration  27: 1788822.199 ops/s
Iteration  28: 1836553.377 ops/s
Iteration  29: 1816237.547 ops/s
Iteration  30: 1844660.467 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithTarget":
  1827049.899 ±(99.9%) 21510.189 ops/s [Average]
  (min, avg, max) = (1744333.572, 1827049.899, 1875952.882), stdev = 32195.441
  CI (99.9%): [1805539.710, 1848560.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1827049.899 ± 21510.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 581775.596 ops/s
# Warmup Iteration   2: 1392825.016 ops/s
# Warmup Iteration   3: 1430636.124 ops/s
# Warmup Iteration   4: 1192716.252 ops/s
# Warmup Iteration   5: 1453600.563 ops/s
# Warmup Iteration   6: 1428219.421 ops/s
# Warmup Iteration   7: 1457938.619 ops/s
# Warmup Iteration   8: 1469475.042 ops/s
# Warmup Iteration   9: 1418520.179 ops/s
# Warmup Iteration  10: 1424159.285 ops/s
# Warmup Iteration  11: 1393040.935 ops/s
# Warmup Iteration  12: 1385992.261 ops/s
# Warmup Iteration  13: 1427539.238 ops/s
# Warmup Iteration  14: 1460081.055 ops/s
# Warmup Iteration  15: 1468664.599 ops/s
# Warmup Iteration  16: 1403937.381 ops/s
# Warmup Iteration  17: 1392177.177 ops/s
# Warmup Iteration  18: 1406052.597 ops/s
# Warmup Iteration  19: 1429295.235 ops/s
# Warmup Iteration  20: 1401567.095 ops/s
# Warmup Iteration  21: 1407855.968 ops/s
# Warmup Iteration  22: 1422814.277 ops/s
# Warmup Iteration  23: 1415136.096 ops/s
# Warmup Iteration  24: 1445206.247 ops/s
# Warmup Iteration  25: 1448019.970 ops/s
# Warmup Iteration  26: 1464465.701 ops/s
# Warmup Iteration  27: 1451311.018 ops/s
# Warmup Iteration  28: 1432785.475 ops/s
# Warmup Iteration  29: 1444710.689 ops/s
# Warmup Iteration  30: 1457493.626 ops/s
Iteration   1: 1454692.278 ops/s
Iteration   2: 1443698.477 ops/s
Iteration   3: 1438965.604 ops/s
Iteration   4: 1432109.445 ops/s
Iteration   5: 1434953.556 ops/s
Iteration   6: 1437011.382 ops/s
Iteration   7: 1462987.693 ops/s
Iteration   8: 1470983.165 ops/s
Iteration   9: 1445583.950 ops/s
Iteration  10: 1459149.953 ops/s
Iteration  11: 1446273.006 ops/s
Iteration  12: 1462117.477 ops/s
Iteration  13: 1439180.128 ops/s
Iteration  14: 1388358.235 ops/s
Iteration  15: 1415786.458 ops/s
Iteration  16: 1453659.833 ops/s
Iteration  17: 1422333.707 ops/s
Iteration  18: 1397358.987 ops/s
Iteration  19: 1373387.655 ops/s
Iteration  20: 1398326.462 ops/s
Iteration  21: 1391468.209 ops/s
Iteration  22: 1403835.981 ops/s
Iteration  23: 1410688.316 ops/s
Iteration  24: 1413442.344 ops/s
Iteration  25: 1402598.149 ops/s
Iteration  26: 1404712.795 ops/s
Iteration  27: 1458235.036 ops/s
Iteration  28: 1363851.515 ops/s
Iteration  29: 1427511.074 ops/s
Iteration  30: 1422291.403 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShort":
  1425851.742 ±(99.9%) 18796.628 ops/s [Average]
  (min, avg, max) = (1363851.515, 1425851.742, 1470983.165), stdev = 28133.910
  CI (99.9%): [1407055.115, 1444648.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectShort  thrpt   30  1425851.742 ± 18796.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 989971.419 ops/s
# Warmup Iteration   2: 2405428.825 ops/s
# Warmup Iteration   3: 2399483.414 ops/s
# Warmup Iteration   4: 2014240.597 ops/s
# Warmup Iteration   5: 2418664.116 ops/s
# Warmup Iteration   6: 2362829.486 ops/s
# Warmup Iteration   7: 2478519.045 ops/s
# Warmup Iteration   8: 2436072.321 ops/s
# Warmup Iteration   9: 2467038.363 ops/s
# Warmup Iteration  10: 2480783.903 ops/s
# Warmup Iteration  11: 2484061.493 ops/s
# Warmup Iteration  12: 2504760.443 ops/s
# Warmup Iteration  13: 2488061.889 ops/s
# Warmup Iteration  14: 2499001.007 ops/s
# Warmup Iteration  15: 2490195.104 ops/s
# Warmup Iteration  16: 2472069.736 ops/s
# Warmup Iteration  17: 2479165.309 ops/s
# Warmup Iteration  18: 2454721.915 ops/s
# Warmup Iteration  19: 2460703.428 ops/s
# Warmup Iteration  20: 2473354.052 ops/s
# Warmup Iteration  21: 2406495.019 ops/s
# Warmup Iteration  22: 2456205.318 ops/s
# Warmup Iteration  23: 2443134.883 ops/s
# Warmup Iteration  24: 2461097.886 ops/s
# Warmup Iteration  25: 2444930.222 ops/s
# Warmup Iteration  26: 2417289.183 ops/s
# Warmup Iteration  27: 2342804.979 ops/s
# Warmup Iteration  28: 2402600.812 ops/s
# Warmup Iteration  29: 2396012.673 ops/s
# Warmup Iteration  30: 2388000.980 ops/s
Iteration   1: 2352329.808 ops/s
Iteration   2: 2482210.589 ops/s
Iteration   3: 2449285.095 ops/s
Iteration   4: 2436374.710 ops/s
Iteration   5: 2425487.986 ops/s
Iteration   6: 2499842.375 ops/s
Iteration   7: 2502094.355 ops/s
Iteration   8: 2470218.366 ops/s
Iteration   9: 2349703.958 ops/s
Iteration  10: 2354417.210 ops/s
Iteration  11: 2340142.022 ops/s
Iteration  12: 2438566.863 ops/s
Iteration  13: 2486611.576 ops/s
Iteration  14: 2428431.379 ops/s
Iteration  15: 2455063.784 ops/s
Iteration  16: 2434051.925 ops/s
Iteration  17: 2464508.243 ops/s
Iteration  18: 2376331.278 ops/s
Iteration  19: 2430682.402 ops/s
Iteration  20: 2463132.704 ops/s
Iteration  21: 2460263.365 ops/s
Iteration  22: 2490831.751 ops/s
Iteration  23: 2441823.328 ops/s
Iteration  24: 2480324.624 ops/s
Iteration  25: 2508743.343 ops/s
Iteration  26: 2474395.460 ops/s
Iteration  27: 2499593.521 ops/s
Iteration  28: 2461771.350 ops/s
Iteration  29: 2452968.288 ops/s
Iteration  30: 2497741.516 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2446931.439 ±(99.9%) 32362.564 ops/s [Average]
  (min, avg, max) = (2340142.022, 2446931.439, 2508743.343), stdev = 48438.765
  CI (99.9%): [2414568.876, 2479294.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2446931.439 ± 32362.564  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856601.690 ops/s
# Warmup Iteration   2: 1877894.792 ops/s
# Warmup Iteration   3: 1953169.000 ops/s
# Warmup Iteration   4: 1962669.509 ops/s
# Warmup Iteration   5: 1660247.634 ops/s
# Warmup Iteration   6: 2029442.815 ops/s
# Warmup Iteration   7: 2014005.119 ops/s
# Warmup Iteration   8: 2018373.407 ops/s
# Warmup Iteration   9: 2013704.792 ops/s
# Warmup Iteration  10: 1965407.638 ops/s
# Warmup Iteration  11: 2025494.884 ops/s
# Warmup Iteration  12: 2035360.447 ops/s
# Warmup Iteration  13: 2028552.855 ops/s
# Warmup Iteration  14: 2043114.492 ops/s
# Warmup Iteration  15: 2014070.729 ops/s
# Warmup Iteration  16: 1998749.885 ops/s
# Warmup Iteration  17: 2024483.310 ops/s
# Warmup Iteration  18: 2033195.580 ops/s
# Warmup Iteration  19: 1953832.100 ops/s
# Warmup Iteration  20: 1999458.081 ops/s
# Warmup Iteration  21: 1967263.155 ops/s
# Warmup Iteration  22: 2039224.225 ops/s
# Warmup Iteration  23: 2020149.748 ops/s
# Warmup Iteration  24: 2033828.289 ops/s
# Warmup Iteration  25: 2032312.450 ops/s
# Warmup Iteration  26: 2022746.031 ops/s
# Warmup Iteration  27: 2039139.123 ops/s
# Warmup Iteration  28: 2064900.216 ops/s
# Warmup Iteration  29: 2044701.130 ops/s
# Warmup Iteration  30: 2014603.025 ops/s
Iteration   1: 1990886.442 ops/s
Iteration   2: 2011016.890 ops/s
Iteration   3: 1920146.191 ops/s
Iteration   4: 1995090.622 ops/s
Iteration   5: 2048189.623 ops/s
Iteration   6: 2021480.801 ops/s
Iteration   7: 2005487.076 ops/s
Iteration   8: 2047459.109 ops/s
Iteration   9: 2051439.756 ops/s
Iteration  10: 2058344.523 ops/s
Iteration  11: 2022795.425 ops/s
Iteration  12: 2037658.694 ops/s
Iteration  13: 2037576.002 ops/s
Iteration  14: 2056325.529 ops/s
Iteration  15: 1970851.136 ops/s
Iteration  16: 1985911.321 ops/s
Iteration  17: 1938160.046 ops/s
Iteration  18: 1990719.263 ops/s
Iteration  19: 1961771.969 ops/s
Iteration  20: 1984314.542 ops/s
Iteration  21: 2074875.944 ops/s
Iteration  22: 1997121.790 ops/s
Iteration  23: 2057819.429 ops/s
Iteration  24: 2009403.549 ops/s
Iteration  25: 2047256.345 ops/s
Iteration  26: 2048323.750 ops/s
Iteration  27: 2037340.121 ops/s
Iteration  28: 2051623.737 ops/s
Iteration  29: 2062307.665 ops/s
Iteration  30: 2046482.962 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithTarget":
  2018939.342 ±(99.9%) 25984.363 ops/s [Average]
  (min, avg, max) = (1920146.191, 2018939.342, 2074875.944), stdev = 38892.174
  CI (99.9%): [1992954.979, 2044923.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2018939.342 ± 25984.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93209.712 ops/s
# Warmup Iteration   2: 169390.539 ops/s
# Warmup Iteration   3: 204943.843 ops/s
# Warmup Iteration   4: 195163.680 ops/s
# Warmup Iteration   5: 206068.962 ops/s
# Warmup Iteration   6: 159026.138 ops/s
# Warmup Iteration   7: 197776.983 ops/s
# Warmup Iteration   8: 204993.772 ops/s
# Warmup Iteration   9: 206558.921 ops/s
# Warmup Iteration  10: 205238.250 ops/s
# Warmup Iteration  11: 207497.872 ops/s
# Warmup Iteration  12: 205860.139 ops/s
# Warmup Iteration  13: 206627.831 ops/s
# Warmup Iteration  14: 208703.235 ops/s
# Warmup Iteration  15: 205413.950 ops/s
# Warmup Iteration  16: 204064.953 ops/s
# Warmup Iteration  17: 205181.806 ops/s
# Warmup Iteration  18: 194643.386 ops/s
# Warmup Iteration  19: 202945.527 ops/s
# Warmup Iteration  20: 198856.779 ops/s
# Warmup Iteration  21: 207940.833 ops/s
# Warmup Iteration  22: 208992.675 ops/s
# Warmup Iteration  23: 203547.603 ops/s
# Warmup Iteration  24: 206784.614 ops/s
# Warmup Iteration  25: 203109.801 ops/s
# Warmup Iteration  26: 205968.381 ops/s
# Warmup Iteration  27: 204880.851 ops/s
# Warmup Iteration  28: 205747.467 ops/s
# Warmup Iteration  29: 206606.477 ops/s
# Warmup Iteration  30: 203510.571 ops/s
Iteration   1: 208373.318 ops/s
Iteration   2: 205591.679 ops/s
Iteration   3: 209125.095 ops/s
Iteration   4: 209578.023 ops/s
Iteration   5: 209565.074 ops/s
Iteration   6: 203577.718 ops/s
Iteration   7: 204670.521 ops/s
Iteration   8: 202231.957 ops/s
Iteration   9: 207803.504 ops/s
Iteration  10: 203661.151 ops/s
Iteration  11: 204710.127 ops/s
Iteration  12: 205930.955 ops/s
Iteration  13: 201766.915 ops/s
Iteration  14: 203988.543 ops/s
Iteration  15: 204149.663 ops/s
Iteration  16: 204436.764 ops/s
Iteration  17: 205129.757 ops/s
Iteration  18: 208278.295 ops/s
Iteration  19: 207758.130 ops/s
Iteration  20: 206473.493 ops/s
Iteration  21: 205250.284 ops/s
Iteration  22: 205189.127 ops/s
Iteration  23: 206556.763 ops/s
Iteration  24: 204681.650 ops/s
Iteration  25: 205994.321 ops/s
Iteration  26: 206116.903 ops/s
Iteration  27: 204833.981 ops/s
Iteration  28: 209067.711 ops/s
Iteration  29: 209917.743 ops/s
Iteration  30: 207608.399 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectTarget":
  206067.252 ±(99.9%) 1479.708 ops/s [Average]
  (min, avg, max) = (201766.915, 206067.252, 209917.743), stdev = 2214.758
  CI (99.9%): [204587.544, 207546.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectTarget  thrpt   30  206067.252 ± 1479.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458431.770 ops/s
# Warmup Iteration   2: 981861.997 ops/s
# Warmup Iteration   3: 1011054.356 ops/s
# Warmup Iteration   4: 1017391.342 ops/s
# Warmup Iteration   5: 861322.962 ops/s
# Warmup Iteration   6: 1036511.088 ops/s
# Warmup Iteration   7: 1028231.014 ops/s
# Warmup Iteration   8: 1020450.290 ops/s
# Warmup Iteration   9: 1019623.916 ops/s
# Warmup Iteration  10: 1016925.267 ops/s
# Warmup Iteration  11: 1032855.880 ops/s
# Warmup Iteration  12: 1039605.304 ops/s
# Warmup Iteration  13: 1036604.753 ops/s
# Warmup Iteration  14: 1038620.522 ops/s
# Warmup Iteration  15: 1033817.995 ops/s
# Warmup Iteration  16: 1034559.860 ops/s
# Warmup Iteration  17: 1039956.600 ops/s
# Warmup Iteration  18: 1039732.476 ops/s
# Warmup Iteration  19: 1008360.932 ops/s
# Warmup Iteration  20: 985772.841 ops/s
# Warmup Iteration  21: 983123.250 ops/s
# Warmup Iteration  22: 998085.360 ops/s
# Warmup Iteration  23: 996734.107 ops/s
# Warmup Iteration  24: 1033792.486 ops/s
# Warmup Iteration  25: 1041222.320 ops/s
# Warmup Iteration  26: 1032518.887 ops/s
# Warmup Iteration  27: 1033224.659 ops/s
# Warmup Iteration  28: 999355.399 ops/s
# Warmup Iteration  29: 1002149.992 ops/s
# Warmup Iteration  30: 1048830.371 ops/s
Iteration   1: 1015001.494 ops/s
Iteration   2: 1029867.412 ops/s
Iteration   3: 1036027.810 ops/s
Iteration   4: 1032590.709 ops/s
Iteration   5: 991779.932 ops/s
Iteration   6: 1031632.272 ops/s
Iteration   7: 1051887.625 ops/s
Iteration   8: 983649.584 ops/s
Iteration   9: 1005562.252 ops/s
Iteration  10: 1040274.498 ops/s
Iteration  11: 1042463.151 ops/s
Iteration  12: 1031535.312 ops/s
Iteration  13: 1052361.628 ops/s
Iteration  14: 1054399.492 ops/s
Iteration  15: 1032800.513 ops/s
Iteration  16: 1041037.888 ops/s
Iteration  17: 1026483.094 ops/s
Iteration  18: 1039707.109 ops/s
Iteration  19: 1040375.056 ops/s
Iteration  20: 1047155.408 ops/s
Iteration  21: 1043928.262 ops/s
Iteration  22: 1038820.548 ops/s
Iteration  23: 1045143.580 ops/s
Iteration  24: 1039574.365 ops/s
Iteration  25: 1016191.296 ops/s
Iteration  26: 1038836.979 ops/s
Iteration  27: 1043294.399 ops/s
Iteration  28: 1039880.076 ops/s
Iteration  29: 1038213.636 ops/s
Iteration  30: 1035053.262 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith":
  1033517.621 ±(99.9%) 10964.647 ops/s [Average]
  (min, avg, max) = (983649.584, 1033517.621, 1054399.492), stdev = 16411.369
  CI (99.9%): [1022552.974, 1044482.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectWith  thrpt   30  1033517.621 ± 10964.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 532899.957 ops/s
# Warmup Iteration   2: 973064.379 ops/s
# Warmup Iteration   3: 1113226.869 ops/s
# Warmup Iteration   4: 1130765.445 ops/s
# Warmup Iteration   5: 1130680.598 ops/s
# Warmup Iteration   6: 914557.992 ops/s
# Warmup Iteration   7: 1129022.805 ops/s
# Warmup Iteration   8: 1137838.033 ops/s
# Warmup Iteration   9: 1133055.644 ops/s
# Warmup Iteration  10: 1136619.766 ops/s
# Warmup Iteration  11: 1124629.909 ops/s
# Warmup Iteration  12: 1113893.090 ops/s
# Warmup Iteration  13: 1120747.276 ops/s
# Warmup Iteration  14: 1129918.048 ops/s
# Warmup Iteration  15: 1149114.939 ops/s
# Warmup Iteration  16: 1148729.940 ops/s
# Warmup Iteration  17: 1138833.714 ops/s
# Warmup Iteration  18: 1128044.369 ops/s
# Warmup Iteration  19: 1123701.605 ops/s
# Warmup Iteration  20: 1132780.182 ops/s
# Warmup Iteration  21: 1131588.945 ops/s
# Warmup Iteration  22: 1137332.465 ops/s
# Warmup Iteration  23: 1117445.449 ops/s
# Warmup Iteration  24: 1134716.283 ops/s
# Warmup Iteration  25: 1131251.647 ops/s
# Warmup Iteration  26: 1143933.396 ops/s
# Warmup Iteration  27: 1141483.188 ops/s
# Warmup Iteration  28: 1138601.529 ops/s
# Warmup Iteration  29: 1134572.047 ops/s
# Warmup Iteration  30: 1089423.067 ops/s
Iteration   1: 1135562.687 ops/s
Iteration   2: 1159773.577 ops/s
Iteration   3: 1155609.992 ops/s
Iteration   4: 1109007.713 ops/s
Iteration   5: 1128940.142 ops/s
Iteration   6: 1118745.689 ops/s
Iteration   7: 1078230.639 ops/s
Iteration   8: 1091448.509 ops/s
Iteration   9: 1115543.787 ops/s
Iteration  10: 1134982.621 ops/s
Iteration  11: 1134176.652 ops/s
Iteration  12: 1137095.433 ops/s
Iteration  13: 1103299.434 ops/s
Iteration  14: 1138212.643 ops/s
Iteration  15: 1144586.738 ops/s
Iteration  16: 1151989.817 ops/s
Iteration  17: 1126751.264 ops/s
Iteration  18: 1130750.451 ops/s
Iteration  19: 1136797.229 ops/s
Iteration  20: 1134062.580 ops/s
Iteration  21: 1139162.311 ops/s
Iteration  22: 1130488.704 ops/s
Iteration  23: 1136469.761 ops/s
Iteration  24: 1134689.025 ops/s
Iteration  25: 1126534.900 ops/s
Iteration  26: 1121821.650 ops/s
Iteration  27: 1129651.196 ops/s
Iteration  28: 1120973.026 ops/s
Iteration  29: 1122992.174 ops/s
Iteration  30: 1124790.477 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrences":
  1128438.027 ±(99.9%) 11419.230 ops/s [Average]
  (min, avg, max) = (1078230.639, 1128438.027, 1159773.577), stdev = 17091.768
  CI (99.9%): [1117018.797, 1139857.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  1128438.027 ± 11419.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrencesWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrencesWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553207.058 ops/s
# Warmup Iteration   2: 1008242.924 ops/s
# Warmup Iteration   3: 1154537.809 ops/s
# Warmup Iteration   4: 1118730.429 ops/s
# Warmup Iteration   5: 1143007.521 ops/s
# Warmup Iteration   6: 973045.615 ops/s
# Warmup Iteration   7: 1173609.983 ops/s
# Warmup Iteration   8: 1176830.790 ops/s
# Warmup Iteration   9: 1173466.450 ops/s
# Warmup Iteration  10: 1168112.202 ops/s
# Warmup Iteration  11: 1168386.177 ops/s
# Warmup Iteration  12: 1170156.483 ops/s
# Warmup Iteration  13: 1174639.071 ops/s
# Warmup Iteration  14: 1170308.611 ops/s
# Warmup Iteration  15: 1168648.426 ops/s
# Warmup Iteration  16: 1177951.234 ops/s
# Warmup Iteration  17: 1166599.981 ops/s
# Warmup Iteration  18: 1153343.614 ops/s
# Warmup Iteration  19: 1165298.854 ops/s
# Warmup Iteration  20: 1160342.530 ops/s
# Warmup Iteration  21: 1172210.020 ops/s
# Warmup Iteration  22: 1174180.474 ops/s
# Warmup Iteration  23: 1174663.901 ops/s
# Warmup Iteration  24: 1174606.126 ops/s
# Warmup Iteration  25: 1175790.153 ops/s
# Warmup Iteration  26: 1153689.207 ops/s
# Warmup Iteration  27: 1171748.487 ops/s
# Warmup Iteration  28: 1175684.867 ops/s
# Warmup Iteration  29: 1169558.816 ops/s
# Warmup Iteration  30: 1165560.496 ops/s
Iteration   1: 1179116.045 ops/s
Iteration   2: 1179430.999 ops/s
Iteration   3: 1196331.433 ops/s
Iteration   4: 1187359.388 ops/s
Iteration   5: 1187598.695 ops/s
Iteration   6: 1152924.805 ops/s
Iteration   7: 1160542.379 ops/s
Iteration   8: 1135919.229 ops/s
Iteration   9: 1133575.128 ops/s
Iteration  10: 1079740.428 ops/s
Iteration  11: 1147347.946 ops/s
Iteration  12: 1145249.206 ops/s
Iteration  13: 1114367.799 ops/s
Iteration  14: 1121994.929 ops/s
Iteration  15: 1174305.518 ops/s
Iteration  16: 1193692.678 ops/s
Iteration  17: 1189209.022 ops/s
Iteration  18: 1188923.784 ops/s
Iteration  19: 1177577.787 ops/s
Iteration  20: 1179828.604 ops/s
Iteration  21: 1156324.271 ops/s
Iteration  22: 1186328.428 ops/s
Iteration  23: 1176640.600 ops/s
Iteration  24: 1160369.037 ops/s
Iteration  25: 1160949.613 ops/s
Iteration  26: 1140622.262 ops/s
Iteration  27: 1127539.748 ops/s
Iteration  28: 1103354.963 ops/s
Iteration  29: 1119992.691 ops/s
Iteration  30: 1122262.228 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrencesWithTarget":
  1155980.655 ±(99.9%) 20439.543 ops/s [Average]
  (min, avg, max) = (1079740.428, 1155980.655, 1196331.433), stdev = 30592.948
  CI (99.9%): [1135541.112, 1176420.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectWithOccurrencesWithTarget  thrpt   30  1155980.655 ± 20439.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97632.350 ops/s
# Warmup Iteration   2: 178987.924 ops/s
# Warmup Iteration   3: 209485.381 ops/s
# Warmup Iteration   4: 208222.754 ops/s
# Warmup Iteration   5: 207722.444 ops/s
# Warmup Iteration   6: 174366.992 ops/s
# Warmup Iteration   7: 211079.204 ops/s
# Warmup Iteration   8: 209272.747 ops/s
# Warmup Iteration   9: 205448.410 ops/s
# Warmup Iteration  10: 207884.502 ops/s
# Warmup Iteration  11: 207053.813 ops/s
# Warmup Iteration  12: 210994.130 ops/s
# Warmup Iteration  13: 214205.069 ops/s
# Warmup Iteration  14: 214050.836 ops/s
# Warmup Iteration  15: 214687.285 ops/s
# Warmup Iteration  16: 214783.935 ops/s
# Warmup Iteration  17: 219797.020 ops/s
# Warmup Iteration  18: 215917.439 ops/s
# Warmup Iteration  19: 215752.894 ops/s
# Warmup Iteration  20: 216930.400 ops/s
# Warmup Iteration  21: 219780.495 ops/s
# Warmup Iteration  22: 210278.349 ops/s
# Warmup Iteration  23: 214876.788 ops/s
# Warmup Iteration  24: 213229.903 ops/s
# Warmup Iteration  25: 215902.461 ops/s
# Warmup Iteration  26: 216717.117 ops/s
# Warmup Iteration  27: 211673.338 ops/s
# Warmup Iteration  28: 204298.705 ops/s
# Warmup Iteration  29: 205872.129 ops/s
# Warmup Iteration  30: 218089.509 ops/s
Iteration   1: 220469.378 ops/s
Iteration   2: 215622.119 ops/s
Iteration   3: 215194.295 ops/s
Iteration   4: 213158.161 ops/s
Iteration   5: 214152.495 ops/s
Iteration   6: 210281.262 ops/s
Iteration   7: 212273.727 ops/s
Iteration   8: 214717.892 ops/s
Iteration   9: 209059.494 ops/s
Iteration  10: 214576.282 ops/s
Iteration  11: 217868.748 ops/s
Iteration  12: 213027.658 ops/s
Iteration  13: 218678.228 ops/s
Iteration  14: 218520.810 ops/s
Iteration  15: 217585.442 ops/s
Iteration  16: 214889.043 ops/s
Iteration  17: 216957.528 ops/s
Iteration  18: 215649.500 ops/s
Iteration  19: 214734.310 ops/s
Iteration  20: 216472.143 ops/s
Iteration  21: 206519.180 ops/s
Iteration  22: 207552.351 ops/s
Iteration  23: 204019.261 ops/s
Iteration  24: 211265.834 ops/s
Iteration  25: 208992.410 ops/s
Iteration  26: 210012.322 ops/s
Iteration  27: 213632.255 ops/s
Iteration  28: 214727.968 ops/s
Iteration  29: 216587.720 ops/s
Iteration  30: 216227.260 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_collectWith_target":
  213780.836 ±(99.9%) 2588.162 ops/s [Average]
  (min, avg, max) = (204019.261, 213780.836, 220469.378), stdev = 3873.840
  CI (99.9%): [211192.674, 216368.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  213780.836 ± 2588.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_concurrentWrite$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_concurrentWrite

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 668.738 ops/s
# Warmup Iteration   2: 730.083 ops/s
# Warmup Iteration   3: 733.817 ops/s
# Warmup Iteration   4: 723.276 ops/s
# Warmup Iteration   5: 734.929 ops/s
# Warmup Iteration   6: 737.944 ops/s
# Warmup Iteration   7: 735.410 ops/s
# Warmup Iteration   8: 732.725 ops/s
# Warmup Iteration   9: 743.063 ops/s
# Warmup Iteration  10: 730.675 ops/s
# Warmup Iteration  11: 736.378 ops/s
# Warmup Iteration  12: 742.155 ops/s
# Warmup Iteration  13: 734.108 ops/s
# Warmup Iteration  14: 725.800 ops/s
# Warmup Iteration  15: 732.399 ops/s
# Warmup Iteration  16: 736.698 ops/s
# Warmup Iteration  17: 741.689 ops/s
# Warmup Iteration  18: 745.875 ops/s
# Warmup Iteration  19: 768.742 ops/s
# Warmup Iteration  20: 781.589 ops/s
# Warmup Iteration  21: 796.200 ops/s
# Warmup Iteration  22: 803.630 ops/s
# Warmup Iteration  23: 801.815 ops/s
# Warmup Iteration  24: 802.632 ops/s
# Warmup Iteration  25: 808.254 ops/s
# Warmup Iteration  26: 802.121 ops/s
# Warmup Iteration  27: 801.516 ops/s
# Warmup Iteration  28: 792.277 ops/s
# Warmup Iteration  29: 807.458 ops/s
# Warmup Iteration  30: 796.860 ops/s
Iteration   1: 811.202 ops/s
Iteration   2: 808.825 ops/s
Iteration   3: 800.385 ops/s
Iteration   4: 811.591 ops/s
Iteration   5: 794.264 ops/s
Iteration   6: 796.151 ops/s
Iteration   7: 788.488 ops/s
Iteration   8: 787.714 ops/s
Iteration   9: 767.366 ops/s
Iteration  10: 805.185 ops/s
Iteration  11: 801.472 ops/s
Iteration  12: 811.911 ops/s
Iteration  13: 815.029 ops/s
Iteration  14: 800.218 ops/s
Iteration  15: 794.616 ops/s
Iteration  16: 783.726 ops/s
Iteration  17: 793.176 ops/s
Iteration  18: 802.267 ops/s
Iteration  19: 794.507 ops/s
Iteration  20: 793.056 ops/s
Iteration  21: 801.839 ops/s
Iteration  22: 791.248 ops/s
Iteration  23: 803.631 ops/s
Iteration  24: 801.670 ops/s
Iteration  25: 788.286 ops/s
Iteration  26: 798.936 ops/s
Iteration  27: 797.266 ops/s
Iteration  28: 802.870 ops/s
Iteration  29: 796.757 ops/s
Iteration  30: 807.642 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_concurrentWrite":
  798.376 ±(99.9%) 6.559 ops/s [Average]
  (min, avg, max) = (767.366, 798.376, 815.029), stdev = 9.817
  CI (99.9%): [791.818, 804.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt    Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_concurrentWrite  thrpt   30  798.376 ± 6.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1811663.946 ops/s
# Warmup Iteration   2: 3262731.847 ops/s
# Warmup Iteration   3: 3412672.337 ops/s
# Warmup Iteration   4: 3450661.184 ops/s
# Warmup Iteration   5: 3351540.000 ops/s
# Warmup Iteration   6: 3050610.330 ops/s
# Warmup Iteration   7: 3556046.711 ops/s
# Warmup Iteration   8: 3329663.180 ops/s
# Warmup Iteration   9: 3482416.130 ops/s
# Warmup Iteration  10: 3545417.600 ops/s
# Warmup Iteration  11: 3530429.099 ops/s
# Warmup Iteration  12: 3536621.651 ops/s
# Warmup Iteration  13: 3507684.495 ops/s
# Warmup Iteration  14: 3541848.272 ops/s
# Warmup Iteration  15: 3528413.366 ops/s
# Warmup Iteration  16: 3576156.238 ops/s
# Warmup Iteration  17: 3414064.258 ops/s
# Warmup Iteration  18: 3412728.403 ops/s
# Warmup Iteration  19: 3587153.496 ops/s
# Warmup Iteration  20: 3458266.036 ops/s
# Warmup Iteration  21: 3531811.167 ops/s
# Warmup Iteration  22: 3485227.547 ops/s
# Warmup Iteration  23: 3595916.269 ops/s
# Warmup Iteration  24: 3590521.431 ops/s
# Warmup Iteration  25: 3554674.959 ops/s
# Warmup Iteration  26: 3563457.883 ops/s
# Warmup Iteration  27: 3521332.393 ops/s
# Warmup Iteration  28: 3525999.101 ops/s
# Warmup Iteration  29: 3586401.942 ops/s
# Warmup Iteration  30: 3590664.221 ops/s
Iteration   1: 3547587.159 ops/s
Iteration   2: 3561073.908 ops/s
Iteration   3: 3564024.357 ops/s
Iteration   4: 3566750.474 ops/s
Iteration   5: 3609311.172 ops/s
Iteration   6: 3552839.716 ops/s
Iteration   7: 3583396.910 ops/s
Iteration   8: 3532967.661 ops/s
Iteration   9: 3581734.130 ops/s
Iteration  10: 3597270.957 ops/s
Iteration  11: 3604267.490 ops/s
Iteration  12: 3563560.572 ops/s
Iteration  13: 3587939.954 ops/s
Iteration  14: 3549953.868 ops/s
Iteration  15: 3567223.311 ops/s
Iteration  16: 3510165.568 ops/s
Iteration  17: 3517805.854 ops/s
Iteration  18: 3572257.125 ops/s
Iteration  19: 3566743.325 ops/s
Iteration  20: 3600336.830 ops/s
Iteration  21: 3558738.264 ops/s
Iteration  22: 3602518.352 ops/s
Iteration  23: 3597406.607 ops/s
Iteration  24: 3539622.007 ops/s
Iteration  25: 3580209.955 ops/s
Iteration  26: 3521531.518 ops/s
Iteration  27: 3569596.483 ops/s
Iteration  28: 3582051.945 ops/s
Iteration  29: 3562558.335 ops/s
Iteration  30: 3570732.576 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_contains":
  3567405.879 ±(99.9%) 17279.882 ops/s [Average]
  (min, avg, max) = (3510165.568, 3567405.879, 3609311.172), stdev = 25863.715
  CI (99.9%): [3550125.998, 3584685.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_contains  thrpt   30  3567405.879 ± 17279.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1764390.768 ops/s
# Warmup Iteration   2: 3261277.910 ops/s
# Warmup Iteration   3: 3475631.282 ops/s
# Warmup Iteration   4: 3624081.864 ops/s
# Warmup Iteration   5: 3115789.525 ops/s
# Warmup Iteration   6: 3661798.459 ops/s
# Warmup Iteration   7: 3504856.554 ops/s
# Warmup Iteration   8: 3774708.951 ops/s
# Warmup Iteration   9: 3748507.693 ops/s
# Warmup Iteration  10: 3621703.011 ops/s
# Warmup Iteration  11: 3518248.228 ops/s
# Warmup Iteration  12: 3554666.195 ops/s
# Warmup Iteration  13: 3628190.579 ops/s
# Warmup Iteration  14: 3659238.991 ops/s
# Warmup Iteration  15: 3715744.421 ops/s
# Warmup Iteration  16: 3774920.167 ops/s
# Warmup Iteration  17: 3772315.486 ops/s
# Warmup Iteration  18: 3718813.746 ops/s
# Warmup Iteration  19: 3756034.890 ops/s
# Warmup Iteration  20: 3746485.367 ops/s
# Warmup Iteration  21: 3731509.277 ops/s
# Warmup Iteration  22: 3568648.620 ops/s
# Warmup Iteration  23: 3523700.548 ops/s
# Warmup Iteration  24: 3742982.814 ops/s
# Warmup Iteration  25: 3642791.818 ops/s
# Warmup Iteration  26: 3727834.356 ops/s
# Warmup Iteration  27: 3739546.677 ops/s
# Warmup Iteration  28: 3715533.215 ops/s
# Warmup Iteration  29: 3699490.480 ops/s
# Warmup Iteration  30: 3587613.501 ops/s
Iteration   1: 3750044.445 ops/s
Iteration   2: 3707961.248 ops/s
Iteration   3: 3735299.355 ops/s
Iteration   4: 3758906.746 ops/s
Iteration   5: 3714445.740 ops/s
Iteration   6: 3757271.153 ops/s
Iteration   7: 3764597.358 ops/s
Iteration   8: 3668250.946 ops/s
Iteration   9: 3788384.056 ops/s
Iteration  10: 3764792.014 ops/s
Iteration  11: 3745295.690 ops/s
Iteration  12: 3668821.468 ops/s
Iteration  13: 3636529.817 ops/s
Iteration  14: 3656562.075 ops/s
Iteration  15: 3662035.649 ops/s
Iteration  16: 3536700.625 ops/s
Iteration  17: 3568452.068 ops/s
Iteration  18: 3777749.411 ops/s
Iteration  19: 3725665.652 ops/s
Iteration  20: 3702584.832 ops/s
Iteration  21: 3677374.810 ops/s
Iteration  22: 3664930.983 ops/s
Iteration  23: 3718288.506 ops/s
Iteration  24: 3544890.537 ops/s
Iteration  25: 3684636.583 ops/s
Iteration  26: 3758902.663 ops/s
Iteration  27: 3660538.700 ops/s
Iteration  28: 3686145.086 ops/s
Iteration  29: 3680241.216 ops/s
Iteration  30: 3581002.162 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllArray":
  3691576.720 ±(99.9%) 45252.037 ops/s [Average]
  (min, avg, max) = (3536700.625, 3691576.720, 3788384.056), stdev = 67731.124
  CI (99.9%): [3646324.683, 3736828.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  3691576.720 ± 45252.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1652885.254 ops/s
# Warmup Iteration   2: 3391210.300 ops/s
# Warmup Iteration   3: 3548186.865 ops/s
# Warmup Iteration   4: 3588922.745 ops/s
# Warmup Iteration   5: 3003740.057 ops/s
# Warmup Iteration   6: 3758284.238 ops/s
# Warmup Iteration   7: 3768200.640 ops/s
# Warmup Iteration   8: 3762712.069 ops/s
# Warmup Iteration   9: 3779611.474 ops/s
# Warmup Iteration  10: 3760989.555 ops/s
# Warmup Iteration  11: 3708499.825 ops/s
# Warmup Iteration  12: 3797171.373 ops/s
# Warmup Iteration  13: 3591801.716 ops/s
# Warmup Iteration  14: 3566190.296 ops/s
# Warmup Iteration  15: 3693193.802 ops/s
# Warmup Iteration  16: 3675993.036 ops/s
# Warmup Iteration  17: 3584617.724 ops/s
# Warmup Iteration  18: 3786279.362 ops/s
# Warmup Iteration  19: 3759366.494 ops/s
# Warmup Iteration  20: 3811902.846 ops/s
# Warmup Iteration  21: 3818961.895 ops/s
# Warmup Iteration  22: 3736341.106 ops/s
# Warmup Iteration  23: 3748840.562 ops/s
# Warmup Iteration  24: 3712935.522 ops/s
# Warmup Iteration  25: 3736743.895 ops/s
# Warmup Iteration  26: 3747976.041 ops/s
# Warmup Iteration  27: 3767759.536 ops/s
# Warmup Iteration  28: 3842640.127 ops/s
# Warmup Iteration  29: 3724085.577 ops/s
# Warmup Iteration  30: 3593547.478 ops/s
Iteration   1: 3491521.398 ops/s
Iteration   2: 3714739.695 ops/s
Iteration   3: 3820799.478 ops/s
Iteration   4: 3768719.847 ops/s
Iteration   5: 3793729.044 ops/s
Iteration   6: 3707474.425 ops/s
Iteration   7: 3724383.527 ops/s
Iteration   8: 3775180.311 ops/s
Iteration   9: 3747342.660 ops/s
Iteration  10: 3735134.036 ops/s
Iteration  11: 3726923.652 ops/s
Iteration  12: 3797741.672 ops/s
Iteration  13: 3775993.066 ops/s
Iteration  14: 3785426.110 ops/s
Iteration  15: 3762395.653 ops/s
Iteration  16: 3683392.717 ops/s
Iteration  17: 3785141.878 ops/s
Iteration  18: 3814371.795 ops/s
Iteration  19: 3789606.658 ops/s
Iteration  20: 3757158.798 ops/s
Iteration  21: 3736447.748 ops/s
Iteration  22: 3670905.944 ops/s
Iteration  23: 3761801.057 ops/s
Iteration  24: 3662390.956 ops/s
Iteration  25: 3728009.622 ops/s
Iteration  26: 3693679.338 ops/s
Iteration  27: 3750258.516 ops/s
Iteration  28: 3713569.070 ops/s
Iteration  29: 3728748.079 ops/s
Iteration  30: 3735805.067 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllCollection":
  3737959.727 ±(99.9%) 41246.637 ops/s [Average]
  (min, avg, max) = (3491521.398, 3737959.727, 3820799.478), stdev = 61736.029
  CI (99.9%): [3696713.090, 3779206.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  3737959.727 ± 41246.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1717612.145 ops/s
# Warmup Iteration   2: 3454062.736 ops/s
# Warmup Iteration   3: 3662888.448 ops/s
# Warmup Iteration   4: 3668848.727 ops/s
# Warmup Iteration   5: 3039675.691 ops/s
# Warmup Iteration   6: 3744951.366 ops/s
# Warmup Iteration   7: 3631533.015 ops/s
# Warmup Iteration   8: 3684384.547 ops/s
# Warmup Iteration   9: 3672365.135 ops/s
# Warmup Iteration  10: 3575512.398 ops/s
# Warmup Iteration  11: 3654375.110 ops/s
# Warmup Iteration  12: 3645126.251 ops/s
# Warmup Iteration  13: 3543480.848 ops/s
# Warmup Iteration  14: 3555032.724 ops/s
# Warmup Iteration  15: 3643854.500 ops/s
# Warmup Iteration  16: 3723484.668 ops/s
# Warmup Iteration  17: 3577964.838 ops/s
# Warmup Iteration  18: 3675514.706 ops/s
# Warmup Iteration  19: 3720231.207 ops/s
# Warmup Iteration  20: 3696250.450 ops/s
# Warmup Iteration  21: 3619379.714 ops/s
# Warmup Iteration  22: 3711476.212 ops/s
# Warmup Iteration  23: 3747135.335 ops/s
# Warmup Iteration  24: 3724766.231 ops/s
# Warmup Iteration  25: 3728531.816 ops/s
# Warmup Iteration  26: 3700423.234 ops/s
# Warmup Iteration  27: 3722156.569 ops/s
# Warmup Iteration  28: 3654427.861 ops/s
# Warmup Iteration  29: 3720584.223 ops/s
# Warmup Iteration  30: 3739673.847 ops/s
Iteration   1: 3762293.998 ops/s
Iteration   2: 3745848.034 ops/s
Iteration   3: 3739712.263 ops/s
Iteration   4: 3699711.682 ops/s
Iteration   5: 3456305.373 ops/s
Iteration   6: 3523125.363 ops/s
Iteration   7: 3707458.020 ops/s
Iteration   8: 3707877.223 ops/s
Iteration   9: 3687256.787 ops/s
Iteration  10: 3644676.305 ops/s
Iteration  11: 3684305.127 ops/s
Iteration  12: 3743180.938 ops/s
Iteration  13: 3796446.147 ops/s
Iteration  14: 3807698.024 ops/s
Iteration  15: 3702783.088 ops/s
Iteration  16: 3727160.851 ops/s
Iteration  17: 3740970.926 ops/s
Iteration  18: 3710409.552 ops/s
Iteration  19: 3699089.762 ops/s
Iteration  20: 3681927.293 ops/s
Iteration  21: 3616265.957 ops/s
Iteration  22: 3632737.126 ops/s
Iteration  23: 3666506.639 ops/s
Iteration  24: 3586339.600 ops/s
Iteration  25: 3593464.140 ops/s
Iteration  26: 3538949.561 ops/s
Iteration  27: 3660518.972 ops/s
Iteration  28: 3633314.692 ops/s
Iteration  29: 3518384.937 ops/s
Iteration  30: 3506052.507 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAllIterable":
  3664025.696 ±(99.9%) 59251.856 ops/s [Average]
  (min, avg, max) = (3456305.373, 3664025.696, 3807698.024), stdev = 88685.395
  CI (99.9%): [3604773.840, 3723277.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3664025.696 ± 59251.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47891.990 ops/s
# Warmup Iteration   2: 67353.305 ops/s
# Warmup Iteration   3: 81721.302 ops/s
# Warmup Iteration   4: 81915.734 ops/s
# Warmup Iteration   5: 80479.121 ops/s
# Warmup Iteration   6: 80366.450 ops/s
# Warmup Iteration   7: 80637.664 ops/s
# Warmup Iteration   8: 69690.800 ops/s
# Warmup Iteration   9: 81025.340 ops/s
# Warmup Iteration  10: 81364.602 ops/s
# Warmup Iteration  11: 81115.275 ops/s
# Warmup Iteration  12: 81348.673 ops/s
# Warmup Iteration  13: 80690.855 ops/s
# Warmup Iteration  14: 81123.474 ops/s
# Warmup Iteration  15: 81269.226 ops/s
# Warmup Iteration  16: 77602.039 ops/s
# Warmup Iteration  17: 77785.589 ops/s
# Warmup Iteration  18: 78476.692 ops/s
# Warmup Iteration  19: 78862.421 ops/s
# Warmup Iteration  20: 78556.714 ops/s
# Warmup Iteration  21: 78524.090 ops/s
# Warmup Iteration  22: 81537.526 ops/s
# Warmup Iteration  23: 80829.518 ops/s
# Warmup Iteration  24: 82363.497 ops/s
# Warmup Iteration  25: 82632.108 ops/s
# Warmup Iteration  26: 81004.832 ops/s
# Warmup Iteration  27: 82361.744 ops/s
# Warmup Iteration  28: 79209.081 ops/s
# Warmup Iteration  29: 80684.033 ops/s
# Warmup Iteration  30: 80437.864 ops/s
Iteration   1: 80765.307 ops/s
Iteration   2: 80692.825 ops/s
Iteration   3: 82290.388 ops/s
Iteration   4: 81242.120 ops/s
Iteration   5: 80884.926 ops/s
Iteration   6: 82186.514 ops/s
Iteration   7: 81668.916 ops/s
Iteration   8: 81468.864 ops/s
Iteration   9: 80976.688 ops/s
Iteration  10: 81525.058 ops/s
Iteration  11: 82047.829 ops/s
Iteration  12: 80461.701 ops/s
Iteration  13: 81063.787 ops/s
Iteration  14: 80706.272 ops/s
Iteration  15: 81320.937 ops/s
Iteration  16: 78468.067 ops/s
Iteration  17: 80542.842 ops/s
Iteration  18: 80162.684 ops/s
Iteration  19: 81850.110 ops/s
Iteration  20: 80424.649 ops/s
Iteration  21: 80117.222 ops/s
Iteration  22: 79588.930 ops/s
Iteration  23: 80185.233 ops/s
Iteration  24: 81718.370 ops/s
Iteration  25: 80500.803 ops/s
Iteration  26: 81152.272 ops/s
Iteration  27: 81713.107 ops/s
Iteration  28: 80963.975 ops/s
Iteration  29: 81275.860 ops/s
Iteration  30: 81056.724 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyCollection":
  80967.433 ±(99.9%) 540.409 ops/s [Average]
  (min, avg, max) = (78468.067, 80967.433, 82290.388), stdev = 808.858
  CI (99.9%): [80427.024, 81507.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  80967.433 ± 540.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40857.059 ops/s
# Warmup Iteration   2: 47893.735 ops/s
# Warmup Iteration   3: 61421.320 ops/s
# Warmup Iteration   4: 62031.006 ops/s
# Warmup Iteration   5: 61980.996 ops/s
# Warmup Iteration   6: 61175.073 ops/s
# Warmup Iteration   7: 62425.248 ops/s
# Warmup Iteration   8: 64980.809 ops/s
# Warmup Iteration   9: 61628.725 ops/s
# Warmup Iteration  10: 53015.688 ops/s
# Warmup Iteration  11: 61259.704 ops/s
# Warmup Iteration  12: 60892.945 ops/s
# Warmup Iteration  13: 63438.470 ops/s
# Warmup Iteration  14: 61798.395 ops/s
# Warmup Iteration  15: 61455.712 ops/s
# Warmup Iteration  16: 60912.145 ops/s
# Warmup Iteration  17: 61194.068 ops/s
# Warmup Iteration  18: 62858.417 ops/s
# Warmup Iteration  19: 62679.410 ops/s
# Warmup Iteration  20: 63733.835 ops/s
# Warmup Iteration  21: 60944.707 ops/s
# Warmup Iteration  22: 61483.160 ops/s
# Warmup Iteration  23: 60918.856 ops/s
# Warmup Iteration  24: 61990.375 ops/s
# Warmup Iteration  25: 64005.963 ops/s
# Warmup Iteration  26: 60601.310 ops/s
# Warmup Iteration  27: 62641.428 ops/s
# Warmup Iteration  28: 63266.454 ops/s
# Warmup Iteration  29: 63102.560 ops/s
# Warmup Iteration  30: 61684.279 ops/s
Iteration   1: 61957.246 ops/s
Iteration   2: 64037.084 ops/s
Iteration   3: 63633.837 ops/s
Iteration   4: 63553.249 ops/s
Iteration   5: 63881.120 ops/s
Iteration   6: 64187.133 ops/s
Iteration   7: 63394.431 ops/s
Iteration   8: 65070.330 ops/s
Iteration   9: 63340.468 ops/s
Iteration  10: 64457.653 ops/s
Iteration  11: 64232.666 ops/s
Iteration  12: 64259.038 ops/s
Iteration  13: 64303.449 ops/s
Iteration  14: 63588.174 ops/s
Iteration  15: 63466.537 ops/s
Iteration  16: 63911.204 ops/s
Iteration  17: 65007.067 ops/s
Iteration  18: 64356.184 ops/s
Iteration  19: 63630.351 ops/s
Iteration  20: 63072.082 ops/s
Iteration  21: 62980.567 ops/s
Iteration  22: 63643.963 ops/s
Iteration  23: 63661.908 ops/s
Iteration  24: 64154.617 ops/s
Iteration  25: 63392.082 ops/s
Iteration  26: 63083.590 ops/s
Iteration  27: 62282.608 ops/s
Iteration  28: 63745.731 ops/s
Iteration  29: 63282.385 ops/s
Iteration  30: 63627.559 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsAnyIterable":
  63706.477 ±(99.9%) 449.463 ops/s [Average]
  (min, avg, max) = (61957.246, 63706.477, 65070.330), stdev = 672.735
  CI (99.9%): [63257.014, 64155.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  63706.477 ± 449.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657257.545 ops/s
# Warmup Iteration   2: 701423.484 ops/s
# Warmup Iteration   3: 865816.273 ops/s
# Warmup Iteration   4: 872205.968 ops/s
# Warmup Iteration   5: 876084.308 ops/s
# Warmup Iteration   6: 885443.322 ops/s
# Warmup Iteration   7: 883323.782 ops/s
# Warmup Iteration   8: 892490.528 ops/s
# Warmup Iteration   9: 910663.584 ops/s
# Warmup Iteration  10: 886569.506 ops/s
# Warmup Iteration  11: 904164.789 ops/s
# Warmup Iteration  12: 869349.843 ops/s
# Warmup Iteration  13: 838685.734 ops/s
# Warmup Iteration  14: 806652.901 ops/s
# Warmup Iteration  15: 882267.240 ops/s
# Warmup Iteration  16: 886445.525 ops/s
# Warmup Iteration  17: 921348.441 ops/s
# Warmup Iteration  18: 912641.765 ops/s
# Warmup Iteration  19: 964536.071 ops/s
# Warmup Iteration  20: 970655.748 ops/s
# Warmup Iteration  21: 942517.693 ops/s
# Warmup Iteration  22: 944237.599 ops/s
# Warmup Iteration  23: 952576.312 ops/s
# Warmup Iteration  24: 966524.628 ops/s
# Warmup Iteration  25: 949872.818 ops/s
# Warmup Iteration  26: 973045.761 ops/s
# Warmup Iteration  27: 949661.355 ops/s
# Warmup Iteration  28: 959512.390 ops/s
# Warmup Iteration  29: 961126.057 ops/s
# Warmup Iteration  30: 959477.332 ops/s
Iteration   1: 967173.797 ops/s
Iteration   2: 968428.572 ops/s
Iteration   3: 964175.755 ops/s
Iteration   4: 975867.153 ops/s
Iteration   5: 968854.239 ops/s
Iteration   6: 960897.444 ops/s
Iteration   7: 967985.052 ops/s
Iteration   8: 964781.304 ops/s
Iteration   9: 960119.556 ops/s
Iteration  10: 953872.597 ops/s
Iteration  11: 949934.835 ops/s
Iteration  12: 956694.749 ops/s
Iteration  13: 961114.789 ops/s
Iteration  14: 942108.836 ops/s
Iteration  15: 964266.525 ops/s
Iteration  16: 963314.452 ops/s
Iteration  17: 970376.031 ops/s
Iteration  18: 951809.327 ops/s
Iteration  19: 955468.233 ops/s
Iteration  20: 968148.996 ops/s
Iteration  21: 979643.348 ops/s
Iteration  22: 968100.818 ops/s
Iteration  23: 961685.459 ops/s
Iteration  24: 955910.628 ops/s
Iteration  25: 967537.398 ops/s
Iteration  26: 972068.112 ops/s
Iteration  27: 972164.224 ops/s
Iteration  28: 950292.911 ops/s
Iteration  29: 952955.215 ops/s
Iteration  30: 963601.842 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsBy":
  962645.073 ±(99.9%) 5669.054 ops/s [Average]
  (min, avg, max) = (942108.836, 962645.073, 979643.348), stdev = 8485.174
  CI (99.9%): [956976.019, 968314.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsBy  thrpt   30  962645.073 ± 5669.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44388.029 ops/s
# Warmup Iteration   2: 60336.650 ops/s
# Warmup Iteration   3: 72042.018 ops/s
# Warmup Iteration   4: 71394.225 ops/s
# Warmup Iteration   5: 71030.257 ops/s
# Warmup Iteration   6: 72159.349 ops/s
# Warmup Iteration   7: 73071.052 ops/s
# Warmup Iteration   8: 73934.467 ops/s
# Warmup Iteration   9: 61206.732 ops/s
# Warmup Iteration  10: 75827.849 ops/s
# Warmup Iteration  11: 75460.810 ops/s
# Warmup Iteration  12: 75603.230 ops/s
# Warmup Iteration  13: 74618.482 ops/s
# Warmup Iteration  14: 74583.980 ops/s
# Warmup Iteration  15: 74509.869 ops/s
# Warmup Iteration  16: 75174.390 ops/s
# Warmup Iteration  17: 73356.662 ops/s
# Warmup Iteration  18: 75096.760 ops/s
# Warmup Iteration  19: 75472.081 ops/s
# Warmup Iteration  20: 73892.260 ops/s
# Warmup Iteration  21: 76152.999 ops/s
# Warmup Iteration  22: 75475.019 ops/s
# Warmup Iteration  23: 74686.745 ops/s
# Warmup Iteration  24: 74749.954 ops/s
# Warmup Iteration  25: 75624.159 ops/s
# Warmup Iteration  26: 75052.985 ops/s
# Warmup Iteration  27: 75558.233 ops/s
# Warmup Iteration  28: 74857.797 ops/s
# Warmup Iteration  29: 74993.263 ops/s
# Warmup Iteration  30: 74788.278 ops/s
Iteration   1: 76382.077 ops/s
Iteration   2: 74932.255 ops/s
Iteration   3: 74800.901 ops/s
Iteration   4: 74278.956 ops/s
Iteration   5: 72852.307 ops/s
Iteration   6: 75129.506 ops/s
Iteration   7: 72462.174 ops/s
Iteration   8: 71223.452 ops/s
Iteration   9: 71225.705 ops/s
Iteration  10: 75741.463 ops/s
Iteration  11: 75674.053 ops/s
Iteration  12: 75998.756 ops/s
Iteration  13: 76202.856 ops/s
Iteration  14: 74684.165 ops/s
Iteration  15: 75096.343 ops/s
Iteration  16: 72845.209 ops/s
Iteration  17: 73326.222 ops/s
Iteration  18: 76664.303 ops/s
Iteration  19: 76536.171 ops/s
Iteration  20: 76239.040 ops/s
Iteration  21: 76435.672 ops/s
Iteration  22: 74050.284 ops/s
Iteration  23: 74006.038 ops/s
Iteration  24: 75474.281 ops/s
Iteration  25: 73551.076 ops/s
Iteration  26: 75121.883 ops/s
Iteration  27: 75150.423 ops/s
Iteration  28: 75120.632 ops/s
Iteration  29: 74206.069 ops/s
Iteration  30: 75786.647 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneCollection":
  74706.631 ±(99.9%) 998.041 ops/s [Average]
  (min, avg, max) = (71223.452, 74706.631, 76664.303), stdev = 1493.821
  CI (99.9%): [73708.589, 75704.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  74706.631 ± 998.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41531.398 ops/s
# Warmup Iteration   2: 52100.477 ops/s
# Warmup Iteration   3: 65856.908 ops/s
# Warmup Iteration   4: 66043.673 ops/s
# Warmup Iteration   5: 65505.320 ops/s
# Warmup Iteration   6: 66391.910 ops/s
# Warmup Iteration   7: 65613.678 ops/s
# Warmup Iteration   8: 65377.424 ops/s
# Warmup Iteration   9: 61875.359 ops/s
# Warmup Iteration  10: 58078.865 ops/s
# Warmup Iteration  11: 65267.416 ops/s
# Warmup Iteration  12: 65733.269 ops/s
# Warmup Iteration  13: 65263.132 ops/s
# Warmup Iteration  14: 65411.747 ops/s
# Warmup Iteration  15: 65045.780 ops/s
# Warmup Iteration  16: 66748.807 ops/s
# Warmup Iteration  17: 66857.034 ops/s
# Warmup Iteration  18: 66900.058 ops/s
# Warmup Iteration  19: 66161.275 ops/s
# Warmup Iteration  20: 65511.573 ops/s
# Warmup Iteration  21: 66670.781 ops/s
# Warmup Iteration  22: 66327.658 ops/s
# Warmup Iteration  23: 66093.231 ops/s
# Warmup Iteration  24: 66043.585 ops/s
# Warmup Iteration  25: 66455.762 ops/s
# Warmup Iteration  26: 66425.503 ops/s
# Warmup Iteration  27: 66403.333 ops/s
# Warmup Iteration  28: 65396.268 ops/s
# Warmup Iteration  29: 65856.568 ops/s
# Warmup Iteration  30: 66096.605 ops/s
Iteration   1: 66603.612 ops/s
Iteration   2: 66860.470 ops/s
Iteration   3: 66694.141 ops/s
Iteration   4: 65689.401 ops/s
Iteration   5: 64950.136 ops/s
Iteration   6: 65954.544 ops/s
Iteration   7: 63770.567 ops/s
Iteration   8: 63574.346 ops/s
Iteration   9: 63109.258 ops/s
Iteration  10: 63009.894 ops/s
Iteration  11: 64897.412 ops/s
Iteration  12: 63895.452 ops/s
Iteration  13: 63502.399 ops/s
Iteration  14: 65131.016 ops/s
Iteration  15: 66908.506 ops/s
Iteration  16: 66083.185 ops/s
Iteration  17: 65051.863 ops/s
Iteration  18: 63809.464 ops/s
Iteration  19: 62188.554 ops/s
Iteration  20: 62318.902 ops/s
Iteration  21: 63474.863 ops/s
Iteration  22: 62666.989 ops/s
Iteration  23: 65872.263 ops/s
Iteration  24: 64555.820 ops/s
Iteration  25: 66356.489 ops/s
Iteration  26: 65939.030 ops/s
Iteration  27: 67055.564 ops/s
Iteration  28: 65478.821 ops/s
Iteration  29: 64383.198 ops/s
Iteration  30: 63576.528 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_containsNoneIterable":
  64778.756 ±(99.9%) 984.989 ops/s [Average]
  (min, avg, max) = (62188.554, 64778.756, 67055.564), stdev = 1474.285
  CI (99.9%): [63793.767, 65763.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  64778.756 ± 984.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1960292.609 ops/s
# Warmup Iteration   2: 4420726.773 ops/s
# Warmup Iteration   3: 4613560.495 ops/s
# Warmup Iteration   4: 3858142.176 ops/s
# Warmup Iteration   5: 4451227.035 ops/s
# Warmup Iteration   6: 4603272.024 ops/s
# Warmup Iteration   7: 4554665.453 ops/s
# Warmup Iteration   8: 4580854.834 ops/s
# Warmup Iteration   9: 4502313.351 ops/s
# Warmup Iteration  10: 4561807.636 ops/s
# Warmup Iteration  11: 4590508.353 ops/s
# Warmup Iteration  12: 4452722.405 ops/s
# Warmup Iteration  13: 4369451.823 ops/s
# Warmup Iteration  14: 4408760.596 ops/s
# Warmup Iteration  15: 4580900.765 ops/s
# Warmup Iteration  16: 4514274.616 ops/s
# Warmup Iteration  17: 4579225.449 ops/s
# Warmup Iteration  18: 4567799.716 ops/s
# Warmup Iteration  19: 4549614.104 ops/s
# Warmup Iteration  20: 4575604.951 ops/s
# Warmup Iteration  21: 4596240.965 ops/s
# Warmup Iteration  22: 4558597.755 ops/s
# Warmup Iteration  23: 4543724.835 ops/s
# Warmup Iteration  24: 4519418.422 ops/s
# Warmup Iteration  25: 4456068.530 ops/s
# Warmup Iteration  26: 4573853.260 ops/s
# Warmup Iteration  27: 4561325.411 ops/s
# Warmup Iteration  28: 4548989.415 ops/s
# Warmup Iteration  29: 4532024.602 ops/s
# Warmup Iteration  30: 4571351.363 ops/s
Iteration   1: 4554747.061 ops/s
Iteration   2: 4252043.591 ops/s
Iteration   3: 4419508.460 ops/s
Iteration   4: 4435142.525 ops/s
Iteration   5: 4519494.192 ops/s
Iteration   6: 4546544.142 ops/s
Iteration   7: 4583303.989 ops/s
Iteration   8: 4501468.326 ops/s
Iteration   9: 4360754.604 ops/s
Iteration  10: 4426194.260 ops/s
Iteration  11: 4566513.974 ops/s
Iteration  12: 4534905.944 ops/s
Iteration  13: 4517782.347 ops/s
Iteration  14: 4483367.614 ops/s
Iteration  15: 4396072.866 ops/s
Iteration  16: 4605951.821 ops/s
Iteration  17: 4558241.044 ops/s
Iteration  18: 4561043.398 ops/s
Iteration  19: 4477991.866 ops/s
Iteration  20: 4317798.072 ops/s
Iteration  21: 4497145.910 ops/s
Iteration  22: 4403030.179 ops/s
Iteration  23: 4395681.336 ops/s
Iteration  24: 4657751.489 ops/s
Iteration  25: 4666368.029 ops/s
Iteration  26: 4554214.800 ops/s
Iteration  27: 4564629.362 ops/s
Iteration  28: 4534515.333 ops/s
Iteration  29: 4627359.330 ops/s
Iteration  30: 4521618.882 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_count":
  4501372.825 ±(99.9%) 65219.753 ops/s [Average]
  (min, avg, max) = (4252043.591, 4501372.825, 4666368.029), stdev = 97617.863
  CI (99.9%): [4436153.072, 4566592.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_count  thrpt   30  4501372.825 ± 65219.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730062.699 ops/s
# Warmup Iteration   2: 1418369.553 ops/s
# Warmup Iteration   3: 1533638.948 ops/s
# Warmup Iteration   4: 1526176.503 ops/s
# Warmup Iteration   5: 1265538.634 ops/s
# Warmup Iteration   6: 1532834.931 ops/s
# Warmup Iteration   7: 1542719.094 ops/s
# Warmup Iteration   8: 1527505.852 ops/s
# Warmup Iteration   9: 1508091.305 ops/s
# Warmup Iteration  10: 1535937.920 ops/s
# Warmup Iteration  11: 1514491.818 ops/s
# Warmup Iteration  12: 1546178.306 ops/s
# Warmup Iteration  13: 1529691.834 ops/s
# Warmup Iteration  14: 1528744.792 ops/s
# Warmup Iteration  15: 1533372.350 ops/s
# Warmup Iteration  16: 1532424.279 ops/s
# Warmup Iteration  17: 1549414.313 ops/s
# Warmup Iteration  18: 1502883.197 ops/s
# Warmup Iteration  19: 1565327.167 ops/s
# Warmup Iteration  20: 1507608.994 ops/s
# Warmup Iteration  21: 1502008.489 ops/s
# Warmup Iteration  22: 1465705.199 ops/s
# Warmup Iteration  23: 1512736.970 ops/s
# Warmup Iteration  24: 1558887.538 ops/s
# Warmup Iteration  25: 1507729.525 ops/s
# Warmup Iteration  26: 1502229.998 ops/s
# Warmup Iteration  27: 1540199.889 ops/s
# Warmup Iteration  28: 1560279.487 ops/s
# Warmup Iteration  29: 1501362.107 ops/s
# Warmup Iteration  30: 1542908.079 ops/s
Iteration   1: 1549230.766 ops/s
Iteration   2: 1523335.474 ops/s
Iteration   3: 1529958.155 ops/s
Iteration   4: 1543747.321 ops/s
Iteration   5: 1531583.444 ops/s
Iteration   6: 1554453.617 ops/s
Iteration   7: 1567139.645 ops/s
Iteration   8: 1562217.591 ops/s
Iteration   9: 1565358.243 ops/s
Iteration  10: 1566386.687 ops/s
Iteration  11: 1557571.876 ops/s
Iteration  12: 1552551.797 ops/s
Iteration  13: 1550715.756 ops/s
Iteration  14: 1559054.847 ops/s
Iteration  15: 1565583.638 ops/s
Iteration  16: 1545221.981 ops/s
Iteration  17: 1550630.934 ops/s
Iteration  18: 1535462.358 ops/s
Iteration  19: 1538147.751 ops/s
Iteration  20: 1529081.036 ops/s
Iteration  21: 1539964.029 ops/s
Iteration  22: 1543454.631 ops/s
Iteration  23: 1467923.864 ops/s
Iteration  24: 1549461.935 ops/s
Iteration  25: 1485691.320 ops/s
Iteration  26: 1491588.834 ops/s
Iteration  27: 1469958.571 ops/s
Iteration  28: 1495888.232 ops/s
Iteration  29: 1463961.407 ops/s
Iteration  30: 1472684.663 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countBy":
  1531933.680 ±(99.9%) 21848.105 ops/s [Average]
  (min, avg, max) = (1463961.407, 1531933.680, 1567139.645), stdev = 32701.218
  CI (99.9%): [1510085.575, 1553781.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_countBy  thrpt   30  1531933.680 ± 21848.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 237613.338 ops/s
# Warmup Iteration   2: 468212.731 ops/s
# Warmup Iteration   3: 498030.140 ops/s
# Warmup Iteration   4: 524894.786 ops/s
# Warmup Iteration   5: 446062.347 ops/s
# Warmup Iteration   6: 505505.151 ops/s
# Warmup Iteration   7: 522282.923 ops/s
# Warmup Iteration   8: 522835.021 ops/s
# Warmup Iteration   9: 528902.050 ops/s
# Warmup Iteration  10: 526486.423 ops/s
# Warmup Iteration  11: 528704.439 ops/s
# Warmup Iteration  12: 523468.781 ops/s
# Warmup Iteration  13: 527287.998 ops/s
# Warmup Iteration  14: 525357.646 ops/s
# Warmup Iteration  15: 528077.518 ops/s
# Warmup Iteration  16: 525843.426 ops/s
# Warmup Iteration  17: 519104.395 ops/s
# Warmup Iteration  18: 521837.893 ops/s
# Warmup Iteration  19: 523512.328 ops/s
# Warmup Iteration  20: 516040.005 ops/s
# Warmup Iteration  21: 509008.013 ops/s
# Warmup Iteration  22: 502929.844 ops/s
# Warmup Iteration  23: 506103.061 ops/s
# Warmup Iteration  24: 507058.981 ops/s
# Warmup Iteration  25: 524835.901 ops/s
# Warmup Iteration  26: 508001.539 ops/s
# Warmup Iteration  27: 503708.620 ops/s
# Warmup Iteration  28: 520756.894 ops/s
# Warmup Iteration  29: 507526.198 ops/s
# Warmup Iteration  30: 504094.457 ops/s
Iteration   1: 502260.105 ops/s
Iteration   2: 517212.653 ops/s
Iteration   3: 506582.026 ops/s
Iteration   4: 491663.942 ops/s
Iteration   5: 508189.720 ops/s
Iteration   6: 489149.646 ops/s
Iteration   7: 500349.499 ops/s
Iteration   8: 512298.911 ops/s
Iteration   9: 520534.907 ops/s
Iteration  10: 513743.160 ops/s
Iteration  11: 496163.853 ops/s
Iteration  12: 508334.658 ops/s
Iteration  13: 509079.072 ops/s
Iteration  14: 506030.754 ops/s
Iteration  15: 505004.859 ops/s
Iteration  16: 508246.059 ops/s
Iteration  17: 492117.537 ops/s
Iteration  18: 513984.332 ops/s
Iteration  19: 508077.788 ops/s
Iteration  20: 495736.079 ops/s
Iteration  21: 510876.525 ops/s
Iteration  22: 494213.305 ops/s
Iteration  23: 517384.360 ops/s
Iteration  24: 521589.218 ops/s
Iteration  25: 513256.151 ops/s
Iteration  26: 527477.812 ops/s
Iteration  27: 528126.410 ops/s
Iteration  28: 533503.440 ops/s
Iteration  29: 526788.300 ops/s
Iteration  30: 528002.778 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByEach":
  510199.262 ±(99.9%) 7986.136 ops/s [Average]
  (min, avg, max) = (489149.646, 510199.262, 533503.440), stdev = 11953.273
  CI (99.9%): [502213.126, 518185.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_countByEach  thrpt   30  510199.262 ± 7986.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717395.738 ops/s
# Warmup Iteration   2: 1354190.127 ops/s
# Warmup Iteration   3: 1494975.219 ops/s
# Warmup Iteration   4: 1486989.028 ops/s
# Warmup Iteration   5: 1234390.588 ops/s
# Warmup Iteration   6: 1453243.960 ops/s
# Warmup Iteration   7: 1483127.860 ops/s
# Warmup Iteration   8: 1488518.867 ops/s
# Warmup Iteration   9: 1487772.328 ops/s
# Warmup Iteration  10: 1489098.615 ops/s
# Warmup Iteration  11: 1447845.692 ops/s
# Warmup Iteration  12: 1411486.244 ops/s
# Warmup Iteration  13: 1475682.832 ops/s
# Warmup Iteration  14: 1458178.529 ops/s
# Warmup Iteration  15: 1413213.781 ops/s
# Warmup Iteration  16: 1453195.284 ops/s
# Warmup Iteration  17: 1434034.219 ops/s
# Warmup Iteration  18: 1467938.556 ops/s
# Warmup Iteration  19: 1487120.124 ops/s
# Warmup Iteration  20: 1453498.100 ops/s
# Warmup Iteration  21: 1461516.151 ops/s
# Warmup Iteration  22: 1481149.021 ops/s
# Warmup Iteration  23: 1497667.475 ops/s
# Warmup Iteration  24: 1465846.778 ops/s
# Warmup Iteration  25: 1461226.458 ops/s
# Warmup Iteration  26: 1442594.903 ops/s
# Warmup Iteration  27: 1446473.587 ops/s
# Warmup Iteration  28: 1476570.130 ops/s
# Warmup Iteration  29: 1483273.254 ops/s
# Warmup Iteration  30: 1480304.313 ops/s
Iteration   1: 1422754.645 ops/s
Iteration   2: 1477073.592 ops/s
Iteration   3: 1414725.235 ops/s
Iteration   4: 1378698.660 ops/s
Iteration   5: 1464441.754 ops/s
Iteration   6: 1454452.099 ops/s
Iteration   7: 1449415.412 ops/s
Iteration   8: 1413056.914 ops/s
Iteration   9: 1443270.157 ops/s
Iteration  10: 1476380.361 ops/s
Iteration  11: 1424586.577 ops/s
Iteration  12: 1426051.914 ops/s
Iteration  13: 1401964.449 ops/s
Iteration  14: 1433791.531 ops/s
Iteration  15: 1481732.660 ops/s
Iteration  16: 1478369.550 ops/s
Iteration  17: 1472114.569 ops/s
Iteration  18: 1486261.688 ops/s
Iteration  19: 1478062.482 ops/s
Iteration  20: 1470706.853 ops/s
Iteration  21: 1470291.470 ops/s
Iteration  22: 1470229.259 ops/s
Iteration  23: 1484083.449 ops/s
Iteration  24: 1479342.358 ops/s
Iteration  25: 1457692.143 ops/s
Iteration  26: 1483955.417 ops/s
Iteration  27: 1479882.862 ops/s
Iteration  28: 1473240.394 ops/s
Iteration  29: 1440797.026 ops/s
Iteration  30: 1460641.526 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countByWith":
  1454935.567 ±(99.9%) 19105.971 ops/s [Average]
  (min, avg, max) = (1378698.660, 1454935.567, 1486261.688), stdev = 28596.921
  CI (99.9%): [1435829.596, 1474041.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_countByWith  thrpt   30  1454935.567 ± 19105.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1865351.160 ops/s
# Warmup Iteration   2: 4148187.462 ops/s
# Warmup Iteration   3: 4310290.366 ops/s
# Warmup Iteration   4: 4001717.983 ops/s
# Warmup Iteration   5: 3794126.203 ops/s
# Warmup Iteration   6: 4167888.719 ops/s
# Warmup Iteration   7: 4121757.365 ops/s
# Warmup Iteration   8: 4228699.224 ops/s
# Warmup Iteration   9: 4305368.462 ops/s
# Warmup Iteration  10: 4271442.350 ops/s
# Warmup Iteration  11: 4267197.553 ops/s
# Warmup Iteration  12: 4284809.107 ops/s
# Warmup Iteration  13: 4309408.793 ops/s
# Warmup Iteration  14: 4312148.758 ops/s
# Warmup Iteration  15: 4364503.131 ops/s
# Warmup Iteration  16: 4286037.027 ops/s
# Warmup Iteration  17: 4205230.185 ops/s
# Warmup Iteration  18: 4270725.893 ops/s
# Warmup Iteration  19: 4262257.803 ops/s
# Warmup Iteration  20: 4163649.489 ops/s
# Warmup Iteration  21: 4149173.037 ops/s
# Warmup Iteration  22: 4226475.436 ops/s
# Warmup Iteration  23: 4230886.938 ops/s
# Warmup Iteration  24: 4302271.986 ops/s
# Warmup Iteration  25: 4248701.739 ops/s
# Warmup Iteration  26: 4182343.825 ops/s
# Warmup Iteration  27: 4097600.555 ops/s
# Warmup Iteration  28: 4072384.266 ops/s
# Warmup Iteration  29: 4288123.498 ops/s
# Warmup Iteration  30: 4202442.968 ops/s
Iteration   1: 4266667.551 ops/s
Iteration   2: 4260869.302 ops/s
Iteration   3: 4045690.120 ops/s
Iteration   4: 4233367.352 ops/s
Iteration   5: 4193688.144 ops/s
Iteration   6: 4277308.526 ops/s
Iteration   7: 4314367.110 ops/s
Iteration   8: 4295619.918 ops/s
Iteration   9: 4203434.764 ops/s
Iteration  10: 4211747.873 ops/s
Iteration  11: 4240489.189 ops/s
Iteration  12: 4268207.205 ops/s
Iteration  13: 4102632.797 ops/s
Iteration  14: 4128749.735 ops/s
Iteration  15: 4210846.710 ops/s
Iteration  16: 4303226.851 ops/s
Iteration  17: 4273658.351 ops/s
Iteration  18: 4240185.168 ops/s
Iteration  19: 4264693.550 ops/s
Iteration  20: 4243062.493 ops/s
Iteration  21: 4279221.679 ops/s
Iteration  22: 4179169.067 ops/s
Iteration  23: 4163916.035 ops/s
Iteration  24: 4166435.871 ops/s
Iteration  25: 4201680.941 ops/s
Iteration  26: 4133564.668 ops/s
Iteration  27: 4228078.192 ops/s
Iteration  28: 4184781.386 ops/s
Iteration  29: 4182069.193 ops/s
Iteration  30: 4267687.433 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_countWith":
  4218837.239 ±(99.9%) 42072.418 ops/s [Average]
  (min, avg, max) = (4045690.120, 4218837.239, 4314367.110), stdev = 62972.020
  CI (99.9%): [4176764.821, 4260909.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_countWith  thrpt   30  4218837.239 ± 42072.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659563.966 ops/s
# Warmup Iteration   2: 1356429.786 ops/s
# Warmup Iteration   3: 1442336.549 ops/s
# Warmup Iteration   4: 1451230.394 ops/s
# Warmup Iteration   5: 1186083.691 ops/s
# Warmup Iteration   6: 1437036.506 ops/s
# Warmup Iteration   7: 1445014.518 ops/s
# Warmup Iteration   8: 1452866.517 ops/s
# Warmup Iteration   9: 1435932.739 ops/s
# Warmup Iteration  10: 1401625.426 ops/s
# Warmup Iteration  11: 1378398.163 ops/s
# Warmup Iteration  12: 1438386.395 ops/s
# Warmup Iteration  13: 1436109.197 ops/s
# Warmup Iteration  14: 1442442.876 ops/s
# Warmup Iteration  15: 1455877.958 ops/s
# Warmup Iteration  16: 1443637.560 ops/s
# Warmup Iteration  17: 1434472.033 ops/s
# Warmup Iteration  18: 1463164.749 ops/s
# Warmup Iteration  19: 1456454.867 ops/s
# Warmup Iteration  20: 1451224.217 ops/s
# Warmup Iteration  21: 1451635.770 ops/s
# Warmup Iteration  22: 1466724.750 ops/s
# Warmup Iteration  23: 1437540.477 ops/s
# Warmup Iteration  24: 1446150.475 ops/s
# Warmup Iteration  25: 1459632.291 ops/s
# Warmup Iteration  26: 1461945.709 ops/s
# Warmup Iteration  27: 1424212.510 ops/s
# Warmup Iteration  28: 1442636.131 ops/s
# Warmup Iteration  29: 1439311.467 ops/s
# Warmup Iteration  30: 1438763.543 ops/s
Iteration   1: 1446389.892 ops/s
Iteration   2: 1463326.604 ops/s
Iteration   3: 1445722.849 ops/s
Iteration   4: 1376837.567 ops/s
Iteration   5: 1414469.371 ops/s
Iteration   6: 1360916.835 ops/s
Iteration   7: 1428756.957 ops/s
Iteration   8: 1414672.481 ops/s
Iteration   9: 1382404.279 ops/s
Iteration  10: 1361838.179 ops/s
Iteration  11: 1373952.249 ops/s
Iteration  12: 1394807.992 ops/s
Iteration  13: 1394129.258 ops/s
Iteration  14: 1362907.885 ops/s
Iteration  15: 1414307.131 ops/s
Iteration  16: 1439438.273 ops/s
Iteration  17: 1407013.247 ops/s
Iteration  18: 1380547.775 ops/s
Iteration  19: 1395832.098 ops/s
Iteration  20: 1458403.763 ops/s
Iteration  21: 1463641.468 ops/s
Iteration  22: 1400984.174 ops/s
Iteration  23: 1437201.476 ops/s
Iteration  24: 1441578.188 ops/s
Iteration  25: 1432834.435 ops/s
Iteration  26: 1445008.655 ops/s
Iteration  27: 1459870.908 ops/s
Iteration  28: 1460100.874 ops/s
Iteration  29: 1454955.749 ops/s
Iteration  30: 1448068.176 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detect":
  1418697.293 ±(99.9%) 22664.820 ops/s [Average]
  (min, avg, max) = (1360916.835, 1418697.293, 1463641.468), stdev = 33923.638
  CI (99.9%): [1396032.473, 1441362.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detect  thrpt   30  1418697.293 ± 22664.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662733.921 ops/s
# Warmup Iteration   2: 1342164.249 ops/s
# Warmup Iteration   3: 1406825.825 ops/s
# Warmup Iteration   4: 1396575.581 ops/s
# Warmup Iteration   5: 1146025.228 ops/s
# Warmup Iteration   6: 1421584.157 ops/s
# Warmup Iteration   7: 1345755.260 ops/s
# Warmup Iteration   8: 1361011.107 ops/s
# Warmup Iteration   9: 1383302.645 ops/s
# Warmup Iteration  10: 1409761.795 ops/s
# Warmup Iteration  11: 1379555.109 ops/s
# Warmup Iteration  12: 1356126.138 ops/s
# Warmup Iteration  13: 1402638.025 ops/s
# Warmup Iteration  14: 1407356.699 ops/s
# Warmup Iteration  15: 1358707.129 ops/s
# Warmup Iteration  16: 1407677.689 ops/s
# Warmup Iteration  17: 1438051.729 ops/s
# Warmup Iteration  18: 1337035.507 ops/s
# Warmup Iteration  19: 1356968.553 ops/s
# Warmup Iteration  20: 1341849.146 ops/s
# Warmup Iteration  21: 1412402.259 ops/s
# Warmup Iteration  22: 1417877.350 ops/s
# Warmup Iteration  23: 1416250.588 ops/s
# Warmup Iteration  24: 1396797.894 ops/s
# Warmup Iteration  25: 1422652.978 ops/s
# Warmup Iteration  26: 1411889.737 ops/s
# Warmup Iteration  27: 1399855.115 ops/s
# Warmup Iteration  28: 1411455.306 ops/s
# Warmup Iteration  29: 1419593.235 ops/s
# Warmup Iteration  30: 1413473.420 ops/s
Iteration   1: 1405806.446 ops/s
Iteration   2: 1347633.884 ops/s
Iteration   3: 1368446.214 ops/s
Iteration   4: 1411585.829 ops/s
Iteration   5: 1367230.972 ops/s
Iteration   6: 1364865.587 ops/s
Iteration   7: 1404408.089 ops/s
Iteration   8: 1317339.342 ops/s
Iteration   9: 1373725.979 ops/s
Iteration  10: 1376467.977 ops/s
Iteration  11: 1360832.645 ops/s
Iteration  12: 1359355.687 ops/s
Iteration  13: 1348116.961 ops/s
Iteration  14: 1357176.880 ops/s
Iteration  15: 1347915.225 ops/s
Iteration  16: 1396150.158 ops/s
Iteration  17: 1376016.064 ops/s
Iteration  18: 1406290.184 ops/s
Iteration  19: 1416888.917 ops/s
Iteration  20: 1399133.339 ops/s
Iteration  21: 1405458.377 ops/s
Iteration  22: 1409342.517 ops/s
Iteration  23: 1411914.825 ops/s
Iteration  24: 1412651.618 ops/s
Iteration  25: 1416829.920 ops/s
Iteration  26: 1370778.954 ops/s
Iteration  27: 1406893.352 ops/s
Iteration  28: 1402270.235 ops/s
Iteration  29: 1396381.860 ops/s
Iteration  30: 1363147.094 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectIfNone":
  1383368.504 ±(99.9%) 17690.701 ops/s [Average]
  (min, avg, max) = (1317339.342, 1383368.504, 1416888.917), stdev = 26478.611
  CI (99.9%): [1365677.803, 1401059.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  1383368.504 ± 17690.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264606.771 ops/s
# Warmup Iteration   2: 378079.862 ops/s
# Warmup Iteration   3: 448524.596 ops/s
# Warmup Iteration   4: 445657.674 ops/s
# Warmup Iteration   5: 453261.580 ops/s
# Warmup Iteration   6: 444247.479 ops/s
# Warmup Iteration   7: 419702.539 ops/s
# Warmup Iteration   8: 405357.764 ops/s
# Warmup Iteration   9: 448517.124 ops/s
# Warmup Iteration  10: 447113.832 ops/s
# Warmup Iteration  11: 448392.053 ops/s
# Warmup Iteration  12: 447169.108 ops/s
# Warmup Iteration  13: 448086.557 ops/s
# Warmup Iteration  14: 450189.703 ops/s
# Warmup Iteration  15: 449145.882 ops/s
# Warmup Iteration  16: 440339.479 ops/s
# Warmup Iteration  17: 462120.778 ops/s
# Warmup Iteration  18: 460948.024 ops/s
# Warmup Iteration  19: 461106.000 ops/s
# Warmup Iteration  20: 468391.339 ops/s
# Warmup Iteration  21: 466474.204 ops/s
# Warmup Iteration  22: 445267.305 ops/s
# Warmup Iteration  23: 458180.133 ops/s
# Warmup Iteration  24: 460866.692 ops/s
# Warmup Iteration  25: 459970.245 ops/s
# Warmup Iteration  26: 449174.587 ops/s
# Warmup Iteration  27: 459019.801 ops/s
# Warmup Iteration  28: 458471.350 ops/s
# Warmup Iteration  29: 459760.025 ops/s
# Warmup Iteration  30: 459805.094 ops/s
Iteration   1: 463966.956 ops/s
Iteration   2: 436172.416 ops/s
Iteration   3: 461476.044 ops/s
Iteration   4: 460742.581 ops/s
Iteration   5: 465298.449 ops/s
Iteration   6: 468773.551 ops/s
Iteration   7: 464361.436 ops/s
Iteration   8: 460230.361 ops/s
Iteration   9: 460923.510 ops/s
Iteration  10: 459253.235 ops/s
Iteration  11: 460589.961 ops/s
Iteration  12: 457399.825 ops/s
Iteration  13: 461675.473 ops/s
Iteration  14: 464249.770 ops/s
Iteration  15: 465708.390 ops/s
Iteration  16: 468532.514 ops/s
Iteration  17: 460674.403 ops/s
Iteration  18: 463922.382 ops/s
Iteration  19: 461552.235 ops/s
Iteration  20: 461945.705 ops/s
Iteration  21: 453437.991 ops/s
Iteration  22: 461079.675 ops/s
Iteration  23: 464455.611 ops/s
Iteration  24: 455405.415 ops/s
Iteration  25: 457616.387 ops/s
Iteration  26: 463118.077 ops/s
Iteration  27: 459173.895 ops/s
Iteration  28: 460758.846 ops/s
Iteration  29: 457469.441 ops/s
Iteration  30: 461370.014 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectOptional":
  460711.152 ±(99.9%) 3848.261 ops/s [Average]
  (min, avg, max) = (436172.416, 460711.152, 468773.551), stdev = 5759.896
  CI (99.9%): [456862.891, 464559.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detectOptional  thrpt   30  460711.152 ± 3848.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658491.011 ops/s
# Warmup Iteration   2: 1354481.837 ops/s
# Warmup Iteration   3: 1420063.328 ops/s
# Warmup Iteration   4: 1421892.106 ops/s
# Warmup Iteration   5: 1174972.497 ops/s
# Warmup Iteration   6: 1415015.700 ops/s
# Warmup Iteration   7: 1403692.791 ops/s
# Warmup Iteration   8: 1419056.066 ops/s
# Warmup Iteration   9: 1426300.277 ops/s
# Warmup Iteration  10: 1426557.295 ops/s
# Warmup Iteration  11: 1378256.663 ops/s
# Warmup Iteration  12: 1432131.343 ops/s
# Warmup Iteration  13: 1414316.193 ops/s
# Warmup Iteration  14: 1433068.230 ops/s
# Warmup Iteration  15: 1426243.289 ops/s
# Warmup Iteration  16: 1428510.971 ops/s
# Warmup Iteration  17: 1417220.511 ops/s
# Warmup Iteration  18: 1432409.308 ops/s
# Warmup Iteration  19: 1447128.817 ops/s
# Warmup Iteration  20: 1443866.643 ops/s
# Warmup Iteration  21: 1417619.588 ops/s
# Warmup Iteration  22: 1415887.546 ops/s
# Warmup Iteration  23: 1408044.239 ops/s
# Warmup Iteration  24: 1421802.286 ops/s
# Warmup Iteration  25: 1424297.571 ops/s
# Warmup Iteration  26: 1419199.843 ops/s
# Warmup Iteration  27: 1424356.915 ops/s
# Warmup Iteration  28: 1429882.497 ops/s
# Warmup Iteration  29: 1417910.697 ops/s
# Warmup Iteration  30: 1424704.697 ops/s
Iteration   1: 1423764.269 ops/s
Iteration   2: 1413502.394 ops/s
Iteration   3: 1426466.953 ops/s
Iteration   4: 1376592.142 ops/s
Iteration   5: 1356521.557 ops/s
Iteration   6: 1367273.760 ops/s
Iteration   7: 1437792.953 ops/s
Iteration   8: 1440629.853 ops/s
Iteration   9: 1440477.737 ops/s
Iteration  10: 1448110.595 ops/s
Iteration  11: 1446335.166 ops/s
Iteration  12: 1429841.653 ops/s
Iteration  13: 1427276.045 ops/s
Iteration  14: 1429669.202 ops/s
Iteration  15: 1440649.643 ops/s
Iteration  16: 1437313.428 ops/s
Iteration  17: 1433373.022 ops/s
Iteration  18: 1414254.896 ops/s
Iteration  19: 1414197.717 ops/s
Iteration  20: 1456544.248 ops/s
Iteration  21: 1460288.438 ops/s
Iteration  22: 1425312.028 ops/s
Iteration  23: 1459186.471 ops/s
Iteration  24: 1436903.489 ops/s
Iteration  25: 1425102.300 ops/s
Iteration  26: 1436212.985 ops/s
Iteration  27: 1440943.403 ops/s
Iteration  28: 1434482.843 ops/s
Iteration  29: 1422446.181 ops/s
Iteration  30: 1424925.050 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWith":
  1427546.347 ±(99.9%) 16042.151 ops/s [Average]
  (min, avg, max) = (1356521.557, 1427546.347, 1460288.438), stdev = 24011.139
  CI (99.9%): [1411504.196, 1443588.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detectWith  thrpt   30  1427546.347 ± 16042.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656372.783 ops/s
# Warmup Iteration   2: 1261622.309 ops/s
# Warmup Iteration   3: 1363955.438 ops/s
# Warmup Iteration   4: 1407426.934 ops/s
# Warmup Iteration   5: 1162104.073 ops/s
# Warmup Iteration   6: 1392897.793 ops/s
# Warmup Iteration   7: 1365034.122 ops/s
# Warmup Iteration   8: 1367411.258 ops/s
# Warmup Iteration   9: 1335996.482 ops/s
# Warmup Iteration  10: 1357664.271 ops/s
# Warmup Iteration  11: 1392032.805 ops/s
# Warmup Iteration  12: 1402965.969 ops/s
# Warmup Iteration  13: 1394731.098 ops/s
# Warmup Iteration  14: 1396727.754 ops/s
# Warmup Iteration  15: 1375322.632 ops/s
# Warmup Iteration  16: 1375155.267 ops/s
# Warmup Iteration  17: 1421960.565 ops/s
# Warmup Iteration  18: 1410922.994 ops/s
# Warmup Iteration  19: 1423548.131 ops/s
# Warmup Iteration  20: 1419428.095 ops/s
# Warmup Iteration  21: 1386965.679 ops/s
# Warmup Iteration  22: 1336165.421 ops/s
# Warmup Iteration  23: 1394860.944 ops/s
# Warmup Iteration  24: 1398608.239 ops/s
# Warmup Iteration  25: 1392905.028 ops/s
# Warmup Iteration  26: 1405519.318 ops/s
# Warmup Iteration  27: 1394151.963 ops/s
# Warmup Iteration  28: 1395975.554 ops/s
# Warmup Iteration  29: 1395346.611 ops/s
# Warmup Iteration  30: 1391700.574 ops/s
Iteration   1: 1415467.378 ops/s
Iteration   2: 1386841.008 ops/s
Iteration   3: 1385088.406 ops/s
Iteration   4: 1406211.926 ops/s
Iteration   5: 1333315.191 ops/s
Iteration   6: 1398533.947 ops/s
Iteration   7: 1402821.469 ops/s
Iteration   8: 1410939.774 ops/s
Iteration   9: 1421728.129 ops/s
Iteration  10: 1410051.497 ops/s
Iteration  11: 1398512.624 ops/s
Iteration  12: 1399369.568 ops/s
Iteration  13: 1401048.608 ops/s
Iteration  14: 1390342.450 ops/s
Iteration  15: 1389839.908 ops/s
Iteration  16: 1391855.182 ops/s
Iteration  17: 1390056.107 ops/s
Iteration  18: 1349513.484 ops/s
Iteration  19: 1341105.407 ops/s
Iteration  20: 1320136.102 ops/s
Iteration  21: 1342889.181 ops/s
Iteration  22: 1359818.931 ops/s
Iteration  23: 1392749.907 ops/s
Iteration  24: 1372792.319 ops/s
Iteration  25: 1409732.519 ops/s
Iteration  26: 1406124.557 ops/s
Iteration  27: 1388640.275 ops/s
Iteration  28: 1379229.486 ops/s
Iteration  29: 1394517.348 ops/s
Iteration  30: 1394654.271 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1386130.899 ±(99.9%) 17206.236 ops/s [Average]
  (min, avg, max) = (1320136.102, 1386130.899, 1421728.129), stdev = 25753.486
  CI (99.9%): [1368924.663, 1403337.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1386130.899 ± 17206.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265466.820 ops/s
# Warmup Iteration   2: 365838.409 ops/s
# Warmup Iteration   3: 450484.677 ops/s
# Warmup Iteration   4: 448411.558 ops/s
# Warmup Iteration   5: 449287.876 ops/s
# Warmup Iteration   6: 448927.125 ops/s
# Warmup Iteration   7: 438717.304 ops/s
# Warmup Iteration   8: 379997.321 ops/s
# Warmup Iteration   9: 450099.563 ops/s
# Warmup Iteration  10: 426757.699 ops/s
# Warmup Iteration  11: 451992.283 ops/s
# Warmup Iteration  12: 448186.496 ops/s
# Warmup Iteration  13: 450119.856 ops/s
# Warmup Iteration  14: 446580.985 ops/s
# Warmup Iteration  15: 445378.546 ops/s
# Warmup Iteration  16: 450576.292 ops/s
# Warmup Iteration  17: 459184.468 ops/s
# Warmup Iteration  18: 465067.349 ops/s
# Warmup Iteration  19: 465168.845 ops/s
# Warmup Iteration  20: 467529.182 ops/s
# Warmup Iteration  21: 464792.430 ops/s
# Warmup Iteration  22: 465101.936 ops/s
# Warmup Iteration  23: 458923.448 ops/s
# Warmup Iteration  24: 446469.961 ops/s
# Warmup Iteration  25: 462660.305 ops/s
# Warmup Iteration  26: 449844.886 ops/s
# Warmup Iteration  27: 464959.691 ops/s
# Warmup Iteration  28: 461456.312 ops/s
# Warmup Iteration  29: 459648.093 ops/s
# Warmup Iteration  30: 444969.230 ops/s
Iteration   1: 453845.731 ops/s
Iteration   2: 465299.719 ops/s
Iteration   3: 465334.477 ops/s
Iteration   4: 461723.430 ops/s
Iteration   5: 445564.137 ops/s
Iteration   6: 437016.306 ops/s
Iteration   7: 460027.173 ops/s
Iteration   8: 446701.909 ops/s
Iteration   9: 463007.289 ops/s
Iteration  10: 467153.281 ops/s
Iteration  11: 463318.968 ops/s
Iteration  12: 459075.514 ops/s
Iteration  13: 464818.866 ops/s
Iteration  14: 449653.574 ops/s
Iteration  15: 444625.364 ops/s
Iteration  16: 456146.625 ops/s
Iteration  17: 438354.325 ops/s
Iteration  18: 441708.146 ops/s
Iteration  19: 431865.523 ops/s
Iteration  20: 450479.018 ops/s
Iteration  21: 449578.330 ops/s
Iteration  22: 448185.983 ops/s
Iteration  23: 448241.040 ops/s
Iteration  24: 441603.182 ops/s
Iteration  25: 440133.136 ops/s
Iteration  26: 437169.496 ops/s
Iteration  27: 446054.088 ops/s
Iteration  28: 438427.617 ops/s
Iteration  29: 449713.414 ops/s
Iteration  30: 454221.731 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_detectWithOptional":
  450634.913 ±(99.9%) 6748.197 ops/s [Average]
  (min, avg, max) = (431865.523, 450634.913, 467153.281), stdev = 10100.384
  CI (99.9%): [443886.716, 457383.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  450634.913 ± 6748.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1379572.862 ops/s
# Warmup Iteration   2: 3110016.607 ops/s
# Warmup Iteration   3: 2800020.141 ops/s
# Warmup Iteration   4: 2969047.358 ops/s
# Warmup Iteration   5: 3167346.754 ops/s
# Warmup Iteration   6: 3197471.768 ops/s
# Warmup Iteration   7: 3163433.839 ops/s
# Warmup Iteration   8: 3171715.968 ops/s
# Warmup Iteration   9: 3184667.338 ops/s
# Warmup Iteration  10: 3123294.415 ops/s
# Warmup Iteration  11: 3150090.215 ops/s
# Warmup Iteration  12: 3110634.426 ops/s
# Warmup Iteration  13: 3120317.726 ops/s
# Warmup Iteration  14: 3214295.684 ops/s
# Warmup Iteration  15: 3190553.237 ops/s
# Warmup Iteration  16: 3139579.503 ops/s
# Warmup Iteration  17: 3193088.194 ops/s
# Warmup Iteration  18: 3180759.666 ops/s
# Warmup Iteration  19: 3167213.161 ops/s
# Warmup Iteration  20: 3163714.992 ops/s
# Warmup Iteration  21: 3106248.126 ops/s
# Warmup Iteration  22: 3173671.184 ops/s
# Warmup Iteration  23: 3171576.303 ops/s
# Warmup Iteration  24: 3161162.086 ops/s
# Warmup Iteration  25: 3202310.387 ops/s
# Warmup Iteration  26: 3153568.483 ops/s
# Warmup Iteration  27: 3196381.913 ops/s
# Warmup Iteration  28: 3120535.166 ops/s
# Warmup Iteration  29: 3117488.827 ops/s
# Warmup Iteration  30: 3198258.436 ops/s
Iteration   1: 3200194.212 ops/s
Iteration   2: 3217428.057 ops/s
Iteration   3: 3218879.516 ops/s
Iteration   4: 3172159.882 ops/s
Iteration   5: 3138703.009 ops/s
Iteration   6: 3189382.501 ops/s
Iteration   7: 3129370.271 ops/s
Iteration   8: 3139360.659 ops/s
Iteration   9: 3147006.617 ops/s
Iteration  10: 3220268.914 ops/s
Iteration  11: 2969618.592 ops/s
Iteration  12: 3098159.014 ops/s
Iteration  13: 3253583.983 ops/s
Iteration  14: 3212394.597 ops/s
Iteration  15: 3110073.105 ops/s
Iteration  16: 3202159.859 ops/s
Iteration  17: 3057605.328 ops/s
Iteration  18: 3092624.401 ops/s
Iteration  19: 3220700.005 ops/s
Iteration  20: 3212348.195 ops/s
Iteration  21: 3212383.856 ops/s
Iteration  22: 3131232.085 ops/s
Iteration  23: 3118651.305 ops/s
Iteration  24: 3262026.808 ops/s
Iteration  25: 3147044.820 ops/s
Iteration  26: 3110697.186 ops/s
Iteration  27: 3145821.923 ops/s
Iteration  28: 3178904.154 ops/s
Iteration  29: 3203209.900 ops/s
Iteration  30: 3235662.874 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_empty":
  3164921.854 ±(99.9%) 42620.619 ops/s [Average]
  (min, avg, max) = (2969618.592, 3164921.854, 3262026.808), stdev = 63792.541
  CI (99.9%): [3122301.235, 3207542.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_empty  thrpt   30  3164921.854 ± 42620.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 305293.868 ops/s
# Warmup Iteration   2: 532392.799 ops/s
# Warmup Iteration   3: 602009.861 ops/s
# Warmup Iteration   4: 598709.594 ops/s
# Warmup Iteration   5: 601031.736 ops/s
# Warmup Iteration   6: 513103.135 ops/s
# Warmup Iteration   7: 605506.006 ops/s
# Warmup Iteration   8: 597267.321 ops/s
# Warmup Iteration   9: 605045.046 ops/s
# Warmup Iteration  10: 608559.842 ops/s
# Warmup Iteration  11: 604592.127 ops/s
# Warmup Iteration  12: 610107.771 ops/s
# Warmup Iteration  13: 600775.109 ops/s
# Warmup Iteration  14: 601234.425 ops/s
# Warmup Iteration  15: 601687.429 ops/s
# Warmup Iteration  16: 599489.388 ops/s
# Warmup Iteration  17: 592254.552 ops/s
# Warmup Iteration  18: 593534.311 ops/s
# Warmup Iteration  19: 580096.422 ops/s
# Warmup Iteration  20: 611326.944 ops/s
# Warmup Iteration  21: 608473.299 ops/s
# Warmup Iteration  22: 600631.290 ops/s
# Warmup Iteration  23: 598892.618 ops/s
# Warmup Iteration  24: 597347.582 ops/s
# Warmup Iteration  25: 580966.238 ops/s
# Warmup Iteration  26: 577424.608 ops/s
# Warmup Iteration  27: 588628.594 ops/s
# Warmup Iteration  28: 578076.429 ops/s
# Warmup Iteration  29: 592420.603 ops/s
# Warmup Iteration  30: 606238.417 ops/s
Iteration   1: 611230.422 ops/s
Iteration   2: 609934.906 ops/s
Iteration   3: 603325.252 ops/s
Iteration   4: 605761.538 ops/s
Iteration   5: 600000.119 ops/s
Iteration   6: 601228.869 ops/s
Iteration   7: 592884.379 ops/s
Iteration   8: 598204.214 ops/s
Iteration   9: 589141.180 ops/s
Iteration  10: 596510.243 ops/s
Iteration  11: 594028.016 ops/s
Iteration  12: 593074.244 ops/s
Iteration  13: 567743.405 ops/s
Iteration  14: 607446.817 ops/s
Iteration  15: 596181.236 ops/s
Iteration  16: 586657.148 ops/s
Iteration  17: 585252.511 ops/s
Iteration  18: 596157.882 ops/s
Iteration  19: 605664.404 ops/s
Iteration  20: 595833.728 ops/s
Iteration  21: 602993.198 ops/s
Iteration  22: 603050.565 ops/s
Iteration  23: 602024.812 ops/s
Iteration  24: 608913.468 ops/s
Iteration  25: 579817.672 ops/s
Iteration  26: 565813.096 ops/s
Iteration  27: 561533.192 ops/s
Iteration  28: 590164.311 ops/s
Iteration  29: 603310.008 ops/s
Iteration  30: 573114.870 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCode":
  594233.190 ±(99.9%) 8859.024 ops/s [Average]
  (min, avg, max) = (561533.192, 594233.190, 611230.422), stdev = 13259.771
  CI (99.9%): [585374.166, 603092.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  594233.190 ± 8859.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCose$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCose

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29643.466 ops/s
# Warmup Iteration   2: 39069.719 ops/s
# Warmup Iteration   3: 54674.791 ops/s
# Warmup Iteration   4: 56801.036 ops/s
# Warmup Iteration   5: 56033.534 ops/s
# Warmup Iteration   6: 56926.866 ops/s
# Warmup Iteration   7: 57446.654 ops/s
# Warmup Iteration   8: 57777.094 ops/s
# Warmup Iteration   9: 56564.623 ops/s
# Warmup Iteration  10: 46906.736 ops/s
# Warmup Iteration  11: 56797.278 ops/s
# Warmup Iteration  12: 55217.006 ops/s
# Warmup Iteration  13: 56513.260 ops/s
# Warmup Iteration  14: 56648.955 ops/s
# Warmup Iteration  15: 55259.553 ops/s
# Warmup Iteration  16: 55936.286 ops/s
# Warmup Iteration  17: 58379.159 ops/s
# Warmup Iteration  18: 56623.373 ops/s
# Warmup Iteration  19: 54470.734 ops/s
# Warmup Iteration  20: 56527.980 ops/s
# Warmup Iteration  21: 57312.314 ops/s
# Warmup Iteration  22: 57072.597 ops/s
# Warmup Iteration  23: 57077.444 ops/s
# Warmup Iteration  24: 56904.120 ops/s
# Warmup Iteration  25: 57092.169 ops/s
# Warmup Iteration  26: 56165.843 ops/s
# Warmup Iteration  27: 57497.665 ops/s
# Warmup Iteration  28: 56580.517 ops/s
# Warmup Iteration  29: 56567.541 ops/s
# Warmup Iteration  30: 57407.718 ops/s
Iteration   1: 56100.795 ops/s
Iteration   2: 56467.876 ops/s
Iteration   3: 56442.822 ops/s
Iteration   4: 56561.370 ops/s
Iteration   5: 57511.063 ops/s
Iteration   6: 57006.911 ops/s
Iteration   7: 57722.493 ops/s
Iteration   8: 57719.019 ops/s
Iteration   9: 58211.389 ops/s
Iteration  10: 58223.092 ops/s
Iteration  11: 58111.652 ops/s
Iteration  12: 58093.296 ops/s
Iteration  13: 58161.342 ops/s
Iteration  14: 58103.107 ops/s
Iteration  15: 57646.649 ops/s
Iteration  16: 57258.399 ops/s
Iteration  17: 57488.345 ops/s
Iteration  18: 57074.074 ops/s
Iteration  19: 57939.366 ops/s
Iteration  20: 55317.521 ops/s
Iteration  21: 54701.330 ops/s
Iteration  22: 54726.821 ops/s
Iteration  23: 53423.621 ops/s
Iteration  24: 54266.178 ops/s
Iteration  25: 53405.881 ops/s
Iteration  26: 54636.556 ops/s
Iteration  27: 57260.043 ops/s
Iteration  28: 57213.346 ops/s
Iteration  29: 56832.350 ops/s
Iteration  30: 56182.002 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCose":
  56660.290 ±(99.9%) 975.822 ops/s [Average]
  (min, avg, max) = (53405.881, 56660.290, 58223.092), stdev = 1460.564
  CI (99.9%): [55684.468, 57636.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_equalsAndHashCose  thrpt   30  56660.290 ± 975.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275384.520 ops/s
# Warmup Iteration   2: 504609.802 ops/s
# Warmup Iteration   3: 562422.121 ops/s
# Warmup Iteration   4: 587122.331 ops/s
# Warmup Iteration   5: 590311.981 ops/s
# Warmup Iteration   6: 463114.867 ops/s
# Warmup Iteration   7: 584105.314 ops/s
# Warmup Iteration   8: 576488.640 ops/s
# Warmup Iteration   9: 573124.426 ops/s
# Warmup Iteration  10: 591409.022 ops/s
# Warmup Iteration  11: 583420.774 ops/s
# Warmup Iteration  12: 565820.538 ops/s
# Warmup Iteration  13: 584655.052 ops/s
# Warmup Iteration  14: 576856.590 ops/s
# Warmup Iteration  15: 593223.236 ops/s
# Warmup Iteration  16: 592527.647 ops/s
# Warmup Iteration  17: 582707.582 ops/s
# Warmup Iteration  18: 594963.032 ops/s
# Warmup Iteration  19: 586310.578 ops/s
# Warmup Iteration  20: 600923.852 ops/s
# Warmup Iteration  21: 603485.000 ops/s
# Warmup Iteration  22: 599777.009 ops/s
# Warmup Iteration  23: 602697.275 ops/s
# Warmup Iteration  24: 602997.845 ops/s
# Warmup Iteration  25: 602150.818 ops/s
# Warmup Iteration  26: 584629.018 ops/s
# Warmup Iteration  27: 592410.215 ops/s
# Warmup Iteration  28: 595740.747 ops/s
# Warmup Iteration  29: 590901.553 ops/s
# Warmup Iteration  30: 582676.469 ops/s
Iteration   1: 592811.200 ops/s
Iteration   2: 564086.623 ops/s
Iteration   3: 577073.922 ops/s
Iteration   4: 587860.667 ops/s
Iteration   5: 586084.245 ops/s
Iteration   6: 593859.204 ops/s
Iteration   7: 563020.514 ops/s
Iteration   8: 568394.365 ops/s
Iteration   9: 586990.729 ops/s
Iteration  10: 594663.465 ops/s
Iteration  11: 586443.554 ops/s
Iteration  12: 585935.116 ops/s
Iteration  13: 593321.088 ops/s
Iteration  14: 593227.092 ops/s
Iteration  15: 588374.859 ops/s
Iteration  16: 587072.176 ops/s
Iteration  17: 573791.403 ops/s
Iteration  18: 571996.149 ops/s
Iteration  19: 591919.497 ops/s
Iteration  20: 598092.381 ops/s
Iteration  21: 588883.140 ops/s
Iteration  22: 591938.574 ops/s
Iteration  23: 590465.044 ops/s
Iteration  24: 591565.440 ops/s
Iteration  25: 595812.852 ops/s
Iteration  26: 598974.343 ops/s
Iteration  27: 597723.868 ops/s
Iteration  28: 597607.983 ops/s
Iteration  29: 595093.347 ops/s
Iteration  30: 592181.641 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollect":
  587508.816 ±(99.9%) 6691.156 ops/s [Average]
  (min, avg, max) = (563020.514, 587508.816, 598974.343), stdev = 10015.008
  CI (99.9%): [580817.660, 594199.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollect  thrpt   30  587508.816 ± 6691.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1426977.204 ops/s
# Warmup Iteration   2: 3651714.443 ops/s
# Warmup Iteration   3: 3597367.095 ops/s
# Warmup Iteration   4: 3310390.309 ops/s
# Warmup Iteration   5: 3764047.698 ops/s
# Warmup Iteration   6: 3729163.914 ops/s
# Warmup Iteration   7: 3645471.523 ops/s
# Warmup Iteration   8: 3663055.624 ops/s
# Warmup Iteration   9: 3718532.996 ops/s
# Warmup Iteration  10: 3789412.588 ops/s
# Warmup Iteration  11: 3680359.145 ops/s
# Warmup Iteration  12: 3713852.841 ops/s
# Warmup Iteration  13: 3783837.856 ops/s
# Warmup Iteration  14: 3721330.231 ops/s
# Warmup Iteration  15: 3743493.831 ops/s
# Warmup Iteration  16: 3834647.922 ops/s
# Warmup Iteration  17: 3815924.865 ops/s
# Warmup Iteration  18: 3709344.151 ops/s
# Warmup Iteration  19: 3796883.387 ops/s
# Warmup Iteration  20: 3675938.359 ops/s
# Warmup Iteration  21: 3591350.292 ops/s
# Warmup Iteration  22: 3727576.844 ops/s
# Warmup Iteration  23: 3831354.779 ops/s
# Warmup Iteration  24: 3848002.533 ops/s
# Warmup Iteration  25: 3765988.167 ops/s
# Warmup Iteration  26: 3820934.325 ops/s
# Warmup Iteration  27: 3784466.535 ops/s
# Warmup Iteration  28: 3743832.657 ops/s
# Warmup Iteration  29: 3717986.773 ops/s
# Warmup Iteration  30: 3637476.980 ops/s
Iteration   1: 3695668.136 ops/s
Iteration   2: 3718818.518 ops/s
Iteration   3: 3675457.322 ops/s
Iteration   4: 3695521.090 ops/s
Iteration   5: 3808403.563 ops/s
Iteration   6: 3798335.547 ops/s
Iteration   7: 3765785.226 ops/s
Iteration   8: 3749297.551 ops/s
Iteration   9: 3780051.794 ops/s
Iteration  10: 3753153.496 ops/s
Iteration  11: 3773574.263 ops/s
Iteration  12: 3747257.709 ops/s
Iteration  13: 3781749.145 ops/s
Iteration  14: 3750685.146 ops/s
Iteration  15: 3815752.063 ops/s
Iteration  16: 3718173.795 ops/s
Iteration  17: 3826793.280 ops/s
Iteration  18: 3784185.965 ops/s
Iteration  19: 3803073.470 ops/s
Iteration  20: 3821204.065 ops/s
Iteration  21: 3807778.773 ops/s
Iteration  22: 3739075.159 ops/s
Iteration  23: 3747686.743 ops/s
Iteration  24: 3755405.678 ops/s
Iteration  25: 3818385.370 ops/s
Iteration  26: 3838576.157 ops/s
Iteration  27: 3707809.310 ops/s
Iteration  28: 3703783.641 ops/s
Iteration  29: 3588435.394 ops/s
Iteration  30: 3602736.061 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectBoolean":
  3752420.448 ±(99.9%) 40916.054 ops/s [Average]
  (min, avg, max) = (3588435.394, 3752420.448, 3838576.157), stdev = 61241.228
  CI (99.9%): [3711504.394, 3793336.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3752420.448 ± 40916.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 585892.454 ops/s
# Warmup Iteration   2: 919042.638 ops/s
# Warmup Iteration   3: 1127724.675 ops/s
# Warmup Iteration   4: 1204319.298 ops/s
# Warmup Iteration   5: 1198079.632 ops/s
# Warmup Iteration   6: 1121538.839 ops/s
# Warmup Iteration   7: 1067978.755 ops/s
# Warmup Iteration   8: 1198481.194 ops/s
# Warmup Iteration   9: 1204657.324 ops/s
# Warmup Iteration  10: 1198339.883 ops/s
# Warmup Iteration  11: 1198377.205 ops/s
# Warmup Iteration  12: 1201401.794 ops/s
# Warmup Iteration  13: 1190469.001 ops/s
# Warmup Iteration  14: 1193776.127 ops/s
# Warmup Iteration  15: 1179173.356 ops/s
# Warmup Iteration  16: 1182019.969 ops/s
# Warmup Iteration  17: 1241813.367 ops/s
# Warmup Iteration  18: 1209264.627 ops/s
# Warmup Iteration  19: 1210523.902 ops/s
# Warmup Iteration  20: 1221116.971 ops/s
# Warmup Iteration  21: 1224300.225 ops/s
# Warmup Iteration  22: 1224991.102 ops/s
# Warmup Iteration  23: 1231044.093 ops/s
# Warmup Iteration  24: 1237703.352 ops/s
# Warmup Iteration  25: 1226278.183 ops/s
# Warmup Iteration  26: 1254084.730 ops/s
# Warmup Iteration  27: 1239970.108 ops/s
# Warmup Iteration  28: 1226481.655 ops/s
# Warmup Iteration  29: 1209298.095 ops/s
# Warmup Iteration  30: 1175457.488 ops/s
Iteration   1: 1197909.089 ops/s
Iteration   2: 1224399.790 ops/s
Iteration   3: 1232805.391 ops/s
Iteration   4: 1234461.387 ops/s
Iteration   5: 1239625.810 ops/s
Iteration   6: 1244284.151 ops/s
Iteration   7: 1237113.294 ops/s
Iteration   8: 1243319.720 ops/s
Iteration   9: 1233457.485 ops/s
Iteration  10: 1235661.035 ops/s
Iteration  11: 1194685.877 ops/s
Iteration  12: 1231828.237 ops/s
Iteration  13: 1222361.474 ops/s
Iteration  14: 1236751.304 ops/s
Iteration  15: 1193711.577 ops/s
Iteration  16: 1191956.728 ops/s
Iteration  17: 1230036.527 ops/s
Iteration  18: 1233143.530 ops/s
Iteration  19: 1173519.054 ops/s
Iteration  20: 1174553.634 ops/s
Iteration  21: 1168341.855 ops/s
Iteration  22: 1175547.254 ops/s
Iteration  23: 1187629.269 ops/s
Iteration  24: 1202674.426 ops/s
Iteration  25: 1239321.881 ops/s
Iteration  26: 1241646.685 ops/s
Iteration  27: 1225782.936 ops/s
Iteration  28: 1238465.610 ops/s
Iteration  29: 1232346.396 ops/s
Iteration  30: 1191359.588 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectByte":
  1216956.700 ±(99.9%) 16675.611 ops/s [Average]
  (min, avg, max) = (1168341.855, 1216956.700, 1244284.151), stdev = 24959.272
  CI (99.9%): [1200281.088, 1233632.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1216956.700 ± 16675.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785268.188 ops/s
# Warmup Iteration   2: 1945034.763 ops/s
# Warmup Iteration   3: 1969514.081 ops/s
# Warmup Iteration   4: 1654322.488 ops/s
# Warmup Iteration   5: 1961482.135 ops/s
# Warmup Iteration   6: 1954193.867 ops/s
# Warmup Iteration   7: 1902877.389 ops/s
# Warmup Iteration   8: 1954761.871 ops/s
# Warmup Iteration   9: 1984859.052 ops/s
# Warmup Iteration  10: 1916298.329 ops/s
# Warmup Iteration  11: 2009693.487 ops/s
# Warmup Iteration  12: 1974234.745 ops/s
# Warmup Iteration  13: 1974241.657 ops/s
# Warmup Iteration  14: 1966542.224 ops/s
# Warmup Iteration  15: 2030859.054 ops/s
# Warmup Iteration  16: 2037645.218 ops/s
# Warmup Iteration  17: 2002966.563 ops/s
# Warmup Iteration  18: 1984217.939 ops/s
# Warmup Iteration  19: 1944559.865 ops/s
# Warmup Iteration  20: 1938349.199 ops/s
# Warmup Iteration  21: 1997485.925 ops/s
# Warmup Iteration  22: 1940067.341 ops/s
# Warmup Iteration  23: 1941064.880 ops/s
# Warmup Iteration  24: 1974214.299 ops/s
# Warmup Iteration  25: 2007767.513 ops/s
# Warmup Iteration  26: 1990766.621 ops/s
# Warmup Iteration  27: 2020169.347 ops/s
# Warmup Iteration  28: 1964872.073 ops/s
# Warmup Iteration  29: 2004182.347 ops/s
# Warmup Iteration  30: 2010537.809 ops/s
Iteration   1: 2014901.591 ops/s
Iteration   2: 2001509.913 ops/s
Iteration   3: 1957266.419 ops/s
Iteration   4: 1949933.715 ops/s
Iteration   5: 1917750.408 ops/s
Iteration   6: 1961355.133 ops/s
Iteration   7: 1968438.246 ops/s
Iteration   8: 1941322.559 ops/s
Iteration   9: 1925051.056 ops/s
Iteration  10: 1868594.803 ops/s
Iteration  11: 1971448.006 ops/s
Iteration  12: 1919615.755 ops/s
Iteration  13: 2002057.915 ops/s
Iteration  14: 2002614.550 ops/s
Iteration  15: 1999287.450 ops/s
Iteration  16: 1956593.845 ops/s
Iteration  17: 1977170.832 ops/s
Iteration  18: 1956233.502 ops/s
Iteration  19: 1974110.128 ops/s
Iteration  20: 1953628.200 ops/s
Iteration  21: 1917616.351 ops/s
Iteration  22: 1904905.828 ops/s
Iteration  23: 2015683.930 ops/s
Iteration  24: 2038159.979 ops/s
Iteration  25: 1996702.563 ops/s
Iteration  26: 1918708.299 ops/s
Iteration  27: 1987665.814 ops/s
Iteration  28: 1984814.973 ops/s
Iteration  29: 2009830.856 ops/s
Iteration  30: 2008997.608 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectChar":
  1966732.341 ±(99.9%) 26631.852 ops/s [Average]
  (min, avg, max) = (1868594.803, 1966732.341, 2038159.979), stdev = 39861.305
  CI (99.9%): [1940100.489, 1993364.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1966732.341 ± 26631.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376779.675 ops/s
# Warmup Iteration   2: 858542.771 ops/s
# Warmup Iteration   3: 882934.309 ops/s
# Warmup Iteration   4: 795972.402 ops/s
# Warmup Iteration   5: 822951.012 ops/s
# Warmup Iteration   6: 871764.378 ops/s
# Warmup Iteration   7: 876281.325 ops/s
# Warmup Iteration   8: 892568.716 ops/s
# Warmup Iteration   9: 889603.655 ops/s
# Warmup Iteration  10: 857493.023 ops/s
# Warmup Iteration  11: 887569.930 ops/s
# Warmup Iteration  12: 883040.790 ops/s
# Warmup Iteration  13: 887970.729 ops/s
# Warmup Iteration  14: 888743.794 ops/s
# Warmup Iteration  15: 878839.236 ops/s
# Warmup Iteration  16: 878971.664 ops/s
# Warmup Iteration  17: 907775.957 ops/s
# Warmup Iteration  18: 892408.018 ops/s
# Warmup Iteration  19: 894922.441 ops/s
# Warmup Iteration  20: 880340.598 ops/s
# Warmup Iteration  21: 875662.838 ops/s
# Warmup Iteration  22: 867645.510 ops/s
# Warmup Iteration  23: 897601.507 ops/s
# Warmup Iteration  24: 895165.613 ops/s
# Warmup Iteration  25: 864928.873 ops/s
# Warmup Iteration  26: 867729.807 ops/s
# Warmup Iteration  27: 894453.700 ops/s
# Warmup Iteration  28: 906635.107 ops/s
# Warmup Iteration  29: 883887.422 ops/s
# Warmup Iteration  30: 888735.940 ops/s
Iteration   1: 880419.120 ops/s
Iteration   2: 872665.319 ops/s
Iteration   3: 888272.930 ops/s
Iteration   4: 902669.847 ops/s
Iteration   5: 862054.788 ops/s
Iteration   6: 866470.601 ops/s
Iteration   7: 895756.201 ops/s
Iteration   8: 856794.681 ops/s
Iteration   9: 875329.451 ops/s
Iteration  10: 889999.456 ops/s
Iteration  11: 891234.636 ops/s
Iteration  12: 897671.099 ops/s
Iteration  13: 892376.659 ops/s
Iteration  14: 903687.320 ops/s
Iteration  15: 892705.919 ops/s
Iteration  16: 859389.251 ops/s
Iteration  17: 891860.025 ops/s
Iteration  18: 842712.160 ops/s
Iteration  19: 868409.097 ops/s
Iteration  20: 903120.586 ops/s
Iteration  21: 893014.430 ops/s
Iteration  22: 903728.679 ops/s
Iteration  23: 905793.815 ops/s
Iteration  24: 894025.304 ops/s
Iteration  25: 912482.106 ops/s
Iteration  26: 907796.514 ops/s
Iteration  27: 900132.132 ops/s
Iteration  28: 892433.150 ops/s
Iteration  29: 899223.798 ops/s
Iteration  30: 904796.242 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectDouble":
  888234.177 ±(99.9%) 11718.338 ops/s [Average]
  (min, avg, max) = (842712.160, 888234.177, 912482.106), stdev = 17539.458
  CI (99.9%): [876515.839, 899952.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  888234.177 ± 11718.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 556793.339 ops/s
# Warmup Iteration   2: 1290891.697 ops/s
# Warmup Iteration   3: 1377803.125 ops/s
# Warmup Iteration   4: 1303304.744 ops/s
# Warmup Iteration   5: 1215636.825 ops/s
# Warmup Iteration   6: 1347591.362 ops/s
# Warmup Iteration   7: 1378347.987 ops/s
# Warmup Iteration   8: 1392027.884 ops/s
# Warmup Iteration   9: 1381729.730 ops/s
# Warmup Iteration  10: 1398816.227 ops/s
# Warmup Iteration  11: 1407088.484 ops/s
# Warmup Iteration  12: 1375630.202 ops/s
# Warmup Iteration  13: 1403539.085 ops/s
# Warmup Iteration  14: 1414964.555 ops/s
# Warmup Iteration  15: 1402275.458 ops/s
# Warmup Iteration  16: 1385153.427 ops/s
# Warmup Iteration  17: 1349955.071 ops/s
# Warmup Iteration  18: 1390651.292 ops/s
# Warmup Iteration  19: 1391332.540 ops/s
# Warmup Iteration  20: 1388790.910 ops/s
# Warmup Iteration  21: 1403818.092 ops/s
# Warmup Iteration  22: 1396489.218 ops/s
# Warmup Iteration  23: 1374934.637 ops/s
# Warmup Iteration  24: 1361191.070 ops/s
# Warmup Iteration  25: 1377326.142 ops/s
# Warmup Iteration  26: 1386209.283 ops/s
# Warmup Iteration  27: 1364446.896 ops/s
# Warmup Iteration  28: 1390387.011 ops/s
# Warmup Iteration  29: 1362745.067 ops/s
# Warmup Iteration  30: 1392157.065 ops/s
Iteration   1: 1386918.927 ops/s
Iteration   2: 1385338.868 ops/s
Iteration   3: 1382819.195 ops/s
Iteration   4: 1389376.710 ops/s
Iteration   5: 1387514.928 ops/s
Iteration   6: 1391419.859 ops/s
Iteration   7: 1366746.263 ops/s
Iteration   8: 1375432.050 ops/s
Iteration   9: 1371813.771 ops/s
Iteration  10: 1339250.535 ops/s
Iteration  11: 1392942.421 ops/s
Iteration  12: 1351379.134 ops/s
Iteration  13: 1351489.345 ops/s
Iteration  14: 1385147.674 ops/s
Iteration  15: 1383682.081 ops/s
Iteration  16: 1378441.394 ops/s
Iteration  17: 1366482.365 ops/s
Iteration  18: 1365700.902 ops/s
Iteration  19: 1397973.894 ops/s
Iteration  20: 1381209.021 ops/s
Iteration  21: 1393346.961 ops/s
Iteration  22: 1398532.509 ops/s
Iteration  23: 1385112.683 ops/s
Iteration  24: 1386010.223 ops/s
Iteration  25: 1342045.556 ops/s
Iteration  26: 1336133.810 ops/s
Iteration  27: 1409886.613 ops/s
Iteration  28: 1398052.252 ops/s
Iteration  29: 1407029.388 ops/s
Iteration  30: 1335952.077 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectFloat":
  1377439.380 ±(99.9%) 13859.143 ops/s [Average]
  (min, avg, max) = (1335952.077, 1377439.380, 1409886.613), stdev = 20743.714
  CI (99.9%): [1363580.238, 1391298.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1377439.380 ± 13859.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709126.071 ops/s
# Warmup Iteration   2: 1951920.702 ops/s
# Warmup Iteration   3: 1926957.673 ops/s
# Warmup Iteration   4: 1621074.634 ops/s
# Warmup Iteration   5: 1917198.789 ops/s
# Warmup Iteration   6: 1885505.922 ops/s
# Warmup Iteration   7: 1915400.662 ops/s
# Warmup Iteration   8: 1883157.648 ops/s
# Warmup Iteration   9: 1912073.541 ops/s
# Warmup Iteration  10: 1877150.942 ops/s
# Warmup Iteration  11: 1954933.295 ops/s
# Warmup Iteration  12: 1932304.165 ops/s
# Warmup Iteration  13: 1908256.136 ops/s
# Warmup Iteration  14: 1904439.517 ops/s
# Warmup Iteration  15: 1957027.743 ops/s
# Warmup Iteration  16: 1955506.079 ops/s
# Warmup Iteration  17: 1925461.518 ops/s
# Warmup Iteration  18: 1918482.674 ops/s
# Warmup Iteration  19: 1915634.846 ops/s
# Warmup Iteration  20: 1917686.686 ops/s
# Warmup Iteration  21: 1934457.863 ops/s
# Warmup Iteration  22: 1945343.577 ops/s
# Warmup Iteration  23: 1935376.068 ops/s
# Warmup Iteration  24: 1914838.373 ops/s
# Warmup Iteration  25: 1931693.269 ops/s
# Warmup Iteration  26: 1936461.219 ops/s
# Warmup Iteration  27: 1943515.790 ops/s
# Warmup Iteration  28: 1932623.793 ops/s
# Warmup Iteration  29: 1957546.532 ops/s
# Warmup Iteration  30: 1946684.581 ops/s
Iteration   1: 1914922.850 ops/s
Iteration   2: 1955093.889 ops/s
Iteration   3: 1948619.047 ops/s
Iteration   4: 1949773.529 ops/s
Iteration   5: 1885890.690 ops/s
Iteration   6: 1898319.428 ops/s
Iteration   7: 1923452.191 ops/s
Iteration   8: 1905877.001 ops/s
Iteration   9: 1933498.153 ops/s
Iteration  10: 1893703.011 ops/s
Iteration  11: 1883381.874 ops/s
Iteration  12: 1904584.435 ops/s
Iteration  13: 1883507.806 ops/s
Iteration  14: 1954358.181 ops/s
Iteration  15: 1932922.274 ops/s
Iteration  16: 1892646.363 ops/s
Iteration  17: 1900108.294 ops/s
Iteration  18: 1901557.439 ops/s
Iteration  19: 1923722.177 ops/s
Iteration  20: 1932908.416 ops/s
Iteration  21: 1944150.125 ops/s
Iteration  22: 1943487.314 ops/s
Iteration  23: 1911840.280 ops/s
Iteration  24: 1945875.369 ops/s
Iteration  25: 1918395.350 ops/s
Iteration  26: 1911200.381 ops/s
Iteration  27: 1924376.575 ops/s
Iteration  28: 1947169.242 ops/s
Iteration  29: 1932751.764 ops/s
Iteration  30: 1932590.964 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectInt":
  1921022.814 ±(99.9%) 14991.781 ops/s [Average]
  (min, avg, max) = (1883381.874, 1921022.814, 1955093.889), stdev = 22438.993
  CI (99.9%): [1906031.033, 1936014.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1921022.814 ± 14991.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625192.767 ops/s
# Warmup Iteration   2: 1746487.550 ops/s
# Warmup Iteration   3: 1637840.620 ops/s
# Warmup Iteration   4: 1637052.072 ops/s
# Warmup Iteration   5: 1789041.593 ops/s
# Warmup Iteration   6: 1790233.815 ops/s
# Warmup Iteration   7: 1838750.512 ops/s
# Warmup Iteration   8: 1789751.862 ops/s
# Warmup Iteration   9: 1760655.255 ops/s
# Warmup Iteration  10: 1835129.065 ops/s
# Warmup Iteration  11: 1789420.849 ops/s
# Warmup Iteration  12: 1742953.894 ops/s
# Warmup Iteration  13: 1864960.948 ops/s
# Warmup Iteration  14: 1841765.359 ops/s
# Warmup Iteration  15: 1860688.695 ops/s
# Warmup Iteration  16: 1858019.951 ops/s
# Warmup Iteration  17: 1824508.206 ops/s
# Warmup Iteration  18: 1832761.840 ops/s
# Warmup Iteration  19: 1828356.693 ops/s
# Warmup Iteration  20: 1819706.938 ops/s
# Warmup Iteration  21: 1844330.405 ops/s
# Warmup Iteration  22: 1832013.298 ops/s
# Warmup Iteration  23: 1823890.624 ops/s
# Warmup Iteration  24: 1810753.842 ops/s
# Warmup Iteration  25: 1831601.205 ops/s
# Warmup Iteration  26: 1814163.986 ops/s
# Warmup Iteration  27: 1792551.271 ops/s
# Warmup Iteration  28: 1762444.775 ops/s
# Warmup Iteration  29: 1793394.622 ops/s
# Warmup Iteration  30: 1843161.603 ops/s
Iteration   1: 1843201.724 ops/s
Iteration   2: 1824762.609 ops/s
Iteration   3: 1755275.675 ops/s
Iteration   4: 1835329.226 ops/s
Iteration   5: 1790855.050 ops/s
Iteration   6: 1790743.788 ops/s
Iteration   7: 1808451.661 ops/s
Iteration   8: 1742752.726 ops/s
Iteration   9: 1803159.836 ops/s
Iteration  10: 1843337.276 ops/s
Iteration  11: 1809464.218 ops/s
Iteration  12: 1839690.452 ops/s
Iteration  13: 1855545.651 ops/s
Iteration  14: 1810425.695 ops/s
Iteration  15: 1854069.867 ops/s
Iteration  16: 1839006.932 ops/s
Iteration  17: 1831702.891 ops/s
Iteration  18: 1838579.122 ops/s
Iteration  19: 1835022.293 ops/s
Iteration  20: 1830040.226 ops/s
Iteration  21: 1791518.802 ops/s
Iteration  22: 1815892.647 ops/s
Iteration  23: 1847971.632 ops/s
Iteration  24: 1854411.085 ops/s
Iteration  25: 1831502.245 ops/s
Iteration  26: 1844014.197 ops/s
Iteration  27: 1829074.565 ops/s
Iteration  28: 1816218.569 ops/s
Iteration  29: 1754451.109 ops/s
Iteration  30: 1805142.776 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectLong":
  1819053.818 ±(99.9%) 19964.351 ops/s [Average]
  (min, avg, max) = (1742752.726, 1819053.818, 1855545.651), stdev = 29881.703
  CI (99.9%): [1799089.467, 1839018.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1819053.818 ± 19964.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 769328.181 ops/s
# Warmup Iteration   2: 2124981.158 ops/s
# Warmup Iteration   3: 2060463.067 ops/s
# Warmup Iteration   4: 1779195.061 ops/s
# Warmup Iteration   5: 2103001.504 ops/s
# Warmup Iteration   6: 2168342.518 ops/s
# Warmup Iteration   7: 2120623.373 ops/s
# Warmup Iteration   8: 2160903.945 ops/s
# Warmup Iteration   9: 2155480.987 ops/s
# Warmup Iteration  10: 2166135.473 ops/s
# Warmup Iteration  11: 2161922.153 ops/s
# Warmup Iteration  12: 2163042.246 ops/s
# Warmup Iteration  13: 2163180.334 ops/s
# Warmup Iteration  14: 2149927.421 ops/s
# Warmup Iteration  15: 2135091.248 ops/s
# Warmup Iteration  16: 2109003.459 ops/s
# Warmup Iteration  17: 2121289.495 ops/s
# Warmup Iteration  18: 2148383.631 ops/s
# Warmup Iteration  19: 2101282.224 ops/s
# Warmup Iteration  20: 2069671.955 ops/s
# Warmup Iteration  21: 2151431.544 ops/s
# Warmup Iteration  22: 2110884.353 ops/s
# Warmup Iteration  23: 2152212.953 ops/s
# Warmup Iteration  24: 2134627.656 ops/s
# Warmup Iteration  25: 2131079.932 ops/s
# Warmup Iteration  26: 2115836.308 ops/s
# Warmup Iteration  27: 2109174.933 ops/s
# Warmup Iteration  28: 2104483.801 ops/s
# Warmup Iteration  29: 2177396.504 ops/s
# Warmup Iteration  30: 2086067.517 ops/s
Iteration   1: 2179885.807 ops/s
Iteration   2: 2198027.851 ops/s
Iteration   3: 2150860.029 ops/s
Iteration   4: 2146220.711 ops/s
Iteration   5: 2162829.378 ops/s
Iteration   6: 2177435.737 ops/s
Iteration   7: 2159018.729 ops/s
Iteration   8: 2148582.924 ops/s
Iteration   9: 2157865.759 ops/s
Iteration  10: 2187106.098 ops/s
Iteration  11: 2167174.817 ops/s
Iteration  12: 2180674.394 ops/s
Iteration  13: 2139988.339 ops/s
Iteration  14: 2137314.040 ops/s
Iteration  15: 2157479.463 ops/s
Iteration  16: 2160593.515 ops/s
Iteration  17: 2138617.401 ops/s
Iteration  18: 2096529.683 ops/s
Iteration  19: 2127310.742 ops/s
Iteration  20: 2100812.602 ops/s
Iteration  21: 2054301.930 ops/s
Iteration  22: 2049098.059 ops/s
Iteration  23: 2133107.254 ops/s
Iteration  24: 2165318.794 ops/s
Iteration  25: 2138611.823 ops/s
Iteration  26: 2093865.821 ops/s
Iteration  27: 2102953.925 ops/s
Iteration  28: 2115649.315 ops/s
Iteration  29: 2138056.452 ops/s
Iteration  30: 2164550.652 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectShort":
  2140994.735 ±(99.9%) 24088.269 ops/s [Average]
  (min, avg, max) = (2049098.059, 2140994.735, 2198027.851), stdev = 36054.189
  CI (99.9%): [2116906.466, 2165083.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2140994.735 ± 24088.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163695.178 ops/s
# Warmup Iteration   2: 327283.060 ops/s
# Warmup Iteration   3: 376554.753 ops/s
# Warmup Iteration   4: 377345.845 ops/s
# Warmup Iteration   5: 321713.254 ops/s
# Warmup Iteration   6: 370647.609 ops/s
# Warmup Iteration   7: 365107.131 ops/s
# Warmup Iteration   8: 369800.547 ops/s
# Warmup Iteration   9: 371238.002 ops/s
# Warmup Iteration  10: 365249.894 ops/s
# Warmup Iteration  11: 381813.122 ops/s
# Warmup Iteration  12: 384652.973 ops/s
# Warmup Iteration  13: 378573.670 ops/s
# Warmup Iteration  14: 378702.990 ops/s
# Warmup Iteration  15: 376900.852 ops/s
# Warmup Iteration  16: 380665.336 ops/s
# Warmup Iteration  17: 381617.112 ops/s
# Warmup Iteration  18: 362007.257 ops/s
# Warmup Iteration  19: 363855.010 ops/s
# Warmup Iteration  20: 355858.119 ops/s
# Warmup Iteration  21: 374711.682 ops/s
# Warmup Iteration  22: 376693.270 ops/s
# Warmup Iteration  23: 362278.269 ops/s
# Warmup Iteration  24: 366266.867 ops/s
# Warmup Iteration  25: 369237.420 ops/s
# Warmup Iteration  26: 368568.558 ops/s
# Warmup Iteration  27: 374456.132 ops/s
# Warmup Iteration  28: 373299.145 ops/s
# Warmup Iteration  29: 382084.255 ops/s
# Warmup Iteration  30: 378731.244 ops/s
Iteration   1: 378759.812 ops/s
Iteration   2: 368459.447 ops/s
Iteration   3: 361344.589 ops/s
Iteration   4: 376461.586 ops/s
Iteration   5: 379398.983 ops/s
Iteration   6: 382645.918 ops/s
Iteration   7: 380957.813 ops/s
Iteration   8: 377241.882 ops/s
Iteration   9: 375981.678 ops/s
Iteration  10: 379640.288 ops/s
Iteration  11: 384339.221 ops/s
Iteration  12: 378768.664 ops/s
Iteration  13: 379438.505 ops/s
Iteration  14: 374144.150 ops/s
Iteration  15: 377599.358 ops/s
Iteration  16: 381523.858 ops/s
Iteration  17: 385777.580 ops/s
Iteration  18: 380400.668 ops/s
Iteration  19: 377118.509 ops/s
Iteration  20: 379450.023 ops/s
Iteration  21: 376438.468 ops/s
Iteration  22: 369706.381 ops/s
Iteration  23: 372316.673 ops/s
Iteration  24: 366563.529 ops/s
Iteration  25: 375187.674 ops/s
Iteration  26: 379333.424 ops/s
Iteration  27: 379823.935 ops/s
Iteration  28: 371777.234 ops/s
Iteration  29: 377093.336 ops/s
Iteration  30: 379306.045 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_flatCollectWith":
  376899.974 ±(99.9%) 3515.021 ops/s [Average]
  (min, avg, max) = (361344.589, 376899.974, 385777.580), stdev = 5261.119
  CI (99.9%): [373384.953, 380414.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  376899.974 ± 3515.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758272.112 ops/s
# Warmup Iteration   2: 1435678.390 ops/s
# Warmup Iteration   3: 1529262.282 ops/s
# Warmup Iteration   4: 1530193.094 ops/s
# Warmup Iteration   5: 1427882.695 ops/s
# Warmup Iteration   6: 1425436.302 ops/s
# Warmup Iteration   7: 1559001.307 ops/s
# Warmup Iteration   8: 1564902.167 ops/s
# Warmup Iteration   9: 1578545.508 ops/s
# Warmup Iteration  10: 1472100.191 ops/s
# Warmup Iteration  11: 1545902.502 ops/s
# Warmup Iteration  12: 1530060.202 ops/s
# Warmup Iteration  13: 1570152.405 ops/s
# Warmup Iteration  14: 1513032.630 ops/s
# Warmup Iteration  15: 1525225.615 ops/s
# Warmup Iteration  16: 1494625.457 ops/s
# Warmup Iteration  17: 1585230.064 ops/s
# Warmup Iteration  18: 1585012.802 ops/s
# Warmup Iteration  19: 1568522.889 ops/s
# Warmup Iteration  20: 1567503.358 ops/s
# Warmup Iteration  21: 1558996.146 ops/s
# Warmup Iteration  22: 1588140.522 ops/s
# Warmup Iteration  23: 1598613.021 ops/s
# Warmup Iteration  24: 1573261.139 ops/s
# Warmup Iteration  25: 1533225.918 ops/s
# Warmup Iteration  26: 1548177.112 ops/s
# Warmup Iteration  27: 1525109.972 ops/s
# Warmup Iteration  28: 1518731.239 ops/s
# Warmup Iteration  29: 1499642.504 ops/s
# Warmup Iteration  30: 1578229.576 ops/s
Iteration   1: 1482987.752 ops/s
Iteration   2: 1577620.085 ops/s
Iteration   3: 1588393.252 ops/s
Iteration   4: 1547514.225 ops/s
Iteration   5: 1612992.646 ops/s
Iteration   6: 1605938.273 ops/s
Iteration   7: 1587220.316 ops/s
Iteration   8: 1594386.776 ops/s
Iteration   9: 1574704.507 ops/s
Iteration  10: 1582542.431 ops/s
Iteration  11: 1562487.893 ops/s
Iteration  12: 1585636.085 ops/s
Iteration  13: 1567169.026 ops/s
Iteration  14: 1569974.380 ops/s
Iteration  15: 1516135.452 ops/s
Iteration  16: 1517448.676 ops/s
Iteration  17: 1511461.812 ops/s
Iteration  18: 1585109.844 ops/s
Iteration  19: 1569569.362 ops/s
Iteration  20: 1577462.761 ops/s
Iteration  21: 1589790.811 ops/s
Iteration  22: 1567515.700 ops/s
Iteration  23: 1577517.665 ops/s
Iteration  24: 1566489.981 ops/s
Iteration  25: 1582578.923 ops/s
Iteration  26: 1561480.758 ops/s
Iteration  27: 1569547.508 ops/s
Iteration  28: 1586297.513 ops/s
Iteration  29: 1582210.445 ops/s
Iteration  30: 1573185.042 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEach":
  1569112.330 ±(99.9%) 19004.916 ops/s [Average]
  (min, avg, max) = (1482987.752, 1569112.330, 1612992.646), stdev = 28445.665
  CI (99.9%): [1550107.414, 1588117.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_forEach  thrpt   30  1569112.330 ± 19004.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1193755.467 ops/s
# Warmup Iteration   2: 3101554.349 ops/s
# Warmup Iteration   3: 3115010.713 ops/s
# Warmup Iteration   4: 2472669.335 ops/s
# Warmup Iteration   5: 3059889.309 ops/s
# Warmup Iteration   6: 2950222.777 ops/s
# Warmup Iteration   7: 3011751.301 ops/s
# Warmup Iteration   8: 3072381.880 ops/s
# Warmup Iteration   9: 3133041.398 ops/s
# Warmup Iteration  10: 3135388.874 ops/s
# Warmup Iteration  11: 3159114.825 ops/s
# Warmup Iteration  12: 3098539.515 ops/s
# Warmup Iteration  13: 3121342.723 ops/s
# Warmup Iteration  14: 3132772.059 ops/s
# Warmup Iteration  15: 3171750.998 ops/s
# Warmup Iteration  16: 3113422.475 ops/s
# Warmup Iteration  17: 3155987.351 ops/s
# Warmup Iteration  18: 3171270.999 ops/s
# Warmup Iteration  19: 3141299.611 ops/s
# Warmup Iteration  20: 3079507.057 ops/s
# Warmup Iteration  21: 3101287.113 ops/s
# Warmup Iteration  22: 3065168.097 ops/s
# Warmup Iteration  23: 3146689.898 ops/s
# Warmup Iteration  24: 3147680.043 ops/s
# Warmup Iteration  25: 3122816.330 ops/s
# Warmup Iteration  26: 3136370.534 ops/s
# Warmup Iteration  27: 3150059.110 ops/s
# Warmup Iteration  28: 3171985.325 ops/s
# Warmup Iteration  29: 3167760.152 ops/s
# Warmup Iteration  30: 3139943.588 ops/s
Iteration   1: 3072626.538 ops/s
Iteration   2: 3119917.595 ops/s
Iteration   3: 3129858.342 ops/s
Iteration   4: 3177285.325 ops/s
Iteration   5: 3139418.749 ops/s
Iteration   6: 3140219.957 ops/s
Iteration   7: 3135216.501 ops/s
Iteration   8: 3122105.568 ops/s
Iteration   9: 3157141.180 ops/s
Iteration  10: 3136441.703 ops/s
Iteration  11: 3135668.695 ops/s
Iteration  12: 3067990.777 ops/s
Iteration  13: 3141064.400 ops/s
Iteration  14: 3108686.946 ops/s
Iteration  15: 3075802.697 ops/s
Iteration  16: 2973099.767 ops/s
Iteration  17: 3026989.886 ops/s
Iteration  18: 3057290.200 ops/s
Iteration  19: 3112372.395 ops/s
Iteration  20: 3149979.780 ops/s
Iteration  21: 3139479.793 ops/s
Iteration  22: 3112414.187 ops/s
Iteration  23: 3109869.391 ops/s
Iteration  24: 3096827.881 ops/s
Iteration  25: 3110689.215 ops/s
Iteration  26: 3075021.612 ops/s
Iteration  27: 3162792.972 ops/s
Iteration  28: 3164137.699 ops/s
Iteration  29: 3182170.893 ops/s
Iteration  30: 3131824.474 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWith":
  3115480.171 ±(99.9%) 30198.723 ops/s [Average]
  (min, avg, max) = (2973099.767, 3115480.171, 3182170.893), stdev = 45200.030
  CI (99.9%): [3085281.447, 3145678.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_forEachWith  thrpt   30  3115480.171 ± 30198.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 444424.407 ops/s
# Warmup Iteration   2: 805998.361 ops/s
# Warmup Iteration   3: 922086.718 ops/s
# Warmup Iteration   4: 931021.994 ops/s
# Warmup Iteration   5: 916364.194 ops/s
# Warmup Iteration   6: 758647.264 ops/s
# Warmup Iteration   7: 924688.757 ops/s
# Warmup Iteration   8: 925545.911 ops/s
# Warmup Iteration   9: 917069.679 ops/s
# Warmup Iteration  10: 932249.802 ops/s
# Warmup Iteration  11: 919383.363 ops/s
# Warmup Iteration  12: 926858.822 ops/s
# Warmup Iteration  13: 927653.458 ops/s
# Warmup Iteration  14: 919662.184 ops/s
# Warmup Iteration  15: 928284.954 ops/s
# Warmup Iteration  16: 928652.338 ops/s
# Warmup Iteration  17: 895374.847 ops/s
# Warmup Iteration  18: 921780.456 ops/s
# Warmup Iteration  19: 923322.227 ops/s
# Warmup Iteration  20: 901085.573 ops/s
# Warmup Iteration  21: 912409.348 ops/s
# Warmup Iteration  22: 925812.798 ops/s
# Warmup Iteration  23: 913027.406 ops/s
# Warmup Iteration  24: 923131.433 ops/s
# Warmup Iteration  25: 931369.433 ops/s
# Warmup Iteration  26: 918877.095 ops/s
# Warmup Iteration  27: 919286.235 ops/s
# Warmup Iteration  28: 915686.532 ops/s
# Warmup Iteration  29: 897376.710 ops/s
# Warmup Iteration  30: 914218.718 ops/s
Iteration   1: 919880.795 ops/s
Iteration   2: 923437.142 ops/s
Iteration   3: 932082.285 ops/s
Iteration   4: 921788.613 ops/s
Iteration   5: 930054.728 ops/s
Iteration   6: 914704.461 ops/s
Iteration   7: 925081.064 ops/s
Iteration   8: 933701.583 ops/s
Iteration   9: 937776.327 ops/s
Iteration  10: 938092.269 ops/s
Iteration  11: 920282.500 ops/s
Iteration  12: 919895.903 ops/s
Iteration  13: 931487.269 ops/s
Iteration  14: 929324.298 ops/s
Iteration  15: 928264.908 ops/s
Iteration  16: 920256.295 ops/s
Iteration  17: 912655.749 ops/s
Iteration  18: 925085.574 ops/s
Iteration  19: 931482.914 ops/s
Iteration  20: 929187.533 ops/s
Iteration  21: 914924.648 ops/s
Iteration  22: 910661.203 ops/s
Iteration  23: 908448.177 ops/s
Iteration  24: 921532.024 ops/s
Iteration  25: 913124.908 ops/s
Iteration  26: 921878.394 ops/s
Iteration  27: 926744.212 ops/s
Iteration  28: 902735.026 ops/s
Iteration  29: 914105.647 ops/s
Iteration  30: 916839.944 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithIndex":
  922517.213 ±(99.9%) 5856.393 ops/s [Average]
  (min, avg, max) = (902735.026, 922517.213, 938092.269), stdev = 8765.574
  CI (99.9%): [916660.820, 928373.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  922517.213 ± 5856.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1840472.800 ops/s
# Warmup Iteration   2: 3901638.968 ops/s
# Warmup Iteration   3: 4062799.033 ops/s
# Warmup Iteration   4: 4090749.844 ops/s
# Warmup Iteration   5: 3157006.105 ops/s
# Warmup Iteration   6: 3961446.673 ops/s
# Warmup Iteration   7: 4132255.537 ops/s
# Warmup Iteration   8: 4125437.567 ops/s
# Warmup Iteration   9: 4075294.417 ops/s
# Warmup Iteration  10: 4211754.529 ops/s
# Warmup Iteration  11: 4133190.153 ops/s
# Warmup Iteration  12: 3982198.049 ops/s
# Warmup Iteration  13: 4104561.091 ops/s
# Warmup Iteration  14: 4139869.962 ops/s
# Warmup Iteration  15: 4149929.126 ops/s
# Warmup Iteration  16: 4121956.466 ops/s
# Warmup Iteration  17: 4184678.960 ops/s
# Warmup Iteration  18: 3985293.539 ops/s
# Warmup Iteration  19: 4141973.636 ops/s
# Warmup Iteration  20: 4163952.174 ops/s
# Warmup Iteration  21: 4158136.542 ops/s
# Warmup Iteration  22: 4035197.356 ops/s
# Warmup Iteration  23: 4055980.737 ops/s
# Warmup Iteration  24: 4131431.995 ops/s
# Warmup Iteration  25: 4129536.588 ops/s
# Warmup Iteration  26: 4144301.892 ops/s
# Warmup Iteration  27: 4155720.919 ops/s
# Warmup Iteration  28: 4144233.581 ops/s
# Warmup Iteration  29: 4139973.047 ops/s
# Warmup Iteration  30: 4139585.487 ops/s
Iteration   1: 3932518.690 ops/s
Iteration   2: 3992644.979 ops/s
Iteration   3: 4081888.452 ops/s
Iteration   4: 4039991.920 ops/s
Iteration   5: 3975194.320 ops/s
Iteration   6: 4011277.465 ops/s
Iteration   7: 3981882.034 ops/s
Iteration   8: 4018783.839 ops/s
Iteration   9: 3960061.741 ops/s
Iteration  10: 4031904.267 ops/s
Iteration  11: 3996286.309 ops/s
Iteration  12: 4074465.600 ops/s
Iteration  13: 4104838.536 ops/s
Iteration  14: 4054103.440 ops/s
Iteration  15: 4148644.458 ops/s
Iteration  16: 4215188.617 ops/s
Iteration  17: 4125758.453 ops/s
Iteration  18: 4132492.376 ops/s
Iteration  19: 4176669.328 ops/s
Iteration  20: 4143552.601 ops/s
Iteration  21: 4182934.290 ops/s
Iteration  22: 4112718.763 ops/s
Iteration  23: 4141488.949 ops/s
Iteration  24: 4155833.342 ops/s
Iteration  25: 4056770.914 ops/s
Iteration  26: 4113125.471 ops/s
Iteration  27: 4016112.577 ops/s
Iteration  28: 3924428.995 ops/s
Iteration  29: 4169434.649 ops/s
Iteration  30: 4000050.527 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_forEachWithOccurrences":
  4069034.863 ±(99.9%) 53824.255 ops/s [Average]
  (min, avg, max) = (3924428.995, 4069034.863, 4215188.617), stdev = 80561.617
  CI (99.9%): [4015210.608, 4122859.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  4069034.863 ± 53824.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 798159.864 ops/s
# Warmup Iteration   2: 1855643.428 ops/s
# Warmup Iteration   3: 1938908.879 ops/s
# Warmup Iteration   4: 1672172.718 ops/s
# Warmup Iteration   5: 1891999.482 ops/s
# Warmup Iteration   6: 1947838.202 ops/s
# Warmup Iteration   7: 1945690.997 ops/s
# Warmup Iteration   8: 1936563.426 ops/s
# Warmup Iteration   9: 1932354.295 ops/s
# Warmup Iteration  10: 1957890.588 ops/s
# Warmup Iteration  11: 1951683.336 ops/s
# Warmup Iteration  12: 1855321.325 ops/s
# Warmup Iteration  13: 1918075.757 ops/s
# Warmup Iteration  14: 1954071.856 ops/s
# Warmup Iteration  15: 1855880.725 ops/s
# Warmup Iteration  16: 1864999.387 ops/s
# Warmup Iteration  17: 1908415.442 ops/s
# Warmup Iteration  18: 1940983.431 ops/s
# Warmup Iteration  19: 1830363.897 ops/s
# Warmup Iteration  20: 1865682.637 ops/s
# Warmup Iteration  21: 1873723.680 ops/s
# Warmup Iteration  22: 1912279.982 ops/s
# Warmup Iteration  23: 1934383.955 ops/s
# Warmup Iteration  24: 1893368.593 ops/s
# Warmup Iteration  25: 1932812.948 ops/s
# Warmup Iteration  26: 1916106.964 ops/s
# Warmup Iteration  27: 1913673.538 ops/s
# Warmup Iteration  28: 1913581.759 ops/s
# Warmup Iteration  29: 1941250.085 ops/s
# Warmup Iteration  30: 1925820.236 ops/s
Iteration   1: 1951940.238 ops/s
Iteration   2: 1923101.772 ops/s
Iteration   3: 1845824.590 ops/s
Iteration   4: 1848351.684 ops/s
Iteration   5: 1875757.411 ops/s
Iteration   6: 1850550.894 ops/s
Iteration   7: 1847280.737 ops/s
Iteration   8: 1920908.184 ops/s
Iteration   9: 1929941.585 ops/s
Iteration  10: 1910508.132 ops/s
Iteration  11: 1862214.035 ops/s
Iteration  12: 1953517.238 ops/s
Iteration  13: 1978596.462 ops/s
Iteration  14: 1963541.160 ops/s
Iteration  15: 1935075.709 ops/s
Iteration  16: 1943847.724 ops/s
Iteration  17: 1944842.757 ops/s
Iteration  18: 1926650.928 ops/s
Iteration  19: 1935925.920 ops/s
Iteration  20: 1949905.423 ops/s
Iteration  21: 1937337.266 ops/s
Iteration  22: 1919459.660 ops/s
Iteration  23: 1882372.222 ops/s
Iteration  24: 1861939.631 ops/s
Iteration  25: 1959815.532 ops/s
Iteration  26: 1910709.202 ops/s
Iteration  27: 1904590.232 ops/s
Iteration  28: 1951833.645 ops/s
Iteration  29: 1871086.046 ops/s
Iteration  30: 1894841.911 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_fusedCollectMakeString":
  1913075.598 ±(99.9%) 26585.438 ops/s [Average]
  (min, avg, max) = (1845824.590, 1913075.598, 1978596.462), stdev = 39791.835
  CI (99.9%): [1886490.160, 1939661.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  1913075.598 ± 26585.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1019065.268 ops/s
# Warmup Iteration   2: 2133290.427 ops/s
# Warmup Iteration   3: 2203020.765 ops/s
# Warmup Iteration   4: 2215034.255 ops/s
# Warmup Iteration   5: 1824599.344 ops/s
# Warmup Iteration   6: 2240533.545 ops/s
# Warmup Iteration   7: 2228399.384 ops/s
# Warmup Iteration   8: 2228894.666 ops/s
# Warmup Iteration   9: 2242669.046 ops/s
# Warmup Iteration  10: 2167337.794 ops/s
# Warmup Iteration  11: 2215763.222 ops/s
# Warmup Iteration  12: 2217776.707 ops/s
# Warmup Iteration  13: 2225494.169 ops/s
# Warmup Iteration  14: 2262521.288 ops/s
# Warmup Iteration  15: 2201447.452 ops/s
# Warmup Iteration  16: 2192566.339 ops/s
# Warmup Iteration  17: 2154571.566 ops/s
# Warmup Iteration  18: 2230273.527 ops/s
# Warmup Iteration  19: 2188975.631 ops/s
# Warmup Iteration  20: 2186752.479 ops/s
# Warmup Iteration  21: 2190653.122 ops/s
# Warmup Iteration  22: 2247240.205 ops/s
# Warmup Iteration  23: 2206008.678 ops/s
# Warmup Iteration  24: 2216202.164 ops/s
# Warmup Iteration  25: 2240582.229 ops/s
# Warmup Iteration  26: 2221900.629 ops/s
# Warmup Iteration  27: 2180961.832 ops/s
# Warmup Iteration  28: 2120483.932 ops/s
# Warmup Iteration  29: 2183158.137 ops/s
# Warmup Iteration  30: 2134890.277 ops/s
Iteration   1: 2222012.781 ops/s
Iteration   2: 2198122.346 ops/s
Iteration   3: 2214817.883 ops/s
Iteration   4: 2231995.420 ops/s
Iteration   5: 2209516.067 ops/s
Iteration   6: 2208936.998 ops/s
Iteration   7: 2214772.650 ops/s
Iteration   8: 2192202.277 ops/s
Iteration   9: 2196108.032 ops/s
Iteration  10: 2223172.188 ops/s
Iteration  11: 2253776.982 ops/s
Iteration  12: 2191559.241 ops/s
Iteration  13: 2207083.077 ops/s
Iteration  14: 2231760.838 ops/s
Iteration  15: 2182127.920 ops/s
Iteration  16: 2201358.261 ops/s
Iteration  17: 2222980.505 ops/s
Iteration  18: 2198108.805 ops/s
Iteration  19: 2204422.166 ops/s
Iteration  20: 2209262.720 ops/s
Iteration  21: 2134153.591 ops/s
Iteration  22: 2130619.080 ops/s
Iteration  23: 2239576.862 ops/s
Iteration  24: 2104238.190 ops/s
Iteration  25: 2087950.947 ops/s
Iteration  26: 2239533.094 ops/s
Iteration  27: 2227908.782 ops/s
Iteration  28: 2222022.780 ops/s
Iteration  29: 2246755.775 ops/s
Iteration  30: 2239610.611 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getAny":
  2202882.229 ±(99.9%) 26749.588 ops/s [Average]
  (min, avg, max) = (2087950.947, 2202882.229, 2253776.982), stdev = 40037.527
  CI (99.9%): [2176132.641, 2229631.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getAny  thrpt   30  2202882.229 ± 26749.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972001.487 ops/s
# Warmup Iteration   2: 2119864.453 ops/s
# Warmup Iteration   3: 2063605.169 ops/s
# Warmup Iteration   4: 2053839.933 ops/s
# Warmup Iteration   5: 1922342.349 ops/s
# Warmup Iteration   6: 2127357.288 ops/s
# Warmup Iteration   7: 2134902.859 ops/s
# Warmup Iteration   8: 2177461.120 ops/s
# Warmup Iteration   9: 2117239.474 ops/s
# Warmup Iteration  10: 2200554.770 ops/s
# Warmup Iteration  11: 2176889.570 ops/s
# Warmup Iteration  12: 2194492.261 ops/s
# Warmup Iteration  13: 2193672.113 ops/s
# Warmup Iteration  14: 2177985.991 ops/s
# Warmup Iteration  15: 2182408.073 ops/s
# Warmup Iteration  16: 2174191.797 ops/s
# Warmup Iteration  17: 2137145.496 ops/s
# Warmup Iteration  18: 2106295.511 ops/s
# Warmup Iteration  19: 2162886.805 ops/s
# Warmup Iteration  20: 2186180.079 ops/s
# Warmup Iteration  21: 2141478.346 ops/s
# Warmup Iteration  22: 2130207.107 ops/s
# Warmup Iteration  23: 2197043.151 ops/s
# Warmup Iteration  24: 2193018.490 ops/s
# Warmup Iteration  25: 2165614.029 ops/s
# Warmup Iteration  26: 2194442.957 ops/s
# Warmup Iteration  27: 2197344.175 ops/s
# Warmup Iteration  28: 2200187.401 ops/s
# Warmup Iteration  29: 2111978.403 ops/s
# Warmup Iteration  30: 2184207.842 ops/s
Iteration   1: 2186899.110 ops/s
Iteration   2: 2179882.124 ops/s
Iteration   3: 2190025.749 ops/s
Iteration   4: 2173782.280 ops/s
Iteration   5: 2190853.307 ops/s
Iteration   6: 2084198.938 ops/s
Iteration   7: 2128985.278 ops/s
Iteration   8: 2203926.512 ops/s
Iteration   9: 2094206.199 ops/s
Iteration  10: 2126119.571 ops/s
Iteration  11: 2101876.605 ops/s
Iteration  12: 2081147.392 ops/s
Iteration  13: 2073806.079 ops/s
Iteration  14: 2136012.597 ops/s
Iteration  15: 2138485.124 ops/s
Iteration  16: 2234333.004 ops/s
Iteration  17: 2239664.753 ops/s
Iteration  18: 2160811.284 ops/s
Iteration  19: 2214101.761 ops/s
Iteration  20: 2209841.991 ops/s
Iteration  21: 2210507.514 ops/s
Iteration  22: 2190352.704 ops/s
Iteration  23: 2197394.875 ops/s
Iteration  24: 2182659.033 ops/s
Iteration  25: 2175977.453 ops/s
Iteration  26: 2167590.403 ops/s
Iteration  27: 2192408.892 ops/s
Iteration  28: 2167449.853 ops/s
Iteration  29: 2175964.016 ops/s
Iteration  30: 2185069.005 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getFirst":
  2166477.780 ±(99.9%) 30148.421 ops/s [Average]
  (min, avg, max) = (2073806.079, 2166477.780, 2239664.753), stdev = 45124.741
  CI (99.9%): [2136329.359, 2196626.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getFirst  thrpt   30  2166477.780 ± 30148.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 960234.431 ops/s
# Warmup Iteration   2: 2129954.258 ops/s
# Warmup Iteration   3: 2167624.724 ops/s
# Warmup Iteration   4: 1969838.300 ops/s
# Warmup Iteration   5: 2025025.163 ops/s
# Warmup Iteration   6: 2182229.613 ops/s
# Warmup Iteration   7: 2201635.510 ops/s
# Warmup Iteration   8: 2221234.713 ops/s
# Warmup Iteration   9: 2187842.958 ops/s
# Warmup Iteration  10: 2162754.980 ops/s
# Warmup Iteration  11: 2197737.113 ops/s
# Warmup Iteration  12: 2206335.240 ops/s
# Warmup Iteration  13: 2177725.070 ops/s
# Warmup Iteration  14: 2194810.576 ops/s
# Warmup Iteration  15: 2180966.153 ops/s
# Warmup Iteration  16: 2202993.737 ops/s
# Warmup Iteration  17: 2189679.030 ops/s
# Warmup Iteration  18: 2182093.510 ops/s
# Warmup Iteration  19: 2162313.811 ops/s
# Warmup Iteration  20: 2192824.143 ops/s
# Warmup Iteration  21: 2140116.814 ops/s
# Warmup Iteration  22: 2168785.698 ops/s
# Warmup Iteration  23: 2211904.368 ops/s
# Warmup Iteration  24: 2231290.135 ops/s
# Warmup Iteration  25: 2195862.532 ops/s
# Warmup Iteration  26: 2122351.586 ops/s
# Warmup Iteration  27: 2129749.386 ops/s
# Warmup Iteration  28: 2119678.523 ops/s
# Warmup Iteration  29: 2083298.700 ops/s
# Warmup Iteration  30: 2185339.586 ops/s
Iteration   1: 2111115.383 ops/s
Iteration   2: 2213093.588 ops/s
Iteration   3: 2080788.640 ops/s
Iteration   4: 2112678.972 ops/s
Iteration   5: 2058570.998 ops/s
Iteration   6: 2118880.318 ops/s
Iteration   7: 2110214.311 ops/s
Iteration   8: 2090885.959 ops/s
Iteration   9: 2151206.606 ops/s
Iteration  10: 2112144.871 ops/s
Iteration  11: 2115008.449 ops/s
Iteration  12: 2084523.246 ops/s
Iteration  13: 2057209.769 ops/s
Iteration  14: 2167878.231 ops/s
Iteration  15: 2072931.093 ops/s
Iteration  16: 2047153.848 ops/s
Iteration  17: 2070476.576 ops/s
Iteration  18: 2179253.038 ops/s
Iteration  19: 2111557.143 ops/s
Iteration  20: 2188389.861 ops/s
Iteration  21: 2076531.205 ops/s
Iteration  22: 2127971.340 ops/s
Iteration  23: 2103138.478 ops/s
Iteration  24: 2055847.641 ops/s
Iteration  25: 2124249.369 ops/s
Iteration  26: 2119673.427 ops/s
Iteration  27: 2174315.783 ops/s
Iteration  28: 2141061.521 ops/s
Iteration  29: 2104704.835 ops/s
Iteration  30: 2145962.982 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getLast":
  2114247.249 ±(99.9%) 28161.138 ops/s [Average]
  (min, avg, max) = (2047153.848, 2114247.249, 2213093.588), stdev = 42150.268
  CI (99.9%): [2086086.112, 2142408.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getLast  thrpt   30  2114247.249 ± 28161.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1519650.792 ops/s
# Warmup Iteration   2: 3541341.934 ops/s
# Warmup Iteration   3: 3516746.483 ops/s
# Warmup Iteration   4: 2974785.220 ops/s
# Warmup Iteration   5: 3629486.196 ops/s
# Warmup Iteration   6: 3481666.079 ops/s
# Warmup Iteration   7: 3540652.515 ops/s
# Warmup Iteration   8: 3588610.428 ops/s
# Warmup Iteration   9: 3627312.335 ops/s
# Warmup Iteration  10: 3589251.777 ops/s
# Warmup Iteration  11: 3589627.272 ops/s
# Warmup Iteration  12: 3564451.537 ops/s
# Warmup Iteration  13: 3616640.681 ops/s
# Warmup Iteration  14: 3619397.645 ops/s
# Warmup Iteration  15: 3655870.105 ops/s
# Warmup Iteration  16: 3544885.747 ops/s
# Warmup Iteration  17: 3627463.635 ops/s
# Warmup Iteration  18: 3560195.945 ops/s
# Warmup Iteration  19: 3592848.388 ops/s
# Warmup Iteration  20: 3517254.745 ops/s
# Warmup Iteration  21: 3489341.712 ops/s
# Warmup Iteration  22: 3486434.423 ops/s
# Warmup Iteration  23: 3452271.130 ops/s
# Warmup Iteration  24: 3406314.448 ops/s
# Warmup Iteration  25: 3407225.313 ops/s
# Warmup Iteration  26: 3561878.854 ops/s
# Warmup Iteration  27: 3659279.439 ops/s
# Warmup Iteration  28: 3656038.215 ops/s
# Warmup Iteration  29: 3622547.521 ops/s
# Warmup Iteration  30: 3582300.856 ops/s
Iteration   1: 3568342.181 ops/s
Iteration   2: 3619508.850 ops/s
Iteration   3: 3669383.833 ops/s
Iteration   4: 3584907.237 ops/s
Iteration   5: 3630102.735 ops/s
Iteration   6: 3471325.691 ops/s
Iteration   7: 3593911.525 ops/s
Iteration   8: 3646222.724 ops/s
Iteration   9: 3637338.483 ops/s
Iteration  10: 3610619.884 ops/s
Iteration  11: 3598631.270 ops/s
Iteration  12: 3555692.484 ops/s
Iteration  13: 3602776.363 ops/s
Iteration  14: 3586160.949 ops/s
Iteration  15: 3553515.158 ops/s
Iteration  16: 3604995.370 ops/s
Iteration  17: 3576548.734 ops/s
Iteration  18: 3642624.385 ops/s
Iteration  19: 3580501.414 ops/s
Iteration  20: 3663525.019 ops/s
Iteration  21: 3644921.351 ops/s
Iteration  22: 3600181.974 ops/s
Iteration  23: 3589851.872 ops/s
Iteration  24: 3550796.357 ops/s
Iteration  25: 3622479.385 ops/s
Iteration  26: 3621955.842 ops/s
Iteration  27: 3655758.151 ops/s
Iteration  28: 3612089.519 ops/s
Iteration  29: 3672885.180 ops/s
Iteration  30: 3597141.244 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly":
  3605489.839 ±(99.9%) 28264.529 ops/s [Average]
  (min, avg, max) = (3471325.691, 3605489.839, 3672885.180), stdev = 42305.020
  CI (99.9%): [3577225.310, 3633754.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getOnly  thrpt   30  3605489.839 ± 28264.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622337.607 ops/s
# Warmup Iteration   2: 698079.290 ops/s
# Warmup Iteration   3: 874812.851 ops/s
# Warmup Iteration   4: 884657.537 ops/s
# Warmup Iteration   5: 900605.353 ops/s
# Warmup Iteration   6: 927181.109 ops/s
# Warmup Iteration   7: 933019.650 ops/s
# Warmup Iteration   8: 881037.769 ops/s
# Warmup Iteration   9: 879099.590 ops/s
# Warmup Iteration  10: 804637.022 ops/s
# Warmup Iteration  11: 846614.014 ops/s
# Warmup Iteration  12: 923257.280 ops/s
# Warmup Iteration  13: 942733.296 ops/s
# Warmup Iteration  14: 934007.746 ops/s
# Warmup Iteration  15: 930175.652 ops/s
# Warmup Iteration  16: 920175.967 ops/s
# Warmup Iteration  17: 976131.709 ops/s
# Warmup Iteration  18: 975461.949 ops/s
# Warmup Iteration  19: 975687.915 ops/s
# Warmup Iteration  20: 967490.028 ops/s
# Warmup Iteration  21: 970314.878 ops/s
# Warmup Iteration  22: 981991.873 ops/s
# Warmup Iteration  23: 981467.970 ops/s
# Warmup Iteration  24: 975408.606 ops/s
# Warmup Iteration  25: 982792.600 ops/s
# Warmup Iteration  26: 988507.221 ops/s
# Warmup Iteration  27: 971717.692 ops/s
# Warmup Iteration  28: 968760.005 ops/s
# Warmup Iteration  29: 975420.930 ops/s
# Warmup Iteration  30: 976004.056 ops/s
Iteration   1: 970427.329 ops/s
Iteration   2: 960445.685 ops/s
Iteration   3: 969341.010 ops/s
Iteration   4: 975619.346 ops/s
Iteration   5: 928190.128 ops/s
Iteration   6: 985452.398 ops/s
Iteration   7: 970758.925 ops/s
Iteration   8: 966256.133 ops/s
Iteration   9: 979224.003 ops/s
Iteration  10: 959239.890 ops/s
Iteration  11: 956179.395 ops/s
Iteration  12: 971421.736 ops/s
Iteration  13: 972603.859 ops/s
Iteration  14: 978377.397 ops/s
Iteration  15: 968420.580 ops/s
Iteration  16: 932640.718 ops/s
Iteration  17: 947172.319 ops/s
Iteration  18: 984949.423 ops/s
Iteration  19: 981213.667 ops/s
Iteration  20: 977101.924 ops/s
Iteration  21: 975771.565 ops/s
Iteration  22: 977994.060 ops/s
Iteration  23: 973536.315 ops/s
Iteration  24: 990493.135 ops/s
Iteration  25: 978516.693 ops/s
Iteration  26: 972524.377 ops/s
Iteration  27: 977913.851 ops/s
Iteration  28: 981612.758 ops/s
Iteration  29: 980412.979 ops/s
Iteration  30: 961623.175 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_empty_throws":
  970181.159 ±(99.9%) 9528.394 ops/s [Average]
  (min, avg, max) = (928190.128, 970181.159, 990493.135), stdev = 14261.653
  CI (99.9%): [960652.765, 979709.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  970181.159 ± 9528.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 542014.421 ops/s
# Warmup Iteration   2: 642955.799 ops/s
# Warmup Iteration   3: 869390.457 ops/s
# Warmup Iteration   4: 833486.062 ops/s
# Warmup Iteration   5: 779327.543 ops/s
# Warmup Iteration   6: 878558.644 ops/s
# Warmup Iteration   7: 875999.738 ops/s
# Warmup Iteration   8: 874244.322 ops/s
# Warmup Iteration   9: 875961.153 ops/s
# Warmup Iteration  10: 679219.829 ops/s
# Warmup Iteration  11: 884161.912 ops/s
# Warmup Iteration  12: 878079.942 ops/s
# Warmup Iteration  13: 830469.414 ops/s
# Warmup Iteration  14: 861061.341 ops/s
# Warmup Iteration  15: 838990.088 ops/s
# Warmup Iteration  16: 832835.144 ops/s
# Warmup Iteration  17: 898688.721 ops/s
# Warmup Iteration  18: 915016.758 ops/s
# Warmup Iteration  19: 901722.945 ops/s
# Warmup Iteration  20: 907265.621 ops/s
# Warmup Iteration  21: 913911.349 ops/s
# Warmup Iteration  22: 915150.575 ops/s
# Warmup Iteration  23: 904904.015 ops/s
# Warmup Iteration  24: 915930.444 ops/s
# Warmup Iteration  25: 879485.157 ops/s
# Warmup Iteration  26: 876954.409 ops/s
# Warmup Iteration  27: 910699.203 ops/s
# Warmup Iteration  28: 922172.204 ops/s
# Warmup Iteration  29: 912556.109 ops/s
# Warmup Iteration  30: 920643.998 ops/s
Iteration   1: 905255.805 ops/s
Iteration   2: 901226.875 ops/s
Iteration   3: 916766.204 ops/s
Iteration   4: 912560.768 ops/s
Iteration   5: 905866.203 ops/s
Iteration   6: 919911.349 ops/s
Iteration   7: 925421.248 ops/s
Iteration   8: 904923.326 ops/s
Iteration   9: 920444.492 ops/s
Iteration  10: 903070.943 ops/s
Iteration  11: 914597.888 ops/s
Iteration  12: 920953.044 ops/s
Iteration  13: 914801.583 ops/s
Iteration  14: 922054.836 ops/s
Iteration  15: 925107.060 ops/s
Iteration  16: 934102.585 ops/s
Iteration  17: 935396.057 ops/s
Iteration  18: 932227.652 ops/s
Iteration  19: 935411.187 ops/s
Iteration  20: 935922.329 ops/s
Iteration  21: 931905.772 ops/s
Iteration  22: 919389.346 ops/s
Iteration  23: 931522.546 ops/s
Iteration  24: 934248.064 ops/s
Iteration  25: 926667.892 ops/s
Iteration  26: 934099.376 ops/s
Iteration  27: 933517.621 ops/s
Iteration  28: 934323.774 ops/s
Iteration  29: 936040.199 ops/s
Iteration  30: 925245.638 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  923099.389 ±(99.9%) 7493.826 ops/s [Average]
  (min, avg, max) = (901226.875, 923099.389, 936040.199), stdev = 11216.407
  CI (99.9%): [915605.562, 930593.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  923099.389 ± 7493.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 112020.606 ops/s
# Warmup Iteration   2: 172355.049 ops/s
# Warmup Iteration   3: 207381.940 ops/s
# Warmup Iteration   4: 205143.641 ops/s
# Warmup Iteration   5: 208155.945 ops/s
# Warmup Iteration   6: 208394.871 ops/s
# Warmup Iteration   7: 170270.146 ops/s
# Warmup Iteration   8: 207812.857 ops/s
# Warmup Iteration   9: 206816.846 ops/s
# Warmup Iteration  10: 205704.498 ops/s
# Warmup Iteration  11: 206668.829 ops/s
# Warmup Iteration  12: 206433.480 ops/s
# Warmup Iteration  13: 207256.767 ops/s
# Warmup Iteration  14: 205680.506 ops/s
# Warmup Iteration  15: 204537.963 ops/s
# Warmup Iteration  16: 205649.453 ops/s
# Warmup Iteration  17: 207535.353 ops/s
# Warmup Iteration  18: 206357.718 ops/s
# Warmup Iteration  19: 203566.625 ops/s
# Warmup Iteration  20: 202845.004 ops/s
# Warmup Iteration  21: 200446.977 ops/s
# Warmup Iteration  22: 207068.628 ops/s
# Warmup Iteration  23: 205953.743 ops/s
# Warmup Iteration  24: 206874.734 ops/s
# Warmup Iteration  25: 207069.912 ops/s
# Warmup Iteration  26: 199228.137 ops/s
# Warmup Iteration  27: 207885.434 ops/s
# Warmup Iteration  28: 209041.457 ops/s
# Warmup Iteration  29: 207397.798 ops/s
# Warmup Iteration  30: 207069.114 ops/s
Iteration   1: 202257.601 ops/s
Iteration   2: 206601.035 ops/s
Iteration   3: 206438.037 ops/s
Iteration   4: 208406.828 ops/s
Iteration   5: 206120.286 ops/s
Iteration   6: 206597.521 ops/s
Iteration   7: 205971.320 ops/s
Iteration   8: 207619.741 ops/s
Iteration   9: 205518.333 ops/s
Iteration  10: 208812.997 ops/s
Iteration  11: 206575.255 ops/s
Iteration  12: 204974.192 ops/s
Iteration  13: 202613.397 ops/s
Iteration  14: 202146.300 ops/s
Iteration  15: 204442.281 ops/s
Iteration  16: 207932.298 ops/s
Iteration  17: 209785.574 ops/s
Iteration  18: 207886.390 ops/s
Iteration  19: 206734.278 ops/s
Iteration  20: 209183.572 ops/s
Iteration  21: 207648.388 ops/s
Iteration  22: 206535.594 ops/s
Iteration  23: 208510.437 ops/s
Iteration  24: 208370.477 ops/s
Iteration  25: 204367.637 ops/s
Iteration  26: 204394.095 ops/s
Iteration  27: 207848.916 ops/s
Iteration  28: 206558.407 ops/s
Iteration  29: 200284.656 ops/s
Iteration  30: 201758.743 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupBy":
  206096.486 ±(99.9%) 1608.994 ops/s [Average]
  (min, avg, max) = (200284.656, 206096.486, 209785.574), stdev = 2408.267
  CI (99.9%): [204487.492, 207705.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupBy  thrpt   30  206096.486 ± 1608.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33035.055 ops/s
# Warmup Iteration   2: 47599.766 ops/s
# Warmup Iteration   3: 58944.097 ops/s
# Warmup Iteration   4: 60105.277 ops/s
# Warmup Iteration   5: 60519.412 ops/s
# Warmup Iteration   6: 60597.643 ops/s
# Warmup Iteration   7: 60651.793 ops/s
# Warmup Iteration   8: 49319.373 ops/s
# Warmup Iteration   9: 60212.512 ops/s
# Warmup Iteration  10: 60503.180 ops/s
# Warmup Iteration  11: 59255.754 ops/s
# Warmup Iteration  12: 59733.455 ops/s
# Warmup Iteration  13: 60848.316 ops/s
# Warmup Iteration  14: 60269.300 ops/s
# Warmup Iteration  15: 60287.528 ops/s
# Warmup Iteration  16: 60557.418 ops/s
# Warmup Iteration  17: 58551.505 ops/s
# Warmup Iteration  18: 58720.998 ops/s
# Warmup Iteration  19: 59029.021 ops/s
# Warmup Iteration  20: 59110.184 ops/s
# Warmup Iteration  21: 59943.854 ops/s
# Warmup Iteration  22: 58470.426 ops/s
# Warmup Iteration  23: 57247.821 ops/s
# Warmup Iteration  24: 57008.685 ops/s
# Warmup Iteration  25: 56541.914 ops/s
# Warmup Iteration  26: 57399.419 ops/s
# Warmup Iteration  27: 58911.044 ops/s
# Warmup Iteration  28: 58685.040 ops/s
# Warmup Iteration  29: 58666.244 ops/s
# Warmup Iteration  30: 59451.581 ops/s
Iteration   1: 58669.975 ops/s
Iteration   2: 59541.933 ops/s
Iteration   3: 59136.154 ops/s
Iteration   4: 58891.786 ops/s
Iteration   5: 57439.583 ops/s
Iteration   6: 58406.606 ops/s
Iteration   7: 57559.861 ops/s
Iteration   8: 57018.550 ops/s
Iteration   9: 58826.178 ops/s
Iteration  10: 57127.831 ops/s
Iteration  11: 57402.328 ops/s
Iteration  12: 59067.995 ops/s
Iteration  13: 58852.001 ops/s
Iteration  14: 59568.609 ops/s
Iteration  15: 58784.899 ops/s
Iteration  16: 58593.739 ops/s
Iteration  17: 58891.340 ops/s
Iteration  18: 56445.433 ops/s
Iteration  19: 57230.092 ops/s
Iteration  20: 56991.474 ops/s
Iteration  21: 56969.258 ops/s
Iteration  22: 59817.020 ops/s
Iteration  23: 58850.909 ops/s
Iteration  24: 59324.582 ops/s
Iteration  25: 59081.092 ops/s
Iteration  26: 59715.386 ops/s
Iteration  27: 60293.576 ops/s
Iteration  28: 59744.783 ops/s
Iteration  29: 59907.447 ops/s
Iteration  30: 59575.245 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByEach":
  58590.856 ±(99.9%) 716.698 ops/s [Average]
  (min, avg, max) = (56445.433, 58590.856, 60293.576), stdev = 1072.720
  CI (99.9%): [57874.157, 59307.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupByEach  thrpt   30  58590.856 ± 716.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1426575.069 ops/s
# Warmup Iteration   2: 3194883.136 ops/s
# Warmup Iteration   3: 3298716.286 ops/s
# Warmup Iteration   4: 3227490.542 ops/s
# Warmup Iteration   5: 2869089.188 ops/s
# Warmup Iteration   6: 3312598.692 ops/s
# Warmup Iteration   7: 3271014.674 ops/s
# Warmup Iteration   8: 3287175.804 ops/s
# Warmup Iteration   9: 3336372.764 ops/s
# Warmup Iteration  10: 3305145.600 ops/s
# Warmup Iteration  11: 3314196.236 ops/s
# Warmup Iteration  12: 3370957.338 ops/s
# Warmup Iteration  13: 3343856.788 ops/s
# Warmup Iteration  14: 3324880.045 ops/s
# Warmup Iteration  15: 3273676.967 ops/s
# Warmup Iteration  16: 3331483.033 ops/s
# Warmup Iteration  17: 3336815.136 ops/s
# Warmup Iteration  18: 3312699.479 ops/s
# Warmup Iteration  19: 3337387.046 ops/s
# Warmup Iteration  20: 3293180.453 ops/s
# Warmup Iteration  21: 3343952.454 ops/s
# Warmup Iteration  22: 3295097.379 ops/s
# Warmup Iteration  23: 3332122.653 ops/s
# Warmup Iteration  24: 3336858.236 ops/s
# Warmup Iteration  25: 3314814.475 ops/s
# Warmup Iteration  26: 3275692.471 ops/s
# Warmup Iteration  27: 3300269.690 ops/s
# Warmup Iteration  28: 3300599.680 ops/s
# Warmup Iteration  29: 3368349.791 ops/s
# Warmup Iteration  30: 3326330.890 ops/s
Iteration   1: 3336421.911 ops/s
Iteration   2: 3344153.497 ops/s
Iteration   3: 3278839.558 ops/s
Iteration   4: 3315979.708 ops/s
Iteration   5: 3271112.303 ops/s
Iteration   6: 3223162.582 ops/s
Iteration   7: 3213475.652 ops/s
Iteration   8: 3252281.264 ops/s
Iteration   9: 3196796.344 ops/s
Iteration  10: 3184952.683 ops/s
Iteration  11: 3324487.622 ops/s
Iteration  12: 3207638.734 ops/s
Iteration  13: 3340042.052 ops/s
Iteration  14: 3323254.920 ops/s
Iteration  15: 3335896.274 ops/s
Iteration  16: 3302931.934 ops/s
Iteration  17: 3260696.966 ops/s
Iteration  18: 3227822.855 ops/s
Iteration  19: 3214487.653 ops/s
Iteration  20: 3243011.775 ops/s
Iteration  21: 3293719.337 ops/s
Iteration  22: 3193641.830 ops/s
Iteration  23: 3224543.672 ops/s
Iteration  24: 3193861.680 ops/s
Iteration  25: 3203315.921 ops/s
Iteration  26: 3157841.148 ops/s
Iteration  27: 3314427.430 ops/s
Iteration  28: 3249798.505 ops/s
Iteration  29: 3110931.657 ops/s
Iteration  30: 3179434.630 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey":
  3250632.070 ±(99.9%) 41523.357 ops/s [Average]
  (min, avg, max) = (3110931.657, 3250632.070, 3344153.497), stdev = 62150.210
  CI (99.9%): [3209108.713, 3292155.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3250632.070 ± 41523.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1050058.859 ops/s
# Warmup Iteration   2: 2171401.373 ops/s
# Warmup Iteration   3: 2418906.590 ops/s
# Warmup Iteration   4: 2468141.846 ops/s
# Warmup Iteration   5: 2001395.496 ops/s
# Warmup Iteration   6: 2441236.857 ops/s
# Warmup Iteration   7: 2400625.317 ops/s
# Warmup Iteration   8: 2453189.414 ops/s
# Warmup Iteration   9: 2460890.040 ops/s
# Warmup Iteration  10: 2468059.344 ops/s
# Warmup Iteration  11: 2467258.244 ops/s
# Warmup Iteration  12: 2435765.238 ops/s
# Warmup Iteration  13: 2445516.481 ops/s
# Warmup Iteration  14: 2475725.286 ops/s
# Warmup Iteration  15: 2475924.688 ops/s
# Warmup Iteration  16: 2435074.577 ops/s
# Warmup Iteration  17: 2357691.357 ops/s
# Warmup Iteration  18: 2412433.091 ops/s
# Warmup Iteration  19: 2450116.162 ops/s
# Warmup Iteration  20: 2429631.463 ops/s
# Warmup Iteration  21: 2451046.703 ops/s
# Warmup Iteration  22: 2449292.503 ops/s
# Warmup Iteration  23: 2328702.654 ops/s
# Warmup Iteration  24: 2361918.076 ops/s
# Warmup Iteration  25: 2440878.306 ops/s
# Warmup Iteration  26: 2399655.870 ops/s
# Warmup Iteration  27: 2346644.244 ops/s
# Warmup Iteration  28: 2302977.182 ops/s
# Warmup Iteration  29: 2404721.740 ops/s
# Warmup Iteration  30: 2371300.295 ops/s
Iteration   1: 2380156.383 ops/s
Iteration   2: 2343901.584 ops/s
Iteration   3: 2405656.287 ops/s
Iteration   4: 2429987.767 ops/s
Iteration   5: 2420656.625 ops/s
Iteration   6: 2430256.281 ops/s
Iteration   7: 2453868.388 ops/s
Iteration   8: 2467100.959 ops/s
Iteration   9: 2449685.230 ops/s
Iteration  10: 2429693.674 ops/s
Iteration  11: 2475399.541 ops/s
Iteration  12: 2452095.192 ops/s
Iteration  13: 2448725.777 ops/s
Iteration  14: 2465871.870 ops/s
Iteration  15: 2464077.276 ops/s
Iteration  16: 2437464.502 ops/s
Iteration  17: 2451719.092 ops/s
Iteration  18: 2365411.857 ops/s
Iteration  19: 2374701.133 ops/s
Iteration  20: 2397893.651 ops/s
Iteration  21: 2438463.690 ops/s
Iteration  22: 2432380.420 ops/s
Iteration  23: 2371909.884 ops/s
Iteration  24: 2481990.566 ops/s
Iteration  25: 2492037.343 ops/s
Iteration  26: 2494722.439 ops/s
Iteration  27: 2488868.054 ops/s
Iteration  28: 2477524.520 ops/s
Iteration  29: 2458574.626 ops/s
Iteration  30: 2492755.020 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2439118.321 ±(99.9%) 27525.698 ops/s [Average]
  (min, avg, max) = (2343901.584, 2439118.321, 2494722.439), stdev = 41199.172
  CI (99.9%): [2411592.623, 2466644.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2439118.321 ± 27525.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350555.737 ops/s
# Warmup Iteration   2: 427200.256 ops/s
# Warmup Iteration   3: 603442.414 ops/s
# Warmup Iteration   4: 604020.207 ops/s
# Warmup Iteration   5: 588407.670 ops/s
# Warmup Iteration   6: 570851.578 ops/s
# Warmup Iteration   7: 571106.406 ops/s
# Warmup Iteration   8: 571506.838 ops/s
# Warmup Iteration   9: 571666.647 ops/s
# Warmup Iteration  10: 503896.753 ops/s
# Warmup Iteration  11: 594711.303 ops/s
# Warmup Iteration  12: 598422.748 ops/s
# Warmup Iteration  13: 589510.786 ops/s
# Warmup Iteration  14: 597586.534 ops/s
# Warmup Iteration  15: 592136.205 ops/s
# Warmup Iteration  16: 589206.334 ops/s
# Warmup Iteration  17: 614751.636 ops/s
# Warmup Iteration  18: 615170.068 ops/s
# Warmup Iteration  19: 615504.302 ops/s
# Warmup Iteration  20: 623798.657 ops/s
# Warmup Iteration  21: 617729.987 ops/s
# Warmup Iteration  22: 614350.122 ops/s
# Warmup Iteration  23: 623264.682 ops/s
# Warmup Iteration  24: 615894.016 ops/s
# Warmup Iteration  25: 619319.927 ops/s
# Warmup Iteration  26: 618780.340 ops/s
# Warmup Iteration  27: 617091.389 ops/s
# Warmup Iteration  28: 614201.036 ops/s
# Warmup Iteration  29: 621862.241 ops/s
# Warmup Iteration  30: 620687.443 ops/s
Iteration   1: 630640.787 ops/s
Iteration   2: 622927.873 ops/s
Iteration   3: 596960.118 ops/s
Iteration   4: 588658.313 ops/s
Iteration   5: 608487.850 ops/s
Iteration   6: 625583.076 ops/s
Iteration   7: 612950.708 ops/s
Iteration   8: 608079.566 ops/s
Iteration   9: 602856.383 ops/s
Iteration  10: 600167.941 ops/s
Iteration  11: 616558.963 ops/s
Iteration  12: 616744.645 ops/s
Iteration  13: 615428.643 ops/s
Iteration  14: 611015.963 ops/s
Iteration  15: 618865.500 ops/s
Iteration  16: 591387.212 ops/s
Iteration  17: 603706.050 ops/s
Iteration  18: 615622.935 ops/s
Iteration  19: 624574.312 ops/s
Iteration  20: 609878.862 ops/s
Iteration  21: 606523.306 ops/s
Iteration  22: 611152.589 ops/s
Iteration  23: 604458.233 ops/s
Iteration  24: 600513.760 ops/s
Iteration  25: 605626.317 ops/s
Iteration  26: 605804.213 ops/s
Iteration  27: 594777.427 ops/s
Iteration  28: 587367.016 ops/s
Iteration  29: 591607.172 ops/s
Iteration  30: 612937.121 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  608062.095 ±(99.9%) 7444.631 ops/s [Average]
  (min, avg, max) = (587367.016, 608062.095, 630640.787), stdev = 11142.774
  CI (99.9%): [600617.464, 615506.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  608062.095 ± 7444.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397932.704 ops/s
# Warmup Iteration   2: 451703.100 ops/s
# Warmup Iteration   3: 611365.142 ops/s
# Warmup Iteration   4: 608956.886 ops/s
# Warmup Iteration   5: 615029.684 ops/s
# Warmup Iteration   6: 596907.271 ops/s
# Warmup Iteration   7: 601994.925 ops/s
# Warmup Iteration   8: 612244.919 ops/s
# Warmup Iteration   9: 609362.653 ops/s
# Warmup Iteration  10: 508432.037 ops/s
# Warmup Iteration  11: 614056.274 ops/s
# Warmup Iteration  12: 610026.189 ops/s
# Warmup Iteration  13: 611267.269 ops/s
# Warmup Iteration  14: 613694.677 ops/s
# Warmup Iteration  15: 617906.205 ops/s
# Warmup Iteration  16: 609916.659 ops/s
# Warmup Iteration  17: 638991.836 ops/s
# Warmup Iteration  18: 637866.733 ops/s
# Warmup Iteration  19: 614203.309 ops/s
# Warmup Iteration  20: 636330.386 ops/s
# Warmup Iteration  21: 633449.796 ops/s
# Warmup Iteration  22: 622610.205 ops/s
# Warmup Iteration  23: 630459.755 ops/s
# Warmup Iteration  24: 635084.547 ops/s
# Warmup Iteration  25: 640503.172 ops/s
# Warmup Iteration  26: 635273.446 ops/s
# Warmup Iteration  27: 635485.212 ops/s
# Warmup Iteration  28: 633469.485 ops/s
# Warmup Iteration  29: 630639.501 ops/s
# Warmup Iteration  30: 623453.469 ops/s
Iteration   1: 640814.373 ops/s
Iteration   2: 608765.134 ops/s
Iteration   3: 629477.774 ops/s
Iteration   4: 640767.582 ops/s
Iteration   5: 636310.083 ops/s
Iteration   6: 629665.499 ops/s
Iteration   7: 634500.483 ops/s
Iteration   8: 643612.461 ops/s
Iteration   9: 635317.589 ops/s
Iteration  10: 636759.768 ops/s
Iteration  11: 639878.422 ops/s
Iteration  12: 633937.625 ops/s
Iteration  13: 633840.744 ops/s
Iteration  14: 635391.239 ops/s
Iteration  15: 606974.426 ops/s
Iteration  16: 633455.174 ops/s
Iteration  17: 634761.488 ops/s
Iteration  18: 640413.577 ops/s
Iteration  19: 638640.632 ops/s
Iteration  20: 611442.361 ops/s
Iteration  21: 643781.691 ops/s
Iteration  22: 634923.745 ops/s
Iteration  23: 629824.947 ops/s
Iteration  24: 626049.539 ops/s
Iteration  25: 605091.114 ops/s
Iteration  26: 601241.136 ops/s
Iteration  27: 603505.404 ops/s
Iteration  28: 615604.671 ops/s
Iteration  29: 621531.082 ops/s
Iteration  30: 600584.316 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  627562.136 ±(99.9%) 9282.514 ops/s [Average]
  (min, avg, max) = (600584.316, 627562.136, 643781.691), stdev = 13893.632
  CI (99.9%): [618279.621, 636844.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  627562.136 ± 9282.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_hashBagNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_hashBagNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1147901.252 ops/s
# Warmup Iteration   2: 2018580.191 ops/s
# Warmup Iteration   3: 2313351.567 ops/s
# Warmup Iteration   4: 2243874.627 ops/s
# Warmup Iteration   5: 2345389.200 ops/s
# Warmup Iteration   6: 1883521.867 ops/s
# Warmup Iteration   7: 2342524.008 ops/s
# Warmup Iteration   8: 2331690.675 ops/s
# Warmup Iteration   9: 2340521.843 ops/s
# Warmup Iteration  10: 2340065.088 ops/s
# Warmup Iteration  11: 2342407.932 ops/s
# Warmup Iteration  12: 2331478.914 ops/s
# Warmup Iteration  13: 2326438.338 ops/s
# Warmup Iteration  14: 2318252.830 ops/s
# Warmup Iteration  15: 2324790.746 ops/s
# Warmup Iteration  16: 2324860.530 ops/s
# Warmup Iteration  17: 2375178.650 ops/s
# Warmup Iteration  18: 2375516.648 ops/s
# Warmup Iteration  19: 2377732.461 ops/s
# Warmup Iteration  20: 2371279.940 ops/s
# Warmup Iteration  21: 2355283.823 ops/s
# Warmup Iteration  22: 2289717.493 ops/s
# Warmup Iteration  23: 2335773.991 ops/s
# Warmup Iteration  24: 2304586.241 ops/s
# Warmup Iteration  25: 2302821.960 ops/s
# Warmup Iteration  26: 2297009.341 ops/s
# Warmup Iteration  27: 2231468.048 ops/s
# Warmup Iteration  28: 2335190.066 ops/s
# Warmup Iteration  29: 2345540.300 ops/s
# Warmup Iteration  30: 2271473.188 ops/s
Iteration   1: 2283923.300 ops/s
Iteration   2: 2314692.241 ops/s
Iteration   3: 2334193.545 ops/s
Iteration   4: 2353195.520 ops/s
Iteration   5: 2380180.710 ops/s
Iteration   6: 2361054.227 ops/s
Iteration   7: 2278389.128 ops/s
Iteration   8: 2313472.445 ops/s
Iteration   9: 2303689.194 ops/s
Iteration  10: 2314998.789 ops/s
Iteration  11: 2323976.660 ops/s
Iteration  12: 2321951.763 ops/s
Iteration  13: 2351451.550 ops/s
Iteration  14: 2321142.958 ops/s
Iteration  15: 2350097.241 ops/s
Iteration  16: 2333233.599 ops/s
Iteration  17: 2337217.759 ops/s
Iteration  18: 2350596.728 ops/s
Iteration  19: 2349029.855 ops/s
Iteration  20: 2327759.339 ops/s
Iteration  21: 2356505.210 ops/s
Iteration  22: 2316208.884 ops/s
Iteration  23: 2307313.355 ops/s
Iteration  24: 2302853.390 ops/s
Iteration  25: 2333037.374 ops/s
Iteration  26: 2345005.113 ops/s
Iteration  27: 2330645.717 ops/s
Iteration  28: 2253830.306 ops/s
Iteration  29: 2224592.731 ops/s
Iteration  30: 2290038.634 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_hashBagNewWith":
  2322142.575 ±(99.9%) 21908.535 ops/s [Average]
  (min, avg, max) = (2224592.731, 2322142.575, 2380180.710), stdev = 32791.666
  CI (99.9%): [2300234.041, 2344051.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_hashBagNewWith  thrpt   30  2322142.575 ± 21908.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3010757.179 ops/s
# Warmup Iteration   2: 6991656.544 ops/s
# Warmup Iteration   3: 6763966.945 ops/s
# Warmup Iteration   4: 5852539.520 ops/s
# Warmup Iteration   5: 7112301.916 ops/s
# Warmup Iteration   6: 6758909.980 ops/s
# Warmup Iteration   7: 6911900.758 ops/s
# Warmup Iteration   8: 7066552.187 ops/s
# Warmup Iteration   9: 6896029.389 ops/s
# Warmup Iteration  10: 7056777.227 ops/s
# Warmup Iteration  11: 6790403.332 ops/s
# Warmup Iteration  12: 6950195.202 ops/s
# Warmup Iteration  13: 6893805.389 ops/s
# Warmup Iteration  14: 7188168.802 ops/s
# Warmup Iteration  15: 7131226.780 ops/s
# Warmup Iteration  16: 7112632.714 ops/s
# Warmup Iteration  17: 6838267.618 ops/s
# Warmup Iteration  18: 7166551.482 ops/s
# Warmup Iteration  19: 7106261.325 ops/s
# Warmup Iteration  20: 6802485.314 ops/s
# Warmup Iteration  21: 6972571.853 ops/s
# Warmup Iteration  22: 7138807.429 ops/s
# Warmup Iteration  23: 6910886.059 ops/s
# Warmup Iteration  24: 6785518.340 ops/s
# Warmup Iteration  25: 6865099.717 ops/s
# Warmup Iteration  26: 7025226.237 ops/s
# Warmup Iteration  27: 6901235.310 ops/s
# Warmup Iteration  28: 6872301.613 ops/s
# Warmup Iteration  29: 6936629.951 ops/s
# Warmup Iteration  30: 7024365.783 ops/s
Iteration   1: 7149109.412 ops/s
Iteration   2: 6964949.316 ops/s
Iteration   3: 7086017.968 ops/s
Iteration   4: 7025335.442 ops/s
Iteration   5: 6814984.070 ops/s
Iteration   6: 7133998.602 ops/s
Iteration   7: 7103587.570 ops/s
Iteration   8: 6772334.773 ops/s
Iteration   9: 6796643.256 ops/s
Iteration  10: 7121282.338 ops/s
Iteration  11: 6991829.644 ops/s
Iteration  12: 6918623.483 ops/s
Iteration  13: 6999651.500 ops/s
Iteration  14: 6961261.094 ops/s
Iteration  15: 6701731.327 ops/s
Iteration  16: 7005805.506 ops/s
Iteration  17: 6599648.525 ops/s
Iteration  18: 6724775.149 ops/s
Iteration  19: 6723478.860 ops/s
Iteration  20: 6824900.660 ops/s
Iteration  21: 6907205.827 ops/s
Iteration  22: 6729233.198 ops/s
Iteration  23: 6652510.879 ops/s
Iteration  24: 7081026.636 ops/s
Iteration  25: 6942983.066 ops/s
Iteration  26: 7113417.366 ops/s
Iteration  27: 6988363.145 ops/s
Iteration  28: 6897057.546 ops/s
Iteration  29: 7051866.850 ops/s
Iteration  30: 6938084.815 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectInto":
  6924056.594 ±(99.9%) 104704.498 ops/s [Average]
  (min, avg, max) = (6599648.525, 6924056.594, 7149109.412), stdev = 156716.776
  CI (99.9%): [6819352.096, 7028761.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectInto  thrpt   30  6924056.594 ± 104704.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1776707.770 ops/s
# Warmup Iteration   2: 3499904.673 ops/s
# Warmup Iteration   3: 3696460.417 ops/s
# Warmup Iteration   4: 3711492.012 ops/s
# Warmup Iteration   5: 3089827.307 ops/s
# Warmup Iteration   6: 3706931.273 ops/s
# Warmup Iteration   7: 3689862.186 ops/s
# Warmup Iteration   8: 3672488.764 ops/s
# Warmup Iteration   9: 3699249.356 ops/s
# Warmup Iteration  10: 3694359.028 ops/s
# Warmup Iteration  11: 3608755.722 ops/s
# Warmup Iteration  12: 3631582.389 ops/s
# Warmup Iteration  13: 3710894.338 ops/s
# Warmup Iteration  14: 3731213.566 ops/s
# Warmup Iteration  15: 3693735.365 ops/s
# Warmup Iteration  16: 3695045.621 ops/s
# Warmup Iteration  17: 3704909.373 ops/s
# Warmup Iteration  18: 3755596.854 ops/s
# Warmup Iteration  19: 3788036.092 ops/s
# Warmup Iteration  20: 3718817.572 ops/s
# Warmup Iteration  21: 3612695.876 ops/s
# Warmup Iteration  22: 3558870.867 ops/s
# Warmup Iteration  23: 3597328.063 ops/s
# Warmup Iteration  24: 3603498.654 ops/s
# Warmup Iteration  25: 3729403.564 ops/s
# Warmup Iteration  26: 3709713.219 ops/s
# Warmup Iteration  27: 3696874.395 ops/s
# Warmup Iteration  28: 3763330.140 ops/s
# Warmup Iteration  29: 3730106.310 ops/s
# Warmup Iteration  30: 3705510.265 ops/s
Iteration   1: 3739340.829 ops/s
Iteration   2: 3816620.764 ops/s
Iteration   3: 3732146.391 ops/s
Iteration   4: 3765967.614 ops/s
Iteration   5: 3751116.203 ops/s
Iteration   6: 3709974.936 ops/s
Iteration   7: 3756592.273 ops/s
Iteration   8: 3813912.773 ops/s
Iteration   9: 3799439.793 ops/s
Iteration  10: 3636751.329 ops/s
Iteration  11: 3713307.762 ops/s
Iteration  12: 3759097.209 ops/s
Iteration  13: 3772528.516 ops/s
Iteration  14: 3576461.235 ops/s
Iteration  15: 3769940.115 ops/s
Iteration  16: 3751178.956 ops/s
Iteration  17: 3728597.867 ops/s
Iteration  18: 3687740.704 ops/s
Iteration  19: 3783061.302 ops/s
Iteration  20: 3748261.822 ops/s
Iteration  21: 3769911.050 ops/s
Iteration  22: 3661508.836 ops/s
Iteration  23: 3756514.606 ops/s
Iteration  24: 3757378.740 ops/s
Iteration  25: 3788800.150 ops/s
Iteration  26: 3719291.711 ops/s
Iteration  27: 3761258.230 ops/s
Iteration  28: 3737295.352 ops/s
Iteration  29: 3757743.894 ops/s
Iteration  30: 3742706.780 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoDouble":
  3742148.258 ±(99.9%) 33596.941 ops/s [Average]
  (min, avg, max) = (3576461.235, 3742148.258, 3816620.764), stdev = 50286.323
  CI (99.9%): [3708551.317, 3775745.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  3742148.258 ± 33596.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1819296.292 ops/s
# Warmup Iteration   2: 3756515.800 ops/s
# Warmup Iteration   3: 3917816.588 ops/s
# Warmup Iteration   4: 3837262.364 ops/s
# Warmup Iteration   5: 3272042.732 ops/s
# Warmup Iteration   6: 3885776.980 ops/s
# Warmup Iteration   7: 3956377.096 ops/s
# Warmup Iteration   8: 3799598.851 ops/s
# Warmup Iteration   9: 3973641.239 ops/s
# Warmup Iteration  10: 3935579.366 ops/s
# Warmup Iteration  11: 3927780.281 ops/s
# Warmup Iteration  12: 3969465.084 ops/s
# Warmup Iteration  13: 3906372.639 ops/s
# Warmup Iteration  14: 3912345.953 ops/s
# Warmup Iteration  15: 3840022.179 ops/s
# Warmup Iteration  16: 3951631.176 ops/s
# Warmup Iteration  17: 3930348.773 ops/s
# Warmup Iteration  18: 3942139.900 ops/s
# Warmup Iteration  19: 3940117.131 ops/s
# Warmup Iteration  20: 4027018.534 ops/s
# Warmup Iteration  21: 3981426.693 ops/s
# Warmup Iteration  22: 4000059.650 ops/s
# Warmup Iteration  23: 3962886.635 ops/s
# Warmup Iteration  24: 3933363.057 ops/s
# Warmup Iteration  25: 3791649.240 ops/s
# Warmup Iteration  26: 3957467.162 ops/s
# Warmup Iteration  27: 3874459.282 ops/s
# Warmup Iteration  28: 3965230.815 ops/s
# Warmup Iteration  29: 3961100.586 ops/s
# Warmup Iteration  30: 3947149.743 ops/s
Iteration   1: 3986303.441 ops/s
Iteration   2: 3965584.504 ops/s
Iteration   3: 3732672.001 ops/s
Iteration   4: 3907315.352 ops/s
Iteration   5: 3971847.461 ops/s
Iteration   6: 3915615.588 ops/s
Iteration   7: 3812434.422 ops/s
Iteration   8: 3778787.356 ops/s
Iteration   9: 3770517.342 ops/s
Iteration  10: 3777449.828 ops/s
Iteration  11: 3778235.797 ops/s
Iteration  12: 3866603.098 ops/s
Iteration  13: 3869827.692 ops/s
Iteration  14: 4016955.988 ops/s
Iteration  15: 3991790.879 ops/s
Iteration  16: 3809845.804 ops/s
Iteration  17: 3855331.744 ops/s
Iteration  18: 3938741.394 ops/s
Iteration  19: 3788835.441 ops/s
Iteration  20: 3788782.944 ops/s
Iteration  21: 3792816.994 ops/s
Iteration  22: 3893785.780 ops/s
Iteration  23: 3864709.012 ops/s
Iteration  24: 3958851.883 ops/s
Iteration  25: 3973533.419 ops/s
Iteration  26: 3935608.361 ops/s
Iteration  27: 3932174.299 ops/s
Iteration  28: 3993490.645 ops/s
Iteration  29: 3986415.517 ops/s
Iteration  30: 4027215.490 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoFloat":
  3889402.649 ±(99.9%) 59192.143 ops/s [Average]
  (min, avg, max) = (3732672.001, 3889402.649, 4027215.490), stdev = 88596.019
  CI (99.9%): [3830210.507, 3948594.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  3889402.649 ± 59192.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1801382.393 ops/s
# Warmup Iteration   2: 3665313.625 ops/s
# Warmup Iteration   3: 3855027.010 ops/s
# Warmup Iteration   4: 3824555.187 ops/s
# Warmup Iteration   5: 3172212.851 ops/s
# Warmup Iteration   6: 3917893.404 ops/s
# Warmup Iteration   7: 3930608.838 ops/s
# Warmup Iteration   8: 3940430.418 ops/s
# Warmup Iteration   9: 3859707.234 ops/s
# Warmup Iteration  10: 3862497.107 ops/s
# Warmup Iteration  11: 3974529.828 ops/s
# Warmup Iteration  12: 3903838.704 ops/s
# Warmup Iteration  13: 3830317.695 ops/s
# Warmup Iteration  14: 3863856.856 ops/s
# Warmup Iteration  15: 3974208.637 ops/s
# Warmup Iteration  16: 3930258.652 ops/s
# Warmup Iteration  17: 3822123.922 ops/s
# Warmup Iteration  18: 3795771.619 ops/s
# Warmup Iteration  19: 3948643.001 ops/s
# Warmup Iteration  20: 3902188.543 ops/s
# Warmup Iteration  21: 3911102.100 ops/s
# Warmup Iteration  22: 3880949.852 ops/s
# Warmup Iteration  23: 3886534.005 ops/s
# Warmup Iteration  24: 3892259.341 ops/s
# Warmup Iteration  25: 3859454.255 ops/s
# Warmup Iteration  26: 3925066.680 ops/s
# Warmup Iteration  27: 3918514.858 ops/s
# Warmup Iteration  28: 3878380.718 ops/s
# Warmup Iteration  29: 3873556.395 ops/s
# Warmup Iteration  30: 3867844.809 ops/s
Iteration   1: 4004760.642 ops/s
Iteration   2: 3841716.008 ops/s
Iteration   3: 3922241.945 ops/s
Iteration   4: 3837244.002 ops/s
Iteration   5: 3901078.769 ops/s
Iteration   6: 3770192.626 ops/s
Iteration   7: 3737358.663 ops/s
Iteration   8: 3911218.351 ops/s
Iteration   9: 3927282.747 ops/s
Iteration  10: 3928424.063 ops/s
Iteration  11: 3959952.598 ops/s
Iteration  12: 4004020.463 ops/s
Iteration  13: 3930871.094 ops/s
Iteration  14: 3860584.027 ops/s
Iteration  15: 3888833.502 ops/s
Iteration  16: 3816572.575 ops/s
Iteration  17: 3779849.553 ops/s
Iteration  18: 3669795.598 ops/s
Iteration  19: 3770796.348 ops/s
Iteration  20: 3835928.707 ops/s
Iteration  21: 3838723.831 ops/s
Iteration  22: 3839185.633 ops/s
Iteration  23: 3857193.797 ops/s
Iteration  24: 3881679.213 ops/s
Iteration  25: 3876298.913 ops/s
Iteration  26: 3896936.610 ops/s
Iteration  27: 3881256.543 ops/s
Iteration  28: 3897993.348 ops/s
Iteration  29: 3906341.329 ops/s
Iteration  30: 3931534.554 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoInt":
  3870195.535 ±(99.9%) 49773.961 ops/s [Average]
  (min, avg, max) = (3669795.598, 3870195.535, 4004760.642), stdev = 74499.327
  CI (99.9%): [3820421.574, 3919969.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  3870195.535 ± 49773.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1744492.592 ops/s
# Warmup Iteration   2: 3458714.164 ops/s
# Warmup Iteration   3: 3651726.292 ops/s
# Warmup Iteration   4: 3507309.282 ops/s
# Warmup Iteration   5: 3028288.783 ops/s
# Warmup Iteration   6: 3629180.829 ops/s
# Warmup Iteration   7: 3696040.792 ops/s
# Warmup Iteration   8: 3672788.250 ops/s
# Warmup Iteration   9: 3652811.372 ops/s
# Warmup Iteration  10: 3644394.497 ops/s
# Warmup Iteration  11: 3719074.651 ops/s
# Warmup Iteration  12: 3747454.908 ops/s
# Warmup Iteration  13: 3733161.043 ops/s
# Warmup Iteration  14: 3720648.841 ops/s
# Warmup Iteration  15: 3704791.770 ops/s
# Warmup Iteration  16: 3683150.802 ops/s
# Warmup Iteration  17: 3694313.471 ops/s
# Warmup Iteration  18: 3735384.580 ops/s
# Warmup Iteration  19: 3698031.991 ops/s
# Warmup Iteration  20: 3682139.208 ops/s
# Warmup Iteration  21: 3705194.677 ops/s
# Warmup Iteration  22: 3749168.128 ops/s
# Warmup Iteration  23: 3710425.277 ops/s
# Warmup Iteration  24: 3713392.890 ops/s
# Warmup Iteration  25: 3569202.557 ops/s
# Warmup Iteration  26: 3528971.620 ops/s
# Warmup Iteration  27: 3678092.104 ops/s
# Warmup Iteration  28: 3652754.393 ops/s
# Warmup Iteration  29: 3533249.359 ops/s
# Warmup Iteration  30: 3680674.806 ops/s
Iteration   1: 3700103.200 ops/s
Iteration   2: 3618465.432 ops/s
Iteration   3: 3757491.650 ops/s
Iteration   4: 3747981.130 ops/s
Iteration   5: 3726293.652 ops/s
Iteration   6: 3701121.028 ops/s
Iteration   7: 3475593.651 ops/s
Iteration   8: 3623159.706 ops/s
Iteration   9: 3665551.282 ops/s
Iteration  10: 3729501.345 ops/s
Iteration  11: 3676606.383 ops/s
Iteration  12: 3671434.092 ops/s
Iteration  13: 3727188.957 ops/s
Iteration  14: 3716130.140 ops/s
Iteration  15: 3738112.469 ops/s
Iteration  16: 3607129.077 ops/s
Iteration  17: 3530520.576 ops/s
Iteration  18: 3560851.447 ops/s
Iteration  19: 3702952.659 ops/s
Iteration  20: 3703955.859 ops/s
Iteration  21: 3685443.443 ops/s
Iteration  22: 3551640.482 ops/s
Iteration  23: 3625353.089 ops/s
Iteration  24: 3483530.323 ops/s
Iteration  25: 3717110.629 ops/s
Iteration  26: 3725978.100 ops/s
Iteration  27: 3720034.873 ops/s
Iteration  28: 3782206.126 ops/s
Iteration  29: 3775955.539 ops/s
Iteration  30: 3755041.433 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoLong":
  3673414.592 ±(99.9%) 55787.224 ops/s [Average]
  (min, avg, max) = (3475593.651, 3673414.592, 3782206.126), stdev = 83499.697
  CI (99.9%): [3617627.368, 3729201.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  3673414.592 ± 55787.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1799990.081 ops/s
# Warmup Iteration   2: 3772868.638 ops/s
# Warmup Iteration   3: 4000593.439 ops/s
# Warmup Iteration   4: 3987471.430 ops/s
# Warmup Iteration   5: 3304195.656 ops/s
# Warmup Iteration   6: 4013651.747 ops/s
# Warmup Iteration   7: 4117561.466 ops/s
# Warmup Iteration   8: 4084836.526 ops/s
# Warmup Iteration   9: 4044639.554 ops/s
# Warmup Iteration  10: 4043341.021 ops/s
# Warmup Iteration  11: 4037992.767 ops/s
# Warmup Iteration  12: 4067699.462 ops/s
# Warmup Iteration  13: 3975022.242 ops/s
# Warmup Iteration  14: 4064472.150 ops/s
# Warmup Iteration  15: 4071047.118 ops/s
# Warmup Iteration  16: 4009026.471 ops/s
# Warmup Iteration  17: 4082292.398 ops/s
# Warmup Iteration  18: 3991902.918 ops/s
# Warmup Iteration  19: 3902172.289 ops/s
# Warmup Iteration  20: 3930313.515 ops/s
# Warmup Iteration  21: 3879033.429 ops/s
# Warmup Iteration  22: 4071197.061 ops/s
# Warmup Iteration  23: 4133357.124 ops/s
# Warmup Iteration  24: 4148211.750 ops/s
# Warmup Iteration  25: 4114484.515 ops/s
# Warmup Iteration  26: 4083965.262 ops/s
# Warmup Iteration  27: 4065727.846 ops/s
# Warmup Iteration  28: 4072110.126 ops/s
# Warmup Iteration  29: 4120392.307 ops/s
# Warmup Iteration  30: 4108834.389 ops/s
Iteration   1: 4080493.972 ops/s
Iteration   2: 4145984.954 ops/s
Iteration   3: 4108163.055 ops/s
Iteration   4: 4020787.526 ops/s
Iteration   5: 4094431.800 ops/s
Iteration   6: 4089654.745 ops/s
Iteration   7: 4114681.456 ops/s
Iteration   8: 4156324.034 ops/s
Iteration   9: 4167460.892 ops/s
Iteration  10: 4142760.455 ops/s
Iteration  11: 4134002.248 ops/s
Iteration  12: 4142435.404 ops/s
Iteration  13: 4110164.534 ops/s
Iteration  14: 4140597.479 ops/s
Iteration  15: 4137594.182 ops/s
Iteration  16: 4136673.956 ops/s
Iteration  17: 4138736.891 ops/s
Iteration  18: 4138503.648 ops/s
Iteration  19: 4096783.455 ops/s
Iteration  20: 4106495.180 ops/s
Iteration  21: 4113767.722 ops/s
Iteration  22: 4041064.146 ops/s
Iteration  23: 4041853.345 ops/s
Iteration  24: 4059879.841 ops/s
Iteration  25: 3877254.770 ops/s
Iteration  26: 4070693.430 ops/s
Iteration  27: 4113570.860 ops/s
Iteration  28: 4113166.353 ops/s
Iteration  29: 4048861.384 ops/s
Iteration  30: 4094941.852 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_injectIntoWith":
  4099259.452 ±(99.9%) 37498.528 ops/s [Average]
  (min, avg, max) = (3877254.770, 4099259.452, 4167460.892), stdev = 56126.036
  CI (99.9%): [4061760.924, 4136757.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_injectIntoWith  thrpt   30  4099259.452 ± 37498.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1272812.148 ops/s
# Warmup Iteration   2: 2858674.290 ops/s
# Warmup Iteration   3: 2543941.721 ops/s
# Warmup Iteration   4: 2706254.624 ops/s
# Warmup Iteration   5: 2827231.689 ops/s
# Warmup Iteration   6: 2799440.133 ops/s
# Warmup Iteration   7: 2915685.365 ops/s
# Warmup Iteration   8: 2866259.740 ops/s
# Warmup Iteration   9: 2830210.110 ops/s
# Warmup Iteration  10: 2912614.357 ops/s
# Warmup Iteration  11: 2913254.027 ops/s
# Warmup Iteration  12: 2843832.144 ops/s
# Warmup Iteration  13: 2942256.217 ops/s
# Warmup Iteration  14: 2939959.562 ops/s
# Warmup Iteration  15: 2908553.620 ops/s
# Warmup Iteration  16: 2892845.848 ops/s
# Warmup Iteration  17: 2913306.352 ops/s
# Warmup Iteration  18: 2849625.712 ops/s
# Warmup Iteration  19: 2858208.000 ops/s
# Warmup Iteration  20: 2893975.850 ops/s
# Warmup Iteration  21: 2896106.323 ops/s
# Warmup Iteration  22: 2955594.955 ops/s
# Warmup Iteration  23: 2907697.080 ops/s
# Warmup Iteration  24: 2901268.817 ops/s
# Warmup Iteration  25: 2940613.285 ops/s
# Warmup Iteration  26: 2877152.581 ops/s
# Warmup Iteration  27: 2865342.133 ops/s
# Warmup Iteration  28: 2887014.679 ops/s
# Warmup Iteration  29: 2896903.703 ops/s
# Warmup Iteration  30: 2949487.373 ops/s
Iteration   1: 2936190.066 ops/s
Iteration   2: 2873088.115 ops/s
Iteration   3: 2854262.444 ops/s
Iteration   4: 2883216.441 ops/s
Iteration   5: 2888196.169 ops/s
Iteration   6: 2920354.210 ops/s
Iteration   7: 2953639.996 ops/s
Iteration   8: 2923952.104 ops/s
Iteration   9: 2944831.571 ops/s
Iteration  10: 2940760.239 ops/s
Iteration  11: 2802553.497 ops/s
Iteration  12: 2877565.171 ops/s
Iteration  13: 2877592.742 ops/s
Iteration  14: 2875713.918 ops/s
Iteration  15: 2869034.216 ops/s
Iteration  16: 2935692.432 ops/s
Iteration  17: 2826333.282 ops/s
Iteration  18: 2822828.099 ops/s
Iteration  19: 2943808.150 ops/s
Iteration  20: 2910433.467 ops/s
Iteration  21: 2909686.833 ops/s
Iteration  22: 2845891.950 ops/s
Iteration  23: 2902400.692 ops/s
Iteration  24: 2794331.328 ops/s
Iteration  25: 2848136.494 ops/s
Iteration  26: 2907710.877 ops/s
Iteration  27: 2900998.996 ops/s
Iteration  28: 2890288.480 ops/s
Iteration  29: 2878542.216 ops/s
Iteration  30: 2949778.967 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_isEmpty":
  2889593.772 ±(99.9%) 29239.737 ops/s [Average]
  (min, avg, max) = (2794331.328, 2889593.772, 2953639.996), stdev = 43764.665
  CI (99.9%): [2860354.035, 2918833.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_isEmpty  thrpt   30  2889593.772 ± 29239.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 557081.355 ops/s
# Warmup Iteration   2: 621236.111 ops/s
# Warmup Iteration   3: 814186.029 ops/s
# Warmup Iteration   4: 798546.931 ops/s
# Warmup Iteration   5: 792197.776 ops/s
# Warmup Iteration   6: 811758.774 ops/s
# Warmup Iteration   7: 795051.912 ops/s
# Warmup Iteration   8: 806446.078 ops/s
# Warmup Iteration   9: 821877.709 ops/s
# Warmup Iteration  10: 687817.614 ops/s
# Warmup Iteration  11: 814485.502 ops/s
# Warmup Iteration  12: 805417.252 ops/s
# Warmup Iteration  13: 808221.848 ops/s
# Warmup Iteration  14: 818252.937 ops/s
# Warmup Iteration  15: 815965.193 ops/s
# Warmup Iteration  16: 777356.125 ops/s
# Warmup Iteration  17: 838905.172 ops/s
# Warmup Iteration  18: 849577.788 ops/s
# Warmup Iteration  19: 825858.374 ops/s
# Warmup Iteration  20: 798734.475 ops/s
# Warmup Iteration  21: 852771.393 ops/s
# Warmup Iteration  22: 838755.058 ops/s
# Warmup Iteration  23: 845949.528 ops/s
# Warmup Iteration  24: 843389.995 ops/s
# Warmup Iteration  25: 844356.971 ops/s
# Warmup Iteration  26: 808764.051 ops/s
# Warmup Iteration  27: 830136.843 ops/s
# Warmup Iteration  28: 856879.012 ops/s
# Warmup Iteration  29: 850237.148 ops/s
# Warmup Iteration  30: 846858.257 ops/s
Iteration   1: 803069.844 ops/s
Iteration   2: 846373.536 ops/s
Iteration   3: 843359.428 ops/s
Iteration   4: 843322.844 ops/s
Iteration   5: 846030.758 ops/s
Iteration   6: 838021.883 ops/s
Iteration   7: 796692.828 ops/s
Iteration   8: 830922.145 ops/s
Iteration   9: 820442.475 ops/s
Iteration  10: 841251.678 ops/s
Iteration  11: 811683.662 ops/s
Iteration  12: 805429.126 ops/s
Iteration  13: 818899.444 ops/s
Iteration  14: 850763.285 ops/s
Iteration  15: 787349.061 ops/s
Iteration  16: 811745.016 ops/s
Iteration  17: 838314.588 ops/s
Iteration  18: 822112.200 ops/s
Iteration  19: 864560.541 ops/s
Iteration  20: 861981.702 ops/s
Iteration  21: 803833.957 ops/s
Iteration  22: 801485.622 ops/s
Iteration  23: 812237.863 ops/s
Iteration  24: 810600.979 ops/s
Iteration  25: 847618.608 ops/s
Iteration  26: 855121.562 ops/s
Iteration  27: 848220.294 ops/s
Iteration  28: 857252.697 ops/s
Iteration  29: 857480.374 ops/s
Iteration  30: 819551.216 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator":
  829857.641 ±(99.9%) 14712.505 ops/s [Average]
  (min, avg, max) = (787349.061, 829857.641, 864560.541), stdev = 22020.987
  CI (99.9%): [815145.135, 844570.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_iterator  thrpt   30  829857.641 ± 14712.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546565.276 ops/s
# Warmup Iteration   2: 604887.797 ops/s
# Warmup Iteration   3: 815311.852 ops/s
# Warmup Iteration   4: 813418.934 ops/s
# Warmup Iteration   5: 814891.139 ops/s
# Warmup Iteration   6: 821454.505 ops/s
# Warmup Iteration   7: 810809.090 ops/s
# Warmup Iteration   8: 819345.082 ops/s
# Warmup Iteration   9: 822202.866 ops/s
# Warmup Iteration  10: 719630.478 ops/s
# Warmup Iteration  11: 775198.608 ops/s
# Warmup Iteration  12: 812723.627 ops/s
# Warmup Iteration  13: 789220.344 ops/s
# Warmup Iteration  14: 778988.066 ops/s
# Warmup Iteration  15: 783381.236 ops/s
# Warmup Iteration  16: 801119.017 ops/s
# Warmup Iteration  17: 858652.098 ops/s
# Warmup Iteration  18: 853094.815 ops/s
# Warmup Iteration  19: 861441.857 ops/s
# Warmup Iteration  20: 865156.873 ops/s
# Warmup Iteration  21: 839072.672 ops/s
# Warmup Iteration  22: 858170.792 ops/s
# Warmup Iteration  23: 863424.742 ops/s
# Warmup Iteration  24: 846482.861 ops/s
# Warmup Iteration  25: 866295.190 ops/s
# Warmup Iteration  26: 845890.671 ops/s
# Warmup Iteration  27: 861517.122 ops/s
# Warmup Iteration  28: 825148.733 ops/s
# Warmup Iteration  29: 842224.826 ops/s
# Warmup Iteration  30: 834418.042 ops/s
Iteration   1: 816000.810 ops/s
Iteration   2: 864552.941 ops/s
Iteration   3: 825610.182 ops/s
Iteration   4: 861924.535 ops/s
Iteration   5: 842636.412 ops/s
Iteration   6: 845547.283 ops/s
Iteration   7: 854811.436 ops/s
Iteration   8: 847325.056 ops/s
Iteration   9: 870099.471 ops/s
Iteration  10: 853638.142 ops/s
Iteration  11: 865536.780 ops/s
Iteration  12: 862185.814 ops/s
Iteration  13: 847566.254 ops/s
Iteration  14: 857141.058 ops/s
Iteration  15: 854683.454 ops/s
Iteration  16: 862051.511 ops/s
Iteration  17: 870304.030 ops/s
Iteration  18: 859005.150 ops/s
Iteration  19: 857442.920 ops/s
Iteration  20: 864949.199 ops/s
Iteration  21: 845600.059 ops/s
Iteration  22: 851052.946 ops/s
Iteration  23: 861751.827 ops/s
Iteration  24: 867900.046 ops/s
Iteration  25: 871256.997 ops/s
Iteration  26: 855934.248 ops/s
Iteration  27: 835006.453 ops/s
Iteration  28: 809170.095 ops/s
Iteration  29: 811392.514 ops/s
Iteration  30: 830240.587 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_iterator_throws":
  850743.940 ±(99.9%) 11595.233 ops/s [Average]
  (min, avg, max) = (809170.095, 850743.940, 871256.997), stdev = 17355.200
  CI (99.9%): [839148.707, 862339.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  850743.940 ± 11595.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32.938 ops/s
# Warmup Iteration   2: 38.738 ops/s
# Warmup Iteration   3: 44.879 ops/s
# Warmup Iteration   4: 49.615 ops/s
# Warmup Iteration   5: 48.548 ops/s
# Warmup Iteration   6: 47.209 ops/s
# Warmup Iteration   7: 47.125 ops/s
# Warmup Iteration   8: 47.810 ops/s
# Warmup Iteration   9: 46.863 ops/s
# Warmup Iteration  10: 47.821 ops/s
# Warmup Iteration  11: 49.069 ops/s
# Warmup Iteration  12: 48.671 ops/s
# Warmup Iteration  13: 47.360 ops/s
# Warmup Iteration  14: 42.243 ops/s
# Warmup Iteration  15: 45.634 ops/s
# Warmup Iteration  16: 47.034 ops/s
# Warmup Iteration  17: 48.649 ops/s
# Warmup Iteration  18: 48.495 ops/s
# Warmup Iteration  19: 48.133 ops/s
# Warmup Iteration  20: 48.038 ops/s
# Warmup Iteration  21: 46.754 ops/s
# Warmup Iteration  22: 48.147 ops/s
# Warmup Iteration  23: 49.150 ops/s
# Warmup Iteration  24: 49.110 ops/s
# Warmup Iteration  25: 47.285 ops/s
# Warmup Iteration  26: 48.381 ops/s
# Warmup Iteration  27: 47.951 ops/s
# Warmup Iteration  28: 46.265 ops/s
# Warmup Iteration  29: 49.168 ops/s
# Warmup Iteration  30: 49.009 ops/s
Iteration   1: 48.999 ops/s
Iteration   2: 46.803 ops/s
Iteration   3: 48.701 ops/s
Iteration   4: 47.020 ops/s
Iteration   5: 47.125 ops/s
Iteration   6: 47.218 ops/s
Iteration   7: 47.417 ops/s
Iteration   8: 47.881 ops/s
Iteration   9: 46.994 ops/s
Iteration  10: 47.899 ops/s
Iteration  11: 47.548 ops/s
Iteration  12: 47.876 ops/s
Iteration  13: 48.548 ops/s
Iteration  14: 49.111 ops/s
Iteration  15: 49.179 ops/s
Iteration  16: 48.600 ops/s
Iteration  17: 48.945 ops/s
Iteration  18: 49.463 ops/s
Iteration  19: 48.933 ops/s
Iteration  20: 49.730 ops/s
Iteration  21: 48.371 ops/s
Iteration  22: 50.013 ops/s
Iteration  23: 49.725 ops/s
Iteration  24: 48.938 ops/s
Iteration  25: 48.884 ops/s
Iteration  26: 49.204 ops/s
Iteration  27: 49.024 ops/s
Iteration  28: 47.659 ops/s
Iteration  29: 48.913 ops/s
Iteration  30: 48.401 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  48.437 ±(99.9%) 0.604 ops/s [Average]
  (min, avg, max) = (46.803, 48.437, 50.013), stdev = 0.905
  CI (99.9%): [47.833, 49.042] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  48.437 ± 0.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 529469.728 ops/s
# Warmup Iteration   2: 565329.440 ops/s
# Warmup Iteration   3: 756673.678 ops/s
# Warmup Iteration   4: 766462.978 ops/s
# Warmup Iteration   5: 758014.869 ops/s
# Warmup Iteration   6: 762177.159 ops/s
# Warmup Iteration   7: 763666.589 ops/s
# Warmup Iteration   8: 764413.082 ops/s
# Warmup Iteration   9: 764735.549 ops/s
# Warmup Iteration  10: 760622.804 ops/s
# Warmup Iteration  11: 628822.431 ops/s
# Warmup Iteration  12: 755569.638 ops/s
# Warmup Iteration  13: 766243.020 ops/s
# Warmup Iteration  14: 768917.360 ops/s
# Warmup Iteration  15: 770809.028 ops/s
# Warmup Iteration  16: 774588.627 ops/s
# Warmup Iteration  17: 793406.891 ops/s
# Warmup Iteration  18: 805721.589 ops/s
# Warmup Iteration  19: 798978.042 ops/s
# Warmup Iteration  20: 807520.797 ops/s
# Warmup Iteration  21: 801120.248 ops/s
# Warmup Iteration  22: 800973.592 ops/s
# Warmup Iteration  23: 812424.963 ops/s
# Warmup Iteration  24: 811916.161 ops/s
# Warmup Iteration  25: 806897.839 ops/s
# Warmup Iteration  26: 807938.862 ops/s
# Warmup Iteration  27: 810861.500 ops/s
# Warmup Iteration  28: 807338.786 ops/s
# Warmup Iteration  29: 803179.755 ops/s
# Warmup Iteration  30: 806924.050 ops/s
Iteration   1: 788759.737 ops/s
Iteration   2: 800860.801 ops/s
Iteration   3: 804342.219 ops/s
Iteration   4: 797472.974 ops/s
Iteration   5: 792970.166 ops/s
Iteration   6: 794309.894 ops/s
Iteration   7: 804770.281 ops/s
Iteration   8: 802230.765 ops/s
Iteration   9: 806334.913 ops/s
Iteration  10: 799196.900 ops/s
Iteration  11: 798939.688 ops/s
Iteration  12: 806846.158 ops/s
Iteration  13: 796662.241 ops/s
Iteration  14: 787278.640 ops/s
Iteration  15: 795136.587 ops/s
Iteration  16: 804901.757 ops/s
Iteration  17: 803727.653 ops/s
Iteration  18: 797422.562 ops/s
Iteration  19: 759106.401 ops/s
Iteration  20: 779404.543 ops/s
Iteration  21: 812668.341 ops/s
Iteration  22: 808983.019 ops/s
Iteration  23: 808634.506 ops/s
Iteration  24: 760587.940 ops/s
Iteration  25: 759389.488 ops/s
Iteration  26: 750770.899 ops/s
Iteration  27: 751144.768 ops/s
Iteration  28: 765486.704 ops/s
Iteration  29: 752544.485 ops/s
Iteration  30: 759511.693 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_listIterator":
  788346.558 ±(99.9%) 13605.002 ops/s [Average]
  (min, avg, max) = (750770.899, 788346.558, 812668.341), stdev = 20363.327
  CI (99.9%): [774741.556, 801951.559] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_listIterator  thrpt   30  788346.558 ± 13605.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1214583.032 ops/s
# Warmup Iteration   2: 2625411.571 ops/s
# Warmup Iteration   3: 2532656.086 ops/s
# Warmup Iteration   4: 2552298.743 ops/s
# Warmup Iteration   5: 2162446.150 ops/s
# Warmup Iteration   6: 2582485.180 ops/s
# Warmup Iteration   7: 2618245.145 ops/s
# Warmup Iteration   8: 2657964.621 ops/s
# Warmup Iteration   9: 2703020.478 ops/s
# Warmup Iteration  10: 2639829.171 ops/s
# Warmup Iteration  11: 2623866.950 ops/s
# Warmup Iteration  12: 2680009.900 ops/s
# Warmup Iteration  13: 2675737.873 ops/s
# Warmup Iteration  14: 2667464.858 ops/s
# Warmup Iteration  15: 2578385.583 ops/s
# Warmup Iteration  16: 2649518.279 ops/s
# Warmup Iteration  17: 2694560.072 ops/s
# Warmup Iteration  18: 2564495.908 ops/s
# Warmup Iteration  19: 2581850.174 ops/s
# Warmup Iteration  20: 2495402.706 ops/s
# Warmup Iteration  21: 2568978.889 ops/s
# Warmup Iteration  22: 2650447.099 ops/s
# Warmup Iteration  23: 2669717.805 ops/s
# Warmup Iteration  24: 2542981.611 ops/s
# Warmup Iteration  25: 2638915.791 ops/s
# Warmup Iteration  26: 2661047.198 ops/s
# Warmup Iteration  27: 2654370.188 ops/s
# Warmup Iteration  28: 2650286.678 ops/s
# Warmup Iteration  29: 2665611.148 ops/s
# Warmup Iteration  30: 2633610.564 ops/s
Iteration   1: 2649103.681 ops/s
Iteration   2: 2667740.415 ops/s
Iteration   3: 2642563.088 ops/s
Iteration   4: 2611299.046 ops/s
Iteration   5: 2645095.593 ops/s
Iteration   6: 2645430.884 ops/s
Iteration   7: 2653342.310 ops/s
Iteration   8: 2665828.230 ops/s
Iteration   9: 2667941.455 ops/s
Iteration  10: 2646141.691 ops/s
Iteration  11: 2567016.151 ops/s
Iteration  12: 2554033.089 ops/s
Iteration  13: 2553660.109 ops/s
Iteration  14: 2685574.130 ops/s
Iteration  15: 2676168.085 ops/s
Iteration  16: 2658185.401 ops/s
Iteration  17: 2638814.417 ops/s
Iteration  18: 2673477.119 ops/s
Iteration  19: 2643663.506 ops/s
Iteration  20: 2660996.835 ops/s
Iteration  21: 2671130.553 ops/s
Iteration  22: 2644119.476 ops/s
Iteration  23: 2585323.891 ops/s
Iteration  24: 2685487.419 ops/s
Iteration  25: 2703080.162 ops/s
Iteration  26: 2715031.062 ops/s
Iteration  27: 2679432.414 ops/s
Iteration  28: 2679798.598 ops/s
Iteration  29: 2648749.858 ops/s
Iteration  30: 2659981.907 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeString":
  2649273.686 ±(99.9%) 26479.647 ops/s [Average]
  (min, avg, max) = (2553660.109, 2649273.686, 2715031.062), stdev = 39633.491
  CI (99.9%): [2622794.039, 2675753.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_makeString  thrpt   30  2649273.686 ± 26479.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 871240.581 ops/s
# Warmup Iteration   2: 2183270.864 ops/s
# Warmup Iteration   3: 2193978.444 ops/s
# Warmup Iteration   4: 1819860.626 ops/s
# Warmup Iteration   5: 2178218.590 ops/s
# Warmup Iteration   6: 2219409.933 ops/s
# Warmup Iteration   7: 2172666.022 ops/s
# Warmup Iteration   8: 2197800.391 ops/s
# Warmup Iteration   9: 2172783.934 ops/s
# Warmup Iteration  10: 2187621.840 ops/s
# Warmup Iteration  11: 2161673.282 ops/s
# Warmup Iteration  12: 2171319.522 ops/s
# Warmup Iteration  13: 2192616.899 ops/s
# Warmup Iteration  14: 2200844.857 ops/s
# Warmup Iteration  15: 2187934.311 ops/s
# Warmup Iteration  16: 2202533.843 ops/s
# Warmup Iteration  17: 2174768.816 ops/s
# Warmup Iteration  18: 2187477.342 ops/s
# Warmup Iteration  19: 2196946.817 ops/s
# Warmup Iteration  20: 2159986.870 ops/s
# Warmup Iteration  21: 2201738.911 ops/s
# Warmup Iteration  22: 2167264.967 ops/s
# Warmup Iteration  23: 2163760.278 ops/s
# Warmup Iteration  24: 2097658.927 ops/s
# Warmup Iteration  25: 2181368.147 ops/s
# Warmup Iteration  26: 2204198.356 ops/s
# Warmup Iteration  27: 2193258.050 ops/s
# Warmup Iteration  28: 2210550.326 ops/s
# Warmup Iteration  29: 2196953.488 ops/s
# Warmup Iteration  30: 2176618.962 ops/s
Iteration   1: 2155253.906 ops/s
Iteration   2: 2142990.891 ops/s
Iteration   3: 2104709.246 ops/s
Iteration   4: 2087072.760 ops/s
Iteration   5: 2188399.596 ops/s
Iteration   6: 2062885.977 ops/s
Iteration   7: 2181414.087 ops/s
Iteration   8: 2160722.308 ops/s
Iteration   9: 2072050.623 ops/s
Iteration  10: 2075121.351 ops/s
Iteration  11: 2126404.689 ops/s
Iteration  12: 2119367.768 ops/s
Iteration  13: 2110512.824 ops/s
Iteration  14: 2102276.513 ops/s
Iteration  15: 2057755.313 ops/s
Iteration  16: 2061866.128 ops/s
Iteration  17: 2128973.909 ops/s
Iteration  18: 2199878.004 ops/s
Iteration  19: 2203048.899 ops/s
Iteration  20: 2205894.241 ops/s
Iteration  21: 2206649.156 ops/s
Iteration  22: 2132718.872 ops/s
Iteration  23: 2102580.028 ops/s
Iteration  24: 2107011.799 ops/s
Iteration  25: 2125681.709 ops/s
Iteration  26: 2169079.059 ops/s
Iteration  27: 2107923.406 ops/s
Iteration  28: 2164257.445 ops/s
Iteration  29: 2076003.717 ops/s
Iteration  30: 2135202.375 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2129123.553 ±(99.9%) 30783.697 ops/s [Average]
  (min, avg, max) = (2057755.313, 2129123.553, 2206649.156), stdev = 46075.592
  CI (99.9%): [2098339.856, 2159907.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2129123.553 ± 30783.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948422.983 ops/s
# Warmup Iteration   2: 2204292.919 ops/s
# Warmup Iteration   3: 2153554.709 ops/s
# Warmup Iteration   4: 1774127.863 ops/s
# Warmup Iteration   5: 2098000.270 ops/s
# Warmup Iteration   6: 2095902.862 ops/s
# Warmup Iteration   7: 2102327.304 ops/s
# Warmup Iteration   8: 2141916.613 ops/s
# Warmup Iteration   9: 2163923.090 ops/s
# Warmup Iteration  10: 2141765.508 ops/s
# Warmup Iteration  11: 2139117.879 ops/s
# Warmup Iteration  12: 2089211.687 ops/s
# Warmup Iteration  13: 2162650.532 ops/s
# Warmup Iteration  14: 2211882.767 ops/s
# Warmup Iteration  15: 2197939.271 ops/s
# Warmup Iteration  16: 2091685.740 ops/s
# Warmup Iteration  17: 2141867.002 ops/s
# Warmup Iteration  18: 2147524.348 ops/s
# Warmup Iteration  19: 2164521.031 ops/s
# Warmup Iteration  20: 2194180.281 ops/s
# Warmup Iteration  21: 2208969.866 ops/s
# Warmup Iteration  22: 2088992.583 ops/s
# Warmup Iteration  23: 2092468.268 ops/s
# Warmup Iteration  24: 2094517.296 ops/s
# Warmup Iteration  25: 2200781.927 ops/s
# Warmup Iteration  26: 2095782.070 ops/s
# Warmup Iteration  27: 2186918.681 ops/s
# Warmup Iteration  28: 2175755.514 ops/s
# Warmup Iteration  29: 2163614.773 ops/s
# Warmup Iteration  30: 2217421.146 ops/s
Iteration   1: 2189612.308 ops/s
Iteration   2: 2208302.388 ops/s
Iteration   3: 2220900.664 ops/s
Iteration   4: 2175262.467 ops/s
Iteration   5: 2091712.664 ops/s
Iteration   6: 2091469.288 ops/s
Iteration   7: 2185089.800 ops/s
Iteration   8: 2081201.949 ops/s
Iteration   9: 2164920.496 ops/s
Iteration  10: 2167086.810 ops/s
Iteration  11: 2125113.342 ops/s
Iteration  12: 2115415.830 ops/s
Iteration  13: 2159564.568 ops/s
Iteration  14: 2179969.966 ops/s
Iteration  15: 2101869.998 ops/s
Iteration  16: 2211312.355 ops/s
Iteration  17: 2177136.715 ops/s
Iteration  18: 2193689.305 ops/s
Iteration  19: 2202094.249 ops/s
Iteration  20: 2203625.601 ops/s
Iteration  21: 2182294.656 ops/s
Iteration  22: 2185534.119 ops/s
Iteration  23: 2177512.489 ops/s
Iteration  24: 2128268.495 ops/s
Iteration  25: 2186976.860 ops/s
Iteration  26: 2170807.835 ops/s
Iteration  27: 2187735.044 ops/s
Iteration  28: 2196900.330 ops/s
Iteration  29: 2215321.062 ops/s
Iteration  30: 2234819.226 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2170384.029 ±(99.9%) 27464.654 ops/s [Average]
  (min, avg, max) = (2081201.949, 2170384.029, 2234819.226), stdev = 41107.804
  CI (99.9%): [2142919.376, 2197848.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2170384.029 ± 27464.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1919670.294 ops/s
# Warmup Iteration   2: 4269211.611 ops/s
# Warmup Iteration   3: 4389484.201 ops/s
# Warmup Iteration   4: 4448894.132 ops/s
# Warmup Iteration   5: 3594900.140 ops/s
# Warmup Iteration   6: 4442260.429 ops/s
# Warmup Iteration   7: 4499742.194 ops/s
# Warmup Iteration   8: 4316476.874 ops/s
# Warmup Iteration   9: 4514371.607 ops/s
# Warmup Iteration  10: 4493993.975 ops/s
# Warmup Iteration  11: 4408779.042 ops/s
# Warmup Iteration  12: 4369808.183 ops/s
# Warmup Iteration  13: 4533489.903 ops/s
# Warmup Iteration  14: 4384017.668 ops/s
# Warmup Iteration  15: 4525382.240 ops/s
# Warmup Iteration  16: 4518686.384 ops/s
# Warmup Iteration  17: 4574223.708 ops/s
# Warmup Iteration  18: 4481017.993 ops/s
# Warmup Iteration  19: 4425031.338 ops/s
# Warmup Iteration  20: 4516898.105 ops/s
# Warmup Iteration  21: 4410170.797 ops/s
# Warmup Iteration  22: 4533863.063 ops/s
# Warmup Iteration  23: 4472281.297 ops/s
# Warmup Iteration  24: 4423902.230 ops/s
# Warmup Iteration  25: 4663039.959 ops/s
# Warmup Iteration  26: 4663088.003 ops/s
# Warmup Iteration  27: 4622668.204 ops/s
# Warmup Iteration  28: 4632640.752 ops/s
# Warmup Iteration  29: 4666335.930 ops/s
# Warmup Iteration  30: 4636513.401 ops/s
Iteration   1: 4672135.688 ops/s
Iteration   2: 4671287.078 ops/s
Iteration   3: 4663088.239 ops/s
Iteration   4: 4515755.830 ops/s
Iteration   5: 4281069.598 ops/s
Iteration   6: 4441820.370 ops/s
Iteration   7: 4409925.555 ops/s
Iteration   8: 4343326.393 ops/s
Iteration   9: 4470979.944 ops/s
Iteration  10: 4530206.139 ops/s
Iteration  11: 4440290.920 ops/s
Iteration  12: 4539084.206 ops/s
Iteration  13: 4549203.714 ops/s
Iteration  14: 4419957.570 ops/s
Iteration  15: 4496301.552 ops/s
Iteration  16: 4670365.129 ops/s
Iteration  17: 4655453.863 ops/s
Iteration  18: 4662368.690 ops/s
Iteration  19: 4592174.123 ops/s
Iteration  20: 4438812.234 ops/s
Iteration  21: 4425688.658 ops/s
Iteration  22: 4402063.114 ops/s
Iteration  23: 4344396.089 ops/s
Iteration  24: 4396323.980 ops/s
Iteration  25: 4449950.488 ops/s
Iteration  26: 4501737.710 ops/s
Iteration  27: 4358071.587 ops/s
Iteration  28: 4407115.297 ops/s
Iteration  29: 4539182.422 ops/s
Iteration  30: 4562220.212 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max":
  4495011.880 ±(99.9%) 74778.485 ops/s [Average]
  (min, avg, max) = (4281069.598, 4495011.880, 4672135.688), stdev = 111924.924
  CI (99.9%): [4420233.395, 4569790.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max  thrpt   30  4495011.880 ± 74778.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1692228.273 ops/s
# Warmup Iteration   2: 4125089.840 ops/s
# Warmup Iteration   3: 4134217.876 ops/s
# Warmup Iteration   4: 3406317.180 ops/s
# Warmup Iteration   5: 4133196.593 ops/s
# Warmup Iteration   6: 4081384.942 ops/s
# Warmup Iteration   7: 4125843.914 ops/s
# Warmup Iteration   8: 4176895.543 ops/s
# Warmup Iteration   9: 4165245.535 ops/s
# Warmup Iteration  10: 4090427.163 ops/s
# Warmup Iteration  11: 4068396.993 ops/s
# Warmup Iteration  12: 4136945.007 ops/s
# Warmup Iteration  13: 4132128.283 ops/s
# Warmup Iteration  14: 4131971.188 ops/s
# Warmup Iteration  15: 4118456.665 ops/s
# Warmup Iteration  16: 4189441.697 ops/s
# Warmup Iteration  17: 4108810.150 ops/s
# Warmup Iteration  18: 4130624.319 ops/s
# Warmup Iteration  19: 4131974.059 ops/s
# Warmup Iteration  20: 4159316.043 ops/s
# Warmup Iteration  21: 4138713.886 ops/s
# Warmup Iteration  22: 4136416.284 ops/s
# Warmup Iteration  23: 4143454.267 ops/s
# Warmup Iteration  24: 4113215.689 ops/s
# Warmup Iteration  25: 4089814.723 ops/s
# Warmup Iteration  26: 3909801.247 ops/s
# Warmup Iteration  27: 4058563.819 ops/s
# Warmup Iteration  28: 4059664.698 ops/s
# Warmup Iteration  29: 4154288.011 ops/s
# Warmup Iteration  30: 4099876.428 ops/s
Iteration   1: 3996972.804 ops/s
Iteration   2: 4146443.048 ops/s
Iteration   3: 4138943.135 ops/s
Iteration   4: 4143787.994 ops/s
Iteration   5: 4174633.939 ops/s
Iteration   6: 4133761.933 ops/s
Iteration   7: 4133088.479 ops/s
Iteration   8: 4133551.220 ops/s
Iteration   9: 4164821.174 ops/s
Iteration  10: 4143536.885 ops/s
Iteration  11: 4081948.143 ops/s
Iteration  12: 4120307.675 ops/s
Iteration  13: 4147961.577 ops/s
Iteration  14: 4196160.049 ops/s
Iteration  15: 4151311.517 ops/s
Iteration  16: 4134584.909 ops/s
Iteration  17: 4134940.601 ops/s
Iteration  18: 4148818.775 ops/s
Iteration  19: 4178137.929 ops/s
Iteration  20: 4179521.593 ops/s
Iteration  21: 4174048.692 ops/s
Iteration  22: 4139007.233 ops/s
Iteration  23: 4159000.406 ops/s
Iteration  24: 4172847.220 ops/s
Iteration  25: 4198713.335 ops/s
Iteration  26: 4163075.970 ops/s
Iteration  27: 4154900.292 ops/s
Iteration  28: 4145354.060 ops/s
Iteration  29: 4187572.190 ops/s
Iteration  30: 4104143.311 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy":
  4146063.203 ±(99.9%) 25425.554 ops/s [Average]
  (min, avg, max) = (3996972.804, 4146063.203, 4198713.335), stdev = 38055.775
  CI (99.9%): [4120637.649, 4171488.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_maxBy  thrpt   30  4146063.203 ± 25425.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1245774.382 ops/s
# Warmup Iteration   2: 2781183.714 ops/s
# Warmup Iteration   3: 2777338.109 ops/s
# Warmup Iteration   4: 2327964.627 ops/s
# Warmup Iteration   5: 2829108.721 ops/s
# Warmup Iteration   6: 2798177.080 ops/s
# Warmup Iteration   7: 2729777.012 ops/s
# Warmup Iteration   8: 2739485.897 ops/s
# Warmup Iteration   9: 2816664.966 ops/s
# Warmup Iteration  10: 2799534.523 ops/s
# Warmup Iteration  11: 2788798.513 ops/s
# Warmup Iteration  12: 2716484.589 ops/s
# Warmup Iteration  13: 2808831.655 ops/s
# Warmup Iteration  14: 2792511.649 ops/s
# Warmup Iteration  15: 2809861.397 ops/s
# Warmup Iteration  16: 2803192.788 ops/s
# Warmup Iteration  17: 2729699.732 ops/s
# Warmup Iteration  18: 2749846.979 ops/s
# Warmup Iteration  19: 2713526.645 ops/s
# Warmup Iteration  20: 2742670.856 ops/s
# Warmup Iteration  21: 2794340.691 ops/s
# Warmup Iteration  22: 2764927.972 ops/s
# Warmup Iteration  23: 2780395.560 ops/s
# Warmup Iteration  24: 2827910.435 ops/s
# Warmup Iteration  25: 2794115.775 ops/s
# Warmup Iteration  26: 2795115.781 ops/s
# Warmup Iteration  27: 2824717.045 ops/s
# Warmup Iteration  28: 2794251.225 ops/s
# Warmup Iteration  29: 2787272.675 ops/s
# Warmup Iteration  30: 2768819.955 ops/s
Iteration   1: 2756460.534 ops/s
Iteration   2: 2799285.617 ops/s
Iteration   3: 2823009.304 ops/s
Iteration   4: 2841101.561 ops/s
Iteration   5: 2836418.011 ops/s
Iteration   6: 2801899.215 ops/s
Iteration   7: 2815976.404 ops/s
Iteration   8: 2810137.085 ops/s
Iteration   9: 2791632.424 ops/s
Iteration  10: 2752745.335 ops/s
Iteration  11: 2778198.414 ops/s
Iteration  12: 2783378.794 ops/s
Iteration  13: 2769675.415 ops/s
Iteration  14: 2826430.850 ops/s
Iteration  15: 2854068.758 ops/s
Iteration  16: 2846003.891 ops/s
Iteration  17: 2795520.436 ops/s
Iteration  18: 2829328.584 ops/s
Iteration  19: 2769696.223 ops/s
Iteration  20: 2757649.127 ops/s
Iteration  21: 2786408.833 ops/s
Iteration  22: 2811368.192 ops/s
Iteration  23: 2755062.144 ops/s
Iteration  24: 2790052.820 ops/s
Iteration  25: 2746976.834 ops/s
Iteration  26: 2798740.897 ops/s
Iteration  27: 2802110.345 ops/s
Iteration  28: 2790906.981 ops/s
Iteration  29: 2779057.684 ops/s
Iteration  30: 2803440.935 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxByOptional":
  2796758.055 ±(99.9%) 19449.075 ops/s [Average]
  (min, avg, max) = (2746976.834, 2796758.055, 2854068.758), stdev = 29110.462
  CI (99.9%): [2777308.980, 2816207.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  2796758.055 ± 19449.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1792161.205 ops/s
# Warmup Iteration   2: 4043712.806 ops/s
# Warmup Iteration   3: 4187980.894 ops/s
# Warmup Iteration   4: 4128776.948 ops/s
# Warmup Iteration   5: 3647594.407 ops/s
# Warmup Iteration   6: 4125377.924 ops/s
# Warmup Iteration   7: 4198820.396 ops/s
# Warmup Iteration   8: 4224074.961 ops/s
# Warmup Iteration   9: 4263929.973 ops/s
# Warmup Iteration  10: 4047480.812 ops/s
# Warmup Iteration  11: 4146072.808 ops/s
# Warmup Iteration  12: 4086426.039 ops/s
# Warmup Iteration  13: 4182501.260 ops/s
# Warmup Iteration  14: 4020710.471 ops/s
# Warmup Iteration  15: 4035265.952 ops/s
# Warmup Iteration  16: 4104291.975 ops/s
# Warmup Iteration  17: 4152723.888 ops/s
# Warmup Iteration  18: 4278777.323 ops/s
# Warmup Iteration  19: 4097144.661 ops/s
# Warmup Iteration  20: 4032456.949 ops/s
# Warmup Iteration  21: 4025800.720 ops/s
# Warmup Iteration  22: 3992868.700 ops/s
# Warmup Iteration  23: 4112374.668 ops/s
# Warmup Iteration  24: 4071073.330 ops/s
# Warmup Iteration  25: 4030290.464 ops/s
# Warmup Iteration  26: 4161253.268 ops/s
# Warmup Iteration  27: 4004939.658 ops/s
# Warmup Iteration  28: 4193639.287 ops/s
# Warmup Iteration  29: 4273864.012 ops/s
# Warmup Iteration  30: 4121686.945 ops/s
Iteration   1: 4267502.518 ops/s
Iteration   2: 4201726.724 ops/s
Iteration   3: 4212877.092 ops/s
Iteration   4: 4173576.186 ops/s
Iteration   5: 4120530.402 ops/s
Iteration   6: 4213951.354 ops/s
Iteration   7: 4206788.564 ops/s
Iteration   8: 4178947.753 ops/s
Iteration   9: 4191816.104 ops/s
Iteration  10: 4210451.711 ops/s
Iteration  11: 4142587.363 ops/s
Iteration  12: 4171436.186 ops/s
Iteration  13: 4157866.953 ops/s
Iteration  14: 4219452.398 ops/s
Iteration  15: 4217418.774 ops/s
Iteration  16: 4050066.235 ops/s
Iteration  17: 4132860.430 ops/s
Iteration  18: 4118158.312 ops/s
Iteration  19: 4081430.137 ops/s
Iteration  20: 4250034.130 ops/s
Iteration  21: 4273488.870 ops/s
Iteration  22: 4131099.160 ops/s
Iteration  23: 4039843.610 ops/s
Iteration  24: 4195920.176 ops/s
Iteration  25: 4202228.885 ops/s
Iteration  26: 4231889.947 ops/s
Iteration  27: 4264248.167 ops/s
Iteration  28: 4239497.359 ops/s
Iteration  29: 4263612.430 ops/s
Iteration  30: 4238694.157 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxBy_null_throws":
  4186666.736 ±(99.9%) 41548.290 ops/s [Average]
  (min, avg, max) = (4039843.610, 4186666.736, 4273488.870), stdev = 62187.529
  CI (99.9%): [4145118.447, 4228215.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  4186666.736 ± 41548.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612311.066 ops/s
# Warmup Iteration   2: 1445032.598 ops/s
# Warmup Iteration   3: 1531193.751 ops/s
# Warmup Iteration   4: 1280379.986 ops/s
# Warmup Iteration   5: 1498366.252 ops/s
# Warmup Iteration   6: 1516035.947 ops/s
# Warmup Iteration   7: 1529785.462 ops/s
# Warmup Iteration   8: 1525055.278 ops/s
# Warmup Iteration   9: 1517965.837 ops/s
# Warmup Iteration  10: 1485615.928 ops/s
# Warmup Iteration  11: 1508037.610 ops/s
# Warmup Iteration  12: 1510159.595 ops/s
# Warmup Iteration  13: 1540563.973 ops/s
# Warmup Iteration  14: 1521465.790 ops/s
# Warmup Iteration  15: 1528453.417 ops/s
# Warmup Iteration  16: 1523381.173 ops/s
# Warmup Iteration  17: 1512321.277 ops/s
# Warmup Iteration  18: 1529556.875 ops/s
# Warmup Iteration  19: 1515729.258 ops/s
# Warmup Iteration  20: 1509612.652 ops/s
# Warmup Iteration  21: 1496584.219 ops/s
# Warmup Iteration  22: 1528769.950 ops/s
# Warmup Iteration  23: 1524621.054 ops/s
# Warmup Iteration  24: 1529340.723 ops/s
# Warmup Iteration  25: 1533898.269 ops/s
# Warmup Iteration  26: 1535015.223 ops/s
# Warmup Iteration  27: 1506560.719 ops/s
# Warmup Iteration  28: 1517305.781 ops/s
# Warmup Iteration  29: 1531204.381 ops/s
# Warmup Iteration  30: 1529741.541 ops/s
Iteration   1: 1539678.505 ops/s
Iteration   2: 1506356.473 ops/s
Iteration   3: 1517283.271 ops/s
Iteration   4: 1474318.416 ops/s
Iteration   5: 1492294.447 ops/s
Iteration   6: 1528093.641 ops/s
Iteration   7: 1537531.254 ops/s
Iteration   8: 1523760.038 ops/s
Iteration   9: 1487683.862 ops/s
Iteration  10: 1509243.349 ops/s
Iteration  11: 1496511.877 ops/s
Iteration  12: 1519161.648 ops/s
Iteration  13: 1539847.998 ops/s
Iteration  14: 1525547.273 ops/s
Iteration  15: 1514270.771 ops/s
Iteration  16: 1462631.934 ops/s
Iteration  17: 1443418.057 ops/s
Iteration  18: 1477670.717 ops/s
Iteration  19: 1483401.576 ops/s
Iteration  20: 1518196.384 ops/s
Iteration  21: 1504056.593 ops/s
Iteration  22: 1477807.448 ops/s
Iteration  23: 1513473.734 ops/s
Iteration  24: 1528278.781 ops/s
Iteration  25: 1498150.387 ops/s
Iteration  26: 1529006.769 ops/s
Iteration  27: 1527099.495 ops/s
Iteration  28: 1525434.184 ops/s
Iteration  29: 1517753.323 ops/s
Iteration  30: 1516324.191 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_maxOptional":
  1507809.547 ±(99.9%) 15997.628 ops/s [Average]
  (min, avg, max) = (1443418.057, 1507809.547, 1539847.998), stdev = 23944.498
  CI (99.9%): [1491811.919, 1523807.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1507809.547 ± 15997.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630745.767 ops/s
# Warmup Iteration   2: 674570.474 ops/s
# Warmup Iteration   3: 919743.312 ops/s
# Warmup Iteration   4: 922090.589 ops/s
# Warmup Iteration   5: 917508.786 ops/s
# Warmup Iteration   6: 924306.699 ops/s
# Warmup Iteration   7: 929510.841 ops/s
# Warmup Iteration   8: 933238.167 ops/s
# Warmup Iteration   9: 929238.852 ops/s
# Warmup Iteration  10: 921209.691 ops/s
# Warmup Iteration  11: 769249.761 ops/s
# Warmup Iteration  12: 924759.609 ops/s
# Warmup Iteration  13: 922820.692 ops/s
# Warmup Iteration  14: 922041.422 ops/s
# Warmup Iteration  15: 918485.654 ops/s
# Warmup Iteration  16: 900131.605 ops/s
# Warmup Iteration  17: 971158.270 ops/s
# Warmup Iteration  18: 958760.747 ops/s
# Warmup Iteration  19: 958568.369 ops/s
# Warmup Iteration  20: 969173.970 ops/s
# Warmup Iteration  21: 965278.438 ops/s
# Warmup Iteration  22: 966755.417 ops/s
# Warmup Iteration  23: 969534.373 ops/s
# Warmup Iteration  24: 956457.883 ops/s
# Warmup Iteration  25: 965772.679 ops/s
# Warmup Iteration  26: 972469.846 ops/s
# Warmup Iteration  27: 969336.411 ops/s
# Warmup Iteration  28: 959967.888 ops/s
# Warmup Iteration  29: 953490.942 ops/s
# Warmup Iteration  30: 935078.193 ops/s
Iteration   1: 971295.029 ops/s
Iteration   2: 968187.313 ops/s
Iteration   3: 962788.639 ops/s
Iteration   4: 971731.716 ops/s
Iteration   5: 970612.309 ops/s
Iteration   6: 976022.257 ops/s
Iteration   7: 960274.685 ops/s
Iteration   8: 972515.584 ops/s
Iteration   9: 975222.291 ops/s
Iteration  10: 960475.437 ops/s
Iteration  11: 969096.669 ops/s
Iteration  12: 962896.813 ops/s
Iteration  13: 972028.175 ops/s
Iteration  14: 968258.049 ops/s
Iteration  15: 968426.243 ops/s
Iteration  16: 975141.076 ops/s
Iteration  17: 974519.914 ops/s
Iteration  18: 974530.734 ops/s
Iteration  19: 972045.175 ops/s
Iteration  20: 968881.138 ops/s
Iteration  21: 969831.014 ops/s
Iteration  22: 967665.616 ops/s
Iteration  23: 970647.727 ops/s
Iteration  24: 974749.806 ops/s
Iteration  25: 933153.478 ops/s
Iteration  26: 958605.781 ops/s
Iteration  27: 966155.021 ops/s
Iteration  28: 948120.434 ops/s
Iteration  29: 959367.587 ops/s
Iteration  30: 955516.143 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_empty_throws":
  966625.395 ±(99.9%) 6128.217 ops/s [Average]
  (min, avg, max) = (933153.478, 966625.395, 976022.257), stdev = 9172.427
  CI (99.9%): [960497.178, 972753.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  966625.395 ± 6128.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1680135.014 ops/s
# Warmup Iteration   2: 3321754.358 ops/s
# Warmup Iteration   3: 3561929.205 ops/s
# Warmup Iteration   4: 3594027.892 ops/s
# Warmup Iteration   5: 3034247.257 ops/s
# Warmup Iteration   6: 3584677.315 ops/s
# Warmup Iteration   7: 3592372.994 ops/s
# Warmup Iteration   8: 3549567.765 ops/s
# Warmup Iteration   9: 3661574.525 ops/s
# Warmup Iteration  10: 3556135.057 ops/s
# Warmup Iteration  11: 3563343.996 ops/s
# Warmup Iteration  12: 3518448.531 ops/s
# Warmup Iteration  13: 3435402.834 ops/s
# Warmup Iteration  14: 3502354.810 ops/s
# Warmup Iteration  15: 3540282.589 ops/s
# Warmup Iteration  16: 3622484.611 ops/s
# Warmup Iteration  17: 3600030.322 ops/s
# Warmup Iteration  18: 3466747.627 ops/s
# Warmup Iteration  19: 3394842.146 ops/s
# Warmup Iteration  20: 3400894.381 ops/s
# Warmup Iteration  21: 3529188.428 ops/s
# Warmup Iteration  22: 3579266.193 ops/s
# Warmup Iteration  23: 3579570.232 ops/s
# Warmup Iteration  24: 3483597.026 ops/s
# Warmup Iteration  25: 3571332.835 ops/s
# Warmup Iteration  26: 3599836.172 ops/s
# Warmup Iteration  27: 3556504.660 ops/s
# Warmup Iteration  28: 3567301.308 ops/s
# Warmup Iteration  29: 3574697.796 ops/s
# Warmup Iteration  30: 3572836.743 ops/s
Iteration   1: 3588848.249 ops/s
Iteration   2: 3519014.773 ops/s
Iteration   3: 3599489.674 ops/s
Iteration   4: 3617898.647 ops/s
Iteration   5: 3544558.482 ops/s
Iteration   6: 3461877.783 ops/s
Iteration   7: 3450069.921 ops/s
Iteration   8: 3563707.787 ops/s
Iteration   9: 3405664.222 ops/s
Iteration  10: 3615985.490 ops/s
Iteration  11: 3437592.416 ops/s
Iteration  12: 3642737.041 ops/s
Iteration  13: 3547209.778 ops/s
Iteration  14: 3562764.178 ops/s
Iteration  15: 3382016.631 ops/s
Iteration  16: 3494453.822 ops/s
Iteration  17: 3421245.176 ops/s
Iteration  18: 3583963.958 ops/s
Iteration  19: 3596324.703 ops/s
Iteration  20: 3620484.604 ops/s
Iteration  21: 3553715.299 ops/s
Iteration  22: 3554669.434 ops/s
Iteration  23: 3588058.195 ops/s
Iteration  24: 3570064.455 ops/s
Iteration  25: 3556515.655 ops/s
Iteration  26: 3540987.771 ops/s
Iteration  27: 3560721.347 ops/s
Iteration  28: 3497350.056 ops/s
Iteration  29: 3474255.087 ops/s
Iteration  30: 3547551.740 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_safe":
  3536659.879 ±(99.9%) 45675.971 ops/s [Average]
  (min, avg, max) = (3382016.631, 3536659.879, 3642737.041), stdev = 68365.649
  CI (99.9%): [3490983.908, 3582335.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  3536659.879 ± 45675.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1460133.147 ops/s
# Warmup Iteration   2: 2370777.498 ops/s
# Warmup Iteration   3: 2813017.973 ops/s
# Warmup Iteration   4: 2761258.707 ops/s
# Warmup Iteration   5: 2806631.945 ops/s
# Warmup Iteration   6: 2693539.504 ops/s
# Warmup Iteration   7: 2495958.481 ops/s
# Warmup Iteration   8: 2844357.387 ops/s
# Warmup Iteration   9: 2846684.113 ops/s
# Warmup Iteration  10: 2833968.873 ops/s
# Warmup Iteration  11: 2855839.243 ops/s
# Warmup Iteration  12: 2846179.672 ops/s
# Warmup Iteration  13: 2839434.050 ops/s
# Warmup Iteration  14: 2835903.191 ops/s
# Warmup Iteration  15: 2844848.061 ops/s
# Warmup Iteration  16: 2811594.035 ops/s
# Warmup Iteration  17: 2844108.458 ops/s
# Warmup Iteration  18: 2743533.724 ops/s
# Warmup Iteration  19: 2790316.066 ops/s
# Warmup Iteration  20: 2793146.248 ops/s
# Warmup Iteration  21: 2869503.966 ops/s
# Warmup Iteration  22: 2869275.187 ops/s
# Warmup Iteration  23: 2847929.236 ops/s
# Warmup Iteration  24: 2808448.854 ops/s
# Warmup Iteration  25: 2829567.985 ops/s
# Warmup Iteration  26: 2846036.369 ops/s
# Warmup Iteration  27: 2847577.528 ops/s
# Warmup Iteration  28: 2851629.210 ops/s
# Warmup Iteration  29: 2858232.267 ops/s
# Warmup Iteration  30: 2823064.587 ops/s
Iteration   1: 2820655.311 ops/s
Iteration   2: 2837997.123 ops/s
Iteration   3: 2765349.570 ops/s
Iteration   4: 2710922.384 ops/s
Iteration   5: 2795367.815 ops/s
Iteration   6: 2692996.370 ops/s
Iteration   7: 2729491.250 ops/s
Iteration   8: 2714306.244 ops/s
Iteration   9: 2734669.969 ops/s
Iteration  10: 2688067.108 ops/s
Iteration  11: 2719122.972 ops/s
Iteration  12: 2743642.752 ops/s
Iteration  13: 2805398.934 ops/s
Iteration  14: 2779676.834 ops/s
Iteration  15: 2842617.952 ops/s
Iteration  16: 2832617.386 ops/s
Iteration  17: 2852683.262 ops/s
Iteration  18: 2789587.531 ops/s
Iteration  19: 2810331.694 ops/s
Iteration  20: 2794164.009 ops/s
Iteration  21: 2852989.599 ops/s
Iteration  22: 2833865.700 ops/s
Iteration  23: 2820161.660 ops/s
Iteration  24: 2768250.967 ops/s
Iteration  25: 2879959.759 ops/s
Iteration  26: 2783086.776 ops/s
Iteration  27: 2836937.222 ops/s
Iteration  28: 2868453.303 ops/s
Iteration  29: 2820249.516 ops/s
Iteration  30: 2674217.004 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws":
  2786594.599 ±(99.9%) 38558.763 ops/s [Average]
  (min, avg, max) = (2674217.004, 2786594.599, 2879959.759), stdev = 57712.945
  CI (99.9%): [2748035.837, 2825153.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  2786594.599 ± 38558.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1489519.086 ops/s
# Warmup Iteration   2: 2440869.327 ops/s
# Warmup Iteration   3: 2917533.814 ops/s
# Warmup Iteration   4: 2968272.034 ops/s
# Warmup Iteration   5: 2893209.771 ops/s
# Warmup Iteration   6: 2473178.420 ops/s
# Warmup Iteration   7: 2814624.847 ops/s
# Warmup Iteration   8: 2943856.941 ops/s
# Warmup Iteration   9: 2925376.510 ops/s
# Warmup Iteration  10: 2929711.903 ops/s
# Warmup Iteration  11: 2941804.220 ops/s
# Warmup Iteration  12: 2922940.592 ops/s
# Warmup Iteration  13: 2946001.942 ops/s
# Warmup Iteration  14: 2939203.178 ops/s
# Warmup Iteration  15: 2917818.110 ops/s
# Warmup Iteration  16: 2932619.181 ops/s
# Warmup Iteration  17: 2943187.996 ops/s
# Warmup Iteration  18: 2942739.991 ops/s
# Warmup Iteration  19: 2889909.963 ops/s
# Warmup Iteration  20: 2904817.757 ops/s
# Warmup Iteration  21: 2958556.782 ops/s
# Warmup Iteration  22: 2899922.648 ops/s
# Warmup Iteration  23: 2915471.568 ops/s
# Warmup Iteration  24: 2891678.150 ops/s
# Warmup Iteration  25: 2836383.152 ops/s
# Warmup Iteration  26: 2966860.737 ops/s
# Warmup Iteration  27: 2956301.197 ops/s
# Warmup Iteration  28: 2969750.368 ops/s
# Warmup Iteration  29: 2958803.303 ops/s
# Warmup Iteration  30: 2943544.303 ops/s
Iteration   1: 2962335.819 ops/s
Iteration   2: 2867764.627 ops/s
Iteration   3: 2934605.665 ops/s
Iteration   4: 2939358.384 ops/s
Iteration   5: 2961204.395 ops/s
Iteration   6: 2965108.885 ops/s
Iteration   7: 2987804.350 ops/s
Iteration   8: 3014635.162 ops/s
Iteration   9: 3000791.065 ops/s
Iteration  10: 2993203.648 ops/s
Iteration  11: 2945223.664 ops/s
Iteration  12: 2940689.038 ops/s
Iteration  13: 2940756.736 ops/s
Iteration  14: 2984459.441 ops/s
Iteration  15: 3004263.395 ops/s
Iteration  16: 2903885.856 ops/s
Iteration  17: 2958296.267 ops/s
Iteration  18: 2911720.357 ops/s
Iteration  19: 2927453.111 ops/s
Iteration  20: 2976796.539 ops/s
Iteration  21: 2953568.567 ops/s
Iteration  22: 2982605.474 ops/s
Iteration  23: 2948508.541 ops/s
Iteration  24: 2901084.803 ops/s
Iteration  25: 2969579.016 ops/s
Iteration  26: 2970434.476 ops/s
Iteration  27: 2965082.097 ops/s
Iteration  28: 2937498.574 ops/s
Iteration  29: 2928884.379 ops/s
Iteration  30: 2935460.090 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  2953768.747 ±(99.9%) 22114.522 ops/s [Average]
  (min, avg, max) = (2867764.627, 2953768.747, 3014635.162), stdev = 33099.978
  CI (99.9%): [2931654.225, 2975883.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  2953768.747 ± 22114.522  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2008395.308 ops/s
# Warmup Iteration   2: 4355807.957 ops/s
# Warmup Iteration   3: 4591022.438 ops/s
# Warmup Iteration   4: 4430026.255 ops/s
# Warmup Iteration   5: 3901953.872 ops/s
# Warmup Iteration   6: 4597126.664 ops/s
# Warmup Iteration   7: 4714028.320 ops/s
# Warmup Iteration   8: 4555819.526 ops/s
# Warmup Iteration   9: 4580443.664 ops/s
# Warmup Iteration  10: 4693171.817 ops/s
# Warmup Iteration  11: 4582254.946 ops/s
# Warmup Iteration  12: 4531618.113 ops/s
# Warmup Iteration  13: 4357254.448 ops/s
# Warmup Iteration  14: 4325118.116 ops/s
# Warmup Iteration  15: 4436126.653 ops/s
# Warmup Iteration  16: 4551859.917 ops/s
# Warmup Iteration  17: 4541426.626 ops/s
# Warmup Iteration  18: 4692964.369 ops/s
# Warmup Iteration  19: 4689708.102 ops/s
# Warmup Iteration  20: 4657192.858 ops/s
# Warmup Iteration  21: 4675869.224 ops/s
# Warmup Iteration  22: 4564568.448 ops/s
# Warmup Iteration  23: 4628419.737 ops/s
# Warmup Iteration  24: 4592365.867 ops/s
# Warmup Iteration  25: 4583300.326 ops/s
# Warmup Iteration  26: 4659745.678 ops/s
# Warmup Iteration  27: 4681019.488 ops/s
# Warmup Iteration  28: 4606974.492 ops/s
# Warmup Iteration  29: 4517619.632 ops/s
# Warmup Iteration  30: 4631734.494 ops/s
Iteration   1: 4714811.422 ops/s
Iteration   2: 4757616.364 ops/s
Iteration   3: 4706101.758 ops/s
Iteration   4: 4512610.963 ops/s
Iteration   5: 4697419.262 ops/s
Iteration   6: 4613704.506 ops/s
Iteration   7: 4717401.827 ops/s
Iteration   8: 4614760.367 ops/s
Iteration   9: 4655659.584 ops/s
Iteration  10: 4594738.599 ops/s
Iteration  11: 4634993.834 ops/s
Iteration  12: 4729132.924 ops/s
Iteration  13: 4692155.341 ops/s
Iteration  14: 4721602.060 ops/s
Iteration  15: 4622649.672 ops/s
Iteration  16: 4586812.659 ops/s
Iteration  17: 4566077.138 ops/s
Iteration  18: 4592018.091 ops/s
Iteration  19: 4597565.685 ops/s
Iteration  20: 4521381.796 ops/s
Iteration  21: 4574526.777 ops/s
Iteration  22: 4659018.334 ops/s
Iteration  23: 4702137.885 ops/s
Iteration  24: 4678700.060 ops/s
Iteration  25: 4615277.912 ops/s
Iteration  26: 4566557.785 ops/s
Iteration  27: 4536517.140 ops/s
Iteration  28: 4513138.174 ops/s
Iteration  29: 4575603.862 ops/s
Iteration  30: 4572065.420 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_max_without_comparator":
  4628091.907 ±(99.9%) 47141.172 ops/s [Average]
  (min, avg, max) = (4512610.963, 4628091.907, 4757616.364), stdev = 70558.692
  CI (99.9%): [4580950.735, 4675233.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  4628091.907 ± 47141.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2018416.055 ops/s
# Warmup Iteration   2: 4394859.589 ops/s
# Warmup Iteration   3: 4520291.187 ops/s
# Warmup Iteration   4: 4448827.552 ops/s
# Warmup Iteration   5: 3895613.731 ops/s
# Warmup Iteration   6: 4588758.064 ops/s
# Warmup Iteration   7: 4553529.741 ops/s
# Warmup Iteration   8: 4610820.028 ops/s
# Warmup Iteration   9: 4596799.423 ops/s
# Warmup Iteration  10: 4677053.940 ops/s
# Warmup Iteration  11: 4571535.481 ops/s
# Warmup Iteration  12: 4623554.808 ops/s
# Warmup Iteration  13: 4546738.786 ops/s
# Warmup Iteration  14: 4428882.519 ops/s
# Warmup Iteration  15: 4520837.182 ops/s
# Warmup Iteration  16: 4604088.109 ops/s
# Warmup Iteration  17: 4459032.162 ops/s
# Warmup Iteration  18: 4423861.480 ops/s
# Warmup Iteration  19: 4585347.818 ops/s
# Warmup Iteration  20: 4570226.101 ops/s
# Warmup Iteration  21: 4549526.344 ops/s
# Warmup Iteration  22: 4326350.855 ops/s
# Warmup Iteration  23: 4547490.272 ops/s
# Warmup Iteration  24: 4649157.544 ops/s
# Warmup Iteration  25: 4675225.294 ops/s
# Warmup Iteration  26: 4627461.022 ops/s
# Warmup Iteration  27: 4651601.744 ops/s
# Warmup Iteration  28: 4618762.812 ops/s
# Warmup Iteration  29: 4537554.382 ops/s
# Warmup Iteration  30: 4663316.593 ops/s
Iteration   1: 4612921.215 ops/s
Iteration   2: 4671476.650 ops/s
Iteration   3: 4696250.817 ops/s
Iteration   4: 4666426.676 ops/s
Iteration   5: 4698976.842 ops/s
Iteration   6: 4659822.008 ops/s
Iteration   7: 4634736.304 ops/s
Iteration   8: 4668487.458 ops/s
Iteration   9: 4497873.295 ops/s
Iteration  10: 4630190.835 ops/s
Iteration  11: 4442090.631 ops/s
Iteration  12: 4633902.027 ops/s
Iteration  13: 4588473.762 ops/s
Iteration  14: 4678499.048 ops/s
Iteration  15: 4604637.324 ops/s
Iteration  16: 4601169.837 ops/s
Iteration  17: 4682044.883 ops/s
Iteration  18: 4728045.432 ops/s
Iteration  19: 4737782.283 ops/s
Iteration  20: 4709623.597 ops/s
Iteration  21: 4682852.387 ops/s
Iteration  22: 4686143.678 ops/s
Iteration  23: 4679345.131 ops/s
Iteration  24: 4618836.271 ops/s
Iteration  25: 4642295.444 ops/s
Iteration  26: 4663321.137 ops/s
Iteration  27: 4618129.740 ops/s
Iteration  28: 4609432.672 ops/s
Iteration  29: 4602821.267 ops/s
Iteration  30: 4584578.243 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min":
  4641039.563 ±(99.9%) 41699.145 ops/s [Average]
  (min, avg, max) = (4442090.631, 4641039.563, 4737782.283), stdev = 62413.322
  CI (99.9%): [4599340.418, 4682738.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min  thrpt   30  4641039.563 ± 41699.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1485485.039 ops/s
# Warmup Iteration   2: 3134098.227 ops/s
# Warmup Iteration   3: 3255684.242 ops/s
# Warmup Iteration   4: 3321414.032 ops/s
# Warmup Iteration   5: 2741750.609 ops/s
# Warmup Iteration   6: 3422463.672 ops/s
# Warmup Iteration   7: 3442281.753 ops/s
# Warmup Iteration   8: 3401227.300 ops/s
# Warmup Iteration   9: 3434863.932 ops/s
# Warmup Iteration  10: 3371249.955 ops/s
# Warmup Iteration  11: 3423176.281 ops/s
# Warmup Iteration  12: 3421631.116 ops/s
# Warmup Iteration  13: 3282329.080 ops/s
# Warmup Iteration  14: 3438758.302 ops/s
# Warmup Iteration  15: 3367755.886 ops/s
# Warmup Iteration  16: 3298413.761 ops/s
# Warmup Iteration  17: 3440421.563 ops/s
# Warmup Iteration  18: 3445635.903 ops/s
# Warmup Iteration  19: 3349646.105 ops/s
# Warmup Iteration  20: 3447828.081 ops/s
# Warmup Iteration  21: 3460097.648 ops/s
# Warmup Iteration  22: 3447204.906 ops/s
# Warmup Iteration  23: 3341223.130 ops/s
# Warmup Iteration  24: 3431022.910 ops/s
# Warmup Iteration  25: 3489261.947 ops/s
# Warmup Iteration  26: 3326207.246 ops/s
# Warmup Iteration  27: 3370068.131 ops/s
# Warmup Iteration  28: 3315251.144 ops/s
# Warmup Iteration  29: 3308290.155 ops/s
# Warmup Iteration  30: 3373967.215 ops/s
Iteration   1: 3290123.492 ops/s
Iteration   2: 3263007.299 ops/s
Iteration   3: 3450997.445 ops/s
Iteration   4: 3448126.541 ops/s
Iteration   5: 3432179.408 ops/s
Iteration   6: 3308254.413 ops/s
Iteration   7: 3430863.667 ops/s
Iteration   8: 3459136.494 ops/s
Iteration   9: 3437355.527 ops/s
Iteration  10: 3357250.382 ops/s
Iteration  11: 3442401.301 ops/s
Iteration  12: 3467688.406 ops/s
Iteration  13: 3437899.844 ops/s
Iteration  14: 3374579.883 ops/s
Iteration  15: 3394946.576 ops/s
Iteration  16: 3318338.158 ops/s
Iteration  17: 3421672.512 ops/s
Iteration  18: 3457201.892 ops/s
Iteration  19: 3425554.506 ops/s
Iteration  20: 3433545.648 ops/s
Iteration  21: 3367648.568 ops/s
Iteration  22: 3456619.142 ops/s
Iteration  23: 3494797.697 ops/s
Iteration  24: 3470450.832 ops/s
Iteration  25: 3332281.382 ops/s
Iteration  26: 3436378.427 ops/s
Iteration  27: 3444506.295 ops/s
Iteration  28: 3484107.795 ops/s
Iteration  29: 3444089.630 ops/s
Iteration  30: 3435438.965 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy":
  3413914.738 ±(99.9%) 40032.261 ops/s [Average]
  (min, avg, max) = (3263007.299, 3413914.738, 3494797.697), stdev = 59918.408
  CI (99.9%): [3373882.477, 3453946.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_minBy  thrpt   30  3413914.738 ± 40032.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1166159.437 ops/s
# Warmup Iteration   2: 2841348.654 ops/s
# Warmup Iteration   3: 2797873.651 ops/s
# Warmup Iteration   4: 2361588.223 ops/s
# Warmup Iteration   5: 2876633.659 ops/s
# Warmup Iteration   6: 2882051.873 ops/s
# Warmup Iteration   7: 2753152.115 ops/s
# Warmup Iteration   8: 2862503.587 ops/s
# Warmup Iteration   9: 2892884.409 ops/s
# Warmup Iteration  10: 2902917.921 ops/s
# Warmup Iteration  11: 2888392.880 ops/s
# Warmup Iteration  12: 2873756.379 ops/s
# Warmup Iteration  13: 2880836.143 ops/s
# Warmup Iteration  14: 2868463.616 ops/s
# Warmup Iteration  15: 2862158.778 ops/s
# Warmup Iteration  16: 2871558.847 ops/s
# Warmup Iteration  17: 2895632.782 ops/s
# Warmup Iteration  18: 2874112.344 ops/s
# Warmup Iteration  19: 2893068.639 ops/s
# Warmup Iteration  20: 2868311.284 ops/s
# Warmup Iteration  21: 2872301.820 ops/s
# Warmup Iteration  22: 2854930.469 ops/s
# Warmup Iteration  23: 2824875.050 ops/s
# Warmup Iteration  24: 2863615.085 ops/s
# Warmup Iteration  25: 2832943.111 ops/s
# Warmup Iteration  26: 2783965.165 ops/s
# Warmup Iteration  27: 2856186.383 ops/s
# Warmup Iteration  28: 2863815.107 ops/s
# Warmup Iteration  29: 2864024.840 ops/s
# Warmup Iteration  30: 2884679.755 ops/s
Iteration   1: 2873209.790 ops/s
Iteration   2: 2889265.897 ops/s
Iteration   3: 2886336.223 ops/s
Iteration   4: 2915059.423 ops/s
Iteration   5: 2905833.468 ops/s
Iteration   6: 2859555.419 ops/s
Iteration   7: 2833777.936 ops/s
Iteration   8: 2843701.797 ops/s
Iteration   9: 2800248.924 ops/s
Iteration  10: 2869761.922 ops/s
Iteration  11: 2865902.304 ops/s
Iteration  12: 2846882.847 ops/s
Iteration  13: 2836048.020 ops/s
Iteration  14: 2795612.881 ops/s
Iteration  15: 2818655.051 ops/s
Iteration  16: 2767058.239 ops/s
Iteration  17: 2852177.891 ops/s
Iteration  18: 2781989.950 ops/s
Iteration  19: 2739958.101 ops/s
Iteration  20: 2753542.281 ops/s
Iteration  21: 2891878.091 ops/s
Iteration  22: 2902477.137 ops/s
Iteration  23: 2893684.390 ops/s
Iteration  24: 2765194.890 ops/s
Iteration  25: 2732577.010 ops/s
Iteration  26: 2760122.230 ops/s
Iteration  27: 2751793.729 ops/s
Iteration  28: 2718834.051 ops/s
Iteration  29: 2816633.786 ops/s
Iteration  30: 2787987.907 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minByOptional":
  2825192.053 ±(99.9%) 39262.359 ops/s [Average]
  (min, avg, max) = (2718834.051, 2825192.053, 2915059.423), stdev = 58766.054
  CI (99.9%): [2785929.694, 2864454.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_minByOptional  thrpt   30  2825192.053 ± 39262.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1734325.092 ops/s
# Warmup Iteration   2: 3690038.507 ops/s
# Warmup Iteration   3: 4134311.958 ops/s
# Warmup Iteration   4: 4130827.781 ops/s
# Warmup Iteration   5: 3322670.325 ops/s
# Warmup Iteration   6: 4202083.315 ops/s
# Warmup Iteration   7: 4104481.565 ops/s
# Warmup Iteration   8: 4007856.570 ops/s
# Warmup Iteration   9: 4050103.766 ops/s
# Warmup Iteration  10: 4022976.126 ops/s
# Warmup Iteration  11: 3995000.492 ops/s
# Warmup Iteration  12: 4121409.162 ops/s
# Warmup Iteration  13: 4111021.626 ops/s
# Warmup Iteration  14: 4157461.123 ops/s
# Warmup Iteration  15: 4107799.086 ops/s
# Warmup Iteration  16: 4098014.272 ops/s
# Warmup Iteration  17: 4094122.288 ops/s
# Warmup Iteration  18: 3977174.723 ops/s
# Warmup Iteration  19: 4006029.490 ops/s
# Warmup Iteration  20: 3969126.948 ops/s
# Warmup Iteration  21: 4137682.028 ops/s
# Warmup Iteration  22: 4129382.414 ops/s
# Warmup Iteration  23: 4132766.044 ops/s
# Warmup Iteration  24: 4012303.149 ops/s
# Warmup Iteration  25: 4137592.169 ops/s
# Warmup Iteration  26: 4129476.750 ops/s
# Warmup Iteration  27: 4146887.858 ops/s
# Warmup Iteration  28: 4051454.092 ops/s
# Warmup Iteration  29: 4003275.958 ops/s
# Warmup Iteration  30: 4058277.023 ops/s
Iteration   1: 4123196.880 ops/s
Iteration   2: 4079288.467 ops/s
Iteration   3: 3972377.615 ops/s
Iteration   4: 4027077.959 ops/s
Iteration   5: 3994550.434 ops/s
Iteration   6: 4185268.754 ops/s
Iteration   7: 4203185.387 ops/s
Iteration   8: 4039225.325 ops/s
Iteration   9: 4057972.222 ops/s
Iteration  10: 4161673.725 ops/s
Iteration  11: 4051218.585 ops/s
Iteration  12: 4054964.081 ops/s
Iteration  13: 4065685.846 ops/s
Iteration  14: 4108613.849 ops/s
Iteration  15: 4079031.197 ops/s
Iteration  16: 4207489.677 ops/s
Iteration  17: 4166715.926 ops/s
Iteration  18: 3909030.203 ops/s
Iteration  19: 4087930.962 ops/s
Iteration  20: 4179526.632 ops/s
Iteration  21: 4142898.551 ops/s
Iteration  22: 4097968.022 ops/s
Iteration  23: 4062157.698 ops/s
Iteration  24: 4121535.460 ops/s
Iteration  25: 3885945.630 ops/s
Iteration  26: 4079709.648 ops/s
Iteration  27: 3977861.524 ops/s
Iteration  28: 4151944.877 ops/s
Iteration  29: 4011423.528 ops/s
Iteration  30: 3934553.943 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minBy_null_throws":
  4074000.754 ±(99.9%) 56642.884 ops/s [Average]
  (min, avg, max) = (3885945.630, 4074000.754, 4207489.677), stdev = 84780.408
  CI (99.9%): [4017357.870, 4130643.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  4074000.754 ± 56642.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617692.738 ops/s
# Warmup Iteration   2: 1424446.384 ops/s
# Warmup Iteration   3: 1440970.723 ops/s
# Warmup Iteration   4: 1132322.829 ops/s
# Warmup Iteration   5: 1437334.975 ops/s
# Warmup Iteration   6: 1459398.515 ops/s
# Warmup Iteration   7: 1398347.889 ops/s
# Warmup Iteration   8: 1465594.140 ops/s
# Warmup Iteration   9: 1442344.506 ops/s
# Warmup Iteration  10: 1436040.150 ops/s
# Warmup Iteration  11: 1450350.553 ops/s
# Warmup Iteration  12: 1483709.270 ops/s
# Warmup Iteration  13: 1446069.702 ops/s
# Warmup Iteration  14: 1460646.796 ops/s
# Warmup Iteration  15: 1424764.493 ops/s
# Warmup Iteration  16: 1404708.315 ops/s
# Warmup Iteration  17: 1464420.121 ops/s
# Warmup Iteration  18: 1469788.815 ops/s
# Warmup Iteration  19: 1459583.955 ops/s
# Warmup Iteration  20: 1459917.733 ops/s
# Warmup Iteration  21: 1389064.671 ops/s
# Warmup Iteration  22: 1474929.012 ops/s
# Warmup Iteration  23: 1461147.049 ops/s
# Warmup Iteration  24: 1465062.220 ops/s
# Warmup Iteration  25: 1466903.471 ops/s
# Warmup Iteration  26: 1450600.099 ops/s
# Warmup Iteration  27: 1467658.383 ops/s
# Warmup Iteration  28: 1476900.140 ops/s
# Warmup Iteration  29: 1433122.643 ops/s
# Warmup Iteration  30: 1422328.040 ops/s
Iteration   1: 1478544.083 ops/s
Iteration   2: 1490150.828 ops/s
Iteration   3: 1481238.122 ops/s
Iteration   4: 1461589.095 ops/s
Iteration   5: 1409048.609 ops/s
Iteration   6: 1411604.934 ops/s
Iteration   7: 1440051.615 ops/s
Iteration   8: 1385578.705 ops/s
Iteration   9: 1467918.818 ops/s
Iteration  10: 1466731.021 ops/s
Iteration  11: 1394921.497 ops/s
Iteration  12: 1444262.531 ops/s
Iteration  13: 1399588.614 ops/s
Iteration  14: 1466350.380 ops/s
Iteration  15: 1482084.100 ops/s
Iteration  16: 1483304.446 ops/s
Iteration  17: 1488295.702 ops/s
Iteration  18: 1482541.289 ops/s
Iteration  19: 1468660.596 ops/s
Iteration  20: 1468110.527 ops/s
Iteration  21: 1439996.675 ops/s
Iteration  22: 1459960.421 ops/s
Iteration  23: 1448500.359 ops/s
Iteration  24: 1472075.963 ops/s
Iteration  25: 1494029.745 ops/s
Iteration  26: 1492735.616 ops/s
Iteration  27: 1475741.858 ops/s
Iteration  28: 1466782.017 ops/s
Iteration  29: 1468131.680 ops/s
Iteration  30: 1462860.541 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_minOptional":
  1458379.680 ±(99.9%) 20211.412 ops/s [Average]
  (min, avg, max) = (1385578.705, 1458379.680, 1494029.745), stdev = 30251.493
  CI (99.9%): [1438168.267, 1478591.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_minOptional  thrpt   30  1458379.680 ± 20211.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597356.939 ops/s
# Warmup Iteration   2: 659946.243 ops/s
# Warmup Iteration   3: 902041.766 ops/s
# Warmup Iteration   4: 903648.303 ops/s
# Warmup Iteration   5: 895994.650 ops/s
# Warmup Iteration   6: 907235.428 ops/s
# Warmup Iteration   7: 899569.210 ops/s
# Warmup Iteration   8: 898049.694 ops/s
# Warmup Iteration   9: 903198.091 ops/s
# Warmup Iteration  10: 875905.503 ops/s
# Warmup Iteration  11: 755833.718 ops/s
# Warmup Iteration  12: 823370.115 ops/s
# Warmup Iteration  13: 871215.339 ops/s
# Warmup Iteration  14: 871434.086 ops/s
# Warmup Iteration  15: 893968.297 ops/s
# Warmup Iteration  16: 870135.821 ops/s
# Warmup Iteration  17: 954802.130 ops/s
# Warmup Iteration  18: 958612.353 ops/s
# Warmup Iteration  19: 961748.176 ops/s
# Warmup Iteration  20: 953554.468 ops/s
# Warmup Iteration  21: 951599.111 ops/s
# Warmup Iteration  22: 948857.559 ops/s
# Warmup Iteration  23: 955362.923 ops/s
# Warmup Iteration  24: 952867.363 ops/s
# Warmup Iteration  25: 954595.817 ops/s
# Warmup Iteration  26: 955869.444 ops/s
# Warmup Iteration  27: 956052.942 ops/s
# Warmup Iteration  28: 942625.334 ops/s
# Warmup Iteration  29: 964265.030 ops/s
# Warmup Iteration  30: 948012.590 ops/s
Iteration   1: 966079.591 ops/s
Iteration   2: 956916.507 ops/s
Iteration   3: 960249.906 ops/s
Iteration   4: 966437.572 ops/s
Iteration   5: 960047.438 ops/s
Iteration   6: 941125.636 ops/s
Iteration   7: 940045.157 ops/s
Iteration   8: 955868.980 ops/s
Iteration   9: 956789.820 ops/s
Iteration  10: 947065.161 ops/s
Iteration  11: 952933.893 ops/s
Iteration  12: 956300.201 ops/s
Iteration  13: 949507.512 ops/s
Iteration  14: 964209.868 ops/s
Iteration  15: 946750.520 ops/s
Iteration  16: 950983.967 ops/s
Iteration  17: 948909.667 ops/s
Iteration  18: 956957.714 ops/s
Iteration  19: 955906.071 ops/s
Iteration  20: 955568.731 ops/s
Iteration  21: 944471.321 ops/s
Iteration  22: 944853.604 ops/s
Iteration  23: 954201.762 ops/s
Iteration  24: 956359.096 ops/s
Iteration  25: 963989.180 ops/s
Iteration  26: 952449.621 ops/s
Iteration  27: 956879.073 ops/s
Iteration  28: 954780.195 ops/s
Iteration  29: 945827.187 ops/s
Iteration  30: 957407.688 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_empty_throws":
  953995.755 ±(99.9%) 4654.373 ops/s [Average]
  (min, avg, max) = (940045.157, 953995.755, 966437.572), stdev = 6966.447
  CI (99.9%): [949341.382, 958650.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  953995.755 ± 4654.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1628881.073 ops/s
# Warmup Iteration   2: 3068572.361 ops/s
# Warmup Iteration   3: 3379033.416 ops/s
# Warmup Iteration   4: 3394428.088 ops/s
# Warmup Iteration   5: 2882402.545 ops/s
# Warmup Iteration   6: 3389715.412 ops/s
# Warmup Iteration   7: 3567691.088 ops/s
# Warmup Iteration   8: 3541574.308 ops/s
# Warmup Iteration   9: 3537561.340 ops/s
# Warmup Iteration  10: 3508004.997 ops/s
# Warmup Iteration  11: 3472309.493 ops/s
# Warmup Iteration  12: 3550258.500 ops/s
# Warmup Iteration  13: 3562534.821 ops/s
# Warmup Iteration  14: 3614796.241 ops/s
# Warmup Iteration  15: 3538750.768 ops/s
# Warmup Iteration  16: 3567003.883 ops/s
# Warmup Iteration  17: 3603823.760 ops/s
# Warmup Iteration  18: 3583279.487 ops/s
# Warmup Iteration  19: 3547648.016 ops/s
# Warmup Iteration  20: 3552623.110 ops/s
# Warmup Iteration  21: 3495300.805 ops/s
# Warmup Iteration  22: 3522416.325 ops/s
# Warmup Iteration  23: 3505494.579 ops/s
# Warmup Iteration  24: 3556659.702 ops/s
# Warmup Iteration  25: 3534199.161 ops/s
# Warmup Iteration  26: 3457193.625 ops/s
# Warmup Iteration  27: 3598546.264 ops/s
# Warmup Iteration  28: 3551805.436 ops/s
# Warmup Iteration  29: 3546275.585 ops/s
# Warmup Iteration  30: 3594973.180 ops/s
Iteration   1: 3586450.273 ops/s
Iteration   2: 3444241.182 ops/s
Iteration   3: 3598138.086 ops/s
Iteration   4: 3302839.176 ops/s
Iteration   5: 3368527.392 ops/s
Iteration   6: 3400623.819 ops/s
Iteration   7: 3568049.380 ops/s
Iteration   8: 3547965.383 ops/s
Iteration   9: 3577975.657 ops/s
Iteration  10: 3615697.588 ops/s
Iteration  11: 3528212.993 ops/s
Iteration  12: 3591449.231 ops/s
Iteration  13: 3628388.079 ops/s
Iteration  14: 3527199.233 ops/s
Iteration  15: 3473178.405 ops/s
Iteration  16: 3597750.805 ops/s
Iteration  17: 3474549.001 ops/s
Iteration  18: 3448510.503 ops/s
Iteration  19: 3520814.421 ops/s
Iteration  20: 3381601.964 ops/s
Iteration  21: 3424810.198 ops/s
Iteration  22: 3407304.882 ops/s
Iteration  23: 3482647.619 ops/s
Iteration  24: 3381967.793 ops/s
Iteration  25: 3350264.236 ops/s
Iteration  26: 3437360.369 ops/s
Iteration  27: 3395870.113 ops/s
Iteration  28: 3461364.985 ops/s
Iteration  29: 3617935.221 ops/s
Iteration  30: 3565626.996 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_safe":
  3490243.833 ±(99.9%) 61979.407 ops/s [Average]
  (min, avg, max) = (3302839.176, 3490243.833, 3628388.079), stdev = 92767.866
  CI (99.9%): [3428264.425, 3552223.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  3490243.833 ± 61979.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1473961.713 ops/s
# Warmup Iteration   2: 2404821.461 ops/s
# Warmup Iteration   3: 2835714.224 ops/s
# Warmup Iteration   4: 2865310.777 ops/s
# Warmup Iteration   5: 2864258.196 ops/s
# Warmup Iteration   6: 2633576.024 ops/s
# Warmup Iteration   7: 2627525.690 ops/s
# Warmup Iteration   8: 2884125.528 ops/s
# Warmup Iteration   9: 2861187.969 ops/s
# Warmup Iteration  10: 2872806.319 ops/s
# Warmup Iteration  11: 2866324.971 ops/s
# Warmup Iteration  12: 2861542.319 ops/s
# Warmup Iteration  13: 2872483.295 ops/s
# Warmup Iteration  14: 2790281.003 ops/s
# Warmup Iteration  15: 2863627.327 ops/s
# Warmup Iteration  16: 2740395.372 ops/s
# Warmup Iteration  17: 2865477.171 ops/s
# Warmup Iteration  18: 2759710.957 ops/s
# Warmup Iteration  19: 2831932.666 ops/s
# Warmup Iteration  20: 2811491.025 ops/s
# Warmup Iteration  21: 2871277.168 ops/s
# Warmup Iteration  22: 2883736.422 ops/s
# Warmup Iteration  23: 2875074.121 ops/s
# Warmup Iteration  24: 2900123.677 ops/s
# Warmup Iteration  25: 2889713.786 ops/s
# Warmup Iteration  26: 2865209.744 ops/s
# Warmup Iteration  27: 2893516.246 ops/s
# Warmup Iteration  28: 2900751.994 ops/s
# Warmup Iteration  29: 2878518.428 ops/s
# Warmup Iteration  30: 2932138.626 ops/s
Iteration   1: 2931504.334 ops/s
Iteration   2: 2906340.086 ops/s
Iteration   3: 2926228.099 ops/s
Iteration   4: 2902020.352 ops/s
Iteration   5: 2896588.271 ops/s
Iteration   6: 2923626.510 ops/s
Iteration   7: 2895947.453 ops/s
Iteration   8: 2899806.525 ops/s
Iteration   9: 2876632.684 ops/s
Iteration  10: 2899112.722 ops/s
Iteration  11: 2896445.082 ops/s
Iteration  12: 2922086.443 ops/s
Iteration  13: 2894469.258 ops/s
Iteration  14: 2899377.318 ops/s
Iteration  15: 2891377.873 ops/s
Iteration  16: 2891398.393 ops/s
Iteration  17: 2773048.000 ops/s
Iteration  18: 2845643.956 ops/s
Iteration  19: 2713705.210 ops/s
Iteration  20: 2779165.689 ops/s
Iteration  21: 2781296.542 ops/s
Iteration  22: 2785215.231 ops/s
Iteration  23: 2821367.117 ops/s
Iteration  24: 2749353.169 ops/s
Iteration  25: 2777168.315 ops/s
Iteration  26: 2831696.364 ops/s
Iteration  27: 2870326.674 ops/s
Iteration  28: 2818006.982 ops/s
Iteration  29: 2770851.973 ops/s
Iteration  30: 2828956.618 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws":
  2853292.108 ±(99.9%) 41463.344 ops/s [Average]
  (min, avg, max) = (2713705.210, 2853292.108, 2931504.334), stdev = 62060.386
  CI (99.9%): [2811828.764, 2894755.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  2853292.108 ± 41463.344  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1433699.902 ops/s
# Warmup Iteration   2: 2352939.209 ops/s
# Warmup Iteration   3: 2836157.338 ops/s
# Warmup Iteration   4: 2864231.526 ops/s
# Warmup Iteration   5: 2827695.622 ops/s
# Warmup Iteration   6: 2669839.323 ops/s
# Warmup Iteration   7: 2548383.975 ops/s
# Warmup Iteration   8: 2859358.818 ops/s
# Warmup Iteration   9: 2892296.393 ops/s
# Warmup Iteration  10: 2895406.615 ops/s
# Warmup Iteration  11: 2768674.096 ops/s
# Warmup Iteration  12: 2832284.503 ops/s
# Warmup Iteration  13: 2825499.107 ops/s
# Warmup Iteration  14: 2846650.829 ops/s
# Warmup Iteration  15: 2859771.984 ops/s
# Warmup Iteration  16: 2915368.390 ops/s
# Warmup Iteration  17: 2745869.862 ops/s
# Warmup Iteration  18: 2788795.887 ops/s
# Warmup Iteration  19: 2849930.414 ops/s
# Warmup Iteration  20: 2777127.030 ops/s
# Warmup Iteration  21: 2761812.154 ops/s
# Warmup Iteration  22: 2806935.900 ops/s
# Warmup Iteration  23: 2902071.004 ops/s
# Warmup Iteration  24: 2871639.473 ops/s
# Warmup Iteration  25: 2883063.852 ops/s
# Warmup Iteration  26: 2904650.036 ops/s
# Warmup Iteration  27: 2885655.025 ops/s
# Warmup Iteration  28: 2885237.392 ops/s
# Warmup Iteration  29: 2932673.165 ops/s
# Warmup Iteration  30: 2907057.431 ops/s
Iteration   1: 2881346.874 ops/s
Iteration   2: 2922959.540 ops/s
Iteration   3: 2864832.178 ops/s
Iteration   4: 2890246.124 ops/s
Iteration   5: 2878512.767 ops/s
Iteration   6: 2892140.235 ops/s
Iteration   7: 2851523.565 ops/s
Iteration   8: 2914273.739 ops/s
Iteration   9: 2847392.419 ops/s
Iteration  10: 2858779.809 ops/s
Iteration  11: 2907928.483 ops/s
Iteration  12: 2845795.407 ops/s
Iteration  13: 2799110.023 ops/s
Iteration  14: 2812262.423 ops/s
Iteration  15: 2864965.719 ops/s
Iteration  16: 2884451.689 ops/s
Iteration  17: 2924342.135 ops/s
Iteration  18: 2883179.356 ops/s
Iteration  19: 2893169.930 ops/s
Iteration  20: 2873698.713 ops/s
Iteration  21: 2896521.228 ops/s
Iteration  22: 2861826.577 ops/s
Iteration  23: 2902148.700 ops/s
Iteration  24: 2864722.745 ops/s
Iteration  25: 2890172.824 ops/s
Iteration  26: 2839128.167 ops/s
Iteration  27: 2884839.728 ops/s
Iteration  28: 2909292.241 ops/s
Iteration  29: 2887529.612 ops/s
Iteration  30: 2879267.229 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  2876878.673 ±(99.9%) 19653.929 ops/s [Average]
  (min, avg, max) = (2799110.023, 2876878.673, 2924342.135), stdev = 29417.077
  CI (99.9%): [2857224.744, 2896532.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  2876878.673 ± 19653.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2074128.228 ops/s
# Warmup Iteration   2: 4405784.736 ops/s
# Warmup Iteration   3: 4576776.699 ops/s
# Warmup Iteration   4: 4350051.182 ops/s
# Warmup Iteration   5: 3866954.403 ops/s
# Warmup Iteration   6: 4492435.198 ops/s
# Warmup Iteration   7: 4395457.934 ops/s
# Warmup Iteration   8: 4333473.741 ops/s
# Warmup Iteration   9: 4432658.756 ops/s
# Warmup Iteration  10: 4518909.860 ops/s
# Warmup Iteration  11: 4564133.595 ops/s
# Warmup Iteration  12: 4559758.943 ops/s
# Warmup Iteration  13: 4404346.016 ops/s
# Warmup Iteration  14: 4466453.664 ops/s
# Warmup Iteration  15: 4424905.027 ops/s
# Warmup Iteration  16: 4498863.556 ops/s
# Warmup Iteration  17: 4557760.288 ops/s
# Warmup Iteration  18: 4433179.648 ops/s
# Warmup Iteration  19: 4471412.288 ops/s
# Warmup Iteration  20: 4482488.444 ops/s
# Warmup Iteration  21: 4528225.088 ops/s
# Warmup Iteration  22: 4565320.049 ops/s
# Warmup Iteration  23: 4311995.018 ops/s
# Warmup Iteration  24: 4562875.707 ops/s
# Warmup Iteration  25: 4473356.938 ops/s
# Warmup Iteration  26: 4565514.077 ops/s
# Warmup Iteration  27: 4646321.525 ops/s
# Warmup Iteration  28: 4606013.569 ops/s
# Warmup Iteration  29: 4628547.734 ops/s
# Warmup Iteration  30: 4662097.149 ops/s
Iteration   1: 4690054.613 ops/s
Iteration   2: 4432689.741 ops/s
Iteration   3: 4646743.141 ops/s
Iteration   4: 4685961.914 ops/s
Iteration   5: 4655084.031 ops/s
Iteration   6: 4638553.918 ops/s
Iteration   7: 4696075.908 ops/s
Iteration   8: 4640559.132 ops/s
Iteration   9: 4474517.480 ops/s
Iteration  10: 4662132.546 ops/s
Iteration  11: 4489600.305 ops/s
Iteration  12: 4623370.465 ops/s
Iteration  13: 4626532.137 ops/s
Iteration  14: 4622985.118 ops/s
Iteration  15: 4592116.183 ops/s
Iteration  16: 4578583.693 ops/s
Iteration  17: 4619074.867 ops/s
Iteration  18: 4626158.186 ops/s
Iteration  19: 4671638.761 ops/s
Iteration  20: 4692922.053 ops/s
Iteration  21: 4699176.160 ops/s
Iteration  22: 4623517.796 ops/s
Iteration  23: 4501578.610 ops/s
Iteration  24: 4476454.726 ops/s
Iteration  25: 4457871.416 ops/s
Iteration  26: 4624879.243 ops/s
Iteration  27: 4625559.101 ops/s
Iteration  28: 4611872.581 ops/s
Iteration  29: 4510514.179 ops/s
Iteration  30: 4637685.889 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_min_without_comparator":
  4604482.130 ±(99.9%) 52012.846 ops/s [Average]
  (min, avg, max) = (4432689.741, 4604482.130, 4699176.160), stdev = 77850.385
  CI (99.9%): [4552469.284, 4656494.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  4604482.130 ± 52012.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1188564.149 ops/s
# Warmup Iteration   2: 2728201.072 ops/s
# Warmup Iteration   3: 2342577.389 ops/s
# Warmup Iteration   4: 2760013.202 ops/s
# Warmup Iteration   5: 2833589.804 ops/s
# Warmup Iteration   6: 2794761.567 ops/s
# Warmup Iteration   7: 2766782.284 ops/s
# Warmup Iteration   8: 2749042.679 ops/s
# Warmup Iteration   9: 2769060.640 ops/s
# Warmup Iteration  10: 2813829.876 ops/s
# Warmup Iteration  11: 2792245.775 ops/s
# Warmup Iteration  12: 2785672.510 ops/s
# Warmup Iteration  13: 2741257.868 ops/s
# Warmup Iteration  14: 2736027.367 ops/s
# Warmup Iteration  15: 2763883.541 ops/s
# Warmup Iteration  16: 2753758.528 ops/s
# Warmup Iteration  17: 2831764.329 ops/s
# Warmup Iteration  18: 2874151.927 ops/s
# Warmup Iteration  19: 2823671.570 ops/s
# Warmup Iteration  20: 2804101.298 ops/s
# Warmup Iteration  21: 2804432.928 ops/s
# Warmup Iteration  22: 2764687.971 ops/s
# Warmup Iteration  23: 2857231.913 ops/s
# Warmup Iteration  24: 2860837.125 ops/s
# Warmup Iteration  25: 2868600.415 ops/s
# Warmup Iteration  26: 2863491.054 ops/s
# Warmup Iteration  27: 2802997.283 ops/s
# Warmup Iteration  28: 2899236.202 ops/s
# Warmup Iteration  29: 2890521.511 ops/s
# Warmup Iteration  30: 2842093.865 ops/s
Iteration   1: 2854277.384 ops/s
Iteration   2: 2872073.872 ops/s
Iteration   3: 2803464.834 ops/s
Iteration   4: 2834707.857 ops/s
Iteration   5: 2865884.018 ops/s
Iteration   6: 2829787.188 ops/s
Iteration   7: 2814409.898 ops/s
Iteration   8: 2813837.642 ops/s
Iteration   9: 2864260.094 ops/s
Iteration  10: 2825386.822 ops/s
Iteration  11: 2819237.362 ops/s
Iteration  12: 2820530.717 ops/s
Iteration  13: 2837479.533 ops/s
Iteration  14: 2784559.132 ops/s
Iteration  15: 2702291.124 ops/s
Iteration  16: 2837875.230 ops/s
Iteration  17: 2777167.489 ops/s
Iteration  18: 2831138.005 ops/s
Iteration  19: 2798035.611 ops/s
Iteration  20: 2757983.433 ops/s
Iteration  21: 2863545.480 ops/s
Iteration  22: 2872298.104 ops/s
Iteration  23: 2783375.761 ops/s
Iteration  24: 2650845.648 ops/s
Iteration  25: 2824382.091 ops/s
Iteration  26: 2804333.208 ops/s
Iteration  27: 2834132.786 ops/s
Iteration  28: 2737311.805 ops/s
Iteration  29: 2820488.162 ops/s
Iteration  30: 2802605.670 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_newEmpty":
  2811256.865 ±(99.9%) 32954.805 ops/s [Average]
  (min, avg, max) = (2650845.648, 2811256.865, 2872298.104), stdev = 49325.204
  CI (99.9%): [2778302.061, 2844211.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_newEmpty  thrpt   30  2811256.865 ± 32954.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674670.247 ops/s
# Warmup Iteration   2: 1470224.032 ops/s
# Warmup Iteration   3: 1558856.144 ops/s
# Warmup Iteration   4: 1370889.000 ops/s
# Warmup Iteration   5: 1454492.252 ops/s
# Warmup Iteration   6: 1511265.770 ops/s
# Warmup Iteration   7: 1486705.443 ops/s
# Warmup Iteration   8: 1473274.498 ops/s
# Warmup Iteration   9: 1492153.416 ops/s
# Warmup Iteration  10: 1531943.419 ops/s
# Warmup Iteration  11: 1532194.840 ops/s
# Warmup Iteration  12: 1519267.403 ops/s
# Warmup Iteration  13: 1501919.194 ops/s
# Warmup Iteration  14: 1459480.731 ops/s
# Warmup Iteration  15: 1516056.885 ops/s
# Warmup Iteration  16: 1525065.586 ops/s
# Warmup Iteration  17: 1523454.683 ops/s
# Warmup Iteration  18: 1520145.003 ops/s
# Warmup Iteration  19: 1530252.702 ops/s
# Warmup Iteration  20: 1515428.447 ops/s
# Warmup Iteration  21: 1527759.514 ops/s
# Warmup Iteration  22: 1523962.751 ops/s
# Warmup Iteration  23: 1521707.833 ops/s
# Warmup Iteration  24: 1474606.940 ops/s
# Warmup Iteration  25: 1464478.053 ops/s
# Warmup Iteration  26: 1499415.761 ops/s
# Warmup Iteration  27: 1505566.695 ops/s
# Warmup Iteration  28: 1493520.414 ops/s
# Warmup Iteration  29: 1472956.879 ops/s
# Warmup Iteration  30: 1515715.045 ops/s
Iteration   1: 1503310.923 ops/s
Iteration   2: 1517196.756 ops/s
Iteration   3: 1496067.727 ops/s
Iteration   4: 1524328.030 ops/s
Iteration   5: 1525683.481 ops/s
Iteration   6: 1515261.981 ops/s
Iteration   7: 1550589.476 ops/s
Iteration   8: 1538367.079 ops/s
Iteration   9: 1508791.236 ops/s
Iteration  10: 1499730.165 ops/s
Iteration  11: 1517127.874 ops/s
Iteration  12: 1478748.244 ops/s
Iteration  13: 1519786.435 ops/s
Iteration  14: 1514264.086 ops/s
Iteration  15: 1511857.689 ops/s
Iteration  16: 1520691.460 ops/s
Iteration  17: 1526400.680 ops/s
Iteration  18: 1537372.822 ops/s
Iteration  19: 1520699.576 ops/s
Iteration  20: 1530117.807 ops/s
Iteration  21: 1522650.194 ops/s
Iteration  22: 1481068.103 ops/s
Iteration  23: 1440866.556 ops/s
Iteration  24: 1479095.825 ops/s
Iteration  25: 1479169.807 ops/s
Iteration  26: 1490627.583 ops/s
Iteration  27: 1465839.752 ops/s
Iteration  28: 1472479.540 ops/s
Iteration  29: 1419111.862 ops/s
Iteration  30: 1519917.318 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfy":
  1504240.669 ±(99.9%) 19578.997 ops/s [Average]
  (min, avg, max) = (1419111.862, 1504240.669, 1550589.476), stdev = 29304.923
  CI (99.9%): [1484661.672, 1523819.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1504240.669 ± 19578.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 907407.730 ops/s
# Warmup Iteration   2: 1978477.556 ops/s
# Warmup Iteration   3: 2070153.226 ops/s
# Warmup Iteration   4: 1980241.684 ops/s
# Warmup Iteration   5: 1872570.188 ops/s
# Warmup Iteration   6: 2092669.929 ops/s
# Warmup Iteration   7: 2087832.908 ops/s
# Warmup Iteration   8: 2093812.380 ops/s
# Warmup Iteration   9: 2112397.330 ops/s
# Warmup Iteration  10: 2093064.582 ops/s
# Warmup Iteration  11: 2072208.126 ops/s
# Warmup Iteration  12: 2076852.469 ops/s
# Warmup Iteration  13: 2084218.707 ops/s
# Warmup Iteration  14: 2094475.329 ops/s
# Warmup Iteration  15: 2047990.146 ops/s
# Warmup Iteration  16: 2031413.318 ops/s
# Warmup Iteration  17: 2017324.159 ops/s
# Warmup Iteration  18: 2060358.988 ops/s
# Warmup Iteration  19: 2118154.790 ops/s
# Warmup Iteration  20: 2023118.438 ops/s
# Warmup Iteration  21: 2056961.082 ops/s
# Warmup Iteration  22: 2121430.873 ops/s
# Warmup Iteration  23: 2129416.367 ops/s
# Warmup Iteration  24: 2052208.512 ops/s
# Warmup Iteration  25: 2022437.054 ops/s
# Warmup Iteration  26: 2027204.870 ops/s
# Warmup Iteration  27: 2133912.723 ops/s
# Warmup Iteration  28: 2103281.046 ops/s
# Warmup Iteration  29: 2070496.972 ops/s
# Warmup Iteration  30: 2050870.828 ops/s
Iteration   1: 2025818.598 ops/s
Iteration   2: 2094349.151 ops/s
Iteration   3: 2060497.435 ops/s
Iteration   4: 2109405.492 ops/s
Iteration   5: 2079182.535 ops/s
Iteration   6: 2119184.650 ops/s
Iteration   7: 2088434.358 ops/s
Iteration   8: 2096830.710 ops/s
Iteration   9: 2071682.927 ops/s
Iteration  10: 1994268.514 ops/s
Iteration  11: 2113239.255 ops/s
Iteration  12: 2083671.361 ops/s
Iteration  13: 2073275.372 ops/s
Iteration  14: 2128267.830 ops/s
Iteration  15: 2113931.845 ops/s
Iteration  16: 2106054.827 ops/s
Iteration  17: 2089104.263 ops/s
Iteration  18: 2097063.238 ops/s
Iteration  19: 2098561.048 ops/s
Iteration  20: 2069317.949 ops/s
Iteration  21: 2122519.697 ops/s
Iteration  22: 2081979.682 ops/s
Iteration  23: 2083229.312 ops/s
Iteration  24: 2003829.898 ops/s
Iteration  25: 2097323.275 ops/s
Iteration  26: 2023649.673 ops/s
Iteration  27: 2095475.936 ops/s
Iteration  28: 2095444.666 ops/s
Iteration  29: 2006613.924 ops/s
Iteration  30: 2093470.155 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfyWith":
  2080522.586 ±(99.9%) 23860.844 ops/s [Average]
  (min, avg, max) = (1994268.514, 2080522.586, 2128267.830), stdev = 35713.791
  CI (99.9%): [2056661.742, 2104383.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2080522.586 ± 23860.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2056080.155 ops/s
# Warmup Iteration   2: 4797411.754 ops/s
# Warmup Iteration   3: 4077141.008 ops/s
# Warmup Iteration   4: 4852030.728 ops/s
# Warmup Iteration   5: 4839648.468 ops/s
# Warmup Iteration   6: 4785735.660 ops/s
# Warmup Iteration   7: 4777499.518 ops/s
# Warmup Iteration   8: 4842038.283 ops/s
# Warmup Iteration   9: 4800052.890 ops/s
# Warmup Iteration  10: 4703802.086 ops/s
# Warmup Iteration  11: 4592259.873 ops/s
# Warmup Iteration  12: 4766724.566 ops/s
# Warmup Iteration  13: 4758606.019 ops/s
# Warmup Iteration  14: 4809328.726 ops/s
# Warmup Iteration  15: 4784110.300 ops/s
# Warmup Iteration  16: 4714922.079 ops/s
# Warmup Iteration  17: 4792475.550 ops/s
# Warmup Iteration  18: 4857671.986 ops/s
# Warmup Iteration  19: 4842995.770 ops/s
# Warmup Iteration  20: 4800683.164 ops/s
# Warmup Iteration  21: 4744147.352 ops/s
# Warmup Iteration  22: 4791132.125 ops/s
# Warmup Iteration  23: 4731601.390 ops/s
# Warmup Iteration  24: 4772052.558 ops/s
# Warmup Iteration  25: 4810491.563 ops/s
# Warmup Iteration  26: 4809868.200 ops/s
# Warmup Iteration  27: 4851458.340 ops/s
# Warmup Iteration  28: 4879014.994 ops/s
# Warmup Iteration  29: 4894167.081 ops/s
# Warmup Iteration  30: 4866739.915 ops/s
Iteration   1: 4853937.717 ops/s
Iteration   2: 4876812.435 ops/s
Iteration   3: 4887934.588 ops/s
Iteration   4: 4859240.003 ops/s
Iteration   5: 4835947.355 ops/s
Iteration   6: 4732708.213 ops/s
Iteration   7: 4824057.395 ops/s
Iteration   8: 4817510.658 ops/s
Iteration   9: 4772612.239 ops/s
Iteration  10: 4849543.990 ops/s
Iteration  11: 4855382.998 ops/s
Iteration  12: 4819376.775 ops/s
Iteration  13: 4826414.934 ops/s
Iteration  14: 4814208.242 ops/s
Iteration  15: 4853971.566 ops/s
Iteration  16: 4867396.881 ops/s
Iteration  17: 4773357.918 ops/s
Iteration  18: 4816607.659 ops/s
Iteration  19: 4851768.595 ops/s
Iteration  20: 4761783.667 ops/s
Iteration  21: 4745301.711 ops/s
Iteration  22: 4805286.513 ops/s
Iteration  23: 4752387.064 ops/s
Iteration  24: 4690941.863 ops/s
Iteration  25: 4787323.197 ops/s
Iteration  26: 4766960.254 ops/s
Iteration  27: 4723138.047 ops/s
Iteration  28: 4774915.775 ops/s
Iteration  29: 4759452.319 ops/s
Iteration  30: 4637785.500 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_notEmpty":
  4799802.202 ±(99.9%) 39196.004 ops/s [Average]
  (min, avg, max) = (4637785.500, 4799802.202, 4887934.588), stdev = 58666.738
  CI (99.9%): [4760606.198, 4838998.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_notEmpty  thrpt   30  4799802.202 ± 39196.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2477407.893 ops/s
# Warmup Iteration   2: 5408049.263 ops/s
# Warmup Iteration   3: 5867695.843 ops/s
# Warmup Iteration   4: 5452437.058 ops/s
# Warmup Iteration   5: 5149882.145 ops/s
# Warmup Iteration   6: 5791352.819 ops/s
# Warmup Iteration   7: 5738179.090 ops/s
# Warmup Iteration   8: 5671928.647 ops/s
# Warmup Iteration   9: 5773988.517 ops/s
# Warmup Iteration  10: 5866380.221 ops/s
# Warmup Iteration  11: 5775082.165 ops/s
# Warmup Iteration  12: 5773984.670 ops/s
# Warmup Iteration  13: 5603176.414 ops/s
# Warmup Iteration  14: 5534391.490 ops/s
# Warmup Iteration  15: 5570841.737 ops/s
# Warmup Iteration  16: 5567004.984 ops/s
# Warmup Iteration  17: 5895484.465 ops/s
# Warmup Iteration  18: 5942227.008 ops/s
# Warmup Iteration  19: 5860829.489 ops/s
# Warmup Iteration  20: 5884351.442 ops/s
# Warmup Iteration  21: 5933580.395 ops/s
# Warmup Iteration  22: 5775440.817 ops/s
# Warmup Iteration  23: 5779863.395 ops/s
# Warmup Iteration  24: 5845137.719 ops/s
# Warmup Iteration  25: 5928148.605 ops/s
# Warmup Iteration  26: 5951431.034 ops/s
# Warmup Iteration  27: 5707609.668 ops/s
# Warmup Iteration  28: 5825502.712 ops/s
# Warmup Iteration  29: 5866349.057 ops/s
# Warmup Iteration  30: 5858817.703 ops/s
Iteration   1: 5616406.039 ops/s
Iteration   2: 5783080.015 ops/s
Iteration   3: 5779374.398 ops/s
Iteration   4: 5787027.406 ops/s
Iteration   5: 5616051.673 ops/s
Iteration   6: 5889667.333 ops/s
Iteration   7: 5911217.634 ops/s
Iteration   8: 5802415.983 ops/s
Iteration   9: 5791985.187 ops/s
Iteration  10: 5824466.425 ops/s
Iteration  11: 5822755.252 ops/s
Iteration  12: 5858615.176 ops/s
Iteration  13: 5849054.296 ops/s
Iteration  14: 5662416.235 ops/s
Iteration  15: 5524965.068 ops/s
Iteration  16: 5857127.171 ops/s
Iteration  17: 5923195.635 ops/s
Iteration  18: 5821901.606 ops/s
Iteration  19: 5880054.097 ops/s
Iteration  20: 5797150.061 ops/s
Iteration  21: 5747810.775 ops/s
Iteration  22: 5696023.825 ops/s
Iteration  23: 5686391.175 ops/s
Iteration  24: 5755455.463 ops/s
Iteration  25: 5835697.123 ops/s
Iteration  26: 5784552.635 ops/s
Iteration  27: 5741833.801 ops/s
Iteration  28: 5784413.838 ops/s
Iteration  29: 5929775.074 ops/s
Iteration  30: 5973236.527 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_occurrencesOf":
  5791137.231 ±(99.9%) 67251.437 ops/s [Average]
  (min, avg, max) = (5524965.068, 5791137.231, 5973236.527), stdev = 100658.793
  CI (99.9%): [5723885.793, 5858388.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  5791137.231 ± 67251.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56.842 ops/s
# Warmup Iteration   2: 82.151 ops/s
# Warmup Iteration   3: 92.179 ops/s
# Warmup Iteration   4: 93.738 ops/s
# Warmup Iteration   5: 92.214 ops/s
# Warmup Iteration   6: 93.681 ops/s
# Warmup Iteration   7: 83.261 ops/s
# Warmup Iteration   8: 90.169 ops/s
# Warmup Iteration   9: 92.263 ops/s
# Warmup Iteration  10: 93.889 ops/s
# Warmup Iteration  11: 92.906 ops/s
# Warmup Iteration  12: 92.253 ops/s
# Warmup Iteration  13: 92.214 ops/s
# Warmup Iteration  14: 92.380 ops/s
# Warmup Iteration  15: 92.638 ops/s
# Warmup Iteration  16: 93.192 ops/s
# Warmup Iteration  17: 92.351 ops/s
# Warmup Iteration  18: 92.321 ops/s
# Warmup Iteration  19: 91.974 ops/s
# Warmup Iteration  20: 92.941 ops/s
# Warmup Iteration  21: 92.400 ops/s
# Warmup Iteration  22: 93.471 ops/s
# Warmup Iteration  23: 93.592 ops/s
# Warmup Iteration  24: 92.920 ops/s
# Warmup Iteration  25: 92.981 ops/s
# Warmup Iteration  26: 92.156 ops/s
# Warmup Iteration  27: 92.459 ops/s
# Warmup Iteration  28: 93.046 ops/s
# Warmup Iteration  29: 93.073 ops/s
# Warmup Iteration  30: 90.041 ops/s
Iteration   1: 91.732 ops/s
Iteration   2: 93.520 ops/s
Iteration   3: 93.410 ops/s
Iteration   4: 91.666 ops/s
Iteration   5: 91.309 ops/s
Iteration   6: 92.825 ops/s
Iteration   7: 93.398 ops/s
Iteration   8: 94.461 ops/s
Iteration   9: 91.966 ops/s
Iteration  10: 90.725 ops/s
Iteration  11: 92.217 ops/s
Iteration  12: 91.598 ops/s
Iteration  13: 92.671 ops/s
Iteration  14: 93.771 ops/s
Iteration  15: 92.963 ops/s
Iteration  16: 92.192 ops/s
Iteration  17: 91.312 ops/s
Iteration  18: 93.184 ops/s
Iteration  19: 93.484 ops/s
Iteration  20: 93.023 ops/s
Iteration  21: 92.706 ops/s
Iteration  22: 91.879 ops/s
Iteration  23: 92.519 ops/s
Iteration  24: 92.885 ops/s
Iteration  25: 89.980 ops/s
Iteration  26: 91.728 ops/s
Iteration  27: 92.523 ops/s
Iteration  28: 92.934 ops/s
Iteration  29: 89.658 ops/s
Iteration  30: 93.097 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelCollect":
  92.378 ±(99.9%) 0.728 ops/s [Average]
  (min, avg, max) = (89.658, 92.378, 94.461), stdev = 1.090
  CI (99.9%): [91.650, 93.106] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt   Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_parallelCollect  thrpt   30  92.378 ± 0.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelStream_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelStream_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566818.079 ops/s
# Warmup Iteration   2: 628853.103 ops/s
# Warmup Iteration   3: 823648.467 ops/s
# Warmup Iteration   4: 818991.555 ops/s
# Warmup Iteration   5: 804111.125 ops/s
# Warmup Iteration   6: 814864.806 ops/s
# Warmup Iteration   7: 799375.383 ops/s
# Warmup Iteration   8: 814675.419 ops/s
# Warmup Iteration   9: 810886.412 ops/s
# Warmup Iteration  10: 715273.531 ops/s
# Warmup Iteration  11: 788936.120 ops/s
# Warmup Iteration  12: 831596.074 ops/s
# Warmup Iteration  13: 839255.197 ops/s
# Warmup Iteration  14: 831502.782 ops/s
# Warmup Iteration  15: 841929.118 ops/s
# Warmup Iteration  16: 821567.648 ops/s
# Warmup Iteration  17: 877456.148 ops/s
# Warmup Iteration  18: 883298.093 ops/s
# Warmup Iteration  19: 876909.230 ops/s
# Warmup Iteration  20: 872997.269 ops/s
# Warmup Iteration  21: 885626.585 ops/s
# Warmup Iteration  22: 872201.049 ops/s
# Warmup Iteration  23: 876820.603 ops/s
# Warmup Iteration  24: 855612.320 ops/s
# Warmup Iteration  25: 889632.915 ops/s
# Warmup Iteration  26: 872836.535 ops/s
# Warmup Iteration  27: 870249.225 ops/s
# Warmup Iteration  28: 872138.576 ops/s
# Warmup Iteration  29: 884261.201 ops/s
# Warmup Iteration  30: 867281.796 ops/s
Iteration   1: 873302.679 ops/s
Iteration   2: 886780.234 ops/s
Iteration   3: 870377.760 ops/s
Iteration   4: 888002.640 ops/s
Iteration   5: 876650.184 ops/s
Iteration   6: 876363.249 ops/s
Iteration   7: 874951.325 ops/s
Iteration   8: 872423.236 ops/s
Iteration   9: 883420.032 ops/s
Iteration  10: 877136.226 ops/s
Iteration  11: 882887.677 ops/s
Iteration  12: 874424.430 ops/s
Iteration  13: 856044.691 ops/s
Iteration  14: 864261.113 ops/s
Iteration  15: 862088.277 ops/s
Iteration  16: 860305.545 ops/s
Iteration  17: 863466.861 ops/s
Iteration  18: 868799.599 ops/s
Iteration  19: 875043.554 ops/s
Iteration  20: 870693.769 ops/s
Iteration  21: 865634.116 ops/s
Iteration  22: 877011.066 ops/s
Iteration  23: 877529.847 ops/s
Iteration  24: 865000.316 ops/s
Iteration  25: 865881.787 ops/s
Iteration  26: 873498.085 ops/s
Iteration  27: 867725.243 ops/s
Iteration  28: 873739.556 ops/s
Iteration  29: 873705.107 ops/s
Iteration  30: 870719.761 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_parallelStream_throws":
  872262.266 ±(99.9%) 5057.547 ops/s [Average]
  (min, avg, max) = (856044.691, 872262.266, 888002.640), stdev = 7569.900
  CI (99.9%): [867204.718, 877319.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_parallelStream_throws  thrpt   30  872262.266 ± 5057.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270503.292 ops/s
# Warmup Iteration   2: 485327.391 ops/s
# Warmup Iteration   3: 546986.656 ops/s
# Warmup Iteration   4: 560888.611 ops/s
# Warmup Iteration   5: 529868.011 ops/s
# Warmup Iteration   6: 488649.257 ops/s
# Warmup Iteration   7: 560965.935 ops/s
# Warmup Iteration   8: 573441.355 ops/s
# Warmup Iteration   9: 562384.339 ops/s
# Warmup Iteration  10: 564677.860 ops/s
# Warmup Iteration  11: 540057.275 ops/s
# Warmup Iteration  12: 564109.141 ops/s
# Warmup Iteration  13: 556719.360 ops/s
# Warmup Iteration  14: 561429.411 ops/s
# Warmup Iteration  15: 562471.576 ops/s
# Warmup Iteration  16: 565083.046 ops/s
# Warmup Iteration  17: 568796.652 ops/s
# Warmup Iteration  18: 564759.256 ops/s
# Warmup Iteration  19: 547479.937 ops/s
# Warmup Iteration  20: 559366.106 ops/s
# Warmup Iteration  21: 542519.762 ops/s
# Warmup Iteration  22: 542418.801 ops/s
# Warmup Iteration  23: 558707.478 ops/s
# Warmup Iteration  24: 560103.930 ops/s
# Warmup Iteration  25: 561109.751 ops/s
# Warmup Iteration  26: 571229.062 ops/s
# Warmup Iteration  27: 551661.964 ops/s
# Warmup Iteration  28: 554640.052 ops/s
# Warmup Iteration  29: 556396.266 ops/s
# Warmup Iteration  30: 567257.737 ops/s
Iteration   1: 572476.692 ops/s
Iteration   2: 567827.546 ops/s
Iteration   3: 567675.359 ops/s
Iteration   4: 570119.592 ops/s
Iteration   5: 564496.739 ops/s
Iteration   6: 559382.747 ops/s
Iteration   7: 556537.229 ops/s
Iteration   8: 556459.513 ops/s
Iteration   9: 563577.319 ops/s
Iteration  10: 568181.033 ops/s
Iteration  11: 570350.315 ops/s
Iteration  12: 561914.115 ops/s
Iteration  13: 560457.676 ops/s
Iteration  14: 566535.455 ops/s
Iteration  15: 565402.434 ops/s
Iteration  16: 539352.873 ops/s
Iteration  17: 572771.977 ops/s
Iteration  18: 571366.308 ops/s
Iteration  19: 566706.863 ops/s
Iteration  20: 566898.641 ops/s
Iteration  21: 563626.819 ops/s
Iteration  22: 563535.450 ops/s
Iteration  23: 559239.856 ops/s
Iteration  24: 560995.099 ops/s
Iteration  25: 570478.279 ops/s
Iteration  26: 555649.828 ops/s
Iteration  27: 555733.371 ops/s
Iteration  28: 559627.822 ops/s
Iteration  29: 565649.444 ops/s
Iteration  30: 565752.301 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partition":
  563625.956 ±(99.9%) 4545.038 ops/s [Average]
  (min, avg, max) = (539352.873, 563625.956, 572771.977), stdev = 6802.800
  CI (99.9%): [559080.918, 568170.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_partition  thrpt   30  563625.956 ± 4545.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 221116.005 ops/s
# Warmup Iteration   2: 407323.183 ops/s
# Warmup Iteration   3: 475960.622 ops/s
# Warmup Iteration   4: 482769.961 ops/s
# Warmup Iteration   5: 481889.488 ops/s
# Warmup Iteration   6: 391758.875 ops/s
# Warmup Iteration   7: 475534.468 ops/s
# Warmup Iteration   8: 475870.502 ops/s
# Warmup Iteration   9: 472106.299 ops/s
# Warmup Iteration  10: 483098.475 ops/s
# Warmup Iteration  11: 471086.070 ops/s
# Warmup Iteration  12: 476289.302 ops/s
# Warmup Iteration  13: 482148.696 ops/s
# Warmup Iteration  14: 471977.788 ops/s
# Warmup Iteration  15: 484106.337 ops/s
# Warmup Iteration  16: 485623.725 ops/s
# Warmup Iteration  17: 482465.041 ops/s
# Warmup Iteration  18: 482531.102 ops/s
# Warmup Iteration  19: 475429.149 ops/s
# Warmup Iteration  20: 484054.615 ops/s
# Warmup Iteration  21: 485008.209 ops/s
# Warmup Iteration  22: 483017.045 ops/s
# Warmup Iteration  23: 487932.541 ops/s
# Warmup Iteration  24: 489720.055 ops/s
# Warmup Iteration  25: 486925.351 ops/s
# Warmup Iteration  26: 486229.979 ops/s
# Warmup Iteration  27: 483581.220 ops/s
# Warmup Iteration  28: 485867.134 ops/s
# Warmup Iteration  29: 484990.373 ops/s
# Warmup Iteration  30: 485651.603 ops/s
Iteration   1: 483593.585 ops/s
Iteration   2: 486139.206 ops/s
Iteration   3: 485653.880 ops/s
Iteration   4: 485652.639 ops/s
Iteration   5: 485286.535 ops/s
Iteration   6: 478476.199 ops/s
Iteration   7: 486393.408 ops/s
Iteration   8: 481057.302 ops/s
Iteration   9: 486104.244 ops/s
Iteration  10: 488071.902 ops/s
Iteration  11: 483760.754 ops/s
Iteration  12: 488998.022 ops/s
Iteration  13: 483171.197 ops/s
Iteration  14: 488033.428 ops/s
Iteration  15: 485864.127 ops/s
Iteration  16: 487942.246 ops/s
Iteration  17: 488801.756 ops/s
Iteration  18: 482775.225 ops/s
Iteration  19: 481534.192 ops/s
Iteration  20: 482999.653 ops/s
Iteration  21: 474449.058 ops/s
Iteration  22: 476777.694 ops/s
Iteration  23: 476534.196 ops/s
Iteration  24: 479449.274 ops/s
Iteration  25: 475833.820 ops/s
Iteration  26: 477745.453 ops/s
Iteration  27: 470832.940 ops/s
Iteration  28: 474651.928 ops/s
Iteration  29: 483107.146 ops/s
Iteration  30: 479675.207 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_partitionWith":
  482312.207 ±(99.9%) 3260.948 ops/s [Average]
  (min, avg, max) = (470832.940, 482312.207, 488998.022), stdev = 4880.834
  CI (99.9%): [479051.259, 485573.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_partitionWith  thrpt   30  482312.207 ± 3260.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 288965.112 ops/s
# Warmup Iteration   2: 476833.685 ops/s
# Warmup Iteration   3: 565120.103 ops/s
# Warmup Iteration   4: 551937.323 ops/s
# Warmup Iteration   5: 561225.590 ops/s
# Warmup Iteration   6: 470894.846 ops/s
# Warmup Iteration   7: 558164.527 ops/s
# Warmup Iteration   8: 537313.657 ops/s
# Warmup Iteration   9: 554943.501 ops/s
# Warmup Iteration  10: 566567.987 ops/s
# Warmup Iteration  11: 534660.451 ops/s
# Warmup Iteration  12: 533839.849 ops/s
# Warmup Iteration  13: 561249.445 ops/s
# Warmup Iteration  14: 537670.307 ops/s
# Warmup Iteration  15: 561432.376 ops/s
# Warmup Iteration  16: 557030.331 ops/s
# Warmup Iteration  17: 561579.559 ops/s
# Warmup Iteration  18: 551774.736 ops/s
# Warmup Iteration  19: 557236.460 ops/s
# Warmup Iteration  20: 559072.575 ops/s
# Warmup Iteration  21: 553770.193 ops/s
# Warmup Iteration  22: 559513.160 ops/s
# Warmup Iteration  23: 557556.768 ops/s
# Warmup Iteration  24: 542030.890 ops/s
# Warmup Iteration  25: 562376.087 ops/s
# Warmup Iteration  26: 558310.434 ops/s
# Warmup Iteration  27: 560308.421 ops/s
# Warmup Iteration  28: 535725.478 ops/s
# Warmup Iteration  29: 559894.183 ops/s
# Warmup Iteration  30: 558075.560 ops/s
Iteration   1: 550110.931 ops/s
Iteration   2: 552260.930 ops/s
Iteration   3: 560347.737 ops/s
Iteration   4: 560602.386 ops/s
Iteration   5: 556067.267 ops/s
Iteration   6: 569489.166 ops/s
Iteration   7: 562756.972 ops/s
Iteration   8: 561692.780 ops/s
Iteration   9: 569188.839 ops/s
Iteration  10: 564034.274 ops/s
Iteration  11: 560409.483 ops/s
Iteration  12: 553780.877 ops/s
Iteration  13: 565131.867 ops/s
Iteration  14: 563283.005 ops/s
Iteration  15: 564920.687 ops/s
Iteration  16: 560678.358 ops/s
Iteration  17: 557769.386 ops/s
Iteration  18: 542316.449 ops/s
Iteration  19: 539599.768 ops/s
Iteration  20: 543371.623 ops/s
Iteration  21: 564960.837 ops/s
Iteration  22: 558147.130 ops/s
Iteration  23: 535880.300 ops/s
Iteration  24: 531854.019 ops/s
Iteration  25: 526345.511 ops/s
Iteration  26: 544841.402 ops/s
Iteration  27: 546958.731 ops/s
Iteration  28: 555223.989 ops/s
Iteration  29: 554676.431 ops/s
Iteration  30: 557006.953 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reduceOptional":
  554456.936 ±(99.9%) 7401.074 ops/s [Average]
  (min, avg, max) = (526345.511, 554456.936, 569489.166), stdev = 11077.580
  CI (99.9%): [547055.862, 561858.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  554456.936 ± 7401.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536063.562 ops/s
# Warmup Iteration   2: 1208351.774 ops/s
# Warmup Iteration   3: 1269199.242 ops/s
# Warmup Iteration   4: 1097711.562 ops/s
# Warmup Iteration   5: 1236778.891 ops/s
# Warmup Iteration   6: 1236919.922 ops/s
# Warmup Iteration   7: 1250310.340 ops/s
# Warmup Iteration   8: 1217539.908 ops/s
# Warmup Iteration   9: 1273959.130 ops/s
# Warmup Iteration  10: 1265345.076 ops/s
# Warmup Iteration  11: 1274843.318 ops/s
# Warmup Iteration  12: 1228002.476 ops/s
# Warmup Iteration  13: 1268140.280 ops/s
# Warmup Iteration  14: 1259369.642 ops/s
# Warmup Iteration  15: 1272903.300 ops/s
# Warmup Iteration  16: 1264708.841 ops/s
# Warmup Iteration  17: 1253577.404 ops/s
# Warmup Iteration  18: 1269475.231 ops/s
# Warmup Iteration  19: 1265093.712 ops/s
# Warmup Iteration  20: 1276164.782 ops/s
# Warmup Iteration  21: 1273623.877 ops/s
# Warmup Iteration  22: 1285204.043 ops/s
# Warmup Iteration  23: 1292005.190 ops/s
# Warmup Iteration  24: 1275544.138 ops/s
# Warmup Iteration  25: 1269196.294 ops/s
# Warmup Iteration  26: 1287407.085 ops/s
# Warmup Iteration  27: 1292120.909 ops/s
# Warmup Iteration  28: 1291089.742 ops/s
# Warmup Iteration  29: 1288054.574 ops/s
# Warmup Iteration  30: 1292058.143 ops/s
Iteration   1: 1289287.452 ops/s
Iteration   2: 1281477.942 ops/s
Iteration   3: 1246553.615 ops/s
Iteration   4: 1291624.923 ops/s
Iteration   5: 1288826.345 ops/s
Iteration   6: 1271922.326 ops/s
Iteration   7: 1287937.164 ops/s
Iteration   8: 1259051.761 ops/s
Iteration   9: 1301177.494 ops/s
Iteration  10: 1289059.146 ops/s
Iteration  11: 1230881.903 ops/s
Iteration  12: 1267869.800 ops/s
Iteration  13: 1252223.472 ops/s
Iteration  14: 1253363.166 ops/s
Iteration  15: 1270381.629 ops/s
Iteration  16: 1250611.728 ops/s
Iteration  17: 1278980.342 ops/s
Iteration  18: 1295784.893 ops/s
Iteration  19: 1290390.430 ops/s
Iteration  20: 1287738.362 ops/s
Iteration  21: 1288291.732 ops/s
Iteration  22: 1297394.993 ops/s
Iteration  23: 1281681.980 ops/s
Iteration  24: 1285253.442 ops/s
Iteration  25: 1283191.905 ops/s
Iteration  26: 1291435.065 ops/s
Iteration  27: 1295806.276 ops/s
Iteration  28: 1283414.880 ops/s
Iteration  29: 1281213.159 ops/s
Iteration  30: 1280472.251 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_reject":
  1278443.319 ±(99.9%) 11549.422 ops/s [Average]
  (min, avg, max) = (1230881.903, 1278443.319, 1301177.494), stdev = 17286.633
  CI (99.9%): [1266893.897, 1289992.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_reject  thrpt   30  1278443.319 ± 11549.422  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2618080.940 ops/s
# Warmup Iteration   2: 6017899.261 ops/s
# Warmup Iteration   3: 5087319.131 ops/s
# Warmup Iteration   4: 6117623.401 ops/s
# Warmup Iteration   5: 5956835.463 ops/s
# Warmup Iteration   6: 6072887.152 ops/s
# Warmup Iteration   7: 6126897.796 ops/s
# Warmup Iteration   8: 5914581.411 ops/s
# Warmup Iteration   9: 6099255.180 ops/s
# Warmup Iteration  10: 6087438.341 ops/s
# Warmup Iteration  11: 6085535.566 ops/s
# Warmup Iteration  12: 6092785.217 ops/s
# Warmup Iteration  13: 6014544.751 ops/s
# Warmup Iteration  14: 6089696.049 ops/s
# Warmup Iteration  15: 5821204.783 ops/s
# Warmup Iteration  16: 6112862.020 ops/s
# Warmup Iteration  17: 6069347.638 ops/s
# Warmup Iteration  18: 5776103.150 ops/s
# Warmup Iteration  19: 5969306.717 ops/s
# Warmup Iteration  20: 6129729.513 ops/s
# Warmup Iteration  21: 5943947.466 ops/s
# Warmup Iteration  22: 6017444.858 ops/s
# Warmup Iteration  23: 6081579.434 ops/s
# Warmup Iteration  24: 6117382.815 ops/s
# Warmup Iteration  25: 6073967.414 ops/s
# Warmup Iteration  26: 6092547.015 ops/s
# Warmup Iteration  27: 6136352.076 ops/s
# Warmup Iteration  28: 6128800.029 ops/s
# Warmup Iteration  29: 6112526.202 ops/s
# Warmup Iteration  30: 6123370.205 ops/s
Iteration   1: 6141579.576 ops/s
Iteration   2: 6164833.853 ops/s
Iteration   3: 6150989.722 ops/s
Iteration   4: 6129968.515 ops/s
Iteration   5: 6123151.735 ops/s
Iteration   6: 6199636.390 ops/s
Iteration   7: 6188411.986 ops/s
Iteration   8: 6211084.947 ops/s
Iteration   9: 6191710.998 ops/s
Iteration  10: 6064180.437 ops/s
Iteration  11: 6080545.722 ops/s
Iteration  12: 6138445.867 ops/s
Iteration  13: 6163136.671 ops/s
Iteration  14: 6115602.289 ops/s
Iteration  15: 6107404.096 ops/s
Iteration  16: 6153171.660 ops/s
Iteration  17: 6204151.844 ops/s
Iteration  18: 6189356.099 ops/s
Iteration  19: 6127228.386 ops/s
Iteration  20: 6156906.385 ops/s
Iteration  21: 6118614.310 ops/s
Iteration  22: 6118179.862 ops/s
Iteration  23: 6113711.800 ops/s
Iteration  24: 6138758.116 ops/s
Iteration  25: 6147325.898 ops/s
Iteration  26: 6125224.413 ops/s
Iteration  27: 6107958.407 ops/s
Iteration  28: 6113235.880 ops/s
Iteration  29: 6174107.843 ops/s
Iteration  30: 6171523.179 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith":
  6144337.896 ±(99.9%) 24387.045 ops/s [Average]
  (min, avg, max) = (6064180.437, 6144337.896, 6211084.947), stdev = 36501.383
  CI (99.9%): [6119950.852, 6168724.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_rejectWith  thrpt   30  6144337.896 ± 24387.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570301.897 ops/s
# Warmup Iteration   2: 1316321.787 ops/s
# Warmup Iteration   3: 1356526.935 ops/s
# Warmup Iteration   4: 1109630.094 ops/s
# Warmup Iteration   5: 1346540.909 ops/s
# Warmup Iteration   6: 1354495.719 ops/s
# Warmup Iteration   7: 1358220.799 ops/s
# Warmup Iteration   8: 1342505.057 ops/s
# Warmup Iteration   9: 1357184.273 ops/s
# Warmup Iteration  10: 1345981.044 ops/s
# Warmup Iteration  11: 1352328.791 ops/s
# Warmup Iteration  12: 1351173.911 ops/s
# Warmup Iteration  13: 1359800.569 ops/s
# Warmup Iteration  14: 1362112.968 ops/s
# Warmup Iteration  15: 1353579.145 ops/s
# Warmup Iteration  16: 1362344.407 ops/s
# Warmup Iteration  17: 1362158.099 ops/s
# Warmup Iteration  18: 1359202.226 ops/s
# Warmup Iteration  19: 1352113.147 ops/s
# Warmup Iteration  20: 1361717.995 ops/s
# Warmup Iteration  21: 1365910.140 ops/s
# Warmup Iteration  22: 1362209.241 ops/s
# Warmup Iteration  23: 1354836.427 ops/s
# Warmup Iteration  24: 1344296.857 ops/s
# Warmup Iteration  25: 1353843.151 ops/s
# Warmup Iteration  26: 1348599.574 ops/s
# Warmup Iteration  27: 1363883.000 ops/s
# Warmup Iteration  28: 1365922.756 ops/s
# Warmup Iteration  29: 1354949.493 ops/s
# Warmup Iteration  30: 1348795.559 ops/s
Iteration   1: 1345714.015 ops/s
Iteration   2: 1322718.464 ops/s
Iteration   3: 1349529.148 ops/s
Iteration   4: 1349864.483 ops/s
Iteration   5: 1341586.250 ops/s
Iteration   6: 1354188.071 ops/s
Iteration   7: 1339144.533 ops/s
Iteration   8: 1346463.581 ops/s
Iteration   9: 1352886.626 ops/s
Iteration  10: 1351273.621 ops/s
Iteration  11: 1348999.527 ops/s
Iteration  12: 1339306.852 ops/s
Iteration  13: 1348859.901 ops/s
Iteration  14: 1351625.042 ops/s
Iteration  15: 1351015.826 ops/s
Iteration  16: 1344062.623 ops/s
Iteration  17: 1333102.698 ops/s
Iteration  18: 1337065.456 ops/s
Iteration  19: 1341291.951 ops/s
Iteration  20: 1323468.147 ops/s
Iteration  21: 1355514.131 ops/s
Iteration  22: 1349287.590 ops/s
Iteration  23: 1357182.724 ops/s
Iteration  24: 1354379.131 ops/s
Iteration  25: 1347411.763 ops/s
Iteration  26: 1367218.587 ops/s
Iteration  27: 1350432.545 ops/s
Iteration  28: 1361873.188 ops/s
Iteration  29: 1350504.086 ops/s
Iteration  30: 1358704.301 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_rejectWith_target":
  1347489.162 ±(99.9%) 6579.675 ops/s [Average]
  (min, avg, max) = (1322718.464, 1347489.162, 1367218.587), stdev = 9848.148
  CI (99.9%): [1340909.487, 1354068.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1347489.162 ± 6579.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437974.079 ops/s
# Warmup Iteration   2: 877251.578 ops/s
# Warmup Iteration   3: 944983.617 ops/s
# Warmup Iteration   4: 946833.638 ops/s
# Warmup Iteration   5: 783982.551 ops/s
# Warmup Iteration   6: 950626.620 ops/s
# Warmup Iteration   7: 957428.141 ops/s
# Warmup Iteration   8: 947110.801 ops/s
# Warmup Iteration   9: 945680.866 ops/s
# Warmup Iteration  10: 948930.360 ops/s
# Warmup Iteration  11: 956623.334 ops/s
# Warmup Iteration  12: 954783.972 ops/s
# Warmup Iteration  13: 958464.150 ops/s
# Warmup Iteration  14: 954382.016 ops/s
# Warmup Iteration  15: 949330.460 ops/s
# Warmup Iteration  16: 958948.981 ops/s
# Warmup Iteration  17: 954137.018 ops/s
# Warmup Iteration  18: 956711.926 ops/s
# Warmup Iteration  19: 955211.448 ops/s
# Warmup Iteration  20: 957821.059 ops/s
# Warmup Iteration  21: 953937.180 ops/s
# Warmup Iteration  22: 955566.850 ops/s
# Warmup Iteration  23: 939457.402 ops/s
# Warmup Iteration  24: 936979.812 ops/s
# Warmup Iteration  25: 958789.970 ops/s
# Warmup Iteration  26: 938565.337 ops/s
# Warmup Iteration  27: 952421.326 ops/s
# Warmup Iteration  28: 941045.962 ops/s
# Warmup Iteration  29: 953577.431 ops/s
# Warmup Iteration  30: 956455.960 ops/s
Iteration   1: 953939.224 ops/s
Iteration   2: 909963.146 ops/s
Iteration   3: 945948.423 ops/s
Iteration   4: 958221.687 ops/s
Iteration   5: 943577.640 ops/s
Iteration   6: 947739.942 ops/s
Iteration   7: 939964.732 ops/s
Iteration   8: 956193.796 ops/s
Iteration   9: 960604.817 ops/s
Iteration  10: 960796.401 ops/s
Iteration  11: 953693.990 ops/s
Iteration  12: 953109.881 ops/s
Iteration  13: 958116.762 ops/s
Iteration  14: 954552.335 ops/s
Iteration  15: 960806.675 ops/s
Iteration  16: 956784.171 ops/s
Iteration  17: 958902.684 ops/s
Iteration  18: 960462.116 ops/s
Iteration  19: 952361.936 ops/s
Iteration  20: 956820.179 ops/s
Iteration  21: 945432.665 ops/s
Iteration  22: 947425.622 ops/s
Iteration  23: 939146.103 ops/s
Iteration  24: 955329.346 ops/s
Iteration  25: 945541.940 ops/s
Iteration  26: 952546.224 ops/s
Iteration  27: 958967.037 ops/s
Iteration  28: 963843.887 ops/s
Iteration  29: 962892.944 ops/s
Iteration  30: 946842.436 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAll":
  952017.625 ±(99.9%) 6970.508 ops/s [Average]
  (min, avg, max) = (909963.146, 952017.625, 963843.887), stdev = 10433.130
  CI (99.9%): [945047.116, 958988.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeAll  thrpt   30  952017.625 ± 6970.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415878.054 ops/s
# Warmup Iteration   2: 842847.971 ops/s
# Warmup Iteration   3: 939532.680 ops/s
# Warmup Iteration   4: 945577.562 ops/s
# Warmup Iteration   5: 767510.701 ops/s
# Warmup Iteration   6: 939455.349 ops/s
# Warmup Iteration   7: 942207.785 ops/s
# Warmup Iteration   8: 925170.812 ops/s
# Warmup Iteration   9: 935759.395 ops/s
# Warmup Iteration  10: 939513.749 ops/s
# Warmup Iteration  11: 938078.259 ops/s
# Warmup Iteration  12: 949372.804 ops/s
# Warmup Iteration  13: 953687.400 ops/s
# Warmup Iteration  14: 948804.609 ops/s
# Warmup Iteration  15: 943213.256 ops/s
# Warmup Iteration  16: 934066.878 ops/s
# Warmup Iteration  17: 945823.151 ops/s
# Warmup Iteration  18: 941249.355 ops/s
# Warmup Iteration  19: 947463.053 ops/s
# Warmup Iteration  20: 956177.773 ops/s
# Warmup Iteration  21: 947535.849 ops/s
# Warmup Iteration  22: 944120.681 ops/s
# Warmup Iteration  23: 944477.941 ops/s
# Warmup Iteration  24: 941068.409 ops/s
# Warmup Iteration  25: 895417.670 ops/s
# Warmup Iteration  26: 932414.871 ops/s
# Warmup Iteration  27: 915221.156 ops/s
# Warmup Iteration  28: 937822.973 ops/s
# Warmup Iteration  29: 921992.996 ops/s
# Warmup Iteration  30: 960984.736 ops/s
Iteration   1: 937633.177 ops/s
Iteration   2: 925136.398 ops/s
Iteration   3: 926203.877 ops/s
Iteration   4: 948746.993 ops/s
Iteration   5: 950235.932 ops/s
Iteration   6: 949718.842 ops/s
Iteration   7: 939456.268 ops/s
Iteration   8: 926919.230 ops/s
Iteration   9: 893823.458 ops/s
Iteration  10: 900467.305 ops/s
Iteration  11: 894057.522 ops/s
Iteration  12: 872574.459 ops/s
Iteration  13: 925377.648 ops/s
Iteration  14: 932424.307 ops/s
Iteration  15: 950042.850 ops/s
Iteration  16: 925675.111 ops/s
Iteration  17: 915667.853 ops/s
Iteration  18: 908917.140 ops/s
Iteration  19: 894787.832 ops/s
Iteration  20: 889499.743 ops/s
Iteration  21: 938500.319 ops/s
Iteration  22: 916373.618 ops/s
Iteration  23: 919808.409 ops/s
Iteration  24: 908452.013 ops/s
Iteration  25: 928548.888 ops/s
Iteration  26: 943453.645 ops/s
Iteration  27: 939933.493 ops/s
Iteration  28: 942268.271 ops/s
Iteration  29: 949726.898 ops/s
Iteration  30: 931905.315 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeAllIterable":
  924211.227 ±(99.9%) 14002.981 ops/s [Average]
  (min, avg, max) = (872574.459, 924211.227, 950235.932), stdev = 20959.005
  CI (99.9%): [910208.246, 938214.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeAllIterable  thrpt   30  924211.227 ± 14002.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 402867.390 ops/s
# Warmup Iteration   2: 705164.476 ops/s
# Warmup Iteration   3: 775663.830 ops/s
# Warmup Iteration   4: 790756.326 ops/s
# Warmup Iteration   5: 786055.868 ops/s
# Warmup Iteration   6: 599976.136 ops/s
# Warmup Iteration   7: 763357.507 ops/s
# Warmup Iteration   8: 787296.010 ops/s
# Warmup Iteration   9: 766903.162 ops/s
# Warmup Iteration  10: 793871.061 ops/s
# Warmup Iteration  11: 785749.319 ops/s
# Warmup Iteration  12: 798854.640 ops/s
# Warmup Iteration  13: 810716.095 ops/s
# Warmup Iteration  14: 814359.357 ops/s
# Warmup Iteration  15: 804658.668 ops/s
# Warmup Iteration  16: 803965.808 ops/s
# Warmup Iteration  17: 803187.951 ops/s
# Warmup Iteration  18: 791428.877 ops/s
# Warmup Iteration  19: 802069.775 ops/s
# Warmup Iteration  20: 804989.074 ops/s
# Warmup Iteration  21: 798818.268 ops/s
# Warmup Iteration  22: 808101.575 ops/s
# Warmup Iteration  23: 803359.476 ops/s
# Warmup Iteration  24: 803179.929 ops/s
# Warmup Iteration  25: 798995.805 ops/s
# Warmup Iteration  26: 805157.623 ops/s
# Warmup Iteration  27: 802971.861 ops/s
# Warmup Iteration  28: 790688.797 ops/s
# Warmup Iteration  29: 796875.245 ops/s
# Warmup Iteration  30: 800945.263 ops/s
Iteration   1: 805323.191 ops/s
Iteration   2: 812153.161 ops/s
Iteration   3: 802340.456 ops/s
Iteration   4: 797086.460 ops/s
Iteration   5: 793406.612 ops/s
Iteration   6: 796483.846 ops/s
Iteration   7: 800727.308 ops/s
Iteration   8: 785808.451 ops/s
Iteration   9: 786935.622 ops/s
Iteration  10: 798972.438 ops/s
Iteration  11: 784782.083 ops/s
Iteration  12: 763949.149 ops/s
Iteration  13: 790190.950 ops/s
Iteration  14: 783476.965 ops/s
Iteration  15: 803209.330 ops/s
Iteration  16: 797453.020 ops/s
Iteration  17: 785136.594 ops/s
Iteration  18: 777232.022 ops/s
Iteration  19: 784027.546 ops/s
Iteration  20: 779786.329 ops/s
Iteration  21: 810544.587 ops/s
Iteration  22: 812602.073 ops/s
Iteration  23: 803632.138 ops/s
Iteration  24: 801604.700 ops/s
Iteration  25: 807498.369 ops/s
Iteration  26: 801117.038 ops/s
Iteration  27: 798426.167 ops/s
Iteration  28: 796103.945 ops/s
Iteration  29: 797395.021 ops/s
Iteration  30: 785156.436 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIf":
  794752.067 ±(99.9%) 7548.207 ops/s [Average]
  (min, avg, max) = (763949.149, 794752.067, 812602.073), stdev = 11297.802
  CI (99.9%): [787203.860, 802300.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeIf  thrpt   30  794752.067 ± 7548.207  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570827.381 ops/s
# Warmup Iteration   2: 986022.083 ops/s
# Warmup Iteration   3: 1136352.494 ops/s
# Warmup Iteration   4: 1118885.043 ops/s
# Warmup Iteration   5: 1161105.815 ops/s
# Warmup Iteration   6: 967888.301 ops/s
# Warmup Iteration   7: 1141309.137 ops/s
# Warmup Iteration   8: 1162372.571 ops/s
# Warmup Iteration   9: 1154925.744 ops/s
# Warmup Iteration  10: 1155082.417 ops/s
# Warmup Iteration  11: 1151771.620 ops/s
# Warmup Iteration  12: 1158598.202 ops/s
# Warmup Iteration  13: 1161026.583 ops/s
# Warmup Iteration  14: 1133142.327 ops/s
# Warmup Iteration  15: 1119839.913 ops/s
# Warmup Iteration  16: 1148417.567 ops/s
# Warmup Iteration  17: 1149456.791 ops/s
# Warmup Iteration  18: 1154505.661 ops/s
# Warmup Iteration  19: 1188803.460 ops/s
# Warmup Iteration  20: 1189448.279 ops/s
# Warmup Iteration  21: 1170680.398 ops/s
# Warmup Iteration  22: 1119192.006 ops/s
# Warmup Iteration  23: 1111516.402 ops/s
# Warmup Iteration  24: 1169932.101 ops/s
# Warmup Iteration  25: 1101650.999 ops/s
# Warmup Iteration  26: 1152148.118 ops/s
# Warmup Iteration  27: 1167123.466 ops/s
# Warmup Iteration  28: 1133000.521 ops/s
# Warmup Iteration  29: 1102325.024 ops/s
# Warmup Iteration  30: 1145218.425 ops/s
Iteration   1: 1112441.086 ops/s
Iteration   2: 1159742.341 ops/s
Iteration   3: 1187955.794 ops/s
Iteration   4: 1156259.918 ops/s
Iteration   5: 1117411.015 ops/s
Iteration   6: 1119530.794 ops/s
Iteration   7: 1106003.240 ops/s
Iteration   8: 1128271.903 ops/s
Iteration   9: 1137819.327 ops/s
Iteration  10: 1169040.948 ops/s
Iteration  11: 1160103.337 ops/s
Iteration  12: 1158096.418 ops/s
Iteration  13: 1116499.804 ops/s
Iteration  14: 1137472.781 ops/s
Iteration  15: 1121829.156 ops/s
Iteration  16: 1108414.475 ops/s
Iteration  17: 1156904.565 ops/s
Iteration  18: 1175230.107 ops/s
Iteration  19: 1173411.809 ops/s
Iteration  20: 1169033.717 ops/s
Iteration  21: 1182669.023 ops/s
Iteration  22: 1173266.719 ops/s
Iteration  23: 1134576.284 ops/s
Iteration  24: 1119131.089 ops/s
Iteration  25: 1134450.512 ops/s
Iteration  26: 1133498.721 ops/s
Iteration  27: 1176082.666 ops/s
Iteration  28: 1171936.360 ops/s
Iteration  29: 1132316.371 ops/s
Iteration  30: 1165771.586 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeIfWith":
  1146505.729 ±(99.9%) 16704.717 ops/s [Average]
  (min, avg, max) = (1106003.240, 1146505.729, 1187955.794), stdev = 25002.836
  CI (99.9%): [1129801.012, 1163210.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeIfWith  thrpt   30  1146505.729 ± 16704.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1801220.529 ops/s
# Warmup Iteration   2: 4047509.909 ops/s
# Warmup Iteration   3: 3950341.537 ops/s
# Warmup Iteration   4: 3640937.107 ops/s
# Warmup Iteration   5: 3420194.842 ops/s
# Warmup Iteration   6: 3944004.819 ops/s
# Warmup Iteration   7: 4043655.598 ops/s
# Warmup Iteration   8: 3975297.300 ops/s
# Warmup Iteration   9: 4013687.177 ops/s
# Warmup Iteration  10: 3958411.943 ops/s
# Warmup Iteration  11: 4051921.447 ops/s
# Warmup Iteration  12: 3997826.703 ops/s
# Warmup Iteration  13: 3825218.450 ops/s
# Warmup Iteration  14: 3880481.209 ops/s
# Warmup Iteration  15: 3790415.931 ops/s
# Warmup Iteration  16: 3991533.731 ops/s
# Warmup Iteration  17: 4054153.696 ops/s
# Warmup Iteration  18: 3932049.041 ops/s
# Warmup Iteration  19: 3906117.222 ops/s
# Warmup Iteration  20: 4018626.527 ops/s
# Warmup Iteration  21: 4051295.914 ops/s
# Warmup Iteration  22: 4089257.690 ops/s
# Warmup Iteration  23: 4046426.038 ops/s
# Warmup Iteration  24: 3961541.799 ops/s
# Warmup Iteration  25: 3970402.123 ops/s
# Warmup Iteration  26: 4005142.465 ops/s
# Warmup Iteration  27: 3937227.327 ops/s
# Warmup Iteration  28: 3851652.998 ops/s
# Warmup Iteration  29: 4026369.671 ops/s
# Warmup Iteration  30: 3957940.809 ops/s
Iteration   1: 4033177.133 ops/s
Iteration   2: 4025485.514 ops/s
Iteration   3: 4084125.700 ops/s
Iteration   4: 4031712.326 ops/s
Iteration   5: 4007072.094 ops/s
Iteration   6: 4027112.808 ops/s
Iteration   7: 4052401.037 ops/s
Iteration   8: 4056367.287 ops/s
Iteration   9: 3867197.819 ops/s
Iteration  10: 3926037.212 ops/s
Iteration  11: 3886009.862 ops/s
Iteration  12: 4012797.328 ops/s
Iteration  13: 4085291.559 ops/s
Iteration  14: 4066537.576 ops/s
Iteration  15: 3874799.270 ops/s
Iteration  16: 4038135.286 ops/s
Iteration  17: 4027706.540 ops/s
Iteration  18: 4036062.986 ops/s
Iteration  19: 4064548.205 ops/s
Iteration  20: 4062912.941 ops/s
Iteration  21: 4081470.649 ops/s
Iteration  22: 4015398.488 ops/s
Iteration  23: 4029701.820 ops/s
Iteration  24: 4074210.774 ops/s
Iteration  25: 4038473.711 ops/s
Iteration  26: 3858724.725 ops/s
Iteration  27: 3948030.845 ops/s
Iteration  28: 3932802.968 ops/s
Iteration  29: 3998561.583 ops/s
Iteration  30: 4108986.700 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeObject":
  4011728.425 ±(99.9%) 46669.479 ops/s [Average]
  (min, avg, max) = (3858724.725, 4011728.425, 4108986.700), stdev = 69852.684
  CI (99.9%): [3965058.946, 4058397.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeObject  thrpt   30  4011728.425 ± 46669.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235949.916 ops/s
# Warmup Iteration   2: 357426.450 ops/s
# Warmup Iteration   3: 451611.746 ops/s
# Warmup Iteration   4: 438117.764 ops/s
# Warmup Iteration   5: 442076.469 ops/s
# Warmup Iteration   6: 443178.340 ops/s
# Warmup Iteration   7: 422736.822 ops/s
# Warmup Iteration   8: 372551.979 ops/s
# Warmup Iteration   9: 438200.411 ops/s
# Warmup Iteration  10: 446024.243 ops/s
# Warmup Iteration  11: 450028.594 ops/s
# Warmup Iteration  12: 447887.133 ops/s
# Warmup Iteration  13: 447560.924 ops/s
# Warmup Iteration  14: 449978.030 ops/s
# Warmup Iteration  15: 448627.279 ops/s
# Warmup Iteration  16: 450746.767 ops/s
# Warmup Iteration  17: 442968.107 ops/s
# Warmup Iteration  18: 450627.369 ops/s
# Warmup Iteration  19: 448998.290 ops/s
# Warmup Iteration  20: 444485.854 ops/s
# Warmup Iteration  21: 445990.973 ops/s
# Warmup Iteration  22: 446596.174 ops/s
# Warmup Iteration  23: 442280.081 ops/s
# Warmup Iteration  24: 440880.487 ops/s
# Warmup Iteration  25: 441337.990 ops/s
# Warmup Iteration  26: 445247.626 ops/s
# Warmup Iteration  27: 435522.639 ops/s
# Warmup Iteration  28: 443208.437 ops/s
# Warmup Iteration  29: 441702.142 ops/s
# Warmup Iteration  30: 442053.150 ops/s
Iteration   1: 443843.885 ops/s
Iteration   2: 441988.844 ops/s
Iteration   3: 441231.455 ops/s
Iteration   4: 441575.003 ops/s
Iteration   5: 441309.457 ops/s
Iteration   6: 451470.910 ops/s
Iteration   7: 451066.496 ops/s
Iteration   8: 447267.654 ops/s
Iteration   9: 451432.907 ops/s
Iteration  10: 450236.608 ops/s
Iteration  11: 440166.043 ops/s
Iteration  12: 438743.773 ops/s
Iteration  13: 442926.166 ops/s
Iteration  14: 448213.381 ops/s
Iteration  15: 442249.866 ops/s
Iteration  16: 422446.354 ops/s
Iteration  17: 429782.597 ops/s
Iteration  18: 425900.195 ops/s
Iteration  19: 436047.158 ops/s
Iteration  20: 428509.686 ops/s
Iteration  21: 433781.744 ops/s
Iteration  22: 430136.875 ops/s
Iteration  23: 438082.573 ops/s
Iteration  24: 424120.453 ops/s
Iteration  25: 426481.423 ops/s
Iteration  26: 440524.730 ops/s
Iteration  27: 421820.938 ops/s
Iteration  28: 433442.586 ops/s
Iteration  29: 439781.368 ops/s
Iteration  30: 433543.615 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_removeOccurrences":
  437937.491 ±(99.9%) 5912.193 ops/s [Average]
  (min, avg, max) = (421820.938, 437937.491, 451470.910), stdev = 8849.092
  CI (99.9%): [432025.299, 443849.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  437937.491 ± 5912.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255327.591 ops/s
# Warmup Iteration   2: 443154.934 ops/s
# Warmup Iteration   3: 538986.254 ops/s
# Warmup Iteration   4: 526016.030 ops/s
# Warmup Iteration   5: 523256.954 ops/s
# Warmup Iteration   6: 421061.568 ops/s
# Warmup Iteration   7: 543669.510 ops/s
# Warmup Iteration   8: 547452.814 ops/s
# Warmup Iteration   9: 526661.117 ops/s
# Warmup Iteration  10: 544054.450 ops/s
# Warmup Iteration  11: 523882.470 ops/s
# Warmup Iteration  12: 543504.973 ops/s
# Warmup Iteration  13: 529664.142 ops/s
# Warmup Iteration  14: 533813.128 ops/s
# Warmup Iteration  15: 546471.140 ops/s
# Warmup Iteration  16: 538104.397 ops/s
# Warmup Iteration  17: 545105.872 ops/s
# Warmup Iteration  18: 544661.970 ops/s
# Warmup Iteration  19: 553034.912 ops/s
# Warmup Iteration  20: 543459.684 ops/s
# Warmup Iteration  21: 543109.890 ops/s
# Warmup Iteration  22: 544433.992 ops/s
# Warmup Iteration  23: 530061.474 ops/s
# Warmup Iteration  24: 527019.545 ops/s
# Warmup Iteration  25: 547132.451 ops/s
# Warmup Iteration  26: 537280.495 ops/s
# Warmup Iteration  27: 539766.726 ops/s
# Warmup Iteration  28: 527354.182 ops/s
# Warmup Iteration  29: 536647.925 ops/s
# Warmup Iteration  30: 544977.733 ops/s
Iteration   1: 537285.951 ops/s
Iteration   2: 542769.779 ops/s
Iteration   3: 544693.598 ops/s
Iteration   4: 540030.099 ops/s
Iteration   5: 543846.252 ops/s
Iteration   6: 540988.759 ops/s
Iteration   7: 540828.160 ops/s
Iteration   8: 553180.324 ops/s
Iteration   9: 555385.453 ops/s
Iteration  10: 552260.628 ops/s
Iteration  11: 554699.512 ops/s
Iteration  12: 549210.008 ops/s
Iteration  13: 540995.678 ops/s
Iteration  14: 535805.164 ops/s
Iteration  15: 544063.061 ops/s
Iteration  16: 522596.328 ops/s
Iteration  17: 536292.680 ops/s
Iteration  18: 538852.670 ops/s
Iteration  19: 532753.797 ops/s
Iteration  20: 541336.982 ops/s
Iteration  21: 514430.819 ops/s
Iteration  22: 524413.248 ops/s
Iteration  23: 522356.878 ops/s
Iteration  24: 521095.976 ops/s
Iteration  25: 528460.815 ops/s
Iteration  26: 522640.296 ops/s
Iteration  27: 542120.249 ops/s
Iteration  28: 540638.066 ops/s
Iteration  29: 545541.356 ops/s
Iteration  30: 546904.396 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAll":
  538549.233 ±(99.9%) 7172.811 ops/s [Average]
  (min, avg, max) = (514430.819, 538549.233, 555385.453), stdev = 10735.927
  CI (99.9%): [531376.422, 545722.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_retainAll  thrpt   30  538549.233 ± 7172.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 406224.243 ops/s
# Warmup Iteration   2: 747848.020 ops/s
# Warmup Iteration   3: 872035.818 ops/s
# Warmup Iteration   4: 886877.412 ops/s
# Warmup Iteration   5: 884442.933 ops/s
# Warmup Iteration   6: 706595.316 ops/s
# Warmup Iteration   7: 877184.380 ops/s
# Warmup Iteration   8: 880136.747 ops/s
# Warmup Iteration   9: 878866.650 ops/s
# Warmup Iteration  10: 879249.421 ops/s
# Warmup Iteration  11: 886578.131 ops/s
# Warmup Iteration  12: 844703.031 ops/s
# Warmup Iteration  13: 853434.938 ops/s
# Warmup Iteration  14: 877578.492 ops/s
# Warmup Iteration  15: 859201.008 ops/s
# Warmup Iteration  16: 845705.981 ops/s
# Warmup Iteration  17: 893549.858 ops/s
# Warmup Iteration  18: 860568.433 ops/s
# Warmup Iteration  19: 848257.464 ops/s
# Warmup Iteration  20: 870166.721 ops/s
# Warmup Iteration  21: 879248.711 ops/s
# Warmup Iteration  22: 881455.919 ops/s
# Warmup Iteration  23: 875178.786 ops/s
# Warmup Iteration  24: 878355.245 ops/s
# Warmup Iteration  25: 879849.868 ops/s
# Warmup Iteration  26: 837301.953 ops/s
# Warmup Iteration  27: 872096.579 ops/s
# Warmup Iteration  28: 880058.057 ops/s
# Warmup Iteration  29: 847856.181 ops/s
# Warmup Iteration  30: 844115.816 ops/s
Iteration   1: 845812.121 ops/s
Iteration   2: 871777.548 ops/s
Iteration   3: 871284.211 ops/s
Iteration   4: 859965.005 ops/s
Iteration   5: 839779.900 ops/s
Iteration   6: 879040.045 ops/s
Iteration   7: 885805.624 ops/s
Iteration   8: 861960.701 ops/s
Iteration   9: 875122.479 ops/s
Iteration  10: 890901.457 ops/s
Iteration  11: 886378.073 ops/s
Iteration  12: 880597.921 ops/s
Iteration  13: 881131.192 ops/s
Iteration  14: 881864.045 ops/s
Iteration  15: 850408.530 ops/s
Iteration  16: 823924.260 ops/s
Iteration  17: 849128.768 ops/s
Iteration  18: 846461.120 ops/s
Iteration  19: 863746.214 ops/s
Iteration  20: 844846.503 ops/s
Iteration  21: 870507.091 ops/s
Iteration  22: 879838.519 ops/s
Iteration  23: 879522.695 ops/s
Iteration  24: 857372.463 ops/s
Iteration  25: 877341.234 ops/s
Iteration  26: 872631.096 ops/s
Iteration  27: 888785.362 ops/s
Iteration  28: 877907.541 ops/s
Iteration  29: 876470.036 ops/s
Iteration  30: 870403.741 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_retainAllIterable":
  868023.850 ±(99.9%) 11114.010 ops/s [Average]
  (min, avg, max) = (823924.260, 868023.850, 890901.457), stdev = 16634.929
  CI (99.9%): [856909.839, 879137.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_retainAllIterable  thrpt   30  868023.850 ± 11114.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 414325.261 ops/s
# Warmup Iteration   2: 751488.155 ops/s
# Warmup Iteration   3: 818678.807 ops/s
# Warmup Iteration   4: 825478.867 ops/s
# Warmup Iteration   5: 819219.142 ops/s
# Warmup Iteration   6: 705179.765 ops/s
# Warmup Iteration   7: 857714.819 ops/s
# Warmup Iteration   8: 859516.177 ops/s
# Warmup Iteration   9: 847200.606 ops/s
# Warmup Iteration  10: 834905.618 ops/s
# Warmup Iteration  11: 851390.869 ops/s
# Warmup Iteration  12: 856729.409 ops/s
# Warmup Iteration  13: 861408.015 ops/s
# Warmup Iteration  14: 860698.569 ops/s
# Warmup Iteration  15: 853944.455 ops/s
# Warmup Iteration  16: 860009.506 ops/s
# Warmup Iteration  17: 849675.747 ops/s
# Warmup Iteration  18: 856051.424 ops/s
# Warmup Iteration  19: 867281.730 ops/s
# Warmup Iteration  20: 874039.736 ops/s
# Warmup Iteration  21: 871651.536 ops/s
# Warmup Iteration  22: 871823.016 ops/s
# Warmup Iteration  23: 865687.957 ops/s
# Warmup Iteration  24: 874344.931 ops/s
# Warmup Iteration  25: 873313.477 ops/s
# Warmup Iteration  26: 866046.867 ops/s
# Warmup Iteration  27: 863193.433 ops/s
# Warmup Iteration  28: 871718.135 ops/s
# Warmup Iteration  29: 870448.311 ops/s
# Warmup Iteration  30: 876049.333 ops/s
Iteration   1: 876721.615 ops/s
Iteration   2: 870971.231 ops/s
Iteration   3: 869743.445 ops/s
Iteration   4: 872754.296 ops/s
Iteration   5: 844326.720 ops/s
Iteration   6: 819822.482 ops/s
Iteration   7: 843860.681 ops/s
Iteration   8: 871802.789 ops/s
Iteration   9: 860094.161 ops/s
Iteration  10: 838931.071 ops/s
Iteration  11: 827178.000 ops/s
Iteration  12: 842433.781 ops/s
Iteration  13: 806577.160 ops/s
Iteration  14: 829476.872 ops/s
Iteration  15: 833670.159 ops/s
Iteration  16: 863371.146 ops/s
Iteration  17: 855218.035 ops/s
Iteration  18: 865517.912 ops/s
Iteration  19: 860638.621 ops/s
Iteration  20: 862909.499 ops/s
Iteration  21: 850295.859 ops/s
Iteration  22: 855540.437 ops/s
Iteration  23: 867294.079 ops/s
Iteration  24: 862182.343 ops/s
Iteration  25: 814259.778 ops/s
Iteration  26: 805350.609 ops/s
Iteration  27: 847446.294 ops/s
Iteration  28: 816734.944 ops/s
Iteration  29: 810315.955 ops/s
Iteration  30: 839607.813 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_select":
  846168.260 ±(99.9%) 14534.487 ops/s [Average]
  (min, avg, max) = (805350.609, 846168.260, 876721.615), stdev = 21754.537
  CI (99.9%): [831633.773, 860702.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_select  thrpt   30  846168.260 ± 14534.487  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1847483.684 ops/s
# Warmup Iteration   2: 4485654.395 ops/s
# Warmup Iteration   3: 3897562.687 ops/s
# Warmup Iteration   4: 4329661.956 ops/s
# Warmup Iteration   5: 4530729.050 ops/s
# Warmup Iteration   6: 4576725.047 ops/s
# Warmup Iteration   7: 4586521.906 ops/s
# Warmup Iteration   8: 4553609.411 ops/s
# Warmup Iteration   9: 4589354.638 ops/s
# Warmup Iteration  10: 4595503.016 ops/s
# Warmup Iteration  11: 4610035.020 ops/s
# Warmup Iteration  12: 4566787.356 ops/s
# Warmup Iteration  13: 4550532.238 ops/s
# Warmup Iteration  14: 4394391.882 ops/s
# Warmup Iteration  15: 4596903.701 ops/s
# Warmup Iteration  16: 4622970.729 ops/s
# Warmup Iteration  17: 4530494.202 ops/s
# Warmup Iteration  18: 4534162.877 ops/s
# Warmup Iteration  19: 4550268.851 ops/s
# Warmup Iteration  20: 4545261.942 ops/s
# Warmup Iteration  21: 4478412.971 ops/s
# Warmup Iteration  22: 4636312.785 ops/s
# Warmup Iteration  23: 4556964.702 ops/s
# Warmup Iteration  24: 4615039.448 ops/s
# Warmup Iteration  25: 4583701.060 ops/s
# Warmup Iteration  26: 4597298.328 ops/s
# Warmup Iteration  27: 4572555.585 ops/s
# Warmup Iteration  28: 4564626.563 ops/s
# Warmup Iteration  29: 4582349.192 ops/s
# Warmup Iteration  30: 4551257.349 ops/s
Iteration   1: 4574822.626 ops/s
Iteration   2: 4573216.446 ops/s
Iteration   3: 4573319.917 ops/s
Iteration   4: 4586695.373 ops/s
Iteration   5: 4606594.940 ops/s
Iteration   6: 4406117.668 ops/s
Iteration   7: 4587563.534 ops/s
Iteration   8: 4442853.552 ops/s
Iteration   9: 4418558.357 ops/s
Iteration  10: 4454003.585 ops/s
Iteration  11: 4415051.622 ops/s
Iteration  12: 4574028.255 ops/s
Iteration  13: 4624215.931 ops/s
Iteration  14: 4626203.652 ops/s
Iteration  15: 4537660.011 ops/s
Iteration  16: 4594629.524 ops/s
Iteration  17: 4483033.746 ops/s
Iteration  18: 4420854.469 ops/s
Iteration  19: 4492901.669 ops/s
Iteration  20: 4562059.220 ops/s
Iteration  21: 4546794.820 ops/s
Iteration  22: 4414076.510 ops/s
Iteration  23: 4556628.319 ops/s
Iteration  24: 4432163.275 ops/s
Iteration  25: 4436658.698 ops/s
Iteration  26: 4512331.898 ops/s
Iteration  27: 4425241.234 ops/s
Iteration  28: 4577174.537 ops/s
Iteration  29: 4544787.052 ops/s
Iteration  30: 4543854.164 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectAndRejectWith":
  4518136.487 ±(99.9%) 48961.092 ops/s [Average]
  (min, avg, max) = (4406117.668, 4518136.487, 4626203.652), stdev = 73282.662
  CI (99.9%): [4469175.395, 4567097.578] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  4518136.487 ± 48961.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236289.090 ops/s
# Warmup Iteration   2: 454661.907 ops/s
# Warmup Iteration   3: 515669.896 ops/s
# Warmup Iteration   4: 512770.577 ops/s
# Warmup Iteration   5: 523922.109 ops/s
# Warmup Iteration   6: 440656.122 ops/s
# Warmup Iteration   7: 520455.752 ops/s
# Warmup Iteration   8: 522721.599 ops/s
# Warmup Iteration   9: 504369.687 ops/s
# Warmup Iteration  10: 508280.767 ops/s
# Warmup Iteration  11: 506035.319 ops/s
# Warmup Iteration  12: 516789.293 ops/s
# Warmup Iteration  13: 517282.922 ops/s
# Warmup Iteration  14: 498981.045 ops/s
# Warmup Iteration  15: 499203.205 ops/s
# Warmup Iteration  16: 503896.574 ops/s
# Warmup Iteration  17: 508116.105 ops/s
# Warmup Iteration  18: 515250.070 ops/s
# Warmup Iteration  19: 514540.154 ops/s
# Warmup Iteration  20: 511735.137 ops/s
# Warmup Iteration  21: 500398.042 ops/s
# Warmup Iteration  22: 517210.569 ops/s
# Warmup Iteration  23: 523989.814 ops/s
# Warmup Iteration  24: 518685.156 ops/s
# Warmup Iteration  25: 515060.326 ops/s
# Warmup Iteration  26: 516165.863 ops/s
# Warmup Iteration  27: 521395.154 ops/s
# Warmup Iteration  28: 520856.813 ops/s
# Warmup Iteration  29: 516334.674 ops/s
# Warmup Iteration  30: 517103.706 ops/s
Iteration   1: 519018.402 ops/s
Iteration   2: 523641.130 ops/s
Iteration   3: 514184.106 ops/s
Iteration   4: 517700.340 ops/s
Iteration   5: 517455.946 ops/s
Iteration   6: 516591.940 ops/s
Iteration   7: 518674.549 ops/s
Iteration   8: 517668.427 ops/s
Iteration   9: 509628.902 ops/s
Iteration  10: 520230.580 ops/s
Iteration  11: 514200.441 ops/s
Iteration  12: 513424.835 ops/s
Iteration  13: 522059.806 ops/s
Iteration  14: 507004.432 ops/s
Iteration  15: 517883.330 ops/s
Iteration  16: 515839.414 ops/s
Iteration  17: 513027.238 ops/s
Iteration  18: 522155.304 ops/s
Iteration  19: 506296.426 ops/s
Iteration  20: 516580.691 ops/s
Iteration  21: 516286.518 ops/s
Iteration  22: 521877.468 ops/s
Iteration  23: 515955.159 ops/s
Iteration  24: 522055.243 ops/s
Iteration  25: 523611.921 ops/s
Iteration  26: 515868.021 ops/s
Iteration  27: 517027.133 ops/s
Iteration  28: 518217.292 ops/s
Iteration  29: 516125.308 ops/s
Iteration  30: 519744.834 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectByOccurrences":
  517001.171 ±(99.9%) 2872.542 ops/s [Average]
  (min, avg, max) = (506296.426, 517001.171, 523641.130), stdev = 4299.486
  CI (99.9%): [514128.629, 519873.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  517001.171 ± 2872.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 387597.114 ops/s
# Warmup Iteration   2: 690414.537 ops/s
# Warmup Iteration   3: 789287.449 ops/s
# Warmup Iteration   4: 787515.351 ops/s
# Warmup Iteration   5: 786381.222 ops/s
# Warmup Iteration   6: 667042.462 ops/s
# Warmup Iteration   7: 795309.386 ops/s
# Warmup Iteration   8: 805055.822 ops/s
# Warmup Iteration   9: 791892.022 ops/s
# Warmup Iteration  10: 788710.426 ops/s
# Warmup Iteration  11: 797658.876 ops/s
# Warmup Iteration  12: 792985.472 ops/s
# Warmup Iteration  13: 793381.478 ops/s
# Warmup Iteration  14: 771083.160 ops/s
# Warmup Iteration  15: 800184.236 ops/s
# Warmup Iteration  16: 786994.561 ops/s
# Warmup Iteration  17: 783858.613 ops/s
# Warmup Iteration  18: 786208.416 ops/s
# Warmup Iteration  19: 788598.598 ops/s
# Warmup Iteration  20: 791882.955 ops/s
# Warmup Iteration  21: 787003.938 ops/s
# Warmup Iteration  22: 756667.784 ops/s
# Warmup Iteration  23: 769795.102 ops/s
# Warmup Iteration  24: 755643.918 ops/s
# Warmup Iteration  25: 794552.178 ops/s
# Warmup Iteration  26: 790606.768 ops/s
# Warmup Iteration  27: 802722.337 ops/s
# Warmup Iteration  28: 802587.701 ops/s
# Warmup Iteration  29: 802330.654 ops/s
# Warmup Iteration  30: 805698.406 ops/s
Iteration   1: 804567.281 ops/s
Iteration   2: 779579.151 ops/s
Iteration   3: 796868.477 ops/s
Iteration   4: 802130.194 ops/s
Iteration   5: 785294.573 ops/s
Iteration   6: 792784.633 ops/s
Iteration   7: 790862.420 ops/s
Iteration   8: 791381.141 ops/s
Iteration   9: 797044.689 ops/s
Iteration  10: 788292.676 ops/s
Iteration  11: 787771.565 ops/s
Iteration  12: 793437.644 ops/s
Iteration  13: 787123.211 ops/s
Iteration  14: 780504.163 ops/s
Iteration  15: 792817.259 ops/s
Iteration  16: 792163.074 ops/s
Iteration  17: 799145.016 ops/s
Iteration  18: 797590.970 ops/s
Iteration  19: 786168.080 ops/s
Iteration  20: 785081.560 ops/s
Iteration  21: 797498.165 ops/s
Iteration  22: 798183.828 ops/s
Iteration  23: 792241.574 ops/s
Iteration  24: 795848.226 ops/s
Iteration  25: 787801.307 ops/s
Iteration  26: 784766.090 ops/s
Iteration  27: 786984.480 ops/s
Iteration  28: 779409.839 ops/s
Iteration  29: 758103.823 ops/s
Iteration  30: 794864.020 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectDuplicates":
  790210.304 ±(99.9%) 5902.929 ops/s [Average]
  (min, avg, max) = (758103.823, 790210.304, 804567.281), stdev = 8835.227
  CI (99.9%): [784307.375, 796113.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  790210.304 ± 5902.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 333470.962 ops/s
# Warmup Iteration   2: 578351.877 ops/s
# Warmup Iteration   3: 680976.304 ops/s
# Warmup Iteration   4: 683125.072 ops/s
# Warmup Iteration   5: 688738.724 ops/s
# Warmup Iteration   6: 574530.116 ops/s
# Warmup Iteration   7: 684498.189 ops/s
# Warmup Iteration   8: 680687.680 ops/s
# Warmup Iteration   9: 661584.123 ops/s
# Warmup Iteration  10: 686342.903 ops/s
# Warmup Iteration  11: 675593.518 ops/s
# Warmup Iteration  12: 679785.539 ops/s
# Warmup Iteration  13: 679772.123 ops/s
# Warmup Iteration  14: 677742.645 ops/s
# Warmup Iteration  15: 675728.559 ops/s
# Warmup Iteration  16: 691727.249 ops/s
# Warmup Iteration  17: 688621.779 ops/s
# Warmup Iteration  18: 677388.662 ops/s
# Warmup Iteration  19: 683945.501 ops/s
# Warmup Iteration  20: 672972.070 ops/s
# Warmup Iteration  21: 672330.846 ops/s
# Warmup Iteration  22: 684439.917 ops/s
# Warmup Iteration  23: 685471.337 ops/s
# Warmup Iteration  24: 690310.720 ops/s
# Warmup Iteration  25: 687759.073 ops/s
# Warmup Iteration  26: 685432.066 ops/s
# Warmup Iteration  27: 686659.164 ops/s
# Warmup Iteration  28: 690176.126 ops/s
# Warmup Iteration  29: 689702.199 ops/s
# Warmup Iteration  30: 681498.447 ops/s
Iteration   1: 695210.522 ops/s
Iteration   2: 685117.677 ops/s
Iteration   3: 673124.101 ops/s
Iteration   4: 683952.478 ops/s
Iteration   5: 682841.190 ops/s
Iteration   6: 683713.897 ops/s
Iteration   7: 667443.749 ops/s
Iteration   8: 679673.819 ops/s
Iteration   9: 675112.513 ops/s
Iteration  10: 680239.478 ops/s
Iteration  11: 688868.433 ops/s
Iteration  12: 691677.150 ops/s
Iteration  13: 675480.325 ops/s
Iteration  14: 685569.952 ops/s
Iteration  15: 688949.928 ops/s
Iteration  16: 684363.078 ops/s
Iteration  17: 690245.817 ops/s
Iteration  18: 673010.317 ops/s
Iteration  19: 675381.785 ops/s
Iteration  20: 678729.866 ops/s
Iteration  21: 680694.194 ops/s
Iteration  22: 670601.841 ops/s
Iteration  23: 685177.246 ops/s
Iteration  24: 669255.117 ops/s
Iteration  25: 689708.249 ops/s
Iteration  26: 694106.845 ops/s
Iteration  27: 678985.004 ops/s
Iteration  28: 683532.199 ops/s
Iteration  29: 686966.152 ops/s
Iteration  30: 683793.690 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectInstancesOf":
  682050.887 ±(99.9%) 4870.187 ops/s [Average]
  (min, avg, max) = (667443.749, 682050.887, 695210.522), stdev = 7289.467
  CI (99.9%): [677180.700, 686921.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  682050.887 ± 4870.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 934374.733 ops/s
# Warmup Iteration   2: 1796173.398 ops/s
# Warmup Iteration   3: 2060480.662 ops/s
# Warmup Iteration   4: 2051813.623 ops/s
# Warmup Iteration   5: 1638783.596 ops/s
# Warmup Iteration   6: 2054910.613 ops/s
# Warmup Iteration   7: 2077495.038 ops/s
# Warmup Iteration   8: 2063695.874 ops/s
# Warmup Iteration   9: 2061465.381 ops/s
# Warmup Iteration  10: 2079943.151 ops/s
# Warmup Iteration  11: 2070678.237 ops/s
# Warmup Iteration  12: 2057606.528 ops/s
# Warmup Iteration  13: 2078378.182 ops/s
# Warmup Iteration  14: 2098648.257 ops/s
# Warmup Iteration  15: 2061270.637 ops/s
# Warmup Iteration  16: 2053781.057 ops/s
# Warmup Iteration  17: 2053333.604 ops/s
# Warmup Iteration  18: 2052881.129 ops/s
# Warmup Iteration  19: 2083102.046 ops/s
# Warmup Iteration  20: 2082156.816 ops/s
# Warmup Iteration  21: 2083429.871 ops/s
# Warmup Iteration  22: 2082512.340 ops/s
# Warmup Iteration  23: 2081510.145 ops/s
# Warmup Iteration  24: 2033659.516 ops/s
# Warmup Iteration  25: 1975575.689 ops/s
# Warmup Iteration  26: 2011753.215 ops/s
# Warmup Iteration  27: 2067062.389 ops/s
# Warmup Iteration  28: 2050731.089 ops/s
# Warmup Iteration  29: 1984726.059 ops/s
# Warmup Iteration  30: 2026561.156 ops/s
Iteration   1: 2058843.407 ops/s
Iteration   2: 2070034.668 ops/s
Iteration   3: 2056406.669 ops/s
Iteration   4: 2082964.177 ops/s
Iteration   5: 2069169.694 ops/s
Iteration   6: 2077372.640 ops/s
Iteration   7: 1999732.454 ops/s
Iteration   8: 2028478.711 ops/s
Iteration   9: 2034789.981 ops/s
Iteration  10: 2088148.441 ops/s
Iteration  11: 2056742.673 ops/s
Iteration  12: 2044922.607 ops/s
Iteration  13: 2090503.238 ops/s
Iteration  14: 2080735.475 ops/s
Iteration  15: 2082466.229 ops/s
Iteration  16: 2091717.822 ops/s
Iteration  17: 2063486.135 ops/s
Iteration  18: 2048215.492 ops/s
Iteration  19: 2054701.388 ops/s
Iteration  20: 2085261.445 ops/s
Iteration  21: 2098079.036 ops/s
Iteration  22: 2084474.360 ops/s
Iteration  23: 2073940.245 ops/s
Iteration  24: 2050155.091 ops/s
Iteration  25: 2041020.679 ops/s
Iteration  26: 2071782.906 ops/s
Iteration  27: 2042759.970 ops/s
Iteration  28: 2032987.732 ops/s
Iteration  29: 2048023.022 ops/s
Iteration  30: 2029957.399 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectUnique":
  2061262.460 ±(99.9%) 15630.555 ops/s [Average]
  (min, avg, max) = (1999732.454, 2061262.460, 2098079.036), stdev = 23395.080
  CI (99.9%): [2045631.905, 2076893.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectUnique  thrpt   30  2061262.460 ± 15630.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1697529.021 ops/s
# Warmup Iteration   2: 4179581.892 ops/s
# Warmup Iteration   3: 4202272.658 ops/s
# Warmup Iteration   4: 3463880.371 ops/s
# Warmup Iteration   5: 4126969.774 ops/s
# Warmup Iteration   6: 4182202.806 ops/s
# Warmup Iteration   7: 4189196.926 ops/s
# Warmup Iteration   8: 4219930.602 ops/s
# Warmup Iteration   9: 4111758.191 ops/s
# Warmup Iteration  10: 4218763.990 ops/s
# Warmup Iteration  11: 4190678.256 ops/s
# Warmup Iteration  12: 4199782.713 ops/s
# Warmup Iteration  13: 4196242.987 ops/s
# Warmup Iteration  14: 4208569.604 ops/s
# Warmup Iteration  15: 4244590.221 ops/s
# Warmup Iteration  16: 4149246.419 ops/s
# Warmup Iteration  17: 4128720.480 ops/s
# Warmup Iteration  18: 4208725.310 ops/s
# Warmup Iteration  19: 4232653.769 ops/s
# Warmup Iteration  20: 4207018.569 ops/s
# Warmup Iteration  21: 4221386.588 ops/s
# Warmup Iteration  22: 4207990.136 ops/s
# Warmup Iteration  23: 4231768.323 ops/s
# Warmup Iteration  24: 4198255.006 ops/s
# Warmup Iteration  25: 4193235.833 ops/s
# Warmup Iteration  26: 4254911.174 ops/s
# Warmup Iteration  27: 4148431.105 ops/s
# Warmup Iteration  28: 4199147.749 ops/s
# Warmup Iteration  29: 4053181.808 ops/s
# Warmup Iteration  30: 4177761.096 ops/s
Iteration   1: 4138934.158 ops/s
Iteration   2: 4234763.998 ops/s
Iteration   3: 4148435.110 ops/s
Iteration   4: 4186485.529 ops/s
Iteration   5: 4176890.633 ops/s
Iteration   6: 4142995.983 ops/s
Iteration   7: 4207778.881 ops/s
Iteration   8: 4006054.664 ops/s
Iteration   9: 4238943.613 ops/s
Iteration  10: 4219348.400 ops/s
Iteration  11: 4217364.615 ops/s
Iteration  12: 4220317.824 ops/s
Iteration  13: 4259450.187 ops/s
Iteration  14: 4260570.875 ops/s
Iteration  15: 4224652.752 ops/s
Iteration  16: 4176990.545 ops/s
Iteration  17: 4234686.049 ops/s
Iteration  18: 4213105.598 ops/s
Iteration  19: 4292834.666 ops/s
Iteration  20: 4265498.545 ops/s
Iteration  21: 4257140.423 ops/s
Iteration  22: 4266276.228 ops/s
Iteration  23: 4218353.074 ops/s
Iteration  24: 4120741.425 ops/s
Iteration  25: 4154643.591 ops/s
Iteration  26: 4227943.231 ops/s
Iteration  27: 4230119.382 ops/s
Iteration  28: 4174993.519 ops/s
Iteration  29: 4229150.483 ops/s
Iteration  30: 4174162.817 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith":
  4203987.560 ±(99.9%) 38068.887 ops/s [Average]
  (min, avg, max) = (4006054.664, 4203987.560, 4292834.666), stdev = 56979.722
  CI (99.9%): [4165918.673, 4242056.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectWith  thrpt   30  4203987.560 ± 38068.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 230414.062 ops/s
# Warmup Iteration   2: 473079.792 ops/s
# Warmup Iteration   3: 521187.640 ops/s
# Warmup Iteration   4: 527684.739 ops/s
# Warmup Iteration   5: 437081.901 ops/s
# Warmup Iteration   6: 530787.336 ops/s
# Warmup Iteration   7: 528076.590 ops/s
# Warmup Iteration   8: 525926.914 ops/s
# Warmup Iteration   9: 529007.820 ops/s
# Warmup Iteration  10: 528706.564 ops/s
# Warmup Iteration  11: 529945.437 ops/s
# Warmup Iteration  12: 530833.858 ops/s
# Warmup Iteration  13: 531851.427 ops/s
# Warmup Iteration  14: 529766.376 ops/s
# Warmup Iteration  15: 521910.680 ops/s
# Warmup Iteration  16: 526979.191 ops/s
# Warmup Iteration  17: 512951.880 ops/s
# Warmup Iteration  18: 527906.826 ops/s
# Warmup Iteration  19: 525620.908 ops/s
# Warmup Iteration  20: 526978.025 ops/s
# Warmup Iteration  21: 526257.584 ops/s
# Warmup Iteration  22: 500321.384 ops/s
# Warmup Iteration  23: 520665.695 ops/s
# Warmup Iteration  24: 521529.389 ops/s
# Warmup Iteration  25: 519051.826 ops/s
# Warmup Iteration  26: 513349.809 ops/s
# Warmup Iteration  27: 523619.775 ops/s
# Warmup Iteration  28: 508616.993 ops/s
# Warmup Iteration  29: 521674.453 ops/s
# Warmup Iteration  30: 521865.361 ops/s
Iteration   1: 520924.590 ops/s
Iteration   2: 522859.453 ops/s
Iteration   3: 519787.404 ops/s
Iteration   4: 505674.002 ops/s
Iteration   5: 521643.702 ops/s
Iteration   6: 528799.846 ops/s
Iteration   7: 520118.222 ops/s
Iteration   8: 521716.784 ops/s
Iteration   9: 512239.540 ops/s
Iteration  10: 508418.788 ops/s
Iteration  11: 525480.765 ops/s
Iteration  12: 501049.041 ops/s
Iteration  13: 524098.025 ops/s
Iteration  14: 516595.252 ops/s
Iteration  15: 524195.484 ops/s
Iteration  16: 496255.950 ops/s
Iteration  17: 512915.141 ops/s
Iteration  18: 529201.733 ops/s
Iteration  19: 531847.006 ops/s
Iteration  20: 527927.666 ops/s
Iteration  21: 525160.874 ops/s
Iteration  22: 524869.592 ops/s
Iteration  23: 524917.229 ops/s
Iteration  24: 532877.057 ops/s
Iteration  25: 533584.680 ops/s
Iteration  26: 527267.935 ops/s
Iteration  27: 524870.101 ops/s
Iteration  28: 521963.150 ops/s
Iteration  29: 531837.099 ops/s
Iteration  30: 530798.149 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_selectWith_target":
  521663.142 ±(99.9%) 6212.932 ops/s [Average]
  (min, avg, max) = (496255.950, 521663.142, 533584.680), stdev = 9299.225
  CI (99.9%): [515450.210, 527876.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  521663.142 ± 6212.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44900.727 ops/s
# Warmup Iteration   2: 56576.371 ops/s
# Warmup Iteration   3: 83333.937 ops/s
# Warmup Iteration   4: 84146.675 ops/s
# Warmup Iteration   5: 83756.874 ops/s
# Warmup Iteration   6: 84112.721 ops/s
# Warmup Iteration   7: 79363.145 ops/s
# Warmup Iteration   8: 80459.646 ops/s
# Warmup Iteration   9: 83235.782 ops/s
# Warmup Iteration  10: 71742.710 ops/s
# Warmup Iteration  11: 79214.803 ops/s
# Warmup Iteration  12: 83516.982 ops/s
# Warmup Iteration  13: 83039.175 ops/s
# Warmup Iteration  14: 83802.078 ops/s
# Warmup Iteration  15: 82808.325 ops/s
# Warmup Iteration  16: 82846.512 ops/s
# Warmup Iteration  17: 83271.895 ops/s
# Warmup Iteration  18: 84005.622 ops/s
# Warmup Iteration  19: 84003.890 ops/s
# Warmup Iteration  20: 84346.214 ops/s
# Warmup Iteration  21: 83455.944 ops/s
# Warmup Iteration  22: 84053.233 ops/s
# Warmup Iteration  23: 83183.674 ops/s
# Warmup Iteration  24: 84075.599 ops/s
# Warmup Iteration  25: 83709.539 ops/s
# Warmup Iteration  26: 83109.178 ops/s
# Warmup Iteration  27: 81571.900 ops/s
# Warmup Iteration  28: 84700.700 ops/s
# Warmup Iteration  29: 82197.214 ops/s
# Warmup Iteration  30: 83914.785 ops/s
Iteration   1: 82078.586 ops/s
Iteration   2: 79176.511 ops/s
Iteration   3: 79959.240 ops/s
Iteration   4: 80885.573 ops/s
Iteration   5: 83701.971 ops/s
Iteration   6: 83628.171 ops/s
Iteration   7: 84372.700 ops/s
Iteration   8: 81263.890 ops/s
Iteration   9: 82880.721 ops/s
Iteration  10: 81285.819 ops/s
Iteration  11: 84271.930 ops/s
Iteration  12: 83033.796 ops/s
Iteration  13: 82695.279 ops/s
Iteration  14: 85004.971 ops/s
Iteration  15: 83074.209 ops/s
Iteration  16: 82613.746 ops/s
Iteration  17: 83824.428 ops/s
Iteration  18: 84516.649 ops/s
Iteration  19: 85289.974 ops/s
Iteration  20: 85064.814 ops/s
Iteration  21: 83775.751 ops/s
Iteration  22: 83506.396 ops/s
Iteration  23: 83839.247 ops/s
Iteration  24: 83489.952 ops/s
Iteration  25: 83713.225 ops/s
Iteration  26: 84373.872 ops/s
Iteration  27: 84312.570 ops/s
Iteration  28: 85127.127 ops/s
Iteration  29: 85006.650 ops/s
Iteration  30: 85050.031 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_serialization":
  83360.593 ±(99.9%) 1045.924 ops/s [Average]
  (min, avg, max) = (79176.511, 83360.593, 85289.974), stdev = 1565.490
  CI (99.9%): [82314.669, 84406.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt      Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_serialization  thrpt   30  83360.593 ± 1045.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242700.529 ops/s
# Warmup Iteration   2: 361886.436 ops/s
# Warmup Iteration   3: 450705.577 ops/s
# Warmup Iteration   4: 441665.864 ops/s
# Warmup Iteration   5: 445454.697 ops/s
# Warmup Iteration   6: 446678.791 ops/s
# Warmup Iteration   7: 448065.873 ops/s
# Warmup Iteration   8: 369326.923 ops/s
# Warmup Iteration   9: 443384.509 ops/s
# Warmup Iteration  10: 451800.161 ops/s
# Warmup Iteration  11: 441950.129 ops/s
# Warmup Iteration  12: 452969.771 ops/s
# Warmup Iteration  13: 448649.485 ops/s
# Warmup Iteration  14: 450773.222 ops/s
# Warmup Iteration  15: 451577.373 ops/s
# Warmup Iteration  16: 450643.178 ops/s
# Warmup Iteration  17: 450710.356 ops/s
# Warmup Iteration  18: 447614.227 ops/s
# Warmup Iteration  19: 449754.626 ops/s
# Warmup Iteration  20: 454385.287 ops/s
# Warmup Iteration  21: 450241.337 ops/s
# Warmup Iteration  22: 452608.557 ops/s
# Warmup Iteration  23: 454824.226 ops/s
# Warmup Iteration  24: 445346.070 ops/s
# Warmup Iteration  25: 448783.167 ops/s
# Warmup Iteration  26: 440601.972 ops/s
# Warmup Iteration  27: 451906.466 ops/s
# Warmup Iteration  28: 448064.070 ops/s
# Warmup Iteration  29: 449488.213 ops/s
# Warmup Iteration  30: 451570.386 ops/s
Iteration   1: 446791.316 ops/s
Iteration   2: 448889.672 ops/s
Iteration   3: 438262.585 ops/s
Iteration   4: 444407.551 ops/s
Iteration   5: 443268.469 ops/s
Iteration   6: 438621.296 ops/s
Iteration   7: 445989.998 ops/s
Iteration   8: 437288.974 ops/s
Iteration   9: 445039.191 ops/s
Iteration  10: 449105.712 ops/s
Iteration  11: 439418.243 ops/s
Iteration  12: 443677.991 ops/s
Iteration  13: 437389.541 ops/s
Iteration  14: 437408.626 ops/s
Iteration  15: 450850.458 ops/s
Iteration  16: 453037.566 ops/s
Iteration  17: 447191.723 ops/s
Iteration  18: 439784.277 ops/s
Iteration  19: 441410.890 ops/s
Iteration  20: 437897.027 ops/s
Iteration  21: 439839.321 ops/s
Iteration  22: 445587.721 ops/s
Iteration  23: 436496.784 ops/s
Iteration  24: 453117.033 ops/s
Iteration  25: 449637.431 ops/s
Iteration  26: 451479.909 ops/s
Iteration  27: 451107.360 ops/s
Iteration  28: 454118.721 ops/s
Iteration  29: 450838.979 ops/s
Iteration  30: 453457.937 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_setOccurrences":
  445047.077 ±(99.9%) 3888.554 ops/s [Average]
  (min, avg, max) = (436496.784, 445047.077, 454118.721), stdev = 5820.205
  CI (99.9%): [441158.523, 448935.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_setOccurrences  thrpt   30  445047.077 ± 3888.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1984103.401 ops/s
# Warmup Iteration   2: 4218492.521 ops/s
# Warmup Iteration   3: 4418545.712 ops/s
# Warmup Iteration   4: 4387127.203 ops/s
# Warmup Iteration   5: 3694379.921 ops/s
# Warmup Iteration   6: 4448939.789 ops/s
# Warmup Iteration   7: 4403348.225 ops/s
# Warmup Iteration   8: 4393915.757 ops/s
# Warmup Iteration   9: 4307444.884 ops/s
# Warmup Iteration  10: 4374535.197 ops/s
# Warmup Iteration  11: 4416142.987 ops/s
# Warmup Iteration  12: 4412393.697 ops/s
# Warmup Iteration  13: 4483727.029 ops/s
# Warmup Iteration  14: 4486229.319 ops/s
# Warmup Iteration  15: 4475759.505 ops/s
# Warmup Iteration  16: 4511166.102 ops/s
# Warmup Iteration  17: 4520331.268 ops/s
# Warmup Iteration  18: 4251452.778 ops/s
# Warmup Iteration  19: 4302763.300 ops/s
# Warmup Iteration  20: 4373495.710 ops/s
# Warmup Iteration  21: 4444451.637 ops/s
# Warmup Iteration  22: 4405194.584 ops/s
# Warmup Iteration  23: 4518361.408 ops/s
# Warmup Iteration  24: 4460361.155 ops/s
# Warmup Iteration  25: 4433865.210 ops/s
# Warmup Iteration  26: 4428104.756 ops/s
# Warmup Iteration  27: 4298843.803 ops/s
# Warmup Iteration  28: 4455693.194 ops/s
# Warmup Iteration  29: 4434195.927 ops/s
# Warmup Iteration  30: 4482525.057 ops/s
Iteration   1: 4436009.013 ops/s
Iteration   2: 4441873.277 ops/s
Iteration   3: 4452613.940 ops/s
Iteration   4: 4442132.850 ops/s
Iteration   5: 4512136.058 ops/s
Iteration   6: 4487443.987 ops/s
Iteration   7: 4484491.951 ops/s
Iteration   8: 4457465.490 ops/s
Iteration   9: 4467950.137 ops/s
Iteration  10: 4396150.870 ops/s
Iteration  11: 4444733.941 ops/s
Iteration  12: 4480537.107 ops/s
Iteration  13: 4475112.311 ops/s
Iteration  14: 4463934.343 ops/s
Iteration  15: 4464971.837 ops/s
Iteration  16: 4383360.787 ops/s
Iteration  17: 4399174.646 ops/s
Iteration  18: 4467178.217 ops/s
Iteration  19: 4443173.480 ops/s
Iteration  20: 4454552.894 ops/s
Iteration  21: 4466996.775 ops/s
Iteration  22: 4439137.802 ops/s
Iteration  23: 4346241.235 ops/s
Iteration  24: 4478365.877 ops/s
Iteration  25: 4417118.642 ops/s
Iteration  26: 4469849.379 ops/s
Iteration  27: 4424834.298 ops/s
Iteration  28: 4454781.484 ops/s
Iteration  29: 4441247.224 ops/s
Iteration  30: 4424449.903 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sizeDistinct":
  4447267.325 ±(99.9%) 22900.268 ops/s [Average]
  (min, avg, max) = (4346241.235, 4447267.325, 4512136.058), stdev = 34276.046
  CI (99.9%): [4424367.057, 4470167.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  4447267.325 ± 22900.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_spliterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_spliterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536369.946 ops/s
# Warmup Iteration   2: 542399.963 ops/s
# Warmup Iteration   3: 736066.718 ops/s
# Warmup Iteration   4: 769899.727 ops/s
# Warmup Iteration   5: 764523.758 ops/s
# Warmup Iteration   6: 760400.030 ops/s
# Warmup Iteration   7: 747796.126 ops/s
# Warmup Iteration   8: 760871.003 ops/s
# Warmup Iteration   9: 759641.704 ops/s
# Warmup Iteration  10: 762207.331 ops/s
# Warmup Iteration  11: 643559.840 ops/s
# Warmup Iteration  12: 745003.478 ops/s
# Warmup Iteration  13: 764623.594 ops/s
# Warmup Iteration  14: 762758.214 ops/s
# Warmup Iteration  15: 770147.153 ops/s
# Warmup Iteration  16: 766341.164 ops/s
# Warmup Iteration  17: 785215.487 ops/s
# Warmup Iteration  18: 776290.302 ops/s
# Warmup Iteration  19: 782897.729 ops/s
# Warmup Iteration  20: 754185.381 ops/s
# Warmup Iteration  21: 799011.961 ops/s
# Warmup Iteration  22: 772494.987 ops/s
# Warmup Iteration  23: 810753.054 ops/s
# Warmup Iteration  24: 780166.164 ops/s
# Warmup Iteration  25: 783785.133 ops/s
# Warmup Iteration  26: 808007.848 ops/s
# Warmup Iteration  27: 789449.306 ops/s
# Warmup Iteration  28: 794051.409 ops/s
# Warmup Iteration  29: 770014.218 ops/s
# Warmup Iteration  30: 798963.668 ops/s
Iteration   1: 801704.972 ops/s
Iteration   2: 801589.092 ops/s
Iteration   3: 797856.477 ops/s
Iteration   4: 785917.754 ops/s
Iteration   5: 798841.648 ops/s
Iteration   6: 807817.786 ops/s
Iteration   7: 808978.446 ops/s
Iteration   8: 785520.461 ops/s
Iteration   9: 800739.100 ops/s
Iteration  10: 799087.211 ops/s
Iteration  11: 801372.703 ops/s
Iteration  12: 801417.591 ops/s
Iteration  13: 801325.277 ops/s
Iteration  14: 813762.455 ops/s
Iteration  15: 783767.438 ops/s
Iteration  16: 795320.265 ops/s
Iteration  17: 808856.211 ops/s
Iteration  18: 810782.537 ops/s
Iteration  19: 807136.312 ops/s
Iteration  20: 800735.311 ops/s
Iteration  21: 808444.622 ops/s
Iteration  22: 804931.381 ops/s
Iteration  23: 802517.085 ops/s
Iteration  24: 806744.169 ops/s
Iteration  25: 807444.564 ops/s
Iteration  26: 803693.549 ops/s
Iteration  27: 812335.400 ops/s
Iteration  28: 819219.415 ops/s
Iteration  29: 819211.808 ops/s
Iteration  30: 803215.142 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_spliterator_throws":
  803342.873 ±(99.9%) 5646.420 ops/s [Average]
  (min, avg, max) = (783767.438, 803342.873, 819219.415), stdev = 8451.296
  CI (99.9%): [797696.453, 808989.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_spliterator_throws  thrpt   30  803342.873 ± 5646.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_stream_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_stream_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562407.301 ops/s
# Warmup Iteration   2: 633606.364 ops/s
# Warmup Iteration   3: 832649.780 ops/s
# Warmup Iteration   4: 826513.313 ops/s
# Warmup Iteration   5: 812509.046 ops/s
# Warmup Iteration   6: 844534.883 ops/s
# Warmup Iteration   7: 833388.671 ops/s
# Warmup Iteration   8: 841462.723 ops/s
# Warmup Iteration   9: 830824.641 ops/s
# Warmup Iteration  10: 686225.391 ops/s
# Warmup Iteration  11: 780108.115 ops/s
# Warmup Iteration  12: 819694.487 ops/s
# Warmup Iteration  13: 824865.387 ops/s
# Warmup Iteration  14: 836921.172 ops/s
# Warmup Iteration  15: 818231.531 ops/s
# Warmup Iteration  16: 832687.448 ops/s
# Warmup Iteration  17: 864767.336 ops/s
# Warmup Iteration  18: 875075.817 ops/s
# Warmup Iteration  19: 875551.037 ops/s
# Warmup Iteration  20: 852841.109 ops/s
# Warmup Iteration  21: 870122.914 ops/s
# Warmup Iteration  22: 873713.432 ops/s
# Warmup Iteration  23: 868476.531 ops/s
# Warmup Iteration  24: 865739.840 ops/s
# Warmup Iteration  25: 867814.162 ops/s
# Warmup Iteration  26: 872191.879 ops/s
# Warmup Iteration  27: 871671.542 ops/s
# Warmup Iteration  28: 867727.931 ops/s
# Warmup Iteration  29: 875342.971 ops/s
# Warmup Iteration  30: 856847.594 ops/s
Iteration   1: 870009.020 ops/s
Iteration   2: 880197.786 ops/s
Iteration   3: 882792.274 ops/s
Iteration   4: 878586.480 ops/s
Iteration   5: 876101.470 ops/s
Iteration   6: 871892.960 ops/s
Iteration   7: 879819.105 ops/s
Iteration   8: 873278.168 ops/s
Iteration   9: 875435.551 ops/s
Iteration  10: 870010.663 ops/s
Iteration  11: 868905.074 ops/s
Iteration  12: 869886.021 ops/s
Iteration  13: 869792.623 ops/s
Iteration  14: 871235.755 ops/s
Iteration  15: 869761.477 ops/s
Iteration  16: 864471.050 ops/s
Iteration  17: 863049.336 ops/s
Iteration  18: 868721.936 ops/s
Iteration  19: 871896.011 ops/s
Iteration  20: 850068.647 ops/s
Iteration  21: 822704.642 ops/s
Iteration  22: 820900.847 ops/s
Iteration  23: 863745.792 ops/s
Iteration  24: 852464.579 ops/s
Iteration  25: 830271.419 ops/s
Iteration  26: 836703.095 ops/s
Iteration  27: 879011.412 ops/s
Iteration  28: 870167.408 ops/s
Iteration  29: 873974.870 ops/s
Iteration  30: 867108.863 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_stream_throws":
  864765.478 ±(99.9%) 11074.329 ops/s [Average]
  (min, avg, max) = (820900.847, 864765.478, 882792.274), stdev = 16575.535
  CI (99.9%): [853691.149, 875839.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_stream_throws  thrpt   30  864765.478 ± 11074.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570469.244 ops/s
# Warmup Iteration   2: 883562.355 ops/s
# Warmup Iteration   3: 1034681.218 ops/s
# Warmup Iteration   4: 1070334.216 ops/s
# Warmup Iteration   5: 1046588.270 ops/s
# Warmup Iteration   6: 947723.302 ops/s
# Warmup Iteration   7: 996762.992 ops/s
# Warmup Iteration   8: 1072439.269 ops/s
# Warmup Iteration   9: 1076444.549 ops/s
# Warmup Iteration  10: 1087608.728 ops/s
# Warmup Iteration  11: 1059043.893 ops/s
# Warmup Iteration  12: 1066880.757 ops/s
# Warmup Iteration  13: 1060883.681 ops/s
# Warmup Iteration  14: 1067450.146 ops/s
# Warmup Iteration  15: 1052276.895 ops/s
# Warmup Iteration  16: 1070306.036 ops/s
# Warmup Iteration  17: 1079029.473 ops/s
# Warmup Iteration  18: 1072678.985 ops/s
# Warmup Iteration  19: 1069307.053 ops/s
# Warmup Iteration  20: 1064034.525 ops/s
# Warmup Iteration  21: 1062656.104 ops/s
# Warmup Iteration  22: 1074124.819 ops/s
# Warmup Iteration  23: 1071557.939 ops/s
# Warmup Iteration  24: 1067400.700 ops/s
# Warmup Iteration  25: 1067318.858 ops/s
# Warmup Iteration  26: 1067687.987 ops/s
# Warmup Iteration  27: 1068129.661 ops/s
# Warmup Iteration  28: 1052346.132 ops/s
# Warmup Iteration  29: 1042830.572 ops/s
# Warmup Iteration  30: 1043216.420 ops/s
Iteration   1: 1038276.413 ops/s
Iteration   2: 1021528.460 ops/s
Iteration   3: 1058259.115 ops/s
Iteration   4: 1082167.672 ops/s
Iteration   5: 1060014.005 ops/s
Iteration   6: 1077845.563 ops/s
Iteration   7: 1069978.383 ops/s
Iteration   8: 1050610.922 ops/s
Iteration   9: 1067153.178 ops/s
Iteration  10: 1065344.226 ops/s
Iteration  11: 1071203.238 ops/s
Iteration  12: 1080927.579 ops/s
Iteration  13: 1070354.958 ops/s
Iteration  14: 1081383.691 ops/s
Iteration  15: 1060306.426 ops/s
Iteration  16: 1068560.692 ops/s
Iteration  17: 1068629.717 ops/s
Iteration  18: 1081727.423 ops/s
Iteration  19: 1065821.335 ops/s
Iteration  20: 1070832.097 ops/s
Iteration  21: 1073076.617 ops/s
Iteration  22: 1070997.645 ops/s
Iteration  23: 1057809.730 ops/s
Iteration  24: 1080152.999 ops/s
Iteration  25: 1046851.638 ops/s
Iteration  26: 1073217.727 ops/s
Iteration  27: 1082876.921 ops/s
Iteration  28: 1070988.800 ops/s
Iteration  29: 1050470.242 ops/s
Iteration  30: 1062090.291 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDouble":
  1065981.923 ±(99.9%) 9323.673 ops/s [Average]
  (min, avg, max) = (1021528.460, 1065981.923, 1082876.921), stdev = 13955.235
  CI (99.9%): [1056658.251, 1075305.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1065981.923 ± 9323.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.838 ops/s
# Warmup Iteration   2: 70.763 ops/s
# Warmup Iteration   3: 99.892 ops/s
# Warmup Iteration   4: 100.101 ops/s
# Warmup Iteration   5: 99.879 ops/s
# Warmup Iteration   6: 99.975 ops/s
# Warmup Iteration   7: 100.145 ops/s
# Warmup Iteration   8: 100.943 ops/s
# Warmup Iteration   9: 99.479 ops/s
# Warmup Iteration  10: 82.399 ops/s
# Warmup Iteration  11: 98.139 ops/s
# Warmup Iteration  12: 99.573 ops/s
# Warmup Iteration  13: 99.438 ops/s
# Warmup Iteration  14: 100.776 ops/s
# Warmup Iteration  15: 100.987 ops/s
# Warmup Iteration  16: 98.600 ops/s
# Warmup Iteration  17: 100.990 ops/s
# Warmup Iteration  18: 97.141 ops/s
# Warmup Iteration  19: 100.133 ops/s
# Warmup Iteration  20: 102.481 ops/s
# Warmup Iteration  21: 98.273 ops/s
# Warmup Iteration  22: 99.313 ops/s
# Warmup Iteration  23: 101.799 ops/s
# Warmup Iteration  24: 102.428 ops/s
# Warmup Iteration  25: 99.940 ops/s
# Warmup Iteration  26: 102.497 ops/s
# Warmup Iteration  27: 101.616 ops/s
# Warmup Iteration  28: 100.329 ops/s
# Warmup Iteration  29: 98.871 ops/s
# Warmup Iteration  30: 97.795 ops/s
Iteration   1: 100.127 ops/s
Iteration   2: 98.485 ops/s
Iteration   3: 96.055 ops/s
Iteration   4: 98.924 ops/s
Iteration   5: 99.044 ops/s
Iteration   6: 99.817 ops/s
Iteration   7: 98.621 ops/s
Iteration   8: 100.225 ops/s
Iteration   9: 98.536 ops/s
Iteration  10: 98.591 ops/s
Iteration  11: 97.950 ops/s
Iteration  12: 97.642 ops/s
Iteration  13: 99.506 ops/s
Iteration  14: 99.166 ops/s
Iteration  15: 98.272 ops/s
Iteration  16: 93.806 ops/s
Iteration  17: 93.570 ops/s
Iteration  18: 95.040 ops/s
Iteration  19: 96.327 ops/s
Iteration  20: 95.837 ops/s
Iteration  21: 100.069 ops/s
Iteration  22: 99.416 ops/s
Iteration  23: 99.927 ops/s
Iteration  24: 100.557 ops/s
Iteration  25: 99.946 ops/s
Iteration  26: 99.151 ops/s
Iteration  27: 100.580 ops/s
Iteration  28: 99.454 ops/s
Iteration  29: 100.344 ops/s
Iteration  30: 99.898 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  98.496 ±(99.9%) 1.296 ops/s [Average]
  (min, avg, max) = (93.570, 98.496, 100.580), stdev = 1.940
  CI (99.9%): [97.200, 99.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt   Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  98.496 ± 1.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 585873.750 ops/s
# Warmup Iteration   2: 974006.567 ops/s
# Warmup Iteration   3: 1086206.605 ops/s
# Warmup Iteration   4: 1115363.591 ops/s
# Warmup Iteration   5: 1102899.102 ops/s
# Warmup Iteration   6: 935368.555 ops/s
# Warmup Iteration   7: 1137283.852 ops/s
# Warmup Iteration   8: 1147050.798 ops/s
# Warmup Iteration   9: 1137391.051 ops/s
# Warmup Iteration  10: 1134086.548 ops/s
# Warmup Iteration  11: 1131311.205 ops/s
# Warmup Iteration  12: 1133936.442 ops/s
# Warmup Iteration  13: 1097552.093 ops/s
# Warmup Iteration  14: 1103530.504 ops/s
# Warmup Iteration  15: 1132866.509 ops/s
# Warmup Iteration  16: 1125349.278 ops/s
# Warmup Iteration  17: 1105501.309 ops/s
# Warmup Iteration  18: 1096761.481 ops/s
# Warmup Iteration  19: 1133266.802 ops/s
# Warmup Iteration  20: 1136376.486 ops/s
# Warmup Iteration  21: 1146042.557 ops/s
# Warmup Iteration  22: 1120804.259 ops/s
# Warmup Iteration  23: 1122849.281 ops/s
# Warmup Iteration  24: 1089179.279 ops/s
# Warmup Iteration  25: 1126662.889 ops/s
# Warmup Iteration  26: 1112791.207 ops/s
# Warmup Iteration  27: 1132899.421 ops/s
# Warmup Iteration  28: 1097114.670 ops/s
# Warmup Iteration  29: 1131649.821 ops/s
# Warmup Iteration  30: 1087065.196 ops/s
Iteration   1: 1068538.437 ops/s
Iteration   2: 1094785.507 ops/s
Iteration   3: 1106946.635 ops/s
Iteration   4: 1140272.805 ops/s
Iteration   5: 1125180.642 ops/s
Iteration   6: 1127187.010 ops/s
Iteration   7: 1128582.510 ops/s
Iteration   8: 1116055.837 ops/s
Iteration   9: 1131990.203 ops/s
Iteration  10: 1137141.235 ops/s
Iteration  11: 1134000.413 ops/s
Iteration  12: 1122679.460 ops/s
Iteration  13: 1123508.410 ops/s
Iteration  14: 1128938.662 ops/s
Iteration  15: 1139632.138 ops/s
Iteration  16: 1134018.986 ops/s
Iteration  17: 1133552.162 ops/s
Iteration  18: 1114835.704 ops/s
Iteration  19: 1128944.081 ops/s
Iteration  20: 1136207.294 ops/s
Iteration  21: 1125445.550 ops/s
Iteration  22: 1131447.772 ops/s
Iteration  23: 1140370.604 ops/s
Iteration  24: 1131632.843 ops/s
Iteration  25: 1138043.060 ops/s
Iteration  26: 1153359.703 ops/s
Iteration  27: 1155214.627 ops/s
Iteration  28: 1118051.079 ops/s
Iteration  29: 1088954.593 ops/s
Iteration  30: 1143748.796 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloat":
  1126642.225 ±(99.9%) 12091.526 ops/s [Average]
  (min, avg, max) = (1068538.437, 1126642.225, 1155214.627), stdev = 18098.028
  CI (99.9%): [1114550.700, 1138733.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1126642.225 ± 12091.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.200 ops/s
# Warmup Iteration   2: 66.920 ops/s
# Warmup Iteration   3: 98.989 ops/s
# Warmup Iteration   4: 100.354 ops/s
# Warmup Iteration   5: 99.484 ops/s
# Warmup Iteration   6: 99.261 ops/s
# Warmup Iteration   7: 99.598 ops/s
# Warmup Iteration   8: 100.932 ops/s
# Warmup Iteration   9: 101.440 ops/s
# Warmup Iteration  10: 84.345 ops/s
# Warmup Iteration  11: 99.096 ops/s
# Warmup Iteration  12: 100.641 ops/s
# Warmup Iteration  13: 101.856 ops/s
# Warmup Iteration  14: 101.957 ops/s
# Warmup Iteration  15: 98.247 ops/s
# Warmup Iteration  16: 100.480 ops/s
# Warmup Iteration  17: 101.875 ops/s
# Warmup Iteration  18: 100.857 ops/s
# Warmup Iteration  19: 98.289 ops/s
# Warmup Iteration  20: 97.056 ops/s
# Warmup Iteration  21: 94.859 ops/s
# Warmup Iteration  22: 93.944 ops/s
# Warmup Iteration  23: 98.077 ops/s
# Warmup Iteration  24: 96.267 ops/s
# Warmup Iteration  25: 97.454 ops/s
# Warmup Iteration  26: 99.128 ops/s
# Warmup Iteration  27: 100.686 ops/s
# Warmup Iteration  28: 98.437 ops/s
# Warmup Iteration  29: 96.802 ops/s
# Warmup Iteration  30: 97.957 ops/s
Iteration   1: 98.166 ops/s
Iteration   2: 97.428 ops/s
Iteration   3: 99.083 ops/s
Iteration   4: 100.111 ops/s
Iteration   5: 98.189 ops/s
Iteration   6: 101.118 ops/s
Iteration   7: 100.292 ops/s
Iteration   8: 97.942 ops/s
Iteration   9: 102.067 ops/s
Iteration  10: 99.192 ops/s
Iteration  11: 100.263 ops/s
Iteration  12: 97.657 ops/s
Iteration  13: 98.206 ops/s
Iteration  14: 98.318 ops/s
Iteration  15: 98.632 ops/s
Iteration  16: 99.156 ops/s
Iteration  17: 99.084 ops/s
Iteration  18: 98.137 ops/s
Iteration  19: 96.905 ops/s
Iteration  20: 99.279 ops/s
Iteration  21: 99.371 ops/s
Iteration  22: 98.395 ops/s
Iteration  23: 97.233 ops/s
Iteration  24: 96.957 ops/s
Iteration  25: 96.925 ops/s
Iteration  26: 100.294 ops/s
Iteration  27: 98.977 ops/s
Iteration  28: 100.510 ops/s
Iteration  29: 99.724 ops/s
Iteration  30: 99.860 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  98.916 ±(99.9%) 0.866 ops/s [Average]
  (min, avg, max) = (96.905, 98.916, 102.067), stdev = 1.297
  CI (99.9%): [98.049, 99.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  98.916 ± 0.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742308.943 ops/s
# Warmup Iteration   2: 1291918.963 ops/s
# Warmup Iteration   3: 1450466.838 ops/s
# Warmup Iteration   4: 1440574.033 ops/s
# Warmup Iteration   5: 1443067.641 ops/s
# Warmup Iteration   6: 1151563.372 ops/s
# Warmup Iteration   7: 1480673.415 ops/s
# Warmup Iteration   8: 1463929.586 ops/s
# Warmup Iteration   9: 1404078.408 ops/s
# Warmup Iteration  10: 1452966.857 ops/s
# Warmup Iteration  11: 1476772.101 ops/s
# Warmup Iteration  12: 1488876.984 ops/s
# Warmup Iteration  13: 1495592.559 ops/s
# Warmup Iteration  14: 1496875.118 ops/s
# Warmup Iteration  15: 1491718.643 ops/s
# Warmup Iteration  16: 1480305.871 ops/s
# Warmup Iteration  17: 1504144.656 ops/s
# Warmup Iteration  18: 1489470.776 ops/s
# Warmup Iteration  19: 1484223.233 ops/s
# Warmup Iteration  20: 1492281.224 ops/s
# Warmup Iteration  21: 1490542.239 ops/s
# Warmup Iteration  22: 1498659.505 ops/s
# Warmup Iteration  23: 1477963.206 ops/s
# Warmup Iteration  24: 1497797.884 ops/s
# Warmup Iteration  25: 1497360.742 ops/s
# Warmup Iteration  26: 1490256.079 ops/s
# Warmup Iteration  27: 1495422.347 ops/s
# Warmup Iteration  28: 1490780.758 ops/s
# Warmup Iteration  29: 1467530.474 ops/s
# Warmup Iteration  30: 1474215.127 ops/s
Iteration   1: 1484013.547 ops/s
Iteration   2: 1490271.212 ops/s
Iteration   3: 1497444.170 ops/s
Iteration   4: 1488544.321 ops/s
Iteration   5: 1500238.603 ops/s
Iteration   6: 1497856.029 ops/s
Iteration   7: 1497222.740 ops/s
Iteration   8: 1488280.195 ops/s
Iteration   9: 1471238.128 ops/s
Iteration  10: 1478049.908 ops/s
Iteration  11: 1504898.363 ops/s
Iteration  12: 1486890.361 ops/s
Iteration  13: 1490266.476 ops/s
Iteration  14: 1490601.813 ops/s
Iteration  15: 1503390.279 ops/s
Iteration  16: 1495675.646 ops/s
Iteration  17: 1497489.871 ops/s
Iteration  18: 1489141.483 ops/s
Iteration  19: 1493080.076 ops/s
Iteration  20: 1483937.290 ops/s
Iteration  21: 1480329.234 ops/s
Iteration  22: 1493176.752 ops/s
Iteration  23: 1487215.960 ops/s
Iteration  24: 1501749.528 ops/s
Iteration  25: 1483077.256 ops/s
Iteration  26: 1501752.456 ops/s
Iteration  27: 1483433.927 ops/s
Iteration  28: 1490070.037 ops/s
Iteration  29: 1483126.893 ops/s
Iteration  30: 1488843.007 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByInt":
  1490710.185 ±(99.9%) 5363.035 ops/s [Average]
  (min, avg, max) = (1471238.128, 1490710.185, 1504898.363), stdev = 8027.138
  CI (99.9%): [1485347.151, 1496073.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1490710.185 ± 5363.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 741415.472 ops/s
# Warmup Iteration   2: 1304219.318 ops/s
# Warmup Iteration   3: 1452556.352 ops/s
# Warmup Iteration   4: 1456177.169 ops/s
# Warmup Iteration   5: 1482858.209 ops/s
# Warmup Iteration   6: 1219611.792 ops/s
# Warmup Iteration   7: 1468413.504 ops/s
# Warmup Iteration   8: 1474587.091 ops/s
# Warmup Iteration   9: 1471634.902 ops/s
# Warmup Iteration  10: 1473786.401 ops/s
# Warmup Iteration  11: 1471577.783 ops/s
# Warmup Iteration  12: 1480769.894 ops/s
# Warmup Iteration  13: 1483102.380 ops/s
# Warmup Iteration  14: 1479643.411 ops/s
# Warmup Iteration  15: 1481173.690 ops/s
# Warmup Iteration  16: 1482091.273 ops/s
# Warmup Iteration  17: 1464924.534 ops/s
# Warmup Iteration  18: 1482375.977 ops/s
# Warmup Iteration  19: 1477209.427 ops/s
# Warmup Iteration  20: 1476499.880 ops/s
# Warmup Iteration  21: 1484630.080 ops/s
# Warmup Iteration  22: 1476164.814 ops/s
# Warmup Iteration  23: 1470906.355 ops/s
# Warmup Iteration  24: 1462055.569 ops/s
# Warmup Iteration  25: 1459596.264 ops/s
# Warmup Iteration  26: 1484253.668 ops/s
# Warmup Iteration  27: 1462485.880 ops/s
# Warmup Iteration  28: 1468437.729 ops/s
# Warmup Iteration  29: 1462950.361 ops/s
# Warmup Iteration  30: 1479325.330 ops/s
Iteration   1: 1467614.040 ops/s
Iteration   2: 1479544.416 ops/s
Iteration   3: 1476392.394 ops/s
Iteration   4: 1484172.148 ops/s
Iteration   5: 1484905.363 ops/s
Iteration   6: 1480327.923 ops/s
Iteration   7: 1488357.936 ops/s
Iteration   8: 1483674.814 ops/s
Iteration   9: 1475449.599 ops/s
Iteration  10: 1487056.115 ops/s
Iteration  11: 1479357.213 ops/s
Iteration  12: 1485452.164 ops/s
Iteration  13: 1490839.552 ops/s
Iteration  14: 1479876.596 ops/s
Iteration  15: 1483055.468 ops/s
Iteration  16: 1486920.100 ops/s
Iteration  17: 1487231.255 ops/s
Iteration  18: 1489423.569 ops/s
Iteration  19: 1482690.845 ops/s
Iteration  20: 1480518.878 ops/s
Iteration  21: 1486819.951 ops/s
Iteration  22: 1476709.862 ops/s
Iteration  23: 1481429.943 ops/s
Iteration  24: 1478278.166 ops/s
Iteration  25: 1478847.568 ops/s
Iteration  26: 1491618.958 ops/s
Iteration  27: 1482487.807 ops/s
Iteration  28: 1488321.653 ops/s
Iteration  29: 1481147.006 ops/s
Iteration  30: 1491714.642 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumByLong":
  1483007.865 ±(99.9%) 3631.514 ops/s [Average]
  (min, avg, max) = (1467614.040, 1483007.865, 1491714.642), stdev = 5435.480
  CI (99.9%): [1479376.351, 1486639.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1483007.865 ± 3631.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1702015.385 ops/s
# Warmup Iteration   2: 3703276.743 ops/s
# Warmup Iteration   3: 3771717.975 ops/s
# Warmup Iteration   4: 3660312.662 ops/s
# Warmup Iteration   5: 3290169.563 ops/s
# Warmup Iteration   6: 3805627.130 ops/s
# Warmup Iteration   7: 3820471.330 ops/s
# Warmup Iteration   8: 3791812.974 ops/s
# Warmup Iteration   9: 3818997.482 ops/s
# Warmup Iteration  10: 3773778.052 ops/s
# Warmup Iteration  11: 3772226.202 ops/s
# Warmup Iteration  12: 3756819.851 ops/s
# Warmup Iteration  13: 3793208.262 ops/s
# Warmup Iteration  14: 3817259.787 ops/s
# Warmup Iteration  15: 3796342.561 ops/s
# Warmup Iteration  16: 3767162.335 ops/s
# Warmup Iteration  17: 3808972.882 ops/s
# Warmup Iteration  18: 3785335.916 ops/s
# Warmup Iteration  19: 3800520.582 ops/s
# Warmup Iteration  20: 3773661.712 ops/s
# Warmup Iteration  21: 3811068.057 ops/s
# Warmup Iteration  22: 3795116.589 ops/s
# Warmup Iteration  23: 3810908.620 ops/s
# Warmup Iteration  24: 3771162.690 ops/s
# Warmup Iteration  25: 3798701.229 ops/s
# Warmup Iteration  26: 3785954.395 ops/s
# Warmup Iteration  27: 3775100.586 ops/s
# Warmup Iteration  28: 3665304.038 ops/s
# Warmup Iteration  29: 3696648.056 ops/s
# Warmup Iteration  30: 3632540.284 ops/s
Iteration   1: 3713705.813 ops/s
Iteration   2: 3725254.832 ops/s
Iteration   3: 3817340.243 ops/s
Iteration   4: 3751438.228 ops/s
Iteration   5: 3776960.391 ops/s
Iteration   6: 3727145.421 ops/s
Iteration   7: 3660124.649 ops/s
Iteration   8: 3720577.807 ops/s
Iteration   9: 3680338.690 ops/s
Iteration  10: 3641512.855 ops/s
Iteration  11: 3635112.588 ops/s
Iteration  12: 3779073.198 ops/s
Iteration  13: 3725686.355 ops/s
Iteration  14: 3762492.038 ops/s
Iteration  15: 3785321.290 ops/s
Iteration  16: 3571405.845 ops/s
Iteration  17: 3596998.278 ops/s
Iteration  18: 3508392.094 ops/s
Iteration  19: 3702955.105 ops/s
Iteration  20: 3691109.059 ops/s
Iteration  21: 3710429.930 ops/s
Iteration  22: 3684103.301 ops/s
Iteration  23: 3651667.755 ops/s
Iteration  24: 3795313.333 ops/s
Iteration  25: 3780900.288 ops/s
Iteration  26: 3723054.406 ops/s
Iteration  27: 3620296.612 ops/s
Iteration  28: 3581925.611 ops/s
Iteration  29: 3736760.085 ops/s
Iteration  30: 3699965.767 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDouble":
  3698578.729 ±(99.9%) 49067.711 ops/s [Average]
  (min, avg, max) = (3508392.094, 3698578.729, 3817340.243), stdev = 73442.245
  CI (99.9%): [3649511.018, 3747646.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumDouble  thrpt   30  3698578.729 ± 49067.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.928 ops/s
# Warmup Iteration   2: 86.271 ops/s
# Warmup Iteration   3: 118.488 ops/s
# Warmup Iteration   4: 116.048 ops/s
# Warmup Iteration   5: 114.890 ops/s
# Warmup Iteration   6: 117.604 ops/s
# Warmup Iteration   7: 117.901 ops/s
# Warmup Iteration   8: 115.580 ops/s
# Warmup Iteration   9: 113.142 ops/s
# Warmup Iteration  10: 111.389 ops/s
# Warmup Iteration  11: 95.478 ops/s
# Warmup Iteration  12: 116.126 ops/s
# Warmup Iteration  13: 115.808 ops/s
# Warmup Iteration  14: 114.418 ops/s
# Warmup Iteration  15: 113.168 ops/s
# Warmup Iteration  16: 118.614 ops/s
# Warmup Iteration  17: 118.600 ops/s
# Warmup Iteration  18: 115.684 ops/s
# Warmup Iteration  19: 116.442 ops/s
# Warmup Iteration  20: 114.975 ops/s
# Warmup Iteration  21: 112.249 ops/s
# Warmup Iteration  22: 112.416 ops/s
# Warmup Iteration  23: 113.608 ops/s
# Warmup Iteration  24: 112.147 ops/s
# Warmup Iteration  25: 114.253 ops/s
# Warmup Iteration  26: 114.983 ops/s
# Warmup Iteration  27: 114.869 ops/s
# Warmup Iteration  28: 115.545 ops/s
# Warmup Iteration  29: 115.544 ops/s
# Warmup Iteration  30: 112.877 ops/s
Iteration   1: 114.401 ops/s
Iteration   2: 113.878 ops/s
Iteration   3: 114.772 ops/s
Iteration   4: 114.293 ops/s
Iteration   5: 117.303 ops/s
Iteration   6: 117.184 ops/s
Iteration   7: 115.008 ops/s
Iteration   8: 118.151 ops/s
Iteration   9: 118.755 ops/s
Iteration  10: 119.224 ops/s
Iteration  11: 117.100 ops/s
Iteration  12: 117.580 ops/s
Iteration  13: 116.688 ops/s
Iteration  14: 116.637 ops/s
Iteration  15: 116.621 ops/s
Iteration  16: 118.061 ops/s
Iteration  17: 118.042 ops/s
Iteration  18: 116.410 ops/s
Iteration  19: 117.778 ops/s
Iteration  20: 117.267 ops/s
Iteration  21: 117.122 ops/s
Iteration  22: 117.222 ops/s
Iteration  23: 117.810 ops/s
Iteration  24: 115.470 ops/s
Iteration  25: 118.556 ops/s
Iteration  26: 119.517 ops/s
Iteration  27: 119.255 ops/s
Iteration  28: 118.296 ops/s
Iteration  29: 117.048 ops/s
Iteration  30: 116.965 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  117.080 ±(99.9%) 0.997 ops/s [Average]
  (min, avg, max) = (113.878, 117.080, 119.517), stdev = 1.492
  CI (99.9%): [116.083, 118.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt    Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  117.080 ± 0.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 82.056 ops/s
# Warmup Iteration   2: 95.474 ops/s
# Warmup Iteration   3: 124.365 ops/s
# Warmup Iteration   4: 122.322 ops/s
# Warmup Iteration   5: 125.371 ops/s
# Warmup Iteration   6: 122.794 ops/s
# Warmup Iteration   7: 120.952 ops/s
# Warmup Iteration   8: 123.440 ops/s
# Warmup Iteration   9: 123.213 ops/s
# Warmup Iteration  10: 111.844 ops/s
# Warmup Iteration  11: 115.187 ops/s
# Warmup Iteration  12: 122.137 ops/s
# Warmup Iteration  13: 121.830 ops/s
# Warmup Iteration  14: 122.575 ops/s
# Warmup Iteration  15: 122.230 ops/s
# Warmup Iteration  16: 123.335 ops/s
# Warmup Iteration  17: 123.167 ops/s
# Warmup Iteration  18: 122.394 ops/s
# Warmup Iteration  19: 121.119 ops/s
# Warmup Iteration  20: 121.337 ops/s
# Warmup Iteration  21: 123.406 ops/s
# Warmup Iteration  22: 124.533 ops/s
# Warmup Iteration  23: 123.457 ops/s
# Warmup Iteration  24: 121.806 ops/s
# Warmup Iteration  25: 119.277 ops/s
# Warmup Iteration  26: 120.913 ops/s
# Warmup Iteration  27: 120.165 ops/s
# Warmup Iteration  28: 121.151 ops/s
# Warmup Iteration  29: 121.978 ops/s
# Warmup Iteration  30: 119.067 ops/s
Iteration   1: 121.762 ops/s
Iteration   2: 116.301 ops/s
Iteration   3: 120.608 ops/s
Iteration   4: 120.188 ops/s
Iteration   5: 115.985 ops/s
Iteration   6: 116.072 ops/s
Iteration   7: 118.890 ops/s
Iteration   8: 118.259 ops/s
Iteration   9: 116.859 ops/s
Iteration  10: 119.079 ops/s
Iteration  11: 117.145 ops/s
Iteration  12: 117.278 ops/s
Iteration  13: 117.292 ops/s
Iteration  14: 115.325 ops/s
Iteration  15: 122.794 ops/s
Iteration  16: 122.230 ops/s
Iteration  17: 122.287 ops/s
Iteration  18: 122.041 ops/s
Iteration  19: 120.681 ops/s
Iteration  20: 121.583 ops/s
Iteration  21: 119.096 ops/s
Iteration  22: 122.015 ops/s
Iteration  23: 120.692 ops/s
Iteration  24: 122.138 ops/s
Iteration  25: 120.360 ops/s
Iteration  26: 119.744 ops/s
Iteration  27: 120.875 ops/s
Iteration  28: 120.741 ops/s
Iteration  29: 120.813 ops/s
Iteration  30: 120.337 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  119.649 ±(99.9%) 1.479 ops/s [Average]
  (min, avg, max) = (115.325, 119.649, 122.794), stdev = 2.214
  CI (99.9%): [118.170, 121.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt    Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  119.649 ± 1.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1703615.533 ops/s
# Warmup Iteration   2: 3670741.683 ops/s
# Warmup Iteration   3: 3706109.466 ops/s
# Warmup Iteration   4: 3799936.285 ops/s
# Warmup Iteration   5: 3121583.459 ops/s
# Warmup Iteration   6: 3865438.001 ops/s
# Warmup Iteration   7: 3749878.377 ops/s
# Warmup Iteration   8: 3863036.317 ops/s
# Warmup Iteration   9: 3891060.669 ops/s
# Warmup Iteration  10: 3837255.787 ops/s
# Warmup Iteration  11: 3628295.083 ops/s
# Warmup Iteration  12: 3731869.075 ops/s
# Warmup Iteration  13: 3732950.937 ops/s
# Warmup Iteration  14: 3832368.227 ops/s
# Warmup Iteration  15: 3850572.570 ops/s
# Warmup Iteration  16: 3843060.025 ops/s
# Warmup Iteration  17: 3733893.723 ops/s
# Warmup Iteration  18: 3792135.000 ops/s
# Warmup Iteration  19: 3813108.942 ops/s
# Warmup Iteration  20: 3848823.557 ops/s
# Warmup Iteration  21: 3821482.564 ops/s
# Warmup Iteration  22: 3796440.291 ops/s
# Warmup Iteration  23: 3797233.097 ops/s
# Warmup Iteration  24: 3813364.520 ops/s
# Warmup Iteration  25: 3824359.411 ops/s
# Warmup Iteration  26: 3844358.842 ops/s
# Warmup Iteration  27: 3679357.319 ops/s
# Warmup Iteration  28: 3750524.122 ops/s
# Warmup Iteration  29: 3832231.839 ops/s
# Warmup Iteration  30: 3856362.944 ops/s
Iteration   1: 3818286.091 ops/s
Iteration   2: 3808885.284 ops/s
Iteration   3: 3752125.701 ops/s
Iteration   4: 3658331.481 ops/s
Iteration   5: 3696807.467 ops/s
Iteration   6: 3653727.900 ops/s
Iteration   7: 3727277.485 ops/s
Iteration   8: 3824389.380 ops/s
Iteration   9: 3832313.289 ops/s
Iteration  10: 3821844.759 ops/s
Iteration  11: 3851786.436 ops/s
Iteration  12: 3854738.451 ops/s
Iteration  13: 3841351.754 ops/s
Iteration  14: 3853552.531 ops/s
Iteration  15: 3863253.880 ops/s
Iteration  16: 3844876.692 ops/s
Iteration  17: 3831366.956 ops/s
Iteration  18: 3686736.093 ops/s
Iteration  19: 3848009.326 ops/s
Iteration  20: 3876668.620 ops/s
Iteration  21: 3872211.553 ops/s
Iteration  22: 3798877.553 ops/s
Iteration  23: 3792414.787 ops/s
Iteration  24: 3856566.355 ops/s
Iteration  25: 3829593.017 ops/s
Iteration  26: 3843273.225 ops/s
Iteration  27: 3835525.797 ops/s
Iteration  28: 3800819.512 ops/s
Iteration  29: 3824783.443 ops/s
Iteration  30: 3750341.243 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloat":
  3805024.535 ±(99.9%) 42127.062 ops/s [Average]
  (min, avg, max) = (3653727.900, 3805024.535, 3876668.620), stdev = 63053.808
  CI (99.9%): [3762897.473, 3847151.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumFloat  thrpt   30  3805024.535 ± 42127.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78.061 ops/s
# Warmup Iteration   2: 85.679 ops/s
# Warmup Iteration   3: 116.842 ops/s
# Warmup Iteration   4: 118.809 ops/s
# Warmup Iteration   5: 117.087 ops/s
# Warmup Iteration   6: 117.557 ops/s
# Warmup Iteration   7: 114.998 ops/s
# Warmup Iteration   8: 113.164 ops/s
# Warmup Iteration   9: 113.210 ops/s
# Warmup Iteration  10: 115.322 ops/s
# Warmup Iteration  11: 97.895 ops/s
# Warmup Iteration  12: 117.386 ops/s
# Warmup Iteration  13: 118.050 ops/s
# Warmup Iteration  14: 117.317 ops/s
# Warmup Iteration  15: 114.789 ops/s
# Warmup Iteration  16: 116.881 ops/s
# Warmup Iteration  17: 113.101 ops/s
# Warmup Iteration  18: 112.380 ops/s
# Warmup Iteration  19: 115.759 ops/s
# Warmup Iteration  20: 117.278 ops/s
# Warmup Iteration  21: 115.900 ops/s
# Warmup Iteration  22: 117.674 ops/s
# Warmup Iteration  23: 113.250 ops/s
# Warmup Iteration  24: 112.325 ops/s
# Warmup Iteration  25: 108.459 ops/s
# Warmup Iteration  26: 108.363 ops/s
# Warmup Iteration  27: 109.214 ops/s
# Warmup Iteration  28: 107.958 ops/s
# Warmup Iteration  29: 108.334 ops/s
# Warmup Iteration  30: 107.699 ops/s
Iteration   1: 107.860 ops/s
Iteration   2: 107.933 ops/s
Iteration   3: 108.132 ops/s
Iteration   4: 108.056 ops/s
Iteration   5: 109.894 ops/s
Iteration   6: 110.225 ops/s
Iteration   7: 108.964 ops/s
Iteration   8: 107.566 ops/s
Iteration   9: 106.786 ops/s
Iteration  10: 108.155 ops/s
Iteration  11: 107.466 ops/s
Iteration  12: 108.030 ops/s
Iteration  13: 106.336 ops/s
Iteration  14: 103.215 ops/s
Iteration  15: 106.918 ops/s
Iteration  16: 102.720 ops/s
Iteration  17: 109.528 ops/s
Iteration  18: 109.187 ops/s
Iteration  19: 108.439 ops/s
Iteration  20: 109.040 ops/s
Iteration  21: 108.404 ops/s
Iteration  22: 108.620 ops/s
Iteration  23: 109.928 ops/s
Iteration  24: 109.085 ops/s
Iteration  25: 108.422 ops/s
Iteration  26: 109.267 ops/s
Iteration  27: 108.666 ops/s
Iteration  28: 108.124 ops/s
Iteration  29: 109.562 ops/s
Iteration  30: 108.086 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  108.087 ±(99.9%) 1.117 ops/s [Average]
  (min, avg, max) = (102.720, 108.087, 110.225), stdev = 1.673
  CI (99.9%): [106.970, 109.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  108.087 ± 1.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80.015 ops/s
# Warmup Iteration   2: 93.645 ops/s
# Warmup Iteration   3: 123.515 ops/s
# Warmup Iteration   4: 122.686 ops/s
# Warmup Iteration   5: 122.563 ops/s
# Warmup Iteration   6: 122.472 ops/s
# Warmup Iteration   7: 121.832 ops/s
# Warmup Iteration   8: 122.800 ops/s
# Warmup Iteration   9: 124.746 ops/s
# Warmup Iteration  10: 112.465 ops/s
# Warmup Iteration  11: 116.557 ops/s
# Warmup Iteration  12: 122.727 ops/s
# Warmup Iteration  13: 123.163 ops/s
# Warmup Iteration  14: 124.756 ops/s
# Warmup Iteration  15: 124.797 ops/s
# Warmup Iteration  16: 120.477 ops/s
# Warmup Iteration  17: 122.173 ops/s
# Warmup Iteration  18: 123.420 ops/s
# Warmup Iteration  19: 121.478 ops/s
# Warmup Iteration  20: 122.934 ops/s
# Warmup Iteration  21: 123.971 ops/s
# Warmup Iteration  22: 121.967 ops/s
# Warmup Iteration  23: 123.227 ops/s
# Warmup Iteration  24: 121.925 ops/s
# Warmup Iteration  25: 121.146 ops/s
# Warmup Iteration  26: 119.029 ops/s
# Warmup Iteration  27: 118.236 ops/s
# Warmup Iteration  28: 122.582 ops/s
# Warmup Iteration  29: 119.106 ops/s
# Warmup Iteration  30: 119.124 ops/s
Iteration   1: 118.297 ops/s
Iteration   2: 117.464 ops/s
Iteration   3: 117.942 ops/s
Iteration   4: 121.921 ops/s
Iteration   5: 117.062 ops/s
Iteration   6: 118.071 ops/s
Iteration   7: 117.908 ops/s
Iteration   8: 118.924 ops/s
Iteration   9: 120.060 ops/s
Iteration  10: 122.478 ops/s
Iteration  11: 119.921 ops/s
Iteration  12: 122.610 ops/s
Iteration  13: 121.518 ops/s
Iteration  14: 117.831 ops/s
Iteration  15: 117.743 ops/s
Iteration  16: 118.839 ops/s
Iteration  17: 121.342 ops/s
Iteration  18: 122.607 ops/s
Iteration  19: 119.614 ops/s
Iteration  20: 120.187 ops/s
Iteration  21: 119.957 ops/s
Iteration  22: 122.659 ops/s
Iteration  23: 123.717 ops/s
Iteration  24: 120.906 ops/s
Iteration  25: 117.095 ops/s
Iteration  26: 115.711 ops/s
Iteration  27: 116.442 ops/s
Iteration  28: 119.373 ops/s
Iteration  29: 121.832 ops/s
Iteration  30: 121.425 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  119.715 ±(99.9%) 1.441 ops/s [Average]
  (min, avg, max) = (115.711, 119.715, 123.717), stdev = 2.157
  CI (99.9%): [118.274, 121.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  119.715 ± 1.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1814197.331 ops/s
# Warmup Iteration   2: 3848024.475 ops/s
# Warmup Iteration   3: 3998291.761 ops/s
# Warmup Iteration   4: 3962593.066 ops/s
# Warmup Iteration   5: 3174968.560 ops/s
# Warmup Iteration   6: 3939861.053 ops/s
# Warmup Iteration   7: 3977748.665 ops/s
# Warmup Iteration   8: 3892873.418 ops/s
# Warmup Iteration   9: 4050149.935 ops/s
# Warmup Iteration  10: 4016238.451 ops/s
# Warmup Iteration  11: 4016526.032 ops/s
# Warmup Iteration  12: 3963122.727 ops/s
# Warmup Iteration  13: 4024324.118 ops/s
# Warmup Iteration  14: 3991925.385 ops/s
# Warmup Iteration  15: 3990480.712 ops/s
# Warmup Iteration  16: 4024861.978 ops/s
# Warmup Iteration  17: 3980756.898 ops/s
# Warmup Iteration  18: 3998646.638 ops/s
# Warmup Iteration  19: 4024044.615 ops/s
# Warmup Iteration  20: 4081386.529 ops/s
# Warmup Iteration  21: 4059002.740 ops/s
# Warmup Iteration  22: 4030359.224 ops/s
# Warmup Iteration  23: 4048814.831 ops/s
# Warmup Iteration  24: 4070392.398 ops/s
# Warmup Iteration  25: 4035848.673 ops/s
# Warmup Iteration  26: 4071588.488 ops/s
# Warmup Iteration  27: 4048904.764 ops/s
# Warmup Iteration  28: 4031059.145 ops/s
# Warmup Iteration  29: 4020024.479 ops/s
# Warmup Iteration  30: 4004339.882 ops/s
Iteration   1: 3996469.978 ops/s
Iteration   2: 3991108.549 ops/s
Iteration   3: 3981169.532 ops/s
Iteration   4: 3999580.269 ops/s
Iteration   5: 4020474.665 ops/s
Iteration   6: 4045170.288 ops/s
Iteration   7: 4014759.192 ops/s
Iteration   8: 4050719.195 ops/s
Iteration   9: 4014114.318 ops/s
Iteration  10: 3997639.596 ops/s
Iteration  11: 4068417.212 ops/s
Iteration  12: 3811214.798 ops/s
Iteration  13: 3911960.623 ops/s
Iteration  14: 3833124.446 ops/s
Iteration  15: 3856597.576 ops/s
Iteration  16: 3863109.005 ops/s
Iteration  17: 4066666.670 ops/s
Iteration  18: 3882966.381 ops/s
Iteration  19: 3851683.585 ops/s
Iteration  20: 3858575.769 ops/s
Iteration  21: 3864774.530 ops/s
Iteration  22: 3832078.150 ops/s
Iteration  23: 3807535.949 ops/s
Iteration  24: 3814537.992 ops/s
Iteration  25: 3822791.795 ops/s
Iteration  26: 3989854.959 ops/s
Iteration  27: 4029441.094 ops/s
Iteration  28: 3913770.663 ops/s
Iteration  29: 3810630.056 ops/s
Iteration  30: 3982527.019 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumInteger":
  3932782.128 ±(99.9%) 60730.328 ops/s [Average]
  (min, avg, max) = (3807535.949, 3932782.128, 4068417.212), stdev = 90898.303
  CI (99.9%): [3872051.801, 3993512.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumInteger  thrpt   30  3932782.128 ± 60730.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1807746.366 ops/s
# Warmup Iteration   2: 3775211.176 ops/s
# Warmup Iteration   3: 3941417.816 ops/s
# Warmup Iteration   4: 3980533.401 ops/s
# Warmup Iteration   5: 3205876.444 ops/s
# Warmup Iteration   6: 3879893.427 ops/s
# Warmup Iteration   7: 3956050.806 ops/s
# Warmup Iteration   8: 3966842.050 ops/s
# Warmup Iteration   9: 3886394.104 ops/s
# Warmup Iteration  10: 3921821.442 ops/s
# Warmup Iteration  11: 3703118.061 ops/s
# Warmup Iteration  12: 3908439.567 ops/s
# Warmup Iteration  13: 3937700.513 ops/s
# Warmup Iteration  14: 3811987.789 ops/s
# Warmup Iteration  15: 3767522.152 ops/s
# Warmup Iteration  16: 3928836.875 ops/s
# Warmup Iteration  17: 4039889.621 ops/s
# Warmup Iteration  18: 3963633.140 ops/s
# Warmup Iteration  19: 3898784.467 ops/s
# Warmup Iteration  20: 3915638.378 ops/s
# Warmup Iteration  21: 3819784.075 ops/s
# Warmup Iteration  22: 3921080.277 ops/s
# Warmup Iteration  23: 3949229.222 ops/s
# Warmup Iteration  24: 3994676.218 ops/s
# Warmup Iteration  25: 4015979.112 ops/s
# Warmup Iteration  26: 3842291.793 ops/s
# Warmup Iteration  27: 3819933.159 ops/s
# Warmup Iteration  28: 3963558.915 ops/s
# Warmup Iteration  29: 3763740.488 ops/s
# Warmup Iteration  30: 3746257.263 ops/s
Iteration   1: 3740939.324 ops/s
Iteration   2: 4009465.421 ops/s
Iteration   3: 3831664.304 ops/s
Iteration   4: 3840196.771 ops/s
Iteration   5: 4021052.760 ops/s
Iteration   6: 4036877.982 ops/s
Iteration   7: 4059732.053 ops/s
Iteration   8: 3812937.074 ops/s
Iteration   9: 3769492.717 ops/s
Iteration  10: 3869551.123 ops/s
Iteration  11: 3775314.027 ops/s
Iteration  12: 3800802.193 ops/s
Iteration  13: 3801920.886 ops/s
Iteration  14: 3861723.656 ops/s
Iteration  15: 3818798.290 ops/s
Iteration  16: 4034022.840 ops/s
Iteration  17: 3855229.152 ops/s
Iteration  18: 3948134.055 ops/s
Iteration  19: 3946704.871 ops/s
Iteration  20: 4005000.257 ops/s
Iteration  21: 3989015.480 ops/s
Iteration  22: 3901624.954 ops/s
Iteration  23: 3835635.017 ops/s
Iteration  24: 3811282.791 ops/s
Iteration  25: 3952740.119 ops/s
Iteration  26: 4008529.989 ops/s
Iteration  27: 4027193.036 ops/s
Iteration  28: 3816453.564 ops/s
Iteration  29: 3843605.608 ops/s
Iteration  30: 3863371.277 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_sumLong":
  3896300.386 ±(99.9%) 64501.716 ops/s [Average]
  (min, avg, max) = (3740939.324, 3896300.386, 4059732.053), stdev = 96543.139
  CI (99.9%): [3831798.671, 3960802.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_sumLong  thrpt   30  3896300.386 ± 64501.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1834612.495 ops/s
# Warmup Iteration   2: 4017273.333 ops/s
# Warmup Iteration   3: 3995529.003 ops/s
# Warmup Iteration   4: 3818378.439 ops/s
# Warmup Iteration   5: 3521090.227 ops/s
# Warmup Iteration   6: 3990464.486 ops/s
# Warmup Iteration   7: 4120792.042 ops/s
# Warmup Iteration   8: 4134111.753 ops/s
# Warmup Iteration   9: 4088417.680 ops/s
# Warmup Iteration  10: 4042912.669 ops/s
# Warmup Iteration  11: 3970065.567 ops/s
# Warmup Iteration  12: 4054771.078 ops/s
# Warmup Iteration  13: 4056270.091 ops/s
# Warmup Iteration  14: 4081941.593 ops/s
# Warmup Iteration  15: 4109348.956 ops/s
# Warmup Iteration  16: 4096021.031 ops/s
# Warmup Iteration  17: 3918613.991 ops/s
# Warmup Iteration  18: 3996712.770 ops/s
# Warmup Iteration  19: 3929895.558 ops/s
# Warmup Iteration  20: 3888668.687 ops/s
# Warmup Iteration  21: 4018706.201 ops/s
# Warmup Iteration  22: 4003321.958 ops/s
# Warmup Iteration  23: 3987674.161 ops/s
# Warmup Iteration  24: 4019824.844 ops/s
# Warmup Iteration  25: 4036665.773 ops/s
# Warmup Iteration  26: 3918085.153 ops/s
# Warmup Iteration  27: 3898250.877 ops/s
# Warmup Iteration  28: 4078374.774 ops/s
# Warmup Iteration  29: 4087624.023 ops/s
# Warmup Iteration  30: 4009380.958 ops/s
Iteration   1: 4037448.423 ops/s
Iteration   2: 3817028.253 ops/s
Iteration   3: 3972502.196 ops/s
Iteration   4: 3978510.228 ops/s
Iteration   5: 4017791.095 ops/s
Iteration   6: 4022080.797 ops/s
Iteration   7: 3995785.983 ops/s
Iteration   8: 4044861.785 ops/s
Iteration   9: 4001264.292 ops/s
Iteration  10: 3995102.437 ops/s
Iteration  11: 3980729.775 ops/s
Iteration  12: 4041773.727 ops/s
Iteration  13: 3970913.825 ops/s
Iteration  14: 4073288.334 ops/s
Iteration  15: 4017984.143 ops/s
Iteration  16: 4002996.268 ops/s
Iteration  17: 4028688.305 ops/s
Iteration  18: 4038568.898 ops/s
Iteration  19: 4053681.324 ops/s
Iteration  20: 4093285.032 ops/s
Iteration  21: 4106595.850 ops/s
Iteration  22: 4082780.325 ops/s
Iteration  23: 4027309.093 ops/s
Iteration  24: 4065228.168 ops/s
Iteration  25: 4050196.923 ops/s
Iteration  26: 4034908.516 ops/s
Iteration  27: 4029740.455 ops/s
Iteration  28: 4039684.743 ops/s
Iteration  29: 4038688.209 ops/s
Iteration  30: 4043417.253 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeDouble":
  4023427.822 ±(99.9%) 34615.983 ops/s [Average]
  (min, avg, max) = (3817028.253, 4023427.822, 4106595.850), stdev = 51811.577
  CI (99.9%): [3988811.839, 4058043.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4023427.822 ± 34615.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1850983.135 ops/s
# Warmup Iteration   2: 4271144.041 ops/s
# Warmup Iteration   3: 4321812.710 ops/s
# Warmup Iteration   4: 3600247.620 ops/s
# Warmup Iteration   5: 4256085.552 ops/s
# Warmup Iteration   6: 4345747.065 ops/s
# Warmup Iteration   7: 4332746.333 ops/s
# Warmup Iteration   8: 4285251.861 ops/s
# Warmup Iteration   9: 4214215.500 ops/s
# Warmup Iteration  10: 4374338.759 ops/s
# Warmup Iteration  11: 4315137.841 ops/s
# Warmup Iteration  12: 4335869.540 ops/s
# Warmup Iteration  13: 4239214.566 ops/s
# Warmup Iteration  14: 4375335.031 ops/s
# Warmup Iteration  15: 4334847.659 ops/s
# Warmup Iteration  16: 4333887.984 ops/s
# Warmup Iteration  17: 4183094.431 ops/s
# Warmup Iteration  18: 4224818.556 ops/s
# Warmup Iteration  19: 4306396.950 ops/s
# Warmup Iteration  20: 4264977.774 ops/s
# Warmup Iteration  21: 4057913.763 ops/s
# Warmup Iteration  22: 4287508.592 ops/s
# Warmup Iteration  23: 4340184.238 ops/s
# Warmup Iteration  24: 4363147.004 ops/s
# Warmup Iteration  25: 4337287.842 ops/s
# Warmup Iteration  26: 4263910.127 ops/s
# Warmup Iteration  27: 4326315.873 ops/s
# Warmup Iteration  28: 4285917.458 ops/s
# Warmup Iteration  29: 4195794.643 ops/s
# Warmup Iteration  30: 4195236.335 ops/s
Iteration   1: 4208823.845 ops/s
Iteration   2: 4267908.293 ops/s
Iteration   3: 4321336.096 ops/s
Iteration   4: 4396020.815 ops/s
Iteration   5: 4364913.925 ops/s
Iteration   6: 4341284.160 ops/s
Iteration   7: 4314755.677 ops/s
Iteration   8: 4262129.184 ops/s
Iteration   9: 4296711.799 ops/s
Iteration  10: 4290608.964 ops/s
Iteration  11: 4285359.788 ops/s
Iteration  12: 4328654.775 ops/s
Iteration  13: 4363172.501 ops/s
Iteration  14: 4422030.791 ops/s
Iteration  15: 4338612.095 ops/s
Iteration  16: 4403924.731 ops/s
Iteration  17: 4375696.215 ops/s
Iteration  18: 4355270.867 ops/s
Iteration  19: 4337933.419 ops/s
Iteration  20: 4281344.447 ops/s
Iteration  21: 4359714.866 ops/s
Iteration  22: 4213759.651 ops/s
Iteration  23: 4190644.434 ops/s
Iteration  24: 4372279.149 ops/s
Iteration  25: 4389394.218 ops/s
Iteration  26: 4346801.353 ops/s
Iteration  27: 4325324.656 ops/s
Iteration  28: 4367957.512 ops/s
Iteration  29: 4409393.219 ops/s
Iteration  30: 4417842.458 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeFloat":
  4331653.463 ±(99.9%) 40939.896 ops/s [Average]
  (min, avg, max) = (4190644.434, 4331653.463, 4422030.791), stdev = 61276.913
  CI (99.9%): [4290713.568, 4372593.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4331653.463 ± 40939.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1849569.182 ops/s
# Warmup Iteration   2: 4114531.449 ops/s
# Warmup Iteration   3: 4123080.218 ops/s
# Warmup Iteration   4: 3747365.112 ops/s
# Warmup Iteration   5: 3925150.540 ops/s
# Warmup Iteration   6: 4203586.508 ops/s
# Warmup Iteration   7: 4162348.837 ops/s
# Warmup Iteration   8: 4196844.407 ops/s
# Warmup Iteration   9: 4242088.548 ops/s
# Warmup Iteration  10: 4175645.421 ops/s
# Warmup Iteration  11: 4095582.776 ops/s
# Warmup Iteration  12: 4075943.220 ops/s
# Warmup Iteration  13: 4133555.804 ops/s
# Warmup Iteration  14: 4126933.049 ops/s
# Warmup Iteration  15: 4028026.283 ops/s
# Warmup Iteration  16: 4113481.016 ops/s
# Warmup Iteration  17: 4271122.633 ops/s
# Warmup Iteration  18: 4247428.116 ops/s
# Warmup Iteration  19: 4187382.847 ops/s
# Warmup Iteration  20: 4201847.794 ops/s
# Warmup Iteration  21: 4221956.305 ops/s
# Warmup Iteration  22: 4209667.301 ops/s
# Warmup Iteration  23: 4160395.736 ops/s
# Warmup Iteration  24: 4131913.843 ops/s
# Warmup Iteration  25: 4039219.747 ops/s
# Warmup Iteration  26: 4115562.127 ops/s
# Warmup Iteration  27: 4113692.881 ops/s
# Warmup Iteration  28: 4071142.433 ops/s
# Warmup Iteration  29: 4192382.174 ops/s
# Warmup Iteration  30: 4100184.976 ops/s
Iteration   1: 4272379.661 ops/s
Iteration   2: 4175648.017 ops/s
Iteration   3: 4213209.499 ops/s
Iteration   4: 4105546.356 ops/s
Iteration   5: 4081341.024 ops/s
Iteration   6: 4170127.026 ops/s
Iteration   7: 4185191.323 ops/s
Iteration   8: 4262890.893 ops/s
Iteration   9: 4219140.110 ops/s
Iteration  10: 4119864.209 ops/s
Iteration  11: 4076593.431 ops/s
Iteration  12: 4146628.592 ops/s
Iteration  13: 4203053.958 ops/s
Iteration  14: 4228374.016 ops/s
Iteration  15: 4194061.460 ops/s
Iteration  16: 4165011.495 ops/s
Iteration  17: 4226567.266 ops/s
Iteration  18: 4195615.284 ops/s
Iteration  19: 4216527.495 ops/s
Iteration  20: 4032537.153 ops/s
Iteration  21: 4223472.305 ops/s
Iteration  22: 4166062.785 ops/s
Iteration  23: 4214911.853 ops/s
Iteration  24: 4196204.846 ops/s
Iteration  25: 4193995.873 ops/s
Iteration  26: 4239323.922 ops/s
Iteration  27: 4247337.006 ops/s
Iteration  28: 4206608.282 ops/s
Iteration  29: 4249679.262 ops/s
Iteration  30: 4094465.379 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeInt":
  4184078.993 ±(99.9%) 39596.892 ops/s [Average]
  (min, avg, max) = (4032537.153, 4184078.993, 4272379.661), stdev = 59266.769
  CI (99.9%): [4144482.100, 4223675.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4184078.993 ± 39596.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1902606.993 ops/s
# Warmup Iteration   2: 4021528.914 ops/s
# Warmup Iteration   3: 4188821.132 ops/s
# Warmup Iteration   4: 4021389.489 ops/s
# Warmup Iteration   5: 3935525.185 ops/s
# Warmup Iteration   6: 4344026.405 ops/s
# Warmup Iteration   7: 4306936.789 ops/s
# Warmup Iteration   8: 4328015.650 ops/s
# Warmup Iteration   9: 4254417.847 ops/s
# Warmup Iteration  10: 4225288.825 ops/s
# Warmup Iteration  11: 4394919.652 ops/s
# Warmup Iteration  12: 4325740.506 ops/s
# Warmup Iteration  13: 4265219.550 ops/s
# Warmup Iteration  14: 4193730.187 ops/s
# Warmup Iteration  15: 4225322.762 ops/s
# Warmup Iteration  16: 4411060.473 ops/s
# Warmup Iteration  17: 4293337.635 ops/s
# Warmup Iteration  18: 4329306.989 ops/s
# Warmup Iteration  19: 4230731.796 ops/s
# Warmup Iteration  20: 4266849.116 ops/s
# Warmup Iteration  21: 4171150.339 ops/s
# Warmup Iteration  22: 4403366.097 ops/s
# Warmup Iteration  23: 4332049.355 ops/s
# Warmup Iteration  24: 4376949.769 ops/s
# Warmup Iteration  25: 4354697.509 ops/s
# Warmup Iteration  26: 4250339.470 ops/s
# Warmup Iteration  27: 4374335.961 ops/s
# Warmup Iteration  28: 4347187.983 ops/s
# Warmup Iteration  29: 4370986.562 ops/s
# Warmup Iteration  30: 4344000.465 ops/s
Iteration   1: 4385330.995 ops/s
Iteration   2: 4387489.338 ops/s
Iteration   3: 4313277.527 ops/s
Iteration   4: 4134083.284 ops/s
Iteration   5: 4414242.103 ops/s
Iteration   6: 4377135.490 ops/s
Iteration   7: 4343849.000 ops/s
Iteration   8: 4301685.149 ops/s
Iteration   9: 4184128.887 ops/s
Iteration  10: 4243861.539 ops/s
Iteration  11: 4319601.049 ops/s
Iteration  12: 4411996.867 ops/s
Iteration  13: 4365815.338 ops/s
Iteration  14: 4408179.131 ops/s
Iteration  15: 4263342.006 ops/s
Iteration  16: 4358587.819 ops/s
Iteration  17: 4322462.868 ops/s
Iteration  18: 4349263.507 ops/s
Iteration  19: 4363937.107 ops/s
Iteration  20: 4170053.947 ops/s
Iteration  21: 4359219.295 ops/s
Iteration  22: 4303115.080 ops/s
Iteration  23: 4273557.314 ops/s
Iteration  24: 4289614.920 ops/s
Iteration  25: 4222589.046 ops/s
Iteration  26: 4349114.722 ops/s
Iteration  27: 4335804.611 ops/s
Iteration  28: 4408607.298 ops/s
Iteration  29: 4417751.096 ops/s
Iteration  30: 4413176.954 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_summarizeLong":
  4326362.443 ±(99.9%) 51066.055 ops/s [Average]
  (min, avg, max) = (4134083.284, 4326362.443, 4417751.096), stdev = 76433.273
  CI (99.9%): [4275296.388, 4377428.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4326362.443 ± 51066.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1387871.304 ops/s
# Warmup Iteration   2: 2660761.782 ops/s
# Warmup Iteration   3: 2883112.754 ops/s
# Warmup Iteration   4: 2812067.565 ops/s
# Warmup Iteration   5: 2364856.159 ops/s
# Warmup Iteration   6: 2894801.431 ops/s
# Warmup Iteration   7: 2877423.978 ops/s
# Warmup Iteration   8: 2916829.549 ops/s
# Warmup Iteration   9: 2837070.103 ops/s
# Warmup Iteration  10: 2877795.867 ops/s
# Warmup Iteration  11: 2816658.655 ops/s
# Warmup Iteration  12: 2828809.827 ops/s
# Warmup Iteration  13: 2881756.471 ops/s
# Warmup Iteration  14: 2901816.986 ops/s
# Warmup Iteration  15: 2895739.162 ops/s
# Warmup Iteration  16: 2885012.100 ops/s
# Warmup Iteration  17: 2850940.384 ops/s
# Warmup Iteration  18: 2905005.625 ops/s
# Warmup Iteration  19: 2868692.748 ops/s
# Warmup Iteration  20: 2889597.064 ops/s
# Warmup Iteration  21: 2897646.950 ops/s
# Warmup Iteration  22: 2832732.910 ops/s
# Warmup Iteration  23: 2915492.829 ops/s
# Warmup Iteration  24: 2792859.687 ops/s
# Warmup Iteration  25: 2897644.137 ops/s
# Warmup Iteration  26: 2908853.735 ops/s
# Warmup Iteration  27: 2905130.529 ops/s
# Warmup Iteration  28: 2805738.675 ops/s
# Warmup Iteration  29: 2805573.637 ops/s
# Warmup Iteration  30: 2895263.209 ops/s
Iteration   1: 2800587.832 ops/s
Iteration   2: 2900660.118 ops/s
Iteration   3: 2950903.163 ops/s
Iteration   4: 2942703.505 ops/s
Iteration   5: 2932981.842 ops/s
Iteration   6: 2844548.648 ops/s
Iteration   7: 2852501.968 ops/s
Iteration   8: 2899190.933 ops/s
Iteration   9: 2912677.255 ops/s
Iteration  10: 2867307.691 ops/s
Iteration  11: 2887500.389 ops/s
Iteration  12: 2925370.703 ops/s
Iteration  13: 2914233.137 ops/s
Iteration  14: 2859631.919 ops/s
Iteration  15: 2936589.954 ops/s
Iteration  16: 2790434.121 ops/s
Iteration  17: 2909158.071 ops/s
Iteration  18: 2904619.360 ops/s
Iteration  19: 2933076.510 ops/s
Iteration  20: 2938126.378 ops/s
Iteration  21: 2906411.291 ops/s
Iteration  22: 2895653.661 ops/s
Iteration  23: 2898929.716 ops/s
Iteration  24: 2890205.171 ops/s
Iteration  25: 2878541.126 ops/s
Iteration  26: 2800389.649 ops/s
Iteration  27: 2907697.081 ops/s
Iteration  28: 2894243.452 ops/s
Iteration  29: 2919394.617 ops/s
Iteration  30: 2875285.537 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_tap":
  2892318.493 ±(99.9%) 27859.320 ops/s [Average]
  (min, avg, max) = (2790434.121, 2892318.493, 2950903.163), stdev = 41698.521
  CI (99.9%): [2864459.173, 2920177.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_tap  thrpt   30  2892318.493 ± 27859.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2535745.576 ops/s
# Warmup Iteration   2: 5416178.476 ops/s
# Warmup Iteration   3: 5259426.922 ops/s
# Warmup Iteration   4: 4725339.073 ops/s
# Warmup Iteration   5: 5633687.553 ops/s
# Warmup Iteration   6: 5569321.652 ops/s
# Warmup Iteration   7: 5632660.473 ops/s
# Warmup Iteration   8: 5632718.889 ops/s
# Warmup Iteration   9: 5456321.334 ops/s
# Warmup Iteration  10: 5399685.782 ops/s
# Warmup Iteration  11: 5297763.383 ops/s
# Warmup Iteration  12: 5443548.596 ops/s
# Warmup Iteration  13: 5518438.513 ops/s
# Warmup Iteration  14: 5451135.591 ops/s
# Warmup Iteration  15: 5404688.385 ops/s
# Warmup Iteration  16: 5420006.612 ops/s
# Warmup Iteration  17: 5536027.441 ops/s
# Warmup Iteration  18: 5660050.578 ops/s
# Warmup Iteration  19: 5623291.112 ops/s
# Warmup Iteration  20: 5582042.168 ops/s
# Warmup Iteration  21: 5633551.532 ops/s
# Warmup Iteration  22: 5596950.933 ops/s
# Warmup Iteration  23: 5467230.399 ops/s
# Warmup Iteration  24: 5566386.015 ops/s
# Warmup Iteration  25: 5555812.457 ops/s
# Warmup Iteration  26: 5305507.960 ops/s
# Warmup Iteration  27: 5290224.194 ops/s
# Warmup Iteration  28: 5314410.788 ops/s
# Warmup Iteration  29: 5420756.370 ops/s
# Warmup Iteration  30: 5458161.859 ops/s
Iteration   1: 5470855.786 ops/s
Iteration   2: 5604534.069 ops/s
Iteration   3: 5420852.466 ops/s
Iteration   4: 5603843.766 ops/s
Iteration   5: 5554716.335 ops/s
Iteration   6: 5387742.232 ops/s
Iteration   7: 5295222.403 ops/s
Iteration   8: 5459714.627 ops/s
Iteration   9: 5417345.193 ops/s
Iteration  10: 5511628.999 ops/s
Iteration  11: 5467152.558 ops/s
Iteration  12: 5398671.213 ops/s
Iteration  13: 5337512.697 ops/s
Iteration  14: 5406072.100 ops/s
Iteration  15: 5399890.877 ops/s
Iteration  16: 5420306.165 ops/s
Iteration  17: 5418790.982 ops/s
Iteration  18: 5402280.475 ops/s
Iteration  19: 5475523.791 ops/s
Iteration  20: 5525207.975 ops/s
Iteration  21: 5428963.854 ops/s
Iteration  22: 5495546.944 ops/s
Iteration  23: 5409577.773 ops/s
Iteration  24: 5445985.489 ops/s
Iteration  25: 5437811.121 ops/s
Iteration  26: 5296774.631 ops/s
Iteration  27: 5627058.060 ops/s
Iteration  28: 5661504.342 ops/s
Iteration  29: 5673304.590 ops/s
Iteration  30: 5498203.421 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewCollection":
  5465086.498 ±(99.9%) 64739.214 ops/s [Average]
  (min, avg, max) = (5295222.403, 5465086.498, 5673304.590), stdev = 96898.616
  CI (99.9%): [5400347.284, 5529825.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  5465086.498 ± 64739.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1571839.710 ops/s
# Warmup Iteration   2: 3429018.799 ops/s
# Warmup Iteration   3: 3228681.674 ops/s
# Warmup Iteration   4: 3222764.869 ops/s
# Warmup Iteration   5: 3494329.341 ops/s
# Warmup Iteration   6: 3513031.728 ops/s
# Warmup Iteration   7: 3522651.618 ops/s
# Warmup Iteration   8: 3493276.723 ops/s
# Warmup Iteration   9: 3497969.533 ops/s
# Warmup Iteration  10: 3466011.633 ops/s
# Warmup Iteration  11: 3504174.633 ops/s
# Warmup Iteration  12: 3521105.074 ops/s
# Warmup Iteration  13: 3479387.976 ops/s
# Warmup Iteration  14: 3522763.244 ops/s
# Warmup Iteration  15: 3444937.594 ops/s
# Warmup Iteration  16: 3442971.091 ops/s
# Warmup Iteration  17: 3394060.620 ops/s
# Warmup Iteration  18: 3368999.117 ops/s
# Warmup Iteration  19: 3403181.959 ops/s
# Warmup Iteration  20: 3364632.486 ops/s
# Warmup Iteration  21: 3345412.492 ops/s
# Warmup Iteration  22: 3384871.421 ops/s
# Warmup Iteration  23: 3437736.786 ops/s
# Warmup Iteration  24: 3442535.837 ops/s
# Warmup Iteration  25: 3470303.172 ops/s
# Warmup Iteration  26: 3325068.334 ops/s
# Warmup Iteration  27: 3388149.338 ops/s
# Warmup Iteration  28: 3337124.672 ops/s
# Warmup Iteration  29: 3417674.621 ops/s
# Warmup Iteration  30: 3485521.953 ops/s
Iteration   1: 3432190.741 ops/s
Iteration   2: 3469386.800 ops/s
Iteration   3: 3391762.918 ops/s
Iteration   4: 3378300.261 ops/s
Iteration   5: 3451441.129 ops/s
Iteration   6: 3506930.129 ops/s
Iteration   7: 3543457.081 ops/s
Iteration   8: 3573071.645 ops/s
Iteration   9: 3512783.104 ops/s
Iteration  10: 3510981.050 ops/s
Iteration  11: 3509464.380 ops/s
Iteration  12: 3432587.596 ops/s
Iteration  13: 3513846.530 ops/s
Iteration  14: 3442566.387 ops/s
Iteration  15: 3493295.124 ops/s
Iteration  16: 3447405.648 ops/s
Iteration  17: 3575124.118 ops/s
Iteration  18: 3441785.840 ops/s
Iteration  19: 3470228.772 ops/s
Iteration  20: 3477900.305 ops/s
Iteration  21: 3495534.589 ops/s
Iteration  22: 3542175.021 ops/s
Iteration  23: 3489207.541 ops/s
Iteration  24: 3459377.690 ops/s
Iteration  25: 3483969.820 ops/s
Iteration  26: 3456116.583 ops/s
Iteration  27: 3429741.424 ops/s
Iteration  28: 3499604.111 ops/s
Iteration  29: 3471736.811 ops/s
Iteration  30: 3482910.691 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWith":
  3479496.128 ±(99.9%) 31012.664 ops/s [Average]
  (min, avg, max) = (3378300.261, 3479496.128, 3575124.118), stdev = 46418.299
  CI (99.9%): [3448483.464, 3510508.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testNewWith  thrpt   30  3479496.128 ± 31012.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 837428.434 ops/s
# Warmup Iteration   2: 1898438.761 ops/s
# Warmup Iteration   3: 1931967.434 ops/s
# Warmup Iteration   4: 1700655.730 ops/s
# Warmup Iteration   5: 1856701.974 ops/s
# Warmup Iteration   6: 1958901.007 ops/s
# Warmup Iteration   7: 1900063.412 ops/s
# Warmup Iteration   8: 1883603.256 ops/s
# Warmup Iteration   9: 1969682.156 ops/s
# Warmup Iteration  10: 1952461.601 ops/s
# Warmup Iteration  11: 1934852.375 ops/s
# Warmup Iteration  12: 1907123.592 ops/s
# Warmup Iteration  13: 1904951.993 ops/s
# Warmup Iteration  14: 1862796.358 ops/s
# Warmup Iteration  15: 1828766.110 ops/s
# Warmup Iteration  16: 1890699.225 ops/s
# Warmup Iteration  17: 1865457.342 ops/s
# Warmup Iteration  18: 1953208.151 ops/s
# Warmup Iteration  19: 1962350.873 ops/s
# Warmup Iteration  20: 1947110.042 ops/s
# Warmup Iteration  21: 1880535.445 ops/s
# Warmup Iteration  22: 1861362.126 ops/s
# Warmup Iteration  23: 1872053.756 ops/s
# Warmup Iteration  24: 1838524.220 ops/s
# Warmup Iteration  25: 1902786.987 ops/s
# Warmup Iteration  26: 1855029.313 ops/s
# Warmup Iteration  27: 1904934.850 ops/s
# Warmup Iteration  28: 1848457.549 ops/s
# Warmup Iteration  29: 1945645.809 ops/s
# Warmup Iteration  30: 1922566.202 ops/s
Iteration   1: 1910697.989 ops/s
Iteration   2: 1930495.136 ops/s
Iteration   3: 1907267.951 ops/s
Iteration   4: 1937695.679 ops/s
Iteration   5: 1896876.393 ops/s
Iteration   6: 1943665.419 ops/s
Iteration   7: 1959722.395 ops/s
Iteration   8: 1942245.936 ops/s
Iteration   9: 1948676.644 ops/s
Iteration  10: 1908781.275 ops/s
Iteration  11: 1918236.092 ops/s
Iteration  12: 1943201.754 ops/s
Iteration  13: 1918414.590 ops/s
Iteration  14: 1915453.874 ops/s
Iteration  15: 1933397.675 ops/s
Iteration  16: 1938208.437 ops/s
Iteration  17: 1935436.912 ops/s
Iteration  18: 1967022.045 ops/s
Iteration  19: 1953119.514 ops/s
Iteration  20: 1931485.740 ops/s
Iteration  21: 1908328.323 ops/s
Iteration  22: 1971614.517 ops/s
Iteration  23: 1973286.434 ops/s
Iteration  24: 1975588.198 ops/s
Iteration  25: 1950892.892 ops/s
Iteration  26: 1933581.794 ops/s
Iteration  27: 1846375.743 ops/s
Iteration  28: 1819721.727 ops/s
Iteration  29: 1864007.341 ops/s
Iteration  30: 1933076.042 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithVarArgs":
  1927219.149 ±(99.9%) 23744.532 ops/s [Average]
  (min, avg, max) = (1819721.727, 1927219.149, 1975588.198), stdev = 35539.701
  CI (99.9%): [1903474.616, 1950963.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  1927219.149 ± 23744.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1246163.049 ops/s
# Warmup Iteration   2: 2695425.260 ops/s
# Warmup Iteration   3: 2815422.829 ops/s
# Warmup Iteration   4: 2435145.909 ops/s
# Warmup Iteration   5: 2866226.684 ops/s
# Warmup Iteration   6: 2868231.579 ops/s
# Warmup Iteration   7: 2844197.838 ops/s
# Warmup Iteration   8: 2838204.428 ops/s
# Warmup Iteration   9: 2847009.885 ops/s
# Warmup Iteration  10: 2708415.296 ops/s
# Warmup Iteration  11: 2851173.446 ops/s
# Warmup Iteration  12: 2839046.011 ops/s
# Warmup Iteration  13: 2805952.908 ops/s
# Warmup Iteration  14: 2807133.908 ops/s
# Warmup Iteration  15: 2841454.460 ops/s
# Warmup Iteration  16: 2750968.355 ops/s
# Warmup Iteration  17: 2744932.522 ops/s
# Warmup Iteration  18: 2812402.622 ops/s
# Warmup Iteration  19: 2787803.416 ops/s
# Warmup Iteration  20: 2822761.006 ops/s
# Warmup Iteration  21: 2758181.425 ops/s
# Warmup Iteration  22: 2848567.982 ops/s
# Warmup Iteration  23: 2853794.935 ops/s
# Warmup Iteration  24: 2826440.629 ops/s
# Warmup Iteration  25: 2906911.574 ops/s
# Warmup Iteration  26: 2892312.157 ops/s
# Warmup Iteration  27: 2897109.578 ops/s
# Warmup Iteration  28: 2852943.878 ops/s
# Warmup Iteration  29: 2845525.114 ops/s
# Warmup Iteration  30: 2812569.940 ops/s
Iteration   1: 2845255.958 ops/s
Iteration   2: 2867210.301 ops/s
Iteration   3: 2710226.325 ops/s
Iteration   4: 2653628.730 ops/s
Iteration   5: 2812547.288 ops/s
Iteration   6: 2774013.768 ops/s
Iteration   7: 2819460.705 ops/s
Iteration   8: 2845642.392 ops/s
Iteration   9: 2869512.651 ops/s
Iteration  10: 2839835.400 ops/s
Iteration  11: 2847727.108 ops/s
Iteration  12: 2885463.660 ops/s
Iteration  13: 2844811.369 ops/s
Iteration  14: 2827325.094 ops/s
Iteration  15: 2759736.141 ops/s
Iteration  16: 2856763.361 ops/s
Iteration  17: 2845048.474 ops/s
Iteration  18: 2904342.625 ops/s
Iteration  19: 2902452.237 ops/s
Iteration  20: 2826033.698 ops/s
Iteration  21: 2855863.004 ops/s
Iteration  22: 2859012.221 ops/s
Iteration  23: 2865382.732 ops/s
Iteration  24: 2883245.992 ops/s
Iteration  25: 2823223.688 ops/s
Iteration  26: 2831274.827 ops/s
Iteration  27: 2882660.583 ops/s
Iteration  28: 2870539.980 ops/s
Iteration  29: 2911723.623 ops/s
Iteration  30: 2836285.905 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWith":
  2838541.661 ±(99.9%) 36678.634 ops/s [Average]
  (min, avg, max) = (2653628.730, 2838541.661, 2911723.623), stdev = 54898.857
  CI (99.9%): [2801863.027, 2875220.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWith  thrpt   30  2838541.661 ± 36678.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948383.741 ops/s
# Warmup Iteration   2: 2074570.118 ops/s
# Warmup Iteration   3: 2153350.468 ops/s
# Warmup Iteration   4: 1742556.029 ops/s
# Warmup Iteration   5: 2148339.080 ops/s
# Warmup Iteration   6: 2100983.254 ops/s
# Warmup Iteration   7: 2118549.333 ops/s
# Warmup Iteration   8: 2134695.340 ops/s
# Warmup Iteration   9: 2119015.685 ops/s
# Warmup Iteration  10: 2110599.106 ops/s
# Warmup Iteration  11: 2138707.590 ops/s
# Warmup Iteration  12: 2142072.058 ops/s
# Warmup Iteration  13: 2054309.117 ops/s
# Warmup Iteration  14: 2082860.697 ops/s
# Warmup Iteration  15: 2128404.467 ops/s
# Warmup Iteration  16: 2137779.627 ops/s
# Warmup Iteration  17: 2184788.189 ops/s
# Warmup Iteration  18: 2175465.548 ops/s
# Warmup Iteration  19: 2115893.667 ops/s
# Warmup Iteration  20: 1885810.579 ops/s
# Warmup Iteration  21: 2107420.087 ops/s
# Warmup Iteration  22: 2197464.021 ops/s
# Warmup Iteration  23: 2173086.547 ops/s
# Warmup Iteration  24: 2155640.490 ops/s
# Warmup Iteration  25: 2136920.448 ops/s
# Warmup Iteration  26: 2168758.405 ops/s
# Warmup Iteration  27: 2154860.363 ops/s
# Warmup Iteration  28: 2165586.349 ops/s
# Warmup Iteration  29: 2161118.098 ops/s
# Warmup Iteration  30: 2173771.995 ops/s
Iteration   1: 2067531.827 ops/s
Iteration   2: 2083799.691 ops/s
Iteration   3: 2141752.731 ops/s
Iteration   4: 2136680.157 ops/s
Iteration   5: 2150697.126 ops/s
Iteration   6: 2106875.581 ops/s
Iteration   7: 2137287.426 ops/s
Iteration   8: 2151509.840 ops/s
Iteration   9: 2134928.120 ops/s
Iteration  10: 2157104.134 ops/s
Iteration  11: 2116915.613 ops/s
Iteration  12: 2121758.468 ops/s
Iteration  13: 2136224.362 ops/s
Iteration  14: 2154436.061 ops/s
Iteration  15: 2121793.252 ops/s
Iteration  16: 2158922.281 ops/s
Iteration  17: 2131556.184 ops/s
Iteration  18: 2148459.332 ops/s
Iteration  19: 2153067.902 ops/s
Iteration  20: 2124185.270 ops/s
Iteration  21: 2130128.802 ops/s
Iteration  22: 2168009.636 ops/s
Iteration  23: 2174255.118 ops/s
Iteration  24: 2158505.018 ops/s
Iteration  25: 2126886.937 ops/s
Iteration  26: 2099489.275 ops/s
Iteration  27: 2143448.482 ops/s
Iteration  28: 2144042.808 ops/s
Iteration  29: 2161910.778 ops/s
Iteration  30: 2056573.823 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWithWith":
  2133291.201 ±(99.9%) 18718.860 ops/s [Average]
  (min, avg, max) = (2056573.823, 2133291.201, 2174255.118), stdev = 28017.511
  CI (99.9%): [2114572.341, 2152010.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  2133291.201 ± 18718.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1207479.815 ops/s
# Warmup Iteration   2: 2665689.092 ops/s
# Warmup Iteration   3: 2765429.917 ops/s
# Warmup Iteration   4: 2503370.338 ops/s
# Warmup Iteration   5: 2526246.415 ops/s
# Warmup Iteration   6: 2744104.787 ops/s
# Warmup Iteration   7: 2773142.663 ops/s
# Warmup Iteration   8: 2623123.892 ops/s
# Warmup Iteration   9: 2660465.782 ops/s
# Warmup Iteration  10: 2695597.802 ops/s
# Warmup Iteration  11: 2677369.748 ops/s
# Warmup Iteration  12: 2670177.003 ops/s
# Warmup Iteration  13: 2753750.908 ops/s
# Warmup Iteration  14: 2742934.475 ops/s
# Warmup Iteration  15: 2739200.834 ops/s
# Warmup Iteration  16: 2693366.011 ops/s
# Warmup Iteration  17: 2729353.422 ops/s
# Warmup Iteration  18: 2640834.060 ops/s
# Warmup Iteration  19: 2743538.912 ops/s
# Warmup Iteration  20: 2741036.594 ops/s
# Warmup Iteration  21: 2690591.709 ops/s
# Warmup Iteration  22: 2738193.186 ops/s
# Warmup Iteration  23: 2695877.534 ops/s
# Warmup Iteration  24: 2746610.348 ops/s
# Warmup Iteration  25: 2718111.768 ops/s
# Warmup Iteration  26: 2648738.913 ops/s
# Warmup Iteration  27: 2731476.705 ops/s
# Warmup Iteration  28: 2730895.218 ops/s
# Warmup Iteration  29: 2703989.098 ops/s
# Warmup Iteration  30: 2718941.905 ops/s
Iteration   1: 2782455.967 ops/s
Iteration   2: 2627583.385 ops/s
Iteration   3: 2675256.850 ops/s
Iteration   4: 2757340.073 ops/s
Iteration   5: 2744380.784 ops/s
Iteration   6: 2729435.009 ops/s
Iteration   7: 2739282.307 ops/s
Iteration   8: 2757474.298 ops/s
Iteration   9: 2756533.260 ops/s
Iteration  10: 2717913.626 ops/s
Iteration  11: 2690095.921 ops/s
Iteration  12: 2621357.829 ops/s
Iteration  13: 2653383.698 ops/s
Iteration  14: 2755091.487 ops/s
Iteration  15: 2784922.863 ops/s
Iteration  16: 2785615.051 ops/s
Iteration  17: 2743984.408 ops/s
Iteration  18: 2746110.548 ops/s
Iteration  19: 2785669.756 ops/s
Iteration  20: 2765537.635 ops/s
Iteration  21: 2759946.091 ops/s
Iteration  22: 2756180.261 ops/s
Iteration  23: 2690548.131 ops/s
Iteration  24: 2712192.605 ops/s
Iteration  25: 2730601.215 ops/s
Iteration  26: 2669272.447 ops/s
Iteration  27: 2671925.182 ops/s
Iteration  28: 2611309.899 ops/s
Iteration  29: 2637853.879 ops/s
Iteration  30: 2723592.675 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_testToString":
  2719428.238 ±(99.9%) 34978.572 ops/s [Average]
  (min, avg, max) = (2611309.899, 2719428.238, 2785669.756), stdev = 52354.284
  CI (99.9%): [2684449.666, 2754406.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_testToString  thrpt   30  2719428.238 ± 34978.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1284015.982 ops/s
# Warmup Iteration   2: 2819151.513 ops/s
# Warmup Iteration   3: 3030395.003 ops/s
# Warmup Iteration   4: 2614551.818 ops/s
# Warmup Iteration   5: 2976368.977 ops/s
# Warmup Iteration   6: 2990077.516 ops/s
# Warmup Iteration   7: 3056122.259 ops/s
# Warmup Iteration   8: 2981157.678 ops/s
# Warmup Iteration   9: 2963300.244 ops/s
# Warmup Iteration  10: 3004211.867 ops/s
# Warmup Iteration  11: 2943326.087 ops/s
# Warmup Iteration  12: 3029645.669 ops/s
# Warmup Iteration  13: 3022083.041 ops/s
# Warmup Iteration  14: 3053866.458 ops/s
# Warmup Iteration  15: 3038753.804 ops/s
# Warmup Iteration  16: 3012260.057 ops/s
# Warmup Iteration  17: 3079461.272 ops/s
# Warmup Iteration  18: 3071874.737 ops/s
# Warmup Iteration  19: 2939304.903 ops/s
# Warmup Iteration  20: 2972500.042 ops/s
# Warmup Iteration  21: 3019260.830 ops/s
# Warmup Iteration  22: 2935951.123 ops/s
# Warmup Iteration  23: 3072688.697 ops/s
# Warmup Iteration  24: 3021202.591 ops/s
# Warmup Iteration  25: 2948829.497 ops/s
# Warmup Iteration  26: 3044819.540 ops/s
# Warmup Iteration  27: 3029641.226 ops/s
# Warmup Iteration  28: 3041756.341 ops/s
# Warmup Iteration  29: 2959776.356 ops/s
# Warmup Iteration  30: 3038655.216 ops/s
Iteration   1: 3042656.427 ops/s
Iteration   2: 3019528.094 ops/s
Iteration   3: 2843224.532 ops/s
Iteration   4: 2750791.195 ops/s
Iteration   5: 2927492.786 ops/s
Iteration   6: 2987972.275 ops/s
Iteration   7: 2897797.122 ops/s
Iteration   8: 2913064.996 ops/s
Iteration   9: 3039835.564 ops/s
Iteration  10: 3022514.024 ops/s
Iteration  11: 2997093.915 ops/s
Iteration  12: 3008680.734 ops/s
Iteration  13: 3051436.209 ops/s
Iteration  14: 3064419.377 ops/s
Iteration  15: 3047671.169 ops/s
Iteration  16: 3061754.118 ops/s
Iteration  17: 3084698.088 ops/s
Iteration  18: 2847145.356 ops/s
Iteration  19: 3085518.655 ops/s
Iteration  20: 3075767.920 ops/s
Iteration  21: 3052324.707 ops/s
Iteration  22: 2988144.682 ops/s
Iteration  23: 2989224.522 ops/s
Iteration  24: 2911741.000 ops/s
Iteration  25: 3036800.108 ops/s
Iteration  26: 3068075.939 ops/s
Iteration  27: 3044062.806 ops/s
Iteration  28: 3045988.954 ops/s
Iteration  29: 2995788.056 ops/s
Iteration  30: 2997871.669 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toArray":
  2996636.167 ±(99.9%) 54285.319 ops/s [Average]
  (min, avg, max) = (2750791.195, 2996636.167, 3085518.655), stdev = 81251.716
  CI (99.9%): [2942350.848, 3050921.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toArray  thrpt   30  2996636.167 ± 54285.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751651.326 ops/s
# Warmup Iteration   2: 1394984.141 ops/s
# Warmup Iteration   3: 1572896.725 ops/s
# Warmup Iteration   4: 1589426.089 ops/s
# Warmup Iteration   5: 1613267.896 ops/s
# Warmup Iteration   6: 1317977.531 ops/s
# Warmup Iteration   7: 1601708.394 ops/s
# Warmup Iteration   8: 1614258.930 ops/s
# Warmup Iteration   9: 1627444.218 ops/s
# Warmup Iteration  10: 1599560.206 ops/s
# Warmup Iteration  11: 1608158.345 ops/s
# Warmup Iteration  12: 1615998.221 ops/s
# Warmup Iteration  13: 1604643.902 ops/s
# Warmup Iteration  14: 1599234.694 ops/s
# Warmup Iteration  15: 1594298.310 ops/s
# Warmup Iteration  16: 1610725.869 ops/s
# Warmup Iteration  17: 1615640.376 ops/s
# Warmup Iteration  18: 1601329.937 ops/s
# Warmup Iteration  19: 1612853.334 ops/s
# Warmup Iteration  20: 1600452.642 ops/s
# Warmup Iteration  21: 1608511.711 ops/s
# Warmup Iteration  22: 1599238.614 ops/s
# Warmup Iteration  23: 1578516.924 ops/s
# Warmup Iteration  24: 1609152.355 ops/s
# Warmup Iteration  25: 1608170.603 ops/s
# Warmup Iteration  26: 1620637.103 ops/s
# Warmup Iteration  27: 1608902.291 ops/s
# Warmup Iteration  28: 1596816.854 ops/s
# Warmup Iteration  29: 1604194.119 ops/s
# Warmup Iteration  30: 1578864.420 ops/s
Iteration   1: 1612660.790 ops/s
Iteration   2: 1613522.646 ops/s
Iteration   3: 1603489.295 ops/s
Iteration   4: 1604735.819 ops/s
Iteration   5: 1553259.591 ops/s
Iteration   6: 1554145.292 ops/s
Iteration   7: 1578648.909 ops/s
Iteration   8: 1604769.048 ops/s
Iteration   9: 1602038.893 ops/s
Iteration  10: 1606781.625 ops/s
Iteration  11: 1602185.042 ops/s
Iteration  12: 1576569.344 ops/s
Iteration  13: 1543215.051 ops/s
Iteration  14: 1626224.353 ops/s
Iteration  15: 1604761.204 ops/s
Iteration  16: 1638353.221 ops/s
Iteration  17: 1636701.240 ops/s
Iteration  18: 1636877.903 ops/s
Iteration  19: 1634541.731 ops/s
Iteration  20: 1553821.755 ops/s
Iteration  21: 1544315.085 ops/s
Iteration  22: 1562452.696 ops/s
Iteration  23: 1571857.950 ops/s
Iteration  24: 1596194.230 ops/s
Iteration  25: 1572133.311 ops/s
Iteration  26: 1590896.191 ops/s
Iteration  27: 1544296.162 ops/s
Iteration  28: 1542280.061 ops/s
Iteration  29: 1551060.961 ops/s
Iteration  30: 1564386.906 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBag":
  1587572.544 ±(99.9%) 21064.509 ops/s [Average]
  (min, avg, max) = (1542280.061, 1587572.544, 1638353.221), stdev = 31528.367
  CI (99.9%): [1566508.035, 1608637.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toBag  thrpt   30  1587572.544 ± 21064.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93146.450 ops/s
# Warmup Iteration   2: 125969.922 ops/s
# Warmup Iteration   3: 158305.194 ops/s
# Warmup Iteration   4: 156000.535 ops/s
# Warmup Iteration   5: 149580.236 ops/s
# Warmup Iteration   6: 154534.346 ops/s
# Warmup Iteration   7: 157754.514 ops/s
# Warmup Iteration   8: 140720.240 ops/s
# Warmup Iteration   9: 150711.770 ops/s
# Warmup Iteration  10: 158678.412 ops/s
# Warmup Iteration  11: 157987.743 ops/s
# Warmup Iteration  12: 158833.547 ops/s
# Warmup Iteration  13: 158393.475 ops/s
# Warmup Iteration  14: 154023.081 ops/s
# Warmup Iteration  15: 153148.483 ops/s
# Warmup Iteration  16: 159322.202 ops/s
# Warmup Iteration  17: 163210.512 ops/s
# Warmup Iteration  18: 163765.684 ops/s
# Warmup Iteration  19: 163182.586 ops/s
# Warmup Iteration  20: 163152.198 ops/s
# Warmup Iteration  21: 162198.667 ops/s
# Warmup Iteration  22: 163272.965 ops/s
# Warmup Iteration  23: 162664.922 ops/s
# Warmup Iteration  24: 163356.190 ops/s
# Warmup Iteration  25: 165345.708 ops/s
# Warmup Iteration  26: 164098.034 ops/s
# Warmup Iteration  27: 153511.608 ops/s
# Warmup Iteration  28: 155502.617 ops/s
# Warmup Iteration  29: 154666.187 ops/s
# Warmup Iteration  30: 161477.819 ops/s
Iteration   1: 162412.355 ops/s
Iteration   2: 159146.107 ops/s
Iteration   3: 163543.178 ops/s
Iteration   4: 160767.762 ops/s
Iteration   5: 159543.673 ops/s
Iteration   6: 161167.310 ops/s
Iteration   7: 161793.206 ops/s
Iteration   8: 162867.930 ops/s
Iteration   9: 161805.497 ops/s
Iteration  10: 161551.624 ops/s
Iteration  11: 159902.747 ops/s
Iteration  12: 161574.915 ops/s
Iteration  13: 156559.379 ops/s
Iteration  14: 159196.476 ops/s
Iteration  15: 151578.241 ops/s
Iteration  16: 163220.251 ops/s
Iteration  17: 164648.276 ops/s
Iteration  18: 165322.556 ops/s
Iteration  19: 165424.642 ops/s
Iteration  20: 163477.847 ops/s
Iteration  21: 164410.832 ops/s
Iteration  22: 161116.495 ops/s
Iteration  23: 161579.922 ops/s
Iteration  24: 163543.992 ops/s
Iteration  25: 161411.707 ops/s
Iteration  26: 164735.589 ops/s
Iteration  27: 161218.258 ops/s
Iteration  28: 161154.609 ops/s
Iteration  29: 162740.390 ops/s
Iteration  30: 164018.401 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toBiMap":
  161714.472 ±(99.9%) 1859.192 ops/s [Average]
  (min, avg, max) = (151578.241, 161714.472, 165424.642), stdev = 2782.751
  CI (99.9%): [159855.280, 163573.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toBiMap  thrpt   30  161714.472 ± 1859.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1035264.338 ops/s
# Warmup Iteration   2: 2175346.706 ops/s
# Warmup Iteration   3: 2296527.530 ops/s
# Warmup Iteration   4: 2288284.313 ops/s
# Warmup Iteration   5: 1880294.505 ops/s
# Warmup Iteration   6: 2240335.826 ops/s
# Warmup Iteration   7: 2301484.882 ops/s
# Warmup Iteration   8: 2327972.299 ops/s
# Warmup Iteration   9: 2339705.133 ops/s
# Warmup Iteration  10: 2338253.281 ops/s
# Warmup Iteration  11: 2336735.772 ops/s
# Warmup Iteration  12: 2307970.693 ops/s
# Warmup Iteration  13: 2297136.578 ops/s
# Warmup Iteration  14: 2253313.964 ops/s
# Warmup Iteration  15: 2324299.565 ops/s
# Warmup Iteration  16: 2257301.891 ops/s
# Warmup Iteration  17: 2347392.348 ops/s
# Warmup Iteration  18: 2329993.584 ops/s
# Warmup Iteration  19: 2252799.866 ops/s
# Warmup Iteration  20: 2290489.569 ops/s
# Warmup Iteration  21: 2333715.791 ops/s
# Warmup Iteration  22: 2361969.877 ops/s
# Warmup Iteration  23: 2349933.763 ops/s
# Warmup Iteration  24: 2299594.229 ops/s
# Warmup Iteration  25: 2345200.535 ops/s
# Warmup Iteration  26: 2330698.117 ops/s
# Warmup Iteration  27: 2333428.318 ops/s
# Warmup Iteration  28: 2257815.729 ops/s
# Warmup Iteration  29: 2321341.899 ops/s
# Warmup Iteration  30: 2349600.449 ops/s
Iteration   1: 2349212.912 ops/s
Iteration   2: 2249538.145 ops/s
Iteration   3: 2328864.079 ops/s
Iteration   4: 2350551.815 ops/s
Iteration   5: 2320626.619 ops/s
Iteration   6: 2344168.344 ops/s
Iteration   7: 2243358.176 ops/s
Iteration   8: 2361659.919 ops/s
Iteration   9: 2344625.787 ops/s
Iteration  10: 2354454.625 ops/s
Iteration  11: 2342608.976 ops/s
Iteration  12: 2314707.328 ops/s
Iteration  13: 2314123.891 ops/s
Iteration  14: 2265920.984 ops/s
Iteration  15: 2338454.676 ops/s
Iteration  16: 2330059.751 ops/s
Iteration  17: 2330578.070 ops/s
Iteration  18: 2327971.705 ops/s
Iteration  19: 2320699.045 ops/s
Iteration  20: 2361834.119 ops/s
Iteration  21: 2366690.646 ops/s
Iteration  22: 2370488.637 ops/s
Iteration  23: 2363331.499 ops/s
Iteration  24: 2351557.294 ops/s
Iteration  25: 2357537.779 ops/s
Iteration  26: 2321319.341 ops/s
Iteration  27: 2349765.077 ops/s
Iteration  28: 2365662.392 ops/s
Iteration  29: 2332764.954 ops/s
Iteration  30: 2330640.441 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toCollection":
  2333459.234 ±(99.9%) 21312.531 ops/s [Average]
  (min, avg, max) = (2243358.176, 2333459.234, 2370488.637), stdev = 31899.596
  CI (99.9%): [2312146.703, 2354771.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toCollection  thrpt   30  2333459.234 ± 21312.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5015505.729 ops/s
# Warmup Iteration   2: 12074711.871 ops/s
# Warmup Iteration   3: 10130778.225 ops/s
# Warmup Iteration   4: 12031365.684 ops/s
# Warmup Iteration   5: 12280239.312 ops/s
# Warmup Iteration   6: 12062522.081 ops/s
# Warmup Iteration   7: 12312874.055 ops/s
# Warmup Iteration   8: 12392945.288 ops/s
# Warmup Iteration   9: 12315900.393 ops/s
# Warmup Iteration  10: 12562224.052 ops/s
# Warmup Iteration  11: 12038178.674 ops/s
# Warmup Iteration  12: 12067612.501 ops/s
# Warmup Iteration  13: 12256367.500 ops/s
# Warmup Iteration  14: 12170955.110 ops/s
# Warmup Iteration  15: 12241635.220 ops/s
# Warmup Iteration  16: 12001549.298 ops/s
# Warmup Iteration  17: 12238986.479 ops/s
# Warmup Iteration  18: 12452622.181 ops/s
# Warmup Iteration  19: 12536095.402 ops/s
# Warmup Iteration  20: 12357894.492 ops/s
# Warmup Iteration  21: 12350751.458 ops/s
# Warmup Iteration  22: 12428755.173 ops/s
# Warmup Iteration  23: 12583363.420 ops/s
# Warmup Iteration  24: 12357138.256 ops/s
# Warmup Iteration  25: 12405511.426 ops/s
# Warmup Iteration  26: 12403362.019 ops/s
# Warmup Iteration  27: 12661347.185 ops/s
# Warmup Iteration  28: 12548576.569 ops/s
# Warmup Iteration  29: 12468163.130 ops/s
# Warmup Iteration  30: 12576624.439 ops/s
Iteration   1: 12444727.933 ops/s
Iteration   2: 12617643.149 ops/s
Iteration   3: 12606207.877 ops/s
Iteration   4: 12547724.172 ops/s
Iteration   5: 12430423.860 ops/s
Iteration   6: 12377053.987 ops/s
Iteration   7: 12516912.246 ops/s
Iteration   8: 12198608.704 ops/s
Iteration   9: 12288150.266 ops/s
Iteration  10: 12553880.973 ops/s
Iteration  11: 12606891.647 ops/s
Iteration  12: 12510130.523 ops/s
Iteration  13: 12525391.488 ops/s
Iteration  14: 12618510.132 ops/s
Iteration  15: 12612963.865 ops/s
Iteration  16: 12500011.810 ops/s
Iteration  17: 12612709.883 ops/s
Iteration  18: 12433975.899 ops/s
Iteration  19: 12471227.585 ops/s
Iteration  20: 12503151.396 ops/s
Iteration  21: 12387647.314 ops/s
Iteration  22: 12423862.404 ops/s
Iteration  23: 12340790.678 ops/s
Iteration  24: 12613221.062 ops/s
Iteration  25: 12474913.631 ops/s
Iteration  26: 12262543.311 ops/s
Iteration  27: 12186405.442 ops/s
Iteration  28: 12400033.208 ops/s
Iteration  29: 12507718.632 ops/s
Iteration  30: 12666668.173 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutable":
  12474670.042 ±(99.9%) 85660.952 ops/s [Average]
  (min, avg, max) = (12186405.442, 12474670.042, 12666668.173), stdev = 128213.289
  CI (99.9%): [12389009.090, 12560330.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutable  thrpt   30  12474670.042 ± 85660.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471884.390 ops/s
# Warmup Iteration   2: 993834.481 ops/s
# Warmup Iteration   3: 1061296.707 ops/s
# Warmup Iteration   4: 1076893.500 ops/s
# Warmup Iteration   5: 892657.805 ops/s
# Warmup Iteration   6: 1072036.866 ops/s
# Warmup Iteration   7: 1082983.731 ops/s
# Warmup Iteration   8: 1072839.728 ops/s
# Warmup Iteration   9: 1085752.985 ops/s
# Warmup Iteration  10: 1076684.186 ops/s
# Warmup Iteration  11: 1076644.661 ops/s
# Warmup Iteration  12: 1090634.464 ops/s
# Warmup Iteration  13: 1093212.413 ops/s
# Warmup Iteration  14: 1079359.611 ops/s
# Warmup Iteration  15: 1079948.405 ops/s
# Warmup Iteration  16: 1080199.372 ops/s
# Warmup Iteration  17: 1077607.159 ops/s
# Warmup Iteration  18: 1079299.660 ops/s
# Warmup Iteration  19: 1081785.493 ops/s
# Warmup Iteration  20: 1084869.399 ops/s
# Warmup Iteration  21: 1073195.456 ops/s
# Warmup Iteration  22: 1077877.393 ops/s
# Warmup Iteration  23: 1072292.176 ops/s
# Warmup Iteration  24: 1059336.697 ops/s
# Warmup Iteration  25: 1064508.504 ops/s
# Warmup Iteration  26: 1051106.874 ops/s
# Warmup Iteration  27: 1030783.925 ops/s
# Warmup Iteration  28: 1075758.010 ops/s
# Warmup Iteration  29: 1074152.821 ops/s
# Warmup Iteration  30: 1084527.533 ops/s
Iteration   1: 1076788.418 ops/s
Iteration   2: 1082389.288 ops/s
Iteration   3: 1057944.903 ops/s
Iteration   4: 1079254.201 ops/s
Iteration   5: 1090342.792 ops/s
Iteration   6: 1085186.841 ops/s
Iteration   7: 1082950.427 ops/s
Iteration   8: 1040207.165 ops/s
Iteration   9: 1038724.219 ops/s
Iteration  10: 1055321.431 ops/s
Iteration  11: 1074115.654 ops/s
Iteration  12: 1042413.186 ops/s
Iteration  13: 1039980.656 ops/s
Iteration  14: 1082607.860 ops/s
Iteration  15: 1096047.594 ops/s
Iteration  16: 1096031.299 ops/s
Iteration  17: 1085014.329 ops/s
Iteration  18: 1086274.749 ops/s
Iteration  19: 1085303.460 ops/s
Iteration  20: 1081646.235 ops/s
Iteration  21: 1075737.139 ops/s
Iteration  22: 1080534.624 ops/s
Iteration  23: 1077956.815 ops/s
Iteration  24: 1072646.292 ops/s
Iteration  25: 1083619.766 ops/s
Iteration  26: 1076214.523 ops/s
Iteration  27: 1078343.510 ops/s
Iteration  28: 1078839.501 ops/s
Iteration  29: 1074846.759 ops/s
Iteration  30: 1084048.233 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBag":
  1074711.062 ±(99.9%) 10758.266 ops/s [Average]
  (min, avg, max) = (1038724.219, 1074711.062, 1096047.594), stdev = 16102.467
  CI (99.9%): [1063952.796, 1085469.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1074711.062 ± 10758.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81051.477 ops/s
# Warmup Iteration   2: 114887.263 ops/s
# Warmup Iteration   3: 147734.300 ops/s
# Warmup Iteration   4: 144400.703 ops/s
# Warmup Iteration   5: 143783.399 ops/s
# Warmup Iteration   6: 145423.464 ops/s
# Warmup Iteration   7: 145124.825 ops/s
# Warmup Iteration   8: 122888.935 ops/s
# Warmup Iteration   9: 146017.612 ops/s
# Warmup Iteration  10: 142198.889 ops/s
# Warmup Iteration  11: 140670.412 ops/s
# Warmup Iteration  12: 140110.493 ops/s
# Warmup Iteration  13: 147546.341 ops/s
# Warmup Iteration  14: 146807.125 ops/s
# Warmup Iteration  15: 143686.611 ops/s
# Warmup Iteration  16: 148328.412 ops/s
# Warmup Iteration  17: 150655.186 ops/s
# Warmup Iteration  18: 151834.378 ops/s
# Warmup Iteration  19: 151336.148 ops/s
# Warmup Iteration  20: 151005.034 ops/s
# Warmup Iteration  21: 148313.312 ops/s
# Warmup Iteration  22: 148150.936 ops/s
# Warmup Iteration  23: 149749.506 ops/s
# Warmup Iteration  24: 151566.531 ops/s
# Warmup Iteration  25: 153707.245 ops/s
# Warmup Iteration  26: 152161.744 ops/s
# Warmup Iteration  27: 151432.100 ops/s
# Warmup Iteration  28: 149868.200 ops/s
# Warmup Iteration  29: 153344.711 ops/s
# Warmup Iteration  30: 152132.319 ops/s
Iteration   1: 153170.770 ops/s
Iteration   2: 152194.812 ops/s
Iteration   3: 150192.427 ops/s
Iteration   4: 147023.178 ops/s
Iteration   5: 152238.281 ops/s
Iteration   6: 153783.887 ops/s
Iteration   7: 153946.880 ops/s
Iteration   8: 152139.734 ops/s
Iteration   9: 153294.112 ops/s
Iteration  10: 150794.910 ops/s
Iteration  11: 151919.079 ops/s
Iteration  12: 151356.958 ops/s
Iteration  13: 153404.744 ops/s
Iteration  14: 152749.644 ops/s
Iteration  15: 153310.169 ops/s
Iteration  16: 151786.071 ops/s
Iteration  17: 151953.167 ops/s
Iteration  18: 151929.950 ops/s
Iteration  19: 150523.936 ops/s
Iteration  20: 151582.534 ops/s
Iteration  21: 152628.177 ops/s
Iteration  22: 151584.454 ops/s
Iteration  23: 151539.449 ops/s
Iteration  24: 151380.624 ops/s
Iteration  25: 153164.420 ops/s
Iteration  26: 146458.630 ops/s
Iteration  27: 150020.621 ops/s
Iteration  28: 148891.141 ops/s
Iteration  29: 153157.187 ops/s
Iteration  30: 153347.919 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBiMap":
  151715.595 ±(99.9%) 1204.371 ops/s [Average]
  (min, avg, max) = (146458.630, 151715.595, 153946.880), stdev = 1802.645
  CI (99.9%): [150511.225, 152919.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  151715.595 ± 1204.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580123.203 ops/s
# Warmup Iteration   2: 1268625.866 ops/s
# Warmup Iteration   3: 1327635.628 ops/s
# Warmup Iteration   4: 1346225.734 ops/s
# Warmup Iteration   5: 1152574.368 ops/s
# Warmup Iteration   6: 1381861.990 ops/s
# Warmup Iteration   7: 1373535.225 ops/s
# Warmup Iteration   8: 1391533.187 ops/s
# Warmup Iteration   9: 1362496.115 ops/s
# Warmup Iteration  10: 1390209.704 ops/s
# Warmup Iteration  11: 1377211.859 ops/s
# Warmup Iteration  12: 1374882.868 ops/s
# Warmup Iteration  13: 1386767.230 ops/s
# Warmup Iteration  14: 1380657.863 ops/s
# Warmup Iteration  15: 1346345.719 ops/s
# Warmup Iteration  16: 1366634.474 ops/s
# Warmup Iteration  17: 1349938.955 ops/s
# Warmup Iteration  18: 1371772.231 ops/s
# Warmup Iteration  19: 1378345.837 ops/s
# Warmup Iteration  20: 1385838.475 ops/s
# Warmup Iteration  21: 1393124.259 ops/s
# Warmup Iteration  22: 1359301.150 ops/s
# Warmup Iteration  23: 1385290.928 ops/s
# Warmup Iteration  24: 1400974.801 ops/s
# Warmup Iteration  25: 1376937.969 ops/s
# Warmup Iteration  26: 1378548.009 ops/s
# Warmup Iteration  27: 1341268.599 ops/s
# Warmup Iteration  28: 1383364.393 ops/s
# Warmup Iteration  29: 1379625.870 ops/s
# Warmup Iteration  30: 1365246.603 ops/s
Iteration   1: 1381259.504 ops/s
Iteration   2: 1320691.954 ops/s
Iteration   3: 1315059.299 ops/s
Iteration   4: 1380308.123 ops/s
Iteration   5: 1332856.020 ops/s
Iteration   6: 1380488.751 ops/s
Iteration   7: 1314804.692 ops/s
Iteration   8: 1314501.664 ops/s
Iteration   9: 1382738.497 ops/s
Iteration  10: 1309874.291 ops/s
Iteration  11: 1324735.277 ops/s
Iteration  12: 1362436.519 ops/s
Iteration  13: 1381811.780 ops/s
Iteration  14: 1376588.809 ops/s
Iteration  15: 1384061.592 ops/s
Iteration  16: 1373327.200 ops/s
Iteration  17: 1395127.381 ops/s
Iteration  18: 1335773.184 ops/s
Iteration  19: 1353915.964 ops/s
Iteration  20: 1347353.136 ops/s
Iteration  21: 1341214.158 ops/s
Iteration  22: 1334304.452 ops/s
Iteration  23: 1282216.480 ops/s
Iteration  24: 1331729.436 ops/s
Iteration  25: 1282491.143 ops/s
Iteration  26: 1369755.686 ops/s
Iteration  27: 1390004.438 ops/s
Iteration  28: 1388364.836 ops/s
Iteration  29: 1405607.498 ops/s
Iteration  30: 1396660.903 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableList":
  1353002.089 ±(99.9%) 23252.998 ops/s [Average]
  (min, avg, max) = (1282216.480, 1353002.089, 1405607.498), stdev = 34803.995
  CI (99.9%): [1329749.091, 1376255.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1353002.089 ± 23252.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 533745.708 ops/s
# Warmup Iteration   2: 1269056.416 ops/s
# Warmup Iteration   3: 1247262.547 ops/s
# Warmup Iteration   4: 1050912.011 ops/s
# Warmup Iteration   5: 1278431.589 ops/s
# Warmup Iteration   6: 1283879.358 ops/s
# Warmup Iteration   7: 1258293.871 ops/s
# Warmup Iteration   8: 1242435.489 ops/s
# Warmup Iteration   9: 1283728.235 ops/s
# Warmup Iteration  10: 1238372.438 ops/s
# Warmup Iteration  11: 1264909.218 ops/s
# Warmup Iteration  12: 1299785.316 ops/s
# Warmup Iteration  13: 1310136.533 ops/s
# Warmup Iteration  14: 1292459.935 ops/s
# Warmup Iteration  15: 1278341.676 ops/s
# Warmup Iteration  16: 1301566.481 ops/s
# Warmup Iteration  17: 1269112.832 ops/s
# Warmup Iteration  18: 1303196.243 ops/s
# Warmup Iteration  19: 1269213.470 ops/s
# Warmup Iteration  20: 1297403.422 ops/s
# Warmup Iteration  21: 1308909.472 ops/s
# Warmup Iteration  22: 1302101.563 ops/s
# Warmup Iteration  23: 1307907.908 ops/s
# Warmup Iteration  24: 1300749.579 ops/s
# Warmup Iteration  25: 1302701.729 ops/s
# Warmup Iteration  26: 1292223.553 ops/s
# Warmup Iteration  27: 1304968.550 ops/s
# Warmup Iteration  28: 1303050.658 ops/s
# Warmup Iteration  29: 1314602.975 ops/s
# Warmup Iteration  30: 1325947.152 ops/s
Iteration   1: 1328142.314 ops/s
Iteration   2: 1319312.499 ops/s
Iteration   3: 1268054.435 ops/s
Iteration   4: 1293431.306 ops/s
Iteration   5: 1317620.623 ops/s
Iteration   6: 1312361.235 ops/s
Iteration   7: 1313235.250 ops/s
Iteration   8: 1304937.278 ops/s
Iteration   9: 1304747.348 ops/s
Iteration  10: 1307561.064 ops/s
Iteration  11: 1326274.604 ops/s
Iteration  12: 1325466.935 ops/s
Iteration  13: 1326965.935 ops/s
Iteration  14: 1271861.099 ops/s
Iteration  15: 1318221.377 ops/s
Iteration  16: 1322051.762 ops/s
Iteration  17: 1330731.106 ops/s
Iteration  18: 1320957.481 ops/s
Iteration  19: 1316182.867 ops/s
Iteration  20: 1303995.048 ops/s
Iteration  21: 1291924.506 ops/s
Iteration  22: 1297036.902 ops/s
Iteration  23: 1314552.644 ops/s
Iteration  24: 1295696.648 ops/s
Iteration  25: 1316398.303 ops/s
Iteration  26: 1258238.414 ops/s
Iteration  27: 1311391.424 ops/s
Iteration  28: 1274923.141 ops/s
Iteration  29: 1297587.020 ops/s
Iteration  30: 1259535.575 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableMap":
  1304979.871 ±(99.9%) 13750.499 ops/s [Average]
  (min, avg, max) = (1258238.414, 1304979.871, 1330731.106), stdev = 20581.101
  CI (99.9%): [1291229.373, 1318730.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1304979.871 ± 13750.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 534574.008 ops/s
# Warmup Iteration   2: 1034881.396 ops/s
# Warmup Iteration   3: 1164533.515 ops/s
# Warmup Iteration   4: 1163991.968 ops/s
# Warmup Iteration   5: 964396.669 ops/s
# Warmup Iteration   6: 1168061.270 ops/s
# Warmup Iteration   7: 1161342.640 ops/s
# Warmup Iteration   8: 1179849.470 ops/s
# Warmup Iteration   9: 1137500.979 ops/s
# Warmup Iteration  10: 1166237.021 ops/s
# Warmup Iteration  11: 1165299.133 ops/s
# Warmup Iteration  12: 1176271.833 ops/s
# Warmup Iteration  13: 1181771.342 ops/s
# Warmup Iteration  14: 1179539.428 ops/s
# Warmup Iteration  15: 1152187.709 ops/s
# Warmup Iteration  16: 1189414.837 ops/s
# Warmup Iteration  17: 1180082.628 ops/s
# Warmup Iteration  18: 1164278.809 ops/s
# Warmup Iteration  19: 1178437.436 ops/s
# Warmup Iteration  20: 1145527.877 ops/s
# Warmup Iteration  21: 1171198.055 ops/s
# Warmup Iteration  22: 1189065.030 ops/s
# Warmup Iteration  23: 1170629.126 ops/s
# Warmup Iteration  24: 1168843.214 ops/s
# Warmup Iteration  25: 1171901.402 ops/s
# Warmup Iteration  26: 1152790.178 ops/s
# Warmup Iteration  27: 1142709.178 ops/s
# Warmup Iteration  28: 1168862.798 ops/s
# Warmup Iteration  29: 1163187.500 ops/s
# Warmup Iteration  30: 1151890.195 ops/s
Iteration   1: 1148895.566 ops/s
Iteration   2: 1118480.177 ops/s
Iteration   3: 1156109.663 ops/s
Iteration   4: 1122048.820 ops/s
Iteration   5: 1178099.888 ops/s
Iteration   6: 1184684.117 ops/s
Iteration   7: 1177114.851 ops/s
Iteration   8: 1185929.448 ops/s
Iteration   9: 1178625.479 ops/s
Iteration  10: 1165135.533 ops/s
Iteration  11: 1185489.553 ops/s
Iteration  12: 1157956.241 ops/s
Iteration  13: 1188170.502 ops/s
Iteration  14: 1194701.801 ops/s
Iteration  15: 1174751.672 ops/s
Iteration  16: 1174637.954 ops/s
Iteration  17: 1172941.193 ops/s
Iteration  18: 1166051.019 ops/s
Iteration  19: 1155664.867 ops/s
Iteration  20: 1148562.950 ops/s
Iteration  21: 1176464.072 ops/s
Iteration  22: 1184814.195 ops/s
Iteration  23: 1171186.500 ops/s
Iteration  24: 1181736.876 ops/s
Iteration  25: 1167389.592 ops/s
Iteration  26: 1152406.338 ops/s
Iteration  27: 1169119.378 ops/s
Iteration  28: 1180431.528 ops/s
Iteration  29: 1170163.672 ops/s
Iteration  30: 1175374.997 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSet":
  1168771.282 ±(99.9%) 11863.852 ops/s [Average]
  (min, avg, max) = (1118480.177, 1168771.282, 1194701.801), stdev = 17757.257
  CI (99.9%): [1156907.429, 1180635.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1168771.282 ± 11863.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468695.207 ops/s
# Warmup Iteration   2: 1055114.227 ops/s
# Warmup Iteration   3: 1103363.512 ops/s
# Warmup Iteration   4: 1079838.322 ops/s
# Warmup Iteration   5: 987678.311 ops/s
# Warmup Iteration   6: 1124007.441 ops/s
# Warmup Iteration   7: 1125042.529 ops/s
# Warmup Iteration   8: 1125366.003 ops/s
# Warmup Iteration   9: 1115775.795 ops/s
# Warmup Iteration  10: 1091088.562 ops/s
# Warmup Iteration  11: 1110232.052 ops/s
# Warmup Iteration  12: 1121668.542 ops/s
# Warmup Iteration  13: 1090169.935 ops/s
# Warmup Iteration  14: 1086370.140 ops/s
# Warmup Iteration  15: 1120492.633 ops/s
# Warmup Iteration  16: 1107927.490 ops/s
# Warmup Iteration  17: 1124687.283 ops/s
# Warmup Iteration  18: 1129468.733 ops/s
# Warmup Iteration  19: 1110051.852 ops/s
# Warmup Iteration  20: 1105198.351 ops/s
# Warmup Iteration  21: 1130836.437 ops/s
# Warmup Iteration  22: 1140030.339 ops/s
# Warmup Iteration  23: 1137129.872 ops/s
# Warmup Iteration  24: 1126758.715 ops/s
# Warmup Iteration  25: 1132273.198 ops/s
# Warmup Iteration  26: 1129830.488 ops/s
# Warmup Iteration  27: 1141143.510 ops/s
# Warmup Iteration  28: 1128120.967 ops/s
# Warmup Iteration  29: 1128025.373 ops/s
# Warmup Iteration  30: 1128444.017 ops/s
Iteration   1: 1123132.036 ops/s
Iteration   2: 1127136.285 ops/s
Iteration   3: 1125049.980 ops/s
Iteration   4: 1139311.529 ops/s
Iteration   5: 1132609.903 ops/s
Iteration   6: 1124437.039 ops/s
Iteration   7: 1123639.543 ops/s
Iteration   8: 1134854.968 ops/s
Iteration   9: 1136398.662 ops/s
Iteration  10: 1142997.939 ops/s
Iteration  11: 1146124.712 ops/s
Iteration  12: 1119516.231 ops/s
Iteration  13: 1125075.102 ops/s
Iteration  14: 1112277.276 ops/s
Iteration  15: 1128293.169 ops/s
Iteration  16: 1118437.205 ops/s
Iteration  17: 1132356.986 ops/s
Iteration  18: 1123347.794 ops/s
Iteration  19: 1146980.145 ops/s
Iteration  20: 1144822.430 ops/s
Iteration  21: 1141853.007 ops/s
Iteration  22: 1148232.678 ops/s
Iteration  23: 1141383.882 ops/s
Iteration  24: 1121390.623 ops/s
Iteration  25: 1097662.869 ops/s
Iteration  26: 1096105.622 ops/s
Iteration  27: 1114054.830 ops/s
Iteration  28: 1109122.830 ops/s
Iteration  29: 1143257.359 ops/s
Iteration  30: 1124879.671 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1128158.077 ±(99.9%) 9236.355 ops/s [Average]
  (min, avg, max) = (1096105.622, 1128158.077, 1148232.678), stdev = 13824.543
  CI (99.9%): [1118921.722, 1137394.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1128158.077 ± 9236.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281512.208 ops/s
# Warmup Iteration   2: 616464.311 ops/s
# Warmup Iteration   3: 675823.871 ops/s
# Warmup Iteration   4: 688619.952 ops/s
# Warmup Iteration   5: 568869.568 ops/s
# Warmup Iteration   6: 689327.143 ops/s
# Warmup Iteration   7: 690654.221 ops/s
# Warmup Iteration   8: 679086.925 ops/s
# Warmup Iteration   9: 675460.169 ops/s
# Warmup Iteration  10: 679075.900 ops/s
# Warmup Iteration  11: 680231.576 ops/s
# Warmup Iteration  12: 683487.692 ops/s
# Warmup Iteration  13: 692596.586 ops/s
# Warmup Iteration  14: 683865.944 ops/s
# Warmup Iteration  15: 687269.874 ops/s
# Warmup Iteration  16: 687877.088 ops/s
# Warmup Iteration  17: 690824.839 ops/s
# Warmup Iteration  18: 695969.333 ops/s
# Warmup Iteration  19: 687242.972 ops/s
# Warmup Iteration  20: 681639.441 ops/s
# Warmup Iteration  21: 672266.578 ops/s
# Warmup Iteration  22: 675973.229 ops/s
# Warmup Iteration  23: 677886.692 ops/s
# Warmup Iteration  24: 675627.728 ops/s
# Warmup Iteration  25: 692154.939 ops/s
# Warmup Iteration  26: 692584.008 ops/s
# Warmup Iteration  27: 679538.489 ops/s
# Warmup Iteration  28: 687873.954 ops/s
# Warmup Iteration  29: 665288.294 ops/s
# Warmup Iteration  30: 678156.862 ops/s
Iteration   1: 671273.427 ops/s
Iteration   2: 691970.481 ops/s
Iteration   3: 681803.336 ops/s
Iteration   4: 674862.088 ops/s
Iteration   5: 679964.218 ops/s
Iteration   6: 673917.844 ops/s
Iteration   7: 667749.567 ops/s
Iteration   8: 678225.359 ops/s
Iteration   9: 670231.006 ops/s
Iteration  10: 688819.873 ops/s
Iteration  11: 687792.789 ops/s
Iteration  12: 682683.044 ops/s
Iteration  13: 689188.532 ops/s
Iteration  14: 686657.395 ops/s
Iteration  15: 687514.215 ops/s
Iteration  16: 688191.572 ops/s
Iteration  17: 693376.909 ops/s
Iteration  18: 688340.992 ops/s
Iteration  19: 686642.491 ops/s
Iteration  20: 678087.527 ops/s
Iteration  21: 685042.891 ops/s
Iteration  22: 684304.070 ops/s
Iteration  23: 689098.048 ops/s
Iteration  24: 693088.297 ops/s
Iteration  25: 684647.024 ops/s
Iteration  26: 688914.702 ops/s
Iteration  27: 685191.136 ops/s
Iteration  28: 680427.538 ops/s
Iteration  29: 677651.275 ops/s
Iteration  30: 687422.851 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  683436.017 ±(99.9%) 4578.219 ops/s [Average]
  (min, avg, max) = (667749.567, 683436.017, 693376.909), stdev = 6852.463
  CI (99.9%): [678857.798, 688014.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  683436.017 ± 4578.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 260914.752 ops/s
# Warmup Iteration   2: 465660.309 ops/s
# Warmup Iteration   3: 568366.315 ops/s
# Warmup Iteration   4: 551799.420 ops/s
# Warmup Iteration   5: 541445.648 ops/s
# Warmup Iteration   6: 455660.569 ops/s
# Warmup Iteration   7: 552304.666 ops/s
# Warmup Iteration   8: 548802.197 ops/s
# Warmup Iteration   9: 562587.300 ops/s
# Warmup Iteration  10: 567503.276 ops/s
# Warmup Iteration  11: 566186.315 ops/s
# Warmup Iteration  12: 565024.032 ops/s
# Warmup Iteration  13: 568026.205 ops/s
# Warmup Iteration  14: 566757.518 ops/s
# Warmup Iteration  15: 565478.984 ops/s
# Warmup Iteration  16: 566128.042 ops/s
# Warmup Iteration  17: 569754.129 ops/s
# Warmup Iteration  18: 568907.849 ops/s
# Warmup Iteration  19: 570654.591 ops/s
# Warmup Iteration  20: 568840.318 ops/s
# Warmup Iteration  21: 573502.267 ops/s
# Warmup Iteration  22: 568090.602 ops/s
# Warmup Iteration  23: 574301.040 ops/s
# Warmup Iteration  24: 570229.470 ops/s
# Warmup Iteration  25: 567564.098 ops/s
# Warmup Iteration  26: 569927.775 ops/s
# Warmup Iteration  27: 575674.384 ops/s
# Warmup Iteration  28: 568396.008 ops/s
# Warmup Iteration  29: 560549.454 ops/s
# Warmup Iteration  30: 570909.103 ops/s
Iteration   1: 575882.694 ops/s
Iteration   2: 540897.633 ops/s
Iteration   3: 560626.002 ops/s
Iteration   4: 567075.851 ops/s
Iteration   5: 565249.459 ops/s
Iteration   6: 568711.451 ops/s
Iteration   7: 577264.780 ops/s
Iteration   8: 577891.677 ops/s
Iteration   9: 563026.950 ops/s
Iteration  10: 563934.971 ops/s
Iteration  11: 568544.554 ops/s
Iteration  12: 561853.964 ops/s
Iteration  13: 573607.559 ops/s
Iteration  14: 574933.627 ops/s
Iteration  15: 567830.970 ops/s
Iteration  16: 571147.667 ops/s
Iteration  17: 572584.932 ops/s
Iteration  18: 571764.011 ops/s
Iteration  19: 562535.822 ops/s
Iteration  20: 573340.795 ops/s
Iteration  21: 569128.296 ops/s
Iteration  22: 565595.426 ops/s
Iteration  23: 570164.453 ops/s
Iteration  24: 569458.099 ops/s
Iteration  25: 564523.711 ops/s
Iteration  26: 560871.820 ops/s
Iteration  27: 565122.742 ops/s
Iteration  28: 571860.960 ops/s
Iteration  29: 565653.254 ops/s
Iteration  30: 573291.413 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  567812.518 ±(99.9%) 4705.353 ops/s [Average]
  (min, avg, max) = (540897.633, 567812.518, 577891.677), stdev = 7042.751
  CI (99.9%): [563107.165, 572517.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  567812.518 ± 4705.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 420020.486 ops/s
# Warmup Iteration   2: 819101.391 ops/s
# Warmup Iteration   3: 991538.760 ops/s
# Warmup Iteration   4: 1028028.425 ops/s
# Warmup Iteration   5: 1018211.608 ops/s
# Warmup Iteration   6: 819163.085 ops/s
# Warmup Iteration   7: 980533.463 ops/s
# Warmup Iteration   8: 1020861.134 ops/s
# Warmup Iteration   9: 979460.376 ops/s
# Warmup Iteration  10: 984961.561 ops/s
# Warmup Iteration  11: 996555.204 ops/s
# Warmup Iteration  12: 987430.526 ops/s
# Warmup Iteration  13: 1023828.181 ops/s
# Warmup Iteration  14: 1017465.273 ops/s
# Warmup Iteration  15: 1036912.432 ops/s
# Warmup Iteration  16: 1030233.033 ops/s
# Warmup Iteration  17: 1019319.283 ops/s
# Warmup Iteration  18: 1020869.721 ops/s
# Warmup Iteration  19: 1042590.838 ops/s
# Warmup Iteration  20: 1041019.923 ops/s
# Warmup Iteration  21: 1016422.663 ops/s
# Warmup Iteration  22: 1021121.627 ops/s
# Warmup Iteration  23: 1018035.655 ops/s
# Warmup Iteration  24: 1027023.970 ops/s
# Warmup Iteration  25: 1026532.915 ops/s
# Warmup Iteration  26: 1029535.993 ops/s
# Warmup Iteration  27: 1031454.613 ops/s
# Warmup Iteration  28: 1030194.308 ops/s
# Warmup Iteration  29: 1026786.904 ops/s
# Warmup Iteration  30: 1020492.899 ops/s
Iteration   1: 1031725.124 ops/s
Iteration   2: 1026110.515 ops/s
Iteration   3: 1020968.993 ops/s
Iteration   4: 1031024.413 ops/s
Iteration   5: 1023196.819 ops/s
Iteration   6: 1027519.358 ops/s
Iteration   7: 1042130.893 ops/s
Iteration   8: 994773.740 ops/s
Iteration   9: 985923.725 ops/s
Iteration  10: 1011199.617 ops/s
Iteration  11: 1043650.960 ops/s
Iteration  12: 1046318.184 ops/s
Iteration  13: 1048835.340 ops/s
Iteration  14: 1025093.391 ops/s
Iteration  15: 1039138.544 ops/s
Iteration  16: 1021398.934 ops/s
Iteration  17: 1025204.703 ops/s
Iteration  18: 1047857.396 ops/s
Iteration  19: 1043128.559 ops/s
Iteration  20: 1043167.948 ops/s
Iteration  21: 1037454.418 ops/s
Iteration  22: 1031408.565 ops/s
Iteration  23: 1032050.878 ops/s
Iteration  24: 1028856.370 ops/s
Iteration  25: 1009485.009 ops/s
Iteration  26: 1032741.005 ops/s
Iteration  27: 1027024.596 ops/s
Iteration  28: 1031109.244 ops/s
Iteration  29: 1024518.652 ops/s
Iteration  30: 1040577.432 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1029119.778 ±(99.9%) 9716.934 ops/s [Average]
  (min, avg, max) = (985923.725, 1029119.778, 1048835.340), stdev = 14543.851
  CI (99.9%): [1019402.843, 1038836.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1029119.778 ± 9716.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1179948.815 ops/s
# Warmup Iteration   2: 3136783.189 ops/s
# Warmup Iteration   3: 3143524.280 ops/s
# Warmup Iteration   4: 2488735.062 ops/s
# Warmup Iteration   5: 3210139.307 ops/s
# Warmup Iteration   6: 3083464.833 ops/s
# Warmup Iteration   7: 3143318.008 ops/s
# Warmup Iteration   8: 3174909.425 ops/s
# Warmup Iteration   9: 3115275.585 ops/s
# Warmup Iteration  10: 3159431.636 ops/s
# Warmup Iteration  11: 3214939.742 ops/s
# Warmup Iteration  12: 3181630.445 ops/s
# Warmup Iteration  13: 3146588.810 ops/s
# Warmup Iteration  14: 3152016.160 ops/s
# Warmup Iteration  15: 3088456.031 ops/s
# Warmup Iteration  16: 3155227.945 ops/s
# Warmup Iteration  17: 3107561.921 ops/s
# Warmup Iteration  18: 3178778.919 ops/s
# Warmup Iteration  19: 3206965.447 ops/s
# Warmup Iteration  20: 3189222.196 ops/s
# Warmup Iteration  21: 3154043.640 ops/s
# Warmup Iteration  22: 3171486.750 ops/s
# Warmup Iteration  23: 3149453.406 ops/s
# Warmup Iteration  24: 3170075.506 ops/s
# Warmup Iteration  25: 3135926.289 ops/s
# Warmup Iteration  26: 3072896.434 ops/s
# Warmup Iteration  27: 3132813.815 ops/s
# Warmup Iteration  28: 3164538.894 ops/s
# Warmup Iteration  29: 3179608.006 ops/s
# Warmup Iteration  30: 3170255.387 ops/s
Iteration   1: 3150521.537 ops/s
Iteration   2: 3150902.979 ops/s
Iteration   3: 3156370.691 ops/s
Iteration   4: 3195293.323 ops/s
Iteration   5: 3211598.215 ops/s
Iteration   6: 3218878.957 ops/s
Iteration   7: 3177445.300 ops/s
Iteration   8: 3197936.778 ops/s
Iteration   9: 3159307.174 ops/s
Iteration  10: 3150738.559 ops/s
Iteration  11: 3223098.199 ops/s
Iteration  12: 3201104.241 ops/s
Iteration  13: 3159967.579 ops/s
Iteration  14: 3083340.495 ops/s
Iteration  15: 3067800.106 ops/s
Iteration  16: 3096313.256 ops/s
Iteration  17: 3035403.161 ops/s
Iteration  18: 3118261.436 ops/s
Iteration  19: 3154800.056 ops/s
Iteration  20: 3096841.975 ops/s
Iteration  21: 3031188.853 ops/s
Iteration  22: 3078426.735 ops/s
Iteration  23: 3072333.971 ops/s
Iteration  24: 3137066.104 ops/s
Iteration  25: 3126444.213 ops/s
Iteration  26: 3119252.342 ops/s
Iteration  27: 3181838.530 ops/s
Iteration  28: 3179227.840 ops/s
Iteration  29: 3153720.222 ops/s
Iteration  30: 3199172.009 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  3142819.828 ±(99.9%) 35653.897 ops/s [Average]
  (min, avg, max) = (3031188.853, 3142819.828, 3223098.199), stdev = 53365.079
  CI (99.9%): [3107165.931, 3178473.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  3142819.828 ± 35653.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642971.199 ops/s
# Warmup Iteration   2: 1297328.071 ops/s
# Warmup Iteration   3: 1403098.007 ops/s
# Warmup Iteration   4: 1435272.381 ops/s
# Warmup Iteration   5: 1186028.625 ops/s
# Warmup Iteration   6: 1422556.411 ops/s
# Warmup Iteration   7: 1376040.762 ops/s
# Warmup Iteration   8: 1369302.859 ops/s
# Warmup Iteration   9: 1393356.303 ops/s
# Warmup Iteration  10: 1390457.118 ops/s
# Warmup Iteration  11: 1413027.771 ops/s
# Warmup Iteration  12: 1384247.856 ops/s
# Warmup Iteration  13: 1427267.840 ops/s
# Warmup Iteration  14: 1406756.844 ops/s
# Warmup Iteration  15: 1419156.828 ops/s
# Warmup Iteration  16: 1346120.279 ops/s
# Warmup Iteration  17: 1379440.654 ops/s
# Warmup Iteration  18: 1342541.349 ops/s
# Warmup Iteration  19: 1395497.771 ops/s
# Warmup Iteration  20: 1381031.302 ops/s
# Warmup Iteration  21: 1414135.692 ops/s
# Warmup Iteration  22: 1425623.260 ops/s
# Warmup Iteration  23: 1375341.001 ops/s
# Warmup Iteration  24: 1437164.259 ops/s
# Warmup Iteration  25: 1441685.915 ops/s
# Warmup Iteration  26: 1434267.428 ops/s
# Warmup Iteration  27: 1421396.593 ops/s
# Warmup Iteration  28: 1439518.428 ops/s
# Warmup Iteration  29: 1422310.766 ops/s
# Warmup Iteration  30: 1431398.688 ops/s
Iteration   1: 1392611.019 ops/s
Iteration   2: 1430877.600 ops/s
Iteration   3: 1400695.423 ops/s
Iteration   4: 1425518.946 ops/s
Iteration   5: 1426609.512 ops/s
Iteration   6: 1425679.070 ops/s
Iteration   7: 1439830.360 ops/s
Iteration   8: 1448258.202 ops/s
Iteration   9: 1437525.169 ops/s
Iteration  10: 1431936.187 ops/s
Iteration  11: 1442478.042 ops/s
Iteration  12: 1428976.787 ops/s
Iteration  13: 1433641.194 ops/s
Iteration  14: 1432398.832 ops/s
Iteration  15: 1367485.778 ops/s
Iteration  16: 1423593.628 ops/s
Iteration  17: 1353775.753 ops/s
Iteration  18: 1401646.116 ops/s
Iteration  19: 1378940.466 ops/s
Iteration  20: 1389094.277 ops/s
Iteration  21: 1403870.164 ops/s
Iteration  22: 1412608.027 ops/s
Iteration  23: 1375372.801 ops/s
Iteration  24: 1393103.539 ops/s
Iteration  25: 1372114.762 ops/s
Iteration  26: 1338329.315 ops/s
Iteration  27: 1414980.327 ops/s
Iteration  28: 1441932.674 ops/s
Iteration  29: 1427376.265 ops/s
Iteration  30: 1386922.085 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1409272.744 ±(99.9%) 19317.707 ops/s [Average]
  (min, avg, max) = (1338329.315, 1409272.744, 1448258.202), stdev = 28913.836
  CI (99.9%): [1389955.037, 1428590.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1409272.744 ± 19317.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1512861.308 ops/s
# Warmup Iteration   2: 3178876.328 ops/s
# Warmup Iteration   3: 3427328.401 ops/s
# Warmup Iteration   4: 3341548.831 ops/s
# Warmup Iteration   5: 2767188.472 ops/s
# Warmup Iteration   6: 3346120.378 ops/s
# Warmup Iteration   7: 3479913.673 ops/s
# Warmup Iteration   8: 3405270.336 ops/s
# Warmup Iteration   9: 3320557.573 ops/s
# Warmup Iteration  10: 3438450.873 ops/s
# Warmup Iteration  11: 3395172.389 ops/s
# Warmup Iteration  12: 3360790.817 ops/s
# Warmup Iteration  13: 3287574.096 ops/s
# Warmup Iteration  14: 3440107.394 ops/s
# Warmup Iteration  15: 3337823.573 ops/s
# Warmup Iteration  16: 3283530.166 ops/s
# Warmup Iteration  17: 3351030.634 ops/s
# Warmup Iteration  18: 3422256.529 ops/s
# Warmup Iteration  19: 3338638.988 ops/s
# Warmup Iteration  20: 3396619.073 ops/s
# Warmup Iteration  21: 3394491.054 ops/s
# Warmup Iteration  22: 3322359.113 ops/s
# Warmup Iteration  23: 3402948.993 ops/s
# Warmup Iteration  24: 3427319.889 ops/s
# Warmup Iteration  25: 3440251.052 ops/s
# Warmup Iteration  26: 3442971.023 ops/s
# Warmup Iteration  27: 3433494.095 ops/s
# Warmup Iteration  28: 3393157.822 ops/s
# Warmup Iteration  29: 3321953.691 ops/s
# Warmup Iteration  30: 3378718.424 ops/s
Iteration   1: 3336807.157 ops/s
Iteration   2: 3474995.763 ops/s
Iteration   3: 3488555.559 ops/s
Iteration   4: 3493989.459 ops/s
Iteration   5: 3454365.022 ops/s
Iteration   6: 3451755.762 ops/s
Iteration   7: 3460289.981 ops/s
Iteration   8: 3421280.324 ops/s
Iteration   9: 3396508.759 ops/s
Iteration  10: 3390695.541 ops/s
Iteration  11: 3380223.049 ops/s
Iteration  12: 3365880.056 ops/s
Iteration  13: 3395601.722 ops/s
Iteration  14: 3475930.530 ops/s
Iteration  15: 3483997.952 ops/s
Iteration  16: 3477994.491 ops/s
Iteration  17: 3452124.003 ops/s
Iteration  18: 3444476.185 ops/s
Iteration  19: 3409710.674 ops/s
Iteration  20: 3360948.190 ops/s
Iteration  21: 3301542.410 ops/s
Iteration  22: 3333658.888 ops/s
Iteration  23: 3307094.877 ops/s
Iteration  24: 3348868.588 ops/s
Iteration  25: 3401796.854 ops/s
Iteration  26: 3427394.704 ops/s
Iteration  27: 3414479.430 ops/s
Iteration  28: 3398532.389 ops/s
Iteration  29: 3375240.064 ops/s
Iteration  30: 3431767.180 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3411883.519 ±(99.9%) 36509.783 ops/s [Average]
  (min, avg, max) = (3301542.410, 3411883.519, 3493989.459), stdev = 54646.129
  CI (99.9%): [3375373.736, 3448393.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3411883.519 ± 36509.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506311.550 ops/s
# Warmup Iteration   2: 1095137.711 ops/s
# Warmup Iteration   3: 1193323.169 ops/s
# Warmup Iteration   4: 1196534.052 ops/s
# Warmup Iteration   5: 1005500.755 ops/s
# Warmup Iteration   6: 1197964.986 ops/s
# Warmup Iteration   7: 1192715.909 ops/s
# Warmup Iteration   8: 1197714.099 ops/s
# Warmup Iteration   9: 1189944.493 ops/s
# Warmup Iteration  10: 1156902.125 ops/s
# Warmup Iteration  11: 1168247.102 ops/s
# Warmup Iteration  12: 1146814.365 ops/s
# Warmup Iteration  13: 1187554.134 ops/s
# Warmup Iteration  14: 1151558.754 ops/s
# Warmup Iteration  15: 1175286.795 ops/s
# Warmup Iteration  16: 1201811.076 ops/s
# Warmup Iteration  17: 1204001.882 ops/s
# Warmup Iteration  18: 1172110.484 ops/s
# Warmup Iteration  19: 1186162.337 ops/s
# Warmup Iteration  20: 1179085.926 ops/s
# Warmup Iteration  21: 1188439.905 ops/s
# Warmup Iteration  22: 1191774.826 ops/s
# Warmup Iteration  23: 1214783.652 ops/s
# Warmup Iteration  24: 1181254.973 ops/s
# Warmup Iteration  25: 1204728.325 ops/s
# Warmup Iteration  26: 1208370.685 ops/s
# Warmup Iteration  27: 1207999.851 ops/s
# Warmup Iteration  28: 1197516.189 ops/s
# Warmup Iteration  29: 1197804.167 ops/s
# Warmup Iteration  30: 1146440.412 ops/s
Iteration   1: 1209482.411 ops/s
Iteration   2: 1206183.249 ops/s
Iteration   3: 1190492.501 ops/s
Iteration   4: 1175483.819 ops/s
Iteration   5: 1176924.695 ops/s
Iteration   6: 1213321.659 ops/s
Iteration   7: 1188806.532 ops/s
Iteration   8: 1204219.349 ops/s
Iteration   9: 1205617.439 ops/s
Iteration  10: 1213892.962 ops/s
Iteration  11: 1208489.095 ops/s
Iteration  12: 1205733.476 ops/s
Iteration  13: 1183934.484 ops/s
Iteration  14: 1197967.392 ops/s
Iteration  15: 1200459.227 ops/s
Iteration  16: 1148192.084 ops/s
Iteration  17: 1163728.192 ops/s
Iteration  18: 1209675.795 ops/s
Iteration  19: 1205679.479 ops/s
Iteration  20: 1186476.283 ops/s
Iteration  21: 1201878.121 ops/s
Iteration  22: 1127078.304 ops/s
Iteration  23: 1158622.401 ops/s
Iteration  24: 1170903.746 ops/s
Iteration  25: 1204686.976 ops/s
Iteration  26: 1209897.024 ops/s
Iteration  27: 1196099.136 ops/s
Iteration  28: 1142965.909 ops/s
Iteration  29: 1153234.453 ops/s
Iteration  30: 1121251.276 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1186045.916 ±(99.9%) 17714.768 ops/s [Average]
  (min, avg, max) = (1121251.276, 1186045.916, 1213892.962), stdev = 26514.633
  CI (99.9%): [1168331.148, 1203760.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1186045.916 ± 17714.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566293.586 ops/s
# Warmup Iteration   2: 1138809.292 ops/s
# Warmup Iteration   3: 1272804.313 ops/s
# Warmup Iteration   4: 1293177.183 ops/s
# Warmup Iteration   5: 1136083.872 ops/s
# Warmup Iteration   6: 1214309.023 ops/s
# Warmup Iteration   7: 1308740.714 ops/s
# Warmup Iteration   8: 1321463.811 ops/s
# Warmup Iteration   9: 1317790.620 ops/s
# Warmup Iteration  10: 1313660.923 ops/s
# Warmup Iteration  11: 1302146.711 ops/s
# Warmup Iteration  12: 1307790.723 ops/s
# Warmup Iteration  13: 1304836.010 ops/s
# Warmup Iteration  14: 1314900.988 ops/s
# Warmup Iteration  15: 1291213.101 ops/s
# Warmup Iteration  16: 1299727.441 ops/s
# Warmup Iteration  17: 1276831.399 ops/s
# Warmup Iteration  18: 1293382.523 ops/s
# Warmup Iteration  19: 1242342.606 ops/s
# Warmup Iteration  20: 1308106.429 ops/s
# Warmup Iteration  21: 1302716.874 ops/s
# Warmup Iteration  22: 1302195.822 ops/s
# Warmup Iteration  23: 1257509.819 ops/s
# Warmup Iteration  24: 1310911.677 ops/s
# Warmup Iteration  25: 1292143.977 ops/s
# Warmup Iteration  26: 1268022.905 ops/s
# Warmup Iteration  27: 1299921.802 ops/s
# Warmup Iteration  28: 1314248.304 ops/s
# Warmup Iteration  29: 1278882.334 ops/s
# Warmup Iteration  30: 1297211.879 ops/s
Iteration   1: 1321883.967 ops/s
Iteration   2: 1328989.056 ops/s
Iteration   3: 1311579.500 ops/s
Iteration   4: 1300133.485 ops/s
Iteration   5: 1314989.171 ops/s
Iteration   6: 1322225.316 ops/s
Iteration   7: 1313835.033 ops/s
Iteration   8: 1304190.068 ops/s
Iteration   9: 1310063.177 ops/s
Iteration  10: 1304832.930 ops/s
Iteration  11: 1307823.014 ops/s
Iteration  12: 1289802.817 ops/s
Iteration  13: 1303668.891 ops/s
Iteration  14: 1320197.028 ops/s
Iteration  15: 1304718.776 ops/s
Iteration  16: 1307606.928 ops/s
Iteration  17: 1300857.859 ops/s
Iteration  18: 1325885.968 ops/s
Iteration  19: 1324292.534 ops/s
Iteration  20: 1315840.576 ops/s
Iteration  21: 1302138.448 ops/s
Iteration  22: 1323945.207 ops/s
Iteration  23: 1309567.267 ops/s
Iteration  24: 1294386.548 ops/s
Iteration  25: 1313779.374 ops/s
Iteration  26: 1275155.673 ops/s
Iteration  27: 1283884.677 ops/s
Iteration  28: 1295372.446 ops/s
Iteration  29: 1270100.279 ops/s
Iteration  30: 1310423.475 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1307072.316 ±(99.9%) 9590.430 ops/s [Average]
  (min, avg, max) = (1270100.279, 1307072.316, 1328989.056), stdev = 14354.505
  CI (99.9%): [1297481.887, 1316662.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1307072.316 ± 9590.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 903568.623 ops/s
# Warmup Iteration   2: 2183737.980 ops/s
# Warmup Iteration   3: 2240380.417 ops/s
# Warmup Iteration   4: 1853189.446 ops/s
# Warmup Iteration   5: 2255694.944 ops/s
# Warmup Iteration   6: 2241334.638 ops/s
# Warmup Iteration   7: 2251842.385 ops/s
# Warmup Iteration   8: 2204606.283 ops/s
# Warmup Iteration   9: 2219637.822 ops/s
# Warmup Iteration  10: 2229680.422 ops/s
# Warmup Iteration  11: 2247153.415 ops/s
# Warmup Iteration  12: 2262807.507 ops/s
# Warmup Iteration  13: 2238073.764 ops/s
# Warmup Iteration  14: 2240640.149 ops/s
# Warmup Iteration  15: 2231772.464 ops/s
# Warmup Iteration  16: 2251057.620 ops/s
# Warmup Iteration  17: 2256484.889 ops/s
# Warmup Iteration  18: 2251230.264 ops/s
# Warmup Iteration  19: 2256037.982 ops/s
# Warmup Iteration  20: 2259732.962 ops/s
# Warmup Iteration  21: 2255441.842 ops/s
# Warmup Iteration  22: 2270835.885 ops/s
# Warmup Iteration  23: 2246577.783 ops/s
# Warmup Iteration  24: 2245122.783 ops/s
# Warmup Iteration  25: 2284679.559 ops/s
# Warmup Iteration  26: 2264555.022 ops/s
# Warmup Iteration  27: 2237177.683 ops/s
# Warmup Iteration  28: 2260007.255 ops/s
# Warmup Iteration  29: 2231385.482 ops/s
# Warmup Iteration  30: 2206034.826 ops/s
Iteration   1: 2262644.312 ops/s
Iteration   2: 2222997.327 ops/s
Iteration   3: 2267486.804 ops/s
Iteration   4: 2274235.317 ops/s
Iteration   5: 2226396.975 ops/s
Iteration   6: 2249097.880 ops/s
Iteration   7: 2252108.777 ops/s
Iteration   8: 2154357.287 ops/s
Iteration   9: 2238314.862 ops/s
Iteration  10: 2220163.839 ops/s
Iteration  11: 2242008.214 ops/s
Iteration  12: 2220336.166 ops/s
Iteration  13: 2247882.987 ops/s
Iteration  14: 2242240.721 ops/s
Iteration  15: 2242510.672 ops/s
Iteration  16: 2164927.879 ops/s
Iteration  17: 2173522.009 ops/s
Iteration  18: 2125948.014 ops/s
Iteration  19: 2242817.595 ops/s
Iteration  20: 2245707.868 ops/s
Iteration  21: 2252757.120 ops/s
Iteration  22: 2242304.570 ops/s
Iteration  23: 2263173.679 ops/s
Iteration  24: 2254916.499 ops/s
Iteration  25: 2272117.579 ops/s
Iteration  26: 2242789.464 ops/s
Iteration  27: 2257092.694 ops/s
Iteration  28: 2241148.992 ops/s
Iteration  29: 2227553.636 ops/s
Iteration  30: 2259759.272 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toList":
  2234310.634 ±(99.9%) 23630.217 ops/s [Average]
  (min, avg, max) = (2125948.014, 2234310.634, 2274235.317), stdev = 35368.600
  CI (99.9%): [2210680.416, 2257940.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toList  thrpt   30  2234310.634 ± 23630.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 925904.658 ops/s
# Warmup Iteration   2: 2082265.772 ops/s
# Warmup Iteration   3: 2103744.290 ops/s
# Warmup Iteration   4: 1721295.498 ops/s
# Warmup Iteration   5: 2144352.301 ops/s
# Warmup Iteration   6: 2132583.311 ops/s
# Warmup Iteration   7: 2129101.921 ops/s
# Warmup Iteration   8: 2170408.705 ops/s
# Warmup Iteration   9: 2170303.934 ops/s
# Warmup Iteration  10: 2165638.288 ops/s
# Warmup Iteration  11: 2123777.478 ops/s
# Warmup Iteration  12: 2121575.003 ops/s
# Warmup Iteration  13: 2112217.215 ops/s
# Warmup Iteration  14: 2080770.927 ops/s
# Warmup Iteration  15: 2096940.848 ops/s
# Warmup Iteration  16: 2149009.095 ops/s
# Warmup Iteration  17: 2155084.965 ops/s
# Warmup Iteration  18: 2142537.626 ops/s
# Warmup Iteration  19: 2137575.960 ops/s
# Warmup Iteration  20: 2167652.481 ops/s
# Warmup Iteration  21: 2166002.656 ops/s
# Warmup Iteration  22: 2153579.215 ops/s
# Warmup Iteration  23: 2108793.908 ops/s
# Warmup Iteration  24: 2078266.353 ops/s
# Warmup Iteration  25: 2123887.588 ops/s
# Warmup Iteration  26: 2168480.828 ops/s
# Warmup Iteration  27: 2169831.561 ops/s
# Warmup Iteration  28: 2113528.647 ops/s
# Warmup Iteration  29: 2143095.940 ops/s
# Warmup Iteration  30: 2172226.754 ops/s
Iteration   1: 2170671.515 ops/s
Iteration   2: 2167480.695 ops/s
Iteration   3: 2177850.589 ops/s
Iteration   4: 2168074.747 ops/s
Iteration   5: 2138163.451 ops/s
Iteration   6: 2165646.378 ops/s
Iteration   7: 2124636.465 ops/s
Iteration   8: 2165664.543 ops/s
Iteration   9: 2152916.913 ops/s
Iteration  10: 2137964.160 ops/s
Iteration  11: 2162099.157 ops/s
Iteration  12: 2168723.568 ops/s
Iteration  13: 2112658.705 ops/s
Iteration  14: 2140306.958 ops/s
Iteration  15: 2166259.538 ops/s
Iteration  16: 2180300.904 ops/s
Iteration  17: 2152657.717 ops/s
Iteration  18: 2164129.168 ops/s
Iteration  19: 2162577.651 ops/s
Iteration  20: 2154732.804 ops/s
Iteration  21: 2185970.654 ops/s
Iteration  22: 2184384.542 ops/s
Iteration  23: 2158879.978 ops/s
Iteration  24: 2180327.251 ops/s
Iteration  25: 2177640.894 ops/s
Iteration  26: 2168953.917 ops/s
Iteration  27: 2137816.214 ops/s
Iteration  28: 2147287.101 ops/s
Iteration  29: 2150084.364 ops/s
Iteration  30: 2099927.440 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMap":
  2157492.933 ±(99.9%) 13812.062 ops/s [Average]
  (min, avg, max) = (2099927.440, 2157492.933, 2185970.654), stdev = 20673.246
  CI (99.9%): [2143680.871, 2171304.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toMap  thrpt   30  2157492.933 ± 13812.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1316141.319 ops/s
# Warmup Iteration   2: 2675090.014 ops/s
# Warmup Iteration   3: 2903992.023 ops/s
# Warmup Iteration   4: 2935600.795 ops/s
# Warmup Iteration   5: 2404113.613 ops/s
# Warmup Iteration   6: 2871824.935 ops/s
# Warmup Iteration   7: 2940804.860 ops/s
# Warmup Iteration   8: 2939348.249 ops/s
# Warmup Iteration   9: 2937864.713 ops/s
# Warmup Iteration  10: 2926038.752 ops/s
# Warmup Iteration  11: 2910165.142 ops/s
# Warmup Iteration  12: 2936493.581 ops/s
# Warmup Iteration  13: 2801516.456 ops/s
# Warmup Iteration  14: 2859702.325 ops/s
# Warmup Iteration  15: 2814675.320 ops/s
# Warmup Iteration  16: 2839238.931 ops/s
# Warmup Iteration  17: 2922489.812 ops/s
# Warmup Iteration  18: 2946249.332 ops/s
# Warmup Iteration  19: 2938762.168 ops/s
# Warmup Iteration  20: 2898469.909 ops/s
# Warmup Iteration  21: 2887654.331 ops/s
# Warmup Iteration  22: 2943687.101 ops/s
# Warmup Iteration  23: 2880883.803 ops/s
# Warmup Iteration  24: 2875315.931 ops/s
# Warmup Iteration  25: 2920414.461 ops/s
# Warmup Iteration  26: 2942786.291 ops/s
# Warmup Iteration  27: 2980149.260 ops/s
# Warmup Iteration  28: 2944392.262 ops/s
# Warmup Iteration  29: 2935920.061 ops/s
# Warmup Iteration  30: 2951771.073 ops/s
Iteration   1: 2935792.184 ops/s
Iteration   2: 2923539.886 ops/s
Iteration   3: 2947360.278 ops/s
Iteration   4: 2913495.289 ops/s
Iteration   5: 2965341.843 ops/s
Iteration   6: 2975356.800 ops/s
Iteration   7: 2908660.506 ops/s
Iteration   8: 2957499.916 ops/s
Iteration   9: 2979505.973 ops/s
Iteration  10: 2983866.789 ops/s
Iteration  11: 2983420.258 ops/s
Iteration  12: 2980587.108 ops/s
Iteration  13: 2958242.623 ops/s
Iteration  14: 2940522.139 ops/s
Iteration  15: 2920728.697 ops/s
Iteration  16: 2945925.080 ops/s
Iteration  17: 2948690.198 ops/s
Iteration  18: 2923068.127 ops/s
Iteration  19: 2946646.851 ops/s
Iteration  20: 2933975.286 ops/s
Iteration  21: 2952360.469 ops/s
Iteration  22: 2848555.795 ops/s
Iteration  23: 2887596.700 ops/s
Iteration  24: 2832060.318 ops/s
Iteration  25: 2864175.023 ops/s
Iteration  26: 2876976.994 ops/s
Iteration  27: 2848176.866 ops/s
Iteration  28: 2852366.622 ops/s
Iteration  29: 2872396.390 ops/s
Iteration  30: 2765510.314 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapOfItemToCount":
  2919080.044 ±(99.9%) 35755.356 ops/s [Average]
  (min, avg, max) = (2765510.314, 2919080.044, 2983866.789), stdev = 53516.938
  CI (99.9%): [2883324.688, 2954835.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2919080.044 ± 35755.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 853644.067 ops/s
# Warmup Iteration   2: 1930978.755 ops/s
# Warmup Iteration   3: 1930028.077 ops/s
# Warmup Iteration   4: 1620693.470 ops/s
# Warmup Iteration   5: 1953382.739 ops/s
# Warmup Iteration   6: 1944986.828 ops/s
# Warmup Iteration   7: 1949656.817 ops/s
# Warmup Iteration   8: 1934799.948 ops/s
# Warmup Iteration   9: 1937401.837 ops/s
# Warmup Iteration  10: 1944443.590 ops/s
# Warmup Iteration  11: 1902977.023 ops/s
# Warmup Iteration  12: 1928546.462 ops/s
# Warmup Iteration  13: 1908678.028 ops/s
# Warmup Iteration  14: 1947105.124 ops/s
# Warmup Iteration  15: 1948213.371 ops/s
# Warmup Iteration  16: 1949396.721 ops/s
# Warmup Iteration  17: 1931917.962 ops/s
# Warmup Iteration  18: 1940817.798 ops/s
# Warmup Iteration  19: 1952818.561 ops/s
# Warmup Iteration  20: 1941360.582 ops/s
# Warmup Iteration  21: 1949293.984 ops/s
# Warmup Iteration  22: 1944538.798 ops/s
# Warmup Iteration  23: 1933478.965 ops/s
# Warmup Iteration  24: 1931084.169 ops/s
# Warmup Iteration  25: 1918987.089 ops/s
# Warmup Iteration  26: 1920644.563 ops/s
# Warmup Iteration  27: 1956622.721 ops/s
# Warmup Iteration  28: 1959100.993 ops/s
# Warmup Iteration  29: 1939494.833 ops/s
# Warmup Iteration  30: 1953215.190 ops/s
Iteration   1: 1953307.330 ops/s
Iteration   2: 1943263.191 ops/s
Iteration   3: 1933447.658 ops/s
Iteration   4: 1932120.645 ops/s
Iteration   5: 1893940.973 ops/s
Iteration   6: 1913212.312 ops/s
Iteration   7: 1935717.035 ops/s
Iteration   8: 1939038.517 ops/s
Iteration   9: 1927920.084 ops/s
Iteration  10: 1953637.680 ops/s
Iteration  11: 1944272.472 ops/s
Iteration  12: 1948149.872 ops/s
Iteration  13: 1937387.311 ops/s
Iteration  14: 1961817.899 ops/s
Iteration  15: 1915258.740 ops/s
Iteration  16: 1919236.604 ops/s
Iteration  17: 1946436.221 ops/s
Iteration  18: 1935928.059 ops/s
Iteration  19: 1916656.353 ops/s
Iteration  20: 1927761.829 ops/s
Iteration  21: 1955508.160 ops/s
Iteration  22: 1923889.428 ops/s
Iteration  23: 1918174.863 ops/s
Iteration  24: 1878373.312 ops/s
Iteration  25: 1940031.068 ops/s
Iteration  26: 1952744.834 ops/s
Iteration  27: 1934986.032 ops/s
Iteration  28: 1934593.963 ops/s
Iteration  29: 1954247.544 ops/s
Iteration  30: 1953607.257 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toMapTarget":
  1934155.575 ±(99.9%) 12530.539 ops/s [Average]
  (min, avg, max) = (1878373.312, 1934155.575, 1961817.899), stdev = 18755.123
  CI (99.9%): [1921625.035, 1946686.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  1934155.575 ± 12530.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674346.663 ops/s
# Warmup Iteration   2: 1315280.357 ops/s
# Warmup Iteration   3: 1447408.880 ops/s
# Warmup Iteration   4: 1464126.049 ops/s
# Warmup Iteration   5: 1200609.019 ops/s
# Warmup Iteration   6: 1470845.821 ops/s
# Warmup Iteration   7: 1462366.249 ops/s
# Warmup Iteration   8: 1458962.172 ops/s
# Warmup Iteration   9: 1442492.279 ops/s
# Warmup Iteration  10: 1460856.246 ops/s
# Warmup Iteration  11: 1452041.892 ops/s
# Warmup Iteration  12: 1456405.556 ops/s
# Warmup Iteration  13: 1463296.634 ops/s
# Warmup Iteration  14: 1461431.870 ops/s
# Warmup Iteration  15: 1463460.962 ops/s
# Warmup Iteration  16: 1456535.086 ops/s
# Warmup Iteration  17: 1457457.361 ops/s
# Warmup Iteration  18: 1459234.370 ops/s
# Warmup Iteration  19: 1460049.485 ops/s
# Warmup Iteration  20: 1461688.639 ops/s
# Warmup Iteration  21: 1457782.812 ops/s
# Warmup Iteration  22: 1461742.427 ops/s
# Warmup Iteration  23: 1469456.457 ops/s
# Warmup Iteration  24: 1448999.936 ops/s
# Warmup Iteration  25: 1427511.828 ops/s
# Warmup Iteration  26: 1432826.566 ops/s
# Warmup Iteration  27: 1443820.801 ops/s
# Warmup Iteration  28: 1459516.478 ops/s
# Warmup Iteration  29: 1466548.389 ops/s
# Warmup Iteration  30: 1463778.609 ops/s
Iteration   1: 1457151.111 ops/s
Iteration   2: 1440917.117 ops/s
Iteration   3: 1457595.535 ops/s
Iteration   4: 1470265.625 ops/s
Iteration   5: 1454304.424 ops/s
Iteration   6: 1466911.865 ops/s
Iteration   7: 1461503.629 ops/s
Iteration   8: 1455581.855 ops/s
Iteration   9: 1449970.828 ops/s
Iteration  10: 1429924.202 ops/s
Iteration  11: 1440468.744 ops/s
Iteration  12: 1455693.433 ops/s
Iteration  13: 1440891.501 ops/s
Iteration  14: 1439232.846 ops/s
Iteration  15: 1458882.831 ops/s
Iteration  16: 1463186.241 ops/s
Iteration  17: 1453134.591 ops/s
Iteration  18: 1462172.323 ops/s
Iteration  19: 1471360.378 ops/s
Iteration  20: 1453812.025 ops/s
Iteration  21: 1467558.133 ops/s
Iteration  22: 1467090.393 ops/s
Iteration  23: 1458520.719 ops/s
Iteration  24: 1459146.424 ops/s
Iteration  25: 1449571.918 ops/s
Iteration  26: 1457668.659 ops/s
Iteration  27: 1463953.282 ops/s
Iteration  28: 1470806.985 ops/s
Iteration  29: 1455584.822 ops/s
Iteration  30: 1468768.858 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSet":
  1456721.043 ±(99.9%) 6961.335 ops/s [Average]
  (min, avg, max) = (1429924.202, 1456721.043, 1471360.378), stdev = 10419.400
  CI (99.9%): [1449759.708, 1463682.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSet  thrpt   30  1456721.043 ± 6961.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 294883.989 ops/s
# Warmup Iteration   2: 673762.333 ops/s
# Warmup Iteration   3: 730798.466 ops/s
# Warmup Iteration   4: 737173.260 ops/s
# Warmup Iteration   5: 621993.542 ops/s
# Warmup Iteration   6: 742325.678 ops/s
# Warmup Iteration   7: 739665.311 ops/s
# Warmup Iteration   8: 742207.353 ops/s
# Warmup Iteration   9: 738779.695 ops/s
# Warmup Iteration  10: 737836.101 ops/s
# Warmup Iteration  11: 741727.890 ops/s
# Warmup Iteration  12: 733534.020 ops/s
# Warmup Iteration  13: 738568.128 ops/s
# Warmup Iteration  14: 742700.607 ops/s
# Warmup Iteration  15: 737523.628 ops/s
# Warmup Iteration  16: 734563.593 ops/s
# Warmup Iteration  17: 728006.620 ops/s
# Warmup Iteration  18: 731237.284 ops/s
# Warmup Iteration  19: 729668.098 ops/s
# Warmup Iteration  20: 736256.454 ops/s
# Warmup Iteration  21: 734018.104 ops/s
# Warmup Iteration  22: 724086.143 ops/s
# Warmup Iteration  23: 734094.418 ops/s
# Warmup Iteration  24: 738998.028 ops/s
# Warmup Iteration  25: 722290.253 ops/s
# Warmup Iteration  26: 729208.810 ops/s
# Warmup Iteration  27: 744661.398 ops/s
# Warmup Iteration  28: 745515.813 ops/s
# Warmup Iteration  29: 738726.104 ops/s
# Warmup Iteration  30: 728760.756 ops/s
Iteration   1: 733410.311 ops/s
Iteration   2: 732052.016 ops/s
Iteration   3: 719078.913 ops/s
Iteration   4: 739082.299 ops/s
Iteration   5: 740274.746 ops/s
Iteration   6: 737523.311 ops/s
Iteration   7: 737724.376 ops/s
Iteration   8: 738976.616 ops/s
Iteration   9: 734078.320 ops/s
Iteration  10: 736215.029 ops/s
Iteration  11: 737419.603 ops/s
Iteration  12: 738583.414 ops/s
Iteration  13: 735263.094 ops/s
Iteration  14: 743263.236 ops/s
Iteration  15: 743364.100 ops/s
Iteration  16: 739946.622 ops/s
Iteration  17: 745627.913 ops/s
Iteration  18: 743801.295 ops/s
Iteration  19: 735614.196 ops/s
Iteration  20: 734053.388 ops/s
Iteration  21: 723246.621 ops/s
Iteration  22: 730626.891 ops/s
Iteration  23: 728136.452 ops/s
Iteration  24: 734037.329 ops/s
Iteration  25: 733892.123 ops/s
Iteration  26: 738728.753 ops/s
Iteration  27: 745066.227 ops/s
Iteration  28: 737859.385 ops/s
Iteration  29: 743243.297 ops/s
Iteration  30: 739626.842 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBagBy":
  736660.557 ±(99.9%) 4021.807 ops/s [Average]
  (min, avg, max) = (719078.913, 736660.557, 745627.913), stdev = 6019.652
  CI (99.9%): [732638.750, 740682.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  736660.557 ± 4021.807  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 414444.402 ops/s
# Warmup Iteration   2: 830502.155 ops/s
# Warmup Iteration   3: 947683.341 ops/s
# Warmup Iteration   4: 956040.018 ops/s
# Warmup Iteration   5: 879575.186 ops/s
# Warmup Iteration   6: 869472.904 ops/s
# Warmup Iteration   7: 955213.509 ops/s
# Warmup Iteration   8: 935370.024 ops/s
# Warmup Iteration   9: 942864.286 ops/s
# Warmup Iteration  10: 943959.976 ops/s
# Warmup Iteration  11: 941955.921 ops/s
# Warmup Iteration  12: 931577.654 ops/s
# Warmup Iteration  13: 957141.037 ops/s
# Warmup Iteration  14: 955828.609 ops/s
# Warmup Iteration  15: 955247.218 ops/s
# Warmup Iteration  16: 956798.916 ops/s
# Warmup Iteration  17: 948080.467 ops/s
# Warmup Iteration  18: 955385.502 ops/s
# Warmup Iteration  19: 956511.062 ops/s
# Warmup Iteration  20: 955831.621 ops/s
# Warmup Iteration  21: 925761.672 ops/s
# Warmup Iteration  22: 931384.205 ops/s
# Warmup Iteration  23: 930630.600 ops/s
# Warmup Iteration  24: 903827.120 ops/s
# Warmup Iteration  25: 907909.493 ops/s
# Warmup Iteration  26: 910831.327 ops/s
# Warmup Iteration  27: 940777.534 ops/s
# Warmup Iteration  28: 932528.084 ops/s
# Warmup Iteration  29: 945084.396 ops/s
# Warmup Iteration  30: 949580.819 ops/s
Iteration   1: 949642.963 ops/s
Iteration   2: 938887.843 ops/s
Iteration   3: 944979.307 ops/s
Iteration   4: 935236.678 ops/s
Iteration   5: 911091.766 ops/s
Iteration   6: 894919.179 ops/s
Iteration   7: 903095.037 ops/s
Iteration   8: 935664.464 ops/s
Iteration   9: 953411.144 ops/s
Iteration  10: 958343.582 ops/s
Iteration  11: 957546.018 ops/s
Iteration  12: 944198.868 ops/s
Iteration  13: 932209.875 ops/s
Iteration  14: 950550.413 ops/s
Iteration  15: 932094.445 ops/s
Iteration  16: 929201.340 ops/s
Iteration  17: 929108.570 ops/s
Iteration  18: 916738.751 ops/s
Iteration  19: 921705.298 ops/s
Iteration  20: 886470.557 ops/s
Iteration  21: 898786.495 ops/s
Iteration  22: 904589.911 ops/s
Iteration  23: 894819.696 ops/s
Iteration  24: 945825.731 ops/s
Iteration  25: 943026.077 ops/s
Iteration  26: 929300.175 ops/s
Iteration  27: 917584.872 ops/s
Iteration  28: 878169.117 ops/s
Iteration  29: 897027.725 ops/s
Iteration  30: 895802.149 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  924334.268 ±(99.9%) 15374.896 ops/s [Average]
  (min, avg, max) = (878169.117, 924334.268, 958343.582), stdev = 23012.422
  CI (99.9%): [908959.373, 939709.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  924334.268 ± 15374.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 462248.011 ops/s
# Warmup Iteration   2: 910722.157 ops/s
# Warmup Iteration   3: 1021469.038 ops/s
# Warmup Iteration   4: 1028353.737 ops/s
# Warmup Iteration   5: 993909.084 ops/s
# Warmup Iteration   6: 874966.304 ops/s
# Warmup Iteration   7: 1068677.045 ops/s
# Warmup Iteration   8: 1024519.164 ops/s
# Warmup Iteration   9: 1033475.066 ops/s
# Warmup Iteration  10: 1058099.882 ops/s
# Warmup Iteration  11: 1029005.437 ops/s
# Warmup Iteration  12: 1066300.997 ops/s
# Warmup Iteration  13: 1060359.436 ops/s
# Warmup Iteration  14: 1058383.649 ops/s
# Warmup Iteration  15: 1066143.106 ops/s
# Warmup Iteration  16: 1075453.986 ops/s
# Warmup Iteration  17: 1048067.957 ops/s
# Warmup Iteration  18: 1057361.831 ops/s
# Warmup Iteration  19: 1055712.033 ops/s
# Warmup Iteration  20: 1067472.388 ops/s
# Warmup Iteration  21: 1054360.295 ops/s
# Warmup Iteration  22: 1064483.940 ops/s
# Warmup Iteration  23: 1067457.518 ops/s
# Warmup Iteration  24: 1053733.162 ops/s
# Warmup Iteration  25: 1045886.848 ops/s
# Warmup Iteration  26: 1073850.364 ops/s
# Warmup Iteration  27: 1064228.845 ops/s
# Warmup Iteration  28: 1056986.823 ops/s
# Warmup Iteration  29: 1058164.280 ops/s
# Warmup Iteration  30: 1055529.753 ops/s
Iteration   1: 1071779.123 ops/s
Iteration   2: 1034229.023 ops/s
Iteration   3: 1069211.507 ops/s
Iteration   4: 1062733.592 ops/s
Iteration   5: 1051743.540 ops/s
Iteration   6: 1051100.931 ops/s
Iteration   7: 1048101.010 ops/s
Iteration   8: 1068582.874 ops/s
Iteration   9: 1052800.261 ops/s
Iteration  10: 1036956.935 ops/s
Iteration  11: 1004175.924 ops/s
Iteration  12: 1053153.094 ops/s
Iteration  13: 1037062.312 ops/s
Iteration  14: 1058010.611 ops/s
Iteration  15: 1057172.616 ops/s
Iteration  16: 1030026.904 ops/s
Iteration  17: 1036492.037 ops/s
Iteration  18: 1058454.716 ops/s
Iteration  19: 1083560.344 ops/s
Iteration  20: 1035977.907 ops/s
Iteration  21: 1016779.529 ops/s
Iteration  22: 1023931.801 ops/s
Iteration  23: 1043066.169 ops/s
Iteration  24: 1072464.404 ops/s
Iteration  25: 1047774.757 ops/s
Iteration  26: 1078251.513 ops/s
Iteration  27: 1064929.770 ops/s
Iteration  28: 1057864.917 ops/s
Iteration  29: 1069946.127 ops/s
Iteration  30: 1060826.992 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1051238.708 ±(99.9%) 12435.526 ops/s [Average]
  (min, avg, max) = (1004175.924, 1051238.708, 1083560.344), stdev = 18612.911
  CI (99.9%): [1038803.182, 1063674.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1051238.708 ± 12435.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 444141.843 ops/s
# Warmup Iteration   2: 476966.575 ops/s
# Warmup Iteration   3: 657973.293 ops/s
# Warmup Iteration   4: 663404.476 ops/s
# Warmup Iteration   5: 660760.175 ops/s
# Warmup Iteration   6: 660219.554 ops/s
# Warmup Iteration   7: 663048.535 ops/s
# Warmup Iteration   8: 663051.265 ops/s
# Warmup Iteration   9: 658274.275 ops/s
# Warmup Iteration  10: 661956.051 ops/s
# Warmup Iteration  11: 560590.293 ops/s
# Warmup Iteration  12: 592801.297 ops/s
# Warmup Iteration  13: 660760.966 ops/s
# Warmup Iteration  14: 657744.244 ops/s
# Warmup Iteration  15: 658255.238 ops/s
# Warmup Iteration  16: 639582.857 ops/s
# Warmup Iteration  17: 691304.520 ops/s
# Warmup Iteration  18: 697232.897 ops/s
# Warmup Iteration  19: 698746.979 ops/s
# Warmup Iteration  20: 697180.437 ops/s
# Warmup Iteration  21: 689802.083 ops/s
# Warmup Iteration  22: 696301.918 ops/s
# Warmup Iteration  23: 689449.747 ops/s
# Warmup Iteration  24: 695132.864 ops/s
# Warmup Iteration  25: 690917.127 ops/s
# Warmup Iteration  26: 670431.212 ops/s
# Warmup Iteration  27: 703230.822 ops/s
# Warmup Iteration  28: 703442.191 ops/s
# Warmup Iteration  29: 687076.884 ops/s
# Warmup Iteration  30: 691748.341 ops/s
Iteration   1: 695633.204 ops/s
Iteration   2: 665151.049 ops/s
Iteration   3: 695961.424 ops/s
Iteration   4: 696636.011 ops/s
Iteration   5: 671693.055 ops/s
Iteration   6: 666346.772 ops/s
Iteration   7: 665806.624 ops/s
Iteration   8: 684655.006 ops/s
Iteration   9: 703701.855 ops/s
Iteration  10: 683770.254 ops/s
Iteration  11: 665944.333 ops/s
Iteration  12: 683468.460 ops/s
Iteration  13: 647371.689 ops/s
Iteration  14: 677937.741 ops/s
Iteration  15: 687776.768 ops/s
Iteration  16: 670303.262 ops/s
Iteration  17: 679186.145 ops/s
Iteration  18: 690048.109 ops/s
Iteration  19: 689066.165 ops/s
Iteration  20: 671404.398 ops/s
Iteration  21: 672407.324 ops/s
Iteration  22: 680565.824 ops/s
Iteration  23: 684161.372 ops/s
Iteration  24: 693816.352 ops/s
Iteration  25: 697033.145 ops/s
Iteration  26: 674917.106 ops/s
Iteration  27: 667640.842 ops/s
Iteration  28: 656522.182 ops/s
Iteration  29: 664569.244 ops/s
Iteration  30: 683391.465 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_null":
  678896.239 ±(99.9%) 8981.486 ops/s [Average]
  (min, avg, max) = (647371.689, 678896.239, 703701.855), stdev = 13443.066
  CI (99.9%): [669914.754, 687877.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  678896.239 ± 8981.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 818632.311 ops/s
# Warmup Iteration   2: 1448809.864 ops/s
# Warmup Iteration   3: 1647727.131 ops/s
# Warmup Iteration   4: 1706039.237 ops/s
# Warmup Iteration   5: 1701615.935 ops/s
# Warmup Iteration   6: 1340149.490 ops/s
# Warmup Iteration   7: 1649222.037 ops/s
# Warmup Iteration   8: 1646008.855 ops/s
# Warmup Iteration   9: 1671570.661 ops/s
# Warmup Iteration  10: 1658783.450 ops/s
# Warmup Iteration  11: 1691736.846 ops/s
# Warmup Iteration  12: 1704928.780 ops/s
# Warmup Iteration  13: 1701499.858 ops/s
# Warmup Iteration  14: 1689783.976 ops/s
# Warmup Iteration  15: 1688794.602 ops/s
# Warmup Iteration  16: 1699744.599 ops/s
# Warmup Iteration  17: 1690001.863 ops/s
# Warmup Iteration  18: 1681483.629 ops/s
# Warmup Iteration  19: 1623353.670 ops/s
# Warmup Iteration  20: 1634030.894 ops/s
# Warmup Iteration  21: 1652957.149 ops/s
# Warmup Iteration  22: 1672653.808 ops/s
# Warmup Iteration  23: 1643556.224 ops/s
# Warmup Iteration  24: 1695917.224 ops/s
# Warmup Iteration  25: 1714991.270 ops/s
# Warmup Iteration  26: 1710789.787 ops/s
# Warmup Iteration  27: 1644737.764 ops/s
# Warmup Iteration  28: 1643714.038 ops/s
# Warmup Iteration  29: 1681907.601 ops/s
# Warmup Iteration  30: 1697292.614 ops/s
Iteration   1: 1706222.199 ops/s
Iteration   2: 1604013.378 ops/s
Iteration   3: 1713340.698 ops/s
Iteration   4: 1666919.416 ops/s
Iteration   5: 1706177.599 ops/s
Iteration   6: 1625239.250 ops/s
Iteration   7: 1632254.947 ops/s
Iteration   8: 1640250.958 ops/s
Iteration   9: 1688653.189 ops/s
Iteration  10: 1698853.859 ops/s
Iteration  11: 1720689.763 ops/s
Iteration  12: 1701892.250 ops/s
Iteration  13: 1695672.290 ops/s
Iteration  14: 1686965.238 ops/s
Iteration  15: 1709712.760 ops/s
Iteration  16: 1709202.582 ops/s
Iteration  17: 1680616.726 ops/s
Iteration  18: 1678331.222 ops/s
Iteration  19: 1704890.767 ops/s
Iteration  20: 1704670.968 ops/s
Iteration  21: 1704810.524 ops/s
Iteration  22: 1633237.624 ops/s
Iteration  23: 1667442.951 ops/s
Iteration  24: 1727348.849 ops/s
Iteration  25: 1697812.103 ops/s
Iteration  26: 1708770.087 ops/s
Iteration  27: 1687327.279 ops/s
Iteration  28: 1714514.346 ops/s
Iteration  29: 1708736.373 ops/s
Iteration  30: 1686429.412 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy":
  1687033.320 ±(99.9%) 20793.147 ops/s [Average]
  (min, avg, max) = (1604013.378, 1687033.320, 1727348.849), stdev = 31122.205
  CI (99.9%): [1666240.174, 1707826.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1687033.320 ± 20793.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716208.181 ops/s
# Warmup Iteration   2: 972992.180 ops/s
# Warmup Iteration   3: 1333945.668 ops/s
# Warmup Iteration   4: 1315118.371 ops/s
# Warmup Iteration   5: 1314245.971 ops/s
# Warmup Iteration   6: 1318903.263 ops/s
# Warmup Iteration   7: 1327283.752 ops/s
# Warmup Iteration   8: 1082717.596 ops/s
# Warmup Iteration   9: 1307715.753 ops/s
# Warmup Iteration  10: 1325102.578 ops/s
# Warmup Iteration  11: 1331493.328 ops/s
# Warmup Iteration  12: 1307663.741 ops/s
# Warmup Iteration  13: 1315580.319 ops/s
# Warmup Iteration  14: 1313864.840 ops/s
# Warmup Iteration  15: 1318398.792 ops/s
# Warmup Iteration  16: 1318430.993 ops/s
# Warmup Iteration  17: 1312052.829 ops/s
# Warmup Iteration  18: 1315326.116 ops/s
# Warmup Iteration  19: 1312844.578 ops/s
# Warmup Iteration  20: 1320687.253 ops/s
# Warmup Iteration  21: 1323780.071 ops/s
# Warmup Iteration  22: 1296900.250 ops/s
# Warmup Iteration  23: 1272446.610 ops/s
# Warmup Iteration  24: 1308241.512 ops/s
# Warmup Iteration  25: 1315140.708 ops/s
# Warmup Iteration  26: 1284636.140 ops/s
# Warmup Iteration  27: 1325914.907 ops/s
# Warmup Iteration  28: 1317311.125 ops/s
# Warmup Iteration  29: 1317968.325 ops/s
# Warmup Iteration  30: 1310950.534 ops/s
Iteration   1: 1324166.549 ops/s
Iteration   2: 1292579.000 ops/s
Iteration   3: 1278964.970 ops/s
Iteration   4: 1318694.947 ops/s
Iteration   5: 1322801.848 ops/s
Iteration   6: 1299066.323 ops/s
Iteration   7: 1334631.934 ops/s
Iteration   8: 1337114.681 ops/s
Iteration   9: 1339548.082 ops/s
Iteration  10: 1332180.291 ops/s
Iteration  11: 1237396.197 ops/s
Iteration  12: 1311723.066 ops/s
Iteration  13: 1319868.074 ops/s
Iteration  14: 1315490.949 ops/s
Iteration  15: 1322894.647 ops/s
Iteration  16: 1310000.351 ops/s
Iteration  17: 1324160.347 ops/s
Iteration  18: 1280998.625 ops/s
Iteration  19: 1302639.337 ops/s
Iteration  20: 1320041.935 ops/s
Iteration  21: 1310184.019 ops/s
Iteration  22: 1329724.266 ops/s
Iteration  23: 1312240.584 ops/s
Iteration  24: 1309127.743 ops/s
Iteration  25: 1324185.371 ops/s
Iteration  26: 1325829.684 ops/s
Iteration  27: 1317968.385 ops/s
Iteration  28: 1284676.397 ops/s
Iteration  29: 1320768.854 ops/s
Iteration  30: 1317437.536 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1312570.166 ±(99.9%) 14048.810 ops/s [Average]
  (min, avg, max) = (1237396.197, 1312570.166, 1339548.082), stdev = 21027.599
  CI (99.9%): [1298521.356, 1326618.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1312570.166 ± 14048.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822306.540 ops/s
# Warmup Iteration   2: 1982442.595 ops/s
# Warmup Iteration   3: 2071900.496 ops/s
# Warmup Iteration   4: 1687904.951 ops/s
# Warmup Iteration   5: 2068506.731 ops/s
# Warmup Iteration   6: 2044886.546 ops/s
# Warmup Iteration   7: 2006826.421 ops/s
# Warmup Iteration   8: 2023132.029 ops/s
# Warmup Iteration   9: 2055285.579 ops/s
# Warmup Iteration  10: 2046209.760 ops/s
# Warmup Iteration  11: 1987394.454 ops/s
# Warmup Iteration  12: 1983301.987 ops/s
# Warmup Iteration  13: 2035502.508 ops/s
# Warmup Iteration  14: 2033798.444 ops/s
# Warmup Iteration  15: 2016643.786 ops/s
# Warmup Iteration  16: 1981261.327 ops/s
# Warmup Iteration  17: 2056108.568 ops/s
# Warmup Iteration  18: 2035921.681 ops/s
# Warmup Iteration  19: 2068258.356 ops/s
# Warmup Iteration  20: 2020701.289 ops/s
# Warmup Iteration  21: 2066352.922 ops/s
# Warmup Iteration  22: 2057213.772 ops/s
# Warmup Iteration  23: 2040545.853 ops/s
# Warmup Iteration  24: 2080489.707 ops/s
# Warmup Iteration  25: 2074429.498 ops/s
# Warmup Iteration  26: 2055938.005 ops/s
# Warmup Iteration  27: 2041510.917 ops/s
# Warmup Iteration  28: 2038687.298 ops/s
# Warmup Iteration  29: 2061203.274 ops/s
# Warmup Iteration  30: 2060113.300 ops/s
Iteration   1: 2055243.911 ops/s
Iteration   2: 1995339.513 ops/s
Iteration   3: 2074102.656 ops/s
Iteration   4: 2049280.182 ops/s
Iteration   5: 2065694.979 ops/s
Iteration   6: 2002517.535 ops/s
Iteration   7: 2014915.094 ops/s
Iteration   8: 2053211.295 ops/s
Iteration   9: 2057947.519 ops/s
Iteration  10: 2042061.198 ops/s
Iteration  11: 2016060.663 ops/s
Iteration  12: 1957293.934 ops/s
Iteration  13: 2009367.211 ops/s
Iteration  14: 2016484.471 ops/s
Iteration  15: 2076122.449 ops/s
Iteration  16: 2064881.819 ops/s
Iteration  17: 2067368.517 ops/s
Iteration  18: 2055463.338 ops/s
Iteration  19: 2042949.977 ops/s
Iteration  20: 2052602.748 ops/s
Iteration  21: 2061266.641 ops/s
Iteration  22: 1989776.605 ops/s
Iteration  23: 2048623.152 ops/s
Iteration  24: 2083919.128 ops/s
Iteration  25: 2050964.618 ops/s
Iteration  26: 2065399.943 ops/s
Iteration  27: 2070650.735 ops/s
Iteration  28: 2022640.269 ops/s
Iteration  29: 2033535.943 ops/s
Iteration  30: 1951598.219 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2038242.809 ±(99.9%) 22675.100 ops/s [Average]
  (min, avg, max) = (1951598.219, 2038242.809, 2083919.128), stdev = 33939.024
  CI (99.9%): [2015567.709, 2060917.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2038242.809 ± 22675.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1191864.667 ops/s
# Warmup Iteration   2: 2663136.100 ops/s
# Warmup Iteration   3: 2791609.625 ops/s
# Warmup Iteration   4: 2909023.200 ops/s
# Warmup Iteration   5: 2455604.695 ops/s
# Warmup Iteration   6: 2975859.635 ops/s
# Warmup Iteration   7: 2970847.751 ops/s
# Warmup Iteration   8: 2962212.172 ops/s
# Warmup Iteration   9: 2961641.356 ops/s
# Warmup Iteration  10: 2918111.840 ops/s
# Warmup Iteration  11: 2889073.599 ops/s
# Warmup Iteration  12: 2912256.903 ops/s
# Warmup Iteration  13: 2856092.029 ops/s
# Warmup Iteration  14: 2897710.408 ops/s
# Warmup Iteration  15: 2908011.752 ops/s
# Warmup Iteration  16: 2945330.497 ops/s
# Warmup Iteration  17: 2984813.752 ops/s
# Warmup Iteration  18: 2954498.273 ops/s
# Warmup Iteration  19: 2936349.047 ops/s
# Warmup Iteration  20: 2888237.493 ops/s
# Warmup Iteration  21: 2896452.778 ops/s
# Warmup Iteration  22: 2963729.570 ops/s
# Warmup Iteration  23: 2961639.416 ops/s
# Warmup Iteration  24: 2989617.508 ops/s
# Warmup Iteration  25: 3002132.571 ops/s
# Warmup Iteration  26: 3003908.727 ops/s
# Warmup Iteration  27: 3001062.808 ops/s
# Warmup Iteration  28: 3006326.340 ops/s
# Warmup Iteration  29: 2977486.937 ops/s
# Warmup Iteration  30: 2946042.405 ops/s
Iteration   1: 2986423.469 ops/s
Iteration   2: 3002579.168 ops/s
Iteration   3: 2962575.871 ops/s
Iteration   4: 3001618.457 ops/s
Iteration   5: 2988908.407 ops/s
Iteration   6: 2944767.257 ops/s
Iteration   7: 2920698.965 ops/s
Iteration   8: 2872947.893 ops/s
Iteration   9: 2955677.581 ops/s
Iteration  10: 2980641.051 ops/s
Iteration  11: 2994379.872 ops/s
Iteration  12: 2993778.013 ops/s
Iteration  13: 3001327.691 ops/s
Iteration  14: 2992874.417 ops/s
Iteration  15: 2993865.203 ops/s
Iteration  16: 3016487.649 ops/s
Iteration  17: 3013925.262 ops/s
Iteration  18: 3015445.557 ops/s
Iteration  19: 2973372.834 ops/s
Iteration  20: 2977172.891 ops/s
Iteration  21: 2935489.409 ops/s
Iteration  22: 2978353.503 ops/s
Iteration  23: 2967889.849 ops/s
Iteration  24: 2955681.731 ops/s
Iteration  25: 2972349.858 ops/s
Iteration  26: 2924681.077 ops/s
Iteration  27: 2869611.039 ops/s
Iteration  28: 2906739.711 ops/s
Iteration  29: 2920919.063 ops/s
Iteration  30: 2915709.358 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  2964563.070 ±(99.9%) 26919.592 ops/s [Average]
  (min, avg, max) = (2869611.039, 2964563.070, 3016487.649), stdev = 40291.982
  CI (99.9%): [2937643.478, 2991482.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  2964563.070 ± 26919.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986677.427 ops/s
# Warmup Iteration   2: 1607702.796 ops/s
# Warmup Iteration   3: 1967617.417 ops/s
# Warmup Iteration   4: 1957440.078 ops/s
# Warmup Iteration   5: 1964691.272 ops/s
# Warmup Iteration   6: 1889950.774 ops/s
# Warmup Iteration   7: 1657847.142 ops/s
# Warmup Iteration   8: 1940138.950 ops/s
# Warmup Iteration   9: 1941314.351 ops/s
# Warmup Iteration  10: 1948790.577 ops/s
# Warmup Iteration  11: 1923830.312 ops/s
# Warmup Iteration  12: 1966206.909 ops/s
# Warmup Iteration  13: 1963806.160 ops/s
# Warmup Iteration  14: 1966781.444 ops/s
# Warmup Iteration  15: 1985858.519 ops/s
# Warmup Iteration  16: 1965231.334 ops/s
# Warmup Iteration  17: 1973866.246 ops/s
# Warmup Iteration  18: 1935503.566 ops/s
# Warmup Iteration  19: 1994144.309 ops/s
# Warmup Iteration  20: 1998711.123 ops/s
# Warmup Iteration  21: 1999970.421 ops/s
# Warmup Iteration  22: 2002823.118 ops/s
# Warmup Iteration  23: 1994405.014 ops/s
# Warmup Iteration  24: 1985775.166 ops/s
# Warmup Iteration  25: 1963792.288 ops/s
# Warmup Iteration  26: 1942620.420 ops/s
# Warmup Iteration  27: 1934932.198 ops/s
# Warmup Iteration  28: 1933890.129 ops/s
# Warmup Iteration  29: 1995342.677 ops/s
# Warmup Iteration  30: 1980906.738 ops/s
Iteration   1: 1992936.640 ops/s
Iteration   2: 1985768.125 ops/s
Iteration   3: 1984328.131 ops/s
Iteration   4: 1931530.097 ops/s
Iteration   5: 1971523.029 ops/s
Iteration   6: 1943758.543 ops/s
Iteration   7: 1989237.501 ops/s
Iteration   8: 1976182.281 ops/s
Iteration   9: 2001814.259 ops/s
Iteration  10: 1972788.198 ops/s
Iteration  11: 1986013.356 ops/s
Iteration  12: 1972432.040 ops/s
Iteration  13: 1984126.722 ops/s
Iteration  14: 1981733.844 ops/s
Iteration  15: 1917734.227 ops/s
Iteration  16: 1991795.868 ops/s
Iteration  17: 1977181.245 ops/s
Iteration  18: 1974731.502 ops/s
Iteration  19: 1973546.280 ops/s
Iteration  20: 1963146.300 ops/s
Iteration  21: 1990275.492 ops/s
Iteration  22: 1984697.274 ops/s
Iteration  23: 1986105.296 ops/s
Iteration  24: 1987272.574 ops/s
Iteration  25: 1987577.789 ops/s
Iteration  26: 1981022.477 ops/s
Iteration  27: 1995068.192 ops/s
Iteration  28: 1956911.318 ops/s
Iteration  29: 1995115.842 ops/s
Iteration  30: 1978534.913 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_null":
  1977162.979 ±(99.9%) 12467.441 ops/s [Average]
  (min, avg, max) = (1917734.227, 1977162.979, 2001814.259), stdev = 18660.680
  CI (99.9%): [1964695.538, 1989630.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  1977162.979 ± 12467.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 452774.139 ops/s
# Warmup Iteration   2: 1012813.021 ops/s
# Warmup Iteration   3: 1117588.191 ops/s
# Warmup Iteration   4: 1107265.005 ops/s
# Warmup Iteration   5: 940423.056 ops/s
# Warmup Iteration   6: 1129759.997 ops/s
# Warmup Iteration   7: 1128777.188 ops/s
# Warmup Iteration   8: 1116493.937 ops/s
# Warmup Iteration   9: 1107711.063 ops/s
# Warmup Iteration  10: 1112931.065 ops/s
# Warmup Iteration  11: 1125347.503 ops/s
# Warmup Iteration  12: 1123933.322 ops/s
# Warmup Iteration  13: 1105254.501 ops/s
# Warmup Iteration  14: 1116167.697 ops/s
# Warmup Iteration  15: 1092999.164 ops/s
# Warmup Iteration  16: 1126796.793 ops/s
# Warmup Iteration  17: 1106989.506 ops/s
# Warmup Iteration  18: 1125161.690 ops/s
# Warmup Iteration  19: 1128381.380 ops/s
# Warmup Iteration  20: 1129580.608 ops/s
# Warmup Iteration  21: 1107740.467 ops/s
# Warmup Iteration  22: 1118020.725 ops/s
# Warmup Iteration  23: 1124982.135 ops/s
# Warmup Iteration  24: 1126397.847 ops/s
# Warmup Iteration  25: 1124545.280 ops/s
# Warmup Iteration  26: 1112871.885 ops/s
# Warmup Iteration  27: 1128339.697 ops/s
# Warmup Iteration  28: 1125596.255 ops/s
# Warmup Iteration  29: 1127723.511 ops/s
# Warmup Iteration  30: 1108833.263 ops/s
Iteration   1: 1122745.830 ops/s
Iteration   2: 1103421.272 ops/s
Iteration   3: 1096841.610 ops/s
Iteration   4: 1126297.673 ops/s
Iteration   5: 1130809.451 ops/s
Iteration   6: 1122378.345 ops/s
Iteration   7: 1130649.454 ops/s
Iteration   8: 1131846.169 ops/s
Iteration   9: 1129428.290 ops/s
Iteration  10: 1120997.079 ops/s
Iteration  11: 1124527.559 ops/s
Iteration  12: 1126232.206 ops/s
Iteration  13: 1127283.586 ops/s
Iteration  14: 1130647.597 ops/s
Iteration  15: 1130559.198 ops/s
Iteration  16: 1119447.348 ops/s
Iteration  17: 1119529.657 ops/s
Iteration  18: 1120672.920 ops/s
Iteration  19: 1105331.722 ops/s
Iteration  20: 1119189.085 ops/s
Iteration  21: 1123841.158 ops/s
Iteration  22: 1100829.275 ops/s
Iteration  23: 1097546.597 ops/s
Iteration  24: 1094966.244 ops/s
Iteration  25: 1118327.716 ops/s
Iteration  26: 1125113.637 ops/s
Iteration  27: 1126623.145 ops/s
Iteration  28: 1124117.166 ops/s
Iteration  29: 1127871.039 ops/s
Iteration  30: 1126327.782 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap":
  1120146.660 ±(99.9%) 7426.098 ops/s [Average]
  (min, avg, max) = (1094966.244, 1120146.660, 1131846.169), stdev = 11115.035
  CI (99.9%): [1112720.562, 1127572.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  1120146.660 ± 7426.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 448479.325 ops/s
# Warmup Iteration   2: 951682.723 ops/s
# Warmup Iteration   3: 1026511.065 ops/s
# Warmup Iteration   4: 1023276.939 ops/s
# Warmup Iteration   5: 864504.730 ops/s
# Warmup Iteration   6: 1032054.884 ops/s
# Warmup Iteration   7: 1039239.426 ops/s
# Warmup Iteration   8: 1025074.810 ops/s
# Warmup Iteration   9: 1036988.002 ops/s
# Warmup Iteration  10: 1016624.069 ops/s
# Warmup Iteration  11: 1012666.770 ops/s
# Warmup Iteration  12: 1014268.721 ops/s
# Warmup Iteration  13: 1030712.186 ops/s
# Warmup Iteration  14: 1034791.741 ops/s
# Warmup Iteration  15: 1034045.184 ops/s
# Warmup Iteration  16: 1031684.056 ops/s
# Warmup Iteration  17: 1035261.719 ops/s
# Warmup Iteration  18: 1029785.973 ops/s
# Warmup Iteration  19: 1019120.202 ops/s
# Warmup Iteration  20: 1021945.287 ops/s
# Warmup Iteration  21: 1009241.768 ops/s
# Warmup Iteration  22: 1037055.165 ops/s
# Warmup Iteration  23: 1040294.437 ops/s
# Warmup Iteration  24: 1023862.028 ops/s
# Warmup Iteration  25: 1015189.520 ops/s
# Warmup Iteration  26: 1024186.529 ops/s
# Warmup Iteration  27: 1028513.018 ops/s
# Warmup Iteration  28: 1013907.526 ops/s
# Warmup Iteration  29: 1028321.512 ops/s
# Warmup Iteration  30: 1034826.894 ops/s
Iteration   1: 1035970.952 ops/s
Iteration   2: 1038463.294 ops/s
Iteration   3: 1022789.118 ops/s
Iteration   4: 1021751.013 ops/s
Iteration   5: 1033572.660 ops/s
Iteration   6: 1017500.630 ops/s
Iteration   7: 993414.705 ops/s
Iteration   8: 1027202.571 ops/s
Iteration   9: 1005320.413 ops/s
Iteration  10: 982217.494 ops/s
Iteration  11: 971045.454 ops/s
Iteration  12: 980185.312 ops/s
Iteration  13: 966394.956 ops/s
Iteration  14: 1029051.957 ops/s
Iteration  15: 962257.518 ops/s
Iteration  16: 1029967.375 ops/s
Iteration  17: 1042561.352 ops/s
Iteration  18: 1041137.491 ops/s
Iteration  19: 1043352.408 ops/s
Iteration  20: 1041995.895 ops/s
Iteration  21: 1040929.080 ops/s
Iteration  22: 1041964.844 ops/s
Iteration  23: 1041566.514 ops/s
Iteration  24: 1023104.447 ops/s
Iteration  25: 1002787.968 ops/s
Iteration  26: 1016810.699 ops/s
Iteration  27: 1041878.372 ops/s
Iteration  28: 1025462.275 ops/s
Iteration  29: 1036508.663 ops/s
Iteration  30: 1034221.392 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMapBy":
  1019712.894 ±(99.9%) 16754.398 ops/s [Average]
  (min, avg, max) = (962257.518, 1019712.894, 1043352.408), stdev = 25077.196
  CI (99.9%): [1002958.496, 1036467.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1019712.894 ± 16754.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 452328.221 ops/s
# Warmup Iteration   2: 987689.527 ops/s
# Warmup Iteration   3: 1069831.951 ops/s
# Warmup Iteration   4: 1073052.907 ops/s
# Warmup Iteration   5: 894556.427 ops/s
# Warmup Iteration   6: 1069880.840 ops/s
# Warmup Iteration   7: 1074682.282 ops/s
# Warmup Iteration   8: 1079095.814 ops/s
# Warmup Iteration   9: 1078081.793 ops/s
# Warmup Iteration  10: 1081771.124 ops/s
# Warmup Iteration  11: 1074143.486 ops/s
# Warmup Iteration  12: 1058255.396 ops/s
# Warmup Iteration  13: 1070300.514 ops/s
# Warmup Iteration  14: 1069640.966 ops/s
# Warmup Iteration  15: 1051971.485 ops/s
# Warmup Iteration  16: 1075905.139 ops/s
# Warmup Iteration  17: 1066653.326 ops/s
# Warmup Iteration  18: 1070312.257 ops/s
# Warmup Iteration  19: 1067555.565 ops/s
# Warmup Iteration  20: 1074258.164 ops/s
# Warmup Iteration  21: 1067944.764 ops/s
# Warmup Iteration  22: 1065102.974 ops/s
# Warmup Iteration  23: 1069991.758 ops/s
# Warmup Iteration  24: 1050741.860 ops/s
# Warmup Iteration  25: 1074148.169 ops/s
# Warmup Iteration  26: 1072607.324 ops/s
# Warmup Iteration  27: 1071282.041 ops/s
# Warmup Iteration  28: 1075617.344 ops/s
# Warmup Iteration  29: 1074212.022 ops/s
# Warmup Iteration  30: 1076399.850 ops/s
Iteration   1: 1070952.059 ops/s
Iteration   2: 1074585.612 ops/s
Iteration   3: 1067869.056 ops/s
Iteration   4: 1076673.309 ops/s
Iteration   5: 1075236.873 ops/s
Iteration   6: 1076951.147 ops/s
Iteration   7: 1077872.991 ops/s
Iteration   8: 1076205.605 ops/s
Iteration   9: 1083926.205 ops/s
Iteration  10: 1071560.484 ops/s
Iteration  11: 1072438.499 ops/s
Iteration  12: 1075257.237 ops/s
Iteration  13: 1077739.905 ops/s
Iteration  14: 1070840.835 ops/s
Iteration  15: 1071489.497 ops/s
Iteration  16: 1074094.691 ops/s
Iteration  17: 1074040.247 ops/s
Iteration  18: 1083208.815 ops/s
Iteration  19: 1084767.873 ops/s
Iteration  20: 1073055.188 ops/s
Iteration  21: 1076787.798 ops/s
Iteration  22: 1067836.877 ops/s
Iteration  23: 1069179.694 ops/s
Iteration  24: 1077224.155 ops/s
Iteration  25: 1057271.163 ops/s
Iteration  26: 1068294.458 ops/s
Iteration  27: 1068551.688 ops/s
Iteration  28: 1075919.610 ops/s
Iteration  29: 1050930.943 ops/s
Iteration  30: 1053758.556 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1072484.036 ±(99.9%) 5149.852 ops/s [Average]
  (min, avg, max) = (1050930.943, 1072484.036, 1084767.873), stdev = 7708.056
  CI (99.9%): [1067334.184, 1077633.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1072484.036 ± 5149.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494664.366 ops/s
# Warmup Iteration   2: 1019677.170 ops/s
# Warmup Iteration   3: 1120206.015 ops/s
# Warmup Iteration   4: 1126705.461 ops/s
# Warmup Iteration   5: 936973.741 ops/s
# Warmup Iteration   6: 1108791.749 ops/s
# Warmup Iteration   7: 1107533.318 ops/s
# Warmup Iteration   8: 1118850.443 ops/s
# Warmup Iteration   9: 1113088.312 ops/s
# Warmup Iteration  10: 1118940.139 ops/s
# Warmup Iteration  11: 1113222.117 ops/s
# Warmup Iteration  12: 1128462.196 ops/s
# Warmup Iteration  13: 1115025.744 ops/s
# Warmup Iteration  14: 1116495.868 ops/s
# Warmup Iteration  15: 1107941.338 ops/s
# Warmup Iteration  16: 1112020.467 ops/s
# Warmup Iteration  17: 1112609.216 ops/s
# Warmup Iteration  18: 1110949.332 ops/s
# Warmup Iteration  19: 1120078.405 ops/s
# Warmup Iteration  20: 1110825.628 ops/s
# Warmup Iteration  21: 1124111.777 ops/s
# Warmup Iteration  22: 1118149.647 ops/s
# Warmup Iteration  23: 1112380.064 ops/s
# Warmup Iteration  24: 1119297.262 ops/s
# Warmup Iteration  25: 1109103.190 ops/s
# Warmup Iteration  26: 1100759.893 ops/s
# Warmup Iteration  27: 1111335.684 ops/s
# Warmup Iteration  28: 1092895.398 ops/s
# Warmup Iteration  29: 1123178.525 ops/s
# Warmup Iteration  30: 1098922.753 ops/s
Iteration   1: 1048026.921 ops/s
Iteration   2: 1104395.939 ops/s
Iteration   3: 1119329.603 ops/s
Iteration   4: 1119181.897 ops/s
Iteration   5: 1104147.252 ops/s
Iteration   6: 1110356.444 ops/s
Iteration   7: 1119778.678 ops/s
Iteration   8: 1112841.893 ops/s
Iteration   9: 1100279.496 ops/s
Iteration  10: 1106910.440 ops/s
Iteration  11: 1108458.750 ops/s
Iteration  12: 1114568.857 ops/s
Iteration  13: 1086417.650 ops/s
Iteration  14: 1112783.518 ops/s
Iteration  15: 1108887.725 ops/s
Iteration  16: 1102129.867 ops/s
Iteration  17: 1085567.047 ops/s
Iteration  18: 1130893.812 ops/s
Iteration  19: 1097000.505 ops/s
Iteration  20: 1099657.753 ops/s
Iteration  21: 1099103.746 ops/s
Iteration  22: 1102997.219 ops/s
Iteration  23: 1113830.254 ops/s
Iteration  24: 1113681.180 ops/s
Iteration  25: 1079623.629 ops/s
Iteration  26: 1100726.147 ops/s
Iteration  27: 1117575.893 ops/s
Iteration  28: 1113733.210 ops/s
Iteration  29: 1097671.310 ops/s
Iteration  30: 1109975.525 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSetBy":
  1104684.405 ±(99.9%) 10250.000 ops/s [Average]
  (min, avg, max) = (1048026.921, 1104684.405, 1130893.812), stdev = 15341.718
  CI (99.9%): [1094434.406, 1114934.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1104684.405 ± 10250.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672928.041 ops/s
# Warmup Iteration   2: 1663671.828 ops/s
# Warmup Iteration   3: 1715795.074 ops/s
# Warmup Iteration   4: 1414664.726 ops/s
# Warmup Iteration   5: 1709450.406 ops/s
# Warmup Iteration   6: 1719430.247 ops/s
# Warmup Iteration   7: 1707326.371 ops/s
# Warmup Iteration   8: 1701497.993 ops/s
# Warmup Iteration   9: 1709181.981 ops/s
# Warmup Iteration  10: 1736025.024 ops/s
# Warmup Iteration  11: 1710409.629 ops/s
# Warmup Iteration  12: 1701227.677 ops/s
# Warmup Iteration  13: 1713904.188 ops/s
# Warmup Iteration  14: 1716707.489 ops/s
# Warmup Iteration  15: 1718447.433 ops/s
# Warmup Iteration  16: 1709920.750 ops/s
# Warmup Iteration  17: 1716134.168 ops/s
# Warmup Iteration  18: 1705618.022 ops/s
# Warmup Iteration  19: 1719824.930 ops/s
# Warmup Iteration  20: 1706925.383 ops/s
# Warmup Iteration  21: 1713970.546 ops/s
# Warmup Iteration  22: 1716290.319 ops/s
# Warmup Iteration  23: 1728914.109 ops/s
# Warmup Iteration  24: 1741570.229 ops/s
# Warmup Iteration  25: 1715610.669 ops/s
# Warmup Iteration  26: 1716644.305 ops/s
# Warmup Iteration  27: 1710851.081 ops/s
# Warmup Iteration  28: 1738354.038 ops/s
# Warmup Iteration  29: 1705660.255 ops/s
# Warmup Iteration  30: 1733253.385 ops/s
Iteration   1: 1699450.817 ops/s
Iteration   2: 1701427.309 ops/s
Iteration   3: 1710728.701 ops/s
Iteration   4: 1717227.232 ops/s
Iteration   5: 1728399.328 ops/s
Iteration   6: 1738812.716 ops/s
Iteration   7: 1737361.364 ops/s
Iteration   8: 1656936.277 ops/s
Iteration   9: 1631545.290 ops/s
Iteration  10: 1634589.593 ops/s
Iteration  11: 1675619.397 ops/s
Iteration  12: 1641715.793 ops/s
Iteration  13: 1676754.961 ops/s
Iteration  14: 1710352.127 ops/s
Iteration  15: 1701243.773 ops/s
Iteration  16: 1690480.275 ops/s
Iteration  17: 1710071.107 ops/s
Iteration  18: 1697322.772 ops/s
Iteration  19: 1697587.739 ops/s
Iteration  20: 1680454.842 ops/s
Iteration  21: 1730890.253 ops/s
Iteration  22: 1732992.437 ops/s
Iteration  23: 1727525.789 ops/s
Iteration  24: 1706250.347 ops/s
Iteration  25: 1724801.423 ops/s
Iteration  26: 1702234.336 ops/s
Iteration  27: 1690690.864 ops/s
Iteration  28: 1694360.207 ops/s
Iteration  29: 1685914.695 ops/s
Iteration  30: 1672704.935 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1696881.557 ±(99.9%) 19379.383 ops/s [Average]
  (min, avg, max) = (1631545.290, 1696881.557, 1738812.716), stdev = 29006.150
  CI (99.9%): [1677502.174, 1716260.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1696881.557 ± 19379.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 659133.326 ops/s
# Warmup Iteration   2: 1557064.438 ops/s
# Warmup Iteration   3: 1645939.682 ops/s
# Warmup Iteration   4: 1348362.608 ops/s
# Warmup Iteration   5: 1565058.001 ops/s
# Warmup Iteration   6: 1650231.903 ops/s
# Warmup Iteration   7: 1636680.813 ops/s
# Warmup Iteration   8: 1637010.124 ops/s
# Warmup Iteration   9: 1605238.194 ops/s
# Warmup Iteration  10: 1584523.580 ops/s
# Warmup Iteration  11: 1606618.820 ops/s
# Warmup Iteration  12: 1609993.621 ops/s
# Warmup Iteration  13: 1589552.473 ops/s
# Warmup Iteration  14: 1555488.639 ops/s
# Warmup Iteration  15: 1599258.152 ops/s
# Warmup Iteration  16: 1635903.797 ops/s
# Warmup Iteration  17: 1653527.828 ops/s
# Warmup Iteration  18: 1630849.814 ops/s
# Warmup Iteration  19: 1643324.371 ops/s
# Warmup Iteration  20: 1664255.821 ops/s
# Warmup Iteration  21: 1631775.967 ops/s
# Warmup Iteration  22: 1649367.388 ops/s
# Warmup Iteration  23: 1638681.478 ops/s
# Warmup Iteration  24: 1645945.754 ops/s
# Warmup Iteration  25: 1636463.221 ops/s
# Warmup Iteration  26: 1653253.535 ops/s
# Warmup Iteration  27: 1629083.935 ops/s
# Warmup Iteration  28: 1634202.632 ops/s
# Warmup Iteration  29: 1630690.936 ops/s
# Warmup Iteration  30: 1607394.868 ops/s
Iteration   1: 1633573.058 ops/s
Iteration   2: 1626896.022 ops/s
Iteration   3: 1597579.743 ops/s
Iteration   4: 1621406.695 ops/s
Iteration   5: 1653647.785 ops/s
Iteration   6: 1625158.763 ops/s
Iteration   7: 1572816.627 ops/s
Iteration   8: 1629242.062 ops/s
Iteration   9: 1643461.882 ops/s
Iteration  10: 1653153.672 ops/s
Iteration  11: 1626264.973 ops/s
Iteration  12: 1669998.440 ops/s
Iteration  13: 1667578.796 ops/s
Iteration  14: 1654928.377 ops/s
Iteration  15: 1634015.186 ops/s
Iteration  16: 1640569.863 ops/s
Iteration  17: 1638542.979 ops/s
Iteration  18: 1640108.720 ops/s
Iteration  19: 1633552.809 ops/s
Iteration  20: 1646304.987 ops/s
Iteration  21: 1639399.352 ops/s
Iteration  22: 1655708.913 ops/s
Iteration  23: 1653392.379 ops/s
Iteration  24: 1557625.185 ops/s
Iteration  25: 1601911.944 ops/s
Iteration  26: 1637299.754 ops/s
Iteration  27: 1658410.378 ops/s
Iteration  28: 1591224.109 ops/s
Iteration  29: 1579890.771 ops/s
Iteration  30: 1634383.262 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1630601.583 ±(99.9%) 18465.988 ops/s [Average]
  (min, avg, max) = (1557625.185, 1630601.583, 1669998.440), stdev = 27639.024
  CI (99.9%): [1612135.595, 1649067.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1630601.583 ± 18465.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619692.811 ops/s
# Warmup Iteration   2: 1472747.211 ops/s
# Warmup Iteration   3: 1491185.358 ops/s
# Warmup Iteration   4: 1259292.748 ops/s
# Warmup Iteration   5: 1524245.287 ops/s
# Warmup Iteration   6: 1503125.358 ops/s
# Warmup Iteration   7: 1512912.192 ops/s
# Warmup Iteration   8: 1519411.270 ops/s
# Warmup Iteration   9: 1466392.868 ops/s
# Warmup Iteration  10: 1508450.655 ops/s
# Warmup Iteration  11: 1501496.738 ops/s
# Warmup Iteration  12: 1523200.032 ops/s
# Warmup Iteration  13: 1529070.180 ops/s
# Warmup Iteration  14: 1452961.853 ops/s
# Warmup Iteration  15: 1499287.087 ops/s
# Warmup Iteration  16: 1503790.998 ops/s
# Warmup Iteration  17: 1516922.217 ops/s
# Warmup Iteration  18: 1508588.574 ops/s
# Warmup Iteration  19: 1518426.090 ops/s
# Warmup Iteration  20: 1515161.471 ops/s
# Warmup Iteration  21: 1512934.290 ops/s
# Warmup Iteration  22: 1474922.565 ops/s
# Warmup Iteration  23: 1530635.967 ops/s
# Warmup Iteration  24: 1504032.542 ops/s
# Warmup Iteration  25: 1500246.295 ops/s
# Warmup Iteration  26: 1505284.870 ops/s
# Warmup Iteration  27: 1511099.154 ops/s
# Warmup Iteration  28: 1510934.947 ops/s
# Warmup Iteration  29: 1510722.910 ops/s
# Warmup Iteration  30: 1518872.368 ops/s
Iteration   1: 1528042.138 ops/s
Iteration   2: 1469884.490 ops/s
Iteration   3: 1506515.853 ops/s
Iteration   4: 1516258.818 ops/s
Iteration   5: 1526976.553 ops/s
Iteration   6: 1509564.946 ops/s
Iteration   7: 1510186.143 ops/s
Iteration   8: 1499768.831 ops/s
Iteration   9: 1500433.272 ops/s
Iteration  10: 1490999.974 ops/s
Iteration  11: 1535016.573 ops/s
Iteration  12: 1498557.075 ops/s
Iteration  13: 1464962.963 ops/s
Iteration  14: 1477040.206 ops/s
Iteration  15: 1453106.902 ops/s
Iteration  16: 1472406.014 ops/s
Iteration  17: 1432471.156 ops/s
Iteration  18: 1504016.102 ops/s
Iteration  19: 1500806.590 ops/s
Iteration  20: 1444609.227 ops/s
Iteration  21: 1496248.096 ops/s
Iteration  22: 1492289.763 ops/s
Iteration  23: 1465179.917 ops/s
Iteration  24: 1461603.412 ops/s
Iteration  25: 1532633.329 ops/s
Iteration  26: 1525095.386 ops/s
Iteration  27: 1510665.540 ops/s
Iteration  28: 1454425.792 ops/s
Iteration  29: 1506940.308 ops/s
Iteration  30: 1505594.528 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_toStringOfItemToCount":
  1493076.663 ±(99.9%) 18351.624 ops/s [Average]
  (min, avg, max) = (1432471.156, 1493076.663, 1535016.573), stdev = 27467.849
  CI (99.9%): [1474725.040, 1511428.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  1493076.663 ± 18351.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791837.815 ops/s
# Warmup Iteration   2: 1857504.747 ops/s
# Warmup Iteration   3: 1979767.965 ops/s
# Warmup Iteration   4: 1765496.366 ops/s
# Warmup Iteration   5: 1844331.613 ops/s
# Warmup Iteration   6: 1980790.463 ops/s
# Warmup Iteration   7: 1946666.656 ops/s
# Warmup Iteration   8: 1922503.584 ops/s
# Warmup Iteration   9: 1964116.232 ops/s
# Warmup Iteration  10: 1931860.309 ops/s
# Warmup Iteration  11: 1906411.193 ops/s
# Warmup Iteration  12: 1931181.163 ops/s
# Warmup Iteration  13: 1937951.294 ops/s
# Warmup Iteration  14: 1954124.695 ops/s
# Warmup Iteration  15: 1939866.653 ops/s
# Warmup Iteration  16: 1978131.784 ops/s
# Warmup Iteration  17: 1965219.544 ops/s
# Warmup Iteration  18: 1978410.690 ops/s
# Warmup Iteration  19: 2022256.684 ops/s
# Warmup Iteration  20: 2002230.173 ops/s
# Warmup Iteration  21: 1980203.562 ops/s
# Warmup Iteration  22: 1979079.574 ops/s
# Warmup Iteration  23: 1979879.037 ops/s
# Warmup Iteration  24: 1989462.179 ops/s
# Warmup Iteration  25: 2002851.102 ops/s
# Warmup Iteration  26: 2005252.263 ops/s
# Warmup Iteration  27: 1973441.638 ops/s
# Warmup Iteration  28: 2000347.705 ops/s
# Warmup Iteration  29: 2001357.461 ops/s
# Warmup Iteration  30: 1997245.054 ops/s
Iteration   1: 1973321.525 ops/s
Iteration   2: 1931501.809 ops/s
Iteration   3: 1926382.559 ops/s
Iteration   4: 1932635.450 ops/s
Iteration   5: 1989976.580 ops/s
Iteration   6: 1951516.642 ops/s
Iteration   7: 1994189.460 ops/s
Iteration   8: 1993710.658 ops/s
Iteration   9: 1998076.928 ops/s
Iteration  10: 2006585.116 ops/s
Iteration  11: 2008924.644 ops/s
Iteration  12: 2012572.421 ops/s
Iteration  13: 2014014.628 ops/s
Iteration  14: 2016764.806 ops/s
Iteration  15: 2018900.654 ops/s
Iteration  16: 2013412.427 ops/s
Iteration  17: 2013876.155 ops/s
Iteration  18: 2020260.478 ops/s
Iteration  19: 2012021.431 ops/s
Iteration  20: 2024595.226 ops/s
Iteration  21: 2006587.478 ops/s
Iteration  22: 2026452.270 ops/s
Iteration  23: 2004203.269 ops/s
Iteration  24: 2025337.905 ops/s
Iteration  25: 2023623.718 ops/s
Iteration  26: 2026483.038 ops/s
Iteration  27: 2032525.346 ops/s
Iteration  28: 2035785.499 ops/s
Iteration  29: 2034415.103 ops/s
Iteration  30: 2028828.045 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_topOccurrences":
  2003249.376 ±(99.9%) 20475.292 ops/s [Average]
  (min, avg, max) = (1926382.559, 2003249.376, 2035785.499), stdev = 30646.456
  CI (99.9%): [1982774.083, 2023724.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  2003249.376 ± 20475.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 325271.534 ops/s
# Warmup Iteration   2: 540140.126 ops/s
# Warmup Iteration   3: 632170.785 ops/s
# Warmup Iteration   4: 635898.245 ops/s
# Warmup Iteration   5: 633449.797 ops/s
# Warmup Iteration   6: 627777.180 ops/s
# Warmup Iteration   7: 517302.771 ops/s
# Warmup Iteration   8: 623091.789 ops/s
# Warmup Iteration   9: 627736.368 ops/s
# Warmup Iteration  10: 635774.249 ops/s
# Warmup Iteration  11: 639855.700 ops/s
# Warmup Iteration  12: 635826.550 ops/s
# Warmup Iteration  13: 628088.224 ops/s
# Warmup Iteration  14: 636680.830 ops/s
# Warmup Iteration  15: 639021.999 ops/s
# Warmup Iteration  16: 628598.803 ops/s
# Warmup Iteration  17: 620195.704 ops/s
# Warmup Iteration  18: 630189.491 ops/s
# Warmup Iteration  19: 625727.615 ops/s
# Warmup Iteration  20: 625110.980 ops/s
# Warmup Iteration  21: 639411.181 ops/s
# Warmup Iteration  22: 635418.619 ops/s
# Warmup Iteration  23: 636761.961 ops/s
# Warmup Iteration  24: 632791.612 ops/s
# Warmup Iteration  25: 628750.044 ops/s
# Warmup Iteration  26: 635686.311 ops/s
# Warmup Iteration  27: 637075.360 ops/s
# Warmup Iteration  28: 625909.285 ops/s
# Warmup Iteration  29: 627231.725 ops/s
# Warmup Iteration  30: 629185.892 ops/s
Iteration   1: 625708.094 ops/s
Iteration   2: 624006.439 ops/s
Iteration   3: 629881.309 ops/s
Iteration   4: 607412.472 ops/s
Iteration   5: 631511.517 ops/s
Iteration   6: 639225.940 ops/s
Iteration   7: 640600.659 ops/s
Iteration   8: 631346.521 ops/s
Iteration   9: 639852.573 ops/s
Iteration  10: 635938.694 ops/s
Iteration  11: 642150.024 ops/s
Iteration  12: 618432.383 ops/s
Iteration  13: 622069.096 ops/s
Iteration  14: 600869.597 ops/s
Iteration  15: 633750.572 ops/s
Iteration  16: 642201.668 ops/s
Iteration  17: 638488.635 ops/s
Iteration  18: 628740.532 ops/s
Iteration  19: 625296.480 ops/s
Iteration  20: 619974.400 ops/s
Iteration  21: 630837.996 ops/s
Iteration  22: 630838.271 ops/s
Iteration  23: 639383.250 ops/s
Iteration  24: 635610.866 ops/s
Iteration  25: 633359.237 ops/s
Iteration  26: 640754.020 ops/s
Iteration  27: 636687.324 ops/s
Iteration  28: 636825.268 ops/s
Iteration  29: 631999.247 ops/s
Iteration  30: 632960.807 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_with":
  630890.463 ±(99.9%) 6539.990 ops/s [Average]
  (min, avg, max) = (600869.597, 630890.463, 642201.668), stdev = 9788.751
  CI (99.9%): [624350.473, 637430.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_with  thrpt   30  630890.463 ± 6539.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 290300.679 ops/s
# Warmup Iteration   2: 467547.695 ops/s
# Warmup Iteration   3: 549531.703 ops/s
# Warmup Iteration   4: 556294.303 ops/s
# Warmup Iteration   5: 563417.286 ops/s
# Warmup Iteration   6: 558476.510 ops/s
# Warmup Iteration   7: 462236.294 ops/s
# Warmup Iteration   8: 549925.297 ops/s
# Warmup Iteration   9: 553725.253 ops/s
# Warmup Iteration  10: 539369.005 ops/s
# Warmup Iteration  11: 564548.018 ops/s
# Warmup Iteration  12: 553083.365 ops/s
# Warmup Iteration  13: 544174.549 ops/s
# Warmup Iteration  14: 559909.268 ops/s
# Warmup Iteration  15: 560180.515 ops/s
# Warmup Iteration  16: 556949.417 ops/s
# Warmup Iteration  17: 554065.856 ops/s
# Warmup Iteration  18: 563368.357 ops/s
# Warmup Iteration  19: 560095.577 ops/s
# Warmup Iteration  20: 558607.821 ops/s
# Warmup Iteration  21: 556723.623 ops/s
# Warmup Iteration  22: 550525.588 ops/s
# Warmup Iteration  23: 546451.696 ops/s
# Warmup Iteration  24: 551371.223 ops/s
# Warmup Iteration  25: 560491.014 ops/s
# Warmup Iteration  26: 559684.084 ops/s
# Warmup Iteration  27: 558729.525 ops/s
# Warmup Iteration  28: 546096.398 ops/s
# Warmup Iteration  29: 547234.980 ops/s
# Warmup Iteration  30: 549226.737 ops/s
Iteration   1: 554715.165 ops/s
Iteration   2: 549063.733 ops/s
Iteration   3: 552291.030 ops/s
Iteration   4: 549096.274 ops/s
Iteration   5: 551098.389 ops/s
Iteration   6: 545360.322 ops/s
Iteration   7: 550110.747 ops/s
Iteration   8: 552267.657 ops/s
Iteration   9: 550853.246 ops/s
Iteration  10: 551855.420 ops/s
Iteration  11: 564469.822 ops/s
Iteration  12: 564097.335 ops/s
Iteration  13: 564424.302 ops/s
Iteration  14: 552395.774 ops/s
Iteration  15: 555650.451 ops/s
Iteration  16: 564212.829 ops/s
Iteration  17: 561441.254 ops/s
Iteration  18: 561371.330 ops/s
Iteration  19: 558521.970 ops/s
Iteration  20: 560803.670 ops/s
Iteration  21: 559492.419 ops/s
Iteration  22: 563479.198 ops/s
Iteration  23: 559720.311 ops/s
Iteration  24: 566146.184 ops/s
Iteration  25: 554172.761 ops/s
Iteration  26: 551767.515 ops/s
Iteration  27: 563300.072 ops/s
Iteration  28: 561061.499 ops/s
Iteration  29: 555546.215 ops/s
Iteration  30: 550098.705 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withAll":
  556629.520 ±(99.9%) 3973.284 ops/s [Average]
  (min, avg, max) = (545360.322, 556629.520, 566146.184), stdev = 5947.025
  CI (99.9%): [552656.236, 560602.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_withAll  thrpt   30  556629.520 ± 3973.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withReadLockAndDelegate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withReadLockAndDelegate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 254209.393 ops/s
# Warmup Iteration   2: 286171.622 ops/s
# Warmup Iteration   3: 349807.500 ops/s
# Warmup Iteration   4: 359540.119 ops/s
# Warmup Iteration   5: 363746.891 ops/s
# Warmup Iteration   6: 365907.914 ops/s
# Warmup Iteration   7: 368360.439 ops/s
# Warmup Iteration   8: 366208.685 ops/s
# Warmup Iteration   9: 358034.723 ops/s
# Warmup Iteration  10: 353737.448 ops/s
# Warmup Iteration  11: 368349.364 ops/s
# Warmup Iteration  12: 367490.334 ops/s
# Warmup Iteration  13: 297487.272 ops/s
# Warmup Iteration  14: 352218.195 ops/s
# Warmup Iteration  15: 363238.844 ops/s
# Warmup Iteration  16: 371458.404 ops/s
# Warmup Iteration  17: 388718.154 ops/s
# Warmup Iteration  18: 384789.250 ops/s
# Warmup Iteration  19: 386702.314 ops/s
# Warmup Iteration  20: 384795.869 ops/s
# Warmup Iteration  21: 385543.632 ops/s
# Warmup Iteration  22: 387079.719 ops/s
# Warmup Iteration  23: 386888.322 ops/s
# Warmup Iteration  24: 386387.787 ops/s
# Warmup Iteration  25: 383827.523 ops/s
# Warmup Iteration  26: 387219.879 ops/s
# Warmup Iteration  27: 383109.805 ops/s
# Warmup Iteration  28: 371872.128 ops/s
# Warmup Iteration  29: 385355.345 ops/s
# Warmup Iteration  30: 380905.051 ops/s
Iteration   1: 349229.404 ops/s
Iteration   2: 385285.037 ops/s
Iteration   3: 387117.905 ops/s
Iteration   4: 388840.719 ops/s
Iteration   5: 384266.871 ops/s
Iteration   6: 381502.838 ops/s
Iteration   7: 378303.384 ops/s
Iteration   8: 380161.723 ops/s
Iteration   9: 378369.720 ops/s
Iteration  10: 386077.819 ops/s
Iteration  11: 381769.006 ops/s
Iteration  12: 386116.247 ops/s
Iteration  13: 385423.354 ops/s
Iteration  14: 386796.051 ops/s
Iteration  15: 384020.678 ops/s
Iteration  16: 385763.766 ops/s
Iteration  17: 385589.030 ops/s
Iteration  18: 388580.985 ops/s
Iteration  19: 385464.068 ops/s
Iteration  20: 381054.898 ops/s
Iteration  21: 381093.241 ops/s
Iteration  22: 376131.865 ops/s
Iteration  23: 374539.957 ops/s
Iteration  24: 378693.728 ops/s
Iteration  25: 388532.672 ops/s
Iteration  26: 385316.900 ops/s
Iteration  27: 386960.680 ops/s
Iteration  28: 385829.413 ops/s
Iteration  29: 384089.022 ops/s
Iteration  30: 385138.917 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withReadLockAndDelegate":
  382535.330 ±(99.9%) 4883.502 ops/s [Average]
  (min, avg, max) = (349229.404, 382535.330, 388840.719), stdev = 7309.397
  CI (99.9%): [377651.828, 387418.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_withReadLockAndDelegate  thrpt   30  382535.330 ± 4883.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withWriteLockAndDelegate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withWriteLockAndDelegate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119511.937 ops/s
# Warmup Iteration   2: 132884.972 ops/s
# Warmup Iteration   3: 132137.450 ops/s
# Warmup Iteration   4: 133807.060 ops/s
# Warmup Iteration   5: 137744.493 ops/s
# Warmup Iteration   6: 150781.945 ops/s
# Warmup Iteration   7: 147381.028 ops/s
# Warmup Iteration   8: 144376.764 ops/s
# Warmup Iteration   9: 148285.452 ops/s
# Warmup Iteration  10: 145886.520 ops/s
# Warmup Iteration  11: 146584.053 ops/s
# Warmup Iteration  12: 144813.915 ops/s
# Warmup Iteration  13: 146685.582 ops/s
# Warmup Iteration  14: 150090.075 ops/s
# Warmup Iteration  15: 149153.190 ops/s
# Warmup Iteration  16: 150528.318 ops/s
# Warmup Iteration  17: 151569.232 ops/s
# Warmup Iteration  18: 148975.886 ops/s
# Warmup Iteration  19: 148658.625 ops/s
# Warmup Iteration  20: 150728.644 ops/s
# Warmup Iteration  21: 151643.291 ops/s
# Warmup Iteration  22: 145127.960 ops/s
# Warmup Iteration  23: 147591.168 ops/s
# Warmup Iteration  24: 146631.604 ops/s
# Warmup Iteration  25: 145789.420 ops/s
# Warmup Iteration  26: 144890.729 ops/s
# Warmup Iteration  27: 143150.185 ops/s
# Warmup Iteration  28: 147924.073 ops/s
# Warmup Iteration  29: 146841.455 ops/s
# Warmup Iteration  30: 148464.804 ops/s
Iteration   1: 139630.322 ops/s
Iteration   2: 135172.273 ops/s
Iteration   3: 135535.656 ops/s
Iteration   4: 143669.206 ops/s
Iteration   5: 152998.290 ops/s
Iteration   6: 152048.431 ops/s
Iteration   7: 150957.604 ops/s
Iteration   8: 143639.486 ops/s
Iteration   9: 141952.212 ops/s
Iteration  10: 152669.455 ops/s
Iteration  11: 151000.357 ops/s
Iteration  12: 150133.286 ops/s
Iteration  13: 150986.325 ops/s
Iteration  14: 150501.739 ops/s
Iteration  15: 149976.089 ops/s
Iteration  16: 151591.763 ops/s
Iteration  17: 149537.252 ops/s
Iteration  18: 151484.401 ops/s
Iteration  19: 151106.835 ops/s
Iteration  20: 151051.554 ops/s
Iteration  21: 149694.896 ops/s
Iteration  22: 150584.054 ops/s
Iteration  23: 148721.752 ops/s
Iteration  24: 149669.184 ops/s
Iteration  25: 150090.011 ops/s
Iteration  26: 151164.003 ops/s
Iteration  27: 148454.993 ops/s
Iteration  28: 151692.823 ops/s
Iteration  29: 151505.790 ops/s
Iteration  30: 151068.911 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withWriteLockAndDelegate":
  148609.632 ±(99.9%) 3203.857 ops/s [Average]
  (min, avg, max) = (135172.273, 148609.632, 152998.290), stdev = 4795.382
  CI (99.9%): [145405.775, 151813.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_withWriteLockAndDelegate  thrpt   30  148609.632 ± 3203.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 340708.419 ops/s
# Warmup Iteration   2: 541154.677 ops/s
# Warmup Iteration   3: 632017.819 ops/s
# Warmup Iteration   4: 644947.309 ops/s
# Warmup Iteration   5: 630608.582 ops/s
# Warmup Iteration   6: 632594.453 ops/s
# Warmup Iteration   7: 526966.795 ops/s
# Warmup Iteration   8: 632355.591 ops/s
# Warmup Iteration   9: 637700.310 ops/s
# Warmup Iteration  10: 632262.636 ops/s
# Warmup Iteration  11: 639808.219 ops/s
# Warmup Iteration  12: 638519.640 ops/s
# Warmup Iteration  13: 629005.410 ops/s
# Warmup Iteration  14: 639823.891 ops/s
# Warmup Iteration  15: 636857.588 ops/s
# Warmup Iteration  16: 637323.567 ops/s
# Warmup Iteration  17: 648443.883 ops/s
# Warmup Iteration  18: 647956.988 ops/s
# Warmup Iteration  19: 643519.833 ops/s
# Warmup Iteration  20: 643276.109 ops/s
# Warmup Iteration  21: 631547.057 ops/s
# Warmup Iteration  22: 637674.860 ops/s
# Warmup Iteration  23: 642237.335 ops/s
# Warmup Iteration  24: 632821.213 ops/s
# Warmup Iteration  25: 643366.618 ops/s
# Warmup Iteration  26: 591013.455 ops/s
# Warmup Iteration  27: 630321.281 ops/s
# Warmup Iteration  28: 638564.799 ops/s
# Warmup Iteration  29: 629832.912 ops/s
# Warmup Iteration  30: 626463.043 ops/s
Iteration   1: 627366.410 ops/s
Iteration   2: 644174.653 ops/s
Iteration   3: 647075.586 ops/s
Iteration   4: 631634.336 ops/s
Iteration   5: 621241.997 ops/s
Iteration   6: 618949.465 ops/s
Iteration   7: 615922.158 ops/s
Iteration   8: 626747.883 ops/s
Iteration   9: 632628.845 ops/s
Iteration  10: 636349.066 ops/s
Iteration  11: 635708.157 ops/s
Iteration  12: 621332.737 ops/s
Iteration  13: 632611.291 ops/s
Iteration  14: 631607.815 ops/s
Iteration  15: 636364.766 ops/s
Iteration  16: 626112.505 ops/s
Iteration  17: 640421.687 ops/s
Iteration  18: 642079.753 ops/s
Iteration  19: 648941.325 ops/s
Iteration  20: 640499.225 ops/s
Iteration  21: 639380.738 ops/s
Iteration  22: 630128.100 ops/s
Iteration  23: 630436.443 ops/s
Iteration  24: 640173.700 ops/s
Iteration  25: 634025.313 ops/s
Iteration  26: 630609.138 ops/s
Iteration  27: 625324.543 ops/s
Iteration  28: 626079.389 ops/s
Iteration  29: 632658.021 ops/s
Iteration  30: 622838.069 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_without":
  632314.104 ±(99.9%) 5543.373 ops/s [Average]
  (min, avg, max) = (615922.158, 632314.104, 648941.325), stdev = 8297.060
  CI (99.9%): [626770.731, 637857.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_without  thrpt   30  632314.104 ± 5543.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375498.456 ops/s
# Warmup Iteration   2: 606045.931 ops/s
# Warmup Iteration   3: 719531.041 ops/s
# Warmup Iteration   4: 706106.839 ops/s
# Warmup Iteration   5: 699544.505 ops/s
# Warmup Iteration   6: 703852.496 ops/s
# Warmup Iteration   7: 574638.259 ops/s
# Warmup Iteration   8: 702947.004 ops/s
# Warmup Iteration   9: 718566.217 ops/s
# Warmup Iteration  10: 709959.971 ops/s
# Warmup Iteration  11: 701372.679 ops/s
# Warmup Iteration  12: 723712.313 ops/s
# Warmup Iteration  13: 726191.599 ops/s
# Warmup Iteration  14: 721584.325 ops/s
# Warmup Iteration  15: 732157.704 ops/s
# Warmup Iteration  16: 739715.750 ops/s
# Warmup Iteration  17: 726387.720 ops/s
# Warmup Iteration  18: 725845.589 ops/s
# Warmup Iteration  19: 690618.874 ops/s
# Warmup Iteration  20: 709213.150 ops/s
# Warmup Iteration  21: 716381.890 ops/s
# Warmup Iteration  22: 724165.168 ops/s
# Warmup Iteration  23: 707784.795 ops/s
# Warmup Iteration  24: 717460.144 ops/s
# Warmup Iteration  25: 715565.904 ops/s
# Warmup Iteration  26: 714264.735 ops/s
# Warmup Iteration  27: 727677.844 ops/s
# Warmup Iteration  28: 696325.355 ops/s
# Warmup Iteration  29: 710415.739 ops/s
# Warmup Iteration  30: 689150.296 ops/s
Iteration   1: 717766.408 ops/s
Iteration   2: 697677.573 ops/s
Iteration   3: 701627.334 ops/s
Iteration   4: 724117.650 ops/s
Iteration   5: 718718.340 ops/s
Iteration   6: 723913.407 ops/s
Iteration   7: 739428.915 ops/s
Iteration   8: 731837.791 ops/s
Iteration   9: 718856.627 ops/s
Iteration  10: 735309.006 ops/s
Iteration  11: 724542.659 ops/s
Iteration  12: 737580.406 ops/s
Iteration  13: 723125.046 ops/s
Iteration  14: 695670.329 ops/s
Iteration  15: 677594.602 ops/s
Iteration  16: 730071.095 ops/s
Iteration  17: 723708.329 ops/s
Iteration  18: 720603.311 ops/s
Iteration  19: 718723.919 ops/s
Iteration  20: 723029.995 ops/s
Iteration  21: 719075.364 ops/s
Iteration  22: 727087.322 ops/s
Iteration  23: 733508.403 ops/s
Iteration  24: 724037.103 ops/s
Iteration  25: 728792.139 ops/s
Iteration  26: 722775.315 ops/s
Iteration  27: 704975.205 ops/s
Iteration  28: 732428.935 ops/s
Iteration  29: 731428.635 ops/s
Iteration  30: 723530.937 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_withoutAll":
  721051.403 ±(99.9%) 9039.780 ops/s [Average]
  (min, avg, max) = (677594.602, 721051.403, 739428.915), stdev = 13530.318
  CI (99.9%): [712011.623, 730091.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_withoutAll  thrpt   30  721051.403 ± 9039.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98876.645 ops/s
# Warmup Iteration   2: 116290.750 ops/s
# Warmup Iteration   3: 162287.415 ops/s
# Warmup Iteration   4: 163114.552 ops/s
# Warmup Iteration   5: 162661.366 ops/s
# Warmup Iteration   6: 156249.443 ops/s
# Warmup Iteration   7: 159097.626 ops/s
# Warmup Iteration   8: 156419.952 ops/s
# Warmup Iteration   9: 158321.036 ops/s
# Warmup Iteration  10: 144985.923 ops/s
# Warmup Iteration  11: 142567.920 ops/s
# Warmup Iteration  12: 157411.728 ops/s
# Warmup Iteration  13: 159593.662 ops/s
# Warmup Iteration  14: 161189.950 ops/s
# Warmup Iteration  15: 161401.336 ops/s
# Warmup Iteration  16: 161548.925 ops/s
# Warmup Iteration  17: 164158.839 ops/s
# Warmup Iteration  18: 163637.896 ops/s
# Warmup Iteration  19: 165615.491 ops/s
# Warmup Iteration  20: 163856.221 ops/s
# Warmup Iteration  21: 163012.784 ops/s
# Warmup Iteration  22: 163838.506 ops/s
# Warmup Iteration  23: 163420.414 ops/s
# Warmup Iteration  24: 163978.438 ops/s
# Warmup Iteration  25: 158021.724 ops/s
# Warmup Iteration  26: 163545.888 ops/s
# Warmup Iteration  27: 163583.459 ops/s
# Warmup Iteration  28: 163641.860 ops/s
# Warmup Iteration  29: 164908.871 ops/s
# Warmup Iteration  30: 165143.272 ops/s
Iteration   1: 166035.712 ops/s
Iteration   2: 158130.798 ops/s
Iteration   3: 163281.852 ops/s
Iteration   4: 161626.097 ops/s
Iteration   5: 162508.197 ops/s
Iteration   6: 162907.489 ops/s
Iteration   7: 163264.263 ops/s
Iteration   8: 165797.268 ops/s
Iteration   9: 157930.973 ops/s
Iteration  10: 157625.417 ops/s
Iteration  11: 163242.493 ops/s
Iteration  12: 162041.945 ops/s
Iteration  13: 165375.069 ops/s
Iteration  14: 164952.523 ops/s
Iteration  15: 162999.774 ops/s
Iteration  16: 163627.873 ops/s
Iteration  17: 165490.024 ops/s
Iteration  18: 166333.791 ops/s
Iteration  19: 164807.889 ops/s
Iteration  20: 163175.995 ops/s
Iteration  21: 163158.715 ops/s
Iteration  22: 164708.500 ops/s
Iteration  23: 163235.368 ops/s
Iteration  24: 162203.122 ops/s
Iteration  25: 162957.612 ops/s
Iteration  26: 163494.858 ops/s
Iteration  27: 161936.237 ops/s
Iteration  28: 164699.725 ops/s
Iteration  29: 162530.867 ops/s
Iteration  30: 164285.237 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zip":
  163145.523 ±(99.9%) 1458.465 ops/s [Average]
  (min, avg, max) = (157625.417, 163145.523, 166333.791), stdev = 2182.962
  CI (99.9%): [161687.057, 164603.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_zip  thrpt   30  163145.523 ± 1458.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267316.338 ops/s
# Warmup Iteration   2: 399081.852 ops/s
# Warmup Iteration   3: 496325.999 ops/s
# Warmup Iteration   4: 497200.873 ops/s
# Warmup Iteration   5: 500885.042 ops/s
# Warmup Iteration   6: 482061.306 ops/s
# Warmup Iteration   7: 396383.457 ops/s
# Warmup Iteration   8: 483704.000 ops/s
# Warmup Iteration   9: 479363.481 ops/s
# Warmup Iteration  10: 499178.725 ops/s
# Warmup Iteration  11: 493672.835 ops/s
# Warmup Iteration  12: 483659.381 ops/s
# Warmup Iteration  13: 475834.012 ops/s
# Warmup Iteration  14: 492714.841 ops/s
# Warmup Iteration  15: 499813.553 ops/s
# Warmup Iteration  16: 477351.181 ops/s
# Warmup Iteration  17: 488241.744 ops/s
# Warmup Iteration  18: 494401.899 ops/s
# Warmup Iteration  19: 498048.647 ops/s
# Warmup Iteration  20: 501180.874 ops/s
# Warmup Iteration  21: 503726.622 ops/s
# Warmup Iteration  22: 490027.876 ops/s
# Warmup Iteration  23: 496076.950 ops/s
# Warmup Iteration  24: 497686.472 ops/s
# Warmup Iteration  25: 494779.097 ops/s
# Warmup Iteration  26: 485992.385 ops/s
# Warmup Iteration  27: 488792.866 ops/s
# Warmup Iteration  28: 500175.037 ops/s
# Warmup Iteration  29: 491811.438 ops/s
# Warmup Iteration  30: 500725.737 ops/s
Iteration   1: 480702.007 ops/s
Iteration   2: 503960.503 ops/s
Iteration   3: 484854.485 ops/s
Iteration   4: 478341.726 ops/s
Iteration   5: 500079.572 ops/s
Iteration   6: 498223.938 ops/s
Iteration   7: 484244.488 ops/s
Iteration   8: 493829.064 ops/s
Iteration   9: 495251.534 ops/s
Iteration  10: 504165.079 ops/s
Iteration  11: 500656.990 ops/s
Iteration  12: 495228.995 ops/s
Iteration  13: 498056.883 ops/s
Iteration  14: 499257.699 ops/s
Iteration  15: 481376.120 ops/s
Iteration  16: 485991.022 ops/s
Iteration  17: 480701.598 ops/s
Iteration  18: 480637.624 ops/s
Iteration  19: 486836.746 ops/s
Iteration  20: 478766.765 ops/s
Iteration  21: 491274.189 ops/s
Iteration  22: 491724.181 ops/s
Iteration  23: 499359.149 ops/s
Iteration  24: 500868.229 ops/s
Iteration  25: 497188.383 ops/s
Iteration  26: 496932.712 ops/s
Iteration  27: 475190.040 ops/s
Iteration  28: 482162.475 ops/s
Iteration  29: 495041.430 ops/s
Iteration  30: 470886.618 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagTest._Benchmark.benchmark_zipWithIndex":
  490393.008 ±(99.9%) 6275.035 ops/s [Average]
  (min, avg, max) = (470886.618, 490393.008, 504165.079), stdev = 9392.178
  CI (99.9%): [484117.973, 496668.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  490393.008 ± 6275.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7764809.764 ops/s
# Warmup Iteration   2: 14267284.290 ops/s
# Warmup Iteration   3: 12162339.366 ops/s
# Warmup Iteration   4: 14747011.833 ops/s
# Warmup Iteration   5: 14432613.435 ops/s
# Warmup Iteration   6: 14687810.255 ops/s
# Warmup Iteration   7: 14683806.185 ops/s
# Warmup Iteration   8: 14406817.033 ops/s
# Warmup Iteration   9: 14540674.750 ops/s
# Warmup Iteration  10: 14328170.706 ops/s
# Warmup Iteration  11: 14183745.586 ops/s
# Warmup Iteration  12: 14545488.223 ops/s
# Warmup Iteration  13: 14706471.814 ops/s
# Warmup Iteration  14: 14627867.396 ops/s
# Warmup Iteration  15: 14632584.880 ops/s
# Warmup Iteration  16: 14344098.905 ops/s
# Warmup Iteration  17: 14301364.398 ops/s
# Warmup Iteration  18: 14715271.820 ops/s
# Warmup Iteration  19: 14605079.460 ops/s
# Warmup Iteration  20: 14365598.793 ops/s
# Warmup Iteration  21: 14878586.204 ops/s
# Warmup Iteration  22: 14521115.123 ops/s
# Warmup Iteration  23: 14454535.059 ops/s
# Warmup Iteration  24: 14416926.358 ops/s
# Warmup Iteration  25: 14758043.708 ops/s
# Warmup Iteration  26: 14747237.342 ops/s
# Warmup Iteration  27: 14678137.573 ops/s
# Warmup Iteration  28: 14609148.565 ops/s
# Warmup Iteration  29: 14582335.352 ops/s
# Warmup Iteration  30: 14645874.257 ops/s
Iteration   1: 14882795.882 ops/s
Iteration   2: 14844758.443 ops/s
Iteration   3: 14830651.846 ops/s
Iteration   4: 14832653.459 ops/s
Iteration   5: 14421417.865 ops/s
Iteration   6: 14428340.938 ops/s
Iteration   7: 14190797.705 ops/s
Iteration   8: 14610934.501 ops/s
Iteration   9: 14673939.726 ops/s
Iteration  10: 14556293.496 ops/s
Iteration  11: 14744395.977 ops/s
Iteration  12: 14686065.693 ops/s
Iteration  13: 14509178.135 ops/s
Iteration  14: 14340434.442 ops/s
Iteration  15: 14649693.591 ops/s
Iteration  16: 14728212.431 ops/s
Iteration  17: 14578484.568 ops/s
Iteration  18: 14693313.051 ops/s
Iteration  19: 14551918.016 ops/s
Iteration  20: 14684734.392 ops/s
Iteration  21: 14207522.234 ops/s
Iteration  22: 14541373.401 ops/s
Iteration  23: 14759851.878 ops/s
Iteration  24: 14278518.501 ops/s
Iteration  25: 14288005.295 ops/s
Iteration  26: 14167332.320 ops/s
Iteration  27: 14006688.245 ops/s
Iteration  28: 14797744.566 ops/s
Iteration  29: 14579060.150 ops/s
Iteration  30: 14659978.295 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_add":
  14557502.968 ±(99.9%) 153804.074 ops/s [Average]
  (min, avg, max) = (14006688.245, 14557502.968, 14882795.882), stdev = 230206.715
  CI (99.9%): [14403698.894, 14711307.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_add  thrpt   30  14557502.968 ± 153804.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12648668.641 ops/s
# Warmup Iteration   2: 22561787.402 ops/s
# Warmup Iteration   3: 21597451.777 ops/s
# Warmup Iteration   4: 23965806.428 ops/s
# Warmup Iteration   5: 23464919.069 ops/s
# Warmup Iteration   6: 24189502.781 ops/s
# Warmup Iteration   7: 23939241.132 ops/s
# Warmup Iteration   8: 23246912.081 ops/s
# Warmup Iteration   9: 23963693.720 ops/s
# Warmup Iteration  10: 24246003.159 ops/s
# Warmup Iteration  11: 24067856.323 ops/s
# Warmup Iteration  12: 23797619.081 ops/s
# Warmup Iteration  13: 23817826.668 ops/s
# Warmup Iteration  14: 24196187.826 ops/s
# Warmup Iteration  15: 23950918.222 ops/s
# Warmup Iteration  16: 23168027.448 ops/s
# Warmup Iteration  17: 24194634.363 ops/s
# Warmup Iteration  18: 23371252.856 ops/s
# Warmup Iteration  19: 24189689.515 ops/s
# Warmup Iteration  20: 24224898.045 ops/s
# Warmup Iteration  21: 23972412.266 ops/s
# Warmup Iteration  22: 23658817.154 ops/s
# Warmup Iteration  23: 24049944.530 ops/s
# Warmup Iteration  24: 24057015.048 ops/s
# Warmup Iteration  25: 24254284.776 ops/s
# Warmup Iteration  26: 24032114.422 ops/s
# Warmup Iteration  27: 23258960.931 ops/s
# Warmup Iteration  28: 23375598.685 ops/s
# Warmup Iteration  29: 23331756.011 ops/s
# Warmup Iteration  30: 23344466.276 ops/s
Iteration   1: 23613543.915 ops/s
Iteration   2: 23646553.319 ops/s
Iteration   3: 23383607.746 ops/s
Iteration   4: 23145118.666 ops/s
Iteration   5: 24143375.635 ops/s
Iteration   6: 22614863.686 ops/s
Iteration   7: 23333860.884 ops/s
Iteration   8: 24101533.035 ops/s
Iteration   9: 24080373.848 ops/s
Iteration  10: 23090968.795 ops/s
Iteration  11: 23872081.372 ops/s
Iteration  12: 24116719.698 ops/s
Iteration  13: 23905085.278 ops/s
Iteration  14: 24427885.274 ops/s
Iteration  15: 24134776.973 ops/s
Iteration  16: 24109135.047 ops/s
Iteration  17: 24014568.269 ops/s
Iteration  18: 23953052.294 ops/s
Iteration  19: 24144662.260 ops/s
Iteration  20: 23611965.056 ops/s
Iteration  21: 23950537.108 ops/s
Iteration  22: 24192289.157 ops/s
Iteration  23: 23749627.605 ops/s
Iteration  24: 23969018.641 ops/s
Iteration  25: 23684664.631 ops/s
Iteration  26: 24153101.897 ops/s
Iteration  27: 24250419.471 ops/s
Iteration  28: 24222028.341 ops/s
Iteration  29: 24441337.946 ops/s
Iteration  30: 24391829.484 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllArray":
  23881619.511 ±(99.9%) 285699.725 ops/s [Average]
  (min, avg, max) = (22614863.686, 23881619.511, 24441337.946), stdev = 427621.931
  CI (99.9%): [23595919.786, 24167319.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_addAllArray  thrpt   30  23881619.511 ± 285699.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3315045.021 ops/s
# Warmup Iteration   2: 7687404.847 ops/s
# Warmup Iteration   3: 6376262.121 ops/s
# Warmup Iteration   4: 7717568.165 ops/s
# Warmup Iteration   5: 7754683.001 ops/s
# Warmup Iteration   6: 7751048.708 ops/s
# Warmup Iteration   7: 7716497.179 ops/s
# Warmup Iteration   8: 7743541.541 ops/s
# Warmup Iteration   9: 7708044.375 ops/s
# Warmup Iteration  10: 7699465.385 ops/s
# Warmup Iteration  11: 7735783.168 ops/s
# Warmup Iteration  12: 7680473.888 ops/s
# Warmup Iteration  13: 7633622.802 ops/s
# Warmup Iteration  14: 7525705.200 ops/s
# Warmup Iteration  15: 7522387.088 ops/s
# Warmup Iteration  16: 7759307.362 ops/s
# Warmup Iteration  17: 7706089.786 ops/s
# Warmup Iteration  18: 7739396.395 ops/s
# Warmup Iteration  19: 7708471.471 ops/s
# Warmup Iteration  20: 7714421.887 ops/s
# Warmup Iteration  21: 7675889.170 ops/s
# Warmup Iteration  22: 7731005.627 ops/s
# Warmup Iteration  23: 7812204.423 ops/s
# Warmup Iteration  24: 7759201.530 ops/s
# Warmup Iteration  25: 7732626.830 ops/s
# Warmup Iteration  26: 7773291.866 ops/s
# Warmup Iteration  27: 7736802.988 ops/s
# Warmup Iteration  28: 7650047.848 ops/s
# Warmup Iteration  29: 7656527.693 ops/s
# Warmup Iteration  30: 7638845.251 ops/s
Iteration   1: 7743148.056 ops/s
Iteration   2: 7706489.873 ops/s
Iteration   3: 7740096.751 ops/s
Iteration   4: 7505912.755 ops/s
Iteration   5: 7686642.629 ops/s
Iteration   6: 7455027.437 ops/s
Iteration   7: 7470106.226 ops/s
Iteration   8: 7727887.821 ops/s
Iteration   9: 7496572.864 ops/s
Iteration  10: 7763577.578 ops/s
Iteration  11: 7688854.238 ops/s
Iteration  12: 7740022.755 ops/s
Iteration  13: 7727745.942 ops/s
Iteration  14: 7648655.502 ops/s
Iteration  15: 7679275.885 ops/s
Iteration  16: 7796849.046 ops/s
Iteration  17: 7759805.135 ops/s
Iteration  18: 7776657.447 ops/s
Iteration  19: 7832886.833 ops/s
Iteration  20: 7749388.355 ops/s
Iteration  21: 7800831.172 ops/s
Iteration  22: 7789716.439 ops/s
Iteration  23: 7754793.154 ops/s
Iteration  24: 7775973.148 ops/s
Iteration  25: 7819385.991 ops/s
Iteration  26: 7699808.198 ops/s
Iteration  27: 7692388.510 ops/s
Iteration  28: 7741309.086 ops/s
Iteration  29: 7749174.678 ops/s
Iteration  30: 7813568.542 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addAllIterable":
  7711085.068 ±(99.9%) 67903.000 ops/s [Average]
  (min, avg, max) = (7455027.437, 7711085.068, 7832886.833), stdev = 101634.021
  CI (99.9%): [7643182.068, 7778988.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  7711085.068 ± 67903.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8749645.813 ops/s
# Warmup Iteration   2: 16521365.687 ops/s
# Warmup Iteration   3: 13847085.200 ops/s
# Warmup Iteration   4: 16386280.908 ops/s
# Warmup Iteration   5: 16412137.397 ops/s
# Warmup Iteration   6: 16462570.547 ops/s
# Warmup Iteration   7: 16494005.033 ops/s
# Warmup Iteration   8: 16492668.397 ops/s
# Warmup Iteration   9: 16558689.470 ops/s
# Warmup Iteration  10: 16455189.889 ops/s
# Warmup Iteration  11: 16398122.325 ops/s
# Warmup Iteration  12: 16543784.288 ops/s
# Warmup Iteration  13: 16642140.451 ops/s
# Warmup Iteration  14: 16389719.477 ops/s
# Warmup Iteration  15: 16359031.989 ops/s
# Warmup Iteration  16: 16117386.436 ops/s
# Warmup Iteration  17: 15915667.233 ops/s
# Warmup Iteration  18: 16376983.062 ops/s
# Warmup Iteration  19: 16548966.912 ops/s
# Warmup Iteration  20: 16379221.935 ops/s
# Warmup Iteration  21: 16600663.797 ops/s
# Warmup Iteration  22: 16589955.993 ops/s
# Warmup Iteration  23: 16272503.106 ops/s
# Warmup Iteration  24: 16564774.617 ops/s
# Warmup Iteration  25: 16412357.343 ops/s
# Warmup Iteration  26: 16463762.769 ops/s
# Warmup Iteration  27: 16126428.059 ops/s
# Warmup Iteration  28: 16370200.923 ops/s
# Warmup Iteration  29: 16386912.392 ops/s
# Warmup Iteration  30: 16228124.740 ops/s
Iteration   1: 16163673.412 ops/s
Iteration   2: 16296133.248 ops/s
Iteration   3: 16191811.628 ops/s
Iteration   4: 16479175.057 ops/s
Iteration   5: 16368884.135 ops/s
Iteration   6: 16482925.899 ops/s
Iteration   7: 16430187.551 ops/s
Iteration   8: 16460926.495 ops/s
Iteration   9: 16286888.404 ops/s
Iteration  10: 16306964.887 ops/s
Iteration  11: 16495140.128 ops/s
Iteration  12: 16422544.916 ops/s
Iteration  13: 16068549.486 ops/s
Iteration  14: 16319162.323 ops/s
Iteration  15: 16444894.086 ops/s
Iteration  16: 16042193.342 ops/s
Iteration  17: 16236832.136 ops/s
Iteration  18: 16686746.852 ops/s
Iteration  19: 16470338.985 ops/s
Iteration  20: 16276976.773 ops/s
Iteration  21: 16194864.035 ops/s
Iteration  22: 16358384.880 ops/s
Iteration  23: 16425097.241 ops/s
Iteration  24: 16408928.812 ops/s
Iteration  25: 16377716.704 ops/s
Iteration  26: 16175422.345 ops/s
Iteration  27: 15672651.819 ops/s
Iteration  28: 15664053.682 ops/s
Iteration  29: 16169085.233 ops/s
Iteration  30: 15925824.002 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences":
  16276765.950 ±(99.9%) 153147.447 ops/s [Average]
  (min, avg, max) = (15664053.682, 16276765.950, 16686746.852), stdev = 229223.907
  CI (99.9%): [16123618.502, 16429913.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  16276765.950 ± 153147.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 836341.237 ops/s
# Warmup Iteration   2: 861974.393 ops/s
# Warmup Iteration   3: 997123.537 ops/s
# Warmup Iteration   4: 1105465.611 ops/s
# Warmup Iteration   5: 1097855.973 ops/s
# Warmup Iteration   6: 1101593.233 ops/s
# Warmup Iteration   7: 1060408.661 ops/s
# Warmup Iteration   8: 1058183.601 ops/s
# Warmup Iteration   9: 1098790.874 ops/s
# Warmup Iteration  10: 1070320.563 ops/s
# Warmup Iteration  11: 1085710.708 ops/s
# Warmup Iteration  12: 1096272.676 ops/s
# Warmup Iteration  13: 1104185.728 ops/s
# Warmup Iteration  14: 936277.075 ops/s
# Warmup Iteration  15: 1112753.920 ops/s
# Warmup Iteration  16: 1113055.490 ops/s
# Warmup Iteration  17: 1184477.953 ops/s
# Warmup Iteration  18: 1183941.680 ops/s
# Warmup Iteration  19: 1176310.901 ops/s
# Warmup Iteration  20: 1166100.232 ops/s
# Warmup Iteration  21: 1172005.934 ops/s
# Warmup Iteration  22: 1154537.319 ops/s
# Warmup Iteration  23: 1166193.174 ops/s
# Warmup Iteration  24: 1170209.363 ops/s
# Warmup Iteration  25: 1175179.763 ops/s
# Warmup Iteration  26: 1158696.835 ops/s
# Warmup Iteration  27: 1144142.229 ops/s
# Warmup Iteration  28: 1121132.858 ops/s
# Warmup Iteration  29: 1161637.209 ops/s
# Warmup Iteration  30: 1178967.733 ops/s
Iteration   1: 1182549.773 ops/s
Iteration   2: 1152395.585 ops/s
Iteration   3: 1170756.166 ops/s
Iteration   4: 1175612.683 ops/s
Iteration   5: 1153350.970 ops/s
Iteration   6: 1151734.648 ops/s
Iteration   7: 1159246.002 ops/s
Iteration   8: 1157742.232 ops/s
Iteration   9: 1178916.418 ops/s
Iteration  10: 1163047.675 ops/s
Iteration  11: 1176544.889 ops/s
Iteration  12: 1159774.231 ops/s
Iteration  13: 1160010.071 ops/s
Iteration  14: 1116866.911 ops/s
Iteration  15: 1136206.160 ops/s
Iteration  16: 1169456.892 ops/s
Iteration  17: 1164826.079 ops/s
Iteration  18: 1167110.082 ops/s
Iteration  19: 1144683.957 ops/s
Iteration  20: 1154308.381 ops/s
Iteration  21: 1166702.296 ops/s
Iteration  22: 1162434.322 ops/s
Iteration  23: 1150668.714 ops/s
Iteration  24: 1159021.661 ops/s
Iteration  25: 1160989.174 ops/s
Iteration  26: 1173135.917 ops/s
Iteration  27: 1171646.835 ops/s
Iteration  28: 1137392.131 ops/s
Iteration  29: 1142300.199 ops/s
Iteration  30: 1155936.228 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_addOccurrences_throws":
  1159178.909 ±(99.9%) 9457.069 ops/s [Average]
  (min, avg, max) = (1116866.911, 1159178.909, 1182549.773), stdev = 14154.897
  CI (99.9%): [1149721.840, 1168635.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1159178.909 ± 9457.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12486561.627 ops/s
# Warmup Iteration   2: 25407537.413 ops/s
# Warmup Iteration   3: 24768637.934 ops/s
# Warmup Iteration   4: 27823461.602 ops/s
# Warmup Iteration   5: 27655541.343 ops/s
# Warmup Iteration   6: 27740834.654 ops/s
# Warmup Iteration   7: 27693323.102 ops/s
# Warmup Iteration   8: 27872631.638 ops/s
# Warmup Iteration   9: 27983608.487 ops/s
# Warmup Iteration  10: 28275282.189 ops/s
# Warmup Iteration  11: 28066283.026 ops/s
# Warmup Iteration  12: 28188345.016 ops/s
# Warmup Iteration  13: 27103904.078 ops/s
# Warmup Iteration  14: 26808405.935 ops/s
# Warmup Iteration  15: 28028908.631 ops/s
# Warmup Iteration  16: 27718867.054 ops/s
# Warmup Iteration  17: 27804864.143 ops/s
# Warmup Iteration  18: 26946841.546 ops/s
# Warmup Iteration  19: 27938527.872 ops/s
# Warmup Iteration  20: 27218756.730 ops/s
# Warmup Iteration  21: 27619072.703 ops/s
# Warmup Iteration  22: 27561144.907 ops/s
# Warmup Iteration  23: 27916270.173 ops/s
# Warmup Iteration  24: 27991842.191 ops/s
# Warmup Iteration  25: 27992084.715 ops/s
# Warmup Iteration  26: 27979260.576 ops/s
# Warmup Iteration  27: 27850316.386 ops/s
# Warmup Iteration  28: 27421483.505 ops/s
# Warmup Iteration  29: 28012453.128 ops/s
# Warmup Iteration  30: 27695171.971 ops/s
Iteration   1: 27483310.410 ops/s
Iteration   2: 27448251.100 ops/s
Iteration   3: 26812569.963 ops/s
Iteration   4: 27952623.459 ops/s
Iteration   5: 28311936.033 ops/s
Iteration   6: 28117441.253 ops/s
Iteration   7: 27910481.775 ops/s
Iteration   8: 27612781.930 ops/s
Iteration   9: 28156173.940 ops/s
Iteration  10: 27528241.818 ops/s
Iteration  11: 27872051.708 ops/s
Iteration  12: 27949728.549 ops/s
Iteration  13: 27881639.510 ops/s
Iteration  14: 28082095.561 ops/s
Iteration  15: 28061119.023 ops/s
Iteration  16: 28059204.717 ops/s
Iteration  17: 28143394.423 ops/s
Iteration  18: 27774561.820 ops/s
Iteration  19: 26893675.353 ops/s
Iteration  20: 27314495.280 ops/s
Iteration  21: 28321419.023 ops/s
Iteration  22: 28188250.251 ops/s
Iteration  23: 27945250.564 ops/s
Iteration  24: 27981350.354 ops/s
Iteration  25: 27827403.500 ops/s
Iteration  26: 28153353.944 ops/s
Iteration  27: 28342593.074 ops/s
Iteration  28: 28442412.669 ops/s
Iteration  29: 28023007.962 ops/s
Iteration  30: 28282446.127 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_allSatisfy":
  27895775.503 ±(99.9%) 265357.664 ops/s [Average]
  (min, avg, max) = (26812569.963, 27895775.503, 28442412.669), stdev = 397174.889
  CI (99.9%): [27630417.839, 28161133.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  27895775.503 ± 265357.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15085189.109 ops/s
# Warmup Iteration   2: 31628684.302 ops/s
# Warmup Iteration   3: 27268102.426 ops/s
# Warmup Iteration   4: 31923484.094 ops/s
# Warmup Iteration   5: 31311657.466 ops/s
# Warmup Iteration   6: 31712508.767 ops/s
# Warmup Iteration   7: 30992508.138 ops/s
# Warmup Iteration   8: 31808469.200 ops/s
# Warmup Iteration   9: 31301017.374 ops/s
# Warmup Iteration  10: 31648704.398 ops/s
# Warmup Iteration  11: 30982097.542 ops/s
# Warmup Iteration  12: 31428731.110 ops/s
# Warmup Iteration  13: 31832105.810 ops/s
# Warmup Iteration  14: 30418207.063 ops/s
# Warmup Iteration  15: 31551263.427 ops/s
# Warmup Iteration  16: 31815476.258 ops/s
# Warmup Iteration  17: 31670159.149 ops/s
# Warmup Iteration  18: 30767026.998 ops/s
# Warmup Iteration  19: 31980833.135 ops/s
# Warmup Iteration  20: 31818553.096 ops/s
# Warmup Iteration  21: 31388597.584 ops/s
# Warmup Iteration  22: 31871402.964 ops/s
# Warmup Iteration  23: 31992706.457 ops/s
# Warmup Iteration  24: 31753040.693 ops/s
# Warmup Iteration  25: 31959726.091 ops/s
# Warmup Iteration  26: 31787067.715 ops/s
# Warmup Iteration  27: 32224641.155 ops/s
# Warmup Iteration  28: 31443429.497 ops/s
# Warmup Iteration  29: 31710157.760 ops/s
# Warmup Iteration  30: 31876653.354 ops/s
Iteration   1: 31760418.100 ops/s
Iteration   2: 31443122.412 ops/s
Iteration   3: 31761901.724 ops/s
Iteration   4: 32139056.635 ops/s
Iteration   5: 32088075.667 ops/s
Iteration   6: 32151045.523 ops/s
Iteration   7: 31895213.413 ops/s
Iteration   8: 31751854.649 ops/s
Iteration   9: 31928550.618 ops/s
Iteration  10: 32084708.588 ops/s
Iteration  11: 32125832.004 ops/s
Iteration  12: 32074793.351 ops/s
Iteration  13: 31898043.792 ops/s
Iteration  14: 32026657.243 ops/s
Iteration  15: 32017334.843 ops/s
Iteration  16: 31222007.806 ops/s
Iteration  17: 31909211.445 ops/s
Iteration  18: 31970249.744 ops/s
Iteration  19: 31890213.857 ops/s
Iteration  20: 31701485.299 ops/s
Iteration  21: 31115485.237 ops/s
Iteration  22: 31716880.645 ops/s
Iteration  23: 31600328.180 ops/s
Iteration  24: 31005029.487 ops/s
Iteration  25: 31883183.088 ops/s
Iteration  26: 32069979.210 ops/s
Iteration  27: 30306017.648 ops/s
Iteration  28: 31900395.756 ops/s
Iteration  29: 31562391.325 ops/s
Iteration  30: 30399035.159 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_anySatisfy":
  31713283.415 ±(99.9%) 316452.299 ops/s [Average]
  (min, avg, max) = (30306017.648, 31713283.415, 32151045.523), stdev = 473650.940
  CI (99.9%): [31396831.116, 32029735.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  31713283.415 ± 316452.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737119.078 ops/s
# Warmup Iteration   2: 1575537.827 ops/s
# Warmup Iteration   3: 1583244.786 ops/s
# Warmup Iteration   4: 1337359.708 ops/s
# Warmup Iteration   5: 1610433.776 ops/s
# Warmup Iteration   6: 1629619.811 ops/s
# Warmup Iteration   7: 1642377.100 ops/s
# Warmup Iteration   8: 1647774.038 ops/s
# Warmup Iteration   9: 1647083.746 ops/s
# Warmup Iteration  10: 1649822.682 ops/s
# Warmup Iteration  11: 1653399.023 ops/s
# Warmup Iteration  12: 1659277.279 ops/s
# Warmup Iteration  13: 1621765.083 ops/s
# Warmup Iteration  14: 1576417.702 ops/s
# Warmup Iteration  15: 1612344.816 ops/s
# Warmup Iteration  16: 1551359.807 ops/s
# Warmup Iteration  17: 1646482.249 ops/s
# Warmup Iteration  18: 1602344.864 ops/s
# Warmup Iteration  19: 1602794.129 ops/s
# Warmup Iteration  20: 1630664.929 ops/s
# Warmup Iteration  21: 1602041.618 ops/s
# Warmup Iteration  22: 1641145.483 ops/s
# Warmup Iteration  23: 1619653.640 ops/s
# Warmup Iteration  24: 1624041.233 ops/s
# Warmup Iteration  25: 1592274.463 ops/s
# Warmup Iteration  26: 1615407.311 ops/s
# Warmup Iteration  27: 1638002.653 ops/s
# Warmup Iteration  28: 1606479.914 ops/s
# Warmup Iteration  29: 1648719.873 ops/s
# Warmup Iteration  30: 1646848.097 ops/s
Iteration   1: 1628802.669 ops/s
Iteration   2: 1644697.412 ops/s
Iteration   3: 1643452.840 ops/s
Iteration   4: 1614911.885 ops/s
Iteration   5: 1618776.848 ops/s
Iteration   6: 1651915.321 ops/s
Iteration   7: 1651461.526 ops/s
Iteration   8: 1653593.193 ops/s
Iteration   9: 1636610.378 ops/s
Iteration  10: 1639412.333 ops/s
Iteration  11: 1632778.868 ops/s
Iteration  12: 1640211.064 ops/s
Iteration  13: 1627705.598 ops/s
Iteration  14: 1637400.803 ops/s
Iteration  15: 1652392.910 ops/s
Iteration  16: 1656040.223 ops/s
Iteration  17: 1622797.443 ops/s
Iteration  18: 1618102.592 ops/s
Iteration  19: 1629761.179 ops/s
Iteration  20: 1629122.739 ops/s
Iteration  21: 1628387.331 ops/s
Iteration  22: 1639556.377 ops/s
Iteration  23: 1636785.589 ops/s
Iteration  24: 1636864.530 ops/s
Iteration  25: 1662755.654 ops/s
Iteration  26: 1645385.396 ops/s
Iteration  27: 1638071.244 ops/s
Iteration  28: 1662993.622 ops/s
Iteration  29: 1622540.249 ops/s
Iteration  30: 1632653.870 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_appendString":
  1637864.723 ±(99.9%) 8582.234 ops/s [Average]
  (min, avg, max) = (1614911.885, 1637864.723, 1662993.622), stdev = 12845.485
  CI (99.9%): [1629282.489, 1646446.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_appendString  thrpt   30  1637864.723 ± 8582.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22351226.259 ops/s
# Warmup Iteration   2: 41320777.936 ops/s
# Warmup Iteration   3: 35295573.392 ops/s
# Warmup Iteration   4: 41913388.274 ops/s
# Warmup Iteration   5: 41750890.950 ops/s
# Warmup Iteration   6: 41791134.910 ops/s
# Warmup Iteration   7: 41879470.737 ops/s
# Warmup Iteration   8: 41812479.722 ops/s
# Warmup Iteration   9: 41747647.940 ops/s
# Warmup Iteration  10: 41554324.304 ops/s
# Warmup Iteration  11: 41565618.153 ops/s
# Warmup Iteration  12: 41763521.811 ops/s
# Warmup Iteration  13: 41559078.571 ops/s
# Warmup Iteration  14: 41692383.782 ops/s
# Warmup Iteration  15: 41614045.361 ops/s
# Warmup Iteration  16: 41620652.605 ops/s
# Warmup Iteration  17: 41801851.169 ops/s
# Warmup Iteration  18: 41840151.292 ops/s
# Warmup Iteration  19: 41656989.826 ops/s
# Warmup Iteration  20: 41602296.208 ops/s
# Warmup Iteration  21: 41926039.460 ops/s
# Warmup Iteration  22: 41895803.095 ops/s
# Warmup Iteration  23: 41716881.233 ops/s
# Warmup Iteration  24: 41735140.788 ops/s
# Warmup Iteration  25: 41815538.201 ops/s
# Warmup Iteration  26: 41974638.342 ops/s
# Warmup Iteration  27: 41687800.395 ops/s
# Warmup Iteration  28: 41779736.234 ops/s
# Warmup Iteration  29: 41928386.603 ops/s
# Warmup Iteration  30: 42020938.282 ops/s
Iteration   1: 42014968.143 ops/s
Iteration   2: 42089377.685 ops/s
Iteration   3: 41672550.704 ops/s
Iteration   4: 41856863.625 ops/s
Iteration   5: 41559648.750 ops/s
Iteration   6: 41212951.034 ops/s
Iteration   7: 42043159.636 ops/s
Iteration   8: 41979611.448 ops/s
Iteration   9: 41805027.027 ops/s
Iteration  10: 41800211.687 ops/s
Iteration  11: 41914476.181 ops/s
Iteration  12: 41866456.487 ops/s
Iteration  13: 41396409.618 ops/s
Iteration  14: 41090415.656 ops/s
Iteration  15: 41689146.662 ops/s
Iteration  16: 41742842.939 ops/s
Iteration  17: 41951576.140 ops/s
Iteration  18: 41808133.983 ops/s
Iteration  19: 41797535.760 ops/s
Iteration  20: 41609206.030 ops/s
Iteration  21: 41151300.150 ops/s
Iteration  22: 41693435.427 ops/s
Iteration  23: 41736451.967 ops/s
Iteration  24: 41897896.782 ops/s
Iteration  25: 41895213.266 ops/s
Iteration  26: 41876930.274 ops/s
Iteration  27: 42141487.270 ops/s
Iteration  28: 41956547.049 ops/s
Iteration  29: 41883451.536 ops/s
Iteration  30: 42125585.947 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asLazy":
  41775295.629 ±(99.9%) 179732.766 ops/s [Average]
  (min, avg, max) = (41090415.656, 41775295.629, 42141487.270), stdev = 269015.564
  CI (99.9%): [41595562.863, 41955028.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_asLazy  thrpt   30  41775295.629 ± 179732.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2985201.119 ops/s
# Warmup Iteration   2: 5178214.481 ops/s
# Warmup Iteration   3: 12685384.391 ops/s
# Warmup Iteration   4: 10778426.142 ops/s
# Warmup Iteration   5: 12787389.766 ops/s
# Warmup Iteration   6: 12838274.346 ops/s
# Warmup Iteration   7: 12877837.483 ops/s
# Warmup Iteration   8: 12860221.208 ops/s
# Warmup Iteration   9: 12704927.309 ops/s
# Warmup Iteration  10: 12738360.903 ops/s
# Warmup Iteration  11: 12718960.340 ops/s
# Warmup Iteration  12: 12761135.615 ops/s
# Warmup Iteration  13: 12776059.614 ops/s
# Warmup Iteration  14: 12793968.469 ops/s
# Warmup Iteration  15: 12449148.318 ops/s
# Warmup Iteration  16: 12642423.454 ops/s
# Warmup Iteration  17: 12388875.477 ops/s
# Warmup Iteration  18: 12232414.378 ops/s
# Warmup Iteration  19: 12548251.169 ops/s
# Warmup Iteration  20: 12536390.330 ops/s
# Warmup Iteration  21: 12546930.544 ops/s
# Warmup Iteration  22: 12582395.129 ops/s
# Warmup Iteration  23: 12554771.186 ops/s
# Warmup Iteration  24: 12706813.307 ops/s
# Warmup Iteration  25: 12555373.807 ops/s
# Warmup Iteration  26: 12680880.043 ops/s
# Warmup Iteration  27: 12669133.673 ops/s
# Warmup Iteration  28: 12501861.820 ops/s
# Warmup Iteration  29: 12705694.436 ops/s
# Warmup Iteration  30: 12553765.148 ops/s
Iteration   1: 12722692.428 ops/s
Iteration   2: 12617936.399 ops/s
Iteration   3: 12604864.611 ops/s
Iteration   4: 12534020.779 ops/s
Iteration   5: 12489666.500 ops/s
Iteration   6: 12598099.094 ops/s
Iteration   7: 12681372.682 ops/s
Iteration   8: 12657259.648 ops/s
Iteration   9: 12694769.618 ops/s
Iteration  10: 12707367.997 ops/s
Iteration  11: 12788778.169 ops/s
Iteration  12: 12789249.302 ops/s
Iteration  13: 12773246.847 ops/s
Iteration  14: 12641538.399 ops/s
Iteration  15: 12756461.400 ops/s
Iteration  16: 12661765.532 ops/s
Iteration  17: 12781421.205 ops/s
Iteration  18: 12841721.599 ops/s
Iteration  19: 12828903.553 ops/s
Iteration  20: 12710406.566 ops/s
Iteration  21: 12769918.657 ops/s
Iteration  22: 12473446.989 ops/s
Iteration  23: 12619146.014 ops/s
Iteration  24: 12679227.147 ops/s
Iteration  25: 12621526.216 ops/s
Iteration  26: 12663333.852 ops/s
Iteration  27: 12599655.434 ops/s
Iteration  28: 12648827.610 ops/s
Iteration  29: 12799210.460 ops/s
Iteration  30: 12887102.191 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asSynchronized":
  12688097.897 ±(99.9%) 67660.742 ops/s [Average]
  (min, avg, max) = (12473446.989, 12688097.897, 12887102.191), stdev = 101271.422
  CI (99.9%): [12620437.154, 12755758.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  12688097.897 ± 67660.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12722355.521 ops/s
# Warmup Iteration   2: 20405132.572 ops/s
# Warmup Iteration   3: 23837581.126 ops/s
# Warmup Iteration   4: 23815209.982 ops/s
# Warmup Iteration   5: 23410553.846 ops/s
# Warmup Iteration   6: 23691729.039 ops/s
# Warmup Iteration   7: 23863384.742 ops/s
# Warmup Iteration   8: 23736053.825 ops/s
# Warmup Iteration   9: 23635771.333 ops/s
# Warmup Iteration  10: 23577044.698 ops/s
# Warmup Iteration  11: 23695921.715 ops/s
# Warmup Iteration  12: 23681988.019 ops/s
# Warmup Iteration  13: 23640561.367 ops/s
# Warmup Iteration  14: 23833342.777 ops/s
# Warmup Iteration  15: 23831701.629 ops/s
# Warmup Iteration  16: 23837996.326 ops/s
# Warmup Iteration  17: 23839653.391 ops/s
# Warmup Iteration  18: 23871297.640 ops/s
# Warmup Iteration  19: 23955539.988 ops/s
# Warmup Iteration  20: 23681694.063 ops/s
# Warmup Iteration  21: 23837844.494 ops/s
# Warmup Iteration  22: 23950778.685 ops/s
# Warmup Iteration  23: 23460237.106 ops/s
# Warmup Iteration  24: 23600724.878 ops/s
# Warmup Iteration  25: 23581944.624 ops/s
# Warmup Iteration  26: 23420206.262 ops/s
# Warmup Iteration  27: 23601904.300 ops/s
# Warmup Iteration  28: 23649587.086 ops/s
# Warmup Iteration  29: 23805285.439 ops/s
# Warmup Iteration  30: 23753229.915 ops/s
Iteration   1: 23927370.486 ops/s
Iteration   2: 23681858.865 ops/s
Iteration   3: 23470141.784 ops/s
Iteration   4: 23709214.631 ops/s
Iteration   5: 23818531.367 ops/s
Iteration   6: 23094573.062 ops/s
Iteration   7: 23749537.857 ops/s
Iteration   8: 23559373.918 ops/s
Iteration   9: 23050584.695 ops/s
Iteration  10: 23605504.207 ops/s
Iteration  11: 23369555.157 ops/s
Iteration  12: 23799437.646 ops/s
Iteration  13: 23505849.912 ops/s
Iteration  14: 22831708.475 ops/s
Iteration  15: 23143239.302 ops/s
Iteration  16: 23655124.877 ops/s
Iteration  17: 23542270.739 ops/s
Iteration  18: 23391727.433 ops/s
Iteration  19: 23787769.256 ops/s
Iteration  20: 23788605.122 ops/s
Iteration  21: 23948185.618 ops/s
Iteration  22: 23618612.426 ops/s
Iteration  23: 23804541.371 ops/s
Iteration  24: 23730147.299 ops/s
Iteration  25: 23684358.710 ops/s
Iteration  26: 23570166.433 ops/s
Iteration  27: 23675796.113 ops/s
Iteration  28: 23787775.584 ops/s
Iteration  29: 23656959.154 ops/s
Iteration  30: 23701235.263 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_asUnmodifiable":
  23588658.559 ±(99.9%) 176853.122 ops/s [Average]
  (min, avg, max) = (22831708.475, 23588658.559, 23948185.618), stdev = 264705.448
  CI (99.9%): [23411805.436, 23765511.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  23588658.559 ± 176853.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678034.101 ops/s
# Warmup Iteration   2: 729394.103 ops/s
# Warmup Iteration   3: 940678.906 ops/s
# Warmup Iteration   4: 961643.572 ops/s
# Warmup Iteration   5: 964273.309 ops/s
# Warmup Iteration   6: 961871.890 ops/s
# Warmup Iteration   7: 960107.135 ops/s
# Warmup Iteration   8: 965950.305 ops/s
# Warmup Iteration   9: 958098.818 ops/s
# Warmup Iteration  10: 933491.246 ops/s
# Warmup Iteration  11: 812684.874 ops/s
# Warmup Iteration  12: 943813.730 ops/s
# Warmup Iteration  13: 945999.077 ops/s
# Warmup Iteration  14: 952193.113 ops/s
# Warmup Iteration  15: 959737.249 ops/s
# Warmup Iteration  16: 962448.223 ops/s
# Warmup Iteration  17: 1016815.796 ops/s
# Warmup Iteration  18: 994457.509 ops/s
# Warmup Iteration  19: 976977.438 ops/s
# Warmup Iteration  20: 984105.085 ops/s
# Warmup Iteration  21: 982549.341 ops/s
# Warmup Iteration  22: 1004871.574 ops/s
# Warmup Iteration  23: 999231.398 ops/s
# Warmup Iteration  24: 976504.779 ops/s
# Warmup Iteration  25: 1008049.908 ops/s
# Warmup Iteration  26: 996751.364 ops/s
# Warmup Iteration  27: 986269.774 ops/s
# Warmup Iteration  28: 961402.815 ops/s
# Warmup Iteration  29: 997265.132 ops/s
# Warmup Iteration  30: 1014500.524 ops/s
Iteration   1: 1007651.449 ops/s
Iteration   2: 983872.233 ops/s
Iteration   3: 967435.017 ops/s
Iteration   4: 967571.510 ops/s
Iteration   5: 956161.590 ops/s
Iteration   6: 980363.376 ops/s
Iteration   7: 993299.707 ops/s
Iteration   8: 965638.364 ops/s
Iteration   9: 985589.540 ops/s
Iteration  10: 1001274.735 ops/s
Iteration  11: 1011796.932 ops/s
Iteration  12: 981042.029 ops/s
Iteration  13: 978447.852 ops/s
Iteration  14: 965521.841 ops/s
Iteration  15: 1002371.013 ops/s
Iteration  16: 1013417.258 ops/s
Iteration  17: 973471.981 ops/s
Iteration  18: 986077.884 ops/s
Iteration  19: 1005338.489 ops/s
Iteration  20: 1008207.002 ops/s
Iteration  21: 1003718.813 ops/s
Iteration  22: 1008478.193 ops/s
Iteration  23: 1001840.115 ops/s
Iteration  24: 992486.545 ops/s
Iteration  25: 961844.104 ops/s
Iteration  26: 956697.009 ops/s
Iteration  27: 962899.426 ops/s
Iteration  28: 973496.234 ops/s
Iteration  29: 1006404.173 ops/s
Iteration  30: 1003943.346 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator":
  986878.592 ±(99.9%) 12375.990 ops/s [Average]
  (min, avg, max) = (956161.590, 986878.592, 1013417.258), stdev = 18523.801
  CI (99.9%): [974502.602, 999254.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  986878.592 ± 12375.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 605944.348 ops/s
# Warmup Iteration   2: 802779.223 ops/s
# Warmup Iteration   3: 918620.707 ops/s
# Warmup Iteration   4: 918080.926 ops/s
# Warmup Iteration   5: 918500.066 ops/s
# Warmup Iteration   6: 927666.193 ops/s
# Warmup Iteration   7: 898468.401 ops/s
# Warmup Iteration   8: 741007.679 ops/s
# Warmup Iteration   9: 927732.441 ops/s
# Warmup Iteration  10: 913729.858 ops/s
# Warmup Iteration  11: 914134.754 ops/s
# Warmup Iteration  12: 897646.941 ops/s
# Warmup Iteration  13: 884669.077 ops/s
# Warmup Iteration  14: 890127.294 ops/s
# Warmup Iteration  15: 890198.235 ops/s
# Warmup Iteration  16: 929793.735 ops/s
# Warmup Iteration  17: 986540.673 ops/s
# Warmup Iteration  18: 974952.782 ops/s
# Warmup Iteration  19: 981875.980 ops/s
# Warmup Iteration  20: 984559.135 ops/s
# Warmup Iteration  21: 985592.508 ops/s
# Warmup Iteration  22: 977376.450 ops/s
# Warmup Iteration  23: 984416.959 ops/s
# Warmup Iteration  24: 981298.458 ops/s
# Warmup Iteration  25: 980850.096 ops/s
# Warmup Iteration  26: 986406.887 ops/s
# Warmup Iteration  27: 973227.224 ops/s
# Warmup Iteration  28: 972050.186 ops/s
# Warmup Iteration  29: 991249.211 ops/s
# Warmup Iteration  30: 990321.981 ops/s
Iteration   1: 978211.530 ops/s
Iteration   2: 986475.785 ops/s
Iteration   3: 976407.846 ops/s
Iteration   4: 988055.487 ops/s
Iteration   5: 989908.435 ops/s
Iteration   6: 977327.171 ops/s
Iteration   7: 987011.882 ops/s
Iteration   8: 971973.773 ops/s
Iteration   9: 974160.483 ops/s
Iteration  10: 970198.115 ops/s
Iteration  11: 978994.855 ops/s
Iteration  12: 990140.255 ops/s
Iteration  13: 977672.029 ops/s
Iteration  14: 955964.269 ops/s
Iteration  15: 966054.165 ops/s
Iteration  16: 962413.608 ops/s
Iteration  17: 975561.903 ops/s
Iteration  18: 978681.107 ops/s
Iteration  19: 984184.602 ops/s
Iteration  20: 981405.024 ops/s
Iteration  21: 947165.390 ops/s
Iteration  22: 980839.485 ops/s
Iteration  23: 950550.958 ops/s
Iteration  24: 969910.783 ops/s
Iteration  25: 968066.845 ops/s
Iteration  26: 955769.069 ops/s
Iteration  27: 980077.630 ops/s
Iteration  28: 979608.030 ops/s
Iteration  29: 981812.545 ops/s
Iteration  30: 963711.223 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_booleanIterator_with_remove":
  974277.143 ±(99.9%) 7614.933 ops/s [Average]
  (min, avg, max) = (947165.390, 974277.143, 990140.255), stdev = 11397.674
  CI (99.9%): [966662.210, 981892.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  974277.143 ± 7614.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 460458.212 ops/s
# Warmup Iteration   2: 660508.912 ops/s
# Warmup Iteration   3: 742786.176 ops/s
# Warmup Iteration   4: 767618.870 ops/s
# Warmup Iteration   5: 769722.064 ops/s
# Warmup Iteration   6: 772883.337 ops/s
# Warmup Iteration   7: 670144.621 ops/s
# Warmup Iteration   8: 769286.612 ops/s
# Warmup Iteration   9: 780446.880 ops/s
# Warmup Iteration  10: 775266.024 ops/s
# Warmup Iteration  11: 772293.454 ops/s
# Warmup Iteration  12: 757198.859 ops/s
# Warmup Iteration  13: 776899.876 ops/s
# Warmup Iteration  14: 752680.066 ops/s
# Warmup Iteration  15: 775035.944 ops/s
# Warmup Iteration  16: 770354.614 ops/s
# Warmup Iteration  17: 810252.682 ops/s
# Warmup Iteration  18: 816009.927 ops/s
# Warmup Iteration  19: 783095.951 ops/s
# Warmup Iteration  20: 809760.954 ops/s
# Warmup Iteration  21: 800753.167 ops/s
# Warmup Iteration  22: 769494.339 ops/s
# Warmup Iteration  23: 801418.412 ops/s
# Warmup Iteration  24: 813102.506 ops/s
# Warmup Iteration  25: 797643.678 ops/s
# Warmup Iteration  26: 802727.542 ops/s
# Warmup Iteration  27: 781468.424 ops/s
# Warmup Iteration  28: 782582.442 ops/s
# Warmup Iteration  29: 807559.558 ops/s
# Warmup Iteration  30: 810399.929 ops/s
Iteration   1: 811428.906 ops/s
Iteration   2: 803377.380 ops/s
Iteration   3: 809248.686 ops/s
Iteration   4: 809152.168 ops/s
Iteration   5: 812557.741 ops/s
Iteration   6: 817644.077 ops/s
Iteration   7: 810720.263 ops/s
Iteration   8: 812895.232 ops/s
Iteration   9: 811984.276 ops/s
Iteration  10: 815935.299 ops/s
Iteration  11: 812118.665 ops/s
Iteration  12: 814556.507 ops/s
Iteration  13: 800096.648 ops/s
Iteration  14: 780697.868 ops/s
Iteration  15: 787666.411 ops/s
Iteration  16: 745573.974 ops/s
Iteration  17: 777569.295 ops/s
Iteration  18: 795305.212 ops/s
Iteration  19: 810680.536 ops/s
Iteration  20: 811312.319 ops/s
Iteration  21: 790959.183 ops/s
Iteration  22: 811994.367 ops/s
Iteration  23: 808063.769 ops/s
Iteration  24: 813015.998 ops/s
Iteration  25: 809774.175 ops/s
Iteration  26: 790488.983 ops/s
Iteration  27: 803385.108 ops/s
Iteration  28: 797159.866 ops/s
Iteration  29: 774575.586 ops/s
Iteration  30: 805419.436 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_bottomOccurrences":
  801845.265 ±(99.9%) 10608.251 ops/s [Average]
  (min, avg, max) = (745573.974, 801845.265, 817644.077), stdev = 15877.931
  CI (99.9%): [791237.014, 812453.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  801845.265 ± 10608.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166941.376 ops/s
# Warmup Iteration   2: 255408.480 ops/s
# Warmup Iteration   3: 305065.810 ops/s
# Warmup Iteration   4: 304213.019 ops/s
# Warmup Iteration   5: 304775.140 ops/s
# Warmup Iteration   6: 297923.627 ops/s
# Warmup Iteration   7: 265677.727 ops/s
# Warmup Iteration   8: 305492.239 ops/s
# Warmup Iteration   9: 304543.821 ops/s
# Warmup Iteration  10: 305762.907 ops/s
# Warmup Iteration  11: 302388.216 ops/s
# Warmup Iteration  12: 298900.705 ops/s
# Warmup Iteration  13: 303379.741 ops/s
# Warmup Iteration  14: 304232.342 ops/s
# Warmup Iteration  15: 303460.638 ops/s
# Warmup Iteration  16: 304103.903 ops/s
# Warmup Iteration  17: 317269.597 ops/s
# Warmup Iteration  18: 316165.995 ops/s
# Warmup Iteration  19: 316035.435 ops/s
# Warmup Iteration  20: 317720.186 ops/s
# Warmup Iteration  21: 316728.547 ops/s
# Warmup Iteration  22: 315709.265 ops/s
# Warmup Iteration  23: 311596.126 ops/s
# Warmup Iteration  24: 314523.043 ops/s
# Warmup Iteration  25: 313005.981 ops/s
# Warmup Iteration  26: 300040.362 ops/s
# Warmup Iteration  27: 299404.299 ops/s
# Warmup Iteration  28: 305039.889 ops/s
# Warmup Iteration  29: 312309.279 ops/s
# Warmup Iteration  30: 309391.251 ops/s
Iteration   1: 315109.269 ops/s
Iteration   2: 311353.029 ops/s
Iteration   3: 309324.463 ops/s
Iteration   4: 308341.869 ops/s
Iteration   5: 311903.295 ops/s
Iteration   6: 313621.877 ops/s
Iteration   7: 313976.075 ops/s
Iteration   8: 316305.689 ops/s
Iteration   9: 315956.956 ops/s
Iteration  10: 312703.789 ops/s
Iteration  11: 309357.882 ops/s
Iteration  12: 313039.912 ops/s
Iteration  13: 314667.387 ops/s
Iteration  14: 312518.896 ops/s
Iteration  15: 311654.012 ops/s
Iteration  16: 314858.474 ops/s
Iteration  17: 315683.985 ops/s
Iteration  18: 311332.243 ops/s
Iteration  19: 314843.938 ops/s
Iteration  20: 310102.193 ops/s
Iteration  21: 309561.128 ops/s
Iteration  22: 310230.829 ops/s
Iteration  23: 313666.883 ops/s
Iteration  24: 311903.721 ops/s
Iteration  25: 301915.822 ops/s
Iteration  26: 311512.630 ops/s
Iteration  27: 303643.665 ops/s
Iteration  28: 311249.921 ops/s
Iteration  29: 315549.598 ops/s
Iteration  30: 313112.216 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_chunk":
  311966.722 ±(99.9%) 2216.907 ops/s [Average]
  (min, avg, max) = (301915.822, 311966.722, 316305.689), stdev = 3318.162
  CI (99.9%): [309749.815, 314183.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_chunk  thrpt   30  311966.722 ± 2216.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3121751.117 ops/s
# Warmup Iteration   2: 4999502.693 ops/s
# Warmup Iteration   3: 6067606.858 ops/s
# Warmup Iteration   4: 6106088.069 ops/s
# Warmup Iteration   5: 6014624.693 ops/s
# Warmup Iteration   6: 6119756.748 ops/s
# Warmup Iteration   7: 6195822.237 ops/s
# Warmup Iteration   8: 6132414.020 ops/s
# Warmup Iteration   9: 6052349.405 ops/s
# Warmup Iteration  10: 6031341.941 ops/s
# Warmup Iteration  11: 6096726.746 ops/s
# Warmup Iteration  12: 6106877.992 ops/s
# Warmup Iteration  13: 6109569.596 ops/s
# Warmup Iteration  14: 6063869.483 ops/s
# Warmup Iteration  15: 6002851.651 ops/s
# Warmup Iteration  16: 6091894.361 ops/s
# Warmup Iteration  17: 6170629.651 ops/s
# Warmup Iteration  18: 6123666.119 ops/s
# Warmup Iteration  19: 6108047.175 ops/s
# Warmup Iteration  20: 6212238.105 ops/s
# Warmup Iteration  21: 6121504.591 ops/s
# Warmup Iteration  22: 6082856.106 ops/s
# Warmup Iteration  23: 6174267.858 ops/s
# Warmup Iteration  24: 6190974.151 ops/s
# Warmup Iteration  25: 6118493.051 ops/s
# Warmup Iteration  26: 6129045.072 ops/s
# Warmup Iteration  27: 6189312.568 ops/s
# Warmup Iteration  28: 6065009.908 ops/s
# Warmup Iteration  29: 5904264.266 ops/s
# Warmup Iteration  30: 6054440.711 ops/s
Iteration   1: 6121062.474 ops/s
Iteration   2: 6128905.000 ops/s
Iteration   3: 5971145.556 ops/s
Iteration   4: 6067116.387 ops/s
Iteration   5: 6140633.822 ops/s
Iteration   6: 6201153.164 ops/s
Iteration   7: 6189846.843 ops/s
Iteration   8: 6223892.417 ops/s
Iteration   9: 5867817.998 ops/s
Iteration  10: 6134327.133 ops/s
Iteration  11: 6005078.743 ops/s
Iteration  12: 6190866.388 ops/s
Iteration  13: 6111437.846 ops/s
Iteration  14: 6133686.031 ops/s
Iteration  15: 6089598.641 ops/s
Iteration  16: 6177461.293 ops/s
Iteration  17: 6216605.288 ops/s
Iteration  18: 6100402.226 ops/s
Iteration  19: 6134886.735 ops/s
Iteration  20: 6156794.058 ops/s
Iteration  21: 6078758.598 ops/s
Iteration  22: 5962106.574 ops/s
Iteration  23: 6120972.937 ops/s
Iteration  24: 6084187.746 ops/s
Iteration  25: 6138424.626 ops/s
Iteration  26: 6170876.438 ops/s
Iteration  27: 6065326.169 ops/s
Iteration  28: 5919231.366 ops/s
Iteration  29: 6028667.640 ops/s
Iteration  30: 6207761.183 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_clear":
  6104634.377 ±(99.9%) 59321.920 ops/s [Average]
  (min, avg, max) = (5867817.998, 6104634.377, 6223892.417), stdev = 88790.263
  CI (99.9%): [6045312.458, 6163956.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_clear  thrpt   30  6104634.377 ± 59321.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286656.052 ops/s
# Warmup Iteration   2: 629833.688 ops/s
# Warmup Iteration   3: 668202.864 ops/s
# Warmup Iteration   4: 667136.446 ops/s
# Warmup Iteration   5: 555990.664 ops/s
# Warmup Iteration   6: 655431.340 ops/s
# Warmup Iteration   7: 664676.305 ops/s
# Warmup Iteration   8: 667491.999 ops/s
# Warmup Iteration   9: 665719.659 ops/s
# Warmup Iteration  10: 661539.931 ops/s
# Warmup Iteration  11: 653682.780 ops/s
# Warmup Iteration  12: 662670.509 ops/s
# Warmup Iteration  13: 665198.189 ops/s
# Warmup Iteration  14: 662384.856 ops/s
# Warmup Iteration  15: 658736.363 ops/s
# Warmup Iteration  16: 636635.831 ops/s
# Warmup Iteration  17: 666009.172 ops/s
# Warmup Iteration  18: 646295.283 ops/s
# Warmup Iteration  19: 639211.115 ops/s
# Warmup Iteration  20: 645867.038 ops/s
# Warmup Iteration  21: 641364.633 ops/s
# Warmup Iteration  22: 637204.132 ops/s
# Warmup Iteration  23: 659933.749 ops/s
# Warmup Iteration  24: 654780.953 ops/s
# Warmup Iteration  25: 653961.460 ops/s
# Warmup Iteration  26: 644104.389 ops/s
# Warmup Iteration  27: 659030.208 ops/s
# Warmup Iteration  28: 666135.826 ops/s
# Warmup Iteration  29: 663749.242 ops/s
# Warmup Iteration  30: 658491.354 ops/s
Iteration   1: 651629.616 ops/s
Iteration   2: 663376.596 ops/s
Iteration   3: 659458.985 ops/s
Iteration   4: 663014.018 ops/s
Iteration   5: 661051.922 ops/s
Iteration   6: 662008.679 ops/s
Iteration   7: 662626.480 ops/s
Iteration   8: 661624.179 ops/s
Iteration   9: 656275.777 ops/s
Iteration  10: 667959.022 ops/s
Iteration  11: 670479.895 ops/s
Iteration  12: 671782.675 ops/s
Iteration  13: 660559.470 ops/s
Iteration  14: 664231.330 ops/s
Iteration  15: 666329.991 ops/s
Iteration  16: 668697.218 ops/s
Iteration  17: 662117.649 ops/s
Iteration  18: 659303.711 ops/s
Iteration  19: 657100.626 ops/s
Iteration  20: 660764.482 ops/s
Iteration  21: 657027.589 ops/s
Iteration  22: 637400.489 ops/s
Iteration  23: 622647.504 ops/s
Iteration  24: 665159.295 ops/s
Iteration  25: 659494.350 ops/s
Iteration  26: 667446.614 ops/s
Iteration  27: 654452.904 ops/s
Iteration  28: 666700.578 ops/s
Iteration  29: 653032.021 ops/s
Iteration  30: 633342.257 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_collect":
  658903.197 ±(99.9%) 7207.719 ops/s [Average]
  (min, avg, max) = (622647.504, 658903.197, 671782.675), stdev = 10788.176
  CI (99.9%): [651695.478, 666110.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_collect  thrpt   30  658903.197 ± 7207.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37024388.477 ops/s
# Warmup Iteration   2: 60369463.849 ops/s
# Warmup Iteration   3: 75207208.055 ops/s
# Warmup Iteration   4: 73805446.453 ops/s
# Warmup Iteration   5: 75107609.784 ops/s
# Warmup Iteration   6: 74854945.790 ops/s
# Warmup Iteration   7: 73468136.868 ops/s
# Warmup Iteration   8: 74641446.754 ops/s
# Warmup Iteration   9: 74757923.171 ops/s
# Warmup Iteration  10: 74744698.161 ops/s
# Warmup Iteration  11: 73744638.159 ops/s
# Warmup Iteration  12: 73814420.413 ops/s
# Warmup Iteration  13: 75158626.618 ops/s
# Warmup Iteration  14: 75023760.989 ops/s
# Warmup Iteration  15: 74804519.501 ops/s
# Warmup Iteration  16: 75164507.504 ops/s
# Warmup Iteration  17: 75578454.343 ops/s
# Warmup Iteration  18: 75345336.846 ops/s
# Warmup Iteration  19: 74836660.027 ops/s
# Warmup Iteration  20: 74788175.804 ops/s
# Warmup Iteration  21: 75676709.034 ops/s
# Warmup Iteration  22: 75557527.332 ops/s
# Warmup Iteration  23: 74231171.310 ops/s
# Warmup Iteration  24: 73314996.819 ops/s
# Warmup Iteration  25: 73608279.531 ops/s
# Warmup Iteration  26: 73863312.508 ops/s
# Warmup Iteration  27: 73553764.429 ops/s
# Warmup Iteration  28: 73447498.599 ops/s
# Warmup Iteration  29: 75140210.030 ops/s
# Warmup Iteration  30: 74435624.793 ops/s
Iteration   1: 72996678.699 ops/s
Iteration   2: 75009461.699 ops/s
Iteration   3: 75104030.711 ops/s
Iteration   4: 73608195.630 ops/s
Iteration   5: 73816778.847 ops/s
Iteration   6: 75249103.104 ops/s
Iteration   7: 74546667.339 ops/s
Iteration   8: 73068245.114 ops/s
Iteration   9: 74674074.579 ops/s
Iteration  10: 74376377.480 ops/s
Iteration  11: 75232154.123 ops/s
Iteration  12: 71116017.484 ops/s
Iteration  13: 73113747.120 ops/s
Iteration  14: 75600349.207 ops/s
Iteration  15: 74735970.739 ops/s
Iteration  16: 74469964.850 ops/s
Iteration  17: 76079974.158 ops/s
Iteration  18: 75097652.918 ops/s
Iteration  19: 75480334.949 ops/s
Iteration  20: 74301236.494 ops/s
Iteration  21: 75122087.031 ops/s
Iteration  22: 75079239.058 ops/s
Iteration  23: 73503953.737 ops/s
Iteration  24: 74868825.894 ops/s
Iteration  25: 73320433.501 ops/s
Iteration  26: 73178440.387 ops/s
Iteration  27: 75966138.579 ops/s
Iteration  28: 73413132.254 ops/s
Iteration  29: 74625474.651 ops/s
Iteration  30: 74601823.039 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_contains":
  74378552.113 ±(99.9%) 720636.051 ops/s [Average]
  (min, avg, max) = (71116017.484, 74378552.113, 76079974.158), stdev = 1078614.197
  CI (99.9%): [73657916.062, 75099188.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_contains  thrpt   30  74378552.113 ± 720636.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10853446.408 ops/s
# Warmup Iteration   2: 17491018.327 ops/s
# Warmup Iteration   3: 20228581.753 ops/s
# Warmup Iteration   4: 20394255.120 ops/s
# Warmup Iteration   5: 19849043.971 ops/s
# Warmup Iteration   6: 20377752.806 ops/s
# Warmup Iteration   7: 20649753.582 ops/s
# Warmup Iteration   8: 20428550.780 ops/s
# Warmup Iteration   9: 20415976.918 ops/s
# Warmup Iteration  10: 20032646.244 ops/s
# Warmup Iteration  11: 19854630.273 ops/s
# Warmup Iteration  12: 20480455.357 ops/s
# Warmup Iteration  13: 20403706.191 ops/s
# Warmup Iteration  14: 20451923.977 ops/s
# Warmup Iteration  15: 20453815.945 ops/s
# Warmup Iteration  16: 20299282.443 ops/s
# Warmup Iteration  17: 20444936.608 ops/s
# Warmup Iteration  18: 20517128.291 ops/s
# Warmup Iteration  19: 20425843.483 ops/s
# Warmup Iteration  20: 20188054.208 ops/s
# Warmup Iteration  21: 19735372.368 ops/s
# Warmup Iteration  22: 20365446.134 ops/s
# Warmup Iteration  23: 20627088.679 ops/s
# Warmup Iteration  24: 20311187.543 ops/s
# Warmup Iteration  25: 20461708.140 ops/s
# Warmup Iteration  26: 20358121.746 ops/s
# Warmup Iteration  27: 20155309.622 ops/s
# Warmup Iteration  28: 19675226.890 ops/s
# Warmup Iteration  29: 19762256.645 ops/s
# Warmup Iteration  30: 20171223.063 ops/s
Iteration   1: 20078705.820 ops/s
Iteration   2: 19883410.359 ops/s
Iteration   3: 19743143.093 ops/s
Iteration   4: 20632434.915 ops/s
Iteration   5: 20582523.487 ops/s
Iteration   6: 20484373.419 ops/s
Iteration   7: 20369834.457 ops/s
Iteration   8: 20246808.242 ops/s
Iteration   9: 20419750.678 ops/s
Iteration  10: 20047261.580 ops/s
Iteration  11: 20256168.207 ops/s
Iteration  12: 20352356.635 ops/s
Iteration  13: 20520739.153 ops/s
Iteration  14: 20548487.444 ops/s
Iteration  15: 20771134.610 ops/s
Iteration  16: 20701459.083 ops/s
Iteration  17: 20354433.634 ops/s
Iteration  18: 20582160.613 ops/s
Iteration  19: 20662588.104 ops/s
Iteration  20: 20381203.594 ops/s
Iteration  21: 20508105.163 ops/s
Iteration  22: 20409477.584 ops/s
Iteration  23: 20340000.252 ops/s
Iteration  24: 20248637.381 ops/s
Iteration  25: 20462445.322 ops/s
Iteration  26: 20456593.578 ops/s
Iteration  27: 20403380.099 ops/s
Iteration  28: 20515996.262 ops/s
Iteration  29: 20153763.502 ops/s
Iteration  30: 20277637.017 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllArray":
  20379833.776 ±(99.9%) 154969.390 ops/s [Average]
  (min, avg, max) = (19743143.093, 20379833.776, 20771134.610), stdev = 231950.905
  CI (99.9%): [20224864.386, 20534803.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  20379833.776 ± 154969.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1362480.561 ops/s
# Warmup Iteration   2: 2969395.841 ops/s
# Warmup Iteration   3: 2480194.669 ops/s
# Warmup Iteration   4: 3022238.223 ops/s
# Warmup Iteration   5: 3032316.241 ops/s
# Warmup Iteration   6: 2970072.933 ops/s
# Warmup Iteration   7: 2978853.986 ops/s
# Warmup Iteration   8: 2959825.353 ops/s
# Warmup Iteration   9: 2993396.170 ops/s
# Warmup Iteration  10: 2987742.988 ops/s
# Warmup Iteration  11: 2975575.719 ops/s
# Warmup Iteration  12: 2883280.174 ops/s
# Warmup Iteration  13: 2999345.272 ops/s
# Warmup Iteration  14: 2971523.959 ops/s
# Warmup Iteration  15: 2991920.854 ops/s
# Warmup Iteration  16: 2875335.597 ops/s
# Warmup Iteration  17: 2964183.435 ops/s
# Warmup Iteration  18: 2990813.699 ops/s
# Warmup Iteration  19: 3008445.329 ops/s
# Warmup Iteration  20: 2982725.133 ops/s
# Warmup Iteration  21: 2974888.613 ops/s
# Warmup Iteration  22: 2977525.082 ops/s
# Warmup Iteration  23: 3034076.589 ops/s
# Warmup Iteration  24: 3018755.494 ops/s
# Warmup Iteration  25: 2967412.767 ops/s
# Warmup Iteration  26: 2997924.330 ops/s
# Warmup Iteration  27: 3016318.589 ops/s
# Warmup Iteration  28: 2993813.544 ops/s
# Warmup Iteration  29: 2989540.296 ops/s
# Warmup Iteration  30: 2994300.062 ops/s
Iteration   1: 3001301.052 ops/s
Iteration   2: 2940352.383 ops/s
Iteration   3: 2860507.651 ops/s
Iteration   4: 3013173.864 ops/s
Iteration   5: 3035234.966 ops/s
Iteration   6: 3017098.428 ops/s
Iteration   7: 3013668.856 ops/s
Iteration   8: 3008800.077 ops/s
Iteration   9: 3005949.227 ops/s
Iteration  10: 2985811.864 ops/s
Iteration  11: 3004899.728 ops/s
Iteration  12: 2864014.276 ops/s
Iteration  13: 2878693.444 ops/s
Iteration  14: 2947813.358 ops/s
Iteration  15: 2992782.415 ops/s
Iteration  16: 2915199.031 ops/s
Iteration  17: 2917342.303 ops/s
Iteration  18: 2950739.672 ops/s
Iteration  19: 3020281.371 ops/s
Iteration  20: 2992068.117 ops/s
Iteration  21: 2977516.198 ops/s
Iteration  22: 2906759.955 ops/s
Iteration  23: 2989892.887 ops/s
Iteration  24: 2892363.574 ops/s
Iteration  25: 2959897.500 ops/s
Iteration  26: 2963652.911 ops/s
Iteration  27: 2987930.107 ops/s
Iteration  28: 3017882.400 ops/s
Iteration  29: 3033507.765 ops/s
Iteration  30: 3000307.258 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAllIterable":
  2969848.088 ±(99.9%) 34267.182 ops/s [Average]
  (min, avg, max) = (2860507.651, 2969848.088, 3035234.966), stdev = 51289.509
  CI (99.9%): [2935580.905, 3004115.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  2969848.088 ± 34267.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18251143.906 ops/s
# Warmup Iteration   2: 30593741.310 ops/s
# Warmup Iteration   3: 36129199.609 ops/s
# Warmup Iteration   4: 35877436.014 ops/s
# Warmup Iteration   5: 36057709.951 ops/s
# Warmup Iteration   6: 36735800.048 ops/s
# Warmup Iteration   7: 36467376.772 ops/s
# Warmup Iteration   8: 36123187.167 ops/s
# Warmup Iteration   9: 36699291.356 ops/s
# Warmup Iteration  10: 36307097.447 ops/s
# Warmup Iteration  11: 35823638.512 ops/s
# Warmup Iteration  12: 36044921.215 ops/s
# Warmup Iteration  13: 36062960.771 ops/s
# Warmup Iteration  14: 36450127.087 ops/s
# Warmup Iteration  15: 36222009.731 ops/s
# Warmup Iteration  16: 35824920.439 ops/s
# Warmup Iteration  17: 35990659.695 ops/s
# Warmup Iteration  18: 35345637.109 ops/s
# Warmup Iteration  19: 36035449.841 ops/s
# Warmup Iteration  20: 36667091.532 ops/s
# Warmup Iteration  21: 36780346.148 ops/s
# Warmup Iteration  22: 36132746.835 ops/s
# Warmup Iteration  23: 36364070.112 ops/s
# Warmup Iteration  24: 36515987.134 ops/s
# Warmup Iteration  25: 36159894.093 ops/s
# Warmup Iteration  26: 35700741.294 ops/s
# Warmup Iteration  27: 35200355.042 ops/s
# Warmup Iteration  28: 36947134.736 ops/s
# Warmup Iteration  29: 35735263.812 ops/s
# Warmup Iteration  30: 35771919.982 ops/s
Iteration   1: 35985261.377 ops/s
Iteration   2: 35827329.216 ops/s
Iteration   3: 36600652.609 ops/s
Iteration   4: 35594178.910 ops/s
Iteration   5: 35683553.290 ops/s
Iteration   6: 36219125.309 ops/s
Iteration   7: 36720625.207 ops/s
Iteration   8: 36439423.127 ops/s
Iteration   9: 36171922.660 ops/s
Iteration  10: 36032160.461 ops/s
Iteration  11: 36604229.750 ops/s
Iteration  12: 36347980.476 ops/s
Iteration  13: 35903610.106 ops/s
Iteration  14: 35789474.779 ops/s
Iteration  15: 36031090.158 ops/s
Iteration  16: 36399906.771 ops/s
Iteration  17: 35216126.630 ops/s
Iteration  18: 35562543.970 ops/s
Iteration  19: 36594432.760 ops/s
Iteration  20: 36529729.769 ops/s
Iteration  21: 36722726.193 ops/s
Iteration  22: 36132156.180 ops/s
Iteration  23: 36666330.803 ops/s
Iteration  24: 36229576.597 ops/s
Iteration  25: 35783161.438 ops/s
Iteration  26: 35913721.306 ops/s
Iteration  27: 35745248.424 ops/s
Iteration  28: 35744754.489 ops/s
Iteration  29: 35970949.287 ops/s
Iteration  30: 36300932.055 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyArray":
  36115430.470 ±(99.9%) 263177.115 ops/s [Average]
  (min, avg, max) = (35216126.630, 36115430.470, 36722726.193), stdev = 393911.145
  CI (99.9%): [35852253.356, 36378607.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  36115430.470 ± 263177.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851999.693 ops/s
# Warmup Iteration   2: 1234502.998 ops/s
# Warmup Iteration   3: 1451255.425 ops/s
# Warmup Iteration   4: 1463666.580 ops/s
# Warmup Iteration   5: 1420960.063 ops/s
# Warmup Iteration   6: 1433930.200 ops/s
# Warmup Iteration   7: 1198936.105 ops/s
# Warmup Iteration   8: 1437260.615 ops/s
# Warmup Iteration   9: 1382378.688 ops/s
# Warmup Iteration  10: 1430209.354 ops/s
# Warmup Iteration  11: 1455693.924 ops/s
# Warmup Iteration  12: 1395592.639 ops/s
# Warmup Iteration  13: 1413689.760 ops/s
# Warmup Iteration  14: 1404668.018 ops/s
# Warmup Iteration  15: 1413629.178 ops/s
# Warmup Iteration  16: 1405107.384 ops/s
# Warmup Iteration  17: 1414779.479 ops/s
# Warmup Iteration  18: 1449786.733 ops/s
# Warmup Iteration  19: 1440735.490 ops/s
# Warmup Iteration  20: 1445886.930 ops/s
# Warmup Iteration  21: 1457897.373 ops/s
# Warmup Iteration  22: 1458282.365 ops/s
# Warmup Iteration  23: 1441560.145 ops/s
# Warmup Iteration  24: 1449878.121 ops/s
# Warmup Iteration  25: 1461903.006 ops/s
# Warmup Iteration  26: 1464516.386 ops/s
# Warmup Iteration  27: 1455704.020 ops/s
# Warmup Iteration  28: 1454668.687 ops/s
# Warmup Iteration  29: 1445560.196 ops/s
# Warmup Iteration  30: 1464048.607 ops/s
Iteration   1: 1445035.238 ops/s
Iteration   2: 1440224.707 ops/s
Iteration   3: 1455347.535 ops/s
Iteration   4: 1448996.075 ops/s
Iteration   5: 1451238.335 ops/s
Iteration   6: 1470212.372 ops/s
Iteration   7: 1458841.615 ops/s
Iteration   8: 1449017.065 ops/s
Iteration   9: 1390722.710 ops/s
Iteration  10: 1412568.757 ops/s
Iteration  11: 1428322.444 ops/s
Iteration  12: 1442765.406 ops/s
Iteration  13: 1446241.257 ops/s
Iteration  14: 1461718.370 ops/s
Iteration  15: 1381652.778 ops/s
Iteration  16: 1463732.591 ops/s
Iteration  17: 1462665.312 ops/s
Iteration  18: 1433895.577 ops/s
Iteration  19: 1460928.409 ops/s
Iteration  20: 1457619.708 ops/s
Iteration  21: 1449401.420 ops/s
Iteration  22: 1442461.327 ops/s
Iteration  23: 1448040.642 ops/s
Iteration  24: 1457113.176 ops/s
Iteration  25: 1449787.524 ops/s
Iteration  26: 1462250.959 ops/s
Iteration  27: 1450835.238 ops/s
Iteration  28: 1466181.460 ops/s
Iteration  29: 1464902.565 ops/s
Iteration  30: 1438720.087 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsAnyIterable":
  1446381.355 ±(99.9%) 13684.133 ops/s [Average]
  (min, avg, max) = (1381652.778, 1446381.355, 1470212.372), stdev = 20481.768
  CI (99.9%): [1432697.222, 1460065.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1446381.355 ± 13684.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19123188.533 ops/s
# Warmup Iteration   2: 31235444.201 ops/s
# Warmup Iteration   3: 36817531.985 ops/s
# Warmup Iteration   4: 37014579.614 ops/s
# Warmup Iteration   5: 36760440.841 ops/s
# Warmup Iteration   6: 36738559.325 ops/s
# Warmup Iteration   7: 36312967.136 ops/s
# Warmup Iteration   8: 36364950.872 ops/s
# Warmup Iteration   9: 36147863.224 ops/s
# Warmup Iteration  10: 35787562.431 ops/s
# Warmup Iteration  11: 36933306.777 ops/s
# Warmup Iteration  12: 36311676.009 ops/s
# Warmup Iteration  13: 36261834.387 ops/s
# Warmup Iteration  14: 36338054.324 ops/s
# Warmup Iteration  15: 36408606.644 ops/s
# Warmup Iteration  16: 36405154.633 ops/s
# Warmup Iteration  17: 36376662.808 ops/s
# Warmup Iteration  18: 36700601.618 ops/s
# Warmup Iteration  19: 36378540.932 ops/s
# Warmup Iteration  20: 36597298.726 ops/s
# Warmup Iteration  21: 36659454.438 ops/s
# Warmup Iteration  22: 36637347.293 ops/s
# Warmup Iteration  23: 36746035.225 ops/s
# Warmup Iteration  24: 36366805.049 ops/s
# Warmup Iteration  25: 36628153.297 ops/s
# Warmup Iteration  26: 36677416.109 ops/s
# Warmup Iteration  27: 36501199.124 ops/s
# Warmup Iteration  28: 36636144.828 ops/s
# Warmup Iteration  29: 36291496.137 ops/s
# Warmup Iteration  30: 36126580.894 ops/s
Iteration   1: 36754413.698 ops/s
Iteration   2: 36310639.607 ops/s
Iteration   3: 36356899.312 ops/s
Iteration   4: 35288317.278 ops/s
Iteration   5: 36590339.268 ops/s
Iteration   6: 36299187.159 ops/s
Iteration   7: 36773928.456 ops/s
Iteration   8: 36408061.564 ops/s
Iteration   9: 37113816.462 ops/s
Iteration  10: 36499851.109 ops/s
Iteration  11: 36291198.078 ops/s
Iteration  12: 36197213.208 ops/s
Iteration  13: 36601034.605 ops/s
Iteration  14: 35265603.350 ops/s
Iteration  15: 36895092.674 ops/s
Iteration  16: 36025079.990 ops/s
Iteration  17: 35239323.108 ops/s
Iteration  18: 35889842.881 ops/s
Iteration  19: 35512038.829 ops/s
Iteration  20: 35815919.719 ops/s
Iteration  21: 36559258.500 ops/s
Iteration  22: 36816288.182 ops/s
Iteration  23: 37098955.678 ops/s
Iteration  24: 36688764.885 ops/s
Iteration  25: 35205816.925 ops/s
Iteration  26: 37041382.306 ops/s
Iteration  27: 35895237.683 ops/s
Iteration  28: 37074159.139 ops/s
Iteration  29: 36945692.930 ops/s
Iteration  30: 36783770.450 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneArray":
  36341237.568 ±(99.9%) 396986.492 ops/s [Average]
  (min, avg, max) = (35205816.925, 36341237.568, 37113816.462), stdev = 594190.737
  CI (99.9%): [35944251.076, 36738224.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  36341237.568 ± 396986.492  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784951.294 ops/s
# Warmup Iteration   2: 1125507.085 ops/s
# Warmup Iteration   3: 1318607.163 ops/s
# Warmup Iteration   4: 1286100.995 ops/s
# Warmup Iteration   5: 1302603.037 ops/s
# Warmup Iteration   6: 1297963.903 ops/s
# Warmup Iteration   7: 1091048.067 ops/s
# Warmup Iteration   8: 1297594.849 ops/s
# Warmup Iteration   9: 1311384.917 ops/s
# Warmup Iteration  10: 1309856.438 ops/s
# Warmup Iteration  11: 1304511.401 ops/s
# Warmup Iteration  12: 1304044.191 ops/s
# Warmup Iteration  13: 1253550.401 ops/s
# Warmup Iteration  14: 1258193.817 ops/s
# Warmup Iteration  15: 1301356.291 ops/s
# Warmup Iteration  16: 1301539.413 ops/s
# Warmup Iteration  17: 1302702.682 ops/s
# Warmup Iteration  18: 1275979.429 ops/s
# Warmup Iteration  19: 1284078.508 ops/s
# Warmup Iteration  20: 1289857.873 ops/s
# Warmup Iteration  21: 1308293.189 ops/s
# Warmup Iteration  22: 1306839.428 ops/s
# Warmup Iteration  23: 1305995.603 ops/s
# Warmup Iteration  24: 1306964.716 ops/s
# Warmup Iteration  25: 1283222.921 ops/s
# Warmup Iteration  26: 1305274.189 ops/s
# Warmup Iteration  27: 1315870.724 ops/s
# Warmup Iteration  28: 1303742.935 ops/s
# Warmup Iteration  29: 1308495.872 ops/s
# Warmup Iteration  30: 1309922.370 ops/s
Iteration   1: 1305245.128 ops/s
Iteration   2: 1303370.671 ops/s
Iteration   3: 1305646.712 ops/s
Iteration   4: 1299538.519 ops/s
Iteration   5: 1289086.923 ops/s
Iteration   6: 1301275.559 ops/s
Iteration   7: 1312562.150 ops/s
Iteration   8: 1292719.270 ops/s
Iteration   9: 1313515.164 ops/s
Iteration  10: 1305235.035 ops/s
Iteration  11: 1285933.792 ops/s
Iteration  12: 1306013.203 ops/s
Iteration  13: 1313066.983 ops/s
Iteration  14: 1300358.232 ops/s
Iteration  15: 1294509.738 ops/s
Iteration  16: 1295902.987 ops/s
Iteration  17: 1305779.280 ops/s
Iteration  18: 1304031.152 ops/s
Iteration  19: 1255542.035 ops/s
Iteration  20: 1263190.488 ops/s
Iteration  21: 1263855.453 ops/s
Iteration  22: 1270981.053 ops/s
Iteration  23: 1270253.388 ops/s
Iteration  24: 1307762.388 ops/s
Iteration  25: 1293239.194 ops/s
Iteration  26: 1251432.964 ops/s
Iteration  27: 1263398.904 ops/s
Iteration  28: 1287075.013 ops/s
Iteration  29: 1244702.054 ops/s
Iteration  30: 1279528.536 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_containsNoneIterable":
  1289491.732 ±(99.9%) 13370.626 ops/s [Average]
  (min, avg, max) = (1244702.054, 1289491.732, 1313515.164), stdev = 20012.525
  CI (99.9%): [1276121.106, 1302862.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1289491.732 ± 13370.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14713681.121 ops/s
# Warmup Iteration   2: 29456492.328 ops/s
# Warmup Iteration   3: 32049525.464 ops/s
# Warmup Iteration   4: 26800036.946 ops/s
# Warmup Iteration   5: 32031809.387 ops/s
# Warmup Iteration   6: 31706911.569 ops/s
# Warmup Iteration   7: 30271157.566 ops/s
# Warmup Iteration   8: 30944758.800 ops/s
# Warmup Iteration   9: 30584711.023 ops/s
# Warmup Iteration  10: 30525689.365 ops/s
# Warmup Iteration  11: 30871535.063 ops/s
# Warmup Iteration  12: 31571692.654 ops/s
# Warmup Iteration  13: 32150561.381 ops/s
# Warmup Iteration  14: 31873864.135 ops/s
# Warmup Iteration  15: 31377928.485 ops/s
# Warmup Iteration  16: 31322332.609 ops/s
# Warmup Iteration  17: 30403502.180 ops/s
# Warmup Iteration  18: 31244341.219 ops/s
# Warmup Iteration  19: 30881355.716 ops/s
# Warmup Iteration  20: 30939378.959 ops/s
# Warmup Iteration  21: 30945936.451 ops/s
# Warmup Iteration  22: 30844204.516 ops/s
# Warmup Iteration  23: 31598719.347 ops/s
# Warmup Iteration  24: 31935413.595 ops/s
# Warmup Iteration  25: 31901645.537 ops/s
# Warmup Iteration  26: 31686428.319 ops/s
# Warmup Iteration  27: 32189936.092 ops/s
# Warmup Iteration  28: 32213745.480 ops/s
# Warmup Iteration  29: 31492839.190 ops/s
# Warmup Iteration  30: 31901849.517 ops/s
Iteration   1: 31742162.631 ops/s
Iteration   2: 31940364.808 ops/s
Iteration   3: 31115402.326 ops/s
Iteration   4: 30808003.070 ops/s
Iteration   5: 31704904.199 ops/s
Iteration   6: 31939718.721 ops/s
Iteration   7: 32132314.917 ops/s
Iteration   8: 32224793.214 ops/s
Iteration   9: 31799243.482 ops/s
Iteration  10: 31306746.112 ops/s
Iteration  11: 30368993.643 ops/s
Iteration  12: 31276069.734 ops/s
Iteration  13: 30665696.314 ops/s
Iteration  14: 31401545.967 ops/s
Iteration  15: 30982797.172 ops/s
Iteration  16: 31578273.809 ops/s
Iteration  17: 30646394.262 ops/s
Iteration  18: 30756541.162 ops/s
Iteration  19: 31768218.407 ops/s
Iteration  20: 31781698.592 ops/s
Iteration  21: 31687359.801 ops/s
Iteration  22: 31525811.080 ops/s
Iteration  23: 31082432.910 ops/s
Iteration  24: 31660055.807 ops/s
Iteration  25: 31613149.336 ops/s
Iteration  26: 32195949.480 ops/s
Iteration  27: 32313582.962 ops/s
Iteration  28: 32205183.217 ops/s
Iteration  29: 31619790.816 ops/s
Iteration  30: 31400044.501 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_count":
  31508108.082 ±(99.9%) 346996.596 ops/s [Average]
  (min, avg, max) = (30368993.643, 31508108.082, 32313582.962), stdev = 519368.209
  CI (99.9%): [31161111.486, 31855104.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_count  thrpt   30  31508108.082 ± 346996.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17868109.343 ops/s
# Warmup Iteration   2: 32377027.213 ops/s
# Warmup Iteration   3: 33489455.559 ops/s
# Warmup Iteration   4: 29088712.293 ops/s
# Warmup Iteration   5: 34480982.738 ops/s
# Warmup Iteration   6: 34594241.576 ops/s
# Warmup Iteration   7: 34540652.590 ops/s
# Warmup Iteration   8: 35259706.870 ops/s
# Warmup Iteration   9: 34989711.386 ops/s
# Warmup Iteration  10: 35131523.316 ops/s
# Warmup Iteration  11: 35188779.322 ops/s
# Warmup Iteration  12: 35154387.297 ops/s
# Warmup Iteration  13: 35093387.275 ops/s
# Warmup Iteration  14: 34572447.482 ops/s
# Warmup Iteration  15: 34798527.811 ops/s
# Warmup Iteration  16: 35053734.898 ops/s
# Warmup Iteration  17: 35416856.312 ops/s
# Warmup Iteration  18: 35619119.807 ops/s
# Warmup Iteration  19: 35593061.124 ops/s
# Warmup Iteration  20: 35440876.602 ops/s
# Warmup Iteration  21: 34561745.332 ops/s
# Warmup Iteration  22: 35203630.079 ops/s
# Warmup Iteration  23: 34587988.883 ops/s
# Warmup Iteration  24: 34275731.928 ops/s
# Warmup Iteration  25: 35554490.854 ops/s
# Warmup Iteration  26: 34611024.133 ops/s
# Warmup Iteration  27: 35087108.147 ops/s
# Warmup Iteration  28: 35550668.584 ops/s
# Warmup Iteration  29: 35693270.921 ops/s
# Warmup Iteration  30: 35029286.905 ops/s
Iteration   1: 35246926.080 ops/s
Iteration   2: 35370578.288 ops/s
Iteration   3: 35405879.847 ops/s
Iteration   4: 35339249.387 ops/s
Iteration   5: 35075530.766 ops/s
Iteration   6: 34909192.854 ops/s
Iteration   7: 35511966.229 ops/s
Iteration   8: 35245372.362 ops/s
Iteration   9: 35259731.591 ops/s
Iteration  10: 35475960.356 ops/s
Iteration  11: 35044171.113 ops/s
Iteration  12: 35508460.934 ops/s
Iteration  13: 34456428.935 ops/s
Iteration  14: 35347670.059 ops/s
Iteration  15: 35154600.283 ops/s
Iteration  16: 35465400.970 ops/s
Iteration  17: 35299716.988 ops/s
Iteration  18: 34982662.899 ops/s
Iteration  19: 34570801.619 ops/s
Iteration  20: 35413522.827 ops/s
Iteration  21: 35134010.772 ops/s
Iteration  22: 35139599.545 ops/s
Iteration  23: 34413521.253 ops/s
Iteration  24: 33565969.947 ops/s
Iteration  25: 34481242.063 ops/s
Iteration  26: 35155654.713 ops/s
Iteration  27: 35078665.353 ops/s
Iteration  28: 34902900.749 ops/s
Iteration  29: 34209761.602 ops/s
Iteration  30: 35165962.491 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_detectIfNone":
  35044370.429 ±(99.9%) 299067.877 ops/s [Average]
  (min, avg, max) = (33565969.947, 35044370.429, 35511966.229), stdev = 447630.753
  CI (99.9%): [34745302.552, 35343438.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  35044370.429 ± 299067.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23708215.249 ops/s
# Warmup Iteration   2: 39971849.355 ops/s
# Warmup Iteration   3: 46102920.918 ops/s
# Warmup Iteration   4: 45923544.008 ops/s
# Warmup Iteration   5: 46429189.942 ops/s
# Warmup Iteration   6: 46682751.294 ops/s
# Warmup Iteration   7: 45888384.398 ops/s
# Warmup Iteration   8: 45514929.681 ops/s
# Warmup Iteration   9: 45572105.889 ops/s
# Warmup Iteration  10: 46151836.153 ops/s
# Warmup Iteration  11: 46344357.509 ops/s
# Warmup Iteration  12: 46920100.750 ops/s
# Warmup Iteration  13: 46159628.113 ops/s
# Warmup Iteration  14: 46832250.634 ops/s
# Warmup Iteration  15: 47880403.020 ops/s
# Warmup Iteration  16: 46890501.372 ops/s
# Warmup Iteration  17: 46241052.706 ops/s
# Warmup Iteration  18: 46314770.935 ops/s
# Warmup Iteration  19: 46358177.452 ops/s
# Warmup Iteration  20: 46956512.652 ops/s
# Warmup Iteration  21: 47061566.274 ops/s
# Warmup Iteration  22: 47188437.976 ops/s
# Warmup Iteration  23: 47618673.646 ops/s
# Warmup Iteration  24: 47139092.084 ops/s
# Warmup Iteration  25: 47274210.697 ops/s
# Warmup Iteration  26: 47244748.722 ops/s
# Warmup Iteration  27: 47153065.590 ops/s
# Warmup Iteration  28: 47350008.791 ops/s
# Warmup Iteration  29: 47234717.957 ops/s
# Warmup Iteration  30: 47084708.793 ops/s
Iteration   1: 46652824.759 ops/s
Iteration   2: 47012597.128 ops/s
Iteration   3: 46830870.399 ops/s
Iteration   4: 46570227.632 ops/s
Iteration   5: 45873334.081 ops/s
Iteration   6: 46889299.003 ops/s
Iteration   7: 45196119.836 ops/s
Iteration   8: 46506808.700 ops/s
Iteration   9: 46867422.890 ops/s
Iteration  10: 46837685.208 ops/s
Iteration  11: 47236718.822 ops/s
Iteration  12: 46930415.148 ops/s
Iteration  13: 47181209.047 ops/s
Iteration  14: 47528379.337 ops/s
Iteration  15: 47097189.071 ops/s
Iteration  16: 46661266.119 ops/s
Iteration  17: 46336500.337 ops/s
Iteration  18: 47006473.071 ops/s
Iteration  19: 46791771.987 ops/s
Iteration  20: 46511577.456 ops/s
Iteration  21: 46192931.234 ops/s
Iteration  22: 45925432.224 ops/s
Iteration  23: 45931992.433 ops/s
Iteration  24: 45891262.431 ops/s
Iteration  25: 46405270.989 ops/s
Iteration  26: 46575828.017 ops/s
Iteration  27: 46205599.088 ops/s
Iteration  28: 46567046.184 ops/s
Iteration  29: 46226438.086 ops/s
Iteration  30: 47225395.021 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEach":
  46588862.858 ±(99.9%) 339367.833 ops/s [Average]
  (min, avg, max) = (45196119.836, 46588862.858, 47528379.337), stdev = 507949.834
  CI (99.9%): [46249495.025, 46928230.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_forEach  thrpt   30  46588862.858 ± 339367.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10854035.844 ops/s
# Warmup Iteration   2: 21053369.813 ops/s
# Warmup Iteration   3: 17692726.049 ops/s
# Warmup Iteration   4: 20381627.100 ops/s
# Warmup Iteration   5: 20592048.386 ops/s
# Warmup Iteration   6: 20836017.498 ops/s
# Warmup Iteration   7: 21292717.912 ops/s
# Warmup Iteration   8: 21174613.329 ops/s
# Warmup Iteration   9: 21034014.855 ops/s
# Warmup Iteration  10: 21141835.896 ops/s
# Warmup Iteration  11: 21069765.293 ops/s
# Warmup Iteration  12: 21064617.051 ops/s
# Warmup Iteration  13: 21161310.328 ops/s
# Warmup Iteration  14: 20758258.936 ops/s
# Warmup Iteration  15: 21085093.021 ops/s
# Warmup Iteration  16: 21259063.363 ops/s
# Warmup Iteration  17: 21422545.012 ops/s
# Warmup Iteration  18: 21413350.977 ops/s
# Warmup Iteration  19: 21306693.914 ops/s
# Warmup Iteration  20: 21351145.287 ops/s
# Warmup Iteration  21: 21232254.874 ops/s
# Warmup Iteration  22: 21079535.084 ops/s
# Warmup Iteration  23: 21138542.134 ops/s
# Warmup Iteration  24: 21030550.670 ops/s
# Warmup Iteration  25: 21135437.427 ops/s
# Warmup Iteration  26: 21055376.399 ops/s
# Warmup Iteration  27: 21268398.939 ops/s
# Warmup Iteration  28: 21135762.099 ops/s
# Warmup Iteration  29: 20685545.486 ops/s
# Warmup Iteration  30: 21078327.246 ops/s
Iteration   1: 21326314.656 ops/s
Iteration   2: 21459171.450 ops/s
Iteration   3: 21154379.183 ops/s
Iteration   4: 21407461.512 ops/s
Iteration   5: 20622191.701 ops/s
Iteration   6: 21297284.247 ops/s
Iteration   7: 20457885.001 ops/s
Iteration   8: 21262314.617 ops/s
Iteration   9: 20830874.255 ops/s
Iteration  10: 21066965.472 ops/s
Iteration  11: 20945769.355 ops/s
Iteration  12: 21107483.315 ops/s
Iteration  13: 21112115.050 ops/s
Iteration  14: 21139804.028 ops/s
Iteration  15: 21090524.058 ops/s
Iteration  16: 21189896.656 ops/s
Iteration  17: 21216941.255 ops/s
Iteration  18: 21084749.745 ops/s
Iteration  19: 21121084.359 ops/s
Iteration  20: 21252655.484 ops/s
Iteration  21: 21145479.925 ops/s
Iteration  22: 20858297.089 ops/s
Iteration  23: 21356882.728 ops/s
Iteration  24: 21101630.731 ops/s
Iteration  25: 20911648.856 ops/s
Iteration  26: 21192983.198 ops/s
Iteration  27: 21185252.275 ops/s
Iteration  28: 21069678.403 ops/s
Iteration  29: 20252037.813 ops/s
Iteration  30: 20403016.215 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences":
  21054092.421 ±(99.9%) 194149.693 ops/s [Average]
  (min, avg, max) = (20252037.813, 21054092.421, 21459171.450), stdev = 290594.143
  CI (99.9%): [20859942.728, 21248242.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  21054092.421 ± 194149.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49408842.585 ops/s
# Warmup Iteration   2: 79523330.217 ops/s
# Warmup Iteration   3: 91638111.012 ops/s
# Warmup Iteration   4: 89814655.573 ops/s
# Warmup Iteration   5: 91351301.567 ops/s
# Warmup Iteration   6: 90993603.087 ops/s
# Warmup Iteration   7: 90274008.119 ops/s
# Warmup Iteration   8: 92054631.618 ops/s
# Warmup Iteration   9: 90540079.850 ops/s
# Warmup Iteration  10: 90958299.156 ops/s
# Warmup Iteration  11: 89770186.581 ops/s
# Warmup Iteration  12: 91435967.841 ops/s
# Warmup Iteration  13: 90935170.865 ops/s
# Warmup Iteration  14: 89794490.502 ops/s
# Warmup Iteration  15: 90039679.650 ops/s
# Warmup Iteration  16: 90797104.872 ops/s
# Warmup Iteration  17: 92350541.037 ops/s
# Warmup Iteration  18: 90780158.455 ops/s
# Warmup Iteration  19: 91133281.505 ops/s
# Warmup Iteration  20: 91301239.135 ops/s
# Warmup Iteration  21: 91162027.026 ops/s
# Warmup Iteration  22: 91839549.480 ops/s
# Warmup Iteration  23: 91596648.823 ops/s
# Warmup Iteration  24: 90715392.544 ops/s
# Warmup Iteration  25: 90551607.160 ops/s
# Warmup Iteration  26: 91000782.919 ops/s
# Warmup Iteration  27: 92193687.689 ops/s
# Warmup Iteration  28: 90434932.165 ops/s
# Warmup Iteration  29: 91651695.773 ops/s
# Warmup Iteration  30: 91468555.022 ops/s
Iteration   1: 91762417.897 ops/s
Iteration   2: 91733852.518 ops/s
Iteration   3: 90976937.058 ops/s
Iteration   4: 91009737.487 ops/s
Iteration   5: 89658246.675 ops/s
Iteration   6: 89397372.703 ops/s
Iteration   7: 92313531.483 ops/s
Iteration   8: 92436772.926 ops/s
Iteration   9: 91955869.153 ops/s
Iteration  10: 92417254.517 ops/s
Iteration  11: 91739036.318 ops/s
Iteration  12: 90917529.524 ops/s
Iteration  13: 91407575.380 ops/s
Iteration  14: 88269816.484 ops/s
Iteration  15: 90981090.909 ops/s
Iteration  16: 90026620.399 ops/s
Iteration  17: 91223243.934 ops/s
Iteration  18: 87460352.788 ops/s
Iteration  19: 89179390.093 ops/s
Iteration  20: 90458669.602 ops/s
Iteration  21: 91108582.595 ops/s
Iteration  22: 91288706.053 ops/s
Iteration  23: 91118820.590 ops/s
Iteration  24: 92017020.812 ops/s
Iteration  25: 90872436.263 ops/s
Iteration  26: 90434778.508 ops/s
Iteration  27: 91635315.756 ops/s
Iteration  28: 91888136.041 ops/s
Iteration  29: 92128781.931 ops/s
Iteration  30: 92540360.420 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_injectInto":
  91011941.894 ±(99.9%) 821299.152 ops/s [Average]
  (min, avg, max) = (87460352.788, 91011941.894, 92540360.420), stdev = 1229282.000
  CI (99.9%): [90190642.742, 91833241.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_injectInto  thrpt   30  91011941.894 ± 821299.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2626169.881 ops/s
# Warmup Iteration   2: 4195440.307 ops/s
# Warmup Iteration   3: 4842181.375 ops/s
# Warmup Iteration   4: 4862954.167 ops/s
# Warmup Iteration   5: 4884141.028 ops/s
# Warmup Iteration   6: 4855174.824 ops/s
# Warmup Iteration   7: 4793991.901 ops/s
# Warmup Iteration   8: 4804702.130 ops/s
# Warmup Iteration   9: 4782793.953 ops/s
# Warmup Iteration  10: 4853470.785 ops/s
# Warmup Iteration  11: 4829016.904 ops/s
# Warmup Iteration  12: 4874399.466 ops/s
# Warmup Iteration  13: 4877957.739 ops/s
# Warmup Iteration  14: 4841967.852 ops/s
# Warmup Iteration  15: 4825527.731 ops/s
# Warmup Iteration  16: 4916460.925 ops/s
# Warmup Iteration  17: 4828471.615 ops/s
# Warmup Iteration  18: 4904333.521 ops/s
# Warmup Iteration  19: 4887571.209 ops/s
# Warmup Iteration  20: 4896249.469 ops/s
# Warmup Iteration  21: 4912896.441 ops/s
# Warmup Iteration  22: 4892077.735 ops/s
# Warmup Iteration  23: 4904799.487 ops/s
# Warmup Iteration  24: 4867078.995 ops/s
# Warmup Iteration  25: 4932915.138 ops/s
# Warmup Iteration  26: 4909810.126 ops/s
# Warmup Iteration  27: 4884578.663 ops/s
# Warmup Iteration  28: 4792777.538 ops/s
# Warmup Iteration  29: 4788900.089 ops/s
# Warmup Iteration  30: 4889797.893 ops/s
Iteration   1: 4876637.232 ops/s
Iteration   2: 4833317.761 ops/s
Iteration   3: 4924426.591 ops/s
Iteration   4: 4805591.106 ops/s
Iteration   5: 4878952.938 ops/s
Iteration   6: 4966379.378 ops/s
Iteration   7: 4863953.084 ops/s
Iteration   8: 4862901.428 ops/s
Iteration   9: 4732972.210 ops/s
Iteration  10: 4597166.819 ops/s
Iteration  11: 4784572.722 ops/s
Iteration  12: 4866132.414 ops/s
Iteration  13: 4719446.933 ops/s
Iteration  14: 4747915.714 ops/s
Iteration  15: 4812594.196 ops/s
Iteration  16: 4912478.154 ops/s
Iteration  17: 4857984.734 ops/s
Iteration  18: 4870624.166 ops/s
Iteration  19: 4740791.224 ops/s
Iteration  20: 4766467.468 ops/s
Iteration  21: 4910548.127 ops/s
Iteration  22: 4777391.123 ops/s
Iteration  23: 4722149.685 ops/s
Iteration  24: 4948899.850 ops/s
Iteration  25: 4812444.089 ops/s
Iteration  26: 4737572.391 ops/s
Iteration  27: 4844777.525 ops/s
Iteration  28: 4956250.800 ops/s
Iteration  29: 4870558.901 ops/s
Iteration  30: 4867127.008 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_isEmpty":
  4828967.526 ±(99.9%) 56233.592 ops/s [Average]
  (min, avg, max) = (4597166.819, 4828967.526, 4966379.378), stdev = 84167.799
  CI (99.9%): [4772733.934, 4885201.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_isEmpty  thrpt   30  4828967.526 ± 56233.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 824673.802 ops/s
# Warmup Iteration   2: 810000.356 ops/s
# Warmup Iteration   3: 980943.720 ops/s
# Warmup Iteration   4: 1057636.681 ops/s
# Warmup Iteration   5: 1062271.819 ops/s
# Warmup Iteration   6: 1018719.180 ops/s
# Warmup Iteration   7: 1053677.708 ops/s
# Warmup Iteration   8: 1046430.109 ops/s
# Warmup Iteration   9: 1054318.442 ops/s
# Warmup Iteration  10: 1063200.453 ops/s
# Warmup Iteration  11: 1048953.738 ops/s
# Warmup Iteration  12: 1046049.770 ops/s
# Warmup Iteration  13: 961023.903 ops/s
# Warmup Iteration  14: 982511.481 ops/s
# Warmup Iteration  15: 1054566.806 ops/s
# Warmup Iteration  16: 1052215.001 ops/s
# Warmup Iteration  17: 1116167.533 ops/s
# Warmup Iteration  18: 1123345.517 ops/s
# Warmup Iteration  19: 1118235.244 ops/s
# Warmup Iteration  20: 1095470.268 ops/s
# Warmup Iteration  21: 1120798.327 ops/s
# Warmup Iteration  22: 1062793.403 ops/s
# Warmup Iteration  23: 1093367.694 ops/s
# Warmup Iteration  24: 1063404.158 ops/s
# Warmup Iteration  25: 1105637.127 ops/s
# Warmup Iteration  26: 1080457.169 ops/s
# Warmup Iteration  27: 1080066.932 ops/s
# Warmup Iteration  28: 1081186.033 ops/s
# Warmup Iteration  29: 1068068.532 ops/s
# Warmup Iteration  30: 1077298.364 ops/s
Iteration   1: 1103099.283 ops/s
Iteration   2: 1114705.745 ops/s
Iteration   3: 1078387.290 ops/s
Iteration   4: 1064625.352 ops/s
Iteration   5: 1081357.181 ops/s
Iteration   6: 1057556.820 ops/s
Iteration   7: 1127162.124 ops/s
Iteration   8: 1100080.874 ops/s
Iteration   9: 1102606.650 ops/s
Iteration  10: 1115726.316 ops/s
Iteration  11: 1113033.931 ops/s
Iteration  12: 1127403.872 ops/s
Iteration  13: 1120956.454 ops/s
Iteration  14: 1120559.956 ops/s
Iteration  15: 1107520.418 ops/s
Iteration  16: 1082970.203 ops/s
Iteration  17: 1123477.587 ops/s
Iteration  18: 1115170.326 ops/s
Iteration  19: 1122761.708 ops/s
Iteration  20: 1129793.309 ops/s
Iteration  21: 1116710.412 ops/s
Iteration  22: 1111788.668 ops/s
Iteration  23: 1114677.263 ops/s
Iteration  24: 1103610.434 ops/s
Iteration  25: 1115023.946 ops/s
Iteration  26: 1125197.192 ops/s
Iteration  27: 1140860.897 ops/s
Iteration  28: 1134581.425 ops/s
Iteration  29: 1124009.526 ops/s
Iteration  30: 1100829.379 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws":
  1109874.818 ±(99.9%) 13261.754 ops/s [Average]
  (min, avg, max) = (1057556.820, 1109874.818, 1140860.897), stdev = 19849.570
  CI (99.9%): [1096613.064, 1123136.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1109874.818 ± 13261.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840449.282 ops/s
# Warmup Iteration   2: 853460.980 ops/s
# Warmup Iteration   3: 1033460.020 ops/s
# Warmup Iteration   4: 1103795.762 ops/s
# Warmup Iteration   5: 1102246.027 ops/s
# Warmup Iteration   6: 1064177.269 ops/s
# Warmup Iteration   7: 1085924.930 ops/s
# Warmup Iteration   8: 1082591.305 ops/s
# Warmup Iteration   9: 1088263.707 ops/s
# Warmup Iteration  10: 1046822.316 ops/s
# Warmup Iteration  11: 1077897.383 ops/s
# Warmup Iteration  12: 1086374.855 ops/s
# Warmup Iteration  13: 984897.162 ops/s
# Warmup Iteration  14: 924525.920 ops/s
# Warmup Iteration  15: 1059353.993 ops/s
# Warmup Iteration  16: 1067639.197 ops/s
# Warmup Iteration  17: 1121797.746 ops/s
# Warmup Iteration  18: 1111494.947 ops/s
# Warmup Iteration  19: 1155077.352 ops/s
# Warmup Iteration  20: 1159211.038 ops/s
# Warmup Iteration  21: 1160069.574 ops/s
# Warmup Iteration  22: 1163469.921 ops/s
# Warmup Iteration  23: 1145073.042 ops/s
# Warmup Iteration  24: 1148452.720 ops/s
# Warmup Iteration  25: 1157959.111 ops/s
# Warmup Iteration  26: 1160666.818 ops/s
# Warmup Iteration  27: 1144592.011 ops/s
# Warmup Iteration  28: 1145755.506 ops/s
# Warmup Iteration  29: 1150919.782 ops/s
# Warmup Iteration  30: 1157107.145 ops/s
Iteration   1: 1143885.942 ops/s
Iteration   2: 1164738.459 ops/s
Iteration   3: 1116839.670 ops/s
Iteration   4: 1158937.446 ops/s
Iteration   5: 1165478.375 ops/s
Iteration   6: 1157596.083 ops/s
Iteration   7: 1149078.726 ops/s
Iteration   8: 1146057.975 ops/s
Iteration   9: 1173125.636 ops/s
Iteration  10: 1172972.578 ops/s
Iteration  11: 1107643.431 ops/s
Iteration  12: 1109703.695 ops/s
Iteration  13: 1114158.436 ops/s
Iteration  14: 1163547.732 ops/s
Iteration  15: 1129552.265 ops/s
Iteration  16: 1116200.046 ops/s
Iteration  17: 1121236.665 ops/s
Iteration  18: 1086655.257 ops/s
Iteration  19: 1120292.230 ops/s
Iteration  20: 1123264.931 ops/s
Iteration  21: 1121501.736 ops/s
Iteration  22: 1131227.505 ops/s
Iteration  23: 1090402.711 ops/s
Iteration  24: 1115209.627 ops/s
Iteration  25: 1081069.284 ops/s
Iteration  26: 1091260.375 ops/s
Iteration  27: 1099119.260 ops/s
Iteration  28: 1078468.751 ops/s
Iteration  29: 1102173.566 ops/s
Iteration  30: 1133421.711 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1126160.670 ±(99.9%) 18832.216 ops/s [Average]
  (min, avg, max) = (1078468.751, 1126160.670, 1173125.636), stdev = 28187.176
  CI (99.9%): [1107328.455, 1144992.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1126160.670 ± 18832.216  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 836069.239 ops/s
# Warmup Iteration   2: 849537.035 ops/s
# Warmup Iteration   3: 1027923.184 ops/s
# Warmup Iteration   4: 1073044.538 ops/s
# Warmup Iteration   5: 1066645.646 ops/s
# Warmup Iteration   6: 1044737.540 ops/s
# Warmup Iteration   7: 1020738.752 ops/s
# Warmup Iteration   8: 1011851.758 ops/s
# Warmup Iteration   9: 1036485.400 ops/s
# Warmup Iteration  10: 1042612.273 ops/s
# Warmup Iteration  11: 1032038.100 ops/s
# Warmup Iteration  12: 1065163.113 ops/s
# Warmup Iteration  13: 967937.879 ops/s
# Warmup Iteration  14: 988468.197 ops/s
# Warmup Iteration  15: 1072383.054 ops/s
# Warmup Iteration  16: 1068859.516 ops/s
# Warmup Iteration  17: 1103233.287 ops/s
# Warmup Iteration  18: 1102162.656 ops/s
# Warmup Iteration  19: 1122230.639 ops/s
# Warmup Iteration  20: 1124199.263 ops/s
# Warmup Iteration  21: 1149247.358 ops/s
# Warmup Iteration  22: 1083166.685 ops/s
# Warmup Iteration  23: 1136232.107 ops/s
# Warmup Iteration  24: 1143295.781 ops/s
# Warmup Iteration  25: 1132332.788 ops/s
# Warmup Iteration  26: 1156153.956 ops/s
# Warmup Iteration  27: 1137901.359 ops/s
# Warmup Iteration  28: 1135484.074 ops/s
# Warmup Iteration  29: 1147289.768 ops/s
# Warmup Iteration  30: 1140635.782 ops/s
Iteration   1: 1144196.450 ops/s
Iteration   2: 1089283.680 ops/s
Iteration   3: 1098166.793 ops/s
Iteration   4: 1073899.160 ops/s
Iteration   5: 1109547.917 ops/s
Iteration   6: 1109718.339 ops/s
Iteration   7: 1090457.615 ops/s
Iteration   8: 1103811.582 ops/s
Iteration   9: 1061452.805 ops/s
Iteration  10: 1099989.992 ops/s
Iteration  11: 1092178.844 ops/s
Iteration  12: 1153963.397 ops/s
Iteration  13: 1154872.271 ops/s
Iteration  14: 1150856.151 ops/s
Iteration  15: 1146234.610 ops/s
Iteration  16: 1119833.447 ops/s
Iteration  17: 1125737.316 ops/s
Iteration  18: 1157276.010 ops/s
Iteration  19: 1146329.115 ops/s
Iteration  20: 1143945.477 ops/s
Iteration  21: 1139615.822 ops/s
Iteration  22: 1153774.647 ops/s
Iteration  23: 1144157.987 ops/s
Iteration  24: 1152623.026 ops/s
Iteration  25: 1152316.489 ops/s
Iteration  26: 1154478.758 ops/s
Iteration  27: 1129859.053 ops/s
Iteration  28: 1136123.218 ops/s
Iteration  29: 1115158.746 ops/s
Iteration  30: 1129542.771 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1125980.050 ±(99.9%) 18228.441 ops/s [Average]
  (min, avg, max) = (1061452.805, 1125980.050, 1157276.010), stdev = 27283.474
  CI (99.9%): [1107751.609, 1144208.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1125980.050 ± 18228.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 813028.917 ops/s
# Warmup Iteration   2: 804526.174 ops/s
# Warmup Iteration   3: 1025773.054 ops/s
# Warmup Iteration   4: 1056585.459 ops/s
# Warmup Iteration   5: 1054894.562 ops/s
# Warmup Iteration   6: 1071809.506 ops/s
# Warmup Iteration   7: 1059731.116 ops/s
# Warmup Iteration   8: 1072296.511 ops/s
# Warmup Iteration   9: 1048865.011 ops/s
# Warmup Iteration  10: 1025642.180 ops/s
# Warmup Iteration  11: 1040761.879 ops/s
# Warmup Iteration  12: 1024731.151 ops/s
# Warmup Iteration  13: 889946.990 ops/s
# Warmup Iteration  14: 1052283.043 ops/s
# Warmup Iteration  15: 1051178.528 ops/s
# Warmup Iteration  16: 1053278.960 ops/s
# Warmup Iteration  17: 1119397.579 ops/s
# Warmup Iteration  18: 1115655.148 ops/s
# Warmup Iteration  19: 1119687.788 ops/s
# Warmup Iteration  20: 1087167.316 ops/s
# Warmup Iteration  21: 1121834.054 ops/s
# Warmup Iteration  22: 1109304.178 ops/s
# Warmup Iteration  23: 1111850.845 ops/s
# Warmup Iteration  24: 1113871.960 ops/s
# Warmup Iteration  25: 1113027.697 ops/s
# Warmup Iteration  26: 1112758.258 ops/s
# Warmup Iteration  27: 1118803.233 ops/s
# Warmup Iteration  28: 1114304.569 ops/s
# Warmup Iteration  29: 1120569.056 ops/s
# Warmup Iteration  30: 1114923.547 ops/s
Iteration   1: 1112731.118 ops/s
Iteration   2: 1084342.141 ops/s
Iteration   3: 1084056.067 ops/s
Iteration   4: 1108685.909 ops/s
Iteration   5: 1122995.472 ops/s
Iteration   6: 1114101.954 ops/s
Iteration   7: 1124988.599 ops/s
Iteration   8: 1114540.926 ops/s
Iteration   9: 1122757.221 ops/s
Iteration  10: 1111483.796 ops/s
Iteration  11: 1104845.773 ops/s
Iteration  12: 1099206.758 ops/s
Iteration  13: 1120592.761 ops/s
Iteration  14: 1126460.905 ops/s
Iteration  15: 1065536.231 ops/s
Iteration  16: 1115287.157 ops/s
Iteration  17: 1078837.547 ops/s
Iteration  18: 1084301.847 ops/s
Iteration  19: 1088803.555 ops/s
Iteration  20: 1095435.654 ops/s
Iteration  21: 1114202.276 ops/s
Iteration  22: 1113212.441 ops/s
Iteration  23: 1119919.546 ops/s
Iteration  24: 1087637.264 ops/s
Iteration  25: 1075388.689 ops/s
Iteration  26: 1092491.994 ops/s
Iteration  27: 1097204.756 ops/s
Iteration  28: 1112881.863 ops/s
Iteration  29: 1107243.938 ops/s
Iteration  30: 1115543.333 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1103857.250 ±(99.9%) 11075.879 ops/s [Average]
  (min, avg, max) = (1065536.231, 1103857.250, 1126460.905), stdev = 16577.856
  CI (99.9%): [1092781.371, 1114933.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1103857.250 ± 11075.879  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794768.239 ops/s
# Warmup Iteration   2: 824360.250 ops/s
# Warmup Iteration   3: 1011085.333 ops/s
# Warmup Iteration   4: 1044013.076 ops/s
# Warmup Iteration   5: 1014972.518 ops/s
# Warmup Iteration   6: 1042452.928 ops/s
# Warmup Iteration   7: 1035887.561 ops/s
# Warmup Iteration   8: 1042188.016 ops/s
# Warmup Iteration   9: 1043321.229 ops/s
# Warmup Iteration  10: 1044013.025 ops/s
# Warmup Iteration  11: 1041544.641 ops/s
# Warmup Iteration  12: 1043403.679 ops/s
# Warmup Iteration  13: 867645.350 ops/s
# Warmup Iteration  14: 1036987.901 ops/s
# Warmup Iteration  15: 1040786.180 ops/s
# Warmup Iteration  16: 1046059.562 ops/s
# Warmup Iteration  17: 1076236.573 ops/s
# Warmup Iteration  18: 1104866.114 ops/s
# Warmup Iteration  19: 1106545.025 ops/s
# Warmup Iteration  20: 1104405.267 ops/s
# Warmup Iteration  21: 1098013.258 ops/s
# Warmup Iteration  22: 1117081.654 ops/s
# Warmup Iteration  23: 1107955.430 ops/s
# Warmup Iteration  24: 1090831.294 ops/s
# Warmup Iteration  25: 1091534.511 ops/s
# Warmup Iteration  26: 1099556.554 ops/s
# Warmup Iteration  27: 1103551.410 ops/s
# Warmup Iteration  28: 1065015.408 ops/s
# Warmup Iteration  29: 1078204.058 ops/s
# Warmup Iteration  30: 1105370.978 ops/s
Iteration   1: 1092398.706 ops/s
Iteration   2: 1039819.423 ops/s
Iteration   3: 1054531.729 ops/s
Iteration   4: 1091040.914 ops/s
Iteration   5: 1040315.789 ops/s
Iteration   6: 1069252.122 ops/s
Iteration   7: 1106960.057 ops/s
Iteration   8: 1061974.283 ops/s
Iteration   9: 1089156.604 ops/s
Iteration  10: 1100363.032 ops/s
Iteration  11: 1098736.390 ops/s
Iteration  12: 1104716.899 ops/s
Iteration  13: 1097712.082 ops/s
Iteration  14: 1089312.901 ops/s
Iteration  15: 1072283.038 ops/s
Iteration  16: 1074652.393 ops/s
Iteration  17: 1105839.688 ops/s
Iteration  18: 1040762.593 ops/s
Iteration  19: 1068380.664 ops/s
Iteration  20: 1052779.898 ops/s
Iteration  21: 1107577.212 ops/s
Iteration  22: 1115510.772 ops/s
Iteration  23: 1122970.698 ops/s
Iteration  24: 1112728.067 ops/s
Iteration  25: 1063323.114 ops/s
Iteration  26: 1071993.689 ops/s
Iteration  27: 1062608.099 ops/s
Iteration  28: 1062158.294 ops/s
Iteration  29: 1049627.769 ops/s
Iteration  30: 1077210.757 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1079889.923 ±(99.9%) 16245.081 ops/s [Average]
  (min, avg, max) = (1039819.423, 1079889.923, 1122970.698), stdev = 24314.875
  CI (99.9%): [1063644.841, 1096135.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1079889.923 ± 16245.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1015526.527 ops/s
# Warmup Iteration   2: 2113013.039 ops/s
# Warmup Iteration   3: 1833553.845 ops/s
# Warmup Iteration   4: 2075669.152 ops/s
# Warmup Iteration   5: 2118475.392 ops/s
# Warmup Iteration   6: 2129269.417 ops/s
# Warmup Iteration   7: 2132357.802 ops/s
# Warmup Iteration   8: 2157428.658 ops/s
# Warmup Iteration   9: 2134872.051 ops/s
# Warmup Iteration  10: 2064806.052 ops/s
# Warmup Iteration  11: 2126434.426 ops/s
# Warmup Iteration  12: 2132597.468 ops/s
# Warmup Iteration  13: 2141667.461 ops/s
# Warmup Iteration  14: 2120203.044 ops/s
# Warmup Iteration  15: 2150670.006 ops/s
# Warmup Iteration  16: 2105631.820 ops/s
# Warmup Iteration  17: 2131465.910 ops/s
# Warmup Iteration  18: 2072377.823 ops/s
# Warmup Iteration  19: 2096094.305 ops/s
# Warmup Iteration  20: 2130820.359 ops/s
# Warmup Iteration  21: 2155792.399 ops/s
# Warmup Iteration  22: 2111515.298 ops/s
# Warmup Iteration  23: 2071722.915 ops/s
# Warmup Iteration  24: 2053118.876 ops/s
# Warmup Iteration  25: 2076441.619 ops/s
# Warmup Iteration  26: 2069528.603 ops/s
# Warmup Iteration  27: 2037866.487 ops/s
# Warmup Iteration  28: 2089057.336 ops/s
# Warmup Iteration  29: 2124931.350 ops/s
# Warmup Iteration  30: 2139152.263 ops/s
Iteration   1: 2119675.690 ops/s
Iteration   2: 2116646.873 ops/s
Iteration   3: 2147787.815 ops/s
Iteration   4: 2137108.443 ops/s
Iteration   5: 2143787.052 ops/s
Iteration   6: 2130244.032 ops/s
Iteration   7: 2098113.371 ops/s
Iteration   8: 2075236.399 ops/s
Iteration   9: 2144731.116 ops/s
Iteration  10: 2144237.580 ops/s
Iteration  11: 2150304.969 ops/s
Iteration  12: 2147250.005 ops/s
Iteration  13: 2102669.302 ops/s
Iteration  14: 2119014.859 ops/s
Iteration  15: 2110015.303 ops/s
Iteration  16: 2132273.402 ops/s
Iteration  17: 2163796.517 ops/s
Iteration  18: 2124112.917 ops/s
Iteration  19: 2121959.552 ops/s
Iteration  20: 2060800.533 ops/s
Iteration  21: 2139314.807 ops/s
Iteration  22: 2147875.560 ops/s
Iteration  23: 2141645.248 ops/s
Iteration  24: 2132463.890 ops/s
Iteration  25: 2142941.119 ops/s
Iteration  26: 2110854.712 ops/s
Iteration  27: 2093750.747 ops/s
Iteration  28: 2041792.367 ops/s
Iteration  29: 2016176.358 ops/s
Iteration  30: 2103590.637 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_makeString":
  2118672.372 ±(99.9%) 22629.634 ops/s [Average]
  (min, avg, max) = (2016176.358, 2118672.372, 2163796.517), stdev = 33870.974
  CI (99.9%): [2096042.738, 2141302.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_makeString  thrpt   30  2118672.372 ± 22629.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4089372.943 ops/s
# Warmup Iteration   2: 8254805.238 ops/s
# Warmup Iteration   3: 8291562.581 ops/s
# Warmup Iteration   4: 6976257.063 ops/s
# Warmup Iteration   5: 8456542.580 ops/s
# Warmup Iteration   6: 8418287.797 ops/s
# Warmup Iteration   7: 8450035.952 ops/s
# Warmup Iteration   8: 8472183.159 ops/s
# Warmup Iteration   9: 8442169.698 ops/s
# Warmup Iteration  10: 8446750.993 ops/s
# Warmup Iteration  11: 8304905.278 ops/s
# Warmup Iteration  12: 8521832.138 ops/s
# Warmup Iteration  13: 8439898.555 ops/s
# Warmup Iteration  14: 8455975.806 ops/s
# Warmup Iteration  15: 8393080.055 ops/s
# Warmup Iteration  16: 8347893.490 ops/s
# Warmup Iteration  17: 8456904.708 ops/s
# Warmup Iteration  18: 8533682.792 ops/s
# Warmup Iteration  19: 8270635.995 ops/s
# Warmup Iteration  20: 8208522.191 ops/s
# Warmup Iteration  21: 8480681.024 ops/s
# Warmup Iteration  22: 8446126.616 ops/s
# Warmup Iteration  23: 8553888.509 ops/s
# Warmup Iteration  24: 8549909.228 ops/s
# Warmup Iteration  25: 8509561.690 ops/s
# Warmup Iteration  26: 8548144.318 ops/s
# Warmup Iteration  27: 8078294.948 ops/s
# Warmup Iteration  28: 8406170.228 ops/s
# Warmup Iteration  29: 8096813.987 ops/s
# Warmup Iteration  30: 8257158.170 ops/s
Iteration   1: 8433394.808 ops/s
Iteration   2: 8518336.424 ops/s
Iteration   3: 8278801.023 ops/s
Iteration   4: 8163923.431 ops/s
Iteration   5: 8098325.338 ops/s
Iteration   6: 8172693.930 ops/s
Iteration   7: 8372786.276 ops/s
Iteration   8: 8224858.256 ops/s
Iteration   9: 8340757.680 ops/s
Iteration  10: 8189845.201 ops/s
Iteration  11: 8405509.016 ops/s
Iteration  12: 8271834.605 ops/s
Iteration  13: 8509528.999 ops/s
Iteration  14: 8424083.761 ops/s
Iteration  15: 8377376.015 ops/s
Iteration  16: 8496653.274 ops/s
Iteration  17: 8503249.566 ops/s
Iteration  18: 8431282.621 ops/s
Iteration  19: 8428158.581 ops/s
Iteration  20: 8551466.331 ops/s
Iteration  21: 8572615.253 ops/s
Iteration  22: 8597438.037 ops/s
Iteration  23: 8497677.280 ops/s
Iteration  24: 8470300.065 ops/s
Iteration  25: 8399598.925 ops/s
Iteration  26: 8512169.742 ops/s
Iteration  27: 8399537.485 ops/s
Iteration  28: 8364822.445 ops/s
Iteration  29: 8342471.456 ops/s
Iteration  30: 8048506.823 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollection":
  8379933.422 ±(99.9%) 95572.625 ops/s [Average]
  (min, avg, max) = (8048506.823, 8379933.422, 8597438.037), stdev = 143048.617
  CI (99.9%): [8284360.796, 8475506.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_newCollection  thrpt   30  8379933.422 ± 95572.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9937432.670 ops/s
# Warmup Iteration   2: 15106996.776 ops/s
# Warmup Iteration   3: 17821021.745 ops/s
# Warmup Iteration   4: 17672557.447 ops/s
# Warmup Iteration   5: 17248451.382 ops/s
# Warmup Iteration   6: 17995244.544 ops/s
# Warmup Iteration   7: 18080634.020 ops/s
# Warmup Iteration   8: 18053940.001 ops/s
# Warmup Iteration   9: 17992025.136 ops/s
# Warmup Iteration  10: 18026974.128 ops/s
# Warmup Iteration  11: 17956842.173 ops/s
# Warmup Iteration  12: 17933620.353 ops/s
# Warmup Iteration  13: 18158627.327 ops/s
# Warmup Iteration  14: 18076887.881 ops/s
# Warmup Iteration  15: 17736157.795 ops/s
# Warmup Iteration  16: 17922634.307 ops/s
# Warmup Iteration  17: 18007876.745 ops/s
# Warmup Iteration  18: 18153084.208 ops/s
# Warmup Iteration  19: 17776314.527 ops/s
# Warmup Iteration  20: 18096192.256 ops/s
# Warmup Iteration  21: 17894740.721 ops/s
# Warmup Iteration  22: 18162818.754 ops/s
# Warmup Iteration  23: 17676725.789 ops/s
# Warmup Iteration  24: 17934501.863 ops/s
# Warmup Iteration  25: 18069597.758 ops/s
# Warmup Iteration  26: 17665744.386 ops/s
# Warmup Iteration  27: 17716477.523 ops/s
# Warmup Iteration  28: 17690032.660 ops/s
# Warmup Iteration  29: 17530860.038 ops/s
# Warmup Iteration  30: 17616058.951 ops/s
Iteration   1: 17825220.731 ops/s
Iteration   2: 18144118.655 ops/s
Iteration   3: 18125766.702 ops/s
Iteration   4: 18040494.629 ops/s
Iteration   5: 18235464.166 ops/s
Iteration   6: 18138403.692 ops/s
Iteration   7: 18079109.532 ops/s
Iteration   8: 17713741.112 ops/s
Iteration   9: 17644042.372 ops/s
Iteration  10: 18043979.991 ops/s
Iteration  11: 17581747.145 ops/s
Iteration  12: 17841221.468 ops/s
Iteration  13: 17922702.966 ops/s
Iteration  14: 17635822.618 ops/s
Iteration  15: 17752820.714 ops/s
Iteration  16: 17875415.707 ops/s
Iteration  17: 18183095.247 ops/s
Iteration  18: 17839186.880 ops/s
Iteration  19: 17450251.814 ops/s
Iteration  20: 18204361.761 ops/s
Iteration  21: 18099555.449 ops/s
Iteration  22: 17856354.355 ops/s
Iteration  23: 17877620.910 ops/s
Iteration  24: 18179532.933 ops/s
Iteration  25: 17501245.084 ops/s
Iteration  26: 17683890.153 ops/s
Iteration  27: 17938759.834 ops/s
Iteration  28: 17865165.430 ops/s
Iteration  29: 18136640.814 ops/s
Iteration  30: 17716865.524 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_newCollectionWith":
  17904419.946 ±(99.9%) 149502.168 ops/s [Average]
  (min, avg, max) = (17450251.814, 17904419.946, 18235464.166), stdev = 223767.824
  CI (99.9%): [17754917.778, 18053922.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  17904419.946 ± 149502.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17773579.150 ops/s
# Warmup Iteration   2: 30710151.688 ops/s
# Warmup Iteration   3: 35444895.997 ops/s
# Warmup Iteration   4: 36147567.930 ops/s
# Warmup Iteration   5: 35895202.469 ops/s
# Warmup Iteration   6: 36024011.024 ops/s
# Warmup Iteration   7: 36481737.282 ops/s
# Warmup Iteration   8: 35350811.675 ops/s
# Warmup Iteration   9: 35300691.837 ops/s
# Warmup Iteration  10: 35538747.122 ops/s
# Warmup Iteration  11: 35156306.024 ops/s
# Warmup Iteration  12: 35979140.149 ops/s
# Warmup Iteration  13: 34995683.882 ops/s
# Warmup Iteration  14: 35855539.323 ops/s
# Warmup Iteration  15: 35885783.879 ops/s
# Warmup Iteration  16: 35685004.310 ops/s
# Warmup Iteration  17: 35537357.660 ops/s
# Warmup Iteration  18: 36003937.632 ops/s
# Warmup Iteration  19: 36168309.818 ops/s
# Warmup Iteration  20: 35176020.028 ops/s
# Warmup Iteration  21: 35914206.882 ops/s
# Warmup Iteration  22: 36534111.228 ops/s
# Warmup Iteration  23: 36522291.380 ops/s
# Warmup Iteration  24: 35146668.025 ops/s
# Warmup Iteration  25: 36263927.116 ops/s
# Warmup Iteration  26: 36925356.312 ops/s
# Warmup Iteration  27: 36299636.711 ops/s
# Warmup Iteration  28: 36541600.226 ops/s
# Warmup Iteration  29: 36503149.932 ops/s
# Warmup Iteration  30: 36000254.757 ops/s
Iteration   1: 35182244.498 ops/s
Iteration   2: 36734390.032 ops/s
Iteration   3: 35992285.214 ops/s
Iteration   4: 35222854.075 ops/s
Iteration   5: 36070511.120 ops/s
Iteration   6: 35394923.603 ops/s
Iteration   7: 36100250.385 ops/s
Iteration   8: 35996259.170 ops/s
Iteration   9: 35825639.382 ops/s
Iteration  10: 36807639.131 ops/s
Iteration  11: 36429241.299 ops/s
Iteration  12: 36677907.823 ops/s
Iteration  13: 37013956.512 ops/s
Iteration  14: 35938418.264 ops/s
Iteration  15: 36330455.834 ops/s
Iteration  16: 36329695.806 ops/s
Iteration  17: 35716647.201 ops/s
Iteration  18: 36834085.227 ops/s
Iteration  19: 36949218.939 ops/s
Iteration  20: 36992896.672 ops/s
Iteration  21: 36505261.288 ops/s
Iteration  22: 36537589.013 ops/s
Iteration  23: 36655132.236 ops/s
Iteration  24: 36776609.246 ops/s
Iteration  25: 35381769.690 ops/s
Iteration  26: 36491105.366 ops/s
Iteration  27: 35948058.325 ops/s
Iteration  28: 36206261.520 ops/s
Iteration  29: 36248741.844 ops/s
Iteration  30: 36366705.060 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_noneSatisfy":
  36255225.126 ±(99.9%) 349145.707 ops/s [Average]
  (min, avg, max) = (35182244.498, 36255225.126, 37013956.512), stdev = 522584.897
  CI (99.9%): [35906079.419, 36604370.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  36255225.126 ± 349145.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79065810.023 ops/s
# Warmup Iteration   2: 121601192.662 ops/s
# Warmup Iteration   3: 164981594.254 ops/s
# Warmup Iteration   4: 160623224.548 ops/s
# Warmup Iteration   5: 164334724.810 ops/s
# Warmup Iteration   6: 164942347.825 ops/s
# Warmup Iteration   7: 164313200.630 ops/s
# Warmup Iteration   8: 160385236.704 ops/s
# Warmup Iteration   9: 162873133.290 ops/s
# Warmup Iteration  10: 163377901.179 ops/s
# Warmup Iteration  11: 165748477.536 ops/s
# Warmup Iteration  12: 164416664.689 ops/s
# Warmup Iteration  13: 164478157.740 ops/s
# Warmup Iteration  14: 164332845.597 ops/s
# Warmup Iteration  15: 162679248.092 ops/s
# Warmup Iteration  16: 160670626.519 ops/s
# Warmup Iteration  17: 164193127.567 ops/s
# Warmup Iteration  18: 162679697.392 ops/s
# Warmup Iteration  19: 164248224.791 ops/s
# Warmup Iteration  20: 163861055.675 ops/s
# Warmup Iteration  21: 163589345.619 ops/s
# Warmup Iteration  22: 158467145.123 ops/s
# Warmup Iteration  23: 164695123.419 ops/s
# Warmup Iteration  24: 165211181.616 ops/s
# Warmup Iteration  25: 161514456.124 ops/s
# Warmup Iteration  26: 161049244.829 ops/s
# Warmup Iteration  27: 162267630.649 ops/s
# Warmup Iteration  28: 163781211.494 ops/s
# Warmup Iteration  29: 164299922.261 ops/s
# Warmup Iteration  30: 161866101.973 ops/s
Iteration   1: 160818019.980 ops/s
Iteration   2: 166314587.365 ops/s
Iteration   3: 162574971.867 ops/s
Iteration   4: 164851778.268 ops/s
Iteration   5: 165171023.093 ops/s
Iteration   6: 163871687.515 ops/s
Iteration   7: 165341383.019 ops/s
Iteration   8: 164040182.504 ops/s
Iteration   9: 165869262.707 ops/s
Iteration  10: 163358201.855 ops/s
Iteration  11: 160001716.919 ops/s
Iteration  12: 162776231.878 ops/s
Iteration  13: 159766061.441 ops/s
Iteration  14: 162722606.575 ops/s
Iteration  15: 165063751.616 ops/s
Iteration  16: 163865875.603 ops/s
Iteration  17: 162613928.696 ops/s
Iteration  18: 165497676.545 ops/s
Iteration  19: 164242740.884 ops/s
Iteration  20: 164617801.559 ops/s
Iteration  21: 164640283.413 ops/s
Iteration  22: 165624218.592 ops/s
Iteration  23: 163585292.890 ops/s
Iteration  24: 165987357.389 ops/s
Iteration  25: 168179558.229 ops/s
Iteration  26: 165370535.947 ops/s
Iteration  27: 165202096.526 ops/s
Iteration  28: 165184874.331 ops/s
Iteration  29: 163302788.408 ops/s
Iteration  30: 158440771.718 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_notEmpty":
  163963242.244 ±(99.9%) 1408269.942 ops/s [Average]
  (min, avg, max) = (158440771.718, 163963242.244, 168179558.229), stdev = 2107832.312
  CI (99.9%): [162554972.302, 165371512.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt          Score         Error  Units
BooleanHashBagTest._Benchmark.benchmark_notEmpty  thrpt   30  163963242.244 ± 1408269.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8724147.800 ops/s
# Warmup Iteration   2: 16098215.141 ops/s
# Warmup Iteration   3: 15032318.959 ops/s
# Warmup Iteration   4: 16926135.138 ops/s
# Warmup Iteration   5: 16997520.090 ops/s
# Warmup Iteration   6: 16483830.518 ops/s
# Warmup Iteration   7: 16833432.266 ops/s
# Warmup Iteration   8: 16834695.782 ops/s
# Warmup Iteration   9: 16756583.323 ops/s
# Warmup Iteration  10: 16649056.008 ops/s
# Warmup Iteration  11: 16764810.787 ops/s
# Warmup Iteration  12: 16566009.726 ops/s
# Warmup Iteration  13: 16379601.298 ops/s
# Warmup Iteration  14: 16630220.100 ops/s
# Warmup Iteration  15: 16704496.934 ops/s
# Warmup Iteration  16: 16779324.688 ops/s
# Warmup Iteration  17: 16776858.553 ops/s
# Warmup Iteration  18: 16939763.343 ops/s
# Warmup Iteration  19: 16762463.591 ops/s
# Warmup Iteration  20: 16208472.463 ops/s
# Warmup Iteration  21: 16621218.375 ops/s
# Warmup Iteration  22: 16837727.570 ops/s
# Warmup Iteration  23: 16993101.607 ops/s
# Warmup Iteration  24: 16944802.023 ops/s
# Warmup Iteration  25: 17172744.541 ops/s
# Warmup Iteration  26: 16974470.449 ops/s
# Warmup Iteration  27: 16902020.054 ops/s
# Warmup Iteration  28: 17072746.689 ops/s
# Warmup Iteration  29: 16758053.471 ops/s
# Warmup Iteration  30: 16985628.055 ops/s
Iteration   1: 16627686.561 ops/s
Iteration   2: 16836367.069 ops/s
Iteration   3: 17052408.821 ops/s
Iteration   4: 16952828.572 ops/s
Iteration   5: 16975375.587 ops/s
Iteration   6: 16803771.421 ops/s
Iteration   7: 16993315.586 ops/s
Iteration   8: 16597199.927 ops/s
Iteration   9: 16485092.800 ops/s
Iteration  10: 16046550.812 ops/s
Iteration  11: 16612140.605 ops/s
Iteration  12: 16821552.197 ops/s
Iteration  13: 16625494.082 ops/s
Iteration  14: 16819586.364 ops/s
Iteration  15: 16551806.854 ops/s
Iteration  16: 17238094.633 ops/s
Iteration  17: 17145531.404 ops/s
Iteration  18: 17138782.750 ops/s
Iteration  19: 16862661.137 ops/s
Iteration  20: 16548932.175 ops/s
Iteration  21: 17126273.835 ops/s
Iteration  22: 17015328.575 ops/s
Iteration  23: 17098196.847 ops/s
Iteration  24: 16788211.215 ops/s
Iteration  25: 16985487.472 ops/s
Iteration  26: 16857806.181 ops/s
Iteration  27: 16093703.845 ops/s
Iteration  28: 16854968.193 ops/s
Iteration  29: 17013538.821 ops/s
Iteration  30: 17014749.328 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduce":
  16819448.122 ±(99.9%) 191291.145 ops/s [Average]
  (min, avg, max) = (16046550.812, 16819448.122, 17238094.633), stdev = 286315.602
  CI (99.9%): [16628156.978, 17010739.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_reduce  thrpt   30  16819448.122 ± 191291.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8055394.284 ops/s
# Warmup Iteration   2: 16482403.770 ops/s
# Warmup Iteration   3: 13748778.690 ops/s
# Warmup Iteration   4: 16792943.994 ops/s
# Warmup Iteration   5: 16718227.076 ops/s
# Warmup Iteration   6: 16897299.570 ops/s
# Warmup Iteration   7: 16878511.995 ops/s
# Warmup Iteration   8: 17003788.262 ops/s
# Warmup Iteration   9: 16822467.047 ops/s
# Warmup Iteration  10: 16992942.180 ops/s
# Warmup Iteration  11: 16748606.911 ops/s
# Warmup Iteration  12: 16914742.888 ops/s
# Warmup Iteration  13: 16974708.328 ops/s
# Warmup Iteration  14: 16990337.773 ops/s
# Warmup Iteration  15: 16913386.974 ops/s
# Warmup Iteration  16: 17016603.917 ops/s
# Warmup Iteration  17: 17042738.147 ops/s
# Warmup Iteration  18: 16732316.412 ops/s
# Warmup Iteration  19: 16856384.782 ops/s
# Warmup Iteration  20: 16770035.613 ops/s
# Warmup Iteration  21: 16717131.335 ops/s
# Warmup Iteration  22: 16353914.314 ops/s
# Warmup Iteration  23: 16897458.790 ops/s
# Warmup Iteration  24: 17015658.697 ops/s
# Warmup Iteration  25: 16940707.031 ops/s
# Warmup Iteration  26: 16933171.847 ops/s
# Warmup Iteration  27: 16468855.983 ops/s
# Warmup Iteration  28: 16361460.156 ops/s
# Warmup Iteration  29: 16626672.465 ops/s
# Warmup Iteration  30: 16990218.670 ops/s
Iteration   1: 16927234.627 ops/s
Iteration   2: 17143768.744 ops/s
Iteration   3: 16812503.001 ops/s
Iteration   4: 16997236.189 ops/s
Iteration   5: 16851368.072 ops/s
Iteration   6: 16804710.727 ops/s
Iteration   7: 16966574.132 ops/s
Iteration   8: 16432728.013 ops/s
Iteration   9: 16594240.012 ops/s
Iteration  10: 17017986.233 ops/s
Iteration  11: 16844710.926 ops/s
Iteration  12: 17072547.840 ops/s
Iteration  13: 16830337.098 ops/s
Iteration  14: 16868230.731 ops/s
Iteration  15: 16881425.886 ops/s
Iteration  16: 16969099.096 ops/s
Iteration  17: 16929901.297 ops/s
Iteration  18: 16958300.076 ops/s
Iteration  19: 17083709.532 ops/s
Iteration  20: 17076181.059 ops/s
Iteration  21: 16982689.542 ops/s
Iteration  22: 17000756.555 ops/s
Iteration  23: 16741031.123 ops/s
Iteration  24: 16311328.204 ops/s
Iteration  25: 16488643.194 ops/s
Iteration  26: 16866488.361 ops/s
Iteration  27: 16493697.557 ops/s
Iteration  28: 17045250.396 ops/s
Iteration  29: 17162245.557 ops/s
Iteration  30: 16906411.859 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty":
  16868711.188 ±(99.9%) 142354.237 ops/s [Average]
  (min, avg, max) = (16311328.204, 16868711.188, 17162245.557), stdev = 213069.136
  CI (99.9%): [16726356.951, 17011065.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  16868711.188 ± 142354.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811433.218 ops/s
# Warmup Iteration   2: 718113.074 ops/s
# Warmup Iteration   3: 949043.862 ops/s
# Warmup Iteration   4: 1039257.272 ops/s
# Warmup Iteration   5: 1082968.688 ops/s
# Warmup Iteration   6: 1053811.676 ops/s
# Warmup Iteration   7: 1092362.340 ops/s
# Warmup Iteration   8: 1071468.955 ops/s
# Warmup Iteration   9: 1028901.376 ops/s
# Warmup Iteration  10: 1072616.985 ops/s
# Warmup Iteration  11: 1029388.042 ops/s
# Warmup Iteration  12: 1026325.981 ops/s
# Warmup Iteration  13: 995668.500 ops/s
# Warmup Iteration  14: 961419.813 ops/s
# Warmup Iteration  15: 1071439.023 ops/s
# Warmup Iteration  16: 1076051.772 ops/s
# Warmup Iteration  17: 1148281.941 ops/s
# Warmup Iteration  18: 1106034.571 ops/s
# Warmup Iteration  19: 1149386.286 ops/s
# Warmup Iteration  20: 1138987.510 ops/s
# Warmup Iteration  21: 1095968.136 ops/s
# Warmup Iteration  22: 1139869.935 ops/s
# Warmup Iteration  23: 1132504.017 ops/s
# Warmup Iteration  24: 1135563.466 ops/s
# Warmup Iteration  25: 1135124.241 ops/s
# Warmup Iteration  26: 1133881.644 ops/s
# Warmup Iteration  27: 1128218.343 ops/s
# Warmup Iteration  28: 1139585.708 ops/s
# Warmup Iteration  29: 1141302.201 ops/s
# Warmup Iteration  30: 1157683.167 ops/s
Iteration   1: 1144963.849 ops/s
Iteration   2: 1140284.440 ops/s
Iteration   3: 1149965.545 ops/s
Iteration   4: 1131758.358 ops/s
Iteration   5: 1139149.372 ops/s
Iteration   6: 1130690.445 ops/s
Iteration   7: 1092968.812 ops/s
Iteration   8: 1148298.353 ops/s
Iteration   9: 1140061.975 ops/s
Iteration  10: 1140176.661 ops/s
Iteration  11: 1145120.593 ops/s
Iteration  12: 1085159.361 ops/s
Iteration  13: 1083496.330 ops/s
Iteration  14: 1139130.961 ops/s
Iteration  15: 1158403.742 ops/s
Iteration  16: 1159042.757 ops/s
Iteration  17: 1135196.929 ops/s
Iteration  18: 1134612.075 ops/s
Iteration  19: 1137715.277 ops/s
Iteration  20: 1130283.845 ops/s
Iteration  21: 1135899.900 ops/s
Iteration  22: 1129803.037 ops/s
Iteration  23: 1126609.778 ops/s
Iteration  24: 1131422.331 ops/s
Iteration  25: 1145521.191 ops/s
Iteration  26: 1147465.982 ops/s
Iteration  27: 1134110.812 ops/s
Iteration  28: 1154155.782 ops/s
Iteration  29: 1158084.625 ops/s
Iteration  30: 1135411.511 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1135498.821 ±(99.9%) 12453.359 ops/s [Average]
  (min, avg, max) = (1083496.330, 1135498.821, 1159042.757), stdev = 18639.602
  CI (99.9%): [1123045.462, 1147952.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1135498.821 ± 12453.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8681694.708 ops/s
# Warmup Iteration   2: 13937291.686 ops/s
# Warmup Iteration   3: 16584958.645 ops/s
# Warmup Iteration   4: 16433683.702 ops/s
# Warmup Iteration   5: 16869616.882 ops/s
# Warmup Iteration   6: 16777247.951 ops/s
# Warmup Iteration   7: 16487524.568 ops/s
# Warmup Iteration   8: 16939910.303 ops/s
# Warmup Iteration   9: 16945732.210 ops/s
# Warmup Iteration  10: 16997639.712 ops/s
# Warmup Iteration  11: 16460693.952 ops/s
# Warmup Iteration  12: 16667183.395 ops/s
# Warmup Iteration  13: 16751110.348 ops/s
# Warmup Iteration  14: 16573306.723 ops/s
# Warmup Iteration  15: 16612066.914 ops/s
# Warmup Iteration  16: 16892824.147 ops/s
# Warmup Iteration  17: 16614695.880 ops/s
# Warmup Iteration  18: 16682913.639 ops/s
# Warmup Iteration  19: 16738457.969 ops/s
# Warmup Iteration  20: 16807267.678 ops/s
# Warmup Iteration  21: 16414486.655 ops/s
# Warmup Iteration  22: 16562754.842 ops/s
# Warmup Iteration  23: 16612471.794 ops/s
# Warmup Iteration  24: 16713381.327 ops/s
# Warmup Iteration  25: 16368987.760 ops/s
# Warmup Iteration  26: 16285006.805 ops/s
# Warmup Iteration  27: 16546176.039 ops/s
# Warmup Iteration  28: 16585512.514 ops/s
# Warmup Iteration  29: 16969326.690 ops/s
# Warmup Iteration  30: 16792836.087 ops/s
Iteration   1: 16946983.681 ops/s
Iteration   2: 16926041.788 ops/s
Iteration   3: 16828379.371 ops/s
Iteration   4: 16653341.391 ops/s
Iteration   5: 16874087.866 ops/s
Iteration   6: 16444729.127 ops/s
Iteration   7: 16543258.469 ops/s
Iteration   8: 16692299.209 ops/s
Iteration   9: 16567881.808 ops/s
Iteration  10: 17051099.322 ops/s
Iteration  11: 16729487.201 ops/s
Iteration  12: 16744024.789 ops/s
Iteration  13: 16731706.240 ops/s
Iteration  14: 17081846.630 ops/s
Iteration  15: 16686737.664 ops/s
Iteration  16: 16453321.482 ops/s
Iteration  17: 16806314.714 ops/s
Iteration  18: 16608274.119 ops/s
Iteration  19: 16841241.708 ops/s
Iteration  20: 16545582.385 ops/s
Iteration  21: 16366584.793 ops/s
Iteration  22: 16528390.396 ops/s
Iteration  23: 16138214.568 ops/s
Iteration  24: 16598944.274 ops/s
Iteration  25: 16868034.824 ops/s
Iteration  26: 16847040.764 ops/s
Iteration  27: 16960410.106 ops/s
Iteration  28: 16096954.208 ops/s
Iteration  29: 16749382.575 ops/s
Iteration  30: 16858514.445 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_reject":
  16692303.664 ±(99.9%) 158846.758 ops/s [Average]
  (min, avg, max) = (16096954.208, 16692303.664, 17081846.630), stdev = 237754.367
  CI (99.9%): [16533456.906, 16851150.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_reject  thrpt   30  16692303.664 ± 158846.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5752896.657 ops/s
# Warmup Iteration   2: 11246539.900 ops/s
# Warmup Iteration   3: 8960365.907 ops/s
# Warmup Iteration   4: 10552679.968 ops/s
# Warmup Iteration   5: 10620542.676 ops/s
# Warmup Iteration   6: 10330984.106 ops/s
# Warmup Iteration   7: 10203791.871 ops/s
# Warmup Iteration   8: 10464836.892 ops/s
# Warmup Iteration   9: 10548997.674 ops/s
# Warmup Iteration  10: 10607518.341 ops/s
# Warmup Iteration  11: 10586541.486 ops/s
# Warmup Iteration  12: 10552933.716 ops/s
# Warmup Iteration  13: 10636498.603 ops/s
# Warmup Iteration  14: 10458598.691 ops/s
# Warmup Iteration  15: 10370239.404 ops/s
# Warmup Iteration  16: 10552898.584 ops/s
# Warmup Iteration  17: 10381421.887 ops/s
# Warmup Iteration  18: 10583840.438 ops/s
# Warmup Iteration  19: 10455097.158 ops/s
# Warmup Iteration  20: 10538359.611 ops/s
# Warmup Iteration  21: 10612640.487 ops/s
# Warmup Iteration  22: 10436411.805 ops/s
# Warmup Iteration  23: 10616768.638 ops/s
# Warmup Iteration  24: 10720932.861 ops/s
# Warmup Iteration  25: 10588258.611 ops/s
# Warmup Iteration  26: 10537346.886 ops/s
# Warmup Iteration  27: 10440125.789 ops/s
# Warmup Iteration  28: 10567115.660 ops/s
# Warmup Iteration  29: 10511148.395 ops/s
# Warmup Iteration  30: 10601775.685 ops/s
Iteration   1: 10188092.026 ops/s
Iteration   2: 10565543.268 ops/s
Iteration   3: 10717430.104 ops/s
Iteration   4: 10720846.309 ops/s
Iteration   5: 10247438.455 ops/s
Iteration   6: 10694792.344 ops/s
Iteration   7: 10605058.575 ops/s
Iteration   8: 10592032.878 ops/s
Iteration   9: 10405476.731 ops/s
Iteration  10: 10555042.808 ops/s
Iteration  11: 10593962.994 ops/s
Iteration  12: 10723704.813 ops/s
Iteration  13: 10711622.466 ops/s
Iteration  14: 10701652.769 ops/s
Iteration  15: 10412616.116 ops/s
Iteration  16: 10510896.260 ops/s
Iteration  17: 10474861.640 ops/s
Iteration  18: 10603277.125 ops/s
Iteration  19: 10591922.888 ops/s
Iteration  20: 10532085.062 ops/s
Iteration  21: 10484789.554 ops/s
Iteration  22: 10286798.262 ops/s
Iteration  23: 10556824.251 ops/s
Iteration  24: 10714737.627 ops/s
Iteration  25: 10552969.076 ops/s
Iteration  26: 10636748.528 ops/s
Iteration  27: 10570941.278 ops/s
Iteration  28: 10628622.648 ops/s
Iteration  29: 10695992.235 ops/s
Iteration  30: 10685727.893 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_remove":
  10565416.899 ±(99.9%) 94999.142 ops/s [Average]
  (min, avg, max) = (10188092.026, 10565416.899, 10723704.813), stdev = 142190.255
  CI (99.9%): [10470417.757, 10660416.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_remove  thrpt   30  10565416.899 ± 94999.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9074758.827 ops/s
# Warmup Iteration   2: 15118486.224 ops/s
# Warmup Iteration   3: 17828126.413 ops/s
# Warmup Iteration   4: 17967511.980 ops/s
# Warmup Iteration   5: 17731254.955 ops/s
# Warmup Iteration   6: 17657394.716 ops/s
# Warmup Iteration   7: 17730015.707 ops/s
# Warmup Iteration   8: 18143701.679 ops/s
# Warmup Iteration   9: 18055994.931 ops/s
# Warmup Iteration  10: 17837248.965 ops/s
# Warmup Iteration  11: 17444506.157 ops/s
# Warmup Iteration  12: 17394197.513 ops/s
# Warmup Iteration  13: 17903218.317 ops/s
# Warmup Iteration  14: 18102184.721 ops/s
# Warmup Iteration  15: 18040208.286 ops/s
# Warmup Iteration  16: 18027118.300 ops/s
# Warmup Iteration  17: 18125697.915 ops/s
# Warmup Iteration  18: 18168541.564 ops/s
# Warmup Iteration  19: 17838064.084 ops/s
# Warmup Iteration  20: 17204925.047 ops/s
# Warmup Iteration  21: 18022975.363 ops/s
# Warmup Iteration  22: 18037064.613 ops/s
# Warmup Iteration  23: 18165479.356 ops/s
# Warmup Iteration  24: 17821927.327 ops/s
# Warmup Iteration  25: 17936461.518 ops/s
# Warmup Iteration  26: 17814035.569 ops/s
# Warmup Iteration  27: 18223959.674 ops/s
# Warmup Iteration  28: 17957035.429 ops/s
# Warmup Iteration  29: 18057131.491 ops/s
# Warmup Iteration  30: 17993071.785 ops/s
Iteration   1: 17658502.511 ops/s
Iteration   2: 17430283.988 ops/s
Iteration   3: 17557428.902 ops/s
Iteration   4: 17900721.339 ops/s
Iteration   5: 17893137.810 ops/s
Iteration   6: 17928648.249 ops/s
Iteration   7: 17840974.249 ops/s
Iteration   8: 17879508.596 ops/s
Iteration   9: 17817328.788 ops/s
Iteration  10: 17669114.018 ops/s
Iteration  11: 18086678.769 ops/s
Iteration  12: 18090696.669 ops/s
Iteration  13: 17916415.838 ops/s
Iteration  14: 18020666.126 ops/s
Iteration  15: 17912453.009 ops/s
Iteration  16: 18036995.751 ops/s
Iteration  17: 17214505.188 ops/s
Iteration  18: 17299369.264 ops/s
Iteration  19: 17302154.421 ops/s
Iteration  20: 17852484.299 ops/s
Iteration  21: 17667142.700 ops/s
Iteration  22: 17293785.156 ops/s
Iteration  23: 17720604.659 ops/s
Iteration  24: 17780654.349 ops/s
Iteration  25: 17689981.685 ops/s
Iteration  26: 17963367.458 ops/s
Iteration  27: 17951629.419 ops/s
Iteration  28: 17792004.823 ops/s
Iteration  29: 17624143.026 ops/s
Iteration  30: 17701331.824 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll":
  17749757.096 ±(99.9%) 162970.420 ops/s [Average]
  (min, avg, max) = (17214505.188, 17749757.096, 18090696.669), stdev = 243926.471
  CI (99.9%): [17586786.676, 17912727.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_removeAll  thrpt   30  17749757.096 ± 162970.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807755.377 ops/s
# Warmup Iteration   2: 1955121.820 ops/s
# Warmup Iteration   3: 2011977.272 ops/s
# Warmup Iteration   4: 1627269.876 ops/s
# Warmup Iteration   5: 1981382.478 ops/s
# Warmup Iteration   6: 2007894.811 ops/s
# Warmup Iteration   7: 1982947.093 ops/s
# Warmup Iteration   8: 2000923.995 ops/s
# Warmup Iteration   9: 1982261.372 ops/s
# Warmup Iteration  10: 1993884.921 ops/s
# Warmup Iteration  11: 1936752.599 ops/s
# Warmup Iteration  12: 1929043.204 ops/s
# Warmup Iteration  13: 1969348.977 ops/s
# Warmup Iteration  14: 2000671.778 ops/s
# Warmup Iteration  15: 1967515.668 ops/s
# Warmup Iteration  16: 1989309.500 ops/s
# Warmup Iteration  17: 1893324.254 ops/s
# Warmup Iteration  18: 1916683.789 ops/s
# Warmup Iteration  19: 1937028.739 ops/s
# Warmup Iteration  20: 1947216.106 ops/s
# Warmup Iteration  21: 1939523.102 ops/s
# Warmup Iteration  22: 1994245.192 ops/s
# Warmup Iteration  23: 1974413.852 ops/s
# Warmup Iteration  24: 1985830.463 ops/s
# Warmup Iteration  25: 1955489.707 ops/s
# Warmup Iteration  26: 1985906.651 ops/s
# Warmup Iteration  27: 1974181.549 ops/s
# Warmup Iteration  28: 1953554.321 ops/s
# Warmup Iteration  29: 1970258.219 ops/s
# Warmup Iteration  30: 1930573.421 ops/s
Iteration   1: 1977026.903 ops/s
Iteration   2: 1994852.741 ops/s
Iteration   3: 1940080.580 ops/s
Iteration   4: 1974819.648 ops/s
Iteration   5: 1996522.007 ops/s
Iteration   6: 2011512.354 ops/s
Iteration   7: 2033409.477 ops/s
Iteration   8: 1985315.756 ops/s
Iteration   9: 2002096.223 ops/s
Iteration  10: 2016549.414 ops/s
Iteration  11: 2029979.748 ops/s
Iteration  12: 2018314.069 ops/s
Iteration  13: 1992538.988 ops/s
Iteration  14: 1999746.961 ops/s
Iteration  15: 2000416.742 ops/s
Iteration  16: 2011500.827 ops/s
Iteration  17: 2016010.104 ops/s
Iteration  18: 1935697.652 ops/s
Iteration  19: 1953189.500 ops/s
Iteration  20: 1989571.894 ops/s
Iteration  21: 1979827.902 ops/s
Iteration  22: 1968987.708 ops/s
Iteration  23: 1965876.178 ops/s
Iteration  24: 2006850.871 ops/s
Iteration  25: 2010702.252 ops/s
Iteration  26: 1949763.781 ops/s
Iteration  27: 2022066.938 ops/s
Iteration  28: 2010039.630 ops/s
Iteration  29: 1982786.951 ops/s
Iteration  30: 1990627.362 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeAll_iterable":
  1992222.705 ±(99.9%) 17111.307 ops/s [Average]
  (min, avg, max) = (1935697.652, 1992222.705, 2033409.477), stdev = 25611.401
  CI (99.9%): [1975111.398, 2009334.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1992222.705 ± 17111.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5886743.061 ops/s
# Warmup Iteration   2: 11992286.275 ops/s
# Warmup Iteration   3: 9450541.259 ops/s
# Warmup Iteration   4: 10875683.084 ops/s
# Warmup Iteration   5: 11029611.750 ops/s
# Warmup Iteration   6: 11024577.386 ops/s
# Warmup Iteration   7: 11015403.625 ops/s
# Warmup Iteration   8: 11069595.647 ops/s
# Warmup Iteration   9: 11246218.909 ops/s
# Warmup Iteration  10: 10747859.111 ops/s
# Warmup Iteration  11: 11067050.225 ops/s
# Warmup Iteration  12: 11016024.924 ops/s
# Warmup Iteration  13: 10919351.082 ops/s
# Warmup Iteration  14: 10830686.427 ops/s
# Warmup Iteration  15: 11131576.975 ops/s
# Warmup Iteration  16: 11104873.112 ops/s
# Warmup Iteration  17: 11142370.328 ops/s
# Warmup Iteration  18: 11110184.249 ops/s
# Warmup Iteration  19: 11265606.939 ops/s
# Warmup Iteration  20: 11033631.905 ops/s
# Warmup Iteration  21: 11134750.808 ops/s
# Warmup Iteration  22: 11135230.011 ops/s
# Warmup Iteration  23: 10886693.266 ops/s
# Warmup Iteration  24: 10946040.408 ops/s
# Warmup Iteration  25: 10578973.384 ops/s
# Warmup Iteration  26: 11174344.642 ops/s
# Warmup Iteration  27: 11059616.828 ops/s
# Warmup Iteration  28: 10699334.205 ops/s
# Warmup Iteration  29: 11137405.197 ops/s
# Warmup Iteration  30: 10939178.525 ops/s
Iteration   1: 11204664.156 ops/s
Iteration   2: 11016616.246 ops/s
Iteration   3: 11102556.731 ops/s
Iteration   4: 11056616.206 ops/s
Iteration   5: 11076549.087 ops/s
Iteration   6: 11267045.678 ops/s
Iteration   7: 11090557.599 ops/s
Iteration   8: 10989258.498 ops/s
Iteration   9: 11039102.894 ops/s
Iteration  10: 11197144.331 ops/s
Iteration  11: 11147502.275 ops/s
Iteration  12: 11155254.134 ops/s
Iteration  13: 11258302.304 ops/s
Iteration  14: 11073193.738 ops/s
Iteration  15: 10800787.339 ops/s
Iteration  16: 11136765.503 ops/s
Iteration  17: 10631884.814 ops/s
Iteration  18: 10489086.685 ops/s
Iteration  19: 10894934.551 ops/s
Iteration  20: 10870579.240 ops/s
Iteration  21: 10787929.063 ops/s
Iteration  22: 10519158.025 ops/s
Iteration  23: 11101977.686 ops/s
Iteration  24: 10877529.852 ops/s
Iteration  25: 11101891.376 ops/s
Iteration  26: 10963648.806 ops/s
Iteration  27: 11008873.539 ops/s
Iteration  28: 11072877.069 ops/s
Iteration  29: 11048849.788 ops/s
Iteration  30: 11135279.519 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences":
  11003880.558 ±(99.9%) 131376.987 ops/s [Average]
  (min, avg, max) = (10489086.685, 11003880.558, 11267045.678), stdev = 196638.905
  CI (99.9%): [10872503.570, 11135257.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  11003880.558 ± 131376.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 861615.019 ops/s
# Warmup Iteration   2: 873385.933 ops/s
# Warmup Iteration   3: 1033428.790 ops/s
# Warmup Iteration   4: 1069408.629 ops/s
# Warmup Iteration   5: 1099585.323 ops/s
# Warmup Iteration   6: 1046630.083 ops/s
# Warmup Iteration   7: 1062706.138 ops/s
# Warmup Iteration   8: 1061940.125 ops/s
# Warmup Iteration   9: 1050094.708 ops/s
# Warmup Iteration  10: 1092177.433 ops/s
# Warmup Iteration  11: 1076508.506 ops/s
# Warmup Iteration  12: 1089786.923 ops/s
# Warmup Iteration  13: 1054278.370 ops/s
# Warmup Iteration  14: 941129.944 ops/s
# Warmup Iteration  15: 1085362.492 ops/s
# Warmup Iteration  16: 1109376.554 ops/s
# Warmup Iteration  17: 1180211.578 ops/s
# Warmup Iteration  18: 1182504.112 ops/s
# Warmup Iteration  19: 1169534.711 ops/s
# Warmup Iteration  20: 1168153.696 ops/s
# Warmup Iteration  21: 1183611.998 ops/s
# Warmup Iteration  22: 1174762.632 ops/s
# Warmup Iteration  23: 1181198.174 ops/s
# Warmup Iteration  24: 1191054.858 ops/s
# Warmup Iteration  25: 1164419.354 ops/s
# Warmup Iteration  26: 1170534.439 ops/s
# Warmup Iteration  27: 1164580.439 ops/s
# Warmup Iteration  28: 1169502.988 ops/s
# Warmup Iteration  29: 1161888.783 ops/s
# Warmup Iteration  30: 1163407.985 ops/s
Iteration   1: 1170688.759 ops/s
Iteration   2: 1169533.853 ops/s
Iteration   3: 1174898.380 ops/s
Iteration   4: 1168210.298 ops/s
Iteration   5: 1168939.440 ops/s
Iteration   6: 1165396.556 ops/s
Iteration   7: 1176507.040 ops/s
Iteration   8: 1192563.699 ops/s
Iteration   9: 1192312.468 ops/s
Iteration  10: 1189091.833 ops/s
Iteration  11: 1191623.364 ops/s
Iteration  12: 1183816.745 ops/s
Iteration  13: 1193667.822 ops/s
Iteration  14: 1186705.187 ops/s
Iteration  15: 1181776.231 ops/s
Iteration  16: 1189609.277 ops/s
Iteration  17: 1157978.934 ops/s
Iteration  18: 1122284.318 ops/s
Iteration  19: 1109777.362 ops/s
Iteration  20: 1140703.645 ops/s
Iteration  21: 1133912.630 ops/s
Iteration  22: 1146057.545 ops/s
Iteration  23: 1135181.934 ops/s
Iteration  24: 1184410.813 ops/s
Iteration  25: 1174927.408 ops/s
Iteration  26: 1178203.712 ops/s
Iteration  27: 1173782.944 ops/s
Iteration  28: 1170644.491 ops/s
Iteration  29: 1169063.639 ops/s
Iteration  30: 1185417.552 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_removeOccurrences_throws":
  1169256.263 ±(99.9%) 14687.510 ops/s [Average]
  (min, avg, max) = (1109777.362, 1169256.263, 1193667.822), stdev = 21983.575
  CI (99.9%): [1154568.753, 1183943.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1169256.263 ± 14687.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501216.095 ops/s
# Warmup Iteration   2: 1012185.843 ops/s
# Warmup Iteration   3: 1065888.690 ops/s
# Warmup Iteration   4: 1097422.231 ops/s
# Warmup Iteration   5: 914105.093 ops/s
# Warmup Iteration   6: 1098171.176 ops/s
# Warmup Iteration   7: 1068979.557 ops/s
# Warmup Iteration   8: 1098620.995 ops/s
# Warmup Iteration   9: 1078340.027 ops/s
# Warmup Iteration  10: 1103680.364 ops/s
# Warmup Iteration  11: 1060375.108 ops/s
# Warmup Iteration  12: 1067416.941 ops/s
# Warmup Iteration  13: 1104488.355 ops/s
# Warmup Iteration  14: 1091503.934 ops/s
# Warmup Iteration  15: 1093507.131 ops/s
# Warmup Iteration  16: 1102494.558 ops/s
# Warmup Iteration  17: 1055357.789 ops/s
# Warmup Iteration  18: 1087591.354 ops/s
# Warmup Iteration  19: 1087979.268 ops/s
# Warmup Iteration  20: 1069294.808 ops/s
# Warmup Iteration  21: 1108194.813 ops/s
# Warmup Iteration  22: 1083118.041 ops/s
# Warmup Iteration  23: 1073557.584 ops/s
# Warmup Iteration  24: 1093319.160 ops/s
# Warmup Iteration  25: 1092959.732 ops/s
# Warmup Iteration  26: 1102119.002 ops/s
# Warmup Iteration  27: 1089760.868 ops/s
# Warmup Iteration  28: 1090012.562 ops/s
# Warmup Iteration  29: 1095228.898 ops/s
# Warmup Iteration  30: 1091804.995 ops/s
Iteration   1: 1052096.185 ops/s
Iteration   2: 1093713.541 ops/s
Iteration   3: 1101326.001 ops/s
Iteration   4: 1092132.777 ops/s
Iteration   5: 1098260.289 ops/s
Iteration   6: 1089633.444 ops/s
Iteration   7: 1099176.716 ops/s
Iteration   8: 1111461.092 ops/s
Iteration   9: 1102526.167 ops/s
Iteration  10: 1093008.115 ops/s
Iteration  11: 1108381.927 ops/s
Iteration  12: 1096566.112 ops/s
Iteration  13: 1080824.795 ops/s
Iteration  14: 1096483.815 ops/s
Iteration  15: 1089331.899 ops/s
Iteration  16: 1042794.896 ops/s
Iteration  17: 1079178.507 ops/s
Iteration  18: 1098060.602 ops/s
Iteration  19: 1090649.937 ops/s
Iteration  20: 1093803.993 ops/s
Iteration  21: 1098397.919 ops/s
Iteration  22: 1085102.275 ops/s
Iteration  23: 1106016.679 ops/s
Iteration  24: 1105118.820 ops/s
Iteration  25: 1101713.032 ops/s
Iteration  26: 1102959.143 ops/s
Iteration  27: 1082994.380 ops/s
Iteration  28: 1089791.344 ops/s
Iteration  29: 1113881.830 ops/s
Iteration  30: 1093740.523 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll":
  1092970.892 ±(99.9%) 10039.976 ops/s [Average]
  (min, avg, max) = (1042794.896, 1092970.892, 1113881.830), stdev = 15027.365
  CI (99.9%): [1082930.915, 1103010.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_retainAll  thrpt   30  1092970.892 ± 10039.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4474824.515 ops/s
# Warmup Iteration   2: 7856967.806 ops/s
# Warmup Iteration   3: 9317879.951 ops/s
# Warmup Iteration   4: 9258065.834 ops/s
# Warmup Iteration   5: 9034155.466 ops/s
# Warmup Iteration   6: 9260548.220 ops/s
# Warmup Iteration   7: 9295295.194 ops/s
# Warmup Iteration   8: 9218469.509 ops/s
# Warmup Iteration   9: 9131008.515 ops/s
# Warmup Iteration  10: 9239800.361 ops/s
# Warmup Iteration  11: 9300385.946 ops/s
# Warmup Iteration  12: 9274254.729 ops/s
# Warmup Iteration  13: 8708172.499 ops/s
# Warmup Iteration  14: 9129342.398 ops/s
# Warmup Iteration  15: 8963169.855 ops/s
# Warmup Iteration  16: 9230255.192 ops/s
# Warmup Iteration  17: 8910717.068 ops/s
# Warmup Iteration  18: 9115994.747 ops/s
# Warmup Iteration  19: 9099505.245 ops/s
# Warmup Iteration  20: 9249548.675 ops/s
# Warmup Iteration  21: 9312541.367 ops/s
# Warmup Iteration  22: 9200590.664 ops/s
# Warmup Iteration  23: 8887138.099 ops/s
# Warmup Iteration  24: 9095911.529 ops/s
# Warmup Iteration  25: 9046926.479 ops/s
# Warmup Iteration  26: 9088430.097 ops/s
# Warmup Iteration  27: 9051047.345 ops/s
# Warmup Iteration  28: 9268839.421 ops/s
# Warmup Iteration  29: 9262869.142 ops/s
# Warmup Iteration  30: 9261080.932 ops/s
Iteration   1: 9260156.153 ops/s
Iteration   2: 9159905.789 ops/s
Iteration   3: 8967090.321 ops/s
Iteration   4: 9019943.049 ops/s
Iteration   5: 9310314.676 ops/s
Iteration   6: 9386033.798 ops/s
Iteration   7: 9355585.955 ops/s
Iteration   8: 9411504.075 ops/s
Iteration   9: 9037649.004 ops/s
Iteration  10: 8942043.134 ops/s
Iteration  11: 9125641.625 ops/s
Iteration  12: 9093453.907 ops/s
Iteration  13: 8907355.963 ops/s
Iteration  14: 9319066.198 ops/s
Iteration  15: 9385884.437 ops/s
Iteration  16: 9168983.974 ops/s
Iteration  17: 9118138.910 ops/s
Iteration  18: 8971411.925 ops/s
Iteration  19: 9148768.223 ops/s
Iteration  20: 9276954.100 ops/s
Iteration  21: 9236515.607 ops/s
Iteration  22: 9220371.787 ops/s
Iteration  23: 9262834.307 ops/s
Iteration  24: 9359914.378 ops/s
Iteration  25: 9270621.594 ops/s
Iteration  26: 9146568.241 ops/s
Iteration  27: 9151009.282 ops/s
Iteration  28: 9208230.643 ops/s
Iteration  29: 9212824.669 ops/s
Iteration  30: 9203452.751 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_retainAll_iterable":
  9187940.949 ±(99.9%) 92644.518 ops/s [Average]
  (min, avg, max) = (8907355.963, 9187940.949, 9411504.075), stdev = 138665.964
  CI (99.9%): [9095296.431, 9280585.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  9187940.949 ± 92644.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9090849.937 ops/s
# Warmup Iteration   2: 14691991.545 ops/s
# Warmup Iteration   3: 17180788.307 ops/s
# Warmup Iteration   4: 17352679.229 ops/s
# Warmup Iteration   5: 17631294.948 ops/s
# Warmup Iteration   6: 17070509.426 ops/s
# Warmup Iteration   7: 17141044.666 ops/s
# Warmup Iteration   8: 17226499.508 ops/s
# Warmup Iteration   9: 17399883.799 ops/s
# Warmup Iteration  10: 17372804.325 ops/s
# Warmup Iteration  11: 17133155.978 ops/s
# Warmup Iteration  12: 17527631.282 ops/s
# Warmup Iteration  13: 17377457.881 ops/s
# Warmup Iteration  14: 17652672.674 ops/s
# Warmup Iteration  15: 17691917.480 ops/s
# Warmup Iteration  16: 17606157.458 ops/s
# Warmup Iteration  17: 17643175.901 ops/s
# Warmup Iteration  18: 17350906.110 ops/s
# Warmup Iteration  19: 17105469.311 ops/s
# Warmup Iteration  20: 17484912.269 ops/s
# Warmup Iteration  21: 16889033.743 ops/s
# Warmup Iteration  22: 17140003.692 ops/s
# Warmup Iteration  23: 17591601.417 ops/s
# Warmup Iteration  24: 17316821.751 ops/s
# Warmup Iteration  25: 17414126.410 ops/s
# Warmup Iteration  26: 17293793.804 ops/s
# Warmup Iteration  27: 17505785.974 ops/s
# Warmup Iteration  28: 17424991.818 ops/s
# Warmup Iteration  29: 17644779.940 ops/s
# Warmup Iteration  30: 17604628.545 ops/s
Iteration   1: 17585789.357 ops/s
Iteration   2: 17703150.872 ops/s
Iteration   3: 17664008.088 ops/s
Iteration   4: 17463116.768 ops/s
Iteration   5: 17543415.451 ops/s
Iteration   6: 17814561.525 ops/s
Iteration   7: 17327496.058 ops/s
Iteration   8: 17243287.445 ops/s
Iteration   9: 17311646.226 ops/s
Iteration  10: 17548124.366 ops/s
Iteration  11: 17612778.074 ops/s
Iteration  12: 17664126.839 ops/s
Iteration  13: 17545157.210 ops/s
Iteration  14: 17475717.640 ops/s
Iteration  15: 17316885.175 ops/s
Iteration  16: 16900455.935 ops/s
Iteration  17: 17359432.581 ops/s
Iteration  18: 16828267.029 ops/s
Iteration  19: 17034215.650 ops/s
Iteration  20: 17477660.499 ops/s
Iteration  21: 17174121.867 ops/s
Iteration  22: 17041171.260 ops/s
Iteration  23: 17444582.421 ops/s
Iteration  24: 16781881.681 ops/s
Iteration  25: 16856005.791 ops/s
Iteration  26: 17279192.332 ops/s
Iteration  27: 17405543.540 ops/s
Iteration  28: 17481058.849 ops/s
Iteration  29: 17579857.016 ops/s
Iteration  30: 17544439.227 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_select":
  17366904.892 ±(99.9%) 184855.707 ops/s [Average]
  (min, avg, max) = (16781881.681, 17366904.892, 17814561.525), stdev = 276683.341
  CI (99.9%): [17182049.185, 17551760.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_select  thrpt   30  17366904.892 ± 184855.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13033193.401 ops/s
# Warmup Iteration   2: 25806806.764 ops/s
# Warmup Iteration   3: 21556088.056 ops/s
# Warmup Iteration   4: 24859905.322 ops/s
# Warmup Iteration   5: 25498071.729 ops/s
# Warmup Iteration   6: 25369767.231 ops/s
# Warmup Iteration   7: 25808679.330 ops/s
# Warmup Iteration   8: 25556787.635 ops/s
# Warmup Iteration   9: 25338594.183 ops/s
# Warmup Iteration  10: 25349620.048 ops/s
# Warmup Iteration  11: 24762162.404 ops/s
# Warmup Iteration  12: 25225942.189 ops/s
# Warmup Iteration  13: 24971747.856 ops/s
# Warmup Iteration  14: 25098849.684 ops/s
# Warmup Iteration  15: 25132915.259 ops/s
# Warmup Iteration  16: 24897917.976 ops/s
# Warmup Iteration  17: 25262216.574 ops/s
# Warmup Iteration  18: 25447368.595 ops/s
# Warmup Iteration  19: 25289856.843 ops/s
# Warmup Iteration  20: 25383120.677 ops/s
# Warmup Iteration  21: 25166850.158 ops/s
# Warmup Iteration  22: 25562148.539 ops/s
# Warmup Iteration  23: 25868189.310 ops/s
# Warmup Iteration  24: 25522998.383 ops/s
# Warmup Iteration  25: 25396863.817 ops/s
# Warmup Iteration  26: 25301862.548 ops/s
# Warmup Iteration  27: 25437269.751 ops/s
# Warmup Iteration  28: 25559350.935 ops/s
# Warmup Iteration  29: 25644857.159 ops/s
# Warmup Iteration  30: 25676176.148 ops/s
Iteration   1: 25434936.198 ops/s
Iteration   2: 25545442.126 ops/s
Iteration   3: 24265400.971 ops/s
Iteration   4: 25826982.590 ops/s
Iteration   5: 25830460.766 ops/s
Iteration   6: 25652493.639 ops/s
Iteration   7: 25525530.461 ops/s
Iteration   8: 25613554.448 ops/s
Iteration   9: 25830583.049 ops/s
Iteration  10: 25800250.502 ops/s
Iteration  11: 25908890.392 ops/s
Iteration  12: 25688272.845 ops/s
Iteration  13: 25090905.464 ops/s
Iteration  14: 25505643.119 ops/s
Iteration  15: 25284224.040 ops/s
Iteration  16: 24387938.230 ops/s
Iteration  17: 24535682.132 ops/s
Iteration  18: 25935146.707 ops/s
Iteration  19: 25755280.654 ops/s
Iteration  20: 25588131.110 ops/s
Iteration  21: 25522094.124 ops/s
Iteration  22: 25679383.936 ops/s
Iteration  23: 25213220.687 ops/s
Iteration  24: 25397629.894 ops/s
Iteration  25: 24774795.045 ops/s
Iteration  26: 24987512.439 ops/s
Iteration  27: 25393197.633 ops/s
Iteration  28: 25133279.537 ops/s
Iteration  29: 25692566.826 ops/s
Iteration  30: 25643645.345 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_selectUnique":
  25414769.164 ±(99.9%) 296928.544 ops/s [Average]
  (min, avg, max) = (24265400.971, 25414769.164, 25935146.707), stdev = 444428.700
  CI (99.9%): [25117840.619, 25711697.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_selectUnique  thrpt   30  25414769.164 ± 296928.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3426717.900 ops/s
# Warmup Iteration   2: 5586162.119 ops/s
# Warmup Iteration   3: 6672807.709 ops/s
# Warmup Iteration   4: 6739997.210 ops/s
# Warmup Iteration   5: 6552023.656 ops/s
# Warmup Iteration   6: 6777046.130 ops/s
# Warmup Iteration   7: 6710604.341 ops/s
# Warmup Iteration   8: 6755458.543 ops/s
# Warmup Iteration   9: 6763877.154 ops/s
# Warmup Iteration  10: 6866484.149 ops/s
# Warmup Iteration  11: 6749303.639 ops/s
# Warmup Iteration  12: 6706391.863 ops/s
# Warmup Iteration  13: 6766114.106 ops/s
# Warmup Iteration  14: 6774795.525 ops/s
# Warmup Iteration  15: 6733132.106 ops/s
# Warmup Iteration  16: 6714701.773 ops/s
# Warmup Iteration  17: 6654388.775 ops/s
# Warmup Iteration  18: 6652318.479 ops/s
# Warmup Iteration  19: 6760513.984 ops/s
# Warmup Iteration  20: 6787337.630 ops/s
# Warmup Iteration  21: 6674311.290 ops/s
# Warmup Iteration  22: 6690833.335 ops/s
# Warmup Iteration  23: 6699879.183 ops/s
# Warmup Iteration  24: 6712262.818 ops/s
# Warmup Iteration  25: 6831846.489 ops/s
# Warmup Iteration  26: 6747414.256 ops/s
# Warmup Iteration  27: 6755615.550 ops/s
# Warmup Iteration  28: 6669533.053 ops/s
# Warmup Iteration  29: 6680971.144 ops/s
# Warmup Iteration  30: 6769990.630 ops/s
Iteration   1: 6823772.262 ops/s
Iteration   2: 6759834.938 ops/s
Iteration   3: 6835240.566 ops/s
Iteration   4: 6830257.915 ops/s
Iteration   5: 6863572.346 ops/s
Iteration   6: 6821124.700 ops/s
Iteration   7: 6681650.416 ops/s
Iteration   8: 6833331.431 ops/s
Iteration   9: 6819406.686 ops/s
Iteration  10: 6863077.401 ops/s
Iteration  11: 6876015.678 ops/s
Iteration  12: 6847449.297 ops/s
Iteration  13: 6762484.632 ops/s
Iteration  14: 6847145.810 ops/s
Iteration  15: 6825400.547 ops/s
Iteration  16: 6568646.862 ops/s
Iteration  17: 6855209.677 ops/s
Iteration  18: 6686495.532 ops/s
Iteration  19: 6665245.266 ops/s
Iteration  20: 6671987.186 ops/s
Iteration  21: 6630550.376 ops/s
Iteration  22: 6722594.495 ops/s
Iteration  23: 6668164.312 ops/s
Iteration  24: 6509888.669 ops/s
Iteration  25: 6691354.867 ops/s
Iteration  26: 6791730.351 ops/s
Iteration  27: 6774869.939 ops/s
Iteration  28: 6759785.305 ops/s
Iteration  29: 6778518.471 ops/s
Iteration  30: 6870283.208 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_size":
  6764502.971 ±(99.9%) 63573.624 ops/s [Average]
  (min, avg, max) = (6509888.669, 6764502.971, 6876015.678), stdev = 95154.014
  CI (99.9%): [6700929.348, 6828076.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_size  thrpt   30  6764502.971 ± 63573.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52992780.939 ops/s
# Warmup Iteration   2: 81902322.714 ops/s
# Warmup Iteration   3: 97942484.988 ops/s
# Warmup Iteration   4: 97639078.301 ops/s
# Warmup Iteration   5: 96050917.822 ops/s
# Warmup Iteration   6: 96100294.651 ops/s
# Warmup Iteration   7: 97834218.772 ops/s
# Warmup Iteration   8: 98516491.818 ops/s
# Warmup Iteration   9: 98795626.587 ops/s
# Warmup Iteration  10: 99497538.822 ops/s
# Warmup Iteration  11: 98041759.706 ops/s
# Warmup Iteration  12: 98538456.667 ops/s
# Warmup Iteration  13: 99432706.726 ops/s
# Warmup Iteration  14: 99345336.983 ops/s
# Warmup Iteration  15: 99726352.836 ops/s
# Warmup Iteration  16: 98974421.755 ops/s
# Warmup Iteration  17: 98757530.761 ops/s
# Warmup Iteration  18: 97654020.541 ops/s
# Warmup Iteration  19: 98220221.534 ops/s
# Warmup Iteration  20: 97594220.648 ops/s
# Warmup Iteration  21: 95770740.137 ops/s
# Warmup Iteration  22: 96262686.163 ops/s
# Warmup Iteration  23: 96707667.202 ops/s
# Warmup Iteration  24: 97599215.125 ops/s
# Warmup Iteration  25: 97679399.271 ops/s
# Warmup Iteration  26: 97771055.758 ops/s
# Warmup Iteration  27: 99090623.645 ops/s
# Warmup Iteration  28: 99410631.068 ops/s
# Warmup Iteration  29: 98868272.153 ops/s
# Warmup Iteration  30: 99543558.985 ops/s
Iteration   1: 94929290.416 ops/s
Iteration   2: 99410125.919 ops/s
Iteration   3: 100148505.661 ops/s
Iteration   4: 100109204.398 ops/s
Iteration   5: 99383566.672 ops/s
Iteration   6: 99657810.050 ops/s
Iteration   7: 98476524.685 ops/s
Iteration   8: 97197163.742 ops/s
Iteration   9: 96596401.381 ops/s
Iteration  10: 96259253.360 ops/s
Iteration  11: 95472824.024 ops/s
Iteration  12: 94827379.660 ops/s
Iteration  13: 99206521.965 ops/s
Iteration  14: 99225381.958 ops/s
Iteration  15: 98293401.141 ops/s
Iteration  16: 98973181.706 ops/s
Iteration  17: 96495194.858 ops/s
Iteration  18: 99464334.691 ops/s
Iteration  19: 99663324.744 ops/s
Iteration  20: 98958675.918 ops/s
Iteration  21: 99279853.409 ops/s
Iteration  22: 99794431.254 ops/s
Iteration  23: 99756820.090 ops/s
Iteration  24: 99787790.409 ops/s
Iteration  25: 97769063.231 ops/s
Iteration  26: 99902622.975 ops/s
Iteration  27: 99826924.983 ops/s
Iteration  28: 98514123.085 ops/s
Iteration  29: 98691001.452 ops/s
Iteration  30: 100404540.530 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_sizeDistinct":
  98549174.612 ±(99.9%) 1075737.137 ops/s [Average]
  (min, avg, max) = (94827379.660, 98549174.612, 100404540.530), stdev = 1610112.826
  CI (99.9%): [97473437.475, 99624911.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score         Error  Units
BooleanHashBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  98549174.612 ± 1075737.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34814.529 ops/s
# Warmup Iteration   2: 60228.271 ops/s
# Warmup Iteration   3: 67929.142 ops/s
# Warmup Iteration   4: 68168.634 ops/s
# Warmup Iteration   5: 60078.859 ops/s
# Warmup Iteration   6: 63715.216 ops/s
# Warmup Iteration   7: 65721.718 ops/s
# Warmup Iteration   8: 64709.584 ops/s
# Warmup Iteration   9: 65272.021 ops/s
# Warmup Iteration  10: 65988.049 ops/s
# Warmup Iteration  11: 66767.807 ops/s
# Warmup Iteration  12: 67374.575 ops/s
# Warmup Iteration  13: 65360.417 ops/s
# Warmup Iteration  14: 64880.714 ops/s
# Warmup Iteration  15: 65228.627 ops/s
# Warmup Iteration  16: 65013.360 ops/s
# Warmup Iteration  17: 64220.505 ops/s
# Warmup Iteration  18: 63958.743 ops/s
# Warmup Iteration  19: 64074.366 ops/s
# Warmup Iteration  20: 65761.503 ops/s
# Warmup Iteration  21: 66949.520 ops/s
# Warmup Iteration  22: 65948.879 ops/s
# Warmup Iteration  23: 67733.063 ops/s
# Warmup Iteration  24: 67033.840 ops/s
# Warmup Iteration  25: 66686.076 ops/s
# Warmup Iteration  26: 66443.550 ops/s
# Warmup Iteration  27: 68284.143 ops/s
# Warmup Iteration  28: 67432.296 ops/s
# Warmup Iteration  29: 65475.620 ops/s
# Warmup Iteration  30: 68143.051 ops/s
Iteration   1: 67876.567 ops/s
Iteration   2: 68413.745 ops/s
Iteration   3: 68362.105 ops/s
Iteration   4: 68363.846 ops/s
Iteration   5: 68288.851 ops/s
Iteration   6: 68174.541 ops/s
Iteration   7: 67612.476 ops/s
Iteration   8: 67386.830 ops/s
Iteration   9: 67155.507 ops/s
Iteration  10: 64078.858 ops/s
Iteration  11: 65186.998 ops/s
Iteration  12: 65664.563 ops/s
Iteration  13: 66714.859 ops/s
Iteration  14: 66949.209 ops/s
Iteration  15: 66165.964 ops/s
Iteration  16: 65763.791 ops/s
Iteration  17: 66235.645 ops/s
Iteration  18: 66008.427 ops/s
Iteration  19: 65115.565 ops/s
Iteration  20: 64250.074 ops/s
Iteration  21: 63974.612 ops/s
Iteration  22: 64870.259 ops/s
Iteration  23: 64541.554 ops/s
Iteration  24: 64976.170 ops/s
Iteration  25: 65924.091 ops/s
Iteration  26: 65691.327 ops/s
Iteration  27: 64547.857 ops/s
Iteration  28: 64797.375 ops/s
Iteration  29: 65558.900 ops/s
Iteration  30: 63624.861 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testEquals":
  66075.848 ±(99.9%) 993.096 ops/s [Average]
  (min, avg, max) = (63624.861, 66075.848, 68413.745), stdev = 1486.420
  CI (99.9%): [65082.751, 67068.944] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
BooleanHashBagTest._Benchmark.benchmark_testEquals  thrpt   30  66075.848 ± 993.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 954121.623 ops/s
# Warmup Iteration   2: 2598154.334 ops/s
# Warmup Iteration   3: 2360852.567 ops/s
# Warmup Iteration   4: 2389407.444 ops/s
# Warmup Iteration   5: 2590482.567 ops/s
# Warmup Iteration   6: 2633554.718 ops/s
# Warmup Iteration   7: 2651989.180 ops/s
# Warmup Iteration   8: 2632781.259 ops/s
# Warmup Iteration   9: 2617071.297 ops/s
# Warmup Iteration  10: 2631553.989 ops/s
# Warmup Iteration  11: 2638428.212 ops/s
# Warmup Iteration  12: 2661830.491 ops/s
# Warmup Iteration  13: 2645405.333 ops/s
# Warmup Iteration  14: 2656638.197 ops/s
# Warmup Iteration  15: 2617164.738 ops/s
# Warmup Iteration  16: 2628422.386 ops/s
# Warmup Iteration  17: 2596774.265 ops/s
# Warmup Iteration  18: 2631917.769 ops/s
# Warmup Iteration  19: 2625336.287 ops/s
# Warmup Iteration  20: 2560422.990 ops/s
# Warmup Iteration  21: 2649619.331 ops/s
# Warmup Iteration  22: 2648697.101 ops/s
# Warmup Iteration  23: 2644416.790 ops/s
# Warmup Iteration  24: 2617962.010 ops/s
# Warmup Iteration  25: 2563122.106 ops/s
# Warmup Iteration  26: 2582799.992 ops/s
# Warmup Iteration  27: 2585780.258 ops/s
# Warmup Iteration  28: 2577427.693 ops/s
# Warmup Iteration  29: 2588143.120 ops/s
# Warmup Iteration  30: 2656363.262 ops/s
Iteration   1: 2670130.591 ops/s
Iteration   2: 2644749.023 ops/s
Iteration   3: 2616428.952 ops/s
Iteration   4: 2622191.777 ops/s
Iteration   5: 2593405.742 ops/s
Iteration   6: 2570442.303 ops/s
Iteration   7: 2508350.847 ops/s
Iteration   8: 2550531.835 ops/s
Iteration   9: 2568570.252 ops/s
Iteration  10: 2530668.611 ops/s
Iteration  11: 2527319.170 ops/s
Iteration  12: 2504431.656 ops/s
Iteration  13: 2567918.625 ops/s
Iteration  14: 2596773.769 ops/s
Iteration  15: 2556694.779 ops/s
Iteration  16: 2574563.179 ops/s
Iteration  17: 2484761.865 ops/s
Iteration  18: 2555320.396 ops/s
Iteration  19: 2527322.176 ops/s
Iteration  20: 2511339.263 ops/s
Iteration  21: 2531323.066 ops/s
Iteration  22: 2604712.467 ops/s
Iteration  23: 2492172.752 ops/s
Iteration  24: 2601532.707 ops/s
Iteration  25: 2543601.641 ops/s
Iteration  26: 2676971.168 ops/s
Iteration  27: 2659412.106 ops/s
Iteration  28: 2613185.876 ops/s
Iteration  29: 2494170.025 ops/s
Iteration  30: 2508161.204 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testHashCode":
  2566905.261 ±(99.9%) 36718.264 ops/s [Average]
  (min, avg, max) = (2484761.865, 2566905.261, 2676971.168), stdev = 54958.174
  CI (99.9%): [2530186.996, 2603623.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_testHashCode  thrpt   30  2566905.261 ± 36718.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1938788.516 ops/s
# Warmup Iteration   2: 4036887.302 ops/s
# Warmup Iteration   3: 3517659.334 ops/s
# Warmup Iteration   4: 4032682.151 ops/s
# Warmup Iteration   5: 4072703.270 ops/s
# Warmup Iteration   6: 3929587.871 ops/s
# Warmup Iteration   7: 4082854.091 ops/s
# Warmup Iteration   8: 4158396.900 ops/s
# Warmup Iteration   9: 4141534.483 ops/s
# Warmup Iteration  10: 4087448.347 ops/s
# Warmup Iteration  11: 4137998.963 ops/s
# Warmup Iteration  12: 4136845.768 ops/s
# Warmup Iteration  13: 4128672.933 ops/s
# Warmup Iteration  14: 4101810.143 ops/s
# Warmup Iteration  15: 4079580.366 ops/s
# Warmup Iteration  16: 4129478.630 ops/s
# Warmup Iteration  17: 4145519.616 ops/s
# Warmup Iteration  18: 4156106.373 ops/s
# Warmup Iteration  19: 4143466.684 ops/s
# Warmup Iteration  20: 4146936.579 ops/s
# Warmup Iteration  21: 4128394.159 ops/s
# Warmup Iteration  22: 4140236.287 ops/s
# Warmup Iteration  23: 4136263.281 ops/s
# Warmup Iteration  24: 4137207.579 ops/s
# Warmup Iteration  25: 4130184.300 ops/s
# Warmup Iteration  26: 4005173.565 ops/s
# Warmup Iteration  27: 4127295.301 ops/s
# Warmup Iteration  28: 4090107.161 ops/s
# Warmup Iteration  29: 4152341.089 ops/s
# Warmup Iteration  30: 4148113.345 ops/s
Iteration   1: 4114763.994 ops/s
Iteration   2: 4123666.304 ops/s
Iteration   3: 4166083.221 ops/s
Iteration   4: 4140286.081 ops/s
Iteration   5: 4087555.096 ops/s
Iteration   6: 4168050.804 ops/s
Iteration   7: 4140430.014 ops/s
Iteration   8: 4156260.725 ops/s
Iteration   9: 4126479.678 ops/s
Iteration  10: 4119119.949 ops/s
Iteration  11: 4147010.841 ops/s
Iteration  12: 4136463.094 ops/s
Iteration  13: 4150815.966 ops/s
Iteration  14: 4060074.328 ops/s
Iteration  15: 4132091.838 ops/s
Iteration  16: 4150608.690 ops/s
Iteration  17: 4129260.334 ops/s
Iteration  18: 4127098.901 ops/s
Iteration  19: 4155789.615 ops/s
Iteration  20: 4101118.729 ops/s
Iteration  21: 4127443.295 ops/s
Iteration  22: 4061567.936 ops/s
Iteration  23: 4143032.101 ops/s
Iteration  24: 4098468.293 ops/s
Iteration  25: 4079491.884 ops/s
Iteration  26: 4099828.721 ops/s
Iteration  27: 4095288.541 ops/s
Iteration  28: 4036473.041 ops/s
Iteration  29: 3967223.686 ops/s
Iteration  30: 4026318.296 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_testToString":
  4112272.133 ±(99.9%) 30524.848 ops/s [Average]
  (min, avg, max) = (3967223.686, 4112272.133, 4168050.804), stdev = 45688.159
  CI (99.9%): [4081747.285, 4142796.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_testToString  thrpt   30  4112272.133 ± 30524.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15765972.476 ops/s
# Warmup Iteration   2: 25932177.935 ops/s
# Warmup Iteration   3: 30794971.490 ops/s
# Warmup Iteration   4: 29770198.251 ops/s
# Warmup Iteration   5: 30260501.244 ops/s
# Warmup Iteration   6: 30382385.404 ops/s
# Warmup Iteration   7: 30673270.648 ops/s
# Warmup Iteration   8: 30714439.867 ops/s
# Warmup Iteration   9: 30471276.605 ops/s
# Warmup Iteration  10: 30578920.824 ops/s
# Warmup Iteration  11: 30858164.732 ops/s
# Warmup Iteration  12: 30488207.867 ops/s
# Warmup Iteration  13: 30712026.081 ops/s
# Warmup Iteration  14: 30792710.940 ops/s
# Warmup Iteration  15: 30549477.532 ops/s
# Warmup Iteration  16: 29690282.706 ops/s
# Warmup Iteration  17: 30444994.989 ops/s
# Warmup Iteration  18: 30524346.620 ops/s
# Warmup Iteration  19: 30497999.660 ops/s
# Warmup Iteration  20: 30827454.213 ops/s
# Warmup Iteration  21: 29642580.883 ops/s
# Warmup Iteration  22: 30023621.702 ops/s
# Warmup Iteration  23: 30028634.428 ops/s
# Warmup Iteration  24: 30513071.598 ops/s
# Warmup Iteration  25: 29613297.661 ops/s
# Warmup Iteration  26: 29914908.368 ops/s
# Warmup Iteration  27: 30759560.722 ops/s
# Warmup Iteration  28: 30056688.343 ops/s
# Warmup Iteration  29: 30603916.802 ops/s
# Warmup Iteration  30: 30785383.697 ops/s
Iteration   1: 29709527.497 ops/s
Iteration   2: 29751902.357 ops/s
Iteration   3: 29968105.689 ops/s
Iteration   4: 30393063.544 ops/s
Iteration   5: 30574857.411 ops/s
Iteration   6: 30374327.819 ops/s
Iteration   7: 29951246.324 ops/s
Iteration   8: 29607814.379 ops/s
Iteration   9: 30086361.541 ops/s
Iteration  10: 30312014.238 ops/s
Iteration  11: 30357915.548 ops/s
Iteration  12: 30843670.401 ops/s
Iteration  13: 30329151.087 ops/s
Iteration  14: 29874518.166 ops/s
Iteration  15: 30314539.977 ops/s
Iteration  16: 30923559.284 ops/s
Iteration  17: 31073062.089 ops/s
Iteration  18: 30721455.776 ops/s
Iteration  19: 30895268.779 ops/s
Iteration  20: 30432844.308 ops/s
Iteration  21: 30021220.553 ops/s
Iteration  22: 30178306.098 ops/s
Iteration  23: 30546811.060 ops/s
Iteration  24: 30382569.808 ops/s
Iteration  25: 30527850.722 ops/s
Iteration  26: 30967617.449 ops/s
Iteration  27: 30844427.813 ops/s
Iteration  28: 29797614.833 ops/s
Iteration  29: 30907948.573 ops/s
Iteration  30: 31072739.290 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toArray":
  30391410.414 ±(99.9%) 289243.390 ops/s [Average]
  (min, avg, max) = (29607814.379, 30391410.414, 31073062.089), stdev = 432925.923
  CI (99.9%): [30102167.023, 30680653.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_toArray  thrpt   30  30391410.414 ± 289243.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8741956.355 ops/s
# Warmup Iteration   2: 16546604.376 ops/s
# Warmup Iteration   3: 14135953.432 ops/s
# Warmup Iteration   4: 16659954.739 ops/s
# Warmup Iteration   5: 16757728.419 ops/s
# Warmup Iteration   6: 16791954.227 ops/s
# Warmup Iteration   7: 16819730.641 ops/s
# Warmup Iteration   8: 16966697.195 ops/s
# Warmup Iteration   9: 16705678.489 ops/s
# Warmup Iteration  10: 16659879.868 ops/s
# Warmup Iteration  11: 16918042.593 ops/s
# Warmup Iteration  12: 16663875.639 ops/s
# Warmup Iteration  13: 16903246.621 ops/s
# Warmup Iteration  14: 16952478.825 ops/s
# Warmup Iteration  15: 16906067.280 ops/s
# Warmup Iteration  16: 16906769.792 ops/s
# Warmup Iteration  17: 16745228.896 ops/s
# Warmup Iteration  18: 16608291.579 ops/s
# Warmup Iteration  19: 16764554.236 ops/s
# Warmup Iteration  20: 16745508.491 ops/s
# Warmup Iteration  21: 16978642.154 ops/s
# Warmup Iteration  22: 16959716.378 ops/s
# Warmup Iteration  23: 17015184.489 ops/s
# Warmup Iteration  24: 16983281.816 ops/s
# Warmup Iteration  25: 17035878.837 ops/s
# Warmup Iteration  26: 16766263.589 ops/s
# Warmup Iteration  27: 17000327.029 ops/s
# Warmup Iteration  28: 17094894.190 ops/s
# Warmup Iteration  29: 17000002.698 ops/s
# Warmup Iteration  30: 16933613.861 ops/s
Iteration   1: 17043398.334 ops/s
Iteration   2: 16942776.657 ops/s
Iteration   3: 16917233.464 ops/s
Iteration   4: 17104172.090 ops/s
Iteration   5: 17099188.842 ops/s
Iteration   6: 16968826.556 ops/s
Iteration   7: 17099338.096 ops/s
Iteration   8: 16893559.871 ops/s
Iteration   9: 16963968.380 ops/s
Iteration  10: 16979191.691 ops/s
Iteration  11: 16951081.907 ops/s
Iteration  12: 17081071.888 ops/s
Iteration  13: 16980194.226 ops/s
Iteration  14: 17075605.605 ops/s
Iteration  15: 16962900.010 ops/s
Iteration  16: 17099047.283 ops/s
Iteration  17: 17009999.339 ops/s
Iteration  18: 17111976.514 ops/s
Iteration  19: 17090341.080 ops/s
Iteration  20: 17043649.489 ops/s
Iteration  21: 17059902.038 ops/s
Iteration  22: 16979876.612 ops/s
Iteration  23: 17023630.322 ops/s
Iteration  24: 17144758.389 ops/s
Iteration  25: 17056146.856 ops/s
Iteration  26: 17056471.714 ops/s
Iteration  27: 17094311.454 ops/s
Iteration  28: 17049257.326 ops/s
Iteration  29: 16974388.839 ops/s
Iteration  30: 17052424.814 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toBag":
  17030289.656 ±(99.9%) 43796.144 ops/s [Average]
  (min, avg, max) = (16893559.871, 17030289.656, 17144758.389), stdev = 65552.011
  CI (99.9%): [16986493.513, 17074085.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_toBag  thrpt   30  17030289.656 ± 43796.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4116032.263 ops/s
# Warmup Iteration   2: 8480530.701 ops/s
# Warmup Iteration   3: 8345523.277 ops/s
# Warmup Iteration   4: 7095056.070 ops/s
# Warmup Iteration   5: 8468103.786 ops/s
# Warmup Iteration   6: 8492836.505 ops/s
# Warmup Iteration   7: 8510563.149 ops/s
# Warmup Iteration   8: 8459879.948 ops/s
# Warmup Iteration   9: 8475089.918 ops/s
# Warmup Iteration  10: 8477234.852 ops/s
# Warmup Iteration  11: 8484794.268 ops/s
# Warmup Iteration  12: 8508601.812 ops/s
# Warmup Iteration  13: 8512370.997 ops/s
# Warmup Iteration  14: 8490848.255 ops/s
# Warmup Iteration  15: 8511361.946 ops/s
# Warmup Iteration  16: 8492764.043 ops/s
# Warmup Iteration  17: 8415799.744 ops/s
# Warmup Iteration  18: 8449038.608 ops/s
# Warmup Iteration  19: 8430151.187 ops/s
# Warmup Iteration  20: 8372980.180 ops/s
# Warmup Iteration  21: 8382154.427 ops/s
# Warmup Iteration  22: 8507660.395 ops/s
# Warmup Iteration  23: 8334473.611 ops/s
# Warmup Iteration  24: 8378298.934 ops/s
# Warmup Iteration  25: 8439460.291 ops/s
# Warmup Iteration  26: 8426783.342 ops/s
# Warmup Iteration  27: 8491801.637 ops/s
# Warmup Iteration  28: 8467746.968 ops/s
# Warmup Iteration  29: 8520303.160 ops/s
# Warmup Iteration  30: 8285002.647 ops/s
Iteration   1: 8437476.302 ops/s
Iteration   2: 8459544.355 ops/s
Iteration   3: 8466607.189 ops/s
Iteration   4: 8489246.508 ops/s
Iteration   5: 8473365.403 ops/s
Iteration   6: 8283093.621 ops/s
Iteration   7: 8397856.878 ops/s
Iteration   8: 8500309.595 ops/s
Iteration   9: 8335276.308 ops/s
Iteration  10: 8466826.844 ops/s
Iteration  11: 8358435.212 ops/s
Iteration  12: 8393917.871 ops/s
Iteration  13: 8505640.462 ops/s
Iteration  14: 8454677.435 ops/s
Iteration  15: 8395057.438 ops/s
Iteration  16: 8432272.454 ops/s
Iteration  17: 8429331.652 ops/s
Iteration  18: 8441436.281 ops/s
Iteration  19: 8470020.535 ops/s
Iteration  20: 8498362.854 ops/s
Iteration  21: 8483602.598 ops/s
Iteration  22: 8441182.714 ops/s
Iteration  23: 8511914.055 ops/s
Iteration  24: 8480248.947 ops/s
Iteration  25: 8511408.054 ops/s
Iteration  26: 8436625.753 ops/s
Iteration  27: 8386543.925 ops/s
Iteration  28: 8397722.086 ops/s
Iteration  29: 8448950.866 ops/s
Iteration  30: 8437972.304 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toImmutable":
  8440830.883 ±(99.9%) 36100.900 ops/s [Average]
  (min, avg, max) = (8283093.621, 8440830.883, 8511914.055), stdev = 54034.131
  CI (99.9%): [8404729.984, 8476931.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_toImmutable  thrpt   30  8440830.883 ± 36100.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3228950.179 ops/s
# Warmup Iteration   2: 5978208.519 ops/s
# Warmup Iteration   3: 7029442.167 ops/s
# Warmup Iteration   4: 7032854.267 ops/s
# Warmup Iteration   5: 7121560.095 ops/s
# Warmup Iteration   6: 7030722.178 ops/s
# Warmup Iteration   7: 7109307.642 ops/s
# Warmup Iteration   8: 7066733.972 ops/s
# Warmup Iteration   9: 7140234.582 ops/s
# Warmup Iteration  10: 7119480.526 ops/s
# Warmup Iteration  11: 7086597.373 ops/s
# Warmup Iteration  12: 7137185.854 ops/s
# Warmup Iteration  13: 7109137.710 ops/s
# Warmup Iteration  14: 7107239.141 ops/s
# Warmup Iteration  15: 7083915.841 ops/s
# Warmup Iteration  16: 7111101.281 ops/s
# Warmup Iteration  17: 7122390.599 ops/s
# Warmup Iteration  18: 7069126.922 ops/s
# Warmup Iteration  19: 7100253.068 ops/s
# Warmup Iteration  20: 7119534.471 ops/s
# Warmup Iteration  21: 7155207.083 ops/s
# Warmup Iteration  22: 7170760.650 ops/s
# Warmup Iteration  23: 7160227.750 ops/s
# Warmup Iteration  24: 7079524.303 ops/s
# Warmup Iteration  25: 7099731.748 ops/s
# Warmup Iteration  26: 7118394.769 ops/s
# Warmup Iteration  27: 7091282.276 ops/s
# Warmup Iteration  28: 7104020.428 ops/s
# Warmup Iteration  29: 7069961.962 ops/s
# Warmup Iteration  30: 7102859.435 ops/s
Iteration   1: 7141675.125 ops/s
Iteration   2: 7124313.953 ops/s
Iteration   3: 7071938.829 ops/s
Iteration   4: 7152971.307 ops/s
Iteration   5: 7178849.305 ops/s
Iteration   6: 7157610.800 ops/s
Iteration   7: 6993076.945 ops/s
Iteration   8: 7128918.627 ops/s
Iteration   9: 7057380.791 ops/s
Iteration  10: 7165599.676 ops/s
Iteration  11: 7048524.342 ops/s
Iteration  12: 7145402.012 ops/s
Iteration  13: 7137522.107 ops/s
Iteration  14: 7004199.553 ops/s
Iteration  15: 6977460.538 ops/s
Iteration  16: 7058181.345 ops/s
Iteration  17: 7182722.184 ops/s
Iteration  18: 7181824.472 ops/s
Iteration  19: 7145037.918 ops/s
Iteration  20: 7104113.692 ops/s
Iteration  21: 7087037.230 ops/s
Iteration  22: 7118854.193 ops/s
Iteration  23: 7096252.564 ops/s
Iteration  24: 7075348.030 ops/s
Iteration  25: 7141057.143 ops/s
Iteration  26: 7185942.770 ops/s
Iteration  27: 6987126.178 ops/s
Iteration  28: 7059251.808 ops/s
Iteration  29: 7032989.604 ops/s
Iteration  30: 7126512.163 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toList":
  7102256.507 ±(99.9%) 41362.328 ops/s [Average]
  (min, avg, max) = (6977460.538, 7102256.507, 7185942.770), stdev = 61909.190
  CI (99.9%): [7060894.179, 7143618.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_toList  thrpt   30  7102256.507 ± 41362.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14994240.361 ops/s
# Warmup Iteration   2: 25134861.944 ops/s
# Warmup Iteration   3: 29819666.476 ops/s
# Warmup Iteration   4: 30218886.965 ops/s
# Warmup Iteration   5: 30067361.137 ops/s
# Warmup Iteration   6: 30339452.804 ops/s
# Warmup Iteration   7: 30347690.786 ops/s
# Warmup Iteration   8: 30420284.004 ops/s
# Warmup Iteration   9: 30524724.691 ops/s
# Warmup Iteration  10: 30719645.347 ops/s
# Warmup Iteration  11: 30631918.601 ops/s
# Warmup Iteration  12: 30277886.990 ops/s
# Warmup Iteration  13: 30670786.654 ops/s
# Warmup Iteration  14: 30729162.895 ops/s
# Warmup Iteration  15: 30691257.796 ops/s
# Warmup Iteration  16: 30110928.534 ops/s
# Warmup Iteration  17: 30061817.051 ops/s
# Warmup Iteration  18: 30253497.502 ops/s
# Warmup Iteration  19: 30187762.313 ops/s
# Warmup Iteration  20: 30045074.878 ops/s
# Warmup Iteration  21: 30207332.547 ops/s
# Warmup Iteration  22: 30211206.258 ops/s
# Warmup Iteration  23: 29973635.856 ops/s
# Warmup Iteration  24: 29865703.168 ops/s
# Warmup Iteration  25: 30095992.031 ops/s
# Warmup Iteration  26: 30266122.403 ops/s
# Warmup Iteration  27: 30237121.508 ops/s
# Warmup Iteration  28: 30302046.713 ops/s
# Warmup Iteration  29: 30188254.273 ops/s
# Warmup Iteration  30: 30043692.891 ops/s
Iteration   1: 30543202.377 ops/s
Iteration   2: 30341354.180 ops/s
Iteration   3: 30276212.342 ops/s
Iteration   4: 29985603.688 ops/s
Iteration   5: 30097960.736 ops/s
Iteration   6: 29950268.857 ops/s
Iteration   7: 30153221.048 ops/s
Iteration   8: 29910865.458 ops/s
Iteration   9: 30071207.639 ops/s
Iteration  10: 30105939.578 ops/s
Iteration  11: 30093913.329 ops/s
Iteration  12: 30053897.814 ops/s
Iteration  13: 30492427.219 ops/s
Iteration  14: 29744185.925 ops/s
Iteration  15: 30326678.718 ops/s
Iteration  16: 29982049.239 ops/s
Iteration  17: 30253443.956 ops/s
Iteration  18: 30009190.752 ops/s
Iteration  19: 30178529.707 ops/s
Iteration  20: 30595027.056 ops/s
Iteration  21: 30523533.310 ops/s
Iteration  22: 30143726.310 ops/s
Iteration  23: 30557880.930 ops/s
Iteration  24: 30122313.186 ops/s
Iteration  25: 30097123.204 ops/s
Iteration  26: 30199269.137 ops/s
Iteration  27: 30199768.055 ops/s
Iteration  28: 30204172.645 ops/s
Iteration  29: 29578078.776 ops/s
Iteration  30: 30198573.536 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_toSet":
  30166320.624 ±(99.9%) 155159.205 ops/s [Average]
  (min, avg, max) = (29578078.776, 30166320.624, 30595027.056), stdev = 232235.011
  CI (99.9%): [30011161.419, 30321479.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_toSet  thrpt   30  30166320.624 ± 155159.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285399.621 ops/s
# Warmup Iteration   2: 447139.418 ops/s
# Warmup Iteration   3: 527521.720 ops/s
# Warmup Iteration   4: 530568.277 ops/s
# Warmup Iteration   5: 531227.355 ops/s
# Warmup Iteration   6: 530123.369 ops/s
# Warmup Iteration   7: 443543.883 ops/s
# Warmup Iteration   8: 532405.018 ops/s
# Warmup Iteration   9: 525308.269 ops/s
# Warmup Iteration  10: 531788.053 ops/s
# Warmup Iteration  11: 531064.345 ops/s
# Warmup Iteration  12: 528406.082 ops/s
# Warmup Iteration  13: 529558.977 ops/s
# Warmup Iteration  14: 526351.728 ops/s
# Warmup Iteration  15: 528766.566 ops/s
# Warmup Iteration  16: 532171.302 ops/s
# Warmup Iteration  17: 543044.947 ops/s
# Warmup Iteration  18: 546263.574 ops/s
# Warmup Iteration  19: 546313.882 ops/s
# Warmup Iteration  20: 528968.249 ops/s
# Warmup Iteration  21: 546209.450 ops/s
# Warmup Iteration  22: 539870.493 ops/s
# Warmup Iteration  23: 541740.532 ops/s
# Warmup Iteration  24: 526648.605 ops/s
# Warmup Iteration  25: 536190.465 ops/s
# Warmup Iteration  26: 532594.479 ops/s
# Warmup Iteration  27: 537591.336 ops/s
# Warmup Iteration  28: 526500.695 ops/s
# Warmup Iteration  29: 538472.537 ops/s
# Warmup Iteration  30: 532321.480 ops/s
Iteration   1: 545370.265 ops/s
Iteration   2: 550839.908 ops/s
Iteration   3: 546295.763 ops/s
Iteration   4: 534593.425 ops/s
Iteration   5: 525907.319 ops/s
Iteration   6: 546238.975 ops/s
Iteration   7: 514883.447 ops/s
Iteration   8: 552339.392 ops/s
Iteration   9: 551391.767 ops/s
Iteration  10: 540518.134 ops/s
Iteration  11: 545182.588 ops/s
Iteration  12: 544264.334 ops/s
Iteration  13: 539144.725 ops/s
Iteration  14: 533676.122 ops/s
Iteration  15: 526806.156 ops/s
Iteration  16: 527695.793 ops/s
Iteration  17: 542000.730 ops/s
Iteration  18: 543971.744 ops/s
Iteration  19: 514018.560 ops/s
Iteration  20: 523427.620 ops/s
Iteration  21: 546000.778 ops/s
Iteration  22: 547446.284 ops/s
Iteration  23: 543492.677 ops/s
Iteration  24: 538438.622 ops/s
Iteration  25: 541013.183 ops/s
Iteration  26: 538401.176 ops/s
Iteration  27: 541531.998 ops/s
Iteration  28: 547641.099 ops/s
Iteration  29: 542121.370 ops/s
Iteration  30: 540307.643 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_topOccurrences":
  539165.386 ±(99.9%) 6681.916 ops/s [Average]
  (min, avg, max) = (514018.560, 539165.386, 552339.392), stdev = 10001.178
  CI (99.9%): [532483.470, 545847.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
BooleanHashBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  539165.386 ± 6681.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3964859.739 ops/s
# Warmup Iteration   2: 8282170.929 ops/s
# Warmup Iteration   3: 5932101.966 ops/s
# Warmup Iteration   4: 7020485.089 ops/s
# Warmup Iteration   5: 6990065.823 ops/s
# Warmup Iteration   6: 6850069.735 ops/s
# Warmup Iteration   7: 6996298.001 ops/s
# Warmup Iteration   8: 6850908.957 ops/s
# Warmup Iteration   9: 6990194.865 ops/s
# Warmup Iteration  10: 7030887.380 ops/s
# Warmup Iteration  11: 7058485.974 ops/s
# Warmup Iteration  12: 6931303.058 ops/s
# Warmup Iteration  13: 6896459.219 ops/s
# Warmup Iteration  14: 6860970.310 ops/s
# Warmup Iteration  15: 6845264.067 ops/s
# Warmup Iteration  16: 6920001.729 ops/s
# Warmup Iteration  17: 6952544.716 ops/s
# Warmup Iteration  18: 7091900.254 ops/s
# Warmup Iteration  19: 7063473.934 ops/s
# Warmup Iteration  20: 7112319.271 ops/s
# Warmup Iteration  21: 7141225.573 ops/s
# Warmup Iteration  22: 6941431.486 ops/s
# Warmup Iteration  23: 6984801.258 ops/s
# Warmup Iteration  24: 6821639.672 ops/s
# Warmup Iteration  25: 6954065.382 ops/s
# Warmup Iteration  26: 7113684.696 ops/s
# Warmup Iteration  27: 7077226.213 ops/s
# Warmup Iteration  28: 6887341.703 ops/s
# Warmup Iteration  29: 6897083.736 ops/s
# Warmup Iteration  30: 7059570.972 ops/s
Iteration   1: 7012381.803 ops/s
Iteration   2: 7031717.195 ops/s
Iteration   3: 7017193.025 ops/s
Iteration   4: 7017378.488 ops/s
Iteration   5: 7104155.167 ops/s
Iteration   6: 6836686.745 ops/s
Iteration   7: 6943789.353 ops/s
Iteration   8: 7057402.521 ops/s
Iteration   9: 6999114.151 ops/s
Iteration  10: 6993927.400 ops/s
Iteration  11: 6990476.218 ops/s
Iteration  12: 6928795.583 ops/s
Iteration  13: 7092093.113 ops/s
Iteration  14: 6800676.151 ops/s
Iteration  15: 6824067.412 ops/s
Iteration  16: 6714750.297 ops/s
Iteration  17: 7049311.879 ops/s
Iteration  18: 6991876.664 ops/s
Iteration  19: 6921233.465 ops/s
Iteration  20: 6778290.243 ops/s
Iteration  21: 7038016.958 ops/s
Iteration  22: 6881866.290 ops/s
Iteration  23: 7064849.974 ops/s
Iteration  24: 7081249.468 ops/s
Iteration  25: 7070313.628 ops/s
Iteration  26: 7119827.526 ops/s
Iteration  27: 6994992.999 ops/s
Iteration  28: 6989622.754 ops/s
Iteration  29: 6954920.492 ops/s
Iteration  30: 7072005.282 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_with":
  6979099.408 ±(99.9%) 68973.307 ops/s [Average]
  (min, avg, max) = (6714750.297, 6979099.408, 7119827.526), stdev = 103236.006
  CI (99.9%): [6910126.101, 7048072.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_with  thrpt   30  6979099.408 ± 68973.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10939445.523 ops/s
# Warmup Iteration   2: 17703396.058 ops/s
# Warmup Iteration   3: 20449737.938 ops/s
# Warmup Iteration   4: 20335368.160 ops/s
# Warmup Iteration   5: 20899787.373 ops/s
# Warmup Iteration   6: 20984329.112 ops/s
# Warmup Iteration   7: 21034047.699 ops/s
# Warmup Iteration   8: 20808675.032 ops/s
# Warmup Iteration   9: 20423611.155 ops/s
# Warmup Iteration  10: 20430112.299 ops/s
# Warmup Iteration  11: 20799854.848 ops/s
# Warmup Iteration  12: 20428833.932 ops/s
# Warmup Iteration  13: 21022199.151 ops/s
# Warmup Iteration  14: 21013842.972 ops/s
# Warmup Iteration  15: 20954140.945 ops/s
# Warmup Iteration  16: 20922467.734 ops/s
# Warmup Iteration  17: 20845171.261 ops/s
# Warmup Iteration  18: 20871227.216 ops/s
# Warmup Iteration  19: 20920549.368 ops/s
# Warmup Iteration  20: 21095154.288 ops/s
# Warmup Iteration  21: 21153649.444 ops/s
# Warmup Iteration  22: 20708964.716 ops/s
# Warmup Iteration  23: 20439273.034 ops/s
# Warmup Iteration  24: 21081776.732 ops/s
# Warmup Iteration  25: 21161372.754 ops/s
# Warmup Iteration  26: 21103569.366 ops/s
# Warmup Iteration  27: 20550195.906 ops/s
# Warmup Iteration  28: 20760933.397 ops/s
# Warmup Iteration  29: 20667727.738 ops/s
# Warmup Iteration  30: 20642354.634 ops/s
Iteration   1: 20818760.020 ops/s
Iteration   2: 20818157.698 ops/s
Iteration   3: 20265171.700 ops/s
Iteration   4: 20779188.988 ops/s
Iteration   5: 20011191.868 ops/s
Iteration   6: 20631841.857 ops/s
Iteration   7: 21016759.583 ops/s
Iteration   8: 20222953.624 ops/s
Iteration   9: 20799081.732 ops/s
Iteration  10: 20367088.610 ops/s
Iteration  11: 20707486.271 ops/s
Iteration  12: 21169881.843 ops/s
Iteration  13: 21197588.039 ops/s
Iteration  14: 20996595.670 ops/s
Iteration  15: 20594901.653 ops/s
Iteration  16: 20324775.664 ops/s
Iteration  17: 20154646.483 ops/s
Iteration  18: 20097833.781 ops/s
Iteration  19: 20186324.164 ops/s
Iteration  20: 21237798.870 ops/s
Iteration  21: 20885392.053 ops/s
Iteration  22: 20736484.149 ops/s
Iteration  23: 20930277.756 ops/s
Iteration  24: 20953801.345 ops/s
Iteration  25: 20553858.802 ops/s
Iteration  26: 20694739.500 ops/s
Iteration  27: 21036169.155 ops/s
Iteration  28: 20580775.879 ops/s
Iteration  29: 20955449.570 ops/s
Iteration  30: 20011327.163 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withAll":
  20657876.783 ±(99.9%) 243764.771 ops/s [Average]
  (min, avg, max) = (20011191.868, 20657876.783, 21237798.870), stdev = 364855.662
  CI (99.9%): [20414112.012, 20901641.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
BooleanHashBagTest._Benchmark.benchmark_withAll  thrpt   30  20657876.783 ± 243764.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5008090.495 ops/s
# Warmup Iteration   2: 11005276.411 ops/s
# Warmup Iteration   3: 8347223.825 ops/s
# Warmup Iteration   4: 9457489.221 ops/s
# Warmup Iteration   5: 9616880.366 ops/s
# Warmup Iteration   6: 9712856.475 ops/s
# Warmup Iteration   7: 9744954.654 ops/s
# Warmup Iteration   8: 9770414.286 ops/s
# Warmup Iteration   9: 9676067.678 ops/s
# Warmup Iteration  10: 9737598.239 ops/s
# Warmup Iteration  11: 9715291.562 ops/s
# Warmup Iteration  12: 9752205.199 ops/s
# Warmup Iteration  13: 9678045.415 ops/s
# Warmup Iteration  14: 9776369.433 ops/s
# Warmup Iteration  15: 9799341.282 ops/s
# Warmup Iteration  16: 9701077.204 ops/s
# Warmup Iteration  17: 9479902.365 ops/s
# Warmup Iteration  18: 9340992.121 ops/s
# Warmup Iteration  19: 9660835.510 ops/s
# Warmup Iteration  20: 9607887.188 ops/s
# Warmup Iteration  21: 9685079.256 ops/s
# Warmup Iteration  22: 9923634.429 ops/s
# Warmup Iteration  23: 9424711.767 ops/s
# Warmup Iteration  24: 9356313.653 ops/s
# Warmup Iteration  25: 9733275.844 ops/s
# Warmup Iteration  26: 9843276.047 ops/s
# Warmup Iteration  27: 9480281.118 ops/s
# Warmup Iteration  28: 9701745.733 ops/s
# Warmup Iteration  29: 9774890.536 ops/s
# Warmup Iteration  30: 9752079.566 ops/s
Iteration   1: 9766222.854 ops/s
Iteration   2: 9677285.827 ops/s
Iteration   3: 9779533.175 ops/s
Iteration   4: 9832184.210 ops/s
Iteration   5: 9836130.524 ops/s
Iteration   6: 9737082.542 ops/s
Iteration   7: 9765531.031 ops/s
Iteration   8: 9739980.227 ops/s
Iteration   9: 9719630.500 ops/s
Iteration  10: 9658340.822 ops/s
Iteration  11: 9671893.970 ops/s
Iteration  12: 9656762.041 ops/s
Iteration  13: 9800775.050 ops/s
Iteration  14: 9257048.062 ops/s
Iteration  15: 9754077.610 ops/s
Iteration  16: 9567119.458 ops/s
Iteration  17: 9640764.016 ops/s
Iteration  18: 9465200.103 ops/s
Iteration  19: 9770291.160 ops/s
Iteration  20: 9574507.260 ops/s
Iteration  21: 9496885.594 ops/s
Iteration  22: 9562081.686 ops/s
Iteration  23: 9555930.351 ops/s
Iteration  24: 9713874.713 ops/s
Iteration  25: 9706516.069 ops/s
Iteration  26: 9672197.001 ops/s
Iteration  27: 9681080.598 ops/s
Iteration  28: 9737761.498 ops/s
Iteration  29: 9669987.947 ops/s
Iteration  30: 9759554.191 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_without":
  9674207.670 ±(99.9%) 81720.154 ops/s [Average]
  (min, avg, max) = (9257048.062, 9674207.670, 9836130.524), stdev = 122314.889
  CI (99.9%): [9592487.515, 9755927.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_without  thrpt   30  9674207.670 ± 81720.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4115209.720 ops/s
# Warmup Iteration   2: 8584636.947 ops/s
# Warmup Iteration   3: 7336488.261 ops/s
# Warmup Iteration   4: 9051989.644 ops/s
# Warmup Iteration   5: 8902297.686 ops/s
# Warmup Iteration   6: 8919538.911 ops/s
# Warmup Iteration   7: 9061328.012 ops/s
# Warmup Iteration   8: 9086790.136 ops/s
# Warmup Iteration   9: 8991269.641 ops/s
# Warmup Iteration  10: 8690656.561 ops/s
# Warmup Iteration  11: 8829815.136 ops/s
# Warmup Iteration  12: 8901993.470 ops/s
# Warmup Iteration  13: 8825842.059 ops/s
# Warmup Iteration  14: 8798344.373 ops/s
# Warmup Iteration  15: 8597891.528 ops/s
# Warmup Iteration  16: 8974592.490 ops/s
# Warmup Iteration  17: 8986604.452 ops/s
# Warmup Iteration  18: 8920867.915 ops/s
# Warmup Iteration  19: 8815936.989 ops/s
# Warmup Iteration  20: 8990845.453 ops/s
# Warmup Iteration  21: 8786918.510 ops/s
# Warmup Iteration  22: 8782760.650 ops/s
# Warmup Iteration  23: 8876717.610 ops/s
# Warmup Iteration  24: 8775979.040 ops/s
# Warmup Iteration  25: 8994298.282 ops/s
# Warmup Iteration  26: 8795608.605 ops/s
# Warmup Iteration  27: 8940371.955 ops/s
# Warmup Iteration  28: 9138728.067 ops/s
# Warmup Iteration  29: 9153928.104 ops/s
# Warmup Iteration  30: 9158864.431 ops/s
Iteration   1: 8905951.037 ops/s
Iteration   2: 8821426.029 ops/s
Iteration   3: 8845233.909 ops/s
Iteration   4: 8840482.195 ops/s
Iteration   5: 8948475.452 ops/s
Iteration   6: 9111400.604 ops/s
Iteration   7: 8840368.883 ops/s
Iteration   8: 8750756.468 ops/s
Iteration   9: 8706765.023 ops/s
Iteration  10: 8710164.532 ops/s
Iteration  11: 8635557.649 ops/s
Iteration  12: 8952386.449 ops/s
Iteration  13: 8913292.137 ops/s
Iteration  14: 8774983.316 ops/s
Iteration  15: 8964718.844 ops/s
Iteration  16: 9177883.395 ops/s
Iteration  17: 9042333.097 ops/s
Iteration  18: 9041468.309 ops/s
Iteration  19: 9006447.618 ops/s
Iteration  20: 9017386.710 ops/s
Iteration  21: 9028225.512 ops/s
Iteration  22: 8993794.035 ops/s
Iteration  23: 8870188.831 ops/s
Iteration  24: 8817020.797 ops/s
Iteration  25: 8933546.562 ops/s
Iteration  26: 8667954.982 ops/s
Iteration  27: 8868436.231 ops/s
Iteration  28: 8883626.527 ops/s
Iteration  29: 8657849.144 ops/s
Iteration  30: 8730408.006 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.BooleanHashBagTest._Benchmark.benchmark_withoutAll":
  8881951.076 ±(99.9%) 92936.679 ops/s [Average]
  (min, avg, max) = (8635557.649, 8881951.076, 9177883.395), stdev = 139103.257
  CI (99.9%): [8789014.397, 8974887.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
BooleanHashBagTest._Benchmark.benchmark_withoutAll  thrpt   30  8881951.076 ± 92936.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1305483.013 ops/s
# Warmup Iteration   2: 1614663.852 ops/s
# Warmup Iteration   3: 9510395.644 ops/s
# Warmup Iteration   4: 9121796.304 ops/s
# Warmup Iteration   5: 8730125.878 ops/s
# Warmup Iteration   6: 9482009.733 ops/s
# Warmup Iteration   7: 9630695.117 ops/s
# Warmup Iteration   8: 9552161.142 ops/s
# Warmup Iteration   9: 9523732.049 ops/s
# Warmup Iteration  10: 9798138.671 ops/s
# Warmup Iteration  11: 9743774.146 ops/s
# Warmup Iteration  12: 9821284.334 ops/s
# Warmup Iteration  13: 9703428.879 ops/s
# Warmup Iteration  14: 9737974.535 ops/s
# Warmup Iteration  15: 9731705.366 ops/s
# Warmup Iteration  16: 9742573.017 ops/s
# Warmup Iteration  17: 9752910.409 ops/s
# Warmup Iteration  18: 9792721.112 ops/s
# Warmup Iteration  19: 9711425.694 ops/s
# Warmup Iteration  20: 9817899.140 ops/s
# Warmup Iteration  21: 9896939.672 ops/s
# Warmup Iteration  22: 9726862.425 ops/s
# Warmup Iteration  23: 9600369.713 ops/s
# Warmup Iteration  24: 9918075.045 ops/s
# Warmup Iteration  25: 9850207.636 ops/s
# Warmup Iteration  26: 9570396.973 ops/s
# Warmup Iteration  27: 9646159.560 ops/s
# Warmup Iteration  28: 9435287.677 ops/s
# Warmup Iteration  29: 9410585.374 ops/s
# Warmup Iteration  30: 9653381.090 ops/s
Iteration   1: 9629788.512 ops/s
Iteration   2: 9814939.470 ops/s
Iteration   3: 9815962.810 ops/s
Iteration   4: 9791653.231 ops/s
Iteration   5: 9373549.167 ops/s
Iteration   6: 9594013.337 ops/s
Iteration   7: 9555364.258 ops/s
Iteration   8: 9623888.837 ops/s
Iteration   9: 9459733.649 ops/s
Iteration  10: 9639166.574 ops/s
Iteration  11: 9564035.061 ops/s
Iteration  12: 9426924.450 ops/s
Iteration  13: 9701674.840 ops/s
Iteration  14: 9566006.721 ops/s
Iteration  15: 9766029.477 ops/s
Iteration  16: 9819775.979 ops/s
Iteration  17: 9827086.199 ops/s
Iteration  18: 9760455.565 ops/s
Iteration  19: 9920135.982 ops/s
Iteration  20: 8440684.895 ops/s
Iteration  21: 9662524.172 ops/s
Iteration  22: 9928107.756 ops/s
Iteration  23: 9791251.203 ops/s
Iteration  24: 9841330.997 ops/s
Iteration  25: 9754079.110 ops/s
Iteration  26: 9749604.168 ops/s
Iteration  27: 9897888.457 ops/s
Iteration  28: 9755228.636 ops/s
Iteration  29: 9705117.149 ops/s
Iteration  30: 9826684.918 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_add":
  9666756.186 ±(99.9%) 181578.911 ops/s [Average]
  (min, avg, max) = (8440684.895, 9666756.186, 9928107.756), stdev = 271778.786
  CI (99.9%): [9485177.276, 9848335.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_add  thrpt   30  9666756.186 ± 181578.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2598745.405 ops/s
# Warmup Iteration   2: 4486860.759 ops/s
# Warmup Iteration   3: 18546422.263 ops/s
# Warmup Iteration   4: 14857492.968 ops/s
# Warmup Iteration   5: 17863767.477 ops/s
# Warmup Iteration   6: 18511671.098 ops/s
# Warmup Iteration   7: 18310879.766 ops/s
# Warmup Iteration   8: 18306052.267 ops/s
# Warmup Iteration   9: 18574955.431 ops/s
# Warmup Iteration  10: 18652769.499 ops/s
# Warmup Iteration  11: 17797306.835 ops/s
# Warmup Iteration  12: 17718369.147 ops/s
# Warmup Iteration  13: 17881880.312 ops/s
# Warmup Iteration  14: 18143947.332 ops/s
# Warmup Iteration  15: 18201638.512 ops/s
# Warmup Iteration  16: 18539125.287 ops/s
# Warmup Iteration  17: 18563498.535 ops/s
# Warmup Iteration  18: 18649033.660 ops/s
# Warmup Iteration  19: 18675127.909 ops/s
# Warmup Iteration  20: 18336439.344 ops/s
# Warmup Iteration  21: 18624059.017 ops/s
# Warmup Iteration  22: 18286495.539 ops/s
# Warmup Iteration  23: 18211924.178 ops/s
# Warmup Iteration  24: 18605834.730 ops/s
# Warmup Iteration  25: 18695200.790 ops/s
# Warmup Iteration  26: 18806569.182 ops/s
# Warmup Iteration  27: 18549264.833 ops/s
# Warmup Iteration  28: 18592161.204 ops/s
# Warmup Iteration  29: 18508241.451 ops/s
# Warmup Iteration  30: 18508282.006 ops/s
Iteration   1: 18434927.363 ops/s
Iteration   2: 18248040.425 ops/s
Iteration   3: 18665408.864 ops/s
Iteration   4: 18435534.518 ops/s
Iteration   5: 18160805.069 ops/s
Iteration   6: 18783953.913 ops/s
Iteration   7: 18645959.597 ops/s
Iteration   8: 18455142.303 ops/s
Iteration   9: 18373129.611 ops/s
Iteration  10: 18461541.630 ops/s
Iteration  11: 18286429.934 ops/s
Iteration  12: 18387370.705 ops/s
Iteration  13: 18054862.931 ops/s
Iteration  14: 18327285.115 ops/s
Iteration  15: 18513230.529 ops/s
Iteration  16: 18401785.996 ops/s
Iteration  17: 18123191.074 ops/s
Iteration  18: 18262586.286 ops/s
Iteration  19: 18655994.606 ops/s
Iteration  20: 18894498.331 ops/s
Iteration  21: 18719381.492 ops/s
Iteration  22: 18594756.431 ops/s
Iteration  23: 18621193.926 ops/s
Iteration  24: 18429833.481 ops/s
Iteration  25: 18545500.114 ops/s
Iteration  26: 18397855.488 ops/s
Iteration  27: 18715569.574 ops/s
Iteration  28: 18819014.255 ops/s
Iteration  29: 18822343.671 ops/s
Iteration  30: 18736969.930 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllArray":
  18499136.572 ±(99.9%) 147200.312 ops/s [Average]
  (min, avg, max) = (18054862.931, 18499136.572, 18894498.331), stdev = 220322.514
  CI (99.9%): [18351936.260, 18646336.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_addAllArray  thrpt   30  18499136.572 ± 147200.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830900.470 ops/s
# Warmup Iteration   2: 1352303.146 ops/s
# Warmup Iteration   3: 3554547.642 ops/s
# Warmup Iteration   4: 2943964.738 ops/s
# Warmup Iteration   5: 3554213.859 ops/s
# Warmup Iteration   6: 3429013.392 ops/s
# Warmup Iteration   7: 3413720.353 ops/s
# Warmup Iteration   8: 3517790.942 ops/s
# Warmup Iteration   9: 3516859.462 ops/s
# Warmup Iteration  10: 3577156.711 ops/s
# Warmup Iteration  11: 3604375.054 ops/s
# Warmup Iteration  12: 3591539.041 ops/s
# Warmup Iteration  13: 3518920.346 ops/s
# Warmup Iteration  14: 3563931.601 ops/s
# Warmup Iteration  15: 3588552.171 ops/s
# Warmup Iteration  16: 3568979.934 ops/s
# Warmup Iteration  17: 3563970.991 ops/s
# Warmup Iteration  18: 3570463.455 ops/s
# Warmup Iteration  19: 3569414.546 ops/s
# Warmup Iteration  20: 3581870.860 ops/s
# Warmup Iteration  21: 3573577.665 ops/s
# Warmup Iteration  22: 3571403.907 ops/s
# Warmup Iteration  23: 3587453.116 ops/s
# Warmup Iteration  24: 3572082.975 ops/s
# Warmup Iteration  25: 3571939.917 ops/s
# Warmup Iteration  26: 3578903.242 ops/s
# Warmup Iteration  27: 3563011.184 ops/s
# Warmup Iteration  28: 3540821.927 ops/s
# Warmup Iteration  29: 3547116.988 ops/s
# Warmup Iteration  30: 3567906.173 ops/s
Iteration   1: 3564976.139 ops/s
Iteration   2: 3578737.921 ops/s
Iteration   3: 3564517.094 ops/s
Iteration   4: 3537060.766 ops/s
Iteration   5: 3583556.291 ops/s
Iteration   6: 3531617.115 ops/s
Iteration   7: 3521893.298 ops/s
Iteration   8: 3499969.574 ops/s
Iteration   9: 3545154.112 ops/s
Iteration  10: 3513059.946 ops/s
Iteration  11: 3531016.907 ops/s
Iteration  12: 3572180.556 ops/s
Iteration  13: 3561270.461 ops/s
Iteration  14: 3533248.588 ops/s
Iteration  15: 3498934.262 ops/s
Iteration  16: 3584153.239 ops/s
Iteration  17: 3553900.511 ops/s
Iteration  18: 3502432.787 ops/s
Iteration  19: 3544713.297 ops/s
Iteration  20: 3565494.185 ops/s
Iteration  21: 3550307.926 ops/s
Iteration  22: 3552762.304 ops/s
Iteration  23: 3525892.265 ops/s
Iteration  24: 3575881.038 ops/s
Iteration  25: 3538063.211 ops/s
Iteration  26: 3571407.193 ops/s
Iteration  27: 3548010.466 ops/s
Iteration  28: 3521855.884 ops/s
Iteration  29: 3550820.736 ops/s
Iteration  30: 3581821.804 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addAllIterable":
  3546823.663 ±(99.9%) 16883.626 ops/s [Average]
  (min, avg, max) = (3498934.262, 3546823.663, 3584153.239), stdev = 25270.618
  CI (99.9%): [3529940.037, 3563707.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  3546823.663 ± 16883.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1368059.552 ops/s
# Warmup Iteration   2: 1717597.212 ops/s
# Warmup Iteration   3: 10863473.034 ops/s
# Warmup Iteration   4: 10939670.515 ops/s
# Warmup Iteration   5: 10465512.885 ops/s
# Warmup Iteration   6: 11557170.476 ops/s
# Warmup Iteration   7: 11453930.714 ops/s
# Warmup Iteration   8: 11529352.793 ops/s
# Warmup Iteration   9: 11497098.175 ops/s
# Warmup Iteration  10: 11593647.750 ops/s
# Warmup Iteration  11: 11605236.539 ops/s
# Warmup Iteration  12: 11291816.009 ops/s
# Warmup Iteration  13: 11435529.842 ops/s
# Warmup Iteration  14: 11380325.009 ops/s
# Warmup Iteration  15: 11479789.413 ops/s
# Warmup Iteration  16: 11372430.834 ops/s
# Warmup Iteration  17: 11419157.540 ops/s
# Warmup Iteration  18: 11231238.192 ops/s
# Warmup Iteration  19: 11360012.766 ops/s
# Warmup Iteration  20: 11438725.098 ops/s
# Warmup Iteration  21: 11396548.951 ops/s
# Warmup Iteration  22: 11409325.437 ops/s
# Warmup Iteration  23: 11337206.763 ops/s
# Warmup Iteration  24: 11177488.133 ops/s
# Warmup Iteration  25: 11543889.914 ops/s
# Warmup Iteration  26: 11260757.075 ops/s
# Warmup Iteration  27: 11169411.230 ops/s
# Warmup Iteration  28: 10863663.048 ops/s
# Warmup Iteration  29: 11337443.503 ops/s
# Warmup Iteration  30: 11175011.367 ops/s
Iteration   1: 11035754.841 ops/s
Iteration   2: 11539417.648 ops/s
Iteration   3: 11515090.977 ops/s
Iteration   4: 11511981.353 ops/s
Iteration   5: 11589923.762 ops/s
Iteration   6: 11504407.175 ops/s
Iteration   7: 11437949.037 ops/s
Iteration   8: 11587355.066 ops/s
Iteration   9: 11399741.732 ops/s
Iteration  10: 11089126.714 ops/s
Iteration  11: 11498561.608 ops/s
Iteration  12: 11439986.719 ops/s
Iteration  13: 11499011.006 ops/s
Iteration  14: 11553560.919 ops/s
Iteration  15: 11562313.571 ops/s
Iteration  16: 11470566.820 ops/s
Iteration  17: 11478401.362 ops/s
Iteration  18: 11479249.281 ops/s
Iteration  19: 11594894.874 ops/s
Iteration  20: 11609309.914 ops/s
Iteration  21: 11567925.797 ops/s
Iteration  22: 11549160.731 ops/s
Iteration  23: 11623756.717 ops/s
Iteration  24: 11626477.716 ops/s
Iteration  25: 11571194.002 ops/s
Iteration  26: 11497021.681 ops/s
Iteration  27: 11484882.063 ops/s
Iteration  28: 11526302.951 ops/s
Iteration  29: 11543127.500 ops/s
Iteration  30: 11554535.038 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences":
  11498032.952 ±(99.9%) 87555.096 ops/s [Average]
  (min, avg, max) = (11035754.841, 11498032.952, 11626477.716), stdev = 131048.355
  CI (99.9%): [11410477.857, 11585588.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  11498032.952 ± 87555.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 795804.275 ops/s
# Warmup Iteration   2: 786530.535 ops/s
# Warmup Iteration   3: 940251.459 ops/s
# Warmup Iteration   4: 1048083.250 ops/s
# Warmup Iteration   5: 1043327.173 ops/s
# Warmup Iteration   6: 1036603.537 ops/s
# Warmup Iteration   7: 1031442.268 ops/s
# Warmup Iteration   8: 1024436.333 ops/s
# Warmup Iteration   9: 1047065.086 ops/s
# Warmup Iteration  10: 1046557.468 ops/s
# Warmup Iteration  11: 1039788.442 ops/s
# Warmup Iteration  12: 1033142.372 ops/s
# Warmup Iteration  13: 990078.359 ops/s
# Warmup Iteration  14: 880638.710 ops/s
# Warmup Iteration  15: 1019188.204 ops/s
# Warmup Iteration  16: 1034353.025 ops/s
# Warmup Iteration  17: 1100685.312 ops/s
# Warmup Iteration  18: 1060743.261 ops/s
# Warmup Iteration  19: 1094848.914 ops/s
# Warmup Iteration  20: 1116210.945 ops/s
# Warmup Iteration  21: 1108355.763 ops/s
# Warmup Iteration  22: 1115637.843 ops/s
# Warmup Iteration  23: 1114245.786 ops/s
# Warmup Iteration  24: 1100304.213 ops/s
# Warmup Iteration  25: 1101278.722 ops/s
# Warmup Iteration  26: 1106325.240 ops/s
# Warmup Iteration  27: 1110861.315 ops/s
# Warmup Iteration  28: 1113702.361 ops/s
# Warmup Iteration  29: 1108766.054 ops/s
# Warmup Iteration  30: 1106737.655 ops/s
Iteration   1: 1106160.976 ops/s
Iteration   2: 1110325.124 ops/s
Iteration   3: 1094821.222 ops/s
Iteration   4: 1098596.262 ops/s
Iteration   5: 1106591.143 ops/s
Iteration   6: 1116869.542 ops/s
Iteration   7: 1111883.257 ops/s
Iteration   8: 1103968.736 ops/s
Iteration   9: 1100497.918 ops/s
Iteration  10: 1112909.482 ops/s
Iteration  11: 1114700.179 ops/s
Iteration  12: 1112938.209 ops/s
Iteration  13: 1111536.365 ops/s
Iteration  14: 1115380.099 ops/s
Iteration  15: 1109466.908 ops/s
Iteration  16: 1111932.994 ops/s
Iteration  17: 1103295.667 ops/s
Iteration  18: 1111680.450 ops/s
Iteration  19: 1106817.795 ops/s
Iteration  20: 1103930.518 ops/s
Iteration  21: 1103445.877 ops/s
Iteration  22: 1103095.893 ops/s
Iteration  23: 1089244.136 ops/s
Iteration  24: 1098102.883 ops/s
Iteration  25: 1108292.713 ops/s
Iteration  26: 1110958.008 ops/s
Iteration  27: 1089721.119 ops/s
Iteration  28: 1093741.040 ops/s
Iteration  29: 1113400.903 ops/s
Iteration  30: 1104763.241 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences_throws":
  1105968.955 ±(99.9%) 5005.024 ops/s [Average]
  (min, avg, max) = (1089244.136, 1105968.955, 1116869.542), stdev = 7491.285
  CI (99.9%): [1100963.931, 1110973.979] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1105968.955 ± 5005.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5219222.087 ops/s
# Warmup Iteration   2: 8601829.887 ops/s
# Warmup Iteration   3: 10461568.835 ops/s
# Warmup Iteration   4: 10393470.916 ops/s
# Warmup Iteration   5: 10284253.510 ops/s
# Warmup Iteration   6: 10459554.318 ops/s
# Warmup Iteration   7: 10347103.625 ops/s
# Warmup Iteration   8: 10432451.840 ops/s
# Warmup Iteration   9: 10466260.622 ops/s
# Warmup Iteration  10: 10403518.432 ops/s
# Warmup Iteration  11: 10532051.766 ops/s
# Warmup Iteration  12: 10407374.200 ops/s
# Warmup Iteration  13: 10492356.194 ops/s
# Warmup Iteration  14: 10296048.525 ops/s
# Warmup Iteration  15: 10411004.611 ops/s
# Warmup Iteration  16: 10425553.638 ops/s
# Warmup Iteration  17: 10447175.736 ops/s
# Warmup Iteration  18: 10521654.179 ops/s
# Warmup Iteration  19: 10528881.182 ops/s
# Warmup Iteration  20: 10448410.243 ops/s
# Warmup Iteration  21: 10371804.326 ops/s
# Warmup Iteration  22: 10511816.501 ops/s
# Warmup Iteration  23: 10488635.422 ops/s
# Warmup Iteration  24: 10439788.930 ops/s
# Warmup Iteration  25: 10395096.660 ops/s
# Warmup Iteration  26: 10213255.876 ops/s
# Warmup Iteration  27: 10319455.770 ops/s
# Warmup Iteration  28: 10420362.716 ops/s
# Warmup Iteration  29: 10440697.941 ops/s
# Warmup Iteration  30: 10468023.469 ops/s
Iteration   1: 10443561.545 ops/s
Iteration   2: 10360506.165 ops/s
Iteration   3: 10432482.572 ops/s
Iteration   4: 10174059.225 ops/s
Iteration   5: 10539705.193 ops/s
Iteration   6: 10525924.490 ops/s
Iteration   7: 10560700.972 ops/s
Iteration   8: 10514354.216 ops/s
Iteration   9: 10493930.731 ops/s
Iteration  10: 10431423.244 ops/s
Iteration  11: 10509689.310 ops/s
Iteration  12: 10468896.313 ops/s
Iteration  13: 10409995.024 ops/s
Iteration  14: 10342206.613 ops/s
Iteration  15: 10438445.651 ops/s
Iteration  16: 10349931.334 ops/s
Iteration  17: 10414071.298 ops/s
Iteration  18: 10408115.392 ops/s
Iteration  19: 10505685.752 ops/s
Iteration  20: 10476104.786 ops/s
Iteration  21: 10382792.295 ops/s
Iteration  22: 10518226.046 ops/s
Iteration  23: 10526584.050 ops/s
Iteration  24: 10464298.222 ops/s
Iteration  25: 10500732.852 ops/s
Iteration  26: 10513373.700 ops/s
Iteration  27: 10539680.193 ops/s
Iteration  28: 10554685.815 ops/s
Iteration  29: 10494598.765 ops/s
Iteration  30: 10476028.793 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_allSatisfy":
  10459026.352 ±(99.9%) 54384.443 ops/s [Average]
  (min, avg, max) = (10174059.225, 10459026.352, 10560700.972), stdev = 81400.080
  CI (99.9%): [10404641.909, 10513410.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  10459026.352 ± 54384.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5672474.441 ops/s
# Warmup Iteration   2: 9479152.911 ops/s
# Warmup Iteration   3: 11279708.365 ops/s
# Warmup Iteration   4: 11152247.210 ops/s
# Warmup Iteration   5: 11274755.015 ops/s
# Warmup Iteration   6: 11285416.045 ops/s
# Warmup Iteration   7: 11259571.923 ops/s
# Warmup Iteration   8: 11216391.751 ops/s
# Warmup Iteration   9: 10967175.623 ops/s
# Warmup Iteration  10: 11181170.125 ops/s
# Warmup Iteration  11: 11133608.036 ops/s
# Warmup Iteration  12: 11231651.864 ops/s
# Warmup Iteration  13: 11146570.454 ops/s
# Warmup Iteration  14: 11278656.860 ops/s
# Warmup Iteration  15: 11284927.243 ops/s
# Warmup Iteration  16: 11141995.272 ops/s
# Warmup Iteration  17: 11237858.969 ops/s
# Warmup Iteration  18: 11218012.779 ops/s
# Warmup Iteration  19: 11259860.426 ops/s
# Warmup Iteration  20: 11232590.795 ops/s
# Warmup Iteration  21: 11231568.664 ops/s
# Warmup Iteration  22: 11318391.473 ops/s
# Warmup Iteration  23: 11267366.261 ops/s
# Warmup Iteration  24: 11110549.487 ops/s
# Warmup Iteration  25: 11160550.132 ops/s
# Warmup Iteration  26: 11213228.146 ops/s
# Warmup Iteration  27: 11300278.010 ops/s
# Warmup Iteration  28: 11286051.662 ops/s
# Warmup Iteration  29: 11179570.628 ops/s
# Warmup Iteration  30: 11265946.310 ops/s
Iteration   1: 11261175.330 ops/s
Iteration   2: 11194059.696 ops/s
Iteration   3: 11040401.798 ops/s
Iteration   4: 11292643.235 ops/s
Iteration   5: 11229425.337 ops/s
Iteration   6: 11317300.432 ops/s
Iteration   7: 11192080.166 ops/s
Iteration   8: 11284101.496 ops/s
Iteration   9: 11244212.152 ops/s
Iteration  10: 11193857.540 ops/s
Iteration  11: 11312914.060 ops/s
Iteration  12: 11227191.971 ops/s
Iteration  13: 11173355.597 ops/s
Iteration  14: 11249345.377 ops/s
Iteration  15: 11260093.844 ops/s
Iteration  16: 11364399.517 ops/s
Iteration  17: 11264094.180 ops/s
Iteration  18: 11131311.617 ops/s
Iteration  19: 11227021.005 ops/s
Iteration  20: 11121456.195 ops/s
Iteration  21: 11134836.351 ops/s
Iteration  22: 11230182.691 ops/s
Iteration  23: 11260593.123 ops/s
Iteration  24: 11104730.833 ops/s
Iteration  25: 11127352.968 ops/s
Iteration  26: 10871869.369 ops/s
Iteration  27: 11131509.133 ops/s
Iteration  28: 11174800.214 ops/s
Iteration  29: 10992067.577 ops/s
Iteration  30: 11317683.608 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_anySatisfy":
  11197535.547 ±(99.9%) 69925.470 ops/s [Average]
  (min, avg, max) = (10871869.369, 11197535.547, 11364399.517), stdev = 104661.160
  CI (99.9%): [11127610.077, 11267461.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  11197535.547 ± 69925.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839164.864 ops/s
# Warmup Iteration   2: 1864715.740 ops/s
# Warmup Iteration   3: 1880313.619 ops/s
# Warmup Iteration   4: 1555509.873 ops/s
# Warmup Iteration   5: 1844792.325 ops/s
# Warmup Iteration   6: 1835005.197 ops/s
# Warmup Iteration   7: 1820315.900 ops/s
# Warmup Iteration   8: 1867028.860 ops/s
# Warmup Iteration   9: 1858709.213 ops/s
# Warmup Iteration  10: 1879307.691 ops/s
# Warmup Iteration  11: 1848814.078 ops/s
# Warmup Iteration  12: 1861436.370 ops/s
# Warmup Iteration  13: 1875981.330 ops/s
# Warmup Iteration  14: 1858965.584 ops/s
# Warmup Iteration  15: 1876289.796 ops/s
# Warmup Iteration  16: 1847873.065 ops/s
# Warmup Iteration  17: 1883916.710 ops/s
# Warmup Iteration  18: 1864875.161 ops/s
# Warmup Iteration  19: 1857851.769 ops/s
# Warmup Iteration  20: 1839021.545 ops/s
# Warmup Iteration  21: 1855506.270 ops/s
# Warmup Iteration  22: 1850755.900 ops/s
# Warmup Iteration  23: 1854820.789 ops/s
# Warmup Iteration  24: 1880830.918 ops/s
# Warmup Iteration  25: 1878270.100 ops/s
# Warmup Iteration  26: 1891824.756 ops/s
# Warmup Iteration  27: 1887347.355 ops/s
# Warmup Iteration  28: 1884203.064 ops/s
# Warmup Iteration  29: 1881225.058 ops/s
# Warmup Iteration  30: 1877999.015 ops/s
Iteration   1: 1885378.120 ops/s
Iteration   2: 1870258.509 ops/s
Iteration   3: 1894602.927 ops/s
Iteration   4: 1874706.107 ops/s
Iteration   5: 1887559.998 ops/s
Iteration   6: 1888524.235 ops/s
Iteration   7: 1879478.991 ops/s
Iteration   8: 1878326.191 ops/s
Iteration   9: 1891820.553 ops/s
Iteration  10: 1883421.149 ops/s
Iteration  11: 1866530.711 ops/s
Iteration  12: 1887285.980 ops/s
Iteration  13: 1893598.959 ops/s
Iteration  14: 1857307.233 ops/s
Iteration  15: 1861178.419 ops/s
Iteration  16: 1879367.701 ops/s
Iteration  17: 1878057.717 ops/s
Iteration  18: 1869526.889 ops/s
Iteration  19: 1890107.733 ops/s
Iteration  20: 1863509.751 ops/s
Iteration  21: 1879143.497 ops/s
Iteration  22: 1866410.347 ops/s
Iteration  23: 1878169.186 ops/s
Iteration  24: 1890579.958 ops/s
Iteration  25: 1872113.209 ops/s
Iteration  26: 1871127.609 ops/s
Iteration  27: 1866751.292 ops/s
Iteration  28: 1872944.078 ops/s
Iteration  29: 1882969.253 ops/s
Iteration  30: 1861238.080 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_appendString":
  1877399.813 ±(99.9%) 7073.850 ops/s [Average]
  (min, avg, max) = (1857307.233, 1877399.813, 1894602.927), stdev = 10587.806
  CI (99.9%): [1870325.963, 1884473.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_appendString  thrpt   30  1877399.813 ± 7073.850  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18171584.024 ops/s
# Warmup Iteration   2: 34341354.043 ops/s
# Warmup Iteration   3: 28771033.521 ops/s
# Warmup Iteration   4: 33828919.098 ops/s
# Warmup Iteration   5: 33858742.177 ops/s
# Warmup Iteration   6: 33355675.208 ops/s
# Warmup Iteration   7: 33962075.491 ops/s
# Warmup Iteration   8: 33898777.335 ops/s
# Warmup Iteration   9: 33913945.192 ops/s
# Warmup Iteration  10: 33916581.411 ops/s
# Warmup Iteration  11: 33928965.275 ops/s
# Warmup Iteration  12: 33964466.084 ops/s
# Warmup Iteration  13: 33918718.687 ops/s
# Warmup Iteration  14: 34033536.931 ops/s
# Warmup Iteration  15: 33569242.823 ops/s
# Warmup Iteration  16: 33686657.309 ops/s
# Warmup Iteration  17: 33879566.597 ops/s
# Warmup Iteration  18: 33831857.582 ops/s
# Warmup Iteration  19: 34042646.917 ops/s
# Warmup Iteration  20: 34144011.260 ops/s
# Warmup Iteration  21: 34192590.431 ops/s
# Warmup Iteration  22: 34177330.524 ops/s
# Warmup Iteration  23: 33959029.364 ops/s
# Warmup Iteration  24: 33944522.503 ops/s
# Warmup Iteration  25: 34013701.581 ops/s
# Warmup Iteration  26: 33957441.065 ops/s
# Warmup Iteration  27: 34079988.829 ops/s
# Warmup Iteration  28: 33500898.330 ops/s
# Warmup Iteration  29: 33635130.045 ops/s
# Warmup Iteration  30: 33642287.752 ops/s
Iteration   1: 33916825.226 ops/s
Iteration   2: 34114639.365 ops/s
Iteration   3: 33863430.508 ops/s
Iteration   4: 33870979.021 ops/s
Iteration   5: 33726683.633 ops/s
Iteration   6: 33561113.702 ops/s
Iteration   7: 32719540.248 ops/s
Iteration   8: 33519052.914 ops/s
Iteration   9: 33791216.063 ops/s
Iteration  10: 33596489.441 ops/s
Iteration  11: 33617773.578 ops/s
Iteration  12: 33410969.140 ops/s
Iteration  13: 33775226.516 ops/s
Iteration  14: 34040311.160 ops/s
Iteration  15: 34042509.875 ops/s
Iteration  16: 33921027.657 ops/s
Iteration  17: 33891029.168 ops/s
Iteration  18: 34187132.324 ops/s
Iteration  19: 34184920.868 ops/s
Iteration  20: 34134201.683 ops/s
Iteration  21: 33679642.666 ops/s
Iteration  22: 34020684.033 ops/s
Iteration  23: 33702680.219 ops/s
Iteration  24: 33801326.767 ops/s
Iteration  25: 33483872.874 ops/s
Iteration  26: 33640895.638 ops/s
Iteration  27: 34206142.900 ops/s
Iteration  28: 34047478.083 ops/s
Iteration  29: 34083423.862 ops/s
Iteration  30: 33894818.048 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asLazy":
  33814867.906 ±(99.9%) 204356.165 ops/s [Average]
  (min, avg, max) = (32719540.248, 33814867.906, 34206142.900), stdev = 305870.710
  CI (99.9%): [33610511.741, 34019224.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_asLazy  thrpt   30  33814867.906 ± 204356.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1911116.654 ops/s
# Warmup Iteration   2: 3172082.591 ops/s
# Warmup Iteration   3: 8542563.550 ops/s
# Warmup Iteration   4: 7288217.998 ops/s
# Warmup Iteration   5: 8631175.698 ops/s
# Warmup Iteration   6: 8556980.244 ops/s
# Warmup Iteration   7: 8679846.689 ops/s
# Warmup Iteration   8: 8540803.408 ops/s
# Warmup Iteration   9: 8610726.921 ops/s
# Warmup Iteration  10: 8635150.458 ops/s
# Warmup Iteration  11: 8506699.613 ops/s
# Warmup Iteration  12: 8580202.198 ops/s
# Warmup Iteration  13: 8510272.718 ops/s
# Warmup Iteration  14: 8615705.288 ops/s
# Warmup Iteration  15: 8544353.214 ops/s
# Warmup Iteration  16: 8627787.245 ops/s
# Warmup Iteration  17: 8682953.666 ops/s
# Warmup Iteration  18: 8546277.787 ops/s
# Warmup Iteration  19: 8358418.415 ops/s
# Warmup Iteration  20: 8182040.567 ops/s
# Warmup Iteration  21: 8501567.090 ops/s
# Warmup Iteration  22: 8468515.137 ops/s
# Warmup Iteration  23: 8551621.021 ops/s
# Warmup Iteration  24: 8530940.037 ops/s
# Warmup Iteration  25: 8449275.176 ops/s
# Warmup Iteration  26: 8525632.369 ops/s
# Warmup Iteration  27: 8432970.665 ops/s
# Warmup Iteration  28: 8566538.520 ops/s
# Warmup Iteration  29: 8367318.740 ops/s
# Warmup Iteration  30: 8328799.789 ops/s
Iteration   1: 8255330.557 ops/s
Iteration   2: 8540448.827 ops/s
Iteration   3: 8468720.358 ops/s
Iteration   4: 8566962.811 ops/s
Iteration   5: 8550189.850 ops/s
Iteration   6: 8381964.132 ops/s
Iteration   7: 8412532.734 ops/s
Iteration   8: 8401786.916 ops/s
Iteration   9: 8534423.175 ops/s
Iteration  10: 8342904.637 ops/s
Iteration  11: 8157671.161 ops/s
Iteration  12: 8329438.279 ops/s
Iteration  13: 8304933.280 ops/s
Iteration  14: 8430354.599 ops/s
Iteration  15: 8238464.906 ops/s
Iteration  16: 8449694.825 ops/s
Iteration  17: 8185640.608 ops/s
Iteration  18: 8211127.648 ops/s
Iteration  19: 8215725.547 ops/s
Iteration  20: 8453300.934 ops/s
Iteration  21: 8454389.131 ops/s
Iteration  22: 8350560.940 ops/s
Iteration  23: 8445032.798 ops/s
Iteration  24: 8378961.930 ops/s
Iteration  25: 8330184.036 ops/s
Iteration  26: 8511155.348 ops/s
Iteration  27: 8472242.904 ops/s
Iteration  28: 8538355.828 ops/s
Iteration  29: 8436747.832 ops/s
Iteration  30: 8563910.178 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asSynchronized":
  8397105.224 ±(99.9%) 79991.059 ops/s [Average]
  (min, avg, max) = (8157671.161, 8397105.224, 8566962.811), stdev = 119726.861
  CI (99.9%): [8317114.165, 8477096.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  8397105.224 ± 79991.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1731108.507 ops/s
# Warmup Iteration   2: 3744934.549 ops/s
# Warmup Iteration   3: 8754218.442 ops/s
# Warmup Iteration   4: 7392781.007 ops/s
# Warmup Iteration   5: 8784147.448 ops/s
# Warmup Iteration   6: 8766457.523 ops/s
# Warmup Iteration   7: 8641007.169 ops/s
# Warmup Iteration   8: 8697549.102 ops/s
# Warmup Iteration   9: 8660490.034 ops/s
# Warmup Iteration  10: 8594986.878 ops/s
# Warmup Iteration  11: 8184238.046 ops/s
# Warmup Iteration  12: 8504349.548 ops/s
# Warmup Iteration  13: 8762465.406 ops/s
# Warmup Iteration  14: 8719358.480 ops/s
# Warmup Iteration  15: 8687858.539 ops/s
# Warmup Iteration  16: 8803978.203 ops/s
# Warmup Iteration  17: 8826452.613 ops/s
# Warmup Iteration  18: 8923869.953 ops/s
# Warmup Iteration  19: 8910500.406 ops/s
# Warmup Iteration  20: 8895141.946 ops/s
# Warmup Iteration  21: 8822858.455 ops/s
# Warmup Iteration  22: 8841719.896 ops/s
# Warmup Iteration  23: 8814117.851 ops/s
# Warmup Iteration  24: 8804973.708 ops/s
# Warmup Iteration  25: 8673522.476 ops/s
# Warmup Iteration  26: 8545435.363 ops/s
# Warmup Iteration  27: 8691431.843 ops/s
# Warmup Iteration  28: 8843005.169 ops/s
# Warmup Iteration  29: 8764640.823 ops/s
# Warmup Iteration  30: 8790862.977 ops/s
Iteration   1: 8518350.956 ops/s
Iteration   2: 8435926.382 ops/s
Iteration   3: 8207895.988 ops/s
Iteration   4: 8652446.862 ops/s
Iteration   5: 8704718.499 ops/s
Iteration   6: 8971927.191 ops/s
Iteration   7: 8773537.674 ops/s
Iteration   8: 8682841.186 ops/s
Iteration   9: 8885694.570 ops/s
Iteration  10: 8804854.946 ops/s
Iteration  11: 8818184.409 ops/s
Iteration  12: 8703991.238 ops/s
Iteration  13: 8755943.722 ops/s
Iteration  14: 8443087.498 ops/s
Iteration  15: 8522252.870 ops/s
Iteration  16: 8827417.127 ops/s
Iteration  17: 8818219.837 ops/s
Iteration  18: 8841783.096 ops/s
Iteration  19: 8714372.437 ops/s
Iteration  20: 8664531.786 ops/s
Iteration  21: 8785461.734 ops/s
Iteration  22: 8865243.146 ops/s
Iteration  23: 8888339.041 ops/s
Iteration  24: 8724210.924 ops/s
Iteration  25: 8937307.753 ops/s
Iteration  26: 8826784.478 ops/s
Iteration  27: 8850447.885 ops/s
Iteration  28: 8649443.811 ops/s
Iteration  29: 8502104.913 ops/s
Iteration  30: 8629584.305 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_asUnmodifiable":
  8713563.542 ±(99.9%) 114089.121 ops/s [Average]
  (min, avg, max) = (8207895.988, 8713563.542, 8971927.191), stdev = 170763.238
  CI (99.9%): [8599474.421, 8827652.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  8713563.542 ± 114089.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6620574.493 ops/s
# Warmup Iteration   2: 14107633.036 ops/s
# Warmup Iteration   3: 11694203.942 ops/s
# Warmup Iteration   4: 14246070.811 ops/s
# Warmup Iteration   5: 14168486.542 ops/s
# Warmup Iteration   6: 14297016.534 ops/s
# Warmup Iteration   7: 14201479.482 ops/s
# Warmup Iteration   8: 14318471.844 ops/s
# Warmup Iteration   9: 14215560.460 ops/s
# Warmup Iteration  10: 13918301.652 ops/s
# Warmup Iteration  11: 14280446.336 ops/s
# Warmup Iteration  12: 13666709.594 ops/s
# Warmup Iteration  13: 14216881.233 ops/s
# Warmup Iteration  14: 14024076.902 ops/s
# Warmup Iteration  15: 13953777.863 ops/s
# Warmup Iteration  16: 13683620.749 ops/s
# Warmup Iteration  17: 13889802.441 ops/s
# Warmup Iteration  18: 14283435.072 ops/s
# Warmup Iteration  19: 14383935.158 ops/s
# Warmup Iteration  20: 14257069.990 ops/s
# Warmup Iteration  21: 14288656.771 ops/s
# Warmup Iteration  22: 14161336.754 ops/s
# Warmup Iteration  23: 14250641.402 ops/s
# Warmup Iteration  24: 14268973.638 ops/s
# Warmup Iteration  25: 14206202.695 ops/s
# Warmup Iteration  26: 14156163.932 ops/s
# Warmup Iteration  27: 14194345.355 ops/s
# Warmup Iteration  28: 14280631.645 ops/s
# Warmup Iteration  29: 14136552.691 ops/s
# Warmup Iteration  30: 14236737.241 ops/s
Iteration   1: 13886558.534 ops/s
Iteration   2: 14189465.987 ops/s
Iteration   3: 14214379.314 ops/s
Iteration   4: 14296887.672 ops/s
Iteration   5: 14280377.656 ops/s
Iteration   6: 14275587.717 ops/s
Iteration   7: 14301274.245 ops/s
Iteration   8: 14283874.251 ops/s
Iteration   9: 14112151.136 ops/s
Iteration  10: 14308067.862 ops/s
Iteration  11: 14215845.165 ops/s
Iteration  12: 14150171.659 ops/s
Iteration  13: 14291723.377 ops/s
Iteration  14: 13579018.663 ops/s
Iteration  15: 14265058.285 ops/s
Iteration  16: 14151036.995 ops/s
Iteration  17: 14219011.843 ops/s
Iteration  18: 14279133.251 ops/s
Iteration  19: 14166807.649 ops/s
Iteration  20: 14239374.594 ops/s
Iteration  21: 14233262.249 ops/s
Iteration  22: 14139497.402 ops/s
Iteration  23: 14223807.903 ops/s
Iteration  24: 13537904.205 ops/s
Iteration  25: 13757500.037 ops/s
Iteration  26: 14164467.052 ops/s
Iteration  27: 14132237.974 ops/s
Iteration  28: 14134684.283 ops/s
Iteration  29: 14446800.426 ops/s
Iteration  30: 13808688.921 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator":
  14142821.877 ±(99.9%) 143351.624 ops/s [Average]
  (min, avg, max) = (13537904.205, 14142821.877, 14446800.426), stdev = 214561.979
  CI (99.9%): [13999470.253, 14286173.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  14142821.877 ± 143351.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587663.295 ops/s
# Warmup Iteration   2: 759250.043 ops/s
# Warmup Iteration   3: 891742.618 ops/s
# Warmup Iteration   4: 931908.503 ops/s
# Warmup Iteration   5: 926838.730 ops/s
# Warmup Iteration   6: 914843.065 ops/s
# Warmup Iteration   7: 874930.001 ops/s
# Warmup Iteration   8: 745031.792 ops/s
# Warmup Iteration   9: 904760.206 ops/s
# Warmup Iteration  10: 915043.118 ops/s
# Warmup Iteration  11: 921393.996 ops/s
# Warmup Iteration  12: 923183.791 ops/s
# Warmup Iteration  13: 909262.066 ops/s
# Warmup Iteration  14: 902861.029 ops/s
# Warmup Iteration  15: 916146.863 ops/s
# Warmup Iteration  16: 906913.318 ops/s
# Warmup Iteration  17: 951975.520 ops/s
# Warmup Iteration  18: 979607.110 ops/s
# Warmup Iteration  19: 980341.639 ops/s
# Warmup Iteration  20: 959520.431 ops/s
# Warmup Iteration  21: 966134.181 ops/s
# Warmup Iteration  22: 966605.565 ops/s
# Warmup Iteration  23: 931323.972 ops/s
# Warmup Iteration  24: 955744.340 ops/s
# Warmup Iteration  25: 976151.399 ops/s
# Warmup Iteration  26: 971024.837 ops/s
# Warmup Iteration  27: 976395.599 ops/s
# Warmup Iteration  28: 963865.573 ops/s
# Warmup Iteration  29: 967248.793 ops/s
# Warmup Iteration  30: 950275.239 ops/s
Iteration   1: 961394.053 ops/s
Iteration   2: 975633.357 ops/s
Iteration   3: 973745.819 ops/s
Iteration   4: 970455.838 ops/s
Iteration   5: 974332.214 ops/s
Iteration   6: 971004.044 ops/s
Iteration   7: 933696.749 ops/s
Iteration   8: 970663.680 ops/s
Iteration   9: 983604.947 ops/s
Iteration  10: 983808.083 ops/s
Iteration  11: 970115.339 ops/s
Iteration  12: 978685.405 ops/s
Iteration  13: 964231.856 ops/s
Iteration  14: 951904.904 ops/s
Iteration  15: 930408.988 ops/s
Iteration  16: 962691.275 ops/s
Iteration  17: 976821.807 ops/s
Iteration  18: 965844.012 ops/s
Iteration  19: 978133.304 ops/s
Iteration  20: 952525.119 ops/s
Iteration  21: 959128.467 ops/s
Iteration  22: 955689.633 ops/s
Iteration  23: 947756.567 ops/s
Iteration  24: 957391.666 ops/s
Iteration  25: 969406.201 ops/s
Iteration  26: 962995.719 ops/s
Iteration  27: 960993.766 ops/s
Iteration  28: 971853.792 ops/s
Iteration  29: 980164.641 ops/s
Iteration  30: 966880.958 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove":
  965398.740 ±(99.9%) 8697.746 ops/s [Average]
  (min, avg, max) = (930408.988, 965398.740, 983808.083), stdev = 13018.377
  CI (99.9%): [956700.995, 974096.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  965398.740 ± 8697.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 411151.597 ops/s
# Warmup Iteration   2: 577003.675 ops/s
# Warmup Iteration   3: 700893.236 ops/s
# Warmup Iteration   4: 675823.744 ops/s
# Warmup Iteration   5: 699190.997 ops/s
# Warmup Iteration   6: 697366.075 ops/s
# Warmup Iteration   7: 610090.775 ops/s
# Warmup Iteration   8: 658556.573 ops/s
# Warmup Iteration   9: 691446.324 ops/s
# Warmup Iteration  10: 707998.863 ops/s
# Warmup Iteration  11: 705984.797 ops/s
# Warmup Iteration  12: 694742.214 ops/s
# Warmup Iteration  13: 702337.201 ops/s
# Warmup Iteration  14: 693148.384 ops/s
# Warmup Iteration  15: 701838.614 ops/s
# Warmup Iteration  16: 704637.170 ops/s
# Warmup Iteration  17: 737351.315 ops/s
# Warmup Iteration  18: 728600.260 ops/s
# Warmup Iteration  19: 736122.882 ops/s
# Warmup Iteration  20: 745471.457 ops/s
# Warmup Iteration  21: 744998.885 ops/s
# Warmup Iteration  22: 737069.402 ops/s
# Warmup Iteration  23: 733885.943 ops/s
# Warmup Iteration  24: 739407.704 ops/s
# Warmup Iteration  25: 737210.806 ops/s
# Warmup Iteration  26: 735763.124 ops/s
# Warmup Iteration  27: 721718.378 ops/s
# Warmup Iteration  28: 737478.030 ops/s
# Warmup Iteration  29: 730424.278 ops/s
# Warmup Iteration  30: 731050.539 ops/s
Iteration   1: 716899.280 ops/s
Iteration   2: 726882.765 ops/s
Iteration   3: 624266.770 ops/s
Iteration   4: 737473.652 ops/s
Iteration   5: 738963.674 ops/s
Iteration   6: 738110.986 ops/s
Iteration   7: 736072.003 ops/s
Iteration   8: 730040.862 ops/s
Iteration   9: 723023.914 ops/s
Iteration  10: 745454.755 ops/s
Iteration  11: 727623.523 ops/s
Iteration  12: 729289.779 ops/s
Iteration  13: 733686.098 ops/s
Iteration  14: 736614.755 ops/s
Iteration  15: 735118.504 ops/s
Iteration  16: 736458.835 ops/s
Iteration  17: 742733.733 ops/s
Iteration  18: 733072.806 ops/s
Iteration  19: 738162.846 ops/s
Iteration  20: 738812.291 ops/s
Iteration  21: 721266.016 ops/s
Iteration  22: 735370.416 ops/s
Iteration  23: 736064.824 ops/s
Iteration  24: 735265.576 ops/s
Iteration  25: 731882.575 ops/s
Iteration  26: 713067.978 ops/s
Iteration  27: 739740.817 ops/s
Iteration  28: 733430.981 ops/s
Iteration  29: 735114.750 ops/s
Iteration  30: 727447.516 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_bottomOccurrences":
  729247.109 ±(99.9%) 14100.257 ops/s [Average]
  (min, avg, max) = (624266.770, 729247.109, 745454.755), stdev = 21104.602
  CI (99.9%): [715146.852, 743347.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  729247.109 ± 14100.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159878.937 ops/s
# Warmup Iteration   2: 245350.638 ops/s
# Warmup Iteration   3: 288318.071 ops/s
# Warmup Iteration   4: 292665.657 ops/s
# Warmup Iteration   5: 292102.250 ops/s
# Warmup Iteration   6: 293845.827 ops/s
# Warmup Iteration   7: 243201.787 ops/s
# Warmup Iteration   8: 291215.526 ops/s
# Warmup Iteration   9: 295241.545 ops/s
# Warmup Iteration  10: 295099.313 ops/s
# Warmup Iteration  11: 286787.905 ops/s
# Warmup Iteration  12: 295704.848 ops/s
# Warmup Iteration  13: 295136.501 ops/s
# Warmup Iteration  14: 292071.457 ops/s
# Warmup Iteration  15: 292969.853 ops/s
# Warmup Iteration  16: 281708.508 ops/s
# Warmup Iteration  17: 301617.926 ops/s
# Warmup Iteration  18: 304225.125 ops/s
# Warmup Iteration  19: 291543.942 ops/s
# Warmup Iteration  20: 299434.920 ops/s
# Warmup Iteration  21: 288424.601 ops/s
# Warmup Iteration  22: 291120.825 ops/s
# Warmup Iteration  23: 286464.195 ops/s
# Warmup Iteration  24: 294912.956 ops/s
# Warmup Iteration  25: 291558.075 ops/s
# Warmup Iteration  26: 301273.485 ops/s
# Warmup Iteration  27: 300327.588 ops/s
# Warmup Iteration  28: 300386.442 ops/s
# Warmup Iteration  29: 299074.729 ops/s
# Warmup Iteration  30: 302962.250 ops/s
Iteration   1: 293533.060 ops/s
Iteration   2: 302838.193 ops/s
Iteration   3: 298295.544 ops/s
Iteration   4: 301241.231 ops/s
Iteration   5: 301015.998 ops/s
Iteration   6: 299052.845 ops/s
Iteration   7: 301403.963 ops/s
Iteration   8: 300851.655 ops/s
Iteration   9: 294227.784 ops/s
Iteration  10: 294395.304 ops/s
Iteration  11: 302413.439 ops/s
Iteration  12: 299909.827 ops/s
Iteration  13: 305812.752 ops/s
Iteration  14: 307580.006 ops/s
Iteration  15: 302126.063 ops/s
Iteration  16: 294620.238 ops/s
Iteration  17: 296572.285 ops/s
Iteration  18: 299069.199 ops/s
Iteration  19: 303281.899 ops/s
Iteration  20: 288921.694 ops/s
Iteration  21: 295508.880 ops/s
Iteration  22: 297633.607 ops/s
Iteration  23: 296577.924 ops/s
Iteration  24: 294729.027 ops/s
Iteration  25: 291604.716 ops/s
Iteration  26: 298433.791 ops/s
Iteration  27: 295419.710 ops/s
Iteration  28: 293421.644 ops/s
Iteration  29: 290469.982 ops/s
Iteration  30: 302321.041 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_chunk":
  298109.443 ±(99.9%) 3018.051 ops/s [Average]
  (min, avg, max) = (288921.694, 298109.443, 307580.006), stdev = 4517.276
  CI (99.9%): [295091.393, 301127.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_chunk  thrpt   30  298109.443 ± 3018.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449696.208 ops/s
# Warmup Iteration   2: 801225.395 ops/s
# Warmup Iteration   3: 2544343.277 ops/s
# Warmup Iteration   4: 2007358.346 ops/s
# Warmup Iteration   5: 2544171.539 ops/s
# Warmup Iteration   6: 2519969.180 ops/s
# Warmup Iteration   7: 2517203.921 ops/s
# Warmup Iteration   8: 2536473.829 ops/s
# Warmup Iteration   9: 2497582.724 ops/s
# Warmup Iteration  10: 2505208.026 ops/s
# Warmup Iteration  11: 2476827.839 ops/s
# Warmup Iteration  12: 2477120.671 ops/s
# Warmup Iteration  13: 2536594.081 ops/s
# Warmup Iteration  14: 2537529.521 ops/s
# Warmup Iteration  15: 2564355.255 ops/s
# Warmup Iteration  16: 2547685.818 ops/s
# Warmup Iteration  17: 2563074.044 ops/s
# Warmup Iteration  18: 2493361.307 ops/s
# Warmup Iteration  19: 2562888.061 ops/s
# Warmup Iteration  20: 2508718.370 ops/s
# Warmup Iteration  21: 2518562.330 ops/s
# Warmup Iteration  22: 2575263.479 ops/s
# Warmup Iteration  23: 2526411.389 ops/s
# Warmup Iteration  24: 2538554.280 ops/s
# Warmup Iteration  25: 2508747.153 ops/s
# Warmup Iteration  26: 2546931.166 ops/s
# Warmup Iteration  27: 2519523.723 ops/s
# Warmup Iteration  28: 2556799.172 ops/s
# Warmup Iteration  29: 2543160.914 ops/s
# Warmup Iteration  30: 2551286.508 ops/s
Iteration   1: 2561766.196 ops/s
Iteration   2: 2521870.639 ops/s
Iteration   3: 2572537.421 ops/s
Iteration   4: 2556828.631 ops/s
Iteration   5: 2554991.176 ops/s
Iteration   6: 2536132.687 ops/s
Iteration   7: 2518515.769 ops/s
Iteration   8: 2530472.787 ops/s
Iteration   9: 2402868.880 ops/s
Iteration  10: 2458087.164 ops/s
Iteration  11: 2571947.756 ops/s
Iteration  12: 2471451.169 ops/s
Iteration  13: 2475386.606 ops/s
Iteration  14: 2558495.497 ops/s
Iteration  15: 2545729.478 ops/s
Iteration  16: 2581151.831 ops/s
Iteration  17: 2567360.724 ops/s
Iteration  18: 2475691.037 ops/s
Iteration  19: 2567956.132 ops/s
Iteration  20: 2495499.323 ops/s
Iteration  21: 2554421.443 ops/s
Iteration  22: 2525719.791 ops/s
Iteration  23: 2541132.389 ops/s
Iteration  24: 2461789.153 ops/s
Iteration  25: 2545269.940 ops/s
Iteration  26: 2447210.347 ops/s
Iteration  27: 2514762.240 ops/s
Iteration  28: 2518772.492 ops/s
Iteration  29: 2574214.974 ops/s
Iteration  30: 2491270.525 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_clear":
  2523310.140 ±(99.9%) 30263.845 ops/s [Average]
  (min, avg, max) = (2402868.880, 2523310.140, 2581151.831), stdev = 45297.502
  CI (99.9%): [2493046.295, 2553573.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_clear  thrpt   30  2523310.140 ± 30263.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 243619.504 ops/s
# Warmup Iteration   2: 548358.405 ops/s
# Warmup Iteration   3: 598441.658 ops/s
# Warmup Iteration   4: 604806.378 ops/s
# Warmup Iteration   5: 479891.689 ops/s
# Warmup Iteration   6: 599939.669 ops/s
# Warmup Iteration   7: 604879.201 ops/s
# Warmup Iteration   8: 610976.771 ops/s
# Warmup Iteration   9: 594940.229 ops/s
# Warmup Iteration  10: 603784.244 ops/s
# Warmup Iteration  11: 602415.205 ops/s
# Warmup Iteration  12: 599560.919 ops/s
# Warmup Iteration  13: 605994.578 ops/s
# Warmup Iteration  14: 601630.815 ops/s
# Warmup Iteration  15: 603139.881 ops/s
# Warmup Iteration  16: 600659.703 ops/s
# Warmup Iteration  17: 604955.375 ops/s
# Warmup Iteration  18: 612657.938 ops/s
# Warmup Iteration  19: 597049.406 ops/s
# Warmup Iteration  20: 594808.428 ops/s
# Warmup Iteration  21: 605638.630 ops/s
# Warmup Iteration  22: 603275.699 ops/s
# Warmup Iteration  23: 605210.613 ops/s
# Warmup Iteration  24: 600769.754 ops/s
# Warmup Iteration  25: 605814.935 ops/s
# Warmup Iteration  26: 602622.620 ops/s
# Warmup Iteration  27: 600647.153 ops/s
# Warmup Iteration  28: 598120.974 ops/s
# Warmup Iteration  29: 601111.169 ops/s
# Warmup Iteration  30: 599383.062 ops/s
Iteration   1: 598513.495 ops/s
Iteration   2: 594381.781 ops/s
Iteration   3: 598191.958 ops/s
Iteration   4: 600951.158 ops/s
Iteration   5: 607314.293 ops/s
Iteration   6: 611738.828 ops/s
Iteration   7: 599255.597 ops/s
Iteration   8: 596155.955 ops/s
Iteration   9: 579148.351 ops/s
Iteration  10: 602088.786 ops/s
Iteration  11: 602938.192 ops/s
Iteration  12: 609086.113 ops/s
Iteration  13: 594656.157 ops/s
Iteration  14: 603982.215 ops/s
Iteration  15: 590655.448 ops/s
Iteration  16: 599139.623 ops/s
Iteration  17: 611779.226 ops/s
Iteration  18: 605395.989 ops/s
Iteration  19: 583637.141 ops/s
Iteration  20: 605762.322 ops/s
Iteration  21: 600286.398 ops/s
Iteration  22: 597077.349 ops/s
Iteration  23: 609229.860 ops/s
Iteration  24: 608132.751 ops/s
Iteration  25: 603080.702 ops/s
Iteration  26: 592291.915 ops/s
Iteration  27: 605488.758 ops/s
Iteration  28: 610603.703 ops/s
Iteration  29: 600246.419 ops/s
Iteration  30: 603117.026 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_collect":
  600810.917 ±(99.9%) 5171.740 ops/s [Average]
  (min, avg, max) = (579148.351, 600810.917, 611779.226), stdev = 7740.817
  CI (99.9%): [595639.177, 605982.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_collect  thrpt   30  600810.917 ± 5171.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11670655.878 ops/s
# Warmup Iteration   2: 18201424.964 ops/s
# Warmup Iteration   3: 21836509.053 ops/s
# Warmup Iteration   4: 21846394.209 ops/s
# Warmup Iteration   5: 22285556.152 ops/s
# Warmup Iteration   6: 21954727.533 ops/s
# Warmup Iteration   7: 21470468.289 ops/s
# Warmup Iteration   8: 21764645.927 ops/s
# Warmup Iteration   9: 22057329.354 ops/s
# Warmup Iteration  10: 22291195.930 ops/s
# Warmup Iteration  11: 22167917.910 ops/s
# Warmup Iteration  12: 22128340.782 ops/s
# Warmup Iteration  13: 22185716.027 ops/s
# Warmup Iteration  14: 22004301.283 ops/s
# Warmup Iteration  15: 21895089.463 ops/s
# Warmup Iteration  16: 21938382.399 ops/s
# Warmup Iteration  17: 22055296.324 ops/s
# Warmup Iteration  18: 21782007.686 ops/s
# Warmup Iteration  19: 21330261.512 ops/s
# Warmup Iteration  20: 21367453.930 ops/s
# Warmup Iteration  21: 22100123.620 ops/s
# Warmup Iteration  22: 21894364.809 ops/s
# Warmup Iteration  23: 21682047.913 ops/s
# Warmup Iteration  24: 22198767.635 ops/s
# Warmup Iteration  25: 21666523.693 ops/s
# Warmup Iteration  26: 21940908.941 ops/s
# Warmup Iteration  27: 22213404.879 ops/s
# Warmup Iteration  28: 22354823.214 ops/s
# Warmup Iteration  29: 22317611.459 ops/s
# Warmup Iteration  30: 22108699.945 ops/s
Iteration   1: 21386146.872 ops/s
Iteration   2: 22077283.769 ops/s
Iteration   3: 21885661.305 ops/s
Iteration   4: 22129008.069 ops/s
Iteration   5: 22184843.426 ops/s
Iteration   6: 22123810.512 ops/s
Iteration   7: 21650465.865 ops/s
Iteration   8: 22030182.192 ops/s
Iteration   9: 21560558.270 ops/s
Iteration  10: 22105819.113 ops/s
Iteration  11: 21917538.539 ops/s
Iteration  12: 21925807.267 ops/s
Iteration  13: 22267290.560 ops/s
Iteration  14: 22307154.609 ops/s
Iteration  15: 21989839.976 ops/s
Iteration  16: 21795575.555 ops/s
Iteration  17: 21779516.418 ops/s
Iteration  18: 21873650.656 ops/s
Iteration  19: 21944539.250 ops/s
Iteration  20: 21725237.013 ops/s
Iteration  21: 22225624.888 ops/s
Iteration  22: 22092650.117 ops/s
Iteration  23: 22030783.401 ops/s
Iteration  24: 22078075.693 ops/s
Iteration  25: 22347801.523 ops/s
Iteration  26: 22357864.870 ops/s
Iteration  27: 22388997.070 ops/s
Iteration  28: 21880833.533 ops/s
Iteration  29: 21808983.321 ops/s
Iteration  30: 21958787.586 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_contains":
  21994344.375 ±(99.9%) 160368.146 ops/s [Average]
  (min, avg, max) = (21386146.872, 21994344.375, 22388997.070), stdev = 240031.509
  CI (99.9%): [21833976.229, 22154712.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_contains  thrpt   30  21994344.375 ± 160368.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5694477.736 ops/s
# Warmup Iteration   2: 9636542.960 ops/s
# Warmup Iteration   3: 10920633.024 ops/s
# Warmup Iteration   4: 11291790.531 ops/s
# Warmup Iteration   5: 11291597.380 ops/s
# Warmup Iteration   6: 11095733.528 ops/s
# Warmup Iteration   7: 11332502.528 ops/s
# Warmup Iteration   8: 11209559.199 ops/s
# Warmup Iteration   9: 11202983.797 ops/s
# Warmup Iteration  10: 11449142.555 ops/s
# Warmup Iteration  11: 11379276.680 ops/s
# Warmup Iteration  12: 11179306.491 ops/s
# Warmup Iteration  13: 11325550.362 ops/s
# Warmup Iteration  14: 11106419.726 ops/s
# Warmup Iteration  15: 11476651.845 ops/s
# Warmup Iteration  16: 11410970.201 ops/s
# Warmup Iteration  17: 11266547.437 ops/s
# Warmup Iteration  18: 11290275.935 ops/s
# Warmup Iteration  19: 11270264.189 ops/s
# Warmup Iteration  20: 11334284.996 ops/s
# Warmup Iteration  21: 11214152.153 ops/s
# Warmup Iteration  22: 11308478.591 ops/s
# Warmup Iteration  23: 11282447.751 ops/s
# Warmup Iteration  24: 11345175.940 ops/s
# Warmup Iteration  25: 11240586.150 ops/s
# Warmup Iteration  26: 11313037.751 ops/s
# Warmup Iteration  27: 11155191.793 ops/s
# Warmup Iteration  28: 11193359.651 ops/s
# Warmup Iteration  29: 11323010.609 ops/s
# Warmup Iteration  30: 11320943.714 ops/s
Iteration   1: 11424594.335 ops/s
Iteration   2: 11303506.489 ops/s
Iteration   3: 11248309.578 ops/s
Iteration   4: 11412435.441 ops/s
Iteration   5: 11376235.940 ops/s
Iteration   6: 11337598.248 ops/s
Iteration   7: 11392481.459 ops/s
Iteration   8: 11389200.327 ops/s
Iteration   9: 11303815.663 ops/s
Iteration  10: 11465403.726 ops/s
Iteration  11: 11352148.725 ops/s
Iteration  12: 11339793.205 ops/s
Iteration  13: 11382977.340 ops/s
Iteration  14: 11245914.283 ops/s
Iteration  15: 11058243.047 ops/s
Iteration  16: 11327522.041 ops/s
Iteration  17: 11472244.104 ops/s
Iteration  18: 11341924.580 ops/s
Iteration  19: 11363174.943 ops/s
Iteration  20: 11379327.179 ops/s
Iteration  21: 11486178.200 ops/s
Iteration  22: 11508948.842 ops/s
Iteration  23: 11444874.809 ops/s
Iteration  24: 11353882.554 ops/s
Iteration  25: 11300520.337 ops/s
Iteration  26: 11254638.102 ops/s
Iteration  27: 11012653.991 ops/s
Iteration  28: 11173360.482 ops/s
Iteration  29: 11373509.402 ops/s
Iteration  30: 11340162.447 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllArray":
  11338852.661 ±(99.9%) 74603.751 ops/s [Average]
  (min, avg, max) = (11012653.991, 11338852.661, 11508948.842), stdev = 111663.391
  CI (99.9%): [11264248.910, 11413456.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  11338852.661 ± 74603.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 894434.130 ops/s
# Warmup Iteration   2: 2137675.237 ops/s
# Warmup Iteration   3: 1953948.860 ops/s
# Warmup Iteration   4: 2473547.884 ops/s
# Warmup Iteration   5: 2488878.694 ops/s
# Warmup Iteration   6: 2469120.234 ops/s
# Warmup Iteration   7: 2483506.338 ops/s
# Warmup Iteration   8: 2466773.019 ops/s
# Warmup Iteration   9: 2475329.510 ops/s
# Warmup Iteration  10: 2393973.192 ops/s
# Warmup Iteration  11: 2461821.820 ops/s
# Warmup Iteration  12: 2435999.260 ops/s
# Warmup Iteration  13: 2430468.093 ops/s
# Warmup Iteration  14: 2379098.258 ops/s
# Warmup Iteration  15: 2407513.776 ops/s
# Warmup Iteration  16: 2423548.282 ops/s
# Warmup Iteration  17: 2409671.727 ops/s
# Warmup Iteration  18: 2444685.987 ops/s
# Warmup Iteration  19: 2437242.764 ops/s
# Warmup Iteration  20: 2427670.991 ops/s
# Warmup Iteration  21: 2476785.984 ops/s
# Warmup Iteration  22: 2477162.891 ops/s
# Warmup Iteration  23: 2478490.708 ops/s
# Warmup Iteration  24: 2457658.676 ops/s
# Warmup Iteration  25: 2361505.268 ops/s
# Warmup Iteration  26: 2486383.861 ops/s
# Warmup Iteration  27: 2473572.882 ops/s
# Warmup Iteration  28: 2425903.844 ops/s
# Warmup Iteration  29: 2430859.571 ops/s
# Warmup Iteration  30: 2463894.577 ops/s
Iteration   1: 2416625.757 ops/s
Iteration   2: 2448765.348 ops/s
Iteration   3: 2420821.238 ops/s
Iteration   4: 2437381.003 ops/s
Iteration   5: 2433116.826 ops/s
Iteration   6: 2430577.928 ops/s
Iteration   7: 2419533.238 ops/s
Iteration   8: 2475266.204 ops/s
Iteration   9: 2501200.324 ops/s
Iteration  10: 2500813.864 ops/s
Iteration  11: 2452984.350 ops/s
Iteration  12: 2466418.006 ops/s
Iteration  13: 2455508.298 ops/s
Iteration  14: 2499500.461 ops/s
Iteration  15: 2481166.451 ops/s
Iteration  16: 2490767.113 ops/s
Iteration  17: 2479791.150 ops/s
Iteration  18: 2454429.817 ops/s
Iteration  19: 2436040.556 ops/s
Iteration  20: 2413885.746 ops/s
Iteration  21: 2417433.685 ops/s
Iteration  22: 2455073.711 ops/s
Iteration  23: 2381055.433 ops/s
Iteration  24: 2370676.771 ops/s
Iteration  25: 2494374.936 ops/s
Iteration  26: 2488548.648 ops/s
Iteration  27: 2471985.705 ops/s
Iteration  28: 2480435.906 ops/s
Iteration  29: 2484888.234 ops/s
Iteration  30: 2476363.033 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllIterable":
  2454514.325 ±(99.9%) 23426.546 ops/s [Average]
  (min, avg, max) = (2370676.771, 2454514.325, 2501200.324), stdev = 35063.754
  CI (99.9%): [2431087.779, 2477940.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  2454514.325 ± 23426.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10336619.424 ops/s
# Warmup Iteration   2: 16153503.955 ops/s
# Warmup Iteration   3: 19264313.756 ops/s
# Warmup Iteration   4: 19387345.368 ops/s
# Warmup Iteration   5: 19183753.558 ops/s
# Warmup Iteration   6: 19164234.574 ops/s
# Warmup Iteration   7: 19603120.434 ops/s
# Warmup Iteration   8: 19345419.239 ops/s
# Warmup Iteration   9: 19222934.477 ops/s
# Warmup Iteration  10: 19492084.460 ops/s
# Warmup Iteration  11: 19689351.699 ops/s
# Warmup Iteration  12: 19676593.655 ops/s
# Warmup Iteration  13: 19516208.886 ops/s
# Warmup Iteration  14: 19456005.103 ops/s
# Warmup Iteration  15: 19463804.954 ops/s
# Warmup Iteration  16: 19218290.103 ops/s
# Warmup Iteration  17: 19757426.545 ops/s
# Warmup Iteration  18: 19606901.752 ops/s
# Warmup Iteration  19: 19253066.177 ops/s
# Warmup Iteration  20: 19435589.786 ops/s
# Warmup Iteration  21: 19313718.599 ops/s
# Warmup Iteration  22: 19515165.922 ops/s
# Warmup Iteration  23: 19660218.244 ops/s
# Warmup Iteration  24: 19441676.111 ops/s
# Warmup Iteration  25: 19333658.888 ops/s
# Warmup Iteration  26: 19289932.293 ops/s
# Warmup Iteration  27: 19396805.822 ops/s
# Warmup Iteration  28: 19210157.990 ops/s
# Warmup Iteration  29: 19009521.359 ops/s
# Warmup Iteration  30: 19669414.126 ops/s
Iteration   1: 19253780.994 ops/s
Iteration   2: 19024213.665 ops/s
Iteration   3: 19408767.288 ops/s
Iteration   4: 19179729.972 ops/s
Iteration   5: 19465311.224 ops/s
Iteration   6: 19656978.760 ops/s
Iteration   7: 19213367.318 ops/s
Iteration   8: 19395102.541 ops/s
Iteration   9: 19376905.982 ops/s
Iteration  10: 19332074.955 ops/s
Iteration  11: 19529947.812 ops/s
Iteration  12: 19374145.288 ops/s
Iteration  13: 19407432.093 ops/s
Iteration  14: 19202894.544 ops/s
Iteration  15: 19141682.977 ops/s
Iteration  16: 19702731.252 ops/s
Iteration  17: 19293259.195 ops/s
Iteration  18: 19135372.184 ops/s
Iteration  19: 18928271.002 ops/s
Iteration  20: 19434010.165 ops/s
Iteration  21: 19495254.592 ops/s
Iteration  22: 19450697.881 ops/s
Iteration  23: 19504282.690 ops/s
Iteration  24: 19258815.962 ops/s
Iteration  25: 19894825.986 ops/s
Iteration  26: 19674982.676 ops/s
Iteration  27: 19383308.570 ops/s
Iteration  28: 19737179.399 ops/s
Iteration  29: 19660541.347 ops/s
Iteration  30: 19512927.695 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyArray":
  19400959.867 ±(99.9%) 146740.310 ops/s [Average]
  (min, avg, max) = (18928271.002, 19400959.867, 19894825.986), stdev = 219634.004
  CI (99.9%): [19254219.557, 19547700.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  19400959.867 ± 146740.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794134.258 ops/s
# Warmup Iteration   2: 1158909.504 ops/s
# Warmup Iteration   3: 1380703.994 ops/s
# Warmup Iteration   4: 1395273.964 ops/s
# Warmup Iteration   5: 1347676.860 ops/s
# Warmup Iteration   6: 1372641.850 ops/s
# Warmup Iteration   7: 1141023.501 ops/s
# Warmup Iteration   8: 1385104.551 ops/s
# Warmup Iteration   9: 1376025.035 ops/s
# Warmup Iteration  10: 1380501.459 ops/s
# Warmup Iteration  11: 1376279.340 ops/s
# Warmup Iteration  12: 1388169.480 ops/s
# Warmup Iteration  13: 1380721.145 ops/s
# Warmup Iteration  14: 1374788.921 ops/s
# Warmup Iteration  15: 1363342.212 ops/s
# Warmup Iteration  16: 1381112.469 ops/s
# Warmup Iteration  17: 1379284.089 ops/s
# Warmup Iteration  18: 1374484.348 ops/s
# Warmup Iteration  19: 1377932.695 ops/s
# Warmup Iteration  20: 1374263.977 ops/s
# Warmup Iteration  21: 1376876.208 ops/s
# Warmup Iteration  22: 1381492.271 ops/s
# Warmup Iteration  23: 1356637.373 ops/s
# Warmup Iteration  24: 1390412.896 ops/s
# Warmup Iteration  25: 1391965.343 ops/s
# Warmup Iteration  26: 1382820.598 ops/s
# Warmup Iteration  27: 1351306.843 ops/s
# Warmup Iteration  28: 1383777.991 ops/s
# Warmup Iteration  29: 1371464.113 ops/s
# Warmup Iteration  30: 1377834.173 ops/s
Iteration   1: 1381409.729 ops/s
Iteration   2: 1393642.033 ops/s
Iteration   3: 1370273.124 ops/s
Iteration   4: 1388993.479 ops/s
Iteration   5: 1385931.266 ops/s
Iteration   6: 1369919.572 ops/s
Iteration   7: 1383428.022 ops/s
Iteration   8: 1386421.638 ops/s
Iteration   9: 1383168.209 ops/s
Iteration  10: 1400211.077 ops/s
Iteration  11: 1385084.483 ops/s
Iteration  12: 1375776.012 ops/s
Iteration  13: 1391506.625 ops/s
Iteration  14: 1393397.908 ops/s
Iteration  15: 1372231.821 ops/s
Iteration  16: 1389607.769 ops/s
Iteration  17: 1390107.822 ops/s
Iteration  18: 1387651.703 ops/s
Iteration  19: 1395012.546 ops/s
Iteration  20: 1399779.118 ops/s
Iteration  21: 1395038.820 ops/s
Iteration  22: 1399458.882 ops/s
Iteration  23: 1396503.230 ops/s
Iteration  24: 1399872.652 ops/s
Iteration  25: 1394656.920 ops/s
Iteration  26: 1372084.658 ops/s
Iteration  27: 1393750.502 ops/s
Iteration  28: 1393830.161 ops/s
Iteration  29: 1399391.141 ops/s
Iteration  30: 1395297.047 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyIterable":
  1388781.266 ±(99.9%) 6183.483 ops/s [Average]
  (min, avg, max) = (1369919.572, 1388781.266, 1400211.077), stdev = 9255.147
  CI (99.9%): [1382597.782, 1394964.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1388781.266 ± 6183.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10004034.393 ops/s
# Warmup Iteration   2: 16641730.719 ops/s
# Warmup Iteration   3: 19687719.814 ops/s
# Warmup Iteration   4: 19646760.156 ops/s
# Warmup Iteration   5: 19425982.611 ops/s
# Warmup Iteration   6: 19003344.474 ops/s
# Warmup Iteration   7: 19553540.391 ops/s
# Warmup Iteration   8: 19792994.928 ops/s
# Warmup Iteration   9: 19686796.235 ops/s
# Warmup Iteration  10: 19508366.225 ops/s
# Warmup Iteration  11: 19613769.205 ops/s
# Warmup Iteration  12: 19015643.437 ops/s
# Warmup Iteration  13: 19730061.117 ops/s
# Warmup Iteration  14: 19856842.437 ops/s
# Warmup Iteration  15: 19735610.441 ops/s
# Warmup Iteration  16: 19539328.750 ops/s
# Warmup Iteration  17: 19621344.311 ops/s
# Warmup Iteration  18: 19645258.540 ops/s
# Warmup Iteration  19: 19551913.878 ops/s
# Warmup Iteration  20: 19678342.965 ops/s
# Warmup Iteration  21: 19589045.387 ops/s
# Warmup Iteration  22: 18851618.595 ops/s
# Warmup Iteration  23: 19121389.035 ops/s
# Warmup Iteration  24: 19668118.715 ops/s
# Warmup Iteration  25: 19697155.355 ops/s
# Warmup Iteration  26: 19673413.109 ops/s
# Warmup Iteration  27: 19590176.528 ops/s
# Warmup Iteration  28: 19455821.665 ops/s
# Warmup Iteration  29: 19483501.321 ops/s
# Warmup Iteration  30: 19638666.028 ops/s
Iteration   1: 19768146.339 ops/s
Iteration   2: 19498391.576 ops/s
Iteration   3: 19632852.667 ops/s
Iteration   4: 19365397.592 ops/s
Iteration   5: 19667909.091 ops/s
Iteration   6: 19749581.229 ops/s
Iteration   7: 19853786.005 ops/s
Iteration   8: 19837688.844 ops/s
Iteration   9: 19524879.240 ops/s
Iteration  10: 19496285.334 ops/s
Iteration  11: 19606087.387 ops/s
Iteration  12: 19468263.362 ops/s
Iteration  13: 19376869.865 ops/s
Iteration  14: 19903613.551 ops/s
Iteration  15: 19781107.501 ops/s
Iteration  16: 19627141.732 ops/s
Iteration  17: 19434808.307 ops/s
Iteration  18: 19452247.835 ops/s
Iteration  19: 19742083.311 ops/s
Iteration  20: 19555528.400 ops/s
Iteration  21: 18936304.350 ops/s
Iteration  22: 19783282.077 ops/s
Iteration  23: 19447525.038 ops/s
Iteration  24: 19133762.011 ops/s
Iteration  25: 19259259.434 ops/s
Iteration  26: 19384463.617 ops/s
Iteration  27: 19132459.486 ops/s
Iteration  28: 19541842.987 ops/s
Iteration  29: 19796232.920 ops/s
Iteration  30: 19684415.133 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneArray":
  19548073.874 ±(99.9%) 156301.590 ops/s [Average]
  (min, avg, max) = (18936304.350, 19548073.874, 19903613.551), stdev = 233944.880
  CI (99.9%): [19391772.284, 19704375.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  19548073.874 ± 156301.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748398.155 ops/s
# Warmup Iteration   2: 1140333.682 ops/s
# Warmup Iteration   3: 1343760.607 ops/s
# Warmup Iteration   4: 1343992.528 ops/s
# Warmup Iteration   5: 1293683.969 ops/s
# Warmup Iteration   6: 1326567.082 ops/s
# Warmup Iteration   7: 1101354.418 ops/s
# Warmup Iteration   8: 1294434.026 ops/s
# Warmup Iteration   9: 1311680.174 ops/s
# Warmup Iteration  10: 1316705.385 ops/s
# Warmup Iteration  11: 1298667.504 ops/s
# Warmup Iteration  12: 1274615.764 ops/s
# Warmup Iteration  13: 1278984.004 ops/s
# Warmup Iteration  14: 1303010.005 ops/s
# Warmup Iteration  15: 1336119.061 ops/s
# Warmup Iteration  16: 1330664.444 ops/s
# Warmup Iteration  17: 1292282.607 ops/s
# Warmup Iteration  18: 1300585.278 ops/s
# Warmup Iteration  19: 1293878.337 ops/s
# Warmup Iteration  20: 1328456.497 ops/s
# Warmup Iteration  21: 1294512.615 ops/s
# Warmup Iteration  22: 1317962.227 ops/s
# Warmup Iteration  23: 1315018.284 ops/s
# Warmup Iteration  24: 1309290.651 ops/s
# Warmup Iteration  25: 1292794.663 ops/s
# Warmup Iteration  26: 1335058.768 ops/s
# Warmup Iteration  27: 1309708.452 ops/s
# Warmup Iteration  28: 1331264.308 ops/s
# Warmup Iteration  29: 1347385.764 ops/s
# Warmup Iteration  30: 1353674.849 ops/s
Iteration   1: 1345922.787 ops/s
Iteration   2: 1342480.428 ops/s
Iteration   3: 1336412.240 ops/s
Iteration   4: 1284540.703 ops/s
Iteration   5: 1292512.501 ops/s
Iteration   6: 1319593.036 ops/s
Iteration   7: 1266635.380 ops/s
Iteration   8: 1329133.076 ops/s
Iteration   9: 1323736.641 ops/s
Iteration  10: 1301760.489 ops/s
Iteration  11: 1301394.044 ops/s
Iteration  12: 1306793.066 ops/s
Iteration  13: 1334952.559 ops/s
Iteration  14: 1329767.891 ops/s
Iteration  15: 1332589.070 ops/s
Iteration  16: 1342550.917 ops/s
Iteration  17: 1332210.560 ops/s
Iteration  18: 1333421.606 ops/s
Iteration  19: 1336556.458 ops/s
Iteration  20: 1343472.828 ops/s
Iteration  21: 1354081.835 ops/s
Iteration  22: 1332565.508 ops/s
Iteration  23: 1329504.850 ops/s
Iteration  24: 1326790.204 ops/s
Iteration  25: 1309487.752 ops/s
Iteration  26: 1330083.027 ops/s
Iteration  27: 1337728.155 ops/s
Iteration  28: 1342768.074 ops/s
Iteration  29: 1353541.398 ops/s
Iteration  30: 1333541.843 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneIterable":
  1326217.631 ±(99.9%) 13617.843 ops/s [Average]
  (min, avg, max) = (1266635.380, 1326217.631, 1354081.835), stdev = 20382.548
  CI (99.9%): [1312599.787, 1339835.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1326217.631 ± 13617.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6830754.538 ops/s
# Warmup Iteration   2: 14627861.003 ops/s
# Warmup Iteration   3: 12615561.477 ops/s
# Warmup Iteration   4: 15017468.663 ops/s
# Warmup Iteration   5: 14846934.086 ops/s
# Warmup Iteration   6: 15132890.849 ops/s
# Warmup Iteration   7: 14474551.999 ops/s
# Warmup Iteration   8: 14569513.568 ops/s
# Warmup Iteration   9: 15041001.943 ops/s
# Warmup Iteration  10: 14857929.594 ops/s
# Warmup Iteration  11: 14790359.533 ops/s
# Warmup Iteration  12: 15129334.149 ops/s
# Warmup Iteration  13: 15223627.524 ops/s
# Warmup Iteration  14: 15052266.324 ops/s
# Warmup Iteration  15: 15196420.411 ops/s
# Warmup Iteration  16: 15220400.198 ops/s
# Warmup Iteration  17: 15218672.210 ops/s
# Warmup Iteration  18: 14585779.844 ops/s
# Warmup Iteration  19: 15083607.455 ops/s
# Warmup Iteration  20: 14766966.197 ops/s
# Warmup Iteration  21: 14563223.648 ops/s
# Warmup Iteration  22: 14903349.789 ops/s
# Warmup Iteration  23: 15085255.582 ops/s
# Warmup Iteration  24: 14744191.024 ops/s
# Warmup Iteration  25: 15011243.882 ops/s
# Warmup Iteration  26: 14933979.382 ops/s
# Warmup Iteration  27: 14355465.621 ops/s
# Warmup Iteration  28: 14981259.667 ops/s
# Warmup Iteration  29: 15084426.562 ops/s
# Warmup Iteration  30: 14988823.657 ops/s
Iteration   1: 14740413.361 ops/s
Iteration   2: 14523359.315 ops/s
Iteration   3: 14440180.775 ops/s
Iteration   4: 15005651.916 ops/s
Iteration   5: 14774258.747 ops/s
Iteration   6: 14878752.002 ops/s
Iteration   7: 15011434.494 ops/s
Iteration   8: 14992808.272 ops/s
Iteration   9: 14854639.168 ops/s
Iteration  10: 14859375.156 ops/s
Iteration  11: 15028905.267 ops/s
Iteration  12: 14992472.987 ops/s
Iteration  13: 14821305.414 ops/s
Iteration  14: 14690444.522 ops/s
Iteration  15: 14402969.709 ops/s
Iteration  16: 14713192.631 ops/s
Iteration  17: 15149129.978 ops/s
Iteration  18: 14935480.883 ops/s
Iteration  19: 15030772.346 ops/s
Iteration  20: 15083374.659 ops/s
Iteration  21: 14923848.410 ops/s
Iteration  22: 14985007.687 ops/s
Iteration  23: 14705646.721 ops/s
Iteration  24: 15044242.376 ops/s
Iteration  25: 14942770.119 ops/s
Iteration  26: 14788187.041 ops/s
Iteration  27: 14963695.490 ops/s
Iteration  28: 15094318.498 ops/s
Iteration  29: 15077722.351 ops/s
Iteration  30: 15079904.314 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_count":
  14884475.487 ±(99.9%) 129017.860 ops/s [Average]
  (min, avg, max) = (14402969.709, 14884475.487, 15149129.978), stdev = 193107.874
  CI (99.9%): [14755457.627, 15013493.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_count  thrpt   30  14884475.487 ± 129017.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9193077.824 ops/s
# Warmup Iteration   2: 17526645.992 ops/s
# Warmup Iteration   3: 14907620.006 ops/s
# Warmup Iteration   4: 17327733.248 ops/s
# Warmup Iteration   5: 17701642.509 ops/s
# Warmup Iteration   6: 17228775.000 ops/s
# Warmup Iteration   7: 17297679.797 ops/s
# Warmup Iteration   8: 17252306.723 ops/s
# Warmup Iteration   9: 17143258.167 ops/s
# Warmup Iteration  10: 17483162.959 ops/s
# Warmup Iteration  11: 17597005.679 ops/s
# Warmup Iteration  12: 17784829.314 ops/s
# Warmup Iteration  13: 17727538.444 ops/s
# Warmup Iteration  14: 17869656.414 ops/s
# Warmup Iteration  15: 17847654.505 ops/s
# Warmup Iteration  16: 17907646.138 ops/s
# Warmup Iteration  17: 18009864.882 ops/s
# Warmup Iteration  18: 17971164.639 ops/s
# Warmup Iteration  19: 17720924.699 ops/s
# Warmup Iteration  20: 17784274.254 ops/s
# Warmup Iteration  21: 17791072.612 ops/s
# Warmup Iteration  22: 17723520.419 ops/s
# Warmup Iteration  23: 17783927.987 ops/s
# Warmup Iteration  24: 17728660.428 ops/s
# Warmup Iteration  25: 17712123.554 ops/s
# Warmup Iteration  26: 17732132.272 ops/s
# Warmup Iteration  27: 17225819.933 ops/s
# Warmup Iteration  28: 17239257.478 ops/s
# Warmup Iteration  29: 17266743.284 ops/s
# Warmup Iteration  30: 17329750.043 ops/s
Iteration   1: 17643872.785 ops/s
Iteration   2: 17877157.581 ops/s
Iteration   3: 17874658.950 ops/s
Iteration   4: 17921124.004 ops/s
Iteration   5: 17272082.425 ops/s
Iteration   6: 17688309.104 ops/s
Iteration   7: 17290921.011 ops/s
Iteration   8: 17431896.196 ops/s
Iteration   9: 17535852.817 ops/s
Iteration  10: 17405236.090 ops/s
Iteration  11: 17822282.128 ops/s
Iteration  12: 17097446.061 ops/s
Iteration  13: 17732365.392 ops/s
Iteration  14: 17090616.336 ops/s
Iteration  15: 17383819.426 ops/s
Iteration  16: 17631710.329 ops/s
Iteration  17: 17819952.626 ops/s
Iteration  18: 17473019.847 ops/s
Iteration  19: 17822573.636 ops/s
Iteration  20: 17714511.286 ops/s
Iteration  21: 17252923.638 ops/s
Iteration  22: 16858611.862 ops/s
Iteration  23: 17222322.266 ops/s
Iteration  24: 17363961.989 ops/s
Iteration  25: 17510578.101 ops/s
Iteration  26: 17516571.393 ops/s
Iteration  27: 17701030.489 ops/s
Iteration  28: 17280242.783 ops/s
Iteration  29: 17693145.969 ops/s
Iteration  30: 17704404.866 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_detectIfNone":
  17521106.713 ±(99.9%) 180686.930 ops/s [Average]
  (min, avg, max) = (16858611.862, 17521106.713, 17921124.004), stdev = 270443.712
  CI (99.9%): [17340419.782, 17701793.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  17521106.713 ± 180686.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12685051.323 ops/s
# Warmup Iteration   2: 20088760.308 ops/s
# Warmup Iteration   3: 23491585.201 ops/s
# Warmup Iteration   4: 23873754.751 ops/s
# Warmup Iteration   5: 23858777.119 ops/s
# Warmup Iteration   6: 23456889.857 ops/s
# Warmup Iteration   7: 23662057.859 ops/s
# Warmup Iteration   8: 23884074.453 ops/s
# Warmup Iteration   9: 23831648.331 ops/s
# Warmup Iteration  10: 23891441.068 ops/s
# Warmup Iteration  11: 23980334.255 ops/s
# Warmup Iteration  12: 24068415.514 ops/s
# Warmup Iteration  13: 23165815.023 ops/s
# Warmup Iteration  14: 23737733.132 ops/s
# Warmup Iteration  15: 23746986.913 ops/s
# Warmup Iteration  16: 23287166.957 ops/s
# Warmup Iteration  17: 23270489.722 ops/s
# Warmup Iteration  18: 23973710.411 ops/s
# Warmup Iteration  19: 23832478.297 ops/s
# Warmup Iteration  20: 23705891.395 ops/s
# Warmup Iteration  21: 23810798.529 ops/s
# Warmup Iteration  22: 23628506.414 ops/s
# Warmup Iteration  23: 23858365.013 ops/s
# Warmup Iteration  24: 23969022.972 ops/s
# Warmup Iteration  25: 23894366.655 ops/s
# Warmup Iteration  26: 23441801.438 ops/s
# Warmup Iteration  27: 23694768.607 ops/s
# Warmup Iteration  28: 23959647.270 ops/s
# Warmup Iteration  29: 23947440.999 ops/s
# Warmup Iteration  30: 23787759.413 ops/s
Iteration   1: 23963069.174 ops/s
Iteration   2: 23631027.610 ops/s
Iteration   3: 23602320.426 ops/s
Iteration   4: 22996222.276 ops/s
Iteration   5: 23858602.371 ops/s
Iteration   6: 22528788.159 ops/s
Iteration   7: 23369565.847 ops/s
Iteration   8: 22993387.519 ops/s
Iteration   9: 22999620.338 ops/s
Iteration  10: 23929982.585 ops/s
Iteration  11: 22609314.298 ops/s
Iteration  12: 23287247.321 ops/s
Iteration  13: 22624393.916 ops/s
Iteration  14: 23284019.157 ops/s
Iteration  15: 23769643.329 ops/s
Iteration  16: 23850729.678 ops/s
Iteration  17: 23953756.937 ops/s
Iteration  18: 23992304.906 ops/s
Iteration  19: 23729771.750 ops/s
Iteration  20: 23305381.004 ops/s
Iteration  21: 23252216.713 ops/s
Iteration  22: 23230972.840 ops/s
Iteration  23: 24043377.529 ops/s
Iteration  24: 23375188.164 ops/s
Iteration  25: 23808183.396 ops/s
Iteration  26: 23946080.745 ops/s
Iteration  27: 24000003.863 ops/s
Iteration  28: 23608339.740 ops/s
Iteration  29: 23536458.576 ops/s
Iteration  30: 23469716.134 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEach":
  23484989.543 ±(99.9%) 295135.406 ops/s [Average]
  (min, avg, max) = (22528788.159, 23484989.543, 24043377.529), stdev = 441744.815
  CI (99.9%): [23189854.137, 23780124.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_forEach  thrpt   30  23484989.543 ± 295135.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9570612.055 ops/s
# Warmup Iteration   2: 19575668.682 ops/s
# Warmup Iteration   3: 17035028.488 ops/s
# Warmup Iteration   4: 20138480.279 ops/s
# Warmup Iteration   5: 20044815.180 ops/s
# Warmup Iteration   6: 19701922.337 ops/s
# Warmup Iteration   7: 19782860.277 ops/s
# Warmup Iteration   8: 19680658.267 ops/s
# Warmup Iteration   9: 20230042.821 ops/s
# Warmup Iteration  10: 20296182.821 ops/s
# Warmup Iteration  11: 20248750.173 ops/s
# Warmup Iteration  12: 20173873.635 ops/s
# Warmup Iteration  13: 20163487.515 ops/s
# Warmup Iteration  14: 20310843.631 ops/s
# Warmup Iteration  15: 20573939.767 ops/s
# Warmup Iteration  16: 20577219.369 ops/s
# Warmup Iteration  17: 20470791.226 ops/s
# Warmup Iteration  18: 20474417.112 ops/s
# Warmup Iteration  19: 20176553.421 ops/s
# Warmup Iteration  20: 20217248.615 ops/s
# Warmup Iteration  21: 20195818.325 ops/s
# Warmup Iteration  22: 19945966.910 ops/s
# Warmup Iteration  23: 20007727.177 ops/s
# Warmup Iteration  24: 19950797.758 ops/s
# Warmup Iteration  25: 20008221.306 ops/s
# Warmup Iteration  26: 19903853.362 ops/s
# Warmup Iteration  27: 19728647.887 ops/s
# Warmup Iteration  28: 20100796.986 ops/s
# Warmup Iteration  29: 20405364.419 ops/s
# Warmup Iteration  30: 20189161.248 ops/s
Iteration   1: 20402230.051 ops/s
Iteration   2: 20014753.959 ops/s
Iteration   3: 19895451.167 ops/s
Iteration   4: 20369226.735 ops/s
Iteration   5: 19927063.795 ops/s
Iteration   6: 20055722.594 ops/s
Iteration   7: 20402361.810 ops/s
Iteration   8: 20564695.801 ops/s
Iteration   9: 20203938.761 ops/s
Iteration  10: 20144224.516 ops/s
Iteration  11: 20027301.407 ops/s
Iteration  12: 19970680.729 ops/s
Iteration  13: 19703821.873 ops/s
Iteration  14: 20201405.491 ops/s
Iteration  15: 20011093.053 ops/s
Iteration  16: 20247550.334 ops/s
Iteration  17: 19886437.898 ops/s
Iteration  18: 20199143.472 ops/s
Iteration  19: 19171450.649 ops/s
Iteration  20: 19577491.891 ops/s
Iteration  21: 20093444.663 ops/s
Iteration  22: 19809137.532 ops/s
Iteration  23: 19659159.091 ops/s
Iteration  24: 20079706.770 ops/s
Iteration  25: 20314935.342 ops/s
Iteration  26: 20234033.712 ops/s
Iteration  27: 20227825.858 ops/s
Iteration  28: 20421332.227 ops/s
Iteration  29: 20369837.179 ops/s
Iteration  30: 19447354.871 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences":
  20054427.108 ±(99.9%) 210330.615 ops/s [Average]
  (min, avg, max) = (19171450.649, 20054427.108, 20564695.801), stdev = 314812.986
  CI (99.9%): [19844096.493, 20264757.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  20054427.108 ± 210330.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34900584.719 ops/s
# Warmup Iteration   2: 60246268.672 ops/s
# Warmup Iteration   3: 65687683.840 ops/s
# Warmup Iteration   4: 65012944.956 ops/s
# Warmup Iteration   5: 64733879.638 ops/s
# Warmup Iteration   6: 64490919.985 ops/s
# Warmup Iteration   7: 65813064.395 ops/s
# Warmup Iteration   8: 65042690.091 ops/s
# Warmup Iteration   9: 64259734.527 ops/s
# Warmup Iteration  10: 66367361.502 ops/s
# Warmup Iteration  11: 66110204.110 ops/s
# Warmup Iteration  12: 65438165.551 ops/s
# Warmup Iteration  13: 65913335.990 ops/s
# Warmup Iteration  14: 64466180.214 ops/s
# Warmup Iteration  15: 63264742.871 ops/s
# Warmup Iteration  16: 66198076.718 ops/s
# Warmup Iteration  17: 65163564.880 ops/s
# Warmup Iteration  18: 65683102.938 ops/s
# Warmup Iteration  19: 66111321.843 ops/s
# Warmup Iteration  20: 64982282.791 ops/s
# Warmup Iteration  21: 65761267.027 ops/s
# Warmup Iteration  22: 65762456.179 ops/s
# Warmup Iteration  23: 65582249.914 ops/s
# Warmup Iteration  24: 65135707.554 ops/s
# Warmup Iteration  25: 64244443.315 ops/s
# Warmup Iteration  26: 64480815.167 ops/s
# Warmup Iteration  27: 66018119.790 ops/s
# Warmup Iteration  28: 65056518.534 ops/s
# Warmup Iteration  29: 65353427.446 ops/s
# Warmup Iteration  30: 64313053.840 ops/s
Iteration   1: 66128578.448 ops/s
Iteration   2: 63149675.330 ops/s
Iteration   3: 65995645.431 ops/s
Iteration   4: 65125231.088 ops/s
Iteration   5: 65886925.793 ops/s
Iteration   6: 65449211.941 ops/s
Iteration   7: 66342819.805 ops/s
Iteration   8: 66448696.034 ops/s
Iteration   9: 66244032.978 ops/s
Iteration  10: 65959984.776 ops/s
Iteration  11: 66113494.961 ops/s
Iteration  12: 65492208.253 ops/s
Iteration  13: 66443891.418 ops/s
Iteration  14: 66544766.678 ops/s
Iteration  15: 66349732.285 ops/s
Iteration  16: 66198648.948 ops/s
Iteration  17: 65463522.561 ops/s
Iteration  18: 65121167.036 ops/s
Iteration  19: 64576632.075 ops/s
Iteration  20: 65253655.261 ops/s
Iteration  21: 62883266.363 ops/s
Iteration  22: 64721678.506 ops/s
Iteration  23: 63957746.542 ops/s
Iteration  24: 65910287.586 ops/s
Iteration  25: 65696611.567 ops/s
Iteration  26: 64831044.223 ops/s
Iteration  27: 65337184.513 ops/s
Iteration  28: 65715369.730 ops/s
Iteration  29: 65400708.570 ops/s
Iteration  30: 65588668.902 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_injectInto":
  65477702.920 ±(99.9%) 608073.892 ops/s [Average]
  (min, avg, max) = (62883266.363, 65477702.920, 66544766.678), stdev = 910136.445
  CI (99.9%): [64869629.028, 66085776.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_injectInto  thrpt   30  65477702.920 ± 608073.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1381965.815 ops/s
# Warmup Iteration   2: 2719157.524 ops/s
# Warmup Iteration   3: 2942014.994 ops/s
# Warmup Iteration   4: 3464686.549 ops/s
# Warmup Iteration   5: 3514051.164 ops/s
# Warmup Iteration   6: 3513751.213 ops/s
# Warmup Iteration   7: 3478899.946 ops/s
# Warmup Iteration   8: 3462253.312 ops/s
# Warmup Iteration   9: 3449518.335 ops/s
# Warmup Iteration  10: 3411127.422 ops/s
# Warmup Iteration  11: 3395236.394 ops/s
# Warmup Iteration  12: 3476753.184 ops/s
# Warmup Iteration  13: 3457148.306 ops/s
# Warmup Iteration  14: 3412915.983 ops/s
# Warmup Iteration  15: 3414197.777 ops/s
# Warmup Iteration  16: 3468613.821 ops/s
# Warmup Iteration  17: 3464207.091 ops/s
# Warmup Iteration  18: 3422468.227 ops/s
# Warmup Iteration  19: 3387233.583 ops/s
# Warmup Iteration  20: 3453744.735 ops/s
# Warmup Iteration  21: 3472841.861 ops/s
# Warmup Iteration  22: 3383809.218 ops/s
# Warmup Iteration  23: 3487431.723 ops/s
# Warmup Iteration  24: 3447609.691 ops/s
# Warmup Iteration  25: 3482614.594 ops/s
# Warmup Iteration  26: 3428734.239 ops/s
# Warmup Iteration  27: 3411270.526 ops/s
# Warmup Iteration  28: 3423704.331 ops/s
# Warmup Iteration  29: 3423363.853 ops/s
# Warmup Iteration  30: 3478401.073 ops/s
Iteration   1: 3391409.534 ops/s
Iteration   2: 3415373.828 ops/s
Iteration   3: 3370404.917 ops/s
Iteration   4: 3370833.998 ops/s
Iteration   5: 3480496.731 ops/s
Iteration   6: 3410976.578 ops/s
Iteration   7: 3412879.427 ops/s
Iteration   8: 3401085.135 ops/s
Iteration   9: 3454226.064 ops/s
Iteration  10: 3457759.215 ops/s
Iteration  11: 3504855.898 ops/s
Iteration  12: 3491637.607 ops/s
Iteration  13: 3439323.233 ops/s
Iteration  14: 3413092.089 ops/s
Iteration  15: 3485997.084 ops/s
Iteration  16: 3443563.631 ops/s
Iteration  17: 3460217.999 ops/s
Iteration  18: 3432693.701 ops/s
Iteration  19: 3402861.079 ops/s
Iteration  20: 3325071.670 ops/s
Iteration  21: 3496180.308 ops/s
Iteration  22: 3374494.962 ops/s
Iteration  23: 3433945.401 ops/s
Iteration  24: 3456925.386 ops/s
Iteration  25: 3343895.864 ops/s
Iteration  26: 3369982.398 ops/s
Iteration  27: 3379783.657 ops/s
Iteration  28: 3407500.964 ops/s
Iteration  29: 3417534.722 ops/s
Iteration  30: 3487703.918 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_isEmpty":
  3424423.567 ±(99.9%) 31560.711 ops/s [Average]
  (min, avg, max) = (3325071.670, 3424423.567, 3504855.898), stdev = 47238.590
  CI (99.9%): [3392862.855, 3455984.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_isEmpty  thrpt   30  3424423.567 ± 31560.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793268.208 ops/s
# Warmup Iteration   2: 798530.922 ops/s
# Warmup Iteration   3: 997842.210 ops/s
# Warmup Iteration   4: 1039273.730 ops/s
# Warmup Iteration   5: 1044915.967 ops/s
# Warmup Iteration   6: 1027037.482 ops/s
# Warmup Iteration   7: 1032235.679 ops/s
# Warmup Iteration   8: 1014088.642 ops/s
# Warmup Iteration   9: 1066608.829 ops/s
# Warmup Iteration  10: 1060980.816 ops/s
# Warmup Iteration  11: 1051037.547 ops/s
# Warmup Iteration  12: 963545.335 ops/s
# Warmup Iteration  13: 922733.385 ops/s
# Warmup Iteration  14: 1010832.741 ops/s
# Warmup Iteration  15: 1032323.340 ops/s
# Warmup Iteration  16: 1030004.842 ops/s
# Warmup Iteration  17: 1108028.639 ops/s
# Warmup Iteration  18: 1083409.501 ops/s
# Warmup Iteration  19: 1069204.174 ops/s
# Warmup Iteration  20: 1071234.247 ops/s
# Warmup Iteration  21: 1108498.215 ops/s
# Warmup Iteration  22: 1115923.224 ops/s
# Warmup Iteration  23: 1082036.989 ops/s
# Warmup Iteration  24: 1076922.334 ops/s
# Warmup Iteration  25: 1074647.316 ops/s
# Warmup Iteration  26: 1090784.576 ops/s
# Warmup Iteration  27: 1058603.304 ops/s
# Warmup Iteration  28: 1114068.396 ops/s
# Warmup Iteration  29: 1076337.069 ops/s
# Warmup Iteration  30: 1115584.600 ops/s
Iteration   1: 1084728.635 ops/s
Iteration   2: 1116693.594 ops/s
Iteration   3: 1084519.897 ops/s
Iteration   4: 1086782.670 ops/s
Iteration   5: 1062375.900 ops/s
Iteration   6: 1089610.189 ops/s
Iteration   7: 1111379.373 ops/s
Iteration   8: 1103135.352 ops/s
Iteration   9: 1093248.743 ops/s
Iteration  10: 1105341.961 ops/s
Iteration  11: 1104669.591 ops/s
Iteration  12: 1091214.206 ops/s
Iteration  13: 1070451.203 ops/s
Iteration  14: 1098450.451 ops/s
Iteration  15: 1081415.015 ops/s
Iteration  16: 1120533.616 ops/s
Iteration  17: 1115076.821 ops/s
Iteration  18: 1122237.164 ops/s
Iteration  19: 1112638.450 ops/s
Iteration  20: 1112307.649 ops/s
Iteration  21: 1115967.850 ops/s
Iteration  22: 1103961.174 ops/s
Iteration  23: 1071082.632 ops/s
Iteration  24: 1068210.052 ops/s
Iteration  25: 1077265.358 ops/s
Iteration  26: 1065029.420 ops/s
Iteration  27: 1061508.703 ops/s
Iteration  28: 1063136.637 ops/s
Iteration  29: 1138628.490 ops/s
Iteration  30: 1128732.286 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws":
  1095344.436 ±(99.9%) 14575.972 ops/s [Average]
  (min, avg, max) = (1061508.703, 1095344.436, 1138628.490), stdev = 21816.631
  CI (99.9%): [1080768.464, 1109920.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1095344.436 ± 14575.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 822508.471 ops/s
# Warmup Iteration   2: 820029.223 ops/s
# Warmup Iteration   3: 1045443.025 ops/s
# Warmup Iteration   4: 1062169.720 ops/s
# Warmup Iteration   5: 1063008.726 ops/s
# Warmup Iteration   6: 1064797.470 ops/s
# Warmup Iteration   7: 1061707.243 ops/s
# Warmup Iteration   8: 1070641.067 ops/s
# Warmup Iteration   9: 1020538.833 ops/s
# Warmup Iteration  10: 1023589.908 ops/s
# Warmup Iteration  11: 1037861.733 ops/s
# Warmup Iteration  12: 1016420.282 ops/s
# Warmup Iteration  13: 862672.523 ops/s
# Warmup Iteration  14: 1035382.137 ops/s
# Warmup Iteration  15: 1005538.747 ops/s
# Warmup Iteration  16: 1008470.295 ops/s
# Warmup Iteration  17: 1094885.879 ops/s
# Warmup Iteration  18: 1103255.997 ops/s
# Warmup Iteration  19: 1135529.617 ops/s
# Warmup Iteration  20: 1142937.434 ops/s
# Warmup Iteration  21: 1135497.165 ops/s
# Warmup Iteration  22: 1114022.260 ops/s
# Warmup Iteration  23: 1137182.017 ops/s
# Warmup Iteration  24: 1134980.222 ops/s
# Warmup Iteration  25: 1135475.935 ops/s
# Warmup Iteration  26: 1136018.858 ops/s
# Warmup Iteration  27: 1136730.578 ops/s
# Warmup Iteration  28: 1127866.875 ops/s
# Warmup Iteration  29: 1148086.997 ops/s
# Warmup Iteration  30: 1137891.215 ops/s
Iteration   1: 1148598.731 ops/s
Iteration   2: 1100777.937 ops/s
Iteration   3: 1096855.895 ops/s
Iteration   4: 1130750.340 ops/s
Iteration   5: 1134730.999 ops/s
Iteration   6: 1150386.111 ops/s
Iteration   7: 1128079.489 ops/s
Iteration   8: 1128585.775 ops/s
Iteration   9: 1116528.619 ops/s
Iteration  10: 1133318.938 ops/s
Iteration  11: 1139472.493 ops/s
Iteration  12: 1077089.336 ops/s
Iteration  13: 1097087.137 ops/s
Iteration  14: 1142310.201 ops/s
Iteration  15: 1158340.227 ops/s
Iteration  16: 1147977.057 ops/s
Iteration  17: 1135125.759 ops/s
Iteration  18: 1129721.172 ops/s
Iteration  19: 1140170.841 ops/s
Iteration  20: 1139405.368 ops/s
Iteration  21: 1146793.019 ops/s
Iteration  22: 1137060.121 ops/s
Iteration  23: 1142552.657 ops/s
Iteration  24: 1119683.736 ops/s
Iteration  25: 1137604.094 ops/s
Iteration  26: 1135593.022 ops/s
Iteration  27: 1130640.090 ops/s
Iteration  28: 1145441.470 ops/s
Iteration  29: 1086541.179 ops/s
Iteration  30: 1092108.080 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1128310.996 ±(99.9%) 13907.755 ops/s [Average]
  (min, avg, max) = (1077089.336, 1128310.996, 1158340.227), stdev = 20816.474
  CI (99.9%): [1114403.242, 1142218.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1128310.996 ± 13907.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776674.017 ops/s
# Warmup Iteration   2: 782784.445 ops/s
# Warmup Iteration   3: 1010418.327 ops/s
# Warmup Iteration   4: 1046973.910 ops/s
# Warmup Iteration   5: 1050791.178 ops/s
# Warmup Iteration   6: 992967.881 ops/s
# Warmup Iteration   7: 1004107.544 ops/s
# Warmup Iteration   8: 1050305.654 ops/s
# Warmup Iteration   9: 1053924.482 ops/s
# Warmup Iteration  10: 1042554.829 ops/s
# Warmup Iteration  11: 1047120.070 ops/s
# Warmup Iteration  12: 980312.091 ops/s
# Warmup Iteration  13: 932519.809 ops/s
# Warmup Iteration  14: 1052225.998 ops/s
# Warmup Iteration  15: 1064244.190 ops/s
# Warmup Iteration  16: 1061010.337 ops/s
# Warmup Iteration  17: 1071287.022 ops/s
# Warmup Iteration  18: 1062033.996 ops/s
# Warmup Iteration  19: 1068106.776 ops/s
# Warmup Iteration  20: 1069483.591 ops/s
# Warmup Iteration  21: 1101510.613 ops/s
# Warmup Iteration  22: 1053706.270 ops/s
# Warmup Iteration  23: 1110954.681 ops/s
# Warmup Iteration  24: 1120322.154 ops/s
# Warmup Iteration  25: 1106477.316 ops/s
# Warmup Iteration  26: 1064024.707 ops/s
# Warmup Iteration  27: 1065724.886 ops/s
# Warmup Iteration  28: 1071206.091 ops/s
# Warmup Iteration  29: 1091186.948 ops/s
# Warmup Iteration  30: 1061518.415 ops/s
Iteration   1: 1129392.202 ops/s
Iteration   2: 1126246.418 ops/s
Iteration   3: 1089064.099 ops/s
Iteration   4: 1114333.598 ops/s
Iteration   5: 1109708.982 ops/s
Iteration   6: 1116299.827 ops/s
Iteration   7: 1107339.063 ops/s
Iteration   8: 1121170.314 ops/s
Iteration   9: 1130659.512 ops/s
Iteration  10: 1107043.190 ops/s
Iteration  11: 1058653.862 ops/s
Iteration  12: 1093658.236 ops/s
Iteration  13: 1069471.387 ops/s
Iteration  14: 1060349.807 ops/s
Iteration  15: 1069748.949 ops/s
Iteration  16: 1105984.152 ops/s
Iteration  17: 1100768.759 ops/s
Iteration  18: 1107228.826 ops/s
Iteration  19: 1035339.998 ops/s
Iteration  20: 1065302.959 ops/s
Iteration  21: 1057636.775 ops/s
Iteration  22: 1068289.019 ops/s
Iteration  23: 1055575.892 ops/s
Iteration  24: 1069884.737 ops/s
Iteration  25: 1034956.478 ops/s
Iteration  26: 1119661.080 ops/s
Iteration  27: 1114932.070 ops/s
Iteration  28: 1112610.078 ops/s
Iteration  29: 1128119.615 ops/s
Iteration  30: 1117699.222 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1093237.637 ±(99.9%) 19531.469 ops/s [Average]
  (min, avg, max) = (1034956.478, 1093237.637, 1130659.512), stdev = 29233.786
  CI (99.9%): [1073706.168, 1112769.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1093237.637 ± 19531.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 796664.933 ops/s
# Warmup Iteration   2: 817715.481 ops/s
# Warmup Iteration   3: 1031143.934 ops/s
# Warmup Iteration   4: 1037166.842 ops/s
# Warmup Iteration   5: 1042187.179 ops/s
# Warmup Iteration   6: 1013889.561 ops/s
# Warmup Iteration   7: 987446.244 ops/s
# Warmup Iteration   8: 1050806.843 ops/s
# Warmup Iteration   9: 1050197.637 ops/s
# Warmup Iteration  10: 1018253.415 ops/s
# Warmup Iteration  11: 1000644.154 ops/s
# Warmup Iteration  12: 935390.639 ops/s
# Warmup Iteration  13: 933200.815 ops/s
# Warmup Iteration  14: 1023953.330 ops/s
# Warmup Iteration  15: 1030376.603 ops/s
# Warmup Iteration  16: 1045399.405 ops/s
# Warmup Iteration  17: 1100371.226 ops/s
# Warmup Iteration  18: 1112051.562 ops/s
# Warmup Iteration  19: 1117220.477 ops/s
# Warmup Iteration  20: 1111102.344 ops/s
# Warmup Iteration  21: 1120746.198 ops/s
# Warmup Iteration  22: 1112182.174 ops/s
# Warmup Iteration  23: 1108493.202 ops/s
# Warmup Iteration  24: 1111387.886 ops/s
# Warmup Iteration  25: 1119937.551 ops/s
# Warmup Iteration  26: 1120557.749 ops/s
# Warmup Iteration  27: 1108858.539 ops/s
# Warmup Iteration  28: 1120395.048 ops/s
# Warmup Iteration  29: 1109434.533 ops/s
# Warmup Iteration  30: 1131359.966 ops/s
Iteration   1: 1107423.778 ops/s
Iteration   2: 1061243.851 ops/s
Iteration   3: 1070173.280 ops/s
Iteration   4: 1074203.444 ops/s
Iteration   5: 1072625.266 ops/s
Iteration   6: 1082850.312 ops/s
Iteration   7: 1126867.824 ops/s
Iteration   8: 1106495.148 ops/s
Iteration   9: 1117892.454 ops/s
Iteration  10: 1118250.032 ops/s
Iteration  11: 1098270.280 ops/s
Iteration  12: 1064318.501 ops/s
Iteration  13: 1077589.022 ops/s
Iteration  14: 1060057.769 ops/s
Iteration  15: 1112890.811 ops/s
Iteration  16: 1064217.173 ops/s
Iteration  17: 1052210.811 ops/s
Iteration  18: 1113258.107 ops/s
Iteration  19: 1129790.205 ops/s
Iteration  20: 1084407.608 ops/s
Iteration  21: 1109191.166 ops/s
Iteration  22: 1108906.066 ops/s
Iteration  23: 1036510.224 ops/s
Iteration  24: 1107588.046 ops/s
Iteration  25: 1111560.713 ops/s
Iteration  26: 1114536.672 ops/s
Iteration  27: 1106230.768 ops/s
Iteration  28: 1115998.672 ops/s
Iteration  29: 1110065.588 ops/s
Iteration  30: 1123510.178 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  1094637.792 ±(99.9%) 16950.748 ops/s [Average]
  (min, avg, max) = (1036510.224, 1094637.792, 1129790.205), stdev = 25371.083
  CI (99.9%): [1077687.044, 1111588.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  1094637.792 ± 16950.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807959.541 ops/s
# Warmup Iteration   2: 771119.054 ops/s
# Warmup Iteration   3: 1017068.890 ops/s
# Warmup Iteration   4: 1023157.677 ops/s
# Warmup Iteration   5: 1018867.540 ops/s
# Warmup Iteration   6: 1026480.656 ops/s
# Warmup Iteration   7: 1062578.673 ops/s
# Warmup Iteration   8: 1052814.917 ops/s
# Warmup Iteration   9: 1054269.568 ops/s
# Warmup Iteration  10: 1057745.783 ops/s
# Warmup Iteration  11: 1045289.622 ops/s
# Warmup Iteration  12: 951529.340 ops/s
# Warmup Iteration  13: 975009.223 ops/s
# Warmup Iteration  14: 1048905.066 ops/s
# Warmup Iteration  15: 1064390.687 ops/s
# Warmup Iteration  16: 1056216.614 ops/s
# Warmup Iteration  17: 1106450.789 ops/s
# Warmup Iteration  18: 1084911.909 ops/s
# Warmup Iteration  19: 1091378.684 ops/s
# Warmup Iteration  20: 1123580.792 ops/s
# Warmup Iteration  21: 1097555.154 ops/s
# Warmup Iteration  22: 1114342.541 ops/s
# Warmup Iteration  23: 1100613.103 ops/s
# Warmup Iteration  24: 1112872.223 ops/s
# Warmup Iteration  25: 1130947.433 ops/s
# Warmup Iteration  26: 1075840.422 ops/s
# Warmup Iteration  27: 1095690.353 ops/s
# Warmup Iteration  28: 1114353.153 ops/s
# Warmup Iteration  29: 1110293.565 ops/s
# Warmup Iteration  30: 1108589.217 ops/s
Iteration   1: 1096741.472 ops/s
Iteration   2: 1119175.817 ops/s
Iteration   3: 1112346.810 ops/s
Iteration   4: 1071650.894 ops/s
Iteration   5: 1050174.315 ops/s
Iteration   6: 1095021.448 ops/s
Iteration   7: 1085682.537 ops/s
Iteration   8: 1104033.466 ops/s
Iteration   9: 1098131.810 ops/s
Iteration  10: 1108526.062 ops/s
Iteration  11: 1077225.285 ops/s
Iteration  12: 1077483.914 ops/s
Iteration  13: 1062780.680 ops/s
Iteration  14: 1095073.645 ops/s
Iteration  15: 1111553.724 ops/s
Iteration  16: 1073257.345 ops/s
Iteration  17: 1096473.802 ops/s
Iteration  18: 1080216.446 ops/s
Iteration  19: 1074711.686 ops/s
Iteration  20: 1086942.998 ops/s
Iteration  21: 1109145.924 ops/s
Iteration  22: 1075295.292 ops/s
Iteration  23: 1061153.329 ops/s
Iteration  24: 1055092.987 ops/s
Iteration  25: 1106318.427 ops/s
Iteration  26: 1074177.754 ops/s
Iteration  27: 1109857.862 ops/s
Iteration  28: 1067871.755 ops/s
Iteration  29: 1103256.940 ops/s
Iteration  30: 1118928.928 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1088610.112 ±(99.9%) 13112.115 ops/s [Average]
  (min, avg, max) = (1050174.315, 1088610.112, 1119175.817), stdev = 19625.598
  CI (99.9%): [1075497.997, 1101722.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1088610.112 ± 13112.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731789.861 ops/s
# Warmup Iteration   2: 1563628.803 ops/s
# Warmup Iteration   3: 1706349.407 ops/s
# Warmup Iteration   4: 1424948.088 ops/s
# Warmup Iteration   5: 1717309.240 ops/s
# Warmup Iteration   6: 1704352.178 ops/s
# Warmup Iteration   7: 1705325.556 ops/s
# Warmup Iteration   8: 1678342.911 ops/s
# Warmup Iteration   9: 1663522.697 ops/s
# Warmup Iteration  10: 1712024.570 ops/s
# Warmup Iteration  11: 1680860.138 ops/s
# Warmup Iteration  12: 1698401.364 ops/s
# Warmup Iteration  13: 1703065.760 ops/s
# Warmup Iteration  14: 1702870.536 ops/s
# Warmup Iteration  15: 1707373.218 ops/s
# Warmup Iteration  16: 1697293.757 ops/s
# Warmup Iteration  17: 1639276.870 ops/s
# Warmup Iteration  18: 1718023.769 ops/s
# Warmup Iteration  19: 1701123.783 ops/s
# Warmup Iteration  20: 1694247.094 ops/s
# Warmup Iteration  21: 1683061.450 ops/s
# Warmup Iteration  22: 1705755.581 ops/s
# Warmup Iteration  23: 1644279.910 ops/s
# Warmup Iteration  24: 1652649.453 ops/s
# Warmup Iteration  25: 1697005.280 ops/s
# Warmup Iteration  26: 1705902.199 ops/s
# Warmup Iteration  27: 1695028.411 ops/s
# Warmup Iteration  28: 1695509.037 ops/s
# Warmup Iteration  29: 1716126.074 ops/s
# Warmup Iteration  30: 1710112.130 ops/s
Iteration   1: 1703165.239 ops/s
Iteration   2: 1684098.841 ops/s
Iteration   3: 1634718.932 ops/s
Iteration   4: 1692452.111 ops/s
Iteration   5: 1700640.080 ops/s
Iteration   6: 1685319.560 ops/s
Iteration   7: 1593729.236 ops/s
Iteration   8: 1640856.703 ops/s
Iteration   9: 1648854.753 ops/s
Iteration  10: 1631629.637 ops/s
Iteration  11: 1675487.426 ops/s
Iteration  12: 1602594.423 ops/s
Iteration  13: 1680193.725 ops/s
Iteration  14: 1685669.243 ops/s
Iteration  15: 1650501.473 ops/s
Iteration  16: 1672137.778 ops/s
Iteration  17: 1632405.994 ops/s
Iteration  18: 1659943.553 ops/s
Iteration  19: 1642412.898 ops/s
Iteration  20: 1680049.580 ops/s
Iteration  21: 1684988.657 ops/s
Iteration  22: 1725619.383 ops/s
Iteration  23: 1720036.241 ops/s
Iteration  24: 1714845.939 ops/s
Iteration  25: 1719457.893 ops/s
Iteration  26: 1714725.885 ops/s
Iteration  27: 1707631.957 ops/s
Iteration  28: 1710391.537 ops/s
Iteration  29: 1712531.141 ops/s
Iteration  30: 1693134.822 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_makeString":
  1676674.155 ±(99.9%) 23808.355 ops/s [Average]
  (min, avg, max) = (1593729.236, 1676674.155, 1725619.383), stdev = 35635.228
  CI (99.9%): [1652865.799, 1700482.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_makeString  thrpt   30  1676674.155 ± 23808.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3574432.617 ops/s
# Warmup Iteration   2: 5896564.983 ops/s
# Warmup Iteration   3: 16748922.682 ops/s
# Warmup Iteration   4: 13720138.560 ops/s
# Warmup Iteration   5: 16760292.195 ops/s
# Warmup Iteration   6: 16825932.160 ops/s
# Warmup Iteration   7: 16622433.868 ops/s
# Warmup Iteration   8: 16182577.168 ops/s
# Warmup Iteration   9: 16080786.698 ops/s
# Warmup Iteration  10: 16387815.053 ops/s
# Warmup Iteration  11: 16106573.423 ops/s
# Warmup Iteration  12: 16718581.971 ops/s
# Warmup Iteration  13: 16303466.367 ops/s
# Warmup Iteration  14: 16288409.812 ops/s
# Warmup Iteration  15: 17024318.394 ops/s
# Warmup Iteration  16: 16777651.096 ops/s
# Warmup Iteration  17: 16728501.798 ops/s
# Warmup Iteration  18: 16331871.321 ops/s
# Warmup Iteration  19: 16984579.023 ops/s
# Warmup Iteration  20: 16903827.118 ops/s
# Warmup Iteration  21: 16735014.708 ops/s
# Warmup Iteration  22: 16366443.475 ops/s
# Warmup Iteration  23: 17146395.955 ops/s
# Warmup Iteration  24: 17081745.652 ops/s
# Warmup Iteration  25: 16505383.382 ops/s
# Warmup Iteration  26: 16649763.519 ops/s
# Warmup Iteration  27: 17250804.826 ops/s
# Warmup Iteration  28: 16483792.761 ops/s
# Warmup Iteration  29: 16778449.646 ops/s
# Warmup Iteration  30: 16499492.440 ops/s
Iteration   1: 16225055.670 ops/s
Iteration   2: 16805760.164 ops/s
Iteration   3: 16923551.492 ops/s
Iteration   4: 16747648.036 ops/s
Iteration   5: 16672279.660 ops/s
Iteration   6: 16631671.348 ops/s
Iteration   7: 16413444.468 ops/s
Iteration   8: 16945262.404 ops/s
Iteration   9: 16358078.120 ops/s
Iteration  10: 17012330.195 ops/s
Iteration  11: 16936579.055 ops/s
Iteration  12: 16907141.027 ops/s
Iteration  13: 16846662.362 ops/s
Iteration  14: 16283023.809 ops/s
Iteration  15: 16174340.681 ops/s
Iteration  16: 16828818.236 ops/s
Iteration  17: 17145021.872 ops/s
Iteration  18: 16902011.094 ops/s
Iteration  19: 16982263.721 ops/s
Iteration  20: 16717899.622 ops/s
Iteration  21: 17144314.320 ops/s
Iteration  22: 17093023.240 ops/s
Iteration  23: 17190047.919 ops/s
Iteration  24: 16974844.624 ops/s
Iteration  25: 17132833.206 ops/s
Iteration  26: 17129412.874 ops/s
Iteration  27: 17271274.348 ops/s
Iteration  28: 17149196.904 ops/s
Iteration  29: 17028594.407 ops/s
Iteration  30: 16472693.158 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollection":
  16834835.935 ±(99.9%) 205321.561 ops/s [Average]
  (min, avg, max) = (16174340.681, 16834835.935, 17271274.348), stdev = 307315.670
  CI (99.9%): [16629514.373, 17040157.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_newCollection  thrpt   30  16834835.935 ± 205321.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6351842.282 ops/s
# Warmup Iteration   2: 10343905.147 ops/s
# Warmup Iteration   3: 12300381.580 ops/s
# Warmup Iteration   4: 12139482.083 ops/s
# Warmup Iteration   5: 11880252.432 ops/s
# Warmup Iteration   6: 12039718.790 ops/s
# Warmup Iteration   7: 12072761.885 ops/s
# Warmup Iteration   8: 12169288.745 ops/s
# Warmup Iteration   9: 12138046.197 ops/s
# Warmup Iteration  10: 11755177.506 ops/s
# Warmup Iteration  11: 12049898.033 ops/s
# Warmup Iteration  12: 12122290.904 ops/s
# Warmup Iteration  13: 12120007.563 ops/s
# Warmup Iteration  14: 11794501.453 ops/s
# Warmup Iteration  15: 12108339.088 ops/s
# Warmup Iteration  16: 12173625.147 ops/s
# Warmup Iteration  17: 11990622.845 ops/s
# Warmup Iteration  18: 11733400.342 ops/s
# Warmup Iteration  19: 11810032.035 ops/s
# Warmup Iteration  20: 12041750.086 ops/s
# Warmup Iteration  21: 12149907.760 ops/s
# Warmup Iteration  22: 11587667.881 ops/s
# Warmup Iteration  23: 11773003.785 ops/s
# Warmup Iteration  24: 11696159.815 ops/s
# Warmup Iteration  25: 12281375.506 ops/s
# Warmup Iteration  26: 12033769.630 ops/s
# Warmup Iteration  27: 12065163.915 ops/s
# Warmup Iteration  28: 11928147.439 ops/s
# Warmup Iteration  29: 11960603.589 ops/s
# Warmup Iteration  30: 11748365.370 ops/s
Iteration   1: 12166186.886 ops/s
Iteration   2: 12213533.048 ops/s
Iteration   3: 12255363.095 ops/s
Iteration   4: 12287663.250 ops/s
Iteration   5: 12200434.435 ops/s
Iteration   6: 12281564.138 ops/s
Iteration   7: 12075545.417 ops/s
Iteration   8: 11520292.600 ops/s
Iteration   9: 12004086.384 ops/s
Iteration  10: 11886822.970 ops/s
Iteration  11: 12020054.464 ops/s
Iteration  12: 12220911.792 ops/s
Iteration  13: 12110674.844 ops/s
Iteration  14: 12230883.274 ops/s
Iteration  15: 12219928.273 ops/s
Iteration  16: 12249197.572 ops/s
Iteration  17: 12170848.816 ops/s
Iteration  18: 12169217.842 ops/s
Iteration  19: 12049602.952 ops/s
Iteration  20: 12058913.889 ops/s
Iteration  21: 11954486.793 ops/s
Iteration  22: 12212246.530 ops/s
Iteration  23: 11734550.757 ops/s
Iteration  24: 11883036.226 ops/s
Iteration  25: 12002508.757 ops/s
Iteration  26: 12346462.883 ops/s
Iteration  27: 12244760.016 ops/s
Iteration  28: 11995012.230 ops/s
Iteration  29: 12033457.056 ops/s
Iteration  30: 11851339.405 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_newCollectionWith":
  12088319.553 ±(99.9%) 122737.713 ops/s [Average]
  (min, avg, max) = (11520292.600, 12088319.553, 12346462.883), stdev = 183708.044
  CI (99.9%): [11965581.841, 12211057.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  12088319.553 ± 122737.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5798486.616 ops/s
# Warmup Iteration   2: 9710262.243 ops/s
# Warmup Iteration   3: 11660504.528 ops/s
# Warmup Iteration   4: 11432499.123 ops/s
# Warmup Iteration   5: 11649007.192 ops/s
# Warmup Iteration   6: 11651169.637 ops/s
# Warmup Iteration   7: 11360968.689 ops/s
# Warmup Iteration   8: 11332054.060 ops/s
# Warmup Iteration   9: 11485672.861 ops/s
# Warmup Iteration  10: 11436189.968 ops/s
# Warmup Iteration  11: 11473403.695 ops/s
# Warmup Iteration  12: 11331804.646 ops/s
# Warmup Iteration  13: 11553347.988 ops/s
# Warmup Iteration  14: 11260476.627 ops/s
# Warmup Iteration  15: 11634523.608 ops/s
# Warmup Iteration  16: 11502118.300 ops/s
# Warmup Iteration  17: 11540036.143 ops/s
# Warmup Iteration  18: 11561445.495 ops/s
# Warmup Iteration  19: 11596039.275 ops/s
# Warmup Iteration  20: 11537666.995 ops/s
# Warmup Iteration  21: 11622264.747 ops/s
# Warmup Iteration  22: 11622965.438 ops/s
# Warmup Iteration  23: 11358223.676 ops/s
# Warmup Iteration  24: 11300543.647 ops/s
# Warmup Iteration  25: 11279166.726 ops/s
# Warmup Iteration  26: 11625769.947 ops/s
# Warmup Iteration  27: 11347676.044 ops/s
# Warmup Iteration  28: 11501488.885 ops/s
# Warmup Iteration  29: 11591313.026 ops/s
# Warmup Iteration  30: 11235887.795 ops/s
Iteration   1: 11157722.869 ops/s
Iteration   2: 11587007.437 ops/s
Iteration   3: 11558396.065 ops/s
Iteration   4: 11357216.208 ops/s
Iteration   5: 11670439.748 ops/s
Iteration   6: 11509270.671 ops/s
Iteration   7: 11530159.096 ops/s
Iteration   8: 11548980.492 ops/s
Iteration   9: 11493869.619 ops/s
Iteration  10: 11588988.441 ops/s
Iteration  11: 11531307.151 ops/s
Iteration  12: 11508642.582 ops/s
Iteration  13: 11496011.971 ops/s
Iteration  14: 11543150.144 ops/s
Iteration  15: 11354261.982 ops/s
Iteration  16: 11540864.253 ops/s
Iteration  17: 11581499.258 ops/s
Iteration  18: 11640938.981 ops/s
Iteration  19: 11583113.613 ops/s
Iteration  20: 11578513.070 ops/s
Iteration  21: 11550662.083 ops/s
Iteration  22: 11692642.269 ops/s
Iteration  23: 11544155.491 ops/s
Iteration  24: 11490180.303 ops/s
Iteration  25: 11737956.831 ops/s
Iteration  26: 11150951.157 ops/s
Iteration  27: 11465592.878 ops/s
Iteration  28: 11431983.893 ops/s
Iteration  29: 10951554.978 ops/s
Iteration  30: 11561657.037 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_noneSatisfy":
  11497923.019 ±(99.9%) 109908.183 ops/s [Average]
  (min, avg, max) = (10951554.978, 11497923.019, 11737956.831), stdev = 164505.407
  CI (99.9%): [11388014.836, 11607831.202] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  11497923.019 ± 109908.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14694388.417 ops/s
# Warmup Iteration   2: 22131765.640 ops/s
# Warmup Iteration   3: 26571537.020 ops/s
# Warmup Iteration   4: 26715797.749 ops/s
# Warmup Iteration   5: 26707924.305 ops/s
# Warmup Iteration   6: 26355617.482 ops/s
# Warmup Iteration   7: 26446529.072 ops/s
# Warmup Iteration   8: 26505557.165 ops/s
# Warmup Iteration   9: 26416527.462 ops/s
# Warmup Iteration  10: 26666153.463 ops/s
# Warmup Iteration  11: 26546691.890 ops/s
# Warmup Iteration  12: 26503063.720 ops/s
# Warmup Iteration  13: 26655564.146 ops/s
# Warmup Iteration  14: 26864578.637 ops/s
# Warmup Iteration  15: 26396250.837 ops/s
# Warmup Iteration  16: 26349106.317 ops/s
# Warmup Iteration  17: 26371478.737 ops/s
# Warmup Iteration  18: 26317037.665 ops/s
# Warmup Iteration  19: 26298932.774 ops/s
# Warmup Iteration  20: 26742093.295 ops/s
# Warmup Iteration  21: 26482321.876 ops/s
# Warmup Iteration  22: 26262868.189 ops/s
# Warmup Iteration  23: 26534603.942 ops/s
# Warmup Iteration  24: 26265214.305 ops/s
# Warmup Iteration  25: 26484557.982 ops/s
# Warmup Iteration  26: 26599283.499 ops/s
# Warmup Iteration  27: 26344309.631 ops/s
# Warmup Iteration  28: 26367565.035 ops/s
# Warmup Iteration  29: 26290816.353 ops/s
# Warmup Iteration  30: 26456600.075 ops/s
Iteration   1: 26458376.219 ops/s
Iteration   2: 26351296.889 ops/s
Iteration   3: 26303316.188 ops/s
Iteration   4: 26465209.466 ops/s
Iteration   5: 26739567.397 ops/s
Iteration   6: 26380725.614 ops/s
Iteration   7: 26483307.794 ops/s
Iteration   8: 26665240.481 ops/s
Iteration   9: 26206498.849 ops/s
Iteration  10: 26677559.026 ops/s
Iteration  11: 26453063.981 ops/s
Iteration  12: 26159640.817 ops/s
Iteration  13: 26569075.089 ops/s
Iteration  14: 26031284.963 ops/s
Iteration  15: 25973210.289 ops/s
Iteration  16: 26549747.100 ops/s
Iteration  17: 26220878.096 ops/s
Iteration  18: 26574901.848 ops/s
Iteration  19: 26693667.739 ops/s
Iteration  20: 26749238.469 ops/s
Iteration  21: 26371516.666 ops/s
Iteration  22: 26719607.610 ops/s
Iteration  23: 26682470.379 ops/s
Iteration  24: 26890112.994 ops/s
Iteration  25: 26299437.600 ops/s
Iteration  26: 26322719.550 ops/s
Iteration  27: 26575852.286 ops/s
Iteration  28: 26300742.568 ops/s
Iteration  29: 26411913.525 ops/s
Iteration  30: 26854744.229 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_notEmpty":
  26471164.124 ±(99.9%) 155068.929 ops/s [Average]
  (min, avg, max) = (25973210.289, 26471164.124, 26890112.994), stdev = 232099.891
  CI (99.9%): [26316095.194, 26626233.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_notEmpty  thrpt   30  26471164.124 ± 155068.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5204255.943 ops/s
# Warmup Iteration   2: 9938043.698 ops/s
# Warmup Iteration   3: 8923120.547 ops/s
# Warmup Iteration   4: 10389392.922 ops/s
# Warmup Iteration   5: 10202625.609 ops/s
# Warmup Iteration   6: 10152809.775 ops/s
# Warmup Iteration   7: 10364824.141 ops/s
# Warmup Iteration   8: 10052119.368 ops/s
# Warmup Iteration   9: 10116288.955 ops/s
# Warmup Iteration  10: 10302250.215 ops/s
# Warmup Iteration  11: 10340296.083 ops/s
# Warmup Iteration  12: 10189050.903 ops/s
# Warmup Iteration  13: 10161735.851 ops/s
# Warmup Iteration  14: 10321333.498 ops/s
# Warmup Iteration  15: 10452870.529 ops/s
# Warmup Iteration  16: 10314482.347 ops/s
# Warmup Iteration  17: 10015880.160 ops/s
# Warmup Iteration  18: 10163821.437 ops/s
# Warmup Iteration  19: 10030134.650 ops/s
# Warmup Iteration  20: 10188954.284 ops/s
# Warmup Iteration  21: 10057991.421 ops/s
# Warmup Iteration  22: 10076744.479 ops/s
# Warmup Iteration  23: 10151194.957 ops/s
# Warmup Iteration  24: 9974441.540 ops/s
# Warmup Iteration  25: 10408392.915 ops/s
# Warmup Iteration  26: 10224032.139 ops/s
# Warmup Iteration  27: 10270490.007 ops/s
# Warmup Iteration  28: 10374624.481 ops/s
# Warmup Iteration  29: 10258949.669 ops/s
# Warmup Iteration  30: 10306734.497 ops/s
Iteration   1: 10456792.850 ops/s
Iteration   2: 10080264.335 ops/s
Iteration   3: 10153925.477 ops/s
Iteration   4: 10195925.538 ops/s
Iteration   5: 9896496.341 ops/s
Iteration   6: 10057898.942 ops/s
Iteration   7: 10216792.867 ops/s
Iteration   8: 10348815.697 ops/s
Iteration   9: 10299234.464 ops/s
Iteration  10: 10253686.419 ops/s
Iteration  11: 10236580.652 ops/s
Iteration  12: 10335535.055 ops/s
Iteration  13: 10394484.763 ops/s
Iteration  14: 10325956.001 ops/s
Iteration  15: 10254273.400 ops/s
Iteration  16: 10323044.834 ops/s
Iteration  17: 10254239.698 ops/s
Iteration  18: 10361517.355 ops/s
Iteration  19: 10405172.513 ops/s
Iteration  20: 10389193.729 ops/s
Iteration  21: 10392860.894 ops/s
Iteration  22: 10273796.392 ops/s
Iteration  23: 10108564.098 ops/s
Iteration  24: 9897146.638 ops/s
Iteration  25: 9948948.253 ops/s
Iteration  26: 10121292.558 ops/s
Iteration  27: 10009495.066 ops/s
Iteration  28: 9835083.706 ops/s
Iteration  29: 9847615.035 ops/s
Iteration  30: 9778593.644 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduce":
  10181774.240 ±(99.9%) 130208.399 ops/s [Average]
  (min, avg, max) = (9778593.644, 10181774.240, 10456792.850), stdev = 194889.816
  CI (99.9%): [10051565.842, 10311982.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_reduce  thrpt   30  10181774.240 ± 130208.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4763994.942 ops/s
# Warmup Iteration   2: 8267002.362 ops/s
# Warmup Iteration   3: 9180842.925 ops/s
# Warmup Iteration   4: 9483255.085 ops/s
# Warmup Iteration   5: 9203764.317 ops/s
# Warmup Iteration   6: 9487110.035 ops/s
# Warmup Iteration   7: 9485310.297 ops/s
# Warmup Iteration   8: 9495591.863 ops/s
# Warmup Iteration   9: 9445626.901 ops/s
# Warmup Iteration  10: 9342410.968 ops/s
# Warmup Iteration  11: 9213035.213 ops/s
# Warmup Iteration  12: 9529359.807 ops/s
# Warmup Iteration  13: 9568987.397 ops/s
# Warmup Iteration  14: 9155254.243 ops/s
# Warmup Iteration  15: 9380939.676 ops/s
# Warmup Iteration  16: 9536152.313 ops/s
# Warmup Iteration  17: 9266613.855 ops/s
# Warmup Iteration  18: 9233005.839 ops/s
# Warmup Iteration  19: 9336107.739 ops/s
# Warmup Iteration  20: 9299057.316 ops/s
# Warmup Iteration  21: 9401332.168 ops/s
# Warmup Iteration  22: 9470030.960 ops/s
# Warmup Iteration  23: 9456462.394 ops/s
# Warmup Iteration  24: 9426809.209 ops/s
# Warmup Iteration  25: 9407616.598 ops/s
# Warmup Iteration  26: 9419363.597 ops/s
# Warmup Iteration  27: 9224698.087 ops/s
# Warmup Iteration  28: 9242811.590 ops/s
# Warmup Iteration  29: 9424980.643 ops/s
# Warmup Iteration  30: 9389121.008 ops/s
Iteration   1: 9382463.594 ops/s
Iteration   2: 9426610.531 ops/s
Iteration   3: 9504510.295 ops/s
Iteration   4: 9388031.153 ops/s
Iteration   5: 9260431.817 ops/s
Iteration   6: 9404064.468 ops/s
Iteration   7: 9467167.473 ops/s
Iteration   8: 9262471.816 ops/s
Iteration   9: 9479164.165 ops/s
Iteration  10: 9248310.028 ops/s
Iteration  11: 9324813.347 ops/s
Iteration  12: 9290642.233 ops/s
Iteration  13: 9402392.561 ops/s
Iteration  14: 9254323.857 ops/s
Iteration  15: 9426570.839 ops/s
Iteration  16: 8944303.812 ops/s
Iteration  17: 9245975.043 ops/s
Iteration  18: 9361181.751 ops/s
Iteration  19: 9470908.701 ops/s
Iteration  20: 9476821.585 ops/s
Iteration  21: 9494120.881 ops/s
Iteration  22: 9359703.971 ops/s
Iteration  23: 9532146.379 ops/s
Iteration  24: 9575257.013 ops/s
Iteration  25: 9452881.944 ops/s
Iteration  26: 9393634.938 ops/s
Iteration  27: 9467085.375 ops/s
Iteration  28: 9456496.948 ops/s
Iteration  29: 9459267.660 ops/s
Iteration  30: 9587250.491 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceIfEmpty":
  9393300.156 ±(99.9%) 85421.769 ops/s [Average]
  (min, avg, max) = (8944303.812, 9393300.156, 9587250.491), stdev = 127855.292
  CI (99.9%): [9307878.387, 9478721.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  9393300.156 ± 85421.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770987.557 ops/s
# Warmup Iteration   2: 798381.775 ops/s
# Warmup Iteration   3: 1018002.942 ops/s
# Warmup Iteration   4: 1038998.548 ops/s
# Warmup Iteration   5: 1038430.868 ops/s
# Warmup Iteration   6: 1050014.026 ops/s
# Warmup Iteration   7: 1041270.384 ops/s
# Warmup Iteration   8: 1044684.413 ops/s
# Warmup Iteration   9: 1034778.917 ops/s
# Warmup Iteration  10: 1050572.414 ops/s
# Warmup Iteration  11: 1049573.971 ops/s
# Warmup Iteration  12: 991343.351 ops/s
# Warmup Iteration  13: 922330.203 ops/s
# Warmup Iteration  14: 1031195.339 ops/s
# Warmup Iteration  15: 1044618.465 ops/s
# Warmup Iteration  16: 1043235.226 ops/s
# Warmup Iteration  17: 1123575.602 ops/s
# Warmup Iteration  18: 1123957.523 ops/s
# Warmup Iteration  19: 1115233.333 ops/s
# Warmup Iteration  20: 1127820.918 ops/s
# Warmup Iteration  21: 1110388.971 ops/s
# Warmup Iteration  22: 1117252.302 ops/s
# Warmup Iteration  23: 1114215.011 ops/s
# Warmup Iteration  24: 1120705.241 ops/s
# Warmup Iteration  25: 1097469.062 ops/s
# Warmup Iteration  26: 1066028.895 ops/s
# Warmup Iteration  27: 1086920.892 ops/s
# Warmup Iteration  28: 1072484.939 ops/s
# Warmup Iteration  29: 1075146.612 ops/s
# Warmup Iteration  30: 1126912.591 ops/s
Iteration   1: 1125601.397 ops/s
Iteration   2: 1093483.601 ops/s
Iteration   3: 1112850.024 ops/s
Iteration   4: 1135935.591 ops/s
Iteration   5: 1137551.536 ops/s
Iteration   6: 1124088.215 ops/s
Iteration   7: 1066603.302 ops/s
Iteration   8: 1120192.579 ops/s
Iteration   9: 1118019.590 ops/s
Iteration  10: 1113578.584 ops/s
Iteration  11: 1109536.713 ops/s
Iteration  12: 1105684.054 ops/s
Iteration  13: 1119602.874 ops/s
Iteration  14: 1058835.873 ops/s
Iteration  15: 1115343.270 ops/s
Iteration  16: 1076784.666 ops/s
Iteration  17: 1070797.994 ops/s
Iteration  18: 1090416.707 ops/s
Iteration  19: 1109310.703 ops/s
Iteration  20: 1077626.966 ops/s
Iteration  21: 1068157.060 ops/s
Iteration  22: 1122559.562 ops/s
Iteration  23: 1105440.761 ops/s
Iteration  24: 1079190.584 ops/s
Iteration  25: 1064138.778 ops/s
Iteration  26: 1090162.823 ops/s
Iteration  27: 1088835.849 ops/s
Iteration  28: 1119374.225 ops/s
Iteration  29: 1100637.705 ops/s
Iteration  30: 1127930.972 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1101609.085 ±(99.9%) 15324.136 ops/s [Average]
  (min, avg, max) = (1058835.873, 1101609.085, 1137551.536), stdev = 22936.447
  CI (99.9%): [1086284.950, 1116933.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1101609.085 ± 15324.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6690714.889 ops/s
# Warmup Iteration   2: 11252124.415 ops/s
# Warmup Iteration   3: 13297952.332 ops/s
# Warmup Iteration   4: 13352364.071 ops/s
# Warmup Iteration   5: 13344807.727 ops/s
# Warmup Iteration   6: 13317835.690 ops/s
# Warmup Iteration   7: 13247157.824 ops/s
# Warmup Iteration   8: 13160625.090 ops/s
# Warmup Iteration   9: 12758422.328 ops/s
# Warmup Iteration  10: 12947482.457 ops/s
# Warmup Iteration  11: 13088097.162 ops/s
# Warmup Iteration  12: 12964508.410 ops/s
# Warmup Iteration  13: 13272053.457 ops/s
# Warmup Iteration  14: 13373284.940 ops/s
# Warmup Iteration  15: 13188780.121 ops/s
# Warmup Iteration  16: 12920229.924 ops/s
# Warmup Iteration  17: 13066519.324 ops/s
# Warmup Iteration  18: 13346253.964 ops/s
# Warmup Iteration  19: 13121594.576 ops/s
# Warmup Iteration  20: 13148561.014 ops/s
# Warmup Iteration  21: 13329234.813 ops/s
# Warmup Iteration  22: 13168113.284 ops/s
# Warmup Iteration  23: 13198982.808 ops/s
# Warmup Iteration  24: 13334831.315 ops/s
# Warmup Iteration  25: 13062173.155 ops/s
# Warmup Iteration  26: 13122491.832 ops/s
# Warmup Iteration  27: 13233184.221 ops/s
# Warmup Iteration  28: 13170967.720 ops/s
# Warmup Iteration  29: 13293321.743 ops/s
# Warmup Iteration  30: 13229231.020 ops/s
Iteration   1: 13247058.993 ops/s
Iteration   2: 13515742.636 ops/s
Iteration   3: 13021442.182 ops/s
Iteration   4: 13203650.146 ops/s
Iteration   5: 13354171.936 ops/s
Iteration   6: 13246184.321 ops/s
Iteration   7: 13091519.356 ops/s
Iteration   8: 13366358.187 ops/s
Iteration   9: 13381257.562 ops/s
Iteration  10: 13000369.531 ops/s
Iteration  11: 13194281.244 ops/s
Iteration  12: 12788592.058 ops/s
Iteration  13: 13101851.873 ops/s
Iteration  14: 13455228.685 ops/s
Iteration  15: 13070512.750 ops/s
Iteration  16: 12765445.335 ops/s
Iteration  17: 12595458.292 ops/s
Iteration  18: 12827172.696 ops/s
Iteration  19: 13460202.444 ops/s
Iteration  20: 13115960.387 ops/s
Iteration  21: 12881648.748 ops/s
Iteration  22: 13363008.808 ops/s
Iteration  23: 12812244.791 ops/s
Iteration  24: 13035309.431 ops/s
Iteration  25: 13143394.042 ops/s
Iteration  26: 13366436.138 ops/s
Iteration  27: 13280649.943 ops/s
Iteration  28: 13258387.397 ops/s
Iteration  29: 13296773.211 ops/s
Iteration  30: 13269375.378 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_reject":
  13150322.950 ±(99.9%) 156298.945 ops/s [Average]
  (min, avg, max) = (12595458.292, 13150322.950, 13515742.636), stdev = 233940.921
  CI (99.9%): [12994024.005, 13306621.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_reject  thrpt   30  13150322.950 ± 156298.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 733402.407 ops/s
# Warmup Iteration   2: 976571.416 ops/s
# Warmup Iteration   3: 5331610.529 ops/s
# Warmup Iteration   4: 6157860.451 ops/s
# Warmup Iteration   5: 5099454.072 ops/s
# Warmup Iteration   6: 6120483.451 ops/s
# Warmup Iteration   7: 6112275.903 ops/s
# Warmup Iteration   8: 6113015.397 ops/s
# Warmup Iteration   9: 6114338.404 ops/s
# Warmup Iteration  10: 6006549.652 ops/s
# Warmup Iteration  11: 5931131.755 ops/s
# Warmup Iteration  12: 6115767.978 ops/s
# Warmup Iteration  13: 6160176.927 ops/s
# Warmup Iteration  14: 6234858.848 ops/s
# Warmup Iteration  15: 6153599.688 ops/s
# Warmup Iteration  16: 6148676.557 ops/s
# Warmup Iteration  17: 6210276.671 ops/s
# Warmup Iteration  18: 6202182.484 ops/s
# Warmup Iteration  19: 6173149.244 ops/s
# Warmup Iteration  20: 6152163.451 ops/s
# Warmup Iteration  21: 6168418.934 ops/s
# Warmup Iteration  22: 6049335.925 ops/s
# Warmup Iteration  23: 6142660.699 ops/s
# Warmup Iteration  24: 6160574.878 ops/s
# Warmup Iteration  25: 6170286.964 ops/s
# Warmup Iteration  26: 6144004.067 ops/s
# Warmup Iteration  27: 6125689.630 ops/s
# Warmup Iteration  28: 6012269.064 ops/s
# Warmup Iteration  29: 6017977.451 ops/s
# Warmup Iteration  30: 5953135.000 ops/s
Iteration   1: 6142014.428 ops/s
Iteration   2: 5800620.644 ops/s
Iteration   3: 6154007.848 ops/s
Iteration   4: 6178802.165 ops/s
Iteration   5: 6132506.743 ops/s
Iteration   6: 6069167.515 ops/s
Iteration   7: 6026238.898 ops/s
Iteration   8: 6223807.528 ops/s
Iteration   9: 6248899.587 ops/s
Iteration  10: 6054275.115 ops/s
Iteration  11: 5899926.414 ops/s
Iteration  12: 6171612.966 ops/s
Iteration  13: 6192448.939 ops/s
Iteration  14: 6077725.178 ops/s
Iteration  15: 5866515.042 ops/s
Iteration  16: 6099923.943 ops/s
Iteration  17: 6045044.399 ops/s
Iteration  18: 6045223.953 ops/s
Iteration  19: 6152018.631 ops/s
Iteration  20: 6205702.904 ops/s
Iteration  21: 6193531.322 ops/s
Iteration  22: 5985442.329 ops/s
Iteration  23: 6096794.589 ops/s
Iteration  24: 6165400.079 ops/s
Iteration  25: 6073528.981 ops/s
Iteration  26: 6169520.895 ops/s
Iteration  27: 6110552.272 ops/s
Iteration  28: 6126225.648 ops/s
Iteration  29: 6135690.121 ops/s
Iteration  30: 5921950.550 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_remove":
  6092170.654 ±(99.9%) 72320.911 ops/s [Average]
  (min, avg, max) = (5800620.644, 6092170.654, 6248899.587), stdev = 108246.544
  CI (99.9%): [6019849.743, 6164491.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_remove  thrpt   30  6092170.654 ± 72320.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555298.038 ops/s
# Warmup Iteration   2: 956565.647 ops/s
# Warmup Iteration   3: 3958517.288 ops/s
# Warmup Iteration   4: 3354777.014 ops/s
# Warmup Iteration   5: 3979964.234 ops/s
# Warmup Iteration   6: 3867578.429 ops/s
# Warmup Iteration   7: 3930959.271 ops/s
# Warmup Iteration   8: 3903919.367 ops/s
# Warmup Iteration   9: 3972853.865 ops/s
# Warmup Iteration  10: 3843433.680 ops/s
# Warmup Iteration  11: 3937362.704 ops/s
# Warmup Iteration  12: 3980334.374 ops/s
# Warmup Iteration  13: 3981138.866 ops/s
# Warmup Iteration  14: 3950047.359 ops/s
# Warmup Iteration  15: 3969813.310 ops/s
# Warmup Iteration  16: 3953546.642 ops/s
# Warmup Iteration  17: 3982076.579 ops/s
# Warmup Iteration  18: 3959536.991 ops/s
# Warmup Iteration  19: 3883567.498 ops/s
# Warmup Iteration  20: 4020707.360 ops/s
# Warmup Iteration  21: 3812307.993 ops/s
# Warmup Iteration  22: 3902863.217 ops/s
# Warmup Iteration  23: 3938234.699 ops/s
# Warmup Iteration  24: 3969511.721 ops/s
# Warmup Iteration  25: 3968477.925 ops/s
# Warmup Iteration  26: 3970723.769 ops/s
# Warmup Iteration  27: 3969743.829 ops/s
# Warmup Iteration  28: 3919234.059 ops/s
# Warmup Iteration  29: 3897060.850 ops/s
# Warmup Iteration  30: 3904454.545 ops/s
Iteration   1: 3987414.120 ops/s
Iteration   2: 3965364.871 ops/s
Iteration   3: 4001892.358 ops/s
Iteration   4: 3868969.109 ops/s
Iteration   5: 3968515.795 ops/s
Iteration   6: 4016683.691 ops/s
Iteration   7: 3965030.182 ops/s
Iteration   8: 3998266.623 ops/s
Iteration   9: 4015046.354 ops/s
Iteration  10: 3946239.246 ops/s
Iteration  11: 3970750.387 ops/s
Iteration  12: 3956717.475 ops/s
Iteration  13: 3889124.179 ops/s
Iteration  14: 3940741.516 ops/s
Iteration  15: 4012258.686 ops/s
Iteration  16: 3838088.855 ops/s
Iteration  17: 3795478.596 ops/s
Iteration  18: 3797930.933 ops/s
Iteration  19: 3981291.147 ops/s
Iteration  20: 4014942.574 ops/s
Iteration  21: 3867852.809 ops/s
Iteration  22: 3921908.701 ops/s
Iteration  23: 3919815.575 ops/s
Iteration  24: 3892095.695 ops/s
Iteration  25: 3962240.672 ops/s
Iteration  26: 4005138.212 ops/s
Iteration  27: 3930227.945 ops/s
Iteration  28: 3985492.090 ops/s
Iteration  29: 3973178.482 ops/s
Iteration  30: 3952924.151 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll":
  3944720.701 ±(99.9%) 41465.101 ops/s [Average]
  (min, avg, max) = (3795478.596, 3944720.701, 4016683.691), stdev = 62063.016
  CI (99.9%): [3903255.600, 3986185.802] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll  thrpt   30  3944720.701 ± 41465.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396663.425 ops/s
# Warmup Iteration   2: 596936.865 ops/s
# Warmup Iteration   3: 1325279.746 ops/s
# Warmup Iteration   4: 1358768.433 ops/s
# Warmup Iteration   5: 1136789.695 ops/s
# Warmup Iteration   6: 1345928.889 ops/s
# Warmup Iteration   7: 1321092.864 ops/s
# Warmup Iteration   8: 1341232.604 ops/s
# Warmup Iteration   9: 1367062.917 ops/s
# Warmup Iteration  10: 1366769.946 ops/s
# Warmup Iteration  11: 1364865.325 ops/s
# Warmup Iteration  12: 1366067.699 ops/s
# Warmup Iteration  13: 1327631.253 ops/s
# Warmup Iteration  14: 1326979.318 ops/s
# Warmup Iteration  15: 1380695.049 ops/s
# Warmup Iteration  16: 1380461.623 ops/s
# Warmup Iteration  17: 1389130.334 ops/s
# Warmup Iteration  18: 1386097.732 ops/s
# Warmup Iteration  19: 1391958.538 ops/s
# Warmup Iteration  20: 1391359.061 ops/s
# Warmup Iteration  21: 1369584.662 ops/s
# Warmup Iteration  22: 1362569.183 ops/s
# Warmup Iteration  23: 1362718.358 ops/s
# Warmup Iteration  24: 1372218.264 ops/s
# Warmup Iteration  25: 1370463.186 ops/s
# Warmup Iteration  26: 1360180.693 ops/s
# Warmup Iteration  27: 1357759.949 ops/s
# Warmup Iteration  28: 1350352.708 ops/s
# Warmup Iteration  29: 1347464.681 ops/s
# Warmup Iteration  30: 1358233.466 ops/s
Iteration   1: 1335211.678 ops/s
Iteration   2: 1374200.249 ops/s
Iteration   3: 1376017.398 ops/s
Iteration   4: 1370988.566 ops/s
Iteration   5: 1364196.104 ops/s
Iteration   6: 1385243.966 ops/s
Iteration   7: 1370653.518 ops/s
Iteration   8: 1355264.774 ops/s
Iteration   9: 1359620.098 ops/s
Iteration  10: 1369583.113 ops/s
Iteration  11: 1375560.009 ops/s
Iteration  12: 1387718.724 ops/s
Iteration  13: 1379917.150 ops/s
Iteration  14: 1372834.655 ops/s
Iteration  15: 1356068.330 ops/s
Iteration  16: 1348348.494 ops/s
Iteration  17: 1322795.875 ops/s
Iteration  18: 1324559.193 ops/s
Iteration  19: 1383169.508 ops/s
Iteration  20: 1328653.750 ops/s
Iteration  21: 1372403.116 ops/s
Iteration  22: 1374079.516 ops/s
Iteration  23: 1372760.466 ops/s
Iteration  24: 1365541.308 ops/s
Iteration  25: 1356901.297 ops/s
Iteration  26: 1366919.007 ops/s
Iteration  27: 1363479.687 ops/s
Iteration  28: 1356046.428 ops/s
Iteration  29: 1379914.475 ops/s
Iteration  30: 1346698.416 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll_iterable":
  1363178.296 ±(99.9%) 11678.085 ops/s [Average]
  (min, avg, max) = (1322795.875, 1363178.296, 1387718.724), stdev = 17479.209
  CI (99.9%): [1351500.211, 1374856.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1363178.296 ± 11678.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804409.447 ops/s
# Warmup Iteration   2: 1036709.806 ops/s
# Warmup Iteration   3: 5937270.718 ops/s
# Warmup Iteration   4: 6800033.459 ops/s
# Warmup Iteration   5: 5747561.857 ops/s
# Warmup Iteration   6: 6748710.030 ops/s
# Warmup Iteration   7: 6786575.333 ops/s
# Warmup Iteration   8: 6678385.456 ops/s
# Warmup Iteration   9: 6696735.156 ops/s
# Warmup Iteration  10: 6746783.170 ops/s
# Warmup Iteration  11: 6760280.111 ops/s
# Warmup Iteration  12: 6761613.463 ops/s
# Warmup Iteration  13: 6861774.294 ops/s
# Warmup Iteration  14: 6653559.191 ops/s
# Warmup Iteration  15: 6675805.442 ops/s
# Warmup Iteration  16: 6710112.082 ops/s
# Warmup Iteration  17: 6753950.163 ops/s
# Warmup Iteration  18: 6945355.618 ops/s
# Warmup Iteration  19: 6879671.131 ops/s
# Warmup Iteration  20: 6749888.282 ops/s
# Warmup Iteration  21: 6701341.279 ops/s
# Warmup Iteration  22: 6954473.353 ops/s
# Warmup Iteration  23: 6745635.541 ops/s
# Warmup Iteration  24: 6800573.338 ops/s
# Warmup Iteration  25: 6922950.396 ops/s
# Warmup Iteration  26: 6913250.391 ops/s
# Warmup Iteration  27: 6914431.351 ops/s
# Warmup Iteration  28: 6933293.598 ops/s
# Warmup Iteration  29: 6923645.077 ops/s
# Warmup Iteration  30: 6886963.951 ops/s
Iteration   1: 6770757.264 ops/s
Iteration   2: 6934841.552 ops/s
Iteration   3: 6889081.983 ops/s
Iteration   4: 6988985.981 ops/s
Iteration   5: 6975379.056 ops/s
Iteration   6: 6805785.668 ops/s
Iteration   7: 7032237.180 ops/s
Iteration   8: 6902892.857 ops/s
Iteration   9: 6924576.725 ops/s
Iteration  10: 6777878.780 ops/s
Iteration  11: 6747498.627 ops/s
Iteration  12: 6951225.714 ops/s
Iteration  13: 6977329.857 ops/s
Iteration  14: 6590599.535 ops/s
Iteration  15: 6635035.416 ops/s
Iteration  16: 6628493.896 ops/s
Iteration  17: 6947053.257 ops/s
Iteration  18: 6881012.634 ops/s
Iteration  19: 6926041.756 ops/s
Iteration  20: 6649912.332 ops/s
Iteration  21: 6944618.739 ops/s
Iteration  22: 6928712.996 ops/s
Iteration  23: 6856256.229 ops/s
Iteration  24: 6933647.072 ops/s
Iteration  25: 6893532.990 ops/s
Iteration  26: 6858391.898 ops/s
Iteration  27: 6865872.112 ops/s
Iteration  28: 6893549.298 ops/s
Iteration  29: 6918619.029 ops/s
Iteration  30: 7035079.578 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences":
  6868830.000 ±(99.9%) 79355.382 ops/s [Average]
  (min, avg, max) = (6590599.535, 6868830.000, 7035079.578), stdev = 118775.409
  CI (99.9%): [6789474.618, 6948185.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  6868830.000 ± 79355.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 812401.682 ops/s
# Warmup Iteration   2: 814104.442 ops/s
# Warmup Iteration   3: 980296.807 ops/s
# Warmup Iteration   4: 1034148.641 ops/s
# Warmup Iteration   5: 1034533.201 ops/s
# Warmup Iteration   6: 1035258.330 ops/s
# Warmup Iteration   7: 1053868.208 ops/s
# Warmup Iteration   8: 1041403.757 ops/s
# Warmup Iteration   9: 1042506.037 ops/s
# Warmup Iteration  10: 1028198.831 ops/s
# Warmup Iteration  11: 1039121.672 ops/s
# Warmup Iteration  12: 1036205.264 ops/s
# Warmup Iteration  13: 994547.914 ops/s
# Warmup Iteration  14: 921322.280 ops/s
# Warmup Iteration  15: 987342.695 ops/s
# Warmup Iteration  16: 1034896.225 ops/s
# Warmup Iteration  17: 1105776.043 ops/s
# Warmup Iteration  18: 1103989.490 ops/s
# Warmup Iteration  19: 1107141.600 ops/s
# Warmup Iteration  20: 1101551.584 ops/s
# Warmup Iteration  21: 1100587.362 ops/s
# Warmup Iteration  22: 1093397.919 ops/s
# Warmup Iteration  23: 1081670.601 ops/s
# Warmup Iteration  24: 1080954.173 ops/s
# Warmup Iteration  25: 1053598.345 ops/s
# Warmup Iteration  26: 1060977.953 ops/s
# Warmup Iteration  27: 1074102.073 ops/s
# Warmup Iteration  28: 1104590.660 ops/s
# Warmup Iteration  29: 1099506.775 ops/s
# Warmup Iteration  30: 1098532.780 ops/s
Iteration   1: 1108998.804 ops/s
Iteration   2: 1051292.233 ops/s
Iteration   3: 1054016.489 ops/s
Iteration   4: 1107153.701 ops/s
Iteration   5: 1089160.385 ops/s
Iteration   6: 1092477.010 ops/s
Iteration   7: 1104486.661 ops/s
Iteration   8: 1087691.315 ops/s
Iteration   9: 1092373.092 ops/s
Iteration  10: 1088836.412 ops/s
Iteration  11: 1092514.679 ops/s
Iteration  12: 1114860.264 ops/s
Iteration  13: 1102681.368 ops/s
Iteration  14: 1075392.812 ops/s
Iteration  15: 1118306.880 ops/s
Iteration  16: 1120637.521 ops/s
Iteration  17: 1111539.829 ops/s
Iteration  18: 1108249.551 ops/s
Iteration  19: 1109186.185 ops/s
Iteration  20: 1109679.681 ops/s
Iteration  21: 1100278.543 ops/s
Iteration  22: 1104289.296 ops/s
Iteration  23: 1095647.015 ops/s
Iteration  24: 1105208.349 ops/s
Iteration  25: 1064763.395 ops/s
Iteration  26: 1081078.153 ops/s
Iteration  27: 1092625.727 ops/s
Iteration  28: 1049292.061 ops/s
Iteration  29: 1048454.060 ops/s
Iteration  30: 1044969.830 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws":
  1090871.377 ±(99.9%) 15017.943 ops/s [Average]
  (min, avg, max) = (1044969.830, 1090871.377, 1120637.521), stdev = 22478.152
  CI (99.9%): [1075853.434, 1105889.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1090871.377 ± 15017.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315656.667 ops/s
# Warmup Iteration   2: 460048.035 ops/s
# Warmup Iteration   3: 913120.176 ops/s
# Warmup Iteration   4: 898774.505 ops/s
# Warmup Iteration   5: 830086.808 ops/s
# Warmup Iteration   6: 798631.184 ops/s
# Warmup Iteration   7: 868249.931 ops/s
# Warmup Iteration   8: 897731.642 ops/s
# Warmup Iteration   9: 866406.866 ops/s
# Warmup Iteration  10: 908983.602 ops/s
# Warmup Iteration  11: 908592.358 ops/s
# Warmup Iteration  12: 908151.922 ops/s
# Warmup Iteration  13: 903967.701 ops/s
# Warmup Iteration  14: 897158.279 ops/s
# Warmup Iteration  15: 901130.476 ops/s
# Warmup Iteration  16: 902924.682 ops/s
# Warmup Iteration  17: 901507.345 ops/s
# Warmup Iteration  18: 864082.411 ops/s
# Warmup Iteration  19: 886930.242 ops/s
# Warmup Iteration  20: 875185.945 ops/s
# Warmup Iteration  21: 883517.510 ops/s
# Warmup Iteration  22: 904771.772 ops/s
# Warmup Iteration  23: 885573.767 ops/s
# Warmup Iteration  24: 900921.929 ops/s
# Warmup Iteration  25: 903207.718 ops/s
# Warmup Iteration  26: 899791.038 ops/s
# Warmup Iteration  27: 897337.379 ops/s
# Warmup Iteration  28: 908194.900 ops/s
# Warmup Iteration  29: 904188.462 ops/s
# Warmup Iteration  30: 898648.918 ops/s
Iteration   1: 908416.433 ops/s
Iteration   2: 911812.174 ops/s
Iteration   3: 875719.474 ops/s
Iteration   4: 892514.998 ops/s
Iteration   5: 867467.763 ops/s
Iteration   6: 914052.512 ops/s
Iteration   7: 905994.211 ops/s
Iteration   8: 902051.056 ops/s
Iteration   9: 855009.194 ops/s
Iteration  10: 854800.881 ops/s
Iteration  11: 877675.943 ops/s
Iteration  12: 850719.409 ops/s
Iteration  13: 884543.190 ops/s
Iteration  14: 910632.406 ops/s
Iteration  15: 910872.875 ops/s
Iteration  16: 912420.624 ops/s
Iteration  17: 905368.253 ops/s
Iteration  18: 886044.959 ops/s
Iteration  19: 889533.417 ops/s
Iteration  20: 892954.201 ops/s
Iteration  21: 901032.122 ops/s
Iteration  22: 910542.981 ops/s
Iteration  23: 910419.242 ops/s
Iteration  24: 905042.684 ops/s
Iteration  25: 906975.530 ops/s
Iteration  26: 900187.170 ops/s
Iteration  27: 903747.666 ops/s
Iteration  28: 920050.628 ops/s
Iteration  29: 909919.100 ops/s
Iteration  30: 916554.440 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll":
  896435.851 ±(99.9%) 12926.338 ops/s [Average]
  (min, avg, max) = (850719.409, 896435.851, 920050.628), stdev = 19347.536
  CI (99.9%): [883509.513, 909362.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll  thrpt   30  896435.851 ± 12926.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530017.567 ops/s
# Warmup Iteration   2: 828420.683 ops/s
# Warmup Iteration   3: 3718527.923 ops/s
# Warmup Iteration   4: 3156678.669 ops/s
# Warmup Iteration   5: 3626109.000 ops/s
# Warmup Iteration   6: 3778416.907 ops/s
# Warmup Iteration   7: 3744859.233 ops/s
# Warmup Iteration   8: 3790136.423 ops/s
# Warmup Iteration   9: 3813600.580 ops/s
# Warmup Iteration  10: 3746518.921 ops/s
# Warmup Iteration  11: 3740692.514 ops/s
# Warmup Iteration  12: 3785788.804 ops/s
# Warmup Iteration  13: 3731685.666 ops/s
# Warmup Iteration  14: 3776275.847 ops/s
# Warmup Iteration  15: 3737335.981 ops/s
# Warmup Iteration  16: 3766204.797 ops/s
# Warmup Iteration  17: 3729134.426 ops/s
# Warmup Iteration  18: 3733401.185 ops/s
# Warmup Iteration  19: 3746272.175 ops/s
# Warmup Iteration  20: 3764832.189 ops/s
# Warmup Iteration  21: 3763075.391 ops/s
# Warmup Iteration  22: 3746770.326 ops/s
# Warmup Iteration  23: 3715324.860 ops/s
# Warmup Iteration  24: 3613999.874 ops/s
# Warmup Iteration  25: 3613758.973 ops/s
# Warmup Iteration  26: 3679527.102 ops/s
# Warmup Iteration  27: 3717030.961 ops/s
# Warmup Iteration  28: 3667771.825 ops/s
# Warmup Iteration  29: 3703709.606 ops/s
# Warmup Iteration  30: 3772893.666 ops/s
Iteration   1: 3768052.330 ops/s
Iteration   2: 3614342.306 ops/s
Iteration   3: 3610046.478 ops/s
Iteration   4: 3574335.542 ops/s
Iteration   5: 3694319.038 ops/s
Iteration   6: 3721169.657 ops/s
Iteration   7: 3753980.900 ops/s
Iteration   8: 3727108.570 ops/s
Iteration   9: 3685586.538 ops/s
Iteration  10: 3779325.931 ops/s
Iteration  11: 3774209.136 ops/s
Iteration  12: 3724080.798 ops/s
Iteration  13: 3780624.107 ops/s
Iteration  14: 3730364.712 ops/s
Iteration  15: 3812396.730 ops/s
Iteration  16: 3757896.723 ops/s
Iteration  17: 3741935.392 ops/s
Iteration  18: 3746671.619 ops/s
Iteration  19: 3798903.283 ops/s
Iteration  20: 3813614.282 ops/s
Iteration  21: 3751417.803 ops/s
Iteration  22: 3760776.890 ops/s
Iteration  23: 3748492.509 ops/s
Iteration  24: 3767649.488 ops/s
Iteration  25: 3759170.087 ops/s
Iteration  26: 3781190.022 ops/s
Iteration  27: 3626414.407 ops/s
Iteration  28: 3790480.685 ops/s
Iteration  29: 3738688.868 ops/s
Iteration  30: 3778481.237 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll_iterable":
  3737057.536 ±(99.9%) 40396.716 ops/s [Average]
  (min, avg, max) = (3574335.542, 3737057.536, 3813614.282), stdev = 60463.907
  CI (99.9%): [3696660.820, 3777454.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  3737057.536 ± 40396.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6754997.975 ops/s
# Warmup Iteration   2: 11374140.029 ops/s
# Warmup Iteration   3: 13479659.533 ops/s
# Warmup Iteration   4: 13492522.699 ops/s
# Warmup Iteration   5: 13156094.225 ops/s
# Warmup Iteration   6: 13299715.932 ops/s
# Warmup Iteration   7: 13214083.442 ops/s
# Warmup Iteration   8: 13429973.381 ops/s
# Warmup Iteration   9: 13226637.564 ops/s
# Warmup Iteration  10: 13293481.608 ops/s
# Warmup Iteration  11: 12925869.865 ops/s
# Warmup Iteration  12: 13160599.640 ops/s
# Warmup Iteration  13: 13430563.932 ops/s
# Warmup Iteration  14: 13364195.024 ops/s
# Warmup Iteration  15: 13279856.117 ops/s
# Warmup Iteration  16: 13271537.853 ops/s
# Warmup Iteration  17: 13255853.504 ops/s
# Warmup Iteration  18: 13133312.481 ops/s
# Warmup Iteration  19: 13151135.570 ops/s
# Warmup Iteration  20: 13144418.848 ops/s
# Warmup Iteration  21: 13137311.212 ops/s
# Warmup Iteration  22: 13044439.917 ops/s
# Warmup Iteration  23: 13103747.691 ops/s
# Warmup Iteration  24: 13326132.160 ops/s
# Warmup Iteration  25: 13302712.822 ops/s
# Warmup Iteration  26: 13417156.962 ops/s
# Warmup Iteration  27: 13069073.185 ops/s
# Warmup Iteration  28: 13302023.798 ops/s
# Warmup Iteration  29: 13136634.586 ops/s
# Warmup Iteration  30: 13255758.338 ops/s
Iteration   1: 13243322.087 ops/s
Iteration   2: 13130452.713 ops/s
Iteration   3: 13140139.895 ops/s
Iteration   4: 13246695.574 ops/s
Iteration   5: 13111933.957 ops/s
Iteration   6: 13479614.177 ops/s
Iteration   7: 13288998.536 ops/s
Iteration   8: 13162877.478 ops/s
Iteration   9: 13291788.792 ops/s
Iteration  10: 13095496.484 ops/s
Iteration  11: 13107043.977 ops/s
Iteration  12: 13286491.859 ops/s
Iteration  13: 13323823.839 ops/s
Iteration  14: 13204734.185 ops/s
Iteration  15: 13151642.855 ops/s
Iteration  16: 13465507.035 ops/s
Iteration  17: 13360911.678 ops/s
Iteration  18: 13289811.681 ops/s
Iteration  19: 13025520.201 ops/s
Iteration  20: 13014497.722 ops/s
Iteration  21: 13029112.794 ops/s
Iteration  22: 13409090.687 ops/s
Iteration  23: 13110755.892 ops/s
Iteration  24: 13152481.327 ops/s
Iteration  25: 13170473.356 ops/s
Iteration  26: 13409542.161 ops/s
Iteration  27: 13429114.883 ops/s
Iteration  28: 13540842.296 ops/s
Iteration  29: 13194800.070 ops/s
Iteration  30: 13459531.632 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_select":
  13244234.994 ±(99.9%) 98899.406 ops/s [Average]
  (min, avg, max) = (13014497.722, 13244234.994, 13540842.296), stdev = 148027.986
  CI (99.9%): [13145335.588, 13343134.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_select  thrpt   30  13244234.994 ± 98899.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16544237.086 ops/s
# Warmup Iteration   2: 26715419.994 ops/s
# Warmup Iteration   3: 32516010.644 ops/s
# Warmup Iteration   4: 32340196.666 ops/s
# Warmup Iteration   5: 32721595.615 ops/s
# Warmup Iteration   6: 32826358.793 ops/s
# Warmup Iteration   7: 33075601.641 ops/s
# Warmup Iteration   8: 32536688.665 ops/s
# Warmup Iteration   9: 32905758.765 ops/s
# Warmup Iteration  10: 32721970.864 ops/s
# Warmup Iteration  11: 33479439.471 ops/s
# Warmup Iteration  12: 33215321.855 ops/s
# Warmup Iteration  13: 33206762.498 ops/s
# Warmup Iteration  14: 33242646.937 ops/s
# Warmup Iteration  15: 33493972.027 ops/s
# Warmup Iteration  16: 33083428.419 ops/s
# Warmup Iteration  17: 32888338.139 ops/s
# Warmup Iteration  18: 33142704.135 ops/s
# Warmup Iteration  19: 32747291.005 ops/s
# Warmup Iteration  20: 32500011.590 ops/s
# Warmup Iteration  21: 32508237.091 ops/s
# Warmup Iteration  22: 32798975.050 ops/s
# Warmup Iteration  23: 32485257.942 ops/s
# Warmup Iteration  24: 32464384.498 ops/s
# Warmup Iteration  25: 32423876.661 ops/s
# Warmup Iteration  26: 32827790.322 ops/s
# Warmup Iteration  27: 33267399.654 ops/s
# Warmup Iteration  28: 33314453.729 ops/s
# Warmup Iteration  29: 32744113.768 ops/s
# Warmup Iteration  30: 32377570.119 ops/s
Iteration   1: 33152639.231 ops/s
Iteration   2: 32837240.622 ops/s
Iteration   3: 32787519.117 ops/s
Iteration   4: 32896821.959 ops/s
Iteration   5: 33238187.427 ops/s
Iteration   6: 33219746.169 ops/s
Iteration   7: 33264253.391 ops/s
Iteration   8: 33620306.684 ops/s
Iteration   9: 33181295.770 ops/s
Iteration  10: 33561399.339 ops/s
Iteration  11: 33346775.863 ops/s
Iteration  12: 31975745.887 ops/s
Iteration  13: 32844014.372 ops/s
Iteration  14: 32104092.373 ops/s
Iteration  15: 32437428.439 ops/s
Iteration  16: 31986945.255 ops/s
Iteration  17: 31832243.055 ops/s
Iteration  18: 32678960.352 ops/s
Iteration  19: 32563290.104 ops/s
Iteration  20: 31970548.707 ops/s
Iteration  21: 32273021.302 ops/s
Iteration  22: 33061010.935 ops/s
Iteration  23: 33554548.332 ops/s
Iteration  24: 33578824.720 ops/s
Iteration  25: 32405976.583 ops/s
Iteration  26: 33562910.560 ops/s
Iteration  27: 31912677.693 ops/s
Iteration  28: 32250114.644 ops/s
Iteration  29: 32172147.431 ops/s
Iteration  30: 33246079.435 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_selectUnique":
  32783892.192 ±(99.9%) 392397.834 ops/s [Average]
  (min, avg, max) = (31832243.055, 32783892.192, 33620306.684), stdev = 587322.650
  CI (99.9%): [32391494.357, 33176290.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_selectUnique  thrpt   30  32783892.192 ± 392397.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5081838.418 ops/s
# Warmup Iteration   2: 7922671.403 ops/s
# Warmup Iteration   3: 9571052.448 ops/s
# Warmup Iteration   4: 9486563.732 ops/s
# Warmup Iteration   5: 9494531.291 ops/s
# Warmup Iteration   6: 9575576.185 ops/s
# Warmup Iteration   7: 9373999.466 ops/s
# Warmup Iteration   8: 9414009.514 ops/s
# Warmup Iteration   9: 9342984.471 ops/s
# Warmup Iteration  10: 9473992.200 ops/s
# Warmup Iteration  11: 9287749.901 ops/s
# Warmup Iteration  12: 9401742.461 ops/s
# Warmup Iteration  13: 9598383.102 ops/s
# Warmup Iteration  14: 9488972.351 ops/s
# Warmup Iteration  15: 9542565.273 ops/s
# Warmup Iteration  16: 9427433.829 ops/s
# Warmup Iteration  17: 9490080.693 ops/s
# Warmup Iteration  18: 9354021.776 ops/s
# Warmup Iteration  19: 9468859.552 ops/s
# Warmup Iteration  20: 9488172.947 ops/s
# Warmup Iteration  21: 9515879.308 ops/s
# Warmup Iteration  22: 9620046.568 ops/s
# Warmup Iteration  23: 9465468.851 ops/s
# Warmup Iteration  24: 9392615.838 ops/s
# Warmup Iteration  25: 9385075.869 ops/s
# Warmup Iteration  26: 9511504.064 ops/s
# Warmup Iteration  27: 9660509.761 ops/s
# Warmup Iteration  28: 9606938.796 ops/s
# Warmup Iteration  29: 9560608.138 ops/s
# Warmup Iteration  30: 9404195.033 ops/s
Iteration   1: 9472435.791 ops/s
Iteration   2: 9551192.652 ops/s
Iteration   3: 9401625.348 ops/s
Iteration   4: 9267131.147 ops/s
Iteration   5: 9443391.019 ops/s
Iteration   6: 9283900.631 ops/s
Iteration   7: 9430846.049 ops/s
Iteration   8: 9387048.227 ops/s
Iteration   9: 9626609.852 ops/s
Iteration  10: 9375225.018 ops/s
Iteration  11: 9351926.990 ops/s
Iteration  12: 9494808.269 ops/s
Iteration  13: 9449569.427 ops/s
Iteration  14: 9756892.296 ops/s
Iteration  15: 9523752.954 ops/s
Iteration  16: 9655775.346 ops/s
Iteration  17: 9610689.549 ops/s
Iteration  18: 9587801.185 ops/s
Iteration  19: 9465465.383 ops/s
Iteration  20: 9229093.341 ops/s
Iteration  21: 9324970.296 ops/s
Iteration  22: 9535345.578 ops/s
Iteration  23: 9487972.138 ops/s
Iteration  24: 9637048.262 ops/s
Iteration  25: 9700577.943 ops/s
Iteration  26: 9539490.367 ops/s
Iteration  27: 9245886.672 ops/s
Iteration  28: 9172693.952 ops/s
Iteration  29: 9365032.581 ops/s
Iteration  30: 9624015.888 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_size":
  9466607.138 ±(99.9%) 99302.103 ops/s [Average]
  (min, avg, max) = (9172693.952, 9466607.138, 9756892.296), stdev = 148630.725
  CI (99.9%): [9367305.035, 9565909.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_size  thrpt   30  9466607.138 ± 99302.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12933427.009 ops/s
# Warmup Iteration   2: 20211182.069 ops/s
# Warmup Iteration   3: 23386710.448 ops/s
# Warmup Iteration   4: 24006472.447 ops/s
# Warmup Iteration   5: 23944143.889 ops/s
# Warmup Iteration   6: 24266836.092 ops/s
# Warmup Iteration   7: 23875940.730 ops/s
# Warmup Iteration   8: 23780929.405 ops/s
# Warmup Iteration   9: 23750435.496 ops/s
# Warmup Iteration  10: 23680754.101 ops/s
# Warmup Iteration  11: 23722998.885 ops/s
# Warmup Iteration  12: 23356909.548 ops/s
# Warmup Iteration  13: 24301395.947 ops/s
# Warmup Iteration  14: 23609233.335 ops/s
# Warmup Iteration  15: 23879880.300 ops/s
# Warmup Iteration  16: 23556846.819 ops/s
# Warmup Iteration  17: 23650523.640 ops/s
# Warmup Iteration  18: 23804890.667 ops/s
# Warmup Iteration  19: 23686134.653 ops/s
# Warmup Iteration  20: 23764575.901 ops/s
# Warmup Iteration  21: 23515409.308 ops/s
# Warmup Iteration  22: 23026764.146 ops/s
# Warmup Iteration  23: 23090838.183 ops/s
# Warmup Iteration  24: 23738338.964 ops/s
# Warmup Iteration  25: 23901684.498 ops/s
# Warmup Iteration  26: 23553295.657 ops/s
# Warmup Iteration  27: 23576926.493 ops/s
# Warmup Iteration  28: 23894313.516 ops/s
# Warmup Iteration  29: 23627806.041 ops/s
# Warmup Iteration  30: 23897181.433 ops/s
Iteration   1: 24005437.222 ops/s
Iteration   2: 23626103.982 ops/s
Iteration   3: 23302817.425 ops/s
Iteration   4: 23900405.754 ops/s
Iteration   5: 23326160.407 ops/s
Iteration   6: 23967478.012 ops/s
Iteration   7: 24162812.360 ops/s
Iteration   8: 23736966.980 ops/s
Iteration   9: 23983522.780 ops/s
Iteration  10: 24176176.262 ops/s
Iteration  11: 23977574.737 ops/s
Iteration  12: 24046180.436 ops/s
Iteration  13: 24081584.696 ops/s
Iteration  14: 22841344.305 ops/s
Iteration  15: 23399369.720 ops/s
Iteration  16: 23388105.351 ops/s
Iteration  17: 24061394.444 ops/s
Iteration  18: 24109567.107 ops/s
Iteration  19: 23749383.196 ops/s
Iteration  20: 23721695.414 ops/s
Iteration  21: 23466416.256 ops/s
Iteration  22: 23274103.398 ops/s
Iteration  23: 23493625.995 ops/s
Iteration  24: 23421846.258 ops/s
Iteration  25: 23907515.177 ops/s
Iteration  26: 23329390.053 ops/s
Iteration  27: 24149092.200 ops/s
Iteration  28: 23978129.642 ops/s
Iteration  29: 23690239.146 ops/s
Iteration  30: 23995501.321 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_sizeDistinct":
  23742331.335 ±(99.9%) 230387.371 ops/s [Average]
  (min, avg, max) = (22841344.305, 23742331.335, 24176176.262), stdev = 344832.998
  CI (99.9%): [23511943.963, 23972718.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  23742331.335 ± 230387.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12047.611 ops/s
# Warmup Iteration   2: 14137.999 ops/s
# Warmup Iteration   3: 19383.136 ops/s
# Warmup Iteration   4: 19414.464 ops/s
# Warmup Iteration   5: 20468.323 ops/s
# Warmup Iteration   6: 20287.427 ops/s
# Warmup Iteration   7: 20337.543 ops/s
# Warmup Iteration   8: 20386.373 ops/s
# Warmup Iteration   9: 20408.163 ops/s
# Warmup Iteration  10: 17216.795 ops/s
# Warmup Iteration  11: 20232.172 ops/s
# Warmup Iteration  12: 20216.334 ops/s
# Warmup Iteration  13: 20363.224 ops/s
# Warmup Iteration  14: 20024.766 ops/s
# Warmup Iteration  15: 20136.489 ops/s
# Warmup Iteration  16: 20173.548 ops/s
# Warmup Iteration  17: 20244.858 ops/s
# Warmup Iteration  18: 20002.394 ops/s
# Warmup Iteration  19: 20545.944 ops/s
# Warmup Iteration  20: 19818.546 ops/s
# Warmup Iteration  21: 20343.694 ops/s
# Warmup Iteration  22: 20290.094 ops/s
# Warmup Iteration  23: 20467.396 ops/s
# Warmup Iteration  24: 20600.005 ops/s
# Warmup Iteration  25: 20521.369 ops/s
# Warmup Iteration  26: 20405.479 ops/s
# Warmup Iteration  27: 20394.712 ops/s
# Warmup Iteration  28: 20515.838 ops/s
# Warmup Iteration  29: 20481.003 ops/s
# Warmup Iteration  30: 20447.642 ops/s
Iteration   1: 20463.875 ops/s
Iteration   2: 20239.493 ops/s
Iteration   3: 19973.571 ops/s
Iteration   4: 19888.135 ops/s
Iteration   5: 19930.905 ops/s
Iteration   6: 20202.292 ops/s
Iteration   7: 20588.068 ops/s
Iteration   8: 20581.933 ops/s
Iteration   9: 20583.310 ops/s
Iteration  10: 20708.157 ops/s
Iteration  11: 20583.053 ops/s
Iteration  12: 20501.728 ops/s
Iteration  13: 20409.394 ops/s
Iteration  14: 20388.998 ops/s
Iteration  15: 19630.025 ops/s
Iteration  16: 19825.463 ops/s
Iteration  17: 19211.530 ops/s
Iteration  18: 19578.376 ops/s
Iteration  19: 19318.945 ops/s
Iteration  20: 19816.908 ops/s
Iteration  21: 19984.401 ops/s
Iteration  22: 20430.497 ops/s
Iteration  23: 20662.569 ops/s
Iteration  24: 20689.232 ops/s
Iteration  25: 20576.911 ops/s
Iteration  26: 20534.710 ops/s
Iteration  27: 20500.028 ops/s
Iteration  28: 20518.564 ops/s
Iteration  29: 20400.720 ops/s
Iteration  30: 20372.928 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testEquals":
  20236.491 ±(99.9%) 279.946 ops/s [Average]
  (min, avg, max) = (19211.530, 20236.491, 20708.157), stdev = 419.010
  CI (99.9%): [19956.545, 20516.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score     Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_testEquals  thrpt   30  20236.491 ± 279.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508208.584 ops/s
# Warmup Iteration   2: 1055080.340 ops/s
# Warmup Iteration   3: 1580371.332 ops/s
# Warmup Iteration   4: 1375780.920 ops/s
# Warmup Iteration   5: 1483721.202 ops/s
# Warmup Iteration   6: 1591128.737 ops/s
# Warmup Iteration   7: 1620263.612 ops/s
# Warmup Iteration   8: 1638105.874 ops/s
# Warmup Iteration   9: 1586659.683 ops/s
# Warmup Iteration  10: 1611833.825 ops/s
# Warmup Iteration  11: 1653127.690 ops/s
# Warmup Iteration  12: 1667807.688 ops/s
# Warmup Iteration  13: 1650202.876 ops/s
# Warmup Iteration  14: 1616458.664 ops/s
# Warmup Iteration  15: 1663890.042 ops/s
# Warmup Iteration  16: 1636650.247 ops/s
# Warmup Iteration  17: 1628698.584 ops/s
# Warmup Iteration  18: 1649528.567 ops/s
# Warmup Iteration  19: 1643303.403 ops/s
# Warmup Iteration  20: 1647221.710 ops/s
# Warmup Iteration  21: 1622711.909 ops/s
# Warmup Iteration  22: 1630132.315 ops/s
# Warmup Iteration  23: 1614516.338 ops/s
# Warmup Iteration  24: 1599972.598 ops/s
# Warmup Iteration  25: 1604841.644 ops/s
# Warmup Iteration  26: 1631829.486 ops/s
# Warmup Iteration  27: 1624756.983 ops/s
# Warmup Iteration  28: 1657176.742 ops/s
# Warmup Iteration  29: 1656914.544 ops/s
# Warmup Iteration  30: 1627981.462 ops/s
Iteration   1: 1647108.171 ops/s
Iteration   2: 1662013.972 ops/s
Iteration   3: 1631536.349 ops/s
Iteration   4: 1643467.461 ops/s
Iteration   5: 1654119.289 ops/s
Iteration   6: 1650887.566 ops/s
Iteration   7: 1640128.388 ops/s
Iteration   8: 1651584.906 ops/s
Iteration   9: 1637231.144 ops/s
Iteration  10: 1649388.071 ops/s
Iteration  11: 1660817.928 ops/s
Iteration  12: 1651786.561 ops/s
Iteration  13: 1642255.342 ops/s
Iteration  14: 1630266.495 ops/s
Iteration  15: 1653563.092 ops/s
Iteration  16: 1651358.315 ops/s
Iteration  17: 1654125.931 ops/s
Iteration  18: 1657080.808 ops/s
Iteration  19: 1641593.460 ops/s
Iteration  20: 1633836.267 ops/s
Iteration  21: 1617531.446 ops/s
Iteration  22: 1627609.413 ops/s
Iteration  23: 1621317.163 ops/s
Iteration  24: 1633474.759 ops/s
Iteration  25: 1661927.334 ops/s
Iteration  26: 1663961.646 ops/s
Iteration  27: 1644411.194 ops/s
Iteration  28: 1635259.645 ops/s
Iteration  29: 1630134.305 ops/s
Iteration  30: 1651938.216 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testHashCode":
  1644390.488 ±(99.9%) 8315.256 ops/s [Average]
  (min, avg, max) = (1617531.446, 1644390.488, 1663961.646), stdev = 12445.885
  CI (99.9%): [1636075.232, 1652705.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_testHashCode  thrpt   30  1644390.488 ± 8315.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1885542.083 ops/s
# Warmup Iteration   2: 3917936.275 ops/s
# Warmup Iteration   3: 3303480.742 ops/s
# Warmup Iteration   4: 3859843.953 ops/s
# Warmup Iteration   5: 3912594.030 ops/s
# Warmup Iteration   6: 3798241.504 ops/s
# Warmup Iteration   7: 3939565.435 ops/s
# Warmup Iteration   8: 3926475.834 ops/s
# Warmup Iteration   9: 3911509.760 ops/s
# Warmup Iteration  10: 3889094.162 ops/s
# Warmup Iteration  11: 3886163.134 ops/s
# Warmup Iteration  12: 3738564.775 ops/s
# Warmup Iteration  13: 3913900.123 ops/s
# Warmup Iteration  14: 3905208.463 ops/s
# Warmup Iteration  15: 3848079.068 ops/s
# Warmup Iteration  16: 3808680.206 ops/s
# Warmup Iteration  17: 3899065.810 ops/s
# Warmup Iteration  18: 3884701.910 ops/s
# Warmup Iteration  19: 3910812.129 ops/s
# Warmup Iteration  20: 3944991.119 ops/s
# Warmup Iteration  21: 3904883.364 ops/s
# Warmup Iteration  22: 3915521.356 ops/s
# Warmup Iteration  23: 3788493.661 ops/s
# Warmup Iteration  24: 3824527.848 ops/s
# Warmup Iteration  25: 3930370.868 ops/s
# Warmup Iteration  26: 3922506.335 ops/s
# Warmup Iteration  27: 3943402.344 ops/s
# Warmup Iteration  28: 3886382.730 ops/s
# Warmup Iteration  29: 3756591.160 ops/s
# Warmup Iteration  30: 3797802.052 ops/s
Iteration   1: 3806730.119 ops/s
Iteration   2: 3972754.269 ops/s
Iteration   3: 3993272.072 ops/s
Iteration   4: 3681436.691 ops/s
Iteration   5: 3934713.088 ops/s
Iteration   6: 3907202.517 ops/s
Iteration   7: 3971078.353 ops/s
Iteration   8: 3961893.952 ops/s
Iteration   9: 3946256.200 ops/s
Iteration  10: 3978109.381 ops/s
Iteration  11: 3953062.089 ops/s
Iteration  12: 3958717.782 ops/s
Iteration  13: 3942534.936 ops/s
Iteration  14: 3906401.179 ops/s
Iteration  15: 3869658.374 ops/s
Iteration  16: 3888624.347 ops/s
Iteration  17: 3926418.613 ops/s
Iteration  18: 3872303.829 ops/s
Iteration  19: 3777117.120 ops/s
Iteration  20: 3947995.948 ops/s
Iteration  21: 3944967.945 ops/s
Iteration  22: 3959553.116 ops/s
Iteration  23: 3798588.375 ops/s
Iteration  24: 3885236.399 ops/s
Iteration  25: 3835336.220 ops/s
Iteration  26: 3806442.545 ops/s
Iteration  27: 3889041.387 ops/s
Iteration  28: 3799365.462 ops/s
Iteration  29: 3894264.681 ops/s
Iteration  30: 3934632.595 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_testToString":
  3898123.653 ±(99.9%) 49198.562 ops/s [Average]
  (min, avg, max) = (3681436.691, 3898123.653, 3993272.072), stdev = 73638.097
  CI (99.9%): [3848925.091, 3947322.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_testToString  thrpt   30  3898123.653 ± 49198.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4710695.345 ops/s
# Warmup Iteration   2: 10440994.806 ops/s
# Warmup Iteration   3: 8439245.189 ops/s
# Warmup Iteration   4: 10680164.483 ops/s
# Warmup Iteration   5: 10473861.410 ops/s
# Warmup Iteration   6: 10515460.706 ops/s
# Warmup Iteration   7: 10360453.115 ops/s
# Warmup Iteration   8: 10065428.571 ops/s
# Warmup Iteration   9: 10485217.614 ops/s
# Warmup Iteration  10: 10597110.332 ops/s
# Warmup Iteration  11: 10533986.457 ops/s
# Warmup Iteration  12: 10547569.106 ops/s
# Warmup Iteration  13: 10628908.920 ops/s
# Warmup Iteration  14: 10455027.558 ops/s
# Warmup Iteration  15: 10571847.845 ops/s
# Warmup Iteration  16: 10613635.029 ops/s
# Warmup Iteration  17: 10728447.110 ops/s
# Warmup Iteration  18: 10323559.755 ops/s
# Warmup Iteration  19: 10359476.289 ops/s
# Warmup Iteration  20: 10284873.882 ops/s
# Warmup Iteration  21: 10393324.361 ops/s
# Warmup Iteration  22: 10610703.830 ops/s
# Warmup Iteration  23: 10561494.587 ops/s
# Warmup Iteration  24: 10290559.936 ops/s
# Warmup Iteration  25: 10511324.634 ops/s
# Warmup Iteration  26: 10550671.961 ops/s
# Warmup Iteration  27: 10343588.421 ops/s
# Warmup Iteration  28: 10376644.405 ops/s
# Warmup Iteration  29: 10328253.158 ops/s
# Warmup Iteration  30: 10430926.608 ops/s
Iteration   1: 10465531.499 ops/s
Iteration   2: 10512553.290 ops/s
Iteration   3: 10631688.409 ops/s
Iteration   4: 10348094.588 ops/s
Iteration   5: 10306383.992 ops/s
Iteration   6: 10500683.191 ops/s
Iteration   7: 10159633.115 ops/s
Iteration   8: 10670955.924 ops/s
Iteration   9: 10746502.026 ops/s
Iteration  10: 10711561.255 ops/s
Iteration  11: 10470094.853 ops/s
Iteration  12: 10350078.484 ops/s
Iteration  13: 10284929.663 ops/s
Iteration  14: 10570555.407 ops/s
Iteration  15: 10639641.134 ops/s
Iteration  16: 10511173.352 ops/s
Iteration  17: 10291262.414 ops/s
Iteration  18: 10194807.572 ops/s
Iteration  19: 10275016.646 ops/s
Iteration  20: 10328398.175 ops/s
Iteration  21: 10322933.212 ops/s
Iteration  22: 10629423.229 ops/s
Iteration  23: 10747888.892 ops/s
Iteration  24: 10598798.398 ops/s
Iteration  25: 10531742.616 ops/s
Iteration  26: 10536876.563 ops/s
Iteration  27: 10677804.594 ops/s
Iteration  28: 10604025.469 ops/s
Iteration  29: 10621168.917 ops/s
Iteration  30: 10334256.375 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toArray":
  10485815.442 ±(99.9%) 113781.445 ops/s [Average]
  (min, avg, max) = (10159633.115, 10485815.442, 10747888.892), stdev = 170302.724
  CI (99.9%): [10372033.997, 10599596.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_toArray  thrpt   30  10485815.442 ± 113781.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10841691.852 ops/s
# Warmup Iteration   2: 17402147.071 ops/s
# Warmup Iteration   3: 20268268.537 ops/s
# Warmup Iteration   4: 19785944.012 ops/s
# Warmup Iteration   5: 19906889.868 ops/s
# Warmup Iteration   6: 20399620.854 ops/s
# Warmup Iteration   7: 20724432.859 ops/s
# Warmup Iteration   8: 20353901.364 ops/s
# Warmup Iteration   9: 20482382.890 ops/s
# Warmup Iteration  10: 20265987.209 ops/s
# Warmup Iteration  11: 20342366.143 ops/s
# Warmup Iteration  12: 20390239.533 ops/s
# Warmup Iteration  13: 20083884.599 ops/s
# Warmup Iteration  14: 19945312.944 ops/s
# Warmup Iteration  15: 19837201.666 ops/s
# Warmup Iteration  16: 20735064.117 ops/s
# Warmup Iteration  17: 20363207.913 ops/s
# Warmup Iteration  18: 20223225.912 ops/s
# Warmup Iteration  19: 20435844.465 ops/s
# Warmup Iteration  20: 20538883.301 ops/s
# Warmup Iteration  21: 20352137.107 ops/s
# Warmup Iteration  22: 20557220.361 ops/s
# Warmup Iteration  23: 20094542.818 ops/s
# Warmup Iteration  24: 19874529.873 ops/s
# Warmup Iteration  25: 20204463.552 ops/s
# Warmup Iteration  26: 20430586.036 ops/s
# Warmup Iteration  27: 20199283.114 ops/s
# Warmup Iteration  28: 20421921.011 ops/s
# Warmup Iteration  29: 20386496.685 ops/s
# Warmup Iteration  30: 20058676.234 ops/s
Iteration   1: 20227216.244 ops/s
Iteration   2: 20036737.301 ops/s
Iteration   3: 20381320.044 ops/s
Iteration   4: 20178589.631 ops/s
Iteration   5: 20749313.671 ops/s
Iteration   6: 20612928.648 ops/s
Iteration   7: 20175386.905 ops/s
Iteration   8: 20654883.724 ops/s
Iteration   9: 20470858.554 ops/s
Iteration  10: 20013571.307 ops/s
Iteration  11: 20594823.466 ops/s
Iteration  12: 20544760.492 ops/s
Iteration  13: 20423256.019 ops/s
Iteration  14: 20488952.283 ops/s
Iteration  15: 20272751.985 ops/s
Iteration  16: 19557493.558 ops/s
Iteration  17: 20160768.808 ops/s
Iteration  18: 20528209.602 ops/s
Iteration  19: 20532691.494 ops/s
Iteration  20: 20484494.358 ops/s
Iteration  21: 20365992.760 ops/s
Iteration  22: 20278096.180 ops/s
Iteration  23: 20491619.848 ops/s
Iteration  24: 20377210.944 ops/s
Iteration  25: 20540971.363 ops/s
Iteration  26: 20430102.275 ops/s
Iteration  27: 20446511.675 ops/s
Iteration  28: 20030935.286 ops/s
Iteration  29: 20313672.129 ops/s
Iteration  30: 20300328.596 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toBag":
  20355481.638 ±(99.9%) 160908.199 ops/s [Average]
  (min, avg, max) = (19557493.558, 20355481.638, 20749313.671), stdev = 240839.836
  CI (99.9%): [20194573.439, 20516389.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_toBag  thrpt   30  20355481.638 ± 160908.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1786588.923 ops/s
# Warmup Iteration   2: 3985758.931 ops/s
# Warmup Iteration   3: 4403482.425 ops/s
# Warmup Iteration   4: 3684482.054 ops/s
# Warmup Iteration   5: 4379780.066 ops/s
# Warmup Iteration   6: 4410662.717 ops/s
# Warmup Iteration   7: 4423314.744 ops/s
# Warmup Iteration   8: 4376586.454 ops/s
# Warmup Iteration   9: 4422575.071 ops/s
# Warmup Iteration  10: 4343614.608 ops/s
# Warmup Iteration  11: 4471146.022 ops/s
# Warmup Iteration  12: 4473110.305 ops/s
# Warmup Iteration  13: 4353867.184 ops/s
# Warmup Iteration  14: 4314095.696 ops/s
# Warmup Iteration  15: 4217579.869 ops/s
# Warmup Iteration  16: 4361198.797 ops/s
# Warmup Iteration  17: 4323232.151 ops/s
# Warmup Iteration  18: 4425778.908 ops/s
# Warmup Iteration  19: 4493974.166 ops/s
# Warmup Iteration  20: 4489596.129 ops/s
# Warmup Iteration  21: 4435163.724 ops/s
# Warmup Iteration  22: 4225767.827 ops/s
# Warmup Iteration  23: 4225176.967 ops/s
# Warmup Iteration  24: 4262813.259 ops/s
# Warmup Iteration  25: 4416480.001 ops/s
# Warmup Iteration  26: 4408678.476 ops/s
# Warmup Iteration  27: 4314391.459 ops/s
# Warmup Iteration  28: 4451006.606 ops/s
# Warmup Iteration  29: 4389639.148 ops/s
# Warmup Iteration  30: 4381117.789 ops/s
Iteration   1: 4466713.995 ops/s
Iteration   2: 4457775.806 ops/s
Iteration   3: 4253750.881 ops/s
Iteration   4: 4420739.105 ops/s
Iteration   5: 4264418.137 ops/s
Iteration   6: 4272709.282 ops/s
Iteration   7: 4387460.263 ops/s
Iteration   8: 4328831.953 ops/s
Iteration   9: 4236658.361 ops/s
Iteration  10: 4301363.597 ops/s
Iteration  11: 4301964.057 ops/s
Iteration  12: 4361534.214 ops/s
Iteration  13: 4276147.291 ops/s
Iteration  14: 4467466.688 ops/s
Iteration  15: 4476035.373 ops/s
Iteration  16: 4456934.593 ops/s
Iteration  17: 4467402.285 ops/s
Iteration  18: 4419683.374 ops/s
Iteration  19: 4389905.231 ops/s
Iteration  20: 4425828.169 ops/s
Iteration  21: 4444686.205 ops/s
Iteration  22: 4446766.388 ops/s
Iteration  23: 4419580.939 ops/s
Iteration  24: 4463807.022 ops/s
Iteration  25: 4429896.539 ops/s
Iteration  26: 4446249.001 ops/s
Iteration  27: 4431021.228 ops/s
Iteration  28: 4467428.529 ops/s
Iteration  29: 4454165.119 ops/s
Iteration  30: 4387832.716 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toImmutable":
  4394158.545 ±(99.9%) 51268.884 ops/s [Average]
  (min, avg, max) = (4236658.361, 4394158.545, 4476035.373), stdev = 76736.857
  CI (99.9%): [4342889.661, 4445427.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_toImmutable  thrpt   30  4394158.545 ± 51268.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1392125.517 ops/s
# Warmup Iteration   2: 3622667.126 ops/s
# Warmup Iteration   3: 3104558.563 ops/s
# Warmup Iteration   4: 3759542.006 ops/s
# Warmup Iteration   5: 3821592.105 ops/s
# Warmup Iteration   6: 3794798.511 ops/s
# Warmup Iteration   7: 3755387.921 ops/s
# Warmup Iteration   8: 3761264.525 ops/s
# Warmup Iteration   9: 3829742.137 ops/s
# Warmup Iteration  10: 3758853.807 ops/s
# Warmup Iteration  11: 3719492.736 ops/s
# Warmup Iteration  12: 3769387.400 ops/s
# Warmup Iteration  13: 3709775.500 ops/s
# Warmup Iteration  14: 3720174.509 ops/s
# Warmup Iteration  15: 3759813.135 ops/s
# Warmup Iteration  16: 3822453.279 ops/s
# Warmup Iteration  17: 3688746.506 ops/s
# Warmup Iteration  18: 3823593.227 ops/s
# Warmup Iteration  19: 3822703.741 ops/s
# Warmup Iteration  20: 3812080.503 ops/s
# Warmup Iteration  21: 3813155.499 ops/s
# Warmup Iteration  22: 3822925.561 ops/s
# Warmup Iteration  23: 3818424.510 ops/s
# Warmup Iteration  24: 3747350.363 ops/s
# Warmup Iteration  25: 3815344.293 ops/s
# Warmup Iteration  26: 3782223.655 ops/s
# Warmup Iteration  27: 3789227.892 ops/s
# Warmup Iteration  28: 3785389.481 ops/s
# Warmup Iteration  29: 3761360.429 ops/s
# Warmup Iteration  30: 3700970.758 ops/s
Iteration   1: 3805497.679 ops/s
Iteration   2: 3817658.088 ops/s
Iteration   3: 3773530.171 ops/s
Iteration   4: 3792818.966 ops/s
Iteration   5: 3736052.560 ops/s
Iteration   6: 3840802.062 ops/s
Iteration   7: 3788408.901 ops/s
Iteration   8: 3803202.104 ops/s
Iteration   9: 3812080.115 ops/s
Iteration  10: 3870593.028 ops/s
Iteration  11: 3796207.340 ops/s
Iteration  12: 3726726.064 ops/s
Iteration  13: 3820417.942 ops/s
Iteration  14: 3761606.929 ops/s
Iteration  15: 3823569.576 ops/s
Iteration  16: 3864485.738 ops/s
Iteration  17: 3857552.651 ops/s
Iteration  18: 3768593.521 ops/s
Iteration  19: 3707003.863 ops/s
Iteration  20: 3771418.690 ops/s
Iteration  21: 3773028.613 ops/s
Iteration  22: 3825302.616 ops/s
Iteration  23: 3803630.553 ops/s
Iteration  24: 3725066.042 ops/s
Iteration  25: 3789503.135 ops/s
Iteration  26: 3778150.624 ops/s
Iteration  27: 3766792.849 ops/s
Iteration  28: 3740313.914 ops/s
Iteration  29: 3861988.111 ops/s
Iteration  30: 3814502.660 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toList":
  3793883.503 ±(99.9%) 28576.448 ops/s [Average]
  (min, avg, max) = (3707003.863, 3793883.503, 3870593.028), stdev = 42771.885
  CI (99.9%): [3765307.055, 3822459.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_toList  thrpt   30  3793883.503 ± 28576.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3748872.936 ops/s
# Warmup Iteration   2: 9344599.762 ops/s
# Warmup Iteration   3: 8818268.591 ops/s
# Warmup Iteration   4: 8271304.197 ops/s
# Warmup Iteration   5: 9383009.383 ops/s
# Warmup Iteration   6: 9415003.900 ops/s
# Warmup Iteration   7: 9334510.792 ops/s
# Warmup Iteration   8: 9397237.996 ops/s
# Warmup Iteration   9: 9396124.802 ops/s
# Warmup Iteration  10: 9458742.376 ops/s
# Warmup Iteration  11: 9375778.683 ops/s
# Warmup Iteration  12: 9027465.330 ops/s
# Warmup Iteration  13: 9166500.228 ops/s
# Warmup Iteration  14: 9100357.085 ops/s
# Warmup Iteration  15: 9032279.320 ops/s
# Warmup Iteration  16: 9471883.928 ops/s
# Warmup Iteration  17: 9449850.395 ops/s
# Warmup Iteration  18: 9437371.067 ops/s
# Warmup Iteration  19: 9535657.812 ops/s
# Warmup Iteration  20: 9574028.492 ops/s
# Warmup Iteration  21: 9489562.281 ops/s
# Warmup Iteration  22: 9381057.751 ops/s
# Warmup Iteration  23: 9375569.873 ops/s
# Warmup Iteration  24: 9407638.497 ops/s
# Warmup Iteration  25: 9189068.966 ops/s
# Warmup Iteration  26: 9452908.903 ops/s
# Warmup Iteration  27: 9475838.090 ops/s
# Warmup Iteration  28: 9392612.818 ops/s
# Warmup Iteration  29: 9417263.012 ops/s
# Warmup Iteration  30: 9506116.996 ops/s
Iteration   1: 9398632.554 ops/s
Iteration   2: 9524846.006 ops/s
Iteration   3: 9495958.051 ops/s
Iteration   4: 9037334.042 ops/s
Iteration   5: 9417443.492 ops/s
Iteration   6: 9405726.598 ops/s
Iteration   7: 9454342.472 ops/s
Iteration   8: 9524254.473 ops/s
Iteration   9: 9458611.816 ops/s
Iteration  10: 9406025.398 ops/s
Iteration  11: 9424196.141 ops/s
Iteration  12: 9484221.222 ops/s
Iteration  13: 9399053.812 ops/s
Iteration  14: 8955039.885 ops/s
Iteration  15: 9482855.681 ops/s
Iteration  16: 9067326.963 ops/s
Iteration  17: 9025734.402 ops/s
Iteration  18: 9528756.544 ops/s
Iteration  19: 9496305.988 ops/s
Iteration  20: 9222659.389 ops/s
Iteration  21: 9492105.041 ops/s
Iteration  22: 9553524.410 ops/s
Iteration  23: 9228607.148 ops/s
Iteration  24: 9436604.662 ops/s
Iteration  25: 8908110.337 ops/s
Iteration  26: 9083837.887 ops/s
Iteration  27: 9127111.828 ops/s
Iteration  28: 9416119.650 ops/s
Iteration  29: 9413136.323 ops/s
Iteration  30: 9286720.113 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_toSet":
  9338506.744 ±(99.9%) 128817.906 ops/s [Average]
  (min, avg, max) = (8908110.337, 9338506.744, 9553524.410), stdev = 192808.591
  CI (99.9%): [9209688.839, 9467324.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_toSet  thrpt   30  9338506.744 ± 128817.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264878.304 ops/s
# Warmup Iteration   2: 403314.825 ops/s
# Warmup Iteration   3: 486564.176 ops/s
# Warmup Iteration   4: 475074.087 ops/s
# Warmup Iteration   5: 485415.021 ops/s
# Warmup Iteration   6: 495377.073 ops/s
# Warmup Iteration   7: 410626.903 ops/s
# Warmup Iteration   8: 488127.292 ops/s
# Warmup Iteration   9: 488202.955 ops/s
# Warmup Iteration  10: 485017.816 ops/s
# Warmup Iteration  11: 486881.152 ops/s
# Warmup Iteration  12: 485537.408 ops/s
# Warmup Iteration  13: 459925.505 ops/s
# Warmup Iteration  14: 473472.941 ops/s
# Warmup Iteration  15: 477793.484 ops/s
# Warmup Iteration  16: 475256.185 ops/s
# Warmup Iteration  17: 500151.675 ops/s
# Warmup Iteration  18: 500055.862 ops/s
# Warmup Iteration  19: 505172.738 ops/s
# Warmup Iteration  20: 498928.155 ops/s
# Warmup Iteration  21: 502327.311 ops/s
# Warmup Iteration  22: 503410.067 ops/s
# Warmup Iteration  23: 502916.216 ops/s
# Warmup Iteration  24: 506835.836 ops/s
# Warmup Iteration  25: 503980.641 ops/s
# Warmup Iteration  26: 502795.878 ops/s
# Warmup Iteration  27: 500630.921 ops/s
# Warmup Iteration  28: 500093.737 ops/s
# Warmup Iteration  29: 501856.649 ops/s
# Warmup Iteration  30: 503574.100 ops/s
Iteration   1: 489522.663 ops/s
Iteration   2: 482018.929 ops/s
Iteration   3: 489882.756 ops/s
Iteration   4: 504539.219 ops/s
Iteration   5: 509581.667 ops/s
Iteration   6: 508938.417 ops/s
Iteration   7: 508542.475 ops/s
Iteration   8: 504595.133 ops/s
Iteration   9: 506187.063 ops/s
Iteration  10: 502021.897 ops/s
Iteration  11: 507272.055 ops/s
Iteration  12: 508263.896 ops/s
Iteration  13: 510437.320 ops/s
Iteration  14: 509180.152 ops/s
Iteration  15: 511575.270 ops/s
Iteration  16: 504068.548 ops/s
Iteration  17: 503679.196 ops/s
Iteration  18: 508761.523 ops/s
Iteration  19: 508652.905 ops/s
Iteration  20: 501575.795 ops/s
Iteration  21: 505104.481 ops/s
Iteration  22: 508838.402 ops/s
Iteration  23: 504278.105 ops/s
Iteration  24: 503747.493 ops/s
Iteration  25: 506600.438 ops/s
Iteration  26: 511071.554 ops/s
Iteration  27: 510642.231 ops/s
Iteration  28: 511014.145 ops/s
Iteration  29: 509768.643 ops/s
Iteration  30: 509784.036 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_topOccurrences":
  505338.213 ±(99.9%) 4592.587 ops/s [Average]
  (min, avg, max) = (482018.929, 505338.213, 511575.270), stdev = 6873.969
  CI (99.9%): [500745.626, 509930.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  505338.213 ± 4592.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 916476.835 ops/s
# Warmup Iteration   2: 1130977.577 ops/s
# Warmup Iteration   3: 5627586.962 ops/s
# Warmup Iteration   4: 5881735.009 ops/s
# Warmup Iteration   5: 4954246.289 ops/s
# Warmup Iteration   6: 5887285.927 ops/s
# Warmup Iteration   7: 5875488.394 ops/s
# Warmup Iteration   8: 5833755.819 ops/s
# Warmup Iteration   9: 5929800.103 ops/s
# Warmup Iteration  10: 5899910.208 ops/s
# Warmup Iteration  11: 5929105.608 ops/s
# Warmup Iteration  12: 5827538.582 ops/s
# Warmup Iteration  13: 5927010.764 ops/s
# Warmup Iteration  14: 5890187.502 ops/s
# Warmup Iteration  15: 5892952.090 ops/s
# Warmup Iteration  16: 5906549.838 ops/s
# Warmup Iteration  17: 5898992.564 ops/s
# Warmup Iteration  18: 5917966.606 ops/s
# Warmup Iteration  19: 5912494.460 ops/s
# Warmup Iteration  20: 5845440.891 ops/s
# Warmup Iteration  21: 5890855.365 ops/s
# Warmup Iteration  22: 5898367.046 ops/s
# Warmup Iteration  23: 5902509.184 ops/s
# Warmup Iteration  24: 5853636.088 ops/s
# Warmup Iteration  25: 5858601.837 ops/s
# Warmup Iteration  26: 5893479.572 ops/s
# Warmup Iteration  27: 5901303.628 ops/s
# Warmup Iteration  28: 5908114.863 ops/s
# Warmup Iteration  29: 5911113.492 ops/s
# Warmup Iteration  30: 5898847.799 ops/s
Iteration   1: 5882467.352 ops/s
Iteration   2: 5836948.428 ops/s
Iteration   3: 5852554.431 ops/s
Iteration   4: 5828987.578 ops/s
Iteration   5: 5886487.053 ops/s
Iteration   6: 5917279.199 ops/s
Iteration   7: 5896043.093 ops/s
Iteration   8: 5795475.722 ops/s
Iteration   9: 5899136.512 ops/s
Iteration  10: 5834817.215 ops/s
Iteration  11: 5924622.805 ops/s
Iteration  12: 5892497.820 ops/s
Iteration  13: 5918949.864 ops/s
Iteration  14: 5910111.719 ops/s
Iteration  15: 5870633.217 ops/s
Iteration  16: 5924532.521 ops/s
Iteration  17: 5909843.797 ops/s
Iteration  18: 5829307.655 ops/s
Iteration  19: 5869396.711 ops/s
Iteration  20: 5915080.642 ops/s
Iteration  21: 5843890.172 ops/s
Iteration  22: 5876557.255 ops/s
Iteration  23: 5861269.892 ops/s
Iteration  24: 5906855.824 ops/s
Iteration  25: 5907776.354 ops/s
Iteration  26: 5893673.048 ops/s
Iteration  27: 5908404.946 ops/s
Iteration  28: 5883118.509 ops/s
Iteration  29: 5921364.965 ops/s
Iteration  30: 5903351.334 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_with":
  5883381.188 ±(99.9%) 22869.158 ops/s [Average]
  (min, avg, max) = (5795475.722, 5883381.188, 5924622.805), stdev = 34229.482
  CI (99.9%): [5860512.030, 5906250.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_with  thrpt   30  5883381.188 ± 22869.158  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972642.765 ops/s
# Warmup Iteration   2: 1950773.287 ops/s
# Warmup Iteration   3: 5376259.918 ops/s
# Warmup Iteration   4: 4529354.877 ops/s
# Warmup Iteration   5: 5386764.845 ops/s
# Warmup Iteration   6: 5377319.564 ops/s
# Warmup Iteration   7: 5389069.710 ops/s
# Warmup Iteration   8: 5413709.352 ops/s
# Warmup Iteration   9: 5386062.853 ops/s
# Warmup Iteration  10: 5336424.442 ops/s
# Warmup Iteration  11: 5381100.022 ops/s
# Warmup Iteration  12: 5351922.213 ops/s
# Warmup Iteration  13: 5391167.446 ops/s
# Warmup Iteration  14: 5411131.935 ops/s
# Warmup Iteration  15: 5376733.159 ops/s
# Warmup Iteration  16: 5385404.136 ops/s
# Warmup Iteration  17: 5364077.547 ops/s
# Warmup Iteration  18: 5386072.617 ops/s
# Warmup Iteration  19: 5392250.050 ops/s
# Warmup Iteration  20: 5405558.845 ops/s
# Warmup Iteration  21: 5382671.902 ops/s
# Warmup Iteration  22: 5365271.140 ops/s
# Warmup Iteration  23: 5377427.472 ops/s
# Warmup Iteration  24: 5415767.832 ops/s
# Warmup Iteration  25: 5338849.627 ops/s
# Warmup Iteration  26: 5367215.769 ops/s
# Warmup Iteration  27: 5291410.240 ops/s
# Warmup Iteration  28: 5425402.774 ops/s
# Warmup Iteration  29: 5357859.031 ops/s
# Warmup Iteration  30: 5360097.487 ops/s
Iteration   1: 5345948.824 ops/s
Iteration   2: 5387812.705 ops/s
Iteration   3: 5350321.215 ops/s
Iteration   4: 5337222.977 ops/s
Iteration   5: 5347948.849 ops/s
Iteration   6: 5308308.094 ops/s
Iteration   7: 5314306.563 ops/s
Iteration   8: 5318581.708 ops/s
Iteration   9: 5367371.928 ops/s
Iteration  10: 5334246.176 ops/s
Iteration  11: 5365447.188 ops/s
Iteration  12: 5407654.313 ops/s
Iteration  13: 5399996.359 ops/s
Iteration  14: 5355021.609 ops/s
Iteration  15: 5382701.267 ops/s
Iteration  16: 5371884.989 ops/s
Iteration  17: 5407586.332 ops/s
Iteration  18: 5403013.160 ops/s
Iteration  19: 5401478.090 ops/s
Iteration  20: 5424359.275 ops/s
Iteration  21: 5403896.842 ops/s
Iteration  22: 5397632.840 ops/s
Iteration  23: 5376575.300 ops/s
Iteration  24: 5381958.786 ops/s
Iteration  25: 5412651.681 ops/s
Iteration  26: 5399953.337 ops/s
Iteration  27: 5360856.351 ops/s
Iteration  28: 5359196.670 ops/s
Iteration  29: 5329782.486 ops/s
Iteration  30: 5412491.027 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withAll":
  5372206.898 ±(99.9%) 21896.283 ops/s [Average]
  (min, avg, max) = (5308308.094, 5372206.898, 5424359.275), stdev = 32773.328
  CI (99.9%): [5350310.615, 5394103.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_withAll  thrpt   30  5372206.898 ± 21896.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869697.023 ops/s
# Warmup Iteration   2: 1127143.646 ops/s
# Warmup Iteration   3: 6390953.646 ops/s
# Warmup Iteration   4: 6894056.879 ops/s
# Warmup Iteration   5: 5758507.731 ops/s
# Warmup Iteration   6: 6945004.031 ops/s
# Warmup Iteration   7: 6881032.185 ops/s
# Warmup Iteration   8: 6950673.511 ops/s
# Warmup Iteration   9: 6943462.832 ops/s
# Warmup Iteration  10: 6905030.178 ops/s
# Warmup Iteration  11: 6907619.852 ops/s
# Warmup Iteration  12: 6902544.038 ops/s
# Warmup Iteration  13: 6955849.228 ops/s
# Warmup Iteration  14: 6931630.930 ops/s
# Warmup Iteration  15: 6940622.948 ops/s
# Warmup Iteration  16: 6810443.810 ops/s
# Warmup Iteration  17: 6922464.779 ops/s
# Warmup Iteration  18: 6942633.487 ops/s
# Warmup Iteration  19: 6945668.253 ops/s
# Warmup Iteration  20: 6885220.624 ops/s
# Warmup Iteration  21: 6910113.697 ops/s
# Warmup Iteration  22: 6866113.384 ops/s
# Warmup Iteration  23: 6853088.789 ops/s
# Warmup Iteration  24: 6955490.839 ops/s
# Warmup Iteration  25: 6906805.297 ops/s
# Warmup Iteration  26: 6919426.611 ops/s
# Warmup Iteration  27: 6961523.334 ops/s
# Warmup Iteration  28: 6896769.346 ops/s
# Warmup Iteration  29: 6948071.263 ops/s
# Warmup Iteration  30: 6963063.974 ops/s
Iteration   1: 6978196.437 ops/s
Iteration   2: 7007176.517 ops/s
Iteration   3: 7016211.829 ops/s
Iteration   4: 6937760.206 ops/s
Iteration   5: 6948215.911 ops/s
Iteration   6: 6899863.712 ops/s
Iteration   7: 6925880.355 ops/s
Iteration   8: 6934109.539 ops/s
Iteration   9: 6804893.939 ops/s
Iteration  10: 6933315.169 ops/s
Iteration  11: 6951171.833 ops/s
Iteration  12: 6958409.693 ops/s
Iteration  13: 6962745.665 ops/s
Iteration  14: 6881940.365 ops/s
Iteration  15: 6884679.404 ops/s
Iteration  16: 6931575.451 ops/s
Iteration  17: 6946658.484 ops/s
Iteration  18: 6914062.075 ops/s
Iteration  19: 6962227.938 ops/s
Iteration  20: 6981396.966 ops/s
Iteration  21: 6979533.532 ops/s
Iteration  22: 6991898.803 ops/s
Iteration  23: 6954817.119 ops/s
Iteration  24: 6931415.378 ops/s
Iteration  25: 6948358.093 ops/s
Iteration  26: 6882984.193 ops/s
Iteration  27: 6999089.842 ops/s
Iteration  28: 6973146.562 ops/s
Iteration  29: 6947293.028 ops/s
Iteration  30: 6937673.553 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_without":
  6943556.720 ±(99.9%) 28974.973 ops/s [Average]
  (min, avg, max) = (6804893.939, 6943556.720, 7016211.829), stdev = 43368.379
  CI (99.9%): [6914581.747, 6972531.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_without  thrpt   30  6943556.720 ± 28974.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 867864.955 ops/s
# Warmup Iteration   2: 1432661.944 ops/s
# Warmup Iteration   3: 4102997.459 ops/s
# Warmup Iteration   4: 3363751.224 ops/s
# Warmup Iteration   5: 4074591.417 ops/s
# Warmup Iteration   6: 4080797.475 ops/s
# Warmup Iteration   7: 4064671.629 ops/s
# Warmup Iteration   8: 4047457.777 ops/s
# Warmup Iteration   9: 4075927.710 ops/s
# Warmup Iteration  10: 4096950.648 ops/s
# Warmup Iteration  11: 4088608.356 ops/s
# Warmup Iteration  12: 4092739.711 ops/s
# Warmup Iteration  13: 4048979.589 ops/s
# Warmup Iteration  14: 4058528.779 ops/s
# Warmup Iteration  15: 4062681.454 ops/s
# Warmup Iteration  16: 4031881.012 ops/s
# Warmup Iteration  17: 4019184.859 ops/s
# Warmup Iteration  18: 4026431.433 ops/s
# Warmup Iteration  19: 4051132.330 ops/s
# Warmup Iteration  20: 4056024.605 ops/s
# Warmup Iteration  21: 3873738.655 ops/s
# Warmup Iteration  22: 4077805.586 ops/s
# Warmup Iteration  23: 4060125.894 ops/s
# Warmup Iteration  24: 4019188.785 ops/s
# Warmup Iteration  25: 4023374.855 ops/s
# Warmup Iteration  26: 4051467.390 ops/s
# Warmup Iteration  27: 4015794.722 ops/s
# Warmup Iteration  28: 4091568.400 ops/s
# Warmup Iteration  29: 4042043.257 ops/s
# Warmup Iteration  30: 4066108.271 ops/s
Iteration   1: 4109608.368 ops/s
Iteration   2: 4065408.614 ops/s
Iteration   3: 4071315.454 ops/s
Iteration   4: 4072441.015 ops/s
Iteration   5: 4072898.489 ops/s
Iteration   6: 4051189.244 ops/s
Iteration   7: 4086239.311 ops/s
Iteration   8: 4073269.747 ops/s
Iteration   9: 4040030.225 ops/s
Iteration  10: 4088261.620 ops/s
Iteration  11: 4100492.156 ops/s
Iteration  12: 4069295.283 ops/s
Iteration  13: 4056689.248 ops/s
Iteration  14: 4080289.221 ops/s
Iteration  15: 4080699.132 ops/s
Iteration  16: 3997689.739 ops/s
Iteration  17: 4059892.697 ops/s
Iteration  18: 4054412.428 ops/s
Iteration  19: 4058161.145 ops/s
Iteration  20: 4084451.504 ops/s
Iteration  21: 4093435.114 ops/s
Iteration  22: 4069738.312 ops/s
Iteration  23: 4059990.999 ops/s
Iteration  24: 4053451.407 ops/s
Iteration  25: 4068329.242 ops/s
Iteration  26: 4017839.287 ops/s
Iteration  27: 4025369.877 ops/s
Iteration  28: 4074482.409 ops/s
Iteration  29: 4052141.652 ops/s
Iteration  30: 4060366.486 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.SynchronizedBooleanBagTest._Benchmark.benchmark_withoutAll":
  4064929.314 ±(99.9%) 15700.903 ops/s [Average]
  (min, avg, max) = (3997689.739, 4064929.314, 4109608.368), stdev = 23500.375
  CI (99.9%): [4049228.411, 4080630.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SynchronizedBooleanBagTest._Benchmark.benchmark_withoutAll  thrpt   30  4064929.314 ± 15700.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754533.877 ops/s
# Warmup Iteration   2: 811942.092 ops/s
# Warmup Iteration   3: 1047897.189 ops/s
# Warmup Iteration   4: 1043821.149 ops/s
# Warmup Iteration   5: 1035170.820 ops/s
# Warmup Iteration   6: 1044430.081 ops/s
# Warmup Iteration   7: 1051479.449 ops/s
# Warmup Iteration   8: 1048420.072 ops/s
# Warmup Iteration   9: 1049915.641 ops/s
# Warmup Iteration  10: 1029846.060 ops/s
# Warmup Iteration  11: 908093.542 ops/s
# Warmup Iteration  12: 1047665.003 ops/s
# Warmup Iteration  13: 1040095.886 ops/s
# Warmup Iteration  14: 1037689.597 ops/s
# Warmup Iteration  15: 1039249.822 ops/s
# Warmup Iteration  16: 1025005.389 ops/s
# Warmup Iteration  17: 1076683.100 ops/s
# Warmup Iteration  18: 1088590.892 ops/s
# Warmup Iteration  19: 1094021.825 ops/s
# Warmup Iteration  20: 1088095.841 ops/s
# Warmup Iteration  21: 1085731.638 ops/s
# Warmup Iteration  22: 1097627.301 ops/s
# Warmup Iteration  23: 1093779.534 ops/s
# Warmup Iteration  24: 1085330.631 ops/s
# Warmup Iteration  25: 1087883.594 ops/s
# Warmup Iteration  26: 1115947.105 ops/s
# Warmup Iteration  27: 1072023.098 ops/s
# Warmup Iteration  28: 1095522.511 ops/s
# Warmup Iteration  29: 1089778.257 ops/s
# Warmup Iteration  30: 1098468.528 ops/s
Iteration   1: 1086636.704 ops/s
Iteration   2: 1084404.678 ops/s
Iteration   3: 1078908.653 ops/s
Iteration   4: 1087805.154 ops/s
Iteration   5: 1085021.994 ops/s
Iteration   6: 1088276.844 ops/s
Iteration   7: 1067484.505 ops/s
Iteration   8: 1068732.931 ops/s
Iteration   9: 1037968.652 ops/s
Iteration  10: 1053532.159 ops/s
Iteration  11: 1076793.708 ops/s
Iteration  12: 1097292.352 ops/s
Iteration  13: 1097001.450 ops/s
Iteration  14: 1102979.198 ops/s
Iteration  15: 1085741.733 ops/s
Iteration  16: 1091792.069 ops/s
Iteration  17: 1097251.853 ops/s
Iteration  18: 1089274.806 ops/s
Iteration  19: 1087772.500 ops/s
Iteration  20: 1092102.153 ops/s
Iteration  21: 1091859.712 ops/s
Iteration  22: 1091299.265 ops/s
Iteration  23: 1081388.479 ops/s
Iteration  24: 1091435.211 ops/s
Iteration  25: 1090961.954 ops/s
Iteration  26: 1097811.266 ops/s
Iteration  27: 1097708.082 ops/s
Iteration  28: 1093709.741 ops/s
Iteration  29: 1092175.002 ops/s
Iteration  30: 1096657.601 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_add":
  1086059.347 ±(99.9%) 9220.312 ops/s [Average]
  (min, avg, max) = (1037968.652, 1086059.347, 1102979.198), stdev = 13800.530
  CI (99.9%): [1076839.035, 1095279.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_add  thrpt   30  1086059.347 ± 9220.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757223.832 ops/s
# Warmup Iteration   2: 816824.985 ops/s
# Warmup Iteration   3: 1029481.948 ops/s
# Warmup Iteration   4: 1027223.238 ops/s
# Warmup Iteration   5: 1038310.848 ops/s
# Warmup Iteration   6: 1036783.956 ops/s
# Warmup Iteration   7: 1044644.403 ops/s
# Warmup Iteration   8: 1049250.699 ops/s
# Warmup Iteration   9: 1040693.810 ops/s
# Warmup Iteration  10: 932358.386 ops/s
# Warmup Iteration  11: 993032.014 ops/s
# Warmup Iteration  12: 1053844.194 ops/s
# Warmup Iteration  13: 1044736.186 ops/s
# Warmup Iteration  14: 1024729.761 ops/s
# Warmup Iteration  15: 1034144.463 ops/s
# Warmup Iteration  16: 1044130.884 ops/s
# Warmup Iteration  17: 1115768.446 ops/s
# Warmup Iteration  18: 1104431.138 ops/s
# Warmup Iteration  19: 1111251.151 ops/s
# Warmup Iteration  20: 1116619.987 ops/s
# Warmup Iteration  21: 1108138.950 ops/s
# Warmup Iteration  22: 1113485.990 ops/s
# Warmup Iteration  23: 1100678.114 ops/s
# Warmup Iteration  24: 1094759.055 ops/s
# Warmup Iteration  25: 1109523.412 ops/s
# Warmup Iteration  26: 1102992.876 ops/s
# Warmup Iteration  27: 1111071.915 ops/s
# Warmup Iteration  28: 1116110.833 ops/s
# Warmup Iteration  29: 1107237.938 ops/s
# Warmup Iteration  30: 1095044.419 ops/s
Iteration   1: 1104872.759 ops/s
Iteration   2: 1096049.629 ops/s
Iteration   3: 1054069.007 ops/s
Iteration   4: 1094991.070 ops/s
Iteration   5: 1110446.767 ops/s
Iteration   6: 1104429.451 ops/s
Iteration   7: 1126028.723 ops/s
Iteration   8: 1124596.269 ops/s
Iteration   9: 1125835.472 ops/s
Iteration  10: 1126399.884 ops/s
Iteration  11: 1114037.602 ops/s
Iteration  12: 1117316.314 ops/s
Iteration  13: 1128636.336 ops/s
Iteration  14: 1108271.306 ops/s
Iteration  15: 1110904.331 ops/s
Iteration  16: 1113312.437 ops/s
Iteration  17: 1105617.596 ops/s
Iteration  18: 1085241.524 ops/s
Iteration  19: 1114278.109 ops/s
Iteration  20: 1117686.968 ops/s
Iteration  21: 1108430.739 ops/s
Iteration  22: 1117734.636 ops/s
Iteration  23: 1101556.293 ops/s
Iteration  24: 1116779.435 ops/s
Iteration  25: 1131587.428 ops/s
Iteration  26: 1114437.369 ops/s
Iteration  27: 1102369.096 ops/s
Iteration  28: 1101928.592 ops/s
Iteration  29: 1114958.140 ops/s
Iteration  30: 1109200.623 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllArray":
  1110066.797 ±(99.9%) 10041.322 ops/s [Average]
  (min, avg, max) = (1054069.007, 1110066.797, 1131587.428), stdev = 15029.379
  CI (99.9%): [1100025.475, 1120108.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllArray  thrpt   30  1110066.797 ± 10041.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737938.898 ops/s
# Warmup Iteration   2: 812976.500 ops/s
# Warmup Iteration   3: 1040333.909 ops/s
# Warmup Iteration   4: 1042038.779 ops/s
# Warmup Iteration   5: 1030985.679 ops/s
# Warmup Iteration   6: 1023719.253 ops/s
# Warmup Iteration   7: 1000418.986 ops/s
# Warmup Iteration   8: 1012719.934 ops/s
# Warmup Iteration   9: 1025419.123 ops/s
# Warmup Iteration  10: 961135.412 ops/s
# Warmup Iteration  11: 956174.847 ops/s
# Warmup Iteration  12: 1041205.327 ops/s
# Warmup Iteration  13: 1045570.980 ops/s
# Warmup Iteration  14: 1035044.946 ops/s
# Warmup Iteration  15: 1044988.521 ops/s
# Warmup Iteration  16: 1046671.213 ops/s
# Warmup Iteration  17: 1114863.706 ops/s
# Warmup Iteration  18: 1105869.390 ops/s
# Warmup Iteration  19: 1101851.270 ops/s
# Warmup Iteration  20: 1073094.961 ops/s
# Warmup Iteration  21: 1069918.554 ops/s
# Warmup Iteration  22: 1063709.635 ops/s
# Warmup Iteration  23: 1062839.565 ops/s
# Warmup Iteration  24: 1026346.037 ops/s
# Warmup Iteration  25: 1067044.314 ops/s
# Warmup Iteration  26: 1108205.283 ops/s
# Warmup Iteration  27: 1109860.539 ops/s
# Warmup Iteration  28: 1123704.022 ops/s
# Warmup Iteration  29: 1105294.743 ops/s
# Warmup Iteration  30: 1100716.188 ops/s
Iteration   1: 1100036.323 ops/s
Iteration   2: 1092856.862 ops/s
Iteration   3: 1057160.648 ops/s
Iteration   4: 1104581.162 ops/s
Iteration   5: 1107470.967 ops/s
Iteration   6: 1113474.388 ops/s
Iteration   7: 1112431.647 ops/s
Iteration   8: 1096267.166 ops/s
Iteration   9: 1112647.155 ops/s
Iteration  10: 1111724.827 ops/s
Iteration  11: 1105572.607 ops/s
Iteration  12: 1062836.887 ops/s
Iteration  13: 1053998.137 ops/s
Iteration  14: 1098761.938 ops/s
Iteration  15: 1086161.696 ops/s
Iteration  16: 1103971.050 ops/s
Iteration  17: 1094401.282 ops/s
Iteration  18: 1094249.257 ops/s
Iteration  19: 1097703.241 ops/s
Iteration  20: 1107909.930 ops/s
Iteration  21: 1103666.494 ops/s
Iteration  22: 1109143.140 ops/s
Iteration  23: 1099304.048 ops/s
Iteration  24: 1111364.568 ops/s
Iteration  25: 1112566.577 ops/s
Iteration  26: 1111485.779 ops/s
Iteration  27: 1093130.724 ops/s
Iteration  28: 1089156.151 ops/s
Iteration  29: 1094877.030 ops/s
Iteration  30: 1101771.687 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllIterable":
  1098022.779 ±(99.9%) 10434.250 ops/s [Average]
  (min, avg, max) = (1053998.137, 1098022.779, 1113474.388), stdev = 15617.495
  CI (99.9%): [1087588.529, 1108457.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  1098022.779 ± 10434.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764635.658 ops/s
# Warmup Iteration   2: 804141.609 ops/s
# Warmup Iteration   3: 1046521.707 ops/s
# Warmup Iteration   4: 993239.744 ops/s
# Warmup Iteration   5: 1035414.821 ops/s
# Warmup Iteration   6: 1047416.076 ops/s
# Warmup Iteration   7: 1039824.194 ops/s
# Warmup Iteration   8: 1029696.303 ops/s
# Warmup Iteration   9: 1025094.401 ops/s
# Warmup Iteration  10: 1030348.945 ops/s
# Warmup Iteration  11: 851044.213 ops/s
# Warmup Iteration  12: 1033505.030 ops/s
# Warmup Iteration  13: 1045319.571 ops/s
# Warmup Iteration  14: 1041340.041 ops/s
# Warmup Iteration  15: 1023136.531 ops/s
# Warmup Iteration  16: 1025021.792 ops/s
# Warmup Iteration  17: 1079083.383 ops/s
# Warmup Iteration  18: 1103145.499 ops/s
# Warmup Iteration  19: 1095667.072 ops/s
# Warmup Iteration  20: 1103385.844 ops/s
# Warmup Iteration  21: 1089325.959 ops/s
# Warmup Iteration  22: 1082521.391 ops/s
# Warmup Iteration  23: 1047511.751 ops/s
# Warmup Iteration  24: 1061323.346 ops/s
# Warmup Iteration  25: 1043751.906 ops/s
# Warmup Iteration  26: 1096862.288 ops/s
# Warmup Iteration  27: 1093978.025 ops/s
# Warmup Iteration  28: 1095201.856 ops/s
# Warmup Iteration  29: 1065715.977 ops/s
# Warmup Iteration  30: 1105070.570 ops/s
Iteration   1: 1097995.673 ops/s
Iteration   2: 1086795.824 ops/s
Iteration   3: 1054424.989 ops/s
Iteration   4: 1048771.719 ops/s
Iteration   5: 1116000.568 ops/s
Iteration   6: 1117931.595 ops/s
Iteration   7: 1121398.934 ops/s
Iteration   8: 1082533.546 ops/s
Iteration   9: 1112540.956 ops/s
Iteration  10: 1103045.820 ops/s
Iteration  11: 1083027.003 ops/s
Iteration  12: 1104755.498 ops/s
Iteration  13: 1097714.773 ops/s
Iteration  14: 1100555.187 ops/s
Iteration  15: 1041077.942 ops/s
Iteration  16: 1106307.204 ops/s
Iteration  17: 1098090.650 ops/s
Iteration  18: 1097624.757 ops/s
Iteration  19: 1087433.097 ops/s
Iteration  20: 1079331.175 ops/s
Iteration  21: 1064137.647 ops/s
Iteration  22: 1109714.530 ops/s
Iteration  23: 1114211.098 ops/s
Iteration  24: 1064641.628 ops/s
Iteration  25: 1047485.577 ops/s
Iteration  26: 1105595.096 ops/s
Iteration  27: 1099993.198 ops/s
Iteration  28: 1116657.845 ops/s
Iteration  29: 1117422.364 ops/s
Iteration  30: 1074853.527 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences":
  1091735.647 ±(99.9%) 15493.398 ops/s [Average]
  (min, avg, max) = (1041077.942, 1091735.647, 1121398.934), stdev = 23189.790
  CI (99.9%): [1076242.250, 1107229.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  1091735.647 ± 15493.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737816.102 ops/s
# Warmup Iteration   2: 804440.776 ops/s
# Warmup Iteration   3: 1017721.119 ops/s
# Warmup Iteration   4: 1035248.754 ops/s
# Warmup Iteration   5: 1039068.217 ops/s
# Warmup Iteration   6: 1035018.401 ops/s
# Warmup Iteration   7: 1044050.355 ops/s
# Warmup Iteration   8: 1013620.132 ops/s
# Warmup Iteration   9: 1036705.536 ops/s
# Warmup Iteration  10: 981378.183 ops/s
# Warmup Iteration  11: 942825.196 ops/s
# Warmup Iteration  12: 1028784.507 ops/s
# Warmup Iteration  13: 1022904.786 ops/s
# Warmup Iteration  14: 1018145.340 ops/s
# Warmup Iteration  15: 995036.484 ops/s
# Warmup Iteration  16: 1013496.833 ops/s
# Warmup Iteration  17: 1091818.457 ops/s
# Warmup Iteration  18: 1082553.117 ops/s
# Warmup Iteration  19: 1070813.226 ops/s
# Warmup Iteration  20: 1086509.698 ops/s
# Warmup Iteration  21: 1102064.760 ops/s
# Warmup Iteration  22: 1087714.529 ops/s
# Warmup Iteration  23: 1099681.724 ops/s
# Warmup Iteration  24: 1105501.885 ops/s
# Warmup Iteration  25: 1098476.878 ops/s
# Warmup Iteration  26: 1079785.760 ops/s
# Warmup Iteration  27: 1093390.210 ops/s
# Warmup Iteration  28: 1093219.774 ops/s
# Warmup Iteration  29: 1093554.144 ops/s
# Warmup Iteration  30: 1106941.719 ops/s
Iteration   1: 1106529.446 ops/s
Iteration   2: 1097775.508 ops/s
Iteration   3: 1101494.630 ops/s
Iteration   4: 1054017.511 ops/s
Iteration   5: 1103898.811 ops/s
Iteration   6: 1067032.331 ops/s
Iteration   7: 1083797.124 ops/s
Iteration   8: 1087943.737 ops/s
Iteration   9: 1105111.511 ops/s
Iteration  10: 1095278.828 ops/s
Iteration  11: 1098475.486 ops/s
Iteration  12: 1074745.573 ops/s
Iteration  13: 1110728.695 ops/s
Iteration  14: 1100406.396 ops/s
Iteration  15: 1091400.623 ops/s
Iteration  16: 1096374.008 ops/s
Iteration  17: 1079084.651 ops/s
Iteration  18: 1084577.686 ops/s
Iteration  19: 1085365.101 ops/s
Iteration  20: 1090440.821 ops/s
Iteration  21: 1096277.381 ops/s
Iteration  22: 1095571.494 ops/s
Iteration  23: 1090162.764 ops/s
Iteration  24: 1045656.502 ops/s
Iteration  25: 1092352.015 ops/s
Iteration  26: 1094187.126 ops/s
Iteration  27: 1092061.668 ops/s
Iteration  28: 1096422.311 ops/s
Iteration  29: 1069887.035 ops/s
Iteration  30: 1094401.666 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences_throws":
  1089381.948 ±(99.9%) 9888.964 ops/s [Average]
  (min, avg, max) = (1045656.502, 1089381.948, 1110728.695), stdev = 14801.337
  CI (99.9%): [1079492.984, 1099270.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1089381.948 ± 9888.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7173142.543 ops/s
# Warmup Iteration   2: 11389069.968 ops/s
# Warmup Iteration   3: 13536234.284 ops/s
# Warmup Iteration   4: 13473164.829 ops/s
# Warmup Iteration   5: 13622672.872 ops/s
# Warmup Iteration   6: 13463319.420 ops/s
# Warmup Iteration   7: 13505673.694 ops/s
# Warmup Iteration   8: 13518833.866 ops/s
# Warmup Iteration   9: 13420868.327 ops/s
# Warmup Iteration  10: 13252696.607 ops/s
# Warmup Iteration  11: 13339506.919 ops/s
# Warmup Iteration  12: 13256951.846 ops/s
# Warmup Iteration  13: 12963681.364 ops/s
# Warmup Iteration  14: 13141489.484 ops/s
# Warmup Iteration  15: 13394282.571 ops/s
# Warmup Iteration  16: 13405102.537 ops/s
# Warmup Iteration  17: 13531896.180 ops/s
# Warmup Iteration  18: 13506911.168 ops/s
# Warmup Iteration  19: 13575210.722 ops/s
# Warmup Iteration  20: 13319268.362 ops/s
# Warmup Iteration  21: 13374056.450 ops/s
# Warmup Iteration  22: 13190443.852 ops/s
# Warmup Iteration  23: 13401702.803 ops/s
# Warmup Iteration  24: 13524411.701 ops/s
# Warmup Iteration  25: 13318391.112 ops/s
# Warmup Iteration  26: 13191429.274 ops/s
# Warmup Iteration  27: 13262191.496 ops/s
# Warmup Iteration  28: 12906930.817 ops/s
# Warmup Iteration  29: 13186810.194 ops/s
# Warmup Iteration  30: 13459476.038 ops/s
Iteration   1: 12912128.381 ops/s
Iteration   2: 13558864.810 ops/s
Iteration   3: 13568386.917 ops/s
Iteration   4: 13754571.131 ops/s
Iteration   5: 13653775.784 ops/s
Iteration   6: 13240386.691 ops/s
Iteration   7: 13472905.788 ops/s
Iteration   8: 12967174.050 ops/s
Iteration   9: 13361591.749 ops/s
Iteration  10: 12716309.839 ops/s
Iteration  11: 12736210.750 ops/s
Iteration  12: 13165696.086 ops/s
Iteration  13: 13355588.368 ops/s
Iteration  14: 13358500.053 ops/s
Iteration  15: 13452210.287 ops/s
Iteration  16: 13236978.843 ops/s
Iteration  17: 13575792.951 ops/s
Iteration  18: 13653087.391 ops/s
Iteration  19: 13443092.539 ops/s
Iteration  20: 13529483.216 ops/s
Iteration  21: 13376048.619 ops/s
Iteration  22: 13460309.010 ops/s
Iteration  23: 13316472.411 ops/s
Iteration  24: 13119691.436 ops/s
Iteration  25: 13337322.934 ops/s
Iteration  26: 13086510.540 ops/s
Iteration  27: 13222173.374 ops/s
Iteration  28: 13019643.599 ops/s
Iteration  29: 13589680.993 ops/s
Iteration  30: 13622396.747 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_allSatisfy":
  13328766.176 ±(99.9%) 180314.982 ops/s [Average]
  (min, avg, max) = (12716309.839, 13328766.176, 13754571.131), stdev = 269886.997
  CI (99.9%): [13148451.194, 13509081.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  13328766.176 ± 180314.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7610745.094 ops/s
# Warmup Iteration   2: 12398190.558 ops/s
# Warmup Iteration   3: 14409435.250 ops/s
# Warmup Iteration   4: 14263068.601 ops/s
# Warmup Iteration   5: 14074560.518 ops/s
# Warmup Iteration   6: 13990702.599 ops/s
# Warmup Iteration   7: 13985156.804 ops/s
# Warmup Iteration   8: 14277418.911 ops/s
# Warmup Iteration   9: 14448017.840 ops/s
# Warmup Iteration  10: 14270977.117 ops/s
# Warmup Iteration  11: 14226714.209 ops/s
# Warmup Iteration  12: 14213134.843 ops/s
# Warmup Iteration  13: 13919315.039 ops/s
# Warmup Iteration  14: 14106617.818 ops/s
# Warmup Iteration  15: 14245487.584 ops/s
# Warmup Iteration  16: 14364329.331 ops/s
# Warmup Iteration  17: 14338778.255 ops/s
# Warmup Iteration  18: 14095963.064 ops/s
# Warmup Iteration  19: 14398844.380 ops/s
# Warmup Iteration  20: 14304499.527 ops/s
# Warmup Iteration  21: 14258309.173 ops/s
# Warmup Iteration  22: 14609590.604 ops/s
# Warmup Iteration  23: 14643975.576 ops/s
# Warmup Iteration  24: 14405566.437 ops/s
# Warmup Iteration  25: 14348346.870 ops/s
# Warmup Iteration  26: 14428328.296 ops/s
# Warmup Iteration  27: 14437773.589 ops/s
# Warmup Iteration  28: 14290952.009 ops/s
# Warmup Iteration  29: 14421025.426 ops/s
# Warmup Iteration  30: 14449787.728 ops/s
Iteration   1: 14397559.610 ops/s
Iteration   2: 14708202.511 ops/s
Iteration   3: 14592939.315 ops/s
Iteration   4: 14639394.256 ops/s
Iteration   5: 14673732.076 ops/s
Iteration   6: 14104659.516 ops/s
Iteration   7: 14233451.251 ops/s
Iteration   8: 14172144.822 ops/s
Iteration   9: 14395248.332 ops/s
Iteration  10: 14560570.645 ops/s
Iteration  11: 14601506.656 ops/s
Iteration  12: 14487227.264 ops/s
Iteration  13: 14495280.784 ops/s
Iteration  14: 14722184.645 ops/s
Iteration  15: 14513927.603 ops/s
Iteration  16: 14584760.272 ops/s
Iteration  17: 14325289.129 ops/s
Iteration  18: 14414655.397 ops/s
Iteration  19: 14486937.989 ops/s
Iteration  20: 14407126.899 ops/s
Iteration  21: 13972566.951 ops/s
Iteration  22: 14554039.928 ops/s
Iteration  23: 14387248.605 ops/s
Iteration  24: 14448556.088 ops/s
Iteration  25: 14565816.005 ops/s
Iteration  26: 14819120.707 ops/s
Iteration  27: 14400944.352 ops/s
Iteration  28: 14404181.013 ops/s
Iteration  29: 14342916.901 ops/s
Iteration  30: 14589569.558 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_anySatisfy":
  14466725.303 ±(99.9%) 123848.991 ops/s [Average]
  (min, avg, max) = (13972566.951, 14466725.303, 14819120.707), stdev = 185371.354
  CI (99.9%): [14342876.311, 14590574.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  14466725.303 ± 123848.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 911379.833 ops/s
# Warmup Iteration   2: 2034127.646 ops/s
# Warmup Iteration   3: 1931680.318 ops/s
# Warmup Iteration   4: 1690366.645 ops/s
# Warmup Iteration   5: 2027406.463 ops/s
# Warmup Iteration   6: 2019669.235 ops/s
# Warmup Iteration   7: 2014749.405 ops/s
# Warmup Iteration   8: 2019461.921 ops/s
# Warmup Iteration   9: 1951395.341 ops/s
# Warmup Iteration  10: 1972208.203 ops/s
# Warmup Iteration  11: 1972505.924 ops/s
# Warmup Iteration  12: 1968498.183 ops/s
# Warmup Iteration  13: 2021037.777 ops/s
# Warmup Iteration  14: 2043476.308 ops/s
# Warmup Iteration  15: 1968613.624 ops/s
# Warmup Iteration  16: 1993823.440 ops/s
# Warmup Iteration  17: 2031982.780 ops/s
# Warmup Iteration  18: 2014635.412 ops/s
# Warmup Iteration  19: 2000766.617 ops/s
# Warmup Iteration  20: 2037047.444 ops/s
# Warmup Iteration  21: 2030568.284 ops/s
# Warmup Iteration  22: 1970347.167 ops/s
# Warmup Iteration  23: 2008559.923 ops/s
# Warmup Iteration  24: 2035894.746 ops/s
# Warmup Iteration  25: 2033979.007 ops/s
# Warmup Iteration  26: 2034822.529 ops/s
# Warmup Iteration  27: 1982961.164 ops/s
# Warmup Iteration  28: 2003512.736 ops/s
# Warmup Iteration  29: 2031714.728 ops/s
# Warmup Iteration  30: 2022621.535 ops/s
Iteration   1: 2065190.370 ops/s
Iteration   2: 2050048.187 ops/s
Iteration   3: 2044570.772 ops/s
Iteration   4: 1943768.310 ops/s
Iteration   5: 1956350.194 ops/s
Iteration   6: 2036995.212 ops/s
Iteration   7: 2015772.742 ops/s
Iteration   8: 1979241.072 ops/s
Iteration   9: 1961123.106 ops/s
Iteration  10: 1935276.587 ops/s
Iteration  11: 2039654.979 ops/s
Iteration  12: 1944205.644 ops/s
Iteration  13: 1977710.841 ops/s
Iteration  14: 1906172.010 ops/s
Iteration  15: 2051447.015 ops/s
Iteration  16: 2034382.234 ops/s
Iteration  17: 2040705.105 ops/s
Iteration  18: 2027958.329 ops/s
Iteration  19: 2022178.767 ops/s
Iteration  20: 2016670.535 ops/s
Iteration  21: 2032774.128 ops/s
Iteration  22: 2046775.377 ops/s
Iteration  23: 2040451.196 ops/s
Iteration  24: 2040613.752 ops/s
Iteration  25: 1926567.986 ops/s
Iteration  26: 1925413.211 ops/s
Iteration  27: 1961827.488 ops/s
Iteration  28: 1990150.583 ops/s
Iteration  29: 2016899.662 ops/s
Iteration  30: 2033475.692 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_appendString":
  2002145.703 ±(99.9%) 31117.003 ops/s [Average]
  (min, avg, max) = (1906172.010, 2002145.703, 2065190.370), stdev = 46574.469
  CI (99.9%): [1971028.700, 2033262.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_appendString  thrpt   30  2002145.703 ± 31117.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13448887.853 ops/s
# Warmup Iteration   2: 25438142.957 ops/s
# Warmup Iteration   3: 21736290.072 ops/s
# Warmup Iteration   4: 25176702.537 ops/s
# Warmup Iteration   5: 24815484.706 ops/s
# Warmup Iteration   6: 24771839.363 ops/s
# Warmup Iteration   7: 24430976.421 ops/s
# Warmup Iteration   8: 25041522.699 ops/s
# Warmup Iteration   9: 25512455.969 ops/s
# Warmup Iteration  10: 24404496.605 ops/s
# Warmup Iteration  11: 24451370.643 ops/s
# Warmup Iteration  12: 24204715.661 ops/s
# Warmup Iteration  13: 24544321.193 ops/s
# Warmup Iteration  14: 24251944.845 ops/s
# Warmup Iteration  15: 24644266.866 ops/s
# Warmup Iteration  16: 25217616.078 ops/s
# Warmup Iteration  17: 24958127.806 ops/s
# Warmup Iteration  18: 25158152.864 ops/s
# Warmup Iteration  19: 24770896.549 ops/s
# Warmup Iteration  20: 24106383.883 ops/s
# Warmup Iteration  21: 24600478.748 ops/s
# Warmup Iteration  22: 24545025.450 ops/s
# Warmup Iteration  23: 24652087.220 ops/s
# Warmup Iteration  24: 24443041.526 ops/s
# Warmup Iteration  25: 24512074.698 ops/s
# Warmup Iteration  26: 25241975.734 ops/s
# Warmup Iteration  27: 25025229.449 ops/s
# Warmup Iteration  28: 24755758.232 ops/s
# Warmup Iteration  29: 25232377.770 ops/s
# Warmup Iteration  30: 25409424.992 ops/s
Iteration   1: 25468893.637 ops/s
Iteration   2: 25614018.153 ops/s
Iteration   3: 25439948.277 ops/s
Iteration   4: 25374554.086 ops/s
Iteration   5: 25520022.767 ops/s
Iteration   6: 25506822.769 ops/s
Iteration   7: 25545256.554 ops/s
Iteration   8: 25368257.925 ops/s
Iteration   9: 25403681.778 ops/s
Iteration  10: 25471753.779 ops/s
Iteration  11: 25199303.881 ops/s
Iteration  12: 25371031.571 ops/s
Iteration  13: 25384498.150 ops/s
Iteration  14: 25335873.053 ops/s
Iteration  15: 25278870.702 ops/s
Iteration  16: 25267215.063 ops/s
Iteration  17: 25166912.400 ops/s
Iteration  18: 25302844.357 ops/s
Iteration  19: 25412233.451 ops/s
Iteration  20: 25276900.225 ops/s
Iteration  21: 25511703.401 ops/s
Iteration  22: 25434788.777 ops/s
Iteration  23: 25206188.415 ops/s
Iteration  24: 25331226.264 ops/s
Iteration  25: 25560935.146 ops/s
Iteration  26: 25526718.930 ops/s
Iteration  27: 25474600.067 ops/s
Iteration  28: 25304426.796 ops/s
Iteration  29: 25483776.475 ops/s
Iteration  30: 25340128.482 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asLazy":
  25396112.844 ±(99.9%) 77031.954 ops/s [Average]
  (min, avg, max) = (25166912.400, 25396112.844, 25614018.153), stdev = 115297.812
  CI (99.9%): [25319080.890, 25473144.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_asLazy  thrpt   30  25396112.844 ± 77031.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2441867.656 ops/s
# Warmup Iteration   2: 4911312.203 ops/s
# Warmup Iteration   3: 9600648.668 ops/s
# Warmup Iteration   4: 8287849.335 ops/s
# Warmup Iteration   5: 9720195.887 ops/s
# Warmup Iteration   6: 9775813.959 ops/s
# Warmup Iteration   7: 9811208.883 ops/s
# Warmup Iteration   8: 9735682.379 ops/s
# Warmup Iteration   9: 9863524.124 ops/s
# Warmup Iteration  10: 9805925.625 ops/s
# Warmup Iteration  11: 9783825.254 ops/s
# Warmup Iteration  12: 9839473.578 ops/s
# Warmup Iteration  13: 9873523.946 ops/s
# Warmup Iteration  14: 9852222.551 ops/s
# Warmup Iteration  15: 9856117.360 ops/s
# Warmup Iteration  16: 9812136.756 ops/s
# Warmup Iteration  17: 9817539.806 ops/s
# Warmup Iteration  18: 9855415.014 ops/s
# Warmup Iteration  19: 9834275.369 ops/s
# Warmup Iteration  20: 9799896.112 ops/s
# Warmup Iteration  21: 9656720.342 ops/s
# Warmup Iteration  22: 9666880.925 ops/s
# Warmup Iteration  23: 9295497.118 ops/s
# Warmup Iteration  24: 9616743.329 ops/s
# Warmup Iteration  25: 9572931.599 ops/s
# Warmup Iteration  26: 9197987.264 ops/s
# Warmup Iteration  27: 9797681.464 ops/s
# Warmup Iteration  28: 9751016.763 ops/s
# Warmup Iteration  29: 9479582.561 ops/s
# Warmup Iteration  30: 9747185.050 ops/s
Iteration   1: 9752669.455 ops/s
Iteration   2: 9617378.256 ops/s
Iteration   3: 9488287.317 ops/s
Iteration   4: 9201903.450 ops/s
Iteration   5: 9824077.767 ops/s
Iteration   6: 9696445.638 ops/s
Iteration   7: 9552564.345 ops/s
Iteration   8: 9695722.327 ops/s
Iteration   9: 9574019.100 ops/s
Iteration  10: 9643934.691 ops/s
Iteration  11: 9499205.580 ops/s
Iteration  12: 9645179.029 ops/s
Iteration  13: 9835845.050 ops/s
Iteration  14: 9783308.387 ops/s
Iteration  15: 9722617.475 ops/s
Iteration  16: 9568914.712 ops/s
Iteration  17: 9738419.784 ops/s
Iteration  18: 9788800.947 ops/s
Iteration  19: 9351994.912 ops/s
Iteration  20: 9529180.266 ops/s
Iteration  21: 9559332.521 ops/s
Iteration  22: 9471163.469 ops/s
Iteration  23: 9634173.721 ops/s
Iteration  24: 9594934.055 ops/s
Iteration  25: 9551384.683 ops/s
Iteration  26: 9467248.686 ops/s
Iteration  27: 9350120.302 ops/s
Iteration  28: 9660133.895 ops/s
Iteration  29: 9397757.056 ops/s
Iteration  30: 9788454.478 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asSynchronized":
  9599505.712 ±(99.9%) 102963.445 ops/s [Average]
  (min, avg, max) = (9201903.450, 9599505.712, 9835845.050), stdev = 154110.849
  CI (99.9%): [9496542.267, 9702469.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  9599505.712 ± 102963.445  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8671890.571 ops/s
# Warmup Iteration   2: 13759698.279 ops/s
# Warmup Iteration   3: 15885710.789 ops/s
# Warmup Iteration   4: 16385899.414 ops/s
# Warmup Iteration   5: 16329033.776 ops/s
# Warmup Iteration   6: 16204762.566 ops/s
# Warmup Iteration   7: 16366597.339 ops/s
# Warmup Iteration   8: 15914517.619 ops/s
# Warmup Iteration   9: 16188031.213 ops/s
# Warmup Iteration  10: 16091317.396 ops/s
# Warmup Iteration  11: 16314576.630 ops/s
# Warmup Iteration  12: 16110292.812 ops/s
# Warmup Iteration  13: 16313355.305 ops/s
# Warmup Iteration  14: 16017747.141 ops/s
# Warmup Iteration  15: 16305464.355 ops/s
# Warmup Iteration  16: 16175717.961 ops/s
# Warmup Iteration  17: 16370042.777 ops/s
# Warmup Iteration  18: 16404549.781 ops/s
# Warmup Iteration  19: 16345047.249 ops/s
# Warmup Iteration  20: 16203268.557 ops/s
# Warmup Iteration  21: 16351149.580 ops/s
# Warmup Iteration  22: 16375669.059 ops/s
# Warmup Iteration  23: 16162008.811 ops/s
# Warmup Iteration  24: 15918383.679 ops/s
# Warmup Iteration  25: 15665628.355 ops/s
# Warmup Iteration  26: 16195190.458 ops/s
# Warmup Iteration  27: 16129990.750 ops/s
# Warmup Iteration  28: 16289750.562 ops/s
# Warmup Iteration  29: 16231460.350 ops/s
# Warmup Iteration  30: 16293872.404 ops/s
Iteration   1: 15739626.597 ops/s
Iteration   2: 16116688.643 ops/s
Iteration   3: 15680922.832 ops/s
Iteration   4: 16094580.396 ops/s
Iteration   5: 16350583.482 ops/s
Iteration   6: 16533030.410 ops/s
Iteration   7: 16505817.342 ops/s
Iteration   8: 16214259.167 ops/s
Iteration   9: 16103843.300 ops/s
Iteration  10: 16405157.012 ops/s
Iteration  11: 16519378.441 ops/s
Iteration  12: 16369031.180 ops/s
Iteration  13: 16176410.133 ops/s
Iteration  14: 16434531.017 ops/s
Iteration  15: 16372231.601 ops/s
Iteration  16: 16324349.488 ops/s
Iteration  17: 16290433.343 ops/s
Iteration  18: 16431003.818 ops/s
Iteration  19: 16094951.092 ops/s
Iteration  20: 15999357.376 ops/s
Iteration  21: 15693179.843 ops/s
Iteration  22: 15931587.780 ops/s
Iteration  23: 16138403.070 ops/s
Iteration  24: 16024737.160 ops/s
Iteration  25: 16214149.193 ops/s
Iteration  26: 16339561.430 ops/s
Iteration  27: 16122348.383 ops/s
Iteration  28: 16143764.373 ops/s
Iteration  29: 16335003.174 ops/s
Iteration  30: 16149527.003 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_asUnmodifiable":
  16194948.269 ±(99.9%) 153685.137 ops/s [Average]
  (min, avg, max) = (15680922.832, 16194948.269, 16533030.410), stdev = 230028.695
  CI (99.9%): [16041263.132, 16348633.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  16194948.269 ± 153685.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6088579.937 ops/s
# Warmup Iteration   2: 11924126.093 ops/s
# Warmup Iteration   3: 10119921.291 ops/s
# Warmup Iteration   4: 11876377.167 ops/s
# Warmup Iteration   5: 11574282.607 ops/s
# Warmup Iteration   6: 12263738.832 ops/s
# Warmup Iteration   7: 12068588.304 ops/s
# Warmup Iteration   8: 12208049.865 ops/s
# Warmup Iteration   9: 12224881.001 ops/s
# Warmup Iteration  10: 11707153.914 ops/s
# Warmup Iteration  11: 12009320.123 ops/s
# Warmup Iteration  12: 12154998.596 ops/s
# Warmup Iteration  13: 12113344.274 ops/s
# Warmup Iteration  14: 12151380.765 ops/s
# Warmup Iteration  15: 11833530.706 ops/s
# Warmup Iteration  16: 12236660.451 ops/s
# Warmup Iteration  17: 11956046.333 ops/s
# Warmup Iteration  18: 12166675.982 ops/s
# Warmup Iteration  19: 12243525.755 ops/s
# Warmup Iteration  20: 12297359.634 ops/s
# Warmup Iteration  21: 12480768.687 ops/s
# Warmup Iteration  22: 12120442.810 ops/s
# Warmup Iteration  23: 12069819.146 ops/s
# Warmup Iteration  24: 12243182.372 ops/s
# Warmup Iteration  25: 12256754.627 ops/s
# Warmup Iteration  26: 12297098.554 ops/s
# Warmup Iteration  27: 12331643.981 ops/s
# Warmup Iteration  28: 12298820.826 ops/s
# Warmup Iteration  29: 12478383.235 ops/s
# Warmup Iteration  30: 12375051.780 ops/s
Iteration   1: 12220284.223 ops/s
Iteration   2: 12195688.245 ops/s
Iteration   3: 12385881.562 ops/s
Iteration   4: 12311031.306 ops/s
Iteration   5: 12308236.775 ops/s
Iteration   6: 12244183.634 ops/s
Iteration   7: 12380246.736 ops/s
Iteration   8: 11971921.979 ops/s
Iteration   9: 11907539.787 ops/s
Iteration  10: 12147764.064 ops/s
Iteration  11: 12304469.004 ops/s
Iteration  12: 12314896.848 ops/s
Iteration  13: 12161925.773 ops/s
Iteration  14: 12354007.276 ops/s
Iteration  15: 12265103.259 ops/s
Iteration  16: 12286366.034 ops/s
Iteration  17: 12124665.495 ops/s
Iteration  18: 11851158.066 ops/s
Iteration  19: 12205261.111 ops/s
Iteration  20: 12203603.198 ops/s
Iteration  21: 12281173.068 ops/s
Iteration  22: 12187691.838 ops/s
Iteration  23: 11907998.521 ops/s
Iteration  24: 12032191.850 ops/s
Iteration  25: 12070028.942 ops/s
Iteration  26: 12041014.590 ops/s
Iteration  27: 11696558.352 ops/s
Iteration  28: 12007174.906 ops/s
Iteration  29: 11917526.439 ops/s
Iteration  30: 11836059.030 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator":
  12137388.397 ±(99.9%) 122174.002 ops/s [Average]
  (min, avg, max) = (11696558.352, 12137388.397, 12385881.562), stdev = 182864.308
  CI (99.9%): [12015214.396, 12259562.399] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  12137388.397 ± 122174.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728172.263 ops/s
# Warmup Iteration   2: 785231.072 ops/s
# Warmup Iteration   3: 1009025.947 ops/s
# Warmup Iteration   4: 965023.791 ops/s
# Warmup Iteration   5: 984118.548 ops/s
# Warmup Iteration   6: 1021123.702 ops/s
# Warmup Iteration   7: 1027587.364 ops/s
# Warmup Iteration   8: 1030442.065 ops/s
# Warmup Iteration   9: 1024520.108 ops/s
# Warmup Iteration  10: 860988.292 ops/s
# Warmup Iteration  11: 1009866.057 ops/s
# Warmup Iteration  12: 1009653.566 ops/s
# Warmup Iteration  13: 1012082.235 ops/s
# Warmup Iteration  14: 1010127.432 ops/s
# Warmup Iteration  15: 1009914.045 ops/s
# Warmup Iteration  16: 1017144.872 ops/s
# Warmup Iteration  17: 1070639.240 ops/s
# Warmup Iteration  18: 1076781.801 ops/s
# Warmup Iteration  19: 1080056.500 ops/s
# Warmup Iteration  20: 1079389.787 ops/s
# Warmup Iteration  21: 1076771.793 ops/s
# Warmup Iteration  22: 1079719.910 ops/s
# Warmup Iteration  23: 1071103.427 ops/s
# Warmup Iteration  24: 1080306.663 ops/s
# Warmup Iteration  25: 1075141.401 ops/s
# Warmup Iteration  26: 1054573.020 ops/s
# Warmup Iteration  27: 1066864.442 ops/s
# Warmup Iteration  28: 1038523.295 ops/s
# Warmup Iteration  29: 1040365.341 ops/s
# Warmup Iteration  30: 1071930.396 ops/s
Iteration   1: 1059691.515 ops/s
Iteration   2: 1039889.083 ops/s
Iteration   3: 1030527.523 ops/s
Iteration   4: 1011698.128 ops/s
Iteration   5: 1030207.616 ops/s
Iteration   6: 1028193.895 ops/s
Iteration   7: 1021826.891 ops/s
Iteration   8: 1026635.027 ops/s
Iteration   9: 1061241.004 ops/s
Iteration  10: 1077432.855 ops/s
Iteration  11: 1080260.109 ops/s
Iteration  12: 1056678.016 ops/s
Iteration  13: 1046574.814 ops/s
Iteration  14: 1090539.769 ops/s
Iteration  15: 1087797.797 ops/s
Iteration  16: 1080682.673 ops/s
Iteration  17: 1084414.079 ops/s
Iteration  18: 1075364.116 ops/s
Iteration  19: 1072696.938 ops/s
Iteration  20: 1089558.015 ops/s
Iteration  21: 1078143.626 ops/s
Iteration  22: 1071200.691 ops/s
Iteration  23: 1077586.150 ops/s
Iteration  24: 1059780.997 ops/s
Iteration  25: 1061867.076 ops/s
Iteration  26: 1030053.744 ops/s
Iteration  27: 1081565.459 ops/s
Iteration  28: 1023389.466 ops/s
Iteration  29: 1034475.808 ops/s
Iteration  30: 1029436.611 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove":
  1056646.983 ±(99.9%) 16506.378 ops/s [Average]
  (min, avg, max) = (1011698.128, 1056646.983, 1090539.769), stdev = 24705.972
  CI (99.9%): [1040140.605, 1073153.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_booleanIterator_with_remove  thrpt   30  1056646.983 ± 16506.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425066.486 ops/s
# Warmup Iteration   2: 605576.319 ops/s
# Warmup Iteration   3: 715293.914 ops/s
# Warmup Iteration   4: 722258.575 ops/s
# Warmup Iteration   5: 744525.639 ops/s
# Warmup Iteration   6: 742805.443 ops/s
# Warmup Iteration   7: 620102.413 ops/s
# Warmup Iteration   8: 739215.867 ops/s
# Warmup Iteration   9: 748026.950 ops/s
# Warmup Iteration  10: 738558.027 ops/s
# Warmup Iteration  11: 741848.230 ops/s
# Warmup Iteration  12: 733990.800 ops/s
# Warmup Iteration  13: 739409.089 ops/s
# Warmup Iteration  14: 735154.539 ops/s
# Warmup Iteration  15: 738409.869 ops/s
# Warmup Iteration  16: 734550.831 ops/s
# Warmup Iteration  17: 766635.276 ops/s
# Warmup Iteration  18: 755118.821 ops/s
# Warmup Iteration  19: 767285.254 ops/s
# Warmup Iteration  20: 749293.799 ops/s
# Warmup Iteration  21: 762579.212 ops/s
# Warmup Iteration  22: 770028.481 ops/s
# Warmup Iteration  23: 775643.415 ops/s
# Warmup Iteration  24: 769284.561 ops/s
# Warmup Iteration  25: 766032.241 ops/s
# Warmup Iteration  26: 742157.546 ops/s
# Warmup Iteration  27: 721666.325 ops/s
# Warmup Iteration  28: 770052.873 ops/s
# Warmup Iteration  29: 750456.360 ops/s
# Warmup Iteration  30: 756734.383 ops/s
Iteration   1: 766445.973 ops/s
Iteration   2: 764386.154 ops/s
Iteration   3: 759009.699 ops/s
Iteration   4: 765704.413 ops/s
Iteration   5: 760092.663 ops/s
Iteration   6: 769581.038 ops/s
Iteration   7: 766636.341 ops/s
Iteration   8: 758597.585 ops/s
Iteration   9: 757344.806 ops/s
Iteration  10: 770858.077 ops/s
Iteration  11: 773766.411 ops/s
Iteration  12: 773624.132 ops/s
Iteration  13: 777753.494 ops/s
Iteration  14: 774008.073 ops/s
Iteration  15: 775582.920 ops/s
Iteration  16: 772607.182 ops/s
Iteration  17: 773573.522 ops/s
Iteration  18: 764289.730 ops/s
Iteration  19: 770746.562 ops/s
Iteration  20: 765429.873 ops/s
Iteration  21: 766430.604 ops/s
Iteration  22: 770548.707 ops/s
Iteration  23: 779525.287 ops/s
Iteration  24: 771370.885 ops/s
Iteration  25: 776426.415 ops/s
Iteration  26: 777760.631 ops/s
Iteration  27: 765082.617 ops/s
Iteration  28: 770591.984 ops/s
Iteration  29: 771505.684 ops/s
Iteration  30: 777469.793 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_bottomOccurrences":
  769558.375 ±(99.9%) 4069.928 ops/s [Average]
  (min, avg, max) = (757344.806, 769558.375, 779525.287), stdev = 6091.677
  CI (99.9%): [765488.447, 773628.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  769558.375 ± 4069.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163214.348 ops/s
# Warmup Iteration   2: 261604.813 ops/s
# Warmup Iteration   3: 296682.781 ops/s
# Warmup Iteration   4: 283610.665 ops/s
# Warmup Iteration   5: 292820.874 ops/s
# Warmup Iteration   6: 285705.468 ops/s
# Warmup Iteration   7: 253780.437 ops/s
# Warmup Iteration   8: 298131.654 ops/s
# Warmup Iteration   9: 297778.959 ops/s
# Warmup Iteration  10: 299833.392 ops/s
# Warmup Iteration  11: 296121.360 ops/s
# Warmup Iteration  12: 298959.930 ops/s
# Warmup Iteration  13: 299319.278 ops/s
# Warmup Iteration  14: 300423.520 ops/s
# Warmup Iteration  15: 299811.146 ops/s
# Warmup Iteration  16: 299208.368 ops/s
# Warmup Iteration  17: 309455.286 ops/s
# Warmup Iteration  18: 309808.515 ops/s
# Warmup Iteration  19: 311019.205 ops/s
# Warmup Iteration  20: 311212.445 ops/s
# Warmup Iteration  21: 310196.333 ops/s
# Warmup Iteration  22: 308448.011 ops/s
# Warmup Iteration  23: 308557.753 ops/s
# Warmup Iteration  24: 305330.791 ops/s
# Warmup Iteration  25: 305328.783 ops/s
# Warmup Iteration  26: 306582.701 ops/s
# Warmup Iteration  27: 302350.794 ops/s
# Warmup Iteration  28: 309572.986 ops/s
# Warmup Iteration  29: 304876.247 ops/s
# Warmup Iteration  30: 307469.094 ops/s
Iteration   1: 307636.766 ops/s
Iteration   2: 307064.730 ops/s
Iteration   3: 306485.802 ops/s
Iteration   4: 293976.134 ops/s
Iteration   5: 294307.898 ops/s
Iteration   6: 294035.064 ops/s
Iteration   7: 301672.012 ops/s
Iteration   8: 311877.621 ops/s
Iteration   9: 298527.453 ops/s
Iteration  10: 307714.602 ops/s
Iteration  11: 308869.836 ops/s
Iteration  12: 307614.902 ops/s
Iteration  13: 309534.499 ops/s
Iteration  14: 311920.357 ops/s
Iteration  15: 309028.980 ops/s
Iteration  16: 307444.600 ops/s
Iteration  17: 310595.715 ops/s
Iteration  18: 312259.093 ops/s
Iteration  19: 310394.586 ops/s
Iteration  20: 309960.869 ops/s
Iteration  21: 310452.423 ops/s
Iteration  22: 311171.635 ops/s
Iteration  23: 307806.197 ops/s
Iteration  24: 306148.506 ops/s
Iteration  25: 309778.528 ops/s
Iteration  26: 309778.351 ops/s
Iteration  27: 306865.913 ops/s
Iteration  28: 310400.792 ops/s
Iteration  29: 300657.053 ops/s
Iteration  30: 310370.167 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_chunk":
  306811.703 ±(99.9%) 3578.367 ops/s [Average]
  (min, avg, max) = (293976.134, 306811.703, 312259.093), stdev = 5355.931
  CI (99.9%): [303233.336, 310390.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_chunk  thrpt   30  306811.703 ± 3578.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754384.429 ops/s
# Warmup Iteration   2: 818702.956 ops/s
# Warmup Iteration   3: 1057870.531 ops/s
# Warmup Iteration   4: 1060546.069 ops/s
# Warmup Iteration   5: 1053761.151 ops/s
# Warmup Iteration   6: 1054284.528 ops/s
# Warmup Iteration   7: 1055439.068 ops/s
# Warmup Iteration   8: 1063163.267 ops/s
# Warmup Iteration   9: 1060170.792 ops/s
# Warmup Iteration  10: 892575.285 ops/s
# Warmup Iteration  11: 1021383.617 ops/s
# Warmup Iteration  12: 1058973.870 ops/s
# Warmup Iteration  13: 1033970.706 ops/s
# Warmup Iteration  14: 1057672.813 ops/s
# Warmup Iteration  15: 1064449.465 ops/s
# Warmup Iteration  16: 1049376.872 ops/s
# Warmup Iteration  17: 1107595.855 ops/s
# Warmup Iteration  18: 1129767.201 ops/s
# Warmup Iteration  19: 1121358.184 ops/s
# Warmup Iteration  20: 1123751.757 ops/s
# Warmup Iteration  21: 1129544.571 ops/s
# Warmup Iteration  22: 1117695.746 ops/s
# Warmup Iteration  23: 1127992.785 ops/s
# Warmup Iteration  24: 1115796.520 ops/s
# Warmup Iteration  25: 1127508.148 ops/s
# Warmup Iteration  26: 1121857.232 ops/s
# Warmup Iteration  27: 1122200.121 ops/s
# Warmup Iteration  28: 1111662.579 ops/s
# Warmup Iteration  29: 1111183.511 ops/s
# Warmup Iteration  30: 1114504.047 ops/s
Iteration   1: 1116765.042 ops/s
Iteration   2: 1128088.676 ops/s
Iteration   3: 1111295.062 ops/s
Iteration   4: 1111953.948 ops/s
Iteration   5: 1116119.620 ops/s
Iteration   6: 1118161.446 ops/s
Iteration   7: 1128947.366 ops/s
Iteration   8: 1117234.655 ops/s
Iteration   9: 1123500.640 ops/s
Iteration  10: 1104710.421 ops/s
Iteration  11: 1117496.237 ops/s
Iteration  12: 1121042.117 ops/s
Iteration  13: 1111827.876 ops/s
Iteration  14: 1116850.235 ops/s
Iteration  15: 1099064.336 ops/s
Iteration  16: 1118432.816 ops/s
Iteration  17: 1115311.024 ops/s
Iteration  18: 1125433.694 ops/s
Iteration  19: 1130549.667 ops/s
Iteration  20: 1117248.975 ops/s
Iteration  21: 1110782.101 ops/s
Iteration  22: 1109594.852 ops/s
Iteration  23: 1117635.593 ops/s
Iteration  24: 1115399.466 ops/s
Iteration  25: 1128577.172 ops/s
Iteration  26: 1119525.957 ops/s
Iteration  27: 1123297.692 ops/s
Iteration  28: 1126471.174 ops/s
Iteration  29: 1110683.363 ops/s
Iteration  30: 1121287.208 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_clear":
  1117776.281 ±(99.9%) 4885.107 ops/s [Average]
  (min, avg, max) = (1099064.336, 1117776.281, 1130549.667), stdev = 7311.798
  CI (99.9%): [1112891.174, 1122661.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_clear  thrpt   30  1117776.281 ± 4885.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264747.968 ops/s
# Warmup Iteration   2: 613332.474 ops/s
# Warmup Iteration   3: 645939.854 ops/s
# Warmup Iteration   4: 614826.851 ops/s
# Warmup Iteration   5: 572476.158 ops/s
# Warmup Iteration   6: 641664.415 ops/s
# Warmup Iteration   7: 634041.623 ops/s
# Warmup Iteration   8: 660734.435 ops/s
# Warmup Iteration   9: 646670.207 ops/s
# Warmup Iteration  10: 658061.785 ops/s
# Warmup Iteration  11: 649045.843 ops/s
# Warmup Iteration  12: 656912.780 ops/s
# Warmup Iteration  13: 657061.297 ops/s
# Warmup Iteration  14: 635723.371 ops/s
# Warmup Iteration  15: 648190.224 ops/s
# Warmup Iteration  16: 652407.371 ops/s
# Warmup Iteration  17: 651147.298 ops/s
# Warmup Iteration  18: 650536.457 ops/s
# Warmup Iteration  19: 652104.024 ops/s
# Warmup Iteration  20: 654058.290 ops/s
# Warmup Iteration  21: 655008.622 ops/s
# Warmup Iteration  22: 655281.550 ops/s
# Warmup Iteration  23: 660956.493 ops/s
# Warmup Iteration  24: 658010.409 ops/s
# Warmup Iteration  25: 658069.308 ops/s
# Warmup Iteration  26: 628559.523 ops/s
# Warmup Iteration  27: 651201.934 ops/s
# Warmup Iteration  28: 653983.388 ops/s
# Warmup Iteration  29: 652213.085 ops/s
# Warmup Iteration  30: 649352.420 ops/s
Iteration   1: 643344.917 ops/s
Iteration   2: 641568.687 ops/s
Iteration   3: 647334.748 ops/s
Iteration   4: 648147.544 ops/s
Iteration   5: 643961.838 ops/s
Iteration   6: 643685.560 ops/s
Iteration   7: 647365.931 ops/s
Iteration   8: 653450.298 ops/s
Iteration   9: 652073.220 ops/s
Iteration  10: 652526.730 ops/s
Iteration  11: 642166.697 ops/s
Iteration  12: 652119.323 ops/s
Iteration  13: 645699.295 ops/s
Iteration  14: 639142.542 ops/s
Iteration  15: 617227.511 ops/s
Iteration  16: 649220.219 ops/s
Iteration  17: 643922.951 ops/s
Iteration  18: 629058.391 ops/s
Iteration  19: 656138.861 ops/s
Iteration  20: 645395.145 ops/s
Iteration  21: 659735.352 ops/s
Iteration  22: 654223.639 ops/s
Iteration  23: 648515.429 ops/s
Iteration  24: 645898.750 ops/s
Iteration  25: 638522.351 ops/s
Iteration  26: 627768.094 ops/s
Iteration  27: 620458.101 ops/s
Iteration  28: 649698.755 ops/s
Iteration  29: 619805.089 ops/s
Iteration  30: 646271.801 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_collect":
  643481.592 ±(99.9%) 7153.328 ops/s [Average]
  (min, avg, max) = (617227.511, 643481.592, 659735.352), stdev = 10706.765
  CI (99.9%): [636328.264, 650634.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_collect  thrpt   30  643481.592 ± 7153.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13571480.891 ops/s
# Warmup Iteration   2: 21380702.795 ops/s
# Warmup Iteration   3: 25981392.782 ops/s
# Warmup Iteration   4: 25785254.422 ops/s
# Warmup Iteration   5: 25819502.505 ops/s
# Warmup Iteration   6: 25467503.310 ops/s
# Warmup Iteration   7: 25518483.593 ops/s
# Warmup Iteration   8: 25581572.453 ops/s
# Warmup Iteration   9: 26183327.430 ops/s
# Warmup Iteration  10: 25857817.285 ops/s
# Warmup Iteration  11: 26181968.286 ops/s
# Warmup Iteration  12: 26013865.736 ops/s
# Warmup Iteration  13: 26058058.793 ops/s
# Warmup Iteration  14: 26409742.328 ops/s
# Warmup Iteration  15: 25945363.853 ops/s
# Warmup Iteration  16: 25639582.009 ops/s
# Warmup Iteration  17: 25853114.054 ops/s
# Warmup Iteration  18: 26120802.722 ops/s
# Warmup Iteration  19: 25971236.221 ops/s
# Warmup Iteration  20: 26023812.216 ops/s
# Warmup Iteration  21: 25544579.891 ops/s
# Warmup Iteration  22: 26193749.837 ops/s
# Warmup Iteration  23: 25734007.738 ops/s
# Warmup Iteration  24: 25967119.107 ops/s
# Warmup Iteration  25: 25759528.525 ops/s
# Warmup Iteration  26: 26499639.673 ops/s
# Warmup Iteration  27: 26540243.541 ops/s
# Warmup Iteration  28: 25992300.898 ops/s
# Warmup Iteration  29: 25981111.513 ops/s
# Warmup Iteration  30: 26057313.319 ops/s
Iteration   1: 26199496.263 ops/s
Iteration   2: 26103769.648 ops/s
Iteration   3: 26037642.735 ops/s
Iteration   4: 25946144.673 ops/s
Iteration   5: 25738797.925 ops/s
Iteration   6: 25804063.933 ops/s
Iteration   7: 26242475.851 ops/s
Iteration   8: 25934763.104 ops/s
Iteration   9: 25995244.695 ops/s
Iteration  10: 26274372.081 ops/s
Iteration  11: 25968507.682 ops/s
Iteration  12: 25792011.407 ops/s
Iteration  13: 25643618.692 ops/s
Iteration  14: 25986606.843 ops/s
Iteration  15: 25709211.132 ops/s
Iteration  16: 26387650.132 ops/s
Iteration  17: 26158432.356 ops/s
Iteration  18: 25751133.426 ops/s
Iteration  19: 26354476.085 ops/s
Iteration  20: 26293570.797 ops/s
Iteration  21: 26092819.935 ops/s
Iteration  22: 25590530.406 ops/s
Iteration  23: 25880349.279 ops/s
Iteration  24: 25517966.717 ops/s
Iteration  25: 25978005.590 ops/s
Iteration  26: 25767605.637 ops/s
Iteration  27: 26085833.276 ops/s
Iteration  28: 26104039.062 ops/s
Iteration  29: 26090962.409 ops/s
Iteration  30: 25959701.662 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_contains":
  25979660.114 ±(99.9%) 151853.197 ops/s [Average]
  (min, avg, max) = (25517966.717, 25979660.114, 26387650.132), stdev = 227286.734
  CI (99.9%): [25827806.917, 26131513.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_contains  thrpt   30  25979660.114 ± 151853.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7526748.545 ops/s
# Warmup Iteration   2: 12003897.169 ops/s
# Warmup Iteration   3: 13788943.571 ops/s
# Warmup Iteration   4: 14033144.913 ops/s
# Warmup Iteration   5: 13802211.387 ops/s
# Warmup Iteration   6: 13623788.458 ops/s
# Warmup Iteration   7: 13727566.372 ops/s
# Warmup Iteration   8: 13792530.933 ops/s
# Warmup Iteration   9: 13787785.339 ops/s
# Warmup Iteration  10: 13812012.810 ops/s
# Warmup Iteration  11: 13797566.524 ops/s
# Warmup Iteration  12: 14098279.148 ops/s
# Warmup Iteration  13: 13850503.860 ops/s
# Warmup Iteration  14: 13981397.037 ops/s
# Warmup Iteration  15: 13857966.582 ops/s
# Warmup Iteration  16: 13441691.819 ops/s
# Warmup Iteration  17: 13693317.260 ops/s
# Warmup Iteration  18: 13834069.619 ops/s
# Warmup Iteration  19: 14042580.976 ops/s
# Warmup Iteration  20: 13847454.174 ops/s
# Warmup Iteration  21: 13900636.501 ops/s
# Warmup Iteration  22: 13804551.890 ops/s
# Warmup Iteration  23: 13986015.678 ops/s
# Warmup Iteration  24: 13661958.543 ops/s
# Warmup Iteration  25: 13628790.972 ops/s
# Warmup Iteration  26: 13970143.617 ops/s
# Warmup Iteration  27: 13979460.674 ops/s
# Warmup Iteration  28: 13947430.953 ops/s
# Warmup Iteration  29: 13624506.032 ops/s
# Warmup Iteration  30: 13651021.276 ops/s
Iteration   1: 13718820.860 ops/s
Iteration   2: 13786354.481 ops/s
Iteration   3: 13477895.851 ops/s
Iteration   4: 13931990.239 ops/s
Iteration   5: 13854239.592 ops/s
Iteration   6: 13689917.116 ops/s
Iteration   7: 13426283.196 ops/s
Iteration   8: 13508614.024 ops/s
Iteration   9: 13460852.035 ops/s
Iteration  10: 13689238.829 ops/s
Iteration  11: 13975613.872 ops/s
Iteration  12: 13405113.956 ops/s
Iteration  13: 13548774.034 ops/s
Iteration  14: 13797796.788 ops/s
Iteration  15: 13697665.509 ops/s
Iteration  16: 13994768.806 ops/s
Iteration  17: 13916775.181 ops/s
Iteration  18: 13924899.513 ops/s
Iteration  19: 14104897.878 ops/s
Iteration  20: 13773362.608 ops/s
Iteration  21: 13937965.438 ops/s
Iteration  22: 13905844.439 ops/s
Iteration  23: 13861187.372 ops/s
Iteration  24: 13912848.847 ops/s
Iteration  25: 14068749.455 ops/s
Iteration  26: 14207173.529 ops/s
Iteration  27: 13935217.828 ops/s
Iteration  28: 13542134.837 ops/s
Iteration  29: 13839368.228 ops/s
Iteration  30: 13965931.961 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllArray":
  13795343.210 ±(99.9%) 142217.246 ops/s [Average]
  (min, avg, max) = (13405113.956, 13795343.210, 14207173.529), stdev = 212864.095
  CI (99.9%): [13653125.964, 13937560.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  13795343.210 ± 142217.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2463413.825 ops/s
# Warmup Iteration   2: 4682387.978 ops/s
# Warmup Iteration   3: 5012785.832 ops/s
# Warmup Iteration   4: 5331664.092 ops/s
# Warmup Iteration   5: 5264728.561 ops/s
# Warmup Iteration   6: 5276975.857 ops/s
# Warmup Iteration   7: 5190005.254 ops/s
# Warmup Iteration   8: 5331777.339 ops/s
# Warmup Iteration   9: 5107238.478 ops/s
# Warmup Iteration  10: 5114760.851 ops/s
# Warmup Iteration  11: 5254560.252 ops/s
# Warmup Iteration  12: 5237877.119 ops/s
# Warmup Iteration  13: 5044436.290 ops/s
# Warmup Iteration  14: 5181079.018 ops/s
# Warmup Iteration  15: 5360734.932 ops/s
# Warmup Iteration  16: 5309399.482 ops/s
# Warmup Iteration  17: 5285949.393 ops/s
# Warmup Iteration  18: 5319686.106 ops/s
# Warmup Iteration  19: 5299534.726 ops/s
# Warmup Iteration  20: 5262622.527 ops/s
# Warmup Iteration  21: 5295085.362 ops/s
# Warmup Iteration  22: 5276628.006 ops/s
# Warmup Iteration  23: 5293149.497 ops/s
# Warmup Iteration  24: 5285164.808 ops/s
# Warmup Iteration  25: 5360896.241 ops/s
# Warmup Iteration  26: 5347963.838 ops/s
# Warmup Iteration  27: 5261150.707 ops/s
# Warmup Iteration  28: 5338912.503 ops/s
# Warmup Iteration  29: 5293042.533 ops/s
# Warmup Iteration  30: 5210111.201 ops/s
Iteration   1: 5054810.290 ops/s
Iteration   2: 5292895.455 ops/s
Iteration   3: 5317512.976 ops/s
Iteration   4: 5251635.695 ops/s
Iteration   5: 5182675.984 ops/s
Iteration   6: 5286351.846 ops/s
Iteration   7: 5254962.941 ops/s
Iteration   8: 5306051.114 ops/s
Iteration   9: 5308023.176 ops/s
Iteration  10: 5134508.402 ops/s
Iteration  11: 5168398.649 ops/s
Iteration  12: 5248639.596 ops/s
Iteration  13: 5064136.276 ops/s
Iteration  14: 5239330.822 ops/s
Iteration  15: 5206009.130 ops/s
Iteration  16: 5285896.042 ops/s
Iteration  17: 5310800.795 ops/s
Iteration  18: 5379680.374 ops/s
Iteration  19: 5347044.736 ops/s
Iteration  20: 5401768.511 ops/s
Iteration  21: 5383561.530 ops/s
Iteration  22: 5255765.838 ops/s
Iteration  23: 5367692.296 ops/s
Iteration  24: 5278974.750 ops/s
Iteration  25: 5292958.237 ops/s
Iteration  26: 5340479.828 ops/s
Iteration  27: 5341465.470 ops/s
Iteration  28: 5305667.289 ops/s
Iteration  29: 5329349.559 ops/s
Iteration  30: 5194106.890 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllIterable":
  5271038.483 ±(99.9%) 57918.138 ops/s [Average]
  (min, avg, max) = (5054810.290, 5271038.483, 5401768.511), stdev = 86689.150
  CI (99.9%): [5213120.345, 5328956.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  5271038.483 ± 57918.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10921502.348 ops/s
# Warmup Iteration   2: 17153696.390 ops/s
# Warmup Iteration   3: 20279084.354 ops/s
# Warmup Iteration   4: 20156007.693 ops/s
# Warmup Iteration   5: 19968348.197 ops/s
# Warmup Iteration   6: 20520130.962 ops/s
# Warmup Iteration   7: 20747364.306 ops/s
# Warmup Iteration   8: 20639072.038 ops/s
# Warmup Iteration   9: 20106456.655 ops/s
# Warmup Iteration  10: 20278785.485 ops/s
# Warmup Iteration  11: 19793743.102 ops/s
# Warmup Iteration  12: 20299675.196 ops/s
# Warmup Iteration  13: 20623988.678 ops/s
# Warmup Iteration  14: 20947337.117 ops/s
# Warmup Iteration  15: 20325497.048 ops/s
# Warmup Iteration  16: 20622659.346 ops/s
# Warmup Iteration  17: 20678708.444 ops/s
# Warmup Iteration  18: 20006136.763 ops/s
# Warmup Iteration  19: 20227890.732 ops/s
# Warmup Iteration  20: 20411419.339 ops/s
# Warmup Iteration  21: 20704690.500 ops/s
# Warmup Iteration  22: 19721613.200 ops/s
# Warmup Iteration  23: 20241310.735 ops/s
# Warmup Iteration  24: 20438870.361 ops/s
# Warmup Iteration  25: 20641790.452 ops/s
# Warmup Iteration  26: 20672668.036 ops/s
# Warmup Iteration  27: 20600721.329 ops/s
# Warmup Iteration  28: 20632323.989 ops/s
# Warmup Iteration  29: 20273812.258 ops/s
# Warmup Iteration  30: 19973286.885 ops/s
Iteration   1: 20275082.921 ops/s
Iteration   2: 20671872.200 ops/s
Iteration   3: 20344469.766 ops/s
Iteration   4: 20383071.725 ops/s
Iteration   5: 20054239.617 ops/s
Iteration   6: 20305933.729 ops/s
Iteration   7: 20754779.040 ops/s
Iteration   8: 20518230.667 ops/s
Iteration   9: 20706047.777 ops/s
Iteration  10: 20064004.318 ops/s
Iteration  11: 20458632.929 ops/s
Iteration  12: 20328893.203 ops/s
Iteration  13: 20359792.079 ops/s
Iteration  14: 20086802.738 ops/s
Iteration  15: 20118747.349 ops/s
Iteration  16: 20644234.365 ops/s
Iteration  17: 20663219.038 ops/s
Iteration  18: 20375859.611 ops/s
Iteration  19: 20484669.736 ops/s
Iteration  20: 20648406.954 ops/s
Iteration  21: 20402887.333 ops/s
Iteration  22: 20285104.646 ops/s
Iteration  23: 20244273.072 ops/s
Iteration  24: 20609481.752 ops/s
Iteration  25: 20909597.030 ops/s
Iteration  26: 20818036.281 ops/s
Iteration  27: 19873247.860 ops/s
Iteration  28: 20096804.286 ops/s
Iteration  29: 20936605.769 ops/s
Iteration  30: 20760038.066 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyArray":
  20439435.529 ±(99.9%) 184415.324 ops/s [Average]
  (min, avg, max) = (19873247.860, 20439435.529, 20936605.769), stdev = 276024.195
  CI (99.9%): [20255020.205, 20623850.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  20439435.529 ± 184415.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817698.917 ops/s
# Warmup Iteration   2: 1235203.020 ops/s
# Warmup Iteration   3: 1391239.523 ops/s
# Warmup Iteration   4: 1347734.220 ops/s
# Warmup Iteration   5: 1423718.798 ops/s
# Warmup Iteration   6: 1404780.877 ops/s
# Warmup Iteration   7: 1194207.033 ops/s
# Warmup Iteration   8: 1423104.476 ops/s
# Warmup Iteration   9: 1370238.584 ops/s
# Warmup Iteration  10: 1361647.084 ops/s
# Warmup Iteration  11: 1435154.886 ops/s
# Warmup Iteration  12: 1428689.916 ops/s
# Warmup Iteration  13: 1430707.717 ops/s
# Warmup Iteration  14: 1419667.221 ops/s
# Warmup Iteration  15: 1422681.117 ops/s
# Warmup Iteration  16: 1418768.943 ops/s
# Warmup Iteration  17: 1414698.544 ops/s
# Warmup Iteration  18: 1429537.184 ops/s
# Warmup Iteration  19: 1437616.005 ops/s
# Warmup Iteration  20: 1435165.246 ops/s
# Warmup Iteration  21: 1436591.312 ops/s
# Warmup Iteration  22: 1429695.953 ops/s
# Warmup Iteration  23: 1429845.451 ops/s
# Warmup Iteration  24: 1439603.494 ops/s
# Warmup Iteration  25: 1448707.972 ops/s
# Warmup Iteration  26: 1433691.657 ops/s
# Warmup Iteration  27: 1438590.572 ops/s
# Warmup Iteration  28: 1427284.595 ops/s
# Warmup Iteration  29: 1431301.584 ops/s
# Warmup Iteration  30: 1446508.693 ops/s
Iteration   1: 1414097.164 ops/s
Iteration   2: 1405309.394 ops/s
Iteration   3: 1432863.489 ops/s
Iteration   4: 1442139.432 ops/s
Iteration   5: 1438217.057 ops/s
Iteration   6: 1430064.650 ops/s
Iteration   7: 1407219.475 ops/s
Iteration   8: 1424325.456 ops/s
Iteration   9: 1411678.666 ops/s
Iteration  10: 1419835.236 ops/s
Iteration  11: 1425273.074 ops/s
Iteration  12: 1398725.276 ops/s
Iteration  13: 1428039.905 ops/s
Iteration  14: 1436720.292 ops/s
Iteration  15: 1438567.952 ops/s
Iteration  16: 1445649.882 ops/s
Iteration  17: 1418541.513 ops/s
Iteration  18: 1432181.264 ops/s
Iteration  19: 1436877.970 ops/s
Iteration  20: 1418086.622 ops/s
Iteration  21: 1432786.337 ops/s
Iteration  22: 1435365.420 ops/s
Iteration  23: 1409919.563 ops/s
Iteration  24: 1440597.873 ops/s
Iteration  25: 1444805.898 ops/s
Iteration  26: 1430350.852 ops/s
Iteration  27: 1434764.451 ops/s
Iteration  28: 1420091.677 ops/s
Iteration  29: 1438993.410 ops/s
Iteration  30: 1425362.514 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyIterable":
  1427248.392 ±(99.9%) 8356.144 ops/s [Average]
  (min, avg, max) = (1398725.276, 1427248.392, 1445649.882), stdev = 12507.084
  CI (99.9%): [1418892.248, 1435604.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1427248.392 ± 8356.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10670703.069 ops/s
# Warmup Iteration   2: 17299065.349 ops/s
# Warmup Iteration   3: 20204930.088 ops/s
# Warmup Iteration   4: 20253253.394 ops/s
# Warmup Iteration   5: 19825376.700 ops/s
# Warmup Iteration   6: 20563095.519 ops/s
# Warmup Iteration   7: 20361458.226 ops/s
# Warmup Iteration   8: 20298333.666 ops/s
# Warmup Iteration   9: 20875142.597 ops/s
# Warmup Iteration  10: 20292289.899 ops/s
# Warmup Iteration  11: 20648038.902 ops/s
# Warmup Iteration  12: 20712815.985 ops/s
# Warmup Iteration  13: 20729275.002 ops/s
# Warmup Iteration  14: 20582039.200 ops/s
# Warmup Iteration  15: 20583418.953 ops/s
# Warmup Iteration  16: 20929958.132 ops/s
# Warmup Iteration  17: 20453665.289 ops/s
# Warmup Iteration  18: 20737561.237 ops/s
# Warmup Iteration  19: 20790423.912 ops/s
# Warmup Iteration  20: 20643866.602 ops/s
# Warmup Iteration  21: 20520675.224 ops/s
# Warmup Iteration  22: 20827481.992 ops/s
# Warmup Iteration  23: 20646970.091 ops/s
# Warmup Iteration  24: 20709709.778 ops/s
# Warmup Iteration  25: 20502684.380 ops/s
# Warmup Iteration  26: 20562704.236 ops/s
# Warmup Iteration  27: 20873851.627 ops/s
# Warmup Iteration  28: 20183528.310 ops/s
# Warmup Iteration  29: 19805980.860 ops/s
# Warmup Iteration  30: 20161618.788 ops/s
Iteration   1: 20481185.902 ops/s
Iteration   2: 20537368.476 ops/s
Iteration   3: 20683013.578 ops/s
Iteration   4: 20692039.029 ops/s
Iteration   5: 21018620.785 ops/s
Iteration   6: 20729709.863 ops/s
Iteration   7: 20751158.021 ops/s
Iteration   8: 20741049.705 ops/s
Iteration   9: 20384107.855 ops/s
Iteration  10: 20655763.833 ops/s
Iteration  11: 20419095.659 ops/s
Iteration  12: 20062038.925 ops/s
Iteration  13: 20310845.561 ops/s
Iteration  14: 20910577.760 ops/s
Iteration  15: 20425245.676 ops/s
Iteration  16: 20287503.535 ops/s
Iteration  17: 20083538.261 ops/s
Iteration  18: 20838238.486 ops/s
Iteration  19: 20725597.898 ops/s
Iteration  20: 20727476.899 ops/s
Iteration  21: 20457363.886 ops/s
Iteration  22: 20209602.661 ops/s
Iteration  23: 20645265.044 ops/s
Iteration  24: 20266011.192 ops/s
Iteration  25: 19740874.083 ops/s
Iteration  26: 20696887.867 ops/s
Iteration  27: 20272400.960 ops/s
Iteration  28: 20684798.375 ops/s
Iteration  29: 20786175.291 ops/s
Iteration  30: 20690708.769 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneArray":
  20530475.461 ±(99.9%) 190191.453 ops/s [Average]
  (min, avg, max) = (19740874.083, 20530475.461, 21018620.785), stdev = 284669.636
  CI (99.9%): [20340284.008, 20720666.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  20530475.461 ± 190191.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763786.420 ops/s
# Warmup Iteration   2: 1133891.926 ops/s
# Warmup Iteration   3: 1312892.773 ops/s
# Warmup Iteration   4: 1300484.282 ops/s
# Warmup Iteration   5: 1304496.569 ops/s
# Warmup Iteration   6: 1308442.906 ops/s
# Warmup Iteration   7: 1030468.191 ops/s
# Warmup Iteration   8: 1296296.526 ops/s
# Warmup Iteration   9: 1320840.862 ops/s
# Warmup Iteration  10: 1328162.053 ops/s
# Warmup Iteration  11: 1328826.348 ops/s
# Warmup Iteration  12: 1319777.662 ops/s
# Warmup Iteration  13: 1302392.134 ops/s
# Warmup Iteration  14: 1323852.144 ops/s
# Warmup Iteration  15: 1290907.054 ops/s
# Warmup Iteration  16: 1299374.239 ops/s
# Warmup Iteration  17: 1307520.236 ops/s
# Warmup Iteration  18: 1264950.919 ops/s
# Warmup Iteration  19: 1276300.224 ops/s
# Warmup Iteration  20: 1314346.523 ops/s
# Warmup Iteration  21: 1295676.143 ops/s
# Warmup Iteration  22: 1274707.681 ops/s
# Warmup Iteration  23: 1321573.238 ops/s
# Warmup Iteration  24: 1295837.483 ops/s
# Warmup Iteration  25: 1298160.746 ops/s
# Warmup Iteration  26: 1308790.426 ops/s
# Warmup Iteration  27: 1302722.037 ops/s
# Warmup Iteration  28: 1299172.903 ops/s
# Warmup Iteration  29: 1305344.121 ops/s
# Warmup Iteration  30: 1317368.790 ops/s
Iteration   1: 1291599.629 ops/s
Iteration   2: 1312027.622 ops/s
Iteration   3: 1315067.341 ops/s
Iteration   4: 1331831.662 ops/s
Iteration   5: 1318550.073 ops/s
Iteration   6: 1311402.043 ops/s
Iteration   7: 1282088.817 ops/s
Iteration   8: 1242423.689 ops/s
Iteration   9: 1247979.046 ops/s
Iteration  10: 1234907.323 ops/s
Iteration  11: 1246079.811 ops/s
Iteration  12: 1267871.808 ops/s
Iteration  13: 1244312.956 ops/s
Iteration  14: 1288043.000 ops/s
Iteration  15: 1238377.887 ops/s
Iteration  16: 1309349.339 ops/s
Iteration  17: 1322144.594 ops/s
Iteration  18: 1307294.413 ops/s
Iteration  19: 1307451.330 ops/s
Iteration  20: 1305772.200 ops/s
Iteration  21: 1307501.621 ops/s
Iteration  22: 1323047.880 ops/s
Iteration  23: 1301746.590 ops/s
Iteration  24: 1281302.858 ops/s
Iteration  25: 1311763.743 ops/s
Iteration  26: 1287868.826 ops/s
Iteration  27: 1295934.505 ops/s
Iteration  28: 1310098.449 ops/s
Iteration  29: 1284389.076 ops/s
Iteration  30: 1298937.106 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneIterable":
  1290905.508 ±(99.9%) 18944.741 ops/s [Average]
  (min, avg, max) = (1234907.323, 1290905.508, 1331831.662), stdev = 28355.598
  CI (99.9%): [1271960.767, 1309850.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1290905.508 ± 18944.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9616437.003 ops/s
# Warmup Iteration   2: 18493151.329 ops/s
# Warmup Iteration   3: 15215237.854 ops/s
# Warmup Iteration   4: 18309599.071 ops/s
# Warmup Iteration   5: 18236206.344 ops/s
# Warmup Iteration   6: 18352720.642 ops/s
# Warmup Iteration   7: 18329174.044 ops/s
# Warmup Iteration   8: 18261389.235 ops/s
# Warmup Iteration   9: 18296236.372 ops/s
# Warmup Iteration  10: 17939736.247 ops/s
# Warmup Iteration  11: 18190148.257 ops/s
# Warmup Iteration  12: 17605275.958 ops/s
# Warmup Iteration  13: 18365829.390 ops/s
# Warmup Iteration  14: 18427163.262 ops/s
# Warmup Iteration  15: 18420488.135 ops/s
# Warmup Iteration  16: 18281656.496 ops/s
# Warmup Iteration  17: 18131638.125 ops/s
# Warmup Iteration  18: 18553426.110 ops/s
# Warmup Iteration  19: 18280696.957 ops/s
# Warmup Iteration  20: 18297729.017 ops/s
# Warmup Iteration  21: 18314888.238 ops/s
# Warmup Iteration  22: 18265957.954 ops/s
# Warmup Iteration  23: 18385261.938 ops/s
# Warmup Iteration  24: 18455103.842 ops/s
# Warmup Iteration  25: 18324043.626 ops/s
# Warmup Iteration  26: 17844610.305 ops/s
# Warmup Iteration  27: 17731331.319 ops/s
# Warmup Iteration  28: 18237400.842 ops/s
# Warmup Iteration  29: 18312401.086 ops/s
# Warmup Iteration  30: 17724244.418 ops/s
Iteration   1: 18204530.251 ops/s
Iteration   2: 18252492.216 ops/s
Iteration   3: 18079302.716 ops/s
Iteration   4: 18264302.592 ops/s
Iteration   5: 17690015.919 ops/s
Iteration   6: 18341004.919 ops/s
Iteration   7: 15509884.760 ops/s
Iteration   8: 17203489.287 ops/s
Iteration   9: 17628705.907 ops/s
Iteration  10: 17479660.868 ops/s
Iteration  11: 18028791.695 ops/s
Iteration  12: 17500635.936 ops/s
Iteration  13: 18131725.834 ops/s
Iteration  14: 18304683.768 ops/s
Iteration  15: 18384418.818 ops/s
Iteration  16: 18242999.976 ops/s
Iteration  17: 18553699.651 ops/s
Iteration  18: 18402837.969 ops/s
Iteration  19: 17942327.739 ops/s
Iteration  20: 18431918.201 ops/s
Iteration  21: 18284958.357 ops/s
Iteration  22: 18465626.912 ops/s
Iteration  23: 17960890.574 ops/s
Iteration  24: 17991990.377 ops/s
Iteration  25: 17473643.559 ops/s
Iteration  26: 17843363.141 ops/s
Iteration  27: 18488248.931 ops/s
Iteration  28: 18501059.067 ops/s
Iteration  29: 18395896.284 ops/s
Iteration  30: 18259677.719 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_count":
  18008092.798 ±(99.9%) 395778.569 ops/s [Average]
  (min, avg, max) = (15509884.760, 18008092.798, 18553699.651), stdev = 592382.776
  CI (99.9%): [17612314.229, 18403871.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_count  thrpt   30  18008092.798 ± 395778.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10869453.112 ops/s
# Warmup Iteration   2: 21038679.426 ops/s
# Warmup Iteration   3: 18481908.555 ops/s
# Warmup Iteration   4: 21400317.539 ops/s
# Warmup Iteration   5: 22055757.865 ops/s
# Warmup Iteration   6: 21538681.076 ops/s
# Warmup Iteration   7: 21958796.391 ops/s
# Warmup Iteration   8: 21426919.879 ops/s
# Warmup Iteration   9: 22146761.478 ops/s
# Warmup Iteration  10: 21800088.152 ops/s
# Warmup Iteration  11: 22048760.866 ops/s
# Warmup Iteration  12: 21852565.740 ops/s
# Warmup Iteration  13: 21353850.223 ops/s
# Warmup Iteration  14: 21815057.783 ops/s
# Warmup Iteration  15: 21665540.312 ops/s
# Warmup Iteration  16: 21992318.194 ops/s
# Warmup Iteration  17: 21828356.937 ops/s
# Warmup Iteration  18: 21522541.285 ops/s
# Warmup Iteration  19: 21688124.844 ops/s
# Warmup Iteration  20: 21245329.579 ops/s
# Warmup Iteration  21: 21332961.425 ops/s
# Warmup Iteration  22: 22260519.704 ops/s
# Warmup Iteration  23: 22162809.261 ops/s
# Warmup Iteration  24: 21086193.749 ops/s
# Warmup Iteration  25: 21236020.558 ops/s
# Warmup Iteration  26: 21567007.692 ops/s
# Warmup Iteration  27: 21666633.198 ops/s
# Warmup Iteration  28: 21164888.870 ops/s
# Warmup Iteration  29: 22248980.049 ops/s
# Warmup Iteration  30: 21259587.550 ops/s
Iteration   1: 21907892.140 ops/s
Iteration   2: 21527000.296 ops/s
Iteration   3: 21773980.937 ops/s
Iteration   4: 21868929.690 ops/s
Iteration   5: 22052355.173 ops/s
Iteration   6: 21793406.038 ops/s
Iteration   7: 22013511.622 ops/s
Iteration   8: 22291911.194 ops/s
Iteration   9: 22153943.377 ops/s
Iteration  10: 21972942.198 ops/s
Iteration  11: 22090419.673 ops/s
Iteration  12: 21918149.162 ops/s
Iteration  13: 21704949.593 ops/s
Iteration  14: 21960092.783 ops/s
Iteration  15: 22168667.022 ops/s
Iteration  16: 21919541.578 ops/s
Iteration  17: 22195196.727 ops/s
Iteration  18: 22098688.578 ops/s
Iteration  19: 21730263.923 ops/s
Iteration  20: 22085725.202 ops/s
Iteration  21: 22120727.557 ops/s
Iteration  22: 21831953.262 ops/s
Iteration  23: 21113388.220 ops/s
Iteration  24: 21213149.127 ops/s
Iteration  25: 21584563.164 ops/s
Iteration  26: 21199024.545 ops/s
Iteration  27: 21173706.658 ops/s
Iteration  28: 21189114.427 ops/s
Iteration  29: 21288243.055 ops/s
Iteration  30: 21681735.138 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_detectIfNone":
  21787439.069 ±(99.9%) 234645.046 ops/s [Average]
  (min, avg, max) = (21113388.220, 21787439.069, 22291911.194), stdev = 351205.685
  CI (99.9%): [21552794.023, 22022084.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  21787439.069 ± 234645.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12350136.855 ops/s
# Warmup Iteration   2: 19715520.514 ops/s
# Warmup Iteration   3: 23177498.892 ops/s
# Warmup Iteration   4: 23463096.466 ops/s
# Warmup Iteration   5: 23713876.696 ops/s
# Warmup Iteration   6: 23063532.338 ops/s
# Warmup Iteration   7: 23429825.296 ops/s
# Warmup Iteration   8: 23446360.172 ops/s
# Warmup Iteration   9: 22547540.766 ops/s
# Warmup Iteration  10: 23664058.775 ops/s
# Warmup Iteration  11: 23302581.798 ops/s
# Warmup Iteration  12: 23603355.565 ops/s
# Warmup Iteration  13: 23725581.687 ops/s
# Warmup Iteration  14: 23878665.582 ops/s
# Warmup Iteration  15: 23966509.537 ops/s
# Warmup Iteration  16: 23711302.698 ops/s
# Warmup Iteration  17: 23455144.156 ops/s
# Warmup Iteration  18: 23437697.025 ops/s
# Warmup Iteration  19: 23510752.768 ops/s
# Warmup Iteration  20: 23887232.143 ops/s
# Warmup Iteration  21: 23631553.380 ops/s
# Warmup Iteration  22: 23421905.740 ops/s
# Warmup Iteration  23: 23750715.658 ops/s
# Warmup Iteration  24: 23791504.242 ops/s
# Warmup Iteration  25: 24030333.382 ops/s
# Warmup Iteration  26: 23922431.159 ops/s
# Warmup Iteration  27: 23724265.940 ops/s
# Warmup Iteration  28: 23194165.070 ops/s
# Warmup Iteration  29: 22875000.770 ops/s
# Warmup Iteration  30: 23130663.108 ops/s
Iteration   1: 22587812.140 ops/s
Iteration   2: 23657369.292 ops/s
Iteration   3: 22912138.937 ops/s
Iteration   4: 23743223.767 ops/s
Iteration   5: 23512291.812 ops/s
Iteration   6: 23526406.510 ops/s
Iteration   7: 23403005.127 ops/s
Iteration   8: 23329487.418 ops/s
Iteration   9: 23195831.342 ops/s
Iteration  10: 22926612.438 ops/s
Iteration  11: 23033354.208 ops/s
Iteration  12: 23122903.931 ops/s
Iteration  13: 23712852.073 ops/s
Iteration  14: 22925585.256 ops/s
Iteration  15: 23208666.566 ops/s
Iteration  16: 22923194.991 ops/s
Iteration  17: 23536603.698 ops/s
Iteration  18: 23456570.611 ops/s
Iteration  19: 23858117.265 ops/s
Iteration  20: 23310328.712 ops/s
Iteration  21: 23638574.346 ops/s
Iteration  22: 23810816.347 ops/s
Iteration  23: 22892435.623 ops/s
Iteration  24: 23829216.718 ops/s
Iteration  25: 23619243.595 ops/s
Iteration  26: 23695630.392 ops/s
Iteration  27: 23639511.433 ops/s
Iteration  28: 23425493.223 ops/s
Iteration  29: 23620984.730 ops/s
Iteration  30: 23414091.476 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEach":
  23382278.466 ±(99.9%) 226042.990 ops/s [Average]
  (min, avg, max) = (22587812.140, 23382278.466, 23858117.265), stdev = 338330.532
  CI (99.9%): [23156235.476, 23608321.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_forEach  thrpt   30  23382278.466 ± 226042.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8212381.057 ops/s
# Warmup Iteration   2: 16240900.059 ops/s
# Warmup Iteration   3: 13822540.779 ops/s
# Warmup Iteration   4: 16769607.437 ops/s
# Warmup Iteration   5: 17012796.112 ops/s
# Warmup Iteration   6: 16756855.095 ops/s
# Warmup Iteration   7: 16630622.644 ops/s
# Warmup Iteration   8: 16602729.851 ops/s
# Warmup Iteration   9: 16237818.633 ops/s
# Warmup Iteration  10: 16669081.414 ops/s
# Warmup Iteration  11: 16756370.950 ops/s
# Warmup Iteration  12: 16454776.642 ops/s
# Warmup Iteration  13: 16602446.605 ops/s
# Warmup Iteration  14: 16813648.101 ops/s
# Warmup Iteration  15: 16818484.128 ops/s
# Warmup Iteration  16: 16852475.613 ops/s
# Warmup Iteration  17: 16878020.035 ops/s
# Warmup Iteration  18: 16787353.444 ops/s
# Warmup Iteration  19: 16668707.924 ops/s
# Warmup Iteration  20: 16265093.028 ops/s
# Warmup Iteration  21: 16899920.401 ops/s
# Warmup Iteration  22: 16812137.977 ops/s
# Warmup Iteration  23: 16487097.066 ops/s
# Warmup Iteration  24: 16254582.493 ops/s
# Warmup Iteration  25: 16527934.848 ops/s
# Warmup Iteration  26: 16462685.320 ops/s
# Warmup Iteration  27: 16252597.179 ops/s
# Warmup Iteration  28: 16396035.099 ops/s
# Warmup Iteration  29: 17028315.795 ops/s
# Warmup Iteration  30: 16951074.102 ops/s
Iteration   1: 16413934.525 ops/s
Iteration   2: 16060690.563 ops/s
Iteration   3: 16561816.510 ops/s
Iteration   4: 16245988.565 ops/s
Iteration   5: 16073489.864 ops/s
Iteration   6: 15713159.839 ops/s
Iteration   7: 16697740.227 ops/s
Iteration   8: 16712523.429 ops/s
Iteration   9: 16703658.987 ops/s
Iteration  10: 16843867.872 ops/s
Iteration  11: 16765826.623 ops/s
Iteration  12: 17191983.233 ops/s
Iteration  13: 16878194.562 ops/s
Iteration  14: 16484099.270 ops/s
Iteration  15: 16788735.125 ops/s
Iteration  16: 16929845.688 ops/s
Iteration  17: 16588735.850 ops/s
Iteration  18: 17072423.309 ops/s
Iteration  19: 16993724.933 ops/s
Iteration  20: 16732345.795 ops/s
Iteration  21: 16857650.395 ops/s
Iteration  22: 16964415.382 ops/s
Iteration  23: 16390083.318 ops/s
Iteration  24: 16207802.547 ops/s
Iteration  25: 15860696.795 ops/s
Iteration  26: 16266875.517 ops/s
Iteration  27: 16406655.990 ops/s
Iteration  28: 16797168.341 ops/s
Iteration  29: 16322425.591 ops/s
Iteration  30: 16288718.725 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences":
  16560509.246 ±(99.9%) 244237.003 ops/s [Average]
  (min, avg, max) = (15713159.839, 16560509.246, 17191983.233), stdev = 365562.476
  CI (99.9%): [16316272.243, 16804746.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  16560509.246 ± 244237.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24338700.986 ops/s
# Warmup Iteration   2: 41361414.503 ops/s
# Warmup Iteration   3: 49769527.651 ops/s
# Warmup Iteration   4: 49120806.072 ops/s
# Warmup Iteration   5: 50269014.933 ops/s
# Warmup Iteration   6: 49658019.165 ops/s
# Warmup Iteration   7: 49748140.549 ops/s
# Warmup Iteration   8: 50064840.683 ops/s
# Warmup Iteration   9: 49744993.788 ops/s
# Warmup Iteration  10: 49442882.622 ops/s
# Warmup Iteration  11: 49796032.970 ops/s
# Warmup Iteration  12: 49635458.716 ops/s
# Warmup Iteration  13: 49834354.648 ops/s
# Warmup Iteration  14: 49709373.112 ops/s
# Warmup Iteration  15: 49668809.561 ops/s
# Warmup Iteration  16: 50110456.596 ops/s
# Warmup Iteration  17: 49918806.387 ops/s
# Warmup Iteration  18: 49363696.867 ops/s
# Warmup Iteration  19: 49869905.453 ops/s
# Warmup Iteration  20: 49995705.190 ops/s
# Warmup Iteration  21: 49001366.809 ops/s
# Warmup Iteration  22: 50161186.370 ops/s
# Warmup Iteration  23: 49959159.758 ops/s
# Warmup Iteration  24: 49087735.753 ops/s
# Warmup Iteration  25: 49925082.476 ops/s
# Warmup Iteration  26: 50108348.934 ops/s
# Warmup Iteration  27: 49427847.321 ops/s
# Warmup Iteration  28: 49572599.844 ops/s
# Warmup Iteration  29: 48799832.544 ops/s
# Warmup Iteration  30: 47311672.095 ops/s
Iteration   1: 48373561.293 ops/s
Iteration   2: 48013946.929 ops/s
Iteration   3: 49346398.612 ops/s
Iteration   4: 49741915.117 ops/s
Iteration   5: 47761696.927 ops/s
Iteration   6: 49436148.237 ops/s
Iteration   7: 49251501.580 ops/s
Iteration   8: 49430930.295 ops/s
Iteration   9: 47881041.166 ops/s
Iteration  10: 48275144.606 ops/s
Iteration  11: 49533118.926 ops/s
Iteration  12: 49139898.270 ops/s
Iteration  13: 50229076.611 ops/s
Iteration  14: 48904652.659 ops/s
Iteration  15: 48634163.219 ops/s
Iteration  16: 47687085.984 ops/s
Iteration  17: 49379681.757 ops/s
Iteration  18: 49046745.986 ops/s
Iteration  19: 48178757.410 ops/s
Iteration  20: 48085631.450 ops/s
Iteration  21: 48955771.584 ops/s
Iteration  22: 48027506.549 ops/s
Iteration  23: 49879031.827 ops/s
Iteration  24: 49217874.068 ops/s
Iteration  25: 47867119.332 ops/s
Iteration  26: 48447902.728 ops/s
Iteration  27: 49366677.051 ops/s
Iteration  28: 48969375.916 ops/s
Iteration  29: 48693301.660 ops/s
Iteration  30: 47985345.156 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_injectInto":
  48791366.764 ±(99.9%) 471324.519 ops/s [Average]
  (min, avg, max) = (47687085.984, 48791366.764, 50229076.611), stdev = 705456.404
  CI (99.9%): [48320042.245, 49262691.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_injectInto  thrpt   30  48791366.764 ± 471324.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1943749.763 ops/s
# Warmup Iteration   2: 3075326.895 ops/s
# Warmup Iteration   3: 3625946.853 ops/s
# Warmup Iteration   4: 3529554.680 ops/s
# Warmup Iteration   5: 3570092.456 ops/s
# Warmup Iteration   6: 3573241.939 ops/s
# Warmup Iteration   7: 3651195.721 ops/s
# Warmup Iteration   8: 3598142.219 ops/s
# Warmup Iteration   9: 3567274.621 ops/s
# Warmup Iteration  10: 3630768.071 ops/s
# Warmup Iteration  11: 3654517.944 ops/s
# Warmup Iteration  12: 3642245.157 ops/s
# Warmup Iteration  13: 3645969.462 ops/s
# Warmup Iteration  14: 3642786.614 ops/s
# Warmup Iteration  15: 3670445.789 ops/s
# Warmup Iteration  16: 3655405.736 ops/s
# Warmup Iteration  17: 3642772.558 ops/s
# Warmup Iteration  18: 3641160.562 ops/s
# Warmup Iteration  19: 3627934.248 ops/s
# Warmup Iteration  20: 3647724.936 ops/s
# Warmup Iteration  21: 3633656.433 ops/s
# Warmup Iteration  22: 3622641.854 ops/s
# Warmup Iteration  23: 3663900.844 ops/s
# Warmup Iteration  24: 3602782.176 ops/s
# Warmup Iteration  25: 3581437.551 ops/s
# Warmup Iteration  26: 3631494.532 ops/s
# Warmup Iteration  27: 3635431.298 ops/s
# Warmup Iteration  28: 3603170.781 ops/s
# Warmup Iteration  29: 3647456.514 ops/s
# Warmup Iteration  30: 3600463.692 ops/s
Iteration   1: 3593202.217 ops/s
Iteration   2: 3647259.728 ops/s
Iteration   3: 3577814.889 ops/s
Iteration   4: 3660938.677 ops/s
Iteration   5: 3643101.173 ops/s
Iteration   6: 3641658.279 ops/s
Iteration   7: 3564035.014 ops/s
Iteration   8: 3609206.847 ops/s
Iteration   9: 3633586.563 ops/s
Iteration  10: 3648186.730 ops/s
Iteration  11: 3654485.109 ops/s
Iteration  12: 3605572.141 ops/s
Iteration  13: 3631675.454 ops/s
Iteration  14: 3628043.553 ops/s
Iteration  15: 3594051.812 ops/s
Iteration  16: 3684155.714 ops/s
Iteration  17: 3686068.326 ops/s
Iteration  18: 3661033.549 ops/s
Iteration  19: 3616111.076 ops/s
Iteration  20: 3659590.388 ops/s
Iteration  21: 3694531.930 ops/s
Iteration  22: 3658416.924 ops/s
Iteration  23: 3674586.409 ops/s
Iteration  24: 3681265.937 ops/s
Iteration  25: 3614893.260 ops/s
Iteration  26: 3654406.125 ops/s
Iteration  27: 3657768.088 ops/s
Iteration  28: 3637416.251 ops/s
Iteration  29: 3607270.230 ops/s
Iteration  30: 3607130.895 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_isEmpty":
  3637582.110 ±(99.9%) 22166.978 ops/s [Average]
  (min, avg, max) = (3564035.014, 3637582.110, 3694531.930), stdev = 33178.492
  CI (99.9%): [3615415.131, 3659749.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_isEmpty  thrpt   30  3637582.110 ± 22166.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781493.340 ops/s
# Warmup Iteration   2: 769287.772 ops/s
# Warmup Iteration   3: 1034170.370 ops/s
# Warmup Iteration   4: 1038474.196 ops/s
# Warmup Iteration   5: 1038025.193 ops/s
# Warmup Iteration   6: 1047342.481 ops/s
# Warmup Iteration   7: 1034572.540 ops/s
# Warmup Iteration   8: 1036860.240 ops/s
# Warmup Iteration   9: 1041353.248 ops/s
# Warmup Iteration  10: 1034209.903 ops/s
# Warmup Iteration  11: 1043984.016 ops/s
# Warmup Iteration  12: 874718.218 ops/s
# Warmup Iteration  13: 1000754.189 ops/s
# Warmup Iteration  14: 996770.183 ops/s
# Warmup Iteration  15: 1032290.546 ops/s
# Warmup Iteration  16: 1031461.943 ops/s
# Warmup Iteration  17: 1087218.994 ops/s
# Warmup Iteration  18: 1105335.996 ops/s
# Warmup Iteration  19: 1090354.123 ops/s
# Warmup Iteration  20: 1109217.011 ops/s
# Warmup Iteration  21: 1106065.777 ops/s
# Warmup Iteration  22: 1099092.192 ops/s
# Warmup Iteration  23: 1113664.784 ops/s
# Warmup Iteration  24: 1118537.241 ops/s
# Warmup Iteration  25: 1107530.067 ops/s
# Warmup Iteration  26: 1102890.224 ops/s
# Warmup Iteration  27: 1101416.751 ops/s
# Warmup Iteration  28: 1110672.553 ops/s
# Warmup Iteration  29: 1093907.963 ops/s
# Warmup Iteration  30: 1084367.610 ops/s
Iteration   1: 1108229.218 ops/s
Iteration   2: 1100031.446 ops/s
Iteration   3: 1097783.140 ops/s
Iteration   4: 1108569.806 ops/s
Iteration   5: 1059084.478 ops/s
Iteration   6: 1058135.576 ops/s
Iteration   7: 919408.814 ops/s
Iteration   8: 1095936.331 ops/s
Iteration   9: 1092444.001 ops/s
Iteration  10: 1106629.058 ops/s
Iteration  11: 1101876.545 ops/s
Iteration  12: 1105623.009 ops/s
Iteration  13: 1094577.783 ops/s
Iteration  14: 1100573.763 ops/s
Iteration  15: 1101309.795 ops/s
Iteration  16: 1101129.910 ops/s
Iteration  17: 1095219.173 ops/s
Iteration  18: 1088409.448 ops/s
Iteration  19: 1103228.744 ops/s
Iteration  20: 1106640.794 ops/s
Iteration  21: 1101347.186 ops/s
Iteration  22: 1112559.904 ops/s
Iteration  23: 1123668.372 ops/s
Iteration  24: 1108351.355 ops/s
Iteration  25: 1081933.219 ops/s
Iteration  26: 1109694.774 ops/s
Iteration  27: 1096456.107 ops/s
Iteration  28: 1096019.561 ops/s
Iteration  29: 1111638.191 ops/s
Iteration  30: 1102714.820 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws":
  1092974.144 ±(99.9%) 23697.261 ops/s [Average]
  (min, avg, max) = (919408.814, 1092974.144, 1123668.372), stdev = 35468.947
  CI (99.9%): [1069276.883, 1116671.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1092974.144 ± 23697.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 778194.971 ops/s
# Warmup Iteration   2: 797310.165 ops/s
# Warmup Iteration   3: 1025010.970 ops/s
# Warmup Iteration   4: 1045555.114 ops/s
# Warmup Iteration   5: 1015565.248 ops/s
# Warmup Iteration   6: 1044619.060 ops/s
# Warmup Iteration   7: 1053816.551 ops/s
# Warmup Iteration   8: 1012381.692 ops/s
# Warmup Iteration   9: 1064929.297 ops/s
# Warmup Iteration  10: 1047043.782 ops/s
# Warmup Iteration  11: 1036173.028 ops/s
# Warmup Iteration  12: 891530.692 ops/s
# Warmup Iteration  13: 1037707.396 ops/s
# Warmup Iteration  14: 1044493.450 ops/s
# Warmup Iteration  15: 1052604.784 ops/s
# Warmup Iteration  16: 1044461.293 ops/s
# Warmup Iteration  17: 1117253.254 ops/s
# Warmup Iteration  18: 1122377.749 ops/s
# Warmup Iteration  19: 1132120.059 ops/s
# Warmup Iteration  20: 1099677.760 ops/s
# Warmup Iteration  21: 1122681.518 ops/s
# Warmup Iteration  22: 1117901.227 ops/s
# Warmup Iteration  23: 1123278.207 ops/s
# Warmup Iteration  24: 1095125.647 ops/s
# Warmup Iteration  25: 1122732.227 ops/s
# Warmup Iteration  26: 1125432.055 ops/s
# Warmup Iteration  27: 1119691.715 ops/s
# Warmup Iteration  28: 1127614.306 ops/s
# Warmup Iteration  29: 1135384.197 ops/s
# Warmup Iteration  30: 1127728.225 ops/s
Iteration   1: 1127121.421 ops/s
Iteration   2: 1108245.014 ops/s
Iteration   3: 1134030.910 ops/s
Iteration   4: 1134303.976 ops/s
Iteration   5: 1128854.685 ops/s
Iteration   6: 1127661.191 ops/s
Iteration   7: 1136417.507 ops/s
Iteration   8: 1130258.304 ops/s
Iteration   9: 1133132.555 ops/s
Iteration  10: 1136083.267 ops/s
Iteration  11: 1138901.020 ops/s
Iteration  12: 1127531.161 ops/s
Iteration  13: 1134704.755 ops/s
Iteration  14: 1130777.179 ops/s
Iteration  15: 1120110.504 ops/s
Iteration  16: 1129737.287 ops/s
Iteration  17: 1131883.566 ops/s
Iteration  18: 1139281.147 ops/s
Iteration  19: 1133507.907 ops/s
Iteration  20: 1133043.601 ops/s
Iteration  21: 1132275.978 ops/s
Iteration  22: 1129051.021 ops/s
Iteration  23: 1131321.204 ops/s
Iteration  24: 1132231.533 ops/s
Iteration  25: 1139413.196 ops/s
Iteration  26: 1138741.487 ops/s
Iteration  27: 1119447.064 ops/s
Iteration  28: 1135035.189 ops/s
Iteration  29: 1119440.186 ops/s
Iteration  30: 1134145.098 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1130889.630 ±(99.9%) 4554.864 ops/s [Average]
  (min, avg, max) = (1108245.014, 1130889.630, 1139413.196), stdev = 6817.506
  CI (99.9%): [1126334.767, 1135444.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1130889.630 ± 4554.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 784082.022 ops/s
# Warmup Iteration   2: 796015.531 ops/s
# Warmup Iteration   3: 1042651.621 ops/s
# Warmup Iteration   4: 1024502.584 ops/s
# Warmup Iteration   5: 1042729.272 ops/s
# Warmup Iteration   6: 1044115.517 ops/s
# Warmup Iteration   7: 1033682.806 ops/s
# Warmup Iteration   8: 1037587.671 ops/s
# Warmup Iteration   9: 1042064.322 ops/s
# Warmup Iteration  10: 1043329.356 ops/s
# Warmup Iteration  11: 1035627.193 ops/s
# Warmup Iteration  12: 884306.820 ops/s
# Warmup Iteration  13: 1029781.351 ops/s
# Warmup Iteration  14: 1040150.416 ops/s
# Warmup Iteration  15: 1041646.307 ops/s
# Warmup Iteration  16: 1038420.287 ops/s
# Warmup Iteration  17: 1110340.550 ops/s
# Warmup Iteration  18: 1102295.397 ops/s
# Warmup Iteration  19: 1100379.984 ops/s
# Warmup Iteration  20: 1112593.308 ops/s
# Warmup Iteration  21: 1110059.672 ops/s
# Warmup Iteration  22: 1098218.560 ops/s
# Warmup Iteration  23: 1093297.214 ops/s
# Warmup Iteration  24: 1103992.843 ops/s
# Warmup Iteration  25: 1097240.782 ops/s
# Warmup Iteration  26: 1080960.652 ops/s
# Warmup Iteration  27: 1104849.078 ops/s
# Warmup Iteration  28: 1101750.838 ops/s
# Warmup Iteration  29: 1107739.564 ops/s
# Warmup Iteration  30: 1100205.372 ops/s
Iteration   1: 1104443.726 ops/s
Iteration   2: 1102932.474 ops/s
Iteration   3: 1103119.779 ops/s
Iteration   4: 1108722.003 ops/s
Iteration   5: 1113536.446 ops/s
Iteration   6: 1103011.466 ops/s
Iteration   7: 1081196.300 ops/s
Iteration   8: 1080382.389 ops/s
Iteration   9: 1085344.578 ops/s
Iteration  10: 1077223.935 ops/s
Iteration  11: 1105558.568 ops/s
Iteration  12: 1107617.921 ops/s
Iteration  13: 1111041.795 ops/s
Iteration  14: 1079684.338 ops/s
Iteration  15: 1091544.435 ops/s
Iteration  16: 1097725.909 ops/s
Iteration  17: 1077391.891 ops/s
Iteration  18: 1103518.129 ops/s
Iteration  19: 1107427.942 ops/s
Iteration  20: 1100071.989 ops/s
Iteration  21: 1098949.717 ops/s
Iteration  22: 1111533.971 ops/s
Iteration  23: 1092241.486 ops/s
Iteration  24: 1098828.411 ops/s
Iteration  25: 1106174.989 ops/s
Iteration  26: 1104963.403 ops/s
Iteration  27: 1096299.395 ops/s
Iteration  28: 1103923.833 ops/s
Iteration  29: 1096431.980 ops/s
Iteration  30: 1108594.445 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1098647.921 ±(99.9%) 7209.321 ops/s [Average]
  (min, avg, max) = (1077223.935, 1098647.921, 1113536.446), stdev = 10790.573
  CI (99.9%): [1091438.600, 1105857.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1098647.921 ± 7209.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40578231.400 ops/s
# Warmup Iteration   2: 62430730.599 ops/s
# Warmup Iteration   3: 67552494.105 ops/s
# Warmup Iteration   4: 66937908.136 ops/s
# Warmup Iteration   5: 67942286.341 ops/s
# Warmup Iteration   6: 66275133.808 ops/s
# Warmup Iteration   7: 66729314.903 ops/s
# Warmup Iteration   8: 67607497.563 ops/s
# Warmup Iteration   9: 67859451.994 ops/s
# Warmup Iteration  10: 66997618.299 ops/s
# Warmup Iteration  11: 67682505.578 ops/s
# Warmup Iteration  12: 67763614.828 ops/s
# Warmup Iteration  13: 67842387.918 ops/s
# Warmup Iteration  14: 67780825.481 ops/s
# Warmup Iteration  15: 67208733.317 ops/s
# Warmup Iteration  16: 67136916.424 ops/s
# Warmup Iteration  17: 67247990.647 ops/s
# Warmup Iteration  18: 67937797.432 ops/s
# Warmup Iteration  19: 67317319.694 ops/s
# Warmup Iteration  20: 67869951.669 ops/s
# Warmup Iteration  21: 67231475.821 ops/s
# Warmup Iteration  22: 67518964.711 ops/s
# Warmup Iteration  23: 67677205.548 ops/s
# Warmup Iteration  24: 67560485.931 ops/s
# Warmup Iteration  25: 67565463.422 ops/s
# Warmup Iteration  26: 67193850.437 ops/s
# Warmup Iteration  27: 67650534.375 ops/s
# Warmup Iteration  28: 66821275.678 ops/s
# Warmup Iteration  29: 66750295.391 ops/s
# Warmup Iteration  30: 66448364.870 ops/s
Iteration   1: 66776935.043 ops/s
Iteration   2: 67377870.969 ops/s
Iteration   3: 67987496.960 ops/s
Iteration   4: 67094344.447 ops/s
Iteration   5: 67339802.294 ops/s
Iteration   6: 67745258.087 ops/s
Iteration   7: 67562632.516 ops/s
Iteration   8: 67338660.228 ops/s
Iteration   9: 66911407.110 ops/s
Iteration  10: 67708000.368 ops/s
Iteration  11: 66922910.769 ops/s
Iteration  12: 66626347.212 ops/s
Iteration  13: 67920328.517 ops/s
Iteration  14: 67097491.299 ops/s
Iteration  15: 67632929.566 ops/s
Iteration  16: 67921378.615 ops/s
Iteration  17: 67849539.612 ops/s
Iteration  18: 67837297.803 ops/s
Iteration  19: 67820106.195 ops/s
Iteration  20: 66891814.086 ops/s
Iteration  21: 66673818.809 ops/s
Iteration  22: 67719687.391 ops/s
Iteration  23: 67931591.703 ops/s
Iteration  24: 68096336.084 ops/s
Iteration  25: 67784222.312 ops/s
Iteration  26: 67472990.450 ops/s
Iteration  27: 67372554.735 ops/s
Iteration  28: 67497338.017 ops/s
Iteration  29: 67868118.157 ops/s
Iteration  30: 67040904.195 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove":
  67460670.452 ±(99.9%) 289748.247 ops/s [Average]
  (min, avg, max) = (66626347.212, 67460670.452, 68096336.084), stdev = 433681.569
  CI (99.9%): [67170922.204, 67750418.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_consecutive_invocation_of_remove  thrpt   30  67460670.452 ± 289748.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738999.424 ops/s
# Warmup Iteration   2: 831675.399 ops/s
# Warmup Iteration   3: 1025836.784 ops/s
# Warmup Iteration   4: 1025946.137 ops/s
# Warmup Iteration   5: 1020383.159 ops/s
# Warmup Iteration   6: 1014418.606 ops/s
# Warmup Iteration   7: 1006719.966 ops/s
# Warmup Iteration   8: 1016356.775 ops/s
# Warmup Iteration   9: 1017520.041 ops/s
# Warmup Iteration  10: 848919.205 ops/s
# Warmup Iteration  11: 1017354.370 ops/s
# Warmup Iteration  12: 1021460.947 ops/s
# Warmup Iteration  13: 1004328.704 ops/s
# Warmup Iteration  14: 1005866.227 ops/s
# Warmup Iteration  15: 1009901.878 ops/s
# Warmup Iteration  16: 1020199.167 ops/s
# Warmup Iteration  17: 1070996.700 ops/s
# Warmup Iteration  18: 1067899.321 ops/s
# Warmup Iteration  19: 1073588.759 ops/s
# Warmup Iteration  20: 1079519.767 ops/s
# Warmup Iteration  21: 1066978.061 ops/s
# Warmup Iteration  22: 1073913.661 ops/s
# Warmup Iteration  23: 1070604.938 ops/s
# Warmup Iteration  24: 1071961.917 ops/s
# Warmup Iteration  25: 1082204.004 ops/s
# Warmup Iteration  26: 1046524.604 ops/s
# Warmup Iteration  27: 1070258.846 ops/s
# Warmup Iteration  28: 1045219.697 ops/s
# Warmup Iteration  29: 1081104.172 ops/s
# Warmup Iteration  30: 1075169.881 ops/s
Iteration   1: 1081360.977 ops/s
Iteration   2: 1076008.937 ops/s
Iteration   3: 1081234.411 ops/s
Iteration   4: 1069687.630 ops/s
Iteration   5: 1063814.664 ops/s
Iteration   6: 1069482.422 ops/s
Iteration   7: 1080335.708 ops/s
Iteration   8: 1069002.263 ops/s
Iteration   9: 1071876.587 ops/s
Iteration  10: 1084903.500 ops/s
Iteration  11: 1078497.306 ops/s
Iteration  12: 1056114.431 ops/s
Iteration  13: 1050648.756 ops/s
Iteration  14: 1055221.711 ops/s
Iteration  15: 1084583.500 ops/s
Iteration  16: 1057655.387 ops/s
Iteration  17: 1072348.866 ops/s
Iteration  18: 1084800.449 ops/s
Iteration  19: 1077115.537 ops/s
Iteration  20: 1066958.162 ops/s
Iteration  21: 1069637.205 ops/s
Iteration  22: 1077062.747 ops/s
Iteration  23: 1074467.583 ops/s
Iteration  24: 1071059.511 ops/s
Iteration  25: 1071024.777 ops/s
Iteration  26: 1076068.119 ops/s
Iteration  27: 1079017.689 ops/s
Iteration  28: 1071307.047 ops/s
Iteration  29: 1016261.677 ops/s
Iteration  30: 1013546.923 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next":
  1068370.149 ±(99.9%) 11342.281 ops/s [Average]
  (min, avg, max) = (1013546.923, 1068370.149, 1084903.500), stdev = 16976.593
  CI (99.9%): [1057027.868, 1079712.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_iterator_throws_on_invocation_of_remove_before_next  thrpt   30  1068370.149 ± 11342.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 952404.731 ops/s
# Warmup Iteration   2: 2005693.091 ops/s
# Warmup Iteration   3: 1746307.250 ops/s
# Warmup Iteration   4: 1851121.975 ops/s
# Warmup Iteration   5: 1905115.540 ops/s
# Warmup Iteration   6: 2011711.953 ops/s
# Warmup Iteration   7: 2014949.663 ops/s
# Warmup Iteration   8: 1996801.618 ops/s
# Warmup Iteration   9: 2033320.576 ops/s
# Warmup Iteration  10: 2026130.715 ops/s
# Warmup Iteration  11: 2024935.633 ops/s
# Warmup Iteration  12: 2016232.243 ops/s
# Warmup Iteration  13: 2020093.857 ops/s
# Warmup Iteration  14: 2027530.242 ops/s
# Warmup Iteration  15: 2026153.257 ops/s
# Warmup Iteration  16: 2032116.969 ops/s
# Warmup Iteration  17: 2053346.687 ops/s
# Warmup Iteration  18: 2047998.478 ops/s
# Warmup Iteration  19: 2002352.055 ops/s
# Warmup Iteration  20: 2012737.414 ops/s
# Warmup Iteration  21: 2026679.250 ops/s
# Warmup Iteration  22: 2019844.124 ops/s
# Warmup Iteration  23: 2020367.727 ops/s
# Warmup Iteration  24: 2031972.803 ops/s
# Warmup Iteration  25: 2039276.022 ops/s
# Warmup Iteration  26: 2022701.874 ops/s
# Warmup Iteration  27: 2024316.054 ops/s
# Warmup Iteration  28: 1933491.589 ops/s
# Warmup Iteration  29: 1979949.620 ops/s
# Warmup Iteration  30: 1954683.527 ops/s
Iteration   1: 1973005.220 ops/s
Iteration   2: 2022573.976 ops/s
Iteration   3: 1918882.247 ops/s
Iteration   4: 1956370.787 ops/s
Iteration   5: 1940234.543 ops/s
Iteration   6: 1983823.309 ops/s
Iteration   7: 1992689.188 ops/s
Iteration   8: 2001372.248 ops/s
Iteration   9: 1958093.707 ops/s
Iteration  10: 1926454.029 ops/s
Iteration  11: 1956877.789 ops/s
Iteration  12: 2009066.995 ops/s
Iteration  13: 2016103.046 ops/s
Iteration  14: 1987495.683 ops/s
Iteration  15: 2024689.139 ops/s
Iteration  16: 2007424.421 ops/s
Iteration  17: 1926031.914 ops/s
Iteration  18: 1983519.963 ops/s
Iteration  19: 1962234.382 ops/s
Iteration  20: 2022251.967 ops/s
Iteration  21: 2022611.858 ops/s
Iteration  22: 2008622.118 ops/s
Iteration  23: 2009313.457 ops/s
Iteration  24: 1925033.645 ops/s
Iteration  25: 1947002.813 ops/s
Iteration  26: 1967197.967 ops/s
Iteration  27: 2049941.683 ops/s
Iteration  28: 2018076.604 ops/s
Iteration  29: 2031929.546 ops/s
Iteration  30: 2013644.072 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_makeString":
  1985418.944 ±(99.9%) 24591.167 ops/s [Average]
  (min, avg, max) = (1918882.247, 1985418.944, 2049941.683), stdev = 36806.903
  CI (99.9%): [1960827.777, 2010010.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_makeString  thrpt   30  1985418.944 ± 24591.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8205314.437 ops/s
# Warmup Iteration   2: 15937157.127 ops/s
# Warmup Iteration   3: 13801267.116 ops/s
# Warmup Iteration   4: 16873540.836 ops/s
# Warmup Iteration   5: 16921229.314 ops/s
# Warmup Iteration   6: 16282272.851 ops/s
# Warmup Iteration   7: 16641853.845 ops/s
# Warmup Iteration   8: 16658097.061 ops/s
# Warmup Iteration   9: 16810585.086 ops/s
# Warmup Iteration  10: 16794139.727 ops/s
# Warmup Iteration  11: 16681908.663 ops/s
# Warmup Iteration  12: 16735185.589 ops/s
# Warmup Iteration  13: 16714400.220 ops/s
# Warmup Iteration  14: 16734141.863 ops/s
# Warmup Iteration  15: 16644183.419 ops/s
# Warmup Iteration  16: 16657367.077 ops/s
# Warmup Iteration  17: 16674240.566 ops/s
# Warmup Iteration  18: 16334793.704 ops/s
# Warmup Iteration  19: 16653855.514 ops/s
# Warmup Iteration  20: 16360754.578 ops/s
# Warmup Iteration  21: 16643437.405 ops/s
# Warmup Iteration  22: 16726345.797 ops/s
# Warmup Iteration  23: 16618174.551 ops/s
# Warmup Iteration  24: 16682796.712 ops/s
# Warmup Iteration  25: 16742167.124 ops/s
# Warmup Iteration  26: 16758312.334 ops/s
# Warmup Iteration  27: 16810908.344 ops/s
# Warmup Iteration  28: 16916142.810 ops/s
# Warmup Iteration  29: 16892553.349 ops/s
# Warmup Iteration  30: 16701771.312 ops/s
Iteration   1: 16740094.563 ops/s
Iteration   2: 16087295.732 ops/s
Iteration   3: 16383636.711 ops/s
Iteration   4: 16363447.117 ops/s
Iteration   5: 16855781.933 ops/s
Iteration   6: 16756407.194 ops/s
Iteration   7: 16729918.556 ops/s
Iteration   8: 16628499.419 ops/s
Iteration   9: 16570996.533 ops/s
Iteration  10: 16685524.220 ops/s
Iteration  11: 16764949.734 ops/s
Iteration  12: 16552774.728 ops/s
Iteration  13: 16726322.486 ops/s
Iteration  14: 16202191.908 ops/s
Iteration  15: 16584655.751 ops/s
Iteration  16: 16797856.521 ops/s
Iteration  17: 16101277.760 ops/s
Iteration  18: 16473640.153 ops/s
Iteration  19: 16243997.605 ops/s
Iteration  20: 16140808.129 ops/s
Iteration  21: 16151485.341 ops/s
Iteration  22: 16184949.038 ops/s
Iteration  23: 16515883.987 ops/s
Iteration  24: 16336640.758 ops/s
Iteration  25: 16192909.341 ops/s
Iteration  26: 16639255.508 ops/s
Iteration  27: 16675295.481 ops/s
Iteration  28: 16142766.178 ops/s
Iteration  29: 16290653.310 ops/s
Iteration  30: 15609847.262 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollection":
  16437658.765 ±(99.9%) 194732.650 ops/s [Average]
  (min, avg, max) = (15609847.262, 16437658.765, 16855781.933), stdev = 291466.686
  CI (99.9%): [16242926.115, 16632391.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollection  thrpt   30  16437658.765 ± 194732.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6659295.339 ops/s
# Warmup Iteration   2: 10791445.969 ops/s
# Warmup Iteration   3: 12616621.688 ops/s
# Warmup Iteration   4: 12570426.331 ops/s
# Warmup Iteration   5: 12540986.833 ops/s
# Warmup Iteration   6: 12654937.989 ops/s
# Warmup Iteration   7: 12614762.064 ops/s
# Warmup Iteration   8: 12592999.686 ops/s
# Warmup Iteration   9: 12561853.320 ops/s
# Warmup Iteration  10: 12727868.465 ops/s
# Warmup Iteration  11: 12656166.955 ops/s
# Warmup Iteration  12: 12220331.234 ops/s
# Warmup Iteration  13: 12349603.907 ops/s
# Warmup Iteration  14: 12658844.926 ops/s
# Warmup Iteration  15: 12601263.250 ops/s
# Warmup Iteration  16: 12722837.539 ops/s
# Warmup Iteration  17: 12311567.744 ops/s
# Warmup Iteration  18: 12397513.645 ops/s
# Warmup Iteration  19: 12389990.095 ops/s
# Warmup Iteration  20: 12554206.681 ops/s
# Warmup Iteration  21: 12452632.973 ops/s
# Warmup Iteration  22: 12362503.153 ops/s
# Warmup Iteration  23: 12468679.135 ops/s
# Warmup Iteration  24: 12580652.690 ops/s
# Warmup Iteration  25: 12450132.059 ops/s
# Warmup Iteration  26: 12237091.318 ops/s
# Warmup Iteration  27: 12119162.918 ops/s
# Warmup Iteration  28: 12201681.331 ops/s
# Warmup Iteration  29: 12626415.900 ops/s
# Warmup Iteration  30: 12484050.448 ops/s
Iteration   1: 12383497.254 ops/s
Iteration   2: 12214915.248 ops/s
Iteration   3: 12137108.398 ops/s
Iteration   4: 12604674.476 ops/s
Iteration   5: 12751482.143 ops/s
Iteration   6: 12557719.620 ops/s
Iteration   7: 12256251.990 ops/s
Iteration   8: 12505912.061 ops/s
Iteration   9: 12532894.345 ops/s
Iteration  10: 12273328.890 ops/s
Iteration  11: 12446935.652 ops/s
Iteration  12: 12090565.970 ops/s
Iteration  13: 12185100.973 ops/s
Iteration  14: 12491404.710 ops/s
Iteration  15: 12570783.875 ops/s
Iteration  16: 12398508.126 ops/s
Iteration  17: 12197875.494 ops/s
Iteration  18: 12623437.689 ops/s
Iteration  19: 12178505.530 ops/s
Iteration  20: 12235284.539 ops/s
Iteration  21: 12243074.843 ops/s
Iteration  22: 12440094.695 ops/s
Iteration  23: 12526391.003 ops/s
Iteration  24: 12583947.746 ops/s
Iteration  25: 12292073.400 ops/s
Iteration  26: 12380673.039 ops/s
Iteration  27: 12454336.005 ops/s
Iteration  28: 12370839.278 ops/s
Iteration  29: 12202531.687 ops/s
Iteration  30: 12584757.278 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollectionWith":
  12390496.865 ±(99.9%) 115750.563 ops/s [Average]
  (min, avg, max) = (12090565.970, 12390496.865, 12751482.143), stdev = 173250.006
  CI (99.9%): [12274746.303, 12506247.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  12390496.865 ± 115750.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7806780.275 ops/s
# Warmup Iteration   2: 12753319.169 ops/s
# Warmup Iteration   3: 14923142.129 ops/s
# Warmup Iteration   4: 15112730.046 ops/s
# Warmup Iteration   5: 14866727.177 ops/s
# Warmup Iteration   6: 14800294.612 ops/s
# Warmup Iteration   7: 15132671.392 ops/s
# Warmup Iteration   8: 15094493.343 ops/s
# Warmup Iteration   9: 15143477.132 ops/s
# Warmup Iteration  10: 15121453.676 ops/s
# Warmup Iteration  11: 14994529.760 ops/s
# Warmup Iteration  12: 14903187.222 ops/s
# Warmup Iteration  13: 14982672.745 ops/s
# Warmup Iteration  14: 15069348.970 ops/s
# Warmup Iteration  15: 14971968.175 ops/s
# Warmup Iteration  16: 14952834.354 ops/s
# Warmup Iteration  17: 15045723.489 ops/s
# Warmup Iteration  18: 15161354.869 ops/s
# Warmup Iteration  19: 14941697.903 ops/s
# Warmup Iteration  20: 14985807.832 ops/s
# Warmup Iteration  21: 15101035.065 ops/s
# Warmup Iteration  22: 14899915.796 ops/s
# Warmup Iteration  23: 14656587.008 ops/s
# Warmup Iteration  24: 14944959.222 ops/s
# Warmup Iteration  25: 14775090.722 ops/s
# Warmup Iteration  26: 14625713.227 ops/s
# Warmup Iteration  27: 14846153.379 ops/s
# Warmup Iteration  28: 14602214.077 ops/s
# Warmup Iteration  29: 15102865.611 ops/s
# Warmup Iteration  30: 15227431.633 ops/s
Iteration   1: 15178394.508 ops/s
Iteration   2: 15101607.984 ops/s
Iteration   3: 15407938.023 ops/s
Iteration   4: 15373983.298 ops/s
Iteration   5: 15181140.807 ops/s
Iteration   6: 15346370.643 ops/s
Iteration   7: 15433324.402 ops/s
Iteration   8: 14851850.054 ops/s
Iteration   9: 14566488.625 ops/s
Iteration  10: 14419163.129 ops/s
Iteration  11: 14856635.798 ops/s
Iteration  12: 14858621.063 ops/s
Iteration  13: 15022860.993 ops/s
Iteration  14: 15036658.410 ops/s
Iteration  15: 14750126.482 ops/s
Iteration  16: 14904369.521 ops/s
Iteration  17: 15129511.659 ops/s
Iteration  18: 14840653.891 ops/s
Iteration  19: 15032122.950 ops/s
Iteration  20: 14838976.585 ops/s
Iteration  21: 15010950.127 ops/s
Iteration  22: 14952558.291 ops/s
Iteration  23: 14856485.335 ops/s
Iteration  24: 15012717.461 ops/s
Iteration  25: 14825457.815 ops/s
Iteration  26: 14763430.809 ops/s
Iteration  27: 14957325.971 ops/s
Iteration  28: 14798971.774 ops/s
Iteration  29: 14805898.786 ops/s
Iteration  30: 15020116.209 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_noneSatisfy":
  14971157.047 ±(99.9%) 156158.024 ops/s [Average]
  (min, avg, max) = (14419163.129, 14971157.047, 15433324.402), stdev = 233729.996
  CI (99.9%): [14814999.023, 15127315.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  14971157.047 ± 156158.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17550582.317 ops/s
# Warmup Iteration   2: 26641355.127 ops/s
# Warmup Iteration   3: 31284460.354 ops/s
# Warmup Iteration   4: 30577147.337 ops/s
# Warmup Iteration   5: 30753266.571 ops/s
# Warmup Iteration   6: 31476407.789 ops/s
# Warmup Iteration   7: 31247571.723 ops/s
# Warmup Iteration   8: 30858342.044 ops/s
# Warmup Iteration   9: 31375328.091 ops/s
# Warmup Iteration  10: 31194250.815 ops/s
# Warmup Iteration  11: 31917851.775 ops/s
# Warmup Iteration  12: 31964183.044 ops/s
# Warmup Iteration  13: 31560718.811 ops/s
# Warmup Iteration  14: 31850980.330 ops/s
# Warmup Iteration  15: 32211042.451 ops/s
# Warmup Iteration  16: 31779670.630 ops/s
# Warmup Iteration  17: 32049461.627 ops/s
# Warmup Iteration  18: 31738704.569 ops/s
# Warmup Iteration  19: 31146341.341 ops/s
# Warmup Iteration  20: 31313495.435 ops/s
# Warmup Iteration  21: 31698446.323 ops/s
# Warmup Iteration  22: 31609497.419 ops/s
# Warmup Iteration  23: 31242988.441 ops/s
# Warmup Iteration  24: 31322351.534 ops/s
# Warmup Iteration  25: 31367180.636 ops/s
# Warmup Iteration  26: 31578003.307 ops/s
# Warmup Iteration  27: 31422006.473 ops/s
# Warmup Iteration  28: 30492410.891 ops/s
# Warmup Iteration  29: 30326025.960 ops/s
# Warmup Iteration  30: 31216086.255 ops/s
Iteration   1: 30718022.022 ops/s
Iteration   2: 31917389.338 ops/s
Iteration   3: 31140963.012 ops/s
Iteration   4: 30977383.275 ops/s
Iteration   5: 31199715.791 ops/s
Iteration   6: 31231407.329 ops/s
Iteration   7: 31040416.675 ops/s
Iteration   8: 31244821.686 ops/s
Iteration   9: 31858669.062 ops/s
Iteration  10: 31837739.708 ops/s
Iteration  11: 31390328.376 ops/s
Iteration  12: 31828885.456 ops/s
Iteration  13: 31778217.175 ops/s
Iteration  14: 30810206.518 ops/s
Iteration  15: 31209907.298 ops/s
Iteration  16: 31963437.425 ops/s
Iteration  17: 31842381.383 ops/s
Iteration  18: 31505169.593 ops/s
Iteration  19: 31119160.822 ops/s
Iteration  20: 30391782.222 ops/s
Iteration  21: 31288245.202 ops/s
Iteration  22: 31637542.761 ops/s
Iteration  23: 31660281.165 ops/s
Iteration  24: 31976199.048 ops/s
Iteration  25: 32276204.304 ops/s
Iteration  26: 31717771.137 ops/s
Iteration  27: 32089190.238 ops/s
Iteration  28: 31965957.310 ops/s
Iteration  29: 31747658.085 ops/s
Iteration  30: 31957596.627 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_notEmpty":
  31510755.001 ±(99.9%) 307159.746 ops/s [Average]
  (min, avg, max) = (30391782.222, 31510755.001, 32276204.304), stdev = 459742.282
  CI (99.9%): [31203595.256, 31817914.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_notEmpty  thrpt   30  31510755.001 ± 307159.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5885952.047 ops/s
# Warmup Iteration   2: 10508170.172 ops/s
# Warmup Iteration   3: 10111814.243 ops/s
# Warmup Iteration   4: 11377185.693 ops/s
# Warmup Iteration   5: 11149818.280 ops/s
# Warmup Iteration   6: 11323133.534 ops/s
# Warmup Iteration   7: 10882213.683 ops/s
# Warmup Iteration   8: 10911612.427 ops/s
# Warmup Iteration   9: 10900536.034 ops/s
# Warmup Iteration  10: 11099031.163 ops/s
# Warmup Iteration  11: 11091110.219 ops/s
# Warmup Iteration  12: 10816737.422 ops/s
# Warmup Iteration  13: 10909731.517 ops/s
# Warmup Iteration  14: 10794500.627 ops/s
# Warmup Iteration  15: 11054167.578 ops/s
# Warmup Iteration  16: 11346094.153 ops/s
# Warmup Iteration  17: 11233538.165 ops/s
# Warmup Iteration  18: 11257639.808 ops/s
# Warmup Iteration  19: 11291249.836 ops/s
# Warmup Iteration  20: 11196503.916 ops/s
# Warmup Iteration  21: 11348853.439 ops/s
# Warmup Iteration  22: 11176013.696 ops/s
# Warmup Iteration  23: 11336641.622 ops/s
# Warmup Iteration  24: 11153131.565 ops/s
# Warmup Iteration  25: 11135593.057 ops/s
# Warmup Iteration  26: 11077796.436 ops/s
# Warmup Iteration  27: 11072365.535 ops/s
# Warmup Iteration  28: 11143608.180 ops/s
# Warmup Iteration  29: 11218404.914 ops/s
# Warmup Iteration  30: 11425212.420 ops/s
Iteration   1: 11027596.756 ops/s
Iteration   2: 11271419.255 ops/s
Iteration   3: 11330497.679 ops/s
Iteration   4: 11347736.306 ops/s
Iteration   5: 11425242.771 ops/s
Iteration   6: 11384364.600 ops/s
Iteration   7: 11254501.652 ops/s
Iteration   8: 11088551.932 ops/s
Iteration   9: 11310793.201 ops/s
Iteration  10: 11140489.154 ops/s
Iteration  11: 11430013.515 ops/s
Iteration  12: 11143177.753 ops/s
Iteration  13: 11330295.090 ops/s
Iteration  14: 11221104.245 ops/s
Iteration  15: 11112245.914 ops/s
Iteration  16: 11351568.707 ops/s
Iteration  17: 11235301.493 ops/s
Iteration  18: 11255895.448 ops/s
Iteration  19: 11011461.070 ops/s
Iteration  20: 10579608.559 ops/s
Iteration  21: 10782509.966 ops/s
Iteration  22: 10628601.634 ops/s
Iteration  23: 11118196.754 ops/s
Iteration  24: 11144064.420 ops/s
Iteration  25: 11201128.824 ops/s
Iteration  26: 11220452.209 ops/s
Iteration  27: 11206836.352 ops/s
Iteration  28: 11374624.637 ops/s
Iteration  29: 11229824.797 ops/s
Iteration  30: 11244852.740 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduce":
  11180098.581 ±(99.9%) 138778.149 ops/s [Average]
  (min, avg, max) = (10579608.559, 11180098.581, 11430013.515), stdev = 207716.615
  CI (99.9%): [11041320.432, 11318876.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_reduce  thrpt   30  11180098.581 ± 138778.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5320265.807 ops/s
# Warmup Iteration   2: 9509356.009 ops/s
# Warmup Iteration   3: 9122721.312 ops/s
# Warmup Iteration   4: 10041641.875 ops/s
# Warmup Iteration   5: 10231139.717 ops/s
# Warmup Iteration   6: 10212084.567 ops/s
# Warmup Iteration   7: 10293117.869 ops/s
# Warmup Iteration   8: 10223697.413 ops/s
# Warmup Iteration   9: 10188719.293 ops/s
# Warmup Iteration  10: 10243136.563 ops/s
# Warmup Iteration  11: 10270204.286 ops/s
# Warmup Iteration  12: 10214873.437 ops/s
# Warmup Iteration  13: 9980390.014 ops/s
# Warmup Iteration  14: 10316996.025 ops/s
# Warmup Iteration  15: 10317768.791 ops/s
# Warmup Iteration  16: 10284423.335 ops/s
# Warmup Iteration  17: 10149845.766 ops/s
# Warmup Iteration  18: 10318693.873 ops/s
# Warmup Iteration  19: 10496266.825 ops/s
# Warmup Iteration  20: 10327559.126 ops/s
# Warmup Iteration  21: 10364403.409 ops/s
# Warmup Iteration  22: 10175243.418 ops/s
# Warmup Iteration  23: 10321875.837 ops/s
# Warmup Iteration  24: 10405015.816 ops/s
# Warmup Iteration  25: 10394678.039 ops/s
# Warmup Iteration  26: 10296017.167 ops/s
# Warmup Iteration  27: 10216210.199 ops/s
# Warmup Iteration  28: 10163562.474 ops/s
# Warmup Iteration  29: 10211636.303 ops/s
# Warmup Iteration  30: 10284004.590 ops/s
Iteration   1: 10425222.758 ops/s
Iteration   2: 10436771.562 ops/s
Iteration   3: 10467278.040 ops/s
Iteration   4: 10435335.041 ops/s
Iteration   5: 10443987.012 ops/s
Iteration   6: 10400567.424 ops/s
Iteration   7: 10409645.080 ops/s
Iteration   8: 10374471.105 ops/s
Iteration   9: 10424320.647 ops/s
Iteration  10: 10448582.219 ops/s
Iteration  11: 10392844.318 ops/s
Iteration  12: 10124810.520 ops/s
Iteration  13: 10201994.130 ops/s
Iteration  14: 10379645.994 ops/s
Iteration  15: 10139341.631 ops/s
Iteration  16: 10447656.904 ops/s
Iteration  17: 10482804.861 ops/s
Iteration  18: 10427750.330 ops/s
Iteration  19: 10443911.886 ops/s
Iteration  20: 10454207.076 ops/s
Iteration  21: 10439628.837 ops/s
Iteration  22: 10467681.620 ops/s
Iteration  23: 10455525.838 ops/s
Iteration  24: 10448021.208 ops/s
Iteration  25: 10470334.243 ops/s
Iteration  26: 10442784.755 ops/s
Iteration  27: 10451004.022 ops/s
Iteration  28: 10262806.380 ops/s
Iteration  29: 10331096.165 ops/s
Iteration  30: 10358662.347 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceIfEmpty":
  10396289.798 ±(99.9%) 62930.446 ops/s [Average]
  (min, avg, max) = (10124810.520, 10396289.798, 10482804.861), stdev = 94191.336
  CI (99.9%): [10333359.353, 10459220.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  10396289.798 ± 62930.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790738.250 ops/s
# Warmup Iteration   2: 800721.856 ops/s
# Warmup Iteration   3: 1064003.371 ops/s
# Warmup Iteration   4: 1070325.690 ops/s
# Warmup Iteration   5: 1057873.376 ops/s
# Warmup Iteration   6: 1067415.947 ops/s
# Warmup Iteration   7: 1072514.330 ops/s
# Warmup Iteration   8: 1072622.656 ops/s
# Warmup Iteration   9: 1054736.401 ops/s
# Warmup Iteration  10: 1060873.123 ops/s
# Warmup Iteration  11: 1036183.348 ops/s
# Warmup Iteration  12: 933674.139 ops/s
# Warmup Iteration  13: 1070855.409 ops/s
# Warmup Iteration  14: 1067284.217 ops/s
# Warmup Iteration  15: 1061175.205 ops/s
# Warmup Iteration  16: 1052585.171 ops/s
# Warmup Iteration  17: 1133584.791 ops/s
# Warmup Iteration  18: 1127940.475 ops/s
# Warmup Iteration  19: 1122354.302 ops/s
# Warmup Iteration  20: 1114583.784 ops/s
# Warmup Iteration  21: 1121253.983 ops/s
# Warmup Iteration  22: 1136262.239 ops/s
# Warmup Iteration  23: 1091589.744 ops/s
# Warmup Iteration  24: 1120151.714 ops/s
# Warmup Iteration  25: 1125611.329 ops/s
# Warmup Iteration  26: 1119558.038 ops/s
# Warmup Iteration  27: 1122169.843 ops/s
# Warmup Iteration  28: 1122659.150 ops/s
# Warmup Iteration  29: 1107884.396 ops/s
# Warmup Iteration  30: 1112623.926 ops/s
Iteration   1: 1106178.456 ops/s
Iteration   2: 1127239.786 ops/s
Iteration   3: 1116079.535 ops/s
Iteration   4: 1106528.213 ops/s
Iteration   5: 1127647.423 ops/s
Iteration   6: 1130382.596 ops/s
Iteration   7: 1135437.173 ops/s
Iteration   8: 1133533.348 ops/s
Iteration   9: 1134320.541 ops/s
Iteration  10: 1132271.823 ops/s
Iteration  11: 1124926.182 ops/s
Iteration  12: 1136486.583 ops/s
Iteration  13: 1131965.792 ops/s
Iteration  14: 1084994.525 ops/s
Iteration  15: 1095217.682 ops/s
Iteration  16: 1117783.043 ops/s
Iteration  17: 1111955.163 ops/s
Iteration  18: 1120717.212 ops/s
Iteration  19: 1129689.022 ops/s
Iteration  20: 1103606.096 ops/s
Iteration  21: 1076875.569 ops/s
Iteration  22: 1070631.189 ops/s
Iteration  23: 1092219.789 ops/s
Iteration  24: 1069894.340 ops/s
Iteration  25: 1112874.477 ops/s
Iteration  26: 1127069.225 ops/s
Iteration  27: 1122490.285 ops/s
Iteration  28: 1128393.749 ops/s
Iteration  29: 1110223.389 ops/s
Iteration  30: 1130976.476 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1114953.623 ±(99.9%) 13190.739 ops/s [Average]
  (min, avg, max) = (1069894.340, 1114953.623, 1136486.583), stdev = 19743.279
  CI (99.9%): [1101762.883, 1128144.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1114953.623 ± 13190.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6854419.035 ops/s
# Warmup Iteration   2: 11406394.316 ops/s
# Warmup Iteration   3: 13162555.930 ops/s
# Warmup Iteration   4: 13174517.772 ops/s
# Warmup Iteration   5: 12783676.648 ops/s
# Warmup Iteration   6: 13154985.819 ops/s
# Warmup Iteration   7: 13153043.396 ops/s
# Warmup Iteration   8: 13067063.205 ops/s
# Warmup Iteration   9: 13102745.919 ops/s
# Warmup Iteration  10: 12675769.468 ops/s
# Warmup Iteration  11: 12972397.937 ops/s
# Warmup Iteration  12: 13154638.574 ops/s
# Warmup Iteration  13: 13302148.056 ops/s
# Warmup Iteration  14: 13227971.475 ops/s
# Warmup Iteration  15: 12999716.922 ops/s
# Warmup Iteration  16: 13230426.605 ops/s
# Warmup Iteration  17: 12954188.448 ops/s
# Warmup Iteration  18: 13298866.293 ops/s
# Warmup Iteration  19: 13206358.897 ops/s
# Warmup Iteration  20: 13253953.617 ops/s
# Warmup Iteration  21: 13302714.993 ops/s
# Warmup Iteration  22: 13251542.646 ops/s
# Warmup Iteration  23: 13140272.603 ops/s
# Warmup Iteration  24: 12701426.088 ops/s
# Warmup Iteration  25: 13044104.116 ops/s
# Warmup Iteration  26: 12677388.270 ops/s
# Warmup Iteration  27: 12991421.886 ops/s
# Warmup Iteration  28: 13239260.959 ops/s
# Warmup Iteration  29: 13083644.470 ops/s
# Warmup Iteration  30: 13198537.914 ops/s
Iteration   1: 13141046.194 ops/s
Iteration   2: 13255244.966 ops/s
Iteration   3: 13022938.697 ops/s
Iteration   4: 13158841.957 ops/s
Iteration   5: 13132843.738 ops/s
Iteration   6: 13237492.897 ops/s
Iteration   7: 12968455.680 ops/s
Iteration   8: 13300126.942 ops/s
Iteration   9: 13177687.180 ops/s
Iteration  10: 12797810.790 ops/s
Iteration  11: 12969189.827 ops/s
Iteration  12: 12826957.242 ops/s
Iteration  13: 12743738.457 ops/s
Iteration  14: 12997902.569 ops/s
Iteration  15: 13221164.922 ops/s
Iteration  16: 12989016.445 ops/s
Iteration  17: 13282047.170 ops/s
Iteration  18: 13302301.647 ops/s
Iteration  19: 13255085.236 ops/s
Iteration  20: 13029151.046 ops/s
Iteration  21: 13041539.300 ops/s
Iteration  22: 13078858.231 ops/s
Iteration  23: 12925623.432 ops/s
Iteration  24: 13221710.750 ops/s
Iteration  25: 13210328.503 ops/s
Iteration  26: 13145118.106 ops/s
Iteration  27: 13037839.000 ops/s
Iteration  28: 13256405.317 ops/s
Iteration  29: 13088185.711 ops/s
Iteration  30: 13175887.354 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_reject":
  13099684.644 ±(99.9%) 101289.362 ops/s [Average]
  (min, avg, max) = (12743738.457, 13099684.644, 13302301.647), stdev = 151605.161
  CI (99.9%): [12998395.281, 13200974.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_reject  thrpt   30  13099684.644 ± 101289.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747090.382 ops/s
# Warmup Iteration   2: 780927.682 ops/s
# Warmup Iteration   3: 1050273.937 ops/s
# Warmup Iteration   4: 1049456.029 ops/s
# Warmup Iteration   5: 1045608.592 ops/s
# Warmup Iteration   6: 1053086.520 ops/s
# Warmup Iteration   7: 1046685.625 ops/s
# Warmup Iteration   8: 1048691.638 ops/s
# Warmup Iteration   9: 1044235.917 ops/s
# Warmup Iteration  10: 921600.427 ops/s
# Warmup Iteration  11: 989222.716 ops/s
# Warmup Iteration  12: 1036045.242 ops/s
# Warmup Iteration  13: 1032280.740 ops/s
# Warmup Iteration  14: 1034300.530 ops/s
# Warmup Iteration  15: 1037454.798 ops/s
# Warmup Iteration  16: 1020709.442 ops/s
# Warmup Iteration  17: 1053583.853 ops/s
# Warmup Iteration  18: 1081504.525 ops/s
# Warmup Iteration  19: 1063960.276 ops/s
# Warmup Iteration  20: 1061900.510 ops/s
# Warmup Iteration  21: 1098805.991 ops/s
# Warmup Iteration  22: 1104227.827 ops/s
# Warmup Iteration  23: 1097093.834 ops/s
# Warmup Iteration  24: 1102389.553 ops/s
# Warmup Iteration  25: 1070068.943 ops/s
# Warmup Iteration  26: 1076435.836 ops/s
# Warmup Iteration  27: 1098367.090 ops/s
# Warmup Iteration  28: 1094607.932 ops/s
# Warmup Iteration  29: 1099589.456 ops/s
# Warmup Iteration  30: 1093659.110 ops/s
Iteration   1: 1107089.757 ops/s
Iteration   2: 1098132.242 ops/s
Iteration   3: 1100989.891 ops/s
Iteration   4: 1106070.577 ops/s
Iteration   5: 1092305.483 ops/s
Iteration   6: 1097989.161 ops/s
Iteration   7: 1103491.180 ops/s
Iteration   8: 1068393.129 ops/s
Iteration   9: 1081842.622 ops/s
Iteration  10: 1062963.480 ops/s
Iteration  11: 1071665.784 ops/s
Iteration  12: 1096429.890 ops/s
Iteration  13: 1110458.905 ops/s
Iteration  14: 1101381.768 ops/s
Iteration  15: 1074752.185 ops/s
Iteration  16: 1102472.856 ops/s
Iteration  17: 1090522.288 ops/s
Iteration  18: 1103757.022 ops/s
Iteration  19: 1107459.432 ops/s
Iteration  20: 1096886.795 ops/s
Iteration  21: 1105844.706 ops/s
Iteration  22: 1089217.248 ops/s
Iteration  23: 1101147.658 ops/s
Iteration  24: 1085912.695 ops/s
Iteration  25: 1094783.631 ops/s
Iteration  26: 1106397.484 ops/s
Iteration  27: 1112041.648 ops/s
Iteration  28: 1106159.541 ops/s
Iteration  29: 1097940.216 ops/s
Iteration  30: 1093826.473 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_remove":
  1095610.858 ±(99.9%) 8480.871 ops/s [Average]
  (min, avg, max) = (1062963.480, 1095610.858, 1112041.648), stdev = 12693.770
  CI (99.9%): [1087129.987, 1104091.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_remove  thrpt   30  1095610.858 ± 8480.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745270.032 ops/s
# Warmup Iteration   2: 812525.516 ops/s
# Warmup Iteration   3: 1043412.625 ops/s
# Warmup Iteration   4: 1043449.683 ops/s
# Warmup Iteration   5: 1041474.626 ops/s
# Warmup Iteration   6: 1026915.490 ops/s
# Warmup Iteration   7: 1029959.229 ops/s
# Warmup Iteration   8: 1036852.591 ops/s
# Warmup Iteration   9: 1037317.998 ops/s
# Warmup Iteration  10: 906998.350 ops/s
# Warmup Iteration  11: 988885.582 ops/s
# Warmup Iteration  12: 1050548.434 ops/s
# Warmup Iteration  13: 1042732.391 ops/s
# Warmup Iteration  14: 1041188.301 ops/s
# Warmup Iteration  15: 1034227.673 ops/s
# Warmup Iteration  16: 1034231.875 ops/s
# Warmup Iteration  17: 1110670.835 ops/s
# Warmup Iteration  18: 1109065.045 ops/s
# Warmup Iteration  19: 1103452.025 ops/s
# Warmup Iteration  20: 1104429.996 ops/s
# Warmup Iteration  21: 1095181.130 ops/s
# Warmup Iteration  22: 1116624.911 ops/s
# Warmup Iteration  23: 1096401.251 ops/s
# Warmup Iteration  24: 1089515.768 ops/s
# Warmup Iteration  25: 1105574.265 ops/s
# Warmup Iteration  26: 1095320.383 ops/s
# Warmup Iteration  27: 1105167.282 ops/s
# Warmup Iteration  28: 1099355.891 ops/s
# Warmup Iteration  29: 1107063.107 ops/s
# Warmup Iteration  30: 1094029.845 ops/s
Iteration   1: 1106625.767 ops/s
Iteration   2: 1057926.315 ops/s
Iteration   3: 1066100.347 ops/s
Iteration   4: 1101913.340 ops/s
Iteration   5: 1103453.641 ops/s
Iteration   6: 1115725.112 ops/s
Iteration   7: 1085476.869 ops/s
Iteration   8: 1105287.488 ops/s
Iteration   9: 1092718.949 ops/s
Iteration  10: 1094565.726 ops/s
Iteration  11: 1076942.791 ops/s
Iteration  12: 1104815.452 ops/s
Iteration  13: 1109695.555 ops/s
Iteration  14: 1054560.614 ops/s
Iteration  15: 1043366.538 ops/s
Iteration  16: 1095640.253 ops/s
Iteration  17: 1112000.763 ops/s
Iteration  18: 1099728.324 ops/s
Iteration  19: 1098310.401 ops/s
Iteration  20: 1104006.817 ops/s
Iteration  21: 1107798.074 ops/s
Iteration  22: 1093851.305 ops/s
Iteration  23: 1090840.165 ops/s
Iteration  24: 1097870.193 ops/s
Iteration  25: 1099084.541 ops/s
Iteration  26: 1094540.588 ops/s
Iteration  27: 1094024.987 ops/s
Iteration  28: 1093654.222 ops/s
Iteration  29: 1101309.992 ops/s
Iteration  30: 1092488.407 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll":
  1093144.118 ±(99.9%) 11500.145 ops/s [Average]
  (min, avg, max) = (1043366.538, 1093144.118, 1115725.112), stdev = 17212.877
  CI (99.9%): [1081643.973, 1104644.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll  thrpt   30  1093144.118 ± 11500.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743131.242 ops/s
# Warmup Iteration   2: 808549.185 ops/s
# Warmup Iteration   3: 1047092.584 ops/s
# Warmup Iteration   4: 1041507.602 ops/s
# Warmup Iteration   5: 1049181.498 ops/s
# Warmup Iteration   6: 1034329.176 ops/s
# Warmup Iteration   7: 1043866.444 ops/s
# Warmup Iteration   8: 1052374.039 ops/s
# Warmup Iteration   9: 1023885.687 ops/s
# Warmup Iteration  10: 884145.384 ops/s
# Warmup Iteration  11: 964769.075 ops/s
# Warmup Iteration  12: 1038498.835 ops/s
# Warmup Iteration  13: 1041223.525 ops/s
# Warmup Iteration  14: 1036566.241 ops/s
# Warmup Iteration  15: 1032092.719 ops/s
# Warmup Iteration  16: 1046979.614 ops/s
# Warmup Iteration  17: 1052823.201 ops/s
# Warmup Iteration  18: 1095913.593 ops/s
# Warmup Iteration  19: 1066089.173 ops/s
# Warmup Iteration  20: 1069691.329 ops/s
# Warmup Iteration  21: 1099506.610 ops/s
# Warmup Iteration  22: 1092675.375 ops/s
# Warmup Iteration  23: 1078557.254 ops/s
# Warmup Iteration  24: 1089273.569 ops/s
# Warmup Iteration  25: 1102492.477 ops/s
# Warmup Iteration  26: 1106938.450 ops/s
# Warmup Iteration  27: 1098295.005 ops/s
# Warmup Iteration  28: 1109935.693 ops/s
# Warmup Iteration  29: 1109722.613 ops/s
# Warmup Iteration  30: 1108230.823 ops/s
Iteration   1: 1109459.503 ops/s
Iteration   2: 1102562.157 ops/s
Iteration   3: 1104137.475 ops/s
Iteration   4: 1098706.837 ops/s
Iteration   5: 1105056.899 ops/s
Iteration   6: 1113176.053 ops/s
Iteration   7: 1108863.394 ops/s
Iteration   8: 1114380.892 ops/s
Iteration   9: 1103987.033 ops/s
Iteration  10: 1097622.259 ops/s
Iteration  11: 1093429.162 ops/s
Iteration  12: 1095961.634 ops/s
Iteration  13: 1087583.996 ops/s
Iteration  14: 1105962.791 ops/s
Iteration  15: 1114661.259 ops/s
Iteration  16: 1124772.140 ops/s
Iteration  17: 1124277.931 ops/s
Iteration  18: 1106773.253 ops/s
Iteration  19: 1114880.562 ops/s
Iteration  20: 1120591.751 ops/s
Iteration  21: 1099426.454 ops/s
Iteration  22: 1111208.984 ops/s
Iteration  23: 1106391.211 ops/s
Iteration  24: 1099364.235 ops/s
Iteration  25: 1108583.178 ops/s
Iteration  26: 1103647.250 ops/s
Iteration  27: 1103809.466 ops/s
Iteration  28: 1093342.324 ops/s
Iteration  29: 1102373.738 ops/s
Iteration  30: 1097941.486 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll_iterable":
  1105764.510 ±(99.9%) 5957.092 ops/s [Average]
  (min, avg, max) = (1087583.996, 1105764.510, 1124772.140), stdev = 8916.295
  CI (99.9%): [1099807.419, 1111721.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_removeAll_iterable  thrpt   30  1105764.510 ± 5957.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 766641.959 ops/s
# Warmup Iteration   2: 824934.261 ops/s
# Warmup Iteration   3: 1040865.846 ops/s
# Warmup Iteration   4: 1046722.243 ops/s
# Warmup Iteration   5: 1032815.175 ops/s
# Warmup Iteration   6: 1023821.915 ops/s
# Warmup Iteration   7: 1037325.943 ops/s
# Warmup Iteration   8: 1035661.051 ops/s
# Warmup Iteration   9: 1018946.975 ops/s
# Warmup Iteration  10: 1007324.229 ops/s
# Warmup Iteration  11: 916435.532 ops/s
# Warmup Iteration  12: 1045841.246 ops/s
# Warmup Iteration  13: 1041261.339 ops/s
# Warmup Iteration  14: 1036238.047 ops/s
# Warmup Iteration  15: 1039339.723 ops/s
# Warmup Iteration  16: 1016809.453 ops/s
# Warmup Iteration  17: 1100980.469 ops/s
# Warmup Iteration  18: 1114266.875 ops/s
# Warmup Iteration  19: 1097255.368 ops/s
# Warmup Iteration  20: 1094503.454 ops/s
# Warmup Iteration  21: 1089864.599 ops/s
# Warmup Iteration  22: 1101157.137 ops/s
# Warmup Iteration  23: 1087939.281 ops/s
# Warmup Iteration  24: 1118936.313 ops/s
# Warmup Iteration  25: 1100037.336 ops/s
# Warmup Iteration  26: 1060378.355 ops/s
# Warmup Iteration  27: 1116584.436 ops/s
# Warmup Iteration  28: 1104259.758 ops/s
# Warmup Iteration  29: 1105154.566 ops/s
# Warmup Iteration  30: 1103680.251 ops/s
Iteration   1: 1100784.375 ops/s
Iteration   2: 1111407.820 ops/s
Iteration   3: 1101917.367 ops/s
Iteration   4: 1114603.027 ops/s
Iteration   5: 1099978.477 ops/s
Iteration   6: 1115813.686 ops/s
Iteration   7: 1121699.487 ops/s
Iteration   8: 1127979.499 ops/s
Iteration   9: 1120993.692 ops/s
Iteration  10: 1113753.502 ops/s
Iteration  11: 1106911.231 ops/s
Iteration  12: 1107435.797 ops/s
Iteration  13: 1107624.071 ops/s
Iteration  14: 1119154.181 ops/s
Iteration  15: 1117446.147 ops/s
Iteration  16: 1115865.977 ops/s
Iteration  17: 1099921.567 ops/s
Iteration  18: 1114669.413 ops/s
Iteration  19: 1091379.981 ops/s
Iteration  20: 1105453.321 ops/s
Iteration  21: 1107183.198 ops/s
Iteration  22: 1094766.681 ops/s
Iteration  23: 1047060.900 ops/s
Iteration  24: 1085719.287 ops/s
Iteration  25: 1063206.972 ops/s
Iteration  26: 1117500.545 ops/s
Iteration  27: 1113854.357 ops/s
Iteration  28: 1109545.854 ops/s
Iteration  29: 1116616.506 ops/s
Iteration  30: 1111083.719 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences":
  1106044.355 ±(99.9%) 11245.720 ops/s [Average]
  (min, avg, max) = (1047060.900, 1106044.355, 1127979.499), stdev = 16832.066
  CI (99.9%): [1094798.634, 1117290.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  1106044.355 ± 11245.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702883.994 ops/s
# Warmup Iteration   2: 785465.715 ops/s
# Warmup Iteration   3: 1021600.812 ops/s
# Warmup Iteration   4: 1010186.790 ops/s
# Warmup Iteration   5: 987487.187 ops/s
# Warmup Iteration   6: 956209.624 ops/s
# Warmup Iteration   7: 950598.722 ops/s
# Warmup Iteration   8: 997710.198 ops/s
# Warmup Iteration   9: 990062.789 ops/s
# Warmup Iteration  10: 993496.607 ops/s
# Warmup Iteration  11: 762718.946 ops/s
# Warmup Iteration  12: 984451.837 ops/s
# Warmup Iteration  13: 1011067.539 ops/s
# Warmup Iteration  14: 1013650.166 ops/s
# Warmup Iteration  15: 1014810.006 ops/s
# Warmup Iteration  16: 1012521.819 ops/s
# Warmup Iteration  17: 1075621.431 ops/s
# Warmup Iteration  18: 1081472.251 ops/s
# Warmup Iteration  19: 1082425.940 ops/s
# Warmup Iteration  20: 1073443.511 ops/s
# Warmup Iteration  21: 1075588.456 ops/s
# Warmup Iteration  22: 1081986.644 ops/s
# Warmup Iteration  23: 1069453.104 ops/s
# Warmup Iteration  24: 1084537.347 ops/s
# Warmup Iteration  25: 1069086.476 ops/s
# Warmup Iteration  26: 1077941.176 ops/s
# Warmup Iteration  27: 1070513.833 ops/s
# Warmup Iteration  28: 1078028.359 ops/s
# Warmup Iteration  29: 1026234.616 ops/s
# Warmup Iteration  30: 1046051.753 ops/s
Iteration   1: 1078867.984 ops/s
Iteration   2: 1033176.244 ops/s
Iteration   3: 1050746.852 ops/s
Iteration   4: 1088503.229 ops/s
Iteration   5: 1063401.708 ops/s
Iteration   6: 1044886.576 ops/s
Iteration   7: 1081769.148 ops/s
Iteration   8: 1075176.850 ops/s
Iteration   9: 1067609.754 ops/s
Iteration  10: 1072363.494 ops/s
Iteration  11: 1031422.628 ops/s
Iteration  12: 1072093.331 ops/s
Iteration  13: 1070413.773 ops/s
Iteration  14: 1035286.087 ops/s
Iteration  15: 1048862.890 ops/s
Iteration  16: 1056329.919 ops/s
Iteration  17: 1047988.191 ops/s
Iteration  18: 1073682.305 ops/s
Iteration  19: 1079666.369 ops/s
Iteration  20: 1097073.142 ops/s
Iteration  21: 1088386.741 ops/s
Iteration  22: 1076909.290 ops/s
Iteration  23: 1052355.414 ops/s
Iteration  24: 1059783.397 ops/s
Iteration  25: 1050916.882 ops/s
Iteration  26: 1017087.086 ops/s
Iteration  27: 1046420.971 ops/s
Iteration  28: 1033751.166 ops/s
Iteration  29: 1046527.329 ops/s
Iteration  30: 1085891.417 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws":
  1060911.672 ±(99.9%) 13485.774 ops/s [Average]
  (min, avg, max) = (1017087.086, 1060911.672, 1097073.142), stdev = 20184.874
  CI (99.9%): [1047425.898, 1074397.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1060911.672 ± 13485.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749185.732 ops/s
# Warmup Iteration   2: 823347.266 ops/s
# Warmup Iteration   3: 1044450.612 ops/s
# Warmup Iteration   4: 1050522.783 ops/s
# Warmup Iteration   5: 1018788.637 ops/s
# Warmup Iteration   6: 1014826.926 ops/s
# Warmup Iteration   7: 1011870.510 ops/s
# Warmup Iteration   8: 1034678.084 ops/s
# Warmup Iteration   9: 1053830.947 ops/s
# Warmup Iteration  10: 924629.022 ops/s
# Warmup Iteration  11: 1010940.853 ops/s
# Warmup Iteration  12: 999527.036 ops/s
# Warmup Iteration  13: 1007060.742 ops/s
# Warmup Iteration  14: 995231.747 ops/s
# Warmup Iteration  15: 1012704.350 ops/s
# Warmup Iteration  16: 1035465.460 ops/s
# Warmup Iteration  17: 1075038.543 ops/s
# Warmup Iteration  18: 1090901.845 ops/s
# Warmup Iteration  19: 1066587.393 ops/s
# Warmup Iteration  20: 1061036.720 ops/s
# Warmup Iteration  21: 1104638.064 ops/s
# Warmup Iteration  22: 1095176.580 ops/s
# Warmup Iteration  23: 1109919.329 ops/s
# Warmup Iteration  24: 1104655.642 ops/s
# Warmup Iteration  25: 1110696.531 ops/s
# Warmup Iteration  26: 1121375.324 ops/s
# Warmup Iteration  27: 1067949.369 ops/s
# Warmup Iteration  28: 1071028.939 ops/s
# Warmup Iteration  29: 1076512.785 ops/s
# Warmup Iteration  30: 1107919.698 ops/s
Iteration   1: 1098761.890 ops/s
Iteration   2: 1101993.694 ops/s
Iteration   3: 1112208.344 ops/s
Iteration   4: 1067637.933 ops/s
Iteration   5: 1062714.326 ops/s
Iteration   6: 1061835.450 ops/s
Iteration   7: 1054755.834 ops/s
Iteration   8: 1099879.297 ops/s
Iteration   9: 1104902.022 ops/s
Iteration  10: 1094442.895 ops/s
Iteration  11: 1080805.471 ops/s
Iteration  12: 1115397.059 ops/s
Iteration  13: 1117896.899 ops/s
Iteration  14: 1098860.800 ops/s
Iteration  15: 1117580.732 ops/s
Iteration  16: 1107280.465 ops/s
Iteration  17: 1103201.047 ops/s
Iteration  18: 1056636.150 ops/s
Iteration  19: 1068352.220 ops/s
Iteration  20: 1069896.101 ops/s
Iteration  21: 1079592.886 ops/s
Iteration  22: 1107860.837 ops/s
Iteration  23: 1103529.418 ops/s
Iteration  24: 1102013.764 ops/s
Iteration  25: 1097740.178 ops/s
Iteration  26: 1113770.071 ops/s
Iteration  27: 1117919.437 ops/s
Iteration  28: 1119123.597 ops/s
Iteration  29: 1115632.095 ops/s
Iteration  30: 1124603.139 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll":
  1095894.135 ±(99.9%) 14123.029 ops/s [Average]
  (min, avg, max) = (1054755.834, 1095894.135, 1124603.139), stdev = 21138.686
  CI (99.9%): [1081771.106, 1110017.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll  thrpt   30  1095894.135 ± 14123.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll_iterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll_iterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750121.253 ops/s
# Warmup Iteration   2: 800990.175 ops/s
# Warmup Iteration   3: 1036910.375 ops/s
# Warmup Iteration   4: 1031565.780 ops/s
# Warmup Iteration   5: 1048006.552 ops/s
# Warmup Iteration   6: 1038112.560 ops/s
# Warmup Iteration   7: 1047962.139 ops/s
# Warmup Iteration   8: 1044943.617 ops/s
# Warmup Iteration   9: 1037743.317 ops/s
# Warmup Iteration  10: 902452.094 ops/s
# Warmup Iteration  11: 1024767.016 ops/s
# Warmup Iteration  12: 1051541.120 ops/s
# Warmup Iteration  13: 1049171.131 ops/s
# Warmup Iteration  14: 1030833.187 ops/s
# Warmup Iteration  15: 1035370.595 ops/s
# Warmup Iteration  16: 1034964.932 ops/s
# Warmup Iteration  17: 1116872.435 ops/s
# Warmup Iteration  18: 1120426.223 ops/s
# Warmup Iteration  19: 1108671.432 ops/s
# Warmup Iteration  20: 1111690.896 ops/s
# Warmup Iteration  21: 1114632.372 ops/s
# Warmup Iteration  22: 1103436.160 ops/s
# Warmup Iteration  23: 1110741.040 ops/s
# Warmup Iteration  24: 1111445.014 ops/s
# Warmup Iteration  25: 1071393.427 ops/s
# Warmup Iteration  26: 1112027.403 ops/s
# Warmup Iteration  27: 1107077.639 ops/s
# Warmup Iteration  28: 1097958.871 ops/s
# Warmup Iteration  29: 1104870.391 ops/s
# Warmup Iteration  30: 1104973.813 ops/s
Iteration   1: 1119287.918 ops/s
Iteration   2: 1114456.994 ops/s
Iteration   3: 1122771.916 ops/s
Iteration   4: 1107253.370 ops/s
Iteration   5: 1078088.705 ops/s
Iteration   6: 1077422.933 ops/s
Iteration   7: 1108088.926 ops/s
Iteration   8: 1100476.665 ops/s
Iteration   9: 1105822.661 ops/s
Iteration  10: 1120643.930 ops/s
Iteration  11: 1091520.009 ops/s
Iteration  12: 1107708.221 ops/s
Iteration  13: 1105521.359 ops/s
Iteration  14: 1104887.324 ops/s
Iteration  15: 1113693.687 ops/s
Iteration  16: 1088467.424 ops/s
Iteration  17: 1083969.677 ops/s
Iteration  18: 1121500.928 ops/s
Iteration  19: 1105038.342 ops/s
Iteration  20: 1119686.433 ops/s
Iteration  21: 1117987.959 ops/s
Iteration  22: 1118274.650 ops/s
Iteration  23: 1119496.131 ops/s
Iteration  24: 1122691.657 ops/s
Iteration  25: 1112823.253 ops/s
Iteration  26: 1114590.723 ops/s
Iteration  27: 1096009.456 ops/s
Iteration  28: 1113158.861 ops/s
Iteration  29: 1107879.104 ops/s
Iteration  30: 1109547.007 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll_iterable":
  1107625.541 ±(99.9%) 8625.791 ops/s [Average]
  (min, avg, max) = (1077422.933, 1107625.541, 1122771.916), stdev = 12910.680
  CI (99.9%): [1098999.749, 1116251.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_retainAll_iterable  thrpt   30  1107625.541 ± 8625.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6690243.841 ops/s
# Warmup Iteration   2: 11272958.627 ops/s
# Warmup Iteration   3: 12854904.245 ops/s
# Warmup Iteration   4: 12964660.133 ops/s
# Warmup Iteration   5: 12983558.249 ops/s
# Warmup Iteration   6: 13027193.112 ops/s
# Warmup Iteration   7: 13115556.169 ops/s
# Warmup Iteration   8: 12903962.804 ops/s
# Warmup Iteration   9: 13128426.467 ops/s
# Warmup Iteration  10: 12522672.180 ops/s
# Warmup Iteration  11: 12976778.956 ops/s
# Warmup Iteration  12: 12929392.069 ops/s
# Warmup Iteration  13: 12955775.329 ops/s
# Warmup Iteration  14: 12782624.119 ops/s
# Warmup Iteration  15: 12512304.863 ops/s
# Warmup Iteration  16: 12887799.041 ops/s
# Warmup Iteration  17: 13101177.936 ops/s
# Warmup Iteration  18: 12489330.502 ops/s
# Warmup Iteration  19: 13094799.222 ops/s
# Warmup Iteration  20: 13051713.177 ops/s
# Warmup Iteration  21: 13131136.357 ops/s
# Warmup Iteration  22: 12856307.644 ops/s
# Warmup Iteration  23: 12833613.702 ops/s
# Warmup Iteration  24: 13101723.645 ops/s
# Warmup Iteration  25: 13111288.266 ops/s
# Warmup Iteration  26: 13244336.780 ops/s
# Warmup Iteration  27: 13088376.392 ops/s
# Warmup Iteration  28: 13245594.299 ops/s
# Warmup Iteration  29: 12600735.001 ops/s
# Warmup Iteration  30: 12846001.631 ops/s
Iteration   1: 12874542.422 ops/s
Iteration   2: 12997173.755 ops/s
Iteration   3: 12883815.253 ops/s
Iteration   4: 12953958.276 ops/s
Iteration   5: 13165012.043 ops/s
Iteration   6: 13051435.427 ops/s
Iteration   7: 13123954.574 ops/s
Iteration   8: 12783775.973 ops/s
Iteration   9: 13019025.697 ops/s
Iteration  10: 13195640.111 ops/s
Iteration  11: 13110102.022 ops/s
Iteration  12: 13042079.926 ops/s
Iteration  13: 12959463.740 ops/s
Iteration  14: 13014655.340 ops/s
Iteration  15: 12733241.078 ops/s
Iteration  16: 12859000.095 ops/s
Iteration  17: 13164406.197 ops/s
Iteration  18: 12880001.674 ops/s
Iteration  19: 12899417.955 ops/s
Iteration  20: 12988664.429 ops/s
Iteration  21: 12534260.097 ops/s
Iteration  22: 12690237.354 ops/s
Iteration  23: 12665013.438 ops/s
Iteration  24: 12822040.874 ops/s
Iteration  25: 12608202.830 ops/s
Iteration  26: 12666073.173 ops/s
Iteration  27: 12527635.029 ops/s
Iteration  28: 12743237.649 ops/s
Iteration  29: 13161339.026 ops/s
Iteration  30: 13146654.328 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_select":
  12908801.993 ±(99.9%) 131842.957 ops/s [Average]
  (min, avg, max) = (12527635.029, 12908801.993, 13195640.111), stdev = 197336.347
  CI (99.9%): [12776959.036, 13040644.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_select  thrpt   30  12908801.993 ± 131842.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13582657.636 ops/s
# Warmup Iteration   2: 22681291.868 ops/s
# Warmup Iteration   3: 26056744.416 ops/s
# Warmup Iteration   4: 25329414.982 ops/s
# Warmup Iteration   5: 24876501.105 ops/s
# Warmup Iteration   6: 25112680.947 ops/s
# Warmup Iteration   7: 25376040.093 ops/s
# Warmup Iteration   8: 25799392.335 ops/s
# Warmup Iteration   9: 25549153.231 ops/s
# Warmup Iteration  10: 25742158.919 ops/s
# Warmup Iteration  11: 25747934.006 ops/s
# Warmup Iteration  12: 25659731.816 ops/s
# Warmup Iteration  13: 26065092.730 ops/s
# Warmup Iteration  14: 25435622.183 ops/s
# Warmup Iteration  15: 25942947.655 ops/s
# Warmup Iteration  16: 25691349.520 ops/s
# Warmup Iteration  17: 25400296.899 ops/s
# Warmup Iteration  18: 25681599.907 ops/s
# Warmup Iteration  19: 25752341.462 ops/s
# Warmup Iteration  20: 25546135.350 ops/s
# Warmup Iteration  21: 25701999.224 ops/s
# Warmup Iteration  22: 25758144.602 ops/s
# Warmup Iteration  23: 25626614.954 ops/s
# Warmup Iteration  24: 25716726.111 ops/s
# Warmup Iteration  25: 25366888.362 ops/s
# Warmup Iteration  26: 25604348.149 ops/s
# Warmup Iteration  27: 25796798.593 ops/s
# Warmup Iteration  28: 25250485.881 ops/s
# Warmup Iteration  29: 25539061.702 ops/s
# Warmup Iteration  30: 25961167.732 ops/s
Iteration   1: 25786395.230 ops/s
Iteration   2: 25434049.362 ops/s
Iteration   3: 25215237.526 ops/s
Iteration   4: 25465323.345 ops/s
Iteration   5: 25888607.537 ops/s
Iteration   6: 25527860.789 ops/s
Iteration   7: 25647582.607 ops/s
Iteration   8: 25821397.656 ops/s
Iteration   9: 25468418.130 ops/s
Iteration  10: 25486207.507 ops/s
Iteration  11: 25674459.768 ops/s
Iteration  12: 25989490.418 ops/s
Iteration  13: 25703015.781 ops/s
Iteration  14: 25602699.023 ops/s
Iteration  15: 25185791.979 ops/s
Iteration  16: 25472473.374 ops/s
Iteration  17: 25989096.634 ops/s
Iteration  18: 25761782.015 ops/s
Iteration  19: 25983612.412 ops/s
Iteration  20: 25902316.378 ops/s
Iteration  21: 25506496.782 ops/s
Iteration  22: 25852591.685 ops/s
Iteration  23: 25703791.718 ops/s
Iteration  24: 25430249.827 ops/s
Iteration  25: 25839055.616 ops/s
Iteration  26: 25312658.048 ops/s
Iteration  27: 25939872.270 ops/s
Iteration  28: 26001418.942 ops/s
Iteration  29: 25706502.553 ops/s
Iteration  30: 26008178.928 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_selectUnique":
  25676887.795 ±(99.9%) 161734.114 ops/s [Average]
  (min, avg, max) = (25185791.979, 25676887.795, 26008178.928), stdev = 242076.027
  CI (99.9%): [25515153.680, 25838621.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_selectUnique  thrpt   30  25676887.795 ± 161734.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4939670.789 ops/s
# Warmup Iteration   2: 8657790.943 ops/s
# Warmup Iteration   3: 10159470.223 ops/s
# Warmup Iteration   4: 10106838.861 ops/s
# Warmup Iteration   5: 10366075.491 ops/s
# Warmup Iteration   6: 10341493.558 ops/s
# Warmup Iteration   7: 10342706.687 ops/s
# Warmup Iteration   8: 10319348.624 ops/s
# Warmup Iteration   9: 10038838.143 ops/s
# Warmup Iteration  10: 10184812.013 ops/s
# Warmup Iteration  11: 10237908.104 ops/s
# Warmup Iteration  12: 10151938.618 ops/s
# Warmup Iteration  13: 10199264.139 ops/s
# Warmup Iteration  14: 10295372.763 ops/s
# Warmup Iteration  15: 10293335.953 ops/s
# Warmup Iteration  16: 10240788.423 ops/s
# Warmup Iteration  17: 10204918.806 ops/s
# Warmup Iteration  18: 10285369.414 ops/s
# Warmup Iteration  19: 10160819.651 ops/s
# Warmup Iteration  20: 9930947.293 ops/s
# Warmup Iteration  21: 10311432.132 ops/s
# Warmup Iteration  22: 10244747.503 ops/s
# Warmup Iteration  23: 10383306.880 ops/s
# Warmup Iteration  24: 10425725.333 ops/s
# Warmup Iteration  25: 10206087.811 ops/s
# Warmup Iteration  26: 10219561.625 ops/s
# Warmup Iteration  27: 10298614.190 ops/s
# Warmup Iteration  28: 10161122.198 ops/s
# Warmup Iteration  29: 10351219.058 ops/s
# Warmup Iteration  30: 10330399.673 ops/s
Iteration   1: 10306437.623 ops/s
Iteration   2: 10314702.641 ops/s
Iteration   3: 10318922.719 ops/s
Iteration   4: 10232346.118 ops/s
Iteration   5: 10097878.217 ops/s
Iteration   6: 10032940.562 ops/s
Iteration   7: 10050867.250 ops/s
Iteration   8: 10118126.686 ops/s
Iteration   9: 10271181.331 ops/s
Iteration  10: 10017239.084 ops/s
Iteration  11: 9940835.578 ops/s
Iteration  12: 10257642.054 ops/s
Iteration  13: 9994301.961 ops/s
Iteration  14: 10025994.927 ops/s
Iteration  15: 10102611.708 ops/s
Iteration  16: 10206938.300 ops/s
Iteration  17: 9988436.474 ops/s
Iteration  18: 10052505.625 ops/s
Iteration  19: 10000403.578 ops/s
Iteration  20: 10240487.793 ops/s
Iteration  21: 10113802.880 ops/s
Iteration  22: 10327968.742 ops/s
Iteration  23: 10316655.227 ops/s
Iteration  24: 10302146.860 ops/s
Iteration  25: 9866978.301 ops/s
Iteration  26: 10327152.093 ops/s
Iteration  27: 10387019.408 ops/s
Iteration  28: 10263628.899 ops/s
Iteration  29: 10249965.147 ops/s
Iteration  30: 10293392.321 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_size":
  10167317.004 ±(99.9%) 96032.160 ops/s [Average]
  (min, avg, max) = (9866978.301, 10167317.004, 10387019.408), stdev = 143736.427
  CI (99.9%): [10071284.843, 10263349.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_size  thrpt   30  10167317.004 ± 96032.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14827397.589 ops/s
# Warmup Iteration   2: 23779989.062 ops/s
# Warmup Iteration   3: 27746214.673 ops/s
# Warmup Iteration   4: 27546705.002 ops/s
# Warmup Iteration   5: 28168736.647 ops/s
# Warmup Iteration   6: 27362267.756 ops/s
# Warmup Iteration   7: 27416816.407 ops/s
# Warmup Iteration   8: 27837549.572 ops/s
# Warmup Iteration   9: 28108404.415 ops/s
# Warmup Iteration  10: 27685839.497 ops/s
# Warmup Iteration  11: 28171534.225 ops/s
# Warmup Iteration  12: 27941622.063 ops/s
# Warmup Iteration  13: 28045767.780 ops/s
# Warmup Iteration  14: 27693895.279 ops/s
# Warmup Iteration  15: 28448690.473 ops/s
# Warmup Iteration  16: 27669102.756 ops/s
# Warmup Iteration  17: 27244887.832 ops/s
# Warmup Iteration  18: 27647127.924 ops/s
# Warmup Iteration  19: 27561839.348 ops/s
# Warmup Iteration  20: 27436949.985 ops/s
# Warmup Iteration  21: 27499083.522 ops/s
# Warmup Iteration  22: 27727059.751 ops/s
# Warmup Iteration  23: 27640875.933 ops/s
# Warmup Iteration  24: 27780729.111 ops/s
# Warmup Iteration  25: 27809212.531 ops/s
# Warmup Iteration  26: 27044180.164 ops/s
# Warmup Iteration  27: 27824359.060 ops/s
# Warmup Iteration  28: 27512203.103 ops/s
# Warmup Iteration  29: 27892391.525 ops/s
# Warmup Iteration  30: 27088320.256 ops/s
Iteration   1: 27202094.885 ops/s
Iteration   2: 27864681.360 ops/s
Iteration   3: 26881087.714 ops/s
Iteration   4: 27416900.651 ops/s
Iteration   5: 27582200.873 ops/s
Iteration   6: 27663037.782 ops/s
Iteration   7: 28327004.216 ops/s
Iteration   8: 27918415.579 ops/s
Iteration   9: 27687182.594 ops/s
Iteration  10: 27953717.912 ops/s
Iteration  11: 28019054.602 ops/s
Iteration  12: 27159931.908 ops/s
Iteration  13: 28079229.957 ops/s
Iteration  14: 28126863.030 ops/s
Iteration  15: 26838972.691 ops/s
Iteration  16: 27383076.850 ops/s
Iteration  17: 27183877.018 ops/s
Iteration  18: 27446722.580 ops/s
Iteration  19: 27316801.840 ops/s
Iteration  20: 27570960.695 ops/s
Iteration  21: 27477662.707 ops/s
Iteration  22: 26974284.028 ops/s
Iteration  23: 27931794.955 ops/s
Iteration  24: 27684634.040 ops/s
Iteration  25: 27864134.920 ops/s
Iteration  26: 27920222.246 ops/s
Iteration  27: 28554303.521 ops/s
Iteration  28: 28533968.819 ops/s
Iteration  29: 28077879.197 ops/s
Iteration  30: 27623685.933 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_sizeDistinct":
  27675479.503 ±(99.9%) 300411.596 ops/s [Average]
  (min, avg, max) = (26838972.691, 27675479.503, 28554303.521), stdev = 449641.968
  CI (99.9%): [27375067.908, 27975891.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  27675479.503 ± 300411.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13604.657 ops/s
# Warmup Iteration   2: 16472.471 ops/s
# Warmup Iteration   3: 22469.115 ops/s
# Warmup Iteration   4: 23060.630 ops/s
# Warmup Iteration   5: 21970.491 ops/s
# Warmup Iteration   6: 22848.664 ops/s
# Warmup Iteration   7: 23138.160 ops/s
# Warmup Iteration   8: 21796.303 ops/s
# Warmup Iteration   9: 18585.923 ops/s
# Warmup Iteration  10: 22574.460 ops/s
# Warmup Iteration  11: 22191.614 ops/s
# Warmup Iteration  12: 21961.489 ops/s
# Warmup Iteration  13: 22622.497 ops/s
# Warmup Iteration  14: 22277.757 ops/s
# Warmup Iteration  15: 21840.854 ops/s
# Warmup Iteration  16: 22063.060 ops/s
# Warmup Iteration  17: 22101.762 ops/s
# Warmup Iteration  18: 21788.925 ops/s
# Warmup Iteration  19: 22199.217 ops/s
# Warmup Iteration  20: 22182.527 ops/s
# Warmup Iteration  21: 21587.288 ops/s
# Warmup Iteration  22: 21948.489 ops/s
# Warmup Iteration  23: 21939.844 ops/s
# Warmup Iteration  24: 22531.014 ops/s
# Warmup Iteration  25: 22042.365 ops/s
# Warmup Iteration  26: 22612.037 ops/s
# Warmup Iteration  27: 23040.181 ops/s
# Warmup Iteration  28: 22800.143 ops/s
# Warmup Iteration  29: 22962.393 ops/s
# Warmup Iteration  30: 22203.840 ops/s
Iteration   1: 23048.428 ops/s
Iteration   2: 23323.969 ops/s
Iteration   3: 23377.162 ops/s
Iteration   4: 22524.732 ops/s
Iteration   5: 22814.717 ops/s
Iteration   6: 23140.825 ops/s
Iteration   7: 22885.037 ops/s
Iteration   8: 22565.911 ops/s
Iteration   9: 22860.254 ops/s
Iteration  10: 22887.515 ops/s
Iteration  11: 22812.974 ops/s
Iteration  12: 22844.338 ops/s
Iteration  13: 22638.867 ops/s
Iteration  14: 22898.518 ops/s
Iteration  15: 22876.560 ops/s
Iteration  16: 22789.331 ops/s
Iteration  17: 23031.507 ops/s
Iteration  18: 23136.360 ops/s
Iteration  19: 22467.726 ops/s
Iteration  20: 22341.894 ops/s
Iteration  21: 21774.195 ops/s
Iteration  22: 22029.028 ops/s
Iteration  23: 21900.738 ops/s
Iteration  24: 21911.239 ops/s
Iteration  25: 22095.744 ops/s
Iteration  26: 22706.241 ops/s
Iteration  27: 22872.470 ops/s
Iteration  28: 22619.095 ops/s
Iteration  29: 22194.238 ops/s
Iteration  30: 21665.421 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testEquals":
  22634.501 ±(99.9%) 306.071 ops/s [Average]
  (min, avg, max) = (21665.421, 22634.501, 23377.162), stdev = 458.112
  CI (99.9%): [22328.431, 22940.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score     Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_testEquals  thrpt   30  22634.501 ± 306.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788613.392 ops/s
# Warmup Iteration   2: 2366446.446 ops/s
# Warmup Iteration   3: 1930566.951 ops/s
# Warmup Iteration   4: 2341095.543 ops/s
# Warmup Iteration   5: 2345079.378 ops/s
# Warmup Iteration   6: 2309320.957 ops/s
# Warmup Iteration   7: 2320243.046 ops/s
# Warmup Iteration   8: 2343570.929 ops/s
# Warmup Iteration   9: 2326475.580 ops/s
# Warmup Iteration  10: 2332574.415 ops/s
# Warmup Iteration  11: 2294550.098 ops/s
# Warmup Iteration  12: 2251809.914 ops/s
# Warmup Iteration  13: 2244287.133 ops/s
# Warmup Iteration  14: 2306384.022 ops/s
# Warmup Iteration  15: 2331133.750 ops/s
# Warmup Iteration  16: 2258319.576 ops/s
# Warmup Iteration  17: 2356338.199 ops/s
# Warmup Iteration  18: 2347561.236 ops/s
# Warmup Iteration  19: 2295677.162 ops/s
# Warmup Iteration  20: 2351866.113 ops/s
# Warmup Iteration  21: 2336349.257 ops/s
# Warmup Iteration  22: 2259025.655 ops/s
# Warmup Iteration  23: 2285239.639 ops/s
# Warmup Iteration  24: 2271659.894 ops/s
# Warmup Iteration  25: 2291054.698 ops/s
# Warmup Iteration  26: 2297714.071 ops/s
# Warmup Iteration  27: 2275358.898 ops/s
# Warmup Iteration  28: 2344123.689 ops/s
# Warmup Iteration  29: 2319154.844 ops/s
# Warmup Iteration  30: 2384795.995 ops/s
Iteration   1: 2334431.610 ops/s
Iteration   2: 2369542.106 ops/s
Iteration   3: 2273038.223 ops/s
Iteration   4: 2261126.690 ops/s
Iteration   5: 2320289.258 ops/s
Iteration   6: 2311374.540 ops/s
Iteration   7: 2313718.245 ops/s
Iteration   8: 2347251.323 ops/s
Iteration   9: 2303858.111 ops/s
Iteration  10: 2281185.153 ops/s
Iteration  11: 2349928.543 ops/s
Iteration  12: 2289721.605 ops/s
Iteration  13: 2303331.053 ops/s
Iteration  14: 2305034.803 ops/s
Iteration  15: 2312122.406 ops/s
Iteration  16: 2358681.498 ops/s
Iteration  17: 2254933.097 ops/s
Iteration  18: 2300576.133 ops/s
Iteration  19: 2325492.726 ops/s
Iteration  20: 2331871.466 ops/s
Iteration  21: 2294790.595 ops/s
Iteration  22: 2251757.999 ops/s
Iteration  23: 2312698.460 ops/s
Iteration  24: 2214634.870 ops/s
Iteration  25: 2222091.986 ops/s
Iteration  26: 2266642.140 ops/s
Iteration  27: 2275810.842 ops/s
Iteration  28: 2319416.522 ops/s
Iteration  29: 2268249.241 ops/s
Iteration  30: 2271346.666 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testHashCode":
  2298164.930 ±(99.9%) 25179.010 ops/s [Average]
  (min, avg, max) = (2214634.870, 2298164.930, 2369542.106), stdev = 37686.759
  CI (99.9%): [2272985.921, 2323343.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_testHashCode  thrpt   30  2298164.930 ± 25179.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1747635.669 ops/s
# Warmup Iteration   2: 3846740.904 ops/s
# Warmup Iteration   3: 3262615.225 ops/s
# Warmup Iteration   4: 3932372.013 ops/s
# Warmup Iteration   5: 3911980.779 ops/s
# Warmup Iteration   6: 3933328.567 ops/s
# Warmup Iteration   7: 3796171.446 ops/s
# Warmup Iteration   8: 3889183.354 ops/s
# Warmup Iteration   9: 3852948.237 ops/s
# Warmup Iteration  10: 3852787.224 ops/s
# Warmup Iteration  11: 3772989.977 ops/s
# Warmup Iteration  12: 3890891.245 ops/s
# Warmup Iteration  13: 3915572.414 ops/s
# Warmup Iteration  14: 3898513.924 ops/s
# Warmup Iteration  15: 3866753.896 ops/s
# Warmup Iteration  16: 3888697.298 ops/s
# Warmup Iteration  17: 3838089.703 ops/s
# Warmup Iteration  18: 3858535.899 ops/s
# Warmup Iteration  19: 3878623.262 ops/s
# Warmup Iteration  20: 3897972.205 ops/s
# Warmup Iteration  21: 3806378.051 ops/s
# Warmup Iteration  22: 3881870.575 ops/s
# Warmup Iteration  23: 3757246.286 ops/s
# Warmup Iteration  24: 3735710.575 ops/s
# Warmup Iteration  25: 3814495.548 ops/s
# Warmup Iteration  26: 3784095.607 ops/s
# Warmup Iteration  27: 3694816.699 ops/s
# Warmup Iteration  28: 3816031.291 ops/s
# Warmup Iteration  29: 3804134.091 ops/s
# Warmup Iteration  30: 3819415.252 ops/s
Iteration   1: 3842518.863 ops/s
Iteration   2: 3908545.690 ops/s
Iteration   3: 3868893.265 ops/s
Iteration   4: 3813492.815 ops/s
Iteration   5: 3848107.827 ops/s
Iteration   6: 3910154.958 ops/s
Iteration   7: 3897810.944 ops/s
Iteration   8: 3910170.232 ops/s
Iteration   9: 3775072.086 ops/s
Iteration  10: 3808737.501 ops/s
Iteration  11: 3735084.556 ops/s
Iteration  12: 3880693.957 ops/s
Iteration  13: 3873374.839 ops/s
Iteration  14: 3872000.606 ops/s
Iteration  15: 3788741.016 ops/s
Iteration  16: 3879549.749 ops/s
Iteration  17: 3852932.265 ops/s
Iteration  18: 3917682.106 ops/s
Iteration  19: 3842072.869 ops/s
Iteration  20: 3855118.579 ops/s
Iteration  21: 3729724.786 ops/s
Iteration  22: 3802370.871 ops/s
Iteration  23: 3883379.268 ops/s
Iteration  24: 3900535.631 ops/s
Iteration  25: 3901065.299 ops/s
Iteration  26: 3894895.347 ops/s
Iteration  27: 3844788.210 ops/s
Iteration  28: 3760703.620 ops/s
Iteration  29: 3839956.329 ops/s
Iteration  30: 3802028.516 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_testToString":
  3848006.753 ±(99.9%) 35485.964 ops/s [Average]
  (min, avg, max) = (3729724.786, 3848006.753, 3917682.106), stdev = 53113.725
  CI (99.9%): [3812520.789, 3883492.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_testToString  thrpt   30  3848006.753 ± 35485.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9839431.130 ops/s
# Warmup Iteration   2: 15857467.848 ops/s
# Warmup Iteration   3: 18280210.609 ops/s
# Warmup Iteration   4: 18263688.018 ops/s
# Warmup Iteration   5: 18442450.909 ops/s
# Warmup Iteration   6: 18281630.002 ops/s
# Warmup Iteration   7: 18541792.990 ops/s
# Warmup Iteration   8: 18247657.626 ops/s
# Warmup Iteration   9: 18229754.091 ops/s
# Warmup Iteration  10: 18031547.652 ops/s
# Warmup Iteration  11: 17827179.577 ops/s
# Warmup Iteration  12: 17883111.098 ops/s
# Warmup Iteration  13: 17910956.691 ops/s
# Warmup Iteration  14: 18305045.332 ops/s
# Warmup Iteration  15: 17903992.097 ops/s
# Warmup Iteration  16: 17974992.503 ops/s
# Warmup Iteration  17: 18268073.132 ops/s
# Warmup Iteration  18: 18171961.994 ops/s
# Warmup Iteration  19: 18434894.648 ops/s
# Warmup Iteration  20: 17880613.189 ops/s
# Warmup Iteration  21: 18220754.560 ops/s
# Warmup Iteration  22: 17717272.587 ops/s
# Warmup Iteration  23: 18072080.427 ops/s
# Warmup Iteration  24: 18086219.413 ops/s
# Warmup Iteration  25: 18335075.127 ops/s
# Warmup Iteration  26: 18249561.819 ops/s
# Warmup Iteration  27: 18306958.386 ops/s
# Warmup Iteration  28: 18452044.818 ops/s
# Warmup Iteration  29: 18135999.232 ops/s
# Warmup Iteration  30: 18290546.779 ops/s
Iteration   1: 18008885.243 ops/s
Iteration   2: 18299170.007 ops/s
Iteration   3: 18283896.341 ops/s
Iteration   4: 17920962.452 ops/s
Iteration   5: 18073099.991 ops/s
Iteration   6: 18142672.169 ops/s
Iteration   7: 18416897.898 ops/s
Iteration   8: 17912200.444 ops/s
Iteration   9: 18062615.739 ops/s
Iteration  10: 18166101.386 ops/s
Iteration  11: 17759601.250 ops/s
Iteration  12: 18166461.551 ops/s
Iteration  13: 18396360.076 ops/s
Iteration  14: 18316685.203 ops/s
Iteration  15: 18529189.340 ops/s
Iteration  16: 17933692.439 ops/s
Iteration  17: 18269495.072 ops/s
Iteration  18: 18171316.992 ops/s
Iteration  19: 18451144.837 ops/s
Iteration  20: 18210842.293 ops/s
Iteration  21: 18477808.146 ops/s
Iteration  22: 18236094.075 ops/s
Iteration  23: 18182638.088 ops/s
Iteration  24: 18461511.493 ops/s
Iteration  25: 18479893.900 ops/s
Iteration  26: 18178715.251 ops/s
Iteration  27: 18149877.398 ops/s
Iteration  28: 17893625.990 ops/s
Iteration  29: 17975507.059 ops/s
Iteration  30: 18140407.146 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toArray":
  18188912.309 ±(99.9%) 134112.719 ops/s [Average]
  (min, avg, max) = (17759601.250, 18188912.309, 18529189.340), stdev = 200733.619
  CI (99.9%): [18054799.590, 18323025.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_toArray  thrpt   30  18188912.309 ± 134112.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6514804.976 ops/s
# Warmup Iteration   2: 10552405.310 ops/s
# Warmup Iteration   3: 12125192.565 ops/s
# Warmup Iteration   4: 12360555.315 ops/s
# Warmup Iteration   5: 12402875.812 ops/s
# Warmup Iteration   6: 11801410.703 ops/s
# Warmup Iteration   7: 12329169.467 ops/s
# Warmup Iteration   8: 12208222.690 ops/s
# Warmup Iteration   9: 12113677.564 ops/s
# Warmup Iteration  10: 12034788.927 ops/s
# Warmup Iteration  11: 12236629.586 ops/s
# Warmup Iteration  12: 12352285.449 ops/s
# Warmup Iteration  13: 12294024.121 ops/s
# Warmup Iteration  14: 12256975.324 ops/s
# Warmup Iteration  15: 12202709.293 ops/s
# Warmup Iteration  16: 12020716.375 ops/s
# Warmup Iteration  17: 11863287.856 ops/s
# Warmup Iteration  18: 11862924.400 ops/s
# Warmup Iteration  19: 12177811.119 ops/s
# Warmup Iteration  20: 12241069.032 ops/s
# Warmup Iteration  21: 12285832.353 ops/s
# Warmup Iteration  22: 12069232.931 ops/s
# Warmup Iteration  23: 11867389.681 ops/s
# Warmup Iteration  24: 11676017.054 ops/s
# Warmup Iteration  25: 12244571.046 ops/s
# Warmup Iteration  26: 12229703.936 ops/s
# Warmup Iteration  27: 12226691.315 ops/s
# Warmup Iteration  28: 12067889.133 ops/s
# Warmup Iteration  29: 11829795.455 ops/s
# Warmup Iteration  30: 12228249.338 ops/s
Iteration   1: 11921902.866 ops/s
Iteration   2: 12168530.959 ops/s
Iteration   3: 12044841.309 ops/s
Iteration   4: 11681419.565 ops/s
Iteration   5: 11855168.848 ops/s
Iteration   6: 12298022.917 ops/s
Iteration   7: 12388019.177 ops/s
Iteration   8: 12164566.285 ops/s
Iteration   9: 12228301.315 ops/s
Iteration  10: 12358984.670 ops/s
Iteration  11: 12322352.171 ops/s
Iteration  12: 12046055.682 ops/s
Iteration  13: 11590024.781 ops/s
Iteration  14: 12124030.225 ops/s
Iteration  15: 11743499.208 ops/s
Iteration  16: 11823031.263 ops/s
Iteration  17: 11847501.427 ops/s
Iteration  18: 11869749.228 ops/s
Iteration  19: 11621012.323 ops/s
Iteration  20: 11859137.380 ops/s
Iteration  21: 11925162.248 ops/s
Iteration  22: 12196031.712 ops/s
Iteration  23: 12092955.672 ops/s
Iteration  24: 11904573.859 ops/s
Iteration  25: 11821535.016 ops/s
Iteration  26: 12389723.966 ops/s
Iteration  27: 12166055.307 ops/s
Iteration  28: 11852778.746 ops/s
Iteration  29: 11993941.971 ops/s
Iteration  30: 12200867.746 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toBag":
  12016659.261 ±(99.9%) 153136.708 ops/s [Average]
  (min, avg, max) = (11590024.781, 12016659.261, 12389723.966), stdev = 229207.833
  CI (99.9%): [11863522.553, 12169795.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_toBag  thrpt   30  12016659.261 ± 153136.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3706489.777 ops/s
# Warmup Iteration   2: 7499374.461 ops/s
# Warmup Iteration   3: 6172391.292 ops/s
# Warmup Iteration   4: 7449965.391 ops/s
# Warmup Iteration   5: 7237877.566 ops/s
# Warmup Iteration   6: 7630042.445 ops/s
# Warmup Iteration   7: 7450752.642 ops/s
# Warmup Iteration   8: 7547491.795 ops/s
# Warmup Iteration   9: 7574875.360 ops/s
# Warmup Iteration  10: 7554265.441 ops/s
# Warmup Iteration  11: 7612919.815 ops/s
# Warmup Iteration  12: 7556100.374 ops/s
# Warmup Iteration  13: 7541845.235 ops/s
# Warmup Iteration  14: 7226699.255 ops/s
# Warmup Iteration  15: 7395653.002 ops/s
# Warmup Iteration  16: 7624676.434 ops/s
# Warmup Iteration  17: 7603199.622 ops/s
# Warmup Iteration  18: 7535935.134 ops/s
# Warmup Iteration  19: 7592028.155 ops/s
# Warmup Iteration  20: 7566011.083 ops/s
# Warmup Iteration  21: 7645506.722 ops/s
# Warmup Iteration  22: 7528231.007 ops/s
# Warmup Iteration  23: 7499571.082 ops/s
# Warmup Iteration  24: 7394292.036 ops/s
# Warmup Iteration  25: 7216659.371 ops/s
# Warmup Iteration  26: 7550955.933 ops/s
# Warmup Iteration  27: 7392879.880 ops/s
# Warmup Iteration  28: 7564501.122 ops/s
# Warmup Iteration  29: 7539966.252 ops/s
# Warmup Iteration  30: 7562458.792 ops/s
Iteration   1: 7527282.989 ops/s
Iteration   2: 7455108.377 ops/s
Iteration   3: 7567625.851 ops/s
Iteration   4: 7637135.736 ops/s
Iteration   5: 7577644.923 ops/s
Iteration   6: 7570008.216 ops/s
Iteration   7: 7233625.948 ops/s
Iteration   8: 7266136.003 ops/s
Iteration   9: 7314013.798 ops/s
Iteration  10: 7359555.543 ops/s
Iteration  11: 7381264.962 ops/s
Iteration  12: 7416157.888 ops/s
Iteration  13: 7554838.229 ops/s
Iteration  14: 7328416.545 ops/s
Iteration  15: 7282581.137 ops/s
Iteration  16: 7210763.882 ops/s
Iteration  17: 7347788.418 ops/s
Iteration  18: 7325379.929 ops/s
Iteration  19: 7368974.942 ops/s
Iteration  20: 7262557.175 ops/s
Iteration  21: 7512492.093 ops/s
Iteration  22: 7382376.582 ops/s
Iteration  23: 7523402.911 ops/s
Iteration  24: 7467927.661 ops/s
Iteration  25: 7373717.666 ops/s
Iteration  26: 7188089.897 ops/s
Iteration  27: 7644204.552 ops/s
Iteration  28: 7556085.300 ops/s
Iteration  29: 7662519.204 ops/s
Iteration  30: 7491132.804 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toImmutable":
  7426293.639 ±(99.9%) 91590.127 ops/s [Average]
  (min, avg, max) = (7188089.897, 7426293.639, 7662519.204), stdev = 137087.801
  CI (99.9%): [7334703.511, 7517883.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_toImmutable  thrpt   30  7426293.639 ± 91590.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3619936.717 ops/s
# Warmup Iteration   2: 6599281.900 ops/s
# Warmup Iteration   3: 7878437.368 ops/s
# Warmup Iteration   4: 7936949.454 ops/s
# Warmup Iteration   5: 7812066.868 ops/s
# Warmup Iteration   6: 7926083.473 ops/s
# Warmup Iteration   7: 7687576.647 ops/s
# Warmup Iteration   8: 7725125.786 ops/s
# Warmup Iteration   9: 7596224.633 ops/s
# Warmup Iteration  10: 7838142.230 ops/s
# Warmup Iteration  11: 7859991.929 ops/s
# Warmup Iteration  12: 7745854.640 ops/s
# Warmup Iteration  13: 7873092.366 ops/s
# Warmup Iteration  14: 7953757.190 ops/s
# Warmup Iteration  15: 7820001.730 ops/s
# Warmup Iteration  16: 7860908.762 ops/s
# Warmup Iteration  17: 7879328.217 ops/s
# Warmup Iteration  18: 7877759.745 ops/s
# Warmup Iteration  19: 7861493.629 ops/s
# Warmup Iteration  20: 7886375.437 ops/s
# Warmup Iteration  21: 7873718.953 ops/s
# Warmup Iteration  22: 7878503.165 ops/s
# Warmup Iteration  23: 7806944.820 ops/s
# Warmup Iteration  24: 7842747.564 ops/s
# Warmup Iteration  25: 7844937.121 ops/s
# Warmup Iteration  26: 7932949.900 ops/s
# Warmup Iteration  27: 7879881.064 ops/s
# Warmup Iteration  28: 7869399.191 ops/s
# Warmup Iteration  29: 7920576.828 ops/s
# Warmup Iteration  30: 7922827.321 ops/s
Iteration   1: 7828688.202 ops/s
Iteration   2: 7772764.270 ops/s
Iteration   3: 7933554.010 ops/s
Iteration   4: 7891795.410 ops/s
Iteration   5: 7902453.288 ops/s
Iteration   6: 7916357.029 ops/s
Iteration   7: 7973663.500 ops/s
Iteration   8: 7951352.250 ops/s
Iteration   9: 7797172.139 ops/s
Iteration  10: 7894477.108 ops/s
Iteration  11: 7935875.168 ops/s
Iteration  12: 7835904.196 ops/s
Iteration  13: 7938842.798 ops/s
Iteration  14: 7916996.230 ops/s
Iteration  15: 7925997.889 ops/s
Iteration  16: 7881496.866 ops/s
Iteration  17: 7888325.971 ops/s
Iteration  18: 7930076.753 ops/s
Iteration  19: 7905067.546 ops/s
Iteration  20: 7931694.538 ops/s
Iteration  21: 7935177.011 ops/s
Iteration  22: 7821884.341 ops/s
Iteration  23: 7966046.791 ops/s
Iteration  24: 7924181.754 ops/s
Iteration  25: 7920857.570 ops/s
Iteration  26: 7947967.696 ops/s
Iteration  27: 7906561.381 ops/s
Iteration  28: 7919701.960 ops/s
Iteration  29: 7825597.437 ops/s
Iteration  30: 7928305.498 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toList":
  7901627.887 ±(99.9%) 33612.767 ops/s [Average]
  (min, avg, max) = (7772764.270, 7901627.887, 7973663.500), stdev = 50310.011
  CI (99.9%): [7868015.120, 7935240.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_toList  thrpt   30  7901627.887 ± 33612.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9209043.565 ops/s
# Warmup Iteration   2: 15370204.917 ops/s
# Warmup Iteration   3: 17678135.456 ops/s
# Warmup Iteration   4: 17513576.337 ops/s
# Warmup Iteration   5: 17689786.380 ops/s
# Warmup Iteration   6: 17747206.994 ops/s
# Warmup Iteration   7: 17699650.770 ops/s
# Warmup Iteration   8: 17774059.063 ops/s
# Warmup Iteration   9: 17819585.322 ops/s
# Warmup Iteration  10: 17764868.650 ops/s
# Warmup Iteration  11: 17853982.209 ops/s
# Warmup Iteration  12: 17763004.038 ops/s
# Warmup Iteration  13: 17754116.962 ops/s
# Warmup Iteration  14: 17763380.586 ops/s
# Warmup Iteration  15: 17796265.711 ops/s
# Warmup Iteration  16: 17695884.946 ops/s
# Warmup Iteration  17: 17625414.511 ops/s
# Warmup Iteration  18: 17648678.442 ops/s
# Warmup Iteration  19: 17574751.149 ops/s
# Warmup Iteration  20: 17580208.013 ops/s
# Warmup Iteration  21: 17406243.591 ops/s
# Warmup Iteration  22: 17749341.094 ops/s
# Warmup Iteration  23: 17775448.707 ops/s
# Warmup Iteration  24: 17715008.838 ops/s
# Warmup Iteration  25: 17766234.177 ops/s
# Warmup Iteration  26: 17583263.300 ops/s
# Warmup Iteration  27: 17720857.590 ops/s
# Warmup Iteration  28: 17602856.676 ops/s
# Warmup Iteration  29: 17587380.756 ops/s
# Warmup Iteration  30: 17514696.970 ops/s
Iteration   1: 17631641.128 ops/s
Iteration   2: 17672347.162 ops/s
Iteration   3: 17719114.821 ops/s
Iteration   4: 17607391.051 ops/s
Iteration   5: 17804646.810 ops/s
Iteration   6: 17458552.986 ops/s
Iteration   7: 17716814.163 ops/s
Iteration   8: 17620567.300 ops/s
Iteration   9: 17634384.654 ops/s
Iteration  10: 17398194.147 ops/s
Iteration  11: 17460114.995 ops/s
Iteration  12: 17547294.545 ops/s
Iteration  13: 17621114.843 ops/s
Iteration  14: 17574528.856 ops/s
Iteration  15: 17755514.810 ops/s
Iteration  16: 17751967.487 ops/s
Iteration  17: 17606985.173 ops/s
Iteration  18: 17539149.547 ops/s
Iteration  19: 17296127.076 ops/s
Iteration  20: 17354595.883 ops/s
Iteration  21: 17744544.501 ops/s
Iteration  22: 17354856.133 ops/s
Iteration  23: 17579835.417 ops/s
Iteration  24: 17455099.263 ops/s
Iteration  25: 17555161.291 ops/s
Iteration  26: 17581236.304 ops/s
Iteration  27: 17590212.219 ops/s
Iteration  28: 17632451.719 ops/s
Iteration  29: 17727902.990 ops/s
Iteration  30: 17718428.743 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_toSet":
  17590359.201 ±(99.9%) 87628.702 ops/s [Average]
  (min, avg, max) = (17296127.076, 17590359.201, 17804646.810), stdev = 131158.526
  CI (99.9%): [17502730.498, 17677987.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_toSet  thrpt   30  17590359.201 ± 87628.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270812.409 ops/s
# Warmup Iteration   2: 432426.601 ops/s
# Warmup Iteration   3: 513315.348 ops/s
# Warmup Iteration   4: 513653.325 ops/s
# Warmup Iteration   5: 508271.666 ops/s
# Warmup Iteration   6: 495462.585 ops/s
# Warmup Iteration   7: 436564.069 ops/s
# Warmup Iteration   8: 514584.610 ops/s
# Warmup Iteration   9: 513079.612 ops/s
# Warmup Iteration  10: 517210.010 ops/s
# Warmup Iteration  11: 503307.825 ops/s
# Warmup Iteration  12: 509963.565 ops/s
# Warmup Iteration  13: 510076.542 ops/s
# Warmup Iteration  14: 511032.137 ops/s
# Warmup Iteration  15: 513680.446 ops/s
# Warmup Iteration  16: 515469.184 ops/s
# Warmup Iteration  17: 530351.010 ops/s
# Warmup Iteration  18: 529929.840 ops/s
# Warmup Iteration  19: 530492.901 ops/s
# Warmup Iteration  20: 528285.311 ops/s
# Warmup Iteration  21: 528287.991 ops/s
# Warmup Iteration  22: 527946.292 ops/s
# Warmup Iteration  23: 530509.352 ops/s
# Warmup Iteration  24: 529343.081 ops/s
# Warmup Iteration  25: 527803.391 ops/s
# Warmup Iteration  26: 527059.529 ops/s
# Warmup Iteration  27: 529855.813 ops/s
# Warmup Iteration  28: 527860.202 ops/s
# Warmup Iteration  29: 523404.847 ops/s
# Warmup Iteration  30: 525367.784 ops/s
Iteration   1: 529584.023 ops/s
Iteration   2: 527860.241 ops/s
Iteration   3: 529730.372 ops/s
Iteration   4: 530546.417 ops/s
Iteration   5: 527729.585 ops/s
Iteration   6: 523671.125 ops/s
Iteration   7: 525093.125 ops/s
Iteration   8: 529051.497 ops/s
Iteration   9: 523622.681 ops/s
Iteration  10: 521581.455 ops/s
Iteration  11: 523381.388 ops/s
Iteration  12: 531948.667 ops/s
Iteration  13: 524819.461 ops/s
Iteration  14: 524615.936 ops/s
Iteration  15: 527002.821 ops/s
Iteration  16: 519631.983 ops/s
Iteration  17: 529945.539 ops/s
Iteration  18: 532719.165 ops/s
Iteration  19: 524184.235 ops/s
Iteration  20: 522171.457 ops/s
Iteration  21: 527504.275 ops/s
Iteration  22: 529326.775 ops/s
Iteration  23: 522779.432 ops/s
Iteration  24: 523748.792 ops/s
Iteration  25: 522888.299 ops/s
Iteration  26: 520869.882 ops/s
Iteration  27: 516476.987 ops/s
Iteration  28: 530275.755 ops/s
Iteration  29: 526583.946 ops/s
Iteration  30: 529409.009 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_topOccurrences":
  525958.478 ±(99.9%) 2620.240 ops/s [Average]
  (min, avg, max) = (516476.987, 525958.478, 532719.165), stdev = 3921.852
  CI (99.9%): [523338.238, 528578.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  525958.478 ± 2620.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 777774.862 ops/s
# Warmup Iteration   2: 818067.683 ops/s
# Warmup Iteration   3: 1049695.677 ops/s
# Warmup Iteration   4: 1052761.438 ops/s
# Warmup Iteration   5: 1045653.240 ops/s
# Warmup Iteration   6: 1053366.189 ops/s
# Warmup Iteration   7: 1051712.447 ops/s
# Warmup Iteration   8: 1055137.855 ops/s
# Warmup Iteration   9: 1051366.052 ops/s
# Warmup Iteration  10: 1010734.083 ops/s
# Warmup Iteration  11: 929001.802 ops/s
# Warmup Iteration  12: 1048874.312 ops/s
# Warmup Iteration  13: 1047499.099 ops/s
# Warmup Iteration  14: 1052407.577 ops/s
# Warmup Iteration  15: 1053030.059 ops/s
# Warmup Iteration  16: 1049270.223 ops/s
# Warmup Iteration  17: 1107358.604 ops/s
# Warmup Iteration  18: 1107165.856 ops/s
# Warmup Iteration  19: 1113284.791 ops/s
# Warmup Iteration  20: 1108894.038 ops/s
# Warmup Iteration  21: 1119462.942 ops/s
# Warmup Iteration  22: 1118495.164 ops/s
# Warmup Iteration  23: 1122078.721 ops/s
# Warmup Iteration  24: 1121373.310 ops/s
# Warmup Iteration  25: 1113648.599 ops/s
# Warmup Iteration  26: 1121606.756 ops/s
# Warmup Iteration  27: 1098908.780 ops/s
# Warmup Iteration  28: 1076890.495 ops/s
# Warmup Iteration  29: 1110307.929 ops/s
# Warmup Iteration  30: 1107262.330 ops/s
Iteration   1: 1105395.740 ops/s
Iteration   2: 1109614.264 ops/s
Iteration   3: 1068264.869 ops/s
Iteration   4: 1110374.544 ops/s
Iteration   5: 1107622.719 ops/s
Iteration   6: 1109261.055 ops/s
Iteration   7: 1084693.054 ops/s
Iteration   8: 1114931.335 ops/s
Iteration   9: 1090794.416 ops/s
Iteration  10: 1098707.431 ops/s
Iteration  11: 1089357.997 ops/s
Iteration  12: 1089789.395 ops/s
Iteration  13: 1102901.802 ops/s
Iteration  14: 1105978.674 ops/s
Iteration  15: 1080136.692 ops/s
Iteration  16: 1092312.238 ops/s
Iteration  17: 1110085.333 ops/s
Iteration  18: 1091597.293 ops/s
Iteration  19: 1099437.839 ops/s
Iteration  20: 1087598.250 ops/s
Iteration  21: 1088161.282 ops/s
Iteration  22: 1110280.051 ops/s
Iteration  23: 1103552.059 ops/s
Iteration  24: 1101247.094 ops/s
Iteration  25: 1103723.238 ops/s
Iteration  26: 1108261.091 ops/s
Iteration  27: 1114630.809 ops/s
Iteration  28: 1117593.244 ops/s
Iteration  29: 1110075.489 ops/s
Iteration  30: 1100974.020 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_with":
  1100245.111 ±(99.9%) 7779.563 ops/s [Average]
  (min, avg, max) = (1068264.869, 1100245.111, 1117593.244), stdev = 11644.085
  CI (99.9%): [1092465.547, 1108024.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_with  thrpt   30  1100245.111 ± 7779.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 767006.424 ops/s
# Warmup Iteration   2: 825681.541 ops/s
# Warmup Iteration   3: 1034945.125 ops/s
# Warmup Iteration   4: 1036138.011 ops/s
# Warmup Iteration   5: 1030529.714 ops/s
# Warmup Iteration   6: 996595.857 ops/s
# Warmup Iteration   7: 991570.521 ops/s
# Warmup Iteration   8: 1022242.960 ops/s
# Warmup Iteration   9: 1046330.264 ops/s
# Warmup Iteration  10: 1032325.279 ops/s
# Warmup Iteration  11: 849383.264 ops/s
# Warmup Iteration  12: 996955.600 ops/s
# Warmup Iteration  13: 1025850.194 ops/s
# Warmup Iteration  14: 1012778.830 ops/s
# Warmup Iteration  15: 1010904.925 ops/s
# Warmup Iteration  16: 1032233.545 ops/s
# Warmup Iteration  17: 1094147.900 ops/s
# Warmup Iteration  18: 1099074.912 ops/s
# Warmup Iteration  19: 1099840.731 ops/s
# Warmup Iteration  20: 1086708.080 ops/s
# Warmup Iteration  21: 1030729.735 ops/s
# Warmup Iteration  22: 1076923.740 ops/s
# Warmup Iteration  23: 1084672.876 ops/s
# Warmup Iteration  24: 1095979.142 ops/s
# Warmup Iteration  25: 1098259.662 ops/s
# Warmup Iteration  26: 1103230.904 ops/s
# Warmup Iteration  27: 1057570.812 ops/s
# Warmup Iteration  28: 1064918.285 ops/s
# Warmup Iteration  29: 1077227.387 ops/s
# Warmup Iteration  30: 1113290.020 ops/s
Iteration   1: 1082331.190 ops/s
Iteration   2: 1100204.253 ops/s
Iteration   3: 1090255.426 ops/s
Iteration   4: 1076473.205 ops/s
Iteration   5: 1023174.790 ops/s
Iteration   6: 1038851.988 ops/s
Iteration   7: 1066045.616 ops/s
Iteration   8: 1091890.036 ops/s
Iteration   9: 1093181.943 ops/s
Iteration  10: 1101115.779 ops/s
Iteration  11: 1093341.963 ops/s
Iteration  12: 1096445.006 ops/s
Iteration  13: 1082715.347 ops/s
Iteration  14: 1057807.153 ops/s
Iteration  15: 1039876.479 ops/s
Iteration  16: 1106912.809 ops/s
Iteration  17: 1090435.108 ops/s
Iteration  18: 1072292.912 ops/s
Iteration  19: 1103897.128 ops/s
Iteration  20: 1105137.244 ops/s
Iteration  21: 1113319.766 ops/s
Iteration  22: 1110819.177 ops/s
Iteration  23: 1110164.652 ops/s
Iteration  24: 1105587.670 ops/s
Iteration  25: 1058772.435 ops/s
Iteration  26: 1106732.554 ops/s
Iteration  27: 1099355.959 ops/s
Iteration  28: 1024732.104 ops/s
Iteration  29: 1087360.171 ops/s
Iteration  30: 1102113.890 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withAll":
  1084378.125 ±(99.9%) 17213.514 ops/s [Average]
  (min, avg, max) = (1023174.790, 1084378.125, 1113319.766), stdev = 25764.380
  CI (99.9%): [1067164.611, 1101591.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_withAll  thrpt   30  1084378.125 ± 17213.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749626.135 ops/s
# Warmup Iteration   2: 833634.430 ops/s
# Warmup Iteration   3: 1061776.310 ops/s
# Warmup Iteration   4: 1062046.398 ops/s
# Warmup Iteration   5: 1061988.782 ops/s
# Warmup Iteration   6: 1054856.200 ops/s
# Warmup Iteration   7: 1050818.944 ops/s
# Warmup Iteration   8: 1055345.248 ops/s
# Warmup Iteration   9: 1055605.949 ops/s
# Warmup Iteration  10: 902291.169 ops/s
# Warmup Iteration  11: 1036077.118 ops/s
# Warmup Iteration  12: 1037425.488 ops/s
# Warmup Iteration  13: 1050086.666 ops/s
# Warmup Iteration  14: 1033746.696 ops/s
# Warmup Iteration  15: 1027979.148 ops/s
# Warmup Iteration  16: 1043666.863 ops/s
# Warmup Iteration  17: 1106682.496 ops/s
# Warmup Iteration  18: 1113420.607 ops/s
# Warmup Iteration  19: 1105586.438 ops/s
# Warmup Iteration  20: 1107871.608 ops/s
# Warmup Iteration  21: 1101660.669 ops/s
# Warmup Iteration  22: 1106932.441 ops/s
# Warmup Iteration  23: 1108526.548 ops/s
# Warmup Iteration  24: 1107411.323 ops/s
# Warmup Iteration  25: 1114934.173 ops/s
# Warmup Iteration  26: 1123170.275 ops/s
# Warmup Iteration  27: 1119487.360 ops/s
# Warmup Iteration  28: 1109297.501 ops/s
# Warmup Iteration  29: 1101646.608 ops/s
# Warmup Iteration  30: 1111945.095 ops/s
Iteration   1: 1103543.082 ops/s
Iteration   2: 1128637.022 ops/s
Iteration   3: 1089164.548 ops/s
Iteration   4: 1105332.912 ops/s
Iteration   5: 1119172.115 ops/s
Iteration   6: 1110297.833 ops/s
Iteration   7: 1081274.884 ops/s
Iteration   8: 1066123.325 ops/s
Iteration   9: 1091082.217 ops/s
Iteration  10: 1047462.061 ops/s
Iteration  11: 1104937.727 ops/s
Iteration  12: 1080763.745 ops/s
Iteration  13: 1089278.458 ops/s
Iteration  14: 1110318.462 ops/s
Iteration  15: 1116750.776 ops/s
Iteration  16: 1110281.721 ops/s
Iteration  17: 1097753.754 ops/s
Iteration  18: 1105877.776 ops/s
Iteration  19: 1107230.228 ops/s
Iteration  20: 1106930.669 ops/s
Iteration  21: 1099142.114 ops/s
Iteration  22: 1124768.076 ops/s
Iteration  23: 1112147.376 ops/s
Iteration  24: 1108895.214 ops/s
Iteration  25: 1123637.126 ops/s
Iteration  26: 1120428.140 ops/s
Iteration  27: 1115239.877 ops/s
Iteration  28: 1118775.200 ops/s
Iteration  29: 1109304.300 ops/s
Iteration  30: 1093426.928 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_without":
  1103265.922 ±(99.9%) 11863.413 ops/s [Average]
  (min, avg, max) = (1047462.061, 1103265.922, 1128637.022), stdev = 17756.600
  CI (99.9%): [1091402.509, 1115129.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_without  thrpt   30  1103265.922 ± 11863.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744555.147 ops/s
# Warmup Iteration   2: 797788.852 ops/s
# Warmup Iteration   3: 1037802.358 ops/s
# Warmup Iteration   4: 1038905.483 ops/s
# Warmup Iteration   5: 1016756.684 ops/s
# Warmup Iteration   6: 988770.749 ops/s
# Warmup Iteration   7: 1006337.415 ops/s
# Warmup Iteration   8: 1002694.357 ops/s
# Warmup Iteration   9: 1032027.372 ops/s
# Warmup Iteration  10: 863330.861 ops/s
# Warmup Iteration  11: 1036432.305 ops/s
# Warmup Iteration  12: 1042900.328 ops/s
# Warmup Iteration  13: 1029691.052 ops/s
# Warmup Iteration  14: 1036162.118 ops/s
# Warmup Iteration  15: 1029155.420 ops/s
# Warmup Iteration  16: 998185.462 ops/s
# Warmup Iteration  17: 1060358.373 ops/s
# Warmup Iteration  18: 1092545.788 ops/s
# Warmup Iteration  19: 1083108.284 ops/s
# Warmup Iteration  20: 1086140.729 ops/s
# Warmup Iteration  21: 1066893.223 ops/s
# Warmup Iteration  22: 1093633.519 ops/s
# Warmup Iteration  23: 1086374.570 ops/s
# Warmup Iteration  24: 1092927.141 ops/s
# Warmup Iteration  25: 1100492.957 ops/s
# Warmup Iteration  26: 1097722.648 ops/s
# Warmup Iteration  27: 1095203.528 ops/s
# Warmup Iteration  28: 1098505.024 ops/s
# Warmup Iteration  29: 1098719.075 ops/s
# Warmup Iteration  30: 1087090.549 ops/s
Iteration   1: 1091215.154 ops/s
Iteration   2: 1099289.735 ops/s
Iteration   3: 1085550.729 ops/s
Iteration   4: 1085448.875 ops/s
Iteration   5: 1106959.140 ops/s
Iteration   6: 1105436.902 ops/s
Iteration   7: 1092960.358 ops/s
Iteration   8: 1094478.669 ops/s
Iteration   9: 1090203.746 ops/s
Iteration  10: 1093420.617 ops/s
Iteration  11: 1072230.605 ops/s
Iteration  12: 1049895.364 ops/s
Iteration  13: 1088013.044 ops/s
Iteration  14: 1067085.543 ops/s
Iteration  15: 1062481.717 ops/s
Iteration  16: 1080753.550 ops/s
Iteration  17: 1099534.657 ops/s
Iteration  18: 1101678.094 ops/s
Iteration  19: 1069924.075 ops/s
Iteration  20: 1057854.891 ops/s
Iteration  21: 1072869.873 ops/s
Iteration  22: 1060240.032 ops/s
Iteration  23: 1102948.160 ops/s
Iteration  24: 1109446.735 ops/s
Iteration  25: 1114235.693 ops/s
Iteration  26: 1106827.170 ops/s
Iteration  27: 1101373.635 ops/s
Iteration  28: 1100061.916 ops/s
Iteration  29: 1080861.890 ops/s
Iteration  30: 1116938.910 ops/s


Result "org.eclipse.collections.impl.bag.mutable.primitive.UnmodifiableBooleanBagTest._Benchmark.benchmark_withoutAll":
  1088673.983 ±(99.9%) 11923.726 ops/s [Average]
  (min, avg, max) = (1049895.364, 1088673.983, 1116938.910), stdev = 17846.873
  CI (99.9%): [1076750.257, 1100597.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBooleanBagTest._Benchmark.benchmark_withoutAll  thrpt   30  1088673.983 ± 11923.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651318.144 ops/s
# Warmup Iteration   2: 766823.367 ops/s
# Warmup Iteration   3: 959599.890 ops/s
# Warmup Iteration   4: 926154.240 ops/s
# Warmup Iteration   5: 951504.164 ops/s
# Warmup Iteration   6: 946559.170 ops/s
# Warmup Iteration   7: 925384.644 ops/s
# Warmup Iteration   8: 940471.677 ops/s
# Warmup Iteration   9: 860708.687 ops/s
# Warmup Iteration  10: 886319.223 ops/s
# Warmup Iteration  11: 950441.758 ops/s
# Warmup Iteration  12: 955785.503 ops/s
# Warmup Iteration  13: 942607.251 ops/s
# Warmup Iteration  14: 948243.866 ops/s
# Warmup Iteration  15: 948514.961 ops/s
# Warmup Iteration  16: 952763.432 ops/s
# Warmup Iteration  17: 1003648.801 ops/s
# Warmup Iteration  18: 1004433.812 ops/s
# Warmup Iteration  19: 1003519.922 ops/s
# Warmup Iteration  20: 1006047.649 ops/s
# Warmup Iteration  21: 1004182.914 ops/s
# Warmup Iteration  22: 1006319.375 ops/s
# Warmup Iteration  23: 1009425.402 ops/s
# Warmup Iteration  24: 1013222.826 ops/s
# Warmup Iteration  25: 1001680.603 ops/s
# Warmup Iteration  26: 998169.108 ops/s
# Warmup Iteration  27: 955484.645 ops/s
# Warmup Iteration  28: 1028857.320 ops/s
# Warmup Iteration  29: 1002302.320 ops/s
# Warmup Iteration  30: 976194.856 ops/s
Iteration   1: 1007700.775 ops/s
Iteration   2: 1011974.986 ops/s
Iteration   3: 1011147.987 ops/s
Iteration   4: 1002062.597 ops/s
Iteration   5: 991427.881 ops/s
Iteration   6: 993998.156 ops/s
Iteration   7: 1003384.773 ops/s
Iteration   8: 992220.688 ops/s
Iteration   9: 1008674.824 ops/s
Iteration  10: 1004692.464 ops/s
Iteration  11: 1006278.994 ops/s
Iteration  12: 996658.580 ops/s
Iteration  13: 1004306.903 ops/s
Iteration  14: 985475.395 ops/s
Iteration  15: 1007068.624 ops/s
Iteration  16: 1004731.654 ops/s
Iteration  17: 1004070.108 ops/s
Iteration  18: 1002251.007 ops/s
Iteration  19: 998083.324 ops/s
Iteration  20: 1008325.619 ops/s
Iteration  21: 999512.279 ops/s
Iteration  22: 1009115.334 ops/s
Iteration  23: 1019689.724 ops/s
Iteration  24: 993664.082 ops/s
Iteration  25: 985671.579 ops/s
Iteration  26: 982611.435 ops/s
Iteration  27: 972269.851 ops/s
Iteration  28: 987676.927 ops/s
Iteration  29: 1022883.026 ops/s
Iteration  30: 1018753.736 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_add":
  1001212.777 ±(99.9%) 7675.949 ops/s [Average]
  (min, avg, max) = (972269.851, 1001212.777, 1022883.026), stdev = 11489.000
  CI (99.9%): [993536.828, 1008888.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_add  thrpt   30  1001212.777 ± 7675.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746869.756 ops/s
# Warmup Iteration   2: 789204.150 ops/s
# Warmup Iteration   3: 979718.426 ops/s
# Warmup Iteration   4: 983635.794 ops/s
# Warmup Iteration   5: 982828.107 ops/s
# Warmup Iteration   6: 981072.110 ops/s
# Warmup Iteration   7: 988419.632 ops/s
# Warmup Iteration   8: 985286.885 ops/s
# Warmup Iteration   9: 988827.026 ops/s
# Warmup Iteration  10: 989425.064 ops/s
# Warmup Iteration  11: 999275.795 ops/s
# Warmup Iteration  12: 906123.281 ops/s
# Warmup Iteration  13: 943185.802 ops/s
# Warmup Iteration  14: 1005023.504 ops/s
# Warmup Iteration  15: 998951.814 ops/s
# Warmup Iteration  16: 1004733.575 ops/s
# Warmup Iteration  17: 1050044.472 ops/s
# Warmup Iteration  18: 1078013.153 ops/s
# Warmup Iteration  19: 1064743.928 ops/s
# Warmup Iteration  20: 1051374.827 ops/s
# Warmup Iteration  21: 1047536.528 ops/s
# Warmup Iteration  22: 1057130.167 ops/s
# Warmup Iteration  23: 1064897.822 ops/s
# Warmup Iteration  24: 1050392.104 ops/s
# Warmup Iteration  25: 1026147.746 ops/s
# Warmup Iteration  26: 1064299.492 ops/s
# Warmup Iteration  27: 1060435.153 ops/s
# Warmup Iteration  28: 1062845.738 ops/s
# Warmup Iteration  29: 1059679.949 ops/s
# Warmup Iteration  30: 1059914.686 ops/s
Iteration   1: 1020758.096 ops/s
Iteration   2: 996379.617 ops/s
Iteration   3: 1040870.464 ops/s
Iteration   4: 1024639.769 ops/s
Iteration   5: 1005735.533 ops/s
Iteration   6: 1039955.679 ops/s
Iteration   7: 985950.600 ops/s
Iteration   8: 1048563.980 ops/s
Iteration   9: 1028139.252 ops/s
Iteration  10: 1027636.335 ops/s
Iteration  11: 1061823.666 ops/s
Iteration  12: 1028576.865 ops/s
Iteration  13: 1026077.915 ops/s
Iteration  14: 1046874.923 ops/s
Iteration  15: 1060769.228 ops/s
Iteration  16: 937720.268 ops/s
Iteration  17: 958835.112 ops/s
Iteration  18: 1015377.172 ops/s
Iteration  19: 1032706.233 ops/s
Iteration  20: 1029846.516 ops/s
Iteration  21: 1041020.647 ops/s
Iteration  22: 1051915.747 ops/s
Iteration  23: 1045399.747 ops/s
Iteration  24: 1044063.076 ops/s
Iteration  25: 1063059.349 ops/s
Iteration  26: 1050041.501 ops/s
Iteration  27: 1053874.322 ops/s
Iteration  28: 1076438.246 ops/s
Iteration  29: 1077526.046 ops/s
Iteration  30: 1064513.014 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_addAll":
  1032836.297 ±(99.9%) 21081.512 ops/s [Average]
  (min, avg, max) = (937720.268, 1032836.297, 1077526.046), stdev = 31553.817
  CI (99.9%): [1011754.785, 1053917.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_addAll  thrpt   30  1032836.297 ± 21081.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6251053.475 ops/s
# Warmup Iteration   2: 11917611.442 ops/s
# Warmup Iteration   3: 14219980.586 ops/s
# Warmup Iteration   4: 14011399.798 ops/s
# Warmup Iteration   5: 14170222.315 ops/s
# Warmup Iteration   6: 13896623.388 ops/s
# Warmup Iteration   7: 13888165.970 ops/s
# Warmup Iteration   8: 14049168.748 ops/s
# Warmup Iteration   9: 14057470.707 ops/s
# Warmup Iteration  10: 14134303.529 ops/s
# Warmup Iteration  11: 14155041.756 ops/s
# Warmup Iteration  12: 13960590.849 ops/s
# Warmup Iteration  13: 13918402.763 ops/s
# Warmup Iteration  14: 13870485.250 ops/s
# Warmup Iteration  15: 13892352.500 ops/s
# Warmup Iteration  16: 14050910.431 ops/s
# Warmup Iteration  17: 13917875.268 ops/s
# Warmup Iteration  18: 14136548.241 ops/s
# Warmup Iteration  19: 14168570.731 ops/s
# Warmup Iteration  20: 14147446.887 ops/s
# Warmup Iteration  21: 14101221.130 ops/s
# Warmup Iteration  22: 14228497.451 ops/s
# Warmup Iteration  23: 14115535.768 ops/s
# Warmup Iteration  24: 14116973.603 ops/s
# Warmup Iteration  25: 13932864.388 ops/s
# Warmup Iteration  26: 13958742.299 ops/s
# Warmup Iteration  27: 13713365.647 ops/s
# Warmup Iteration  28: 13906713.517 ops/s
# Warmup Iteration  29: 13985098.008 ops/s
# Warmup Iteration  30: 14339856.261 ops/s
Iteration   1: 13948598.584 ops/s
Iteration   2: 14259322.182 ops/s
Iteration   3: 13518386.351 ops/s
Iteration   4: 14194075.454 ops/s
Iteration   5: 14119389.107 ops/s
Iteration   6: 14137362.975 ops/s
Iteration   7: 14145027.601 ops/s
Iteration   8: 14071353.863 ops/s
Iteration   9: 13678177.216 ops/s
Iteration  10: 13834088.483 ops/s
Iteration  11: 13497597.355 ops/s
Iteration  12: 14211841.031 ops/s
Iteration  13: 14130883.105 ops/s
Iteration  14: 13596106.820 ops/s
Iteration  15: 14024162.389 ops/s
Iteration  16: 13829022.804 ops/s
Iteration  17: 13324322.329 ops/s
Iteration  18: 13712428.952 ops/s
Iteration  19: 13896283.746 ops/s
Iteration  20: 14042887.902 ops/s
Iteration  21: 13875651.578 ops/s
Iteration  22: 14135802.120 ops/s
Iteration  23: 14002581.787 ops/s
Iteration  24: 13977376.692 ops/s
Iteration  25: 13859707.825 ops/s
Iteration  26: 14028739.339 ops/s
Iteration  27: 14378515.399 ops/s
Iteration  28: 14228825.317 ops/s
Iteration  29: 14270096.661 ops/s
Iteration  30: 13987496.297 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByMutating":
  13963870.375 ±(99.9%) 169818.384 ops/s [Average]
  (min, avg, max) = (13324322.329, 13963870.375, 14378515.399), stdev = 254176.182
  CI (99.9%): [13794051.991, 14133688.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  13963870.375 ± 169818.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3928080.436 ops/s
# Warmup Iteration   2: 9586870.707 ops/s
# Warmup Iteration   3: 8186149.705 ops/s
# Warmup Iteration   4: 9746057.273 ops/s
# Warmup Iteration   5: 9870724.626 ops/s
# Warmup Iteration   6: 9833002.318 ops/s
# Warmup Iteration   7: 9811610.813 ops/s
# Warmup Iteration   8: 9849552.877 ops/s
# Warmup Iteration   9: 9941858.148 ops/s
# Warmup Iteration  10: 9767881.191 ops/s
# Warmup Iteration  11: 9863320.692 ops/s
# Warmup Iteration  12: 9804114.449 ops/s
# Warmup Iteration  13: 9547891.142 ops/s
# Warmup Iteration  14: 9844737.147 ops/s
# Warmup Iteration  15: 9944532.697 ops/s
# Warmup Iteration  16: 9875659.840 ops/s
# Warmup Iteration  17: 9716131.906 ops/s
# Warmup Iteration  18: 9844034.560 ops/s
# Warmup Iteration  19: 9821073.088 ops/s
# Warmup Iteration  20: 9677711.160 ops/s
# Warmup Iteration  21: 9760418.039 ops/s
# Warmup Iteration  22: 9817580.664 ops/s
# Warmup Iteration  23: 9658776.290 ops/s
# Warmup Iteration  24: 9855770.220 ops/s
# Warmup Iteration  25: 9840328.608 ops/s
# Warmup Iteration  26: 9739508.525 ops/s
# Warmup Iteration  27: 9800730.081 ops/s
# Warmup Iteration  28: 9727278.846 ops/s
# Warmup Iteration  29: 9565680.581 ops/s
# Warmup Iteration  30: 9815490.075 ops/s
Iteration   1: 9506907.557 ops/s
Iteration   2: 9791535.739 ops/s
Iteration   3: 9755903.296 ops/s
Iteration   4: 9713487.341 ops/s
Iteration   5: 9717804.283 ops/s
Iteration   6: 9697926.249 ops/s
Iteration   7: 9652495.416 ops/s
Iteration   8: 9820486.843 ops/s
Iteration   9: 9696066.345 ops/s
Iteration  10: 9786128.120 ops/s
Iteration  11: 9924771.465 ops/s
Iteration  12: 9551219.649 ops/s
Iteration  13: 9896932.442 ops/s
Iteration  14: 9794358.949 ops/s
Iteration  15: 9579694.993 ops/s
Iteration  16: 9386262.581 ops/s
Iteration  17: 9553820.521 ops/s
Iteration  18: 9726556.085 ops/s
Iteration  19: 9541286.450 ops/s
Iteration  20: 9595043.352 ops/s
Iteration  21: 9374075.578 ops/s
Iteration  22: 9572428.697 ops/s
Iteration  23: 9491007.417 ops/s
Iteration  24: 9652278.030 ops/s
Iteration  25: 9815600.315 ops/s
Iteration  26: 9912343.355 ops/s
Iteration  27: 9618918.903 ops/s
Iteration  28: 9921996.722 ops/s
Iteration  29: 9970418.679 ops/s
Iteration  30: 9962852.189 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByNonMutating":
  9699353.585 ±(99.9%) 110271.661 ops/s [Average]
  (min, avg, max) = (9374075.578, 9699353.585, 9970418.679), stdev = 165049.444
  CI (99.9%): [9589081.924, 9809625.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  9699353.585 ± 110271.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64926345.187 ops/s
# Warmup Iteration   2: 118865920.153 ops/s
# Warmup Iteration   3: 106922121.786 ops/s
# Warmup Iteration   4: 133435215.604 ops/s
# Warmup Iteration   5: 129611403.906 ops/s
# Warmup Iteration   6: 131587888.446 ops/s
# Warmup Iteration   7: 132254469.978 ops/s
# Warmup Iteration   8: 131671993.853 ops/s
# Warmup Iteration   9: 131774103.915 ops/s
# Warmup Iteration  10: 132449914.209 ops/s
# Warmup Iteration  11: 131925315.724 ops/s
# Warmup Iteration  12: 131155964.655 ops/s
# Warmup Iteration  13: 127842706.029 ops/s
# Warmup Iteration  14: 127798412.982 ops/s
# Warmup Iteration  15: 130762016.702 ops/s
# Warmup Iteration  16: 128251948.121 ops/s
# Warmup Iteration  17: 129806315.823 ops/s
# Warmup Iteration  18: 129824884.057 ops/s
# Warmup Iteration  19: 132441729.320 ops/s
# Warmup Iteration  20: 129037781.290 ops/s
# Warmup Iteration  21: 129384862.505 ops/s
# Warmup Iteration  22: 132024492.601 ops/s
# Warmup Iteration  23: 128763557.522 ops/s
# Warmup Iteration  24: 131354489.397 ops/s
# Warmup Iteration  25: 131296399.074 ops/s
# Warmup Iteration  26: 131028627.487 ops/s
# Warmup Iteration  27: 133099151.350 ops/s
# Warmup Iteration  28: 132350403.171 ops/s
# Warmup Iteration  29: 131878833.635 ops/s
# Warmup Iteration  30: 130420270.983 ops/s
Iteration   1: 131731935.113 ops/s
Iteration   2: 133076663.426 ops/s
Iteration   3: 133968845.275 ops/s
Iteration   4: 133150851.564 ops/s
Iteration   5: 127017425.175 ops/s
Iteration   6: 133096716.384 ops/s
Iteration   7: 132580261.261 ops/s
Iteration   8: 132984541.372 ops/s
Iteration   9: 133665852.662 ops/s
Iteration  10: 130544653.714 ops/s
Iteration  11: 130725013.445 ops/s
Iteration  12: 133460727.346 ops/s
Iteration  13: 132851842.018 ops/s
Iteration  14: 133163861.311 ops/s
Iteration  15: 134109917.935 ops/s
Iteration  16: 133833490.522 ops/s
Iteration  17: 130373796.904 ops/s
Iteration  18: 132139203.513 ops/s
Iteration  19: 130165987.785 ops/s
Iteration  20: 132866815.745 ops/s
Iteration  21: 132254500.896 ops/s
Iteration  22: 130566538.441 ops/s
Iteration  23: 133590798.656 ops/s
Iteration  24: 131163811.049 ops/s
Iteration  25: 133668154.857 ops/s
Iteration  26: 134105359.796 ops/s
Iteration  27: 131638195.157 ops/s
Iteration  28: 128471545.554 ops/s
Iteration  29: 128673693.908 ops/s
Iteration  30: 127048151.932 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfy":
  131889638.424 ±(99.9%) 1355990.607 ops/s [Average]
  (min, avg, max) = (127017425.175, 131889638.424, 134109917.935), stdev = 2029583.059
  CI (99.9%): [130533647.817, 133245629.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  131889638.424 ± 1355990.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59037800.263 ops/s
# Warmup Iteration   2: 120226008.999 ops/s
# Warmup Iteration   3: 113810113.470 ops/s
# Warmup Iteration   4: 133267477.282 ops/s
# Warmup Iteration   5: 132572420.582 ops/s
# Warmup Iteration   6: 132223129.044 ops/s
# Warmup Iteration   7: 132796041.869 ops/s
# Warmup Iteration   8: 132384736.627 ops/s
# Warmup Iteration   9: 132414380.772 ops/s
# Warmup Iteration  10: 133234435.690 ops/s
# Warmup Iteration  11: 133102814.901 ops/s
# Warmup Iteration  12: 132859616.838 ops/s
# Warmup Iteration  13: 133053604.672 ops/s
# Warmup Iteration  14: 133816174.651 ops/s
# Warmup Iteration  15: 133136954.637 ops/s
# Warmup Iteration  16: 131630573.736 ops/s
# Warmup Iteration  17: 134562131.482 ops/s
# Warmup Iteration  18: 134172465.514 ops/s
# Warmup Iteration  19: 131278119.483 ops/s
# Warmup Iteration  20: 131260314.552 ops/s
# Warmup Iteration  21: 130971937.046 ops/s
# Warmup Iteration  22: 131300091.935 ops/s
# Warmup Iteration  23: 131039793.005 ops/s
# Warmup Iteration  24: 131818342.096 ops/s
# Warmup Iteration  25: 133210031.123 ops/s
# Warmup Iteration  26: 131135002.869 ops/s
# Warmup Iteration  27: 132079349.345 ops/s
# Warmup Iteration  28: 130916397.436 ops/s
# Warmup Iteration  29: 132858696.029 ops/s
# Warmup Iteration  30: 133532469.138 ops/s
Iteration   1: 130769335.780 ops/s
Iteration   2: 129116458.686 ops/s
Iteration   3: 131858156.003 ops/s
Iteration   4: 132675223.211 ops/s
Iteration   5: 134600984.377 ops/s
Iteration   6: 133816453.036 ops/s
Iteration   7: 132571999.305 ops/s
Iteration   8: 133357744.357 ops/s
Iteration   9: 133627467.521 ops/s
Iteration  10: 133382170.703 ops/s
Iteration  11: 133794366.353 ops/s
Iteration  12: 131789324.072 ops/s
Iteration  13: 128399835.536 ops/s
Iteration  14: 132643211.249 ops/s
Iteration  15: 134870617.848 ops/s
Iteration  16: 132956206.944 ops/s
Iteration  17: 128368930.798 ops/s
Iteration  18: 130372385.960 ops/s
Iteration  19: 131187643.073 ops/s
Iteration  20: 133283534.688 ops/s
Iteration  21: 128865001.364 ops/s
Iteration  22: 133651722.556 ops/s
Iteration  23: 132755401.527 ops/s
Iteration  24: 132874653.581 ops/s
Iteration  25: 130110578.595 ops/s
Iteration  26: 132156696.578 ops/s
Iteration  27: 130639473.541 ops/s
Iteration  28: 134227642.337 ops/s
Iteration  29: 133500300.077 ops/s
Iteration  30: 132903454.347 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWith":
  132170899.133 ±(99.9%) 1225208.877 ops/s [Average]
  (min, avg, max) = (128368930.798, 132170899.133, 134870617.848), stdev = 1833835.107
  CI (99.9%): [130945690.257, 133396108.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  132170899.133 ± 1225208.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160577445.227 ops/s
# Warmup Iteration   2: 304169501.292 ops/s
# Warmup Iteration   3: 267271216.750 ops/s
# Warmup Iteration   4: 311320572.685 ops/s
# Warmup Iteration   5: 303113876.267 ops/s
# Warmup Iteration   6: 310709855.013 ops/s
# Warmup Iteration   7: 312553225.010 ops/s
# Warmup Iteration   8: 312950889.620 ops/s
# Warmup Iteration   9: 313922745.626 ops/s
# Warmup Iteration  10: 313421054.123 ops/s
# Warmup Iteration  11: 297738187.993 ops/s
# Warmup Iteration  12: 302939796.677 ops/s
# Warmup Iteration  13: 311475300.270 ops/s
# Warmup Iteration  14: 311055037.376 ops/s
# Warmup Iteration  15: 309375957.601 ops/s
# Warmup Iteration  16: 306354752.995 ops/s
# Warmup Iteration  17: 310469699.358 ops/s
# Warmup Iteration  18: 307560695.385 ops/s
# Warmup Iteration  19: 309761583.608 ops/s
# Warmup Iteration  20: 301203542.526 ops/s
# Warmup Iteration  21: 311115021.877 ops/s
# Warmup Iteration  22: 302858833.663 ops/s
# Warmup Iteration  23: 308212760.436 ops/s
# Warmup Iteration  24: 295994464.603 ops/s
# Warmup Iteration  25: 311066149.166 ops/s
# Warmup Iteration  26: 305645372.024 ops/s
# Warmup Iteration  27: 302948042.714 ops/s
# Warmup Iteration  28: 305236596.109 ops/s
# Warmup Iteration  29: 307308723.582 ops/s
# Warmup Iteration  30: 297573275.721 ops/s
Iteration   1: 304759480.975 ops/s
Iteration   2: 304840793.536 ops/s
Iteration   3: 298043484.237 ops/s
Iteration   4: 305953990.458 ops/s
Iteration   5: 304783151.799 ops/s
Iteration   6: 312961496.609 ops/s
Iteration   7: 312144991.268 ops/s
Iteration   8: 308778505.612 ops/s
Iteration   9: 300178208.971 ops/s
Iteration  10: 305659826.039 ops/s
Iteration  11: 307326464.174 ops/s
Iteration  12: 299166777.913 ops/s
Iteration  13: 312393378.983 ops/s
Iteration  14: 311585826.096 ops/s
Iteration  15: 308686417.541 ops/s
Iteration  16: 310009430.533 ops/s
Iteration  17: 310998788.840 ops/s
Iteration  18: 306460774.064 ops/s
Iteration  19: 308028678.664 ops/s
Iteration  20: 313073141.875 ops/s
Iteration  21: 311347640.680 ops/s
Iteration  22: 312238135.508 ops/s
Iteration  23: 315019294.013 ops/s
Iteration  24: 315730562.309 ops/s
Iteration  25: 313457960.674 ops/s
Iteration  26: 311943940.870 ops/s
Iteration  27: 311367152.052 ops/s
Iteration  28: 309274900.927 ops/s
Iteration  29: 312045908.417 ops/s
Iteration  30: 313232087.646 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  309049706.376 ±(99.9%) 3045677.941 ops/s [Average]
  (min, avg, max) = (298043484.237, 309049706.376, 315730562.309), stdev = 4558627.707
  CI (99.9%): [306004028.435, 312095384.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  309049706.376 ± 3045677.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54893097.935 ops/s
# Warmup Iteration   2: 115486004.982 ops/s
# Warmup Iteration   3: 113573153.917 ops/s
# Warmup Iteration   4: 132349383.609 ops/s
# Warmup Iteration   5: 134327024.760 ops/s
# Warmup Iteration   6: 133985817.567 ops/s
# Warmup Iteration   7: 129771787.881 ops/s
# Warmup Iteration   8: 132220319.383 ops/s
# Warmup Iteration   9: 131674439.348 ops/s
# Warmup Iteration  10: 130143797.136 ops/s
# Warmup Iteration  11: 131879288.456 ops/s
# Warmup Iteration  12: 131755068.100 ops/s
# Warmup Iteration  13: 131917357.152 ops/s
# Warmup Iteration  14: 131999326.546 ops/s
# Warmup Iteration  15: 131852658.633 ops/s
# Warmup Iteration  16: 130344499.543 ops/s
# Warmup Iteration  17: 132282554.147 ops/s
# Warmup Iteration  18: 131803553.463 ops/s
# Warmup Iteration  19: 134226140.906 ops/s
# Warmup Iteration  20: 132232634.576 ops/s
# Warmup Iteration  21: 132433648.850 ops/s
# Warmup Iteration  22: 132663332.759 ops/s
# Warmup Iteration  23: 132302006.459 ops/s
# Warmup Iteration  24: 131586077.947 ops/s
# Warmup Iteration  25: 129609301.773 ops/s
# Warmup Iteration  26: 133284162.228 ops/s
# Warmup Iteration  27: 131894906.391 ops/s
# Warmup Iteration  28: 132023170.268 ops/s
# Warmup Iteration  29: 132324992.031 ops/s
# Warmup Iteration  30: 129632302.580 ops/s
Iteration   1: 127346661.779 ops/s
Iteration   2: 128426861.948 ops/s
Iteration   3: 125864292.041 ops/s
Iteration   4: 126876230.489 ops/s
Iteration   5: 132881471.281 ops/s
Iteration   6: 132662160.076 ops/s
Iteration   7: 132838971.850 ops/s
Iteration   8: 131719746.751 ops/s
Iteration   9: 130508986.232 ops/s
Iteration  10: 127411002.099 ops/s
Iteration  11: 129748517.105 ops/s
Iteration  12: 124290640.633 ops/s
Iteration  13: 127534568.992 ops/s
Iteration  14: 126999342.674 ops/s
Iteration  15: 132484997.070 ops/s
Iteration  16: 130469911.614 ops/s
Iteration  17: 131554234.485 ops/s
Iteration  18: 132171231.644 ops/s
Iteration  19: 130963375.347 ops/s
Iteration  20: 129537457.586 ops/s
Iteration  21: 128808133.222 ops/s
Iteration  22: 127849728.791 ops/s
Iteration  23: 131150993.491 ops/s
Iteration  24: 128109958.839 ops/s
Iteration  25: 127245031.537 ops/s
Iteration  26: 133297707.512 ops/s
Iteration  27: 134495866.983 ops/s
Iteration  28: 134206323.904 ops/s
Iteration  29: 134248937.833 ops/s
Iteration  30: 131821067.703 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfy":
  130117480.384 ±(99.9%) 1841961.145 ops/s [Average]
  (min, avg, max) = (124290640.633, 130117480.384, 134495866.983), stdev = 2756960.938
  CI (99.9%): [128275519.238, 131959441.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  130117480.384 ± 1841961.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62021687.021 ops/s
# Warmup Iteration   2: 122396541.045 ops/s
# Warmup Iteration   3: 107946862.352 ops/s
# Warmup Iteration   4: 134098813.450 ops/s
# Warmup Iteration   5: 134575357.716 ops/s
# Warmup Iteration   6: 130496806.955 ops/s
# Warmup Iteration   7: 133243676.404 ops/s
# Warmup Iteration   8: 132044293.696 ops/s
# Warmup Iteration   9: 133112497.328 ops/s
# Warmup Iteration  10: 132440417.583 ops/s
# Warmup Iteration  11: 131699355.347 ops/s
# Warmup Iteration  12: 130741025.891 ops/s
# Warmup Iteration  13: 131815413.105 ops/s
# Warmup Iteration  14: 131867985.491 ops/s
# Warmup Iteration  15: 126464783.273 ops/s
# Warmup Iteration  16: 132386325.572 ops/s
# Warmup Iteration  17: 129210109.709 ops/s
# Warmup Iteration  18: 132080029.809 ops/s
# Warmup Iteration  19: 130007533.742 ops/s
# Warmup Iteration  20: 131983158.137 ops/s
# Warmup Iteration  21: 128657542.586 ops/s
# Warmup Iteration  22: 129552594.320 ops/s
# Warmup Iteration  23: 127986847.796 ops/s
# Warmup Iteration  24: 130808161.519 ops/s
# Warmup Iteration  25: 128595340.839 ops/s
# Warmup Iteration  26: 132329202.948 ops/s
# Warmup Iteration  27: 128613188.267 ops/s
# Warmup Iteration  28: 131541419.128 ops/s
# Warmup Iteration  29: 132889762.158 ops/s
# Warmup Iteration  30: 131771458.096 ops/s
Iteration   1: 128336338.378 ops/s
Iteration   2: 133259204.674 ops/s
Iteration   3: 131762042.257 ops/s
Iteration   4: 132100527.696 ops/s
Iteration   5: 134974053.607 ops/s
Iteration   6: 132613660.561 ops/s
Iteration   7: 134425287.599 ops/s
Iteration   8: 134988195.991 ops/s
Iteration   9: 133445652.855 ops/s
Iteration  10: 134829881.741 ops/s
Iteration  11: 134490609.796 ops/s
Iteration  12: 132426873.184 ops/s
Iteration  13: 130305506.718 ops/s
Iteration  14: 130991422.944 ops/s
Iteration  15: 129713255.287 ops/s
Iteration  16: 130812042.609 ops/s
Iteration  17: 133477889.758 ops/s
Iteration  18: 133985937.799 ops/s
Iteration  19: 132034145.212 ops/s
Iteration  20: 133736185.752 ops/s
Iteration  21: 134764995.877 ops/s
Iteration  22: 134273665.425 ops/s
Iteration  23: 133536057.225 ops/s
Iteration  24: 127265079.842 ops/s
Iteration  25: 126092036.653 ops/s
Iteration  26: 128902167.278 ops/s
Iteration  27: 128938774.285 ops/s
Iteration  28: 132605693.965 ops/s
Iteration  29: 127252113.494 ops/s
Iteration  30: 126473101.585 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWith":
  131760413.335 ±(99.9%) 1833748.573 ops/s [Average]
  (min, avg, max) = (126092036.653, 131760413.335, 134988195.991), stdev = 2744668.745
  CI (99.9%): [129926664.762, 133594161.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  131760413.335 ± 1833748.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 155973150.112 ops/s
# Warmup Iteration   2: 298927045.956 ops/s
# Warmup Iteration   3: 243564244.281 ops/s
# Warmup Iteration   4: 282540665.990 ops/s
# Warmup Iteration   5: 281069914.886 ops/s
# Warmup Iteration   6: 281463031.366 ops/s
# Warmup Iteration   7: 278641833.803 ops/s
# Warmup Iteration   8: 277082842.390 ops/s
# Warmup Iteration   9: 274888107.503 ops/s
# Warmup Iteration  10: 277315380.413 ops/s
# Warmup Iteration  11: 282033706.265 ops/s
# Warmup Iteration  12: 282777958.659 ops/s
# Warmup Iteration  13: 275129898.280 ops/s
# Warmup Iteration  14: 283977830.995 ops/s
# Warmup Iteration  15: 283507876.991 ops/s
# Warmup Iteration  16: 281609993.520 ops/s
# Warmup Iteration  17: 274547757.303 ops/s
# Warmup Iteration  18: 274140672.785 ops/s
# Warmup Iteration  19: 276737465.893 ops/s
# Warmup Iteration  20: 269672304.958 ops/s
# Warmup Iteration  21: 287629470.366 ops/s
# Warmup Iteration  22: 281045949.994 ops/s
# Warmup Iteration  23: 271395104.528 ops/s
# Warmup Iteration  24: 280240854.969 ops/s
# Warmup Iteration  25: 275697379.345 ops/s
# Warmup Iteration  26: 280793899.798 ops/s
# Warmup Iteration  27: 280684076.772 ops/s
# Warmup Iteration  28: 284465157.823 ops/s
# Warmup Iteration  29: 281236897.685 ops/s
# Warmup Iteration  30: 284381442.943 ops/s
Iteration   1: 281044628.008 ops/s
Iteration   2: 283971619.608 ops/s
Iteration   3: 284774784.806 ops/s
Iteration   4: 282621160.146 ops/s
Iteration   5: 284657648.755 ops/s
Iteration   6: 283814786.639 ops/s
Iteration   7: 279331367.830 ops/s
Iteration   8: 284418458.571 ops/s
Iteration   9: 282438215.685 ops/s
Iteration  10: 284101063.388 ops/s
Iteration  11: 282624828.527 ops/s
Iteration  12: 283800342.471 ops/s
Iteration  13: 283852013.416 ops/s
Iteration  14: 283946959.682 ops/s
Iteration  15: 283460555.925 ops/s
Iteration  16: 284117739.782 ops/s
Iteration  17: 279572800.921 ops/s
Iteration  18: 282809509.051 ops/s
Iteration  19: 282766249.802 ops/s
Iteration  20: 282370971.330 ops/s
Iteration  21: 279919032.674 ops/s
Iteration  22: 283165664.143 ops/s
Iteration  23: 284505784.457 ops/s
Iteration  24: 280815826.628 ops/s
Iteration  25: 277754764.147 ops/s
Iteration  26: 282145757.626 ops/s
Iteration  27: 279774282.035 ops/s
Iteration  28: 281158587.879 ops/s
Iteration  29: 281004026.671 ops/s
Iteration  30: 278354900.439 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  282303144.368 ±(99.9%) 1325573.213 ops/s [Average]
  (min, avg, max) = (277754764.147, 282303144.368, 284774784.806), stdev = 1984055.732
  CI (99.9%): [280977571.155, 283628717.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  282303144.368 ± 1325573.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13672001.964 ops/s
# Warmup Iteration   2: 24288850.605 ops/s
# Warmup Iteration   3: 23209513.741 ops/s
# Warmup Iteration   4: 25810678.113 ops/s
# Warmup Iteration   5: 25866097.411 ops/s
# Warmup Iteration   6: 25960083.446 ops/s
# Warmup Iteration   7: 25855630.671 ops/s
# Warmup Iteration   8: 25910706.124 ops/s
# Warmup Iteration   9: 25834451.557 ops/s
# Warmup Iteration  10: 25847635.505 ops/s
# Warmup Iteration  11: 25134836.605 ops/s
# Warmup Iteration  12: 25350994.135 ops/s
# Warmup Iteration  13: 25737589.343 ops/s
# Warmup Iteration  14: 26113565.324 ops/s
# Warmup Iteration  15: 26070435.294 ops/s
# Warmup Iteration  16: 26118250.820 ops/s
# Warmup Iteration  17: 26149525.466 ops/s
# Warmup Iteration  18: 25996615.438 ops/s
# Warmup Iteration  19: 25810424.147 ops/s
# Warmup Iteration  20: 25813817.091 ops/s
# Warmup Iteration  21: 25517027.697 ops/s
# Warmup Iteration  22: 24987501.946 ops/s
# Warmup Iteration  23: 25251545.307 ops/s
# Warmup Iteration  24: 24801645.816 ops/s
# Warmup Iteration  25: 25169231.351 ops/s
# Warmup Iteration  26: 25637066.636 ops/s
# Warmup Iteration  27: 25808463.173 ops/s
# Warmup Iteration  28: 26029346.340 ops/s
# Warmup Iteration  29: 25785516.302 ops/s
# Warmup Iteration  30: 25945784.826 ops/s
Iteration   1: 26057403.290 ops/s
Iteration   2: 25821402.367 ops/s
Iteration   3: 25722283.227 ops/s
Iteration   4: 25775324.264 ops/s
Iteration   5: 25829352.842 ops/s
Iteration   6: 25284273.248 ops/s
Iteration   7: 25856092.097 ops/s
Iteration   8: 25946872.033 ops/s
Iteration   9: 25332060.660 ops/s
Iteration  10: 25791936.764 ops/s
Iteration  11: 25134884.294 ops/s
Iteration  12: 25977698.064 ops/s
Iteration  13: 26156211.031 ops/s
Iteration  14: 26344002.716 ops/s
Iteration  15: 26011123.429 ops/s
Iteration  16: 25801588.663 ops/s
Iteration  17: 25467000.538 ops/s
Iteration  18: 26139335.743 ops/s
Iteration  19: 26059495.758 ops/s
Iteration  20: 26292183.597 ops/s
Iteration  21: 25211442.314 ops/s
Iteration  22: 24613642.447 ops/s
Iteration  23: 24807507.936 ops/s
Iteration  24: 25528192.156 ops/s
Iteration  25: 24831914.083 ops/s
Iteration  26: 26015149.341 ops/s
Iteration  27: 25890511.408 ops/s
Iteration  28: 25467499.251 ops/s
Iteration  29: 25757579.220 ops/s
Iteration  30: 25332439.179 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_appendString":
  25675213.399 ±(99.9%) 296959.413 ops/s [Average]
  (min, avg, max) = (24613642.447, 25675213.399, 26344002.716), stdev = 444474.904
  CI (99.9%): [25378253.985, 25972172.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_appendString  thrpt   30  25675213.399 ± 296959.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19555738.711 ops/s
# Warmup Iteration   2: 40628339.351 ops/s
# Warmup Iteration   3: 34229597.644 ops/s
# Warmup Iteration   4: 39349190.228 ops/s
# Warmup Iteration   5: 40883261.143 ops/s
# Warmup Iteration   6: 40386800.548 ops/s
# Warmup Iteration   7: 40239671.334 ops/s
# Warmup Iteration   8: 39537679.813 ops/s
# Warmup Iteration   9: 40671140.556 ops/s
# Warmup Iteration  10: 40731404.875 ops/s
# Warmup Iteration  11: 41091349.839 ops/s
# Warmup Iteration  12: 39128539.880 ops/s
# Warmup Iteration  13: 40404152.419 ops/s
# Warmup Iteration  14: 40777932.680 ops/s
# Warmup Iteration  15: 40671064.117 ops/s
# Warmup Iteration  16: 40928374.069 ops/s
# Warmup Iteration  17: 40526937.575 ops/s
# Warmup Iteration  18: 40669924.166 ops/s
# Warmup Iteration  19: 39719848.214 ops/s
# Warmup Iteration  20: 39694527.288 ops/s
# Warmup Iteration  21: 40992229.711 ops/s
# Warmup Iteration  22: 40679305.461 ops/s
# Warmup Iteration  23: 41392210.250 ops/s
# Warmup Iteration  24: 41209209.041 ops/s
# Warmup Iteration  25: 41215032.468 ops/s
# Warmup Iteration  26: 41214171.169 ops/s
# Warmup Iteration  27: 41145143.437 ops/s
# Warmup Iteration  28: 41003879.077 ops/s
# Warmup Iteration  29: 40430414.971 ops/s
# Warmup Iteration  30: 41179590.891 ops/s
Iteration   1: 40807709.215 ops/s
Iteration   2: 41454674.435 ops/s
Iteration   3: 40748209.365 ops/s
Iteration   4: 41055072.094 ops/s
Iteration   5: 41363467.317 ops/s
Iteration   6: 40939566.958 ops/s
Iteration   7: 40934478.031 ops/s
Iteration   8: 41555871.012 ops/s
Iteration   9: 40999042.032 ops/s
Iteration  10: 40968616.278 ops/s
Iteration  11: 41165544.975 ops/s
Iteration  12: 41228928.372 ops/s
Iteration  13: 40814966.591 ops/s
Iteration  14: 40744169.391 ops/s
Iteration  15: 41252981.767 ops/s
Iteration  16: 40194739.947 ops/s
Iteration  17: 40614759.537 ops/s
Iteration  18: 41055923.573 ops/s
Iteration  19: 39575129.504 ops/s
Iteration  20: 39986040.460 ops/s
Iteration  21: 40761401.450 ops/s
Iteration  22: 41036610.720 ops/s
Iteration  23: 39036501.138 ops/s
Iteration  24: 39551494.753 ops/s
Iteration  25: 41020656.480 ops/s
Iteration  26: 41602823.557 ops/s
Iteration  27: 41522028.853 ops/s
Iteration  28: 40968633.826 ops/s
Iteration  29: 40058760.762 ops/s
Iteration  30: 40907175.250 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_bottomOccurrences":
  40797532.588 ±(99.9%) 414754.735 ops/s [Average]
  (min, avg, max) = (39036501.138, 40797532.588, 41602823.557), stdev = 620785.409
  CI (99.9%): [40382777.853, 41212287.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  40797532.588 ± 414754.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 605363.489 ops/s
# Warmup Iteration   2: 682510.481 ops/s
# Warmup Iteration   3: 881562.401 ops/s
# Warmup Iteration   4: 889066.432 ops/s
# Warmup Iteration   5: 869143.299 ops/s
# Warmup Iteration   6: 875175.859 ops/s
# Warmup Iteration   7: 880087.427 ops/s
# Warmup Iteration   8: 892205.457 ops/s
# Warmup Iteration   9: 858244.301 ops/s
# Warmup Iteration  10: 737073.402 ops/s
# Warmup Iteration  11: 880570.974 ops/s
# Warmup Iteration  12: 883027.613 ops/s
# Warmup Iteration  13: 873263.549 ops/s
# Warmup Iteration  14: 884820.135 ops/s
# Warmup Iteration  15: 878165.988 ops/s
# Warmup Iteration  16: 882039.415 ops/s
# Warmup Iteration  17: 928144.503 ops/s
# Warmup Iteration  18: 920739.638 ops/s
# Warmup Iteration  19: 915000.319 ops/s
# Warmup Iteration  20: 931764.363 ops/s
# Warmup Iteration  21: 926453.913 ops/s
# Warmup Iteration  22: 923193.880 ops/s
# Warmup Iteration  23: 920775.732 ops/s
# Warmup Iteration  24: 931814.223 ops/s
# Warmup Iteration  25: 893907.203 ops/s
# Warmup Iteration  26: 932016.254 ops/s
# Warmup Iteration  27: 932247.105 ops/s
# Warmup Iteration  28: 925824.502 ops/s
# Warmup Iteration  29: 924050.070 ops/s
# Warmup Iteration  30: 931723.380 ops/s
Iteration   1: 925197.401 ops/s
Iteration   2: 934558.383 ops/s
Iteration   3: 927683.766 ops/s
Iteration   4: 928772.654 ops/s
Iteration   5: 938458.183 ops/s
Iteration   6: 942025.807 ops/s
Iteration   7: 921352.355 ops/s
Iteration   8: 929067.316 ops/s
Iteration   9: 917760.879 ops/s
Iteration  10: 926476.104 ops/s
Iteration  11: 929367.618 ops/s
Iteration  12: 935002.952 ops/s
Iteration  13: 928758.782 ops/s
Iteration  14: 939669.747 ops/s
Iteration  15: 877901.881 ops/s
Iteration  16: 940790.914 ops/s
Iteration  17: 943149.357 ops/s
Iteration  18: 940757.271 ops/s
Iteration  19: 932976.935 ops/s
Iteration  20: 936934.407 ops/s
Iteration  21: 909358.879 ops/s
Iteration  22: 942291.811 ops/s
Iteration  23: 906854.300 ops/s
Iteration  24: 895439.394 ops/s
Iteration  25: 886632.007 ops/s
Iteration  26: 878723.763 ops/s
Iteration  27: 892966.856 ops/s
Iteration  28: 889968.634 ops/s
Iteration  29: 888000.221 ops/s
Iteration  30: 902588.361 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_castToCollection":
  919649.565 ±(99.9%) 14087.949 ops/s [Average]
  (min, avg, max) = (877901.881, 919649.565, 943149.357), stdev = 21086.180
  CI (99.9%): [905561.616, 933737.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_castToCollection  thrpt   30  919649.565 ± 14087.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153535424.982 ops/s
# Warmup Iteration   2: 301724190.287 ops/s
# Warmup Iteration   3: 256510178.884 ops/s
# Warmup Iteration   4: 312002770.219 ops/s
# Warmup Iteration   5: 315493273.886 ops/s
# Warmup Iteration   6: 314701036.095 ops/s
# Warmup Iteration   7: 311642105.330 ops/s
# Warmup Iteration   8: 310414287.411 ops/s
# Warmup Iteration   9: 309464000.686 ops/s
# Warmup Iteration  10: 312038487.706 ops/s
# Warmup Iteration  11: 311735109.079 ops/s
# Warmup Iteration  12: 315001489.039 ops/s
# Warmup Iteration  13: 312870712.252 ops/s
# Warmup Iteration  14: 311056045.238 ops/s
# Warmup Iteration  15: 307067595.568 ops/s
# Warmup Iteration  16: 303549874.864 ops/s
# Warmup Iteration  17: 308028258.223 ops/s
# Warmup Iteration  18: 305914594.015 ops/s
# Warmup Iteration  19: 301817906.115 ops/s
# Warmup Iteration  20: 302530205.824 ops/s
# Warmup Iteration  21: 311063728.468 ops/s
# Warmup Iteration  22: 314584250.560 ops/s
# Warmup Iteration  23: 316258187.550 ops/s
# Warmup Iteration  24: 315721792.028 ops/s
# Warmup Iteration  25: 315884492.585 ops/s
# Warmup Iteration  26: 314267291.629 ops/s
# Warmup Iteration  27: 315943438.005 ops/s
# Warmup Iteration  28: 312375088.889 ops/s
# Warmup Iteration  29: 313484215.250 ops/s
# Warmup Iteration  30: 315782580.175 ops/s
Iteration   1: 313381328.025 ops/s
Iteration   2: 314587608.875 ops/s
Iteration   3: 315651056.120 ops/s
Iteration   4: 314752521.040 ops/s
Iteration   5: 317402464.789 ops/s
Iteration   6: 317836542.325 ops/s
Iteration   7: 313940744.980 ops/s
Iteration   8: 317463891.686 ops/s
Iteration   9: 304851345.179 ops/s
Iteration  10: 307965896.701 ops/s
Iteration  11: 318295425.086 ops/s
Iteration  12: 317254458.539 ops/s
Iteration  13: 317727310.915 ops/s
Iteration  14: 316568198.161 ops/s
Iteration  15: 314547810.225 ops/s
Iteration  16: 314765552.022 ops/s
Iteration  17: 316921778.811 ops/s
Iteration  18: 316592856.242 ops/s
Iteration  19: 315900527.256 ops/s
Iteration  20: 312083472.951 ops/s
Iteration  21: 315601066.386 ops/s
Iteration  22: 318862059.248 ops/s
Iteration  23: 316442047.936 ops/s
Iteration  24: 314193384.691 ops/s
Iteration  25: 316473291.234 ops/s
Iteration  26: 317125186.676 ops/s
Iteration  27: 315856105.670 ops/s
Iteration  28: 315468100.596 ops/s
Iteration  29: 313867439.359 ops/s
Iteration  30: 310014424.220 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_large_size":
  315079796.531 ±(99.9%) 2038603.721 ops/s [Average]
  (min, avg, max) = (304851345.179, 315079796.531, 318862059.248), stdev = 3051286.310
  CI (99.9%): [313041192.811, 317118400.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  315079796.531 ± 2038603.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 792765.356 ops/s
# Warmup Iteration   2: 812992.125 ops/s
# Warmup Iteration   3: 1040288.619 ops/s
# Warmup Iteration   4: 1049381.367 ops/s
# Warmup Iteration   5: 1043234.214 ops/s
# Warmup Iteration   6: 1049241.866 ops/s
# Warmup Iteration   7: 1037176.788 ops/s
# Warmup Iteration   8: 1044736.612 ops/s
# Warmup Iteration   9: 1044151.168 ops/s
# Warmup Iteration  10: 1047739.639 ops/s
# Warmup Iteration  11: 1047796.222 ops/s
# Warmup Iteration  12: 896008.956 ops/s
# Warmup Iteration  13: 1053186.236 ops/s
# Warmup Iteration  14: 1052191.039 ops/s
# Warmup Iteration  15: 1050767.184 ops/s
# Warmup Iteration  16: 1046731.234 ops/s
# Warmup Iteration  17: 1129603.089 ops/s
# Warmup Iteration  18: 1129659.862 ops/s
# Warmup Iteration  19: 1127750.619 ops/s
# Warmup Iteration  20: 1123138.184 ops/s
# Warmup Iteration  21: 1128984.989 ops/s
# Warmup Iteration  22: 1075032.464 ops/s
# Warmup Iteration  23: 1114706.933 ops/s
# Warmup Iteration  24: 1102967.462 ops/s
# Warmup Iteration  25: 1128290.230 ops/s
# Warmup Iteration  26: 1120051.077 ops/s
# Warmup Iteration  27: 1123569.460 ops/s
# Warmup Iteration  28: 1122984.211 ops/s
# Warmup Iteration  29: 1129211.322 ops/s
# Warmup Iteration  30: 1126625.787 ops/s
Iteration   1: 1125804.398 ops/s
Iteration   2: 1123039.139 ops/s
Iteration   3: 1123991.117 ops/s
Iteration   4: 1128193.455 ops/s
Iteration   5: 1131037.531 ops/s
Iteration   6: 1127551.963 ops/s
Iteration   7: 1128972.114 ops/s
Iteration   8: 1123871.041 ops/s
Iteration   9: 1125039.752 ops/s
Iteration  10: 1127563.816 ops/s
Iteration  11: 1126619.285 ops/s
Iteration  12: 1132015.929 ops/s
Iteration  13: 1129050.607 ops/s
Iteration  14: 1128284.446 ops/s
Iteration  15: 1129811.786 ops/s
Iteration  16: 1125568.353 ops/s
Iteration  17: 1115784.423 ops/s
Iteration  18: 1125941.499 ops/s
Iteration  19: 1129446.221 ops/s
Iteration  20: 1129630.333 ops/s
Iteration  21: 1128406.934 ops/s
Iteration  22: 1128982.762 ops/s
Iteration  23: 1128671.128 ops/s
Iteration  24: 1129267.466 ops/s
Iteration  25: 1124286.121 ops/s
Iteration  26: 1123584.908 ops/s
Iteration  27: 1122697.115 ops/s
Iteration  28: 1125870.434 ops/s
Iteration  29: 1124595.888 ops/s
Iteration  30: 1122474.719 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_zero_throws":
  1126535.156 ±(99.9%) 2203.370 ops/s [Average]
  (min, avg, max) = (1115784.423, 1126535.156, 1132015.929), stdev = 3297.901
  CI (99.9%): [1124331.786, 1128738.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1126535.156 ± 2203.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 765927.590 ops/s
# Warmup Iteration   2: 799139.994 ops/s
# Warmup Iteration   3: 1003360.350 ops/s
# Warmup Iteration   4: 1000466.055 ops/s
# Warmup Iteration   5: 1006793.989 ops/s
# Warmup Iteration   6: 1007243.279 ops/s
# Warmup Iteration   7: 1007423.212 ops/s
# Warmup Iteration   8: 1003744.829 ops/s
# Warmup Iteration   9: 1012533.317 ops/s
# Warmup Iteration  10: 1006711.596 ops/s
# Warmup Iteration  11: 1011110.795 ops/s
# Warmup Iteration  12: 877084.546 ops/s
# Warmup Iteration  13: 986395.462 ops/s
# Warmup Iteration  14: 1010105.138 ops/s
# Warmup Iteration  15: 1014117.760 ops/s
# Warmup Iteration  16: 1014059.611 ops/s
# Warmup Iteration  17: 1071935.446 ops/s
# Warmup Iteration  18: 1079322.896 ops/s
# Warmup Iteration  19: 1069884.745 ops/s
# Warmup Iteration  20: 1074643.823 ops/s
# Warmup Iteration  21: 1071876.143 ops/s
# Warmup Iteration  22: 1079927.623 ops/s
# Warmup Iteration  23: 1077562.906 ops/s
# Warmup Iteration  24: 1080136.079 ops/s
# Warmup Iteration  25: 1076805.536 ops/s
# Warmup Iteration  26: 1079574.477 ops/s
# Warmup Iteration  27: 1071420.756 ops/s
# Warmup Iteration  28: 1071868.807 ops/s
# Warmup Iteration  29: 1074112.454 ops/s
# Warmup Iteration  30: 1072223.879 ops/s
Iteration   1: 1072526.722 ops/s
Iteration   2: 1072775.737 ops/s
Iteration   3: 1073408.689 ops/s
Iteration   4: 1068030.416 ops/s
Iteration   5: 1070610.396 ops/s
Iteration   6: 1066206.345 ops/s
Iteration   7: 1066107.181 ops/s
Iteration   8: 1067015.323 ops/s
Iteration   9: 1066895.753 ops/s
Iteration  10: 1066254.155 ops/s
Iteration  11: 1071296.251 ops/s
Iteration  12: 1068579.404 ops/s
Iteration  13: 1067276.562 ops/s
Iteration  14: 1069737.845 ops/s
Iteration  15: 1071927.403 ops/s
Iteration  16: 1074483.119 ops/s
Iteration  17: 1073829.173 ops/s
Iteration  18: 1068813.124 ops/s
Iteration  19: 1071273.919 ops/s
Iteration  20: 1066876.684 ops/s
Iteration  21: 1072573.829 ops/s
Iteration  22: 1074613.911 ops/s
Iteration  23: 1074841.483 ops/s
Iteration  24: 1076358.567 ops/s
Iteration  25: 1071292.292 ops/s
Iteration  26: 1071247.464 ops/s
Iteration  27: 1068805.647 ops/s
Iteration  28: 1063531.413 ops/s
Iteration  29: 1069199.809 ops/s
Iteration  30: 1065515.874 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_clear":
  1070063.483 ±(99.9%) 2196.466 ops/s [Average]
  (min, avg, max) = (1063531.413, 1070063.483, 1076358.567), stdev = 3287.567
  CI (99.9%): [1067867.017, 1072259.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_clear  thrpt   30  1070063.483 ± 2196.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30901719.239 ops/s
# Warmup Iteration   2: 51968356.057 ops/s
# Warmup Iteration   3: 61600682.553 ops/s
# Warmup Iteration   4: 62016044.457 ops/s
# Warmup Iteration   5: 61711040.351 ops/s
# Warmup Iteration   6: 61344071.003 ops/s
# Warmup Iteration   7: 61198601.247 ops/s
# Warmup Iteration   8: 61480045.087 ops/s
# Warmup Iteration   9: 61198193.668 ops/s
# Warmup Iteration  10: 61558632.179 ops/s
# Warmup Iteration  11: 61512575.173 ops/s
# Warmup Iteration  12: 62071530.534 ops/s
# Warmup Iteration  13: 61598574.905 ops/s
# Warmup Iteration  14: 62046113.566 ops/s
# Warmup Iteration  15: 61512223.780 ops/s
# Warmup Iteration  16: 61491062.654 ops/s
# Warmup Iteration  17: 61971550.800 ops/s
# Warmup Iteration  18: 61687376.067 ops/s
# Warmup Iteration  19: 62043853.546 ops/s
# Warmup Iteration  20: 61799467.590 ops/s
# Warmup Iteration  21: 61738962.435 ops/s
# Warmup Iteration  22: 62060348.762 ops/s
# Warmup Iteration  23: 61900801.051 ops/s
# Warmup Iteration  24: 61887419.268 ops/s
# Warmup Iteration  25: 61367470.673 ops/s
# Warmup Iteration  26: 62366599.832 ops/s
# Warmup Iteration  27: 62004742.873 ops/s
# Warmup Iteration  28: 62050110.029 ops/s
# Warmup Iteration  29: 61373873.262 ops/s
# Warmup Iteration  30: 61401107.589 ops/s
Iteration   1: 61618004.272 ops/s
Iteration   2: 61888948.216 ops/s
Iteration   3: 61915014.019 ops/s
Iteration   4: 62246693.248 ops/s
Iteration   5: 61880101.071 ops/s
Iteration   6: 61732163.605 ops/s
Iteration   7: 61797116.645 ops/s
Iteration   8: 61611298.747 ops/s
Iteration   9: 61186310.572 ops/s
Iteration  10: 62301528.648 ops/s
Iteration  11: 61507161.304 ops/s
Iteration  12: 62266297.018 ops/s
Iteration  13: 62416364.574 ops/s
Iteration  14: 61305863.858 ops/s
Iteration  15: 61619643.928 ops/s
Iteration  16: 61746400.316 ops/s
Iteration  17: 61499011.686 ops/s
Iteration  18: 61721218.330 ops/s
Iteration  19: 62240089.436 ops/s
Iteration  20: 62221953.854 ops/s
Iteration  21: 62246702.788 ops/s
Iteration  22: 61700161.756 ops/s
Iteration  23: 61934663.815 ops/s
Iteration  24: 61509808.180 ops/s
Iteration  25: 62260709.238 ops/s
Iteration  26: 62176681.884 ops/s
Iteration  27: 62088978.714 ops/s
Iteration  28: 61824917.340 ops/s
Iteration  29: 62040511.472 ops/s
Iteration  30: 61585974.539 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect":
  61869676.436 ±(99.9%) 217305.981 ops/s [Average]
  (min, avg, max) = (61186310.572, 61869676.436, 62416364.574), stdev = 325253.386
  CI (99.9%): [61652370.455, 62086982.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collect  thrpt   30  61869676.436 ± 217305.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17049095.645 ops/s
# Warmup Iteration   2: 21517564.287 ops/s
# Warmup Iteration   3: 27452335.541 ops/s
# Warmup Iteration   4: 27877648.043 ops/s
# Warmup Iteration   5: 28105143.789 ops/s
# Warmup Iteration   6: 28010160.536 ops/s
# Warmup Iteration   7: 28201661.812 ops/s
# Warmup Iteration   8: 23603665.118 ops/s
# Warmup Iteration   9: 28001534.262 ops/s
# Warmup Iteration  10: 28237736.415 ops/s
# Warmup Iteration  11: 28176322.852 ops/s
# Warmup Iteration  12: 28220888.443 ops/s
# Warmup Iteration  13: 28191214.281 ops/s
# Warmup Iteration  14: 28066425.470 ops/s
# Warmup Iteration  15: 28025291.951 ops/s
# Warmup Iteration  16: 28116388.144 ops/s
# Warmup Iteration  17: 28184957.850 ops/s
# Warmup Iteration  18: 28265281.320 ops/s
# Warmup Iteration  19: 28273618.212 ops/s
# Warmup Iteration  20: 28173959.895 ops/s
# Warmup Iteration  21: 27786257.495 ops/s
# Warmup Iteration  22: 28210507.286 ops/s
# Warmup Iteration  23: 27071251.674 ops/s
# Warmup Iteration  24: 26685857.596 ops/s
# Warmup Iteration  25: 26938423.376 ops/s
# Warmup Iteration  26: 28207921.255 ops/s
# Warmup Iteration  27: 28041826.792 ops/s
# Warmup Iteration  28: 28174536.513 ops/s
# Warmup Iteration  29: 27482696.596 ops/s
# Warmup Iteration  30: 26924318.829 ops/s
Iteration   1: 28076858.794 ops/s
Iteration   2: 27227554.607 ops/s
Iteration   3: 27998463.013 ops/s
Iteration   4: 27749207.566 ops/s
Iteration   5: 28144310.813 ops/s
Iteration   6: 27970941.777 ops/s
Iteration   7: 27851973.204 ops/s
Iteration   8: 28189514.386 ops/s
Iteration   9: 27886466.134 ops/s
Iteration  10: 27824030.351 ops/s
Iteration  11: 27974595.746 ops/s
Iteration  12: 27773371.103 ops/s
Iteration  13: 27882952.712 ops/s
Iteration  14: 28142302.355 ops/s
Iteration  15: 27884111.016 ops/s
Iteration  16: 28069101.463 ops/s
Iteration  17: 27848387.923 ops/s
Iteration  18: 28174893.029 ops/s
Iteration  19: 28107934.306 ops/s
Iteration  20: 27844504.046 ops/s
Iteration  21: 27768906.858 ops/s
Iteration  22: 27885277.219 ops/s
Iteration  23: 27090799.095 ops/s
Iteration  24: 27004599.108 ops/s
Iteration  25: 27314900.740 ops/s
Iteration  26: 28167520.655 ops/s
Iteration  27: 27893835.039 ops/s
Iteration  28: 27908220.709 ops/s
Iteration  29: 27036701.681 ops/s
Iteration  30: 26398518.586 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean":
  27769691.801 ±(99.9%) 285215.074 ops/s [Average]
  (min, avg, max) = (26398518.586, 27769691.801, 28189514.386), stdev = 426896.529
  CI (99.9%): [27484476.727, 28054906.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  27769691.801 ± 285215.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11272237.745 ops/s
# Warmup Iteration   2: 21063782.508 ops/s
# Warmup Iteration   3: 21674673.068 ops/s
# Warmup Iteration   4: 21187971.443 ops/s
# Warmup Iteration   5: 17530217.559 ops/s
# Warmup Iteration   6: 21205269.829 ops/s
# Warmup Iteration   7: 21673807.424 ops/s
# Warmup Iteration   8: 22148492.428 ops/s
# Warmup Iteration   9: 22078062.065 ops/s
# Warmup Iteration  10: 22137688.185 ops/s
# Warmup Iteration  11: 22186553.093 ops/s
# Warmup Iteration  12: 22152938.574 ops/s
# Warmup Iteration  13: 22107793.377 ops/s
# Warmup Iteration  14: 22122453.509 ops/s
# Warmup Iteration  15: 22146235.727 ops/s
# Warmup Iteration  16: 22113801.076 ops/s
# Warmup Iteration  17: 22148981.687 ops/s
# Warmup Iteration  18: 22149540.385 ops/s
# Warmup Iteration  19: 22112767.246 ops/s
# Warmup Iteration  20: 22139007.179 ops/s
# Warmup Iteration  21: 22133176.393 ops/s
# Warmup Iteration  22: 22166373.470 ops/s
# Warmup Iteration  23: 22146316.858 ops/s
# Warmup Iteration  24: 22151200.525 ops/s
# Warmup Iteration  25: 22138688.931 ops/s
# Warmup Iteration  26: 22119188.677 ops/s
# Warmup Iteration  27: 22099347.559 ops/s
# Warmup Iteration  28: 22157262.234 ops/s
# Warmup Iteration  29: 22141393.837 ops/s
# Warmup Iteration  30: 22123367.090 ops/s
Iteration   1: 22137281.381 ops/s
Iteration   2: 22148267.601 ops/s
Iteration   3: 22177362.218 ops/s
Iteration   4: 22125269.468 ops/s
Iteration   5: 22149434.866 ops/s
Iteration   6: 22096576.166 ops/s
Iteration   7: 22155268.408 ops/s
Iteration   8: 22151971.354 ops/s
Iteration   9: 22130176.769 ops/s
Iteration  10: 22060331.485 ops/s
Iteration  11: 22130416.826 ops/s
Iteration  12: 22103025.209 ops/s
Iteration  13: 22115566.926 ops/s
Iteration  14: 22168828.182 ops/s
Iteration  15: 22129684.692 ops/s
Iteration  16: 22110053.565 ops/s
Iteration  17: 22114668.116 ops/s
Iteration  18: 22119470.033 ops/s
Iteration  19: 21830035.010 ops/s
Iteration  20: 22019226.066 ops/s
Iteration  21: 22069709.951 ops/s
Iteration  22: 21905981.460 ops/s
Iteration  23: 22159650.707 ops/s
Iteration  24: 22082724.212 ops/s
Iteration  25: 21356577.508 ops/s
Iteration  26: 22073846.658 ops/s
Iteration  27: 21994094.712 ops/s
Iteration  28: 22097231.116 ops/s
Iteration  29: 22162214.773 ops/s
Iteration  30: 22157538.034 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean_target":
  22074416.116 ±(99.9%) 103984.439 ops/s [Average]
  (min, avg, max) = (21356577.508, 22074416.116, 22177362.218), stdev = 155639.025
  CI (99.9%): [21970431.676, 22178400.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectBoolean_target  thrpt   30  22074416.116 ± 103984.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11200208.071 ops/s
# Warmup Iteration   2: 11850455.251 ops/s
# Warmup Iteration   3: 14085533.838 ops/s
# Warmup Iteration   4: 14994933.654 ops/s
# Warmup Iteration   5: 15027637.435 ops/s
# Warmup Iteration   6: 15035823.116 ops/s
# Warmup Iteration   7: 15167552.369 ops/s
# Warmup Iteration   8: 14988820.933 ops/s
# Warmup Iteration   9: 15110258.692 ops/s
# Warmup Iteration  10: 15091234.641 ops/s
# Warmup Iteration  11: 15122976.581 ops/s
# Warmup Iteration  12: 15049840.875 ops/s
# Warmup Iteration  13: 14524423.472 ops/s
# Warmup Iteration  14: 13083307.118 ops/s
# Warmup Iteration  15: 15133929.640 ops/s
# Warmup Iteration  16: 15110118.015 ops/s
# Warmup Iteration  17: 15072921.158 ops/s
# Warmup Iteration  18: 15088733.438 ops/s
# Warmup Iteration  19: 15038954.466 ops/s
# Warmup Iteration  20: 15088667.085 ops/s
# Warmup Iteration  21: 14991436.135 ops/s
# Warmup Iteration  22: 14936695.385 ops/s
# Warmup Iteration  23: 15091427.920 ops/s
# Warmup Iteration  24: 15160387.186 ops/s
# Warmup Iteration  25: 14909876.931 ops/s
# Warmup Iteration  26: 14924703.174 ops/s
# Warmup Iteration  27: 15129253.565 ops/s
# Warmup Iteration  28: 15102880.469 ops/s
# Warmup Iteration  29: 15146700.465 ops/s
# Warmup Iteration  30: 15177712.325 ops/s
Iteration   1: 15104480.302 ops/s
Iteration   2: 14833498.817 ops/s
Iteration   3: 14923698.217 ops/s
Iteration   4: 14805780.473 ops/s
Iteration   5: 15044176.518 ops/s
Iteration   6: 15171758.771 ops/s
Iteration   7: 14975381.614 ops/s
Iteration   8: 15090740.505 ops/s
Iteration   9: 15117967.152 ops/s
Iteration  10: 14998229.279 ops/s
Iteration  11: 15164631.702 ops/s
Iteration  12: 15093412.721 ops/s
Iteration  13: 15125417.356 ops/s
Iteration  14: 15042645.157 ops/s
Iteration  15: 15100957.465 ops/s
Iteration  16: 15090000.759 ops/s
Iteration  17: 15152767.039 ops/s
Iteration  18: 15078308.086 ops/s
Iteration  19: 15164883.127 ops/s
Iteration  20: 15120202.403 ops/s
Iteration  21: 15090760.204 ops/s
Iteration  22: 14933286.721 ops/s
Iteration  23: 15206600.500 ops/s
Iteration  24: 15117541.891 ops/s
Iteration  25: 15149022.322 ops/s
Iteration  26: 15175365.313 ops/s
Iteration  27: 15180566.021 ops/s
Iteration  28: 15123754.129 ops/s
Iteration  29: 15160582.329 ops/s
Iteration  30: 15115544.335 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte":
  15081732.041 ±(99.9%) 66577.065 ops/s [Average]
  (min, avg, max) = (14805780.473, 15081732.041, 15206600.500), stdev = 99649.424
  CI (99.9%): [15015154.976, 15148309.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte  thrpt   30  15081732.041 ± 66577.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5575881.884 ops/s
# Warmup Iteration   2: 10848870.063 ops/s
# Warmup Iteration   3: 9851830.381 ops/s
# Warmup Iteration   4: 11198747.672 ops/s
# Warmup Iteration   5: 11143111.644 ops/s
# Warmup Iteration   6: 11137574.077 ops/s
# Warmup Iteration   7: 11055482.280 ops/s
# Warmup Iteration   8: 10996232.084 ops/s
# Warmup Iteration   9: 11036288.064 ops/s
# Warmup Iteration  10: 11013922.496 ops/s
# Warmup Iteration  11: 11159407.578 ops/s
# Warmup Iteration  12: 11100797.195 ops/s
# Warmup Iteration  13: 11096147.347 ops/s
# Warmup Iteration  14: 11206164.193 ops/s
# Warmup Iteration  15: 11088368.977 ops/s
# Warmup Iteration  16: 11130120.568 ops/s
# Warmup Iteration  17: 10893487.581 ops/s
# Warmup Iteration  18: 10947238.672 ops/s
# Warmup Iteration  19: 10819338.633 ops/s
# Warmup Iteration  20: 10985380.234 ops/s
# Warmup Iteration  21: 11048831.484 ops/s
# Warmup Iteration  22: 11111824.888 ops/s
# Warmup Iteration  23: 11111471.423 ops/s
# Warmup Iteration  24: 10975326.621 ops/s
# Warmup Iteration  25: 11056864.291 ops/s
# Warmup Iteration  26: 10933931.716 ops/s
# Warmup Iteration  27: 10913248.429 ops/s
# Warmup Iteration  28: 10985599.154 ops/s
# Warmup Iteration  29: 10911689.569 ops/s
# Warmup Iteration  30: 10971946.818 ops/s
Iteration   1: 11003523.818 ops/s
Iteration   2: 10875487.650 ops/s
Iteration   3: 10884266.602 ops/s
Iteration   4: 11083128.832 ops/s
Iteration   5: 10989339.906 ops/s
Iteration   6: 11110919.576 ops/s
Iteration   7: 10955421.192 ops/s
Iteration   8: 11085917.160 ops/s
Iteration   9: 11135948.770 ops/s
Iteration  10: 11060734.802 ops/s
Iteration  11: 11068742.028 ops/s
Iteration  12: 11118576.153 ops/s
Iteration  13: 11032999.448 ops/s
Iteration  14: 10920658.773 ops/s
Iteration  15: 10963302.702 ops/s
Iteration  16: 11000483.317 ops/s
Iteration  17: 10944324.117 ops/s
Iteration  18: 10866598.225 ops/s
Iteration  19: 10725915.868 ops/s
Iteration  20: 11054883.878 ops/s
Iteration  21: 11073878.995 ops/s
Iteration  22: 11018786.473 ops/s
Iteration  23: 11002533.784 ops/s
Iteration  24: 11080875.056 ops/s
Iteration  25: 11133943.820 ops/s
Iteration  26: 11104215.779 ops/s
Iteration  27: 11021721.617 ops/s
Iteration  28: 10978356.187 ops/s
Iteration  29: 11080837.442 ops/s
Iteration  30: 11131249.419 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte_target":
  11016919.046 ±(99.9%) 63697.395 ops/s [Average]
  (min, avg, max) = (10725915.868, 11016919.046, 11135948.770), stdev = 95339.270
  CI (99.9%): [10953221.651, 11080616.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectByte_target  thrpt   30  11016919.046 ± 63697.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11422506.973 ops/s
# Warmup Iteration   2: 11967846.699 ops/s
# Warmup Iteration   3: 14154754.380 ops/s
# Warmup Iteration   4: 15070579.360 ops/s
# Warmup Iteration   5: 15176530.517 ops/s
# Warmup Iteration   6: 15072718.931 ops/s
# Warmup Iteration   7: 15166821.185 ops/s
# Warmup Iteration   8: 15073446.586 ops/s
# Warmup Iteration   9: 15166584.970 ops/s
# Warmup Iteration  10: 15156389.863 ops/s
# Warmup Iteration  11: 15157060.640 ops/s
# Warmup Iteration  12: 15169791.560 ops/s
# Warmup Iteration  13: 14268400.830 ops/s
# Warmup Iteration  14: 13288525.129 ops/s
# Warmup Iteration  15: 15086519.418 ops/s
# Warmup Iteration  16: 14988867.082 ops/s
# Warmup Iteration  17: 14907933.601 ops/s
# Warmup Iteration  18: 15069980.423 ops/s
# Warmup Iteration  19: 14888301.611 ops/s
# Warmup Iteration  20: 15001240.151 ops/s
# Warmup Iteration  21: 14840674.177 ops/s
# Warmup Iteration  22: 14980754.821 ops/s
# Warmup Iteration  23: 14835350.785 ops/s
# Warmup Iteration  24: 15002091.243 ops/s
# Warmup Iteration  25: 14474954.339 ops/s
# Warmup Iteration  26: 14939607.854 ops/s
# Warmup Iteration  27: 14962199.789 ops/s
# Warmup Iteration  28: 14946559.188 ops/s
# Warmup Iteration  29: 15016492.065 ops/s
# Warmup Iteration  30: 15072650.287 ops/s
Iteration   1: 14774762.690 ops/s
Iteration   2: 15076870.524 ops/s
Iteration   3: 15139850.069 ops/s
Iteration   4: 15071598.789 ops/s
Iteration   5: 15090038.189 ops/s
Iteration   6: 14812644.776 ops/s
Iteration   7: 15098156.540 ops/s
Iteration   8: 14789507.691 ops/s
Iteration   9: 14806990.590 ops/s
Iteration  10: 14876014.600 ops/s
Iteration  11: 14960560.874 ops/s
Iteration  12: 15151533.028 ops/s
Iteration  13: 15144432.040 ops/s
Iteration  14: 15083619.599 ops/s
Iteration  15: 15043450.341 ops/s
Iteration  16: 15162625.095 ops/s
Iteration  17: 14917868.005 ops/s
Iteration  18: 15125879.413 ops/s
Iteration  19: 15009744.953 ops/s
Iteration  20: 15099122.637 ops/s
Iteration  21: 14873694.827 ops/s
Iteration  22: 14760965.697 ops/s
Iteration  23: 15158553.342 ops/s
Iteration  24: 15156073.751 ops/s
Iteration  25: 14970111.411 ops/s
Iteration  26: 14930193.958 ops/s
Iteration  27: 14990530.905 ops/s
Iteration  28: 14952279.340 ops/s
Iteration  29: 14114996.048 ops/s
Iteration  30: 14775608.563 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar":
  14963942.610 ±(99.9%) 139793.690 ops/s [Average]
  (min, avg, max) = (14114996.048, 14963942.610, 15162625.095), stdev = 209236.630
  CI (99.9%): [14824148.919, 15103736.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar  thrpt   30  14963942.610 ± 139793.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5941926.920 ops/s
# Warmup Iteration   2: 10822529.043 ops/s
# Warmup Iteration   3: 11468340.260 ops/s
# Warmup Iteration   4: 12105075.121 ops/s
# Warmup Iteration   5: 11884721.759 ops/s
# Warmup Iteration   6: 12025337.425 ops/s
# Warmup Iteration   7: 11583855.586 ops/s
# Warmup Iteration   8: 11893703.559 ops/s
# Warmup Iteration   9: 11881152.800 ops/s
# Warmup Iteration  10: 12085621.003 ops/s
# Warmup Iteration  11: 11963967.999 ops/s
# Warmup Iteration  12: 11968524.581 ops/s
# Warmup Iteration  13: 12059283.557 ops/s
# Warmup Iteration  14: 12037117.841 ops/s
# Warmup Iteration  15: 11973554.743 ops/s
# Warmup Iteration  16: 12050098.700 ops/s
# Warmup Iteration  17: 11889514.838 ops/s
# Warmup Iteration  18: 11703518.315 ops/s
# Warmup Iteration  19: 11310749.504 ops/s
# Warmup Iteration  20: 11876365.213 ops/s
# Warmup Iteration  21: 11576927.638 ops/s
# Warmup Iteration  22: 11808448.450 ops/s
# Warmup Iteration  23: 11426630.150 ops/s
# Warmup Iteration  24: 11624044.208 ops/s
# Warmup Iteration  25: 11869810.988 ops/s
# Warmup Iteration  26: 11737112.854 ops/s
# Warmup Iteration  27: 11757120.056 ops/s
# Warmup Iteration  28: 11878933.872 ops/s
# Warmup Iteration  29: 11898066.396 ops/s
# Warmup Iteration  30: 11737723.818 ops/s
Iteration   1: 11748340.988 ops/s
Iteration   2: 11710932.838 ops/s
Iteration   3: 11499459.184 ops/s
Iteration   4: 11551759.575 ops/s
Iteration   5: 11903882.353 ops/s
Iteration   6: 11834156.358 ops/s
Iteration   7: 11941760.633 ops/s
Iteration   8: 11648936.136 ops/s
Iteration   9: 11371500.627 ops/s
Iteration  10: 11699052.028 ops/s
Iteration  11: 11717316.980 ops/s
Iteration  12: 11639340.563 ops/s
Iteration  13: 11329205.517 ops/s
Iteration  14: 11497746.748 ops/s
Iteration  15: 11573818.205 ops/s
Iteration  16: 11454176.456 ops/s
Iteration  17: 11511934.399 ops/s
Iteration  18: 11551648.035 ops/s
Iteration  19: 11799934.369 ops/s
Iteration  20: 11947464.394 ops/s
Iteration  21: 11868719.540 ops/s
Iteration  22: 11799132.568 ops/s
Iteration  23: 11676107.503 ops/s
Iteration  24: 11674300.843 ops/s
Iteration  25: 11610995.936 ops/s
Iteration  26: 11915089.673 ops/s
Iteration  27: 11906842.677 ops/s
Iteration  28: 11803503.038 ops/s
Iteration  29: 11749427.565 ops/s
Iteration  30: 11816726.044 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar_target":
  11691773.726 ±(99.9%) 113826.608 ops/s [Average]
  (min, avg, max) = (11329205.517, 11691773.726, 11947464.394), stdev = 170370.322
  CI (99.9%): [11577947.117, 11805600.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectChar_target  thrpt   30  11691773.726 ± 113826.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10886958.078 ops/s
# Warmup Iteration   2: 11368799.242 ops/s
# Warmup Iteration   3: 13935441.351 ops/s
# Warmup Iteration   4: 15012132.953 ops/s
# Warmup Iteration   5: 14409666.546 ops/s
# Warmup Iteration   6: 14303889.145 ops/s
# Warmup Iteration   7: 14234304.081 ops/s
# Warmup Iteration   8: 14408932.501 ops/s
# Warmup Iteration   9: 14421133.689 ops/s
# Warmup Iteration  10: 14457959.042 ops/s
# Warmup Iteration  11: 14433207.447 ops/s
# Warmup Iteration  12: 14538495.287 ops/s
# Warmup Iteration  13: 14899979.050 ops/s
# Warmup Iteration  14: 12538273.315 ops/s
# Warmup Iteration  15: 14998113.329 ops/s
# Warmup Iteration  16: 15095671.597 ops/s
# Warmup Iteration  17: 14173283.845 ops/s
# Warmup Iteration  18: 14907820.922 ops/s
# Warmup Iteration  19: 14883582.963 ops/s
# Warmup Iteration  20: 14257909.927 ops/s
# Warmup Iteration  21: 14738637.119 ops/s
# Warmup Iteration  22: 14816016.921 ops/s
# Warmup Iteration  23: 14265569.218 ops/s
# Warmup Iteration  24: 14413448.304 ops/s
# Warmup Iteration  25: 15005478.809 ops/s
# Warmup Iteration  26: 15029194.291 ops/s
# Warmup Iteration  27: 14359492.305 ops/s
# Warmup Iteration  28: 14351555.226 ops/s
# Warmup Iteration  29: 14975976.156 ops/s
# Warmup Iteration  30: 14970788.329 ops/s
Iteration   1: 15044212.174 ops/s
Iteration   2: 14880305.853 ops/s
Iteration   3: 14920811.576 ops/s
Iteration   4: 14788788.362 ops/s
Iteration   5: 14854714.667 ops/s
Iteration   6: 14920261.778 ops/s
Iteration   7: 15116026.911 ops/s
Iteration   8: 15075394.998 ops/s
Iteration   9: 15098595.138 ops/s
Iteration  10: 14897044.183 ops/s
Iteration  11: 14954459.236 ops/s
Iteration  12: 15057375.078 ops/s
Iteration  13: 14920837.485 ops/s
Iteration  14: 14290146.617 ops/s
Iteration  15: 14919713.612 ops/s
Iteration  16: 14503166.657 ops/s
Iteration  17: 14894960.927 ops/s
Iteration  18: 14321971.168 ops/s
Iteration  19: 14390753.397 ops/s
Iteration  20: 14856269.614 ops/s
Iteration  21: 15161148.963 ops/s
Iteration  22: 15135325.676 ops/s
Iteration  23: 15143718.036 ops/s
Iteration  24: 14930355.198 ops/s
Iteration  25: 14257480.423 ops/s
Iteration  26: 14832862.587 ops/s
Iteration  27: 14726136.061 ops/s
Iteration  28: 14891812.337 ops/s
Iteration  29: 15070526.677 ops/s
Iteration  30: 15012247.584 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble":
  14862247.432 ±(99.9%) 172674.880 ops/s [Average]
  (min, avg, max) = (14257480.423, 14862247.432, 15161148.963), stdev = 258451.651
  CI (99.9%): [14689572.552, 15034922.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble  thrpt   30  14862247.432 ± 172674.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3765100.845 ops/s
# Warmup Iteration   2: 7274359.756 ops/s
# Warmup Iteration   3: 7214484.124 ops/s
# Warmup Iteration   4: 7926604.654 ops/s
# Warmup Iteration   5: 7903958.181 ops/s
# Warmup Iteration   6: 7921796.581 ops/s
# Warmup Iteration   7: 7920168.656 ops/s
# Warmup Iteration   8: 8000618.998 ops/s
# Warmup Iteration   9: 7979268.235 ops/s
# Warmup Iteration  10: 7953870.438 ops/s
# Warmup Iteration  11: 7907703.510 ops/s
# Warmup Iteration  12: 7929930.864 ops/s
# Warmup Iteration  13: 7906673.372 ops/s
# Warmup Iteration  14: 7779996.459 ops/s
# Warmup Iteration  15: 7792670.748 ops/s
# Warmup Iteration  16: 7923355.784 ops/s
# Warmup Iteration  17: 8031740.460 ops/s
# Warmup Iteration  18: 7848450.746 ops/s
# Warmup Iteration  19: 8005393.583 ops/s
# Warmup Iteration  20: 8020732.248 ops/s
# Warmup Iteration  21: 7978781.093 ops/s
# Warmup Iteration  22: 7948233.649 ops/s
# Warmup Iteration  23: 7941839.124 ops/s
# Warmup Iteration  24: 7642350.759 ops/s
# Warmup Iteration  25: 7890304.276 ops/s
# Warmup Iteration  26: 7785067.088 ops/s
# Warmup Iteration  27: 7888083.147 ops/s
# Warmup Iteration  28: 7712584.583 ops/s
# Warmup Iteration  29: 7932860.318 ops/s
# Warmup Iteration  30: 7900993.790 ops/s
Iteration   1: 8008318.064 ops/s
Iteration   2: 7973556.940 ops/s
Iteration   3: 7977628.365 ops/s
Iteration   4: 8050666.626 ops/s
Iteration   5: 8045451.861 ops/s
Iteration   6: 7790963.736 ops/s
Iteration   7: 7800049.988 ops/s
Iteration   8: 7855303.596 ops/s
Iteration   9: 7845564.416 ops/s
Iteration  10: 7914104.194 ops/s
Iteration  11: 8053552.342 ops/s
Iteration  12: 8048160.636 ops/s
Iteration  13: 7804473.520 ops/s
Iteration  14: 7860831.937 ops/s
Iteration  15: 7957588.423 ops/s
Iteration  16: 7959607.390 ops/s
Iteration  17: 7932197.252 ops/s
Iteration  18: 7975647.980 ops/s
Iteration  19: 8017313.632 ops/s
Iteration  20: 7956786.203 ops/s
Iteration  21: 7960380.671 ops/s
Iteration  22: 7781314.883 ops/s
Iteration  23: 7911593.504 ops/s
Iteration  24: 7968158.429 ops/s
Iteration  25: 7793431.620 ops/s
Iteration  26: 7809001.822 ops/s
Iteration  27: 7860565.716 ops/s
Iteration  28: 7752528.255 ops/s
Iteration  29: 7960821.570 ops/s
Iteration  30: 7881677.445 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble_target":
  7916908.034 ±(99.9%) 61004.549 ops/s [Average]
  (min, avg, max) = (7752528.255, 7916908.034, 8053552.342), stdev = 91308.744
  CI (99.9%): [7855903.485, 7977912.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectDouble_target  thrpt   30  7916908.034 ± 61004.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11348509.638 ops/s
# Warmup Iteration   2: 11870089.028 ops/s
# Warmup Iteration   3: 13924672.262 ops/s
# Warmup Iteration   4: 14911347.325 ops/s
# Warmup Iteration   5: 15129018.278 ops/s
# Warmup Iteration   6: 14902316.775 ops/s
# Warmup Iteration   7: 15067889.215 ops/s
# Warmup Iteration   8: 14887579.026 ops/s
# Warmup Iteration   9: 14937670.743 ops/s
# Warmup Iteration  10: 14939173.103 ops/s
# Warmup Iteration  11: 14922277.481 ops/s
# Warmup Iteration  12: 14855455.503 ops/s
# Warmup Iteration  13: 14715548.313 ops/s
# Warmup Iteration  14: 12793818.811 ops/s
# Warmup Iteration  15: 14947129.496 ops/s
# Warmup Iteration  16: 15021774.612 ops/s
# Warmup Iteration  17: 14408817.548 ops/s
# Warmup Iteration  18: 14447743.898 ops/s
# Warmup Iteration  19: 14832921.141 ops/s
# Warmup Iteration  20: 15099703.556 ops/s
# Warmup Iteration  21: 14972731.281 ops/s
# Warmup Iteration  22: 15058474.566 ops/s
# Warmup Iteration  23: 15027000.532 ops/s
# Warmup Iteration  24: 14964393.199 ops/s
# Warmup Iteration  25: 15004920.678 ops/s
# Warmup Iteration  26: 14918331.811 ops/s
# Warmup Iteration  27: 14416681.546 ops/s
# Warmup Iteration  28: 14311492.615 ops/s
# Warmup Iteration  29: 14269548.495 ops/s
# Warmup Iteration  30: 14598573.243 ops/s
Iteration   1: 14374446.325 ops/s
Iteration   2: 14242961.039 ops/s
Iteration   3: 14964055.012 ops/s
Iteration   4: 15014609.109 ops/s
Iteration   5: 15019700.702 ops/s
Iteration   6: 15094315.227 ops/s
Iteration   7: 14900445.396 ops/s
Iteration   8: 14352504.318 ops/s
Iteration   9: 14191252.826 ops/s
Iteration  10: 14994221.533 ops/s
Iteration  11: 15128968.944 ops/s
Iteration  12: 14500159.850 ops/s
Iteration  13: 14131839.672 ops/s
Iteration  14: 15054299.185 ops/s
Iteration  15: 14548848.751 ops/s
Iteration  16: 15128323.272 ops/s
Iteration  17: 14978269.519 ops/s
Iteration  18: 15086654.550 ops/s
Iteration  19: 15012234.076 ops/s
Iteration  20: 14938178.488 ops/s
Iteration  21: 14562158.017 ops/s
Iteration  22: 15051943.789 ops/s
Iteration  23: 15030574.765 ops/s
Iteration  24: 14983823.405 ops/s
Iteration  25: 15049814.777 ops/s
Iteration  26: 15094820.577 ops/s
Iteration  27: 14979510.898 ops/s
Iteration  28: 15129769.054 ops/s
Iteration  29: 15020787.894 ops/s
Iteration  30: 15103736.683 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat":
  14855440.922 ±(99.9%) 212081.845 ops/s [Average]
  (min, avg, max) = (14131839.672, 14855440.922, 15129769.054), stdev = 317434.146
  CI (99.9%): [14643359.077, 15067522.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat  thrpt   30  14855440.922 ± 212081.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4856723.086 ops/s
# Warmup Iteration   2: 8874697.690 ops/s
# Warmup Iteration   3: 8764146.808 ops/s
# Warmup Iteration   4: 9565289.343 ops/s
# Warmup Iteration   5: 9493761.644 ops/s
# Warmup Iteration   6: 9406165.361 ops/s
# Warmup Iteration   7: 9610942.237 ops/s
# Warmup Iteration   8: 9746163.386 ops/s
# Warmup Iteration   9: 9564762.660 ops/s
# Warmup Iteration  10: 9594364.872 ops/s
# Warmup Iteration  11: 9747254.567 ops/s
# Warmup Iteration  12: 9637298.337 ops/s
# Warmup Iteration  13: 9742054.249 ops/s
# Warmup Iteration  14: 9678934.421 ops/s
# Warmup Iteration  15: 9528700.208 ops/s
# Warmup Iteration  16: 9576505.694 ops/s
# Warmup Iteration  17: 9446434.092 ops/s
# Warmup Iteration  18: 9477525.801 ops/s
# Warmup Iteration  19: 9554592.580 ops/s
# Warmup Iteration  20: 9690362.158 ops/s
# Warmup Iteration  21: 9835638.611 ops/s
# Warmup Iteration  22: 9692307.491 ops/s
# Warmup Iteration  23: 9395025.184 ops/s
# Warmup Iteration  24: 9283027.925 ops/s
# Warmup Iteration  25: 9400628.759 ops/s
# Warmup Iteration  26: 9744573.157 ops/s
# Warmup Iteration  27: 9629811.505 ops/s
# Warmup Iteration  28: 9804049.076 ops/s
# Warmup Iteration  29: 9475696.869 ops/s
# Warmup Iteration  30: 9768890.849 ops/s
Iteration   1: 9818890.919 ops/s
Iteration   2: 9425708.058 ops/s
Iteration   3: 9670813.413 ops/s
Iteration   4: 9380586.071 ops/s
Iteration   5: 9635212.251 ops/s
Iteration   6: 9587440.534 ops/s
Iteration   7: 9461055.489 ops/s
Iteration   8: 9472115.288 ops/s
Iteration   9: 9675472.099 ops/s
Iteration  10: 9682350.959 ops/s
Iteration  11: 9532335.524 ops/s
Iteration  12: 9630415.071 ops/s
Iteration  13: 9691722.068 ops/s
Iteration  14: 9578872.115 ops/s
Iteration  15: 9861402.717 ops/s
Iteration  16: 9609834.362 ops/s
Iteration  17: 9342677.136 ops/s
Iteration  18: 9480691.515 ops/s
Iteration  19: 9544694.465 ops/s
Iteration  20: 9796473.580 ops/s
Iteration  21: 9459644.437 ops/s
Iteration  22: 9584467.727 ops/s
Iteration  23: 9165385.861 ops/s
Iteration  24: 9361786.866 ops/s
Iteration  25: 9358188.261 ops/s
Iteration  26: 9488311.845 ops/s
Iteration  27: 9636270.419 ops/s
Iteration  28: 9699995.695 ops/s
Iteration  29: 9732555.852 ops/s
Iteration  30: 9269389.880 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat_target":
  9554492.016 ±(99.9%) 110861.141 ops/s [Average]
  (min, avg, max) = (9165385.861, 9554492.016, 9861402.717), stdev = 165931.749
  CI (99.9%): [9443630.875, 9665353.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectFloat_target  thrpt   30  9554492.016 ± 110861.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7911908.931 ops/s
# Warmup Iteration   2: 17665192.434 ops/s
# Warmup Iteration   3: 17884197.518 ops/s
# Warmup Iteration   4: 14658164.110 ops/s
# Warmup Iteration   5: 17897743.970 ops/s
# Warmup Iteration   6: 18016176.070 ops/s
# Warmup Iteration   7: 17887481.657 ops/s
# Warmup Iteration   8: 18063710.816 ops/s
# Warmup Iteration   9: 18065790.973 ops/s
# Warmup Iteration  10: 17983218.724 ops/s
# Warmup Iteration  11: 17720347.428 ops/s
# Warmup Iteration  12: 17635584.789 ops/s
# Warmup Iteration  13: 18030285.717 ops/s
# Warmup Iteration  14: 17840596.587 ops/s
# Warmup Iteration  15: 17927186.236 ops/s
# Warmup Iteration  16: 17204668.126 ops/s
# Warmup Iteration  17: 17940616.683 ops/s
# Warmup Iteration  18: 17762669.657 ops/s
# Warmup Iteration  19: 17882176.671 ops/s
# Warmup Iteration  20: 17924852.205 ops/s
# Warmup Iteration  21: 17575661.213 ops/s
# Warmup Iteration  22: 17881063.681 ops/s
# Warmup Iteration  23: 17916909.809 ops/s
# Warmup Iteration  24: 18005279.504 ops/s
# Warmup Iteration  25: 17881238.536 ops/s
# Warmup Iteration  26: 17998488.439 ops/s
# Warmup Iteration  27: 17672988.592 ops/s
# Warmup Iteration  28: 17950410.374 ops/s
# Warmup Iteration  29: 17472520.051 ops/s
# Warmup Iteration  30: 18086436.508 ops/s
Iteration   1: 18014166.107 ops/s
Iteration   2: 18116920.605 ops/s
Iteration   3: 17957720.750 ops/s
Iteration   4: 17973410.216 ops/s
Iteration   5: 18147333.204 ops/s
Iteration   6: 17907259.535 ops/s
Iteration   7: 18096909.027 ops/s
Iteration   8: 17823765.587 ops/s
Iteration   9: 18002876.577 ops/s
Iteration  10: 17979587.044 ops/s
Iteration  11: 18086946.878 ops/s
Iteration  12: 17713628.339 ops/s
Iteration  13: 18079972.172 ops/s
Iteration  14: 18195363.009 ops/s
Iteration  15: 18118891.140 ops/s
Iteration  16: 17961725.325 ops/s
Iteration  17: 18115476.997 ops/s
Iteration  18: 18008037.672 ops/s
Iteration  19: 17940207.038 ops/s
Iteration  20: 18136045.210 ops/s
Iteration  21: 18042777.054 ops/s
Iteration  22: 17920107.960 ops/s
Iteration  23: 17310709.076 ops/s
Iteration  24: 17356990.201 ops/s
Iteration  25: 17438331.814 ops/s
Iteration  26: 17991001.292 ops/s
Iteration  27: 17582058.024 ops/s
Iteration  28: 17975154.721 ops/s
Iteration  29: 17724983.761 ops/s
Iteration  30: 17700986.869 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIf":
  17913978.107 ±(99.9%) 157101.015 ops/s [Average]
  (min, avg, max) = (17310709.076, 17913978.107, 18195363.009), stdev = 235141.422
  CI (99.9%): [17756877.092, 18071079.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIf  thrpt   30  17913978.107 ± 157101.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIfToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIfToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10212073.608 ops/s
# Warmup Iteration   2: 17531430.145 ops/s
# Warmup Iteration   3: 20818928.686 ops/s
# Warmup Iteration   4: 21043089.324 ops/s
# Warmup Iteration   5: 20667033.689 ops/s
# Warmup Iteration   6: 20917274.542 ops/s
# Warmup Iteration   7: 21263833.841 ops/s
# Warmup Iteration   8: 21089475.406 ops/s
# Warmup Iteration   9: 20998322.164 ops/s
# Warmup Iteration  10: 21030651.408 ops/s
# Warmup Iteration  11: 20829350.747 ops/s
# Warmup Iteration  12: 20827070.400 ops/s
# Warmup Iteration  13: 20657041.827 ops/s
# Warmup Iteration  14: 20654846.210 ops/s
# Warmup Iteration  15: 21050467.910 ops/s
# Warmup Iteration  16: 20128925.427 ops/s
# Warmup Iteration  17: 21178961.757 ops/s
# Warmup Iteration  18: 20738924.311 ops/s
# Warmup Iteration  19: 20825949.685 ops/s
# Warmup Iteration  20: 20613894.500 ops/s
# Warmup Iteration  21: 20357400.960 ops/s
# Warmup Iteration  22: 20977237.536 ops/s
# Warmup Iteration  23: 21217507.199 ops/s
# Warmup Iteration  24: 20635825.507 ops/s
# Warmup Iteration  25: 20729049.150 ops/s
# Warmup Iteration  26: 21075605.376 ops/s
# Warmup Iteration  27: 20928170.269 ops/s
# Warmup Iteration  28: 21054276.728 ops/s
# Warmup Iteration  29: 21089837.596 ops/s
# Warmup Iteration  30: 21277959.573 ops/s
Iteration   1: 21258966.765 ops/s
Iteration   2: 20588176.515 ops/s
Iteration   3: 20299034.655 ops/s
Iteration   4: 20378513.421 ops/s
Iteration   5: 20496879.993 ops/s
Iteration   6: 20857129.220 ops/s
Iteration   7: 20806245.078 ops/s
Iteration   8: 20230572.046 ops/s
Iteration   9: 20871202.454 ops/s
Iteration  10: 21247093.922 ops/s
Iteration  11: 21169618.599 ops/s
Iteration  12: 20823867.758 ops/s
Iteration  13: 21194025.578 ops/s
Iteration  14: 21055917.282 ops/s
Iteration  15: 21028341.470 ops/s
Iteration  16: 20604660.950 ops/s
Iteration  17: 21281025.377 ops/s
Iteration  18: 20610743.130 ops/s
Iteration  19: 21074790.055 ops/s
Iteration  20: 20975322.698 ops/s
Iteration  21: 21051612.426 ops/s
Iteration  22: 21016991.465 ops/s
Iteration  23: 21288202.404 ops/s
Iteration  24: 21050152.400 ops/s
Iteration  25: 20871671.134 ops/s
Iteration  26: 20835257.440 ops/s
Iteration  27: 20887117.555 ops/s
Iteration  28: 20967603.956 ops/s
Iteration  29: 20688716.590 ops/s
Iteration  30: 21235256.307 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIfToTarget":
  20891490.288 ±(99.9%) 197506.128 ops/s [Average]
  (min, avg, max) = (20230572.046, 20891490.288, 21288202.404), stdev = 295617.896
  CI (99.9%): [20693984.160, 21088996.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectIfToTarget  thrpt   30  20891490.288 ± 197506.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11394914.064 ops/s
# Warmup Iteration   2: 11874155.019 ops/s
# Warmup Iteration   3: 13581647.296 ops/s
# Warmup Iteration   4: 14461389.098 ops/s
# Warmup Iteration   5: 14974093.538 ops/s
# Warmup Iteration   6: 14723942.586 ops/s
# Warmup Iteration   7: 14906632.592 ops/s
# Warmup Iteration   8: 15084317.272 ops/s
# Warmup Iteration   9: 15016162.796 ops/s
# Warmup Iteration  10: 14917451.302 ops/s
# Warmup Iteration  11: 15029368.873 ops/s
# Warmup Iteration  12: 14672499.323 ops/s
# Warmup Iteration  13: 14901939.963 ops/s
# Warmup Iteration  14: 12407220.978 ops/s
# Warmup Iteration  15: 14759990.217 ops/s
# Warmup Iteration  16: 14911858.673 ops/s
# Warmup Iteration  17: 15010724.412 ops/s
# Warmup Iteration  18: 14954150.206 ops/s
# Warmup Iteration  19: 14927652.786 ops/s
# Warmup Iteration  20: 14885590.927 ops/s
# Warmup Iteration  21: 15002579.842 ops/s
# Warmup Iteration  22: 15084542.292 ops/s
# Warmup Iteration  23: 15022454.022 ops/s
# Warmup Iteration  24: 14873461.949 ops/s
# Warmup Iteration  25: 14974823.590 ops/s
# Warmup Iteration  26: 14616280.289 ops/s
# Warmup Iteration  27: 14948665.426 ops/s
# Warmup Iteration  28: 14872067.997 ops/s
# Warmup Iteration  29: 14439270.775 ops/s
# Warmup Iteration  30: 14940267.082 ops/s
Iteration   1: 14870540.879 ops/s
Iteration   2: 14979155.546 ops/s
Iteration   3: 15096962.404 ops/s
Iteration   4: 15063407.471 ops/s
Iteration   5: 15163292.309 ops/s
Iteration   6: 14925853.348 ops/s
Iteration   7: 15023395.751 ops/s
Iteration   8: 14901412.085 ops/s
Iteration   9: 14848753.944 ops/s
Iteration  10: 14942662.358 ops/s
Iteration  11: 14926589.579 ops/s
Iteration  12: 14828925.271 ops/s
Iteration  13: 14956969.850 ops/s
Iteration  14: 15068407.742 ops/s
Iteration  15: 14228586.697 ops/s
Iteration  16: 15014038.350 ops/s
Iteration  17: 15043906.991 ops/s
Iteration  18: 15085529.986 ops/s
Iteration  19: 15175193.349 ops/s
Iteration  20: 14875695.851 ops/s
Iteration  21: 14444982.973 ops/s
Iteration  22: 14606099.425 ops/s
Iteration  23: 14639130.386 ops/s
Iteration  24: 14420565.893 ops/s
Iteration  25: 14645158.492 ops/s
Iteration  26: 14853442.143 ops/s
Iteration  27: 14455862.762 ops/s
Iteration  28: 14846980.408 ops/s
Iteration  29: 14184639.283 ops/s
Iteration  30: 14310086.452 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt":
  14814207.599 ±(99.9%) 187841.479 ops/s [Average]
  (min, avg, max) = (14184639.283, 14814207.599, 15175193.349), stdev = 281152.304
  CI (99.9%): [14626366.120, 15002049.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt  thrpt   30  14814207.599 ± 187841.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4030807.314 ops/s
# Warmup Iteration   2: 8829236.835 ops/s
# Warmup Iteration   3: 7316020.815 ops/s
# Warmup Iteration   4: 8944962.682 ops/s
# Warmup Iteration   5: 9067527.866 ops/s
# Warmup Iteration   6: 9236705.394 ops/s
# Warmup Iteration   7: 9251835.210 ops/s
# Warmup Iteration   8: 9177055.102 ops/s
# Warmup Iteration   9: 9163862.752 ops/s
# Warmup Iteration  10: 9211849.156 ops/s
# Warmup Iteration  11: 9211294.589 ops/s
# Warmup Iteration  12: 9108986.676 ops/s
# Warmup Iteration  13: 9180617.058 ops/s
# Warmup Iteration  14: 9139357.128 ops/s
# Warmup Iteration  15: 9182997.191 ops/s
# Warmup Iteration  16: 9177135.319 ops/s
# Warmup Iteration  17: 9159080.041 ops/s
# Warmup Iteration  18: 8776890.477 ops/s
# Warmup Iteration  19: 9185414.853 ops/s
# Warmup Iteration  20: 8833107.601 ops/s
# Warmup Iteration  21: 9234681.301 ops/s
# Warmup Iteration  22: 8967844.454 ops/s
# Warmup Iteration  23: 9056420.021 ops/s
# Warmup Iteration  24: 8937236.652 ops/s
# Warmup Iteration  25: 9246216.513 ops/s
# Warmup Iteration  26: 9201843.269 ops/s
# Warmup Iteration  27: 8823035.077 ops/s
# Warmup Iteration  28: 9135715.490 ops/s
# Warmup Iteration  29: 9163644.495 ops/s
# Warmup Iteration  30: 9096646.397 ops/s
Iteration   1: 9064461.875 ops/s
Iteration   2: 9086571.502 ops/s
Iteration   3: 9040928.875 ops/s
Iteration   4: 9194914.245 ops/s
Iteration   5: 9122139.481 ops/s
Iteration   6: 9164065.676 ops/s
Iteration   7: 9221752.955 ops/s
Iteration   8: 9119775.453 ops/s
Iteration   9: 9084875.675 ops/s
Iteration  10: 9249695.954 ops/s
Iteration  11: 9214335.676 ops/s
Iteration  12: 9128434.308 ops/s
Iteration  13: 8911140.427 ops/s
Iteration  14: 9152750.316 ops/s
Iteration  15: 9084646.972 ops/s
Iteration  16: 8758243.251 ops/s
Iteration  17: 9014656.029 ops/s
Iteration  18: 9255186.446 ops/s
Iteration  19: 9157099.109 ops/s
Iteration  20: 9094905.352 ops/s
Iteration  21: 9201486.043 ops/s
Iteration  22: 9075570.276 ops/s
Iteration  23: 9119699.020 ops/s
Iteration  24: 9077219.973 ops/s
Iteration  25: 9079037.746 ops/s
Iteration  26: 9126808.423 ops/s
Iteration  27: 9161410.718 ops/s
Iteration  28: 9122929.947 ops/s
Iteration  29: 9200581.615 ops/s
Iteration  30: 9189307.170 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt_target":
  9115821.017 ±(99.9%) 66609.153 ops/s [Average]
  (min, avg, max) = (8758243.251, 9115821.017, 9255186.446), stdev = 99697.452
  CI (99.9%): [9049211.864, 9182430.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectInt_target  thrpt   30  9115821.017 ± 66609.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10952251.976 ops/s
# Warmup Iteration   2: 11506880.506 ops/s
# Warmup Iteration   3: 13637033.564 ops/s
# Warmup Iteration   4: 15009678.691 ops/s
# Warmup Iteration   5: 14892010.341 ops/s
# Warmup Iteration   6: 14857929.753 ops/s
# Warmup Iteration   7: 14549381.696 ops/s
# Warmup Iteration   8: 14061823.400 ops/s
# Warmup Iteration   9: 14916443.038 ops/s
# Warmup Iteration  10: 15061256.300 ops/s
# Warmup Iteration  11: 15022018.732 ops/s
# Warmup Iteration  12: 14312522.067 ops/s
# Warmup Iteration  13: 14937362.607 ops/s
# Warmup Iteration  14: 12350168.360 ops/s
# Warmup Iteration  15: 15168162.132 ops/s
# Warmup Iteration  16: 15169518.710 ops/s
# Warmup Iteration  17: 15054028.448 ops/s
# Warmup Iteration  18: 15148098.480 ops/s
# Warmup Iteration  19: 14978289.282 ops/s
# Warmup Iteration  20: 15030203.165 ops/s
# Warmup Iteration  21: 14916436.350 ops/s
# Warmup Iteration  22: 14979912.593 ops/s
# Warmup Iteration  23: 14911747.262 ops/s
# Warmup Iteration  24: 14966689.755 ops/s
# Warmup Iteration  25: 15029322.144 ops/s
# Warmup Iteration  26: 14990471.485 ops/s
# Warmup Iteration  27: 14952840.062 ops/s
# Warmup Iteration  28: 14855768.738 ops/s
# Warmup Iteration  29: 14895499.098 ops/s
# Warmup Iteration  30: 15044409.590 ops/s
Iteration   1: 14972673.254 ops/s
Iteration   2: 14778043.027 ops/s
Iteration   3: 14712820.329 ops/s
Iteration   4: 14817908.495 ops/s
Iteration   5: 14221360.375 ops/s
Iteration   6: 14609190.032 ops/s
Iteration   7: 14375625.347 ops/s
Iteration   8: 14395113.292 ops/s
Iteration   9: 14326934.222 ops/s
Iteration  10: 14301482.265 ops/s
Iteration  11: 14954045.354 ops/s
Iteration  12: 14832794.890 ops/s
Iteration  13: 14643300.232 ops/s
Iteration  14: 14540046.710 ops/s
Iteration  15: 14922480.839 ops/s
Iteration  16: 15022764.789 ops/s
Iteration  17: 14869864.309 ops/s
Iteration  18: 15132043.934 ops/s
Iteration  19: 15144671.364 ops/s
Iteration  20: 15156131.968 ops/s
Iteration  21: 14968991.921 ops/s
Iteration  22: 15153292.117 ops/s
Iteration  23: 14739758.201 ops/s
Iteration  24: 14627156.643 ops/s
Iteration  25: 14240599.554 ops/s
Iteration  26: 14901445.967 ops/s
Iteration  27: 15016299.632 ops/s
Iteration  28: 14929843.680 ops/s
Iteration  29: 14967508.830 ops/s
Iteration  30: 14947004.904 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong":
  14774039.882 ±(99.9%) 191049.041 ops/s [Average]
  (min, avg, max) = (14221360.375, 14774039.882, 15156131.968), stdev = 285953.233
  CI (99.9%): [14582990.841, 14965088.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong  thrpt   30  14774039.882 ± 191049.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3655439.452 ops/s
# Warmup Iteration   2: 7378075.913 ops/s
# Warmup Iteration   3: 7336523.632 ops/s
# Warmup Iteration   4: 7889936.334 ops/s
# Warmup Iteration   5: 7915952.041 ops/s
# Warmup Iteration   6: 7991959.202 ops/s
# Warmup Iteration   7: 8023304.025 ops/s
# Warmup Iteration   8: 7781470.348 ops/s
# Warmup Iteration   9: 7992856.859 ops/s
# Warmup Iteration  10: 7893526.706 ops/s
# Warmup Iteration  11: 7781822.910 ops/s
# Warmup Iteration  12: 7986122.259 ops/s
# Warmup Iteration  13: 7990750.207 ops/s
# Warmup Iteration  14: 7944287.963 ops/s
# Warmup Iteration  15: 7973507.441 ops/s
# Warmup Iteration  16: 7845835.618 ops/s
# Warmup Iteration  17: 7989440.021 ops/s
# Warmup Iteration  18: 8043116.125 ops/s
# Warmup Iteration  19: 7962330.873 ops/s
# Warmup Iteration  20: 7974763.871 ops/s
# Warmup Iteration  21: 7990427.695 ops/s
# Warmup Iteration  22: 7909240.538 ops/s
# Warmup Iteration  23: 7928787.235 ops/s
# Warmup Iteration  24: 7972484.929 ops/s
# Warmup Iteration  25: 7954706.764 ops/s
# Warmup Iteration  26: 7965759.316 ops/s
# Warmup Iteration  27: 8010642.815 ops/s
# Warmup Iteration  28: 7968941.170 ops/s
# Warmup Iteration  29: 7942427.325 ops/s
# Warmup Iteration  30: 7954145.373 ops/s
Iteration   1: 7986210.531 ops/s
Iteration   2: 7681987.660 ops/s
Iteration   3: 7817211.036 ops/s
Iteration   4: 7776632.550 ops/s
Iteration   5: 7932868.227 ops/s
Iteration   6: 7761118.671 ops/s
Iteration   7: 7750789.877 ops/s
Iteration   8: 7962804.296 ops/s
Iteration   9: 7860051.040 ops/s
Iteration  10: 7836721.157 ops/s
Iteration  11: 7952504.772 ops/s
Iteration  12: 8013727.167 ops/s
Iteration  13: 7945935.200 ops/s
Iteration  14: 7958967.860 ops/s
Iteration  15: 7742380.910 ops/s
Iteration  16: 7928686.553 ops/s
Iteration  17: 7812311.573 ops/s
Iteration  18: 7906919.307 ops/s
Iteration  19: 7923297.241 ops/s
Iteration  20: 7911603.667 ops/s
Iteration  21: 8002230.732 ops/s
Iteration  22: 7907800.357 ops/s
Iteration  23: 7518926.735 ops/s
Iteration  24: 7924312.831 ops/s
Iteration  25: 7962950.255 ops/s
Iteration  26: 7911170.784 ops/s
Iteration  27: 7907684.995 ops/s
Iteration  28: 7864691.201 ops/s
Iteration  29: 7864549.844 ops/s
Iteration  30: 7786174.736 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong_target":
  7870440.725 ±(99.9%) 71731.333 ops/s [Average]
  (min, avg, max) = (7518926.735, 7870440.725, 8013727.167), stdev = 107364.091
  CI (99.9%): [7798709.392, 7942172.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectLong_target  thrpt   30  7870440.725 ± 71731.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11333780.684 ops/s
# Warmup Iteration   2: 11858389.901 ops/s
# Warmup Iteration   3: 13900187.307 ops/s
# Warmup Iteration   4: 15022777.769 ops/s
# Warmup Iteration   5: 14949460.918 ops/s
# Warmup Iteration   6: 14887647.780 ops/s
# Warmup Iteration   7: 14942905.407 ops/s
# Warmup Iteration   8: 15029664.604 ops/s
# Warmup Iteration   9: 15003823.658 ops/s
# Warmup Iteration  10: 14976619.548 ops/s
# Warmup Iteration  11: 14476212.120 ops/s
# Warmup Iteration  12: 14975715.527 ops/s
# Warmup Iteration  13: 14535891.966 ops/s
# Warmup Iteration  14: 11950913.382 ops/s
# Warmup Iteration  15: 14417965.159 ops/s
# Warmup Iteration  16: 15010889.470 ops/s
# Warmup Iteration  17: 14745358.079 ops/s
# Warmup Iteration  18: 14435452.061 ops/s
# Warmup Iteration  19: 14542552.701 ops/s
# Warmup Iteration  20: 14429736.094 ops/s
# Warmup Iteration  21: 14424138.843 ops/s
# Warmup Iteration  22: 14525482.591 ops/s
# Warmup Iteration  23: 14384119.484 ops/s
# Warmup Iteration  24: 14487215.210 ops/s
# Warmup Iteration  25: 14860331.784 ops/s
# Warmup Iteration  26: 15091319.283 ops/s
# Warmup Iteration  27: 15003906.525 ops/s
# Warmup Iteration  28: 15032322.749 ops/s
# Warmup Iteration  29: 14916937.187 ops/s
# Warmup Iteration  30: 14815096.527 ops/s
Iteration   1: 14976651.028 ops/s
Iteration   2: 14585356.161 ops/s
Iteration   3: 14999057.354 ops/s
Iteration   4: 14968872.195 ops/s
Iteration   5: 14561175.025 ops/s
Iteration   6: 14100850.579 ops/s
Iteration   7: 14833524.758 ops/s
Iteration   8: 14046170.294 ops/s
Iteration   9: 14161185.687 ops/s
Iteration  10: 14340219.786 ops/s
Iteration  11: 14476795.129 ops/s
Iteration  12: 14772347.697 ops/s
Iteration  13: 14489416.295 ops/s
Iteration  14: 14402360.341 ops/s
Iteration  15: 14369848.980 ops/s
Iteration  16: 14405067.746 ops/s
Iteration  17: 14948071.796 ops/s
Iteration  18: 14987623.972 ops/s
Iteration  19: 14995237.626 ops/s
Iteration  20: 14988555.986 ops/s
Iteration  21: 14831656.697 ops/s
Iteration  22: 14988720.733 ops/s
Iteration  23: 14874521.562 ops/s
Iteration  24: 14874386.115 ops/s
Iteration  25: 15166196.116 ops/s
Iteration  26: 15142464.369 ops/s
Iteration  27: 14843175.152 ops/s
Iteration  28: 15062978.060 ops/s
Iteration  29: 14224952.801 ops/s
Iteration  30: 14955721.869 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort":
  14712438.730 ±(99.9%) 222169.456 ops/s [Average]
  (min, avg, max) = (14046170.294, 14712438.730, 15166196.116), stdev = 332532.808
  CI (99.9%): [14490269.275, 14934608.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort  thrpt   30  14712438.730 ± 222169.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5321826.314 ops/s
# Warmup Iteration   2: 10158643.031 ops/s
# Warmup Iteration   3: 9734364.218 ops/s
# Warmup Iteration   4: 10747518.201 ops/s
# Warmup Iteration   5: 10732725.618 ops/s
# Warmup Iteration   6: 10687703.512 ops/s
# Warmup Iteration   7: 10811193.110 ops/s
# Warmup Iteration   8: 10814565.788 ops/s
# Warmup Iteration   9: 10815566.484 ops/s
# Warmup Iteration  10: 10779794.200 ops/s
# Warmup Iteration  11: 10741114.090 ops/s
# Warmup Iteration  12: 10801102.605 ops/s
# Warmup Iteration  13: 10838755.488 ops/s
# Warmup Iteration  14: 10904816.483 ops/s
# Warmup Iteration  15: 10915304.376 ops/s
# Warmup Iteration  16: 10923658.644 ops/s
# Warmup Iteration  17: 10416812.716 ops/s
# Warmup Iteration  18: 10710143.712 ops/s
# Warmup Iteration  19: 10757203.332 ops/s
# Warmup Iteration  20: 10801206.504 ops/s
# Warmup Iteration  21: 10780830.394 ops/s
# Warmup Iteration  22: 10612820.516 ops/s
# Warmup Iteration  23: 10746368.324 ops/s
# Warmup Iteration  24: 10624821.927 ops/s
# Warmup Iteration  25: 10648785.339 ops/s
# Warmup Iteration  26: 10654598.381 ops/s
# Warmup Iteration  27: 10750507.952 ops/s
# Warmup Iteration  28: 10668658.436 ops/s
# Warmup Iteration  29: 10661114.811 ops/s
# Warmup Iteration  30: 10711399.734 ops/s
Iteration   1: 10605864.692 ops/s
Iteration   2: 10542098.765 ops/s
Iteration   3: 10496423.988 ops/s
Iteration   4: 10320095.888 ops/s
Iteration   5: 10771793.307 ops/s
Iteration   6: 10721639.197 ops/s
Iteration   7: 10817878.232 ops/s
Iteration   8: 10691769.587 ops/s
Iteration   9: 10733587.980 ops/s
Iteration  10: 10872967.699 ops/s
Iteration  11: 10831399.808 ops/s
Iteration  12: 10757285.321 ops/s
Iteration  13: 10741569.262 ops/s
Iteration  14: 10679929.235 ops/s
Iteration  15: 10814228.660 ops/s
Iteration  16: 10656931.269 ops/s
Iteration  17: 10746762.510 ops/s
Iteration  18: 10809613.281 ops/s
Iteration  19: 10725344.195 ops/s
Iteration  20: 10728995.945 ops/s
Iteration  21: 10775200.891 ops/s
Iteration  22: 10825947.154 ops/s
Iteration  23: 10790894.121 ops/s
Iteration  24: 10631694.321 ops/s
Iteration  25: 10840189.540 ops/s
Iteration  26: 10711765.430 ops/s
Iteration  27: 10667938.129 ops/s
Iteration  28: 10737411.963 ops/s
Iteration  29: 10590791.246 ops/s
Iteration  30: 10780675.967 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort_target":
  10713956.253 ±(99.9%) 77748.437 ops/s [Average]
  (min, avg, max) = (10320095.888, 10713956.253, 10872967.699), stdev = 116370.209
  CI (99.9%): [10636207.816, 10791704.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectShort_target  thrpt   30  10713956.253 ± 77748.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5996399.044 ops/s
# Warmup Iteration   2: 13426085.822 ops/s
# Warmup Iteration   3: 11476271.312 ops/s
# Warmup Iteration   4: 13498861.090 ops/s
# Warmup Iteration   5: 13510304.926 ops/s
# Warmup Iteration   6: 13539122.757 ops/s
# Warmup Iteration   7: 13537593.712 ops/s
# Warmup Iteration   8: 13543542.132 ops/s
# Warmup Iteration   9: 13543884.440 ops/s
# Warmup Iteration  10: 13556418.912 ops/s
# Warmup Iteration  11: 13627969.141 ops/s
# Warmup Iteration  12: 13603372.860 ops/s
# Warmup Iteration  13: 13565484.286 ops/s
# Warmup Iteration  14: 13595733.256 ops/s
# Warmup Iteration  15: 13611830.160 ops/s
# Warmup Iteration  16: 13609357.405 ops/s
# Warmup Iteration  17: 13486817.207 ops/s
# Warmup Iteration  18: 13573013.205 ops/s
# Warmup Iteration  19: 13582339.357 ops/s
# Warmup Iteration  20: 13572649.440 ops/s
# Warmup Iteration  21: 13595683.775 ops/s
# Warmup Iteration  22: 13621615.024 ops/s
# Warmup Iteration  23: 13586133.751 ops/s
# Warmup Iteration  24: 13554679.420 ops/s
# Warmup Iteration  25: 13565257.763 ops/s
# Warmup Iteration  26: 13560950.061 ops/s
# Warmup Iteration  27: 13625688.258 ops/s
# Warmup Iteration  28: 13555611.627 ops/s
# Warmup Iteration  29: 13531189.176 ops/s
# Warmup Iteration  30: 13612385.444 ops/s
Iteration   1: 13656390.635 ops/s
Iteration   2: 13583575.180 ops/s
Iteration   3: 13485775.265 ops/s
Iteration   4: 13506664.021 ops/s
Iteration   5: 13548739.385 ops/s
Iteration   6: 13538809.327 ops/s
Iteration   7: 13492328.346 ops/s
Iteration   8: 13626769.149 ops/s
Iteration   9: 13624634.494 ops/s
Iteration  10: 13604916.575 ops/s
Iteration  11: 13676709.958 ops/s
Iteration  12: 13596840.563 ops/s
Iteration  13: 13640049.217 ops/s
Iteration  14: 13633015.765 ops/s
Iteration  15: 13499906.954 ops/s
Iteration  16: 13612600.765 ops/s
Iteration  17: 13610618.919 ops/s
Iteration  18: 13603662.632 ops/s
Iteration  19: 13607626.716 ops/s
Iteration  20: 13634548.866 ops/s
Iteration  21: 13506848.327 ops/s
Iteration  22: 13550057.542 ops/s
Iteration  23: 13627065.369 ops/s
Iteration  24: 13522422.316 ops/s
Iteration  25: 13628015.462 ops/s
Iteration  26: 13660370.927 ops/s
Iteration  27: 13569101.152 ops/s
Iteration  28: 13573550.534 ops/s
Iteration  29: 13597364.525 ops/s
Iteration  30: 13537272.768 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectToTarget":
  13585208.389 ±(99.9%) 36393.519 ops/s [Average]
  (min, avg, max) = (13485775.265, 13585208.389, 13676709.958), stdev = 54472.110
  CI (99.9%): [13548814.870, 13621601.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectToTarget  thrpt   30  13585208.389 ± 36393.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9236092.109 ops/s
# Warmup Iteration   2: 19909021.507 ops/s
# Warmup Iteration   3: 20132927.264 ops/s
# Warmup Iteration   4: 16975474.692 ops/s
# Warmup Iteration   5: 20192288.184 ops/s
# Warmup Iteration   6: 20095370.372 ops/s
# Warmup Iteration   7: 20130347.475 ops/s
# Warmup Iteration   8: 20053738.772 ops/s
# Warmup Iteration   9: 19438633.371 ops/s
# Warmup Iteration  10: 19922617.591 ops/s
# Warmup Iteration  11: 19807056.434 ops/s
# Warmup Iteration  12: 20125229.087 ops/s
# Warmup Iteration  13: 20077907.402 ops/s
# Warmup Iteration  14: 19926110.926 ops/s
# Warmup Iteration  15: 20053490.281 ops/s
# Warmup Iteration  16: 20049976.198 ops/s
# Warmup Iteration  17: 19753372.096 ops/s
# Warmup Iteration  18: 20064605.872 ops/s
# Warmup Iteration  19: 19989621.964 ops/s
# Warmup Iteration  20: 19961578.681 ops/s
# Warmup Iteration  21: 20005317.337 ops/s
# Warmup Iteration  22: 20041021.839 ops/s
# Warmup Iteration  23: 20021338.590 ops/s
# Warmup Iteration  24: 20061038.218 ops/s
# Warmup Iteration  25: 20115423.336 ops/s
# Warmup Iteration  26: 20213159.089 ops/s
# Warmup Iteration  27: 20062934.819 ops/s
# Warmup Iteration  28: 19508985.365 ops/s
# Warmup Iteration  29: 19513301.061 ops/s
# Warmup Iteration  30: 19837642.839 ops/s
Iteration   1: 20042623.957 ops/s
Iteration   2: 20079122.500 ops/s
Iteration   3: 19727044.796 ops/s
Iteration   4: 19824560.364 ops/s
Iteration   5: 20023353.945 ops/s
Iteration   6: 19495611.286 ops/s
Iteration   7: 19397560.565 ops/s
Iteration   8: 20137458.491 ops/s
Iteration   9: 19989434.283 ops/s
Iteration  10: 19962770.344 ops/s
Iteration  11: 19961123.164 ops/s
Iteration  12: 20179463.493 ops/s
Iteration  13: 19937850.652 ops/s
Iteration  14: 20114537.506 ops/s
Iteration  15: 19937800.620 ops/s
Iteration  16: 20002122.221 ops/s
Iteration  17: 20102435.915 ops/s
Iteration  18: 20058595.929 ops/s
Iteration  19: 20057951.370 ops/s
Iteration  20: 20040485.999 ops/s
Iteration  21: 19888473.895 ops/s
Iteration  22: 20055056.685 ops/s
Iteration  23: 20056031.685 ops/s
Iteration  24: 19843513.582 ops/s
Iteration  25: 20134744.631 ops/s
Iteration  26: 19730274.840 ops/s
Iteration  27: 20134647.265 ops/s
Iteration  28: 20072949.234 ops/s
Iteration  29: 19799342.186 ops/s
Iteration  30: 20006530.508 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith":
  19959782.397 ±(99.9%) 122465.601 ops/s [Average]
  (min, avg, max) = (19397560.565, 19959782.397, 20179463.493), stdev = 183300.759
  CI (99.9%): [19837316.797, 20082247.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith  thrpt   30  19959782.397 ± 122465.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32912507.517 ops/s
# Warmup Iteration   2: 68224191.110 ops/s
# Warmup Iteration   3: 57283368.184 ops/s
# Warmup Iteration   4: 68255486.539 ops/s
# Warmup Iteration   5: 68789662.547 ops/s
# Warmup Iteration   6: 67945014.262 ops/s
# Warmup Iteration   7: 68357869.360 ops/s
# Warmup Iteration   8: 68035354.072 ops/s
# Warmup Iteration   9: 68888165.933 ops/s
# Warmup Iteration  10: 68141082.334 ops/s
# Warmup Iteration  11: 67588577.403 ops/s
# Warmup Iteration  12: 68495990.963 ops/s
# Warmup Iteration  13: 69200497.819 ops/s
# Warmup Iteration  14: 69222440.224 ops/s
# Warmup Iteration  15: 68683061.865 ops/s
# Warmup Iteration  16: 68866237.809 ops/s
# Warmup Iteration  17: 68719181.021 ops/s
# Warmup Iteration  18: 68546650.504 ops/s
# Warmup Iteration  19: 68651940.214 ops/s
# Warmup Iteration  20: 68214335.118 ops/s
# Warmup Iteration  21: 68283906.945 ops/s
# Warmup Iteration  22: 68653829.950 ops/s
# Warmup Iteration  23: 68287131.902 ops/s
# Warmup Iteration  24: 68419354.507 ops/s
# Warmup Iteration  25: 67689368.373 ops/s
# Warmup Iteration  26: 68753412.878 ops/s
# Warmup Iteration  27: 69093167.026 ops/s
# Warmup Iteration  28: 68971207.370 ops/s
# Warmup Iteration  29: 68447901.551 ops/s
# Warmup Iteration  30: 68774921.995 ops/s
Iteration   1: 68844595.079 ops/s
Iteration   2: 69082264.260 ops/s
Iteration   3: 68304445.001 ops/s
Iteration   4: 68493720.590 ops/s
Iteration   5: 67273127.894 ops/s
Iteration   6: 68259499.017 ops/s
Iteration   7: 68079161.909 ops/s
Iteration   8: 68205246.701 ops/s
Iteration   9: 68110710.036 ops/s
Iteration  10: 68442938.475 ops/s
Iteration  11: 68096598.417 ops/s
Iteration  12: 68510602.670 ops/s
Iteration  13: 69218328.867 ops/s
Iteration  14: 68704766.222 ops/s
Iteration  15: 67986347.735 ops/s
Iteration  16: 69432243.816 ops/s
Iteration  17: 69339063.426 ops/s
Iteration  18: 68870195.203 ops/s
Iteration  19: 69046538.778 ops/s
Iteration  20: 69031095.212 ops/s
Iteration  21: 68832567.959 ops/s
Iteration  22: 69121418.313 ops/s
Iteration  23: 68228567.244 ops/s
Iteration  24: 68079677.425 ops/s
Iteration  25: 66929781.418 ops/s
Iteration  26: 68467368.141 ops/s
Iteration  27: 68273014.054 ops/s
Iteration  28: 68610484.786 ops/s
Iteration  29: 68490500.193 ops/s
Iteration  30: 68704983.931 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndex":
  68502328.426 ±(99.9%) 373699.958 ops/s [Average]
  (min, avg, max) = (66929781.418, 68502328.426, 69432243.816), stdev = 559336.547
  CI (99.9%): [68128628.467, 68876028.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndex  thrpt   30  68502328.426 ± 373699.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28740886.674 ops/s
# Warmup Iteration   2: 56061584.768 ops/s
# Warmup Iteration   3: 48223759.378 ops/s
# Warmup Iteration   4: 57091847.044 ops/s
# Warmup Iteration   5: 56251588.117 ops/s
# Warmup Iteration   6: 56952269.517 ops/s
# Warmup Iteration   7: 57209875.637 ops/s
# Warmup Iteration   8: 57942056.287 ops/s
# Warmup Iteration   9: 56690002.866 ops/s
# Warmup Iteration  10: 56535689.625 ops/s
# Warmup Iteration  11: 57132707.173 ops/s
# Warmup Iteration  12: 56981151.041 ops/s
# Warmup Iteration  13: 56534182.489 ops/s
# Warmup Iteration  14: 56630404.668 ops/s
# Warmup Iteration  15: 56180277.610 ops/s
# Warmup Iteration  16: 56596708.133 ops/s
# Warmup Iteration  17: 57045846.170 ops/s
# Warmup Iteration  18: 56935905.576 ops/s
# Warmup Iteration  19: 57050039.069 ops/s
# Warmup Iteration  20: 55938256.169 ops/s
# Warmup Iteration  21: 57048018.529 ops/s
# Warmup Iteration  22: 57102229.395 ops/s
# Warmup Iteration  23: 57613479.234 ops/s
# Warmup Iteration  24: 56973092.258 ops/s
# Warmup Iteration  25: 57855369.115 ops/s
# Warmup Iteration  26: 57802081.650 ops/s
# Warmup Iteration  27: 57483149.912 ops/s
# Warmup Iteration  28: 57077366.469 ops/s
# Warmup Iteration  29: 57197905.521 ops/s
# Warmup Iteration  30: 57419052.554 ops/s
Iteration   1: 57733445.136 ops/s
Iteration   2: 57550285.262 ops/s
Iteration   3: 57834594.682 ops/s
Iteration   4: 57546505.876 ops/s
Iteration   5: 58168465.590 ops/s
Iteration   6: 58148401.778 ops/s
Iteration   7: 57860766.159 ops/s
Iteration   8: 57687471.077 ops/s
Iteration   9: 57327234.495 ops/s
Iteration  10: 56319594.054 ops/s
Iteration  11: 56394288.019 ops/s
Iteration  12: 57671004.058 ops/s
Iteration  13: 58146007.493 ops/s
Iteration  14: 57702284.035 ops/s
Iteration  15: 57095472.328 ops/s
Iteration  16: 57962241.380 ops/s
Iteration  17: 57160868.650 ops/s
Iteration  18: 57726334.622 ops/s
Iteration  19: 58015195.674 ops/s
Iteration  20: 57848163.230 ops/s
Iteration  21: 57515849.195 ops/s
Iteration  22: 58432781.857 ops/s
Iteration  23: 57859676.714 ops/s
Iteration  24: 57628054.443 ops/s
Iteration  25: 58021225.016 ops/s
Iteration  26: 57922492.964 ops/s
Iteration  27: 57847983.277 ops/s
Iteration  28: 57324694.005 ops/s
Iteration  29: 57844955.350 ops/s
Iteration  30: 57198649.574 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget":
  57649832.866 ±(99.9%) 314392.773 ops/s [Average]
  (min, avg, max) = (56319594.054, 57649832.866, 58432781.857), stdev = 470568.337
  CI (99.9%): [57335440.094, 57964225.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  57649832.866 ± 314392.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2109023.460 ops/s
# Warmup Iteration   2: 4664762.871 ops/s
# Warmup Iteration   3: 4812760.540 ops/s
# Warmup Iteration   4: 5010254.152 ops/s
# Warmup Iteration   5: 3990224.905 ops/s
# Warmup Iteration   6: 4833533.901 ops/s
# Warmup Iteration   7: 4858922.361 ops/s
# Warmup Iteration   8: 4862518.176 ops/s
# Warmup Iteration   9: 4821127.887 ops/s
# Warmup Iteration  10: 4914531.537 ops/s
# Warmup Iteration  11: 4942140.145 ops/s
# Warmup Iteration  12: 4946600.989 ops/s
# Warmup Iteration  13: 4913515.394 ops/s
# Warmup Iteration  14: 4926526.362 ops/s
# Warmup Iteration  15: 4916041.326 ops/s
# Warmup Iteration  16: 4955604.729 ops/s
# Warmup Iteration  17: 4965483.924 ops/s
# Warmup Iteration  18: 5007613.899 ops/s
# Warmup Iteration  19: 4982344.969 ops/s
# Warmup Iteration  20: 4963657.024 ops/s
# Warmup Iteration  21: 4932805.080 ops/s
# Warmup Iteration  22: 4972987.945 ops/s
# Warmup Iteration  23: 4892836.189 ops/s
# Warmup Iteration  24: 4751016.467 ops/s
# Warmup Iteration  25: 4956063.070 ops/s
# Warmup Iteration  26: 4983054.525 ops/s
# Warmup Iteration  27: 4955622.718 ops/s
# Warmup Iteration  28: 4976620.596 ops/s
# Warmup Iteration  29: 4967576.408 ops/s
# Warmup Iteration  30: 4929006.056 ops/s
Iteration   1: 4918233.013 ops/s
Iteration   2: 4978353.036 ops/s
Iteration   3: 5005915.429 ops/s
Iteration   4: 4981034.489 ops/s
Iteration   5: 4858685.389 ops/s
Iteration   6: 4773307.090 ops/s
Iteration   7: 4975195.180 ops/s
Iteration   8: 4956937.749 ops/s
Iteration   9: 4731379.938 ops/s
Iteration  10: 4950176.600 ops/s
Iteration  11: 4985527.029 ops/s
Iteration  12: 4907194.041 ops/s
Iteration  13: 4877128.059 ops/s
Iteration  14: 4938974.337 ops/s
Iteration  15: 5017975.473 ops/s
Iteration  16: 5017998.478 ops/s
Iteration  17: 5028805.075 ops/s
Iteration  18: 4978860.610 ops/s
Iteration  19: 4969078.487 ops/s
Iteration  20: 4930941.841 ops/s
Iteration  21: 5010950.620 ops/s
Iteration  22: 4835694.732 ops/s
Iteration  23: 4794665.270 ops/s
Iteration  24: 4835168.856 ops/s
Iteration  25: 4885428.729 ops/s
Iteration  26: 4911333.193 ops/s
Iteration  27: 4971633.204 ops/s
Iteration  28: 4995239.746 ops/s
Iteration  29: 4874082.621 ops/s
Iteration  30: 4928336.508 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith_target":
  4927474.494 ±(99.9%) 51567.984 ops/s [Average]
  (min, avg, max) = (4731379.938, 4927474.494, 5028805.075), stdev = 77184.537
  CI (99.9%): [4875906.510, 4979042.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  4927474.494 ± 51567.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3303184.271 ops/s
# Warmup Iteration   2: 7047137.090 ops/s
# Warmup Iteration   3: 7785643.425 ops/s
# Warmup Iteration   4: 7689649.146 ops/s
# Warmup Iteration   5: 6491967.922 ops/s
# Warmup Iteration   6: 7751766.159 ops/s
# Warmup Iteration   7: 7765427.467 ops/s
# Warmup Iteration   8: 7529481.787 ops/s
# Warmup Iteration   9: 7726008.141 ops/s
# Warmup Iteration  10: 7676158.539 ops/s
# Warmup Iteration  11: 7645183.701 ops/s
# Warmup Iteration  12: 7541385.810 ops/s
# Warmup Iteration  13: 7768976.832 ops/s
# Warmup Iteration  14: 7809598.246 ops/s
# Warmup Iteration  15: 7808760.610 ops/s
# Warmup Iteration  16: 7743387.951 ops/s
# Warmup Iteration  17: 7774414.479 ops/s
# Warmup Iteration  18: 7628432.495 ops/s
# Warmup Iteration  19: 7646453.599 ops/s
# Warmup Iteration  20: 7496254.092 ops/s
# Warmup Iteration  21: 7628950.877 ops/s
# Warmup Iteration  22: 7603513.975 ops/s
# Warmup Iteration  23: 7808537.420 ops/s
# Warmup Iteration  24: 7836377.599 ops/s
# Warmup Iteration  25: 7764956.119 ops/s
# Warmup Iteration  26: 7759228.935 ops/s
# Warmup Iteration  27: 7832304.633 ops/s
# Warmup Iteration  28: 7754631.866 ops/s
# Warmup Iteration  29: 7786704.012 ops/s
# Warmup Iteration  30: 7758374.040 ops/s
Iteration   1: 7772011.121 ops/s
Iteration   2: 7686041.046 ops/s
Iteration   3: 7768142.184 ops/s
Iteration   4: 7715740.474 ops/s
Iteration   5: 7800426.960 ops/s
Iteration   6: 7802757.448 ops/s
Iteration   7: 7823643.670 ops/s
Iteration   8: 7826087.446 ops/s
Iteration   9: 7767579.896 ops/s
Iteration  10: 7657724.307 ops/s
Iteration  11: 7457103.501 ops/s
Iteration  12: 7783899.790 ops/s
Iteration  13: 7713626.548 ops/s
Iteration  14: 7847545.477 ops/s
Iteration  15: 7743648.992 ops/s
Iteration  16: 7787735.379 ops/s
Iteration  17: 7815402.888 ops/s
Iteration  18: 7789994.252 ops/s
Iteration  19: 7768731.793 ops/s
Iteration  20: 7829132.619 ops/s
Iteration  21: 7736272.583 ops/s
Iteration  22: 7755292.870 ops/s
Iteration  23: 7812505.154 ops/s
Iteration  24: 7857116.623 ops/s
Iteration  25: 7815116.119 ops/s
Iteration  26: 7785885.161 ops/s
Iteration  27: 7810054.494 ops/s
Iteration  28: 7813612.256 ops/s
Iteration  29: 7841995.909 ops/s
Iteration  30: 7787053.320 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_collect_target":
  7772396.009 ±(99.9%) 50660.313 ops/s [Average]
  (min, avg, max) = (7457103.501, 7772396.009, 7857116.623), stdev = 75825.977
  CI (99.9%): [7721735.696, 7823056.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_collect_target  thrpt   30  7772396.009 ± 50660.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_compareTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_compareTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1123363.599 ops/s
# Warmup Iteration   2: 2458642.690 ops/s
# Warmup Iteration   3: 2535921.112 ops/s
# Warmup Iteration   4: 2404495.631 ops/s
# Warmup Iteration   5: 2205993.657 ops/s
# Warmup Iteration   6: 2523856.709 ops/s
# Warmup Iteration   7: 2464032.813 ops/s
# Warmup Iteration   8: 2535653.848 ops/s
# Warmup Iteration   9: 2546577.951 ops/s
# Warmup Iteration  10: 2511199.024 ops/s
# Warmup Iteration  11: 2533611.298 ops/s
# Warmup Iteration  12: 2535754.836 ops/s
# Warmup Iteration  13: 2543133.567 ops/s
# Warmup Iteration  14: 2545188.451 ops/s
# Warmup Iteration  15: 2551131.792 ops/s
# Warmup Iteration  16: 2535194.666 ops/s
# Warmup Iteration  17: 2541114.087 ops/s
# Warmup Iteration  18: 2492600.987 ops/s
# Warmup Iteration  19: 2550336.289 ops/s
# Warmup Iteration  20: 2553130.200 ops/s
# Warmup Iteration  21: 2537135.282 ops/s
# Warmup Iteration  22: 2544344.051 ops/s
# Warmup Iteration  23: 2527132.540 ops/s
# Warmup Iteration  24: 2529642.664 ops/s
# Warmup Iteration  25: 2547261.379 ops/s
# Warmup Iteration  26: 2546093.746 ops/s
# Warmup Iteration  27: 2536313.538 ops/s
# Warmup Iteration  28: 2533226.808 ops/s
# Warmup Iteration  29: 2546452.020 ops/s
# Warmup Iteration  30: 2543953.364 ops/s
Iteration   1: 2522304.338 ops/s
Iteration   2: 2540632.486 ops/s
Iteration   3: 2522460.362 ops/s
Iteration   4: 2527752.162 ops/s
Iteration   5: 2547921.395 ops/s
Iteration   6: 2543423.869 ops/s
Iteration   7: 2528750.085 ops/s
Iteration   8: 2525538.315 ops/s
Iteration   9: 2522624.929 ops/s
Iteration  10: 2541054.109 ops/s
Iteration  11: 2547407.535 ops/s
Iteration  12: 2545833.742 ops/s
Iteration  13: 2520274.288 ops/s
Iteration  14: 2546996.597 ops/s
Iteration  15: 2531422.181 ops/s
Iteration  16: 2509009.891 ops/s
Iteration  17: 2537358.985 ops/s
Iteration  18: 2519403.771 ops/s
Iteration  19: 2555313.647 ops/s
Iteration  20: 2499220.162 ops/s
Iteration  21: 2528605.102 ops/s
Iteration  22: 2498374.381 ops/s
Iteration  23: 2541146.063 ops/s
Iteration  24: 2558779.549 ops/s
Iteration  25: 2509763.077 ops/s
Iteration  26: 2535525.073 ops/s
Iteration  27: 2551536.899 ops/s
Iteration  28: 2529583.280 ops/s
Iteration  29: 2553840.788 ops/s
Iteration  30: 2526947.694 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_compareTo":
  2532293.492 ±(99.9%) 10633.949 ops/s [Average]
  (min, avg, max) = (2498374.381, 2532293.492, 2558779.549), stdev = 15916.395
  CI (99.9%): [2521659.543, 2542927.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_compareTo  thrpt   30  2532293.492 ± 10633.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63251078.522 ops/s
# Warmup Iteration   2: 119816316.692 ops/s
# Warmup Iteration   3: 114037989.195 ops/s
# Warmup Iteration   4: 131519922.614 ops/s
# Warmup Iteration   5: 134993544.402 ops/s
# Warmup Iteration   6: 134179625.383 ops/s
# Warmup Iteration   7: 134651686.762 ops/s
# Warmup Iteration   8: 135212492.789 ops/s
# Warmup Iteration   9: 135369032.088 ops/s
# Warmup Iteration  10: 134804262.412 ops/s
# Warmup Iteration  11: 135262159.945 ops/s
# Warmup Iteration  12: 134759334.369 ops/s
# Warmup Iteration  13: 135195604.023 ops/s
# Warmup Iteration  14: 134715261.437 ops/s
# Warmup Iteration  15: 133106418.456 ops/s
# Warmup Iteration  16: 133719539.540 ops/s
# Warmup Iteration  17: 133642295.333 ops/s
# Warmup Iteration  18: 134418387.295 ops/s
# Warmup Iteration  19: 132569731.536 ops/s
# Warmup Iteration  20: 131966073.746 ops/s
# Warmup Iteration  21: 134665551.319 ops/s
# Warmup Iteration  22: 134722445.235 ops/s
# Warmup Iteration  23: 133912678.436 ops/s
# Warmup Iteration  24: 134104082.848 ops/s
# Warmup Iteration  25: 133431890.322 ops/s
# Warmup Iteration  26: 134172529.860 ops/s
# Warmup Iteration  27: 132319210.481 ops/s
# Warmup Iteration  28: 132529780.543 ops/s
# Warmup Iteration  29: 134160859.405 ops/s
# Warmup Iteration  30: 134232589.869 ops/s
Iteration   1: 130470642.309 ops/s
Iteration   2: 132895636.223 ops/s
Iteration   3: 134614475.604 ops/s
Iteration   4: 132351875.654 ops/s
Iteration   5: 131442441.933 ops/s
Iteration   6: 132000869.805 ops/s
Iteration   7: 133450825.948 ops/s
Iteration   8: 133205942.955 ops/s
Iteration   9: 132076701.651 ops/s
Iteration  10: 132579954.709 ops/s
Iteration  11: 135162215.539 ops/s
Iteration  12: 135194793.521 ops/s
Iteration  13: 132812666.785 ops/s
Iteration  14: 130208182.801 ops/s
Iteration  15: 132933112.096 ops/s
Iteration  16: 133756061.265 ops/s
Iteration  17: 131107987.317 ops/s
Iteration  18: 134420877.436 ops/s
Iteration  19: 134979930.820 ops/s
Iteration  20: 133493969.687 ops/s
Iteration  21: 134580702.737 ops/s
Iteration  22: 134439488.513 ops/s
Iteration  23: 134571679.135 ops/s
Iteration  24: 133667728.761 ops/s
Iteration  25: 134914910.773 ops/s
Iteration  26: 134212579.305 ops/s
Iteration  27: 132452915.648 ops/s
Iteration  28: 130553911.874 ops/s
Iteration  29: 129673512.931 ops/s
Iteration  30: 133035528.249 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains":
  133042070.733 ±(99.9%) 1050643.028 ops/s [Average]
  (min, avg, max) = (129673512.931, 133042070.733, 135194793.521), stdev = 1572553.142
  CI (99.9%): [131991427.705, 134092713.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_contains  thrpt   30  133042070.733 ± 1050643.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16750684.167 ops/s
# Warmup Iteration   2: 33924309.597 ops/s
# Warmup Iteration   3: 27790159.223 ops/s
# Warmup Iteration   4: 33526463.866 ops/s
# Warmup Iteration   5: 33359463.172 ops/s
# Warmup Iteration   6: 33808611.599 ops/s
# Warmup Iteration   7: 33659266.444 ops/s
# Warmup Iteration   8: 33471265.180 ops/s
# Warmup Iteration   9: 33721153.286 ops/s
# Warmup Iteration  10: 33690263.795 ops/s
# Warmup Iteration  11: 33373451.606 ops/s
# Warmup Iteration  12: 32993736.869 ops/s
# Warmup Iteration  13: 33563020.457 ops/s
# Warmup Iteration  14: 33820894.266 ops/s
# Warmup Iteration  15: 33670231.918 ops/s
# Warmup Iteration  16: 33173292.487 ops/s
# Warmup Iteration  17: 33393934.643 ops/s
# Warmup Iteration  18: 33610729.450 ops/s
# Warmup Iteration  19: 33877927.341 ops/s
# Warmup Iteration  20: 33879768.087 ops/s
# Warmup Iteration  21: 33824381.465 ops/s
# Warmup Iteration  22: 33774222.112 ops/s
# Warmup Iteration  23: 33767506.647 ops/s
# Warmup Iteration  24: 33874934.967 ops/s
# Warmup Iteration  25: 33647700.690 ops/s
# Warmup Iteration  26: 33731023.679 ops/s
# Warmup Iteration  27: 32967752.715 ops/s
# Warmup Iteration  28: 33677619.118 ops/s
# Warmup Iteration  29: 33544236.109 ops/s
# Warmup Iteration  30: 33560809.135 ops/s
Iteration   1: 33603168.004 ops/s
Iteration   2: 33359640.736 ops/s
Iteration   3: 33556952.862 ops/s
Iteration   4: 33342436.799 ops/s
Iteration   5: 33207035.240 ops/s
Iteration   6: 33698940.028 ops/s
Iteration   7: 33146740.746 ops/s
Iteration   8: 33086022.094 ops/s
Iteration   9: 33316183.191 ops/s
Iteration  10: 33685874.556 ops/s
Iteration  11: 33326797.155 ops/s
Iteration  12: 33020517.368 ops/s
Iteration  13: 33372472.185 ops/s
Iteration  14: 33729450.263 ops/s
Iteration  15: 33796140.924 ops/s
Iteration  16: 33817310.616 ops/s
Iteration  17: 33720524.042 ops/s
Iteration  18: 32425000.872 ops/s
Iteration  19: 33697028.101 ops/s
Iteration  20: 33948966.349 ops/s
Iteration  21: 33725774.060 ops/s
Iteration  22: 33550632.814 ops/s
Iteration  23: 33733690.274 ops/s
Iteration  24: 33388387.507 ops/s
Iteration  25: 33563771.340 ops/s
Iteration  26: 33547230.929 ops/s
Iteration  27: 33108861.965 ops/s
Iteration  28: 33363192.092 ops/s
Iteration  29: 33740470.468 ops/s
Iteration  30: 33975048.123 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAll":
  33485142.057 ±(99.9%) 217933.749 ops/s [Average]
  (min, avg, max) = (32425000.872, 33485142.057, 33975048.123), stdev = 326193.000
  CI (99.9%): [33267208.308, 33703075.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAll  thrpt   30  33485142.057 ± 217933.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76210210.533 ops/s
# Warmup Iteration   2: 155755418.413 ops/s
# Warmup Iteration   3: 143430594.241 ops/s
# Warmup Iteration   4: 168489491.894 ops/s
# Warmup Iteration   5: 168693588.725 ops/s
# Warmup Iteration   6: 169951854.692 ops/s
# Warmup Iteration   7: 170548659.751 ops/s
# Warmup Iteration   8: 170052503.796 ops/s
# Warmup Iteration   9: 169494879.604 ops/s
# Warmup Iteration  10: 169552087.802 ops/s
# Warmup Iteration  11: 168503617.358 ops/s
# Warmup Iteration  12: 169302049.512 ops/s
# Warmup Iteration  13: 169491556.413 ops/s
# Warmup Iteration  14: 170354362.374 ops/s
# Warmup Iteration  15: 167906867.373 ops/s
# Warmup Iteration  16: 170188229.429 ops/s
# Warmup Iteration  17: 170921728.343 ops/s
# Warmup Iteration  18: 169142349.837 ops/s
# Warmup Iteration  19: 168547351.845 ops/s
# Warmup Iteration  20: 169714880.838 ops/s
# Warmup Iteration  21: 169663482.051 ops/s
# Warmup Iteration  22: 169586833.451 ops/s
# Warmup Iteration  23: 167230244.217 ops/s
# Warmup Iteration  24: 168473773.921 ops/s
# Warmup Iteration  25: 168364068.390 ops/s
# Warmup Iteration  26: 168346782.509 ops/s
# Warmup Iteration  27: 164857845.461 ops/s
# Warmup Iteration  28: 167415772.597 ops/s
# Warmup Iteration  29: 166004679.509 ops/s
# Warmup Iteration  30: 169422172.060 ops/s
Iteration   1: 170739106.989 ops/s
Iteration   2: 168317620.169 ops/s
Iteration   3: 164075543.872 ops/s
Iteration   4: 164357131.267 ops/s
Iteration   5: 169201104.282 ops/s
Iteration   6: 169303926.449 ops/s
Iteration   7: 165995157.256 ops/s
Iteration   8: 166578640.879 ops/s
Iteration   9: 167398479.836 ops/s
Iteration  10: 170626964.384 ops/s
Iteration  11: 170402285.053 ops/s
Iteration  12: 169262032.142 ops/s
Iteration  13: 166119224.930 ops/s
Iteration  14: 168666068.279 ops/s
Iteration  15: 169959721.008 ops/s
Iteration  16: 170704305.121 ops/s
Iteration  17: 169855690.881 ops/s
Iteration  18: 169084633.511 ops/s
Iteration  19: 169271350.758 ops/s
Iteration  20: 169885768.976 ops/s
Iteration  21: 170458538.095 ops/s
Iteration  22: 169531687.769 ops/s
Iteration  23: 170322812.767 ops/s
Iteration  24: 170793332.960 ops/s
Iteration  25: 169532220.973 ops/s
Iteration  26: 169690818.482 ops/s
Iteration  27: 169306240.630 ops/s
Iteration  28: 169859452.318 ops/s
Iteration  29: 169671082.684 ops/s
Iteration  30: 169832633.730 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllArray":
  168960119.215 ±(99.9%) 1212208.231 ops/s [Average]
  (min, avg, max) = (164075543.872, 168960119.215, 170793332.960), stdev = 1814376.351
  CI (99.9%): [167747910.984, 170172327.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  168960119.215 ± 1212208.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16747864.399 ops/s
# Warmup Iteration   2: 34135397.052 ops/s
# Warmup Iteration   3: 28727257.410 ops/s
# Warmup Iteration   4: 33873363.821 ops/s
# Warmup Iteration   5: 33955631.428 ops/s
# Warmup Iteration   6: 33407903.698 ops/s
# Warmup Iteration   7: 33161710.639 ops/s
# Warmup Iteration   8: 33612559.017 ops/s
# Warmup Iteration   9: 33939919.655 ops/s
# Warmup Iteration  10: 33945969.278 ops/s
# Warmup Iteration  11: 33917588.221 ops/s
# Warmup Iteration  12: 33862285.232 ops/s
# Warmup Iteration  13: 33991114.626 ops/s
# Warmup Iteration  14: 33856173.635 ops/s
# Warmup Iteration  15: 33886449.885 ops/s
# Warmup Iteration  16: 33861719.652 ops/s
# Warmup Iteration  17: 33746703.430 ops/s
# Warmup Iteration  18: 33647232.472 ops/s
# Warmup Iteration  19: 33513669.264 ops/s
# Warmup Iteration  20: 33774081.282 ops/s
# Warmup Iteration  21: 33914138.930 ops/s
# Warmup Iteration  22: 33097123.210 ops/s
# Warmup Iteration  23: 33998781.249 ops/s
# Warmup Iteration  24: 34031382.208 ops/s
# Warmup Iteration  25: 33646111.954 ops/s
# Warmup Iteration  26: 33736096.638 ops/s
# Warmup Iteration  27: 33904583.781 ops/s
# Warmup Iteration  28: 33726922.923 ops/s
# Warmup Iteration  29: 33728534.399 ops/s
# Warmup Iteration  30: 33022224.373 ops/s
Iteration   1: 33058948.196 ops/s
Iteration   2: 32758774.045 ops/s
Iteration   3: 34006426.225 ops/s
Iteration   4: 33912608.357 ops/s
Iteration   5: 34059417.926 ops/s
Iteration   6: 33528436.364 ops/s
Iteration   7: 33887478.803 ops/s
Iteration   8: 33659414.289 ops/s
Iteration   9: 33874798.385 ops/s
Iteration  10: 33766095.004 ops/s
Iteration  11: 33781190.854 ops/s
Iteration  12: 33995197.071 ops/s
Iteration  13: 33922960.639 ops/s
Iteration  14: 33887305.360 ops/s
Iteration  15: 34047060.537 ops/s
Iteration  16: 34030782.414 ops/s
Iteration  17: 33553962.943 ops/s
Iteration  18: 33854989.813 ops/s
Iteration  19: 33932217.732 ops/s
Iteration  20: 33866430.664 ops/s
Iteration  21: 33939380.332 ops/s
Iteration  22: 33947567.133 ops/s
Iteration  23: 33818712.861 ops/s
Iteration  24: 33834211.642 ops/s
Iteration  25: 34067270.920 ops/s
Iteration  26: 33972366.292 ops/s
Iteration  27: 33760255.632 ops/s
Iteration  28: 33721504.393 ops/s
Iteration  29: 33803101.912 ops/s
Iteration  30: 33968946.502 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllIterable":
  33807260.441 ±(99.9%) 188290.992 ops/s [Average]
  (min, avg, max) = (32758774.045, 33807260.441, 34067270.920), stdev = 281825.114
  CI (99.9%): [33618969.450, 33995551.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  33807260.441 ± 188290.992  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 850141.582 ops/s
# Warmup Iteration   2: 882297.745 ops/s
# Warmup Iteration   3: 1036758.887 ops/s
# Warmup Iteration   4: 1103497.237 ops/s
# Warmup Iteration   5: 1096454.857 ops/s
# Warmup Iteration   6: 1093391.863 ops/s
# Warmup Iteration   7: 1101418.991 ops/s
# Warmup Iteration   8: 1101615.988 ops/s
# Warmup Iteration   9: 1107171.841 ops/s
# Warmup Iteration  10: 1088052.373 ops/s
# Warmup Iteration  11: 1075542.378 ops/s
# Warmup Iteration  12: 1089075.296 ops/s
# Warmup Iteration  13: 1086684.566 ops/s
# Warmup Iteration  14: 904871.247 ops/s
# Warmup Iteration  15: 1080575.885 ops/s
# Warmup Iteration  16: 1074596.816 ops/s
# Warmup Iteration  17: 1176838.488 ops/s
# Warmup Iteration  18: 1153250.146 ops/s
# Warmup Iteration  19: 1168526.439 ops/s
# Warmup Iteration  20: 1182477.389 ops/s
# Warmup Iteration  21: 1181965.043 ops/s
# Warmup Iteration  22: 1172058.020 ops/s
# Warmup Iteration  23: 1181365.845 ops/s
# Warmup Iteration  24: 1179044.208 ops/s
# Warmup Iteration  25: 1175935.100 ops/s
# Warmup Iteration  26: 1157942.395 ops/s
# Warmup Iteration  27: 1158001.002 ops/s
# Warmup Iteration  28: 1171372.553 ops/s
# Warmup Iteration  29: 1167745.679 ops/s
# Warmup Iteration  30: 1180170.800 ops/s
Iteration   1: 1173869.680 ops/s
Iteration   2: 1182226.339 ops/s
Iteration   3: 1178893.931 ops/s
Iteration   4: 1182590.164 ops/s
Iteration   5: 1182918.850 ops/s
Iteration   6: 1172464.683 ops/s
Iteration   7: 1175677.507 ops/s
Iteration   8: 1164050.751 ops/s
Iteration   9: 1177778.894 ops/s
Iteration  10: 1173251.969 ops/s
Iteration  11: 1181699.609 ops/s
Iteration  12: 1177115.015 ops/s
Iteration  13: 1170975.776 ops/s
Iteration  14: 1184265.757 ops/s
Iteration  15: 1168087.904 ops/s
Iteration  16: 1172401.172 ops/s
Iteration  17: 1181660.114 ops/s
Iteration  18: 1181009.279 ops/s
Iteration  19: 1186341.306 ops/s
Iteration  20: 1178600.612 ops/s
Iteration  21: 1174419.512 ops/s
Iteration  22: 1181238.024 ops/s
Iteration  23: 1170374.282 ops/s
Iteration  24: 1175817.768 ops/s
Iteration  25: 1175437.791 ops/s
Iteration  26: 1175910.170 ops/s
Iteration  27: 1177275.129 ops/s
Iteration  28: 1184630.205 ops/s
Iteration  29: 1182170.303 ops/s
Iteration  30: 1184718.786 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_contains_null":
  1177595.710 ±(99.9%) 3635.172 ops/s [Average]
  (min, avg, max) = (1164050.751, 1177595.710, 1186341.306), stdev = 5440.954
  CI (99.9%): [1173960.538, 1181230.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_contains_null  thrpt   30  1177595.710 ± 3635.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2219780.071 ops/s
# Warmup Iteration   2: 4358462.007 ops/s
# Warmup Iteration   3: 4811301.826 ops/s
# Warmup Iteration   4: 4818234.243 ops/s
# Warmup Iteration   5: 3984906.393 ops/s
# Warmup Iteration   6: 4821371.722 ops/s
# Warmup Iteration   7: 4831126.140 ops/s
# Warmup Iteration   8: 4831500.931 ops/s
# Warmup Iteration   9: 4833583.785 ops/s
# Warmup Iteration  10: 4813882.925 ops/s
# Warmup Iteration  11: 4822941.611 ops/s
# Warmup Iteration  12: 4824070.859 ops/s
# Warmup Iteration  13: 4824556.109 ops/s
# Warmup Iteration  14: 4851271.476 ops/s
# Warmup Iteration  15: 4873086.367 ops/s
# Warmup Iteration  16: 4876419.882 ops/s
# Warmup Iteration  17: 4865592.396 ops/s
# Warmup Iteration  18: 4867537.374 ops/s
# Warmup Iteration  19: 4866811.464 ops/s
# Warmup Iteration  20: 4895084.909 ops/s
# Warmup Iteration  21: 4863550.091 ops/s
# Warmup Iteration  22: 4890566.391 ops/s
# Warmup Iteration  23: 4721594.006 ops/s
# Warmup Iteration  24: 4871366.486 ops/s
# Warmup Iteration  25: 4874050.550 ops/s
# Warmup Iteration  26: 4880035.466 ops/s
# Warmup Iteration  27: 4880407.142 ops/s
# Warmup Iteration  28: 4872521.619 ops/s
# Warmup Iteration  29: 4893479.737 ops/s
# Warmup Iteration  30: 4767506.232 ops/s
Iteration   1: 4749652.796 ops/s
Iteration   2: 4907725.050 ops/s
Iteration   3: 4879212.385 ops/s
Iteration   4: 4712965.753 ops/s
Iteration   5: 4727483.206 ops/s
Iteration   6: 4820626.400 ops/s
Iteration   7: 4765575.268 ops/s
Iteration   8: 4862538.101 ops/s
Iteration   9: 4856242.110 ops/s
Iteration  10: 4873663.218 ops/s
Iteration  11: 4864198.512 ops/s
Iteration  12: 4898518.427 ops/s
Iteration  13: 4920969.094 ops/s
Iteration  14: 4927724.982 ops/s
Iteration  15: 4909472.688 ops/s
Iteration  16: 4769007.098 ops/s
Iteration  17: 4753243.090 ops/s
Iteration  18: 4886685.526 ops/s
Iteration  19: 4868790.569 ops/s
Iteration  20: 4862505.340 ops/s
Iteration  21: 4829190.984 ops/s
Iteration  22: 4878643.817 ops/s
Iteration  23: 4891088.203 ops/s
Iteration  24: 4884593.356 ops/s
Iteration  25: 4886853.485 ops/s
Iteration  26: 4913636.596 ops/s
Iteration  27: 4799763.296 ops/s
Iteration  28: 4763423.190 ops/s
Iteration  29: 4884996.377 ops/s
Iteration  30: 4848053.373 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_corresponds":
  4846568.076 ±(99.9%) 41553.308 ops/s [Average]
  (min, avg, max) = (4712965.753, 4846568.076, 4927724.982), stdev = 62195.040
  CI (99.9%): [4805014.768, 4888121.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_corresponds  thrpt   30  4846568.076 ± 41553.308  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158014480.932 ops/s
# Warmup Iteration   2: 305128197.077 ops/s
# Warmup Iteration   3: 267004101.766 ops/s
# Warmup Iteration   4: 313771012.400 ops/s
# Warmup Iteration   5: 313972471.163 ops/s
# Warmup Iteration   6: 313927149.980 ops/s
# Warmup Iteration   7: 313726318.620 ops/s
# Warmup Iteration   8: 309494125.444 ops/s
# Warmup Iteration   9: 309977871.625 ops/s
# Warmup Iteration  10: 309648235.277 ops/s
# Warmup Iteration  11: 314777373.268 ops/s
# Warmup Iteration  12: 312268485.847 ops/s
# Warmup Iteration  13: 311839725.923 ops/s
# Warmup Iteration  14: 314281936.769 ops/s
# Warmup Iteration  15: 311045729.476 ops/s
# Warmup Iteration  16: 314384388.369 ops/s
# Warmup Iteration  17: 314327149.174 ops/s
# Warmup Iteration  18: 313572265.232 ops/s
# Warmup Iteration  19: 314666374.505 ops/s
# Warmup Iteration  20: 313399322.276 ops/s
# Warmup Iteration  21: 308713563.602 ops/s
# Warmup Iteration  22: 305014816.483 ops/s
# Warmup Iteration  23: 304971320.637 ops/s
# Warmup Iteration  24: 311752959.747 ops/s
# Warmup Iteration  25: 312834786.512 ops/s
# Warmup Iteration  26: 312968671.101 ops/s
# Warmup Iteration  27: 313280568.602 ops/s
# Warmup Iteration  28: 312442535.949 ops/s
# Warmup Iteration  29: 311185065.617 ops/s
# Warmup Iteration  30: 309152627.811 ops/s
Iteration   1: 311943270.580 ops/s
Iteration   2: 313192968.405 ops/s
Iteration   3: 316330049.395 ops/s
Iteration   4: 310289411.961 ops/s
Iteration   5: 306188318.653 ops/s
Iteration   6: 305898401.194 ops/s
Iteration   7: 310188317.736 ops/s
Iteration   8: 310931387.988 ops/s
Iteration   9: 300897751.651 ops/s
Iteration  10: 311261920.410 ops/s
Iteration  11: 313863344.566 ops/s
Iteration  12: 311056447.468 ops/s
Iteration  13: 306001584.324 ops/s
Iteration  14: 315544477.956 ops/s
Iteration  15: 313527418.247 ops/s
Iteration  16: 314728029.118 ops/s
Iteration  17: 306734574.695 ops/s
Iteration  18: 312508326.075 ops/s
Iteration  19: 313591142.269 ops/s
Iteration  20: 309432552.903 ops/s
Iteration  21: 305415127.010 ops/s
Iteration  22: 311183800.106 ops/s
Iteration  23: 314017583.387 ops/s
Iteration  24: 312426349.877 ops/s
Iteration  25: 302174420.017 ops/s
Iteration  26: 305350367.325 ops/s
Iteration  27: 309289287.380 ops/s
Iteration  28: 313621464.098 ops/s
Iteration  29: 312007266.080 ops/s
Iteration  30: 311119785.381 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_count":
  310357171.542 ±(99.9%) 2605221.940 ops/s [Average]
  (min, avg, max) = (300897751.651, 310357171.542, 316330049.395), stdev = 3899373.850
  CI (99.9%): [307751949.602, 312962393.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_count  thrpt   30  310357171.542 ± 2605221.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11060710.967 ops/s
# Warmup Iteration   2: 20989834.681 ops/s
# Warmup Iteration   3: 24550830.614 ops/s
# Warmup Iteration   4: 24544686.257 ops/s
# Warmup Iteration   5: 24443915.564 ops/s
# Warmup Iteration   6: 24737366.203 ops/s
# Warmup Iteration   7: 24068099.477 ops/s
# Warmup Iteration   8: 24604402.927 ops/s
# Warmup Iteration   9: 24096660.865 ops/s
# Warmup Iteration  10: 24695212.094 ops/s
# Warmup Iteration  11: 24784851.824 ops/s
# Warmup Iteration  12: 24582608.908 ops/s
# Warmup Iteration  13: 24587788.885 ops/s
# Warmup Iteration  14: 24684487.956 ops/s
# Warmup Iteration  15: 24723171.103 ops/s
# Warmup Iteration  16: 24370263.664 ops/s
# Warmup Iteration  17: 24265880.052 ops/s
# Warmup Iteration  18: 24134503.203 ops/s
# Warmup Iteration  19: 24099071.282 ops/s
# Warmup Iteration  20: 24356252.248 ops/s
# Warmup Iteration  21: 23945859.930 ops/s
# Warmup Iteration  22: 23942773.121 ops/s
# Warmup Iteration  23: 24263056.869 ops/s
# Warmup Iteration  24: 23964585.143 ops/s
# Warmup Iteration  25: 24157687.526 ops/s
# Warmup Iteration  26: 24330708.113 ops/s
# Warmup Iteration  27: 24251775.615 ops/s
# Warmup Iteration  28: 24297832.839 ops/s
# Warmup Iteration  29: 23970859.397 ops/s
# Warmup Iteration  30: 23900257.180 ops/s
Iteration   1: 24249681.796 ops/s
Iteration   2: 24056369.834 ops/s
Iteration   3: 24303222.241 ops/s
Iteration   4: 24343910.162 ops/s
Iteration   5: 24380315.393 ops/s
Iteration   6: 24250227.264 ops/s
Iteration   7: 23894895.125 ops/s
Iteration   8: 23468798.581 ops/s
Iteration   9: 23730031.472 ops/s
Iteration  10: 23918273.333 ops/s
Iteration  11: 24221987.868 ops/s
Iteration  12: 24021674.203 ops/s
Iteration  13: 24408303.535 ops/s
Iteration  14: 24290634.875 ops/s
Iteration  15: 24315163.691 ops/s
Iteration  16: 24161810.463 ops/s
Iteration  17: 24097523.378 ops/s
Iteration  18: 24123738.060 ops/s
Iteration  19: 24348053.503 ops/s
Iteration  20: 24483490.645 ops/s
Iteration  21: 24475814.674 ops/s
Iteration  22: 24441662.000 ops/s
Iteration  23: 24159012.637 ops/s
Iteration  24: 24142448.773 ops/s
Iteration  25: 24311062.953 ops/s
Iteration  26: 24484354.400 ops/s
Iteration  27: 24261080.906 ops/s
Iteration  28: 24447555.062 ops/s
Iteration  29: 24394235.402 ops/s
Iteration  30: 24406575.957 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countBy":
  24219730.273 ±(99.9%) 156985.383 ops/s [Average]
  (min, avg, max) = (23468798.581, 24219730.273, 24484354.400), stdev = 234968.349
  CI (99.9%): [24062744.889, 24376715.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_countBy  thrpt   30  24219730.273 ± 156985.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148460134.279 ops/s
# Warmup Iteration   2: 299099175.446 ops/s
# Warmup Iteration   3: 266134388.965 ops/s
# Warmup Iteration   4: 306008736.696 ops/s
# Warmup Iteration   5: 311938420.009 ops/s
# Warmup Iteration   6: 307056952.628 ops/s
# Warmup Iteration   7: 310966195.776 ops/s
# Warmup Iteration   8: 308571476.795 ops/s
# Warmup Iteration   9: 312113105.504 ops/s
# Warmup Iteration  10: 311329491.726 ops/s
# Warmup Iteration  11: 316756909.404 ops/s
# Warmup Iteration  12: 315237534.606 ops/s
# Warmup Iteration  13: 313630809.894 ops/s
# Warmup Iteration  14: 313653378.041 ops/s
# Warmup Iteration  15: 316637643.351 ops/s
# Warmup Iteration  16: 308705766.948 ops/s
# Warmup Iteration  17: 311509310.080 ops/s
# Warmup Iteration  18: 315151869.303 ops/s
# Warmup Iteration  19: 314200825.874 ops/s
# Warmup Iteration  20: 310914291.784 ops/s
# Warmup Iteration  21: 315945848.188 ops/s
# Warmup Iteration  22: 310505307.183 ops/s
# Warmup Iteration  23: 313441404.772 ops/s
# Warmup Iteration  24: 306427926.370 ops/s
# Warmup Iteration  25: 313397816.276 ops/s
# Warmup Iteration  26: 313566310.601 ops/s
# Warmup Iteration  27: 314860397.375 ops/s
# Warmup Iteration  28: 314075746.483 ops/s
# Warmup Iteration  29: 312654380.695 ops/s
# Warmup Iteration  30: 308392694.541 ops/s
Iteration   1: 313734000.426 ops/s
Iteration   2: 313246014.009 ops/s
Iteration   3: 310249186.121 ops/s
Iteration   4: 313447012.112 ops/s
Iteration   5: 313597091.936 ops/s
Iteration   6: 314370144.048 ops/s
Iteration   7: 314513294.196 ops/s
Iteration   8: 314151240.984 ops/s
Iteration   9: 314614784.525 ops/s
Iteration  10: 313706615.263 ops/s
Iteration  11: 312439288.398 ops/s
Iteration  12: 310350529.088 ops/s
Iteration  13: 314842103.360 ops/s
Iteration  14: 312483634.162 ops/s
Iteration  15: 314425903.564 ops/s
Iteration  16: 316689610.814 ops/s
Iteration  17: 311258227.958 ops/s
Iteration  18: 315118818.992 ops/s
Iteration  19: 315429047.962 ops/s
Iteration  20: 312547830.624 ops/s
Iteration  21: 308597876.754 ops/s
Iteration  22: 314638216.206 ops/s
Iteration  23: 312215437.104 ops/s
Iteration  24: 312266244.469 ops/s
Iteration  25: 311847774.634 ops/s
Iteration  26: 316072676.419 ops/s
Iteration  27: 315029265.271 ops/s
Iteration  28: 316845672.076 ops/s
Iteration  29: 314700583.182 ops/s
Iteration  30: 314449224.528 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach":
  313595911.639 ±(99.9%) 1270213.929 ops/s [Average]
  (min, avg, max) = (308597876.754, 313595911.639, 316845672.076), stdev = 1901196.556
  CI (99.9%): [312325697.710, 314866125.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach  thrpt   30  313595911.639 ± 1270213.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25646607.563 ops/s
# Warmup Iteration   2: 44523242.098 ops/s
# Warmup Iteration   3: 50109493.860 ops/s
# Warmup Iteration   4: 50171306.871 ops/s
# Warmup Iteration   5: 49963696.932 ops/s
# Warmup Iteration   6: 49955685.909 ops/s
# Warmup Iteration   7: 49919037.764 ops/s
# Warmup Iteration   8: 49735310.636 ops/s
# Warmup Iteration   9: 49716259.869 ops/s
# Warmup Iteration  10: 49985703.359 ops/s
# Warmup Iteration  11: 49891461.511 ops/s
# Warmup Iteration  12: 49837177.395 ops/s
# Warmup Iteration  13: 50134986.244 ops/s
# Warmup Iteration  14: 49946777.367 ops/s
# Warmup Iteration  15: 49972828.891 ops/s
# Warmup Iteration  16: 49978452.671 ops/s
# Warmup Iteration  17: 50028587.428 ops/s
# Warmup Iteration  18: 50018301.970 ops/s
# Warmup Iteration  19: 50170788.358 ops/s
# Warmup Iteration  20: 49768183.443 ops/s
# Warmup Iteration  21: 49952714.702 ops/s
# Warmup Iteration  22: 49933217.579 ops/s
# Warmup Iteration  23: 49849837.370 ops/s
# Warmup Iteration  24: 49730631.793 ops/s
# Warmup Iteration  25: 49998558.649 ops/s
# Warmup Iteration  26: 49963368.243 ops/s
# Warmup Iteration  27: 49818271.976 ops/s
# Warmup Iteration  28: 50267235.010 ops/s
# Warmup Iteration  29: 50263299.725 ops/s
# Warmup Iteration  30: 50278871.382 ops/s
Iteration   1: 49868707.218 ops/s
Iteration   2: 50393685.110 ops/s
Iteration   3: 50112529.220 ops/s
Iteration   4: 50216695.631 ops/s
Iteration   5: 50426715.521 ops/s
Iteration   6: 50267063.414 ops/s
Iteration   7: 50123916.885 ops/s
Iteration   8: 50022987.235 ops/s
Iteration   9: 49950632.032 ops/s
Iteration  10: 50148908.190 ops/s
Iteration  11: 50118635.557 ops/s
Iteration  12: 50023745.750 ops/s
Iteration  13: 50012975.895 ops/s
Iteration  14: 49804718.908 ops/s
Iteration  15: 49832214.243 ops/s
Iteration  16: 49804462.967 ops/s
Iteration  17: 50187320.721 ops/s
Iteration  18: 50017606.268 ops/s
Iteration  19: 50250165.050 ops/s
Iteration  20: 50062918.421 ops/s
Iteration  21: 50172225.150 ops/s
Iteration  22: 50134677.544 ops/s
Iteration  23: 50142106.339 ops/s
Iteration  24: 49832825.490 ops/s
Iteration  25: 49914797.619 ops/s
Iteration  26: 50015855.188 ops/s
Iteration  27: 49463641.490 ops/s
Iteration  28: 50195454.214 ops/s
Iteration  29: 50011869.808 ops/s
Iteration  30: 49868573.626 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach_target":
  50046621.023 ±(99.9%) 131799.357 ops/s [Average]
  (min, avg, max) = (49463641.490, 50046621.023, 50426715.521), stdev = 197271.087
  CI (99.9%): [49914821.667, 50178420.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_countByEach_target  thrpt   30  50046621.023 ± 131799.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11437267.284 ops/s
# Warmup Iteration   2: 21379622.562 ops/s
# Warmup Iteration   3: 24926229.754 ops/s
# Warmup Iteration   4: 24851285.021 ops/s
# Warmup Iteration   5: 24784185.530 ops/s
# Warmup Iteration   6: 24860114.324 ops/s
# Warmup Iteration   7: 24903439.710 ops/s
# Warmup Iteration   8: 24693418.718 ops/s
# Warmup Iteration   9: 24734215.948 ops/s
# Warmup Iteration  10: 24785308.773 ops/s
# Warmup Iteration  11: 24736299.831 ops/s
# Warmup Iteration  12: 24809796.182 ops/s
# Warmup Iteration  13: 24829105.141 ops/s
# Warmup Iteration  14: 24764998.698 ops/s
# Warmup Iteration  15: 24829462.474 ops/s
# Warmup Iteration  16: 24727779.652 ops/s
# Warmup Iteration  17: 24802696.731 ops/s
# Warmup Iteration  18: 24670749.161 ops/s
# Warmup Iteration  19: 24769300.454 ops/s
# Warmup Iteration  20: 24700270.902 ops/s
# Warmup Iteration  21: 24803603.460 ops/s
# Warmup Iteration  22: 24646050.969 ops/s
# Warmup Iteration  23: 24908233.075 ops/s
# Warmup Iteration  24: 24763178.368 ops/s
# Warmup Iteration  25: 24631433.489 ops/s
# Warmup Iteration  26: 24809773.153 ops/s
# Warmup Iteration  27: 24658205.837 ops/s
# Warmup Iteration  28: 24622904.140 ops/s
# Warmup Iteration  29: 24225900.904 ops/s
# Warmup Iteration  30: 24800304.623 ops/s
Iteration   1: 24855670.543 ops/s
Iteration   2: 24776392.648 ops/s
Iteration   3: 24732466.914 ops/s
Iteration   4: 24742799.130 ops/s
Iteration   5: 24587666.506 ops/s
Iteration   6: 24786547.266 ops/s
Iteration   7: 24686501.601 ops/s
Iteration   8: 24757377.672 ops/s
Iteration   9: 24909546.629 ops/s
Iteration  10: 24195697.731 ops/s
Iteration  11: 24694543.410 ops/s
Iteration  12: 24830955.257 ops/s
Iteration  13: 24793215.040 ops/s
Iteration  14: 24794930.740 ops/s
Iteration  15: 24898654.452 ops/s
Iteration  16: 24935598.018 ops/s
Iteration  17: 24841140.001 ops/s
Iteration  18: 24694085.341 ops/s
Iteration  19: 24919217.073 ops/s
Iteration  20: 24631449.376 ops/s
Iteration  21: 24733510.741 ops/s
Iteration  22: 24871911.525 ops/s
Iteration  23: 24877545.573 ops/s
Iteration  24: 24683057.365 ops/s
Iteration  25: 24407941.583 ops/s
Iteration  26: 24844944.529 ops/s
Iteration  27: 24799568.507 ops/s
Iteration  28: 24827791.088 ops/s
Iteration  29: 24844043.762 ops/s
Iteration  30: 24717178.804 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countByWith":
  24755731.628 ±(99.9%) 102324.350 ops/s [Average]
  (min, avg, max) = (24195697.731, 24755731.628, 24935598.018), stdev = 153154.282
  CI (99.9%): [24653407.277, 24858055.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_countByWith  thrpt   30  24755731.628 ± 102324.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158202890.648 ops/s
# Warmup Iteration   2: 301311359.325 ops/s
# Warmup Iteration   3: 263901764.195 ops/s
# Warmup Iteration   4: 312751789.649 ops/s
# Warmup Iteration   5: 313310093.319 ops/s
# Warmup Iteration   6: 312377320.079 ops/s
# Warmup Iteration   7: 313957769.258 ops/s
# Warmup Iteration   8: 313888450.365 ops/s
# Warmup Iteration   9: 315367674.927 ops/s
# Warmup Iteration  10: 313052857.221 ops/s
# Warmup Iteration  11: 313831302.629 ops/s
# Warmup Iteration  12: 314262260.916 ops/s
# Warmup Iteration  13: 313815634.125 ops/s
# Warmup Iteration  14: 314357435.537 ops/s
# Warmup Iteration  15: 314094048.853 ops/s
# Warmup Iteration  16: 313259297.278 ops/s
# Warmup Iteration  17: 314366105.058 ops/s
# Warmup Iteration  18: 314361449.239 ops/s
# Warmup Iteration  19: 314903855.482 ops/s
# Warmup Iteration  20: 313585294.603 ops/s
# Warmup Iteration  21: 314433193.021 ops/s
# Warmup Iteration  22: 311463190.340 ops/s
# Warmup Iteration  23: 312376713.712 ops/s
# Warmup Iteration  24: 313657825.067 ops/s
# Warmup Iteration  25: 314129198.514 ops/s
# Warmup Iteration  26: 314922601.549 ops/s
# Warmup Iteration  27: 314826442.370 ops/s
# Warmup Iteration  28: 313458098.880 ops/s
# Warmup Iteration  29: 314781025.530 ops/s
# Warmup Iteration  30: 313649398.481 ops/s
Iteration   1: 313923563.461 ops/s
Iteration   2: 314461061.978 ops/s
Iteration   3: 313472811.629 ops/s
Iteration   4: 314108373.706 ops/s
Iteration   5: 312829189.623 ops/s
Iteration   6: 313026799.921 ops/s
Iteration   7: 313463750.769 ops/s
Iteration   8: 310294287.105 ops/s
Iteration   9: 310787527.118 ops/s
Iteration  10: 312001756.084 ops/s
Iteration  11: 314055301.735 ops/s
Iteration  12: 315484202.321 ops/s
Iteration  13: 312137365.380 ops/s
Iteration  14: 316125924.050 ops/s
Iteration  15: 314095662.605 ops/s
Iteration  16: 315381608.018 ops/s
Iteration  17: 314337189.565 ops/s
Iteration  18: 315274147.044 ops/s
Iteration  19: 312588582.649 ops/s
Iteration  20: 315118211.389 ops/s
Iteration  21: 315347280.560 ops/s
Iteration  22: 314425120.183 ops/s
Iteration  23: 314257922.265 ops/s
Iteration  24: 315167736.002 ops/s
Iteration  25: 314371525.118 ops/s
Iteration  26: 315082152.498 ops/s
Iteration  27: 312981316.780 ops/s
Iteration  28: 314987393.792 ops/s
Iteration  29: 314332932.860 ops/s
Iteration  30: 314017860.168 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_countWith":
  313931285.213 ±(99.9%) 919831.594 ops/s [Average]
  (min, avg, max) = (310294287.105, 313931285.213, 316125924.050), stdev = 1376760.731
  CI (99.9%): [313011453.619, 314851116.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_countWith  thrpt   30  313931285.213 ± 919831.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65144869.704 ops/s
# Warmup Iteration   2: 121809498.803 ops/s
# Warmup Iteration   3: 113902250.008 ops/s
# Warmup Iteration   4: 133768626.387 ops/s
# Warmup Iteration   5: 133844288.946 ops/s
# Warmup Iteration   6: 133372978.329 ops/s
# Warmup Iteration   7: 133458118.347 ops/s
# Warmup Iteration   8: 133262626.471 ops/s
# Warmup Iteration   9: 133934563.551 ops/s
# Warmup Iteration  10: 133646744.769 ops/s
# Warmup Iteration  11: 133542612.093 ops/s
# Warmup Iteration  12: 133892041.706 ops/s
# Warmup Iteration  13: 134271615.650 ops/s
# Warmup Iteration  14: 134128518.257 ops/s
# Warmup Iteration  15: 133832461.942 ops/s
# Warmup Iteration  16: 133774972.670 ops/s
# Warmup Iteration  17: 129718712.314 ops/s
# Warmup Iteration  18: 128515407.248 ops/s
# Warmup Iteration  19: 128575058.457 ops/s
# Warmup Iteration  20: 129700113.288 ops/s
# Warmup Iteration  21: 128276998.182 ops/s
# Warmup Iteration  22: 128889194.458 ops/s
# Warmup Iteration  23: 128621676.818 ops/s
# Warmup Iteration  24: 128938121.072 ops/s
# Warmup Iteration  25: 129430459.545 ops/s
# Warmup Iteration  26: 130486713.520 ops/s
# Warmup Iteration  27: 128977166.589 ops/s
# Warmup Iteration  28: 128566626.602 ops/s
# Warmup Iteration  29: 127556822.469 ops/s
# Warmup Iteration  30: 128944956.960 ops/s
Iteration   1: 128701483.563 ops/s
Iteration   2: 128630012.333 ops/s
Iteration   3: 127538669.506 ops/s
Iteration   4: 128141923.506 ops/s
Iteration   5: 128960790.100 ops/s
Iteration   6: 128610592.341 ops/s
Iteration   7: 130091986.988 ops/s
Iteration   8: 130176820.218 ops/s
Iteration   9: 130287109.962 ops/s
Iteration  10: 128569392.405 ops/s
Iteration  11: 128996072.611 ops/s
Iteration  12: 129298464.271 ops/s
Iteration  13: 128879610.929 ops/s
Iteration  14: 128635212.561 ops/s
Iteration  15: 129156239.239 ops/s
Iteration  16: 130795115.456 ops/s
Iteration  17: 128223067.651 ops/s
Iteration  18: 128702505.619 ops/s
Iteration  19: 128352967.786 ops/s
Iteration  20: 128575949.254 ops/s
Iteration  21: 127890104.794 ops/s
Iteration  22: 128892355.828 ops/s
Iteration  23: 130040561.869 ops/s
Iteration  24: 128291487.195 ops/s
Iteration  25: 128311762.429 ops/s
Iteration  26: 128956749.996 ops/s
Iteration  27: 128736002.896 ops/s
Iteration  28: 128344624.852 ops/s
Iteration  29: 127314037.246 ops/s
Iteration  30: 128963803.075 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detect":
  128835515.883 ±(99.9%) 530437.183 ops/s [Average]
  (min, avg, max) = (127314037.246, 128835515.883, 130795115.456), stdev = 793933.465
  CI (99.9%): [128305078.699, 129365953.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detect  thrpt   30  128835515.883 ± 530437.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160127709.369 ops/s
# Warmup Iteration   2: 303860767.977 ops/s
# Warmup Iteration   3: 271241408.576 ops/s
# Warmup Iteration   4: 317001667.128 ops/s
# Warmup Iteration   5: 313005046.339 ops/s
# Warmup Iteration   6: 314540061.326 ops/s
# Warmup Iteration   7: 317174162.161 ops/s
# Warmup Iteration   8: 313681612.919 ops/s
# Warmup Iteration   9: 314922798.220 ops/s
# Warmup Iteration  10: 315253484.106 ops/s
# Warmup Iteration  11: 314016511.299 ops/s
# Warmup Iteration  12: 312704755.154 ops/s
# Warmup Iteration  13: 310031265.992 ops/s
# Warmup Iteration  14: 316292732.592 ops/s
# Warmup Iteration  15: 315477952.379 ops/s
# Warmup Iteration  16: 313143054.981 ops/s
# Warmup Iteration  17: 311389151.134 ops/s
# Warmup Iteration  18: 313595008.876 ops/s
# Warmup Iteration  19: 314425359.222 ops/s
# Warmup Iteration  20: 313114440.998 ops/s
# Warmup Iteration  21: 314729968.814 ops/s
# Warmup Iteration  22: 312283702.058 ops/s
# Warmup Iteration  23: 313018871.515 ops/s
# Warmup Iteration  24: 314979312.943 ops/s
# Warmup Iteration  25: 316639516.537 ops/s
# Warmup Iteration  26: 313585791.510 ops/s
# Warmup Iteration  27: 314815362.117 ops/s
# Warmup Iteration  28: 312966280.907 ops/s
# Warmup Iteration  29: 312663864.569 ops/s
# Warmup Iteration  30: 314122194.266 ops/s
Iteration   1: 312158682.833 ops/s
Iteration   2: 313569528.824 ops/s
Iteration   3: 312628337.704 ops/s
Iteration   4: 314155003.751 ops/s
Iteration   5: 314609240.346 ops/s
Iteration   6: 316287569.064 ops/s
Iteration   7: 314653979.359 ops/s
Iteration   8: 315121466.500 ops/s
Iteration   9: 315482287.612 ops/s
Iteration  10: 314304377.721 ops/s
Iteration  11: 315465991.345 ops/s
Iteration  12: 315681908.541 ops/s
Iteration  13: 315544820.286 ops/s
Iteration  14: 311928228.430 ops/s
Iteration  15: 311834891.052 ops/s
Iteration  16: 314171943.722 ops/s
Iteration  17: 311595158.760 ops/s
Iteration  18: 315261319.332 ops/s
Iteration  19: 313798141.648 ops/s
Iteration  20: 312823670.281 ops/s
Iteration  21: 314520623.057 ops/s
Iteration  22: 313713640.965 ops/s
Iteration  23: 313957009.022 ops/s
Iteration  24: 311649007.885 ops/s
Iteration  25: 312738140.875 ops/s
Iteration  26: 313929468.164 ops/s
Iteration  27: 313362872.217 ops/s
Iteration  28: 309138157.737 ops/s
Iteration  29: 307115372.829 ops/s
Iteration  30: 311178976.046 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIfNone":
  313412660.530 ±(99.9%) 1340614.238 ops/s [Average]
  (min, avg, max) = (307115372.829, 313412660.530, 316287569.064), stdev = 2006568.432
  CI (99.9%): [312072046.292, 314753274.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  313412660.530 ± 1340614.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158888440.218 ops/s
# Warmup Iteration   2: 297505313.178 ops/s
# Warmup Iteration   3: 237652082.005 ops/s
# Warmup Iteration   4: 273499469.931 ops/s
# Warmup Iteration   5: 273154576.634 ops/s
# Warmup Iteration   6: 270829988.150 ops/s
# Warmup Iteration   7: 274887424.148 ops/s
# Warmup Iteration   8: 273034192.289 ops/s
# Warmup Iteration   9: 273014944.294 ops/s
# Warmup Iteration  10: 273483212.474 ops/s
# Warmup Iteration  11: 269931705.900 ops/s
# Warmup Iteration  12: 269761176.525 ops/s
# Warmup Iteration  13: 267157510.717 ops/s
# Warmup Iteration  14: 267824145.564 ops/s
# Warmup Iteration  15: 273769902.165 ops/s
# Warmup Iteration  16: 270469883.226 ops/s
# Warmup Iteration  17: 266767266.651 ops/s
# Warmup Iteration  18: 271107263.534 ops/s
# Warmup Iteration  19: 272714376.015 ops/s
# Warmup Iteration  20: 269324707.587 ops/s
# Warmup Iteration  21: 264409882.420 ops/s
# Warmup Iteration  22: 270411063.381 ops/s
# Warmup Iteration  23: 273496468.507 ops/s
# Warmup Iteration  24: 270003994.971 ops/s
# Warmup Iteration  25: 267860386.302 ops/s
# Warmup Iteration  26: 264270380.905 ops/s
# Warmup Iteration  27: 272790447.640 ops/s
# Warmup Iteration  28: 272814847.602 ops/s
# Warmup Iteration  29: 273326824.019 ops/s
# Warmup Iteration  30: 273883217.040 ops/s
Iteration   1: 274014083.248 ops/s
Iteration   2: 271507192.459 ops/s
Iteration   3: 271300202.523 ops/s
Iteration   4: 267745006.875 ops/s
Iteration   5: 271660703.147 ops/s
Iteration   6: 273810344.411 ops/s
Iteration   7: 266690627.736 ops/s
Iteration   8: 270961915.187 ops/s
Iteration   9: 271776746.850 ops/s
Iteration  10: 271946265.766 ops/s
Iteration  11: 273202392.890 ops/s
Iteration  12: 273998930.069 ops/s
Iteration  13: 275020091.808 ops/s
Iteration  14: 272665051.841 ops/s
Iteration  15: 272655266.919 ops/s
Iteration  16: 273876601.716 ops/s
Iteration  17: 274189262.157 ops/s
Iteration  18: 270880568.476 ops/s
Iteration  19: 274288534.030 ops/s
Iteration  20: 274966356.425 ops/s
Iteration  21: 269494355.805 ops/s
Iteration  22: 273510851.396 ops/s
Iteration  23: 271172593.135 ops/s
Iteration  24: 273009610.298 ops/s
Iteration  25: 264791326.443 ops/s
Iteration  26: 272807204.373 ops/s
Iteration  27: 273331001.614 ops/s
Iteration  28: 272969739.485 ops/s
Iteration  29: 272208847.677 ops/s
Iteration  30: 273602201.072 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIndex":
  272135129.194 ±(99.9%) 1580561.345 ops/s [Average]
  (min, avg, max) = (264791326.443, 272135129.194, 275020091.808), stdev = 2365709.993
  CI (99.9%): [270554567.849, 273715690.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detectIndex  thrpt   30  272135129.194 ± 1580561.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62638097.992 ops/s
# Warmup Iteration   2: 124723608.656 ops/s
# Warmup Iteration   3: 114736022.138 ops/s
# Warmup Iteration   4: 134519805.114 ops/s
# Warmup Iteration   5: 133867249.809 ops/s
# Warmup Iteration   6: 134565054.707 ops/s
# Warmup Iteration   7: 134112030.570 ops/s
# Warmup Iteration   8: 131746403.239 ops/s
# Warmup Iteration   9: 133616670.051 ops/s
# Warmup Iteration  10: 133851509.085 ops/s
# Warmup Iteration  11: 132979813.818 ops/s
# Warmup Iteration  12: 133294696.559 ops/s
# Warmup Iteration  13: 132895785.210 ops/s
# Warmup Iteration  14: 133472988.794 ops/s
# Warmup Iteration  15: 133209690.167 ops/s
# Warmup Iteration  16: 131682316.770 ops/s
# Warmup Iteration  17: 130266359.583 ops/s
# Warmup Iteration  18: 133555761.043 ops/s
# Warmup Iteration  19: 132510924.928 ops/s
# Warmup Iteration  20: 134267426.719 ops/s
# Warmup Iteration  21: 132441406.110 ops/s
# Warmup Iteration  22: 132766316.298 ops/s
# Warmup Iteration  23: 134264572.500 ops/s
# Warmup Iteration  24: 134222545.116 ops/s
# Warmup Iteration  25: 134668263.236 ops/s
# Warmup Iteration  26: 132741522.732 ops/s
# Warmup Iteration  27: 134032353.829 ops/s
# Warmup Iteration  28: 132489859.189 ops/s
# Warmup Iteration  29: 132000782.864 ops/s
# Warmup Iteration  30: 131380422.319 ops/s
Iteration   1: 133206819.907 ops/s
Iteration   2: 134544226.627 ops/s
Iteration   3: 134008650.232 ops/s
Iteration   4: 133732149.502 ops/s
Iteration   5: 132814601.789 ops/s
Iteration   6: 133626469.375 ops/s
Iteration   7: 133792649.112 ops/s
Iteration   8: 134033038.273 ops/s
Iteration   9: 134670773.145 ops/s
Iteration  10: 133206862.462 ops/s
Iteration  11: 134004682.094 ops/s
Iteration  12: 131251476.680 ops/s
Iteration  13: 132853964.252 ops/s
Iteration  14: 132133640.224 ops/s
Iteration  15: 130205125.046 ops/s
Iteration  16: 134293219.971 ops/s
Iteration  17: 132197884.404 ops/s
Iteration  18: 129692437.138 ops/s
Iteration  19: 134401765.377 ops/s
Iteration  20: 130265785.444 ops/s
Iteration  21: 131551305.457 ops/s
Iteration  22: 133571088.369 ops/s
Iteration  23: 128923143.535 ops/s
Iteration  24: 134199550.807 ops/s
Iteration  25: 133670922.725 ops/s
Iteration  26: 133377912.179 ops/s
Iteration  27: 133859881.886 ops/s
Iteration  28: 134404605.025 ops/s
Iteration  29: 133293644.215 ops/s
Iteration  30: 133657737.191 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWith":
  132981533.748 ±(99.9%) 1027441.918 ops/s [Average]
  (min, avg, max) = (128923143.535, 132981533.748, 134670773.145), stdev = 1537826.811
  CI (99.9%): [131954091.830, 134008975.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWith  thrpt   30  132981533.748 ± 1027441.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156163611.813 ops/s
# Warmup Iteration   2: 304699352.847 ops/s
# Warmup Iteration   3: 267091680.518 ops/s
# Warmup Iteration   4: 311084569.989 ops/s
# Warmup Iteration   5: 307312602.485 ops/s
# Warmup Iteration   6: 310671071.107 ops/s
# Warmup Iteration   7: 311180535.589 ops/s
# Warmup Iteration   8: 311861920.218 ops/s
# Warmup Iteration   9: 308758572.417 ops/s
# Warmup Iteration  10: 305694575.284 ops/s
# Warmup Iteration  11: 310682978.887 ops/s
# Warmup Iteration  12: 310088445.046 ops/s
# Warmup Iteration  13: 312142921.230 ops/s
# Warmup Iteration  14: 313535936.503 ops/s
# Warmup Iteration  15: 310306627.136 ops/s
# Warmup Iteration  16: 311862096.673 ops/s
# Warmup Iteration  17: 311896472.234 ops/s
# Warmup Iteration  18: 302291068.253 ops/s
# Warmup Iteration  19: 309914073.991 ops/s
# Warmup Iteration  20: 310064119.613 ops/s
# Warmup Iteration  21: 311422377.542 ops/s
# Warmup Iteration  22: 307138048.597 ops/s
# Warmup Iteration  23: 312162697.441 ops/s
# Warmup Iteration  24: 309917896.206 ops/s
# Warmup Iteration  25: 308347300.212 ops/s
# Warmup Iteration  26: 303327780.798 ops/s
# Warmup Iteration  27: 306297451.347 ops/s
# Warmup Iteration  28: 313119300.077 ops/s
# Warmup Iteration  29: 298489279.561 ops/s
# Warmup Iteration  30: 306236232.952 ops/s
Iteration   1: 309853631.785 ops/s
Iteration   2: 310427407.345 ops/s
Iteration   3: 309556485.147 ops/s
Iteration   4: 309184438.484 ops/s
Iteration   5: 305152801.554 ops/s
Iteration   6: 298728531.143 ops/s
Iteration   7: 310162486.590 ops/s
Iteration   8: 305348623.761 ops/s
Iteration   9: 312709983.625 ops/s
Iteration  10: 311214712.361 ops/s
Iteration  11: 309447410.373 ops/s
Iteration  12: 302160025.191 ops/s
Iteration  13: 310051309.277 ops/s
Iteration  14: 302777139.995 ops/s
Iteration  15: 305824816.259 ops/s
Iteration  16: 304971029.929 ops/s
Iteration  17: 311460231.938 ops/s
Iteration  18: 312335134.166 ops/s
Iteration  19: 310668123.674 ops/s
Iteration  20: 311164857.744 ops/s
Iteration  21: 311826341.013 ops/s
Iteration  22: 306743748.246 ops/s
Iteration  23: 298985833.162 ops/s
Iteration  24: 304556707.439 ops/s
Iteration  25: 311112688.343 ops/s
Iteration  26: 307867589.775 ops/s
Iteration  27: 307277900.545 ops/s
Iteration  28: 309723702.456 ops/s
Iteration  29: 311598068.552 ops/s
Iteration  30: 305049786.340 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithIfNone":
  307931384.874 ±(99.9%) 2557606.574 ops/s [Average]
  (min, avg, max) = (298728531.143, 307931384.874, 312709983.625), stdev = 3828105.406
  CI (99.9%): [305373778.300, 310488991.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  307931384.874 ± 2557606.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159182313.684 ops/s
# Warmup Iteration   2: 305305340.432 ops/s
# Warmup Iteration   3: 267420724.708 ops/s
# Warmup Iteration   4: 309227533.993 ops/s
# Warmup Iteration   5: 314093621.484 ops/s
# Warmup Iteration   6: 314538858.954 ops/s
# Warmup Iteration   7: 316141901.877 ops/s
# Warmup Iteration   8: 313835731.363 ops/s
# Warmup Iteration   9: 313498668.744 ops/s
# Warmup Iteration  10: 314468669.860 ops/s
# Warmup Iteration  11: 312858371.096 ops/s
# Warmup Iteration  12: 314585136.820 ops/s
# Warmup Iteration  13: 313757705.707 ops/s
# Warmup Iteration  14: 314362458.156 ops/s
# Warmup Iteration  15: 312070894.932 ops/s
# Warmup Iteration  16: 313967081.838 ops/s
# Warmup Iteration  17: 312345827.220 ops/s
# Warmup Iteration  18: 313795105.055 ops/s
# Warmup Iteration  19: 312516513.146 ops/s
# Warmup Iteration  20: 313689577.342 ops/s
# Warmup Iteration  21: 303981178.428 ops/s
# Warmup Iteration  22: 311994240.406 ops/s
# Warmup Iteration  23: 304300776.455 ops/s
# Warmup Iteration  24: 307149004.578 ops/s
# Warmup Iteration  25: 312475285.523 ops/s
# Warmup Iteration  26: 314134797.716 ops/s
# Warmup Iteration  27: 312515422.035 ops/s
# Warmup Iteration  28: 313865975.150 ops/s
# Warmup Iteration  29: 312637172.608 ops/s
# Warmup Iteration  30: 314221182.383 ops/s
Iteration   1: 305512324.424 ops/s
Iteration   2: 313700777.985 ops/s
Iteration   3: 310704317.364 ops/s
Iteration   4: 310324021.444 ops/s
Iteration   5: 311916221.802 ops/s
Iteration   6: 312747151.770 ops/s
Iteration   7: 312606235.669 ops/s
Iteration   8: 307514769.649 ops/s
Iteration   9: 314521484.040 ops/s
Iteration  10: 314733745.744 ops/s
Iteration  11: 312603548.553 ops/s
Iteration  12: 312922822.973 ops/s
Iteration  13: 314733881.151 ops/s
Iteration  14: 314269145.079 ops/s
Iteration  15: 312918140.129 ops/s
Iteration  16: 309522033.562 ops/s
Iteration  17: 310784885.940 ops/s
Iteration  18: 312050772.412 ops/s
Iteration  19: 311472966.948 ops/s
Iteration  20: 311988603.991 ops/s
Iteration  21: 303082117.280 ops/s
Iteration  22: 313227789.126 ops/s
Iteration  23: 312482674.697 ops/s
Iteration  24: 305212799.228 ops/s
Iteration  25: 309621548.945 ops/s
Iteration  26: 311459152.895 ops/s
Iteration  27: 310845115.648 ops/s
Iteration  28: 307337800.964 ops/s
Iteration  29: 313811802.771 ops/s
Iteration  30: 311486104.681 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithOccurrences":
  311203825.229 ±(99.9%) 1953057.063 ops/s [Average]
  (min, avg, max) = (303082117.280, 311203825.229, 314733881.151), stdev = 2923244.089
  CI (99.9%): [309250768.166, 313156882.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  311203825.229 ± 1953057.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34353399.222 ops/s
# Warmup Iteration   2: 73590756.981 ops/s
# Warmup Iteration   3: 61327766.549 ops/s
# Warmup Iteration   4: 70674121.991 ops/s
# Warmup Iteration   5: 70954719.040 ops/s
# Warmup Iteration   6: 72599179.835 ops/s
# Warmup Iteration   7: 72537578.179 ops/s
# Warmup Iteration   8: 71916578.632 ops/s
# Warmup Iteration   9: 72352883.291 ops/s
# Warmup Iteration  10: 72104454.828 ops/s
# Warmup Iteration  11: 71469103.066 ops/s
# Warmup Iteration  12: 72301825.108 ops/s
# Warmup Iteration  13: 72841740.500 ops/s
# Warmup Iteration  14: 72306634.284 ops/s
# Warmup Iteration  15: 69898075.835 ops/s
# Warmup Iteration  16: 72346157.615 ops/s
# Warmup Iteration  17: 72142605.683 ops/s
# Warmup Iteration  18: 71672804.377 ops/s
# Warmup Iteration  19: 71815053.155 ops/s
# Warmup Iteration  20: 70310524.331 ops/s
# Warmup Iteration  21: 70383922.703 ops/s
# Warmup Iteration  22: 72249854.861 ops/s
# Warmup Iteration  23: 71204708.905 ops/s
# Warmup Iteration  24: 70477657.427 ops/s
# Warmup Iteration  25: 70232854.719 ops/s
# Warmup Iteration  26: 71958281.982 ops/s
# Warmup Iteration  27: 71308236.024 ops/s
# Warmup Iteration  28: 72179580.993 ops/s
# Warmup Iteration  29: 71721360.800 ops/s
# Warmup Iteration  30: 72245553.618 ops/s
Iteration   1: 72126022.880 ops/s
Iteration   2: 70351276.698 ops/s
Iteration   3: 70986387.141 ops/s
Iteration   4: 69786025.036 ops/s
Iteration   5: 71636439.179 ops/s
Iteration   6: 71824680.972 ops/s
Iteration   7: 70782962.486 ops/s
Iteration   8: 72408113.233 ops/s
Iteration   9: 70984346.944 ops/s
Iteration  10: 69767487.755 ops/s
Iteration  11: 72135214.406 ops/s
Iteration  12: 71019580.136 ops/s
Iteration  13: 71804994.296 ops/s
Iteration  14: 71813270.607 ops/s
Iteration  15: 69378278.695 ops/s
Iteration  16: 71514908.683 ops/s
Iteration  17: 70492517.059 ops/s
Iteration  18: 71764469.499 ops/s
Iteration  19: 71733102.894 ops/s
Iteration  20: 70240015.929 ops/s
Iteration  21: 69837763.004 ops/s
Iteration  22: 70653067.637 ops/s
Iteration  23: 71887782.746 ops/s
Iteration  24: 72127777.304 ops/s
Iteration  25: 72324299.244 ops/s
Iteration  26: 71197053.080 ops/s
Iteration  27: 71466997.082 ops/s
Iteration  28: 70256827.046 ops/s
Iteration  29: 70900779.225 ops/s
Iteration  30: 72192313.622 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinct":
  71179825.151 ±(99.9%) 579309.846 ops/s [Average]
  (min, avg, max) = (69378278.695, 71179825.151, 72408113.233), stdev = 867083.772
  CI (99.9%): [70600515.304, 71759134.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_distinct  thrpt   30  71179825.151 ± 579309.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8485173.893 ops/s
# Warmup Iteration   2: 16006945.817 ops/s
# Warmup Iteration   3: 17224974.797 ops/s
# Warmup Iteration   4: 18082668.824 ops/s
# Warmup Iteration   5: 18184086.526 ops/s
# Warmup Iteration   6: 18009476.789 ops/s
# Warmup Iteration   7: 18152365.932 ops/s
# Warmup Iteration   8: 18252033.612 ops/s
# Warmup Iteration   9: 18202097.852 ops/s
# Warmup Iteration  10: 18067142.947 ops/s
# Warmup Iteration  11: 18059484.063 ops/s
# Warmup Iteration  12: 17888046.532 ops/s
# Warmup Iteration  13: 18113169.637 ops/s
# Warmup Iteration  14: 18101182.265 ops/s
# Warmup Iteration  15: 18120628.573 ops/s
# Warmup Iteration  16: 17910965.194 ops/s
# Warmup Iteration  17: 18249921.100 ops/s
# Warmup Iteration  18: 18193778.411 ops/s
# Warmup Iteration  19: 18240702.118 ops/s
# Warmup Iteration  20: 18217675.480 ops/s
# Warmup Iteration  21: 18073967.210 ops/s
# Warmup Iteration  22: 17676455.883 ops/s
# Warmup Iteration  23: 18235935.548 ops/s
# Warmup Iteration  24: 18156795.498 ops/s
# Warmup Iteration  25: 17781758.727 ops/s
# Warmup Iteration  26: 18195710.025 ops/s
# Warmup Iteration  27: 18056223.354 ops/s
# Warmup Iteration  28: 17967104.847 ops/s
# Warmup Iteration  29: 18219141.238 ops/s
# Warmup Iteration  30: 18075819.787 ops/s
Iteration   1: 18066221.455 ops/s
Iteration   2: 18303999.677 ops/s
Iteration   3: 18026435.046 ops/s
Iteration   4: 18201678.614 ops/s
Iteration   5: 18263040.760 ops/s
Iteration   6: 18161235.192 ops/s
Iteration   7: 18239942.294 ops/s
Iteration   8: 18303959.197 ops/s
Iteration   9: 17786197.153 ops/s
Iteration  10: 17940152.205 ops/s
Iteration  11: 17805493.206 ops/s
Iteration  12: 17879669.110 ops/s
Iteration  13: 18265224.171 ops/s
Iteration  14: 18333122.102 ops/s
Iteration  15: 18323504.202 ops/s
Iteration  16: 18101214.816 ops/s
Iteration  17: 18195703.004 ops/s
Iteration  18: 18164460.086 ops/s
Iteration  19: 17669165.166 ops/s
Iteration  20: 17880309.397 ops/s
Iteration  21: 18038199.163 ops/s
Iteration  22: 18155155.320 ops/s
Iteration  23: 17944480.677 ops/s
Iteration  24: 18018888.507 ops/s
Iteration  25: 18016424.868 ops/s
Iteration  26: 17715674.603 ops/s
Iteration  27: 17783524.855 ops/s
Iteration  28: 18204824.625 ops/s
Iteration  29: 17986719.619 ops/s
Iteration  30: 17933346.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_distinctView":
  18056932.179 ±(99.9%) 128726.282 ops/s [Average]
  (min, avg, max) = (17669165.166, 18056932.179, 18333122.102), stdev = 192671.453
  CI (99.9%): [17928205.898, 18185658.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_distinctView  thrpt   30  18056932.179 ± 128726.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154987408.419 ops/s
# Warmup Iteration   2: 300669007.734 ops/s
# Warmup Iteration   3: 264698584.321 ops/s
# Warmup Iteration   4: 308301035.781 ops/s
# Warmup Iteration   5: 312512983.857 ops/s
# Warmup Iteration   6: 313281489.082 ops/s
# Warmup Iteration   7: 314440528.473 ops/s
# Warmup Iteration   8: 314795999.390 ops/s
# Warmup Iteration   9: 313416044.450 ops/s
# Warmup Iteration  10: 315191544.577 ops/s
# Warmup Iteration  11: 314599299.444 ops/s
# Warmup Iteration  12: 314292789.059 ops/s
# Warmup Iteration  13: 307239049.616 ops/s
# Warmup Iteration  14: 307708591.953 ops/s
# Warmup Iteration  15: 303655923.706 ops/s
# Warmup Iteration  16: 297496230.367 ops/s
# Warmup Iteration  17: 307096639.665 ops/s
# Warmup Iteration  18: 312388707.428 ops/s
# Warmup Iteration  19: 314044026.629 ops/s
# Warmup Iteration  20: 313073804.070 ops/s
# Warmup Iteration  21: 313809439.887 ops/s
# Warmup Iteration  22: 311878493.177 ops/s
# Warmup Iteration  23: 314286158.128 ops/s
# Warmup Iteration  24: 313599746.403 ops/s
# Warmup Iteration  25: 310417952.464 ops/s
# Warmup Iteration  26: 313653554.087 ops/s
# Warmup Iteration  27: 310678444.645 ops/s
# Warmup Iteration  28: 306604550.369 ops/s
# Warmup Iteration  29: 313741382.071 ops/s
# Warmup Iteration  30: 313543254.278 ops/s
Iteration   1: 314459297.577 ops/s
Iteration   2: 302115251.603 ops/s
Iteration   3: 310595050.384 ops/s
Iteration   4: 313570896.673 ops/s
Iteration   5: 299273832.668 ops/s
Iteration   6: 312813940.320 ops/s
Iteration   7: 310355914.742 ops/s
Iteration   8: 313477263.474 ops/s
Iteration   9: 313297233.627 ops/s
Iteration  10: 311663063.165 ops/s
Iteration  11: 314145580.741 ops/s
Iteration  12: 311239886.647 ops/s
Iteration  13: 309645456.487 ops/s
Iteration  14: 317399830.011 ops/s
Iteration  15: 304201854.962 ops/s
Iteration  16: 311819032.167 ops/s
Iteration  17: 310896694.734 ops/s
Iteration  18: 302165622.558 ops/s
Iteration  19: 307949887.001 ops/s
Iteration  20: 310671376.910 ops/s
Iteration  21: 313931186.371 ops/s
Iteration  22: 310806336.612 ops/s
Iteration  23: 313108283.713 ops/s
Iteration  24: 312243005.414 ops/s
Iteration  25: 313296486.724 ops/s
Iteration  26: 313421378.245 ops/s
Iteration  27: 303695843.883 ops/s
Iteration  28: 311045684.750 ops/s
Iteration  29: 312660513.746 ops/s
Iteration  30: 310830192.774 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop":
  310559862.623 ±(99.9%) 2812547.567 ops/s [Average]
  (min, avg, max) = (299273832.668, 310559862.623, 317399830.011), stdev = 4209689.111
  CI (99.9%): [307747315.056, 313372410.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_drop  thrpt   30  310559862.623 ± 2812547.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25627543.945 ops/s
# Warmup Iteration   2: 47505014.199 ops/s
# Warmup Iteration   3: 49060727.113 ops/s
# Warmup Iteration   4: 53250555.858 ops/s
# Warmup Iteration   5: 53062649.578 ops/s
# Warmup Iteration   6: 53320180.865 ops/s
# Warmup Iteration   7: 53439902.028 ops/s
# Warmup Iteration   8: 53022978.178 ops/s
# Warmup Iteration   9: 53630766.619 ops/s
# Warmup Iteration  10: 53558434.100 ops/s
# Warmup Iteration  11: 53525176.755 ops/s
# Warmup Iteration  12: 52209065.506 ops/s
# Warmup Iteration  13: 53791034.537 ops/s
# Warmup Iteration  14: 53559332.205 ops/s
# Warmup Iteration  15: 53421359.611 ops/s
# Warmup Iteration  16: 53747847.157 ops/s
# Warmup Iteration  17: 53654722.335 ops/s
# Warmup Iteration  18: 53207088.785 ops/s
# Warmup Iteration  19: 53671061.284 ops/s
# Warmup Iteration  20: 53411336.257 ops/s
# Warmup Iteration  21: 53257106.669 ops/s
# Warmup Iteration  22: 53544212.217 ops/s
# Warmup Iteration  23: 53727495.146 ops/s
# Warmup Iteration  24: 53358704.166 ops/s
# Warmup Iteration  25: 53493570.887 ops/s
# Warmup Iteration  26: 53294893.670 ops/s
# Warmup Iteration  27: 52823609.476 ops/s
# Warmup Iteration  28: 52504212.512 ops/s
# Warmup Iteration  29: 53065369.096 ops/s
# Warmup Iteration  30: 53262762.905 ops/s
Iteration   1: 53454959.474 ops/s
Iteration   2: 52541675.494 ops/s
Iteration   3: 53565763.714 ops/s
Iteration   4: 53594223.393 ops/s
Iteration   5: 53963608.192 ops/s
Iteration   6: 52704136.992 ops/s
Iteration   7: 53407748.594 ops/s
Iteration   8: 53809675.840 ops/s
Iteration   9: 53978772.346 ops/s
Iteration  10: 52508111.551 ops/s
Iteration  11: 51935482.166 ops/s
Iteration  12: 53724957.403 ops/s
Iteration  13: 52530626.508 ops/s
Iteration  14: 52791014.891 ops/s
Iteration  15: 52649438.901 ops/s
Iteration  16: 54124839.124 ops/s
Iteration  17: 53664409.994 ops/s
Iteration  18: 53721087.890 ops/s
Iteration  19: 53540958.606 ops/s
Iteration  20: 53960437.977 ops/s
Iteration  21: 53915382.107 ops/s
Iteration  22: 54072244.378 ops/s
Iteration  23: 52272908.058 ops/s
Iteration  24: 54118421.626 ops/s
Iteration  25: 53564518.704 ops/s
Iteration  26: 53747560.408 ops/s
Iteration  27: 54050767.416 ops/s
Iteration  28: 53776132.420 ops/s
Iteration  29: 52892686.515 ops/s
Iteration  30: 52950739.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_dropWhile":
  53384442.995 ±(99.9%) 421580.205 ops/s [Average]
  (min, avg, max) = (51935482.166, 53384442.995, 54124839.124), stdev = 631001.452
  CI (99.9%): [52962862.791, 53806023.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_dropWhile  thrpt   30  53384442.995 ± 421580.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793083.693 ops/s
# Warmup Iteration   2: 828337.001 ops/s
# Warmup Iteration   3: 1048739.842 ops/s
# Warmup Iteration   4: 1053956.921 ops/s
# Warmup Iteration   5: 1021671.213 ops/s
# Warmup Iteration   6: 1051234.568 ops/s
# Warmup Iteration   7: 1044189.160 ops/s
# Warmup Iteration   8: 1044127.751 ops/s
# Warmup Iteration   9: 1048432.029 ops/s
# Warmup Iteration  10: 1047153.556 ops/s
# Warmup Iteration  11: 1053658.878 ops/s
# Warmup Iteration  12: 895271.672 ops/s
# Warmup Iteration  13: 1044131.376 ops/s
# Warmup Iteration  14: 1010361.700 ops/s
# Warmup Iteration  15: 1022537.273 ops/s
# Warmup Iteration  16: 1040642.468 ops/s
# Warmup Iteration  17: 1116825.614 ops/s
# Warmup Iteration  18: 1109883.258 ops/s
# Warmup Iteration  19: 1111061.220 ops/s
# Warmup Iteration  20: 1113813.557 ops/s
# Warmup Iteration  21: 1112930.123 ops/s
# Warmup Iteration  22: 1115601.278 ops/s
# Warmup Iteration  23: 1113708.355 ops/s
# Warmup Iteration  24: 1109119.820 ops/s
# Warmup Iteration  25: 1112409.563 ops/s
# Warmup Iteration  26: 1122023.446 ops/s
# Warmup Iteration  27: 1111613.096 ops/s
# Warmup Iteration  28: 1112287.464 ops/s
# Warmup Iteration  29: 1103876.636 ops/s
# Warmup Iteration  30: 1118291.179 ops/s
Iteration   1: 1119383.216 ops/s
Iteration   2: 1087413.985 ops/s
Iteration   3: 1083982.801 ops/s
Iteration   4: 1091375.982 ops/s
Iteration   5: 1075761.605 ops/s
Iteration   6: 1121820.565 ops/s
Iteration   7: 1120582.001 ops/s
Iteration   8: 1087562.602 ops/s
Iteration   9: 1091974.733 ops/s
Iteration  10: 1090124.665 ops/s
Iteration  11: 1110815.122 ops/s
Iteration  12: 1111738.722 ops/s
Iteration  13: 1112694.809 ops/s
Iteration  14: 1114027.783 ops/s
Iteration  15: 1120534.877 ops/s
Iteration  16: 1099893.652 ops/s
Iteration  17: 1123914.212 ops/s
Iteration  18: 1120167.937 ops/s
Iteration  19: 1118875.221 ops/s
Iteration  20: 1111635.411 ops/s
Iteration  21: 1111610.823 ops/s
Iteration  22: 1117531.041 ops/s
Iteration  23: 1103826.898 ops/s
Iteration  24: 1113453.257 ops/s
Iteration  25: 1111477.306 ops/s
Iteration  26: 1105388.954 ops/s
Iteration  27: 1122175.867 ops/s
Iteration  28: 1116975.706 ops/s
Iteration  29: 1069576.955 ops/s
Iteration  30: 1074538.031 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_drop_throws":
  1105361.158 ±(99.9%) 10718.356 ops/s [Average]
  (min, avg, max) = (1069576.955, 1105361.158, 1123914.212), stdev = 16042.732
  CI (99.9%): [1094642.802, 1116079.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_drop_throws  thrpt   30  1105361.158 ± 10718.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28653.286 ops/s
# Warmup Iteration   2: 48499.169 ops/s
# Warmup Iteration   3: 64334.467 ops/s
# Warmup Iteration   4: 64303.182 ops/s
# Warmup Iteration   5: 64255.948 ops/s
# Warmup Iteration   6: 64127.075 ops/s
# Warmup Iteration   7: 64184.479 ops/s
# Warmup Iteration   8: 54750.903 ops/s
# Warmup Iteration   9: 64586.302 ops/s
# Warmup Iteration  10: 64394.972 ops/s
# Warmup Iteration  11: 64520.744 ops/s
# Warmup Iteration  12: 64816.178 ops/s
# Warmup Iteration  13: 64142.382 ops/s
# Warmup Iteration  14: 64693.741 ops/s
# Warmup Iteration  15: 63605.799 ops/s
# Warmup Iteration  16: 64265.589 ops/s
# Warmup Iteration  17: 64513.628 ops/s
# Warmup Iteration  18: 64367.125 ops/s
# Warmup Iteration  19: 62936.689 ops/s
# Warmup Iteration  20: 63179.872 ops/s
# Warmup Iteration  21: 64151.781 ops/s
# Warmup Iteration  22: 64118.094 ops/s
# Warmup Iteration  23: 64901.766 ops/s
# Warmup Iteration  24: 64491.532 ops/s
# Warmup Iteration  25: 64646.804 ops/s
# Warmup Iteration  26: 63932.848 ops/s
# Warmup Iteration  27: 64490.821 ops/s
# Warmup Iteration  28: 64502.917 ops/s
# Warmup Iteration  29: 65074.032 ops/s
# Warmup Iteration  30: 64930.063 ops/s
Iteration   1: 63403.403 ops/s
Iteration   2: 64853.599 ops/s
Iteration   3: 64738.103 ops/s
Iteration   4: 63994.220 ops/s
Iteration   5: 64311.465 ops/s
Iteration   6: 64539.054 ops/s
Iteration   7: 64170.690 ops/s
Iteration   8: 64824.293 ops/s
Iteration   9: 64478.574 ops/s
Iteration  10: 64056.536 ops/s
Iteration  11: 64635.301 ops/s
Iteration  12: 65036.436 ops/s
Iteration  13: 64140.890 ops/s
Iteration  14: 63100.266 ops/s
Iteration  15: 60942.281 ops/s
Iteration  16: 63247.915 ops/s
Iteration  17: 62598.904 ops/s
Iteration  18: 62096.597 ops/s
Iteration  19: 64397.378 ops/s
Iteration  20: 64783.943 ops/s
Iteration  21: 64471.617 ops/s
Iteration  22: 64210.343 ops/s
Iteration  23: 64578.263 ops/s
Iteration  24: 64778.661 ops/s
Iteration  25: 64780.660 ops/s
Iteration  26: 62629.101 ops/s
Iteration  27: 62306.640 ops/s
Iteration  28: 61454.230 ops/s
Iteration  29: 64243.458 ops/s
Iteration  30: 64043.930 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_equalsAndHashCode":
  63861.558 ±(99.9%) 724.159 ops/s [Average]
  (min, avg, max) = (60942.281, 63861.558, 65036.436), stdev = 1083.887
  CI (99.9%): [63137.399, 64585.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  63861.558 ± 724.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7871365.882 ops/s
# Warmup Iteration   2: 17386770.315 ops/s
# Warmup Iteration   3: 17652208.660 ops/s
# Warmup Iteration   4: 14671188.653 ops/s
# Warmup Iteration   5: 17605277.058 ops/s
# Warmup Iteration   6: 17673424.985 ops/s
# Warmup Iteration   7: 17111846.475 ops/s
# Warmup Iteration   8: 17242730.783 ops/s
# Warmup Iteration   9: 17399807.163 ops/s
# Warmup Iteration  10: 17735322.894 ops/s
# Warmup Iteration  11: 17306248.518 ops/s
# Warmup Iteration  12: 17470914.632 ops/s
# Warmup Iteration  13: 17373735.928 ops/s
# Warmup Iteration  14: 17075599.776 ops/s
# Warmup Iteration  15: 17541517.404 ops/s
# Warmup Iteration  16: 17613595.065 ops/s
# Warmup Iteration  17: 17110516.508 ops/s
# Warmup Iteration  18: 17575109.832 ops/s
# Warmup Iteration  19: 17643174.678 ops/s
# Warmup Iteration  20: 17216288.564 ops/s
# Warmup Iteration  21: 17365484.773 ops/s
# Warmup Iteration  22: 17559992.562 ops/s
# Warmup Iteration  23: 17449373.683 ops/s
# Warmup Iteration  24: 17710507.012 ops/s
# Warmup Iteration  25: 17393382.657 ops/s
# Warmup Iteration  26: 17569789.854 ops/s
# Warmup Iteration  27: 17536027.637 ops/s
# Warmup Iteration  28: 17757686.351 ops/s
# Warmup Iteration  29: 17077224.749 ops/s
# Warmup Iteration  30: 17677033.116 ops/s
Iteration   1: 17485673.139 ops/s
Iteration   2: 17720826.609 ops/s
Iteration   3: 17205812.487 ops/s
Iteration   4: 17152600.846 ops/s
Iteration   5: 17383656.251 ops/s
Iteration   6: 17449139.532 ops/s
Iteration   7: 17668788.679 ops/s
Iteration   8: 17232525.213 ops/s
Iteration   9: 17167759.301 ops/s
Iteration  10: 17328124.262 ops/s
Iteration  11: 17310031.305 ops/s
Iteration  12: 17420432.218 ops/s
Iteration  13: 17474855.540 ops/s
Iteration  14: 17477638.627 ops/s
Iteration  15: 17664758.706 ops/s
Iteration  16: 17495698.926 ops/s
Iteration  17: 17419854.914 ops/s
Iteration  18: 17608399.495 ops/s
Iteration  19: 17551382.608 ops/s
Iteration  20: 17480185.379 ops/s
Iteration  21: 17201268.783 ops/s
Iteration  22: 17418009.740 ops/s
Iteration  23: 17426797.790 ops/s
Iteration  24: 17157145.948 ops/s
Iteration  25: 16819092.154 ops/s
Iteration  26: 17365968.604 ops/s
Iteration  27: 17642781.458 ops/s
Iteration  28: 17495221.918 ops/s
Iteration  29: 17571159.704 ops/s
Iteration  30: 17575862.167 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollect":
  17412381.743 ±(99.9%) 130451.361 ops/s [Average]
  (min, avg, max) = (16819092.154, 17412381.743, 17720826.609), stdev = 195253.471
  CI (99.9%): [17281930.382, 17542833.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollect  thrpt   30  17412381.743 ± 130451.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12789357.739 ops/s
# Warmup Iteration   2: 20271812.003 ops/s
# Warmup Iteration   3: 22940994.491 ops/s
# Warmup Iteration   4: 23087777.772 ops/s
# Warmup Iteration   5: 22967810.419 ops/s
# Warmup Iteration   6: 19316686.432 ops/s
# Warmup Iteration   7: 22920970.809 ops/s
# Warmup Iteration   8: 23220017.178 ops/s
# Warmup Iteration   9: 23093348.183 ops/s
# Warmup Iteration  10: 23211713.471 ops/s
# Warmup Iteration  11: 23229783.331 ops/s
# Warmup Iteration  12: 23221686.542 ops/s
# Warmup Iteration  13: 23255141.909 ops/s
# Warmup Iteration  14: 23131587.046 ops/s
# Warmup Iteration  15: 22781964.487 ops/s
# Warmup Iteration  16: 23074314.101 ops/s
# Warmup Iteration  17: 21947908.799 ops/s
# Warmup Iteration  18: 21823440.587 ops/s
# Warmup Iteration  19: 21565510.595 ops/s
# Warmup Iteration  20: 21786333.375 ops/s
# Warmup Iteration  21: 21876490.494 ops/s
# Warmup Iteration  22: 22003420.857 ops/s
# Warmup Iteration  23: 21762376.381 ops/s
# Warmup Iteration  24: 21462578.488 ops/s
# Warmup Iteration  25: 21751313.959 ops/s
# Warmup Iteration  26: 21465015.183 ops/s
# Warmup Iteration  27: 21810027.961 ops/s
# Warmup Iteration  28: 21801644.843 ops/s
# Warmup Iteration  29: 21630306.156 ops/s
# Warmup Iteration  30: 21727603.191 ops/s
Iteration   1: 21858450.213 ops/s
Iteration   2: 21675983.265 ops/s
Iteration   3: 21815025.610 ops/s
Iteration   4: 21681673.648 ops/s
Iteration   5: 21889017.530 ops/s
Iteration   6: 22045991.183 ops/s
Iteration   7: 22027222.700 ops/s
Iteration   8: 21798510.935 ops/s
Iteration   9: 21771789.403 ops/s
Iteration  10: 21970991.653 ops/s
Iteration  11: 21832891.699 ops/s
Iteration  12: 21886208.082 ops/s
Iteration  13: 21660144.849 ops/s
Iteration  14: 21953753.134 ops/s
Iteration  15: 21657575.618 ops/s
Iteration  16: 21874327.551 ops/s
Iteration  17: 21095318.029 ops/s
Iteration  18: 21957849.983 ops/s
Iteration  19: 21774920.030 ops/s
Iteration  20: 21804789.015 ops/s
Iteration  21: 21421962.616 ops/s
Iteration  22: 21841758.486 ops/s
Iteration  23: 21826261.820 ops/s
Iteration  24: 21814706.167 ops/s
Iteration  25: 21391026.561 ops/s
Iteration  26: 21029269.893 ops/s
Iteration  27: 21587107.747 ops/s
Iteration  28: 21973146.959 ops/s
Iteration  29: 21498961.982 ops/s
Iteration  30: 20799149.750 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWith":
  21707192.870 ±(99.9%) 200006.152 ops/s [Average]
  (min, avg, max) = (20799149.750, 21707192.870, 22045991.183), stdev = 299359.816
  CI (99.9%): [21507186.718, 21907199.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  21707192.870 ± 200006.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6009402.380 ops/s
# Warmup Iteration   2: 15217759.581 ops/s
# Warmup Iteration   3: 12203919.797 ops/s
# Warmup Iteration   4: 14784710.867 ops/s
# Warmup Iteration   5: 14918623.910 ops/s
# Warmup Iteration   6: 14529131.478 ops/s
# Warmup Iteration   7: 14675096.688 ops/s
# Warmup Iteration   8: 14851526.826 ops/s
# Warmup Iteration   9: 15041667.627 ops/s
# Warmup Iteration  10: 14885742.199 ops/s
# Warmup Iteration  11: 14863874.014 ops/s
# Warmup Iteration  12: 14970042.575 ops/s
# Warmup Iteration  13: 14862885.502 ops/s
# Warmup Iteration  14: 14959936.131 ops/s
# Warmup Iteration  15: 15042261.859 ops/s
# Warmup Iteration  16: 15014236.881 ops/s
# Warmup Iteration  17: 14897277.999 ops/s
# Warmup Iteration  18: 14727529.343 ops/s
# Warmup Iteration  19: 15007811.090 ops/s
# Warmup Iteration  20: 14963122.440 ops/s
# Warmup Iteration  21: 15071288.154 ops/s
# Warmup Iteration  22: 14923664.006 ops/s
# Warmup Iteration  23: 14694500.666 ops/s
# Warmup Iteration  24: 14763265.610 ops/s
# Warmup Iteration  25: 14688476.710 ops/s
# Warmup Iteration  26: 14900050.133 ops/s
# Warmup Iteration  27: 14774342.859 ops/s
# Warmup Iteration  28: 14909377.952 ops/s
# Warmup Iteration  29: 14938482.933 ops/s
# Warmup Iteration  30: 15056129.350 ops/s
Iteration   1: 14717504.421 ops/s
Iteration   2: 14992562.518 ops/s
Iteration   3: 14784702.820 ops/s
Iteration   4: 14872349.356 ops/s
Iteration   5: 14995546.966 ops/s
Iteration   6: 14739753.805 ops/s
Iteration   7: 15048766.374 ops/s
Iteration   8: 15057453.789 ops/s
Iteration   9: 14953395.867 ops/s
Iteration  10: 15087468.690 ops/s
Iteration  11: 15000325.037 ops/s
Iteration  12: 14963104.753 ops/s
Iteration  13: 14899086.897 ops/s
Iteration  14: 15023329.971 ops/s
Iteration  15: 15098333.228 ops/s
Iteration  16: 15060208.330 ops/s
Iteration  17: 15053598.948 ops/s
Iteration  18: 14976868.440 ops/s
Iteration  19: 15065420.333 ops/s
Iteration  20: 14888781.898 ops/s
Iteration  21: 15083466.219 ops/s
Iteration  22: 15066509.495 ops/s
Iteration  23: 15087601.895 ops/s
Iteration  24: 15120669.316 ops/s
Iteration  25: 15086933.367 ops/s
Iteration  26: 15015932.522 ops/s
Iteration  27: 14743279.664 ops/s
Iteration  28: 14914617.658 ops/s
Iteration  29: 14814378.376 ops/s
Iteration  30: 14885499.551 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWithTarget":
  14969915.017 ±(99.9%) 79075.712 ops/s [Average]
  (min, avg, max) = (14717504.421, 14969915.017, 15120669.316), stdev = 118356.812
  CI (99.9%): [14890839.305, 15048990.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  14969915.017 ± 79075.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26433896.612 ops/s
# Warmup Iteration   2: 46403520.445 ops/s
# Warmup Iteration   3: 52085950.993 ops/s
# Warmup Iteration   4: 51980269.874 ops/s
# Warmup Iteration   5: 52055489.500 ops/s
# Warmup Iteration   6: 51990528.343 ops/s
# Warmup Iteration   7: 52290587.861 ops/s
# Warmup Iteration   8: 52067853.926 ops/s
# Warmup Iteration   9: 52084811.343 ops/s
# Warmup Iteration  10: 52539366.741 ops/s
# Warmup Iteration  11: 51897040.511 ops/s
# Warmup Iteration  12: 51686939.676 ops/s
# Warmup Iteration  13: 51736966.313 ops/s
# Warmup Iteration  14: 51407526.280 ops/s
# Warmup Iteration  15: 51982599.006 ops/s
# Warmup Iteration  16: 51791508.755 ops/s
# Warmup Iteration  17: 51784650.121 ops/s
# Warmup Iteration  18: 51754328.335 ops/s
# Warmup Iteration  19: 51589512.243 ops/s
# Warmup Iteration  20: 52416843.631 ops/s
# Warmup Iteration  21: 51835800.080 ops/s
# Warmup Iteration  22: 51664686.755 ops/s
# Warmup Iteration  23: 52172335.193 ops/s
# Warmup Iteration  24: 51816458.710 ops/s
# Warmup Iteration  25: 50315885.376 ops/s
# Warmup Iteration  26: 50026095.798 ops/s
# Warmup Iteration  27: 51076635.956 ops/s
# Warmup Iteration  28: 52226872.656 ops/s
# Warmup Iteration  29: 51533649.408 ops/s
# Warmup Iteration  30: 51892314.784 ops/s
Iteration   1: 51763514.945 ops/s
Iteration   2: 51745960.649 ops/s
Iteration   3: 51956604.975 ops/s
Iteration   4: 52226125.596 ops/s
Iteration   5: 52302643.932 ops/s
Iteration   6: 52005731.069 ops/s
Iteration   7: 52191013.880 ops/s
Iteration   8: 51541481.433 ops/s
Iteration   9: 52026664.212 ops/s
Iteration  10: 51451385.296 ops/s
Iteration  11: 51959668.248 ops/s
Iteration  12: 52644622.579 ops/s
Iteration  13: 52688704.906 ops/s
Iteration  14: 51898039.523 ops/s
Iteration  15: 51954745.894 ops/s
Iteration  16: 52258288.234 ops/s
Iteration  17: 52357792.928 ops/s
Iteration  18: 52090687.051 ops/s
Iteration  19: 52204809.573 ops/s
Iteration  20: 51406608.867 ops/s
Iteration  21: 51996911.346 ops/s
Iteration  22: 51878183.063 ops/s
Iteration  23: 51931941.078 ops/s
Iteration  24: 51654628.121 ops/s
Iteration  25: 52208326.418 ops/s
Iteration  26: 50849354.579 ops/s
Iteration  27: 51580313.908 ops/s
Iteration  28: 50677562.396 ops/s
Iteration  29: 51615289.062 ops/s
Iteration  30: 51243046.644 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEach":
  51877021.680 ±(99.9%) 304222.291 ops/s [Average]
  (min, avg, max) = (50677562.396, 51877021.680, 52688704.906), stdev = 455345.638
  CI (99.9%): [51572799.389, 52181243.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forEach  thrpt   30  51877021.680 ± 304222.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149233.685 ops/s
# Warmup Iteration   2: 167177.430 ops/s
# Warmup Iteration   3: 204215.626 ops/s
# Warmup Iteration   4: 221473.188 ops/s
# Warmup Iteration   5: 221489.539 ops/s
# Warmup Iteration   6: 219877.493 ops/s
# Warmup Iteration   7: 222357.138 ops/s
# Warmup Iteration   8: 221947.158 ops/s
# Warmup Iteration   9: 222432.161 ops/s
# Warmup Iteration  10: 218286.901 ops/s
# Warmup Iteration  11: 218787.831 ops/s
# Warmup Iteration  12: 220911.134 ops/s
# Warmup Iteration  13: 210610.350 ops/s
# Warmup Iteration  14: 195888.586 ops/s
# Warmup Iteration  15: 219179.013 ops/s
# Warmup Iteration  16: 219421.811 ops/s
# Warmup Iteration  17: 224461.048 ops/s
# Warmup Iteration  18: 226124.867 ops/s
# Warmup Iteration  19: 223878.514 ops/s
# Warmup Iteration  20: 224065.941 ops/s
# Warmup Iteration  21: 223910.871 ops/s
# Warmup Iteration  22: 221441.947 ops/s
# Warmup Iteration  23: 224637.032 ops/s
# Warmup Iteration  24: 224643.599 ops/s
# Warmup Iteration  25: 231428.292 ops/s
# Warmup Iteration  26: 225787.774 ops/s
# Warmup Iteration  27: 229696.951 ops/s
# Warmup Iteration  28: 227048.655 ops/s
# Warmup Iteration  29: 230729.360 ops/s
# Warmup Iteration  30: 230705.326 ops/s
Iteration   1: 231454.685 ops/s
Iteration   2: 231167.151 ops/s
Iteration   3: 232045.587 ops/s
Iteration   4: 230540.764 ops/s
Iteration   5: 231027.507 ops/s
Iteration   6: 229688.646 ops/s
Iteration   7: 228862.737 ops/s
Iteration   8: 230072.015 ops/s
Iteration   9: 220376.449 ops/s
Iteration  10: 220856.112 ops/s
Iteration  11: 230222.244 ops/s
Iteration  12: 231690.990 ops/s
Iteration  13: 228094.736 ops/s
Iteration  14: 231270.713 ops/s
Iteration  15: 230118.411 ops/s
Iteration  16: 230014.932 ops/s
Iteration  17: 228649.478 ops/s
Iteration  18: 224324.928 ops/s
Iteration  19: 225780.129 ops/s
Iteration  20: 225783.109 ops/s
Iteration  21: 223846.326 ops/s
Iteration  22: 223666.908 ops/s
Iteration  23: 231794.373 ops/s
Iteration  24: 230336.009 ops/s
Iteration  25: 219795.980 ops/s
Iteration  26: 223419.884 ops/s
Iteration  27: 227080.855 ops/s
Iteration  28: 231750.075 ops/s
Iteration  29: 231820.223 ops/s
Iteration  30: 229029.059 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachFromTo":
  228152.701 ±(99.9%) 2501.729 ops/s [Average]
  (min, avg, max) = (219795.980, 228152.701, 232045.587), stdev = 3744.470
  CI (99.9%): [225650.972, 230654.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachFromTo  thrpt   30  228152.701 ± 2501.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27812567.397 ops/s
# Warmup Iteration   2: 46602972.787 ops/s
# Warmup Iteration   3: 54964594.045 ops/s
# Warmup Iteration   4: 56626514.574 ops/s
# Warmup Iteration   5: 56183193.306 ops/s
# Warmup Iteration   6: 55108503.513 ops/s
# Warmup Iteration   7: 55493331.448 ops/s
# Warmup Iteration   8: 56085983.349 ops/s
# Warmup Iteration   9: 56005025.443 ops/s
# Warmup Iteration  10: 56740420.467 ops/s
# Warmup Iteration  11: 56024570.634 ops/s
# Warmup Iteration  12: 55910752.183 ops/s
# Warmup Iteration  13: 57019247.424 ops/s
# Warmup Iteration  14: 56377380.381 ops/s
# Warmup Iteration  15: 56186160.727 ops/s
# Warmup Iteration  16: 55710733.892 ops/s
# Warmup Iteration  17: 56731779.773 ops/s
# Warmup Iteration  18: 56927971.106 ops/s
# Warmup Iteration  19: 57038532.180 ops/s
# Warmup Iteration  20: 56334688.298 ops/s
# Warmup Iteration  21: 54879691.390 ops/s
# Warmup Iteration  22: 55437922.939 ops/s
# Warmup Iteration  23: 56202839.708 ops/s
# Warmup Iteration  24: 56721989.390 ops/s
# Warmup Iteration  25: 56537870.171 ops/s
# Warmup Iteration  26: 56387267.064 ops/s
# Warmup Iteration  27: 56853933.904 ops/s
# Warmup Iteration  28: 56780472.959 ops/s
# Warmup Iteration  29: 56449075.731 ops/s
# Warmup Iteration  30: 54742849.889 ops/s
Iteration   1: 55799446.603 ops/s
Iteration   2: 57019595.142 ops/s
Iteration   3: 55559341.539 ops/s
Iteration   4: 56859600.492 ops/s
Iteration   5: 56699557.053 ops/s
Iteration   6: 56686138.480 ops/s
Iteration   7: 55792301.987 ops/s
Iteration   8: 56818160.590 ops/s
Iteration   9: 55274043.363 ops/s
Iteration  10: 55438146.716 ops/s
Iteration  11: 56629256.617 ops/s
Iteration  12: 55722695.208 ops/s
Iteration  13: 56089954.992 ops/s
Iteration  14: 56788259.820 ops/s
Iteration  15: 56859772.758 ops/s
Iteration  16: 56898578.691 ops/s
Iteration  17: 56820793.139 ops/s
Iteration  18: 56831441.716 ops/s
Iteration  19: 57291645.071 ops/s
Iteration  20: 56808512.825 ops/s
Iteration  21: 56601660.506 ops/s
Iteration  22: 56258940.866 ops/s
Iteration  23: 56206048.926 ops/s
Iteration  24: 57003731.829 ops/s
Iteration  25: 55398150.933 ops/s
Iteration  26: 56739925.952 ops/s
Iteration  27: 55970525.765 ops/s
Iteration  28: 55919258.814 ops/s
Iteration  29: 56225331.358 ops/s
Iteration  30: 56319155.556 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWith":
  56377665.777 ±(99.9%) 374957.736 ops/s [Average]
  (min, avg, max) = (55274043.363, 56377665.777, 57291645.071), stdev = 561219.131
  CI (99.9%): [56002708.041, 56752623.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWith  thrpt   30  56377665.777 ± 374957.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27898282.041 ops/s
# Warmup Iteration   2: 46788123.177 ops/s
# Warmup Iteration   3: 55267694.163 ops/s
# Warmup Iteration   4: 55606103.804 ops/s
# Warmup Iteration   5: 54573742.479 ops/s
# Warmup Iteration   6: 55505662.100 ops/s
# Warmup Iteration   7: 56217831.273 ops/s
# Warmup Iteration   8: 55835931.613 ops/s
# Warmup Iteration   9: 56146479.527 ops/s
# Warmup Iteration  10: 55872576.707 ops/s
# Warmup Iteration  11: 54346641.461 ops/s
# Warmup Iteration  12: 55927929.268 ops/s
# Warmup Iteration  13: 55848440.327 ops/s
# Warmup Iteration  14: 56129711.997 ops/s
# Warmup Iteration  15: 55455410.754 ops/s
# Warmup Iteration  16: 54976029.661 ops/s
# Warmup Iteration  17: 55205898.974 ops/s
# Warmup Iteration  18: 55425259.701 ops/s
# Warmup Iteration  19: 55696705.563 ops/s
# Warmup Iteration  20: 54731008.407 ops/s
# Warmup Iteration  21: 54943407.222 ops/s
# Warmup Iteration  22: 54505589.473 ops/s
# Warmup Iteration  23: 54956568.657 ops/s
# Warmup Iteration  24: 55180089.515 ops/s
# Warmup Iteration  25: 55031177.579 ops/s
# Warmup Iteration  26: 55326440.233 ops/s
# Warmup Iteration  27: 55716295.723 ops/s
# Warmup Iteration  28: 55416501.217 ops/s
# Warmup Iteration  29: 55407986.021 ops/s
# Warmup Iteration  30: 55755488.903 ops/s
Iteration   1: 54721866.640 ops/s
Iteration   2: 54763452.585 ops/s
Iteration   3: 54737607.021 ops/s
Iteration   4: 55924174.559 ops/s
Iteration   5: 55448777.172 ops/s
Iteration   6: 55820290.325 ops/s
Iteration   7: 55724535.188 ops/s
Iteration   8: 55984783.276 ops/s
Iteration   9: 55701800.104 ops/s
Iteration  10: 55818254.929 ops/s
Iteration  11: 54339795.292 ops/s
Iteration  12: 56064162.647 ops/s
Iteration  13: 55912475.513 ops/s
Iteration  14: 54155193.311 ops/s
Iteration  15: 55875837.646 ops/s
Iteration  16: 54592535.503 ops/s
Iteration  17: 54851449.966 ops/s
Iteration  18: 54932049.675 ops/s
Iteration  19: 55643121.583 ops/s
Iteration  20: 53094918.795 ops/s
Iteration  21: 55947641.426 ops/s
Iteration  22: 55016268.261 ops/s
Iteration  23: 55725513.100 ops/s
Iteration  24: 55989746.897 ops/s
Iteration  25: 56224840.820 ops/s
Iteration  26: 56289710.655 ops/s
Iteration  27: 55748017.314 ops/s
Iteration  28: 55980338.670 ops/s
Iteration  29: 55466264.462 ops/s
Iteration  30: 55541997.948 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndex":
  55401247.376 ±(99.9%) 488041.657 ops/s [Average]
  (min, avg, max) = (53094918.795, 55401247.376, 56289710.655), stdev = 730477.832
  CI (99.9%): [54913205.719, 55889289.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  55401247.376 ± 488041.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24729739.702 ops/s
# Warmup Iteration   2: 43734712.439 ops/s
# Warmup Iteration   3: 47569590.898 ops/s
# Warmup Iteration   4: 50811726.965 ops/s
# Warmup Iteration   5: 50558585.744 ops/s
# Warmup Iteration   6: 50863284.219 ops/s
# Warmup Iteration   7: 51000823.893 ops/s
# Warmup Iteration   8: 50069868.705 ops/s
# Warmup Iteration   9: 50786362.084 ops/s
# Warmup Iteration  10: 50768750.579 ops/s
# Warmup Iteration  11: 50683274.951 ops/s
# Warmup Iteration  12: 50165430.550 ops/s
# Warmup Iteration  13: 50538430.919 ops/s
# Warmup Iteration  14: 50946554.825 ops/s
# Warmup Iteration  15: 50834940.138 ops/s
# Warmup Iteration  16: 50232479.835 ops/s
# Warmup Iteration  17: 50737364.465 ops/s
# Warmup Iteration  18: 50213101.668 ops/s
# Warmup Iteration  19: 51008946.592 ops/s
# Warmup Iteration  20: 51122841.320 ops/s
# Warmup Iteration  21: 50654956.682 ops/s
# Warmup Iteration  22: 50867685.870 ops/s
# Warmup Iteration  23: 50777126.487 ops/s
# Warmup Iteration  24: 51105391.610 ops/s
# Warmup Iteration  25: 50065227.207 ops/s
# Warmup Iteration  26: 50210547.556 ops/s
# Warmup Iteration  27: 50326496.034 ops/s
# Warmup Iteration  28: 49666641.159 ops/s
# Warmup Iteration  29: 49650956.872 ops/s
# Warmup Iteration  30: 50835804.067 ops/s
Iteration   1: 50983646.383 ops/s
Iteration   2: 50778765.080 ops/s
Iteration   3: 50717076.733 ops/s
Iteration   4: 50883820.972 ops/s
Iteration   5: 50777413.760 ops/s
Iteration   6: 50785480.540 ops/s
Iteration   7: 50950992.941 ops/s
Iteration   8: 50911868.734 ops/s
Iteration   9: 51001226.114 ops/s
Iteration  10: 50810888.395 ops/s
Iteration  11: 49437181.100 ops/s
Iteration  12: 50128772.963 ops/s
Iteration  13: 48760936.977 ops/s
Iteration  14: 50227917.254 ops/s
Iteration  15: 49987560.292 ops/s
Iteration  16: 49693075.999 ops/s
Iteration  17: 49631685.004 ops/s
Iteration  18: 50024893.287 ops/s
Iteration  19: 50841864.182 ops/s
Iteration  20: 50343604.339 ops/s
Iteration  21: 50416454.703 ops/s
Iteration  22: 50272255.473 ops/s
Iteration  23: 50044377.919 ops/s
Iteration  24: 48928133.617 ops/s
Iteration  25: 50943620.680 ops/s
Iteration  26: 50734362.499 ops/s
Iteration  27: 50793982.096 ops/s
Iteration  28: 50635872.483 ops/s
Iteration  29: 50506055.319 ops/s
Iteration  30: 49750727.903 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  50356817.125 ±(99.9%) 408214.232 ops/s [Average]
  (min, avg, max) = (48760936.977, 50356817.125, 51001226.114), stdev = 610995.892
  CI (99.9%): [49948602.893, 50765031.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  50356817.125 ± 408214.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162979880.520 ops/s
# Warmup Iteration   2: 298912797.529 ops/s
# Warmup Iteration   3: 260453901.740 ops/s
# Warmup Iteration   4: 312628109.595 ops/s
# Warmup Iteration   5: 312631922.704 ops/s
# Warmup Iteration   6: 312071913.364 ops/s
# Warmup Iteration   7: 312619788.227 ops/s
# Warmup Iteration   8: 309505593.864 ops/s
# Warmup Iteration   9: 307844396.159 ops/s
# Warmup Iteration  10: 304997026.218 ops/s
# Warmup Iteration  11: 308264229.369 ops/s
# Warmup Iteration  12: 311174426.971 ops/s
# Warmup Iteration  13: 305418717.941 ops/s
# Warmup Iteration  14: 310368120.914 ops/s
# Warmup Iteration  15: 311621066.930 ops/s
# Warmup Iteration  16: 311251260.379 ops/s
# Warmup Iteration  17: 308095319.553 ops/s
# Warmup Iteration  18: 309304554.970 ops/s
# Warmup Iteration  19: 310665912.913 ops/s
# Warmup Iteration  20: 310784132.305 ops/s
# Warmup Iteration  21: 307176585.744 ops/s
# Warmup Iteration  22: 304026667.098 ops/s
# Warmup Iteration  23: 310466791.295 ops/s
# Warmup Iteration  24: 304677012.111 ops/s
# Warmup Iteration  25: 309060381.630 ops/s
# Warmup Iteration  26: 310005670.206 ops/s
# Warmup Iteration  27: 308219483.870 ops/s
# Warmup Iteration  28: 309532474.094 ops/s
# Warmup Iteration  29: 310206850.499 ops/s
# Warmup Iteration  30: 309508872.911 ops/s
Iteration   1: 311522560.967 ops/s
Iteration   2: 307948770.825 ops/s
Iteration   3: 311168587.319 ops/s
Iteration   4: 308269102.561 ops/s
Iteration   5: 307188774.823 ops/s
Iteration   6: 311100005.094 ops/s
Iteration   7: 309134120.481 ops/s
Iteration   8: 307342985.056 ops/s
Iteration   9: 304726315.942 ops/s
Iteration  10: 310750175.125 ops/s
Iteration  11: 311556255.790 ops/s
Iteration  12: 311864324.670 ops/s
Iteration  13: 307402613.989 ops/s
Iteration  14: 307692754.646 ops/s
Iteration  15: 309003401.530 ops/s
Iteration  16: 309727326.399 ops/s
Iteration  17: 312206046.481 ops/s
Iteration  18: 307660354.247 ops/s
Iteration  19: 307861923.890 ops/s
Iteration  20: 309187121.852 ops/s
Iteration  21: 310738455.348 ops/s
Iteration  22: 310807910.473 ops/s
Iteration  23: 311065603.195 ops/s
Iteration  24: 310446070.456 ops/s
Iteration  25: 309320070.114 ops/s
Iteration  26: 306528992.890 ops/s
Iteration  27: 308477381.413 ops/s
Iteration  28: 307876815.197 ops/s
Iteration  29: 303513680.453 ops/s
Iteration  30: 308678911.465 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_forLoop":
  309025580.423 ±(99.9%) 1403606.576 ops/s [Average]
  (min, avg, max) = (303513680.453, 309025580.423, 312206046.481), stdev = 2100852.404
  CI (99.9%): [307621973.848, 310429186.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_forLoop  thrpt   30  309025580.423 ± 1403606.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63233123.512 ops/s
# Warmup Iteration   2: 121023022.345 ops/s
# Warmup Iteration   3: 113855295.507 ops/s
# Warmup Iteration   4: 133160051.635 ops/s
# Warmup Iteration   5: 134262829.380 ops/s
# Warmup Iteration   6: 134217617.955 ops/s
# Warmup Iteration   7: 134549911.034 ops/s
# Warmup Iteration   8: 133423958.839 ops/s
# Warmup Iteration   9: 133369284.923 ops/s
# Warmup Iteration  10: 132515833.179 ops/s
# Warmup Iteration  11: 129833066.983 ops/s
# Warmup Iteration  12: 130430424.664 ops/s
# Warmup Iteration  13: 132218568.747 ops/s
# Warmup Iteration  14: 132240228.373 ops/s
# Warmup Iteration  15: 133522985.545 ops/s
# Warmup Iteration  16: 131673737.637 ops/s
# Warmup Iteration  17: 133843197.005 ops/s
# Warmup Iteration  18: 132182473.892 ops/s
# Warmup Iteration  19: 132702614.341 ops/s
# Warmup Iteration  20: 132679940.200 ops/s
# Warmup Iteration  21: 134547097.637 ops/s
# Warmup Iteration  22: 134447460.730 ops/s
# Warmup Iteration  23: 134397323.838 ops/s
# Warmup Iteration  24: 135093851.773 ops/s
# Warmup Iteration  25: 134451422.663 ops/s
# Warmup Iteration  26: 134157795.025 ops/s
# Warmup Iteration  27: 134465131.582 ops/s
# Warmup Iteration  28: 134901416.411 ops/s
# Warmup Iteration  29: 134762322.426 ops/s
# Warmup Iteration  30: 131512153.362 ops/s
Iteration   1: 131423199.479 ops/s
Iteration   2: 133603315.634 ops/s
Iteration   3: 133958082.683 ops/s
Iteration   4: 134785562.012 ops/s
Iteration   5: 134704536.008 ops/s
Iteration   6: 133877915.864 ops/s
Iteration   7: 133473052.723 ops/s
Iteration   8: 131350589.811 ops/s
Iteration   9: 133094992.708 ops/s
Iteration  10: 128831809.126 ops/s
Iteration  11: 133968202.298 ops/s
Iteration  12: 133620972.713 ops/s
Iteration  13: 133922767.249 ops/s
Iteration  14: 130276184.694 ops/s
Iteration  15: 132085863.196 ops/s
Iteration  16: 132594105.438 ops/s
Iteration  17: 134259229.518 ops/s
Iteration  18: 135207642.737 ops/s
Iteration  19: 134767009.815 ops/s
Iteration  20: 135020003.262 ops/s
Iteration  21: 134859798.897 ops/s
Iteration  22: 134936003.413 ops/s
Iteration  23: 133491815.870 ops/s
Iteration  24: 134699440.960 ops/s
Iteration  25: 134937981.840 ops/s
Iteration  26: 134719362.260 ops/s
Iteration  27: 134878617.273 ops/s
Iteration  28: 133391597.274 ops/s
Iteration  29: 133612097.728 ops/s
Iteration  30: 135163735.272 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getFirst":
  133650516.259 ±(99.9%) 1025389.587 ops/s [Average]
  (min, avg, max) = (128831809.126, 133650516.259, 135207642.737), stdev = 1534754.978
  CI (99.9%): [132625126.672, 134675905.845] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_getFirst  thrpt   30  133650516.259 ± 1025389.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63242810.787 ops/s
# Warmup Iteration   2: 121832451.651 ops/s
# Warmup Iteration   3: 114744688.688 ops/s
# Warmup Iteration   4: 134906763.183 ops/s
# Warmup Iteration   5: 134947471.473 ops/s
# Warmup Iteration   6: 135015611.613 ops/s
# Warmup Iteration   7: 134560828.734 ops/s
# Warmup Iteration   8: 134303567.454 ops/s
# Warmup Iteration   9: 134756318.175 ops/s
# Warmup Iteration  10: 134931742.011 ops/s
# Warmup Iteration  11: 134841714.993 ops/s
# Warmup Iteration  12: 135018710.216 ops/s
# Warmup Iteration  13: 134779678.875 ops/s
# Warmup Iteration  14: 135010000.676 ops/s
# Warmup Iteration  15: 134507889.341 ops/s
# Warmup Iteration  16: 134478433.229 ops/s
# Warmup Iteration  17: 134757122.993 ops/s
# Warmup Iteration  18: 135124912.155 ops/s
# Warmup Iteration  19: 134496846.931 ops/s
# Warmup Iteration  20: 134673316.947 ops/s
# Warmup Iteration  21: 134847251.871 ops/s
# Warmup Iteration  22: 135037957.927 ops/s
# Warmup Iteration  23: 134550521.505 ops/s
# Warmup Iteration  24: 134862911.579 ops/s
# Warmup Iteration  25: 135104036.498 ops/s
# Warmup Iteration  26: 134405540.868 ops/s
# Warmup Iteration  27: 134619433.339 ops/s
# Warmup Iteration  28: 134965499.823 ops/s
# Warmup Iteration  29: 134822744.555 ops/s
# Warmup Iteration  30: 134750699.148 ops/s
Iteration   1: 134391430.422 ops/s
Iteration   2: 134845321.503 ops/s
Iteration   3: 134722277.546 ops/s
Iteration   4: 135073107.423 ops/s
Iteration   5: 135325911.744 ops/s
Iteration   6: 134911495.572 ops/s
Iteration   7: 134644223.920 ops/s
Iteration   8: 134858137.129 ops/s
Iteration   9: 134661779.171 ops/s
Iteration  10: 135244066.890 ops/s
Iteration  11: 135204566.438 ops/s
Iteration  12: 134525312.251 ops/s
Iteration  13: 134794987.641 ops/s
Iteration  14: 135174147.891 ops/s
Iteration  15: 134856027.944 ops/s
Iteration  16: 135462554.446 ops/s
Iteration  17: 134740152.827 ops/s
Iteration  18: 135127582.160 ops/s
Iteration  19: 134064485.436 ops/s
Iteration  20: 135108145.391 ops/s
Iteration  21: 135382585.383 ops/s
Iteration  22: 135165619.304 ops/s
Iteration  23: 135346641.371 ops/s
Iteration  24: 134998275.121 ops/s
Iteration  25: 135122919.026 ops/s
Iteration  26: 134714881.229 ops/s
Iteration  27: 134791853.762 ops/s
Iteration  28: 134676219.428 ops/s
Iteration  29: 134642226.724 ops/s
Iteration  30: 134658366.623 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getLast":
  134907843.391 ±(99.9%) 214343.508 ops/s [Average]
  (min, avg, max) = (134064485.436, 134907843.391, 135462554.446), stdev = 320819.297
  CI (99.9%): [134693499.883, 135122186.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_getLast  thrpt   30  134907843.391 ± 214343.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773410.567 ops/s
# Warmup Iteration   2: 801671.047 ops/s
# Warmup Iteration   3: 993552.599 ops/s
# Warmup Iteration   4: 1026211.304 ops/s
# Warmup Iteration   5: 1028075.505 ops/s
# Warmup Iteration   6: 1022000.912 ops/s
# Warmup Iteration   7: 1026952.851 ops/s
# Warmup Iteration   8: 1026236.417 ops/s
# Warmup Iteration   9: 1030134.045 ops/s
# Warmup Iteration  10: 1029435.987 ops/s
# Warmup Iteration  11: 1027622.655 ops/s
# Warmup Iteration  12: 1028153.456 ops/s
# Warmup Iteration  13: 874806.672 ops/s
# Warmup Iteration  14: 1026857.229 ops/s
# Warmup Iteration  15: 1028691.524 ops/s
# Warmup Iteration  16: 1026566.699 ops/s
# Warmup Iteration  17: 1090027.681 ops/s
# Warmup Iteration  18: 1089820.243 ops/s
# Warmup Iteration  19: 1092978.495 ops/s
# Warmup Iteration  20: 1091201.516 ops/s
# Warmup Iteration  21: 1089980.417 ops/s
# Warmup Iteration  22: 1089747.575 ops/s
# Warmup Iteration  23: 1087266.261 ops/s
# Warmup Iteration  24: 1087261.474 ops/s
# Warmup Iteration  25: 1090630.682 ops/s
# Warmup Iteration  26: 1092621.398 ops/s
# Warmup Iteration  27: 1090106.876 ops/s
# Warmup Iteration  28: 1090341.359 ops/s
# Warmup Iteration  29: 1087981.322 ops/s
# Warmup Iteration  30: 1091149.847 ops/s
Iteration   1: 1087525.915 ops/s
Iteration   2: 1087699.523 ops/s
Iteration   3: 1091176.179 ops/s
Iteration   4: 1077345.007 ops/s
Iteration   5: 1092554.546 ops/s
Iteration   6: 1087373.684 ops/s
Iteration   7: 1094455.640 ops/s
Iteration   8: 1088430.865 ops/s
Iteration   9: 1087928.474 ops/s
Iteration  10: 1090567.845 ops/s
Iteration  11: 1090990.178 ops/s
Iteration  12: 1091250.074 ops/s
Iteration  13: 1088986.766 ops/s
Iteration  14: 1088704.628 ops/s
Iteration  15: 1091965.607 ops/s
Iteration  16: 1086355.633 ops/s
Iteration  17: 1088810.251 ops/s
Iteration  18: 1089406.676 ops/s
Iteration  19: 1086466.848 ops/s
Iteration  20: 1090875.598 ops/s
Iteration  21: 1087776.753 ops/s
Iteration  22: 1090794.236 ops/s
Iteration  23: 1085386.118 ops/s
Iteration  24: 1095087.368 ops/s
Iteration  25: 1087306.540 ops/s
Iteration  26: 1091872.479 ops/s
Iteration  27: 1092837.599 ops/s
Iteration  28: 1091554.441 ops/s
Iteration  29: 1087506.022 ops/s
Iteration  30: 1092649.051 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_getOnly":
  1089388.018 ±(99.9%) 2242.399 ops/s [Average]
  (min, avg, max) = (1077345.007, 1089388.018, 1095087.368), stdev = 3356.318
  CI (99.9%): [1087145.619, 1091630.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_getOnly  thrpt   30  1089388.018 ± 2242.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2404978.540 ops/s
# Warmup Iteration   2: 5013329.874 ops/s
# Warmup Iteration   3: 5379237.208 ops/s
# Warmup Iteration   4: 5678871.530 ops/s
# Warmup Iteration   5: 5698214.272 ops/s
# Warmup Iteration   6: 5685551.644 ops/s
# Warmup Iteration   7: 5702649.697 ops/s
# Warmup Iteration   8: 5676499.483 ops/s
# Warmup Iteration   9: 5702604.961 ops/s
# Warmup Iteration  10: 5661538.556 ops/s
# Warmup Iteration  11: 5680410.937 ops/s
# Warmup Iteration  12: 5659266.367 ops/s
# Warmup Iteration  13: 5682978.786 ops/s
# Warmup Iteration  14: 5663010.403 ops/s
# Warmup Iteration  15: 5683522.794 ops/s
# Warmup Iteration  16: 5689902.897 ops/s
# Warmup Iteration  17: 5691529.630 ops/s
# Warmup Iteration  18: 5664444.806 ops/s
# Warmup Iteration  19: 5692176.545 ops/s
# Warmup Iteration  20: 5679709.829 ops/s
# Warmup Iteration  21: 5648837.157 ops/s
# Warmup Iteration  22: 5679936.748 ops/s
# Warmup Iteration  23: 5675160.576 ops/s
# Warmup Iteration  24: 5696124.328 ops/s
# Warmup Iteration  25: 5680409.108 ops/s
# Warmup Iteration  26: 5690944.026 ops/s
# Warmup Iteration  27: 5687285.552 ops/s
# Warmup Iteration  28: 5686240.332 ops/s
# Warmup Iteration  29: 5702595.517 ops/s
# Warmup Iteration  30: 5696287.788 ops/s
Iteration   1: 5702549.910 ops/s
Iteration   2: 5676102.396 ops/s
Iteration   3: 5698847.228 ops/s
Iteration   4: 5704098.289 ops/s
Iteration   5: 5669217.773 ops/s
Iteration   6: 5701847.381 ops/s
Iteration   7: 5715578.166 ops/s
Iteration   8: 5687910.125 ops/s
Iteration   9: 5719364.931 ops/s
Iteration  10: 5695459.541 ops/s
Iteration  11: 5694350.719 ops/s
Iteration  12: 5656620.421 ops/s
Iteration  13: 5684396.574 ops/s
Iteration  14: 5700351.355 ops/s
Iteration  15: 5699952.378 ops/s
Iteration  16: 5692279.393 ops/s
Iteration  17: 5679346.094 ops/s
Iteration  18: 5690115.249 ops/s
Iteration  19: 5677196.993 ops/s
Iteration  20: 5702637.390 ops/s
Iteration  21: 5673136.589 ops/s
Iteration  22: 5706809.524 ops/s
Iteration  23: 5691243.339 ops/s
Iteration  24: 5710785.822 ops/s
Iteration  25: 5687204.580 ops/s
Iteration  26: 5682782.515 ops/s
Iteration  27: 5657069.135 ops/s
Iteration  28: 5678040.724 ops/s
Iteration  29: 5694226.912 ops/s
Iteration  30: 5693874.201 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupBy":
  5690779.855 ±(99.9%) 10280.415 ops/s [Average]
  (min, avg, max) = (5656620.421, 5690779.855, 5719364.931), stdev = 15387.243
  CI (99.9%): [5680499.440, 5701060.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupBy  thrpt   30  5690779.855 ± 10280.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2435588.125 ops/s
# Warmup Iteration   2: 4933479.726 ops/s
# Warmup Iteration   3: 5544866.683 ops/s
# Warmup Iteration   4: 5697833.412 ops/s
# Warmup Iteration   5: 5695608.717 ops/s
# Warmup Iteration   6: 5706638.152 ops/s
# Warmup Iteration   7: 5738590.023 ops/s
# Warmup Iteration   8: 5711205.828 ops/s
# Warmup Iteration   9: 5711314.720 ops/s
# Warmup Iteration  10: 5693274.679 ops/s
# Warmup Iteration  11: 5688516.785 ops/s
# Warmup Iteration  12: 5679449.834 ops/s
# Warmup Iteration  13: 5679136.824 ops/s
# Warmup Iteration  14: 5683915.148 ops/s
# Warmup Iteration  15: 5696513.449 ops/s
# Warmup Iteration  16: 5678518.155 ops/s
# Warmup Iteration  17: 5709170.121 ops/s
# Warmup Iteration  18: 5715906.566 ops/s
# Warmup Iteration  19: 5695648.112 ops/s
# Warmup Iteration  20: 5714127.355 ops/s
# Warmup Iteration  21: 5700865.704 ops/s
# Warmup Iteration  22: 5704139.890 ops/s
# Warmup Iteration  23: 5687446.082 ops/s
# Warmup Iteration  24: 5668450.631 ops/s
# Warmup Iteration  25: 5679257.341 ops/s
# Warmup Iteration  26: 5685847.337 ops/s
# Warmup Iteration  27: 5702346.926 ops/s
# Warmup Iteration  28: 5698603.289 ops/s
# Warmup Iteration  29: 5715529.675 ops/s
# Warmup Iteration  30: 5705366.034 ops/s
Iteration   1: 5679238.143 ops/s
Iteration   2: 5676551.848 ops/s
Iteration   3: 5684724.956 ops/s
Iteration   4: 5722458.361 ops/s
Iteration   5: 5726331.823 ops/s
Iteration   6: 5697739.371 ops/s
Iteration   7: 5701775.979 ops/s
Iteration   8: 5687547.113 ops/s
Iteration   9: 5663089.072 ops/s
Iteration  10: 5659650.044 ops/s
Iteration  11: 5686790.061 ops/s
Iteration  12: 5720371.578 ops/s
Iteration  13: 5738178.696 ops/s
Iteration  14: 5722424.393 ops/s
Iteration  15: 5696121.248 ops/s
Iteration  16: 5683639.380 ops/s
Iteration  17: 5697498.660 ops/s
Iteration  18: 5716203.146 ops/s
Iteration  19: 5699285.093 ops/s
Iteration  20: 5714625.839 ops/s
Iteration  21: 5698804.363 ops/s
Iteration  22: 5671366.722 ops/s
Iteration  23: 5655535.534 ops/s
Iteration  24: 5682210.301 ops/s
Iteration  25: 5707510.767 ops/s
Iteration  26: 5717964.114 ops/s
Iteration  27: 5700751.186 ops/s
Iteration  28: 5705045.675 ops/s
Iteration  29: 5668266.098 ops/s
Iteration  30: 5687143.851 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEach":
  5695628.114 ±(99.9%) 14145.988 ops/s [Average]
  (min, avg, max) = (5655535.534, 5695628.114, 5738178.696), stdev = 21173.051
  CI (99.9%): [5681482.126, 5709774.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEach  thrpt   30  5695628.114 ± 14145.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEachWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEachWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3489725.239 ops/s
# Warmup Iteration   2: 7233773.638 ops/s
# Warmup Iteration   3: 6497865.482 ops/s
# Warmup Iteration   4: 7414381.826 ops/s
# Warmup Iteration   5: 7446523.971 ops/s
# Warmup Iteration   6: 7448234.866 ops/s
# Warmup Iteration   7: 7422539.631 ops/s
# Warmup Iteration   8: 7424383.607 ops/s
# Warmup Iteration   9: 7469547.403 ops/s
# Warmup Iteration  10: 7420304.269 ops/s
# Warmup Iteration  11: 7400947.828 ops/s
# Warmup Iteration  12: 7438549.405 ops/s
# Warmup Iteration  13: 7425023.759 ops/s
# Warmup Iteration  14: 7426669.713 ops/s
# Warmup Iteration  15: 7453305.283 ops/s
# Warmup Iteration  16: 7378975.647 ops/s
# Warmup Iteration  17: 7415988.491 ops/s
# Warmup Iteration  18: 7413734.253 ops/s
# Warmup Iteration  19: 7432246.155 ops/s
# Warmup Iteration  20: 7426443.182 ops/s
# Warmup Iteration  21: 7412307.522 ops/s
# Warmup Iteration  22: 7436308.066 ops/s
# Warmup Iteration  23: 7435309.599 ops/s
# Warmup Iteration  24: 7476019.607 ops/s
# Warmup Iteration  25: 7445716.830 ops/s
# Warmup Iteration  26: 7426938.416 ops/s
# Warmup Iteration  27: 7468662.355 ops/s
# Warmup Iteration  28: 7411729.605 ops/s
# Warmup Iteration  29: 7399460.522 ops/s
# Warmup Iteration  30: 7392271.172 ops/s
Iteration   1: 7388855.342 ops/s
Iteration   2: 7433102.643 ops/s
Iteration   3: 7442379.740 ops/s
Iteration   4: 7444538.427 ops/s
Iteration   5: 7398100.468 ops/s
Iteration   6: 7440399.275 ops/s
Iteration   7: 7428871.680 ops/s
Iteration   8: 7459234.716 ops/s
Iteration   9: 7463827.557 ops/s
Iteration  10: 7431233.104 ops/s
Iteration  11: 7403646.201 ops/s
Iteration  12: 7407464.341 ops/s
Iteration  13: 7407680.358 ops/s
Iteration  14: 7372119.501 ops/s
Iteration  15: 7411026.596 ops/s
Iteration  16: 7406380.703 ops/s
Iteration  17: 7426110.913 ops/s
Iteration  18: 7422072.254 ops/s
Iteration  19: 7384632.405 ops/s
Iteration  20: 7439468.460 ops/s
Iteration  21: 7432786.094 ops/s
Iteration  22: 7399338.229 ops/s
Iteration  23: 7419613.264 ops/s
Iteration  24: 7446579.830 ops/s
Iteration  25: 7398733.959 ops/s
Iteration  26: 7379299.382 ops/s
Iteration  27: 7453677.396 ops/s
Iteration  28: 7477484.404 ops/s
Iteration  29: 7419944.251 ops/s
Iteration  30: 7437319.670 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEachWithTarget":
  7422530.705 ±(99.9%) 17353.293 ops/s [Average]
  (min, avg, max) = (7372119.501, 7422530.705, 7477484.404), stdev = 25973.593
  CI (99.9%): [7405177.413, 7439883.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByEachWithTarget  thrpt   30  7422530.705 ± 17353.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13971264.042 ops/s
# Warmup Iteration   2: 26070325.314 ops/s
# Warmup Iteration   3: 28657999.514 ops/s
# Warmup Iteration   4: 30061589.061 ops/s
# Warmup Iteration   5: 29980366.865 ops/s
# Warmup Iteration   6: 30125239.915 ops/s
# Warmup Iteration   7: 30075375.992 ops/s
# Warmup Iteration   8: 29805131.375 ops/s
# Warmup Iteration   9: 30137810.975 ops/s
# Warmup Iteration  10: 29989363.310 ops/s
# Warmup Iteration  11: 30021479.079 ops/s
# Warmup Iteration  12: 30088251.761 ops/s
# Warmup Iteration  13: 30016766.213 ops/s
# Warmup Iteration  14: 30096289.744 ops/s
# Warmup Iteration  15: 30058980.222 ops/s
# Warmup Iteration  16: 30195748.373 ops/s
# Warmup Iteration  17: 29905516.607 ops/s
# Warmup Iteration  18: 29989965.882 ops/s
# Warmup Iteration  19: 29923506.193 ops/s
# Warmup Iteration  20: 30052026.367 ops/s
# Warmup Iteration  21: 30095273.447 ops/s
# Warmup Iteration  22: 30026902.961 ops/s
# Warmup Iteration  23: 29974790.417 ops/s
# Warmup Iteration  24: 30010349.143 ops/s
# Warmup Iteration  25: 30062109.039 ops/s
# Warmup Iteration  26: 30087077.181 ops/s
# Warmup Iteration  27: 29983626.691 ops/s
# Warmup Iteration  28: 29977783.583 ops/s
# Warmup Iteration  29: 30005894.797 ops/s
# Warmup Iteration  30: 29894870.715 ops/s
Iteration   1: 29953530.700 ops/s
Iteration   2: 30226899.949 ops/s
Iteration   3: 30020447.669 ops/s
Iteration   4: 29936171.150 ops/s
Iteration   5: 30267954.197 ops/s
Iteration   6: 30000011.222 ops/s
Iteration   7: 30064280.101 ops/s
Iteration   8: 30027563.897 ops/s
Iteration   9: 30111254.538 ops/s
Iteration  10: 29945064.672 ops/s
Iteration  11: 30108033.728 ops/s
Iteration  12: 29977775.847 ops/s
Iteration  13: 30126401.886 ops/s
Iteration  14: 30008778.753 ops/s
Iteration  15: 29934202.901 ops/s
Iteration  16: 29988138.652 ops/s
Iteration  17: 30048063.578 ops/s
Iteration  18: 29991845.234 ops/s
Iteration  19: 29938171.182 ops/s
Iteration  20: 29890469.455 ops/s
Iteration  21: 30128544.656 ops/s
Iteration  22: 30070758.483 ops/s
Iteration  23: 29980244.632 ops/s
Iteration  24: 30149556.622 ops/s
Iteration  25: 29860155.008 ops/s
Iteration  26: 29966331.870 ops/s
Iteration  27: 30111780.078 ops/s
Iteration  28: 29971683.804 ops/s
Iteration  29: 30159201.949 ops/s
Iteration  30: 29838482.394 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey":
  30026726.627 ±(99.9%) 69008.316 ops/s [Average]
  (min, avg, max) = (29838482.394, 30026726.627, 30267954.197), stdev = 103288.407
  CI (99.9%): [29957718.311, 30095734.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  30026726.627 ± 69008.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24685272.021 ops/s
# Warmup Iteration   2: 44061082.927 ops/s
# Warmup Iteration   3: 48203251.729 ops/s
# Warmup Iteration   4: 49861796.434 ops/s
# Warmup Iteration   5: 49837219.550 ops/s
# Warmup Iteration   6: 49810702.490 ops/s
# Warmup Iteration   7: 49819068.277 ops/s
# Warmup Iteration   8: 49857735.881 ops/s
# Warmup Iteration   9: 49968651.971 ops/s
# Warmup Iteration  10: 50067449.502 ops/s
# Warmup Iteration  11: 49777705.198 ops/s
# Warmup Iteration  12: 49899502.076 ops/s
# Warmup Iteration  13: 49798876.343 ops/s
# Warmup Iteration  14: 49909077.395 ops/s
# Warmup Iteration  15: 49944311.568 ops/s
# Warmup Iteration  16: 49892949.507 ops/s
# Warmup Iteration  17: 49867146.297 ops/s
# Warmup Iteration  18: 49810402.474 ops/s
# Warmup Iteration  19: 49909249.868 ops/s
# Warmup Iteration  20: 49758583.033 ops/s
# Warmup Iteration  21: 50025926.345 ops/s
# Warmup Iteration  22: 49877282.276 ops/s
# Warmup Iteration  23: 49910063.784 ops/s
# Warmup Iteration  24: 49996651.452 ops/s
# Warmup Iteration  25: 49851155.002 ops/s
# Warmup Iteration  26: 49789853.220 ops/s
# Warmup Iteration  27: 49932756.105 ops/s
# Warmup Iteration  28: 49851734.573 ops/s
# Warmup Iteration  29: 49909690.518 ops/s
# Warmup Iteration  30: 49879381.921 ops/s
Iteration   1: 49632391.621 ops/s
Iteration   2: 49636698.043 ops/s
Iteration   3: 49954118.522 ops/s
Iteration   4: 49862887.331 ops/s
Iteration   5: 49954263.270 ops/s
Iteration   6: 49931012.617 ops/s
Iteration   7: 49926232.080 ops/s
Iteration   8: 49756087.974 ops/s
Iteration   9: 49789575.791 ops/s
Iteration  10: 49902420.012 ops/s
Iteration  11: 50013400.076 ops/s
Iteration  12: 50017766.355 ops/s
Iteration  13: 50033142.786 ops/s
Iteration  14: 49830998.070 ops/s
Iteration  15: 49884233.407 ops/s
Iteration  16: 49819050.875 ops/s
Iteration  17: 49843429.471 ops/s
Iteration  18: 49957759.396 ops/s
Iteration  19: 49930500.671 ops/s
Iteration  20: 50041363.558 ops/s
Iteration  21: 50010200.153 ops/s
Iteration  22: 49830904.100 ops/s
Iteration  23: 50038075.065 ops/s
Iteration  24: 49856489.844 ops/s
Iteration  25: 49857282.527 ops/s
Iteration  26: 49944802.029 ops/s
Iteration  27: 49820075.805 ops/s
Iteration  28: 49918440.874 ops/s
Iteration  29: 49656174.291 ops/s
Iteration  30: 49602353.075 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  49875070.990 ±(99.9%) 82674.363 ops/s [Average]
  (min, avg, max) = (49602353.075, 49875070.990, 50041363.558), stdev = 123743.104
  CI (99.9%): [49792396.627, 49957745.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  49875070.990 ± 82674.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3539821.071 ops/s
# Warmup Iteration   2: 7167331.707 ops/s
# Warmup Iteration   3: 6845767.068 ops/s
# Warmup Iteration   4: 7597344.268 ops/s
# Warmup Iteration   5: 7550293.180 ops/s
# Warmup Iteration   6: 7571512.806 ops/s
# Warmup Iteration   7: 7549139.684 ops/s
# Warmup Iteration   8: 7575412.733 ops/s
# Warmup Iteration   9: 7595314.906 ops/s
# Warmup Iteration  10: 7565962.381 ops/s
# Warmup Iteration  11: 7573891.129 ops/s
# Warmup Iteration  12: 7567637.917 ops/s
# Warmup Iteration  13: 7582733.666 ops/s
# Warmup Iteration  14: 7552077.557 ops/s
# Warmup Iteration  15: 7547401.314 ops/s
# Warmup Iteration  16: 7529511.288 ops/s
# Warmup Iteration  17: 7556278.078 ops/s
# Warmup Iteration  18: 7536846.252 ops/s
# Warmup Iteration  19: 7545551.699 ops/s
# Warmup Iteration  20: 7552087.910 ops/s
# Warmup Iteration  21: 7512188.783 ops/s
# Warmup Iteration  22: 7595865.678 ops/s
# Warmup Iteration  23: 7543135.774 ops/s
# Warmup Iteration  24: 7538434.439 ops/s
# Warmup Iteration  25: 7537385.563 ops/s
# Warmup Iteration  26: 7577968.022 ops/s
# Warmup Iteration  27: 7514167.691 ops/s
# Warmup Iteration  28: 7603091.072 ops/s
# Warmup Iteration  29: 7478456.686 ops/s
# Warmup Iteration  30: 7598488.135 ops/s
Iteration   1: 7490408.194 ops/s
Iteration   2: 7548442.201 ops/s
Iteration   3: 7573325.959 ops/s
Iteration   4: 7530907.135 ops/s
Iteration   5: 7588253.692 ops/s
Iteration   6: 7584402.679 ops/s
Iteration   7: 7532741.028 ops/s
Iteration   8: 7518129.893 ops/s
Iteration   9: 7601042.278 ops/s
Iteration  10: 7564705.245 ops/s
Iteration  11: 7538786.896 ops/s
Iteration  12: 7520308.374 ops/s
Iteration  13: 7529038.481 ops/s
Iteration  14: 7543987.269 ops/s
Iteration  15: 7526033.889 ops/s
Iteration  16: 7457257.214 ops/s
Iteration  17: 7589291.485 ops/s
Iteration  18: 7504705.758 ops/s
Iteration  19: 7530448.149 ops/s
Iteration  20: 7603944.553 ops/s
Iteration  21: 7552927.907 ops/s
Iteration  22: 7568174.449 ops/s
Iteration  23: 7518198.742 ops/s
Iteration  24: 7564736.513 ops/s
Iteration  25: 7554553.253 ops/s
Iteration  26: 7554879.722 ops/s
Iteration  27: 7613013.945 ops/s
Iteration  28: 7510963.688 ops/s
Iteration  29: 7556075.975 ops/s
Iteration  30: 7517933.066 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByWithTarget":
  7546253.921 ±(99.9%) 23716.021 ops/s [Average]
  (min, avg, max) = (7457257.214, 7546253.921, 7613013.945), stdev = 35497.027
  CI (99.9%): [7522537.900, 7569969.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_groupByWithTarget  thrpt   30  7546253.921 ± 23716.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164105934.196 ops/s
# Warmup Iteration   2: 301337637.772 ops/s
# Warmup Iteration   3: 272619927.749 ops/s
# Warmup Iteration   4: 315123970.549 ops/s
# Warmup Iteration   5: 315439298.618 ops/s
# Warmup Iteration   6: 314073530.320 ops/s
# Warmup Iteration   7: 314693805.143 ops/s
# Warmup Iteration   8: 313205790.109 ops/s
# Warmup Iteration   9: 313977069.663 ops/s
# Warmup Iteration  10: 312593679.905 ops/s
# Warmup Iteration  11: 313320407.890 ops/s
# Warmup Iteration  12: 314507582.425 ops/s
# Warmup Iteration  13: 313818485.320 ops/s
# Warmup Iteration  14: 313259468.502 ops/s
# Warmup Iteration  15: 313918931.018 ops/s
# Warmup Iteration  16: 313661086.573 ops/s
# Warmup Iteration  17: 312671507.052 ops/s
# Warmup Iteration  18: 313822156.634 ops/s
# Warmup Iteration  19: 313565023.908 ops/s
# Warmup Iteration  20: 312037107.208 ops/s
# Warmup Iteration  21: 312808076.318 ops/s
# Warmup Iteration  22: 314406509.788 ops/s
# Warmup Iteration  23: 313125912.956 ops/s
# Warmup Iteration  24: 314571721.200 ops/s
# Warmup Iteration  25: 313906475.012 ops/s
# Warmup Iteration  26: 314363184.197 ops/s
# Warmup Iteration  27: 314714717.681 ops/s
# Warmup Iteration  28: 312892234.937 ops/s
# Warmup Iteration  29: 313725359.111 ops/s
# Warmup Iteration  30: 312217837.714 ops/s
Iteration   1: 313823694.059 ops/s
Iteration   2: 312845419.386 ops/s
Iteration   3: 314258109.763 ops/s
Iteration   4: 312805140.267 ops/s
Iteration   5: 313422591.061 ops/s
Iteration   6: 313239197.527 ops/s
Iteration   7: 313121769.792 ops/s
Iteration   8: 313240400.814 ops/s
Iteration   9: 313498377.135 ops/s
Iteration  10: 314819817.602 ops/s
Iteration  11: 314267510.119 ops/s
Iteration  12: 314369512.590 ops/s
Iteration  13: 313209879.351 ops/s
Iteration  14: 313816783.951 ops/s
Iteration  15: 314230848.093 ops/s
Iteration  16: 313567815.578 ops/s
Iteration  17: 314048420.971 ops/s
Iteration  18: 314344107.808 ops/s
Iteration  19: 314621785.446 ops/s
Iteration  20: 314235931.020 ops/s
Iteration  21: 313722026.761 ops/s
Iteration  22: 314270340.379 ops/s
Iteration  23: 311653308.901 ops/s
Iteration  24: 312582997.235 ops/s
Iteration  25: 313073001.209 ops/s
Iteration  26: 313426566.596 ops/s
Iteration  27: 313866403.734 ops/s
Iteration  28: 313655766.743 ops/s
Iteration  29: 313189716.590 ops/s
Iteration  30: 312953242.927 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_indexOf":
  313606016.114 ±(99.9%) 460832.822 ops/s [Average]
  (min, avg, max) = (311653308.901, 313606016.114, 314819817.602), stdev = 689752.926
  CI (99.9%): [313145183.291, 314066848.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_indexOf  thrpt   30  313606016.114 ± 460832.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32640786.682 ops/s
# Warmup Iteration   2: 62123922.877 ops/s
# Warmup Iteration   3: 61409332.166 ops/s
# Warmup Iteration   4: 67753210.120 ops/s
# Warmup Iteration   5: 68372611.320 ops/s
# Warmup Iteration   6: 67929548.071 ops/s
# Warmup Iteration   7: 67910006.440 ops/s
# Warmup Iteration   8: 67936083.549 ops/s
# Warmup Iteration   9: 68143585.380 ops/s
# Warmup Iteration  10: 68368255.850 ops/s
# Warmup Iteration  11: 67787041.845 ops/s
# Warmup Iteration  12: 68053909.654 ops/s
# Warmup Iteration  13: 68080722.955 ops/s
# Warmup Iteration  14: 67775201.729 ops/s
# Warmup Iteration  15: 67964971.887 ops/s
# Warmup Iteration  16: 68175529.405 ops/s
# Warmup Iteration  17: 67763452.118 ops/s
# Warmup Iteration  18: 67189227.905 ops/s
# Warmup Iteration  19: 67080564.979 ops/s
# Warmup Iteration  20: 67713800.755 ops/s
# Warmup Iteration  21: 67222882.780 ops/s
# Warmup Iteration  22: 66650509.720 ops/s
# Warmup Iteration  23: 67186565.688 ops/s
# Warmup Iteration  24: 67348354.362 ops/s
# Warmup Iteration  25: 67331194.435 ops/s
# Warmup Iteration  26: 67051260.832 ops/s
# Warmup Iteration  27: 66846149.210 ops/s
# Warmup Iteration  28: 67733997.337 ops/s
# Warmup Iteration  29: 67550772.046 ops/s
# Warmup Iteration  30: 68140967.065 ops/s
Iteration   1: 67657073.868 ops/s
Iteration   2: 67692783.702 ops/s
Iteration   3: 67574742.668 ops/s
Iteration   4: 67040582.014 ops/s
Iteration   5: 67469440.986 ops/s
Iteration   6: 67692009.605 ops/s
Iteration   7: 67261430.502 ops/s
Iteration   8: 67644370.117 ops/s
Iteration   9: 65117992.463 ops/s
Iteration  10: 66606687.331 ops/s
Iteration  11: 67330961.778 ops/s
Iteration  12: 65607154.308 ops/s
Iteration  13: 68306830.676 ops/s
Iteration  14: 66027237.435 ops/s
Iteration  15: 68049758.548 ops/s
Iteration  16: 67580844.925 ops/s
Iteration  17: 67146378.349 ops/s
Iteration  18: 66983677.863 ops/s
Iteration  19: 66154940.930 ops/s
Iteration  20: 68078960.815 ops/s
Iteration  21: 67955510.383 ops/s
Iteration  22: 68159489.810 ops/s
Iteration  23: 67460995.691 ops/s
Iteration  24: 67651162.049 ops/s
Iteration  25: 67851718.747 ops/s
Iteration  26: 67503693.821 ops/s
Iteration  27: 67783929.721 ops/s
Iteration  28: 67663726.735 ops/s
Iteration  29: 67709252.904 ops/s
Iteration  30: 67721300.244 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectInto":
  67349487.966 ±(99.9%) 503242.886 ops/s [Average]
  (min, avg, max) = (65117992.463, 67349487.966, 68306830.676), stdev = 753230.318
  CI (99.9%): [66846245.080, 67852730.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_injectInto  thrpt   30  67349487.966 ± 503242.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48362853.968 ops/s
# Warmup Iteration   2: 77712589.725 ops/s
# Warmup Iteration   3: 94872156.053 ops/s
# Warmup Iteration   4: 95038314.659 ops/s
# Warmup Iteration   5: 95614943.385 ops/s
# Warmup Iteration   6: 95641557.534 ops/s
# Warmup Iteration   7: 95571780.062 ops/s
# Warmup Iteration   8: 95520201.757 ops/s
# Warmup Iteration   9: 95147021.506 ops/s
# Warmup Iteration  10: 94875883.507 ops/s
# Warmup Iteration  11: 95857615.328 ops/s
# Warmup Iteration  12: 95777890.240 ops/s
# Warmup Iteration  13: 95624595.145 ops/s
# Warmup Iteration  14: 94884402.745 ops/s
# Warmup Iteration  15: 95356391.829 ops/s
# Warmup Iteration  16: 95285695.188 ops/s
# Warmup Iteration  17: 94544703.000 ops/s
# Warmup Iteration  18: 94864917.406 ops/s
# Warmup Iteration  19: 94883586.665 ops/s
# Warmup Iteration  20: 95644431.308 ops/s
# Warmup Iteration  21: 95050721.307 ops/s
# Warmup Iteration  22: 95087189.070 ops/s
# Warmup Iteration  23: 95845266.433 ops/s
# Warmup Iteration  24: 95123070.343 ops/s
# Warmup Iteration  25: 95719112.806 ops/s
# Warmup Iteration  26: 95070302.062 ops/s
# Warmup Iteration  27: 95863521.173 ops/s
# Warmup Iteration  28: 95813574.212 ops/s
# Warmup Iteration  29: 95329139.631 ops/s
# Warmup Iteration  30: 94169805.717 ops/s
Iteration   1: 95276937.968 ops/s
Iteration   2: 95369026.495 ops/s
Iteration   3: 95468564.850 ops/s
Iteration   4: 95779197.481 ops/s
Iteration   5: 94987150.746 ops/s
Iteration   6: 95250395.232 ops/s
Iteration   7: 96113311.835 ops/s
Iteration   8: 95571444.550 ops/s
Iteration   9: 96041080.100 ops/s
Iteration  10: 95361273.759 ops/s
Iteration  11: 95297261.708 ops/s
Iteration  12: 95578153.989 ops/s
Iteration  13: 95198286.825 ops/s
Iteration  14: 95673458.531 ops/s
Iteration  15: 95416497.150 ops/s
Iteration  16: 95549358.235 ops/s
Iteration  17: 95561909.207 ops/s
Iteration  18: 93469675.996 ops/s
Iteration  19: 95689458.489 ops/s
Iteration  20: 95365743.912 ops/s
Iteration  21: 95346075.192 ops/s
Iteration  22: 95497829.317 ops/s
Iteration  23: 95903484.480 ops/s
Iteration  24: 95138572.858 ops/s
Iteration  25: 94857743.451 ops/s
Iteration  26: 95019391.868 ops/s
Iteration  27: 94247751.749 ops/s
Iteration  28: 94352933.551 ops/s
Iteration  29: 95254903.594 ops/s
Iteration  30: 95533985.054 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoDouble":
  95305695.272 ±(99.9%) 357326.382 ops/s [Average]
  (min, avg, max) = (93469675.996, 95305695.272, 96113311.835), stdev = 534829.348
  CI (99.9%): [94948368.890, 95663021.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  95305695.272 ± 357326.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50226667.311 ops/s
# Warmup Iteration   2: 76271229.767 ops/s
# Warmup Iteration   3: 96033100.427 ops/s
# Warmup Iteration   4: 95896113.121 ops/s
# Warmup Iteration   5: 95762865.982 ops/s
# Warmup Iteration   6: 95914056.825 ops/s
# Warmup Iteration   7: 95888920.000 ops/s
# Warmup Iteration   8: 95981184.939 ops/s
# Warmup Iteration   9: 95590057.851 ops/s
# Warmup Iteration  10: 96094518.670 ops/s
# Warmup Iteration  11: 95914417.921 ops/s
# Warmup Iteration  12: 96030136.082 ops/s
# Warmup Iteration  13: 95945241.363 ops/s
# Warmup Iteration  14: 95836636.590 ops/s
# Warmup Iteration  15: 95722892.709 ops/s
# Warmup Iteration  16: 95809335.256 ops/s
# Warmup Iteration  17: 93195970.851 ops/s
# Warmup Iteration  18: 95179986.769 ops/s
# Warmup Iteration  19: 95413944.375 ops/s
# Warmup Iteration  20: 93930175.486 ops/s
# Warmup Iteration  21: 94692350.811 ops/s
# Warmup Iteration  22: 93371609.629 ops/s
# Warmup Iteration  23: 94845251.130 ops/s
# Warmup Iteration  24: 94724057.501 ops/s
# Warmup Iteration  25: 94377626.162 ops/s
# Warmup Iteration  26: 94274510.391 ops/s
# Warmup Iteration  27: 94108879.851 ops/s
# Warmup Iteration  28: 93595262.546 ops/s
# Warmup Iteration  29: 94687695.454 ops/s
# Warmup Iteration  30: 95953821.537 ops/s
Iteration   1: 95406649.931 ops/s
Iteration   2: 95685228.044 ops/s
Iteration   3: 95973727.391 ops/s
Iteration   4: 95776464.087 ops/s
Iteration   5: 95663378.283 ops/s
Iteration   6: 95864094.518 ops/s
Iteration   7: 95540226.607 ops/s
Iteration   8: 95988511.874 ops/s
Iteration   9: 95612199.335 ops/s
Iteration  10: 95622358.757 ops/s
Iteration  11: 94579649.557 ops/s
Iteration  12: 95356430.411 ops/s
Iteration  13: 95391574.364 ops/s
Iteration  14: 93297422.914 ops/s
Iteration  15: 95432028.180 ops/s
Iteration  16: 95256636.540 ops/s
Iteration  17: 94200857.266 ops/s
Iteration  18: 94629784.906 ops/s
Iteration  19: 95207384.972 ops/s
Iteration  20: 96001981.971 ops/s
Iteration  21: 96045233.623 ops/s
Iteration  22: 95569440.770 ops/s
Iteration  23: 94581576.070 ops/s
Iteration  24: 95765435.378 ops/s
Iteration  25: 95869512.538 ops/s
Iteration  26: 95975617.379 ops/s
Iteration  27: 95925313.296 ops/s
Iteration  28: 94882425.653 ops/s
Iteration  29: 95728195.963 ops/s
Iteration  30: 96275718.002 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoFloat":
  95436835.286 ±(99.9%) 430194.749 ops/s [Average]
  (min, avg, max) = (93297422.914, 95436835.286, 96275718.002), stdev = 643895.297
  CI (99.9%): [95006640.537, 95867030.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  95436835.286 ± 430194.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50049040.093 ops/s
# Warmup Iteration   2: 80821509.946 ops/s
# Warmup Iteration   3: 96146876.852 ops/s
# Warmup Iteration   4: 98481581.536 ops/s
# Warmup Iteration   5: 98350285.423 ops/s
# Warmup Iteration   6: 98348842.146 ops/s
# Warmup Iteration   7: 98331785.109 ops/s
# Warmup Iteration   8: 98574067.456 ops/s
# Warmup Iteration   9: 98345394.551 ops/s
# Warmup Iteration  10: 98337999.076 ops/s
# Warmup Iteration  11: 98268411.641 ops/s
# Warmup Iteration  12: 97893583.018 ops/s
# Warmup Iteration  13: 98133419.376 ops/s
# Warmup Iteration  14: 98231145.523 ops/s
# Warmup Iteration  15: 97798714.166 ops/s
# Warmup Iteration  16: 98606680.092 ops/s
# Warmup Iteration  17: 98248731.634 ops/s
# Warmup Iteration  18: 97949417.908 ops/s
# Warmup Iteration  19: 98258012.818 ops/s
# Warmup Iteration  20: 98342515.318 ops/s
# Warmup Iteration  21: 98145388.750 ops/s
# Warmup Iteration  22: 98208249.584 ops/s
# Warmup Iteration  23: 98089135.973 ops/s
# Warmup Iteration  24: 98088322.676 ops/s
# Warmup Iteration  25: 98343795.278 ops/s
# Warmup Iteration  26: 98139509.850 ops/s
# Warmup Iteration  27: 98098633.799 ops/s
# Warmup Iteration  28: 98626332.201 ops/s
# Warmup Iteration  29: 98166714.170 ops/s
# Warmup Iteration  30: 98402605.278 ops/s
Iteration   1: 98668187.156 ops/s
Iteration   2: 98075010.215 ops/s
Iteration   3: 97661285.129 ops/s
Iteration   4: 98069448.144 ops/s
Iteration   5: 98568924.284 ops/s
Iteration   6: 98454479.976 ops/s
Iteration   7: 98336595.083 ops/s
Iteration   8: 98071739.084 ops/s
Iteration   9: 98009408.886 ops/s
Iteration  10: 98449132.350 ops/s
Iteration  11: 98355410.189 ops/s
Iteration  12: 98484419.403 ops/s
Iteration  13: 98022562.655 ops/s
Iteration  14: 98789856.980 ops/s
Iteration  15: 98540569.204 ops/s
Iteration  16: 98205203.907 ops/s
Iteration  17: 98188290.916 ops/s
Iteration  18: 97817401.244 ops/s
Iteration  19: 98240174.025 ops/s
Iteration  20: 98090940.731 ops/s
Iteration  21: 98274034.548 ops/s
Iteration  22: 98113505.339 ops/s
Iteration  23: 97904629.458 ops/s
Iteration  24: 98542499.705 ops/s
Iteration  25: 97987800.086 ops/s
Iteration  26: 98402898.812 ops/s
Iteration  27: 98493096.769 ops/s
Iteration  28: 97861088.204 ops/s
Iteration  29: 98029152.789 ops/s
Iteration  30: 98350452.090 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoInt":
  98235273.245 ±(99.9%) 182166.065 ops/s [Average]
  (min, avg, max) = (97661285.129, 98235273.245, 98789856.980), stdev = 272657.611
  CI (99.9%): [98053107.180, 98417439.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  98235273.245 ± 182166.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49598943.985 ops/s
# Warmup Iteration   2: 80750349.186 ops/s
# Warmup Iteration   3: 97598138.820 ops/s
# Warmup Iteration   4: 97648103.195 ops/s
# Warmup Iteration   5: 97691900.833 ops/s
# Warmup Iteration   6: 97731790.101 ops/s
# Warmup Iteration   7: 97543114.678 ops/s
# Warmup Iteration   8: 97374478.823 ops/s
# Warmup Iteration   9: 97383002.638 ops/s
# Warmup Iteration  10: 97575440.923 ops/s
# Warmup Iteration  11: 97478626.609 ops/s
# Warmup Iteration  12: 97735588.744 ops/s
# Warmup Iteration  13: 97963997.869 ops/s
# Warmup Iteration  14: 97567458.463 ops/s
# Warmup Iteration  15: 97655924.190 ops/s
# Warmup Iteration  16: 97826448.111 ops/s
# Warmup Iteration  17: 97765492.639 ops/s
# Warmup Iteration  18: 97506507.682 ops/s
# Warmup Iteration  19: 97622126.729 ops/s
# Warmup Iteration  20: 97316252.775 ops/s
# Warmup Iteration  21: 97416934.639 ops/s
# Warmup Iteration  22: 97698157.249 ops/s
# Warmup Iteration  23: 97697432.394 ops/s
# Warmup Iteration  24: 97714883.778 ops/s
# Warmup Iteration  25: 97743899.659 ops/s
# Warmup Iteration  26: 97177471.875 ops/s
# Warmup Iteration  27: 97478981.871 ops/s
# Warmup Iteration  28: 97332329.748 ops/s
# Warmup Iteration  29: 97087737.498 ops/s
# Warmup Iteration  30: 97827572.747 ops/s
Iteration   1: 97586946.243 ops/s
Iteration   2: 97750766.494 ops/s
Iteration   3: 97946384.792 ops/s
Iteration   4: 97738897.458 ops/s
Iteration   5: 97754788.986 ops/s
Iteration   6: 97959969.176 ops/s
Iteration   7: 97355993.228 ops/s
Iteration   8: 97238919.777 ops/s
Iteration   9: 97496960.909 ops/s
Iteration  10: 97908154.413 ops/s
Iteration  11: 97658347.566 ops/s
Iteration  12: 97233703.797 ops/s
Iteration  13: 97347466.645 ops/s
Iteration  14: 97437323.891 ops/s
Iteration  15: 97444152.822 ops/s
Iteration  16: 97911281.105 ops/s
Iteration  17: 97716102.536 ops/s
Iteration  18: 97421249.391 ops/s
Iteration  19: 97792708.354 ops/s
Iteration  20: 97721657.040 ops/s
Iteration  21: 97974107.869 ops/s
Iteration  22: 97825558.524 ops/s
Iteration  23: 97521312.264 ops/s
Iteration  24: 96908518.141 ops/s
Iteration  25: 97361028.874 ops/s
Iteration  26: 97536665.030 ops/s
Iteration  27: 97318984.539 ops/s
Iteration  28: 97657549.198 ops/s
Iteration  29: 97320687.847 ops/s
Iteration  30: 97427018.309 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoLong":
  97575773.507 ±(99.9%) 173978.388 ops/s [Average]
  (min, avg, max) = (96908518.141, 97575773.507, 97974107.869), stdev = 260402.680
  CI (99.9%): [97401795.119, 97749751.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  97575773.507 ± 173978.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63619547.490 ops/s
# Warmup Iteration   2: 121573879.085 ops/s
# Warmup Iteration   3: 115206574.112 ops/s
# Warmup Iteration   4: 134869428.678 ops/s
# Warmup Iteration   5: 134767642.137 ops/s
# Warmup Iteration   6: 134916517.687 ops/s
# Warmup Iteration   7: 134769096.039 ops/s
# Warmup Iteration   8: 134562952.669 ops/s
# Warmup Iteration   9: 134541665.586 ops/s
# Warmup Iteration  10: 135128562.392 ops/s
# Warmup Iteration  11: 134622398.514 ops/s
# Warmup Iteration  12: 134924678.636 ops/s
# Warmup Iteration  13: 134645031.130 ops/s
# Warmup Iteration  14: 134781244.607 ops/s
# Warmup Iteration  15: 134987602.821 ops/s
# Warmup Iteration  16: 134997766.801 ops/s
# Warmup Iteration  17: 134426020.576 ops/s
# Warmup Iteration  18: 134993964.536 ops/s
# Warmup Iteration  19: 135241936.074 ops/s
# Warmup Iteration  20: 135114026.227 ops/s
# Warmup Iteration  21: 134507640.662 ops/s
# Warmup Iteration  22: 134494558.541 ops/s
# Warmup Iteration  23: 134673555.467 ops/s
# Warmup Iteration  24: 134719357.422 ops/s
# Warmup Iteration  25: 134807154.371 ops/s
# Warmup Iteration  26: 134830472.863 ops/s
# Warmup Iteration  27: 134769757.581 ops/s
# Warmup Iteration  28: 134919101.950 ops/s
# Warmup Iteration  29: 134728184.783 ops/s
# Warmup Iteration  30: 134333307.021 ops/s
Iteration   1: 134545288.610 ops/s
Iteration   2: 134384310.374 ops/s
Iteration   3: 134371473.587 ops/s
Iteration   4: 134539110.265 ops/s
Iteration   5: 134517816.040 ops/s
Iteration   6: 134865474.114 ops/s
Iteration   7: 134412853.690 ops/s
Iteration   8: 134740288.416 ops/s
Iteration   9: 134853703.914 ops/s
Iteration  10: 134793952.271 ops/s
Iteration  11: 134700039.652 ops/s
Iteration  12: 133185524.083 ops/s
Iteration  13: 134887739.527 ops/s
Iteration  14: 134942608.467 ops/s
Iteration  15: 135039902.884 ops/s
Iteration  16: 135292914.529 ops/s
Iteration  17: 134372758.655 ops/s
Iteration  18: 134186503.444 ops/s
Iteration  19: 134243440.813 ops/s
Iteration  20: 134991856.924 ops/s
Iteration  21: 134763181.555 ops/s
Iteration  22: 134514455.516 ops/s
Iteration  23: 134815573.458 ops/s
Iteration  24: 134621217.579 ops/s
Iteration  25: 134942574.587 ops/s
Iteration  26: 135113625.859 ops/s
Iteration  27: 134861755.450 ops/s
Iteration  28: 134927125.188 ops/s
Iteration  29: 134713922.649 ops/s
Iteration  30: 134518460.285 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_isEmpty":
  134655315.080 ±(99.9%) 257047.263 ops/s [Average]
  (min, avg, max) = (133185524.083, 134655315.080, 135292914.529), stdev = 384736.272
  CI (99.9%): [134398267.816, 134912362.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_isEmpty  thrpt   30  134655315.080 ± 257047.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259787.360 ops/s
# Warmup Iteration   2: 302959.808 ops/s
# Warmup Iteration   3: 392919.502 ops/s
# Warmup Iteration   4: 391911.063 ops/s
# Warmup Iteration   5: 390496.748 ops/s
# Warmup Iteration   6: 392538.639 ops/s
# Warmup Iteration   7: 390297.370 ops/s
# Warmup Iteration   8: 392395.727 ops/s
# Warmup Iteration   9: 391218.145 ops/s
# Warmup Iteration  10: 344768.612 ops/s
# Warmup Iteration  11: 378633.632 ops/s
# Warmup Iteration  12: 392156.577 ops/s
# Warmup Iteration  13: 392084.581 ops/s
# Warmup Iteration  14: 391611.873 ops/s
# Warmup Iteration  15: 393442.995 ops/s
# Warmup Iteration  16: 392283.171 ops/s
# Warmup Iteration  17: 410969.026 ops/s
# Warmup Iteration  18: 411385.284 ops/s
# Warmup Iteration  19: 410556.976 ops/s
# Warmup Iteration  20: 410629.636 ops/s
# Warmup Iteration  21: 410185.629 ops/s
# Warmup Iteration  22: 410451.672 ops/s
# Warmup Iteration  23: 411689.603 ops/s
# Warmup Iteration  24: 410628.286 ops/s
# Warmup Iteration  25: 411388.514 ops/s
# Warmup Iteration  26: 409956.601 ops/s
# Warmup Iteration  27: 411419.521 ops/s
# Warmup Iteration  28: 411299.176 ops/s
# Warmup Iteration  29: 411417.961 ops/s
# Warmup Iteration  30: 410104.273 ops/s
Iteration   1: 409732.324 ops/s
Iteration   2: 412439.056 ops/s
Iteration   3: 412122.441 ops/s
Iteration   4: 410287.239 ops/s
Iteration   5: 413065.572 ops/s
Iteration   6: 411503.847 ops/s
Iteration   7: 407372.517 ops/s
Iteration   8: 412986.342 ops/s
Iteration   9: 410235.717 ops/s
Iteration  10: 410924.761 ops/s
Iteration  11: 409160.948 ops/s
Iteration  12: 408840.842 ops/s
Iteration  13: 411014.282 ops/s
Iteration  14: 409662.178 ops/s
Iteration  15: 409716.772 ops/s
Iteration  16: 411012.134 ops/s
Iteration  17: 411621.626 ops/s
Iteration  18: 410612.543 ops/s
Iteration  19: 410873.192 ops/s
Iteration  20: 411354.679 ops/s
Iteration  21: 410293.062 ops/s
Iteration  22: 411525.842 ops/s
Iteration  23: 410949.949 ops/s
Iteration  24: 410685.308 ops/s
Iteration  25: 411377.031 ops/s
Iteration  26: 410705.741 ops/s
Iteration  27: 409048.640 ops/s
Iteration  28: 411411.226 ops/s
Iteration  29: 412037.035 ops/s
Iteration  30: 408439.879 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iterator":
  410700.424 ±(99.9%) 875.873 ops/s [Average]
  (min, avg, max) = (407372.517, 410700.424, 413065.572), stdev = 1310.965
  CI (99.9%): [409824.552, 411576.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_iterator  thrpt   30  410700.424 ± 875.873  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650005.022 ops/s
# Warmup Iteration   2: 769109.699 ops/s
# Warmup Iteration   3: 971590.934 ops/s
# Warmup Iteration   4: 966612.171 ops/s
# Warmup Iteration   5: 976867.420 ops/s
# Warmup Iteration   6: 976597.847 ops/s
# Warmup Iteration   7: 968086.980 ops/s
# Warmup Iteration   8: 976109.093 ops/s
# Warmup Iteration   9: 839037.149 ops/s
# Warmup Iteration  10: 949182.616 ops/s
# Warmup Iteration  11: 971946.161 ops/s
# Warmup Iteration  12: 971674.421 ops/s
# Warmup Iteration  13: 971697.969 ops/s
# Warmup Iteration  14: 975458.043 ops/s
# Warmup Iteration  15: 975695.562 ops/s
# Warmup Iteration  16: 973795.028 ops/s
# Warmup Iteration  17: 1033837.182 ops/s
# Warmup Iteration  18: 1031963.788 ops/s
# Warmup Iteration  19: 1031232.093 ops/s
# Warmup Iteration  20: 1035237.387 ops/s
# Warmup Iteration  21: 1035617.484 ops/s
# Warmup Iteration  22: 1030149.089 ops/s
# Warmup Iteration  23: 1033228.090 ops/s
# Warmup Iteration  24: 1030082.504 ops/s
# Warmup Iteration  25: 1035136.425 ops/s
# Warmup Iteration  26: 1030705.634 ops/s
# Warmup Iteration  27: 1028798.769 ops/s
# Warmup Iteration  28: 1035460.799 ops/s
# Warmup Iteration  29: 1031557.305 ops/s
# Warmup Iteration  30: 1030565.853 ops/s
Iteration   1: 1026359.597 ops/s
Iteration   2: 1032964.804 ops/s
Iteration   3: 1022855.239 ops/s
Iteration   4: 1032348.790 ops/s
Iteration   5: 1036912.008 ops/s
Iteration   6: 1031725.377 ops/s
Iteration   7: 1030004.711 ops/s
Iteration   8: 1033331.261 ops/s
Iteration   9: 1032037.071 ops/s
Iteration  10: 1030326.944 ops/s
Iteration  11: 1034940.719 ops/s
Iteration  12: 1030239.578 ops/s
Iteration  13: 1030954.099 ops/s
Iteration  14: 1036511.634 ops/s
Iteration  15: 1034131.987 ops/s
Iteration  16: 1036225.780 ops/s
Iteration  17: 1039044.416 ops/s
Iteration  18: 1033733.507 ops/s
Iteration  19: 1029551.508 ops/s
Iteration  20: 1028725.360 ops/s
Iteration  21: 1035169.130 ops/s
Iteration  22: 1036237.048 ops/s
Iteration  23: 1028599.588 ops/s
Iteration  24: 1032088.853 ops/s
Iteration  25: 1033665.155 ops/s
Iteration  26: 1032309.262 ops/s
Iteration  27: 1033534.267 ops/s
Iteration  28: 1031825.828 ops/s
Iteration  29: 1032061.671 ops/s
Iteration  30: 1034050.465 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_iteratorRemove":
  1032415.522 ±(99.9%) 2212.556 ops/s [Average]
  (min, avg, max) = (1022855.239, 1032415.522, 1039044.416), stdev = 3311.650
  CI (99.9%): [1030202.966, 1034628.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1032415.522 ± 2212.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13779266.713 ops/s
# Warmup Iteration   2: 27720169.885 ops/s
# Warmup Iteration   3: 23773211.241 ops/s
# Warmup Iteration   4: 27594006.399 ops/s
# Warmup Iteration   5: 27361229.856 ops/s
# Warmup Iteration   6: 27355958.500 ops/s
# Warmup Iteration   7: 27584218.246 ops/s
# Warmup Iteration   8: 27597720.464 ops/s
# Warmup Iteration   9: 27696109.620 ops/s
# Warmup Iteration  10: 27393266.045 ops/s
# Warmup Iteration  11: 27626343.630 ops/s
# Warmup Iteration  12: 27539750.007 ops/s
# Warmup Iteration  13: 27294860.712 ops/s
# Warmup Iteration  14: 27737456.057 ops/s
# Warmup Iteration  15: 27724808.600 ops/s
# Warmup Iteration  16: 27809387.937 ops/s
# Warmup Iteration  17: 27653270.737 ops/s
# Warmup Iteration  18: 27647897.125 ops/s
# Warmup Iteration  19: 27698142.877 ops/s
# Warmup Iteration  20: 27669980.356 ops/s
# Warmup Iteration  21: 27719093.753 ops/s
# Warmup Iteration  22: 27584203.447 ops/s
# Warmup Iteration  23: 27318411.127 ops/s
# Warmup Iteration  24: 27571507.302 ops/s
# Warmup Iteration  25: 27808793.873 ops/s
# Warmup Iteration  26: 27754734.559 ops/s
# Warmup Iteration  27: 27584365.215 ops/s
# Warmup Iteration  28: 27734964.346 ops/s
# Warmup Iteration  29: 27597514.353 ops/s
# Warmup Iteration  30: 27531578.990 ops/s
Iteration   1: 27577733.114 ops/s
Iteration   2: 27563918.156 ops/s
Iteration   3: 27876435.405 ops/s
Iteration   4: 27591832.132 ops/s
Iteration   5: 27738695.175 ops/s
Iteration   6: 27748241.776 ops/s
Iteration   7: 27607337.073 ops/s
Iteration   8: 27720811.534 ops/s
Iteration   9: 27660803.977 ops/s
Iteration  10: 27674140.938 ops/s
Iteration  11: 27897707.397 ops/s
Iteration  12: 27615228.761 ops/s
Iteration  13: 27599297.596 ops/s
Iteration  14: 27778251.583 ops/s
Iteration  15: 27393324.066 ops/s
Iteration  16: 27345668.590 ops/s
Iteration  17: 27638938.646 ops/s
Iteration  18: 27533262.152 ops/s
Iteration  19: 27710108.382 ops/s
Iteration  20: 27658730.689 ops/s
Iteration  21: 27706825.290 ops/s
Iteration  22: 27529088.639 ops/s
Iteration  23: 27781950.090 ops/s
Iteration  24: 27723086.249 ops/s
Iteration  25: 27739355.697 ops/s
Iteration  26: 27570831.987 ops/s
Iteration  27: 27774716.211 ops/s
Iteration  28: 27836067.270 ops/s
Iteration  29: 27626437.546 ops/s
Iteration  30: 27417899.315 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_makeString":
  27654557.515 ±(99.9%) 88487.371 ops/s [Average]
  (min, avg, max) = (27345668.590, 27654557.515, 27897707.397), stdev = 132443.741
  CI (99.9%): [27566070.144, 27743044.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_makeString  thrpt   30  27654557.515 ± 88487.371  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833570.091 ops/s
# Warmup Iteration   2: 860128.184 ops/s
# Warmup Iteration   3: 1029636.832 ops/s
# Warmup Iteration   4: 1091421.744 ops/s
# Warmup Iteration   5: 1090705.080 ops/s
# Warmup Iteration   6: 1082247.736 ops/s
# Warmup Iteration   7: 1089532.106 ops/s
# Warmup Iteration   8: 1086054.059 ops/s
# Warmup Iteration   9: 1090120.686 ops/s
# Warmup Iteration  10: 1088782.952 ops/s
# Warmup Iteration  11: 1090317.613 ops/s
# Warmup Iteration  12: 1088943.244 ops/s
# Warmup Iteration  13: 1048499.164 ops/s
# Warmup Iteration  14: 955980.085 ops/s
# Warmup Iteration  15: 1091405.509 ops/s
# Warmup Iteration  16: 1089072.265 ops/s
# Warmup Iteration  17: 1161133.658 ops/s
# Warmup Iteration  18: 1160394.323 ops/s
# Warmup Iteration  19: 1161264.152 ops/s
# Warmup Iteration  20: 1162491.717 ops/s
# Warmup Iteration  21: 1158480.214 ops/s
# Warmup Iteration  22: 1158746.476 ops/s
# Warmup Iteration  23: 1154588.671 ops/s
# Warmup Iteration  24: 1158973.689 ops/s
# Warmup Iteration  25: 1159021.327 ops/s
# Warmup Iteration  26: 1158920.619 ops/s
# Warmup Iteration  27: 1162159.075 ops/s
# Warmup Iteration  28: 1157254.793 ops/s
# Warmup Iteration  29: 1161515.815 ops/s
# Warmup Iteration  30: 1160683.430 ops/s
Iteration   1: 1158742.849 ops/s
Iteration   2: 1156253.234 ops/s
Iteration   3: 1159496.852 ops/s
Iteration   4: 1158293.446 ops/s
Iteration   5: 1159197.904 ops/s
Iteration   6: 1160923.854 ops/s
Iteration   7: 1162399.820 ops/s
Iteration   8: 1158722.370 ops/s
Iteration   9: 1161313.265 ops/s
Iteration  10: 1163991.304 ops/s
Iteration  11: 1160495.780 ops/s
Iteration  12: 1155699.818 ops/s
Iteration  13: 1162503.447 ops/s
Iteration  14: 1159786.522 ops/s
Iteration  15: 1161484.343 ops/s
Iteration  16: 1157986.622 ops/s
Iteration  17: 1159075.585 ops/s
Iteration  18: 1157935.695 ops/s
Iteration  19: 1160468.296 ops/s
Iteration  20: 1160082.737 ops/s
Iteration  21: 1149747.070 ops/s
Iteration  22: 1153539.720 ops/s
Iteration  23: 1156352.065 ops/s
Iteration  24: 1160183.459 ops/s
Iteration  25: 1155916.286 ops/s
Iteration  26: 1159774.601 ops/s
Iteration  27: 1157136.126 ops/s
Iteration  28: 1162830.054 ops/s
Iteration  29: 1159313.080 ops/s
Iteration  30: 1153710.946 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max":
  1158778.572 ±(99.9%) 2040.044 ops/s [Average]
  (min, avg, max) = (1149747.070, 1158778.572, 1163991.304), stdev = 3053.442
  CI (99.9%): [1156738.528, 1160818.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_max  thrpt   30  1158778.572 ± 2040.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848740.001 ops/s
# Warmup Iteration   2: 880455.122 ops/s
# Warmup Iteration   3: 1035255.226 ops/s
# Warmup Iteration   4: 1105672.571 ops/s
# Warmup Iteration   5: 1101804.805 ops/s
# Warmup Iteration   6: 1095172.296 ops/s
# Warmup Iteration   7: 1106187.178 ops/s
# Warmup Iteration   8: 1099887.425 ops/s
# Warmup Iteration   9: 1101506.177 ops/s
# Warmup Iteration  10: 1095773.034 ops/s
# Warmup Iteration  11: 1103811.972 ops/s
# Warmup Iteration  12: 1100517.790 ops/s
# Warmup Iteration  13: 1101952.206 ops/s
# Warmup Iteration  14: 928471.055 ops/s
# Warmup Iteration  15: 1100551.484 ops/s
# Warmup Iteration  16: 1102863.764 ops/s
# Warmup Iteration  17: 1170398.958 ops/s
# Warmup Iteration  18: 1176375.859 ops/s
# Warmup Iteration  19: 1173505.421 ops/s
# Warmup Iteration  20: 1169431.901 ops/s
# Warmup Iteration  21: 1170345.885 ops/s
# Warmup Iteration  22: 1173310.389 ops/s
# Warmup Iteration  23: 1172007.437 ops/s
# Warmup Iteration  24: 1173297.797 ops/s
# Warmup Iteration  25: 1173877.350 ops/s
# Warmup Iteration  26: 1167855.379 ops/s
# Warmup Iteration  27: 1173193.610 ops/s
# Warmup Iteration  28: 1168727.455 ops/s
# Warmup Iteration  29: 1173340.713 ops/s
# Warmup Iteration  30: 1171461.601 ops/s
Iteration   1: 1176146.666 ops/s
Iteration   2: 1171630.001 ops/s
Iteration   3: 1172941.377 ops/s
Iteration   4: 1171007.209 ops/s
Iteration   5: 1167419.513 ops/s
Iteration   6: 1174172.244 ops/s
Iteration   7: 1171401.866 ops/s
Iteration   8: 1173940.423 ops/s
Iteration   9: 1174690.743 ops/s
Iteration  10: 1172701.041 ops/s
Iteration  11: 1175770.620 ops/s
Iteration  12: 1169598.475 ops/s
Iteration  13: 1170166.689 ops/s
Iteration  14: 1173361.667 ops/s
Iteration  15: 1172100.736 ops/s
Iteration  16: 1173687.622 ops/s
Iteration  17: 1166961.617 ops/s
Iteration  18: 1165945.745 ops/s
Iteration  19: 1173156.913 ops/s
Iteration  20: 1176955.691 ops/s
Iteration  21: 1173417.915 ops/s
Iteration  22: 1176503.368 ops/s
Iteration  23: 1170833.984 ops/s
Iteration  24: 1174758.000 ops/s
Iteration  25: 1176580.372 ops/s
Iteration  26: 1172759.102 ops/s
Iteration  27: 1173651.097 ops/s
Iteration  28: 1173041.756 ops/s
Iteration  29: 1173185.352 ops/s
Iteration  30: 1169210.603 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_maxBy":
  1172589.947 ±(99.9%) 1873.847 ops/s [Average]
  (min, avg, max) = (1165945.745, 1172589.947, 1176955.691), stdev = 2804.686
  CI (99.9%): [1170716.100, 1174463.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_maxBy  thrpt   30  1172589.947 ± 1873.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409465.510 ops/s
# Warmup Iteration   2: 439847.641 ops/s
# Warmup Iteration   3: 563780.769 ops/s
# Warmup Iteration   4: 578826.090 ops/s
# Warmup Iteration   5: 582725.235 ops/s
# Warmup Iteration   6: 578100.571 ops/s
# Warmup Iteration   7: 580458.023 ops/s
# Warmup Iteration   8: 581246.442 ops/s
# Warmup Iteration   9: 582114.520 ops/s
# Warmup Iteration  10: 578103.991 ops/s
# Warmup Iteration  11: 584656.017 ops/s
# Warmup Iteration  12: 513277.925 ops/s
# Warmup Iteration  13: 560266.405 ops/s
# Warmup Iteration  14: 583751.011 ops/s
# Warmup Iteration  15: 579183.093 ops/s
# Warmup Iteration  16: 582634.638 ops/s
# Warmup Iteration  17: 601500.452 ops/s
# Warmup Iteration  18: 601292.310 ops/s
# Warmup Iteration  19: 602902.063 ops/s
# Warmup Iteration  20: 601991.011 ops/s
# Warmup Iteration  21: 602126.343 ops/s
# Warmup Iteration  22: 601768.617 ops/s
# Warmup Iteration  23: 601318.236 ops/s
# Warmup Iteration  24: 601530.016 ops/s
# Warmup Iteration  25: 601926.353 ops/s
# Warmup Iteration  26: 601772.320 ops/s
# Warmup Iteration  27: 600958.334 ops/s
# Warmup Iteration  28: 602750.881 ops/s
# Warmup Iteration  29: 600906.220 ops/s
# Warmup Iteration  30: 603191.440 ops/s
Iteration   1: 599141.550 ops/s
Iteration   2: 598483.202 ops/s
Iteration   3: 602294.869 ops/s
Iteration   4: 603584.722 ops/s
Iteration   5: 603005.347 ops/s
Iteration   6: 596884.126 ops/s
Iteration   7: 603557.651 ops/s
Iteration   8: 603512.221 ops/s
Iteration   9: 599982.208 ops/s
Iteration  10: 600379.205 ops/s
Iteration  11: 604205.873 ops/s
Iteration  12: 603053.625 ops/s
Iteration  13: 602286.277 ops/s
Iteration  14: 602854.212 ops/s
Iteration  15: 602196.379 ops/s
Iteration  16: 604680.008 ops/s
Iteration  17: 604015.504 ops/s
Iteration  18: 601436.730 ops/s
Iteration  19: 602665.208 ops/s
Iteration  20: 597771.826 ops/s
Iteration  21: 603386.167 ops/s
Iteration  22: 602630.285 ops/s
Iteration  23: 603900.764 ops/s
Iteration  24: 604186.663 ops/s
Iteration  25: 602953.025 ops/s
Iteration  26: 600332.587 ops/s
Iteration  27: 601341.966 ops/s
Iteration  28: 604208.981 ops/s
Iteration  29: 602681.178 ops/s
Iteration  30: 600760.267 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws":
  602079.088 ±(99.9%) 1358.882 ops/s [Average]
  (min, avg, max) = (596884.126, 602079.088, 604680.008), stdev = 2033.911
  CI (99.9%): [600720.205, 603437.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  602079.088 ± 1358.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409513.942 ops/s
# Warmup Iteration   2: 441744.023 ops/s
# Warmup Iteration   3: 566468.481 ops/s
# Warmup Iteration   4: 583028.028 ops/s
# Warmup Iteration   5: 584250.883 ops/s
# Warmup Iteration   6: 581368.074 ops/s
# Warmup Iteration   7: 584040.113 ops/s
# Warmup Iteration   8: 585152.665 ops/s
# Warmup Iteration   9: 581913.593 ops/s
# Warmup Iteration  10: 581970.775 ops/s
# Warmup Iteration  11: 583947.557 ops/s
# Warmup Iteration  12: 506957.707 ops/s
# Warmup Iteration  13: 567945.534 ops/s
# Warmup Iteration  14: 584460.639 ops/s
# Warmup Iteration  15: 582928.738 ops/s
# Warmup Iteration  16: 582697.637 ops/s
# Warmup Iteration  17: 605221.327 ops/s
# Warmup Iteration  18: 603941.965 ops/s
# Warmup Iteration  19: 604537.066 ops/s
# Warmup Iteration  20: 605178.375 ops/s
# Warmup Iteration  21: 605563.928 ops/s
# Warmup Iteration  22: 606241.867 ops/s
# Warmup Iteration  23: 606669.015 ops/s
# Warmup Iteration  24: 605599.212 ops/s
# Warmup Iteration  25: 604888.665 ops/s
# Warmup Iteration  26: 604406.483 ops/s
# Warmup Iteration  27: 604439.949 ops/s
# Warmup Iteration  28: 605084.296 ops/s
# Warmup Iteration  29: 606439.730 ops/s
# Warmup Iteration  30: 606718.341 ops/s
Iteration   1: 604344.910 ops/s
Iteration   2: 604203.023 ops/s
Iteration   3: 605389.702 ops/s
Iteration   4: 604521.615 ops/s
Iteration   5: 604722.657 ops/s
Iteration   6: 606547.979 ops/s
Iteration   7: 601806.055 ops/s
Iteration   8: 606882.867 ops/s
Iteration   9: 604488.898 ops/s
Iteration  10: 607438.037 ops/s
Iteration  11: 604108.858 ops/s
Iteration  12: 606787.014 ops/s
Iteration  13: 603880.653 ops/s
Iteration  14: 604376.432 ops/s
Iteration  15: 602415.985 ops/s
Iteration  16: 603655.651 ops/s
Iteration  17: 600088.008 ops/s
Iteration  18: 606939.931 ops/s
Iteration  19: 605551.741 ops/s
Iteration  20: 606000.014 ops/s
Iteration  21: 605014.263 ops/s
Iteration  22: 604979.276 ops/s
Iteration  23: 604452.069 ops/s
Iteration  24: 606764.114 ops/s
Iteration  25: 602848.608 ops/s
Iteration  26: 603544.352 ops/s
Iteration  27: 606646.575 ops/s
Iteration  28: 604059.396 ops/s
Iteration  29: 602905.903 ops/s
Iteration  30: 601907.083 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  604575.722 ±(99.9%) 1173.625 ops/s [Average]
  (min, avg, max) = (600088.008, 604575.722, 607438.037), stdev = 1756.627
  CI (99.9%): [603402.097, 605749.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  604575.722 ± 1173.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 846686.770 ops/s
# Warmup Iteration   2: 879116.381 ops/s
# Warmup Iteration   3: 1035227.500 ops/s
# Warmup Iteration   4: 1103867.147 ops/s
# Warmup Iteration   5: 1104176.316 ops/s
# Warmup Iteration   6: 1095825.589 ops/s
# Warmup Iteration   7: 1101675.582 ops/s
# Warmup Iteration   8: 1094294.087 ops/s
# Warmup Iteration   9: 1103191.699 ops/s
# Warmup Iteration  10: 1096035.872 ops/s
# Warmup Iteration  11: 1104275.835 ops/s
# Warmup Iteration  12: 1104616.485 ops/s
# Warmup Iteration  13: 1104684.006 ops/s
# Warmup Iteration  14: 926387.925 ops/s
# Warmup Iteration  15: 1101952.243 ops/s
# Warmup Iteration  16: 1104429.718 ops/s
# Warmup Iteration  17: 1170245.486 ops/s
# Warmup Iteration  18: 1174315.995 ops/s
# Warmup Iteration  19: 1173540.242 ops/s
# Warmup Iteration  20: 1178891.844 ops/s
# Warmup Iteration  21: 1176204.402 ops/s
# Warmup Iteration  22: 1169646.286 ops/s
# Warmup Iteration  23: 1174846.459 ops/s
# Warmup Iteration  24: 1171704.644 ops/s
# Warmup Iteration  25: 1179030.826 ops/s
# Warmup Iteration  26: 1177816.593 ops/s
# Warmup Iteration  27: 1172051.241 ops/s
# Warmup Iteration  28: 1176830.657 ops/s
# Warmup Iteration  29: 1172539.293 ops/s
# Warmup Iteration  30: 1171725.777 ops/s
Iteration   1: 1174688.454 ops/s
Iteration   2: 1182959.811 ops/s
Iteration   3: 1171558.115 ops/s
Iteration   4: 1177330.238 ops/s
Iteration   5: 1158991.746 ops/s
Iteration   6: 1176337.494 ops/s
Iteration   7: 1167982.229 ops/s
Iteration   8: 1168920.234 ops/s
Iteration   9: 1182618.335 ops/s
Iteration  10: 1173902.495 ops/s
Iteration  11: 1168349.726 ops/s
Iteration  12: 1164915.161 ops/s
Iteration  13: 1177346.593 ops/s
Iteration  14: 1163953.900 ops/s
Iteration  15: 1185796.883 ops/s
Iteration  16: 1175414.651 ops/s
Iteration  17: 1174705.289 ops/s
Iteration  18: 1176979.908 ops/s
Iteration  19: 1177659.063 ops/s
Iteration  20: 1171006.927 ops/s
Iteration  21: 1171381.536 ops/s
Iteration  22: 1180180.770 ops/s
Iteration  23: 1180688.061 ops/s
Iteration  24: 1169172.558 ops/s
Iteration  25: 1162070.818 ops/s
Iteration  26: 1173221.489 ops/s
Iteration  27: 1173175.873 ops/s
Iteration  28: 1172741.037 ops/s
Iteration  29: 1176279.790 ops/s
Iteration  30: 1166453.213 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_with_comparator":
  1173226.080 ±(99.9%) 4237.787 ops/s [Average]
  (min, avg, max) = (1158991.746, 1173226.080, 1185796.883), stdev = 6342.921
  CI (99.9%): [1168988.292, 1177463.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_max_with_comparator  thrpt   30  1173226.080 ± 4237.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851589.774 ops/s
# Warmup Iteration   2: 873446.154 ops/s
# Warmup Iteration   3: 1017220.665 ops/s
# Warmup Iteration   4: 1080598.544 ops/s
# Warmup Iteration   5: 1090433.870 ops/s
# Warmup Iteration   6: 1078883.170 ops/s
# Warmup Iteration   7: 1101661.625 ops/s
# Warmup Iteration   8: 1095309.088 ops/s
# Warmup Iteration   9: 1103760.610 ops/s
# Warmup Iteration  10: 1089944.461 ops/s
# Warmup Iteration  11: 1107338.275 ops/s
# Warmup Iteration  12: 1076240.944 ops/s
# Warmup Iteration  13: 1111685.802 ops/s
# Warmup Iteration  14: 932354.685 ops/s
# Warmup Iteration  15: 1104411.360 ops/s
# Warmup Iteration  16: 1105726.699 ops/s
# Warmup Iteration  17: 1156174.499 ops/s
# Warmup Iteration  18: 1180253.357 ops/s
# Warmup Iteration  19: 1178081.070 ops/s
# Warmup Iteration  20: 1179283.929 ops/s
# Warmup Iteration  21: 1180164.682 ops/s
# Warmup Iteration  22: 1184356.973 ops/s
# Warmup Iteration  23: 1176783.350 ops/s
# Warmup Iteration  24: 1180537.419 ops/s
# Warmup Iteration  25: 1180078.561 ops/s
# Warmup Iteration  26: 1178384.267 ops/s
# Warmup Iteration  27: 1183545.960 ops/s
# Warmup Iteration  28: 1182423.435 ops/s
# Warmup Iteration  29: 1177391.333 ops/s
# Warmup Iteration  30: 1175338.015 ops/s
Iteration   1: 1184676.154 ops/s
Iteration   2: 1179626.726 ops/s
Iteration   3: 1179364.066 ops/s
Iteration   4: 1178829.568 ops/s
Iteration   5: 1177364.097 ops/s
Iteration   6: 1183157.853 ops/s
Iteration   7: 1184204.392 ops/s
Iteration   8: 1184169.599 ops/s
Iteration   9: 1182602.420 ops/s
Iteration  10: 1183013.907 ops/s
Iteration  11: 1170465.880 ops/s
Iteration  12: 1183324.631 ops/s
Iteration  13: 1185460.357 ops/s
Iteration  14: 1180537.299 ops/s
Iteration  15: 1177084.087 ops/s
Iteration  16: 1178645.195 ops/s
Iteration  17: 1182663.543 ops/s
Iteration  18: 1182110.408 ops/s
Iteration  19: 1181183.196 ops/s
Iteration  20: 1185480.613 ops/s
Iteration  21: 1185199.079 ops/s
Iteration  22: 1177905.703 ops/s
Iteration  23: 1184152.916 ops/s
Iteration  24: 1182655.651 ops/s
Iteration  25: 1180548.287 ops/s
Iteration  26: 1185673.018 ops/s
Iteration  27: 1178627.121 ops/s
Iteration  28: 1186004.795 ops/s
Iteration  29: 1188064.522 ops/s
Iteration  30: 1186490.127 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_max_without_comparator":
  1181976.174 ±(99.9%) 2459.944 ops/s [Average]
  (min, avg, max) = (1170465.880, 1181976.174, 1188064.522), stdev = 3681.928
  CI (99.9%): [1179516.230, 1184436.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  1181976.174 ± 2459.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830045.699 ops/s
# Warmup Iteration   2: 859879.977 ops/s
# Warmup Iteration   3: 1027767.161 ops/s
# Warmup Iteration   4: 1086840.741 ops/s
# Warmup Iteration   5: 1094797.154 ops/s
# Warmup Iteration   6: 1090850.985 ops/s
# Warmup Iteration   7: 1080203.335 ops/s
# Warmup Iteration   8: 1082810.515 ops/s
# Warmup Iteration   9: 1082665.646 ops/s
# Warmup Iteration  10: 1090422.768 ops/s
# Warmup Iteration  11: 1090138.755 ops/s
# Warmup Iteration  12: 1094472.730 ops/s
# Warmup Iteration  13: 1056000.869 ops/s
# Warmup Iteration  14: 959206.366 ops/s
# Warmup Iteration  15: 1095202.706 ops/s
# Warmup Iteration  16: 1091720.132 ops/s
# Warmup Iteration  17: 1164654.627 ops/s
# Warmup Iteration  18: 1165377.801 ops/s
# Warmup Iteration  19: 1167599.853 ops/s
# Warmup Iteration  20: 1168958.418 ops/s
# Warmup Iteration  21: 1164525.033 ops/s
# Warmup Iteration  22: 1165534.440 ops/s
# Warmup Iteration  23: 1157853.290 ops/s
# Warmup Iteration  24: 1163695.392 ops/s
# Warmup Iteration  25: 1147727.449 ops/s
# Warmup Iteration  26: 1148730.973 ops/s
# Warmup Iteration  27: 1166358.611 ops/s
# Warmup Iteration  28: 1152850.269 ops/s
# Warmup Iteration  29: 1164099.924 ops/s
# Warmup Iteration  30: 1163983.225 ops/s
Iteration   1: 1165372.092 ops/s
Iteration   2: 1167324.943 ops/s
Iteration   3: 1165395.339 ops/s
Iteration   4: 1160995.771 ops/s
Iteration   5: 1167974.027 ops/s
Iteration   6: 1163711.957 ops/s
Iteration   7: 1158450.962 ops/s
Iteration   8: 1141660.804 ops/s
Iteration   9: 1167145.477 ops/s
Iteration  10: 1168547.547 ops/s
Iteration  11: 1170794.357 ops/s
Iteration  12: 1169332.620 ops/s
Iteration  13: 1167470.115 ops/s
Iteration  14: 1170993.775 ops/s
Iteration  15: 1170457.272 ops/s
Iteration  16: 1168342.377 ops/s
Iteration  17: 1158791.588 ops/s
Iteration  18: 1165793.948 ops/s
Iteration  19: 1168581.816 ops/s
Iteration  20: 1167943.845 ops/s
Iteration  21: 1166974.062 ops/s
Iteration  22: 1166049.115 ops/s
Iteration  23: 1163253.686 ops/s
Iteration  24: 1166008.852 ops/s
Iteration  25: 1161807.631 ops/s
Iteration  26: 1159090.954 ops/s
Iteration  27: 1166568.538 ops/s
Iteration  28: 1163630.669 ops/s
Iteration  29: 1158213.058 ops/s
Iteration  30: 1165525.029 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min":
  1164740.074 ±(99.9%) 3795.370 ops/s [Average]
  (min, avg, max) = (1141660.804, 1164740.074, 1170993.775), stdev = 5680.731
  CI (99.9%): [1160944.705, 1168535.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_min  thrpt   30  1164740.074 ± 3795.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849318.923 ops/s
# Warmup Iteration   2: 879910.567 ops/s
# Warmup Iteration   3: 1035013.735 ops/s
# Warmup Iteration   4: 1108622.898 ops/s
# Warmup Iteration   5: 1098286.046 ops/s
# Warmup Iteration   6: 1099413.784 ops/s
# Warmup Iteration   7: 1101639.219 ops/s
# Warmup Iteration   8: 1104341.413 ops/s
# Warmup Iteration   9: 1104377.400 ops/s
# Warmup Iteration  10: 1106522.753 ops/s
# Warmup Iteration  11: 1108058.770 ops/s
# Warmup Iteration  12: 1104631.055 ops/s
# Warmup Iteration  13: 1105939.793 ops/s
# Warmup Iteration  14: 931595.250 ops/s
# Warmup Iteration  15: 1105485.098 ops/s
# Warmup Iteration  16: 1108553.956 ops/s
# Warmup Iteration  17: 1179831.615 ops/s
# Warmup Iteration  18: 1179538.342 ops/s
# Warmup Iteration  19: 1172359.899 ops/s
# Warmup Iteration  20: 1176246.140 ops/s
# Warmup Iteration  21: 1177407.457 ops/s
# Warmup Iteration  22: 1177252.358 ops/s
# Warmup Iteration  23: 1176491.027 ops/s
# Warmup Iteration  24: 1180464.484 ops/s
# Warmup Iteration  25: 1180964.365 ops/s
# Warmup Iteration  26: 1180800.488 ops/s
# Warmup Iteration  27: 1178995.147 ops/s
# Warmup Iteration  28: 1183198.612 ops/s
# Warmup Iteration  29: 1183194.081 ops/s
# Warmup Iteration  30: 1175020.801 ops/s
Iteration   1: 1177455.922 ops/s
Iteration   2: 1184239.333 ops/s
Iteration   3: 1184071.096 ops/s
Iteration   4: 1179333.007 ops/s
Iteration   5: 1182111.886 ops/s
Iteration   6: 1183206.722 ops/s
Iteration   7: 1181788.383 ops/s
Iteration   8: 1186862.328 ops/s
Iteration   9: 1168135.776 ops/s
Iteration  10: 1180190.272 ops/s
Iteration  11: 1179934.963 ops/s
Iteration  12: 1181897.438 ops/s
Iteration  13: 1173689.311 ops/s
Iteration  14: 1181513.296 ops/s
Iteration  15: 1179978.896 ops/s
Iteration  16: 1182468.422 ops/s
Iteration  17: 1180861.120 ops/s
Iteration  18: 1169581.018 ops/s
Iteration  19: 1167226.190 ops/s
Iteration  20: 1179579.052 ops/s
Iteration  21: 1180143.629 ops/s
Iteration  22: 1176619.057 ops/s
Iteration  23: 1179891.735 ops/s
Iteration  24: 1186219.300 ops/s
Iteration  25: 1178946.195 ops/s
Iteration  26: 1178219.655 ops/s
Iteration  27: 1169720.077 ops/s
Iteration  28: 1182320.876 ops/s
Iteration  29: 1177511.433 ops/s
Iteration  30: 1183741.961 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_minBy":
  1179248.612 ±(99.9%) 3376.069 ops/s [Average]
  (min, avg, max) = (1167226.190, 1179248.612, 1186862.328), stdev = 5053.142
  CI (99.9%): [1175872.542, 1182624.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_minBy  thrpt   30  1179248.612 ± 3376.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 408070.582 ops/s
# Warmup Iteration   2: 436628.844 ops/s
# Warmup Iteration   3: 560105.281 ops/s
# Warmup Iteration   4: 576146.039 ops/s
# Warmup Iteration   5: 576212.251 ops/s
# Warmup Iteration   6: 575822.701 ops/s
# Warmup Iteration   7: 578140.029 ops/s
# Warmup Iteration   8: 573360.395 ops/s
# Warmup Iteration   9: 578913.715 ops/s
# Warmup Iteration  10: 574309.681 ops/s
# Warmup Iteration  11: 576893.086 ops/s
# Warmup Iteration  12: 520486.695 ops/s
# Warmup Iteration  13: 544337.410 ops/s
# Warmup Iteration  14: 579449.800 ops/s
# Warmup Iteration  15: 578634.295 ops/s
# Warmup Iteration  16: 578139.620 ops/s
# Warmup Iteration  17: 598678.045 ops/s
# Warmup Iteration  18: 596418.270 ops/s
# Warmup Iteration  19: 598932.537 ops/s
# Warmup Iteration  20: 600892.570 ops/s
# Warmup Iteration  21: 597374.282 ops/s
# Warmup Iteration  22: 600315.675 ops/s
# Warmup Iteration  23: 599327.171 ops/s
# Warmup Iteration  24: 596418.536 ops/s
# Warmup Iteration  25: 600655.523 ops/s
# Warmup Iteration  26: 601274.564 ops/s
# Warmup Iteration  27: 595118.472 ops/s
# Warmup Iteration  28: 601468.777 ops/s
# Warmup Iteration  29: 599003.524 ops/s
# Warmup Iteration  30: 593716.257 ops/s
Iteration   1: 600071.179 ops/s
Iteration   2: 599515.606 ops/s
Iteration   3: 598056.509 ops/s
Iteration   4: 597714.680 ops/s
Iteration   5: 596764.424 ops/s
Iteration   6: 594118.264 ops/s
Iteration   7: 601955.623 ops/s
Iteration   8: 592784.406 ops/s
Iteration   9: 599320.600 ops/s
Iteration  10: 594459.494 ops/s
Iteration  11: 596384.225 ops/s
Iteration  12: 599682.551 ops/s
Iteration  13: 598380.338 ops/s
Iteration  14: 598247.528 ops/s
Iteration  15: 600029.469 ops/s
Iteration  16: 596172.868 ops/s
Iteration  17: 593569.218 ops/s
Iteration  18: 599454.672 ops/s
Iteration  19: 598256.726 ops/s
Iteration  20: 598404.186 ops/s
Iteration  21: 600797.449 ops/s
Iteration  22: 599494.893 ops/s
Iteration  23: 595632.766 ops/s
Iteration  24: 598304.416 ops/s
Iteration  25: 599981.011 ops/s
Iteration  26: 598523.109 ops/s
Iteration  27: 588392.053 ops/s
Iteration  28: 592603.919 ops/s
Iteration  29: 575797.764 ops/s
Iteration  30: 601286.919 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws":
  596805.229 ±(99.9%) 3323.890 ops/s [Average]
  (min, avg, max) = (575797.764, 596805.229, 601955.623), stdev = 4975.043
  CI (99.9%): [593481.338, 600129.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  596805.229 ± 3323.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 408771.434 ops/s
# Warmup Iteration   2: 443504.687 ops/s
# Warmup Iteration   3: 565513.880 ops/s
# Warmup Iteration   4: 579219.475 ops/s
# Warmup Iteration   5: 580396.987 ops/s
# Warmup Iteration   6: 576545.836 ops/s
# Warmup Iteration   7: 577386.250 ops/s
# Warmup Iteration   8: 577913.093 ops/s
# Warmup Iteration   9: 577916.826 ops/s
# Warmup Iteration  10: 577819.481 ops/s
# Warmup Iteration  11: 578735.257 ops/s
# Warmup Iteration  12: 512816.222 ops/s
# Warmup Iteration  13: 546294.369 ops/s
# Warmup Iteration  14: 577490.443 ops/s
# Warmup Iteration  15: 575072.068 ops/s
# Warmup Iteration  16: 577206.647 ops/s
# Warmup Iteration  17: 595471.968 ops/s
# Warmup Iteration  18: 596789.722 ops/s
# Warmup Iteration  19: 596336.425 ops/s
# Warmup Iteration  20: 596649.784 ops/s
# Warmup Iteration  21: 596327.443 ops/s
# Warmup Iteration  22: 595632.225 ops/s
# Warmup Iteration  23: 596906.293 ops/s
# Warmup Iteration  24: 598244.008 ops/s
# Warmup Iteration  25: 593003.641 ops/s
# Warmup Iteration  26: 592095.669 ops/s
# Warmup Iteration  27: 599461.670 ops/s
# Warmup Iteration  28: 597647.519 ops/s
# Warmup Iteration  29: 595076.302 ops/s
# Warmup Iteration  30: 595589.991 ops/s
Iteration   1: 597030.305 ops/s
Iteration   2: 596139.070 ops/s
Iteration   3: 595658.939 ops/s
Iteration   4: 592475.700 ops/s
Iteration   5: 597057.844 ops/s
Iteration   6: 592386.368 ops/s
Iteration   7: 598000.976 ops/s
Iteration   8: 593411.879 ops/s
Iteration   9: 597079.006 ops/s
Iteration  10: 594744.208 ops/s
Iteration  11: 593026.899 ops/s
Iteration  12: 592287.634 ops/s
Iteration  13: 596642.689 ops/s
Iteration  14: 597406.261 ops/s
Iteration  15: 589631.052 ops/s
Iteration  16: 597386.897 ops/s
Iteration  17: 594378.733 ops/s
Iteration  18: 593849.492 ops/s
Iteration  19: 594228.499 ops/s
Iteration  20: 597289.787 ops/s
Iteration  21: 597287.060 ops/s
Iteration  22: 596480.189 ops/s
Iteration  23: 590974.075 ops/s
Iteration  24: 577673.393 ops/s
Iteration  25: 592692.261 ops/s
Iteration  26: 584816.361 ops/s
Iteration  27: 588446.991 ops/s
Iteration  28: 581482.374 ops/s
Iteration  29: 583892.130 ops/s
Iteration  30: 587401.905 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  592708.633 ±(99.9%) 3471.978 ops/s [Average]
  (min, avg, max) = (577673.393, 592708.633, 598000.976), stdev = 5196.693
  CI (99.9%): [589236.655, 596180.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  592708.633 ± 3471.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 827920.502 ops/s
# Warmup Iteration   2: 882364.237 ops/s
# Warmup Iteration   3: 1011401.286 ops/s
# Warmup Iteration   4: 1068462.451 ops/s
# Warmup Iteration   5: 1096238.590 ops/s
# Warmup Iteration   6: 1088534.234 ops/s
# Warmup Iteration   7: 1103504.489 ops/s
# Warmup Iteration   8: 1065436.941 ops/s
# Warmup Iteration   9: 1096185.180 ops/s
# Warmup Iteration  10: 1101912.455 ops/s
# Warmup Iteration  11: 1094101.636 ops/s
# Warmup Iteration  12: 1100397.523 ops/s
# Warmup Iteration  13: 1087498.108 ops/s
# Warmup Iteration  14: 926436.436 ops/s
# Warmup Iteration  15: 1085975.137 ops/s
# Warmup Iteration  16: 1083971.159 ops/s
# Warmup Iteration  17: 1166398.540 ops/s
# Warmup Iteration  18: 1139685.637 ops/s
# Warmup Iteration  19: 1157360.989 ops/s
# Warmup Iteration  20: 1143423.443 ops/s
# Warmup Iteration  21: 1166518.417 ops/s
# Warmup Iteration  22: 1163645.833 ops/s
# Warmup Iteration  23: 1174139.747 ops/s
# Warmup Iteration  24: 1177433.998 ops/s
# Warmup Iteration  25: 1147794.701 ops/s
# Warmup Iteration  26: 1170962.051 ops/s
# Warmup Iteration  27: 1174746.187 ops/s
# Warmup Iteration  28: 1174243.268 ops/s
# Warmup Iteration  29: 1149274.156 ops/s
# Warmup Iteration  30: 1163948.260 ops/s
Iteration   1: 1155718.517 ops/s
Iteration   2: 1163560.498 ops/s
Iteration   3: 1180407.316 ops/s
Iteration   4: 1177588.229 ops/s
Iteration   5: 1167737.772 ops/s
Iteration   6: 1179140.307 ops/s
Iteration   7: 1151892.977 ops/s
Iteration   8: 1169218.635 ops/s
Iteration   9: 1140783.490 ops/s
Iteration  10: 1145254.621 ops/s
Iteration  11: 1164365.815 ops/s
Iteration  12: 1157684.401 ops/s
Iteration  13: 1166791.161 ops/s
Iteration  14: 1154249.437 ops/s
Iteration  15: 1154198.318 ops/s
Iteration  16: 1128403.650 ops/s
Iteration  17: 1133571.416 ops/s
Iteration  18: 1174346.069 ops/s
Iteration  19: 1163686.528 ops/s
Iteration  20: 1170291.256 ops/s
Iteration  21: 1148297.503 ops/s
Iteration  22: 1169527.350 ops/s
Iteration  23: 1177908.338 ops/s
Iteration  24: 1171181.516 ops/s
Iteration  25: 1144664.207 ops/s
Iteration  26: 1153799.776 ops/s
Iteration  27: 1145312.337 ops/s
Iteration  28: 1148730.686 ops/s
Iteration  29: 1135099.681 ops/s
Iteration  30: 1128823.247 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_with_comparator":
  1157407.835 ±(99.9%) 10200.616 ops/s [Average]
  (min, avg, max) = (1128403.650, 1157407.835, 1180407.316), stdev = 15267.804
  CI (99.9%): [1147207.219, 1167608.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_min_with_comparator  thrpt   30  1157407.835 ± 10200.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849840.375 ops/s
# Warmup Iteration   2: 879078.717 ops/s
# Warmup Iteration   3: 1040771.168 ops/s
# Warmup Iteration   4: 1084065.558 ops/s
# Warmup Iteration   5: 1064977.237 ops/s
# Warmup Iteration   6: 1076385.374 ops/s
# Warmup Iteration   7: 1101043.061 ops/s
# Warmup Iteration   8: 1104150.464 ops/s
# Warmup Iteration   9: 1102340.936 ops/s
# Warmup Iteration  10: 1091401.284 ops/s
# Warmup Iteration  11: 1093611.616 ops/s
# Warmup Iteration  12: 1084163.164 ops/s
# Warmup Iteration  13: 1105705.078 ops/s
# Warmup Iteration  14: 924842.494 ops/s
# Warmup Iteration  15: 1099737.181 ops/s
# Warmup Iteration  16: 1104590.328 ops/s
# Warmup Iteration  17: 1167563.668 ops/s
# Warmup Iteration  18: 1177024.932 ops/s
# Warmup Iteration  19: 1155318.408 ops/s
# Warmup Iteration  20: 1145685.410 ops/s
# Warmup Iteration  21: 1153669.693 ops/s
# Warmup Iteration  22: 1172600.136 ops/s
# Warmup Iteration  23: 1150198.015 ops/s
# Warmup Iteration  24: 1162397.080 ops/s
# Warmup Iteration  25: 1145048.133 ops/s
# Warmup Iteration  26: 1156783.562 ops/s
# Warmup Iteration  27: 1172838.015 ops/s
# Warmup Iteration  28: 1176601.197 ops/s
# Warmup Iteration  29: 1179810.614 ops/s
# Warmup Iteration  30: 1176882.892 ops/s
Iteration   1: 1179547.569 ops/s
Iteration   2: 1172751.562 ops/s
Iteration   3: 1181140.293 ops/s
Iteration   4: 1170365.266 ops/s
Iteration   5: 1180158.055 ops/s
Iteration   6: 1179110.320 ops/s
Iteration   7: 1176553.192 ops/s
Iteration   8: 1175233.423 ops/s
Iteration   9: 1183620.450 ops/s
Iteration  10: 1179987.603 ops/s
Iteration  11: 1168268.379 ops/s
Iteration  12: 1180456.610 ops/s
Iteration  13: 1176691.305 ops/s
Iteration  14: 1147205.189 ops/s
Iteration  15: 1131735.901 ops/s
Iteration  16: 1140916.797 ops/s
Iteration  17: 1157334.244 ops/s
Iteration  18: 1168588.664 ops/s
Iteration  19: 1154494.181 ops/s
Iteration  20: 1177276.225 ops/s
Iteration  21: 1150937.603 ops/s
Iteration  22: 1162649.440 ops/s
Iteration  23: 1157862.058 ops/s
Iteration  24: 1161045.903 ops/s
Iteration  25: 1159867.799 ops/s
Iteration  26: 1181227.880 ops/s
Iteration  27: 1174246.145 ops/s
Iteration  28: 1170692.661 ops/s
Iteration  29: 1171743.706 ops/s
Iteration  30: 1175477.923 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_min_without_comparator":
  1168239.545 ±(99.9%) 8807.292 ops/s [Average]
  (min, avg, max) = (1131735.901, 1168239.545, 1183620.450), stdev = 13182.341
  CI (99.9%): [1159432.253, 1177046.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  1168239.545 ± 8807.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 452929.636 ops/s
# Warmup Iteration   2: 812362.081 ops/s
# Warmup Iteration   3: 916607.762 ops/s
# Warmup Iteration   4: 925500.167 ops/s
# Warmup Iteration   5: 919121.182 ops/s
# Warmup Iteration   6: 744878.048 ops/s
# Warmup Iteration   7: 925555.197 ops/s
# Warmup Iteration   8: 927053.760 ops/s
# Warmup Iteration   9: 905061.902 ops/s
# Warmup Iteration  10: 908284.292 ops/s
# Warmup Iteration  11: 927552.968 ops/s
# Warmup Iteration  12: 916545.184 ops/s
# Warmup Iteration  13: 920658.694 ops/s
# Warmup Iteration  14: 925399.300 ops/s
# Warmup Iteration  15: 927618.641 ops/s
# Warmup Iteration  16: 919615.866 ops/s
# Warmup Iteration  17: 911996.762 ops/s
# Warmup Iteration  18: 924518.318 ops/s
# Warmup Iteration  19: 927828.270 ops/s
# Warmup Iteration  20: 934241.836 ops/s
# Warmup Iteration  21: 927397.919 ops/s
# Warmup Iteration  22: 932444.648 ops/s
# Warmup Iteration  23: 930018.950 ops/s
# Warmup Iteration  24: 928621.718 ops/s
# Warmup Iteration  25: 931984.540 ops/s
# Warmup Iteration  26: 925619.522 ops/s
# Warmup Iteration  27: 923632.998 ops/s
# Warmup Iteration  28: 927049.020 ops/s
# Warmup Iteration  29: 926437.269 ops/s
# Warmup Iteration  30: 921471.547 ops/s
Iteration   1: 904895.015 ops/s
Iteration   2: 927902.782 ops/s
Iteration   3: 914047.496 ops/s
Iteration   4: 926308.561 ops/s
Iteration   5: 888508.660 ops/s
Iteration   6: 927776.746 ops/s
Iteration   7: 928480.047 ops/s
Iteration   8: 929824.863 ops/s
Iteration   9: 934530.673 ops/s
Iteration  10: 929511.796 ops/s
Iteration  11: 920975.203 ops/s
Iteration  12: 927462.898 ops/s
Iteration  13: 918523.443 ops/s
Iteration  14: 924765.691 ops/s
Iteration  15: 927546.672 ops/s
Iteration  16: 927519.906 ops/s
Iteration  17: 924754.231 ops/s
Iteration  18: 932504.488 ops/s
Iteration  19: 927234.204 ops/s
Iteration  20: 922337.095 ops/s
Iteration  21: 932704.603 ops/s
Iteration  22: 915446.096 ops/s
Iteration  23: 932444.611 ops/s
Iteration  24: 915431.157 ops/s
Iteration  25: 929315.182 ops/s
Iteration  26: 912176.547 ops/s
Iteration  27: 920029.414 ops/s
Iteration  28: 911819.483 ops/s
Iteration  29: 928538.755 ops/s
Iteration  30: 912700.587 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithAll":
  922533.897 ±(99.9%) 6595.618 ops/s [Average]
  (min, avg, max) = (888508.660, 922533.897, 934530.673), stdev = 9872.012
  CI (99.9%): [915938.278, 929129.515] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithAll  thrpt   30  922533.897 ± 6595.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithTest$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650576.958 ops/s
# Warmup Iteration   2: 1216328.998 ops/s
# Warmup Iteration   3: 1343293.684 ops/s
# Warmup Iteration   4: 1346848.080 ops/s
# Warmup Iteration   5: 1196896.980 ops/s
# Warmup Iteration   6: 1265775.899 ops/s
# Warmup Iteration   7: 1345738.335 ops/s
# Warmup Iteration   8: 1331462.388 ops/s
# Warmup Iteration   9: 1357490.171 ops/s
# Warmup Iteration  10: 1329427.090 ops/s
# Warmup Iteration  11: 1353390.292 ops/s
# Warmup Iteration  12: 1333368.484 ops/s
# Warmup Iteration  13: 1345443.041 ops/s
# Warmup Iteration  14: 1326288.007 ops/s
# Warmup Iteration  15: 1343002.820 ops/s
# Warmup Iteration  16: 1352243.809 ops/s
# Warmup Iteration  17: 1352066.383 ops/s
# Warmup Iteration  18: 1354336.742 ops/s
# Warmup Iteration  19: 1352756.734 ops/s
# Warmup Iteration  20: 1358066.726 ops/s
# Warmup Iteration  21: 1348556.720 ops/s
# Warmup Iteration  22: 1340767.095 ops/s
# Warmup Iteration  23: 1340918.369 ops/s
# Warmup Iteration  24: 1346808.643 ops/s
# Warmup Iteration  25: 1349524.384 ops/s
# Warmup Iteration  26: 1349166.794 ops/s
# Warmup Iteration  27: 1347901.895 ops/s
# Warmup Iteration  28: 1329570.434 ops/s
# Warmup Iteration  29: 1346141.448 ops/s
# Warmup Iteration  30: 1312309.580 ops/s
Iteration   1: 1326896.045 ops/s
Iteration   2: 1351055.642 ops/s
Iteration   3: 1361644.036 ops/s
Iteration   4: 1357266.812 ops/s
Iteration   5: 1357969.431 ops/s
Iteration   6: 1360959.738 ops/s
Iteration   7: 1347961.707 ops/s
Iteration   8: 1350206.031 ops/s
Iteration   9: 1354380.715 ops/s
Iteration  10: 1352285.292 ops/s
Iteration  11: 1358191.755 ops/s
Iteration  12: 1347792.338 ops/s
Iteration  13: 1342748.586 ops/s
Iteration  14: 1360304.400 ops/s
Iteration  15: 1352833.541 ops/s
Iteration  16: 1349757.171 ops/s
Iteration  17: 1339301.329 ops/s
Iteration  18: 1350418.107 ops/s
Iteration  19: 1348590.812 ops/s
Iteration  20: 1343860.684 ops/s
Iteration  21: 1334516.953 ops/s
Iteration  22: 1357839.455 ops/s
Iteration  23: 1330988.187 ops/s
Iteration  24: 1337878.820 ops/s
Iteration  25: 1357623.477 ops/s
Iteration  26: 1341786.267 ops/s
Iteration  27: 1353080.046 ops/s
Iteration  28: 1357466.155 ops/s
Iteration  29: 1347071.396 ops/s
Iteration  30: 1351101.813 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithTest":
  1349459.225 ±(99.9%) 5988.730 ops/s [Average]
  (min, avg, max) = (1326896.045, 1349459.225, 1361644.036), stdev = 8963.649
  CI (99.9%): [1343470.495, 1355447.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithTest  thrpt   30  1349459.225 ± 5988.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45460569.854 ops/s
# Warmup Iteration   2: 87851368.512 ops/s
# Warmup Iteration   3: 70179824.465 ops/s
# Warmup Iteration   4: 81953932.337 ops/s
# Warmup Iteration   5: 81810698.107 ops/s
# Warmup Iteration   6: 81895856.360 ops/s
# Warmup Iteration   7: 81576213.962 ops/s
# Warmup Iteration   8: 81515016.649 ops/s
# Warmup Iteration   9: 80181435.308 ops/s
# Warmup Iteration  10: 81150177.795 ops/s
# Warmup Iteration  11: 81451567.039 ops/s
# Warmup Iteration  12: 79746296.240 ops/s
# Warmup Iteration  13: 81609748.128 ops/s
# Warmup Iteration  14: 80712711.570 ops/s
# Warmup Iteration  15: 79345287.047 ops/s
# Warmup Iteration  16: 81036409.251 ops/s
# Warmup Iteration  17: 81852262.709 ops/s
# Warmup Iteration  18: 81753931.745 ops/s
# Warmup Iteration  19: 81688237.718 ops/s
# Warmup Iteration  20: 81862262.417 ops/s
# Warmup Iteration  21: 81479984.897 ops/s
# Warmup Iteration  22: 81822536.200 ops/s
# Warmup Iteration  23: 80841164.323 ops/s
# Warmup Iteration  24: 80653680.421 ops/s
# Warmup Iteration  25: 81967141.450 ops/s
# Warmup Iteration  26: 81482719.846 ops/s
# Warmup Iteration  27: 80022153.272 ops/s
# Warmup Iteration  28: 81939175.403 ops/s
# Warmup Iteration  29: 81963256.789 ops/s
# Warmup Iteration  30: 81320574.827 ops/s
Iteration   1: 81926260.872 ops/s
Iteration   2: 82230434.082 ops/s
Iteration   3: 80796753.200 ops/s
Iteration   4: 80172639.274 ops/s
Iteration   5: 82029367.894 ops/s
Iteration   6: 82049239.633 ops/s
Iteration   7: 80858146.871 ops/s
Iteration   8: 82256486.568 ops/s
Iteration   9: 80488712.762 ops/s
Iteration  10: 81459783.553 ops/s
Iteration  11: 81009693.090 ops/s
Iteration  12: 82203397.707 ops/s
Iteration  13: 82506822.598 ops/s
Iteration  14: 81618504.119 ops/s
Iteration  15: 81607030.883 ops/s
Iteration  16: 81539114.457 ops/s
Iteration  17: 81455787.713 ops/s
Iteration  18: 81070436.049 ops/s
Iteration  19: 82523790.248 ops/s
Iteration  20: 82215511.399 ops/s
Iteration  21: 81728181.826 ops/s
Iteration  22: 82316922.426 ops/s
Iteration  23: 82025616.156 ops/s
Iteration  24: 82000046.119 ops/s
Iteration  25: 81804843.864 ops/s
Iteration  26: 81074177.312 ops/s
Iteration  27: 81618670.104 ops/s
Iteration  28: 81921666.498 ops/s
Iteration  29: 82292735.547 ops/s
Iteration  30: 81497820.880 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithout":
  81676619.790 ±(99.9%) 401809.171 ops/s [Average]
  (min, avg, max) = (80172639.274, 81676619.790, 82523790.248), stdev = 601409.098
  CI (99.9%): [81274810.619, 82078428.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithout  thrpt   30  81676619.790 ± 401809.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283092.143 ops/s
# Warmup Iteration   2: 548428.890 ops/s
# Warmup Iteration   3: 572632.677 ops/s
# Warmup Iteration   4: 565143.825 ops/s
# Warmup Iteration   5: 494479.115 ops/s
# Warmup Iteration   6: 572261.661 ops/s
# Warmup Iteration   7: 568185.265 ops/s
# Warmup Iteration   8: 576824.713 ops/s
# Warmup Iteration   9: 574188.254 ops/s
# Warmup Iteration  10: 575422.288 ops/s
# Warmup Iteration  11: 573461.725 ops/s
# Warmup Iteration  12: 575895.359 ops/s
# Warmup Iteration  13: 572545.593 ops/s
# Warmup Iteration  14: 566183.270 ops/s
# Warmup Iteration  15: 560805.728 ops/s
# Warmup Iteration  16: 570488.051 ops/s
# Warmup Iteration  17: 559560.253 ops/s
# Warmup Iteration  18: 565732.839 ops/s
# Warmup Iteration  19: 566925.606 ops/s
# Warmup Iteration  20: 560711.868 ops/s
# Warmup Iteration  21: 567870.453 ops/s
# Warmup Iteration  22: 578365.440 ops/s
# Warmup Iteration  23: 566174.088 ops/s
# Warmup Iteration  24: 573701.003 ops/s
# Warmup Iteration  25: 575835.740 ops/s
# Warmup Iteration  26: 569838.752 ops/s
# Warmup Iteration  27: 573666.682 ops/s
# Warmup Iteration  28: 573008.447 ops/s
# Warmup Iteration  29: 570092.332 ops/s
# Warmup Iteration  30: 575357.965 ops/s
Iteration   1: 572656.428 ops/s
Iteration   2: 572246.752 ops/s
Iteration   3: 575653.548 ops/s
Iteration   4: 565923.826 ops/s
Iteration   5: 570531.242 ops/s
Iteration   6: 571848.671 ops/s
Iteration   7: 568179.223 ops/s
Iteration   8: 545336.571 ops/s
Iteration   9: 573304.144 ops/s
Iteration  10: 572299.113 ops/s
Iteration  11: 572950.487 ops/s
Iteration  12: 572942.079 ops/s
Iteration  13: 575839.451 ops/s
Iteration  14: 565374.221 ops/s
Iteration  15: 574880.205 ops/s
Iteration  16: 564669.998 ops/s
Iteration  17: 556730.917 ops/s
Iteration  18: 571041.572 ops/s
Iteration  19: 570759.502 ops/s
Iteration  20: 572658.111 ops/s
Iteration  21: 572782.746 ops/s
Iteration  22: 571419.040 ops/s
Iteration  23: 568317.133 ops/s
Iteration  24: 571024.046 ops/s
Iteration  25: 563379.249 ops/s
Iteration  26: 575164.626 ops/s
Iteration  27: 571306.519 ops/s
Iteration  28: 572469.974 ops/s
Iteration  29: 571473.349 ops/s
Iteration  30: 576078.352 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithoutAll":
  569974.703 ±(99.9%) 4176.265 ops/s [Average]
  (min, avg, max) = (545336.571, 569974.703, 576078.352), stdev = 6250.838
  CI (99.9%): [565798.438, 574150.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  569974.703 ± 4176.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noSupportForNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noSupportForNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 439587.976 ops/s
# Warmup Iteration   2: 482199.346 ops/s
# Warmup Iteration   3: 627989.946 ops/s
# Warmup Iteration   4: 626543.381 ops/s
# Warmup Iteration   5: 624541.935 ops/s
# Warmup Iteration   6: 629719.811 ops/s
# Warmup Iteration   7: 628983.724 ops/s
# Warmup Iteration   8: 628774.613 ops/s
# Warmup Iteration   9: 623667.097 ops/s
# Warmup Iteration  10: 626681.671 ops/s
# Warmup Iteration  11: 536043.190 ops/s
# Warmup Iteration  12: 617209.991 ops/s
# Warmup Iteration  13: 616452.134 ops/s
# Warmup Iteration  14: 628967.753 ops/s
# Warmup Iteration  15: 628596.612 ops/s
# Warmup Iteration  16: 624877.506 ops/s
# Warmup Iteration  17: 632847.094 ops/s
# Warmup Iteration  18: 624078.640 ops/s
# Warmup Iteration  19: 631442.176 ops/s
# Warmup Iteration  20: 643165.837 ops/s
# Warmup Iteration  21: 634189.214 ops/s
# Warmup Iteration  22: 636393.504 ops/s
# Warmup Iteration  23: 630863.618 ops/s
# Warmup Iteration  24: 633799.743 ops/s
# Warmup Iteration  25: 644735.500 ops/s
# Warmup Iteration  26: 650888.103 ops/s
# Warmup Iteration  27: 648800.412 ops/s
# Warmup Iteration  28: 650447.698 ops/s
# Warmup Iteration  29: 646879.340 ops/s
# Warmup Iteration  30: 616860.793 ops/s
Iteration   1: 652196.504 ops/s
Iteration   2: 651744.190 ops/s
Iteration   3: 649294.515 ops/s
Iteration   4: 645839.476 ops/s
Iteration   5: 646862.603 ops/s
Iteration   6: 646916.111 ops/s
Iteration   7: 645686.707 ops/s
Iteration   8: 646349.933 ops/s
Iteration   9: 641585.993 ops/s
Iteration  10: 648199.347 ops/s
Iteration  11: 646881.957 ops/s
Iteration  12: 648238.614 ops/s
Iteration  13: 643376.360 ops/s
Iteration  14: 651732.216 ops/s
Iteration  15: 634619.088 ops/s
Iteration  16: 650776.728 ops/s
Iteration  17: 648847.817 ops/s
Iteration  18: 634306.082 ops/s
Iteration  19: 628761.925 ops/s
Iteration  20: 628608.514 ops/s
Iteration  21: 626213.609 ops/s
Iteration  22: 619402.018 ops/s
Iteration  23: 641784.084 ops/s
Iteration  24: 644014.386 ops/s
Iteration  25: 632340.663 ops/s
Iteration  26: 631987.002 ops/s
Iteration  27: 635687.972 ops/s
Iteration  28: 631592.257 ops/s
Iteration  29: 640745.433 ops/s
Iteration  30: 641146.796 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noSupportForNull":
  641191.297 ±(99.9%) 5853.117 ops/s [Average]
  (min, avg, max) = (619402.018, 641191.297, 652196.504), stdev = 8760.670
  CI (99.9%): [635338.180, 647044.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_noSupportForNull  thrpt   30  641191.297 ± 5853.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63508915.008 ops/s
# Warmup Iteration   2: 124044757.482 ops/s
# Warmup Iteration   3: 113746498.993 ops/s
# Warmup Iteration   4: 132843628.244 ops/s
# Warmup Iteration   5: 133026830.273 ops/s
# Warmup Iteration   6: 133613436.632 ops/s
# Warmup Iteration   7: 132916148.246 ops/s
# Warmup Iteration   8: 132745185.303 ops/s
# Warmup Iteration   9: 132981592.109 ops/s
# Warmup Iteration  10: 132299728.239 ops/s
# Warmup Iteration  11: 130763423.941 ops/s
# Warmup Iteration  12: 130841619.962 ops/s
# Warmup Iteration  13: 133261363.328 ops/s
# Warmup Iteration  14: 134122597.649 ops/s
# Warmup Iteration  15: 132794755.506 ops/s
# Warmup Iteration  16: 131657114.330 ops/s
# Warmup Iteration  17: 132773015.099 ops/s
# Warmup Iteration  18: 130659120.053 ops/s
# Warmup Iteration  19: 131203094.575 ops/s
# Warmup Iteration  20: 132513164.585 ops/s
# Warmup Iteration  21: 132222806.281 ops/s
# Warmup Iteration  22: 132060818.533 ops/s
# Warmup Iteration  23: 131879618.596 ops/s
# Warmup Iteration  24: 134011321.130 ops/s
# Warmup Iteration  25: 132018350.297 ops/s
# Warmup Iteration  26: 133936926.618 ops/s
# Warmup Iteration  27: 132178984.922 ops/s
# Warmup Iteration  28: 131135648.878 ops/s
# Warmup Iteration  29: 131799308.756 ops/s
# Warmup Iteration  30: 133305862.720 ops/s
Iteration   1: 134845816.564 ops/s
Iteration   2: 132880233.716 ops/s
Iteration   3: 131276422.522 ops/s
Iteration   4: 131120322.694 ops/s
Iteration   5: 133985329.807 ops/s
Iteration   6: 127235662.761 ops/s
Iteration   7: 130824320.762 ops/s
Iteration   8: 132992443.226 ops/s
Iteration   9: 134141538.765 ops/s
Iteration  10: 132903605.791 ops/s
Iteration  11: 133925567.451 ops/s
Iteration  12: 131793625.899 ops/s
Iteration  13: 133607705.231 ops/s
Iteration  14: 132904766.018 ops/s
Iteration  15: 133562906.618 ops/s
Iteration  16: 133990522.412 ops/s
Iteration  17: 133778840.067 ops/s
Iteration  18: 133174208.794 ops/s
Iteration  19: 131088912.822 ops/s
Iteration  20: 130297378.486 ops/s
Iteration  21: 129719038.866 ops/s
Iteration  22: 133345883.338 ops/s
Iteration  23: 130948905.837 ops/s
Iteration  24: 132284523.304 ops/s
Iteration  25: 131576159.738 ops/s
Iteration  26: 132975805.637 ops/s
Iteration  27: 132470524.990 ops/s
Iteration  28: 132235016.720 ops/s
Iteration  29: 132129640.960 ops/s
Iteration  30: 132872598.167 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfy":
  132362940.932 ±(99.9%) 1058901.670 ops/s [Average]
  (min, avg, max) = (127235662.761, 132362940.932, 134845816.564), stdev = 1584914.290
  CI (99.9%): [131304039.262, 133421842.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  132362940.932 ± 1058901.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63924230.590 ops/s
# Warmup Iteration   2: 127043926.032 ops/s
# Warmup Iteration   3: 114766892.514 ops/s
# Warmup Iteration   4: 133084954.078 ops/s
# Warmup Iteration   5: 134414465.594 ops/s
# Warmup Iteration   6: 133490133.887 ops/s
# Warmup Iteration   7: 133423596.887 ops/s
# Warmup Iteration   8: 133840173.867 ops/s
# Warmup Iteration   9: 134290383.866 ops/s
# Warmup Iteration  10: 133853766.228 ops/s
# Warmup Iteration  11: 133513339.353 ops/s
# Warmup Iteration  12: 133045669.296 ops/s
# Warmup Iteration  13: 131504946.308 ops/s
# Warmup Iteration  14: 131305487.585 ops/s
# Warmup Iteration  15: 134603140.301 ops/s
# Warmup Iteration  16: 134062004.242 ops/s
# Warmup Iteration  17: 134235412.301 ops/s
# Warmup Iteration  18: 134966924.160 ops/s
# Warmup Iteration  19: 134787321.692 ops/s
# Warmup Iteration  20: 134491156.357 ops/s
# Warmup Iteration  21: 134522016.986 ops/s
# Warmup Iteration  22: 134361143.278 ops/s
# Warmup Iteration  23: 132618553.791 ops/s
# Warmup Iteration  24: 131897087.458 ops/s
# Warmup Iteration  25: 129970841.670 ops/s
# Warmup Iteration  26: 134072680.693 ops/s
# Warmup Iteration  27: 133063661.304 ops/s
# Warmup Iteration  28: 134149083.970 ops/s
# Warmup Iteration  29: 134551325.022 ops/s
# Warmup Iteration  30: 134544476.644 ops/s
Iteration   1: 134237042.300 ops/s
Iteration   2: 135363484.844 ops/s
Iteration   3: 132268106.819 ops/s
Iteration   4: 131769165.348 ops/s
Iteration   5: 132403311.112 ops/s
Iteration   6: 134991167.781 ops/s
Iteration   7: 134684180.760 ops/s
Iteration   8: 133703327.418 ops/s
Iteration   9: 132304740.948 ops/s
Iteration  10: 134423870.684 ops/s
Iteration  11: 133827094.747 ops/s
Iteration  12: 134407563.064 ops/s
Iteration  13: 134884744.239 ops/s
Iteration  14: 134141462.915 ops/s
Iteration  15: 134532828.519 ops/s
Iteration  16: 133524700.110 ops/s
Iteration  17: 133696762.614 ops/s
Iteration  18: 133516373.411 ops/s
Iteration  19: 134183446.234 ops/s
Iteration  20: 134582008.669 ops/s
Iteration  21: 134923006.914 ops/s
Iteration  22: 135054166.132 ops/s
Iteration  23: 134625837.028 ops/s
Iteration  24: 134675144.730 ops/s
Iteration  25: 134238620.830 ops/s
Iteration  26: 133579665.091 ops/s
Iteration  27: 133715078.796 ops/s
Iteration  28: 134385897.072 ops/s
Iteration  29: 134515286.083 ops/s
Iteration  30: 134077081.477 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWith":
  134041172.223 ±(99.9%) 591555.944 ops/s [Average]
  (min, avg, max) = (131769165.348, 134041172.223, 135363484.844), stdev = 885413.156
  CI (99.9%): [133449616.279, 134632728.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  134041172.223 ± 591555.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154430720.976 ops/s
# Warmup Iteration   2: 304699115.229 ops/s
# Warmup Iteration   3: 267218878.678 ops/s
# Warmup Iteration   4: 312318935.072 ops/s
# Warmup Iteration   5: 316108733.177 ops/s
# Warmup Iteration   6: 315997378.649 ops/s
# Warmup Iteration   7: 311702242.642 ops/s
# Warmup Iteration   8: 314122787.231 ops/s
# Warmup Iteration   9: 314183593.958 ops/s
# Warmup Iteration  10: 308328214.934 ops/s
# Warmup Iteration  11: 312222438.887 ops/s
# Warmup Iteration  12: 309198468.040 ops/s
# Warmup Iteration  13: 312846888.771 ops/s
# Warmup Iteration  14: 311779297.418 ops/s
# Warmup Iteration  15: 310946173.761 ops/s
# Warmup Iteration  16: 314087333.318 ops/s
# Warmup Iteration  17: 304609614.941 ops/s
# Warmup Iteration  18: 311395680.255 ops/s
# Warmup Iteration  19: 310495903.980 ops/s
# Warmup Iteration  20: 313642123.167 ops/s
# Warmup Iteration  21: 310891933.454 ops/s
# Warmup Iteration  22: 313987815.562 ops/s
# Warmup Iteration  23: 311773616.202 ops/s
# Warmup Iteration  24: 312062411.215 ops/s
# Warmup Iteration  25: 313046401.306 ops/s
# Warmup Iteration  26: 313917798.250 ops/s
# Warmup Iteration  27: 311949961.986 ops/s
# Warmup Iteration  28: 310544493.588 ops/s
# Warmup Iteration  29: 314049998.233 ops/s
# Warmup Iteration  30: 314180823.358 ops/s
Iteration   1: 312270004.527 ops/s
Iteration   2: 312665662.261 ops/s
Iteration   3: 311836230.768 ops/s
Iteration   4: 315169433.960 ops/s
Iteration   5: 314890035.643 ops/s
Iteration   6: 315015187.767 ops/s
Iteration   7: 313006037.605 ops/s
Iteration   8: 312538916.825 ops/s
Iteration   9: 311304201.775 ops/s
Iteration  10: 312467780.624 ops/s
Iteration  11: 314527337.042 ops/s
Iteration  12: 312168197.506 ops/s
Iteration  13: 312229850.073 ops/s
Iteration  14: 313659352.399 ops/s
Iteration  15: 314387096.629 ops/s
Iteration  16: 309253017.151 ops/s
Iteration  17: 311624187.965 ops/s
Iteration  18: 311694931.943 ops/s
Iteration  19: 310823409.789 ops/s
Iteration  20: 313365975.402 ops/s
Iteration  21: 309990261.144 ops/s
Iteration  22: 306519837.887 ops/s
Iteration  23: 305182613.131 ops/s
Iteration  24: 310589310.100 ops/s
Iteration  25: 312833012.072 ops/s
Iteration  26: 310761166.381 ops/s
Iteration  27: 310946858.074 ops/s
Iteration  28: 307675754.032 ops/s
Iteration  29: 306325756.879 ops/s
Iteration  30: 306484235.659 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  311406855.100 ±(99.9%) 1809097.760 ops/s [Average]
  (min, avg, max) = (305182613.131, 311406855.100, 315169433.960), stdev = 2707772.565
  CI (99.9%): [309597757.341, 313215952.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  311406855.100 ± 1809097.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158143343.139 ops/s
# Warmup Iteration   2: 300644766.236 ops/s
# Warmup Iteration   3: 265904840.084 ops/s
# Warmup Iteration   4: 308728556.016 ops/s
# Warmup Iteration   5: 307027905.574 ops/s
# Warmup Iteration   6: 305994595.921 ops/s
# Warmup Iteration   7: 310172358.250 ops/s
# Warmup Iteration   8: 306770172.741 ops/s
# Warmup Iteration   9: 304921986.516 ops/s
# Warmup Iteration  10: 310989068.362 ops/s
# Warmup Iteration  11: 311611502.447 ops/s
# Warmup Iteration  12: 311630817.780 ops/s
# Warmup Iteration  13: 310395492.955 ops/s
# Warmup Iteration  14: 310487035.610 ops/s
# Warmup Iteration  15: 309490543.175 ops/s
# Warmup Iteration  16: 308632144.587 ops/s
# Warmup Iteration  17: 305627791.247 ops/s
# Warmup Iteration  18: 303290117.770 ops/s
# Warmup Iteration  19: 311539939.926 ops/s
# Warmup Iteration  20: 310944673.352 ops/s
# Warmup Iteration  21: 308997275.625 ops/s
# Warmup Iteration  22: 307724847.626 ops/s
# Warmup Iteration  23: 309121519.857 ops/s
# Warmup Iteration  24: 308862115.519 ops/s
# Warmup Iteration  25: 309240154.069 ops/s
# Warmup Iteration  26: 310817228.302 ops/s
# Warmup Iteration  27: 302315297.861 ops/s
# Warmup Iteration  28: 308951084.093 ops/s
# Warmup Iteration  29: 308266043.840 ops/s
# Warmup Iteration  30: 308732192.639 ops/s
Iteration   1: 311482470.873 ops/s
Iteration   2: 310372583.757 ops/s
Iteration   3: 310576748.163 ops/s
Iteration   4: 311351252.033 ops/s
Iteration   5: 310486554.612 ops/s
Iteration   6: 310417136.219 ops/s
Iteration   7: 310913736.795 ops/s
Iteration   8: 311573507.616 ops/s
Iteration   9: 310263484.114 ops/s
Iteration  10: 307430961.169 ops/s
Iteration  11: 307806139.746 ops/s
Iteration  12: 311905807.654 ops/s
Iteration  13: 311558174.416 ops/s
Iteration  14: 306405789.151 ops/s
Iteration  15: 306386088.355 ops/s
Iteration  16: 308555217.752 ops/s
Iteration  17: 311177495.687 ops/s
Iteration  18: 306758521.162 ops/s
Iteration  19: 310777030.164 ops/s
Iteration  20: 311435012.478 ops/s
Iteration  21: 311340909.146 ops/s
Iteration  22: 309887040.085 ops/s
Iteration  23: 310468141.495 ops/s
Iteration  24: 310548676.631 ops/s
Iteration  25: 312146817.785 ops/s
Iteration  26: 308456366.105 ops/s
Iteration  27: 312127612.872 ops/s
Iteration  28: 311395095.667 ops/s
Iteration  29: 309021477.758 ops/s
Iteration  30: 307664386.273 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_occurrencesOf":
  310023007.858 ±(99.9%) 1180737.180 ops/s [Average]
  (min, avg, max) = (306386088.355, 310023007.858, 312146817.785), stdev = 1767271.959
  CI (99.9%): [308842270.678, 311203745.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  310023007.858 ± 1180737.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616885.757 ops/s
# Warmup Iteration   2: 1748552.692 ops/s
# Warmup Iteration   3: 1795855.293 ops/s
# Warmup Iteration   4: 1521504.722 ops/s
# Warmup Iteration   5: 1804001.991 ops/s
# Warmup Iteration   6: 1803027.890 ops/s
# Warmup Iteration   7: 1802275.715 ops/s
# Warmup Iteration   8: 1809469.037 ops/s
# Warmup Iteration   9: 1797292.528 ops/s
# Warmup Iteration  10: 1801829.344 ops/s
# Warmup Iteration  11: 1811912.856 ops/s
# Warmup Iteration  12: 1797642.937 ops/s
# Warmup Iteration  13: 1793651.123 ops/s
# Warmup Iteration  14: 1802461.200 ops/s
# Warmup Iteration  15: 1792034.278 ops/s
# Warmup Iteration  16: 1811249.987 ops/s
# Warmup Iteration  17: 1773373.916 ops/s
# Warmup Iteration  18: 1792358.382 ops/s
# Warmup Iteration  19: 1767381.908 ops/s
# Warmup Iteration  20: 1808237.065 ops/s
# Warmup Iteration  21: 1809095.562 ops/s
# Warmup Iteration  22: 1809777.716 ops/s
# Warmup Iteration  23: 1774553.432 ops/s
# Warmup Iteration  24: 1799827.532 ops/s
# Warmup Iteration  25: 1810797.750 ops/s
# Warmup Iteration  26: 1810633.415 ops/s
# Warmup Iteration  27: 1798392.984 ops/s
# Warmup Iteration  28: 1807084.448 ops/s
# Warmup Iteration  29: 1802628.375 ops/s
# Warmup Iteration  30: 1798516.560 ops/s
Iteration   1: 1801732.157 ops/s
Iteration   2: 1810680.338 ops/s
Iteration   3: 1790192.062 ops/s
Iteration   4: 1784530.257 ops/s
Iteration   5: 1802780.326 ops/s
Iteration   6: 1818733.727 ops/s
Iteration   7: 1803161.593 ops/s
Iteration   8: 1808333.824 ops/s
Iteration   9: 1818466.615 ops/s
Iteration  10: 1799241.155 ops/s
Iteration  11: 1800050.747 ops/s
Iteration  12: 1818418.743 ops/s
Iteration  13: 1811310.689 ops/s
Iteration  14: 1812806.895 ops/s
Iteration  15: 1817565.047 ops/s
Iteration  16: 1814975.462 ops/s
Iteration  17: 1815138.663 ops/s
Iteration  18: 1818550.345 ops/s
Iteration  19: 1804363.921 ops/s
Iteration  20: 1772371.535 ops/s
Iteration  21: 1802705.749 ops/s
Iteration  22: 1811000.844 ops/s
Iteration  23: 1745513.164 ops/s
Iteration  24: 1770232.464 ops/s
Iteration  25: 1729964.060 ops/s
Iteration  26: 1812689.965 ops/s
Iteration  27: 1800556.418 ops/s
Iteration  28: 1802858.158 ops/s
Iteration  29: 1790063.999 ops/s
Iteration  30: 1785514.493 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_parallelStream":
  1799150.114 ±(99.9%) 14198.130 ops/s [Average]
  (min, avg, max) = (1729964.060, 1799150.114, 1818733.727), stdev = 21251.094
  CI (99.9%): [1784951.984, 1813348.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_parallelStream  thrpt   30  1799150.114 ± 14198.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3541613.171 ops/s
# Warmup Iteration   2: 7789996.648 ops/s
# Warmup Iteration   3: 7219235.996 ops/s
# Warmup Iteration   4: 7054714.869 ops/s
# Warmup Iteration   5: 7823883.593 ops/s
# Warmup Iteration   6: 7847443.232 ops/s
# Warmup Iteration   7: 7874986.082 ops/s
# Warmup Iteration   8: 7877181.288 ops/s
# Warmup Iteration   9: 7869211.806 ops/s
# Warmup Iteration  10: 7852341.578 ops/s
# Warmup Iteration  11: 7866818.086 ops/s
# Warmup Iteration  12: 7923561.082 ops/s
# Warmup Iteration  13: 7915665.547 ops/s
# Warmup Iteration  14: 7854393.559 ops/s
# Warmup Iteration  15: 7869489.868 ops/s
# Warmup Iteration  16: 7847158.593 ops/s
# Warmup Iteration  17: 7894850.906 ops/s
# Warmup Iteration  18: 7791068.655 ops/s
# Warmup Iteration  19: 7867518.379 ops/s
# Warmup Iteration  20: 7910757.046 ops/s
# Warmup Iteration  21: 7912330.144 ops/s
# Warmup Iteration  22: 7885091.923 ops/s
# Warmup Iteration  23: 7905592.882 ops/s
# Warmup Iteration  24: 7875165.122 ops/s
# Warmup Iteration  25: 7856989.387 ops/s
# Warmup Iteration  26: 7898183.708 ops/s
# Warmup Iteration  27: 7893519.522 ops/s
# Warmup Iteration  28: 7855055.143 ops/s
# Warmup Iteration  29: 7895935.005 ops/s
# Warmup Iteration  30: 7846590.315 ops/s
Iteration   1: 7904733.944 ops/s
Iteration   2: 7836791.238 ops/s
Iteration   3: 7862779.707 ops/s
Iteration   4: 7901489.221 ops/s
Iteration   5: 7852950.990 ops/s
Iteration   6: 7815866.655 ops/s
Iteration   7: 7921902.759 ops/s
Iteration   8: 7897549.010 ops/s
Iteration   9: 7915936.410 ops/s
Iteration  10: 7942286.651 ops/s
Iteration  11: 7882336.569 ops/s
Iteration  12: 7931632.178 ops/s
Iteration  13: 7870012.035 ops/s
Iteration  14: 7769032.979 ops/s
Iteration  15: 7915004.039 ops/s
Iteration  16: 7857121.984 ops/s
Iteration  17: 7879238.727 ops/s
Iteration  18: 7921875.376 ops/s
Iteration  19: 7850504.776 ops/s
Iteration  20: 7953225.694 ops/s
Iteration  21: 7925254.359 ops/s
Iteration  22: 7806825.056 ops/s
Iteration  23: 7916540.164 ops/s
Iteration  24: 7897465.055 ops/s
Iteration  25: 7822485.478 ops/s
Iteration  26: 7930056.752 ops/s
Iteration  27: 7934598.352 ops/s
Iteration  28: 7941005.932 ops/s
Iteration  29: 7850526.555 ops/s
Iteration  30: 7877681.361 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partition":
  7886157.000 ±(99.9%) 30750.240 ops/s [Average]
  (min, avg, max) = (7769032.979, 7886157.000, 7953225.694), stdev = 46025.516
  CI (99.9%): [7855406.760, 7916907.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_partition  thrpt   30  7886157.000 ± 30750.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3262438.473 ops/s
# Warmup Iteration   2: 7505436.498 ops/s
# Warmup Iteration   3: 7408302.089 ops/s
# Warmup Iteration   4: 6388071.371 ops/s
# Warmup Iteration   5: 7542802.483 ops/s
# Warmup Iteration   6: 7531900.274 ops/s
# Warmup Iteration   7: 7577486.021 ops/s
# Warmup Iteration   8: 7507664.971 ops/s
# Warmup Iteration   9: 7585777.103 ops/s
# Warmup Iteration  10: 7490505.264 ops/s
# Warmup Iteration  11: 7483467.524 ops/s
# Warmup Iteration  12: 7481806.904 ops/s
# Warmup Iteration  13: 7522305.152 ops/s
# Warmup Iteration  14: 7551830.831 ops/s
# Warmup Iteration  15: 7529157.617 ops/s
# Warmup Iteration  16: 7540969.902 ops/s
# Warmup Iteration  17: 7644040.930 ops/s
# Warmup Iteration  18: 7571923.665 ops/s
# Warmup Iteration  19: 7430313.038 ops/s
# Warmup Iteration  20: 7707580.983 ops/s
# Warmup Iteration  21: 7656544.829 ops/s
# Warmup Iteration  22: 7655987.943 ops/s
# Warmup Iteration  23: 7710778.866 ops/s
# Warmup Iteration  24: 7673280.553 ops/s
# Warmup Iteration  25: 7693604.678 ops/s
# Warmup Iteration  26: 7589100.955 ops/s
# Warmup Iteration  27: 7721371.303 ops/s
# Warmup Iteration  28: 7675749.265 ops/s
# Warmup Iteration  29: 7687345.186 ops/s
# Warmup Iteration  30: 7727253.620 ops/s
Iteration   1: 7676883.007 ops/s
Iteration   2: 7692168.716 ops/s
Iteration   3: 7659600.404 ops/s
Iteration   4: 7586512.004 ops/s
Iteration   5: 7661757.037 ops/s
Iteration   6: 7707339.643 ops/s
Iteration   7: 7736054.906 ops/s
Iteration   8: 7647811.829 ops/s
Iteration   9: 7689193.355 ops/s
Iteration  10: 7701227.839 ops/s
Iteration  11: 7693162.804 ops/s
Iteration  12: 7652442.745 ops/s
Iteration  13: 7632587.424 ops/s
Iteration  14: 7692885.900 ops/s
Iteration  15: 7630783.203 ops/s
Iteration  16: 7682310.196 ops/s
Iteration  17: 7639237.387 ops/s
Iteration  18: 7693888.390 ops/s
Iteration  19: 7728729.275 ops/s
Iteration  20: 7676849.481 ops/s
Iteration  21: 7691102.065 ops/s
Iteration  22: 7677673.506 ops/s
Iteration  23: 7626860.941 ops/s
Iteration  24: 7720312.963 ops/s
Iteration  25: 7615393.262 ops/s
Iteration  26: 7683818.187 ops/s
Iteration  27: 7667138.645 ops/s
Iteration  28: 7702254.830 ops/s
Iteration  29: 7660657.609 ops/s
Iteration  30: 7499124.583 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWhile":
  7667525.405 ±(99.9%) 31132.581 ops/s [Average]
  (min, avg, max) = (7499124.583, 7667525.405, 7736054.906), stdev = 46597.785
  CI (99.9%): [7636392.824, 7698657.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWhile  thrpt   30  7667525.405 ± 31132.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3512169.936 ops/s
# Warmup Iteration   2: 7795553.892 ops/s
# Warmup Iteration   3: 7739355.932 ops/s
# Warmup Iteration   4: 6883533.348 ops/s
# Warmup Iteration   5: 7971237.070 ops/s
# Warmup Iteration   6: 7803247.296 ops/s
# Warmup Iteration   7: 7860823.845 ops/s
# Warmup Iteration   8: 7991110.539 ops/s
# Warmup Iteration   9: 7794353.051 ops/s
# Warmup Iteration  10: 7962338.529 ops/s
# Warmup Iteration  11: 7983384.094 ops/s
# Warmup Iteration  12: 7810123.971 ops/s
# Warmup Iteration  13: 7815103.108 ops/s
# Warmup Iteration  14: 7896089.698 ops/s
# Warmup Iteration  15: 7963201.090 ops/s
# Warmup Iteration  16: 7775758.049 ops/s
# Warmup Iteration  17: 7881857.003 ops/s
# Warmup Iteration  18: 7865461.151 ops/s
# Warmup Iteration  19: 7793223.927 ops/s
# Warmup Iteration  20: 7794672.339 ops/s
# Warmup Iteration  21: 7752051.809 ops/s
# Warmup Iteration  22: 7902616.160 ops/s
# Warmup Iteration  23: 7606808.330 ops/s
# Warmup Iteration  24: 7726847.026 ops/s
# Warmup Iteration  25: 7852994.067 ops/s
# Warmup Iteration  26: 7822096.238 ops/s
# Warmup Iteration  27: 7817961.395 ops/s
# Warmup Iteration  28: 7703980.143 ops/s
# Warmup Iteration  29: 7836202.015 ops/s
# Warmup Iteration  30: 7813299.507 ops/s
Iteration   1: 7690937.344 ops/s
Iteration   2: 7856546.099 ops/s
Iteration   3: 7705609.087 ops/s
Iteration   4: 7725048.664 ops/s
Iteration   5: 7868898.712 ops/s
Iteration   6: 7880333.746 ops/s
Iteration   7: 7489566.091 ops/s
Iteration   8: 7786383.661 ops/s
Iteration   9: 7895925.465 ops/s
Iteration  10: 7886509.979 ops/s
Iteration  11: 7881733.251 ops/s
Iteration  12: 7906318.122 ops/s
Iteration  13: 7872056.157 ops/s
Iteration  14: 7826189.585 ops/s
Iteration  15: 7876545.368 ops/s
Iteration  16: 7855816.255 ops/s
Iteration  17: 7696382.969 ops/s
Iteration  18: 7731210.187 ops/s
Iteration  19: 7848301.305 ops/s
Iteration  20: 7702016.887 ops/s
Iteration  21: 7836820.587 ops/s
Iteration  22: 7918590.465 ops/s
Iteration  23: 7829445.727 ops/s
Iteration  24: 7875522.293 ops/s
Iteration  25: 7815835.288 ops/s
Iteration  26: 7800612.330 ops/s
Iteration  27: 7858930.527 ops/s
Iteration  28: 7921835.290 ops/s
Iteration  29: 7926736.054 ops/s
Iteration  30: 7886985.118 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWith":
  7821788.087 ±(99.9%) 63775.404 ops/s [Average]
  (min, avg, max) = (7489566.091, 7821788.087, 7926736.054), stdev = 95456.029
  CI (99.9%): [7758012.684, 7885563.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_partitionWith  thrpt   30  7821788.087 ± 63775.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44489366.453 ops/s
# Warmup Iteration   2: 86272612.355 ops/s
# Warmup Iteration   3: 74484933.890 ops/s
# Warmup Iteration   4: 87415918.340 ops/s
# Warmup Iteration   5: 87999489.762 ops/s
# Warmup Iteration   6: 87772455.377 ops/s
# Warmup Iteration   7: 88112049.701 ops/s
# Warmup Iteration   8: 86917980.976 ops/s
# Warmup Iteration   9: 86016241.324 ops/s
# Warmup Iteration  10: 85322264.422 ops/s
# Warmup Iteration  11: 86088510.282 ops/s
# Warmup Iteration  12: 87921055.836 ops/s
# Warmup Iteration  13: 88292574.194 ops/s
# Warmup Iteration  14: 88100971.761 ops/s
# Warmup Iteration  15: 86179658.280 ops/s
# Warmup Iteration  16: 87684788.964 ops/s
# Warmup Iteration  17: 86850842.742 ops/s
# Warmup Iteration  18: 87111652.235 ops/s
# Warmup Iteration  19: 86930246.898 ops/s
# Warmup Iteration  20: 87068097.929 ops/s
# Warmup Iteration  21: 85969522.121 ops/s
# Warmup Iteration  22: 87409393.643 ops/s
# Warmup Iteration  23: 86429340.567 ops/s
# Warmup Iteration  24: 87546637.394 ops/s
# Warmup Iteration  25: 88185572.431 ops/s
# Warmup Iteration  26: 88102204.145 ops/s
# Warmup Iteration  27: 84659259.739 ops/s
# Warmup Iteration  28: 85869987.281 ops/s
# Warmup Iteration  29: 86914933.036 ops/s
# Warmup Iteration  30: 87469130.021 ops/s
Iteration   1: 87423094.736 ops/s
Iteration   2: 88173497.386 ops/s
Iteration   3: 88412167.629 ops/s
Iteration   4: 86520005.992 ops/s
Iteration   5: 88009518.569 ops/s
Iteration   6: 85172256.014 ops/s
Iteration   7: 86966231.354 ops/s
Iteration   8: 87295158.937 ops/s
Iteration   9: 86043499.044 ops/s
Iteration  10: 84526978.284 ops/s
Iteration  11: 87445439.814 ops/s
Iteration  12: 85396703.013 ops/s
Iteration  13: 88327121.167 ops/s
Iteration  14: 87241742.123 ops/s
Iteration  15: 85671589.082 ops/s
Iteration  16: 87911894.506 ops/s
Iteration  17: 86885228.106 ops/s
Iteration  18: 84974090.358 ops/s
Iteration  19: 85403431.158 ops/s
Iteration  20: 87569095.531 ops/s
Iteration  21: 86947625.436 ops/s
Iteration  22: 86897800.329 ops/s
Iteration  23: 86952379.700 ops/s
Iteration  24: 86489791.540 ops/s
Iteration  25: 86063583.955 ops/s
Iteration  26: 87218606.306 ops/s
Iteration  27: 86944895.541 ops/s
Iteration  28: 87873602.687 ops/s
Iteration  29: 88219510.845 ops/s
Iteration  30: 87756106.188 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_reject":
  86891088.178 ±(99.9%) 713828.882 ops/s [Average]
  (min, avg, max) = (84526978.284, 86891088.178, 88412167.629), stdev = 1068425.546
  CI (99.9%): [86177259.296, 87604917.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_reject  thrpt   30  86891088.178 ± 713828.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1952649.948 ops/s
# Warmup Iteration   2: 3202138.686 ops/s
# Warmup Iteration   3: 3645518.900 ops/s
# Warmup Iteration   4: 3727555.857 ops/s
# Warmup Iteration   5: 3745107.395 ops/s
# Warmup Iteration   6: 3142190.626 ops/s
# Warmup Iteration   7: 3770358.628 ops/s
# Warmup Iteration   8: 3748667.526 ops/s
# Warmup Iteration   9: 3752560.268 ops/s
# Warmup Iteration  10: 3759300.156 ops/s
# Warmup Iteration  11: 3740932.725 ops/s
# Warmup Iteration  12: 3771119.016 ops/s
# Warmup Iteration  13: 3750993.100 ops/s
# Warmup Iteration  14: 3754323.620 ops/s
# Warmup Iteration  15: 3764929.028 ops/s
# Warmup Iteration  16: 3742740.900 ops/s
# Warmup Iteration  17: 3784253.371 ops/s
# Warmup Iteration  18: 3744859.080 ops/s
# Warmup Iteration  19: 3743382.135 ops/s
# Warmup Iteration  20: 3739885.015 ops/s
# Warmup Iteration  21: 3762879.708 ops/s
# Warmup Iteration  22: 3760748.690 ops/s
# Warmup Iteration  23: 3755441.889 ops/s
# Warmup Iteration  24: 3749967.033 ops/s
# Warmup Iteration  25: 3716321.938 ops/s
# Warmup Iteration  26: 3748794.464 ops/s
# Warmup Iteration  27: 3736550.788 ops/s
# Warmup Iteration  28: 3756526.572 ops/s
# Warmup Iteration  29: 3720264.318 ops/s
# Warmup Iteration  30: 3714867.717 ops/s
Iteration   1: 3674758.616 ops/s
Iteration   2: 3769413.169 ops/s
Iteration   3: 3756981.257 ops/s
Iteration   4: 3762941.580 ops/s
Iteration   5: 3741759.545 ops/s
Iteration   6: 3750886.251 ops/s
Iteration   7: 3765679.753 ops/s
Iteration   8: 3677881.259 ops/s
Iteration   9: 3752130.811 ops/s
Iteration  10: 3685252.881 ops/s
Iteration  11: 3605562.302 ops/s
Iteration  12: 3778262.799 ops/s
Iteration  13: 3779612.318 ops/s
Iteration  14: 3662618.076 ops/s
Iteration  15: 3770841.090 ops/s
Iteration  16: 3714119.073 ops/s
Iteration  17: 3678682.478 ops/s
Iteration  18: 3712491.008 ops/s
Iteration  19: 3657383.249 ops/s
Iteration  20: 3680989.588 ops/s
Iteration  21: 3671476.412 ops/s
Iteration  22: 3766370.169 ops/s
Iteration  23: 3749159.534 ops/s
Iteration  24: 3718985.699 ops/s
Iteration  25: 3747568.139 ops/s
Iteration  26: 3722149.658 ops/s
Iteration  27: 3686622.933 ops/s
Iteration  28: 3614465.138 ops/s
Iteration  29: 3721998.322 ops/s
Iteration  30: 3720096.669 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectToTarget":
  3716571.326 ±(99.9%) 31972.783 ops/s [Average]
  (min, avg, max) = (3605562.302, 3716571.326, 3779612.318), stdev = 47855.360
  CI (99.9%): [3684598.543, 3748544.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectToTarget  thrpt   30  3716571.326 ± 31972.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44427843.289 ops/s
# Warmup Iteration   2: 86979061.793 ops/s
# Warmup Iteration   3: 69540256.871 ops/s
# Warmup Iteration   4: 82028053.691 ops/s
# Warmup Iteration   5: 81946473.843 ops/s
# Warmup Iteration   6: 82387787.759 ops/s
# Warmup Iteration   7: 82134733.947 ops/s
# Warmup Iteration   8: 82120862.892 ops/s
# Warmup Iteration   9: 82014447.959 ops/s
# Warmup Iteration  10: 82397056.582 ops/s
# Warmup Iteration  11: 81922990.321 ops/s
# Warmup Iteration  12: 82053844.020 ops/s
# Warmup Iteration  13: 82498250.647 ops/s
# Warmup Iteration  14: 79653684.996 ops/s
# Warmup Iteration  15: 78961016.034 ops/s
# Warmup Iteration  16: 81094567.202 ops/s
# Warmup Iteration  17: 81684444.743 ops/s
# Warmup Iteration  18: 81331817.611 ops/s
# Warmup Iteration  19: 80122653.751 ops/s
# Warmup Iteration  20: 78863260.767 ops/s
# Warmup Iteration  21: 81075182.381 ops/s
# Warmup Iteration  22: 82194915.904 ops/s
# Warmup Iteration  23: 81973958.811 ops/s
# Warmup Iteration  24: 82172872.488 ops/s
# Warmup Iteration  25: 82626122.492 ops/s
# Warmup Iteration  26: 82260831.107 ops/s
# Warmup Iteration  27: 81796875.688 ops/s
# Warmup Iteration  28: 82201901.118 ops/s
# Warmup Iteration  29: 82431457.368 ops/s
# Warmup Iteration  30: 82038418.251 ops/s
Iteration   1: 82023487.518 ops/s
Iteration   2: 79743292.572 ops/s
Iteration   3: 82417553.999 ops/s
Iteration   4: 82231300.277 ops/s
Iteration   5: 82202317.287 ops/s
Iteration   6: 82912816.062 ops/s
Iteration   7: 82837409.500 ops/s
Iteration   8: 81995441.480 ops/s
Iteration   9: 82182562.408 ops/s
Iteration  10: 81421716.846 ops/s
Iteration  11: 82509385.412 ops/s
Iteration  12: 80686135.595 ops/s
Iteration  13: 80873015.181 ops/s
Iteration  14: 81275759.768 ops/s
Iteration  15: 82417162.284 ops/s
Iteration  16: 82424646.074 ops/s
Iteration  17: 81865318.683 ops/s
Iteration  18: 81539725.757 ops/s
Iteration  19: 81871320.697 ops/s
Iteration  20: 81875431.984 ops/s
Iteration  21: 82663567.541 ops/s
Iteration  22: 82597640.646 ops/s
Iteration  23: 82373014.001 ops/s
Iteration  24: 82339833.023 ops/s
Iteration  25: 81845441.368 ops/s
Iteration  26: 82167188.075 ops/s
Iteration  27: 81318645.168 ops/s
Iteration  28: 81685177.917 ops/s
Iteration  29: 81624494.114 ops/s
Iteration  30: 81747306.132 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith":
  81922270.246 ±(99.9%) 453339.655 ops/s [Average]
  (min, avg, max) = (79743292.572, 81922270.246, 82912816.062), stdev = 678537.505
  CI (99.9%): [81468930.591, 82375609.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith  thrpt   30  81922270.246 ± 453339.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1479893.019 ops/s
# Warmup Iteration   2: 3900594.584 ops/s
# Warmup Iteration   3: 3954680.916 ops/s
# Warmup Iteration   4: 3312495.883 ops/s
# Warmup Iteration   5: 3980706.555 ops/s
# Warmup Iteration   6: 3973878.645 ops/s
# Warmup Iteration   7: 3987928.710 ops/s
# Warmup Iteration   8: 3951153.240 ops/s
# Warmup Iteration   9: 3979983.262 ops/s
# Warmup Iteration  10: 3954893.162 ops/s
# Warmup Iteration  11: 3980121.244 ops/s
# Warmup Iteration  12: 3951799.222 ops/s
# Warmup Iteration  13: 3983293.692 ops/s
# Warmup Iteration  14: 3922845.617 ops/s
# Warmup Iteration  15: 3974339.668 ops/s
# Warmup Iteration  16: 3964975.493 ops/s
# Warmup Iteration  17: 3973121.400 ops/s
# Warmup Iteration  18: 3938650.484 ops/s
# Warmup Iteration  19: 3967705.359 ops/s
# Warmup Iteration  20: 3954294.099 ops/s
# Warmup Iteration  21: 3971816.601 ops/s
# Warmup Iteration  22: 3959773.393 ops/s
# Warmup Iteration  23: 3971261.874 ops/s
# Warmup Iteration  24: 3944070.408 ops/s
# Warmup Iteration  25: 3931658.218 ops/s
# Warmup Iteration  26: 3940246.059 ops/s
# Warmup Iteration  27: 3965049.535 ops/s
# Warmup Iteration  28: 3967429.636 ops/s
# Warmup Iteration  29: 3962998.359 ops/s
# Warmup Iteration  30: 3958579.245 ops/s
Iteration   1: 3967328.075 ops/s
Iteration   2: 3966871.492 ops/s
Iteration   3: 3957931.816 ops/s
Iteration   4: 3941152.427 ops/s
Iteration   5: 3963139.696 ops/s
Iteration   6: 3973944.348 ops/s
Iteration   7: 3943991.179 ops/s
Iteration   8: 3963798.453 ops/s
Iteration   9: 3941261.548 ops/s
Iteration  10: 3967267.948 ops/s
Iteration  11: 3972864.495 ops/s
Iteration  12: 3894341.940 ops/s
Iteration  13: 3914537.044 ops/s
Iteration  14: 3969713.018 ops/s
Iteration  15: 3974094.793 ops/s
Iteration  16: 3962703.684 ops/s
Iteration  17: 3936928.823 ops/s
Iteration  18: 3957502.280 ops/s
Iteration  19: 3944195.514 ops/s
Iteration  20: 3963388.306 ops/s
Iteration  21: 3978731.989 ops/s
Iteration  22: 3930907.557 ops/s
Iteration  23: 3847599.144 ops/s
Iteration  24: 3979173.012 ops/s
Iteration  25: 3964439.580 ops/s
Iteration  26: 3974663.747 ops/s
Iteration  27: 3860754.742 ops/s
Iteration  28: 3973515.375 ops/s
Iteration  29: 3969426.512 ops/s
Iteration  30: 3905877.096 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith_target":
  3948734.854 ±(99.9%) 22421.110 ops/s [Average]
  (min, avg, max) = (3847599.144, 3948734.854, 3979173.012), stdev = 33558.864
  CI (99.9%): [3926313.745, 3971155.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3948734.854 ± 22421.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651563.170 ops/s
# Warmup Iteration   2: 779591.941 ops/s
# Warmup Iteration   3: 972222.415 ops/s
# Warmup Iteration   4: 970981.865 ops/s
# Warmup Iteration   5: 965954.724 ops/s
# Warmup Iteration   6: 965961.428 ops/s
# Warmup Iteration   7: 971845.876 ops/s
# Warmup Iteration   8: 973553.886 ops/s
# Warmup Iteration   9: 810264.812 ops/s
# Warmup Iteration  10: 970604.841 ops/s
# Warmup Iteration  11: 969783.185 ops/s
# Warmup Iteration  12: 968748.500 ops/s
# Warmup Iteration  13: 973533.285 ops/s
# Warmup Iteration  14: 965922.705 ops/s
# Warmup Iteration  15: 978488.566 ops/s
# Warmup Iteration  16: 966939.431 ops/s
# Warmup Iteration  17: 1004479.212 ops/s
# Warmup Iteration  18: 1034394.696 ops/s
# Warmup Iteration  19: 1006074.049 ops/s
# Warmup Iteration  20: 1022362.506 ops/s
# Warmup Iteration  21: 1020800.875 ops/s
# Warmup Iteration  22: 1025941.841 ops/s
# Warmup Iteration  23: 1027741.728 ops/s
# Warmup Iteration  24: 1032633.147 ops/s
# Warmup Iteration  25: 1001391.802 ops/s
# Warmup Iteration  26: 982095.884 ops/s
# Warmup Iteration  27: 1023116.687 ops/s
# Warmup Iteration  28: 1031200.457 ops/s
# Warmup Iteration  29: 1021868.015 ops/s
# Warmup Iteration  30: 1025658.483 ops/s
Iteration   1: 1034594.656 ops/s
Iteration   2: 1015156.899 ops/s
Iteration   3: 996348.525 ops/s
Iteration   4: 1014388.535 ops/s
Iteration   5: 1030101.171 ops/s
Iteration   6: 1020164.467 ops/s
Iteration   7: 1001333.033 ops/s
Iteration   8: 998405.160 ops/s
Iteration   9: 1026066.018 ops/s
Iteration  10: 1033116.648 ops/s
Iteration  11: 1002390.935 ops/s
Iteration  12: 991916.839 ops/s
Iteration  13: 1013454.787 ops/s
Iteration  14: 996258.012 ops/s
Iteration  15: 1016501.190 ops/s
Iteration  16: 1023848.258 ops/s
Iteration  17: 1032114.768 ops/s
Iteration  18: 1017415.511 ops/s
Iteration  19: 1011499.927 ops/s
Iteration  20: 1030411.523 ops/s
Iteration  21: 1031119.098 ops/s
Iteration  22: 1034736.102 ops/s
Iteration  23: 997385.360 ops/s
Iteration  24: 1023436.917 ops/s
Iteration  25: 1023092.329 ops/s
Iteration  26: 998304.204 ops/s
Iteration  27: 1006049.126 ops/s
Iteration  28: 1013463.585 ops/s
Iteration  29: 1027597.710 ops/s
Iteration  30: 1019606.190 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_remove":
  1016009.249 ±(99.9%) 8930.292 ops/s [Average]
  (min, avg, max) = (991916.839, 1016009.249, 1034736.102), stdev = 13366.442
  CI (99.9%): [1007078.957, 1024939.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_remove  thrpt   30  1016009.249 ± 8930.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752337.825 ops/s
# Warmup Iteration   2: 791267.848 ops/s
# Warmup Iteration   3: 999841.917 ops/s
# Warmup Iteration   4: 990780.034 ops/s
# Warmup Iteration   5: 994773.359 ops/s
# Warmup Iteration   6: 1001009.517 ops/s
# Warmup Iteration   7: 978431.784 ops/s
# Warmup Iteration   8: 981454.074 ops/s
# Warmup Iteration   9: 1005600.367 ops/s
# Warmup Iteration  10: 1000899.924 ops/s
# Warmup Iteration  11: 995685.424 ops/s
# Warmup Iteration  12: 869458.355 ops/s
# Warmup Iteration  13: 985585.697 ops/s
# Warmup Iteration  14: 996691.072 ops/s
# Warmup Iteration  15: 996833.230 ops/s
# Warmup Iteration  16: 997067.067 ops/s
# Warmup Iteration  17: 1051568.742 ops/s
# Warmup Iteration  18: 1050155.657 ops/s
# Warmup Iteration  19: 1056040.901 ops/s
# Warmup Iteration  20: 1058599.021 ops/s
# Warmup Iteration  21: 1056626.126 ops/s
# Warmup Iteration  22: 1052712.976 ops/s
# Warmup Iteration  23: 1046704.176 ops/s
# Warmup Iteration  24: 1055040.497 ops/s
# Warmup Iteration  25: 1052256.665 ops/s
# Warmup Iteration  26: 1054160.517 ops/s
# Warmup Iteration  27: 1032835.103 ops/s
# Warmup Iteration  28: 1018044.392 ops/s
# Warmup Iteration  29: 1033810.728 ops/s
# Warmup Iteration  30: 1016498.989 ops/s
Iteration   1: 1026451.657 ops/s
Iteration   2: 1044866.102 ops/s
Iteration   3: 1054553.886 ops/s
Iteration   4: 1055826.922 ops/s
Iteration   5: 1050301.337 ops/s
Iteration   6: 1058340.564 ops/s
Iteration   7: 1048824.788 ops/s
Iteration   8: 1046003.140 ops/s
Iteration   9: 1050950.424 ops/s
Iteration  10: 1053736.740 ops/s
Iteration  11: 1019614.977 ops/s
Iteration  12: 1031708.491 ops/s
Iteration  13: 995222.959 ops/s
Iteration  14: 1020386.907 ops/s
Iteration  15: 1010995.683 ops/s
Iteration  16: 1043639.982 ops/s
Iteration  17: 1032917.417 ops/s
Iteration  18: 1021014.051 ops/s
Iteration  19: 1006817.035 ops/s
Iteration  20: 1018387.261 ops/s
Iteration  21: 1035144.844 ops/s
Iteration  22: 1035971.102 ops/s
Iteration  23: 1062127.252 ops/s
Iteration  24: 1059949.704 ops/s
Iteration  25: 1055306.398 ops/s
Iteration  26: 1056765.899 ops/s
Iteration  27: 1059366.190 ops/s
Iteration  28: 1058178.982 ops/s
Iteration  29: 1058447.919 ops/s
Iteration  30: 1052595.940 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_removeAll":
  1040813.818 ±(99.9%) 12325.199 ops/s [Average]
  (min, avg, max) = (995222.959, 1040813.818, 1062127.252), stdev = 18447.779
  CI (99.9%): [1028488.619, 1053139.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_removeAll  thrpt   30  1040813.818 ± 12325.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636336.737 ops/s
# Warmup Iteration   2: 775812.645 ops/s
# Warmup Iteration   3: 942546.034 ops/s
# Warmup Iteration   4: 950349.777 ops/s
# Warmup Iteration   5: 934053.764 ops/s
# Warmup Iteration   6: 972280.180 ops/s
# Warmup Iteration   7: 945431.162 ops/s
# Warmup Iteration   8: 946035.303 ops/s
# Warmup Iteration   9: 812201.154 ops/s
# Warmup Iteration  10: 940597.578 ops/s
# Warmup Iteration  11: 956449.836 ops/s
# Warmup Iteration  12: 945151.910 ops/s
# Warmup Iteration  13: 944858.717 ops/s
# Warmup Iteration  14: 943399.361 ops/s
# Warmup Iteration  15: 947774.438 ops/s
# Warmup Iteration  16: 946423.107 ops/s
# Warmup Iteration  17: 1011135.989 ops/s
# Warmup Iteration  18: 998140.259 ops/s
# Warmup Iteration  19: 1014995.039 ops/s
# Warmup Iteration  20: 1010844.880 ops/s
# Warmup Iteration  21: 1022155.170 ops/s
# Warmup Iteration  22: 1030223.287 ops/s
# Warmup Iteration  23: 1029574.311 ops/s
# Warmup Iteration  24: 1025254.881 ops/s
# Warmup Iteration  25: 1019622.307 ops/s
# Warmup Iteration  26: 1028070.702 ops/s
# Warmup Iteration  27: 1012370.520 ops/s
# Warmup Iteration  28: 1012455.192 ops/s
# Warmup Iteration  29: 1011785.723 ops/s
# Warmup Iteration  30: 1025916.741 ops/s
Iteration   1: 1005828.270 ops/s
Iteration   2: 1030452.028 ops/s
Iteration   3: 1035840.825 ops/s
Iteration   4: 1020560.324 ops/s
Iteration   5: 1030565.130 ops/s
Iteration   6: 1007358.781 ops/s
Iteration   7: 1020995.798 ops/s
Iteration   8: 1024521.879 ops/s
Iteration   9: 1021249.467 ops/s
Iteration  10: 1034066.240 ops/s
Iteration  11: 1014395.361 ops/s
Iteration  12: 1033661.299 ops/s
Iteration  13: 1033488.491 ops/s
Iteration  14: 1023868.393 ops/s
Iteration  15: 1030354.707 ops/s
Iteration  16: 1032484.045 ops/s
Iteration  17: 1022664.535 ops/s
Iteration  18: 1031895.513 ops/s
Iteration  19: 1030037.508 ops/s
Iteration  20: 1023162.772 ops/s
Iteration  21: 1024417.047 ops/s
Iteration  22: 1030402.279 ops/s
Iteration  23: 1017270.630 ops/s
Iteration  24: 1028167.935 ops/s
Iteration  25: 1027773.799 ops/s
Iteration  26: 1024171.731 ops/s
Iteration  27: 1021036.743 ops/s
Iteration  28: 1030801.392 ops/s
Iteration  29: 1023906.991 ops/s
Iteration  30: 1028738.037 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_retainAll":
  1025471.265 ±(99.9%) 4934.662 ops/s [Average]
  (min, avg, max) = (1005828.270, 1025471.265, 1035840.825), stdev = 7385.971
  CI (99.9%): [1020536.603, 1030405.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_retainAll  thrpt   30  1025471.265 ± 4934.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44471413.524 ops/s
# Warmup Iteration   2: 87082538.598 ops/s
# Warmup Iteration   3: 72337584.997 ops/s
# Warmup Iteration   4: 86545110.378 ops/s
# Warmup Iteration   5: 86164190.569 ops/s
# Warmup Iteration   6: 86976551.892 ops/s
# Warmup Iteration   7: 86191915.859 ops/s
# Warmup Iteration   8: 85599098.904 ops/s
# Warmup Iteration   9: 85845456.041 ops/s
# Warmup Iteration  10: 86374178.308 ops/s
# Warmup Iteration  11: 84335289.299 ops/s
# Warmup Iteration  12: 84134072.388 ops/s
# Warmup Iteration  13: 84507754.583 ops/s
# Warmup Iteration  14: 86447867.620 ops/s
# Warmup Iteration  15: 86730767.149 ops/s
# Warmup Iteration  16: 86062912.931 ops/s
# Warmup Iteration  17: 86841026.173 ops/s
# Warmup Iteration  18: 86699353.073 ops/s
# Warmup Iteration  19: 86407513.223 ops/s
# Warmup Iteration  20: 86247995.909 ops/s
# Warmup Iteration  21: 86563807.348 ops/s
# Warmup Iteration  22: 86631866.702 ops/s
# Warmup Iteration  23: 86273062.384 ops/s
# Warmup Iteration  24: 85666345.695 ops/s
# Warmup Iteration  25: 86441178.098 ops/s
# Warmup Iteration  26: 86456706.434 ops/s
# Warmup Iteration  27: 86442827.544 ops/s
# Warmup Iteration  28: 86775358.569 ops/s
# Warmup Iteration  29: 84031522.024 ops/s
# Warmup Iteration  30: 86629719.348 ops/s
Iteration   1: 86872785.539 ops/s
Iteration   2: 86697358.669 ops/s
Iteration   3: 86030659.815 ops/s
Iteration   4: 86287664.256 ops/s
Iteration   5: 86242641.170 ops/s
Iteration   6: 85159900.683 ops/s
Iteration   7: 85183225.443 ops/s
Iteration   8: 85312768.600 ops/s
Iteration   9: 86026327.358 ops/s
Iteration  10: 87066618.311 ops/s
Iteration  11: 86387041.444 ops/s
Iteration  12: 86382706.862 ops/s
Iteration  13: 84968691.903 ops/s
Iteration  14: 85157301.765 ops/s
Iteration  15: 85902094.641 ops/s
Iteration  16: 86028822.414 ops/s
Iteration  17: 85037668.236 ops/s
Iteration  18: 86194343.741 ops/s
Iteration  19: 86781138.286 ops/s
Iteration  20: 86548507.255 ops/s
Iteration  21: 86126895.723 ops/s
Iteration  22: 86718173.192 ops/s
Iteration  23: 86321402.399 ops/s
Iteration  24: 86894326.990 ops/s
Iteration  25: 86322679.774 ops/s
Iteration  26: 86703198.815 ops/s
Iteration  27: 86441926.434 ops/s
Iteration  28: 85224375.778 ops/s
Iteration  29: 86009723.708 ops/s
Iteration  30: 84047453.762 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_select":
  86035947.432 ±(99.9%) 479441.009 ops/s [Average]
  (min, avg, max) = (84047453.762, 86035947.432, 87066618.311), stdev = 717604.785
  CI (99.9%): [85556506.424, 86515388.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_select  thrpt   30  86035947.432 ± 479441.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14921372.557 ops/s
# Warmup Iteration   2: 17802846.838 ops/s
# Warmup Iteration   3: 23258234.808 ops/s
# Warmup Iteration   4: 23694245.508 ops/s
# Warmup Iteration   5: 23756476.051 ops/s
# Warmup Iteration   6: 23818917.997 ops/s
# Warmup Iteration   7: 23831864.977 ops/s
# Warmup Iteration   8: 23993348.067 ops/s
# Warmup Iteration   9: 19939284.584 ops/s
# Warmup Iteration  10: 24033934.454 ops/s
# Warmup Iteration  11: 22729148.029 ops/s
# Warmup Iteration  12: 23456183.558 ops/s
# Warmup Iteration  13: 23369076.751 ops/s
# Warmup Iteration  14: 23210477.970 ops/s
# Warmup Iteration  15: 23491967.510 ops/s
# Warmup Iteration  16: 23033148.872 ops/s
# Warmup Iteration  17: 23537598.752 ops/s
# Warmup Iteration  18: 23616844.488 ops/s
# Warmup Iteration  19: 23509546.845 ops/s
# Warmup Iteration  20: 23718193.887 ops/s
# Warmup Iteration  21: 23891758.320 ops/s
# Warmup Iteration  22: 24016176.818 ops/s
# Warmup Iteration  23: 24018403.334 ops/s
# Warmup Iteration  24: 23425209.263 ops/s
# Warmup Iteration  25: 23877478.903 ops/s
# Warmup Iteration  26: 23859806.213 ops/s
# Warmup Iteration  27: 23857862.419 ops/s
# Warmup Iteration  28: 23748430.118 ops/s
# Warmup Iteration  29: 23748679.830 ops/s
# Warmup Iteration  30: 24004789.512 ops/s
Iteration   1: 23947129.375 ops/s
Iteration   2: 23639243.075 ops/s
Iteration   3: 23573582.394 ops/s
Iteration   4: 23389371.663 ops/s
Iteration   5: 23610998.429 ops/s
Iteration   6: 23471563.970 ops/s
Iteration   7: 23563600.756 ops/s
Iteration   8: 23936284.223 ops/s
Iteration   9: 23936295.107 ops/s
Iteration  10: 23996716.310 ops/s
Iteration  11: 24054333.738 ops/s
Iteration  12: 23289923.753 ops/s
Iteration  13: 23431483.786 ops/s
Iteration  14: 23644872.988 ops/s
Iteration  15: 23426060.771 ops/s
Iteration  16: 23918382.935 ops/s
Iteration  17: 24061128.096 ops/s
Iteration  18: 23845828.888 ops/s
Iteration  19: 23840673.648 ops/s
Iteration  20: 23805172.115 ops/s
Iteration  21: 23812239.180 ops/s
Iteration  22: 23569768.991 ops/s
Iteration  23: 22761351.088 ops/s
Iteration  24: 23510623.197 ops/s
Iteration  25: 23188195.636 ops/s
Iteration  26: 22918661.703 ops/s
Iteration  27: 23505093.112 ops/s
Iteration  28: 23962407.036 ops/s
Iteration  29: 24026184.071 ops/s
Iteration  30: 23997651.757 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectByOccurrences":
  23654494.060 ±(99.9%) 221532.429 ops/s [Average]
  (min, avg, max) = (22761351.088, 23654494.060, 24061128.096), stdev = 331579.336
  CI (99.9%): [23432961.631, 23876026.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  23654494.060 ± 221532.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86270437.145 ops/s
# Warmup Iteration   2: 186978921.407 ops/s
# Warmup Iteration   3: 200979124.291 ops/s
# Warmup Iteration   4: 198802069.110 ops/s
# Warmup Iteration   5: 217006803.021 ops/s
# Warmup Iteration   6: 217024197.945 ops/s
# Warmup Iteration   7: 216391411.495 ops/s
# Warmup Iteration   8: 215696452.690 ops/s
# Warmup Iteration   9: 215557685.872 ops/s
# Warmup Iteration  10: 216297131.739 ops/s
# Warmup Iteration  11: 215303458.694 ops/s
# Warmup Iteration  12: 214468510.084 ops/s
# Warmup Iteration  13: 216307641.209 ops/s
# Warmup Iteration  14: 214930760.677 ops/s
# Warmup Iteration  15: 216186917.445 ops/s
# Warmup Iteration  16: 213508830.447 ops/s
# Warmup Iteration  17: 215960583.272 ops/s
# Warmup Iteration  18: 212879813.040 ops/s
# Warmup Iteration  19: 215379047.392 ops/s
# Warmup Iteration  20: 215434128.882 ops/s
# Warmup Iteration  21: 213714715.854 ops/s
# Warmup Iteration  22: 215810307.683 ops/s
# Warmup Iteration  23: 216565730.849 ops/s
# Warmup Iteration  24: 216578448.559 ops/s
# Warmup Iteration  25: 215615729.984 ops/s
# Warmup Iteration  26: 216572751.717 ops/s
# Warmup Iteration  27: 216794441.260 ops/s
# Warmup Iteration  28: 216601534.748 ops/s
# Warmup Iteration  29: 215784778.519 ops/s
# Warmup Iteration  30: 215925420.144 ops/s
Iteration   1: 210789821.947 ops/s
Iteration   2: 215794095.671 ops/s
Iteration   3: 216756607.938 ops/s
Iteration   4: 216609342.763 ops/s
Iteration   5: 217269784.523 ops/s
Iteration   6: 212660815.409 ops/s
Iteration   7: 217300210.426 ops/s
Iteration   8: 217319439.159 ops/s
Iteration   9: 217127960.691 ops/s
Iteration  10: 216235183.192 ops/s
Iteration  11: 216306008.059 ops/s
Iteration  12: 215192106.974 ops/s
Iteration  13: 215912520.346 ops/s
Iteration  14: 215667224.769 ops/s
Iteration  15: 213040429.269 ops/s
Iteration  16: 215541136.980 ops/s
Iteration  17: 215845901.073 ops/s
Iteration  18: 216865748.704 ops/s
Iteration  19: 216935801.397 ops/s
Iteration  20: 215687352.770 ops/s
Iteration  21: 214382801.432 ops/s
Iteration  22: 216103054.237 ops/s
Iteration  23: 216429874.230 ops/s
Iteration  24: 216441974.691 ops/s
Iteration  25: 214886185.680 ops/s
Iteration  26: 215166241.300 ops/s
Iteration  27: 214927069.584 ops/s
Iteration  28: 214940470.686 ops/s
Iteration  29: 215913233.532 ops/s
Iteration  30: 216090351.178 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectDuplicates":
  215671291.620 ±(99.9%) 970764.240 ops/s [Average]
  (min, avg, max) = (210789821.947, 215671291.620, 217319439.159), stdev = 1452994.324
  CI (99.9%): [214700527.381, 216642055.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  215671291.620 ± 970764.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28213121.270 ops/s
# Warmup Iteration   2: 46416678.119 ops/s
# Warmup Iteration   3: 52868503.237 ops/s
# Warmup Iteration   4: 53414972.691 ops/s
# Warmup Iteration   5: 53561009.169 ops/s
# Warmup Iteration   6: 53457673.302 ops/s
# Warmup Iteration   7: 53653493.272 ops/s
# Warmup Iteration   8: 53496081.668 ops/s
# Warmup Iteration   9: 53422805.914 ops/s
# Warmup Iteration  10: 53673024.957 ops/s
# Warmup Iteration  11: 53661539.272 ops/s
# Warmup Iteration  12: 53756629.421 ops/s
# Warmup Iteration  13: 53399736.493 ops/s
# Warmup Iteration  14: 53579535.148 ops/s
# Warmup Iteration  15: 53697374.444 ops/s
# Warmup Iteration  16: 53573478.106 ops/s
# Warmup Iteration  17: 53690813.813 ops/s
# Warmup Iteration  18: 53257593.265 ops/s
# Warmup Iteration  19: 53470672.777 ops/s
# Warmup Iteration  20: 53572522.702 ops/s
# Warmup Iteration  21: 53568817.553 ops/s
# Warmup Iteration  22: 53698902.788 ops/s
# Warmup Iteration  23: 52877140.325 ops/s
# Warmup Iteration  24: 53270013.770 ops/s
# Warmup Iteration  25: 52793772.759 ops/s
# Warmup Iteration  26: 53191600.208 ops/s
# Warmup Iteration  27: 53044457.266 ops/s
# Warmup Iteration  28: 53355800.796 ops/s
# Warmup Iteration  29: 53270018.945 ops/s
# Warmup Iteration  30: 52902366.915 ops/s
Iteration   1: 53627918.119 ops/s
Iteration   2: 53036755.434 ops/s
Iteration   3: 53388551.344 ops/s
Iteration   4: 53689230.269 ops/s
Iteration   5: 53161496.666 ops/s
Iteration   6: 52530645.314 ops/s
Iteration   7: 53602830.213 ops/s
Iteration   8: 53611182.565 ops/s
Iteration   9: 52158877.179 ops/s
Iteration  10: 53152637.223 ops/s
Iteration  11: 53366023.449 ops/s
Iteration  12: 53346198.553 ops/s
Iteration  13: 53821420.121 ops/s
Iteration  14: 53205927.362 ops/s
Iteration  15: 53484459.536 ops/s
Iteration  16: 53407169.579 ops/s
Iteration  17: 53908443.004 ops/s
Iteration  18: 53632125.383 ops/s
Iteration  19: 53644038.025 ops/s
Iteration  20: 53626999.653 ops/s
Iteration  21: 53362248.943 ops/s
Iteration  22: 53702303.554 ops/s
Iteration  23: 52343396.278 ops/s
Iteration  24: 53647121.580 ops/s
Iteration  25: 53498860.725 ops/s
Iteration  26: 53511058.569 ops/s
Iteration  27: 53272522.321 ops/s
Iteration  28: 53830317.384 ops/s
Iteration  29: 53503681.625 ops/s
Iteration  30: 53604499.291 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectInstancesOf":
  53389297.975 ±(99.9%) 276323.115 ops/s [Average]
  (min, avg, max) = (52158877.179, 53389297.975, 53908443.004), stdev = 413587.462
  CI (99.9%): [53112974.860, 53665621.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  53389297.975 ± 276323.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4866678.337 ops/s
# Warmup Iteration   2: 10376088.694 ops/s
# Warmup Iteration   3: 10701235.220 ops/s
# Warmup Iteration   4: 9033062.735 ops/s
# Warmup Iteration   5: 10700808.654 ops/s
# Warmup Iteration   6: 10679894.396 ops/s
# Warmup Iteration   7: 10720536.231 ops/s
# Warmup Iteration   8: 10720975.368 ops/s
# Warmup Iteration   9: 10743239.920 ops/s
# Warmup Iteration  10: 10732020.553 ops/s
# Warmup Iteration  11: 10723524.583 ops/s
# Warmup Iteration  12: 10690434.001 ops/s
# Warmup Iteration  13: 10750066.989 ops/s
# Warmup Iteration  14: 10741189.150 ops/s
# Warmup Iteration  15: 10718206.458 ops/s
# Warmup Iteration  16: 10685846.873 ops/s
# Warmup Iteration  17: 10744276.279 ops/s
# Warmup Iteration  18: 10733308.896 ops/s
# Warmup Iteration  19: 10724554.154 ops/s
# Warmup Iteration  20: 10713589.198 ops/s
# Warmup Iteration  21: 10746259.718 ops/s
# Warmup Iteration  22: 10712829.634 ops/s
# Warmup Iteration  23: 10724281.614 ops/s
# Warmup Iteration  24: 10728592.625 ops/s
# Warmup Iteration  25: 10692321.123 ops/s
# Warmup Iteration  26: 10730764.668 ops/s
# Warmup Iteration  27: 10690061.512 ops/s
# Warmup Iteration  28: 10728548.488 ops/s
# Warmup Iteration  29: 10736408.662 ops/s
# Warmup Iteration  30: 10740525.493 ops/s
Iteration   1: 10651575.268 ops/s
Iteration   2: 10676164.945 ops/s
Iteration   3: 10722815.869 ops/s
Iteration   4: 10755600.705 ops/s
Iteration   5: 10669122.490 ops/s
Iteration   6: 10578324.621 ops/s
Iteration   7: 10688735.286 ops/s
Iteration   8: 10717104.223 ops/s
Iteration   9: 10654877.571 ops/s
Iteration  10: 10715743.923 ops/s
Iteration  11: 10749781.624 ops/s
Iteration  12: 10723436.327 ops/s
Iteration  13: 10720196.905 ops/s
Iteration  14: 10714011.896 ops/s
Iteration  15: 10711127.759 ops/s
Iteration  16: 10601547.503 ops/s
Iteration  17: 10719154.984 ops/s
Iteration  18: 10665101.817 ops/s
Iteration  19: 10672189.031 ops/s
Iteration  20: 10616873.985 ops/s
Iteration  21: 10443112.227 ops/s
Iteration  22: 10685351.786 ops/s
Iteration  23: 10596001.237 ops/s
Iteration  24: 10646455.830 ops/s
Iteration  25: 10591818.284 ops/s
Iteration  26: 10678093.798 ops/s
Iteration  27: 10662781.984 ops/s
Iteration  28: 10741320.771 ops/s
Iteration  29: 10717779.155 ops/s
Iteration  30: 10691892.162 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectToTarget":
  10672603.132 ±(99.9%) 43108.400 ops/s [Average]
  (min, avg, max) = (10443112.227, 10672603.132, 10755600.705), stdev = 64522.628
  CI (99.9%): [10629494.733, 10715711.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectToTarget  thrpt   30  10672603.132 ± 43108.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 533347.359 ops/s
# Warmup Iteration   2: 856240.039 ops/s
# Warmup Iteration   3: 1029567.070 ops/s
# Warmup Iteration   4: 1040748.903 ops/s
# Warmup Iteration   5: 1041985.455 ops/s
# Warmup Iteration   6: 1035859.917 ops/s
# Warmup Iteration   7: 865794.442 ops/s
# Warmup Iteration   8: 1039875.594 ops/s
# Warmup Iteration   9: 1037242.657 ops/s
# Warmup Iteration  10: 1023158.894 ops/s
# Warmup Iteration  11: 1037547.273 ops/s
# Warmup Iteration  12: 1037408.509 ops/s
# Warmup Iteration  13: 1038809.028 ops/s
# Warmup Iteration  14: 1035634.861 ops/s
# Warmup Iteration  15: 1036918.516 ops/s
# Warmup Iteration  16: 1041177.634 ops/s
# Warmup Iteration  17: 1032885.177 ops/s
# Warmup Iteration  18: 1034034.262 ops/s
# Warmup Iteration  19: 1033195.746 ops/s
# Warmup Iteration  20: 1031110.961 ops/s
# Warmup Iteration  21: 1032108.887 ops/s
# Warmup Iteration  22: 1033793.718 ops/s
# Warmup Iteration  23: 1033360.581 ops/s
# Warmup Iteration  24: 1031429.999 ops/s
# Warmup Iteration  25: 1030873.200 ops/s
# Warmup Iteration  26: 1031106.450 ops/s
# Warmup Iteration  27: 1034988.894 ops/s
# Warmup Iteration  28: 1031850.946 ops/s
# Warmup Iteration  29: 1033157.011 ops/s
# Warmup Iteration  30: 1032739.640 ops/s
Iteration   1: 1036480.643 ops/s
Iteration   2: 1021989.021 ops/s
Iteration   3: 1033342.695 ops/s
Iteration   4: 1029234.698 ops/s
Iteration   5: 1033092.667 ops/s
Iteration   6: 1029050.672 ops/s
Iteration   7: 1022936.518 ops/s
Iteration   8: 1026543.194 ops/s
Iteration   9: 1016776.375 ops/s
Iteration  10: 1024832.496 ops/s
Iteration  11: 1026500.539 ops/s
Iteration  12: 1019007.489 ops/s
Iteration  13: 1027523.500 ops/s
Iteration  14: 1036890.551 ops/s
Iteration  15: 1030684.582 ops/s
Iteration  16: 1031784.040 ops/s
Iteration  17: 1032710.405 ops/s
Iteration  18: 1034996.525 ops/s
Iteration  19: 1027268.272 ops/s
Iteration  20: 1036176.252 ops/s
Iteration  21: 1024866.155 ops/s
Iteration  22: 1034007.151 ops/s
Iteration  23: 1028952.945 ops/s
Iteration  24: 1035033.812 ops/s
Iteration  25: 1032844.138 ops/s
Iteration  26: 1037084.995 ops/s
Iteration  27: 1025179.236 ops/s
Iteration  28: 1030289.722 ops/s
Iteration  29: 1029297.628 ops/s
Iteration  30: 1030782.441 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectUnique":
  1029538.645 ±(99.9%) 3520.606 ops/s [Average]
  (min, avg, max) = (1016776.375, 1029538.645, 1037084.995), stdev = 5269.477
  CI (99.9%): [1026018.040, 1033059.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectUnique  thrpt   30  1029538.645 ± 3520.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162844130.744 ops/s
# Warmup Iteration   2: 302891237.509 ops/s
# Warmup Iteration   3: 272662580.135 ops/s
# Warmup Iteration   4: 312758540.019 ops/s
# Warmup Iteration   5: 312110435.484 ops/s
# Warmup Iteration   6: 314506215.351 ops/s
# Warmup Iteration   7: 315605820.657 ops/s
# Warmup Iteration   8: 310697555.276 ops/s
# Warmup Iteration   9: 313935521.646 ops/s
# Warmup Iteration  10: 311833226.668 ops/s
# Warmup Iteration  11: 313908323.267 ops/s
# Warmup Iteration  12: 314764845.933 ops/s
# Warmup Iteration  13: 314835596.135 ops/s
# Warmup Iteration  14: 315653984.697 ops/s
# Warmup Iteration  15: 314701054.774 ops/s
# Warmup Iteration  16: 314396619.247 ops/s
# Warmup Iteration  17: 313513495.227 ops/s
# Warmup Iteration  18: 313495107.986 ops/s
# Warmup Iteration  19: 314100082.652 ops/s
# Warmup Iteration  20: 310743980.894 ops/s
# Warmup Iteration  21: 313673980.722 ops/s
# Warmup Iteration  22: 314676963.524 ops/s
# Warmup Iteration  23: 313861608.836 ops/s
# Warmup Iteration  24: 312494794.095 ops/s
# Warmup Iteration  25: 314842760.254 ops/s
# Warmup Iteration  26: 314027729.062 ops/s
# Warmup Iteration  27: 313095115.527 ops/s
# Warmup Iteration  28: 314445078.738 ops/s
# Warmup Iteration  29: 312653050.072 ops/s
# Warmup Iteration  30: 313003065.462 ops/s
Iteration   1: 313172838.102 ops/s
Iteration   2: 314509351.315 ops/s
Iteration   3: 310479099.017 ops/s
Iteration   4: 310197607.495 ops/s
Iteration   5: 314234099.628 ops/s
Iteration   6: 312473745.126 ops/s
Iteration   7: 309107439.093 ops/s
Iteration   8: 313378594.793 ops/s
Iteration   9: 312615475.303 ops/s
Iteration  10: 312115041.414 ops/s
Iteration  11: 312645401.390 ops/s
Iteration  12: 314001729.823 ops/s
Iteration  13: 313252289.024 ops/s
Iteration  14: 313789324.195 ops/s
Iteration  15: 312367911.707 ops/s
Iteration  16: 313982847.682 ops/s
Iteration  17: 312532926.537 ops/s
Iteration  18: 314263614.072 ops/s
Iteration  19: 312565668.878 ops/s
Iteration  20: 311506362.440 ops/s
Iteration  21: 309931481.160 ops/s
Iteration  22: 311239227.833 ops/s
Iteration  23: 309493525.581 ops/s
Iteration  24: 312814938.324 ops/s
Iteration  25: 314039627.056 ops/s
Iteration  26: 312500214.358 ops/s
Iteration  27: 313862048.045 ops/s
Iteration  28: 313866240.228 ops/s
Iteration  29: 314338198.269 ops/s
Iteration  30: 313177268.200 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith":
  312615137.870 ±(99.9%) 1015572.865 ops/s [Average]
  (min, avg, max) = (309107439.093, 312615137.870, 314509351.315), stdev = 1520061.769
  CI (99.9%): [311599565.005, 313630710.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith  thrpt   30  312615137.870 ± 1015572.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1563855.948 ops/s
# Warmup Iteration   2: 4125900.049 ops/s
# Warmup Iteration   3: 4140566.025 ops/s
# Warmup Iteration   4: 3521657.667 ops/s
# Warmup Iteration   5: 4168807.295 ops/s
# Warmup Iteration   6: 4156135.511 ops/s
# Warmup Iteration   7: 4169022.919 ops/s
# Warmup Iteration   8: 4186696.024 ops/s
# Warmup Iteration   9: 4194545.387 ops/s
# Warmup Iteration  10: 4109010.397 ops/s
# Warmup Iteration  11: 4088890.820 ops/s
# Warmup Iteration  12: 4131525.437 ops/s
# Warmup Iteration  13: 4193277.888 ops/s
# Warmup Iteration  14: 4180588.337 ops/s
# Warmup Iteration  15: 4170757.475 ops/s
# Warmup Iteration  16: 4193002.282 ops/s
# Warmup Iteration  17: 4180047.481 ops/s
# Warmup Iteration  18: 4190876.015 ops/s
# Warmup Iteration  19: 4193597.169 ops/s
# Warmup Iteration  20: 4129792.210 ops/s
# Warmup Iteration  21: 4127168.428 ops/s
# Warmup Iteration  22: 4164476.717 ops/s
# Warmup Iteration  23: 4186543.040 ops/s
# Warmup Iteration  24: 4167081.166 ops/s
# Warmup Iteration  25: 4192914.950 ops/s
# Warmup Iteration  26: 4168765.744 ops/s
# Warmup Iteration  27: 4176742.023 ops/s
# Warmup Iteration  28: 4167486.032 ops/s
# Warmup Iteration  29: 4178993.133 ops/s
# Warmup Iteration  30: 4180489.937 ops/s
Iteration   1: 4198466.935 ops/s
Iteration   2: 4196312.291 ops/s
Iteration   3: 4120230.325 ops/s
Iteration   4: 4183508.301 ops/s
Iteration   5: 4204128.997 ops/s
Iteration   6: 4170837.095 ops/s
Iteration   7: 4180916.535 ops/s
Iteration   8: 4167153.453 ops/s
Iteration   9: 4152844.844 ops/s
Iteration  10: 4194062.602 ops/s
Iteration  11: 4170622.828 ops/s
Iteration  12: 4182481.625 ops/s
Iteration  13: 4194514.462 ops/s
Iteration  14: 4175924.346 ops/s
Iteration  15: 4169386.426 ops/s
Iteration  16: 4187416.882 ops/s
Iteration  17: 4175186.104 ops/s
Iteration  18: 4156322.400 ops/s
Iteration  19: 4193023.695 ops/s
Iteration  20: 4196382.946 ops/s
Iteration  21: 4187330.831 ops/s
Iteration  22: 4192729.400 ops/s
Iteration  23: 4196520.769 ops/s
Iteration  24: 4187793.149 ops/s
Iteration  25: 4184938.252 ops/s
Iteration  26: 4159097.859 ops/s
Iteration  27: 4167753.132 ops/s
Iteration  28: 4193112.649 ops/s
Iteration  29: 4192943.752 ops/s
Iteration  30: 4160383.278 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith_target":
  4179744.205 ±(99.9%) 11998.446 ops/s [Average]
  (min, avg, max) = (4120230.325, 4179744.205, 4204128.997), stdev = 17958.711
  CI (99.9%): [4167745.759, 4191742.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  4179744.205 ± 11998.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776656.634 ops/s
# Warmup Iteration   2: 1386411.663 ops/s
# Warmup Iteration   3: 1572760.638 ops/s
# Warmup Iteration   4: 1577886.434 ops/s
# Warmup Iteration   5: 1581896.126 ops/s
# Warmup Iteration   6: 1311167.418 ops/s
# Warmup Iteration   7: 1574040.811 ops/s
# Warmup Iteration   8: 1568809.069 ops/s
# Warmup Iteration   9: 1567474.020 ops/s
# Warmup Iteration  10: 1574124.708 ops/s
# Warmup Iteration  11: 1573774.689 ops/s
# Warmup Iteration  12: 1577592.693 ops/s
# Warmup Iteration  13: 1563531.102 ops/s
# Warmup Iteration  14: 1544298.953 ops/s
# Warmup Iteration  15: 1524621.891 ops/s
# Warmup Iteration  16: 1532299.797 ops/s
# Warmup Iteration  17: 1578704.776 ops/s
# Warmup Iteration  18: 1577222.170 ops/s
# Warmup Iteration  19: 1571797.232 ops/s
# Warmup Iteration  20: 1574745.996 ops/s
# Warmup Iteration  21: 1570505.623 ops/s
# Warmup Iteration  22: 1577411.324 ops/s
# Warmup Iteration  23: 1567394.324 ops/s
# Warmup Iteration  24: 1580109.890 ops/s
# Warmup Iteration  25: 1565158.796 ops/s
# Warmup Iteration  26: 1577268.757 ops/s
# Warmup Iteration  27: 1556527.999 ops/s
# Warmup Iteration  28: 1567039.810 ops/s
# Warmup Iteration  29: 1571895.093 ops/s
# Warmup Iteration  30: 1577991.575 ops/s
Iteration   1: 1575862.480 ops/s
Iteration   2: 1577931.079 ops/s
Iteration   3: 1576112.342 ops/s
Iteration   4: 1582807.569 ops/s
Iteration   5: 1569858.297 ops/s
Iteration   6: 1578062.405 ops/s
Iteration   7: 1570961.849 ops/s
Iteration   8: 1566359.531 ops/s
Iteration   9: 1565148.686 ops/s
Iteration  10: 1556825.508 ops/s
Iteration  11: 1582167.606 ops/s
Iteration  12: 1582208.458 ops/s
Iteration  13: 1587478.393 ops/s
Iteration  14: 1584353.193 ops/s
Iteration  15: 1581318.248 ops/s
Iteration  16: 1579567.772 ops/s
Iteration  17: 1584888.263 ops/s
Iteration  18: 1584244.157 ops/s
Iteration  19: 1579770.835 ops/s
Iteration  20: 1586504.232 ops/s
Iteration  21: 1583938.353 ops/s
Iteration  22: 1576924.931 ops/s
Iteration  23: 1582405.595 ops/s
Iteration  24: 1571319.645 ops/s
Iteration  25: 1585823.937 ops/s
Iteration  26: 1574900.209 ops/s
Iteration  27: 1579979.670 ops/s
Iteration  28: 1583411.445 ops/s
Iteration  29: 1581128.601 ops/s
Iteration  30: 1575683.102 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_size":
  1578264.880 ±(99.9%) 4731.227 ops/s [Average]
  (min, avg, max) = (1556825.508, 1578264.880, 1587478.393), stdev = 7081.478
  CI (99.9%): [1573533.653, 1582996.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_size  thrpt   30  1578264.880 ± 4731.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 809370.826 ops/s
# Warmup Iteration   2: 2349133.925 ops/s
# Warmup Iteration   3: 2229350.484 ops/s
# Warmup Iteration   4: 2129080.176 ops/s
# Warmup Iteration   5: 2357958.839 ops/s
# Warmup Iteration   6: 2364375.662 ops/s
# Warmup Iteration   7: 2360500.748 ops/s
# Warmup Iteration   8: 2360339.095 ops/s
# Warmup Iteration   9: 2384800.468 ops/s
# Warmup Iteration  10: 2372799.573 ops/s
# Warmup Iteration  11: 2378616.899 ops/s
# Warmup Iteration  12: 2366365.803 ops/s
# Warmup Iteration  13: 2365775.280 ops/s
# Warmup Iteration  14: 2363699.141 ops/s
# Warmup Iteration  15: 2375597.985 ops/s
# Warmup Iteration  16: 2339302.917 ops/s
# Warmup Iteration  17: 2368481.208 ops/s
# Warmup Iteration  18: 2374801.737 ops/s
# Warmup Iteration  19: 2342582.067 ops/s
# Warmup Iteration  20: 2356687.657 ops/s
# Warmup Iteration  21: 2365262.481 ops/s
# Warmup Iteration  22: 2383623.418 ops/s
# Warmup Iteration  23: 2359685.073 ops/s
# Warmup Iteration  24: 2369019.755 ops/s
# Warmup Iteration  25: 2363206.083 ops/s
# Warmup Iteration  26: 2309840.167 ops/s
# Warmup Iteration  27: 2354919.774 ops/s
# Warmup Iteration  28: 2328680.206 ops/s
# Warmup Iteration  29: 2353289.244 ops/s
# Warmup Iteration  30: 2281216.033 ops/s
Iteration   1: 2352077.605 ops/s
Iteration   2: 2362147.569 ops/s
Iteration   3: 2363145.656 ops/s
Iteration   4: 2352693.201 ops/s
Iteration   5: 2359536.879 ops/s
Iteration   6: 2327899.333 ops/s
Iteration   7: 2349646.809 ops/s
Iteration   8: 2358287.676 ops/s
Iteration   9: 2371867.089 ops/s
Iteration  10: 2336827.376 ops/s
Iteration  11: 2357394.736 ops/s
Iteration  12: 2348554.068 ops/s
Iteration  13: 2361244.473 ops/s
Iteration  14: 2381429.697 ops/s
Iteration  15: 2380414.927 ops/s
Iteration  16: 2380637.843 ops/s
Iteration  17: 2360610.833 ops/s
Iteration  18: 2299381.561 ops/s
Iteration  19: 2259136.378 ops/s
Iteration  20: 2295665.815 ops/s
Iteration  21: 2336229.306 ops/s
Iteration  22: 2359107.361 ops/s
Iteration  23: 2302086.265 ops/s
Iteration  24: 2356119.871 ops/s
Iteration  25: 2322041.774 ops/s
Iteration  26: 2296573.904 ops/s
Iteration  27: 2379230.913 ops/s
Iteration  28: 2371524.810 ops/s
Iteration  29: 2333183.162 ops/s
Iteration  30: 2368313.604 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_stream":
  2346100.350 ±(99.9%) 20109.067 ops/s [Average]
  (min, avg, max) = (2259136.378, 2346100.350, 2381429.697), stdev = 30098.307
  CI (99.9%): [2325991.283, 2366209.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_stream  thrpt   30  2346100.350 ± 20109.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482896.843 ops/s
# Warmup Iteration   2: 854481.970 ops/s
# Warmup Iteration   3: 993494.131 ops/s
# Warmup Iteration   4: 960701.867 ops/s
# Warmup Iteration   5: 994210.829 ops/s
# Warmup Iteration   6: 805230.027 ops/s
# Warmup Iteration   7: 993481.790 ops/s
# Warmup Iteration   8: 993521.109 ops/s
# Warmup Iteration   9: 995557.937 ops/s
# Warmup Iteration  10: 989010.847 ops/s
# Warmup Iteration  11: 991542.537 ops/s
# Warmup Iteration  12: 983467.216 ops/s
# Warmup Iteration  13: 991867.428 ops/s
# Warmup Iteration  14: 986561.433 ops/s
# Warmup Iteration  15: 991086.875 ops/s
# Warmup Iteration  16: 970959.401 ops/s
# Warmup Iteration  17: 994384.470 ops/s
# Warmup Iteration  18: 993389.028 ops/s
# Warmup Iteration  19: 982150.023 ops/s
# Warmup Iteration  20: 954022.654 ops/s
# Warmup Iteration  21: 971662.720 ops/s
# Warmup Iteration  22: 985055.632 ops/s
# Warmup Iteration  23: 994107.115 ops/s
# Warmup Iteration  24: 986779.827 ops/s
# Warmup Iteration  25: 979237.095 ops/s
# Warmup Iteration  26: 968549.208 ops/s
# Warmup Iteration  27: 945336.813 ops/s
# Warmup Iteration  28: 990318.265 ops/s
# Warmup Iteration  29: 985392.049 ops/s
# Warmup Iteration  30: 964168.875 ops/s
Iteration   1: 992398.497 ops/s
Iteration   2: 987860.741 ops/s
Iteration   3: 994672.900 ops/s
Iteration   4: 980820.535 ops/s
Iteration   5: 987428.856 ops/s
Iteration   6: 960100.718 ops/s
Iteration   7: 996597.250 ops/s
Iteration   8: 973910.500 ops/s
Iteration   9: 991886.023 ops/s
Iteration  10: 989848.568 ops/s
Iteration  11: 985949.417 ops/s
Iteration  12: 986868.932 ops/s
Iteration  13: 987406.799 ops/s
Iteration  14: 989694.807 ops/s
Iteration  15: 980061.383 ops/s
Iteration  16: 993753.305 ops/s
Iteration  17: 987047.914 ops/s
Iteration  18: 990268.075 ops/s
Iteration  19: 986022.541 ops/s
Iteration  20: 982672.559 ops/s
Iteration  21: 987576.089 ops/s
Iteration  22: 988852.841 ops/s
Iteration  23: 995166.060 ops/s
Iteration  24: 978544.628 ops/s
Iteration  25: 992502.063 ops/s
Iteration  26: 946336.048 ops/s
Iteration  27: 960850.746 ops/s
Iteration  28: 968489.194 ops/s
Iteration  29: 973062.199 ops/s
Iteration  30: 966743.140 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDouble":
  982779.778 ±(99.9%) 8041.598 ops/s [Average]
  (min, avg, max) = (946336.048, 982779.778, 996597.250), stdev = 12036.287
  CI (99.9%): [974738.179, 990821.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  982779.778 ± 8041.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.823 ops/s
# Warmup Iteration   2: 71.168 ops/s
# Warmup Iteration   3: 98.927 ops/s
# Warmup Iteration   4: 95.663 ops/s
# Warmup Iteration   5: 97.286 ops/s
# Warmup Iteration   6: 98.961 ops/s
# Warmup Iteration   7: 98.755 ops/s
# Warmup Iteration   8: 100.414 ops/s
# Warmup Iteration   9: 93.285 ops/s
# Warmup Iteration  10: 87.698 ops/s
# Warmup Iteration  11: 98.926 ops/s
# Warmup Iteration  12: 99.237 ops/s
# Warmup Iteration  13: 98.923 ops/s
# Warmup Iteration  14: 98.723 ops/s
# Warmup Iteration  15: 99.059 ops/s
# Warmup Iteration  16: 97.625 ops/s
# Warmup Iteration  17: 94.188 ops/s
# Warmup Iteration  18: 98.239 ops/s
# Warmup Iteration  19: 97.611 ops/s
# Warmup Iteration  20: 98.337 ops/s
# Warmup Iteration  21: 98.127 ops/s
# Warmup Iteration  22: 98.564 ops/s
# Warmup Iteration  23: 96.053 ops/s
# Warmup Iteration  24: 97.764 ops/s
# Warmup Iteration  25: 99.206 ops/s
# Warmup Iteration  26: 99.552 ops/s
# Warmup Iteration  27: 99.518 ops/s
# Warmup Iteration  28: 99.314 ops/s
# Warmup Iteration  29: 96.113 ops/s
# Warmup Iteration  30: 95.054 ops/s
Iteration   1: 97.390 ops/s
Iteration   2: 97.262 ops/s
Iteration   3: 98.348 ops/s
Iteration   4: 98.899 ops/s
Iteration   5: 97.445 ops/s
Iteration   6: 97.163 ops/s
Iteration   7: 98.141 ops/s
Iteration   8: 99.653 ops/s
Iteration   9: 99.150 ops/s
Iteration  10: 99.518 ops/s
Iteration  11: 96.377 ops/s
Iteration  12: 94.711 ops/s
Iteration  13: 96.224 ops/s
Iteration  14: 98.176 ops/s
Iteration  15: 97.402 ops/s
Iteration  16: 98.365 ops/s
Iteration  17: 98.659 ops/s
Iteration  18: 96.630 ops/s
Iteration  19: 97.668 ops/s
Iteration  20: 98.723 ops/s
Iteration  21: 99.104 ops/s
Iteration  22: 98.888 ops/s
Iteration  23: 99.020 ops/s
Iteration  24: 98.052 ops/s
Iteration  25: 95.948 ops/s
Iteration  26: 98.566 ops/s
Iteration  27: 98.633 ops/s
Iteration  28: 96.627 ops/s
Iteration  29: 97.978 ops/s
Iteration  30: 96.946 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  97.855 ±(99.9%) 0.781 ops/s [Average]
  (min, avg, max) = (94.711, 97.855, 99.653), stdev = 1.169
  CI (99.9%): [97.074, 98.637] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  97.855 ± 0.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493853.339 ops/s
# Warmup Iteration   2: 889937.461 ops/s
# Warmup Iteration   3: 1013248.756 ops/s
# Warmup Iteration   4: 1010465.126 ops/s
# Warmup Iteration   5: 1015952.740 ops/s
# Warmup Iteration   6: 834667.987 ops/s
# Warmup Iteration   7: 1015110.636 ops/s
# Warmup Iteration   8: 1017223.744 ops/s
# Warmup Iteration   9: 1016690.718 ops/s
# Warmup Iteration  10: 1013608.942 ops/s
# Warmup Iteration  11: 1015054.569 ops/s
# Warmup Iteration  12: 1011998.144 ops/s
# Warmup Iteration  13: 1007761.187 ops/s
# Warmup Iteration  14: 996424.373 ops/s
# Warmup Iteration  15: 991261.322 ops/s
# Warmup Iteration  16: 979807.180 ops/s
# Warmup Iteration  17: 1002836.082 ops/s
# Warmup Iteration  18: 1014900.792 ops/s
# Warmup Iteration  19: 1015599.498 ops/s
# Warmup Iteration  20: 1003063.059 ops/s
# Warmup Iteration  21: 1016653.754 ops/s
# Warmup Iteration  22: 1019179.457 ops/s
# Warmup Iteration  23: 1021188.114 ops/s
# Warmup Iteration  24: 1016071.223 ops/s
# Warmup Iteration  25: 987178.627 ops/s
# Warmup Iteration  26: 987997.670 ops/s
# Warmup Iteration  27: 1017989.932 ops/s
# Warmup Iteration  28: 1013383.535 ops/s
# Warmup Iteration  29: 1012899.936 ops/s
# Warmup Iteration  30: 1016692.058 ops/s
Iteration   1: 1020732.116 ops/s
Iteration   2: 1018549.981 ops/s
Iteration   3: 1019888.595 ops/s
Iteration   4: 1010621.635 ops/s
Iteration   5: 977871.775 ops/s
Iteration   6: 1022492.884 ops/s
Iteration   7: 1005885.804 ops/s
Iteration   8: 992969.129 ops/s
Iteration   9: 973743.813 ops/s
Iteration  10: 1004709.594 ops/s
Iteration  11: 986663.669 ops/s
Iteration  12: 1003406.274 ops/s
Iteration  13: 1016048.181 ops/s
Iteration  14: 1007399.069 ops/s
Iteration  15: 1018530.491 ops/s
Iteration  16: 977969.144 ops/s
Iteration  17: 1020704.931 ops/s
Iteration  18: 1009130.331 ops/s
Iteration  19: 1025279.919 ops/s
Iteration  20: 1013527.028 ops/s
Iteration  21: 1013882.038 ops/s
Iteration  22: 1016880.584 ops/s
Iteration  23: 1011853.765 ops/s
Iteration  24: 1023575.882 ops/s
Iteration  25: 1014873.818 ops/s
Iteration  26: 1016056.794 ops/s
Iteration  27: 1016902.503 ops/s
Iteration  28: 1008695.534 ops/s
Iteration  29: 1014649.868 ops/s
Iteration  30: 1006527.687 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloat":
  1009000.761 ±(99.9%) 9267.037 ops/s [Average]
  (min, avg, max) = (973743.813, 1009000.761, 1025279.919), stdev = 13870.466
  CI (99.9%): [999733.724, 1018267.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1009000.761 ± 9267.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.881 ops/s
# Warmup Iteration   2: 70.807 ops/s
# Warmup Iteration   3: 97.960 ops/s
# Warmup Iteration   4: 98.174 ops/s
# Warmup Iteration   5: 97.891 ops/s
# Warmup Iteration   6: 97.485 ops/s
# Warmup Iteration   7: 96.843 ops/s
# Warmup Iteration   8: 96.857 ops/s
# Warmup Iteration   9: 93.739 ops/s
# Warmup Iteration  10: 84.412 ops/s
# Warmup Iteration  11: 99.001 ops/s
# Warmup Iteration  12: 97.117 ops/s
# Warmup Iteration  13: 97.784 ops/s
# Warmup Iteration  14: 98.266 ops/s
# Warmup Iteration  15: 96.951 ops/s
# Warmup Iteration  16: 96.673 ops/s
# Warmup Iteration  17: 95.805 ops/s
# Warmup Iteration  18: 96.204 ops/s
# Warmup Iteration  19: 94.542 ops/s
# Warmup Iteration  20: 96.721 ops/s
# Warmup Iteration  21: 94.550 ops/s
# Warmup Iteration  22: 95.122 ops/s
# Warmup Iteration  23: 96.497 ops/s
# Warmup Iteration  24: 97.320 ops/s
# Warmup Iteration  25: 96.648 ops/s
# Warmup Iteration  26: 96.999 ops/s
# Warmup Iteration  27: 97.465 ops/s
# Warmup Iteration  28: 98.118 ops/s
# Warmup Iteration  29: 94.900 ops/s
# Warmup Iteration  30: 93.096 ops/s
Iteration   1: 93.880 ops/s
Iteration   2: 95.200 ops/s
Iteration   3: 94.355 ops/s
Iteration   4: 94.624 ops/s
Iteration   5: 94.194 ops/s
Iteration   6: 96.042 ops/s
Iteration   7: 94.723 ops/s
Iteration   8: 96.543 ops/s
Iteration   9: 96.315 ops/s
Iteration  10: 94.137 ops/s
Iteration  11: 96.047 ops/s
Iteration  12: 95.758 ops/s
Iteration  13: 96.603 ops/s
Iteration  14: 94.911 ops/s
Iteration  15: 96.941 ops/s
Iteration  16: 95.000 ops/s
Iteration  17: 94.897 ops/s
Iteration  18: 93.296 ops/s
Iteration  19: 93.094 ops/s
Iteration  20: 92.755 ops/s
Iteration  21: 91.804 ops/s
Iteration  22: 92.512 ops/s
Iteration  23: 95.378 ops/s
Iteration  24: 93.056 ops/s
Iteration  25: 94.963 ops/s
Iteration  26: 91.510 ops/s
Iteration  27: 93.501 ops/s
Iteration  28: 94.750 ops/s
Iteration  29: 95.643 ops/s
Iteration  30: 95.631 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  94.602 ±(99.9%) 0.953 ops/s [Average]
  (min, avg, max) = (91.510, 94.602, 96.941), stdev = 1.426
  CI (99.9%): [93.649, 95.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  94.602 ± 0.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567368.461 ops/s
# Warmup Iteration   2: 1078875.927 ops/s
# Warmup Iteration   3: 1201134.717 ops/s
# Warmup Iteration   4: 1214322.201 ops/s
# Warmup Iteration   5: 1185059.445 ops/s
# Warmup Iteration   6: 1040735.918 ops/s
# Warmup Iteration   7: 1210729.227 ops/s
# Warmup Iteration   8: 1217096.036 ops/s
# Warmup Iteration   9: 1213030.098 ops/s
# Warmup Iteration  10: 1206800.922 ops/s
# Warmup Iteration  11: 1210298.470 ops/s
# Warmup Iteration  12: 1217492.146 ops/s
# Warmup Iteration  13: 1200401.743 ops/s
# Warmup Iteration  14: 1216229.839 ops/s
# Warmup Iteration  15: 1215401.008 ops/s
# Warmup Iteration  16: 1219032.029 ops/s
# Warmup Iteration  17: 1212959.420 ops/s
# Warmup Iteration  18: 1212310.641 ops/s
# Warmup Iteration  19: 1208941.157 ops/s
# Warmup Iteration  20: 1212773.570 ops/s
# Warmup Iteration  21: 1214372.420 ops/s
# Warmup Iteration  22: 1213725.198 ops/s
# Warmup Iteration  23: 1209041.192 ops/s
# Warmup Iteration  24: 1216101.380 ops/s
# Warmup Iteration  25: 1192083.930 ops/s
# Warmup Iteration  26: 1217207.199 ops/s
# Warmup Iteration  27: 1176291.126 ops/s
# Warmup Iteration  28: 1213803.599 ops/s
# Warmup Iteration  29: 1205152.488 ops/s
# Warmup Iteration  30: 1216440.437 ops/s
Iteration   1: 1204917.651 ops/s
Iteration   2: 1153642.801 ops/s
Iteration   3: 1211052.737 ops/s
Iteration   4: 1204780.371 ops/s
Iteration   5: 1160281.895 ops/s
Iteration   6: 1176548.589 ops/s
Iteration   7: 1209115.770 ops/s
Iteration   8: 1208677.085 ops/s
Iteration   9: 1222988.875 ops/s
Iteration  10: 1227239.884 ops/s
Iteration  11: 1224375.064 ops/s
Iteration  12: 1216345.125 ops/s
Iteration  13: 1192912.038 ops/s
Iteration  14: 1216182.358 ops/s
Iteration  15: 1211384.623 ops/s
Iteration  16: 1220367.637 ops/s
Iteration  17: 1210666.705 ops/s
Iteration  18: 1220168.081 ops/s
Iteration  19: 1211341.473 ops/s
Iteration  20: 1218490.062 ops/s
Iteration  21: 1218695.505 ops/s
Iteration  22: 1174270.378 ops/s
Iteration  23: 1174430.759 ops/s
Iteration  24: 1184531.809 ops/s
Iteration  25: 1211135.604 ops/s
Iteration  26: 1210269.655 ops/s
Iteration  27: 1172200.664 ops/s
Iteration  28: 1211507.352 ops/s
Iteration  29: 1178362.774 ops/s
Iteration  30: 1165389.327 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByInt":
  1200742.422 ±(99.9%) 14293.012 ops/s [Average]
  (min, avg, max) = (1153642.801, 1200742.422, 1227239.884), stdev = 21393.109
  CI (99.9%): [1186449.410, 1215035.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1200742.422 ± 14293.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593447.430 ops/s
# Warmup Iteration   2: 1141150.429 ops/s
# Warmup Iteration   3: 1285136.382 ops/s
# Warmup Iteration   4: 1291189.909 ops/s
# Warmup Iteration   5: 1133586.777 ops/s
# Warmup Iteration   6: 1229387.608 ops/s
# Warmup Iteration   7: 1280062.798 ops/s
# Warmup Iteration   8: 1271410.487 ops/s
# Warmup Iteration   9: 1266757.600 ops/s
# Warmup Iteration  10: 1301531.090 ops/s
# Warmup Iteration  11: 1293911.692 ops/s
# Warmup Iteration  12: 1291663.231 ops/s
# Warmup Iteration  13: 1295717.679 ops/s
# Warmup Iteration  14: 1303582.832 ops/s
# Warmup Iteration  15: 1288523.459 ops/s
# Warmup Iteration  16: 1290295.469 ops/s
# Warmup Iteration  17: 1252558.043 ops/s
# Warmup Iteration  18: 1286019.480 ops/s
# Warmup Iteration  19: 1286638.596 ops/s
# Warmup Iteration  20: 1296650.203 ops/s
# Warmup Iteration  21: 1294379.658 ops/s
# Warmup Iteration  22: 1301708.815 ops/s
# Warmup Iteration  23: 1295476.451 ops/s
# Warmup Iteration  24: 1301776.697 ops/s
# Warmup Iteration  25: 1304930.568 ops/s
# Warmup Iteration  26: 1303162.316 ops/s
# Warmup Iteration  27: 1302463.711 ops/s
# Warmup Iteration  28: 1286016.817 ops/s
# Warmup Iteration  29: 1296441.790 ops/s
# Warmup Iteration  30: 1284632.889 ops/s
Iteration   1: 1296125.143 ops/s
Iteration   2: 1296563.348 ops/s
Iteration   3: 1302179.629 ops/s
Iteration   4: 1279022.530 ops/s
Iteration   5: 1238509.203 ops/s
Iteration   6: 1229813.090 ops/s
Iteration   7: 1292238.169 ops/s
Iteration   8: 1298940.581 ops/s
Iteration   9: 1295539.464 ops/s
Iteration  10: 1296989.972 ops/s
Iteration  11: 1297749.952 ops/s
Iteration  12: 1291539.745 ops/s
Iteration  13: 1288263.177 ops/s
Iteration  14: 1296614.607 ops/s
Iteration  15: 1301990.678 ops/s
Iteration  16: 1304829.797 ops/s
Iteration  17: 1300453.141 ops/s
Iteration  18: 1304265.523 ops/s
Iteration  19: 1306732.450 ops/s
Iteration  20: 1303862.588 ops/s
Iteration  21: 1300012.896 ops/s
Iteration  22: 1298923.421 ops/s
Iteration  23: 1291961.552 ops/s
Iteration  24: 1292406.417 ops/s
Iteration  25: 1298307.490 ops/s
Iteration  26: 1273836.201 ops/s
Iteration  27: 1300176.441 ops/s
Iteration  28: 1279113.974 ops/s
Iteration  29: 1284895.677 ops/s
Iteration  30: 1272357.121 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByLong":
  1290473.799 ±(99.9%) 11846.777 ops/s [Average]
  (min, avg, max) = (1229813.090, 1290473.799, 1306732.450), stdev = 17731.700
  CI (99.9%): [1278627.022, 1302320.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1290473.799 ± 11846.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36824926.457 ops/s
# Warmup Iteration   2: 58985495.548 ops/s
# Warmup Iteration   3: 71881999.496 ops/s
# Warmup Iteration   4: 72945539.039 ops/s
# Warmup Iteration   5: 73595581.612 ops/s
# Warmup Iteration   6: 73674897.658 ops/s
# Warmup Iteration   7: 72617929.292 ops/s
# Warmup Iteration   8: 73607369.306 ops/s
# Warmup Iteration   9: 73552718.205 ops/s
# Warmup Iteration  10: 73313087.592 ops/s
# Warmup Iteration  11: 73119289.503 ops/s
# Warmup Iteration  12: 73507977.371 ops/s
# Warmup Iteration  13: 72840664.458 ops/s
# Warmup Iteration  14: 73518672.303 ops/s
# Warmup Iteration  15: 73683031.069 ops/s
# Warmup Iteration  16: 72832476.539 ops/s
# Warmup Iteration  17: 72123593.436 ops/s
# Warmup Iteration  18: 72545712.508 ops/s
# Warmup Iteration  19: 73188091.824 ops/s
# Warmup Iteration  20: 73181047.382 ops/s
# Warmup Iteration  21: 73584013.607 ops/s
# Warmup Iteration  22: 73256632.703 ops/s
# Warmup Iteration  23: 73489995.066 ops/s
# Warmup Iteration  24: 73730799.686 ops/s
# Warmup Iteration  25: 73579636.116 ops/s
# Warmup Iteration  26: 73845127.342 ops/s
# Warmup Iteration  27: 71819484.539 ops/s
# Warmup Iteration  28: 72494849.377 ops/s
# Warmup Iteration  29: 73140400.601 ops/s
# Warmup Iteration  30: 72403721.854 ops/s
Iteration   1: 73928736.995 ops/s
Iteration   2: 73649731.169 ops/s
Iteration   3: 73884579.682 ops/s
Iteration   4: 73695563.349 ops/s
Iteration   5: 74004519.463 ops/s
Iteration   6: 73724935.097 ops/s
Iteration   7: 73369462.048 ops/s
Iteration   8: 74066421.618 ops/s
Iteration   9: 74026707.278 ops/s
Iteration  10: 73196094.564 ops/s
Iteration  11: 72471130.030 ops/s
Iteration  12: 73452418.290 ops/s
Iteration  13: 73769119.727 ops/s
Iteration  14: 73715592.823 ops/s
Iteration  15: 73151958.511 ops/s
Iteration  16: 73119986.819 ops/s
Iteration  17: 72121602.765 ops/s
Iteration  18: 72438289.057 ops/s
Iteration  19: 72081274.278 ops/s
Iteration  20: 73827279.400 ops/s
Iteration  21: 73554183.771 ops/s
Iteration  22: 73101458.308 ops/s
Iteration  23: 73619471.216 ops/s
Iteration  24: 73673390.921 ops/s
Iteration  25: 73738730.602 ops/s
Iteration  26: 72485502.504 ops/s
Iteration  27: 73649560.410 ops/s
Iteration  28: 72229422.866 ops/s
Iteration  29: 73483445.036 ops/s
Iteration  30: 73792890.390 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumDouble":
  73367448.633 ±(99.9%) 401741.539 ops/s [Average]
  (min, avg, max) = (72081274.278, 73367448.633, 74066421.618), stdev = 601307.868
  CI (99.9%): [72965707.094, 73769190.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumDouble  thrpt   30  73367448.633 ± 401741.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36016925.684 ops/s
# Warmup Iteration   2: 60525696.631 ops/s
# Warmup Iteration   3: 73814470.684 ops/s
# Warmup Iteration   4: 72006248.080 ops/s
# Warmup Iteration   5: 73122396.220 ops/s
# Warmup Iteration   6: 72959503.046 ops/s
# Warmup Iteration   7: 73823818.635 ops/s
# Warmup Iteration   8: 73256838.239 ops/s
# Warmup Iteration   9: 73683546.006 ops/s
# Warmup Iteration  10: 73234113.596 ops/s
# Warmup Iteration  11: 72439791.218 ops/s
# Warmup Iteration  12: 73762754.344 ops/s
# Warmup Iteration  13: 73883224.181 ops/s
# Warmup Iteration  14: 73229371.499 ops/s
# Warmup Iteration  15: 73649338.966 ops/s
# Warmup Iteration  16: 73308909.389 ops/s
# Warmup Iteration  17: 73494434.205 ops/s
# Warmup Iteration  18: 73439283.020 ops/s
# Warmup Iteration  19: 73168185.862 ops/s
# Warmup Iteration  20: 73562112.398 ops/s
# Warmup Iteration  21: 73749816.858 ops/s
# Warmup Iteration  22: 73322072.928 ops/s
# Warmup Iteration  23: 73470783.640 ops/s
# Warmup Iteration  24: 71280953.331 ops/s
# Warmup Iteration  25: 72642747.279 ops/s
# Warmup Iteration  26: 72341875.548 ops/s
# Warmup Iteration  27: 73020631.412 ops/s
# Warmup Iteration  28: 71960040.746 ops/s
# Warmup Iteration  29: 72225134.598 ops/s
# Warmup Iteration  30: 73229954.523 ops/s
Iteration   1: 72428450.573 ops/s
Iteration   2: 73606522.126 ops/s
Iteration   3: 73395710.449 ops/s
Iteration   4: 73984258.955 ops/s
Iteration   5: 73925277.249 ops/s
Iteration   6: 73925039.056 ops/s
Iteration   7: 73923896.551 ops/s
Iteration   8: 73569543.362 ops/s
Iteration   9: 73858181.817 ops/s
Iteration  10: 73719114.718 ops/s
Iteration  11: 74002657.389 ops/s
Iteration  12: 73906601.450 ops/s
Iteration  13: 73252412.915 ops/s
Iteration  14: 73830433.218 ops/s
Iteration  15: 74039964.896 ops/s
Iteration  16: 72963218.313 ops/s
Iteration  17: 72809854.239 ops/s
Iteration  18: 73437170.882 ops/s
Iteration  19: 73998971.770 ops/s
Iteration  20: 73262213.620 ops/s
Iteration  21: 73304636.983 ops/s
Iteration  22: 73657513.768 ops/s
Iteration  23: 72978982.448 ops/s
Iteration  24: 73819420.590 ops/s
Iteration  25: 72829752.497 ops/s
Iteration  26: 71941127.005 ops/s
Iteration  27: 72571189.688 ops/s
Iteration  28: 71965824.407 ops/s
Iteration  29: 72717182.604 ops/s
Iteration  30: 73725623.491 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumFloat":
  73378358.234 ±(99.9%) 408346.985 ops/s [Average]
  (min, avg, max) = (71941127.005, 73378358.234, 74039964.896), stdev = 611194.590
  CI (99.9%): [72970011.249, 73786705.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumFloat  thrpt   30  73378358.234 ± 408346.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46945510.942 ops/s
# Warmup Iteration   2: 76426133.389 ops/s
# Warmup Iteration   3: 97635087.318 ops/s
# Warmup Iteration   4: 98288390.400 ops/s
# Warmup Iteration   5: 99371453.911 ops/s
# Warmup Iteration   6: 99602217.041 ops/s
# Warmup Iteration   7: 98570684.620 ops/s
# Warmup Iteration   8: 98873800.982 ops/s
# Warmup Iteration   9: 97525635.274 ops/s
# Warmup Iteration  10: 98995463.023 ops/s
# Warmup Iteration  11: 97019130.439 ops/s
# Warmup Iteration  12: 97961640.894 ops/s
# Warmup Iteration  13: 97532387.974 ops/s
# Warmup Iteration  14: 98609369.097 ops/s
# Warmup Iteration  15: 97762021.518 ops/s
# Warmup Iteration  16: 98318700.606 ops/s
# Warmup Iteration  17: 98429608.004 ops/s
# Warmup Iteration  18: 98003184.609 ops/s
# Warmup Iteration  19: 98312371.753 ops/s
# Warmup Iteration  20: 97973549.372 ops/s
# Warmup Iteration  21: 98465559.458 ops/s
# Warmup Iteration  22: 97724353.638 ops/s
# Warmup Iteration  23: 98996500.385 ops/s
# Warmup Iteration  24: 98693939.817 ops/s
# Warmup Iteration  25: 97688840.923 ops/s
# Warmup Iteration  26: 99437693.453 ops/s
# Warmup Iteration  27: 99050800.370 ops/s
# Warmup Iteration  28: 98608706.544 ops/s
# Warmup Iteration  29: 98783437.464 ops/s
# Warmup Iteration  30: 99400483.531 ops/s
Iteration   1: 99487953.447 ops/s
Iteration   2: 99134590.393 ops/s
Iteration   3: 99039211.345 ops/s
Iteration   4: 99769468.706 ops/s
Iteration   5: 99074306.148 ops/s
Iteration   6: 99723484.889 ops/s
Iteration   7: 99249796.835 ops/s
Iteration   8: 99265934.956 ops/s
Iteration   9: 99570667.837 ops/s
Iteration  10: 98605248.858 ops/s
Iteration  11: 98887579.941 ops/s
Iteration  12: 99304769.813 ops/s
Iteration  13: 98879550.857 ops/s
Iteration  14: 99630994.882 ops/s
Iteration  15: 98276779.717 ops/s
Iteration  16: 98255954.302 ops/s
Iteration  17: 99171980.519 ops/s
Iteration  18: 99786296.238 ops/s
Iteration  19: 98802299.746 ops/s
Iteration  20: 98647781.616 ops/s
Iteration  21: 98609874.844 ops/s
Iteration  22: 98972573.623 ops/s
Iteration  23: 99679035.318 ops/s
Iteration  24: 99774747.923 ops/s
Iteration  25: 99264222.646 ops/s
Iteration  26: 99870146.189 ops/s
Iteration  27: 97897865.622 ops/s
Iteration  28: 99434652.273 ops/s
Iteration  29: 99305708.426 ops/s
Iteration  30: 99163337.021 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumInteger":
  99151227.164 ±(99.9%) 334703.769 ops/s [Average]
  (min, avg, max) = (97897865.622, 99151227.164, 99870146.189), stdev = 500968.883
  CI (99.9%): [98816523.395, 99485930.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumInteger  thrpt   30  99151227.164 ± 334703.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46546079.516 ops/s
# Warmup Iteration   2: 77185824.970 ops/s
# Warmup Iteration   3: 99084208.442 ops/s
# Warmup Iteration   4: 99461633.154 ops/s
# Warmup Iteration   5: 99256995.725 ops/s
# Warmup Iteration   6: 98680572.045 ops/s
# Warmup Iteration   7: 98013822.792 ops/s
# Warmup Iteration   8: 99956065.285 ops/s
# Warmup Iteration   9: 98659767.754 ops/s
# Warmup Iteration  10: 98922304.643 ops/s
# Warmup Iteration  11: 98956217.179 ops/s
# Warmup Iteration  12: 100292562.849 ops/s
# Warmup Iteration  13: 99161763.657 ops/s
# Warmup Iteration  14: 97674280.239 ops/s
# Warmup Iteration  15: 100276631.623 ops/s
# Warmup Iteration  16: 96646176.548 ops/s
# Warmup Iteration  17: 98395010.837 ops/s
# Warmup Iteration  18: 98288488.865 ops/s
# Warmup Iteration  19: 97976954.190 ops/s
# Warmup Iteration  20: 99124082.042 ops/s
# Warmup Iteration  21: 99666405.580 ops/s
# Warmup Iteration  22: 99561209.168 ops/s
# Warmup Iteration  23: 99780282.232 ops/s
# Warmup Iteration  24: 100184192.115 ops/s
# Warmup Iteration  25: 99757654.256 ops/s
# Warmup Iteration  26: 99427248.686 ops/s
# Warmup Iteration  27: 99899787.804 ops/s
# Warmup Iteration  28: 99266060.287 ops/s
# Warmup Iteration  29: 99807654.481 ops/s
# Warmup Iteration  30: 97455516.482 ops/s
Iteration   1: 98327099.858 ops/s
Iteration   2: 97389739.298 ops/s
Iteration   3: 100291781.637 ops/s
Iteration   4: 99691766.509 ops/s
Iteration   5: 99148131.648 ops/s
Iteration   6: 98722759.992 ops/s
Iteration   7: 98848605.862 ops/s
Iteration   8: 98128189.438 ops/s
Iteration   9: 100178654.759 ops/s
Iteration  10: 99830768.404 ops/s
Iteration  11: 99633344.295 ops/s
Iteration  12: 99531557.076 ops/s
Iteration  13: 99052026.296 ops/s
Iteration  14: 98705768.049 ops/s
Iteration  15: 99964194.836 ops/s
Iteration  16: 100308658.929 ops/s
Iteration  17: 98766374.260 ops/s
Iteration  18: 99739153.315 ops/s
Iteration  19: 99428100.823 ops/s
Iteration  20: 98476715.956 ops/s
Iteration  21: 99304326.518 ops/s
Iteration  22: 98451475.100 ops/s
Iteration  23: 96212826.108 ops/s
Iteration  24: 97919302.503 ops/s
Iteration  25: 96021056.991 ops/s
Iteration  26: 98681187.341 ops/s
Iteration  27: 99283667.075 ops/s
Iteration  28: 97036614.261 ops/s
Iteration  29: 99989993.177 ops/s
Iteration  30: 99304103.096 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_sumLong":
  98878931.447 ±(99.9%) 739216.362 ops/s [Average]
  (min, avg, max) = (96021056.991, 98878931.447, 100308658.929), stdev = 1106424.334
  CI (99.9%): [98139715.085, 99618147.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_sumLong  thrpt   30  98878931.447 ± 739216.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164080697.302 ops/s
# Warmup Iteration   2: 301541799.491 ops/s
# Warmup Iteration   3: 269198276.832 ops/s
# Warmup Iteration   4: 309901346.719 ops/s
# Warmup Iteration   5: 310966920.054 ops/s
# Warmup Iteration   6: 309953229.942 ops/s
# Warmup Iteration   7: 310243790.352 ops/s
# Warmup Iteration   8: 309491130.119 ops/s
# Warmup Iteration   9: 312385466.549 ops/s
# Warmup Iteration  10: 312205391.073 ops/s
# Warmup Iteration  11: 307900504.907 ops/s
# Warmup Iteration  12: 307287311.231 ops/s
# Warmup Iteration  13: 307002610.431 ops/s
# Warmup Iteration  14: 303704562.271 ops/s
# Warmup Iteration  15: 309003783.133 ops/s
# Warmup Iteration  16: 303226123.685 ops/s
# Warmup Iteration  17: 304550229.964 ops/s
# Warmup Iteration  18: 309441415.990 ops/s
# Warmup Iteration  19: 308760990.158 ops/s
# Warmup Iteration  20: 308641542.366 ops/s
# Warmup Iteration  21: 306100486.080 ops/s
# Warmup Iteration  22: 303119496.233 ops/s
# Warmup Iteration  23: 307532606.487 ops/s
# Warmup Iteration  24: 309607292.632 ops/s
# Warmup Iteration  25: 309214543.192 ops/s
# Warmup Iteration  26: 307054862.985 ops/s
# Warmup Iteration  27: 301194040.696 ops/s
# Warmup Iteration  28: 300483611.808 ops/s
# Warmup Iteration  29: 309330072.721 ops/s
# Warmup Iteration  30: 305451248.380 ops/s
Iteration   1: 308625980.968 ops/s
Iteration   2: 302332530.142 ops/s
Iteration   3: 304205400.758 ops/s
Iteration   4: 307516180.015 ops/s
Iteration   5: 311658469.840 ops/s
Iteration   6: 308954446.502 ops/s
Iteration   7: 311018226.915 ops/s
Iteration   8: 308304407.441 ops/s
Iteration   9: 309587486.244 ops/s
Iteration  10: 309362680.754 ops/s
Iteration  11: 311754957.923 ops/s
Iteration  12: 309388341.516 ops/s
Iteration  13: 311092568.359 ops/s
Iteration  14: 310806923.459 ops/s
Iteration  15: 311064436.323 ops/s
Iteration  16: 307278169.696 ops/s
Iteration  17: 309668773.461 ops/s
Iteration  18: 310017126.249 ops/s
Iteration  19: 310491930.032 ops/s
Iteration  20: 311607767.787 ops/s
Iteration  21: 311366733.676 ops/s
Iteration  22: 310220519.472 ops/s
Iteration  23: 305618190.535 ops/s
Iteration  24: 310011026.752 ops/s
Iteration  25: 309875473.230 ops/s
Iteration  26: 310408382.282 ops/s
Iteration  27: 311799041.149 ops/s
Iteration  28: 307596640.397 ops/s
Iteration  29: 311187738.692 ops/s
Iteration  30: 310281123.926 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take":
  309436722.483 ±(99.9%) 1508387.971 ops/s [Average]
  (min, avg, max) = (302332530.142, 309436722.483, 311799041.149), stdev = 2257684.277
  CI (99.9%): [307928334.512, 310945110.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_take  thrpt   30  309436722.483 ± 1508387.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26943094.189 ops/s
# Warmup Iteration   2: 46859505.031 ops/s
# Warmup Iteration   3: 50587977.741 ops/s
# Warmup Iteration   4: 52940465.032 ops/s
# Warmup Iteration   5: 53272209.917 ops/s
# Warmup Iteration   6: 52704069.127 ops/s
# Warmup Iteration   7: 53249799.998 ops/s
# Warmup Iteration   8: 53385728.207 ops/s
# Warmup Iteration   9: 52715888.052 ops/s
# Warmup Iteration  10: 53603680.016 ops/s
# Warmup Iteration  11: 53733981.961 ops/s
# Warmup Iteration  12: 51985359.929 ops/s
# Warmup Iteration  13: 53496032.064 ops/s
# Warmup Iteration  14: 52658143.968 ops/s
# Warmup Iteration  15: 53671512.732 ops/s
# Warmup Iteration  16: 53516974.231 ops/s
# Warmup Iteration  17: 53891516.821 ops/s
# Warmup Iteration  18: 52239648.845 ops/s
# Warmup Iteration  19: 53516513.968 ops/s
# Warmup Iteration  20: 53779473.450 ops/s
# Warmup Iteration  21: 52764153.012 ops/s
# Warmup Iteration  22: 53374879.330 ops/s
# Warmup Iteration  23: 53019124.347 ops/s
# Warmup Iteration  24: 53081172.557 ops/s
# Warmup Iteration  25: 53108812.070 ops/s
# Warmup Iteration  26: 53798394.608 ops/s
# Warmup Iteration  27: 53652162.905 ops/s
# Warmup Iteration  28: 53599866.331 ops/s
# Warmup Iteration  29: 52805305.896 ops/s
# Warmup Iteration  30: 52884916.418 ops/s
Iteration   1: 53082427.016 ops/s
Iteration   2: 52898577.254 ops/s
Iteration   3: 53630298.562 ops/s
Iteration   4: 52978752.111 ops/s
Iteration   5: 53240749.879 ops/s
Iteration   6: 53856064.551 ops/s
Iteration   7: 54042008.389 ops/s
Iteration   8: 53353846.959 ops/s
Iteration   9: 53666866.226 ops/s
Iteration  10: 52979927.335 ops/s
Iteration  11: 53075710.426 ops/s
Iteration  12: 52714608.118 ops/s
Iteration  13: 53658792.003 ops/s
Iteration  14: 53571478.727 ops/s
Iteration  15: 53656580.346 ops/s
Iteration  16: 52842944.994 ops/s
Iteration  17: 52684437.242 ops/s
Iteration  18: 53238242.042 ops/s
Iteration  19: 53653695.499 ops/s
Iteration  20: 53867427.977 ops/s
Iteration  21: 53406884.186 ops/s
Iteration  22: 53320159.473 ops/s
Iteration  23: 52228261.692 ops/s
Iteration  24: 53747087.591 ops/s
Iteration  25: 53491946.229 ops/s
Iteration  26: 53547430.811 ops/s
Iteration  27: 53740675.691 ops/s
Iteration  28: 53501331.296 ops/s
Iteration  29: 51277345.609 ops/s
Iteration  30: 52110464.462 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_takeWhile":
  53235500.757 ±(99.9%) 399323.901 ops/s [Average]
  (min, avg, max) = (51277345.609, 53235500.757, 54042008.389), stdev = 597689.262
  CI (99.9%): [52836176.855, 53634824.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_takeWhile  thrpt   30  53235500.757 ± 399323.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 794394.300 ops/s
# Warmup Iteration   2: 832746.527 ops/s
# Warmup Iteration   3: 1053331.067 ops/s
# Warmup Iteration   4: 1051735.482 ops/s
# Warmup Iteration   5: 1038555.723 ops/s
# Warmup Iteration   6: 1048037.181 ops/s
# Warmup Iteration   7: 1049872.167 ops/s
# Warmup Iteration   8: 1047106.732 ops/s
# Warmup Iteration   9: 1051613.804 ops/s
# Warmup Iteration  10: 1048284.629 ops/s
# Warmup Iteration  11: 1057600.858 ops/s
# Warmup Iteration  12: 903016.162 ops/s
# Warmup Iteration  13: 1055957.563 ops/s
# Warmup Iteration  14: 1033725.621 ops/s
# Warmup Iteration  15: 1020708.649 ops/s
# Warmup Iteration  16: 1025712.579 ops/s
# Warmup Iteration  17: 1127318.493 ops/s
# Warmup Iteration  18: 1124752.041 ops/s
# Warmup Iteration  19: 1119243.468 ops/s
# Warmup Iteration  20: 1120408.881 ops/s
# Warmup Iteration  21: 1126814.793 ops/s
# Warmup Iteration  22: 1114790.291 ops/s
# Warmup Iteration  23: 1126838.069 ops/s
# Warmup Iteration  24: 1120591.815 ops/s
# Warmup Iteration  25: 1119326.931 ops/s
# Warmup Iteration  26: 1122357.759 ops/s
# Warmup Iteration  27: 1117180.206 ops/s
# Warmup Iteration  28: 1111720.536 ops/s
# Warmup Iteration  29: 1125137.243 ops/s
# Warmup Iteration  30: 1102668.935 ops/s
Iteration   1: 1099618.669 ops/s
Iteration   2: 1121213.368 ops/s
Iteration   3: 1127022.366 ops/s
Iteration   4: 1115461.350 ops/s
Iteration   5: 1121001.879 ops/s
Iteration   6: 1116494.277 ops/s
Iteration   7: 1124223.970 ops/s
Iteration   8: 1114855.927 ops/s
Iteration   9: 1127852.846 ops/s
Iteration  10: 1122849.351 ops/s
Iteration  11: 1121247.881 ops/s
Iteration  12: 1124117.906 ops/s
Iteration  13: 1120081.658 ops/s
Iteration  14: 1121512.522 ops/s
Iteration  15: 1110136.823 ops/s
Iteration  16: 1123211.323 ops/s
Iteration  17: 1105720.487 ops/s
Iteration  18: 1091743.084 ops/s
Iteration  19: 1119833.456 ops/s
Iteration  20: 1112249.140 ops/s
Iteration  21: 1086076.170 ops/s
Iteration  22: 1084619.179 ops/s
Iteration  23: 1112539.745 ops/s
Iteration  24: 1125990.867 ops/s
Iteration  25: 1125053.971 ops/s
Iteration  26: 1102416.571 ops/s
Iteration  27: 1100688.077 ops/s
Iteration  28: 1103309.380 ops/s
Iteration  29: 1107063.207 ops/s
Iteration  30: 1098813.079 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_take_throws":
  1112900.618 ±(99.9%) 8219.898 ops/s [Average]
  (min, avg, max) = (1084619.179, 1112900.618, 1127852.846), stdev = 12303.158
  CI (99.9%): [1104680.719, 1121120.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_take_throws  thrpt   30  1112900.618 ± 8219.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34757267.592 ops/s
# Warmup Iteration   2: 69468998.912 ops/s
# Warmup Iteration   3: 62908003.858 ops/s
# Warmup Iteration   4: 73867129.652 ops/s
# Warmup Iteration   5: 73808873.707 ops/s
# Warmup Iteration   6: 72660462.881 ops/s
# Warmup Iteration   7: 73594465.833 ops/s
# Warmup Iteration   8: 74034121.290 ops/s
# Warmup Iteration   9: 74258836.757 ops/s
# Warmup Iteration  10: 73759273.629 ops/s
# Warmup Iteration  11: 73399712.021 ops/s
# Warmup Iteration  12: 73997092.632 ops/s
# Warmup Iteration  13: 73368764.728 ops/s
# Warmup Iteration  14: 73126925.253 ops/s
# Warmup Iteration  15: 73551535.758 ops/s
# Warmup Iteration  16: 74036055.766 ops/s
# Warmup Iteration  17: 74016729.598 ops/s
# Warmup Iteration  18: 73589701.614 ops/s
# Warmup Iteration  19: 74089062.243 ops/s
# Warmup Iteration  20: 72529739.827 ops/s
# Warmup Iteration  21: 73084122.464 ops/s
# Warmup Iteration  22: 73329373.142 ops/s
# Warmup Iteration  23: 72076168.535 ops/s
# Warmup Iteration  24: 73412509.760 ops/s
# Warmup Iteration  25: 72645447.227 ops/s
# Warmup Iteration  26: 73468453.299 ops/s
# Warmup Iteration  27: 73051772.430 ops/s
# Warmup Iteration  28: 73552583.097 ops/s
# Warmup Iteration  29: 71805694.347 ops/s
# Warmup Iteration  30: 73707626.286 ops/s
Iteration   1: 73246705.783 ops/s
Iteration   2: 73777231.687 ops/s
Iteration   3: 73695336.675 ops/s
Iteration   4: 73460446.125 ops/s
Iteration   5: 73387578.653 ops/s
Iteration   6: 73579814.653 ops/s
Iteration   7: 74232026.064 ops/s
Iteration   8: 73000755.073 ops/s
Iteration   9: 73372137.717 ops/s
Iteration  10: 73907458.305 ops/s
Iteration  11: 72755818.612 ops/s
Iteration  12: 74466380.780 ops/s
Iteration  13: 74089711.188 ops/s
Iteration  14: 74654097.778 ops/s
Iteration  15: 74350587.965 ops/s
Iteration  16: 73150389.230 ops/s
Iteration  17: 74648493.376 ops/s
Iteration  18: 74209638.288 ops/s
Iteration  19: 73701003.061 ops/s
Iteration  20: 73858813.216 ops/s
Iteration  21: 72555191.626 ops/s
Iteration  22: 74393319.025 ops/s
Iteration  23: 73877740.265 ops/s
Iteration  24: 74446199.292 ops/s
Iteration  25: 73630600.582 ops/s
Iteration  26: 72885365.472 ops/s
Iteration  27: 71559892.066 ops/s
Iteration  28: 71694456.705 ops/s
Iteration  29: 71626257.705 ops/s
Iteration  30: 72643909.161 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_tap":
  73495245.204 ±(99.9%) 576106.654 ops/s [Average]
  (min, avg, max) = (71559892.066, 73495245.204, 74654097.778), stdev = 862289.383
  CI (99.9%): [72919138.551, 74071351.858] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_tap  thrpt   30  73495245.204 ± 576106.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7270834.496 ops/s
# Warmup Iteration   2: 15685735.958 ops/s
# Warmup Iteration   3: 13839752.300 ops/s
# Warmup Iteration   4: 14861080.334 ops/s
# Warmup Iteration   5: 15771878.365 ops/s
# Warmup Iteration   6: 15747081.614 ops/s
# Warmup Iteration   7: 15773015.271 ops/s
# Warmup Iteration   8: 15798795.290 ops/s
# Warmup Iteration   9: 15812483.687 ops/s
# Warmup Iteration  10: 15814419.429 ops/s
# Warmup Iteration  11: 15801191.048 ops/s
# Warmup Iteration  12: 15746322.372 ops/s
# Warmup Iteration  13: 15525967.879 ops/s
# Warmup Iteration  14: 15539178.408 ops/s
# Warmup Iteration  15: 15352938.472 ops/s
# Warmup Iteration  16: 15548481.674 ops/s
# Warmup Iteration  17: 15550482.853 ops/s
# Warmup Iteration  18: 15530900.092 ops/s
# Warmup Iteration  19: 15684130.627 ops/s
# Warmup Iteration  20: 15716590.586 ops/s
# Warmup Iteration  21: 15544736.730 ops/s
# Warmup Iteration  22: 15418280.637 ops/s
# Warmup Iteration  23: 15452373.154 ops/s
# Warmup Iteration  24: 15673108.672 ops/s
# Warmup Iteration  25: 15474396.777 ops/s
# Warmup Iteration  26: 15776025.961 ops/s
# Warmup Iteration  27: 15596775.004 ops/s
# Warmup Iteration  28: 15382744.826 ops/s
# Warmup Iteration  29: 15273307.552 ops/s
# Warmup Iteration  30: 15347907.547 ops/s
Iteration   1: 15574589.647 ops/s
Iteration   2: 15766771.866 ops/s
Iteration   3: 15720002.602 ops/s
Iteration   4: 15656984.358 ops/s
Iteration   5: 15760650.191 ops/s
Iteration   6: 15691313.634 ops/s
Iteration   7: 15716311.705 ops/s
Iteration   8: 15595481.231 ops/s
Iteration   9: 15662670.012 ops/s
Iteration  10: 15681229.898 ops/s
Iteration  11: 15724672.175 ops/s
Iteration  12: 15746414.661 ops/s
Iteration  13: 15755196.879 ops/s
Iteration  14: 15842460.929 ops/s
Iteration  15: 15851585.363 ops/s
Iteration  16: 15796164.500 ops/s
Iteration  17: 15776695.967 ops/s
Iteration  18: 15764888.398 ops/s
Iteration  19: 15801834.479 ops/s
Iteration  20: 15715078.334 ops/s
Iteration  21: 15750681.648 ops/s
Iteration  22: 15326211.445 ops/s
Iteration  23: 15651987.425 ops/s
Iteration  24: 15852337.695 ops/s
Iteration  25: 15853479.989 ops/s
Iteration  26: 15810059.492 ops/s
Iteration  27: 15874428.385 ops/s
Iteration  28: 15753735.278 ops/s
Iteration  29: 15800450.444 ops/s
Iteration  30: 15580078.047 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_testToString":
  15728481.556 ±(99.9%) 73927.153 ops/s [Average]
  (min, avg, max) = (15326211.445, 15728481.556, 15874428.385), stdev = 110650.690
  CI (99.9%): [15654554.403, 15802408.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_testToString  thrpt   30  15728481.556 ± 73927.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13795720.576 ops/s
# Warmup Iteration   2: 29149314.284 ops/s
# Warmup Iteration   3: 24675711.202 ops/s
# Warmup Iteration   4: 28969818.474 ops/s
# Warmup Iteration   5: 28945528.951 ops/s
# Warmup Iteration   6: 28842374.853 ops/s
# Warmup Iteration   7: 28295219.136 ops/s
# Warmup Iteration   8: 28814037.261 ops/s
# Warmup Iteration   9: 29209500.696 ops/s
# Warmup Iteration  10: 28976319.033 ops/s
# Warmup Iteration  11: 29018989.231 ops/s
# Warmup Iteration  12: 28513951.164 ops/s
# Warmup Iteration  13: 28936703.057 ops/s
# Warmup Iteration  14: 29013906.546 ops/s
# Warmup Iteration  15: 28903143.756 ops/s
# Warmup Iteration  16: 28830640.008 ops/s
# Warmup Iteration  17: 28942816.970 ops/s
# Warmup Iteration  18: 28986229.733 ops/s
# Warmup Iteration  19: 29136363.260 ops/s
# Warmup Iteration  20: 28557624.305 ops/s
# Warmup Iteration  21: 28709625.746 ops/s
# Warmup Iteration  22: 28491853.530 ops/s
# Warmup Iteration  23: 28401969.762 ops/s
# Warmup Iteration  24: 28858316.754 ops/s
# Warmup Iteration  25: 29031918.587 ops/s
# Warmup Iteration  26: 29047012.643 ops/s
# Warmup Iteration  27: 29037480.528 ops/s
# Warmup Iteration  28: 28252085.679 ops/s
# Warmup Iteration  29: 28972740.668 ops/s
# Warmup Iteration  30: 29030499.584 ops/s
Iteration   1: 29098208.967 ops/s
Iteration   2: 28618087.682 ops/s
Iteration   3: 28729267.828 ops/s
Iteration   4: 29077176.666 ops/s
Iteration   5: 28914028.769 ops/s
Iteration   6: 27677315.341 ops/s
Iteration   7: 28567008.197 ops/s
Iteration   8: 28771045.231 ops/s
Iteration   9: 28868332.735 ops/s
Iteration  10: 28700250.744 ops/s
Iteration  11: 28842600.318 ops/s
Iteration  12: 28722239.073 ops/s
Iteration  13: 28376230.220 ops/s
Iteration  14: 28700378.333 ops/s
Iteration  15: 28207102.043 ops/s
Iteration  16: 28928165.279 ops/s
Iteration  17: 29047948.345 ops/s
Iteration  18: 28937790.523 ops/s
Iteration  19: 28680712.570 ops/s
Iteration  20: 28419121.442 ops/s
Iteration  21: 28947316.679 ops/s
Iteration  22: 28139109.820 ops/s
Iteration  23: 28484609.168 ops/s
Iteration  24: 28422900.564 ops/s
Iteration  25: 28965475.835 ops/s
Iteration  26: 28813290.699 ops/s
Iteration  27: 29126077.731 ops/s
Iteration  28: 28921297.451 ops/s
Iteration  29: 28849749.341 ops/s
Iteration  30: 28967533.962 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toArray":
  28717345.719 ±(99.9%) 215832.644 ops/s [Average]
  (min, avg, max) = (27677315.341, 28717345.719, 29126077.731), stdev = 323048.165
  CI (99.9%): [28501513.075, 28933178.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toArray  thrpt   30  28717345.719 ± 215832.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161923207.374 ops/s
# Warmup Iteration   2: 303483833.443 ops/s
# Warmup Iteration   3: 271301996.413 ops/s
# Warmup Iteration   4: 312146992.364 ops/s
# Warmup Iteration   5: 310170663.394 ops/s
# Warmup Iteration   6: 307362799.040 ops/s
# Warmup Iteration   7: 313064779.182 ops/s
# Warmup Iteration   8: 314183231.009 ops/s
# Warmup Iteration   9: 307739777.406 ops/s
# Warmup Iteration  10: 312354100.804 ops/s
# Warmup Iteration  11: 312982052.474 ops/s
# Warmup Iteration  12: 313405467.555 ops/s
# Warmup Iteration  13: 307687560.950 ops/s
# Warmup Iteration  14: 312583813.937 ops/s
# Warmup Iteration  15: 314290774.709 ops/s
# Warmup Iteration  16: 313826470.330 ops/s
# Warmup Iteration  17: 304183518.744 ops/s
# Warmup Iteration  18: 312267621.452 ops/s
# Warmup Iteration  19: 312634143.287 ops/s
# Warmup Iteration  20: 311726619.367 ops/s
# Warmup Iteration  21: 311978187.236 ops/s
# Warmup Iteration  22: 312666616.629 ops/s
# Warmup Iteration  23: 312256668.427 ops/s
# Warmup Iteration  24: 313023834.795 ops/s
# Warmup Iteration  25: 312651005.934 ops/s
# Warmup Iteration  26: 308431168.339 ops/s
# Warmup Iteration  27: 310583956.567 ops/s
# Warmup Iteration  28: 309633611.406 ops/s
# Warmup Iteration  29: 311582640.370 ops/s
# Warmup Iteration  30: 312816318.757 ops/s
Iteration   1: 313171767.363 ops/s
Iteration   2: 315541367.771 ops/s
Iteration   3: 313496357.561 ops/s
Iteration   4: 311395688.536 ops/s
Iteration   5: 310988808.649 ops/s
Iteration   6: 312698779.291 ops/s
Iteration   7: 311371959.800 ops/s
Iteration   8: 309409822.766 ops/s
Iteration   9: 308167891.772 ops/s
Iteration  10: 311408678.711 ops/s
Iteration  11: 311190816.543 ops/s
Iteration  12: 308876254.249 ops/s
Iteration  13: 313263554.885 ops/s
Iteration  14: 311433876.076 ops/s
Iteration  15: 314409874.532 ops/s
Iteration  16: 312221522.024 ops/s
Iteration  17: 314004268.733 ops/s
Iteration  18: 314193864.728 ops/s
Iteration  19: 314586485.506 ops/s
Iteration  20: 312733846.772 ops/s
Iteration  21: 313590861.808 ops/s
Iteration  22: 315621627.896 ops/s
Iteration  23: 313594747.099 ops/s
Iteration  24: 313928971.813 ops/s
Iteration  25: 311180820.323 ops/s
Iteration  26: 313598867.683 ops/s
Iteration  27: 312873845.075 ops/s
Iteration  28: 312621072.032 ops/s
Iteration  29: 315406683.349 ops/s
Iteration  30: 313603422.346 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toImmutable":
  312686213.523 ±(99.9%) 1245298.740 ops/s [Average]
  (min, avg, max) = (308167891.772, 312686213.523, 315621627.896), stdev = 1863904.671
  CI (99.9%): [311440914.783, 313931512.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score         Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toImmutable  thrpt   30  312686213.523 ± 1245298.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4143581.426 ops/s
# Warmup Iteration   2: 8643979.074 ops/s
# Warmup Iteration   3: 7239767.753 ops/s
# Warmup Iteration   4: 8497611.916 ops/s
# Warmup Iteration   5: 8609208.445 ops/s
# Warmup Iteration   6: 8527973.035 ops/s
# Warmup Iteration   7: 8654588.401 ops/s
# Warmup Iteration   8: 8493001.896 ops/s
# Warmup Iteration   9: 8465524.045 ops/s
# Warmup Iteration  10: 8530800.599 ops/s
# Warmup Iteration  11: 8643169.671 ops/s
# Warmup Iteration  12: 8667013.196 ops/s
# Warmup Iteration  13: 8664508.998 ops/s
# Warmup Iteration  14: 8693516.108 ops/s
# Warmup Iteration  15: 8597416.535 ops/s
# Warmup Iteration  16: 8606638.949 ops/s
# Warmup Iteration  17: 8686921.425 ops/s
# Warmup Iteration  18: 8464933.301 ops/s
# Warmup Iteration  19: 8720024.942 ops/s
# Warmup Iteration  20: 8784046.810 ops/s
# Warmup Iteration  21: 8776341.857 ops/s
# Warmup Iteration  22: 8777175.022 ops/s
# Warmup Iteration  23: 8678898.824 ops/s
# Warmup Iteration  24: 8625550.583 ops/s
# Warmup Iteration  25: 8668849.863 ops/s
# Warmup Iteration  26: 8788281.635 ops/s
# Warmup Iteration  27: 8788574.426 ops/s
# Warmup Iteration  28: 8756113.865 ops/s
# Warmup Iteration  29: 8789259.578 ops/s
# Warmup Iteration  30: 8748765.947 ops/s
Iteration   1: 8777801.238 ops/s
Iteration   2: 8788091.085 ops/s
Iteration   3: 8835255.951 ops/s
Iteration   4: 8810736.285 ops/s
Iteration   5: 8788796.045 ops/s
Iteration   6: 8779158.713 ops/s
Iteration   7: 8760095.656 ops/s
Iteration   8: 8778472.617 ops/s
Iteration   9: 8752879.464 ops/s
Iteration  10: 8762162.990 ops/s
Iteration  11: 8799891.486 ops/s
Iteration  12: 8766609.050 ops/s
Iteration  13: 8726413.063 ops/s
Iteration  14: 8801527.094 ops/s
Iteration  15: 8778249.964 ops/s
Iteration  16: 8757664.665 ops/s
Iteration  17: 8733875.168 ops/s
Iteration  18: 8766843.737 ops/s
Iteration  19: 8702482.167 ops/s
Iteration  20: 8755279.667 ops/s
Iteration  21: 8807913.793 ops/s
Iteration  22: 8774766.025 ops/s
Iteration  23: 8776475.255 ops/s
Iteration  24: 8697183.704 ops/s
Iteration  25: 8714724.207 ops/s
Iteration  26: 8760815.313 ops/s
Iteration  27: 8813744.761 ops/s
Iteration  28: 8682367.421 ops/s
Iteration  29: 8789160.017 ops/s
Iteration  30: 8768501.729 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toList":
  8766931.278 ±(99.9%) 23864.732 ops/s [Average]
  (min, avg, max) = (8682367.421, 8766931.278, 8835255.951), stdev = 35719.610
  CI (99.9%): [8743066.546, 8790796.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toList  thrpt   30  8766931.278 ± 23864.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1503084.010 ops/s
# Warmup Iteration   2: 2303545.358 ops/s
# Warmup Iteration   3: 2656322.626 ops/s
# Warmup Iteration   4: 2676730.657 ops/s
# Warmup Iteration   5: 2676487.305 ops/s
# Warmup Iteration   6: 2724934.979 ops/s
# Warmup Iteration   7: 2260662.129 ops/s
# Warmup Iteration   8: 2691902.219 ops/s
# Warmup Iteration   9: 2754734.173 ops/s
# Warmup Iteration  10: 2736724.657 ops/s
# Warmup Iteration  11: 2749362.630 ops/s
# Warmup Iteration  12: 2760198.617 ops/s
# Warmup Iteration  13: 2749403.414 ops/s
# Warmup Iteration  14: 2730198.768 ops/s
# Warmup Iteration  15: 2723858.685 ops/s
# Warmup Iteration  16: 2761563.821 ops/s
# Warmup Iteration  17: 2748638.550 ops/s
# Warmup Iteration  18: 2743022.288 ops/s
# Warmup Iteration  19: 2755557.122 ops/s
# Warmup Iteration  20: 2761022.037 ops/s
# Warmup Iteration  21: 2750330.547 ops/s
# Warmup Iteration  22: 2758932.140 ops/s
# Warmup Iteration  23: 2746589.534 ops/s
# Warmup Iteration  24: 2758632.849 ops/s
# Warmup Iteration  25: 2752622.112 ops/s
# Warmup Iteration  26: 2752623.792 ops/s
# Warmup Iteration  27: 2732548.973 ops/s
# Warmup Iteration  28: 2744250.647 ops/s
# Warmup Iteration  29: 2732548.221 ops/s
# Warmup Iteration  30: 2766907.276 ops/s
Iteration   1: 2768698.253 ops/s
Iteration   2: 2751063.748 ops/s
Iteration   3: 2745087.237 ops/s
Iteration   4: 2739272.104 ops/s
Iteration   5: 2759448.661 ops/s
Iteration   6: 2742299.262 ops/s
Iteration   7: 2773461.008 ops/s
Iteration   8: 2646265.481 ops/s
Iteration   9: 2743863.264 ops/s
Iteration  10: 2730976.885 ops/s
Iteration  11: 2683106.972 ops/s
Iteration  12: 2742978.702 ops/s
Iteration  13: 2758483.420 ops/s
Iteration  14: 2664953.375 ops/s
Iteration  15: 2661020.869 ops/s
Iteration  16: 2768023.444 ops/s
Iteration  17: 2762785.682 ops/s
Iteration  18: 2762539.972 ops/s
Iteration  19: 2749454.420 ops/s
Iteration  20: 2747838.135 ops/s
Iteration  21: 2760390.579 ops/s
Iteration  22: 2733967.156 ops/s
Iteration  23: 2723921.549 ops/s
Iteration  24: 2686623.910 ops/s
Iteration  25: 2710023.481 ops/s
Iteration  26: 2747495.384 ops/s
Iteration  27: 2747024.291 ops/s
Iteration  28: 2755397.465 ops/s
Iteration  29: 2757974.072 ops/s
Iteration  30: 2747108.401 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toMapOfItemToCount":
  2735718.239 ±(99.9%) 22674.794 ops/s [Average]
  (min, avg, max) = (2646265.481, 2735718.239, 2773461.008), stdev = 33938.567
  CI (99.9%): [2713043.445, 2758393.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  2735718.239 ± 22674.794  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1606495.425 ops/s
# Warmup Iteration   2: 3653441.092 ops/s
# Warmup Iteration   3: 3823614.574 ops/s
# Warmup Iteration   4: 3278116.039 ops/s
# Warmup Iteration   5: 3653083.310 ops/s
# Warmup Iteration   6: 3776953.379 ops/s
# Warmup Iteration   7: 3803174.514 ops/s
# Warmup Iteration   8: 3777688.118 ops/s
# Warmup Iteration   9: 3793859.781 ops/s
# Warmup Iteration  10: 3797812.049 ops/s
# Warmup Iteration  11: 3809081.322 ops/s
# Warmup Iteration  12: 3809163.869 ops/s
# Warmup Iteration  13: 3762103.353 ops/s
# Warmup Iteration  14: 3755003.738 ops/s
# Warmup Iteration  15: 3808931.567 ops/s
# Warmup Iteration  16: 3795302.824 ops/s
# Warmup Iteration  17: 3798150.341 ops/s
# Warmup Iteration  18: 3821044.439 ops/s
# Warmup Iteration  19: 3800480.165 ops/s
# Warmup Iteration  20: 3794573.288 ops/s
# Warmup Iteration  21: 3805834.500 ops/s
# Warmup Iteration  22: 3764832.105 ops/s
# Warmup Iteration  23: 3811442.959 ops/s
# Warmup Iteration  24: 3786874.067 ops/s
# Warmup Iteration  25: 3794140.093 ops/s
# Warmup Iteration  26: 3794430.752 ops/s
# Warmup Iteration  27: 3779128.451 ops/s
# Warmup Iteration  28: 3781584.252 ops/s
# Warmup Iteration  29: 3750811.673 ops/s
# Warmup Iteration  30: 3784343.309 ops/s
Iteration   1: 3793039.685 ops/s
Iteration   2: 3725378.009 ops/s
Iteration   3: 3596587.736 ops/s
Iteration   4: 3711655.009 ops/s
Iteration   5: 3722893.956 ops/s
Iteration   6: 3774118.622 ops/s
Iteration   7: 3816621.843 ops/s
Iteration   8: 3774998.350 ops/s
Iteration   9: 3696287.338 ops/s
Iteration  10: 3712356.955 ops/s
Iteration  11: 3712115.120 ops/s
Iteration  12: 3795978.822 ops/s
Iteration  13: 3799141.140 ops/s
Iteration  14: 3796178.876 ops/s
Iteration  15: 3765332.184 ops/s
Iteration  16: 3782540.045 ops/s
Iteration  17: 3816523.361 ops/s
Iteration  18: 3824887.963 ops/s
Iteration  19: 3717973.801 ops/s
Iteration  20: 3781571.049 ops/s
Iteration  21: 3821400.270 ops/s
Iteration  22: 3682394.770 ops/s
Iteration  23: 3796524.160 ops/s
Iteration  24: 3685683.657 ops/s
Iteration  25: 3795557.575 ops/s
Iteration  26: 3758958.411 ops/s
Iteration  27: 3700548.562 ops/s
Iteration  28: 3825589.989 ops/s
Iteration  29: 3753270.254 ops/s
Iteration  30: 3750767.285 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBag":
  3756229.160 ±(99.9%) 36112.331 ops/s [Average]
  (min, avg, max) = (3596587.736, 3756229.160, 3825589.989), stdev = 54051.241
  CI (99.9%): [3720116.829, 3792341.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBag  thrpt   30  3756229.160 ± 36112.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1449963.013 ops/s
# Warmup Iteration   2: 2496388.813 ops/s
# Warmup Iteration   3: 2859766.618 ops/s
# Warmup Iteration   4: 2875418.230 ops/s
# Warmup Iteration   5: 2873040.535 ops/s
# Warmup Iteration   6: 2384390.786 ops/s
# Warmup Iteration   7: 2805475.227 ops/s
# Warmup Iteration   8: 2875776.610 ops/s
# Warmup Iteration   9: 2878052.819 ops/s
# Warmup Iteration  10: 2802782.634 ops/s
# Warmup Iteration  11: 2827295.549 ops/s
# Warmup Iteration  12: 2831328.495 ops/s
# Warmup Iteration  13: 2860849.981 ops/s
# Warmup Iteration  14: 2895139.530 ops/s
# Warmup Iteration  15: 2877198.627 ops/s
# Warmup Iteration  16: 2870727.258 ops/s
# Warmup Iteration  17: 2815448.468 ops/s
# Warmup Iteration  18: 2809971.516 ops/s
# Warmup Iteration  19: 2902019.153 ops/s
# Warmup Iteration  20: 2889258.285 ops/s
# Warmup Iteration  21: 2882378.859 ops/s
# Warmup Iteration  22: 2870887.069 ops/s
# Warmup Iteration  23: 2885946.694 ops/s
# Warmup Iteration  24: 2862380.402 ops/s
# Warmup Iteration  25: 2795113.291 ops/s
# Warmup Iteration  26: 2893039.166 ops/s
# Warmup Iteration  27: 2879374.433 ops/s
# Warmup Iteration  28: 2885831.089 ops/s
# Warmup Iteration  29: 2879854.245 ops/s
# Warmup Iteration  30: 2856636.255 ops/s
Iteration   1: 2847070.720 ops/s
Iteration   2: 2863573.550 ops/s
Iteration   3: 2887575.185 ops/s
Iteration   4: 2821528.224 ops/s
Iteration   5: 2870411.196 ops/s
Iteration   6: 2873320.534 ops/s
Iteration   7: 2888803.172 ops/s
Iteration   8: 2865366.496 ops/s
Iteration   9: 2876122.025 ops/s
Iteration  10: 2878021.090 ops/s
Iteration  11: 2883121.805 ops/s
Iteration  12: 2890531.773 ops/s
Iteration  13: 2874386.835 ops/s
Iteration  14: 2892739.546 ops/s
Iteration  15: 2875749.228 ops/s
Iteration  16: 2888213.611 ops/s
Iteration  17: 2894354.025 ops/s
Iteration  18: 2877143.400 ops/s
Iteration  19: 2865421.600 ops/s
Iteration  20: 2889403.142 ops/s
Iteration  21: 2890206.954 ops/s
Iteration  22: 2869631.518 ops/s
Iteration  23: 2854564.035 ops/s
Iteration  24: 2880531.700 ops/s
Iteration  25: 2866122.905 ops/s
Iteration  26: 2883397.632 ops/s
Iteration  27: 2891113.525 ops/s
Iteration  28: 2887441.716 ops/s
Iteration  29: 2867687.924 ops/s
Iteration  30: 2858076.955 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagBy":
  2875054.401 ±(99.9%) 10624.233 ops/s [Average]
  (min, avg, max) = (2821528.224, 2875054.401, 2894354.025), stdev = 15901.854
  CI (99.9%): [2864430.167, 2885678.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  2875054.401 ± 10624.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8016698.476 ops/s
# Warmup Iteration   2: 16637643.550 ops/s
# Warmup Iteration   3: 18002380.907 ops/s
# Warmup Iteration   4: 18855322.004 ops/s
# Warmup Iteration   5: 18732495.342 ops/s
# Warmup Iteration   6: 18744066.410 ops/s
# Warmup Iteration   7: 18443826.663 ops/s
# Warmup Iteration   8: 18223003.281 ops/s
# Warmup Iteration   9: 18448519.609 ops/s
# Warmup Iteration  10: 18734391.636 ops/s
# Warmup Iteration  11: 18585779.642 ops/s
# Warmup Iteration  12: 18722780.624 ops/s
# Warmup Iteration  13: 18357840.537 ops/s
# Warmup Iteration  14: 18550667.613 ops/s
# Warmup Iteration  15: 18438264.573 ops/s
# Warmup Iteration  16: 18490915.235 ops/s
# Warmup Iteration  17: 18485909.202 ops/s
# Warmup Iteration  18: 18731404.307 ops/s
# Warmup Iteration  19: 18641672.339 ops/s
# Warmup Iteration  20: 18586637.971 ops/s
# Warmup Iteration  21: 18516365.844 ops/s
# Warmup Iteration  22: 18690502.027 ops/s
# Warmup Iteration  23: 18793376.527 ops/s
# Warmup Iteration  24: 18571801.473 ops/s
# Warmup Iteration  25: 18570103.169 ops/s
# Warmup Iteration  26: 18569647.778 ops/s
# Warmup Iteration  27: 18594805.902 ops/s
# Warmup Iteration  28: 18155179.264 ops/s
# Warmup Iteration  29: 18503251.211 ops/s
# Warmup Iteration  30: 18656557.351 ops/s
Iteration   1: 18675127.987 ops/s
Iteration   2: 18689180.951 ops/s
Iteration   3: 18686998.461 ops/s
Iteration   4: 18622973.138 ops/s
Iteration   5: 18440301.789 ops/s
Iteration   6: 18631592.702 ops/s
Iteration   7: 18776451.117 ops/s
Iteration   8: 18747973.760 ops/s
Iteration   9: 18937065.003 ops/s
Iteration  10: 19137923.661 ops/s
Iteration  11: 18942527.311 ops/s
Iteration  12: 18695065.007 ops/s
Iteration  13: 18512008.551 ops/s
Iteration  14: 18557582.897 ops/s
Iteration  15: 18821542.290 ops/s
Iteration  16: 18538001.212 ops/s
Iteration  17: 18705275.992 ops/s
Iteration  18: 18853507.664 ops/s
Iteration  19: 18594030.894 ops/s
Iteration  20: 18888613.442 ops/s
Iteration  21: 18668674.848 ops/s
Iteration  22: 18461579.922 ops/s
Iteration  23: 18763285.844 ops/s
Iteration  24: 18569014.116 ops/s
Iteration  25: 18664994.451 ops/s
Iteration  26: 18092696.015 ops/s
Iteration  27: 18591965.439 ops/s
Iteration  28: 18848625.173 ops/s
Iteration  29: 18433004.886 ops/s
Iteration  30: 18233979.277 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagWithComparator":
  18659385.460 ±(99.9%) 140513.737 ops/s [Average]
  (min, avg, max) = (18092696.015, 18659385.460, 19137923.661), stdev = 210314.362
  CI (99.9%): [18518871.723, 18799899.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedBagWithComparator  thrpt   30  18659385.460 ± 140513.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11488864.623 ops/s
# Warmup Iteration   2: 24347237.996 ops/s
# Warmup Iteration   3: 20829016.923 ops/s
# Warmup Iteration   4: 25024641.932 ops/s
# Warmup Iteration   5: 24901207.492 ops/s
# Warmup Iteration   6: 24498487.833 ops/s
# Warmup Iteration   7: 24341493.372 ops/s
# Warmup Iteration   8: 24699349.277 ops/s
# Warmup Iteration   9: 24711853.423 ops/s
# Warmup Iteration  10: 25071011.896 ops/s
# Warmup Iteration  11: 25066730.627 ops/s
# Warmup Iteration  12: 25010378.102 ops/s
# Warmup Iteration  13: 25044703.644 ops/s
# Warmup Iteration  14: 24893609.579 ops/s
# Warmup Iteration  15: 24412664.360 ops/s
# Warmup Iteration  16: 24906831.504 ops/s
# Warmup Iteration  17: 25047441.645 ops/s
# Warmup Iteration  18: 24453915.271 ops/s
# Warmup Iteration  19: 24761726.195 ops/s
# Warmup Iteration  20: 24197580.308 ops/s
# Warmup Iteration  21: 25167884.761 ops/s
# Warmup Iteration  22: 24569918.033 ops/s
# Warmup Iteration  23: 24483057.516 ops/s
# Warmup Iteration  24: 24439410.752 ops/s
# Warmup Iteration  25: 24794965.470 ops/s
# Warmup Iteration  26: 24425329.836 ops/s
# Warmup Iteration  27: 24771363.977 ops/s
# Warmup Iteration  28: 24473704.724 ops/s
# Warmup Iteration  29: 24742870.278 ops/s
# Warmup Iteration  30: 24710525.023 ops/s
Iteration   1: 24592728.943 ops/s
Iteration   2: 24190214.602 ops/s
Iteration   3: 24754098.473 ops/s
Iteration   4: 24535322.666 ops/s
Iteration   5: 24430309.517 ops/s
Iteration   6: 24581598.457 ops/s
Iteration   7: 24581311.070 ops/s
Iteration   8: 24601279.205 ops/s
Iteration   9: 24891621.583 ops/s
Iteration  10: 24828947.383 ops/s
Iteration  11: 24285634.203 ops/s
Iteration  12: 24621650.586 ops/s
Iteration  13: 25060058.829 ops/s
Iteration  14: 25003094.047 ops/s
Iteration  15: 24911454.421 ops/s
Iteration  16: 24847983.502 ops/s
Iteration  17: 25048710.681 ops/s
Iteration  18: 24883786.234 ops/s
Iteration  19: 24979858.131 ops/s
Iteration  20: 24929910.268 ops/s
Iteration  21: 24941069.793 ops/s
Iteration  22: 24792192.404 ops/s
Iteration  23: 24940237.379 ops/s
Iteration  24: 24982097.857 ops/s
Iteration  25: 25085805.598 ops/s
Iteration  26: 25173615.117 ops/s
Iteration  27: 25323863.414 ops/s
Iteration  28: 24956444.817 ops/s
Iteration  29: 25078103.657 ops/s
Iteration  30: 25067073.369 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedList":
  24830002.540 ±(99.9%) 176356.227 ops/s [Average]
  (min, avg, max) = (24190214.602, 24830002.540, 25323863.414), stdev = 263961.718
  CI (99.9%): [24653646.314, 25006358.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedList  thrpt   30  24830002.540 ± 176356.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3386439.660 ops/s
# Warmup Iteration   2: 3629257.985 ops/s
# Warmup Iteration   3: 4376001.770 ops/s
# Warmup Iteration   4: 4795702.996 ops/s
# Warmup Iteration   5: 4760089.026 ops/s
# Warmup Iteration   6: 4778546.704 ops/s
# Warmup Iteration   7: 4780152.538 ops/s
# Warmup Iteration   8: 4773615.216 ops/s
# Warmup Iteration   9: 4785159.741 ops/s
# Warmup Iteration  10: 4770913.636 ops/s
# Warmup Iteration  11: 4792966.883 ops/s
# Warmup Iteration  12: 4781750.781 ops/s
# Warmup Iteration  13: 4529775.865 ops/s
# Warmup Iteration  14: 4236689.290 ops/s
# Warmup Iteration  15: 4750494.773 ops/s
# Warmup Iteration  16: 4660049.090 ops/s
# Warmup Iteration  17: 4701890.585 ops/s
# Warmup Iteration  18: 4779096.847 ops/s
# Warmup Iteration  19: 4673946.346 ops/s
# Warmup Iteration  20: 4788793.409 ops/s
# Warmup Iteration  21: 4776205.166 ops/s
# Warmup Iteration  22: 4771082.379 ops/s
# Warmup Iteration  23: 4773337.404 ops/s
# Warmup Iteration  24: 4768481.657 ops/s
# Warmup Iteration  25: 4757618.185 ops/s
# Warmup Iteration  26: 4773582.168 ops/s
# Warmup Iteration  27: 4757294.954 ops/s
# Warmup Iteration  28: 4592699.204 ops/s
# Warmup Iteration  29: 4721822.045 ops/s
# Warmup Iteration  30: 4663477.294 ops/s
Iteration   1: 4781700.065 ops/s
Iteration   2: 4791440.803 ops/s
Iteration   3: 4765582.220 ops/s
Iteration   4: 4770236.787 ops/s
Iteration   5: 4561972.438 ops/s
Iteration   6: 4789191.616 ops/s
Iteration   7: 4717529.658 ops/s
Iteration   8: 4769997.437 ops/s
Iteration   9: 4665851.219 ops/s
Iteration  10: 4741594.191 ops/s
Iteration  11: 4683491.549 ops/s
Iteration  12: 4705759.343 ops/s
Iteration  13: 4783221.126 ops/s
Iteration  14: 4798244.850 ops/s
Iteration  15: 4782616.139 ops/s
Iteration  16: 4610226.227 ops/s
Iteration  17: 4780664.269 ops/s
Iteration  18: 4679268.418 ops/s
Iteration  19: 4705879.335 ops/s
Iteration  20: 4551777.041 ops/s
Iteration  21: 4684521.401 ops/s
Iteration  22: 4727241.694 ops/s
Iteration  23: 4681335.275 ops/s
Iteration  24: 4582261.729 ops/s
Iteration  25: 4655885.202 ops/s
Iteration  26: 4648622.639 ops/s
Iteration  27: 4697623.731 ops/s
Iteration  28: 4605951.014 ops/s
Iteration  29: 4621199.690 ops/s
Iteration  30: 4759886.225 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedListBy":
  4703359.111 ±(99.9%) 49342.526 ops/s [Average]
  (min, avg, max) = (4551777.041, 4703359.111, 4798244.850), stdev = 73853.575
  CI (99.9%): [4654016.585, 4752701.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  4703359.111 ± 49342.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14716570.911 ops/s
# Warmup Iteration   2: 25228547.629 ops/s
# Warmup Iteration   3: 26504194.448 ops/s
# Warmup Iteration   4: 27894594.759 ops/s
# Warmup Iteration   5: 27682205.864 ops/s
# Warmup Iteration   6: 28190221.222 ops/s
# Warmup Iteration   7: 28178984.863 ops/s
# Warmup Iteration   8: 27947780.443 ops/s
# Warmup Iteration   9: 28284976.434 ops/s
# Warmup Iteration  10: 27624306.953 ops/s
# Warmup Iteration  11: 27390605.230 ops/s
# Warmup Iteration  12: 27862078.574 ops/s
# Warmup Iteration  13: 26910398.231 ops/s
# Warmup Iteration  14: 27554857.277 ops/s
# Warmup Iteration  15: 27401194.089 ops/s
# Warmup Iteration  16: 27802432.882 ops/s
# Warmup Iteration  17: 27608259.433 ops/s
# Warmup Iteration  18: 27671964.694 ops/s
# Warmup Iteration  19: 27779330.329 ops/s
# Warmup Iteration  20: 27573576.935 ops/s
# Warmup Iteration  21: 28284870.557 ops/s
# Warmup Iteration  22: 28204379.765 ops/s
# Warmup Iteration  23: 28394201.388 ops/s
# Warmup Iteration  24: 27991186.595 ops/s
# Warmup Iteration  25: 27779740.007 ops/s
# Warmup Iteration  26: 27845291.802 ops/s
# Warmup Iteration  27: 28056939.984 ops/s
# Warmup Iteration  28: 27903480.984 ops/s
# Warmup Iteration  29: 27967666.262 ops/s
# Warmup Iteration  30: 27842437.816 ops/s
Iteration   1: 27524896.499 ops/s
Iteration   2: 28281649.364 ops/s
Iteration   3: 27808355.828 ops/s
Iteration   4: 27253905.602 ops/s
Iteration   5: 27903865.909 ops/s
Iteration   6: 27764646.499 ops/s
Iteration   7: 27833377.849 ops/s
Iteration   8: 28185224.114 ops/s
Iteration   9: 27501118.247 ops/s
Iteration  10: 27594092.001 ops/s
Iteration  11: 28310855.860 ops/s
Iteration  12: 27853780.643 ops/s
Iteration  13: 27083705.313 ops/s
Iteration  14: 27390160.809 ops/s
Iteration  15: 27450205.699 ops/s
Iteration  16: 27754278.090 ops/s
Iteration  17: 27503985.163 ops/s
Iteration  18: 27595886.788 ops/s
Iteration  19: 28132817.987 ops/s
Iteration  20: 27748490.777 ops/s
Iteration  21: 27911002.303 ops/s
Iteration  22: 27905333.288 ops/s
Iteration  23: 27962007.141 ops/s
Iteration  24: 28089230.112 ops/s
Iteration  25: 27773889.535 ops/s
Iteration  26: 27573228.345 ops/s
Iteration  27: 27836040.758 ops/s
Iteration  28: 27179789.474 ops/s
Iteration  29: 27472372.991 ops/s
Iteration  30: 27933237.876 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap":
  27737047.696 ±(99.9%) 207188.858 ops/s [Average]
  (min, avg, max) = (27083705.313, 27737047.696, 28310855.860), stdev = 310110.552
  CI (99.9%): [27529858.838, 27944236.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  27737047.696 ± 207188.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1895445.023 ops/s
# Warmup Iteration   2: 2103424.606 ops/s
# Warmup Iteration   3: 2656515.136 ops/s
# Warmup Iteration   4: 2693039.942 ops/s
# Warmup Iteration   5: 2681037.941 ops/s
# Warmup Iteration   6: 2632531.685 ops/s
# Warmup Iteration   7: 2697556.932 ops/s
# Warmup Iteration   8: 2733232.849 ops/s
# Warmup Iteration   9: 2713053.699 ops/s
# Warmup Iteration  10: 2687474.747 ops/s
# Warmup Iteration  11: 2643128.906 ops/s
# Warmup Iteration  12: 2416347.124 ops/s
# Warmup Iteration  13: 2487872.259 ops/s
# Warmup Iteration  14: 2697172.228 ops/s
# Warmup Iteration  15: 2665349.489 ops/s
# Warmup Iteration  16: 2688377.512 ops/s
# Warmup Iteration  17: 2698327.509 ops/s
# Warmup Iteration  18: 2711072.875 ops/s
# Warmup Iteration  19: 2657655.812 ops/s
# Warmup Iteration  20: 2667715.833 ops/s
# Warmup Iteration  21: 2661176.621 ops/s
# Warmup Iteration  22: 2709638.199 ops/s
# Warmup Iteration  23: 2645771.054 ops/s
# Warmup Iteration  24: 2638449.164 ops/s
# Warmup Iteration  25: 2727741.416 ops/s
# Warmup Iteration  26: 2649953.638 ops/s
# Warmup Iteration  27: 2709483.863 ops/s
# Warmup Iteration  28: 2702051.060 ops/s
# Warmup Iteration  29: 2716432.876 ops/s
# Warmup Iteration  30: 2676677.253 ops/s
Iteration   1: 2729834.086 ops/s
Iteration   2: 2734226.827 ops/s
Iteration   3: 2733498.416 ops/s
Iteration   4: 2713415.827 ops/s
Iteration   5: 2724174.696 ops/s
Iteration   6: 2719851.283 ops/s
Iteration   7: 2710899.966 ops/s
Iteration   8: 2694489.348 ops/s
Iteration   9: 2734798.250 ops/s
Iteration  10: 2707630.545 ops/s
Iteration  11: 2724618.351 ops/s
Iteration  12: 2700941.453 ops/s
Iteration  13: 2724260.075 ops/s
Iteration  14: 2713365.665 ops/s
Iteration  15: 2704490.544 ops/s
Iteration  16: 2705770.976 ops/s
Iteration  17: 2733341.052 ops/s
Iteration  18: 2719007.818 ops/s
Iteration  19: 2698366.100 ops/s
Iteration  20: 2655163.182 ops/s
Iteration  21: 2713655.770 ops/s
Iteration  22: 2712189.395 ops/s
Iteration  23: 2726571.851 ops/s
Iteration  24: 2722969.040 ops/s
Iteration  25: 2715189.063 ops/s
Iteration  26: 2723570.281 ops/s
Iteration  27: 2731580.385 ops/s
Iteration  28: 2716417.413 ops/s
Iteration  29: 2701398.393 ops/s
Iteration  30: 2713716.255 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMapBy":
  2715313.410 ±(99.9%) 10709.173 ops/s [Average]
  (min, avg, max) = (2655163.182, 2715313.410, 2734798.250), stdev = 16028.987
  CI (99.9%): [2704604.237, 2726022.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  2715313.410 ± 10709.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3289236.114 ops/s
# Warmup Iteration   2: 4822300.665 ops/s
# Warmup Iteration   3: 5745386.521 ops/s
# Warmup Iteration   4: 5783024.628 ops/s
# Warmup Iteration   5: 5723836.278 ops/s
# Warmup Iteration   6: 5677850.611 ops/s
# Warmup Iteration   7: 4668482.360 ops/s
# Warmup Iteration   8: 5569355.086 ops/s
# Warmup Iteration   9: 5837281.554 ops/s
# Warmup Iteration  10: 5613438.690 ops/s
# Warmup Iteration  11: 5846236.854 ops/s
# Warmup Iteration  12: 5743667.220 ops/s
# Warmup Iteration  13: 5766945.320 ops/s
# Warmup Iteration  14: 5654441.508 ops/s
# Warmup Iteration  15: 5750833.853 ops/s
# Warmup Iteration  16: 5821505.844 ops/s
# Warmup Iteration  17: 5801214.428 ops/s
# Warmup Iteration  18: 5837871.064 ops/s
# Warmup Iteration  19: 5816607.547 ops/s
# Warmup Iteration  20: 5766815.770 ops/s
# Warmup Iteration  21: 5818089.594 ops/s
# Warmup Iteration  22: 5787427.838 ops/s
# Warmup Iteration  23: 5790456.169 ops/s
# Warmup Iteration  24: 5851329.448 ops/s
# Warmup Iteration  25: 5861501.020 ops/s
# Warmup Iteration  26: 5812409.623 ops/s
# Warmup Iteration  27: 5821290.997 ops/s
# Warmup Iteration  28: 5865107.790 ops/s
# Warmup Iteration  29: 5841762.783 ops/s
# Warmup Iteration  30: 5861711.173 ops/s
Iteration   1: 5859140.933 ops/s
Iteration   2: 5797387.792 ops/s
Iteration   3: 5856164.820 ops/s
Iteration   4: 5825227.309 ops/s
Iteration   5: 5813004.244 ops/s
Iteration   6: 5827106.339 ops/s
Iteration   7: 5781272.468 ops/s
Iteration   8: 5835801.760 ops/s
Iteration   9: 5805430.495 ops/s
Iteration  10: 5830413.809 ops/s
Iteration  11: 5775938.335 ops/s
Iteration  12: 5886848.788 ops/s
Iteration  13: 5885150.830 ops/s
Iteration  14: 5887523.906 ops/s
Iteration  15: 5889007.129 ops/s
Iteration  16: 5835404.274 ops/s
Iteration  17: 5851238.088 ops/s
Iteration  18: 5848270.140 ops/s
Iteration  19: 5864379.784 ops/s
Iteration  20: 5842490.253 ops/s
Iteration  21: 5850838.610 ops/s
Iteration  22: 5790446.284 ops/s
Iteration  23: 5799198.234 ops/s
Iteration  24: 5851143.099 ops/s
Iteration  25: 5809675.196 ops/s
Iteration  26: 5787108.126 ops/s
Iteration  27: 5790697.682 ops/s
Iteration  28: 5807455.026 ops/s
Iteration  29: 5754705.976 ops/s
Iteration  30: 5777466.177 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  5827197.863 ±(99.9%) 24801.262 ops/s [Average]
  (min, avg, max) = (5754705.976, 5827197.863, 5889007.129), stdev = 37121.365
  CI (99.9%): [5802396.601, 5851999.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  5827197.863 ± 24801.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27039382.559 ops/s
# Warmup Iteration   2: 51343370.628 ops/s
# Warmup Iteration   3: 47381707.131 ops/s
# Warmup Iteration   4: 52743831.261 ops/s
# Warmup Iteration   5: 52352159.251 ops/s
# Warmup Iteration   6: 51947440.814 ops/s
# Warmup Iteration   7: 52672050.528 ops/s
# Warmup Iteration   8: 52011719.500 ops/s
# Warmup Iteration   9: 52799193.343 ops/s
# Warmup Iteration  10: 52739904.456 ops/s
# Warmup Iteration  11: 52274764.533 ops/s
# Warmup Iteration  12: 51898042.975 ops/s
# Warmup Iteration  13: 52751989.635 ops/s
# Warmup Iteration  14: 52643998.360 ops/s
# Warmup Iteration  15: 52803890.516 ops/s
# Warmup Iteration  16: 52322577.911 ops/s
# Warmup Iteration  17: 53080311.583 ops/s
# Warmup Iteration  18: 52290264.153 ops/s
# Warmup Iteration  19: 52934963.292 ops/s
# Warmup Iteration  20: 52393437.585 ops/s
# Warmup Iteration  21: 52417824.503 ops/s
# Warmup Iteration  22: 52156341.709 ops/s
# Warmup Iteration  23: 52697248.596 ops/s
# Warmup Iteration  24: 52915321.417 ops/s
# Warmup Iteration  25: 52971897.035 ops/s
# Warmup Iteration  26: 52465235.804 ops/s
# Warmup Iteration  27: 52457266.008 ops/s
# Warmup Iteration  28: 52338180.166 ops/s
# Warmup Iteration  29: 52652492.313 ops/s
# Warmup Iteration  30: 52751435.862 ops/s
Iteration   1: 51730074.872 ops/s
Iteration   2: 52522626.849 ops/s
Iteration   3: 52399520.364 ops/s
Iteration   4: 51813371.503 ops/s
Iteration   5: 51777709.678 ops/s
Iteration   6: 52011857.550 ops/s
Iteration   7: 52644008.361 ops/s
Iteration   8: 52695041.025 ops/s
Iteration   9: 52786265.078 ops/s
Iteration  10: 52105710.980 ops/s
Iteration  11: 52339341.194 ops/s
Iteration  12: 52427365.431 ops/s
Iteration  13: 52585525.239 ops/s
Iteration  14: 52438758.436 ops/s
Iteration  15: 52680927.980 ops/s
Iteration  16: 52518657.909 ops/s
Iteration  17: 52139813.314 ops/s
Iteration  18: 51331751.791 ops/s
Iteration  19: 52636007.545 ops/s
Iteration  20: 53287832.161 ops/s
Iteration  21: 53144220.632 ops/s
Iteration  22: 53137743.573 ops/s
Iteration  23: 52839335.850 ops/s
Iteration  24: 52499038.205 ops/s
Iteration  25: 52744350.075 ops/s
Iteration  26: 52492930.082 ops/s
Iteration  27: 52946009.388 ops/s
Iteration  28: 52479263.165 ops/s
Iteration  29: 52998809.301 ops/s
Iteration  30: 52541721.295 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSet":
  52489852.961 ±(99.9%) 298362.331 ops/s [Average]
  (min, avg, max) = (51331751.791, 52489852.961, 53287832.161), stdev = 446574.725
  CI (99.9%): [52191490.630, 52788215.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSet  thrpt   30  52489852.961 ± 298362.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1752825.054 ops/s
# Warmup Iteration   2: 3164474.694 ops/s
# Warmup Iteration   3: 3404426.478 ops/s
# Warmup Iteration   4: 3419931.517 ops/s
# Warmup Iteration   5: 3229263.001 ops/s
# Warmup Iteration   6: 3087439.961 ops/s
# Warmup Iteration   7: 3432847.859 ops/s
# Warmup Iteration   8: 3445142.183 ops/s
# Warmup Iteration   9: 3436175.370 ops/s
# Warmup Iteration  10: 3386635.534 ops/s
# Warmup Iteration  11: 3352324.089 ops/s
# Warmup Iteration  12: 3396283.218 ops/s
# Warmup Iteration  13: 3398319.382 ops/s
# Warmup Iteration  14: 3409215.528 ops/s
# Warmup Iteration  15: 3327974.710 ops/s
# Warmup Iteration  16: 3440349.571 ops/s
# Warmup Iteration  17: 3341687.493 ops/s
# Warmup Iteration  18: 3302668.499 ops/s
# Warmup Iteration  19: 3395764.811 ops/s
# Warmup Iteration  20: 3466177.748 ops/s
# Warmup Iteration  21: 3466917.930 ops/s
# Warmup Iteration  22: 3442170.144 ops/s
# Warmup Iteration  23: 3386964.703 ops/s
# Warmup Iteration  24: 3450988.699 ops/s
# Warmup Iteration  25: 3393893.454 ops/s
# Warmup Iteration  26: 3425099.237 ops/s
# Warmup Iteration  27: 3450649.444 ops/s
# Warmup Iteration  28: 3287069.030 ops/s
# Warmup Iteration  29: 3363679.534 ops/s
# Warmup Iteration  30: 3379499.296 ops/s
Iteration   1: 3409046.910 ops/s
Iteration   2: 3448908.050 ops/s
Iteration   3: 3358444.335 ops/s
Iteration   4: 3400863.584 ops/s
Iteration   5: 3450231.537 ops/s
Iteration   6: 3456182.279 ops/s
Iteration   7: 3443948.375 ops/s
Iteration   8: 3453695.900 ops/s
Iteration   9: 3432140.748 ops/s
Iteration  10: 3448959.882 ops/s
Iteration  11: 3414964.788 ops/s
Iteration  12: 3451093.913 ops/s
Iteration  13: 3424129.090 ops/s
Iteration  14: 3451775.937 ops/s
Iteration  15: 3449919.062 ops/s
Iteration  16: 3450520.145 ops/s
Iteration  17: 3432144.845 ops/s
Iteration  18: 3473362.415 ops/s
Iteration  19: 3382156.889 ops/s
Iteration  20: 3465426.604 ops/s
Iteration  21: 3451142.540 ops/s
Iteration  22: 3439518.658 ops/s
Iteration  23: 3457293.133 ops/s
Iteration  24: 3422668.434 ops/s
Iteration  25: 3470049.841 ops/s
Iteration  26: 3430224.437 ops/s
Iteration  27: 3441061.376 ops/s
Iteration  28: 3437884.600 ops/s
Iteration  29: 3356436.368 ops/s
Iteration  30: 3330054.347 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetBy":
  3431141.634 ±(99.9%) 23175.191 ops/s [Average]
  (min, avg, max) = (3330054.347, 3431141.634, 3473362.415), stdev = 34687.538
  CI (99.9%): [3407966.443, 3454316.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  3431141.634 ± 23175.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18507789.678 ops/s
# Warmup Iteration   2: 36266683.873 ops/s
# Warmup Iteration   3: 30046499.735 ops/s
# Warmup Iteration   4: 35083013.437 ops/s
# Warmup Iteration   5: 34973569.735 ops/s
# Warmup Iteration   6: 34871954.889 ops/s
# Warmup Iteration   7: 35083547.355 ops/s
# Warmup Iteration   8: 35217608.324 ops/s
# Warmup Iteration   9: 34979029.015 ops/s
# Warmup Iteration  10: 35159666.569 ops/s
# Warmup Iteration  11: 34935549.529 ops/s
# Warmup Iteration  12: 35158180.624 ops/s
# Warmup Iteration  13: 35042672.219 ops/s
# Warmup Iteration  14: 34900575.810 ops/s
# Warmup Iteration  15: 34966377.752 ops/s
# Warmup Iteration  16: 34812111.450 ops/s
# Warmup Iteration  17: 35169009.632 ops/s
# Warmup Iteration  18: 34792143.400 ops/s
# Warmup Iteration  19: 34801442.295 ops/s
# Warmup Iteration  20: 34950893.648 ops/s
# Warmup Iteration  21: 34685049.703 ops/s
# Warmup Iteration  22: 34909799.196 ops/s
# Warmup Iteration  23: 35017323.075 ops/s
# Warmup Iteration  24: 34687755.050 ops/s
# Warmup Iteration  25: 34888560.036 ops/s
# Warmup Iteration  26: 34764671.972 ops/s
# Warmup Iteration  27: 33969795.316 ops/s
# Warmup Iteration  28: 34704467.133 ops/s
# Warmup Iteration  29: 34800504.442 ops/s
# Warmup Iteration  30: 35014877.288 ops/s
Iteration   1: 35212130.227 ops/s
Iteration   2: 34895382.742 ops/s
Iteration   3: 34611112.006 ops/s
Iteration   4: 34371015.326 ops/s
Iteration   5: 34047190.885 ops/s
Iteration   6: 34662932.666 ops/s
Iteration   7: 34951203.444 ops/s
Iteration   8: 35268284.430 ops/s
Iteration   9: 34841620.794 ops/s
Iteration  10: 34663830.153 ops/s
Iteration  11: 34826921.573 ops/s
Iteration  12: 34290531.109 ops/s
Iteration  13: 34830962.798 ops/s
Iteration  14: 35224193.832 ops/s
Iteration  15: 35120616.292 ops/s
Iteration  16: 34864332.514 ops/s
Iteration  17: 34504201.911 ops/s
Iteration  18: 34795230.708 ops/s
Iteration  19: 34616060.926 ops/s
Iteration  20: 35070386.063 ops/s
Iteration  21: 34903499.076 ops/s
Iteration  22: 34787042.097 ops/s
Iteration  23: 34934067.946 ops/s
Iteration  24: 35085277.734 ops/s
Iteration  25: 34969444.355 ops/s
Iteration  26: 34890156.534 ops/s
Iteration  27: 34520619.478 ops/s
Iteration  28: 34725324.328 ops/s
Iteration  29: 34993831.613 ops/s
Iteration  30: 35255646.470 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetWithComparator":
  34824435.001 ±(99.9%) 194080.116 ops/s [Average]
  (min, avg, max) = (34047190.885, 34824435.001, 35268284.430), stdev = 290490.003
  CI (99.9%): [34630354.885, 35018515.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  34824435.001 ± 194080.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27740009.891 ops/s
# Warmup Iteration   2: 57405950.463 ops/s
# Warmup Iteration   3: 50859747.762 ops/s
# Warmup Iteration   4: 58511677.128 ops/s
# Warmup Iteration   5: 59714139.343 ops/s
# Warmup Iteration   6: 59641758.181 ops/s
# Warmup Iteration   7: 59124813.085 ops/s
# Warmup Iteration   8: 59080913.375 ops/s
# Warmup Iteration   9: 59529949.351 ops/s
# Warmup Iteration  10: 58696176.759 ops/s
# Warmup Iteration  11: 58319249.130 ops/s
# Warmup Iteration  12: 59345800.265 ops/s
# Warmup Iteration  13: 58847103.940 ops/s
# Warmup Iteration  14: 58442671.507 ops/s
# Warmup Iteration  15: 59065959.562 ops/s
# Warmup Iteration  16: 58635933.000 ops/s
# Warmup Iteration  17: 58815305.703 ops/s
# Warmup Iteration  18: 59242280.389 ops/s
# Warmup Iteration  19: 58788894.391 ops/s
# Warmup Iteration  20: 58340636.568 ops/s
# Warmup Iteration  21: 58860219.629 ops/s
# Warmup Iteration  22: 59259275.568 ops/s
# Warmup Iteration  23: 58594251.330 ops/s
# Warmup Iteration  24: 59737715.093 ops/s
# Warmup Iteration  25: 58307766.816 ops/s
# Warmup Iteration  26: 58957207.846 ops/s
# Warmup Iteration  27: 59237537.573 ops/s
# Warmup Iteration  28: 59147642.081 ops/s
# Warmup Iteration  29: 59738644.408 ops/s
# Warmup Iteration  30: 58986388.094 ops/s
Iteration   1: 59131399.215 ops/s
Iteration   2: 59445398.005 ops/s
Iteration   3: 59725756.050 ops/s
Iteration   4: 59305798.786 ops/s
Iteration   5: 59496994.670 ops/s
Iteration   6: 59550475.477 ops/s
Iteration   7: 59582610.943 ops/s
Iteration   8: 58119491.393 ops/s
Iteration   9: 57681453.300 ops/s
Iteration  10: 57647526.331 ops/s
Iteration  11: 59569191.187 ops/s
Iteration  12: 59721270.314 ops/s
Iteration  13: 58458877.884 ops/s
Iteration  14: 57905963.843 ops/s
Iteration  15: 59570891.620 ops/s
Iteration  16: 59293817.615 ops/s
Iteration  17: 58818672.102 ops/s
Iteration  18: 58982495.036 ops/s
Iteration  19: 59318860.482 ops/s
Iteration  20: 58928564.818 ops/s
Iteration  21: 59547686.301 ops/s
Iteration  22: 59566997.578 ops/s
Iteration  23: 58772765.661 ops/s
Iteration  24: 59330248.744 ops/s
Iteration  25: 57802107.215 ops/s
Iteration  26: 58267015.285 ops/s
Iteration  27: 57801717.916 ops/s
Iteration  28: 58712846.557 ops/s
Iteration  29: 59132143.340 ops/s
Iteration  30: 60004144.091 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStack":
  58973106.059 ±(99.9%) 468029.387 ops/s [Average]
  (min, avg, max) = (57647526.331, 58973106.059, 60004144.091), stdev = 700524.406
  CI (99.9%): [58505076.672, 59441135.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toStack  thrpt   30  58973106.059 ± 468029.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12675407.455 ops/s
# Warmup Iteration   2: 24752153.433 ops/s
# Warmup Iteration   3: 21234262.275 ops/s
# Warmup Iteration   4: 24526950.251 ops/s
# Warmup Iteration   5: 24420746.388 ops/s
# Warmup Iteration   6: 24991211.662 ops/s
# Warmup Iteration   7: 25062611.201 ops/s
# Warmup Iteration   8: 24956153.116 ops/s
# Warmup Iteration   9: 25208958.632 ops/s
# Warmup Iteration  10: 25311896.574 ops/s
# Warmup Iteration  11: 25006545.862 ops/s
# Warmup Iteration  12: 24527360.352 ops/s
# Warmup Iteration  13: 24821109.532 ops/s
# Warmup Iteration  14: 25189810.265 ops/s
# Warmup Iteration  15: 24270491.505 ops/s
# Warmup Iteration  16: 25106980.790 ops/s
# Warmup Iteration  17: 24807030.797 ops/s
# Warmup Iteration  18: 24540331.531 ops/s
# Warmup Iteration  19: 24675680.362 ops/s
# Warmup Iteration  20: 24982658.914 ops/s
# Warmup Iteration  21: 24527816.835 ops/s
# Warmup Iteration  22: 24884208.309 ops/s
# Warmup Iteration  23: 24902651.171 ops/s
# Warmup Iteration  24: 25104995.716 ops/s
# Warmup Iteration  25: 25184906.842 ops/s
# Warmup Iteration  26: 24958323.597 ops/s
# Warmup Iteration  27: 24845380.221 ops/s
# Warmup Iteration  28: 25004248.572 ops/s
# Warmup Iteration  29: 24768109.937 ops/s
# Warmup Iteration  30: 24411670.535 ops/s
Iteration   1: 24638790.839 ops/s
Iteration   2: 24816599.199 ops/s
Iteration   3: 24906076.139 ops/s
Iteration   4: 24737956.586 ops/s
Iteration   5: 24709468.373 ops/s
Iteration   6: 24849099.327 ops/s
Iteration   7: 24965148.747 ops/s
Iteration   8: 25114200.919 ops/s
Iteration   9: 25047055.738 ops/s
Iteration  10: 25024231.813 ops/s
Iteration  11: 25071894.070 ops/s
Iteration  12: 24960415.558 ops/s
Iteration  13: 25154928.144 ops/s
Iteration  14: 24895676.921 ops/s
Iteration  15: 24505381.011 ops/s
Iteration  16: 24417901.286 ops/s
Iteration  17: 25014546.738 ops/s
Iteration  18: 25200058.422 ops/s
Iteration  19: 25329234.382 ops/s
Iteration  20: 25109518.260 ops/s
Iteration  21: 25118194.564 ops/s
Iteration  22: 25127645.141 ops/s
Iteration  23: 25255246.770 ops/s
Iteration  24: 24993455.504 ops/s
Iteration  25: 24998814.624 ops/s
Iteration  26: 25113960.386 ops/s
Iteration  27: 24951608.965 ops/s
Iteration  28: 25110570.808 ops/s
Iteration  29: 24806673.870 ops/s
Iteration  30: 25056260.000 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_toStringOfItemToCount":
  24966687.103 ±(99.9%) 140464.205 ops/s [Average]
  (min, avg, max) = (24417901.286, 24966687.103, 25329234.382), stdev = 210240.226
  CI (99.9%): [24826222.898, 25107151.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  24966687.103 ± 140464.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19993198.608 ops/s
# Warmup Iteration   2: 40876709.026 ops/s
# Warmup Iteration   3: 35213125.739 ops/s
# Warmup Iteration   4: 41236458.089 ops/s
# Warmup Iteration   5: 40951970.313 ops/s
# Warmup Iteration   6: 40916577.398 ops/s
# Warmup Iteration   7: 41169104.017 ops/s
# Warmup Iteration   8: 40529737.291 ops/s
# Warmup Iteration   9: 41246055.005 ops/s
# Warmup Iteration  10: 41281717.930 ops/s
# Warmup Iteration  11: 41386349.398 ops/s
# Warmup Iteration  12: 41336538.009 ops/s
# Warmup Iteration  13: 41392298.052 ops/s
# Warmup Iteration  14: 41278062.060 ops/s
# Warmup Iteration  15: 41302457.256 ops/s
# Warmup Iteration  16: 41399396.962 ops/s
# Warmup Iteration  17: 41352042.454 ops/s
# Warmup Iteration  18: 40990765.784 ops/s
# Warmup Iteration  19: 41325859.781 ops/s
# Warmup Iteration  20: 41492110.073 ops/s
# Warmup Iteration  21: 41301179.302 ops/s
# Warmup Iteration  22: 40957207.969 ops/s
# Warmup Iteration  23: 41238567.606 ops/s
# Warmup Iteration  24: 41318398.856 ops/s
# Warmup Iteration  25: 41208373.458 ops/s
# Warmup Iteration  26: 41064384.646 ops/s
# Warmup Iteration  27: 40691662.401 ops/s
# Warmup Iteration  28: 41103619.248 ops/s
# Warmup Iteration  29: 41206092.036 ops/s
# Warmup Iteration  30: 41400943.265 ops/s
Iteration   1: 41407878.808 ops/s
Iteration   2: 41151047.051 ops/s
Iteration   3: 41397315.657 ops/s
Iteration   4: 40944211.131 ops/s
Iteration   5: 40928890.745 ops/s
Iteration   6: 40907272.805 ops/s
Iteration   7: 39771033.844 ops/s
Iteration   8: 40982412.047 ops/s
Iteration   9: 41238894.965 ops/s
Iteration  10: 40781158.892 ops/s
Iteration  11: 41328737.446 ops/s
Iteration  12: 41338359.341 ops/s
Iteration  13: 41354566.391 ops/s
Iteration  14: 40273376.113 ops/s
Iteration  15: 40083433.452 ops/s
Iteration  16: 40495337.169 ops/s
Iteration  17: 41006037.778 ops/s
Iteration  18: 40719797.978 ops/s
Iteration  19: 40304843.330 ops/s
Iteration  20: 40497894.174 ops/s
Iteration  21: 40611180.550 ops/s
Iteration  22: 40940147.734 ops/s
Iteration  23: 41409942.228 ops/s
Iteration  24: 41441010.332 ops/s
Iteration  25: 41546591.085 ops/s
Iteration  26: 41229620.701 ops/s
Iteration  27: 41134838.667 ops/s
Iteration  28: 41533331.207 ops/s
Iteration  29: 41484770.454 ops/s
Iteration  30: 41152992.723 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_topOccurrences":
  40979897.493 ±(99.9%) 308473.608 ops/s [Average]
  (min, avg, max) = (39771033.844, 40979897.493, 41546591.085), stdev = 461708.809
  CI (99.9%): [40671423.885, 41288371.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  40979897.493 ± 308473.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9594550.172 ops/s
# Warmup Iteration   2: 19851178.733 ops/s
# Warmup Iteration   3: 20705901.534 ops/s
# Warmup Iteration   4: 20486317.522 ops/s
# Warmup Iteration   5: 17435174.418 ops/s
# Warmup Iteration   6: 20732762.885 ops/s
# Warmup Iteration   7: 20675416.247 ops/s
# Warmup Iteration   8: 20740714.445 ops/s
# Warmup Iteration   9: 20612482.383 ops/s
# Warmup Iteration  10: 20670487.328 ops/s
# Warmup Iteration  11: 20892987.376 ops/s
# Warmup Iteration  12: 20880625.165 ops/s
# Warmup Iteration  13: 20621446.485 ops/s
# Warmup Iteration  14: 20913027.085 ops/s
# Warmup Iteration  15: 20864774.247 ops/s
# Warmup Iteration  16: 20959887.926 ops/s
# Warmup Iteration  17: 20417087.438 ops/s
# Warmup Iteration  18: 20518693.623 ops/s
# Warmup Iteration  19: 20565473.073 ops/s
# Warmup Iteration  20: 20405550.035 ops/s
# Warmup Iteration  21: 20207591.033 ops/s
# Warmup Iteration  22: 20596107.519 ops/s
# Warmup Iteration  23: 20566794.596 ops/s
# Warmup Iteration  24: 20376686.593 ops/s
# Warmup Iteration  25: 20551864.418 ops/s
# Warmup Iteration  26: 20534911.114 ops/s
# Warmup Iteration  27: 20509223.456 ops/s
# Warmup Iteration  28: 20350777.784 ops/s
# Warmup Iteration  29: 20360064.660 ops/s
# Warmup Iteration  30: 19811068.617 ops/s
Iteration   1: 20478369.824 ops/s
Iteration   2: 20689704.903 ops/s
Iteration   3: 20463107.533 ops/s
Iteration   4: 20266614.932 ops/s
Iteration   5: 20267537.134 ops/s
Iteration   6: 20128642.165 ops/s
Iteration   7: 19824937.029 ops/s
Iteration   8: 20501111.289 ops/s
Iteration   9: 20261475.426 ops/s
Iteration  10: 20682473.214 ops/s
Iteration  11: 20513859.001 ops/s
Iteration  12: 20462456.215 ops/s
Iteration  13: 20119789.474 ops/s
Iteration  14: 20597351.291 ops/s
Iteration  15: 20331730.106 ops/s
Iteration  16: 20651701.586 ops/s
Iteration  17: 20505687.681 ops/s
Iteration  18: 20524996.232 ops/s
Iteration  19: 20642610.953 ops/s
Iteration  20: 20635078.341 ops/s
Iteration  21: 20478996.001 ops/s
Iteration  22: 20211805.606 ops/s
Iteration  23: 20101887.851 ops/s
Iteration  24: 20326773.360 ops/s
Iteration  25: 20560137.543 ops/s
Iteration  26: 20595804.023 ops/s
Iteration  27: 20532927.533 ops/s
Iteration  28: 20443903.982 ops/s
Iteration  29: 20598366.609 ops/s
Iteration  30: 20515680.456 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zip":
  20430517.243 ±(99.9%) 137620.471 ops/s [Average]
  (min, avg, max) = (19824937.029, 20430517.243, 20689704.903), stdev = 205983.859
  CI (99.9%): [20292896.772, 20568137.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_zip  thrpt   30  20430517.243 ± 137620.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39178584.153 ops/s
# Warmup Iteration   2: 77881658.051 ops/s
# Warmup Iteration   3: 64153590.433 ops/s
# Warmup Iteration   4: 75050190.727 ops/s
# Warmup Iteration   5: 76664477.965 ops/s
# Warmup Iteration   6: 76649541.082 ops/s
# Warmup Iteration   7: 77904512.073 ops/s
# Warmup Iteration   8: 77249813.834 ops/s
# Warmup Iteration   9: 76598173.431 ops/s
# Warmup Iteration  10: 77293640.750 ops/s
# Warmup Iteration  11: 76715129.227 ops/s
# Warmup Iteration  12: 76857758.760 ops/s
# Warmup Iteration  13: 75201698.264 ops/s
# Warmup Iteration  14: 75645982.465 ops/s
# Warmup Iteration  15: 76494704.547 ops/s
# Warmup Iteration  16: 76336326.370 ops/s
# Warmup Iteration  17: 77195788.134 ops/s
# Warmup Iteration  18: 77345805.026 ops/s
# Warmup Iteration  19: 77261303.210 ops/s
# Warmup Iteration  20: 77146963.489 ops/s
# Warmup Iteration  21: 77347026.975 ops/s
# Warmup Iteration  22: 77442342.464 ops/s
# Warmup Iteration  23: 76674893.969 ops/s
# Warmup Iteration  24: 77106161.253 ops/s
# Warmup Iteration  25: 76806619.680 ops/s
# Warmup Iteration  26: 77644214.137 ops/s
# Warmup Iteration  27: 75897112.467 ops/s
# Warmup Iteration  28: 77327791.329 ops/s
# Warmup Iteration  29: 77276757.473 ops/s
# Warmup Iteration  30: 77441803.630 ops/s
Iteration   1: 77013899.011 ops/s
Iteration   2: 76584571.486 ops/s
Iteration   3: 77662626.600 ops/s
Iteration   4: 77874348.393 ops/s
Iteration   5: 78143772.215 ops/s
Iteration   6: 77039574.843 ops/s
Iteration   7: 77814074.351 ops/s
Iteration   8: 76820381.822 ops/s
Iteration   9: 76650366.000 ops/s
Iteration  10: 75630065.113 ops/s
Iteration  11: 77454865.892 ops/s
Iteration  12: 76169999.197 ops/s
Iteration  13: 76965287.044 ops/s
Iteration  14: 77523149.629 ops/s
Iteration  15: 76019254.644 ops/s
Iteration  16: 77550286.751 ops/s
Iteration  17: 76032779.294 ops/s
Iteration  18: 77938739.094 ops/s
Iteration  19: 77278439.279 ops/s
Iteration  20: 75830042.913 ops/s
Iteration  21: 76848227.463 ops/s
Iteration  22: 76348785.564 ops/s
Iteration  23: 75466099.262 ops/s
Iteration  24: 77440359.915 ops/s
Iteration  25: 77720671.650 ops/s
Iteration  26: 77561537.097 ops/s
Iteration  27: 77667255.005 ops/s
Iteration  28: 77511155.861 ops/s
Iteration  29: 77303262.591 ops/s
Iteration  30: 76581635.781 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableEmptySortedBagTest._Benchmark.benchmark_zipWithIndex":
  77014850.459 ±(99.9%) 494303.462 ops/s [Average]
  (min, avg, max) = (75466099.262, 77014850.459, 78143772.215), stdev = 739850.208
  CI (99.9%): [76520546.997, 77509153.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableEmptySortedBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  77014850.459 ± 494303.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469932.269 ops/s
# Warmup Iteration   2: 543728.779 ops/s
# Warmup Iteration   3: 729027.789 ops/s
# Warmup Iteration   4: 726536.973 ops/s
# Warmup Iteration   5: 728137.457 ops/s
# Warmup Iteration   6: 740036.875 ops/s
# Warmup Iteration   7: 732280.458 ops/s
# Warmup Iteration   8: 734212.980 ops/s
# Warmup Iteration   9: 729815.058 ops/s
# Warmup Iteration  10: 612047.549 ops/s
# Warmup Iteration  11: 736111.151 ops/s
# Warmup Iteration  12: 735753.256 ops/s
# Warmup Iteration  13: 731473.372 ops/s
# Warmup Iteration  14: 735870.980 ops/s
# Warmup Iteration  15: 738621.428 ops/s
# Warmup Iteration  16: 738079.107 ops/s
# Warmup Iteration  17: 771171.801 ops/s
# Warmup Iteration  18: 773342.939 ops/s
# Warmup Iteration  19: 766906.618 ops/s
# Warmup Iteration  20: 764048.694 ops/s
# Warmup Iteration  21: 764799.428 ops/s
# Warmup Iteration  22: 764976.909 ops/s
# Warmup Iteration  23: 750853.994 ops/s
# Warmup Iteration  24: 763415.773 ops/s
# Warmup Iteration  25: 770452.589 ops/s
# Warmup Iteration  26: 766647.224 ops/s
# Warmup Iteration  27: 772886.215 ops/s
# Warmup Iteration  28: 767016.633 ops/s
# Warmup Iteration  29: 772199.854 ops/s
# Warmup Iteration  30: 771253.245 ops/s
Iteration   1: 768914.824 ops/s
Iteration   2: 767173.347 ops/s
Iteration   3: 769723.635 ops/s
Iteration   4: 774835.805 ops/s
Iteration   5: 771391.540 ops/s
Iteration   6: 764990.660 ops/s
Iteration   7: 766064.751 ops/s
Iteration   8: 768847.730 ops/s
Iteration   9: 774799.808 ops/s
Iteration  10: 771497.415 ops/s
Iteration  11: 773546.771 ops/s
Iteration  12: 770772.386 ops/s
Iteration  13: 763487.741 ops/s
Iteration  14: 771184.477 ops/s
Iteration  15: 773074.913 ops/s
Iteration  16: 774598.626 ops/s
Iteration  17: 767922.966 ops/s
Iteration  18: 766638.057 ops/s
Iteration  19: 771078.556 ops/s
Iteration  20: 772567.416 ops/s
Iteration  21: 776544.487 ops/s
Iteration  22: 768166.738 ops/s
Iteration  23: 771030.355 ops/s
Iteration  24: 767949.674 ops/s
Iteration  25: 769528.942 ops/s
Iteration  26: 768534.599 ops/s
Iteration  27: 762418.159 ops/s
Iteration  28: 775328.921 ops/s
Iteration  29: 769228.488 ops/s
Iteration  30: 774629.886 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_add":
  770215.722 ±(99.9%) 2396.290 ops/s [Average]
  (min, avg, max) = (762418.159, 770215.722, 776544.487), stdev = 3586.654
  CI (99.9%): [767819.433, 772612.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_add  thrpt   30  770215.722 ± 2396.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469623.547 ops/s
# Warmup Iteration   2: 564515.071 ops/s
# Warmup Iteration   3: 756247.309 ops/s
# Warmup Iteration   4: 741732.108 ops/s
# Warmup Iteration   5: 742133.312 ops/s
# Warmup Iteration   6: 750886.710 ops/s
# Warmup Iteration   7: 743634.902 ops/s
# Warmup Iteration   8: 755213.362 ops/s
# Warmup Iteration   9: 724371.728 ops/s
# Warmup Iteration  10: 659678.449 ops/s
# Warmup Iteration  11: 756500.884 ops/s
# Warmup Iteration  12: 737045.180 ops/s
# Warmup Iteration  13: 749010.272 ops/s
# Warmup Iteration  14: 751576.755 ops/s
# Warmup Iteration  15: 745510.476 ops/s
# Warmup Iteration  16: 756638.890 ops/s
# Warmup Iteration  17: 791552.071 ops/s
# Warmup Iteration  18: 789379.646 ops/s
# Warmup Iteration  19: 792931.843 ops/s
# Warmup Iteration  20: 787715.673 ops/s
# Warmup Iteration  21: 790956.491 ops/s
# Warmup Iteration  22: 783124.219 ops/s
# Warmup Iteration  23: 784585.049 ops/s
# Warmup Iteration  24: 783581.527 ops/s
# Warmup Iteration  25: 782746.440 ops/s
# Warmup Iteration  26: 788903.196 ops/s
# Warmup Iteration  27: 787549.366 ops/s
# Warmup Iteration  28: 793054.370 ops/s
# Warmup Iteration  29: 792912.783 ops/s
# Warmup Iteration  30: 793685.141 ops/s
Iteration   1: 793747.649 ops/s
Iteration   2: 784689.819 ops/s
Iteration   3: 789419.899 ops/s
Iteration   4: 789173.269 ops/s
Iteration   5: 790193.519 ops/s
Iteration   6: 787268.445 ops/s
Iteration   7: 797094.718 ops/s
Iteration   8: 794170.708 ops/s
Iteration   9: 789303.755 ops/s
Iteration  10: 786408.199 ops/s
Iteration  11: 789986.921 ops/s
Iteration  12: 792705.628 ops/s
Iteration  13: 785414.272 ops/s
Iteration  14: 768558.980 ops/s
Iteration  15: 790212.575 ops/s
Iteration  16: 786994.833 ops/s
Iteration  17: 792214.787 ops/s
Iteration  18: 786645.388 ops/s
Iteration  19: 776155.858 ops/s
Iteration  20: 785443.476 ops/s
Iteration  21: 785494.045 ops/s
Iteration  22: 790170.109 ops/s
Iteration  23: 792336.684 ops/s
Iteration  24: 791982.841 ops/s
Iteration  25: 793270.995 ops/s
Iteration  26: 789516.292 ops/s
Iteration  27: 791767.606 ops/s
Iteration  28: 791643.419 ops/s
Iteration  29: 784830.962 ops/s
Iteration  30: 774697.924 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_addAll":
  788050.452 ±(99.9%) 4021.969 ops/s [Average]
  (min, avg, max) = (768558.980, 788050.452, 797094.718), stdev = 6019.894
  CI (99.9%): [784028.483, 792072.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_addAll  thrpt   30  788050.452 ± 4021.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 403981.639 ops/s
# Warmup Iteration   2: 892213.695 ops/s
# Warmup Iteration   3: 971537.833 ops/s
# Warmup Iteration   4: 972545.101 ops/s
# Warmup Iteration   5: 792054.685 ops/s
# Warmup Iteration   6: 966154.081 ops/s
# Warmup Iteration   7: 966617.120 ops/s
# Warmup Iteration   8: 951932.487 ops/s
# Warmup Iteration   9: 963891.075 ops/s
# Warmup Iteration  10: 946439.949 ops/s
# Warmup Iteration  11: 961527.348 ops/s
# Warmup Iteration  12: 948283.730 ops/s
# Warmup Iteration  13: 944005.577 ops/s
# Warmup Iteration  14: 967183.157 ops/s
# Warmup Iteration  15: 980284.688 ops/s
# Warmup Iteration  16: 975533.147 ops/s
# Warmup Iteration  17: 965229.466 ops/s
# Warmup Iteration  18: 973629.918 ops/s
# Warmup Iteration  19: 976275.130 ops/s
# Warmup Iteration  20: 976465.985 ops/s
# Warmup Iteration  21: 975968.556 ops/s
# Warmup Iteration  22: 975314.155 ops/s
# Warmup Iteration  23: 970819.217 ops/s
# Warmup Iteration  24: 975485.557 ops/s
# Warmup Iteration  25: 974848.304 ops/s
# Warmup Iteration  26: 974223.662 ops/s
# Warmup Iteration  27: 951983.553 ops/s
# Warmup Iteration  28: 956487.404 ops/s
# Warmup Iteration  29: 948829.101 ops/s
# Warmup Iteration  30: 947116.410 ops/s
Iteration   1: 962291.984 ops/s
Iteration   2: 978505.819 ops/s
Iteration   3: 978616.671 ops/s
Iteration   4: 978683.021 ops/s
Iteration   5: 980908.766 ops/s
Iteration   6: 981024.340 ops/s
Iteration   7: 985509.998 ops/s
Iteration   8: 983628.406 ops/s
Iteration   9: 979595.668 ops/s
Iteration  10: 981522.151 ops/s
Iteration  11: 980568.580 ops/s
Iteration  12: 977336.831 ops/s
Iteration  13: 977922.101 ops/s
Iteration  14: 960265.995 ops/s
Iteration  15: 983912.809 ops/s
Iteration  16: 984320.804 ops/s
Iteration  17: 975156.661 ops/s
Iteration  18: 972779.959 ops/s
Iteration  19: 937228.080 ops/s
Iteration  20: 975267.928 ops/s
Iteration  21: 978045.287 ops/s
Iteration  22: 981227.888 ops/s
Iteration  23: 980334.743 ops/s
Iteration  24: 977110.309 ops/s
Iteration  25: 974977.344 ops/s
Iteration  26: 976906.238 ops/s
Iteration  27: 977235.578 ops/s
Iteration  28: 982148.097 ops/s
Iteration  29: 980333.781 ops/s
Iteration  30: 974265.493 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByMutating":
  976587.711 ±(99.9%) 6171.462 ops/s [Average]
  (min, avg, max) = (937228.080, 976587.711, 985509.998), stdev = 9237.155
  CI (99.9%): [970416.249, 982759.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  976587.711 ± 6171.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 436316.701 ops/s
# Warmup Iteration   2: 924613.890 ops/s
# Warmup Iteration   3: 1014927.245 ops/s
# Warmup Iteration   4: 1043813.979 ops/s
# Warmup Iteration   5: 871962.013 ops/s
# Warmup Iteration   6: 1048488.349 ops/s
# Warmup Iteration   7: 1039666.097 ops/s
# Warmup Iteration   8: 1049023.893 ops/s
# Warmup Iteration   9: 1045952.645 ops/s
# Warmup Iteration  10: 1052972.748 ops/s
# Warmup Iteration  11: 1050776.021 ops/s
# Warmup Iteration  12: 1052866.362 ops/s
# Warmup Iteration  13: 1052603.740 ops/s
# Warmup Iteration  14: 1053998.393 ops/s
# Warmup Iteration  15: 1049815.482 ops/s
# Warmup Iteration  16: 1058451.887 ops/s
# Warmup Iteration  17: 1053821.180 ops/s
# Warmup Iteration  18: 1055954.633 ops/s
# Warmup Iteration  19: 1056600.027 ops/s
# Warmup Iteration  20: 1032670.924 ops/s
# Warmup Iteration  21: 1043646.465 ops/s
# Warmup Iteration  22: 1052719.608 ops/s
# Warmup Iteration  23: 1012446.553 ops/s
# Warmup Iteration  24: 1007719.913 ops/s
# Warmup Iteration  25: 1049310.344 ops/s
# Warmup Iteration  26: 1026043.343 ops/s
# Warmup Iteration  27: 1053926.654 ops/s
# Warmup Iteration  28: 1051290.025 ops/s
# Warmup Iteration  29: 1020926.119 ops/s
# Warmup Iteration  30: 1037692.225 ops/s
Iteration   1: 1028568.359 ops/s
Iteration   2: 1057759.406 ops/s
Iteration   3: 1046231.730 ops/s
Iteration   4: 1042245.071 ops/s
Iteration   5: 1043304.564 ops/s
Iteration   6: 1045639.272 ops/s
Iteration   7: 1036869.547 ops/s
Iteration   8: 1043487.186 ops/s
Iteration   9: 1052279.359 ops/s
Iteration  10: 1043740.643 ops/s
Iteration  11: 1056229.283 ops/s
Iteration  12: 1055265.905 ops/s
Iteration  13: 1050604.593 ops/s
Iteration  14: 1054292.427 ops/s
Iteration  15: 1056423.524 ops/s
Iteration  16: 1052985.609 ops/s
Iteration  17: 1050871.156 ops/s
Iteration  18: 1053811.345 ops/s
Iteration  19: 1047786.317 ops/s
Iteration  20: 1053031.572 ops/s
Iteration  21: 1056841.720 ops/s
Iteration  22: 1056080.811 ops/s
Iteration  23: 1059468.634 ops/s
Iteration  24: 1057936.811 ops/s
Iteration  25: 1043432.070 ops/s
Iteration  26: 1046336.698 ops/s
Iteration  27: 1037473.477 ops/s
Iteration  28: 1052343.647 ops/s
Iteration  29: 1048200.288 ops/s
Iteration  30: 1009927.335 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByNonMutating":
  1047982.279 ±(99.9%) 6822.587 ops/s [Average]
  (min, avg, max) = (1009927.335, 1047982.279, 1059468.634), stdev = 10211.728
  CI (99.9%): [1041159.691, 1054804.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1047982.279 ± 6822.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1667895.317 ops/s
# Warmup Iteration   2: 3218509.479 ops/s
# Warmup Iteration   3: 3509740.813 ops/s
# Warmup Iteration   4: 3564200.121 ops/s
# Warmup Iteration   5: 3013452.805 ops/s
# Warmup Iteration   6: 3379358.548 ops/s
# Warmup Iteration   7: 3584798.252 ops/s
# Warmup Iteration   8: 3590701.670 ops/s
# Warmup Iteration   9: 3587902.152 ops/s
# Warmup Iteration  10: 3548953.785 ops/s
# Warmup Iteration  11: 3589656.184 ops/s
# Warmup Iteration  12: 3603434.680 ops/s
# Warmup Iteration  13: 3486268.634 ops/s
# Warmup Iteration  14: 3500861.229 ops/s
# Warmup Iteration  15: 3612101.094 ops/s
# Warmup Iteration  16: 3582636.227 ops/s
# Warmup Iteration  17: 3514978.580 ops/s
# Warmup Iteration  18: 3601482.304 ops/s
# Warmup Iteration  19: 3544995.649 ops/s
# Warmup Iteration  20: 3603920.515 ops/s
# Warmup Iteration  21: 3612247.102 ops/s
# Warmup Iteration  22: 3571517.795 ops/s
# Warmup Iteration  23: 3542056.323 ops/s
# Warmup Iteration  24: 3588715.748 ops/s
# Warmup Iteration  25: 3601375.685 ops/s
# Warmup Iteration  26: 3543106.112 ops/s
# Warmup Iteration  27: 3583279.804 ops/s
# Warmup Iteration  28: 3569591.124 ops/s
# Warmup Iteration  29: 3570598.505 ops/s
# Warmup Iteration  30: 3588416.843 ops/s
Iteration   1: 3593731.548 ops/s
Iteration   2: 3513591.977 ops/s
Iteration   3: 3531669.677 ops/s
Iteration   4: 3562889.347 ops/s
Iteration   5: 3505499.920 ops/s
Iteration   6: 3577820.466 ops/s
Iteration   7: 3577456.628 ops/s
Iteration   8: 3537365.047 ops/s
Iteration   9: 3594094.254 ops/s
Iteration  10: 3571455.822 ops/s
Iteration  11: 3531465.043 ops/s
Iteration  12: 3603078.223 ops/s
Iteration  13: 3584987.385 ops/s
Iteration  14: 3553422.194 ops/s
Iteration  15: 3569638.444 ops/s
Iteration  16: 3437886.000 ops/s
Iteration  17: 3612458.829 ops/s
Iteration  18: 3586010.899 ops/s
Iteration  19: 3610692.968 ops/s
Iteration  20: 3607373.403 ops/s
Iteration  21: 3599496.322 ops/s
Iteration  22: 3613314.530 ops/s
Iteration  23: 3623981.926 ops/s
Iteration  24: 3625114.647 ops/s
Iteration  25: 3619491.734 ops/s
Iteration  26: 3577466.986 ops/s
Iteration  27: 3603779.301 ops/s
Iteration  28: 3561724.516 ops/s
Iteration  29: 3571801.887 ops/s
Iteration  30: 3589670.440 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfy":
  3574947.679 ±(99.9%) 27435.716 ops/s [Average]
  (min, avg, max) = (3437886.000, 3574947.679, 3625114.647), stdev = 41064.491
  CI (99.9%): [3547511.963, 3602383.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfy  thrpt   30  3574947.679 ± 27435.716  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1566281.684 ops/s
# Warmup Iteration   2: 3074255.037 ops/s
# Warmup Iteration   3: 3353306.729 ops/s
# Warmup Iteration   4: 3393156.777 ops/s
# Warmup Iteration   5: 2794758.298 ops/s
# Warmup Iteration   6: 3324716.295 ops/s
# Warmup Iteration   7: 3411397.996 ops/s
# Warmup Iteration   8: 3283246.976 ops/s
# Warmup Iteration   9: 3394561.744 ops/s
# Warmup Iteration  10: 3338009.131 ops/s
# Warmup Iteration  11: 3310758.462 ops/s
# Warmup Iteration  12: 3290801.235 ops/s
# Warmup Iteration  13: 3359564.010 ops/s
# Warmup Iteration  14: 3387599.531 ops/s
# Warmup Iteration  15: 3293821.890 ops/s
# Warmup Iteration  16: 3397839.111 ops/s
# Warmup Iteration  17: 3394582.801 ops/s
# Warmup Iteration  18: 3387510.796 ops/s
# Warmup Iteration  19: 3382429.335 ops/s
# Warmup Iteration  20: 3388205.593 ops/s
# Warmup Iteration  21: 3390769.204 ops/s
# Warmup Iteration  22: 3369986.263 ops/s
# Warmup Iteration  23: 3345931.896 ops/s
# Warmup Iteration  24: 3300631.995 ops/s
# Warmup Iteration  25: 3294273.728 ops/s
# Warmup Iteration  26: 3343185.590 ops/s
# Warmup Iteration  27: 3367616.399 ops/s
# Warmup Iteration  28: 3348320.111 ops/s
# Warmup Iteration  29: 3396011.480 ops/s
# Warmup Iteration  30: 3346531.831 ops/s
Iteration   1: 3409275.718 ops/s
Iteration   2: 3344292.736 ops/s
Iteration   3: 3385132.054 ops/s
Iteration   4: 3417320.472 ops/s
Iteration   5: 3370672.301 ops/s
Iteration   6: 3408617.713 ops/s
Iteration   7: 3378993.998 ops/s
Iteration   8: 3389821.076 ops/s
Iteration   9: 3402955.760 ops/s
Iteration  10: 3411461.544 ops/s
Iteration  11: 3378578.736 ops/s
Iteration  12: 3394016.959 ops/s
Iteration  13: 3365405.672 ops/s
Iteration  14: 3385174.706 ops/s
Iteration  15: 3395724.704 ops/s
Iteration  16: 3378987.970 ops/s
Iteration  17: 3384325.659 ops/s
Iteration  18: 3379796.869 ops/s
Iteration  19: 3400313.718 ops/s
Iteration  20: 3410990.565 ops/s
Iteration  21: 3411497.008 ops/s
Iteration  22: 3314903.630 ops/s
Iteration  23: 3341685.617 ops/s
Iteration  24: 3337829.737 ops/s
Iteration  25: 3353288.150 ops/s
Iteration  26: 3389826.486 ops/s
Iteration  27: 3361501.969 ops/s
Iteration  28: 3364940.626 ops/s
Iteration  29: 3358677.520 ops/s
Iteration  30: 3305565.012 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWith":
  3377719.156 ±(99.9%) 19157.553 ops/s [Average]
  (min, avg, max) = (3305565.012, 3377719.156, 3417320.472), stdev = 28674.126
  CI (99.9%): [3358561.603, 3396876.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  3377719.156 ± 19157.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1680606.700 ops/s
# Warmup Iteration   2: 3245488.673 ops/s
# Warmup Iteration   3: 3650440.396 ops/s
# Warmup Iteration   4: 3612941.155 ops/s
# Warmup Iteration   5: 2994631.706 ops/s
# Warmup Iteration   6: 3589430.127 ops/s
# Warmup Iteration   7: 3617327.454 ops/s
# Warmup Iteration   8: 3627449.851 ops/s
# Warmup Iteration   9: 3573181.122 ops/s
# Warmup Iteration  10: 3609587.803 ops/s
# Warmup Iteration  11: 3639346.570 ops/s
# Warmup Iteration  12: 3626098.535 ops/s
# Warmup Iteration  13: 3653551.761 ops/s
# Warmup Iteration  14: 3607532.584 ops/s
# Warmup Iteration  15: 3634696.583 ops/s
# Warmup Iteration  16: 3643291.537 ops/s
# Warmup Iteration  17: 3641723.045 ops/s
# Warmup Iteration  18: 3654058.514 ops/s
# Warmup Iteration  19: 3618045.593 ops/s
# Warmup Iteration  20: 3640653.551 ops/s
# Warmup Iteration  21: 3618653.112 ops/s
# Warmup Iteration  22: 3642119.148 ops/s
# Warmup Iteration  23: 3662164.932 ops/s
# Warmup Iteration  24: 3590471.670 ops/s
# Warmup Iteration  25: 3658271.539 ops/s
# Warmup Iteration  26: 3630715.231 ops/s
# Warmup Iteration  27: 3606558.999 ops/s
# Warmup Iteration  28: 3624269.740 ops/s
# Warmup Iteration  29: 3585249.415 ops/s
# Warmup Iteration  30: 3597441.874 ops/s
Iteration   1: 3646699.532 ops/s
Iteration   2: 3650879.949 ops/s
Iteration   3: 3651410.523 ops/s
Iteration   4: 3665875.951 ops/s
Iteration   5: 3621504.263 ops/s
Iteration   6: 3618181.914 ops/s
Iteration   7: 3628358.570 ops/s
Iteration   8: 3546450.720 ops/s
Iteration   9: 3540215.167 ops/s
Iteration  10: 3543753.135 ops/s
Iteration  11: 3564545.400 ops/s
Iteration  12: 3540312.749 ops/s
Iteration  13: 3638274.943 ops/s
Iteration  14: 3515133.956 ops/s
Iteration  15: 3600853.589 ops/s
Iteration  16: 3651653.130 ops/s
Iteration  17: 3632343.339 ops/s
Iteration  18: 3640585.532 ops/s
Iteration  19: 3637216.017 ops/s
Iteration  20: 3657654.881 ops/s
Iteration  21: 3659692.675 ops/s
Iteration  22: 3656126.141 ops/s
Iteration  23: 3629532.673 ops/s
Iteration  24: 3662488.904 ops/s
Iteration  25: 3667354.659 ops/s
Iteration  26: 3630044.782 ops/s
Iteration  27: 3662468.635 ops/s
Iteration  28: 3624587.185 ops/s
Iteration  29: 3643320.974 ops/s
Iteration  30: 3663778.567 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  3623043.282 ±(99.9%) 29869.692 ops/s [Average]
  (min, avg, max) = (3515133.956, 3623043.282, 3667354.659), stdev = 44707.553
  CI (99.9%): [3593173.589, 3652912.974] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  3623043.282 ± 29869.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1685062.810 ops/s
# Warmup Iteration   2: 3270916.916 ops/s
# Warmup Iteration   3: 3583208.881 ops/s
# Warmup Iteration   4: 3592149.443 ops/s
# Warmup Iteration   5: 2988955.115 ops/s
# Warmup Iteration   6: 3573929.552 ops/s
# Warmup Iteration   7: 3637598.911 ops/s
# Warmup Iteration   8: 3629066.188 ops/s
# Warmup Iteration   9: 3637787.841 ops/s
# Warmup Iteration  10: 3582621.504 ops/s
# Warmup Iteration  11: 3614041.634 ops/s
# Warmup Iteration  12: 3577838.268 ops/s
# Warmup Iteration  13: 3631701.592 ops/s
# Warmup Iteration  14: 3568542.388 ops/s
# Warmup Iteration  15: 3619298.850 ops/s
# Warmup Iteration  16: 3626642.956 ops/s
# Warmup Iteration  17: 3627463.242 ops/s
# Warmup Iteration  18: 3625020.055 ops/s
# Warmup Iteration  19: 3631165.486 ops/s
# Warmup Iteration  20: 3618829.083 ops/s
# Warmup Iteration  21: 3641809.001 ops/s
# Warmup Iteration  22: 3594415.514 ops/s
# Warmup Iteration  23: 3584623.579 ops/s
# Warmup Iteration  24: 3578221.593 ops/s
# Warmup Iteration  25: 3634372.560 ops/s
# Warmup Iteration  26: 3611570.270 ops/s
# Warmup Iteration  27: 3607248.509 ops/s
# Warmup Iteration  28: 3606738.545 ops/s
# Warmup Iteration  29: 3621271.765 ops/s
# Warmup Iteration  30: 3627395.528 ops/s
Iteration   1: 3607344.129 ops/s
Iteration   2: 3653042.768 ops/s
Iteration   3: 3614960.993 ops/s
Iteration   4: 3629078.962 ops/s
Iteration   5: 3596443.276 ops/s
Iteration   6: 3636783.762 ops/s
Iteration   7: 3614992.745 ops/s
Iteration   8: 3576508.912 ops/s
Iteration   9: 3592283.755 ops/s
Iteration  10: 3633024.308 ops/s
Iteration  11: 3616530.691 ops/s
Iteration  12: 3627490.385 ops/s
Iteration  13: 3523162.726 ops/s
Iteration  14: 3547474.201 ops/s
Iteration  15: 3612187.392 ops/s
Iteration  16: 3642642.622 ops/s
Iteration  17: 3636242.729 ops/s
Iteration  18: 3643489.201 ops/s
Iteration  19: 3647093.348 ops/s
Iteration  20: 3559739.120 ops/s
Iteration  21: 3500480.775 ops/s
Iteration  22: 3608622.744 ops/s
Iteration  23: 3549354.362 ops/s
Iteration  24: 3582900.166 ops/s
Iteration  25: 3605151.485 ops/s
Iteration  26: 3584505.989 ops/s
Iteration  27: 3636575.361 ops/s
Iteration  28: 3583857.680 ops/s
Iteration  29: 3625941.134 ops/s
Iteration  30: 3640049.675 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfy":
  3604265.180 ±(99.9%) 25535.690 ops/s [Average]
  (min, avg, max) = (3500480.775, 3604265.180, 3653042.768), stdev = 38220.621
  CI (99.9%): [3578729.490, 3629800.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfy  thrpt   30  3604265.180 ± 25535.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1652933.634 ops/s
# Warmup Iteration   2: 3135934.678 ops/s
# Warmup Iteration   3: 3532508.164 ops/s
# Warmup Iteration   4: 3562082.321 ops/s
# Warmup Iteration   5: 3095139.556 ops/s
# Warmup Iteration   6: 3333917.163 ops/s
# Warmup Iteration   7: 3515133.629 ops/s
# Warmup Iteration   8: 3534157.565 ops/s
# Warmup Iteration   9: 3512508.737 ops/s
# Warmup Iteration  10: 3517271.218 ops/s
# Warmup Iteration  11: 3523705.420 ops/s
# Warmup Iteration  12: 3532613.363 ops/s
# Warmup Iteration  13: 3493070.874 ops/s
# Warmup Iteration  14: 3534822.240 ops/s
# Warmup Iteration  15: 3501131.928 ops/s
# Warmup Iteration  16: 3394033.731 ops/s
# Warmup Iteration  17: 3484323.843 ops/s
# Warmup Iteration  18: 3438113.310 ops/s
# Warmup Iteration  19: 3399731.730 ops/s
# Warmup Iteration  20: 3425381.881 ops/s
# Warmup Iteration  21: 3495776.354 ops/s
# Warmup Iteration  22: 3507441.923 ops/s
# Warmup Iteration  23: 3476659.296 ops/s
# Warmup Iteration  24: 3503109.789 ops/s
# Warmup Iteration  25: 3526879.674 ops/s
# Warmup Iteration  26: 3501280.621 ops/s
# Warmup Iteration  27: 3424320.617 ops/s
# Warmup Iteration  28: 3421605.797 ops/s
# Warmup Iteration  29: 3434674.812 ops/s
# Warmup Iteration  30: 3501583.807 ops/s
Iteration   1: 3500919.851 ops/s
Iteration   2: 3537467.077 ops/s
Iteration   3: 3463639.905 ops/s
Iteration   4: 3430384.659 ops/s
Iteration   5: 3510802.318 ops/s
Iteration   6: 3532493.296 ops/s
Iteration   7: 3505207.171 ops/s
Iteration   8: 3520185.364 ops/s
Iteration   9: 3522312.574 ops/s
Iteration  10: 3488292.967 ops/s
Iteration  11: 3512515.123 ops/s
Iteration  12: 3504611.460 ops/s
Iteration  13: 3459438.513 ops/s
Iteration  14: 3385776.684 ops/s
Iteration  15: 3503795.764 ops/s
Iteration  16: 3489368.788 ops/s
Iteration  17: 3519317.138 ops/s
Iteration  18: 3511356.309 ops/s
Iteration  19: 3524108.614 ops/s
Iteration  20: 3504294.588 ops/s
Iteration  21: 3502295.719 ops/s
Iteration  22: 3498579.214 ops/s
Iteration  23: 3534558.791 ops/s
Iteration  24: 3536173.675 ops/s
Iteration  25: 3516487.869 ops/s
Iteration  26: 3465695.688 ops/s
Iteration  27: 3436786.075 ops/s
Iteration  28: 3456220.759 ops/s
Iteration  29: 3386714.145 ops/s
Iteration  30: 3498645.201 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWith":
  3491948.177 ±(99.9%) 26803.944 ops/s [Average]
  (min, avg, max) = (3385776.684, 3491948.177, 3537467.077), stdev = 40118.884
  CI (99.9%): [3465144.233, 3518752.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  3491948.177 ± 26803.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1663451.971 ops/s
# Warmup Iteration   2: 3236288.472 ops/s
# Warmup Iteration   3: 3568068.250 ops/s
# Warmup Iteration   4: 3577996.186 ops/s
# Warmup Iteration   5: 3019822.725 ops/s
# Warmup Iteration   6: 3477236.847 ops/s
# Warmup Iteration   7: 3565053.170 ops/s
# Warmup Iteration   8: 3582234.615 ops/s
# Warmup Iteration   9: 3560077.963 ops/s
# Warmup Iteration  10: 3580295.136 ops/s
# Warmup Iteration  11: 3588711.399 ops/s
# Warmup Iteration  12: 3590945.162 ops/s
# Warmup Iteration  13: 3547640.286 ops/s
# Warmup Iteration  14: 3510280.674 ops/s
# Warmup Iteration  15: 3522092.524 ops/s
# Warmup Iteration  16: 3575248.143 ops/s
# Warmup Iteration  17: 3597582.322 ops/s
# Warmup Iteration  18: 3593222.671 ops/s
# Warmup Iteration  19: 3566712.623 ops/s
# Warmup Iteration  20: 3567813.403 ops/s
# Warmup Iteration  21: 3480519.608 ops/s
# Warmup Iteration  22: 3488702.089 ops/s
# Warmup Iteration  23: 3573216.533 ops/s
# Warmup Iteration  24: 3533049.142 ops/s
# Warmup Iteration  25: 3579508.108 ops/s
# Warmup Iteration  26: 3551974.110 ops/s
# Warmup Iteration  27: 3553161.538 ops/s
# Warmup Iteration  28: 3528011.927 ops/s
# Warmup Iteration  29: 3478860.846 ops/s
# Warmup Iteration  30: 3484870.716 ops/s
Iteration   1: 3485040.602 ops/s
Iteration   2: 3484692.417 ops/s
Iteration   3: 3483773.785 ops/s
Iteration   4: 3424092.970 ops/s
Iteration   5: 3479402.028 ops/s
Iteration   6: 3553963.839 ops/s
Iteration   7: 3470749.847 ops/s
Iteration   8: 3497683.634 ops/s
Iteration   9: 3520686.182 ops/s
Iteration  10: 3535748.709 ops/s
Iteration  11: 3470397.972 ops/s
Iteration  12: 3550833.431 ops/s
Iteration  13: 3486704.575 ops/s
Iteration  14: 3587382.591 ops/s
Iteration  15: 3588388.829 ops/s
Iteration  16: 3608463.906 ops/s
Iteration  17: 3576200.739 ops/s
Iteration  18: 3564601.948 ops/s
Iteration  19: 3603553.627 ops/s
Iteration  20: 3579718.342 ops/s
Iteration  21: 3568113.947 ops/s
Iteration  22: 3602812.233 ops/s
Iteration  23: 3577840.197 ops/s
Iteration  24: 3458792.149 ops/s
Iteration  25: 3558669.225 ops/s
Iteration  26: 3571559.925 ops/s
Iteration  27: 3587009.227 ops/s
Iteration  28: 3568144.603 ops/s
Iteration  29: 3566584.152 ops/s
Iteration  30: 3595910.890 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  3540250.551 ±(99.9%) 34886.003 ops/s [Average]
  (min, avg, max) = (3424092.970, 3540250.551, 3608463.906), stdev = 52215.731
  CI (99.9%): [3505364.548, 3575136.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  3540250.551 ± 34886.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511888.156 ops/s
# Warmup Iteration   2: 1021894.034 ops/s
# Warmup Iteration   3: 1123010.608 ops/s
# Warmup Iteration   4: 1126005.104 ops/s
# Warmup Iteration   5: 914109.403 ops/s
# Warmup Iteration   6: 1110799.540 ops/s
# Warmup Iteration   7: 1120353.290 ops/s
# Warmup Iteration   8: 1123299.406 ops/s
# Warmup Iteration   9: 1118706.668 ops/s
# Warmup Iteration  10: 1126592.736 ops/s
# Warmup Iteration  11: 1118754.527 ops/s
# Warmup Iteration  12: 1103702.946 ops/s
# Warmup Iteration  13: 1126772.560 ops/s
# Warmup Iteration  14: 1127297.899 ops/s
# Warmup Iteration  15: 1114233.050 ops/s
# Warmup Iteration  16: 1098002.558 ops/s
# Warmup Iteration  17: 1106813.153 ops/s
# Warmup Iteration  18: 1112322.788 ops/s
# Warmup Iteration  19: 1124800.440 ops/s
# Warmup Iteration  20: 1123722.141 ops/s
# Warmup Iteration  21: 1116819.137 ops/s
# Warmup Iteration  22: 1125937.560 ops/s
# Warmup Iteration  23: 1124078.897 ops/s
# Warmup Iteration  24: 1126820.756 ops/s
# Warmup Iteration  25: 1122364.544 ops/s
# Warmup Iteration  26: 1131311.823 ops/s
# Warmup Iteration  27: 1129728.755 ops/s
# Warmup Iteration  28: 1129881.597 ops/s
# Warmup Iteration  29: 1129097.936 ops/s
# Warmup Iteration  30: 1121798.087 ops/s
Iteration   1: 1115416.805 ops/s
Iteration   2: 1125589.336 ops/s
Iteration   3: 1119365.352 ops/s
Iteration   4: 1119982.453 ops/s
Iteration   5: 1122780.841 ops/s
Iteration   6: 1128233.247 ops/s
Iteration   7: 1130009.178 ops/s
Iteration   8: 1124693.001 ops/s
Iteration   9: 1118026.601 ops/s
Iteration  10: 1128850.111 ops/s
Iteration  11: 1124315.251 ops/s
Iteration  12: 1110609.668 ops/s
Iteration  13: 1094384.564 ops/s
Iteration  14: 1106991.972 ops/s
Iteration  15: 1117530.988 ops/s
Iteration  16: 1103026.048 ops/s
Iteration  17: 1100064.741 ops/s
Iteration  18: 1103713.927 ops/s
Iteration  19: 1096571.791 ops/s
Iteration  20: 1119830.336 ops/s
Iteration  21: 1098915.438 ops/s
Iteration  22: 1119073.634 ops/s
Iteration  23: 1120760.756 ops/s
Iteration  24: 1115500.544 ops/s
Iteration  25: 1121002.969 ops/s
Iteration  26: 1126743.830 ops/s
Iteration  27: 1131545.893 ops/s
Iteration  28: 1129975.454 ops/s
Iteration  29: 1123103.065 ops/s
Iteration  30: 1128536.215 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_appendString":
  1117504.800 ±(99.9%) 7246.723 ops/s [Average]
  (min, avg, max) = (1094384.564, 1117504.800, 1131545.893), stdev = 10846.555
  CI (99.9%): [1110258.077, 1124751.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_appendString  thrpt   30  1117504.800 ± 7246.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86020.626 ops/s
# Warmup Iteration   2: 134600.481 ops/s
# Warmup Iteration   3: 169016.133 ops/s
# Warmup Iteration   4: 166599.869 ops/s
# Warmup Iteration   5: 167995.548 ops/s
# Warmup Iteration   6: 167458.167 ops/s
# Warmup Iteration   7: 138538.531 ops/s
# Warmup Iteration   8: 164487.505 ops/s
# Warmup Iteration   9: 169148.983 ops/s
# Warmup Iteration  10: 169490.646 ops/s
# Warmup Iteration  11: 169944.161 ops/s
# Warmup Iteration  12: 170415.025 ops/s
# Warmup Iteration  13: 170149.458 ops/s
# Warmup Iteration  14: 169121.826 ops/s
# Warmup Iteration  15: 168981.598 ops/s
# Warmup Iteration  16: 169946.023 ops/s
# Warmup Iteration  17: 171688.369 ops/s
# Warmup Iteration  18: 169410.424 ops/s
# Warmup Iteration  19: 167531.037 ops/s
# Warmup Iteration  20: 170224.135 ops/s
# Warmup Iteration  21: 170986.451 ops/s
# Warmup Iteration  22: 171155.424 ops/s
# Warmup Iteration  23: 170987.430 ops/s
# Warmup Iteration  24: 171633.579 ops/s
# Warmup Iteration  25: 170512.198 ops/s
# Warmup Iteration  26: 170328.284 ops/s
# Warmup Iteration  27: 171373.310 ops/s
# Warmup Iteration  28: 171197.806 ops/s
# Warmup Iteration  29: 172484.004 ops/s
# Warmup Iteration  30: 171799.354 ops/s
Iteration   1: 170187.437 ops/s
Iteration   2: 170165.385 ops/s
Iteration   3: 170469.023 ops/s
Iteration   4: 171246.850 ops/s
Iteration   5: 170676.320 ops/s
Iteration   6: 171402.828 ops/s
Iteration   7: 171733.747 ops/s
Iteration   8: 169733.229 ops/s
Iteration   9: 172730.004 ops/s
Iteration  10: 171825.806 ops/s
Iteration  11: 169207.073 ops/s
Iteration  12: 170601.838 ops/s
Iteration  13: 172269.362 ops/s
Iteration  14: 171333.913 ops/s
Iteration  15: 173064.628 ops/s
Iteration  16: 170646.040 ops/s
Iteration  17: 171703.973 ops/s
Iteration  18: 166134.666 ops/s
Iteration  19: 166107.563 ops/s
Iteration  20: 164854.671 ops/s
Iteration  21: 172420.953 ops/s
Iteration  22: 171080.772 ops/s
Iteration  23: 171420.117 ops/s
Iteration  24: 170751.467 ops/s
Iteration  25: 170990.467 ops/s
Iteration  26: 171842.082 ops/s
Iteration  27: 170903.592 ops/s
Iteration  28: 172562.470 ops/s
Iteration  29: 172644.712 ops/s
Iteration  30: 172196.974 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_bottomOccurrences":
  170763.599 ±(99.9%) 1307.238 ops/s [Average]
  (min, avg, max) = (164854.671, 170763.599, 173064.628), stdev = 1956.612
  CI (99.9%): [169456.361, 172070.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  170763.599 ± 1307.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477775.218 ops/s
# Warmup Iteration   2: 588283.678 ops/s
# Warmup Iteration   3: 768266.474 ops/s
# Warmup Iteration   4: 779995.844 ops/s
# Warmup Iteration   5: 769423.748 ops/s
# Warmup Iteration   6: 779314.866 ops/s
# Warmup Iteration   7: 771557.778 ops/s
# Warmup Iteration   8: 774627.886 ops/s
# Warmup Iteration   9: 701934.162 ops/s
# Warmup Iteration  10: 711501.216 ops/s
# Warmup Iteration  11: 774834.790 ops/s
# Warmup Iteration  12: 777625.266 ops/s
# Warmup Iteration  13: 780538.584 ops/s
# Warmup Iteration  14: 775530.698 ops/s
# Warmup Iteration  15: 757269.307 ops/s
# Warmup Iteration  16: 770005.108 ops/s
# Warmup Iteration  17: 781545.244 ops/s
# Warmup Iteration  18: 805992.528 ops/s
# Warmup Iteration  19: 790520.622 ops/s
# Warmup Iteration  20: 799377.340 ops/s
# Warmup Iteration  21: 815354.282 ops/s
# Warmup Iteration  22: 812640.739 ops/s
# Warmup Iteration  23: 789164.207 ops/s
# Warmup Iteration  24: 801674.055 ops/s
# Warmup Iteration  25: 811933.655 ops/s
# Warmup Iteration  26: 811075.163 ops/s
# Warmup Iteration  27: 810952.429 ops/s
# Warmup Iteration  28: 814971.990 ops/s
# Warmup Iteration  29: 817365.164 ops/s
# Warmup Iteration  30: 815061.977 ops/s
Iteration   1: 808396.131 ops/s
Iteration   2: 806176.342 ops/s
Iteration   3: 818274.592 ops/s
Iteration   4: 811628.596 ops/s
Iteration   5: 804757.238 ops/s
Iteration   6: 796842.784 ops/s
Iteration   7: 802972.789 ops/s
Iteration   8: 815623.087 ops/s
Iteration   9: 815840.859 ops/s
Iteration  10: 814045.076 ops/s
Iteration  11: 812264.925 ops/s
Iteration  12: 813942.630 ops/s
Iteration  13: 816503.435 ops/s
Iteration  14: 807036.450 ops/s
Iteration  15: 812038.130 ops/s
Iteration  16: 787564.274 ops/s
Iteration  17: 787646.427 ops/s
Iteration  18: 803762.423 ops/s
Iteration  19: 794440.704 ops/s
Iteration  20: 788671.980 ops/s
Iteration  21: 775461.334 ops/s
Iteration  22: 780944.332 ops/s
Iteration  23: 794146.736 ops/s
Iteration  24: 791226.804 ops/s
Iteration  25: 813436.193 ops/s
Iteration  26: 818992.671 ops/s
Iteration  27: 801430.486 ops/s
Iteration  28: 807520.558 ops/s
Iteration  29: 802140.073 ops/s
Iteration  30: 790293.402 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_castToCollection":
  803134.049 ±(99.9%) 7928.825 ops/s [Average]
  (min, avg, max) = (775461.334, 803134.049, 818992.671), stdev = 11867.494
  CI (99.9%): [795205.223, 811062.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_castToCollection  thrpt   30  803134.049 ± 7928.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 337115.895 ops/s
# Warmup Iteration   2: 621413.576 ops/s
# Warmup Iteration   3: 700702.570 ops/s
# Warmup Iteration   4: 704253.569 ops/s
# Warmup Iteration   5: 689154.204 ops/s
# Warmup Iteration   6: 589874.730 ops/s
# Warmup Iteration   7: 708838.899 ops/s
# Warmup Iteration   8: 708504.600 ops/s
# Warmup Iteration   9: 708150.159 ops/s
# Warmup Iteration  10: 710637.585 ops/s
# Warmup Iteration  11: 710370.491 ops/s
# Warmup Iteration  12: 707930.281 ops/s
# Warmup Iteration  13: 703484.562 ops/s
# Warmup Iteration  14: 708653.161 ops/s
# Warmup Iteration  15: 710509.572 ops/s
# Warmup Iteration  16: 706786.526 ops/s
# Warmup Iteration  17: 708366.391 ops/s
# Warmup Iteration  18: 707378.643 ops/s
# Warmup Iteration  19: 708167.138 ops/s
# Warmup Iteration  20: 707817.253 ops/s
# Warmup Iteration  21: 709796.786 ops/s
# Warmup Iteration  22: 705190.138 ops/s
# Warmup Iteration  23: 707632.705 ops/s
# Warmup Iteration  24: 697088.599 ops/s
# Warmup Iteration  25: 697232.740 ops/s
# Warmup Iteration  26: 701424.892 ops/s
# Warmup Iteration  27: 708200.851 ops/s
# Warmup Iteration  28: 705022.276 ops/s
# Warmup Iteration  29: 707659.968 ops/s
# Warmup Iteration  30: 704636.760 ops/s
Iteration   1: 703272.253 ops/s
Iteration   2: 706255.938 ops/s
Iteration   3: 708568.169 ops/s
Iteration   4: 706370.670 ops/s
Iteration   5: 711725.476 ops/s
Iteration   6: 706239.899 ops/s
Iteration   7: 697443.056 ops/s
Iteration   8: 707299.194 ops/s
Iteration   9: 703277.138 ops/s
Iteration  10: 712241.590 ops/s
Iteration  11: 711173.295 ops/s
Iteration  12: 712210.238 ops/s
Iteration  13: 707169.165 ops/s
Iteration  14: 708411.722 ops/s
Iteration  15: 684553.083 ops/s
Iteration  16: 709298.505 ops/s
Iteration  17: 706712.406 ops/s
Iteration  18: 707119.252 ops/s
Iteration  19: 704657.415 ops/s
Iteration  20: 707556.611 ops/s
Iteration  21: 684574.082 ops/s
Iteration  22: 709568.106 ops/s
Iteration  23: 706581.700 ops/s
Iteration  24: 709967.429 ops/s
Iteration  25: 712389.450 ops/s
Iteration  26: 694766.673 ops/s
Iteration  27: 704929.782 ops/s
Iteration  28: 692403.205 ops/s
Iteration  29: 711215.037 ops/s
Iteration  30: 711824.215 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_large_size":
  705325.825 ±(99.9%) 4972.072 ops/s [Average]
  (min, avg, max) = (684553.083, 705325.825, 712389.450), stdev = 7441.963
  CI (99.9%): [700353.754, 710297.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_large_size  thrpt   30  705325.825 ± 4972.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469157.720 ops/s
# Warmup Iteration   2: 563715.490 ops/s
# Warmup Iteration   3: 774960.579 ops/s
# Warmup Iteration   4: 756151.243 ops/s
# Warmup Iteration   5: 750828.129 ops/s
# Warmup Iteration   6: 773886.999 ops/s
# Warmup Iteration   7: 779252.562 ops/s
# Warmup Iteration   8: 776543.912 ops/s
# Warmup Iteration   9: 770389.044 ops/s
# Warmup Iteration  10: 649511.478 ops/s
# Warmup Iteration  11: 775565.376 ops/s
# Warmup Iteration  12: 776232.695 ops/s
# Warmup Iteration  13: 772807.921 ops/s
# Warmup Iteration  14: 773130.490 ops/s
# Warmup Iteration  15: 769288.642 ops/s
# Warmup Iteration  16: 777410.128 ops/s
# Warmup Iteration  17: 815751.682 ops/s
# Warmup Iteration  18: 810541.402 ops/s
# Warmup Iteration  19: 806144.684 ops/s
# Warmup Iteration  20: 811488.964 ops/s
# Warmup Iteration  21: 809962.282 ops/s
# Warmup Iteration  22: 807947.763 ops/s
# Warmup Iteration  23: 810832.543 ops/s
# Warmup Iteration  24: 808526.823 ops/s
# Warmup Iteration  25: 812662.810 ops/s
# Warmup Iteration  26: 811980.019 ops/s
# Warmup Iteration  27: 806708.497 ops/s
# Warmup Iteration  28: 815774.205 ops/s
# Warmup Iteration  29: 809900.171 ops/s
# Warmup Iteration  30: 812179.752 ops/s
Iteration   1: 814950.305 ops/s
Iteration   2: 797055.345 ops/s
Iteration   3: 777763.987 ops/s
Iteration   4: 788259.322 ops/s
Iteration   5: 813976.290 ops/s
Iteration   6: 814135.006 ops/s
Iteration   7: 805469.552 ops/s
Iteration   8: 816072.883 ops/s
Iteration   9: 790001.156 ops/s
Iteration  10: 788986.139 ops/s
Iteration  11: 776501.364 ops/s
Iteration  12: 800120.203 ops/s
Iteration  13: 808505.938 ops/s
Iteration  14: 812854.367 ops/s
Iteration  15: 808226.164 ops/s
Iteration  16: 815009.419 ops/s
Iteration  17: 815736.682 ops/s
Iteration  18: 809098.149 ops/s
Iteration  19: 813713.483 ops/s
Iteration  20: 808808.575 ops/s
Iteration  21: 811428.757 ops/s
Iteration  22: 769561.397 ops/s
Iteration  23: 784890.844 ops/s
Iteration  24: 802958.976 ops/s
Iteration  25: 807182.304 ops/s
Iteration  26: 817058.508 ops/s
Iteration  27: 803492.994 ops/s
Iteration  28: 817284.981 ops/s
Iteration  29: 812110.661 ops/s
Iteration  30: 805512.313 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_zero_throws":
  803557.535 ±(99.9%) 8940.493 ops/s [Average]
  (min, avg, max) = (769561.397, 803557.535, 817284.981), stdev = 13381.710
  CI (99.9%): [794617.043, 812498.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  803557.535 ± 8940.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 464158.070 ops/s
# Warmup Iteration   2: 563754.207 ops/s
# Warmup Iteration   3: 744767.255 ops/s
# Warmup Iteration   4: 750334.914 ops/s
# Warmup Iteration   5: 752446.795 ops/s
# Warmup Iteration   6: 747860.729 ops/s
# Warmup Iteration   7: 749546.186 ops/s
# Warmup Iteration   8: 746078.930 ops/s
# Warmup Iteration   9: 725117.382 ops/s
# Warmup Iteration  10: 644577.131 ops/s
# Warmup Iteration  11: 753994.751 ops/s
# Warmup Iteration  12: 731182.688 ops/s
# Warmup Iteration  13: 747582.663 ops/s
# Warmup Iteration  14: 749029.527 ops/s
# Warmup Iteration  15: 751789.935 ops/s
# Warmup Iteration  16: 753543.407 ops/s
# Warmup Iteration  17: 784114.747 ops/s
# Warmup Iteration  18: 784375.602 ops/s
# Warmup Iteration  19: 779449.460 ops/s
# Warmup Iteration  20: 788036.206 ops/s
# Warmup Iteration  21: 789908.868 ops/s
# Warmup Iteration  22: 787887.761 ops/s
# Warmup Iteration  23: 783587.312 ops/s
# Warmup Iteration  24: 784513.126 ops/s
# Warmup Iteration  25: 783171.675 ops/s
# Warmup Iteration  26: 784305.361 ops/s
# Warmup Iteration  27: 782557.140 ops/s
# Warmup Iteration  28: 788576.329 ops/s
# Warmup Iteration  29: 782034.982 ops/s
# Warmup Iteration  30: 786072.845 ops/s
Iteration   1: 782450.649 ops/s
Iteration   2: 786538.412 ops/s
Iteration   3: 793250.346 ops/s
Iteration   4: 749256.206 ops/s
Iteration   5: 779728.307 ops/s
Iteration   6: 791916.221 ops/s
Iteration   7: 788302.426 ops/s
Iteration   8: 789130.018 ops/s
Iteration   9: 790328.133 ops/s
Iteration  10: 788481.525 ops/s
Iteration  11: 783564.331 ops/s
Iteration  12: 784833.481 ops/s
Iteration  13: 782671.967 ops/s
Iteration  14: 778448.898 ops/s
Iteration  15: 784287.951 ops/s
Iteration  16: 785533.023 ops/s
Iteration  17: 779682.345 ops/s
Iteration  18: 780898.421 ops/s
Iteration  19: 781828.803 ops/s
Iteration  20: 785372.423 ops/s
Iteration  21: 786029.735 ops/s
Iteration  22: 787380.954 ops/s
Iteration  23: 777627.454 ops/s
Iteration  24: 784661.471 ops/s
Iteration  25: 781677.587 ops/s
Iteration  26: 791001.743 ops/s
Iteration  27: 786771.338 ops/s
Iteration  28: 791823.941 ops/s
Iteration  29: 789441.180 ops/s
Iteration  30: 752217.246 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_clear":
  783171.218 ±(99.9%) 6514.587 ops/s [Average]
  (min, avg, max) = (749256.206, 783171.218, 793250.346), stdev = 9750.728
  CI (99.9%): [776656.631, 789685.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_clear  thrpt   30  783171.218 ± 6514.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1106502.965 ops/s
# Warmup Iteration   2: 2059704.416 ops/s
# Warmup Iteration   3: 2398756.608 ops/s
# Warmup Iteration   4: 2387844.836 ops/s
# Warmup Iteration   5: 2383276.614 ops/s
# Warmup Iteration   6: 2011063.630 ops/s
# Warmup Iteration   7: 2401480.053 ops/s
# Warmup Iteration   8: 2392804.856 ops/s
# Warmup Iteration   9: 2408009.903 ops/s
# Warmup Iteration  10: 2404862.833 ops/s
# Warmup Iteration  11: 2404122.640 ops/s
# Warmup Iteration  12: 2382887.804 ops/s
# Warmup Iteration  13: 2422877.926 ops/s
# Warmup Iteration  14: 2366931.040 ops/s
# Warmup Iteration  15: 2339353.485 ops/s
# Warmup Iteration  16: 2350343.397 ops/s
# Warmup Iteration  17: 2414289.882 ops/s
# Warmup Iteration  18: 2405502.743 ops/s
# Warmup Iteration  19: 2402192.603 ops/s
# Warmup Iteration  20: 2409351.049 ops/s
# Warmup Iteration  21: 2407319.324 ops/s
# Warmup Iteration  22: 2409691.322 ops/s
# Warmup Iteration  23: 2411285.362 ops/s
# Warmup Iteration  24: 2399616.646 ops/s
# Warmup Iteration  25: 2418167.927 ops/s
# Warmup Iteration  26: 2377431.881 ops/s
# Warmup Iteration  27: 2405021.880 ops/s
# Warmup Iteration  28: 2366999.911 ops/s
# Warmup Iteration  29: 2347894.426 ops/s
# Warmup Iteration  30: 2336512.390 ops/s
Iteration   1: 2333125.831 ops/s
Iteration   2: 2415682.016 ops/s
Iteration   3: 2347807.461 ops/s
Iteration   4: 2419408.346 ops/s
Iteration   5: 2385499.045 ops/s
Iteration   6: 2359468.887 ops/s
Iteration   7: 2306657.756 ops/s
Iteration   8: 2331099.512 ops/s
Iteration   9: 2303248.166 ops/s
Iteration  10: 2347511.268 ops/s
Iteration  11: 2379729.590 ops/s
Iteration  12: 2383539.781 ops/s
Iteration  13: 2391346.671 ops/s
Iteration  14: 2345098.939 ops/s
Iteration  15: 2344747.438 ops/s
Iteration  16: 2384528.097 ops/s
Iteration  17: 2402475.086 ops/s
Iteration  18: 2415461.828 ops/s
Iteration  19: 2416613.472 ops/s
Iteration  20: 2414994.866 ops/s
Iteration  21: 2422272.329 ops/s
Iteration  22: 2415890.644 ops/s
Iteration  23: 2354275.523 ops/s
Iteration  24: 2339406.007 ops/s
Iteration  25: 2421497.504 ops/s
Iteration  26: 2389437.354 ops/s
Iteration  27: 2323121.614 ops/s
Iteration  28: 2417200.290 ops/s
Iteration  29: 2372752.683 ops/s
Iteration  30: 2367166.811 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect":
  2375035.494 ±(99.9%) 24648.602 ops/s [Average]
  (min, avg, max) = (2303248.166, 2375035.494, 2422272.329), stdev = 36892.871
  CI (99.9%): [2350386.891, 2399684.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collect  thrpt   30  2375035.494 ± 24648.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1020115.236 ops/s
# Warmup Iteration   2: 1884174.637 ops/s
# Warmup Iteration   3: 2124838.257 ops/s
# Warmup Iteration   4: 2137572.935 ops/s
# Warmup Iteration   5: 2036993.596 ops/s
# Warmup Iteration   6: 1879626.775 ops/s
# Warmup Iteration   7: 2140156.677 ops/s
# Warmup Iteration   8: 2147407.994 ops/s
# Warmup Iteration   9: 2146297.701 ops/s
# Warmup Iteration  10: 2132789.150 ops/s
# Warmup Iteration  11: 2158412.734 ops/s
# Warmup Iteration  12: 2153822.798 ops/s
# Warmup Iteration  13: 2134466.107 ops/s
# Warmup Iteration  14: 2052472.630 ops/s
# Warmup Iteration  15: 2141023.729 ops/s
# Warmup Iteration  16: 2093485.423 ops/s
# Warmup Iteration  17: 2147317.010 ops/s
# Warmup Iteration  18: 2153994.327 ops/s
# Warmup Iteration  19: 2136921.656 ops/s
# Warmup Iteration  20: 2159198.752 ops/s
# Warmup Iteration  21: 2143248.043 ops/s
# Warmup Iteration  22: 2141843.840 ops/s
# Warmup Iteration  23: 2155312.991 ops/s
# Warmup Iteration  24: 2117543.201 ops/s
# Warmup Iteration  25: 2139604.198 ops/s
# Warmup Iteration  26: 2146642.007 ops/s
# Warmup Iteration  27: 2110266.551 ops/s
# Warmup Iteration  28: 2143653.840 ops/s
# Warmup Iteration  29: 2142163.699 ops/s
# Warmup Iteration  30: 2153628.940 ops/s
Iteration   1: 2154051.318 ops/s
Iteration   2: 2152749.585 ops/s
Iteration   3: 2127717.270 ops/s
Iteration   4: 2129457.860 ops/s
Iteration   5: 2152895.669 ops/s
Iteration   6: 2152170.023 ops/s
Iteration   7: 2162671.047 ops/s
Iteration   8: 2156893.630 ops/s
Iteration   9: 2091188.716 ops/s
Iteration  10: 2058453.517 ops/s
Iteration  11: 2134161.604 ops/s
Iteration  12: 2079392.566 ops/s
Iteration  13: 2010255.309 ops/s
Iteration  14: 2153109.655 ops/s
Iteration  15: 2135989.220 ops/s
Iteration  16: 2158364.952 ops/s
Iteration  17: 2140854.213 ops/s
Iteration  18: 2129340.014 ops/s
Iteration  19: 2164410.236 ops/s
Iteration  20: 2127896.520 ops/s
Iteration  21: 2147906.858 ops/s
Iteration  22: 2149314.113 ops/s
Iteration  23: 2130524.830 ops/s
Iteration  24: 2165241.925 ops/s
Iteration  25: 2118102.230 ops/s
Iteration  26: 2149958.656 ops/s
Iteration  27: 2159526.873 ops/s
Iteration  28: 2106238.499 ops/s
Iteration  29: 2150188.557 ops/s
Iteration  30: 2085314.894 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean":
  2131144.679 ±(99.9%) 23673.076 ops/s [Average]
  (min, avg, max) = (2010255.309, 2131144.679, 2165241.925), stdev = 35432.749
  CI (99.9%): [2107471.602, 2154817.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean  thrpt   30  2131144.679 ± 23673.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715005.554 ops/s
# Warmup Iteration   2: 1268425.848 ops/s
# Warmup Iteration   3: 1453253.880 ops/s
# Warmup Iteration   4: 1422685.099 ops/s
# Warmup Iteration   5: 1454062.316 ops/s
# Warmup Iteration   6: 1175031.154 ops/s
# Warmup Iteration   7: 1448432.926 ops/s
# Warmup Iteration   8: 1426462.188 ops/s
# Warmup Iteration   9: 1461000.909 ops/s
# Warmup Iteration  10: 1466503.837 ops/s
# Warmup Iteration  11: 1471175.424 ops/s
# Warmup Iteration  12: 1470289.748 ops/s
# Warmup Iteration  13: 1478879.692 ops/s
# Warmup Iteration  14: 1473655.307 ops/s
# Warmup Iteration  15: 1474209.163 ops/s
# Warmup Iteration  16: 1466914.540 ops/s
# Warmup Iteration  17: 1474865.242 ops/s
# Warmup Iteration  18: 1471821.647 ops/s
# Warmup Iteration  19: 1473689.768 ops/s
# Warmup Iteration  20: 1463478.744 ops/s
# Warmup Iteration  21: 1457884.909 ops/s
# Warmup Iteration  22: 1467033.886 ops/s
# Warmup Iteration  23: 1467854.407 ops/s
# Warmup Iteration  24: 1477540.548 ops/s
# Warmup Iteration  25: 1448292.665 ops/s
# Warmup Iteration  26: 1437028.862 ops/s
# Warmup Iteration  27: 1449203.028 ops/s
# Warmup Iteration  28: 1474715.104 ops/s
# Warmup Iteration  29: 1459034.677 ops/s
# Warmup Iteration  30: 1465269.913 ops/s
Iteration   1: 1438038.063 ops/s
Iteration   2: 1483111.104 ops/s
Iteration   3: 1461886.331 ops/s
Iteration   4: 1472410.188 ops/s
Iteration   5: 1460150.118 ops/s
Iteration   6: 1479016.942 ops/s
Iteration   7: 1474274.313 ops/s
Iteration   8: 1482555.063 ops/s
Iteration   9: 1468290.235 ops/s
Iteration  10: 1452026.953 ops/s
Iteration  11: 1440395.521 ops/s
Iteration  12: 1467005.739 ops/s
Iteration  13: 1470846.501 ops/s
Iteration  14: 1460316.735 ops/s
Iteration  15: 1454437.071 ops/s
Iteration  16: 1424232.014 ops/s
Iteration  17: 1463069.622 ops/s
Iteration  18: 1478350.972 ops/s
Iteration  19: 1474398.383 ops/s
Iteration  20: 1447533.148 ops/s
Iteration  21: 1475193.439 ops/s
Iteration  22: 1478603.245 ops/s
Iteration  23: 1469841.007 ops/s
Iteration  24: 1473280.440 ops/s
Iteration  25: 1436452.490 ops/s
Iteration  26: 1442256.695 ops/s
Iteration  27: 1402945.511 ops/s
Iteration  28: 1475854.142 ops/s
Iteration  29: 1479117.431 ops/s
Iteration  30: 1476739.028 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean_target":
  1462087.615 ±(99.9%) 12828.505 ops/s [Average]
  (min, avg, max) = (1402945.511, 1462087.615, 1483111.104), stdev = 19201.103
  CI (99.9%): [1449259.110, 1474916.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectBoolean_target  thrpt   30  1462087.615 ± 12828.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1199673.092 ops/s
# Warmup Iteration   2: 2030096.776 ops/s
# Warmup Iteration   3: 2290422.459 ops/s
# Warmup Iteration   4: 2378605.579 ops/s
# Warmup Iteration   5: 2376446.062 ops/s
# Warmup Iteration   6: 1976936.138 ops/s
# Warmup Iteration   7: 2351779.704 ops/s
# Warmup Iteration   8: 2378813.012 ops/s
# Warmup Iteration   9: 2386938.811 ops/s
# Warmup Iteration  10: 2372634.664 ops/s
# Warmup Iteration  11: 2386329.527 ops/s
# Warmup Iteration  12: 2357813.161 ops/s
# Warmup Iteration  13: 2361783.576 ops/s
# Warmup Iteration  14: 2370571.980 ops/s
# Warmup Iteration  15: 2340985.448 ops/s
# Warmup Iteration  16: 2322907.114 ops/s
# Warmup Iteration  17: 2347812.785 ops/s
# Warmup Iteration  18: 2306619.218 ops/s
# Warmup Iteration  19: 2339201.145 ops/s
# Warmup Iteration  20: 2371804.489 ops/s
# Warmup Iteration  21: 2343387.501 ops/s
# Warmup Iteration  22: 2359264.257 ops/s
# Warmup Iteration  23: 2358817.448 ops/s
# Warmup Iteration  24: 2388265.332 ops/s
# Warmup Iteration  25: 2368055.842 ops/s
# Warmup Iteration  26: 2363491.000 ops/s
# Warmup Iteration  27: 2382745.158 ops/s
# Warmup Iteration  28: 2380754.984 ops/s
# Warmup Iteration  29: 2383538.490 ops/s
# Warmup Iteration  30: 2387616.639 ops/s
Iteration   1: 2379684.820 ops/s
Iteration   2: 2285513.033 ops/s
Iteration   3: 2344195.355 ops/s
Iteration   4: 2389257.269 ops/s
Iteration   5: 2396747.725 ops/s
Iteration   6: 2375509.105 ops/s
Iteration   7: 2307207.085 ops/s
Iteration   8: 2319478.585 ops/s
Iteration   9: 2389729.167 ops/s
Iteration  10: 2380264.962 ops/s
Iteration  11: 2368400.572 ops/s
Iteration  12: 2362126.787 ops/s
Iteration  13: 2386746.116 ops/s
Iteration  14: 2374426.153 ops/s
Iteration  15: 2369247.862 ops/s
Iteration  16: 2379527.115 ops/s
Iteration  17: 2392073.402 ops/s
Iteration  18: 2378015.196 ops/s
Iteration  19: 2362109.035 ops/s
Iteration  20: 2381017.403 ops/s
Iteration  21: 2374606.807 ops/s
Iteration  22: 2383100.312 ops/s
Iteration  23: 2382322.081 ops/s
Iteration  24: 2362179.304 ops/s
Iteration  25: 2347522.996 ops/s
Iteration  26: 2328542.602 ops/s
Iteration  27: 2341221.502 ops/s
Iteration  28: 2386183.006 ops/s
Iteration  29: 2392717.157 ops/s
Iteration  30: 2352540.457 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte":
  2365740.432 ±(99.9%) 18060.711 ops/s [Average]
  (min, avg, max) = (2285513.033, 2365740.432, 2396747.725), stdev = 27032.425
  CI (99.9%): [2347679.721, 2383801.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte  thrpt   30  2365740.432 ± 18060.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518280.090 ops/s
# Warmup Iteration   2: 1051062.096 ops/s
# Warmup Iteration   3: 1123812.213 ops/s
# Warmup Iteration   4: 1153135.848 ops/s
# Warmup Iteration   5: 977841.390 ops/s
# Warmup Iteration   6: 1167299.726 ops/s
# Warmup Iteration   7: 1136244.738 ops/s
# Warmup Iteration   8: 1139837.750 ops/s
# Warmup Iteration   9: 1147474.672 ops/s
# Warmup Iteration  10: 1164389.302 ops/s
# Warmup Iteration  11: 1169474.922 ops/s
# Warmup Iteration  12: 1170744.361 ops/s
# Warmup Iteration  13: 1147121.498 ops/s
# Warmup Iteration  14: 1148481.156 ops/s
# Warmup Iteration  15: 1168511.614 ops/s
# Warmup Iteration  16: 1167100.220 ops/s
# Warmup Iteration  17: 1166561.543 ops/s
# Warmup Iteration  18: 1126436.368 ops/s
# Warmup Iteration  19: 1161385.812 ops/s
# Warmup Iteration  20: 1130203.553 ops/s
# Warmup Iteration  21: 1120815.335 ops/s
# Warmup Iteration  22: 1167770.762 ops/s
# Warmup Iteration  23: 1171817.426 ops/s
# Warmup Iteration  24: 1145007.796 ops/s
# Warmup Iteration  25: 1165903.628 ops/s
# Warmup Iteration  26: 1169077.739 ops/s
# Warmup Iteration  27: 1157642.586 ops/s
# Warmup Iteration  28: 1160360.506 ops/s
# Warmup Iteration  29: 1166671.024 ops/s
# Warmup Iteration  30: 1159199.713 ops/s
Iteration   1: 1170855.275 ops/s
Iteration   2: 1147648.291 ops/s
Iteration   3: 1155827.843 ops/s
Iteration   4: 1162437.881 ops/s
Iteration   5: 1139393.412 ops/s
Iteration   6: 1156505.977 ops/s
Iteration   7: 1165550.400 ops/s
Iteration   8: 1171535.116 ops/s
Iteration   9: 1169508.912 ops/s
Iteration  10: 1168324.262 ops/s
Iteration  11: 1173634.333 ops/s
Iteration  12: 1170058.046 ops/s
Iteration  13: 1143427.077 ops/s
Iteration  14: 1166636.832 ops/s
Iteration  15: 1134777.066 ops/s
Iteration  16: 1162483.320 ops/s
Iteration  17: 1169151.506 ops/s
Iteration  18: 1159412.871 ops/s
Iteration  19: 1169967.101 ops/s
Iteration  20: 1170873.373 ops/s
Iteration  21: 1170054.892 ops/s
Iteration  22: 1172344.034 ops/s
Iteration  23: 1151700.102 ops/s
Iteration  24: 1126038.260 ops/s
Iteration  25: 1169656.200 ops/s
Iteration  26: 1175210.361 ops/s
Iteration  27: 1164623.508 ops/s
Iteration  28: 1157995.799 ops/s
Iteration  29: 1157589.206 ops/s
Iteration  30: 1168786.552 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte_target":
  1161400.260 ±(99.9%) 8279.841 ops/s [Average]
  (min, avg, max) = (1126038.260, 1161400.260, 1175210.361), stdev = 12392.877
  CI (99.9%): [1153120.419, 1169680.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectByte_target  thrpt   30  1161400.260 ± 8279.841  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1181642.614 ops/s
# Warmup Iteration   2: 2012395.862 ops/s
# Warmup Iteration   3: 2309113.625 ops/s
# Warmup Iteration   4: 2312889.264 ops/s
# Warmup Iteration   5: 2341440.946 ops/s
# Warmup Iteration   6: 1934143.436 ops/s
# Warmup Iteration   7: 2318016.207 ops/s
# Warmup Iteration   8: 2352911.472 ops/s
# Warmup Iteration   9: 2332203.892 ops/s
# Warmup Iteration  10: 2336933.027 ops/s
# Warmup Iteration  11: 2345933.782 ops/s
# Warmup Iteration  12: 2348215.825 ops/s
# Warmup Iteration  13: 2273858.864 ops/s
# Warmup Iteration  14: 2264850.377 ops/s
# Warmup Iteration  15: 2252755.923 ops/s
# Warmup Iteration  16: 2263732.945 ops/s
# Warmup Iteration  17: 2344249.703 ops/s
# Warmup Iteration  18: 2342446.219 ops/s
# Warmup Iteration  19: 2345147.798 ops/s
# Warmup Iteration  20: 2338512.098 ops/s
# Warmup Iteration  21: 2336703.199 ops/s
# Warmup Iteration  22: 2341401.514 ops/s
# Warmup Iteration  23: 2323988.729 ops/s
# Warmup Iteration  24: 2331609.453 ops/s
# Warmup Iteration  25: 2342807.532 ops/s
# Warmup Iteration  26: 2349969.587 ops/s
# Warmup Iteration  27: 2255577.582 ops/s
# Warmup Iteration  28: 2305920.794 ops/s
# Warmup Iteration  29: 2337903.985 ops/s
# Warmup Iteration  30: 2350699.664 ops/s
Iteration   1: 2343768.873 ops/s
Iteration   2: 2353945.021 ops/s
Iteration   3: 2340129.144 ops/s
Iteration   4: 2352793.543 ops/s
Iteration   5: 2352842.514 ops/s
Iteration   6: 2318608.347 ops/s
Iteration   7: 2340126.640 ops/s
Iteration   8: 2345502.537 ops/s
Iteration   9: 2344996.559 ops/s
Iteration  10: 2343765.268 ops/s
Iteration  11: 2337700.716 ops/s
Iteration  12: 2356510.232 ops/s
Iteration  13: 2338722.000 ops/s
Iteration  14: 2336718.075 ops/s
Iteration  15: 2348029.687 ops/s
Iteration  16: 2317671.649 ops/s
Iteration  17: 2324329.159 ops/s
Iteration  18: 2335303.117 ops/s
Iteration  19: 2353630.516 ops/s
Iteration  20: 2341089.117 ops/s
Iteration  21: 2362004.913 ops/s
Iteration  22: 2346734.088 ops/s
Iteration  23: 2325416.218 ops/s
Iteration  24: 2347564.817 ops/s
Iteration  25: 2286271.432 ops/s
Iteration  26: 2340116.794 ops/s
Iteration  27: 2324833.812 ops/s
Iteration  28: 2347557.811 ops/s
Iteration  29: 2338323.472 ops/s
Iteration  30: 2319739.300 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar":
  2338824.846 ±(99.9%) 10168.458 ops/s [Average]
  (min, avg, max) = (2286271.432, 2338824.846, 2362004.913), stdev = 15219.671
  CI (99.9%): [2328656.387, 2348993.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar  thrpt   30  2338824.846 ± 10168.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503767.443 ops/s
# Warmup Iteration   2: 1063357.551 ops/s
# Warmup Iteration   3: 1167234.897 ops/s
# Warmup Iteration   4: 1189868.808 ops/s
# Warmup Iteration   5: 995231.294 ops/s
# Warmup Iteration   6: 1195264.125 ops/s
# Warmup Iteration   7: 1196617.279 ops/s
# Warmup Iteration   8: 1187694.525 ops/s
# Warmup Iteration   9: 1179489.588 ops/s
# Warmup Iteration  10: 1156902.139 ops/s
# Warmup Iteration  11: 1186163.072 ops/s
# Warmup Iteration  12: 1183043.399 ops/s
# Warmup Iteration  13: 1146859.124 ops/s
# Warmup Iteration  14: 1181364.388 ops/s
# Warmup Iteration  15: 1141019.837 ops/s
# Warmup Iteration  16: 1194753.791 ops/s
# Warmup Iteration  17: 1189000.368 ops/s
# Warmup Iteration  18: 1178380.967 ops/s
# Warmup Iteration  19: 1188861.994 ops/s
# Warmup Iteration  20: 1174463.614 ops/s
# Warmup Iteration  21: 1172777.569 ops/s
# Warmup Iteration  22: 1183909.633 ops/s
# Warmup Iteration  23: 1190911.699 ops/s
# Warmup Iteration  24: 1182588.684 ops/s
# Warmup Iteration  25: 1189027.675 ops/s
# Warmup Iteration  26: 1176144.093 ops/s
# Warmup Iteration  27: 1186983.198 ops/s
# Warmup Iteration  28: 1179535.279 ops/s
# Warmup Iteration  29: 1187782.925 ops/s
# Warmup Iteration  30: 1179712.047 ops/s
Iteration   1: 1182635.228 ops/s
Iteration   2: 1159195.320 ops/s
Iteration   3: 1190679.272 ops/s
Iteration   4: 1169513.866 ops/s
Iteration   5: 1174412.033 ops/s
Iteration   6: 1151104.498 ops/s
Iteration   7: 1158519.246 ops/s
Iteration   8: 1190191.928 ops/s
Iteration   9: 1153877.209 ops/s
Iteration  10: 1169454.536 ops/s
Iteration  11: 1192200.489 ops/s
Iteration  12: 1158472.255 ops/s
Iteration  13: 1153555.562 ops/s
Iteration  14: 1171767.819 ops/s
Iteration  15: 1187752.625 ops/s
Iteration  16: 1189290.371 ops/s
Iteration  17: 1189310.875 ops/s
Iteration  18: 1189663.207 ops/s
Iteration  19: 1184819.354 ops/s
Iteration  20: 1186351.804 ops/s
Iteration  21: 1181890.695 ops/s
Iteration  22: 1166049.205 ops/s
Iteration  23: 1140508.158 ops/s
Iteration  24: 1171007.328 ops/s
Iteration  25: 1143451.584 ops/s
Iteration  26: 1179827.068 ops/s
Iteration  27: 1189422.764 ops/s
Iteration  28: 1188868.967 ops/s
Iteration  29: 1183005.332 ops/s
Iteration  30: 1185748.831 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar_target":
  1174418.248 ±(99.9%) 10459.559 ops/s [Average]
  (min, avg, max) = (1140508.158, 1174418.248, 1192200.489), stdev = 15655.376
  CI (99.9%): [1163958.689, 1184877.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectChar_target  thrpt   30  1174418.248 ± 10459.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1117537.106 ops/s
# Warmup Iteration   2: 1958476.120 ops/s
# Warmup Iteration   3: 2309339.420 ops/s
# Warmup Iteration   4: 2335145.751 ops/s
# Warmup Iteration   5: 2341379.511 ops/s
# Warmup Iteration   6: 1928113.096 ops/s
# Warmup Iteration   7: 2337708.007 ops/s
# Warmup Iteration   8: 2331210.364 ops/s
# Warmup Iteration   9: 2298644.528 ops/s
# Warmup Iteration  10: 2265099.102 ops/s
# Warmup Iteration  11: 2283325.456 ops/s
# Warmup Iteration  12: 2275084.263 ops/s
# Warmup Iteration  13: 2245574.520 ops/s
# Warmup Iteration  14: 2265452.550 ops/s
# Warmup Iteration  15: 2254635.160 ops/s
# Warmup Iteration  16: 2304706.172 ops/s
# Warmup Iteration  17: 2310788.090 ops/s
# Warmup Iteration  18: 2287762.026 ops/s
# Warmup Iteration  19: 2303427.889 ops/s
# Warmup Iteration  20: 2239931.402 ops/s
# Warmup Iteration  21: 2292877.348 ops/s
# Warmup Iteration  22: 2281742.899 ops/s
# Warmup Iteration  23: 2321720.215 ops/s
# Warmup Iteration  24: 2339698.211 ops/s
# Warmup Iteration  25: 2269150.499 ops/s
# Warmup Iteration  26: 2325753.669 ops/s
# Warmup Iteration  27: 2340672.415 ops/s
# Warmup Iteration  28: 2311721.309 ops/s
# Warmup Iteration  29: 2270101.533 ops/s
# Warmup Iteration  30: 2335990.947 ops/s
Iteration   1: 2335420.230 ops/s
Iteration   2: 2333267.828 ops/s
Iteration   3: 2316963.675 ops/s
Iteration   4: 2317476.505 ops/s
Iteration   5: 2340769.720 ops/s
Iteration   6: 2319919.430 ops/s
Iteration   7: 2334806.371 ops/s
Iteration   8: 2308799.777 ops/s
Iteration   9: 2334959.762 ops/s
Iteration  10: 2340394.379 ops/s
Iteration  11: 2284173.204 ops/s
Iteration  12: 2333641.701 ops/s
Iteration  13: 2304488.007 ops/s
Iteration  14: 2342882.708 ops/s
Iteration  15: 2317051.393 ops/s
Iteration  16: 2277187.317 ops/s
Iteration  17: 2295725.783 ops/s
Iteration  18: 2335276.005 ops/s
Iteration  19: 2338296.835 ops/s
Iteration  20: 2255052.104 ops/s
Iteration  21: 2268209.513 ops/s
Iteration  22: 2330035.809 ops/s
Iteration  23: 2303280.903 ops/s
Iteration  24: 2319348.717 ops/s
Iteration  25: 2318126.617 ops/s
Iteration  26: 2317903.262 ops/s
Iteration  27: 2313009.808 ops/s
Iteration  28: 2303218.313 ops/s
Iteration  29: 2333588.392 ops/s
Iteration  30: 2322032.725 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble":
  2316510.226 ±(99.9%) 14950.296 ops/s [Average]
  (min, avg, max) = (2255052.104, 2316510.226, 2342882.708), stdev = 22376.900
  CI (99.9%): [2301559.931, 2331460.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble  thrpt   30  2316510.226 ± 14950.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 464466.720 ops/s
# Warmup Iteration   2: 983579.145 ops/s
# Warmup Iteration   3: 1054514.549 ops/s
# Warmup Iteration   4: 1065383.266 ops/s
# Warmup Iteration   5: 848286.628 ops/s
# Warmup Iteration   6: 1036250.111 ops/s
# Warmup Iteration   7: 1035396.781 ops/s
# Warmup Iteration   8: 1058632.339 ops/s
# Warmup Iteration   9: 1064516.066 ops/s
# Warmup Iteration  10: 1027786.351 ops/s
# Warmup Iteration  11: 1055279.544 ops/s
# Warmup Iteration  12: 1045050.922 ops/s
# Warmup Iteration  13: 1028799.817 ops/s
# Warmup Iteration  14: 1058597.716 ops/s
# Warmup Iteration  15: 1060039.828 ops/s
# Warmup Iteration  16: 1035209.332 ops/s
# Warmup Iteration  17: 1050454.077 ops/s
# Warmup Iteration  18: 1043383.093 ops/s
# Warmup Iteration  19: 1061011.568 ops/s
# Warmup Iteration  20: 1059754.641 ops/s
# Warmup Iteration  21: 1060170.028 ops/s
# Warmup Iteration  22: 1032291.191 ops/s
# Warmup Iteration  23: 1015949.177 ops/s
# Warmup Iteration  24: 1036447.975 ops/s
# Warmup Iteration  25: 1036540.279 ops/s
# Warmup Iteration  26: 1019884.718 ops/s
# Warmup Iteration  27: 1053123.569 ops/s
# Warmup Iteration  28: 1048625.740 ops/s
# Warmup Iteration  29: 1042601.927 ops/s
# Warmup Iteration  30: 1049362.791 ops/s
Iteration   1: 1060501.445 ops/s
Iteration   2: 1066566.011 ops/s
Iteration   3: 1062933.038 ops/s
Iteration   4: 1062364.308 ops/s
Iteration   5: 1058844.972 ops/s
Iteration   6: 1055488.933 ops/s
Iteration   7: 1046637.723 ops/s
Iteration   8: 1057575.871 ops/s
Iteration   9: 1035861.902 ops/s
Iteration  10: 1066197.351 ops/s
Iteration  11: 1063009.155 ops/s
Iteration  12: 1065926.830 ops/s
Iteration  13: 1060144.010 ops/s
Iteration  14: 1056430.220 ops/s
Iteration  15: 1052473.191 ops/s
Iteration  16: 1056610.847 ops/s
Iteration  17: 1045969.298 ops/s
Iteration  18: 1048461.393 ops/s
Iteration  19: 1059653.721 ops/s
Iteration  20: 1060582.963 ops/s
Iteration  21: 1049788.268 ops/s
Iteration  22: 1061939.400 ops/s
Iteration  23: 1060473.903 ops/s
Iteration  24: 1056439.535 ops/s
Iteration  25: 1059979.841 ops/s
Iteration  26: 1044649.754 ops/s
Iteration  27: 1060333.310 ops/s
Iteration  28: 1063659.166 ops/s
Iteration  29: 1060474.375 ops/s
Iteration  30: 1054677.164 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble_target":
  1057154.930 ±(99.9%) 4798.729 ops/s [Average]
  (min, avg, max) = (1035861.902, 1057154.930, 1066566.011), stdev = 7182.512
  CI (99.9%): [1052356.201, 1061953.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectDouble_target  thrpt   30  1057154.930 ± 4798.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1227304.937 ops/s
# Warmup Iteration   2: 2139774.151 ops/s
# Warmup Iteration   3: 2473688.657 ops/s
# Warmup Iteration   4: 2480297.613 ops/s
# Warmup Iteration   5: 2427745.047 ops/s
# Warmup Iteration   6: 2052278.479 ops/s
# Warmup Iteration   7: 2445272.823 ops/s
# Warmup Iteration   8: 2476461.202 ops/s
# Warmup Iteration   9: 2478223.165 ops/s
# Warmup Iteration  10: 2418288.133 ops/s
# Warmup Iteration  11: 2484402.141 ops/s
# Warmup Iteration  12: 2493716.850 ops/s
# Warmup Iteration  13: 2472982.425 ops/s
# Warmup Iteration  14: 2445470.511 ops/s
# Warmup Iteration  15: 2488496.237 ops/s
# Warmup Iteration  16: 2494907.053 ops/s
# Warmup Iteration  17: 2478078.619 ops/s
# Warmup Iteration  18: 2472694.793 ops/s
# Warmup Iteration  19: 2475576.996 ops/s
# Warmup Iteration  20: 2445927.580 ops/s
# Warmup Iteration  21: 2415711.256 ops/s
# Warmup Iteration  22: 2476430.545 ops/s
# Warmup Iteration  23: 2442429.843 ops/s
# Warmup Iteration  24: 2503316.326 ops/s
# Warmup Iteration  25: 2510493.762 ops/s
# Warmup Iteration  26: 2456141.326 ops/s
# Warmup Iteration  27: 2459744.180 ops/s
# Warmup Iteration  28: 2505618.914 ops/s
# Warmup Iteration  29: 2511673.693 ops/s
# Warmup Iteration  30: 2474652.461 ops/s
Iteration   1: 2443539.398 ops/s
Iteration   2: 2474738.471 ops/s
Iteration   3: 2490781.075 ops/s
Iteration   4: 2478489.148 ops/s
Iteration   5: 2435955.278 ops/s
Iteration   6: 2474761.324 ops/s
Iteration   7: 2439912.217 ops/s
Iteration   8: 2420034.914 ops/s
Iteration   9: 2418228.748 ops/s
Iteration  10: 2457456.808 ops/s
Iteration  11: 2474619.127 ops/s
Iteration  12: 2431134.782 ops/s
Iteration  13: 2431968.572 ops/s
Iteration  14: 2474372.899 ops/s
Iteration  15: 2458305.642 ops/s
Iteration  16: 2446919.784 ops/s
Iteration  17: 2413054.236 ops/s
Iteration  18: 2439386.255 ops/s
Iteration  19: 2450977.144 ops/s
Iteration  20: 2385237.114 ops/s
Iteration  21: 2431194.319 ops/s
Iteration  22: 2400747.558 ops/s
Iteration  23: 2481490.342 ops/s
Iteration  24: 2507055.735 ops/s
Iteration  25: 2453310.463 ops/s
Iteration  26: 2409836.622 ops/s
Iteration  27: 2458325.710 ops/s
Iteration  28: 2429057.022 ops/s
Iteration  29: 2475597.164 ops/s
Iteration  30: 2484746.288 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat":
  2449041.139 ±(99.9%) 19470.515 ops/s [Average]
  (min, avg, max) = (2385237.114, 2449041.139, 2507055.735), stdev = 29142.553
  CI (99.9%): [2429570.623, 2468511.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat  thrpt   30  2449041.139 ± 19470.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493215.326 ops/s
# Warmup Iteration   2: 1001645.449 ops/s
# Warmup Iteration   3: 1078636.145 ops/s
# Warmup Iteration   4: 1103610.559 ops/s
# Warmup Iteration   5: 914995.354 ops/s
# Warmup Iteration   6: 1113402.963 ops/s
# Warmup Iteration   7: 1117153.597 ops/s
# Warmup Iteration   8: 1115952.713 ops/s
# Warmup Iteration   9: 1102132.123 ops/s
# Warmup Iteration  10: 1112300.735 ops/s
# Warmup Iteration  11: 1095682.265 ops/s
# Warmup Iteration  12: 1095862.875 ops/s
# Warmup Iteration  13: 1116000.266 ops/s
# Warmup Iteration  14: 1114774.284 ops/s
# Warmup Iteration  15: 1111227.854 ops/s
# Warmup Iteration  16: 1108003.594 ops/s
# Warmup Iteration  17: 1105169.735 ops/s
# Warmup Iteration  18: 1111632.293 ops/s
# Warmup Iteration  19: 1108467.921 ops/s
# Warmup Iteration  20: 1110768.215 ops/s
# Warmup Iteration  21: 1113327.361 ops/s
# Warmup Iteration  22: 1112581.802 ops/s
# Warmup Iteration  23: 1109876.293 ops/s
# Warmup Iteration  24: 1102184.121 ops/s
# Warmup Iteration  25: 1111131.600 ops/s
# Warmup Iteration  26: 1100039.133 ops/s
# Warmup Iteration  27: 1096298.609 ops/s
# Warmup Iteration  28: 1099866.135 ops/s
# Warmup Iteration  29: 1100674.693 ops/s
# Warmup Iteration  30: 1092908.681 ops/s
Iteration   1: 1109985.972 ops/s
Iteration   2: 1101831.553 ops/s
Iteration   3: 1104204.770 ops/s
Iteration   4: 1119568.662 ops/s
Iteration   5: 1106891.127 ops/s
Iteration   6: 1063006.360 ops/s
Iteration   7: 1110915.354 ops/s
Iteration   8: 1107632.917 ops/s
Iteration   9: 1091829.724 ops/s
Iteration  10: 1105765.737 ops/s
Iteration  11: 1107281.126 ops/s
Iteration  12: 1099729.944 ops/s
Iteration  13: 1114662.659 ops/s
Iteration  14: 1118459.458 ops/s
Iteration  15: 1121185.053 ops/s
Iteration  16: 1111549.966 ops/s
Iteration  17: 1116935.138 ops/s
Iteration  18: 1106961.447 ops/s
Iteration  19: 1052477.203 ops/s
Iteration  20: 1112289.111 ops/s
Iteration  21: 1115586.284 ops/s
Iteration  22: 1122076.120 ops/s
Iteration  23: 1119550.007 ops/s
Iteration  24: 1100235.115 ops/s
Iteration  25: 1106183.972 ops/s
Iteration  26: 1116845.787 ops/s
Iteration  27: 1111925.468 ops/s
Iteration  28: 1108949.941 ops/s
Iteration  29: 1107420.184 ops/s
Iteration  30: 1116892.660 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat_target":
  1106960.961 ±(99.9%) 10137.374 ops/s [Average]
  (min, avg, max) = (1052477.203, 1106960.961, 1122076.120), stdev = 15173.145
  CI (99.9%): [1096823.587, 1117098.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectFloat_target  thrpt   30  1106960.961 ± 10137.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 983989.465 ops/s
# Warmup Iteration   2: 1861779.479 ops/s
# Warmup Iteration   3: 2153242.107 ops/s
# Warmup Iteration   4: 2151406.082 ops/s
# Warmup Iteration   5: 2055102.221 ops/s
# Warmup Iteration   6: 1897901.682 ops/s
# Warmup Iteration   7: 2163245.229 ops/s
# Warmup Iteration   8: 2145085.409 ops/s
# Warmup Iteration   9: 2080979.731 ops/s
# Warmup Iteration  10: 2157736.209 ops/s
# Warmup Iteration  11: 2150908.737 ops/s
# Warmup Iteration  12: 2168551.476 ops/s
# Warmup Iteration  13: 2130919.480 ops/s
# Warmup Iteration  14: 2125425.824 ops/s
# Warmup Iteration  15: 2169242.518 ops/s
# Warmup Iteration  16: 2103527.073 ops/s
# Warmup Iteration  17: 2161965.838 ops/s
# Warmup Iteration  18: 2165864.918 ops/s
# Warmup Iteration  19: 2173744.475 ops/s
# Warmup Iteration  20: 2146482.009 ops/s
# Warmup Iteration  21: 2158838.159 ops/s
# Warmup Iteration  22: 2139478.258 ops/s
# Warmup Iteration  23: 2136549.073 ops/s
# Warmup Iteration  24: 2075386.078 ops/s
# Warmup Iteration  25: 2171036.401 ops/s
# Warmup Iteration  26: 2141735.367 ops/s
# Warmup Iteration  27: 2183019.893 ops/s
# Warmup Iteration  28: 2178905.951 ops/s
# Warmup Iteration  29: 2162109.805 ops/s
# Warmup Iteration  30: 2156274.547 ops/s
Iteration   1: 2174516.233 ops/s
Iteration   2: 2089755.266 ops/s
Iteration   3: 2120754.262 ops/s
Iteration   4: 2083991.943 ops/s
Iteration   5: 2068076.777 ops/s
Iteration   6: 2093052.230 ops/s
Iteration   7: 2135036.186 ops/s
Iteration   8: 2079372.850 ops/s
Iteration   9: 2138680.827 ops/s
Iteration  10: 2113768.573 ops/s
Iteration  11: 2105754.098 ops/s
Iteration  12: 2095206.938 ops/s
Iteration  13: 2082776.129 ops/s
Iteration  14: 2182882.707 ops/s
Iteration  15: 2170050.010 ops/s
Iteration  16: 2168088.438 ops/s
Iteration  17: 2156034.539 ops/s
Iteration  18: 2162750.426 ops/s
Iteration  19: 2174862.559 ops/s
Iteration  20: 2155592.132 ops/s
Iteration  21: 2138887.365 ops/s
Iteration  22: 2173853.362 ops/s
Iteration  23: 2167922.506 ops/s
Iteration  24: 2166987.552 ops/s
Iteration  25: 2142916.120 ops/s
Iteration  26: 2153678.468 ops/s
Iteration  27: 2172539.022 ops/s
Iteration  28: 2137906.850 ops/s
Iteration  29: 2154689.165 ops/s
Iteration  30: 2178695.832 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIf":
  2137969.312 ±(99.9%) 23771.313 ops/s [Average]
  (min, avg, max) = (2068076.777, 2137969.312, 2182882.707), stdev = 35579.786
  CI (99.9%): [2114197.999, 2161740.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIf  thrpt   30  2137969.312 ± 23771.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIfToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIfToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 857831.576 ops/s
# Warmup Iteration   2: 1738502.145 ops/s
# Warmup Iteration   3: 1944855.769 ops/s
# Warmup Iteration   4: 1949397.973 ops/s
# Warmup Iteration   5: 1571367.103 ops/s
# Warmup Iteration   6: 1964491.466 ops/s
# Warmup Iteration   7: 1970267.843 ops/s
# Warmup Iteration   8: 1981190.714 ops/s
# Warmup Iteration   9: 1984903.718 ops/s
# Warmup Iteration  10: 1997660.441 ops/s
# Warmup Iteration  11: 1998299.123 ops/s
# Warmup Iteration  12: 2001802.494 ops/s
# Warmup Iteration  13: 1984566.446 ops/s
# Warmup Iteration  14: 1990521.431 ops/s
# Warmup Iteration  15: 1999571.299 ops/s
# Warmup Iteration  16: 1973674.447 ops/s
# Warmup Iteration  17: 1961601.822 ops/s
# Warmup Iteration  18: 1977927.723 ops/s
# Warmup Iteration  19: 1966286.927 ops/s
# Warmup Iteration  20: 1961480.525 ops/s
# Warmup Iteration  21: 1976404.396 ops/s
# Warmup Iteration  22: 1979809.828 ops/s
# Warmup Iteration  23: 1964147.604 ops/s
# Warmup Iteration  24: 1975991.196 ops/s
# Warmup Iteration  25: 1980818.784 ops/s
# Warmup Iteration  26: 1995582.305 ops/s
# Warmup Iteration  27: 1942633.498 ops/s
# Warmup Iteration  28: 1920954.717 ops/s
# Warmup Iteration  29: 1969713.737 ops/s
# Warmup Iteration  30: 1975954.162 ops/s
Iteration   1: 1989997.809 ops/s
Iteration   2: 1983755.476 ops/s
Iteration   3: 1984546.103 ops/s
Iteration   4: 1995860.207 ops/s
Iteration   5: 1988385.752 ops/s
Iteration   6: 1979347.523 ops/s
Iteration   7: 2008092.694 ops/s
Iteration   8: 1973111.363 ops/s
Iteration   9: 1968188.779 ops/s
Iteration  10: 1971696.510 ops/s
Iteration  11: 2000841.376 ops/s
Iteration  12: 2001238.202 ops/s
Iteration  13: 1974951.230 ops/s
Iteration  14: 1975581.738 ops/s
Iteration  15: 1871003.499 ops/s
Iteration  16: 1918250.992 ops/s
Iteration  17: 1958945.124 ops/s
Iteration  18: 1990600.878 ops/s
Iteration  19: 1991511.534 ops/s
Iteration  20: 1984908.389 ops/s
Iteration  21: 1965673.568 ops/s
Iteration  22: 1970062.706 ops/s
Iteration  23: 1953398.890 ops/s
Iteration  24: 1969005.399 ops/s
Iteration  25: 1988153.322 ops/s
Iteration  26: 2009062.857 ops/s
Iteration  27: 1955535.113 ops/s
Iteration  28: 1959229.448 ops/s
Iteration  29: 2000842.512 ops/s
Iteration  30: 1977685.893 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIfToTarget":
  1975315.496 ±(99.9%) 18273.046 ops/s [Average]
  (min, avg, max) = (1871003.499, 1975315.496, 2009062.857), stdev = 27350.238
  CI (99.9%): [1957042.450, 1993588.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectIfToTarget  thrpt   30  1975315.496 ± 18273.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1133142.078 ops/s
# Warmup Iteration   2: 1970636.383 ops/s
# Warmup Iteration   3: 2361131.349 ops/s
# Warmup Iteration   4: 2431982.246 ops/s
# Warmup Iteration   5: 2411312.211 ops/s
# Warmup Iteration   6: 1982409.263 ops/s
# Warmup Iteration   7: 2415900.229 ops/s
# Warmup Iteration   8: 2431564.282 ops/s
# Warmup Iteration   9: 2419797.454 ops/s
# Warmup Iteration  10: 2432506.483 ops/s
# Warmup Iteration  11: 2427121.613 ops/s
# Warmup Iteration  12: 2428371.060 ops/s
# Warmup Iteration  13: 2396107.928 ops/s
# Warmup Iteration  14: 2434249.179 ops/s
# Warmup Iteration  15: 2402407.970 ops/s
# Warmup Iteration  16: 2415749.011 ops/s
# Warmup Iteration  17: 2420895.681 ops/s
# Warmup Iteration  18: 2366816.682 ops/s
# Warmup Iteration  19: 2399424.902 ops/s
# Warmup Iteration  20: 2350148.759 ops/s
# Warmup Iteration  21: 2391878.832 ops/s
# Warmup Iteration  22: 2343193.292 ops/s
# Warmup Iteration  23: 2355096.518 ops/s
# Warmup Iteration  24: 2415946.044 ops/s
# Warmup Iteration  25: 2417676.570 ops/s
# Warmup Iteration  26: 2427327.581 ops/s
# Warmup Iteration  27: 2442450.617 ops/s
# Warmup Iteration  28: 2434178.314 ops/s
# Warmup Iteration  29: 2443627.885 ops/s
# Warmup Iteration  30: 2418362.347 ops/s
Iteration   1: 2410568.079 ops/s
Iteration   2: 2417625.083 ops/s
Iteration   3: 2401832.875 ops/s
Iteration   4: 2424905.078 ops/s
Iteration   5: 2389124.330 ops/s
Iteration   6: 2415629.798 ops/s
Iteration   7: 2429494.921 ops/s
Iteration   8: 2443364.741 ops/s
Iteration   9: 2425710.157 ops/s
Iteration  10: 2424920.209 ops/s
Iteration  11: 2425235.559 ops/s
Iteration  12: 2430559.086 ops/s
Iteration  13: 2441925.819 ops/s
Iteration  14: 2416756.559 ops/s
Iteration  15: 2289563.126 ops/s
Iteration  16: 2338938.346 ops/s
Iteration  17: 2435750.502 ops/s
Iteration  18: 2438894.770 ops/s
Iteration  19: 2409058.426 ops/s
Iteration  20: 2411688.041 ops/s
Iteration  21: 2421729.038 ops/s
Iteration  22: 2429495.536 ops/s
Iteration  23: 2443743.212 ops/s
Iteration  24: 2432810.848 ops/s
Iteration  25: 2430948.796 ops/s
Iteration  26: 2435970.259 ops/s
Iteration  27: 2439293.584 ops/s
Iteration  28: 2439388.134 ops/s
Iteration  29: 2447345.999 ops/s
Iteration  30: 2429066.746 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt":
  2419044.589 ±(99.9%) 21441.988 ops/s [Average]
  (min, avg, max) = (2289563.126, 2419044.589, 2447345.999), stdev = 32093.360
  CI (99.9%): [2397602.601, 2440486.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt  thrpt   30  2419044.589 ± 21441.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493341.586 ops/s
# Warmup Iteration   2: 1068815.311 ops/s
# Warmup Iteration   3: 1162257.503 ops/s
# Warmup Iteration   4: 1165350.836 ops/s
# Warmup Iteration   5: 986294.248 ops/s
# Warmup Iteration   6: 1183119.299 ops/s
# Warmup Iteration   7: 1181603.496 ops/s
# Warmup Iteration   8: 1165705.616 ops/s
# Warmup Iteration   9: 1174881.520 ops/s
# Warmup Iteration  10: 1167095.960 ops/s
# Warmup Iteration  11: 1175238.634 ops/s
# Warmup Iteration  12: 1180705.901 ops/s
# Warmup Iteration  13: 1165499.003 ops/s
# Warmup Iteration  14: 1178254.874 ops/s
# Warmup Iteration  15: 1165871.516 ops/s
# Warmup Iteration  16: 1146455.929 ops/s
# Warmup Iteration  17: 1153357.419 ops/s
# Warmup Iteration  18: 1165604.851 ops/s
# Warmup Iteration  19: 1174125.963 ops/s
# Warmup Iteration  20: 1172301.569 ops/s
# Warmup Iteration  21: 1163395.670 ops/s
# Warmup Iteration  22: 1167454.270 ops/s
# Warmup Iteration  23: 1169086.683 ops/s
# Warmup Iteration  24: 1167905.458 ops/s
# Warmup Iteration  25: 1169579.437 ops/s
# Warmup Iteration  26: 1170230.857 ops/s
# Warmup Iteration  27: 1172992.381 ops/s
# Warmup Iteration  28: 1165604.764 ops/s
# Warmup Iteration  29: 1168700.093 ops/s
# Warmup Iteration  30: 1164164.913 ops/s
Iteration   1: 1168102.999 ops/s
Iteration   2: 1175149.931 ops/s
Iteration   3: 1169551.901 ops/s
Iteration   4: 1164598.717 ops/s
Iteration   5: 1172724.721 ops/s
Iteration   6: 1165001.928 ops/s
Iteration   7: 1166492.779 ops/s
Iteration   8: 1172330.867 ops/s
Iteration   9: 1175859.432 ops/s
Iteration  10: 1169969.709 ops/s
Iteration  11: 1160890.049 ops/s
Iteration  12: 1152614.015 ops/s
Iteration  13: 1143412.251 ops/s
Iteration  14: 1139483.756 ops/s
Iteration  15: 1158847.149 ops/s
Iteration  16: 1172703.108 ops/s
Iteration  17: 1163511.057 ops/s
Iteration  18: 1179086.832 ops/s
Iteration  19: 1171943.051 ops/s
Iteration  20: 1165353.694 ops/s
Iteration  21: 1150855.001 ops/s
Iteration  22: 1174704.030 ops/s
Iteration  23: 1164704.789 ops/s
Iteration  24: 1155788.401 ops/s
Iteration  25: 1155968.891 ops/s
Iteration  26: 1169618.166 ops/s
Iteration  27: 1146316.789 ops/s
Iteration  28: 1158294.926 ops/s
Iteration  29: 1176372.455 ops/s
Iteration  30: 1176855.612 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt_target":
  1164570.233 ±(99.9%) 6980.641 ops/s [Average]
  (min, avg, max) = (1139483.756, 1164570.233, 1179086.832), stdev = 10448.295
  CI (99.9%): [1157589.593, 1171550.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectInt_target  thrpt   30  1164570.233 ± 6980.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1138442.442 ops/s
# Warmup Iteration   2: 2103983.127 ops/s
# Warmup Iteration   3: 2369398.656 ops/s
# Warmup Iteration   4: 2379239.483 ops/s
# Warmup Iteration   5: 2292535.336 ops/s
# Warmup Iteration   6: 2069182.431 ops/s
# Warmup Iteration   7: 2376706.887 ops/s
# Warmup Iteration   8: 2393645.133 ops/s
# Warmup Iteration   9: 2374615.841 ops/s
# Warmup Iteration  10: 2397959.490 ops/s
# Warmup Iteration  11: 2387412.822 ops/s
# Warmup Iteration  12: 2391496.699 ops/s
# Warmup Iteration  13: 2400381.795 ops/s
# Warmup Iteration  14: 2387936.426 ops/s
# Warmup Iteration  15: 2385305.226 ops/s
# Warmup Iteration  16: 2385387.258 ops/s
# Warmup Iteration  17: 2367891.404 ops/s
# Warmup Iteration  18: 2386234.486 ops/s
# Warmup Iteration  19: 2373031.175 ops/s
# Warmup Iteration  20: 2392216.596 ops/s
# Warmup Iteration  21: 2387081.865 ops/s
# Warmup Iteration  22: 2386866.432 ops/s
# Warmup Iteration  23: 2395526.680 ops/s
# Warmup Iteration  24: 2392902.819 ops/s
# Warmup Iteration  25: 2382150.997 ops/s
# Warmup Iteration  26: 2392110.634 ops/s
# Warmup Iteration  27: 2388689.974 ops/s
# Warmup Iteration  28: 2387154.683 ops/s
# Warmup Iteration  29: 2369066.987 ops/s
# Warmup Iteration  30: 2386185.679 ops/s
Iteration   1: 2390397.056 ops/s
Iteration   2: 2390356.586 ops/s
Iteration   3: 2389212.106 ops/s
Iteration   4: 2390615.730 ops/s
Iteration   5: 2376427.836 ops/s
Iteration   6: 2390753.077 ops/s
Iteration   7: 2375210.237 ops/s
Iteration   8: 2369867.324 ops/s
Iteration   9: 2387891.658 ops/s
Iteration  10: 2373773.815 ops/s
Iteration  11: 2379729.115 ops/s
Iteration  12: 2385721.222 ops/s
Iteration  13: 2385604.929 ops/s
Iteration  14: 2393205.341 ops/s
Iteration  15: 2370872.633 ops/s
Iteration  16: 2381480.259 ops/s
Iteration  17: 2352369.783 ops/s
Iteration  18: 2385018.008 ops/s
Iteration  19: 2389107.732 ops/s
Iteration  20: 2375091.937 ops/s
Iteration  21: 2394767.720 ops/s
Iteration  22: 2380431.780 ops/s
Iteration  23: 2350048.988 ops/s
Iteration  24: 2391648.877 ops/s
Iteration  25: 2385208.224 ops/s
Iteration  26: 2379046.924 ops/s
Iteration  27: 2377226.691 ops/s
Iteration  28: 2355971.499 ops/s
Iteration  29: 2395053.898 ops/s
Iteration  30: 2359929.966 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong":
  2380068.032 ±(99.9%) 8305.090 ops/s [Average]
  (min, avg, max) = (2350048.988, 2380068.032, 2395053.898), stdev = 12430.668
  CI (99.9%): [2371762.942, 2388373.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong  thrpt   30  2380068.032 ± 8305.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486628.630 ops/s
# Warmup Iteration   2: 1134927.393 ops/s
# Warmup Iteration   3: 1201042.543 ops/s
# Warmup Iteration   4: 1075196.927 ops/s
# Warmup Iteration   5: 1127584.567 ops/s
# Warmup Iteration   6: 1201192.433 ops/s
# Warmup Iteration   7: 1209077.029 ops/s
# Warmup Iteration   8: 1197267.458 ops/s
# Warmup Iteration   9: 1208887.152 ops/s
# Warmup Iteration  10: 1209655.154 ops/s
# Warmup Iteration  11: 1201501.413 ops/s
# Warmup Iteration  12: 1204891.515 ops/s
# Warmup Iteration  13: 1203858.465 ops/s
# Warmup Iteration  14: 1192684.145 ops/s
# Warmup Iteration  15: 1199311.685 ops/s
# Warmup Iteration  16: 1212233.857 ops/s
# Warmup Iteration  17: 1184369.940 ops/s
# Warmup Iteration  18: 1191374.918 ops/s
# Warmup Iteration  19: 1185556.355 ops/s
# Warmup Iteration  20: 1205426.282 ops/s
# Warmup Iteration  21: 1173921.926 ops/s
# Warmup Iteration  22: 1144953.169 ops/s
# Warmup Iteration  23: 1191804.238 ops/s
# Warmup Iteration  24: 1189782.793 ops/s
# Warmup Iteration  25: 1189771.173 ops/s
# Warmup Iteration  26: 1170846.451 ops/s
# Warmup Iteration  27: 1181008.631 ops/s
# Warmup Iteration  28: 1200111.975 ops/s
# Warmup Iteration  29: 1193698.816 ops/s
# Warmup Iteration  30: 1207582.784 ops/s
Iteration   1: 1208402.408 ops/s
Iteration   2: 1166497.682 ops/s
Iteration   3: 1207533.656 ops/s
Iteration   4: 1205216.181 ops/s
Iteration   5: 1196515.884 ops/s
Iteration   6: 1205595.434 ops/s
Iteration   7: 1203034.876 ops/s
Iteration   8: 1207837.485 ops/s
Iteration   9: 1203463.466 ops/s
Iteration  10: 1196845.286 ops/s
Iteration  11: 1207469.616 ops/s
Iteration  12: 1196528.479 ops/s
Iteration  13: 1212683.134 ops/s
Iteration  14: 1209601.230 ops/s
Iteration  15: 1199732.121 ops/s
Iteration  16: 1179829.786 ops/s
Iteration  17: 1173626.797 ops/s
Iteration  18: 1210291.117 ops/s
Iteration  19: 1191685.517 ops/s
Iteration  20: 1210568.272 ops/s
Iteration  21: 1207241.967 ops/s
Iteration  22: 1207729.648 ops/s
Iteration  23: 1203785.016 ops/s
Iteration  24: 1201021.613 ops/s
Iteration  25: 1206841.724 ops/s
Iteration  26: 1208196.996 ops/s
Iteration  27: 1209196.188 ops/s
Iteration  28: 1197891.937 ops/s
Iteration  29: 1208236.237 ops/s
Iteration  30: 1208724.830 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong_target":
  1201727.486 ±(99.9%) 7348.284 ops/s [Average]
  (min, avg, max) = (1166497.682, 1201727.486, 1212683.134), stdev = 10998.566
  CI (99.9%): [1194379.202, 1209075.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectLong_target  thrpt   30  1201727.486 ± 7348.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1191415.564 ops/s
# Warmup Iteration   2: 2053201.085 ops/s
# Warmup Iteration   3: 2301938.866 ops/s
# Warmup Iteration   4: 2342863.658 ops/s
# Warmup Iteration   5: 2326064.789 ops/s
# Warmup Iteration   6: 1931554.637 ops/s
# Warmup Iteration   7: 2359710.017 ops/s
# Warmup Iteration   8: 2347733.705 ops/s
# Warmup Iteration   9: 2324518.267 ops/s
# Warmup Iteration  10: 2379738.785 ops/s
# Warmup Iteration  11: 2325482.490 ops/s
# Warmup Iteration  12: 2343224.181 ops/s
# Warmup Iteration  13: 2359987.848 ops/s
# Warmup Iteration  14: 2365822.830 ops/s
# Warmup Iteration  15: 2360201.799 ops/s
# Warmup Iteration  16: 2368867.538 ops/s
# Warmup Iteration  17: 2260057.927 ops/s
# Warmup Iteration  18: 2339417.490 ops/s
# Warmup Iteration  19: 2331194.767 ops/s
# Warmup Iteration  20: 2346520.266 ops/s
# Warmup Iteration  21: 2360388.012 ops/s
# Warmup Iteration  22: 2379941.836 ops/s
# Warmup Iteration  23: 2384524.247 ops/s
# Warmup Iteration  24: 2384283.879 ops/s
# Warmup Iteration  25: 2386167.978 ops/s
# Warmup Iteration  26: 2383368.962 ops/s
# Warmup Iteration  27: 2391593.613 ops/s
# Warmup Iteration  28: 2390614.915 ops/s
# Warmup Iteration  29: 2393189.630 ops/s
# Warmup Iteration  30: 2381998.907 ops/s
Iteration   1: 2392859.388 ops/s
Iteration   2: 2386888.964 ops/s
Iteration   3: 2396034.256 ops/s
Iteration   4: 2388355.609 ops/s
Iteration   5: 2388729.798 ops/s
Iteration   6: 2391801.559 ops/s
Iteration   7: 2385642.400 ops/s
Iteration   8: 2395593.951 ops/s
Iteration   9: 2375028.404 ops/s
Iteration  10: 2326611.330 ops/s
Iteration  11: 2346451.741 ops/s
Iteration  12: 2366845.450 ops/s
Iteration  13: 2341044.809 ops/s
Iteration  14: 2246696.575 ops/s
Iteration  15: 2377900.776 ops/s
Iteration  16: 2341429.989 ops/s
Iteration  17: 2364809.076 ops/s
Iteration  18: 2365856.928 ops/s
Iteration  19: 2352880.816 ops/s
Iteration  20: 2368600.408 ops/s
Iteration  21: 2372617.671 ops/s
Iteration  22: 2357792.151 ops/s
Iteration  23: 2376107.132 ops/s
Iteration  24: 2369441.583 ops/s
Iteration  25: 2384132.311 ops/s
Iteration  26: 2385054.683 ops/s
Iteration  27: 2385537.578 ops/s
Iteration  28: 2382704.998 ops/s
Iteration  29: 2361177.486 ops/s
Iteration  30: 2378866.395 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort":
  2368449.807 ±(99.9%) 19374.746 ops/s [Average]
  (min, avg, max) = (2246696.575, 2368449.807, 2396034.256), stdev = 28999.210
  CI (99.9%): [2349075.061, 2387824.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort  thrpt   30  2368449.807 ± 19374.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512006.341 ops/s
# Warmup Iteration   2: 1094196.663 ops/s
# Warmup Iteration   3: 1250369.062 ops/s
# Warmup Iteration   4: 1250757.356 ops/s
# Warmup Iteration   5: 1035435.919 ops/s
# Warmup Iteration   6: 1241101.007 ops/s
# Warmup Iteration   7: 1235199.051 ops/s
# Warmup Iteration   8: 1238471.284 ops/s
# Warmup Iteration   9: 1233461.480 ops/s
# Warmup Iteration  10: 1233753.720 ops/s
# Warmup Iteration  11: 1243058.965 ops/s
# Warmup Iteration  12: 1207620.677 ops/s
# Warmup Iteration  13: 1230246.788 ops/s
# Warmup Iteration  14: 1221519.680 ops/s
# Warmup Iteration  15: 1244069.696 ops/s
# Warmup Iteration  16: 1244210.689 ops/s
# Warmup Iteration  17: 1259791.796 ops/s
# Warmup Iteration  18: 1253892.995 ops/s
# Warmup Iteration  19: 1226246.481 ops/s
# Warmup Iteration  20: 1220639.609 ops/s
# Warmup Iteration  21: 1228578.804 ops/s
# Warmup Iteration  22: 1253541.039 ops/s
# Warmup Iteration  23: 1247435.471 ops/s
# Warmup Iteration  24: 1246794.578 ops/s
# Warmup Iteration  25: 1258812.209 ops/s
# Warmup Iteration  26: 1254543.004 ops/s
# Warmup Iteration  27: 1253651.020 ops/s
# Warmup Iteration  28: 1256998.899 ops/s
# Warmup Iteration  29: 1252980.771 ops/s
# Warmup Iteration  30: 1249439.928 ops/s
Iteration   1: 1256329.803 ops/s
Iteration   2: 1250931.230 ops/s
Iteration   3: 1251284.266 ops/s
Iteration   4: 1250538.231 ops/s
Iteration   5: 1254836.989 ops/s
Iteration   6: 1239676.676 ops/s
Iteration   7: 1261102.952 ops/s
Iteration   8: 1261804.456 ops/s
Iteration   9: 1254366.333 ops/s
Iteration  10: 1253272.951 ops/s
Iteration  11: 1253623.090 ops/s
Iteration  12: 1234619.582 ops/s
Iteration  13: 1250470.081 ops/s
Iteration  14: 1260209.381 ops/s
Iteration  15: 1261766.859 ops/s
Iteration  16: 1247961.501 ops/s
Iteration  17: 1261072.200 ops/s
Iteration  18: 1251118.145 ops/s
Iteration  19: 1251806.396 ops/s
Iteration  20: 1258278.691 ops/s
Iteration  21: 1225572.984 ops/s
Iteration  22: 1219019.654 ops/s
Iteration  23: 1221515.600 ops/s
Iteration  24: 1228662.873 ops/s
Iteration  25: 1243292.396 ops/s
Iteration  26: 1248661.345 ops/s
Iteration  27: 1253289.991 ops/s
Iteration  28: 1254232.646 ops/s
Iteration  29: 1249725.369 ops/s
Iteration  30: 1260300.931 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort_target":
  1248978.120 ±(99.9%) 7974.145 ops/s [Average]
  (min, avg, max) = (1219019.654, 1248978.120, 1261804.456), stdev = 11935.326
  CI (99.9%): [1241003.975, 1256952.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectShort_target  thrpt   30  1248978.120 ± 7974.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715819.625 ops/s
# Warmup Iteration   2: 1425671.054 ops/s
# Warmup Iteration   3: 1666108.798 ops/s
# Warmup Iteration   4: 1644931.092 ops/s
# Warmup Iteration   5: 1475565.936 ops/s
# Warmup Iteration   6: 1515467.290 ops/s
# Warmup Iteration   7: 1668035.227 ops/s
# Warmup Iteration   8: 1673088.261 ops/s
# Warmup Iteration   9: 1674185.920 ops/s
# Warmup Iteration  10: 1660640.664 ops/s
# Warmup Iteration  11: 1665120.185 ops/s
# Warmup Iteration  12: 1650229.126 ops/s
# Warmup Iteration  13: 1652967.476 ops/s
# Warmup Iteration  14: 1664760.118 ops/s
# Warmup Iteration  15: 1668313.443 ops/s
# Warmup Iteration  16: 1641172.023 ops/s
# Warmup Iteration  17: 1670789.968 ops/s
# Warmup Iteration  18: 1680242.019 ops/s
# Warmup Iteration  19: 1658725.619 ops/s
# Warmup Iteration  20: 1655171.860 ops/s
# Warmup Iteration  21: 1653320.965 ops/s
# Warmup Iteration  22: 1669292.799 ops/s
# Warmup Iteration  23: 1669043.559 ops/s
# Warmup Iteration  24: 1676118.967 ops/s
# Warmup Iteration  25: 1653924.207 ops/s
# Warmup Iteration  26: 1623765.795 ops/s
# Warmup Iteration  27: 1663903.983 ops/s
# Warmup Iteration  28: 1656580.446 ops/s
# Warmup Iteration  29: 1664936.808 ops/s
# Warmup Iteration  30: 1641291.330 ops/s
Iteration   1: 1650397.982 ops/s
Iteration   2: 1634264.956 ops/s
Iteration   3: 1628942.754 ops/s
Iteration   4: 1651347.097 ops/s
Iteration   5: 1669513.966 ops/s
Iteration   6: 1671864.741 ops/s
Iteration   7: 1676925.643 ops/s
Iteration   8: 1682962.555 ops/s
Iteration   9: 1662710.004 ops/s
Iteration  10: 1672869.598 ops/s
Iteration  11: 1669709.532 ops/s
Iteration  12: 1650798.890 ops/s
Iteration  13: 1678330.851 ops/s
Iteration  14: 1621967.873 ops/s
Iteration  15: 1639876.149 ops/s
Iteration  16: 1619524.974 ops/s
Iteration  17: 1658533.585 ops/s
Iteration  18: 1669313.915 ops/s
Iteration  19: 1668520.251 ops/s
Iteration  20: 1670609.436 ops/s
Iteration  21: 1662587.897 ops/s
Iteration  22: 1676971.585 ops/s
Iteration  23: 1666033.335 ops/s
Iteration  24: 1662905.516 ops/s
Iteration  25: 1664303.314 ops/s
Iteration  26: 1668070.458 ops/s
Iteration  27: 1677862.702 ops/s
Iteration  28: 1660640.255 ops/s
Iteration  29: 1662649.776 ops/s
Iteration  30: 1673698.295 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectToTarget":
  1660823.596 ±(99.9%) 11239.815 ops/s [Average]
  (min, avg, max) = (1619524.974, 1660823.596, 1682962.555), stdev = 16823.227
  CI (99.9%): [1649583.781, 1672063.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectToTarget  thrpt   30  1660823.596 ± 11239.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1148869.448 ops/s
# Warmup Iteration   2: 2095209.468 ops/s
# Warmup Iteration   3: 2410399.540 ops/s
# Warmup Iteration   4: 2456898.873 ops/s
# Warmup Iteration   5: 2472808.448 ops/s
# Warmup Iteration   6: 1948949.237 ops/s
# Warmup Iteration   7: 2455476.005 ops/s
# Warmup Iteration   8: 2386832.672 ops/s
# Warmup Iteration   9: 2487398.886 ops/s
# Warmup Iteration  10: 2454946.030 ops/s
# Warmup Iteration  11: 2465974.838 ops/s
# Warmup Iteration  12: 2469918.759 ops/s
# Warmup Iteration  13: 2419639.843 ops/s
# Warmup Iteration  14: 2477835.735 ops/s
# Warmup Iteration  15: 2469289.046 ops/s
# Warmup Iteration  16: 2459785.742 ops/s
# Warmup Iteration  17: 2465242.222 ops/s
# Warmup Iteration  18: 2477447.736 ops/s
# Warmup Iteration  19: 2476012.907 ops/s
# Warmup Iteration  20: 2471513.099 ops/s
# Warmup Iteration  21: 2470304.598 ops/s
# Warmup Iteration  22: 2459130.247 ops/s
# Warmup Iteration  23: 2482044.909 ops/s
# Warmup Iteration  24: 2470467.520 ops/s
# Warmup Iteration  25: 2457893.239 ops/s
# Warmup Iteration  26: 2475737.865 ops/s
# Warmup Iteration  27: 2461928.374 ops/s
# Warmup Iteration  28: 2450583.670 ops/s
# Warmup Iteration  29: 2460467.230 ops/s
# Warmup Iteration  30: 2470596.182 ops/s
Iteration   1: 2465765.077 ops/s
Iteration   2: 2482362.262 ops/s
Iteration   3: 2458599.199 ops/s
Iteration   4: 2481614.460 ops/s
Iteration   5: 2422809.672 ops/s
Iteration   6: 2476697.678 ops/s
Iteration   7: 2493055.495 ops/s
Iteration   8: 2407108.010 ops/s
Iteration   9: 2453538.807 ops/s
Iteration  10: 2451954.576 ops/s
Iteration  11: 2354278.113 ops/s
Iteration  12: 2403195.244 ops/s
Iteration  13: 2412590.618 ops/s
Iteration  14: 2473582.364 ops/s
Iteration  15: 2448591.410 ops/s
Iteration  16: 2484768.643 ops/s
Iteration  17: 2473593.696 ops/s
Iteration  18: 2466494.910 ops/s
Iteration  19: 2463729.009 ops/s
Iteration  20: 2484092.557 ops/s
Iteration  21: 2460728.349 ops/s
Iteration  22: 2480069.275 ops/s
Iteration  23: 2462476.181 ops/s
Iteration  24: 2452141.818 ops/s
Iteration  25: 2490401.681 ops/s
Iteration  26: 2492262.164 ops/s
Iteration  27: 2477594.292 ops/s
Iteration  28: 2455550.196 ops/s
Iteration  29: 2477337.492 ops/s
Iteration  30: 2487097.687 ops/s


Result "org.eclipse.collections.impl.bag.sorted.immutable.ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith":
  2459802.698 ±(99.9%) 21077.056 ops/s [Average]
  (min, avg, max) = (2354278.113, 2459802.698, 2493055.495), stdev = 31547.148
  CI (99.9%): [2438725.642, 2480879.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSortedBagImplNoIteratorTest._Benchmark.benchmark_collectWith  thrpt   30  2459802.698 ± 21077.056  ops/s
----------------------------------------
