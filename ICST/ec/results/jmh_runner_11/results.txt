=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2636249.940 ops/s
# Warmup Iteration   2: 6698436.829 ops/s
# Warmup Iteration   3: 6808343.413 ops/s
# Warmup Iteration   4: 5669297.192 ops/s
# Warmup Iteration   5: 6823459.814 ops/s
# Warmup Iteration   6: 6811896.752 ops/s
# Warmup Iteration   7: 6816184.647 ops/s
# Warmup Iteration   8: 6796318.064 ops/s
# Warmup Iteration   9: 6809064.634 ops/s
# Warmup Iteration  10: 6810986.151 ops/s
# Warmup Iteration  11: 6798138.579 ops/s
# Warmup Iteration  12: 6818233.158 ops/s
# Warmup Iteration  13: 6810664.406 ops/s
# Warmup Iteration  14: 6800219.125 ops/s
# Warmup Iteration  15: 6805693.800 ops/s
# Warmup Iteration  16: 6792929.475 ops/s
# Warmup Iteration  17: 6796630.131 ops/s
# Warmup Iteration  18: 6800083.785 ops/s
# Warmup Iteration  19: 6804396.462 ops/s
# Warmup Iteration  20: 6792521.382 ops/s
# Warmup Iteration  21: 6812810.688 ops/s
# Warmup Iteration  22: 6798243.933 ops/s
# Warmup Iteration  23: 6801564.307 ops/s
# Warmup Iteration  24: 6796494.970 ops/s
# Warmup Iteration  25: 6792537.099 ops/s
# Warmup Iteration  26: 6791144.723 ops/s
# Warmup Iteration  27: 6812339.309 ops/s
# Warmup Iteration  28: 6806091.223 ops/s
# Warmup Iteration  29: 6812262.803 ops/s
# Warmup Iteration  30: 6802927.473 ops/s
Iteration   1: 6799206.927 ops/s
Iteration   2: 6808404.939 ops/s
Iteration   3: 6820834.402 ops/s
Iteration   4: 6810344.179 ops/s
Iteration   5: 6787797.730 ops/s
Iteration   6: 6808900.368 ops/s
Iteration   7: 6817989.134 ops/s
Iteration   8: 6808384.703 ops/s
Iteration   9: 6792464.453 ops/s
Iteration  10: 6795649.304 ops/s
Iteration  11: 6796500.592 ops/s
Iteration  12: 6812017.691 ops/s
Iteration  13: 6817102.364 ops/s
Iteration  14: 6800577.962 ops/s
Iteration  15: 6786021.467 ops/s
Iteration  16: 6777099.039 ops/s
Iteration  17: 6796560.617 ops/s
Iteration  18: 6789446.260 ops/s
Iteration  19: 6793241.626 ops/s
Iteration  20: 6807601.608 ops/s
Iteration  21: 6781316.786 ops/s
Iteration  22: 6793320.423 ops/s
Iteration  23: 6823597.691 ops/s
Iteration  24: 6826760.584 ops/s
Iteration  25: 6813433.764 ops/s
Iteration  26: 6785343.734 ops/s
Iteration  27: 6804374.223 ops/s
Iteration  28: 6822035.987 ops/s
Iteration  29: 6795326.215 ops/s
Iteration  30: 6820291.904 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllAtIndex":
  6803064.889 ±(99.9%) 9137.614 ops/s [Average]
  (min, avg, max) = (6777099.039, 6803064.889, 6826760.584), stdev = 13676.752
  CI (99.9%): [6793927.275, 6812202.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  6803064.889 ± 9137.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1035001.522 ops/s
# Warmup Iteration   2: 2411232.879 ops/s
# Warmup Iteration   3: 2039201.506 ops/s
# Warmup Iteration   4: 2440964.485 ops/s
# Warmup Iteration   5: 2442496.178 ops/s
# Warmup Iteration   6: 2445578.849 ops/s
# Warmup Iteration   7: 2442442.246 ops/s
# Warmup Iteration   8: 2448320.546 ops/s
# Warmup Iteration   9: 2441555.151 ops/s
# Warmup Iteration  10: 2436877.106 ops/s
# Warmup Iteration  11: 2446341.322 ops/s
# Warmup Iteration  12: 2442146.046 ops/s
# Warmup Iteration  13: 2447723.380 ops/s
# Warmup Iteration  14: 2438954.898 ops/s
# Warmup Iteration  15: 2454801.455 ops/s
# Warmup Iteration  16: 2447378.930 ops/s
# Warmup Iteration  17: 2435354.969 ops/s
# Warmup Iteration  18: 2446846.713 ops/s
# Warmup Iteration  19: 2434237.238 ops/s
# Warmup Iteration  20: 2443689.892 ops/s
# Warmup Iteration  21: 2448631.875 ops/s
# Warmup Iteration  22: 2449502.582 ops/s
# Warmup Iteration  23: 2447203.571 ops/s
# Warmup Iteration  24: 2451263.001 ops/s
# Warmup Iteration  25: 2449746.300 ops/s
# Warmup Iteration  26: 2448957.700 ops/s
# Warmup Iteration  27: 2447473.070 ops/s
# Warmup Iteration  28: 2440896.476 ops/s
# Warmup Iteration  29: 2441816.904 ops/s
# Warmup Iteration  30: 2447910.065 ops/s
Iteration   1: 2449181.871 ops/s
Iteration   2: 2455776.481 ops/s
Iteration   3: 2453598.349 ops/s
Iteration   4: 2441812.489 ops/s
Iteration   5: 2453378.882 ops/s
Iteration   6: 2445552.091 ops/s
Iteration   7: 2449413.491 ops/s
Iteration   8: 2438509.941 ops/s
Iteration   9: 2444357.296 ops/s
Iteration  10: 2444437.080 ops/s
Iteration  11: 2442921.912 ops/s
Iteration  12: 2444880.623 ops/s
Iteration  13: 2447913.319 ops/s
Iteration  14: 2434687.125 ops/s
Iteration  15: 2442817.515 ops/s
Iteration  16: 2446974.040 ops/s
Iteration  17: 2442306.207 ops/s
Iteration  18: 2450607.535 ops/s
Iteration  19: 2439153.115 ops/s
Iteration  20: 2435386.509 ops/s
Iteration  21: 2449330.275 ops/s
Iteration  22: 2440605.659 ops/s
Iteration  23: 2441828.066 ops/s
Iteration  24: 2437337.638 ops/s
Iteration  25: 2438186.849 ops/s
Iteration  26: 2396066.849 ops/s
Iteration  27: 2447014.864 ops/s
Iteration  28: 2450289.313 ops/s
Iteration  29: 2436817.442 ops/s
Iteration  30: 2444355.477 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAllIterable":
  2442849.943 ±(99.9%) 6965.504 ops/s [Average]
  (min, avg, max) = (2396066.849, 2442849.943, 2455776.481), stdev = 10425.640
  CI (99.9%): [2435884.439, 2449815.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_addAllIterable  thrpt   30  2442849.943 ± 6965.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6563587.196 ops/s
# Warmup Iteration   2: 14733225.589 ops/s
# Warmup Iteration   3: 15250058.752 ops/s
# Warmup Iteration   4: 12645660.001 ops/s
# Warmup Iteration   5: 15212630.514 ops/s
# Warmup Iteration   6: 15253053.403 ops/s
# Warmup Iteration   7: 15198132.493 ops/s
# Warmup Iteration   8: 15310661.674 ops/s
# Warmup Iteration   9: 15285144.691 ops/s
# Warmup Iteration  10: 15250688.250 ops/s
# Warmup Iteration  11: 15205345.477 ops/s
# Warmup Iteration  12: 15262166.262 ops/s
# Warmup Iteration  13: 15211301.980 ops/s
# Warmup Iteration  14: 15202722.026 ops/s
# Warmup Iteration  15: 15264266.240 ops/s
# Warmup Iteration  16: 15250377.929 ops/s
# Warmup Iteration  17: 15287659.359 ops/s
# Warmup Iteration  18: 15284615.545 ops/s
# Warmup Iteration  19: 15295748.091 ops/s
# Warmup Iteration  20: 15252640.700 ops/s
# Warmup Iteration  21: 15210033.886 ops/s
# Warmup Iteration  22: 15223428.553 ops/s
# Warmup Iteration  23: 15258806.039 ops/s
# Warmup Iteration  24: 15269625.937 ops/s
# Warmup Iteration  25: 15257140.680 ops/s
# Warmup Iteration  26: 15297206.331 ops/s
# Warmup Iteration  27: 15254827.150 ops/s
# Warmup Iteration  28: 15258068.659 ops/s
# Warmup Iteration  29: 15226956.240 ops/s
# Warmup Iteration  30: 15267423.017 ops/s
Iteration   1: 15290912.186 ops/s
Iteration   2: 15279528.609 ops/s
Iteration   3: 15254505.825 ops/s
Iteration   4: 15277942.303 ops/s
Iteration   5: 15262547.267 ops/s
Iteration   6: 15256249.106 ops/s
Iteration   7: 15250474.045 ops/s
Iteration   8: 15269161.843 ops/s
Iteration   9: 15275356.530 ops/s
Iteration  10: 15266438.905 ops/s
Iteration  11: 15309688.117 ops/s
Iteration  12: 15271046.145 ops/s
Iteration  13: 15225430.912 ops/s
Iteration  14: 15246383.378 ops/s
Iteration  15: 15239643.071 ops/s
Iteration  16: 15224855.384 ops/s
Iteration  17: 15261466.918 ops/s
Iteration  18: 15160275.077 ops/s
Iteration  19: 15325457.310 ops/s
Iteration  20: 15316078.965 ops/s
Iteration  21: 15258706.257 ops/s
Iteration  22: 15240772.900 ops/s
Iteration  23: 15265164.112 ops/s
Iteration  24: 15245349.111 ops/s
Iteration  25: 15278732.611 ops/s
Iteration  26: 15214804.759 ops/s
Iteration  27: 15272885.678 ops/s
Iteration  28: 15236206.881 ops/s
Iteration  29: 15243743.779 ops/s
Iteration  30: 15285806.686 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_addAtIndex":
  15260187.156 ±(99.9%) 21426.624 ops/s [Average]
  (min, avg, max) = (15160275.077, 15260187.156, 15325457.310), stdev = 32070.365
  CI (99.9%): [15238760.531, 15281613.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_addAtIndex  thrpt   30  15260187.156 ± 21426.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1570426.644 ops/s
# Warmup Iteration   2: 3704163.697 ops/s
# Warmup Iteration   3: 3612924.258 ops/s
# Warmup Iteration   4: 3001789.323 ops/s
# Warmup Iteration   5: 3626009.421 ops/s
# Warmup Iteration   6: 3612360.099 ops/s
# Warmup Iteration   7: 3625626.404 ops/s
# Warmup Iteration   8: 3607980.772 ops/s
# Warmup Iteration   9: 3613820.872 ops/s
# Warmup Iteration  10: 3626424.194 ops/s
# Warmup Iteration  11: 3606283.906 ops/s
# Warmup Iteration  12: 3613261.639 ops/s
# Warmup Iteration  13: 3633615.705 ops/s
# Warmup Iteration  14: 3577323.577 ops/s
# Warmup Iteration  15: 3615289.278 ops/s
# Warmup Iteration  16: 3612462.761 ops/s
# Warmup Iteration  17: 3632699.972 ops/s
# Warmup Iteration  18: 3629404.729 ops/s
# Warmup Iteration  19: 3617611.507 ops/s
# Warmup Iteration  20: 3632541.300 ops/s
# Warmup Iteration  21: 3607011.908 ops/s
# Warmup Iteration  22: 3633083.865 ops/s
# Warmup Iteration  23: 3611798.752 ops/s
# Warmup Iteration  24: 3626583.417 ops/s
# Warmup Iteration  25: 3620248.632 ops/s
# Warmup Iteration  26: 3622027.028 ops/s
# Warmup Iteration  27: 3653073.903 ops/s
# Warmup Iteration  28: 3613184.417 ops/s
# Warmup Iteration  29: 3600367.235 ops/s
# Warmup Iteration  30: 3628658.256 ops/s
Iteration   1: 3623980.109 ops/s
Iteration   2: 3637509.006 ops/s
Iteration   3: 3612069.275 ops/s
Iteration   4: 3619035.439 ops/s
Iteration   5: 3623950.501 ops/s
Iteration   6: 3612068.193 ops/s
Iteration   7: 3632318.055 ops/s
Iteration   8: 3588236.011 ops/s
Iteration   9: 3632851.132 ops/s
Iteration  10: 3613105.741 ops/s
Iteration  11: 3613354.570 ops/s
Iteration  12: 3584208.687 ops/s
Iteration  13: 3613119.211 ops/s
Iteration  14: 3592939.092 ops/s
Iteration  15: 3629550.070 ops/s
Iteration  16: 3631094.910 ops/s
Iteration  17: 3626858.922 ops/s
Iteration  18: 3642863.212 ops/s
Iteration  19: 3646888.573 ops/s
Iteration  20: 3633698.805 ops/s
Iteration  21: 3620363.830 ops/s
Iteration  22: 3631712.895 ops/s
Iteration  23: 3626842.476 ops/s
Iteration  24: 3620706.091 ops/s
Iteration  25: 3595145.373 ops/s
Iteration  26: 3612853.392 ops/s
Iteration  27: 3611505.410 ops/s
Iteration  28: 3638073.476 ops/s
Iteration  29: 3618388.966 ops/s
Iteration  30: 3623713.554 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByMutating":
  3620300.166 ±(99.9%) 10308.356 ops/s [Average]
  (min, avg, max) = (3584208.687, 3620300.166, 3646888.573), stdev = 15429.064
  CI (99.9%): [3609991.809, 3630608.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3620300.166 ± 10308.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1380458.985 ops/s
# Warmup Iteration   2: 3409875.457 ops/s
# Warmup Iteration   3: 3444225.513 ops/s
# Warmup Iteration   4: 2856457.751 ops/s
# Warmup Iteration   5: 3450476.869 ops/s
# Warmup Iteration   6: 3436927.798 ops/s
# Warmup Iteration   7: 3471446.334 ops/s
# Warmup Iteration   8: 3476308.601 ops/s
# Warmup Iteration   9: 3479427.232 ops/s
# Warmup Iteration  10: 3446695.150 ops/s
# Warmup Iteration  11: 3454610.210 ops/s
# Warmup Iteration  12: 3458055.774 ops/s
# Warmup Iteration  13: 3427988.521 ops/s
# Warmup Iteration  14: 3443305.376 ops/s
# Warmup Iteration  15: 3471313.089 ops/s
# Warmup Iteration  16: 3476069.007 ops/s
# Warmup Iteration  17: 3464549.148 ops/s
# Warmup Iteration  18: 3492849.645 ops/s
# Warmup Iteration  19: 3466419.764 ops/s
# Warmup Iteration  20: 3484269.143 ops/s
# Warmup Iteration  21: 3454853.988 ops/s
# Warmup Iteration  22: 3464681.627 ops/s
# Warmup Iteration  23: 3479114.862 ops/s
# Warmup Iteration  24: 3458820.918 ops/s
# Warmup Iteration  25: 3465824.347 ops/s
# Warmup Iteration  26: 3483520.361 ops/s
# Warmup Iteration  27: 3487024.825 ops/s
# Warmup Iteration  28: 3457350.539 ops/s
# Warmup Iteration  29: 3483521.508 ops/s
# Warmup Iteration  30: 3488406.352 ops/s
Iteration   1: 3466120.282 ops/s
Iteration   2: 3454423.648 ops/s
Iteration   3: 3432558.665 ops/s
Iteration   4: 3501030.581 ops/s
Iteration   5: 3491487.354 ops/s
Iteration   6: 3499822.145 ops/s
Iteration   7: 3472387.195 ops/s
Iteration   8: 3465382.332 ops/s
Iteration   9: 3525710.653 ops/s
Iteration  10: 3471660.826 ops/s
Iteration  11: 3445524.550 ops/s
Iteration  12: 3392017.126 ops/s
Iteration  13: 3469303.616 ops/s
Iteration  14: 3457409.382 ops/s
Iteration  15: 3463126.016 ops/s
Iteration  16: 3449879.063 ops/s
Iteration  17: 3457457.897 ops/s
Iteration  18: 3455560.088 ops/s
Iteration  19: 3494302.446 ops/s
Iteration  20: 3480304.742 ops/s
Iteration  21: 3466594.386 ops/s
Iteration  22: 3464482.465 ops/s
Iteration  23: 3483055.079 ops/s
Iteration  24: 3449470.526 ops/s
Iteration  25: 3435167.956 ops/s
Iteration  26: 3461594.143 ops/s
Iteration  27: 3471344.616 ops/s
Iteration  28: 3477344.321 ops/s
Iteration  29: 3492943.295 ops/s
Iteration  30: 3483098.904 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_aggregateByNonMutating":
  3467685.477 ±(99.9%) 16632.142 ops/s [Average]
  (min, avg, max) = (3392017.126, 3467685.477, 3525710.653), stdev = 24894.209
  CI (99.9%): [3451053.335, 3484317.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3467685.477 ± 16632.142  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4472941.730 ops/s
# Warmup Iteration   2: 12193501.961 ops/s
# Warmup Iteration   3: 12188896.438 ops/s
# Warmup Iteration   4: 10069738.825 ops/s
# Warmup Iteration   5: 12223073.373 ops/s
# Warmup Iteration   6: 12198097.750 ops/s
# Warmup Iteration   7: 12196505.811 ops/s
# Warmup Iteration   8: 12218373.976 ops/s
# Warmup Iteration   9: 12227283.188 ops/s
# Warmup Iteration  10: 12208008.972 ops/s
# Warmup Iteration  11: 12191780.900 ops/s
# Warmup Iteration  12: 12156472.740 ops/s
# Warmup Iteration  13: 12204529.269 ops/s
# Warmup Iteration  14: 12192594.269 ops/s
# Warmup Iteration  15: 12210079.232 ops/s
# Warmup Iteration  16: 12178836.316 ops/s
# Warmup Iteration  17: 12228453.472 ops/s
# Warmup Iteration  18: 12207420.554 ops/s
# Warmup Iteration  19: 12216928.220 ops/s
# Warmup Iteration  20: 12215387.588 ops/s
# Warmup Iteration  21: 12169326.549 ops/s
# Warmup Iteration  22: 12214037.351 ops/s
# Warmup Iteration  23: 12207665.121 ops/s
# Warmup Iteration  24: 12235396.305 ops/s
# Warmup Iteration  25: 12219396.905 ops/s
# Warmup Iteration  26: 12232740.168 ops/s
# Warmup Iteration  27: 12186747.308 ops/s
# Warmup Iteration  28: 12220772.323 ops/s
# Warmup Iteration  29: 12228655.069 ops/s
# Warmup Iteration  30: 12204556.246 ops/s
Iteration   1: 12251590.257 ops/s
Iteration   2: 12268572.473 ops/s
Iteration   3: 12214197.773 ops/s
Iteration   4: 12235849.524 ops/s
Iteration   5: 12247811.726 ops/s
Iteration   6: 12257132.331 ops/s
Iteration   7: 12193019.073 ops/s
Iteration   8: 12215745.109 ops/s
Iteration   9: 12221145.415 ops/s
Iteration  10: 12208974.303 ops/s
Iteration  11: 12216555.678 ops/s
Iteration  12: 12207493.144 ops/s
Iteration  13: 12176906.956 ops/s
Iteration  14: 12231448.810 ops/s
Iteration  15: 12268975.562 ops/s
Iteration  16: 12206543.825 ops/s
Iteration  17: 12265218.910 ops/s
Iteration  18: 12227144.435 ops/s
Iteration  19: 12154956.897 ops/s
Iteration  20: 12212479.846 ops/s
Iteration  21: 12225694.719 ops/s
Iteration  22: 12149970.678 ops/s
Iteration  23: 12234744.257 ops/s
Iteration  24: 12215370.716 ops/s
Iteration  25: 12257675.999 ops/s
Iteration  26: 12257229.090 ops/s
Iteration  27: 12233395.502 ops/s
Iteration  28: 12216599.172 ops/s
Iteration  29: 12193279.112 ops/s
Iteration  30: 12237766.587 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfy":
  12223449.596 ±(99.9%) 20244.679 ops/s [Average]
  (min, avg, max) = (12149970.678, 12223449.596, 12268975.562), stdev = 30301.285
  CI (99.9%): [12203204.916, 12243694.275] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_allSatisfy  thrpt   30  12223449.596 ± 20244.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3638577.898 ops/s
# Warmup Iteration   2: 6468925.951 ops/s
# Warmup Iteration   3: 6994040.904 ops/s
# Warmup Iteration   4: 7011921.512 ops/s
# Warmup Iteration   5: 6902330.088 ops/s
# Warmup Iteration   6: 5905205.718 ops/s
# Warmup Iteration   7: 6997940.359 ops/s
# Warmup Iteration   8: 7014665.174 ops/s
# Warmup Iteration   9: 7020584.924 ops/s
# Warmup Iteration  10: 7015039.641 ops/s
# Warmup Iteration  11: 7020833.931 ops/s
# Warmup Iteration  12: 7018982.714 ops/s
# Warmup Iteration  13: 7020208.862 ops/s
# Warmup Iteration  14: 7036474.561 ops/s
# Warmup Iteration  15: 7010770.579 ops/s
# Warmup Iteration  16: 7024658.966 ops/s
# Warmup Iteration  17: 7027413.109 ops/s
# Warmup Iteration  18: 7024668.484 ops/s
# Warmup Iteration  19: 7016847.834 ops/s
# Warmup Iteration  20: 7007662.959 ops/s
# Warmup Iteration  21: 7017141.905 ops/s
# Warmup Iteration  22: 7028089.182 ops/s
# Warmup Iteration  23: 7027650.130 ops/s
# Warmup Iteration  24: 7011623.817 ops/s
# Warmup Iteration  25: 7032784.853 ops/s
# Warmup Iteration  26: 7018877.626 ops/s
# Warmup Iteration  27: 7014297.195 ops/s
# Warmup Iteration  28: 7024058.194 ops/s
# Warmup Iteration  29: 7014406.371 ops/s
# Warmup Iteration  30: 7014780.829 ops/s
Iteration   1: 7027686.478 ops/s
Iteration   2: 7002311.453 ops/s
Iteration   3: 7037841.622 ops/s
Iteration   4: 6993098.752 ops/s
Iteration   5: 7003566.152 ops/s
Iteration   6: 7043817.376 ops/s
Iteration   7: 7034676.594 ops/s
Iteration   8: 7014720.082 ops/s
Iteration   9: 7004142.964 ops/s
Iteration  10: 7025069.201 ops/s
Iteration  11: 7005420.376 ops/s
Iteration  12: 7011171.689 ops/s
Iteration  13: 7031268.795 ops/s
Iteration  14: 7012615.888 ops/s
Iteration  15: 7018086.879 ops/s
Iteration  16: 6996297.588 ops/s
Iteration  17: 7010551.053 ops/s
Iteration  18: 7036680.913 ops/s
Iteration  19: 7017001.261 ops/s
Iteration  20: 7026372.270 ops/s
Iteration  21: 7018842.377 ops/s
Iteration  22: 7014607.256 ops/s
Iteration  23: 7040779.004 ops/s
Iteration  24: 7008380.491 ops/s
Iteration  25: 7033526.390 ops/s
Iteration  26: 7018675.957 ops/s
Iteration  27: 6998657.138 ops/s
Iteration  28: 6989518.107 ops/s
Iteration  29: 7004372.617 ops/s
Iteration  30: 7042637.157 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_allSatisfyWith":
  7017413.129 ±(99.9%) 10342.046 ops/s [Average]
  (min, avg, max) = (6989518.107, 7017413.129, 7043817.376), stdev = 15479.489
  CI (99.9%): [7007071.083, 7027755.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  7017413.129 ± 10342.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4911932.385 ops/s
# Warmup Iteration   2: 11231211.728 ops/s
# Warmup Iteration   3: 11160419.052 ops/s
# Warmup Iteration   4: 9330989.537 ops/s
# Warmup Iteration   5: 11272832.523 ops/s
# Warmup Iteration   6: 11218394.568 ops/s
# Warmup Iteration   7: 11244614.604 ops/s
# Warmup Iteration   8: 11232565.238 ops/s
# Warmup Iteration   9: 11247306.746 ops/s
# Warmup Iteration  10: 11248744.938 ops/s
# Warmup Iteration  11: 11242042.463 ops/s
# Warmup Iteration  12: 11218015.528 ops/s
# Warmup Iteration  13: 11223702.101 ops/s
# Warmup Iteration  14: 11247863.142 ops/s
# Warmup Iteration  15: 11269622.345 ops/s
# Warmup Iteration  16: 11252947.820 ops/s
# Warmup Iteration  17: 11279190.072 ops/s
# Warmup Iteration  18: 11256042.089 ops/s
# Warmup Iteration  19: 11245044.886 ops/s
# Warmup Iteration  20: 11277310.158 ops/s
# Warmup Iteration  21: 11237131.131 ops/s
# Warmup Iteration  22: 11226112.758 ops/s
# Warmup Iteration  23: 11233724.133 ops/s
# Warmup Iteration  24: 11257841.517 ops/s
# Warmup Iteration  25: 11254576.232 ops/s
# Warmup Iteration  26: 11246121.568 ops/s
# Warmup Iteration  27: 11256158.747 ops/s
# Warmup Iteration  28: 11261242.725 ops/s
# Warmup Iteration  29: 11263354.754 ops/s
# Warmup Iteration  30: 11246167.991 ops/s
Iteration   1: 11289175.482 ops/s
Iteration   2: 11288491.614 ops/s
Iteration   3: 11279061.740 ops/s
Iteration   4: 11258926.525 ops/s
Iteration   5: 11249570.238 ops/s
Iteration   6: 11237572.762 ops/s
Iteration   7: 11259840.957 ops/s
Iteration   8: 11260909.693 ops/s
Iteration   9: 11286916.713 ops/s
Iteration  10: 11245370.274 ops/s
Iteration  11: 11211955.737 ops/s
Iteration  12: 11203665.763 ops/s
Iteration  13: 11261286.364 ops/s
Iteration  14: 11245952.918 ops/s
Iteration  15: 11259442.309 ops/s
Iteration  16: 11242436.581 ops/s
Iteration  17: 11259646.697 ops/s
Iteration  18: 11218713.644 ops/s
Iteration  19: 11234113.226 ops/s
Iteration  20: 11259086.830 ops/s
Iteration  21: 11246232.887 ops/s
Iteration  22: 11196397.767 ops/s
Iteration  23: 11167345.444 ops/s
Iteration  24: 11277018.412 ops/s
Iteration  25: 11272898.705 ops/s
Iteration  26: 11276361.352 ops/s
Iteration  27: 11269256.545 ops/s
Iteration  28: 11245573.582 ops/s
Iteration  29: 11276251.059 ops/s
Iteration  30: 11076780.116 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfy":
  11245208.398 ±(99.9%) 28575.713 ops/s [Average]
  (min, avg, max) = (11076780.116, 11245208.398, 11289175.482), stdev = 42770.786
  CI (99.9%): [11216632.684, 11273784.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_anySatisfy  thrpt   30  11245208.398 ± 28575.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3660503.991 ops/s
# Warmup Iteration   2: 6440631.831 ops/s
# Warmup Iteration   3: 6984236.258 ops/s
# Warmup Iteration   4: 6999774.537 ops/s
# Warmup Iteration   5: 6916033.898 ops/s
# Warmup Iteration   6: 5907423.819 ops/s
# Warmup Iteration   7: 6992240.346 ops/s
# Warmup Iteration   8: 7013380.089 ops/s
# Warmup Iteration   9: 7009964.667 ops/s
# Warmup Iteration  10: 7020596.464 ops/s
# Warmup Iteration  11: 7015828.347 ops/s
# Warmup Iteration  12: 7016097.955 ops/s
# Warmup Iteration  13: 7005589.268 ops/s
# Warmup Iteration  14: 7011575.813 ops/s
# Warmup Iteration  15: 7003134.990 ops/s
# Warmup Iteration  16: 7018182.517 ops/s
# Warmup Iteration  17: 7019561.634 ops/s
# Warmup Iteration  18: 7027440.472 ops/s
# Warmup Iteration  19: 7014367.607 ops/s
# Warmup Iteration  20: 7011477.456 ops/s
# Warmup Iteration  21: 7009919.217 ops/s
# Warmup Iteration  22: 7031297.508 ops/s
# Warmup Iteration  23: 7009371.952 ops/s
# Warmup Iteration  24: 6992621.178 ops/s
# Warmup Iteration  25: 7018761.885 ops/s
# Warmup Iteration  26: 7012747.771 ops/s
# Warmup Iteration  27: 7000145.344 ops/s
# Warmup Iteration  28: 7015006.102 ops/s
# Warmup Iteration  29: 7028859.964 ops/s
# Warmup Iteration  30: 7003408.153 ops/s
Iteration   1: 7021257.748 ops/s
Iteration   2: 7009251.829 ops/s
Iteration   3: 7034086.151 ops/s
Iteration   4: 7040991.179 ops/s
Iteration   5: 7025069.084 ops/s
Iteration   6: 7030772.881 ops/s
Iteration   7: 7001979.002 ops/s
Iteration   8: 7036405.608 ops/s
Iteration   9: 6988590.632 ops/s
Iteration  10: 7029520.997 ops/s
Iteration  11: 7024813.773 ops/s
Iteration  12: 7031716.407 ops/s
Iteration  13: 7034789.082 ops/s
Iteration  14: 7015687.363 ops/s
Iteration  15: 7033523.351 ops/s
Iteration  16: 7020820.889 ops/s
Iteration  17: 7015705.397 ops/s
Iteration  18: 7034242.495 ops/s
Iteration  19: 7005275.128 ops/s
Iteration  20: 7020804.130 ops/s
Iteration  21: 7016886.276 ops/s
Iteration  22: 7004786.018 ops/s
Iteration  23: 7032356.521 ops/s
Iteration  24: 7008269.873 ops/s
Iteration  25: 7022163.564 ops/s
Iteration  26: 7002770.271 ops/s
Iteration  27: 7050279.059 ops/s
Iteration  28: 7015250.205 ops/s
Iteration  29: 7015351.317 ops/s
Iteration  30: 6996562.489 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_anySatisfyWith":
  7020665.957 ±(99.9%) 9545.036 ops/s [Average]
  (min, avg, max) = (6988590.632, 7020665.957, 7050279.059), stdev = 14286.562
  CI (99.9%): [7011120.921, 7030210.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  7020665.957 ± 9545.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1597922.478 ops/s
# Warmup Iteration   2: 3636734.527 ops/s
# Warmup Iteration   3: 2979412.960 ops/s
# Warmup Iteration   4: 3625234.263 ops/s
# Warmup Iteration   5: 3601920.202 ops/s
# Warmup Iteration   6: 3614684.237 ops/s
# Warmup Iteration   7: 3621708.203 ops/s
# Warmup Iteration   8: 3610246.501 ops/s
# Warmup Iteration   9: 3617212.524 ops/s
# Warmup Iteration  10: 3610631.740 ops/s
# Warmup Iteration  11: 3614404.942 ops/s
# Warmup Iteration  12: 3622782.210 ops/s
# Warmup Iteration  13: 3608097.182 ops/s
# Warmup Iteration  14: 3613777.431 ops/s
# Warmup Iteration  15: 3607058.445 ops/s
# Warmup Iteration  16: 3610719.003 ops/s
# Warmup Iteration  17: 3606756.749 ops/s
# Warmup Iteration  18: 3605792.980 ops/s
# Warmup Iteration  19: 3620536.732 ops/s
# Warmup Iteration  20: 3617197.770 ops/s
# Warmup Iteration  21: 3615037.902 ops/s
# Warmup Iteration  22: 3616460.945 ops/s
# Warmup Iteration  23: 3605770.770 ops/s
# Warmup Iteration  24: 3625689.978 ops/s
# Warmup Iteration  25: 3600626.324 ops/s
# Warmup Iteration  26: 3605862.278 ops/s
# Warmup Iteration  27: 3614511.698 ops/s
# Warmup Iteration  28: 3607502.074 ops/s
# Warmup Iteration  29: 3623228.389 ops/s
# Warmup Iteration  30: 3618836.773 ops/s
Iteration   1: 3626400.569 ops/s
Iteration   2: 3613645.785 ops/s
Iteration   3: 3609795.937 ops/s
Iteration   4: 3616684.058 ops/s
Iteration   5: 3606238.965 ops/s
Iteration   6: 3577107.842 ops/s
Iteration   7: 3609262.722 ops/s
Iteration   8: 3612512.699 ops/s
Iteration   9: 3615557.697 ops/s
Iteration  10: 3606130.765 ops/s
Iteration  11: 3608856.897 ops/s
Iteration  12: 3611390.847 ops/s
Iteration  13: 3607184.382 ops/s
Iteration  14: 3598004.113 ops/s
Iteration  15: 3604698.435 ops/s
Iteration  16: 3607260.366 ops/s
Iteration  17: 3606139.012 ops/s
Iteration  18: 3603474.663 ops/s
Iteration  19: 3606303.708 ops/s
Iteration  20: 3605129.848 ops/s
Iteration  21: 3606143.321 ops/s
Iteration  22: 3608265.143 ops/s
Iteration  23: 3611229.345 ops/s
Iteration  24: 3601286.425 ops/s
Iteration  25: 3626719.714 ops/s
Iteration  26: 3603110.857 ops/s
Iteration  27: 3603388.082 ops/s
Iteration  28: 3615210.964 ops/s
Iteration  29: 3612768.187 ops/s
Iteration  30: 3615185.255 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendString":
  3608502.887 ±(99.9%) 5847.954 ops/s [Average]
  (min, avg, max) = (3577107.842, 3608502.887, 3626719.714), stdev = 8752.943
  CI (99.9%): [3602654.933, 3614350.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_appendString  thrpt   30  3608502.887 ± 5847.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115612.628 ops/s
# Warmup Iteration   2: 122518.407 ops/s
# Warmup Iteration   3: 138338.495 ops/s
# Warmup Iteration   4: 152501.472 ops/s
# Warmup Iteration   5: 151970.650 ops/s
# Warmup Iteration   6: 152277.119 ops/s
# Warmup Iteration   7: 151398.649 ops/s
# Warmup Iteration   8: 152327.627 ops/s
# Warmup Iteration   9: 152634.160 ops/s
# Warmup Iteration  10: 152461.809 ops/s
# Warmup Iteration  11: 151817.279 ops/s
# Warmup Iteration  12: 152572.828 ops/s
# Warmup Iteration  13: 152168.372 ops/s
# Warmup Iteration  14: 152462.203 ops/s
# Warmup Iteration  15: 128550.004 ops/s
# Warmup Iteration  16: 152853.555 ops/s
# Warmup Iteration  17: 160952.602 ops/s
# Warmup Iteration  18: 160569.095 ops/s
# Warmup Iteration  19: 160441.805 ops/s
# Warmup Iteration  20: 160136.213 ops/s
# Warmup Iteration  21: 160322.001 ops/s
# Warmup Iteration  22: 160635.620 ops/s
# Warmup Iteration  23: 160899.711 ops/s
# Warmup Iteration  24: 161202.446 ops/s
# Warmup Iteration  25: 160695.175 ops/s
# Warmup Iteration  26: 160554.954 ops/s
# Warmup Iteration  27: 161449.699 ops/s
# Warmup Iteration  28: 161496.740 ops/s
# Warmup Iteration  29: 161422.164 ops/s
# Warmup Iteration  30: 161008.733 ops/s
Iteration   1: 161223.874 ops/s
Iteration   2: 161539.383 ops/s
Iteration   3: 160544.824 ops/s
Iteration   4: 160760.117 ops/s
Iteration   5: 161075.215 ops/s
Iteration   6: 161207.592 ops/s
Iteration   7: 160365.299 ops/s
Iteration   8: 160867.351 ops/s
Iteration   9: 160918.052 ops/s
Iteration  10: 160938.648 ops/s
Iteration  11: 161071.169 ops/s
Iteration  12: 161584.551 ops/s
Iteration  13: 161153.086 ops/s
Iteration  14: 161029.301 ops/s
Iteration  15: 160456.836 ops/s
Iteration  16: 160925.077 ops/s
Iteration  17: 161615.866 ops/s
Iteration  18: 160302.318 ops/s
Iteration  19: 161537.597 ops/s
Iteration  20: 160237.052 ops/s
Iteration  21: 160888.926 ops/s
Iteration  22: 161095.156 ops/s
Iteration  23: 160680.668 ops/s
Iteration  24: 160640.757 ops/s
Iteration  25: 160905.585 ops/s
Iteration  26: 161596.713 ops/s
Iteration  27: 160963.304 ops/s
Iteration  28: 161010.133 ops/s
Iteration  29: 160802.128 ops/s
Iteration  30: 161086.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringThrows":
  160967.443 ±(99.9%) 252.071 ops/s [Average]
  (min, avg, max) = (160237.052, 160967.443, 161615.866), stdev = 377.288
  CI (99.9%): [160715.373, 161219.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_appendStringThrows  thrpt   30  160967.443 ± 252.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4232097.944 ops/s
# Warmup Iteration   2: 6964950.835 ops/s
# Warmup Iteration   3: 6979360.529 ops/s
# Warmup Iteration   4: 5813920.814 ops/s
# Warmup Iteration   5: 7019210.421 ops/s
# Warmup Iteration   6: 7012015.340 ops/s
# Warmup Iteration   7: 6986496.712 ops/s
# Warmup Iteration   8: 6987158.214 ops/s
# Warmup Iteration   9: 7024442.506 ops/s
# Warmup Iteration  10: 7035848.394 ops/s
# Warmup Iteration  11: 7024613.975 ops/s
# Warmup Iteration  12: 7014288.715 ops/s
# Warmup Iteration  13: 6986393.280 ops/s
# Warmup Iteration  14: 6965500.146 ops/s
# Warmup Iteration  15: 7011907.534 ops/s
# Warmup Iteration  16: 6982092.458 ops/s
# Warmup Iteration  17: 7006010.764 ops/s
# Warmup Iteration  18: 6983012.268 ops/s
# Warmup Iteration  19: 6971107.790 ops/s
# Warmup Iteration  20: 7013782.105 ops/s
# Warmup Iteration  21: 6995086.143 ops/s
# Warmup Iteration  22: 6987329.942 ops/s
# Warmup Iteration  23: 7045747.820 ops/s
# Warmup Iteration  24: 7022993.620 ops/s
# Warmup Iteration  25: 7016705.443 ops/s
# Warmup Iteration  26: 7014236.154 ops/s
# Warmup Iteration  27: 7021833.737 ops/s
# Warmup Iteration  28: 7018638.199 ops/s
# Warmup Iteration  29: 7012178.813 ops/s
# Warmup Iteration  30: 6975729.583 ops/s
Iteration   1: 6952709.393 ops/s
Iteration   2: 7021300.999 ops/s
Iteration   3: 6965930.101 ops/s
Iteration   4: 6966529.765 ops/s
Iteration   5: 6998318.965 ops/s
Iteration   6: 6951815.396 ops/s
Iteration   7: 6920962.148 ops/s
Iteration   8: 7001432.203 ops/s
Iteration   9: 6952665.495 ops/s
Iteration  10: 7004485.984 ops/s
Iteration  11: 6940006.145 ops/s
Iteration  12: 6929867.652 ops/s
Iteration  13: 6953782.907 ops/s
Iteration  14: 6950872.787 ops/s
Iteration  15: 7028755.950 ops/s
Iteration  16: 7009448.023 ops/s
Iteration  17: 7007361.252 ops/s
Iteration  18: 6962415.224 ops/s
Iteration  19: 6981733.865 ops/s
Iteration  20: 7011712.078 ops/s
Iteration  21: 6948117.854 ops/s
Iteration  22: 6984101.521 ops/s
Iteration  23: 6957145.507 ops/s
Iteration  24: 6958049.348 ops/s
Iteration  25: 7002759.064 ops/s
Iteration  26: 6983585.095 ops/s
Iteration  27: 7007182.618 ops/s
Iteration  28: 6962617.516 ops/s
Iteration  29: 7040393.268 ops/s
Iteration  30: 7041678.063 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparator":
  6979924.540 ±(99.9%) 21939.420 ops/s [Average]
  (min, avg, max) = (6920962.148, 6979924.540, 7041678.063), stdev = 32837.894
  CI (99.9%): [6957985.119, 7001863.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  6979924.540 ± 21939.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3886322.386 ops/s
# Warmup Iteration   2: 8601440.598 ops/s
# Warmup Iteration   3: 7732267.542 ops/s
# Warmup Iteration   4: 8302894.818 ops/s
# Warmup Iteration   5: 8788031.725 ops/s
# Warmup Iteration   6: 8784125.532 ops/s
# Warmup Iteration   7: 8776331.130 ops/s
# Warmup Iteration   8: 8801461.084 ops/s
# Warmup Iteration   9: 8776669.960 ops/s
# Warmup Iteration  10: 8800963.059 ops/s
# Warmup Iteration  11: 8809723.961 ops/s
# Warmup Iteration  12: 8791260.711 ops/s
# Warmup Iteration  13: 8788695.605 ops/s
# Warmup Iteration  14: 8823282.328 ops/s
# Warmup Iteration  15: 8814698.420 ops/s
# Warmup Iteration  16: 8800784.051 ops/s
# Warmup Iteration  17: 8757251.980 ops/s
# Warmup Iteration  18: 8824326.599 ops/s
# Warmup Iteration  19: 8824956.186 ops/s
# Warmup Iteration  20: 8808691.650 ops/s
# Warmup Iteration  21: 8820846.029 ops/s
# Warmup Iteration  22: 8788058.540 ops/s
# Warmup Iteration  23: 8799220.803 ops/s
# Warmup Iteration  24: 8798618.976 ops/s
# Warmup Iteration  25: 8818832.354 ops/s
# Warmup Iteration  26: 8784232.175 ops/s
# Warmup Iteration  27: 8788943.692 ops/s
# Warmup Iteration  28: 8789625.451 ops/s
# Warmup Iteration  29: 8792424.265 ops/s
# Warmup Iteration  30: 8789035.035 ops/s
Iteration   1: 8795671.055 ops/s
Iteration   2: 8815227.111 ops/s
Iteration   3: 8808380.964 ops/s
Iteration   4: 8797850.635 ops/s
Iteration   5: 8763021.533 ops/s
Iteration   6: 8760735.905 ops/s
Iteration   7: 8754330.069 ops/s
Iteration   8: 8763137.949 ops/s
Iteration   9: 8814352.567 ops/s
Iteration  10: 8793987.160 ops/s
Iteration  11: 8841668.645 ops/s
Iteration  12: 8807121.661 ops/s
Iteration  13: 8782708.202 ops/s
Iteration  14: 8807527.331 ops/s
Iteration  15: 8843241.940 ops/s
Iteration  16: 8797376.435 ops/s
Iteration  17: 8812934.317 ops/s
Iteration  18: 8787231.844 ops/s
Iteration  19: 8790998.778 ops/s
Iteration  20: 8836812.965 ops/s
Iteration  21: 8779301.730 ops/s
Iteration  22: 8696322.107 ops/s
Iteration  23: 8788017.139 ops/s
Iteration  24: 8810125.616 ops/s
Iteration  25: 8769003.485 ops/s
Iteration  26: 8773500.439 ops/s
Iteration  27: 8779727.363 ops/s
Iteration  28: 8780794.064 ops/s
Iteration  29: 8794048.282 ops/s
Iteration  30: 8827945.713 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  8792436.767 ±(99.9%) 19879.143 ops/s [Average]
  (min, avg, max) = (8696322.107, 8792436.767, 8843241.940), stdev = 29754.167
  CI (99.9%): [8772557.624, 8812315.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  8792436.767 ± 19879.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37227296.983 ops/s
# Warmup Iteration   2: 75750823.006 ops/s
# Warmup Iteration   3: 64886778.284 ops/s
# Warmup Iteration   4: 76333993.642 ops/s
# Warmup Iteration   5: 76351715.237 ops/s
# Warmup Iteration   6: 76095585.674 ops/s
# Warmup Iteration   7: 76318286.429 ops/s
# Warmup Iteration   8: 76533251.236 ops/s
# Warmup Iteration   9: 76563397.011 ops/s
# Warmup Iteration  10: 76253644.689 ops/s
# Warmup Iteration  11: 76386831.890 ops/s
# Warmup Iteration  12: 76581867.270 ops/s
# Warmup Iteration  13: 76266114.087 ops/s
# Warmup Iteration  14: 76285929.207 ops/s
# Warmup Iteration  15: 76384431.094 ops/s
# Warmup Iteration  16: 76250122.647 ops/s
# Warmup Iteration  17: 76300817.030 ops/s
# Warmup Iteration  18: 76216631.915 ops/s
# Warmup Iteration  19: 76111906.580 ops/s
# Warmup Iteration  20: 76403083.481 ops/s
# Warmup Iteration  21: 76332160.338 ops/s
# Warmup Iteration  22: 76225772.480 ops/s
# Warmup Iteration  23: 76408199.274 ops/s
# Warmup Iteration  24: 76495213.950 ops/s
# Warmup Iteration  25: 76184917.720 ops/s
# Warmup Iteration  26: 76194657.740 ops/s
# Warmup Iteration  27: 76286902.707 ops/s
# Warmup Iteration  28: 76371001.577 ops/s
# Warmup Iteration  29: 76092302.652 ops/s
# Warmup Iteration  30: 76249449.442 ops/s
Iteration   1: 76165062.132 ops/s
Iteration   2: 75647083.822 ops/s
Iteration   3: 76247420.598 ops/s
Iteration   4: 76052551.594 ops/s
Iteration   5: 76281209.213 ops/s
Iteration   6: 76454572.006 ops/s
Iteration   7: 76310672.131 ops/s
Iteration   8: 76435914.268 ops/s
Iteration   9: 76460800.340 ops/s
Iteration  10: 76251816.431 ops/s
Iteration  11: 76537554.471 ops/s
Iteration  12: 76006909.555 ops/s
Iteration  13: 76618806.142 ops/s
Iteration  14: 76317999.456 ops/s
Iteration  15: 76357444.941 ops/s
Iteration  16: 76459961.650 ops/s
Iteration  17: 76147304.091 ops/s
Iteration  18: 76118168.698 ops/s
Iteration  19: 76222081.548 ops/s
Iteration  20: 76206875.488 ops/s
Iteration  21: 76265191.096 ops/s
Iteration  22: 76435895.382 ops/s
Iteration  23: 76342547.308 ops/s
Iteration  24: 76142631.920 ops/s
Iteration  25: 76318436.100 ops/s
Iteration  26: 76381812.866 ops/s
Iteration  27: 76339613.884 ops/s
Iteration  28: 76268733.280 ops/s
Iteration  29: 76595549.529 ops/s
Iteration  30: 75850211.922 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asLazy":
  76274694.395 ±(99.9%) 138714.984 ops/s [Average]
  (min, avg, max) = (75647083.822, 76274694.395, 76618806.142), stdev = 207622.074
  CI (99.9%): [76135979.411, 76413409.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_asLazy  thrpt   30  76274694.395 ± 138714.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3715580.185 ops/s
# Warmup Iteration   2: 8668147.856 ops/s
# Warmup Iteration   3: 7345136.789 ops/s
# Warmup Iteration   4: 8812307.748 ops/s
# Warmup Iteration   5: 8812588.873 ops/s
# Warmup Iteration   6: 8798221.515 ops/s
# Warmup Iteration   7: 8823091.950 ops/s
# Warmup Iteration   8: 8795093.554 ops/s
# Warmup Iteration   9: 8834460.357 ops/s
# Warmup Iteration  10: 8818055.313 ops/s
# Warmup Iteration  11: 8767849.430 ops/s
# Warmup Iteration  12: 8809206.592 ops/s
# Warmup Iteration  13: 8825763.464 ops/s
# Warmup Iteration  14: 8812334.015 ops/s
# Warmup Iteration  15: 8810966.293 ops/s
# Warmup Iteration  16: 8818689.044 ops/s
# Warmup Iteration  17: 8816461.153 ops/s
# Warmup Iteration  18: 8784978.027 ops/s
# Warmup Iteration  19: 8816392.522 ops/s
# Warmup Iteration  20: 8796656.093 ops/s
# Warmup Iteration  21: 8805290.138 ops/s
# Warmup Iteration  22: 8759876.431 ops/s
# Warmup Iteration  23: 8753928.613 ops/s
# Warmup Iteration  24: 8814507.489 ops/s
# Warmup Iteration  25: 8801519.811 ops/s
# Warmup Iteration  26: 8802747.769 ops/s
# Warmup Iteration  27: 8802826.207 ops/s
# Warmup Iteration  28: 8802896.729 ops/s
# Warmup Iteration  29: 8768704.740 ops/s
# Warmup Iteration  30: 8807524.006 ops/s
Iteration   1: 8805884.810 ops/s
Iteration   2: 8805692.350 ops/s
Iteration   3: 8796902.017 ops/s
Iteration   4: 8773630.272 ops/s
Iteration   5: 8760881.361 ops/s
Iteration   6: 8807101.831 ops/s
Iteration   7: 8784860.965 ops/s
Iteration   8: 8795226.820 ops/s
Iteration   9: 8783547.613 ops/s
Iteration  10: 8790637.649 ops/s
Iteration  11: 8816353.338 ops/s
Iteration  12: 8835802.776 ops/s
Iteration  13: 8783849.428 ops/s
Iteration  14: 8800940.333 ops/s
Iteration  15: 8769163.182 ops/s
Iteration  16: 8794518.632 ops/s
Iteration  17: 8798112.469 ops/s
Iteration  18: 8857242.071 ops/s
Iteration  19: 8798791.626 ops/s
Iteration  20: 8836268.692 ops/s
Iteration  21: 8782471.256 ops/s
Iteration  22: 8782819.199 ops/s
Iteration  23: 8805496.450 ops/s
Iteration  24: 8831739.793 ops/s
Iteration  25: 8790861.364 ops/s
Iteration  26: 8797986.893 ops/s
Iteration  27: 8812047.352 ops/s
Iteration  28: 8786918.145 ops/s
Iteration  29: 8803296.292 ops/s
Iteration  30: 8826467.990 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asReversed":
  8800517.099 ±(99.9%) 14199.589 ops/s [Average]
  (min, avg, max) = (8760881.361, 8800517.099, 8857242.071), stdev = 21253.278
  CI (99.9%): [8786317.510, 8814716.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_asReversed  thrpt   30  8800517.099 ± 14199.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28448829.288 ops/s
# Warmup Iteration   2: 54111715.008 ops/s
# Warmup Iteration   3: 46299143.021 ops/s
# Warmup Iteration   4: 54210778.886 ops/s
# Warmup Iteration   5: 54190746.431 ops/s
# Warmup Iteration   6: 54093403.385 ops/s
# Warmup Iteration   7: 54185604.287 ops/s
# Warmup Iteration   8: 54056901.161 ops/s
# Warmup Iteration   9: 54009199.194 ops/s
# Warmup Iteration  10: 53629962.489 ops/s
# Warmup Iteration  11: 54063476.890 ops/s
# Warmup Iteration  12: 54125300.913 ops/s
# Warmup Iteration  13: 54069921.058 ops/s
# Warmup Iteration  14: 54194944.510 ops/s
# Warmup Iteration  15: 54055769.398 ops/s
# Warmup Iteration  16: 53903774.104 ops/s
# Warmup Iteration  17: 54060904.400 ops/s
# Warmup Iteration  18: 54226848.037 ops/s
# Warmup Iteration  19: 54159378.468 ops/s
# Warmup Iteration  20: 54098559.989 ops/s
# Warmup Iteration  21: 53938396.917 ops/s
# Warmup Iteration  22: 54017730.400 ops/s
# Warmup Iteration  23: 54024212.130 ops/s
# Warmup Iteration  24: 54095325.071 ops/s
# Warmup Iteration  25: 54044252.430 ops/s
# Warmup Iteration  26: 54322991.628 ops/s
# Warmup Iteration  27: 54086992.008 ops/s
# Warmup Iteration  28: 53900803.482 ops/s
# Warmup Iteration  29: 54002460.984 ops/s
# Warmup Iteration  30: 53914482.102 ops/s
Iteration   1: 54263867.549 ops/s
Iteration   2: 54091851.772 ops/s
Iteration   3: 54101647.547 ops/s
Iteration   4: 54079629.159 ops/s
Iteration   5: 54169555.937 ops/s
Iteration   6: 54007981.132 ops/s
Iteration   7: 54049683.826 ops/s
Iteration   8: 54199777.254 ops/s
Iteration   9: 54123751.582 ops/s
Iteration  10: 54024067.642 ops/s
Iteration  11: 54133047.454 ops/s
Iteration  12: 53920217.296 ops/s
Iteration  13: 54093650.184 ops/s
Iteration  14: 53595842.838 ops/s
Iteration  15: 54075663.481 ops/s
Iteration  16: 54288030.881 ops/s
Iteration  17: 53579829.913 ops/s
Iteration  18: 54204098.344 ops/s
Iteration  19: 54105432.816 ops/s
Iteration  20: 54018584.731 ops/s
Iteration  21: 53946723.498 ops/s
Iteration  22: 54316945.206 ops/s
Iteration  23: 54201742.127 ops/s
Iteration  24: 54088788.394 ops/s
Iteration  25: 54121203.576 ops/s
Iteration  26: 54018215.136 ops/s
Iteration  27: 53987121.756 ops/s
Iteration  28: 54248286.227 ops/s
Iteration  29: 53958032.326 ops/s
Iteration  30: 54171522.167 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asSynchronized":
  54072826.392 ±(99.9%) 110768.284 ops/s [Average]
  (min, avg, max) = (53579829.913, 54072826.392, 54316945.206), stdev = 165792.766
  CI (99.9%): [53962058.107, 54183594.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_asSynchronized  thrpt   30  54072826.392 ± 110768.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38767025.124 ops/s
# Warmup Iteration   2: 72082909.747 ops/s
# Warmup Iteration   3: 64826540.660 ops/s
# Warmup Iteration   4: 76603694.191 ops/s
# Warmup Iteration   5: 76558393.618 ops/s
# Warmup Iteration   6: 76439145.250 ops/s
# Warmup Iteration   7: 76515543.847 ops/s
# Warmup Iteration   8: 76555488.698 ops/s
# Warmup Iteration   9: 76633719.301 ops/s
# Warmup Iteration  10: 76372423.293 ops/s
# Warmup Iteration  11: 76426827.796 ops/s
# Warmup Iteration  12: 76441668.050 ops/s
# Warmup Iteration  13: 76320038.593 ops/s
# Warmup Iteration  14: 76202974.963 ops/s
# Warmup Iteration  15: 76510447.633 ops/s
# Warmup Iteration  16: 76409195.984 ops/s
# Warmup Iteration  17: 76465889.868 ops/s
# Warmup Iteration  18: 76396514.865 ops/s
# Warmup Iteration  19: 76461945.684 ops/s
# Warmup Iteration  20: 76517419.509 ops/s
# Warmup Iteration  21: 76373828.237 ops/s
# Warmup Iteration  22: 76603094.660 ops/s
# Warmup Iteration  23: 76498847.531 ops/s
# Warmup Iteration  24: 76455044.618 ops/s
# Warmup Iteration  25: 76549199.022 ops/s
# Warmup Iteration  26: 76589634.356 ops/s
# Warmup Iteration  27: 76531052.161 ops/s
# Warmup Iteration  28: 76684948.861 ops/s
# Warmup Iteration  29: 76593583.670 ops/s
# Warmup Iteration  30: 76656744.948 ops/s
Iteration   1: 76333788.767 ops/s
Iteration   2: 76628281.318 ops/s
Iteration   3: 76496112.740 ops/s
Iteration   4: 76530347.837 ops/s
Iteration   5: 76734390.239 ops/s
Iteration   6: 76324979.512 ops/s
Iteration   7: 76711773.387 ops/s
Iteration   8: 76656890.619 ops/s
Iteration   9: 76274596.347 ops/s
Iteration  10: 76239420.628 ops/s
Iteration  11: 76551725.742 ops/s
Iteration  12: 76599350.102 ops/s
Iteration  13: 76579327.288 ops/s
Iteration  14: 76425071.112 ops/s
Iteration  15: 76142664.092 ops/s
Iteration  16: 76164530.474 ops/s
Iteration  17: 76515062.552 ops/s
Iteration  18: 76449473.855 ops/s
Iteration  19: 76687838.619 ops/s
Iteration  20: 76626469.785 ops/s
Iteration  21: 76487358.525 ops/s
Iteration  22: 76502866.166 ops/s
Iteration  23: 76398385.270 ops/s
Iteration  24: 76493694.417 ops/s
Iteration  25: 76573129.193 ops/s
Iteration  26: 76474071.445 ops/s
Iteration  27: 76637676.255 ops/s
Iteration  28: 76369465.714 ops/s
Iteration  29: 76638923.452 ops/s
Iteration  30: 76062231.087 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_asUnmodifiable":
  76476996.551 ±(99.9%) 116721.395 ops/s [Average]
  (min, avg, max) = (76062231.087, 76476996.551, 76734390.239), stdev = 174703.103
  CI (99.9%): [76360275.156, 76593717.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  76476996.551 ± 116721.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4364182.767 ops/s
# Warmup Iteration   2: 5059549.636 ops/s
# Warmup Iteration   3: 6576987.610 ops/s
# Warmup Iteration   4: 6611108.426 ops/s
# Warmup Iteration   5: 6596122.775 ops/s
# Warmup Iteration   6: 6614072.867 ops/s
# Warmup Iteration   7: 6597730.160 ops/s
# Warmup Iteration   8: 6586246.251 ops/s
# Warmup Iteration   9: 6303997.532 ops/s
# Warmup Iteration  10: 5756684.302 ops/s
# Warmup Iteration  11: 6606739.170 ops/s
# Warmup Iteration  12: 6621803.513 ops/s
# Warmup Iteration  13: 6603700.553 ops/s
# Warmup Iteration  14: 6614110.286 ops/s
# Warmup Iteration  15: 6606424.754 ops/s
# Warmup Iteration  16: 6627043.890 ops/s
# Warmup Iteration  17: 6608874.085 ops/s
# Warmup Iteration  18: 6610434.318 ops/s
# Warmup Iteration  19: 6604105.579 ops/s
# Warmup Iteration  20: 6617032.094 ops/s
# Warmup Iteration  21: 6600485.484 ops/s
# Warmup Iteration  22: 6607596.239 ops/s
# Warmup Iteration  23: 6597918.080 ops/s
# Warmup Iteration  24: 6600640.158 ops/s
# Warmup Iteration  25: 6609896.890 ops/s
# Warmup Iteration  26: 6604776.585 ops/s
# Warmup Iteration  27: 6596543.813 ops/s
# Warmup Iteration  28: 6615233.852 ops/s
# Warmup Iteration  29: 6614294.689 ops/s
# Warmup Iteration  30: 6624416.712 ops/s
Iteration   1: 6596473.486 ops/s
Iteration   2: 6625214.016 ops/s
Iteration   3: 6586230.004 ops/s
Iteration   4: 6598536.389 ops/s
Iteration   5: 6610841.110 ops/s
Iteration   6: 6586546.305 ops/s
Iteration   7: 6600498.246 ops/s
Iteration   8: 6607864.780 ops/s
Iteration   9: 6607366.501 ops/s
Iteration  10: 6600850.018 ops/s
Iteration  11: 6595694.654 ops/s
Iteration  12: 6625986.422 ops/s
Iteration  13: 6596134.865 ops/s
Iteration  14: 6618928.768 ops/s
Iteration  15: 6634835.448 ops/s
Iteration  16: 6621776.219 ops/s
Iteration  17: 6639230.134 ops/s
Iteration  18: 6590798.101 ops/s
Iteration  19: 6601298.589 ops/s
Iteration  20: 6598050.388 ops/s
Iteration  21: 6636250.372 ops/s
Iteration  22: 6608109.561 ops/s
Iteration  23: 6586413.249 ops/s
Iteration  24: 6610899.983 ops/s
Iteration  25: 6636326.663 ops/s
Iteration  26: 6609696.095 ops/s
Iteration  27: 6626037.827 ops/s
Iteration  28: 6595135.408 ops/s
Iteration  29: 6584471.639 ops/s
Iteration  30: 6601387.884 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearch":
  6607929.437 ±(99.9%) 10953.525 ops/s [Average]
  (min, avg, max) = (6584471.639, 6607929.437, 6639230.134), stdev = 16394.722
  CI (99.9%): [6596975.913, 6618882.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_binarySearch  thrpt   30  6607929.437 ± 10953.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4202250.991 ops/s
# Warmup Iteration   2: 4765636.495 ops/s
# Warmup Iteration   3: 6301502.228 ops/s
# Warmup Iteration   4: 6316278.593 ops/s
# Warmup Iteration   5: 6273780.656 ops/s
# Warmup Iteration   6: 6316877.140 ops/s
# Warmup Iteration   7: 6311473.516 ops/s
# Warmup Iteration   8: 6313888.603 ops/s
# Warmup Iteration   9: 6318988.332 ops/s
# Warmup Iteration  10: 5199764.899 ops/s
# Warmup Iteration  11: 6300176.422 ops/s
# Warmup Iteration  12: 6303247.093 ops/s
# Warmup Iteration  13: 6310587.889 ops/s
# Warmup Iteration  14: 6312399.999 ops/s
# Warmup Iteration  15: 6289398.059 ops/s
# Warmup Iteration  16: 6320647.926 ops/s
# Warmup Iteration  17: 6313940.314 ops/s
# Warmup Iteration  18: 6308810.214 ops/s
# Warmup Iteration  19: 6316321.506 ops/s
# Warmup Iteration  20: 6308956.029 ops/s
# Warmup Iteration  21: 6312248.019 ops/s
# Warmup Iteration  22: 6302857.695 ops/s
# Warmup Iteration  23: 6306054.070 ops/s
# Warmup Iteration  24: 6294912.037 ops/s
# Warmup Iteration  25: 6305451.510 ops/s
# Warmup Iteration  26: 6315644.042 ops/s
# Warmup Iteration  27: 6303470.486 ops/s
# Warmup Iteration  28: 6299273.043 ops/s
# Warmup Iteration  29: 6306876.352 ops/s
# Warmup Iteration  30: 6317076.898 ops/s
Iteration   1: 6317829.479 ops/s
Iteration   2: 6321546.350 ops/s
Iteration   3: 6301694.956 ops/s
Iteration   4: 6323505.902 ops/s
Iteration   5: 6325287.237 ops/s
Iteration   6: 6307705.479 ops/s
Iteration   7: 6308339.044 ops/s
Iteration   8: 6309751.517 ops/s
Iteration   9: 6312310.405 ops/s
Iteration  10: 6299659.311 ops/s
Iteration  11: 6309691.532 ops/s
Iteration  12: 6320958.621 ops/s
Iteration  13: 6317862.303 ops/s
Iteration  14: 6302020.805 ops/s
Iteration  15: 6319181.917 ops/s
Iteration  16: 6300593.687 ops/s
Iteration  17: 6310896.197 ops/s
Iteration  18: 6307723.574 ops/s
Iteration  19: 6313313.737 ops/s
Iteration  20: 6301582.405 ops/s
Iteration  21: 6299446.089 ops/s
Iteration  22: 6306049.878 ops/s
Iteration  23: 6302849.319 ops/s
Iteration  24: 6304450.709 ops/s
Iteration  25: 6310052.110 ops/s
Iteration  26: 6312567.162 ops/s
Iteration  27: 6297162.240 ops/s
Iteration  28: 6308734.731 ops/s
Iteration  29: 6300791.820 ops/s
Iteration  30: 6317991.983 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_binarySearchWithComparator":
  6309718.350 ±(99.9%) 5313.903 ops/s [Average]
  (min, avg, max) = (6297162.240, 6309718.350, 6325287.237), stdev = 7953.601
  CI (99.9%): [6304404.447, 6315032.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  6309718.350 ± 5313.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658932.698 ops/s
# Warmup Iteration   2: 1518605.422 ops/s
# Warmup Iteration   3: 1562306.432 ops/s
# Warmup Iteration   4: 1294828.412 ops/s
# Warmup Iteration   5: 1564815.027 ops/s
# Warmup Iteration   6: 1563120.742 ops/s
# Warmup Iteration   7: 1569309.702 ops/s
# Warmup Iteration   8: 1565178.894 ops/s
# Warmup Iteration   9: 1566369.128 ops/s
# Warmup Iteration  10: 1564476.718 ops/s
# Warmup Iteration  11: 1565618.468 ops/s
# Warmup Iteration  12: 1564433.801 ops/s
# Warmup Iteration  13: 1565211.564 ops/s
# Warmup Iteration  14: 1567289.768 ops/s
# Warmup Iteration  15: 1564695.764 ops/s
# Warmup Iteration  16: 1564482.941 ops/s
# Warmup Iteration  17: 1567299.705 ops/s
# Warmup Iteration  18: 1563317.836 ops/s
# Warmup Iteration  19: 1562201.014 ops/s
# Warmup Iteration  20: 1563419.828 ops/s
# Warmup Iteration  21: 1566324.381 ops/s
# Warmup Iteration  22: 1569393.519 ops/s
# Warmup Iteration  23: 1564293.004 ops/s
# Warmup Iteration  24: 1564539.608 ops/s
# Warmup Iteration  25: 1566862.794 ops/s
# Warmup Iteration  26: 1566538.695 ops/s
# Warmup Iteration  27: 1563679.577 ops/s
# Warmup Iteration  28: 1566268.749 ops/s
# Warmup Iteration  29: 1565731.240 ops/s
# Warmup Iteration  30: 1564358.886 ops/s
Iteration   1: 1566043.954 ops/s
Iteration   2: 1565640.593 ops/s
Iteration   3: 1566939.946 ops/s
Iteration   4: 1568573.896 ops/s
Iteration   5: 1564522.977 ops/s
Iteration   6: 1572776.713 ops/s
Iteration   7: 1570431.024 ops/s
Iteration   8: 1562760.357 ops/s
Iteration   9: 1566645.797 ops/s
Iteration  10: 1570877.511 ops/s
Iteration  11: 1567674.290 ops/s
Iteration  12: 1563531.401 ops/s
Iteration  13: 1566442.357 ops/s
Iteration  14: 1565203.997 ops/s
Iteration  15: 1566857.292 ops/s
Iteration  16: 1560025.704 ops/s
Iteration  17: 1565280.347 ops/s
Iteration  18: 1558743.337 ops/s
Iteration  19: 1559289.385 ops/s
Iteration  20: 1570316.523 ops/s
Iteration  21: 1568023.271 ops/s
Iteration  22: 1566557.620 ops/s
Iteration  23: 1569917.856 ops/s
Iteration  24: 1562946.739 ops/s
Iteration  25: 1561193.044 ops/s
Iteration  26: 1563068.153 ops/s
Iteration  27: 1570026.881 ops/s
Iteration  28: 1570952.073 ops/s
Iteration  29: 1565757.934 ops/s
Iteration  30: 1558206.055 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk":
  1565840.901 ±(99.9%) 2586.518 ops/s [Average]
  (min, avg, max) = (1558206.055, 1565840.901, 1572776.713), stdev = 3871.379
  CI (99.9%): [1563254.383, 1568427.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_chunk  thrpt   30  1565840.901 ± 2586.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29803497.357 ops/s
# Warmup Iteration   2: 59799203.634 ops/s
# Warmup Iteration   3: 50961738.741 ops/s
# Warmup Iteration   4: 60255621.106 ops/s
# Warmup Iteration   5: 59990193.890 ops/s
# Warmup Iteration   6: 59966441.630 ops/s
# Warmup Iteration   7: 59998032.826 ops/s
# Warmup Iteration   8: 59783947.881 ops/s
# Warmup Iteration   9: 59965430.448 ops/s
# Warmup Iteration  10: 60081049.685 ops/s
# Warmup Iteration  11: 60004752.355 ops/s
# Warmup Iteration  12: 60042953.814 ops/s
# Warmup Iteration  13: 59854372.025 ops/s
# Warmup Iteration  14: 60049421.784 ops/s
# Warmup Iteration  15: 60040413.024 ops/s
# Warmup Iteration  16: 59959261.749 ops/s
# Warmup Iteration  17: 59816537.192 ops/s
# Warmup Iteration  18: 59618831.703 ops/s
# Warmup Iteration  19: 59667322.350 ops/s
# Warmup Iteration  20: 59731967.403 ops/s
# Warmup Iteration  21: 59532043.782 ops/s
# Warmup Iteration  22: 59662097.390 ops/s
# Warmup Iteration  23: 59828418.081 ops/s
# Warmup Iteration  24: 59686141.116 ops/s
# Warmup Iteration  25: 59728420.956 ops/s
# Warmup Iteration  26: 59551682.839 ops/s
# Warmup Iteration  27: 59626448.556 ops/s
# Warmup Iteration  28: 59505056.004 ops/s
# Warmup Iteration  29: 59573432.873 ops/s
# Warmup Iteration  30: 59714359.004 ops/s
Iteration   1: 59803274.345 ops/s
Iteration   2: 59726291.942 ops/s
Iteration   3: 59878520.870 ops/s
Iteration   4: 59690105.982 ops/s
Iteration   5: 59211120.506 ops/s
Iteration   6: 59533462.601 ops/s
Iteration   7: 59432997.444 ops/s
Iteration   8: 59242300.401 ops/s
Iteration   9: 59769039.044 ops/s
Iteration  10: 59346844.132 ops/s
Iteration  11: 59935949.220 ops/s
Iteration  12: 59824545.759 ops/s
Iteration  13: 59825416.069 ops/s
Iteration  14: 59490565.280 ops/s
Iteration  15: 59747684.696 ops/s
Iteration  16: 59720479.034 ops/s
Iteration  17: 59136104.476 ops/s
Iteration  18: 59652954.345 ops/s
Iteration  19: 59595753.325 ops/s
Iteration  20: 59639623.275 ops/s
Iteration  21: 59802903.743 ops/s
Iteration  22: 59672333.808 ops/s
Iteration  23: 59495435.319 ops/s
Iteration  24: 59905535.150 ops/s
Iteration  25: 59444768.475 ops/s
Iteration  26: 59334366.498 ops/s
Iteration  27: 59609721.335 ops/s
Iteration  28: 59565659.863 ops/s
Iteration  29: 59849027.737 ops/s
Iteration  30: 59952822.899 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_empty":
  59627853.586 ±(99.9%) 148824.264 ops/s [Average]
  (min, avg, max) = (59136104.476, 59627853.586, 59952822.899), stdev = 222753.170
  CI (99.9%): [59479029.321, 59776677.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_chunk_empty  thrpt   30  59627853.586 ± 148824.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2887245.482 ops/s
# Warmup Iteration   2: 5858412.190 ops/s
# Warmup Iteration   3: 6051301.489 ops/s
# Warmup Iteration   4: 6089733.903 ops/s
# Warmup Iteration   5: 5064827.376 ops/s
# Warmup Iteration   6: 6085261.176 ops/s
# Warmup Iteration   7: 6098782.094 ops/s
# Warmup Iteration   8: 6098985.220 ops/s
# Warmup Iteration   9: 6090856.123 ops/s
# Warmup Iteration  10: 6095027.796 ops/s
# Warmup Iteration  11: 6090579.778 ops/s
# Warmup Iteration  12: 6098039.074 ops/s
# Warmup Iteration  13: 6083757.480 ops/s
# Warmup Iteration  14: 6078052.550 ops/s
# Warmup Iteration  15: 6097815.205 ops/s
# Warmup Iteration  16: 6103177.422 ops/s
# Warmup Iteration  17: 6097184.398 ops/s
# Warmup Iteration  18: 6090769.689 ops/s
# Warmup Iteration  19: 6095499.825 ops/s
# Warmup Iteration  20: 6087665.503 ops/s
# Warmup Iteration  21: 6090033.771 ops/s
# Warmup Iteration  22: 6088191.266 ops/s
# Warmup Iteration  23: 6093563.392 ops/s
# Warmup Iteration  24: 6087151.201 ops/s
# Warmup Iteration  25: 6097088.774 ops/s
# Warmup Iteration  26: 6105617.688 ops/s
# Warmup Iteration  27: 6089901.613 ops/s
# Warmup Iteration  28: 6101953.576 ops/s
# Warmup Iteration  29: 6087707.247 ops/s
# Warmup Iteration  30: 6091601.851 ops/s
Iteration   1: 6080394.479 ops/s
Iteration   2: 6094782.297 ops/s
Iteration   3: 6110023.120 ops/s
Iteration   4: 6091377.929 ops/s
Iteration   5: 6102823.936 ops/s
Iteration   6: 6108820.985 ops/s
Iteration   7: 6091600.033 ops/s
Iteration   8: 6086920.406 ops/s
Iteration   9: 6082719.035 ops/s
Iteration  10: 6099842.272 ops/s
Iteration  11: 6080825.911 ops/s
Iteration  12: 6087406.452 ops/s
Iteration  13: 6104635.717 ops/s
Iteration  14: 6083580.145 ops/s
Iteration  15: 6073651.619 ops/s
Iteration  16: 6064768.356 ops/s
Iteration  17: 6081021.044 ops/s
Iteration  18: 6095060.276 ops/s
Iteration  19: 6078002.562 ops/s
Iteration  20: 6114369.412 ops/s
Iteration  21: 6086750.786 ops/s
Iteration  22: 6096882.608 ops/s
Iteration  23: 6101462.232 ops/s
Iteration  24: 6091394.382 ops/s
Iteration  25: 6095302.507 ops/s
Iteration  26: 6097433.207 ops/s
Iteration  27: 6126368.411 ops/s
Iteration  28: 6085212.950 ops/s
Iteration  29: 6073951.868 ops/s
Iteration  30: 6088839.812 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_large_size":
  6091874.158 ±(99.9%) 8830.929 ops/s [Average]
  (min, avg, max) = (6064768.356, 6091874.158, 6126368.411), stdev = 13217.719
  CI (99.9%): [6083043.230, 6100705.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_chunk_large_size  thrpt   30  6091874.158 ± 8830.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4651780.696 ops/s
# Warmup Iteration   2: 12210590.087 ops/s
# Warmup Iteration   3: 10120899.246 ops/s
# Warmup Iteration   4: 12382223.352 ops/s
# Warmup Iteration   5: 12356887.924 ops/s
# Warmup Iteration   6: 12397077.804 ops/s
# Warmup Iteration   7: 12361086.289 ops/s
# Warmup Iteration   8: 12367992.027 ops/s
# Warmup Iteration   9: 12365173.123 ops/s
# Warmup Iteration  10: 12378345.633 ops/s
# Warmup Iteration  11: 12390387.380 ops/s
# Warmup Iteration  12: 12341672.605 ops/s
# Warmup Iteration  13: 12367199.502 ops/s
# Warmup Iteration  14: 12372146.389 ops/s
# Warmup Iteration  15: 12350083.946 ops/s
# Warmup Iteration  16: 12359361.410 ops/s
# Warmup Iteration  17: 12390104.451 ops/s
# Warmup Iteration  18: 12391904.810 ops/s
# Warmup Iteration  19: 12358385.817 ops/s
# Warmup Iteration  20: 12384765.660 ops/s
# Warmup Iteration  21: 12368475.686 ops/s
# Warmup Iteration  22: 12356594.582 ops/s
# Warmup Iteration  23: 12342128.639 ops/s
# Warmup Iteration  24: 12377904.906 ops/s
# Warmup Iteration  25: 12366869.332 ops/s
# Warmup Iteration  26: 12333873.495 ops/s
# Warmup Iteration  27: 12378636.077 ops/s
# Warmup Iteration  28: 12372309.466 ops/s
# Warmup Iteration  29: 12348751.224 ops/s
# Warmup Iteration  30: 12335189.646 ops/s
Iteration   1: 12349725.051 ops/s
Iteration   2: 12352261.495 ops/s
Iteration   3: 12326085.115 ops/s
Iteration   4: 12340260.077 ops/s
Iteration   5: 12323167.891 ops/s
Iteration   6: 12364024.512 ops/s
Iteration   7: 12386597.126 ops/s
Iteration   8: 12340704.188 ops/s
Iteration   9: 12404420.377 ops/s
Iteration  10: 12307510.064 ops/s
Iteration  11: 12390193.922 ops/s
Iteration  12: 12357073.515 ops/s
Iteration  13: 12396079.256 ops/s
Iteration  14: 12362426.918 ops/s
Iteration  15: 12398912.800 ops/s
Iteration  16: 12362730.572 ops/s
Iteration  17: 12378191.969 ops/s
Iteration  18: 12396849.168 ops/s
Iteration  19: 12395992.136 ops/s
Iteration  20: 12386068.401 ops/s
Iteration  21: 12339764.408 ops/s
Iteration  22: 12374996.758 ops/s
Iteration  23: 12383971.456 ops/s
Iteration  24: 12379924.929 ops/s
Iteration  25: 12303612.038 ops/s
Iteration  26: 12382699.513 ops/s
Iteration  27: 12383170.996 ops/s
Iteration  28: 12353881.033 ops/s
Iteration  29: 12359016.963 ops/s
Iteration  30: 12409810.912 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_single":
  12366337.452 ±(99.9%) 18999.426 ops/s [Average]
  (min, avg, max) = (12303612.038, 12366337.452, 12409810.912), stdev = 28437.448
  CI (99.9%): [12347338.026, 12385336.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_chunk_single  thrpt   30  12366337.452 ± 18999.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680337.761 ops/s
# Warmup Iteration   2: 742179.373 ops/s
# Warmup Iteration   3: 954404.339 ops/s
# Warmup Iteration   4: 947898.672 ops/s
# Warmup Iteration   5: 942787.941 ops/s
# Warmup Iteration   6: 946596.458 ops/s
# Warmup Iteration   7: 945601.646 ops/s
# Warmup Iteration   8: 944663.191 ops/s
# Warmup Iteration   9: 944141.397 ops/s
# Warmup Iteration  10: 944924.591 ops/s
# Warmup Iteration  11: 800362.379 ops/s
# Warmup Iteration  12: 947437.527 ops/s
# Warmup Iteration  13: 947741.915 ops/s
# Warmup Iteration  14: 947858.147 ops/s
# Warmup Iteration  15: 945624.743 ops/s
# Warmup Iteration  16: 947231.751 ops/s
# Warmup Iteration  17: 1005424.616 ops/s
# Warmup Iteration  18: 1003080.100 ops/s
# Warmup Iteration  19: 1006321.932 ops/s
# Warmup Iteration  20: 1004504.267 ops/s
# Warmup Iteration  21: 1003838.030 ops/s
# Warmup Iteration  22: 1002237.959 ops/s
# Warmup Iteration  23: 1002956.013 ops/s
# Warmup Iteration  24: 1005396.356 ops/s
# Warmup Iteration  25: 1004218.440 ops/s
# Warmup Iteration  26: 1005593.191 ops/s
# Warmup Iteration  27: 1006645.604 ops/s
# Warmup Iteration  28: 1005598.509 ops/s
# Warmup Iteration  29: 1006652.855 ops/s
# Warmup Iteration  30: 1005219.077 ops/s
Iteration   1: 1006315.304 ops/s
Iteration   2: 1008226.500 ops/s
Iteration   3: 1004306.498 ops/s
Iteration   4: 1008273.181 ops/s
Iteration   5: 1003011.432 ops/s
Iteration   6: 1007280.926 ops/s
Iteration   7: 1005632.864 ops/s
Iteration   8: 1008866.742 ops/s
Iteration   9: 1008376.204 ops/s
Iteration  10: 999767.207 ops/s
Iteration  11: 1000639.862 ops/s
Iteration  12: 1003988.232 ops/s
Iteration  13: 1004692.341 ops/s
Iteration  14: 1000367.856 ops/s
Iteration  15: 1006529.036 ops/s
Iteration  16: 1007273.261 ops/s
Iteration  17: 1006426.621 ops/s
Iteration  18: 1007872.074 ops/s
Iteration  19: 1004530.865 ops/s
Iteration  20: 1008018.228 ops/s
Iteration  21: 1002799.969 ops/s
Iteration  22: 1005136.314 ops/s
Iteration  23: 1003676.175 ops/s
Iteration  24: 1003553.897 ops/s
Iteration  25: 1004774.324 ops/s
Iteration  26: 1003345.091 ops/s
Iteration  27: 1008140.407 ops/s
Iteration  28: 1005302.047 ops/s
Iteration  29: 1007483.238 ops/s
Iteration  30: 1005739.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_chunk_zero_throws":
  1005344.865 ±(99.9%) 1664.147 ops/s [Average]
  (min, avg, max) = (999767.207, 1005344.865, 1008866.742), stdev = 2490.818
  CI (99.9%): [1003680.717, 1007009.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1005344.865 ± 1664.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9062776.663 ops/s
# Warmup Iteration   2: 12487007.555 ops/s
# Warmup Iteration   3: 10696874.513 ops/s
# Warmup Iteration   4: 12668562.133 ops/s
# Warmup Iteration   5: 12669160.622 ops/s
# Warmup Iteration   6: 12665844.155 ops/s
# Warmup Iteration   7: 12628229.855 ops/s
# Warmup Iteration   8: 12681473.858 ops/s
# Warmup Iteration   9: 12603914.335 ops/s
# Warmup Iteration  10: 12659241.977 ops/s
# Warmup Iteration  11: 12653280.716 ops/s
# Warmup Iteration  12: 12679140.984 ops/s
# Warmup Iteration  13: 12633613.873 ops/s
# Warmup Iteration  14: 12697354.549 ops/s
# Warmup Iteration  15: 12675687.833 ops/s
# Warmup Iteration  16: 12631595.079 ops/s
# Warmup Iteration  17: 12649754.477 ops/s
# Warmup Iteration  18: 12667974.871 ops/s
# Warmup Iteration  19: 12653682.039 ops/s
# Warmup Iteration  20: 12673610.925 ops/s
# Warmup Iteration  21: 12666234.465 ops/s
# Warmup Iteration  22: 12703636.077 ops/s
# Warmup Iteration  23: 12657212.805 ops/s
# Warmup Iteration  24: 12648683.634 ops/s
# Warmup Iteration  25: 12642813.572 ops/s
# Warmup Iteration  26: 12666302.108 ops/s
# Warmup Iteration  27: 12660871.150 ops/s
# Warmup Iteration  28: 12679518.208 ops/s
# Warmup Iteration  29: 12675296.875 ops/s
# Warmup Iteration  30: 12643566.061 ops/s
Iteration   1: 12678660.250 ops/s
Iteration   2: 12622438.970 ops/s
Iteration   3: 12643597.627 ops/s
Iteration   4: 12661500.043 ops/s
Iteration   5: 12677150.342 ops/s
Iteration   6: 12706774.575 ops/s
Iteration   7: 12614272.631 ops/s
Iteration   8: 12673668.728 ops/s
Iteration   9: 12499710.891 ops/s
Iteration  10: 12643776.141 ops/s
Iteration  11: 12628937.361 ops/s
Iteration  12: 12680239.064 ops/s
Iteration  13: 12660898.953 ops/s
Iteration  14: 12663938.288 ops/s
Iteration  15: 12661861.372 ops/s
Iteration  16: 12678428.322 ops/s
Iteration  17: 12632024.440 ops/s
Iteration  18: 12684636.451 ops/s
Iteration  19: 12713794.312 ops/s
Iteration  20: 12631039.476 ops/s
Iteration  21: 12639141.006 ops/s
Iteration  22: 12649814.785 ops/s
Iteration  23: 12661490.955 ops/s
Iteration  24: 12636494.888 ops/s
Iteration  25: 12681466.194 ops/s
Iteration  26: 12584275.599 ops/s
Iteration  27: 12672558.505 ops/s
Iteration  28: 12699401.418 ops/s
Iteration  29: 12662122.183 ops/s
Iteration  30: 12612459.410 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_clear":
  12651885.773 ±(99.9%) 27432.239 ops/s [Average]
  (min, avg, max) = (12499710.891, 12651885.773, 12713794.312), stdev = 41059.288
  CI (99.9%): [12624453.533, 12679318.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_clear  thrpt   30  12651885.773 ± 27432.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 971029.935 ops/s
# Warmup Iteration   2: 2325255.412 ops/s
# Warmup Iteration   3: 2363994.343 ops/s
# Warmup Iteration   4: 1959529.735 ops/s
# Warmup Iteration   5: 2380021.423 ops/s
# Warmup Iteration   6: 2363470.708 ops/s
# Warmup Iteration   7: 2343023.890 ops/s
# Warmup Iteration   8: 2358812.122 ops/s
# Warmup Iteration   9: 2354687.323 ops/s
# Warmup Iteration  10: 2358439.880 ops/s
# Warmup Iteration  11: 2357265.018 ops/s
# Warmup Iteration  12: 2374557.008 ops/s
# Warmup Iteration  13: 2390341.112 ops/s
# Warmup Iteration  14: 2371433.502 ops/s
# Warmup Iteration  15: 2390747.466 ops/s
# Warmup Iteration  16: 2375184.396 ops/s
# Warmup Iteration  17: 2359755.086 ops/s
# Warmup Iteration  18: 2353502.552 ops/s
# Warmup Iteration  19: 2381887.861 ops/s
# Warmup Iteration  20: 2374120.575 ops/s
# Warmup Iteration  21: 2365997.186 ops/s
# Warmup Iteration  22: 2382524.936 ops/s
# Warmup Iteration  23: 2366145.848 ops/s
# Warmup Iteration  24: 2372550.455 ops/s
# Warmup Iteration  25: 2382971.755 ops/s
# Warmup Iteration  26: 2376287.718 ops/s
# Warmup Iteration  27: 2366752.362 ops/s
# Warmup Iteration  28: 2372115.384 ops/s
# Warmup Iteration  29: 2357656.917 ops/s
# Warmup Iteration  30: 2338688.580 ops/s
Iteration   1: 2369520.313 ops/s
Iteration   2: 2356780.779 ops/s
Iteration   3: 2362445.982 ops/s
Iteration   4: 2332918.673 ops/s
Iteration   5: 2365147.938 ops/s
Iteration   6: 2391157.936 ops/s
Iteration   7: 2358910.035 ops/s
Iteration   8: 2382521.405 ops/s
Iteration   9: 2355491.954 ops/s
Iteration  10: 2377702.150 ops/s
Iteration  11: 2370636.048 ops/s
Iteration  12: 2382996.981 ops/s
Iteration  13: 2368659.741 ops/s
Iteration  14: 2362259.001 ops/s
Iteration  15: 2367196.414 ops/s
Iteration  16: 2386085.075 ops/s
Iteration  17: 2379531.514 ops/s
Iteration  18: 2368314.150 ops/s
Iteration  19: 2375201.205 ops/s
Iteration  20: 2356883.691 ops/s
Iteration  21: 2365956.215 ops/s
Iteration  22: 2363401.415 ops/s
Iteration  23: 2339153.010 ops/s
Iteration  24: 2371855.442 ops/s
Iteration  25: 2356729.893 ops/s
Iteration  26: 2353580.240 ops/s
Iteration  27: 2367722.440 ops/s
Iteration  28: 2385726.298 ops/s
Iteration  29: 2399044.665 ops/s
Iteration  30: 2398148.947 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collect":
  2369055.985 ±(99.9%) 10185.890 ops/s [Average]
  (min, avg, max) = (2332918.673, 2369055.985, 2399044.665), stdev = 15245.763
  CI (99.9%): [2358870.094, 2379241.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collect  thrpt   30  2369055.985 ± 10185.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1441552.783 ops/s
# Warmup Iteration   2: 3009501.824 ops/s
# Warmup Iteration   3: 3182734.524 ops/s
# Warmup Iteration   4: 3195457.637 ops/s
# Warmup Iteration   5: 2633699.313 ops/s
# Warmup Iteration   6: 3194858.833 ops/s
# Warmup Iteration   7: 3194973.201 ops/s
# Warmup Iteration   8: 3198684.225 ops/s
# Warmup Iteration   9: 3196925.294 ops/s
# Warmup Iteration  10: 3200707.197 ops/s
# Warmup Iteration  11: 3189188.678 ops/s
# Warmup Iteration  12: 3205772.680 ops/s
# Warmup Iteration  13: 3194001.278 ops/s
# Warmup Iteration  14: 3203647.092 ops/s
# Warmup Iteration  15: 3197863.244 ops/s
# Warmup Iteration  16: 3198520.092 ops/s
# Warmup Iteration  17: 3201430.931 ops/s
# Warmup Iteration  18: 3204499.603 ops/s
# Warmup Iteration  19: 3200606.384 ops/s
# Warmup Iteration  20: 3200105.677 ops/s
# Warmup Iteration  21: 3204685.506 ops/s
# Warmup Iteration  22: 3203440.408 ops/s
# Warmup Iteration  23: 3209340.954 ops/s
# Warmup Iteration  24: 3199721.458 ops/s
# Warmup Iteration  25: 3200247.314 ops/s
# Warmup Iteration  26: 3203411.177 ops/s
# Warmup Iteration  27: 3205743.734 ops/s
# Warmup Iteration  28: 3205153.878 ops/s
# Warmup Iteration  29: 3183370.157 ops/s
# Warmup Iteration  30: 3204206.239 ops/s
Iteration   1: 3203876.341 ops/s
Iteration   2: 3208766.494 ops/s
Iteration   3: 3202379.095 ops/s
Iteration   4: 3195503.539 ops/s
Iteration   5: 3196458.819 ops/s
Iteration   6: 3201995.346 ops/s
Iteration   7: 3204746.314 ops/s
Iteration   8: 3189063.668 ops/s
Iteration   9: 3205488.782 ops/s
Iteration  10: 3194201.219 ops/s
Iteration  11: 3203857.046 ops/s
Iteration  12: 3205214.350 ops/s
Iteration  13: 3202859.645 ops/s
Iteration  14: 3194463.324 ops/s
Iteration  15: 3188317.813 ops/s
Iteration  16: 3206730.318 ops/s
Iteration  17: 3203538.057 ops/s
Iteration  18: 3206753.612 ops/s
Iteration  19: 3199652.215 ops/s
Iteration  20: 3201776.578 ops/s
Iteration  21: 3196594.724 ops/s
Iteration  22: 3196415.423 ops/s
Iteration  23: 3202125.274 ops/s
Iteration  24: 3200478.152 ops/s
Iteration  25: 3201915.987 ops/s
Iteration  26: 3214893.387 ops/s
Iteration  27: 3207462.314 ops/s
Iteration  28: 3194264.299 ops/s
Iteration  29: 3199082.120 ops/s
Iteration  30: 3209196.538 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBoolean":
  3201269.026 ±(99.9%) 4009.831 ops/s [Average]
  (min, avg, max) = (3188317.813, 3201269.026, 3214893.387), stdev = 6001.727
  CI (99.9%): [3197259.195, 3205278.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectBoolean  thrpt   30  3201269.026 ± 4009.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5080690.584 ops/s
# Warmup Iteration   2: 11103377.364 ops/s
# Warmup Iteration   3: 11272596.081 ops/s
# Warmup Iteration   4: 9696827.704 ops/s
# Warmup Iteration   5: 10978040.435 ops/s
# Warmup Iteration   6: 11301095.751 ops/s
# Warmup Iteration   7: 11328560.012 ops/s
# Warmup Iteration   8: 11315702.561 ops/s
# Warmup Iteration   9: 11301471.209 ops/s
# Warmup Iteration  10: 11290629.438 ops/s
# Warmup Iteration  11: 11289117.604 ops/s
# Warmup Iteration  12: 11277011.758 ops/s
# Warmup Iteration  13: 11306582.890 ops/s
# Warmup Iteration  14: 11260330.008 ops/s
# Warmup Iteration  15: 11298779.311 ops/s
# Warmup Iteration  16: 11301365.540 ops/s
# Warmup Iteration  17: 11271161.259 ops/s
# Warmup Iteration  18: 11287001.605 ops/s
# Warmup Iteration  19: 11288381.612 ops/s
# Warmup Iteration  20: 11291291.667 ops/s
# Warmup Iteration  21: 11296883.424 ops/s
# Warmup Iteration  22: 11286761.213 ops/s
# Warmup Iteration  23: 11283463.670 ops/s
# Warmup Iteration  24: 11264831.478 ops/s
# Warmup Iteration  25: 11299455.374 ops/s
# Warmup Iteration  26: 11293913.356 ops/s
# Warmup Iteration  27: 11312293.640 ops/s
# Warmup Iteration  28: 11293026.801 ops/s
# Warmup Iteration  29: 11292398.497 ops/s
# Warmup Iteration  30: 11306340.434 ops/s
Iteration   1: 11304833.951 ops/s
Iteration   2: 11293786.518 ops/s
Iteration   3: 11299180.582 ops/s
Iteration   4: 11339460.325 ops/s
Iteration   5: 11307121.125 ops/s
Iteration   6: 11324775.944 ops/s
Iteration   7: 11297561.293 ops/s
Iteration   8: 11253741.969 ops/s
Iteration   9: 11250041.100 ops/s
Iteration  10: 11304015.585 ops/s
Iteration  11: 11304182.153 ops/s
Iteration  12: 11283151.509 ops/s
Iteration  13: 11292009.459 ops/s
Iteration  14: 11307961.617 ops/s
Iteration  15: 11289007.095 ops/s
Iteration  16: 11330223.862 ops/s
Iteration  17: 11306391.901 ops/s
Iteration  18: 11265281.741 ops/s
Iteration  19: 11278616.680 ops/s
Iteration  20: 11293767.464 ops/s
Iteration  21: 11297993.008 ops/s
Iteration  22: 11320075.642 ops/s
Iteration  23: 11298363.636 ops/s
Iteration  24: 11279887.455 ops/s
Iteration  25: 11283434.582 ops/s
Iteration  26: 11267148.247 ops/s
Iteration  27: 11309053.770 ops/s
Iteration  28: 11283444.350 ops/s
Iteration  29: 11288157.093 ops/s
Iteration  30: 11303265.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  11295197.826 ±(99.9%) 13664.316 ops/s [Average]
  (min, avg, max) = (11250041.100, 11295197.826, 11339460.325), stdev = 20452.106
  CI (99.9%): [11281533.510, 11308862.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  11295197.826 ± 13664.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3953727.784 ops/s
# Warmup Iteration   2: 7893836.433 ops/s
# Warmup Iteration   3: 8316769.569 ops/s
# Warmup Iteration   4: 8360998.305 ops/s
# Warmup Iteration   5: 6929053.283 ops/s
# Warmup Iteration   6: 8404604.472 ops/s
# Warmup Iteration   7: 8360316.996 ops/s
# Warmup Iteration   8: 8377056.637 ops/s
# Warmup Iteration   9: 8359757.536 ops/s
# Warmup Iteration  10: 8388970.068 ops/s
# Warmup Iteration  11: 8391411.433 ops/s
# Warmup Iteration  12: 8369747.997 ops/s
# Warmup Iteration  13: 8386766.798 ops/s
# Warmup Iteration  14: 8404016.963 ops/s
# Warmup Iteration  15: 8390257.051 ops/s
# Warmup Iteration  16: 8379846.647 ops/s
# Warmup Iteration  17: 8392485.541 ops/s
# Warmup Iteration  18: 8398877.494 ops/s
# Warmup Iteration  19: 8371218.277 ops/s
# Warmup Iteration  20: 8375629.783 ops/s
# Warmup Iteration  21: 8375944.539 ops/s
# Warmup Iteration  22: 8397310.945 ops/s
# Warmup Iteration  23: 8386717.137 ops/s
# Warmup Iteration  24: 8370383.495 ops/s
# Warmup Iteration  25: 8388135.538 ops/s
# Warmup Iteration  26: 8389636.642 ops/s
# Warmup Iteration  27: 8391295.737 ops/s
# Warmup Iteration  28: 8375234.422 ops/s
# Warmup Iteration  29: 8378114.020 ops/s
# Warmup Iteration  30: 8400953.220 ops/s
Iteration   1: 8399967.442 ops/s
Iteration   2: 8390210.457 ops/s
Iteration   3: 8401350.071 ops/s
Iteration   4: 8379871.258 ops/s
Iteration   5: 8380485.176 ops/s
Iteration   6: 8382220.101 ops/s
Iteration   7: 8396078.086 ops/s
Iteration   8: 8373307.810 ops/s
Iteration   9: 8400149.077 ops/s
Iteration  10: 8402197.777 ops/s
Iteration  11: 8383758.750 ops/s
Iteration  12: 8395108.582 ops/s
Iteration  13: 8384978.960 ops/s
Iteration  14: 8411370.278 ops/s
Iteration  15: 8407079.754 ops/s
Iteration  16: 8402545.376 ops/s
Iteration  17: 8379799.625 ops/s
Iteration  18: 8386354.509 ops/s
Iteration  19: 8369244.542 ops/s
Iteration  20: 8408323.499 ops/s
Iteration  21: 8353360.305 ops/s
Iteration  22: 8386996.528 ops/s
Iteration  23: 8397591.828 ops/s
Iteration  24: 8392501.670 ops/s
Iteration  25: 8395450.207 ops/s
Iteration  26: 8408549.963 ops/s
Iteration  27: 8383657.835 ops/s
Iteration  28: 8375643.572 ops/s
Iteration  29: 8406906.848 ops/s
Iteration  30: 8400178.387 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget":
  8391174.609 ±(99.9%) 9042.942 ops/s [Average]
  (min, avg, max) = (8353360.305, 8391174.609, 8411370.278), stdev = 13535.051
  CI (99.9%): [8382131.667, 8400217.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  8391174.609 ± 9042.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680255.989 ops/s
# Warmup Iteration   2: 1379059.540 ops/s
# Warmup Iteration   3: 1457214.021 ops/s
# Warmup Iteration   4: 1467669.804 ops/s
# Warmup Iteration   5: 1224854.199 ops/s
# Warmup Iteration   6: 1468136.795 ops/s
# Warmup Iteration   7: 1470249.042 ops/s
# Warmup Iteration   8: 1468852.163 ops/s
# Warmup Iteration   9: 1469793.145 ops/s
# Warmup Iteration  10: 1468318.620 ops/s
# Warmup Iteration  11: 1469536.900 ops/s
# Warmup Iteration  12: 1470123.190 ops/s
# Warmup Iteration  13: 1472002.120 ops/s
# Warmup Iteration  14: 1470328.358 ops/s
# Warmup Iteration  15: 1470505.533 ops/s
# Warmup Iteration  16: 1468553.828 ops/s
# Warmup Iteration  17: 1470312.969 ops/s
# Warmup Iteration  18: 1467179.316 ops/s
# Warmup Iteration  19: 1465970.619 ops/s
# Warmup Iteration  20: 1469528.477 ops/s
# Warmup Iteration  21: 1471728.443 ops/s
# Warmup Iteration  22: 1468792.935 ops/s
# Warmup Iteration  23: 1469110.959 ops/s
# Warmup Iteration  24: 1468853.619 ops/s
# Warmup Iteration  25: 1467811.335 ops/s
# Warmup Iteration  26: 1467498.325 ops/s
# Warmup Iteration  27: 1464550.938 ops/s
# Warmup Iteration  28: 1468494.580 ops/s
# Warmup Iteration  29: 1467505.840 ops/s
# Warmup Iteration  30: 1473334.589 ops/s
Iteration   1: 1474267.123 ops/s
Iteration   2: 1466157.642 ops/s
Iteration   3: 1465750.728 ops/s
Iteration   4: 1471608.540 ops/s
Iteration   5: 1470240.545 ops/s
Iteration   6: 1470030.861 ops/s
Iteration   7: 1474519.668 ops/s
Iteration   8: 1471719.997 ops/s
Iteration   9: 1468348.043 ops/s
Iteration  10: 1471852.328 ops/s
Iteration  11: 1469702.676 ops/s
Iteration  12: 1467512.451 ops/s
Iteration  13: 1466741.210 ops/s
Iteration  14: 1473459.224 ops/s
Iteration  15: 1469078.013 ops/s
Iteration  16: 1466444.004 ops/s
Iteration  17: 1470540.389 ops/s
Iteration  18: 1468306.225 ops/s
Iteration  19: 1469945.230 ops/s
Iteration  20: 1469218.938 ops/s
Iteration  21: 1469031.889 ops/s
Iteration  22: 1466228.451 ops/s
Iteration  23: 1463034.150 ops/s
Iteration  24: 1468333.943 ops/s
Iteration  25: 1471633.109 ops/s
Iteration  26: 1465078.375 ops/s
Iteration  27: 1462610.923 ops/s
Iteration  28: 1470226.345 ops/s
Iteration  29: 1462853.210 ops/s
Iteration  30: 1468952.370 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByte":
  1468780.887 ±(99.9%) 2094.240 ops/s [Average]
  (min, avg, max) = (1462610.923, 1468780.887, 1474519.668), stdev = 3134.560
  CI (99.9%): [1466686.646, 1470875.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectByte  thrpt   30  1468780.887 ± 2094.240  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1943285.815 ops/s
# Warmup Iteration   2: 4355135.073 ops/s
# Warmup Iteration   3: 4389926.489 ops/s
# Warmup Iteration   4: 3689604.038 ops/s
# Warmup Iteration   5: 4421803.400 ops/s
# Warmup Iteration   6: 4405714.025 ops/s
# Warmup Iteration   7: 4413367.762 ops/s
# Warmup Iteration   8: 4413842.093 ops/s
# Warmup Iteration   9: 4409787.644 ops/s
# Warmup Iteration  10: 4413926.549 ops/s
# Warmup Iteration  11: 4421478.808 ops/s
# Warmup Iteration  12: 4402702.879 ops/s
# Warmup Iteration  13: 4418761.618 ops/s
# Warmup Iteration  14: 4413046.763 ops/s
# Warmup Iteration  15: 4414307.509 ops/s
# Warmup Iteration  16: 4405073.210 ops/s
# Warmup Iteration  17: 4404973.979 ops/s
# Warmup Iteration  18: 4414357.503 ops/s
# Warmup Iteration  19: 4417521.099 ops/s
# Warmup Iteration  20: 4413861.135 ops/s
# Warmup Iteration  21: 4412555.345 ops/s
# Warmup Iteration  22: 4407972.849 ops/s
# Warmup Iteration  23: 4405737.316 ops/s
# Warmup Iteration  24: 4400678.569 ops/s
# Warmup Iteration  25: 4415546.984 ops/s
# Warmup Iteration  26: 4418149.548 ops/s
# Warmup Iteration  27: 4404469.821 ops/s
# Warmup Iteration  28: 4420959.686 ops/s
# Warmup Iteration  29: 4421004.841 ops/s
# Warmup Iteration  30: 4418763.993 ops/s
Iteration   1: 4411871.447 ops/s
Iteration   2: 4413956.694 ops/s
Iteration   3: 4422649.291 ops/s
Iteration   4: 4423789.206 ops/s
Iteration   5: 4390574.129 ops/s
Iteration   6: 4420887.041 ops/s
Iteration   7: 4415087.140 ops/s
Iteration   8: 4424270.160 ops/s
Iteration   9: 4411003.815 ops/s
Iteration  10: 4408426.200 ops/s
Iteration  11: 4407130.447 ops/s
Iteration  12: 4405903.413 ops/s
Iteration  13: 4419975.178 ops/s
Iteration  14: 4422409.628 ops/s
Iteration  15: 4411491.451 ops/s
Iteration  16: 4417178.042 ops/s
Iteration  17: 4401919.527 ops/s
Iteration  18: 4415795.346 ops/s
Iteration  19: 4411852.521 ops/s
Iteration  20: 4418444.818 ops/s
Iteration  21: 4415221.606 ops/s
Iteration  22: 4415477.791 ops/s
Iteration  23: 4419997.997 ops/s
Iteration  24: 4422100.798 ops/s
Iteration  25: 4426368.032 ops/s
Iteration  26: 4408636.623 ops/s
Iteration  27: 4425846.172 ops/s
Iteration  28: 4424652.656 ops/s
Iteration  29: 4419377.904 ops/s
Iteration  30: 4407943.843 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget":
  4415341.297 ±(99.9%) 5378.799 ops/s [Average]
  (min, avg, max) = (4390574.129, 4415341.297, 4426368.032), stdev = 8050.734
  CI (99.9%): [4409962.498, 4420720.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  4415341.297 ± 5378.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1538183.555 ops/s
# Warmup Iteration   2: 3671405.962 ops/s
# Warmup Iteration   3: 3727617.677 ops/s
# Warmup Iteration   4: 3131091.572 ops/s
# Warmup Iteration   5: 3750438.095 ops/s
# Warmup Iteration   6: 3755267.910 ops/s
# Warmup Iteration   7: 3748675.331 ops/s
# Warmup Iteration   8: 3734890.619 ops/s
# Warmup Iteration   9: 3750063.230 ops/s
# Warmup Iteration  10: 3751522.713 ops/s
# Warmup Iteration  11: 3760007.526 ops/s
# Warmup Iteration  12: 3754260.633 ops/s
# Warmup Iteration  13: 3760097.053 ops/s
# Warmup Iteration  14: 3758886.612 ops/s
# Warmup Iteration  15: 3759740.231 ops/s
# Warmup Iteration  16: 3756789.751 ops/s
# Warmup Iteration  17: 3752669.453 ops/s
# Warmup Iteration  18: 3756723.062 ops/s
# Warmup Iteration  19: 3747215.196 ops/s
# Warmup Iteration  20: 3749566.417 ops/s
# Warmup Iteration  21: 3750592.120 ops/s
# Warmup Iteration  22: 3751781.311 ops/s
# Warmup Iteration  23: 3754155.056 ops/s
# Warmup Iteration  24: 3758169.559 ops/s
# Warmup Iteration  25: 3749745.410 ops/s
# Warmup Iteration  26: 3747772.221 ops/s
# Warmup Iteration  27: 3753523.462 ops/s
# Warmup Iteration  28: 3751793.036 ops/s
# Warmup Iteration  29: 3755169.047 ops/s
# Warmup Iteration  30: 3747306.766 ops/s
Iteration   1: 3750963.828 ops/s
Iteration   2: 3755497.551 ops/s
Iteration   3: 3754728.095 ops/s
Iteration   4: 3747328.259 ops/s
Iteration   5: 3748361.359 ops/s
Iteration   6: 3746166.306 ops/s
Iteration   7: 3749574.035 ops/s
Iteration   8: 3754576.687 ops/s
Iteration   9: 3753571.911 ops/s
Iteration  10: 3748182.174 ops/s
Iteration  11: 3726685.329 ops/s
Iteration  12: 3751620.282 ops/s
Iteration  13: 3751158.080 ops/s
Iteration  14: 3748601.219 ops/s
Iteration  15: 3761989.253 ops/s
Iteration  16: 3749536.047 ops/s
Iteration  17: 3745195.905 ops/s
Iteration  18: 3746642.796 ops/s
Iteration  19: 3739097.587 ops/s
Iteration  20: 3752985.554 ops/s
Iteration  21: 3748479.721 ops/s
Iteration  22: 3761911.628 ops/s
Iteration  23: 3727359.549 ops/s
Iteration  24: 3754407.942 ops/s
Iteration  25: 3752511.144 ops/s
Iteration  26: 3754132.981 ops/s
Iteration  27: 3758430.615 ops/s
Iteration  28: 3750879.533 ops/s
Iteration  29: 3750181.045 ops/s
Iteration  30: 3744688.794 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectByteWithTarget":
  3749514.840 ±(99.9%) 5209.912 ops/s [Average]
  (min, avg, max) = (3726685.329, 3749514.840, 3761989.253), stdev = 7797.951
  CI (99.9%): [3744304.928, 3754724.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  3749514.840 ± 5209.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657774.147 ops/s
# Warmup Iteration   2: 1387672.364 ops/s
# Warmup Iteration   3: 1461886.861 ops/s
# Warmup Iteration   4: 1469322.803 ops/s
# Warmup Iteration   5: 1227506.256 ops/s
# Warmup Iteration   6: 1467567.095 ops/s
# Warmup Iteration   7: 1471110.239 ops/s
# Warmup Iteration   8: 1469241.811 ops/s
# Warmup Iteration   9: 1466099.927 ops/s
# Warmup Iteration  10: 1468569.295 ops/s
# Warmup Iteration  11: 1465696.123 ops/s
# Warmup Iteration  12: 1466839.933 ops/s
# Warmup Iteration  13: 1469509.946 ops/s
# Warmup Iteration  14: 1468339.477 ops/s
# Warmup Iteration  15: 1466413.428 ops/s
# Warmup Iteration  16: 1469636.145 ops/s
# Warmup Iteration  17: 1467859.061 ops/s
# Warmup Iteration  18: 1467790.591 ops/s
# Warmup Iteration  19: 1467362.755 ops/s
# Warmup Iteration  20: 1466915.463 ops/s
# Warmup Iteration  21: 1469687.008 ops/s
# Warmup Iteration  22: 1470293.277 ops/s
# Warmup Iteration  23: 1469193.756 ops/s
# Warmup Iteration  24: 1468488.851 ops/s
# Warmup Iteration  25: 1467267.495 ops/s
# Warmup Iteration  26: 1468632.032 ops/s
# Warmup Iteration  27: 1462667.004 ops/s
# Warmup Iteration  28: 1468354.422 ops/s
# Warmup Iteration  29: 1466552.222 ops/s
# Warmup Iteration  30: 1472409.435 ops/s
Iteration   1: 1470075.429 ops/s
Iteration   2: 1468878.231 ops/s
Iteration   3: 1468045.588 ops/s
Iteration   4: 1470452.182 ops/s
Iteration   5: 1467191.828 ops/s
Iteration   6: 1463469.648 ops/s
Iteration   7: 1467337.868 ops/s
Iteration   8: 1471637.613 ops/s
Iteration   9: 1464863.227 ops/s
Iteration  10: 1472865.193 ops/s
Iteration  11: 1468338.876 ops/s
Iteration  12: 1472851.296 ops/s
Iteration  13: 1464580.797 ops/s
Iteration  14: 1466486.594 ops/s
Iteration  15: 1467864.922 ops/s
Iteration  16: 1467237.907 ops/s
Iteration  17: 1468876.468 ops/s
Iteration  18: 1469381.418 ops/s
Iteration  19: 1468842.607 ops/s
Iteration  20: 1462344.533 ops/s
Iteration  21: 1466995.050 ops/s
Iteration  22: 1462793.598 ops/s
Iteration  23: 1472272.148 ops/s
Iteration  24: 1465838.119 ops/s
Iteration  25: 1467457.010 ops/s
Iteration  26: 1463764.023 ops/s
Iteration  27: 1470047.697 ops/s
Iteration  28: 1468551.096 ops/s
Iteration  29: 1470332.811 ops/s
Iteration  30: 1469978.983 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectChar":
  1467988.425 ±(99.9%) 1906.670 ops/s [Average]
  (min, avg, max) = (1462344.533, 1467988.425, 1472865.193), stdev = 2853.814
  CI (99.9%): [1466081.755, 1469895.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectChar  thrpt   30  1467988.425 ± 1906.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2041424.633 ops/s
# Warmup Iteration   2: 4635682.747 ops/s
# Warmup Iteration   3: 4496166.183 ops/s
# Warmup Iteration   4: 4134924.415 ops/s
# Warmup Iteration   5: 4704526.602 ops/s
# Warmup Iteration   6: 4717958.864 ops/s
# Warmup Iteration   7: 4711947.095 ops/s
# Warmup Iteration   8: 4715953.189 ops/s
# Warmup Iteration   9: 4714079.039 ops/s
# Warmup Iteration  10: 4710965.578 ops/s
# Warmup Iteration  11: 4714706.165 ops/s
# Warmup Iteration  12: 4723201.112 ops/s
# Warmup Iteration  13: 4712102.038 ops/s
# Warmup Iteration  14: 4712654.036 ops/s
# Warmup Iteration  15: 4708963.637 ops/s
# Warmup Iteration  16: 4719133.959 ops/s
# Warmup Iteration  17: 4719007.827 ops/s
# Warmup Iteration  18: 4706747.941 ops/s
# Warmup Iteration  19: 4712088.465 ops/s
# Warmup Iteration  20: 4718462.957 ops/s
# Warmup Iteration  21: 4705084.615 ops/s
# Warmup Iteration  22: 4722340.208 ops/s
# Warmup Iteration  23: 4721486.207 ops/s
# Warmup Iteration  24: 4706191.088 ops/s
# Warmup Iteration  25: 4712382.740 ops/s
# Warmup Iteration  26: 4716924.599 ops/s
# Warmup Iteration  27: 4720053.460 ops/s
# Warmup Iteration  28: 4697934.183 ops/s
# Warmup Iteration  29: 4712226.355 ops/s
# Warmup Iteration  30: 4706691.065 ops/s
Iteration   1: 4698594.622 ops/s
Iteration   2: 4700352.111 ops/s
Iteration   3: 4723273.598 ops/s
Iteration   4: 4729013.650 ops/s
Iteration   5: 4732634.239 ops/s
Iteration   6: 4706638.126 ops/s
Iteration   7: 4716267.589 ops/s
Iteration   8: 4726879.206 ops/s
Iteration   9: 4726804.961 ops/s
Iteration  10: 4707702.149 ops/s
Iteration  11: 4700626.238 ops/s
Iteration  12: 4707853.406 ops/s
Iteration  13: 4710705.017 ops/s
Iteration  14: 4715943.501 ops/s
Iteration  15: 4690799.850 ops/s
Iteration  16: 4724777.511 ops/s
Iteration  17: 4723676.751 ops/s
Iteration  18: 4720293.081 ops/s
Iteration  19: 4725588.923 ops/s
Iteration  20: 4711287.623 ops/s
Iteration  21: 4712796.537 ops/s
Iteration  22: 4699829.695 ops/s
Iteration  23: 4725498.580 ops/s
Iteration  24: 4720221.754 ops/s
Iteration  25: 4716289.693 ops/s
Iteration  26: 4724871.149 ops/s
Iteration  27: 4711554.114 ops/s
Iteration  28: 4729417.738 ops/s
Iteration  29: 4714686.325 ops/s
Iteration  30: 4716351.335 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget":
  4715707.636 ±(99.9%) 7159.835 ops/s [Average]
  (min, avg, max) = (4690799.850, 4715707.636, 4732634.239), stdev = 10716.504
  CI (99.9%): [4708547.801, 4722867.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  4715707.636 ± 7159.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1580993.031 ops/s
# Warmup Iteration   2: 3719665.937 ops/s
# Warmup Iteration   3: 3791820.708 ops/s
# Warmup Iteration   4: 3164768.307 ops/s
# Warmup Iteration   5: 3801742.248 ops/s
# Warmup Iteration   6: 3799788.249 ops/s
# Warmup Iteration   7: 3803911.827 ops/s
# Warmup Iteration   8: 3804235.234 ops/s
# Warmup Iteration   9: 3808352.468 ops/s
# Warmup Iteration  10: 3802406.383 ops/s
# Warmup Iteration  11: 3803424.635 ops/s
# Warmup Iteration  12: 3809930.353 ops/s
# Warmup Iteration  13: 3802048.284 ops/s
# Warmup Iteration  14: 3803757.276 ops/s
# Warmup Iteration  15: 3811669.490 ops/s
# Warmup Iteration  16: 3794414.371 ops/s
# Warmup Iteration  17: 3808277.046 ops/s
# Warmup Iteration  18: 3805763.837 ops/s
# Warmup Iteration  19: 3798720.414 ops/s
# Warmup Iteration  20: 3807072.639 ops/s
# Warmup Iteration  21: 3795656.259 ops/s
# Warmup Iteration  22: 3803570.671 ops/s
# Warmup Iteration  23: 3808064.611 ops/s
# Warmup Iteration  24: 3812380.474 ops/s
# Warmup Iteration  25: 3813290.694 ops/s
# Warmup Iteration  26: 3796833.220 ops/s
# Warmup Iteration  27: 3801260.464 ops/s
# Warmup Iteration  28: 3804479.113 ops/s
# Warmup Iteration  29: 3809250.345 ops/s
# Warmup Iteration  30: 3804832.261 ops/s
Iteration   1: 3813774.593 ops/s
Iteration   2: 3803362.795 ops/s
Iteration   3: 3807969.490 ops/s
Iteration   4: 3819370.782 ops/s
Iteration   5: 3818360.564 ops/s
Iteration   6: 3819182.269 ops/s
Iteration   7: 3815150.362 ops/s
Iteration   8: 3805095.758 ops/s
Iteration   9: 3804432.915 ops/s
Iteration  10: 3807316.687 ops/s
Iteration  11: 3784940.892 ops/s
Iteration  12: 3789971.544 ops/s
Iteration  13: 3805533.068 ops/s
Iteration  14: 3802680.460 ops/s
Iteration  15: 3798018.217 ops/s
Iteration  16: 3807319.857 ops/s
Iteration  17: 3812891.828 ops/s
Iteration  18: 3799026.067 ops/s
Iteration  19: 3810482.298 ops/s
Iteration  20: 3807200.216 ops/s
Iteration  21: 3802778.042 ops/s
Iteration  22: 3814321.855 ops/s
Iteration  23: 3804129.792 ops/s
Iteration  24: 3808646.809 ops/s
Iteration  25: 3798436.264 ops/s
Iteration  26: 3795798.893 ops/s
Iteration  27: 3808259.948 ops/s
Iteration  28: 3809327.541 ops/s
Iteration  29: 3810041.685 ops/s
Iteration  30: 3798186.563 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectCharWithTarget":
  3806066.935 ±(99.9%) 5414.912 ops/s [Average]
  (min, avg, max) = (3784940.892, 3806066.935, 3819370.782), stdev = 8104.785
  CI (99.9%): [3800652.024, 3811481.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  3806066.935 ± 5414.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524604.885 ops/s
# Warmup Iteration   2: 1171860.380 ops/s
# Warmup Iteration   3: 1173733.669 ops/s
# Warmup Iteration   4: 992929.789 ops/s
# Warmup Iteration   5: 1166348.217 ops/s
# Warmup Iteration   6: 1173696.536 ops/s
# Warmup Iteration   7: 1176560.332 ops/s
# Warmup Iteration   8: 1178139.571 ops/s
# Warmup Iteration   9: 1175826.421 ops/s
# Warmup Iteration  10: 1172968.633 ops/s
# Warmup Iteration  11: 1174697.226 ops/s
# Warmup Iteration  12: 1176612.185 ops/s
# Warmup Iteration  13: 1175221.849 ops/s
# Warmup Iteration  14: 1177099.083 ops/s
# Warmup Iteration  15: 1175599.850 ops/s
# Warmup Iteration  16: 1178420.912 ops/s
# Warmup Iteration  17: 1178964.701 ops/s
# Warmup Iteration  18: 1179589.509 ops/s
# Warmup Iteration  19: 1177210.830 ops/s
# Warmup Iteration  20: 1182117.412 ops/s
# Warmup Iteration  21: 1179033.828 ops/s
# Warmup Iteration  22: 1179825.551 ops/s
# Warmup Iteration  23: 1177730.942 ops/s
# Warmup Iteration  24: 1178657.862 ops/s
# Warmup Iteration  25: 1178643.579 ops/s
# Warmup Iteration  26: 1176425.097 ops/s
# Warmup Iteration  27: 1178113.119 ops/s
# Warmup Iteration  28: 1176219.612 ops/s
# Warmup Iteration  29: 1175550.212 ops/s
# Warmup Iteration  30: 1177327.495 ops/s
Iteration   1: 1175434.290 ops/s
Iteration   2: 1173302.128 ops/s
Iteration   3: 1180897.528 ops/s
Iteration   4: 1177395.153 ops/s
Iteration   5: 1176697.466 ops/s
Iteration   6: 1174662.191 ops/s
Iteration   7: 1182127.266 ops/s
Iteration   8: 1178179.389 ops/s
Iteration   9: 1174089.893 ops/s
Iteration  10: 1174521.809 ops/s
Iteration  11: 1175274.713 ops/s
Iteration  12: 1178106.812 ops/s
Iteration  13: 1177096.281 ops/s
Iteration  14: 1177634.437 ops/s
Iteration  15: 1182698.187 ops/s
Iteration  16: 1176030.517 ops/s
Iteration  17: 1177238.938 ops/s
Iteration  18: 1183077.417 ops/s
Iteration  19: 1177256.180 ops/s
Iteration  20: 1179463.046 ops/s
Iteration  21: 1180567.473 ops/s
Iteration  22: 1178791.674 ops/s
Iteration  23: 1180482.605 ops/s
Iteration  24: 1178244.843 ops/s
Iteration  25: 1179344.806 ops/s
Iteration  26: 1173528.848 ops/s
Iteration  27: 1176350.913 ops/s
Iteration  28: 1179375.601 ops/s
Iteration  29: 1178666.914 ops/s
Iteration  30: 1169561.959 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDouble":
  1177536.643 ±(99.9%) 2012.603 ops/s [Average]
  (min, avg, max) = (1169561.959, 1177536.643, 1183077.417), stdev = 3012.370
  CI (99.9%): [1175524.039, 1179549.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectDouble  thrpt   30  1177536.643 ± 2012.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1341917.973 ops/s
# Warmup Iteration   2: 3174934.732 ops/s
# Warmup Iteration   3: 3193136.656 ops/s
# Warmup Iteration   4: 2669679.378 ops/s
# Warmup Iteration   5: 3213645.878 ops/s
# Warmup Iteration   6: 3222675.609 ops/s
# Warmup Iteration   7: 3211601.128 ops/s
# Warmup Iteration   8: 3206423.746 ops/s
# Warmup Iteration   9: 3217089.504 ops/s
# Warmup Iteration  10: 3213635.194 ops/s
# Warmup Iteration  11: 3212155.478 ops/s
# Warmup Iteration  12: 3209395.723 ops/s
# Warmup Iteration  13: 3204446.494 ops/s
# Warmup Iteration  14: 3222026.853 ops/s
# Warmup Iteration  15: 3217605.828 ops/s
# Warmup Iteration  16: 3217149.668 ops/s
# Warmup Iteration  17: 3199910.356 ops/s
# Warmup Iteration  18: 3224386.599 ops/s
# Warmup Iteration  19: 3221014.779 ops/s
# Warmup Iteration  20: 3211180.201 ops/s
# Warmup Iteration  21: 3226044.089 ops/s
# Warmup Iteration  22: 3216445.554 ops/s
# Warmup Iteration  23: 3218966.142 ops/s
# Warmup Iteration  24: 3216291.555 ops/s
# Warmup Iteration  25: 3215016.288 ops/s
# Warmup Iteration  26: 3219321.709 ops/s
# Warmup Iteration  27: 3220580.412 ops/s
# Warmup Iteration  28: 3226680.779 ops/s
# Warmup Iteration  29: 3212202.460 ops/s
# Warmup Iteration  30: 3213541.520 ops/s
Iteration   1: 3223560.386 ops/s
Iteration   2: 3219031.270 ops/s
Iteration   3: 3213058.596 ops/s
Iteration   4: 3195371.394 ops/s
Iteration   5: 3208555.697 ops/s
Iteration   6: 3217436.862 ops/s
Iteration   7: 3209144.474 ops/s
Iteration   8: 3211405.347 ops/s
Iteration   9: 3210715.111 ops/s
Iteration  10: 3203563.848 ops/s
Iteration  11: 3219808.733 ops/s
Iteration  12: 3212590.571 ops/s
Iteration  13: 3207182.750 ops/s
Iteration  14: 3227257.516 ops/s
Iteration  15: 3216681.560 ops/s
Iteration  16: 3212499.912 ops/s
Iteration  17: 3223584.556 ops/s
Iteration  18: 3223841.869 ops/s
Iteration  19: 3211798.281 ops/s
Iteration  20: 3200448.308 ops/s
Iteration  21: 3227738.844 ops/s
Iteration  22: 3212800.515 ops/s
Iteration  23: 3222931.190 ops/s
Iteration  24: 3220830.035 ops/s
Iteration  25: 3219436.862 ops/s
Iteration  26: 3219919.559 ops/s
Iteration  27: 3215640.807 ops/s
Iteration  28: 3211398.761 ops/s
Iteration  29: 3232958.335 ops/s
Iteration  30: 3220665.227 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3215728.572 ±(99.9%) 5556.127 ops/s [Average]
  (min, avg, max) = (3195371.394, 3215728.572, 3232958.335), stdev = 8316.150
  CI (99.9%): [3210172.445, 3221284.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3215728.572 ± 5556.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1042179.203 ops/s
# Warmup Iteration   2: 2641245.580 ops/s
# Warmup Iteration   3: 2670662.065 ops/s
# Warmup Iteration   4: 2221195.143 ops/s
# Warmup Iteration   5: 2669872.630 ops/s
# Warmup Iteration   6: 2663008.357 ops/s
# Warmup Iteration   7: 2668887.061 ops/s
# Warmup Iteration   8: 2670498.756 ops/s
# Warmup Iteration   9: 2672661.855 ops/s
# Warmup Iteration  10: 2669346.065 ops/s
# Warmup Iteration  11: 2675714.017 ops/s
# Warmup Iteration  12: 2671389.535 ops/s
# Warmup Iteration  13: 2672224.754 ops/s
# Warmup Iteration  14: 2670893.525 ops/s
# Warmup Iteration  15: 2673160.017 ops/s
# Warmup Iteration  16: 2684480.389 ops/s
# Warmup Iteration  17: 2675397.267 ops/s
# Warmup Iteration  18: 2672784.034 ops/s
# Warmup Iteration  19: 2670767.452 ops/s
# Warmup Iteration  20: 2673789.393 ops/s
# Warmup Iteration  21: 2678249.727 ops/s
# Warmup Iteration  22: 2668174.219 ops/s
# Warmup Iteration  23: 2673790.251 ops/s
# Warmup Iteration  24: 2659784.180 ops/s
# Warmup Iteration  25: 2675290.825 ops/s
# Warmup Iteration  26: 2672083.394 ops/s
# Warmup Iteration  27: 2665308.216 ops/s
# Warmup Iteration  28: 2671662.168 ops/s
# Warmup Iteration  29: 2672368.437 ops/s
# Warmup Iteration  30: 2675633.699 ops/s
Iteration   1: 2667499.444 ops/s
Iteration   2: 2679223.102 ops/s
Iteration   3: 2666590.085 ops/s
Iteration   4: 2671063.433 ops/s
Iteration   5: 2675388.003 ops/s
Iteration   6: 2669384.796 ops/s
Iteration   7: 2673941.478 ops/s
Iteration   8: 2674772.378 ops/s
Iteration   9: 2671154.466 ops/s
Iteration  10: 2671895.600 ops/s
Iteration  11: 2665389.478 ops/s
Iteration  12: 2681982.023 ops/s
Iteration  13: 2676280.165 ops/s
Iteration  14: 2676411.296 ops/s
Iteration  15: 2680091.382 ops/s
Iteration  16: 2681874.511 ops/s
Iteration  17: 2684453.731 ops/s
Iteration  18: 2669656.017 ops/s
Iteration  19: 2676233.061 ops/s
Iteration  20: 2665100.027 ops/s
Iteration  21: 2677674.933 ops/s
Iteration  22: 2668085.658 ops/s
Iteration  23: 2675764.455 ops/s
Iteration  24: 2658943.548 ops/s
Iteration  25: 2667864.960 ops/s
Iteration  26: 2669598.747 ops/s
Iteration  27: 2674413.110 ops/s
Iteration  28: 2669321.953 ops/s
Iteration  29: 2677413.807 ops/s
Iteration  30: 2668001.461 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget":
  2672848.904 ±(99.9%) 3913.459 ops/s [Average]
  (min, avg, max) = (2658943.548, 2672848.904, 2684453.731), stdev = 5857.481
  CI (99.9%): [2668935.445, 2676762.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2672848.904 ± 3913.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 592756.851 ops/s
# Warmup Iteration   2: 1207321.032 ops/s
# Warmup Iteration   3: 1261147.473 ops/s
# Warmup Iteration   4: 1267692.007 ops/s
# Warmup Iteration   5: 1061878.136 ops/s
# Warmup Iteration   6: 1268773.925 ops/s
# Warmup Iteration   7: 1272064.972 ops/s
# Warmup Iteration   8: 1269355.675 ops/s
# Warmup Iteration   9: 1270251.193 ops/s
# Warmup Iteration  10: 1271023.712 ops/s
# Warmup Iteration  11: 1270113.849 ops/s
# Warmup Iteration  12: 1272101.617 ops/s
# Warmup Iteration  13: 1270990.741 ops/s
# Warmup Iteration  14: 1268654.798 ops/s
# Warmup Iteration  15: 1268844.908 ops/s
# Warmup Iteration  16: 1271144.119 ops/s
# Warmup Iteration  17: 1269235.314 ops/s
# Warmup Iteration  18: 1270355.966 ops/s
# Warmup Iteration  19: 1262783.406 ops/s
# Warmup Iteration  20: 1270886.307 ops/s
# Warmup Iteration  21: 1274596.471 ops/s
# Warmup Iteration  22: 1269455.677 ops/s
# Warmup Iteration  23: 1271839.473 ops/s
# Warmup Iteration  24: 1273295.722 ops/s
# Warmup Iteration  25: 1271899.615 ops/s
# Warmup Iteration  26: 1272749.666 ops/s
# Warmup Iteration  27: 1271033.607 ops/s
# Warmup Iteration  28: 1273515.319 ops/s
# Warmup Iteration  29: 1269818.781 ops/s
# Warmup Iteration  30: 1270772.720 ops/s
Iteration   1: 1272261.930 ops/s
Iteration   2: 1274111.699 ops/s
Iteration   3: 1271911.883 ops/s
Iteration   4: 1263967.425 ops/s
Iteration   5: 1275941.649 ops/s
Iteration   6: 1273643.389 ops/s
Iteration   7: 1263419.714 ops/s
Iteration   8: 1268399.172 ops/s
Iteration   9: 1272490.248 ops/s
Iteration  10: 1269263.213 ops/s
Iteration  11: 1266297.757 ops/s
Iteration  12: 1274414.100 ops/s
Iteration  13: 1266137.432 ops/s
Iteration  14: 1274260.566 ops/s
Iteration  15: 1272916.396 ops/s
Iteration  16: 1269979.650 ops/s
Iteration  17: 1270131.693 ops/s
Iteration  18: 1267853.435 ops/s
Iteration  19: 1275167.130 ops/s
Iteration  20: 1269651.467 ops/s
Iteration  21: 1274863.625 ops/s
Iteration  22: 1271218.021 ops/s
Iteration  23: 1272812.081 ops/s
Iteration  24: 1269201.058 ops/s
Iteration  25: 1270104.876 ops/s
Iteration  26: 1272858.348 ops/s
Iteration  27: 1275117.012 ops/s
Iteration  28: 1270461.250 ops/s
Iteration  29: 1273457.341 ops/s
Iteration  30: 1274449.663 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloat":
  1271225.441 ±(99.9%) 2234.667 ops/s [Average]
  (min, avg, max) = (1263419.714, 1271225.441, 1275941.649), stdev = 3344.745
  CI (99.9%): [1268990.774, 1273460.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectFloat  thrpt   30  1271225.441 ± 2234.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1648385.205 ops/s
# Warmup Iteration   2: 3881616.143 ops/s
# Warmup Iteration   3: 3893254.150 ops/s
# Warmup Iteration   4: 3229762.452 ops/s
# Warmup Iteration   5: 3896248.376 ops/s
# Warmup Iteration   6: 3885781.880 ops/s
# Warmup Iteration   7: 3884239.236 ops/s
# Warmup Iteration   8: 3890146.125 ops/s
# Warmup Iteration   9: 3885110.170 ops/s
# Warmup Iteration  10: 3884326.152 ops/s
# Warmup Iteration  11: 3885095.961 ops/s
# Warmup Iteration  12: 3887816.864 ops/s
# Warmup Iteration  13: 3882521.775 ops/s
# Warmup Iteration  14: 3874242.350 ops/s
# Warmup Iteration  15: 3896606.945 ops/s
# Warmup Iteration  16: 3895526.251 ops/s
# Warmup Iteration  17: 3880237.290 ops/s
# Warmup Iteration  18: 3880515.539 ops/s
# Warmup Iteration  19: 3882348.745 ops/s
# Warmup Iteration  20: 3885792.000 ops/s
# Warmup Iteration  21: 3887041.737 ops/s
# Warmup Iteration  22: 3882606.903 ops/s
# Warmup Iteration  23: 3887512.244 ops/s
# Warmup Iteration  24: 3884151.511 ops/s
# Warmup Iteration  25: 3882826.768 ops/s
# Warmup Iteration  26: 3874480.503 ops/s
# Warmup Iteration  27: 3884947.045 ops/s
# Warmup Iteration  28: 3869466.392 ops/s
# Warmup Iteration  29: 3879037.376 ops/s
# Warmup Iteration  30: 3881531.707 ops/s
Iteration   1: 3880401.924 ops/s
Iteration   2: 3878614.106 ops/s
Iteration   3: 3885710.473 ops/s
Iteration   4: 3891726.502 ops/s
Iteration   5: 3882336.643 ops/s
Iteration   6: 3881949.275 ops/s
Iteration   7: 3868203.093 ops/s
Iteration   8: 3885142.314 ops/s
Iteration   9: 3874815.172 ops/s
Iteration  10: 3887752.084 ops/s
Iteration  11: 3894547.147 ops/s
Iteration  12: 3879636.340 ops/s
Iteration  13: 3890951.100 ops/s
Iteration  14: 3881574.318 ops/s
Iteration  15: 3882958.662 ops/s
Iteration  16: 3875327.199 ops/s
Iteration  17: 3884050.372 ops/s
Iteration  18: 3889061.394 ops/s
Iteration  19: 3888430.441 ops/s
Iteration  20: 3883152.095 ops/s
Iteration  21: 3874638.275 ops/s
Iteration  22: 3884669.844 ops/s
Iteration  23: 3873076.910 ops/s
Iteration  24: 3881819.114 ops/s
Iteration  25: 3885884.164 ops/s
Iteration  26: 3881046.515 ops/s
Iteration  27: 3883989.431 ops/s
Iteration  28: 3892662.422 ops/s
Iteration  29: 3890733.327 ops/s
Iteration  30: 3895080.186 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget":
  3883664.695 ±(99.9%) 4354.325 ops/s [Average]
  (min, avg, max) = (3868203.093, 3883664.695, 3895080.186), stdev = 6517.349
  CI (99.9%): [3879310.370, 3888019.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  3883664.695 ± 4354.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1319056.327 ops/s
# Warmup Iteration   2: 3160460.961 ops/s
# Warmup Iteration   3: 3163234.335 ops/s
# Warmup Iteration   4: 2643186.171 ops/s
# Warmup Iteration   5: 3168498.483 ops/s
# Warmup Iteration   6: 3170426.660 ops/s
# Warmup Iteration   7: 3168003.132 ops/s
# Warmup Iteration   8: 3165275.428 ops/s
# Warmup Iteration   9: 3169991.909 ops/s
# Warmup Iteration  10: 3182056.896 ops/s
# Warmup Iteration  11: 3186806.773 ops/s
# Warmup Iteration  12: 3178231.207 ops/s
# Warmup Iteration  13: 3177994.225 ops/s
# Warmup Iteration  14: 3177097.176 ops/s
# Warmup Iteration  15: 3174736.752 ops/s
# Warmup Iteration  16: 3175324.831 ops/s
# Warmup Iteration  17: 3175473.441 ops/s
# Warmup Iteration  18: 3174406.308 ops/s
# Warmup Iteration  19: 3176242.466 ops/s
# Warmup Iteration  20: 3174861.054 ops/s
# Warmup Iteration  21: 3173302.793 ops/s
# Warmup Iteration  22: 3168411.371 ops/s
# Warmup Iteration  23: 3176581.143 ops/s
# Warmup Iteration  24: 3173673.664 ops/s
# Warmup Iteration  25: 3176081.119 ops/s
# Warmup Iteration  26: 3177275.647 ops/s
# Warmup Iteration  27: 3172553.580 ops/s
# Warmup Iteration  28: 3172908.271 ops/s
# Warmup Iteration  29: 3177295.571 ops/s
# Warmup Iteration  30: 3182195.255 ops/s
Iteration   1: 3172717.548 ops/s
Iteration   2: 3166489.517 ops/s
Iteration   3: 3173498.665 ops/s
Iteration   4: 3170518.157 ops/s
Iteration   5: 3172155.734 ops/s
Iteration   6: 3158809.925 ops/s
Iteration   7: 3166151.646 ops/s
Iteration   8: 3181794.973 ops/s
Iteration   9: 3167667.807 ops/s
Iteration  10: 3175800.117 ops/s
Iteration  11: 3171878.768 ops/s
Iteration  12: 3179045.683 ops/s
Iteration  13: 3174903.639 ops/s
Iteration  14: 3164089.302 ops/s
Iteration  15: 3171490.500 ops/s
Iteration  16: 3177287.708 ops/s
Iteration  17: 3170943.711 ops/s
Iteration  18: 3176870.744 ops/s
Iteration  19: 3183426.746 ops/s
Iteration  20: 3165791.782 ops/s
Iteration  21: 3168518.848 ops/s
Iteration  22: 3180958.335 ops/s
Iteration  23: 3174853.235 ops/s
Iteration  24: 3171021.801 ops/s
Iteration  25: 3168052.525 ops/s
Iteration  26: 3171884.762 ops/s
Iteration  27: 3173107.917 ops/s
Iteration  28: 3172522.144 ops/s
Iteration  29: 3180501.676 ops/s
Iteration  30: 3169615.661 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithTarget":
  3172412.319 ±(99.9%) 3736.294 ops/s [Average]
  (min, avg, max) = (3158809.925, 3172412.319, 3183426.746), stdev = 5592.309
  CI (99.9%): [3168676.025, 3176148.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  3172412.319 ± 3736.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1031096.994 ops/s
# Warmup Iteration   2: 2486402.435 ops/s
# Warmup Iteration   3: 2484084.544 ops/s
# Warmup Iteration   4: 2072344.413 ops/s
# Warmup Iteration   5: 2524568.680 ops/s
# Warmup Iteration   6: 2508052.317 ops/s
# Warmup Iteration   7: 2510944.679 ops/s
# Warmup Iteration   8: 2512948.275 ops/s
# Warmup Iteration   9: 2508763.416 ops/s
# Warmup Iteration  10: 2503975.517 ops/s
# Warmup Iteration  11: 2491335.548 ops/s
# Warmup Iteration  12: 2493814.162 ops/s
# Warmup Iteration  13: 2484749.218 ops/s
# Warmup Iteration  14: 2511015.658 ops/s
# Warmup Iteration  15: 2505626.587 ops/s
# Warmup Iteration  16: 2517274.904 ops/s
# Warmup Iteration  17: 2510087.264 ops/s
# Warmup Iteration  18: 2489368.324 ops/s
# Warmup Iteration  19: 2502050.081 ops/s
# Warmup Iteration  20: 2475540.713 ops/s
# Warmup Iteration  21: 2505867.555 ops/s
# Warmup Iteration  22: 2490834.082 ops/s
# Warmup Iteration  23: 2487647.774 ops/s
# Warmup Iteration  24: 2517193.556 ops/s
# Warmup Iteration  25: 2490328.045 ops/s
# Warmup Iteration  26: 2499213.988 ops/s
# Warmup Iteration  27: 2507242.484 ops/s
# Warmup Iteration  28: 2501162.780 ops/s
# Warmup Iteration  29: 2475737.151 ops/s
# Warmup Iteration  30: 2503063.050 ops/s
Iteration   1: 2477403.453 ops/s
Iteration   2: 2504322.059 ops/s
Iteration   3: 2504671.715 ops/s
Iteration   4: 2465157.275 ops/s
Iteration   5: 2507571.193 ops/s
Iteration   6: 2467564.146 ops/s
Iteration   7: 2480845.886 ops/s
Iteration   8: 2493766.743 ops/s
Iteration   9: 2499010.095 ops/s
Iteration  10: 2518770.543 ops/s
Iteration  11: 2487925.735 ops/s
Iteration  12: 2493158.152 ops/s
Iteration  13: 2511583.721 ops/s
Iteration  14: 2479141.915 ops/s
Iteration  15: 2496501.677 ops/s
Iteration  16: 2511542.579 ops/s
Iteration  17: 2499897.244 ops/s
Iteration  18: 2470332.449 ops/s
Iteration  19: 2498453.901 ops/s
Iteration  20: 2488319.704 ops/s
Iteration  21: 2499045.740 ops/s
Iteration  22: 2492781.238 ops/s
Iteration  23: 2509552.093 ops/s
Iteration  24: 2482150.221 ops/s
Iteration  25: 2498242.670 ops/s
Iteration  26: 2495658.067 ops/s
Iteration  27: 2493997.150 ops/s
Iteration  28: 2503211.434 ops/s
Iteration  29: 2500434.666 ops/s
Iteration  30: 2500720.606 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIf":
  2494391.136 ±(99.9%) 8901.622 ops/s [Average]
  (min, avg, max) = (2465157.275, 2494391.136, 2518770.543), stdev = 13323.530
  CI (99.9%): [2485489.514, 2503292.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectIf  thrpt   30  2494391.136 ± 8901.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653339.098 ops/s
# Warmup Iteration   2: 1390396.515 ops/s
# Warmup Iteration   3: 1434045.435 ops/s
# Warmup Iteration   4: 1430678.112 ops/s
# Warmup Iteration   5: 1218282.265 ops/s
# Warmup Iteration   6: 1445839.653 ops/s
# Warmup Iteration   7: 1444140.222 ops/s
# Warmup Iteration   8: 1443598.024 ops/s
# Warmup Iteration   9: 1439762.278 ops/s
# Warmup Iteration  10: 1445639.182 ops/s
# Warmup Iteration  11: 1440818.600 ops/s
# Warmup Iteration  12: 1439457.116 ops/s
# Warmup Iteration  13: 1444369.561 ops/s
# Warmup Iteration  14: 1445410.959 ops/s
# Warmup Iteration  15: 1438069.701 ops/s
# Warmup Iteration  16: 1443848.192 ops/s
# Warmup Iteration  17: 1443318.733 ops/s
# Warmup Iteration  18: 1442736.703 ops/s
# Warmup Iteration  19: 1441821.025 ops/s
# Warmup Iteration  20: 1445432.391 ops/s
# Warmup Iteration  21: 1444351.021 ops/s
# Warmup Iteration  22: 1441450.350 ops/s
# Warmup Iteration  23: 1444785.157 ops/s
# Warmup Iteration  24: 1441203.302 ops/s
# Warmup Iteration  25: 1446572.444 ops/s
# Warmup Iteration  26: 1442957.350 ops/s
# Warmup Iteration  27: 1445096.454 ops/s
# Warmup Iteration  28: 1443514.723 ops/s
# Warmup Iteration  29: 1441686.793 ops/s
# Warmup Iteration  30: 1443108.474 ops/s
Iteration   1: 1440609.729 ops/s
Iteration   2: 1442700.381 ops/s
Iteration   3: 1436972.561 ops/s
Iteration   4: 1441673.656 ops/s
Iteration   5: 1439543.116 ops/s
Iteration   6: 1444759.241 ops/s
Iteration   7: 1448747.491 ops/s
Iteration   8: 1439999.822 ops/s
Iteration   9: 1443552.794 ops/s
Iteration  10: 1448406.407 ops/s
Iteration  11: 1442750.066 ops/s
Iteration  12: 1443718.253 ops/s
Iteration  13: 1437612.051 ops/s
Iteration  14: 1448965.802 ops/s
Iteration  15: 1438721.046 ops/s
Iteration  16: 1445374.059 ops/s
Iteration  17: 1438728.484 ops/s
Iteration  18: 1444601.350 ops/s
Iteration  19: 1449521.049 ops/s
Iteration  20: 1444392.395 ops/s
Iteration  21: 1443314.281 ops/s
Iteration  22: 1445264.802 ops/s
Iteration  23: 1447085.752 ops/s
Iteration  24: 1436569.190 ops/s
Iteration  25: 1442874.870 ops/s
Iteration  26: 1441463.328 ops/s
Iteration  27: 1444041.476 ops/s
Iteration  28: 1445785.563 ops/s
Iteration  29: 1443173.459 ops/s
Iteration  30: 1448118.958 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectInt":
  1443301.381 ±(99.9%) 2427.791 ops/s [Average]
  (min, avg, max) = (1436569.190, 1443301.381, 1449521.049), stdev = 3633.804
  CI (99.9%): [1440873.590, 1445729.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectInt  thrpt   30  1443301.381 ± 2427.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1777623.213 ops/s
# Warmup Iteration   2: 4197793.227 ops/s
# Warmup Iteration   3: 4181309.459 ops/s
# Warmup Iteration   4: 3469623.816 ops/s
# Warmup Iteration   5: 4193378.832 ops/s
# Warmup Iteration   6: 4188870.677 ops/s
# Warmup Iteration   7: 4182826.639 ops/s
# Warmup Iteration   8: 4199555.336 ops/s
# Warmup Iteration   9: 4193724.250 ops/s
# Warmup Iteration  10: 4189347.901 ops/s
# Warmup Iteration  11: 4172181.623 ops/s
# Warmup Iteration  12: 4188377.150 ops/s
# Warmup Iteration  13: 4183680.560 ops/s
# Warmup Iteration  14: 4177699.343 ops/s
# Warmup Iteration  15: 4186843.236 ops/s
# Warmup Iteration  16: 4186705.587 ops/s
# Warmup Iteration  17: 4185195.119 ops/s
# Warmup Iteration  18: 4185333.889 ops/s
# Warmup Iteration  19: 4186658.421 ops/s
# Warmup Iteration  20: 4185629.914 ops/s
# Warmup Iteration  21: 4185517.426 ops/s
# Warmup Iteration  22: 4178494.248 ops/s
# Warmup Iteration  23: 4189419.009 ops/s
# Warmup Iteration  24: 4181956.850 ops/s
# Warmup Iteration  25: 4185188.854 ops/s
# Warmup Iteration  26: 4182691.722 ops/s
# Warmup Iteration  27: 4176762.826 ops/s
# Warmup Iteration  28: 4179489.021 ops/s
# Warmup Iteration  29: 4178198.393 ops/s
# Warmup Iteration  30: 4195616.114 ops/s
Iteration   1: 4188273.205 ops/s
Iteration   2: 4180359.403 ops/s
Iteration   3: 4187825.896 ops/s
Iteration   4: 4181323.235 ops/s
Iteration   5: 4185814.629 ops/s
Iteration   6: 4179985.687 ops/s
Iteration   7: 4190180.980 ops/s
Iteration   8: 4188853.204 ops/s
Iteration   9: 4179682.882 ops/s
Iteration  10: 4190442.882 ops/s
Iteration  11: 4183542.857 ops/s
Iteration  12: 4177713.304 ops/s
Iteration  13: 4189463.167 ops/s
Iteration  14: 4186783.914 ops/s
Iteration  15: 4192976.447 ops/s
Iteration  16: 4191752.118 ops/s
Iteration  17: 4202041.595 ops/s
Iteration  18: 4183688.498 ops/s
Iteration  19: 4178572.658 ops/s
Iteration  20: 4184013.903 ops/s
Iteration  21: 4186481.003 ops/s
Iteration  22: 4175159.862 ops/s
Iteration  23: 4177105.167 ops/s
Iteration  24: 4171213.375 ops/s
Iteration  25: 4201015.472 ops/s
Iteration  26: 4189003.828 ops/s
Iteration  27: 4180575.965 ops/s
Iteration  28: 4176338.909 ops/s
Iteration  29: 4176369.966 ops/s
Iteration  30: 4175289.989 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget":
  4184394.800 ±(99.9%) 4927.460 ops/s [Average]
  (min, avg, max) = (4171213.375, 4184394.800, 4202041.595), stdev = 7375.190
  CI (99.9%): [4179467.340, 4189322.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  4184394.800 ± 4927.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1427995.764 ops/s
# Warmup Iteration   2: 3553268.403 ops/s
# Warmup Iteration   3: 3599247.256 ops/s
# Warmup Iteration   4: 2976921.264 ops/s
# Warmup Iteration   5: 3599056.155 ops/s
# Warmup Iteration   6: 3606003.674 ops/s
# Warmup Iteration   7: 3613160.405 ops/s
# Warmup Iteration   8: 3614960.395 ops/s
# Warmup Iteration   9: 3614491.414 ops/s
# Warmup Iteration  10: 3614504.918 ops/s
# Warmup Iteration  11: 3615006.502 ops/s
# Warmup Iteration  12: 3614557.747 ops/s
# Warmup Iteration  13: 3607680.962 ops/s
# Warmup Iteration  14: 3615055.117 ops/s
# Warmup Iteration  15: 3607104.264 ops/s
# Warmup Iteration  16: 3610656.870 ops/s
# Warmup Iteration  17: 3607326.470 ops/s
# Warmup Iteration  18: 3609979.294 ops/s
# Warmup Iteration  19: 3610621.328 ops/s
# Warmup Iteration  20: 3617350.149 ops/s
# Warmup Iteration  21: 3604773.778 ops/s
# Warmup Iteration  22: 3617751.086 ops/s
# Warmup Iteration  23: 3618150.244 ops/s
# Warmup Iteration  24: 3611631.163 ops/s
# Warmup Iteration  25: 3605879.842 ops/s
# Warmup Iteration  26: 3600786.487 ops/s
# Warmup Iteration  27: 3605739.965 ops/s
# Warmup Iteration  28: 3612014.814 ops/s
# Warmup Iteration  29: 3612655.247 ops/s
# Warmup Iteration  30: 3608868.126 ops/s
Iteration   1: 3609848.107 ops/s
Iteration   2: 3602530.579 ops/s
Iteration   3: 3607210.899 ops/s
Iteration   4: 3607617.777 ops/s
Iteration   5: 3608468.605 ops/s
Iteration   6: 3604252.364 ops/s
Iteration   7: 3601329.519 ops/s
Iteration   8: 3602639.143 ops/s
Iteration   9: 3621573.358 ops/s
Iteration  10: 3600874.012 ops/s
Iteration  11: 3602111.823 ops/s
Iteration  12: 3598722.718 ops/s
Iteration  13: 3621501.293 ops/s
Iteration  14: 3615233.868 ops/s
Iteration  15: 3621752.139 ops/s
Iteration  16: 3600446.186 ops/s
Iteration  17: 3607239.071 ops/s
Iteration  18: 3597013.774 ops/s
Iteration  19: 3610723.556 ops/s
Iteration  20: 3610636.827 ops/s
Iteration  21: 3597561.629 ops/s
Iteration  22: 3605007.842 ops/s
Iteration  23: 3609932.557 ops/s
Iteration  24: 3593733.638 ops/s
Iteration  25: 3606728.544 ops/s
Iteration  26: 3614486.304 ops/s
Iteration  27: 3609190.256 ops/s
Iteration  28: 3606188.488 ops/s
Iteration  29: 3603113.496 ops/s
Iteration  30: 3597543.495 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectIntWithTarget":
  3606507.062 ±(99.9%) 4858.723 ops/s [Average]
  (min, avg, max) = (3593733.638, 3606507.062, 3621752.139), stdev = 7272.308
  CI (99.9%): [3601648.339, 3611365.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3606507.062 ± 4858.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614304.224 ops/s
# Warmup Iteration   2: 1313881.510 ops/s
# Warmup Iteration   3: 1322357.844 ops/s
# Warmup Iteration   4: 1138419.528 ops/s
# Warmup Iteration   5: 1337077.584 ops/s
# Warmup Iteration   6: 1335791.955 ops/s
# Warmup Iteration   7: 1334151.847 ops/s
# Warmup Iteration   8: 1335519.496 ops/s
# Warmup Iteration   9: 1336232.315 ops/s
# Warmup Iteration  10: 1335534.957 ops/s
# Warmup Iteration  11: 1336009.526 ops/s
# Warmup Iteration  12: 1336277.855 ops/s
# Warmup Iteration  13: 1336129.997 ops/s
# Warmup Iteration  14: 1337150.660 ops/s
# Warmup Iteration  15: 1340545.128 ops/s
# Warmup Iteration  16: 1336957.799 ops/s
# Warmup Iteration  17: 1337210.266 ops/s
# Warmup Iteration  18: 1337722.254 ops/s
# Warmup Iteration  19: 1340290.525 ops/s
# Warmup Iteration  20: 1337095.743 ops/s
# Warmup Iteration  21: 1337137.079 ops/s
# Warmup Iteration  22: 1337242.895 ops/s
# Warmup Iteration  23: 1339695.188 ops/s
# Warmup Iteration  24: 1338905.770 ops/s
# Warmup Iteration  25: 1337199.335 ops/s
# Warmup Iteration  26: 1336312.597 ops/s
# Warmup Iteration  27: 1337327.905 ops/s
# Warmup Iteration  28: 1340551.598 ops/s
# Warmup Iteration  29: 1336812.279 ops/s
# Warmup Iteration  30: 1333387.779 ops/s
Iteration   1: 1338225.053 ops/s
Iteration   2: 1331148.934 ops/s
Iteration   3: 1339891.840 ops/s
Iteration   4: 1339567.262 ops/s
Iteration   5: 1337681.659 ops/s
Iteration   6: 1335493.203 ops/s
Iteration   7: 1336863.017 ops/s
Iteration   8: 1342084.074 ops/s
Iteration   9: 1342400.773 ops/s
Iteration  10: 1333506.118 ops/s
Iteration  11: 1336861.315 ops/s
Iteration  12: 1339769.273 ops/s
Iteration  13: 1334993.236 ops/s
Iteration  14: 1337781.423 ops/s
Iteration  15: 1336908.737 ops/s
Iteration  16: 1335811.280 ops/s
Iteration  17: 1339814.855 ops/s
Iteration  18: 1338602.372 ops/s
Iteration  19: 1342143.624 ops/s
Iteration  20: 1333600.246 ops/s
Iteration  21: 1336936.645 ops/s
Iteration  22: 1334607.498 ops/s
Iteration  23: 1339321.440 ops/s
Iteration  24: 1339498.859 ops/s
Iteration  25: 1339891.613 ops/s
Iteration  26: 1339323.533 ops/s
Iteration  27: 1338726.428 ops/s
Iteration  28: 1340569.085 ops/s
Iteration  29: 1338171.071 ops/s
Iteration  30: 1332978.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLong":
  1337772.433 ±(99.9%) 1879.109 ops/s [Average]
  (min, avg, max) = (1331148.934, 1337772.433, 1342400.773), stdev = 2812.561
  CI (99.9%): [1335893.325, 1339651.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectLong  thrpt   30  1337772.433 ± 1879.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1802760.630 ops/s
# Warmup Iteration   2: 4350029.320 ops/s
# Warmup Iteration   3: 3612664.673 ops/s
# Warmup Iteration   4: 4345999.681 ops/s
# Warmup Iteration   5: 4345761.544 ops/s
# Warmup Iteration   6: 4362691.362 ops/s
# Warmup Iteration   7: 4356569.959 ops/s
# Warmup Iteration   8: 4354657.396 ops/s
# Warmup Iteration   9: 4346217.206 ops/s
# Warmup Iteration  10: 4352097.929 ops/s
# Warmup Iteration  11: 4354780.206 ops/s
# Warmup Iteration  12: 4369139.714 ops/s
# Warmup Iteration  13: 4348425.315 ops/s
# Warmup Iteration  14: 4351256.736 ops/s
# Warmup Iteration  15: 4347923.456 ops/s
# Warmup Iteration  16: 4342894.208 ops/s
# Warmup Iteration  17: 4357433.459 ops/s
# Warmup Iteration  18: 4354076.784 ops/s
# Warmup Iteration  19: 4345377.232 ops/s
# Warmup Iteration  20: 4349954.250 ops/s
# Warmup Iteration  21: 4353459.974 ops/s
# Warmup Iteration  22: 4362153.225 ops/s
# Warmup Iteration  23: 4349361.434 ops/s
# Warmup Iteration  24: 4360199.407 ops/s
# Warmup Iteration  25: 4350474.334 ops/s
# Warmup Iteration  26: 4324030.573 ops/s
# Warmup Iteration  27: 4345098.198 ops/s
# Warmup Iteration  28: 4358545.298 ops/s
# Warmup Iteration  29: 4325155.032 ops/s
# Warmup Iteration  30: 4348628.555 ops/s
Iteration   1: 4366380.423 ops/s
Iteration   2: 4352511.552 ops/s
Iteration   3: 4359467.661 ops/s
Iteration   4: 4343995.136 ops/s
Iteration   5: 4339297.445 ops/s
Iteration   6: 4354139.306 ops/s
Iteration   7: 4366138.199 ops/s
Iteration   8: 4351815.723 ops/s
Iteration   9: 4356265.221 ops/s
Iteration  10: 4361931.067 ops/s
Iteration  11: 4351825.399 ops/s
Iteration  12: 4351099.392 ops/s
Iteration  13: 4367906.726 ops/s
Iteration  14: 4359845.808 ops/s
Iteration  15: 4365009.284 ops/s
Iteration  16: 4355754.798 ops/s
Iteration  17: 4370589.132 ops/s
Iteration  18: 4369884.817 ops/s
Iteration  19: 4343691.588 ops/s
Iteration  20: 4336339.726 ops/s
Iteration  21: 4365242.034 ops/s
Iteration  22: 4360664.691 ops/s
Iteration  23: 4368860.963 ops/s
Iteration  24: 4346314.748 ops/s
Iteration  25: 4361592.826 ops/s
Iteration  26: 4363191.958 ops/s
Iteration  27: 4354010.998 ops/s
Iteration  28: 4361020.878 ops/s
Iteration  29: 4343820.381 ops/s
Iteration  30: 4343078.262 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget":
  4356389.538 ±(99.9%) 6477.880 ops/s [Average]
  (min, avg, max) = (4336339.726, 4356389.538, 4370589.132), stdev = 9695.787
  CI (99.9%): [4349911.658, 4362867.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  4356389.538 ± 6477.880  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1340199.114 ops/s
# Warmup Iteration   2: 3229483.145 ops/s
# Warmup Iteration   3: 2826448.375 ops/s
# Warmup Iteration   4: 3134572.518 ops/s
# Warmup Iteration   5: 3265045.090 ops/s
# Warmup Iteration   6: 3260634.056 ops/s
# Warmup Iteration   7: 3259116.221 ops/s
# Warmup Iteration   8: 3265961.995 ops/s
# Warmup Iteration   9: 3253921.965 ops/s
# Warmup Iteration  10: 3253417.915 ops/s
# Warmup Iteration  11: 3253718.578 ops/s
# Warmup Iteration  12: 3258922.770 ops/s
# Warmup Iteration  13: 3266003.474 ops/s
# Warmup Iteration  14: 3257214.656 ops/s
# Warmup Iteration  15: 3260525.612 ops/s
# Warmup Iteration  16: 3266594.306 ops/s
# Warmup Iteration  17: 3272958.235 ops/s
# Warmup Iteration  18: 3269195.441 ops/s
# Warmup Iteration  19: 3271099.646 ops/s
# Warmup Iteration  20: 3262998.832 ops/s
# Warmup Iteration  21: 3274595.267 ops/s
# Warmup Iteration  22: 3277123.353 ops/s
# Warmup Iteration  23: 3275973.803 ops/s
# Warmup Iteration  24: 3271352.268 ops/s
# Warmup Iteration  25: 3269553.912 ops/s
# Warmup Iteration  26: 3275472.176 ops/s
# Warmup Iteration  27: 3264678.846 ops/s
# Warmup Iteration  28: 3263046.201 ops/s
# Warmup Iteration  29: 3266011.530 ops/s
# Warmup Iteration  30: 3266417.047 ops/s
Iteration   1: 3271801.716 ops/s
Iteration   2: 3263306.263 ops/s
Iteration   3: 3270594.950 ops/s
Iteration   4: 3270865.902 ops/s
Iteration   5: 3273778.129 ops/s
Iteration   6: 3264542.620 ops/s
Iteration   7: 3277113.536 ops/s
Iteration   8: 3271997.231 ops/s
Iteration   9: 3280573.567 ops/s
Iteration  10: 3269665.309 ops/s
Iteration  11: 3252270.096 ops/s
Iteration  12: 3279516.835 ops/s
Iteration  13: 3274627.760 ops/s
Iteration  14: 3266649.201 ops/s
Iteration  15: 3271373.825 ops/s
Iteration  16: 3261159.864 ops/s
Iteration  17: 3268371.090 ops/s
Iteration  18: 3250605.081 ops/s
Iteration  19: 3273512.723 ops/s
Iteration  20: 3268171.346 ops/s
Iteration  21: 3274026.749 ops/s
Iteration  22: 3269146.874 ops/s
Iteration  23: 3264889.373 ops/s
Iteration  24: 3259243.394 ops/s
Iteration  25: 3271830.667 ops/s
Iteration  26: 3275235.092 ops/s
Iteration  27: 3263761.250 ops/s
Iteration  28: 3261545.503 ops/s
Iteration  29: 3276514.167 ops/s
Iteration  30: 3285716.688 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectLongWithTarget":
  3269413.560 ±(99.9%) 5191.321 ops/s [Average]
  (min, avg, max) = (3250605.081, 3269413.560, 3285716.688), stdev = 7770.125
  CI (99.9%): [3264222.239, 3274604.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  3269413.560 ± 5191.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677306.600 ops/s
# Warmup Iteration   2: 1440871.513 ops/s
# Warmup Iteration   3: 1491039.199 ops/s
# Warmup Iteration   4: 1492610.326 ops/s
# Warmup Iteration   5: 1249697.083 ops/s
# Warmup Iteration   6: 1497648.677 ops/s
# Warmup Iteration   7: 1500048.164 ops/s
# Warmup Iteration   8: 1497668.873 ops/s
# Warmup Iteration   9: 1496780.590 ops/s
# Warmup Iteration  10: 1501934.508 ops/s
# Warmup Iteration  11: 1497938.701 ops/s
# Warmup Iteration  12: 1501461.801 ops/s
# Warmup Iteration  13: 1494673.984 ops/s
# Warmup Iteration  14: 1497643.239 ops/s
# Warmup Iteration  15: 1496799.382 ops/s
# Warmup Iteration  16: 1493973.557 ops/s
# Warmup Iteration  17: 1490379.599 ops/s
# Warmup Iteration  18: 1500576.202 ops/s
# Warmup Iteration  19: 1495997.527 ops/s
# Warmup Iteration  20: 1503198.466 ops/s
# Warmup Iteration  21: 1500824.844 ops/s
# Warmup Iteration  22: 1496213.867 ops/s
# Warmup Iteration  23: 1499452.530 ops/s
# Warmup Iteration  24: 1500658.794 ops/s
# Warmup Iteration  25: 1494617.578 ops/s
# Warmup Iteration  26: 1499394.363 ops/s
# Warmup Iteration  27: 1498285.825 ops/s
# Warmup Iteration  28: 1495135.281 ops/s
# Warmup Iteration  29: 1494693.062 ops/s
# Warmup Iteration  30: 1499667.549 ops/s
Iteration   1: 1498322.465 ops/s
Iteration   2: 1497497.725 ops/s
Iteration   3: 1497809.410 ops/s
Iteration   4: 1500086.155 ops/s
Iteration   5: 1501622.042 ops/s
Iteration   6: 1497325.109 ops/s
Iteration   7: 1500511.020 ops/s
Iteration   8: 1500853.982 ops/s
Iteration   9: 1499182.593 ops/s
Iteration  10: 1498159.357 ops/s
Iteration  11: 1501638.255 ops/s
Iteration  12: 1499134.964 ops/s
Iteration  13: 1504649.107 ops/s
Iteration  14: 1501602.128 ops/s
Iteration  15: 1498565.610 ops/s
Iteration  16: 1502173.417 ops/s
Iteration  17: 1497196.872 ops/s
Iteration  18: 1500428.269 ops/s
Iteration  19: 1502746.177 ops/s
Iteration  20: 1503016.571 ops/s
Iteration  21: 1496213.845 ops/s
Iteration  22: 1499227.870 ops/s
Iteration  23: 1501641.219 ops/s
Iteration  24: 1502320.789 ops/s
Iteration  25: 1503701.240 ops/s
Iteration  26: 1498960.275 ops/s
Iteration  27: 1501803.972 ops/s
Iteration  28: 1502124.061 ops/s
Iteration  29: 1501553.624 ops/s
Iteration  30: 1502987.477 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShort":
  1500435.187 ±(99.9%) 1462.736 ops/s [Average]
  (min, avg, max) = (1496213.845, 1500435.187, 1504649.107), stdev = 2189.354
  CI (99.9%): [1498972.451, 1501897.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectShort  thrpt   30  1500435.187 ± 1462.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2002607.654 ops/s
# Warmup Iteration   2: 4566708.046 ops/s
# Warmup Iteration   3: 4529510.554 ops/s
# Warmup Iteration   4: 3957787.715 ops/s
# Warmup Iteration   5: 4634126.604 ops/s
# Warmup Iteration   6: 4627001.764 ops/s
# Warmup Iteration   7: 4640860.183 ops/s
# Warmup Iteration   8: 4617841.335 ops/s
# Warmup Iteration   9: 4627964.870 ops/s
# Warmup Iteration  10: 4634586.739 ops/s
# Warmup Iteration  11: 4621553.128 ops/s
# Warmup Iteration  12: 4622078.724 ops/s
# Warmup Iteration  13: 4625542.996 ops/s
# Warmup Iteration  14: 4622292.845 ops/s
# Warmup Iteration  15: 4630602.409 ops/s
# Warmup Iteration  16: 4618384.408 ops/s
# Warmup Iteration  17: 4625314.235 ops/s
# Warmup Iteration  18: 4619740.559 ops/s
# Warmup Iteration  19: 4633684.699 ops/s
# Warmup Iteration  20: 4627626.273 ops/s
# Warmup Iteration  21: 4617473.165 ops/s
# Warmup Iteration  22: 4624577.525 ops/s
# Warmup Iteration  23: 4612957.266 ops/s
# Warmup Iteration  24: 4621495.938 ops/s
# Warmup Iteration  25: 4620492.994 ops/s
# Warmup Iteration  26: 4634452.081 ops/s
# Warmup Iteration  27: 4634152.428 ops/s
# Warmup Iteration  28: 4625594.584 ops/s
# Warmup Iteration  29: 4618597.434 ops/s
# Warmup Iteration  30: 4633312.309 ops/s
Iteration   1: 4634085.846 ops/s
Iteration   2: 4639590.419 ops/s
Iteration   3: 4637649.232 ops/s
Iteration   4: 4631246.951 ops/s
Iteration   5: 4629059.296 ops/s
Iteration   6: 4631086.083 ops/s
Iteration   7: 4626478.872 ops/s
Iteration   8: 4641234.466 ops/s
Iteration   9: 4625721.292 ops/s
Iteration  10: 4622199.358 ops/s
Iteration  11: 4634095.225 ops/s
Iteration  12: 4640509.088 ops/s
Iteration  13: 4629508.536 ops/s
Iteration  14: 4641751.347 ops/s
Iteration  15: 4627239.573 ops/s
Iteration  16: 4631929.836 ops/s
Iteration  17: 4623489.599 ops/s
Iteration  18: 4642169.408 ops/s
Iteration  19: 4638409.356 ops/s
Iteration  20: 4644542.779 ops/s
Iteration  21: 4631484.181 ops/s
Iteration  22: 4633214.180 ops/s
Iteration  23: 4621818.227 ops/s
Iteration  24: 4633837.716 ops/s
Iteration  25: 4643083.544 ops/s
Iteration  26: 4615778.448 ops/s
Iteration  27: 4642909.714 ops/s
Iteration  28: 4634975.458 ops/s
Iteration  29: 4636414.075 ops/s
Iteration  30: 4640349.731 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget":
  4633528.728 ±(99.9%) 4918.849 ops/s [Average]
  (min, avg, max) = (4615778.448, 4633528.728, 4644542.779), stdev = 7362.302
  CI (99.9%): [4628609.879, 4638447.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  4633528.728 ± 4918.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1527572.481 ops/s
# Warmup Iteration   2: 3690073.346 ops/s
# Warmup Iteration   3: 3722949.215 ops/s
# Warmup Iteration   4: 3115062.815 ops/s
# Warmup Iteration   5: 3749540.134 ops/s
# Warmup Iteration   6: 3736416.216 ops/s
# Warmup Iteration   7: 3754572.536 ops/s
# Warmup Iteration   8: 3747365.636 ops/s
# Warmup Iteration   9: 3741380.928 ops/s
# Warmup Iteration  10: 3744664.426 ops/s
# Warmup Iteration  11: 3739515.864 ops/s
# Warmup Iteration  12: 3739137.850 ops/s
# Warmup Iteration  13: 3733893.126 ops/s
# Warmup Iteration  14: 3740476.312 ops/s
# Warmup Iteration  15: 3734342.453 ops/s
# Warmup Iteration  16: 3742374.139 ops/s
# Warmup Iteration  17: 3748462.349 ops/s
# Warmup Iteration  18: 3734773.855 ops/s
# Warmup Iteration  19: 3746266.558 ops/s
# Warmup Iteration  20: 3749587.509 ops/s
# Warmup Iteration  21: 3740300.144 ops/s
# Warmup Iteration  22: 3738823.143 ops/s
# Warmup Iteration  23: 3747240.120 ops/s
# Warmup Iteration  24: 3747875.434 ops/s
# Warmup Iteration  25: 3724310.441 ops/s
# Warmup Iteration  26: 3743404.024 ops/s
# Warmup Iteration  27: 3736974.163 ops/s
# Warmup Iteration  28: 3740337.361 ops/s
# Warmup Iteration  29: 3737104.697 ops/s
# Warmup Iteration  30: 3742525.101 ops/s
Iteration   1: 3736371.799 ops/s
Iteration   2: 3742518.679 ops/s
Iteration   3: 3751678.114 ops/s
Iteration   4: 3743655.915 ops/s
Iteration   5: 3739722.938 ops/s
Iteration   6: 3748542.375 ops/s
Iteration   7: 3735238.024 ops/s
Iteration   8: 3735883.331 ops/s
Iteration   9: 3754707.807 ops/s
Iteration  10: 3744501.973 ops/s
Iteration  11: 3746121.779 ops/s
Iteration  12: 3731610.377 ops/s
Iteration  13: 3735108.052 ops/s
Iteration  14: 3738584.928 ops/s
Iteration  15: 3739718.873 ops/s
Iteration  16: 3742368.614 ops/s
Iteration  17: 3751050.427 ops/s
Iteration  18: 3744496.883 ops/s
Iteration  19: 3744563.633 ops/s
Iteration  20: 3745061.549 ops/s
Iteration  21: 3740431.621 ops/s
Iteration  22: 3741122.769 ops/s
Iteration  23: 3739501.408 ops/s
Iteration  24: 3752578.585 ops/s
Iteration  25: 3734648.371 ops/s
Iteration  26: 3734328.300 ops/s
Iteration  27: 3740179.905 ops/s
Iteration  28: 3745390.201 ops/s
Iteration  29: 3727759.213 ops/s
Iteration  30: 3732055.339 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectShortWithTarget":
  3741316.726 ±(99.9%) 4399.566 ops/s [Average]
  (min, avg, max) = (3727759.213, 3741316.726, 3754707.807), stdev = 6585.063
  CI (99.9%): [3736917.161, 3745716.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  3741316.726 ± 4399.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136924.632 ops/s
# Warmup Iteration   2: 232241.676 ops/s
# Warmup Iteration   3: 289999.502 ops/s
# Warmup Iteration   4: 291068.006 ops/s
# Warmup Iteration   5: 289901.837 ops/s
# Warmup Iteration   6: 291865.096 ops/s
# Warmup Iteration   7: 240258.306 ops/s
# Warmup Iteration   8: 291584.031 ops/s
# Warmup Iteration   9: 292043.461 ops/s
# Warmup Iteration  10: 291873.657 ops/s
# Warmup Iteration  11: 292137.577 ops/s
# Warmup Iteration  12: 292139.926 ops/s
# Warmup Iteration  13: 292504.827 ops/s
# Warmup Iteration  14: 291637.464 ops/s
# Warmup Iteration  15: 292032.269 ops/s
# Warmup Iteration  16: 292014.926 ops/s
# Warmup Iteration  17: 291816.488 ops/s
# Warmup Iteration  18: 292179.745 ops/s
# Warmup Iteration  19: 292316.575 ops/s
# Warmup Iteration  20: 292114.306 ops/s
# Warmup Iteration  21: 292226.829 ops/s
# Warmup Iteration  22: 291775.921 ops/s
# Warmup Iteration  23: 292237.644 ops/s
# Warmup Iteration  24: 291979.629 ops/s
# Warmup Iteration  25: 292162.503 ops/s
# Warmup Iteration  26: 292024.283 ops/s
# Warmup Iteration  27: 291582.961 ops/s
# Warmup Iteration  28: 291765.880 ops/s
# Warmup Iteration  29: 291646.862 ops/s
# Warmup Iteration  30: 291909.180 ops/s
Iteration   1: 291512.035 ops/s
Iteration   2: 290199.650 ops/s
Iteration   3: 291566.139 ops/s
Iteration   4: 291941.996 ops/s
Iteration   5: 292550.013 ops/s
Iteration   6: 292044.963 ops/s
Iteration   7: 291575.460 ops/s
Iteration   8: 292079.476 ops/s
Iteration   9: 291875.515 ops/s
Iteration  10: 292802.427 ops/s
Iteration  11: 292673.937 ops/s
Iteration  12: 291563.339 ops/s
Iteration  13: 292283.706 ops/s
Iteration  14: 291111.778 ops/s
Iteration  15: 291833.829 ops/s
Iteration  16: 292530.695 ops/s
Iteration  17: 292004.139 ops/s
Iteration  18: 293024.259 ops/s
Iteration  19: 291586.901 ops/s
Iteration  20: 292419.469 ops/s
Iteration  21: 292180.481 ops/s
Iteration  22: 292439.287 ops/s
Iteration  23: 291733.990 ops/s
Iteration  24: 292236.956 ops/s
Iteration  25: 292613.918 ops/s
Iteration  26: 292593.577 ops/s
Iteration  27: 291215.853 ops/s
Iteration  28: 292481.031 ops/s
Iteration  29: 291648.243 ops/s
Iteration  30: 292021.833 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectTarget":
  292011.496 ±(99.9%) 394.070 ops/s [Average]
  (min, avg, max) = (290199.650, 292011.496, 293024.259), stdev = 589.825
  CI (99.9%): [291617.427, 292405.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectTarget  thrpt   30  292011.496 ± 394.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 954054.459 ops/s
# Warmup Iteration   2: 1767625.517 ops/s
# Warmup Iteration   3: 2028869.987 ops/s
# Warmup Iteration   4: 2034294.082 ops/s
# Warmup Iteration   5: 1995002.623 ops/s
# Warmup Iteration   6: 1697190.614 ops/s
# Warmup Iteration   7: 2031215.628 ops/s
# Warmup Iteration   8: 2037652.958 ops/s
# Warmup Iteration   9: 2034649.339 ops/s
# Warmup Iteration  10: 2040886.930 ops/s
# Warmup Iteration  11: 2039586.213 ops/s
# Warmup Iteration  12: 2038606.855 ops/s
# Warmup Iteration  13: 2038835.142 ops/s
# Warmup Iteration  14: 2031731.574 ops/s
# Warmup Iteration  15: 2036419.055 ops/s
# Warmup Iteration  16: 2037325.058 ops/s
# Warmup Iteration  17: 2037053.806 ops/s
# Warmup Iteration  18: 2034306.111 ops/s
# Warmup Iteration  19: 2041670.378 ops/s
# Warmup Iteration  20: 2034949.464 ops/s
# Warmup Iteration  21: 2036884.523 ops/s
# Warmup Iteration  22: 2033137.393 ops/s
# Warmup Iteration  23: 2036013.668 ops/s
# Warmup Iteration  24: 2039098.243 ops/s
# Warmup Iteration  25: 2036623.375 ops/s
# Warmup Iteration  26: 2034747.776 ops/s
# Warmup Iteration  27: 2034220.818 ops/s
# Warmup Iteration  28: 2039236.036 ops/s
# Warmup Iteration  29: 2038774.793 ops/s
# Warmup Iteration  30: 2038460.822 ops/s
Iteration   1: 2039007.835 ops/s
Iteration   2: 2036515.289 ops/s
Iteration   3: 2035652.499 ops/s
Iteration   4: 2033088.770 ops/s
Iteration   5: 2041759.848 ops/s
Iteration   6: 2040864.269 ops/s
Iteration   7: 2041292.237 ops/s
Iteration   8: 2042983.978 ops/s
Iteration   9: 2037971.885 ops/s
Iteration  10: 2037492.962 ops/s
Iteration  11: 2031350.980 ops/s
Iteration  12: 2039950.216 ops/s
Iteration  13: 2036204.354 ops/s
Iteration  14: 2043450.384 ops/s
Iteration  15: 2039148.380 ops/s
Iteration  16: 2036152.311 ops/s
Iteration  17: 2034812.317 ops/s
Iteration  18: 2039733.094 ops/s
Iteration  19: 2035638.952 ops/s
Iteration  20: 2039228.963 ops/s
Iteration  21: 2036022.040 ops/s
Iteration  22: 2041754.832 ops/s
Iteration  23: 2041021.606 ops/s
Iteration  24: 2032791.397 ops/s
Iteration  25: 2043047.089 ops/s
Iteration  26: 2037532.544 ops/s
Iteration  27: 2036531.519 ops/s
Iteration  28: 2040107.798 ops/s
Iteration  29: 2026418.172 ops/s
Iteration  30: 2033189.568 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith":
  2037690.536 ±(99.9%) 2596.563 ops/s [Average]
  (min, avg, max) = (2026418.172, 2037690.536, 2043450.384), stdev = 3886.414
  CI (99.9%): [2035093.973, 2040287.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectWith  thrpt   30  2037690.536 ± 2596.563  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1997292.004 ops/s
# Warmup Iteration   2: 5263849.192 ops/s
# Warmup Iteration   3: 5210451.800 ops/s
# Warmup Iteration   4: 4341818.291 ops/s
# Warmup Iteration   5: 5224903.055 ops/s
# Warmup Iteration   6: 5229826.752 ops/s
# Warmup Iteration   7: 5226303.682 ops/s
# Warmup Iteration   8: 5223538.772 ops/s
# Warmup Iteration   9: 5225759.918 ops/s
# Warmup Iteration  10: 5230407.385 ops/s
# Warmup Iteration  11: 5221553.236 ops/s
# Warmup Iteration  12: 5235044.125 ops/s
# Warmup Iteration  13: 5224070.946 ops/s
# Warmup Iteration  14: 5229985.970 ops/s
# Warmup Iteration  15: 5225150.098 ops/s
# Warmup Iteration  16: 5220034.675 ops/s
# Warmup Iteration  17: 5233725.026 ops/s
# Warmup Iteration  18: 5232981.834 ops/s
# Warmup Iteration  19: 5227782.275 ops/s
# Warmup Iteration  20: 5228217.264 ops/s
# Warmup Iteration  21: 5225811.691 ops/s
# Warmup Iteration  22: 5232948.225 ops/s
# Warmup Iteration  23: 5227531.148 ops/s
# Warmup Iteration  24: 5228227.201 ops/s
# Warmup Iteration  25: 5224157.415 ops/s
# Warmup Iteration  26: 5224864.663 ops/s
# Warmup Iteration  27: 5232890.482 ops/s
# Warmup Iteration  28: 5239429.200 ops/s
# Warmup Iteration  29: 5218848.441 ops/s
# Warmup Iteration  30: 5229779.494 ops/s
Iteration   1: 5227219.344 ops/s
Iteration   2: 5202793.758 ops/s
Iteration   3: 5242649.718 ops/s
Iteration   4: 5235015.375 ops/s
Iteration   5: 5229947.601 ops/s
Iteration   6: 5229615.528 ops/s
Iteration   7: 5228840.366 ops/s
Iteration   8: 5220090.615 ops/s
Iteration   9: 5233674.716 ops/s
Iteration  10: 5226873.598 ops/s
Iteration  11: 5216290.906 ops/s
Iteration  12: 5227550.342 ops/s
Iteration  13: 5235807.563 ops/s
Iteration  14: 5228138.092 ops/s
Iteration  15: 5223290.714 ops/s
Iteration  16: 5215549.033 ops/s
Iteration  17: 5215253.842 ops/s
Iteration  18: 5221923.745 ops/s
Iteration  19: 5236241.915 ops/s
Iteration  20: 5238446.954 ops/s
Iteration  21: 5234785.050 ops/s
Iteration  22: 5228471.175 ops/s
Iteration  23: 5231387.162 ops/s
Iteration  24: 5224503.765 ops/s
Iteration  25: 5231040.743 ops/s
Iteration  26: 5238091.075 ops/s
Iteration  27: 5221383.441 ops/s
Iteration  28: 5246406.328 ops/s
Iteration  29: 5212055.576 ops/s
Iteration  30: 5248610.662 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndex":
  5228398.290 ±(99.9%) 6787.118 ops/s [Average]
  (min, avg, max) = (5202793.758, 5228398.290, 5248610.662), stdev = 10158.639
  CI (99.9%): [5221611.173, 5235185.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectWithIndex  thrpt   30  5228398.290 ± 6787.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644679.319 ops/s
# Warmup Iteration   2: 1617428.721 ops/s
# Warmup Iteration   3: 1687117.390 ops/s
# Warmup Iteration   4: 1404952.320 ops/s
# Warmup Iteration   5: 1689833.405 ops/s
# Warmup Iteration   6: 1690337.161 ops/s
# Warmup Iteration   7: 1690270.743 ops/s
# Warmup Iteration   8: 1685722.207 ops/s
# Warmup Iteration   9: 1690125.881 ops/s
# Warmup Iteration  10: 1688413.481 ops/s
# Warmup Iteration  11: 1690700.858 ops/s
# Warmup Iteration  12: 1690630.824 ops/s
# Warmup Iteration  13: 1692929.224 ops/s
# Warmup Iteration  14: 1690154.086 ops/s
# Warmup Iteration  15: 1689772.584 ops/s
# Warmup Iteration  16: 1694505.162 ops/s
# Warmup Iteration  17: 1691014.237 ops/s
# Warmup Iteration  18: 1678067.032 ops/s
# Warmup Iteration  19: 1686104.918 ops/s
# Warmup Iteration  20: 1690640.656 ops/s
# Warmup Iteration  21: 1685655.184 ops/s
# Warmup Iteration  22: 1693192.917 ops/s
# Warmup Iteration  23: 1688054.817 ops/s
# Warmup Iteration  24: 1684047.463 ops/s
# Warmup Iteration  25: 1687395.255 ops/s
# Warmup Iteration  26: 1690562.012 ops/s
# Warmup Iteration  27: 1689659.710 ops/s
# Warmup Iteration  28: 1691545.048 ops/s
# Warmup Iteration  29: 1692077.852 ops/s
# Warmup Iteration  30: 1690467.793 ops/s
Iteration   1: 1697096.293 ops/s
Iteration   2: 1691448.030 ops/s
Iteration   3: 1688948.050 ops/s
Iteration   4: 1687875.966 ops/s
Iteration   5: 1691011.020 ops/s
Iteration   6: 1692587.115 ops/s
Iteration   7: 1684726.135 ops/s
Iteration   8: 1686363.290 ops/s
Iteration   9: 1690190.315 ops/s
Iteration  10: 1692949.085 ops/s
Iteration  11: 1687132.400 ops/s
Iteration  12: 1689353.836 ops/s
Iteration  13: 1692311.193 ops/s
Iteration  14: 1685998.374 ops/s
Iteration  15: 1688425.837 ops/s
Iteration  16: 1682338.714 ops/s
Iteration  17: 1691550.516 ops/s
Iteration  18: 1687302.113 ops/s
Iteration  19: 1688788.833 ops/s
Iteration  20: 1692429.651 ops/s
Iteration  21: 1691672.696 ops/s
Iteration  22: 1694316.773 ops/s
Iteration  23: 1688109.633 ops/s
Iteration  24: 1685507.729 ops/s
Iteration  25: 1691167.173 ops/s
Iteration  26: 1687170.914 ops/s
Iteration  27: 1685756.247 ops/s
Iteration  28: 1682019.136 ops/s
Iteration  29: 1690086.269 ops/s
Iteration  30: 1692742.485 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1689245.861 ±(99.9%) 2322.725 ops/s [Average]
  (min, avg, max) = (1682019.136, 1689245.861, 1697096.293), stdev = 3476.545
  CI (99.9%): [1686923.136, 1691568.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1689245.861 ± 2322.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143399.750 ops/s
# Warmup Iteration   2: 249453.248 ops/s
# Warmup Iteration   3: 310829.838 ops/s
# Warmup Iteration   4: 312508.321 ops/s
# Warmup Iteration   5: 312867.723 ops/s
# Warmup Iteration   6: 301580.964 ops/s
# Warmup Iteration   7: 266367.154 ops/s
# Warmup Iteration   8: 312511.522 ops/s
# Warmup Iteration   9: 312683.084 ops/s
# Warmup Iteration  10: 313223.326 ops/s
# Warmup Iteration  11: 313181.244 ops/s
# Warmup Iteration  12: 312897.335 ops/s
# Warmup Iteration  13: 312941.975 ops/s
# Warmup Iteration  14: 313604.530 ops/s
# Warmup Iteration  15: 312416.984 ops/s
# Warmup Iteration  16: 313419.895 ops/s
# Warmup Iteration  17: 312686.197 ops/s
# Warmup Iteration  18: 313194.291 ops/s
# Warmup Iteration  19: 313479.048 ops/s
# Warmup Iteration  20: 312696.004 ops/s
# Warmup Iteration  21: 312817.078 ops/s
# Warmup Iteration  22: 312580.843 ops/s
# Warmup Iteration  23: 312638.019 ops/s
# Warmup Iteration  24: 312495.004 ops/s
# Warmup Iteration  25: 312676.690 ops/s
# Warmup Iteration  26: 312423.901 ops/s
# Warmup Iteration  27: 311956.073 ops/s
# Warmup Iteration  28: 312270.436 ops/s
# Warmup Iteration  29: 312758.131 ops/s
# Warmup Iteration  30: 313210.956 ops/s
Iteration   1: 313389.595 ops/s
Iteration   2: 313287.348 ops/s
Iteration   3: 312147.362 ops/s
Iteration   4: 313751.083 ops/s
Iteration   5: 312543.004 ops/s
Iteration   6: 313354.800 ops/s
Iteration   7: 313251.723 ops/s
Iteration   8: 313637.398 ops/s
Iteration   9: 312985.049 ops/s
Iteration  10: 312920.164 ops/s
Iteration  11: 312149.773 ops/s
Iteration  12: 313156.020 ops/s
Iteration  13: 312952.902 ops/s
Iteration  14: 312139.473 ops/s
Iteration  15: 313292.037 ops/s
Iteration  16: 313678.210 ops/s
Iteration  17: 312442.927 ops/s
Iteration  18: 313163.168 ops/s
Iteration  19: 312454.854 ops/s
Iteration  20: 313168.379 ops/s
Iteration  21: 312127.444 ops/s
Iteration  22: 313208.066 ops/s
Iteration  23: 312355.127 ops/s
Iteration  24: 312936.655 ops/s
Iteration  25: 312567.792 ops/s
Iteration  26: 314316.608 ops/s
Iteration  27: 312743.777 ops/s
Iteration  28: 313338.717 ops/s
Iteration  29: 312370.309 ops/s
Iteration  30: 312717.495 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_collectWith_target":
  312951.575 ±(99.9%) 367.310 ops/s [Average]
  (min, avg, max) = (312127.444, 312951.575, 314316.608), stdev = 549.773
  CI (99.9%): [312584.265, 313318.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_collectWith_target  thrpt   30  312951.575 ± 367.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8581547.837 ops/s
# Warmup Iteration   2: 18752529.758 ops/s
# Warmup Iteration   3: 18855508.266 ops/s
# Warmup Iteration   4: 15672345.947 ops/s
# Warmup Iteration   5: 18876816.359 ops/s
# Warmup Iteration   6: 18879965.440 ops/s
# Warmup Iteration   7: 18884281.199 ops/s
# Warmup Iteration   8: 18865460.858 ops/s
# Warmup Iteration   9: 18869877.215 ops/s
# Warmup Iteration  10: 18838974.181 ops/s
# Warmup Iteration  11: 18898450.907 ops/s
# Warmup Iteration  12: 18896843.271 ops/s
# Warmup Iteration  13: 18910158.635 ops/s
# Warmup Iteration  14: 18896952.669 ops/s
# Warmup Iteration  15: 18892824.361 ops/s
# Warmup Iteration  16: 18879366.112 ops/s
# Warmup Iteration  17: 18900433.408 ops/s
# Warmup Iteration  18: 18895803.903 ops/s
# Warmup Iteration  19: 18827739.163 ops/s
# Warmup Iteration  20: 18843653.175 ops/s
# Warmup Iteration  21: 18910658.174 ops/s
# Warmup Iteration  22: 18830421.845 ops/s
# Warmup Iteration  23: 18857555.162 ops/s
# Warmup Iteration  24: 18820976.371 ops/s
# Warmup Iteration  25: 18858060.527 ops/s
# Warmup Iteration  26: 18844874.403 ops/s
# Warmup Iteration  27: 18867264.596 ops/s
# Warmup Iteration  28: 18886981.136 ops/s
# Warmup Iteration  29: 18868998.597 ops/s
# Warmup Iteration  30: 18857141.518 ops/s
Iteration   1: 18909803.686 ops/s
Iteration   2: 18900479.420 ops/s
Iteration   3: 18870990.593 ops/s
Iteration   4: 18833071.026 ops/s
Iteration   5: 18818378.887 ops/s
Iteration   6: 18917108.182 ops/s
Iteration   7: 18876796.536 ops/s
Iteration   8: 18871585.260 ops/s
Iteration   9: 18847700.157 ops/s
Iteration  10: 18809385.385 ops/s
Iteration  11: 18855644.674 ops/s
Iteration  12: 18804007.521 ops/s
Iteration  13: 18835290.112 ops/s
Iteration  14: 18891946.061 ops/s
Iteration  15: 18918768.457 ops/s
Iteration  16: 18858047.685 ops/s
Iteration  17: 18843106.881 ops/s
Iteration  18: 18845423.054 ops/s
Iteration  19: 18886060.236 ops/s
Iteration  20: 18897740.468 ops/s
Iteration  21: 18926383.857 ops/s
Iteration  22: 18905008.787 ops/s
Iteration  23: 18893230.279 ops/s
Iteration  24: 18898380.800 ops/s
Iteration  25: 18872558.150 ops/s
Iteration  26: 18815305.021 ops/s
Iteration  27: 18922115.443 ops/s
Iteration  28: 18882815.933 ops/s
Iteration  29: 18853459.375 ops/s
Iteration  30: 18911086.157 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_contains":
  18872389.270 ±(99.9%) 24032.912 ops/s [Average]
  (min, avg, max) = (18804007.521, 18872389.270, 18926383.857), stdev = 35971.333
  CI (99.9%): [18848356.358, 18896422.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_contains  thrpt   30  18872389.270 ± 24032.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5577892.641 ops/s
# Warmup Iteration   2: 12438908.291 ops/s
# Warmup Iteration   3: 12753622.898 ops/s
# Warmup Iteration   4: 11720726.684 ops/s
# Warmup Iteration   5: 11540257.910 ops/s
# Warmup Iteration   6: 12784129.191 ops/s
# Warmup Iteration   7: 12795946.583 ops/s
# Warmup Iteration   8: 12729769.979 ops/s
# Warmup Iteration   9: 12776413.667 ops/s
# Warmup Iteration  10: 12763226.282 ops/s
# Warmup Iteration  11: 12776731.998 ops/s
# Warmup Iteration  12: 12758373.565 ops/s
# Warmup Iteration  13: 12814697.863 ops/s
# Warmup Iteration  14: 12753149.833 ops/s
# Warmup Iteration  15: 12822860.752 ops/s
# Warmup Iteration  16: 12794793.737 ops/s
# Warmup Iteration  17: 12814375.051 ops/s
# Warmup Iteration  18: 12811839.285 ops/s
# Warmup Iteration  19: 12795399.105 ops/s
# Warmup Iteration  20: 12804521.305 ops/s
# Warmup Iteration  21: 12768469.521 ops/s
# Warmup Iteration  22: 12780003.021 ops/s
# Warmup Iteration  23: 12824688.628 ops/s
# Warmup Iteration  24: 12774318.402 ops/s
# Warmup Iteration  25: 12828239.876 ops/s
# Warmup Iteration  26: 12779526.870 ops/s
# Warmup Iteration  27: 12812328.863 ops/s
# Warmup Iteration  28: 12789893.023 ops/s
# Warmup Iteration  29: 12770623.801 ops/s
# Warmup Iteration  30: 12800206.864 ops/s
Iteration   1: 12781878.083 ops/s
Iteration   2: 12840642.523 ops/s
Iteration   3: 12795023.158 ops/s
Iteration   4: 12821843.666 ops/s
Iteration   5: 12795641.976 ops/s
Iteration   6: 12731290.153 ops/s
Iteration   7: 12779257.691 ops/s
Iteration   8: 12794933.622 ops/s
Iteration   9: 12766035.897 ops/s
Iteration  10: 12807085.448 ops/s
Iteration  11: 12789076.785 ops/s
Iteration  12: 12779592.262 ops/s
Iteration  13: 12819009.988 ops/s
Iteration  14: 12807734.900 ops/s
Iteration  15: 12781179.257 ops/s
Iteration  16: 12837062.215 ops/s
Iteration  17: 12777953.983 ops/s
Iteration  18: 12817459.770 ops/s
Iteration  19: 12829115.292 ops/s
Iteration  20: 12829326.855 ops/s
Iteration  21: 12822678.146 ops/s
Iteration  22: 12786558.679 ops/s
Iteration  23: 12826068.764 ops/s
Iteration  24: 12793257.783 ops/s
Iteration  25: 12782813.552 ops/s
Iteration  26: 12760640.371 ops/s
Iteration  27: 12814145.119 ops/s
Iteration  28: 12808905.419 ops/s
Iteration  29: 12796846.084 ops/s
Iteration  30: 12823096.592 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllArray":
  12799871.801 ±(99.9%) 16715.335 ops/s [Average]
  (min, avg, max) = (12731290.153, 12799871.801, 12840642.523), stdev = 25018.728
  CI (99.9%): [12783156.467, 12816587.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsAllArray  thrpt   30  12799871.801 ± 16715.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6211641.699 ops/s
# Warmup Iteration   2: 13905045.865 ops/s
# Warmup Iteration   3: 13368805.633 ops/s
# Warmup Iteration   4: 12202409.645 ops/s
# Warmup Iteration   5: 13943008.519 ops/s
# Warmup Iteration   6: 13947792.677 ops/s
# Warmup Iteration   7: 13979267.197 ops/s
# Warmup Iteration   8: 13986914.602 ops/s
# Warmup Iteration   9: 13952611.718 ops/s
# Warmup Iteration  10: 13952698.305 ops/s
# Warmup Iteration  11: 13970506.389 ops/s
# Warmup Iteration  12: 13938967.339 ops/s
# Warmup Iteration  13: 13950872.402 ops/s
# Warmup Iteration  14: 13890824.363 ops/s
# Warmup Iteration  15: 13858334.614 ops/s
# Warmup Iteration  16: 13931904.135 ops/s
# Warmup Iteration  17: 13953083.547 ops/s
# Warmup Iteration  18: 13953565.144 ops/s
# Warmup Iteration  19: 13954619.362 ops/s
# Warmup Iteration  20: 13970714.611 ops/s
# Warmup Iteration  21: 13995860.794 ops/s
# Warmup Iteration  22: 13944113.354 ops/s
# Warmup Iteration  23: 13943582.426 ops/s
# Warmup Iteration  24: 13942337.629 ops/s
# Warmup Iteration  25: 13977506.564 ops/s
# Warmup Iteration  26: 13970577.650 ops/s
# Warmup Iteration  27: 13924691.722 ops/s
# Warmup Iteration  28: 13896001.870 ops/s
# Warmup Iteration  29: 13940457.919 ops/s
# Warmup Iteration  30: 13962062.995 ops/s
Iteration   1: 13984153.485 ops/s
Iteration   2: 13867065.279 ops/s
Iteration   3: 13990808.089 ops/s
Iteration   4: 13953860.188 ops/s
Iteration   5: 13934775.262 ops/s
Iteration   6: 13955731.470 ops/s
Iteration   7: 13896930.304 ops/s
Iteration   8: 13987212.711 ops/s
Iteration   9: 13969810.977 ops/s
Iteration  10: 13961989.246 ops/s
Iteration  11: 13948179.342 ops/s
Iteration  12: 13877578.961 ops/s
Iteration  13: 13955385.856 ops/s
Iteration  14: 13960792.639 ops/s
Iteration  15: 13990796.856 ops/s
Iteration  16: 13896380.518 ops/s
Iteration  17: 13942427.226 ops/s
Iteration  18: 13956174.645 ops/s
Iteration  19: 13955640.108 ops/s
Iteration  20: 13938027.211 ops/s
Iteration  21: 13958139.463 ops/s
Iteration  22: 13943558.830 ops/s
Iteration  23: 13957699.057 ops/s
Iteration  24: 13989752.982 ops/s
Iteration  25: 13972630.958 ops/s
Iteration  26: 13990196.975 ops/s
Iteration  27: 13934896.595 ops/s
Iteration  28: 13973976.884 ops/s
Iteration  29: 13980015.463 ops/s
Iteration  30: 13964548.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllCollection":
  13952971.205 ±(99.9%) 21651.665 ops/s [Average]
  (min, avg, max) = (13867065.279, 13952971.205, 13990808.089), stdev = 32407.196
  CI (99.9%): [13931319.540, 13974622.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsAllCollection  thrpt   30  13952971.205 ± 21651.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4750577.162 ops/s
# Warmup Iteration   2: 13331780.574 ops/s
# Warmup Iteration   3: 13461075.178 ops/s
# Warmup Iteration   4: 11207853.408 ops/s
# Warmup Iteration   5: 13506555.082 ops/s
# Warmup Iteration   6: 13501873.328 ops/s
# Warmup Iteration   7: 13494282.502 ops/s
# Warmup Iteration   8: 13489739.491 ops/s
# Warmup Iteration   9: 13491541.191 ops/s
# Warmup Iteration  10: 13465120.515 ops/s
# Warmup Iteration  11: 13496545.314 ops/s
# Warmup Iteration  12: 13493880.422 ops/s
# Warmup Iteration  13: 13476530.142 ops/s
# Warmup Iteration  14: 13493054.591 ops/s
# Warmup Iteration  15: 13479264.138 ops/s
# Warmup Iteration  16: 13481224.869 ops/s
# Warmup Iteration  17: 13501560.962 ops/s
# Warmup Iteration  18: 13464786.276 ops/s
# Warmup Iteration  19: 13490993.442 ops/s
# Warmup Iteration  20: 13498804.197 ops/s
# Warmup Iteration  21: 13491311.726 ops/s
# Warmup Iteration  22: 13491919.578 ops/s
# Warmup Iteration  23: 13455130.350 ops/s
# Warmup Iteration  24: 13443919.941 ops/s
# Warmup Iteration  25: 13497752.321 ops/s
# Warmup Iteration  26: 13498401.185 ops/s
# Warmup Iteration  27: 13490621.597 ops/s
# Warmup Iteration  28: 13491275.806 ops/s
# Warmup Iteration  29: 13472967.732 ops/s
# Warmup Iteration  30: 13471021.656 ops/s
Iteration   1: 13436399.200 ops/s
Iteration   2: 13457223.404 ops/s
Iteration   3: 13463118.451 ops/s
Iteration   4: 13503344.966 ops/s
Iteration   5: 13461919.469 ops/s
Iteration   6: 13451824.785 ops/s
Iteration   7: 13449926.889 ops/s
Iteration   8: 13493095.429 ops/s
Iteration   9: 13493061.922 ops/s
Iteration  10: 13482828.329 ops/s
Iteration  11: 13448326.968 ops/s
Iteration  12: 13469477.631 ops/s
Iteration  13: 13499615.575 ops/s
Iteration  14: 13470248.150 ops/s
Iteration  15: 13490929.273 ops/s
Iteration  16: 13510058.890 ops/s
Iteration  17: 13472122.028 ops/s
Iteration  18: 13477376.499 ops/s
Iteration  19: 13509137.727 ops/s
Iteration  20: 13530607.381 ops/s
Iteration  21: 13451002.972 ops/s
Iteration  22: 13460428.646 ops/s
Iteration  23: 13478150.769 ops/s
Iteration  24: 13519345.501 ops/s
Iteration  25: 13506218.468 ops/s
Iteration  26: 13463029.305 ops/s
Iteration  27: 13501183.652 ops/s
Iteration  28: 13513417.701 ops/s
Iteration  29: 13468131.952 ops/s
Iteration  30: 13478362.720 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAllIterable":
  13480330.488 ±(99.9%) 16260.313 ops/s [Average]
  (min, avg, max) = (13436399.200, 13480330.488, 13530607.381), stdev = 24337.673
  CI (99.9%): [13464070.175, 13496590.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsAllIterable  thrpt   30  13480330.488 ± 16260.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107328.601 ops/s
# Warmup Iteration   2: 156200.564 ops/s
# Warmup Iteration   3: 186794.262 ops/s
# Warmup Iteration   4: 185935.667 ops/s
# Warmup Iteration   5: 186375.369 ops/s
# Warmup Iteration   6: 185587.705 ops/s
# Warmup Iteration   7: 172797.801 ops/s
# Warmup Iteration   8: 172625.799 ops/s
# Warmup Iteration   9: 187185.757 ops/s
# Warmup Iteration  10: 186637.298 ops/s
# Warmup Iteration  11: 186645.198 ops/s
# Warmup Iteration  12: 186334.779 ops/s
# Warmup Iteration  13: 186630.400 ops/s
# Warmup Iteration  14: 186584.446 ops/s
# Warmup Iteration  15: 186105.088 ops/s
# Warmup Iteration  16: 186273.352 ops/s
# Warmup Iteration  17: 186873.111 ops/s
# Warmup Iteration  18: 186326.663 ops/s
# Warmup Iteration  19: 187127.989 ops/s
# Warmup Iteration  20: 186771.565 ops/s
# Warmup Iteration  21: 186664.799 ops/s
# Warmup Iteration  22: 186697.683 ops/s
# Warmup Iteration  23: 186687.802 ops/s
# Warmup Iteration  24: 186496.356 ops/s
# Warmup Iteration  25: 186830.757 ops/s
# Warmup Iteration  26: 186752.999 ops/s
# Warmup Iteration  27: 186580.504 ops/s
# Warmup Iteration  28: 186125.054 ops/s
# Warmup Iteration  29: 186610.829 ops/s
# Warmup Iteration  30: 186783.509 ops/s
Iteration   1: 187020.032 ops/s
Iteration   2: 186974.481 ops/s
Iteration   3: 186993.717 ops/s
Iteration   4: 186670.430 ops/s
Iteration   5: 186464.233 ops/s
Iteration   6: 186856.562 ops/s
Iteration   7: 186381.313 ops/s
Iteration   8: 187687.051 ops/s
Iteration   9: 186669.535 ops/s
Iteration  10: 187096.019 ops/s
Iteration  11: 186779.510 ops/s
Iteration  12: 185900.285 ops/s
Iteration  13: 186704.553 ops/s
Iteration  14: 187004.163 ops/s
Iteration  15: 187009.899 ops/s
Iteration  16: 187222.889 ops/s
Iteration  17: 186023.385 ops/s
Iteration  18: 187040.282 ops/s
Iteration  19: 187074.665 ops/s
Iteration  20: 187206.045 ops/s
Iteration  21: 186761.152 ops/s
Iteration  22: 186645.658 ops/s
Iteration  23: 186645.714 ops/s
Iteration  24: 186303.035 ops/s
Iteration  25: 187127.125 ops/s
Iteration  26: 186409.903 ops/s
Iteration  27: 187371.227 ops/s
Iteration  28: 187036.565 ops/s
Iteration  29: 186238.500 ops/s
Iteration  30: 186722.297 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyCollection":
  186801.341 ±(99.9%) 264.917 ops/s [Average]
  (min, avg, max) = (185900.285, 186801.341, 187687.051), stdev = 396.516
  CI (99.9%): [186536.424, 187066.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  186801.341 ± 264.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95555.399 ops/s
# Warmup Iteration   2: 128585.878 ops/s
# Warmup Iteration   3: 158993.894 ops/s
# Warmup Iteration   4: 158172.547 ops/s
# Warmup Iteration   5: 158512.600 ops/s
# Warmup Iteration   6: 159210.961 ops/s
# Warmup Iteration   7: 159391.133 ops/s
# Warmup Iteration   8: 145858.293 ops/s
# Warmup Iteration   9: 148647.837 ops/s
# Warmup Iteration  10: 158905.681 ops/s
# Warmup Iteration  11: 159017.425 ops/s
# Warmup Iteration  12: 159642.521 ops/s
# Warmup Iteration  13: 159110.915 ops/s
# Warmup Iteration  14: 158893.119 ops/s
# Warmup Iteration  15: 159287.681 ops/s
# Warmup Iteration  16: 159537.101 ops/s
# Warmup Iteration  17: 159013.219 ops/s
# Warmup Iteration  18: 159846.185 ops/s
# Warmup Iteration  19: 158933.448 ops/s
# Warmup Iteration  20: 159289.243 ops/s
# Warmup Iteration  21: 159219.459 ops/s
# Warmup Iteration  22: 159243.278 ops/s
# Warmup Iteration  23: 159655.182 ops/s
# Warmup Iteration  24: 158997.778 ops/s
# Warmup Iteration  25: 158806.238 ops/s
# Warmup Iteration  26: 159255.080 ops/s
# Warmup Iteration  27: 159086.584 ops/s
# Warmup Iteration  28: 158735.266 ops/s
# Warmup Iteration  29: 158647.517 ops/s
# Warmup Iteration  30: 159477.842 ops/s
Iteration   1: 159586.201 ops/s
Iteration   2: 160031.381 ops/s
Iteration   3: 158714.958 ops/s
Iteration   4: 159789.229 ops/s
Iteration   5: 160140.672 ops/s
Iteration   6: 159355.836 ops/s
Iteration   7: 159016.155 ops/s
Iteration   8: 159033.361 ops/s
Iteration   9: 158939.055 ops/s
Iteration  10: 159460.899 ops/s
Iteration  11: 158946.333 ops/s
Iteration  12: 158347.368 ops/s
Iteration  13: 159331.945 ops/s
Iteration  14: 159147.358 ops/s
Iteration  15: 159366.188 ops/s
Iteration  16: 159519.561 ops/s
Iteration  17: 158503.824 ops/s
Iteration  18: 158880.729 ops/s
Iteration  19: 159627.866 ops/s
Iteration  20: 159207.528 ops/s
Iteration  21: 159483.065 ops/s
Iteration  22: 159183.155 ops/s
Iteration  23: 158423.792 ops/s
Iteration  24: 159279.322 ops/s
Iteration  25: 158922.521 ops/s
Iteration  26: 159315.793 ops/s
Iteration  27: 159417.320 ops/s
Iteration  28: 158812.713 ops/s
Iteration  29: 159717.886 ops/s
Iteration  30: 158561.170 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsAnyIterable":
  159202.106 ±(99.9%) 301.192 ops/s [Average]
  (min, avg, max) = (158347.368, 159202.106, 160140.672), stdev = 450.809
  CI (99.9%): [158900.914, 159503.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  159202.106 ± 301.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653185.345 ops/s
# Warmup Iteration   2: 698001.768 ops/s
# Warmup Iteration   3: 850472.151 ops/s
# Warmup Iteration   4: 900646.206 ops/s
# Warmup Iteration   5: 907054.419 ops/s
# Warmup Iteration   6: 899259.510 ops/s
# Warmup Iteration   7: 903590.479 ops/s
# Warmup Iteration   8: 901492.736 ops/s
# Warmup Iteration   9: 903307.916 ops/s
# Warmup Iteration  10: 904529.841 ops/s
# Warmup Iteration  11: 903525.802 ops/s
# Warmup Iteration  12: 904947.756 ops/s
# Warmup Iteration  13: 798929.931 ops/s
# Warmup Iteration  14: 864279.268 ops/s
# Warmup Iteration  15: 905146.110 ops/s
# Warmup Iteration  16: 903474.390 ops/s
# Warmup Iteration  17: 956691.752 ops/s
# Warmup Iteration  18: 958029.814 ops/s
# Warmup Iteration  19: 954394.180 ops/s
# Warmup Iteration  20: 956112.129 ops/s
# Warmup Iteration  21: 957361.287 ops/s
# Warmup Iteration  22: 955676.928 ops/s
# Warmup Iteration  23: 958969.469 ops/s
# Warmup Iteration  24: 955888.701 ops/s
# Warmup Iteration  25: 954061.296 ops/s
# Warmup Iteration  26: 953395.446 ops/s
# Warmup Iteration  27: 957168.277 ops/s
# Warmup Iteration  28: 960792.238 ops/s
# Warmup Iteration  29: 957705.659 ops/s
# Warmup Iteration  30: 958028.584 ops/s
Iteration   1: 957083.551 ops/s
Iteration   2: 953986.304 ops/s
Iteration   3: 957301.218 ops/s
Iteration   4: 960083.787 ops/s
Iteration   5: 955225.575 ops/s
Iteration   6: 958594.344 ops/s
Iteration   7: 951844.095 ops/s
Iteration   8: 961112.973 ops/s
Iteration   9: 959470.814 ops/s
Iteration  10: 957010.562 ops/s
Iteration  11: 949952.477 ops/s
Iteration  12: 955628.227 ops/s
Iteration  13: 954201.338 ops/s
Iteration  14: 953801.993 ops/s
Iteration  15: 957392.954 ops/s
Iteration  16: 956335.797 ops/s
Iteration  17: 958063.013 ops/s
Iteration  18: 956021.566 ops/s
Iteration  19: 956172.150 ops/s
Iteration  20: 952130.265 ops/s
Iteration  21: 959361.356 ops/s
Iteration  22: 953507.424 ops/s
Iteration  23: 951009.376 ops/s
Iteration  24: 954080.982 ops/s
Iteration  25: 959393.127 ops/s
Iteration  26: 960259.182 ops/s
Iteration  27: 954515.723 ops/s
Iteration  28: 955453.582 ops/s
Iteration  29: 958195.852 ops/s
Iteration  30: 959596.874 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsBy":
  956226.216 ±(99.9%) 1953.718 ops/s [Average]
  (min, avg, max) = (949952.477, 956226.216, 961112.973), stdev = 2924.234
  CI (99.9%): [954272.498, 958179.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsBy  thrpt   30  956226.216 ± 1953.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107394.703 ops/s
# Warmup Iteration   2: 156043.429 ops/s
# Warmup Iteration   3: 186727.165 ops/s
# Warmup Iteration   4: 185198.818 ops/s
# Warmup Iteration   5: 186340.791 ops/s
# Warmup Iteration   6: 186596.485 ops/s
# Warmup Iteration   7: 170813.836 ops/s
# Warmup Iteration   8: 172947.231 ops/s
# Warmup Iteration   9: 186750.063 ops/s
# Warmup Iteration  10: 186693.534 ops/s
# Warmup Iteration  11: 185949.809 ops/s
# Warmup Iteration  12: 186510.926 ops/s
# Warmup Iteration  13: 186496.642 ops/s
# Warmup Iteration  14: 186203.899 ops/s
# Warmup Iteration  15: 186449.082 ops/s
# Warmup Iteration  16: 186550.139 ops/s
# Warmup Iteration  17: 186783.513 ops/s
# Warmup Iteration  18: 186301.860 ops/s
# Warmup Iteration  19: 186826.714 ops/s
# Warmup Iteration  20: 185951.471 ops/s
# Warmup Iteration  21: 186437.446 ops/s
# Warmup Iteration  22: 186244.207 ops/s
# Warmup Iteration  23: 186148.776 ops/s
# Warmup Iteration  24: 186605.721 ops/s
# Warmup Iteration  25: 186404.840 ops/s
# Warmup Iteration  26: 186037.503 ops/s
# Warmup Iteration  27: 186801.471 ops/s
# Warmup Iteration  28: 185918.782 ops/s
# Warmup Iteration  29: 186333.020 ops/s
# Warmup Iteration  30: 186842.213 ops/s
Iteration   1: 186987.312 ops/s
Iteration   2: 186246.428 ops/s
Iteration   3: 187217.985 ops/s
Iteration   4: 185589.409 ops/s
Iteration   5: 186281.915 ops/s
Iteration   6: 186301.487 ops/s
Iteration   7: 186923.566 ops/s
Iteration   8: 186870.909 ops/s
Iteration   9: 185799.034 ops/s
Iteration  10: 186612.794 ops/s
Iteration  11: 186220.948 ops/s
Iteration  12: 186322.704 ops/s
Iteration  13: 186935.933 ops/s
Iteration  14: 186197.535 ops/s
Iteration  15: 186470.836 ops/s
Iteration  16: 186662.181 ops/s
Iteration  17: 185910.620 ops/s
Iteration  18: 186950.199 ops/s
Iteration  19: 186940.967 ops/s
Iteration  20: 187089.975 ops/s
Iteration  21: 185772.319 ops/s
Iteration  22: 186243.419 ops/s
Iteration  23: 186774.233 ops/s
Iteration  24: 186766.932 ops/s
Iteration  25: 187008.781 ops/s
Iteration  26: 186049.934 ops/s
Iteration  27: 186780.631 ops/s
Iteration  28: 186089.312 ops/s
Iteration  29: 186257.857 ops/s
Iteration  30: 186600.129 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneCollection":
  186495.876 ±(99.9%) 293.168 ops/s [Average]
  (min, avg, max) = (185589.409, 186495.876, 187217.985), stdev = 438.800
  CI (99.9%): [186202.708, 186789.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  186495.876 ± 293.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 94619.505 ops/s
# Warmup Iteration   2: 126898.945 ops/s
# Warmup Iteration   3: 157596.151 ops/s
# Warmup Iteration   4: 156982.921 ops/s
# Warmup Iteration   5: 157786.505 ops/s
# Warmup Iteration   6: 157673.452 ops/s
# Warmup Iteration   7: 157511.750 ops/s
# Warmup Iteration   8: 145908.750 ops/s
# Warmup Iteration   9: 145396.540 ops/s
# Warmup Iteration  10: 157869.455 ops/s
# Warmup Iteration  11: 158149.551 ops/s
# Warmup Iteration  12: 158189.742 ops/s
# Warmup Iteration  13: 157677.442 ops/s
# Warmup Iteration  14: 158068.384 ops/s
# Warmup Iteration  15: 158372.195 ops/s
# Warmup Iteration  16: 158083.587 ops/s
# Warmup Iteration  17: 158048.848 ops/s
# Warmup Iteration  18: 157934.533 ops/s
# Warmup Iteration  19: 157857.843 ops/s
# Warmup Iteration  20: 157864.082 ops/s
# Warmup Iteration  21: 157565.772 ops/s
# Warmup Iteration  22: 157606.670 ops/s
# Warmup Iteration  23: 157641.232 ops/s
# Warmup Iteration  24: 157522.863 ops/s
# Warmup Iteration  25: 157716.558 ops/s
# Warmup Iteration  26: 158125.454 ops/s
# Warmup Iteration  27: 157863.540 ops/s
# Warmup Iteration  28: 158005.834 ops/s
# Warmup Iteration  29: 157543.582 ops/s
# Warmup Iteration  30: 157986.318 ops/s
Iteration   1: 157820.611 ops/s
Iteration   2: 157958.621 ops/s
Iteration   3: 158646.479 ops/s
Iteration   4: 158178.526 ops/s
Iteration   5: 158524.386 ops/s
Iteration   6: 158023.655 ops/s
Iteration   7: 157265.674 ops/s
Iteration   8: 157695.481 ops/s
Iteration   9: 157707.976 ops/s
Iteration  10: 158187.810 ops/s
Iteration  11: 157629.369 ops/s
Iteration  12: 157413.065 ops/s
Iteration  13: 158253.617 ops/s
Iteration  14: 157830.964 ops/s
Iteration  15: 157811.714 ops/s
Iteration  16: 157662.169 ops/s
Iteration  17: 157807.724 ops/s
Iteration  18: 157277.036 ops/s
Iteration  19: 158250.067 ops/s
Iteration  20: 157269.339 ops/s
Iteration  21: 158446.659 ops/s
Iteration  22: 158328.968 ops/s
Iteration  23: 157634.458 ops/s
Iteration  24: 158020.754 ops/s
Iteration  25: 157626.224 ops/s
Iteration  26: 156871.685 ops/s
Iteration  27: 158062.188 ops/s
Iteration  28: 157927.231 ops/s
Iteration  29: 157961.215 ops/s
Iteration  30: 157851.256 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_containsNoneIterable":
  157864.831 ±(99.9%) 269.864 ops/s [Average]
  (min, avg, max) = (156871.685, 157864.831, 158646.479), stdev = 403.920
  CI (99.9%): [157594.967, 158134.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  157864.831 ± 269.864  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622211.724 ops/s
# Warmup Iteration   2: 815995.170 ops/s
# Warmup Iteration   3: 1019488.832 ops/s
# Warmup Iteration   4: 1016443.047 ops/s
# Warmup Iteration   5: 1017923.585 ops/s
# Warmup Iteration   6: 1017216.360 ops/s
# Warmup Iteration   7: 1019321.159 ops/s
# Warmup Iteration   8: 895789.692 ops/s
# Warmup Iteration   9: 974165.084 ops/s
# Warmup Iteration  10: 1023842.622 ops/s
# Warmup Iteration  11: 1021094.488 ops/s
# Warmup Iteration  12: 1023833.310 ops/s
# Warmup Iteration  13: 1023326.579 ops/s
# Warmup Iteration  14: 1023849.250 ops/s
# Warmup Iteration  15: 1023209.516 ops/s
# Warmup Iteration  16: 1024811.915 ops/s
# Warmup Iteration  17: 1034286.945 ops/s
# Warmup Iteration  18: 1035153.512 ops/s
# Warmup Iteration  19: 1034624.228 ops/s
# Warmup Iteration  20: 1037985.331 ops/s
# Warmup Iteration  21: 1034626.583 ops/s
# Warmup Iteration  22: 1035124.204 ops/s
# Warmup Iteration  23: 1034949.087 ops/s
# Warmup Iteration  24: 1036880.712 ops/s
# Warmup Iteration  25: 1034104.399 ops/s
# Warmup Iteration  26: 1034575.807 ops/s
# Warmup Iteration  27: 1034111.202 ops/s
# Warmup Iteration  28: 1034510.312 ops/s
# Warmup Iteration  29: 1034540.675 ops/s
# Warmup Iteration  30: 1034099.182 ops/s
Iteration   1: 1039792.082 ops/s
Iteration   2: 1034133.946 ops/s
Iteration   3: 1034810.854 ops/s
Iteration   4: 1034604.088 ops/s
Iteration   5: 1034139.113 ops/s
Iteration   6: 1036818.660 ops/s
Iteration   7: 1036050.691 ops/s
Iteration   8: 1037513.100 ops/s
Iteration   9: 1035466.768 ops/s
Iteration  10: 1036698.886 ops/s
Iteration  11: 1036895.162 ops/s
Iteration  12: 1037135.242 ops/s
Iteration  13: 1037434.223 ops/s
Iteration  14: 1038515.990 ops/s
Iteration  15: 1037237.437 ops/s
Iteration  16: 1035900.260 ops/s
Iteration  17: 1038031.581 ops/s
Iteration  18: 1032348.157 ops/s
Iteration  19: 1032908.223 ops/s
Iteration  20: 1038216.928 ops/s
Iteration  21: 1032887.178 ops/s
Iteration  22: 1031899.913 ops/s
Iteration  23: 1036740.715 ops/s
Iteration  24: 1028098.020 ops/s
Iteration  25: 1035373.259 ops/s
Iteration  26: 1036008.633 ops/s
Iteration  27: 1036150.802 ops/s
Iteration  28: 1034141.514 ops/s
Iteration  29: 1035814.749 ops/s
Iteration  30: 1035528.086 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_corresponds":
  1035576.475 ±(99.9%) 1572.326 ops/s [Average]
  (min, avg, max) = (1028098.020, 1035576.475, 1039792.082), stdev = 2353.383
  CI (99.9%): [1034004.150, 1037148.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_corresponds  thrpt   30  1035576.475 ± 1572.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9087948.185 ops/s
# Warmup Iteration   2: 19712667.114 ops/s
# Warmup Iteration   3: 19976577.270 ops/s
# Warmup Iteration   4: 16606813.640 ops/s
# Warmup Iteration   5: 19952796.391 ops/s
# Warmup Iteration   6: 20042716.402 ops/s
# Warmup Iteration   7: 20022969.965 ops/s
# Warmup Iteration   8: 20000235.770 ops/s
# Warmup Iteration   9: 20013004.803 ops/s
# Warmup Iteration  10: 20005498.318 ops/s
# Warmup Iteration  11: 20005033.430 ops/s
# Warmup Iteration  12: 20011918.527 ops/s
# Warmup Iteration  13: 20008283.057 ops/s
# Warmup Iteration  14: 19980274.637 ops/s
# Warmup Iteration  15: 19983207.601 ops/s
# Warmup Iteration  16: 20004228.870 ops/s
# Warmup Iteration  17: 19961746.020 ops/s
# Warmup Iteration  18: 20047782.251 ops/s
# Warmup Iteration  19: 20015111.251 ops/s
# Warmup Iteration  20: 19979711.417 ops/s
# Warmup Iteration  21: 19954686.263 ops/s
# Warmup Iteration  22: 19977874.035 ops/s
# Warmup Iteration  23: 19980292.924 ops/s
# Warmup Iteration  24: 20001240.318 ops/s
# Warmup Iteration  25: 19959552.532 ops/s
# Warmup Iteration  26: 19995056.012 ops/s
# Warmup Iteration  27: 20018014.806 ops/s
# Warmup Iteration  28: 19999342.741 ops/s
# Warmup Iteration  29: 20012181.185 ops/s
# Warmup Iteration  30: 20019882.760 ops/s
Iteration   1: 20013559.583 ops/s
Iteration   2: 20004633.450 ops/s
Iteration   3: 20002163.300 ops/s
Iteration   4: 20051024.813 ops/s
Iteration   5: 20018859.160 ops/s
Iteration   6: 20041504.928 ops/s
Iteration   7: 19943688.484 ops/s
Iteration   8: 20004487.465 ops/s
Iteration   9: 19981027.101 ops/s
Iteration  10: 20043475.572 ops/s
Iteration  11: 19981445.477 ops/s
Iteration  12: 19958499.464 ops/s
Iteration  13: 20015672.192 ops/s
Iteration  14: 20044519.233 ops/s
Iteration  15: 20037168.432 ops/s
Iteration  16: 20011901.234 ops/s
Iteration  17: 19883398.524 ops/s
Iteration  18: 19999138.897 ops/s
Iteration  19: 19928420.835 ops/s
Iteration  20: 19955237.780 ops/s
Iteration  21: 20027502.032 ops/s
Iteration  22: 20083849.510 ops/s
Iteration  23: 19928635.265 ops/s
Iteration  24: 20046989.665 ops/s
Iteration  25: 20025046.519 ops/s
Iteration  26: 20018371.768 ops/s
Iteration  27: 20047983.443 ops/s
Iteration  28: 20023035.437 ops/s
Iteration  29: 19978323.466 ops/s
Iteration  30: 20034288.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_count":
  20004461.711 ±(99.9%) 29570.434 ops/s [Average]
  (min, avg, max) = (19883398.524, 20004461.711, 20083849.510), stdev = 44259.637
  CI (99.9%): [19974891.278, 20034032.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_count  thrpt   30  20004461.711 ± 29570.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1353695.533 ops/s
# Warmup Iteration   2: 2018562.912 ops/s
# Warmup Iteration   3: 2439894.329 ops/s
# Warmup Iteration   4: 2430874.189 ops/s
# Warmup Iteration   5: 2452225.277 ops/s
# Warmup Iteration   6: 2450469.239 ops/s
# Warmup Iteration   7: 2295387.919 ops/s
# Warmup Iteration   8: 2182945.614 ops/s
# Warmup Iteration   9: 2444492.232 ops/s
# Warmup Iteration  10: 2443302.279 ops/s
# Warmup Iteration  11: 2445408.356 ops/s
# Warmup Iteration  12: 2445799.928 ops/s
# Warmup Iteration  13: 2441507.563 ops/s
# Warmup Iteration  14: 2443646.390 ops/s
# Warmup Iteration  15: 2446430.852 ops/s
# Warmup Iteration  16: 2445027.070 ops/s
# Warmup Iteration  17: 2457672.665 ops/s
# Warmup Iteration  18: 2458003.224 ops/s
# Warmup Iteration  19: 2459132.003 ops/s
# Warmup Iteration  20: 2455521.327 ops/s
# Warmup Iteration  21: 2457163.615 ops/s
# Warmup Iteration  22: 2455249.099 ops/s
# Warmup Iteration  23: 2457304.979 ops/s
# Warmup Iteration  24: 2455202.123 ops/s
# Warmup Iteration  25: 2457603.856 ops/s
# Warmup Iteration  26: 2457265.233 ops/s
# Warmup Iteration  27: 2458892.938 ops/s
# Warmup Iteration  28: 2457990.799 ops/s
# Warmup Iteration  29: 2454877.872 ops/s
# Warmup Iteration  30: 2455969.626 ops/s
Iteration   1: 2452830.070 ops/s
Iteration   2: 2458078.171 ops/s
Iteration   3: 2452262.270 ops/s
Iteration   4: 2459590.364 ops/s
Iteration   5: 2457730.043 ops/s
Iteration   6: 2454623.491 ops/s
Iteration   7: 2457177.524 ops/s
Iteration   8: 2448414.255 ops/s
Iteration   9: 2454917.147 ops/s
Iteration  10: 2456485.048 ops/s
Iteration  11: 2457439.982 ops/s
Iteration  12: 2455948.522 ops/s
Iteration  13: 2461409.834 ops/s
Iteration  14: 2464956.093 ops/s
Iteration  15: 2457569.980 ops/s
Iteration  16: 2455164.946 ops/s
Iteration  17: 2458577.758 ops/s
Iteration  18: 2456933.124 ops/s
Iteration  19: 2456974.286 ops/s
Iteration  20: 2456605.232 ops/s
Iteration  21: 2458345.961 ops/s
Iteration  22: 2449394.864 ops/s
Iteration  23: 2464740.411 ops/s
Iteration  24: 2457371.020 ops/s
Iteration  25: 2461649.391 ops/s
Iteration  26: 2454884.985 ops/s
Iteration  27: 2456399.546 ops/s
Iteration  28: 2460177.186 ops/s
Iteration  29: 2451494.736 ops/s
Iteration  30: 2459226.278 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countBy":
  2456912.417 ±(99.9%) 2524.072 ops/s [Average]
  (min, avg, max) = (2448414.255, 2456912.417, 2464956.093), stdev = 3777.912
  CI (99.9%): [2454388.345, 2459436.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_countBy  thrpt   30  2456912.417 ± 2524.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271760.168 ops/s
# Warmup Iteration   2: 496095.029 ops/s
# Warmup Iteration   3: 576435.104 ops/s
# Warmup Iteration   4: 579929.482 ops/s
# Warmup Iteration   5: 580518.732 ops/s
# Warmup Iteration   6: 483062.437 ops/s
# Warmup Iteration   7: 581227.260 ops/s
# Warmup Iteration   8: 582028.669 ops/s
# Warmup Iteration   9: 579728.001 ops/s
# Warmup Iteration  10: 580211.575 ops/s
# Warmup Iteration  11: 580167.331 ops/s
# Warmup Iteration  12: 580123.988 ops/s
# Warmup Iteration  13: 581481.992 ops/s
# Warmup Iteration  14: 582611.532 ops/s
# Warmup Iteration  15: 581263.513 ops/s
# Warmup Iteration  16: 580423.004 ops/s
# Warmup Iteration  17: 583114.882 ops/s
# Warmup Iteration  18: 583054.339 ops/s
# Warmup Iteration  19: 582816.870 ops/s
# Warmup Iteration  20: 582257.095 ops/s
# Warmup Iteration  21: 582591.620 ops/s
# Warmup Iteration  22: 581770.994 ops/s
# Warmup Iteration  23: 582351.784 ops/s
# Warmup Iteration  24: 581762.571 ops/s
# Warmup Iteration  25: 581513.216 ops/s
# Warmup Iteration  26: 582143.870 ops/s
# Warmup Iteration  27: 583330.335 ops/s
# Warmup Iteration  28: 582797.322 ops/s
# Warmup Iteration  29: 581455.250 ops/s
# Warmup Iteration  30: 582714.634 ops/s
Iteration   1: 583807.511 ops/s
Iteration   2: 581201.262 ops/s
Iteration   3: 582089.570 ops/s
Iteration   4: 581251.220 ops/s
Iteration   5: 580537.101 ops/s
Iteration   6: 583143.409 ops/s
Iteration   7: 581676.064 ops/s
Iteration   8: 582849.383 ops/s
Iteration   9: 582482.302 ops/s
Iteration  10: 583138.193 ops/s
Iteration  11: 582473.352 ops/s
Iteration  12: 581757.000 ops/s
Iteration  13: 582875.373 ops/s
Iteration  14: 583123.021 ops/s
Iteration  15: 583733.452 ops/s
Iteration  16: 582844.244 ops/s
Iteration  17: 582340.186 ops/s
Iteration  18: 582896.050 ops/s
Iteration  19: 582721.208 ops/s
Iteration  20: 583509.798 ops/s
Iteration  21: 582666.028 ops/s
Iteration  22: 581221.664 ops/s
Iteration  23: 582557.172 ops/s
Iteration  24: 581217.813 ops/s
Iteration  25: 581558.802 ops/s
Iteration  26: 581009.240 ops/s
Iteration  27: 582180.001 ops/s
Iteration  28: 580871.330 ops/s
Iteration  29: 579049.386 ops/s
Iteration  30: 582710.601 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByEach":
  582183.058 ±(99.9%) 709.261 ops/s [Average]
  (min, avg, max) = (579049.386, 582183.058, 583807.511), stdev = 1061.588
  CI (99.9%): [581473.797, 582892.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_countByEach  thrpt   30  582183.058 ± 709.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1296902.416 ops/s
# Warmup Iteration   2: 2074367.177 ops/s
# Warmup Iteration   3: 2486054.911 ops/s
# Warmup Iteration   4: 2496244.491 ops/s
# Warmup Iteration   5: 2494509.572 ops/s
# Warmup Iteration   6: 2500700.847 ops/s
# Warmup Iteration   7: 2064528.423 ops/s
# Warmup Iteration   8: 2502448.412 ops/s
# Warmup Iteration   9: 2498191.918 ops/s
# Warmup Iteration  10: 2509563.967 ops/s
# Warmup Iteration  11: 2500487.882 ops/s
# Warmup Iteration  12: 2502572.926 ops/s
# Warmup Iteration  13: 2502843.586 ops/s
# Warmup Iteration  14: 2501463.376 ops/s
# Warmup Iteration  15: 2504473.670 ops/s
# Warmup Iteration  16: 2505311.180 ops/s
# Warmup Iteration  17: 2498565.257 ops/s
# Warmup Iteration  18: 2501168.256 ops/s
# Warmup Iteration  19: 2498999.248 ops/s
# Warmup Iteration  20: 2494303.948 ops/s
# Warmup Iteration  21: 2496014.983 ops/s
# Warmup Iteration  22: 2497776.143 ops/s
# Warmup Iteration  23: 2497079.089 ops/s
# Warmup Iteration  24: 2495935.723 ops/s
# Warmup Iteration  25: 2497791.028 ops/s
# Warmup Iteration  26: 2489455.529 ops/s
# Warmup Iteration  27: 2502045.817 ops/s
# Warmup Iteration  28: 2497717.285 ops/s
# Warmup Iteration  29: 2499478.714 ops/s
# Warmup Iteration  30: 2496546.015 ops/s
Iteration   1: 2498971.886 ops/s
Iteration   2: 2502804.936 ops/s
Iteration   3: 2501271.736 ops/s
Iteration   4: 2491780.742 ops/s
Iteration   5: 2491345.561 ops/s
Iteration   6: 2492498.570 ops/s
Iteration   7: 2497337.477 ops/s
Iteration   8: 2496666.487 ops/s
Iteration   9: 2492807.219 ops/s
Iteration  10: 2506276.394 ops/s
Iteration  11: 2486758.312 ops/s
Iteration  12: 2494601.216 ops/s
Iteration  13: 2499594.894 ops/s
Iteration  14: 2499117.591 ops/s
Iteration  15: 2497959.306 ops/s
Iteration  16: 2500048.691 ops/s
Iteration  17: 2501885.264 ops/s
Iteration  18: 2491605.309 ops/s
Iteration  19: 2503384.218 ops/s
Iteration  20: 2489593.898 ops/s
Iteration  21: 2503306.836 ops/s
Iteration  22: 2494799.628 ops/s
Iteration  23: 2504184.466 ops/s
Iteration  24: 2493631.042 ops/s
Iteration  25: 2506035.298 ops/s
Iteration  26: 2493201.937 ops/s
Iteration  27: 2504487.828 ops/s
Iteration  28: 2496644.736 ops/s
Iteration  29: 2504255.310 ops/s
Iteration  30: 2494831.039 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countByWith":
  2497722.927 ±(99.9%) 3555.566 ops/s [Average]
  (min, avg, max) = (2486758.312, 2497722.927, 2506276.394), stdev = 5321.805
  CI (99.9%): [2494167.361, 2501278.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_countByWith  thrpt   30  2497722.927 ± 3555.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6341098.314 ops/s
# Warmup Iteration   2: 11519270.700 ops/s
# Warmup Iteration   3: 12133357.604 ops/s
# Warmup Iteration   4: 12221305.086 ops/s
# Warmup Iteration   5: 10844580.038 ops/s
# Warmup Iteration   6: 11460368.246 ops/s
# Warmup Iteration   7: 12251560.050 ops/s
# Warmup Iteration   8: 12224175.437 ops/s
# Warmup Iteration   9: 12212089.390 ops/s
# Warmup Iteration  10: 12217541.687 ops/s
# Warmup Iteration  11: 12219950.973 ops/s
# Warmup Iteration  12: 12225798.468 ops/s
# Warmup Iteration  13: 12254164.771 ops/s
# Warmup Iteration  14: 12223320.293 ops/s
# Warmup Iteration  15: 12220681.959 ops/s
# Warmup Iteration  16: 12236936.457 ops/s
# Warmup Iteration  17: 12237332.749 ops/s
# Warmup Iteration  18: 12236962.828 ops/s
# Warmup Iteration  19: 12214481.480 ops/s
# Warmup Iteration  20: 12237506.968 ops/s
# Warmup Iteration  21: 12220290.262 ops/s
# Warmup Iteration  22: 12250262.659 ops/s
# Warmup Iteration  23: 12227598.227 ops/s
# Warmup Iteration  24: 12250976.661 ops/s
# Warmup Iteration  25: 12234884.332 ops/s
# Warmup Iteration  26: 12240689.839 ops/s
# Warmup Iteration  27: 12255064.284 ops/s
# Warmup Iteration  28: 12227167.323 ops/s
# Warmup Iteration  29: 12238900.381 ops/s
# Warmup Iteration  30: 12229701.803 ops/s
Iteration   1: 12194163.292 ops/s
Iteration   2: 12240242.117 ops/s
Iteration   3: 12242155.224 ops/s
Iteration   4: 12226409.590 ops/s
Iteration   5: 12271752.810 ops/s
Iteration   6: 12265432.753 ops/s
Iteration   7: 12227671.369 ops/s
Iteration   8: 12231762.304 ops/s
Iteration   9: 12238914.462 ops/s
Iteration  10: 12237671.639 ops/s
Iteration  11: 12230369.730 ops/s
Iteration  12: 12224696.796 ops/s
Iteration  13: 12260589.889 ops/s
Iteration  14: 12211297.188 ops/s
Iteration  15: 12219841.156 ops/s
Iteration  16: 12234935.755 ops/s
Iteration  17: 12224946.896 ops/s
Iteration  18: 12300474.406 ops/s
Iteration  19: 12248401.617 ops/s
Iteration  20: 12181708.765 ops/s
Iteration  21: 12243513.187 ops/s
Iteration  22: 12247916.072 ops/s
Iteration  23: 12235441.262 ops/s
Iteration  24: 12211925.015 ops/s
Iteration  25: 12219996.202 ops/s
Iteration  26: 12248990.328 ops/s
Iteration  27: 12208044.499 ops/s
Iteration  28: 12240858.434 ops/s
Iteration  29: 12250586.740 ops/s
Iteration  30: 12211029.979 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_countWith":
  12234391.316 ±(99.9%) 15656.532 ops/s [Average]
  (min, avg, max) = (12181708.765, 12234391.316, 12300474.406), stdev = 23433.962
  CI (99.9%): [12218734.784, 12250047.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_countWith  thrpt   30  12234391.316 ± 15656.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4200989.852 ops/s
# Warmup Iteration   2: 9539740.926 ops/s
# Warmup Iteration   3: 9636615.682 ops/s
# Warmup Iteration   4: 7992762.066 ops/s
# Warmup Iteration   5: 9664208.959 ops/s
# Warmup Iteration   6: 9655374.616 ops/s
# Warmup Iteration   7: 9651674.886 ops/s
# Warmup Iteration   8: 9620296.054 ops/s
# Warmup Iteration   9: 9671942.689 ops/s
# Warmup Iteration  10: 9649996.485 ops/s
# Warmup Iteration  11: 9603306.882 ops/s
# Warmup Iteration  12: 9615624.418 ops/s
# Warmup Iteration  13: 9668181.109 ops/s
# Warmup Iteration  14: 9650234.322 ops/s
# Warmup Iteration  15: 9652998.690 ops/s
# Warmup Iteration  16: 9638220.394 ops/s
# Warmup Iteration  17: 9626414.160 ops/s
# Warmup Iteration  18: 9611149.932 ops/s
# Warmup Iteration  19: 9646249.371 ops/s
# Warmup Iteration  20: 9655458.158 ops/s
# Warmup Iteration  21: 9671704.126 ops/s
# Warmup Iteration  22: 9635003.875 ops/s
# Warmup Iteration  23: 9632324.971 ops/s
# Warmup Iteration  24: 9639073.566 ops/s
# Warmup Iteration  25: 9667095.505 ops/s
# Warmup Iteration  26: 9630139.331 ops/s
# Warmup Iteration  27: 9618144.910 ops/s
# Warmup Iteration  28: 9643785.983 ops/s
# Warmup Iteration  29: 9642071.390 ops/s
# Warmup Iteration  30: 9662551.384 ops/s
Iteration   1: 9656374.763 ops/s
Iteration   2: 9637000.893 ops/s
Iteration   3: 9614085.026 ops/s
Iteration   4: 9631991.511 ops/s
Iteration   5: 9643135.304 ops/s
Iteration   6: 9651324.098 ops/s
Iteration   7: 9663085.974 ops/s
Iteration   8: 9651562.646 ops/s
Iteration   9: 9658981.628 ops/s
Iteration  10: 9636851.591 ops/s
Iteration  11: 9642946.308 ops/s
Iteration  12: 9658214.378 ops/s
Iteration  13: 9667121.186 ops/s
Iteration  14: 9652904.490 ops/s
Iteration  15: 9630731.099 ops/s
Iteration  16: 9651600.085 ops/s
Iteration  17: 9664833.846 ops/s
Iteration  18: 9654833.203 ops/s
Iteration  19: 9639719.349 ops/s
Iteration  20: 9655067.161 ops/s
Iteration  21: 9652096.289 ops/s
Iteration  22: 9636210.218 ops/s
Iteration  23: 9648403.053 ops/s
Iteration  24: 9669634.734 ops/s
Iteration  25: 9652274.017 ops/s
Iteration  26: 9663989.970 ops/s
Iteration  27: 9655959.960 ops/s
Iteration  28: 9653147.088 ops/s
Iteration  29: 9655342.905 ops/s
Iteration  30: 9654015.171 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detect":
  9650114.598 ±(99.9%) 8173.791 ops/s [Average]
  (min, avg, max) = (9614085.026, 9650114.598, 9669634.734), stdev = 12234.147
  CI (99.9%): [9641940.807, 9658288.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detect  thrpt   30  9650114.598 ± 8173.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3664311.632 ops/s
# Warmup Iteration   2: 9521886.712 ops/s
# Warmup Iteration   3: 9607460.250 ops/s
# Warmup Iteration   4: 7936764.582 ops/s
# Warmup Iteration   5: 9607002.529 ops/s
# Warmup Iteration   6: 9601361.368 ops/s
# Warmup Iteration   7: 9611165.128 ops/s
# Warmup Iteration   8: 9612230.471 ops/s
# Warmup Iteration   9: 9596748.540 ops/s
# Warmup Iteration  10: 9608860.657 ops/s
# Warmup Iteration  11: 9592706.376 ops/s
# Warmup Iteration  12: 9592879.538 ops/s
# Warmup Iteration  13: 9612005.561 ops/s
# Warmup Iteration  14: 9594108.669 ops/s
# Warmup Iteration  15: 9605334.703 ops/s
# Warmup Iteration  16: 9591115.727 ops/s
# Warmup Iteration  17: 9595917.065 ops/s
# Warmup Iteration  18: 9605635.935 ops/s
# Warmup Iteration  19: 9626320.716 ops/s
# Warmup Iteration  20: 9614188.000 ops/s
# Warmup Iteration  21: 9605922.407 ops/s
# Warmup Iteration  22: 9537334.418 ops/s
# Warmup Iteration  23: 9612504.780 ops/s
# Warmup Iteration  24: 9600035.135 ops/s
# Warmup Iteration  25: 9599066.337 ops/s
# Warmup Iteration  26: 9625433.941 ops/s
# Warmup Iteration  27: 9614367.298 ops/s
# Warmup Iteration  28: 9614198.916 ops/s
# Warmup Iteration  29: 9588121.010 ops/s
# Warmup Iteration  30: 9628126.129 ops/s
Iteration   1: 9626862.730 ops/s
Iteration   2: 9628102.140 ops/s
Iteration   3: 9614948.875 ops/s
Iteration   4: 9600273.727 ops/s
Iteration   5: 9578736.475 ops/s
Iteration   6: 9579267.810 ops/s
Iteration   7: 9635465.793 ops/s
Iteration   8: 9613806.408 ops/s
Iteration   9: 9573460.383 ops/s
Iteration  10: 9614814.829 ops/s
Iteration  11: 9590760.635 ops/s
Iteration  12: 9566172.021 ops/s
Iteration  13: 9604594.871 ops/s
Iteration  14: 9620738.737 ops/s
Iteration  15: 9617816.801 ops/s
Iteration  16: 9594025.749 ops/s
Iteration  17: 9596335.778 ops/s
Iteration  18: 9604002.775 ops/s
Iteration  19: 9600686.005 ops/s
Iteration  20: 9605466.425 ops/s
Iteration  21: 9586672.440 ops/s
Iteration  22: 9615243.776 ops/s
Iteration  23: 9583093.390 ops/s
Iteration  24: 9606785.242 ops/s
Iteration  25: 9593550.417 ops/s
Iteration  26: 9613662.136 ops/s
Iteration  27: 9629098.969 ops/s
Iteration  28: 9637650.316 ops/s
Iteration  29: 9579794.836 ops/s
Iteration  30: 9616273.407 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIfNone":
  9604272.130 ±(99.9%) 12678.314 ops/s [Average]
  (min, avg, max) = (9566172.021, 9604272.130, 9637650.316), stdev = 18976.306
  CI (99.9%): [9591593.815, 9616950.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectIfNone  thrpt   30  9604272.130 ± 12678.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1255892.720 ops/s
# Warmup Iteration   2: 2608535.675 ops/s
# Warmup Iteration   3: 2773977.035 ops/s
# Warmup Iteration   4: 2786431.769 ops/s
# Warmup Iteration   5: 2298832.784 ops/s
# Warmup Iteration   6: 2785889.912 ops/s
# Warmup Iteration   7: 2791630.601 ops/s
# Warmup Iteration   8: 2789406.020 ops/s
# Warmup Iteration   9: 2792545.990 ops/s
# Warmup Iteration  10: 2789171.700 ops/s
# Warmup Iteration  11: 2790825.874 ops/s
# Warmup Iteration  12: 2787890.821 ops/s
# Warmup Iteration  13: 2791052.099 ops/s
# Warmup Iteration  14: 2789525.354 ops/s
# Warmup Iteration  15: 2791408.335 ops/s
# Warmup Iteration  16: 2782368.843 ops/s
# Warmup Iteration  17: 2787249.034 ops/s
# Warmup Iteration  18: 2787783.026 ops/s
# Warmup Iteration  19: 2791255.482 ops/s
# Warmup Iteration  20: 2785302.168 ops/s
# Warmup Iteration  21: 2786795.326 ops/s
# Warmup Iteration  22: 2787093.930 ops/s
# Warmup Iteration  23: 2790786.066 ops/s
# Warmup Iteration  24: 2788005.725 ops/s
# Warmup Iteration  25: 2789181.839 ops/s
# Warmup Iteration  26: 2784485.576 ops/s
# Warmup Iteration  27: 2787856.632 ops/s
# Warmup Iteration  28: 2791532.530 ops/s
# Warmup Iteration  29: 2793436.821 ops/s
# Warmup Iteration  30: 2788793.416 ops/s
Iteration   1: 2794659.078 ops/s
Iteration   2: 2781655.840 ops/s
Iteration   3: 2789575.368 ops/s
Iteration   4: 2792169.757 ops/s
Iteration   5: 2789121.029 ops/s
Iteration   6: 2784598.356 ops/s
Iteration   7: 2789143.364 ops/s
Iteration   8: 2789290.321 ops/s
Iteration   9: 2792203.768 ops/s
Iteration  10: 2783190.634 ops/s
Iteration  11: 2788509.423 ops/s
Iteration  12: 2789600.821 ops/s
Iteration  13: 2773311.306 ops/s
Iteration  14: 2788799.550 ops/s
Iteration  15: 2786819.638 ops/s
Iteration  16: 2794351.623 ops/s
Iteration  17: 2795665.057 ops/s
Iteration  18: 2783888.484 ops/s
Iteration  19: 2792897.766 ops/s
Iteration  20: 2787992.754 ops/s
Iteration  21: 2792321.422 ops/s
Iteration  22: 2771512.510 ops/s
Iteration  23: 2787380.501 ops/s
Iteration  24: 2791684.821 ops/s
Iteration  25: 2780686.324 ops/s
Iteration  26: 2792287.580 ops/s
Iteration  27: 2792134.766 ops/s
Iteration  28: 2790683.380 ops/s
Iteration  29: 2787509.076 ops/s
Iteration  30: 2794761.192 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectIndex":
  2788280.184 ±(99.9%) 3855.835 ops/s [Average]
  (min, avg, max) = (2771512.510, 2788280.184, 2795665.057), stdev = 5771.233
  CI (99.9%): [2784424.348, 2792136.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectIndex  thrpt   30  2788280.184 ± 3855.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1256896.221 ops/s
# Warmup Iteration   2: 2728971.536 ops/s
# Warmup Iteration   3: 2813650.873 ops/s
# Warmup Iteration   4: 2829670.520 ops/s
# Warmup Iteration   5: 2321679.030 ops/s
# Warmup Iteration   6: 2830301.474 ops/s
# Warmup Iteration   7: 2835427.118 ops/s
# Warmup Iteration   8: 2831907.797 ops/s
# Warmup Iteration   9: 2833702.177 ops/s
# Warmup Iteration  10: 2833482.472 ops/s
# Warmup Iteration  11: 2835334.054 ops/s
# Warmup Iteration  12: 2828751.079 ops/s
# Warmup Iteration  13: 2823458.910 ops/s
# Warmup Iteration  14: 2828372.793 ops/s
# Warmup Iteration  15: 2832659.530 ops/s
# Warmup Iteration  16: 2837018.259 ops/s
# Warmup Iteration  17: 2825584.581 ops/s
# Warmup Iteration  18: 2832044.603 ops/s
# Warmup Iteration  19: 2826684.570 ops/s
# Warmup Iteration  20: 2832618.150 ops/s
# Warmup Iteration  21: 2831426.043 ops/s
# Warmup Iteration  22: 2835931.803 ops/s
# Warmup Iteration  23: 2830416.633 ops/s
# Warmup Iteration  24: 2833558.263 ops/s
# Warmup Iteration  25: 2826149.652 ops/s
# Warmup Iteration  26: 2827936.422 ops/s
# Warmup Iteration  27: 2831617.766 ops/s
# Warmup Iteration  28: 2830955.803 ops/s
# Warmup Iteration  29: 2836179.500 ops/s
# Warmup Iteration  30: 2829833.657 ops/s
Iteration   1: 2837560.503 ops/s
Iteration   2: 2832577.324 ops/s
Iteration   3: 2829739.489 ops/s
Iteration   4: 2826910.740 ops/s
Iteration   5: 2833228.699 ops/s
Iteration   6: 2832595.292 ops/s
Iteration   7: 2831806.191 ops/s
Iteration   8: 2824730.466 ops/s
Iteration   9: 2834146.469 ops/s
Iteration  10: 2839017.692 ops/s
Iteration  11: 2839587.234 ops/s
Iteration  12: 2823346.021 ops/s
Iteration  13: 2831379.611 ops/s
Iteration  14: 2826574.706 ops/s
Iteration  15: 2835533.987 ops/s
Iteration  16: 2829892.454 ops/s
Iteration  17: 2824845.649 ops/s
Iteration  18: 2828321.477 ops/s
Iteration  19: 2836948.248 ops/s
Iteration  20: 2821574.144 ops/s
Iteration  21: 2816860.165 ops/s
Iteration  22: 2822789.581 ops/s
Iteration  23: 2830634.942 ops/s
Iteration  24: 2831028.536 ops/s
Iteration  25: 2825884.037 ops/s
Iteration  26: 2829141.584 ops/s
Iteration  27: 2826855.779 ops/s
Iteration  28: 2834973.412 ops/s
Iteration  29: 2834830.595 ops/s
Iteration  30: 2836157.545 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectLastIndex":
  2830315.752 ±(99.9%) 3692.699 ops/s [Average]
  (min, avg, max) = (2816860.165, 2830315.752, 2839587.234), stdev = 5527.059
  CI (99.9%): [2826623.053, 2834008.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectLastIndex  thrpt   30  2830315.752 ± 3692.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522169.385 ops/s
# Warmup Iteration   2: 551060.067 ops/s
# Warmup Iteration   3: 725531.155 ops/s
# Warmup Iteration   4: 740389.178 ops/s
# Warmup Iteration   5: 742277.228 ops/s
# Warmup Iteration   6: 737034.234 ops/s
# Warmup Iteration   7: 741844.340 ops/s
# Warmup Iteration   8: 739223.043 ops/s
# Warmup Iteration   9: 740549.446 ops/s
# Warmup Iteration  10: 741002.611 ops/s
# Warmup Iteration  11: 738434.746 ops/s
# Warmup Iteration  12: 613795.842 ops/s
# Warmup Iteration  13: 742114.573 ops/s
# Warmup Iteration  14: 740941.212 ops/s
# Warmup Iteration  15: 741038.254 ops/s
# Warmup Iteration  16: 740868.752 ops/s
# Warmup Iteration  17: 776624.528 ops/s
# Warmup Iteration  18: 774980.523 ops/s
# Warmup Iteration  19: 776456.016 ops/s
# Warmup Iteration  20: 774728.598 ops/s
# Warmup Iteration  21: 775818.995 ops/s
# Warmup Iteration  22: 777062.338 ops/s
# Warmup Iteration  23: 775588.449 ops/s
# Warmup Iteration  24: 774613.226 ops/s
# Warmup Iteration  25: 773525.862 ops/s
# Warmup Iteration  26: 774392.753 ops/s
# Warmup Iteration  27: 774261.978 ops/s
# Warmup Iteration  28: 776114.288 ops/s
# Warmup Iteration  29: 774643.590 ops/s
# Warmup Iteration  30: 772607.654 ops/s
Iteration   1: 775630.896 ops/s
Iteration   2: 772642.034 ops/s
Iteration   3: 777756.654 ops/s
Iteration   4: 773940.088 ops/s
Iteration   5: 776304.788 ops/s
Iteration   6: 778400.678 ops/s
Iteration   7: 773292.993 ops/s
Iteration   8: 776671.127 ops/s
Iteration   9: 774788.181 ops/s
Iteration  10: 776697.000 ops/s
Iteration  11: 774322.611 ops/s
Iteration  12: 775716.926 ops/s
Iteration  13: 774665.020 ops/s
Iteration  14: 777939.016 ops/s
Iteration  15: 775191.843 ops/s
Iteration  16: 774470.914 ops/s
Iteration  17: 775290.122 ops/s
Iteration  18: 775214.137 ops/s
Iteration  19: 770817.692 ops/s
Iteration  20: 775752.245 ops/s
Iteration  21: 773854.171 ops/s
Iteration  22: 775563.786 ops/s
Iteration  23: 775391.011 ops/s
Iteration  24: 773932.787 ops/s
Iteration  25: 776269.418 ops/s
Iteration  26: 774425.527 ops/s
Iteration  27: 775219.734 ops/s
Iteration  28: 775328.987 ops/s
Iteration  29: 777273.132 ops/s
Iteration  30: 775251.663 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectOptional":
  775267.173 ±(99.9%) 1059.403 ops/s [Average]
  (min, avg, max) = (770817.692, 775267.173, 778400.678), stdev = 1585.665
  CI (99.9%): [774207.769, 776326.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectOptional  thrpt   30  775267.173 ± 1059.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3245617.473 ops/s
# Warmup Iteration   2: 5416887.213 ops/s
# Warmup Iteration   3: 6081168.069 ops/s
# Warmup Iteration   4: 6120037.134 ops/s
# Warmup Iteration   5: 6123209.341 ops/s
# Warmup Iteration   6: 5068358.303 ops/s
# Warmup Iteration   7: 6131516.305 ops/s
# Warmup Iteration   8: 6132638.153 ops/s
# Warmup Iteration   9: 6122880.621 ops/s
# Warmup Iteration  10: 6136528.075 ops/s
# Warmup Iteration  11: 6134984.638 ops/s
# Warmup Iteration  12: 6135103.070 ops/s
# Warmup Iteration  13: 6127652.958 ops/s
# Warmup Iteration  14: 6132819.827 ops/s
# Warmup Iteration  15: 6128280.678 ops/s
# Warmup Iteration  16: 6134397.060 ops/s
# Warmup Iteration  17: 6132516.271 ops/s
# Warmup Iteration  18: 6127217.597 ops/s
# Warmup Iteration  19: 6134085.554 ops/s
# Warmup Iteration  20: 6128518.376 ops/s
# Warmup Iteration  21: 6132195.976 ops/s
# Warmup Iteration  22: 6116977.170 ops/s
# Warmup Iteration  23: 6119786.472 ops/s
# Warmup Iteration  24: 6132852.652 ops/s
# Warmup Iteration  25: 6128192.969 ops/s
# Warmup Iteration  26: 6122824.363 ops/s
# Warmup Iteration  27: 6126326.011 ops/s
# Warmup Iteration  28: 6136442.848 ops/s
# Warmup Iteration  29: 6134949.539 ops/s
# Warmup Iteration  30: 6123275.631 ops/s
Iteration   1: 6135388.640 ops/s
Iteration   2: 6130439.153 ops/s
Iteration   3: 6122632.653 ops/s
Iteration   4: 6141749.492 ops/s
Iteration   5: 6121605.115 ops/s
Iteration   6: 6125755.771 ops/s
Iteration   7: 6119155.959 ops/s
Iteration   8: 6118164.840 ops/s
Iteration   9: 6130001.715 ops/s
Iteration  10: 6121873.077 ops/s
Iteration  11: 6135828.150 ops/s
Iteration  12: 6118310.499 ops/s
Iteration  13: 6111460.624 ops/s
Iteration  14: 6129434.912 ops/s
Iteration  15: 6136265.269 ops/s
Iteration  16: 6128498.969 ops/s
Iteration  17: 6118339.481 ops/s
Iteration  18: 6135552.114 ops/s
Iteration  19: 6115094.140 ops/s
Iteration  20: 6116363.315 ops/s
Iteration  21: 6125486.538 ops/s
Iteration  22: 6122126.431 ops/s
Iteration  23: 6126617.759 ops/s
Iteration  24: 6145238.827 ops/s
Iteration  25: 6107935.844 ops/s
Iteration  26: 6111266.086 ops/s
Iteration  27: 6113201.751 ops/s
Iteration  28: 6130087.608 ops/s
Iteration  29: 6137979.391 ops/s
Iteration  30: 6119074.606 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWith":
  6125030.958 ±(99.9%) 6390.437 ops/s [Average]
  (min, avg, max) = (6107935.844, 6125030.958, 6145238.827), stdev = 9564.907
  CI (99.9%): [6118640.520, 6131421.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectWith  thrpt   30  6125030.958 ± 6390.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2491060.016 ops/s
# Warmup Iteration   2: 4922388.053 ops/s
# Warmup Iteration   3: 5880872.901 ops/s
# Warmup Iteration   4: 5928871.477 ops/s
# Warmup Iteration   5: 5910829.511 ops/s
# Warmup Iteration   6: 4905543.825 ops/s
# Warmup Iteration   7: 5937108.537 ops/s
# Warmup Iteration   8: 5930642.456 ops/s
# Warmup Iteration   9: 5926970.517 ops/s
# Warmup Iteration  10: 5937686.165 ops/s
# Warmup Iteration  11: 5909055.300 ops/s
# Warmup Iteration  12: 5931594.507 ops/s
# Warmup Iteration  13: 5940759.312 ops/s
# Warmup Iteration  14: 5924485.124 ops/s
# Warmup Iteration  15: 5913172.900 ops/s
# Warmup Iteration  16: 5930996.760 ops/s
# Warmup Iteration  17: 5923186.841 ops/s
# Warmup Iteration  18: 5922803.739 ops/s
# Warmup Iteration  19: 5928474.423 ops/s
# Warmup Iteration  20: 5931339.483 ops/s
# Warmup Iteration  21: 5922790.004 ops/s
# Warmup Iteration  22: 5918753.482 ops/s
# Warmup Iteration  23: 5931524.460 ops/s
# Warmup Iteration  24: 5932479.749 ops/s
# Warmup Iteration  25: 5929133.757 ops/s
# Warmup Iteration  26: 5932506.562 ops/s
# Warmup Iteration  27: 5923739.532 ops/s
# Warmup Iteration  28: 5931523.426 ops/s
# Warmup Iteration  29: 5933429.240 ops/s
# Warmup Iteration  30: 5940464.716 ops/s
Iteration   1: 5892733.367 ops/s
Iteration   2: 5923521.263 ops/s
Iteration   3: 5907073.688 ops/s
Iteration   4: 5942093.121 ops/s
Iteration   5: 5924168.566 ops/s
Iteration   6: 5927375.986 ops/s
Iteration   7: 5926013.992 ops/s
Iteration   8: 5932800.068 ops/s
Iteration   9: 5917606.435 ops/s
Iteration  10: 5922974.412 ops/s
Iteration  11: 5937588.742 ops/s
Iteration  12: 5941412.520 ops/s
Iteration  13: 5923397.741 ops/s
Iteration  14: 5933032.689 ops/s
Iteration  15: 5926515.343 ops/s
Iteration  16: 5916225.311 ops/s
Iteration  17: 5934185.670 ops/s
Iteration  18: 5930733.083 ops/s
Iteration  19: 5920394.934 ops/s
Iteration  20: 5914266.254 ops/s
Iteration  21: 5924088.596 ops/s
Iteration  22: 5905109.661 ops/s
Iteration  23: 5934159.328 ops/s
Iteration  24: 5927192.588 ops/s
Iteration  25: 5929678.180 ops/s
Iteration  26: 5912274.886 ops/s
Iteration  27: 5935604.301 ops/s
Iteration  28: 5915469.838 ops/s
Iteration  29: 5940026.493 ops/s
Iteration  30: 5949971.632 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock":
  5925589.623 ±(99.9%) 8157.162 ops/s [Average]
  (min, avg, max) = (5892733.367, 5925589.623, 5949971.632), stdev = 12209.256
  CI (99.9%): [5917432.461, 5933746.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  5925589.623 ± 8157.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525196.947 ops/s
# Warmup Iteration   2: 552361.667 ops/s
# Warmup Iteration   3: 730296.590 ops/s
# Warmup Iteration   4: 743690.256 ops/s
# Warmup Iteration   5: 744348.202 ops/s
# Warmup Iteration   6: 739535.224 ops/s
# Warmup Iteration   7: 743498.942 ops/s
# Warmup Iteration   8: 744633.763 ops/s
# Warmup Iteration   9: 741656.096 ops/s
# Warmup Iteration  10: 740444.813 ops/s
# Warmup Iteration  11: 742833.299 ops/s
# Warmup Iteration  12: 616447.380 ops/s
# Warmup Iteration  13: 744436.205 ops/s
# Warmup Iteration  14: 745006.620 ops/s
# Warmup Iteration  15: 745939.940 ops/s
# Warmup Iteration  16: 744677.441 ops/s
# Warmup Iteration  17: 778705.510 ops/s
# Warmup Iteration  18: 779730.406 ops/s
# Warmup Iteration  19: 779297.845 ops/s
# Warmup Iteration  20: 778004.047 ops/s
# Warmup Iteration  21: 778231.920 ops/s
# Warmup Iteration  22: 778384.094 ops/s
# Warmup Iteration  23: 777765.601 ops/s
# Warmup Iteration  24: 775795.740 ops/s
# Warmup Iteration  25: 778784.466 ops/s
# Warmup Iteration  26: 777832.670 ops/s
# Warmup Iteration  27: 779104.854 ops/s
# Warmup Iteration  28: 776946.498 ops/s
# Warmup Iteration  29: 778620.589 ops/s
# Warmup Iteration  30: 776222.539 ops/s
Iteration   1: 779641.285 ops/s
Iteration   2: 778676.648 ops/s
Iteration   3: 774688.198 ops/s
Iteration   4: 778253.125 ops/s
Iteration   5: 777746.122 ops/s
Iteration   6: 778557.234 ops/s
Iteration   7: 773726.730 ops/s
Iteration   8: 777397.229 ops/s
Iteration   9: 781198.708 ops/s
Iteration  10: 780516.987 ops/s
Iteration  11: 774023.917 ops/s
Iteration  12: 779663.349 ops/s
Iteration  13: 778426.513 ops/s
Iteration  14: 778551.147 ops/s
Iteration  15: 776368.552 ops/s
Iteration  16: 774698.813 ops/s
Iteration  17: 777456.339 ops/s
Iteration  18: 775568.876 ops/s
Iteration  19: 778660.828 ops/s
Iteration  20: 778016.821 ops/s
Iteration  21: 775639.595 ops/s
Iteration  22: 777859.921 ops/s
Iteration  23: 778683.373 ops/s
Iteration  24: 773060.825 ops/s
Iteration  25: 776833.002 ops/s
Iteration  26: 775234.829 ops/s
Iteration  27: 777852.107 ops/s
Iteration  28: 779480.773 ops/s
Iteration  29: 779631.230 ops/s
Iteration  30: 776816.666 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_detectWithOptional":
  777430.991 ±(99.9%) 1387.305 ops/s [Average]
  (min, avg, max) = (773060.825, 777430.991, 781198.708), stdev = 2076.454
  CI (99.9%): [776043.686, 778818.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_detectWithOptional  thrpt   30  777430.991 ± 1387.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2616724.021 ops/s
# Warmup Iteration   2: 5927295.957 ops/s
# Warmup Iteration   3: 6100792.208 ops/s
# Warmup Iteration   4: 5353097.078 ops/s
# Warmup Iteration   5: 5868950.473 ops/s
# Warmup Iteration   6: 6121124.298 ops/s
# Warmup Iteration   7: 6128444.472 ops/s
# Warmup Iteration   8: 6127920.477 ops/s
# Warmup Iteration   9: 6122271.971 ops/s
# Warmup Iteration  10: 6134640.481 ops/s
# Warmup Iteration  11: 6130909.965 ops/s
# Warmup Iteration  12: 6117427.883 ops/s
# Warmup Iteration  13: 6114163.443 ops/s
# Warmup Iteration  14: 6117772.378 ops/s
# Warmup Iteration  15: 6119731.579 ops/s
# Warmup Iteration  16: 6132459.094 ops/s
# Warmup Iteration  17: 6135300.843 ops/s
# Warmup Iteration  18: 6132266.963 ops/s
# Warmup Iteration  19: 6130076.430 ops/s
# Warmup Iteration  20: 6125223.543 ops/s
# Warmup Iteration  21: 6131971.748 ops/s
# Warmup Iteration  22: 6121161.539 ops/s
# Warmup Iteration  23: 6119166.047 ops/s
# Warmup Iteration  24: 6123574.053 ops/s
# Warmup Iteration  25: 6113360.006 ops/s
# Warmup Iteration  26: 6132234.470 ops/s
# Warmup Iteration  27: 6130860.631 ops/s
# Warmup Iteration  28: 6118344.549 ops/s
# Warmup Iteration  29: 6122383.257 ops/s
# Warmup Iteration  30: 6133635.309 ops/s
Iteration   1: 6117175.353 ops/s
Iteration   2: 6136489.163 ops/s
Iteration   3: 6114154.769 ops/s
Iteration   4: 6107924.733 ops/s
Iteration   5: 6122691.871 ops/s
Iteration   6: 6120743.661 ops/s
Iteration   7: 6141566.756 ops/s
Iteration   8: 6129220.036 ops/s
Iteration   9: 6121771.036 ops/s
Iteration  10: 6141365.479 ops/s
Iteration  11: 6123028.571 ops/s
Iteration  12: 6120614.623 ops/s
Iteration  13: 6137653.987 ops/s
Iteration  14: 6084530.658 ops/s
Iteration  15: 6133943.422 ops/s
Iteration  16: 6106115.414 ops/s
Iteration  17: 6130917.110 ops/s
Iteration  18: 6092166.586 ops/s
Iteration  19: 6144309.336 ops/s
Iteration  20: 6115868.556 ops/s
Iteration  21: 6151424.842 ops/s
Iteration  22: 6120671.221 ops/s
Iteration  23: 6129318.795 ops/s
Iteration  24: 6125079.689 ops/s
Iteration  25: 6118398.085 ops/s
Iteration  26: 6116226.008 ops/s
Iteration  27: 6131127.975 ops/s
Iteration  28: 6142746.493 ops/s
Iteration  29: 6138322.256 ops/s
Iteration  30: 6128288.569 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinct":
  6124795.168 ±(99.9%) 9939.990 ops/s [Average]
  (min, avg, max) = (6084530.658, 6124795.168, 6151424.842), stdev = 14877.710
  CI (99.9%): [6114855.179, 6134735.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_distinct  thrpt   30  6124795.168 ± 9939.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1136675.105 ops/s
# Warmup Iteration   2: 2372026.385 ops/s
# Warmup Iteration   3: 2544974.135 ops/s
# Warmup Iteration   4: 2557202.613 ops/s
# Warmup Iteration   5: 2094178.778 ops/s
# Warmup Iteration   6: 2563985.156 ops/s
# Warmup Iteration   7: 2572538.711 ops/s
# Warmup Iteration   8: 2557922.617 ops/s
# Warmup Iteration   9: 2570933.560 ops/s
# Warmup Iteration  10: 2563326.340 ops/s
# Warmup Iteration  11: 2568506.570 ops/s
# Warmup Iteration  12: 2564744.123 ops/s
# Warmup Iteration  13: 2572928.535 ops/s
# Warmup Iteration  14: 2560842.706 ops/s
# Warmup Iteration  15: 2573097.297 ops/s
# Warmup Iteration  16: 2557838.113 ops/s
# Warmup Iteration  17: 2561546.122 ops/s
# Warmup Iteration  18: 2569867.338 ops/s
# Warmup Iteration  19: 2571280.595 ops/s
# Warmup Iteration  20: 2575747.208 ops/s
# Warmup Iteration  21: 2574831.589 ops/s
# Warmup Iteration  22: 2571476.187 ops/s
# Warmup Iteration  23: 2562258.106 ops/s
# Warmup Iteration  24: 2571206.738 ops/s
# Warmup Iteration  25: 2569676.848 ops/s
# Warmup Iteration  26: 2571018.055 ops/s
# Warmup Iteration  27: 2562979.163 ops/s
# Warmup Iteration  28: 2567509.330 ops/s
# Warmup Iteration  29: 2571701.499 ops/s
# Warmup Iteration  30: 2566076.639 ops/s
Iteration   1: 2560359.370 ops/s
Iteration   2: 2570755.325 ops/s
Iteration   3: 2561125.695 ops/s
Iteration   4: 2566762.921 ops/s
Iteration   5: 2569680.225 ops/s
Iteration   6: 2569026.378 ops/s
Iteration   7: 2562001.375 ops/s
Iteration   8: 2569804.282 ops/s
Iteration   9: 2566178.195 ops/s
Iteration  10: 2561353.457 ops/s
Iteration  11: 2574782.065 ops/s
Iteration  12: 2561550.023 ops/s
Iteration  13: 2575096.833 ops/s
Iteration  14: 2569224.676 ops/s
Iteration  15: 2563247.051 ops/s
Iteration  16: 2576144.233 ops/s
Iteration  17: 2564018.691 ops/s
Iteration  18: 2561250.934 ops/s
Iteration  19: 2570396.364 ops/s
Iteration  20: 2564951.188 ops/s
Iteration  21: 2560558.688 ops/s
Iteration  22: 2571729.814 ops/s
Iteration  23: 2581300.900 ops/s
Iteration  24: 2571663.212 ops/s
Iteration  25: 2568561.336 ops/s
Iteration  26: 2567479.039 ops/s
Iteration  27: 2574142.700 ops/s
Iteration  28: 2566599.029 ops/s
Iteration  29: 2570387.665 ops/s
Iteration  30: 2576125.985 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctBy":
  2568208.588 ±(99.9%) 3681.456 ops/s [Average]
  (min, avg, max) = (2560359.370, 2568208.588, 2581300.900), stdev = 5510.231
  CI (99.9%): [2564527.132, 2571890.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_distinctBy  thrpt   30  2568208.588 ± 3681.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1181336.369 ops/s
# Warmup Iteration   2: 2441042.022 ops/s
# Warmup Iteration   3: 2603953.705 ops/s
# Warmup Iteration   4: 2622865.021 ops/s
# Warmup Iteration   5: 2145768.521 ops/s
# Warmup Iteration   6: 2617279.566 ops/s
# Warmup Iteration   7: 2620455.609 ops/s
# Warmup Iteration   8: 2617455.959 ops/s
# Warmup Iteration   9: 2617154.337 ops/s
# Warmup Iteration  10: 2618209.927 ops/s
# Warmup Iteration  11: 2610389.089 ops/s
# Warmup Iteration  12: 2616662.186 ops/s
# Warmup Iteration  13: 2623497.005 ops/s
# Warmup Iteration  14: 2626608.904 ops/s
# Warmup Iteration  15: 2615979.823 ops/s
# Warmup Iteration  16: 2619274.557 ops/s
# Warmup Iteration  17: 2612576.667 ops/s
# Warmup Iteration  18: 2622346.506 ops/s
# Warmup Iteration  19: 2618458.469 ops/s
# Warmup Iteration  20: 2632442.955 ops/s
# Warmup Iteration  21: 2621161.041 ops/s
# Warmup Iteration  22: 2615447.991 ops/s
# Warmup Iteration  23: 2621902.093 ops/s
# Warmup Iteration  24: 2625986.263 ops/s
# Warmup Iteration  25: 2613734.171 ops/s
# Warmup Iteration  26: 2621055.562 ops/s
# Warmup Iteration  27: 2621890.928 ops/s
# Warmup Iteration  28: 2621472.372 ops/s
# Warmup Iteration  29: 2625416.369 ops/s
# Warmup Iteration  30: 2620180.903 ops/s
Iteration   1: 2626764.762 ops/s
Iteration   2: 2620952.699 ops/s
Iteration   3: 2620456.888 ops/s
Iteration   4: 2622861.973 ops/s
Iteration   5: 2623263.274 ops/s
Iteration   6: 2611430.747 ops/s
Iteration   7: 2620207.972 ops/s
Iteration   8: 2619942.494 ops/s
Iteration   9: 2625521.326 ops/s
Iteration  10: 2622189.208 ops/s
Iteration  11: 2627434.140 ops/s
Iteration  12: 2619398.773 ops/s
Iteration  13: 2617359.742 ops/s
Iteration  14: 2619381.157 ops/s
Iteration  15: 2618191.615 ops/s
Iteration  16: 2610394.126 ops/s
Iteration  17: 2613503.467 ops/s
Iteration  18: 2621854.988 ops/s
Iteration  19: 2621882.822 ops/s
Iteration  20: 2620119.037 ops/s
Iteration  21: 2618706.982 ops/s
Iteration  22: 2617067.271 ops/s
Iteration  23: 2623011.379 ops/s
Iteration  24: 2627233.784 ops/s
Iteration  25: 2624130.112 ops/s
Iteration  26: 2628083.899 ops/s
Iteration  27: 2617300.967 ops/s
Iteration  28: 2617657.841 ops/s
Iteration  29: 2618313.622 ops/s
Iteration  30: 2616192.422 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2620360.316 ±(99.9%) 2942.465 ops/s [Average]
  (min, avg, max) = (2610394.126, 2620360.316, 2628083.899), stdev = 4404.143
  CI (99.9%): [2617417.851, 2623302.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2620360.316 ± 2942.465  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1316320.949 ops/s
# Warmup Iteration   2: 3657965.573 ops/s
# Warmup Iteration   3: 4036123.879 ops/s
# Warmup Iteration   4: 4064854.677 ops/s
# Warmup Iteration   5: 3334798.277 ops/s
# Warmup Iteration   6: 4069151.855 ops/s
# Warmup Iteration   7: 4060137.680 ops/s
# Warmup Iteration   8: 4036139.100 ops/s
# Warmup Iteration   9: 4061531.175 ops/s
# Warmup Iteration  10: 4042317.092 ops/s
# Warmup Iteration  11: 4064313.428 ops/s
# Warmup Iteration  12: 4048299.720 ops/s
# Warmup Iteration  13: 4048798.192 ops/s
# Warmup Iteration  14: 4044992.997 ops/s
# Warmup Iteration  15: 4051004.115 ops/s
# Warmup Iteration  16: 4050845.746 ops/s
# Warmup Iteration  17: 4064729.907 ops/s
# Warmup Iteration  18: 4081494.399 ops/s
# Warmup Iteration  19: 4072486.833 ops/s
# Warmup Iteration  20: 4081491.130 ops/s
# Warmup Iteration  21: 4077515.414 ops/s
# Warmup Iteration  22: 4075293.653 ops/s
# Warmup Iteration  23: 4077032.256 ops/s
# Warmup Iteration  24: 4079389.273 ops/s
# Warmup Iteration  25: 4074460.186 ops/s
# Warmup Iteration  26: 4084899.594 ops/s
# Warmup Iteration  27: 4072382.359 ops/s
# Warmup Iteration  28: 4090084.193 ops/s
# Warmup Iteration  29: 4084068.593 ops/s
# Warmup Iteration  30: 4087874.019 ops/s
Iteration   1: 4080263.016 ops/s
Iteration   2: 4090630.931 ops/s
Iteration   3: 4076894.176 ops/s
Iteration   4: 4072450.778 ops/s
Iteration   5: 4085798.404 ops/s
Iteration   6: 4085636.173 ops/s
Iteration   7: 4070178.977 ops/s
Iteration   8: 4089129.777 ops/s
Iteration   9: 4069340.428 ops/s
Iteration  10: 4072811.355 ops/s
Iteration  11: 4088409.087 ops/s
Iteration  12: 4077153.721 ops/s
Iteration  13: 4076138.456 ops/s
Iteration  14: 4076916.290 ops/s
Iteration  15: 4076880.767 ops/s
Iteration  16: 4084563.478 ops/s
Iteration  17: 4093223.696 ops/s
Iteration  18: 4074029.798 ops/s
Iteration  19: 4072860.662 ops/s
Iteration  20: 4076973.605 ops/s
Iteration  21: 4085206.122 ops/s
Iteration  22: 4079995.158 ops/s
Iteration  23: 4079447.724 ops/s
Iteration  24: 4095141.375 ops/s
Iteration  25: 4077212.381 ops/s
Iteration  26: 4079099.262 ops/s
Iteration  27: 4078254.329 ops/s
Iteration  28: 4077161.343 ops/s
Iteration  29: 4078786.592 ops/s
Iteration  30: 4086194.315 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop":
  4080226.073 ±(99.9%) 4489.239 ops/s [Average]
  (min, avg, max) = (4069340.428, 4080226.073, 4095141.375), stdev = 6719.282
  CI (99.9%): [4075736.834, 4084715.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_drop  thrpt   30  4080226.073 ± 4489.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1721000.567 ops/s
# Warmup Iteration   2: 4370909.113 ops/s
# Warmup Iteration   3: 4372152.544 ops/s
# Warmup Iteration   4: 3615826.700 ops/s
# Warmup Iteration   5: 4380538.396 ops/s
# Warmup Iteration   6: 4390470.321 ops/s
# Warmup Iteration   7: 4374960.023 ops/s
# Warmup Iteration   8: 4395944.176 ops/s
# Warmup Iteration   9: 4397954.241 ops/s
# Warmup Iteration  10: 4390291.349 ops/s
# Warmup Iteration  11: 4387061.046 ops/s
# Warmup Iteration  12: 4384676.845 ops/s
# Warmup Iteration  13: 4389231.543 ops/s
# Warmup Iteration  14: 4391197.016 ops/s
# Warmup Iteration  15: 4383933.686 ops/s
# Warmup Iteration  16: 4386543.904 ops/s
# Warmup Iteration  17: 4384943.714 ops/s
# Warmup Iteration  18: 4397397.577 ops/s
# Warmup Iteration  19: 4394658.088 ops/s
# Warmup Iteration  20: 4390408.248 ops/s
# Warmup Iteration  21: 4388524.710 ops/s
# Warmup Iteration  22: 4394963.789 ops/s
# Warmup Iteration  23: 4375636.663 ops/s
# Warmup Iteration  24: 4382825.729 ops/s
# Warmup Iteration  25: 4381183.980 ops/s
# Warmup Iteration  26: 4387962.806 ops/s
# Warmup Iteration  27: 4398617.401 ops/s
# Warmup Iteration  28: 4391910.357 ops/s
# Warmup Iteration  29: 4396839.062 ops/s
# Warmup Iteration  30: 4398285.543 ops/s
Iteration   1: 4395061.976 ops/s
Iteration   2: 4392334.937 ops/s
Iteration   3: 4399780.988 ops/s
Iteration   4: 4401047.934 ops/s
Iteration   5: 4396376.745 ops/s
Iteration   6: 4376933.670 ops/s
Iteration   7: 4410960.071 ops/s
Iteration   8: 4395205.091 ops/s
Iteration   9: 4397738.657 ops/s
Iteration  10: 4409340.230 ops/s
Iteration  11: 4395504.786 ops/s
Iteration  12: 4403289.012 ops/s
Iteration  13: 4389369.901 ops/s
Iteration  14: 4387347.115 ops/s
Iteration  15: 4408426.324 ops/s
Iteration  16: 4388986.537 ops/s
Iteration  17: 4392396.318 ops/s
Iteration  18: 4400573.423 ops/s
Iteration  19: 4396271.497 ops/s
Iteration  20: 4389281.425 ops/s
Iteration  21: 4399427.947 ops/s
Iteration  22: 4384085.754 ops/s
Iteration  23: 4394156.176 ops/s
Iteration  24: 4395142.237 ops/s
Iteration  25: 4401384.637 ops/s
Iteration  26: 4391846.783 ops/s
Iteration  27: 4402490.307 ops/s
Iteration  28: 4397958.364 ops/s
Iteration  29: 4382365.731 ops/s
Iteration  30: 4399182.402 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_dropWhile":
  4395808.899 ±(99.9%) 5149.933 ops/s [Average]
  (min, avg, max) = (4376933.670, 4395808.899, 4410960.071), stdev = 7708.178
  CI (99.9%): [4390658.966, 4400958.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_dropWhile  thrpt   30  4395808.899 ± 5149.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691434.551 ops/s
# Warmup Iteration   2: 763721.322 ops/s
# Warmup Iteration   3: 992671.654 ops/s
# Warmup Iteration   4: 983341.155 ops/s
# Warmup Iteration   5: 980614.496 ops/s
# Warmup Iteration   6: 980371.698 ops/s
# Warmup Iteration   7: 981665.935 ops/s
# Warmup Iteration   8: 981386.854 ops/s
# Warmup Iteration   9: 983447.117 ops/s
# Warmup Iteration  10: 916559.265 ops/s
# Warmup Iteration  11: 886607.734 ops/s
# Warmup Iteration  12: 983016.351 ops/s
# Warmup Iteration  13: 982128.014 ops/s
# Warmup Iteration  14: 982886.462 ops/s
# Warmup Iteration  15: 982954.119 ops/s
# Warmup Iteration  16: 983123.709 ops/s
# Warmup Iteration  17: 1040236.801 ops/s
# Warmup Iteration  18: 1041471.773 ops/s
# Warmup Iteration  19: 1040801.087 ops/s
# Warmup Iteration  20: 1042627.010 ops/s
# Warmup Iteration  21: 1039481.498 ops/s
# Warmup Iteration  22: 1042783.419 ops/s
# Warmup Iteration  23: 1040371.461 ops/s
# Warmup Iteration  24: 1041437.654 ops/s
# Warmup Iteration  25: 1039501.231 ops/s
# Warmup Iteration  26: 1039595.882 ops/s
# Warmup Iteration  27: 1042365.305 ops/s
# Warmup Iteration  28: 1040380.861 ops/s
# Warmup Iteration  29: 1041368.892 ops/s
# Warmup Iteration  30: 1042360.362 ops/s
Iteration   1: 1043795.484 ops/s
Iteration   2: 1042212.637 ops/s
Iteration   3: 1042372.469 ops/s
Iteration   4: 1039018.059 ops/s
Iteration   5: 1041391.352 ops/s
Iteration   6: 1040527.148 ops/s
Iteration   7: 1039357.430 ops/s
Iteration   8: 1043923.891 ops/s
Iteration   9: 1037279.168 ops/s
Iteration  10: 1043402.459 ops/s
Iteration  11: 1041640.311 ops/s
Iteration  12: 1039095.487 ops/s
Iteration  13: 1035148.203 ops/s
Iteration  14: 1042142.330 ops/s
Iteration  15: 1041982.623 ops/s
Iteration  16: 1042415.812 ops/s
Iteration  17: 1040453.004 ops/s
Iteration  18: 1037804.911 ops/s
Iteration  19: 1039013.063 ops/s
Iteration  20: 1042918.969 ops/s
Iteration  21: 1031393.457 ops/s
Iteration  22: 1041988.242 ops/s
Iteration  23: 1039469.395 ops/s
Iteration  24: 1046903.907 ops/s
Iteration  25: 1040671.100 ops/s
Iteration  26: 1039403.722 ops/s
Iteration  27: 1045308.042 ops/s
Iteration  28: 1037174.890 ops/s
Iteration  29: 1041485.939 ops/s
Iteration  30: 1040821.255 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_drop_throws":
  1040683.825 ±(99.9%) 2040.899 ops/s [Average]
  (min, avg, max) = (1031393.457, 1040683.825, 1046903.907), stdev = 3054.721
  CI (99.9%): [1038642.927, 1042724.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_drop_throws  thrpt   30  1040683.825 ± 2040.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11017631.698 ops/s
# Warmup Iteration   2: 21379140.525 ops/s
# Warmup Iteration   3: 18773059.340 ops/s
# Warmup Iteration   4: 21806661.234 ops/s
# Warmup Iteration   5: 21438331.113 ops/s
# Warmup Iteration   6: 21244462.364 ops/s
# Warmup Iteration   7: 21272426.554 ops/s
# Warmup Iteration   8: 20937064.631 ops/s
# Warmup Iteration   9: 21760762.393 ops/s
# Warmup Iteration  10: 20953276.964 ops/s
# Warmup Iteration  11: 21677894.860 ops/s
# Warmup Iteration  12: 21278278.032 ops/s
# Warmup Iteration  13: 22276143.779 ops/s
# Warmup Iteration  14: 20832905.206 ops/s
# Warmup Iteration  15: 20452867.239 ops/s
# Warmup Iteration  16: 22339409.022 ops/s
# Warmup Iteration  17: 22090611.425 ops/s
# Warmup Iteration  18: 21656832.314 ops/s
# Warmup Iteration  19: 20190882.859 ops/s
# Warmup Iteration  20: 21688771.693 ops/s
# Warmup Iteration  21: 21145725.055 ops/s
# Warmup Iteration  22: 20696058.922 ops/s
# Warmup Iteration  23: 21171978.279 ops/s
# Warmup Iteration  24: 20212931.942 ops/s
# Warmup Iteration  25: 20090907.158 ops/s
# Warmup Iteration  26: 21150221.743 ops/s
# Warmup Iteration  27: 21909048.419 ops/s
# Warmup Iteration  28: 20828063.576 ops/s
# Warmup Iteration  29: 21445812.159 ops/s
# Warmup Iteration  30: 21140120.858 ops/s
Iteration   1: 21230477.105 ops/s
Iteration   2: 21108883.138 ops/s
Iteration   3: 21230954.143 ops/s
Iteration   4: 22180746.608 ops/s
Iteration   5: 22160932.458 ops/s
Iteration   6: 21220353.330 ops/s
Iteration   7: 21119403.316 ops/s
Iteration   8: 22286447.915 ops/s
Iteration   9: 21256541.654 ops/s
Iteration  10: 21087779.674 ops/s
Iteration  11: 21096332.202 ops/s
Iteration  12: 21302586.076 ops/s
Iteration  13: 21208063.697 ops/s
Iteration  14: 22266228.323 ops/s
Iteration  15: 21214594.340 ops/s
Iteration  16: 22143253.423 ops/s
Iteration  17: 21215666.906 ops/s
Iteration  18: 21195892.075 ops/s
Iteration  19: 21271824.600 ops/s
Iteration  20: 21186866.824 ops/s
Iteration  21: 21215020.422 ops/s
Iteration  22: 21129411.157 ops/s
Iteration  23: 21123654.968 ops/s
Iteration  24: 21194231.485 ops/s
Iteration  25: 20198656.913 ops/s
Iteration  26: 21315160.034 ops/s
Iteration  27: 21160658.234 ops/s
Iteration  28: 22191228.145 ops/s
Iteration  29: 20116938.405 ops/s
Iteration  30: 21130474.079 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_empty":
  21325308.722 ±(99.9%) 348049.811 ops/s [Average]
  (min, avg, max) = (20116938.405, 21325308.722, 22286447.915), stdev = 520944.611
  CI (99.9%): [20977258.911, 21673358.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_empty  thrpt   30  21325308.722 ± 348049.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127564.951 ops/s
# Warmup Iteration   2: 268727.066 ops/s
# Warmup Iteration   3: 280801.963 ops/s
# Warmup Iteration   4: 282179.829 ops/s
# Warmup Iteration   5: 235929.657 ops/s
# Warmup Iteration   6: 281964.095 ops/s
# Warmup Iteration   7: 282634.083 ops/s
# Warmup Iteration   8: 282166.551 ops/s
# Warmup Iteration   9: 283225.716 ops/s
# Warmup Iteration  10: 281129.119 ops/s
# Warmup Iteration  11: 282767.278 ops/s
# Warmup Iteration  12: 282282.580 ops/s
# Warmup Iteration  13: 282425.293 ops/s
# Warmup Iteration  14: 281403.603 ops/s
# Warmup Iteration  15: 282355.738 ops/s
# Warmup Iteration  16: 282187.271 ops/s
# Warmup Iteration  17: 282037.820 ops/s
# Warmup Iteration  18: 281896.480 ops/s
# Warmup Iteration  19: 281357.688 ops/s
# Warmup Iteration  20: 281558.929 ops/s
# Warmup Iteration  21: 281802.461 ops/s
# Warmup Iteration  22: 281929.135 ops/s
# Warmup Iteration  23: 281484.454 ops/s
# Warmup Iteration  24: 282075.493 ops/s
# Warmup Iteration  25: 281289.017 ops/s
# Warmup Iteration  26: 281057.116 ops/s
# Warmup Iteration  27: 281949.373 ops/s
# Warmup Iteration  28: 281541.000 ops/s
# Warmup Iteration  29: 282421.247 ops/s
# Warmup Iteration  30: 282378.955 ops/s
Iteration   1: 281732.143 ops/s
Iteration   2: 281846.362 ops/s
Iteration   3: 281644.305 ops/s
Iteration   4: 281715.482 ops/s
Iteration   5: 283246.639 ops/s
Iteration   6: 281741.749 ops/s
Iteration   7: 281741.240 ops/s
Iteration   8: 282267.472 ops/s
Iteration   9: 281812.814 ops/s
Iteration  10: 281144.105 ops/s
Iteration  11: 282014.383 ops/s
Iteration  12: 282235.561 ops/s
Iteration  13: 281960.912 ops/s
Iteration  14: 281487.705 ops/s
Iteration  15: 280253.106 ops/s
Iteration  16: 281942.399 ops/s
Iteration  17: 281687.952 ops/s
Iteration  18: 282211.989 ops/s
Iteration  19: 280922.889 ops/s
Iteration  20: 281723.517 ops/s
Iteration  21: 281173.692 ops/s
Iteration  22: 281157.115 ops/s
Iteration  23: 281163.855 ops/s
Iteration  24: 281939.816 ops/s
Iteration  25: 281537.098 ops/s
Iteration  26: 282254.720 ops/s
Iteration  27: 281608.797 ops/s
Iteration  28: 281628.422 ops/s
Iteration  29: 281898.944 ops/s
Iteration  30: 282529.997 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_equalsAndHashCode":
  281740.839 ±(99.9%) 362.257 ops/s [Average]
  (min, avg, max) = (280253.106, 281740.839, 283246.639), stdev = 542.209
  CI (99.9%): [281378.583, 282103.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  281740.839 ± 362.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555003.879 ops/s
# Warmup Iteration   2: 1092995.026 ops/s
# Warmup Iteration   3: 1194605.891 ops/s
# Warmup Iteration   4: 1196934.099 ops/s
# Warmup Iteration   5: 991539.492 ops/s
# Warmup Iteration   6: 1208054.817 ops/s
# Warmup Iteration   7: 1205463.016 ops/s
# Warmup Iteration   8: 1199982.806 ops/s
# Warmup Iteration   9: 1204223.655 ops/s
# Warmup Iteration  10: 1202402.330 ops/s
# Warmup Iteration  11: 1202310.681 ops/s
# Warmup Iteration  12: 1204807.510 ops/s
# Warmup Iteration  13: 1205511.981 ops/s
# Warmup Iteration  14: 1201607.037 ops/s
# Warmup Iteration  15: 1202863.685 ops/s
# Warmup Iteration  16: 1204198.832 ops/s
# Warmup Iteration  17: 1202846.655 ops/s
# Warmup Iteration  18: 1203123.235 ops/s
# Warmup Iteration  19: 1207180.113 ops/s
# Warmup Iteration  20: 1201066.905 ops/s
# Warmup Iteration  21: 1197606.451 ops/s
# Warmup Iteration  22: 1201446.009 ops/s
# Warmup Iteration  23: 1202778.130 ops/s
# Warmup Iteration  24: 1204064.440 ops/s
# Warmup Iteration  25: 1208145.794 ops/s
# Warmup Iteration  26: 1206691.552 ops/s
# Warmup Iteration  27: 1202074.268 ops/s
# Warmup Iteration  28: 1204967.728 ops/s
# Warmup Iteration  29: 1207428.230 ops/s
# Warmup Iteration  30: 1200657.977 ops/s
Iteration   1: 1205814.710 ops/s
Iteration   2: 1202661.883 ops/s
Iteration   3: 1205211.784 ops/s
Iteration   4: 1208345.776 ops/s
Iteration   5: 1210701.795 ops/s
Iteration   6: 1201752.346 ops/s
Iteration   7: 1206002.017 ops/s
Iteration   8: 1202222.189 ops/s
Iteration   9: 1200837.637 ops/s
Iteration  10: 1199484.308 ops/s
Iteration  11: 1200465.306 ops/s
Iteration  12: 1202716.035 ops/s
Iteration  13: 1206821.703 ops/s
Iteration  14: 1197446.849 ops/s
Iteration  15: 1203777.882 ops/s
Iteration  16: 1203048.210 ops/s
Iteration  17: 1209409.728 ops/s
Iteration  18: 1202133.586 ops/s
Iteration  19: 1207051.381 ops/s
Iteration  20: 1201284.143 ops/s
Iteration  21: 1204712.482 ops/s
Iteration  22: 1203638.297 ops/s
Iteration  23: 1197686.259 ops/s
Iteration  24: 1208995.022 ops/s
Iteration  25: 1202487.037 ops/s
Iteration  26: 1204480.405 ops/s
Iteration  27: 1205598.674 ops/s
Iteration  28: 1203895.303 ops/s
Iteration  29: 1210397.313 ops/s
Iteration  30: 1202278.193 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollect":
  1204045.275 ±(99.9%) 2296.957 ops/s [Average]
  (min, avg, max) = (1197446.849, 1204045.275, 1210701.795), stdev = 3437.978
  CI (99.9%): [1201748.318, 1206342.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollect  thrpt   30  1204045.275 ± 2296.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1769522.210 ops/s
# Warmup Iteration   2: 4323289.368 ops/s
# Warmup Iteration   3: 3668297.779 ops/s
# Warmup Iteration   4: 4266988.342 ops/s
# Warmup Iteration   5: 4345337.098 ops/s
# Warmup Iteration   6: 4334548.344 ops/s
# Warmup Iteration   7: 4343867.406 ops/s
# Warmup Iteration   8: 4319958.190 ops/s
# Warmup Iteration   9: 4312569.834 ops/s
# Warmup Iteration  10: 4346692.119 ops/s
# Warmup Iteration  11: 4330698.683 ops/s
# Warmup Iteration  12: 4344454.414 ops/s
# Warmup Iteration  13: 4336464.623 ops/s
# Warmup Iteration  14: 4342022.646 ops/s
# Warmup Iteration  15: 4344193.333 ops/s
# Warmup Iteration  16: 4343024.978 ops/s
# Warmup Iteration  17: 4350077.658 ops/s
# Warmup Iteration  18: 4352040.295 ops/s
# Warmup Iteration  19: 4343857.681 ops/s
# Warmup Iteration  20: 4354743.224 ops/s
# Warmup Iteration  21: 4333642.458 ops/s
# Warmup Iteration  22: 4348539.447 ops/s
# Warmup Iteration  23: 4344942.370 ops/s
# Warmup Iteration  24: 4340397.672 ops/s
# Warmup Iteration  25: 4336227.985 ops/s
# Warmup Iteration  26: 4340888.118 ops/s
# Warmup Iteration  27: 4346923.684 ops/s
# Warmup Iteration  28: 4348239.619 ops/s
# Warmup Iteration  29: 4349119.341 ops/s
# Warmup Iteration  30: 4348408.359 ops/s
Iteration   1: 4348204.665 ops/s
Iteration   2: 4345305.841 ops/s
Iteration   3: 4347038.781 ops/s
Iteration   4: 4345754.523 ops/s
Iteration   5: 4348282.585 ops/s
Iteration   6: 4341545.438 ops/s
Iteration   7: 4353383.607 ops/s
Iteration   8: 4332678.903 ops/s
Iteration   9: 4350058.750 ops/s
Iteration  10: 4339785.245 ops/s
Iteration  11: 4339751.974 ops/s
Iteration  12: 4341405.554 ops/s
Iteration  13: 4344604.049 ops/s
Iteration  14: 4340195.663 ops/s
Iteration  15: 4353006.839 ops/s
Iteration  16: 4333162.302 ops/s
Iteration  17: 4331721.467 ops/s
Iteration  18: 4334510.980 ops/s
Iteration  19: 4348160.950 ops/s
Iteration  20: 4338892.270 ops/s
Iteration  21: 4336196.683 ops/s
Iteration  22: 4329658.475 ops/s
Iteration  23: 4362419.943 ops/s
Iteration  24: 4359274.628 ops/s
Iteration  25: 4357580.358 ops/s
Iteration  26: 4335603.575 ops/s
Iteration  27: 4340215.418 ops/s
Iteration  28: 4348445.524 ops/s
Iteration  29: 4331995.850 ops/s
Iteration  30: 4358291.053 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectBoolean":
  4343904.396 ±(99.9%) 5982.741 ops/s [Average]
  (min, avg, max) = (4329658.475, 4343904.396, 4362419.943), stdev = 8954.685
  CI (99.9%): [4337921.656, 4349887.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4343904.396 ± 5982.741  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 682608.627 ops/s
# Warmup Iteration   2: 1149692.448 ops/s
# Warmup Iteration   3: 1306112.649 ops/s
# Warmup Iteration   4: 1315777.850 ops/s
# Warmup Iteration   5: 1312459.488 ops/s
# Warmup Iteration   6: 1096828.078 ops/s
# Warmup Iteration   7: 1320047.608 ops/s
# Warmup Iteration   8: 1316494.695 ops/s
# Warmup Iteration   9: 1318874.574 ops/s
# Warmup Iteration  10: 1317690.490 ops/s
# Warmup Iteration  11: 1318852.564 ops/s
# Warmup Iteration  12: 1317442.738 ops/s
# Warmup Iteration  13: 1317678.960 ops/s
# Warmup Iteration  14: 1319320.039 ops/s
# Warmup Iteration  15: 1318814.190 ops/s
# Warmup Iteration  16: 1320577.315 ops/s
# Warmup Iteration  17: 1314183.369 ops/s
# Warmup Iteration  18: 1311230.552 ops/s
# Warmup Iteration  19: 1312247.661 ops/s
# Warmup Iteration  20: 1314345.765 ops/s
# Warmup Iteration  21: 1310535.866 ops/s
# Warmup Iteration  22: 1312483.717 ops/s
# Warmup Iteration  23: 1311281.123 ops/s
# Warmup Iteration  24: 1310910.127 ops/s
# Warmup Iteration  25: 1312084.749 ops/s
# Warmup Iteration  26: 1313334.736 ops/s
# Warmup Iteration  27: 1313296.845 ops/s
# Warmup Iteration  28: 1307556.960 ops/s
# Warmup Iteration  29: 1312394.000 ops/s
# Warmup Iteration  30: 1313293.478 ops/s
Iteration   1: 1311153.727 ops/s
Iteration   2: 1310668.748 ops/s
Iteration   3: 1312175.300 ops/s
Iteration   4: 1311794.268 ops/s
Iteration   5: 1317654.957 ops/s
Iteration   6: 1312489.732 ops/s
Iteration   7: 1310998.978 ops/s
Iteration   8: 1310419.371 ops/s
Iteration   9: 1313251.781 ops/s
Iteration  10: 1310979.718 ops/s
Iteration  11: 1314793.067 ops/s
Iteration  12: 1310063.863 ops/s
Iteration  13: 1312741.645 ops/s
Iteration  14: 1310453.659 ops/s
Iteration  15: 1312865.838 ops/s
Iteration  16: 1314995.473 ops/s
Iteration  17: 1311218.075 ops/s
Iteration  18: 1312124.430 ops/s
Iteration  19: 1312096.506 ops/s
Iteration  20: 1313357.647 ops/s
Iteration  21: 1315424.849 ops/s
Iteration  22: 1311417.175 ops/s
Iteration  23: 1310810.393 ops/s
Iteration  24: 1312150.897 ops/s
Iteration  25: 1312743.383 ops/s
Iteration  26: 1311778.454 ops/s
Iteration  27: 1311113.066 ops/s
Iteration  28: 1314116.362 ops/s
Iteration  29: 1312042.304 ops/s
Iteration  30: 1310929.107 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectByte":
  1312294.092 ±(99.9%) 1147.251 ops/s [Average]
  (min, avg, max) = (1310063.863, 1312294.092, 1317654.957), stdev = 1717.151
  CI (99.9%): [1311146.842, 1313441.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1312294.092 ± 1147.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 887478.740 ops/s
# Warmup Iteration   2: 2269632.303 ops/s
# Warmup Iteration   3: 2256580.683 ops/s
# Warmup Iteration   4: 1889853.869 ops/s
# Warmup Iteration   5: 2261962.035 ops/s
# Warmup Iteration   6: 2264040.070 ops/s
# Warmup Iteration   7: 2263950.800 ops/s
# Warmup Iteration   8: 2258018.618 ops/s
# Warmup Iteration   9: 2265484.336 ops/s
# Warmup Iteration  10: 2258105.914 ops/s
# Warmup Iteration  11: 2261946.433 ops/s
# Warmup Iteration  12: 2264830.642 ops/s
# Warmup Iteration  13: 2269064.603 ops/s
# Warmup Iteration  14: 2264913.910 ops/s
# Warmup Iteration  15: 2260995.539 ops/s
# Warmup Iteration  16: 2259348.322 ops/s
# Warmup Iteration  17: 2266260.182 ops/s
# Warmup Iteration  18: 2263101.007 ops/s
# Warmup Iteration  19: 2262742.764 ops/s
# Warmup Iteration  20: 2259362.642 ops/s
# Warmup Iteration  21: 2262194.871 ops/s
# Warmup Iteration  22: 2268594.563 ops/s
# Warmup Iteration  23: 2262876.511 ops/s
# Warmup Iteration  24: 2262858.986 ops/s
# Warmup Iteration  25: 2263599.509 ops/s
# Warmup Iteration  26: 2261814.418 ops/s
# Warmup Iteration  27: 2261377.321 ops/s
# Warmup Iteration  28: 2260624.955 ops/s
# Warmup Iteration  29: 2264210.058 ops/s
# Warmup Iteration  30: 2260739.193 ops/s
Iteration   1: 2260048.990 ops/s
Iteration   2: 2265398.100 ops/s
Iteration   3: 2269127.493 ops/s
Iteration   4: 2265848.930 ops/s
Iteration   5: 2267268.583 ops/s
Iteration   6: 2264787.470 ops/s
Iteration   7: 2266230.494 ops/s
Iteration   8: 2265781.378 ops/s
Iteration   9: 2264577.064 ops/s
Iteration  10: 2258578.734 ops/s
Iteration  11: 2255154.419 ops/s
Iteration  12: 2266063.352 ops/s
Iteration  13: 2267970.538 ops/s
Iteration  14: 2266246.715 ops/s
Iteration  15: 2259873.642 ops/s
Iteration  16: 2266432.169 ops/s
Iteration  17: 2263118.657 ops/s
Iteration  18: 2266424.954 ops/s
Iteration  19: 2263142.123 ops/s
Iteration  20: 2256652.062 ops/s
Iteration  21: 2254056.195 ops/s
Iteration  22: 2268371.478 ops/s
Iteration  23: 2268593.051 ops/s
Iteration  24: 2262463.883 ops/s
Iteration  25: 2261114.334 ops/s
Iteration  26: 2268816.010 ops/s
Iteration  27: 2255836.553 ops/s
Iteration  28: 2262324.400 ops/s
Iteration  29: 2251680.218 ops/s
Iteration  30: 2259625.201 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectChar":
  2263053.573 ±(99.9%) 3212.677 ops/s [Average]
  (min, avg, max) = (2251680.218, 2263053.573, 2269127.493), stdev = 4808.584
  CI (99.9%): [2259840.896, 2266266.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2263053.573 ± 3212.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 467522.862 ops/s
# Warmup Iteration   2: 1182326.060 ops/s
# Warmup Iteration   3: 1184815.243 ops/s
# Warmup Iteration   4: 990781.040 ops/s
# Warmup Iteration   5: 1190160.940 ops/s
# Warmup Iteration   6: 1191855.518 ops/s
# Warmup Iteration   7: 1190576.582 ops/s
# Warmup Iteration   8: 1189946.338 ops/s
# Warmup Iteration   9: 1188576.977 ops/s
# Warmup Iteration  10: 1187534.796 ops/s
# Warmup Iteration  11: 1189486.780 ops/s
# Warmup Iteration  12: 1188663.690 ops/s
# Warmup Iteration  13: 1188029.990 ops/s
# Warmup Iteration  14: 1190806.249 ops/s
# Warmup Iteration  15: 1189656.113 ops/s
# Warmup Iteration  16: 1192344.342 ops/s
# Warmup Iteration  17: 1189122.381 ops/s
# Warmup Iteration  18: 1189758.172 ops/s
# Warmup Iteration  19: 1192037.858 ops/s
# Warmup Iteration  20: 1191396.648 ops/s
# Warmup Iteration  21: 1192769.526 ops/s
# Warmup Iteration  22: 1191642.655 ops/s
# Warmup Iteration  23: 1184747.662 ops/s
# Warmup Iteration  24: 1188419.631 ops/s
# Warmup Iteration  25: 1189075.832 ops/s
# Warmup Iteration  26: 1189776.921 ops/s
# Warmup Iteration  27: 1189368.220 ops/s
# Warmup Iteration  28: 1188703.589 ops/s
# Warmup Iteration  29: 1192484.744 ops/s
# Warmup Iteration  30: 1186486.600 ops/s
Iteration   1: 1193767.678 ops/s
Iteration   2: 1192322.215 ops/s
Iteration   3: 1189660.945 ops/s
Iteration   4: 1183342.495 ops/s
Iteration   5: 1188533.561 ops/s
Iteration   6: 1187918.047 ops/s
Iteration   7: 1192035.650 ops/s
Iteration   8: 1193162.219 ops/s
Iteration   9: 1184283.572 ops/s
Iteration  10: 1191406.877 ops/s
Iteration  11: 1190461.637 ops/s
Iteration  12: 1194415.659 ops/s
Iteration  13: 1192311.939 ops/s
Iteration  14: 1192559.115 ops/s
Iteration  15: 1189853.437 ops/s
Iteration  16: 1191987.911 ops/s
Iteration  17: 1192056.223 ops/s
Iteration  18: 1194889.577 ops/s
Iteration  19: 1190867.802 ops/s
Iteration  20: 1191972.501 ops/s
Iteration  21: 1190686.108 ops/s
Iteration  22: 1190038.239 ops/s
Iteration  23: 1189317.553 ops/s
Iteration  24: 1189669.289 ops/s
Iteration  25: 1191912.868 ops/s
Iteration  26: 1192065.327 ops/s
Iteration  27: 1189403.834 ops/s
Iteration  28: 1190269.815 ops/s
Iteration  29: 1191944.564 ops/s
Iteration  30: 1190119.337 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectDouble":
  1190774.533 ±(99.9%) 1677.720 ops/s [Average]
  (min, avg, max) = (1183342.495, 1190774.533, 1194889.577), stdev = 2511.133
  CI (99.9%): [1189096.813, 1192452.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1190774.533 ± 1677.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707007.052 ops/s
# Warmup Iteration   2: 1672789.898 ops/s
# Warmup Iteration   3: 1722611.886 ops/s
# Warmup Iteration   4: 1438191.571 ops/s
# Warmup Iteration   5: 1727040.219 ops/s
# Warmup Iteration   6: 1722537.997 ops/s
# Warmup Iteration   7: 1725172.953 ops/s
# Warmup Iteration   8: 1724862.042 ops/s
# Warmup Iteration   9: 1719797.678 ops/s
# Warmup Iteration  10: 1724988.083 ops/s
# Warmup Iteration  11: 1721299.846 ops/s
# Warmup Iteration  12: 1727531.131 ops/s
# Warmup Iteration  13: 1722849.022 ops/s
# Warmup Iteration  14: 1725743.012 ops/s
# Warmup Iteration  15: 1724616.090 ops/s
# Warmup Iteration  16: 1722369.656 ops/s
# Warmup Iteration  17: 1722877.233 ops/s
# Warmup Iteration  18: 1725270.717 ops/s
# Warmup Iteration  19: 1725353.894 ops/s
# Warmup Iteration  20: 1722403.135 ops/s
# Warmup Iteration  21: 1723268.626 ops/s
# Warmup Iteration  22: 1722553.728 ops/s
# Warmup Iteration  23: 1722597.267 ops/s
# Warmup Iteration  24: 1722694.296 ops/s
# Warmup Iteration  25: 1721860.915 ops/s
# Warmup Iteration  26: 1724704.199 ops/s
# Warmup Iteration  27: 1720492.965 ops/s
# Warmup Iteration  28: 1723762.415 ops/s
# Warmup Iteration  29: 1723233.406 ops/s
# Warmup Iteration  30: 1723047.525 ops/s
Iteration   1: 1724490.405 ops/s
Iteration   2: 1721214.644 ops/s
Iteration   3: 1721492.454 ops/s
Iteration   4: 1727875.648 ops/s
Iteration   5: 1725210.846 ops/s
Iteration   6: 1722758.478 ops/s
Iteration   7: 1719712.642 ops/s
Iteration   8: 1722217.673 ops/s
Iteration   9: 1726126.750 ops/s
Iteration  10: 1724317.347 ops/s
Iteration  11: 1722166.135 ops/s
Iteration  12: 1721011.513 ops/s
Iteration  13: 1720026.879 ops/s
Iteration  14: 1730339.528 ops/s
Iteration  15: 1723850.911 ops/s
Iteration  16: 1725752.378 ops/s
Iteration  17: 1726344.296 ops/s
Iteration  18: 1726752.190 ops/s
Iteration  19: 1725042.762 ops/s
Iteration  20: 1725850.075 ops/s
Iteration  21: 1723107.241 ops/s
Iteration  22: 1726244.736 ops/s
Iteration  23: 1717242.345 ops/s
Iteration  24: 1726623.181 ops/s
Iteration  25: 1727139.392 ops/s
Iteration  26: 1725408.676 ops/s
Iteration  27: 1719788.455 ops/s
Iteration  28: 1719776.069 ops/s
Iteration  29: 1720115.091 ops/s
Iteration  30: 1723882.798 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectFloat":
  1723729.385 ±(99.9%) 2024.018 ops/s [Average]
  (min, avg, max) = (1717242.345, 1723729.385, 1730339.528), stdev = 3029.455
  CI (99.9%): [1721705.366, 1725753.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1723729.385 ± 2024.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 889902.130 ops/s
# Warmup Iteration   2: 2264525.252 ops/s
# Warmup Iteration   3: 2180886.626 ops/s
# Warmup Iteration   4: 2008591.324 ops/s
# Warmup Iteration   5: 2287268.822 ops/s
# Warmup Iteration   6: 2278122.696 ops/s
# Warmup Iteration   7: 2286189.034 ops/s
# Warmup Iteration   8: 2281295.899 ops/s
# Warmup Iteration   9: 2287403.088 ops/s
# Warmup Iteration  10: 2286833.003 ops/s
# Warmup Iteration  11: 2285252.123 ops/s
# Warmup Iteration  12: 2286693.594 ops/s
# Warmup Iteration  13: 2288415.668 ops/s
# Warmup Iteration  14: 2295042.163 ops/s
# Warmup Iteration  15: 2291050.191 ops/s
# Warmup Iteration  16: 2288335.517 ops/s
# Warmup Iteration  17: 2279030.410 ops/s
# Warmup Iteration  18: 2285398.706 ops/s
# Warmup Iteration  19: 2283109.288 ops/s
# Warmup Iteration  20: 2281572.561 ops/s
# Warmup Iteration  21: 2284239.501 ops/s
# Warmup Iteration  22: 2280091.589 ops/s
# Warmup Iteration  23: 2284813.277 ops/s
# Warmup Iteration  24: 2280873.581 ops/s
# Warmup Iteration  25: 2291674.292 ops/s
# Warmup Iteration  26: 2283053.825 ops/s
# Warmup Iteration  27: 2290040.583 ops/s
# Warmup Iteration  28: 2286198.106 ops/s
# Warmup Iteration  29: 2284233.017 ops/s
# Warmup Iteration  30: 2284314.951 ops/s
Iteration   1: 2287039.137 ops/s
Iteration   2: 2281540.412 ops/s
Iteration   3: 2289391.404 ops/s
Iteration   4: 2288727.461 ops/s
Iteration   5: 2288476.313 ops/s
Iteration   6: 2280272.074 ops/s
Iteration   7: 2282938.752 ops/s
Iteration   8: 2292339.621 ops/s
Iteration   9: 2288026.827 ops/s
Iteration  10: 2287865.496 ops/s
Iteration  11: 2291470.189 ops/s
Iteration  12: 2285279.672 ops/s
Iteration  13: 2278477.077 ops/s
Iteration  14: 2290325.742 ops/s
Iteration  15: 2287226.391 ops/s
Iteration  16: 2286870.530 ops/s
Iteration  17: 2278525.843 ops/s
Iteration  18: 2286108.934 ops/s
Iteration  19: 2276865.279 ops/s
Iteration  20: 2289286.623 ops/s
Iteration  21: 2287398.447 ops/s
Iteration  22: 2280259.019 ops/s
Iteration  23: 2287982.427 ops/s
Iteration  24: 2287530.817 ops/s
Iteration  25: 2285375.219 ops/s
Iteration  26: 2281046.219 ops/s
Iteration  27: 2284931.244 ops/s
Iteration  28: 2286984.849 ops/s
Iteration  29: 2291619.209 ops/s
Iteration  30: 2281127.090 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectInt":
  2285710.277 ±(99.9%) 2815.938 ops/s [Average]
  (min, avg, max) = (2276865.279, 2285710.277, 2292339.621), stdev = 4214.764
  CI (99.9%): [2282894.339, 2288526.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2285710.277 ± 2815.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790142.287 ops/s
# Warmup Iteration   2: 1982420.721 ops/s
# Warmup Iteration   3: 1668701.853 ops/s
# Warmup Iteration   4: 2009884.098 ops/s
# Warmup Iteration   5: 2008536.564 ops/s
# Warmup Iteration   6: 2008047.874 ops/s
# Warmup Iteration   7: 2006691.882 ops/s
# Warmup Iteration   8: 2005750.199 ops/s
# Warmup Iteration   9: 2013417.476 ops/s
# Warmup Iteration  10: 2005024.479 ops/s
# Warmup Iteration  11: 2005735.464 ops/s
# Warmup Iteration  12: 2012724.745 ops/s
# Warmup Iteration  13: 2009911.947 ops/s
# Warmup Iteration  14: 2004135.715 ops/s
# Warmup Iteration  15: 2007150.074 ops/s
# Warmup Iteration  16: 2005695.191 ops/s
# Warmup Iteration  17: 2004987.751 ops/s
# Warmup Iteration  18: 2008794.163 ops/s
# Warmup Iteration  19: 2003232.100 ops/s
# Warmup Iteration  20: 2006832.514 ops/s
# Warmup Iteration  21: 2009914.875 ops/s
# Warmup Iteration  22: 2008407.170 ops/s
# Warmup Iteration  23: 2004262.195 ops/s
# Warmup Iteration  24: 2005254.998 ops/s
# Warmup Iteration  25: 2010374.890 ops/s
# Warmup Iteration  26: 2002748.855 ops/s
# Warmup Iteration  27: 2007345.967 ops/s
# Warmup Iteration  28: 2008379.365 ops/s
# Warmup Iteration  29: 2011037.520 ops/s
# Warmup Iteration  30: 2010922.980 ops/s
Iteration   1: 2003775.666 ops/s
Iteration   2: 2015151.731 ops/s
Iteration   3: 2000513.432 ops/s
Iteration   4: 2008601.630 ops/s
Iteration   5: 2011197.295 ops/s
Iteration   6: 2007301.408 ops/s
Iteration   7: 2008962.678 ops/s
Iteration   8: 2011867.734 ops/s
Iteration   9: 2010062.904 ops/s
Iteration  10: 2013604.421 ops/s
Iteration  11: 2006286.253 ops/s
Iteration  12: 2010256.321 ops/s
Iteration  13: 2015713.147 ops/s
Iteration  14: 2003779.090 ops/s
Iteration  15: 2001521.678 ops/s
Iteration  16: 1987436.811 ops/s
Iteration  17: 2014717.623 ops/s
Iteration  18: 2006057.534 ops/s
Iteration  19: 2010980.946 ops/s
Iteration  20: 2005756.229 ops/s
Iteration  21: 2008776.586 ops/s
Iteration  22: 2003874.578 ops/s
Iteration  23: 2012159.225 ops/s
Iteration  24: 2010852.019 ops/s
Iteration  25: 2010377.193 ops/s
Iteration  26: 2005875.694 ops/s
Iteration  27: 2009939.875 ops/s
Iteration  28: 2005289.034 ops/s
Iteration  29: 2012178.851 ops/s
Iteration  30: 2007692.847 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectLong":
  2008018.681 ±(99.9%) 3685.628 ops/s [Average]
  (min, avg, max) = (1987436.811, 2008018.681, 2015713.147), stdev = 5516.475
  CI (99.9%): [2004333.053, 2011704.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectLong  thrpt   30  2008018.681 ± 3685.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 907416.437 ops/s
# Warmup Iteration   2: 2326287.045 ops/s
# Warmup Iteration   3: 2337924.582 ops/s
# Warmup Iteration   4: 1955865.743 ops/s
# Warmup Iteration   5: 2342365.479 ops/s
# Warmup Iteration   6: 2346265.389 ops/s
# Warmup Iteration   7: 2351871.417 ops/s
# Warmup Iteration   8: 2343897.365 ops/s
# Warmup Iteration   9: 2342339.201 ops/s
# Warmup Iteration  10: 2345846.805 ops/s
# Warmup Iteration  11: 2343990.377 ops/s
# Warmup Iteration  12: 2349574.531 ops/s
# Warmup Iteration  13: 2346326.341 ops/s
# Warmup Iteration  14: 2346159.027 ops/s
# Warmup Iteration  15: 2341557.901 ops/s
# Warmup Iteration  16: 2346554.768 ops/s
# Warmup Iteration  17: 2341955.559 ops/s
# Warmup Iteration  18: 2345920.388 ops/s
# Warmup Iteration  19: 2346605.521 ops/s
# Warmup Iteration  20: 2343702.583 ops/s
# Warmup Iteration  21: 2349356.071 ops/s
# Warmup Iteration  22: 2344506.615 ops/s
# Warmup Iteration  23: 2344595.173 ops/s
# Warmup Iteration  24: 2343006.665 ops/s
# Warmup Iteration  25: 2341636.207 ops/s
# Warmup Iteration  26: 2339976.173 ops/s
# Warmup Iteration  27: 2345628.594 ops/s
# Warmup Iteration  28: 2344624.304 ops/s
# Warmup Iteration  29: 2347585.328 ops/s
# Warmup Iteration  30: 2346402.219 ops/s
Iteration   1: 2348105.765 ops/s
Iteration   2: 2349160.183 ops/s
Iteration   3: 2342412.760 ops/s
Iteration   4: 2348016.228 ops/s
Iteration   5: 2342358.439 ops/s
Iteration   6: 2338925.125 ops/s
Iteration   7: 2348282.204 ops/s
Iteration   8: 2340055.751 ops/s
Iteration   9: 2350092.009 ops/s
Iteration  10: 2342179.928 ops/s
Iteration  11: 2347234.752 ops/s
Iteration  12: 2349542.936 ops/s
Iteration  13: 2343747.035 ops/s
Iteration  14: 2351792.599 ops/s
Iteration  15: 2341703.225 ops/s
Iteration  16: 2350112.531 ops/s
Iteration  17: 2343456.784 ops/s
Iteration  18: 2344063.322 ops/s
Iteration  19: 2346412.114 ops/s
Iteration  20: 2350471.217 ops/s
Iteration  21: 2341733.693 ops/s
Iteration  22: 2348308.490 ops/s
Iteration  23: 2348048.799 ops/s
Iteration  24: 2343593.135 ops/s
Iteration  25: 2347576.277 ops/s
Iteration  26: 2344076.020 ops/s
Iteration  27: 2345150.746 ops/s
Iteration  28: 2349688.432 ops/s
Iteration  29: 2344033.162 ops/s
Iteration  30: 2341658.519 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectShort":
  2345733.073 ±(99.9%) 2352.748 ops/s [Average]
  (min, avg, max) = (2338925.125, 2345733.073, 2351792.599), stdev = 3521.483
  CI (99.9%): [2343380.324, 2348085.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2345733.073 ± 2352.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 220178.896 ops/s
# Warmup Iteration   2: 388951.096 ops/s
# Warmup Iteration   3: 453401.061 ops/s
# Warmup Iteration   4: 456818.162 ops/s
# Warmup Iteration   5: 453950.050 ops/s
# Warmup Iteration   6: 376658.646 ops/s
# Warmup Iteration   7: 456930.779 ops/s
# Warmup Iteration   8: 457421.366 ops/s
# Warmup Iteration   9: 457459.209 ops/s
# Warmup Iteration  10: 456776.329 ops/s
# Warmup Iteration  11: 456088.189 ops/s
# Warmup Iteration  12: 457068.488 ops/s
# Warmup Iteration  13: 457445.495 ops/s
# Warmup Iteration  14: 456927.779 ops/s
# Warmup Iteration  15: 456790.311 ops/s
# Warmup Iteration  16: 458017.399 ops/s
# Warmup Iteration  17: 460119.119 ops/s
# Warmup Iteration  18: 461321.416 ops/s
# Warmup Iteration  19: 459992.907 ops/s
# Warmup Iteration  20: 459970.381 ops/s
# Warmup Iteration  21: 460323.427 ops/s
# Warmup Iteration  22: 460739.850 ops/s
# Warmup Iteration  23: 460133.017 ops/s
# Warmup Iteration  24: 460675.797 ops/s
# Warmup Iteration  25: 459701.483 ops/s
# Warmup Iteration  26: 460094.873 ops/s
# Warmup Iteration  27: 460283.366 ops/s
# Warmup Iteration  28: 460271.230 ops/s
# Warmup Iteration  29: 461461.037 ops/s
# Warmup Iteration  30: 461216.725 ops/s
Iteration   1: 461025.599 ops/s
Iteration   2: 459382.759 ops/s
Iteration   3: 460635.334 ops/s
Iteration   4: 460577.544 ops/s
Iteration   5: 460314.229 ops/s
Iteration   6: 460712.858 ops/s
Iteration   7: 461762.278 ops/s
Iteration   8: 459283.379 ops/s
Iteration   9: 458557.520 ops/s
Iteration  10: 461632.741 ops/s
Iteration  11: 459693.198 ops/s
Iteration  12: 461690.996 ops/s
Iteration  13: 460454.593 ops/s
Iteration  14: 459602.414 ops/s
Iteration  15: 460026.248 ops/s
Iteration  16: 460176.949 ops/s
Iteration  17: 461387.779 ops/s
Iteration  18: 460322.925 ops/s
Iteration  19: 459708.183 ops/s
Iteration  20: 460124.853 ops/s
Iteration  21: 459496.119 ops/s
Iteration  22: 460166.803 ops/s
Iteration  23: 461170.907 ops/s
Iteration  24: 460529.681 ops/s
Iteration  25: 459482.657 ops/s
Iteration  26: 459718.197 ops/s
Iteration  27: 460806.830 ops/s
Iteration  28: 458979.537 ops/s
Iteration  29: 460750.472 ops/s
Iteration  30: 460093.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_flatCollectWith":
  460275.573 ±(99.9%) 539.227 ops/s [Average]
  (min, avg, max) = (458557.520, 460275.573, 461762.278), stdev = 807.090
  CI (99.9%): [459736.346, 460814.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_flatCollectWith  thrpt   30  460275.573 ± 539.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1274170.484 ops/s
# Warmup Iteration   2: 2982948.630 ops/s
# Warmup Iteration   3: 3011507.777 ops/s
# Warmup Iteration   4: 2498892.934 ops/s
# Warmup Iteration   5: 3000871.742 ops/s
# Warmup Iteration   6: 2997807.396 ops/s
# Warmup Iteration   7: 3009037.317 ops/s
# Warmup Iteration   8: 3006074.305 ops/s
# Warmup Iteration   9: 3007010.374 ops/s
# Warmup Iteration  10: 3010928.560 ops/s
# Warmup Iteration  11: 3003780.744 ops/s
# Warmup Iteration  12: 3011892.922 ops/s
# Warmup Iteration  13: 3009547.008 ops/s
# Warmup Iteration  14: 3009876.731 ops/s
# Warmup Iteration  15: 2999659.945 ops/s
# Warmup Iteration  16: 3008509.318 ops/s
# Warmup Iteration  17: 3010824.526 ops/s
# Warmup Iteration  18: 3009621.381 ops/s
# Warmup Iteration  19: 3003601.461 ops/s
# Warmup Iteration  20: 3006219.527 ops/s
# Warmup Iteration  21: 3003736.862 ops/s
# Warmup Iteration  22: 3009143.757 ops/s
# Warmup Iteration  23: 3012048.601 ops/s
# Warmup Iteration  24: 3011747.942 ops/s
# Warmup Iteration  25: 3006385.307 ops/s
# Warmup Iteration  26: 3012661.463 ops/s
# Warmup Iteration  27: 3006705.807 ops/s
# Warmup Iteration  28: 3006609.494 ops/s
# Warmup Iteration  29: 3002575.263 ops/s
# Warmup Iteration  30: 3005321.452 ops/s
Iteration   1: 3008091.178 ops/s
Iteration   2: 3013605.966 ops/s
Iteration   3: 3010299.654 ops/s
Iteration   4: 3007841.241 ops/s
Iteration   5: 3018066.324 ops/s
Iteration   6: 3012076.227 ops/s
Iteration   7: 3008376.011 ops/s
Iteration   8: 3003073.925 ops/s
Iteration   9: 3006130.496 ops/s
Iteration  10: 3005769.094 ops/s
Iteration  11: 3005984.005 ops/s
Iteration  12: 3005078.769 ops/s
Iteration  13: 3010274.181 ops/s
Iteration  14: 2998784.656 ops/s
Iteration  15: 3010379.951 ops/s
Iteration  16: 3017526.693 ops/s
Iteration  17: 3008871.503 ops/s
Iteration  18: 3004623.142 ops/s
Iteration  19: 3017992.535 ops/s
Iteration  20: 3015039.218 ops/s
Iteration  21: 3016156.431 ops/s
Iteration  22: 3011355.624 ops/s
Iteration  23: 3000425.733 ops/s
Iteration  24: 3007689.892 ops/s
Iteration  25: 3001814.753 ops/s
Iteration  26: 3004069.091 ops/s
Iteration  27: 3014113.426 ops/s
Iteration  28: 3001434.335 ops/s
Iteration  29: 3008467.958 ops/s
Iteration  30: 3002001.383 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEach":
  3008513.780 ±(99.9%) 3608.537 ops/s [Average]
  (min, avg, max) = (2998784.656, 3008513.780, 3018066.324), stdev = 5401.089
  CI (99.9%): [3004905.243, 3012122.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEach  thrpt   30  3008513.780 ± 3608.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240651.695 ops/s
# Warmup Iteration   2: 257607.223 ops/s
# Warmup Iteration   3: 337788.950 ops/s
# Warmup Iteration   4: 337430.366 ops/s
# Warmup Iteration   5: 334994.062 ops/s
# Warmup Iteration   6: 335860.060 ops/s
# Warmup Iteration   7: 336432.826 ops/s
# Warmup Iteration   8: 337400.470 ops/s
# Warmup Iteration   9: 336486.127 ops/s
# Warmup Iteration  10: 338666.817 ops/s
# Warmup Iteration  11: 284964.778 ops/s
# Warmup Iteration  12: 338214.622 ops/s
# Warmup Iteration  13: 336936.743 ops/s
# Warmup Iteration  14: 338168.115 ops/s
# Warmup Iteration  15: 337738.390 ops/s
# Warmup Iteration  16: 337719.098 ops/s
# Warmup Iteration  17: 351486.618 ops/s
# Warmup Iteration  18: 350322.540 ops/s
# Warmup Iteration  19: 351932.159 ops/s
# Warmup Iteration  20: 351615.181 ops/s
# Warmup Iteration  21: 350871.166 ops/s
# Warmup Iteration  22: 351396.476 ops/s
# Warmup Iteration  23: 351506.713 ops/s
# Warmup Iteration  24: 350183.125 ops/s
# Warmup Iteration  25: 350501.549 ops/s
# Warmup Iteration  26: 350980.852 ops/s
# Warmup Iteration  27: 351463.224 ops/s
# Warmup Iteration  28: 350952.318 ops/s
# Warmup Iteration  29: 351425.083 ops/s
# Warmup Iteration  30: 352218.193 ops/s
Iteration   1: 351462.263 ops/s
Iteration   2: 350110.086 ops/s
Iteration   3: 351100.968 ops/s
Iteration   4: 350117.657 ops/s
Iteration   5: 351501.061 ops/s
Iteration   6: 351698.656 ops/s
Iteration   7: 351903.201 ops/s
Iteration   8: 351414.888 ops/s
Iteration   9: 350293.481 ops/s
Iteration  10: 351351.508 ops/s
Iteration  11: 349831.196 ops/s
Iteration  12: 351545.141 ops/s
Iteration  13: 350306.730 ops/s
Iteration  14: 350831.646 ops/s
Iteration  15: 351368.061 ops/s
Iteration  16: 351444.905 ops/s
Iteration  17: 349944.768 ops/s
Iteration  18: 350879.929 ops/s
Iteration  19: 351118.234 ops/s
Iteration  20: 351237.294 ops/s
Iteration  21: 352097.471 ops/s
Iteration  22: 349642.236 ops/s
Iteration  23: 349292.262 ops/s
Iteration  24: 352908.406 ops/s
Iteration  25: 350047.980 ops/s
Iteration  26: 351321.842 ops/s
Iteration  27: 351010.840 ops/s
Iteration  28: 350685.051 ops/s
Iteration  29: 351238.000 ops/s
Iteration  30: 351718.240 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromTo":
  350980.800 ±(99.9%) 542.566 ops/s [Average]
  (min, avg, max) = (349292.262, 350980.800, 352908.406), stdev = 812.087
  CI (99.9%): [350438.234, 351523.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachFromTo  thrpt   30  350980.800 ± 542.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4933913.201 ops/s
# Warmup Iteration   2: 14354979.764 ops/s
# Warmup Iteration   3: 12140550.657 ops/s
# Warmup Iteration   4: 14556350.759 ops/s
# Warmup Iteration   5: 14532823.912 ops/s
# Warmup Iteration   6: 14546332.551 ops/s
# Warmup Iteration   7: 14569020.819 ops/s
# Warmup Iteration   8: 14518872.944 ops/s
# Warmup Iteration   9: 14499882.641 ops/s
# Warmup Iteration  10: 14556960.076 ops/s
# Warmup Iteration  11: 14542994.160 ops/s
# Warmup Iteration  12: 14550087.375 ops/s
# Warmup Iteration  13: 14515364.478 ops/s
# Warmup Iteration  14: 14561807.528 ops/s
# Warmup Iteration  15: 14554892.316 ops/s
# Warmup Iteration  16: 14533418.892 ops/s
# Warmup Iteration  17: 14552130.904 ops/s
# Warmup Iteration  18: 14577646.152 ops/s
# Warmup Iteration  19: 14570186.006 ops/s
# Warmup Iteration  20: 14559940.750 ops/s
# Warmup Iteration  21: 14575543.644 ops/s
# Warmup Iteration  22: 14589562.870 ops/s
# Warmup Iteration  23: 14566704.317 ops/s
# Warmup Iteration  24: 14576814.207 ops/s
# Warmup Iteration  25: 14587300.882 ops/s
# Warmup Iteration  26: 14517132.631 ops/s
# Warmup Iteration  27: 14536075.652 ops/s
# Warmup Iteration  28: 14557402.281 ops/s
# Warmup Iteration  29: 14558684.198 ops/s
# Warmup Iteration  30: 14538890.534 ops/s
Iteration   1: 14591616.907 ops/s
Iteration   2: 14556820.605 ops/s
Iteration   3: 14562255.991 ops/s
Iteration   4: 14578795.243 ops/s
Iteration   5: 14570710.428 ops/s
Iteration   6: 14582834.925 ops/s
Iteration   7: 14526831.667 ops/s
Iteration   8: 14557557.349 ops/s
Iteration   9: 14620988.746 ops/s
Iteration  10: 14571423.195 ops/s
Iteration  11: 14476555.207 ops/s
Iteration  12: 14588023.022 ops/s
Iteration  13: 14579153.599 ops/s
Iteration  14: 14481911.638 ops/s
Iteration  15: 14604490.583 ops/s
Iteration  16: 14554697.000 ops/s
Iteration  17: 14572984.244 ops/s
Iteration  18: 14478992.118 ops/s
Iteration  19: 14579482.769 ops/s
Iteration  20: 14517057.839 ops/s
Iteration  21: 14584274.109 ops/s
Iteration  22: 14518308.125 ops/s
Iteration  23: 14555849.005 ops/s
Iteration  24: 14581460.442 ops/s
Iteration  25: 14629750.456 ops/s
Iteration  26: 14510489.471 ops/s
Iteration  27: 14586967.394 ops/s
Iteration  28: 14562311.238 ops/s
Iteration  29: 14578139.179 ops/s
Iteration  30: 14557954.891 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachFromToInReverse":
  14560622.913 ±(99.9%) 25819.698 ops/s [Average]
  (min, avg, max) = (14476555.207, 14560622.913, 14629750.456), stdev = 38645.712
  CI (99.9%): [14534803.215, 14586442.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  14560622.913 ± 25819.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2411189.062 ops/s
# Warmup Iteration   2: 6026912.598 ops/s
# Warmup Iteration   3: 5528468.406 ops/s
# Warmup Iteration   4: 5528276.552 ops/s
# Warmup Iteration   5: 6055189.074 ops/s
# Warmup Iteration   6: 6054591.100 ops/s
# Warmup Iteration   7: 6047377.421 ops/s
# Warmup Iteration   8: 6049039.861 ops/s
# Warmup Iteration   9: 6052202.244 ops/s
# Warmup Iteration  10: 6061359.982 ops/s
# Warmup Iteration  11: 6060370.101 ops/s
# Warmup Iteration  12: 6037807.780 ops/s
# Warmup Iteration  13: 6049287.022 ops/s
# Warmup Iteration  14: 6046925.370 ops/s
# Warmup Iteration  15: 6057244.989 ops/s
# Warmup Iteration  16: 6053573.075 ops/s
# Warmup Iteration  17: 6034641.393 ops/s
# Warmup Iteration  18: 6029026.213 ops/s
# Warmup Iteration  19: 6043843.705 ops/s
# Warmup Iteration  20: 6049030.126 ops/s
# Warmup Iteration  21: 6046297.905 ops/s
# Warmup Iteration  22: 6042637.461 ops/s
# Warmup Iteration  23: 6048837.622 ops/s
# Warmup Iteration  24: 6036113.597 ops/s
# Warmup Iteration  25: 6048413.226 ops/s
# Warmup Iteration  26: 6043021.363 ops/s
# Warmup Iteration  27: 6054244.869 ops/s
# Warmup Iteration  28: 6047109.441 ops/s
# Warmup Iteration  29: 6050658.207 ops/s
# Warmup Iteration  30: 6056288.151 ops/s
Iteration   1: 6053727.014 ops/s
Iteration   2: 6035427.769 ops/s
Iteration   3: 6048308.985 ops/s
Iteration   4: 6062737.266 ops/s
Iteration   5: 6036450.951 ops/s
Iteration   6: 6041516.736 ops/s
Iteration   7: 6062398.642 ops/s
Iteration   8: 6046139.532 ops/s
Iteration   9: 6049553.726 ops/s
Iteration  10: 6055779.326 ops/s
Iteration  11: 6056620.595 ops/s
Iteration  12: 6039858.394 ops/s
Iteration  13: 6056372.452 ops/s
Iteration  14: 6052356.787 ops/s
Iteration  15: 6018916.690 ops/s
Iteration  16: 6037090.417 ops/s
Iteration  17: 6029483.547 ops/s
Iteration  18: 6036871.310 ops/s
Iteration  19: 6045879.681 ops/s
Iteration  20: 6048604.226 ops/s
Iteration  21: 6050572.799 ops/s
Iteration  22: 6065489.709 ops/s
Iteration  23: 6052605.133 ops/s
Iteration  24: 6054925.978 ops/s
Iteration  25: 6041961.425 ops/s
Iteration  26: 6067659.866 ops/s
Iteration  27: 6057573.145 ops/s
Iteration  28: 6036456.148 ops/s
Iteration  29: 6032307.732 ops/s
Iteration  30: 6061857.036 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBoth":
  6047850.101 ±(99.9%) 7837.296 ops/s [Average]
  (min, avg, max) = (6018916.690, 6047850.101, 6067659.866), stdev = 11730.496
  CI (99.9%): [6040012.805, 6055687.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachInBoth  thrpt   30  6047850.101 ± 7837.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 594521.229 ops/s
# Warmup Iteration   2: 699816.257 ops/s
# Warmup Iteration   3: 912963.162 ops/s
# Warmup Iteration   4: 914778.421 ops/s
# Warmup Iteration   5: 907261.731 ops/s
# Warmup Iteration   6: 914788.890 ops/s
# Warmup Iteration   7: 913058.159 ops/s
# Warmup Iteration   8: 912414.691 ops/s
# Warmup Iteration   9: 902396.703 ops/s
# Warmup Iteration  10: 773025.072 ops/s
# Warmup Iteration  11: 913904.616 ops/s
# Warmup Iteration  12: 909342.484 ops/s
# Warmup Iteration  13: 916950.247 ops/s
# Warmup Iteration  14: 914861.012 ops/s
# Warmup Iteration  15: 914630.072 ops/s
# Warmup Iteration  16: 916743.689 ops/s
# Warmup Iteration  17: 968322.427 ops/s
# Warmup Iteration  18: 964581.141 ops/s
# Warmup Iteration  19: 961416.995 ops/s
# Warmup Iteration  20: 963329.550 ops/s
# Warmup Iteration  21: 961256.475 ops/s
# Warmup Iteration  22: 962000.513 ops/s
# Warmup Iteration  23: 963341.920 ops/s
# Warmup Iteration  24: 962473.244 ops/s
# Warmup Iteration  25: 965135.083 ops/s
# Warmup Iteration  26: 963790.349 ops/s
# Warmup Iteration  27: 965059.247 ops/s
# Warmup Iteration  28: 967809.822 ops/s
# Warmup Iteration  29: 966400.217 ops/s
# Warmup Iteration  30: 960040.237 ops/s
Iteration   1: 964707.208 ops/s
Iteration   2: 968276.853 ops/s
Iteration   3: 962100.337 ops/s
Iteration   4: 963951.807 ops/s
Iteration   5: 967757.408 ops/s
Iteration   6: 963794.900 ops/s
Iteration   7: 967655.108 ops/s
Iteration   8: 966461.929 ops/s
Iteration   9: 965352.345 ops/s
Iteration  10: 967472.638 ops/s
Iteration  11: 966848.415 ops/s
Iteration  12: 968629.775 ops/s
Iteration  13: 961616.915 ops/s
Iteration  14: 964758.887 ops/s
Iteration  15: 964431.992 ops/s
Iteration  16: 966092.551 ops/s
Iteration  17: 966047.405 ops/s
Iteration  18: 964876.163 ops/s
Iteration  19: 964429.360 ops/s
Iteration  20: 964876.171 ops/s
Iteration  21: 960217.900 ops/s
Iteration  22: 965634.394 ops/s
Iteration  23: 966116.127 ops/s
Iteration  24: 962989.176 ops/s
Iteration  25: 965577.262 ops/s
Iteration  26: 963350.486 ops/s
Iteration  27: 964988.319 ops/s
Iteration  28: 966688.892 ops/s
Iteration  29: 966949.322 ops/s
Iteration  30: 965433.241 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  965269.443 ±(99.9%) 1313.876 ops/s [Average]
  (min, avg, max) = (960217.900, 965269.443, 968629.775), stdev = 1966.548
  CI (99.9%): [963955.567, 966583.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  965269.443 ± 1313.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717037.082 ops/s
# Warmup Iteration   2: 756436.129 ops/s
# Warmup Iteration   3: 988867.653 ops/s
# Warmup Iteration   4: 990082.444 ops/s
# Warmup Iteration   5: 990590.503 ops/s
# Warmup Iteration   6: 982372.174 ops/s
# Warmup Iteration   7: 987707.038 ops/s
# Warmup Iteration   8: 992545.562 ops/s
# Warmup Iteration   9: 991667.912 ops/s
# Warmup Iteration  10: 991226.313 ops/s
# Warmup Iteration  11: 987054.125 ops/s
# Warmup Iteration  12: 831611.719 ops/s
# Warmup Iteration  13: 989375.215 ops/s
# Warmup Iteration  14: 986561.082 ops/s
# Warmup Iteration  15: 990360.414 ops/s
# Warmup Iteration  16: 988552.308 ops/s
# Warmup Iteration  17: 1053196.594 ops/s
# Warmup Iteration  18: 1049447.264 ops/s
# Warmup Iteration  19: 1063322.276 ops/s
# Warmup Iteration  20: 1053095.534 ops/s
# Warmup Iteration  21: 1050434.819 ops/s
# Warmup Iteration  22: 1049906.194 ops/s
# Warmup Iteration  23: 1050401.176 ops/s
# Warmup Iteration  24: 1049488.034 ops/s
# Warmup Iteration  25: 1055946.569 ops/s
# Warmup Iteration  26: 1052233.413 ops/s
# Warmup Iteration  27: 1053897.658 ops/s
# Warmup Iteration  28: 1047300.900 ops/s
# Warmup Iteration  29: 1049887.620 ops/s
# Warmup Iteration  30: 1054367.342 ops/s
Iteration   1: 1051746.363 ops/s
Iteration   2: 1056946.567 ops/s
Iteration   3: 1054380.000 ops/s
Iteration   4: 1049649.254 ops/s
Iteration   5: 1052050.216 ops/s
Iteration   6: 1047043.538 ops/s
Iteration   7: 1053095.233 ops/s
Iteration   8: 1055546.384 ops/s
Iteration   9: 1053822.918 ops/s
Iteration  10: 1055551.108 ops/s
Iteration  11: 1055644.824 ops/s
Iteration  12: 1050878.650 ops/s
Iteration  13: 1050325.717 ops/s
Iteration  14: 1056486.899 ops/s
Iteration  15: 1055723.934 ops/s
Iteration  16: 1049323.360 ops/s
Iteration  17: 1052209.536 ops/s
Iteration  18: 1054455.212 ops/s
Iteration  19: 1059985.600 ops/s
Iteration  20: 1054962.129 ops/s
Iteration  21: 1052738.363 ops/s
Iteration  22: 1054506.183 ops/s
Iteration  23: 1057418.534 ops/s
Iteration  24: 1053530.391 ops/s
Iteration  25: 1056744.775 ops/s
Iteration  26: 1051791.175 ops/s
Iteration  27: 1049099.877 ops/s
Iteration  28: 1045952.131 ops/s
Iteration  29: 1053055.458 ops/s
Iteration  30: 1052837.222 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  1053250.052 ±(99.9%) 2105.959 ops/s [Average]
  (min, avg, max) = (1045952.131, 1053250.052, 1059985.600), stdev = 3152.101
  CI (99.9%): [1051144.092, 1055356.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  1053250.052 ± 2105.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381246.439 ops/s
# Warmup Iteration   2: 486736.580 ops/s
# Warmup Iteration   3: 607846.518 ops/s
# Warmup Iteration   4: 610254.926 ops/s
# Warmup Iteration   5: 610081.370 ops/s
# Warmup Iteration   6: 609740.229 ops/s
# Warmup Iteration   7: 610056.327 ops/s
# Warmup Iteration   8: 610592.458 ops/s
# Warmup Iteration   9: 512413.409 ops/s
# Warmup Iteration  10: 610698.444 ops/s
# Warmup Iteration  11: 608583.371 ops/s
# Warmup Iteration  12: 610809.723 ops/s
# Warmup Iteration  13: 610903.808 ops/s
# Warmup Iteration  14: 610987.392 ops/s
# Warmup Iteration  15: 611744.037 ops/s
# Warmup Iteration  16: 609728.018 ops/s
# Warmup Iteration  17: 632684.856 ops/s
# Warmup Iteration  18: 633458.684 ops/s
# Warmup Iteration  19: 632361.029 ops/s
# Warmup Iteration  20: 633130.880 ops/s
# Warmup Iteration  21: 633700.194 ops/s
# Warmup Iteration  22: 631249.615 ops/s
# Warmup Iteration  23: 632832.016 ops/s
# Warmup Iteration  24: 633828.053 ops/s
# Warmup Iteration  25: 632952.052 ops/s
# Warmup Iteration  26: 633691.140 ops/s
# Warmup Iteration  27: 631035.708 ops/s
# Warmup Iteration  28: 632552.295 ops/s
# Warmup Iteration  29: 633182.052 ops/s
# Warmup Iteration  30: 634735.566 ops/s
Iteration   1: 634143.124 ops/s
Iteration   2: 632048.516 ops/s
Iteration   3: 633308.078 ops/s
Iteration   4: 634083.309 ops/s
Iteration   5: 629756.945 ops/s
Iteration   6: 633409.258 ops/s
Iteration   7: 633872.817 ops/s
Iteration   8: 632639.543 ops/s
Iteration   9: 632070.088 ops/s
Iteration  10: 633438.074 ops/s
Iteration  11: 630504.432 ops/s
Iteration  12: 631939.223 ops/s
Iteration  13: 633364.786 ops/s
Iteration  14: 632235.837 ops/s
Iteration  15: 634950.379 ops/s
Iteration  16: 631635.055 ops/s
Iteration  17: 631857.013 ops/s
Iteration  18: 633028.176 ops/s
Iteration  19: 632986.365 ops/s
Iteration  20: 633320.632 ops/s
Iteration  21: 634318.588 ops/s
Iteration  22: 629638.871 ops/s
Iteration  23: 632038.033 ops/s
Iteration  24: 633637.269 ops/s
Iteration  25: 632717.622 ops/s
Iteration  26: 632443.775 ops/s
Iteration  27: 634403.146 ops/s
Iteration  28: 634671.183 ops/s
Iteration  29: 632351.077 ops/s
Iteration  30: 631301.319 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachOnRange":
  632737.084 ±(99.9%) 894.754 ops/s [Average]
  (min, avg, max) = (629638.871, 632737.084, 634950.379), stdev = 1339.225
  CI (99.9%): [631842.331, 633631.838] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachOnRange  thrpt   30  632737.084 ± 894.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2734931.420 ops/s
# Warmup Iteration   2: 6317227.228 ops/s
# Warmup Iteration   3: 5797016.662 ops/s
# Warmup Iteration   4: 5919936.965 ops/s
# Warmup Iteration   5: 6401098.646 ops/s
# Warmup Iteration   6: 6382363.315 ops/s
# Warmup Iteration   7: 6388825.309 ops/s
# Warmup Iteration   8: 6372475.147 ops/s
# Warmup Iteration   9: 6402595.460 ops/s
# Warmup Iteration  10: 6373129.571 ops/s
# Warmup Iteration  11: 6385697.855 ops/s
# Warmup Iteration  12: 6385299.422 ops/s
# Warmup Iteration  13: 6384850.824 ops/s
# Warmup Iteration  14: 6390413.951 ops/s
# Warmup Iteration  15: 6375940.207 ops/s
# Warmup Iteration  16: 6390212.034 ops/s
# Warmup Iteration  17: 6390031.414 ops/s
# Warmup Iteration  18: 6395602.292 ops/s
# Warmup Iteration  19: 6384736.589 ops/s
# Warmup Iteration  20: 6401385.300 ops/s
# Warmup Iteration  21: 6378711.364 ops/s
# Warmup Iteration  22: 6382216.592 ops/s
# Warmup Iteration  23: 6396277.283 ops/s
# Warmup Iteration  24: 6384712.204 ops/s
# Warmup Iteration  25: 6414179.296 ops/s
# Warmup Iteration  26: 6379634.623 ops/s
# Warmup Iteration  27: 6395014.200 ops/s
# Warmup Iteration  28: 6389560.641 ops/s
# Warmup Iteration  29: 6390324.190 ops/s
# Warmup Iteration  30: 6404857.934 ops/s
Iteration   1: 6390680.544 ops/s
Iteration   2: 6393974.059 ops/s
Iteration   3: 6398210.389 ops/s
Iteration   4: 6393450.995 ops/s
Iteration   5: 6372239.959 ops/s
Iteration   6: 6376129.159 ops/s
Iteration   7: 6389015.185 ops/s
Iteration   8: 6381552.901 ops/s
Iteration   9: 6366804.934 ops/s
Iteration  10: 6385780.736 ops/s
Iteration  11: 6374430.305 ops/s
Iteration  12: 6287927.434 ops/s
Iteration  13: 6387135.208 ops/s
Iteration  14: 6371989.606 ops/s
Iteration  15: 6385731.399 ops/s
Iteration  16: 6385221.169 ops/s
Iteration  17: 6409665.098 ops/s
Iteration  18: 6396646.381 ops/s
Iteration  19: 6401645.409 ops/s
Iteration  20: 6400256.666 ops/s
Iteration  21: 6400975.688 ops/s
Iteration  22: 6395799.891 ops/s
Iteration  23: 6384818.118 ops/s
Iteration  24: 6398354.447 ops/s
Iteration  25: 6389319.427 ops/s
Iteration  26: 6391017.827 ops/s
Iteration  27: 6376540.008 ops/s
Iteration  28: 6378571.952 ops/s
Iteration  29: 6405285.053 ops/s
Iteration  30: 6387593.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWith":
  6385225.450 ±(99.9%) 14176.973 ops/s [Average]
  (min, avg, max) = (6287927.434, 6385225.450, 6409665.098), stdev = 21219.427
  CI (99.9%): [6371048.477, 6399402.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachWith  thrpt   30  6385225.450 ± 14176.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478649.593 ops/s
# Warmup Iteration   2: 945324.411 ops/s
# Warmup Iteration   3: 1049702.587 ops/s
# Warmup Iteration   4: 1056974.922 ops/s
# Warmup Iteration   5: 867255.486 ops/s
# Warmup Iteration   6: 1058735.264 ops/s
# Warmup Iteration   7: 1061023.942 ops/s
# Warmup Iteration   8: 1056529.471 ops/s
# Warmup Iteration   9: 1058091.160 ops/s
# Warmup Iteration  10: 1058739.565 ops/s
# Warmup Iteration  11: 1059787.012 ops/s
# Warmup Iteration  12: 1057464.952 ops/s
# Warmup Iteration  13: 1060141.109 ops/s
# Warmup Iteration  14: 1059040.513 ops/s
# Warmup Iteration  15: 1056583.859 ops/s
# Warmup Iteration  16: 1059837.240 ops/s
# Warmup Iteration  17: 1060823.242 ops/s
# Warmup Iteration  18: 1059683.820 ops/s
# Warmup Iteration  19: 1058948.167 ops/s
# Warmup Iteration  20: 1058445.158 ops/s
# Warmup Iteration  21: 1058754.323 ops/s
# Warmup Iteration  22: 1060883.282 ops/s
# Warmup Iteration  23: 1059782.141 ops/s
# Warmup Iteration  24: 1057615.790 ops/s
# Warmup Iteration  25: 1060101.783 ops/s
# Warmup Iteration  26: 1059108.512 ops/s
# Warmup Iteration  27: 1058779.896 ops/s
# Warmup Iteration  28: 1057093.873 ops/s
# Warmup Iteration  29: 1058744.121 ops/s
# Warmup Iteration  30: 1059281.326 ops/s
Iteration   1: 1057181.786 ops/s
Iteration   2: 1055888.538 ops/s
Iteration   3: 1058733.068 ops/s
Iteration   4: 1059171.695 ops/s
Iteration   5: 1058640.565 ops/s
Iteration   6: 1059330.684 ops/s
Iteration   7: 1057519.037 ops/s
Iteration   8: 1058247.124 ops/s
Iteration   9: 1058392.053 ops/s
Iteration  10: 1056394.981 ops/s
Iteration  11: 1057676.963 ops/s
Iteration  12: 1057786.187 ops/s
Iteration  13: 1058116.218 ops/s
Iteration  14: 1056432.470 ops/s
Iteration  15: 1060327.098 ops/s
Iteration  16: 1057483.717 ops/s
Iteration  17: 1057523.086 ops/s
Iteration  18: 1060738.782 ops/s
Iteration  19: 1055651.532 ops/s
Iteration  20: 1058958.867 ops/s
Iteration  21: 1057549.936 ops/s
Iteration  22: 1058244.468 ops/s
Iteration  23: 1056437.281 ops/s
Iteration  24: 1060072.291 ops/s
Iteration  25: 1058210.663 ops/s
Iteration  26: 1061264.676 ops/s
Iteration  27: 1060335.043 ops/s
Iteration  28: 1058491.989 ops/s
Iteration  29: 1055377.027 ops/s
Iteration  30: 1059495.852 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndex":
  1058189.123 ±(99.9%) 1009.037 ops/s [Average]
  (min, avg, max) = (1055377.027, 1058189.123, 1061264.676), stdev = 1510.279
  CI (99.9%): [1057180.086, 1059198.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1058189.123 ± 1009.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381422.904 ops/s
# Warmup Iteration   2: 491474.352 ops/s
# Warmup Iteration   3: 616423.586 ops/s
# Warmup Iteration   4: 611791.641 ops/s
# Warmup Iteration   5: 614662.540 ops/s
# Warmup Iteration   6: 615578.399 ops/s
# Warmup Iteration   7: 616667.457 ops/s
# Warmup Iteration   8: 614916.649 ops/s
# Warmup Iteration   9: 519457.436 ops/s
# Warmup Iteration  10: 615529.865 ops/s
# Warmup Iteration  11: 615634.004 ops/s
# Warmup Iteration  12: 614948.595 ops/s
# Warmup Iteration  13: 614903.521 ops/s
# Warmup Iteration  14: 615737.020 ops/s
# Warmup Iteration  15: 616361.072 ops/s
# Warmup Iteration  16: 615597.320 ops/s
# Warmup Iteration  17: 641069.551 ops/s
# Warmup Iteration  18: 641170.365 ops/s
# Warmup Iteration  19: 641036.936 ops/s
# Warmup Iteration  20: 640060.435 ops/s
# Warmup Iteration  21: 641424.500 ops/s
# Warmup Iteration  22: 641034.717 ops/s
# Warmup Iteration  23: 640406.150 ops/s
# Warmup Iteration  24: 640282.908 ops/s
# Warmup Iteration  25: 639952.012 ops/s
# Warmup Iteration  26: 639497.704 ops/s
# Warmup Iteration  27: 641393.425 ops/s
# Warmup Iteration  28: 640388.187 ops/s
# Warmup Iteration  29: 640370.913 ops/s
# Warmup Iteration  30: 640670.130 ops/s
Iteration   1: 638233.619 ops/s
Iteration   2: 638747.599 ops/s
Iteration   3: 639625.489 ops/s
Iteration   4: 640443.846 ops/s
Iteration   5: 641389.488 ops/s
Iteration   6: 641177.958 ops/s
Iteration   7: 638299.449 ops/s
Iteration   8: 641850.526 ops/s
Iteration   9: 640703.633 ops/s
Iteration  10: 639597.955 ops/s
Iteration  11: 638580.885 ops/s
Iteration  12: 640369.995 ops/s
Iteration  13: 639295.473 ops/s
Iteration  14: 640545.528 ops/s
Iteration  15: 639392.495 ops/s
Iteration  16: 640068.674 ops/s
Iteration  17: 642822.471 ops/s
Iteration  18: 640169.683 ops/s
Iteration  19: 640864.522 ops/s
Iteration  20: 642286.321 ops/s
Iteration  21: 640280.112 ops/s
Iteration  22: 642129.862 ops/s
Iteration  23: 640467.005 ops/s
Iteration  24: 642208.007 ops/s
Iteration  25: 642451.501 ops/s
Iteration  26: 640635.044 ops/s
Iteration  27: 640210.536 ops/s
Iteration  28: 640125.827 ops/s
Iteration  29: 639158.922 ops/s
Iteration  30: 642167.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange":
  640476.673 ±(99.9%) 853.955 ops/s [Average]
  (min, avg, max) = (638233.619, 640476.673, 642822.471), stdev = 1278.159
  CI (99.9%): [639622.718, 641330.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  640476.673 ± 853.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170112.887 ops/s
# Warmup Iteration   2: 188240.317 ops/s
# Warmup Iteration   3: 255632.931 ops/s
# Warmup Iteration   4: 256933.002 ops/s
# Warmup Iteration   5: 254277.416 ops/s
# Warmup Iteration   6: 257316.089 ops/s
# Warmup Iteration   7: 257698.857 ops/s
# Warmup Iteration   8: 256131.651 ops/s
# Warmup Iteration   9: 256954.976 ops/s
# Warmup Iteration  10: 256617.102 ops/s
# Warmup Iteration  11: 234787.568 ops/s
# Warmup Iteration  12: 234848.121 ops/s
# Warmup Iteration  13: 256966.089 ops/s
# Warmup Iteration  14: 256472.334 ops/s
# Warmup Iteration  15: 257177.053 ops/s
# Warmup Iteration  16: 256859.958 ops/s
# Warmup Iteration  17: 264764.175 ops/s
# Warmup Iteration  18: 265960.647 ops/s
# Warmup Iteration  19: 264512.122 ops/s
# Warmup Iteration  20: 265302.659 ops/s
# Warmup Iteration  21: 264618.755 ops/s
# Warmup Iteration  22: 264629.716 ops/s
# Warmup Iteration  23: 264554.708 ops/s
# Warmup Iteration  24: 264998.380 ops/s
# Warmup Iteration  25: 265836.011 ops/s
# Warmup Iteration  26: 265190.611 ops/s
# Warmup Iteration  27: 264919.827 ops/s
# Warmup Iteration  28: 264687.366 ops/s
# Warmup Iteration  29: 264611.812 ops/s
# Warmup Iteration  30: 265523.007 ops/s
Iteration   1: 264520.832 ops/s
Iteration   2: 264887.553 ops/s
Iteration   3: 265844.899 ops/s
Iteration   4: 263883.516 ops/s
Iteration   5: 264520.826 ops/s
Iteration   6: 264914.259 ops/s
Iteration   7: 266414.266 ops/s
Iteration   8: 265315.321 ops/s
Iteration   9: 264932.332 ops/s
Iteration  10: 265020.099 ops/s
Iteration  11: 264595.418 ops/s
Iteration  12: 264298.584 ops/s
Iteration  13: 265850.094 ops/s
Iteration  14: 264726.084 ops/s
Iteration  15: 265539.832 ops/s
Iteration  16: 265813.646 ops/s
Iteration  17: 265176.960 ops/s
Iteration  18: 264437.157 ops/s
Iteration  19: 265272.685 ops/s
Iteration  20: 265468.056 ops/s
Iteration  21: 264452.427 ops/s
Iteration  22: 264932.685 ops/s
Iteration  23: 265313.920 ops/s
Iteration  24: 263715.402 ops/s
Iteration  25: 265522.525 ops/s
Iteration  26: 265028.034 ops/s
Iteration  27: 265179.774 ops/s
Iteration  28: 264952.108 ops/s
Iteration  29: 263672.497 ops/s
Iteration  30: 266265.510 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  265015.577 ±(99.9%) 452.635 ops/s [Average]
  (min, avg, max) = (263672.497, 265015.577, 266414.266), stdev = 677.483
  CI (99.9%): [264562.941, 265468.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  265015.577 ± 452.635  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9381410.319 ops/s
# Warmup Iteration   2: 19192519.993 ops/s
# Warmup Iteration   3: 16608068.790 ops/s
# Warmup Iteration   4: 19599428.999 ops/s
# Warmup Iteration   5: 19296729.284 ops/s
# Warmup Iteration   6: 19375987.001 ops/s
# Warmup Iteration   7: 19601475.989 ops/s
# Warmup Iteration   8: 19587983.520 ops/s
# Warmup Iteration   9: 19515123.764 ops/s
# Warmup Iteration  10: 19608605.866 ops/s
# Warmup Iteration  11: 19667263.741 ops/s
# Warmup Iteration  12: 19659792.256 ops/s
# Warmup Iteration  13: 19638398.059 ops/s
# Warmup Iteration  14: 19562228.478 ops/s
# Warmup Iteration  15: 19576789.930 ops/s
# Warmup Iteration  16: 19622255.734 ops/s
# Warmup Iteration  17: 19703520.938 ops/s
# Warmup Iteration  18: 19676947.775 ops/s
# Warmup Iteration  19: 19663196.447 ops/s
# Warmup Iteration  20: 19629665.916 ops/s
# Warmup Iteration  21: 19674886.825 ops/s
# Warmup Iteration  22: 19682552.814 ops/s
# Warmup Iteration  23: 19552927.946 ops/s
# Warmup Iteration  24: 19604904.281 ops/s
# Warmup Iteration  25: 19642035.210 ops/s
# Warmup Iteration  26: 19579213.390 ops/s
# Warmup Iteration  27: 19655561.104 ops/s
# Warmup Iteration  28: 19606708.479 ops/s
# Warmup Iteration  29: 19549641.956 ops/s
# Warmup Iteration  30: 19675720.872 ops/s
Iteration   1: 19702961.790 ops/s
Iteration   2: 19649208.654 ops/s
Iteration   3: 19662886.443 ops/s
Iteration   4: 19622201.382 ops/s
Iteration   5: 19669769.270 ops/s
Iteration   6: 19608458.665 ops/s
Iteration   7: 19623463.272 ops/s
Iteration   8: 19595429.767 ops/s
Iteration   9: 19621785.796 ops/s
Iteration  10: 19589032.987 ops/s
Iteration  11: 19693126.051 ops/s
Iteration  12: 19655302.269 ops/s
Iteration  13: 19633889.591 ops/s
Iteration  14: 19682715.413 ops/s
Iteration  15: 19670076.751 ops/s
Iteration  16: 19682901.968 ops/s
Iteration  17: 19594865.057 ops/s
Iteration  18: 19689718.174 ops/s
Iteration  19: 19591683.496 ops/s
Iteration  20: 19509623.861 ops/s
Iteration  21: 19631859.193 ops/s
Iteration  22: 19521866.499 ops/s
Iteration  23: 19643792.739 ops/s
Iteration  24: 19680536.684 ops/s
Iteration  25: 19668553.781 ops/s
Iteration  26: 19636062.245 ops/s
Iteration  27: 19619486.586 ops/s
Iteration  28: 19662374.459 ops/s
Iteration  29: 19632290.167 ops/s
Iteration  30: 19611065.165 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  19635232.939 ±(99.9%) 30669.951 ops/s [Average]
  (min, avg, max) = (19509623.861, 19635232.939, 19702961.790), stdev = 45905.342
  CI (99.9%): [19604562.988, 19665902.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  19635232.939 ± 30669.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1965896.603 ops/s
# Warmup Iteration   2: 4413620.960 ops/s
# Warmup Iteration   3: 3777967.035 ops/s
# Warmup Iteration   4: 4475973.977 ops/s
# Warmup Iteration   5: 4484211.703 ops/s
# Warmup Iteration   6: 4477758.658 ops/s
# Warmup Iteration   7: 4469476.924 ops/s
# Warmup Iteration   8: 4485662.752 ops/s
# Warmup Iteration   9: 4481834.011 ops/s
# Warmup Iteration  10: 4489534.012 ops/s
# Warmup Iteration  11: 4488225.627 ops/s
# Warmup Iteration  12: 4483446.570 ops/s
# Warmup Iteration  13: 4475520.047 ops/s
# Warmup Iteration  14: 4489127.655 ops/s
# Warmup Iteration  15: 4483051.913 ops/s
# Warmup Iteration  16: 4482783.362 ops/s
# Warmup Iteration  17: 4493066.472 ops/s
# Warmup Iteration  18: 4461797.246 ops/s
# Warmup Iteration  19: 4473889.996 ops/s
# Warmup Iteration  20: 4476836.491 ops/s
# Warmup Iteration  21: 4481871.512 ops/s
# Warmup Iteration  22: 4461414.785 ops/s
# Warmup Iteration  23: 4464881.078 ops/s
# Warmup Iteration  24: 4482835.370 ops/s
# Warmup Iteration  25: 4469708.031 ops/s
# Warmup Iteration  26: 4493200.438 ops/s
# Warmup Iteration  27: 4474279.822 ops/s
# Warmup Iteration  28: 4488861.775 ops/s
# Warmup Iteration  29: 4486412.480 ops/s
# Warmup Iteration  30: 4480385.815 ops/s
Iteration   1: 4477497.990 ops/s
Iteration   2: 4476999.437 ops/s
Iteration   3: 4486256.580 ops/s
Iteration   4: 4480647.871 ops/s
Iteration   5: 4481364.804 ops/s
Iteration   6: 4474318.352 ops/s
Iteration   7: 4440295.021 ops/s
Iteration   8: 4477514.352 ops/s
Iteration   9: 4475506.005 ops/s
Iteration  10: 4479651.447 ops/s
Iteration  11: 4492655.805 ops/s
Iteration  12: 4476477.984 ops/s
Iteration  13: 4472274.019 ops/s
Iteration  14: 4511978.380 ops/s
Iteration  15: 4486745.581 ops/s
Iteration  16: 4481508.213 ops/s
Iteration  17: 4503619.958 ops/s
Iteration  18: 4459200.554 ops/s
Iteration  19: 4477338.582 ops/s
Iteration  20: 4495987.846 ops/s
Iteration  21: 4465795.915 ops/s
Iteration  22: 4481081.339 ops/s
Iteration  23: 4477354.453 ops/s
Iteration  24: 4485960.253 ops/s
Iteration  25: 4481340.847 ops/s
Iteration  26: 4466409.317 ops/s
Iteration  27: 4451364.773 ops/s
Iteration  28: 4482945.764 ops/s
Iteration  29: 4488192.605 ops/s
Iteration  30: 4475064.490 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_fusedCollectMakeString":
  4478778.285 ±(99.9%) 9246.941 ops/s [Average]
  (min, avg, max) = (4440295.021, 4478778.285, 4511978.380), stdev = 13840.388
  CI (99.9%): [4469531.343, 4488025.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  4478778.285 ± 9246.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3147111.858 ops/s
# Warmup Iteration   2: 4501483.852 ops/s
# Warmup Iteration   3: 5321268.152 ops/s
# Warmup Iteration   4: 5297369.614 ops/s
# Warmup Iteration   5: 5300128.666 ops/s
# Warmup Iteration   6: 5314398.365 ops/s
# Warmup Iteration   7: 4391170.295 ops/s
# Warmup Iteration   8: 5316746.609 ops/s
# Warmup Iteration   9: 5307772.311 ops/s
# Warmup Iteration  10: 5305394.448 ops/s
# Warmup Iteration  11: 5315358.019 ops/s
# Warmup Iteration  12: 5312083.942 ops/s
# Warmup Iteration  13: 5302665.360 ops/s
# Warmup Iteration  14: 5317823.646 ops/s
# Warmup Iteration  15: 5284061.221 ops/s
# Warmup Iteration  16: 5301954.647 ops/s
# Warmup Iteration  17: 5321019.644 ops/s
# Warmup Iteration  18: 5318511.928 ops/s
# Warmup Iteration  19: 5310768.769 ops/s
# Warmup Iteration  20: 5304664.726 ops/s
# Warmup Iteration  21: 5314031.118 ops/s
# Warmup Iteration  22: 5318172.932 ops/s
# Warmup Iteration  23: 5310844.829 ops/s
# Warmup Iteration  24: 5312588.662 ops/s
# Warmup Iteration  25: 5309940.010 ops/s
# Warmup Iteration  26: 5312598.061 ops/s
# Warmup Iteration  27: 5320775.455 ops/s
# Warmup Iteration  28: 5311795.775 ops/s
# Warmup Iteration  29: 5303619.157 ops/s
# Warmup Iteration  30: 5307185.763 ops/s
Iteration   1: 5308534.198 ops/s
Iteration   2: 5318553.960 ops/s
Iteration   3: 5301539.190 ops/s
Iteration   4: 5313029.490 ops/s
Iteration   5: 5319074.758 ops/s
Iteration   6: 5306027.897 ops/s
Iteration   7: 5317187.847 ops/s
Iteration   8: 5300714.469 ops/s
Iteration   9: 5321966.650 ops/s
Iteration  10: 5301132.451 ops/s
Iteration  11: 5326817.545 ops/s
Iteration  12: 5306022.133 ops/s
Iteration  13: 5311124.094 ops/s
Iteration  14: 5324219.013 ops/s
Iteration  15: 5296577.351 ops/s
Iteration  16: 5319127.088 ops/s
Iteration  17: 5301005.172 ops/s
Iteration  18: 5306437.151 ops/s
Iteration  19: 5309409.487 ops/s
Iteration  20: 5324027.694 ops/s
Iteration  21: 5304675.291 ops/s
Iteration  22: 5319808.541 ops/s
Iteration  23: 5312409.959 ops/s
Iteration  24: 5305004.874 ops/s
Iteration  25: 5296135.624 ops/s
Iteration  26: 5314932.697 ops/s
Iteration  27: 5301072.747 ops/s
Iteration  28: 5311241.861 ops/s
Iteration  29: 5325327.440 ops/s
Iteration  30: 5315863.477 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getAny":
  5311300.005 ±(99.9%) 6003.980 ops/s [Average]
  (min, avg, max) = (5296135.624, 5311300.005, 5326817.545), stdev = 8986.475
  CI (99.9%): [5305296.025, 5317303.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getAny  thrpt   30  5311300.005 ± 6003.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3103274.343 ops/s
# Warmup Iteration   2: 4391117.340 ops/s
# Warmup Iteration   3: 5223146.350 ops/s
# Warmup Iteration   4: 5187446.566 ops/s
# Warmup Iteration   5: 5216262.564 ops/s
# Warmup Iteration   6: 5219427.227 ops/s
# Warmup Iteration   7: 4315077.238 ops/s
# Warmup Iteration   8: 5227331.455 ops/s
# Warmup Iteration   9: 5233381.737 ops/s
# Warmup Iteration  10: 5223624.130 ops/s
# Warmup Iteration  11: 5217694.562 ops/s
# Warmup Iteration  12: 5222354.457 ops/s
# Warmup Iteration  13: 5215943.729 ops/s
# Warmup Iteration  14: 5218339.476 ops/s
# Warmup Iteration  15: 5238166.674 ops/s
# Warmup Iteration  16: 5233876.075 ops/s
# Warmup Iteration  17: 5230369.789 ops/s
# Warmup Iteration  18: 5219575.909 ops/s
# Warmup Iteration  19: 5219505.629 ops/s
# Warmup Iteration  20: 5207690.991 ops/s
# Warmup Iteration  21: 5222476.722 ops/s
# Warmup Iteration  22: 5218343.535 ops/s
# Warmup Iteration  23: 5218575.606 ops/s
# Warmup Iteration  24: 5230759.583 ops/s
# Warmup Iteration  25: 5219888.761 ops/s
# Warmup Iteration  26: 5214328.049 ops/s
# Warmup Iteration  27: 5225974.088 ops/s
# Warmup Iteration  28: 5221980.565 ops/s
# Warmup Iteration  29: 5223245.302 ops/s
# Warmup Iteration  30: 5235639.243 ops/s
Iteration   1: 5235366.651 ops/s
Iteration   2: 5197897.182 ops/s
Iteration   3: 5214656.818 ops/s
Iteration   4: 5225245.628 ops/s
Iteration   5: 5216941.737 ops/s
Iteration   6: 5235524.565 ops/s
Iteration   7: 5220817.738 ops/s
Iteration   8: 5225885.850 ops/s
Iteration   9: 5215812.010 ops/s
Iteration  10: 5226446.255 ops/s
Iteration  11: 5226813.388 ops/s
Iteration  12: 5212866.299 ops/s
Iteration  13: 5227574.779 ops/s
Iteration  14: 5217823.825 ops/s
Iteration  15: 5225510.704 ops/s
Iteration  16: 5212072.499 ops/s
Iteration  17: 5233076.818 ops/s
Iteration  18: 5204760.057 ops/s
Iteration  19: 5235657.061 ops/s
Iteration  20: 5230227.832 ops/s
Iteration  21: 5225481.835 ops/s
Iteration  22: 5224029.307 ops/s
Iteration  23: 5207726.903 ops/s
Iteration  24: 5224542.998 ops/s
Iteration  25: 5213931.145 ops/s
Iteration  26: 5206695.888 ops/s
Iteration  27: 5221500.276 ops/s
Iteration  28: 5221141.477 ops/s
Iteration  29: 5230828.963 ops/s
Iteration  30: 5222262.370 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirst":
  5221303.962 ±(99.9%) 6371.540 ops/s [Average]
  (min, avg, max) = (5197897.182, 5221303.962, 5235657.061), stdev = 9536.622
  CI (99.9%): [5214932.422, 5227675.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getFirst  thrpt   30  5221303.962 ± 6371.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2791084.474 ops/s
# Warmup Iteration   2: 4581810.375 ops/s
# Warmup Iteration   3: 5142938.343 ops/s
# Warmup Iteration   4: 5185599.681 ops/s
# Warmup Iteration   5: 5181017.099 ops/s
# Warmup Iteration   6: 4254632.778 ops/s
# Warmup Iteration   7: 5141007.217 ops/s
# Warmup Iteration   8: 5140596.196 ops/s
# Warmup Iteration   9: 5151911.744 ops/s
# Warmup Iteration  10: 5146356.484 ops/s
# Warmup Iteration  11: 5153204.021 ops/s
# Warmup Iteration  12: 5154072.585 ops/s
# Warmup Iteration  13: 5143594.235 ops/s
# Warmup Iteration  14: 5152562.371 ops/s
# Warmup Iteration  15: 5148416.443 ops/s
# Warmup Iteration  16: 5154203.325 ops/s
# Warmup Iteration  17: 5182960.511 ops/s
# Warmup Iteration  18: 5184506.928 ops/s
# Warmup Iteration  19: 5189074.117 ops/s
# Warmup Iteration  20: 5182877.736 ops/s
# Warmup Iteration  21: 5182621.561 ops/s
# Warmup Iteration  22: 5179828.072 ops/s
# Warmup Iteration  23: 5180332.754 ops/s
# Warmup Iteration  24: 5179006.482 ops/s
# Warmup Iteration  25: 5173326.179 ops/s
# Warmup Iteration  26: 5182901.192 ops/s
# Warmup Iteration  27: 5190881.441 ops/s
# Warmup Iteration  28: 5190356.506 ops/s
# Warmup Iteration  29: 5181858.416 ops/s
# Warmup Iteration  30: 5194487.375 ops/s
Iteration   1: 5162271.848 ops/s
Iteration   2: 5185237.234 ops/s
Iteration   3: 5191090.212 ops/s
Iteration   4: 5193342.589 ops/s
Iteration   5: 5201200.601 ops/s
Iteration   6: 5169759.976 ops/s
Iteration   7: 5178842.120 ops/s
Iteration   8: 5179760.031 ops/s
Iteration   9: 5191988.442 ops/s
Iteration  10: 5195797.898 ops/s
Iteration  11: 5194460.439 ops/s
Iteration  12: 5165455.838 ops/s
Iteration  13: 5178015.958 ops/s
Iteration  14: 5187011.986 ops/s
Iteration  15: 5187065.979 ops/s
Iteration  16: 5176589.765 ops/s
Iteration  17: 5163481.223 ops/s
Iteration  18: 5180813.556 ops/s
Iteration  19: 5185485.566 ops/s
Iteration  20: 5188912.808 ops/s
Iteration  21: 5174073.134 ops/s
Iteration  22: 5195516.717 ops/s
Iteration  23: 5154158.710 ops/s
Iteration  24: 5196976.723 ops/s
Iteration  25: 5178819.406 ops/s
Iteration  26: 5172965.457 ops/s
Iteration  27: 5181229.850 ops/s
Iteration  28: 5198854.156 ops/s
Iteration  29: 5189037.574 ops/s
Iteration  30: 5182241.585 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getFirstOptional":
  5182681.913 ±(99.9%) 7866.946 ops/s [Average]
  (min, avg, max) = (5154158.710, 5182681.913, 5201200.601), stdev = 11774.875
  CI (99.9%): [5174814.967, 5190548.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getFirstOptional  thrpt   30  5182681.913 ± 7866.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3085315.453 ops/s
# Warmup Iteration   2: 4440478.770 ops/s
# Warmup Iteration   3: 5247065.286 ops/s
# Warmup Iteration   4: 5204636.617 ops/s
# Warmup Iteration   5: 5243273.069 ops/s
# Warmup Iteration   6: 5234787.510 ops/s
# Warmup Iteration   7: 4332761.118 ops/s
# Warmup Iteration   8: 5248752.850 ops/s
# Warmup Iteration   9: 5259564.847 ops/s
# Warmup Iteration  10: 5254893.059 ops/s
# Warmup Iteration  11: 5259066.419 ops/s
# Warmup Iteration  12: 5254698.134 ops/s
# Warmup Iteration  13: 5243262.876 ops/s
# Warmup Iteration  14: 5253614.200 ops/s
# Warmup Iteration  15: 5246950.726 ops/s
# Warmup Iteration  16: 5237790.608 ops/s
# Warmup Iteration  17: 5256824.986 ops/s
# Warmup Iteration  18: 5246415.383 ops/s
# Warmup Iteration  19: 5247289.249 ops/s
# Warmup Iteration  20: 5247553.076 ops/s
# Warmup Iteration  21: 5246744.020 ops/s
# Warmup Iteration  22: 5247811.376 ops/s
# Warmup Iteration  23: 5250276.985 ops/s
# Warmup Iteration  24: 5250982.536 ops/s
# Warmup Iteration  25: 5257658.779 ops/s
# Warmup Iteration  26: 5239538.007 ops/s
# Warmup Iteration  27: 5245148.764 ops/s
# Warmup Iteration  28: 5247843.373 ops/s
# Warmup Iteration  29: 5245989.244 ops/s
# Warmup Iteration  30: 5250700.864 ops/s
Iteration   1: 5245087.250 ops/s
Iteration   2: 5250495.788 ops/s
Iteration   3: 5257402.652 ops/s
Iteration   4: 5227999.000 ops/s
Iteration   5: 5250783.525 ops/s
Iteration   6: 5232518.829 ops/s
Iteration   7: 5257031.981 ops/s
Iteration   8: 5255384.479 ops/s
Iteration   9: 5258160.428 ops/s
Iteration  10: 5249456.813 ops/s
Iteration  11: 5254473.923 ops/s
Iteration  12: 5249013.233 ops/s
Iteration  13: 5242840.190 ops/s
Iteration  14: 5247827.921 ops/s
Iteration  15: 5243963.930 ops/s
Iteration  16: 5244205.094 ops/s
Iteration  17: 5254029.661 ops/s
Iteration  18: 5254780.374 ops/s
Iteration  19: 5257818.598 ops/s
Iteration  20: 5244025.286 ops/s
Iteration  21: 5252659.584 ops/s
Iteration  22: 5239295.975 ops/s
Iteration  23: 5264599.978 ops/s
Iteration  24: 5255112.587 ops/s
Iteration  25: 5250048.943 ops/s
Iteration  26: 5248039.664 ops/s
Iteration  27: 5243244.911 ops/s
Iteration  28: 5240898.328 ops/s
Iteration  29: 5246917.393 ops/s
Iteration  30: 5236299.932 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLast":
  5248480.542 ±(99.9%) 5434.659 ops/s [Average]
  (min, avg, max) = (5227999.000, 5248480.542, 5264599.978), stdev = 8134.342
  CI (99.9%): [5243045.883, 5253915.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getLast  thrpt   30  5248480.542 ± 5434.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2782787.986 ops/s
# Warmup Iteration   2: 4558541.125 ops/s
# Warmup Iteration   3: 5137904.738 ops/s
# Warmup Iteration   4: 5149920.520 ops/s
# Warmup Iteration   5: 5154741.624 ops/s
# Warmup Iteration   6: 4224448.343 ops/s
# Warmup Iteration   7: 5148655.076 ops/s
# Warmup Iteration   8: 5153244.806 ops/s
# Warmup Iteration   9: 5158458.217 ops/s
# Warmup Iteration  10: 5155881.094 ops/s
# Warmup Iteration  11: 5157554.539 ops/s
# Warmup Iteration  12: 5157094.006 ops/s
# Warmup Iteration  13: 5154560.718 ops/s
# Warmup Iteration  14: 5169326.867 ops/s
# Warmup Iteration  15: 5165065.226 ops/s
# Warmup Iteration  16: 5162864.127 ops/s
# Warmup Iteration  17: 5159752.029 ops/s
# Warmup Iteration  18: 5153877.445 ops/s
# Warmup Iteration  19: 5159346.621 ops/s
# Warmup Iteration  20: 5154594.197 ops/s
# Warmup Iteration  21: 5157457.917 ops/s
# Warmup Iteration  22: 5161264.144 ops/s
# Warmup Iteration  23: 5162696.168 ops/s
# Warmup Iteration  24: 5162474.359 ops/s
# Warmup Iteration  25: 5164910.477 ops/s
# Warmup Iteration  26: 5150006.664 ops/s
# Warmup Iteration  27: 5161834.867 ops/s
# Warmup Iteration  28: 5160899.462 ops/s
# Warmup Iteration  29: 5154326.396 ops/s
# Warmup Iteration  30: 5166115.508 ops/s
Iteration   1: 5156353.726 ops/s
Iteration   2: 5178956.842 ops/s
Iteration   3: 5159027.303 ops/s
Iteration   4: 5157087.297 ops/s
Iteration   5: 5156473.439 ops/s
Iteration   6: 5165599.342 ops/s
Iteration   7: 5158862.164 ops/s
Iteration   8: 5149982.750 ops/s
Iteration   9: 5154368.166 ops/s
Iteration  10: 5155867.560 ops/s
Iteration  11: 5152645.031 ops/s
Iteration  12: 5141336.128 ops/s
Iteration  13: 5171644.670 ops/s
Iteration  14: 5153556.218 ops/s
Iteration  15: 5168388.543 ops/s
Iteration  16: 5166297.479 ops/s
Iteration  17: 5153331.740 ops/s
Iteration  18: 5166948.738 ops/s
Iteration  19: 5167565.115 ops/s
Iteration  20: 5168127.430 ops/s
Iteration  21: 5151391.964 ops/s
Iteration  22: 5172475.377 ops/s
Iteration  23: 5172927.495 ops/s
Iteration  24: 5176493.375 ops/s
Iteration  25: 5169098.696 ops/s
Iteration  26: 5161952.171 ops/s
Iteration  27: 5147133.450 ops/s
Iteration  28: 5152050.426 ops/s
Iteration  29: 5176542.305 ops/s
Iteration  30: 5158171.556 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getLastOptional":
  5161355.217 ±(99.9%) 6432.346 ops/s [Average]
  (min, avg, max) = (5141336.128, 5161355.217, 5178956.842), stdev = 9627.634
  CI (99.9%): [5154922.870, 5167787.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getLastOptional  thrpt   30  5161355.217 ± 6432.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6289266.499 ops/s
# Warmup Iteration   2: 14495050.077 ops/s
# Warmup Iteration   3: 15029696.276 ops/s
# Warmup Iteration   4: 12568483.889 ops/s
# Warmup Iteration   5: 15196437.587 ops/s
# Warmup Iteration   6: 15181273.169 ops/s
# Warmup Iteration   7: 15210887.192 ops/s
# Warmup Iteration   8: 15208009.885 ops/s
# Warmup Iteration   9: 15208286.982 ops/s
# Warmup Iteration  10: 15205350.806 ops/s
# Warmup Iteration  11: 15198678.795 ops/s
# Warmup Iteration  12: 15215465.956 ops/s
# Warmup Iteration  13: 15217156.375 ops/s
# Warmup Iteration  14: 15215635.619 ops/s
# Warmup Iteration  15: 15218763.612 ops/s
# Warmup Iteration  16: 15216944.259 ops/s
# Warmup Iteration  17: 15184577.024 ops/s
# Warmup Iteration  18: 15211660.174 ops/s
# Warmup Iteration  19: 15243810.240 ops/s
# Warmup Iteration  20: 15198418.108 ops/s
# Warmup Iteration  21: 15222478.043 ops/s
# Warmup Iteration  22: 15179765.949 ops/s
# Warmup Iteration  23: 15227466.778 ops/s
# Warmup Iteration  24: 15199087.922 ops/s
# Warmup Iteration  25: 15207815.340 ops/s
# Warmup Iteration  26: 15208967.011 ops/s
# Warmup Iteration  27: 15188702.456 ops/s
# Warmup Iteration  28: 15228511.320 ops/s
# Warmup Iteration  29: 15216629.495 ops/s
# Warmup Iteration  30: 15206325.176 ops/s
Iteration   1: 15229449.499 ops/s
Iteration   2: 15236241.213 ops/s
Iteration   3: 15215312.042 ops/s
Iteration   4: 15248272.884 ops/s
Iteration   5: 15231587.201 ops/s
Iteration   6: 15252866.394 ops/s
Iteration   7: 15193747.701 ops/s
Iteration   8: 15158889.238 ops/s
Iteration   9: 15207461.852 ops/s
Iteration  10: 15179826.568 ops/s
Iteration  11: 15177007.892 ops/s
Iteration  12: 15192353.154 ops/s
Iteration  13: 15182996.383 ops/s
Iteration  14: 15180263.271 ops/s
Iteration  15: 15148770.381 ops/s
Iteration  16: 15173944.156 ops/s
Iteration  17: 15163262.274 ops/s
Iteration  18: 15169590.168 ops/s
Iteration  19: 15170710.786 ops/s
Iteration  20: 15224242.328 ops/s
Iteration  21: 15207819.190 ops/s
Iteration  22: 15189561.603 ops/s
Iteration  23: 15207471.667 ops/s
Iteration  24: 15216475.202 ops/s
Iteration  25: 15222290.067 ops/s
Iteration  26: 15192536.118 ops/s
Iteration  27: 15174706.854 ops/s
Iteration  28: 15159185.161 ops/s
Iteration  29: 15272438.324 ops/s
Iteration  30: 15222817.759 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly":
  15200069.911 ±(99.9%) 20812.811 ops/s [Average]
  (min, avg, max) = (15148770.381, 15200069.911, 15272438.324), stdev = 31151.638
  CI (99.9%): [15179257.100, 15220882.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getOnly  thrpt   30  15200069.911 ± 20812.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799708.539 ops/s
# Warmup Iteration   2: 828182.698 ops/s
# Warmup Iteration   3: 1011383.365 ops/s
# Warmup Iteration   4: 1047244.204 ops/s
# Warmup Iteration   5: 1049496.093 ops/s
# Warmup Iteration   6: 1044702.256 ops/s
# Warmup Iteration   7: 1051573.607 ops/s
# Warmup Iteration   8: 1049322.444 ops/s
# Warmup Iteration   9: 1051519.245 ops/s
# Warmup Iteration  10: 1049005.369 ops/s
# Warmup Iteration  11: 1046610.934 ops/s
# Warmup Iteration  12: 1051116.932 ops/s
# Warmup Iteration  13: 920589.424 ops/s
# Warmup Iteration  14: 1016155.890 ops/s
# Warmup Iteration  15: 1049868.057 ops/s
# Warmup Iteration  16: 1047582.069 ops/s
# Warmup Iteration  17: 1117576.998 ops/s
# Warmup Iteration  18: 1116780.438 ops/s
# Warmup Iteration  19: 1115030.768 ops/s
# Warmup Iteration  20: 1118510.029 ops/s
# Warmup Iteration  21: 1115398.820 ops/s
# Warmup Iteration  22: 1119218.581 ops/s
# Warmup Iteration  23: 1117668.852 ops/s
# Warmup Iteration  24: 1120091.943 ops/s
# Warmup Iteration  25: 1113848.843 ops/s
# Warmup Iteration  26: 1114689.894 ops/s
# Warmup Iteration  27: 1117493.381 ops/s
# Warmup Iteration  28: 1119388.534 ops/s
# Warmup Iteration  29: 1114152.459 ops/s
# Warmup Iteration  30: 1120116.152 ops/s
Iteration   1: 1116843.994 ops/s
Iteration   2: 1115753.621 ops/s
Iteration   3: 1112781.980 ops/s
Iteration   4: 1118098.826 ops/s
Iteration   5: 1121353.298 ops/s
Iteration   6: 1117134.734 ops/s
Iteration   7: 1122541.329 ops/s
Iteration   8: 1122274.044 ops/s
Iteration   9: 1119430.504 ops/s
Iteration  10: 1113899.902 ops/s
Iteration  11: 1119883.325 ops/s
Iteration  12: 1122670.863 ops/s
Iteration  13: 1117602.832 ops/s
Iteration  14: 1121049.056 ops/s
Iteration  15: 1119198.579 ops/s
Iteration  16: 1118812.402 ops/s
Iteration  17: 1117437.831 ops/s
Iteration  18: 1122054.763 ops/s
Iteration  19: 1115804.126 ops/s
Iteration  20: 1121477.033 ops/s
Iteration  21: 1118991.505 ops/s
Iteration  22: 1117416.536 ops/s
Iteration  23: 1114863.556 ops/s
Iteration  24: 1121669.667 ops/s
Iteration  25: 1119036.236 ops/s
Iteration  26: 1121084.552 ops/s
Iteration  27: 1119500.924 ops/s
Iteration  28: 1120024.979 ops/s
Iteration  29: 1121069.498 ops/s
Iteration  30: 1121348.424 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_empty_throws":
  1119036.964 ±(99.9%) 1771.527 ops/s [Average]
  (min, avg, max) = (1112781.980, 1119036.964, 1122670.863), stdev = 2651.539
  CI (99.9%): [1117265.437, 1120808.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1119036.964 ± 1771.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754226.841 ops/s
# Warmup Iteration   2: 773422.218 ops/s
# Warmup Iteration   3: 1013025.050 ops/s
# Warmup Iteration   4: 1019448.513 ops/s
# Warmup Iteration   5: 1019652.875 ops/s
# Warmup Iteration   6: 1008889.996 ops/s
# Warmup Iteration   7: 1017794.240 ops/s
# Warmup Iteration   8: 1018348.128 ops/s
# Warmup Iteration   9: 1016117.752 ops/s
# Warmup Iteration  10: 1016603.523 ops/s
# Warmup Iteration  11: 1015556.796 ops/s
# Warmup Iteration  12: 860846.805 ops/s
# Warmup Iteration  13: 1015766.901 ops/s
# Warmup Iteration  14: 1020924.637 ops/s
# Warmup Iteration  15: 1019474.136 ops/s
# Warmup Iteration  16: 1016790.494 ops/s
# Warmup Iteration  17: 1086157.637 ops/s
# Warmup Iteration  18: 1085628.494 ops/s
# Warmup Iteration  19: 1085523.724 ops/s
# Warmup Iteration  20: 1088494.118 ops/s
# Warmup Iteration  21: 1085731.554 ops/s
# Warmup Iteration  22: 1085645.024 ops/s
# Warmup Iteration  23: 1086775.399 ops/s
# Warmup Iteration  24: 1088151.125 ops/s
# Warmup Iteration  25: 1088933.791 ops/s
# Warmup Iteration  26: 1088630.507 ops/s
# Warmup Iteration  27: 1086788.066 ops/s
# Warmup Iteration  28: 1086889.199 ops/s
# Warmup Iteration  29: 1085439.936 ops/s
# Warmup Iteration  30: 1085914.690 ops/s
Iteration   1: 1086376.383 ops/s
Iteration   2: 1088027.580 ops/s
Iteration   3: 1086003.130 ops/s
Iteration   4: 1085773.740 ops/s
Iteration   5: 1088017.987 ops/s
Iteration   6: 1085390.828 ops/s
Iteration   7: 1085537.346 ops/s
Iteration   8: 1083554.516 ops/s
Iteration   9: 1084742.761 ops/s
Iteration  10: 1084555.121 ops/s
Iteration  11: 1084835.485 ops/s
Iteration  12: 1085837.341 ops/s
Iteration  13: 1089306.387 ops/s
Iteration  14: 1087624.424 ops/s
Iteration  15: 1087700.919 ops/s
Iteration  16: 1085013.250 ops/s
Iteration  17: 1090820.851 ops/s
Iteration  18: 1086656.859 ops/s
Iteration  19: 1085567.853 ops/s
Iteration  20: 1086264.985 ops/s
Iteration  21: 1087706.332 ops/s
Iteration  22: 1088815.353 ops/s
Iteration  23: 1087404.797 ops/s
Iteration  24: 1087672.523 ops/s
Iteration  25: 1085321.855 ops/s
Iteration  26: 1088187.619 ops/s
Iteration  27: 1090587.994 ops/s
Iteration  28: 1083275.174 ops/s
Iteration  29: 1089709.583 ops/s
Iteration  30: 1089193.537 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1086849.417 ±(99.9%) 1318.847 ops/s [Average]
  (min, avg, max) = (1083275.174, 1086849.417, 1090820.851), stdev = 1973.989
  CI (99.9%): [1085530.570, 1088168.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1086849.417 ± 1318.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12125648.361 ops/s
# Warmup Iteration   2: 27677576.083 ops/s
# Warmup Iteration   3: 22726046.699 ops/s
# Warmup Iteration   4: 27319594.693 ops/s
# Warmup Iteration   5: 27658464.515 ops/s
# Warmup Iteration   6: 27529376.124 ops/s
# Warmup Iteration   7: 27523261.599 ops/s
# Warmup Iteration   8: 27425235.677 ops/s
# Warmup Iteration   9: 27613226.436 ops/s
# Warmup Iteration  10: 27431405.029 ops/s
# Warmup Iteration  11: 27617313.527 ops/s
# Warmup Iteration  12: 27542583.470 ops/s
# Warmup Iteration  13: 27689509.220 ops/s
# Warmup Iteration  14: 27379338.504 ops/s
# Warmup Iteration  15: 27568391.451 ops/s
# Warmup Iteration  16: 27581066.135 ops/s
# Warmup Iteration  17: 27561912.067 ops/s
# Warmup Iteration  18: 27464748.304 ops/s
# Warmup Iteration  19: 27567557.325 ops/s
# Warmup Iteration  20: 27523322.930 ops/s
# Warmup Iteration  21: 27494665.604 ops/s
# Warmup Iteration  22: 27565675.611 ops/s
# Warmup Iteration  23: 27605074.881 ops/s
# Warmup Iteration  24: 27571222.934 ops/s
# Warmup Iteration  25: 27425204.837 ops/s
# Warmup Iteration  26: 27544892.295 ops/s
# Warmup Iteration  27: 27584004.284 ops/s
# Warmup Iteration  28: 27491616.203 ops/s
# Warmup Iteration  29: 27544241.529 ops/s
# Warmup Iteration  30: 27488725.315 ops/s
Iteration   1: 27546726.413 ops/s
Iteration   2: 27626893.973 ops/s
Iteration   3: 27567839.253 ops/s
Iteration   4: 27518192.033 ops/s
Iteration   5: 27455176.567 ops/s
Iteration   6: 27518297.014 ops/s
Iteration   7: 27536777.961 ops/s
Iteration   8: 27445239.399 ops/s
Iteration   9: 27597628.871 ops/s
Iteration  10: 27493851.741 ops/s
Iteration  11: 27609816.637 ops/s
Iteration  12: 27552572.786 ops/s
Iteration  13: 27471125.626 ops/s
Iteration  14: 27383818.950 ops/s
Iteration  15: 27533302.193 ops/s
Iteration  16: 27619934.953 ops/s
Iteration  17: 27587007.536 ops/s
Iteration  18: 27534969.712 ops/s
Iteration  19: 27547291.804 ops/s
Iteration  20: 27621690.531 ops/s
Iteration  21: 27616862.304 ops/s
Iteration  22: 27662304.540 ops/s
Iteration  23: 27495588.142 ops/s
Iteration  24: 27571938.205 ops/s
Iteration  25: 27558874.871 ops/s
Iteration  26: 27605514.708 ops/s
Iteration  27: 27423523.043 ops/s
Iteration  28: 27608860.200 ops/s
Iteration  29: 27696276.669 ops/s
Iteration  30: 27487451.740 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  27549844.946 ±(99.9%) 48307.448 ops/s [Average]
  (min, avg, max) = (27383818.950, 27549844.946, 27696276.669), stdev = 72304.320
  CI (99.9%): [27501537.497, 27598152.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  27549844.946 ± 48307.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624809.980 ops/s
# Warmup Iteration   2: 642410.736 ops/s
# Warmup Iteration   3: 782019.288 ops/s
# Warmup Iteration   4: 825672.312 ops/s
# Warmup Iteration   5: 827386.428 ops/s
# Warmup Iteration   6: 825820.010 ops/s
# Warmup Iteration   7: 827606.469 ops/s
# Warmup Iteration   8: 824260.932 ops/s
# Warmup Iteration   9: 827115.419 ops/s
# Warmup Iteration  10: 827194.133 ops/s
# Warmup Iteration  11: 825331.014 ops/s
# Warmup Iteration  12: 827148.595 ops/s
# Warmup Iteration  13: 726780.541 ops/s
# Warmup Iteration  14: 792099.018 ops/s
# Warmup Iteration  15: 827711.851 ops/s
# Warmup Iteration  16: 827575.416 ops/s
# Warmup Iteration  17: 871981.787 ops/s
# Warmup Iteration  18: 867292.602 ops/s
# Warmup Iteration  19: 873387.390 ops/s
# Warmup Iteration  20: 868658.158 ops/s
# Warmup Iteration  21: 871814.211 ops/s
# Warmup Iteration  22: 871046.624 ops/s
# Warmup Iteration  23: 870084.006 ops/s
# Warmup Iteration  24: 869460.487 ops/s
# Warmup Iteration  25: 869323.418 ops/s
# Warmup Iteration  26: 870917.128 ops/s
# Warmup Iteration  27: 869580.799 ops/s
# Warmup Iteration  28: 868202.919 ops/s
# Warmup Iteration  29: 870888.004 ops/s
# Warmup Iteration  30: 871106.640 ops/s
Iteration   1: 868933.199 ops/s
Iteration   2: 868591.567 ops/s
Iteration   3: 866306.413 ops/s
Iteration   4: 872936.150 ops/s
Iteration   5: 869013.519 ops/s
Iteration   6: 868561.002 ops/s
Iteration   7: 870005.726 ops/s
Iteration   8: 868781.668 ops/s
Iteration   9: 870890.753 ops/s
Iteration  10: 870344.839 ops/s
Iteration  11: 870593.715 ops/s
Iteration  12: 870605.947 ops/s
Iteration  13: 871717.644 ops/s
Iteration  14: 870947.814 ops/s
Iteration  15: 867831.878 ops/s
Iteration  16: 870002.635 ops/s
Iteration  17: 869413.625 ops/s
Iteration  18: 872932.154 ops/s
Iteration  19: 871304.003 ops/s
Iteration  20: 871832.645 ops/s
Iteration  21: 871167.263 ops/s
Iteration  22: 869999.702 ops/s
Iteration  23: 871273.192 ops/s
Iteration  24: 868730.644 ops/s
Iteration  25: 870384.286 ops/s
Iteration  26: 869578.884 ops/s
Iteration  27: 872508.604 ops/s
Iteration  28: 870033.456 ops/s
Iteration  29: 875930.623 ops/s
Iteration  30: 872560.555 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  870457.137 ±(99.9%) 1245.415 ops/s [Average]
  (min, avg, max) = (866306.413, 870457.137, 875930.623), stdev = 1864.078
  CI (99.9%): [869211.722, 871702.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  870457.137 ± 1245.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375108.108 ops/s
# Warmup Iteration   2: 720936.924 ops/s
# Warmup Iteration   3: 797744.464 ops/s
# Warmup Iteration   4: 803623.199 ops/s
# Warmup Iteration   5: 686472.480 ops/s
# Warmup Iteration   6: 784983.243 ops/s
# Warmup Iteration   7: 801418.194 ops/s
# Warmup Iteration   8: 801452.978 ops/s
# Warmup Iteration   9: 804000.546 ops/s
# Warmup Iteration  10: 802063.790 ops/s
# Warmup Iteration  11: 805501.545 ops/s
# Warmup Iteration  12: 803919.119 ops/s
# Warmup Iteration  13: 803800.787 ops/s
# Warmup Iteration  14: 804188.473 ops/s
# Warmup Iteration  15: 803487.196 ops/s
# Warmup Iteration  16: 803780.139 ops/s
# Warmup Iteration  17: 803599.043 ops/s
# Warmup Iteration  18: 803066.554 ops/s
# Warmup Iteration  19: 802804.027 ops/s
# Warmup Iteration  20: 804054.620 ops/s
# Warmup Iteration  21: 802940.665 ops/s
# Warmup Iteration  22: 804057.449 ops/s
# Warmup Iteration  23: 801840.832 ops/s
# Warmup Iteration  24: 803360.859 ops/s
# Warmup Iteration  25: 802586.970 ops/s
# Warmup Iteration  26: 802245.026 ops/s
# Warmup Iteration  27: 803040.743 ops/s
# Warmup Iteration  28: 803052.344 ops/s
# Warmup Iteration  29: 804077.731 ops/s
# Warmup Iteration  30: 802745.767 ops/s
Iteration   1: 804652.233 ops/s
Iteration   2: 801275.925 ops/s
Iteration   3: 803641.139 ops/s
Iteration   4: 801139.734 ops/s
Iteration   5: 804359.960 ops/s
Iteration   6: 804089.044 ops/s
Iteration   7: 803621.566 ops/s
Iteration   8: 803996.081 ops/s
Iteration   9: 805386.097 ops/s
Iteration  10: 802911.492 ops/s
Iteration  11: 803358.237 ops/s
Iteration  12: 801966.215 ops/s
Iteration  13: 802940.819 ops/s
Iteration  14: 802522.563 ops/s
Iteration  15: 804522.781 ops/s
Iteration  16: 804554.731 ops/s
Iteration  17: 805890.013 ops/s
Iteration  18: 802884.794 ops/s
Iteration  19: 798331.153 ops/s
Iteration  20: 802232.831 ops/s
Iteration  21: 804051.225 ops/s
Iteration  22: 804496.048 ops/s
Iteration  23: 803689.933 ops/s
Iteration  24: 800456.381 ops/s
Iteration  25: 801125.933 ops/s
Iteration  26: 804494.367 ops/s
Iteration  27: 801957.017 ops/s
Iteration  28: 804324.104 ops/s
Iteration  29: 804327.355 ops/s
Iteration  30: 805524.463 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupBy":
  803290.808 ±(99.9%) 1117.135 ops/s [Average]
  (min, avg, max) = (798331.153, 803290.808, 805890.013), stdev = 1672.075
  CI (99.9%): [802173.673, 804407.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupBy  thrpt   30  803290.808 ± 1117.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 124704.739 ops/s
# Warmup Iteration   2: 204619.734 ops/s
# Warmup Iteration   3: 245987.927 ops/s
# Warmup Iteration   4: 247696.932 ops/s
# Warmup Iteration   5: 248202.112 ops/s
# Warmup Iteration   6: 231469.286 ops/s
# Warmup Iteration   7: 219037.830 ops/s
# Warmup Iteration   8: 248164.736 ops/s
# Warmup Iteration   9: 248676.681 ops/s
# Warmup Iteration  10: 248058.389 ops/s
# Warmup Iteration  11: 248284.241 ops/s
# Warmup Iteration  12: 248227.272 ops/s
# Warmup Iteration  13: 248763.727 ops/s
# Warmup Iteration  14: 248236.880 ops/s
# Warmup Iteration  15: 247960.257 ops/s
# Warmup Iteration  16: 248380.369 ops/s
# Warmup Iteration  17: 246857.780 ops/s
# Warmup Iteration  18: 246741.538 ops/s
# Warmup Iteration  19: 246889.592 ops/s
# Warmup Iteration  20: 247428.529 ops/s
# Warmup Iteration  21: 247037.441 ops/s
# Warmup Iteration  22: 247343.561 ops/s
# Warmup Iteration  23: 247322.149 ops/s
# Warmup Iteration  24: 247401.823 ops/s
# Warmup Iteration  25: 247573.338 ops/s
# Warmup Iteration  26: 247350.442 ops/s
# Warmup Iteration  27: 247388.300 ops/s
# Warmup Iteration  28: 247709.925 ops/s
# Warmup Iteration  29: 247555.152 ops/s
# Warmup Iteration  30: 247019.208 ops/s
Iteration   1: 246442.743 ops/s
Iteration   2: 248029.954 ops/s
Iteration   3: 246867.917 ops/s
Iteration   4: 246976.079 ops/s
Iteration   5: 246990.734 ops/s
Iteration   6: 247972.651 ops/s
Iteration   7: 246780.331 ops/s
Iteration   8: 247595.563 ops/s
Iteration   9: 246524.197 ops/s
Iteration  10: 247439.862 ops/s
Iteration  11: 247172.002 ops/s
Iteration  12: 247163.651 ops/s
Iteration  13: 246891.621 ops/s
Iteration  14: 247575.982 ops/s
Iteration  15: 247479.636 ops/s
Iteration  16: 247310.090 ops/s
Iteration  17: 246866.679 ops/s
Iteration  18: 247924.379 ops/s
Iteration  19: 247100.989 ops/s
Iteration  20: 247918.175 ops/s
Iteration  21: 246268.925 ops/s
Iteration  22: 247000.749 ops/s
Iteration  23: 247690.086 ops/s
Iteration  24: 246388.476 ops/s
Iteration  25: 246253.187 ops/s
Iteration  26: 247702.864 ops/s
Iteration  27: 247322.447 ops/s
Iteration  28: 248098.301 ops/s
Iteration  29: 247284.057 ops/s
Iteration  30: 247250.814 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByEach":
  247209.438 ±(99.9%) 354.927 ops/s [Average]
  (min, avg, max) = (246253.187, 247209.438, 248098.301), stdev = 531.237
  CI (99.9%): [246854.512, 247564.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupByEach  thrpt   30  247209.438 ± 354.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3404492.685 ops/s
# Warmup Iteration   2: 7379285.307 ops/s
# Warmup Iteration   3: 7633132.674 ops/s
# Warmup Iteration   4: 7505195.087 ops/s
# Warmup Iteration   5: 6496621.163 ops/s
# Warmup Iteration   6: 7692663.919 ops/s
# Warmup Iteration   7: 7707695.471 ops/s
# Warmup Iteration   8: 7669162.483 ops/s
# Warmup Iteration   9: 7687295.399 ops/s
# Warmup Iteration  10: 7711457.990 ops/s
# Warmup Iteration  11: 7687346.606 ops/s
# Warmup Iteration  12: 7705415.866 ops/s
# Warmup Iteration  13: 7705772.242 ops/s
# Warmup Iteration  14: 7707590.316 ops/s
# Warmup Iteration  15: 7693064.665 ops/s
# Warmup Iteration  16: 7670037.220 ops/s
# Warmup Iteration  17: 7690197.933 ops/s
# Warmup Iteration  18: 7660720.692 ops/s
# Warmup Iteration  19: 7685079.714 ops/s
# Warmup Iteration  20: 7693169.209 ops/s
# Warmup Iteration  21: 7671714.472 ops/s
# Warmup Iteration  22: 7684590.744 ops/s
# Warmup Iteration  23: 7698354.683 ops/s
# Warmup Iteration  24: 7711167.968 ops/s
# Warmup Iteration  25: 7715480.938 ops/s
# Warmup Iteration  26: 7695728.831 ops/s
# Warmup Iteration  27: 7696949.008 ops/s
# Warmup Iteration  28: 7702874.283 ops/s
# Warmup Iteration  29: 7690852.124 ops/s
# Warmup Iteration  30: 7710655.400 ops/s
Iteration   1: 7673175.417 ops/s
Iteration   2: 7709134.762 ops/s
Iteration   3: 7691151.995 ops/s
Iteration   4: 7703995.470 ops/s
Iteration   5: 7721389.885 ops/s
Iteration   6: 7679390.080 ops/s
Iteration   7: 7701832.885 ops/s
Iteration   8: 7682327.450 ops/s
Iteration   9: 7690675.846 ops/s
Iteration  10: 7703109.084 ops/s
Iteration  11: 7684936.570 ops/s
Iteration  12: 7684053.448 ops/s
Iteration  13: 7718796.842 ops/s
Iteration  14: 7693522.372 ops/s
Iteration  15: 7672787.922 ops/s
Iteration  16: 7684889.367 ops/s
Iteration  17: 7698579.837 ops/s
Iteration  18: 7705130.366 ops/s
Iteration  19: 7681943.672 ops/s
Iteration  20: 7706145.682 ops/s
Iteration  21: 7709247.496 ops/s
Iteration  22: 7702020.678 ops/s
Iteration  23: 7696595.225 ops/s
Iteration  24: 7685838.087 ops/s
Iteration  25: 7685451.572 ops/s
Iteration  26: 7671328.684 ops/s
Iteration  27: 7698029.157 ops/s
Iteration  28: 7671856.701 ops/s
Iteration  29: 7692059.344 ops/s
Iteration  30: 7672501.240 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey":
  7692396.571 ±(99.9%) 9321.878 ops/s [Average]
  (min, avg, max) = (7671328.684, 7692396.571, 7721389.885), stdev = 13952.549
  CI (99.9%): [7683074.694, 7701718.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  7692396.571 ± 9321.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2131225.924 ops/s
# Warmup Iteration   2: 4236949.617 ops/s
# Warmup Iteration   3: 4476688.934 ops/s
# Warmup Iteration   4: 4510110.803 ops/s
# Warmup Iteration   5: 3698145.846 ops/s
# Warmup Iteration   6: 4505921.012 ops/s
# Warmup Iteration   7: 4494718.339 ops/s
# Warmup Iteration   8: 4498851.901 ops/s
# Warmup Iteration   9: 4505242.018 ops/s
# Warmup Iteration  10: 4490456.770 ops/s
# Warmup Iteration  11: 4511064.066 ops/s
# Warmup Iteration  12: 4511312.645 ops/s
# Warmup Iteration  13: 4503420.562 ops/s
# Warmup Iteration  14: 4500229.553 ops/s
# Warmup Iteration  15: 4497102.967 ops/s
# Warmup Iteration  16: 4505521.915 ops/s
# Warmup Iteration  17: 4503832.489 ops/s
# Warmup Iteration  18: 4509354.262 ops/s
# Warmup Iteration  19: 4504126.027 ops/s
# Warmup Iteration  20: 4504859.900 ops/s
# Warmup Iteration  21: 4515784.918 ops/s
# Warmup Iteration  22: 4516248.548 ops/s
# Warmup Iteration  23: 4511736.644 ops/s
# Warmup Iteration  24: 4512790.233 ops/s
# Warmup Iteration  25: 4517821.715 ops/s
# Warmup Iteration  26: 4512243.738 ops/s
# Warmup Iteration  27: 4507914.393 ops/s
# Warmup Iteration  28: 4508270.966 ops/s
# Warmup Iteration  29: 4504988.823 ops/s
# Warmup Iteration  30: 4507233.571 ops/s
Iteration   1: 4508791.955 ops/s
Iteration   2: 4518617.872 ops/s
Iteration   3: 4499813.931 ops/s
Iteration   4: 4511382.735 ops/s
Iteration   5: 4516456.280 ops/s
Iteration   6: 4514635.776 ops/s
Iteration   7: 4511847.430 ops/s
Iteration   8: 4504841.692 ops/s
Iteration   9: 4513886.283 ops/s
Iteration  10: 4509719.667 ops/s
Iteration  11: 4520826.497 ops/s
Iteration  12: 4503883.251 ops/s
Iteration  13: 4503487.456 ops/s
Iteration  14: 4517804.630 ops/s
Iteration  15: 4509830.200 ops/s
Iteration  16: 4503788.111 ops/s
Iteration  17: 4502778.964 ops/s
Iteration  18: 4510249.865 ops/s
Iteration  19: 4508736.681 ops/s
Iteration  20: 4501203.402 ops/s
Iteration  21: 4513477.974 ops/s
Iteration  22: 4524692.100 ops/s
Iteration  23: 4503314.382 ops/s
Iteration  24: 4509030.441 ops/s
Iteration  25: 4499904.167 ops/s
Iteration  26: 4507738.584 ops/s
Iteration  27: 4528214.249 ops/s
Iteration  28: 4494072.695 ops/s
Iteration  29: 4500690.214 ops/s
Iteration  30: 4512814.452 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target":
  4509551.064 ±(99.9%) 5222.757 ops/s [Average]
  (min, avg, max) = (4494072.695, 4509551.064, 4528214.249), stdev = 7817.178
  CI (99.9%): [4504328.307, 4514773.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4509551.064 ± 5222.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507100.162 ops/s
# Warmup Iteration   2: 617452.398 ops/s
# Warmup Iteration   3: 794024.343 ops/s
# Warmup Iteration   4: 798619.461 ops/s
# Warmup Iteration   5: 799912.800 ops/s
# Warmup Iteration   6: 797551.540 ops/s
# Warmup Iteration   7: 796696.101 ops/s
# Warmup Iteration   8: 796769.889 ops/s
# Warmup Iteration   9: 677879.107 ops/s
# Warmup Iteration  10: 780932.828 ops/s
# Warmup Iteration  11: 797558.684 ops/s
# Warmup Iteration  12: 799584.970 ops/s
# Warmup Iteration  13: 799317.232 ops/s
# Warmup Iteration  14: 799061.641 ops/s
# Warmup Iteration  15: 799491.981 ops/s
# Warmup Iteration  16: 796418.530 ops/s
# Warmup Iteration  17: 838604.969 ops/s
# Warmup Iteration  18: 837855.200 ops/s
# Warmup Iteration  19: 839262.580 ops/s
# Warmup Iteration  20: 837288.973 ops/s
# Warmup Iteration  21: 835504.723 ops/s
# Warmup Iteration  22: 837531.780 ops/s
# Warmup Iteration  23: 835890.500 ops/s
# Warmup Iteration  24: 835409.179 ops/s
# Warmup Iteration  25: 838786.622 ops/s
# Warmup Iteration  26: 835503.542 ops/s
# Warmup Iteration  27: 838693.598 ops/s
# Warmup Iteration  28: 839310.296 ops/s
# Warmup Iteration  29: 839046.263 ops/s
# Warmup Iteration  30: 834768.240 ops/s
Iteration   1: 837726.618 ops/s
Iteration   2: 838982.520 ops/s
Iteration   3: 837799.009 ops/s
Iteration   4: 833827.383 ops/s
Iteration   5: 833788.503 ops/s
Iteration   6: 837478.455 ops/s
Iteration   7: 839855.806 ops/s
Iteration   8: 837618.253 ops/s
Iteration   9: 838646.399 ops/s
Iteration  10: 839882.919 ops/s
Iteration  11: 835227.590 ops/s
Iteration  12: 837628.091 ops/s
Iteration  13: 840326.486 ops/s
Iteration  14: 836116.635 ops/s
Iteration  15: 840328.583 ops/s
Iteration  16: 837292.864 ops/s
Iteration  17: 836908.558 ops/s
Iteration  18: 838921.542 ops/s
Iteration  19: 838847.660 ops/s
Iteration  20: 839564.833 ops/s
Iteration  21: 839654.832 ops/s
Iteration  22: 838106.031 ops/s
Iteration  23: 841692.003 ops/s
Iteration  24: 837870.191 ops/s
Iteration  25: 840523.273 ops/s
Iteration  26: 838036.762 ops/s
Iteration  27: 840026.457 ops/s
Iteration  28: 840435.503 ops/s
Iteration  29: 834859.858 ops/s
Iteration  30: 838249.986 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  838207.453 ±(99.9%) 1321.183 ops/s [Average]
  (min, avg, max) = (833788.503, 838207.453, 841692.003), stdev = 1977.485
  CI (99.9%): [836886.270, 839528.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  838207.453 ± 1321.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521240.879 ops/s
# Warmup Iteration   2: 564387.881 ops/s
# Warmup Iteration   3: 747236.269 ops/s
# Warmup Iteration   4: 747820.687 ops/s
# Warmup Iteration   5: 744295.120 ops/s
# Warmup Iteration   6: 748541.165 ops/s
# Warmup Iteration   7: 749394.345 ops/s
# Warmup Iteration   8: 750359.703 ops/s
# Warmup Iteration   9: 750138.001 ops/s
# Warmup Iteration  10: 748998.875 ops/s
# Warmup Iteration  11: 622702.532 ops/s
# Warmup Iteration  12: 748994.223 ops/s
# Warmup Iteration  13: 750611.669 ops/s
# Warmup Iteration  14: 749656.034 ops/s
# Warmup Iteration  15: 749630.109 ops/s
# Warmup Iteration  16: 749146.643 ops/s
# Warmup Iteration  17: 785815.164 ops/s
# Warmup Iteration  18: 786137.458 ops/s
# Warmup Iteration  19: 785796.158 ops/s
# Warmup Iteration  20: 785800.596 ops/s
# Warmup Iteration  21: 786489.529 ops/s
# Warmup Iteration  22: 784466.521 ops/s
# Warmup Iteration  23: 785994.221 ops/s
# Warmup Iteration  24: 786294.247 ops/s
# Warmup Iteration  25: 787599.927 ops/s
# Warmup Iteration  26: 783953.342 ops/s
# Warmup Iteration  27: 785409.920 ops/s
# Warmup Iteration  28: 787010.550 ops/s
# Warmup Iteration  29: 784699.970 ops/s
# Warmup Iteration  30: 785184.755 ops/s
Iteration   1: 784608.693 ops/s
Iteration   2: 783620.238 ops/s
Iteration   3: 786498.031 ops/s
Iteration   4: 785589.885 ops/s
Iteration   5: 782106.477 ops/s
Iteration   6: 783975.216 ops/s
Iteration   7: 786077.737 ops/s
Iteration   8: 784012.493 ops/s
Iteration   9: 788604.388 ops/s
Iteration  10: 784807.326 ops/s
Iteration  11: 785570.053 ops/s
Iteration  12: 784535.954 ops/s
Iteration  13: 784606.557 ops/s
Iteration  14: 783489.518 ops/s
Iteration  15: 784997.095 ops/s
Iteration  16: 788060.385 ops/s
Iteration  17: 785332.656 ops/s
Iteration  18: 786594.491 ops/s
Iteration  19: 784400.262 ops/s
Iteration  20: 788351.007 ops/s
Iteration  21: 786430.885 ops/s
Iteration  22: 782087.927 ops/s
Iteration  23: 784878.541 ops/s
Iteration  24: 783967.520 ops/s
Iteration  25: 787732.574 ops/s
Iteration  26: 785997.630 ops/s
Iteration  27: 787559.569 ops/s
Iteration  28: 787811.034 ops/s
Iteration  29: 784711.581 ops/s
Iteration  30: 786662.899 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  785455.954 ±(99.9%) 1156.920 ops/s [Average]
  (min, avg, max) = (782087.927, 785455.954, 788604.388), stdev = 1731.624
  CI (99.9%): [784299.034, 786612.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  785455.954 ± 1156.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20156137.547 ops/s
# Warmup Iteration   2: 21566218.277 ops/s
# Warmup Iteration   3: 18658405.056 ops/s
# Warmup Iteration   4: 21572164.320 ops/s
# Warmup Iteration   5: 21997054.752 ops/s
# Warmup Iteration   6: 22003974.993 ops/s
# Warmup Iteration   7: 21995194.458 ops/s
# Warmup Iteration   8: 22003894.982 ops/s
# Warmup Iteration   9: 22037440.339 ops/s
# Warmup Iteration  10: 21942368.674 ops/s
# Warmup Iteration  11: 22013982.612 ops/s
# Warmup Iteration  12: 21971854.754 ops/s
# Warmup Iteration  13: 22010235.702 ops/s
# Warmup Iteration  14: 22029334.410 ops/s
# Warmup Iteration  15: 22008765.403 ops/s
# Warmup Iteration  16: 22037466.272 ops/s
# Warmup Iteration  17: 22011037.700 ops/s
# Warmup Iteration  18: 21983982.438 ops/s
# Warmup Iteration  19: 22012547.026 ops/s
# Warmup Iteration  20: 22001549.669 ops/s
# Warmup Iteration  21: 22000226.718 ops/s
# Warmup Iteration  22: 22017504.980 ops/s
# Warmup Iteration  23: 22015177.348 ops/s
# Warmup Iteration  24: 22023344.786 ops/s
# Warmup Iteration  25: 22073186.421 ops/s
# Warmup Iteration  26: 22012260.701 ops/s
# Warmup Iteration  27: 22017263.651 ops/s
# Warmup Iteration  28: 22024512.683 ops/s
# Warmup Iteration  29: 22007412.722 ops/s
# Warmup Iteration  30: 21983245.963 ops/s
Iteration   1: 22057336.307 ops/s
Iteration   2: 22018023.745 ops/s
Iteration   3: 22045170.493 ops/s
Iteration   4: 21990040.225 ops/s
Iteration   5: 22083312.849 ops/s
Iteration   6: 22019348.715 ops/s
Iteration   7: 22004582.908 ops/s
Iteration   8: 21991021.703 ops/s
Iteration   9: 21988819.631 ops/s
Iteration  10: 22042559.942 ops/s
Iteration  11: 22045541.328 ops/s
Iteration  12: 22041621.196 ops/s
Iteration  13: 22094069.409 ops/s
Iteration  14: 22064028.012 ops/s
Iteration  15: 22022210.509 ops/s
Iteration  16: 22038643.333 ops/s
Iteration  17: 22022498.743 ops/s
Iteration  18: 22011253.917 ops/s
Iteration  19: 21973208.958 ops/s
Iteration  20: 22012122.661 ops/s
Iteration  21: 22034239.273 ops/s
Iteration  22: 22077317.951 ops/s
Iteration  23: 22018695.582 ops/s
Iteration  24: 21982159.354 ops/s
Iteration  25: 22011969.809 ops/s
Iteration  26: 22027698.794 ops/s
Iteration  27: 22052800.868 ops/s
Iteration  28: 21966469.102 ops/s
Iteration  29: 21995648.029 ops/s
Iteration  30: 22029545.522 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_indexOf":
  22025398.629 ±(99.9%) 21317.796 ops/s [Average]
  (min, avg, max) = (21966469.102, 22025398.629, 22094069.409), stdev = 31907.476
  CI (99.9%): [22004080.833, 22046716.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_indexOf  thrpt   30  22025398.629 ± 21317.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6903784.836 ops/s
# Warmup Iteration   2: 12005424.482 ops/s
# Warmup Iteration   3: 13119422.514 ops/s
# Warmup Iteration   4: 13202849.027 ops/s
# Warmup Iteration   5: 12969536.538 ops/s
# Warmup Iteration   6: 11181173.867 ops/s
# Warmup Iteration   7: 13164373.591 ops/s
# Warmup Iteration   8: 13211350.577 ops/s
# Warmup Iteration   9: 13211044.879 ops/s
# Warmup Iteration  10: 13184626.850 ops/s
# Warmup Iteration  11: 13205836.737 ops/s
# Warmup Iteration  12: 13152893.144 ops/s
# Warmup Iteration  13: 13232027.111 ops/s
# Warmup Iteration  14: 13227747.385 ops/s
# Warmup Iteration  15: 13181854.554 ops/s
# Warmup Iteration  16: 13178436.816 ops/s
# Warmup Iteration  17: 13219239.167 ops/s
# Warmup Iteration  18: 13195899.301 ops/s
# Warmup Iteration  19: 13223603.123 ops/s
# Warmup Iteration  20: 13177811.640 ops/s
# Warmup Iteration  21: 13197379.221 ops/s
# Warmup Iteration  22: 13244548.381 ops/s
# Warmup Iteration  23: 13189102.625 ops/s
# Warmup Iteration  24: 13214262.319 ops/s
# Warmup Iteration  25: 13176512.289 ops/s
# Warmup Iteration  26: 13200457.525 ops/s
# Warmup Iteration  27: 13198937.888 ops/s
# Warmup Iteration  28: 13175671.429 ops/s
# Warmup Iteration  29: 13186737.818 ops/s
# Warmup Iteration  30: 13190538.431 ops/s
Iteration   1: 13225324.858 ops/s
Iteration   2: 13210232.902 ops/s
Iteration   3: 13162648.733 ops/s
Iteration   4: 13189843.022 ops/s
Iteration   5: 13141774.514 ops/s
Iteration   6: 13188254.997 ops/s
Iteration   7: 13179074.241 ops/s
Iteration   8: 13207248.266 ops/s
Iteration   9: 13216679.346 ops/s
Iteration  10: 13198649.671 ops/s
Iteration  11: 13209250.799 ops/s
Iteration  12: 13190917.738 ops/s
Iteration  13: 13181267.652 ops/s
Iteration  14: 13155080.115 ops/s
Iteration  15: 13165990.559 ops/s
Iteration  16: 13153727.311 ops/s
Iteration  17: 13157393.548 ops/s
Iteration  18: 13232565.505 ops/s
Iteration  19: 13214233.356 ops/s
Iteration  20: 13158435.630 ops/s
Iteration  21: 13238340.418 ops/s
Iteration  22: 13146943.224 ops/s
Iteration  23: 13246798.240 ops/s
Iteration  24: 13211094.587 ops/s
Iteration  25: 13211975.509 ops/s
Iteration  26: 13171074.107 ops/s
Iteration  27: 13154583.015 ops/s
Iteration  28: 13213769.335 ops/s
Iteration  29: 13172998.519 ops/s
Iteration  30: 13177502.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectInto":
  13189455.740 ±(99.9%) 19582.655 ops/s [Average]
  (min, avg, max) = (13141774.514, 13189455.740, 13246798.240), stdev = 29310.398
  CI (99.9%): [13169873.085, 13209038.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectInto  thrpt   30  13189455.740 ± 19582.655  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6811888.359 ops/s
# Warmup Iteration   2: 11941483.710 ops/s
# Warmup Iteration   3: 13029840.915 ops/s
# Warmup Iteration   4: 13124322.992 ops/s
# Warmup Iteration   5: 13059840.979 ops/s
# Warmup Iteration   6: 10909795.384 ops/s
# Warmup Iteration   7: 13115569.689 ops/s
# Warmup Iteration   8: 13109474.361 ops/s
# Warmup Iteration   9: 13131036.348 ops/s
# Warmup Iteration  10: 13129775.512 ops/s
# Warmup Iteration  11: 13126187.956 ops/s
# Warmup Iteration  12: 13124362.962 ops/s
# Warmup Iteration  13: 13101535.065 ops/s
# Warmup Iteration  14: 13138873.574 ops/s
# Warmup Iteration  15: 13136115.347 ops/s
# Warmup Iteration  16: 13120769.798 ops/s
# Warmup Iteration  17: 13154735.447 ops/s
# Warmup Iteration  18: 13122038.560 ops/s
# Warmup Iteration  19: 13151718.489 ops/s
# Warmup Iteration  20: 13147067.701 ops/s
# Warmup Iteration  21: 13143021.849 ops/s
# Warmup Iteration  22: 13111184.601 ops/s
# Warmup Iteration  23: 13117144.033 ops/s
# Warmup Iteration  24: 13139139.868 ops/s
# Warmup Iteration  25: 13103399.706 ops/s
# Warmup Iteration  26: 13133674.184 ops/s
# Warmup Iteration  27: 13126810.167 ops/s
# Warmup Iteration  28: 13145763.881 ops/s
# Warmup Iteration  29: 13140303.284 ops/s
# Warmup Iteration  30: 13131811.055 ops/s
Iteration   1: 13140227.540 ops/s
Iteration   2: 13102081.559 ops/s
Iteration   3: 13139449.324 ops/s
Iteration   4: 13116491.194 ops/s
Iteration   5: 13142916.604 ops/s
Iteration   6: 13096534.096 ops/s
Iteration   7: 13108765.346 ops/s
Iteration   8: 13146674.603 ops/s
Iteration   9: 13103503.947 ops/s
Iteration  10: 13117894.656 ops/s
Iteration  11: 13115121.321 ops/s
Iteration  12: 13171319.126 ops/s
Iteration  13: 13113518.511 ops/s
Iteration  14: 13136627.086 ops/s
Iteration  15: 13134510.503 ops/s
Iteration  16: 13162105.440 ops/s
Iteration  17: 13150675.298 ops/s
Iteration  18: 13086926.658 ops/s
Iteration  19: 13112129.119 ops/s
Iteration  20: 13153627.622 ops/s
Iteration  21: 13070576.773 ops/s
Iteration  22: 13150984.896 ops/s
Iteration  23: 13098105.500 ops/s
Iteration  24: 13136957.522 ops/s
Iteration  25: 13152158.816 ops/s
Iteration  26: 13142985.401 ops/s
Iteration  27: 13133205.280 ops/s
Iteration  28: 13142700.088 ops/s
Iteration  29: 13138917.260 ops/s
Iteration  30: 13130676.374 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoDouble":
  13128278.915 ±(99.9%) 15856.779 ops/s [Average]
  (min, avg, max) = (13070576.773, 13128278.915, 13171319.126), stdev = 23733.681
  CI (99.9%): [13112422.137, 13144135.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  13128278.915 ± 15856.779  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6833766.694 ops/s
# Warmup Iteration   2: 12030307.861 ops/s
# Warmup Iteration   3: 13116651.496 ops/s
# Warmup Iteration   4: 13185544.154 ops/s
# Warmup Iteration   5: 13012068.878 ops/s
# Warmup Iteration   6: 11179723.698 ops/s
# Warmup Iteration   7: 13203811.641 ops/s
# Warmup Iteration   8: 13218558.238 ops/s
# Warmup Iteration   9: 13204189.406 ops/s
# Warmup Iteration  10: 13218423.639 ops/s
# Warmup Iteration  11: 13216203.457 ops/s
# Warmup Iteration  12: 13232749.579 ops/s
# Warmup Iteration  13: 13217189.923 ops/s
# Warmup Iteration  14: 13161372.142 ops/s
# Warmup Iteration  15: 13241902.257 ops/s
# Warmup Iteration  16: 13210300.753 ops/s
# Warmup Iteration  17: 13218098.782 ops/s
# Warmup Iteration  18: 13190223.063 ops/s
# Warmup Iteration  19: 13229023.983 ops/s
# Warmup Iteration  20: 13211329.161 ops/s
# Warmup Iteration  21: 13205193.035 ops/s
# Warmup Iteration  22: 13223562.999 ops/s
# Warmup Iteration  23: 13220348.646 ops/s
# Warmup Iteration  24: 13218376.367 ops/s
# Warmup Iteration  25: 13229954.129 ops/s
# Warmup Iteration  26: 13198561.374 ops/s
# Warmup Iteration  27: 13204522.034 ops/s
# Warmup Iteration  28: 13217989.393 ops/s
# Warmup Iteration  29: 13215161.515 ops/s
# Warmup Iteration  30: 13228876.297 ops/s
Iteration   1: 13236311.589 ops/s
Iteration   2: 13200474.736 ops/s
Iteration   3: 13251120.494 ops/s
Iteration   4: 13215283.143 ops/s
Iteration   5: 13221928.615 ops/s
Iteration   6: 13259372.315 ops/s
Iteration   7: 13238077.919 ops/s
Iteration   8: 13215749.265 ops/s
Iteration   9: 13241644.563 ops/s
Iteration  10: 13165539.869 ops/s
Iteration  11: 13239774.430 ops/s
Iteration  12: 13190327.730 ops/s
Iteration  13: 13237519.754 ops/s
Iteration  14: 13198445.216 ops/s
Iteration  15: 13204235.045 ops/s
Iteration  16: 13255944.435 ops/s
Iteration  17: 13219012.119 ops/s
Iteration  18: 13237749.433 ops/s
Iteration  19: 13215253.495 ops/s
Iteration  20: 13202478.419 ops/s
Iteration  21: 13247709.480 ops/s
Iteration  22: 13204260.928 ops/s
Iteration  23: 13248039.654 ops/s
Iteration  24: 13201943.916 ops/s
Iteration  25: 13133080.469 ops/s
Iteration  26: 13218101.062 ops/s
Iteration  27: 13204926.415 ops/s
Iteration  28: 13227969.230 ops/s
Iteration  29: 13181244.217 ops/s
Iteration  30: 13248423.632 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoFloat":
  13218731.386 ±(99.9%) 18994.199 ops/s [Average]
  (min, avg, max) = (13133080.469, 13218731.386, 13259372.315), stdev = 28429.625
  CI (99.9%): [13199737.187, 13237725.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  13218731.386 ± 18994.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6895848.648 ops/s
# Warmup Iteration   2: 12119207.758 ops/s
# Warmup Iteration   3: 13246732.035 ops/s
# Warmup Iteration   4: 13331638.267 ops/s
# Warmup Iteration   5: 12878238.913 ops/s
# Warmup Iteration   6: 11470719.804 ops/s
# Warmup Iteration   7: 13342541.316 ops/s
# Warmup Iteration   8: 13359576.766 ops/s
# Warmup Iteration   9: 13371920.687 ops/s
# Warmup Iteration  10: 13367817.115 ops/s
# Warmup Iteration  11: 13354998.553 ops/s
# Warmup Iteration  12: 13321407.663 ops/s
# Warmup Iteration  13: 13329004.428 ops/s
# Warmup Iteration  14: 13332254.470 ops/s
# Warmup Iteration  15: 13347544.840 ops/s
# Warmup Iteration  16: 13311062.848 ops/s
# Warmup Iteration  17: 13359347.178 ops/s
# Warmup Iteration  18: 13336568.411 ops/s
# Warmup Iteration  19: 13351066.472 ops/s
# Warmup Iteration  20: 13344260.000 ops/s
# Warmup Iteration  21: 13323955.261 ops/s
# Warmup Iteration  22: 13366862.889 ops/s
# Warmup Iteration  23: 13346040.975 ops/s
# Warmup Iteration  24: 13335803.171 ops/s
# Warmup Iteration  25: 13346855.666 ops/s
# Warmup Iteration  26: 13329696.527 ops/s
# Warmup Iteration  27: 13304441.133 ops/s
# Warmup Iteration  28: 13337664.529 ops/s
# Warmup Iteration  29: 13336448.956 ops/s
# Warmup Iteration  30: 13320271.010 ops/s
Iteration   1: 13264664.630 ops/s
Iteration   2: 13351696.337 ops/s
Iteration   3: 13307623.125 ops/s
Iteration   4: 13344285.791 ops/s
Iteration   5: 13321535.838 ops/s
Iteration   6: 13346380.354 ops/s
Iteration   7: 13319830.496 ops/s
Iteration   8: 13349596.669 ops/s
Iteration   9: 13301276.016 ops/s
Iteration  10: 13323722.402 ops/s
Iteration  11: 13351358.527 ops/s
Iteration  12: 13380916.554 ops/s
Iteration  13: 13325291.003 ops/s
Iteration  14: 13354820.330 ops/s
Iteration  15: 13330657.260 ops/s
Iteration  16: 13371879.206 ops/s
Iteration  17: 13384177.665 ops/s
Iteration  18: 13329922.190 ops/s
Iteration  19: 13324756.248 ops/s
Iteration  20: 13321200.655 ops/s
Iteration  21: 13302040.936 ops/s
Iteration  22: 13342382.036 ops/s
Iteration  23: 13323327.228 ops/s
Iteration  24: 13335393.868 ops/s
Iteration  25: 13341632.076 ops/s
Iteration  26: 13339292.337 ops/s
Iteration  27: 13345330.841 ops/s
Iteration  28: 13340726.136 ops/s
Iteration  29: 13348034.954 ops/s
Iteration  30: 13351309.201 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoInt":
  13335835.364 ±(99.9%) 16155.049 ops/s [Average]
  (min, avg, max) = (13264664.630, 13335835.364, 13384177.665), stdev = 24180.119
  CI (99.9%): [13319680.314, 13351990.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectIntoInt  thrpt   30  13335835.364 ± 16155.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4386935.549 ops/s
# Warmup Iteration   2: 10920521.076 ops/s
# Warmup Iteration   3: 13707810.653 ops/s
# Warmup Iteration   4: 13793096.401 ops/s
# Warmup Iteration   5: 13781263.601 ops/s
# Warmup Iteration   6: 11424188.812 ops/s
# Warmup Iteration   7: 13819585.178 ops/s
# Warmup Iteration   8: 13790260.028 ops/s
# Warmup Iteration   9: 13800057.945 ops/s
# Warmup Iteration  10: 13788369.576 ops/s
# Warmup Iteration  11: 13820061.407 ops/s
# Warmup Iteration  12: 13793791.142 ops/s
# Warmup Iteration  13: 13791638.109 ops/s
# Warmup Iteration  14: 13790172.495 ops/s
# Warmup Iteration  15: 13761462.597 ops/s
# Warmup Iteration  16: 13779208.611 ops/s
# Warmup Iteration  17: 13786220.506 ops/s
# Warmup Iteration  18: 13812102.163 ops/s
# Warmup Iteration  19: 13815747.193 ops/s
# Warmup Iteration  20: 13798594.606 ops/s
# Warmup Iteration  21: 13784316.770 ops/s
# Warmup Iteration  22: 13780956.866 ops/s
# Warmup Iteration  23: 13806407.092 ops/s
# Warmup Iteration  24: 13810266.299 ops/s
# Warmup Iteration  25: 13795512.244 ops/s
# Warmup Iteration  26: 13824324.262 ops/s
# Warmup Iteration  27: 13787236.630 ops/s
# Warmup Iteration  28: 13822441.138 ops/s
# Warmup Iteration  29: 13785215.517 ops/s
# Warmup Iteration  30: 13791032.784 ops/s
Iteration   1: 13789625.209 ops/s
Iteration   2: 13838877.837 ops/s
Iteration   3: 13770597.554 ops/s
Iteration   4: 13786514.040 ops/s
Iteration   5: 13786130.840 ops/s
Iteration   6: 13787519.038 ops/s
Iteration   7: 13813059.954 ops/s
Iteration   8: 13769877.912 ops/s
Iteration   9: 13806214.138 ops/s
Iteration  10: 13756560.758 ops/s
Iteration  11: 13801410.214 ops/s
Iteration  12: 13830811.935 ops/s
Iteration  13: 13799090.679 ops/s
Iteration  14: 13776946.545 ops/s
Iteration  15: 13830635.569 ops/s
Iteration  16: 13765233.568 ops/s
Iteration  17: 13770526.549 ops/s
Iteration  18: 13811880.673 ops/s
Iteration  19: 13796894.677 ops/s
Iteration  20: 13814152.193 ops/s
Iteration  21: 13794867.149 ops/s
Iteration  22: 13846376.940 ops/s
Iteration  23: 13790187.362 ops/s
Iteration  24: 13817446.481 ops/s
Iteration  25: 13825932.407 ops/s
Iteration  26: 13796602.342 ops/s
Iteration  27: 13788456.037 ops/s
Iteration  28: 13844553.908 ops/s
Iteration  29: 13767824.647 ops/s
Iteration  30: 13828283.903 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoLong":
  13800103.035 ±(99.9%) 16683.397 ops/s [Average]
  (min, avg, max) = (13756560.758, 13800103.035, 13846376.940), stdev = 24970.924
  CI (99.9%): [13783419.639, 13816786.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectIntoLong  thrpt   30  13800103.035 ± 16683.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7032727.152 ops/s
# Warmup Iteration   2: 12566030.045 ops/s
# Warmup Iteration   3: 13547646.018 ops/s
# Warmup Iteration   4: 13638995.351 ops/s
# Warmup Iteration   5: 12448352.754 ops/s
# Warmup Iteration   6: 12386701.159 ops/s
# Warmup Iteration   7: 13591697.839 ops/s
# Warmup Iteration   8: 13629184.785 ops/s
# Warmup Iteration   9: 13599469.498 ops/s
# Warmup Iteration  10: 13604115.919 ops/s
# Warmup Iteration  11: 13595026.792 ops/s
# Warmup Iteration  12: 13617825.247 ops/s
# Warmup Iteration  13: 13613657.324 ops/s
# Warmup Iteration  14: 13594561.351 ops/s
# Warmup Iteration  15: 13585951.500 ops/s
# Warmup Iteration  16: 13602127.506 ops/s
# Warmup Iteration  17: 13627589.919 ops/s
# Warmup Iteration  18: 13619407.471 ops/s
# Warmup Iteration  19: 13634418.458 ops/s
# Warmup Iteration  20: 13594572.884 ops/s
# Warmup Iteration  21: 13623880.531 ops/s
# Warmup Iteration  22: 13626757.491 ops/s
# Warmup Iteration  23: 13635258.659 ops/s
# Warmup Iteration  24: 13641942.957 ops/s
# Warmup Iteration  25: 13600248.866 ops/s
# Warmup Iteration  26: 13630454.841 ops/s
# Warmup Iteration  27: 13589424.523 ops/s
# Warmup Iteration  28: 13609910.743 ops/s
# Warmup Iteration  29: 13581929.735 ops/s
# Warmup Iteration  30: 13624790.478 ops/s
Iteration   1: 13622026.247 ops/s
Iteration   2: 13627242.868 ops/s
Iteration   3: 13589994.039 ops/s
Iteration   4: 13631569.033 ops/s
Iteration   5: 13641628.671 ops/s
Iteration   6: 13607254.307 ops/s
Iteration   7: 13546164.968 ops/s
Iteration   8: 13607652.603 ops/s
Iteration   9: 13647282.852 ops/s
Iteration  10: 13620594.958 ops/s
Iteration  11: 13648786.599 ops/s
Iteration  12: 13608562.660 ops/s
Iteration  13: 13618979.683 ops/s
Iteration  14: 13681087.871 ops/s
Iteration  15: 13605155.144 ops/s
Iteration  16: 13567771.042 ops/s
Iteration  17: 13678324.497 ops/s
Iteration  18: 13615927.163 ops/s
Iteration  19: 13643953.585 ops/s
Iteration  20: 13612631.668 ops/s
Iteration  21: 13612743.584 ops/s
Iteration  22: 13655177.827 ops/s
Iteration  23: 13600061.799 ops/s
Iteration  24: 13661958.111 ops/s
Iteration  25: 13612766.298 ops/s
Iteration  26: 13595273.206 ops/s
Iteration  27: 13608799.695 ops/s
Iteration  28: 13630881.935 ops/s
Iteration  29: 13606634.471 ops/s
Iteration  30: 13620347.443 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_injectIntoWith":
  13620907.828 ±(99.9%) 19326.541 ops/s [Average]
  (min, avg, max) = (13546164.968, 13620907.828, 13681087.871), stdev = 28927.059
  CI (99.9%): [13601581.286, 13640234.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_injectIntoWith  thrpt   30  13620907.828 ± 19326.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3439876.562 ops/s
# Warmup Iteration   2: 7148938.327 ops/s
# Warmup Iteration   3: 6376416.506 ops/s
# Warmup Iteration   4: 7348480.716 ops/s
# Warmup Iteration   5: 7369235.176 ops/s
# Warmup Iteration   6: 7383143.619 ops/s
# Warmup Iteration   7: 7381798.430 ops/s
# Warmup Iteration   8: 7368988.514 ops/s
# Warmup Iteration   9: 7371525.411 ops/s
# Warmup Iteration  10: 7361358.319 ops/s
# Warmup Iteration  11: 7394008.450 ops/s
# Warmup Iteration  12: 7370643.339 ops/s
# Warmup Iteration  13: 7368653.446 ops/s
# Warmup Iteration  14: 7383602.280 ops/s
# Warmup Iteration  15: 7371358.975 ops/s
# Warmup Iteration  16: 7373677.852 ops/s
# Warmup Iteration  17: 7368086.417 ops/s
# Warmup Iteration  18: 7381283.489 ops/s
# Warmup Iteration  19: 7364036.546 ops/s
# Warmup Iteration  20: 7356469.248 ops/s
# Warmup Iteration  21: 7368080.994 ops/s
# Warmup Iteration  22: 7371306.544 ops/s
# Warmup Iteration  23: 7338185.401 ops/s
# Warmup Iteration  24: 7354102.354 ops/s
# Warmup Iteration  25: 7366871.251 ops/s
# Warmup Iteration  26: 7349612.499 ops/s
# Warmup Iteration  27: 7363736.270 ops/s
# Warmup Iteration  28: 7369587.341 ops/s
# Warmup Iteration  29: 7356641.743 ops/s
# Warmup Iteration  30: 7382065.434 ops/s
Iteration   1: 7362430.456 ops/s
Iteration   2: 7398407.943 ops/s
Iteration   3: 7373348.835 ops/s
Iteration   4: 7370880.656 ops/s
Iteration   5: 7351541.364 ops/s
Iteration   6: 7388385.883 ops/s
Iteration   7: 7372587.231 ops/s
Iteration   8: 7375207.200 ops/s
Iteration   9: 7357117.744 ops/s
Iteration  10: 7377280.982 ops/s
Iteration  11: 7386508.503 ops/s
Iteration  12: 7351809.619 ops/s
Iteration  13: 7369122.130 ops/s
Iteration  14: 7367676.857 ops/s
Iteration  15: 7374709.823 ops/s
Iteration  16: 7368975.504 ops/s
Iteration  17: 7359154.511 ops/s
Iteration  18: 7391632.990 ops/s
Iteration  19: 7340448.302 ops/s
Iteration  20: 7370175.544 ops/s
Iteration  21: 7365973.114 ops/s
Iteration  22: 7387811.410 ops/s
Iteration  23: 7363167.353 ops/s
Iteration  24: 7361929.496 ops/s
Iteration  25: 7383072.430 ops/s
Iteration  26: 7367541.238 ops/s
Iteration  27: 7400824.208 ops/s
Iteration  28: 7384362.966 ops/s
Iteration  29: 7363478.457 ops/s
Iteration  30: 7343795.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_isEmpty":
  7370978.612 ±(99.9%) 9908.714 ops/s [Average]
  (min, avg, max) = (7340448.302, 7370978.612, 7400824.208), stdev = 14830.898
  CI (99.9%): [7361069.899, 7380887.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_isEmpty  thrpt   30  7370978.612 ± 9908.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8583659.089 ops/s
# Warmup Iteration   2: 18574767.410 ops/s
# Warmup Iteration   3: 18726778.004 ops/s
# Warmup Iteration   4: 15607083.721 ops/s
# Warmup Iteration   5: 18750257.188 ops/s
# Warmup Iteration   6: 18791836.158 ops/s
# Warmup Iteration   7: 18769984.675 ops/s
# Warmup Iteration   8: 18722767.453 ops/s
# Warmup Iteration   9: 18729798.465 ops/s
# Warmup Iteration  10: 18794841.411 ops/s
# Warmup Iteration  11: 18796815.964 ops/s
# Warmup Iteration  12: 18749834.022 ops/s
# Warmup Iteration  13: 18734870.440 ops/s
# Warmup Iteration  14: 18745346.981 ops/s
# Warmup Iteration  15: 18759109.965 ops/s
# Warmup Iteration  16: 18774485.486 ops/s
# Warmup Iteration  17: 18743767.247 ops/s
# Warmup Iteration  18: 18806861.232 ops/s
# Warmup Iteration  19: 18742151.276 ops/s
# Warmup Iteration  20: 18760144.093 ops/s
# Warmup Iteration  21: 18760624.565 ops/s
# Warmup Iteration  22: 18782991.809 ops/s
# Warmup Iteration  23: 18778914.385 ops/s
# Warmup Iteration  24: 18753049.013 ops/s
# Warmup Iteration  25: 18780818.776 ops/s
# Warmup Iteration  26: 18720821.342 ops/s
# Warmup Iteration  27: 18761867.634 ops/s
# Warmup Iteration  28: 18780373.628 ops/s
# Warmup Iteration  29: 18725663.800 ops/s
# Warmup Iteration  30: 18715814.333 ops/s
Iteration   1: 18668083.304 ops/s
Iteration   2: 18639844.434 ops/s
Iteration   3: 18774373.876 ops/s
Iteration   4: 18783074.923 ops/s
Iteration   5: 18719820.742 ops/s
Iteration   6: 18781258.634 ops/s
Iteration   7: 18780131.702 ops/s
Iteration   8: 18729085.768 ops/s
Iteration   9: 18781919.644 ops/s
Iteration  10: 18758104.836 ops/s
Iteration  11: 18789318.408 ops/s
Iteration  12: 18750704.079 ops/s
Iteration  13: 18775068.910 ops/s
Iteration  14: 18674966.035 ops/s
Iteration  15: 18701079.890 ops/s
Iteration  16: 18740904.277 ops/s
Iteration  17: 18787026.218 ops/s
Iteration  18: 18772354.331 ops/s
Iteration  19: 18770277.404 ops/s
Iteration  20: 18685859.597 ops/s
Iteration  21: 18741496.645 ops/s
Iteration  22: 18768217.001 ops/s
Iteration  23: 18763467.204 ops/s
Iteration  24: 18749335.290 ops/s
Iteration  25: 18765994.119 ops/s
Iteration  26: 18761715.992 ops/s
Iteration  27: 18769614.840 ops/s
Iteration  28: 18715201.836 ops/s
Iteration  29: 18747453.683 ops/s
Iteration  30: 18784000.825 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator":
  18747658.482 ±(99.9%) 26347.444 ops/s [Average]
  (min, avg, max) = (18639844.434, 18747658.482, 18789318.408), stdev = 39435.617
  CI (99.9%): [18721311.037, 18774005.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_iterator  thrpt   30  18747658.482 ± 26347.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749362.361 ops/s
# Warmup Iteration   2: 776293.720 ops/s
# Warmup Iteration   3: 982732.937 ops/s
# Warmup Iteration   4: 1016140.062 ops/s
# Warmup Iteration   5: 1019309.852 ops/s
# Warmup Iteration   6: 1015377.260 ops/s
# Warmup Iteration   7: 1022347.772 ops/s
# Warmup Iteration   8: 1022213.389 ops/s
# Warmup Iteration   9: 1016941.903 ops/s
# Warmup Iteration  10: 1022570.529 ops/s
# Warmup Iteration  11: 1020406.156 ops/s
# Warmup Iteration  12: 965040.483 ops/s
# Warmup Iteration  13: 907090.502 ops/s
# Warmup Iteration  14: 1017048.815 ops/s
# Warmup Iteration  15: 1019936.127 ops/s
# Warmup Iteration  16: 1019680.272 ops/s
# Warmup Iteration  17: 1086825.694 ops/s
# Warmup Iteration  18: 1086383.962 ops/s
# Warmup Iteration  19: 1090397.590 ops/s
# Warmup Iteration  20: 1089501.064 ops/s
# Warmup Iteration  21: 1085956.547 ops/s
# Warmup Iteration  22: 1088070.061 ops/s
# Warmup Iteration  23: 1087864.066 ops/s
# Warmup Iteration  24: 1088376.156 ops/s
# Warmup Iteration  25: 1086788.862 ops/s
# Warmup Iteration  26: 1089401.954 ops/s
# Warmup Iteration  27: 1088470.310 ops/s
# Warmup Iteration  28: 1088684.157 ops/s
# Warmup Iteration  29: 1089170.699 ops/s
# Warmup Iteration  30: 1089433.899 ops/s
Iteration   1: 1088894.651 ops/s
Iteration   2: 1087110.116 ops/s
Iteration   3: 1091251.106 ops/s
Iteration   4: 1084746.009 ops/s
Iteration   5: 1086711.790 ops/s
Iteration   6: 1089911.823 ops/s
Iteration   7: 1087448.324 ops/s
Iteration   8: 1087357.554 ops/s
Iteration   9: 1087871.444 ops/s
Iteration  10: 1086493.417 ops/s
Iteration  11: 1089761.884 ops/s
Iteration  12: 1082295.303 ops/s
Iteration  13: 1084495.931 ops/s
Iteration  14: 1081884.866 ops/s
Iteration  15: 1091496.111 ops/s
Iteration  16: 1088513.889 ops/s
Iteration  17: 1089035.353 ops/s
Iteration  18: 1085608.458 ops/s
Iteration  19: 1092349.243 ops/s
Iteration  20: 1089300.775 ops/s
Iteration  21: 1087758.371 ops/s
Iteration  22: 1086809.844 ops/s
Iteration  23: 1089738.661 ops/s
Iteration  24: 1088408.014 ops/s
Iteration  25: 1089065.054 ops/s
Iteration  26: 1085763.738 ops/s
Iteration  27: 1086868.415 ops/s
Iteration  28: 1090836.927 ops/s
Iteration  29: 1087212.350 ops/s
Iteration  30: 1089865.855 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_iterator_throws":
  1087828.843 ±(99.9%) 1662.787 ops/s [Average]
  (min, avg, max) = (1081884.866, 1087828.843, 1092349.243), stdev = 2488.781
  CI (99.9%): [1086166.056, 1089491.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_iterator_throws  thrpt   30  1087828.843 ± 1662.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.409 ops/s
# Warmup Iteration   2: 6.603 ops/s
# Warmup Iteration   3: 7.842 ops/s
# Warmup Iteration   4: 8.141 ops/s
# Warmup Iteration   5: 8.239 ops/s
# Warmup Iteration   6: 8.201 ops/s
# Warmup Iteration   7: 8.239 ops/s
# Warmup Iteration   8: 8.207 ops/s
# Warmup Iteration   9: 8.245 ops/s
# Warmup Iteration  10: 8.234 ops/s
# Warmup Iteration  11: 8.223 ops/s
# Warmup Iteration  12: 8.260 ops/s
# Warmup Iteration  13: 7.210 ops/s
# Warmup Iteration  14: 8.265 ops/s
# Warmup Iteration  15: 8.237 ops/s
# Warmup Iteration  16: 8.237 ops/s
# Warmup Iteration  17: 8.231 ops/s
# Warmup Iteration  18: 8.186 ops/s
# Warmup Iteration  19: 8.243 ops/s
# Warmup Iteration  20: 8.224 ops/s
# Warmup Iteration  21: 8.243 ops/s
# Warmup Iteration  22: 8.235 ops/s
# Warmup Iteration  23: 8.297 ops/s
# Warmup Iteration  24: 8.228 ops/s
# Warmup Iteration  25: 8.252 ops/s
# Warmup Iteration  26: 8.274 ops/s
# Warmup Iteration  27: 8.227 ops/s
# Warmup Iteration  28: 8.260 ops/s
# Warmup Iteration  29: 8.242 ops/s
# Warmup Iteration  30: 8.260 ops/s
Iteration   1: 8.256 ops/s
Iteration   2: 8.229 ops/s
Iteration   3: 8.243 ops/s
Iteration   4: 8.292 ops/s
Iteration   5: 8.253 ops/s
Iteration   6: 8.218 ops/s
Iteration   7: 8.264 ops/s
Iteration   8: 8.286 ops/s
Iteration   9: 8.240 ops/s
Iteration  10: 8.259 ops/s
Iteration  11: 8.242 ops/s
Iteration  12: 8.245 ops/s
Iteration  13: 8.286 ops/s
Iteration  14: 8.285 ops/s
Iteration  15: 8.192 ops/s
Iteration  16: 8.242 ops/s
Iteration  17: 8.247 ops/s
Iteration  18: 8.252 ops/s
Iteration  19: 8.204 ops/s
Iteration  20: 8.287 ops/s
Iteration  21: 8.256 ops/s
Iteration  22: 8.246 ops/s
Iteration  23: 8.205 ops/s
Iteration  24: 8.256 ops/s
Iteration  25: 8.276 ops/s
Iteration  26: 8.256 ops/s
Iteration  27: 8.256 ops/s
Iteration  28: 8.250 ops/s
Iteration  29: 8.282 ops/s
Iteration  30: 8.258 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  8.252 ±(99.9%) 0.017 ops/s [Average]
  (min, avg, max) = (8.192, 8.252, 8.292), stdev = 0.025
  CI (99.9%): [8.235, 8.269] (assumes normal distribution)


# Run complete. Total time: 00:01:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt  Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  8.252 ± 0.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8144058.844 ops/s
# Warmup Iteration   2: 21133571.292 ops/s
# Warmup Iteration   3: 21134283.043 ops/s
# Warmup Iteration   4: 17589110.486 ops/s
# Warmup Iteration   5: 21112047.639 ops/s
# Warmup Iteration   6: 21162322.261 ops/s
# Warmup Iteration   7: 21112533.565 ops/s
# Warmup Iteration   8: 21178098.412 ops/s
# Warmup Iteration   9: 21195377.631 ops/s
# Warmup Iteration  10: 21197378.636 ops/s
# Warmup Iteration  11: 21141606.438 ops/s
# Warmup Iteration  12: 21203198.723 ops/s
# Warmup Iteration  13: 21189671.794 ops/s
# Warmup Iteration  14: 21159811.497 ops/s
# Warmup Iteration  15: 21186646.295 ops/s
# Warmup Iteration  16: 21162104.877 ops/s
# Warmup Iteration  17: 21199988.068 ops/s
# Warmup Iteration  18: 21176135.326 ops/s
# Warmup Iteration  19: 21142439.134 ops/s
# Warmup Iteration  20: 21180850.175 ops/s
# Warmup Iteration  21: 21152561.308 ops/s
# Warmup Iteration  22: 21188869.306 ops/s
# Warmup Iteration  23: 21220954.622 ops/s
# Warmup Iteration  24: 21193211.249 ops/s
# Warmup Iteration  25: 21175523.734 ops/s
# Warmup Iteration  26: 21193822.317 ops/s
# Warmup Iteration  27: 21195921.655 ops/s
# Warmup Iteration  28: 21228524.979 ops/s
# Warmup Iteration  29: 21172684.899 ops/s
# Warmup Iteration  30: 21182285.805 ops/s
Iteration   1: 21203572.711 ops/s
Iteration   2: 21186869.639 ops/s
Iteration   3: 21130547.921 ops/s
Iteration   4: 21167556.458 ops/s
Iteration   5: 21175256.650 ops/s
Iteration   6: 21136683.069 ops/s
Iteration   7: 21246386.370 ops/s
Iteration   8: 21140497.852 ops/s
Iteration   9: 21151022.388 ops/s
Iteration  10: 21227503.854 ops/s
Iteration  11: 21115104.290 ops/s
Iteration  12: 21212728.978 ops/s
Iteration  13: 21127593.254 ops/s
Iteration  14: 21222603.797 ops/s
Iteration  15: 21271495.249 ops/s
Iteration  16: 21201431.611 ops/s
Iteration  17: 21210455.459 ops/s
Iteration  18: 21229824.304 ops/s
Iteration  19: 21127985.693 ops/s
Iteration  20: 21136107.959 ops/s
Iteration  21: 21182323.223 ops/s
Iteration  22: 21171128.333 ops/s
Iteration  23: 21202790.636 ops/s
Iteration  24: 21188198.475 ops/s
Iteration  25: 21128973.363 ops/s
Iteration  26: 21002431.282 ops/s
Iteration  27: 21157601.681 ops/s
Iteration  28: 21193877.437 ops/s
Iteration  29: 21227417.064 ops/s
Iteration  30: 21119613.302 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_lastIndexOf":
  21173186.077 ±(99.9%) 35284.408 ops/s [Average]
  (min, avg, max) = (21002431.282, 21173186.077, 21271495.249), stdev = 52812.045
  CI (99.9%): [21137901.669, 21208470.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_lastIndexOf  thrpt   30  21173186.077 ± 35284.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8808540.535 ops/s
# Warmup Iteration   2: 19402065.505 ops/s
# Warmup Iteration   3: 19689767.979 ops/s
# Warmup Iteration   4: 16321165.048 ops/s
# Warmup Iteration   5: 19524375.274 ops/s
# Warmup Iteration   6: 19592161.608 ops/s
# Warmup Iteration   7: 19568833.320 ops/s
# Warmup Iteration   8: 19540019.907 ops/s
# Warmup Iteration   9: 19533856.658 ops/s
# Warmup Iteration  10: 19579638.961 ops/s
# Warmup Iteration  11: 19533620.079 ops/s
# Warmup Iteration  12: 19552289.134 ops/s
# Warmup Iteration  13: 19565017.206 ops/s
# Warmup Iteration  14: 19558594.651 ops/s
# Warmup Iteration  15: 19528948.150 ops/s
# Warmup Iteration  16: 19550160.436 ops/s
# Warmup Iteration  17: 19711149.009 ops/s
# Warmup Iteration  18: 19782929.835 ops/s
# Warmup Iteration  19: 19753866.873 ops/s
# Warmup Iteration  20: 19752351.129 ops/s
# Warmup Iteration  21: 19760827.220 ops/s
# Warmup Iteration  22: 19749577.813 ops/s
# Warmup Iteration  23: 19737958.734 ops/s
# Warmup Iteration  24: 19718718.410 ops/s
# Warmup Iteration  25: 19713467.781 ops/s
# Warmup Iteration  26: 19743790.855 ops/s
# Warmup Iteration  27: 19744661.168 ops/s
# Warmup Iteration  28: 19726527.963 ops/s
# Warmup Iteration  29: 19766761.403 ops/s
# Warmup Iteration  30: 19734419.744 ops/s
Iteration   1: 19736223.682 ops/s
Iteration   2: 19750290.905 ops/s
Iteration   3: 19745838.996 ops/s
Iteration   4: 19759390.613 ops/s
Iteration   5: 19747888.361 ops/s
Iteration   6: 19696803.727 ops/s
Iteration   7: 19731652.114 ops/s
Iteration   8: 19705201.496 ops/s
Iteration   9: 19718049.093 ops/s
Iteration  10: 19764850.170 ops/s
Iteration  11: 19740021.003 ops/s
Iteration  12: 19784031.024 ops/s
Iteration  13: 19768899.640 ops/s
Iteration  14: 19752870.971 ops/s
Iteration  15: 19714045.364 ops/s
Iteration  16: 19717656.801 ops/s
Iteration  17: 19718845.489 ops/s
Iteration  18: 19741232.468 ops/s
Iteration  19: 19799414.456 ops/s
Iteration  20: 19720522.992 ops/s
Iteration  21: 19713419.739 ops/s
Iteration  22: 19771652.204 ops/s
Iteration  23: 19751922.437 ops/s
Iteration  24: 19769053.957 ops/s
Iteration  25: 19745453.011 ops/s
Iteration  26: 19755109.432 ops/s
Iteration  27: 19773940.276 ops/s
Iteration  28: 19732272.836 ops/s
Iteration  29: 19780738.077 ops/s
Iteration  30: 19752468.059 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIterator":
  19745325.313 ±(99.9%) 16846.383 ops/s [Average]
  (min, avg, max) = (19696803.727, 19745325.313, 19799414.456), stdev = 25214.875
  CI (99.9%): [19728478.930, 19762171.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_listIterator  thrpt   30  19745325.313 ± 16846.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731593.904 ops/s
# Warmup Iteration   2: 764931.779 ops/s
# Warmup Iteration   3: 1002707.365 ops/s
# Warmup Iteration   4: 997488.196 ops/s
# Warmup Iteration   5: 991569.251 ops/s
# Warmup Iteration   6: 997379.404 ops/s
# Warmup Iteration   7: 999172.491 ops/s
# Warmup Iteration   8: 995944.722 ops/s
# Warmup Iteration   9: 996266.498 ops/s
# Warmup Iteration  10: 988130.376 ops/s
# Warmup Iteration  11: 993302.769 ops/s
# Warmup Iteration  12: 837994.688 ops/s
# Warmup Iteration  13: 1000153.850 ops/s
# Warmup Iteration  14: 1000790.021 ops/s
# Warmup Iteration  15: 1001999.171 ops/s
# Warmup Iteration  16: 996740.148 ops/s
# Warmup Iteration  17: 1068221.603 ops/s
# Warmup Iteration  18: 1062230.672 ops/s
# Warmup Iteration  19: 1062427.801 ops/s
# Warmup Iteration  20: 1062953.037 ops/s
# Warmup Iteration  21: 1066616.644 ops/s
# Warmup Iteration  22: 1063722.849 ops/s
# Warmup Iteration  23: 1073786.420 ops/s
# Warmup Iteration  24: 1066762.042 ops/s
# Warmup Iteration  25: 1065862.520 ops/s
# Warmup Iteration  26: 1063002.922 ops/s
# Warmup Iteration  27: 1066449.054 ops/s
# Warmup Iteration  28: 1063980.939 ops/s
# Warmup Iteration  29: 1063978.457 ops/s
# Warmup Iteration  30: 1064815.129 ops/s
Iteration   1: 1063473.251 ops/s
Iteration   2: 1063334.358 ops/s
Iteration   3: 1067427.496 ops/s
Iteration   4: 1066441.999 ops/s
Iteration   5: 1067071.633 ops/s
Iteration   6: 1064079.004 ops/s
Iteration   7: 1061050.420 ops/s
Iteration   8: 1065245.951 ops/s
Iteration   9: 1064014.081 ops/s
Iteration  10: 1067147.753 ops/s
Iteration  11: 1065544.903 ops/s
Iteration  12: 1065183.781 ops/s
Iteration  13: 1066065.143 ops/s
Iteration  14: 1065253.462 ops/s
Iteration  15: 1071738.214 ops/s
Iteration  16: 1067746.546 ops/s
Iteration  17: 1062261.185 ops/s
Iteration  18: 1061732.700 ops/s
Iteration  19: 1068076.773 ops/s
Iteration  20: 1065522.665 ops/s
Iteration  21: 1066780.861 ops/s
Iteration  22: 1065290.355 ops/s
Iteration  23: 1067017.148 ops/s
Iteration  24: 1064130.914 ops/s
Iteration  25: 1057567.347 ops/s
Iteration  26: 1061047.658 ops/s
Iteration  27: 1068811.834 ops/s
Iteration  28: 1063846.076 ops/s
Iteration  29: 1060739.332 ops/s
Iteration  30: 1065200.561 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig":
  1064961.447 ±(99.9%) 1901.120 ops/s [Average]
  (min, avg, max) = (1057567.347, 1064961.447, 1071738.214), stdev = 2845.506
  CI (99.9%): [1063060.327, 1066862.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  1064961.447 ± 1901.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731905.219 ops/s
# Warmup Iteration   2: 757015.296 ops/s
# Warmup Iteration   3: 1009266.387 ops/s
# Warmup Iteration   4: 1004433.480 ops/s
# Warmup Iteration   5: 1000398.219 ops/s
# Warmup Iteration   6: 1002062.247 ops/s
# Warmup Iteration   7: 1002155.108 ops/s
# Warmup Iteration   8: 1003996.245 ops/s
# Warmup Iteration   9: 1001053.313 ops/s
# Warmup Iteration  10: 1001241.809 ops/s
# Warmup Iteration  11: 976231.742 ops/s
# Warmup Iteration  12: 868422.896 ops/s
# Warmup Iteration  13: 1002080.377 ops/s
# Warmup Iteration  14: 1002011.901 ops/s
# Warmup Iteration  15: 999959.689 ops/s
# Warmup Iteration  16: 1002735.853 ops/s
# Warmup Iteration  17: 1060212.494 ops/s
# Warmup Iteration  18: 1061876.379 ops/s
# Warmup Iteration  19: 1060279.753 ops/s
# Warmup Iteration  20: 1060198.267 ops/s
# Warmup Iteration  21: 1062143.976 ops/s
# Warmup Iteration  22: 1061778.923 ops/s
# Warmup Iteration  23: 1062167.916 ops/s
# Warmup Iteration  24: 1060991.592 ops/s
# Warmup Iteration  25: 1060039.898 ops/s
# Warmup Iteration  26: 1062450.202 ops/s
# Warmup Iteration  27: 1060392.769 ops/s
# Warmup Iteration  28: 1063601.379 ops/s
# Warmup Iteration  29: 1061156.894 ops/s
# Warmup Iteration  30: 1060389.465 ops/s
Iteration   1: 1063946.548 ops/s
Iteration   2: 1064579.698 ops/s
Iteration   3: 1061079.106 ops/s
Iteration   4: 1059957.487 ops/s
Iteration   5: 1059220.471 ops/s
Iteration   6: 1056265.900 ops/s
Iteration   7: 1062367.538 ops/s
Iteration   8: 1063476.287 ops/s
Iteration   9: 1060560.887 ops/s
Iteration  10: 1063147.147 ops/s
Iteration  11: 1058949.916 ops/s
Iteration  12: 1062791.701 ops/s
Iteration  13: 1064886.314 ops/s
Iteration  14: 1063275.151 ops/s
Iteration  15: 1065553.524 ops/s
Iteration  16: 1059542.187 ops/s
Iteration  17: 1061201.606 ops/s
Iteration  18: 1064855.012 ops/s
Iteration  19: 1063348.958 ops/s
Iteration  20: 1065278.576 ops/s
Iteration  21: 1057550.169 ops/s
Iteration  22: 1060627.781 ops/s
Iteration  23: 1059946.858 ops/s
Iteration  24: 1058565.873 ops/s
Iteration  25: 1064350.459 ops/s
Iteration  26: 1061568.158 ops/s
Iteration  27: 1062859.208 ops/s
Iteration  28: 1061438.002 ops/s
Iteration  29: 1062789.713 ops/s
Iteration  30: 1060257.394 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1061807.921 ±(99.9%) 1611.393 ops/s [Average]
  (min, avg, max) = (1056265.900, 1061807.921, 1065553.524), stdev = 2411.857
  CI (99.9%): [1060196.528, 1063419.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1061807.921 ± 1611.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1401696.435 ops/s
# Warmup Iteration   2: 3101276.157 ops/s
# Warmup Iteration   3: 3026903.185 ops/s
# Warmup Iteration   4: 2668489.858 ops/s
# Warmup Iteration   5: 3113069.881 ops/s
# Warmup Iteration   6: 3118011.656 ops/s
# Warmup Iteration   7: 3109913.936 ops/s
# Warmup Iteration   8: 3131045.626 ops/s
# Warmup Iteration   9: 3111840.974 ops/s
# Warmup Iteration  10: 3111109.985 ops/s
# Warmup Iteration  11: 3110561.640 ops/s
# Warmup Iteration  12: 3111503.600 ops/s
# Warmup Iteration  13: 3112036.324 ops/s
# Warmup Iteration  14: 3133089.377 ops/s
# Warmup Iteration  15: 3122070.090 ops/s
# Warmup Iteration  16: 3134131.471 ops/s
# Warmup Iteration  17: 3128174.018 ops/s
# Warmup Iteration  18: 3127077.593 ops/s
# Warmup Iteration  19: 3116677.946 ops/s
# Warmup Iteration  20: 3112989.296 ops/s
# Warmup Iteration  21: 3121577.907 ops/s
# Warmup Iteration  22: 3125484.354 ops/s
# Warmup Iteration  23: 3111748.036 ops/s
# Warmup Iteration  24: 3117479.546 ops/s
# Warmup Iteration  25: 3117776.595 ops/s
# Warmup Iteration  26: 3127876.630 ops/s
# Warmup Iteration  27: 3124432.984 ops/s
# Warmup Iteration  28: 3126090.216 ops/s
# Warmup Iteration  29: 3118670.002 ops/s
# Warmup Iteration  30: 3125657.189 ops/s
Iteration   1: 3113172.867 ops/s
Iteration   2: 3136222.561 ops/s
Iteration   3: 3115014.515 ops/s
Iteration   4: 3128677.832 ops/s
Iteration   5: 3133081.678 ops/s
Iteration   6: 3127815.577 ops/s
Iteration   7: 3123840.101 ops/s
Iteration   8: 3129484.941 ops/s
Iteration   9: 3127323.531 ops/s
Iteration  10: 3133795.639 ops/s
Iteration  11: 3126533.166 ops/s
Iteration  12: 3125731.155 ops/s
Iteration  13: 3122767.856 ops/s
Iteration  14: 3122396.201 ops/s
Iteration  15: 3130457.826 ops/s
Iteration  16: 3135632.230 ops/s
Iteration  17: 3122314.190 ops/s
Iteration  18: 3128284.768 ops/s
Iteration  19: 3126026.886 ops/s
Iteration  20: 3130204.869 ops/s
Iteration  21: 3127830.198 ops/s
Iteration  22: 3123082.294 ops/s
Iteration  23: 3125435.670 ops/s
Iteration  24: 3121399.740 ops/s
Iteration  25: 3129961.339 ops/s
Iteration  26: 3131306.155 ops/s
Iteration  27: 3132871.814 ops/s
Iteration  28: 3114517.012 ops/s
Iteration  29: 3131081.071 ops/s
Iteration  30: 3124873.075 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeString":
  3126704.559 ±(99.9%) 3866.116 ops/s [Average]
  (min, avg, max) = (3113172.867, 3126704.559, 3136222.561), stdev = 5786.622
  CI (99.9%): [3122838.442, 3130570.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_makeString  thrpt   30  3126704.559 ± 3866.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3727120.505 ops/s
# Warmup Iteration   2: 8249324.260 ops/s
# Warmup Iteration   3: 7990020.492 ops/s
# Warmup Iteration   4: 7344180.794 ops/s
# Warmup Iteration   5: 8379622.507 ops/s
# Warmup Iteration   6: 8345015.219 ops/s
# Warmup Iteration   7: 8376823.071 ops/s
# Warmup Iteration   8: 8331915.857 ops/s
# Warmup Iteration   9: 8318315.132 ops/s
# Warmup Iteration  10: 8365645.003 ops/s
# Warmup Iteration  11: 8352680.691 ops/s
# Warmup Iteration  12: 8366559.700 ops/s
# Warmup Iteration  13: 8348090.823 ops/s
# Warmup Iteration  14: 8368897.531 ops/s
# Warmup Iteration  15: 8368951.421 ops/s
# Warmup Iteration  16: 8333162.955 ops/s
# Warmup Iteration  17: 8260632.969 ops/s
# Warmup Iteration  18: 8277473.387 ops/s
# Warmup Iteration  19: 8269092.689 ops/s
# Warmup Iteration  20: 8253492.381 ops/s
# Warmup Iteration  21: 8278208.832 ops/s
# Warmup Iteration  22: 8265076.687 ops/s
# Warmup Iteration  23: 8243912.584 ops/s
# Warmup Iteration  24: 8285440.344 ops/s
# Warmup Iteration  25: 8239918.756 ops/s
# Warmup Iteration  26: 8227886.860 ops/s
# Warmup Iteration  27: 8232962.902 ops/s
# Warmup Iteration  28: 8256081.361 ops/s
# Warmup Iteration  29: 8311904.464 ops/s
# Warmup Iteration  30: 8289752.365 ops/s
Iteration   1: 8252049.599 ops/s
Iteration   2: 8265537.900 ops/s
Iteration   3: 8282270.524 ops/s
Iteration   4: 8319945.066 ops/s
Iteration   5: 8237697.415 ops/s
Iteration   6: 8253691.412 ops/s
Iteration   7: 8251907.940 ops/s
Iteration   8: 8357371.915 ops/s
Iteration   9: 8332535.471 ops/s
Iteration  10: 8322891.540 ops/s
Iteration  11: 8280314.185 ops/s
Iteration  12: 8279970.104 ops/s
Iteration  13: 8251568.303 ops/s
Iteration  14: 8271527.529 ops/s
Iteration  15: 8299885.552 ops/s
Iteration  16: 8244022.125 ops/s
Iteration  17: 8303574.937 ops/s
Iteration  18: 8295520.870 ops/s
Iteration  19: 8278571.251 ops/s
Iteration  20: 8301975.755 ops/s
Iteration  21: 8286543.775 ops/s
Iteration  22: 8243688.819 ops/s
Iteration  23: 8273999.256 ops/s
Iteration  24: 8357409.302 ops/s
Iteration  25: 8255777.805 ops/s
Iteration  26: 8253939.225 ops/s
Iteration  27: 8303934.379 ops/s
Iteration  28: 8211517.514 ops/s
Iteration  29: 8268915.332 ops/s
Iteration  30: 8274975.648 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparator":
  8280451.015 ±(99.9%) 22997.295 ops/s [Average]
  (min, avg, max) = (8211517.514, 8280451.015, 8357409.302), stdev = 34421.271
  CI (99.9%): [8257453.720, 8303448.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  8280451.015 ± 22997.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3363220.040 ops/s
# Warmup Iteration   2: 7600593.836 ops/s
# Warmup Iteration   3: 7763814.063 ops/s
# Warmup Iteration   4: 6412989.825 ops/s
# Warmup Iteration   5: 7722083.174 ops/s
# Warmup Iteration   6: 7710829.701 ops/s
# Warmup Iteration   7: 7762966.395 ops/s
# Warmup Iteration   8: 7699997.099 ops/s
# Warmup Iteration   9: 7699694.410 ops/s
# Warmup Iteration  10: 7738941.570 ops/s
# Warmup Iteration  11: 7727720.230 ops/s
# Warmup Iteration  12: 7705231.651 ops/s
# Warmup Iteration  13: 7678221.224 ops/s
# Warmup Iteration  14: 7715002.968 ops/s
# Warmup Iteration  15: 7755073.564 ops/s
# Warmup Iteration  16: 7731889.529 ops/s
# Warmup Iteration  17: 7705417.521 ops/s
# Warmup Iteration  18: 7701253.538 ops/s
# Warmup Iteration  19: 7703292.162 ops/s
# Warmup Iteration  20: 7672352.497 ops/s
# Warmup Iteration  21: 7715505.200 ops/s
# Warmup Iteration  22: 7753674.544 ops/s
# Warmup Iteration  23: 7732308.948 ops/s
# Warmup Iteration  24: 7736308.493 ops/s
# Warmup Iteration  25: 7727714.285 ops/s
# Warmup Iteration  26: 7732786.742 ops/s
# Warmup Iteration  27: 7714481.277 ops/s
# Warmup Iteration  28: 7679850.325 ops/s
# Warmup Iteration  29: 7716688.080 ops/s
# Warmup Iteration  30: 7752803.367 ops/s
Iteration   1: 7737815.836 ops/s
Iteration   2: 7735661.997 ops/s
Iteration   3: 7705947.622 ops/s
Iteration   4: 7738276.732 ops/s
Iteration   5: 7684682.527 ops/s
Iteration   6: 7726451.625 ops/s
Iteration   7: 7728161.568 ops/s
Iteration   8: 7719826.476 ops/s
Iteration   9: 7756127.521 ops/s
Iteration  10: 7715883.669 ops/s
Iteration  11: 7702135.927 ops/s
Iteration  12: 7693233.830 ops/s
Iteration  13: 7693788.135 ops/s
Iteration  14: 7728744.774 ops/s
Iteration  15: 7739699.354 ops/s
Iteration  16: 7724881.308 ops/s
Iteration  17: 7693956.529 ops/s
Iteration  18: 7717884.058 ops/s
Iteration  19: 7714780.655 ops/s
Iteration  20: 7688806.233 ops/s
Iteration  21: 7728966.669 ops/s
Iteration  22: 7721468.861 ops/s
Iteration  23: 7694788.884 ops/s
Iteration  24: 7735377.484 ops/s
Iteration  25: 7744030.949 ops/s
Iteration  26: 7723652.780 ops/s
Iteration  27: 7696308.780 ops/s
Iteration  28: 7705138.291 ops/s
Iteration  29: 7734382.346 ops/s
Iteration  30: 7697239.318 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  7717603.358 ±(99.9%) 12740.824 ops/s [Average]
  (min, avg, max) = (7684682.527, 7717603.358, 7756127.521), stdev = 19069.866
  CI (99.9%): [7704862.534, 7730344.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  7717603.358 ± 12740.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7326858.075 ops/s
# Warmup Iteration   2: 16152876.617 ops/s
# Warmup Iteration   3: 16812082.709 ops/s
# Warmup Iteration   4: 13978297.269 ops/s
# Warmup Iteration   5: 16844686.333 ops/s
# Warmup Iteration   6: 16850322.625 ops/s
# Warmup Iteration   7: 16840221.812 ops/s
# Warmup Iteration   8: 16849577.147 ops/s
# Warmup Iteration   9: 16842246.778 ops/s
# Warmup Iteration  10: 16814036.009 ops/s
# Warmup Iteration  11: 16867344.284 ops/s
# Warmup Iteration  12: 16808692.099 ops/s
# Warmup Iteration  13: 16857282.321 ops/s
# Warmup Iteration  14: 16866563.143 ops/s
# Warmup Iteration  15: 16857605.644 ops/s
# Warmup Iteration  16: 16833159.021 ops/s
# Warmup Iteration  17: 16814283.141 ops/s
# Warmup Iteration  18: 16844612.164 ops/s
# Warmup Iteration  19: 16759699.634 ops/s
# Warmup Iteration  20: 16856370.631 ops/s
# Warmup Iteration  21: 16825943.918 ops/s
# Warmup Iteration  22: 16801998.929 ops/s
# Warmup Iteration  23: 16853799.656 ops/s
# Warmup Iteration  24: 16822715.604 ops/s
# Warmup Iteration  25: 16873731.417 ops/s
# Warmup Iteration  26: 16790230.678 ops/s
# Warmup Iteration  27: 16731830.507 ops/s
# Warmup Iteration  28: 16841095.920 ops/s
# Warmup Iteration  29: 16871372.042 ops/s
# Warmup Iteration  30: 16832473.268 ops/s
Iteration   1: 16855033.957 ops/s
Iteration   2: 16872892.511 ops/s
Iteration   3: 16861762.826 ops/s
Iteration   4: 16856150.346 ops/s
Iteration   5: 16825498.256 ops/s
Iteration   6: 16838364.364 ops/s
Iteration   7: 16829951.115 ops/s
Iteration   8: 16805513.211 ops/s
Iteration   9: 16801929.203 ops/s
Iteration  10: 16841278.577 ops/s
Iteration  11: 16842271.206 ops/s
Iteration  12: 16884665.773 ops/s
Iteration  13: 16849449.743 ops/s
Iteration  14: 16852118.392 ops/s
Iteration  15: 16810465.432 ops/s
Iteration  16: 16802354.606 ops/s
Iteration  17: 16856444.175 ops/s
Iteration  18: 16809102.796 ops/s
Iteration  19: 16816835.437 ops/s
Iteration  20: 16873989.589 ops/s
Iteration  21: 16867530.794 ops/s
Iteration  22: 16809060.269 ops/s
Iteration  23: 16811807.294 ops/s
Iteration  24: 16848405.391 ops/s
Iteration  25: 16844661.486 ops/s
Iteration  26: 16884906.371 ops/s
Iteration  27: 16819749.451 ops/s
Iteration  28: 16850236.933 ops/s
Iteration  29: 16792943.058 ops/s
Iteration  30: 16880148.634 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max":
  16839850.707 ±(99.9%) 18148.759 ops/s [Average]
  (min, avg, max) = (16792943.058, 16839850.707, 16884906.371), stdev = 27164.210
  CI (99.9%): [16821701.948, 16857999.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max  thrpt   30  16839850.707 ± 18148.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6541587.623 ops/s
# Warmup Iteration   2: 13796730.783 ops/s
# Warmup Iteration   3: 11648679.619 ops/s
# Warmup Iteration   4: 13918029.601 ops/s
# Warmup Iteration   5: 13881529.397 ops/s
# Warmup Iteration   6: 13886718.959 ops/s
# Warmup Iteration   7: 13892776.917 ops/s
# Warmup Iteration   8: 13944672.475 ops/s
# Warmup Iteration   9: 13890973.423 ops/s
# Warmup Iteration  10: 13911314.760 ops/s
# Warmup Iteration  11: 13929379.015 ops/s
# Warmup Iteration  12: 13889367.383 ops/s
# Warmup Iteration  13: 13890008.525 ops/s
# Warmup Iteration  14: 13911933.306 ops/s
# Warmup Iteration  15: 13912610.710 ops/s
# Warmup Iteration  16: 13890357.687 ops/s
# Warmup Iteration  17: 13797527.667 ops/s
# Warmup Iteration  18: 13785392.356 ops/s
# Warmup Iteration  19: 13817695.359 ops/s
# Warmup Iteration  20: 13787552.038 ops/s
# Warmup Iteration  21: 13787916.580 ops/s
# Warmup Iteration  22: 13808480.676 ops/s
# Warmup Iteration  23: 13808804.688 ops/s
# Warmup Iteration  24: 13810945.241 ops/s
# Warmup Iteration  25: 13808227.801 ops/s
# Warmup Iteration  26: 13793903.573 ops/s
# Warmup Iteration  27: 13819043.074 ops/s
# Warmup Iteration  28: 13746942.819 ops/s
# Warmup Iteration  29: 13770789.205 ops/s
# Warmup Iteration  30: 13802274.535 ops/s
Iteration   1: 13754694.715 ops/s
Iteration   2: 13794392.941 ops/s
Iteration   3: 13822669.739 ops/s
Iteration   4: 13812967.831 ops/s
Iteration   5: 13810724.567 ops/s
Iteration   6: 13808503.540 ops/s
Iteration   7: 13746874.082 ops/s
Iteration   8: 13796738.240 ops/s
Iteration   9: 13805563.872 ops/s
Iteration  10: 13789572.802 ops/s
Iteration  11: 13795265.007 ops/s
Iteration  12: 13826963.108 ops/s
Iteration  13: 13825202.343 ops/s
Iteration  14: 13785718.809 ops/s
Iteration  15: 13805612.599 ops/s
Iteration  16: 13771985.637 ops/s
Iteration  17: 13798761.844 ops/s
Iteration  18: 13790768.482 ops/s
Iteration  19: 13801805.323 ops/s
Iteration  20: 13803074.523 ops/s
Iteration  21: 13770628.615 ops/s
Iteration  22: 13813059.128 ops/s
Iteration  23: 13721235.150 ops/s
Iteration  24: 13817138.667 ops/s
Iteration  25: 13824663.196 ops/s
Iteration  26: 13794593.683 ops/s
Iteration  27: 13845348.088 ops/s
Iteration  28: 13795873.460 ops/s
Iteration  29: 13845742.133 ops/s
Iteration  30: 13746497.040 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy":
  13797421.305 ±(99.9%) 18989.580 ops/s [Average]
  (min, avg, max) = (13721235.150, 13797421.305, 13845742.133), stdev = 28422.712
  CI (99.9%): [13778431.725, 13816410.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_maxBy  thrpt   30  13797421.305 ± 18989.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7162816.268 ops/s
# Warmup Iteration   2: 14414958.106 ops/s
# Warmup Iteration   3: 12401179.942 ops/s
# Warmup Iteration   4: 14647527.277 ops/s
# Warmup Iteration   5: 14619303.830 ops/s
# Warmup Iteration   6: 14590437.111 ops/s
# Warmup Iteration   7: 14583772.234 ops/s
# Warmup Iteration   8: 14622327.216 ops/s
# Warmup Iteration   9: 14667564.612 ops/s
# Warmup Iteration  10: 14558819.044 ops/s
# Warmup Iteration  11: 14623037.101 ops/s
# Warmup Iteration  12: 14613102.374 ops/s
# Warmup Iteration  13: 14622609.998 ops/s
# Warmup Iteration  14: 14602374.508 ops/s
# Warmup Iteration  15: 14641720.306 ops/s
# Warmup Iteration  16: 14559955.786 ops/s
# Warmup Iteration  17: 14617187.496 ops/s
# Warmup Iteration  18: 14661139.603 ops/s
# Warmup Iteration  19: 14664172.317 ops/s
# Warmup Iteration  20: 14629793.512 ops/s
# Warmup Iteration  21: 14586108.197 ops/s
# Warmup Iteration  22: 14626156.301 ops/s
# Warmup Iteration  23: 14629003.781 ops/s
# Warmup Iteration  24: 14597811.681 ops/s
# Warmup Iteration  25: 14678250.650 ops/s
# Warmup Iteration  26: 14624099.217 ops/s
# Warmup Iteration  27: 14639652.718 ops/s
# Warmup Iteration  28: 14626095.251 ops/s
# Warmup Iteration  29: 14624908.282 ops/s
# Warmup Iteration  30: 14609042.203 ops/s
Iteration   1: 14616521.500 ops/s
Iteration   2: 14576465.838 ops/s
Iteration   3: 14613823.542 ops/s
Iteration   4: 14648780.221 ops/s
Iteration   5: 14607346.436 ops/s
Iteration   6: 14655716.620 ops/s
Iteration   7: 14650983.849 ops/s
Iteration   8: 14717367.766 ops/s
Iteration   9: 14596193.183 ops/s
Iteration  10: 14619753.697 ops/s
Iteration  11: 14651826.852 ops/s
Iteration  12: 14691523.623 ops/s
Iteration  13: 14682718.852 ops/s
Iteration  14: 14601768.730 ops/s
Iteration  15: 14623887.920 ops/s
Iteration  16: 14674827.896 ops/s
Iteration  17: 14592073.049 ops/s
Iteration  18: 14605710.779 ops/s
Iteration  19: 14605143.242 ops/s
Iteration  20: 14628508.021 ops/s
Iteration  21: 14589462.355 ops/s
Iteration  22: 14558205.402 ops/s
Iteration  23: 14619562.994 ops/s
Iteration  24: 14637283.621 ops/s
Iteration  25: 14595474.540 ops/s
Iteration  26: 14716918.884 ops/s
Iteration  27: 14618497.755 ops/s
Iteration  28: 14633680.707 ops/s
Iteration  29: 14686551.550 ops/s
Iteration  30: 14575559.874 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxByOptional":
  14629737.977 ±(99.9%) 27379.788 ops/s [Average]
  (min, avg, max) = (14558205.402, 14629737.977, 14717367.766), stdev = 40980.781
  CI (99.9%): [14602358.188, 14657117.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_maxByOptional  thrpt   30  14629737.977 ± 27379.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9945989.792 ops/s
# Warmup Iteration   2: 22113915.425 ops/s
# Warmup Iteration   3: 22123825.794 ops/s
# Warmup Iteration   4: 18464884.284 ops/s
# Warmup Iteration   5: 22217889.560 ops/s
# Warmup Iteration   6: 22241107.273 ops/s
# Warmup Iteration   7: 22204673.736 ops/s
# Warmup Iteration   8: 22194211.378 ops/s
# Warmup Iteration   9: 22245535.576 ops/s
# Warmup Iteration  10: 22209805.958 ops/s
# Warmup Iteration  11: 22190250.672 ops/s
# Warmup Iteration  12: 22186498.975 ops/s
# Warmup Iteration  13: 22232168.977 ops/s
# Warmup Iteration  14: 22243936.976 ops/s
# Warmup Iteration  15: 22231258.694 ops/s
# Warmup Iteration  16: 22239226.980 ops/s
# Warmup Iteration  17: 22204777.945 ops/s
# Warmup Iteration  18: 22207111.815 ops/s
# Warmup Iteration  19: 22224413.683 ops/s
# Warmup Iteration  20: 22230290.266 ops/s
# Warmup Iteration  21: 22197661.011 ops/s
# Warmup Iteration  22: 22173660.399 ops/s
# Warmup Iteration  23: 22221537.352 ops/s
# Warmup Iteration  24: 22265729.510 ops/s
# Warmup Iteration  25: 22183533.637 ops/s
# Warmup Iteration  26: 22220335.306 ops/s
# Warmup Iteration  27: 22179195.408 ops/s
# Warmup Iteration  28: 22196071.353 ops/s
# Warmup Iteration  29: 22217225.713 ops/s
# Warmup Iteration  30: 22210456.664 ops/s
Iteration   1: 22195675.629 ops/s
Iteration   2: 22250665.238 ops/s
Iteration   3: 22252899.101 ops/s
Iteration   4: 22173359.608 ops/s
Iteration   5: 22191427.590 ops/s
Iteration   6: 22246093.823 ops/s
Iteration   7: 22208457.764 ops/s
Iteration   8: 22176989.290 ops/s
Iteration   9: 22173020.439 ops/s
Iteration  10: 22220243.962 ops/s
Iteration  11: 22169637.431 ops/s
Iteration  12: 22261450.467 ops/s
Iteration  13: 22179189.285 ops/s
Iteration  14: 22269477.295 ops/s
Iteration  15: 22217052.454 ops/s
Iteration  16: 22254495.710 ops/s
Iteration  17: 22223642.271 ops/s
Iteration  18: 22220767.663 ops/s
Iteration  19: 22208355.771 ops/s
Iteration  20: 22260716.453 ops/s
Iteration  21: 22189295.134 ops/s
Iteration  22: 22114295.200 ops/s
Iteration  23: 22061716.013 ops/s
Iteration  24: 22204609.564 ops/s
Iteration  25: 22151747.668 ops/s
Iteration  26: 22199964.165 ops/s
Iteration  27: 22236347.102 ops/s
Iteration  28: 22218018.594 ops/s
Iteration  29: 22219767.927 ops/s
Iteration  30: 22276807.268 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxBy_null_throws":
  22207539.529 ±(99.9%) 31179.302 ops/s [Average]
  (min, avg, max) = (22061716.013, 22207539.529, 22276807.268), stdev = 46667.715
  CI (99.9%): [22176360.227, 22238718.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  22207539.529 ± 31179.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3259365.166 ops/s
# Warmup Iteration   2: 7736116.813 ops/s
# Warmup Iteration   3: 7686876.057 ops/s
# Warmup Iteration   4: 6376849.870 ops/s
# Warmup Iteration   5: 7685766.907 ops/s
# Warmup Iteration   6: 7679095.485 ops/s
# Warmup Iteration   7: 7698149.331 ops/s
# Warmup Iteration   8: 7693552.463 ops/s
# Warmup Iteration   9: 7701374.959 ops/s
# Warmup Iteration  10: 7679778.788 ops/s
# Warmup Iteration  11: 7660422.762 ops/s
# Warmup Iteration  12: 7686065.749 ops/s
# Warmup Iteration  13: 7694830.755 ops/s
# Warmup Iteration  14: 7691615.377 ops/s
# Warmup Iteration  15: 7696662.692 ops/s
# Warmup Iteration  16: 7692526.054 ops/s
# Warmup Iteration  17: 7707303.444 ops/s
# Warmup Iteration  18: 7707612.058 ops/s
# Warmup Iteration  19: 7710932.104 ops/s
# Warmup Iteration  20: 7699088.436 ops/s
# Warmup Iteration  21: 7708899.048 ops/s
# Warmup Iteration  22: 7684285.473 ops/s
# Warmup Iteration  23: 7698614.507 ops/s
# Warmup Iteration  24: 7685937.258 ops/s
# Warmup Iteration  25: 7692295.155 ops/s
# Warmup Iteration  26: 7699207.706 ops/s
# Warmup Iteration  27: 7688950.290 ops/s
# Warmup Iteration  28: 7691849.002 ops/s
# Warmup Iteration  29: 7694516.083 ops/s
# Warmup Iteration  30: 7689709.384 ops/s
Iteration   1: 7699764.329 ops/s
Iteration   2: 7685894.228 ops/s
Iteration   3: 7710431.520 ops/s
Iteration   4: 7701358.604 ops/s
Iteration   5: 7709275.464 ops/s
Iteration   6: 7704724.056 ops/s
Iteration   7: 7726494.666 ops/s
Iteration   8: 7697410.559 ops/s
Iteration   9: 7690341.072 ops/s
Iteration  10: 7691933.565 ops/s
Iteration  11: 7703881.288 ops/s
Iteration  12: 7676541.401 ops/s
Iteration  13: 7691282.631 ops/s
Iteration  14: 7716795.456 ops/s
Iteration  15: 7686069.238 ops/s
Iteration  16: 7723202.659 ops/s
Iteration  17: 7707163.661 ops/s
Iteration  18: 7697234.838 ops/s
Iteration  19: 7694562.702 ops/s
Iteration  20: 7701916.152 ops/s
Iteration  21: 7704464.097 ops/s
Iteration  22: 7696054.957 ops/s
Iteration  23: 7691161.582 ops/s
Iteration  24: 7700925.814 ops/s
Iteration  25: 7699766.792 ops/s
Iteration  26: 7673359.963 ops/s
Iteration  27: 7682630.239 ops/s
Iteration  28: 7686020.309 ops/s
Iteration  29: 7689451.060 ops/s
Iteration  30: 7654674.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_maxOptional":
  7696492.904 ±(99.9%) 9730.420 ops/s [Average]
  (min, avg, max) = (7654674.228, 7696492.904, 7726494.666), stdev = 14564.036
  CI (99.9%): [7686762.484, 7706223.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_maxOptional  thrpt   30  7696492.904 ± 9730.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757735.149 ops/s
# Warmup Iteration   2: 787762.590 ops/s
# Warmup Iteration   3: 958211.728 ops/s
# Warmup Iteration   4: 1002272.601 ops/s
# Warmup Iteration   5: 1002941.930 ops/s
# Warmup Iteration   6: 996410.847 ops/s
# Warmup Iteration   7: 1003158.745 ops/s
# Warmup Iteration   8: 1003796.951 ops/s
# Warmup Iteration   9: 1005253.451 ops/s
# Warmup Iteration  10: 1004407.589 ops/s
# Warmup Iteration  11: 1004697.733 ops/s
# Warmup Iteration  12: 1002754.818 ops/s
# Warmup Iteration  13: 895744.213 ops/s
# Warmup Iteration  14: 947858.968 ops/s
# Warmup Iteration  15: 997865.253 ops/s
# Warmup Iteration  16: 999240.831 ops/s
# Warmup Iteration  17: 1059023.562 ops/s
# Warmup Iteration  18: 1058519.747 ops/s
# Warmup Iteration  19: 1058682.983 ops/s
# Warmup Iteration  20: 1056588.321 ops/s
# Warmup Iteration  21: 1059121.524 ops/s
# Warmup Iteration  22: 1057808.455 ops/s
# Warmup Iteration  23: 1058868.154 ops/s
# Warmup Iteration  24: 1058539.407 ops/s
# Warmup Iteration  25: 1057283.924 ops/s
# Warmup Iteration  26: 1057305.838 ops/s
# Warmup Iteration  27: 1056411.202 ops/s
# Warmup Iteration  28: 1056022.165 ops/s
# Warmup Iteration  29: 1055655.102 ops/s
# Warmup Iteration  30: 1056375.915 ops/s
Iteration   1: 1057188.305 ops/s
Iteration   2: 1057628.550 ops/s
Iteration   3: 1058010.200 ops/s
Iteration   4: 1059945.615 ops/s
Iteration   5: 1059430.896 ops/s
Iteration   6: 1058042.683 ops/s
Iteration   7: 1059346.725 ops/s
Iteration   8: 1057996.035 ops/s
Iteration   9: 1058967.450 ops/s
Iteration  10: 1060708.662 ops/s
Iteration  11: 1053220.344 ops/s
Iteration  12: 1060248.324 ops/s
Iteration  13: 1058028.706 ops/s
Iteration  14: 1060696.908 ops/s
Iteration  15: 1058746.312 ops/s
Iteration  16: 1059923.865 ops/s
Iteration  17: 1058947.817 ops/s
Iteration  18: 1056286.776 ops/s
Iteration  19: 1058029.220 ops/s
Iteration  20: 1056767.176 ops/s
Iteration  21: 1057273.581 ops/s
Iteration  22: 1058692.457 ops/s
Iteration  23: 1057412.883 ops/s
Iteration  24: 1054755.012 ops/s
Iteration  25: 1058984.829 ops/s
Iteration  26: 1057409.071 ops/s
Iteration  27: 1056048.988 ops/s
Iteration  28: 1056745.435 ops/s
Iteration  29: 1058320.226 ops/s
Iteration  30: 1059205.450 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_empty_throws":
  1058100.283 ±(99.9%) 1118.930 ops/s [Average]
  (min, avg, max) = (1053220.344, 1058100.283, 1060708.662), stdev = 1674.762
  CI (99.9%): [1056981.353, 1059219.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1058100.283 ± 1118.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5208770.625 ops/s
# Warmup Iteration   2: 13633878.788 ops/s
# Warmup Iteration   3: 13712029.140 ops/s
# Warmup Iteration   4: 11413379.123 ops/s
# Warmup Iteration   5: 13749806.760 ops/s
# Warmup Iteration   6: 13756702.708 ops/s
# Warmup Iteration   7: 13774241.789 ops/s
# Warmup Iteration   8: 13740655.829 ops/s
# Warmup Iteration   9: 13711403.932 ops/s
# Warmup Iteration  10: 13753652.229 ops/s
# Warmup Iteration  11: 13776654.978 ops/s
# Warmup Iteration  12: 13780945.772 ops/s
# Warmup Iteration  13: 13732297.984 ops/s
# Warmup Iteration  14: 13743878.234 ops/s
# Warmup Iteration  15: 13751861.609 ops/s
# Warmup Iteration  16: 13756794.260 ops/s
# Warmup Iteration  17: 13745471.940 ops/s
# Warmup Iteration  18: 13756403.717 ops/s
# Warmup Iteration  19: 13751340.488 ops/s
# Warmup Iteration  20: 13759141.152 ops/s
# Warmup Iteration  21: 13770282.118 ops/s
# Warmup Iteration  22: 13763186.146 ops/s
# Warmup Iteration  23: 13749032.840 ops/s
# Warmup Iteration  24: 13806880.562 ops/s
# Warmup Iteration  25: 13771418.631 ops/s
# Warmup Iteration  26: 13756410.570 ops/s
# Warmup Iteration  27: 13768740.184 ops/s
# Warmup Iteration  28: 13776851.447 ops/s
# Warmup Iteration  29: 13778179.390 ops/s
# Warmup Iteration  30: 13746504.327 ops/s
Iteration   1: 13767187.051 ops/s
Iteration   2: 13793461.789 ops/s
Iteration   3: 13752460.538 ops/s
Iteration   4: 13770749.791 ops/s
Iteration   5: 13757523.959 ops/s
Iteration   6: 13767287.532 ops/s
Iteration   7: 13756221.058 ops/s
Iteration   8: 13712083.923 ops/s
Iteration   9: 13728759.883 ops/s
Iteration  10: 13784178.427 ops/s
Iteration  11: 13709064.391 ops/s
Iteration  12: 13760177.125 ops/s
Iteration  13: 13776912.161 ops/s
Iteration  14: 13758544.760 ops/s
Iteration  15: 13702428.140 ops/s
Iteration  16: 13744261.289 ops/s
Iteration  17: 13763298.831 ops/s
Iteration  18: 13744420.366 ops/s
Iteration  19: 13745568.930 ops/s
Iteration  20: 13697801.965 ops/s
Iteration  21: 13771743.414 ops/s
Iteration  22: 13742441.712 ops/s
Iteration  23: 13752249.226 ops/s
Iteration  24: 13773332.029 ops/s
Iteration  25: 13743448.076 ops/s
Iteration  26: 13743881.641 ops/s
Iteration  27: 13742472.344 ops/s
Iteration  28: 13787661.801 ops/s
Iteration  29: 13761316.780 ops/s
Iteration  30: 13772137.004 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_safe":
  13752769.198 ±(99.9%) 16137.923 ops/s [Average]
  (min, avg, max) = (13697801.965, 13752769.198, 13793461.789), stdev = 24154.485
  CI (99.9%): [13736631.275, 13768907.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max_null_safe  thrpt   30  13752769.198 ± 16137.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4031398.353 ops/s
# Warmup Iteration   2: 5934129.948 ops/s
# Warmup Iteration   3: 7178746.592 ops/s
# Warmup Iteration   4: 7158316.215 ops/s
# Warmup Iteration   5: 7177787.835 ops/s
# Warmup Iteration   6: 7190919.335 ops/s
# Warmup Iteration   7: 5983386.420 ops/s
# Warmup Iteration   8: 7184378.400 ops/s
# Warmup Iteration   9: 7180879.328 ops/s
# Warmup Iteration  10: 7181746.937 ops/s
# Warmup Iteration  11: 7182724.229 ops/s
# Warmup Iteration  12: 7192317.476 ops/s
# Warmup Iteration  13: 7196634.596 ops/s
# Warmup Iteration  14: 7183277.919 ops/s
# Warmup Iteration  15: 7195061.272 ops/s
# Warmup Iteration  16: 7180475.203 ops/s
# Warmup Iteration  17: 7100291.050 ops/s
# Warmup Iteration  18: 7106269.567 ops/s
# Warmup Iteration  19: 7112002.400 ops/s
# Warmup Iteration  20: 7058073.285 ops/s
# Warmup Iteration  21: 7096042.411 ops/s
# Warmup Iteration  22: 7106192.746 ops/s
# Warmup Iteration  23: 7104604.214 ops/s
# Warmup Iteration  24: 7103534.494 ops/s
# Warmup Iteration  25: 7112201.358 ops/s
# Warmup Iteration  26: 7106256.143 ops/s
# Warmup Iteration  27: 7115422.442 ops/s
# Warmup Iteration  28: 7092953.301 ops/s
# Warmup Iteration  29: 7098235.086 ops/s
# Warmup Iteration  30: 7096345.960 ops/s
Iteration   1: 7106938.054 ops/s
Iteration   2: 7082407.000 ops/s
Iteration   3: 7112672.097 ops/s
Iteration   4: 7122683.642 ops/s
Iteration   5: 7110769.002 ops/s
Iteration   6: 7057316.822 ops/s
Iteration   7: 7101428.881 ops/s
Iteration   8: 7072893.335 ops/s
Iteration   9: 7098486.981 ops/s
Iteration  10: 7081501.500 ops/s
Iteration  11: 7105678.162 ops/s
Iteration  12: 7109757.938 ops/s
Iteration  13: 7099833.836 ops/s
Iteration  14: 7092878.607 ops/s
Iteration  15: 7069772.442 ops/s
Iteration  16: 7101422.596 ops/s
Iteration  17: 7107584.273 ops/s
Iteration  18: 7110854.128 ops/s
Iteration  19: 7103249.468 ops/s
Iteration  20: 7101350.624 ops/s
Iteration  21: 7109891.090 ops/s
Iteration  22: 7115618.609 ops/s
Iteration  23: 7102541.650 ops/s
Iteration  24: 7093423.065 ops/s
Iteration  25: 7093810.194 ops/s
Iteration  26: 7093265.317 ops/s
Iteration  27: 7118291.144 ops/s
Iteration  28: 7091475.920 ops/s
Iteration  29: 7104766.730 ops/s
Iteration  30: 7087196.507 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws":
  7098658.654 ±(99.9%) 9885.307 ops/s [Average]
  (min, avg, max) = (7057316.822, 7098658.654, 7122683.642), stdev = 14795.863
  CI (99.9%): [7088773.347, 7108543.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max_null_throws  thrpt   30  7098658.654 ± 9885.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 589680.757 ops/s
# Warmup Iteration   2: 616855.150 ops/s
# Warmup Iteration   3: 700712.398 ops/s
# Warmup Iteration   4: 777685.206 ops/s
# Warmup Iteration   5: 776995.185 ops/s
# Warmup Iteration   6: 778071.781 ops/s
# Warmup Iteration   7: 773644.078 ops/s
# Warmup Iteration   8: 779325.112 ops/s
# Warmup Iteration   9: 777910.245 ops/s
# Warmup Iteration  10: 780119.918 ops/s
# Warmup Iteration  11: 778521.227 ops/s
# Warmup Iteration  12: 779916.148 ops/s
# Warmup Iteration  13: 777184.007 ops/s
# Warmup Iteration  14: 779849.008 ops/s
# Warmup Iteration  15: 646320.459 ops/s
# Warmup Iteration  16: 779315.257 ops/s
# Warmup Iteration  17: 814868.703 ops/s
# Warmup Iteration  18: 816038.986 ops/s
# Warmup Iteration  19: 815629.084 ops/s
# Warmup Iteration  20: 813502.740 ops/s
# Warmup Iteration  21: 814496.012 ops/s
# Warmup Iteration  22: 809447.969 ops/s
# Warmup Iteration  23: 814241.805 ops/s
# Warmup Iteration  24: 815846.703 ops/s
# Warmup Iteration  25: 814611.276 ops/s
# Warmup Iteration  26: 816211.496 ops/s
# Warmup Iteration  27: 816772.933 ops/s
# Warmup Iteration  28: 815198.556 ops/s
# Warmup Iteration  29: 814282.655 ops/s
# Warmup Iteration  30: 815024.212 ops/s
Iteration   1: 815080.537 ops/s
Iteration   2: 812703.768 ops/s
Iteration   3: 816987.399 ops/s
Iteration   4: 816384.282 ops/s
Iteration   5: 812533.143 ops/s
Iteration   6: 816220.316 ops/s
Iteration   7: 816367.015 ops/s
Iteration   8: 815921.824 ops/s
Iteration   9: 818147.244 ops/s
Iteration  10: 814111.550 ops/s
Iteration  11: 811628.965 ops/s
Iteration  12: 815322.495 ops/s
Iteration  13: 815976.867 ops/s
Iteration  14: 816158.757 ops/s
Iteration  15: 814967.610 ops/s
Iteration  16: 815037.032 ops/s
Iteration  17: 817163.879 ops/s
Iteration  18: 814935.454 ops/s
Iteration  19: 815717.107 ops/s
Iteration  20: 812060.598 ops/s
Iteration  21: 814572.596 ops/s
Iteration  22: 816764.653 ops/s
Iteration  23: 816981.345 ops/s
Iteration  24: 813688.399 ops/s
Iteration  25: 813538.732 ops/s
Iteration  26: 815070.862 ops/s
Iteration  27: 816275.038 ops/s
Iteration  28: 813161.016 ops/s
Iteration  29: 815774.577 ops/s
Iteration  30: 813829.670 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator":
  815102.758 ±(99.9%) 1092.088 ops/s [Average]
  (min, avg, max) = (811628.965, 815102.758, 818147.244), stdev = 1634.587
  CI (99.9%): [814010.669, 816194.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  815102.758 ± 1092.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7744337.333 ops/s
# Warmup Iteration   2: 17667263.323 ops/s
# Warmup Iteration   3: 16876269.114 ops/s
# Warmup Iteration   4: 14125256.027 ops/s
# Warmup Iteration   5: 16951535.626 ops/s
# Warmup Iteration   6: 16978139.752 ops/s
# Warmup Iteration   7: 16969896.747 ops/s
# Warmup Iteration   8: 16958991.896 ops/s
# Warmup Iteration   9: 16927872.635 ops/s
# Warmup Iteration  10: 16961429.808 ops/s
# Warmup Iteration  11: 16942139.999 ops/s
# Warmup Iteration  12: 16957833.376 ops/s
# Warmup Iteration  13: 16900649.438 ops/s
# Warmup Iteration  14: 16967957.741 ops/s
# Warmup Iteration  15: 16919042.198 ops/s
# Warmup Iteration  16: 16959427.497 ops/s
# Warmup Iteration  17: 16941927.971 ops/s
# Warmup Iteration  18: 16938742.119 ops/s
# Warmup Iteration  19: 16971533.102 ops/s
# Warmup Iteration  20: 16970668.294 ops/s
# Warmup Iteration  21: 16915716.713 ops/s
# Warmup Iteration  22: 16970749.209 ops/s
# Warmup Iteration  23: 16927420.888 ops/s
# Warmup Iteration  24: 16934388.153 ops/s
# Warmup Iteration  25: 16927073.073 ops/s
# Warmup Iteration  26: 16966974.239 ops/s
# Warmup Iteration  27: 16913073.800 ops/s
# Warmup Iteration  28: 16965169.951 ops/s
# Warmup Iteration  29: 16910461.788 ops/s
# Warmup Iteration  30: 16963921.303 ops/s
Iteration   1: 17000637.866 ops/s
Iteration   2: 17050406.531 ops/s
Iteration   3: 16931349.299 ops/s
Iteration   4: 17015161.650 ops/s
Iteration   5: 16959871.541 ops/s
Iteration   6: 16959401.227 ops/s
Iteration   7: 16939660.345 ops/s
Iteration   8: 16981062.384 ops/s
Iteration   9: 16909613.710 ops/s
Iteration  10: 16979739.219 ops/s
Iteration  11: 16961763.998 ops/s
Iteration  12: 16983594.725 ops/s
Iteration  13: 16927013.162 ops/s
Iteration  14: 16981364.502 ops/s
Iteration  15: 16925857.938 ops/s
Iteration  16: 16849542.165 ops/s
Iteration  17: 16952635.224 ops/s
Iteration  18: 16950703.862 ops/s
Iteration  19: 16969397.871 ops/s
Iteration  20: 16981979.686 ops/s
Iteration  21: 16980494.024 ops/s
Iteration  22: 16935602.594 ops/s
Iteration  23: 16915902.023 ops/s
Iteration  24: 16949652.083 ops/s
Iteration  25: 16975999.195 ops/s
Iteration  26: 16959160.090 ops/s
Iteration  27: 16958591.129 ops/s
Iteration  28: 16951843.048 ops/s
Iteration  29: 17004119.980 ops/s
Iteration  30: 16973814.679 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_max_without_comparator":
  16960531.192 ±(99.9%) 24557.050 ops/s [Average]
  (min, avg, max) = (16849542.165, 16960531.192, 17050406.531), stdev = 36755.840
  CI (99.9%): [16935974.141, 16985088.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_max_without_comparator  thrpt   30  16960531.192 ± 24557.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7299873.766 ops/s
# Warmup Iteration   2: 16264831.609 ops/s
# Warmup Iteration   3: 16830156.445 ops/s
# Warmup Iteration   4: 13974160.217 ops/s
# Warmup Iteration   5: 16848552.775 ops/s
# Warmup Iteration   6: 16875860.967 ops/s
# Warmup Iteration   7: 16877208.161 ops/s
# Warmup Iteration   8: 16864147.636 ops/s
# Warmup Iteration   9: 16822336.074 ops/s
# Warmup Iteration  10: 16858605.060 ops/s
# Warmup Iteration  11: 16855601.379 ops/s
# Warmup Iteration  12: 16856748.537 ops/s
# Warmup Iteration  13: 16876529.119 ops/s
# Warmup Iteration  14: 16879500.632 ops/s
# Warmup Iteration  15: 16842925.129 ops/s
# Warmup Iteration  16: 16863180.501 ops/s
# Warmup Iteration  17: 16852815.754 ops/s
# Warmup Iteration  18: 16896826.709 ops/s
# Warmup Iteration  19: 16885497.072 ops/s
# Warmup Iteration  20: 16860513.709 ops/s
# Warmup Iteration  21: 16859265.562 ops/s
# Warmup Iteration  22: 16869096.608 ops/s
# Warmup Iteration  23: 16812335.505 ops/s
# Warmup Iteration  24: 16897244.726 ops/s
# Warmup Iteration  25: 16775278.844 ops/s
# Warmup Iteration  26: 16826172.061 ops/s
# Warmup Iteration  27: 16818569.653 ops/s
# Warmup Iteration  28: 16842061.301 ops/s
# Warmup Iteration  29: 16844445.926 ops/s
# Warmup Iteration  30: 16886098.206 ops/s
Iteration   1: 16855252.452 ops/s
Iteration   2: 16925854.148 ops/s
Iteration   3: 16835690.180 ops/s
Iteration   4: 16917533.470 ops/s
Iteration   5: 16910448.066 ops/s
Iteration   6: 16846655.492 ops/s
Iteration   7: 16846238.087 ops/s
Iteration   8: 16818702.707 ops/s
Iteration   9: 16892075.618 ops/s
Iteration  10: 16840698.134 ops/s
Iteration  11: 16843777.053 ops/s
Iteration  12: 16910844.419 ops/s
Iteration  13: 16886216.040 ops/s
Iteration  14: 16863758.384 ops/s
Iteration  15: 16874293.864 ops/s
Iteration  16: 16888824.026 ops/s
Iteration  17: 16840698.222 ops/s
Iteration  18: 16846390.775 ops/s
Iteration  19: 16884811.494 ops/s
Iteration  20: 16854247.894 ops/s
Iteration  21: 16908706.466 ops/s
Iteration  22: 16883156.827 ops/s
Iteration  23: 16842306.874 ops/s
Iteration  24: 16811864.982 ops/s
Iteration  25: 16879420.782 ops/s
Iteration  26: 16859229.332 ops/s
Iteration  27: 16877303.247 ops/s
Iteration  28: 16901623.543 ops/s
Iteration  29: 16869760.177 ops/s
Iteration  30: 16844134.429 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min":
  16868683.906 ±(99.9%) 20044.927 ops/s [Average]
  (min, avg, max) = (16811864.982, 16868683.906, 16925854.148), stdev = 30002.305
  CI (99.9%): [16848638.979, 16888728.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min  thrpt   30  16868683.906 ± 20044.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10563735.939 ops/s
# Warmup Iteration   2: 21320263.737 ops/s
# Warmup Iteration   3: 18259389.982 ops/s
# Warmup Iteration   4: 21448108.610 ops/s
# Warmup Iteration   5: 21449659.614 ops/s
# Warmup Iteration   6: 21460686.428 ops/s
# Warmup Iteration   7: 21474251.830 ops/s
# Warmup Iteration   8: 21436290.126 ops/s
# Warmup Iteration   9: 21499186.735 ops/s
# Warmup Iteration  10: 21491610.518 ops/s
# Warmup Iteration  11: 21455942.549 ops/s
# Warmup Iteration  12: 21465361.198 ops/s
# Warmup Iteration  13: 21497531.482 ops/s
# Warmup Iteration  14: 21498089.888 ops/s
# Warmup Iteration  15: 21501666.120 ops/s
# Warmup Iteration  16: 21494784.856 ops/s
# Warmup Iteration  17: 21452725.678 ops/s
# Warmup Iteration  18: 21490350.038 ops/s
# Warmup Iteration  19: 21520425.312 ops/s
# Warmup Iteration  20: 21491851.789 ops/s
# Warmup Iteration  21: 21497521.571 ops/s
# Warmup Iteration  22: 21493689.295 ops/s
# Warmup Iteration  23: 21449287.263 ops/s
# Warmup Iteration  24: 21462944.634 ops/s
# Warmup Iteration  25: 21392298.988 ops/s
# Warmup Iteration  26: 21539560.361 ops/s
# Warmup Iteration  27: 21450553.295 ops/s
# Warmup Iteration  28: 21450607.883 ops/s
# Warmup Iteration  29: 21503899.212 ops/s
# Warmup Iteration  30: 21535602.942 ops/s
Iteration   1: 21490188.667 ops/s
Iteration   2: 21502913.486 ops/s
Iteration   3: 21435095.757 ops/s
Iteration   4: 21486027.306 ops/s
Iteration   5: 21527070.020 ops/s
Iteration   6: 21527744.071 ops/s
Iteration   7: 21450357.398 ops/s
Iteration   8: 21536477.062 ops/s
Iteration   9: 21523280.307 ops/s
Iteration  10: 21412565.111 ops/s
Iteration  11: 21497844.469 ops/s
Iteration  12: 21512924.488 ops/s
Iteration  13: 21514411.591 ops/s
Iteration  14: 21512167.714 ops/s
Iteration  15: 21409783.861 ops/s
Iteration  16: 21485195.605 ops/s
Iteration  17: 21404536.364 ops/s
Iteration  18: 21440483.182 ops/s
Iteration  19: 21448718.740 ops/s
Iteration  20: 21450024.588 ops/s
Iteration  21: 21470664.933 ops/s
Iteration  22: 21475608.955 ops/s
Iteration  23: 21524293.487 ops/s
Iteration  24: 21554382.488 ops/s
Iteration  25: 21444268.503 ops/s
Iteration  26: 21497631.075 ops/s
Iteration  27: 21541023.456 ops/s
Iteration  28: 21543866.316 ops/s
Iteration  29: 21497525.018 ops/s
Iteration  30: 21402690.158 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy":
  21483992.139 ±(99.9%) 29923.948 ops/s [Average]
  (min, avg, max) = (21402690.158, 21483992.139, 21554382.488), stdev = 44788.760
  CI (99.9%): [21454068.191, 21513916.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_minBy  thrpt   30  21483992.139 ± 29923.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5404089.120 ops/s
# Warmup Iteration   2: 17483054.256 ops/s
# Warmup Iteration   3: 15050902.771 ops/s
# Warmup Iteration   4: 17726209.868 ops/s
# Warmup Iteration   5: 17760719.393 ops/s
# Warmup Iteration   6: 17754930.128 ops/s
# Warmup Iteration   7: 17750830.112 ops/s
# Warmup Iteration   8: 17764853.153 ops/s
# Warmup Iteration   9: 17718668.258 ops/s
# Warmup Iteration  10: 17760235.820 ops/s
# Warmup Iteration  11: 17727884.366 ops/s
# Warmup Iteration  12: 17706013.358 ops/s
# Warmup Iteration  13: 17752896.074 ops/s
# Warmup Iteration  14: 17740770.091 ops/s
# Warmup Iteration  15: 17763011.265 ops/s
# Warmup Iteration  16: 17779437.128 ops/s
# Warmup Iteration  17: 17737779.831 ops/s
# Warmup Iteration  18: 17819709.823 ops/s
# Warmup Iteration  19: 17814398.409 ops/s
# Warmup Iteration  20: 17742940.672 ops/s
# Warmup Iteration  21: 17811782.855 ops/s
# Warmup Iteration  22: 17731400.482 ops/s
# Warmup Iteration  23: 17724946.641 ops/s
# Warmup Iteration  24: 17787264.007 ops/s
# Warmup Iteration  25: 17726108.453 ops/s
# Warmup Iteration  26: 17765279.508 ops/s
# Warmup Iteration  27: 17745276.858 ops/s
# Warmup Iteration  28: 17784581.432 ops/s
# Warmup Iteration  29: 17780161.624 ops/s
# Warmup Iteration  30: 17778057.854 ops/s
Iteration   1: 17790823.146 ops/s
Iteration   2: 17800596.757 ops/s
Iteration   3: 17800411.509 ops/s
Iteration   4: 17817347.185 ops/s
Iteration   5: 17783345.866 ops/s
Iteration   6: 17790905.494 ops/s
Iteration   7: 17755780.398 ops/s
Iteration   8: 17746807.713 ops/s
Iteration   9: 17785677.643 ops/s
Iteration  10: 17814329.828 ops/s
Iteration  11: 17785584.391 ops/s
Iteration  12: 17813196.309 ops/s
Iteration  13: 17756037.775 ops/s
Iteration  14: 17763586.524 ops/s
Iteration  15: 17737625.838 ops/s
Iteration  16: 17804072.645 ops/s
Iteration  17: 17840935.822 ops/s
Iteration  18: 17620256.915 ops/s
Iteration  19: 17821236.878 ops/s
Iteration  20: 17845640.887 ops/s
Iteration  21: 17724288.740 ops/s
Iteration  22: 17722102.036 ops/s
Iteration  23: 17748571.923 ops/s
Iteration  24: 17791742.072 ops/s
Iteration  25: 17754246.466 ops/s
Iteration  26: 17810895.715 ops/s
Iteration  27: 17756033.401 ops/s
Iteration  28: 17764538.835 ops/s
Iteration  29: 17799211.421 ops/s
Iteration  30: 17802621.526 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minByOptional":
  17778281.722 ±(99.9%) 29301.276 ops/s [Average]
  (min, avg, max) = (17620256.915, 17778281.722, 17845640.887), stdev = 43856.774
  CI (99.9%): [17748980.446, 17807582.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_minByOptional  thrpt   30  17778281.722 ± 29301.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9814473.301 ops/s
# Warmup Iteration   2: 22291940.382 ops/s
# Warmup Iteration   3: 22246153.579 ops/s
# Warmup Iteration   4: 18536982.789 ops/s
# Warmup Iteration   5: 22288036.971 ops/s
# Warmup Iteration   6: 22266471.172 ops/s
# Warmup Iteration   7: 22286037.784 ops/s
# Warmup Iteration   8: 22240769.051 ops/s
# Warmup Iteration   9: 22226586.617 ops/s
# Warmup Iteration  10: 22253804.905 ops/s
# Warmup Iteration  11: 22298220.741 ops/s
# Warmup Iteration  12: 22244078.462 ops/s
# Warmup Iteration  13: 22299840.846 ops/s
# Warmup Iteration  14: 22277773.532 ops/s
# Warmup Iteration  15: 22287153.994 ops/s
# Warmup Iteration  16: 22233846.106 ops/s
# Warmup Iteration  17: 22256888.206 ops/s
# Warmup Iteration  18: 22278449.376 ops/s
# Warmup Iteration  19: 22274866.248 ops/s
# Warmup Iteration  20: 22280154.016 ops/s
# Warmup Iteration  21: 22236114.093 ops/s
# Warmup Iteration  22: 22305088.305 ops/s
# Warmup Iteration  23: 22305689.893 ops/s
# Warmup Iteration  24: 22291437.743 ops/s
# Warmup Iteration  25: 22298019.939 ops/s
# Warmup Iteration  26: 22231819.594 ops/s
# Warmup Iteration  27: 22305219.569 ops/s
# Warmup Iteration  28: 22322782.297 ops/s
# Warmup Iteration  29: 22238810.227 ops/s
# Warmup Iteration  30: 22232760.839 ops/s
Iteration   1: 22316753.307 ops/s
Iteration   2: 22319125.760 ops/s
Iteration   3: 22285256.558 ops/s
Iteration   4: 22285840.522 ops/s
Iteration   5: 22298155.268 ops/s
Iteration   6: 22290310.766 ops/s
Iteration   7: 22286207.030 ops/s
Iteration   8: 22277945.875 ops/s
Iteration   9: 22309455.774 ops/s
Iteration  10: 22257626.103 ops/s
Iteration  11: 22330876.286 ops/s
Iteration  12: 22290956.358 ops/s
Iteration  13: 22147516.187 ops/s
Iteration  14: 22250004.811 ops/s
Iteration  15: 22246985.789 ops/s
Iteration  16: 22296765.847 ops/s
Iteration  17: 22244933.467 ops/s
Iteration  18: 22260930.865 ops/s
Iteration  19: 22270208.727 ops/s
Iteration  20: 22092289.090 ops/s
Iteration  21: 22203222.679 ops/s
Iteration  22: 22334598.717 ops/s
Iteration  23: 22305148.937 ops/s
Iteration  24: 22306116.837 ops/s
Iteration  25: 22273311.992 ops/s
Iteration  26: 22252386.507 ops/s
Iteration  27: 22334425.089 ops/s
Iteration  28: 22243316.596 ops/s
Iteration  29: 22350031.746 ops/s
Iteration  30: 22305935.773 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minBy_null_throws":
  22275554.642 ±(99.9%) 36072.032 ops/s [Average]
  (min, avg, max) = (22092289.090, 22275554.642, 22350031.746), stdev = 53990.924
  CI (99.9%): [22239482.610, 22311626.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  22275554.642 ± 36072.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3231640.591 ops/s
# Warmup Iteration   2: 7979201.342 ops/s
# Warmup Iteration   3: 8033458.936 ops/s
# Warmup Iteration   4: 6670006.442 ops/s
# Warmup Iteration   5: 8088175.568 ops/s
# Warmup Iteration   6: 8086030.328 ops/s
# Warmup Iteration   7: 8092382.292 ops/s
# Warmup Iteration   8: 8077326.711 ops/s
# Warmup Iteration   9: 8094110.940 ops/s
# Warmup Iteration  10: 8079389.365 ops/s
# Warmup Iteration  11: 8083168.449 ops/s
# Warmup Iteration  12: 8088707.376 ops/s
# Warmup Iteration  13: 8079968.483 ops/s
# Warmup Iteration  14: 8080085.441 ops/s
# Warmup Iteration  15: 8077592.976 ops/s
# Warmup Iteration  16: 8071018.160 ops/s
# Warmup Iteration  17: 8101245.856 ops/s
# Warmup Iteration  18: 8080434.691 ops/s
# Warmup Iteration  19: 8113188.616 ops/s
# Warmup Iteration  20: 8097014.134 ops/s
# Warmup Iteration  21: 8089301.634 ops/s
# Warmup Iteration  22: 8064809.972 ops/s
# Warmup Iteration  23: 8058073.081 ops/s
# Warmup Iteration  24: 8074567.253 ops/s
# Warmup Iteration  25: 8077997.694 ops/s
# Warmup Iteration  26: 8100242.074 ops/s
# Warmup Iteration  27: 8087276.598 ops/s
# Warmup Iteration  28: 8097127.377 ops/s
# Warmup Iteration  29: 8083343.974 ops/s
# Warmup Iteration  30: 8101011.538 ops/s
Iteration   1: 8061702.315 ops/s
Iteration   2: 8095954.917 ops/s
Iteration   3: 8050730.838 ops/s
Iteration   4: 8070508.237 ops/s
Iteration   5: 8100808.339 ops/s
Iteration   6: 8055465.901 ops/s
Iteration   7: 8102913.462 ops/s
Iteration   8: 8106783.688 ops/s
Iteration   9: 8087315.726 ops/s
Iteration  10: 8111388.730 ops/s
Iteration  11: 8084902.846 ops/s
Iteration  12: 8103701.666 ops/s
Iteration  13: 8072671.061 ops/s
Iteration  14: 8105019.883 ops/s
Iteration  15: 8079941.350 ops/s
Iteration  16: 8087570.274 ops/s
Iteration  17: 8111114.543 ops/s
Iteration  18: 8117624.933 ops/s
Iteration  19: 8067433.321 ops/s
Iteration  20: 8055842.253 ops/s
Iteration  21: 8066052.410 ops/s
Iteration  22: 8091222.254 ops/s
Iteration  23: 8089540.219 ops/s
Iteration  24: 8096709.260 ops/s
Iteration  25: 8097416.519 ops/s
Iteration  26: 8069399.552 ops/s
Iteration  27: 8084226.872 ops/s
Iteration  28: 8086919.175 ops/s
Iteration  29: 8084966.705 ops/s
Iteration  30: 8112725.979 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_minOptional":
  8086952.441 ±(99.9%) 12479.536 ops/s [Average]
  (min, avg, max) = (8050730.838, 8086952.441, 8117624.933), stdev = 18678.784
  CI (99.9%): [8074472.905, 8099431.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_minOptional  thrpt   30  8086952.441 ± 12479.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 761304.744 ops/s
# Warmup Iteration   2: 790863.817 ops/s
# Warmup Iteration   3: 955246.439 ops/s
# Warmup Iteration   4: 997909.145 ops/s
# Warmup Iteration   5: 1007727.873 ops/s
# Warmup Iteration   6: 1003037.706 ops/s
# Warmup Iteration   7: 1004209.693 ops/s
# Warmup Iteration   8: 1000452.430 ops/s
# Warmup Iteration   9: 999785.219 ops/s
# Warmup Iteration  10: 1001017.670 ops/s
# Warmup Iteration  11: 1000006.389 ops/s
# Warmup Iteration  12: 1002920.268 ops/s
# Warmup Iteration  13: 902714.469 ops/s
# Warmup Iteration  14: 949724.206 ops/s
# Warmup Iteration  15: 1003511.249 ops/s
# Warmup Iteration  16: 1002052.691 ops/s
# Warmup Iteration  17: 1059773.170 ops/s
# Warmup Iteration  18: 1058691.924 ops/s
# Warmup Iteration  19: 1061233.209 ops/s
# Warmup Iteration  20: 1060464.910 ops/s
# Warmup Iteration  21: 1063719.374 ops/s
# Warmup Iteration  22: 1063353.500 ops/s
# Warmup Iteration  23: 1063181.299 ops/s
# Warmup Iteration  24: 1060803.315 ops/s
# Warmup Iteration  25: 1061829.904 ops/s
# Warmup Iteration  26: 1059784.979 ops/s
# Warmup Iteration  27: 1061055.412 ops/s
# Warmup Iteration  28: 1058836.065 ops/s
# Warmup Iteration  29: 1062551.452 ops/s
# Warmup Iteration  30: 1061006.271 ops/s
Iteration   1: 1061548.728 ops/s
Iteration   2: 1061357.590 ops/s
Iteration   3: 1063894.857 ops/s
Iteration   4: 1062063.623 ops/s
Iteration   5: 1064804.167 ops/s
Iteration   6: 1064009.374 ops/s
Iteration   7: 1058909.794 ops/s
Iteration   8: 1064435.081 ops/s
Iteration   9: 1060032.187 ops/s
Iteration  10: 1059066.572 ops/s
Iteration  11: 1051439.889 ops/s
Iteration  12: 1062723.800 ops/s
Iteration  13: 1060747.792 ops/s
Iteration  14: 1063951.160 ops/s
Iteration  15: 1061126.162 ops/s
Iteration  16: 1063393.092 ops/s
Iteration  17: 1063599.587 ops/s
Iteration  18: 1062843.448 ops/s
Iteration  19: 1057223.191 ops/s
Iteration  20: 1060577.571 ops/s
Iteration  21: 1062545.351 ops/s
Iteration  22: 1063803.432 ops/s
Iteration  23: 1063777.165 ops/s
Iteration  24: 1059477.475 ops/s
Iteration  25: 1058611.689 ops/s
Iteration  26: 1061969.446 ops/s
Iteration  27: 1060114.160 ops/s
Iteration  28: 1060013.249 ops/s
Iteration  29: 1061264.619 ops/s
Iteration  30: 1064732.098 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_empty_throws":
  1061468.545 ±(99.9%) 1856.372 ops/s [Average]
  (min, avg, max) = (1051439.889, 1061468.545, 1064804.167), stdev = 2778.531
  CI (99.9%): [1059612.173, 1063324.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1061468.545 ± 1856.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5340105.446 ops/s
# Warmup Iteration   2: 13398341.468 ops/s
# Warmup Iteration   3: 13464312.252 ops/s
# Warmup Iteration   4: 11274993.806 ops/s
# Warmup Iteration   5: 13535014.866 ops/s
# Warmup Iteration   6: 13532317.873 ops/s
# Warmup Iteration   7: 13534675.374 ops/s
# Warmup Iteration   8: 13485077.282 ops/s
# Warmup Iteration   9: 13495037.488 ops/s
# Warmup Iteration  10: 13494104.879 ops/s
# Warmup Iteration  11: 13509827.881 ops/s
# Warmup Iteration  12: 13509868.423 ops/s
# Warmup Iteration  13: 13507107.712 ops/s
# Warmup Iteration  14: 13502738.890 ops/s
# Warmup Iteration  15: 13506477.659 ops/s
# Warmup Iteration  16: 13503859.467 ops/s
# Warmup Iteration  17: 13534840.770 ops/s
# Warmup Iteration  18: 13527739.651 ops/s
# Warmup Iteration  19: 13473544.923 ops/s
# Warmup Iteration  20: 13505203.903 ops/s
# Warmup Iteration  21: 13533701.203 ops/s
# Warmup Iteration  22: 13497486.864 ops/s
# Warmup Iteration  23: 13506746.735 ops/s
# Warmup Iteration  24: 13486179.098 ops/s
# Warmup Iteration  25: 13491671.086 ops/s
# Warmup Iteration  26: 13543501.669 ops/s
# Warmup Iteration  27: 13512514.272 ops/s
# Warmup Iteration  28: 13517249.887 ops/s
# Warmup Iteration  29: 13516886.650 ops/s
# Warmup Iteration  30: 13503062.290 ops/s
Iteration   1: 13537452.629 ops/s
Iteration   2: 13522871.234 ops/s
Iteration   3: 13491085.102 ops/s
Iteration   4: 13480079.687 ops/s
Iteration   5: 13508063.543 ops/s
Iteration   6: 13541508.886 ops/s
Iteration   7: 13532766.693 ops/s
Iteration   8: 13485498.578 ops/s
Iteration   9: 13534306.438 ops/s
Iteration  10: 13509041.774 ops/s
Iteration  11: 13531472.589 ops/s
Iteration  12: 13498312.548 ops/s
Iteration  13: 13534994.719 ops/s
Iteration  14: 13501894.302 ops/s
Iteration  15: 13528613.101 ops/s
Iteration  16: 13502884.890 ops/s
Iteration  17: 13528074.827 ops/s
Iteration  18: 13419059.378 ops/s
Iteration  19: 13509180.464 ops/s
Iteration  20: 13515166.449 ops/s
Iteration  21: 13483201.557 ops/s
Iteration  22: 13517259.174 ops/s
Iteration  23: 13515130.319 ops/s
Iteration  24: 13516240.679 ops/s
Iteration  25: 13517682.005 ops/s
Iteration  26: 13500875.483 ops/s
Iteration  27: 13517677.525 ops/s
Iteration  28: 13485619.625 ops/s
Iteration  29: 13522469.697 ops/s
Iteration  30: 13509746.290 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_safe":
  13509941.006 ±(99.9%) 16164.669 ops/s [Average]
  (min, avg, max) = (13419059.378, 13509941.006, 13541508.886), stdev = 24194.517
  CI (99.9%): [13493776.337, 13526105.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min_null_safe  thrpt   30  13509941.006 ± 16164.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4085010.061 ops/s
# Warmup Iteration   2: 6240125.031 ops/s
# Warmup Iteration   3: 7139107.372 ops/s
# Warmup Iteration   4: 7163441.953 ops/s
# Warmup Iteration   5: 7176207.268 ops/s
# Warmup Iteration   6: 7193203.671 ops/s
# Warmup Iteration   7: 5969488.996 ops/s
# Warmup Iteration   8: 7184319.114 ops/s
# Warmup Iteration   9: 7178392.462 ops/s
# Warmup Iteration  10: 7183562.423 ops/s
# Warmup Iteration  11: 7186980.571 ops/s
# Warmup Iteration  12: 7197288.683 ops/s
# Warmup Iteration  13: 7180377.176 ops/s
# Warmup Iteration  14: 7184666.242 ops/s
# Warmup Iteration  15: 7187828.037 ops/s
# Warmup Iteration  16: 7200796.020 ops/s
# Warmup Iteration  17: 7133295.843 ops/s
# Warmup Iteration  18: 7111422.371 ops/s
# Warmup Iteration  19: 7114194.443 ops/s
# Warmup Iteration  20: 7124924.195 ops/s
# Warmup Iteration  21: 7109478.840 ops/s
# Warmup Iteration  22: 7127704.865 ops/s
# Warmup Iteration  23: 7113641.350 ops/s
# Warmup Iteration  24: 7123741.178 ops/s
# Warmup Iteration  25: 7130245.552 ops/s
# Warmup Iteration  26: 7125376.567 ops/s
# Warmup Iteration  27: 7120087.106 ops/s
# Warmup Iteration  28: 7108965.437 ops/s
# Warmup Iteration  29: 7120964.534 ops/s
# Warmup Iteration  30: 7117107.843 ops/s
Iteration   1: 7125209.509 ops/s
Iteration   2: 7070312.072 ops/s
Iteration   3: 7127385.371 ops/s
Iteration   4: 7129836.859 ops/s
Iteration   5: 7122784.414 ops/s
Iteration   6: 7121158.088 ops/s
Iteration   7: 7073111.024 ops/s
Iteration   8: 7127893.574 ops/s
Iteration   9: 7145766.675 ops/s
Iteration  10: 7120271.480 ops/s
Iteration  11: 7120278.540 ops/s
Iteration  12: 7121533.964 ops/s
Iteration  13: 7110269.588 ops/s
Iteration  14: 7122089.286 ops/s
Iteration  15: 7125070.548 ops/s
Iteration  16: 7128431.334 ops/s
Iteration  17: 7086406.231 ops/s
Iteration  18: 7134716.158 ops/s
Iteration  19: 7118823.639 ops/s
Iteration  20: 7134270.632 ops/s
Iteration  21: 7103848.428 ops/s
Iteration  22: 7117652.269 ops/s
Iteration  23: 7115112.555 ops/s
Iteration  24: 7116650.453 ops/s
Iteration  25: 7107547.141 ops/s
Iteration  26: 7129889.147 ops/s
Iteration  27: 7119513.328 ops/s
Iteration  28: 7099037.723 ops/s
Iteration  29: 7112589.915 ops/s
Iteration  30: 7123294.635 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws":
  7117025.153 ±(99.9%) 11182.430 ops/s [Average]
  (min, avg, max) = (7070312.072, 7117025.153, 7145766.675), stdev = 16737.336
  CI (99.9%): [7105842.723, 7128207.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min_null_throws  thrpt   30  7117025.153 ± 11182.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 591075.839 ops/s
# Warmup Iteration   2: 617517.014 ops/s
# Warmup Iteration   3: 700642.337 ops/s
# Warmup Iteration   4: 776181.081 ops/s
# Warmup Iteration   5: 774785.404 ops/s
# Warmup Iteration   6: 777880.234 ops/s
# Warmup Iteration   7: 769268.662 ops/s
# Warmup Iteration   8: 774124.173 ops/s
# Warmup Iteration   9: 773490.907 ops/s
# Warmup Iteration  10: 776625.994 ops/s
# Warmup Iteration  11: 776906.835 ops/s
# Warmup Iteration  12: 775104.238 ops/s
# Warmup Iteration  13: 777133.190 ops/s
# Warmup Iteration  14: 778155.124 ops/s
# Warmup Iteration  15: 643679.236 ops/s
# Warmup Iteration  16: 779900.238 ops/s
# Warmup Iteration  17: 815685.213 ops/s
# Warmup Iteration  18: 813464.624 ops/s
# Warmup Iteration  19: 810484.818 ops/s
# Warmup Iteration  20: 810008.842 ops/s
# Warmup Iteration  21: 813205.697 ops/s
# Warmup Iteration  22: 810386.570 ops/s
# Warmup Iteration  23: 810695.853 ops/s
# Warmup Iteration  24: 812749.578 ops/s
# Warmup Iteration  25: 810519.738 ops/s
# Warmup Iteration  26: 813259.425 ops/s
# Warmup Iteration  27: 811720.603 ops/s
# Warmup Iteration  28: 811626.515 ops/s
# Warmup Iteration  29: 811556.437 ops/s
# Warmup Iteration  30: 810627.453 ops/s
Iteration   1: 815030.970 ops/s
Iteration   2: 811835.435 ops/s
Iteration   3: 812466.670 ops/s
Iteration   4: 811469.702 ops/s
Iteration   5: 806645.264 ops/s
Iteration   6: 807675.338 ops/s
Iteration   7: 812690.762 ops/s
Iteration   8: 815803.920 ops/s
Iteration   9: 814758.934 ops/s
Iteration  10: 811252.767 ops/s
Iteration  11: 817698.869 ops/s
Iteration  12: 812303.253 ops/s
Iteration  13: 814675.879 ops/s
Iteration  14: 806392.074 ops/s
Iteration  15: 807532.726 ops/s
Iteration  16: 814637.031 ops/s
Iteration  17: 812725.305 ops/s
Iteration  18: 812794.965 ops/s
Iteration  19: 811670.872 ops/s
Iteration  20: 811346.368 ops/s
Iteration  21: 811840.350 ops/s
Iteration  22: 813502.634 ops/s
Iteration  23: 810413.259 ops/s
Iteration  24: 810951.550 ops/s
Iteration  25: 811401.724 ops/s
Iteration  26: 813262.604 ops/s
Iteration  27: 813222.902 ops/s
Iteration  28: 813730.050 ops/s
Iteration  29: 812090.793 ops/s
Iteration  30: 813690.205 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator":
  812183.773 ±(99.9%) 1728.838 ops/s [Average]
  (min, avg, max) = (806392.074, 812183.773, 817698.869), stdev = 2587.643
  CI (99.9%): [810454.935, 813912.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  812183.773 ± 1728.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7542420.577 ops/s
# Warmup Iteration   2: 16898392.318 ops/s
# Warmup Iteration   3: 16740648.251 ops/s
# Warmup Iteration   4: 14012418.901 ops/s
# Warmup Iteration   5: 16771695.687 ops/s
# Warmup Iteration   6: 16805389.946 ops/s
# Warmup Iteration   7: 16774636.466 ops/s
# Warmup Iteration   8: 16784270.877 ops/s
# Warmup Iteration   9: 16801784.129 ops/s
# Warmup Iteration  10: 16840860.072 ops/s
# Warmup Iteration  11: 16834424.626 ops/s
# Warmup Iteration  12: 16771679.167 ops/s
# Warmup Iteration  13: 16779525.783 ops/s
# Warmup Iteration  14: 16789288.900 ops/s
# Warmup Iteration  15: 16822871.820 ops/s
# Warmup Iteration  16: 16797572.291 ops/s
# Warmup Iteration  17: 16766779.282 ops/s
# Warmup Iteration  18: 16808443.013 ops/s
# Warmup Iteration  19: 16831214.440 ops/s
# Warmup Iteration  20: 16793370.816 ops/s
# Warmup Iteration  21: 16799372.918 ops/s
# Warmup Iteration  22: 16785874.218 ops/s
# Warmup Iteration  23: 16836086.782 ops/s
# Warmup Iteration  24: 16786890.342 ops/s
# Warmup Iteration  25: 16811568.513 ops/s
# Warmup Iteration  26: 16808261.545 ops/s
# Warmup Iteration  27: 16802895.704 ops/s
# Warmup Iteration  28: 16800255.321 ops/s
# Warmup Iteration  29: 16789006.014 ops/s
# Warmup Iteration  30: 16826133.643 ops/s
Iteration   1: 16827380.712 ops/s
Iteration   2: 16809694.700 ops/s
Iteration   3: 16775143.414 ops/s
Iteration   4: 16747334.735 ops/s
Iteration   5: 16773938.794 ops/s
Iteration   6: 16786831.463 ops/s
Iteration   7: 16822787.738 ops/s
Iteration   8: 16856891.242 ops/s
Iteration   9: 16850871.432 ops/s
Iteration  10: 16866124.645 ops/s
Iteration  11: 16784927.470 ops/s
Iteration  12: 16883572.661 ops/s
Iteration  13: 16836193.816 ops/s
Iteration  14: 16793371.783 ops/s
Iteration  15: 16815999.351 ops/s
Iteration  16: 16800878.108 ops/s
Iteration  17: 16823094.380 ops/s
Iteration  18: 16774592.145 ops/s
Iteration  19: 16794168.217 ops/s
Iteration  20: 16793462.903 ops/s
Iteration  21: 16769974.156 ops/s
Iteration  22: 16778671.747 ops/s
Iteration  23: 16823602.388 ops/s
Iteration  24: 16776048.701 ops/s
Iteration  25: 16793056.179 ops/s
Iteration  26: 16856309.277 ops/s
Iteration  27: 16814934.413 ops/s
Iteration  28: 16815790.491 ops/s
Iteration  29: 16836651.173 ops/s
Iteration  30: 16825117.651 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_min_without_comparator":
  16810247.196 ±(99.9%) 21803.244 ops/s [Average]
  (min, avg, max) = (16747334.735, 16810247.196, 16883572.661), stdev = 32634.072
  CI (99.9%): [16788443.952, 16832050.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_min_without_comparator  thrpt   30  16810247.196 ± 21803.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40325883.810 ops/s
# Warmup Iteration   2: 75952958.882 ops/s
# Warmup Iteration   3: 77981014.965 ops/s
# Warmup Iteration   4: 90595160.338 ops/s
# Warmup Iteration   5: 90106989.601 ops/s
# Warmup Iteration   6: 90608917.320 ops/s
# Warmup Iteration   7: 89962622.307 ops/s
# Warmup Iteration   8: 90632648.449 ops/s
# Warmup Iteration   9: 90502062.378 ops/s
# Warmup Iteration  10: 90425563.423 ops/s
# Warmup Iteration  11: 90467807.172 ops/s
# Warmup Iteration  12: 90211015.244 ops/s
# Warmup Iteration  13: 90656995.522 ops/s
# Warmup Iteration  14: 90242456.049 ops/s
# Warmup Iteration  15: 90408013.967 ops/s
# Warmup Iteration  16: 90510271.974 ops/s
# Warmup Iteration  17: 90770974.379 ops/s
# Warmup Iteration  18: 90211890.825 ops/s
# Warmup Iteration  19: 90024043.113 ops/s
# Warmup Iteration  20: 90534634.441 ops/s
# Warmup Iteration  21: 90362272.644 ops/s
# Warmup Iteration  22: 90481986.219 ops/s
# Warmup Iteration  23: 89137425.959 ops/s
# Warmup Iteration  24: 87671128.990 ops/s
# Warmup Iteration  25: 90511993.880 ops/s
# Warmup Iteration  26: 90476134.190 ops/s
# Warmup Iteration  27: 90455230.102 ops/s
# Warmup Iteration  28: 90468516.211 ops/s
# Warmup Iteration  29: 90127335.006 ops/s
# Warmup Iteration  30: 90185407.733 ops/s
Iteration   1: 90620784.497 ops/s
Iteration   2: 90078822.310 ops/s
Iteration   3: 90386889.382 ops/s
Iteration   4: 89939923.434 ops/s
Iteration   5: 90618319.783 ops/s
Iteration   6: 91049868.672 ops/s
Iteration   7: 90462637.190 ops/s
Iteration   8: 89998405.468 ops/s
Iteration   9: 89903376.598 ops/s
Iteration  10: 90077990.795 ops/s
Iteration  11: 90736543.268 ops/s
Iteration  12: 90248144.883 ops/s
Iteration  13: 90756916.523 ops/s
Iteration  14: 90143349.652 ops/s
Iteration  15: 90984760.503 ops/s
Iteration  16: 90960137.478 ops/s
Iteration  17: 90374808.486 ops/s
Iteration  18: 90364696.820 ops/s
Iteration  19: 90327673.717 ops/s
Iteration  20: 90620585.526 ops/s
Iteration  21: 90680241.322 ops/s
Iteration  22: 90282257.872 ops/s
Iteration  23: 90624798.429 ops/s
Iteration  24: 91098206.851 ops/s
Iteration  25: 90680357.290 ops/s
Iteration  26: 90481708.962 ops/s
Iteration  27: 90856884.062 ops/s
Iteration  28: 90844787.907 ops/s
Iteration  29: 90302823.392 ops/s
Iteration  30: 90146637.688 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newEmpty":
  90488444.625 ±(99.9%) 227129.753 ops/s [Average]
  (min, avg, max) = (89903376.598, 90488444.625, 91098206.851), stdev = 339957.148
  CI (99.9%): [90261314.872, 90715574.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_newEmpty  thrpt   30  90488444.625 ± 227129.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5799567.309 ops/s
# Warmup Iteration   2: 11973415.234 ops/s
# Warmup Iteration   3: 10138379.425 ops/s
# Warmup Iteration   4: 11980546.975 ops/s
# Warmup Iteration   5: 12015226.029 ops/s
# Warmup Iteration   6: 11962450.750 ops/s
# Warmup Iteration   7: 11999512.769 ops/s
# Warmup Iteration   8: 11979043.958 ops/s
# Warmup Iteration   9: 12003783.413 ops/s
# Warmup Iteration  10: 11909596.026 ops/s
# Warmup Iteration  11: 12024816.193 ops/s
# Warmup Iteration  12: 11979896.630 ops/s
# Warmup Iteration  13: 12001959.425 ops/s
# Warmup Iteration  14: 11970137.406 ops/s
# Warmup Iteration  15: 12004649.085 ops/s
# Warmup Iteration  16: 11987158.837 ops/s
# Warmup Iteration  17: 11783868.103 ops/s
# Warmup Iteration  18: 11811773.281 ops/s
# Warmup Iteration  19: 11780148.874 ops/s
# Warmup Iteration  20: 11775459.598 ops/s
# Warmup Iteration  21: 11789338.385 ops/s
# Warmup Iteration  22: 11783435.762 ops/s
# Warmup Iteration  23: 11775587.087 ops/s
# Warmup Iteration  24: 11748755.292 ops/s
# Warmup Iteration  25: 11778491.258 ops/s
# Warmup Iteration  26: 11739935.652 ops/s
# Warmup Iteration  27: 11811874.491 ops/s
# Warmup Iteration  28: 11798284.435 ops/s
# Warmup Iteration  29: 11837036.444 ops/s
# Warmup Iteration  30: 11780487.720 ops/s
Iteration   1: 11779529.636 ops/s
Iteration   2: 11783420.635 ops/s
Iteration   3: 11758340.686 ops/s
Iteration   4: 11785745.822 ops/s
Iteration   5: 11795559.079 ops/s
Iteration   6: 11805084.604 ops/s
Iteration   7: 11762660.091 ops/s
Iteration   8: 11797354.357 ops/s
Iteration   9: 11766196.445 ops/s
Iteration  10: 11777750.298 ops/s
Iteration  11: 11801746.733 ops/s
Iteration  12: 11800455.588 ops/s
Iteration  13: 11706365.648 ops/s
Iteration  14: 11731742.323 ops/s
Iteration  15: 11785041.566 ops/s
Iteration  16: 11764239.932 ops/s
Iteration  17: 11795776.802 ops/s
Iteration  18: 11817084.886 ops/s
Iteration  19: 11801079.342 ops/s
Iteration  20: 11764863.139 ops/s
Iteration  21: 11764129.418 ops/s
Iteration  22: 11768989.032 ops/s
Iteration  23: 11766528.959 ops/s
Iteration  24: 11764402.089 ops/s
Iteration  25: 11841108.996 ops/s
Iteration  26: 11796350.623 ops/s
Iteration  27: 11763539.545 ops/s
Iteration  28: 11805360.658 ops/s
Iteration  29: 11800972.237 ops/s
Iteration  30: 11759399.459 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_newListWithSize":
  11780360.621 ±(99.9%) 17532.523 ops/s [Average]
  (min, avg, max) = (11706365.648, 11780360.621, 11841108.996), stdev = 26241.857
  CI (99.9%): [11762828.098, 11797893.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_newListWithSize  thrpt   30  11780360.621 ± 17532.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480796.513 ops/s
# Warmup Iteration   2: 8193202.990 ops/s
# Warmup Iteration   3: 8223224.182 ops/s
# Warmup Iteration   4: 6786329.021 ops/s
# Warmup Iteration   5: 8212850.453 ops/s
# Warmup Iteration   6: 8218056.024 ops/s
# Warmup Iteration   7: 8234906.623 ops/s
# Warmup Iteration   8: 8228754.810 ops/s
# Warmup Iteration   9: 8225655.584 ops/s
# Warmup Iteration  10: 8219922.806 ops/s
# Warmup Iteration  11: 8211373.833 ops/s
# Warmup Iteration  12: 8226090.209 ops/s
# Warmup Iteration  13: 8212182.992 ops/s
# Warmup Iteration  14: 8233408.858 ops/s
# Warmup Iteration  15: 8227207.232 ops/s
# Warmup Iteration  16: 8216380.162 ops/s
# Warmup Iteration  17: 8225013.957 ops/s
# Warmup Iteration  18: 8214590.518 ops/s
# Warmup Iteration  19: 8241628.028 ops/s
# Warmup Iteration  20: 8239812.264 ops/s
# Warmup Iteration  21: 8231979.173 ops/s
# Warmup Iteration  22: 8237754.317 ops/s
# Warmup Iteration  23: 8232087.301 ops/s
# Warmup Iteration  24: 8222606.083 ops/s
# Warmup Iteration  25: 8223398.287 ops/s
# Warmup Iteration  26: 8233953.371 ops/s
# Warmup Iteration  27: 8210715.567 ops/s
# Warmup Iteration  28: 8205774.835 ops/s
# Warmup Iteration  29: 8216344.047 ops/s
# Warmup Iteration  30: 8228686.027 ops/s
Iteration   1: 8222599.823 ops/s
Iteration   2: 8208300.055 ops/s
Iteration   3: 8236413.009 ops/s
Iteration   4: 8210889.791 ops/s
Iteration   5: 8200946.470 ops/s
Iteration   6: 8202411.014 ops/s
Iteration   7: 8222735.111 ops/s
Iteration   8: 8244831.117 ops/s
Iteration   9: 8206008.865 ops/s
Iteration  10: 8220783.989 ops/s
Iteration  11: 8232974.093 ops/s
Iteration  12: 8212530.152 ops/s
Iteration  13: 8231846.221 ops/s
Iteration  14: 8238135.767 ops/s
Iteration  15: 8224836.769 ops/s
Iteration  16: 8223787.842 ops/s
Iteration  17: 8230829.020 ops/s
Iteration  18: 8193514.408 ops/s
Iteration  19: 8209242.119 ops/s
Iteration  20: 8242462.608 ops/s
Iteration  21: 8210751.601 ops/s
Iteration  22: 8232938.621 ops/s
Iteration  23: 8208547.773 ops/s
Iteration  24: 8219082.834 ops/s
Iteration  25: 8232587.087 ops/s
Iteration  26: 8263920.646 ops/s
Iteration  27: 8249654.133 ops/s
Iteration  28: 8234209.651 ops/s
Iteration  29: 8217894.534 ops/s
Iteration  30: 8241218.285 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfy":
  8224229.447 ±(99.9%) 10837.606 ops/s [Average]
  (min, avg, max) = (8193514.408, 8224229.447, 8263920.646), stdev = 16221.219
  CI (99.9%): [8213391.841, 8235067.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_noneSatisfy  thrpt   30  8224229.447 ± 10837.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3702741.739 ops/s
# Warmup Iteration   2: 6639990.355 ops/s
# Warmup Iteration   3: 7204832.984 ops/s
# Warmup Iteration   4: 7256001.205 ops/s
# Warmup Iteration   5: 6702924.561 ops/s
# Warmup Iteration   6: 6532930.444 ops/s
# Warmup Iteration   7: 7247333.015 ops/s
# Warmup Iteration   8: 7251764.618 ops/s
# Warmup Iteration   9: 7254864.459 ops/s
# Warmup Iteration  10: 7250644.203 ops/s
# Warmup Iteration  11: 7264995.802 ops/s
# Warmup Iteration  12: 7250051.566 ops/s
# Warmup Iteration  13: 7259228.629 ops/s
# Warmup Iteration  14: 7260694.904 ops/s
# Warmup Iteration  15: 7251763.827 ops/s
# Warmup Iteration  16: 7235509.788 ops/s
# Warmup Iteration  17: 7261895.344 ops/s
# Warmup Iteration  18: 7257827.910 ops/s
# Warmup Iteration  19: 7259844.224 ops/s
# Warmup Iteration  20: 7248789.050 ops/s
# Warmup Iteration  21: 7265254.756 ops/s
# Warmup Iteration  22: 7251546.852 ops/s
# Warmup Iteration  23: 7254525.618 ops/s
# Warmup Iteration  24: 7258967.663 ops/s
# Warmup Iteration  25: 7240063.409 ops/s
# Warmup Iteration  26: 7247533.837 ops/s
# Warmup Iteration  27: 7255243.611 ops/s
# Warmup Iteration  28: 7254058.631 ops/s
# Warmup Iteration  29: 7240615.559 ops/s
# Warmup Iteration  30: 7273684.075 ops/s
Iteration   1: 7260051.451 ops/s
Iteration   2: 7250094.739 ops/s
Iteration   3: 7237996.836 ops/s
Iteration   4: 7263441.727 ops/s
Iteration   5: 7238944.287 ops/s
Iteration   6: 7267052.466 ops/s
Iteration   7: 7246378.007 ops/s
Iteration   8: 7259851.462 ops/s
Iteration   9: 7275467.395 ops/s
Iteration  10: 7254535.990 ops/s
Iteration  11: 7274481.426 ops/s
Iteration  12: 7242025.825 ops/s
Iteration  13: 7247941.695 ops/s
Iteration  14: 7268128.163 ops/s
Iteration  15: 7229678.481 ops/s
Iteration  16: 7256838.765 ops/s
Iteration  17: 7263002.047 ops/s
Iteration  18: 7252759.148 ops/s
Iteration  19: 7260541.389 ops/s
Iteration  20: 7257615.466 ops/s
Iteration  21: 7247567.529 ops/s
Iteration  22: 7248115.685 ops/s
Iteration  23: 7241692.732 ops/s
Iteration  24: 7267707.755 ops/s
Iteration  25: 7247037.950 ops/s
Iteration  26: 7226930.509 ops/s
Iteration  27: 7265176.182 ops/s
Iteration  28: 7249722.240 ops/s
Iteration  29: 7278220.123 ops/s
Iteration  30: 7271083.108 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_noneSatisfyWith":
  7255002.686 ±(99.9%) 8836.503 ops/s [Average]
  (min, avg, max) = (7226930.509, 7255002.686, 7278220.123), stdev = 13226.063
  CI (99.9%): [7246166.182, 7263839.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  7255002.686 ± 8836.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5558479.025 ops/s
# Warmup Iteration   2: 9965061.307 ops/s
# Warmup Iteration   3: 11097446.981 ops/s
# Warmup Iteration   4: 11498474.062 ops/s
# Warmup Iteration   5: 11519250.373 ops/s
# Warmup Iteration   6: 11482708.461 ops/s
# Warmup Iteration   7: 11467349.426 ops/s
# Warmup Iteration   8: 11479923.487 ops/s
# Warmup Iteration   9: 11458960.923 ops/s
# Warmup Iteration  10: 11470424.931 ops/s
# Warmup Iteration  11: 11483763.418 ops/s
# Warmup Iteration  12: 11436216.579 ops/s
# Warmup Iteration  13: 11487506.921 ops/s
# Warmup Iteration  14: 11490697.925 ops/s
# Warmup Iteration  15: 11475935.764 ops/s
# Warmup Iteration  16: 11472343.542 ops/s
# Warmup Iteration  17: 11466657.687 ops/s
# Warmup Iteration  18: 11414621.210 ops/s
# Warmup Iteration  19: 11472693.393 ops/s
# Warmup Iteration  20: 11432279.451 ops/s
# Warmup Iteration  21: 11458362.382 ops/s
# Warmup Iteration  22: 11484153.139 ops/s
# Warmup Iteration  23: 11443761.937 ops/s
# Warmup Iteration  24: 11462103.667 ops/s
# Warmup Iteration  25: 11417353.101 ops/s
# Warmup Iteration  26: 11432558.929 ops/s
# Warmup Iteration  27: 11475397.797 ops/s
# Warmup Iteration  28: 11470002.135 ops/s
# Warmup Iteration  29: 11482296.236 ops/s
# Warmup Iteration  30: 11490991.451 ops/s
Iteration   1: 11496028.268 ops/s
Iteration   2: 11425035.254 ops/s
Iteration   3: 11521208.132 ops/s
Iteration   4: 11430753.995 ops/s
Iteration   5: 11442866.597 ops/s
Iteration   6: 11546836.490 ops/s
Iteration   7: 11486621.822 ops/s
Iteration   8: 11405279.620 ops/s
Iteration   9: 11486811.295 ops/s
Iteration  10: 11468358.268 ops/s
Iteration  11: 11518558.449 ops/s
Iteration  12: 11476763.430 ops/s
Iteration  13: 11493140.317 ops/s
Iteration  14: 11488118.880 ops/s
Iteration  15: 11497802.981 ops/s
Iteration  16: 11510952.110 ops/s
Iteration  17: 11474022.463 ops/s
Iteration  18: 11500613.813 ops/s
Iteration  19: 11483882.821 ops/s
Iteration  20: 11480194.041 ops/s
Iteration  21: 11491772.514 ops/s
Iteration  22: 11503864.546 ops/s
Iteration  23: 11462627.801 ops/s
Iteration  24: 11472785.521 ops/s
Iteration  25: 11439649.800 ops/s
Iteration  26: 11433265.653 ops/s
Iteration  27: 11480236.032 ops/s
Iteration  28: 11478460.915 ops/s
Iteration  29: 11487685.562 ops/s
Iteration  30: 11527487.395 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_notEmpty":
  11480389.493 ±(99.9%) 21391.478 ops/s [Average]
  (min, avg, max) = (11405279.620, 11480389.493, 11546836.490), stdev = 32017.759
  CI (99.9%): [11458998.015, 11501780.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_notEmpty  thrpt   30  11480389.493 ± 21391.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1413210.350 ops/s
# Warmup Iteration   2: 2948825.154 ops/s
# Warmup Iteration   3: 3066815.803 ops/s
# Warmup Iteration   4: 3078470.322 ops/s
# Warmup Iteration   5: 2546492.953 ops/s
# Warmup Iteration   6: 3092051.715 ops/s
# Warmup Iteration   7: 3069969.947 ops/s
# Warmup Iteration   8: 3085035.013 ops/s
# Warmup Iteration   9: 3086561.179 ops/s
# Warmup Iteration  10: 3083105.368 ops/s
# Warmup Iteration  11: 3085452.774 ops/s
# Warmup Iteration  12: 3085950.701 ops/s
# Warmup Iteration  13: 3081888.999 ops/s
# Warmup Iteration  14: 3082424.400 ops/s
# Warmup Iteration  15: 3087882.111 ops/s
# Warmup Iteration  16: 3089048.648 ops/s
# Warmup Iteration  17: 3084860.816 ops/s
# Warmup Iteration  18: 3093163.192 ops/s
# Warmup Iteration  19: 3081077.731 ops/s
# Warmup Iteration  20: 3087172.152 ops/s
# Warmup Iteration  21: 3090068.826 ops/s
# Warmup Iteration  22: 3086899.637 ops/s
# Warmup Iteration  23: 3089018.021 ops/s
# Warmup Iteration  24: 3082003.899 ops/s
# Warmup Iteration  25: 3077845.704 ops/s
# Warmup Iteration  26: 3089738.652 ops/s
# Warmup Iteration  27: 3089810.427 ops/s
# Warmup Iteration  28: 3089722.720 ops/s
# Warmup Iteration  29: 3079828.428 ops/s
# Warmup Iteration  30: 3090941.688 ops/s
Iteration   1: 3084064.936 ops/s
Iteration   2: 3096908.223 ops/s
Iteration   3: 3085231.631 ops/s
Iteration   4: 3083820.962 ops/s
Iteration   5: 3079377.183 ops/s
Iteration   6: 3092656.071 ops/s
Iteration   7: 3091829.087 ops/s
Iteration   8: 3093762.252 ops/s
Iteration   9: 3070892.453 ops/s
Iteration  10: 3092243.661 ops/s
Iteration  11: 3086033.748 ops/s
Iteration  12: 3085582.088 ops/s
Iteration  13: 3090545.952 ops/s
Iteration  14: 3090577.435 ops/s
Iteration  15: 3081387.375 ops/s
Iteration  16: 3090554.942 ops/s
Iteration  17: 3074146.650 ops/s
Iteration  18: 3091573.576 ops/s
Iteration  19: 3091953.153 ops/s
Iteration  20: 3082395.418 ops/s
Iteration  21: 3087698.754 ops/s
Iteration  22: 3085288.063 ops/s
Iteration  23: 3083015.281 ops/s
Iteration  24: 3087977.779 ops/s
Iteration  25: 3090942.300 ops/s
Iteration  26: 3089093.532 ops/s
Iteration  27: 3087130.912 ops/s
Iteration  28: 3081408.936 ops/s
Iteration  29: 3087913.181 ops/s
Iteration  30: 3083125.091 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partition":
  3086637.687 ±(99.9%) 3831.593 ops/s [Average]
  (min, avg, max) = (3070892.453, 3086637.687, 3096908.223), stdev = 5734.948
  CI (99.9%): [3082806.095, 3090469.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_partition  thrpt   30  3086637.687 ± 3831.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1102772.800 ops/s
# Warmup Iteration   2: 2745985.638 ops/s
# Warmup Iteration   3: 2770685.514 ops/s
# Warmup Iteration   4: 2300175.341 ops/s
# Warmup Iteration   5: 2774875.264 ops/s
# Warmup Iteration   6: 2770516.754 ops/s
# Warmup Iteration   7: 2773279.129 ops/s
# Warmup Iteration   8: 2766342.263 ops/s
# Warmup Iteration   9: 2776104.868 ops/s
# Warmup Iteration  10: 2774412.496 ops/s
# Warmup Iteration  11: 2766268.141 ops/s
# Warmup Iteration  12: 2778920.238 ops/s
# Warmup Iteration  13: 2776843.691 ops/s
# Warmup Iteration  14: 2777825.948 ops/s
# Warmup Iteration  15: 2776803.148 ops/s
# Warmup Iteration  16: 2775404.629 ops/s
# Warmup Iteration  17: 2762773.392 ops/s
# Warmup Iteration  18: 2760333.575 ops/s
# Warmup Iteration  19: 2765052.942 ops/s
# Warmup Iteration  20: 2768371.855 ops/s
# Warmup Iteration  21: 2768747.101 ops/s
# Warmup Iteration  22: 2762656.217 ops/s
# Warmup Iteration  23: 2765127.177 ops/s
# Warmup Iteration  24: 2766713.776 ops/s
# Warmup Iteration  25: 2760828.171 ops/s
# Warmup Iteration  26: 2763852.031 ops/s
# Warmup Iteration  27: 2768492.621 ops/s
# Warmup Iteration  28: 2761089.106 ops/s
# Warmup Iteration  29: 2767338.043 ops/s
# Warmup Iteration  30: 2763793.065 ops/s
Iteration   1: 2761310.254 ops/s
Iteration   2: 2768253.875 ops/s
Iteration   3: 2763407.505 ops/s
Iteration   4: 2774068.625 ops/s
Iteration   5: 2767730.827 ops/s
Iteration   6: 2753607.645 ops/s
Iteration   7: 2761342.377 ops/s
Iteration   8: 2768550.898 ops/s
Iteration   9: 2773276.641 ops/s
Iteration  10: 2766014.828 ops/s
Iteration  11: 2771123.561 ops/s
Iteration  12: 2773664.597 ops/s
Iteration  13: 2774505.544 ops/s
Iteration  14: 2765256.060 ops/s
Iteration  15: 2773743.819 ops/s
Iteration  16: 2768005.831 ops/s
Iteration  17: 2766816.697 ops/s
Iteration  18: 2775729.961 ops/s
Iteration  19: 2767827.594 ops/s
Iteration  20: 2768670.243 ops/s
Iteration  21: 2773667.482 ops/s
Iteration  22: 2769074.140 ops/s
Iteration  23: 2771635.777 ops/s
Iteration  24: 2765950.547 ops/s
Iteration  25: 2766378.930 ops/s
Iteration  26: 2773212.713 ops/s
Iteration  27: 2764221.825 ops/s
Iteration  28: 2769460.497 ops/s
Iteration  29: 2764430.070 ops/s
Iteration  30: 2766785.114 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWhile":
  2768257.483 ±(99.9%) 3239.537 ops/s [Average]
  (min, avg, max) = (2753607.645, 2768257.483, 2775729.961), stdev = 4848.786
  CI (99.9%): [2765017.946, 2771497.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_partitionWhile  thrpt   30  2768257.483 ± 3239.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1167432.735 ops/s
# Warmup Iteration   2: 2152016.226 ops/s
# Warmup Iteration   3: 2377612.767 ops/s
# Warmup Iteration   4: 2400100.444 ops/s
# Warmup Iteration   5: 2145740.299 ops/s
# Warmup Iteration   6: 2223545.920 ops/s
# Warmup Iteration   7: 2400708.852 ops/s
# Warmup Iteration   8: 2400383.663 ops/s
# Warmup Iteration   9: 2402861.037 ops/s
# Warmup Iteration  10: 2403540.214 ops/s
# Warmup Iteration  11: 2401063.263 ops/s
# Warmup Iteration  12: 2397760.172 ops/s
# Warmup Iteration  13: 2402827.344 ops/s
# Warmup Iteration  14: 2391034.148 ops/s
# Warmup Iteration  15: 2401195.377 ops/s
# Warmup Iteration  16: 2390752.240 ops/s
# Warmup Iteration  17: 2397878.711 ops/s
# Warmup Iteration  18: 2399719.507 ops/s
# Warmup Iteration  19: 2400851.315 ops/s
# Warmup Iteration  20: 2395549.262 ops/s
# Warmup Iteration  21: 2397551.611 ops/s
# Warmup Iteration  22: 2399278.882 ops/s
# Warmup Iteration  23: 2395654.637 ops/s
# Warmup Iteration  24: 2395310.542 ops/s
# Warmup Iteration  25: 2400418.745 ops/s
# Warmup Iteration  26: 2390495.503 ops/s
# Warmup Iteration  27: 2399463.757 ops/s
# Warmup Iteration  28: 2399738.690 ops/s
# Warmup Iteration  29: 2395484.898 ops/s
# Warmup Iteration  30: 2391258.773 ops/s
Iteration   1: 2400612.435 ops/s
Iteration   2: 2398934.312 ops/s
Iteration   3: 2403748.244 ops/s
Iteration   4: 2398193.378 ops/s
Iteration   5: 2391684.456 ops/s
Iteration   6: 2400625.185 ops/s
Iteration   7: 2396565.807 ops/s
Iteration   8: 2398638.337 ops/s
Iteration   9: 2393886.015 ops/s
Iteration  10: 2399062.414 ops/s
Iteration  11: 2408450.277 ops/s
Iteration  12: 2395406.441 ops/s
Iteration  13: 2394000.892 ops/s
Iteration  14: 2402213.575 ops/s
Iteration  15: 2395249.921 ops/s
Iteration  16: 2399592.817 ops/s
Iteration  17: 2411420.988 ops/s
Iteration  18: 2396753.233 ops/s
Iteration  19: 2398586.792 ops/s
Iteration  20: 2400471.726 ops/s
Iteration  21: 2393971.303 ops/s
Iteration  22: 2402732.810 ops/s
Iteration  23: 2396570.692 ops/s
Iteration  24: 2405101.192 ops/s
Iteration  25: 2404161.511 ops/s
Iteration  26: 2398118.209 ops/s
Iteration  27: 2405597.826 ops/s
Iteration  28: 2401821.907 ops/s
Iteration  29: 2405295.530 ops/s
Iteration  30: 2403870.535 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_partitionWith":
  2400044.625 ±(99.9%) 3088.385 ops/s [Average]
  (min, avg, max) = (2391684.456, 2400044.625, 2411420.988), stdev = 4622.550
  CI (99.9%): [2396956.240, 2403133.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_partitionWith  thrpt   30  2400044.625 ± 3088.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782963.908 ops/s
# Warmup Iteration   2: 813909.301 ops/s
# Warmup Iteration   3: 970639.986 ops/s
# Warmup Iteration   4: 1013257.115 ops/s
# Warmup Iteration   5: 1014555.263 ops/s
# Warmup Iteration   6: 1012355.094 ops/s
# Warmup Iteration   7: 1012409.181 ops/s
# Warmup Iteration   8: 1016472.504 ops/s
# Warmup Iteration   9: 1017462.279 ops/s
# Warmup Iteration  10: 1017554.127 ops/s
# Warmup Iteration  11: 1012419.808 ops/s
# Warmup Iteration  12: 1011331.908 ops/s
# Warmup Iteration  13: 907575.425 ops/s
# Warmup Iteration  14: 968014.487 ops/s
# Warmup Iteration  15: 1016207.575 ops/s
# Warmup Iteration  16: 1010228.991 ops/s
# Warmup Iteration  17: 1075668.855 ops/s
# Warmup Iteration  18: 1080575.707 ops/s
# Warmup Iteration  19: 1075950.341 ops/s
# Warmup Iteration  20: 1077157.798 ops/s
# Warmup Iteration  21: 1076704.589 ops/s
# Warmup Iteration  22: 1077758.180 ops/s
# Warmup Iteration  23: 1076668.403 ops/s
# Warmup Iteration  24: 1079616.466 ops/s
# Warmup Iteration  25: 1080729.979 ops/s
# Warmup Iteration  26: 1077970.995 ops/s
# Warmup Iteration  27: 1073451.196 ops/s
# Warmup Iteration  28: 1078499.872 ops/s
# Warmup Iteration  29: 1078276.272 ops/s
# Warmup Iteration  30: 1079536.152 ops/s
Iteration   1: 1079719.240 ops/s
Iteration   2: 1076277.008 ops/s
Iteration   3: 1081478.175 ops/s
Iteration   4: 1080312.722 ops/s
Iteration   5: 1078189.537 ops/s
Iteration   6: 1077855.876 ops/s
Iteration   7: 1079099.185 ops/s
Iteration   8: 1083243.148 ops/s
Iteration   9: 1082124.925 ops/s
Iteration  10: 1081696.063 ops/s
Iteration  11: 1078236.350 ops/s
Iteration  12: 1077476.585 ops/s
Iteration  13: 1083277.410 ops/s
Iteration  14: 1072368.895 ops/s
Iteration  15: 1080870.361 ops/s
Iteration  16: 1075743.169 ops/s
Iteration  17: 1079122.435 ops/s
Iteration  18: 1079451.750 ops/s
Iteration  19: 1080249.381 ops/s
Iteration  20: 1079495.981 ops/s
Iteration  21: 1082120.662 ops/s
Iteration  22: 1081371.064 ops/s
Iteration  23: 1081962.627 ops/s
Iteration  24: 1081383.866 ops/s
Iteration  25: 1080083.238 ops/s
Iteration  26: 1080475.717 ops/s
Iteration  27: 1077260.369 ops/s
Iteration  28: 1074986.874 ops/s
Iteration  29: 1080415.996 ops/s
Iteration  30: 1082781.453 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_randomAccess_throws":
  1079637.669 ±(99.9%) 1712.473 ops/s [Average]
  (min, avg, max) = (1072368.895, 1079637.669, 1083277.410), stdev = 2563.150
  CI (99.9%): [1077925.195, 1081350.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1079637.669 ± 1712.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1051707.412 ops/s
# Warmup Iteration   2: 1927946.586 ops/s
# Warmup Iteration   3: 2106917.591 ops/s
# Warmup Iteration   4: 2129078.273 ops/s
# Warmup Iteration   5: 1930976.743 ops/s
# Warmup Iteration   6: 1956450.061 ops/s
# Warmup Iteration   7: 2124198.910 ops/s
# Warmup Iteration   8: 2123644.924 ops/s
# Warmup Iteration   9: 2124705.376 ops/s
# Warmup Iteration  10: 2123499.278 ops/s
# Warmup Iteration  11: 2122327.394 ops/s
# Warmup Iteration  12: 2121251.749 ops/s
# Warmup Iteration  13: 2123281.860 ops/s
# Warmup Iteration  14: 2124322.677 ops/s
# Warmup Iteration  15: 2121983.084 ops/s
# Warmup Iteration  16: 2122628.028 ops/s
# Warmup Iteration  17: 2129195.913 ops/s
# Warmup Iteration  18: 2127089.894 ops/s
# Warmup Iteration  19: 2127950.042 ops/s
# Warmup Iteration  20: 2129598.726 ops/s
# Warmup Iteration  21: 2131541.244 ops/s
# Warmup Iteration  22: 2124137.805 ops/s
# Warmup Iteration  23: 2131257.821 ops/s
# Warmup Iteration  24: 2131990.655 ops/s
# Warmup Iteration  25: 2134863.307 ops/s
# Warmup Iteration  26: 2126488.501 ops/s
# Warmup Iteration  27: 2120527.716 ops/s
# Warmup Iteration  28: 2129136.978 ops/s
# Warmup Iteration  29: 2122329.054 ops/s
# Warmup Iteration  30: 2129919.055 ops/s
Iteration   1: 2123309.696 ops/s
Iteration   2: 2126802.262 ops/s
Iteration   3: 2123226.359 ops/s
Iteration   4: 2125996.784 ops/s
Iteration   5: 2131529.858 ops/s
Iteration   6: 2133060.239 ops/s
Iteration   7: 2119222.705 ops/s
Iteration   8: 2131615.627 ops/s
Iteration   9: 2106541.392 ops/s
Iteration  10: 2127255.575 ops/s
Iteration  11: 2126625.749 ops/s
Iteration  12: 2108037.521 ops/s
Iteration  13: 2135844.147 ops/s
Iteration  14: 2127653.281 ops/s
Iteration  15: 2118548.939 ops/s
Iteration  16: 2126126.663 ops/s
Iteration  17: 2120333.270 ops/s
Iteration  18: 2128034.555 ops/s
Iteration  19: 2105205.847 ops/s
Iteration  20: 2124658.384 ops/s
Iteration  21: 2126302.641 ops/s
Iteration  22: 2126208.253 ops/s
Iteration  23: 2129290.192 ops/s
Iteration  24: 2120025.260 ops/s
Iteration  25: 2122263.102 ops/s
Iteration  26: 2121600.059 ops/s
Iteration  27: 2130897.602 ops/s
Iteration  28: 2126067.362 ops/s
Iteration  29: 2126940.739 ops/s
Iteration  30: 2121636.082 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reduceOptional":
  2124028.671 ±(99.9%) 4820.488 ops/s [Average]
  (min, avg, max) = (2105205.847, 2124028.671, 2135844.147), stdev = 7215.081
  CI (99.9%): [2119208.183, 2128849.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reduceOptional  thrpt   30  2124028.671 ± 4820.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1545749.452 ops/s
# Warmup Iteration   2: 3668614.315 ops/s
# Warmup Iteration   3: 3294699.991 ops/s
# Warmup Iteration   4: 3430165.891 ops/s
# Warmup Iteration   5: 3676348.209 ops/s
# Warmup Iteration   6: 3673890.596 ops/s
# Warmup Iteration   7: 3671215.224 ops/s
# Warmup Iteration   8: 3678476.333 ops/s
# Warmup Iteration   9: 3677048.917 ops/s
# Warmup Iteration  10: 3670466.490 ops/s
# Warmup Iteration  11: 3674855.148 ops/s
# Warmup Iteration  12: 3663915.026 ops/s
# Warmup Iteration  13: 3681484.158 ops/s
# Warmup Iteration  14: 3663395.112 ops/s
# Warmup Iteration  15: 3678292.179 ops/s
# Warmup Iteration  16: 3680176.915 ops/s
# Warmup Iteration  17: 3653993.577 ops/s
# Warmup Iteration  18: 3665692.221 ops/s
# Warmup Iteration  19: 3680334.685 ops/s
# Warmup Iteration  20: 3665632.724 ops/s
# Warmup Iteration  21: 3667693.923 ops/s
# Warmup Iteration  22: 3675605.336 ops/s
# Warmup Iteration  23: 3676780.502 ops/s
# Warmup Iteration  24: 3673484.977 ops/s
# Warmup Iteration  25: 3669256.168 ops/s
# Warmup Iteration  26: 3676662.288 ops/s
# Warmup Iteration  27: 3672891.398 ops/s
# Warmup Iteration  28: 3679171.317 ops/s
# Warmup Iteration  29: 3680851.817 ops/s
# Warmup Iteration  30: 3678880.109 ops/s
Iteration   1: 3674980.738 ops/s
Iteration   2: 3672314.502 ops/s
Iteration   3: 3674029.501 ops/s
Iteration   4: 3669806.003 ops/s
Iteration   5: 3678230.649 ops/s
Iteration   6: 3680175.483 ops/s
Iteration   7: 3671035.170 ops/s
Iteration   8: 3680070.203 ops/s
Iteration   9: 3676602.895 ops/s
Iteration  10: 3676440.457 ops/s
Iteration  11: 3677215.405 ops/s
Iteration  12: 3669705.957 ops/s
Iteration  13: 3675382.259 ops/s
Iteration  14: 3668551.010 ops/s
Iteration  15: 3678986.228 ops/s
Iteration  16: 3665618.472 ops/s
Iteration  17: 3676294.826 ops/s
Iteration  18: 3680912.793 ops/s
Iteration  19: 3668969.307 ops/s
Iteration  20: 3667786.366 ops/s
Iteration  21: 3678350.580 ops/s
Iteration  22: 3685799.671 ops/s
Iteration  23: 3670114.790 ops/s
Iteration  24: 3671319.819 ops/s
Iteration  25: 3675091.004 ops/s
Iteration  26: 3689109.254 ops/s
Iteration  27: 3681619.614 ops/s
Iteration  28: 3685610.503 ops/s
Iteration  29: 3681328.056 ops/s
Iteration  30: 3669349.058 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reject":
  3675693.352 ±(99.9%) 3923.976 ops/s [Average]
  (min, avg, max) = (3665618.472, 3675693.352, 3689109.254), stdev = 5873.222
  CI (99.9%): [3671769.377, 3679617.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reject  thrpt   30  3675693.352 ± 3923.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1578606.029 ops/s
# Warmup Iteration   2: 3794488.179 ops/s
# Warmup Iteration   3: 3442053.847 ops/s
# Warmup Iteration   4: 3553107.752 ops/s
# Warmup Iteration   5: 3830628.644 ops/s
# Warmup Iteration   6: 3841658.553 ops/s
# Warmup Iteration   7: 3837640.528 ops/s
# Warmup Iteration   8: 3838013.022 ops/s
# Warmup Iteration   9: 3850389.358 ops/s
# Warmup Iteration  10: 3841045.937 ops/s
# Warmup Iteration  11: 3839784.762 ops/s
# Warmup Iteration  12: 3830344.445 ops/s
# Warmup Iteration  13: 3846665.041 ops/s
# Warmup Iteration  14: 3842765.819 ops/s
# Warmup Iteration  15: 3829052.199 ops/s
# Warmup Iteration  16: 3837253.087 ops/s
# Warmup Iteration  17: 3844973.408 ops/s
# Warmup Iteration  18: 3834591.944 ops/s
# Warmup Iteration  19: 3839736.042 ops/s
# Warmup Iteration  20: 3841147.531 ops/s
# Warmup Iteration  21: 3847243.326 ops/s
# Warmup Iteration  22: 3841138.094 ops/s
# Warmup Iteration  23: 3831460.782 ops/s
# Warmup Iteration  24: 3835760.849 ops/s
# Warmup Iteration  25: 3836468.931 ops/s
# Warmup Iteration  26: 3836522.751 ops/s
# Warmup Iteration  27: 3839582.441 ops/s
# Warmup Iteration  28: 3841053.390 ops/s
# Warmup Iteration  29: 3837225.644 ops/s
# Warmup Iteration  30: 3839659.089 ops/s
Iteration   1: 3801409.692 ops/s
Iteration   2: 3843601.963 ops/s
Iteration   3: 3842489.569 ops/s
Iteration   4: 3822801.068 ops/s
Iteration   5: 3852562.645 ops/s
Iteration   6: 3841944.442 ops/s
Iteration   7: 3850499.310 ops/s
Iteration   8: 3849458.435 ops/s
Iteration   9: 3857104.516 ops/s
Iteration  10: 3842082.854 ops/s
Iteration  11: 3835991.722 ops/s
Iteration  12: 3844758.083 ops/s
Iteration  13: 3835794.731 ops/s
Iteration  14: 3844439.257 ops/s
Iteration  15: 3836795.233 ops/s
Iteration  16: 3841199.375 ops/s
Iteration  17: 3837043.580 ops/s
Iteration  18: 3844923.361 ops/s
Iteration  19: 3844196.030 ops/s
Iteration  20: 3833387.729 ops/s
Iteration  21: 3849973.610 ops/s
Iteration  22: 3829411.839 ops/s
Iteration  23: 3830811.803 ops/s
Iteration  24: 3846079.695 ops/s
Iteration  25: 3844799.633 ops/s
Iteration  26: 3847883.274 ops/s
Iteration  27: 3839607.616 ops/s
Iteration  28: 3843277.038 ops/s
Iteration  29: 3827297.030 ops/s
Iteration  30: 3845776.243 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith":
  3840246.713 ±(99.9%) 7090.697 ops/s [Average]
  (min, avg, max) = (3801409.692, 3840246.713, 3857104.516), stdev = 10613.022
  CI (99.9%): [3833156.016, 3847337.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_rejectWith  thrpt   30  3840246.713 ± 7090.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2569538.810 ops/s
# Warmup Iteration   2: 7753278.217 ops/s
# Warmup Iteration   3: 7768558.391 ops/s
# Warmup Iteration   4: 6817851.246 ops/s
# Warmup Iteration   5: 7968791.441 ops/s
# Warmup Iteration   6: 7973944.629 ops/s
# Warmup Iteration   7: 7977203.015 ops/s
# Warmup Iteration   8: 7965660.005 ops/s
# Warmup Iteration   9: 7963650.444 ops/s
# Warmup Iteration  10: 7955527.713 ops/s
# Warmup Iteration  11: 7964617.921 ops/s
# Warmup Iteration  12: 7967076.479 ops/s
# Warmup Iteration  13: 7976570.664 ops/s
# Warmup Iteration  14: 7914928.958 ops/s
# Warmup Iteration  15: 7967891.673 ops/s
# Warmup Iteration  16: 7948231.181 ops/s
# Warmup Iteration  17: 7977466.856 ops/s
# Warmup Iteration  18: 7950845.407 ops/s
# Warmup Iteration  19: 7972089.460 ops/s
# Warmup Iteration  20: 7924442.236 ops/s
# Warmup Iteration  21: 7972422.203 ops/s
# Warmup Iteration  22: 7947091.406 ops/s
# Warmup Iteration  23: 7950172.288 ops/s
# Warmup Iteration  24: 7965183.249 ops/s
# Warmup Iteration  25: 7975778.594 ops/s
# Warmup Iteration  26: 7971489.956 ops/s
# Warmup Iteration  27: 7969000.238 ops/s
# Warmup Iteration  28: 7955043.557 ops/s
# Warmup Iteration  29: 7976309.043 ops/s
# Warmup Iteration  30: 7977581.357 ops/s
Iteration   1: 7950701.971 ops/s
Iteration   2: 7980788.509 ops/s
Iteration   3: 7956485.102 ops/s
Iteration   4: 7979236.091 ops/s
Iteration   5: 7975102.553 ops/s
Iteration   6: 7974338.496 ops/s
Iteration   7: 7969541.633 ops/s
Iteration   8: 7959334.170 ops/s
Iteration   9: 7935946.577 ops/s
Iteration  10: 7965626.290 ops/s
Iteration  11: 7979140.497 ops/s
Iteration  12: 7960216.798 ops/s
Iteration  13: 7974471.130 ops/s
Iteration  14: 7979969.776 ops/s
Iteration  15: 7965627.504 ops/s
Iteration  16: 7960809.483 ops/s
Iteration  17: 7971544.677 ops/s
Iteration  18: 7928204.717 ops/s
Iteration  19: 7949201.765 ops/s
Iteration  20: 7972374.191 ops/s
Iteration  21: 7956086.841 ops/s
Iteration  22: 7978078.049 ops/s
Iteration  23: 7976298.508 ops/s
Iteration  24: 7988704.692 ops/s
Iteration  25: 7964672.659 ops/s
Iteration  26: 7966971.339 ops/s
Iteration  27: 7969036.753 ops/s
Iteration  28: 7977625.323 ops/s
Iteration  29: 7998647.886 ops/s
Iteration  30: 7963667.377 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndex":
  7967615.045 ±(99.9%) 9705.044 ops/s [Average]
  (min, avg, max) = (7928204.717, 7967615.045, 7998647.886), stdev = 14526.054
  CI (99.9%): [7957910.001, 7977320.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  7967615.045 ± 9705.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1801500.431 ops/s
# Warmup Iteration   2: 4261377.277 ops/s
# Warmup Iteration   3: 4271216.905 ops/s
# Warmup Iteration   4: 3545940.756 ops/s
# Warmup Iteration   5: 4281332.287 ops/s
# Warmup Iteration   6: 4276309.207 ops/s
# Warmup Iteration   7: 4281180.631 ops/s
# Warmup Iteration   8: 4288505.913 ops/s
# Warmup Iteration   9: 4283195.337 ops/s
# Warmup Iteration  10: 4278763.568 ops/s
# Warmup Iteration  11: 4282779.887 ops/s
# Warmup Iteration  12: 4295666.041 ops/s
# Warmup Iteration  13: 4271899.527 ops/s
# Warmup Iteration  14: 4282195.308 ops/s
# Warmup Iteration  15: 4287786.459 ops/s
# Warmup Iteration  16: 4287574.838 ops/s
# Warmup Iteration  17: 4284532.623 ops/s
# Warmup Iteration  18: 4276908.090 ops/s
# Warmup Iteration  19: 4278350.869 ops/s
# Warmup Iteration  20: 4280830.007 ops/s
# Warmup Iteration  21: 4275210.153 ops/s
# Warmup Iteration  22: 4278765.591 ops/s
# Warmup Iteration  23: 4281864.856 ops/s
# Warmup Iteration  24: 4282284.059 ops/s
# Warmup Iteration  25: 4285499.074 ops/s
# Warmup Iteration  26: 4275902.372 ops/s
# Warmup Iteration  27: 4277252.536 ops/s
# Warmup Iteration  28: 4284039.875 ops/s
# Warmup Iteration  29: 4280170.631 ops/s
# Warmup Iteration  30: 4280204.944 ops/s
Iteration   1: 4287547.964 ops/s
Iteration   2: 4269987.577 ops/s
Iteration   3: 4291917.013 ops/s
Iteration   4: 4272972.911 ops/s
Iteration   5: 4289679.301 ops/s
Iteration   6: 4287955.580 ops/s
Iteration   7: 4269205.261 ops/s
Iteration   8: 4283967.209 ops/s
Iteration   9: 4286082.675 ops/s
Iteration  10: 4273791.461 ops/s
Iteration  11: 4287807.367 ops/s
Iteration  12: 4289856.755 ops/s
Iteration  13: 4275705.542 ops/s
Iteration  14: 4294284.645 ops/s
Iteration  15: 4286782.693 ops/s
Iteration  16: 4290940.512 ops/s
Iteration  17: 4275022.635 ops/s
Iteration  18: 4276608.031 ops/s
Iteration  19: 4286475.456 ops/s
Iteration  20: 4295189.824 ops/s
Iteration  21: 4288789.973 ops/s
Iteration  22: 4286425.596 ops/s
Iteration  23: 4288526.095 ops/s
Iteration  24: 4277020.697 ops/s
Iteration  25: 4283828.025 ops/s
Iteration  26: 4281860.708 ops/s
Iteration  27: 4281862.958 ops/s
Iteration  28: 4288140.745 ops/s
Iteration  29: 4287127.347 ops/s
Iteration  30: 4288683.506 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  4284134.869 ±(99.9%) 4756.612 ops/s [Average]
  (min, avg, max) = (4269205.261, 4284134.869, 4295189.824), stdev = 7119.474
  CI (99.9%): [4279378.256, 4288891.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  4284134.869 ± 4756.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1163597.521 ops/s
# Warmup Iteration   2: 2932581.006 ops/s
# Warmup Iteration   3: 2989338.974 ops/s
# Warmup Iteration   4: 2484907.042 ops/s
# Warmup Iteration   5: 3003467.104 ops/s
# Warmup Iteration   6: 3007266.878 ops/s
# Warmup Iteration   7: 3000277.091 ops/s
# Warmup Iteration   8: 3006720.829 ops/s
# Warmup Iteration   9: 3005189.313 ops/s
# Warmup Iteration  10: 3009629.211 ops/s
# Warmup Iteration  11: 3005531.697 ops/s
# Warmup Iteration  12: 2998811.626 ops/s
# Warmup Iteration  13: 2998722.718 ops/s
# Warmup Iteration  14: 3010942.298 ops/s
# Warmup Iteration  15: 3006757.936 ops/s
# Warmup Iteration  16: 3008443.114 ops/s
# Warmup Iteration  17: 3009120.767 ops/s
# Warmup Iteration  18: 3009519.484 ops/s
# Warmup Iteration  19: 3009309.406 ops/s
# Warmup Iteration  20: 3005567.749 ops/s
# Warmup Iteration  21: 3009428.418 ops/s
# Warmup Iteration  22: 3010237.957 ops/s
# Warmup Iteration  23: 3006478.109 ops/s
# Warmup Iteration  24: 3010434.517 ops/s
# Warmup Iteration  25: 3010464.487 ops/s
# Warmup Iteration  26: 3011816.242 ops/s
# Warmup Iteration  27: 3011754.001 ops/s
# Warmup Iteration  28: 3008858.688 ops/s
# Warmup Iteration  29: 3000901.015 ops/s
# Warmup Iteration  30: 2999531.571 ops/s
Iteration   1: 3015006.816 ops/s
Iteration   2: 3009269.669 ops/s
Iteration   3: 3006928.845 ops/s
Iteration   4: 3010237.665 ops/s
Iteration   5: 3009612.306 ops/s
Iteration   6: 3018226.403 ops/s
Iteration   7: 3007718.177 ops/s
Iteration   8: 3007802.821 ops/s
Iteration   9: 3011462.843 ops/s
Iteration  10: 3011694.442 ops/s
Iteration  11: 3006808.419 ops/s
Iteration  12: 3008480.696 ops/s
Iteration  13: 3009741.750 ops/s
Iteration  14: 3012627.124 ops/s
Iteration  15: 3009057.606 ops/s
Iteration  16: 3000500.293 ops/s
Iteration  17: 3014966.455 ops/s
Iteration  18: 3002512.110 ops/s
Iteration  19: 3007965.490 ops/s
Iteration  20: 3006765.971 ops/s
Iteration  21: 3009438.404 ops/s
Iteration  22: 3015417.661 ops/s
Iteration  23: 3007515.355 ops/s
Iteration  24: 3010448.441 ops/s
Iteration  25: 3013069.768 ops/s
Iteration  26: 3000442.853 ops/s
Iteration  27: 2996037.363 ops/s
Iteration  28: 2989172.238 ops/s
Iteration  29: 3001304.882 ops/s
Iteration  30: 2983404.351 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_rejectWith_target":
  3007121.241 ±(99.9%) 4999.326 ops/s [Average]
  (min, avg, max) = (2983404.351, 3007121.241, 3018226.403), stdev = 7482.756
  CI (99.9%): [3002121.915, 3012120.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3007121.241 ± 4999.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 560446.444 ops/s
# Warmup Iteration   2: 1030951.448 ops/s
# Warmup Iteration   3: 1182853.649 ops/s
# Warmup Iteration   4: 1188671.711 ops/s
# Warmup Iteration   5: 1184802.262 ops/s
# Warmup Iteration   6: 978980.796 ops/s
# Warmup Iteration   7: 1186726.295 ops/s
# Warmup Iteration   8: 1187930.366 ops/s
# Warmup Iteration   9: 1188666.404 ops/s
# Warmup Iteration  10: 1188662.852 ops/s
# Warmup Iteration  11: 1189123.805 ops/s
# Warmup Iteration  12: 1186567.689 ops/s
# Warmup Iteration  13: 1188039.755 ops/s
# Warmup Iteration  14: 1188189.817 ops/s
# Warmup Iteration  15: 1187943.932 ops/s
# Warmup Iteration  16: 1189288.729 ops/s
# Warmup Iteration  17: 1188779.089 ops/s
# Warmup Iteration  18: 1189690.324 ops/s
# Warmup Iteration  19: 1190314.493 ops/s
# Warmup Iteration  20: 1186214.070 ops/s
# Warmup Iteration  21: 1189563.024 ops/s
# Warmup Iteration  22: 1190471.643 ops/s
# Warmup Iteration  23: 1184690.274 ops/s
# Warmup Iteration  24: 1190396.475 ops/s
# Warmup Iteration  25: 1186190.722 ops/s
# Warmup Iteration  26: 1188862.794 ops/s
# Warmup Iteration  27: 1188331.152 ops/s
# Warmup Iteration  28: 1188513.633 ops/s
# Warmup Iteration  29: 1188821.416 ops/s
# Warmup Iteration  30: 1187269.112 ops/s
Iteration   1: 1191225.809 ops/s
Iteration   2: 1192693.620 ops/s
Iteration   3: 1184497.059 ops/s
Iteration   4: 1189331.780 ops/s
Iteration   5: 1186474.908 ops/s
Iteration   6: 1186022.404 ops/s
Iteration   7: 1192244.763 ops/s
Iteration   8: 1187398.942 ops/s
Iteration   9: 1190372.827 ops/s
Iteration  10: 1186827.162 ops/s
Iteration  11: 1188561.953 ops/s
Iteration  12: 1189418.628 ops/s
Iteration  13: 1181011.262 ops/s
Iteration  14: 1190008.310 ops/s
Iteration  15: 1184795.501 ops/s
Iteration  16: 1187026.548 ops/s
Iteration  17: 1190258.725 ops/s
Iteration  18: 1186650.516 ops/s
Iteration  19: 1189957.220 ops/s
Iteration  20: 1186912.562 ops/s
Iteration  21: 1188625.036 ops/s
Iteration  22: 1189319.902 ops/s
Iteration  23: 1188630.504 ops/s
Iteration  24: 1192694.438 ops/s
Iteration  25: 1189042.933 ops/s
Iteration  26: 1187587.708 ops/s
Iteration  27: 1188214.734 ops/s
Iteration  28: 1185552.974 ops/s
Iteration  29: 1190149.767 ops/s
Iteration  30: 1188504.457 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAll":
  1188333.765 ±(99.9%) 1709.461 ops/s [Average]
  (min, avg, max) = (1181011.262, 1188333.765, 1192694.438), stdev = 2558.640
  CI (99.9%): [1186624.305, 1190043.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeAll  thrpt   30  1188333.765 ± 1709.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449380.928 ops/s
# Warmup Iteration   2: 777674.029 ops/s
# Warmup Iteration   3: 916155.099 ops/s
# Warmup Iteration   4: 925163.128 ops/s
# Warmup Iteration   5: 922906.479 ops/s
# Warmup Iteration   6: 760551.974 ops/s
# Warmup Iteration   7: 926253.414 ops/s
# Warmup Iteration   8: 924244.828 ops/s
# Warmup Iteration   9: 924349.735 ops/s
# Warmup Iteration  10: 922497.093 ops/s
# Warmup Iteration  11: 924462.492 ops/s
# Warmup Iteration  12: 924521.314 ops/s
# Warmup Iteration  13: 924267.175 ops/s
# Warmup Iteration  14: 926152.955 ops/s
# Warmup Iteration  15: 925633.553 ops/s
# Warmup Iteration  16: 926517.150 ops/s
# Warmup Iteration  17: 924590.290 ops/s
# Warmup Iteration  18: 923070.834 ops/s
# Warmup Iteration  19: 925312.503 ops/s
# Warmup Iteration  20: 924222.856 ops/s
# Warmup Iteration  21: 923443.216 ops/s
# Warmup Iteration  22: 925578.232 ops/s
# Warmup Iteration  23: 925801.022 ops/s
# Warmup Iteration  24: 923684.643 ops/s
# Warmup Iteration  25: 924762.019 ops/s
# Warmup Iteration  26: 923470.284 ops/s
# Warmup Iteration  27: 921587.663 ops/s
# Warmup Iteration  28: 924606.475 ops/s
# Warmup Iteration  29: 925740.224 ops/s
# Warmup Iteration  30: 925243.406 ops/s
Iteration   1: 924144.801 ops/s
Iteration   2: 925350.194 ops/s
Iteration   3: 927468.004 ops/s
Iteration   4: 920345.283 ops/s
Iteration   5: 926654.676 ops/s
Iteration   6: 926005.484 ops/s
Iteration   7: 924703.609 ops/s
Iteration   8: 925372.061 ops/s
Iteration   9: 925795.199 ops/s
Iteration  10: 927001.054 ops/s
Iteration  11: 926578.212 ops/s
Iteration  12: 922140.076 ops/s
Iteration  13: 924427.814 ops/s
Iteration  14: 922242.135 ops/s
Iteration  15: 923495.309 ops/s
Iteration  16: 926676.061 ops/s
Iteration  17: 923215.302 ops/s
Iteration  18: 924961.080 ops/s
Iteration  19: 923579.187 ops/s
Iteration  20: 925668.433 ops/s
Iteration  21: 924464.405 ops/s
Iteration  22: 927285.914 ops/s
Iteration  23: 925245.098 ops/s
Iteration  24: 925709.828 ops/s
Iteration  25: 922585.449 ops/s
Iteration  26: 925270.334 ops/s
Iteration  27: 924287.686 ops/s
Iteration  28: 919232.696 ops/s
Iteration  29: 927155.919 ops/s
Iteration  30: 927116.585 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeAllIterable":
  924805.929 ±(99.9%) 1360.757 ops/s [Average]
  (min, avg, max) = (919232.696, 924805.929, 927468.004), stdev = 2036.718
  CI (99.9%): [923445.172, 926166.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeAllIterable  thrpt   30  924805.929 ± 1360.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709886.520 ops/s
# Warmup Iteration   2: 3923757.160 ops/s
# Warmup Iteration   3: 4008940.056 ops/s
# Warmup Iteration   4: 3390464.930 ops/s
# Warmup Iteration   5: 3961388.683 ops/s
# Warmup Iteration   6: 4011008.176 ops/s
# Warmup Iteration   7: 4020192.250 ops/s
# Warmup Iteration   8: 4020549.893 ops/s
# Warmup Iteration   9: 3999420.749 ops/s
# Warmup Iteration  10: 4011467.632 ops/s
# Warmup Iteration  11: 4003582.917 ops/s
# Warmup Iteration  12: 4018392.591 ops/s
# Warmup Iteration  13: 4013739.624 ops/s
# Warmup Iteration  14: 4010100.243 ops/s
# Warmup Iteration  15: 4009748.516 ops/s
# Warmup Iteration  16: 4016654.934 ops/s
# Warmup Iteration  17: 4019128.538 ops/s
# Warmup Iteration  18: 4010300.633 ops/s
# Warmup Iteration  19: 4008492.103 ops/s
# Warmup Iteration  20: 4011298.776 ops/s
# Warmup Iteration  21: 4009727.821 ops/s
# Warmup Iteration  22: 4014087.356 ops/s
# Warmup Iteration  23: 4019169.592 ops/s
# Warmup Iteration  24: 4008747.698 ops/s
# Warmup Iteration  25: 4017386.520 ops/s
# Warmup Iteration  26: 4014085.965 ops/s
# Warmup Iteration  27: 4013452.794 ops/s
# Warmup Iteration  28: 4013288.175 ops/s
# Warmup Iteration  29: 4008808.161 ops/s
# Warmup Iteration  30: 4014250.984 ops/s
Iteration   1: 4004745.861 ops/s
Iteration   2: 4017502.182 ops/s
Iteration   3: 4004619.589 ops/s
Iteration   4: 4008821.919 ops/s
Iteration   5: 4019339.484 ops/s
Iteration   6: 4023695.936 ops/s
Iteration   7: 4012144.231 ops/s
Iteration   8: 4026654.178 ops/s
Iteration   9: 4000606.036 ops/s
Iteration  10: 4014551.330 ops/s
Iteration  11: 4017205.161 ops/s
Iteration  12: 4022162.871 ops/s
Iteration  13: 4005790.992 ops/s
Iteration  14: 4007303.654 ops/s
Iteration  15: 4002475.189 ops/s
Iteration  16: 4011664.855 ops/s
Iteration  17: 4017356.591 ops/s
Iteration  18: 4012246.527 ops/s
Iteration  19: 4010631.325 ops/s
Iteration  20: 4016760.263 ops/s
Iteration  21: 3984415.792 ops/s
Iteration  22: 4014156.244 ops/s
Iteration  23: 3999379.471 ops/s
Iteration  24: 4017354.992 ops/s
Iteration  25: 4009503.595 ops/s
Iteration  26: 4020491.454 ops/s
Iteration  27: 4017326.471 ops/s
Iteration  28: 4019000.870 ops/s
Iteration  29: 4024338.897 ops/s
Iteration  30: 4013929.668 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIf":
  4012539.188 ±(99.9%) 5925.079 ops/s [Average]
  (min, avg, max) = (3984415.792, 4012539.188, 4026654.178), stdev = 8868.380
  CI (99.9%): [4006614.109, 4018464.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeIf  thrpt   30  4012539.188 ± 5925.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1568367.761 ops/s
# Warmup Iteration   2: 2945812.747 ops/s
# Warmup Iteration   3: 3210185.980 ops/s
# Warmup Iteration   4: 3229101.260 ops/s
# Warmup Iteration   5: 2782625.918 ops/s
# Warmup Iteration   6: 3113522.203 ops/s
# Warmup Iteration   7: 3228607.064 ops/s
# Warmup Iteration   8: 3230953.501 ops/s
# Warmup Iteration   9: 3236382.461 ops/s
# Warmup Iteration  10: 3226934.070 ops/s
# Warmup Iteration  11: 3235102.568 ops/s
# Warmup Iteration  12: 3223921.679 ops/s
# Warmup Iteration  13: 3218007.882 ops/s
# Warmup Iteration  14: 3228973.205 ops/s
# Warmup Iteration  15: 3232078.438 ops/s
# Warmup Iteration  16: 3236186.274 ops/s
# Warmup Iteration  17: 3230317.869 ops/s
# Warmup Iteration  18: 3231571.408 ops/s
# Warmup Iteration  19: 3226648.637 ops/s
# Warmup Iteration  20: 3235303.829 ops/s
# Warmup Iteration  21: 3223521.891 ops/s
# Warmup Iteration  22: 3225687.738 ops/s
# Warmup Iteration  23: 3233815.020 ops/s
# Warmup Iteration  24: 3230212.676 ops/s
# Warmup Iteration  25: 3227706.793 ops/s
# Warmup Iteration  26: 3226487.484 ops/s
# Warmup Iteration  27: 3233116.636 ops/s
# Warmup Iteration  28: 3222198.801 ops/s
# Warmup Iteration  29: 3228821.140 ops/s
# Warmup Iteration  30: 3233563.214 ops/s
Iteration   1: 3220989.665 ops/s
Iteration   2: 3220567.182 ops/s
Iteration   3: 3227998.474 ops/s
Iteration   4: 3219820.393 ops/s
Iteration   5: 3234771.233 ops/s
Iteration   6: 3231404.010 ops/s
Iteration   7: 3236596.062 ops/s
Iteration   8: 3230343.538 ops/s
Iteration   9: 3241506.368 ops/s
Iteration  10: 3232180.701 ops/s
Iteration  11: 3228581.578 ops/s
Iteration  12: 3227463.935 ops/s
Iteration  13: 3229876.325 ops/s
Iteration  14: 3214563.462 ops/s
Iteration  15: 3227821.285 ops/s
Iteration  16: 3234491.169 ops/s
Iteration  17: 3219896.757 ops/s
Iteration  18: 3229379.046 ops/s
Iteration  19: 3228284.737 ops/s
Iteration  20: 3227994.017 ops/s
Iteration  21: 3224700.572 ops/s
Iteration  22: 3232846.373 ops/s
Iteration  23: 3228694.955 ops/s
Iteration  24: 3236524.117 ops/s
Iteration  25: 3230626.670 ops/s
Iteration  26: 3224409.878 ops/s
Iteration  27: 3232963.847 ops/s
Iteration  28: 3226079.517 ops/s
Iteration  29: 3229855.749 ops/s
Iteration  30: 3227480.814 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIfWith":
  3228623.748 ±(99.9%) 3824.343 ops/s [Average]
  (min, avg, max) = (3214563.462, 3228623.748, 3241506.368), stdev = 5724.098
  CI (99.9%): [3224799.404, 3232448.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeIfWith  thrpt   30  3228623.748 ± 3824.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7094836.631 ops/s
# Warmup Iteration   2: 15848240.093 ops/s
# Warmup Iteration   3: 15750759.262 ops/s
# Warmup Iteration   4: 13148956.684 ops/s
# Warmup Iteration   5: 15729897.468 ops/s
# Warmup Iteration   6: 15780427.542 ops/s
# Warmup Iteration   7: 15760530.489 ops/s
# Warmup Iteration   8: 15713674.985 ops/s
# Warmup Iteration   9: 15753028.899 ops/s
# Warmup Iteration  10: 15758702.138 ops/s
# Warmup Iteration  11: 15751661.986 ops/s
# Warmup Iteration  12: 15734423.550 ops/s
# Warmup Iteration  13: 15786503.809 ops/s
# Warmup Iteration  14: 15778682.733 ops/s
# Warmup Iteration  15: 15769238.903 ops/s
# Warmup Iteration  16: 15738010.438 ops/s
# Warmup Iteration  17: 15584185.337 ops/s
# Warmup Iteration  18: 15611268.000 ops/s
# Warmup Iteration  19: 15569897.233 ops/s
# Warmup Iteration  20: 15578648.073 ops/s
# Warmup Iteration  21: 15586640.758 ops/s
# Warmup Iteration  22: 15615940.338 ops/s
# Warmup Iteration  23: 15600283.774 ops/s
# Warmup Iteration  24: 15610449.708 ops/s
# Warmup Iteration  25: 15594935.990 ops/s
# Warmup Iteration  26: 15574679.080 ops/s
# Warmup Iteration  27: 15583004.808 ops/s
# Warmup Iteration  28: 15606324.764 ops/s
# Warmup Iteration  29: 15605104.699 ops/s
# Warmup Iteration  30: 15612994.021 ops/s
Iteration   1: 15585028.258 ops/s
Iteration   2: 15568366.310 ops/s
Iteration   3: 15591064.543 ops/s
Iteration   4: 15637837.744 ops/s
Iteration   5: 15608802.556 ops/s
Iteration   6: 15607716.724 ops/s
Iteration   7: 15608317.682 ops/s
Iteration   8: 15573182.692 ops/s
Iteration   9: 15593048.779 ops/s
Iteration  10: 15590610.719 ops/s
Iteration  11: 15614140.960 ops/s
Iteration  12: 15637310.658 ops/s
Iteration  13: 15575228.379 ops/s
Iteration  14: 15599313.603 ops/s
Iteration  15: 15571247.594 ops/s
Iteration  16: 15611048.471 ops/s
Iteration  17: 15628251.138 ops/s
Iteration  18: 15596916.183 ops/s
Iteration  19: 15576156.691 ops/s
Iteration  20: 15577899.025 ops/s
Iteration  21: 15633342.121 ops/s
Iteration  22: 15566145.871 ops/s
Iteration  23: 15596578.080 ops/s
Iteration  24: 15617122.700 ops/s
Iteration  25: 15604914.440 ops/s
Iteration  26: 15565025.689 ops/s
Iteration  27: 15641334.159 ops/s
Iteration  28: 15604171.104 ops/s
Iteration  29: 15644778.948 ops/s
Iteration  30: 15581396.007 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeIndex":
  15600209.928 ±(99.9%) 16034.548 ops/s [Average]
  (min, avg, max) = (15565025.689, 15600209.928, 15644778.948), stdev = 23999.758
  CI (99.9%): [15584175.380, 15616244.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeIndex  thrpt   30  15600209.928 ± 16034.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8168384.846 ops/s
# Warmup Iteration   2: 17612819.475 ops/s
# Warmup Iteration   3: 14781892.153 ops/s
# Warmup Iteration   4: 17768978.232 ops/s
# Warmup Iteration   5: 17730557.998 ops/s
# Warmup Iteration   6: 17723378.039 ops/s
# Warmup Iteration   7: 17732275.925 ops/s
# Warmup Iteration   8: 17714082.172 ops/s
# Warmup Iteration   9: 17730321.188 ops/s
# Warmup Iteration  10: 17706999.711 ops/s
# Warmup Iteration  11: 17725120.453 ops/s
# Warmup Iteration  12: 17744395.059 ops/s
# Warmup Iteration  13: 17709771.433 ops/s
# Warmup Iteration  14: 17720935.290 ops/s
# Warmup Iteration  15: 17709676.809 ops/s
# Warmup Iteration  16: 17727692.999 ops/s
# Warmup Iteration  17: 17750382.870 ops/s
# Warmup Iteration  18: 17718712.895 ops/s
# Warmup Iteration  19: 17701677.946 ops/s
# Warmup Iteration  20: 17680898.255 ops/s
# Warmup Iteration  21: 17733864.102 ops/s
# Warmup Iteration  22: 17692214.394 ops/s
# Warmup Iteration  23: 17724603.777 ops/s
# Warmup Iteration  24: 17724690.323 ops/s
# Warmup Iteration  25: 17744829.944 ops/s
# Warmup Iteration  26: 17667812.084 ops/s
# Warmup Iteration  27: 17728200.388 ops/s
# Warmup Iteration  28: 17672297.265 ops/s
# Warmup Iteration  29: 17709271.941 ops/s
# Warmup Iteration  30: 17739614.322 ops/s
Iteration   1: 17727382.684 ops/s
Iteration   2: 17707425.602 ops/s
Iteration   3: 17755469.432 ops/s
Iteration   4: 17742700.915 ops/s
Iteration   5: 17748534.573 ops/s
Iteration   6: 17721194.956 ops/s
Iteration   7: 17710161.423 ops/s
Iteration   8: 17679722.754 ops/s
Iteration   9: 17723067.497 ops/s
Iteration  10: 17706853.504 ops/s
Iteration  11: 17740264.401 ops/s
Iteration  12: 17645887.488 ops/s
Iteration  13: 17725001.853 ops/s
Iteration  14: 17758328.452 ops/s
Iteration  15: 17708254.130 ops/s
Iteration  16: 17777234.548 ops/s
Iteration  17: 17703529.019 ops/s
Iteration  18: 17765812.933 ops/s
Iteration  19: 17753147.992 ops/s
Iteration  20: 17744611.636 ops/s
Iteration  21: 17705801.310 ops/s
Iteration  22: 17699796.635 ops/s
Iteration  23: 17652403.582 ops/s
Iteration  24: 17703414.533 ops/s
Iteration  25: 17630143.941 ops/s
Iteration  26: 17754569.634 ops/s
Iteration  27: 17714582.446 ops/s
Iteration  28: 17728045.591 ops/s
Iteration  29: 17720406.245 ops/s
Iteration  30: 17752717.593 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_removeObject":
  17720215.577 ±(99.9%) 23367.611 ops/s [Average]
  (min, avg, max) = (17630143.941, 17720215.577, 17777234.548), stdev = 34975.543
  CI (99.9%): [17696847.966, 17743583.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_removeObject  thrpt   30  17720215.577 ± 23367.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6066048.885 ops/s
# Warmup Iteration   2: 12531210.527 ops/s
# Warmup Iteration   3: 12965850.207 ops/s
# Warmup Iteration   4: 13027281.740 ops/s
# Warmup Iteration   5: 10797850.544 ops/s
# Warmup Iteration   6: 13010824.275 ops/s
# Warmup Iteration   7: 13040159.888 ops/s
# Warmup Iteration   8: 13022454.458 ops/s
# Warmup Iteration   9: 13027993.999 ops/s
# Warmup Iteration  10: 13019119.731 ops/s
# Warmup Iteration  11: 13050079.456 ops/s
# Warmup Iteration  12: 13015649.288 ops/s
# Warmup Iteration  13: 13020220.787 ops/s
# Warmup Iteration  14: 13020997.149 ops/s
# Warmup Iteration  15: 13047266.938 ops/s
# Warmup Iteration  16: 13031681.017 ops/s
# Warmup Iteration  17: 13040046.154 ops/s
# Warmup Iteration  18: 13050268.253 ops/s
# Warmup Iteration  19: 13007880.539 ops/s
# Warmup Iteration  20: 13041426.609 ops/s
# Warmup Iteration  21: 13029345.283 ops/s
# Warmup Iteration  22: 13047023.832 ops/s
# Warmup Iteration  23: 13031510.507 ops/s
# Warmup Iteration  24: 13036642.749 ops/s
# Warmup Iteration  25: 13033024.874 ops/s
# Warmup Iteration  26: 13037888.263 ops/s
# Warmup Iteration  27: 13035106.077 ops/s
# Warmup Iteration  28: 12978622.473 ops/s
# Warmup Iteration  29: 13045702.826 ops/s
# Warmup Iteration  30: 13050630.467 ops/s
Iteration   1: 13022503.888 ops/s
Iteration   2: 13011337.302 ops/s
Iteration   3: 13053798.493 ops/s
Iteration   4: 12943703.315 ops/s
Iteration   5: 13040967.577 ops/s
Iteration   6: 13052059.739 ops/s
Iteration   7: 13023366.507 ops/s
Iteration   8: 13029070.420 ops/s
Iteration   9: 13063690.312 ops/s
Iteration  10: 13038355.677 ops/s
Iteration  11: 13056765.203 ops/s
Iteration  12: 13036559.517 ops/s
Iteration  13: 13036979.598 ops/s
Iteration  14: 13032752.377 ops/s
Iteration  15: 13021185.851 ops/s
Iteration  16: 13041746.392 ops/s
Iteration  17: 13036627.146 ops/s
Iteration  18: 13037285.490 ops/s
Iteration  19: 13017718.046 ops/s
Iteration  20: 13060373.609 ops/s
Iteration  21: 12998877.871 ops/s
Iteration  22: 13032091.844 ops/s
Iteration  23: 13010013.320 ops/s
Iteration  24: 13077076.173 ops/s
Iteration  25: 13039541.681 ops/s
Iteration  26: 13032028.703 ops/s
Iteration  27: 13062405.465 ops/s
Iteration  28: 13036646.880 ops/s
Iteration  29: 12986478.258 ops/s
Iteration  30: 13028871.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_replaceAll":
  13032029.281 ±(99.9%) 17113.075 ops/s [Average]
  (min, avg, max) = (12943703.315, 13032029.281, 13077076.173), stdev = 25614.047
  CI (99.9%): [13014916.206, 13049142.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_replaceAll  thrpt   30  13032029.281 ± 17113.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 359304.928 ops/s
# Warmup Iteration   2: 532259.799 ops/s
# Warmup Iteration   3: 670631.790 ops/s
# Warmup Iteration   4: 667555.799 ops/s
# Warmup Iteration   5: 670020.816 ops/s
# Warmup Iteration   6: 672365.835 ops/s
# Warmup Iteration   7: 670490.322 ops/s
# Warmup Iteration   8: 554182.464 ops/s
# Warmup Iteration   9: 671767.443 ops/s
# Warmup Iteration  10: 671923.502 ops/s
# Warmup Iteration  11: 672476.908 ops/s
# Warmup Iteration  12: 671331.132 ops/s
# Warmup Iteration  13: 670848.334 ops/s
# Warmup Iteration  14: 672105.067 ops/s
# Warmup Iteration  15: 671924.312 ops/s
# Warmup Iteration  16: 673096.956 ops/s
# Warmup Iteration  17: 671802.526 ops/s
# Warmup Iteration  18: 671717.557 ops/s
# Warmup Iteration  19: 672713.882 ops/s
# Warmup Iteration  20: 671229.764 ops/s
# Warmup Iteration  21: 672898.949 ops/s
# Warmup Iteration  22: 671858.667 ops/s
# Warmup Iteration  23: 671546.211 ops/s
# Warmup Iteration  24: 671556.981 ops/s
# Warmup Iteration  25: 671716.037 ops/s
# Warmup Iteration  26: 672770.163 ops/s
# Warmup Iteration  27: 672766.382 ops/s
# Warmup Iteration  28: 669374.761 ops/s
# Warmup Iteration  29: 671648.734 ops/s
# Warmup Iteration  30: 670719.110 ops/s
Iteration   1: 673503.193 ops/s
Iteration   2: 672126.589 ops/s
Iteration   3: 673598.283 ops/s
Iteration   4: 671182.168 ops/s
Iteration   5: 671259.064 ops/s
Iteration   6: 670126.494 ops/s
Iteration   7: 670500.977 ops/s
Iteration   8: 672961.025 ops/s
Iteration   9: 672451.451 ops/s
Iteration  10: 671770.607 ops/s
Iteration  11: 673180.809 ops/s
Iteration  12: 671549.971 ops/s
Iteration  13: 674034.913 ops/s
Iteration  14: 671781.449 ops/s
Iteration  15: 670010.990 ops/s
Iteration  16: 672263.408 ops/s
Iteration  17: 670048.034 ops/s
Iteration  18: 672730.763 ops/s
Iteration  19: 669293.364 ops/s
Iteration  20: 671285.048 ops/s
Iteration  21: 672990.691 ops/s
Iteration  22: 670420.966 ops/s
Iteration  23: 669670.374 ops/s
Iteration  24: 670130.880 ops/s
Iteration  25: 672134.729 ops/s
Iteration  26: 672828.878 ops/s
Iteration  27: 672139.857 ops/s
Iteration  28: 671820.660 ops/s
Iteration  29: 671091.626 ops/s
Iteration  30: 673265.873 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAll":
  671738.438 ±(99.9%) 864.060 ops/s [Average]
  (min, avg, max) = (669293.364, 671738.438, 674034.913), stdev = 1293.284
  CI (99.9%): [670874.378, 672602.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_retainAll  thrpt   30  671738.438 ± 864.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519681.993 ops/s
# Warmup Iteration   2: 812560.373 ops/s
# Warmup Iteration   3: 1015268.847 ops/s
# Warmup Iteration   4: 1003243.580 ops/s
# Warmup Iteration   5: 1009283.443 ops/s
# Warmup Iteration   6: 1012194.701 ops/s
# Warmup Iteration   7: 893920.900 ops/s
# Warmup Iteration   8: 958837.896 ops/s
# Warmup Iteration   9: 1012701.174 ops/s
# Warmup Iteration  10: 1015097.547 ops/s
# Warmup Iteration  11: 1015657.378 ops/s
# Warmup Iteration  12: 1014941.489 ops/s
# Warmup Iteration  13: 1015840.234 ops/s
# Warmup Iteration  14: 1017597.762 ops/s
# Warmup Iteration  15: 1014918.168 ops/s
# Warmup Iteration  16: 1014166.177 ops/s
# Warmup Iteration  17: 1019194.367 ops/s
# Warmup Iteration  18: 1020003.934 ops/s
# Warmup Iteration  19: 1019079.183 ops/s
# Warmup Iteration  20: 1021034.809 ops/s
# Warmup Iteration  21: 1019822.303 ops/s
# Warmup Iteration  22: 1019814.172 ops/s
# Warmup Iteration  23: 1019119.027 ops/s
# Warmup Iteration  24: 1020962.228 ops/s
# Warmup Iteration  25: 1021370.680 ops/s
# Warmup Iteration  26: 1019370.293 ops/s
# Warmup Iteration  27: 1019335.411 ops/s
# Warmup Iteration  28: 1019879.093 ops/s
# Warmup Iteration  29: 1020003.520 ops/s
# Warmup Iteration  30: 1017045.509 ops/s
Iteration   1: 1018512.205 ops/s
Iteration   2: 1020612.038 ops/s
Iteration   3: 1018031.167 ops/s
Iteration   4: 1022794.269 ops/s
Iteration   5: 1019595.193 ops/s
Iteration   6: 1017401.695 ops/s
Iteration   7: 1019111.053 ops/s
Iteration   8: 1020306.036 ops/s
Iteration   9: 1023319.189 ops/s
Iteration  10: 1017637.901 ops/s
Iteration  11: 1021448.801 ops/s
Iteration  12: 1018520.442 ops/s
Iteration  13: 1023222.488 ops/s
Iteration  14: 1018607.606 ops/s
Iteration  15: 1020704.072 ops/s
Iteration  16: 1021976.295 ops/s
Iteration  17: 1017468.164 ops/s
Iteration  18: 1019315.409 ops/s
Iteration  19: 1018390.979 ops/s
Iteration  20: 1020130.798 ops/s
Iteration  21: 1020898.259 ops/s
Iteration  22: 1006972.676 ops/s
Iteration  23: 1022141.446 ops/s
Iteration  24: 1018724.113 ops/s
Iteration  25: 1023181.905 ops/s
Iteration  26: 1018227.871 ops/s
Iteration  27: 1017807.404 ops/s
Iteration  28: 1020784.412 ops/s
Iteration  29: 1019583.887 ops/s
Iteration  30: 1020246.511 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_retainAllIterable":
  1019522.476 ±(99.9%) 1992.701 ops/s [Average]
  (min, avg, max) = (1006972.676, 1019522.476, 1023319.189), stdev = 2982.582
  CI (99.9%): [1017529.775, 1021515.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1019522.476 ± 1992.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5845341.553 ops/s
# Warmup Iteration   2: 12562364.673 ops/s
# Warmup Iteration   3: 11391941.812 ops/s
# Warmup Iteration   4: 11839374.981 ops/s
# Warmup Iteration   5: 12708333.570 ops/s
# Warmup Iteration   6: 12724757.777 ops/s
# Warmup Iteration   7: 12719474.597 ops/s
# Warmup Iteration   8: 12703264.539 ops/s
# Warmup Iteration   9: 12712065.407 ops/s
# Warmup Iteration  10: 12741575.219 ops/s
# Warmup Iteration  11: 12704995.984 ops/s
# Warmup Iteration  12: 12753410.059 ops/s
# Warmup Iteration  13: 12736084.376 ops/s
# Warmup Iteration  14: 12745777.588 ops/s
# Warmup Iteration  15: 12703396.723 ops/s
# Warmup Iteration  16: 12736225.561 ops/s
# Warmup Iteration  17: 12720839.017 ops/s
# Warmup Iteration  18: 12710013.148 ops/s
# Warmup Iteration  19: 12739343.288 ops/s
# Warmup Iteration  20: 12723595.521 ops/s
# Warmup Iteration  21: 12721754.965 ops/s
# Warmup Iteration  22: 12657543.158 ops/s
# Warmup Iteration  23: 12688914.925 ops/s
# Warmup Iteration  24: 12727580.999 ops/s
# Warmup Iteration  25: 12713105.454 ops/s
# Warmup Iteration  26: 12713273.458 ops/s
# Warmup Iteration  27: 12723022.208 ops/s
# Warmup Iteration  28: 12725884.919 ops/s
# Warmup Iteration  29: 12695456.014 ops/s
# Warmup Iteration  30: 12688967.282 ops/s
Iteration   1: 12704979.983 ops/s
Iteration   2: 12710439.851 ops/s
Iteration   3: 12687854.062 ops/s
Iteration   4: 12742974.715 ops/s
Iteration   5: 12768473.934 ops/s
Iteration   6: 12715494.680 ops/s
Iteration   7: 12751544.638 ops/s
Iteration   8: 12695778.894 ops/s
Iteration   9: 12709512.503 ops/s
Iteration  10: 12728285.835 ops/s
Iteration  11: 12692917.198 ops/s
Iteration  12: 12674323.130 ops/s
Iteration  13: 12705827.508 ops/s
Iteration  14: 12715828.947 ops/s
Iteration  15: 12712760.078 ops/s
Iteration  16: 12756462.146 ops/s
Iteration  17: 12721154.693 ops/s
Iteration  18: 12734338.058 ops/s
Iteration  19: 12698762.811 ops/s
Iteration  20: 12711773.381 ops/s
Iteration  21: 12736269.588 ops/s
Iteration  22: 12728031.658 ops/s
Iteration  23: 12709233.193 ops/s
Iteration  24: 12730010.369 ops/s
Iteration  25: 12577595.201 ops/s
Iteration  26: 12702613.066 ops/s
Iteration  27: 12714944.597 ops/s
Iteration  28: 12678282.872 ops/s
Iteration  29: 12738318.589 ops/s
Iteration  30: 12747663.250 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach":
  12713414.981 ±(99.9%) 22824.944 ops/s [Average]
  (min, avg, max) = (12577595.201, 12713414.981, 12768473.934), stdev = 34163.304
  CI (99.9%): [12690590.037, 12736239.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reverseForEach  thrpt   30  12713414.981 ± 22824.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5414699.673 ops/s
# Warmup Iteration   2: 12221604.559 ops/s
# Warmup Iteration   3: 11756877.939 ops/s
# Warmup Iteration   4: 10938901.979 ops/s
# Warmup Iteration   5: 12357852.520 ops/s
# Warmup Iteration   6: 12378728.667 ops/s
# Warmup Iteration   7: 12393085.202 ops/s
# Warmup Iteration   8: 12367365.182 ops/s
# Warmup Iteration   9: 12386963.096 ops/s
# Warmup Iteration  10: 12384563.782 ops/s
# Warmup Iteration  11: 12386850.832 ops/s
# Warmup Iteration  12: 12353785.768 ops/s
# Warmup Iteration  13: 12403419.727 ops/s
# Warmup Iteration  14: 12374102.804 ops/s
# Warmup Iteration  15: 12397145.702 ops/s
# Warmup Iteration  16: 12409210.405 ops/s
# Warmup Iteration  17: 12380178.585 ops/s
# Warmup Iteration  18: 12402956.558 ops/s
# Warmup Iteration  19: 12366226.735 ops/s
# Warmup Iteration  20: 12376748.306 ops/s
# Warmup Iteration  21: 12368566.792 ops/s
# Warmup Iteration  22: 12399853.164 ops/s
# Warmup Iteration  23: 12389153.335 ops/s
# Warmup Iteration  24: 12391199.583 ops/s
# Warmup Iteration  25: 12383057.590 ops/s
# Warmup Iteration  26: 12402045.217 ops/s
# Warmup Iteration  27: 12383426.050 ops/s
# Warmup Iteration  28: 12377436.520 ops/s
# Warmup Iteration  29: 12376162.236 ops/s
# Warmup Iteration  30: 12395254.608 ops/s
Iteration   1: 12421837.584 ops/s
Iteration   2: 12384696.465 ops/s
Iteration   3: 12404929.650 ops/s
Iteration   4: 12422216.977 ops/s
Iteration   5: 12349211.039 ops/s
Iteration   6: 12380477.480 ops/s
Iteration   7: 12385405.208 ops/s
Iteration   8: 12386693.828 ops/s
Iteration   9: 12390772.190 ops/s
Iteration  10: 12371882.737 ops/s
Iteration  11: 12343197.410 ops/s
Iteration  12: 12398439.614 ops/s
Iteration  13: 12422913.734 ops/s
Iteration  14: 12390705.533 ops/s
Iteration  15: 12414335.415 ops/s
Iteration  16: 12416094.573 ops/s
Iteration  17: 12440011.147 ops/s
Iteration  18: 12385460.380 ops/s
Iteration  19: 12345461.973 ops/s
Iteration  20: 12362989.757 ops/s
Iteration  21: 12376732.768 ops/s
Iteration  22: 12340099.800 ops/s
Iteration  23: 12397432.220 ops/s
Iteration  24: 12352372.254 ops/s
Iteration  25: 12337499.148 ops/s
Iteration  26: 12400904.760 ops/s
Iteration  27: 12384914.985 ops/s
Iteration  28: 12394283.418 ops/s
Iteration  29: 12426837.858 ops/s
Iteration  30: 12408676.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex":
  12387916.207 ±(99.9%) 18775.990 ops/s [Average]
  (min, avg, max) = (12337499.148, 12387916.207, 12440011.147), stdev = 28103.019
  CI (99.9%): [12369140.218, 12406692.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  12387916.207 ± 18775.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59465909.972 ops/s
# Warmup Iteration   2: 113049348.785 ops/s
# Warmup Iteration   3: 100564159.554 ops/s
# Warmup Iteration   4: 117712110.137 ops/s
# Warmup Iteration   5: 117576812.297 ops/s
# Warmup Iteration   6: 117646238.127 ops/s
# Warmup Iteration   7: 117951637.218 ops/s
# Warmup Iteration   8: 117869360.522 ops/s
# Warmup Iteration   9: 117929996.933 ops/s
# Warmup Iteration  10: 117780152.668 ops/s
# Warmup Iteration  11: 117876080.559 ops/s
# Warmup Iteration  12: 118123686.467 ops/s
# Warmup Iteration  13: 117602904.869 ops/s
# Warmup Iteration  14: 117384020.465 ops/s
# Warmup Iteration  15: 117604108.382 ops/s
# Warmup Iteration  16: 117603164.600 ops/s
# Warmup Iteration  17: 118361008.563 ops/s
# Warmup Iteration  18: 118409471.666 ops/s
# Warmup Iteration  19: 118270891.641 ops/s
# Warmup Iteration  20: 118485460.210 ops/s
# Warmup Iteration  21: 118666136.293 ops/s
# Warmup Iteration  22: 118972216.901 ops/s
# Warmup Iteration  23: 118417418.301 ops/s
# Warmup Iteration  24: 118482319.024 ops/s
# Warmup Iteration  25: 118186656.475 ops/s
# Warmup Iteration  26: 118198693.684 ops/s
# Warmup Iteration  27: 118555112.962 ops/s
# Warmup Iteration  28: 118525557.220 ops/s
# Warmup Iteration  29: 117923906.561 ops/s
# Warmup Iteration  30: 118764268.033 ops/s
Iteration   1: 118116791.087 ops/s
Iteration   2: 118253581.128 ops/s
Iteration   3: 118682769.638 ops/s
Iteration   4: 118023746.410 ops/s
Iteration   5: 117823005.903 ops/s
Iteration   6: 118354871.229 ops/s
Iteration   7: 118069957.189 ops/s
Iteration   8: 118845934.603 ops/s
Iteration   9: 118486025.707 ops/s
Iteration  10: 118506295.011 ops/s
Iteration  11: 118464484.908 ops/s
Iteration  12: 118711606.166 ops/s
Iteration  13: 118050835.354 ops/s
Iteration  14: 118468708.339 ops/s
Iteration  15: 118152623.752 ops/s
Iteration  16: 118494124.855 ops/s
Iteration  17: 118184481.673 ops/s
Iteration  18: 119002634.543 ops/s
Iteration  19: 118447167.342 ops/s
Iteration  20: 117991875.080 ops/s
Iteration  21: 117956519.429 ops/s
Iteration  22: 118615956.152 ops/s
Iteration  23: 117965786.253 ops/s
Iteration  24: 118586012.268 ops/s
Iteration  25: 118866952.100 ops/s
Iteration  26: 118196934.350 ops/s
Iteration  27: 117640205.505 ops/s
Iteration  28: 118621581.083 ops/s
Iteration  29: 118356183.609 ops/s
Iteration  30: 118358105.242 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  118343191.864 ±(99.9%) 219141.532 ops/s [Average]
  (min, avg, max) = (117640205.505, 118343191.864, 119002634.543), stdev = 328000.753
  CI (99.9%): [118124050.332, 118562333.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt          Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  118343191.864 ± 219141.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36540368.016 ops/s
# Warmup Iteration   2: 68684517.950 ops/s
# Warmup Iteration   3: 63046441.688 ops/s
# Warmup Iteration   4: 73415097.284 ops/s
# Warmup Iteration   5: 73343752.341 ops/s
# Warmup Iteration   6: 73335896.980 ops/s
# Warmup Iteration   7: 73172424.237 ops/s
# Warmup Iteration   8: 73057600.804 ops/s
# Warmup Iteration   9: 73166336.494 ops/s
# Warmup Iteration  10: 73682397.144 ops/s
# Warmup Iteration  11: 73519288.811 ops/s
# Warmup Iteration  12: 73283412.945 ops/s
# Warmup Iteration  13: 73255704.806 ops/s
# Warmup Iteration  14: 73222726.177 ops/s
# Warmup Iteration  15: 73020409.266 ops/s
# Warmup Iteration  16: 72795059.698 ops/s
# Warmup Iteration  17: 72268813.783 ops/s
# Warmup Iteration  18: 72274547.006 ops/s
# Warmup Iteration  19: 72824579.041 ops/s
# Warmup Iteration  20: 72485445.811 ops/s
# Warmup Iteration  21: 72753894.980 ops/s
# Warmup Iteration  22: 72133354.179 ops/s
# Warmup Iteration  23: 72258605.850 ops/s
# Warmup Iteration  24: 72049887.629 ops/s
# Warmup Iteration  25: 72364925.163 ops/s
# Warmup Iteration  26: 72590954.828 ops/s
# Warmup Iteration  27: 72567987.617 ops/s
# Warmup Iteration  28: 72540323.510 ops/s
# Warmup Iteration  29: 72301281.490 ops/s
# Warmup Iteration  30: 72117758.667 ops/s
Iteration   1: 72458791.737 ops/s
Iteration   2: 71992814.122 ops/s
Iteration   3: 72545402.338 ops/s
Iteration   4: 71938341.033 ops/s
Iteration   5: 71957322.602 ops/s
Iteration   6: 72722305.943 ops/s
Iteration   7: 72694708.598 ops/s
Iteration   8: 72982143.331 ops/s
Iteration   9: 72327718.234 ops/s
Iteration  10: 72540519.053 ops/s
Iteration  11: 72789205.665 ops/s
Iteration  12: 72801602.128 ops/s
Iteration  13: 72222302.219 ops/s
Iteration  14: 72190791.535 ops/s
Iteration  15: 72282229.035 ops/s
Iteration  16: 72760035.553 ops/s
Iteration  17: 72512737.385 ops/s
Iteration  18: 71986302.562 ops/s
Iteration  19: 72212760.735 ops/s
Iteration  20: 72625182.758 ops/s
Iteration  21: 72332191.991 ops/s
Iteration  22: 72768960.178 ops/s
Iteration  23: 71974404.058 ops/s
Iteration  24: 72431500.868 ops/s
Iteration  25: 72490307.641 ops/s
Iteration  26: 72205613.935 ops/s
Iteration  27: 72810013.417 ops/s
Iteration  28: 72250240.779 ops/s
Iteration  29: 73047591.419 ops/s
Iteration  30: 72360995.822 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList":
  72440501.222 ±(99.9%) 210777.396 ops/s [Average]
  (min, avg, max) = (71938341.033, 72440501.222, 73047591.419), stdev = 315481.707
  CI (99.9%): [72229723.827, 72651278.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  72440501.222 ± 210777.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6271393.462 ops/s
# Warmup Iteration   2: 13485924.486 ops/s
# Warmup Iteration   3: 13694539.230 ops/s
# Warmup Iteration   4: 13315377.671 ops/s
# Warmup Iteration   5: 11803676.224 ops/s
# Warmup Iteration   6: 13764339.739 ops/s
# Warmup Iteration   7: 13751485.482 ops/s
# Warmup Iteration   8: 13765059.710 ops/s
# Warmup Iteration   9: 13770508.965 ops/s
# Warmup Iteration  10: 13745320.649 ops/s
# Warmup Iteration  11: 13733594.023 ops/s
# Warmup Iteration  12: 13754131.376 ops/s
# Warmup Iteration  13: 13710501.661 ops/s
# Warmup Iteration  14: 13771954.945 ops/s
# Warmup Iteration  15: 13786332.666 ops/s
# Warmup Iteration  16: 13762607.977 ops/s
# Warmup Iteration  17: 13759860.683 ops/s
# Warmup Iteration  18: 13761705.003 ops/s
# Warmup Iteration  19: 13762628.458 ops/s
# Warmup Iteration  20: 13751481.913 ops/s
# Warmup Iteration  21: 13767723.051 ops/s
# Warmup Iteration  22: 13747586.100 ops/s
# Warmup Iteration  23: 13753283.402 ops/s
# Warmup Iteration  24: 13765904.051 ops/s
# Warmup Iteration  25: 13758466.431 ops/s
# Warmup Iteration  26: 13766958.581 ops/s
# Warmup Iteration  27: 13749170.219 ops/s
# Warmup Iteration  28: 13763619.287 ops/s
# Warmup Iteration  29: 13771707.271 ops/s
# Warmup Iteration  30: 13796676.498 ops/s
Iteration   1: 13762817.299 ops/s
Iteration   2: 13732956.937 ops/s
Iteration   3: 13739421.623 ops/s
Iteration   4: 13716938.730 ops/s
Iteration   5: 13767930.833 ops/s
Iteration   6: 13758857.665 ops/s
Iteration   7: 13749233.960 ops/s
Iteration   8: 13774430.953 ops/s
Iteration   9: 13726616.796 ops/s
Iteration  10: 13768091.092 ops/s
Iteration  11: 13763402.588 ops/s
Iteration  12: 13780429.267 ops/s
Iteration  13: 13796131.355 ops/s
Iteration  14: 13800742.429 ops/s
Iteration  15: 13776805.933 ops/s
Iteration  16: 13780208.624 ops/s
Iteration  17: 13834443.552 ops/s
Iteration  18: 13776362.150 ops/s
Iteration  19: 13720310.074 ops/s
Iteration  20: 13803576.658 ops/s
Iteration  21: 13799016.800 ops/s
Iteration  22: 13752048.338 ops/s
Iteration  23: 13796298.806 ops/s
Iteration  24: 13756958.691 ops/s
Iteration  25: 13791236.493 ops/s
Iteration  26: 13745925.983 ops/s
Iteration  27: 13763764.548 ops/s
Iteration  28: 13730928.211 ops/s
Iteration  29: 13795217.326 ops/s
Iteration  30: 13793707.182 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_reverseThis":
  13768493.697 ±(99.9%) 18861.176 ops/s [Average]
  (min, avg, max) = (13716938.730, 13768493.697, 13834443.552), stdev = 28230.523
  CI (99.9%): [13749632.520, 13787354.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_reverseThis  thrpt   30  13768493.697 ± 18861.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 935812.669 ops/s
# Warmup Iteration   2: 2331036.747 ops/s
# Warmup Iteration   3: 2287995.092 ops/s
# Warmup Iteration   4: 2008830.458 ops/s
# Warmup Iteration   5: 2357576.956 ops/s
# Warmup Iteration   6: 2359980.422 ops/s
# Warmup Iteration   7: 2360207.015 ops/s
# Warmup Iteration   8: 2358320.150 ops/s
# Warmup Iteration   9: 2350681.387 ops/s
# Warmup Iteration  10: 2354262.968 ops/s
# Warmup Iteration  11: 2357631.708 ops/s
# Warmup Iteration  12: 2353403.540 ops/s
# Warmup Iteration  13: 2352381.050 ops/s
# Warmup Iteration  14: 2356785.552 ops/s
# Warmup Iteration  15: 2358427.471 ops/s
# Warmup Iteration  16: 2353887.204 ops/s
# Warmup Iteration  17: 2360820.315 ops/s
# Warmup Iteration  18: 2355706.037 ops/s
# Warmup Iteration  19: 2352577.114 ops/s
# Warmup Iteration  20: 2360072.683 ops/s
# Warmup Iteration  21: 2350023.765 ops/s
# Warmup Iteration  22: 2354588.752 ops/s
# Warmup Iteration  23: 2359135.385 ops/s
# Warmup Iteration  24: 2356539.392 ops/s
# Warmup Iteration  25: 2355468.010 ops/s
# Warmup Iteration  26: 2360001.266 ops/s
# Warmup Iteration  27: 2352953.017 ops/s
# Warmup Iteration  28: 2358235.848 ops/s
# Warmup Iteration  29: 2351998.010 ops/s
# Warmup Iteration  30: 2356926.443 ops/s
Iteration   1: 2362037.030 ops/s
Iteration   2: 2352155.496 ops/s
Iteration   3: 2353463.128 ops/s
Iteration   4: 2358678.676 ops/s
Iteration   5: 2361522.194 ops/s
Iteration   6: 2351937.252 ops/s
Iteration   7: 2357094.984 ops/s
Iteration   8: 2349286.349 ops/s
Iteration   9: 2362330.552 ops/s
Iteration  10: 2359196.212 ops/s
Iteration  11: 2356177.363 ops/s
Iteration  12: 2362800.884 ops/s
Iteration  13: 2357446.663 ops/s
Iteration  14: 2352627.977 ops/s
Iteration  15: 2357782.710 ops/s
Iteration  16: 2356882.573 ops/s
Iteration  17: 2359236.107 ops/s
Iteration  18: 2353018.413 ops/s
Iteration  19: 2355247.982 ops/s
Iteration  20: 2358986.536 ops/s
Iteration  21: 2356263.330 ops/s
Iteration  22: 2354153.816 ops/s
Iteration  23: 2352138.729 ops/s
Iteration  24: 2355709.110 ops/s
Iteration  25: 2345942.322 ops/s
Iteration  26: 2357144.238 ops/s
Iteration  27: 2360401.662 ops/s
Iteration  28: 2354113.239 ops/s
Iteration  29: 2359058.898 ops/s
Iteration  30: 2357382.666 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_select":
  2356340.570 ±(99.9%) 2639.458 ops/s [Average]
  (min, avg, max) = (2345942.322, 2356340.570, 2362800.884), stdev = 3950.616
  CI (99.9%): [2353701.112, 2358980.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_select  thrpt   30  2356340.570 ± 2639.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4164021.766 ops/s
# Warmup Iteration   2: 9214062.532 ops/s
# Warmup Iteration   3: 7750740.646 ops/s
# Warmup Iteration   4: 9264639.758 ops/s
# Warmup Iteration   5: 9269617.215 ops/s
# Warmup Iteration   6: 9275956.759 ops/s
# Warmup Iteration   7: 9285489.366 ops/s
# Warmup Iteration   8: 9281007.924 ops/s
# Warmup Iteration   9: 9259152.340 ops/s
# Warmup Iteration  10: 9262785.091 ops/s
# Warmup Iteration  11: 9294239.019 ops/s
# Warmup Iteration  12: 9259818.316 ops/s
# Warmup Iteration  13: 9278827.320 ops/s
# Warmup Iteration  14: 9272487.882 ops/s
# Warmup Iteration  15: 9264229.922 ops/s
# Warmup Iteration  16: 9259080.270 ops/s
# Warmup Iteration  17: 9281829.538 ops/s
# Warmup Iteration  18: 9260243.441 ops/s
# Warmup Iteration  19: 9302730.798 ops/s
# Warmup Iteration  20: 9283712.533 ops/s
# Warmup Iteration  21: 9275742.850 ops/s
# Warmup Iteration  22: 9275390.188 ops/s
# Warmup Iteration  23: 9292587.856 ops/s
# Warmup Iteration  24: 9279812.984 ops/s
# Warmup Iteration  25: 9272614.267 ops/s
# Warmup Iteration  26: 9247150.777 ops/s
# Warmup Iteration  27: 9252519.878 ops/s
# Warmup Iteration  28: 9284479.540 ops/s
# Warmup Iteration  29: 9282736.848 ops/s
# Warmup Iteration  30: 9265569.182 ops/s
Iteration   1: 9269760.768 ops/s
Iteration   2: 9274542.777 ops/s
Iteration   3: 9292837.311 ops/s
Iteration   4: 9258763.544 ops/s
Iteration   5: 9261519.838 ops/s
Iteration   6: 9265330.629 ops/s
Iteration   7: 9262086.872 ops/s
Iteration   8: 9261370.294 ops/s
Iteration   9: 9273856.311 ops/s
Iteration  10: 9281910.279 ops/s
Iteration  11: 9258566.976 ops/s
Iteration  12: 9279050.465 ops/s
Iteration  13: 9277099.182 ops/s
Iteration  14: 9282375.441 ops/s
Iteration  15: 9291690.464 ops/s
Iteration  16: 9235812.327 ops/s
Iteration  17: 9283431.573 ops/s
Iteration  18: 9279074.470 ops/s
Iteration  19: 9257192.229 ops/s
Iteration  20: 9279920.659 ops/s
Iteration  21: 9264872.628 ops/s
Iteration  22: 9264163.929 ops/s
Iteration  23: 9284854.416 ops/s
Iteration  24: 9271569.079 ops/s
Iteration  25: 9301289.056 ops/s
Iteration  26: 9277970.679 ops/s
Iteration  27: 9258189.197 ops/s
Iteration  28: 9291399.230 ops/s
Iteration  29: 9292109.446 ops/s
Iteration  30: 9274480.616 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectAndRejectWith":
  9273569.689 ±(99.9%) 9355.829 ops/s [Average]
  (min, avg, max) = (9235812.327, 9273569.689, 9301289.056), stdev = 14003.366
  CI (99.9%): [9264213.860, 9282925.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  9273569.689 ± 9355.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 393514.634 ops/s
# Warmup Iteration   2: 705488.273 ops/s
# Warmup Iteration   3: 804476.254 ops/s
# Warmup Iteration   4: 807368.286 ops/s
# Warmup Iteration   5: 807592.631 ops/s
# Warmup Iteration   6: 665296.218 ops/s
# Warmup Iteration   7: 810421.143 ops/s
# Warmup Iteration   8: 809429.773 ops/s
# Warmup Iteration   9: 808553.710 ops/s
# Warmup Iteration  10: 810527.466 ops/s
# Warmup Iteration  11: 809480.218 ops/s
# Warmup Iteration  12: 809759.019 ops/s
# Warmup Iteration  13: 809031.141 ops/s
# Warmup Iteration  14: 811065.889 ops/s
# Warmup Iteration  15: 809061.604 ops/s
# Warmup Iteration  16: 808593.990 ops/s
# Warmup Iteration  17: 809518.010 ops/s
# Warmup Iteration  18: 809445.849 ops/s
# Warmup Iteration  19: 809345.613 ops/s
# Warmup Iteration  20: 808305.544 ops/s
# Warmup Iteration  21: 808864.665 ops/s
# Warmup Iteration  22: 810563.104 ops/s
# Warmup Iteration  23: 808671.052 ops/s
# Warmup Iteration  24: 810064.525 ops/s
# Warmup Iteration  25: 809723.565 ops/s
# Warmup Iteration  26: 808278.224 ops/s
# Warmup Iteration  27: 808743.502 ops/s
# Warmup Iteration  28: 807361.074 ops/s
# Warmup Iteration  29: 809713.973 ops/s
# Warmup Iteration  30: 811551.301 ops/s
Iteration   1: 810335.168 ops/s
Iteration   2: 810277.972 ops/s
Iteration   3: 809143.503 ops/s
Iteration   4: 810155.597 ops/s
Iteration   5: 808769.290 ops/s
Iteration   6: 810315.246 ops/s
Iteration   7: 807348.219 ops/s
Iteration   8: 809279.406 ops/s
Iteration   9: 811533.728 ops/s
Iteration  10: 808445.268 ops/s
Iteration  11: 808839.491 ops/s
Iteration  12: 810362.040 ops/s
Iteration  13: 810386.719 ops/s
Iteration  14: 809402.719 ops/s
Iteration  15: 810227.331 ops/s
Iteration  16: 809615.143 ops/s
Iteration  17: 810069.637 ops/s
Iteration  18: 810099.945 ops/s
Iteration  19: 807683.350 ops/s
Iteration  20: 809398.631 ops/s
Iteration  21: 809684.024 ops/s
Iteration  22: 807304.492 ops/s
Iteration  23: 809240.484 ops/s
Iteration  24: 812142.860 ops/s
Iteration  25: 813167.786 ops/s
Iteration  26: 810223.369 ops/s
Iteration  27: 812456.332 ops/s
Iteration  28: 810337.153 ops/s
Iteration  29: 808445.565 ops/s
Iteration  30: 810725.254 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectInstancesOf":
  809847.191 ±(99.9%) 910.149 ops/s [Average]
  (min, avg, max) = (807304.492, 809847.191, 813167.786), stdev = 1362.269
  CI (99.9%): [808937.042, 810757.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  809847.191 ± 910.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788088.850 ops/s
# Warmup Iteration   2: 2315293.531 ops/s
# Warmup Iteration   3: 2353194.889 ops/s
# Warmup Iteration   4: 1943460.617 ops/s
# Warmup Iteration   5: 2347769.833 ops/s
# Warmup Iteration   6: 2349531.833 ops/s
# Warmup Iteration   7: 2356608.567 ops/s
# Warmup Iteration   8: 2349502.496 ops/s
# Warmup Iteration   9: 2350574.326 ops/s
# Warmup Iteration  10: 2354927.589 ops/s
# Warmup Iteration  11: 2349162.498 ops/s
# Warmup Iteration  12: 2344538.609 ops/s
# Warmup Iteration  13: 2358285.269 ops/s
# Warmup Iteration  14: 2352816.801 ops/s
# Warmup Iteration  15: 2354559.662 ops/s
# Warmup Iteration  16: 2354655.073 ops/s
# Warmup Iteration  17: 2352660.836 ops/s
# Warmup Iteration  18: 2355430.060 ops/s
# Warmup Iteration  19: 2352672.758 ops/s
# Warmup Iteration  20: 2358978.877 ops/s
# Warmup Iteration  21: 2353552.377 ops/s
# Warmup Iteration  22: 2355818.712 ops/s
# Warmup Iteration  23: 2355829.472 ops/s
# Warmup Iteration  24: 2349079.265 ops/s
# Warmup Iteration  25: 2352254.599 ops/s
# Warmup Iteration  26: 2352097.433 ops/s
# Warmup Iteration  27: 2357196.051 ops/s
# Warmup Iteration  28: 2357187.836 ops/s
# Warmup Iteration  29: 2356102.770 ops/s
# Warmup Iteration  30: 2354975.559 ops/s
Iteration   1: 2358624.660 ops/s
Iteration   2: 2362294.387 ops/s
Iteration   3: 2353034.235 ops/s
Iteration   4: 2353781.150 ops/s
Iteration   5: 2359669.265 ops/s
Iteration   6: 2347478.385 ops/s
Iteration   7: 2346288.349 ops/s
Iteration   8: 2353123.974 ops/s
Iteration   9: 2351179.604 ops/s
Iteration  10: 2347897.332 ops/s
Iteration  11: 2355575.744 ops/s
Iteration  12: 2352096.263 ops/s
Iteration  13: 2356058.410 ops/s
Iteration  14: 2354387.549 ops/s
Iteration  15: 2361923.961 ops/s
Iteration  16: 2352906.479 ops/s
Iteration  17: 2354274.287 ops/s
Iteration  18: 2349147.807 ops/s
Iteration  19: 2356852.444 ops/s
Iteration  20: 2363054.512 ops/s
Iteration  21: 2351260.460 ops/s
Iteration  22: 2359173.578 ops/s
Iteration  23: 2351243.154 ops/s
Iteration  24: 2356970.567 ops/s
Iteration  25: 2350820.757 ops/s
Iteration  26: 2353114.332 ops/s
Iteration  27: 2357393.607 ops/s
Iteration  28: 2353475.790 ops/s
Iteration  29: 2351001.375 ops/s
Iteration  30: 2352705.598 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith":
  2354226.934 ±(99.9%) 2888.331 ops/s [Average]
  (min, avg, max) = (2346288.349, 2354226.934, 2363054.512), stdev = 4323.118
  CI (99.9%): [2351338.603, 2357115.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectWith  thrpt   30  2354226.934 ± 2888.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1805743.902 ops/s
# Warmup Iteration   2: 4071743.813 ops/s
# Warmup Iteration   3: 4162285.022 ops/s
# Warmup Iteration   4: 3749880.405 ops/s
# Warmup Iteration   5: 3838445.590 ops/s
# Warmup Iteration   6: 4164663.425 ops/s
# Warmup Iteration   7: 4175926.642 ops/s
# Warmup Iteration   8: 4169783.170 ops/s
# Warmup Iteration   9: 4169764.605 ops/s
# Warmup Iteration  10: 4168169.148 ops/s
# Warmup Iteration  11: 4166449.044 ops/s
# Warmup Iteration  12: 4158033.248 ops/s
# Warmup Iteration  13: 4164182.428 ops/s
# Warmup Iteration  14: 4177419.034 ops/s
# Warmup Iteration  15: 4163746.271 ops/s
# Warmup Iteration  16: 4168069.339 ops/s
# Warmup Iteration  17: 4162840.300 ops/s
# Warmup Iteration  18: 4167649.908 ops/s
# Warmup Iteration  19: 4172670.486 ops/s
# Warmup Iteration  20: 4169064.990 ops/s
# Warmup Iteration  21: 4169562.206 ops/s
# Warmup Iteration  22: 4169234.502 ops/s
# Warmup Iteration  23: 4168563.432 ops/s
# Warmup Iteration  24: 4172916.752 ops/s
# Warmup Iteration  25: 4171450.592 ops/s
# Warmup Iteration  26: 4163374.660 ops/s
# Warmup Iteration  27: 4165260.571 ops/s
# Warmup Iteration  28: 4167816.410 ops/s
# Warmup Iteration  29: 4170669.772 ops/s
# Warmup Iteration  30: 4165629.129 ops/s
Iteration   1: 4154848.705 ops/s
Iteration   2: 4168412.434 ops/s
Iteration   3: 4173719.402 ops/s
Iteration   4: 4178424.979 ops/s
Iteration   5: 4160646.602 ops/s
Iteration   6: 4162290.629 ops/s
Iteration   7: 4159711.228 ops/s
Iteration   8: 4174419.228 ops/s
Iteration   9: 4170158.228 ops/s
Iteration  10: 4168859.862 ops/s
Iteration  11: 4165425.032 ops/s
Iteration  12: 4171036.226 ops/s
Iteration  13: 4154505.234 ops/s
Iteration  14: 4171132.185 ops/s
Iteration  15: 4164086.941 ops/s
Iteration  16: 4166252.930 ops/s
Iteration  17: 4175831.520 ops/s
Iteration  18: 4160807.258 ops/s
Iteration  19: 4170514.661 ops/s
Iteration  20: 4168138.676 ops/s
Iteration  21: 4160889.445 ops/s
Iteration  22: 4164967.735 ops/s
Iteration  23: 4169385.940 ops/s
Iteration  24: 4165055.116 ops/s
Iteration  25: 4166460.097 ops/s
Iteration  26: 4156536.354 ops/s
Iteration  27: 4173973.515 ops/s
Iteration  28: 4177381.235 ops/s
Iteration  29: 4186407.202 ops/s
Iteration  30: 4176046.052 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndex":
  4167877.488 ±(99.9%) 4951.715 ops/s [Average]
  (min, avg, max) = (4154505.234, 4167877.488, 4186407.202), stdev = 7411.495
  CI (99.9%): [4162925.773, 4172829.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectWithIndex  thrpt   30  4167877.488 ± 4951.715  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1493098.086 ops/s
# Warmup Iteration   2: 3395186.121 ops/s
# Warmup Iteration   3: 3560681.714 ops/s
# Warmup Iteration   4: 3261027.713 ops/s
# Warmup Iteration   5: 3250101.957 ops/s
# Warmup Iteration   6: 3565114.749 ops/s
# Warmup Iteration   7: 3570068.082 ops/s
# Warmup Iteration   8: 3550952.090 ops/s
# Warmup Iteration   9: 3582940.902 ops/s
# Warmup Iteration  10: 3574256.589 ops/s
# Warmup Iteration  11: 3572450.917 ops/s
# Warmup Iteration  12: 3582509.536 ops/s
# Warmup Iteration  13: 3569281.487 ops/s
# Warmup Iteration  14: 3577822.847 ops/s
# Warmup Iteration  15: 3576559.694 ops/s
# Warmup Iteration  16: 3570149.245 ops/s
# Warmup Iteration  17: 3579998.008 ops/s
# Warmup Iteration  18: 3575906.264 ops/s
# Warmup Iteration  19: 3580558.561 ops/s
# Warmup Iteration  20: 3574818.996 ops/s
# Warmup Iteration  21: 3575079.435 ops/s
# Warmup Iteration  22: 3571407.944 ops/s
# Warmup Iteration  23: 3566215.167 ops/s
# Warmup Iteration  24: 3578654.984 ops/s
# Warmup Iteration  25: 3583944.849 ops/s
# Warmup Iteration  26: 3578021.290 ops/s
# Warmup Iteration  27: 3571058.240 ops/s
# Warmup Iteration  28: 3579438.412 ops/s
# Warmup Iteration  29: 3572708.965 ops/s
# Warmup Iteration  30: 3576173.543 ops/s
Iteration   1: 3566516.059 ops/s
Iteration   2: 3572555.097 ops/s
Iteration   3: 3570291.509 ops/s
Iteration   4: 3570933.896 ops/s
Iteration   5: 3569023.737 ops/s
Iteration   6: 3579740.170 ops/s
Iteration   7: 3564787.604 ops/s
Iteration   8: 3578565.422 ops/s
Iteration   9: 3573811.224 ops/s
Iteration  10: 3582006.805 ops/s
Iteration  11: 3576234.548 ops/s
Iteration  12: 3584371.247 ops/s
Iteration  13: 3575260.707 ops/s
Iteration  14: 3564981.155 ops/s
Iteration  15: 3579390.284 ops/s
Iteration  16: 3580253.408 ops/s
Iteration  17: 3553386.379 ops/s
Iteration  18: 3560827.417 ops/s
Iteration  19: 3570658.328 ops/s
Iteration  20: 3561375.977 ops/s
Iteration  21: 3557304.026 ops/s
Iteration  22: 3579617.973 ops/s
Iteration  23: 3575531.621 ops/s
Iteration  24: 3574442.774 ops/s
Iteration  25: 3578245.816 ops/s
Iteration  26: 3579795.865 ops/s
Iteration  27: 3567192.508 ops/s
Iteration  28: 3576649.990 ops/s
Iteration  29: 3571228.030 ops/s
Iteration  30: 3562185.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget":
  3571905.495 ±(99.9%) 5226.884 ops/s [Average]
  (min, avg, max) = (3553386.379, 3571905.495, 3584371.247), stdev = 7823.355
  CI (99.9%): [3566678.610, 3577132.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  3571905.495 ± 5226.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458306.391 ops/s
# Warmup Iteration   2: 968173.624 ops/s
# Warmup Iteration   3: 1051135.746 ops/s
# Warmup Iteration   4: 1052480.358 ops/s
# Warmup Iteration   5: 875915.903 ops/s
# Warmup Iteration   6: 1058264.168 ops/s
# Warmup Iteration   7: 1054753.565 ops/s
# Warmup Iteration   8: 1057526.156 ops/s
# Warmup Iteration   9: 1056835.596 ops/s
# Warmup Iteration  10: 1056577.377 ops/s
# Warmup Iteration  11: 1057134.133 ops/s
# Warmup Iteration  12: 1056617.129 ops/s
# Warmup Iteration  13: 1056973.530 ops/s
# Warmup Iteration  14: 1055423.178 ops/s
# Warmup Iteration  15: 1057958.818 ops/s
# Warmup Iteration  16: 1057688.475 ops/s
# Warmup Iteration  17: 1054081.624 ops/s
# Warmup Iteration  18: 1053311.247 ops/s
# Warmup Iteration  19: 1055989.567 ops/s
# Warmup Iteration  20: 1055256.940 ops/s
# Warmup Iteration  21: 1055062.124 ops/s
# Warmup Iteration  22: 1052379.974 ops/s
# Warmup Iteration  23: 1054495.454 ops/s
# Warmup Iteration  24: 1053350.521 ops/s
# Warmup Iteration  25: 1055483.581 ops/s
# Warmup Iteration  26: 1056150.875 ops/s
# Warmup Iteration  27: 1056982.182 ops/s
# Warmup Iteration  28: 1055109.409 ops/s
# Warmup Iteration  29: 1055183.264 ops/s
# Warmup Iteration  30: 1055128.795 ops/s
Iteration   1: 1051879.143 ops/s
Iteration   2: 1054866.657 ops/s
Iteration   3: 1059297.291 ops/s
Iteration   4: 1056197.870 ops/s
Iteration   5: 1055524.468 ops/s
Iteration   6: 1058751.113 ops/s
Iteration   7: 1054039.963 ops/s
Iteration   8: 1056745.504 ops/s
Iteration   9: 1053820.998 ops/s
Iteration  10: 1055612.354 ops/s
Iteration  11: 1054350.548 ops/s
Iteration  12: 1054441.972 ops/s
Iteration  13: 1056932.899 ops/s
Iteration  14: 1054918.884 ops/s
Iteration  15: 1054527.909 ops/s
Iteration  16: 1057638.994 ops/s
Iteration  17: 1055351.235 ops/s
Iteration  18: 1059075.191 ops/s
Iteration  19: 1054484.930 ops/s
Iteration  20: 1056482.283 ops/s
Iteration  21: 1054854.966 ops/s
Iteration  22: 1052161.978 ops/s
Iteration  23: 1056254.567 ops/s
Iteration  24: 1056608.397 ops/s
Iteration  25: 1056046.443 ops/s
Iteration  26: 1055184.799 ops/s
Iteration  27: 1055973.202 ops/s
Iteration  28: 1055582.704 ops/s
Iteration  29: 1051530.606 ops/s
Iteration  30: 1055762.987 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_selectWith_target":
  1055496.695 ±(99.9%) 1243.532 ops/s [Average]
  (min, avg, max) = (1051530.606, 1055496.695, 1059297.291), stdev = 1861.260
  CI (99.9%): [1054253.163, 1056740.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_selectWith_target  thrpt   30  1055496.695 ± 1243.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36655.524 ops/s
# Warmup Iteration   2: 48685.357 ops/s
# Warmup Iteration   3: 72443.977 ops/s
# Warmup Iteration   4: 74204.017 ops/s
# Warmup Iteration   5: 73924.947 ops/s
# Warmup Iteration   6: 73917.387 ops/s
# Warmup Iteration   7: 73818.764 ops/s
# Warmup Iteration   8: 73723.404 ops/s
# Warmup Iteration   9: 73825.240 ops/s
# Warmup Iteration  10: 62284.695 ops/s
# Warmup Iteration  11: 73795.868 ops/s
# Warmup Iteration  12: 73827.373 ops/s
# Warmup Iteration  13: 73674.590 ops/s
# Warmup Iteration  14: 73850.146 ops/s
# Warmup Iteration  15: 73861.458 ops/s
# Warmup Iteration  16: 73658.742 ops/s
# Warmup Iteration  17: 73725.199 ops/s
# Warmup Iteration  18: 74001.189 ops/s
# Warmup Iteration  19: 73608.610 ops/s
# Warmup Iteration  20: 73829.604 ops/s
# Warmup Iteration  21: 73867.943 ops/s
# Warmup Iteration  22: 73798.886 ops/s
# Warmup Iteration  23: 74054.977 ops/s
# Warmup Iteration  24: 73768.619 ops/s
# Warmup Iteration  25: 73751.017 ops/s
# Warmup Iteration  26: 74030.859 ops/s
# Warmup Iteration  27: 73886.561 ops/s
# Warmup Iteration  28: 73910.874 ops/s
# Warmup Iteration  29: 73843.495 ops/s
# Warmup Iteration  30: 73705.244 ops/s
Iteration   1: 73921.955 ops/s
Iteration   2: 73879.127 ops/s
Iteration   3: 73782.091 ops/s
Iteration   4: 73802.701 ops/s
Iteration   5: 73783.454 ops/s
Iteration   6: 73663.329 ops/s
Iteration   7: 73867.416 ops/s
Iteration   8: 74022.796 ops/s
Iteration   9: 73846.203 ops/s
Iteration  10: 73797.468 ops/s
Iteration  11: 73943.906 ops/s
Iteration  12: 73891.886 ops/s
Iteration  13: 73622.798 ops/s
Iteration  14: 73994.544 ops/s
Iteration  15: 74078.699 ops/s
Iteration  16: 74404.942 ops/s
Iteration  17: 74361.904 ops/s
Iteration  18: 74321.651 ops/s
Iteration  19: 74426.893 ops/s
Iteration  20: 74119.512 ops/s
Iteration  21: 74468.076 ops/s
Iteration  22: 74407.010 ops/s
Iteration  23: 74268.940 ops/s
Iteration  24: 74483.575 ops/s
Iteration  25: 74458.800 ops/s
Iteration  26: 74034.458 ops/s
Iteration  27: 74059.736 ops/s
Iteration  28: 74226.743 ops/s
Iteration  29: 74079.354 ops/s
Iteration  30: 74382.254 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_serialization":
  74080.074 ±(99.9%) 176.594 ops/s [Average]
  (min, avg, max) = (73622.798, 74080.074, 74483.575), stdev = 264.317
  CI (99.9%): [73903.480, 74256.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_serialization  thrpt   30  74080.074 ± 176.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6771313.423 ops/s
# Warmup Iteration   2: 14729378.828 ops/s
# Warmup Iteration   3: 15715413.672 ops/s
# Warmup Iteration   4: 13244185.201 ops/s
# Warmup Iteration   5: 15844039.736 ops/s
# Warmup Iteration   6: 15823142.491 ops/s
# Warmup Iteration   7: 15844307.633 ops/s
# Warmup Iteration   8: 15864951.197 ops/s
# Warmup Iteration   9: 15841054.008 ops/s
# Warmup Iteration  10: 15805554.123 ops/s
# Warmup Iteration  11: 15819074.920 ops/s
# Warmup Iteration  12: 15834056.581 ops/s
# Warmup Iteration  13: 15843322.769 ops/s
# Warmup Iteration  14: 15847379.434 ops/s
# Warmup Iteration  15: 15844727.299 ops/s
# Warmup Iteration  16: 15790267.704 ops/s
# Warmup Iteration  17: 15820211.722 ops/s
# Warmup Iteration  18: 15825595.176 ops/s
# Warmup Iteration  19: 15818049.589 ops/s
# Warmup Iteration  20: 15844702.347 ops/s
# Warmup Iteration  21: 15857980.414 ops/s
# Warmup Iteration  22: 15833638.779 ops/s
# Warmup Iteration  23: 15802614.246 ops/s
# Warmup Iteration  24: 15817662.364 ops/s
# Warmup Iteration  25: 15790341.782 ops/s
# Warmup Iteration  26: 15822087.007 ops/s
# Warmup Iteration  27: 15866691.648 ops/s
# Warmup Iteration  28: 15803983.030 ops/s
# Warmup Iteration  29: 15807634.060 ops/s
# Warmup Iteration  30: 15841828.446 ops/s
Iteration   1: 15833829.009 ops/s
Iteration   2: 15846809.373 ops/s
Iteration   3: 15843308.714 ops/s
Iteration   4: 15795270.053 ops/s
Iteration   5: 15782462.889 ops/s
Iteration   6: 15816088.771 ops/s
Iteration   7: 15874164.408 ops/s
Iteration   8: 15738992.079 ops/s
Iteration   9: 15882002.604 ops/s
Iteration  10: 15889411.420 ops/s
Iteration  11: 15805096.410 ops/s
Iteration  12: 15892657.029 ops/s
Iteration  13: 15880797.412 ops/s
Iteration  14: 15816030.777 ops/s
Iteration  15: 15809657.852 ops/s
Iteration  16: 15841130.050 ops/s
Iteration  17: 15838554.613 ops/s
Iteration  18: 15832234.348 ops/s
Iteration  19: 15871988.735 ops/s
Iteration  20: 15857284.616 ops/s
Iteration  21: 15871208.230 ops/s
Iteration  22: 15831003.318 ops/s
Iteration  23: 15819894.426 ops/s
Iteration  24: 15769571.107 ops/s
Iteration  25: 15795102.060 ops/s
Iteration  26: 15804796.256 ops/s
Iteration  27: 15791227.591 ops/s
Iteration  28: 15819609.015 ops/s
Iteration  29: 15855592.585 ops/s
Iteration  30: 15879780.465 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_set":
  15832851.874 ±(99.9%) 25682.460 ops/s [Average]
  (min, avg, max) = (15738992.079, 15832851.874, 15892657.029), stdev = 38440.300
  CI (99.9%): [15807169.414, 15858534.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_set  thrpt   30  15832851.874 ± 25682.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5225726.450 ops/s
# Warmup Iteration   2: 15567666.455 ops/s
# Warmup Iteration   3: 15801853.882 ops/s
# Warmup Iteration   4: 13197536.684 ops/s
# Warmup Iteration   5: 15787451.133 ops/s
# Warmup Iteration   6: 15855535.727 ops/s
# Warmup Iteration   7: 15814892.606 ops/s
# Warmup Iteration   8: 15832745.385 ops/s
# Warmup Iteration   9: 15751481.708 ops/s
# Warmup Iteration  10: 15742380.962 ops/s
# Warmup Iteration  11: 15828811.918 ops/s
# Warmup Iteration  12: 15835661.413 ops/s
# Warmup Iteration  13: 15784588.841 ops/s
# Warmup Iteration  14: 15813512.215 ops/s
# Warmup Iteration  15: 15855557.499 ops/s
# Warmup Iteration  16: 15822164.254 ops/s
# Warmup Iteration  17: 15803677.073 ops/s
# Warmup Iteration  18: 15806521.970 ops/s
# Warmup Iteration  19: 15805515.712 ops/s
# Warmup Iteration  20: 15824759.886 ops/s
# Warmup Iteration  21: 15842083.576 ops/s
# Warmup Iteration  22: 15830406.633 ops/s
# Warmup Iteration  23: 15800406.656 ops/s
# Warmup Iteration  24: 15753259.942 ops/s
# Warmup Iteration  25: 15853875.440 ops/s
# Warmup Iteration  26: 15822861.536 ops/s
# Warmup Iteration  27: 15826399.114 ops/s
# Warmup Iteration  28: 15829016.203 ops/s
# Warmup Iteration  29: 15804543.064 ops/s
# Warmup Iteration  30: 15843472.708 ops/s
Iteration   1: 15841181.249 ops/s
Iteration   2: 15829311.516 ops/s
Iteration   3: 15812042.232 ops/s
Iteration   4: 15866029.237 ops/s
Iteration   5: 15836731.909 ops/s
Iteration   6: 15810486.745 ops/s
Iteration   7: 15817446.948 ops/s
Iteration   8: 15810959.713 ops/s
Iteration   9: 15853112.065 ops/s
Iteration  10: 15847420.685 ops/s
Iteration  11: 15834967.913 ops/s
Iteration  12: 15854434.220 ops/s
Iteration  13: 15831523.612 ops/s
Iteration  14: 15799118.703 ops/s
Iteration  15: 15862037.378 ops/s
Iteration  16: 15813799.767 ops/s
Iteration  17: 15820993.936 ops/s
Iteration  18: 15781375.594 ops/s
Iteration  19: 15819876.324 ops/s
Iteration  20: 15866333.333 ops/s
Iteration  21: 15852337.495 ops/s
Iteration  22: 15793194.175 ops/s
Iteration  23: 15835665.088 ops/s
Iteration  24: 15781394.093 ops/s
Iteration  25: 15807926.076 ops/s
Iteration  26: 15857610.413 ops/s
Iteration  27: 15832859.486 ops/s
Iteration  28: 15837746.669 ops/s
Iteration  29: 15838555.693 ops/s
Iteration  30: 15850193.836 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sort":
  15829888.870 ±(99.9%) 15845.037 ops/s [Average]
  (min, avg, max) = (15781375.594, 15829888.870, 15866333.333), stdev = 23716.107
  CI (99.9%): [15814043.833, 15845733.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sort  thrpt   30  15829888.870 ± 15845.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1523172.659 ops/s
# Warmup Iteration   2: 1605030.686 ops/s
# Warmup Iteration   3: 1605912.698 ops/s
# Warmup Iteration   4: 1913547.117 ops/s
# Warmup Iteration   5: 1891933.266 ops/s
# Warmup Iteration   6: 1909863.159 ops/s
# Warmup Iteration   7: 1915378.173 ops/s
# Warmup Iteration   8: 1903429.130 ops/s
# Warmup Iteration   9: 1917221.676 ops/s
# Warmup Iteration  10: 1911445.445 ops/s
# Warmup Iteration  11: 1909984.928 ops/s
# Warmup Iteration  12: 1912662.208 ops/s
# Warmup Iteration  13: 1904467.391 ops/s
# Warmup Iteration  14: 1913959.896 ops/s
# Warmup Iteration  15: 1913010.433 ops/s
# Warmup Iteration  16: 1911931.740 ops/s
# Warmup Iteration  17: 1914305.856 ops/s
# Warmup Iteration  18: 1842891.005 ops/s
# Warmup Iteration  19: 1660878.442 ops/s
# Warmup Iteration  20: 1914407.654 ops/s
# Warmup Iteration  21: 1914484.147 ops/s
# Warmup Iteration  22: 1913373.077 ops/s
# Warmup Iteration  23: 1913688.793 ops/s
# Warmup Iteration  24: 1912782.899 ops/s
# Warmup Iteration  25: 1914363.277 ops/s
# Warmup Iteration  26: 1912264.238 ops/s
# Warmup Iteration  27: 1914841.797 ops/s
# Warmup Iteration  28: 1915128.088 ops/s
# Warmup Iteration  29: 1912775.868 ops/s
# Warmup Iteration  30: 1912037.865 ops/s
Iteration   1: 1916189.159 ops/s
Iteration   2: 1916082.312 ops/s
Iteration   3: 1920374.467 ops/s
Iteration   4: 1907618.369 ops/s
Iteration   5: 1909142.535 ops/s
Iteration   6: 1918070.066 ops/s
Iteration   7: 1912592.394 ops/s
Iteration   8: 1915654.970 ops/s
Iteration   9: 1916208.546 ops/s
Iteration  10: 1912397.117 ops/s
Iteration  11: 1913488.913 ops/s
Iteration  12: 1918375.148 ops/s
Iteration  13: 1912164.647 ops/s
Iteration  14: 1920361.400 ops/s
Iteration  15: 1905078.313 ops/s
Iteration  16: 1916710.520 ops/s
Iteration  17: 1920254.192 ops/s
Iteration  18: 1910604.602 ops/s
Iteration  19: 1915936.146 ops/s
Iteration  20: 1914515.281 ops/s
Iteration  21: 1908311.290 ops/s
Iteration  22: 1917286.263 ops/s
Iteration  23: 1908847.857 ops/s
Iteration  24: 1914763.098 ops/s
Iteration  25: 1904683.333 ops/s
Iteration  26: 1919660.354 ops/s
Iteration  27: 1911261.860 ops/s
Iteration  28: 1913733.860 ops/s
Iteration  29: 1914452.217 ops/s
Iteration  30: 1914132.269 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis":
  1913965.050 ±(99.9%) 2895.106 ops/s [Average]
  (min, avg, max) = (1904683.333, 1913965.050, 1920374.467), stdev = 4333.258
  CI (99.9%): [1911069.944, 1916860.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis  thrpt   30  1913965.050 ± 2895.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415543.622 ops/s
# Warmup Iteration   2: 488236.074 ops/s
# Warmup Iteration   3: 722736.552 ops/s
# Warmup Iteration   4: 715414.286 ops/s
# Warmup Iteration   5: 721899.770 ops/s
# Warmup Iteration   6: 720555.674 ops/s
# Warmup Iteration   7: 720168.542 ops/s
# Warmup Iteration   8: 719190.442 ops/s
# Warmup Iteration   9: 555107.841 ops/s
# Warmup Iteration  10: 720741.725 ops/s
# Warmup Iteration  11: 721498.389 ops/s
# Warmup Iteration  12: 723083.904 ops/s
# Warmup Iteration  13: 722558.934 ops/s
# Warmup Iteration  14: 723605.737 ops/s
# Warmup Iteration  15: 722885.720 ops/s
# Warmup Iteration  16: 722670.183 ops/s
# Warmup Iteration  17: 723585.575 ops/s
# Warmup Iteration  18: 723140.469 ops/s
# Warmup Iteration  19: 723802.239 ops/s
# Warmup Iteration  20: 722683.518 ops/s
# Warmup Iteration  21: 721668.802 ops/s
# Warmup Iteration  22: 723245.651 ops/s
# Warmup Iteration  23: 722849.125 ops/s
# Warmup Iteration  24: 723275.413 ops/s
# Warmup Iteration  25: 721804.061 ops/s
# Warmup Iteration  26: 723008.867 ops/s
# Warmup Iteration  27: 723391.353 ops/s
# Warmup Iteration  28: 722621.149 ops/s
# Warmup Iteration  29: 721982.226 ops/s
# Warmup Iteration  30: 722982.085 ops/s
Iteration   1: 721488.401 ops/s
Iteration   2: 722330.122 ops/s
Iteration   3: 722699.025 ops/s
Iteration   4: 722121.792 ops/s
Iteration   5: 720088.610 ops/s
Iteration   6: 723811.393 ops/s
Iteration   7: 723275.973 ops/s
Iteration   8: 722752.658 ops/s
Iteration   9: 723316.401 ops/s
Iteration  10: 723775.886 ops/s
Iteration  11: 722822.696 ops/s
Iteration  12: 723246.936 ops/s
Iteration  13: 723022.857 ops/s
Iteration  14: 723043.634 ops/s
Iteration  15: 724871.282 ops/s
Iteration  16: 723751.474 ops/s
Iteration  17: 719800.824 ops/s
Iteration  18: 722865.186 ops/s
Iteration  19: 722502.414 ops/s
Iteration  20: 723291.913 ops/s
Iteration  21: 724516.080 ops/s
Iteration  22: 724297.080 ops/s
Iteration  23: 721370.747 ops/s
Iteration  24: 722539.775 ops/s
Iteration  25: 723858.962 ops/s
Iteration  26: 721752.650 ops/s
Iteration  27: 722720.590 ops/s
Iteration  28: 724214.436 ops/s
Iteration  29: 723081.101 ops/s
Iteration  30: 724047.821 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisBy":
  722909.291 ±(99.9%) 783.362 ops/s [Average]
  (min, avg, max) = (719800.824, 722909.291, 724871.282), stdev = 1172.500
  CI (99.9%): [722125.928, 723692.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisBy  thrpt   30  722909.291 ± 783.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2956463.465 ops/s
# Warmup Iteration   2: 3838172.674 ops/s
# Warmup Iteration   3: 4765961.986 ops/s
# Warmup Iteration   4: 4745104.341 ops/s
# Warmup Iteration   5: 4764744.791 ops/s
# Warmup Iteration   6: 4774168.703 ops/s
# Warmup Iteration   7: 4775414.394 ops/s
# Warmup Iteration   8: 3976691.091 ops/s
# Warmup Iteration   9: 4743865.406 ops/s
# Warmup Iteration  10: 4763895.697 ops/s
# Warmup Iteration  11: 4761572.609 ops/s
# Warmup Iteration  12: 4771570.678 ops/s
# Warmup Iteration  13: 4760879.018 ops/s
# Warmup Iteration  14: 4769934.390 ops/s
# Warmup Iteration  15: 4759557.670 ops/s
# Warmup Iteration  16: 4773599.156 ops/s
# Warmup Iteration  17: 4770735.187 ops/s
# Warmup Iteration  18: 4762553.782 ops/s
# Warmup Iteration  19: 4757673.194 ops/s
# Warmup Iteration  20: 4755900.014 ops/s
# Warmup Iteration  21: 4768197.980 ops/s
# Warmup Iteration  22: 4762423.957 ops/s
# Warmup Iteration  23: 4758665.762 ops/s
# Warmup Iteration  24: 4769984.349 ops/s
# Warmup Iteration  25: 4771481.186 ops/s
# Warmup Iteration  26: 4747389.579 ops/s
# Warmup Iteration  27: 4770935.825 ops/s
# Warmup Iteration  28: 4767258.505 ops/s
# Warmup Iteration  29: 4758397.677 ops/s
# Warmup Iteration  30: 4760452.388 ops/s
Iteration   1: 4760469.559 ops/s
Iteration   2: 4749497.767 ops/s
Iteration   3: 4757088.089 ops/s
Iteration   4: 4766418.312 ops/s
Iteration   5: 4746087.279 ops/s
Iteration   6: 4764548.475 ops/s
Iteration   7: 4753788.431 ops/s
Iteration   8: 4757913.998 ops/s
Iteration   9: 4758592.803 ops/s
Iteration  10: 4734835.136 ops/s
Iteration  11: 4760181.590 ops/s
Iteration  12: 4777004.177 ops/s
Iteration  13: 4758039.763 ops/s
Iteration  14: 4772630.415 ops/s
Iteration  15: 4739329.769 ops/s
Iteration  16: 4764045.738 ops/s
Iteration  17: 4767514.168 ops/s
Iteration  18: 4757767.262 ops/s
Iteration  19: 4773976.230 ops/s
Iteration  20: 4775884.435 ops/s
Iteration  21: 4744564.498 ops/s
Iteration  22: 4779040.516 ops/s
Iteration  23: 4752551.967 ops/s
Iteration  24: 4779770.855 ops/s
Iteration  25: 4758959.977 ops/s
Iteration  26: 4740205.616 ops/s
Iteration  27: 4769792.938 ops/s
Iteration  28: 4767556.966 ops/s
Iteration  29: 4755941.461 ops/s
Iteration  30: 4757865.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByBoolean":
  4760062.114 ±(99.9%) 7916.772 ops/s [Average]
  (min, avg, max) = (4734835.136, 4760062.114, 4779770.855), stdev = 11849.453
  CI (99.9%): [4752145.341, 4767978.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  4760062.114 ± 7916.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1091344.842 ops/s
# Warmup Iteration   2: 1151190.916 ops/s
# Warmup Iteration   3: 1155670.536 ops/s
# Warmup Iteration   4: 1184346.077 ops/s
# Warmup Iteration   5: 1348821.304 ops/s
# Warmup Iteration   6: 1345648.318 ops/s
# Warmup Iteration   7: 1346091.178 ops/s
# Warmup Iteration   8: 1346485.215 ops/s
# Warmup Iteration   9: 1347202.737 ops/s
# Warmup Iteration  10: 1346322.369 ops/s
# Warmup Iteration  11: 1337333.335 ops/s
# Warmup Iteration  12: 1345541.401 ops/s
# Warmup Iteration  13: 1345658.500 ops/s
# Warmup Iteration  14: 1341606.243 ops/s
# Warmup Iteration  15: 1347650.544 ops/s
# Warmup Iteration  16: 1349837.181 ops/s
# Warmup Iteration  17: 1343322.823 ops/s
# Warmup Iteration  18: 1345229.218 ops/s
# Warmup Iteration  19: 1346965.584 ops/s
# Warmup Iteration  20: 1346364.320 ops/s
# Warmup Iteration  21: 1340495.749 ops/s
# Warmup Iteration  22: 1342228.199 ops/s
# Warmup Iteration  23: 1339896.339 ops/s
# Warmup Iteration  24: 1250393.965 ops/s
# Warmup Iteration  25: 1197578.828 ops/s
# Warmup Iteration  26: 1348196.283 ops/s
# Warmup Iteration  27: 1347702.851 ops/s
# Warmup Iteration  28: 1368296.987 ops/s
# Warmup Iteration  29: 1368611.996 ops/s
# Warmup Iteration  30: 1369798.794 ops/s
Iteration   1: 1370517.219 ops/s
Iteration   2: 1369653.298 ops/s
Iteration   3: 1371487.419 ops/s
Iteration   4: 1371533.895 ops/s
Iteration   5: 1370306.290 ops/s
Iteration   6: 1371790.245 ops/s
Iteration   7: 1364977.047 ops/s
Iteration   8: 1366862.924 ops/s
Iteration   9: 1371556.794 ops/s
Iteration  10: 1368859.447 ops/s
Iteration  11: 1370971.048 ops/s
Iteration  12: 1371844.293 ops/s
Iteration  13: 1372617.557 ops/s
Iteration  14: 1368657.713 ops/s
Iteration  15: 1369309.155 ops/s
Iteration  16: 1368089.572 ops/s
Iteration  17: 1371422.529 ops/s
Iteration  18: 1372631.643 ops/s
Iteration  19: 1370258.056 ops/s
Iteration  20: 1370759.655 ops/s
Iteration  21: 1363800.621 ops/s
Iteration  22: 1368534.843 ops/s
Iteration  23: 1366134.205 ops/s
Iteration  24: 1369074.537 ops/s
Iteration  25: 1366216.899 ops/s
Iteration  26: 1368606.965 ops/s
Iteration  27: 1371220.031 ops/s
Iteration  28: 1362468.538 ops/s
Iteration  29: 1372010.196 ops/s
Iteration  30: 1369590.951 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByByte":
  1369392.119 ±(99.9%) 1744.571 ops/s [Average]
  (min, avg, max) = (1362468.538, 1369392.119, 1372631.643), stdev = 2611.191
  CI (99.9%): [1367647.549, 1371136.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1369392.119 ± 1744.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1598622.233 ops/s
# Warmup Iteration   2: 1688984.580 ops/s
# Warmup Iteration   3: 1818714.343 ops/s
# Warmup Iteration   4: 2100535.309 ops/s
# Warmup Iteration   5: 2092823.418 ops/s
# Warmup Iteration   6: 2090543.923 ops/s
# Warmup Iteration   7: 2078712.527 ops/s
# Warmup Iteration   8: 2078861.014 ops/s
# Warmup Iteration   9: 2073600.529 ops/s
# Warmup Iteration  10: 2087630.905 ops/s
# Warmup Iteration  11: 2089117.634 ops/s
# Warmup Iteration  12: 2086357.442 ops/s
# Warmup Iteration  13: 2097753.922 ops/s
# Warmup Iteration  14: 2097438.986 ops/s
# Warmup Iteration  15: 2099502.295 ops/s
# Warmup Iteration  16: 1818301.783 ops/s
# Warmup Iteration  17: 2015167.109 ops/s
# Warmup Iteration  18: 2099115.483 ops/s
# Warmup Iteration  19: 2101177.840 ops/s
# Warmup Iteration  20: 2096432.979 ops/s
# Warmup Iteration  21: 2095963.529 ops/s
# Warmup Iteration  22: 2097276.894 ops/s
# Warmup Iteration  23: 2098968.335 ops/s
# Warmup Iteration  24: 2099618.296 ops/s
# Warmup Iteration  25: 2098378.910 ops/s
# Warmup Iteration  26: 2100032.873 ops/s
# Warmup Iteration  27: 2103870.909 ops/s
# Warmup Iteration  28: 2090272.802 ops/s
# Warmup Iteration  29: 2100496.557 ops/s
# Warmup Iteration  30: 2096110.271 ops/s
Iteration   1: 2097857.204 ops/s
Iteration   2: 2099402.820 ops/s
Iteration   3: 2096523.907 ops/s
Iteration   4: 2103041.996 ops/s
Iteration   5: 2095553.686 ops/s
Iteration   6: 2103908.831 ops/s
Iteration   7: 2093824.342 ops/s
Iteration   8: 2102206.581 ops/s
Iteration   9: 2101629.221 ops/s
Iteration  10: 2101115.178 ops/s
Iteration  11: 2096674.542 ops/s
Iteration  12: 2099826.045 ops/s
Iteration  13: 2101551.291 ops/s
Iteration  14: 2099399.970 ops/s
Iteration  15: 2101623.355 ops/s
Iteration  16: 2093908.349 ops/s
Iteration  17: 2100584.402 ops/s
Iteration  18: 2096260.141 ops/s
Iteration  19: 2100750.807 ops/s
Iteration  20: 2099560.072 ops/s
Iteration  21: 2097305.280 ops/s
Iteration  22: 2100528.636 ops/s
Iteration  23: 2099886.554 ops/s
Iteration  24: 2092659.353 ops/s
Iteration  25: 2098876.950 ops/s
Iteration  26: 2098011.325 ops/s
Iteration  27: 2097947.847 ops/s
Iteration  28: 2096849.614 ops/s
Iteration  29: 2093264.703 ops/s
Iteration  30: 2101191.835 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByChar":
  2098724.161 ±(99.9%) 1983.755 ops/s [Average]
  (min, avg, max) = (2092659.353, 2098724.161, 2103908.831), stdev = 2969.192
  CI (99.9%): [2096740.406, 2100707.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByChar  thrpt   30  2098724.161 ± 1983.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275866.747 ops/s
# Warmup Iteration   2: 446661.291 ops/s
# Warmup Iteration   3: 521647.408 ops/s
# Warmup Iteration   4: 530519.604 ops/s
# Warmup Iteration   5: 529414.693 ops/s
# Warmup Iteration   6: 442471.866 ops/s
# Warmup Iteration   7: 514316.605 ops/s
# Warmup Iteration   8: 528196.237 ops/s
# Warmup Iteration   9: 528119.748 ops/s
# Warmup Iteration  10: 528527.020 ops/s
# Warmup Iteration  11: 529164.986 ops/s
# Warmup Iteration  12: 528817.521 ops/s
# Warmup Iteration  13: 529568.349 ops/s
# Warmup Iteration  14: 529129.640 ops/s
# Warmup Iteration  15: 529753.258 ops/s
# Warmup Iteration  16: 528941.467 ops/s
# Warmup Iteration  17: 529526.307 ops/s
# Warmup Iteration  18: 529468.661 ops/s
# Warmup Iteration  19: 529851.633 ops/s
# Warmup Iteration  20: 530120.550 ops/s
# Warmup Iteration  21: 529423.911 ops/s
# Warmup Iteration  22: 529557.128 ops/s
# Warmup Iteration  23: 529655.991 ops/s
# Warmup Iteration  24: 529479.184 ops/s
# Warmup Iteration  25: 529832.516 ops/s
# Warmup Iteration  26: 528958.891 ops/s
# Warmup Iteration  27: 529343.552 ops/s
# Warmup Iteration  28: 529510.748 ops/s
# Warmup Iteration  29: 529490.489 ops/s
# Warmup Iteration  30: 529176.098 ops/s
Iteration   1: 529367.031 ops/s
Iteration   2: 529210.271 ops/s
Iteration   3: 529216.078 ops/s
Iteration   4: 529264.549 ops/s
Iteration   5: 529507.973 ops/s
Iteration   6: 530065.580 ops/s
Iteration   7: 529967.201 ops/s
Iteration   8: 529516.516 ops/s
Iteration   9: 530926.024 ops/s
Iteration  10: 526967.162 ops/s
Iteration  11: 530020.869 ops/s
Iteration  12: 527480.728 ops/s
Iteration  13: 530501.746 ops/s
Iteration  14: 527690.987 ops/s
Iteration  15: 528778.486 ops/s
Iteration  16: 529799.207 ops/s
Iteration  17: 529915.939 ops/s
Iteration  18: 528874.223 ops/s
Iteration  19: 529914.462 ops/s
Iteration  20: 529319.971 ops/s
Iteration  21: 530458.139 ops/s
Iteration  22: 529155.776 ops/s
Iteration  23: 529695.137 ops/s
Iteration  24: 529018.288 ops/s
Iteration  25: 529696.467 ops/s
Iteration  26: 528054.597 ops/s
Iteration  27: 529606.025 ops/s
Iteration  28: 528276.688 ops/s
Iteration  29: 530515.703 ops/s
Iteration  30: 531813.866 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByDouble":
  529419.856 ±(99.9%) 683.642 ops/s [Average]
  (min, avg, max) = (526967.162, 529419.856, 531813.866), stdev = 1023.243
  CI (99.9%): [528736.214, 530103.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  529419.856 ± 683.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 276876.932 ops/s
# Warmup Iteration   2: 450166.166 ops/s
# Warmup Iteration   3: 529088.838 ops/s
# Warmup Iteration   4: 530528.448 ops/s
# Warmup Iteration   5: 535381.647 ops/s
# Warmup Iteration   6: 435987.516 ops/s
# Warmup Iteration   7: 529731.116 ops/s
# Warmup Iteration   8: 535244.331 ops/s
# Warmup Iteration   9: 533063.382 ops/s
# Warmup Iteration  10: 533710.190 ops/s
# Warmup Iteration  11: 537545.177 ops/s
# Warmup Iteration  12: 535657.747 ops/s
# Warmup Iteration  13: 534815.770 ops/s
# Warmup Iteration  14: 536584.721 ops/s
# Warmup Iteration  15: 537157.506 ops/s
# Warmup Iteration  16: 535768.674 ops/s
# Warmup Iteration  17: 536048.789 ops/s
# Warmup Iteration  18: 535545.281 ops/s
# Warmup Iteration  19: 534865.267 ops/s
# Warmup Iteration  20: 537305.788 ops/s
# Warmup Iteration  21: 535657.264 ops/s
# Warmup Iteration  22: 535814.187 ops/s
# Warmup Iteration  23: 535422.161 ops/s
# Warmup Iteration  24: 535483.660 ops/s
# Warmup Iteration  25: 535140.910 ops/s
# Warmup Iteration  26: 536552.495 ops/s
# Warmup Iteration  27: 535860.303 ops/s
# Warmup Iteration  28: 534700.445 ops/s
# Warmup Iteration  29: 535926.541 ops/s
# Warmup Iteration  30: 535950.615 ops/s
Iteration   1: 535395.288 ops/s
Iteration   2: 534422.221 ops/s
Iteration   3: 536808.701 ops/s
Iteration   4: 535594.416 ops/s
Iteration   5: 536258.085 ops/s
Iteration   6: 534272.752 ops/s
Iteration   7: 535965.433 ops/s
Iteration   8: 535607.453 ops/s
Iteration   9: 537760.662 ops/s
Iteration  10: 535816.172 ops/s
Iteration  11: 534075.689 ops/s
Iteration  12: 535896.851 ops/s
Iteration  13: 534511.184 ops/s
Iteration  14: 537034.069 ops/s
Iteration  15: 536048.045 ops/s
Iteration  16: 537531.876 ops/s
Iteration  17: 534452.534 ops/s
Iteration  18: 535597.621 ops/s
Iteration  19: 535052.783 ops/s
Iteration  20: 536297.509 ops/s
Iteration  21: 535148.494 ops/s
Iteration  22: 536319.508 ops/s
Iteration  23: 536878.623 ops/s
Iteration  24: 536802.078 ops/s
Iteration  25: 535025.176 ops/s
Iteration  26: 537167.767 ops/s
Iteration  27: 534410.989 ops/s
Iteration  28: 535348.586 ops/s
Iteration  29: 536764.833 ops/s
Iteration  30: 535088.336 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByFloat":
  535778.458 ±(99.9%) 683.517 ops/s [Average]
  (min, avg, max) = (534075.689, 535778.458, 537760.662), stdev = 1023.056
  CI (99.9%): [535094.941, 536461.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  535778.458 ± 683.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1061625.913 ops/s
# Warmup Iteration   2: 1200414.269 ops/s
# Warmup Iteration   3: 1202249.256 ops/s
# Warmup Iteration   4: 1241332.428 ops/s
# Warmup Iteration   5: 1398730.833 ops/s
# Warmup Iteration   6: 1402971.350 ops/s
# Warmup Iteration   7: 1403728.473 ops/s
# Warmup Iteration   8: 1402958.488 ops/s
# Warmup Iteration   9: 1401854.541 ops/s
# Warmup Iteration  10: 1397783.543 ops/s
# Warmup Iteration  11: 1396421.031 ops/s
# Warmup Iteration  12: 1403717.137 ops/s
# Warmup Iteration  13: 1402785.600 ops/s
# Warmup Iteration  14: 1400453.282 ops/s
# Warmup Iteration  15: 1403678.953 ops/s
# Warmup Iteration  16: 1402339.673 ops/s
# Warmup Iteration  17: 1399166.260 ops/s
# Warmup Iteration  18: 1402778.422 ops/s
# Warmup Iteration  19: 1402394.912 ops/s
# Warmup Iteration  20: 1398440.987 ops/s
# Warmup Iteration  21: 1396805.423 ops/s
# Warmup Iteration  22: 1400191.766 ops/s
# Warmup Iteration  23: 1334056.458 ops/s
# Warmup Iteration  24: 1226006.851 ops/s
# Warmup Iteration  25: 1398133.963 ops/s
# Warmup Iteration  26: 1399897.815 ops/s
# Warmup Iteration  27: 1399878.505 ops/s
# Warmup Iteration  28: 1393811.120 ops/s
# Warmup Iteration  29: 1398007.283 ops/s
# Warmup Iteration  30: 1400197.797 ops/s
Iteration   1: 1398239.903 ops/s
Iteration   2: 1400562.053 ops/s
Iteration   3: 1396547.010 ops/s
Iteration   4: 1401687.674 ops/s
Iteration   5: 1396471.617 ops/s
Iteration   6: 1401183.653 ops/s
Iteration   7: 1402044.717 ops/s
Iteration   8: 1399744.394 ops/s
Iteration   9: 1398288.690 ops/s
Iteration  10: 1399404.502 ops/s
Iteration  11: 1398517.433 ops/s
Iteration  12: 1400127.640 ops/s
Iteration  13: 1400229.640 ops/s
Iteration  14: 1398972.175 ops/s
Iteration  15: 1399505.388 ops/s
Iteration  16: 1398599.497 ops/s
Iteration  17: 1395763.126 ops/s
Iteration  18: 1401891.907 ops/s
Iteration  19: 1400283.697 ops/s
Iteration  20: 1397836.105 ops/s
Iteration  21: 1402496.477 ops/s
Iteration  22: 1392037.707 ops/s
Iteration  23: 1398028.694 ops/s
Iteration  24: 1398859.070 ops/s
Iteration  25: 1398843.681 ops/s
Iteration  26: 1395924.733 ops/s
Iteration  27: 1398720.564 ops/s
Iteration  28: 1402265.714 ops/s
Iteration  29: 1396989.675 ops/s
Iteration  30: 1401266.242 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByInt":
  1399044.446 ±(99.9%) 1540.584 ops/s [Average]
  (min, avg, max) = (1392037.707, 1399044.446, 1402496.477), stdev = 2305.873
  CI (99.9%): [1397503.862, 1400585.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1399044.446 ± 1540.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1045197.473 ops/s
# Warmup Iteration   2: 1119333.219 ops/s
# Warmup Iteration   3: 1153238.950 ops/s
# Warmup Iteration   4: 1207669.025 ops/s
# Warmup Iteration   5: 1384820.285 ops/s
# Warmup Iteration   6: 1384393.037 ops/s
# Warmup Iteration   7: 1382824.491 ops/s
# Warmup Iteration   8: 1376659.614 ops/s
# Warmup Iteration   9: 1380628.501 ops/s
# Warmup Iteration  10: 1380533.179 ops/s
# Warmup Iteration  11: 1375515.939 ops/s
# Warmup Iteration  12: 1380845.560 ops/s
# Warmup Iteration  13: 1380235.775 ops/s
# Warmup Iteration  14: 1374765.196 ops/s
# Warmup Iteration  15: 1383574.031 ops/s
# Warmup Iteration  16: 1381551.503 ops/s
# Warmup Iteration  17: 1376194.223 ops/s
# Warmup Iteration  18: 1377167.411 ops/s
# Warmup Iteration  19: 1377010.284 ops/s
# Warmup Iteration  20: 1375970.632 ops/s
# Warmup Iteration  21: 1372696.461 ops/s
# Warmup Iteration  22: 1372311.205 ops/s
# Warmup Iteration  23: 1372303.678 ops/s
# Warmup Iteration  24: 1210849.330 ops/s
# Warmup Iteration  25: 1302525.840 ops/s
# Warmup Iteration  26: 1378568.369 ops/s
# Warmup Iteration  27: 1376777.919 ops/s
# Warmup Iteration  28: 1376693.252 ops/s
# Warmup Iteration  29: 1373237.305 ops/s
# Warmup Iteration  30: 1378534.549 ops/s
Iteration   1: 1377235.599 ops/s
Iteration   2: 1376993.768 ops/s
Iteration   3: 1374910.351 ops/s
Iteration   4: 1377154.202 ops/s
Iteration   5: 1374491.292 ops/s
Iteration   6: 1378664.350 ops/s
Iteration   7: 1379494.999 ops/s
Iteration   8: 1378924.519 ops/s
Iteration   9: 1377262.154 ops/s
Iteration  10: 1379797.165 ops/s
Iteration  11: 1377505.060 ops/s
Iteration  12: 1380001.456 ops/s
Iteration  13: 1377910.482 ops/s
Iteration  14: 1376134.965 ops/s
Iteration  15: 1376067.392 ops/s
Iteration  16: 1377477.467 ops/s
Iteration  17: 1375376.701 ops/s
Iteration  18: 1377753.631 ops/s
Iteration  19: 1377605.303 ops/s
Iteration  20: 1378718.290 ops/s
Iteration  21: 1375450.945 ops/s
Iteration  22: 1379997.539 ops/s
Iteration  23: 1377147.974 ops/s
Iteration  24: 1378120.439 ops/s
Iteration  25: 1381345.666 ops/s
Iteration  26: 1376358.871 ops/s
Iteration  27: 1375380.685 ops/s
Iteration  28: 1378135.869 ops/s
Iteration  29: 1375341.521 ops/s
Iteration  30: 1379136.763 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByLong":
  1377529.847 ±(99.9%) 1140.839 ops/s [Average]
  (min, avg, max) = (1374491.292, 1377529.847, 1381345.666), stdev = 1707.555
  CI (99.9%): [1376389.008, 1378670.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1377529.847 ± 1140.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1034802.430 ops/s
# Warmup Iteration   2: 1112192.637 ops/s
# Warmup Iteration   3: 1166539.775 ops/s
# Warmup Iteration   4: 1186079.093 ops/s
# Warmup Iteration   5: 1371043.177 ops/s
# Warmup Iteration   6: 1370205.985 ops/s
# Warmup Iteration   7: 1371816.456 ops/s
# Warmup Iteration   8: 1368763.957 ops/s
# Warmup Iteration   9: 1369628.516 ops/s
# Warmup Iteration  10: 1370729.374 ops/s
# Warmup Iteration  11: 1363480.050 ops/s
# Warmup Iteration  12: 1373459.412 ops/s
# Warmup Iteration  13: 1371378.782 ops/s
# Warmup Iteration  14: 1369692.732 ops/s
# Warmup Iteration  15: 1368315.569 ops/s
# Warmup Iteration  16: 1371090.661 ops/s
# Warmup Iteration  17: 1364713.181 ops/s
# Warmup Iteration  18: 1370332.921 ops/s
# Warmup Iteration  19: 1370440.456 ops/s
# Warmup Iteration  20: 1368644.321 ops/s
# Warmup Iteration  21: 1372516.684 ops/s
# Warmup Iteration  22: 1371043.814 ops/s
# Warmup Iteration  23: 1369919.681 ops/s
# Warmup Iteration  24: 1217881.916 ops/s
# Warmup Iteration  25: 1276201.487 ops/s
# Warmup Iteration  26: 1370238.900 ops/s
# Warmup Iteration  27: 1371154.654 ops/s
# Warmup Iteration  28: 1372900.313 ops/s
# Warmup Iteration  29: 1369001.805 ops/s
# Warmup Iteration  30: 1371478.380 ops/s
Iteration   1: 1368304.295 ops/s
Iteration   2: 1371950.190 ops/s
Iteration   3: 1367227.545 ops/s
Iteration   4: 1370756.319 ops/s
Iteration   5: 1365267.086 ops/s
Iteration   6: 1369311.781 ops/s
Iteration   7: 1367152.374 ops/s
Iteration   8: 1374221.433 ops/s
Iteration   9: 1371495.066 ops/s
Iteration  10: 1368337.137 ops/s
Iteration  11: 1370444.377 ops/s
Iteration  12: 1373672.046 ops/s
Iteration  13: 1371743.265 ops/s
Iteration  14: 1370149.228 ops/s
Iteration  15: 1368348.302 ops/s
Iteration  16: 1369120.024 ops/s
Iteration  17: 1377004.245 ops/s
Iteration  18: 1377522.618 ops/s
Iteration  19: 1374537.510 ops/s
Iteration  20: 1375192.765 ops/s
Iteration  21: 1376614.272 ops/s
Iteration  22: 1373977.393 ops/s
Iteration  23: 1376560.062 ops/s
Iteration  24: 1372800.266 ops/s
Iteration  25: 1375403.316 ops/s
Iteration  26: 1379517.761 ops/s
Iteration  27: 1373639.212 ops/s
Iteration  28: 1375777.005 ops/s
Iteration  29: 1376049.905 ops/s
Iteration  30: 1378669.130 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisByShort":
  1372692.198 ±(99.9%) 2522.382 ops/s [Average]
  (min, avg, max) = (1365267.086, 1372692.198, 1379517.761), stdev = 3775.383
  CI (99.9%): [1370169.816, 1375214.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1372692.198 ± 2522.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4161489.622 ops/s
# Warmup Iteration   2: 5777050.759 ops/s
# Warmup Iteration   3: 7101458.057 ops/s
# Warmup Iteration   4: 7062932.807 ops/s
# Warmup Iteration   5: 7105443.852 ops/s
# Warmup Iteration   6: 7094286.447 ops/s
# Warmup Iteration   7: 6625758.957 ops/s
# Warmup Iteration   8: 6356463.704 ops/s
# Warmup Iteration   9: 7086090.831 ops/s
# Warmup Iteration  10: 7102050.620 ops/s
# Warmup Iteration  11: 7103501.257 ops/s
# Warmup Iteration  12: 7108314.089 ops/s
# Warmup Iteration  13: 7106494.399 ops/s
# Warmup Iteration  14: 7107400.331 ops/s
# Warmup Iteration  15: 7088899.399 ops/s
# Warmup Iteration  16: 7117487.147 ops/s
# Warmup Iteration  17: 7026591.180 ops/s
# Warmup Iteration  18: 7046417.532 ops/s
# Warmup Iteration  19: 7040316.533 ops/s
# Warmup Iteration  20: 7036980.646 ops/s
# Warmup Iteration  21: 7037533.446 ops/s
# Warmup Iteration  22: 7038908.523 ops/s
# Warmup Iteration  23: 7024034.905 ops/s
# Warmup Iteration  24: 7053355.483 ops/s
# Warmup Iteration  25: 7026499.840 ops/s
# Warmup Iteration  26: 7030616.782 ops/s
# Warmup Iteration  27: 7041816.944 ops/s
# Warmup Iteration  28: 7028026.514 ops/s
# Warmup Iteration  29: 7044666.247 ops/s
# Warmup Iteration  30: 7038768.809 ops/s
Iteration   1: 7020730.408 ops/s
Iteration   2: 7042937.043 ops/s
Iteration   3: 7050820.605 ops/s
Iteration   4: 7054316.010 ops/s
Iteration   5: 7014843.901 ops/s
Iteration   6: 7020164.692 ops/s
Iteration   7: 7056291.557 ops/s
Iteration   8: 7029423.497 ops/s
Iteration   9: 7043234.956 ops/s
Iteration  10: 7025364.993 ops/s
Iteration  11: 7058786.528 ops/s
Iteration  12: 7041028.104 ops/s
Iteration  13: 7018539.064 ops/s
Iteration  14: 7033379.461 ops/s
Iteration  15: 7031700.633 ops/s
Iteration  16: 7048308.375 ops/s
Iteration  17: 7039550.787 ops/s
Iteration  18: 7052290.256 ops/s
Iteration  19: 7032785.075 ops/s
Iteration  20: 7032682.897 ops/s
Iteration  21: 7043137.106 ops/s
Iteration  22: 7050280.100 ops/s
Iteration  23: 7015105.861 ops/s
Iteration  24: 7046965.632 ops/s
Iteration  25: 7035510.183 ops/s
Iteration  26: 7032484.698 ops/s
Iteration  27: 7016013.217 ops/s
Iteration  28: 7029556.027 ops/s
Iteration  29: 7025125.980 ops/s
Iteration  30: 7033963.919 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  7035844.052 ±(99.9%) 8655.889 ops/s [Average]
  (min, avg, max) = (7014843.901, 7035844.052, 7058786.528), stdev = 12955.728
  CI (99.9%): [7027188.163, 7044499.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  7035844.052 ± 8655.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2759657.177 ops/s
# Warmup Iteration   2: 4056635.497 ops/s
# Warmup Iteration   3: 4653713.539 ops/s
# Warmup Iteration   4: 4646520.051 ops/s
# Warmup Iteration   5: 4661573.040 ops/s
# Warmup Iteration   6: 4652867.399 ops/s
# Warmup Iteration   7: 3843912.635 ops/s
# Warmup Iteration   8: 4640392.081 ops/s
# Warmup Iteration   9: 4657491.994 ops/s
# Warmup Iteration  10: 4650636.509 ops/s
# Warmup Iteration  11: 4648733.697 ops/s
# Warmup Iteration  12: 4652273.083 ops/s
# Warmup Iteration  13: 4646768.498 ops/s
# Warmup Iteration  14: 4652741.324 ops/s
# Warmup Iteration  15: 4651770.953 ops/s
# Warmup Iteration  16: 4657203.156 ops/s
# Warmup Iteration  17: 4625940.357 ops/s
# Warmup Iteration  18: 4617594.198 ops/s
# Warmup Iteration  19: 4612511.382 ops/s
# Warmup Iteration  20: 4588524.375 ops/s
# Warmup Iteration  21: 4617251.110 ops/s
# Warmup Iteration  22: 4606533.237 ops/s
# Warmup Iteration  23: 4608748.119 ops/s
# Warmup Iteration  24: 4615097.256 ops/s
# Warmup Iteration  25: 4614131.040 ops/s
# Warmup Iteration  26: 4627408.845 ops/s
# Warmup Iteration  27: 4617016.256 ops/s
# Warmup Iteration  28: 4624816.398 ops/s
# Warmup Iteration  29: 4617046.165 ops/s
# Warmup Iteration  30: 4618606.652 ops/s
Iteration   1: 4616151.892 ops/s
Iteration   2: 4608734.222 ops/s
Iteration   3: 4627541.757 ops/s
Iteration   4: 4606768.853 ops/s
Iteration   5: 4632428.416 ops/s
Iteration   6: 4613425.426 ops/s
Iteration   7: 4622020.087 ops/s
Iteration   8: 4613348.216 ops/s
Iteration   9: 4616219.373 ops/s
Iteration  10: 4622574.558 ops/s
Iteration  11: 4609805.324 ops/s
Iteration  12: 4621544.632 ops/s
Iteration  13: 4612414.256 ops/s
Iteration  14: 4609505.078 ops/s
Iteration  15: 4616943.544 ops/s
Iteration  16: 4609218.309 ops/s
Iteration  17: 4624638.657 ops/s
Iteration  18: 4620508.918 ops/s
Iteration  19: 4606332.712 ops/s
Iteration  20: 4620195.531 ops/s
Iteration  21: 4617029.362 ops/s
Iteration  22: 4618187.972 ops/s
Iteration  23: 4623205.089 ops/s
Iteration  24: 4632038.243 ops/s
Iteration  25: 4620717.804 ops/s
Iteration  26: 4619965.956 ops/s
Iteration  27: 4611473.196 ops/s
Iteration  28: 4628767.720 ops/s
Iteration  29: 4603366.398 ops/s
Iteration  30: 4630583.658 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4617855.172 ±(99.9%) 5288.280 ops/s [Average]
  (min, avg, max) = (4603366.398, 4617855.172, 4632428.416), stdev = 7915.249
  CI (99.9%): [4612566.892, 4623143.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4617855.172 ± 5288.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5527.361 ops/s
# Warmup Iteration   2: 5899.079 ops/s
# Warmup Iteration   3: 5931.414 ops/s
# Warmup Iteration   4: 6473.478 ops/s
# Warmup Iteration   5: 6790.835 ops/s
# Warmup Iteration   6: 7026.989 ops/s
# Warmup Iteration   7: 7024.596 ops/s
# Warmup Iteration   8: 7027.830 ops/s
# Warmup Iteration   9: 6972.150 ops/s
# Warmup Iteration  10: 6995.131 ops/s
# Warmup Iteration  11: 7056.722 ops/s
# Warmup Iteration  12: 7037.709 ops/s
# Warmup Iteration  13: 7046.142 ops/s
# Warmup Iteration  14: 7038.941 ops/s
# Warmup Iteration  15: 7028.304 ops/s
# Warmup Iteration  16: 7040.816 ops/s
# Warmup Iteration  17: 7039.259 ops/s
# Warmup Iteration  18: 7022.769 ops/s
# Warmup Iteration  19: 7034.939 ops/s
# Warmup Iteration  20: 7033.544 ops/s
# Warmup Iteration  21: 6128.934 ops/s
# Warmup Iteration  22: 6999.840 ops/s
# Warmup Iteration  23: 7045.541 ops/s
# Warmup Iteration  24: 7034.755 ops/s
# Warmup Iteration  25: 7039.349 ops/s
# Warmup Iteration  26: 7046.698 ops/s
# Warmup Iteration  27: 7044.931 ops/s
# Warmup Iteration  28: 7032.223 ops/s
# Warmup Iteration  29: 7038.566 ops/s
# Warmup Iteration  30: 7027.239 ops/s
Iteration   1: 7049.253 ops/s
Iteration   2: 7077.987 ops/s
Iteration   3: 7048.534 ops/s
Iteration   4: 7048.047 ops/s
Iteration   5: 7036.921 ops/s
Iteration   6: 7040.636 ops/s
Iteration   7: 7040.375 ops/s
Iteration   8: 7057.590 ops/s
Iteration   9: 7029.197 ops/s
Iteration  10: 7047.432 ops/s
Iteration  11: 7049.254 ops/s
Iteration  12: 7021.678 ops/s
Iteration  13: 7033.645 ops/s
Iteration  14: 7039.813 ops/s
Iteration  15: 7039.307 ops/s
Iteration  16: 7044.400 ops/s
Iteration  17: 7021.176 ops/s
Iteration  18: 7055.568 ops/s
Iteration  19: 7027.576 ops/s
Iteration  20: 7025.867 ops/s
Iteration  21: 7048.840 ops/s
Iteration  22: 7038.261 ops/s
Iteration  23: 7022.089 ops/s
Iteration  24: 7044.472 ops/s
Iteration  25: 7056.812 ops/s
Iteration  26: 7043.000 ops/s
Iteration  27: 7029.522 ops/s
Iteration  28: 7043.654 ops/s
Iteration  29: 7051.071 ops/s
Iteration  30: 7048.785 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_large":
  7042.025 ±(99.9%) 8.326 ops/s [Average]
  (min, avg, max) = (7021.176, 7042.025, 7077.987), stdev = 12.462
  CI (99.9%): [7033.700, 7050.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt     Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_large  thrpt   30  7042.025 ± 8.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5889259.263 ops/s
# Warmup Iteration   2: 8246463.531 ops/s
# Warmup Iteration   3: 7877645.253 ops/s
# Warmup Iteration   4: 7946108.115 ops/s
# Warmup Iteration   5: 7907697.261 ops/s
# Warmup Iteration   6: 6560035.831 ops/s
# Warmup Iteration   7: 7965722.430 ops/s
# Warmup Iteration   8: 7964402.866 ops/s
# Warmup Iteration   9: 7925121.109 ops/s
# Warmup Iteration  10: 7969493.701 ops/s
# Warmup Iteration  11: 7967672.183 ops/s
# Warmup Iteration  12: 7971280.051 ops/s
# Warmup Iteration  13: 7967930.919 ops/s
# Warmup Iteration  14: 7967376.992 ops/s
# Warmup Iteration  15: 7961244.064 ops/s
# Warmup Iteration  16: 7954735.583 ops/s
# Warmup Iteration  17: 8063883.728 ops/s
# Warmup Iteration  18: 8326544.278 ops/s
# Warmup Iteration  19: 8316629.736 ops/s
# Warmup Iteration  20: 8321427.960 ops/s
# Warmup Iteration  21: 8325909.520 ops/s
# Warmup Iteration  22: 8320548.752 ops/s
# Warmup Iteration  23: 8338095.070 ops/s
# Warmup Iteration  24: 8336404.256 ops/s
# Warmup Iteration  25: 8338036.557 ops/s
# Warmup Iteration  26: 8321396.732 ops/s
# Warmup Iteration  27: 8330282.654 ops/s
# Warmup Iteration  28: 8331264.319 ops/s
# Warmup Iteration  29: 8341154.227 ops/s
# Warmup Iteration  30: 8359435.878 ops/s
Iteration   1: 8334512.129 ops/s
Iteration   2: 8320161.997 ops/s
Iteration   3: 8348450.647 ops/s
Iteration   4: 8358088.060 ops/s
Iteration   5: 8330814.616 ops/s
Iteration   6: 8303844.427 ops/s
Iteration   7: 8317156.582 ops/s
Iteration   8: 8323243.193 ops/s
Iteration   9: 8327391.450 ops/s
Iteration  10: 8324854.085 ops/s
Iteration  11: 8353238.258 ops/s
Iteration  12: 8318812.865 ops/s
Iteration  13: 8313069.330 ops/s
Iteration  14: 8346556.562 ops/s
Iteration  15: 8342418.873 ops/s
Iteration  16: 8320558.943 ops/s
Iteration  17: 8346783.977 ops/s
Iteration  18: 8348583.070 ops/s
Iteration  19: 8337343.126 ops/s
Iteration  20: 8329203.257 ops/s
Iteration  21: 8321191.208 ops/s
Iteration  22: 8328194.078 ops/s
Iteration  23: 8321054.245 ops/s
Iteration  24: 8357987.714 ops/s
Iteration  25: 8339715.538 ops/s
Iteration  26: 8357076.598 ops/s
Iteration  27: 8318477.125 ops/s
Iteration  28: 8348234.283 ops/s
Iteration  29: 8323668.808 ops/s
Iteration  30: 8347731.168 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_small":
  8333613.874 ±(99.9%) 10022.260 ops/s [Average]
  (min, avg, max) = (8303844.427, 8333613.874, 8358088.060), stdev = 15000.849
  CI (99.9%): [8323591.613, 8343636.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_small  thrpt   30  8333613.874 ± 10022.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1523512.542 ops/s
# Warmup Iteration   2: 1591900.812 ops/s
# Warmup Iteration   3: 1583131.556 ops/s
# Warmup Iteration   4: 1917263.895 ops/s
# Warmup Iteration   5: 1920966.099 ops/s
# Warmup Iteration   6: 1908996.318 ops/s
# Warmup Iteration   7: 1920448.294 ops/s
# Warmup Iteration   8: 1919305.416 ops/s
# Warmup Iteration   9: 1923953.386 ops/s
# Warmup Iteration  10: 1923415.643 ops/s
# Warmup Iteration  11: 1923477.902 ops/s
# Warmup Iteration  12: 1920798.617 ops/s
# Warmup Iteration  13: 1917000.403 ops/s
# Warmup Iteration  14: 1914947.454 ops/s
# Warmup Iteration  15: 1922972.783 ops/s
# Warmup Iteration  16: 1911671.901 ops/s
# Warmup Iteration  17: 1921611.153 ops/s
# Warmup Iteration  18: 1867586.355 ops/s
# Warmup Iteration  19: 1646843.098 ops/s
# Warmup Iteration  20: 1923346.668 ops/s
# Warmup Iteration  21: 1922570.530 ops/s
# Warmup Iteration  22: 1917150.973 ops/s
# Warmup Iteration  23: 1910607.580 ops/s
# Warmup Iteration  24: 1916628.606 ops/s
# Warmup Iteration  25: 1912830.482 ops/s
# Warmup Iteration  26: 1918274.859 ops/s
# Warmup Iteration  27: 1917048.241 ops/s
# Warmup Iteration  28: 1914299.769 ops/s
# Warmup Iteration  29: 1915223.486 ops/s
# Warmup Iteration  30: 1916417.767 ops/s
Iteration   1: 1917177.441 ops/s
Iteration   2: 1912985.430 ops/s
Iteration   3: 1917511.082 ops/s
Iteration   4: 1920951.276 ops/s
Iteration   5: 1913956.397 ops/s
Iteration   6: 1917645.862 ops/s
Iteration   7: 1919611.396 ops/s
Iteration   8: 1912526.060 ops/s
Iteration   9: 1917127.246 ops/s
Iteration  10: 1921602.970 ops/s
Iteration  11: 1914538.875 ops/s
Iteration  12: 1917022.360 ops/s
Iteration  13: 1918490.867 ops/s
Iteration  14: 1917078.574 ops/s
Iteration  15: 1917652.593 ops/s
Iteration  16: 1914288.471 ops/s
Iteration  17: 1916510.514 ops/s
Iteration  18: 1909491.578 ops/s
Iteration  19: 1917533.314 ops/s
Iteration  20: 1916402.047 ops/s
Iteration  21: 1917361.701 ops/s
Iteration  22: 1916404.162 ops/s
Iteration  23: 1916804.265 ops/s
Iteration  24: 1911984.050 ops/s
Iteration  25: 1913271.761 ops/s
Iteration  26: 1912380.582 ops/s
Iteration  27: 1921559.539 ops/s
Iteration  28: 1917566.070 ops/s
Iteration  29: 1914429.627 ops/s
Iteration  30: 1915825.720 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator":
  1916256.394 ±(99.9%) 1907.924 ops/s [Average]
  (min, avg, max) = (1909491.578, 1916256.394, 1921602.970), stdev = 2855.692
  CI (99.9%): [1914348.470, 1918164.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  1916256.394 ± 1907.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5334.387 ops/s
# Warmup Iteration   2: 5632.554 ops/s
# Warmup Iteration   3: 5633.365 ops/s
# Warmup Iteration   4: 6015.758 ops/s
# Warmup Iteration   5: 6398.792 ops/s
# Warmup Iteration   6: 6468.172 ops/s
# Warmup Iteration   7: 6480.362 ops/s
# Warmup Iteration   8: 6496.195 ops/s
# Warmup Iteration   9: 6491.399 ops/s
# Warmup Iteration  10: 6462.739 ops/s
# Warmup Iteration  11: 6499.510 ops/s
# Warmup Iteration  12: 6488.304 ops/s
# Warmup Iteration  13: 6490.175 ops/s
# Warmup Iteration  14: 6503.678 ops/s
# Warmup Iteration  15: 6502.998 ops/s
# Warmup Iteration  16: 6489.215 ops/s
# Warmup Iteration  17: 6485.358 ops/s
# Warmup Iteration  18: 6491.261 ops/s
# Warmup Iteration  19: 6486.168 ops/s
# Warmup Iteration  20: 6485.663 ops/s
# Warmup Iteration  21: 6485.887 ops/s
# Warmup Iteration  22: 6131.664 ops/s
# Warmup Iteration  23: 5968.792 ops/s
# Warmup Iteration  24: 6497.221 ops/s
# Warmup Iteration  25: 6488.259 ops/s
# Warmup Iteration  26: 6500.875 ops/s
# Warmup Iteration  27: 6485.834 ops/s
# Warmup Iteration  28: 6496.836 ops/s
# Warmup Iteration  29: 6487.496 ops/s
# Warmup Iteration  30: 6503.782 ops/s
Iteration   1: 6500.578 ops/s
Iteration   2: 6487.085 ops/s
Iteration   3: 6514.303 ops/s
Iteration   4: 6494.745 ops/s
Iteration   5: 6500.615 ops/s
Iteration   6: 6498.509 ops/s
Iteration   7: 6475.459 ops/s
Iteration   8: 6499.586 ops/s
Iteration   9: 6504.120 ops/s
Iteration  10: 6478.823 ops/s
Iteration  11: 6509.505 ops/s
Iteration  12: 6503.750 ops/s
Iteration  13: 6504.268 ops/s
Iteration  14: 6500.440 ops/s
Iteration  15: 6499.015 ops/s
Iteration  16: 6499.809 ops/s
Iteration  17: 6494.169 ops/s
Iteration  18: 6472.311 ops/s
Iteration  19: 6483.697 ops/s
Iteration  20: 6488.579 ops/s
Iteration  21: 6487.713 ops/s
Iteration  22: 6495.206 ops/s
Iteration  23: 6504.492 ops/s
Iteration  24: 6515.149 ops/s
Iteration  25: 6496.372 ops/s
Iteration  26: 6481.426 ops/s
Iteration  27: 6493.438 ops/s
Iteration  28: 6500.437 ops/s
Iteration  29: 6498.846 ops/s
Iteration  30: 6506.817 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large":
  6496.309 ±(99.9%) 7.078 ops/s [Average]
  (min, avg, max) = (6472.311, 6496.309, 6515.149), stdev = 10.594
  CI (99.9%): [6489.231, 6503.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt     Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  6496.309 ± 7.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4671540.117 ops/s
# Warmup Iteration   2: 7874263.411 ops/s
# Warmup Iteration   3: 8918512.122 ops/s
# Warmup Iteration   4: 8905028.392 ops/s
# Warmup Iteration   5: 8918011.170 ops/s
# Warmup Iteration   6: 7336156.716 ops/s
# Warmup Iteration   7: 8917432.729 ops/s
# Warmup Iteration   8: 8903695.931 ops/s
# Warmup Iteration   9: 8920580.304 ops/s
# Warmup Iteration  10: 8899501.607 ops/s
# Warmup Iteration  11: 8899626.590 ops/s
# Warmup Iteration  12: 8931497.505 ops/s
# Warmup Iteration  13: 8900387.721 ops/s
# Warmup Iteration  14: 8899400.578 ops/s
# Warmup Iteration  15: 8902478.219 ops/s
# Warmup Iteration  16: 8920503.840 ops/s
# Warmup Iteration  17: 8918552.565 ops/s
# Warmup Iteration  18: 8905499.548 ops/s
# Warmup Iteration  19: 8905688.970 ops/s
# Warmup Iteration  20: 8902631.831 ops/s
# Warmup Iteration  21: 8889510.273 ops/s
# Warmup Iteration  22: 8894916.230 ops/s
# Warmup Iteration  23: 8911411.646 ops/s
# Warmup Iteration  24: 8915658.430 ops/s
# Warmup Iteration  25: 8894825.040 ops/s
# Warmup Iteration  26: 8900491.739 ops/s
# Warmup Iteration  27: 8905906.761 ops/s
# Warmup Iteration  28: 8927065.514 ops/s
# Warmup Iteration  29: 8917792.973 ops/s
# Warmup Iteration  30: 8923053.282 ops/s
Iteration   1: 8894415.371 ops/s
Iteration   2: 8914539.358 ops/s
Iteration   3: 8902876.546 ops/s
Iteration   4: 8898027.027 ops/s
Iteration   5: 8911049.583 ops/s
Iteration   6: 8909550.821 ops/s
Iteration   7: 8902925.044 ops/s
Iteration   8: 8883120.326 ops/s
Iteration   9: 8923457.866 ops/s
Iteration  10: 8903392.944 ops/s
Iteration  11: 8907405.521 ops/s
Iteration  12: 8932057.600 ops/s
Iteration  13: 8945884.803 ops/s
Iteration  14: 8919312.278 ops/s
Iteration  15: 8922094.711 ops/s
Iteration  16: 8869479.634 ops/s
Iteration  17: 8913629.676 ops/s
Iteration  18: 8916830.879 ops/s
Iteration  19: 8911305.017 ops/s
Iteration  20: 8937470.852 ops/s
Iteration  21: 8914759.862 ops/s
Iteration  22: 8919702.621 ops/s
Iteration  23: 8911485.091 ops/s
Iteration  24: 8924508.338 ops/s
Iteration  25: 8904338.738 ops/s
Iteration  26: 8915603.745 ops/s
Iteration  27: 8913990.435 ops/s
Iteration  28: 8890274.128 ops/s
Iteration  29: 8939407.685 ops/s
Iteration  30: 8902869.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small":
  8911858.875 ±(99.9%) 10771.760 ops/s [Average]
  (min, avg, max) = (8869479.634, 8911858.875, 8945884.803), stdev = 16122.665
  CI (99.9%): [8901087.114, 8922630.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  8911858.875 ± 10771.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2609572.148 ops/s
# Warmup Iteration   2: 5424846.108 ops/s
# Warmup Iteration   3: 4673324.897 ops/s
# Warmup Iteration   4: 5603447.639 ops/s
# Warmup Iteration   5: 5609125.726 ops/s
# Warmup Iteration   6: 5618437.385 ops/s
# Warmup Iteration   7: 5588212.612 ops/s
# Warmup Iteration   8: 5608196.988 ops/s
# Warmup Iteration   9: 5595052.404 ops/s
# Warmup Iteration  10: 5604458.057 ops/s
# Warmup Iteration  11: 5595598.245 ops/s
# Warmup Iteration  12: 5597109.037 ops/s
# Warmup Iteration  13: 5613495.856 ops/s
# Warmup Iteration  14: 5574357.021 ops/s
# Warmup Iteration  15: 5603107.312 ops/s
# Warmup Iteration  16: 5631802.612 ops/s
# Warmup Iteration  17: 5611468.797 ops/s
# Warmup Iteration  18: 5606859.089 ops/s
# Warmup Iteration  19: 5596960.510 ops/s
# Warmup Iteration  20: 5584025.241 ops/s
# Warmup Iteration  21: 5600728.785 ops/s
# Warmup Iteration  22: 5602336.413 ops/s
# Warmup Iteration  23: 5603801.508 ops/s
# Warmup Iteration  24: 5615485.238 ops/s
# Warmup Iteration  25: 5600086.929 ops/s
# Warmup Iteration  26: 5602664.583 ops/s
# Warmup Iteration  27: 5587159.184 ops/s
# Warmup Iteration  28: 5566407.244 ops/s
# Warmup Iteration  29: 5600078.938 ops/s
# Warmup Iteration  30: 5595525.972 ops/s
Iteration   1: 5544463.064 ops/s
Iteration   2: 5609438.716 ops/s
Iteration   3: 5598243.939 ops/s
Iteration   4: 5574997.930 ops/s
Iteration   5: 5609713.086 ops/s
Iteration   6: 5618441.695 ops/s
Iteration   7: 5602311.527 ops/s
Iteration   8: 5596969.796 ops/s
Iteration   9: 5600408.448 ops/s
Iteration  10: 5596968.054 ops/s
Iteration  11: 5582549.469 ops/s
Iteration  12: 5606125.329 ops/s
Iteration  13: 5601372.601 ops/s
Iteration  14: 5617127.993 ops/s
Iteration  15: 5609450.120 ops/s
Iteration  16: 5599312.294 ops/s
Iteration  17: 5596945.647 ops/s
Iteration  18: 5611045.021 ops/s
Iteration  19: 5614433.811 ops/s
Iteration  20: 5612225.951 ops/s
Iteration  21: 5640061.872 ops/s
Iteration  22: 5609968.192 ops/s
Iteration  23: 5628836.076 ops/s
Iteration  24: 5577326.551 ops/s
Iteration  25: 5613170.726 ops/s
Iteration  26: 5583946.461 ops/s
Iteration  27: 5634080.465 ops/s
Iteration  28: 5608242.377 ops/s
Iteration  29: 5615806.385 ops/s
Iteration  30: 5608469.076 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_null":
  5604081.756 ±(99.9%) 12411.768 ops/s [Average]
  (min, avg, max) = (5544463.064, 5604081.756, 5640061.872), stdev = 18577.351
  CI (99.9%): [5591669.988, 5616493.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  5604081.756 ± 12411.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 390202.993 ops/s
# Warmup Iteration   2: 934085.541 ops/s
# Warmup Iteration   3: 919782.634 ops/s
# Warmup Iteration   4: 772966.344 ops/s
# Warmup Iteration   5: 919781.899 ops/s
# Warmup Iteration   6: 913380.153 ops/s
# Warmup Iteration   7: 923310.948 ops/s
# Warmup Iteration   8: 933430.756 ops/s
# Warmup Iteration   9: 925343.559 ops/s
# Warmup Iteration  10: 922525.055 ops/s
# Warmup Iteration  11: 923740.794 ops/s
# Warmup Iteration  12: 932205.636 ops/s
# Warmup Iteration  13: 941048.606 ops/s
# Warmup Iteration  14: 930098.569 ops/s
# Warmup Iteration  15: 930831.906 ops/s
# Warmup Iteration  16: 936221.768 ops/s
# Warmup Iteration  17: 937004.523 ops/s
# Warmup Iteration  18: 923988.102 ops/s
# Warmup Iteration  19: 934049.509 ops/s
# Warmup Iteration  20: 926232.809 ops/s
# Warmup Iteration  21: 931149.449 ops/s
# Warmup Iteration  22: 933098.538 ops/s
# Warmup Iteration  23: 923467.708 ops/s
# Warmup Iteration  24: 933324.890 ops/s
# Warmup Iteration  25: 930642.889 ops/s
# Warmup Iteration  26: 937641.478 ops/s
# Warmup Iteration  27: 927876.052 ops/s
# Warmup Iteration  28: 928337.323 ops/s
# Warmup Iteration  29: 932601.414 ops/s
# Warmup Iteration  30: 939998.143 ops/s
Iteration   1: 921504.191 ops/s
Iteration   2: 929383.428 ops/s
Iteration   3: 942668.960 ops/s
Iteration   4: 931575.901 ops/s
Iteration   5: 933295.385 ops/s
Iteration   6: 938036.351 ops/s
Iteration   7: 931181.984 ops/s
Iteration   8: 937554.561 ops/s
Iteration   9: 918338.304 ops/s
Iteration  10: 924099.058 ops/s
Iteration  11: 932275.461 ops/s
Iteration  12: 939486.703 ops/s
Iteration  13: 924803.025 ops/s
Iteration  14: 916654.217 ops/s
Iteration  15: 919555.737 ops/s
Iteration  16: 924238.295 ops/s
Iteration  17: 936071.073 ops/s
Iteration  18: 928685.140 ops/s
Iteration  19: 920172.385 ops/s
Iteration  20: 927231.713 ops/s
Iteration  21: 922437.562 ops/s
Iteration  22: 940198.937 ops/s
Iteration  23: 944687.701 ops/s
Iteration  24: 941256.462 ops/s
Iteration  25: 927257.126 ops/s
Iteration  26: 934977.462 ops/s
Iteration  27: 926146.979 ops/s
Iteration  28: 933240.510 ops/s
Iteration  29: 917465.688 ops/s
Iteration  30: 932530.173 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subList":
  929900.349 ±(99.9%) 5336.518 ops/s [Average]
  (min, avg, max) = (916654.217, 929900.349, 944687.701), stdev = 7987.450
  CI (99.9%): [924563.831, 935236.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_subList  thrpt   30  929900.349 ± 5336.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705379.723 ops/s
# Warmup Iteration   2: 743558.621 ops/s
# Warmup Iteration   3: 976523.649 ops/s
# Warmup Iteration   4: 970656.912 ops/s
# Warmup Iteration   5: 965712.754 ops/s
# Warmup Iteration   6: 976077.955 ops/s
# Warmup Iteration   7: 973102.047 ops/s
# Warmup Iteration   8: 973833.734 ops/s
# Warmup Iteration   9: 973642.541 ops/s
# Warmup Iteration  10: 972137.962 ops/s
# Warmup Iteration  11: 915695.822 ops/s
# Warmup Iteration  12: 880034.284 ops/s
# Warmup Iteration  13: 975876.020 ops/s
# Warmup Iteration  14: 975607.659 ops/s
# Warmup Iteration  15: 977363.317 ops/s
# Warmup Iteration  16: 974615.535 ops/s
# Warmup Iteration  17: 1033574.737 ops/s
# Warmup Iteration  18: 1031683.613 ops/s
# Warmup Iteration  19: 1030869.845 ops/s
# Warmup Iteration  20: 1030189.490 ops/s
# Warmup Iteration  21: 1030120.497 ops/s
# Warmup Iteration  22: 1034825.907 ops/s
# Warmup Iteration  23: 1029677.289 ops/s
# Warmup Iteration  24: 1031882.349 ops/s
# Warmup Iteration  25: 1027700.009 ops/s
# Warmup Iteration  26: 1030907.137 ops/s
# Warmup Iteration  27: 1029880.502 ops/s
# Warmup Iteration  28: 1030649.994 ops/s
# Warmup Iteration  29: 1027782.643 ops/s
# Warmup Iteration  30: 1031583.937 ops/s
Iteration   1: 1029169.845 ops/s
Iteration   2: 1029488.666 ops/s
Iteration   3: 1033332.432 ops/s
Iteration   4: 1028643.234 ops/s
Iteration   5: 1029444.893 ops/s
Iteration   6: 1028842.971 ops/s
Iteration   7: 1029800.982 ops/s
Iteration   8: 1030126.854 ops/s
Iteration   9: 1030794.412 ops/s
Iteration  10: 1031047.704 ops/s
Iteration  11: 1031330.768 ops/s
Iteration  12: 1029602.025 ops/s
Iteration  13: 1029045.662 ops/s
Iteration  14: 1030142.553 ops/s
Iteration  15: 1030084.743 ops/s
Iteration  16: 1031884.159 ops/s
Iteration  17: 1031016.278 ops/s
Iteration  18: 1028994.868 ops/s
Iteration  19: 1026738.774 ops/s
Iteration  20: 1029327.711 ops/s
Iteration  21: 1034609.314 ops/s
Iteration  22: 1034480.102 ops/s
Iteration  23: 1030315.014 ops/s
Iteration  24: 1035114.854 ops/s
Iteration  25: 1030190.579 ops/s
Iteration  26: 1031631.009 ops/s
Iteration  27: 1031679.244 ops/s
Iteration  28: 1026084.239 ops/s
Iteration  29: 1032771.097 ops/s
Iteration  30: 1031796.746 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException":
  1030584.391 ±(99.9%) 1392.442 ops/s [Average]
  (min, avg, max) = (1026084.239, 1030584.391, 1035114.854), stdev = 2084.141
  CI (99.9%): [1029191.950, 1031976.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  1030584.391 ± 1392.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719634.185 ops/s
# Warmup Iteration   2: 746725.153 ops/s
# Warmup Iteration   3: 977044.456 ops/s
# Warmup Iteration   4: 971935.886 ops/s
# Warmup Iteration   5: 967407.085 ops/s
# Warmup Iteration   6: 975043.009 ops/s
# Warmup Iteration   7: 971982.035 ops/s
# Warmup Iteration   8: 973138.131 ops/s
# Warmup Iteration   9: 972266.165 ops/s
# Warmup Iteration  10: 970629.645 ops/s
# Warmup Iteration  11: 972578.705 ops/s
# Warmup Iteration  12: 822437.392 ops/s
# Warmup Iteration  13: 974664.984 ops/s
# Warmup Iteration  14: 970994.233 ops/s
# Warmup Iteration  15: 972632.402 ops/s
# Warmup Iteration  16: 973943.488 ops/s
# Warmup Iteration  17: 1032883.683 ops/s
# Warmup Iteration  18: 1032435.701 ops/s
# Warmup Iteration  19: 1034081.225 ops/s
# Warmup Iteration  20: 1033214.994 ops/s
# Warmup Iteration  21: 1035674.940 ops/s
# Warmup Iteration  22: 1034490.482 ops/s
# Warmup Iteration  23: 1032918.367 ops/s
# Warmup Iteration  24: 1030714.736 ops/s
# Warmup Iteration  25: 1034385.456 ops/s
# Warmup Iteration  26: 1034923.729 ops/s
# Warmup Iteration  27: 1036874.431 ops/s
# Warmup Iteration  28: 1031270.527 ops/s
# Warmup Iteration  29: 1033120.171 ops/s
# Warmup Iteration  30: 1032290.077 ops/s
Iteration   1: 1035873.357 ops/s
Iteration   2: 1031404.553 ops/s
Iteration   3: 1033165.963 ops/s
Iteration   4: 1036058.772 ops/s
Iteration   5: 1038492.091 ops/s
Iteration   6: 1034618.794 ops/s
Iteration   7: 1031483.240 ops/s
Iteration   8: 1034799.499 ops/s
Iteration   9: 1031827.885 ops/s
Iteration  10: 1029172.672 ops/s
Iteration  11: 1035356.203 ops/s
Iteration  12: 1034252.491 ops/s
Iteration  13: 1035242.185 ops/s
Iteration  14: 1032864.020 ops/s
Iteration  15: 1033905.549 ops/s
Iteration  16: 1031773.655 ops/s
Iteration  17: 1035499.230 ops/s
Iteration  18: 1032059.178 ops/s
Iteration  19: 1033033.199 ops/s
Iteration  20: 1032994.313 ops/s
Iteration  21: 1033880.059 ops/s
Iteration  22: 1030649.689 ops/s
Iteration  23: 1033538.548 ops/s
Iteration  24: 1029374.260 ops/s
Iteration  25: 1029149.666 ops/s
Iteration  26: 1031655.059 ops/s
Iteration  27: 1030930.201 ops/s
Iteration  28: 1036388.838 ops/s
Iteration  29: 1035399.754 ops/s
Iteration  30: 1030110.659 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  1033165.119 ±(99.9%) 1577.039 ops/s [Average]
  (min, avg, max) = (1029149.666, 1033165.119, 1038492.091), stdev = 2360.439
  CI (99.9%): [1031588.080, 1034742.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  1033165.119 ± 1577.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722465.484 ops/s
# Warmup Iteration   2: 751510.925 ops/s
# Warmup Iteration   3: 985768.207 ops/s
# Warmup Iteration   4: 979936.824 ops/s
# Warmup Iteration   5: 980766.424 ops/s
# Warmup Iteration   6: 980073.896 ops/s
# Warmup Iteration   7: 981705.933 ops/s
# Warmup Iteration   8: 979992.038 ops/s
# Warmup Iteration   9: 980468.239 ops/s
# Warmup Iteration  10: 982082.083 ops/s
# Warmup Iteration  11: 983027.150 ops/s
# Warmup Iteration  12: 824180.646 ops/s
# Warmup Iteration  13: 978345.142 ops/s
# Warmup Iteration  14: 982426.278 ops/s
# Warmup Iteration  15: 979734.916 ops/s
# Warmup Iteration  16: 979567.816 ops/s
# Warmup Iteration  17: 1038145.886 ops/s
# Warmup Iteration  18: 1034833.670 ops/s
# Warmup Iteration  19: 1036365.380 ops/s
# Warmup Iteration  20: 1038571.999 ops/s
# Warmup Iteration  21: 1038762.526 ops/s
# Warmup Iteration  22: 1033792.985 ops/s
# Warmup Iteration  23: 1036119.986 ops/s
# Warmup Iteration  24: 1035404.081 ops/s
# Warmup Iteration  25: 1032199.758 ops/s
# Warmup Iteration  26: 1035607.742 ops/s
# Warmup Iteration  27: 1036389.890 ops/s
# Warmup Iteration  28: 1038281.514 ops/s
# Warmup Iteration  29: 1037531.636 ops/s
# Warmup Iteration  30: 1038380.945 ops/s
Iteration   1: 1035636.665 ops/s
Iteration   2: 1037440.113 ops/s
Iteration   3: 1036352.466 ops/s
Iteration   4: 1038215.576 ops/s
Iteration   5: 1035130.270 ops/s
Iteration   6: 1038390.602 ops/s
Iteration   7: 1029431.694 ops/s
Iteration   8: 1039396.592 ops/s
Iteration   9: 1037946.928 ops/s
Iteration  10: 1035761.873 ops/s
Iteration  11: 1037003.376 ops/s
Iteration  12: 1035458.202 ops/s
Iteration  13: 1035307.647 ops/s
Iteration  14: 1039100.762 ops/s
Iteration  15: 1035299.025 ops/s
Iteration  16: 1037786.644 ops/s
Iteration  17: 1037774.428 ops/s
Iteration  18: 1037921.081 ops/s
Iteration  19: 1038474.048 ops/s
Iteration  20: 1037855.114 ops/s
Iteration  21: 1035510.174 ops/s
Iteration  22: 1033387.861 ops/s
Iteration  23: 1040837.804 ops/s
Iteration  24: 1038516.514 ops/s
Iteration  25: 1036122.295 ops/s
Iteration  26: 1036811.779 ops/s
Iteration  27: 1035829.723 ops/s
Iteration  28: 1036351.845 ops/s
Iteration  29: 1038691.801 ops/s
Iteration  30: 1033201.110 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  1036698.134 ±(99.9%) 1477.376 ops/s [Average]
  (min, avg, max) = (1029431.694, 1036698.134, 1040837.804), stdev = 2211.267
  CI (99.9%): [1035220.757, 1038175.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  1036698.134 ± 1477.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1495226.884 ops/s
# Warmup Iteration   2: 2356677.991 ops/s
# Warmup Iteration   3: 2794387.319 ops/s
# Warmup Iteration   4: 2817132.582 ops/s
# Warmup Iteration   5: 2813808.069 ops/s
# Warmup Iteration   6: 2747822.775 ops/s
# Warmup Iteration   7: 2370888.650 ops/s
# Warmup Iteration   8: 2813322.613 ops/s
# Warmup Iteration   9: 2815221.155 ops/s
# Warmup Iteration  10: 2811159.533 ops/s
# Warmup Iteration  11: 2806067.479 ops/s
# Warmup Iteration  12: 2818662.285 ops/s
# Warmup Iteration  13: 2810752.188 ops/s
# Warmup Iteration  14: 2813771.970 ops/s
# Warmup Iteration  15: 2810286.221 ops/s
# Warmup Iteration  16: 2808309.406 ops/s
# Warmup Iteration  17: 2812728.055 ops/s
# Warmup Iteration  18: 2821336.644 ops/s
# Warmup Iteration  19: 2813141.572 ops/s
# Warmup Iteration  20: 2819774.942 ops/s
# Warmup Iteration  21: 2811492.774 ops/s
# Warmup Iteration  22: 2812565.889 ops/s
# Warmup Iteration  23: 2815184.672 ops/s
# Warmup Iteration  24: 2818100.599 ops/s
# Warmup Iteration  25: 2814244.798 ops/s
# Warmup Iteration  26: 2809703.212 ops/s
# Warmup Iteration  27: 2813876.878 ops/s
# Warmup Iteration  28: 2819677.917 ops/s
# Warmup Iteration  29: 2813345.675 ops/s
# Warmup Iteration  30: 2814697.443 ops/s
Iteration   1: 2812408.112 ops/s
Iteration   2: 2814174.089 ops/s
Iteration   3: 2814946.125 ops/s
Iteration   4: 2812195.409 ops/s
Iteration   5: 2814338.172 ops/s
Iteration   6: 2809815.266 ops/s
Iteration   7: 2803355.627 ops/s
Iteration   8: 2814345.220 ops/s
Iteration   9: 2823722.655 ops/s
Iteration  10: 2811590.788 ops/s
Iteration  11: 2817369.442 ops/s
Iteration  12: 2806095.447 ops/s
Iteration  13: 2806876.170 ops/s
Iteration  14: 2809626.433 ops/s
Iteration  15: 2806092.543 ops/s
Iteration  16: 2821699.383 ops/s
Iteration  17: 2808749.288 ops/s
Iteration  18: 2816650.845 ops/s
Iteration  19: 2813724.067 ops/s
Iteration  20: 2819827.920 ops/s
Iteration  21: 2815530.798 ops/s
Iteration  22: 2819408.518 ops/s
Iteration  23: 2816416.003 ops/s
Iteration  24: 2818183.152 ops/s
Iteration  25: 2811838.239 ops/s
Iteration  26: 2825211.003 ops/s
Iteration  27: 2815947.755 ops/s
Iteration  28: 2816036.119 ops/s
Iteration  29: 2813644.843 ops/s
Iteration  30: 2818197.033 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDouble":
  2814267.215 ±(99.9%) 3467.372 ops/s [Average]
  (min, avg, max) = (2803355.627, 2814267.215, 2825211.003), stdev = 5189.800
  CI (99.9%): [2810799.843, 2817734.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByDouble  thrpt   30  2814267.215 ± 3467.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.566 ops/s
# Warmup Iteration   2: 69.710 ops/s
# Warmup Iteration   3: 97.099 ops/s
# Warmup Iteration   4: 98.767 ops/s
# Warmup Iteration   5: 98.073 ops/s
# Warmup Iteration   6: 97.691 ops/s
# Warmup Iteration   7: 97.900 ops/s
# Warmup Iteration   8: 97.850 ops/s
# Warmup Iteration   9: 97.856 ops/s
# Warmup Iteration  10: 86.092 ops/s
# Warmup Iteration  11: 93.270 ops/s
# Warmup Iteration  12: 97.136 ops/s
# Warmup Iteration  13: 99.053 ops/s
# Warmup Iteration  14: 98.796 ops/s
# Warmup Iteration  15: 98.056 ops/s
# Warmup Iteration  16: 97.409 ops/s
# Warmup Iteration  17: 95.271 ops/s
# Warmup Iteration  18: 97.315 ops/s
# Warmup Iteration  19: 97.763 ops/s
# Warmup Iteration  20: 97.519 ops/s
# Warmup Iteration  21: 98.369 ops/s
# Warmup Iteration  22: 95.991 ops/s
# Warmup Iteration  23: 98.379 ops/s
# Warmup Iteration  24: 98.435 ops/s
# Warmup Iteration  25: 97.135 ops/s
# Warmup Iteration  26: 97.565 ops/s
# Warmup Iteration  27: 96.871 ops/s
# Warmup Iteration  28: 97.465 ops/s
# Warmup Iteration  29: 97.034 ops/s
# Warmup Iteration  30: 96.803 ops/s
Iteration   1: 96.761 ops/s
Iteration   2: 94.451 ops/s
Iteration   3: 97.685 ops/s
Iteration   4: 95.441 ops/s
Iteration   5: 96.075 ops/s
Iteration   6: 96.139 ops/s
Iteration   7: 98.107 ops/s
Iteration   8: 95.197 ops/s
Iteration   9: 94.973 ops/s
Iteration  10: 97.941 ops/s
Iteration  11: 97.479 ops/s
Iteration  12: 96.843 ops/s
Iteration  13: 95.377 ops/s
Iteration  14: 96.984 ops/s
Iteration  15: 92.483 ops/s
Iteration  16: 94.502 ops/s
Iteration  17: 97.950 ops/s
Iteration  18: 95.969 ops/s
Iteration  19: 96.371 ops/s
Iteration  20: 96.940 ops/s
Iteration  21: 97.700 ops/s
Iteration  22: 96.063 ops/s
Iteration  23: 95.456 ops/s
Iteration  24: 97.790 ops/s
Iteration  25: 96.769 ops/s
Iteration  26: 95.644 ops/s
Iteration  27: 96.474 ops/s
Iteration  28: 97.338 ops/s
Iteration  29: 95.468 ops/s
Iteration  30: 94.555 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  96.231 ±(99.9%) 0.874 ops/s [Average]
  (min, avg, max) = (92.483, 96.231, 98.107), stdev = 1.309
  CI (99.9%): [95.357, 97.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  96.231 ± 0.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1348182.942 ops/s
# Warmup Iteration   2: 2303257.988 ops/s
# Warmup Iteration   3: 2813953.287 ops/s
# Warmup Iteration   4: 2837148.374 ops/s
# Warmup Iteration   5: 2834859.263 ops/s
# Warmup Iteration   6: 2802610.615 ops/s
# Warmup Iteration   7: 2356123.683 ops/s
# Warmup Iteration   8: 2837230.998 ops/s
# Warmup Iteration   9: 2838158.493 ops/s
# Warmup Iteration  10: 2833219.865 ops/s
# Warmup Iteration  11: 2825480.876 ops/s
# Warmup Iteration  12: 2832393.236 ops/s
# Warmup Iteration  13: 2839517.619 ops/s
# Warmup Iteration  14: 2839580.705 ops/s
# Warmup Iteration  15: 2840885.641 ops/s
# Warmup Iteration  16: 2832611.937 ops/s
# Warmup Iteration  17: 2836564.967 ops/s
# Warmup Iteration  18: 2837858.880 ops/s
# Warmup Iteration  19: 2836582.217 ops/s
# Warmup Iteration  20: 2838177.511 ops/s
# Warmup Iteration  21: 2838457.532 ops/s
# Warmup Iteration  22: 2837037.347 ops/s
# Warmup Iteration  23: 2840214.429 ops/s
# Warmup Iteration  24: 2836789.337 ops/s
# Warmup Iteration  25: 2828998.981 ops/s
# Warmup Iteration  26: 2835701.197 ops/s
# Warmup Iteration  27: 2837895.458 ops/s
# Warmup Iteration  28: 2836454.143 ops/s
# Warmup Iteration  29: 2837615.486 ops/s
# Warmup Iteration  30: 2838697.148 ops/s
Iteration   1: 2843181.527 ops/s
Iteration   2: 2830627.839 ops/s
Iteration   3: 2840831.875 ops/s
Iteration   4: 2839176.876 ops/s
Iteration   5: 2836058.036 ops/s
Iteration   6: 2826461.353 ops/s
Iteration   7: 2840158.861 ops/s
Iteration   8: 2839215.151 ops/s
Iteration   9: 2844211.080 ops/s
Iteration  10: 2840682.869 ops/s
Iteration  11: 2841224.084 ops/s
Iteration  12: 2838342.773 ops/s
Iteration  13: 2838955.819 ops/s
Iteration  14: 2838144.951 ops/s
Iteration  15: 2848184.200 ops/s
Iteration  16: 2837456.823 ops/s
Iteration  17: 2839588.254 ops/s
Iteration  18: 2834992.835 ops/s
Iteration  19: 2842193.787 ops/s
Iteration  20: 2839829.594 ops/s
Iteration  21: 2834799.051 ops/s
Iteration  22: 2839303.999 ops/s
Iteration  23: 2843286.335 ops/s
Iteration  24: 2836647.081 ops/s
Iteration  25: 2849029.484 ops/s
Iteration  26: 2830832.837 ops/s
Iteration  27: 2838454.702 ops/s
Iteration  28: 2832438.334 ops/s
Iteration  29: 2841859.845 ops/s
Iteration  30: 2844504.995 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloat":
  2839022.508 ±(99.9%) 3280.383 ops/s [Average]
  (min, avg, max) = (2826461.353, 2839022.508, 2849029.484), stdev = 4909.923
  CI (99.9%): [2835742.126, 2842302.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByFloat  thrpt   30  2839022.508 ± 3280.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.407 ops/s
# Warmup Iteration   2: 67.654 ops/s
# Warmup Iteration   3: 97.981 ops/s
# Warmup Iteration   4: 97.342 ops/s
# Warmup Iteration   5: 97.311 ops/s
# Warmup Iteration   6: 97.338 ops/s
# Warmup Iteration   7: 97.790 ops/s
# Warmup Iteration   8: 97.484 ops/s
# Warmup Iteration   9: 96.213 ops/s
# Warmup Iteration  10: 89.477 ops/s
# Warmup Iteration  11: 88.608 ops/s
# Warmup Iteration  12: 97.708 ops/s
# Warmup Iteration  13: 98.442 ops/s
# Warmup Iteration  14: 97.727 ops/s
# Warmup Iteration  15: 96.458 ops/s
# Warmup Iteration  16: 94.742 ops/s
# Warmup Iteration  17: 96.850 ops/s
# Warmup Iteration  18: 98.480 ops/s
# Warmup Iteration  19: 97.228 ops/s
# Warmup Iteration  20: 97.338 ops/s
# Warmup Iteration  21: 96.172 ops/s
# Warmup Iteration  22: 96.120 ops/s
# Warmup Iteration  23: 96.994 ops/s
# Warmup Iteration  24: 96.135 ops/s
# Warmup Iteration  25: 97.732 ops/s
# Warmup Iteration  26: 95.756 ops/s
# Warmup Iteration  27: 98.582 ops/s
# Warmup Iteration  28: 97.770 ops/s
# Warmup Iteration  29: 96.417 ops/s
# Warmup Iteration  30: 95.749 ops/s
Iteration   1: 95.344 ops/s
Iteration   2: 94.927 ops/s
Iteration   3: 95.715 ops/s
Iteration   4: 95.688 ops/s
Iteration   5: 93.405 ops/s
Iteration   6: 95.376 ops/s
Iteration   7: 95.270 ops/s
Iteration   8: 96.152 ops/s
Iteration   9: 95.706 ops/s
Iteration  10: 95.382 ops/s
Iteration  11: 94.330 ops/s
Iteration  12: 95.560 ops/s
Iteration  13: 93.579 ops/s
Iteration  14: 96.065 ops/s
Iteration  15: 96.828 ops/s
Iteration  16: 95.208 ops/s
Iteration  17: 94.159 ops/s
Iteration  18: 96.932 ops/s
Iteration  19: 95.491 ops/s
Iteration  20: 94.633 ops/s
Iteration  21: 96.574 ops/s
Iteration  22: 95.470 ops/s
Iteration  23: 95.301 ops/s
Iteration  24: 96.527 ops/s
Iteration  25: 95.846 ops/s
Iteration  26: 94.554 ops/s
Iteration  27: 95.412 ops/s
Iteration  28: 95.859 ops/s
Iteration  29: 96.501 ops/s
Iteration  30: 94.832 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  95.421 ±(99.9%) 0.580 ops/s [Average]
  (min, avg, max) = (93.405, 95.421, 96.932), stdev = 0.868
  CI (99.9%): [94.841, 96.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt   Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  95.421 ± 0.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2410315.472 ops/s
# Warmup Iteration   2: 4003341.256 ops/s
# Warmup Iteration   3: 4549626.423 ops/s
# Warmup Iteration   4: 4575777.737 ops/s
# Warmup Iteration   5: 4567975.716 ops/s
# Warmup Iteration   6: 3755174.734 ops/s
# Warmup Iteration   7: 4571374.065 ops/s
# Warmup Iteration   8: 4571057.083 ops/s
# Warmup Iteration   9: 4566096.463 ops/s
# Warmup Iteration  10: 4576079.159 ops/s
# Warmup Iteration  11: 4570731.288 ops/s
# Warmup Iteration  12: 4569315.159 ops/s
# Warmup Iteration  13: 4573260.981 ops/s
# Warmup Iteration  14: 4575801.395 ops/s
# Warmup Iteration  15: 4570282.494 ops/s
# Warmup Iteration  16: 4579033.243 ops/s
# Warmup Iteration  17: 4565244.696 ops/s
# Warmup Iteration  18: 4577351.219 ops/s
# Warmup Iteration  19: 4566521.587 ops/s
# Warmup Iteration  20: 4577625.928 ops/s
# Warmup Iteration  21: 4562334.964 ops/s
# Warmup Iteration  22: 4579958.500 ops/s
# Warmup Iteration  23: 4573244.007 ops/s
# Warmup Iteration  24: 4568836.831 ops/s
# Warmup Iteration  25: 4564667.765 ops/s
# Warmup Iteration  26: 4569608.968 ops/s
# Warmup Iteration  27: 4572773.936 ops/s
# Warmup Iteration  28: 4578741.473 ops/s
# Warmup Iteration  29: 4576878.878 ops/s
# Warmup Iteration  30: 4565981.645 ops/s
Iteration   1: 4586456.063 ops/s
Iteration   2: 4579730.209 ops/s
Iteration   3: 4571197.274 ops/s
Iteration   4: 4578534.836 ops/s
Iteration   5: 4574115.156 ops/s
Iteration   6: 4574424.605 ops/s
Iteration   7: 4580352.102 ops/s
Iteration   8: 4572702.987 ops/s
Iteration   9: 4588649.559 ops/s
Iteration  10: 4571031.532 ops/s
Iteration  11: 4581317.488 ops/s
Iteration  12: 4578490.070 ops/s
Iteration  13: 4556117.904 ops/s
Iteration  14: 4580751.254 ops/s
Iteration  15: 4571386.579 ops/s
Iteration  16: 4571317.754 ops/s
Iteration  17: 4569605.771 ops/s
Iteration  18: 4566856.667 ops/s
Iteration  19: 4560768.224 ops/s
Iteration  20: 4579277.426 ops/s
Iteration  21: 4559847.680 ops/s
Iteration  22: 4580831.409 ops/s
Iteration  23: 4569271.775 ops/s
Iteration  24: 4567741.144 ops/s
Iteration  25: 4571023.225 ops/s
Iteration  26: 4564880.240 ops/s
Iteration  27: 4584731.788 ops/s
Iteration  28: 4560690.109 ops/s
Iteration  29: 4574161.751 ops/s
Iteration  30: 4559658.334 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByInt":
  4572864.031 ±(99.9%) 5642.237 ops/s [Average]
  (min, avg, max) = (4556117.904, 4572864.031, 4588649.559), stdev = 8445.036
  CI (99.9%): [4567221.793, 4578506.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByInt  thrpt   30  4572864.031 ± 5642.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2416879.864 ops/s
# Warmup Iteration   2: 4045131.051 ops/s
# Warmup Iteration   3: 4578347.872 ops/s
# Warmup Iteration   4: 4592642.686 ops/s
# Warmup Iteration   5: 4593907.655 ops/s
# Warmup Iteration   6: 3784024.894 ops/s
# Warmup Iteration   7: 4585970.193 ops/s
# Warmup Iteration   8: 4604288.064 ops/s
# Warmup Iteration   9: 4601461.875 ops/s
# Warmup Iteration  10: 4598111.291 ops/s
# Warmup Iteration  11: 4584068.305 ops/s
# Warmup Iteration  12: 4596812.380 ops/s
# Warmup Iteration  13: 4591642.954 ops/s
# Warmup Iteration  14: 4592165.812 ops/s
# Warmup Iteration  15: 4595587.673 ops/s
# Warmup Iteration  16: 4586416.891 ops/s
# Warmup Iteration  17: 4598657.774 ops/s
# Warmup Iteration  18: 4603011.526 ops/s
# Warmup Iteration  19: 4602139.837 ops/s
# Warmup Iteration  20: 4610481.865 ops/s
# Warmup Iteration  21: 4597216.222 ops/s
# Warmup Iteration  22: 4597385.863 ops/s
# Warmup Iteration  23: 4592422.862 ops/s
# Warmup Iteration  24: 4592793.612 ops/s
# Warmup Iteration  25: 4592577.235 ops/s
# Warmup Iteration  26: 4596103.148 ops/s
# Warmup Iteration  27: 4600884.740 ops/s
# Warmup Iteration  28: 4600777.968 ops/s
# Warmup Iteration  29: 4607142.826 ops/s
# Warmup Iteration  30: 4603475.521 ops/s
Iteration   1: 4617382.665 ops/s
Iteration   2: 4588215.595 ops/s
Iteration   3: 4614813.068 ops/s
Iteration   4: 4592600.503 ops/s
Iteration   5: 4619892.361 ops/s
Iteration   6: 4599000.367 ops/s
Iteration   7: 4601688.504 ops/s
Iteration   8: 4606660.322 ops/s
Iteration   9: 4594199.748 ops/s
Iteration  10: 4589772.992 ops/s
Iteration  11: 4603075.137 ops/s
Iteration  12: 4611843.351 ops/s
Iteration  13: 4595166.687 ops/s
Iteration  14: 4600066.364 ops/s
Iteration  15: 4595213.300 ops/s
Iteration  16: 4607407.612 ops/s
Iteration  17: 4600931.985 ops/s
Iteration  18: 4604270.790 ops/s
Iteration  19: 4599296.053 ops/s
Iteration  20: 4598755.079 ops/s
Iteration  21: 4599568.099 ops/s
Iteration  22: 4597998.758 ops/s
Iteration  23: 4603946.480 ops/s
Iteration  24: 4590506.824 ops/s
Iteration  25: 4601975.928 ops/s
Iteration  26: 4604424.670 ops/s
Iteration  27: 4605589.390 ops/s
Iteration  28: 4609513.305 ops/s
Iteration  29: 4589786.397 ops/s
Iteration  30: 4596638.792 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumByLong":
  4601340.038 ±(99.9%) 5388.273 ops/s [Average]
  (min, avg, max) = (4588215.595, 4601340.038, 4619892.361), stdev = 8064.914
  CI (99.9%): [4595951.764, 4606728.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumByLong  thrpt   30  4601340.038 ± 5388.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6601623.891 ops/s
# Warmup Iteration   2: 11118456.432 ops/s
# Warmup Iteration   3: 12368937.729 ops/s
# Warmup Iteration   4: 12324373.893 ops/s
# Warmup Iteration   5: 12423718.332 ops/s
# Warmup Iteration   6: 10226274.734 ops/s
# Warmup Iteration   7: 12405025.036 ops/s
# Warmup Iteration   8: 12393648.815 ops/s
# Warmup Iteration   9: 12415027.690 ops/s
# Warmup Iteration  10: 12403869.781 ops/s
# Warmup Iteration  11: 12388096.296 ops/s
# Warmup Iteration  12: 12409171.368 ops/s
# Warmup Iteration  13: 12406130.979 ops/s
# Warmup Iteration  14: 12438055.425 ops/s
# Warmup Iteration  15: 12425325.815 ops/s
# Warmup Iteration  16: 12423579.311 ops/s
# Warmup Iteration  17: 12396782.975 ops/s
# Warmup Iteration  18: 12392962.181 ops/s
# Warmup Iteration  19: 12425598.976 ops/s
# Warmup Iteration  20: 12416161.738 ops/s
# Warmup Iteration  21: 12404280.358 ops/s
# Warmup Iteration  22: 12408641.102 ops/s
# Warmup Iteration  23: 12414578.238 ops/s
# Warmup Iteration  24: 12438550.408 ops/s
# Warmup Iteration  25: 12430314.069 ops/s
# Warmup Iteration  26: 12428863.378 ops/s
# Warmup Iteration  27: 12423593.719 ops/s
# Warmup Iteration  28: 12410994.074 ops/s
# Warmup Iteration  29: 12436367.244 ops/s
# Warmup Iteration  30: 12418276.217 ops/s
Iteration   1: 12438366.060 ops/s
Iteration   2: 12434630.723 ops/s
Iteration   3: 12428146.396 ops/s
Iteration   4: 12377886.421 ops/s
Iteration   5: 12445677.523 ops/s
Iteration   6: 12368255.011 ops/s
Iteration   7: 12393130.676 ops/s
Iteration   8: 12460393.967 ops/s
Iteration   9: 12426436.491 ops/s
Iteration  10: 12437322.222 ops/s
Iteration  11: 12413541.393 ops/s
Iteration  12: 12438797.983 ops/s
Iteration  13: 12418942.195 ops/s
Iteration  14: 12420034.348 ops/s
Iteration  15: 12408028.554 ops/s
Iteration  16: 12396832.588 ops/s
Iteration  17: 12440796.827 ops/s
Iteration  18: 12370837.543 ops/s
Iteration  19: 12437901.915 ops/s
Iteration  20: 12400669.321 ops/s
Iteration  21: 12438436.832 ops/s
Iteration  22: 12428240.322 ops/s
Iteration  23: 12423799.114 ops/s
Iteration  24: 12386122.833 ops/s
Iteration  25: 12372619.310 ops/s
Iteration  26: 12400982.511 ops/s
Iteration  27: 12416660.216 ops/s
Iteration  28: 12420151.380 ops/s
Iteration  29: 12434506.207 ops/s
Iteration  30: 12450083.304 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDouble":
  12417607.673 ±(99.9%) 16725.644 ops/s [Average]
  (min, avg, max) = (12368255.011, 12417607.673, 12460393.967), stdev = 25034.159
  CI (99.9%): [12400882.029, 12434333.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumDouble  thrpt   30  12417607.673 ± 16725.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149.534 ops/s
# Warmup Iteration   2: 177.814 ops/s
# Warmup Iteration   3: 229.637 ops/s
# Warmup Iteration   4: 229.241 ops/s
# Warmup Iteration   5: 228.734 ops/s
# Warmup Iteration   6: 228.981 ops/s
# Warmup Iteration   7: 229.442 ops/s
# Warmup Iteration   8: 229.746 ops/s
# Warmup Iteration   9: 229.330 ops/s
# Warmup Iteration  10: 194.260 ops/s
# Warmup Iteration  11: 229.802 ops/s
# Warmup Iteration  12: 229.332 ops/s
# Warmup Iteration  13: 222.413 ops/s
# Warmup Iteration  14: 216.526 ops/s
# Warmup Iteration  15: 217.155 ops/s
# Warmup Iteration  16: 217.179 ops/s
# Warmup Iteration  17: 216.593 ops/s
# Warmup Iteration  18: 217.415 ops/s
# Warmup Iteration  19: 216.999 ops/s
# Warmup Iteration  20: 217.652 ops/s
# Warmup Iteration  21: 217.670 ops/s
# Warmup Iteration  22: 217.132 ops/s
# Warmup Iteration  23: 217.415 ops/s
# Warmup Iteration  24: 216.832 ops/s
# Warmup Iteration  25: 217.834 ops/s
# Warmup Iteration  26: 217.541 ops/s
# Warmup Iteration  27: 217.532 ops/s
# Warmup Iteration  28: 217.166 ops/s
# Warmup Iteration  29: 217.001 ops/s
# Warmup Iteration  30: 216.951 ops/s
Iteration   1: 216.722 ops/s
Iteration   2: 217.100 ops/s
Iteration   3: 216.647 ops/s
Iteration   4: 216.851 ops/s
Iteration   5: 218.378 ops/s
Iteration   6: 216.966 ops/s
Iteration   7: 217.739 ops/s
Iteration   8: 217.572 ops/s
Iteration   9: 217.182 ops/s
Iteration  10: 217.309 ops/s
Iteration  11: 217.671 ops/s
Iteration  12: 217.431 ops/s
Iteration  13: 217.562 ops/s
Iteration  14: 217.766 ops/s
Iteration  15: 217.561 ops/s
Iteration  16: 217.546 ops/s
Iteration  17: 217.552 ops/s
Iteration  18: 218.155 ops/s
Iteration  19: 217.242 ops/s
Iteration  20: 216.197 ops/s
Iteration  21: 216.970 ops/s
Iteration  22: 217.568 ops/s
Iteration  23: 217.534 ops/s
Iteration  24: 217.405 ops/s
Iteration  25: 216.687 ops/s
Iteration  26: 217.582 ops/s
Iteration  27: 216.938 ops/s
Iteration  28: 217.425 ops/s
Iteration  29: 216.866 ops/s
Iteration  30: 218.082 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  217.340 ±(99.9%) 0.322 ops/s [Average]
  (min, avg, max) = (216.197, 217.340, 218.378), stdev = 0.482
  CI (99.9%): [217.018, 217.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  217.340 ± 0.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173.068 ops/s
# Warmup Iteration   2: 232.639 ops/s
# Warmup Iteration   3: 285.497 ops/s
# Warmup Iteration   4: 283.162 ops/s
# Warmup Iteration   5: 285.452 ops/s
# Warmup Iteration   6: 284.409 ops/s
# Warmup Iteration   7: 284.736 ops/s
# Warmup Iteration   8: 251.934 ops/s
# Warmup Iteration   9: 274.775 ops/s
# Warmup Iteration  10: 285.552 ops/s
# Warmup Iteration  11: 257.115 ops/s
# Warmup Iteration  12: 254.550 ops/s
# Warmup Iteration  13: 253.419 ops/s
# Warmup Iteration  14: 252.945 ops/s
# Warmup Iteration  15: 253.824 ops/s
# Warmup Iteration  16: 252.922 ops/s
# Warmup Iteration  17: 253.979 ops/s
# Warmup Iteration  18: 252.908 ops/s
# Warmup Iteration  19: 253.209 ops/s
# Warmup Iteration  20: 253.051 ops/s
# Warmup Iteration  21: 253.415 ops/s
# Warmup Iteration  22: 253.032 ops/s
# Warmup Iteration  23: 252.620 ops/s
# Warmup Iteration  24: 253.203 ops/s
# Warmup Iteration  25: 253.025 ops/s
# Warmup Iteration  26: 252.677 ops/s
# Warmup Iteration  27: 253.958 ops/s
# Warmup Iteration  28: 252.747 ops/s
# Warmup Iteration  29: 253.331 ops/s
# Warmup Iteration  30: 252.804 ops/s
Iteration   1: 252.956 ops/s
Iteration   2: 253.120 ops/s
Iteration   3: 253.013 ops/s
Iteration   4: 254.108 ops/s
Iteration   5: 252.097 ops/s
Iteration   6: 253.210 ops/s
Iteration   7: 253.703 ops/s
Iteration   8: 253.078 ops/s
Iteration   9: 254.360 ops/s
Iteration  10: 253.472 ops/s
Iteration  11: 253.170 ops/s
Iteration  12: 252.922 ops/s
Iteration  13: 252.981 ops/s
Iteration  14: 253.283 ops/s
Iteration  15: 253.702 ops/s
Iteration  16: 252.649 ops/s
Iteration  17: 251.437 ops/s
Iteration  18: 250.596 ops/s
Iteration  19: 246.164 ops/s
Iteration  20: 252.247 ops/s
Iteration  21: 252.872 ops/s
Iteration  22: 253.012 ops/s
Iteration  23: 252.549 ops/s
Iteration  24: 253.417 ops/s
Iteration  25: 254.095 ops/s
Iteration  26: 252.702 ops/s
Iteration  27: 253.840 ops/s
Iteration  28: 252.654 ops/s
Iteration  29: 253.343 ops/s
Iteration  30: 253.778 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  252.818 ±(99.9%) 0.986 ops/s [Average]
  (min, avg, max) = (246.164, 252.818, 254.360), stdev = 1.476
  CI (99.9%): [251.832, 253.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  252.818 ± 0.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6549983.364 ops/s
# Warmup Iteration   2: 11004928.534 ops/s
# Warmup Iteration   3: 12338001.890 ops/s
# Warmup Iteration   4: 12429652.043 ops/s
# Warmup Iteration   5: 12371716.858 ops/s
# Warmup Iteration   6: 10259111.013 ops/s
# Warmup Iteration   7: 12431267.814 ops/s
# Warmup Iteration   8: 12425508.258 ops/s
# Warmup Iteration   9: 12431469.394 ops/s
# Warmup Iteration  10: 12448783.502 ops/s
# Warmup Iteration  11: 12432126.367 ops/s
# Warmup Iteration  12: 12390410.613 ops/s
# Warmup Iteration  13: 12454504.662 ops/s
# Warmup Iteration  14: 12452374.644 ops/s
# Warmup Iteration  15: 12445895.100 ops/s
# Warmup Iteration  16: 12461891.416 ops/s
# Warmup Iteration  17: 12451707.995 ops/s
# Warmup Iteration  18: 12458018.280 ops/s
# Warmup Iteration  19: 12465860.450 ops/s
# Warmup Iteration  20: 12434301.487 ops/s
# Warmup Iteration  21: 12442269.324 ops/s
# Warmup Iteration  22: 12417278.313 ops/s
# Warmup Iteration  23: 12463073.397 ops/s
# Warmup Iteration  24: 12448705.308 ops/s
# Warmup Iteration  25: 12441146.279 ops/s
# Warmup Iteration  26: 12421131.758 ops/s
# Warmup Iteration  27: 12446764.383 ops/s
# Warmup Iteration  28: 12432274.732 ops/s
# Warmup Iteration  29: 12431808.730 ops/s
# Warmup Iteration  30: 12435187.759 ops/s
Iteration   1: 12413831.746 ops/s
Iteration   2: 12458829.531 ops/s
Iteration   3: 12475772.667 ops/s
Iteration   4: 12431873.575 ops/s
Iteration   5: 12478325.008 ops/s
Iteration   6: 12434878.646 ops/s
Iteration   7: 12405197.401 ops/s
Iteration   8: 12448747.653 ops/s
Iteration   9: 12423184.552 ops/s
Iteration  10: 12460361.214 ops/s
Iteration  11: 12433407.449 ops/s
Iteration  12: 12453058.948 ops/s
Iteration  13: 12425725.163 ops/s
Iteration  14: 12413634.093 ops/s
Iteration  15: 12437728.509 ops/s
Iteration  16: 12429321.776 ops/s
Iteration  17: 12453444.978 ops/s
Iteration  18: 12449578.396 ops/s
Iteration  19: 12476745.706 ops/s
Iteration  20: 12441545.292 ops/s
Iteration  21: 12419522.295 ops/s
Iteration  22: 12469981.697 ops/s
Iteration  23: 12506727.542 ops/s
Iteration  24: 12460359.483 ops/s
Iteration  25: 12440618.289 ops/s
Iteration  26: 12467668.649 ops/s
Iteration  27: 12449718.949 ops/s
Iteration  28: 12435067.730 ops/s
Iteration  29: 12449446.259 ops/s
Iteration  30: 12459849.033 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloat":
  12446805.074 ±(99.9%) 15137.208 ops/s [Average]
  (min, avg, max) = (12405197.401, 12446805.074, 12506727.542), stdev = 22656.663
  CI (99.9%): [12431667.866, 12461942.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumFloat  thrpt   30  12446805.074 ± 15137.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150.637 ops/s
# Warmup Iteration   2: 177.648 ops/s
# Warmup Iteration   3: 232.089 ops/s
# Warmup Iteration   4: 232.151 ops/s
# Warmup Iteration   5: 231.602 ops/s
# Warmup Iteration   6: 231.501 ops/s
# Warmup Iteration   7: 230.777 ops/s
# Warmup Iteration   8: 231.674 ops/s
# Warmup Iteration   9: 230.932 ops/s
# Warmup Iteration  10: 195.114 ops/s
# Warmup Iteration  11: 231.600 ops/s
# Warmup Iteration  12: 231.197 ops/s
# Warmup Iteration  13: 214.953 ops/s
# Warmup Iteration  14: 206.790 ops/s
# Warmup Iteration  15: 205.881 ops/s
# Warmup Iteration  16: 206.326 ops/s
# Warmup Iteration  17: 206.552 ops/s
# Warmup Iteration  18: 206.162 ops/s
# Warmup Iteration  19: 206.209 ops/s
# Warmup Iteration  20: 206.380 ops/s
# Warmup Iteration  21: 206.281 ops/s
# Warmup Iteration  22: 206.682 ops/s
# Warmup Iteration  23: 206.105 ops/s
# Warmup Iteration  24: 206.453 ops/s
# Warmup Iteration  25: 206.460 ops/s
# Warmup Iteration  26: 205.854 ops/s
# Warmup Iteration  27: 206.531 ops/s
# Warmup Iteration  28: 206.419 ops/s
# Warmup Iteration  29: 206.474 ops/s
# Warmup Iteration  30: 206.380 ops/s
Iteration   1: 206.159 ops/s
Iteration   2: 205.637 ops/s
Iteration   3: 205.430 ops/s
Iteration   4: 204.919 ops/s
Iteration   5: 206.395 ops/s
Iteration   6: 206.292 ops/s
Iteration   7: 206.633 ops/s
Iteration   8: 205.167 ops/s
Iteration   9: 206.250 ops/s
Iteration  10: 205.883 ops/s
Iteration  11: 206.651 ops/s
Iteration  12: 205.466 ops/s
Iteration  13: 205.819 ops/s
Iteration  14: 205.524 ops/s
Iteration  15: 205.431 ops/s
Iteration  16: 205.960 ops/s
Iteration  17: 205.718 ops/s
Iteration  18: 206.841 ops/s
Iteration  19: 205.696 ops/s
Iteration  20: 206.378 ops/s
Iteration  21: 206.232 ops/s
Iteration  22: 206.612 ops/s
Iteration  23: 205.094 ops/s
Iteration  24: 205.973 ops/s
Iteration  25: 205.830 ops/s
Iteration  26: 206.919 ops/s
Iteration  27: 206.175 ops/s
Iteration  28: 206.576 ops/s
Iteration  29: 206.286 ops/s
Iteration  30: 207.127 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  206.036 ±(99.9%) 0.376 ops/s [Average]
  (min, avg, max) = (204.919, 206.036, 207.127), stdev = 0.563
  CI (99.9%): [205.660, 206.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt    Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  206.036 ± 0.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173.660 ops/s
# Warmup Iteration   2: 231.779 ops/s
# Warmup Iteration   3: 285.268 ops/s
# Warmup Iteration   4: 283.832 ops/s
# Warmup Iteration   5: 285.766 ops/s
# Warmup Iteration   6: 285.957 ops/s
# Warmup Iteration   7: 286.254 ops/s
# Warmup Iteration   8: 250.823 ops/s
# Warmup Iteration   9: 276.615 ops/s
# Warmup Iteration  10: 284.731 ops/s
# Warmup Iteration  11: 256.796 ops/s
# Warmup Iteration  12: 253.091 ops/s
# Warmup Iteration  13: 253.455 ops/s
# Warmup Iteration  14: 253.467 ops/s
# Warmup Iteration  15: 253.933 ops/s
# Warmup Iteration  16: 253.227 ops/s
# Warmup Iteration  17: 252.628 ops/s
# Warmup Iteration  18: 254.081 ops/s
# Warmup Iteration  19: 253.053 ops/s
# Warmup Iteration  20: 253.693 ops/s
# Warmup Iteration  21: 252.612 ops/s
# Warmup Iteration  22: 252.940 ops/s
# Warmup Iteration  23: 253.099 ops/s
# Warmup Iteration  24: 253.356 ops/s
# Warmup Iteration  25: 252.557 ops/s
# Warmup Iteration  26: 253.481 ops/s
# Warmup Iteration  27: 253.535 ops/s
# Warmup Iteration  28: 254.199 ops/s
# Warmup Iteration  29: 253.740 ops/s
# Warmup Iteration  30: 253.352 ops/s
Iteration   1: 253.436 ops/s
Iteration   2: 252.989 ops/s
Iteration   3: 254.236 ops/s
Iteration   4: 252.544 ops/s
Iteration   5: 253.557 ops/s
Iteration   6: 253.950 ops/s
Iteration   7: 253.949 ops/s
Iteration   8: 253.830 ops/s
Iteration   9: 253.392 ops/s
Iteration  10: 253.892 ops/s
Iteration  11: 252.955 ops/s
Iteration  12: 253.591 ops/s
Iteration  13: 253.611 ops/s
Iteration  14: 253.207 ops/s
Iteration  15: 253.330 ops/s
Iteration  16: 252.671 ops/s
Iteration  17: 253.439 ops/s
Iteration  18: 253.628 ops/s
Iteration  19: 253.585 ops/s
Iteration  20: 252.554 ops/s
Iteration  21: 252.875 ops/s
Iteration  22: 252.989 ops/s
Iteration  23: 250.378 ops/s
Iteration  24: 253.529 ops/s
Iteration  25: 254.091 ops/s
Iteration  26: 251.286 ops/s
Iteration  27: 253.307 ops/s
Iteration  28: 253.902 ops/s
Iteration  29: 252.318 ops/s
Iteration  30: 253.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  253.234 ±(99.9%) 0.552 ops/s [Average]
  (min, avg, max) = (250.378, 253.234, 254.236), stdev = 0.827
  CI (99.9%): [252.682, 253.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt    Score   Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  253.234 ± 0.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6821455.197 ops/s
# Warmup Iteration   2: 12120189.702 ops/s
# Warmup Iteration   3: 13208927.932 ops/s
# Warmup Iteration   4: 13286994.593 ops/s
# Warmup Iteration   5: 12939427.632 ops/s
# Warmup Iteration   6: 11346324.232 ops/s
# Warmup Iteration   7: 13289401.661 ops/s
# Warmup Iteration   8: 13276535.565 ops/s
# Warmup Iteration   9: 13311059.359 ops/s
# Warmup Iteration  10: 13315178.949 ops/s
# Warmup Iteration  11: 13318837.916 ops/s
# Warmup Iteration  12: 13305430.842 ops/s
# Warmup Iteration  13: 13287189.598 ops/s
# Warmup Iteration  14: 13292878.280 ops/s
# Warmup Iteration  15: 13313206.821 ops/s
# Warmup Iteration  16: 13304425.252 ops/s
# Warmup Iteration  17: 13297955.124 ops/s
# Warmup Iteration  18: 13277904.981 ops/s
# Warmup Iteration  19: 13250199.118 ops/s
# Warmup Iteration  20: 13277978.547 ops/s
# Warmup Iteration  21: 13283227.358 ops/s
# Warmup Iteration  22: 13302735.690 ops/s
# Warmup Iteration  23: 13277413.126 ops/s
# Warmup Iteration  24: 13311976.625 ops/s
# Warmup Iteration  25: 13294587.648 ops/s
# Warmup Iteration  26: 13286135.222 ops/s
# Warmup Iteration  27: 13314081.404 ops/s
# Warmup Iteration  28: 13295363.826 ops/s
# Warmup Iteration  29: 13301124.957 ops/s
# Warmup Iteration  30: 13316271.914 ops/s
Iteration   1: 13293629.040 ops/s
Iteration   2: 13289544.317 ops/s
Iteration   3: 13268828.078 ops/s
Iteration   4: 13314623.182 ops/s
Iteration   5: 13324627.965 ops/s
Iteration   6: 13311851.160 ops/s
Iteration   7: 13349153.746 ops/s
Iteration   8: 13284325.126 ops/s
Iteration   9: 13314687.289 ops/s
Iteration  10: 13253155.843 ops/s
Iteration  11: 13285428.587 ops/s
Iteration  12: 13297615.797 ops/s
Iteration  13: 13258659.163 ops/s
Iteration  14: 13295397.175 ops/s
Iteration  15: 13261228.042 ops/s
Iteration  16: 13325177.271 ops/s
Iteration  17: 13284851.312 ops/s
Iteration  18: 13295282.257 ops/s
Iteration  19: 13323325.190 ops/s
Iteration  20: 13283980.167 ops/s
Iteration  21: 13310454.540 ops/s
Iteration  22: 13312145.197 ops/s
Iteration  23: 13282687.951 ops/s
Iteration  24: 13323087.811 ops/s
Iteration  25: 13294313.191 ops/s
Iteration  26: 13316728.727 ops/s
Iteration  27: 13265476.749 ops/s
Iteration  28: 13286683.086 ops/s
Iteration  29: 13320024.025 ops/s
Iteration  30: 13289410.518 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumInteger":
  13297212.750 ±(99.9%) 15367.671 ops/s [Average]
  (min, avg, max) = (13253155.843, 13297212.750, 13349153.746), stdev = 23001.609
  CI (99.9%): [13281845.079, 13312580.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumInteger  thrpt   30  13297212.750 ± 15367.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6834785.309 ops/s
# Warmup Iteration   2: 12129644.854 ops/s
# Warmup Iteration   3: 13189812.705 ops/s
# Warmup Iteration   4: 13252293.999 ops/s
# Warmup Iteration   5: 12931703.787 ops/s
# Warmup Iteration   6: 11311681.616 ops/s
# Warmup Iteration   7: 13307984.166 ops/s
# Warmup Iteration   8: 13291269.503 ops/s
# Warmup Iteration   9: 13268918.383 ops/s
# Warmup Iteration  10: 13310712.849 ops/s
# Warmup Iteration  11: 13285452.629 ops/s
# Warmup Iteration  12: 13296136.583 ops/s
# Warmup Iteration  13: 13276742.766 ops/s
# Warmup Iteration  14: 13310308.795 ops/s
# Warmup Iteration  15: 13324732.168 ops/s
# Warmup Iteration  16: 13298841.900 ops/s
# Warmup Iteration  17: 13304893.254 ops/s
# Warmup Iteration  18: 13297668.364 ops/s
# Warmup Iteration  19: 13304150.649 ops/s
# Warmup Iteration  20: 13265087.802 ops/s
# Warmup Iteration  21: 13317660.708 ops/s
# Warmup Iteration  22: 13288608.179 ops/s
# Warmup Iteration  23: 13283703.037 ops/s
# Warmup Iteration  24: 13312209.973 ops/s
# Warmup Iteration  25: 13291690.976 ops/s
# Warmup Iteration  26: 13291755.503 ops/s
# Warmup Iteration  27: 13301492.998 ops/s
# Warmup Iteration  28: 13281712.697 ops/s
# Warmup Iteration  29: 13301361.660 ops/s
# Warmup Iteration  30: 13304976.640 ops/s
Iteration   1: 13265579.500 ops/s
Iteration   2: 13293643.904 ops/s
Iteration   3: 13246652.172 ops/s
Iteration   4: 13306241.910 ops/s
Iteration   5: 13276788.960 ops/s
Iteration   6: 13312935.381 ops/s
Iteration   7: 13286716.324 ops/s
Iteration   8: 13291346.225 ops/s
Iteration   9: 13314184.336 ops/s
Iteration  10: 13258096.701 ops/s
Iteration  11: 13322682.734 ops/s
Iteration  12: 13275987.230 ops/s
Iteration  13: 13281588.443 ops/s
Iteration  14: 13308362.409 ops/s
Iteration  15: 13305865.729 ops/s
Iteration  16: 13310893.741 ops/s
Iteration  17: 13307226.748 ops/s
Iteration  18: 13274293.724 ops/s
Iteration  19: 13295382.735 ops/s
Iteration  20: 13261668.812 ops/s
Iteration  21: 13290755.718 ops/s
Iteration  22: 13295096.413 ops/s
Iteration  23: 13283725.349 ops/s
Iteration  24: 13305152.779 ops/s
Iteration  25: 13276784.525 ops/s
Iteration  26: 13268941.547 ops/s
Iteration  27: 13278655.583 ops/s
Iteration  28: 13270663.749 ops/s
Iteration  29: 13281629.895 ops/s
Iteration  30: 13294036.157 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_sumLong":
  13288052.648 ±(99.9%) 12525.654 ops/s [Average]
  (min, avg, max) = (13246652.172, 13288052.648, 13322682.734), stdev = 18747.811
  CI (99.9%): [13275526.993, 13300578.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_sumLong  thrpt   30  13288052.648 ± 12525.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7388656.398 ops/s
# Warmup Iteration   2: 16336735.745 ops/s
# Warmup Iteration   3: 15563342.795 ops/s
# Warmup Iteration   4: 14819875.099 ops/s
# Warmup Iteration   5: 16591572.696 ops/s
# Warmup Iteration   6: 16640446.956 ops/s
# Warmup Iteration   7: 16620567.916 ops/s
# Warmup Iteration   8: 16532654.405 ops/s
# Warmup Iteration   9: 16643705.013 ops/s
# Warmup Iteration  10: 16626132.455 ops/s
# Warmup Iteration  11: 16603777.815 ops/s
# Warmup Iteration  12: 16588088.994 ops/s
# Warmup Iteration  13: 16624880.656 ops/s
# Warmup Iteration  14: 16621982.440 ops/s
# Warmup Iteration  15: 16629057.181 ops/s
# Warmup Iteration  16: 16570472.536 ops/s
# Warmup Iteration  17: 16675172.870 ops/s
# Warmup Iteration  18: 16405917.727 ops/s
# Warmup Iteration  19: 16639694.564 ops/s
# Warmup Iteration  20: 16651429.544 ops/s
# Warmup Iteration  21: 16637664.995 ops/s
# Warmup Iteration  22: 16611415.657 ops/s
# Warmup Iteration  23: 16645919.761 ops/s
# Warmup Iteration  24: 16623920.958 ops/s
# Warmup Iteration  25: 16637146.665 ops/s
# Warmup Iteration  26: 16631367.074 ops/s
# Warmup Iteration  27: 16615459.744 ops/s
# Warmup Iteration  28: 16643556.226 ops/s
# Warmup Iteration  29: 16638344.856 ops/s
# Warmup Iteration  30: 16649313.084 ops/s
Iteration   1: 16629941.466 ops/s
Iteration   2: 16631708.005 ops/s
Iteration   3: 16594564.837 ops/s
Iteration   4: 16613766.593 ops/s
Iteration   5: 16633030.741 ops/s
Iteration   6: 16620971.009 ops/s
Iteration   7: 16647723.649 ops/s
Iteration   8: 16601824.047 ops/s
Iteration   9: 16655455.902 ops/s
Iteration  10: 16632800.256 ops/s
Iteration  11: 16639929.272 ops/s
Iteration  12: 16638935.264 ops/s
Iteration  13: 16635871.220 ops/s
Iteration  14: 16621507.291 ops/s
Iteration  15: 16657343.382 ops/s
Iteration  16: 16662564.919 ops/s
Iteration  17: 16696637.791 ops/s
Iteration  18: 16602820.856 ops/s
Iteration  19: 16630193.853 ops/s
Iteration  20: 16626385.275 ops/s
Iteration  21: 16610012.682 ops/s
Iteration  22: 16684716.231 ops/s
Iteration  23: 16672404.819 ops/s
Iteration  24: 16634366.077 ops/s
Iteration  25: 16592390.761 ops/s
Iteration  26: 16667467.346 ops/s
Iteration  27: 16601133.869 ops/s
Iteration  28: 16633627.511 ops/s
Iteration  29: 16626498.512 ops/s
Iteration  30: 16665398.164 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeDouble":
  16635399.720 ±(99.9%) 17513.923 ops/s [Average]
  (min, avg, max) = (16592390.761, 16635399.720, 16696637.791), stdev = 26214.017
  CI (99.9%): [16617885.797, 16652913.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_summarizeDouble  thrpt   30  16635399.720 ± 17513.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7372576.758 ops/s
# Warmup Iteration   2: 16298806.428 ops/s
# Warmup Iteration   3: 15425998.542 ops/s
# Warmup Iteration   4: 14136416.443 ops/s
# Warmup Iteration   5: 16148848.424 ops/s
# Warmup Iteration   6: 16131913.985 ops/s
# Warmup Iteration   7: 16152256.878 ops/s
# Warmup Iteration   8: 16096740.620 ops/s
# Warmup Iteration   9: 16115579.255 ops/s
# Warmup Iteration  10: 16150946.865 ops/s
# Warmup Iteration  11: 16113842.385 ops/s
# Warmup Iteration  12: 16154916.977 ops/s
# Warmup Iteration  13: 16166728.281 ops/s
# Warmup Iteration  14: 16142726.808 ops/s
# Warmup Iteration  15: 16120440.944 ops/s
# Warmup Iteration  16: 16141263.420 ops/s
# Warmup Iteration  17: 16238062.227 ops/s
# Warmup Iteration  18: 16205986.413 ops/s
# Warmup Iteration  19: 16253295.520 ops/s
# Warmup Iteration  20: 16214853.412 ops/s
# Warmup Iteration  21: 16130094.762 ops/s
# Warmup Iteration  22: 16192171.842 ops/s
# Warmup Iteration  23: 16185180.986 ops/s
# Warmup Iteration  24: 16220026.621 ops/s
# Warmup Iteration  25: 16189810.257 ops/s
# Warmup Iteration  26: 16207284.432 ops/s
# Warmup Iteration  27: 16228296.656 ops/s
# Warmup Iteration  28: 16228562.467 ops/s
# Warmup Iteration  29: 16204330.864 ops/s
# Warmup Iteration  30: 16216892.617 ops/s
Iteration   1: 16171248.032 ops/s
Iteration   2: 16250059.930 ops/s
Iteration   3: 16260429.463 ops/s
Iteration   4: 16255983.445 ops/s
Iteration   5: 16223715.073 ops/s
Iteration   6: 16258542.575 ops/s
Iteration   7: 16275766.944 ops/s
Iteration   8: 16211201.004 ops/s
Iteration   9: 16247530.828 ops/s
Iteration  10: 16217452.232 ops/s
Iteration  11: 16228041.379 ops/s
Iteration  12: 16207252.251 ops/s
Iteration  13: 16242106.678 ops/s
Iteration  14: 16221613.638 ops/s
Iteration  15: 16228369.896 ops/s
Iteration  16: 16257820.928 ops/s
Iteration  17: 16199744.735 ops/s
Iteration  18: 16136659.373 ops/s
Iteration  19: 16246990.565 ops/s
Iteration  20: 16156500.795 ops/s
Iteration  21: 16241240.732 ops/s
Iteration  22: 16215405.884 ops/s
Iteration  23: 16179986.825 ops/s
Iteration  24: 16227455.380 ops/s
Iteration  25: 16198484.743 ops/s
Iteration  26: 16178797.180 ops/s
Iteration  27: 16149981.896 ops/s
Iteration  28: 16223618.400 ops/s
Iteration  29: 16230145.251 ops/s
Iteration  30: 16245491.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeFloat":
  16219587.930 ±(99.9%) 23523.137 ops/s [Average]
  (min, avg, max) = (16136659.373, 16219587.930, 16275766.944), stdev = 35208.327
  CI (99.9%): [16196064.793, 16243111.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_summarizeFloat  thrpt   30  16219587.930 ± 23523.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8997746.344 ops/s
# Warmup Iteration   2: 20076764.534 ops/s
# Warmup Iteration   3: 17058737.195 ops/s
# Warmup Iteration   4: 20168371.523 ops/s
# Warmup Iteration   5: 20353671.648 ops/s
# Warmup Iteration   6: 20336767.806 ops/s
# Warmup Iteration   7: 20330327.329 ops/s
# Warmup Iteration   8: 20405718.274 ops/s
# Warmup Iteration   9: 20284485.448 ops/s
# Warmup Iteration  10: 20304711.885 ops/s
# Warmup Iteration  11: 20352117.517 ops/s
# Warmup Iteration  12: 20329952.326 ops/s
# Warmup Iteration  13: 20363194.919 ops/s
# Warmup Iteration  14: 20342559.032 ops/s
# Warmup Iteration  15: 20315512.267 ops/s
# Warmup Iteration  16: 20385093.503 ops/s
# Warmup Iteration  17: 20356766.419 ops/s
# Warmup Iteration  18: 20376393.032 ops/s
# Warmup Iteration  19: 20358814.428 ops/s
# Warmup Iteration  20: 20371800.692 ops/s
# Warmup Iteration  21: 20309952.061 ops/s
# Warmup Iteration  22: 20383884.572 ops/s
# Warmup Iteration  23: 20353063.228 ops/s
# Warmup Iteration  24: 20281507.592 ops/s
# Warmup Iteration  25: 20374820.798 ops/s
# Warmup Iteration  26: 20345155.387 ops/s
# Warmup Iteration  27: 20341196.034 ops/s
# Warmup Iteration  28: 20343134.626 ops/s
# Warmup Iteration  29: 20319920.838 ops/s
# Warmup Iteration  30: 20334693.209 ops/s
Iteration   1: 20292357.519 ops/s
Iteration   2: 20321759.606 ops/s
Iteration   3: 20312830.568 ops/s
Iteration   4: 20364804.104 ops/s
Iteration   5: 20308269.472 ops/s
Iteration   6: 20319071.641 ops/s
Iteration   7: 20349916.042 ops/s
Iteration   8: 20290567.849 ops/s
Iteration   9: 20318592.752 ops/s
Iteration  10: 20350600.488 ops/s
Iteration  11: 20316934.083 ops/s
Iteration  12: 20344193.902 ops/s
Iteration  13: 20307744.745 ops/s
Iteration  14: 20335956.448 ops/s
Iteration  15: 20368793.548 ops/s
Iteration  16: 20334411.652 ops/s
Iteration  17: 20347062.051 ops/s
Iteration  18: 20326409.412 ops/s
Iteration  19: 20366041.320 ops/s
Iteration  20: 20429688.516 ops/s
Iteration  21: 20358540.357 ops/s
Iteration  22: 20318363.225 ops/s
Iteration  23: 20232034.286 ops/s
Iteration  24: 20318316.687 ops/s
Iteration  25: 20347061.185 ops/s
Iteration  26: 20350841.243 ops/s
Iteration  27: 20318080.328 ops/s
Iteration  28: 20367382.709 ops/s
Iteration  29: 20333779.971 ops/s
Iteration  30: 20359125.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeInt":
  20333651.028 ±(99.9%) 22696.929 ops/s [Average]
  (min, avg, max) = (20232034.286, 20333651.028, 20429688.516), stdev = 33971.697
  CI (99.9%): [20310954.099, 20356347.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_summarizeInt  thrpt   30  20333651.028 ± 22696.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6770308.630 ops/s
# Warmup Iteration   2: 19991214.173 ops/s
# Warmup Iteration   3: 16697059.071 ops/s
# Warmup Iteration   4: 20049595.923 ops/s
# Warmup Iteration   5: 20085725.150 ops/s
# Warmup Iteration   6: 20058601.696 ops/s
# Warmup Iteration   7: 20102318.959 ops/s
# Warmup Iteration   8: 20102601.551 ops/s
# Warmup Iteration   9: 20139004.132 ops/s
# Warmup Iteration  10: 20096094.184 ops/s
# Warmup Iteration  11: 20117319.180 ops/s
# Warmup Iteration  12: 20079617.532 ops/s
# Warmup Iteration  13: 20106007.438 ops/s
# Warmup Iteration  14: 20094851.381 ops/s
# Warmup Iteration  15: 20119809.151 ops/s
# Warmup Iteration  16: 20092480.933 ops/s
# Warmup Iteration  17: 20093961.399 ops/s
# Warmup Iteration  18: 20084095.995 ops/s
# Warmup Iteration  19: 20118407.714 ops/s
# Warmup Iteration  20: 20071117.174 ops/s
# Warmup Iteration  21: 20065764.845 ops/s
# Warmup Iteration  22: 20047029.828 ops/s
# Warmup Iteration  23: 20107710.327 ops/s
# Warmup Iteration  24: 20087151.069 ops/s
# Warmup Iteration  25: 20102849.404 ops/s
# Warmup Iteration  26: 20113100.719 ops/s
# Warmup Iteration  27: 20132711.752 ops/s
# Warmup Iteration  28: 20097402.909 ops/s
# Warmup Iteration  29: 20112031.215 ops/s
# Warmup Iteration  30: 20111003.187 ops/s
Iteration   1: 20103414.901 ops/s
Iteration   2: 20093330.459 ops/s
Iteration   3: 20112082.650 ops/s
Iteration   4: 20163624.452 ops/s
Iteration   5: 20155172.389 ops/s
Iteration   6: 20029344.387 ops/s
Iteration   7: 20161398.168 ops/s
Iteration   8: 20114694.536 ops/s
Iteration   9: 20131580.211 ops/s
Iteration  10: 20105973.385 ops/s
Iteration  11: 20057592.890 ops/s
Iteration  12: 20062785.596 ops/s
Iteration  13: 20066972.453 ops/s
Iteration  14: 20097703.990 ops/s
Iteration  15: 20084949.362 ops/s
Iteration  16: 20101994.481 ops/s
Iteration  17: 20141596.800 ops/s
Iteration  18: 20051552.953 ops/s
Iteration  19: 20134905.517 ops/s
Iteration  20: 20213129.598 ops/s
Iteration  21: 20064194.866 ops/s
Iteration  22: 20025895.129 ops/s
Iteration  23: 20114616.817 ops/s
Iteration  24: 20105535.093 ops/s
Iteration  25: 20083644.521 ops/s
Iteration  26: 20082971.465 ops/s
Iteration  27: 20093247.936 ops/s
Iteration  28: 20115258.651 ops/s
Iteration  29: 20134405.438 ops/s
Iteration  30: 20116281.462 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_summarizeLong":
  20103995.019 ±(99.9%) 27388.071 ops/s [Average]
  (min, avg, max) = (20025895.129, 20103995.019, 20213129.598), stdev = 40993.178
  CI (99.9%): [20076606.948, 20131383.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_summarizeLong  thrpt   30  20103995.019 ± 27388.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1271753.976 ops/s
# Warmup Iteration   2: 2104037.494 ops/s
# Warmup Iteration   3: 2494065.842 ops/s
# Warmup Iteration   4: 2515264.189 ops/s
# Warmup Iteration   5: 2503799.668 ops/s
# Warmup Iteration   6: 2118828.139 ops/s
# Warmup Iteration   7: 2439162.231 ops/s
# Warmup Iteration   8: 2513034.417 ops/s
# Warmup Iteration   9: 2515040.410 ops/s
# Warmup Iteration  10: 2509862.265 ops/s
# Warmup Iteration  11: 2514224.176 ops/s
# Warmup Iteration  12: 2513914.685 ops/s
# Warmup Iteration  13: 2507259.455 ops/s
# Warmup Iteration  14: 2519659.303 ops/s
# Warmup Iteration  15: 2512712.465 ops/s
# Warmup Iteration  16: 2516279.685 ops/s
# Warmup Iteration  17: 2515144.929 ops/s
# Warmup Iteration  18: 2512478.501 ops/s
# Warmup Iteration  19: 2513225.178 ops/s
# Warmup Iteration  20: 2516943.540 ops/s
# Warmup Iteration  21: 2519030.688 ops/s
# Warmup Iteration  22: 2512672.230 ops/s
# Warmup Iteration  23: 2519615.991 ops/s
# Warmup Iteration  24: 2513555.559 ops/s
# Warmup Iteration  25: 2514271.950 ops/s
# Warmup Iteration  26: 2516570.243 ops/s
# Warmup Iteration  27: 2518431.845 ops/s
# Warmup Iteration  28: 2513092.437 ops/s
# Warmup Iteration  29: 2518028.979 ops/s
# Warmup Iteration  30: 2518579.558 ops/s
Iteration   1: 2508754.069 ops/s
Iteration   2: 2514855.873 ops/s
Iteration   3: 2515935.233 ops/s
Iteration   4: 2505766.476 ops/s
Iteration   5: 2517517.016 ops/s
Iteration   6: 2502805.320 ops/s
Iteration   7: 2515058.255 ops/s
Iteration   8: 2507061.910 ops/s
Iteration   9: 2511251.169 ops/s
Iteration  10: 2510639.010 ops/s
Iteration  11: 2510577.389 ops/s
Iteration  12: 2517066.094 ops/s
Iteration  13: 2516657.177 ops/s
Iteration  14: 2497629.842 ops/s
Iteration  15: 2515825.901 ops/s
Iteration  16: 2512348.400 ops/s
Iteration  17: 2512984.511 ops/s
Iteration  18: 2506795.795 ops/s
Iteration  19: 2517020.471 ops/s
Iteration  20: 2508621.928 ops/s
Iteration  21: 2513705.918 ops/s
Iteration  22: 2510375.478 ops/s
Iteration  23: 2515125.116 ops/s
Iteration  24: 2514429.030 ops/s
Iteration  25: 2516068.321 ops/s
Iteration  26: 2502137.133 ops/s
Iteration  27: 2511067.053 ops/s
Iteration  28: 2504208.929 ops/s
Iteration  29: 2508296.654 ops/s
Iteration  30: 2513431.459 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take":
  2511133.898 ±(99.9%) 3396.194 ops/s [Average]
  (min, avg, max) = (2497629.842, 2511133.898, 2517517.016), stdev = 5083.264
  CI (99.9%): [2507737.703, 2514530.092] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_take  thrpt   30  2511133.898 ± 3396.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1767799.911 ops/s
# Warmup Iteration   2: 4481499.887 ops/s
# Warmup Iteration   3: 4509454.370 ops/s
# Warmup Iteration   4: 3719860.612 ops/s
# Warmup Iteration   5: 4498569.154 ops/s
# Warmup Iteration   6: 4505985.617 ops/s
# Warmup Iteration   7: 4490267.577 ops/s
# Warmup Iteration   8: 4498192.877 ops/s
# Warmup Iteration   9: 4493602.498 ops/s
# Warmup Iteration  10: 4501476.195 ops/s
# Warmup Iteration  11: 4497823.064 ops/s
# Warmup Iteration  12: 4499273.249 ops/s
# Warmup Iteration  13: 4491628.707 ops/s
# Warmup Iteration  14: 4506605.910 ops/s
# Warmup Iteration  15: 4506148.245 ops/s
# Warmup Iteration  16: 4494691.269 ops/s
# Warmup Iteration  17: 4501785.118 ops/s
# Warmup Iteration  18: 4493371.247 ops/s
# Warmup Iteration  19: 4493196.676 ops/s
# Warmup Iteration  20: 4489500.628 ops/s
# Warmup Iteration  21: 4489164.443 ops/s
# Warmup Iteration  22: 4492090.354 ops/s
# Warmup Iteration  23: 4487727.704 ops/s
# Warmup Iteration  24: 4491293.588 ops/s
# Warmup Iteration  25: 4496519.490 ops/s
# Warmup Iteration  26: 4479641.882 ops/s
# Warmup Iteration  27: 4502909.877 ops/s
# Warmup Iteration  28: 4475616.503 ops/s
# Warmup Iteration  29: 4494856.287 ops/s
# Warmup Iteration  30: 4506550.582 ops/s
Iteration   1: 4494738.163 ops/s
Iteration   2: 4462828.555 ops/s
Iteration   3: 4493368.377 ops/s
Iteration   4: 4489222.673 ops/s
Iteration   5: 4495622.971 ops/s
Iteration   6: 4513830.244 ops/s
Iteration   7: 4496939.156 ops/s
Iteration   8: 4501194.026 ops/s
Iteration   9: 4486560.707 ops/s
Iteration  10: 4498970.987 ops/s
Iteration  11: 4472605.240 ops/s
Iteration  12: 4486794.388 ops/s
Iteration  13: 4507126.632 ops/s
Iteration  14: 4476994.033 ops/s
Iteration  15: 4504403.289 ops/s
Iteration  16: 4492863.309 ops/s
Iteration  17: 4464238.589 ops/s
Iteration  18: 4493351.601 ops/s
Iteration  19: 4496992.693 ops/s
Iteration  20: 4503924.886 ops/s
Iteration  21: 4511994.006 ops/s
Iteration  22: 4499910.902 ops/s
Iteration  23: 4489629.271 ops/s
Iteration  24: 4489995.482 ops/s
Iteration  25: 4498553.634 ops/s
Iteration  26: 4494597.652 ops/s
Iteration  27: 4493463.587 ops/s
Iteration  28: 4490453.489 ops/s
Iteration  29: 4499407.356 ops/s
Iteration  30: 4500975.743 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_takeWhile":
  4493385.055 ±(99.9%) 7944.483 ops/s [Average]
  (min, avg, max) = (4462828.555, 4493385.055, 4513830.244), stdev = 11890.928
  CI (99.9%): [4485440.572, 4501329.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_takeWhile  thrpt   30  4493385.055 ± 7944.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694741.671 ops/s
# Warmup Iteration   2: 763327.625 ops/s
# Warmup Iteration   3: 973714.476 ops/s
# Warmup Iteration   4: 968246.450 ops/s
# Warmup Iteration   5: 959088.322 ops/s
# Warmup Iteration   6: 966378.902 ops/s
# Warmup Iteration   7: 964456.804 ops/s
# Warmup Iteration   8: 965145.577 ops/s
# Warmup Iteration   9: 966328.343 ops/s
# Warmup Iteration  10: 939059.104 ops/s
# Warmup Iteration  11: 842166.353 ops/s
# Warmup Iteration  12: 962916.728 ops/s
# Warmup Iteration  13: 970191.264 ops/s
# Warmup Iteration  14: 964746.430 ops/s
# Warmup Iteration  15: 966025.183 ops/s
# Warmup Iteration  16: 967184.094 ops/s
# Warmup Iteration  17: 1024526.238 ops/s
# Warmup Iteration  18: 1026624.432 ops/s
# Warmup Iteration  19: 1028949.160 ops/s
# Warmup Iteration  20: 1027742.245 ops/s
# Warmup Iteration  21: 1025543.216 ops/s
# Warmup Iteration  22: 1028313.008 ops/s
# Warmup Iteration  23: 1024906.092 ops/s
# Warmup Iteration  24: 1027750.863 ops/s
# Warmup Iteration  25: 1024578.462 ops/s
# Warmup Iteration  26: 1025539.137 ops/s
# Warmup Iteration  27: 1027184.356 ops/s
# Warmup Iteration  28: 1023180.738 ops/s
# Warmup Iteration  29: 1028533.658 ops/s
# Warmup Iteration  30: 1025230.702 ops/s
Iteration   1: 1025002.318 ops/s
Iteration   2: 1024910.682 ops/s
Iteration   3: 1022635.586 ops/s
Iteration   4: 1020029.470 ops/s
Iteration   5: 1030261.393 ops/s
Iteration   6: 1028927.216 ops/s
Iteration   7: 1028769.486 ops/s
Iteration   8: 1028366.766 ops/s
Iteration   9: 1025107.748 ops/s
Iteration  10: 1021952.763 ops/s
Iteration  11: 1022561.620 ops/s
Iteration  12: 1024792.592 ops/s
Iteration  13: 1025909.352 ops/s
Iteration  14: 1026258.820 ops/s
Iteration  15: 1025670.386 ops/s
Iteration  16: 1026646.676 ops/s
Iteration  17: 1021288.609 ops/s
Iteration  18: 1028155.947 ops/s
Iteration  19: 1026384.823 ops/s
Iteration  20: 1022938.311 ops/s
Iteration  21: 1027710.541 ops/s
Iteration  22: 1027312.606 ops/s
Iteration  23: 1025236.070 ops/s
Iteration  24: 1029609.348 ops/s
Iteration  25: 1030709.786 ops/s
Iteration  26: 1029065.348 ops/s
Iteration  27: 1025167.222 ops/s
Iteration  28: 993145.059 ops/s
Iteration  29: 1026749.899 ops/s
Iteration  30: 1026156.348 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_take_throws":
  1024914.426 ±(99.9%) 4389.508 ops/s [Average]
  (min, avg, max) = (993145.059, 1024914.426, 1030709.786), stdev = 6570.010
  CI (99.9%): [1020524.918, 1029303.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_take_throws  thrpt   30  1024914.426 ± 4389.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5611096.426 ops/s
# Warmup Iteration   2: 12821758.666 ops/s
# Warmup Iteration   3: 10883884.414 ops/s
# Warmup Iteration   4: 12666385.202 ops/s
# Warmup Iteration   5: 12800767.153 ops/s
# Warmup Iteration   6: 12841159.578 ops/s
# Warmup Iteration   7: 12842370.962 ops/s
# Warmup Iteration   8: 12865420.569 ops/s
# Warmup Iteration   9: 12838474.159 ops/s
# Warmup Iteration  10: 12865369.630 ops/s
# Warmup Iteration  11: 12871160.410 ops/s
# Warmup Iteration  12: 12816579.141 ops/s
# Warmup Iteration  13: 12792332.439 ops/s
# Warmup Iteration  14: 12832024.916 ops/s
# Warmup Iteration  15: 12799294.886 ops/s
# Warmup Iteration  16: 12846069.492 ops/s
# Warmup Iteration  17: 12835706.729 ops/s
# Warmup Iteration  18: 12871613.096 ops/s
# Warmup Iteration  19: 12850835.023 ops/s
# Warmup Iteration  20: 12825113.887 ops/s
# Warmup Iteration  21: 12835593.445 ops/s
# Warmup Iteration  22: 12869406.099 ops/s
# Warmup Iteration  23: 12845805.134 ops/s
# Warmup Iteration  24: 12886743.648 ops/s
# Warmup Iteration  25: 12858672.497 ops/s
# Warmup Iteration  26: 12872786.090 ops/s
# Warmup Iteration  27: 12864512.333 ops/s
# Warmup Iteration  28: 12816797.659 ops/s
# Warmup Iteration  29: 12881398.336 ops/s
# Warmup Iteration  30: 12860807.642 ops/s
Iteration   1: 12884176.169 ops/s
Iteration   2: 12835393.164 ops/s
Iteration   3: 12875294.978 ops/s
Iteration   4: 12876992.781 ops/s
Iteration   5: 12842198.164 ops/s
Iteration   6: 12799768.514 ops/s
Iteration   7: 12890194.492 ops/s
Iteration   8: 12846190.690 ops/s
Iteration   9: 12868652.194 ops/s
Iteration  10: 12806031.860 ops/s
Iteration  11: 12786005.745 ops/s
Iteration  12: 12871114.616 ops/s
Iteration  13: 12858721.735 ops/s
Iteration  14: 12894585.466 ops/s
Iteration  15: 12880850.791 ops/s
Iteration  16: 12808287.319 ops/s
Iteration  17: 12867473.343 ops/s
Iteration  18: 12862154.550 ops/s
Iteration  19: 12857178.219 ops/s
Iteration  20: 12863593.405 ops/s
Iteration  21: 12858062.122 ops/s
Iteration  22: 12822037.404 ops/s
Iteration  23: 12896856.335 ops/s
Iteration  24: 12831585.770 ops/s
Iteration  25: 12829994.926 ops/s
Iteration  26: 12822281.463 ops/s
Iteration  27: 12834254.021 ops/s
Iteration  28: 12844049.604 ops/s
Iteration  29: 12854129.157 ops/s
Iteration  30: 12866912.103 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_tap":
  12851167.370 ±(99.9%) 19350.533 ops/s [Average]
  (min, avg, max) = (12786005.745, 12851167.370, 12896856.335), stdev = 28962.969
  CI (99.9%): [12831816.837, 12870517.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_tap  thrpt   30  12851167.370 ± 19350.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testBAOSSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testBAOSSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22835.752 ops/s
# Warmup Iteration   2: 32140.499 ops/s
# Warmup Iteration   3: 47624.535 ops/s
# Warmup Iteration   4: 49976.268 ops/s
# Warmup Iteration   5: 49813.232 ops/s
# Warmup Iteration   6: 49801.274 ops/s
# Warmup Iteration   7: 50105.532 ops/s
# Warmup Iteration   8: 49721.024 ops/s
# Warmup Iteration   9: 50128.830 ops/s
# Warmup Iteration  10: 40437.383 ops/s
# Warmup Iteration  11: 49517.995 ops/s
# Warmup Iteration  12: 49847.254 ops/s
# Warmup Iteration  13: 48404.971 ops/s
# Warmup Iteration  14: 49216.967 ops/s
# Warmup Iteration  15: 47925.495 ops/s
# Warmup Iteration  16: 49127.876 ops/s
# Warmup Iteration  17: 49018.001 ops/s
# Warmup Iteration  18: 48120.990 ops/s
# Warmup Iteration  19: 48803.648 ops/s
# Warmup Iteration  20: 49227.387 ops/s
# Warmup Iteration  21: 49072.470 ops/s
# Warmup Iteration  22: 48986.219 ops/s
# Warmup Iteration  23: 48730.684 ops/s
# Warmup Iteration  24: 49034.683 ops/s
# Warmup Iteration  25: 48992.958 ops/s
# Warmup Iteration  26: 48952.315 ops/s
# Warmup Iteration  27: 49129.764 ops/s
# Warmup Iteration  28: 49178.146 ops/s
# Warmup Iteration  29: 49314.912 ops/s
# Warmup Iteration  30: 49150.920 ops/s
Iteration   1: 49597.480 ops/s
Iteration   2: 49284.963 ops/s
Iteration   3: 49164.918 ops/s
Iteration   4: 49191.096 ops/s
Iteration   5: 49095.257 ops/s
Iteration   6: 48996.489 ops/s
Iteration   7: 47976.602 ops/s
Iteration   8: 49010.221 ops/s
Iteration   9: 49512.606 ops/s
Iteration  10: 48955.567 ops/s
Iteration  11: 48996.671 ops/s
Iteration  12: 49110.689 ops/s
Iteration  13: 50087.815 ops/s
Iteration  14: 49291.874 ops/s
Iteration  15: 47765.914 ops/s
Iteration  16: 47716.541 ops/s
Iteration  17: 49191.459 ops/s
Iteration  18: 49185.396 ops/s
Iteration  19: 49611.476 ops/s
Iteration  20: 49477.701 ops/s
Iteration  21: 50076.336 ops/s
Iteration  22: 51994.355 ops/s
Iteration  23: 49228.953 ops/s
Iteration  24: 49285.554 ops/s
Iteration  25: 49244.752 ops/s
Iteration  26: 49291.136 ops/s
Iteration  27: 49793.300 ops/s
Iteration  28: 49628.875 ops/s
Iteration  29: 49290.006 ops/s
Iteration  30: 48479.745 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testBAOSSize":
  49251.125 ±(99.9%) 509.096 ops/s [Average]
  (min, avg, max) = (47716.541, 49251.125, 51994.355), stdev = 761.991
  CI (99.9%): [48742.029, 49760.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testBAOSSize  thrpt   30  49251.125 ± 509.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615987.314 ops/s
# Warmup Iteration   2: 1314123.905 ops/s
# Warmup Iteration   3: 1398068.950 ops/s
# Warmup Iteration   4: 1397403.398 ops/s
# Warmup Iteration   5: 1165511.960 ops/s
# Warmup Iteration   6: 1400182.794 ops/s
# Warmup Iteration   7: 1398373.267 ops/s
# Warmup Iteration   8: 1396480.881 ops/s
# Warmup Iteration   9: 1398310.726 ops/s
# Warmup Iteration  10: 1398882.934 ops/s
# Warmup Iteration  11: 1401093.651 ops/s
# Warmup Iteration  12: 1398753.471 ops/s
# Warmup Iteration  13: 1391961.783 ops/s
# Warmup Iteration  14: 1398360.488 ops/s
# Warmup Iteration  15: 1397500.831 ops/s
# Warmup Iteration  16: 1401457.637 ops/s
# Warmup Iteration  17: 1400446.678 ops/s
# Warmup Iteration  18: 1397005.219 ops/s
# Warmup Iteration  19: 1400396.632 ops/s
# Warmup Iteration  20: 1397652.527 ops/s
# Warmup Iteration  21: 1397913.812 ops/s
# Warmup Iteration  22: 1397486.766 ops/s
# Warmup Iteration  23: 1399779.741 ops/s
# Warmup Iteration  24: 1395333.258 ops/s
# Warmup Iteration  25: 1397959.679 ops/s
# Warmup Iteration  26: 1397281.527 ops/s
# Warmup Iteration  27: 1387315.633 ops/s
# Warmup Iteration  28: 1400114.682 ops/s
# Warmup Iteration  29: 1397891.189 ops/s
# Warmup Iteration  30: 1397331.674 ops/s
Iteration   1: 1395655.489 ops/s
Iteration   2: 1399812.138 ops/s
Iteration   3: 1396315.158 ops/s
Iteration   4: 1401335.936 ops/s
Iteration   5: 1400274.264 ops/s
Iteration   6: 1394272.275 ops/s
Iteration   7: 1399110.848 ops/s
Iteration   8: 1399600.418 ops/s
Iteration   9: 1396766.753 ops/s
Iteration  10: 1396844.386 ops/s
Iteration  11: 1403466.822 ops/s
Iteration  12: 1398730.842 ops/s
Iteration  13: 1399371.783 ops/s
Iteration  14: 1404214.561 ops/s
Iteration  15: 1398144.014 ops/s
Iteration  16: 1400766.271 ops/s
Iteration  17: 1398643.598 ops/s
Iteration  18: 1404461.450 ops/s
Iteration  19: 1393552.356 ops/s
Iteration  20: 1399176.176 ops/s
Iteration  21: 1399202.946 ops/s
Iteration  22: 1393131.300 ops/s
Iteration  23: 1401819.174 ops/s
Iteration  24: 1402732.562 ops/s
Iteration  25: 1399678.294 ops/s
Iteration  26: 1395810.762 ops/s
Iteration  27: 1395894.343 ops/s
Iteration  28: 1394086.943 ops/s
Iteration  29: 1396651.018 ops/s
Iteration  30: 1402285.438 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testClone":
  1398726.944 ±(99.9%) 2091.576 ops/s [Average]
  (min, avg, max) = (1393131.300, 1398726.944, 1404461.450), stdev = 3130.572
  CI (99.9%): [1396635.368, 1400818.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testClone  thrpt   30  1398726.944 ± 2091.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithFromToWithCommandoPatternOptimization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithFromToWithCommandoPatternOptimization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 265572.045 ops/s
# Warmup Iteration   2: 532419.743 ops/s
# Warmup Iteration   3: 539753.624 ops/s
# Warmup Iteration   4: 460517.174 ops/s
# Warmup Iteration   5: 537353.945 ops/s
# Warmup Iteration   6: 541266.241 ops/s
# Warmup Iteration   7: 538785.938 ops/s
# Warmup Iteration   8: 541062.361 ops/s
# Warmup Iteration   9: 540221.170 ops/s
# Warmup Iteration  10: 538574.887 ops/s
# Warmup Iteration  11: 537934.806 ops/s
# Warmup Iteration  12: 535365.314 ops/s
# Warmup Iteration  13: 540063.462 ops/s
# Warmup Iteration  14: 538472.897 ops/s
# Warmup Iteration  15: 538920.331 ops/s
# Warmup Iteration  16: 539331.224 ops/s
# Warmup Iteration  17: 536792.931 ops/s
# Warmup Iteration  18: 539489.578 ops/s
# Warmup Iteration  19: 539977.836 ops/s
# Warmup Iteration  20: 539896.972 ops/s
# Warmup Iteration  21: 539278.018 ops/s
# Warmup Iteration  22: 539885.488 ops/s
# Warmup Iteration  23: 541523.861 ops/s
# Warmup Iteration  24: 539462.681 ops/s
# Warmup Iteration  25: 539208.070 ops/s
# Warmup Iteration  26: 540682.757 ops/s
# Warmup Iteration  27: 538687.112 ops/s
# Warmup Iteration  28: 539886.248 ops/s
# Warmup Iteration  29: 540210.122 ops/s
# Warmup Iteration  30: 539654.206 ops/s
Iteration   1: 538659.209 ops/s
Iteration   2: 539770.674 ops/s
Iteration   3: 538345.423 ops/s
Iteration   4: 537979.157 ops/s
Iteration   5: 539406.926 ops/s
Iteration   6: 538152.545 ops/s
Iteration   7: 542265.261 ops/s
Iteration   8: 540380.545 ops/s
Iteration   9: 537673.634 ops/s
Iteration  10: 538734.225 ops/s
Iteration  11: 540894.152 ops/s
Iteration  12: 539954.616 ops/s
Iteration  13: 541002.505 ops/s
Iteration  14: 542430.028 ops/s
Iteration  15: 537750.704 ops/s
Iteration  16: 540481.372 ops/s
Iteration  17: 535530.769 ops/s
Iteration  18: 543311.958 ops/s
Iteration  19: 540601.155 ops/s
Iteration  20: 541512.920 ops/s
Iteration  21: 539213.567 ops/s
Iteration  22: 536949.127 ops/s
Iteration  23: 543792.145 ops/s
Iteration  24: 536951.470 ops/s
Iteration  25: 541548.343 ops/s
Iteration  26: 539897.139 ops/s
Iteration  27: 538679.804 ops/s
Iteration  28: 540712.021 ops/s
Iteration  29: 539973.832 ops/s
Iteration  30: 540852.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithFromToWithCommandoPatternOptimization":
  539780.249 ±(99.9%) 1294.446 ops/s [Average]
  (min, avg, max) = (535530.769, 539780.249, 543792.145), stdev = 1937.465
  CI (99.9%): [538485.804, 541074.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testForEachWithFromToWithCommandoPatternOptimization  thrpt   30  539780.249 ± 1294.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithIndexWithFromToWithCommandoPatternOptimization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithIndexWithFromToWithCommandoPatternOptimization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245567.252 ops/s
# Warmup Iteration   2: 495570.409 ops/s
# Warmup Iteration   3: 503346.800 ops/s
# Warmup Iteration   4: 443900.997 ops/s
# Warmup Iteration   5: 489725.431 ops/s
# Warmup Iteration   6: 503612.928 ops/s
# Warmup Iteration   7: 504186.877 ops/s
# Warmup Iteration   8: 504909.592 ops/s
# Warmup Iteration   9: 502841.434 ops/s
# Warmup Iteration  10: 503536.240 ops/s
# Warmup Iteration  11: 502353.642 ops/s
# Warmup Iteration  12: 503789.797 ops/s
# Warmup Iteration  13: 503839.089 ops/s
# Warmup Iteration  14: 504129.370 ops/s
# Warmup Iteration  15: 504965.627 ops/s
# Warmup Iteration  16: 504106.239 ops/s
# Warmup Iteration  17: 501497.952 ops/s
# Warmup Iteration  18: 501104.788 ops/s
# Warmup Iteration  19: 500861.254 ops/s
# Warmup Iteration  20: 498230.615 ops/s
# Warmup Iteration  21: 499599.662 ops/s
# Warmup Iteration  22: 502306.817 ops/s
# Warmup Iteration  23: 502920.337 ops/s
# Warmup Iteration  24: 503305.553 ops/s
# Warmup Iteration  25: 498235.862 ops/s
# Warmup Iteration  26: 499632.206 ops/s
# Warmup Iteration  27: 501641.350 ops/s
# Warmup Iteration  28: 502636.281 ops/s
# Warmup Iteration  29: 500937.652 ops/s
# Warmup Iteration  30: 503161.008 ops/s
Iteration   1: 503076.468 ops/s
Iteration   2: 501755.288 ops/s
Iteration   3: 504228.723 ops/s
Iteration   4: 504907.460 ops/s
Iteration   5: 500648.861 ops/s
Iteration   6: 501432.945 ops/s
Iteration   7: 498563.614 ops/s
Iteration   8: 504392.243 ops/s
Iteration   9: 503174.439 ops/s
Iteration  10: 502054.127 ops/s
Iteration  11: 503282.100 ops/s
Iteration  12: 503770.541 ops/s
Iteration  13: 500831.195 ops/s
Iteration  14: 503769.665 ops/s
Iteration  15: 503605.610 ops/s
Iteration  16: 503693.130 ops/s
Iteration  17: 498862.157 ops/s
Iteration  18: 502269.308 ops/s
Iteration  19: 503266.492 ops/s
Iteration  20: 504951.419 ops/s
Iteration  21: 501982.162 ops/s
Iteration  22: 505567.095 ops/s
Iteration  23: 500143.254 ops/s
Iteration  24: 501340.862 ops/s
Iteration  25: 504103.407 ops/s
Iteration  26: 504251.546 ops/s
Iteration  27: 502023.274 ops/s
Iteration  28: 503613.807 ops/s
Iteration  29: 505284.902 ops/s
Iteration  30: 504429.504 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testForEachWithIndexWithFromToWithCommandoPatternOptimization":
  502842.520 ±(99.9%) 1207.697 ops/s [Average]
  (min, avg, max) = (498563.614, 502842.520, 505567.095), stdev = 1807.625
  CI (99.9%): [501634.823, 504050.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testForEachWithIndexWithFromToWithCommandoPatternOptimization  thrpt   30  502842.520 ± 1207.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14154607.542 ops/s
# Warmup Iteration   2: 24294699.558 ops/s
# Warmup Iteration   3: 26947049.900 ops/s
# Warmup Iteration   4: 28014419.106 ops/s
# Warmup Iteration   5: 27985602.342 ops/s
# Warmup Iteration   6: 27909510.098 ops/s
# Warmup Iteration   7: 27914699.824 ops/s
# Warmup Iteration   8: 27973388.788 ops/s
# Warmup Iteration   9: 27966441.339 ops/s
# Warmup Iteration  10: 27930828.329 ops/s
# Warmup Iteration  11: 28127875.460 ops/s
# Warmup Iteration  12: 27958649.674 ops/s
# Warmup Iteration  13: 28124648.302 ops/s
# Warmup Iteration  14: 28031652.292 ops/s
# Warmup Iteration  15: 27960526.849 ops/s
# Warmup Iteration  16: 27973127.710 ops/s
# Warmup Iteration  17: 28003554.504 ops/s
# Warmup Iteration  18: 27946246.746 ops/s
# Warmup Iteration  19: 28112271.892 ops/s
# Warmup Iteration  20: 28035268.284 ops/s
# Warmup Iteration  21: 28047565.246 ops/s
# Warmup Iteration  22: 28075517.542 ops/s
# Warmup Iteration  23: 27967378.567 ops/s
# Warmup Iteration  24: 28083703.032 ops/s
# Warmup Iteration  25: 28028462.228 ops/s
# Warmup Iteration  26: 28045323.657 ops/s
# Warmup Iteration  27: 27976548.331 ops/s
# Warmup Iteration  28: 27853867.602 ops/s
# Warmup Iteration  29: 27837126.177 ops/s
# Warmup Iteration  30: 28015727.092 ops/s
Iteration   1: 27982072.186 ops/s
Iteration   2: 28114277.911 ops/s
Iteration   3: 28063737.667 ops/s
Iteration   4: 27929772.866 ops/s
Iteration   5: 28063133.104 ops/s
Iteration   6: 27839889.638 ops/s
Iteration   7: 27923232.141 ops/s
Iteration   8: 28008369.815 ops/s
Iteration   9: 27948193.044 ops/s
Iteration  10: 28022676.833 ops/s
Iteration  11: 28036652.779 ops/s
Iteration  12: 27882835.041 ops/s
Iteration  13: 27937618.611 ops/s
Iteration  14: 27918120.743 ops/s
Iteration  15: 27996099.933 ops/s
Iteration  16: 28031523.864 ops/s
Iteration  17: 28006961.199 ops/s
Iteration  18: 27963880.147 ops/s
Iteration  19: 28017820.029 ops/s
Iteration  20: 27866581.065 ops/s
Iteration  21: 28044914.013 ops/s
Iteration  22: 28068132.207 ops/s
Iteration  23: 28099651.823 ops/s
Iteration  24: 28109236.562 ops/s
Iteration  25: 27991441.597 ops/s
Iteration  26: 28025142.534 ops/s
Iteration  27: 27996885.975 ops/s
Iteration  28: 28091401.790 ops/s
Iteration  29: 28061100.018 ops/s
Iteration  30: 27945057.745 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewCollection":
  27999547.096 ±(99.9%) 48312.664 ops/s [Average]
  (min, avg, max) = (27839889.638, 27999547.096, 28114277.911), stdev = 72312.126
  CI (99.9%): [27951234.432, 28047859.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testNewCollection  thrpt   30  27999547.096 ± 48312.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4504257.486 ops/s
# Warmup Iteration   2: 7753181.039 ops/s
# Warmup Iteration   3: 9340027.299 ops/s
# Warmup Iteration   4: 9407178.023 ops/s
# Warmup Iteration   5: 9386607.186 ops/s
# Warmup Iteration   6: 9445055.560 ops/s
# Warmup Iteration   7: 9413025.560 ops/s
# Warmup Iteration   8: 9426340.058 ops/s
# Warmup Iteration   9: 9423120.551 ops/s
# Warmup Iteration  10: 9447405.370 ops/s
# Warmup Iteration  11: 9414625.343 ops/s
# Warmup Iteration  12: 9439011.343 ops/s
# Warmup Iteration  13: 9431862.255 ops/s
# Warmup Iteration  14: 9406678.533 ops/s
# Warmup Iteration  15: 9403714.505 ops/s
# Warmup Iteration  16: 9430889.864 ops/s
# Warmup Iteration  17: 9356771.538 ops/s
# Warmup Iteration  18: 9358642.165 ops/s
# Warmup Iteration  19: 9444385.467 ops/s
# Warmup Iteration  20: 9368709.659 ops/s
# Warmup Iteration  21: 9376059.720 ops/s
# Warmup Iteration  22: 9373497.137 ops/s
# Warmup Iteration  23: 9405201.281 ops/s
# Warmup Iteration  24: 9382153.105 ops/s
# Warmup Iteration  25: 9411917.109 ops/s
# Warmup Iteration  26: 9409225.607 ops/s
# Warmup Iteration  27: 9421742.856 ops/s
# Warmup Iteration  28: 9379600.908 ops/s
# Warmup Iteration  29: 9397822.136 ops/s
# Warmup Iteration  30: 9380081.817 ops/s
Iteration   1: 9417621.878 ops/s
Iteration   2: 9398117.180 ops/s
Iteration   3: 9367415.185 ops/s
Iteration   4: 9318651.567 ops/s
Iteration   5: 9395379.652 ops/s
Iteration   6: 9367009.881 ops/s
Iteration   7: 9377449.775 ops/s
Iteration   8: 9383067.403 ops/s
Iteration   9: 9404105.476 ops/s
Iteration  10: 9436482.348 ops/s
Iteration  11: 9368205.529 ops/s
Iteration  12: 9413050.427 ops/s
Iteration  13: 9403280.761 ops/s
Iteration  14: 9361775.084 ops/s
Iteration  15: 9419657.139 ops/s
Iteration  16: 9395096.782 ops/s
Iteration  17: 9392576.647 ops/s
Iteration  18: 9403853.595 ops/s
Iteration  19: 9382644.574 ops/s
Iteration  20: 9415033.882 ops/s
Iteration  21: 9382572.000 ops/s
Iteration  22: 9436203.723 ops/s
Iteration  23: 9389730.073 ops/s
Iteration  24: 9414052.628 ops/s
Iteration  25: 9422107.582 ops/s
Iteration  26: 9409761.071 ops/s
Iteration  27: 9379333.457 ops/s
Iteration  28: 9412529.622 ops/s
Iteration  29: 9399523.485 ops/s
Iteration  30: 9410478.488 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWith":
  9395892.230 ±(99.9%) 16457.372 ops/s [Average]
  (min, avg, max) = (9318651.567, 9395892.230, 9436482.348), stdev = 24632.622
  CI (99.9%): [9379434.857, 9412349.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testNewWith  thrpt   30  9395892.230 ± 16457.372  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2684025.154 ops/s
# Warmup Iteration   2: 5686429.378 ops/s
# Warmup Iteration   3: 4870605.346 ops/s
# Warmup Iteration   4: 5799754.799 ops/s
# Warmup Iteration   5: 5782905.589 ops/s
# Warmup Iteration   6: 5792742.360 ops/s
# Warmup Iteration   7: 5807316.263 ops/s
# Warmup Iteration   8: 5781055.138 ops/s
# Warmup Iteration   9: 5780758.275 ops/s
# Warmup Iteration  10: 5787012.863 ops/s
# Warmup Iteration  11: 5771257.649 ops/s
# Warmup Iteration  12: 5785943.022 ops/s
# Warmup Iteration  13: 5780514.851 ops/s
# Warmup Iteration  14: 5778633.056 ops/s
# Warmup Iteration  15: 5786300.197 ops/s
# Warmup Iteration  16: 5784406.763 ops/s
# Warmup Iteration  17: 5786886.318 ops/s
# Warmup Iteration  18: 5781382.334 ops/s
# Warmup Iteration  19: 5789464.303 ops/s
# Warmup Iteration  20: 5786572.819 ops/s
# Warmup Iteration  21: 5796922.959 ops/s
# Warmup Iteration  22: 5770165.544 ops/s
# Warmup Iteration  23: 5787228.384 ops/s
# Warmup Iteration  24: 5764183.947 ops/s
# Warmup Iteration  25: 5794338.556 ops/s
# Warmup Iteration  26: 5791358.915 ops/s
# Warmup Iteration  27: 5794389.535 ops/s
# Warmup Iteration  28: 5785414.534 ops/s
# Warmup Iteration  29: 5789373.081 ops/s
# Warmup Iteration  30: 5764420.210 ops/s
Iteration   1: 5796600.339 ops/s
Iteration   2: 5789825.538 ops/s
Iteration   3: 5807756.626 ops/s
Iteration   4: 5814628.723 ops/s
Iteration   5: 5764531.255 ops/s
Iteration   6: 5794360.259 ops/s
Iteration   7: 5800487.688 ops/s
Iteration   8: 5766779.135 ops/s
Iteration   9: 5711176.997 ops/s
Iteration  10: 5781361.486 ops/s
Iteration  11: 5786659.590 ops/s
Iteration  12: 5795206.799 ops/s
Iteration  13: 5785448.562 ops/s
Iteration  14: 5801718.832 ops/s
Iteration  15: 5803396.304 ops/s
Iteration  16: 5790036.891 ops/s
Iteration  17: 5806260.552 ops/s
Iteration  18: 5796281.451 ops/s
Iteration  19: 5788314.486 ops/s
Iteration  20: 5796669.416 ops/s
Iteration  21: 5795855.862 ops/s
Iteration  22: 5754313.988 ops/s
Iteration  23: 5828841.637 ops/s
Iteration  24: 5776010.258 ops/s
Iteration  25: 5761363.900 ops/s
Iteration  26: 5820037.905 ops/s
Iteration  27: 5772387.585 ops/s
Iteration  28: 5778100.437 ops/s
Iteration  29: 5800142.781 ops/s
Iteration  30: 5784833.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithVarArgs":
  5788312.951 ±(99.9%) 14953.589 ops/s [Average]
  (min, avg, max) = (5711176.997, 5788312.951, 5828841.637), stdev = 22381.829
  CI (99.9%): [5773359.362, 5803266.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  5788312.951 ± 14953.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3100629.448 ops/s
# Warmup Iteration   2: 6304760.803 ops/s
# Warmup Iteration   3: 5996868.172 ops/s
# Warmup Iteration   4: 6682318.210 ops/s
# Warmup Iteration   5: 6693653.899 ops/s
# Warmup Iteration   6: 6706985.710 ops/s
# Warmup Iteration   7: 6702679.164 ops/s
# Warmup Iteration   8: 6681430.621 ops/s
# Warmup Iteration   9: 6706383.174 ops/s
# Warmup Iteration  10: 6688265.171 ops/s
# Warmup Iteration  11: 6699406.592 ops/s
# Warmup Iteration  12: 6707128.064 ops/s
# Warmup Iteration  13: 6668182.165 ops/s
# Warmup Iteration  14: 6674606.874 ops/s
# Warmup Iteration  15: 6690064.137 ops/s
# Warmup Iteration  16: 6695859.454 ops/s
# Warmup Iteration  17: 6697649.772 ops/s
# Warmup Iteration  18: 6719381.415 ops/s
# Warmup Iteration  19: 6704452.197 ops/s
# Warmup Iteration  20: 6691536.939 ops/s
# Warmup Iteration  21: 6699785.905 ops/s
# Warmup Iteration  22: 6731724.581 ops/s
# Warmup Iteration  23: 6703929.183 ops/s
# Warmup Iteration  24: 6719786.697 ops/s
# Warmup Iteration  25: 6700347.969 ops/s
# Warmup Iteration  26: 6734025.346 ops/s
# Warmup Iteration  27: 6715559.601 ops/s
# Warmup Iteration  28: 6704614.407 ops/s
# Warmup Iteration  29: 6709941.994 ops/s
# Warmup Iteration  30: 6710420.809 ops/s
Iteration   1: 6731565.636 ops/s
Iteration   2: 6707075.822 ops/s
Iteration   3: 6700117.755 ops/s
Iteration   4: 6678017.411 ops/s
Iteration   5: 6658692.758 ops/s
Iteration   6: 6703447.042 ops/s
Iteration   7: 6699748.936 ops/s
Iteration   8: 6711382.957 ops/s
Iteration   9: 6718022.499 ops/s
Iteration  10: 6701826.077 ops/s
Iteration  11: 6699269.792 ops/s
Iteration  12: 6733865.362 ops/s
Iteration  13: 6748595.877 ops/s
Iteration  14: 6691016.431 ops/s
Iteration  15: 6672948.159 ops/s
Iteration  16: 6731053.288 ops/s
Iteration  17: 6714222.518 ops/s
Iteration  18: 6662223.764 ops/s
Iteration  19: 6679054.914 ops/s
Iteration  20: 6687570.856 ops/s
Iteration  21: 6685182.019 ops/s
Iteration  22: 6707408.476 ops/s
Iteration  23: 6681826.630 ops/s
Iteration  24: 6698346.371 ops/s
Iteration  25: 6729912.260 ops/s
Iteration  26: 6664552.562 ops/s
Iteration  27: 6711263.960 ops/s
Iteration  28: 6700758.019 ops/s
Iteration  29: 6708298.748 ops/s
Iteration  30: 6713104.332 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWith":
  6701012.374 ±(99.9%) 14841.232 ops/s [Average]
  (min, avg, max) = (6658692.758, 6701012.374, 6748595.877), stdev = 22213.659
  CI (99.9%): [6686171.142, 6715853.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testNewWithWith  thrpt   30  6701012.374 ± 14841.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2910970.137 ops/s
# Warmup Iteration   2: 6136446.216 ops/s
# Warmup Iteration   3: 5151321.324 ops/s
# Warmup Iteration   4: 6123164.927 ops/s
# Warmup Iteration   5: 6106378.840 ops/s
# Warmup Iteration   6: 6113216.505 ops/s
# Warmup Iteration   7: 6090690.046 ops/s
# Warmup Iteration   8: 6136594.827 ops/s
# Warmup Iteration   9: 6107463.451 ops/s
# Warmup Iteration  10: 6107859.116 ops/s
# Warmup Iteration  11: 6084861.980 ops/s
# Warmup Iteration  12: 6124131.017 ops/s
# Warmup Iteration  13: 6100094.086 ops/s
# Warmup Iteration  14: 6099527.982 ops/s
# Warmup Iteration  15: 6110823.128 ops/s
# Warmup Iteration  16: 6104909.181 ops/s
# Warmup Iteration  17: 6098906.362 ops/s
# Warmup Iteration  18: 6114696.534 ops/s
# Warmup Iteration  19: 6123035.936 ops/s
# Warmup Iteration  20: 6114647.029 ops/s
# Warmup Iteration  21: 6121669.140 ops/s
# Warmup Iteration  22: 6113620.964 ops/s
# Warmup Iteration  23: 6131573.732 ops/s
# Warmup Iteration  24: 6116140.710 ops/s
# Warmup Iteration  25: 6119142.457 ops/s
# Warmup Iteration  26: 6129789.520 ops/s
# Warmup Iteration  27: 6113262.469 ops/s
# Warmup Iteration  28: 6121942.997 ops/s
# Warmup Iteration  29: 6115668.982 ops/s
# Warmup Iteration  30: 6110638.880 ops/s
Iteration   1: 6094664.409 ops/s
Iteration   2: 6125950.046 ops/s
Iteration   3: 6088693.131 ops/s
Iteration   4: 6126323.937 ops/s
Iteration   5: 6112664.602 ops/s
Iteration   6: 6124155.359 ops/s
Iteration   7: 6112734.477 ops/s
Iteration   8: 6105044.223 ops/s
Iteration   9: 6092065.408 ops/s
Iteration  10: 6120149.481 ops/s
Iteration  11: 6123067.668 ops/s
Iteration  12: 6087623.620 ops/s
Iteration  13: 6108912.776 ops/s
Iteration  14: 6137097.557 ops/s
Iteration  15: 6135201.601 ops/s
Iteration  16: 6105018.192 ops/s
Iteration  17: 6105572.344 ops/s
Iteration  18: 6122207.261 ops/s
Iteration  19: 6127965.115 ops/s
Iteration  20: 6133005.059 ops/s
Iteration  21: 6092212.666 ops/s
Iteration  22: 6117506.873 ops/s
Iteration  23: 6110142.629 ops/s
Iteration  24: 6103347.363 ops/s
Iteration  25: 6108664.419 ops/s
Iteration  26: 6127701.285 ops/s
Iteration  27: 6136507.341 ops/s
Iteration  28: 6103650.333 ops/s
Iteration  29: 6085601.208 ops/s
Iteration  30: 6112579.453 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testNewWithWithWith":
  6112867.661 ±(99.9%) 10224.696 ops/s [Average]
  (min, avg, max) = (6085601.208, 6112867.661, 6137097.557), stdev = 15303.845
  CI (99.9%): [6102642.965, 6123092.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  6112867.661 ± 10224.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1464046.559 ops/s
# Warmup Iteration   2: 3534962.432 ops/s
# Warmup Iteration   3: 2933340.913 ops/s
# Warmup Iteration   4: 3548938.676 ops/s
# Warmup Iteration   5: 3544124.493 ops/s
# Warmup Iteration   6: 3544021.707 ops/s
# Warmup Iteration   7: 3543291.064 ops/s
# Warmup Iteration   8: 3526007.703 ops/s
# Warmup Iteration   9: 3553387.157 ops/s
# Warmup Iteration  10: 3551270.980 ops/s
# Warmup Iteration  11: 3547940.654 ops/s
# Warmup Iteration  12: 3541760.279 ops/s
# Warmup Iteration  13: 3552076.355 ops/s
# Warmup Iteration  14: 3540308.805 ops/s
# Warmup Iteration  15: 3536616.677 ops/s
# Warmup Iteration  16: 3544663.792 ops/s
# Warmup Iteration  17: 3534173.523 ops/s
# Warmup Iteration  18: 3553000.080 ops/s
# Warmup Iteration  19: 3541885.843 ops/s
# Warmup Iteration  20: 3550902.085 ops/s
# Warmup Iteration  21: 3539966.900 ops/s
# Warmup Iteration  22: 3534572.914 ops/s
# Warmup Iteration  23: 3559117.324 ops/s
# Warmup Iteration  24: 3550074.639 ops/s
# Warmup Iteration  25: 3544038.037 ops/s
# Warmup Iteration  26: 3546059.464 ops/s
# Warmup Iteration  27: 3538265.727 ops/s
# Warmup Iteration  28: 3543851.740 ops/s
# Warmup Iteration  29: 3553315.520 ops/s
# Warmup Iteration  30: 3525750.137 ops/s
Iteration   1: 3535247.676 ops/s
Iteration   2: 3554709.162 ops/s
Iteration   3: 3553172.400 ops/s
Iteration   4: 3555582.072 ops/s
Iteration   5: 3545058.753 ops/s
Iteration   6: 3546630.391 ops/s
Iteration   7: 3552301.999 ops/s
Iteration   8: 3543631.405 ops/s
Iteration   9: 3558346.045 ops/s
Iteration  10: 3533560.516 ops/s
Iteration  11: 3540549.507 ops/s
Iteration  12: 3548227.907 ops/s
Iteration  13: 3543741.962 ops/s
Iteration  14: 3526353.317 ops/s
Iteration  15: 3524916.193 ops/s
Iteration  16: 3550925.864 ops/s
Iteration  17: 3544124.687 ops/s
Iteration  18: 3549807.694 ops/s
Iteration  19: 3554044.408 ops/s
Iteration  20: 3549307.996 ops/s
Iteration  21: 3549246.470 ops/s
Iteration  22: 3546805.420 ops/s
Iteration  23: 3562984.477 ops/s
Iteration  24: 3554797.078 ops/s
Iteration  25: 3553911.995 ops/s
Iteration  26: 3539264.977 ops/s
Iteration  27: 3551703.721 ops/s
Iteration  28: 3540523.024 ops/s
Iteration  29: 3549674.745 ops/s
Iteration  30: 3539564.220 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testToString":
  3546623.869 ±(99.9%) 5907.790 ops/s [Average]
  (min, avg, max) = (3524916.193, 3546623.869, 3562984.477), stdev = 8842.503
  CI (99.9%): [3540716.079, 3552531.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testToString  thrpt   30  3546623.869 ± 5907.790  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testWithMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testWithMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390054.255 ops/s
# Warmup Iteration   2: 3023551.770 ops/s
# Warmup Iteration   3: 2496591.845 ops/s
# Warmup Iteration   4: 2980495.871 ops/s
# Warmup Iteration   5: 3012519.120 ops/s
# Warmup Iteration   6: 3004573.783 ops/s
# Warmup Iteration   7: 3004186.716 ops/s
# Warmup Iteration   8: 3015033.185 ops/s
# Warmup Iteration   9: 3014019.054 ops/s
# Warmup Iteration  10: 3007664.713 ops/s
# Warmup Iteration  11: 3009698.099 ops/s
# Warmup Iteration  12: 3008499.607 ops/s
# Warmup Iteration  13: 3005798.800 ops/s
# Warmup Iteration  14: 3012978.916 ops/s
# Warmup Iteration  15: 3003083.098 ops/s
# Warmup Iteration  16: 3015446.581 ops/s
# Warmup Iteration  17: 3014833.436 ops/s
# Warmup Iteration  18: 3015022.857 ops/s
# Warmup Iteration  19: 3010226.883 ops/s
# Warmup Iteration  20: 3006903.489 ops/s
# Warmup Iteration  21: 3000315.741 ops/s
# Warmup Iteration  22: 3014835.359 ops/s
# Warmup Iteration  23: 3008936.602 ops/s
# Warmup Iteration  24: 3012893.088 ops/s
# Warmup Iteration  25: 3008537.896 ops/s
# Warmup Iteration  26: 3005427.254 ops/s
# Warmup Iteration  27: 3002477.706 ops/s
# Warmup Iteration  28: 3007729.427 ops/s
# Warmup Iteration  29: 3006043.348 ops/s
# Warmup Iteration  30: 3006760.460 ops/s
Iteration   1: 3002861.199 ops/s
Iteration   2: 3015396.072 ops/s
Iteration   3: 3005397.977 ops/s
Iteration   4: 2999194.448 ops/s
Iteration   5: 3020732.331 ops/s
Iteration   6: 3014050.205 ops/s
Iteration   7: 2995213.436 ops/s
Iteration   8: 3018289.045 ops/s
Iteration   9: 3009152.137 ops/s
Iteration  10: 3006397.780 ops/s
Iteration  11: 3015850.953 ops/s
Iteration  12: 3016072.980 ops/s
Iteration  13: 2998217.639 ops/s
Iteration  14: 3006272.984 ops/s
Iteration  15: 3016913.861 ops/s
Iteration  16: 3004075.506 ops/s
Iteration  17: 3004182.190 ops/s
Iteration  18: 3017797.161 ops/s
Iteration  19: 3011940.062 ops/s
Iteration  20: 3007488.910 ops/s
Iteration  21: 3010075.007 ops/s
Iteration  22: 3016061.248 ops/s
Iteration  23: 3012869.038 ops/s
Iteration  24: 3023007.832 ops/s
Iteration  25: 3008710.824 ops/s
Iteration  26: 3015097.996 ops/s
Iteration  27: 3003766.454 ops/s
Iteration  28: 3003935.656 ops/s
Iteration  29: 3009946.893 ops/s
Iteration  30: 3025689.959 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_testWithMethods":
  3010488.593 ±(99.9%) 4991.340 ops/s [Average]
  (min, avg, max) = (2995213.436, 3010488.593, 3025689.959), stdev = 7470.803
  CI (99.9%): [3005497.253, 3015479.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_testWithMethods  thrpt   30  3010488.593 ± 4991.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6611630.498 ops/s
# Warmup Iteration   2: 14064218.671 ops/s
# Warmup Iteration   3: 11979453.875 ops/s
# Warmup Iteration   4: 14232476.985 ops/s
# Warmup Iteration   5: 14234991.154 ops/s
# Warmup Iteration   6: 14203743.484 ops/s
# Warmup Iteration   7: 14235371.421 ops/s
# Warmup Iteration   8: 14242935.439 ops/s
# Warmup Iteration   9: 14232594.072 ops/s
# Warmup Iteration  10: 14194658.026 ops/s
# Warmup Iteration  11: 14236855.393 ops/s
# Warmup Iteration  12: 14258933.903 ops/s
# Warmup Iteration  13: 14284794.175 ops/s
# Warmup Iteration  14: 14285558.223 ops/s
# Warmup Iteration  15: 14183125.031 ops/s
# Warmup Iteration  16: 14231981.097 ops/s
# Warmup Iteration  17: 14180566.045 ops/s
# Warmup Iteration  18: 14249320.364 ops/s
# Warmup Iteration  19: 14244805.385 ops/s
# Warmup Iteration  20: 14172459.299 ops/s
# Warmup Iteration  21: 14233348.386 ops/s
# Warmup Iteration  22: 14203773.492 ops/s
# Warmup Iteration  23: 14177551.214 ops/s
# Warmup Iteration  24: 14237699.122 ops/s
# Warmup Iteration  25: 14289082.647 ops/s
# Warmup Iteration  26: 14252859.282 ops/s
# Warmup Iteration  27: 14250602.781 ops/s
# Warmup Iteration  28: 14202651.600 ops/s
# Warmup Iteration  29: 14230754.663 ops/s
# Warmup Iteration  30: 14311529.297 ops/s
Iteration   1: 14220281.986 ops/s
Iteration   2: 14212613.190 ops/s
Iteration   3: 14246877.924 ops/s
Iteration   4: 14327324.880 ops/s
Iteration   5: 14173164.917 ops/s
Iteration   6: 14248265.299 ops/s
Iteration   7: 14252874.807 ops/s
Iteration   8: 14175236.481 ops/s
Iteration   9: 14291529.361 ops/s
Iteration  10: 14238443.105 ops/s
Iteration  11: 14217442.078 ops/s
Iteration  12: 14265336.821 ops/s
Iteration  13: 14174524.826 ops/s
Iteration  14: 14236800.633 ops/s
Iteration  15: 14276417.682 ops/s
Iteration  16: 14254490.426 ops/s
Iteration  17: 14204010.854 ops/s
Iteration  18: 14162136.923 ops/s
Iteration  19: 14202906.217 ops/s
Iteration  20: 14237983.700 ops/s
Iteration  21: 14219929.307 ops/s
Iteration  22: 14192766.270 ops/s
Iteration  23: 14216080.029 ops/s
Iteration  24: 14253895.161 ops/s
Iteration  25: 14127852.828 ops/s
Iteration  26: 14325337.971 ops/s
Iteration  27: 14187262.581 ops/s
Iteration  28: 14166088.838 ops/s
Iteration  29: 14289657.122 ops/s
Iteration  30: 14198570.605 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toArray":
  14226536.761 ±(99.9%) 31953.578 ops/s [Average]
  (min, avg, max) = (14127852.828, 14226536.761, 14327324.880), stdev = 47826.614
  CI (99.9%): [14194583.183, 14258490.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toArray  thrpt   30  14226536.761 ± 31953.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 934278.451 ops/s
# Warmup Iteration   2: 1539705.588 ops/s
# Warmup Iteration   3: 1836401.695 ops/s
# Warmup Iteration   4: 1849972.284 ops/s
# Warmup Iteration   5: 1846262.710 ops/s
# Warmup Iteration   6: 1580116.528 ops/s
# Warmup Iteration   7: 1767248.520 ops/s
# Warmup Iteration   8: 1848041.423 ops/s
# Warmup Iteration   9: 1845488.601 ops/s
# Warmup Iteration  10: 1847032.026 ops/s
# Warmup Iteration  11: 1846402.592 ops/s
# Warmup Iteration  12: 1849927.014 ops/s
# Warmup Iteration  13: 1845979.479 ops/s
# Warmup Iteration  14: 1850907.619 ops/s
# Warmup Iteration  15: 1849357.021 ops/s
# Warmup Iteration  16: 1847384.346 ops/s
# Warmup Iteration  17: 1849926.644 ops/s
# Warmup Iteration  18: 1845338.374 ops/s
# Warmup Iteration  19: 1851249.789 ops/s
# Warmup Iteration  20: 1844804.439 ops/s
# Warmup Iteration  21: 1840839.299 ops/s
# Warmup Iteration  22: 1847934.293 ops/s
# Warmup Iteration  23: 1853232.341 ops/s
# Warmup Iteration  24: 1849319.027 ops/s
# Warmup Iteration  25: 1850687.168 ops/s
# Warmup Iteration  26: 1846968.923 ops/s
# Warmup Iteration  27: 1847676.377 ops/s
# Warmup Iteration  28: 1848100.638 ops/s
# Warmup Iteration  29: 1850305.541 ops/s
# Warmup Iteration  30: 1848911.310 ops/s
Iteration   1: 1846236.558 ops/s
Iteration   2: 1856114.010 ops/s
Iteration   3: 1843798.353 ops/s
Iteration   4: 1850740.823 ops/s
Iteration   5: 1845028.530 ops/s
Iteration   6: 1851996.453 ops/s
Iteration   7: 1845464.850 ops/s
Iteration   8: 1851070.554 ops/s
Iteration   9: 1849869.911 ops/s
Iteration  10: 1849681.629 ops/s
Iteration  11: 1846507.578 ops/s
Iteration  12: 1844191.780 ops/s
Iteration  13: 1844791.471 ops/s
Iteration  14: 1838177.903 ops/s
Iteration  15: 1854004.229 ops/s
Iteration  16: 1845355.515 ops/s
Iteration  17: 1853300.828 ops/s
Iteration  18: 1847037.989 ops/s
Iteration  19: 1856167.776 ops/s
Iteration  20: 1847881.924 ops/s
Iteration  21: 1850517.815 ops/s
Iteration  22: 1850207.170 ops/s
Iteration  23: 1851180.343 ops/s
Iteration  24: 1845543.791 ops/s
Iteration  25: 1848122.626 ops/s
Iteration  26: 1849223.039 ops/s
Iteration  27: 1850094.238 ops/s
Iteration  28: 1843899.885 ops/s
Iteration  29: 1846055.678 ops/s
Iteration  30: 1844893.628 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBag":
  1848238.563 ±(99.9%) 2675.835 ops/s [Average]
  (min, avg, max) = (1838177.903, 1848238.563, 1856167.776), stdev = 4005.064
  CI (99.9%): [1845562.728, 1850914.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toBag  thrpt   30  1848238.563 ± 2675.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100026.497 ops/s
# Warmup Iteration   2: 131318.336 ops/s
# Warmup Iteration   3: 166919.091 ops/s
# Warmup Iteration   4: 166339.786 ops/s
# Warmup Iteration   5: 167439.821 ops/s
# Warmup Iteration   6: 167591.610 ops/s
# Warmup Iteration   7: 167217.937 ops/s
# Warmup Iteration   8: 161113.509 ops/s
# Warmup Iteration   9: 145821.551 ops/s
# Warmup Iteration  10: 167121.241 ops/s
# Warmup Iteration  11: 168000.519 ops/s
# Warmup Iteration  12: 167761.768 ops/s
# Warmup Iteration  13: 167465.048 ops/s
# Warmup Iteration  14: 167589.026 ops/s
# Warmup Iteration  15: 167528.473 ops/s
# Warmup Iteration  16: 167246.509 ops/s
# Warmup Iteration  17: 172372.451 ops/s
# Warmup Iteration  18: 172224.938 ops/s
# Warmup Iteration  19: 172496.713 ops/s
# Warmup Iteration  20: 172403.539 ops/s
# Warmup Iteration  21: 173079.561 ops/s
# Warmup Iteration  22: 172383.550 ops/s
# Warmup Iteration  23: 172472.572 ops/s
# Warmup Iteration  24: 172988.712 ops/s
# Warmup Iteration  25: 172553.709 ops/s
# Warmup Iteration  26: 172574.019 ops/s
# Warmup Iteration  27: 172747.698 ops/s
# Warmup Iteration  28: 172257.250 ops/s
# Warmup Iteration  29: 172401.292 ops/s
# Warmup Iteration  30: 172445.406 ops/s
Iteration   1: 172505.586 ops/s
Iteration   2: 172887.290 ops/s
Iteration   3: 172859.443 ops/s
Iteration   4: 172110.486 ops/s
Iteration   5: 172606.515 ops/s
Iteration   6: 172351.631 ops/s
Iteration   7: 172310.916 ops/s
Iteration   8: 172664.276 ops/s
Iteration   9: 172409.641 ops/s
Iteration  10: 171930.194 ops/s
Iteration  11: 172005.055 ops/s
Iteration  12: 172228.474 ops/s
Iteration  13: 173012.150 ops/s
Iteration  14: 172955.126 ops/s
Iteration  15: 172488.629 ops/s
Iteration  16: 172842.173 ops/s
Iteration  17: 172204.552 ops/s
Iteration  18: 172366.721 ops/s
Iteration  19: 172441.855 ops/s
Iteration  20: 172659.219 ops/s
Iteration  21: 172903.754 ops/s
Iteration  22: 172616.627 ops/s
Iteration  23: 172703.608 ops/s
Iteration  24: 172936.027 ops/s
Iteration  25: 172550.851 ops/s
Iteration  26: 172438.604 ops/s
Iteration  27: 172331.331 ops/s
Iteration  28: 172406.709 ops/s
Iteration  29: 172249.325 ops/s
Iteration  30: 172591.237 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toBiMap":
  172518.933 ±(99.9%) 192.646 ops/s [Average]
  (min, avg, max) = (171930.194, 172518.933, 173012.150), stdev = 288.344
  CI (99.9%): [172326.287, 172711.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toBiMap  thrpt   30  172518.933 ± 192.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3016754.750 ops/s
# Warmup Iteration   2: 7525596.090 ops/s
# Warmup Iteration   3: 6787211.606 ops/s
# Warmup Iteration   4: 7069619.049 ops/s
# Warmup Iteration   5: 7619322.839 ops/s
# Warmup Iteration   6: 7611289.588 ops/s
# Warmup Iteration   7: 7596068.074 ops/s
# Warmup Iteration   8: 7597563.530 ops/s
# Warmup Iteration   9: 7611703.864 ops/s
# Warmup Iteration  10: 7600645.589 ops/s
# Warmup Iteration  11: 7626027.058 ops/s
# Warmup Iteration  12: 7619234.827 ops/s
# Warmup Iteration  13: 7614137.222 ops/s
# Warmup Iteration  14: 7616238.044 ops/s
# Warmup Iteration  15: 7625790.453 ops/s
# Warmup Iteration  16: 7573169.339 ops/s
# Warmup Iteration  17: 7604625.658 ops/s
# Warmup Iteration  18: 7610700.754 ops/s
# Warmup Iteration  19: 7624195.537 ops/s
# Warmup Iteration  20: 7601457.953 ops/s
# Warmup Iteration  21: 7628505.845 ops/s
# Warmup Iteration  22: 7611650.761 ops/s
# Warmup Iteration  23: 7616510.853 ops/s
# Warmup Iteration  24: 7622241.635 ops/s
# Warmup Iteration  25: 7609935.135 ops/s
# Warmup Iteration  26: 7608764.786 ops/s
# Warmup Iteration  27: 7607499.609 ops/s
# Warmup Iteration  28: 7618908.858 ops/s
# Warmup Iteration  29: 7610824.187 ops/s
# Warmup Iteration  30: 7613661.192 ops/s
Iteration   1: 7635155.435 ops/s
Iteration   2: 7597439.907 ops/s
Iteration   3: 7618287.972 ops/s
Iteration   4: 7610831.274 ops/s
Iteration   5: 7633693.010 ops/s
Iteration   6: 7604640.568 ops/s
Iteration   7: 7612039.967 ops/s
Iteration   8: 7610281.985 ops/s
Iteration   9: 7597631.062 ops/s
Iteration  10: 7643679.011 ops/s
Iteration  11: 7605035.937 ops/s
Iteration  12: 7610820.053 ops/s
Iteration  13: 7609850.505 ops/s
Iteration  14: 7623096.523 ops/s
Iteration  15: 7595299.181 ops/s
Iteration  16: 7639137.570 ops/s
Iteration  17: 7628345.049 ops/s
Iteration  18: 7603348.309 ops/s
Iteration  19: 7626838.944 ops/s
Iteration  20: 7598809.977 ops/s
Iteration  21: 7621712.073 ops/s
Iteration  22: 7609958.430 ops/s
Iteration  23: 7610692.840 ops/s
Iteration  24: 7578237.175 ops/s
Iteration  25: 7640556.141 ops/s
Iteration  26: 7631647.531 ops/s
Iteration  27: 7608852.153 ops/s
Iteration  28: 7637253.617 ops/s
Iteration  29: 7584653.305 ops/s
Iteration  30: 7614829.414 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toCollection":
  7614755.164 ±(99.9%) 11147.525 ops/s [Average]
  (min, avg, max) = (7578237.175, 7614755.164, 7643679.011), stdev = 16685.091
  CI (99.9%): [7603607.639, 7625902.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toCollection  thrpt   30  7614755.164 ± 11147.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4182019.487 ops/s
# Warmup Iteration   2: 8753336.834 ops/s
# Warmup Iteration   3: 8915745.960 ops/s
# Warmup Iteration   4: 8618710.212 ops/s
# Warmup Iteration   5: 7795848.840 ops/s
# Warmup Iteration   6: 8741038.288 ops/s
# Warmup Iteration   7: 8736073.206 ops/s
# Warmup Iteration   8: 8747868.682 ops/s
# Warmup Iteration   9: 8710275.780 ops/s
# Warmup Iteration  10: 8746512.472 ops/s
# Warmup Iteration  11: 8698299.338 ops/s
# Warmup Iteration  12: 8719749.232 ops/s
# Warmup Iteration  13: 8716397.076 ops/s
# Warmup Iteration  14: 8717938.194 ops/s
# Warmup Iteration  15: 8696588.841 ops/s
# Warmup Iteration  16: 8727913.069 ops/s
# Warmup Iteration  17: 8929326.198 ops/s
# Warmup Iteration  18: 8951470.504 ops/s
# Warmup Iteration  19: 8947865.059 ops/s
# Warmup Iteration  20: 8959808.645 ops/s
# Warmup Iteration  21: 9002904.374 ops/s
# Warmup Iteration  22: 8928560.786 ops/s
# Warmup Iteration  23: 8974894.413 ops/s
# Warmup Iteration  24: 8921870.552 ops/s
# Warmup Iteration  25: 8952927.882 ops/s
# Warmup Iteration  26: 8894429.071 ops/s
# Warmup Iteration  27: 8951105.359 ops/s
# Warmup Iteration  28: 8948625.913 ops/s
# Warmup Iteration  29: 8949854.380 ops/s
# Warmup Iteration  30: 9006129.354 ops/s
Iteration   1: 8968782.801 ops/s
Iteration   2: 9003057.404 ops/s
Iteration   3: 9080396.439 ops/s
Iteration   4: 8894920.155 ops/s
Iteration   5: 8947811.519 ops/s
Iteration   6: 8978438.181 ops/s
Iteration   7: 9041317.656 ops/s
Iteration   8: 9089636.934 ops/s
Iteration   9: 8919201.810 ops/s
Iteration  10: 8875464.037 ops/s
Iteration  11: 8998108.493 ops/s
Iteration  12: 9041543.592 ops/s
Iteration  13: 8891205.104 ops/s
Iteration  14: 8923081.961 ops/s
Iteration  15: 8973123.907 ops/s
Iteration  16: 9046051.685 ops/s
Iteration  17: 8921160.076 ops/s
Iteration  18: 8915743.408 ops/s
Iteration  19: 8947592.487 ops/s
Iteration  20: 9025962.283 ops/s
Iteration  21: 9082041.930 ops/s
Iteration  22: 8869086.901 ops/s
Iteration  23: 8953860.935 ops/s
Iteration  24: 8970673.618 ops/s
Iteration  25: 9050630.133 ops/s
Iteration  26: 9079584.700 ops/s
Iteration  27: 8862896.024 ops/s
Iteration  28: 8964851.510 ops/s
Iteration  29: 8990223.510 ops/s
Iteration  30: 9054036.116 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutable":
  8978682.844 ±(99.9%) 46036.283 ops/s [Average]
  (min, avg, max) = (8862896.024, 8978682.844, 9089636.934), stdev = 68904.947
  CI (99.9%): [8932646.560, 9024719.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutable  thrpt   30  8978682.844 ± 46036.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 595449.914 ops/s
# Warmup Iteration   2: 1074020.562 ops/s
# Warmup Iteration   3: 1257901.924 ops/s
# Warmup Iteration   4: 1266884.973 ops/s
# Warmup Iteration   5: 1264517.609 ops/s
# Warmup Iteration   6: 1039199.278 ops/s
# Warmup Iteration   7: 1266790.954 ops/s
# Warmup Iteration   8: 1267691.314 ops/s
# Warmup Iteration   9: 1265912.976 ops/s
# Warmup Iteration  10: 1266871.042 ops/s
# Warmup Iteration  11: 1260210.813 ops/s
# Warmup Iteration  12: 1265875.208 ops/s
# Warmup Iteration  13: 1264157.354 ops/s
# Warmup Iteration  14: 1265361.883 ops/s
# Warmup Iteration  15: 1267496.146 ops/s
# Warmup Iteration  16: 1260384.489 ops/s
# Warmup Iteration  17: 1262974.910 ops/s
# Warmup Iteration  18: 1269781.467 ops/s
# Warmup Iteration  19: 1266763.651 ops/s
# Warmup Iteration  20: 1268237.692 ops/s
# Warmup Iteration  21: 1266065.385 ops/s
# Warmup Iteration  22: 1268514.398 ops/s
# Warmup Iteration  23: 1267463.016 ops/s
# Warmup Iteration  24: 1267160.033 ops/s
# Warmup Iteration  25: 1268702.550 ops/s
# Warmup Iteration  26: 1270988.204 ops/s
# Warmup Iteration  27: 1269089.605 ops/s
# Warmup Iteration  28: 1268403.705 ops/s
# Warmup Iteration  29: 1268622.519 ops/s
# Warmup Iteration  30: 1269490.752 ops/s
Iteration   1: 1265646.220 ops/s
Iteration   2: 1272336.656 ops/s
Iteration   3: 1267662.966 ops/s
Iteration   4: 1265584.202 ops/s
Iteration   5: 1264144.580 ops/s
Iteration   6: 1268267.296 ops/s
Iteration   7: 1269989.591 ops/s
Iteration   8: 1269146.127 ops/s
Iteration   9: 1265207.938 ops/s
Iteration  10: 1265773.834 ops/s
Iteration  11: 1269574.475 ops/s
Iteration  12: 1270109.007 ops/s
Iteration  13: 1266813.376 ops/s
Iteration  14: 1265517.412 ops/s
Iteration  15: 1271919.919 ops/s
Iteration  16: 1267640.955 ops/s
Iteration  17: 1261487.665 ops/s
Iteration  18: 1271674.332 ops/s
Iteration  19: 1268917.892 ops/s
Iteration  20: 1271332.381 ops/s
Iteration  21: 1266443.862 ops/s
Iteration  22: 1264266.125 ops/s
Iteration  23: 1267220.090 ops/s
Iteration  24: 1269295.242 ops/s
Iteration  25: 1271159.751 ops/s
Iteration  26: 1267943.763 ops/s
Iteration  27: 1267948.095 ops/s
Iteration  28: 1269597.148 ops/s
Iteration  29: 1266701.502 ops/s
Iteration  30: 1267871.860 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBag":
  1267906.475 ±(99.9%) 1726.861 ops/s [Average]
  (min, avg, max) = (1261487.665, 1267906.475, 1272336.656), stdev = 2584.685
  CI (99.9%): [1266179.614, 1269633.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1267906.475 ± 1726.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87376.731 ops/s
# Warmup Iteration   2: 116108.346 ops/s
# Warmup Iteration   3: 149870.889 ops/s
# Warmup Iteration   4: 149062.766 ops/s
# Warmup Iteration   5: 149359.847 ops/s
# Warmup Iteration   6: 150006.591 ops/s
# Warmup Iteration   7: 150051.139 ops/s
# Warmup Iteration   8: 139151.614 ops/s
# Warmup Iteration   9: 135348.514 ops/s
# Warmup Iteration  10: 149959.042 ops/s
# Warmup Iteration  11: 149793.713 ops/s
# Warmup Iteration  12: 150093.491 ops/s
# Warmup Iteration  13: 150439.440 ops/s
# Warmup Iteration  14: 150190.443 ops/s
# Warmup Iteration  15: 150141.313 ops/s
# Warmup Iteration  16: 149701.762 ops/s
# Warmup Iteration  17: 154820.244 ops/s
# Warmup Iteration  18: 154434.581 ops/s
# Warmup Iteration  19: 154514.006 ops/s
# Warmup Iteration  20: 154449.482 ops/s
# Warmup Iteration  21: 154219.568 ops/s
# Warmup Iteration  22: 154332.350 ops/s
# Warmup Iteration  23: 154509.095 ops/s
# Warmup Iteration  24: 154597.833 ops/s
# Warmup Iteration  25: 154501.303 ops/s
# Warmup Iteration  26: 154150.186 ops/s
# Warmup Iteration  27: 154273.986 ops/s
# Warmup Iteration  28: 154397.965 ops/s
# Warmup Iteration  29: 154565.065 ops/s
# Warmup Iteration  30: 154111.106 ops/s
Iteration   1: 154280.209 ops/s
Iteration   2: 154523.479 ops/s
Iteration   3: 154498.239 ops/s
Iteration   4: 154342.342 ops/s
Iteration   5: 154456.500 ops/s
Iteration   6: 154302.366 ops/s
Iteration   7: 154674.206 ops/s
Iteration   8: 154350.022 ops/s
Iteration   9: 154992.909 ops/s
Iteration  10: 154951.324 ops/s
Iteration  11: 154231.557 ops/s
Iteration  12: 155087.182 ops/s
Iteration  13: 154264.753 ops/s
Iteration  14: 154270.726 ops/s
Iteration  15: 153977.902 ops/s
Iteration  16: 154304.604 ops/s
Iteration  17: 155100.825 ops/s
Iteration  18: 154471.651 ops/s
Iteration  19: 154130.346 ops/s
Iteration  20: 154665.128 ops/s
Iteration  21: 154075.479 ops/s
Iteration  22: 154113.346 ops/s
Iteration  23: 155195.581 ops/s
Iteration  24: 154072.148 ops/s
Iteration  25: 155134.045 ops/s
Iteration  26: 154345.961 ops/s
Iteration  27: 154088.267 ops/s
Iteration  28: 154421.639 ops/s
Iteration  29: 153931.320 ops/s
Iteration  30: 154745.612 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableBiMap":
  154466.656 ±(99.9%) 245.755 ops/s [Average]
  (min, avg, max) = (153931.320, 154466.656, 155195.581), stdev = 367.835
  CI (99.9%): [154220.901, 154712.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  154466.656 ± 245.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1874354.710 ops/s
# Warmup Iteration   2: 4858123.164 ops/s
# Warmup Iteration   3: 4885555.152 ops/s
# Warmup Iteration   4: 4065758.291 ops/s
# Warmup Iteration   5: 4885238.961 ops/s
# Warmup Iteration   6: 4888642.009 ops/s
# Warmup Iteration   7: 4896010.449 ops/s
# Warmup Iteration   8: 4891720.148 ops/s
# Warmup Iteration   9: 4896789.525 ops/s
# Warmup Iteration  10: 4896922.528 ops/s
# Warmup Iteration  11: 4898153.707 ops/s
# Warmup Iteration  12: 4896841.513 ops/s
# Warmup Iteration  13: 4898929.135 ops/s
# Warmup Iteration  14: 4884068.553 ops/s
# Warmup Iteration  15: 4891703.109 ops/s
# Warmup Iteration  16: 4894643.239 ops/s
# Warmup Iteration  17: 4889271.732 ops/s
# Warmup Iteration  18: 4903264.680 ops/s
# Warmup Iteration  19: 4897094.160 ops/s
# Warmup Iteration  20: 4899364.837 ops/s
# Warmup Iteration  21: 4891443.216 ops/s
# Warmup Iteration  22: 4895712.581 ops/s
# Warmup Iteration  23: 4893851.770 ops/s
# Warmup Iteration  24: 4900511.895 ops/s
# Warmup Iteration  25: 4897264.873 ops/s
# Warmup Iteration  26: 4895291.580 ops/s
# Warmup Iteration  27: 4894506.435 ops/s
# Warmup Iteration  28: 4887225.963 ops/s
# Warmup Iteration  29: 4895635.892 ops/s
# Warmup Iteration  30: 4895154.505 ops/s
Iteration   1: 4898863.939 ops/s
Iteration   2: 4883570.229 ops/s
Iteration   3: 4892740.316 ops/s
Iteration   4: 4890818.034 ops/s
Iteration   5: 4900006.676 ops/s
Iteration   6: 4888297.347 ops/s
Iteration   7: 4897472.980 ops/s
Iteration   8: 4886691.625 ops/s
Iteration   9: 4892474.469 ops/s
Iteration  10: 4907644.172 ops/s
Iteration  11: 4885923.987 ops/s
Iteration  12: 4897830.696 ops/s
Iteration  13: 4896800.554 ops/s
Iteration  14: 4890474.788 ops/s
Iteration  15: 4898138.077 ops/s
Iteration  16: 4911855.023 ops/s
Iteration  17: 4902276.612 ops/s
Iteration  18: 4894487.979 ops/s
Iteration  19: 4895265.357 ops/s
Iteration  20: 4887834.292 ops/s
Iteration  21: 4887962.248 ops/s
Iteration  22: 4892934.877 ops/s
Iteration  23: 4898209.033 ops/s
Iteration  24: 4875090.600 ops/s
Iteration  25: 4910028.704 ops/s
Iteration  26: 4894198.052 ops/s
Iteration  27: 4902575.474 ops/s
Iteration  28: 4909321.549 ops/s
Iteration  29: 4890248.411 ops/s
Iteration  30: 4892587.268 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableList":
  4895087.446 ±(99.9%) 5506.432 ops/s [Average]
  (min, avg, max) = (4875090.600, 4895087.446, 4911855.023), stdev = 8241.769
  CI (99.9%): [4889581.014, 4900593.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableList  thrpt   30  4895087.446 ± 5506.432  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821190.497 ops/s
# Warmup Iteration   2: 1770218.215 ops/s
# Warmup Iteration   3: 1843388.867 ops/s
# Warmup Iteration   4: 1848031.415 ops/s
# Warmup Iteration   5: 1536371.475 ops/s
# Warmup Iteration   6: 1859968.087 ops/s
# Warmup Iteration   7: 1858909.180 ops/s
# Warmup Iteration   8: 1844619.019 ops/s
# Warmup Iteration   9: 1867249.368 ops/s
# Warmup Iteration  10: 1855995.143 ops/s
# Warmup Iteration  11: 1867934.240 ops/s
# Warmup Iteration  12: 1864146.631 ops/s
# Warmup Iteration  13: 1856643.118 ops/s
# Warmup Iteration  14: 1860642.841 ops/s
# Warmup Iteration  15: 1865635.614 ops/s
# Warmup Iteration  16: 1847227.786 ops/s
# Warmup Iteration  17: 1866821.856 ops/s
# Warmup Iteration  18: 1867970.135 ops/s
# Warmup Iteration  19: 1872865.292 ops/s
# Warmup Iteration  20: 1849062.157 ops/s
# Warmup Iteration  21: 1844233.114 ops/s
# Warmup Iteration  22: 1855291.200 ops/s
# Warmup Iteration  23: 1857125.025 ops/s
# Warmup Iteration  24: 1853622.300 ops/s
# Warmup Iteration  25: 1847699.417 ops/s
# Warmup Iteration  26: 1859871.915 ops/s
# Warmup Iteration  27: 1859132.791 ops/s
# Warmup Iteration  28: 1856387.837 ops/s
# Warmup Iteration  29: 1844401.080 ops/s
# Warmup Iteration  30: 1847279.186 ops/s
Iteration   1: 1831610.741 ops/s
Iteration   2: 1859367.401 ops/s
Iteration   3: 1870397.451 ops/s
Iteration   4: 1849051.316 ops/s
Iteration   5: 1867450.299 ops/s
Iteration   6: 1866862.228 ops/s
Iteration   7: 1840061.164 ops/s
Iteration   8: 1851809.567 ops/s
Iteration   9: 1834273.662 ops/s
Iteration  10: 1860744.061 ops/s
Iteration  11: 1849827.875 ops/s
Iteration  12: 1866335.721 ops/s
Iteration  13: 1854113.602 ops/s
Iteration  14: 1842848.841 ops/s
Iteration  15: 1869716.605 ops/s
Iteration  16: 1862466.861 ops/s
Iteration  17: 1878668.434 ops/s
Iteration  18: 1853556.897 ops/s
Iteration  19: 1841378.007 ops/s
Iteration  20: 1863575.100 ops/s
Iteration  21: 1862320.903 ops/s
Iteration  22: 1852106.902 ops/s
Iteration  23: 1843750.369 ops/s
Iteration  24: 1851405.327 ops/s
Iteration  25: 1852152.494 ops/s
Iteration  26: 1869387.413 ops/s
Iteration  27: 1856858.145 ops/s
Iteration  28: 1879669.561 ops/s
Iteration  29: 1855379.718 ops/s
Iteration  30: 1843204.178 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableMap":
  1856011.695 ±(99.9%) 8196.586 ops/s [Average]
  (min, avg, max) = (1831610.741, 1856011.695, 1879669.561), stdev = 12268.265
  CI (99.9%): [1847815.109, 1864208.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1856011.695 ± 8196.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1251376.176 ops/s
# Warmup Iteration   2: 2232553.937 ops/s
# Warmup Iteration   3: 2572791.094 ops/s
# Warmup Iteration   4: 2580992.699 ops/s
# Warmup Iteration   5: 2587140.240 ops/s
# Warmup Iteration   6: 2120438.565 ops/s
# Warmup Iteration   7: 2582295.462 ops/s
# Warmup Iteration   8: 2584038.424 ops/s
# Warmup Iteration   9: 2580624.990 ops/s
# Warmup Iteration  10: 2582777.975 ops/s
# Warmup Iteration  11: 2587711.691 ops/s
# Warmup Iteration  12: 2581886.695 ops/s
# Warmup Iteration  13: 2583504.191 ops/s
# Warmup Iteration  14: 2580867.485 ops/s
# Warmup Iteration  15: 2583914.586 ops/s
# Warmup Iteration  16: 2581276.101 ops/s
# Warmup Iteration  17: 2583231.485 ops/s
# Warmup Iteration  18: 2584947.040 ops/s
# Warmup Iteration  19: 2574450.781 ops/s
# Warmup Iteration  20: 2581174.785 ops/s
# Warmup Iteration  21: 2581754.631 ops/s
# Warmup Iteration  22: 2572160.237 ops/s
# Warmup Iteration  23: 2583792.221 ops/s
# Warmup Iteration  24: 2583142.234 ops/s
# Warmup Iteration  25: 2583092.438 ops/s
# Warmup Iteration  26: 2583039.266 ops/s
# Warmup Iteration  27: 2582995.365 ops/s
# Warmup Iteration  28: 2586300.686 ops/s
# Warmup Iteration  29: 2585595.400 ops/s
# Warmup Iteration  30: 2583160.223 ops/s
Iteration   1: 2578088.950 ops/s
Iteration   2: 2584193.760 ops/s
Iteration   3: 2580758.445 ops/s
Iteration   4: 2580455.611 ops/s
Iteration   5: 2585911.244 ops/s
Iteration   6: 2585539.562 ops/s
Iteration   7: 2578951.393 ops/s
Iteration   8: 2581552.654 ops/s
Iteration   9: 2588025.220 ops/s
Iteration  10: 2578595.367 ops/s
Iteration  11: 2586031.889 ops/s
Iteration  12: 2578834.957 ops/s
Iteration  13: 2585736.328 ops/s
Iteration  14: 2579319.896 ops/s
Iteration  15: 2586183.612 ops/s
Iteration  16: 2580550.503 ops/s
Iteration  17: 2564052.745 ops/s
Iteration  18: 2587015.627 ops/s
Iteration  19: 2583105.013 ops/s
Iteration  20: 2586237.635 ops/s
Iteration  21: 2579028.137 ops/s
Iteration  22: 2585188.932 ops/s
Iteration  23: 2579093.789 ops/s
Iteration  24: 2567187.569 ops/s
Iteration  25: 2584266.265 ops/s
Iteration  26: 2577741.483 ops/s
Iteration  27: 2581706.939 ops/s
Iteration  28: 2588146.628 ops/s
Iteration  29: 2588387.250 ops/s
Iteration  30: 2583663.188 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSet":
  2581785.020 ±(99.9%) 3707.212 ops/s [Average]
  (min, avg, max) = (2564052.745, 2581785.020, 2588387.250), stdev = 5548.781
  CI (99.9%): [2578077.808, 2585492.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSet  thrpt   30  2581785.020 ± 3707.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902144.428 ops/s
# Warmup Iteration   2: 2080239.255 ops/s
# Warmup Iteration   3: 2176306.480 ops/s
# Warmup Iteration   4: 1845694.775 ops/s
# Warmup Iteration   5: 2141511.457 ops/s
# Warmup Iteration   6: 2182847.741 ops/s
# Warmup Iteration   7: 2168110.485 ops/s
# Warmup Iteration   8: 2178243.257 ops/s
# Warmup Iteration   9: 2180278.825 ops/s
# Warmup Iteration  10: 2163129.752 ops/s
# Warmup Iteration  11: 2181901.448 ops/s
# Warmup Iteration  12: 2179658.100 ops/s
# Warmup Iteration  13: 2174204.455 ops/s
# Warmup Iteration  14: 2185150.165 ops/s
# Warmup Iteration  15: 2182042.516 ops/s
# Warmup Iteration  16: 2180694.122 ops/s
# Warmup Iteration  17: 2176199.444 ops/s
# Warmup Iteration  18: 2179756.954 ops/s
# Warmup Iteration  19: 2183278.695 ops/s
# Warmup Iteration  20: 2182548.161 ops/s
# Warmup Iteration  21: 2180541.423 ops/s
# Warmup Iteration  22: 2180024.113 ops/s
# Warmup Iteration  23: 2182378.416 ops/s
# Warmup Iteration  24: 2180128.616 ops/s
# Warmup Iteration  25: 2178659.093 ops/s
# Warmup Iteration  26: 2176945.607 ops/s
# Warmup Iteration  27: 2184256.224 ops/s
# Warmup Iteration  28: 2178394.308 ops/s
# Warmup Iteration  29: 2178679.840 ops/s
# Warmup Iteration  30: 2180124.685 ops/s
Iteration   1: 2178802.557 ops/s
Iteration   2: 2184391.916 ops/s
Iteration   3: 2181345.992 ops/s
Iteration   4: 2173412.602 ops/s
Iteration   5: 2184128.571 ops/s
Iteration   6: 2180143.962 ops/s
Iteration   7: 2183281.779 ops/s
Iteration   8: 2190368.283 ops/s
Iteration   9: 2175749.557 ops/s
Iteration  10: 2177705.939 ops/s
Iteration  11: 2188441.309 ops/s
Iteration  12: 2185288.845 ops/s
Iteration  13: 2180437.655 ops/s
Iteration  14: 2180921.535 ops/s
Iteration  15: 2185668.444 ops/s
Iteration  16: 2174718.592 ops/s
Iteration  17: 2182596.237 ops/s
Iteration  18: 2186153.051 ops/s
Iteration  19: 2181125.311 ops/s
Iteration  20: 2181736.289 ops/s
Iteration  21: 2177220.867 ops/s
Iteration  22: 2178473.170 ops/s
Iteration  23: 2167802.651 ops/s
Iteration  24: 2185800.775 ops/s
Iteration  25: 2180167.475 ops/s
Iteration  26: 2183160.013 ops/s
Iteration  27: 2175283.950 ops/s
Iteration  28: 2188575.022 ops/s
Iteration  29: 2180778.847 ops/s
Iteration  30: 2174457.227 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2180937.947 ±(99.9%) 3368.029 ops/s [Average]
  (min, avg, max) = (2167802.651, 2180937.947, 2190368.283), stdev = 5041.108
  CI (99.9%): [2177569.918, 2184305.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2180937.947 ± 3368.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264411.598 ops/s
# Warmup Iteration   2: 460009.226 ops/s
# Warmup Iteration   3: 578960.729 ops/s
# Warmup Iteration   4: 583835.963 ops/s
# Warmup Iteration   5: 584245.328 ops/s
# Warmup Iteration   6: 517596.708 ops/s
# Warmup Iteration   7: 536610.386 ops/s
# Warmup Iteration   8: 583284.562 ops/s
# Warmup Iteration   9: 584511.583 ops/s
# Warmup Iteration  10: 584840.002 ops/s
# Warmup Iteration  11: 584167.526 ops/s
# Warmup Iteration  12: 584631.131 ops/s
# Warmup Iteration  13: 584169.777 ops/s
# Warmup Iteration  14: 583395.060 ops/s
# Warmup Iteration  15: 584526.300 ops/s
# Warmup Iteration  16: 582839.751 ops/s
# Warmup Iteration  17: 583835.391 ops/s
# Warmup Iteration  18: 583577.377 ops/s
# Warmup Iteration  19: 583765.872 ops/s
# Warmup Iteration  20: 583008.244 ops/s
# Warmup Iteration  21: 584786.390 ops/s
# Warmup Iteration  22: 584029.077 ops/s
# Warmup Iteration  23: 583650.120 ops/s
# Warmup Iteration  24: 583321.706 ops/s
# Warmup Iteration  25: 583061.924 ops/s
# Warmup Iteration  26: 583265.826 ops/s
# Warmup Iteration  27: 583184.929 ops/s
# Warmup Iteration  28: 584567.239 ops/s
# Warmup Iteration  29: 583429.210 ops/s
# Warmup Iteration  30: 585036.934 ops/s
Iteration   1: 582594.098 ops/s
Iteration   2: 584552.749 ops/s
Iteration   3: 583509.823 ops/s
Iteration   4: 584236.887 ops/s
Iteration   5: 583783.398 ops/s
Iteration   6: 584157.716 ops/s
Iteration   7: 582716.193 ops/s
Iteration   8: 584493.037 ops/s
Iteration   9: 583071.643 ops/s
Iteration  10: 583460.015 ops/s
Iteration  11: 584854.109 ops/s
Iteration  12: 582350.362 ops/s
Iteration  13: 584440.446 ops/s
Iteration  14: 582936.346 ops/s
Iteration  15: 585162.472 ops/s
Iteration  16: 582025.486 ops/s
Iteration  17: 585079.467 ops/s
Iteration  18: 582442.264 ops/s
Iteration  19: 583456.200 ops/s
Iteration  20: 584410.450 ops/s
Iteration  21: 585559.488 ops/s
Iteration  22: 582039.334 ops/s
Iteration  23: 585286.778 ops/s
Iteration  24: 583976.881 ops/s
Iteration  25: 584660.370 ops/s
Iteration  26: 584263.665 ops/s
Iteration  27: 584308.676 ops/s
Iteration  28: 583846.293 ops/s
Iteration  29: 585647.922 ops/s
Iteration  30: 583389.554 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy":
  583890.404 ±(99.9%) 691.459 ops/s [Average]
  (min, avg, max) = (582025.486, 583890.404, 585647.922), stdev = 1034.944
  CI (99.9%): [583198.945, 584581.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  583890.404 ± 691.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344473.981 ops/s
# Warmup Iteration   2: 541639.573 ops/s
# Warmup Iteration   3: 666610.666 ops/s
# Warmup Iteration   4: 662741.811 ops/s
# Warmup Iteration   5: 667406.031 ops/s
# Warmup Iteration   6: 667127.200 ops/s
# Warmup Iteration   7: 556899.072 ops/s
# Warmup Iteration   8: 667509.645 ops/s
# Warmup Iteration   9: 667650.108 ops/s
# Warmup Iteration  10: 668713.812 ops/s
# Warmup Iteration  11: 666779.841 ops/s
# Warmup Iteration  12: 667911.636 ops/s
# Warmup Iteration  13: 666985.238 ops/s
# Warmup Iteration  14: 668008.151 ops/s
# Warmup Iteration  15: 665840.906 ops/s
# Warmup Iteration  16: 667641.511 ops/s
# Warmup Iteration  17: 666563.312 ops/s
# Warmup Iteration  18: 668368.935 ops/s
# Warmup Iteration  19: 667993.656 ops/s
# Warmup Iteration  20: 666922.584 ops/s
# Warmup Iteration  21: 668717.517 ops/s
# Warmup Iteration  22: 666088.434 ops/s
# Warmup Iteration  23: 666851.474 ops/s
# Warmup Iteration  24: 667890.519 ops/s
# Warmup Iteration  25: 667773.158 ops/s
# Warmup Iteration  26: 667612.719 ops/s
# Warmup Iteration  27: 667623.634 ops/s
# Warmup Iteration  28: 667014.987 ops/s
# Warmup Iteration  29: 668282.576 ops/s
# Warmup Iteration  30: 667360.064 ops/s
Iteration   1: 668347.875 ops/s
Iteration   2: 666442.491 ops/s
Iteration   3: 667437.947 ops/s
Iteration   4: 668176.449 ops/s
Iteration   5: 666137.815 ops/s
Iteration   6: 668693.521 ops/s
Iteration   7: 666757.972 ops/s
Iteration   8: 668122.783 ops/s
Iteration   9: 667924.220 ops/s
Iteration  10: 667403.635 ops/s
Iteration  11: 668678.486 ops/s
Iteration  12: 667839.296 ops/s
Iteration  13: 667958.364 ops/s
Iteration  14: 665857.398 ops/s
Iteration  15: 667629.505 ops/s
Iteration  16: 668217.677 ops/s
Iteration  17: 667965.221 ops/s
Iteration  18: 668011.935 ops/s
Iteration  19: 667004.497 ops/s
Iteration  20: 669073.869 ops/s
Iteration  21: 668977.526 ops/s
Iteration  22: 667633.848 ops/s
Iteration  23: 665853.317 ops/s
Iteration  24: 666663.838 ops/s
Iteration  25: 665486.952 ops/s
Iteration  26: 668959.218 ops/s
Iteration  27: 665651.811 ops/s
Iteration  28: 669858.583 ops/s
Iteration  29: 671434.740 ops/s
Iteration  30: 667202.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  667713.434 ±(99.9%) 875.764 ops/s [Average]
  (min, avg, max) = (665486.952, 667713.434, 671434.740), stdev = 1310.802
  CI (99.9%): [666837.670, 668589.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  667713.434 ± 875.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522137.207 ops/s
# Warmup Iteration   2: 999503.442 ops/s
# Warmup Iteration   3: 1154860.651 ops/s
# Warmup Iteration   4: 1154227.947 ops/s
# Warmup Iteration   5: 1160342.001 ops/s
# Warmup Iteration   6: 962988.829 ops/s
# Warmup Iteration   7: 1154665.062 ops/s
# Warmup Iteration   8: 1156989.573 ops/s
# Warmup Iteration   9: 1156446.640 ops/s
# Warmup Iteration  10: 1156649.617 ops/s
# Warmup Iteration  11: 1159412.414 ops/s
# Warmup Iteration  12: 1158286.457 ops/s
# Warmup Iteration  13: 1157892.684 ops/s
# Warmup Iteration  14: 1157087.042 ops/s
# Warmup Iteration  15: 1159066.197 ops/s
# Warmup Iteration  16: 1158084.831 ops/s
# Warmup Iteration  17: 1157721.076 ops/s
# Warmup Iteration  18: 1156748.088 ops/s
# Warmup Iteration  19: 1159019.610 ops/s
# Warmup Iteration  20: 1156093.573 ops/s
# Warmup Iteration  21: 1158647.829 ops/s
# Warmup Iteration  22: 1158140.047 ops/s
# Warmup Iteration  23: 1154630.905 ops/s
# Warmup Iteration  24: 1158838.907 ops/s
# Warmup Iteration  25: 1158138.140 ops/s
# Warmup Iteration  26: 1158902.675 ops/s
# Warmup Iteration  27: 1158552.839 ops/s
# Warmup Iteration  28: 1158079.545 ops/s
# Warmup Iteration  29: 1159368.848 ops/s
# Warmup Iteration  30: 1158295.145 ops/s
Iteration   1: 1156745.749 ops/s
Iteration   2: 1158043.839 ops/s
Iteration   3: 1156276.563 ops/s
Iteration   4: 1157875.804 ops/s
Iteration   5: 1158821.974 ops/s
Iteration   6: 1158455.070 ops/s
Iteration   7: 1159787.444 ops/s
Iteration   8: 1159618.457 ops/s
Iteration   9: 1161406.359 ops/s
Iteration  10: 1158071.503 ops/s
Iteration  11: 1158400.326 ops/s
Iteration  12: 1161289.642 ops/s
Iteration  13: 1156734.495 ops/s
Iteration  14: 1159937.451 ops/s
Iteration  15: 1160205.388 ops/s
Iteration  16: 1155310.874 ops/s
Iteration  17: 1160066.110 ops/s
Iteration  18: 1159417.284 ops/s
Iteration  19: 1159669.106 ops/s
Iteration  20: 1155731.117 ops/s
Iteration  21: 1159171.735 ops/s
Iteration  22: 1156224.855 ops/s
Iteration  23: 1157664.147 ops/s
Iteration  24: 1160532.887 ops/s
Iteration  25: 1157825.367 ops/s
Iteration  26: 1154765.035 ops/s
Iteration  27: 1159295.458 ops/s
Iteration  28: 1155717.022 ops/s
Iteration  29: 1161903.342 ops/s
Iteration  30: 1156972.607 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1158397.900 ±(99.9%) 1274.254 ops/s [Average]
  (min, avg, max) = (1154765.035, 1158397.900, 1161903.342), stdev = 1907.244
  CI (99.9%): [1157123.646, 1159672.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1158397.900 ± 1274.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2684198.164 ops/s
# Warmup Iteration   2: 6320908.535 ops/s
# Warmup Iteration   3: 5336558.410 ops/s
# Warmup Iteration   4: 6423370.306 ops/s
# Warmup Iteration   5: 6428229.422 ops/s
# Warmup Iteration   6: 6408287.797 ops/s
# Warmup Iteration   7: 6413187.796 ops/s
# Warmup Iteration   8: 6413795.747 ops/s
# Warmup Iteration   9: 6398159.858 ops/s
# Warmup Iteration  10: 6418630.898 ops/s
# Warmup Iteration  11: 6435412.757 ops/s
# Warmup Iteration  12: 6402976.421 ops/s
# Warmup Iteration  13: 6412953.895 ops/s
# Warmup Iteration  14: 6436282.330 ops/s
# Warmup Iteration  15: 6415256.972 ops/s
# Warmup Iteration  16: 6422030.324 ops/s
# Warmup Iteration  17: 6430546.051 ops/s
# Warmup Iteration  18: 6410062.799 ops/s
# Warmup Iteration  19: 6429723.726 ops/s
# Warmup Iteration  20: 6409837.376 ops/s
# Warmup Iteration  21: 6407733.254 ops/s
# Warmup Iteration  22: 6419214.043 ops/s
# Warmup Iteration  23: 6421547.340 ops/s
# Warmup Iteration  24: 6414608.565 ops/s
# Warmup Iteration  25: 6438455.368 ops/s
# Warmup Iteration  26: 6415714.673 ops/s
# Warmup Iteration  27: 6410183.195 ops/s
# Warmup Iteration  28: 6439419.358 ops/s
# Warmup Iteration  29: 6415663.420 ops/s
# Warmup Iteration  30: 6412211.480 ops/s
Iteration   1: 6415202.081 ops/s
Iteration   2: 6418673.683 ops/s
Iteration   3: 6411033.518 ops/s
Iteration   4: 6426950.967 ops/s
Iteration   5: 6431672.034 ops/s
Iteration   6: 6409658.124 ops/s
Iteration   7: 6443006.687 ops/s
Iteration   8: 6433698.330 ops/s
Iteration   9: 6419513.342 ops/s
Iteration  10: 6433973.826 ops/s
Iteration  11: 6422613.497 ops/s
Iteration  12: 6413631.415 ops/s
Iteration  13: 6407281.453 ops/s
Iteration  14: 6388006.534 ops/s
Iteration  15: 6410285.795 ops/s
Iteration  16: 6431563.122 ops/s
Iteration  17: 6435621.824 ops/s
Iteration  18: 6410298.322 ops/s
Iteration  19: 6418585.123 ops/s
Iteration  20: 6427610.478 ops/s
Iteration  21: 6416744.608 ops/s
Iteration  22: 6435588.375 ops/s
Iteration  23: 6427386.165 ops/s
Iteration  24: 6407585.773 ops/s
Iteration  25: 6437643.250 ops/s
Iteration  26: 6407764.737 ops/s
Iteration  27: 6389490.972 ops/s
Iteration  28: 6421640.677 ops/s
Iteration  29: 6419076.657 ops/s
Iteration  30: 6390614.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy":
  6418747.200 ±(99.9%) 9482.723 ops/s [Average]
  (min, avg, max) = (6388006.534, 6418747.200, 6443006.687), stdev = 14193.295
  CI (99.9%): [6409264.476, 6428229.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  6418747.200 ± 9482.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1826094.038 ops/s
# Warmup Iteration   2: 2806019.932 ops/s
# Warmup Iteration   3: 3294408.648 ops/s
# Warmup Iteration   4: 3326851.144 ops/s
# Warmup Iteration   5: 3325238.369 ops/s
# Warmup Iteration   6: 3336520.351 ops/s
# Warmup Iteration   7: 2755383.926 ops/s
# Warmup Iteration   8: 3324976.188 ops/s
# Warmup Iteration   9: 3328862.472 ops/s
# Warmup Iteration  10: 3323949.587 ops/s
# Warmup Iteration  11: 3323196.741 ops/s
# Warmup Iteration  12: 3324327.183 ops/s
# Warmup Iteration  13: 3326833.862 ops/s
# Warmup Iteration  14: 3325257.833 ops/s
# Warmup Iteration  15: 3325289.183 ops/s
# Warmup Iteration  16: 3338149.284 ops/s
# Warmup Iteration  17: 3327989.461 ops/s
# Warmup Iteration  18: 3326213.346 ops/s
# Warmup Iteration  19: 3322554.389 ops/s
# Warmup Iteration  20: 3322021.940 ops/s
# Warmup Iteration  21: 3330619.157 ops/s
# Warmup Iteration  22: 3331710.310 ops/s
# Warmup Iteration  23: 3333105.986 ops/s
# Warmup Iteration  24: 3326213.802 ops/s
# Warmup Iteration  25: 3320356.204 ops/s
# Warmup Iteration  26: 3324319.630 ops/s
# Warmup Iteration  27: 3324620.168 ops/s
# Warmup Iteration  28: 3332757.806 ops/s
# Warmup Iteration  29: 3322804.387 ops/s
# Warmup Iteration  30: 3324039.756 ops/s
Iteration   1: 3326551.465 ops/s
Iteration   2: 3335606.111 ops/s
Iteration   3: 3329725.014 ops/s
Iteration   4: 3325469.265 ops/s
Iteration   5: 3319991.202 ops/s
Iteration   6: 3332600.915 ops/s
Iteration   7: 3321187.369 ops/s
Iteration   8: 3326630.863 ops/s
Iteration   9: 3325583.201 ops/s
Iteration  10: 3332548.733 ops/s
Iteration  11: 3334857.320 ops/s
Iteration  12: 3323270.861 ops/s
Iteration  13: 3328003.940 ops/s
Iteration  14: 3327901.345 ops/s
Iteration  15: 3335253.691 ops/s
Iteration  16: 3323754.935 ops/s
Iteration  17: 3329701.617 ops/s
Iteration  18: 3324900.871 ops/s
Iteration  19: 3326806.409 ops/s
Iteration  20: 3326400.566 ops/s
Iteration  21: 3328702.440 ops/s
Iteration  22: 3323720.773 ops/s
Iteration  23: 3334781.776 ops/s
Iteration  24: 3319344.164 ops/s
Iteration  25: 3325527.071 ops/s
Iteration  26: 3325164.819 ops/s
Iteration  27: 3309826.956 ops/s
Iteration  28: 3335950.325 ops/s
Iteration  29: 3320926.604 ops/s
Iteration  30: 3326541.528 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  3326907.738 ±(99.9%) 3823.324 ops/s [Average]
  (min, avg, max) = (3309826.956, 3326907.738, 3335950.325), stdev = 5722.572
  CI (99.9%): [3323084.414, 3330731.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  3326907.738 ± 3823.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5523553.103 ops/s
# Warmup Iteration   2: 13449335.060 ops/s
# Warmup Iteration   3: 13515255.387 ops/s
# Warmup Iteration   4: 11204807.469 ops/s
# Warmup Iteration   5: 13513248.917 ops/s
# Warmup Iteration   6: 13471966.890 ops/s
# Warmup Iteration   7: 13531910.756 ops/s
# Warmup Iteration   8: 13508965.506 ops/s
# Warmup Iteration   9: 13507974.593 ops/s
# Warmup Iteration  10: 13521828.871 ops/s
# Warmup Iteration  11: 13520065.212 ops/s
# Warmup Iteration  12: 13529090.666 ops/s
# Warmup Iteration  13: 13581268.705 ops/s
# Warmup Iteration  14: 13485320.155 ops/s
# Warmup Iteration  15: 13512926.084 ops/s
# Warmup Iteration  16: 13507284.547 ops/s
# Warmup Iteration  17: 13547207.146 ops/s
# Warmup Iteration  18: 13455383.858 ops/s
# Warmup Iteration  19: 13516500.028 ops/s
# Warmup Iteration  20: 13536900.690 ops/s
# Warmup Iteration  21: 13518685.844 ops/s
# Warmup Iteration  22: 13501063.596 ops/s
# Warmup Iteration  23: 13537615.431 ops/s
# Warmup Iteration  24: 13524859.541 ops/s
# Warmup Iteration  25: 13493727.147 ops/s
# Warmup Iteration  26: 13527136.295 ops/s
# Warmup Iteration  27: 13528544.019 ops/s
# Warmup Iteration  28: 13525630.300 ops/s
# Warmup Iteration  29: 13555586.356 ops/s
# Warmup Iteration  30: 13526862.335 ops/s
Iteration   1: 13507000.577 ops/s
Iteration   2: 13531624.531 ops/s
Iteration   3: 13541977.691 ops/s
Iteration   4: 13525774.527 ops/s
Iteration   5: 13547061.652 ops/s
Iteration   6: 13548458.412 ops/s
Iteration   7: 13548238.567 ops/s
Iteration   8: 13569868.447 ops/s
Iteration   9: 13544300.645 ops/s
Iteration  10: 13472639.291 ops/s
Iteration  11: 13529164.989 ops/s
Iteration  12: 13534711.571 ops/s
Iteration  13: 13535178.373 ops/s
Iteration  14: 13546699.375 ops/s
Iteration  15: 13482146.101 ops/s
Iteration  16: 13539779.029 ops/s
Iteration  17: 13513478.911 ops/s
Iteration  18: 13513191.344 ops/s
Iteration  19: 13517145.806 ops/s
Iteration  20: 13544411.748 ops/s
Iteration  21: 13557048.899 ops/s
Iteration  22: 13502419.662 ops/s
Iteration  23: 13565822.619 ops/s
Iteration  24: 13540985.144 ops/s
Iteration  25: 13525207.175 ops/s
Iteration  26: 13530787.472 ops/s
Iteration  27: 13573547.788 ops/s
Iteration  28: 13542405.940 ops/s
Iteration  29: 13485614.507 ops/s
Iteration  30: 13542676.957 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  13531978.925 ±(99.9%) 16350.164 ops/s [Average]
  (min, avg, max) = (13472639.291, 13531978.925, 13573547.788), stdev = 24472.157
  CI (99.9%): [13515628.761, 13548329.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  13531978.925 ± 16350.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617602.976 ops/s
# Warmup Iteration   2: 1245780.686 ops/s
# Warmup Iteration   3: 1412530.717 ops/s
# Warmup Iteration   4: 1428256.956 ops/s
# Warmup Iteration   5: 1151304.203 ops/s
# Warmup Iteration   6: 1429032.281 ops/s
# Warmup Iteration   7: 1427855.876 ops/s
# Warmup Iteration   8: 1429455.169 ops/s
# Warmup Iteration   9: 1427680.144 ops/s
# Warmup Iteration  10: 1428075.880 ops/s
# Warmup Iteration  11: 1424669.771 ops/s
# Warmup Iteration  12: 1428119.758 ops/s
# Warmup Iteration  13: 1430739.628 ops/s
# Warmup Iteration  14: 1427869.621 ops/s
# Warmup Iteration  15: 1430563.121 ops/s
# Warmup Iteration  16: 1428250.002 ops/s
# Warmup Iteration  17: 1425665.289 ops/s
# Warmup Iteration  18: 1429517.335 ops/s
# Warmup Iteration  19: 1426399.729 ops/s
# Warmup Iteration  20: 1427750.651 ops/s
# Warmup Iteration  21: 1429562.350 ops/s
# Warmup Iteration  22: 1429569.837 ops/s
# Warmup Iteration  23: 1427511.307 ops/s
# Warmup Iteration  24: 1428525.789 ops/s
# Warmup Iteration  25: 1426578.615 ops/s
# Warmup Iteration  26: 1428550.554 ops/s
# Warmup Iteration  27: 1430972.932 ops/s
# Warmup Iteration  28: 1430196.866 ops/s
# Warmup Iteration  29: 1427379.213 ops/s
# Warmup Iteration  30: 1428886.485 ops/s
Iteration   1: 1428924.326 ops/s
Iteration   2: 1428884.787 ops/s
Iteration   3: 1426349.189 ops/s
Iteration   4: 1422886.094 ops/s
Iteration   5: 1431474.814 ops/s
Iteration   6: 1420912.136 ops/s
Iteration   7: 1423817.993 ops/s
Iteration   8: 1430194.452 ops/s
Iteration   9: 1431623.800 ops/s
Iteration  10: 1430415.216 ops/s
Iteration  11: 1427003.251 ops/s
Iteration  12: 1429684.545 ops/s
Iteration  13: 1427338.637 ops/s
Iteration  14: 1429086.345 ops/s
Iteration  15: 1430317.810 ops/s
Iteration  16: 1427968.768 ops/s
Iteration  17: 1426984.177 ops/s
Iteration  18: 1428085.922 ops/s
Iteration  19: 1430776.816 ops/s
Iteration  20: 1432423.907 ops/s
Iteration  21: 1429686.432 ops/s
Iteration  22: 1429322.468 ops/s
Iteration  23: 1430106.581 ops/s
Iteration  24: 1430457.984 ops/s
Iteration  25: 1427255.721 ops/s
Iteration  26: 1430255.481 ops/s
Iteration  27: 1427050.854 ops/s
Iteration  28: 1430114.298 ops/s
Iteration  29: 1430374.204 ops/s
Iteration  30: 1431094.454 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1428695.715 ±(99.9%) 1754.621 ops/s [Average]
  (min, avg, max) = (1420912.136, 1428695.715, 1432423.907), stdev = 2626.234
  CI (99.9%): [1426941.095, 1430450.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1428695.715 ± 1754.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 982014.790 ops/s
# Warmup Iteration   2: 2205733.273 ops/s
# Warmup Iteration   3: 2309227.933 ops/s
# Warmup Iteration   4: 2237629.622 ops/s
# Warmup Iteration   5: 2016242.670 ops/s
# Warmup Iteration   6: 2323065.030 ops/s
# Warmup Iteration   7: 2316443.571 ops/s
# Warmup Iteration   8: 2323568.557 ops/s
# Warmup Iteration   9: 2320168.837 ops/s
# Warmup Iteration  10: 2315594.116 ops/s
# Warmup Iteration  11: 2323715.234 ops/s
# Warmup Iteration  12: 2320915.122 ops/s
# Warmup Iteration  13: 2321653.384 ops/s
# Warmup Iteration  14: 2321808.894 ops/s
# Warmup Iteration  15: 2324517.074 ops/s
# Warmup Iteration  16: 2321181.887 ops/s
# Warmup Iteration  17: 2322928.326 ops/s
# Warmup Iteration  18: 2319128.858 ops/s
# Warmup Iteration  19: 2319680.972 ops/s
# Warmup Iteration  20: 2321109.578 ops/s
# Warmup Iteration  21: 2321486.805 ops/s
# Warmup Iteration  22: 2318817.041 ops/s
# Warmup Iteration  23: 2318203.848 ops/s
# Warmup Iteration  24: 2319712.346 ops/s
# Warmup Iteration  25: 2326773.205 ops/s
# Warmup Iteration  26: 2319508.191 ops/s
# Warmup Iteration  27: 2319899.617 ops/s
# Warmup Iteration  28: 2326760.575 ops/s
# Warmup Iteration  29: 2320157.760 ops/s
# Warmup Iteration  30: 2325200.534 ops/s
Iteration   1: 2330665.127 ops/s
Iteration   2: 2321900.627 ops/s
Iteration   3: 2323380.659 ops/s
Iteration   4: 2321837.969 ops/s
Iteration   5: 2310971.798 ops/s
Iteration   6: 2320503.186 ops/s
Iteration   7: 2318481.013 ops/s
Iteration   8: 2318738.137 ops/s
Iteration   9: 2321262.122 ops/s
Iteration  10: 2320507.715 ops/s
Iteration  11: 2321057.074 ops/s
Iteration  12: 2323064.852 ops/s
Iteration  13: 2322725.880 ops/s
Iteration  14: 2321047.765 ops/s
Iteration  15: 2323091.633 ops/s
Iteration  16: 2318196.179 ops/s
Iteration  17: 2331148.366 ops/s
Iteration  18: 2322777.092 ops/s
Iteration  19: 2326778.048 ops/s
Iteration  20: 2319825.010 ops/s
Iteration  21: 2311129.313 ops/s
Iteration  22: 2326445.729 ops/s
Iteration  23: 2306844.232 ops/s
Iteration  24: 2313497.692 ops/s
Iteration  25: 2322001.066 ops/s
Iteration  26: 2321400.116 ops/s
Iteration  27: 2318732.237 ops/s
Iteration  28: 2309759.721 ops/s
Iteration  29: 2323791.597 ops/s
Iteration  30: 2322506.515 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2320468.949 ±(99.9%) 3704.523 ops/s [Average]
  (min, avg, max) = (2306844.232, 2320468.949, 2331148.366), stdev = 5544.756
  CI (99.9%): [2316764.426, 2324173.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2320468.949 ± 3704.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7384941.706 ops/s
# Warmup Iteration   2: 17313327.891 ops/s
# Warmup Iteration   3: 16268498.665 ops/s
# Warmup Iteration   4: 15445672.064 ops/s
# Warmup Iteration   5: 17299873.358 ops/s
# Warmup Iteration   6: 17303220.694 ops/s
# Warmup Iteration   7: 17308285.177 ops/s
# Warmup Iteration   8: 17366407.098 ops/s
# Warmup Iteration   9: 17294636.986 ops/s
# Warmup Iteration  10: 17304515.106 ops/s
# Warmup Iteration  11: 17305380.115 ops/s
# Warmup Iteration  12: 17283730.152 ops/s
# Warmup Iteration  13: 17337556.716 ops/s
# Warmup Iteration  14: 17290962.640 ops/s
# Warmup Iteration  15: 17323761.008 ops/s
# Warmup Iteration  16: 17315474.857 ops/s
# Warmup Iteration  17: 17291471.341 ops/s
# Warmup Iteration  18: 17290700.237 ops/s
# Warmup Iteration  19: 17320877.488 ops/s
# Warmup Iteration  20: 17321625.440 ops/s
# Warmup Iteration  21: 17320635.209 ops/s
# Warmup Iteration  22: 17345328.996 ops/s
# Warmup Iteration  23: 17313437.246 ops/s
# Warmup Iteration  24: 17337252.248 ops/s
# Warmup Iteration  25: 17289856.163 ops/s
# Warmup Iteration  26: 17308088.830 ops/s
# Warmup Iteration  27: 17292945.549 ops/s
# Warmup Iteration  28: 17317368.553 ops/s
# Warmup Iteration  29: 17324159.032 ops/s
# Warmup Iteration  30: 17317788.818 ops/s
Iteration   1: 17330831.703 ops/s
Iteration   2: 17293120.564 ops/s
Iteration   3: 17352971.179 ops/s
Iteration   4: 17323561.905 ops/s
Iteration   5: 17328901.991 ops/s
Iteration   6: 17294117.711 ops/s
Iteration   7: 17299128.118 ops/s
Iteration   8: 17312166.650 ops/s
Iteration   9: 17356464.753 ops/s
Iteration  10: 17314071.747 ops/s
Iteration  11: 17250655.496 ops/s
Iteration  12: 17350706.307 ops/s
Iteration  13: 17313547.030 ops/s
Iteration  14: 17340326.124 ops/s
Iteration  15: 17288115.814 ops/s
Iteration  16: 17334816.710 ops/s
Iteration  17: 17277406.607 ops/s
Iteration  18: 17263876.352 ops/s
Iteration  19: 17315387.187 ops/s
Iteration  20: 17246585.523 ops/s
Iteration  21: 17306415.067 ops/s
Iteration  22: 17295975.452 ops/s
Iteration  23: 17274229.273 ops/s
Iteration  24: 17248999.440 ops/s
Iteration  25: 17283064.714 ops/s
Iteration  26: 17366050.545 ops/s
Iteration  27: 17340239.739 ops/s
Iteration  28: 17286989.340 ops/s
Iteration  29: 17266358.256 ops/s
Iteration  30: 17312387.779 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toList":
  17305582.303 ±(99.9%) 22175.925 ops/s [Average]
  (min, avg, max) = (17246585.523, 17305582.303, 17366050.545), stdev = 33191.884
  CI (99.9%): [17283406.377, 17327758.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toList  thrpt   30  17305582.303 ± 22175.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1368075.901 ops/s
# Warmup Iteration   2: 3157896.301 ops/s
# Warmup Iteration   3: 3173151.830 ops/s
# Warmup Iteration   4: 2653875.343 ops/s
# Warmup Iteration   5: 3199724.316 ops/s
# Warmup Iteration   6: 3197388.305 ops/s
# Warmup Iteration   7: 3187844.051 ops/s
# Warmup Iteration   8: 3221977.263 ops/s
# Warmup Iteration   9: 3198672.264 ops/s
# Warmup Iteration  10: 3182834.791 ops/s
# Warmup Iteration  11: 3187264.118 ops/s
# Warmup Iteration  12: 3181863.576 ops/s
# Warmup Iteration  13: 3165631.527 ops/s
# Warmup Iteration  14: 3206816.954 ops/s
# Warmup Iteration  15: 3185305.368 ops/s
# Warmup Iteration  16: 3198729.122 ops/s
# Warmup Iteration  17: 3174898.594 ops/s
# Warmup Iteration  18: 3195159.587 ops/s
# Warmup Iteration  19: 3184560.276 ops/s
# Warmup Iteration  20: 3164887.237 ops/s
# Warmup Iteration  21: 3181478.591 ops/s
# Warmup Iteration  22: 3161518.139 ops/s
# Warmup Iteration  23: 3175580.600 ops/s
# Warmup Iteration  24: 3212920.861 ops/s
# Warmup Iteration  25: 3204536.755 ops/s
# Warmup Iteration  26: 3179961.234 ops/s
# Warmup Iteration  27: 3184930.628 ops/s
# Warmup Iteration  28: 3194412.282 ops/s
# Warmup Iteration  29: 3176631.569 ops/s
# Warmup Iteration  30: 3187630.315 ops/s
Iteration   1: 3222590.090 ops/s
Iteration   2: 3183956.764 ops/s
Iteration   3: 3200297.499 ops/s
Iteration   4: 3207559.868 ops/s
Iteration   5: 3193605.131 ops/s
Iteration   6: 3142786.484 ops/s
Iteration   7: 3193299.094 ops/s
Iteration   8: 3174593.387 ops/s
Iteration   9: 3190737.361 ops/s
Iteration  10: 3141673.798 ops/s
Iteration  11: 3158587.181 ops/s
Iteration  12: 3191026.999 ops/s
Iteration  13: 3158733.650 ops/s
Iteration  14: 3206113.086 ops/s
Iteration  15: 3166067.431 ops/s
Iteration  16: 3184262.483 ops/s
Iteration  17: 3211721.383 ops/s
Iteration  18: 3165330.899 ops/s
Iteration  19: 3205344.171 ops/s
Iteration  20: 3198603.176 ops/s
Iteration  21: 3229849.249 ops/s
Iteration  22: 3203413.926 ops/s
Iteration  23: 3176279.295 ops/s
Iteration  24: 3180392.382 ops/s
Iteration  25: 3189760.556 ops/s
Iteration  26: 3187828.595 ops/s
Iteration  27: 3197503.526 ops/s
Iteration  28: 3170633.982 ops/s
Iteration  29: 3198158.433 ops/s
Iteration  30: 3174404.229 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMap":
  3186837.137 ±(99.9%) 14175.078 ops/s [Average]
  (min, avg, max) = (3141673.798, 3186837.137, 3229849.249), stdev = 21216.591
  CI (99.9%): [3172662.059, 3201012.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toMap  thrpt   30  3186837.137 ± 14175.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1243197.063 ops/s
# Warmup Iteration   2: 2926181.281 ops/s
# Warmup Iteration   3: 2849859.663 ops/s
# Warmup Iteration   4: 2477921.429 ops/s
# Warmup Iteration   5: 2882640.970 ops/s
# Warmup Iteration   6: 2899418.430 ops/s
# Warmup Iteration   7: 2887339.646 ops/s
# Warmup Iteration   8: 2890208.501 ops/s
# Warmup Iteration   9: 2895090.182 ops/s
# Warmup Iteration  10: 2909655.549 ops/s
# Warmup Iteration  11: 2894919.687 ops/s
# Warmup Iteration  12: 2885652.776 ops/s
# Warmup Iteration  13: 2875668.081 ops/s
# Warmup Iteration  14: 2901906.331 ops/s
# Warmup Iteration  15: 2906750.038 ops/s
# Warmup Iteration  16: 2920013.934 ops/s
# Warmup Iteration  17: 2913518.824 ops/s
# Warmup Iteration  18: 2890968.680 ops/s
# Warmup Iteration  19: 2908331.612 ops/s
# Warmup Iteration  20: 2904817.159 ops/s
# Warmup Iteration  21: 2886245.170 ops/s
# Warmup Iteration  22: 2889048.864 ops/s
# Warmup Iteration  23: 2907188.716 ops/s
# Warmup Iteration  24: 2902401.081 ops/s
# Warmup Iteration  25: 2914864.486 ops/s
# Warmup Iteration  26: 2898802.971 ops/s
# Warmup Iteration  27: 2903624.047 ops/s
# Warmup Iteration  28: 2896148.509 ops/s
# Warmup Iteration  29: 2903495.337 ops/s
# Warmup Iteration  30: 2897020.769 ops/s
Iteration   1: 2881346.207 ops/s
Iteration   2: 2910359.613 ops/s
Iteration   3: 2895957.359 ops/s
Iteration   4: 2896292.688 ops/s
Iteration   5: 2890066.543 ops/s
Iteration   6: 2869952.079 ops/s
Iteration   7: 2901601.959 ops/s
Iteration   8: 2903913.420 ops/s
Iteration   9: 2896141.573 ops/s
Iteration  10: 2903021.056 ops/s
Iteration  11: 2903517.767 ops/s
Iteration  12: 2891613.495 ops/s
Iteration  13: 2895262.637 ops/s
Iteration  14: 2879662.489 ops/s
Iteration  15: 2892361.708 ops/s
Iteration  16: 2888031.931 ops/s
Iteration  17: 2914699.130 ops/s
Iteration  18: 2907679.772 ops/s
Iteration  19: 2906610.327 ops/s
Iteration  20: 2890401.001 ops/s
Iteration  21: 2905931.856 ops/s
Iteration  22: 2885224.213 ops/s
Iteration  23: 2872147.298 ops/s
Iteration  24: 2897703.991 ops/s
Iteration  25: 2899397.811 ops/s
Iteration  26: 2885160.260 ops/s
Iteration  27: 2919296.313 ops/s
Iteration  28: 2883453.660 ops/s
Iteration  29: 2872411.179 ops/s
Iteration  30: 2890915.833 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toMapTarget":
  2894337.839 ±(99.9%) 8269.845 ops/s [Average]
  (min, avg, max) = (2869952.079, 2894337.839, 2919296.313), stdev = 12377.916
  CI (99.9%): [2886067.994, 2902607.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toMapTarget  thrpt   30  2894337.839 ± 8269.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3547255.333 ops/s
# Warmup Iteration   2: 9072869.251 ops/s
# Warmup Iteration   3: 9141828.539 ops/s
# Warmup Iteration   4: 7553543.746 ops/s
# Warmup Iteration   5: 9201312.380 ops/s
# Warmup Iteration   6: 9167078.750 ops/s
# Warmup Iteration   7: 9193146.368 ops/s
# Warmup Iteration   8: 9197858.055 ops/s
# Warmup Iteration   9: 9157060.177 ops/s
# Warmup Iteration  10: 9175626.561 ops/s
# Warmup Iteration  11: 9209438.065 ops/s
# Warmup Iteration  12: 9182392.317 ops/s
# Warmup Iteration  13: 9153927.990 ops/s
# Warmup Iteration  14: 9190655.988 ops/s
# Warmup Iteration  15: 9172838.178 ops/s
# Warmup Iteration  16: 9191102.604 ops/s
# Warmup Iteration  17: 9191929.170 ops/s
# Warmup Iteration  18: 9207819.830 ops/s
# Warmup Iteration  19: 9212156.662 ops/s
# Warmup Iteration  20: 9180028.352 ops/s
# Warmup Iteration  21: 9161990.796 ops/s
# Warmup Iteration  22: 9222682.337 ops/s
# Warmup Iteration  23: 9195043.178 ops/s
# Warmup Iteration  24: 9186431.201 ops/s
# Warmup Iteration  25: 9224015.700 ops/s
# Warmup Iteration  26: 9212304.998 ops/s
# Warmup Iteration  27: 9194721.604 ops/s
# Warmup Iteration  28: 9189975.558 ops/s
# Warmup Iteration  29: 9209010.121 ops/s
# Warmup Iteration  30: 9190779.065 ops/s
Iteration   1: 9242827.753 ops/s
Iteration   2: 9183731.351 ops/s
Iteration   3: 9192920.994 ops/s
Iteration   4: 9211678.869 ops/s
Iteration   5: 9175730.285 ops/s
Iteration   6: 9215313.242 ops/s
Iteration   7: 9210922.540 ops/s
Iteration   8: 9222521.221 ops/s
Iteration   9: 9216700.017 ops/s
Iteration  10: 9208008.752 ops/s
Iteration  11: 9188506.600 ops/s
Iteration  12: 9219685.837 ops/s
Iteration  13: 9190975.779 ops/s
Iteration  14: 9215544.744 ops/s
Iteration  15: 9208208.182 ops/s
Iteration  16: 9194533.006 ops/s
Iteration  17: 9189329.509 ops/s
Iteration  18: 9208772.214 ops/s
Iteration  19: 9213009.213 ops/s
Iteration  20: 9195994.758 ops/s
Iteration  21: 9192428.423 ops/s
Iteration  22: 9205428.193 ops/s
Iteration  23: 9190289.100 ops/s
Iteration  24: 9192240.313 ops/s
Iteration  25: 9217253.564 ops/s
Iteration  26: 9195743.292 ops/s
Iteration  27: 9197097.031 ops/s
Iteration  28: 9223643.542 ops/s
Iteration  29: 9175001.706 ops/s
Iteration  30: 9182112.107 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toReversed":
  9202538.405 ±(99.9%) 10578.827 ops/s [Average]
  (min, avg, max) = (9175001.706, 9202538.405, 9242827.753), stdev = 15833.891
  CI (99.9%): [9191959.578, 9213117.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toReversed  thrpt   30  9202538.405 ± 10578.827  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4720523.961 ops/s
# Warmup Iteration   2: 10631010.772 ops/s
# Warmup Iteration   3: 11077865.592 ops/s
# Warmup Iteration   4: 10098454.246 ops/s
# Warmup Iteration   5: 10177161.413 ops/s
# Warmup Iteration   6: 11120657.873 ops/s
# Warmup Iteration   7: 11085624.621 ops/s
# Warmup Iteration   8: 11109563.254 ops/s
# Warmup Iteration   9: 11103132.053 ops/s
# Warmup Iteration  10: 11091277.297 ops/s
# Warmup Iteration  11: 11108322.521 ops/s
# Warmup Iteration  12: 11137218.767 ops/s
# Warmup Iteration  13: 11109410.994 ops/s
# Warmup Iteration  14: 11126309.759 ops/s
# Warmup Iteration  15: 11108823.836 ops/s
# Warmup Iteration  16: 11106630.620 ops/s
# Warmup Iteration  17: 11128121.335 ops/s
# Warmup Iteration  18: 11135445.756 ops/s
# Warmup Iteration  19: 11111330.257 ops/s
# Warmup Iteration  20: 11113985.225 ops/s
# Warmup Iteration  21: 11112681.699 ops/s
# Warmup Iteration  22: 11116680.543 ops/s
# Warmup Iteration  23: 11132578.785 ops/s
# Warmup Iteration  24: 11111827.883 ops/s
# Warmup Iteration  25: 11137044.587 ops/s
# Warmup Iteration  26: 11091549.850 ops/s
# Warmup Iteration  27: 11127261.678 ops/s
# Warmup Iteration  28: 11119480.837 ops/s
# Warmup Iteration  29: 11097355.637 ops/s
# Warmup Iteration  30: 11104099.958 ops/s
Iteration   1: 11107389.165 ops/s
Iteration   2: 11109810.514 ops/s
Iteration   3: 11052542.362 ops/s
Iteration   4: 11104769.099 ops/s
Iteration   5: 11152755.706 ops/s
Iteration   6: 11068147.996 ops/s
Iteration   7: 11044412.358 ops/s
Iteration   8: 11112319.262 ops/s
Iteration   9: 11117629.781 ops/s
Iteration  10: 11144248.870 ops/s
Iteration  11: 11114324.597 ops/s
Iteration  12: 11125065.881 ops/s
Iteration  13: 11107903.329 ops/s
Iteration  14: 11065093.699 ops/s
Iteration  15: 11147970.287 ops/s
Iteration  16: 11086911.461 ops/s
Iteration  17: 11084214.263 ops/s
Iteration  18: 11139045.263 ops/s
Iteration  19: 11090989.610 ops/s
Iteration  20: 11098669.208 ops/s
Iteration  21: 11144714.384 ops/s
Iteration  22: 11115070.227 ops/s
Iteration  23: 11097731.030 ops/s
Iteration  24: 11123337.705 ops/s
Iteration  25: 11137186.866 ops/s
Iteration  26: 11111095.860 ops/s
Iteration  27: 11117411.178 ops/s
Iteration  28: 11126927.641 ops/s
Iteration  29: 11090505.005 ops/s
Iteration  30: 11130480.949 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSet":
  11108955.785 ±(99.9%) 18444.143 ops/s [Average]
  (min, avg, max) = (11044412.358, 11108955.785, 11152755.706), stdev = 27606.328
  CI (99.9%): [11090511.642, 11127399.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSet  thrpt   30  11108955.785 ± 18444.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 282642.824 ops/s
# Warmup Iteration   2: 491794.100 ops/s
# Warmup Iteration   3: 616918.167 ops/s
# Warmup Iteration   4: 623130.713 ops/s
# Warmup Iteration   5: 620949.051 ops/s
# Warmup Iteration   6: 536784.161 ops/s
# Warmup Iteration   7: 584544.075 ops/s
# Warmup Iteration   8: 622121.429 ops/s
# Warmup Iteration   9: 621788.397 ops/s
# Warmup Iteration  10: 622198.607 ops/s
# Warmup Iteration  11: 621620.540 ops/s
# Warmup Iteration  12: 621562.556 ops/s
# Warmup Iteration  13: 622705.420 ops/s
# Warmup Iteration  14: 623192.734 ops/s
# Warmup Iteration  15: 622062.008 ops/s
# Warmup Iteration  16: 622861.987 ops/s
# Warmup Iteration  17: 622952.379 ops/s
# Warmup Iteration  18: 622441.373 ops/s
# Warmup Iteration  19: 620678.956 ops/s
# Warmup Iteration  20: 622099.011 ops/s
# Warmup Iteration  21: 622642.405 ops/s
# Warmup Iteration  22: 621588.188 ops/s
# Warmup Iteration  23: 622373.731 ops/s
# Warmup Iteration  24: 621718.844 ops/s
# Warmup Iteration  25: 622707.010 ops/s
# Warmup Iteration  26: 623414.870 ops/s
# Warmup Iteration  27: 621548.445 ops/s
# Warmup Iteration  28: 623264.693 ops/s
# Warmup Iteration  29: 621426.149 ops/s
# Warmup Iteration  30: 621998.407 ops/s
Iteration   1: 622988.489 ops/s
Iteration   2: 622209.642 ops/s
Iteration   3: 623170.924 ops/s
Iteration   4: 622938.295 ops/s
Iteration   5: 623545.769 ops/s
Iteration   6: 622220.320 ops/s
Iteration   7: 623957.792 ops/s
Iteration   8: 622790.640 ops/s
Iteration   9: 623562.120 ops/s
Iteration  10: 621467.052 ops/s
Iteration  11: 621831.016 ops/s
Iteration  12: 621820.319 ops/s
Iteration  13: 620578.096 ops/s
Iteration  14: 622436.828 ops/s
Iteration  15: 622599.408 ops/s
Iteration  16: 623429.473 ops/s
Iteration  17: 622054.422 ops/s
Iteration  18: 623872.545 ops/s
Iteration  19: 622133.378 ops/s
Iteration  20: 622698.102 ops/s
Iteration  21: 620230.007 ops/s
Iteration  22: 623591.204 ops/s
Iteration  23: 622513.089 ops/s
Iteration  24: 622713.194 ops/s
Iteration  25: 622318.320 ops/s
Iteration  26: 624803.007 ops/s
Iteration  27: 622968.181 ops/s
Iteration  28: 621667.109 ops/s
Iteration  29: 622049.948 ops/s
Iteration  30: 622811.294 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBagBy":
  622598.999 ±(99.9%) 643.746 ops/s [Average]
  (min, avg, max) = (620230.007, 622598.999, 624803.007), stdev = 963.528
  CI (99.9%): [621955.254, 623242.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  622598.999 ± 643.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544462.950 ops/s
# Warmup Iteration   2: 994720.168 ops/s
# Warmup Iteration   3: 1150843.869 ops/s
# Warmup Iteration   4: 1155392.282 ops/s
# Warmup Iteration   5: 1151728.694 ops/s
# Warmup Iteration   6: 967417.425 ops/s
# Warmup Iteration   7: 1155752.025 ops/s
# Warmup Iteration   8: 1158232.848 ops/s
# Warmup Iteration   9: 1157290.810 ops/s
# Warmup Iteration  10: 1155667.265 ops/s
# Warmup Iteration  11: 1157555.727 ops/s
# Warmup Iteration  12: 1159382.104 ops/s
# Warmup Iteration  13: 1158051.399 ops/s
# Warmup Iteration  14: 1158932.378 ops/s
# Warmup Iteration  15: 1157586.096 ops/s
# Warmup Iteration  16: 1158577.978 ops/s
# Warmup Iteration  17: 1154582.992 ops/s
# Warmup Iteration  18: 1157935.737 ops/s
# Warmup Iteration  19: 1155007.937 ops/s
# Warmup Iteration  20: 1157611.158 ops/s
# Warmup Iteration  21: 1158111.182 ops/s
# Warmup Iteration  22: 1157881.181 ops/s
# Warmup Iteration  23: 1158724.645 ops/s
# Warmup Iteration  24: 1155865.570 ops/s
# Warmup Iteration  25: 1157274.812 ops/s
# Warmup Iteration  26: 1158645.846 ops/s
# Warmup Iteration  27: 1154053.449 ops/s
# Warmup Iteration  28: 1154270.622 ops/s
# Warmup Iteration  29: 1159974.380 ops/s
# Warmup Iteration  30: 1156392.436 ops/s
Iteration   1: 1159066.685 ops/s
Iteration   2: 1157731.257 ops/s
Iteration   3: 1158492.042 ops/s
Iteration   4: 1155394.840 ops/s
Iteration   5: 1155649.805 ops/s
Iteration   6: 1155712.231 ops/s
Iteration   7: 1161166.916 ops/s
Iteration   8: 1155418.487 ops/s
Iteration   9: 1160013.421 ops/s
Iteration  10: 1158721.104 ops/s
Iteration  11: 1158044.236 ops/s
Iteration  12: 1156073.411 ops/s
Iteration  13: 1157907.698 ops/s
Iteration  14: 1158221.699 ops/s
Iteration  15: 1156140.697 ops/s
Iteration  16: 1158526.064 ops/s
Iteration  17: 1156003.929 ops/s
Iteration  18: 1157857.454 ops/s
Iteration  19: 1157256.097 ops/s
Iteration  20: 1156930.877 ops/s
Iteration  21: 1159075.038 ops/s
Iteration  22: 1156921.262 ops/s
Iteration  23: 1157205.313 ops/s
Iteration  24: 1159065.221 ops/s
Iteration  25: 1157426.679 ops/s
Iteration  26: 1157042.231 ops/s
Iteration  27: 1161451.751 ops/s
Iteration  28: 1157967.959 ops/s
Iteration  29: 1156220.757 ops/s
Iteration  30: 1156460.717 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1157638.863 ±(99.9%) 1055.210 ops/s [Average]
  (min, avg, max) = (1155394.840, 1157638.863, 1161451.751), stdev = 1579.389
  CI (99.9%): [1156583.653, 1158694.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1157638.863 ± 1055.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629021.714 ops/s
# Warmup Iteration   2: 1192508.292 ops/s
# Warmup Iteration   3: 1375363.164 ops/s
# Warmup Iteration   4: 1375530.757 ops/s
# Warmup Iteration   5: 1380715.115 ops/s
# Warmup Iteration   6: 1150534.774 ops/s
# Warmup Iteration   7: 1381053.425 ops/s
# Warmup Iteration   8: 1379740.294 ops/s
# Warmup Iteration   9: 1380361.975 ops/s
# Warmup Iteration  10: 1382757.776 ops/s
# Warmup Iteration  11: 1383900.499 ops/s
# Warmup Iteration  12: 1380604.265 ops/s
# Warmup Iteration  13: 1381542.960 ops/s
# Warmup Iteration  14: 1379307.597 ops/s
# Warmup Iteration  15: 1384857.293 ops/s
# Warmup Iteration  16: 1379467.976 ops/s
# Warmup Iteration  17: 1382326.724 ops/s
# Warmup Iteration  18: 1382283.295 ops/s
# Warmup Iteration  19: 1377576.184 ops/s
# Warmup Iteration  20: 1380425.980 ops/s
# Warmup Iteration  21: 1379441.268 ops/s
# Warmup Iteration  22: 1382034.725 ops/s
# Warmup Iteration  23: 1382430.046 ops/s
# Warmup Iteration  24: 1381470.085 ops/s
# Warmup Iteration  25: 1380410.810 ops/s
# Warmup Iteration  26: 1383739.925 ops/s
# Warmup Iteration  27: 1380539.068 ops/s
# Warmup Iteration  28: 1380904.008 ops/s
# Warmup Iteration  29: 1380940.181 ops/s
# Warmup Iteration  30: 1379353.076 ops/s
Iteration   1: 1383389.265 ops/s
Iteration   2: 1381203.973 ops/s
Iteration   3: 1384008.937 ops/s
Iteration   4: 1376789.622 ops/s
Iteration   5: 1378102.138 ops/s
Iteration   6: 1384682.338 ops/s
Iteration   7: 1376453.118 ops/s
Iteration   8: 1385395.858 ops/s
Iteration   9: 1380982.603 ops/s
Iteration  10: 1377928.084 ops/s
Iteration  11: 1385548.728 ops/s
Iteration  12: 1383192.122 ops/s
Iteration  13: 1381376.816 ops/s
Iteration  14: 1382226.546 ops/s
Iteration  15: 1380279.494 ops/s
Iteration  16: 1381537.245 ops/s
Iteration  17: 1382015.598 ops/s
Iteration  18: 1379914.101 ops/s
Iteration  19: 1382195.632 ops/s
Iteration  20: 1380966.239 ops/s
Iteration  21: 1378437.293 ops/s
Iteration  22: 1382335.266 ops/s
Iteration  23: 1385351.231 ops/s
Iteration  24: 1380334.578 ops/s
Iteration  25: 1383102.272 ops/s
Iteration  26: 1379829.844 ops/s
Iteration  27: 1378933.507 ops/s
Iteration  28: 1384542.429 ops/s
Iteration  29: 1375708.306 ops/s
Iteration  30: 1381416.046 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1381272.641 ±(99.9%) 1805.544 ops/s [Average]
  (min, avg, max) = (1375708.306, 1381272.641, 1385548.728), stdev = 2702.453
  CI (99.9%): [1379467.097, 1383078.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1381272.641 ± 1805.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 357102.624 ops/s
# Warmup Iteration   2: 391251.911 ops/s
# Warmup Iteration   3: 503207.861 ops/s
# Warmup Iteration   4: 513502.001 ops/s
# Warmup Iteration   5: 513618.807 ops/s
# Warmup Iteration   6: 511542.647 ops/s
# Warmup Iteration   7: 514603.644 ops/s
# Warmup Iteration   8: 514891.311 ops/s
# Warmup Iteration   9: 514278.391 ops/s
# Warmup Iteration  10: 513561.552 ops/s
# Warmup Iteration  11: 514562.990 ops/s
# Warmup Iteration  12: 432667.094 ops/s
# Warmup Iteration  13: 513440.397 ops/s
# Warmup Iteration  14: 516361.986 ops/s
# Warmup Iteration  15: 514746.766 ops/s
# Warmup Iteration  16: 516087.974 ops/s
# Warmup Iteration  17: 532961.912 ops/s
# Warmup Iteration  18: 533021.880 ops/s
# Warmup Iteration  19: 530852.292 ops/s
# Warmup Iteration  20: 533335.648 ops/s
# Warmup Iteration  21: 531758.985 ops/s
# Warmup Iteration  22: 532451.062 ops/s
# Warmup Iteration  23: 534734.099 ops/s
# Warmup Iteration  24: 532734.614 ops/s
# Warmup Iteration  25: 532325.677 ops/s
# Warmup Iteration  26: 527699.170 ops/s
# Warmup Iteration  27: 532835.044 ops/s
# Warmup Iteration  28: 532934.314 ops/s
# Warmup Iteration  29: 532452.201 ops/s
# Warmup Iteration  30: 533669.641 ops/s
Iteration   1: 533258.443 ops/s
Iteration   2: 532266.020 ops/s
Iteration   3: 532729.853 ops/s
Iteration   4: 531492.070 ops/s
Iteration   5: 532099.351 ops/s
Iteration   6: 534672.710 ops/s
Iteration   7: 531609.002 ops/s
Iteration   8: 533128.215 ops/s
Iteration   9: 530210.284 ops/s
Iteration  10: 532197.180 ops/s
Iteration  11: 534198.659 ops/s
Iteration  12: 534137.508 ops/s
Iteration  13: 533550.784 ops/s
Iteration  14: 534664.746 ops/s
Iteration  15: 531731.735 ops/s
Iteration  16: 533658.566 ops/s
Iteration  17: 534785.410 ops/s
Iteration  18: 530816.043 ops/s
Iteration  19: 533911.608 ops/s
Iteration  20: 530159.155 ops/s
Iteration  21: 534170.395 ops/s
Iteration  22: 533991.648 ops/s
Iteration  23: 534783.651 ops/s
Iteration  24: 533635.841 ops/s
Iteration  25: 532930.998 ops/s
Iteration  26: 531381.070 ops/s
Iteration  27: 532090.607 ops/s
Iteration  28: 533838.440 ops/s
Iteration  29: 532500.974 ops/s
Iteration  30: 535524.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_null":
  533004.169 ±(99.9%) 947.786 ops/s [Average]
  (min, avg, max) = (530159.155, 533004.169, 535524.115), stdev = 1418.602
  CI (99.9%): [532056.383, 533951.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  533004.169 ± 947.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2747655.883 ops/s
# Warmup Iteration   2: 6780972.000 ops/s
# Warmup Iteration   3: 5677512.108 ops/s
# Warmup Iteration   4: 6857109.845 ops/s
# Warmup Iteration   5: 6844580.063 ops/s
# Warmup Iteration   6: 6855932.243 ops/s
# Warmup Iteration   7: 6849657.973 ops/s
# Warmup Iteration   8: 6850007.302 ops/s
# Warmup Iteration   9: 6843660.599 ops/s
# Warmup Iteration  10: 6854495.240 ops/s
# Warmup Iteration  11: 6843425.811 ops/s
# Warmup Iteration  12: 6851432.884 ops/s
# Warmup Iteration  13: 6858559.714 ops/s
# Warmup Iteration  14: 6843372.492 ops/s
# Warmup Iteration  15: 6859794.110 ops/s
# Warmup Iteration  16: 6845445.183 ops/s
# Warmup Iteration  17: 6862175.190 ops/s
# Warmup Iteration  18: 6855947.325 ops/s
# Warmup Iteration  19: 6844549.556 ops/s
# Warmup Iteration  20: 6837957.219 ops/s
# Warmup Iteration  21: 6847505.161 ops/s
# Warmup Iteration  22: 6844367.529 ops/s
# Warmup Iteration  23: 6855059.896 ops/s
# Warmup Iteration  24: 6852203.716 ops/s
# Warmup Iteration  25: 6850345.479 ops/s
# Warmup Iteration  26: 6833818.130 ops/s
# Warmup Iteration  27: 6856744.601 ops/s
# Warmup Iteration  28: 6815714.581 ops/s
# Warmup Iteration  29: 6845661.620 ops/s
# Warmup Iteration  30: 6853492.135 ops/s
Iteration   1: 6840235.453 ops/s
Iteration   2: 6856982.295 ops/s
Iteration   3: 6841296.270 ops/s
Iteration   4: 6863202.903 ops/s
Iteration   5: 6851998.096 ops/s
Iteration   6: 6825367.116 ops/s
Iteration   7: 6837049.671 ops/s
Iteration   8: 6852846.880 ops/s
Iteration   9: 6866210.396 ops/s
Iteration  10: 6867023.230 ops/s
Iteration  11: 6841197.347 ops/s
Iteration  12: 6850037.717 ops/s
Iteration  13: 6846808.079 ops/s
Iteration  14: 6835251.274 ops/s
Iteration  15: 6824074.308 ops/s
Iteration  16: 6845175.139 ops/s
Iteration  17: 6840913.252 ops/s
Iteration  18: 6843654.001 ops/s
Iteration  19: 6867778.786 ops/s
Iteration  20: 6852099.672 ops/s
Iteration  21: 6837865.662 ops/s
Iteration  22: 6834395.363 ops/s
Iteration  23: 6783661.214 ops/s
Iteration  24: 6832197.508 ops/s
Iteration  25: 6827563.320 ops/s
Iteration  26: 6847810.249 ops/s
Iteration  27: 6870144.127 ops/s
Iteration  28: 6848554.283 ops/s
Iteration  29: 6830878.744 ops/s
Iteration  30: 6840236.505 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy":
  6843416.962 ±(99.9%) 11345.528 ops/s [Average]
  (min, avg, max) = (6783661.214, 6843416.962, 6870144.127), stdev = 16981.454
  CI (99.9%): [6832071.434, 6854762.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy  thrpt   30  6843416.962 ± 11345.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513157.335 ops/s
# Warmup Iteration   2: 547642.642 ops/s
# Warmup Iteration   3: 601539.559 ops/s
# Warmup Iteration   4: 695272.126 ops/s
# Warmup Iteration   5: 693965.919 ops/s
# Warmup Iteration   6: 693728.521 ops/s
# Warmup Iteration   7: 690263.559 ops/s
# Warmup Iteration   8: 696713.503 ops/s
# Warmup Iteration   9: 693422.920 ops/s
# Warmup Iteration  10: 693318.984 ops/s
# Warmup Iteration  11: 694052.749 ops/s
# Warmup Iteration  12: 695358.296 ops/s
# Warmup Iteration  13: 694712.894 ops/s
# Warmup Iteration  14: 692086.925 ops/s
# Warmup Iteration  15: 686637.691 ops/s
# Warmup Iteration  16: 577716.248 ops/s
# Warmup Iteration  17: 717401.186 ops/s
# Warmup Iteration  18: 718895.669 ops/s
# Warmup Iteration  19: 717823.311 ops/s
# Warmup Iteration  20: 717802.717 ops/s
# Warmup Iteration  21: 717567.040 ops/s
# Warmup Iteration  22: 716505.189 ops/s
# Warmup Iteration  23: 719102.180 ops/s
# Warmup Iteration  24: 717754.837 ops/s
# Warmup Iteration  25: 719460.594 ops/s
# Warmup Iteration  26: 718810.095 ops/s
# Warmup Iteration  27: 714844.000 ops/s
# Warmup Iteration  28: 716201.009 ops/s
# Warmup Iteration  29: 717548.882 ops/s
# Warmup Iteration  30: 715428.260 ops/s
Iteration   1: 716802.998 ops/s
Iteration   2: 717013.237 ops/s
Iteration   3: 719277.984 ops/s
Iteration   4: 715643.126 ops/s
Iteration   5: 716886.609 ops/s
Iteration   6: 715676.098 ops/s
Iteration   7: 716675.220 ops/s
Iteration   8: 718135.487 ops/s
Iteration   9: 716756.515 ops/s
Iteration  10: 717931.240 ops/s
Iteration  11: 717584.909 ops/s
Iteration  12: 717823.830 ops/s
Iteration  13: 717347.455 ops/s
Iteration  14: 717133.158 ops/s
Iteration  15: 713909.951 ops/s
Iteration  16: 716761.099 ops/s
Iteration  17: 718939.672 ops/s
Iteration  18: 716366.053 ops/s
Iteration  19: 718110.702 ops/s
Iteration  20: 719114.140 ops/s
Iteration  21: 719170.584 ops/s
Iteration  22: 717194.574 ops/s
Iteration  23: 717624.496 ops/s
Iteration  24: 715261.268 ops/s
Iteration  25: 718365.815 ops/s
Iteration  26: 716766.508 ops/s
Iteration  27: 719662.415 ops/s
Iteration  28: 716695.021 ops/s
Iteration  29: 718839.816 ops/s
Iteration  30: 719020.023 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null":
  717416.333 ±(99.9%) 888.760 ops/s [Average]
  (min, avg, max) = (713909.951, 717416.333, 719662.415), stdev = 1330.254
  CI (99.9%): [716527.573, 718305.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  717416.333 ± 888.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2759445.016 ops/s
# Warmup Iteration   2: 3169199.304 ops/s
# Warmup Iteration   3: 4455530.185 ops/s
# Warmup Iteration   4: 4458460.361 ops/s
# Warmup Iteration   5: 4440193.800 ops/s
# Warmup Iteration   6: 4453600.686 ops/s
# Warmup Iteration   7: 4448977.769 ops/s
# Warmup Iteration   8: 4454587.900 ops/s
# Warmup Iteration   9: 4438436.875 ops/s
# Warmup Iteration  10: 3720353.005 ops/s
# Warmup Iteration  11: 4461620.727 ops/s
# Warmup Iteration  12: 4456467.984 ops/s
# Warmup Iteration  13: 4459290.403 ops/s
# Warmup Iteration  14: 4464098.548 ops/s
# Warmup Iteration  15: 4466857.048 ops/s
# Warmup Iteration  16: 4465149.674 ops/s
# Warmup Iteration  17: 4466110.660 ops/s
# Warmup Iteration  18: 4470845.740 ops/s
# Warmup Iteration  19: 4464709.022 ops/s
# Warmup Iteration  20: 4465119.484 ops/s
# Warmup Iteration  21: 4464772.251 ops/s
# Warmup Iteration  22: 4465123.689 ops/s
# Warmup Iteration  23: 4460956.064 ops/s
# Warmup Iteration  24: 4452568.004 ops/s
# Warmup Iteration  25: 4468476.348 ops/s
# Warmup Iteration  26: 4461802.053 ops/s
# Warmup Iteration  27: 4462761.376 ops/s
# Warmup Iteration  28: 4445564.394 ops/s
# Warmup Iteration  29: 4461253.584 ops/s
# Warmup Iteration  30: 4467050.623 ops/s
Iteration   1: 4459860.302 ops/s
Iteration   2: 4465451.468 ops/s
Iteration   3: 4465406.423 ops/s
Iteration   4: 4456887.237 ops/s
Iteration   5: 4462628.905 ops/s
Iteration   6: 4462518.586 ops/s
Iteration   7: 4460822.750 ops/s
Iteration   8: 4446367.163 ops/s
Iteration   9: 4459621.484 ops/s
Iteration  10: 4465793.615 ops/s
Iteration  11: 4458784.070 ops/s
Iteration  12: 4474010.099 ops/s
Iteration  13: 4454207.205 ops/s
Iteration  14: 4457889.332 ops/s
Iteration  15: 4461731.222 ops/s
Iteration  16: 4472484.499 ops/s
Iteration  17: 4461473.617 ops/s
Iteration  18: 4463592.142 ops/s
Iteration  19: 4473270.457 ops/s
Iteration  20: 4455274.931 ops/s
Iteration  21: 4477366.578 ops/s
Iteration  22: 4475040.706 ops/s
Iteration  23: 4461532.886 ops/s
Iteration  24: 4463690.898 ops/s
Iteration  25: 4473564.878 ops/s
Iteration  26: 4474920.232 ops/s
Iteration  27: 4465529.077 ops/s
Iteration  28: 4468609.864 ops/s
Iteration  29: 4461309.175 ops/s
Iteration  30: 4475731.465 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  4464512.375 ±(99.9%) 4968.431 ops/s [Average]
  (min, avg, max) = (4446367.163, 4464512.375, 4477366.578), stdev = 7436.514
  CI (99.9%): [4459543.945, 4469480.806] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  4464512.375 ± 4968.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2484268.352 ops/s
# Warmup Iteration   2: 4276922.254 ops/s
# Warmup Iteration   3: 4875739.401 ops/s
# Warmup Iteration   4: 4898871.564 ops/s
# Warmup Iteration   5: 4909923.768 ops/s
# Warmup Iteration   6: 4068801.520 ops/s
# Warmup Iteration   7: 4904461.636 ops/s
# Warmup Iteration   8: 4907626.097 ops/s
# Warmup Iteration   9: 4921010.797 ops/s
# Warmup Iteration  10: 4906977.435 ops/s
# Warmup Iteration  11: 4914077.139 ops/s
# Warmup Iteration  12: 4918817.345 ops/s
# Warmup Iteration  13: 4918993.899 ops/s
# Warmup Iteration  14: 4919276.497 ops/s
# Warmup Iteration  15: 4913396.032 ops/s
# Warmup Iteration  16: 4918330.586 ops/s
# Warmup Iteration  17: 4895838.981 ops/s
# Warmup Iteration  18: 4900428.903 ops/s
# Warmup Iteration  19: 4900800.353 ops/s
# Warmup Iteration  20: 4895166.496 ops/s
# Warmup Iteration  21: 4905074.370 ops/s
# Warmup Iteration  22: 4900920.214 ops/s
# Warmup Iteration  23: 4899105.629 ops/s
# Warmup Iteration  24: 4896545.615 ops/s
# Warmup Iteration  25: 4904840.287 ops/s
# Warmup Iteration  26: 4886746.516 ops/s
# Warmup Iteration  27: 4898462.979 ops/s
# Warmup Iteration  28: 4894727.232 ops/s
# Warmup Iteration  29: 4899747.685 ops/s
# Warmup Iteration  30: 4898935.741 ops/s
Iteration   1: 4891865.036 ops/s
Iteration   2: 4908748.990 ops/s
Iteration   3: 4896548.785 ops/s
Iteration   4: 4901824.133 ops/s
Iteration   5: 4892984.151 ops/s
Iteration   6: 4899399.360 ops/s
Iteration   7: 4900496.822 ops/s
Iteration   8: 4901743.977 ops/s
Iteration   9: 4881458.772 ops/s
Iteration  10: 4903942.782 ops/s
Iteration  11: 4897038.157 ops/s
Iteration  12: 4893794.075 ops/s
Iteration  13: 4904213.088 ops/s
Iteration  14: 4894966.852 ops/s
Iteration  15: 4913950.315 ops/s
Iteration  16: 4907459.589 ops/s
Iteration  17: 4903865.584 ops/s
Iteration  18: 4900177.248 ops/s
Iteration  19: 4908184.070 ops/s
Iteration  20: 4910113.899 ops/s
Iteration  21: 4898191.057 ops/s
Iteration  22: 4908560.027 ops/s
Iteration  23: 4896369.922 ops/s
Iteration  24: 4920452.802 ops/s
Iteration  25: 4902178.942 ops/s
Iteration  26: 4876696.077 ops/s
Iteration  27: 4893907.600 ops/s
Iteration  28: 4909351.167 ops/s
Iteration  29: 4915334.504 ops/s
Iteration  30: 4902177.614 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  4901199.847 ±(99.9%) 6168.620 ops/s [Average]
  (min, avg, max) = (4876696.077, 4901199.847, 4920452.802), stdev = 9232.901
  CI (99.9%): [4895031.226, 4907368.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  4901199.847 ± 6168.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2511229.581 ops/s
# Warmup Iteration   2: 5813409.969 ops/s
# Warmup Iteration   3: 4856247.756 ops/s
# Warmup Iteration   4: 5845151.192 ops/s
# Warmup Iteration   5: 5848668.078 ops/s
# Warmup Iteration   6: 5835285.800 ops/s
# Warmup Iteration   7: 5840866.804 ops/s
# Warmup Iteration   8: 5844865.569 ops/s
# Warmup Iteration   9: 5845865.761 ops/s
# Warmup Iteration  10: 5829243.197 ops/s
# Warmup Iteration  11: 5809988.569 ops/s
# Warmup Iteration  12: 5837674.571 ops/s
# Warmup Iteration  13: 5838138.702 ops/s
# Warmup Iteration  14: 5847219.014 ops/s
# Warmup Iteration  15: 5840140.834 ops/s
# Warmup Iteration  16: 5839354.316 ops/s
# Warmup Iteration  17: 5860176.061 ops/s
# Warmup Iteration  18: 5842787.512 ops/s
# Warmup Iteration  19: 5836039.816 ops/s
# Warmup Iteration  20: 5839075.398 ops/s
# Warmup Iteration  21: 5836505.595 ops/s
# Warmup Iteration  22: 5855021.916 ops/s
# Warmup Iteration  23: 5839866.960 ops/s
# Warmup Iteration  24: 5855485.158 ops/s
# Warmup Iteration  25: 5834663.906 ops/s
# Warmup Iteration  26: 5856373.901 ops/s
# Warmup Iteration  27: 5849796.057 ops/s
# Warmup Iteration  28: 5851095.332 ops/s
# Warmup Iteration  29: 5833272.533 ops/s
# Warmup Iteration  30: 5827638.604 ops/s
Iteration   1: 5819135.407 ops/s
Iteration   2: 5856471.941 ops/s
Iteration   3: 5828643.300 ops/s
Iteration   4: 5831653.138 ops/s
Iteration   5: 5831936.291 ops/s
Iteration   6: 5845149.205 ops/s
Iteration   7: 5844334.327 ops/s
Iteration   8: 5839827.144 ops/s
Iteration   9: 5808366.161 ops/s
Iteration  10: 5832305.673 ops/s
Iteration  11: 5840375.856 ops/s
Iteration  12: 5846546.104 ops/s
Iteration  13: 5851665.893 ops/s
Iteration  14: 5832768.117 ops/s
Iteration  15: 5852279.203 ops/s
Iteration  16: 5849735.947 ops/s
Iteration  17: 5819375.223 ops/s
Iteration  18: 5853176.624 ops/s
Iteration  19: 5855163.112 ops/s
Iteration  20: 5827656.150 ops/s
Iteration  21: 5837185.390 ops/s
Iteration  22: 5841662.334 ops/s
Iteration  23: 5847325.748 ops/s
Iteration  24: 5864986.985 ops/s
Iteration  25: 5833496.132 ops/s
Iteration  26: 5843325.295 ops/s
Iteration  27: 5846715.029 ops/s
Iteration  28: 5843318.214 ops/s
Iteration  29: 5861481.105 ops/s
Iteration  30: 5849365.367 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering":
  5841180.881 ±(99.9%) 8630.606 ops/s [Average]
  (min, avg, max) = (5808366.161, 5841180.881, 5864986.985), stdev = 12917.885
  CI (99.9%): [5832550.275, 5849811.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  5841180.881 ± 8630.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5210166.072 ops/s
# Warmup Iteration   2: 12699931.583 ops/s
# Warmup Iteration   3: 12745500.626 ops/s
# Warmup Iteration   4: 10599833.929 ops/s
# Warmup Iteration   5: 12781843.611 ops/s
# Warmup Iteration   6: 12743266.610 ops/s
# Warmup Iteration   7: 12762097.097 ops/s
# Warmup Iteration   8: 12784126.924 ops/s
# Warmup Iteration   9: 12784321.812 ops/s
# Warmup Iteration  10: 12732177.265 ops/s
# Warmup Iteration  11: 12803211.720 ops/s
# Warmup Iteration  12: 12799837.787 ops/s
# Warmup Iteration  13: 12760296.878 ops/s
# Warmup Iteration  14: 12784743.256 ops/s
# Warmup Iteration  15: 12787838.757 ops/s
# Warmup Iteration  16: 12778306.017 ops/s
# Warmup Iteration  17: 12796967.054 ops/s
# Warmup Iteration  18: 12753643.065 ops/s
# Warmup Iteration  19: 12770879.448 ops/s
# Warmup Iteration  20: 12769424.108 ops/s
# Warmup Iteration  21: 12750590.241 ops/s
# Warmup Iteration  22: 12778011.511 ops/s
# Warmup Iteration  23: 12744560.499 ops/s
# Warmup Iteration  24: 12738895.421 ops/s
# Warmup Iteration  25: 12770997.671 ops/s
# Warmup Iteration  26: 12779193.179 ops/s
# Warmup Iteration  27: 12772896.475 ops/s
# Warmup Iteration  28: 12763865.812 ops/s
# Warmup Iteration  29: 12760518.689 ops/s
# Warmup Iteration  30: 12773952.234 ops/s
Iteration   1: 12816647.850 ops/s
Iteration   2: 12783425.072 ops/s
Iteration   3: 12770733.064 ops/s
Iteration   4: 12780580.357 ops/s
Iteration   5: 12768193.864 ops/s
Iteration   6: 12752751.777 ops/s
Iteration   7: 12786004.481 ops/s
Iteration   8: 12764665.563 ops/s
Iteration   9: 12758216.119 ops/s
Iteration  10: 12746646.828 ops/s
Iteration  11: 12762877.596 ops/s
Iteration  12: 12758699.030 ops/s
Iteration  13: 12759702.612 ops/s
Iteration  14: 12782121.870 ops/s
Iteration  15: 12704341.731 ops/s
Iteration  16: 12806376.113 ops/s
Iteration  17: 12744801.273 ops/s
Iteration  18: 12772996.687 ops/s
Iteration  19: 12766323.191 ops/s
Iteration  20: 12778066.612 ops/s
Iteration  21: 12777036.961 ops/s
Iteration  22: 12783360.234 ops/s
Iteration  23: 12781491.846 ops/s
Iteration  24: 12822200.610 ops/s
Iteration  25: 12727687.862 ops/s
Iteration  26: 12692640.108 ops/s
Iteration  27: 12759069.368 ops/s
Iteration  28: 12783752.992 ops/s
Iteration  29: 12816707.354 ops/s
Iteration  30: 12815779.973 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator":
  12770796.633 ±(99.9%) 19986.994 ops/s [Average]
  (min, avg, max) = (12692640.108, 12770796.633, 12822200.610), stdev = 29915.593
  CI (99.9%): [12750809.640, 12790783.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  12770796.633 ± 19986.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2772535.296 ops/s
# Warmup Iteration   2: 2383445.062 ops/s
# Warmup Iteration   3: 3182434.834 ops/s
# Warmup Iteration   4: 3215895.422 ops/s
# Warmup Iteration   5: 3222081.414 ops/s
# Warmup Iteration   6: 3194677.666 ops/s
# Warmup Iteration   7: 3220071.303 ops/s
# Warmup Iteration   8: 3218674.161 ops/s
# Warmup Iteration   9: 3212915.717 ops/s
# Warmup Iteration  10: 3218452.035 ops/s
# Warmup Iteration  11: 3217684.576 ops/s
# Warmup Iteration  12: 3129072.950 ops/s
# Warmup Iteration  13: 2727248.572 ops/s
# Warmup Iteration  14: 3212332.817 ops/s
# Warmup Iteration  15: 3214467.382 ops/s
# Warmup Iteration  16: 3215978.640 ops/s
# Warmup Iteration  17: 3217580.451 ops/s
# Warmup Iteration  18: 3207329.020 ops/s
# Warmup Iteration  19: 3212364.982 ops/s
# Warmup Iteration  20: 3213771.464 ops/s
# Warmup Iteration  21: 3220823.932 ops/s
# Warmup Iteration  22: 3211577.448 ops/s
# Warmup Iteration  23: 3210877.969 ops/s
# Warmup Iteration  24: 3213913.741 ops/s
# Warmup Iteration  25: 3220396.521 ops/s
# Warmup Iteration  26: 3213964.457 ops/s
# Warmup Iteration  27: 3216093.428 ops/s
# Warmup Iteration  28: 3216360.922 ops/s
# Warmup Iteration  29: 3219760.639 ops/s
# Warmup Iteration  30: 3219330.661 ops/s
Iteration   1: 3203630.059 ops/s
Iteration   2: 3209090.045 ops/s
Iteration   3: 3217877.613 ops/s
Iteration   4: 3209449.562 ops/s
Iteration   5: 3221408.748 ops/s
Iteration   6: 3212193.659 ops/s
Iteration   7: 3208085.900 ops/s
Iteration   8: 3215035.988 ops/s
Iteration   9: 3221172.268 ops/s
Iteration  10: 3208187.683 ops/s
Iteration  11: 3210869.666 ops/s
Iteration  12: 3214994.491 ops/s
Iteration  13: 3221429.777 ops/s
Iteration  14: 3216845.664 ops/s
Iteration  15: 3215597.165 ops/s
Iteration  16: 3213936.963 ops/s
Iteration  17: 3215503.742 ops/s
Iteration  18: 3219395.678 ops/s
Iteration  19: 3204105.814 ops/s
Iteration  20: 3219282.844 ops/s
Iteration  21: 3214429.742 ops/s
Iteration  22: 3209355.687 ops/s
Iteration  23: 3214121.535 ops/s
Iteration  24: 3214477.035 ops/s
Iteration  25: 3212576.533 ops/s
Iteration  26: 3222182.174 ops/s
Iteration  27: 3216235.323 ops/s
Iteration  28: 3216120.939 ops/s
Iteration  29: 3213106.015 ops/s
Iteration  30: 3217894.812 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_null":
  3214286.438 ±(99.9%) 3269.792 ops/s [Average]
  (min, avg, max) = (3203630.059, 3214286.438, 3222182.174), stdev = 4894.071
  CI (99.9%): [3211016.646, 3217556.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  3214286.438 ± 3269.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587173.992 ops/s
# Warmup Iteration   2: 1261278.725 ops/s
# Warmup Iteration   3: 1329483.136 ops/s
# Warmup Iteration   4: 1337250.452 ops/s
# Warmup Iteration   5: 1112963.023 ops/s
# Warmup Iteration   6: 1336849.164 ops/s
# Warmup Iteration   7: 1340380.320 ops/s
# Warmup Iteration   8: 1337173.919 ops/s
# Warmup Iteration   9: 1338388.105 ops/s
# Warmup Iteration  10: 1335443.597 ops/s
# Warmup Iteration  11: 1341504.411 ops/s
# Warmup Iteration  12: 1335908.926 ops/s
# Warmup Iteration  13: 1339146.536 ops/s
# Warmup Iteration  14: 1336979.711 ops/s
# Warmup Iteration  15: 1339963.454 ops/s
# Warmup Iteration  16: 1335912.110 ops/s
# Warmup Iteration  17: 1341013.987 ops/s
# Warmup Iteration  18: 1337224.792 ops/s
# Warmup Iteration  19: 1332421.801 ops/s
# Warmup Iteration  20: 1334417.098 ops/s
# Warmup Iteration  21: 1338084.957 ops/s
# Warmup Iteration  22: 1340408.344 ops/s
# Warmup Iteration  23: 1337981.836 ops/s
# Warmup Iteration  24: 1333268.409 ops/s
# Warmup Iteration  25: 1335190.130 ops/s
# Warmup Iteration  26: 1341989.302 ops/s
# Warmup Iteration  27: 1338760.416 ops/s
# Warmup Iteration  28: 1331908.319 ops/s
# Warmup Iteration  29: 1342309.169 ops/s
# Warmup Iteration  30: 1337906.729 ops/s
Iteration   1: 1340838.332 ops/s
Iteration   2: 1338782.510 ops/s
Iteration   3: 1339834.511 ops/s
Iteration   4: 1333600.503 ops/s
Iteration   5: 1337245.753 ops/s
Iteration   6: 1340322.383 ops/s
Iteration   7: 1340398.900 ops/s
Iteration   8: 1331705.741 ops/s
Iteration   9: 1336485.636 ops/s
Iteration  10: 1338385.627 ops/s
Iteration  11: 1339740.432 ops/s
Iteration  12: 1339314.481 ops/s
Iteration  13: 1333607.952 ops/s
Iteration  14: 1329634.930 ops/s
Iteration  15: 1337145.573 ops/s
Iteration  16: 1334699.206 ops/s
Iteration  17: 1331059.977 ops/s
Iteration  18: 1339195.357 ops/s
Iteration  19: 1338164.151 ops/s
Iteration  20: 1336972.521 ops/s
Iteration  21: 1339513.263 ops/s
Iteration  22: 1338539.062 ops/s
Iteration  23: 1338843.485 ops/s
Iteration  24: 1343984.517 ops/s
Iteration  25: 1340061.784 ops/s
Iteration  26: 1337723.130 ops/s
Iteration  27: 1339811.655 ops/s
Iteration  28: 1334613.412 ops/s
Iteration  29: 1329500.236 ops/s
Iteration  30: 1336337.680 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap":
  1337202.090 ±(99.9%) 2339.491 ops/s [Average]
  (min, avg, max) = (1329500.236, 1337202.090, 1343984.517), stdev = 3501.640
  CI (99.9%): [1334862.599, 1339541.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedMap  thrpt   30  1337202.090 ± 2339.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 548663.582 ops/s
# Warmup Iteration   2: 1129352.317 ops/s
# Warmup Iteration   3: 1234152.827 ops/s
# Warmup Iteration   4: 1229753.023 ops/s
# Warmup Iteration   5: 1033779.555 ops/s
# Warmup Iteration   6: 1236591.257 ops/s
# Warmup Iteration   7: 1243112.538 ops/s
# Warmup Iteration   8: 1239677.652 ops/s
# Warmup Iteration   9: 1236898.525 ops/s
# Warmup Iteration  10: 1237691.815 ops/s
# Warmup Iteration  11: 1236307.536 ops/s
# Warmup Iteration  12: 1238865.990 ops/s
# Warmup Iteration  13: 1238032.436 ops/s
# Warmup Iteration  14: 1238529.858 ops/s
# Warmup Iteration  15: 1239967.490 ops/s
# Warmup Iteration  16: 1239379.217 ops/s
# Warmup Iteration  17: 1240470.942 ops/s
# Warmup Iteration  18: 1239201.167 ops/s
# Warmup Iteration  19: 1234806.312 ops/s
# Warmup Iteration  20: 1240472.219 ops/s
# Warmup Iteration  21: 1241923.925 ops/s
# Warmup Iteration  22: 1235335.426 ops/s
# Warmup Iteration  23: 1237013.566 ops/s
# Warmup Iteration  24: 1239609.437 ops/s
# Warmup Iteration  25: 1239465.354 ops/s
# Warmup Iteration  26: 1240484.755 ops/s
# Warmup Iteration  27: 1238069.836 ops/s
# Warmup Iteration  28: 1243565.073 ops/s
# Warmup Iteration  29: 1238349.881 ops/s
# Warmup Iteration  30: 1239916.161 ops/s
Iteration   1: 1243235.683 ops/s
Iteration   2: 1243673.977 ops/s
Iteration   3: 1234699.066 ops/s
Iteration   4: 1247305.978 ops/s
Iteration   5: 1233725.851 ops/s
Iteration   6: 1239562.401 ops/s
Iteration   7: 1240436.966 ops/s
Iteration   8: 1240156.778 ops/s
Iteration   9: 1240437.705 ops/s
Iteration  10: 1242065.042 ops/s
Iteration  11: 1234080.327 ops/s
Iteration  12: 1235978.882 ops/s
Iteration  13: 1245159.229 ops/s
Iteration  14: 1226139.348 ops/s
Iteration  15: 1239580.438 ops/s
Iteration  16: 1242235.453 ops/s
Iteration  17: 1238780.306 ops/s
Iteration  18: 1240903.344 ops/s
Iteration  19: 1245237.553 ops/s
Iteration  20: 1240814.852 ops/s
Iteration  21: 1238994.973 ops/s
Iteration  22: 1236054.984 ops/s
Iteration  23: 1235358.795 ops/s
Iteration  24: 1236539.753 ops/s
Iteration  25: 1237651.243 ops/s
Iteration  26: 1236770.952 ops/s
Iteration  27: 1241312.959 ops/s
Iteration  28: 1238795.334 ops/s
Iteration  29: 1242903.405 ops/s
Iteration  30: 1234966.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMapBy":
  1239118.603 ±(99.9%) 2869.263 ops/s [Average]
  (min, avg, max) = (1226139.348, 1239118.603, 1247305.978), stdev = 4294.579
  CI (99.9%): [1236249.340, 1241987.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1239118.603 ± 2869.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604271.532 ops/s
# Warmup Iteration   2: 1340717.826 ops/s
# Warmup Iteration   3: 1413594.217 ops/s
# Warmup Iteration   4: 1419827.590 ops/s
# Warmup Iteration   5: 1191582.883 ops/s
# Warmup Iteration   6: 1428987.774 ops/s
# Warmup Iteration   7: 1426576.674 ops/s
# Warmup Iteration   8: 1420901.454 ops/s
# Warmup Iteration   9: 1419915.682 ops/s
# Warmup Iteration  10: 1424723.562 ops/s
# Warmup Iteration  11: 1426877.195 ops/s
# Warmup Iteration  12: 1424832.542 ops/s
# Warmup Iteration  13: 1423680.959 ops/s
# Warmup Iteration  14: 1426791.832 ops/s
# Warmup Iteration  15: 1423715.028 ops/s
# Warmup Iteration  16: 1430628.631 ops/s
# Warmup Iteration  17: 1420781.930 ops/s
# Warmup Iteration  18: 1425322.064 ops/s
# Warmup Iteration  19: 1429861.432 ops/s
# Warmup Iteration  20: 1424207.810 ops/s
# Warmup Iteration  21: 1426854.662 ops/s
# Warmup Iteration  22: 1421965.497 ops/s
# Warmup Iteration  23: 1421434.362 ops/s
# Warmup Iteration  24: 1423316.278 ops/s
# Warmup Iteration  25: 1430105.044 ops/s
# Warmup Iteration  26: 1422264.248 ops/s
# Warmup Iteration  27: 1423619.342 ops/s
# Warmup Iteration  28: 1422806.632 ops/s
# Warmup Iteration  29: 1420524.958 ops/s
# Warmup Iteration  30: 1420960.923 ops/s
Iteration   1: 1427844.543 ops/s
Iteration   2: 1426231.017 ops/s
Iteration   3: 1427050.477 ops/s
Iteration   4: 1420200.281 ops/s
Iteration   5: 1419701.655 ops/s
Iteration   6: 1425887.081 ops/s
Iteration   7: 1426188.054 ops/s
Iteration   8: 1427543.906 ops/s
Iteration   9: 1426844.074 ops/s
Iteration  10: 1422678.902 ops/s
Iteration  11: 1424006.236 ops/s
Iteration  12: 1416279.838 ops/s
Iteration  13: 1432309.813 ops/s
Iteration  14: 1428238.798 ops/s
Iteration  15: 1431106.931 ops/s
Iteration  16: 1421050.003 ops/s
Iteration  17: 1426218.516 ops/s
Iteration  18: 1421072.163 ops/s
Iteration  19: 1425919.906 ops/s
Iteration  20: 1419972.250 ops/s
Iteration  21: 1423127.778 ops/s
Iteration  22: 1428083.304 ops/s
Iteration  23: 1423467.987 ops/s
Iteration  24: 1420834.479 ops/s
Iteration  25: 1419180.865 ops/s
Iteration  26: 1427807.218 ops/s
Iteration  27: 1427691.544 ops/s
Iteration  28: 1423702.894 ops/s
Iteration  29: 1422177.019 ops/s
Iteration  30: 1434738.637 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1424905.206 ±(99.9%) 2788.538 ops/s [Average]
  (min, avg, max) = (1416279.838, 1424905.206, 1434738.637), stdev = 4173.753
  CI (99.9%): [1422116.667, 1427693.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1424905.206 ± 2788.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997807.540 ops/s
# Warmup Iteration   2: 2545614.796 ops/s
# Warmup Iteration   3: 2345500.367 ops/s
# Warmup Iteration   4: 2346714.949 ops/s
# Warmup Iteration   5: 2561568.397 ops/s
# Warmup Iteration   6: 2564320.239 ops/s
# Warmup Iteration   7: 2578558.787 ops/s
# Warmup Iteration   8: 2570982.836 ops/s
# Warmup Iteration   9: 2572376.501 ops/s
# Warmup Iteration  10: 2569348.575 ops/s
# Warmup Iteration  11: 2558097.123 ops/s
# Warmup Iteration  12: 2568161.145 ops/s
# Warmup Iteration  13: 2567047.324 ops/s
# Warmup Iteration  14: 2569445.501 ops/s
# Warmup Iteration  15: 2566688.610 ops/s
# Warmup Iteration  16: 2566630.334 ops/s
# Warmup Iteration  17: 2564963.634 ops/s
# Warmup Iteration  18: 2565526.861 ops/s
# Warmup Iteration  19: 2568718.762 ops/s
# Warmup Iteration  20: 2563928.597 ops/s
# Warmup Iteration  21: 2574001.774 ops/s
# Warmup Iteration  22: 2572356.268 ops/s
# Warmup Iteration  23: 2563783.211 ops/s
# Warmup Iteration  24: 2568840.661 ops/s
# Warmup Iteration  25: 2566322.042 ops/s
# Warmup Iteration  26: 2564355.218 ops/s
# Warmup Iteration  27: 2567376.842 ops/s
# Warmup Iteration  28: 2562028.932 ops/s
# Warmup Iteration  29: 2570519.928 ops/s
# Warmup Iteration  30: 2560958.854 ops/s
Iteration   1: 2570511.317 ops/s
Iteration   2: 2569280.140 ops/s
Iteration   3: 2568690.058 ops/s
Iteration   4: 2572403.799 ops/s
Iteration   5: 2566769.957 ops/s
Iteration   6: 2564257.750 ops/s
Iteration   7: 2575009.054 ops/s
Iteration   8: 2566666.907 ops/s
Iteration   9: 2568737.499 ops/s
Iteration  10: 2563690.852 ops/s
Iteration  11: 2572511.480 ops/s
Iteration  12: 2568093.984 ops/s
Iteration  13: 2572038.875 ops/s
Iteration  14: 2570450.088 ops/s
Iteration  15: 2570278.920 ops/s
Iteration  16: 2560520.956 ops/s
Iteration  17: 2558211.352 ops/s
Iteration  18: 2549742.363 ops/s
Iteration  19: 2556018.620 ops/s
Iteration  20: 2578096.687 ops/s
Iteration  21: 2568146.263 ops/s
Iteration  22: 2568950.745 ops/s
Iteration  23: 2573508.915 ops/s
Iteration  24: 2570110.024 ops/s
Iteration  25: 2563000.435 ops/s
Iteration  26: 2568966.418 ops/s
Iteration  27: 2571100.985 ops/s
Iteration  28: 2569844.562 ops/s
Iteration  29: 2568018.441 ops/s
Iteration  30: 2574916.532 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSetBy":
  2567951.466 ±(99.9%) 3951.156 ops/s [Average]
  (min, avg, max) = (2549742.363, 2567951.466, 2578096.687), stdev = 5913.905
  CI (99.9%): [2564000.310, 2571902.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  2567951.466 ± 3951.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022825.545 ops/s
# Warmup Iteration   2: 2592151.259 ops/s
# Warmup Iteration   3: 2567736.529 ops/s
# Warmup Iteration   4: 2142725.748 ops/s
# Warmup Iteration   5: 2573463.802 ops/s
# Warmup Iteration   6: 2571511.229 ops/s
# Warmup Iteration   7: 2562619.810 ops/s
# Warmup Iteration   8: 2565449.085 ops/s
# Warmup Iteration   9: 2565294.303 ops/s
# Warmup Iteration  10: 2568892.204 ops/s
# Warmup Iteration  11: 2568822.755 ops/s
# Warmup Iteration  12: 2572583.085 ops/s
# Warmup Iteration  13: 2564683.447 ops/s
# Warmup Iteration  14: 2569513.822 ops/s
# Warmup Iteration  15: 2575845.487 ops/s
# Warmup Iteration  16: 2577124.829 ops/s
# Warmup Iteration  17: 2567721.863 ops/s
# Warmup Iteration  18: 2572719.901 ops/s
# Warmup Iteration  19: 2574133.453 ops/s
# Warmup Iteration  20: 2569700.720 ops/s
# Warmup Iteration  21: 2563590.286 ops/s
# Warmup Iteration  22: 2568035.929 ops/s
# Warmup Iteration  23: 2567784.145 ops/s
# Warmup Iteration  24: 2566245.810 ops/s
# Warmup Iteration  25: 2569376.079 ops/s
# Warmup Iteration  26: 2567690.168 ops/s
# Warmup Iteration  27: 2570702.857 ops/s
# Warmup Iteration  28: 2573547.972 ops/s
# Warmup Iteration  29: 2572493.015 ops/s
# Warmup Iteration  30: 2574426.264 ops/s
Iteration   1: 2571431.840 ops/s
Iteration   2: 2570342.897 ops/s
Iteration   3: 2562832.006 ops/s
Iteration   4: 2568384.142 ops/s
Iteration   5: 2577157.971 ops/s
Iteration   6: 2562900.486 ops/s
Iteration   7: 2570496.519 ops/s
Iteration   8: 2563637.667 ops/s
Iteration   9: 2575823.049 ops/s
Iteration  10: 2574003.701 ops/s
Iteration  11: 2573948.447 ops/s
Iteration  12: 2576329.956 ops/s
Iteration  13: 2569226.658 ops/s
Iteration  14: 2565151.580 ops/s
Iteration  15: 2567191.232 ops/s
Iteration  16: 2572598.670 ops/s
Iteration  17: 2564234.775 ops/s
Iteration  18: 2576290.608 ops/s
Iteration  19: 2575008.568 ops/s
Iteration  20: 2570284.812 ops/s
Iteration  21: 2574222.790 ops/s
Iteration  22: 2566817.427 ops/s
Iteration  23: 2568698.961 ops/s
Iteration  24: 2570427.345 ops/s
Iteration  25: 2578004.961 ops/s
Iteration  26: 2567459.444 ops/s
Iteration  27: 2572593.122 ops/s
Iteration  28: 2575444.619 ops/s
Iteration  29: 2572596.387 ops/s
Iteration  30: 2572001.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2570851.392 ±(99.9%) 2953.128 ops/s [Average]
  (min, avg, max) = (2562832.006, 2570851.392, 2578004.961), stdev = 4420.103
  CI (99.9%): [2567898.264, 2573804.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2570851.392 ± 2953.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 956908.621 ops/s
# Warmup Iteration   2: 2447967.180 ops/s
# Warmup Iteration   3: 2486847.774 ops/s
# Warmup Iteration   4: 2067490.284 ops/s
# Warmup Iteration   5: 2488068.884 ops/s
# Warmup Iteration   6: 2492856.695 ops/s
# Warmup Iteration   7: 2486674.632 ops/s
# Warmup Iteration   8: 2487107.064 ops/s
# Warmup Iteration   9: 2485571.146 ops/s
# Warmup Iteration  10: 2489201.753 ops/s
# Warmup Iteration  11: 2489248.453 ops/s
# Warmup Iteration  12: 2490063.755 ops/s
# Warmup Iteration  13: 2488919.002 ops/s
# Warmup Iteration  14: 2487170.827 ops/s
# Warmup Iteration  15: 2491506.132 ops/s
# Warmup Iteration  16: 2492756.215 ops/s
# Warmup Iteration  17: 2486389.733 ops/s
# Warmup Iteration  18: 2487029.877 ops/s
# Warmup Iteration  19: 2486734.480 ops/s
# Warmup Iteration  20: 2488395.865 ops/s
# Warmup Iteration  21: 2485425.018 ops/s
# Warmup Iteration  22: 2488684.837 ops/s
# Warmup Iteration  23: 2484894.462 ops/s
# Warmup Iteration  24: 2489077.986 ops/s
# Warmup Iteration  25: 2489941.612 ops/s
# Warmup Iteration  26: 2481133.634 ops/s
# Warmup Iteration  27: 2481684.858 ops/s
# Warmup Iteration  28: 2487856.692 ops/s
# Warmup Iteration  29: 2488591.390 ops/s
# Warmup Iteration  30: 2484737.324 ops/s
Iteration   1: 2483822.824 ops/s
Iteration   2: 2492068.483 ops/s
Iteration   3: 2483801.352 ops/s
Iteration   4: 2486111.156 ops/s
Iteration   5: 2490396.448 ops/s
Iteration   6: 2491161.305 ops/s
Iteration   7: 2486088.380 ops/s
Iteration   8: 2478202.669 ops/s
Iteration   9: 2496008.630 ops/s
Iteration  10: 2480500.849 ops/s
Iteration  11: 2492021.811 ops/s
Iteration  12: 2487113.111 ops/s
Iteration  13: 2481886.493 ops/s
Iteration  14: 2480592.135 ops/s
Iteration  15: 2491054.242 ops/s
Iteration  16: 2490307.745 ops/s
Iteration  17: 2490662.033 ops/s
Iteration  18: 2489061.115 ops/s
Iteration  19: 2494842.467 ops/s
Iteration  20: 2481165.742 ops/s
Iteration  21: 2484308.571 ops/s
Iteration  22: 2491520.447 ops/s
Iteration  23: 2481756.024 ops/s
Iteration  24: 2488812.135 ops/s
Iteration  25: 2482764.465 ops/s
Iteration  26: 2488898.377 ops/s
Iteration  27: 2491798.124 ops/s
Iteration  28: 2488618.166 ops/s
Iteration  29: 2486512.257 ops/s
Iteration  30: 2492770.803 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2487487.612 ±(99.9%) 3144.388 ops/s [Average]
  (min, avg, max) = (2478202.669, 2487487.612, 2496008.630), stdev = 4706.372
  CI (99.9%): [2484343.224, 2490632.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2487487.612 ± 3144.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6383905.346 ops/s
# Warmup Iteration   2: 14304263.071 ops/s
# Warmup Iteration   3: 11971676.974 ops/s
# Warmup Iteration   4: 14332793.726 ops/s
# Warmup Iteration   5: 14340622.214 ops/s
# Warmup Iteration   6: 14297240.710 ops/s
# Warmup Iteration   7: 14315583.811 ops/s
# Warmup Iteration   8: 14320613.088 ops/s
# Warmup Iteration   9: 14326882.355 ops/s
# Warmup Iteration  10: 14366232.349 ops/s
# Warmup Iteration  11: 14344048.915 ops/s
# Warmup Iteration  12: 14352426.790 ops/s
# Warmup Iteration  13: 14340663.479 ops/s
# Warmup Iteration  14: 14336747.203 ops/s
# Warmup Iteration  15: 14339364.576 ops/s
# Warmup Iteration  16: 14283134.722 ops/s
# Warmup Iteration  17: 14325606.279 ops/s
# Warmup Iteration  18: 14341240.313 ops/s
# Warmup Iteration  19: 14346508.340 ops/s
# Warmup Iteration  20: 14327809.188 ops/s
# Warmup Iteration  21: 14358063.472 ops/s
# Warmup Iteration  22: 14332360.726 ops/s
# Warmup Iteration  23: 14320688.845 ops/s
# Warmup Iteration  24: 14320332.866 ops/s
# Warmup Iteration  25: 14306652.473 ops/s
# Warmup Iteration  26: 14289869.958 ops/s
# Warmup Iteration  27: 14349935.870 ops/s
# Warmup Iteration  28: 14369041.722 ops/s
# Warmup Iteration  29: 14300545.968 ops/s
# Warmup Iteration  30: 14314033.496 ops/s
Iteration   1: 14352664.645 ops/s
Iteration   2: 14262381.196 ops/s
Iteration   3: 14373735.850 ops/s
Iteration   4: 14351066.033 ops/s
Iteration   5: 14285395.209 ops/s
Iteration   6: 14375085.528 ops/s
Iteration   7: 14326355.330 ops/s
Iteration   8: 14309536.255 ops/s
Iteration   9: 14337651.632 ops/s
Iteration  10: 14328371.863 ops/s
Iteration  11: 14332549.425 ops/s
Iteration  12: 14332486.681 ops/s
Iteration  13: 14395137.380 ops/s
Iteration  14: 14330125.971 ops/s
Iteration  15: 14379906.711 ops/s
Iteration  16: 14308740.570 ops/s
Iteration  17: 14330691.901 ops/s
Iteration  18: 14313479.336 ops/s
Iteration  19: 14327404.326 ops/s
Iteration  20: 14359303.412 ops/s
Iteration  21: 14288056.598 ops/s
Iteration  22: 14333251.166 ops/s
Iteration  23: 14351997.845 ops/s
Iteration  24: 14359713.655 ops/s
Iteration  25: 14363714.059 ops/s
Iteration  26: 14331791.912 ops/s
Iteration  27: 14331334.678 ops/s
Iteration  28: 14394955.806 ops/s
Iteration  29: 14369362.120 ops/s
Iteration  30: 14311682.644 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_toStack":
  14338264.325 ±(99.9%) 20991.871 ops/s [Average]
  (min, avg, max) = (14262381.196, 14338264.325, 14395137.380), stdev = 31419.647
  CI (99.9%): [14317272.454, 14359256.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_toStack  thrpt   30  14338264.325 ± 20991.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3826079.506 ops/s
# Warmup Iteration   2: 9116788.733 ops/s
# Warmup Iteration   3: 9265191.608 ops/s
# Warmup Iteration   4: 7654682.419 ops/s
# Warmup Iteration   5: 9285272.520 ops/s
# Warmup Iteration   6: 9281549.550 ops/s
# Warmup Iteration   7: 9267399.097 ops/s
# Warmup Iteration   8: 9237438.778 ops/s
# Warmup Iteration   9: 9256812.251 ops/s
# Warmup Iteration  10: 9285637.369 ops/s
# Warmup Iteration  11: 9286539.398 ops/s
# Warmup Iteration  12: 9269111.484 ops/s
# Warmup Iteration  13: 9283428.984 ops/s
# Warmup Iteration  14: 9294472.943 ops/s
# Warmup Iteration  15: 9260482.014 ops/s
# Warmup Iteration  16: 9260086.476 ops/s
# Warmup Iteration  17: 9274296.768 ops/s
# Warmup Iteration  18: 9293679.350 ops/s
# Warmup Iteration  19: 9285814.988 ops/s
# Warmup Iteration  20: 9261744.583 ops/s
# Warmup Iteration  21: 9298070.329 ops/s
# Warmup Iteration  22: 9286823.399 ops/s
# Warmup Iteration  23: 9288826.876 ops/s
# Warmup Iteration  24: 9256443.091 ops/s
# Warmup Iteration  25: 9291481.145 ops/s
# Warmup Iteration  26: 9282775.926 ops/s
# Warmup Iteration  27: 9274554.754 ops/s
# Warmup Iteration  28: 9270110.297 ops/s
# Warmup Iteration  29: 9255924.335 ops/s
# Warmup Iteration  30: 9299632.009 ops/s
Iteration   1: 9279111.484 ops/s
Iteration   2: 9281526.016 ops/s
Iteration   3: 9294185.136 ops/s
Iteration   4: 9246961.995 ops/s
Iteration   5: 9272763.083 ops/s
Iteration   6: 9324343.217 ops/s
Iteration   7: 9279312.930 ops/s
Iteration   8: 9297764.995 ops/s
Iteration   9: 9287550.807 ops/s
Iteration  10: 9276043.930 ops/s
Iteration  11: 9289296.873 ops/s
Iteration  12: 9284831.069 ops/s
Iteration  13: 9289360.999 ops/s
Iteration  14: 9269300.505 ops/s
Iteration  15: 9274700.650 ops/s
Iteration  16: 9256354.940 ops/s
Iteration  17: 9280755.561 ops/s
Iteration  18: 9278284.914 ops/s
Iteration  19: 9279952.174 ops/s
Iteration  20: 9291362.505 ops/s
Iteration  21: 9259170.560 ops/s
Iteration  22: 9277764.118 ops/s
Iteration  23: 9264326.899 ops/s
Iteration  24: 9264736.199 ops/s
Iteration  25: 9298340.669 ops/s
Iteration  26: 9279199.906 ops/s
Iteration  27: 9294676.783 ops/s
Iteration  28: 9273477.679 ops/s
Iteration  29: 9277890.882 ops/s
Iteration  30: 9271418.402 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_with":
  9279825.529 ±(99.9%) 9866.586 ops/s [Average]
  (min, avg, max) = (9246961.995, 9279825.529, 9324343.217), stdev = 14767.843
  CI (99.9%): [9269958.943, 9289692.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_with  thrpt   30  9279825.529 ± 9866.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2973016.971 ops/s
# Warmup Iteration   2: 8606285.099 ops/s
# Warmup Iteration   3: 8713306.035 ops/s
# Warmup Iteration   4: 7170051.121 ops/s
# Warmup Iteration   5: 8635874.187 ops/s
# Warmup Iteration   6: 8644884.203 ops/s
# Warmup Iteration   7: 8626743.756 ops/s
# Warmup Iteration   8: 8627516.151 ops/s
# Warmup Iteration   9: 8623974.565 ops/s
# Warmup Iteration  10: 8616622.978 ops/s
# Warmup Iteration  11: 8623625.365 ops/s
# Warmup Iteration  12: 8626520.137 ops/s
# Warmup Iteration  13: 8625843.034 ops/s
# Warmup Iteration  14: 8622390.517 ops/s
# Warmup Iteration  15: 8611568.320 ops/s
# Warmup Iteration  16: 8611178.817 ops/s
# Warmup Iteration  17: 8591231.208 ops/s
# Warmup Iteration  18: 8592826.452 ops/s
# Warmup Iteration  19: 8606879.494 ops/s
# Warmup Iteration  20: 8616619.539 ops/s
# Warmup Iteration  21: 8630078.018 ops/s
# Warmup Iteration  22: 8606058.043 ops/s
# Warmup Iteration  23: 8616502.908 ops/s
# Warmup Iteration  24: 8626382.905 ops/s
# Warmup Iteration  25: 8617217.974 ops/s
# Warmup Iteration  26: 8607033.242 ops/s
# Warmup Iteration  27: 8629190.275 ops/s
# Warmup Iteration  28: 8620890.798 ops/s
# Warmup Iteration  29: 8627726.366 ops/s
# Warmup Iteration  30: 8605931.735 ops/s
Iteration   1: 8591591.860 ops/s
Iteration   2: 8624632.733 ops/s
Iteration   3: 8632219.417 ops/s
Iteration   4: 8633261.789 ops/s
Iteration   5: 8629439.000 ops/s
Iteration   6: 8593174.967 ops/s
Iteration   7: 8600380.705 ops/s
Iteration   8: 8619566.165 ops/s
Iteration   9: 8617342.510 ops/s
Iteration  10: 8629574.454 ops/s
Iteration  11: 8633311.056 ops/s
Iteration  12: 8624943.354 ops/s
Iteration  13: 8651844.940 ops/s
Iteration  14: 8596654.516 ops/s
Iteration  15: 8611093.622 ops/s
Iteration  16: 8591980.418 ops/s
Iteration  17: 8618946.126 ops/s
Iteration  18: 8603108.161 ops/s
Iteration  19: 8613046.771 ops/s
Iteration  20: 8598069.463 ops/s
Iteration  21: 8617471.394 ops/s
Iteration  22: 8611146.363 ops/s
Iteration  23: 8601488.379 ops/s
Iteration  24: 8616673.213 ops/s
Iteration  25: 8614720.684 ops/s
Iteration  26: 8612836.509 ops/s
Iteration  27: 8631545.274 ops/s
Iteration  28: 8601830.582 ops/s
Iteration  29: 8633153.945 ops/s
Iteration  30: 8617164.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withAll":
  8615740.416 ±(99.9%) 10006.296 ops/s [Average]
  (min, avg, max) = (8591591.860, 8615740.416, 8651844.940), stdev = 14976.954
  CI (99.9%): [8605734.120, 8625746.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_withAll  thrpt   30  8615740.416 ± 10006.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2423597.763 ops/s
# Warmup Iteration   2: 5562030.397 ops/s
# Warmup Iteration   3: 4675606.855 ops/s
# Warmup Iteration   4: 5608770.524 ops/s
# Warmup Iteration   5: 5597169.511 ops/s
# Warmup Iteration   6: 5600382.427 ops/s
# Warmup Iteration   7: 5611021.616 ops/s
# Warmup Iteration   8: 5609901.801 ops/s
# Warmup Iteration   9: 5615738.471 ops/s
# Warmup Iteration  10: 5616014.624 ops/s
# Warmup Iteration  11: 5602139.838 ops/s
# Warmup Iteration  12: 5604351.610 ops/s
# Warmup Iteration  13: 5601944.731 ops/s
# Warmup Iteration  14: 5618239.913 ops/s
# Warmup Iteration  15: 5610831.207 ops/s
# Warmup Iteration  16: 5615123.096 ops/s
# Warmup Iteration  17: 5596907.007 ops/s
# Warmup Iteration  18: 5606440.278 ops/s
# Warmup Iteration  19: 5600308.625 ops/s
# Warmup Iteration  20: 5606404.638 ops/s
# Warmup Iteration  21: 5607551.693 ops/s
# Warmup Iteration  22: 5595985.855 ops/s
# Warmup Iteration  23: 5607158.481 ops/s
# Warmup Iteration  24: 5614253.742 ops/s
# Warmup Iteration  25: 5601628.581 ops/s
# Warmup Iteration  26: 5612248.172 ops/s
# Warmup Iteration  27: 5604855.332 ops/s
# Warmup Iteration  28: 5604556.006 ops/s
# Warmup Iteration  29: 5605194.275 ops/s
# Warmup Iteration  30: 5608969.308 ops/s
Iteration   1: 5618952.363 ops/s
Iteration   2: 5587890.666 ops/s
Iteration   3: 5603839.436 ops/s
Iteration   4: 5612028.420 ops/s
Iteration   5: 5597778.656 ops/s
Iteration   6: 5600334.705 ops/s
Iteration   7: 5600881.073 ops/s
Iteration   8: 5612969.456 ops/s
Iteration   9: 5610599.756 ops/s
Iteration  10: 5586506.349 ops/s
Iteration  11: 5580074.512 ops/s
Iteration  12: 5610350.918 ops/s
Iteration  13: 5600643.563 ops/s
Iteration  14: 5597416.741 ops/s
Iteration  15: 5622051.178 ops/s
Iteration  16: 5580167.991 ops/s
Iteration  17: 5621765.828 ops/s
Iteration  18: 5614115.268 ops/s
Iteration  19: 5602616.868 ops/s
Iteration  20: 5587857.682 ops/s
Iteration  21: 5615623.092 ops/s
Iteration  22: 5589011.068 ops/s
Iteration  23: 5620946.529 ops/s
Iteration  24: 5592849.633 ops/s
Iteration  25: 5592458.008 ops/s
Iteration  26: 5626828.305 ops/s
Iteration  27: 5578185.276 ops/s
Iteration  28: 5635280.316 ops/s
Iteration  29: 5596087.145 ops/s
Iteration  30: 5615409.058 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withMethods":
  5603717.329 ±(99.9%) 10034.699 ops/s [Average]
  (min, avg, max) = (5578185.276, 5603717.329, 5635280.316), stdev = 15019.466
  CI (99.9%): [5593682.630, 5613752.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_withMethods  thrpt   30  5603717.329 ± 10034.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4407442.635 ops/s
# Warmup Iteration   2: 10821763.626 ops/s
# Warmup Iteration   3: 10873973.186 ops/s
# Warmup Iteration   4: 8939411.127 ops/s
# Warmup Iteration   5: 10895333.493 ops/s
# Warmup Iteration   6: 10910763.110 ops/s
# Warmup Iteration   7: 10890782.067 ops/s
# Warmup Iteration   8: 10884938.926 ops/s
# Warmup Iteration   9: 10875856.030 ops/s
# Warmup Iteration  10: 10909508.320 ops/s
# Warmup Iteration  11: 10920253.831 ops/s
# Warmup Iteration  12: 10909190.391 ops/s
# Warmup Iteration  13: 10912102.411 ops/s
# Warmup Iteration  14: 10904934.954 ops/s
# Warmup Iteration  15: 10897681.141 ops/s
# Warmup Iteration  16: 10891206.125 ops/s
# Warmup Iteration  17: 10881556.496 ops/s
# Warmup Iteration  18: 10886757.532 ops/s
# Warmup Iteration  19: 10904866.104 ops/s
# Warmup Iteration  20: 10903801.341 ops/s
# Warmup Iteration  21: 10908205.473 ops/s
# Warmup Iteration  22: 10863058.600 ops/s
# Warmup Iteration  23: 10880410.062 ops/s
# Warmup Iteration  24: 10900542.487 ops/s
# Warmup Iteration  25: 10904204.651 ops/s
# Warmup Iteration  26: 10931094.754 ops/s
# Warmup Iteration  27: 10909998.466 ops/s
# Warmup Iteration  28: 10899559.859 ops/s
# Warmup Iteration  29: 10920186.994 ops/s
# Warmup Iteration  30: 10912853.071 ops/s
Iteration   1: 10896214.626 ops/s
Iteration   2: 10896072.788 ops/s
Iteration   3: 10939297.277 ops/s
Iteration   4: 10896881.067 ops/s
Iteration   5: 10907325.520 ops/s
Iteration   6: 10912701.491 ops/s
Iteration   7: 10916609.788 ops/s
Iteration   8: 10917269.246 ops/s
Iteration   9: 10898539.748 ops/s
Iteration  10: 10917259.750 ops/s
Iteration  11: 10932781.617 ops/s
Iteration  12: 10905478.912 ops/s
Iteration  13: 10918827.846 ops/s
Iteration  14: 10906275.800 ops/s
Iteration  15: 10914596.477 ops/s
Iteration  16: 10928161.137 ops/s
Iteration  17: 10909535.001 ops/s
Iteration  18: 10920658.365 ops/s
Iteration  19: 10926212.042 ops/s
Iteration  20: 10923448.999 ops/s
Iteration  21: 10947803.516 ops/s
Iteration  22: 10896363.743 ops/s
Iteration  23: 10942032.268 ops/s
Iteration  24: 10899840.916 ops/s
Iteration  25: 10920769.682 ops/s
Iteration  26: 10908674.946 ops/s
Iteration  27: 10929597.227 ops/s
Iteration  28: 10898983.314 ops/s
Iteration  29: 10915264.784 ops/s
Iteration  30: 10887624.149 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_without":
  10914370.068 ±(99.9%) 10057.832 ops/s [Average]
  (min, avg, max) = (10887624.149, 10914370.068, 10947803.516), stdev = 15054.090
  CI (99.9%): [10904312.236, 10924427.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayListAdapterTest._Benchmark.benchmark_without  thrpt   30  10914370.068 ± 10057.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1869045.439 ops/s
# Warmup Iteration   2: 3190767.457 ops/s
# Warmup Iteration   3: 3669376.695 ops/s
# Warmup Iteration   4: 3683082.358 ops/s
# Warmup Iteration   5: 3680288.605 ops/s
# Warmup Iteration   6: 3026312.897 ops/s
# Warmup Iteration   7: 3694195.895 ops/s
# Warmup Iteration   8: 3689745.444 ops/s
# Warmup Iteration   9: 3692724.091 ops/s
# Warmup Iteration  10: 3689516.440 ops/s
# Warmup Iteration  11: 3688105.206 ops/s
# Warmup Iteration  12: 3685079.727 ops/s
# Warmup Iteration  13: 3687922.737 ops/s
# Warmup Iteration  14: 3681197.293 ops/s
# Warmup Iteration  15: 3683216.858 ops/s
# Warmup Iteration  16: 3688681.733 ops/s
# Warmup Iteration  17: 3692071.582 ops/s
# Warmup Iteration  18: 3687805.290 ops/s
# Warmup Iteration  19: 3685127.303 ops/s
# Warmup Iteration  20: 3681009.790 ops/s
# Warmup Iteration  21: 3680810.925 ops/s
# Warmup Iteration  22: 3689188.882 ops/s
# Warmup Iteration  23: 3690073.767 ops/s
# Warmup Iteration  24: 3687176.420 ops/s
# Warmup Iteration  25: 3682488.770 ops/s
# Warmup Iteration  26: 3693182.007 ops/s
# Warmup Iteration  27: 3685420.500 ops/s
# Warmup Iteration  28: 3689929.234 ops/s
# Warmup Iteration  29: 3688412.611 ops/s
# Warmup Iteration  30: 3688405.795 ops/s
Iteration   1: 3690480.865 ops/s
Iteration   2: 3686652.276 ops/s
Iteration   3: 3688394.661 ops/s
Iteration   4: 3693918.069 ops/s
Iteration   5: 3686978.492 ops/s
Iteration   6: 3673996.651 ops/s
Iteration   7: 3682061.314 ops/s
Iteration   8: 3694545.538 ops/s
Iteration   9: 3679046.434 ops/s
Iteration  10: 3682253.326 ops/s
Iteration  11: 3677877.982 ops/s
Iteration  12: 3676737.810 ops/s
Iteration  13: 3694912.176 ops/s
Iteration  14: 3684478.985 ops/s
Iteration  15: 3694196.306 ops/s
Iteration  16: 3684652.560 ops/s
Iteration  17: 3695692.148 ops/s
Iteration  18: 3690173.435 ops/s
Iteration  19: 3689522.289 ops/s
Iteration  20: 3689189.710 ops/s
Iteration  21: 3686752.160 ops/s
Iteration  22: 3693640.248 ops/s
Iteration  23: 3678407.371 ops/s
Iteration  24: 3687058.661 ops/s
Iteration  25: 3672968.041 ops/s
Iteration  26: 3686270.575 ops/s
Iteration  27: 3682434.447 ops/s
Iteration  28: 3691188.152 ops/s
Iteration  29: 3678190.442 ops/s
Iteration  30: 3674984.527 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_withoutAll":
  3685588.522 ±(99.9%) 4517.450 ops/s [Average]
  (min, avg, max) = (3672968.041, 3685588.522, 3695692.148), stdev = 6761.507
  CI (99.9%): [3681071.072, 3690105.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_withoutAll  thrpt   30  3685588.522 ± 4517.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 189750.050 ops/s
# Warmup Iteration   2: 201273.940 ops/s
# Warmup Iteration   3: 256542.964 ops/s
# Warmup Iteration   4: 267246.821 ops/s
# Warmup Iteration   5: 267844.638 ops/s
# Warmup Iteration   6: 266189.638 ops/s
# Warmup Iteration   7: 267080.138 ops/s
# Warmup Iteration   8: 267935.701 ops/s
# Warmup Iteration   9: 266969.790 ops/s
# Warmup Iteration  10: 267850.929 ops/s
# Warmup Iteration  11: 267101.446 ops/s
# Warmup Iteration  12: 253363.125 ops/s
# Warmup Iteration  13: 235770.076 ops/s
# Warmup Iteration  14: 267596.498 ops/s
# Warmup Iteration  15: 266742.735 ops/s
# Warmup Iteration  16: 267330.793 ops/s
# Warmup Iteration  17: 266850.172 ops/s
# Warmup Iteration  18: 267861.285 ops/s
# Warmup Iteration  19: 267625.094 ops/s
# Warmup Iteration  20: 267599.357 ops/s
# Warmup Iteration  21: 267709.844 ops/s
# Warmup Iteration  22: 267227.274 ops/s
# Warmup Iteration  23: 267981.341 ops/s
# Warmup Iteration  24: 267456.138 ops/s
# Warmup Iteration  25: 267612.368 ops/s
# Warmup Iteration  26: 268169.274 ops/s
# Warmup Iteration  27: 267984.584 ops/s
# Warmup Iteration  28: 267534.077 ops/s
# Warmup Iteration  29: 266807.341 ops/s
# Warmup Iteration  30: 267873.524 ops/s
Iteration   1: 267297.461 ops/s
Iteration   2: 267855.094 ops/s
Iteration   3: 268207.116 ops/s
Iteration   4: 266736.493 ops/s
Iteration   5: 267903.131 ops/s
Iteration   6: 268020.010 ops/s
Iteration   7: 268399.490 ops/s
Iteration   8: 268190.437 ops/s
Iteration   9: 266493.074 ops/s
Iteration  10: 267959.093 ops/s
Iteration  11: 268365.075 ops/s
Iteration  12: 267846.809 ops/s
Iteration  13: 267862.703 ops/s
Iteration  14: 267651.910 ops/s
Iteration  15: 268074.914 ops/s
Iteration  16: 268272.328 ops/s
Iteration  17: 267055.056 ops/s
Iteration  18: 267688.571 ops/s
Iteration  19: 267849.717 ops/s
Iteration  20: 268381.449 ops/s
Iteration  21: 267791.365 ops/s
Iteration  22: 268201.879 ops/s
Iteration  23: 268094.782 ops/s
Iteration  24: 268558.055 ops/s
Iteration  25: 268281.233 ops/s
Iteration  26: 267126.965 ops/s
Iteration  27: 268520.157 ops/s
Iteration  28: 267223.839 ops/s
Iteration  29: 267615.466 ops/s
Iteration  30: 267043.174 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zip":
  267818.895 ±(99.9%) 358.825 ops/s [Average]
  (min, avg, max) = (266493.074, 267818.895, 268558.055), stdev = 537.072
  CI (99.9%): [267460.070, 268177.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
ArrayListAdapterTest._Benchmark.benchmark_zip  thrpt   30  267818.895 ± 358.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 362477.214 ops/s
# Warmup Iteration   2: 484200.375 ops/s
# Warmup Iteration   3: 620649.110 ops/s
# Warmup Iteration   4: 615097.448 ops/s
# Warmup Iteration   5: 617605.845 ops/s
# Warmup Iteration   6: 618744.632 ops/s
# Warmup Iteration   7: 617049.447 ops/s
# Warmup Iteration   8: 557221.072 ops/s
# Warmup Iteration   9: 576930.816 ops/s
# Warmup Iteration  10: 619114.362 ops/s
# Warmup Iteration  11: 620079.288 ops/s
# Warmup Iteration  12: 620994.765 ops/s
# Warmup Iteration  13: 619011.632 ops/s
# Warmup Iteration  14: 618517.903 ops/s
# Warmup Iteration  15: 618655.389 ops/s
# Warmup Iteration  16: 618369.742 ops/s
# Warmup Iteration  17: 617851.613 ops/s
# Warmup Iteration  18: 613227.793 ops/s
# Warmup Iteration  19: 616510.116 ops/s
# Warmup Iteration  20: 615290.792 ops/s
# Warmup Iteration  21: 612874.286 ops/s
# Warmup Iteration  22: 615772.739 ops/s
# Warmup Iteration  23: 614341.635 ops/s
# Warmup Iteration  24: 615688.744 ops/s
# Warmup Iteration  25: 618830.633 ops/s
# Warmup Iteration  26: 619902.017 ops/s
# Warmup Iteration  27: 617599.437 ops/s
# Warmup Iteration  28: 620951.407 ops/s
# Warmup Iteration  29: 620103.236 ops/s
# Warmup Iteration  30: 614774.856 ops/s
Iteration   1: 619200.578 ops/s
Iteration   2: 616168.065 ops/s
Iteration   3: 609717.386 ops/s
Iteration   4: 613230.610 ops/s
Iteration   5: 619602.256 ops/s
Iteration   6: 614179.179 ops/s
Iteration   7: 616231.663 ops/s
Iteration   8: 615449.793 ops/s
Iteration   9: 614900.084 ops/s
Iteration  10: 613477.962 ops/s
Iteration  11: 611072.805 ops/s
Iteration  12: 618581.319 ops/s
Iteration  13: 615249.357 ops/s
Iteration  14: 613081.843 ops/s
Iteration  15: 617835.980 ops/s
Iteration  16: 618346.945 ops/s
Iteration  17: 614854.614 ops/s
Iteration  18: 622140.401 ops/s
Iteration  19: 616404.039 ops/s
Iteration  20: 613280.254 ops/s
Iteration  21: 613929.713 ops/s
Iteration  22: 615725.862 ops/s
Iteration  23: 623941.499 ops/s
Iteration  24: 616975.247 ops/s
Iteration  25: 615849.520 ops/s
Iteration  26: 617318.642 ops/s
Iteration  27: 617139.803 ops/s
Iteration  28: 610186.023 ops/s
Iteration  29: 613293.501 ops/s
Iteration  30: 614658.324 ops/s


Result "org.eclipse.collections.impl.list.mutable.ArrayListAdapterTest._Benchmark.benchmark_zipWithIndex":
  615734.109 ±(99.9%) 2110.402 ops/s [Average]
  (min, avg, max) = (609717.386, 615734.109, 623941.499), stdev = 3158.751
  CI (99.9%): [613623.707, 617844.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ArrayListAdapterTest._Benchmark.benchmark_zipWithIndex  thrpt   30  615734.109 ± 2110.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3330508.663 ops/s
# Warmup Iteration   2: 7050269.574 ops/s
# Warmup Iteration   3: 5995137.619 ops/s
# Warmup Iteration   4: 7082907.134 ops/s
# Warmup Iteration   5: 7092873.486 ops/s
# Warmup Iteration   6: 7097990.916 ops/s
# Warmup Iteration   7: 7106230.514 ops/s
# Warmup Iteration   8: 7092778.049 ops/s
# Warmup Iteration   9: 7101434.163 ops/s
# Warmup Iteration  10: 7108822.842 ops/s
# Warmup Iteration  11: 7114149.780 ops/s
# Warmup Iteration  12: 7105608.452 ops/s
# Warmup Iteration  13: 7101983.270 ops/s
# Warmup Iteration  14: 7074201.119 ops/s
# Warmup Iteration  15: 7091192.777 ops/s
# Warmup Iteration  16: 7096488.484 ops/s
# Warmup Iteration  17: 7103292.561 ops/s
# Warmup Iteration  18: 7099694.679 ops/s
# Warmup Iteration  19: 7107062.721 ops/s
# Warmup Iteration  20: 7077078.582 ops/s
# Warmup Iteration  21: 7102450.336 ops/s
# Warmup Iteration  22: 7092945.781 ops/s
# Warmup Iteration  23: 7101472.408 ops/s
# Warmup Iteration  24: 7116058.610 ops/s
# Warmup Iteration  25: 7088508.243 ops/s
# Warmup Iteration  26: 7086261.110 ops/s
# Warmup Iteration  27: 7121313.030 ops/s
# Warmup Iteration  28: 7110407.252 ops/s
# Warmup Iteration  29: 7090767.377 ops/s
# Warmup Iteration  30: 7118007.119 ops/s
Iteration   1: 7118009.806 ops/s
Iteration   2: 7105806.574 ops/s
Iteration   3: 7102648.886 ops/s
Iteration   4: 7077782.681 ops/s
Iteration   5: 7104871.584 ops/s
Iteration   6: 7125559.893 ops/s
Iteration   7: 7120993.158 ops/s
Iteration   8: 7069165.339 ops/s
Iteration   9: 7117369.744 ops/s
Iteration  10: 7097500.179 ops/s
Iteration  11: 7116556.185 ops/s
Iteration  12: 7109650.494 ops/s
Iteration  13: 7137097.463 ops/s
Iteration  14: 7110828.858 ops/s
Iteration  15: 7125427.429 ops/s
Iteration  16: 7103416.530 ops/s
Iteration  17: 7106307.887 ops/s
Iteration  18: 7104681.655 ops/s
Iteration  19: 7103123.726 ops/s
Iteration  20: 7080193.904 ops/s
Iteration  21: 7102261.797 ops/s
Iteration  22: 7089521.655 ops/s
Iteration  23: 7103896.880 ops/s
Iteration  24: 7119711.798 ops/s
Iteration  25: 7112936.091 ops/s
Iteration  26: 7098386.360 ops/s
Iteration  27: 7110055.774 ops/s
Iteration  28: 7073953.933 ops/s
Iteration  29: 7110138.553 ops/s
Iteration  30: 7080818.760 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAll":
  7104622.453 ±(99.9%) 10755.618 ops/s [Average]
  (min, avg, max) = (7069165.339, 7104622.453, 7137097.463), stdev = 16098.504
  CI (99.9%): [7093866.835, 7115378.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_addAll  thrpt   30  7104622.453 ± 10755.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538141.045 ops/s
# Warmup Iteration   2: 693043.637 ops/s
# Warmup Iteration   3: 849166.350 ops/s
# Warmup Iteration   4: 843079.861 ops/s
# Warmup Iteration   5: 847867.098 ops/s
# Warmup Iteration   6: 848126.535 ops/s
# Warmup Iteration   7: 848898.725 ops/s
# Warmup Iteration   8: 712557.549 ops/s
# Warmup Iteration   9: 852618.005 ops/s
# Warmup Iteration  10: 850445.849 ops/s
# Warmup Iteration  11: 852716.466 ops/s
# Warmup Iteration  12: 852507.027 ops/s
# Warmup Iteration  13: 851798.652 ops/s
# Warmup Iteration  14: 853594.681 ops/s
# Warmup Iteration  15: 850288.384 ops/s
# Warmup Iteration  16: 851944.539 ops/s
# Warmup Iteration  17: 895944.332 ops/s
# Warmup Iteration  18: 896424.790 ops/s
# Warmup Iteration  19: 895777.149 ops/s
# Warmup Iteration  20: 895061.058 ops/s
# Warmup Iteration  21: 896602.996 ops/s
# Warmup Iteration  22: 896280.443 ops/s
# Warmup Iteration  23: 898169.075 ops/s
# Warmup Iteration  24: 895284.645 ops/s
# Warmup Iteration  25: 895019.021 ops/s
# Warmup Iteration  26: 897565.458 ops/s
# Warmup Iteration  27: 897469.981 ops/s
# Warmup Iteration  28: 895902.210 ops/s
# Warmup Iteration  29: 892554.106 ops/s
# Warmup Iteration  30: 897654.049 ops/s
Iteration   1: 898202.582 ops/s
Iteration   2: 897174.720 ops/s
Iteration   3: 893878.717 ops/s
Iteration   4: 898120.282 ops/s
Iteration   5: 893126.185 ops/s
Iteration   6: 896388.572 ops/s
Iteration   7: 896632.579 ops/s
Iteration   8: 891896.337 ops/s
Iteration   9: 895980.542 ops/s
Iteration  10: 894809.660 ops/s
Iteration  11: 893881.131 ops/s
Iteration  12: 901415.670 ops/s
Iteration  13: 895276.158 ops/s
Iteration  14: 896152.943 ops/s
Iteration  15: 895016.664 ops/s
Iteration  16: 893431.223 ops/s
Iteration  17: 893799.252 ops/s
Iteration  18: 895584.224 ops/s
Iteration  19: 896527.528 ops/s
Iteration  20: 893579.749 ops/s
Iteration  21: 894872.637 ops/s
Iteration  22: 896789.758 ops/s
Iteration  23: 895422.082 ops/s
Iteration  24: 895163.409 ops/s
Iteration  25: 890729.473 ops/s
Iteration  26: 891226.493 ops/s
Iteration  27: 892126.920 ops/s
Iteration  28: 895881.947 ops/s
Iteration  29: 893560.228 ops/s
Iteration  30: 900643.071 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllAtIndex":
  895243.025 ±(99.9%) 1637.506 ops/s [Average]
  (min, avg, max) = (890729.473, 895243.025, 901415.670), stdev = 2450.942
  CI (99.9%): [893605.519, 896880.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  895243.025 ± 1637.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821451.339 ops/s
# Warmup Iteration   2: 1904748.106 ops/s
# Warmup Iteration   3: 1877217.233 ops/s
# Warmup Iteration   4: 1630713.327 ops/s
# Warmup Iteration   5: 1914885.924 ops/s
# Warmup Iteration   6: 1916988.895 ops/s
# Warmup Iteration   7: 1911100.115 ops/s
# Warmup Iteration   8: 1911044.553 ops/s
# Warmup Iteration   9: 1915612.730 ops/s
# Warmup Iteration  10: 1910801.867 ops/s
# Warmup Iteration  11: 1914103.696 ops/s
# Warmup Iteration  12: 1911299.127 ops/s
# Warmup Iteration  13: 1912315.031 ops/s
# Warmup Iteration  14: 1911233.725 ops/s
# Warmup Iteration  15: 1914603.083 ops/s
# Warmup Iteration  16: 1916103.447 ops/s
# Warmup Iteration  17: 1913411.002 ops/s
# Warmup Iteration  18: 1905851.039 ops/s
# Warmup Iteration  19: 1908931.308 ops/s
# Warmup Iteration  20: 1914202.491 ops/s
# Warmup Iteration  21: 1911909.388 ops/s
# Warmup Iteration  22: 1912160.019 ops/s
# Warmup Iteration  23: 1910692.634 ops/s
# Warmup Iteration  24: 1914083.888 ops/s
# Warmup Iteration  25: 1907633.412 ops/s
# Warmup Iteration  26: 1911901.212 ops/s
# Warmup Iteration  27: 1907963.223 ops/s
# Warmup Iteration  28: 1909761.855 ops/s
# Warmup Iteration  29: 1910171.646 ops/s
# Warmup Iteration  30: 1914318.842 ops/s
Iteration   1: 1910523.451 ops/s
Iteration   2: 1916660.962 ops/s
Iteration   3: 1914845.573 ops/s
Iteration   4: 1915389.126 ops/s
Iteration   5: 1914290.553 ops/s
Iteration   6: 1913442.639 ops/s
Iteration   7: 1918970.716 ops/s
Iteration   8: 1910604.728 ops/s
Iteration   9: 1907675.102 ops/s
Iteration  10: 1908753.330 ops/s
Iteration  11: 1913100.258 ops/s
Iteration  12: 1915644.687 ops/s
Iteration  13: 1909875.442 ops/s
Iteration  14: 1919581.434 ops/s
Iteration  15: 1916778.140 ops/s
Iteration  16: 1908361.730 ops/s
Iteration  17: 1909561.006 ops/s
Iteration  18: 1907966.536 ops/s
Iteration  19: 1918043.303 ops/s
Iteration  20: 1909850.121 ops/s
Iteration  21: 1912036.994 ops/s
Iteration  22: 1913248.564 ops/s
Iteration  23: 1913003.253 ops/s
Iteration  24: 1910567.103 ops/s
Iteration  25: 1912403.622 ops/s
Iteration  26: 1912977.080 ops/s
Iteration  27: 1911112.787 ops/s
Iteration  28: 1912685.267 ops/s
Iteration  29: 1911783.484 ops/s
Iteration  30: 1912936.053 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAllIterable":
  1912755.768 ±(99.9%) 2139.171 ops/s [Average]
  (min, avg, max) = (1907675.102, 1912755.768, 1919581.434), stdev = 3201.810
  CI (99.9%): [1910616.598, 1914894.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_addAllIterable  thrpt   30  1912755.768 ± 2139.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3158471.353 ops/s
# Warmup Iteration   2: 7019805.254 ops/s
# Warmup Iteration   3: 7295845.202 ops/s
# Warmup Iteration   4: 6067593.866 ops/s
# Warmup Iteration   5: 7298874.448 ops/s
# Warmup Iteration   6: 7268317.509 ops/s
# Warmup Iteration   7: 7301313.983 ops/s
# Warmup Iteration   8: 7296163.762 ops/s
# Warmup Iteration   9: 7312980.985 ops/s
# Warmup Iteration  10: 7307960.806 ops/s
# Warmup Iteration  11: 7300910.835 ops/s
# Warmup Iteration  12: 7310837.563 ops/s
# Warmup Iteration  13: 7302203.383 ops/s
# Warmup Iteration  14: 7313352.972 ops/s
# Warmup Iteration  15: 7302767.176 ops/s
# Warmup Iteration  16: 7301206.627 ops/s
# Warmup Iteration  17: 7272265.506 ops/s
# Warmup Iteration  18: 7315887.710 ops/s
# Warmup Iteration  19: 7308476.252 ops/s
# Warmup Iteration  20: 7315317.913 ops/s
# Warmup Iteration  21: 7316709.460 ops/s
# Warmup Iteration  22: 7322469.247 ops/s
# Warmup Iteration  23: 7278208.295 ops/s
# Warmup Iteration  24: 7304270.598 ops/s
# Warmup Iteration  25: 7282818.989 ops/s
# Warmup Iteration  26: 7306746.718 ops/s
# Warmup Iteration  27: 7305345.661 ops/s
# Warmup Iteration  28: 7319232.975 ops/s
# Warmup Iteration  29: 7296925.544 ops/s
# Warmup Iteration  30: 7337266.157 ops/s
Iteration   1: 7323657.494 ops/s
Iteration   2: 7313274.861 ops/s
Iteration   3: 7318261.069 ops/s
Iteration   4: 7314723.712 ops/s
Iteration   5: 7306555.671 ops/s
Iteration   6: 7309450.409 ops/s
Iteration   7: 7307894.396 ops/s
Iteration   8: 7299174.247 ops/s
Iteration   9: 7321872.558 ops/s
Iteration  10: 7291437.852 ops/s
Iteration  11: 7303716.321 ops/s
Iteration  12: 7314612.209 ops/s
Iteration  13: 7297057.633 ops/s
Iteration  14: 7298073.147 ops/s
Iteration  15: 7306377.671 ops/s
Iteration  16: 7311548.716 ops/s
Iteration  17: 7318807.243 ops/s
Iteration  18: 7279124.350 ops/s
Iteration  19: 7302019.424 ops/s
Iteration  20: 7288454.607 ops/s
Iteration  21: 7310344.646 ops/s
Iteration  22: 7314948.052 ops/s
Iteration  23: 7277376.719 ops/s
Iteration  24: 7312553.627 ops/s
Iteration  25: 7309573.818 ops/s
Iteration  26: 7310853.949 ops/s
Iteration  27: 7295671.070 ops/s
Iteration  28: 7305714.149 ops/s
Iteration  29: 7306046.511 ops/s
Iteration  30: 7322710.765 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_addAtIndex":
  7306396.230 ±(99.9%) 7806.758 ops/s [Average]
  (min, avg, max) = (7277376.719, 7306396.230, 7323657.494), stdev = 11684.788
  CI (99.9%): [7298589.472, 7314202.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_addAtIndex  thrpt   30  7306396.230 ± 7806.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1171760.784 ops/s
# Warmup Iteration   2: 2363979.192 ops/s
# Warmup Iteration   3: 2589977.443 ops/s
# Warmup Iteration   4: 2590102.845 ops/s
# Warmup Iteration   5: 2135094.227 ops/s
# Warmup Iteration   6: 2601205.219 ops/s
# Warmup Iteration   7: 2609825.639 ops/s
# Warmup Iteration   8: 2606833.245 ops/s
# Warmup Iteration   9: 2607474.959 ops/s
# Warmup Iteration  10: 2622876.442 ops/s
# Warmup Iteration  11: 2623220.924 ops/s
# Warmup Iteration  12: 2617081.003 ops/s
# Warmup Iteration  13: 2595191.209 ops/s
# Warmup Iteration  14: 2614228.163 ops/s
# Warmup Iteration  15: 2612508.114 ops/s
# Warmup Iteration  16: 2597968.793 ops/s
# Warmup Iteration  17: 2613262.567 ops/s
# Warmup Iteration  18: 2605776.602 ops/s
# Warmup Iteration  19: 2601255.432 ops/s
# Warmup Iteration  20: 2616300.122 ops/s
# Warmup Iteration  21: 2610024.257 ops/s
# Warmup Iteration  22: 2600390.160 ops/s
# Warmup Iteration  23: 2615809.580 ops/s
# Warmup Iteration  24: 2618500.584 ops/s
# Warmup Iteration  25: 2603590.530 ops/s
# Warmup Iteration  26: 2601535.831 ops/s
# Warmup Iteration  27: 2614976.893 ops/s
# Warmup Iteration  28: 2615841.510 ops/s
# Warmup Iteration  29: 2619908.331 ops/s
# Warmup Iteration  30: 2608642.660 ops/s
Iteration   1: 2605612.071 ops/s
Iteration   2: 2616215.611 ops/s
Iteration   3: 2609863.324 ops/s
Iteration   4: 2591216.564 ops/s
Iteration   5: 2609413.351 ops/s
Iteration   6: 2624327.599 ops/s
Iteration   7: 2586624.802 ops/s
Iteration   8: 2630234.644 ops/s
Iteration   9: 2587908.993 ops/s
Iteration  10: 2622282.269 ops/s
Iteration  11: 2638439.840 ops/s
Iteration  12: 2602977.172 ops/s
Iteration  13: 2634700.075 ops/s
Iteration  14: 2624895.544 ops/s
Iteration  15: 2596310.938 ops/s
Iteration  16: 2580266.072 ops/s
Iteration  17: 2611691.367 ops/s
Iteration  18: 2642704.978 ops/s
Iteration  19: 2623660.602 ops/s
Iteration  20: 2630462.446 ops/s
Iteration  21: 2618966.754 ops/s
Iteration  22: 2586189.037 ops/s
Iteration  23: 2618183.907 ops/s
Iteration  24: 2622431.204 ops/s
Iteration  25: 2603517.838 ops/s
Iteration  26: 2581402.726 ops/s
Iteration  27: 2593823.609 ops/s
Iteration  28: 2618262.080 ops/s
Iteration  29: 2617734.134 ops/s
Iteration  30: 2613935.495 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByMutating":
  2611475.168 ±(99.9%) 11584.767 ops/s [Average]
  (min, avg, max) = (2580266.072, 2611475.168, 2642704.978), stdev = 17339.536
  CI (99.9%): [2599890.401, 2623059.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2611475.168 ± 11584.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1065879.134 ops/s
# Warmup Iteration   2: 2352050.598 ops/s
# Warmup Iteration   3: 2483356.252 ops/s
# Warmup Iteration   4: 2349627.025 ops/s
# Warmup Iteration   5: 2218683.123 ops/s
# Warmup Iteration   6: 2506065.507 ops/s
# Warmup Iteration   7: 2495136.925 ops/s
# Warmup Iteration   8: 2493762.285 ops/s
# Warmup Iteration   9: 2495819.176 ops/s
# Warmup Iteration  10: 2509443.052 ops/s
# Warmup Iteration  11: 2501772.920 ops/s
# Warmup Iteration  12: 2508034.310 ops/s
# Warmup Iteration  13: 2484888.129 ops/s
# Warmup Iteration  14: 2491881.597 ops/s
# Warmup Iteration  15: 2498257.669 ops/s
# Warmup Iteration  16: 2514757.177 ops/s
# Warmup Iteration  17: 2473778.964 ops/s
# Warmup Iteration  18: 2493401.849 ops/s
# Warmup Iteration  19: 2510675.594 ops/s
# Warmup Iteration  20: 2487100.706 ops/s
# Warmup Iteration  21: 2509706.064 ops/s
# Warmup Iteration  22: 2498599.915 ops/s
# Warmup Iteration  23: 2485300.581 ops/s
# Warmup Iteration  24: 2493752.047 ops/s
# Warmup Iteration  25: 2495134.864 ops/s
# Warmup Iteration  26: 2492599.288 ops/s
# Warmup Iteration  27: 2492009.587 ops/s
# Warmup Iteration  28: 2491756.751 ops/s
# Warmup Iteration  29: 2507690.828 ops/s
# Warmup Iteration  30: 2493264.518 ops/s
Iteration   1: 2501427.009 ops/s
Iteration   2: 2505363.712 ops/s
Iteration   3: 2502093.837 ops/s
Iteration   4: 2487223.478 ops/s
Iteration   5: 2495445.773 ops/s
Iteration   6: 2525091.900 ops/s
Iteration   7: 2500674.307 ops/s
Iteration   8: 2519158.422 ops/s
Iteration   9: 2503076.922 ops/s
Iteration  10: 2492875.403 ops/s
Iteration  11: 2504954.564 ops/s
Iteration  12: 2507817.127 ops/s
Iteration  13: 2496259.687 ops/s
Iteration  14: 2518946.443 ops/s
Iteration  15: 2491134.997 ops/s
Iteration  16: 2510509.809 ops/s
Iteration  17: 2510878.952 ops/s
Iteration  18: 2497723.505 ops/s
Iteration  19: 2484173.102 ops/s
Iteration  20: 2503730.321 ops/s
Iteration  21: 2512578.126 ops/s
Iteration  22: 2512380.158 ops/s
Iteration  23: 2506357.653 ops/s
Iteration  24: 2495951.130 ops/s
Iteration  25: 2491776.607 ops/s
Iteration  26: 2476945.380 ops/s
Iteration  27: 2527367.975 ops/s
Iteration  28: 2504227.780 ops/s
Iteration  29: 2501228.022 ops/s
Iteration  30: 2490345.044 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_aggregateByNonMutating":
  2502590.572 ±(99.9%) 7787.322 ops/s [Average]
  (min, avg, max) = (2476945.380, 2502590.572, 2527367.975), stdev = 11655.697
  CI (99.9%): [2494803.250, 2510377.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2502590.572 ± 7787.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3933040.970 ops/s
# Warmup Iteration   2: 8026740.617 ops/s
# Warmup Iteration   3: 7159862.977 ops/s
# Warmup Iteration   4: 8441486.460 ops/s
# Warmup Iteration   5: 8463907.158 ops/s
# Warmup Iteration   6: 8461125.195 ops/s
# Warmup Iteration   7: 8439946.616 ops/s
# Warmup Iteration   8: 8428765.747 ops/s
# Warmup Iteration   9: 8429142.322 ops/s
# Warmup Iteration  10: 8459090.019 ops/s
# Warmup Iteration  11: 8429189.775 ops/s
# Warmup Iteration  12: 8446260.581 ops/s
# Warmup Iteration  13: 8452038.395 ops/s
# Warmup Iteration  14: 8444358.869 ops/s
# Warmup Iteration  15: 8453119.904 ops/s
# Warmup Iteration  16: 8450250.882 ops/s
# Warmup Iteration  17: 8326387.557 ops/s
# Warmup Iteration  18: 8349689.678 ops/s
# Warmup Iteration  19: 8354822.119 ops/s
# Warmup Iteration  20: 8266864.134 ops/s
# Warmup Iteration  21: 8344635.118 ops/s
# Warmup Iteration  22: 8343192.737 ops/s
# Warmup Iteration  23: 8350322.444 ops/s
# Warmup Iteration  24: 8366165.791 ops/s
# Warmup Iteration  25: 8366140.290 ops/s
# Warmup Iteration  26: 8336841.149 ops/s
# Warmup Iteration  27: 8353601.154 ops/s
# Warmup Iteration  28: 8361797.023 ops/s
# Warmup Iteration  29: 8329623.622 ops/s
# Warmup Iteration  30: 8353384.730 ops/s
Iteration   1: 8366628.803 ops/s
Iteration   2: 8346708.413 ops/s
Iteration   3: 8339441.318 ops/s
Iteration   4: 8358175.936 ops/s
Iteration   5: 8310824.035 ops/s
Iteration   6: 8344232.432 ops/s
Iteration   7: 8368812.578 ops/s
Iteration   8: 8319378.363 ops/s
Iteration   9: 8353263.505 ops/s
Iteration  10: 8343830.679 ops/s
Iteration  11: 8365649.961 ops/s
Iteration  12: 8355277.925 ops/s
Iteration  13: 8317812.494 ops/s
Iteration  14: 8368210.562 ops/s
Iteration  15: 8366706.052 ops/s
Iteration  16: 8342360.547 ops/s
Iteration  17: 8339844.981 ops/s
Iteration  18: 8330419.757 ops/s
Iteration  19: 8352000.803 ops/s
Iteration  20: 8351127.019 ops/s
Iteration  21: 8332565.692 ops/s
Iteration  22: 8355308.827 ops/s
Iteration  23: 8331755.818 ops/s
Iteration  24: 8324804.105 ops/s
Iteration  25: 8347259.754 ops/s
Iteration  26: 8365554.469 ops/s
Iteration  27: 8360362.923 ops/s
Iteration  28: 8343603.665 ops/s
Iteration  29: 8319237.724 ops/s
Iteration  30: 8340202.585 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfy":
  8345378.724 ±(99.9%) 11057.068 ops/s [Average]
  (min, avg, max) = (8310824.035, 8345378.724, 8368812.578), stdev = 16549.701
  CI (99.9%): [8334321.656, 8356435.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_allSatisfy  thrpt   30  8345378.724 ± 11057.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4010443.833 ops/s
# Warmup Iteration   2: 8257289.618 ops/s
# Warmup Iteration   3: 7225808.868 ops/s
# Warmup Iteration   4: 8633680.966 ops/s
# Warmup Iteration   5: 8659798.933 ops/s
# Warmup Iteration   6: 8663628.734 ops/s
# Warmup Iteration   7: 8640815.041 ops/s
# Warmup Iteration   8: 8664753.844 ops/s
# Warmup Iteration   9: 8657656.167 ops/s
# Warmup Iteration  10: 8635566.420 ops/s
# Warmup Iteration  11: 8622450.739 ops/s
# Warmup Iteration  12: 8652959.672 ops/s
# Warmup Iteration  13: 8671399.596 ops/s
# Warmup Iteration  14: 8642884.631 ops/s
# Warmup Iteration  15: 8645254.593 ops/s
# Warmup Iteration  16: 8628944.272 ops/s
# Warmup Iteration  17: 8576088.044 ops/s
# Warmup Iteration  18: 8572756.063 ops/s
# Warmup Iteration  19: 8536385.613 ops/s
# Warmup Iteration  20: 8588918.490 ops/s
# Warmup Iteration  21: 8596529.916 ops/s
# Warmup Iteration  22: 8581569.232 ops/s
# Warmup Iteration  23: 8588647.113 ops/s
# Warmup Iteration  24: 8583710.473 ops/s
# Warmup Iteration  25: 8588597.582 ops/s
# Warmup Iteration  26: 8596835.030 ops/s
# Warmup Iteration  27: 8575150.738 ops/s
# Warmup Iteration  28: 8600845.482 ops/s
# Warmup Iteration  29: 8561123.620 ops/s
# Warmup Iteration  30: 8586637.407 ops/s
Iteration   1: 8608449.999 ops/s
Iteration   2: 8573708.271 ops/s
Iteration   3: 8592263.877 ops/s
Iteration   4: 8589528.251 ops/s
Iteration   5: 8563899.247 ops/s
Iteration   6: 8576343.653 ops/s
Iteration   7: 8607513.138 ops/s
Iteration   8: 8568235.658 ops/s
Iteration   9: 8571757.538 ops/s
Iteration  10: 8562656.287 ops/s
Iteration  11: 8563462.919 ops/s
Iteration  12: 8593045.829 ops/s
Iteration  13: 8606910.555 ops/s
Iteration  14: 8589361.657 ops/s
Iteration  15: 8566869.642 ops/s
Iteration  16: 8585795.010 ops/s
Iteration  17: 8524139.040 ops/s
Iteration  18: 8590834.959 ops/s
Iteration  19: 8587861.410 ops/s
Iteration  20: 8565969.717 ops/s
Iteration  21: 8569626.067 ops/s
Iteration  22: 8567380.273 ops/s
Iteration  23: 8573151.104 ops/s
Iteration  24: 8603532.272 ops/s
Iteration  25: 8546144.330 ops/s
Iteration  26: 8607392.029 ops/s
Iteration  27: 8580539.890 ops/s
Iteration  28: 8570763.317 ops/s
Iteration  29: 8580198.328 ops/s
Iteration  30: 8594602.126 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_allSatisfyWith":
  8579397.880 ±(99.9%) 12795.557 ops/s [Average]
  (min, avg, max) = (8524139.040, 8579397.880, 8608449.999), stdev = 19151.789
  CI (99.9%): [8566602.322, 8592193.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  8579397.880 ± 12795.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4045968.904 ops/s
# Warmup Iteration   2: 8363426.998 ops/s
# Warmup Iteration   3: 7263736.452 ops/s
# Warmup Iteration   4: 8628326.767 ops/s
# Warmup Iteration   5: 8602498.641 ops/s
# Warmup Iteration   6: 8632372.425 ops/s
# Warmup Iteration   7: 8605556.461 ops/s
# Warmup Iteration   8: 8613384.485 ops/s
# Warmup Iteration   9: 8627771.143 ops/s
# Warmup Iteration  10: 8613811.829 ops/s
# Warmup Iteration  11: 8624169.893 ops/s
# Warmup Iteration  12: 8636176.458 ops/s
# Warmup Iteration  13: 8630105.179 ops/s
# Warmup Iteration  14: 8602456.414 ops/s
# Warmup Iteration  15: 8632140.898 ops/s
# Warmup Iteration  16: 8622207.855 ops/s
# Warmup Iteration  17: 8576056.313 ops/s
# Warmup Iteration  18: 8581090.500 ops/s
# Warmup Iteration  19: 8616479.989 ops/s
# Warmup Iteration  20: 8566406.404 ops/s
# Warmup Iteration  21: 8596552.182 ops/s
# Warmup Iteration  22: 8576403.850 ops/s
# Warmup Iteration  23: 8583025.237 ops/s
# Warmup Iteration  24: 8596567.286 ops/s
# Warmup Iteration  25: 8584310.301 ops/s
# Warmup Iteration  26: 8597724.023 ops/s
# Warmup Iteration  27: 8612216.412 ops/s
# Warmup Iteration  28: 8591198.835 ops/s
# Warmup Iteration  29: 8572598.163 ops/s
# Warmup Iteration  30: 8590857.547 ops/s
Iteration   1: 8602444.693 ops/s
Iteration   2: 8591825.303 ops/s
Iteration   3: 8611844.139 ops/s
Iteration   4: 8613629.393 ops/s
Iteration   5: 8581291.877 ops/s
Iteration   6: 8613275.693 ops/s
Iteration   7: 8613951.676 ops/s
Iteration   8: 8596022.250 ops/s
Iteration   9: 8625429.717 ops/s
Iteration  10: 8578041.539 ops/s
Iteration  11: 8585477.912 ops/s
Iteration  12: 8560571.486 ops/s
Iteration  13: 8607450.178 ops/s
Iteration  14: 8580804.127 ops/s
Iteration  15: 8570704.029 ops/s
Iteration  16: 8571628.992 ops/s
Iteration  17: 8568449.264 ops/s
Iteration  18: 8566852.607 ops/s
Iteration  19: 8593562.331 ops/s
Iteration  20: 8608699.230 ops/s
Iteration  21: 8599033.793 ops/s
Iteration  22: 8586356.633 ops/s
Iteration  23: 8575452.724 ops/s
Iteration  24: 8600848.427 ops/s
Iteration  25: 8594145.931 ops/s
Iteration  26: 8592823.503 ops/s
Iteration  27: 8620786.612 ops/s
Iteration  28: 8567117.607 ops/s
Iteration  29: 8574471.767 ops/s
Iteration  30: 8573168.305 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfy":
  8590872.058 ±(99.9%) 12149.482 ops/s [Average]
  (min, avg, max) = (8560571.486, 8590872.058, 8625429.717), stdev = 18184.774
  CI (99.9%): [8578722.576, 8603021.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_anySatisfy  thrpt   30  8590872.058 ± 12149.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4755082.510 ops/s
# Warmup Iteration   2: 9601896.354 ops/s
# Warmup Iteration   3: 8151337.223 ops/s
# Warmup Iteration   4: 9609864.120 ops/s
# Warmup Iteration   5: 9617509.300 ops/s
# Warmup Iteration   6: 9630672.300 ops/s
# Warmup Iteration   7: 9646232.472 ops/s
# Warmup Iteration   8: 9616604.925 ops/s
# Warmup Iteration   9: 9601269.612 ops/s
# Warmup Iteration  10: 9649376.142 ops/s
# Warmup Iteration  11: 9624148.400 ops/s
# Warmup Iteration  12: 9588280.511 ops/s
# Warmup Iteration  13: 9604811.501 ops/s
# Warmup Iteration  14: 9596822.138 ops/s
# Warmup Iteration  15: 9606005.792 ops/s
# Warmup Iteration  16: 9614039.190 ops/s
# Warmup Iteration  17: 9615058.111 ops/s
# Warmup Iteration  18: 9605884.794 ops/s
# Warmup Iteration  19: 9591374.163 ops/s
# Warmup Iteration  20: 9596755.276 ops/s
# Warmup Iteration  21: 9609682.690 ops/s
# Warmup Iteration  22: 9591182.393 ops/s
# Warmup Iteration  23: 9582970.070 ops/s
# Warmup Iteration  24: 9550846.369 ops/s
# Warmup Iteration  25: 9589399.310 ops/s
# Warmup Iteration  26: 9600646.328 ops/s
# Warmup Iteration  27: 9595906.984 ops/s
# Warmup Iteration  28: 9597060.519 ops/s
# Warmup Iteration  29: 9620790.893 ops/s
# Warmup Iteration  30: 9611798.178 ops/s
Iteration   1: 9621758.537 ops/s
Iteration   2: 9591552.127 ops/s
Iteration   3: 9582571.981 ops/s
Iteration   4: 9622907.054 ops/s
Iteration   5: 9616243.903 ops/s
Iteration   6: 9615339.396 ops/s
Iteration   7: 9534044.679 ops/s
Iteration   8: 9521716.200 ops/s
Iteration   9: 9510620.757 ops/s
Iteration  10: 9615144.065 ops/s
Iteration  11: 9602167.554 ops/s
Iteration  12: 9592734.851 ops/s
Iteration  13: 9643698.375 ops/s
Iteration  14: 9604210.874 ops/s
Iteration  15: 9606922.831 ops/s
Iteration  16: 9615755.994 ops/s
Iteration  17: 9594589.732 ops/s
Iteration  18: 9555690.630 ops/s
Iteration  19: 9605616.303 ops/s
Iteration  20: 9610958.951 ops/s
Iteration  21: 9635895.907 ops/s
Iteration  22: 9597863.044 ops/s
Iteration  23: 9653257.562 ops/s
Iteration  24: 9575214.801 ops/s
Iteration  25: 9664996.364 ops/s
Iteration  26: 9636256.520 ops/s
Iteration  27: 9602015.570 ops/s
Iteration  28: 9554386.601 ops/s
Iteration  29: 9565779.110 ops/s
Iteration  30: 9652897.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_anySatisfyWith":
  9600093.596 ±(99.9%) 25222.380 ops/s [Average]
  (min, avg, max) = (9510620.757, 9600093.596, 9664996.364), stdev = 37751.673
  CI (99.9%): [9574871.216, 9625315.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  9600093.596 ± 25222.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1232806.258 ops/s
# Warmup Iteration   2: 2886426.776 ops/s
# Warmup Iteration   3: 2536367.436 ops/s
# Warmup Iteration   4: 2741735.014 ops/s
# Warmup Iteration   5: 2888495.278 ops/s
# Warmup Iteration   6: 2884817.935 ops/s
# Warmup Iteration   7: 2880873.170 ops/s
# Warmup Iteration   8: 2881097.677 ops/s
# Warmup Iteration   9: 2885710.404 ops/s
# Warmup Iteration  10: 2882512.745 ops/s
# Warmup Iteration  11: 2886588.306 ops/s
# Warmup Iteration  12: 2889499.803 ops/s
# Warmup Iteration  13: 2889146.799 ops/s
# Warmup Iteration  14: 2891482.999 ops/s
# Warmup Iteration  15: 2891509.537 ops/s
# Warmup Iteration  16: 2874686.664 ops/s
# Warmup Iteration  17: 2885401.626 ops/s
# Warmup Iteration  18: 2886348.672 ops/s
# Warmup Iteration  19: 2890026.805 ops/s
# Warmup Iteration  20: 2889939.991 ops/s
# Warmup Iteration  21: 2886440.439 ops/s
# Warmup Iteration  22: 2887259.573 ops/s
# Warmup Iteration  23: 2889397.968 ops/s
# Warmup Iteration  24: 2891033.303 ops/s
# Warmup Iteration  25: 2896455.909 ops/s
# Warmup Iteration  26: 2890230.782 ops/s
# Warmup Iteration  27: 2890652.787 ops/s
# Warmup Iteration  28: 2893988.398 ops/s
# Warmup Iteration  29: 2890775.783 ops/s
# Warmup Iteration  30: 2891952.175 ops/s
Iteration   1: 2896226.446 ops/s
Iteration   2: 2893456.052 ops/s
Iteration   3: 2898309.115 ops/s
Iteration   4: 2889775.978 ops/s
Iteration   5: 2905959.635 ops/s
Iteration   6: 2883801.534 ops/s
Iteration   7: 2886341.243 ops/s
Iteration   8: 2887196.296 ops/s
Iteration   9: 2892060.054 ops/s
Iteration  10: 2899996.134 ops/s
Iteration  11: 2884937.082 ops/s
Iteration  12: 2888932.424 ops/s
Iteration  13: 2891271.429 ops/s
Iteration  14: 2888359.045 ops/s
Iteration  15: 2892879.754 ops/s
Iteration  16: 2895707.016 ops/s
Iteration  17: 2892554.440 ops/s
Iteration  18: 2903621.342 ops/s
Iteration  19: 2900126.971 ops/s
Iteration  20: 2890191.224 ops/s
Iteration  21: 2898858.205 ops/s
Iteration  22: 2893805.007 ops/s
Iteration  23: 2885453.180 ops/s
Iteration  24: 2894993.621 ops/s
Iteration  25: 2887640.011 ops/s
Iteration  26: 2887210.039 ops/s
Iteration  27: 2880942.118 ops/s
Iteration  28: 2889999.990 ops/s
Iteration  29: 2888754.401 ops/s
Iteration  30: 2896230.767 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendString":
  2892186.352 ±(99.9%) 3993.052 ops/s [Average]
  (min, avg, max) = (2880942.118, 2892186.352, 2905959.635), stdev = 5976.612
  CI (99.9%): [2888193.300, 2896179.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_appendString  thrpt   30  2892186.352 ± 3993.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110127.446 ops/s
# Warmup Iteration   2: 117231.717 ops/s
# Warmup Iteration   3: 132465.628 ops/s
# Warmup Iteration   4: 145665.651 ops/s
# Warmup Iteration   5: 146005.209 ops/s
# Warmup Iteration   6: 146431.097 ops/s
# Warmup Iteration   7: 145748.171 ops/s
# Warmup Iteration   8: 146033.908 ops/s
# Warmup Iteration   9: 145427.741 ops/s
# Warmup Iteration  10: 146050.807 ops/s
# Warmup Iteration  11: 146031.363 ops/s
# Warmup Iteration  12: 145359.383 ops/s
# Warmup Iteration  13: 145382.798 ops/s
# Warmup Iteration  14: 143006.092 ops/s
# Warmup Iteration  15: 126098.598 ops/s
# Warmup Iteration  16: 145697.529 ops/s
# Warmup Iteration  17: 154207.847 ops/s
# Warmup Iteration  18: 154362.636 ops/s
# Warmup Iteration  19: 154341.747 ops/s
# Warmup Iteration  20: 154096.866 ops/s
# Warmup Iteration  21: 154584.569 ops/s
# Warmup Iteration  22: 154463.968 ops/s
# Warmup Iteration  23: 154173.793 ops/s
# Warmup Iteration  24: 154237.329 ops/s
# Warmup Iteration  25: 154278.268 ops/s
# Warmup Iteration  26: 154534.656 ops/s
# Warmup Iteration  27: 154183.103 ops/s
# Warmup Iteration  28: 154495.881 ops/s
# Warmup Iteration  29: 154506.517 ops/s
# Warmup Iteration  30: 153856.837 ops/s
Iteration   1: 153910.117 ops/s
Iteration   2: 154565.303 ops/s
Iteration   3: 153938.804 ops/s
Iteration   4: 153995.372 ops/s
Iteration   5: 154223.034 ops/s
Iteration   6: 154189.146 ops/s
Iteration   7: 154428.179 ops/s
Iteration   8: 154370.944 ops/s
Iteration   9: 153374.641 ops/s
Iteration  10: 154157.886 ops/s
Iteration  11: 154283.599 ops/s
Iteration  12: 154144.277 ops/s
Iteration  13: 153977.319 ops/s
Iteration  14: 153919.717 ops/s
Iteration  15: 154238.691 ops/s
Iteration  16: 154092.242 ops/s
Iteration  17: 154439.891 ops/s
Iteration  18: 154898.363 ops/s
Iteration  19: 153620.684 ops/s
Iteration  20: 154600.035 ops/s
Iteration  21: 154409.804 ops/s
Iteration  22: 153975.140 ops/s
Iteration  23: 154849.031 ops/s
Iteration  24: 153847.374 ops/s
Iteration  25: 154280.219 ops/s
Iteration  26: 154475.045 ops/s
Iteration  27: 154219.266 ops/s
Iteration  28: 154273.425 ops/s
Iteration  29: 154538.044 ops/s
Iteration  30: 154564.043 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringThrows":
  154226.655 ±(99.9%) 223.257 ops/s [Average]
  (min, avg, max) = (153374.641, 154226.655, 154898.363), stdev = 334.161
  CI (99.9%): [154003.397, 154449.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_appendStringThrows  thrpt   30  154226.655 ± 223.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2321291.403 ops/s
# Warmup Iteration   2: 5130896.496 ops/s
# Warmup Iteration   3: 5213566.105 ops/s
# Warmup Iteration   4: 4341408.443 ops/s
# Warmup Iteration   5: 5221075.379 ops/s
# Warmup Iteration   6: 5182754.436 ops/s
# Warmup Iteration   7: 5224710.911 ops/s
# Warmup Iteration   8: 5211949.124 ops/s
# Warmup Iteration   9: 5190999.426 ops/s
# Warmup Iteration  10: 5172621.482 ops/s
# Warmup Iteration  11: 5204004.526 ops/s
# Warmup Iteration  12: 5219646.610 ops/s
# Warmup Iteration  13: 5213855.125 ops/s
# Warmup Iteration  14: 5221872.213 ops/s
# Warmup Iteration  15: 5195337.572 ops/s
# Warmup Iteration  16: 5206377.470 ops/s
# Warmup Iteration  17: 5208156.292 ops/s
# Warmup Iteration  18: 5235202.518 ops/s
# Warmup Iteration  19: 5200001.363 ops/s
# Warmup Iteration  20: 5224889.662 ops/s
# Warmup Iteration  21: 5223418.357 ops/s
# Warmup Iteration  22: 5214670.583 ops/s
# Warmup Iteration  23: 5217044.591 ops/s
# Warmup Iteration  24: 5209568.653 ops/s
# Warmup Iteration  25: 5207431.281 ops/s
# Warmup Iteration  26: 5223042.005 ops/s
# Warmup Iteration  27: 5213456.679 ops/s
# Warmup Iteration  28: 5212391.407 ops/s
# Warmup Iteration  29: 5220188.313 ops/s
# Warmup Iteration  30: 5226655.940 ops/s
Iteration   1: 5215150.513 ops/s
Iteration   2: 5211229.418 ops/s
Iteration   3: 5220511.421 ops/s
Iteration   4: 5212525.363 ops/s
Iteration   5: 5220609.149 ops/s
Iteration   6: 5231918.921 ops/s
Iteration   7: 5216824.198 ops/s
Iteration   8: 5232798.223 ops/s
Iteration   9: 5198143.087 ops/s
Iteration  10: 5199963.815 ops/s
Iteration  11: 5203543.464 ops/s
Iteration  12: 5194323.047 ops/s
Iteration  13: 5208782.165 ops/s
Iteration  14: 5230115.678 ops/s
Iteration  15: 5217568.652 ops/s
Iteration  16: 5252720.492 ops/s
Iteration  17: 5236515.063 ops/s
Iteration  18: 5232923.920 ops/s
Iteration  19: 5222967.025 ops/s
Iteration  20: 5232950.840 ops/s
Iteration  21: 5219026.306 ops/s
Iteration  22: 5210345.884 ops/s
Iteration  23: 5223109.814 ops/s
Iteration  24: 5199403.099 ops/s
Iteration  25: 5230562.164 ops/s
Iteration  26: 5232146.872 ops/s
Iteration  27: 5219633.119 ops/s
Iteration  28: 5196542.450 ops/s
Iteration  29: 5206294.673 ops/s
Iteration  30: 5220397.176 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparator":
  5218318.200 ±(99.9%) 9320.514 ops/s [Average]
  (min, avg, max) = (5194323.047, 5218318.200, 5252720.492), stdev = 13950.507
  CI (99.9%): [5208997.686, 5227638.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  5218318.200 ± 9320.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2318599.306 ops/s
# Warmup Iteration   2: 4721365.715 ops/s
# Warmup Iteration   3: 4705135.950 ops/s
# Warmup Iteration   4: 3920841.488 ops/s
# Warmup Iteration   5: 4745649.272 ops/s
# Warmup Iteration   6: 4735314.614 ops/s
# Warmup Iteration   7: 4716741.720 ops/s
# Warmup Iteration   8: 4728699.424 ops/s
# Warmup Iteration   9: 4727362.031 ops/s
# Warmup Iteration  10: 4741363.611 ops/s
# Warmup Iteration  11: 4749054.388 ops/s
# Warmup Iteration  12: 4715527.551 ops/s
# Warmup Iteration  13: 4726754.682 ops/s
# Warmup Iteration  14: 4715951.348 ops/s
# Warmup Iteration  15: 4720588.414 ops/s
# Warmup Iteration  16: 4731342.098 ops/s
# Warmup Iteration  17: 4713244.861 ops/s
# Warmup Iteration  18: 4703199.182 ops/s
# Warmup Iteration  19: 4721096.135 ops/s
# Warmup Iteration  20: 4724935.565 ops/s
# Warmup Iteration  21: 4717275.010 ops/s
# Warmup Iteration  22: 4727009.718 ops/s
# Warmup Iteration  23: 4737754.483 ops/s
# Warmup Iteration  24: 4734735.389 ops/s
# Warmup Iteration  25: 4717046.150 ops/s
# Warmup Iteration  26: 4730847.057 ops/s
# Warmup Iteration  27: 4716740.835 ops/s
# Warmup Iteration  28: 4728314.534 ops/s
# Warmup Iteration  29: 4734062.903 ops/s
# Warmup Iteration  30: 4717294.155 ops/s
Iteration   1: 4719001.708 ops/s
Iteration   2: 4720394.526 ops/s
Iteration   3: 4718824.146 ops/s
Iteration   4: 4725145.365 ops/s
Iteration   5: 4733070.439 ops/s
Iteration   6: 4727694.785 ops/s
Iteration   7: 4717972.763 ops/s
Iteration   8: 4745579.423 ops/s
Iteration   9: 4721569.267 ops/s
Iteration  10: 4746601.361 ops/s
Iteration  11: 4743621.493 ops/s
Iteration  12: 4750534.102 ops/s
Iteration  13: 4729942.988 ops/s
Iteration  14: 4711775.498 ops/s
Iteration  15: 4719904.387 ops/s
Iteration  16: 4709573.533 ops/s
Iteration  17: 4736793.373 ops/s
Iteration  18: 4728999.761 ops/s
Iteration  19: 4716013.926 ops/s
Iteration  20: 4716077.159 ops/s
Iteration  21: 4706690.603 ops/s
Iteration  22: 4707359.079 ops/s
Iteration  23: 4714200.422 ops/s
Iteration  24: 4716128.633 ops/s
Iteration  25: 4702035.016 ops/s
Iteration  26: 4713523.076 ops/s
Iteration  27: 4715961.252 ops/s
Iteration  28: 4688165.588 ops/s
Iteration  29: 4695434.974 ops/s
Iteration  30: 4717650.411 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  4720541.302 ±(99.9%) 9743.324 ops/s [Average]
  (min, avg, max) = (4688165.588, 4720541.302, 4750534.102), stdev = 14583.350
  CI (99.9%): [4710797.978, 4730284.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  4720541.302 ± 9743.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37691006.915 ops/s
# Warmup Iteration   2: 76879091.581 ops/s
# Warmup Iteration   3: 66720855.180 ops/s
# Warmup Iteration   4: 78371157.240 ops/s
# Warmup Iteration   5: 78187898.868 ops/s
# Warmup Iteration   6: 78097920.647 ops/s
# Warmup Iteration   7: 78148077.485 ops/s
# Warmup Iteration   8: 78297970.764 ops/s
# Warmup Iteration   9: 77919808.352 ops/s
# Warmup Iteration  10: 77921421.054 ops/s
# Warmup Iteration  11: 78121791.965 ops/s
# Warmup Iteration  12: 78166744.409 ops/s
# Warmup Iteration  13: 77920901.314 ops/s
# Warmup Iteration  14: 78219434.697 ops/s
# Warmup Iteration  15: 78283255.180 ops/s
# Warmup Iteration  16: 78329640.846 ops/s
# Warmup Iteration  17: 78010566.888 ops/s
# Warmup Iteration  18: 78242945.713 ops/s
# Warmup Iteration  19: 78133512.421 ops/s
# Warmup Iteration  20: 78119434.113 ops/s
# Warmup Iteration  21: 78095470.827 ops/s
# Warmup Iteration  22: 78147450.813 ops/s
# Warmup Iteration  23: 78077028.717 ops/s
# Warmup Iteration  24: 78006652.881 ops/s
# Warmup Iteration  25: 78178960.122 ops/s
# Warmup Iteration  26: 77964159.156 ops/s
# Warmup Iteration  27: 77970302.083 ops/s
# Warmup Iteration  28: 78031455.182 ops/s
# Warmup Iteration  29: 77651414.368 ops/s
# Warmup Iteration  30: 77991175.902 ops/s
Iteration   1: 78105496.903 ops/s
Iteration   2: 77761212.148 ops/s
Iteration   3: 77875386.298 ops/s
Iteration   4: 78061277.443 ops/s
Iteration   5: 78014441.780 ops/s
Iteration   6: 77992664.296 ops/s
Iteration   7: 78302386.290 ops/s
Iteration   8: 78709942.949 ops/s
Iteration   9: 78600872.162 ops/s
Iteration  10: 78217439.919 ops/s
Iteration  11: 78204162.081 ops/s
Iteration  12: 78266994.818 ops/s
Iteration  13: 78340297.262 ops/s
Iteration  14: 77783661.415 ops/s
Iteration  15: 78255065.554 ops/s
Iteration  16: 77895582.113 ops/s
Iteration  17: 77784575.050 ops/s
Iteration  18: 77410400.071 ops/s
Iteration  19: 77784418.274 ops/s
Iteration  20: 77677265.331 ops/s
Iteration  21: 77501367.424 ops/s
Iteration  22: 77875061.341 ops/s
Iteration  23: 77895003.748 ops/s
Iteration  24: 78167188.423 ops/s
Iteration  25: 77515955.096 ops/s
Iteration  26: 78206952.005 ops/s
Iteration  27: 78320756.695 ops/s
Iteration  28: 78401592.788 ops/s
Iteration  29: 78304246.709 ops/s
Iteration  30: 78366920.374 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asLazy":
  78053286.225 ±(99.9%) 213961.909 ops/s [Average]
  (min, avg, max) = (77410400.071, 78053286.225, 78709942.949), stdev = 320248.136
  CI (99.9%): [77839324.317, 78267248.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
CompositeFastListTest._Benchmark.benchmark_asLazy  thrpt   30  78053286.225 ± 213961.909  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3057688.572 ops/s
# Warmup Iteration   2: 6885843.069 ops/s
# Warmup Iteration   3: 5869619.266 ops/s
# Warmup Iteration   4: 6989763.642 ops/s
# Warmup Iteration   5: 6966022.154 ops/s
# Warmup Iteration   6: 6978007.725 ops/s
# Warmup Iteration   7: 6954236.724 ops/s
# Warmup Iteration   8: 6997653.526 ops/s
# Warmup Iteration   9: 6963885.123 ops/s
# Warmup Iteration  10: 6983231.048 ops/s
# Warmup Iteration  11: 6991328.487 ops/s
# Warmup Iteration  12: 6984031.337 ops/s
# Warmup Iteration  13: 6966385.070 ops/s
# Warmup Iteration  14: 6978098.047 ops/s
# Warmup Iteration  15: 6957040.671 ops/s
# Warmup Iteration  16: 6973401.276 ops/s
# Warmup Iteration  17: 6992826.796 ops/s
# Warmup Iteration  18: 6990635.273 ops/s
# Warmup Iteration  19: 6984466.348 ops/s
# Warmup Iteration  20: 6963569.209 ops/s
# Warmup Iteration  21: 7003494.975 ops/s
# Warmup Iteration  22: 6991128.253 ops/s
# Warmup Iteration  23: 7041232.913 ops/s
# Warmup Iteration  24: 7022249.056 ops/s
# Warmup Iteration  25: 7008456.329 ops/s
# Warmup Iteration  26: 7024318.349 ops/s
# Warmup Iteration  27: 7016195.022 ops/s
# Warmup Iteration  28: 6998551.846 ops/s
# Warmup Iteration  29: 6985531.699 ops/s
# Warmup Iteration  30: 7000483.558 ops/s
Iteration   1: 6987792.145 ops/s
Iteration   2: 7012108.279 ops/s
Iteration   3: 7007731.103 ops/s
Iteration   4: 6983078.490 ops/s
Iteration   5: 7004699.327 ops/s
Iteration   6: 6982027.327 ops/s
Iteration   7: 7015172.054 ops/s
Iteration   8: 6974350.944 ops/s
Iteration   9: 7012315.378 ops/s
Iteration  10: 6989219.957 ops/s
Iteration  11: 7026162.873 ops/s
Iteration  12: 7010206.035 ops/s
Iteration  13: 6997983.549 ops/s
Iteration  14: 6998276.844 ops/s
Iteration  15: 7015624.497 ops/s
Iteration  16: 6962368.566 ops/s
Iteration  17: 6985213.355 ops/s
Iteration  18: 7001253.228 ops/s
Iteration  19: 6998266.343 ops/s
Iteration  20: 6995997.080 ops/s
Iteration  21: 6963904.913 ops/s
Iteration  22: 7009392.330 ops/s
Iteration  23: 6987031.203 ops/s
Iteration  24: 7033145.557 ops/s
Iteration  25: 6996683.056 ops/s
Iteration  26: 7004233.271 ops/s
Iteration  27: 6939039.701 ops/s
Iteration  28: 6976928.829 ops/s
Iteration  29: 6990154.250 ops/s
Iteration  30: 6980269.127 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asReversed":
  6994687.654 ±(99.9%) 13254.026 ops/s [Average]
  (min, avg, max) = (6939039.701, 6994687.654, 7033145.557), stdev = 19838.004
  CI (99.9%): [6981433.627, 7007941.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_asReversed  thrpt   30  6994687.654 ± 13254.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30377740.649 ops/s
# Warmup Iteration   2: 55713006.414 ops/s
# Warmup Iteration   3: 54258523.568 ops/s
# Warmup Iteration   4: 59125632.622 ops/s
# Warmup Iteration   5: 59031126.917 ops/s
# Warmup Iteration   6: 59068069.752 ops/s
# Warmup Iteration   7: 58797218.552 ops/s
# Warmup Iteration   8: 58993713.286 ops/s
# Warmup Iteration   9: 58995710.378 ops/s
# Warmup Iteration  10: 59177250.456 ops/s
# Warmup Iteration  11: 59179265.765 ops/s
# Warmup Iteration  12: 59236481.782 ops/s
# Warmup Iteration  13: 59506632.473 ops/s
# Warmup Iteration  14: 59611867.399 ops/s
# Warmup Iteration  15: 59471212.971 ops/s
# Warmup Iteration  16: 59514181.016 ops/s
# Warmup Iteration  17: 58718018.174 ops/s
# Warmup Iteration  18: 58845795.824 ops/s
# Warmup Iteration  19: 59578970.491 ops/s
# Warmup Iteration  20: 59862698.443 ops/s
# Warmup Iteration  21: 59741631.219 ops/s
# Warmup Iteration  22: 59652995.241 ops/s
# Warmup Iteration  23: 59621309.926 ops/s
# Warmup Iteration  24: 59970029.109 ops/s
# Warmup Iteration  25: 59678908.181 ops/s
# Warmup Iteration  26: 59813386.048 ops/s
# Warmup Iteration  27: 60074146.991 ops/s
# Warmup Iteration  28: 59624843.270 ops/s
# Warmup Iteration  29: 59534430.703 ops/s
# Warmup Iteration  30: 59639940.358 ops/s
Iteration   1: 59598435.379 ops/s
Iteration   2: 59585582.898 ops/s
Iteration   3: 59496064.457 ops/s
Iteration   4: 59686933.931 ops/s
Iteration   5: 59456844.415 ops/s
Iteration   6: 59798817.669 ops/s
Iteration   7: 59186359.870 ops/s
Iteration   8: 59458079.362 ops/s
Iteration   9: 59629704.894 ops/s
Iteration  10: 59585753.586 ops/s
Iteration  11: 59510858.494 ops/s
Iteration  12: 59932324.854 ops/s
Iteration  13: 59280413.486 ops/s
Iteration  14: 59544861.054 ops/s
Iteration  15: 59594409.614 ops/s
Iteration  16: 59508600.677 ops/s
Iteration  17: 59555466.214 ops/s
Iteration  18: 60134479.371 ops/s
Iteration  19: 59614275.061 ops/s
Iteration  20: 59754361.499 ops/s
Iteration  21: 59210806.156 ops/s
Iteration  22: 59442544.362 ops/s
Iteration  23: 59154816.905 ops/s
Iteration  24: 59528856.645 ops/s
Iteration  25: 59785939.781 ops/s
Iteration  26: 59540788.287 ops/s
Iteration  27: 60170628.319 ops/s
Iteration  28: 59995103.063 ops/s
Iteration  29: 59742913.036 ops/s
Iteration  30: 59643919.859 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asSynchronized":
  59604298.107 ±(99.9%) 163449.443 ops/s [Average]
  (min, avg, max) = (59154816.905, 59604298.107, 60170628.319), stdev = 244643.451
  CI (99.9%): [59440848.663, 59767747.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
CompositeFastListTest._Benchmark.benchmark_asSynchronized  thrpt   30  59604298.107 ± 163449.443  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13885268.448 ops/s
# Warmup Iteration   2: 23098150.832 ops/s
# Warmup Iteration   3: 24875912.478 ops/s
# Warmup Iteration   4: 24964278.222 ops/s
# Warmup Iteration   5: 24988142.894 ops/s
# Warmup Iteration   6: 21048370.152 ops/s
# Warmup Iteration   7: 24975601.091 ops/s
# Warmup Iteration   8: 24947214.327 ops/s
# Warmup Iteration   9: 24989448.879 ops/s
# Warmup Iteration  10: 24939999.485 ops/s
# Warmup Iteration  11: 24998853.845 ops/s
# Warmup Iteration  12: 25012193.758 ops/s
# Warmup Iteration  13: 24976992.486 ops/s
# Warmup Iteration  14: 24961250.510 ops/s
# Warmup Iteration  15: 24944275.999 ops/s
# Warmup Iteration  16: 24961674.829 ops/s
# Warmup Iteration  17: 25002564.017 ops/s
# Warmup Iteration  18: 24903543.275 ops/s
# Warmup Iteration  19: 24962337.090 ops/s
# Warmup Iteration  20: 24990097.417 ops/s
# Warmup Iteration  21: 25011455.752 ops/s
# Warmup Iteration  22: 24954697.321 ops/s
# Warmup Iteration  23: 25003986.533 ops/s
# Warmup Iteration  24: 24992850.049 ops/s
# Warmup Iteration  25: 24971646.469 ops/s
# Warmup Iteration  26: 24969178.609 ops/s
# Warmup Iteration  27: 24959980.108 ops/s
# Warmup Iteration  28: 25006120.358 ops/s
# Warmup Iteration  29: 24961029.934 ops/s
# Warmup Iteration  30: 24995694.455 ops/s
Iteration   1: 24979646.569 ops/s
Iteration   2: 25013910.956 ops/s
Iteration   3: 24993654.249 ops/s
Iteration   4: 25048757.782 ops/s
Iteration   5: 24883746.371 ops/s
Iteration   6: 25017493.120 ops/s
Iteration   7: 24938388.974 ops/s
Iteration   8: 24975223.697 ops/s
Iteration   9: 24919604.915 ops/s
Iteration  10: 25015780.888 ops/s
Iteration  11: 24986642.701 ops/s
Iteration  12: 24897935.146 ops/s
Iteration  13: 25028026.392 ops/s
Iteration  14: 24945577.482 ops/s
Iteration  15: 24986886.700 ops/s
Iteration  16: 24951213.166 ops/s
Iteration  17: 24969997.600 ops/s
Iteration  18: 24943813.460 ops/s
Iteration  19: 24910418.049 ops/s
Iteration  20: 24980891.910 ops/s
Iteration  21: 24855026.060 ops/s
Iteration  22: 24941347.225 ops/s
Iteration  23: 24926903.086 ops/s
Iteration  24: 25043003.874 ops/s
Iteration  25: 24964936.465 ops/s
Iteration  26: 25002358.185 ops/s
Iteration  27: 24997157.508 ops/s
Iteration  28: 24917329.162 ops/s
Iteration  29: 25030516.659 ops/s
Iteration  30: 24995890.096 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_asUnmodifiable":
  24968735.948 ±(99.9%) 32509.697 ops/s [Average]
  (min, avg, max) = (24855026.060, 24968735.948, 25048757.782), stdev = 48658.988
  CI (99.9%): [24936226.251, 25001245.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  24968735.948 ± 32509.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2007907.961 ops/s
# Warmup Iteration   2: 2542409.168 ops/s
# Warmup Iteration   3: 3278795.499 ops/s
# Warmup Iteration   4: 3289287.785 ops/s
# Warmup Iteration   5: 3279409.535 ops/s
# Warmup Iteration   6: 3277173.128 ops/s
# Warmup Iteration   7: 3277449.307 ops/s
# Warmup Iteration   8: 2916075.865 ops/s
# Warmup Iteration   9: 3053318.473 ops/s
# Warmup Iteration  10: 3277784.055 ops/s
# Warmup Iteration  11: 3280737.194 ops/s
# Warmup Iteration  12: 3279056.128 ops/s
# Warmup Iteration  13: 3279526.134 ops/s
# Warmup Iteration  14: 3276240.438 ops/s
# Warmup Iteration  15: 3278569.834 ops/s
# Warmup Iteration  16: 3285457.492 ops/s
# Warmup Iteration  17: 3276182.192 ops/s
# Warmup Iteration  18: 3275767.106 ops/s
# Warmup Iteration  19: 3284394.012 ops/s
# Warmup Iteration  20: 3278423.494 ops/s
# Warmup Iteration  21: 3271999.561 ops/s
# Warmup Iteration  22: 3274044.201 ops/s
# Warmup Iteration  23: 3285297.130 ops/s
# Warmup Iteration  24: 3279940.493 ops/s
# Warmup Iteration  25: 3268695.042 ops/s
# Warmup Iteration  26: 3279722.553 ops/s
# Warmup Iteration  27: 3275529.514 ops/s
# Warmup Iteration  28: 3272854.888 ops/s
# Warmup Iteration  29: 3279300.746 ops/s
# Warmup Iteration  30: 3278776.531 ops/s
Iteration   1: 3276979.400 ops/s
Iteration   2: 3277567.853 ops/s
Iteration   3: 3281407.437 ops/s
Iteration   4: 3287798.797 ops/s
Iteration   5: 3291145.793 ops/s
Iteration   6: 3279581.077 ops/s
Iteration   7: 3289234.900 ops/s
Iteration   8: 3278411.490 ops/s
Iteration   9: 3279353.350 ops/s
Iteration  10: 3284075.524 ops/s
Iteration  11: 3278192.420 ops/s
Iteration  12: 3284651.197 ops/s
Iteration  13: 3285050.973 ops/s
Iteration  14: 3274711.843 ops/s
Iteration  15: 3261557.087 ops/s
Iteration  16: 3274579.038 ops/s
Iteration  17: 3277765.834 ops/s
Iteration  18: 3270204.825 ops/s
Iteration  19: 3286561.025 ops/s
Iteration  20: 3273530.082 ops/s
Iteration  21: 3289599.528 ops/s
Iteration  22: 3273332.573 ops/s
Iteration  23: 3289359.188 ops/s
Iteration  24: 3276571.928 ops/s
Iteration  25: 3276495.054 ops/s
Iteration  26: 3275201.682 ops/s
Iteration  27: 3284298.706 ops/s
Iteration  28: 3271636.540 ops/s
Iteration  29: 3284704.737 ops/s
Iteration  30: 3277397.261 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearch":
  3279698.571 ±(99.9%) 4518.946 ops/s [Average]
  (min, avg, max) = (3261557.087, 3279698.571, 3291145.793), stdev = 6763.746
  CI (99.9%): [3275179.625, 3284217.517] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_binarySearch  thrpt   30  3279698.571 ± 4518.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1997541.309 ops/s
# Warmup Iteration   2: 2527680.332 ops/s
# Warmup Iteration   3: 3241527.998 ops/s
# Warmup Iteration   4: 3229844.022 ops/s
# Warmup Iteration   5: 3239156.088 ops/s
# Warmup Iteration   6: 3240280.154 ops/s
# Warmup Iteration   7: 3236282.044 ops/s
# Warmup Iteration   8: 2967551.133 ops/s
# Warmup Iteration   9: 2937426.043 ops/s
# Warmup Iteration  10: 3245609.826 ops/s
# Warmup Iteration  11: 3236908.383 ops/s
# Warmup Iteration  12: 3241495.165 ops/s
# Warmup Iteration  13: 3241621.440 ops/s
# Warmup Iteration  14: 3237225.845 ops/s
# Warmup Iteration  15: 3239909.580 ops/s
# Warmup Iteration  16: 3238554.541 ops/s
# Warmup Iteration  17: 3235887.662 ops/s
# Warmup Iteration  18: 3240406.297 ops/s
# Warmup Iteration  19: 3233946.523 ops/s
# Warmup Iteration  20: 3239673.542 ops/s
# Warmup Iteration  21: 3245183.248 ops/s
# Warmup Iteration  22: 3232392.518 ops/s
# Warmup Iteration  23: 3238652.409 ops/s
# Warmup Iteration  24: 3246308.773 ops/s
# Warmup Iteration  25: 3240658.121 ops/s
# Warmup Iteration  26: 3250370.706 ops/s
# Warmup Iteration  27: 3236972.976 ops/s
# Warmup Iteration  28: 3243238.825 ops/s
# Warmup Iteration  29: 3240583.274 ops/s
# Warmup Iteration  30: 3242565.564 ops/s
Iteration   1: 3231588.483 ops/s
Iteration   2: 3243498.958 ops/s
Iteration   3: 3231366.694 ops/s
Iteration   4: 3240625.652 ops/s
Iteration   5: 3247132.370 ops/s
Iteration   6: 3251274.039 ops/s
Iteration   7: 3238249.824 ops/s
Iteration   8: 3246112.964 ops/s
Iteration   9: 3236088.860 ops/s
Iteration  10: 3248275.529 ops/s
Iteration  11: 3243815.993 ops/s
Iteration  12: 3226106.517 ops/s
Iteration  13: 3245219.726 ops/s
Iteration  14: 3242502.366 ops/s
Iteration  15: 3239897.492 ops/s
Iteration  16: 3245426.030 ops/s
Iteration  17: 3240862.133 ops/s
Iteration  18: 3235262.759 ops/s
Iteration  19: 3250745.123 ops/s
Iteration  20: 3243291.424 ops/s
Iteration  21: 3244091.763 ops/s
Iteration  22: 3244432.025 ops/s
Iteration  23: 3240806.819 ops/s
Iteration  24: 3243195.669 ops/s
Iteration  25: 3246195.445 ops/s
Iteration  26: 3233587.838 ops/s
Iteration  27: 3244389.294 ops/s
Iteration  28: 3243455.265 ops/s
Iteration  29: 3224991.103 ops/s
Iteration  30: 3239702.184 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_binarySearchWithComparator":
  3241073.011 ±(99.9%) 4349.203 ops/s [Average]
  (min, avg, max) = (3224991.103, 3241073.011, 3251274.039), stdev = 6509.683
  CI (99.9%): [3236723.808, 3245422.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  3241073.011 ± 4349.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 781229.122 ops/s
# Warmup Iteration   2: 1726970.836 ops/s
# Warmup Iteration   3: 1750116.680 ops/s
# Warmup Iteration   4: 1471925.488 ops/s
# Warmup Iteration   5: 1756577.775 ops/s
# Warmup Iteration   6: 1752798.855 ops/s
# Warmup Iteration   7: 1755464.313 ops/s
# Warmup Iteration   8: 1752063.523 ops/s
# Warmup Iteration   9: 1756884.611 ops/s
# Warmup Iteration  10: 1755262.822 ops/s
# Warmup Iteration  11: 1753431.858 ops/s
# Warmup Iteration  12: 1750176.497 ops/s
# Warmup Iteration  13: 1753155.473 ops/s
# Warmup Iteration  14: 1747531.278 ops/s
# Warmup Iteration  15: 1751221.777 ops/s
# Warmup Iteration  16: 1755808.831 ops/s
# Warmup Iteration  17: 1754887.034 ops/s
# Warmup Iteration  18: 1756333.452 ops/s
# Warmup Iteration  19: 1756956.430 ops/s
# Warmup Iteration  20: 1756552.673 ops/s
# Warmup Iteration  21: 1754845.776 ops/s
# Warmup Iteration  22: 1751454.231 ops/s
# Warmup Iteration  23: 1757475.872 ops/s
# Warmup Iteration  24: 1753419.515 ops/s
# Warmup Iteration  25: 1753098.811 ops/s
# Warmup Iteration  26: 1752754.713 ops/s
# Warmup Iteration  27: 1755278.878 ops/s
# Warmup Iteration  28: 1754112.162 ops/s
# Warmup Iteration  29: 1752507.644 ops/s
# Warmup Iteration  30: 1754054.484 ops/s
Iteration   1: 1757729.676 ops/s
Iteration   2: 1750628.472 ops/s
Iteration   3: 1758327.801 ops/s
Iteration   4: 1760913.191 ops/s
Iteration   5: 1757061.404 ops/s
Iteration   6: 1745491.126 ops/s
Iteration   7: 1751789.616 ops/s
Iteration   8: 1752609.012 ops/s
Iteration   9: 1751828.206 ops/s
Iteration  10: 1756586.559 ops/s
Iteration  11: 1759381.684 ops/s
Iteration  12: 1753500.669 ops/s
Iteration  13: 1755002.430 ops/s
Iteration  14: 1755402.154 ops/s
Iteration  15: 1755213.732 ops/s
Iteration  16: 1753297.899 ops/s
Iteration  17: 1753611.217 ops/s
Iteration  18: 1751447.059 ops/s
Iteration  19: 1751553.959 ops/s
Iteration  20: 1754016.731 ops/s
Iteration  21: 1751485.585 ops/s
Iteration  22: 1756906.210 ops/s
Iteration  23: 1752163.782 ops/s
Iteration  24: 1749265.149 ops/s
Iteration  25: 1752254.911 ops/s
Iteration  26: 1754972.366 ops/s
Iteration  27: 1753692.260 ops/s
Iteration  28: 1758213.324 ops/s
Iteration  29: 1753312.208 ops/s
Iteration  30: 1754945.702 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk":
  1754086.803 ±(99.9%) 2156.525 ops/s [Average]
  (min, avg, max) = (1745491.126, 1754086.803, 1760913.191), stdev = 3227.785
  CI (99.9%): [1751930.278, 1756243.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_chunk  thrpt   30  1754086.803 ± 2156.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11208705.408 ops/s
# Warmup Iteration   2: 21294592.917 ops/s
# Warmup Iteration   3: 21372846.105 ops/s
# Warmup Iteration   4: 21503400.179 ops/s
# Warmup Iteration   5: 18137793.848 ops/s
# Warmup Iteration   6: 21539786.047 ops/s
# Warmup Iteration   7: 21536199.529 ops/s
# Warmup Iteration   8: 21459666.012 ops/s
# Warmup Iteration   9: 21537251.872 ops/s
# Warmup Iteration  10: 21529706.933 ops/s
# Warmup Iteration  11: 21483906.914 ops/s
# Warmup Iteration  12: 21557486.546 ops/s
# Warmup Iteration  13: 21522651.135 ops/s
# Warmup Iteration  14: 21456680.109 ops/s
# Warmup Iteration  15: 21521373.104 ops/s
# Warmup Iteration  16: 21456239.246 ops/s
# Warmup Iteration  17: 21508709.506 ops/s
# Warmup Iteration  18: 21564630.483 ops/s
# Warmup Iteration  19: 21539063.124 ops/s
# Warmup Iteration  20: 21499028.401 ops/s
# Warmup Iteration  21: 21529791.614 ops/s
# Warmup Iteration  22: 21522859.207 ops/s
# Warmup Iteration  23: 21511258.919 ops/s
# Warmup Iteration  24: 21495603.176 ops/s
# Warmup Iteration  25: 21545472.454 ops/s
# Warmup Iteration  26: 21499489.647 ops/s
# Warmup Iteration  27: 21532719.111 ops/s
# Warmup Iteration  28: 21521759.095 ops/s
# Warmup Iteration  29: 21503933.418 ops/s
# Warmup Iteration  30: 21527010.719 ops/s
Iteration   1: 21526694.307 ops/s
Iteration   2: 21492581.906 ops/s
Iteration   3: 21521772.881 ops/s
Iteration   4: 21475446.190 ops/s
Iteration   5: 21551603.672 ops/s
Iteration   6: 21479402.273 ops/s
Iteration   7: 21526069.801 ops/s
Iteration   8: 21573182.371 ops/s
Iteration   9: 21519442.599 ops/s
Iteration  10: 21496478.072 ops/s
Iteration  11: 21556433.493 ops/s
Iteration  12: 21554594.325 ops/s
Iteration  13: 21516429.362 ops/s
Iteration  14: 21578536.950 ops/s
Iteration  15: 21426506.269 ops/s
Iteration  16: 21512664.520 ops/s
Iteration  17: 21584475.032 ops/s
Iteration  18: 21475105.124 ops/s
Iteration  19: 21582360.274 ops/s
Iteration  20: 21587180.430 ops/s
Iteration  21: 21533171.019 ops/s
Iteration  22: 21587429.552 ops/s
Iteration  23: 21575095.163 ops/s
Iteration  24: 21513299.924 ops/s
Iteration  25: 21545611.845 ops/s
Iteration  26: 21520332.083 ops/s
Iteration  27: 21494330.510 ops/s
Iteration  28: 21513061.805 ops/s
Iteration  29: 21549804.502 ops/s
Iteration  30: 21554750.894 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_empty":
  21530794.905 ±(99.9%) 26593.813 ops/s [Average]
  (min, avg, max) = (21426506.269, 21530794.905, 21587429.552), stdev = 39804.370
  CI (99.9%): [21504201.092, 21557388.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_chunk_empty  thrpt   30  21530794.905 ± 26593.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1732427.370 ops/s
# Warmup Iteration   2: 3539649.207 ops/s
# Warmup Iteration   3: 3593288.017 ops/s
# Warmup Iteration   4: 3618831.429 ops/s
# Warmup Iteration   5: 3014906.170 ops/s
# Warmup Iteration   6: 3622449.355 ops/s
# Warmup Iteration   7: 3620342.814 ops/s
# Warmup Iteration   8: 3623226.676 ops/s
# Warmup Iteration   9: 3616674.644 ops/s
# Warmup Iteration  10: 3619529.293 ops/s
# Warmup Iteration  11: 3617238.646 ops/s
# Warmup Iteration  12: 3616572.850 ops/s
# Warmup Iteration  13: 3619921.697 ops/s
# Warmup Iteration  14: 3613510.567 ops/s
# Warmup Iteration  15: 3622620.528 ops/s
# Warmup Iteration  16: 3620317.161 ops/s
# Warmup Iteration  17: 3611424.261 ops/s
# Warmup Iteration  18: 3616208.016 ops/s
# Warmup Iteration  19: 3623873.008 ops/s
# Warmup Iteration  20: 3618046.255 ops/s
# Warmup Iteration  21: 3614362.843 ops/s
# Warmup Iteration  22: 3612053.708 ops/s
# Warmup Iteration  23: 3615486.503 ops/s
# Warmup Iteration  24: 3606242.129 ops/s
# Warmup Iteration  25: 3612698.514 ops/s
# Warmup Iteration  26: 3616184.260 ops/s
# Warmup Iteration  27: 3617106.748 ops/s
# Warmup Iteration  28: 3617996.838 ops/s
# Warmup Iteration  29: 3605211.554 ops/s
# Warmup Iteration  30: 3608203.629 ops/s
Iteration   1: 3613482.358 ops/s
Iteration   2: 3611248.376 ops/s
Iteration   3: 3609243.080 ops/s
Iteration   4: 3618639.715 ops/s
Iteration   5: 3602269.815 ops/s
Iteration   6: 3614131.172 ops/s
Iteration   7: 3609673.007 ops/s
Iteration   8: 3612637.155 ops/s
Iteration   9: 3617012.226 ops/s
Iteration  10: 3608759.582 ops/s
Iteration  11: 3615841.387 ops/s
Iteration  12: 3612966.307 ops/s
Iteration  13: 3605793.037 ops/s
Iteration  14: 3623072.745 ops/s
Iteration  15: 3613029.145 ops/s
Iteration  16: 3607272.142 ops/s
Iteration  17: 3618608.961 ops/s
Iteration  18: 3608508.783 ops/s
Iteration  19: 3615888.170 ops/s
Iteration  20: 3609266.836 ops/s
Iteration  21: 3622257.504 ops/s
Iteration  22: 3613165.934 ops/s
Iteration  23: 3618167.175 ops/s
Iteration  24: 3618381.295 ops/s
Iteration  25: 3613555.115 ops/s
Iteration  26: 3607599.346 ops/s
Iteration  27: 3611621.521 ops/s
Iteration  28: 3616768.225 ops/s
Iteration  29: 3608435.842 ops/s
Iteration  30: 3595661.683 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_large_size":
  3612431.921 ±(99.9%) 3879.582 ops/s [Average]
  (min, avg, max) = (3595661.683, 3612431.921, 3623072.745), stdev = 5806.776
  CI (99.9%): [3608552.339, 3616311.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  3612431.921 ± 3879.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3388534.739 ops/s
# Warmup Iteration   2: 8235280.671 ops/s
# Warmup Iteration   3: 6957768.001 ops/s
# Warmup Iteration   4: 8387026.942 ops/s
# Warmup Iteration   5: 8390626.466 ops/s
# Warmup Iteration   6: 8365411.306 ops/s
# Warmup Iteration   7: 8384850.140 ops/s
# Warmup Iteration   8: 8364954.001 ops/s
# Warmup Iteration   9: 8374468.952 ops/s
# Warmup Iteration  10: 8400154.617 ops/s
# Warmup Iteration  11: 8379360.476 ops/s
# Warmup Iteration  12: 8374625.317 ops/s
# Warmup Iteration  13: 8416059.956 ops/s
# Warmup Iteration  14: 8386443.821 ops/s
# Warmup Iteration  15: 8397254.269 ops/s
# Warmup Iteration  16: 8362523.570 ops/s
# Warmup Iteration  17: 8389049.743 ops/s
# Warmup Iteration  18: 8393847.568 ops/s
# Warmup Iteration  19: 8394646.164 ops/s
# Warmup Iteration  20: 8399859.456 ops/s
# Warmup Iteration  21: 8371308.940 ops/s
# Warmup Iteration  22: 8388820.463 ops/s
# Warmup Iteration  23: 8391044.635 ops/s
# Warmup Iteration  24: 8393894.949 ops/s
# Warmup Iteration  25: 8390492.382 ops/s
# Warmup Iteration  26: 8382211.180 ops/s
# Warmup Iteration  27: 8412039.402 ops/s
# Warmup Iteration  28: 8389048.231 ops/s
# Warmup Iteration  29: 8392646.902 ops/s
# Warmup Iteration  30: 8385186.216 ops/s
Iteration   1: 8389500.561 ops/s
Iteration   2: 8411859.820 ops/s
Iteration   3: 8397345.643 ops/s
Iteration   4: 8401488.405 ops/s
Iteration   5: 8368594.616 ops/s
Iteration   6: 8377935.805 ops/s
Iteration   7: 8393830.699 ops/s
Iteration   8: 8375748.779 ops/s
Iteration   9: 8363604.075 ops/s
Iteration  10: 8400686.971 ops/s
Iteration  11: 8378363.025 ops/s
Iteration  12: 8400973.441 ops/s
Iteration  13: 8400294.394 ops/s
Iteration  14: 8412099.273 ops/s
Iteration  15: 8411094.427 ops/s
Iteration  16: 8407020.262 ops/s
Iteration  17: 8397082.218 ops/s
Iteration  18: 8407649.666 ops/s
Iteration  19: 8398438.767 ops/s
Iteration  20: 8356319.338 ops/s
Iteration  21: 8409237.662 ops/s
Iteration  22: 8398335.513 ops/s
Iteration  23: 8399868.558 ops/s
Iteration  24: 8414982.963 ops/s
Iteration  25: 8379991.231 ops/s
Iteration  26: 8411430.325 ops/s
Iteration  27: 8409998.403 ops/s
Iteration  28: 8353187.720 ops/s
Iteration  29: 8372250.746 ops/s
Iteration  30: 8382895.177 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_single":
  8392736.949 ±(99.9%) 11812.330 ops/s [Average]
  (min, avg, max) = (8353187.720, 8392736.949, 8414982.963), stdev = 17680.141
  CI (99.9%): [8380924.619, 8404549.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_chunk_single  thrpt   30  8392736.949 ± 11812.330  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 683191.481 ops/s
# Warmup Iteration   2: 783375.408 ops/s
# Warmup Iteration   3: 990173.338 ops/s
# Warmup Iteration   4: 992301.333 ops/s
# Warmup Iteration   5: 988986.289 ops/s
# Warmup Iteration   6: 993851.987 ops/s
# Warmup Iteration   7: 992520.716 ops/s
# Warmup Iteration   8: 992881.961 ops/s
# Warmup Iteration   9: 955904.709 ops/s
# Warmup Iteration  10: 871273.050 ops/s
# Warmup Iteration  11: 993667.988 ops/s
# Warmup Iteration  12: 991494.077 ops/s
# Warmup Iteration  13: 992654.100 ops/s
# Warmup Iteration  14: 991685.001 ops/s
# Warmup Iteration  15: 987953.834 ops/s
# Warmup Iteration  16: 989444.011 ops/s
# Warmup Iteration  17: 1052808.851 ops/s
# Warmup Iteration  18: 1052554.498 ops/s
# Warmup Iteration  19: 1055877.801 ops/s
# Warmup Iteration  20: 1050503.848 ops/s
# Warmup Iteration  21: 1049514.856 ops/s
# Warmup Iteration  22: 1049573.553 ops/s
# Warmup Iteration  23: 1051426.391 ops/s
# Warmup Iteration  24: 1051628.426 ops/s
# Warmup Iteration  25: 1047411.235 ops/s
# Warmup Iteration  26: 1053017.506 ops/s
# Warmup Iteration  27: 1052411.904 ops/s
# Warmup Iteration  28: 1052979.231 ops/s
# Warmup Iteration  29: 1052357.474 ops/s
# Warmup Iteration  30: 1049923.721 ops/s
Iteration   1: 1055240.751 ops/s
Iteration   2: 1050927.280 ops/s
Iteration   3: 1048686.811 ops/s
Iteration   4: 1052742.725 ops/s
Iteration   5: 1056120.212 ops/s
Iteration   6: 1047749.704 ops/s
Iteration   7: 1053648.991 ops/s
Iteration   8: 1048875.216 ops/s
Iteration   9: 1051789.473 ops/s
Iteration  10: 1052250.960 ops/s
Iteration  11: 1045883.956 ops/s
Iteration  12: 1051640.359 ops/s
Iteration  13: 1053079.495 ops/s
Iteration  14: 1051870.693 ops/s
Iteration  15: 1048119.470 ops/s
Iteration  16: 1049599.327 ops/s
Iteration  17: 1050592.426 ops/s
Iteration  18: 1049436.816 ops/s
Iteration  19: 1050786.673 ops/s
Iteration  20: 1052671.657 ops/s
Iteration  21: 1051253.839 ops/s
Iteration  22: 1050336.553 ops/s
Iteration  23: 1048761.182 ops/s
Iteration  24: 1048292.003 ops/s
Iteration  25: 1053906.027 ops/s
Iteration  26: 1048972.625 ops/s
Iteration  27: 1050467.264 ops/s
Iteration  28: 1054083.240 ops/s
Iteration  29: 1045753.557 ops/s
Iteration  30: 1049400.269 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_chunk_zero_throws":
  1050764.652 ±(99.9%) 1700.519 ops/s [Average]
  (min, avg, max) = (1045753.557, 1050764.652, 1056120.212), stdev = 2545.258
  CI (99.9%): [1049064.132, 1052465.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1050764.652 ± 1700.519  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3475262.000 ops/s
# Warmup Iteration   2: 7636163.315 ops/s
# Warmup Iteration   3: 6406068.180 ops/s
# Warmup Iteration   4: 7610668.292 ops/s
# Warmup Iteration   5: 7627049.725 ops/s
# Warmup Iteration   6: 7617160.457 ops/s
# Warmup Iteration   7: 7619409.384 ops/s
# Warmup Iteration   8: 7620017.588 ops/s
# Warmup Iteration   9: 7644216.063 ops/s
# Warmup Iteration  10: 7648454.436 ops/s
# Warmup Iteration  11: 7634595.318 ops/s
# Warmup Iteration  12: 7629159.286 ops/s
# Warmup Iteration  13: 7621461.564 ops/s
# Warmup Iteration  14: 7647199.399 ops/s
# Warmup Iteration  15: 7632060.030 ops/s
# Warmup Iteration  16: 7630535.188 ops/s
# Warmup Iteration  17: 7645379.114 ops/s
# Warmup Iteration  18: 7656143.318 ops/s
# Warmup Iteration  19: 7673842.991 ops/s
# Warmup Iteration  20: 7659352.758 ops/s
# Warmup Iteration  21: 7654391.544 ops/s
# Warmup Iteration  22: 7674302.171 ops/s
# Warmup Iteration  23: 7641693.293 ops/s
# Warmup Iteration  24: 7667957.689 ops/s
# Warmup Iteration  25: 7648841.648 ops/s
# Warmup Iteration  26: 7646945.003 ops/s
# Warmup Iteration  27: 7658464.369 ops/s
# Warmup Iteration  28: 7661691.973 ops/s
# Warmup Iteration  29: 7650683.423 ops/s
# Warmup Iteration  30: 7645990.143 ops/s
Iteration   1: 7629751.966 ops/s
Iteration   2: 7674772.466 ops/s
Iteration   3: 7691066.259 ops/s
Iteration   4: 7645066.759 ops/s
Iteration   5: 7687648.790 ops/s
Iteration   6: 7648232.008 ops/s
Iteration   7: 7672797.622 ops/s
Iteration   8: 7663292.729 ops/s
Iteration   9: 7660745.598 ops/s
Iteration  10: 7675393.893 ops/s
Iteration  11: 7652701.380 ops/s
Iteration  12: 7674436.705 ops/s
Iteration  13: 7673932.495 ops/s
Iteration  14: 7650786.936 ops/s
Iteration  15: 7670433.915 ops/s
Iteration  16: 7652441.813 ops/s
Iteration  17: 7715130.926 ops/s
Iteration  18: 7660581.684 ops/s
Iteration  19: 7647053.868 ops/s
Iteration  20: 7652825.585 ops/s
Iteration  21: 7678556.295 ops/s
Iteration  22: 7647245.737 ops/s
Iteration  23: 7672816.032 ops/s
Iteration  24: 7674342.929 ops/s
Iteration  25: 7647999.073 ops/s
Iteration  26: 7687978.008 ops/s
Iteration  27: 7660532.426 ops/s
Iteration  28: 7687515.827 ops/s
Iteration  29: 7669285.680 ops/s
Iteration  30: 7650851.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_clear":
  7665873.887 ±(99.9%) 11963.089 ops/s [Average]
  (min, avg, max) = (7629751.966, 7665873.887, 7715130.926), stdev = 17905.790
  CI (99.9%): [7653910.797, 7677836.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_clear  thrpt   30  7665873.887 ± 11963.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1022301.919 ops/s
# Warmup Iteration   2: 2375442.910 ops/s
# Warmup Iteration   3: 1977594.647 ops/s
# Warmup Iteration   4: 2412559.986 ops/s
# Warmup Iteration   5: 2392234.214 ops/s
# Warmup Iteration   6: 2397171.637 ops/s
# Warmup Iteration   7: 2407442.773 ops/s
# Warmup Iteration   8: 2386557.654 ops/s
# Warmup Iteration   9: 2404221.180 ops/s
# Warmup Iteration  10: 2404813.089 ops/s
# Warmup Iteration  11: 2398686.075 ops/s
# Warmup Iteration  12: 2398672.501 ops/s
# Warmup Iteration  13: 2385525.457 ops/s
# Warmup Iteration  14: 2379790.584 ops/s
# Warmup Iteration  15: 2363743.419 ops/s
# Warmup Iteration  16: 2400348.603 ops/s
# Warmup Iteration  17: 2369614.800 ops/s
# Warmup Iteration  18: 2379287.591 ops/s
# Warmup Iteration  19: 2395052.639 ops/s
# Warmup Iteration  20: 2377667.390 ops/s
# Warmup Iteration  21: 2398165.853 ops/s
# Warmup Iteration  22: 2412375.842 ops/s
# Warmup Iteration  23: 2398984.495 ops/s
# Warmup Iteration  24: 2391746.915 ops/s
# Warmup Iteration  25: 2397827.608 ops/s
# Warmup Iteration  26: 2393098.302 ops/s
# Warmup Iteration  27: 2428000.382 ops/s
# Warmup Iteration  28: 2387746.567 ops/s
# Warmup Iteration  29: 2393982.939 ops/s
# Warmup Iteration  30: 2377297.006 ops/s
Iteration   1: 2404948.296 ops/s
Iteration   2: 2399359.364 ops/s
Iteration   3: 2395707.632 ops/s
Iteration   4: 2397019.869 ops/s
Iteration   5: 2420963.169 ops/s
Iteration   6: 2416366.992 ops/s
Iteration   7: 2395487.132 ops/s
Iteration   8: 2381487.957 ops/s
Iteration   9: 2403458.304 ops/s
Iteration  10: 2398368.966 ops/s
Iteration  11: 2416679.239 ops/s
Iteration  12: 2379812.788 ops/s
Iteration  13: 2391702.692 ops/s
Iteration  14: 2403880.459 ops/s
Iteration  15: 2366151.191 ops/s
Iteration  16: 2366700.372 ops/s
Iteration  17: 2384260.651 ops/s
Iteration  18: 2390667.723 ops/s
Iteration  19: 2388420.106 ops/s
Iteration  20: 2388883.475 ops/s
Iteration  21: 2395103.693 ops/s
Iteration  22: 2400019.917 ops/s
Iteration  23: 2413091.600 ops/s
Iteration  24: 2435782.067 ops/s
Iteration  25: 2390338.533 ops/s
Iteration  26: 2412346.274 ops/s
Iteration  27: 2408170.477 ops/s
Iteration  28: 2411564.402 ops/s
Iteration  29: 2429507.389 ops/s
Iteration  30: 2396171.428 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collect":
  2399414.072 ±(99.9%) 10780.830 ops/s [Average]
  (min, avg, max) = (2366151.191, 2399414.072, 2435782.067), stdev = 16136.239
  CI (99.9%): [2388633.242, 2410194.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_collect  thrpt   30  2399414.072 ± 10780.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1232552.669 ops/s
# Warmup Iteration   2: 3078756.927 ops/s
# Warmup Iteration   3: 3104280.859 ops/s
# Warmup Iteration   4: 2573742.902 ops/s
# Warmup Iteration   5: 3110028.990 ops/s
# Warmup Iteration   6: 3114719.027 ops/s
# Warmup Iteration   7: 3112177.528 ops/s
# Warmup Iteration   8: 3107788.135 ops/s
# Warmup Iteration   9: 3109190.911 ops/s
# Warmup Iteration  10: 3114652.084 ops/s
# Warmup Iteration  11: 3112579.047 ops/s
# Warmup Iteration  12: 3103418.899 ops/s
# Warmup Iteration  13: 3108535.468 ops/s
# Warmup Iteration  14: 3105443.510 ops/s
# Warmup Iteration  15: 3107012.976 ops/s
# Warmup Iteration  16: 3105902.717 ops/s
# Warmup Iteration  17: 3109856.135 ops/s
# Warmup Iteration  18: 3104553.515 ops/s
# Warmup Iteration  19: 3112179.182 ops/s
# Warmup Iteration  20: 3109739.477 ops/s
# Warmup Iteration  21: 3110486.135 ops/s
# Warmup Iteration  22: 3108580.255 ops/s
# Warmup Iteration  23: 3108758.464 ops/s
# Warmup Iteration  24: 3106611.714 ops/s
# Warmup Iteration  25: 3111286.876 ops/s
# Warmup Iteration  26: 3109300.241 ops/s
# Warmup Iteration  27: 3104801.360 ops/s
# Warmup Iteration  28: 3105231.371 ops/s
# Warmup Iteration  29: 3107081.563 ops/s
# Warmup Iteration  30: 3101874.465 ops/s
Iteration   1: 3107508.438 ops/s
Iteration   2: 3104053.387 ops/s
Iteration   3: 3110527.920 ops/s
Iteration   4: 3108671.089 ops/s
Iteration   5: 3100201.014 ops/s
Iteration   6: 3110607.852 ops/s
Iteration   7: 3101823.047 ops/s
Iteration   8: 3116278.159 ops/s
Iteration   9: 3108181.293 ops/s
Iteration  10: 3091583.301 ops/s
Iteration  11: 3114067.448 ops/s
Iteration  12: 3103103.138 ops/s
Iteration  13: 3103357.036 ops/s
Iteration  14: 3104706.766 ops/s
Iteration  15: 3107034.330 ops/s
Iteration  16: 3111648.183 ops/s
Iteration  17: 3113105.332 ops/s
Iteration  18: 3115114.396 ops/s
Iteration  19: 3107863.995 ops/s
Iteration  20: 3117437.011 ops/s
Iteration  21: 3112629.683 ops/s
Iteration  22: 3110434.478 ops/s
Iteration  23: 3099989.917 ops/s
Iteration  24: 3105734.991 ops/s
Iteration  25: 3106436.924 ops/s
Iteration  26: 3107945.955 ops/s
Iteration  27: 3104233.559 ops/s
Iteration  28: 3092503.666 ops/s
Iteration  29: 3112291.192 ops/s
Iteration  30: 3106096.681 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBoolean":
  3107172.339 ±(99.9%) 4104.685 ops/s [Average]
  (min, avg, max) = (3091583.301, 3107172.339, 3117437.011), stdev = 6143.699
  CI (99.9%): [3103067.655, 3111277.024] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectBoolean  thrpt   30  3107172.339 ± 4104.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8620544.476 ops/s
# Warmup Iteration   2: 17304470.955 ops/s
# Warmup Iteration   3: 14952922.032 ops/s
# Warmup Iteration   4: 17655312.755 ops/s
# Warmup Iteration   5: 17617475.058 ops/s
# Warmup Iteration   6: 17609026.572 ops/s
# Warmup Iteration   7: 17666250.064 ops/s
# Warmup Iteration   8: 17646046.774 ops/s
# Warmup Iteration   9: 17661673.589 ops/s
# Warmup Iteration  10: 17660860.784 ops/s
# Warmup Iteration  11: 17657138.826 ops/s
# Warmup Iteration  12: 17673126.802 ops/s
# Warmup Iteration  13: 17723057.324 ops/s
# Warmup Iteration  14: 17580619.801 ops/s
# Warmup Iteration  15: 17606079.862 ops/s
# Warmup Iteration  16: 17670077.855 ops/s
# Warmup Iteration  17: 17630699.923 ops/s
# Warmup Iteration  18: 17659761.118 ops/s
# Warmup Iteration  19: 17656901.973 ops/s
# Warmup Iteration  20: 17602018.776 ops/s
# Warmup Iteration  21: 17675041.937 ops/s
# Warmup Iteration  22: 17685915.527 ops/s
# Warmup Iteration  23: 17668011.373 ops/s
# Warmup Iteration  24: 17682605.019 ops/s
# Warmup Iteration  25: 17666529.580 ops/s
# Warmup Iteration  26: 17655785.159 ops/s
# Warmup Iteration  27: 17700929.836 ops/s
# Warmup Iteration  28: 17658893.074 ops/s
# Warmup Iteration  29: 17661939.906 ops/s
# Warmup Iteration  30: 17669336.177 ops/s
Iteration   1: 17633496.954 ops/s
Iteration   2: 17592304.085 ops/s
Iteration   3: 17562967.211 ops/s
Iteration   4: 17730994.049 ops/s
Iteration   5: 17574724.319 ops/s
Iteration   6: 17539475.363 ops/s
Iteration   7: 17612090.603 ops/s
Iteration   8: 17666659.533 ops/s
Iteration   9: 17648713.672 ops/s
Iteration  10: 17697069.872 ops/s
Iteration  11: 17644204.860 ops/s
Iteration  12: 17575838.865 ops/s
Iteration  13: 17672807.060 ops/s
Iteration  14: 17599960.586 ops/s
Iteration  15: 17660580.536 ops/s
Iteration  16: 17645124.780 ops/s
Iteration  17: 17688949.500 ops/s
Iteration  18: 17675795.950 ops/s
Iteration  19: 17674307.762 ops/s
Iteration  20: 17621577.059 ops/s
Iteration  21: 17700798.227 ops/s
Iteration  22: 17685676.188 ops/s
Iteration  23: 17640808.039 ops/s
Iteration  24: 17676707.268 ops/s
Iteration  25: 17636903.675 ops/s
Iteration  26: 17650005.912 ops/s
Iteration  27: 17709248.311 ops/s
Iteration  28: 17691013.335 ops/s
Iteration  29: 17620444.212 ops/s
Iteration  30: 17603311.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  17644418.644 ±(99.9%) 31376.108 ops/s [Average]
  (min, avg, max) = (17539475.363, 17644418.644, 17730994.049), stdev = 46962.285
  CI (99.9%): [17613042.536, 17675794.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  17644418.644 ± 31376.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3571297.659 ops/s
# Warmup Iteration   2: 8479856.868 ops/s
# Warmup Iteration   3: 8553010.225 ops/s
# Warmup Iteration   4: 7147225.565 ops/s
# Warmup Iteration   5: 8590961.654 ops/s
# Warmup Iteration   6: 8587216.543 ops/s
# Warmup Iteration   7: 8579216.508 ops/s
# Warmup Iteration   8: 8574703.151 ops/s
# Warmup Iteration   9: 8575582.169 ops/s
# Warmup Iteration  10: 8583283.629 ops/s
# Warmup Iteration  11: 8546876.310 ops/s
# Warmup Iteration  12: 8551200.450 ops/s
# Warmup Iteration  13: 8600195.033 ops/s
# Warmup Iteration  14: 8582523.121 ops/s
# Warmup Iteration  15: 8566488.218 ops/s
# Warmup Iteration  16: 8549237.291 ops/s
# Warmup Iteration  17: 8576280.236 ops/s
# Warmup Iteration  18: 8572542.366 ops/s
# Warmup Iteration  19: 8557201.790 ops/s
# Warmup Iteration  20: 8593112.519 ops/s
# Warmup Iteration  21: 8584157.998 ops/s
# Warmup Iteration  22: 8568897.170 ops/s
# Warmup Iteration  23: 8580824.954 ops/s
# Warmup Iteration  24: 8579479.231 ops/s
# Warmup Iteration  25: 8574729.210 ops/s
# Warmup Iteration  26: 8591254.469 ops/s
# Warmup Iteration  27: 8574823.810 ops/s
# Warmup Iteration  28: 8568021.455 ops/s
# Warmup Iteration  29: 8533470.488 ops/s
# Warmup Iteration  30: 8575111.913 ops/s
Iteration   1: 8581671.173 ops/s
Iteration   2: 8584087.175 ops/s
Iteration   3: 8572070.273 ops/s
Iteration   4: 8586097.225 ops/s
Iteration   5: 8589320.901 ops/s
Iteration   6: 8550562.793 ops/s
Iteration   7: 8601914.535 ops/s
Iteration   8: 8588258.650 ops/s
Iteration   9: 8580156.980 ops/s
Iteration  10: 8589366.021 ops/s
Iteration  11: 8589415.127 ops/s
Iteration  12: 8622259.591 ops/s
Iteration  13: 8564664.084 ops/s
Iteration  14: 8580282.366 ops/s
Iteration  15: 8573695.898 ops/s
Iteration  16: 8580843.078 ops/s
Iteration  17: 8599505.555 ops/s
Iteration  18: 8596698.514 ops/s
Iteration  19: 8567114.950 ops/s
Iteration  20: 8585912.245 ops/s
Iteration  21: 8593544.545 ops/s
Iteration  22: 8568418.173 ops/s
Iteration  23: 8547663.264 ops/s
Iteration  24: 8591717.640 ops/s
Iteration  25: 8582421.280 ops/s
Iteration  26: 8564168.493 ops/s
Iteration  27: 8593307.555 ops/s
Iteration  28: 8580504.238 ops/s
Iteration  29: 8577427.626 ops/s
Iteration  30: 8574406.682 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectBooleanWithTarget":
  8581915.888 ±(99.9%) 10065.293 ops/s [Average]
  (min, avg, max) = (8547663.264, 8581915.888, 8622259.591), stdev = 15065.257
  CI (99.9%): [8571850.595, 8591981.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  8581915.888 ± 10065.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681820.686 ops/s
# Warmup Iteration   2: 1609212.211 ops/s
# Warmup Iteration   3: 1618695.304 ops/s
# Warmup Iteration   4: 1364288.762 ops/s
# Warmup Iteration   5: 1627569.194 ops/s
# Warmup Iteration   6: 1627797.505 ops/s
# Warmup Iteration   7: 1624926.508 ops/s
# Warmup Iteration   8: 1620013.864 ops/s
# Warmup Iteration   9: 1626119.882 ops/s
# Warmup Iteration  10: 1624367.394 ops/s
# Warmup Iteration  11: 1625556.334 ops/s
# Warmup Iteration  12: 1621703.089 ops/s
# Warmup Iteration  13: 1619858.399 ops/s
# Warmup Iteration  14: 1623706.190 ops/s
# Warmup Iteration  15: 1621669.230 ops/s
# Warmup Iteration  16: 1624122.547 ops/s
# Warmup Iteration  17: 1626758.032 ops/s
# Warmup Iteration  18: 1625341.721 ops/s
# Warmup Iteration  19: 1623982.295 ops/s
# Warmup Iteration  20: 1625013.215 ops/s
# Warmup Iteration  21: 1624111.025 ops/s
# Warmup Iteration  22: 1627740.137 ops/s
# Warmup Iteration  23: 1625383.128 ops/s
# Warmup Iteration  24: 1618624.128 ops/s
# Warmup Iteration  25: 1622315.732 ops/s
# Warmup Iteration  26: 1621805.764 ops/s
# Warmup Iteration  27: 1617020.347 ops/s
# Warmup Iteration  28: 1622510.916 ops/s
# Warmup Iteration  29: 1621680.070 ops/s
# Warmup Iteration  30: 1622744.373 ops/s
Iteration   1: 1626285.405 ops/s
Iteration   2: 1618312.500 ops/s
Iteration   3: 1616238.228 ops/s
Iteration   4: 1626731.290 ops/s
Iteration   5: 1621223.991 ops/s
Iteration   6: 1619508.221 ops/s
Iteration   7: 1621183.496 ops/s
Iteration   8: 1622025.439 ops/s
Iteration   9: 1614993.320 ops/s
Iteration  10: 1623986.161 ops/s
Iteration  11: 1616942.051 ops/s
Iteration  12: 1618869.230 ops/s
Iteration  13: 1619494.527 ops/s
Iteration  14: 1618842.254 ops/s
Iteration  15: 1616969.756 ops/s
Iteration  16: 1617630.116 ops/s
Iteration  17: 1618472.420 ops/s
Iteration  18: 1615287.695 ops/s
Iteration  19: 1620259.648 ops/s
Iteration  20: 1624031.388 ops/s
Iteration  21: 1618265.463 ops/s
Iteration  22: 1619543.917 ops/s
Iteration  23: 1617945.183 ops/s
Iteration  24: 1621973.476 ops/s
Iteration  25: 1628027.323 ops/s
Iteration  26: 1628269.339 ops/s
Iteration  27: 1624271.605 ops/s
Iteration  28: 1630519.503 ops/s
Iteration  29: 1627156.008 ops/s
Iteration  30: 1624859.656 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByte":
  1621270.620 ±(99.9%) 2821.904 ops/s [Average]
  (min, avg, max) = (1614993.320, 1621270.620, 1630519.503), stdev = 4223.694
  CI (99.9%): [1618448.716, 1624092.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectByte  thrpt   30  1621270.620 ± 2821.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1980104.816 ops/s
# Warmup Iteration   2: 4459886.561 ops/s
# Warmup Iteration   3: 3780595.893 ops/s
# Warmup Iteration   4: 4492024.803 ops/s
# Warmup Iteration   5: 4506774.322 ops/s
# Warmup Iteration   6: 4501790.778 ops/s
# Warmup Iteration   7: 4484329.157 ops/s
# Warmup Iteration   8: 4507878.638 ops/s
# Warmup Iteration   9: 4502391.515 ops/s
# Warmup Iteration  10: 4500618.934 ops/s
# Warmup Iteration  11: 4511903.153 ops/s
# Warmup Iteration  12: 4484389.644 ops/s
# Warmup Iteration  13: 4508089.750 ops/s
# Warmup Iteration  14: 4498251.475 ops/s
# Warmup Iteration  15: 4510961.651 ops/s
# Warmup Iteration  16: 4489608.631 ops/s
# Warmup Iteration  17: 4493934.622 ops/s
# Warmup Iteration  18: 4489389.527 ops/s
# Warmup Iteration  19: 4489528.336 ops/s
# Warmup Iteration  20: 4488352.490 ops/s
# Warmup Iteration  21: 4492026.115 ops/s
# Warmup Iteration  22: 4492518.136 ops/s
# Warmup Iteration  23: 4496127.091 ops/s
# Warmup Iteration  24: 4487618.217 ops/s
# Warmup Iteration  25: 4495174.945 ops/s
# Warmup Iteration  26: 4499639.923 ops/s
# Warmup Iteration  27: 4489900.802 ops/s
# Warmup Iteration  28: 4497326.430 ops/s
# Warmup Iteration  29: 4494809.235 ops/s
# Warmup Iteration  30: 4499305.075 ops/s
Iteration   1: 4489843.947 ops/s
Iteration   2: 4498681.573 ops/s
Iteration   3: 4491535.808 ops/s
Iteration   4: 4502468.921 ops/s
Iteration   5: 4507285.082 ops/s
Iteration   6: 4482366.595 ops/s
Iteration   7: 4508944.913 ops/s
Iteration   8: 4496840.070 ops/s
Iteration   9: 4491882.564 ops/s
Iteration  10: 4489012.042 ops/s
Iteration  11: 4498624.752 ops/s
Iteration  12: 4496156.339 ops/s
Iteration  13: 4502569.695 ops/s
Iteration  14: 4498004.173 ops/s
Iteration  15: 4497036.520 ops/s
Iteration  16: 4509304.794 ops/s
Iteration  17: 4497981.752 ops/s
Iteration  18: 4499070.760 ops/s
Iteration  19: 4488922.848 ops/s
Iteration  20: 4503171.393 ops/s
Iteration  21: 4507649.894 ops/s
Iteration  22: 4490107.034 ops/s
Iteration  23: 4483201.564 ops/s
Iteration  24: 4496322.530 ops/s
Iteration  25: 4485083.123 ops/s
Iteration  26: 4492050.751 ops/s
Iteration  27: 4482585.926 ops/s
Iteration  28: 4512854.512 ops/s
Iteration  29: 4498722.426 ops/s
Iteration  30: 4498276.832 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithBagTarget":
  4496551.971 ±(99.9%) 5461.412 ops/s [Average]
  (min, avg, max) = (4482366.595, 4496551.971, 4512854.512), stdev = 8174.384
  CI (99.9%): [4491090.559, 4502013.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  4496551.971 ± 5461.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1679485.522 ops/s
# Warmup Iteration   2: 3904959.687 ops/s
# Warmup Iteration   3: 3370013.744 ops/s
# Warmup Iteration   4: 3886320.653 ops/s
# Warmup Iteration   5: 3954034.371 ops/s
# Warmup Iteration   6: 3955637.997 ops/s
# Warmup Iteration   7: 3957927.542 ops/s
# Warmup Iteration   8: 3957608.583 ops/s
# Warmup Iteration   9: 3949690.440 ops/s
# Warmup Iteration  10: 3960059.328 ops/s
# Warmup Iteration  11: 3956472.119 ops/s
# Warmup Iteration  12: 3951616.900 ops/s
# Warmup Iteration  13: 3956227.347 ops/s
# Warmup Iteration  14: 3960904.170 ops/s
# Warmup Iteration  15: 3963566.024 ops/s
# Warmup Iteration  16: 3949096.926 ops/s
# Warmup Iteration  17: 3965470.567 ops/s
# Warmup Iteration  18: 3963305.185 ops/s
# Warmup Iteration  19: 3944939.565 ops/s
# Warmup Iteration  20: 3965437.326 ops/s
# Warmup Iteration  21: 3951761.305 ops/s
# Warmup Iteration  22: 3960167.796 ops/s
# Warmup Iteration  23: 3954939.113 ops/s
# Warmup Iteration  24: 3956628.268 ops/s
# Warmup Iteration  25: 3955962.848 ops/s
# Warmup Iteration  26: 3964114.226 ops/s
# Warmup Iteration  27: 3959809.735 ops/s
# Warmup Iteration  28: 3963464.018 ops/s
# Warmup Iteration  29: 3947184.004 ops/s
# Warmup Iteration  30: 3961983.914 ops/s
Iteration   1: 3963963.205 ops/s
Iteration   2: 3962570.299 ops/s
Iteration   3: 3948035.815 ops/s
Iteration   4: 3969363.452 ops/s
Iteration   5: 3953203.097 ops/s
Iteration   6: 3962443.919 ops/s
Iteration   7: 3965046.152 ops/s
Iteration   8: 3939940.594 ops/s
Iteration   9: 3957492.243 ops/s
Iteration  10: 3953344.332 ops/s
Iteration  11: 3955739.949 ops/s
Iteration  12: 3963593.792 ops/s
Iteration  13: 3951602.852 ops/s
Iteration  14: 3965065.259 ops/s
Iteration  15: 3956710.819 ops/s
Iteration  16: 3961743.769 ops/s
Iteration  17: 3964077.532 ops/s
Iteration  18: 3942333.262 ops/s
Iteration  19: 3961825.477 ops/s
Iteration  20: 3946397.664 ops/s
Iteration  21: 3950427.396 ops/s
Iteration  22: 3952371.803 ops/s
Iteration  23: 3961102.871 ops/s
Iteration  24: 3937826.184 ops/s
Iteration  25: 3949142.632 ops/s
Iteration  26: 3943189.158 ops/s
Iteration  27: 3940921.247 ops/s
Iteration  28: 3959319.680 ops/s
Iteration  29: 3961469.892 ops/s
Iteration  30: 3960455.115 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectByteWithTarget":
  3955357.315 ±(99.9%) 5826.213 ops/s [Average]
  (min, avg, max) = (3937826.184, 3955357.315, 3969363.452), stdev = 8720.402
  CI (99.9%): [3949531.102, 3961183.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  3955357.315 ± 5826.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651456.303 ops/s
# Warmup Iteration   2: 1534669.042 ops/s
# Warmup Iteration   3: 1545131.161 ops/s
# Warmup Iteration   4: 1297802.667 ops/s
# Warmup Iteration   5: 1550500.820 ops/s
# Warmup Iteration   6: 1547992.384 ops/s
# Warmup Iteration   7: 1544254.367 ops/s
# Warmup Iteration   8: 1547155.164 ops/s
# Warmup Iteration   9: 1547375.361 ops/s
# Warmup Iteration  10: 1548348.525 ops/s
# Warmup Iteration  11: 1546335.996 ops/s
# Warmup Iteration  12: 1549607.778 ops/s
# Warmup Iteration  13: 1544847.760 ops/s
# Warmup Iteration  14: 1546415.424 ops/s
# Warmup Iteration  15: 1545978.390 ops/s
# Warmup Iteration  16: 1549515.967 ops/s
# Warmup Iteration  17: 1551656.414 ops/s
# Warmup Iteration  18: 1548725.878 ops/s
# Warmup Iteration  19: 1547749.477 ops/s
# Warmup Iteration  20: 1548729.333 ops/s
# Warmup Iteration  21: 1547708.790 ops/s
# Warmup Iteration  22: 1546940.886 ops/s
# Warmup Iteration  23: 1549214.395 ops/s
# Warmup Iteration  24: 1546928.926 ops/s
# Warmup Iteration  25: 1548897.882 ops/s
# Warmup Iteration  26: 1548602.279 ops/s
# Warmup Iteration  27: 1551467.374 ops/s
# Warmup Iteration  28: 1546452.930 ops/s
# Warmup Iteration  29: 1550317.127 ops/s
# Warmup Iteration  30: 1550136.494 ops/s
Iteration   1: 1546861.062 ops/s
Iteration   2: 1550662.669 ops/s
Iteration   3: 1549057.721 ops/s
Iteration   4: 1547581.322 ops/s
Iteration   5: 1548119.094 ops/s
Iteration   6: 1550529.949 ops/s
Iteration   7: 1545308.633 ops/s
Iteration   8: 1544835.795 ops/s
Iteration   9: 1547158.571 ops/s
Iteration  10: 1548194.859 ops/s
Iteration  11: 1545365.015 ops/s
Iteration  12: 1549336.943 ops/s
Iteration  13: 1548276.827 ops/s
Iteration  14: 1551211.657 ops/s
Iteration  15: 1548913.038 ops/s
Iteration  16: 1551538.757 ops/s
Iteration  17: 1549388.393 ops/s
Iteration  18: 1548093.701 ops/s
Iteration  19: 1547575.119 ops/s
Iteration  20: 1549082.409 ops/s
Iteration  21: 1548407.738 ops/s
Iteration  22: 1548870.976 ops/s
Iteration  23: 1547519.247 ops/s
Iteration  24: 1551547.008 ops/s
Iteration  25: 1546595.874 ops/s
Iteration  26: 1545374.115 ops/s
Iteration  27: 1552386.637 ops/s
Iteration  28: 1543983.685 ops/s
Iteration  29: 1548735.560 ops/s
Iteration  30: 1547983.851 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectChar":
  1548283.207 ±(99.9%) 1392.504 ops/s [Average]
  (min, avg, max) = (1543983.685, 1548283.207, 1552386.637), stdev = 2084.235
  CI (99.9%): [1546890.703, 1549675.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectChar  thrpt   30  1548283.207 ± 1392.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2208191.792 ops/s
# Warmup Iteration   2: 4919352.294 ops/s
# Warmup Iteration   3: 4205406.968 ops/s
# Warmup Iteration   4: 5008132.096 ops/s
# Warmup Iteration   5: 5018627.387 ops/s
# Warmup Iteration   6: 5000073.150 ops/s
# Warmup Iteration   7: 5012515.575 ops/s
# Warmup Iteration   8: 5005483.741 ops/s
# Warmup Iteration   9: 5019315.218 ops/s
# Warmup Iteration  10: 5004632.135 ops/s
# Warmup Iteration  11: 5020145.823 ops/s
# Warmup Iteration  12: 5010875.044 ops/s
# Warmup Iteration  13: 5015313.975 ops/s
# Warmup Iteration  14: 5005084.593 ops/s
# Warmup Iteration  15: 4993431.285 ops/s
# Warmup Iteration  16: 5014721.834 ops/s
# Warmup Iteration  17: 4999239.583 ops/s
# Warmup Iteration  18: 5022633.485 ops/s
# Warmup Iteration  19: 5015985.305 ops/s
# Warmup Iteration  20: 5002619.601 ops/s
# Warmup Iteration  21: 5003951.041 ops/s
# Warmup Iteration  22: 5016362.530 ops/s
# Warmup Iteration  23: 5012503.239 ops/s
# Warmup Iteration  24: 4998062.502 ops/s
# Warmup Iteration  25: 5019169.906 ops/s
# Warmup Iteration  26: 5013731.485 ops/s
# Warmup Iteration  27: 5015946.201 ops/s
# Warmup Iteration  28: 5013021.825 ops/s
# Warmup Iteration  29: 5002078.878 ops/s
# Warmup Iteration  30: 5008129.425 ops/s
Iteration   1: 5003534.648 ops/s
Iteration   2: 5004426.422 ops/s
Iteration   3: 5004654.707 ops/s
Iteration   4: 5011547.718 ops/s
Iteration   5: 5006984.778 ops/s
Iteration   6: 5009966.350 ops/s
Iteration   7: 5007191.686 ops/s
Iteration   8: 5010536.134 ops/s
Iteration   9: 5004085.201 ops/s
Iteration  10: 5023508.897 ops/s
Iteration  11: 5012405.517 ops/s
Iteration  12: 4999803.703 ops/s
Iteration  13: 5007375.778 ops/s
Iteration  14: 5002905.342 ops/s
Iteration  15: 4966966.912 ops/s
Iteration  16: 5000640.486 ops/s
Iteration  17: 5006730.836 ops/s
Iteration  18: 5005628.185 ops/s
Iteration  19: 4986661.550 ops/s
Iteration  20: 5009050.192 ops/s
Iteration  21: 4991726.962 ops/s
Iteration  22: 5000231.644 ops/s
Iteration  23: 5007748.678 ops/s
Iteration  24: 5012450.935 ops/s
Iteration  25: 5010574.850 ops/s
Iteration  26: 5001768.093 ops/s
Iteration  27: 5011109.433 ops/s
Iteration  28: 5012433.812 ops/s
Iteration  29: 5002217.422 ops/s
Iteration  30: 4985554.054 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithBagTarget":
  5004014.031 ±(99.9%) 6929.082 ops/s [Average]
  (min, avg, max) = (4966966.912, 5004014.031, 5023508.897), stdev = 10371.125
  CI (99.9%): [4997084.948, 5010943.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  5004014.031 ± 6929.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1706215.841 ops/s
# Warmup Iteration   2: 3947612.877 ops/s
# Warmup Iteration   3: 3330854.250 ops/s
# Warmup Iteration   4: 4001830.052 ops/s
# Warmup Iteration   5: 4015076.912 ops/s
# Warmup Iteration   6: 4015163.786 ops/s
# Warmup Iteration   7: 4009077.918 ops/s
# Warmup Iteration   8: 4005707.779 ops/s
# Warmup Iteration   9: 3996817.820 ops/s
# Warmup Iteration  10: 4001798.255 ops/s
# Warmup Iteration  11: 4016846.041 ops/s
# Warmup Iteration  12: 4003345.381 ops/s
# Warmup Iteration  13: 4006141.322 ops/s
# Warmup Iteration  14: 4004425.880 ops/s
# Warmup Iteration  15: 4002255.604 ops/s
# Warmup Iteration  16: 4010416.203 ops/s
# Warmup Iteration  17: 4008992.296 ops/s
# Warmup Iteration  18: 4008532.268 ops/s
# Warmup Iteration  19: 4006490.296 ops/s
# Warmup Iteration  20: 4006288.691 ops/s
# Warmup Iteration  21: 4012762.789 ops/s
# Warmup Iteration  22: 4004859.849 ops/s
# Warmup Iteration  23: 4005305.341 ops/s
# Warmup Iteration  24: 4009555.574 ops/s
# Warmup Iteration  25: 4014918.757 ops/s
# Warmup Iteration  26: 4012905.782 ops/s
# Warmup Iteration  27: 4007147.499 ops/s
# Warmup Iteration  28: 4012180.713 ops/s
# Warmup Iteration  29: 3998699.382 ops/s
# Warmup Iteration  30: 4015040.150 ops/s
Iteration   1: 4014508.912 ops/s
Iteration   2: 4011522.219 ops/s
Iteration   3: 4013555.777 ops/s
Iteration   4: 4019681.179 ops/s
Iteration   5: 3996223.896 ops/s
Iteration   6: 4025718.880 ops/s
Iteration   7: 4023220.501 ops/s
Iteration   8: 4015956.933 ops/s
Iteration   9: 3996993.347 ops/s
Iteration  10: 4002435.191 ops/s
Iteration  11: 4001859.550 ops/s
Iteration  12: 3997665.714 ops/s
Iteration  13: 4008006.070 ops/s
Iteration  14: 4014762.734 ops/s
Iteration  15: 4013982.004 ops/s
Iteration  16: 4008589.260 ops/s
Iteration  17: 3994784.160 ops/s
Iteration  18: 4012326.522 ops/s
Iteration  19: 4005544.058 ops/s
Iteration  20: 4002342.601 ops/s
Iteration  21: 4011150.983 ops/s
Iteration  22: 4016979.998 ops/s
Iteration  23: 4007212.520 ops/s
Iteration  24: 4003131.630 ops/s
Iteration  25: 4016102.573 ops/s
Iteration  26: 4012372.693 ops/s
Iteration  27: 4019118.141 ops/s
Iteration  28: 4013912.805 ops/s
Iteration  29: 4003547.715 ops/s
Iteration  30: 3987578.469 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectCharWithTarget":
  4009026.234 ±(99.9%) 6005.462 ops/s [Average]
  (min, avg, max) = (3987578.469, 4009026.234, 4025718.880), stdev = 8988.693
  CI (99.9%): [4003020.773, 4015031.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  4009026.234 ± 6005.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555988.300 ops/s
# Warmup Iteration   2: 1207561.635 ops/s
# Warmup Iteration   3: 1208294.367 ops/s
# Warmup Iteration   4: 1029839.537 ops/s
# Warmup Iteration   5: 1208470.451 ops/s
# Warmup Iteration   6: 1213006.663 ops/s
# Warmup Iteration   7: 1211426.282 ops/s
# Warmup Iteration   8: 1214246.201 ops/s
# Warmup Iteration   9: 1213078.713 ops/s
# Warmup Iteration  10: 1210800.955 ops/s
# Warmup Iteration  11: 1209500.830 ops/s
# Warmup Iteration  12: 1194814.885 ops/s
# Warmup Iteration  13: 1212890.836 ops/s
# Warmup Iteration  14: 1209885.968 ops/s
# Warmup Iteration  15: 1213202.643 ops/s
# Warmup Iteration  16: 1214167.476 ops/s
# Warmup Iteration  17: 1207913.261 ops/s
# Warmup Iteration  18: 1212325.745 ops/s
# Warmup Iteration  19: 1213995.950 ops/s
# Warmup Iteration  20: 1211847.596 ops/s
# Warmup Iteration  21: 1215073.534 ops/s
# Warmup Iteration  22: 1215114.752 ops/s
# Warmup Iteration  23: 1214912.172 ops/s
# Warmup Iteration  24: 1211376.395 ops/s
# Warmup Iteration  25: 1214874.839 ops/s
# Warmup Iteration  26: 1215900.047 ops/s
# Warmup Iteration  27: 1210893.706 ops/s
# Warmup Iteration  28: 1214779.141 ops/s
# Warmup Iteration  29: 1210725.282 ops/s
# Warmup Iteration  30: 1216003.222 ops/s
Iteration   1: 1212388.707 ops/s
Iteration   2: 1219611.377 ops/s
Iteration   3: 1210708.748 ops/s
Iteration   4: 1213541.909 ops/s
Iteration   5: 1212965.876 ops/s
Iteration   6: 1210914.337 ops/s
Iteration   7: 1210744.153 ops/s
Iteration   8: 1213307.365 ops/s
Iteration   9: 1214768.573 ops/s
Iteration  10: 1216253.471 ops/s
Iteration  11: 1216991.436 ops/s
Iteration  12: 1206146.049 ops/s
Iteration  13: 1215335.442 ops/s
Iteration  14: 1210699.130 ops/s
Iteration  15: 1211811.975 ops/s
Iteration  16: 1215799.249 ops/s
Iteration  17: 1214152.166 ops/s
Iteration  18: 1217083.143 ops/s
Iteration  19: 1211397.628 ops/s
Iteration  20: 1213890.257 ops/s
Iteration  21: 1213332.866 ops/s
Iteration  22: 1214317.750 ops/s
Iteration  23: 1216920.854 ops/s
Iteration  24: 1211109.180 ops/s
Iteration  25: 1208943.216 ops/s
Iteration  26: 1214939.172 ops/s
Iteration  27: 1212568.267 ops/s
Iteration  28: 1214071.069 ops/s
Iteration  29: 1210401.982 ops/s
Iteration  30: 1210904.518 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDouble":
  1213200.662 ±(99.9%) 1879.164 ops/s [Average]
  (min, avg, max) = (1206146.049, 1213200.662, 1219611.377), stdev = 2812.645
  CI (99.9%): [1211321.498, 1215079.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectDouble  thrpt   30  1213200.662 ± 1879.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1450175.647 ops/s
# Warmup Iteration   2: 3382004.438 ops/s
# Warmup Iteration   3: 2831507.394 ops/s
# Warmup Iteration   4: 3393897.887 ops/s
# Warmup Iteration   5: 3398937.503 ops/s
# Warmup Iteration   6: 3397274.035 ops/s
# Warmup Iteration   7: 3394129.959 ops/s
# Warmup Iteration   8: 3394686.281 ops/s
# Warmup Iteration   9: 3392578.516 ops/s
# Warmup Iteration  10: 3391860.918 ops/s
# Warmup Iteration  11: 3394055.940 ops/s
# Warmup Iteration  12: 3389847.946 ops/s
# Warmup Iteration  13: 3389903.097 ops/s
# Warmup Iteration  14: 3391710.524 ops/s
# Warmup Iteration  15: 3396872.100 ops/s
# Warmup Iteration  16: 3394946.360 ops/s
# Warmup Iteration  17: 3392259.959 ops/s
# Warmup Iteration  18: 3389664.252 ops/s
# Warmup Iteration  19: 3390861.546 ops/s
# Warmup Iteration  20: 3387667.236 ops/s
# Warmup Iteration  21: 3392969.669 ops/s
# Warmup Iteration  22: 3390517.611 ops/s
# Warmup Iteration  23: 3398765.868 ops/s
# Warmup Iteration  24: 3392524.102 ops/s
# Warmup Iteration  25: 3396043.019 ops/s
# Warmup Iteration  26: 3395640.048 ops/s
# Warmup Iteration  27: 3384292.843 ops/s
# Warmup Iteration  28: 3394254.484 ops/s
# Warmup Iteration  29: 3396306.377 ops/s
# Warmup Iteration  30: 3387859.477 ops/s
Iteration   1: 3379922.702 ops/s
Iteration   2: 3393633.485 ops/s
Iteration   3: 3383151.869 ops/s
Iteration   4: 3384446.847 ops/s
Iteration   5: 3404067.414 ops/s
Iteration   6: 3373170.400 ops/s
Iteration   7: 3393876.071 ops/s
Iteration   8: 3404570.129 ops/s
Iteration   9: 3399393.575 ops/s
Iteration  10: 3392609.841 ops/s
Iteration  11: 3395247.838 ops/s
Iteration  12: 3388196.377 ops/s
Iteration  13: 3412013.964 ops/s
Iteration  14: 3383674.662 ops/s
Iteration  15: 3397065.384 ops/s
Iteration  16: 3386691.826 ops/s
Iteration  17: 3389943.034 ops/s
Iteration  18: 3385543.264 ops/s
Iteration  19: 3403324.110 ops/s
Iteration  20: 3404721.096 ops/s
Iteration  21: 3390007.992 ops/s
Iteration  22: 3392792.694 ops/s
Iteration  23: 3387987.854 ops/s
Iteration  24: 3399936.203 ops/s
Iteration  25: 3397491.099 ops/s
Iteration  26: 3381216.926 ops/s
Iteration  27: 3395791.529 ops/s
Iteration  28: 3388421.830 ops/s
Iteration  29: 3403167.946 ops/s
Iteration  30: 3385487.760 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3392585.524 ±(99.9%) 5949.250 ops/s [Average]
  (min, avg, max) = (3373170.400, 3392585.524, 3412013.964), stdev = 8904.557
  CI (99.9%): [3386636.274, 3398534.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3392585.524 ± 5949.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1188451.770 ops/s
# Warmup Iteration   2: 2883638.457 ops/s
# Warmup Iteration   3: 2459607.592 ops/s
# Warmup Iteration   4: 2855220.656 ops/s
# Warmup Iteration   5: 2911352.824 ops/s
# Warmup Iteration   6: 2904907.099 ops/s
# Warmup Iteration   7: 2907210.814 ops/s
# Warmup Iteration   8: 2904702.947 ops/s
# Warmup Iteration   9: 2903224.378 ops/s
# Warmup Iteration  10: 2910227.322 ops/s
# Warmup Iteration  11: 2904996.387 ops/s
# Warmup Iteration  12: 2911351.462 ops/s
# Warmup Iteration  13: 2908328.808 ops/s
# Warmup Iteration  14: 2903034.110 ops/s
# Warmup Iteration  15: 2903733.558 ops/s
# Warmup Iteration  16: 2904025.389 ops/s
# Warmup Iteration  17: 2909103.497 ops/s
# Warmup Iteration  18: 2908496.051 ops/s
# Warmup Iteration  19: 2907744.617 ops/s
# Warmup Iteration  20: 2914549.548 ops/s
# Warmup Iteration  21: 2903936.930 ops/s
# Warmup Iteration  22: 2909032.369 ops/s
# Warmup Iteration  23: 2904168.070 ops/s
# Warmup Iteration  24: 2913244.455 ops/s
# Warmup Iteration  25: 2911246.949 ops/s
# Warmup Iteration  26: 2907648.217 ops/s
# Warmup Iteration  27: 2904919.551 ops/s
# Warmup Iteration  28: 2906441.924 ops/s
# Warmup Iteration  29: 2903678.271 ops/s
# Warmup Iteration  30: 2910677.370 ops/s
Iteration   1: 2899788.305 ops/s
Iteration   2: 2910062.071 ops/s
Iteration   3: 2915667.565 ops/s
Iteration   4: 2912954.785 ops/s
Iteration   5: 2894937.439 ops/s
Iteration   6: 2907135.302 ops/s
Iteration   7: 2916745.001 ops/s
Iteration   8: 2910484.348 ops/s
Iteration   9: 2917422.100 ops/s
Iteration  10: 2894889.045 ops/s
Iteration  11: 2898021.016 ops/s
Iteration  12: 2916440.060 ops/s
Iteration  13: 2916003.842 ops/s
Iteration  14: 2900449.763 ops/s
Iteration  15: 2898669.568 ops/s
Iteration  16: 2909173.879 ops/s
Iteration  17: 2904316.225 ops/s
Iteration  18: 2904699.689 ops/s
Iteration  19: 2903763.045 ops/s
Iteration  20: 2902343.956 ops/s
Iteration  21: 2910146.366 ops/s
Iteration  22: 2896639.526 ops/s
Iteration  23: 2914811.442 ops/s
Iteration  24: 2903847.246 ops/s
Iteration  25: 2904941.113 ops/s
Iteration  26: 2906291.628 ops/s
Iteration  27: 2908851.859 ops/s
Iteration  28: 2906880.932 ops/s
Iteration  29: 2912413.105 ops/s
Iteration  30: 2902513.538 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectDoubleWithTarget":
  2906710.125 ±(99.9%) 4534.199 ops/s [Average]
  (min, avg, max) = (2894889.045, 2906710.125, 2917422.100), stdev = 6786.577
  CI (99.9%): [2902175.926, 2911244.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  2906710.125 ± 4534.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626680.346 ops/s
# Warmup Iteration   2: 1448617.498 ops/s
# Warmup Iteration   3: 1448185.669 ops/s
# Warmup Iteration   4: 1220653.538 ops/s
# Warmup Iteration   5: 1453384.096 ops/s
# Warmup Iteration   6: 1453810.092 ops/s
# Warmup Iteration   7: 1454477.858 ops/s
# Warmup Iteration   8: 1451389.493 ops/s
# Warmup Iteration   9: 1450909.207 ops/s
# Warmup Iteration  10: 1453343.088 ops/s
# Warmup Iteration  11: 1454372.409 ops/s
# Warmup Iteration  12: 1451351.646 ops/s
# Warmup Iteration  13: 1454902.093 ops/s
# Warmup Iteration  14: 1454995.988 ops/s
# Warmup Iteration  15: 1455188.895 ops/s
# Warmup Iteration  16: 1455571.248 ops/s
# Warmup Iteration  17: 1454860.595 ops/s
# Warmup Iteration  18: 1456632.914 ops/s
# Warmup Iteration  19: 1452668.083 ops/s
# Warmup Iteration  20: 1454902.574 ops/s
# Warmup Iteration  21: 1455256.728 ops/s
# Warmup Iteration  22: 1454416.134 ops/s
# Warmup Iteration  23: 1452576.058 ops/s
# Warmup Iteration  24: 1451791.658 ops/s
# Warmup Iteration  25: 1456131.956 ops/s
# Warmup Iteration  26: 1448195.604 ops/s
# Warmup Iteration  27: 1448672.306 ops/s
# Warmup Iteration  28: 1459270.792 ops/s
# Warmup Iteration  29: 1452969.041 ops/s
# Warmup Iteration  30: 1456969.229 ops/s
Iteration   1: 1453093.129 ops/s
Iteration   2: 1451902.587 ops/s
Iteration   3: 1457255.128 ops/s
Iteration   4: 1454513.257 ops/s
Iteration   5: 1458009.651 ops/s
Iteration   6: 1449914.277 ops/s
Iteration   7: 1452843.358 ops/s
Iteration   8: 1458056.419 ops/s
Iteration   9: 1445587.179 ops/s
Iteration  10: 1458935.060 ops/s
Iteration  11: 1456426.340 ops/s
Iteration  12: 1451339.567 ops/s
Iteration  13: 1453893.628 ops/s
Iteration  14: 1452503.157 ops/s
Iteration  15: 1454339.017 ops/s
Iteration  16: 1452062.160 ops/s
Iteration  17: 1456034.471 ops/s
Iteration  18: 1457724.240 ops/s
Iteration  19: 1455704.034 ops/s
Iteration  20: 1453316.453 ops/s
Iteration  21: 1450030.458 ops/s
Iteration  22: 1455805.024 ops/s
Iteration  23: 1453933.018 ops/s
Iteration  24: 1451746.801 ops/s
Iteration  25: 1458152.972 ops/s
Iteration  26: 1454848.941 ops/s
Iteration  27: 1454900.027 ops/s
Iteration  28: 1454034.449 ops/s
Iteration  29: 1457573.232 ops/s
Iteration  30: 1454348.708 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloat":
  1454294.225 ±(99.9%) 1982.756 ops/s [Average]
  (min, avg, max) = (1445587.179, 1454294.225, 1458935.060), stdev = 2967.697
  CI (99.9%): [1452311.468, 1456276.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectFloat  thrpt   30  1454294.225 ± 1982.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1773755.072 ops/s
# Warmup Iteration   2: 3981554.996 ops/s
# Warmup Iteration   3: 3347403.690 ops/s
# Warmup Iteration   4: 3988717.793 ops/s
# Warmup Iteration   5: 3989711.453 ops/s
# Warmup Iteration   6: 3991371.273 ops/s
# Warmup Iteration   7: 3987554.996 ops/s
# Warmup Iteration   8: 3987208.108 ops/s
# Warmup Iteration   9: 3992701.214 ops/s
# Warmup Iteration  10: 3987574.514 ops/s
# Warmup Iteration  11: 3980741.926 ops/s
# Warmup Iteration  12: 3981371.425 ops/s
# Warmup Iteration  13: 3988743.349 ops/s
# Warmup Iteration  14: 3987426.554 ops/s
# Warmup Iteration  15: 3999328.312 ops/s
# Warmup Iteration  16: 3979012.261 ops/s
# Warmup Iteration  17: 3995810.211 ops/s
# Warmup Iteration  18: 3986748.334 ops/s
# Warmup Iteration  19: 3994054.039 ops/s
# Warmup Iteration  20: 3986886.741 ops/s
# Warmup Iteration  21: 3990821.382 ops/s
# Warmup Iteration  22: 3982941.231 ops/s
# Warmup Iteration  23: 3979849.291 ops/s
# Warmup Iteration  24: 3976471.852 ops/s
# Warmup Iteration  25: 3994918.800 ops/s
# Warmup Iteration  26: 3983636.070 ops/s
# Warmup Iteration  27: 3983215.976 ops/s
# Warmup Iteration  28: 3985019.309 ops/s
# Warmup Iteration  29: 3986306.934 ops/s
# Warmup Iteration  30: 3985029.905 ops/s
Iteration   1: 3987163.909 ops/s
Iteration   2: 3989252.078 ops/s
Iteration   3: 3978563.225 ops/s
Iteration   4: 3965724.358 ops/s
Iteration   5: 3988403.367 ops/s
Iteration   6: 3986665.417 ops/s
Iteration   7: 3992491.849 ops/s
Iteration   8: 3969367.975 ops/s
Iteration   9: 3983799.017 ops/s
Iteration  10: 3988237.823 ops/s
Iteration  11: 3995862.107 ops/s
Iteration  12: 3989111.607 ops/s
Iteration  13: 3980235.287 ops/s
Iteration  14: 3997048.204 ops/s
Iteration  15: 3975289.636 ops/s
Iteration  16: 3993967.278 ops/s
Iteration  17: 3982401.506 ops/s
Iteration  18: 3981553.596 ops/s
Iteration  19: 4000985.175 ops/s
Iteration  20: 3989949.029 ops/s
Iteration  21: 3974100.439 ops/s
Iteration  22: 3983632.447 ops/s
Iteration  23: 3982814.615 ops/s
Iteration  24: 3986205.448 ops/s
Iteration  25: 3968871.416 ops/s
Iteration  26: 3988254.560 ops/s
Iteration  27: 3985168.751 ops/s
Iteration  28: 3995417.757 ops/s
Iteration  29: 3984400.253 ops/s
Iteration  30: 3984922.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithBagTarget":
  3984995.363 ±(99.9%) 5610.675 ops/s [Average]
  (min, avg, max) = (3965724.358, 3984995.363, 4000985.175), stdev = 8397.795
  CI (99.9%): [3979384.687, 3990606.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  3984995.363 ± 5610.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1429654.134 ops/s
# Warmup Iteration   2: 3352133.853 ops/s
# Warmup Iteration   3: 2956156.059 ops/s
# Warmup Iteration   4: 3209751.706 ops/s
# Warmup Iteration   5: 3350657.427 ops/s
# Warmup Iteration   6: 3355933.646 ops/s
# Warmup Iteration   7: 3357075.421 ops/s
# Warmup Iteration   8: 3356646.460 ops/s
# Warmup Iteration   9: 3357881.768 ops/s
# Warmup Iteration  10: 3350919.453 ops/s
# Warmup Iteration  11: 3359043.362 ops/s
# Warmup Iteration  12: 3360087.403 ops/s
# Warmup Iteration  13: 3358742.016 ops/s
# Warmup Iteration  14: 3352926.292 ops/s
# Warmup Iteration  15: 3356760.276 ops/s
# Warmup Iteration  16: 3358145.633 ops/s
# Warmup Iteration  17: 3359769.783 ops/s
# Warmup Iteration  18: 3360932.761 ops/s
# Warmup Iteration  19: 3353304.139 ops/s
# Warmup Iteration  20: 3359899.603 ops/s
# Warmup Iteration  21: 3360761.204 ops/s
# Warmup Iteration  22: 3355769.782 ops/s
# Warmup Iteration  23: 3358308.708 ops/s
# Warmup Iteration  24: 3359594.553 ops/s
# Warmup Iteration  25: 3358812.478 ops/s
# Warmup Iteration  26: 3358592.977 ops/s
# Warmup Iteration  27: 3352996.061 ops/s
# Warmup Iteration  28: 3349876.989 ops/s
# Warmup Iteration  29: 3361734.144 ops/s
# Warmup Iteration  30: 3349261.301 ops/s
Iteration   1: 3356602.893 ops/s
Iteration   2: 3351059.632 ops/s
Iteration   3: 3363424.507 ops/s
Iteration   4: 3364870.340 ops/s
Iteration   5: 3358150.855 ops/s
Iteration   6: 3359895.563 ops/s
Iteration   7: 3360795.861 ops/s
Iteration   8: 3350019.351 ops/s
Iteration   9: 3373113.009 ops/s
Iteration  10: 3354987.053 ops/s
Iteration  11: 3350230.543 ops/s
Iteration  12: 3353697.895 ops/s
Iteration  13: 3352875.949 ops/s
Iteration  14: 3352606.201 ops/s
Iteration  15: 3364437.330 ops/s
Iteration  16: 3362602.481 ops/s
Iteration  17: 3357694.885 ops/s
Iteration  18: 3356005.020 ops/s
Iteration  19: 3352680.554 ops/s
Iteration  20: 3354476.902 ops/s
Iteration  21: 3362365.704 ops/s
Iteration  22: 3358402.849 ops/s
Iteration  23: 3363233.901 ops/s
Iteration  24: 3359664.780 ops/s
Iteration  25: 3362780.314 ops/s
Iteration  26: 3352171.875 ops/s
Iteration  27: 3355253.357 ops/s
Iteration  28: 3349060.713 ops/s
Iteration  29: 3362051.160 ops/s
Iteration  30: 3358569.738 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectFloatWithTarget":
  3357792.707 ±(99.9%) 3701.405 ops/s [Average]
  (min, avg, max) = (3349060.713, 3357792.707, 3373113.009), stdev = 5540.089
  CI (99.9%): [3354091.303, 3361494.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  3357792.707 ± 3701.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655235.960 ops/s
# Warmup Iteration   2: 1615016.726 ops/s
# Warmup Iteration   3: 1650540.686 ops/s
# Warmup Iteration   4: 1365763.794 ops/s
# Warmup Iteration   5: 1653665.926 ops/s
# Warmup Iteration   6: 1652396.187 ops/s
# Warmup Iteration   7: 1647668.878 ops/s
# Warmup Iteration   8: 1657127.371 ops/s
# Warmup Iteration   9: 1656840.799 ops/s
# Warmup Iteration  10: 1654695.703 ops/s
# Warmup Iteration  11: 1656508.733 ops/s
# Warmup Iteration  12: 1647928.351 ops/s
# Warmup Iteration  13: 1654805.577 ops/s
# Warmup Iteration  14: 1649875.027 ops/s
# Warmup Iteration  15: 1652487.128 ops/s
# Warmup Iteration  16: 1650770.220 ops/s
# Warmup Iteration  17: 1655054.874 ops/s
# Warmup Iteration  18: 1649339.306 ops/s
# Warmup Iteration  19: 1657944.901 ops/s
# Warmup Iteration  20: 1651089.706 ops/s
# Warmup Iteration  21: 1649473.151 ops/s
# Warmup Iteration  22: 1646533.934 ops/s
# Warmup Iteration  23: 1650287.282 ops/s
# Warmup Iteration  24: 1650735.534 ops/s
# Warmup Iteration  25: 1651935.102 ops/s
# Warmup Iteration  26: 1656798.098 ops/s
# Warmup Iteration  27: 1643652.273 ops/s
# Warmup Iteration  28: 1654827.014 ops/s
# Warmup Iteration  29: 1640693.447 ops/s
# Warmup Iteration  30: 1657809.296 ops/s
Iteration   1: 1652892.334 ops/s
Iteration   2: 1653098.755 ops/s
Iteration   3: 1654525.783 ops/s
Iteration   4: 1651800.948 ops/s
Iteration   5: 1659272.823 ops/s
Iteration   6: 1645346.555 ops/s
Iteration   7: 1646965.712 ops/s
Iteration   8: 1647900.400 ops/s
Iteration   9: 1652881.133 ops/s
Iteration  10: 1660188.970 ops/s
Iteration  11: 1653852.561 ops/s
Iteration  12: 1646959.252 ops/s
Iteration  13: 1649932.872 ops/s
Iteration  14: 1643487.051 ops/s
Iteration  15: 1644459.864 ops/s
Iteration  16: 1645929.664 ops/s
Iteration  17: 1653300.802 ops/s
Iteration  18: 1647870.763 ops/s
Iteration  19: 1650492.133 ops/s
Iteration  20: 1634738.454 ops/s
Iteration  21: 1636904.909 ops/s
Iteration  22: 1640621.575 ops/s
Iteration  23: 1645129.449 ops/s
Iteration  24: 1646145.615 ops/s
Iteration  25: 1654954.554 ops/s
Iteration  26: 1646148.093 ops/s
Iteration  27: 1654548.551 ops/s
Iteration  28: 1648877.816 ops/s
Iteration  29: 1652798.441 ops/s
Iteration  30: 1658927.499 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIf":
  1649365.111 ±(99.9%) 4062.476 ops/s [Average]
  (min, avg, max) = (1634738.454, 1649365.111, 1660188.970), stdev = 6080.524
  CI (99.9%): [1645302.635, 1653427.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectIf  thrpt   30  1649365.111 ± 4062.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679027.172 ops/s
# Warmup Iteration   2: 1587835.151 ops/s
# Warmup Iteration   3: 1596339.941 ops/s
# Warmup Iteration   4: 1337691.918 ops/s
# Warmup Iteration   5: 1592708.516 ops/s
# Warmup Iteration   6: 1599321.019 ops/s
# Warmup Iteration   7: 1601273.985 ops/s
# Warmup Iteration   8: 1598551.017 ops/s
# Warmup Iteration   9: 1597471.848 ops/s
# Warmup Iteration  10: 1594008.484 ops/s
# Warmup Iteration  11: 1597833.437 ops/s
# Warmup Iteration  12: 1600386.585 ops/s
# Warmup Iteration  13: 1599165.823 ops/s
# Warmup Iteration  14: 1598623.376 ops/s
# Warmup Iteration  15: 1596429.963 ops/s
# Warmup Iteration  16: 1599451.597 ops/s
# Warmup Iteration  17: 1594526.679 ops/s
# Warmup Iteration  18: 1597962.879 ops/s
# Warmup Iteration  19: 1592271.532 ops/s
# Warmup Iteration  20: 1596462.165 ops/s
# Warmup Iteration  21: 1602021.801 ops/s
# Warmup Iteration  22: 1596344.553 ops/s
# Warmup Iteration  23: 1596390.136 ops/s
# Warmup Iteration  24: 1594117.585 ops/s
# Warmup Iteration  25: 1595642.492 ops/s
# Warmup Iteration  26: 1596961.306 ops/s
# Warmup Iteration  27: 1593834.633 ops/s
# Warmup Iteration  28: 1592470.997 ops/s
# Warmup Iteration  29: 1593243.041 ops/s
# Warmup Iteration  30: 1599419.810 ops/s
Iteration   1: 1595987.907 ops/s
Iteration   2: 1595982.117 ops/s
Iteration   3: 1587109.208 ops/s
Iteration   4: 1594701.356 ops/s
Iteration   5: 1602280.718 ops/s
Iteration   6: 1591636.957 ops/s
Iteration   7: 1597658.329 ops/s
Iteration   8: 1597543.641 ops/s
Iteration   9: 1597441.377 ops/s
Iteration  10: 1595180.222 ops/s
Iteration  11: 1585408.570 ops/s
Iteration  12: 1593330.338 ops/s
Iteration  13: 1601173.251 ops/s
Iteration  14: 1599510.714 ops/s
Iteration  15: 1595839.012 ops/s
Iteration  16: 1604111.936 ops/s
Iteration  17: 1591155.092 ops/s
Iteration  18: 1596064.331 ops/s
Iteration  19: 1597729.345 ops/s
Iteration  20: 1591943.944 ops/s
Iteration  21: 1600947.952 ops/s
Iteration  22: 1596855.783 ops/s
Iteration  23: 1595116.044 ops/s
Iteration  24: 1600015.727 ops/s
Iteration  25: 1599855.771 ops/s
Iteration  26: 1598441.960 ops/s
Iteration  27: 1596876.833 ops/s
Iteration  28: 1596769.194 ops/s
Iteration  29: 1587675.110 ops/s
Iteration  30: 1593216.800 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectInt":
  1595918.651 ±(99.9%) 2923.855 ops/s [Average]
  (min, avg, max) = (1585408.570, 1595918.651, 1604111.936), stdev = 4376.289
  CI (99.9%): [1592994.796, 1598842.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectInt  thrpt   30  1595918.651 ± 2923.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1934056.460 ops/s
# Warmup Iteration   2: 4476605.668 ops/s
# Warmup Iteration   3: 3785513.937 ops/s
# Warmup Iteration   4: 4534985.166 ops/s
# Warmup Iteration   5: 4547154.508 ops/s
# Warmup Iteration   6: 4528787.706 ops/s
# Warmup Iteration   7: 4535797.734 ops/s
# Warmup Iteration   8: 4539892.991 ops/s
# Warmup Iteration   9: 4540258.706 ops/s
# Warmup Iteration  10: 4528777.130 ops/s
# Warmup Iteration  11: 4553221.685 ops/s
# Warmup Iteration  12: 4547959.892 ops/s
# Warmup Iteration  13: 4552546.100 ops/s
# Warmup Iteration  14: 4543913.705 ops/s
# Warmup Iteration  15: 4544096.810 ops/s
# Warmup Iteration  16: 4541698.858 ops/s
# Warmup Iteration  17: 4544046.245 ops/s
# Warmup Iteration  18: 4545342.647 ops/s
# Warmup Iteration  19: 4535116.833 ops/s
# Warmup Iteration  20: 4547939.712 ops/s
# Warmup Iteration  21: 4538107.846 ops/s
# Warmup Iteration  22: 4532076.699 ops/s
# Warmup Iteration  23: 4533474.101 ops/s
# Warmup Iteration  24: 4544086.014 ops/s
# Warmup Iteration  25: 4534361.432 ops/s
# Warmup Iteration  26: 4550949.594 ops/s
# Warmup Iteration  27: 4536430.935 ops/s
# Warmup Iteration  28: 4531552.241 ops/s
# Warmup Iteration  29: 4540170.060 ops/s
# Warmup Iteration  30: 4538215.978 ops/s
Iteration   1: 4536582.100 ops/s
Iteration   2: 4545413.802 ops/s
Iteration   3: 4544660.840 ops/s
Iteration   4: 4531553.236 ops/s
Iteration   5: 4535327.995 ops/s
Iteration   6: 4526847.705 ops/s
Iteration   7: 4540826.868 ops/s
Iteration   8: 4541410.971 ops/s
Iteration   9: 4541659.838 ops/s
Iteration  10: 4545704.048 ops/s
Iteration  11: 4535732.173 ops/s
Iteration  12: 4539225.870 ops/s
Iteration  13: 4522489.443 ops/s
Iteration  14: 4530293.113 ops/s
Iteration  15: 4539892.279 ops/s
Iteration  16: 4540474.050 ops/s
Iteration  17: 4528914.519 ops/s
Iteration  18: 4553960.566 ops/s
Iteration  19: 4538775.347 ops/s
Iteration  20: 4548575.590 ops/s
Iteration  21: 4552844.367 ops/s
Iteration  22: 4541918.027 ops/s
Iteration  23: 4546170.247 ops/s
Iteration  24: 4541336.025 ops/s
Iteration  25: 4552518.220 ops/s
Iteration  26: 4534314.150 ops/s
Iteration  27: 4534047.635 ops/s
Iteration  28: 4530716.138 ops/s
Iteration  29: 4533141.232 ops/s
Iteration  30: 4539926.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithBagTarget":
  4539175.099 ±(99.9%) 5153.364 ops/s [Average]
  (min, avg, max) = (4522489.443, 4539175.099, 4553960.566), stdev = 7713.314
  CI (99.9%): [4534021.735, 4544328.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  4539175.099 ± 5153.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1528031.313 ops/s
# Warmup Iteration   2: 3677732.643 ops/s
# Warmup Iteration   3: 3075822.227 ops/s
# Warmup Iteration   4: 3718479.351 ops/s
# Warmup Iteration   5: 3716952.978 ops/s
# Warmup Iteration   6: 3705452.910 ops/s
# Warmup Iteration   7: 3713729.092 ops/s
# Warmup Iteration   8: 3705838.116 ops/s
# Warmup Iteration   9: 3713984.737 ops/s
# Warmup Iteration  10: 3708522.658 ops/s
# Warmup Iteration  11: 3719647.692 ops/s
# Warmup Iteration  12: 3708852.006 ops/s
# Warmup Iteration  13: 3715833.638 ops/s
# Warmup Iteration  14: 3716782.579 ops/s
# Warmup Iteration  15: 3719334.782 ops/s
# Warmup Iteration  16: 3718985.648 ops/s
# Warmup Iteration  17: 3707735.345 ops/s
# Warmup Iteration  18: 3709891.515 ops/s
# Warmup Iteration  19: 3707890.090 ops/s
# Warmup Iteration  20: 3719880.978 ops/s
# Warmup Iteration  21: 3703168.992 ops/s
# Warmup Iteration  22: 3702253.930 ops/s
# Warmup Iteration  23: 3711979.787 ops/s
# Warmup Iteration  24: 3716426.719 ops/s
# Warmup Iteration  25: 3709810.982 ops/s
# Warmup Iteration  26: 3711776.346 ops/s
# Warmup Iteration  27: 3713079.206 ops/s
# Warmup Iteration  28: 3705163.357 ops/s
# Warmup Iteration  29: 3704839.885 ops/s
# Warmup Iteration  30: 3703178.992 ops/s
Iteration   1: 3711694.199 ops/s
Iteration   2: 3717713.521 ops/s
Iteration   3: 3709545.867 ops/s
Iteration   4: 3700981.122 ops/s
Iteration   5: 3709883.491 ops/s
Iteration   6: 3699781.670 ops/s
Iteration   7: 3706169.409 ops/s
Iteration   8: 3696669.094 ops/s
Iteration   9: 3696224.949 ops/s
Iteration  10: 3706784.493 ops/s
Iteration  11: 3703670.856 ops/s
Iteration  12: 3722769.548 ops/s
Iteration  13: 3706253.741 ops/s
Iteration  14: 3714887.375 ops/s
Iteration  15: 3709318.076 ops/s
Iteration  16: 3709052.578 ops/s
Iteration  17: 3712378.083 ops/s
Iteration  18: 3712478.980 ops/s
Iteration  19: 3716727.345 ops/s
Iteration  20: 3707468.182 ops/s
Iteration  21: 3716053.922 ops/s
Iteration  22: 3698606.415 ops/s
Iteration  23: 3704286.567 ops/s
Iteration  24: 3711739.332 ops/s
Iteration  25: 3714025.549 ops/s
Iteration  26: 3704690.553 ops/s
Iteration  27: 3705334.849 ops/s
Iteration  28: 3712614.969 ops/s
Iteration  29: 3719620.472 ops/s
Iteration  30: 3717727.455 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectIntWithTarget":
  3709171.755 ±(99.9%) 4564.375 ops/s [Average]
  (min, avg, max) = (3696224.949, 3709171.755, 3722769.548), stdev = 6831.743
  CI (99.9%): [3704607.380, 3713736.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3709171.755 ± 4564.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628234.522 ops/s
# Warmup Iteration   2: 1326655.868 ops/s
# Warmup Iteration   3: 1276769.778 ops/s
# Warmup Iteration   4: 1195424.313 ops/s
# Warmup Iteration   5: 1335695.074 ops/s
# Warmup Iteration   6: 1332618.420 ops/s
# Warmup Iteration   7: 1333108.299 ops/s
# Warmup Iteration   8: 1333144.319 ops/s
# Warmup Iteration   9: 1322909.153 ops/s
# Warmup Iteration  10: 1318965.256 ops/s
# Warmup Iteration  11: 1333200.022 ops/s
# Warmup Iteration  12: 1337534.861 ops/s
# Warmup Iteration  13: 1334483.224 ops/s
# Warmup Iteration  14: 1336798.837 ops/s
# Warmup Iteration  15: 1335363.192 ops/s
# Warmup Iteration  16: 1329918.791 ops/s
# Warmup Iteration  17: 1336369.689 ops/s
# Warmup Iteration  18: 1331005.865 ops/s
# Warmup Iteration  19: 1335774.206 ops/s
# Warmup Iteration  20: 1338149.519 ops/s
# Warmup Iteration  21: 1339316.271 ops/s
# Warmup Iteration  22: 1333963.603 ops/s
# Warmup Iteration  23: 1334291.799 ops/s
# Warmup Iteration  24: 1339923.102 ops/s
# Warmup Iteration  25: 1335688.235 ops/s
# Warmup Iteration  26: 1334486.580 ops/s
# Warmup Iteration  27: 1337661.783 ops/s
# Warmup Iteration  28: 1337965.188 ops/s
# Warmup Iteration  29: 1334678.475 ops/s
# Warmup Iteration  30: 1338776.195 ops/s
Iteration   1: 1344759.421 ops/s
Iteration   2: 1335549.888 ops/s
Iteration   3: 1340771.298 ops/s
Iteration   4: 1333266.963 ops/s
Iteration   5: 1332479.267 ops/s
Iteration   6: 1341852.639 ops/s
Iteration   7: 1332976.599 ops/s
Iteration   8: 1330212.888 ops/s
Iteration   9: 1336648.517 ops/s
Iteration  10: 1337022.721 ops/s
Iteration  11: 1339886.275 ops/s
Iteration  12: 1338419.807 ops/s
Iteration  13: 1332585.148 ops/s
Iteration  14: 1331504.153 ops/s
Iteration  15: 1340008.417 ops/s
Iteration  16: 1334043.754 ops/s
Iteration  17: 1341410.085 ops/s
Iteration  18: 1339751.802 ops/s
Iteration  19: 1341074.949 ops/s
Iteration  20: 1337705.231 ops/s
Iteration  21: 1337381.433 ops/s
Iteration  22: 1343864.925 ops/s
Iteration  23: 1335222.083 ops/s
Iteration  24: 1335688.588 ops/s
Iteration  25: 1331767.733 ops/s
Iteration  26: 1339731.981 ops/s
Iteration  27: 1335478.637 ops/s
Iteration  28: 1336382.549 ops/s
Iteration  29: 1335830.524 ops/s
Iteration  30: 1336268.083 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLong":
  1336984.879 ±(99.9%) 2513.277 ops/s [Average]
  (min, avg, max) = (1330212.888, 1336984.879, 1344759.421), stdev = 3761.755
  CI (99.9%): [1334471.602, 1339498.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectLong  thrpt   30  1336984.879 ± 2513.277  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1859536.714 ops/s
# Warmup Iteration   2: 4216517.599 ops/s
# Warmup Iteration   3: 3588998.965 ops/s
# Warmup Iteration   4: 4287399.845 ops/s
# Warmup Iteration   5: 4280823.530 ops/s
# Warmup Iteration   6: 4283795.294 ops/s
# Warmup Iteration   7: 4295334.860 ops/s
# Warmup Iteration   8: 4301715.975 ops/s
# Warmup Iteration   9: 4298514.181 ops/s
# Warmup Iteration  10: 4284687.879 ops/s
# Warmup Iteration  11: 4292352.892 ops/s
# Warmup Iteration  12: 4301815.854 ops/s
# Warmup Iteration  13: 4293895.695 ops/s
# Warmup Iteration  14: 4293501.764 ops/s
# Warmup Iteration  15: 4286569.612 ops/s
# Warmup Iteration  16: 4301219.400 ops/s
# Warmup Iteration  17: 4308243.336 ops/s
# Warmup Iteration  18: 4294292.910 ops/s
# Warmup Iteration  19: 4292920.966 ops/s
# Warmup Iteration  20: 4306724.098 ops/s
# Warmup Iteration  21: 4298651.381 ops/s
# Warmup Iteration  22: 4292247.269 ops/s
# Warmup Iteration  23: 4301359.105 ops/s
# Warmup Iteration  24: 4286468.302 ops/s
# Warmup Iteration  25: 4302720.512 ops/s
# Warmup Iteration  26: 4298786.343 ops/s
# Warmup Iteration  27: 4305248.223 ops/s
# Warmup Iteration  28: 4297120.653 ops/s
# Warmup Iteration  29: 4291208.303 ops/s
# Warmup Iteration  30: 4298520.485 ops/s
Iteration   1: 4297098.510 ops/s
Iteration   2: 4314093.204 ops/s
Iteration   3: 4304833.688 ops/s
Iteration   4: 4280575.381 ops/s
Iteration   5: 4308661.738 ops/s
Iteration   6: 4298832.197 ops/s
Iteration   7: 4306820.925 ops/s
Iteration   8: 4284043.102 ops/s
Iteration   9: 4312349.221 ops/s
Iteration  10: 4308570.337 ops/s
Iteration  11: 4302447.767 ops/s
Iteration  12: 4301217.358 ops/s
Iteration  13: 4310289.618 ops/s
Iteration  14: 4288840.027 ops/s
Iteration  15: 4306963.195 ops/s
Iteration  16: 4286010.698 ops/s
Iteration  17: 4303693.812 ops/s
Iteration  18: 4288645.618 ops/s
Iteration  19: 4292576.744 ops/s
Iteration  20: 4298813.189 ops/s
Iteration  21: 4308798.680 ops/s
Iteration  22: 4286155.816 ops/s
Iteration  23: 4309794.323 ops/s
Iteration  24: 4286149.494 ops/s
Iteration  25: 4287700.339 ops/s
Iteration  26: 4300530.213 ops/s
Iteration  27: 4280440.095 ops/s
Iteration  28: 4306929.478 ops/s
Iteration  29: 4298913.160 ops/s
Iteration  30: 4292370.351 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithBagTarget":
  4298438.609 ±(99.9%) 6815.291 ops/s [Average]
  (min, avg, max) = (4280440.095, 4298438.609, 4314093.204), stdev = 10200.807
  CI (99.9%): [4291623.318, 4305253.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  4298438.609 ± 6815.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1390984.528 ops/s
# Warmup Iteration   2: 3234797.107 ops/s
# Warmup Iteration   3: 2734726.513 ops/s
# Warmup Iteration   4: 3281775.506 ops/s
# Warmup Iteration   5: 3291104.439 ops/s
# Warmup Iteration   6: 3289647.232 ops/s
# Warmup Iteration   7: 3298555.789 ops/s
# Warmup Iteration   8: 3279036.961 ops/s
# Warmup Iteration   9: 3284193.500 ops/s
# Warmup Iteration  10: 3291586.462 ops/s
# Warmup Iteration  11: 3279506.435 ops/s
# Warmup Iteration  12: 3289034.907 ops/s
# Warmup Iteration  13: 3288892.551 ops/s
# Warmup Iteration  14: 3285960.866 ops/s
# Warmup Iteration  15: 3288417.998 ops/s
# Warmup Iteration  16: 3287041.461 ops/s
# Warmup Iteration  17: 3281561.376 ops/s
# Warmup Iteration  18: 3279024.825 ops/s
# Warmup Iteration  19: 3285446.878 ops/s
# Warmup Iteration  20: 3277491.744 ops/s
# Warmup Iteration  21: 3276162.293 ops/s
# Warmup Iteration  22: 3280734.784 ops/s
# Warmup Iteration  23: 3265936.660 ops/s
# Warmup Iteration  24: 3279558.437 ops/s
# Warmup Iteration  25: 3287604.546 ops/s
# Warmup Iteration  26: 3284024.271 ops/s
# Warmup Iteration  27: 3287130.214 ops/s
# Warmup Iteration  28: 3283456.452 ops/s
# Warmup Iteration  29: 3283630.495 ops/s
# Warmup Iteration  30: 3296215.882 ops/s
Iteration   1: 3271910.269 ops/s
Iteration   2: 3291714.426 ops/s
Iteration   3: 3281517.222 ops/s
Iteration   4: 3280944.246 ops/s
Iteration   5: 3284890.503 ops/s
Iteration   6: 3291425.084 ops/s
Iteration   7: 3284394.805 ops/s
Iteration   8: 3289435.085 ops/s
Iteration   9: 3272493.521 ops/s
Iteration  10: 3274739.027 ops/s
Iteration  11: 3275694.455 ops/s
Iteration  12: 3269581.196 ops/s
Iteration  13: 3286971.846 ops/s
Iteration  14: 3269121.720 ops/s
Iteration  15: 3291603.301 ops/s
Iteration  16: 3271753.994 ops/s
Iteration  17: 3279355.003 ops/s
Iteration  18: 3278026.225 ops/s
Iteration  19: 3277693.677 ops/s
Iteration  20: 3268230.560 ops/s
Iteration  21: 3274048.807 ops/s
Iteration  22: 3263889.836 ops/s
Iteration  23: 3288188.638 ops/s
Iteration  24: 3278789.035 ops/s
Iteration  25: 3290771.822 ops/s
Iteration  26: 3286538.874 ops/s
Iteration  27: 3290669.128 ops/s
Iteration  28: 3268102.751 ops/s
Iteration  29: 3274599.853 ops/s
Iteration  30: 3293753.132 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectLongWithTarget":
  3280028.268 ±(99.9%) 5810.471 ops/s [Average]
  (min, avg, max) = (3263889.836, 3280028.268, 3293753.132), stdev = 8696.840
  CI (99.9%): [3274217.797, 3285838.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  3280028.268 ± 5810.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751611.129 ops/s
# Warmup Iteration   2: 1711361.755 ops/s
# Warmup Iteration   3: 1674982.525 ops/s
# Warmup Iteration   4: 1494743.067 ops/s
# Warmup Iteration   5: 1726942.087 ops/s
# Warmup Iteration   6: 1718000.523 ops/s
# Warmup Iteration   7: 1720677.109 ops/s
# Warmup Iteration   8: 1728765.499 ops/s
# Warmup Iteration   9: 1722818.389 ops/s
# Warmup Iteration  10: 1722356.369 ops/s
# Warmup Iteration  11: 1726235.961 ops/s
# Warmup Iteration  12: 1722252.440 ops/s
# Warmup Iteration  13: 1722333.216 ops/s
# Warmup Iteration  14: 1726161.015 ops/s
# Warmup Iteration  15: 1722947.207 ops/s
# Warmup Iteration  16: 1727298.360 ops/s
# Warmup Iteration  17: 1720154.471 ops/s
# Warmup Iteration  18: 1720748.233 ops/s
# Warmup Iteration  19: 1723118.108 ops/s
# Warmup Iteration  20: 1725151.123 ops/s
# Warmup Iteration  21: 1725118.838 ops/s
# Warmup Iteration  22: 1725439.141 ops/s
# Warmup Iteration  23: 1718337.882 ops/s
# Warmup Iteration  24: 1708158.481 ops/s
# Warmup Iteration  25: 1725078.667 ops/s
# Warmup Iteration  26: 1725248.977 ops/s
# Warmup Iteration  27: 1728768.841 ops/s
# Warmup Iteration  28: 1728134.803 ops/s
# Warmup Iteration  29: 1725372.864 ops/s
# Warmup Iteration  30: 1724234.596 ops/s
Iteration   1: 1724318.908 ops/s
Iteration   2: 1723608.007 ops/s
Iteration   3: 1725997.739 ops/s
Iteration   4: 1721565.280 ops/s
Iteration   5: 1723966.777 ops/s
Iteration   6: 1729376.914 ops/s
Iteration   7: 1722926.019 ops/s
Iteration   8: 1725434.361 ops/s
Iteration   9: 1725522.066 ops/s
Iteration  10: 1730026.254 ops/s
Iteration  11: 1725987.129 ops/s
Iteration  12: 1724185.546 ops/s
Iteration  13: 1725047.965 ops/s
Iteration  14: 1723089.559 ops/s
Iteration  15: 1727611.985 ops/s
Iteration  16: 1726262.880 ops/s
Iteration  17: 1724811.576 ops/s
Iteration  18: 1721332.450 ops/s
Iteration  19: 1724188.371 ops/s
Iteration  20: 1718456.920 ops/s
Iteration  21: 1724966.490 ops/s
Iteration  22: 1728063.839 ops/s
Iteration  23: 1723984.992 ops/s
Iteration  24: 1729639.969 ops/s
Iteration  25: 1721961.269 ops/s
Iteration  26: 1727366.245 ops/s
Iteration  27: 1728261.825 ops/s
Iteration  28: 1723557.766 ops/s
Iteration  29: 1724460.218 ops/s
Iteration  30: 1729071.701 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShort":
  1725168.367 ±(99.9%) 1804.840 ops/s [Average]
  (min, avg, max) = (1718456.920, 1725168.367, 1730026.254), stdev = 2701.400
  CI (99.9%): [1723363.527, 1726973.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectShort  thrpt   30  1725168.367 ± 1804.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2177299.709 ops/s
# Warmup Iteration   2: 4874694.309 ops/s
# Warmup Iteration   3: 4111131.746 ops/s
# Warmup Iteration   4: 4920066.219 ops/s
# Warmup Iteration   5: 4927759.406 ops/s
# Warmup Iteration   6: 4928285.828 ops/s
# Warmup Iteration   7: 4928182.579 ops/s
# Warmup Iteration   8: 4928260.419 ops/s
# Warmup Iteration   9: 4930195.672 ops/s
# Warmup Iteration  10: 4922192.306 ops/s
# Warmup Iteration  11: 4939976.975 ops/s
# Warmup Iteration  12: 4919293.305 ops/s
# Warmup Iteration  13: 4931536.794 ops/s
# Warmup Iteration  14: 4935940.579 ops/s
# Warmup Iteration  15: 4926436.182 ops/s
# Warmup Iteration  16: 4934258.955 ops/s
# Warmup Iteration  17: 4928948.995 ops/s
# Warmup Iteration  18: 4926239.995 ops/s
# Warmup Iteration  19: 4916639.467 ops/s
# Warmup Iteration  20: 4911717.565 ops/s
# Warmup Iteration  21: 4918952.034 ops/s
# Warmup Iteration  22: 4923819.019 ops/s
# Warmup Iteration  23: 4921745.092 ops/s
# Warmup Iteration  24: 4926174.435 ops/s
# Warmup Iteration  25: 4920658.138 ops/s
# Warmup Iteration  26: 4911650.852 ops/s
# Warmup Iteration  27: 4933424.480 ops/s
# Warmup Iteration  28: 4917165.400 ops/s
# Warmup Iteration  29: 4917899.474 ops/s
# Warmup Iteration  30: 4936155.489 ops/s
Iteration   1: 4913440.133 ops/s
Iteration   2: 4930345.751 ops/s
Iteration   3: 4919866.500 ops/s
Iteration   4: 4928575.527 ops/s
Iteration   5: 4936184.581 ops/s
Iteration   6: 4899678.299 ops/s
Iteration   7: 4926948.001 ops/s
Iteration   8: 4930932.264 ops/s
Iteration   9: 4910207.744 ops/s
Iteration  10: 4922207.879 ops/s
Iteration  11: 4914634.450 ops/s
Iteration  12: 4932393.801 ops/s
Iteration  13: 4887400.108 ops/s
Iteration  14: 4919394.592 ops/s
Iteration  15: 4911828.112 ops/s
Iteration  16: 4906509.142 ops/s
Iteration  17: 4916541.785 ops/s
Iteration  18: 4909024.970 ops/s
Iteration  19: 4921415.210 ops/s
Iteration  20: 4910945.538 ops/s
Iteration  21: 4921082.482 ops/s
Iteration  22: 4909942.867 ops/s
Iteration  23: 4924337.195 ops/s
Iteration  24: 4934177.245 ops/s
Iteration  25: 4911228.352 ops/s
Iteration  26: 4919900.215 ops/s
Iteration  27: 4925735.781 ops/s
Iteration  28: 4911069.193 ops/s
Iteration  29: 4908763.713 ops/s
Iteration  30: 4935691.137 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithBagTarget":
  4918346.752 ±(99.9%) 7526.168 ops/s [Average]
  (min, avg, max) = (4887400.108, 4918346.752, 4936184.581), stdev = 11264.815
  CI (99.9%): [4910820.584, 4925872.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  4918346.752 ± 7526.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1704818.750 ops/s
# Warmup Iteration   2: 3976238.907 ops/s
# Warmup Iteration   3: 3330329.486 ops/s
# Warmup Iteration   4: 3987464.206 ops/s
# Warmup Iteration   5: 3989125.940 ops/s
# Warmup Iteration   6: 3998542.102 ops/s
# Warmup Iteration   7: 3987344.498 ops/s
# Warmup Iteration   8: 3989100.675 ops/s
# Warmup Iteration   9: 3977350.644 ops/s
# Warmup Iteration  10: 3995336.482 ops/s
# Warmup Iteration  11: 3989820.138 ops/s
# Warmup Iteration  12: 3986231.879 ops/s
# Warmup Iteration  13: 3994827.602 ops/s
# Warmup Iteration  14: 3989958.985 ops/s
# Warmup Iteration  15: 3997215.819 ops/s
# Warmup Iteration  16: 3989658.451 ops/s
# Warmup Iteration  17: 3988301.528 ops/s
# Warmup Iteration  18: 3995186.899 ops/s
# Warmup Iteration  19: 3982351.131 ops/s
# Warmup Iteration  20: 3980186.683 ops/s
# Warmup Iteration  21: 4000817.892 ops/s
# Warmup Iteration  22: 3988545.954 ops/s
# Warmup Iteration  23: 3997032.921 ops/s
# Warmup Iteration  24: 3983968.368 ops/s
# Warmup Iteration  25: 3994211.045 ops/s
# Warmup Iteration  26: 3988617.828 ops/s
# Warmup Iteration  27: 3991968.636 ops/s
# Warmup Iteration  28: 3984562.039 ops/s
# Warmup Iteration  29: 3992989.407 ops/s
# Warmup Iteration  30: 3987076.998 ops/s
Iteration   1: 3989334.218 ops/s
Iteration   2: 3994604.361 ops/s
Iteration   3: 3971599.787 ops/s
Iteration   4: 3997423.457 ops/s
Iteration   5: 3990816.995 ops/s
Iteration   6: 3995024.295 ops/s
Iteration   7: 3982597.569 ops/s
Iteration   8: 3999400.518 ops/s
Iteration   9: 3973692.535 ops/s
Iteration  10: 3977523.031 ops/s
Iteration  11: 3978213.695 ops/s
Iteration  12: 4001429.827 ops/s
Iteration  13: 4000087.449 ops/s
Iteration  14: 3974901.645 ops/s
Iteration  15: 3991546.597 ops/s
Iteration  16: 3985350.779 ops/s
Iteration  17: 3994617.094 ops/s
Iteration  18: 3985778.858 ops/s
Iteration  19: 4001219.288 ops/s
Iteration  20: 3999544.699 ops/s
Iteration  21: 3990312.473 ops/s
Iteration  22: 3977095.224 ops/s
Iteration  23: 4008053.182 ops/s
Iteration  24: 3995636.708 ops/s
Iteration  25: 3993847.433 ops/s
Iteration  26: 3985999.885 ops/s
Iteration  27: 3994652.265 ops/s
Iteration  28: 3995470.977 ops/s
Iteration  29: 3985839.345 ops/s
Iteration  30: 3999129.419 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectShortWithTarget":
  3990358.120 ±(99.9%) 6312.609 ops/s [Average]
  (min, avg, max) = (3971599.787, 3990358.120, 4008053.182), stdev = 9448.417
  CI (99.9%): [3984045.511, 3996670.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  3990358.120 ± 6312.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140147.612 ops/s
# Warmup Iteration   2: 265322.037 ops/s
# Warmup Iteration   3: 315389.689 ops/s
# Warmup Iteration   4: 317038.758 ops/s
# Warmup Iteration   5: 317947.130 ops/s
# Warmup Iteration   6: 262020.384 ops/s
# Warmup Iteration   7: 318508.948 ops/s
# Warmup Iteration   8: 317921.807 ops/s
# Warmup Iteration   9: 318040.124 ops/s
# Warmup Iteration  10: 317661.117 ops/s
# Warmup Iteration  11: 317910.090 ops/s
# Warmup Iteration  12: 317832.165 ops/s
# Warmup Iteration  13: 317754.811 ops/s
# Warmup Iteration  14: 318403.446 ops/s
# Warmup Iteration  15: 318141.696 ops/s
# Warmup Iteration  16: 317464.311 ops/s
# Warmup Iteration  17: 318117.124 ops/s
# Warmup Iteration  18: 318209.076 ops/s
# Warmup Iteration  19: 318203.538 ops/s
# Warmup Iteration  20: 317783.952 ops/s
# Warmup Iteration  21: 317886.304 ops/s
# Warmup Iteration  22: 317943.699 ops/s
# Warmup Iteration  23: 317604.191 ops/s
# Warmup Iteration  24: 317947.207 ops/s
# Warmup Iteration  25: 317418.440 ops/s
# Warmup Iteration  26: 317975.280 ops/s
# Warmup Iteration  27: 318115.237 ops/s
# Warmup Iteration  28: 318106.910 ops/s
# Warmup Iteration  29: 318269.815 ops/s
# Warmup Iteration  30: 318035.819 ops/s
Iteration   1: 318795.252 ops/s
Iteration   2: 317880.671 ops/s
Iteration   3: 317462.248 ops/s
Iteration   4: 318744.057 ops/s
Iteration   5: 317803.081 ops/s
Iteration   6: 318819.656 ops/s
Iteration   7: 318046.659 ops/s
Iteration   8: 318484.766 ops/s
Iteration   9: 318409.289 ops/s
Iteration  10: 317313.244 ops/s
Iteration  11: 318971.529 ops/s
Iteration  12: 317861.333 ops/s
Iteration  13: 318445.900 ops/s
Iteration  14: 318140.672 ops/s
Iteration  15: 317219.446 ops/s
Iteration  16: 317508.281 ops/s
Iteration  17: 317962.350 ops/s
Iteration  18: 318022.805 ops/s
Iteration  19: 318328.925 ops/s
Iteration  20: 318561.830 ops/s
Iteration  21: 318349.195 ops/s
Iteration  22: 318038.069 ops/s
Iteration  23: 318166.691 ops/s
Iteration  24: 316961.358 ops/s
Iteration  25: 318385.282 ops/s
Iteration  26: 318251.881 ops/s
Iteration  27: 317338.431 ops/s
Iteration  28: 318398.583 ops/s
Iteration  29: 318541.307 ops/s
Iteration  30: 318025.430 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectTarget":
  318107.941 ±(99.9%) 340.162 ops/s [Average]
  (min, avg, max) = (316961.358, 318107.941, 318971.529), stdev = 509.139
  CI (99.9%): [317767.778, 318448.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_collectTarget  thrpt   30  318107.941 ± 340.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 991520.358 ops/s
# Warmup Iteration   2: 2093260.458 ops/s
# Warmup Iteration   3: 2305204.223 ops/s
# Warmup Iteration   4: 2313319.073 ops/s
# Warmup Iteration   5: 1892760.919 ops/s
# Warmup Iteration   6: 2314964.204 ops/s
# Warmup Iteration   7: 2323758.134 ops/s
# Warmup Iteration   8: 2321779.605 ops/s
# Warmup Iteration   9: 2315913.285 ops/s
# Warmup Iteration  10: 2322290.914 ops/s
# Warmup Iteration  11: 2318616.600 ops/s
# Warmup Iteration  12: 2321221.271 ops/s
# Warmup Iteration  13: 2321947.203 ops/s
# Warmup Iteration  14: 2322355.839 ops/s
# Warmup Iteration  15: 2318969.159 ops/s
# Warmup Iteration  16: 2312158.762 ops/s
# Warmup Iteration  17: 2323007.182 ops/s
# Warmup Iteration  18: 2316448.146 ops/s
# Warmup Iteration  19: 2319697.504 ops/s
# Warmup Iteration  20: 2325651.204 ops/s
# Warmup Iteration  21: 2318259.033 ops/s
# Warmup Iteration  22: 2320858.485 ops/s
# Warmup Iteration  23: 2318712.020 ops/s
# Warmup Iteration  24: 2319604.848 ops/s
# Warmup Iteration  25: 2319053.541 ops/s
# Warmup Iteration  26: 2313774.027 ops/s
# Warmup Iteration  27: 2319482.720 ops/s
# Warmup Iteration  28: 2320374.209 ops/s
# Warmup Iteration  29: 2320438.247 ops/s
# Warmup Iteration  30: 2321551.003 ops/s
Iteration   1: 2320074.208 ops/s
Iteration   2: 2317072.666 ops/s
Iteration   3: 2321383.548 ops/s
Iteration   4: 2319134.723 ops/s
Iteration   5: 2322153.104 ops/s
Iteration   6: 2324355.812 ops/s
Iteration   7: 2319433.090 ops/s
Iteration   8: 2321721.143 ops/s
Iteration   9: 2323927.723 ops/s
Iteration  10: 2320986.451 ops/s
Iteration  11: 2316827.127 ops/s
Iteration  12: 2327089.825 ops/s
Iteration  13: 2323117.837 ops/s
Iteration  14: 2317560.514 ops/s
Iteration  15: 2325134.380 ops/s
Iteration  16: 2321778.103 ops/s
Iteration  17: 2320649.351 ops/s
Iteration  18: 2317523.477 ops/s
Iteration  19: 2324697.638 ops/s
Iteration  20: 2313925.023 ops/s
Iteration  21: 2324582.143 ops/s
Iteration  22: 2321686.731 ops/s
Iteration  23: 2320443.339 ops/s
Iteration  24: 2318338.603 ops/s
Iteration  25: 2318404.118 ops/s
Iteration  26: 2322126.445 ops/s
Iteration  27: 2311579.063 ops/s
Iteration  28: 2313685.029 ops/s
Iteration  29: 2314284.026 ops/s
Iteration  30: 2321006.017 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith":
  2320156.042 ±(99.9%) 2491.209 ops/s [Average]
  (min, avg, max) = (2311579.063, 2320156.042, 2327089.825), stdev = 3728.724
  CI (99.9%): [2317664.833, 2322647.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectWith  thrpt   30  2320156.042 ± 2491.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2795411.415 ops/s
# Warmup Iteration   2: 6458832.942 ops/s
# Warmup Iteration   3: 5478111.650 ops/s
# Warmup Iteration   4: 6524227.790 ops/s
# Warmup Iteration   5: 6532025.552 ops/s
# Warmup Iteration   6: 6529559.792 ops/s
# Warmup Iteration   7: 6530399.093 ops/s
# Warmup Iteration   8: 6540423.910 ops/s
# Warmup Iteration   9: 6552388.518 ops/s
# Warmup Iteration  10: 6540383.234 ops/s
# Warmup Iteration  11: 6540026.216 ops/s
# Warmup Iteration  12: 6541344.725 ops/s
# Warmup Iteration  13: 6536716.840 ops/s
# Warmup Iteration  14: 6537298.570 ops/s
# Warmup Iteration  15: 6527794.522 ops/s
# Warmup Iteration  16: 6532535.579 ops/s
# Warmup Iteration  17: 6534438.119 ops/s
# Warmup Iteration  18: 6537291.375 ops/s
# Warmup Iteration  19: 6515620.296 ops/s
# Warmup Iteration  20: 6523962.988 ops/s
# Warmup Iteration  21: 6533243.441 ops/s
# Warmup Iteration  22: 6538085.536 ops/s
# Warmup Iteration  23: 6525941.327 ops/s
# Warmup Iteration  24: 6526472.871 ops/s
# Warmup Iteration  25: 6526248.632 ops/s
# Warmup Iteration  26: 6539146.474 ops/s
# Warmup Iteration  27: 6545679.522 ops/s
# Warmup Iteration  28: 6537659.134 ops/s
# Warmup Iteration  29: 6536468.723 ops/s
# Warmup Iteration  30: 6533324.193 ops/s
Iteration   1: 6549838.451 ops/s
Iteration   2: 6548185.195 ops/s
Iteration   3: 6557204.709 ops/s
Iteration   4: 6534955.918 ops/s
Iteration   5: 6550368.357 ops/s
Iteration   6: 6552902.880 ops/s
Iteration   7: 6529712.245 ops/s
Iteration   8: 6546608.565 ops/s
Iteration   9: 6550960.684 ops/s
Iteration  10: 6537970.548 ops/s
Iteration  11: 6535860.793 ops/s
Iteration  12: 6550731.301 ops/s
Iteration  13: 6527770.957 ops/s
Iteration  14: 6537641.267 ops/s
Iteration  15: 6540773.148 ops/s
Iteration  16: 6521811.061 ops/s
Iteration  17: 6554465.375 ops/s
Iteration  18: 6534348.252 ops/s
Iteration  19: 6519441.844 ops/s
Iteration  20: 6523096.599 ops/s
Iteration  21: 6555583.568 ops/s
Iteration  22: 6530288.024 ops/s
Iteration  23: 6546842.361 ops/s
Iteration  24: 6548476.795 ops/s
Iteration  25: 6539303.272 ops/s
Iteration  26: 6548776.437 ops/s
Iteration  27: 6526924.383 ops/s
Iteration  28: 6536547.795 ops/s
Iteration  29: 6526818.156 ops/s
Iteration  30: 6542996.027 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndex":
  6540240.166 ±(99.9%) 7338.381 ops/s [Average]
  (min, avg, max) = (6519441.844, 6540240.166, 6557204.709), stdev = 10983.745
  CI (99.9%): [6532901.784, 6547578.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  6540240.166 ± 7338.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611828.965 ops/s
# Warmup Iteration   2: 1664357.866 ops/s
# Warmup Iteration   3: 1681000.678 ops/s
# Warmup Iteration   4: 1405967.603 ops/s
# Warmup Iteration   5: 1689900.492 ops/s
# Warmup Iteration   6: 1685702.934 ops/s
# Warmup Iteration   7: 1688937.549 ops/s
# Warmup Iteration   8: 1689096.922 ops/s
# Warmup Iteration   9: 1684649.394 ops/s
# Warmup Iteration  10: 1688302.814 ops/s
# Warmup Iteration  11: 1690244.981 ops/s
# Warmup Iteration  12: 1689432.642 ops/s
# Warmup Iteration  13: 1685185.093 ops/s
# Warmup Iteration  14: 1686934.437 ops/s
# Warmup Iteration  15: 1689184.213 ops/s
# Warmup Iteration  16: 1684232.411 ops/s
# Warmup Iteration  17: 1683593.947 ops/s
# Warmup Iteration  18: 1684877.464 ops/s
# Warmup Iteration  19: 1686634.996 ops/s
# Warmup Iteration  20: 1685570.852 ops/s
# Warmup Iteration  21: 1687188.869 ops/s
# Warmup Iteration  22: 1687599.486 ops/s
# Warmup Iteration  23: 1683539.764 ops/s
# Warmup Iteration  24: 1685904.392 ops/s
# Warmup Iteration  25: 1684374.559 ops/s
# Warmup Iteration  26: 1688796.237 ops/s
# Warmup Iteration  27: 1681233.661 ops/s
# Warmup Iteration  28: 1684484.853 ops/s
# Warmup Iteration  29: 1686545.097 ops/s
# Warmup Iteration  30: 1688447.948 ops/s
Iteration   1: 1687187.254 ops/s
Iteration   2: 1687287.749 ops/s
Iteration   3: 1685991.379 ops/s
Iteration   4: 1684935.603 ops/s
Iteration   5: 1677801.129 ops/s
Iteration   6: 1687057.204 ops/s
Iteration   7: 1686881.877 ops/s
Iteration   8: 1692341.925 ops/s
Iteration   9: 1690029.758 ops/s
Iteration  10: 1689464.572 ops/s
Iteration  11: 1686811.691 ops/s
Iteration  12: 1690074.466 ops/s
Iteration  13: 1688297.940 ops/s
Iteration  14: 1678425.869 ops/s
Iteration  15: 1685980.091 ops/s
Iteration  16: 1688706.621 ops/s
Iteration  17: 1685005.360 ops/s
Iteration  18: 1688465.282 ops/s
Iteration  19: 1683035.823 ops/s
Iteration  20: 1690214.583 ops/s
Iteration  21: 1687100.184 ops/s
Iteration  22: 1686606.187 ops/s
Iteration  23: 1685624.490 ops/s
Iteration  24: 1686226.542 ops/s
Iteration  25: 1687107.762 ops/s
Iteration  26: 1684768.000 ops/s
Iteration  27: 1684270.091 ops/s
Iteration  28: 1685772.627 ops/s
Iteration  29: 1687965.664 ops/s
Iteration  30: 1686603.730 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1686534.715 ±(99.9%) 2022.839 ops/s [Average]
  (min, avg, max) = (1677801.129, 1686534.715, 1692341.925), stdev = 3027.691
  CI (99.9%): [1684511.876, 1688557.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1686534.715 ± 2022.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143026.806 ops/s
# Warmup Iteration   2: 274885.256 ops/s
# Warmup Iteration   3: 324025.571 ops/s
# Warmup Iteration   4: 324754.039 ops/s
# Warmup Iteration   5: 325144.549 ops/s
# Warmup Iteration   6: 267877.825 ops/s
# Warmup Iteration   7: 324556.458 ops/s
# Warmup Iteration   8: 325587.853 ops/s
# Warmup Iteration   9: 325754.951 ops/s
# Warmup Iteration  10: 325831.742 ops/s
# Warmup Iteration  11: 325347.730 ops/s
# Warmup Iteration  12: 325045.875 ops/s
# Warmup Iteration  13: 325286.086 ops/s
# Warmup Iteration  14: 324972.401 ops/s
# Warmup Iteration  15: 325953.287 ops/s
# Warmup Iteration  16: 325479.654 ops/s
# Warmup Iteration  17: 325644.539 ops/s
# Warmup Iteration  18: 325552.031 ops/s
# Warmup Iteration  19: 325670.849 ops/s
# Warmup Iteration  20: 324989.228 ops/s
# Warmup Iteration  21: 326312.808 ops/s
# Warmup Iteration  22: 325084.586 ops/s
# Warmup Iteration  23: 325976.640 ops/s
# Warmup Iteration  24: 325151.311 ops/s
# Warmup Iteration  25: 325621.727 ops/s
# Warmup Iteration  26: 325790.371 ops/s
# Warmup Iteration  27: 325645.833 ops/s
# Warmup Iteration  28: 325504.082 ops/s
# Warmup Iteration  29: 325370.574 ops/s
# Warmup Iteration  30: 325272.638 ops/s
Iteration   1: 327219.559 ops/s
Iteration   2: 326184.954 ops/s
Iteration   3: 325477.263 ops/s
Iteration   4: 326170.226 ops/s
Iteration   5: 325144.491 ops/s
Iteration   6: 326346.827 ops/s
Iteration   7: 325534.771 ops/s
Iteration   8: 325376.984 ops/s
Iteration   9: 325528.603 ops/s
Iteration  10: 325694.282 ops/s
Iteration  11: 326359.580 ops/s
Iteration  12: 324850.108 ops/s
Iteration  13: 326294.635 ops/s
Iteration  14: 324614.955 ops/s
Iteration  15: 325596.628 ops/s
Iteration  16: 326272.329 ops/s
Iteration  17: 325435.766 ops/s
Iteration  18: 326286.866 ops/s
Iteration  19: 325531.459 ops/s
Iteration  20: 325197.520 ops/s
Iteration  21: 326108.141 ops/s
Iteration  22: 324710.026 ops/s
Iteration  23: 325949.832 ops/s
Iteration  24: 325884.621 ops/s
Iteration  25: 325030.960 ops/s
Iteration  26: 325428.317 ops/s
Iteration  27: 325360.954 ops/s
Iteration  28: 325538.846 ops/s
Iteration  29: 325966.994 ops/s
Iteration  30: 325417.746 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_collectWith_target":
  325683.808 ±(99.9%) 381.856 ops/s [Average]
  (min, avg, max) = (324614.955, 325683.808, 327219.559), stdev = 571.543
  CI (99.9%): [325301.952, 326065.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_collectWith_target  thrpt   30  325683.808 ± 381.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5722677.322 ops/s
# Warmup Iteration   2: 12245561.435 ops/s
# Warmup Iteration   3: 12397383.149 ops/s
# Warmup Iteration   4: 10299196.364 ops/s
# Warmup Iteration   5: 12185588.475 ops/s
# Warmup Iteration   6: 12178539.684 ops/s
# Warmup Iteration   7: 12207941.543 ops/s
# Warmup Iteration   8: 12188973.146 ops/s
# Warmup Iteration   9: 12213885.808 ops/s
# Warmup Iteration  10: 12213150.378 ops/s
# Warmup Iteration  11: 12206064.427 ops/s
# Warmup Iteration  12: 12218408.951 ops/s
# Warmup Iteration  13: 12193178.734 ops/s
# Warmup Iteration  14: 12207691.967 ops/s
# Warmup Iteration  15: 12216289.681 ops/s
# Warmup Iteration  16: 12211276.265 ops/s
# Warmup Iteration  17: 12371959.215 ops/s
# Warmup Iteration  18: 12385312.908 ops/s
# Warmup Iteration  19: 12369965.260 ops/s
# Warmup Iteration  20: 12394424.841 ops/s
# Warmup Iteration  21: 12343692.678 ops/s
# Warmup Iteration  22: 12340147.035 ops/s
# Warmup Iteration  23: 12328944.347 ops/s
# Warmup Iteration  24: 12375162.197 ops/s
# Warmup Iteration  25: 12366584.768 ops/s
# Warmup Iteration  26: 12359875.991 ops/s
# Warmup Iteration  27: 12352932.782 ops/s
# Warmup Iteration  28: 12354468.615 ops/s
# Warmup Iteration  29: 12383144.623 ops/s
# Warmup Iteration  30: 12365792.187 ops/s
Iteration   1: 12367883.554 ops/s
Iteration   2: 12370861.727 ops/s
Iteration   3: 12431515.455 ops/s
Iteration   4: 12417843.736 ops/s
Iteration   5: 12403194.716 ops/s
Iteration   6: 12363541.543 ops/s
Iteration   7: 12388493.361 ops/s
Iteration   8: 12362114.600 ops/s
Iteration   9: 12416609.111 ops/s
Iteration  10: 12413324.996 ops/s
Iteration  11: 12403879.564 ops/s
Iteration  12: 12389429.092 ops/s
Iteration  13: 12402704.016 ops/s
Iteration  14: 12402999.455 ops/s
Iteration  15: 12322567.953 ops/s
Iteration  16: 12268186.016 ops/s
Iteration  17: 12339971.248 ops/s
Iteration  18: 12340444.971 ops/s
Iteration  19: 12382399.879 ops/s
Iteration  20: 12369039.391 ops/s
Iteration  21: 12378233.933 ops/s
Iteration  22: 12401782.130 ops/s
Iteration  23: 12353608.945 ops/s
Iteration  24: 12383377.929 ops/s
Iteration  25: 12417262.181 ops/s
Iteration  26: 12420716.688 ops/s
Iteration  27: 12418490.633 ops/s
Iteration  28: 12404854.403 ops/s
Iteration  29: 12404947.451 ops/s
Iteration  30: 12393582.139 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_contains":
  12384462.027 ±(99.9%) 23311.699 ops/s [Average]
  (min, avg, max) = (12268186.016, 12384462.027, 12431515.455), stdev = 34891.856
  CI (99.9%): [12361150.328, 12407773.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_contains  thrpt   30  12384462.027 ± 23311.699  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5023911.346 ops/s
# Warmup Iteration   2: 10495361.957 ops/s
# Warmup Iteration   3: 10630656.473 ops/s
# Warmup Iteration   4: 8889542.206 ops/s
# Warmup Iteration   5: 10512349.621 ops/s
# Warmup Iteration   6: 10508827.580 ops/s
# Warmup Iteration   7: 10514102.145 ops/s
# Warmup Iteration   8: 10524982.710 ops/s
# Warmup Iteration   9: 10537613.050 ops/s
# Warmup Iteration  10: 10519572.314 ops/s
# Warmup Iteration  11: 10501553.999 ops/s
# Warmup Iteration  12: 10523135.880 ops/s
# Warmup Iteration  13: 10490988.273 ops/s
# Warmup Iteration  14: 10533297.361 ops/s
# Warmup Iteration  15: 10531860.705 ops/s
# Warmup Iteration  16: 10507070.272 ops/s
# Warmup Iteration  17: 10621326.166 ops/s
# Warmup Iteration  18: 10642621.725 ops/s
# Warmup Iteration  19: 10629618.983 ops/s
# Warmup Iteration  20: 10597014.000 ops/s
# Warmup Iteration  21: 10622458.980 ops/s
# Warmup Iteration  22: 10636773.327 ops/s
# Warmup Iteration  23: 10609328.857 ops/s
# Warmup Iteration  24: 10627516.057 ops/s
# Warmup Iteration  25: 10608663.307 ops/s
# Warmup Iteration  26: 10621195.548 ops/s
# Warmup Iteration  27: 10602771.543 ops/s
# Warmup Iteration  28: 10632440.140 ops/s
# Warmup Iteration  29: 10617587.885 ops/s
# Warmup Iteration  30: 10621225.175 ops/s
Iteration   1: 10635648.233 ops/s
Iteration   2: 10633393.513 ops/s
Iteration   3: 10633850.195 ops/s
Iteration   4: 10600797.989 ops/s
Iteration   5: 10629290.259 ops/s
Iteration   6: 10636673.942 ops/s
Iteration   7: 10633334.372 ops/s
Iteration   8: 10614556.680 ops/s
Iteration   9: 10625737.153 ops/s
Iteration  10: 10658257.520 ops/s
Iteration  11: 10598204.821 ops/s
Iteration  12: 10642328.004 ops/s
Iteration  13: 10620682.702 ops/s
Iteration  14: 10627690.238 ops/s
Iteration  15: 10646085.249 ops/s
Iteration  16: 10627638.241 ops/s
Iteration  17: 10602932.334 ops/s
Iteration  18: 10637047.684 ops/s
Iteration  19: 10617258.685 ops/s
Iteration  20: 10605002.661 ops/s
Iteration  21: 10668883.586 ops/s
Iteration  22: 10644634.060 ops/s
Iteration  23: 10615012.395 ops/s
Iteration  24: 10646018.821 ops/s
Iteration  25: 10627332.091 ops/s
Iteration  26: 10647050.535 ops/s
Iteration  27: 10625521.167 ops/s
Iteration  28: 10662989.551 ops/s
Iteration  29: 10638756.048 ops/s
Iteration  30: 10625818.206 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllArray":
  10630947.565 ±(99.9%) 11633.064 ops/s [Average]
  (min, avg, max) = (10598204.821, 10630947.565, 10668883.586), stdev = 17411.824
  CI (99.9%): [10619314.501, 10642580.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_containsAllArray  thrpt   30  10630947.565 ± 11633.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2333338.436 ops/s
# Warmup Iteration   2: 4192109.671 ops/s
# Warmup Iteration   3: 4556922.529 ops/s
# Warmup Iteration   4: 4561044.206 ops/s
# Warmup Iteration   5: 4349460.807 ops/s
# Warmup Iteration   6: 4037307.176 ops/s
# Warmup Iteration   7: 4581292.876 ops/s
# Warmup Iteration   8: 4584495.068 ops/s
# Warmup Iteration   9: 4580185.219 ops/s
# Warmup Iteration  10: 4584219.982 ops/s
# Warmup Iteration  11: 4578723.616 ops/s
# Warmup Iteration  12: 4567483.472 ops/s
# Warmup Iteration  13: 4579534.093 ops/s
# Warmup Iteration  14: 4591687.760 ops/s
# Warmup Iteration  15: 4582927.889 ops/s
# Warmup Iteration  16: 4573484.030 ops/s
# Warmup Iteration  17: 4581243.114 ops/s
# Warmup Iteration  18: 4587182.464 ops/s
# Warmup Iteration  19: 4583905.558 ops/s
# Warmup Iteration  20: 4586211.221 ops/s
# Warmup Iteration  21: 4568028.325 ops/s
# Warmup Iteration  22: 4573683.624 ops/s
# Warmup Iteration  23: 4581496.089 ops/s
# Warmup Iteration  24: 4577008.433 ops/s
# Warmup Iteration  25: 4589210.802 ops/s
# Warmup Iteration  26: 4561755.001 ops/s
# Warmup Iteration  27: 4573960.153 ops/s
# Warmup Iteration  28: 4586463.859 ops/s
# Warmup Iteration  29: 4583074.368 ops/s
# Warmup Iteration  30: 4575813.233 ops/s
Iteration   1: 4570948.647 ops/s
Iteration   2: 4571065.995 ops/s
Iteration   3: 4589050.784 ops/s
Iteration   4: 4567671.670 ops/s
Iteration   5: 4588638.070 ops/s
Iteration   6: 4578568.054 ops/s
Iteration   7: 4567289.884 ops/s
Iteration   8: 4590888.892 ops/s
Iteration   9: 4587737.281 ops/s
Iteration  10: 4579424.532 ops/s
Iteration  11: 4579695.746 ops/s
Iteration  12: 4568421.755 ops/s
Iteration  13: 4581490.945 ops/s
Iteration  14: 4582233.364 ops/s
Iteration  15: 4589887.729 ops/s
Iteration  16: 4586968.425 ops/s
Iteration  17: 4577762.175 ops/s
Iteration  18: 4581085.846 ops/s
Iteration  19: 4581840.374 ops/s
Iteration  20: 4588520.192 ops/s
Iteration  21: 4578193.954 ops/s
Iteration  22: 4578481.565 ops/s
Iteration  23: 4591575.942 ops/s
Iteration  24: 4587581.751 ops/s
Iteration  25: 4591730.779 ops/s
Iteration  26: 4577211.424 ops/s
Iteration  27: 4581988.498 ops/s
Iteration  28: 4592923.037 ops/s
Iteration  29: 4584345.429 ops/s
Iteration  30: 4582185.619 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllCollection":
  4581846.945 ±(99.9%) 4989.224 ops/s [Average]
  (min, avg, max) = (4567289.884, 4581846.945, 4592923.037), stdev = 7467.635
  CI (99.9%): [4576857.722, 4586836.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4581846.945 ± 4989.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4480593.533 ops/s
# Warmup Iteration   2: 9564224.147 ops/s
# Warmup Iteration   3: 9035986.536 ops/s
# Warmup Iteration   4: 8924313.888 ops/s
# Warmup Iteration   5: 9759973.220 ops/s
# Warmup Iteration   6: 9708735.938 ops/s
# Warmup Iteration   7: 9753533.250 ops/s
# Warmup Iteration   8: 9758217.666 ops/s
# Warmup Iteration   9: 9731332.913 ops/s
# Warmup Iteration  10: 9735694.044 ops/s
# Warmup Iteration  11: 9776879.420 ops/s
# Warmup Iteration  12: 9745890.302 ops/s
# Warmup Iteration  13: 9748697.429 ops/s
# Warmup Iteration  14: 9734859.854 ops/s
# Warmup Iteration  15: 9742802.241 ops/s
# Warmup Iteration  16: 9742207.459 ops/s
# Warmup Iteration  17: 9737386.566 ops/s
# Warmup Iteration  18: 9749282.934 ops/s
# Warmup Iteration  19: 9761167.154 ops/s
# Warmup Iteration  20: 9744536.656 ops/s
# Warmup Iteration  21: 9745268.840 ops/s
# Warmup Iteration  22: 9742963.149 ops/s
# Warmup Iteration  23: 9749514.377 ops/s
# Warmup Iteration  24: 9743331.189 ops/s
# Warmup Iteration  25: 9764383.354 ops/s
# Warmup Iteration  26: 9703216.860 ops/s
# Warmup Iteration  27: 9751138.994 ops/s
# Warmup Iteration  28: 9758384.373 ops/s
# Warmup Iteration  29: 9741558.302 ops/s
# Warmup Iteration  30: 9729855.295 ops/s
Iteration   1: 9635279.605 ops/s
Iteration   2: 9734569.460 ops/s
Iteration   3: 9757832.813 ops/s
Iteration   4: 9727701.272 ops/s
Iteration   5: 9711732.877 ops/s
Iteration   6: 9770361.328 ops/s
Iteration   7: 9718807.841 ops/s
Iteration   8: 9737364.769 ops/s
Iteration   9: 9749257.390 ops/s
Iteration  10: 9762567.594 ops/s
Iteration  11: 9741555.180 ops/s
Iteration  12: 9729990.276 ops/s
Iteration  13: 9743679.482 ops/s
Iteration  14: 9764058.706 ops/s
Iteration  15: 9726997.785 ops/s
Iteration  16: 9750311.388 ops/s
Iteration  17: 9734374.409 ops/s
Iteration  18: 9740528.546 ops/s
Iteration  19: 9746878.381 ops/s
Iteration  20: 9728324.668 ops/s
Iteration  21: 9734817.469 ops/s
Iteration  22: 9777692.853 ops/s
Iteration  23: 9751812.031 ops/s
Iteration  24: 9742999.500 ops/s
Iteration  25: 9745037.136 ops/s
Iteration  26: 9730166.369 ops/s
Iteration  27: 9740417.580 ops/s
Iteration  28: 9765772.047 ops/s
Iteration  29: 9744220.708 ops/s
Iteration  30: 9704292.666 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAllIterable":
  9738313.404 ±(99.9%) 17107.083 ops/s [Average]
  (min, avg, max) = (9635279.605, 9738313.404, 9777692.853), stdev = 25605.079
  CI (99.9%): [9721206.321, 9755420.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  9738313.404 ± 17107.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95862.294 ops/s
# Warmup Iteration   2: 136658.048 ops/s
# Warmup Iteration   3: 164204.081 ops/s
# Warmup Iteration   4: 163369.136 ops/s
# Warmup Iteration   5: 164375.682 ops/s
# Warmup Iteration   6: 163742.356 ops/s
# Warmup Iteration   7: 155660.776 ops/s
# Warmup Iteration   8: 147070.291 ops/s
# Warmup Iteration   9: 164168.687 ops/s
# Warmup Iteration  10: 164348.289 ops/s
# Warmup Iteration  11: 164110.472 ops/s
# Warmup Iteration  12: 163794.445 ops/s
# Warmup Iteration  13: 164141.782 ops/s
# Warmup Iteration  14: 164292.925 ops/s
# Warmup Iteration  15: 164180.406 ops/s
# Warmup Iteration  16: 163461.599 ops/s
# Warmup Iteration  17: 164219.836 ops/s
# Warmup Iteration  18: 164495.197 ops/s
# Warmup Iteration  19: 164022.919 ops/s
# Warmup Iteration  20: 164032.804 ops/s
# Warmup Iteration  21: 163765.859 ops/s
# Warmup Iteration  22: 164076.308 ops/s
# Warmup Iteration  23: 164440.985 ops/s
# Warmup Iteration  24: 163971.083 ops/s
# Warmup Iteration  25: 163730.788 ops/s
# Warmup Iteration  26: 164243.660 ops/s
# Warmup Iteration  27: 164087.325 ops/s
# Warmup Iteration  28: 164073.159 ops/s
# Warmup Iteration  29: 164308.878 ops/s
# Warmup Iteration  30: 164429.306 ops/s
Iteration   1: 164664.857 ops/s
Iteration   2: 164078.054 ops/s
Iteration   3: 163536.188 ops/s
Iteration   4: 164230.013 ops/s
Iteration   5: 163860.915 ops/s
Iteration   6: 164130.670 ops/s
Iteration   7: 164059.095 ops/s
Iteration   8: 163550.219 ops/s
Iteration   9: 163495.435 ops/s
Iteration  10: 164617.949 ops/s
Iteration  11: 164486.479 ops/s
Iteration  12: 164514.910 ops/s
Iteration  13: 163982.632 ops/s
Iteration  14: 164378.090 ops/s
Iteration  15: 164173.365 ops/s
Iteration  16: 163633.667 ops/s
Iteration  17: 164196.163 ops/s
Iteration  18: 164075.470 ops/s
Iteration  19: 164215.802 ops/s
Iteration  20: 163896.279 ops/s
Iteration  21: 164469.327 ops/s
Iteration  22: 164459.874 ops/s
Iteration  23: 164116.855 ops/s
Iteration  24: 163891.310 ops/s
Iteration  25: 163412.832 ops/s
Iteration  26: 164300.202 ops/s
Iteration  27: 163649.508 ops/s
Iteration  28: 164194.922 ops/s
Iteration  29: 164443.311 ops/s
Iteration  30: 164029.716 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyCollection":
  164091.470 ±(99.9%) 232.270 ops/s [Average]
  (min, avg, max) = (163412.832, 164091.470, 164664.857), stdev = 347.651
  CI (99.9%): [163859.200, 164323.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  164091.470 ± 232.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 82128.290 ops/s
# Warmup Iteration   2: 103754.311 ops/s
# Warmup Iteration   3: 130650.032 ops/s
# Warmup Iteration   4: 129963.224 ops/s
# Warmup Iteration   5: 130890.755 ops/s
# Warmup Iteration   6: 130901.914 ops/s
# Warmup Iteration   7: 130905.346 ops/s
# Warmup Iteration   8: 130749.481 ops/s
# Warmup Iteration   9: 109774.091 ops/s
# Warmup Iteration  10: 130770.020 ops/s
# Warmup Iteration  11: 131125.478 ops/s
# Warmup Iteration  12: 131086.038 ops/s
# Warmup Iteration  13: 131242.985 ops/s
# Warmup Iteration  14: 130826.927 ops/s
# Warmup Iteration  15: 131004.024 ops/s
# Warmup Iteration  16: 131176.164 ops/s
# Warmup Iteration  17: 129809.307 ops/s
# Warmup Iteration  18: 129930.920 ops/s
# Warmup Iteration  19: 130003.529 ops/s
# Warmup Iteration  20: 129984.465 ops/s
# Warmup Iteration  21: 130013.942 ops/s
# Warmup Iteration  22: 129673.485 ops/s
# Warmup Iteration  23: 129876.385 ops/s
# Warmup Iteration  24: 129575.735 ops/s
# Warmup Iteration  25: 129893.813 ops/s
# Warmup Iteration  26: 129773.295 ops/s
# Warmup Iteration  27: 129625.826 ops/s
# Warmup Iteration  28: 130084.122 ops/s
# Warmup Iteration  29: 129640.882 ops/s
# Warmup Iteration  30: 129773.135 ops/s
Iteration   1: 129869.253 ops/s
Iteration   2: 129796.999 ops/s
Iteration   3: 129349.924 ops/s
Iteration   4: 129810.164 ops/s
Iteration   5: 130208.016 ops/s
Iteration   6: 129771.673 ops/s
Iteration   7: 129784.715 ops/s
Iteration   8: 130139.919 ops/s
Iteration   9: 129986.142 ops/s
Iteration  10: 129580.474 ops/s
Iteration  11: 129860.769 ops/s
Iteration  12: 129515.178 ops/s
Iteration  13: 130091.683 ops/s
Iteration  14: 130326.872 ops/s
Iteration  15: 129807.499 ops/s
Iteration  16: 129932.045 ops/s
Iteration  17: 130135.930 ops/s
Iteration  18: 130104.052 ops/s
Iteration  19: 129839.774 ops/s
Iteration  20: 130372.959 ops/s
Iteration  21: 130022.043 ops/s
Iteration  22: 129984.961 ops/s
Iteration  23: 129982.346 ops/s
Iteration  24: 130167.190 ops/s
Iteration  25: 130307.874 ops/s
Iteration  26: 130382.219 ops/s
Iteration  27: 130069.409 ops/s
Iteration  28: 130128.095 ops/s
Iteration  29: 130191.217 ops/s
Iteration  30: 129744.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsAnyIterable":
  129975.464 ±(99.9%) 168.051 ops/s [Average]
  (min, avg, max) = (129349.924, 129975.464, 130382.219), stdev = 251.530
  CI (99.9%): [129807.413, 130143.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  129975.464 ± 168.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651245.428 ops/s
# Warmup Iteration   2: 698432.474 ops/s
# Warmup Iteration   3: 850358.676 ops/s
# Warmup Iteration   4: 908679.366 ops/s
# Warmup Iteration   5: 912446.260 ops/s
# Warmup Iteration   6: 908575.365 ops/s
# Warmup Iteration   7: 909759.866 ops/s
# Warmup Iteration   8: 907951.940 ops/s
# Warmup Iteration   9: 908868.659 ops/s
# Warmup Iteration  10: 907578.493 ops/s
# Warmup Iteration  11: 904178.427 ops/s
# Warmup Iteration  12: 905985.544 ops/s
# Warmup Iteration  13: 793465.623 ops/s
# Warmup Iteration  14: 871557.849 ops/s
# Warmup Iteration  15: 905445.504 ops/s
# Warmup Iteration  16: 902852.004 ops/s
# Warmup Iteration  17: 963450.417 ops/s
# Warmup Iteration  18: 964790.998 ops/s
# Warmup Iteration  19: 967246.438 ops/s
# Warmup Iteration  20: 964015.873 ops/s
# Warmup Iteration  21: 963462.233 ops/s
# Warmup Iteration  22: 959807.322 ops/s
# Warmup Iteration  23: 959564.982 ops/s
# Warmup Iteration  24: 962434.937 ops/s
# Warmup Iteration  25: 965181.780 ops/s
# Warmup Iteration  26: 961676.841 ops/s
# Warmup Iteration  27: 963009.696 ops/s
# Warmup Iteration  28: 965412.172 ops/s
# Warmup Iteration  29: 961814.237 ops/s
# Warmup Iteration  30: 964547.806 ops/s
Iteration   1: 963079.022 ops/s
Iteration   2: 957300.589 ops/s
Iteration   3: 963269.334 ops/s
Iteration   4: 970075.944 ops/s
Iteration   5: 963193.694 ops/s
Iteration   6: 962238.793 ops/s
Iteration   7: 964037.038 ops/s
Iteration   8: 965356.234 ops/s
Iteration   9: 960056.989 ops/s
Iteration  10: 964125.845 ops/s
Iteration  11: 965082.733 ops/s
Iteration  12: 960686.691 ops/s
Iteration  13: 967517.748 ops/s
Iteration  14: 962530.178 ops/s
Iteration  15: 961141.231 ops/s
Iteration  16: 962949.382 ops/s
Iteration  17: 961739.423 ops/s
Iteration  18: 960309.967 ops/s
Iteration  19: 960460.770 ops/s
Iteration  20: 961879.046 ops/s
Iteration  21: 961327.618 ops/s
Iteration  22: 964520.853 ops/s
Iteration  23: 961112.274 ops/s
Iteration  24: 962220.051 ops/s
Iteration  25: 963722.105 ops/s
Iteration  26: 964284.197 ops/s
Iteration  27: 963809.653 ops/s
Iteration  28: 963972.982 ops/s
Iteration  29: 964765.359 ops/s
Iteration  30: 965125.686 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsBy":
  963063.048 ±(99.9%) 1620.855 ops/s [Average]
  (min, avg, max) = (957300.589, 963063.048, 970075.944), stdev = 2426.019
  CI (99.9%): [961442.193, 964683.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_containsBy  thrpt   30  963063.048 ± 1620.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95883.321 ops/s
# Warmup Iteration   2: 137142.643 ops/s
# Warmup Iteration   3: 162495.825 ops/s
# Warmup Iteration   4: 161345.345 ops/s
# Warmup Iteration   5: 162937.066 ops/s
# Warmup Iteration   6: 162335.832 ops/s
# Warmup Iteration   7: 155384.566 ops/s
# Warmup Iteration   8: 145659.553 ops/s
# Warmup Iteration   9: 162612.543 ops/s
# Warmup Iteration  10: 162411.670 ops/s
# Warmup Iteration  11: 162174.100 ops/s
# Warmup Iteration  12: 162866.388 ops/s
# Warmup Iteration  13: 162632.433 ops/s
# Warmup Iteration  14: 162236.788 ops/s
# Warmup Iteration  15: 162776.843 ops/s
# Warmup Iteration  16: 162518.662 ops/s
# Warmup Iteration  17: 162548.061 ops/s
# Warmup Iteration  18: 162858.688 ops/s
# Warmup Iteration  19: 163035.475 ops/s
# Warmup Iteration  20: 162491.673 ops/s
# Warmup Iteration  21: 162628.136 ops/s
# Warmup Iteration  22: 162400.889 ops/s
# Warmup Iteration  23: 162892.977 ops/s
# Warmup Iteration  24: 162962.828 ops/s
# Warmup Iteration  25: 162978.365 ops/s
# Warmup Iteration  26: 162423.201 ops/s
# Warmup Iteration  27: 162530.879 ops/s
# Warmup Iteration  28: 162812.759 ops/s
# Warmup Iteration  29: 162965.803 ops/s
# Warmup Iteration  30: 162816.506 ops/s
Iteration   1: 162727.460 ops/s
Iteration   2: 162830.442 ops/s
Iteration   3: 162770.114 ops/s
Iteration   4: 162036.016 ops/s
Iteration   5: 162042.342 ops/s
Iteration   6: 163028.083 ops/s
Iteration   7: 162757.081 ops/s
Iteration   8: 162397.761 ops/s
Iteration   9: 163058.941 ops/s
Iteration  10: 163173.066 ops/s
Iteration  11: 162785.904 ops/s
Iteration  12: 162999.232 ops/s
Iteration  13: 162382.586 ops/s
Iteration  14: 162980.482 ops/s
Iteration  15: 162782.607 ops/s
Iteration  16: 162991.079 ops/s
Iteration  17: 163105.322 ops/s
Iteration  18: 163008.423 ops/s
Iteration  19: 162617.401 ops/s
Iteration  20: 163349.630 ops/s
Iteration  21: 162729.564 ops/s
Iteration  22: 163350.166 ops/s
Iteration  23: 162026.147 ops/s
Iteration  24: 163128.690 ops/s
Iteration  25: 162850.701 ops/s
Iteration  26: 162822.849 ops/s
Iteration  27: 162984.813 ops/s
Iteration  28: 162731.154 ops/s
Iteration  29: 163168.363 ops/s
Iteration  30: 162807.799 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneCollection":
  162814.141 ±(99.9%) 233.051 ops/s [Average]
  (min, avg, max) = (162026.147, 162814.141, 163350.166), stdev = 348.819
  CI (99.9%): [162581.090, 163047.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  162814.141 ± 233.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81112.740 ops/s
# Warmup Iteration   2: 101985.007 ops/s
# Warmup Iteration   3: 128147.846 ops/s
# Warmup Iteration   4: 127979.396 ops/s
# Warmup Iteration   5: 128574.910 ops/s
# Warmup Iteration   6: 128774.046 ops/s
# Warmup Iteration   7: 128371.229 ops/s
# Warmup Iteration   8: 128408.759 ops/s
# Warmup Iteration   9: 108680.192 ops/s
# Warmup Iteration  10: 128541.506 ops/s
# Warmup Iteration  11: 128435.689 ops/s
# Warmup Iteration  12: 128345.911 ops/s
# Warmup Iteration  13: 128748.896 ops/s
# Warmup Iteration  14: 128453.284 ops/s
# Warmup Iteration  15: 128672.804 ops/s
# Warmup Iteration  16: 128608.717 ops/s
# Warmup Iteration  17: 128691.297 ops/s
# Warmup Iteration  18: 128414.347 ops/s
# Warmup Iteration  19: 128797.979 ops/s
# Warmup Iteration  20: 128483.148 ops/s
# Warmup Iteration  21: 128468.483 ops/s
# Warmup Iteration  22: 128415.114 ops/s
# Warmup Iteration  23: 128487.660 ops/s
# Warmup Iteration  24: 128571.826 ops/s
# Warmup Iteration  25: 128449.938 ops/s
# Warmup Iteration  26: 128288.968 ops/s
# Warmup Iteration  27: 128520.766 ops/s
# Warmup Iteration  28: 128454.838 ops/s
# Warmup Iteration  29: 128538.299 ops/s
# Warmup Iteration  30: 128063.396 ops/s
Iteration   1: 128493.321 ops/s
Iteration   2: 128417.241 ops/s
Iteration   3: 128261.399 ops/s
Iteration   4: 128656.125 ops/s
Iteration   5: 128695.655 ops/s
Iteration   6: 128404.095 ops/s
Iteration   7: 129044.484 ops/s
Iteration   8: 128609.734 ops/s
Iteration   9: 128184.976 ops/s
Iteration  10: 128789.716 ops/s
Iteration  11: 128735.325 ops/s
Iteration  12: 127951.950 ops/s
Iteration  13: 128687.588 ops/s
Iteration  14: 128655.263 ops/s
Iteration  15: 128290.869 ops/s
Iteration  16: 128754.008 ops/s
Iteration  17: 128579.559 ops/s
Iteration  18: 128267.315 ops/s
Iteration  19: 128784.848 ops/s
Iteration  20: 128480.230 ops/s
Iteration  21: 128203.321 ops/s
Iteration  22: 128615.159 ops/s
Iteration  23: 128539.303 ops/s
Iteration  24: 128376.732 ops/s
Iteration  25: 128462.418 ops/s
Iteration  26: 128155.829 ops/s
Iteration  27: 128455.859 ops/s
Iteration  28: 128642.065 ops/s
Iteration  29: 128760.623 ops/s
Iteration  30: 128590.224 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_containsNoneIterable":
  128518.175 ±(99.9%) 157.852 ops/s [Average]
  (min, avg, max) = (127951.950, 128518.175, 129044.484), stdev = 236.265
  CI (99.9%): [128360.323, 128676.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  128518.175 ± 157.852  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 326044.914 ops/s
# Warmup Iteration   2: 507977.069 ops/s
# Warmup Iteration   3: 598088.606 ops/s
# Warmup Iteration   4: 600718.715 ops/s
# Warmup Iteration   5: 599274.713 ops/s
# Warmup Iteration   6: 594116.149 ops/s
# Warmup Iteration   7: 503999.907 ops/s
# Warmup Iteration   8: 601447.793 ops/s
# Warmup Iteration   9: 602112.958 ops/s
# Warmup Iteration  10: 601062.931 ops/s
# Warmup Iteration  11: 600934.196 ops/s
# Warmup Iteration  12: 601542.038 ops/s
# Warmup Iteration  13: 601870.591 ops/s
# Warmup Iteration  14: 600895.985 ops/s
# Warmup Iteration  15: 601669.509 ops/s
# Warmup Iteration  16: 600338.443 ops/s
# Warmup Iteration  17: 609501.939 ops/s
# Warmup Iteration  18: 610871.463 ops/s
# Warmup Iteration  19: 609774.097 ops/s
# Warmup Iteration  20: 609440.537 ops/s
# Warmup Iteration  21: 609567.846 ops/s
# Warmup Iteration  22: 609407.724 ops/s
# Warmup Iteration  23: 609996.324 ops/s
# Warmup Iteration  24: 611198.392 ops/s
# Warmup Iteration  25: 610910.755 ops/s
# Warmup Iteration  26: 610480.986 ops/s
# Warmup Iteration  27: 610865.769 ops/s
# Warmup Iteration  28: 610595.457 ops/s
# Warmup Iteration  29: 609555.388 ops/s
# Warmup Iteration  30: 610106.663 ops/s
Iteration   1: 611827.622 ops/s
Iteration   2: 609584.921 ops/s
Iteration   3: 612209.045 ops/s
Iteration   4: 609879.712 ops/s
Iteration   5: 611205.829 ops/s
Iteration   6: 610182.250 ops/s
Iteration   7: 611815.955 ops/s
Iteration   8: 611182.068 ops/s
Iteration   9: 612855.929 ops/s
Iteration  10: 610004.199 ops/s
Iteration  11: 610828.091 ops/s
Iteration  12: 609836.359 ops/s
Iteration  13: 611065.591 ops/s
Iteration  14: 611602.369 ops/s
Iteration  15: 611895.077 ops/s
Iteration  16: 610451.954 ops/s
Iteration  17: 610507.431 ops/s
Iteration  18: 611482.101 ops/s
Iteration  19: 609850.983 ops/s
Iteration  20: 612110.111 ops/s
Iteration  21: 611138.653 ops/s
Iteration  22: 610293.199 ops/s
Iteration  23: 611567.264 ops/s
Iteration  24: 610514.720 ops/s
Iteration  25: 608228.181 ops/s
Iteration  26: 610442.864 ops/s
Iteration  27: 610567.874 ops/s
Iteration  28: 611456.576 ops/s
Iteration  29: 609742.697 ops/s
Iteration  30: 610652.242 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_corresponds":
  610832.729 ±(99.9%) 650.099 ops/s [Average]
  (min, avg, max) = (608228.181, 610832.729, 612855.929), stdev = 973.038
  CI (99.9%): [610182.630, 611482.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_corresponds  thrpt   30  610832.729 ± 650.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10341316.249 ops/s
# Warmup Iteration   2: 20780122.600 ops/s
# Warmup Iteration   3: 17866482.552 ops/s
# Warmup Iteration   4: 21074661.454 ops/s
# Warmup Iteration   5: 21003092.917 ops/s
# Warmup Iteration   6: 21012515.414 ops/s
# Warmup Iteration   7: 21002087.709 ops/s
# Warmup Iteration   8: 21063317.412 ops/s
# Warmup Iteration   9: 21013054.422 ops/s
# Warmup Iteration  10: 21057661.513 ops/s
# Warmup Iteration  11: 21081303.828 ops/s
# Warmup Iteration  12: 21016438.885 ops/s
# Warmup Iteration  13: 21065780.477 ops/s
# Warmup Iteration  14: 20994120.883 ops/s
# Warmup Iteration  15: 20977660.396 ops/s
# Warmup Iteration  16: 21060181.842 ops/s
# Warmup Iteration  17: 21013046.046 ops/s
# Warmup Iteration  18: 20944347.942 ops/s
# Warmup Iteration  19: 20984138.731 ops/s
# Warmup Iteration  20: 20993486.589 ops/s
# Warmup Iteration  21: 20924395.460 ops/s
# Warmup Iteration  22: 20990588.581 ops/s
# Warmup Iteration  23: 21011411.628 ops/s
# Warmup Iteration  24: 21015362.106 ops/s
# Warmup Iteration  25: 20953136.492 ops/s
# Warmup Iteration  26: 21019677.046 ops/s
# Warmup Iteration  27: 20994697.909 ops/s
# Warmup Iteration  28: 21039994.029 ops/s
# Warmup Iteration  29: 21017614.329 ops/s
# Warmup Iteration  30: 20995109.731 ops/s
Iteration   1: 21034253.344 ops/s
Iteration   2: 21011575.183 ops/s
Iteration   3: 20899267.490 ops/s
Iteration   4: 21017823.371 ops/s
Iteration   5: 21103354.574 ops/s
Iteration   6: 21022634.462 ops/s
Iteration   7: 20949213.884 ops/s
Iteration   8: 21008097.036 ops/s
Iteration   9: 21029712.218 ops/s
Iteration  10: 20906422.204 ops/s
Iteration  11: 21017013.915 ops/s
Iteration  12: 20973951.279 ops/s
Iteration  13: 20918986.181 ops/s
Iteration  14: 20965416.642 ops/s
Iteration  15: 20932128.017 ops/s
Iteration  16: 21013764.033 ops/s
Iteration  17: 20897134.307 ops/s
Iteration  18: 21017571.077 ops/s
Iteration  19: 21005509.392 ops/s
Iteration  20: 21028757.493 ops/s
Iteration  21: 21018559.648 ops/s
Iteration  22: 21004479.947 ops/s
Iteration  23: 21019485.767 ops/s
Iteration  24: 21050537.270 ops/s
Iteration  25: 21009409.982 ops/s
Iteration  26: 21086632.604 ops/s
Iteration  27: 20995820.020 ops/s
Iteration  28: 21000267.622 ops/s
Iteration  29: 21033848.987 ops/s
Iteration  30: 20900002.777 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_count":
  20995721.024 ±(99.9%) 35532.806 ops/s [Average]
  (min, avg, max) = (20897134.307, 20995721.024, 21103354.574), stdev = 53183.835
  CI (99.9%): [20960188.219, 21031253.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_count  thrpt   30  20995721.024 ± 35532.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1486856.483 ops/s
# Warmup Iteration   2: 2509557.430 ops/s
# Warmup Iteration   3: 2860574.952 ops/s
# Warmup Iteration   4: 2837310.946 ops/s
# Warmup Iteration   5: 2875780.257 ops/s
# Warmup Iteration   6: 2390324.057 ops/s
# Warmup Iteration   7: 2873821.731 ops/s
# Warmup Iteration   8: 2875141.254 ops/s
# Warmup Iteration   9: 2874725.143 ops/s
# Warmup Iteration  10: 2875131.225 ops/s
# Warmup Iteration  11: 2870739.374 ops/s
# Warmup Iteration  12: 2873095.862 ops/s
# Warmup Iteration  13: 2867669.468 ops/s
# Warmup Iteration  14: 2874883.722 ops/s
# Warmup Iteration  15: 2874763.417 ops/s
# Warmup Iteration  16: 2875778.639 ops/s
# Warmup Iteration  17: 2863655.631 ops/s
# Warmup Iteration  18: 2868013.527 ops/s
# Warmup Iteration  19: 2868394.398 ops/s
# Warmup Iteration  20: 2869679.283 ops/s
# Warmup Iteration  21: 2857965.321 ops/s
# Warmup Iteration  22: 2864478.230 ops/s
# Warmup Iteration  23: 2867213.224 ops/s
# Warmup Iteration  24: 2863040.150 ops/s
# Warmup Iteration  25: 2866721.473 ops/s
# Warmup Iteration  26: 2864320.668 ops/s
# Warmup Iteration  27: 2870487.845 ops/s
# Warmup Iteration  28: 2873250.231 ops/s
# Warmup Iteration  29: 2855574.557 ops/s
# Warmup Iteration  30: 2868895.707 ops/s
Iteration   1: 2861008.479 ops/s
Iteration   2: 2864332.824 ops/s
Iteration   3: 2868642.273 ops/s
Iteration   4: 2869640.369 ops/s
Iteration   5: 2871257.955 ops/s
Iteration   6: 2860513.920 ops/s
Iteration   7: 2869718.818 ops/s
Iteration   8: 2872680.226 ops/s
Iteration   9: 2872575.035 ops/s
Iteration  10: 2867050.201 ops/s
Iteration  11: 2863204.286 ops/s
Iteration  12: 2872405.243 ops/s
Iteration  13: 2865339.828 ops/s
Iteration  14: 2869784.282 ops/s
Iteration  15: 2864476.326 ops/s
Iteration  16: 2863251.063 ops/s
Iteration  17: 2868615.724 ops/s
Iteration  18: 2865982.528 ops/s
Iteration  19: 2871780.396 ops/s
Iteration  20: 2867178.116 ops/s
Iteration  21: 2871974.298 ops/s
Iteration  22: 2869897.548 ops/s
Iteration  23: 2856117.625 ops/s
Iteration  24: 2858860.310 ops/s
Iteration  25: 2872038.940 ops/s
Iteration  26: 2862718.190 ops/s
Iteration  27: 2872247.230 ops/s
Iteration  28: 2861803.360 ops/s
Iteration  29: 2867517.849 ops/s
Iteration  30: 2873764.335 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countBy":
  2867212.586 ±(99.9%) 3151.991 ops/s [Average]
  (min, avg, max) = (2856117.625, 2867212.586, 2873764.335), stdev = 4717.752
  CI (99.9%): [2864060.595, 2870364.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_countBy  thrpt   30  2867212.586 ± 3151.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236178.338 ops/s
# Warmup Iteration   2: 384110.589 ops/s
# Warmup Iteration   3: 456437.195 ops/s
# Warmup Iteration   4: 461843.205 ops/s
# Warmup Iteration   5: 462001.285 ops/s
# Warmup Iteration   6: 443927.503 ops/s
# Warmup Iteration   7: 400411.320 ops/s
# Warmup Iteration   8: 462254.360 ops/s
# Warmup Iteration   9: 463081.524 ops/s
# Warmup Iteration  10: 463511.187 ops/s
# Warmup Iteration  11: 463839.964 ops/s
# Warmup Iteration  12: 463311.894 ops/s
# Warmup Iteration  13: 462634.075 ops/s
# Warmup Iteration  14: 463243.643 ops/s
# Warmup Iteration  15: 462444.711 ops/s
# Warmup Iteration  16: 462942.670 ops/s
# Warmup Iteration  17: 466100.304 ops/s
# Warmup Iteration  18: 466515.200 ops/s
# Warmup Iteration  19: 464934.915 ops/s
# Warmup Iteration  20: 466141.213 ops/s
# Warmup Iteration  21: 466395.705 ops/s
# Warmup Iteration  22: 465638.515 ops/s
# Warmup Iteration  23: 466100.050 ops/s
# Warmup Iteration  24: 465858.838 ops/s
# Warmup Iteration  25: 465308.098 ops/s
# Warmup Iteration  26: 466594.431 ops/s
# Warmup Iteration  27: 466939.213 ops/s
# Warmup Iteration  28: 466567.554 ops/s
# Warmup Iteration  29: 466274.350 ops/s
# Warmup Iteration  30: 466891.710 ops/s
Iteration   1: 466877.152 ops/s
Iteration   2: 465815.931 ops/s
Iteration   3: 466524.963 ops/s
Iteration   4: 467282.709 ops/s
Iteration   5: 466657.301 ops/s
Iteration   6: 466333.713 ops/s
Iteration   7: 466665.452 ops/s
Iteration   8: 466556.754 ops/s
Iteration   9: 465397.021 ops/s
Iteration  10: 467178.654 ops/s
Iteration  11: 466616.944 ops/s
Iteration  12: 467223.865 ops/s
Iteration  13: 464969.952 ops/s
Iteration  14: 466185.488 ops/s
Iteration  15: 464922.137 ops/s
Iteration  16: 465985.042 ops/s
Iteration  17: 464445.536 ops/s
Iteration  18: 466497.703 ops/s
Iteration  19: 465971.052 ops/s
Iteration  20: 466149.059 ops/s
Iteration  21: 464428.439 ops/s
Iteration  22: 467204.661 ops/s
Iteration  23: 464273.358 ops/s
Iteration  24: 466242.500 ops/s
Iteration  25: 463371.916 ops/s
Iteration  26: 467404.559 ops/s
Iteration  27: 466028.134 ops/s
Iteration  28: 466382.004 ops/s
Iteration  29: 464459.604 ops/s
Iteration  30: 466794.371 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByEach":
  466028.199 ±(99.9%) 697.019 ops/s [Average]
  (min, avg, max) = (463371.916, 466028.199, 467404.559), stdev = 1043.265
  CI (99.9%): [465331.180, 466725.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_countByEach  thrpt   30  466028.199 ± 697.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1506753.414 ops/s
# Warmup Iteration   2: 2643285.618 ops/s
# Warmup Iteration   3: 2967574.063 ops/s
# Warmup Iteration   4: 2984797.942 ops/s
# Warmup Iteration   5: 2985354.985 ops/s
# Warmup Iteration   6: 2489056.092 ops/s
# Warmup Iteration   7: 2981947.627 ops/s
# Warmup Iteration   8: 2983570.106 ops/s
# Warmup Iteration   9: 2983665.401 ops/s
# Warmup Iteration  10: 2986989.317 ops/s
# Warmup Iteration  11: 2981972.550 ops/s
# Warmup Iteration  12: 2988258.967 ops/s
# Warmup Iteration  13: 2989003.067 ops/s
# Warmup Iteration  14: 2984459.417 ops/s
# Warmup Iteration  15: 2986629.906 ops/s
# Warmup Iteration  16: 2987061.299 ops/s
# Warmup Iteration  17: 2987756.531 ops/s
# Warmup Iteration  18: 2990371.422 ops/s
# Warmup Iteration  19: 2982481.901 ops/s
# Warmup Iteration  20: 2989436.628 ops/s
# Warmup Iteration  21: 2991392.770 ops/s
# Warmup Iteration  22: 2983216.986 ops/s
# Warmup Iteration  23: 2986307.522 ops/s
# Warmup Iteration  24: 2989469.157 ops/s
# Warmup Iteration  25: 2988133.615 ops/s
# Warmup Iteration  26: 2987420.403 ops/s
# Warmup Iteration  27: 2976319.436 ops/s
# Warmup Iteration  28: 2984959.899 ops/s
# Warmup Iteration  29: 2984088.387 ops/s
# Warmup Iteration  30: 2987935.496 ops/s
Iteration   1: 2998146.408 ops/s
Iteration   2: 2977907.082 ops/s
Iteration   3: 2988518.839 ops/s
Iteration   4: 2990085.752 ops/s
Iteration   5: 2982097.019 ops/s
Iteration   6: 2988246.877 ops/s
Iteration   7: 2986287.368 ops/s
Iteration   8: 2995598.494 ops/s
Iteration   9: 2978844.760 ops/s
Iteration  10: 2985909.507 ops/s
Iteration  11: 2990387.580 ops/s
Iteration  12: 2979875.963 ops/s
Iteration  13: 2991942.562 ops/s
Iteration  14: 2986445.115 ops/s
Iteration  15: 2995628.893 ops/s
Iteration  16: 2984559.341 ops/s
Iteration  17: 2983493.889 ops/s
Iteration  18: 2994281.502 ops/s
Iteration  19: 2978571.499 ops/s
Iteration  20: 2993230.602 ops/s
Iteration  21: 2979198.213 ops/s
Iteration  22: 2988688.523 ops/s
Iteration  23: 2979963.001 ops/s
Iteration  24: 2974490.315 ops/s
Iteration  25: 2982854.928 ops/s
Iteration  26: 2973758.749 ops/s
Iteration  27: 2996356.001 ops/s
Iteration  28: 2983629.329 ops/s
Iteration  29: 2977767.939 ops/s
Iteration  30: 2988707.780 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countByWith":
  2985849.128 ±(99.9%) 4539.149 ops/s [Average]
  (min, avg, max) = (2973758.749, 2985849.128, 2998146.408), stdev = 6793.985
  CI (99.9%): [2981309.979, 2990388.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_countByWith  thrpt   30  2985849.128 ± 4539.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10586614.116 ops/s
# Warmup Iteration   2: 20524645.648 ops/s
# Warmup Iteration   3: 17901446.342 ops/s
# Warmup Iteration   4: 21181915.468 ops/s
# Warmup Iteration   5: 21118435.948 ops/s
# Warmup Iteration   6: 21138370.243 ops/s
# Warmup Iteration   7: 21127600.437 ops/s
# Warmup Iteration   8: 21129524.996 ops/s
# Warmup Iteration   9: 21132345.108 ops/s
# Warmup Iteration  10: 21140610.049 ops/s
# Warmup Iteration  11: 21181989.273 ops/s
# Warmup Iteration  12: 21133883.902 ops/s
# Warmup Iteration  13: 21144559.274 ops/s
# Warmup Iteration  14: 21174321.195 ops/s
# Warmup Iteration  15: 21181064.420 ops/s
# Warmup Iteration  16: 21148595.144 ops/s
# Warmup Iteration  17: 21058641.754 ops/s
# Warmup Iteration  18: 21084910.314 ops/s
# Warmup Iteration  19: 21063897.872 ops/s
# Warmup Iteration  20: 21041745.771 ops/s
# Warmup Iteration  21: 21042750.182 ops/s
# Warmup Iteration  22: 21082631.011 ops/s
# Warmup Iteration  23: 21124795.998 ops/s
# Warmup Iteration  24: 21066209.690 ops/s
# Warmup Iteration  25: 21044571.094 ops/s
# Warmup Iteration  26: 21071269.712 ops/s
# Warmup Iteration  27: 21105504.212 ops/s
# Warmup Iteration  28: 20980202.473 ops/s
# Warmup Iteration  29: 21042090.391 ops/s
# Warmup Iteration  30: 21100281.063 ops/s
Iteration   1: 21073518.734 ops/s
Iteration   2: 21104755.079 ops/s
Iteration   3: 21065129.393 ops/s
Iteration   4: 21068806.473 ops/s
Iteration   5: 21031563.081 ops/s
Iteration   6: 21005701.520 ops/s
Iteration   7: 21074004.499 ops/s
Iteration   8: 20868701.029 ops/s
Iteration   9: 20965368.692 ops/s
Iteration  10: 21084812.800 ops/s
Iteration  11: 21081407.148 ops/s
Iteration  12: 21024256.939 ops/s
Iteration  13: 21082267.566 ops/s
Iteration  14: 21089182.463 ops/s
Iteration  15: 21037438.914 ops/s
Iteration  16: 21029119.158 ops/s
Iteration  17: 21004086.081 ops/s
Iteration  18: 21071193.693 ops/s
Iteration  19: 21080377.738 ops/s
Iteration  20: 21085065.526 ops/s
Iteration  21: 21094872.498 ops/s
Iteration  22: 21039979.301 ops/s
Iteration  23: 21153790.245 ops/s
Iteration  24: 21093729.110 ops/s
Iteration  25: 20977294.614 ops/s
Iteration  26: 21092208.932 ops/s
Iteration  27: 21084179.194 ops/s
Iteration  28: 21003518.120 ops/s
Iteration  29: 21103854.087 ops/s
Iteration  30: 21059296.784 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_countWith":
  21054315.980 ±(99.9%) 36257.684 ops/s [Average]
  (min, avg, max) = (20868701.029, 21054315.980, 21153790.245), stdev = 54268.798
  CI (99.9%): [21018058.297, 21090573.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_countWith  thrpt   30  21054315.980 ± 36257.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2017614.254 ops/s
# Warmup Iteration   2: 4617640.002 ops/s
# Warmup Iteration   3: 4652507.901 ops/s
# Warmup Iteration   4: 3872457.615 ops/s
# Warmup Iteration   5: 4648387.894 ops/s
# Warmup Iteration   6: 4660892.849 ops/s
# Warmup Iteration   7: 4660216.325 ops/s
# Warmup Iteration   8: 4658034.164 ops/s
# Warmup Iteration   9: 4637435.138 ops/s
# Warmup Iteration  10: 4656895.938 ops/s
# Warmup Iteration  11: 4666974.594 ops/s
# Warmup Iteration  12: 4646612.738 ops/s
# Warmup Iteration  13: 4665086.792 ops/s
# Warmup Iteration  14: 4662404.446 ops/s
# Warmup Iteration  15: 4656826.144 ops/s
# Warmup Iteration  16: 4649391.946 ops/s
# Warmup Iteration  17: 4678945.654 ops/s
# Warmup Iteration  18: 4661939.691 ops/s
# Warmup Iteration  19: 4654087.961 ops/s
# Warmup Iteration  20: 4659783.928 ops/s
# Warmup Iteration  21: 4651307.380 ops/s
# Warmup Iteration  22: 4664890.624 ops/s
# Warmup Iteration  23: 4658967.716 ops/s
# Warmup Iteration  24: 4657904.420 ops/s
# Warmup Iteration  25: 4665915.854 ops/s
# Warmup Iteration  26: 4653564.726 ops/s
# Warmup Iteration  27: 4654036.638 ops/s
# Warmup Iteration  28: 4653947.876 ops/s
# Warmup Iteration  29: 4655205.373 ops/s
# Warmup Iteration  30: 4660863.050 ops/s
Iteration   1: 4643672.770 ops/s
Iteration   2: 4659672.500 ops/s
Iteration   3: 4648321.825 ops/s
Iteration   4: 4669404.159 ops/s
Iteration   5: 4661553.361 ops/s
Iteration   6: 4654707.996 ops/s
Iteration   7: 4638650.917 ops/s
Iteration   8: 4650522.304 ops/s
Iteration   9: 4649824.183 ops/s
Iteration  10: 4675799.835 ops/s
Iteration  11: 4661266.688 ops/s
Iteration  12: 4676355.529 ops/s
Iteration  13: 4662006.242 ops/s
Iteration  14: 4668971.000 ops/s
Iteration  15: 4635861.571 ops/s
Iteration  16: 4650298.211 ops/s
Iteration  17: 4665699.546 ops/s
Iteration  18: 4656516.812 ops/s
Iteration  19: 4658251.122 ops/s
Iteration  20: 4659356.527 ops/s
Iteration  21: 4671291.929 ops/s
Iteration  22: 4652027.955 ops/s
Iteration  23: 4649375.721 ops/s
Iteration  24: 4648178.404 ops/s
Iteration  25: 4655504.030 ops/s
Iteration  26: 4671150.533 ops/s
Iteration  27: 4615041.449 ops/s
Iteration  28: 4669748.490 ops/s
Iteration  29: 4649423.214 ops/s
Iteration  30: 4654245.153 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detect":
  4656089.999 ±(99.9%) 8675.792 ops/s [Average]
  (min, avg, max) = (4615041.449, 4656089.999, 4676355.529), stdev = 12985.518
  CI (99.9%): [4647414.207, 4664765.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detect  thrpt   30  4656089.999 ± 8675.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1806317.966 ops/s
# Warmup Iteration   2: 4115882.824 ops/s
# Warmup Iteration   3: 4100518.205 ops/s
# Warmup Iteration   4: 3413278.098 ops/s
# Warmup Iteration   5: 4107945.072 ops/s
# Warmup Iteration   6: 4108437.870 ops/s
# Warmup Iteration   7: 4106074.297 ops/s
# Warmup Iteration   8: 4089880.259 ops/s
# Warmup Iteration   9: 4115428.380 ops/s
# Warmup Iteration  10: 4103533.434 ops/s
# Warmup Iteration  11: 4106078.183 ops/s
# Warmup Iteration  12: 4109496.005 ops/s
# Warmup Iteration  13: 4104627.339 ops/s
# Warmup Iteration  14: 4108205.544 ops/s
# Warmup Iteration  15: 4104217.538 ops/s
# Warmup Iteration  16: 4111208.471 ops/s
# Warmup Iteration  17: 4108715.333 ops/s
# Warmup Iteration  18: 4104780.355 ops/s
# Warmup Iteration  19: 4114340.094 ops/s
# Warmup Iteration  20: 4112928.907 ops/s
# Warmup Iteration  21: 4106628.386 ops/s
# Warmup Iteration  22: 4100302.124 ops/s
# Warmup Iteration  23: 4097403.750 ops/s
# Warmup Iteration  24: 4100973.429 ops/s
# Warmup Iteration  25: 4100274.736 ops/s
# Warmup Iteration  26: 4107095.435 ops/s
# Warmup Iteration  27: 4104206.802 ops/s
# Warmup Iteration  28: 4117978.037 ops/s
# Warmup Iteration  29: 4106762.377 ops/s
# Warmup Iteration  30: 4106751.299 ops/s
Iteration   1: 4116190.358 ops/s
Iteration   2: 4104518.938 ops/s
Iteration   3: 4100216.752 ops/s
Iteration   4: 4110132.503 ops/s
Iteration   5: 4107293.669 ops/s
Iteration   6: 4112146.500 ops/s
Iteration   7: 4115092.464 ops/s
Iteration   8: 4117683.562 ops/s
Iteration   9: 4107559.244 ops/s
Iteration  10: 4101469.238 ops/s
Iteration  11: 4111393.661 ops/s
Iteration  12: 4094913.839 ops/s
Iteration  13: 4119052.266 ops/s
Iteration  14: 4101753.419 ops/s
Iteration  15: 4114538.832 ops/s
Iteration  16: 4100779.112 ops/s
Iteration  17: 4112928.506 ops/s
Iteration  18: 4111164.129 ops/s
Iteration  19: 4094607.378 ops/s
Iteration  20: 4110277.769 ops/s
Iteration  21: 4109093.780 ops/s
Iteration  22: 4107251.242 ops/s
Iteration  23: 4112865.921 ops/s
Iteration  24: 4117718.813 ops/s
Iteration  25: 4116512.719 ops/s
Iteration  26: 4098326.563 ops/s
Iteration  27: 4111048.166 ops/s
Iteration  28: 4116828.154 ops/s
Iteration  29: 4101235.605 ops/s
Iteration  30: 4102748.368 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIfNone":
  4108578.049 ±(99.9%) 4713.012 ops/s [Average]
  (min, avg, max) = (4094607.378, 4108578.049, 4119052.266), stdev = 7054.215
  CI (99.9%): [4103865.037, 4113291.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectIfNone  thrpt   30  4108578.049 ± 4713.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497535.519 ops/s
# Warmup Iteration   2: 1039069.596 ops/s
# Warmup Iteration   3: 1120329.358 ops/s
# Warmup Iteration   4: 1126271.991 ops/s
# Warmup Iteration   5: 940083.488 ops/s
# Warmup Iteration   6: 1120198.536 ops/s
# Warmup Iteration   7: 1124493.518 ops/s
# Warmup Iteration   8: 1122263.868 ops/s
# Warmup Iteration   9: 1122712.587 ops/s
# Warmup Iteration  10: 1124132.102 ops/s
# Warmup Iteration  11: 1122974.868 ops/s
# Warmup Iteration  12: 1124154.991 ops/s
# Warmup Iteration  13: 1123211.852 ops/s
# Warmup Iteration  14: 1119576.654 ops/s
# Warmup Iteration  15: 1121630.787 ops/s
# Warmup Iteration  16: 1124759.443 ops/s
# Warmup Iteration  17: 1124270.950 ops/s
# Warmup Iteration  18: 1122716.121 ops/s
# Warmup Iteration  19: 1124711.150 ops/s
# Warmup Iteration  20: 1124098.408 ops/s
# Warmup Iteration  21: 1124116.131 ops/s
# Warmup Iteration  22: 1120561.460 ops/s
# Warmup Iteration  23: 1121445.150 ops/s
# Warmup Iteration  24: 1124493.780 ops/s
# Warmup Iteration  25: 1120918.193 ops/s
# Warmup Iteration  26: 1124915.386 ops/s
# Warmup Iteration  27: 1125135.566 ops/s
# Warmup Iteration  28: 1123127.488 ops/s
# Warmup Iteration  29: 1123841.439 ops/s
# Warmup Iteration  30: 1123361.885 ops/s
Iteration   1: 1122333.031 ops/s
Iteration   2: 1120594.983 ops/s
Iteration   3: 1125438.969 ops/s
Iteration   4: 1125587.015 ops/s
Iteration   5: 1122707.744 ops/s
Iteration   6: 1123674.681 ops/s
Iteration   7: 1126830.112 ops/s
Iteration   8: 1123195.962 ops/s
Iteration   9: 1122337.761 ops/s
Iteration  10: 1122597.017 ops/s
Iteration  11: 1122932.557 ops/s
Iteration  12: 1122692.497 ops/s
Iteration  13: 1123712.785 ops/s
Iteration  14: 1121597.889 ops/s
Iteration  15: 1125747.496 ops/s
Iteration  16: 1124333.353 ops/s
Iteration  17: 1123249.832 ops/s
Iteration  18: 1124787.012 ops/s
Iteration  19: 1123146.765 ops/s
Iteration  20: 1125812.096 ops/s
Iteration  21: 1125125.274 ops/s
Iteration  22: 1124833.565 ops/s
Iteration  23: 1121095.664 ops/s
Iteration  24: 1125017.463 ops/s
Iteration  25: 1127459.901 ops/s
Iteration  26: 1123008.869 ops/s
Iteration  27: 1123934.483 ops/s
Iteration  28: 1125836.049 ops/s
Iteration  29: 1123667.834 ops/s
Iteration  30: 1125005.808 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectIndex":
  1123943.149 ±(99.9%) 1109.473 ops/s [Average]
  (min, avg, max) = (1120594.983, 1123943.149, 1127459.901), stdev = 1660.606
  CI (99.9%): [1122833.676, 1125052.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectIndex  thrpt   30  1123943.149 ± 1109.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 673009.552 ops/s
# Warmup Iteration   2: 1399108.375 ops/s
# Warmup Iteration   3: 1483184.281 ops/s
# Warmup Iteration   4: 1483740.081 ops/s
# Warmup Iteration   5: 1242745.908 ops/s
# Warmup Iteration   6: 1483781.886 ops/s
# Warmup Iteration   7: 1485944.613 ops/s
# Warmup Iteration   8: 1487691.149 ops/s
# Warmup Iteration   9: 1485895.327 ops/s
# Warmup Iteration  10: 1485955.655 ops/s
# Warmup Iteration  11: 1488177.716 ops/s
# Warmup Iteration  12: 1483648.591 ops/s
# Warmup Iteration  13: 1487663.324 ops/s
# Warmup Iteration  14: 1488173.931 ops/s
# Warmup Iteration  15: 1485462.991 ops/s
# Warmup Iteration  16: 1486921.428 ops/s
# Warmup Iteration  17: 1487027.734 ops/s
# Warmup Iteration  18: 1485406.352 ops/s
# Warmup Iteration  19: 1483646.417 ops/s
# Warmup Iteration  20: 1485585.793 ops/s
# Warmup Iteration  21: 1487715.147 ops/s
# Warmup Iteration  22: 1480277.986 ops/s
# Warmup Iteration  23: 1488371.311 ops/s
# Warmup Iteration  24: 1485319.610 ops/s
# Warmup Iteration  25: 1487746.416 ops/s
# Warmup Iteration  26: 1487620.348 ops/s
# Warmup Iteration  27: 1489335.775 ops/s
# Warmup Iteration  28: 1485427.658 ops/s
# Warmup Iteration  29: 1486907.163 ops/s
# Warmup Iteration  30: 1487455.201 ops/s
Iteration   1: 1484090.666 ops/s
Iteration   2: 1485155.577 ops/s
Iteration   3: 1484632.794 ops/s
Iteration   4: 1489862.276 ops/s
Iteration   5: 1482660.738 ops/s
Iteration   6: 1487432.001 ops/s
Iteration   7: 1487510.816 ops/s
Iteration   8: 1487104.576 ops/s
Iteration   9: 1481755.090 ops/s
Iteration  10: 1489594.919 ops/s
Iteration  11: 1482971.627 ops/s
Iteration  12: 1485066.006 ops/s
Iteration  13: 1488412.366 ops/s
Iteration  14: 1488534.699 ops/s
Iteration  15: 1486389.062 ops/s
Iteration  16: 1487976.767 ops/s
Iteration  17: 1488523.081 ops/s
Iteration  18: 1489574.887 ops/s
Iteration  19: 1481838.006 ops/s
Iteration  20: 1486380.316 ops/s
Iteration  21: 1488793.805 ops/s
Iteration  22: 1488220.447 ops/s
Iteration  23: 1486236.091 ops/s
Iteration  24: 1489674.642 ops/s
Iteration  25: 1486966.834 ops/s
Iteration  26: 1489096.595 ops/s
Iteration  27: 1485744.043 ops/s
Iteration  28: 1487690.251 ops/s
Iteration  29: 1487508.139 ops/s
Iteration  30: 1484991.820 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectLastIndex":
  1486679.631 ±(99.9%) 1573.849 ops/s [Average]
  (min, avg, max) = (1481755.090, 1486679.631, 1489862.276), stdev = 2355.664
  CI (99.9%): [1485105.782, 1488253.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  1486679.631 ± 1573.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 446935.424 ops/s
# Warmup Iteration   2: 546453.682 ops/s
# Warmup Iteration   3: 684571.350 ops/s
# Warmup Iteration   4: 681204.108 ops/s
# Warmup Iteration   5: 684856.270 ops/s
# Warmup Iteration   6: 686019.559 ops/s
# Warmup Iteration   7: 687135.640 ops/s
# Warmup Iteration   8: 684939.724 ops/s
# Warmup Iteration   9: 574101.328 ops/s
# Warmup Iteration  10: 684172.812 ops/s
# Warmup Iteration  11: 684323.047 ops/s
# Warmup Iteration  12: 685654.845 ops/s
# Warmup Iteration  13: 687024.281 ops/s
# Warmup Iteration  14: 684829.589 ops/s
# Warmup Iteration  15: 684286.952 ops/s
# Warmup Iteration  16: 686114.324 ops/s
# Warmup Iteration  17: 714748.972 ops/s
# Warmup Iteration  18: 716564.130 ops/s
# Warmup Iteration  19: 715948.512 ops/s
# Warmup Iteration  20: 715597.803 ops/s
# Warmup Iteration  21: 713907.268 ops/s
# Warmup Iteration  22: 716024.288 ops/s
# Warmup Iteration  23: 715506.599 ops/s
# Warmup Iteration  24: 713357.114 ops/s
# Warmup Iteration  25: 716482.336 ops/s
# Warmup Iteration  26: 715186.622 ops/s
# Warmup Iteration  27: 713359.168 ops/s
# Warmup Iteration  28: 713938.168 ops/s
# Warmup Iteration  29: 716077.163 ops/s
# Warmup Iteration  30: 716111.920 ops/s
Iteration   1: 713304.314 ops/s
Iteration   2: 714362.253 ops/s
Iteration   3: 716086.471 ops/s
Iteration   4: 714741.685 ops/s
Iteration   5: 716923.594 ops/s
Iteration   6: 716583.237 ops/s
Iteration   7: 716923.907 ops/s
Iteration   8: 714632.060 ops/s
Iteration   9: 712624.775 ops/s
Iteration  10: 710806.049 ops/s
Iteration  11: 716898.727 ops/s
Iteration  12: 716537.826 ops/s
Iteration  13: 714743.318 ops/s
Iteration  14: 716071.161 ops/s
Iteration  15: 715875.303 ops/s
Iteration  16: 711826.497 ops/s
Iteration  17: 711757.863 ops/s
Iteration  18: 716005.460 ops/s
Iteration  19: 709241.064 ops/s
Iteration  20: 716973.630 ops/s
Iteration  21: 712118.432 ops/s
Iteration  22: 714534.782 ops/s
Iteration  23: 717704.178 ops/s
Iteration  24: 714859.767 ops/s
Iteration  25: 715899.472 ops/s
Iteration  26: 715786.398 ops/s
Iteration  27: 714607.067 ops/s
Iteration  28: 717794.340 ops/s
Iteration  29: 713791.916 ops/s
Iteration  30: 715620.124 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectOptional":
  714854.522 ±(99.9%) 1419.228 ops/s [Average]
  (min, avg, max) = (709241.064, 714854.522, 717794.340), stdev = 2124.234
  CI (99.9%): [713435.294, 716273.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectOptional  thrpt   30  714854.522 ± 1419.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1871934.464 ops/s
# Warmup Iteration   2: 4212206.159 ops/s
# Warmup Iteration   3: 4254509.358 ops/s
# Warmup Iteration   4: 3551633.934 ops/s
# Warmup Iteration   5: 4246234.825 ops/s
# Warmup Iteration   6: 4233480.993 ops/s
# Warmup Iteration   7: 4236324.832 ops/s
# Warmup Iteration   8: 4222756.304 ops/s
# Warmup Iteration   9: 4245778.631 ops/s
# Warmup Iteration  10: 4247036.255 ops/s
# Warmup Iteration  11: 4244164.831 ops/s
# Warmup Iteration  12: 4238187.528 ops/s
# Warmup Iteration  13: 4242521.460 ops/s
# Warmup Iteration  14: 4248617.475 ops/s
# Warmup Iteration  15: 4213281.903 ops/s
# Warmup Iteration  16: 4245847.755 ops/s
# Warmup Iteration  17: 4248511.648 ops/s
# Warmup Iteration  18: 4231381.501 ops/s
# Warmup Iteration  19: 4247072.341 ops/s
# Warmup Iteration  20: 4246532.193 ops/s
# Warmup Iteration  21: 4237203.748 ops/s
# Warmup Iteration  22: 4239776.780 ops/s
# Warmup Iteration  23: 4244891.299 ops/s
# Warmup Iteration  24: 4233098.773 ops/s
# Warmup Iteration  25: 4226973.259 ops/s
# Warmup Iteration  26: 4235257.395 ops/s
# Warmup Iteration  27: 4233647.301 ops/s
# Warmup Iteration  28: 4248388.283 ops/s
# Warmup Iteration  29: 4247773.691 ops/s
# Warmup Iteration  30: 4236230.052 ops/s
Iteration   1: 4224825.753 ops/s
Iteration   2: 4245300.762 ops/s
Iteration   3: 4241576.684 ops/s
Iteration   4: 4246453.064 ops/s
Iteration   5: 4241047.368 ops/s
Iteration   6: 4243736.324 ops/s
Iteration   7: 4233294.833 ops/s
Iteration   8: 4244132.064 ops/s
Iteration   9: 4239005.494 ops/s
Iteration  10: 4243447.861 ops/s
Iteration  11: 4235461.097 ops/s
Iteration  12: 4231248.592 ops/s
Iteration  13: 4239539.153 ops/s
Iteration  14: 4241436.788 ops/s
Iteration  15: 4245953.862 ops/s
Iteration  16: 4242580.920 ops/s
Iteration  17: 4248923.935 ops/s
Iteration  18: 4224892.018 ops/s
Iteration  19: 4225992.814 ops/s
Iteration  20: 4228336.221 ops/s
Iteration  21: 4233691.984 ops/s
Iteration  22: 4237511.964 ops/s
Iteration  23: 4245531.526 ops/s
Iteration  24: 4243701.171 ops/s
Iteration  25: 4244652.092 ops/s
Iteration  26: 4237616.823 ops/s
Iteration  27: 4224936.876 ops/s
Iteration  28: 4234028.001 ops/s
Iteration  29: 4240186.968 ops/s
Iteration  30: 4239641.784 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWith":
  4238289.493 ±(99.9%) 4751.413 ops/s [Average]
  (min, avg, max) = (4224825.753, 4238289.493, 4248923.935), stdev = 7111.692
  CI (99.9%): [4233538.080, 4243040.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectWith  thrpt   30  4238289.493 ± 4751.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1488679.802 ops/s
# Warmup Iteration   2: 3301367.000 ops/s
# Warmup Iteration   3: 3326052.089 ops/s
# Warmup Iteration   4: 3008392.192 ops/s
# Warmup Iteration   5: 3113002.434 ops/s
# Warmup Iteration   6: 3328547.248 ops/s
# Warmup Iteration   7: 3339159.623 ops/s
# Warmup Iteration   8: 3336659.475 ops/s
# Warmup Iteration   9: 3339116.420 ops/s
# Warmup Iteration  10: 3338318.311 ops/s
# Warmup Iteration  11: 3330421.169 ops/s
# Warmup Iteration  12: 3342767.204 ops/s
# Warmup Iteration  13: 3338445.477 ops/s
# Warmup Iteration  14: 3341285.040 ops/s
# Warmup Iteration  15: 3330571.832 ops/s
# Warmup Iteration  16: 3333951.632 ops/s
# Warmup Iteration  17: 3339108.623 ops/s
# Warmup Iteration  18: 3342916.994 ops/s
# Warmup Iteration  19: 3340225.922 ops/s
# Warmup Iteration  20: 3336242.783 ops/s
# Warmup Iteration  21: 3339446.113 ops/s
# Warmup Iteration  22: 3339995.243 ops/s
# Warmup Iteration  23: 3338240.101 ops/s
# Warmup Iteration  24: 3332169.182 ops/s
# Warmup Iteration  25: 3334466.042 ops/s
# Warmup Iteration  26: 3334744.914 ops/s
# Warmup Iteration  27: 3344096.153 ops/s
# Warmup Iteration  28: 3328302.093 ops/s
# Warmup Iteration  29: 3340613.059 ops/s
# Warmup Iteration  30: 3339077.865 ops/s
Iteration   1: 3325759.553 ops/s
Iteration   2: 3336250.416 ops/s
Iteration   3: 3337797.031 ops/s
Iteration   4: 3352445.792 ops/s
Iteration   5: 3336871.770 ops/s
Iteration   6: 3331229.797 ops/s
Iteration   7: 3326587.196 ops/s
Iteration   8: 3340525.094 ops/s
Iteration   9: 3345679.057 ops/s
Iteration  10: 3328089.325 ops/s
Iteration  11: 3336097.655 ops/s
Iteration  12: 3345269.922 ops/s
Iteration  13: 3337569.992 ops/s
Iteration  14: 3343780.171 ops/s
Iteration  15: 3336388.744 ops/s
Iteration  16: 3329057.224 ops/s
Iteration  17: 3337191.854 ops/s
Iteration  18: 3339341.686 ops/s
Iteration  19: 3342196.086 ops/s
Iteration  20: 3335646.034 ops/s
Iteration  21: 3329186.294 ops/s
Iteration  22: 3333799.079 ops/s
Iteration  23: 3335123.854 ops/s
Iteration  24: 3345868.602 ops/s
Iteration  25: 3340388.450 ops/s
Iteration  26: 3340006.523 ops/s
Iteration  27: 3342713.658 ops/s
Iteration  28: 3344670.468 ops/s
Iteration  29: 3344547.450 ops/s
Iteration  30: 3344890.224 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithIfNoneBlock":
  3338165.633 ±(99.9%) 4355.133 ops/s [Average]
  (min, avg, max) = (3325759.553, 3338165.633, 3352445.792), stdev = 6518.559
  CI (99.9%): [3333810.500, 3342520.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  3338165.633 ± 4355.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432762.841 ops/s
# Warmup Iteration   2: 517411.412 ops/s
# Warmup Iteration   3: 656242.549 ops/s
# Warmup Iteration   4: 653917.758 ops/s
# Warmup Iteration   5: 657832.062 ops/s
# Warmup Iteration   6: 654696.699 ops/s
# Warmup Iteration   7: 654991.977 ops/s
# Warmup Iteration   8: 655239.295 ops/s
# Warmup Iteration   9: 581531.949 ops/s
# Warmup Iteration  10: 622865.134 ops/s
# Warmup Iteration  11: 656624.344 ops/s
# Warmup Iteration  12: 657797.089 ops/s
# Warmup Iteration  13: 657077.662 ops/s
# Warmup Iteration  14: 655840.718 ops/s
# Warmup Iteration  15: 658135.125 ops/s
# Warmup Iteration  16: 655176.469 ops/s
# Warmup Iteration  17: 714932.722 ops/s
# Warmup Iteration  18: 718063.234 ops/s
# Warmup Iteration  19: 717138.117 ops/s
# Warmup Iteration  20: 716269.532 ops/s
# Warmup Iteration  21: 717014.515 ops/s
# Warmup Iteration  22: 714678.790 ops/s
# Warmup Iteration  23: 716366.426 ops/s
# Warmup Iteration  24: 717383.006 ops/s
# Warmup Iteration  25: 717202.546 ops/s
# Warmup Iteration  26: 715953.036 ops/s
# Warmup Iteration  27: 713436.217 ops/s
# Warmup Iteration  28: 715631.046 ops/s
# Warmup Iteration  29: 713726.647 ops/s
# Warmup Iteration  30: 715750.250 ops/s
Iteration   1: 717836.081 ops/s
Iteration   2: 717561.063 ops/s
Iteration   3: 715016.513 ops/s
Iteration   4: 716974.872 ops/s
Iteration   5: 716658.403 ops/s
Iteration   6: 713070.753 ops/s
Iteration   7: 716135.110 ops/s
Iteration   8: 714118.985 ops/s
Iteration   9: 716117.589 ops/s
Iteration  10: 715485.026 ops/s
Iteration  11: 716233.976 ops/s
Iteration  12: 718797.838 ops/s
Iteration  13: 715622.326 ops/s
Iteration  14: 717639.876 ops/s
Iteration  15: 718378.187 ops/s
Iteration  16: 718459.339 ops/s
Iteration  17: 715924.926 ops/s
Iteration  18: 717477.763 ops/s
Iteration  19: 716381.525 ops/s
Iteration  20: 715275.556 ops/s
Iteration  21: 719592.992 ops/s
Iteration  22: 718072.789 ops/s
Iteration  23: 715696.696 ops/s
Iteration  24: 719437.258 ops/s
Iteration  25: 715146.623 ops/s
Iteration  26: 719226.552 ops/s
Iteration  27: 718967.513 ops/s
Iteration  28: 717440.544 ops/s
Iteration  29: 717483.433 ops/s
Iteration  30: 717580.998 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_detectWithOptional":
  716927.037 ±(99.9%) 1080.900 ops/s [Average]
  (min, avg, max) = (713070.753, 716927.037, 719592.992), stdev = 1617.840
  CI (99.9%): [715846.137, 718007.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_detectWithOptional  thrpt   30  716927.037 ± 1080.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1825301.540 ops/s
# Warmup Iteration   2: 4297700.438 ops/s
# Warmup Iteration   3: 4489878.168 ops/s
# Warmup Iteration   4: 3754073.997 ops/s
# Warmup Iteration   5: 4535659.685 ops/s
# Warmup Iteration   6: 4535475.041 ops/s
# Warmup Iteration   7: 4530633.073 ops/s
# Warmup Iteration   8: 4523519.084 ops/s
# Warmup Iteration   9: 4532586.000 ops/s
# Warmup Iteration  10: 4522073.061 ops/s
# Warmup Iteration  11: 4532853.051 ops/s
# Warmup Iteration  12: 4536719.767 ops/s
# Warmup Iteration  13: 4536622.917 ops/s
# Warmup Iteration  14: 4536602.641 ops/s
# Warmup Iteration  15: 4535992.251 ops/s
# Warmup Iteration  16: 4543695.353 ops/s
# Warmup Iteration  17: 4525715.781 ops/s
# Warmup Iteration  18: 4529032.955 ops/s
# Warmup Iteration  19: 4524166.391 ops/s
# Warmup Iteration  20: 4538124.262 ops/s
# Warmup Iteration  21: 4537221.169 ops/s
# Warmup Iteration  22: 4524706.094 ops/s
# Warmup Iteration  23: 4524807.975 ops/s
# Warmup Iteration  24: 4529946.438 ops/s
# Warmup Iteration  25: 4512048.460 ops/s
# Warmup Iteration  26: 4529945.533 ops/s
# Warmup Iteration  27: 4520936.396 ops/s
# Warmup Iteration  28: 4525833.356 ops/s
# Warmup Iteration  29: 4522989.387 ops/s
# Warmup Iteration  30: 4528308.448 ops/s
Iteration   1: 4523421.323 ops/s
Iteration   2: 4533460.000 ops/s
Iteration   3: 4529974.916 ops/s
Iteration   4: 4530986.236 ops/s
Iteration   5: 4529592.333 ops/s
Iteration   6: 4534292.522 ops/s
Iteration   7: 4530907.984 ops/s
Iteration   8: 4519388.583 ops/s
Iteration   9: 4531518.629 ops/s
Iteration  10: 4530427.832 ops/s
Iteration  11: 4525594.288 ops/s
Iteration  12: 4546056.272 ops/s
Iteration  13: 4519903.657 ops/s
Iteration  14: 4545483.086 ops/s
Iteration  15: 4514346.942 ops/s
Iteration  16: 4536919.327 ops/s
Iteration  17: 4543038.176 ops/s
Iteration  18: 4518518.493 ops/s
Iteration  19: 4532016.935 ops/s
Iteration  20: 4529439.371 ops/s
Iteration  21: 4525745.050 ops/s
Iteration  22: 4540457.111 ops/s
Iteration  23: 4530575.115 ops/s
Iteration  24: 4528585.304 ops/s
Iteration  25: 4527176.259 ops/s
Iteration  26: 4527373.193 ops/s
Iteration  27: 4525659.074 ops/s
Iteration  28: 4539209.228 ops/s
Iteration  29: 4535013.063 ops/s
Iteration  30: 4543569.706 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinct":
  4530955.000 ±(99.9%) 5320.262 ops/s [Average]
  (min, avg, max) = (4514346.942, 4530955.000, 4546056.272), stdev = 7963.119
  CI (99.9%): [4525634.738, 4536275.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_distinct  thrpt   30  4530955.000 ± 5320.262  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 952726.306 ops/s
# Warmup Iteration   2: 1893180.373 ops/s
# Warmup Iteration   3: 2013741.130 ops/s
# Warmup Iteration   4: 2032974.215 ops/s
# Warmup Iteration   5: 1698602.852 ops/s
# Warmup Iteration   6: 2047312.254 ops/s
# Warmup Iteration   7: 2038024.597 ops/s
# Warmup Iteration   8: 2048464.560 ops/s
# Warmup Iteration   9: 2039302.592 ops/s
# Warmup Iteration  10: 2048371.532 ops/s
# Warmup Iteration  11: 2039342.444 ops/s
# Warmup Iteration  12: 2037790.022 ops/s
# Warmup Iteration  13: 2043907.839 ops/s
# Warmup Iteration  14: 2041946.421 ops/s
# Warmup Iteration  15: 2040860.544 ops/s
# Warmup Iteration  16: 2042821.399 ops/s
# Warmup Iteration  17: 2022453.801 ops/s
# Warmup Iteration  18: 2014402.062 ops/s
# Warmup Iteration  19: 2019019.865 ops/s
# Warmup Iteration  20: 2020987.169 ops/s
# Warmup Iteration  21: 2023542.617 ops/s
# Warmup Iteration  22: 2025053.958 ops/s
# Warmup Iteration  23: 2020223.264 ops/s
# Warmup Iteration  24: 2021242.502 ops/s
# Warmup Iteration  25: 2023914.764 ops/s
# Warmup Iteration  26: 2023273.031 ops/s
# Warmup Iteration  27: 2018668.222 ops/s
# Warmup Iteration  28: 2025471.691 ops/s
# Warmup Iteration  29: 2019079.063 ops/s
# Warmup Iteration  30: 2018003.510 ops/s
Iteration   1: 2022166.282 ops/s
Iteration   2: 2019924.010 ops/s
Iteration   3: 2021955.186 ops/s
Iteration   4: 2015360.127 ops/s
Iteration   5: 2012255.477 ops/s
Iteration   6: 2017690.644 ops/s
Iteration   7: 2015172.557 ops/s
Iteration   8: 2019685.134 ops/s
Iteration   9: 2027123.164 ops/s
Iteration  10: 2013880.267 ops/s
Iteration  11: 2022716.876 ops/s
Iteration  12: 2022241.646 ops/s
Iteration  13: 2022973.454 ops/s
Iteration  14: 2019287.431 ops/s
Iteration  15: 2015890.830 ops/s
Iteration  16: 2025492.502 ops/s
Iteration  17: 2027502.875 ops/s
Iteration  18: 2017932.458 ops/s
Iteration  19: 2030629.691 ops/s
Iteration  20: 2024649.875 ops/s
Iteration  21: 2013573.196 ops/s
Iteration  22: 2026227.309 ops/s
Iteration  23: 2024107.368 ops/s
Iteration  24: 2019181.710 ops/s
Iteration  25: 2015980.442 ops/s
Iteration  26: 2017906.337 ops/s
Iteration  27: 2030954.826 ops/s
Iteration  28: 2023776.488 ops/s
Iteration  29: 2012904.133 ops/s
Iteration  30: 2030962.447 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctBy":
  2021003.491 ±(99.9%) 3646.116 ops/s [Average]
  (min, avg, max) = (2012255.477, 2021003.491, 2030962.447), stdev = 5457.335
  CI (99.9%): [2017357.375, 2024649.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_distinctBy  thrpt   30  2021003.491 ± 3646.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980278.109 ops/s
# Warmup Iteration   2: 1996858.741 ops/s
# Warmup Iteration   3: 2134468.409 ops/s
# Warmup Iteration   4: 2147780.958 ops/s
# Warmup Iteration   5: 1751720.527 ops/s
# Warmup Iteration   6: 2097467.681 ops/s
# Warmup Iteration   7: 2100902.588 ops/s
# Warmup Iteration   8: 2104630.278 ops/s
# Warmup Iteration   9: 2110618.936 ops/s
# Warmup Iteration  10: 2099871.591 ops/s
# Warmup Iteration  11: 2093417.502 ops/s
# Warmup Iteration  12: 2104896.122 ops/s
# Warmup Iteration  13: 2098699.612 ops/s
# Warmup Iteration  14: 2104796.532 ops/s
# Warmup Iteration  15: 2105390.292 ops/s
# Warmup Iteration  16: 2101105.732 ops/s
# Warmup Iteration  17: 2152477.879 ops/s
# Warmup Iteration  18: 2158160.322 ops/s
# Warmup Iteration  19: 2161712.897 ops/s
# Warmup Iteration  20: 2159153.968 ops/s
# Warmup Iteration  21: 2156519.084 ops/s
# Warmup Iteration  22: 2161710.805 ops/s
# Warmup Iteration  23: 2156548.427 ops/s
# Warmup Iteration  24: 2158014.880 ops/s
# Warmup Iteration  25: 2156741.864 ops/s
# Warmup Iteration  26: 2153007.137 ops/s
# Warmup Iteration  27: 2159284.767 ops/s
# Warmup Iteration  28: 2151636.743 ops/s
# Warmup Iteration  29: 2160779.824 ops/s
# Warmup Iteration  30: 2156734.652 ops/s
Iteration   1: 2155047.237 ops/s
Iteration   2: 2146715.994 ops/s
Iteration   3: 2146087.412 ops/s
Iteration   4: 2149356.632 ops/s
Iteration   5: 2162639.974 ops/s
Iteration   6: 2156951.025 ops/s
Iteration   7: 2152647.982 ops/s
Iteration   8: 2155759.174 ops/s
Iteration   9: 2160365.145 ops/s
Iteration  10: 2153827.041 ops/s
Iteration  11: 2160539.879 ops/s
Iteration  12: 2160915.601 ops/s
Iteration  13: 2149448.699 ops/s
Iteration  14: 2156286.329 ops/s
Iteration  15: 2155905.792 ops/s
Iteration  16: 2158788.981 ops/s
Iteration  17: 2154288.989 ops/s
Iteration  18: 2153090.316 ops/s
Iteration  19: 2160746.858 ops/s
Iteration  20: 2168949.832 ops/s
Iteration  21: 2154814.488 ops/s
Iteration  22: 2159203.127 ops/s
Iteration  23: 2158941.054 ops/s
Iteration  24: 2160475.558 ops/s
Iteration  25: 2150014.900 ops/s
Iteration  26: 2155136.762 ops/s
Iteration  27: 2159226.298 ops/s
Iteration  28: 2163631.587 ops/s
Iteration  29: 2157363.522 ops/s
Iteration  30: 2158385.323 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2156518.384 ±(99.9%) 3401.736 ops/s [Average]
  (min, avg, max) = (2146087.412, 2156518.384, 2168949.832), stdev = 5091.559
  CI (99.9%): [2153116.648, 2159920.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2156518.384 ± 3401.736  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 761290.287 ops/s
# Warmup Iteration   2: 1272934.780 ops/s
# Warmup Iteration   3: 1461062.567 ops/s
# Warmup Iteration   4: 1464926.693 ops/s
# Warmup Iteration   5: 1467758.205 ops/s
# Warmup Iteration   6: 1205775.950 ops/s
# Warmup Iteration   7: 1467964.075 ops/s
# Warmup Iteration   8: 1467683.204 ops/s
# Warmup Iteration   9: 1467255.948 ops/s
# Warmup Iteration  10: 1467445.061 ops/s
# Warmup Iteration  11: 1467176.989 ops/s
# Warmup Iteration  12: 1461718.674 ops/s
# Warmup Iteration  13: 1466527.865 ops/s
# Warmup Iteration  14: 1467098.034 ops/s
# Warmup Iteration  15: 1465992.420 ops/s
# Warmup Iteration  16: 1465727.992 ops/s
# Warmup Iteration  17: 1467393.534 ops/s
# Warmup Iteration  18: 1466831.048 ops/s
# Warmup Iteration  19: 1465612.791 ops/s
# Warmup Iteration  20: 1466960.727 ops/s
# Warmup Iteration  21: 1465033.664 ops/s
# Warmup Iteration  22: 1466804.356 ops/s
# Warmup Iteration  23: 1466111.127 ops/s
# Warmup Iteration  24: 1467005.487 ops/s
# Warmup Iteration  25: 1468546.641 ops/s
# Warmup Iteration  26: 1465416.453 ops/s
# Warmup Iteration  27: 1467581.302 ops/s
# Warmup Iteration  28: 1467319.434 ops/s
# Warmup Iteration  29: 1467578.426 ops/s
# Warmup Iteration  30: 1466019.118 ops/s
Iteration   1: 1468099.608 ops/s
Iteration   2: 1467882.183 ops/s
Iteration   3: 1465004.874 ops/s
Iteration   4: 1466973.255 ops/s
Iteration   5: 1459648.768 ops/s
Iteration   6: 1467915.208 ops/s
Iteration   7: 1462332.194 ops/s
Iteration   8: 1466916.713 ops/s
Iteration   9: 1469668.652 ops/s
Iteration  10: 1465379.533 ops/s
Iteration  11: 1459739.506 ops/s
Iteration  12: 1467093.590 ops/s
Iteration  13: 1469817.452 ops/s
Iteration  14: 1471793.308 ops/s
Iteration  15: 1466244.095 ops/s
Iteration  16: 1462708.133 ops/s
Iteration  17: 1469996.943 ops/s
Iteration  18: 1466395.080 ops/s
Iteration  19: 1465652.054 ops/s
Iteration  20: 1463654.882 ops/s
Iteration  21: 1468684.151 ops/s
Iteration  22: 1461364.718 ops/s
Iteration  23: 1463799.043 ops/s
Iteration  24: 1469599.457 ops/s
Iteration  25: 1465521.508 ops/s
Iteration  26: 1469999.480 ops/s
Iteration  27: 1467803.507 ops/s
Iteration  28: 1471474.416 ops/s
Iteration  29: 1464244.192 ops/s
Iteration  30: 1467601.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop":
  1466433.612 ±(99.9%) 2145.833 ops/s [Average]
  (min, avg, max) = (1459648.768, 1466433.612, 1471793.308), stdev = 3211.782
  CI (99.9%): [1464287.779, 1468579.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_drop  thrpt   30  1466433.612 ± 2145.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 890566.281 ops/s
# Warmup Iteration   2: 2065422.925 ops/s
# Warmup Iteration   3: 2072600.769 ops/s
# Warmup Iteration   4: 1742397.520 ops/s
# Warmup Iteration   5: 2075117.012 ops/s
# Warmup Iteration   6: 2084246.742 ops/s
# Warmup Iteration   7: 2084066.927 ops/s
# Warmup Iteration   8: 2077374.341 ops/s
# Warmup Iteration   9: 2082182.894 ops/s
# Warmup Iteration  10: 2085773.341 ops/s
# Warmup Iteration  11: 2080561.054 ops/s
# Warmup Iteration  12: 2081021.312 ops/s
# Warmup Iteration  13: 2083578.556 ops/s
# Warmup Iteration  14: 2077656.979 ops/s
# Warmup Iteration  15: 2082138.887 ops/s
# Warmup Iteration  16: 2081270.576 ops/s
# Warmup Iteration  17: 2079223.489 ops/s
# Warmup Iteration  18: 2082910.179 ops/s
# Warmup Iteration  19: 2082100.694 ops/s
# Warmup Iteration  20: 2075699.121 ops/s
# Warmup Iteration  21: 2083519.485 ops/s
# Warmup Iteration  22: 2080090.592 ops/s
# Warmup Iteration  23: 2076632.077 ops/s
# Warmup Iteration  24: 2082470.288 ops/s
# Warmup Iteration  25: 2082573.716 ops/s
# Warmup Iteration  26: 2075834.787 ops/s
# Warmup Iteration  27: 2080024.975 ops/s
# Warmup Iteration  28: 2083136.677 ops/s
# Warmup Iteration  29: 2081697.372 ops/s
# Warmup Iteration  30: 2084731.830 ops/s
Iteration   1: 2074714.112 ops/s
Iteration   2: 2080182.197 ops/s
Iteration   3: 2082099.197 ops/s
Iteration   4: 2087686.899 ops/s
Iteration   5: 2077495.268 ops/s
Iteration   6: 2081020.945 ops/s
Iteration   7: 2078009.611 ops/s
Iteration   8: 2081765.973 ops/s
Iteration   9: 2078498.027 ops/s
Iteration  10: 2077526.759 ops/s
Iteration  11: 2079128.367 ops/s
Iteration  12: 2074317.643 ops/s
Iteration  13: 2084238.146 ops/s
Iteration  14: 2080664.509 ops/s
Iteration  15: 2083062.190 ops/s
Iteration  16: 2078038.259 ops/s
Iteration  17: 2076661.705 ops/s
Iteration  18: 2083141.478 ops/s
Iteration  19: 2075899.586 ops/s
Iteration  20: 2082272.864 ops/s
Iteration  21: 2086729.651 ops/s
Iteration  22: 2074351.670 ops/s
Iteration  23: 2079497.549 ops/s
Iteration  24: 2075861.019 ops/s
Iteration  25: 2082658.256 ops/s
Iteration  26: 2074857.201 ops/s
Iteration  27: 2077407.801 ops/s
Iteration  28: 2079662.314 ops/s
Iteration  29: 2080171.576 ops/s
Iteration  30: 2086056.663 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_dropWhile":
  2079789.248 ±(99.9%) 2457.035 ops/s [Average]
  (min, avg, max) = (2074317.643, 2079789.248, 2087686.899), stdev = 3677.574
  CI (99.9%): [2077332.213, 2082246.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_dropWhile  thrpt   30  2079789.248 ± 2457.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678658.023 ops/s
# Warmup Iteration   2: 779098.546 ops/s
# Warmup Iteration   3: 983183.136 ops/s
# Warmup Iteration   4: 983647.085 ops/s
# Warmup Iteration   5: 984778.339 ops/s
# Warmup Iteration   6: 980023.570 ops/s
# Warmup Iteration   7: 982837.860 ops/s
# Warmup Iteration   8: 981875.104 ops/s
# Warmup Iteration   9: 982996.499 ops/s
# Warmup Iteration  10: 825107.263 ops/s
# Warmup Iteration  11: 978990.136 ops/s
# Warmup Iteration  12: 985502.660 ops/s
# Warmup Iteration  13: 985655.972 ops/s
# Warmup Iteration  14: 983146.530 ops/s
# Warmup Iteration  15: 984258.235 ops/s
# Warmup Iteration  16: 986465.713 ops/s
# Warmup Iteration  17: 1045014.135 ops/s
# Warmup Iteration  18: 1045267.694 ops/s
# Warmup Iteration  19: 1048508.297 ops/s
# Warmup Iteration  20: 1045865.526 ops/s
# Warmup Iteration  21: 1046190.603 ops/s
# Warmup Iteration  22: 1047708.868 ops/s
# Warmup Iteration  23: 1048154.702 ops/s
# Warmup Iteration  24: 1042688.220 ops/s
# Warmup Iteration  25: 1044337.648 ops/s
# Warmup Iteration  26: 1042640.802 ops/s
# Warmup Iteration  27: 1042927.292 ops/s
# Warmup Iteration  28: 1045851.492 ops/s
# Warmup Iteration  29: 1045208.281 ops/s
# Warmup Iteration  30: 1045845.288 ops/s
Iteration   1: 1039810.580 ops/s
Iteration   2: 1043180.772 ops/s
Iteration   3: 1041160.867 ops/s
Iteration   4: 1040008.478 ops/s
Iteration   5: 1045297.047 ops/s
Iteration   6: 1041196.193 ops/s
Iteration   7: 1043416.939 ops/s
Iteration   8: 1042243.942 ops/s
Iteration   9: 1047179.871 ops/s
Iteration  10: 1041703.466 ops/s
Iteration  11: 1046320.204 ops/s
Iteration  12: 1047255.064 ops/s
Iteration  13: 1043580.513 ops/s
Iteration  14: 1047606.037 ops/s
Iteration  15: 1046505.911 ops/s
Iteration  16: 1039635.989 ops/s
Iteration  17: 1045161.240 ops/s
Iteration  18: 1045685.878 ops/s
Iteration  19: 1042104.399 ops/s
Iteration  20: 1046924.455 ops/s
Iteration  21: 1045581.622 ops/s
Iteration  22: 1041341.857 ops/s
Iteration  23: 1045872.559 ops/s
Iteration  24: 1044284.035 ops/s
Iteration  25: 1041237.334 ops/s
Iteration  26: 1044927.456 ops/s
Iteration  27: 1046891.153 ops/s
Iteration  28: 1044499.332 ops/s
Iteration  29: 1042870.376 ops/s
Iteration  30: 1039365.245 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_drop_throws":
  1043761.627 ±(99.9%) 1722.208 ops/s [Average]
  (min, avg, max) = (1039365.245, 1043761.627, 1047606.037), stdev = 2577.720
  CI (99.9%): [1042039.419, 1045483.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_drop_throws  thrpt   30  1043761.627 ± 1722.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10441103.781 ops/s
# Warmup Iteration   2: 19955852.969 ops/s
# Warmup Iteration   3: 17451945.484 ops/s
# Warmup Iteration   4: 20297550.868 ops/s
# Warmup Iteration   5: 20255178.550 ops/s
# Warmup Iteration   6: 20235393.083 ops/s
# Warmup Iteration   7: 20205540.267 ops/s
# Warmup Iteration   8: 20273385.055 ops/s
# Warmup Iteration   9: 20322732.163 ops/s
# Warmup Iteration  10: 20241848.987 ops/s
# Warmup Iteration  11: 20253961.644 ops/s
# Warmup Iteration  12: 20238211.154 ops/s
# Warmup Iteration  13: 20289811.743 ops/s
# Warmup Iteration  14: 20259964.193 ops/s
# Warmup Iteration  15: 20290246.117 ops/s
# Warmup Iteration  16: 20200675.521 ops/s
# Warmup Iteration  17: 20265615.247 ops/s
# Warmup Iteration  18: 20268789.638 ops/s
# Warmup Iteration  19: 20263343.183 ops/s
# Warmup Iteration  20: 20236342.707 ops/s
# Warmup Iteration  21: 20273750.566 ops/s
# Warmup Iteration  22: 20254735.937 ops/s
# Warmup Iteration  23: 20259591.964 ops/s
# Warmup Iteration  24: 20289190.435 ops/s
# Warmup Iteration  25: 20291805.799 ops/s
# Warmup Iteration  26: 20340336.820 ops/s
# Warmup Iteration  27: 20305169.053 ops/s
# Warmup Iteration  28: 20234131.369 ops/s
# Warmup Iteration  29: 20320075.085 ops/s
# Warmup Iteration  30: 20273947.131 ops/s
Iteration   1: 20238044.879 ops/s
Iteration   2: 20218483.789 ops/s
Iteration   3: 20252796.204 ops/s
Iteration   4: 20162018.390 ops/s
Iteration   5: 20321121.331 ops/s
Iteration   6: 20327581.803 ops/s
Iteration   7: 20217780.698 ops/s
Iteration   8: 20236749.161 ops/s
Iteration   9: 20371545.977 ops/s
Iteration  10: 20267930.631 ops/s
Iteration  11: 20184671.107 ops/s
Iteration  12: 20223636.447 ops/s
Iteration  13: 20266536.587 ops/s
Iteration  14: 20212550.287 ops/s
Iteration  15: 20243573.662 ops/s
Iteration  16: 20322325.135 ops/s
Iteration  17: 20345065.378 ops/s
Iteration  18: 20143146.082 ops/s
Iteration  19: 20262870.326 ops/s
Iteration  20: 20265894.588 ops/s
Iteration  21: 20304509.039 ops/s
Iteration  22: 20338378.672 ops/s
Iteration  23: 20338607.416 ops/s
Iteration  24: 20302930.747 ops/s
Iteration  25: 20305962.291 ops/s
Iteration  26: 20272878.237 ops/s
Iteration  27: 20313000.056 ops/s
Iteration  28: 20235910.822 ops/s
Iteration  29: 20227550.014 ops/s
Iteration  30: 20266151.214 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_empty":
  20266340.032 ±(99.9%) 37439.763 ops/s [Average]
  (min, avg, max) = (20143146.082, 20266340.032, 20371545.977), stdev = 56038.079
  CI (99.9%): [20228900.269, 20303779.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_empty  thrpt   30  20266340.032 ± 37439.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100786.819 ops/s
# Warmup Iteration   2: 238323.075 ops/s
# Warmup Iteration   3: 263299.958 ops/s
# Warmup Iteration   4: 264732.696 ops/s
# Warmup Iteration   5: 220666.461 ops/s
# Warmup Iteration   6: 265248.003 ops/s
# Warmup Iteration   7: 265446.351 ops/s
# Warmup Iteration   8: 265355.029 ops/s
# Warmup Iteration   9: 265110.035 ops/s
# Warmup Iteration  10: 264656.806 ops/s
# Warmup Iteration  11: 265249.405 ops/s
# Warmup Iteration  12: 264780.243 ops/s
# Warmup Iteration  13: 264685.770 ops/s
# Warmup Iteration  14: 264869.309 ops/s
# Warmup Iteration  15: 264827.824 ops/s
# Warmup Iteration  16: 264655.413 ops/s
# Warmup Iteration  17: 265052.736 ops/s
# Warmup Iteration  18: 265341.834 ops/s
# Warmup Iteration  19: 265039.225 ops/s
# Warmup Iteration  20: 265155.467 ops/s
# Warmup Iteration  21: 265048.146 ops/s
# Warmup Iteration  22: 264968.912 ops/s
# Warmup Iteration  23: 265519.377 ops/s
# Warmup Iteration  24: 265102.778 ops/s
# Warmup Iteration  25: 264899.180 ops/s
# Warmup Iteration  26: 265403.956 ops/s
# Warmup Iteration  27: 265367.695 ops/s
# Warmup Iteration  28: 265038.450 ops/s
# Warmup Iteration  29: 265195.017 ops/s
# Warmup Iteration  30: 265410.552 ops/s
Iteration   1: 264662.831 ops/s
Iteration   2: 265134.702 ops/s
Iteration   3: 265674.007 ops/s
Iteration   4: 265877.989 ops/s
Iteration   5: 265005.382 ops/s
Iteration   6: 265159.676 ops/s
Iteration   7: 264638.682 ops/s
Iteration   8: 265290.111 ops/s
Iteration   9: 264971.426 ops/s
Iteration  10: 264125.037 ops/s
Iteration  11: 264638.526 ops/s
Iteration  12: 264984.430 ops/s
Iteration  13: 265378.930 ops/s
Iteration  14: 265932.154 ops/s
Iteration  15: 264905.637 ops/s
Iteration  16: 265250.887 ops/s
Iteration  17: 265401.467 ops/s
Iteration  18: 265574.637 ops/s
Iteration  19: 264696.932 ops/s
Iteration  20: 265836.266 ops/s
Iteration  21: 265384.097 ops/s
Iteration  22: 264220.254 ops/s
Iteration  23: 264941.022 ops/s
Iteration  24: 265089.089 ops/s
Iteration  25: 264638.709 ops/s
Iteration  26: 265243.062 ops/s
Iteration  27: 264884.228 ops/s
Iteration  28: 264626.910 ops/s
Iteration  29: 265029.756 ops/s
Iteration  30: 264964.510 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_equalsAndHashCode":
  265072.045 ±(99.9%) 299.227 ops/s [Average]
  (min, avg, max) = (264125.037, 265072.045, 265932.154), stdev = 447.869
  CI (99.9%): [264772.818, 265371.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  265072.045 ± 299.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 406797.787 ops/s
# Warmup Iteration   2: 601038.343 ops/s
# Warmup Iteration   3: 728421.252 ops/s
# Warmup Iteration   4: 723549.081 ops/s
# Warmup Iteration   5: 726841.256 ops/s
# Warmup Iteration   6: 728027.709 ops/s
# Warmup Iteration   7: 606606.503 ops/s
# Warmup Iteration   8: 725624.807 ops/s
# Warmup Iteration   9: 726763.746 ops/s
# Warmup Iteration  10: 725443.809 ops/s
# Warmup Iteration  11: 727481.849 ops/s
# Warmup Iteration  12: 727220.402 ops/s
# Warmup Iteration  13: 725943.857 ops/s
# Warmup Iteration  14: 727788.532 ops/s
# Warmup Iteration  15: 727494.679 ops/s
# Warmup Iteration  16: 727615.872 ops/s
# Warmup Iteration  17: 730639.164 ops/s
# Warmup Iteration  18: 730386.390 ops/s
# Warmup Iteration  19: 731748.620 ops/s
# Warmup Iteration  20: 729279.576 ops/s
# Warmup Iteration  21: 729731.123 ops/s
# Warmup Iteration  22: 728095.977 ops/s
# Warmup Iteration  23: 729989.932 ops/s
# Warmup Iteration  24: 727657.090 ops/s
# Warmup Iteration  25: 729688.760 ops/s
# Warmup Iteration  26: 730186.047 ops/s
# Warmup Iteration  27: 730029.119 ops/s
# Warmup Iteration  28: 727919.401 ops/s
# Warmup Iteration  29: 729967.976 ops/s
# Warmup Iteration  30: 728149.360 ops/s
Iteration   1: 728827.424 ops/s
Iteration   2: 731224.477 ops/s
Iteration   3: 730246.398 ops/s
Iteration   4: 728088.367 ops/s
Iteration   5: 729163.781 ops/s
Iteration   6: 728410.497 ops/s
Iteration   7: 729488.124 ops/s
Iteration   8: 726660.631 ops/s
Iteration   9: 728854.940 ops/s
Iteration  10: 726197.040 ops/s
Iteration  11: 733109.565 ops/s
Iteration  12: 729294.403 ops/s
Iteration  13: 727162.314 ops/s
Iteration  14: 728324.361 ops/s
Iteration  15: 730555.760 ops/s
Iteration  16: 728014.057 ops/s
Iteration  17: 729358.742 ops/s
Iteration  18: 728959.206 ops/s
Iteration  19: 727207.014 ops/s
Iteration  20: 730112.054 ops/s
Iteration  21: 730150.109 ops/s
Iteration  22: 727561.016 ops/s
Iteration  23: 731007.983 ops/s
Iteration  24: 725989.749 ops/s
Iteration  25: 731957.726 ops/s
Iteration  26: 727669.967 ops/s
Iteration  27: 730348.087 ops/s
Iteration  28: 725269.561 ops/s
Iteration  29: 730517.850 ops/s
Iteration  30: 732243.712 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollect":
  729065.830 ±(99.9%) 1274.568 ops/s [Average]
  (min, avg, max) = (725269.561, 729065.830, 733109.565), stdev = 1907.714
  CI (99.9%): [727791.262, 730340.399] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollect  thrpt   30  729065.830 ± 1274.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1160994.162 ops/s
# Warmup Iteration   2: 3049939.485 ops/s
# Warmup Iteration   3: 3093729.177 ops/s
# Warmup Iteration   4: 2534010.510 ops/s
# Warmup Iteration   5: 3096827.864 ops/s
# Warmup Iteration   6: 3090664.972 ops/s
# Warmup Iteration   7: 3093827.233 ops/s
# Warmup Iteration   8: 3089862.129 ops/s
# Warmup Iteration   9: 3094065.821 ops/s
# Warmup Iteration  10: 3091846.018 ops/s
# Warmup Iteration  11: 3082502.383 ops/s
# Warmup Iteration  12: 3095125.836 ops/s
# Warmup Iteration  13: 3087737.329 ops/s
# Warmup Iteration  14: 3078749.064 ops/s
# Warmup Iteration  15: 3090915.931 ops/s
# Warmup Iteration  16: 3096942.355 ops/s
# Warmup Iteration  17: 3093166.921 ops/s
# Warmup Iteration  18: 3098211.287 ops/s
# Warmup Iteration  19: 3092141.061 ops/s
# Warmup Iteration  20: 3098044.093 ops/s
# Warmup Iteration  21: 3095213.815 ops/s
# Warmup Iteration  22: 3102771.119 ops/s
# Warmup Iteration  23: 3090857.547 ops/s
# Warmup Iteration  24: 3098321.714 ops/s
# Warmup Iteration  25: 3102177.194 ops/s
# Warmup Iteration  26: 3103401.551 ops/s
# Warmup Iteration  27: 3087505.480 ops/s
# Warmup Iteration  28: 3092678.365 ops/s
# Warmup Iteration  29: 3093250.472 ops/s
# Warmup Iteration  30: 3103411.890 ops/s
Iteration   1: 3097522.482 ops/s
Iteration   2: 3095260.841 ops/s
Iteration   3: 3097948.773 ops/s
Iteration   4: 3100594.699 ops/s
Iteration   5: 3103404.222 ops/s
Iteration   6: 3100812.902 ops/s
Iteration   7: 3101016.525 ops/s
Iteration   8: 3098811.991 ops/s
Iteration   9: 3100711.960 ops/s
Iteration  10: 3106034.900 ops/s
Iteration  11: 3097742.225 ops/s
Iteration  12: 3095352.645 ops/s
Iteration  13: 3099481.312 ops/s
Iteration  14: 3093840.505 ops/s
Iteration  15: 3107886.448 ops/s
Iteration  16: 3102086.862 ops/s
Iteration  17: 3094279.771 ops/s
Iteration  18: 3094976.495 ops/s
Iteration  19: 3099401.581 ops/s
Iteration  20: 3101989.721 ops/s
Iteration  21: 3095118.390 ops/s
Iteration  22: 3097971.830 ops/s
Iteration  23: 3097772.365 ops/s
Iteration  24: 3100669.016 ops/s
Iteration  25: 3100928.112 ops/s
Iteration  26: 3097672.620 ops/s
Iteration  27: 3086614.044 ops/s
Iteration  28: 3093321.043 ops/s
Iteration  29: 3092284.162 ops/s
Iteration  30: 3101797.365 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectBoolean":
  3098443.527 ±(99.9%) 2861.636 ops/s [Average]
  (min, avg, max) = (3086614.044, 3098443.527, 3107886.448), stdev = 4283.163
  CI (99.9%): [3095581.891, 3101305.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3098443.527 ± 2861.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661990.226 ops/s
# Warmup Iteration   2: 1197237.280 ops/s
# Warmup Iteration   3: 1343628.568 ops/s
# Warmup Iteration   4: 1348874.290 ops/s
# Warmup Iteration   5: 1349846.722 ops/s
# Warmup Iteration   6: 1133132.555 ops/s
# Warmup Iteration   7: 1348222.761 ops/s
# Warmup Iteration   8: 1348201.265 ops/s
# Warmup Iteration   9: 1347387.349 ops/s
# Warmup Iteration  10: 1346841.347 ops/s
# Warmup Iteration  11: 1351179.401 ops/s
# Warmup Iteration  12: 1348674.801 ops/s
# Warmup Iteration  13: 1348165.022 ops/s
# Warmup Iteration  14: 1349931.661 ops/s
# Warmup Iteration  15: 1350501.520 ops/s
# Warmup Iteration  16: 1348370.912 ops/s
# Warmup Iteration  17: 1349938.432 ops/s
# Warmup Iteration  18: 1350565.284 ops/s
# Warmup Iteration  19: 1350666.227 ops/s
# Warmup Iteration  20: 1353086.279 ops/s
# Warmup Iteration  21: 1350363.581 ops/s
# Warmup Iteration  22: 1349412.621 ops/s
# Warmup Iteration  23: 1352068.209 ops/s
# Warmup Iteration  24: 1350072.773 ops/s
# Warmup Iteration  25: 1351452.963 ops/s
# Warmup Iteration  26: 1348711.555 ops/s
# Warmup Iteration  27: 1350414.654 ops/s
# Warmup Iteration  28: 1350055.162 ops/s
# Warmup Iteration  29: 1349266.010 ops/s
# Warmup Iteration  30: 1347359.649 ops/s
Iteration   1: 1347427.397 ops/s
Iteration   2: 1343144.418 ops/s
Iteration   3: 1352367.108 ops/s
Iteration   4: 1351563.300 ops/s
Iteration   5: 1346344.791 ops/s
Iteration   6: 1347602.559 ops/s
Iteration   7: 1348855.394 ops/s
Iteration   8: 1350102.679 ops/s
Iteration   9: 1354170.350 ops/s
Iteration  10: 1351821.112 ops/s
Iteration  11: 1348111.463 ops/s
Iteration  12: 1349935.545 ops/s
Iteration  13: 1351231.344 ops/s
Iteration  14: 1347755.233 ops/s
Iteration  15: 1351943.327 ops/s
Iteration  16: 1352633.147 ops/s
Iteration  17: 1349190.562 ops/s
Iteration  18: 1353010.208 ops/s
Iteration  19: 1349436.970 ops/s
Iteration  20: 1350276.736 ops/s
Iteration  21: 1354233.548 ops/s
Iteration  22: 1351701.603 ops/s
Iteration  23: 1350449.362 ops/s
Iteration  24: 1350785.351 ops/s
Iteration  25: 1351053.234 ops/s
Iteration  26: 1352696.517 ops/s
Iteration  27: 1351324.442 ops/s
Iteration  28: 1352704.399 ops/s
Iteration  29: 1349166.286 ops/s
Iteration  30: 1347499.859 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectByte":
  1350284.608 ±(99.9%) 1652.209 ops/s [Average]
  (min, avg, max) = (1343144.418, 1350284.608, 1354233.548), stdev = 2472.949
  CI (99.9%): [1348632.399, 1351936.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1350284.608 ± 1652.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 800658.307 ops/s
# Warmup Iteration   2: 2055770.335 ops/s
# Warmup Iteration   3: 2069585.480 ops/s
# Warmup Iteration   4: 1735420.752 ops/s
# Warmup Iteration   5: 2076684.371 ops/s
# Warmup Iteration   6: 2076517.435 ops/s
# Warmup Iteration   7: 2070053.139 ops/s
# Warmup Iteration   8: 2076858.192 ops/s
# Warmup Iteration   9: 2074149.009 ops/s
# Warmup Iteration  10: 2073787.052 ops/s
# Warmup Iteration  11: 2074778.785 ops/s
# Warmup Iteration  12: 2073461.841 ops/s
# Warmup Iteration  13: 2076773.965 ops/s
# Warmup Iteration  14: 2071313.674 ops/s
# Warmup Iteration  15: 2071327.144 ops/s
# Warmup Iteration  16: 2073224.350 ops/s
# Warmup Iteration  17: 2073868.996 ops/s
# Warmup Iteration  18: 2072054.789 ops/s
# Warmup Iteration  19: 2077610.633 ops/s
# Warmup Iteration  20: 2072266.655 ops/s
# Warmup Iteration  21: 2079722.633 ops/s
# Warmup Iteration  22: 2074034.112 ops/s
# Warmup Iteration  23: 2074890.115 ops/s
# Warmup Iteration  24: 2074166.146 ops/s
# Warmup Iteration  25: 2078976.556 ops/s
# Warmup Iteration  26: 2075633.501 ops/s
# Warmup Iteration  27: 2069265.113 ops/s
# Warmup Iteration  28: 2071213.298 ops/s
# Warmup Iteration  29: 2076599.072 ops/s
# Warmup Iteration  30: 2077882.690 ops/s
Iteration   1: 2066226.919 ops/s
Iteration   2: 2076774.672 ops/s
Iteration   3: 2074265.993 ops/s
Iteration   4: 2067621.065 ops/s
Iteration   5: 2075917.340 ops/s
Iteration   6: 2074212.023 ops/s
Iteration   7: 2077872.109 ops/s
Iteration   8: 2079580.768 ops/s
Iteration   9: 2071764.389 ops/s
Iteration  10: 2078360.787 ops/s
Iteration  11: 2076156.330 ops/s
Iteration  12: 2072631.749 ops/s
Iteration  13: 2075103.768 ops/s
Iteration  14: 2077676.569 ops/s
Iteration  15: 2067241.546 ops/s
Iteration  16: 2071742.345 ops/s
Iteration  17: 2076355.959 ops/s
Iteration  18: 2069316.572 ops/s
Iteration  19: 2073704.236 ops/s
Iteration  20: 2068391.696 ops/s
Iteration  21: 2077474.476 ops/s
Iteration  22: 2073117.360 ops/s
Iteration  23: 2072264.856 ops/s
Iteration  24: 2079296.759 ops/s
Iteration  25: 2073584.357 ops/s
Iteration  26: 2070653.327 ops/s
Iteration  27: 2076186.725 ops/s
Iteration  28: 2077537.358 ops/s
Iteration  29: 2076068.502 ops/s
Iteration  30: 2073074.453 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectChar":
  2074005.834 ±(99.9%) 2454.901 ops/s [Average]
  (min, avg, max) = (2066226.919, 2074005.834, 2079580.768), stdev = 3674.380
  CI (99.9%): [2071550.933, 2076460.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2074005.834 ± 2454.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410471.076 ops/s
# Warmup Iteration   2: 1011867.949 ops/s
# Warmup Iteration   3: 1015690.201 ops/s
# Warmup Iteration   4: 854673.811 ops/s
# Warmup Iteration   5: 1017330.944 ops/s
# Warmup Iteration   6: 1016813.927 ops/s
# Warmup Iteration   7: 1016420.931 ops/s
# Warmup Iteration   8: 1019315.984 ops/s
# Warmup Iteration   9: 1023000.516 ops/s
# Warmup Iteration  10: 1018083.773 ops/s
# Warmup Iteration  11: 1020469.264 ops/s
# Warmup Iteration  12: 1017307.102 ops/s
# Warmup Iteration  13: 1020373.974 ops/s
# Warmup Iteration  14: 1021143.750 ops/s
# Warmup Iteration  15: 1021588.964 ops/s
# Warmup Iteration  16: 1020834.323 ops/s
# Warmup Iteration  17: 1017643.109 ops/s
# Warmup Iteration  18: 1021030.771 ops/s
# Warmup Iteration  19: 1021519.708 ops/s
# Warmup Iteration  20: 1020549.754 ops/s
# Warmup Iteration  21: 1014434.764 ops/s
# Warmup Iteration  22: 1021164.079 ops/s
# Warmup Iteration  23: 1021169.026 ops/s
# Warmup Iteration  24: 1022229.913 ops/s
# Warmup Iteration  25: 1022338.118 ops/s
# Warmup Iteration  26: 1020085.697 ops/s
# Warmup Iteration  27: 1018181.467 ops/s
# Warmup Iteration  28: 1016561.351 ops/s
# Warmup Iteration  29: 1019098.596 ops/s
# Warmup Iteration  30: 1021310.951 ops/s
Iteration   1: 1020369.296 ops/s
Iteration   2: 1020587.885 ops/s
Iteration   3: 1015225.345 ops/s
Iteration   4: 1021796.614 ops/s
Iteration   5: 1015640.434 ops/s
Iteration   6: 1028068.434 ops/s
Iteration   7: 1018255.788 ops/s
Iteration   8: 1025038.601 ops/s
Iteration   9: 1020029.387 ops/s
Iteration  10: 1020578.874 ops/s
Iteration  11: 1027251.918 ops/s
Iteration  12: 1021283.420 ops/s
Iteration  13: 1019122.788 ops/s
Iteration  14: 1014552.764 ops/s
Iteration  15: 1019790.047 ops/s
Iteration  16: 1025909.362 ops/s
Iteration  17: 1017450.159 ops/s
Iteration  18: 1022105.706 ops/s
Iteration  19: 1023653.878 ops/s
Iteration  20: 1016598.526 ops/s
Iteration  21: 1013789.312 ops/s
Iteration  22: 1021219.782 ops/s
Iteration  23: 1016333.902 ops/s
Iteration  24: 1022275.628 ops/s
Iteration  25: 1020407.203 ops/s
Iteration  26: 1019569.076 ops/s
Iteration  27: 1021107.606 ops/s
Iteration  28: 1019641.779 ops/s
Iteration  29: 1018161.971 ops/s
Iteration  30: 1020671.402 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectDouble":
  1020216.230 ±(99.9%) 2346.416 ops/s [Average]
  (min, avg, max) = (1013789.312, 1020216.230, 1028068.434), stdev = 3512.005
  CI (99.9%): [1017869.814, 1022562.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1020216.230 ± 2346.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623230.121 ops/s
# Warmup Iteration   2: 1466151.629 ops/s
# Warmup Iteration   3: 1533554.974 ops/s
# Warmup Iteration   4: 1309633.813 ops/s
# Warmup Iteration   5: 1513651.516 ops/s
# Warmup Iteration   6: 1535294.730 ops/s
# Warmup Iteration   7: 1535770.456 ops/s
# Warmup Iteration   8: 1538953.003 ops/s
# Warmup Iteration   9: 1538417.374 ops/s
# Warmup Iteration  10: 1534818.651 ops/s
# Warmup Iteration  11: 1538711.555 ops/s
# Warmup Iteration  12: 1538445.028 ops/s
# Warmup Iteration  13: 1538542.378 ops/s
# Warmup Iteration  14: 1536804.101 ops/s
# Warmup Iteration  15: 1535619.513 ops/s
# Warmup Iteration  16: 1536265.209 ops/s
# Warmup Iteration  17: 1538935.844 ops/s
# Warmup Iteration  18: 1537699.470 ops/s
# Warmup Iteration  19: 1536089.930 ops/s
# Warmup Iteration  20: 1538817.168 ops/s
# Warmup Iteration  21: 1535628.224 ops/s
# Warmup Iteration  22: 1538496.037 ops/s
# Warmup Iteration  23: 1536969.284 ops/s
# Warmup Iteration  24: 1539735.115 ops/s
# Warmup Iteration  25: 1535834.892 ops/s
# Warmup Iteration  26: 1536529.424 ops/s
# Warmup Iteration  27: 1536366.894 ops/s
# Warmup Iteration  28: 1537515.070 ops/s
# Warmup Iteration  29: 1533508.424 ops/s
# Warmup Iteration  30: 1539424.732 ops/s
Iteration   1: 1538067.969 ops/s
Iteration   2: 1533860.564 ops/s
Iteration   3: 1539473.683 ops/s
Iteration   4: 1531021.763 ops/s
Iteration   5: 1535775.493 ops/s
Iteration   6: 1540200.766 ops/s
Iteration   7: 1540130.898 ops/s
Iteration   8: 1537219.410 ops/s
Iteration   9: 1539116.883 ops/s
Iteration  10: 1534950.066 ops/s
Iteration  11: 1539334.051 ops/s
Iteration  12: 1535793.424 ops/s
Iteration  13: 1536473.596 ops/s
Iteration  14: 1537661.262 ops/s
Iteration  15: 1536563.299 ops/s
Iteration  16: 1531433.774 ops/s
Iteration  17: 1536799.051 ops/s
Iteration  18: 1535306.816 ops/s
Iteration  19: 1540179.269 ops/s
Iteration  20: 1535288.826 ops/s
Iteration  21: 1534991.410 ops/s
Iteration  22: 1538733.333 ops/s
Iteration  23: 1536372.361 ops/s
Iteration  24: 1536300.369 ops/s
Iteration  25: 1538296.245 ops/s
Iteration  26: 1538753.779 ops/s
Iteration  27: 1537685.168 ops/s
Iteration  28: 1537548.271 ops/s
Iteration  29: 1539589.183 ops/s
Iteration  30: 1534002.762 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectFloat":
  1536897.458 ±(99.9%) 1601.782 ops/s [Average]
  (min, avg, max) = (1531021.763, 1536897.458, 1540200.766), stdev = 2397.472
  CI (99.9%): [1535295.676, 1538499.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1536897.458 ± 1601.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788217.490 ops/s
# Warmup Iteration   2: 2083187.234 ops/s
# Warmup Iteration   3: 2036428.992 ops/s
# Warmup Iteration   4: 1774880.675 ops/s
# Warmup Iteration   5: 2086813.713 ops/s
# Warmup Iteration   6: 2083795.474 ops/s
# Warmup Iteration   7: 2081738.813 ops/s
# Warmup Iteration   8: 2081438.923 ops/s
# Warmup Iteration   9: 2080514.408 ops/s
# Warmup Iteration  10: 2070519.706 ops/s
# Warmup Iteration  11: 2083158.763 ops/s
# Warmup Iteration  12: 2082668.691 ops/s
# Warmup Iteration  13: 2082727.523 ops/s
# Warmup Iteration  14: 2083131.028 ops/s
# Warmup Iteration  15: 2077591.757 ops/s
# Warmup Iteration  16: 2081050.889 ops/s
# Warmup Iteration  17: 2084060.645 ops/s
# Warmup Iteration  18: 2080655.244 ops/s
# Warmup Iteration  19: 2083562.698 ops/s
# Warmup Iteration  20: 2075894.669 ops/s
# Warmup Iteration  21: 2082592.039 ops/s
# Warmup Iteration  22: 2080532.372 ops/s
# Warmup Iteration  23: 2079368.728 ops/s
# Warmup Iteration  24: 2081471.552 ops/s
# Warmup Iteration  25: 2077581.700 ops/s
# Warmup Iteration  26: 2086233.014 ops/s
# Warmup Iteration  27: 2083845.038 ops/s
# Warmup Iteration  28: 2083140.544 ops/s
# Warmup Iteration  29: 2078554.181 ops/s
# Warmup Iteration  30: 2076401.218 ops/s
Iteration   1: 2086418.529 ops/s
Iteration   2: 2083442.355 ops/s
Iteration   3: 2083948.994 ops/s
Iteration   4: 2077959.616 ops/s
Iteration   5: 2077794.639 ops/s
Iteration   6: 2080435.387 ops/s
Iteration   7: 2081285.139 ops/s
Iteration   8: 2088653.954 ops/s
Iteration   9: 2081115.086 ops/s
Iteration  10: 2085036.634 ops/s
Iteration  11: 2086068.150 ops/s
Iteration  12: 2087805.212 ops/s
Iteration  13: 2086161.305 ops/s
Iteration  14: 2079463.644 ops/s
Iteration  15: 2081936.489 ops/s
Iteration  16: 2080235.297 ops/s
Iteration  17: 2085338.895 ops/s
Iteration  18: 2085887.079 ops/s
Iteration  19: 2081127.741 ops/s
Iteration  20: 2089077.504 ops/s
Iteration  21: 2081750.592 ops/s
Iteration  22: 2076121.023 ops/s
Iteration  23: 2080222.617 ops/s
Iteration  24: 2084977.384 ops/s
Iteration  25: 2083534.644 ops/s
Iteration  26: 2086208.504 ops/s
Iteration  27: 2073914.624 ops/s
Iteration  28: 2082922.139 ops/s
Iteration  29: 2078246.938 ops/s
Iteration  30: 2081676.897 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectInt":
  2082625.567 ±(99.9%) 2500.671 ops/s [Average]
  (min, avg, max) = (2073914.624, 2082625.567, 2089077.504), stdev = 3742.886
  CI (99.9%): [2080124.897, 2085126.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2082625.567 ± 2500.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717418.443 ops/s
# Warmup Iteration   2: 1822282.106 ops/s
# Warmup Iteration   3: 1535872.181 ops/s
# Warmup Iteration   4: 1832450.888 ops/s
# Warmup Iteration   5: 1828626.418 ops/s
# Warmup Iteration   6: 1830638.448 ops/s
# Warmup Iteration   7: 1841899.174 ops/s
# Warmup Iteration   8: 1832486.664 ops/s
# Warmup Iteration   9: 1838178.490 ops/s
# Warmup Iteration  10: 1833470.649 ops/s
# Warmup Iteration  11: 1835921.993 ops/s
# Warmup Iteration  12: 1834963.825 ops/s
# Warmup Iteration  13: 1832902.649 ops/s
# Warmup Iteration  14: 1839413.111 ops/s
# Warmup Iteration  15: 1827467.825 ops/s
# Warmup Iteration  16: 1826739.684 ops/s
# Warmup Iteration  17: 1833111.688 ops/s
# Warmup Iteration  18: 1830253.044 ops/s
# Warmup Iteration  19: 1832503.722 ops/s
# Warmup Iteration  20: 1828133.468 ops/s
# Warmup Iteration  21: 1829461.977 ops/s
# Warmup Iteration  22: 1839149.026 ops/s
# Warmup Iteration  23: 1828710.224 ops/s
# Warmup Iteration  24: 1839155.312 ops/s
# Warmup Iteration  25: 1834865.599 ops/s
# Warmup Iteration  26: 1838735.283 ops/s
# Warmup Iteration  27: 1828288.029 ops/s
# Warmup Iteration  28: 1814774.603 ops/s
# Warmup Iteration  29: 1835511.756 ops/s
# Warmup Iteration  30: 1833100.400 ops/s
Iteration   1: 1836786.010 ops/s
Iteration   2: 1834948.269 ops/s
Iteration   3: 1831819.695 ops/s
Iteration   4: 1845379.265 ops/s
Iteration   5: 1834692.635 ops/s
Iteration   6: 1843121.912 ops/s
Iteration   7: 1840336.089 ops/s
Iteration   8: 1831897.128 ops/s
Iteration   9: 1833061.989 ops/s
Iteration  10: 1836158.266 ops/s
Iteration  11: 1833268.182 ops/s
Iteration  12: 1838914.278 ops/s
Iteration  13: 1839078.588 ops/s
Iteration  14: 1828822.976 ops/s
Iteration  15: 1829754.696 ops/s
Iteration  16: 1835808.053 ops/s
Iteration  17: 1838914.506 ops/s
Iteration  18: 1837518.383 ops/s
Iteration  19: 1842714.872 ops/s
Iteration  20: 1827309.811 ops/s
Iteration  21: 1835886.396 ops/s
Iteration  22: 1833547.958 ops/s
Iteration  23: 1833839.746 ops/s
Iteration  24: 1816476.116 ops/s
Iteration  25: 1823456.064 ops/s
Iteration  26: 1807623.273 ops/s
Iteration  27: 1831295.046 ops/s
Iteration  28: 1845166.719 ops/s
Iteration  29: 1834195.084 ops/s
Iteration  30: 1836815.895 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectLong":
  1833953.597 ±(99.9%) 5249.309 ops/s [Average]
  (min, avg, max) = (1807623.273, 1833953.597, 1845379.265), stdev = 7856.919
  CI (99.9%): [1828704.288, 1839202.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1833953.597 ± 5249.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821552.574 ops/s
# Warmup Iteration   2: 2151626.065 ops/s
# Warmup Iteration   3: 2164505.259 ops/s
# Warmup Iteration   4: 1804607.681 ops/s
# Warmup Iteration   5: 2173493.509 ops/s
# Warmup Iteration   6: 2170811.886 ops/s
# Warmup Iteration   7: 2170217.210 ops/s
# Warmup Iteration   8: 2170008.491 ops/s
# Warmup Iteration   9: 2168326.511 ops/s
# Warmup Iteration  10: 2167806.491 ops/s
# Warmup Iteration  11: 2169763.821 ops/s
# Warmup Iteration  12: 2168890.216 ops/s
# Warmup Iteration  13: 2168724.536 ops/s
# Warmup Iteration  14: 2171398.968 ops/s
# Warmup Iteration  15: 2170412.543 ops/s
# Warmup Iteration  16: 2170203.137 ops/s
# Warmup Iteration  17: 2171105.469 ops/s
# Warmup Iteration  18: 2171861.631 ops/s
# Warmup Iteration  19: 2169614.989 ops/s
# Warmup Iteration  20: 2175237.416 ops/s
# Warmup Iteration  21: 2167994.737 ops/s
# Warmup Iteration  22: 2172048.480 ops/s
# Warmup Iteration  23: 2169965.003 ops/s
# Warmup Iteration  24: 2172238.262 ops/s
# Warmup Iteration  25: 2164030.569 ops/s
# Warmup Iteration  26: 2170621.214 ops/s
# Warmup Iteration  27: 2170262.833 ops/s
# Warmup Iteration  28: 2169779.569 ops/s
# Warmup Iteration  29: 2171525.292 ops/s
# Warmup Iteration  30: 2169341.894 ops/s
Iteration   1: 2172857.767 ops/s
Iteration   2: 2175134.883 ops/s
Iteration   3: 2169237.864 ops/s
Iteration   4: 2166952.055 ops/s
Iteration   5: 2179168.518 ops/s
Iteration   6: 2171640.520 ops/s
Iteration   7: 2169128.959 ops/s
Iteration   8: 2171206.640 ops/s
Iteration   9: 2167126.639 ops/s
Iteration  10: 2169671.554 ops/s
Iteration  11: 2171445.549 ops/s
Iteration  12: 2173585.561 ops/s
Iteration  13: 2173343.279 ops/s
Iteration  14: 2171735.640 ops/s
Iteration  15: 2176223.088 ops/s
Iteration  16: 2171303.318 ops/s
Iteration  17: 2170918.322 ops/s
Iteration  18: 2176188.946 ops/s
Iteration  19: 2171514.828 ops/s
Iteration  20: 2176872.055 ops/s
Iteration  21: 2166836.943 ops/s
Iteration  22: 2171222.938 ops/s
Iteration  23: 2172248.911 ops/s
Iteration  24: 2168878.746 ops/s
Iteration  25: 2169565.950 ops/s
Iteration  26: 2167758.670 ops/s
Iteration  27: 2175999.405 ops/s
Iteration  28: 2172096.464 ops/s
Iteration  29: 2163629.518 ops/s
Iteration  30: 2166937.287 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectShort":
  2171347.694 ±(99.9%) 2350.227 ops/s [Average]
  (min, avg, max) = (2163629.518, 2171347.694, 2179168.518), stdev = 3517.710
  CI (99.9%): [2168997.467, 2173697.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2171347.694 ± 2350.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 195471.882 ops/s
# Warmup Iteration   2: 335598.859 ops/s
# Warmup Iteration   3: 407660.945 ops/s
# Warmup Iteration   4: 412061.292 ops/s
# Warmup Iteration   5: 411818.248 ops/s
# Warmup Iteration   6: 379512.625 ops/s
# Warmup Iteration   7: 365342.197 ops/s
# Warmup Iteration   8: 412412.656 ops/s
# Warmup Iteration   9: 412110.538 ops/s
# Warmup Iteration  10: 412082.088 ops/s
# Warmup Iteration  11: 411596.112 ops/s
# Warmup Iteration  12: 411431.020 ops/s
# Warmup Iteration  13: 412580.107 ops/s
# Warmup Iteration  14: 411801.572 ops/s
# Warmup Iteration  15: 412799.601 ops/s
# Warmup Iteration  16: 413080.282 ops/s
# Warmup Iteration  17: 411845.565 ops/s
# Warmup Iteration  18: 412134.967 ops/s
# Warmup Iteration  19: 412773.048 ops/s
# Warmup Iteration  20: 412050.766 ops/s
# Warmup Iteration  21: 411587.141 ops/s
# Warmup Iteration  22: 412697.193 ops/s
# Warmup Iteration  23: 412151.611 ops/s
# Warmup Iteration  24: 412528.763 ops/s
# Warmup Iteration  25: 411314.137 ops/s
# Warmup Iteration  26: 411977.000 ops/s
# Warmup Iteration  27: 412570.215 ops/s
# Warmup Iteration  28: 412734.106 ops/s
# Warmup Iteration  29: 411023.440 ops/s
# Warmup Iteration  30: 412241.964 ops/s
Iteration   1: 413428.052 ops/s
Iteration   2: 413229.411 ops/s
Iteration   3: 411834.520 ops/s
Iteration   4: 411890.699 ops/s
Iteration   5: 412145.820 ops/s
Iteration   6: 412078.410 ops/s
Iteration   7: 413120.774 ops/s
Iteration   8: 410794.403 ops/s
Iteration   9: 412357.865 ops/s
Iteration  10: 412598.034 ops/s
Iteration  11: 412665.048 ops/s
Iteration  12: 412246.943 ops/s
Iteration  13: 412689.808 ops/s
Iteration  14: 412500.475 ops/s
Iteration  15: 413234.370 ops/s
Iteration  16: 411958.275 ops/s
Iteration  17: 413435.496 ops/s
Iteration  18: 412362.536 ops/s
Iteration  19: 411509.975 ops/s
Iteration  20: 412285.708 ops/s
Iteration  21: 412567.164 ops/s
Iteration  22: 411157.183 ops/s
Iteration  23: 413056.768 ops/s
Iteration  24: 412817.531 ops/s
Iteration  25: 412130.212 ops/s
Iteration  26: 411629.621 ops/s
Iteration  27: 412982.105 ops/s
Iteration  28: 410405.168 ops/s
Iteration  29: 411334.586 ops/s
Iteration  30: 411380.055 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_flatCollectWith":
  412260.901 ±(99.9%) 516.714 ops/s [Average]
  (min, avg, max) = (410405.168, 412260.901, 413435.496), stdev = 773.393
  CI (99.9%): [411744.186, 412777.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  412260.901 ± 516.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619444.774 ops/s
# Warmup Iteration   2: 1558288.365 ops/s
# Warmup Iteration   3: 1566917.124 ops/s
# Warmup Iteration   4: 1315917.834 ops/s
# Warmup Iteration   5: 1566619.146 ops/s
# Warmup Iteration   6: 1571289.479 ops/s
# Warmup Iteration   7: 1573783.018 ops/s
# Warmup Iteration   8: 1568765.460 ops/s
# Warmup Iteration   9: 1568863.814 ops/s
# Warmup Iteration  10: 1570842.944 ops/s
# Warmup Iteration  11: 1570239.692 ops/s
# Warmup Iteration  12: 1569382.694 ops/s
# Warmup Iteration  13: 1574782.325 ops/s
# Warmup Iteration  14: 1574069.874 ops/s
# Warmup Iteration  15: 1571361.488 ops/s
# Warmup Iteration  16: 1570082.133 ops/s
# Warmup Iteration  17: 1567899.826 ops/s
# Warmup Iteration  18: 1569636.964 ops/s
# Warmup Iteration  19: 1569814.777 ops/s
# Warmup Iteration  20: 1571194.771 ops/s
# Warmup Iteration  21: 1565601.642 ops/s
# Warmup Iteration  22: 1567703.759 ops/s
# Warmup Iteration  23: 1571120.527 ops/s
# Warmup Iteration  24: 1565577.093 ops/s
# Warmup Iteration  25: 1567211.600 ops/s
# Warmup Iteration  26: 1564315.418 ops/s
# Warmup Iteration  27: 1567489.999 ops/s
# Warmup Iteration  28: 1559856.976 ops/s
# Warmup Iteration  29: 1573865.037 ops/s
# Warmup Iteration  30: 1567914.825 ops/s
Iteration   1: 1562372.418 ops/s
Iteration   2: 1569703.254 ops/s
Iteration   3: 1573587.256 ops/s
Iteration   4: 1569704.242 ops/s
Iteration   5: 1572564.214 ops/s
Iteration   6: 1569003.044 ops/s
Iteration   7: 1568966.053 ops/s
Iteration   8: 1566379.049 ops/s
Iteration   9: 1572980.445 ops/s
Iteration  10: 1570928.655 ops/s
Iteration  11: 1565041.182 ops/s
Iteration  12: 1573183.122 ops/s
Iteration  13: 1571542.545 ops/s
Iteration  14: 1561337.297 ops/s
Iteration  15: 1571676.205 ops/s
Iteration  16: 1566825.520 ops/s
Iteration  17: 1563935.183 ops/s
Iteration  18: 1571319.622 ops/s
Iteration  19: 1566780.717 ops/s
Iteration  20: 1565591.971 ops/s
Iteration  21: 1570826.483 ops/s
Iteration  22: 1564513.446 ops/s
Iteration  23: 1568831.460 ops/s
Iteration  24: 1568388.768 ops/s
Iteration  25: 1573828.457 ops/s
Iteration  26: 1570416.725 ops/s
Iteration  27: 1567905.663 ops/s
Iteration  28: 1568096.446 ops/s
Iteration  29: 1564975.292 ops/s
Iteration  30: 1567308.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEach":
  1568617.099 ±(99.9%) 2249.577 ops/s [Average]
  (min, avg, max) = (1561337.297, 1568617.099, 1573828.457), stdev = 3367.061
  CI (99.9%): [1566367.522, 1570866.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_forEach  thrpt   30  1568617.099 ± 2249.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 211501.690 ops/s
# Warmup Iteration   2: 251820.255 ops/s
# Warmup Iteration   3: 320926.864 ops/s
# Warmup Iteration   4: 321039.030 ops/s
# Warmup Iteration   5: 320047.442 ops/s
# Warmup Iteration   6: 320216.369 ops/s
# Warmup Iteration   7: 320067.087 ops/s
# Warmup Iteration   8: 320386.124 ops/s
# Warmup Iteration   9: 294502.393 ops/s
# Warmup Iteration  10: 296308.718 ops/s
# Warmup Iteration  11: 320427.315 ops/s
# Warmup Iteration  12: 319432.884 ops/s
# Warmup Iteration  13: 320823.527 ops/s
# Warmup Iteration  14: 320613.988 ops/s
# Warmup Iteration  15: 321456.783 ops/s
# Warmup Iteration  16: 320900.842 ops/s
# Warmup Iteration  17: 335534.418 ops/s
# Warmup Iteration  18: 334672.248 ops/s
# Warmup Iteration  19: 335652.404 ops/s
# Warmup Iteration  20: 335685.657 ops/s
# Warmup Iteration  21: 334970.640 ops/s
# Warmup Iteration  22: 334941.047 ops/s
# Warmup Iteration  23: 335521.016 ops/s
# Warmup Iteration  24: 336043.649 ops/s
# Warmup Iteration  25: 335942.347 ops/s
# Warmup Iteration  26: 335539.811 ops/s
# Warmup Iteration  27: 335132.409 ops/s
# Warmup Iteration  28: 335483.128 ops/s
# Warmup Iteration  29: 335117.627 ops/s
# Warmup Iteration  30: 334833.059 ops/s
Iteration   1: 335379.722 ops/s
Iteration   2: 334910.842 ops/s
Iteration   3: 335619.018 ops/s
Iteration   4: 335528.776 ops/s
Iteration   5: 335960.008 ops/s
Iteration   6: 335898.935 ops/s
Iteration   7: 336259.483 ops/s
Iteration   8: 335587.307 ops/s
Iteration   9: 334722.528 ops/s
Iteration  10: 335714.401 ops/s
Iteration  11: 334124.680 ops/s
Iteration  12: 335715.847 ops/s
Iteration  13: 334987.713 ops/s
Iteration  14: 335159.049 ops/s
Iteration  15: 335402.208 ops/s
Iteration  16: 336510.286 ops/s
Iteration  17: 334958.035 ops/s
Iteration  18: 334845.332 ops/s
Iteration  19: 335081.876 ops/s
Iteration  20: 335469.988 ops/s
Iteration  21: 336105.843 ops/s
Iteration  22: 334739.112 ops/s
Iteration  23: 334400.303 ops/s
Iteration  24: 335331.574 ops/s
Iteration  25: 336141.189 ops/s
Iteration  26: 336285.921 ops/s
Iteration  27: 336017.958 ops/s
Iteration  28: 335900.135 ops/s
Iteration  29: 335883.680 ops/s
Iteration  30: 334460.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromTo":
  335436.757 ±(99.9%) 411.010 ops/s [Average]
  (min, avg, max) = (334124.680, 335436.757, 336510.286), stdev = 615.181
  CI (99.9%): [335025.747, 335847.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  335436.757 ± 411.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3692588.657 ops/s
# Warmup Iteration   2: 8461030.633 ops/s
# Warmup Iteration   3: 7932443.857 ops/s
# Warmup Iteration   4: 7499340.921 ops/s
# Warmup Iteration   5: 8395387.933 ops/s
# Warmup Iteration   6: 8403748.655 ops/s
# Warmup Iteration   7: 8403874.734 ops/s
# Warmup Iteration   8: 8407988.099 ops/s
# Warmup Iteration   9: 8409413.996 ops/s
# Warmup Iteration  10: 8392684.124 ops/s
# Warmup Iteration  11: 8383567.559 ops/s
# Warmup Iteration  12: 8414950.919 ops/s
# Warmup Iteration  13: 8410524.046 ops/s
# Warmup Iteration  14: 8404378.440 ops/s
# Warmup Iteration  15: 8398492.275 ops/s
# Warmup Iteration  16: 8396413.323 ops/s
# Warmup Iteration  17: 8400641.789 ops/s
# Warmup Iteration  18: 8414468.136 ops/s
# Warmup Iteration  19: 8392487.335 ops/s
# Warmup Iteration  20: 8390949.912 ops/s
# Warmup Iteration  21: 8385436.990 ops/s
# Warmup Iteration  22: 8391831.318 ops/s
# Warmup Iteration  23: 8372009.403 ops/s
# Warmup Iteration  24: 8366409.794 ops/s
# Warmup Iteration  25: 8405615.182 ops/s
# Warmup Iteration  26: 8407804.726 ops/s
# Warmup Iteration  27: 8404995.059 ops/s
# Warmup Iteration  28: 8401035.526 ops/s
# Warmup Iteration  29: 8375215.526 ops/s
# Warmup Iteration  30: 8394672.346 ops/s
Iteration   1: 8432063.965 ops/s
Iteration   2: 8401236.817 ops/s
Iteration   3: 8396869.489 ops/s
Iteration   4: 8405960.810 ops/s
Iteration   5: 8430660.507 ops/s
Iteration   6: 8413614.365 ops/s
Iteration   7: 8346440.941 ops/s
Iteration   8: 8405483.391 ops/s
Iteration   9: 8293400.472 ops/s
Iteration  10: 8394912.476 ops/s
Iteration  11: 8418271.730 ops/s
Iteration  12: 8412277.176 ops/s
Iteration  13: 8428071.897 ops/s
Iteration  14: 8369874.560 ops/s
Iteration  15: 8423781.738 ops/s
Iteration  16: 8421332.924 ops/s
Iteration  17: 8408528.200 ops/s
Iteration  18: 8437903.025 ops/s
Iteration  19: 8390002.709 ops/s
Iteration  20: 8434912.611 ops/s
Iteration  21: 8408994.634 ops/s
Iteration  22: 8413660.679 ops/s
Iteration  23: 8416951.269 ops/s
Iteration  24: 8417055.564 ops/s
Iteration  25: 8413963.442 ops/s
Iteration  26: 8429853.742 ops/s
Iteration  27: 8412070.049 ops/s
Iteration  28: 8279892.731 ops/s
Iteration  29: 8421172.462 ops/s
Iteration  30: 8441844.473 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachFromToInReverse":
  8404035.295 ±(99.9%) 25038.957 ops/s [Average]
  (min, avg, max) = (8279892.731, 8404035.295, 8441844.473), stdev = 37477.135
  CI (99.9%): [8378996.338, 8429074.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  8404035.295 ± 25038.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1752918.219 ops/s
# Warmup Iteration   2: 4125607.985 ops/s
# Warmup Iteration   3: 3520307.870 ops/s
# Warmup Iteration   4: 4120107.677 ops/s
# Warmup Iteration   5: 4163420.961 ops/s
# Warmup Iteration   6: 4147781.430 ops/s
# Warmup Iteration   7: 4162518.403 ops/s
# Warmup Iteration   8: 4154043.853 ops/s
# Warmup Iteration   9: 4159252.473 ops/s
# Warmup Iteration  10: 4165230.293 ops/s
# Warmup Iteration  11: 4155250.587 ops/s
# Warmup Iteration  12: 4164428.281 ops/s
# Warmup Iteration  13: 4161087.861 ops/s
# Warmup Iteration  14: 4160955.852 ops/s
# Warmup Iteration  15: 4152675.923 ops/s
# Warmup Iteration  16: 4154437.047 ops/s
# Warmup Iteration  17: 4160007.780 ops/s
# Warmup Iteration  18: 4159218.157 ops/s
# Warmup Iteration  19: 4162722.688 ops/s
# Warmup Iteration  20: 4157769.170 ops/s
# Warmup Iteration  21: 4156133.204 ops/s
# Warmup Iteration  22: 4156946.315 ops/s
# Warmup Iteration  23: 4162738.339 ops/s
# Warmup Iteration  24: 4146936.200 ops/s
# Warmup Iteration  25: 4150390.603 ops/s
# Warmup Iteration  26: 4154322.266 ops/s
# Warmup Iteration  27: 4153668.586 ops/s
# Warmup Iteration  28: 4161623.977 ops/s
# Warmup Iteration  29: 4156809.738 ops/s
# Warmup Iteration  30: 4156681.037 ops/s
Iteration   1: 4160473.571 ops/s
Iteration   2: 4154731.931 ops/s
Iteration   3: 4160990.161 ops/s
Iteration   4: 4153726.025 ops/s
Iteration   5: 4170094.688 ops/s
Iteration   6: 4160247.117 ops/s
Iteration   7: 4146115.720 ops/s
Iteration   8: 4157412.759 ops/s
Iteration   9: 4163204.659 ops/s
Iteration  10: 4146142.790 ops/s
Iteration  11: 4149809.089 ops/s
Iteration  12: 4146432.714 ops/s
Iteration  13: 4163318.083 ops/s
Iteration  14: 4165448.186 ops/s
Iteration  15: 4172541.412 ops/s
Iteration  16: 4153505.872 ops/s
Iteration  17: 4161341.449 ops/s
Iteration  18: 4172456.453 ops/s
Iteration  19: 4158837.376 ops/s
Iteration  20: 4170988.590 ops/s
Iteration  21: 4158465.613 ops/s
Iteration  22: 4141547.741 ops/s
Iteration  23: 4166086.624 ops/s
Iteration  24: 4157527.872 ops/s
Iteration  25: 4164813.972 ops/s
Iteration  26: 4163667.130 ops/s
Iteration  27: 4132042.144 ops/s
Iteration  28: 4174445.781 ops/s
Iteration  29: 4163371.919 ops/s
Iteration  30: 4141804.285 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBoth":
  4158386.391 ±(99.9%) 6859.002 ops/s [Average]
  (min, avg, max) = (4132042.144, 4158386.391, 4174445.781), stdev = 10266.233
  CI (99.9%): [4151527.389, 4165245.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachInBoth  thrpt   30  4158386.391 ± 6859.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537231.603 ops/s
# Warmup Iteration   2: 673663.970 ops/s
# Warmup Iteration   3: 849902.342 ops/s
# Warmup Iteration   4: 843949.006 ops/s
# Warmup Iteration   5: 848012.739 ops/s
# Warmup Iteration   6: 848630.038 ops/s
# Warmup Iteration   7: 852506.031 ops/s
# Warmup Iteration   8: 846064.508 ops/s
# Warmup Iteration   9: 711857.654 ops/s
# Warmup Iteration  10: 849559.634 ops/s
# Warmup Iteration  11: 850125.889 ops/s
# Warmup Iteration  12: 848138.506 ops/s
# Warmup Iteration  13: 849132.146 ops/s
# Warmup Iteration  14: 849884.809 ops/s
# Warmup Iteration  15: 850209.514 ops/s
# Warmup Iteration  16: 849287.704 ops/s
# Warmup Iteration  17: 885905.364 ops/s
# Warmup Iteration  18: 884976.660 ops/s
# Warmup Iteration  19: 889765.054 ops/s
# Warmup Iteration  20: 888927.706 ops/s
# Warmup Iteration  21: 887367.077 ops/s
# Warmup Iteration  22: 887287.307 ops/s
# Warmup Iteration  23: 888202.989 ops/s
# Warmup Iteration  24: 884401.821 ops/s
# Warmup Iteration  25: 884536.473 ops/s
# Warmup Iteration  26: 885088.454 ops/s
# Warmup Iteration  27: 887721.435 ops/s
# Warmup Iteration  28: 887043.222 ops/s
# Warmup Iteration  29: 884578.800 ops/s
# Warmup Iteration  30: 883971.417 ops/s
Iteration   1: 881076.404 ops/s
Iteration   2: 884425.615 ops/s
Iteration   3: 886669.863 ops/s
Iteration   4: 890182.694 ops/s
Iteration   5: 887504.668 ops/s
Iteration   6: 886721.132 ops/s
Iteration   7: 890972.656 ops/s
Iteration   8: 886144.381 ops/s
Iteration   9: 886292.648 ops/s
Iteration  10: 886156.860 ops/s
Iteration  11: 886243.069 ops/s
Iteration  12: 884934.874 ops/s
Iteration  13: 887020.926 ops/s
Iteration  14: 883045.984 ops/s
Iteration  15: 889239.308 ops/s
Iteration  16: 883534.078 ops/s
Iteration  17: 886322.848 ops/s
Iteration  18: 883903.097 ops/s
Iteration  19: 887382.558 ops/s
Iteration  20: 886022.531 ops/s
Iteration  21: 888795.676 ops/s
Iteration  22: 887006.350 ops/s
Iteration  23: 884287.446 ops/s
Iteration  24: 884050.755 ops/s
Iteration  25: 886341.645 ops/s
Iteration  26: 886630.414 ops/s
Iteration  27: 890437.641 ops/s
Iteration  28: 887509.419 ops/s
Iteration  29: 887258.598 ops/s
Iteration  30: 887346.664 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  886448.693 ±(99.9%) 1476.638 ops/s [Average]
  (min, avg, max) = (881076.404, 886448.693, 890972.656), stdev = 2210.162
  CI (99.9%): [884972.056, 887925.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  886448.693 ± 1476.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696986.412 ops/s
# Warmup Iteration   2: 766723.614 ops/s
# Warmup Iteration   3: 1007204.779 ops/s
# Warmup Iteration   4: 1005985.967 ops/s
# Warmup Iteration   5: 1000184.000 ops/s
# Warmup Iteration   6: 1004638.556 ops/s
# Warmup Iteration   7: 1006989.433 ops/s
# Warmup Iteration   8: 1007438.586 ops/s
# Warmup Iteration   9: 1004369.206 ops/s
# Warmup Iteration  10: 1007019.404 ops/s
# Warmup Iteration  11: 845316.759 ops/s
# Warmup Iteration  12: 1006084.998 ops/s
# Warmup Iteration  13: 1004589.518 ops/s
# Warmup Iteration  14: 1003423.035 ops/s
# Warmup Iteration  15: 1001178.948 ops/s
# Warmup Iteration  16: 1008793.913 ops/s
# Warmup Iteration  17: 1065193.745 ops/s
# Warmup Iteration  18: 1066936.925 ops/s
# Warmup Iteration  19: 1067212.756 ops/s
# Warmup Iteration  20: 1066942.929 ops/s
# Warmup Iteration  21: 1070490.141 ops/s
# Warmup Iteration  22: 1067244.053 ops/s
# Warmup Iteration  23: 1067422.591 ops/s
# Warmup Iteration  24: 1067479.265 ops/s
# Warmup Iteration  25: 1064304.439 ops/s
# Warmup Iteration  26: 1066392.746 ops/s
# Warmup Iteration  27: 1065743.714 ops/s
# Warmup Iteration  28: 1068157.982 ops/s
# Warmup Iteration  29: 1067293.439 ops/s
# Warmup Iteration  30: 1064000.909 ops/s
Iteration   1: 1067374.865 ops/s
Iteration   2: 1067136.629 ops/s
Iteration   3: 1073509.948 ops/s
Iteration   4: 1066906.459 ops/s
Iteration   5: 1068996.264 ops/s
Iteration   6: 1071621.504 ops/s
Iteration   7: 1067249.993 ops/s
Iteration   8: 1071762.264 ops/s
Iteration   9: 1070208.077 ops/s
Iteration  10: 1065434.955 ops/s
Iteration  11: 1068343.110 ops/s
Iteration  12: 1066268.600 ops/s
Iteration  13: 1063652.191 ops/s
Iteration  14: 1065940.297 ops/s
Iteration  15: 1067555.015 ops/s
Iteration  16: 1064175.293 ops/s
Iteration  17: 1072530.494 ops/s
Iteration  18: 1061121.079 ops/s
Iteration  19: 1065675.011 ops/s
Iteration  20: 1066888.284 ops/s
Iteration  21: 1064823.726 ops/s
Iteration  22: 1064072.866 ops/s
Iteration  23: 1070476.202 ops/s
Iteration  24: 1065047.695 ops/s
Iteration  25: 1072208.513 ops/s
Iteration  26: 1067817.193 ops/s
Iteration  27: 1068146.240 ops/s
Iteration  28: 1062978.540 ops/s
Iteration  29: 1069483.185 ops/s
Iteration  30: 1065712.512 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  1067437.233 ±(99.9%) 2037.913 ops/s [Average]
  (min, avg, max) = (1061121.079, 1067437.233, 1073509.948), stdev = 3050.253
  CI (99.9%): [1065399.320, 1069475.147] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  1067437.233 ± 2037.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350958.980 ops/s
# Warmup Iteration   2: 438131.792 ops/s
# Warmup Iteration   3: 562158.696 ops/s
# Warmup Iteration   4: 557820.647 ops/s
# Warmup Iteration   5: 562968.881 ops/s
# Warmup Iteration   6: 562917.872 ops/s
# Warmup Iteration   7: 562487.326 ops/s
# Warmup Iteration   8: 560779.818 ops/s
# Warmup Iteration   9: 467112.909 ops/s
# Warmup Iteration  10: 562866.911 ops/s
# Warmup Iteration  11: 563130.102 ops/s
# Warmup Iteration  12: 559993.830 ops/s
# Warmup Iteration  13: 562312.110 ops/s
# Warmup Iteration  14: 561992.685 ops/s
# Warmup Iteration  15: 560169.260 ops/s
# Warmup Iteration  16: 560726.217 ops/s
# Warmup Iteration  17: 582306.419 ops/s
# Warmup Iteration  18: 581625.063 ops/s
# Warmup Iteration  19: 582404.714 ops/s
# Warmup Iteration  20: 579739.350 ops/s
# Warmup Iteration  21: 581988.458 ops/s
# Warmup Iteration  22: 581453.880 ops/s
# Warmup Iteration  23: 581868.331 ops/s
# Warmup Iteration  24: 582789.628 ops/s
# Warmup Iteration  25: 580398.442 ops/s
# Warmup Iteration  26: 582921.576 ops/s
# Warmup Iteration  27: 581564.979 ops/s
# Warmup Iteration  28: 581818.420 ops/s
# Warmup Iteration  29: 581597.721 ops/s
# Warmup Iteration  30: 580437.714 ops/s
Iteration   1: 582510.496 ops/s
Iteration   2: 580233.720 ops/s
Iteration   3: 582477.684 ops/s
Iteration   4: 579580.872 ops/s
Iteration   5: 583737.863 ops/s
Iteration   6: 583164.972 ops/s
Iteration   7: 581494.091 ops/s
Iteration   8: 583134.917 ops/s
Iteration   9: 583944.461 ops/s
Iteration  10: 583134.789 ops/s
Iteration  11: 581855.039 ops/s
Iteration  12: 581511.968 ops/s
Iteration  13: 580548.882 ops/s
Iteration  14: 581069.840 ops/s
Iteration  15: 583580.757 ops/s
Iteration  16: 581316.749 ops/s
Iteration  17: 582039.824 ops/s
Iteration  18: 582176.126 ops/s
Iteration  19: 577816.940 ops/s
Iteration  20: 584019.115 ops/s
Iteration  21: 581460.433 ops/s
Iteration  22: 582349.827 ops/s
Iteration  23: 581655.278 ops/s
Iteration  24: 581800.462 ops/s
Iteration  25: 580295.904 ops/s
Iteration  26: 581164.464 ops/s
Iteration  27: 579428.916 ops/s
Iteration  28: 580062.606 ops/s
Iteration  29: 582599.883 ops/s
Iteration  30: 581874.723 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachOnRange":
  581734.720 ±(99.9%) 969.430 ops/s [Average]
  (min, avg, max) = (577816.940, 581734.720, 584019.115), stdev = 1450.997
  CI (99.9%): [580765.290, 582704.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachOnRange  thrpt   30  581734.720 ± 969.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 574880.716 ops/s
# Warmup Iteration   2: 1554515.725 ops/s
# Warmup Iteration   3: 1548659.933 ops/s
# Warmup Iteration   4: 1311437.823 ops/s
# Warmup Iteration   5: 1559870.249 ops/s
# Warmup Iteration   6: 1554923.371 ops/s
# Warmup Iteration   7: 1560716.683 ops/s
# Warmup Iteration   8: 1563907.170 ops/s
# Warmup Iteration   9: 1564603.414 ops/s
# Warmup Iteration  10: 1563890.827 ops/s
# Warmup Iteration  11: 1564023.396 ops/s
# Warmup Iteration  12: 1560802.387 ops/s
# Warmup Iteration  13: 1560273.020 ops/s
# Warmup Iteration  14: 1561366.276 ops/s
# Warmup Iteration  15: 1560215.569 ops/s
# Warmup Iteration  16: 1559267.129 ops/s
# Warmup Iteration  17: 1566864.586 ops/s
# Warmup Iteration  18: 1561798.730 ops/s
# Warmup Iteration  19: 1565075.763 ops/s
# Warmup Iteration  20: 1567502.644 ops/s
# Warmup Iteration  21: 1564129.128 ops/s
# Warmup Iteration  22: 1562850.759 ops/s
# Warmup Iteration  23: 1557404.738 ops/s
# Warmup Iteration  24: 1555721.002 ops/s
# Warmup Iteration  25: 1566536.527 ops/s
# Warmup Iteration  26: 1562264.260 ops/s
# Warmup Iteration  27: 1562828.071 ops/s
# Warmup Iteration  28: 1560886.427 ops/s
# Warmup Iteration  29: 1562657.057 ops/s
# Warmup Iteration  30: 1566385.046 ops/s
Iteration   1: 1548678.633 ops/s
Iteration   2: 1558675.355 ops/s
Iteration   3: 1562401.055 ops/s
Iteration   4: 1563755.771 ops/s
Iteration   5: 1562130.955 ops/s
Iteration   6: 1560690.225 ops/s
Iteration   7: 1560998.314 ops/s
Iteration   8: 1569713.808 ops/s
Iteration   9: 1569629.840 ops/s
Iteration  10: 1557882.152 ops/s
Iteration  11: 1559125.981 ops/s
Iteration  12: 1566745.624 ops/s
Iteration  13: 1554515.187 ops/s
Iteration  14: 1568014.176 ops/s
Iteration  15: 1559190.277 ops/s
Iteration  16: 1568577.891 ops/s
Iteration  17: 1567341.354 ops/s
Iteration  18: 1563441.998 ops/s
Iteration  19: 1555399.851 ops/s
Iteration  20: 1544944.090 ops/s
Iteration  21: 1554065.157 ops/s
Iteration  22: 1561565.573 ops/s
Iteration  23: 1564064.397 ops/s
Iteration  24: 1563781.400 ops/s
Iteration  25: 1555533.582 ops/s
Iteration  26: 1569624.284 ops/s
Iteration  27: 1563205.438 ops/s
Iteration  28: 1566928.360 ops/s
Iteration  29: 1563885.282 ops/s
Iteration  30: 1560951.714 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWith":
  1561515.257 ±(99.9%) 4043.570 ops/s [Average]
  (min, avg, max) = (1544944.090, 1561515.257, 1569713.808), stdev = 6052.225
  CI (99.9%): [1557471.688, 1565558.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachWith  thrpt   30  1561515.257 ± 4043.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259626.524 ops/s
# Warmup Iteration   2: 581254.552 ops/s
# Warmup Iteration   3: 634948.992 ops/s
# Warmup Iteration   4: 639417.259 ops/s
# Warmup Iteration   5: 533968.103 ops/s
# Warmup Iteration   6: 641441.525 ops/s
# Warmup Iteration   7: 641444.910 ops/s
# Warmup Iteration   8: 641603.652 ops/s
# Warmup Iteration   9: 641465.666 ops/s
# Warmup Iteration  10: 642138.925 ops/s
# Warmup Iteration  11: 642648.972 ops/s
# Warmup Iteration  12: 640038.533 ops/s
# Warmup Iteration  13: 641555.816 ops/s
# Warmup Iteration  14: 641927.026 ops/s
# Warmup Iteration  15: 641718.986 ops/s
# Warmup Iteration  16: 641943.628 ops/s
# Warmup Iteration  17: 641907.432 ops/s
# Warmup Iteration  18: 640971.621 ops/s
# Warmup Iteration  19: 642260.130 ops/s
# Warmup Iteration  20: 638750.218 ops/s
# Warmup Iteration  21: 640743.796 ops/s
# Warmup Iteration  22: 641556.772 ops/s
# Warmup Iteration  23: 641009.313 ops/s
# Warmup Iteration  24: 640654.948 ops/s
# Warmup Iteration  25: 640766.213 ops/s
# Warmup Iteration  26: 641891.648 ops/s
# Warmup Iteration  27: 641474.941 ops/s
# Warmup Iteration  28: 641641.289 ops/s
# Warmup Iteration  29: 641730.791 ops/s
# Warmup Iteration  30: 640619.810 ops/s
Iteration   1: 638069.706 ops/s
Iteration   2: 639509.311 ops/s
Iteration   3: 639837.016 ops/s
Iteration   4: 641267.580 ops/s
Iteration   5: 644197.360 ops/s
Iteration   6: 642609.530 ops/s
Iteration   7: 641691.577 ops/s
Iteration   8: 643360.451 ops/s
Iteration   9: 639804.224 ops/s
Iteration  10: 639491.451 ops/s
Iteration  11: 643699.869 ops/s
Iteration  12: 643783.941 ops/s
Iteration  13: 640957.555 ops/s
Iteration  14: 642408.522 ops/s
Iteration  15: 640579.784 ops/s
Iteration  16: 642369.430 ops/s
Iteration  17: 642024.280 ops/s
Iteration  18: 640479.175 ops/s
Iteration  19: 641881.871 ops/s
Iteration  20: 642535.984 ops/s
Iteration  21: 641917.941 ops/s
Iteration  22: 639988.177 ops/s
Iteration  23: 641057.481 ops/s
Iteration  24: 641338.383 ops/s
Iteration  25: 640678.394 ops/s
Iteration  26: 639987.765 ops/s
Iteration  27: 641883.078 ops/s
Iteration  28: 641665.481 ops/s
Iteration  29: 641452.782 ops/s
Iteration  30: 642231.604 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndex":
  641425.324 ±(99.9%) 952.695 ops/s [Average]
  (min, avg, max) = (638069.706, 641425.324, 644197.360), stdev = 1425.950
  CI (99.9%): [640472.628, 642378.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  641425.324 ± 952.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 351456.636 ops/s
# Warmup Iteration   2: 443050.945 ops/s
# Warmup Iteration   3: 564095.284 ops/s
# Warmup Iteration   4: 560409.867 ops/s
# Warmup Iteration   5: 563890.010 ops/s
# Warmup Iteration   6: 563935.656 ops/s
# Warmup Iteration   7: 562139.826 ops/s
# Warmup Iteration   8: 563739.048 ops/s
# Warmup Iteration   9: 472045.755 ops/s
# Warmup Iteration  10: 565666.097 ops/s
# Warmup Iteration  11: 563762.877 ops/s
# Warmup Iteration  12: 563869.281 ops/s
# Warmup Iteration  13: 565289.602 ops/s
# Warmup Iteration  14: 562875.639 ops/s
# Warmup Iteration  15: 564476.363 ops/s
# Warmup Iteration  16: 565122.176 ops/s
# Warmup Iteration  17: 583146.400 ops/s
# Warmup Iteration  18: 579807.266 ops/s
# Warmup Iteration  19: 581631.448 ops/s
# Warmup Iteration  20: 581356.252 ops/s
# Warmup Iteration  21: 581235.667 ops/s
# Warmup Iteration  22: 582695.661 ops/s
# Warmup Iteration  23: 582738.007 ops/s
# Warmup Iteration  24: 581990.850 ops/s
# Warmup Iteration  25: 581485.857 ops/s
# Warmup Iteration  26: 581597.979 ops/s
# Warmup Iteration  27: 581214.836 ops/s
# Warmup Iteration  28: 581001.816 ops/s
# Warmup Iteration  29: 581860.061 ops/s
# Warmup Iteration  30: 580981.864 ops/s
Iteration   1: 581437.326 ops/s
Iteration   2: 582912.371 ops/s
Iteration   3: 585135.204 ops/s
Iteration   4: 582169.351 ops/s
Iteration   5: 580261.861 ops/s
Iteration   6: 582633.229 ops/s
Iteration   7: 581428.954 ops/s
Iteration   8: 583844.718 ops/s
Iteration   9: 581982.276 ops/s
Iteration  10: 581502.991 ops/s
Iteration  11: 583760.843 ops/s
Iteration  12: 581379.898 ops/s
Iteration  13: 579035.560 ops/s
Iteration  14: 582724.780 ops/s
Iteration  15: 583326.021 ops/s
Iteration  16: 581160.976 ops/s
Iteration  17: 583796.439 ops/s
Iteration  18: 581573.050 ops/s
Iteration  19: 581551.131 ops/s
Iteration  20: 580318.380 ops/s
Iteration  21: 582162.850 ops/s
Iteration  22: 581029.534 ops/s
Iteration  23: 581389.072 ops/s
Iteration  24: 581057.551 ops/s
Iteration  25: 582872.197 ops/s
Iteration  26: 583256.678 ops/s
Iteration  27: 580993.043 ops/s
Iteration  28: 581877.303 ops/s
Iteration  29: 582569.284 ops/s
Iteration  30: 581969.899 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexOnRange":
  582037.092 ±(99.9%) 841.339 ops/s [Average]
  (min, avg, max) = (579035.560, 582037.092, 585135.204), stdev = 1259.277
  CI (99.9%): [581195.753, 582878.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  582037.092 ± 841.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167021.274 ops/s
# Warmup Iteration   2: 180508.207 ops/s
# Warmup Iteration   3: 244945.709 ops/s
# Warmup Iteration   4: 246088.927 ops/s
# Warmup Iteration   5: 243054.509 ops/s
# Warmup Iteration   6: 246188.641 ops/s
# Warmup Iteration   7: 246384.806 ops/s
# Warmup Iteration   8: 245367.135 ops/s
# Warmup Iteration   9: 245967.388 ops/s
# Warmup Iteration  10: 245634.354 ops/s
# Warmup Iteration  11: 233259.237 ops/s
# Warmup Iteration  12: 216453.703 ops/s
# Warmup Iteration  13: 246113.531 ops/s
# Warmup Iteration  14: 245406.736 ops/s
# Warmup Iteration  15: 245838.152 ops/s
# Warmup Iteration  16: 245933.904 ops/s
# Warmup Iteration  17: 253917.697 ops/s
# Warmup Iteration  18: 253899.373 ops/s
# Warmup Iteration  19: 254532.324 ops/s
# Warmup Iteration  20: 253966.975 ops/s
# Warmup Iteration  21: 254093.778 ops/s
# Warmup Iteration  22: 254055.356 ops/s
# Warmup Iteration  23: 254145.108 ops/s
# Warmup Iteration  24: 254095.522 ops/s
# Warmup Iteration  25: 254254.872 ops/s
# Warmup Iteration  26: 254335.681 ops/s
# Warmup Iteration  27: 253958.840 ops/s
# Warmup Iteration  28: 254557.332 ops/s
# Warmup Iteration  29: 254001.614 ops/s
# Warmup Iteration  30: 253186.925 ops/s
Iteration   1: 254581.216 ops/s
Iteration   2: 253083.409 ops/s
Iteration   3: 254410.359 ops/s
Iteration   4: 253945.218 ops/s
Iteration   5: 254412.136 ops/s
Iteration   6: 253859.155 ops/s
Iteration   7: 254015.277 ops/s
Iteration   8: 254871.122 ops/s
Iteration   9: 253722.253 ops/s
Iteration  10: 254261.766 ops/s
Iteration  11: 254110.219 ops/s
Iteration  12: 254180.656 ops/s
Iteration  13: 253281.565 ops/s
Iteration  14: 254327.262 ops/s
Iteration  15: 253476.027 ops/s
Iteration  16: 254113.686 ops/s
Iteration  17: 254314.622 ops/s
Iteration  18: 254077.555 ops/s
Iteration  19: 253406.348 ops/s
Iteration  20: 252778.760 ops/s
Iteration  21: 253356.226 ops/s
Iteration  22: 253040.936 ops/s
Iteration  23: 253441.053 ops/s
Iteration  24: 253530.331 ops/s
Iteration  25: 252758.617 ops/s
Iteration  26: 253075.100 ops/s
Iteration  27: 254534.459 ops/s
Iteration  28: 254094.858 ops/s
Iteration  29: 254229.221 ops/s
Iteration  30: 253817.779 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  253836.906 ±(99.9%) 376.192 ops/s [Average]
  (min, avg, max) = (252758.617, 253836.906, 254871.122), stdev = 563.067
  CI (99.9%): [253460.714, 254213.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  253836.906 ± 376.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4111652.268 ops/s
# Warmup Iteration   2: 8947844.457 ops/s
# Warmup Iteration   3: 7574668.608 ops/s
# Warmup Iteration   4: 8859908.469 ops/s
# Warmup Iteration   5: 8961485.310 ops/s
# Warmup Iteration   6: 8926313.594 ops/s
# Warmup Iteration   7: 8960259.269 ops/s
# Warmup Iteration   8: 8937893.919 ops/s
# Warmup Iteration   9: 8825624.145 ops/s
# Warmup Iteration  10: 8935490.447 ops/s
# Warmup Iteration  11: 8921741.979 ops/s
# Warmup Iteration  12: 8897472.208 ops/s
# Warmup Iteration  13: 8925837.779 ops/s
# Warmup Iteration  14: 8927316.044 ops/s
# Warmup Iteration  15: 8923125.320 ops/s
# Warmup Iteration  16: 8940929.970 ops/s
# Warmup Iteration  17: 8934488.280 ops/s
# Warmup Iteration  18: 8911593.093 ops/s
# Warmup Iteration  19: 8974880.044 ops/s
# Warmup Iteration  20: 8949919.977 ops/s
# Warmup Iteration  21: 8926668.493 ops/s
# Warmup Iteration  22: 8955442.101 ops/s
# Warmup Iteration  23: 8921311.763 ops/s
# Warmup Iteration  24: 8931278.523 ops/s
# Warmup Iteration  25: 8931459.752 ops/s
# Warmup Iteration  26: 8917019.200 ops/s
# Warmup Iteration  27: 8944351.740 ops/s
# Warmup Iteration  28: 8881483.351 ops/s
# Warmup Iteration  29: 8896751.370 ops/s
# Warmup Iteration  30: 8876504.814 ops/s
Iteration   1: 8931388.242 ops/s
Iteration   2: 8905438.535 ops/s
Iteration   3: 8947197.764 ops/s
Iteration   4: 8914990.985 ops/s
Iteration   5: 8955389.047 ops/s
Iteration   6: 8951810.404 ops/s
Iteration   7: 8964086.434 ops/s
Iteration   8: 8934597.466 ops/s
Iteration   9: 8925110.542 ops/s
Iteration  10: 8957436.509 ops/s
Iteration  11: 8958648.950 ops/s
Iteration  12: 8926886.305 ops/s
Iteration  13: 8903507.787 ops/s
Iteration  14: 8927042.841 ops/s
Iteration  15: 8917220.574 ops/s
Iteration  16: 8953562.018 ops/s
Iteration  17: 8947540.299 ops/s
Iteration  18: 8943301.129 ops/s
Iteration  19: 8972246.828 ops/s
Iteration  20: 8970117.220 ops/s
Iteration  21: 8965645.801 ops/s
Iteration  22: 8932197.100 ops/s
Iteration  23: 8946023.454 ops/s
Iteration  24: 8963164.727 ops/s
Iteration  25: 8932948.295 ops/s
Iteration  26: 8922621.631 ops/s
Iteration  27: 8955028.513 ops/s
Iteration  28: 8936389.143 ops/s
Iteration  29: 8941684.210 ops/s
Iteration  30: 8949414.760 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  8941754.584 ±(99.9%) 12453.188 ops/s [Average]
  (min, avg, max) = (8903507.787, 8941754.584, 8972246.828), stdev = 18639.346
  CI (99.9%): [8929301.396, 8954207.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  8941754.584 ± 12453.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1543600.624 ops/s
# Warmup Iteration   2: 3480359.202 ops/s
# Warmup Iteration   3: 3498524.421 ops/s
# Warmup Iteration   4: 3048715.928 ops/s
# Warmup Iteration   5: 3567600.178 ops/s
# Warmup Iteration   6: 3555232.032 ops/s
# Warmup Iteration   7: 3559737.764 ops/s
# Warmup Iteration   8: 3574575.129 ops/s
# Warmup Iteration   9: 3553176.199 ops/s
# Warmup Iteration  10: 3555974.512 ops/s
# Warmup Iteration  11: 3551302.084 ops/s
# Warmup Iteration  12: 3561163.276 ops/s
# Warmup Iteration  13: 3563275.952 ops/s
# Warmup Iteration  14: 3576192.197 ops/s
# Warmup Iteration  15: 3568698.043 ops/s
# Warmup Iteration  16: 3570906.792 ops/s
# Warmup Iteration  17: 3566369.595 ops/s
# Warmup Iteration  18: 3564941.354 ops/s
# Warmup Iteration  19: 3564534.720 ops/s
# Warmup Iteration  20: 3556938.324 ops/s
# Warmup Iteration  21: 3559825.163 ops/s
# Warmup Iteration  22: 3561380.037 ops/s
# Warmup Iteration  23: 3570893.160 ops/s
# Warmup Iteration  24: 3567384.716 ops/s
# Warmup Iteration  25: 3569070.171 ops/s
# Warmup Iteration  26: 3575870.425 ops/s
# Warmup Iteration  27: 3572538.856 ops/s
# Warmup Iteration  28: 3565896.832 ops/s
# Warmup Iteration  29: 3562818.872 ops/s
# Warmup Iteration  30: 3566159.896 ops/s
Iteration   1: 3568206.980 ops/s
Iteration   2: 3565789.279 ops/s
Iteration   3: 3554065.534 ops/s
Iteration   4: 3579157.667 ops/s
Iteration   5: 3569498.953 ops/s
Iteration   6: 3566574.563 ops/s
Iteration   7: 3580383.785 ops/s
Iteration   8: 3571849.338 ops/s
Iteration   9: 3556665.984 ops/s
Iteration  10: 3569388.763 ops/s
Iteration  11: 3568769.551 ops/s
Iteration  12: 3562190.456 ops/s
Iteration  13: 3565977.638 ops/s
Iteration  14: 3568800.272 ops/s
Iteration  15: 3573905.563 ops/s
Iteration  16: 3564720.704 ops/s
Iteration  17: 3566452.358 ops/s
Iteration  18: 3577056.207 ops/s
Iteration  19: 3577204.807 ops/s
Iteration  20: 3570368.450 ops/s
Iteration  21: 3558321.309 ops/s
Iteration  22: 3574057.259 ops/s
Iteration  23: 3564562.029 ops/s
Iteration  24: 3560106.674 ops/s
Iteration  25: 3579059.543 ops/s
Iteration  26: 3568864.712 ops/s
Iteration  27: 3566163.385 ops/s
Iteration  28: 3549836.631 ops/s
Iteration  29: 3569756.543 ops/s
Iteration  30: 3558206.741 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_fusedCollectMakeString":
  3567532.056 ±(99.9%) 5022.958 ops/s [Average]
  (min, avg, max) = (3549836.631, 3567532.056, 3580383.785), stdev = 7518.128
  CI (99.9%): [3562509.098, 3572555.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  3567532.056 ± 5022.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4921290.440 ops/s
# Warmup Iteration   2: 9941864.112 ops/s
# Warmup Iteration   3: 8532595.466 ops/s
# Warmup Iteration   4: 10028164.638 ops/s
# Warmup Iteration   5: 10023202.779 ops/s
# Warmup Iteration   6: 10014629.362 ops/s
# Warmup Iteration   7: 10061383.543 ops/s
# Warmup Iteration   8: 10047635.751 ops/s
# Warmup Iteration   9: 10070435.033 ops/s
# Warmup Iteration  10: 10053050.648 ops/s
# Warmup Iteration  11: 10057510.461 ops/s
# Warmup Iteration  12: 10051637.343 ops/s
# Warmup Iteration  13: 10048466.233 ops/s
# Warmup Iteration  14: 10046036.355 ops/s
# Warmup Iteration  15: 10061508.902 ops/s
# Warmup Iteration  16: 10057794.563 ops/s
# Warmup Iteration  17: 9970916.775 ops/s
# Warmup Iteration  18: 9972679.900 ops/s
# Warmup Iteration  19: 9944301.025 ops/s
# Warmup Iteration  20: 9970989.475 ops/s
# Warmup Iteration  21: 9959342.325 ops/s
# Warmup Iteration  22: 9974976.931 ops/s
# Warmup Iteration  23: 9976376.822 ops/s
# Warmup Iteration  24: 9984401.436 ops/s
# Warmup Iteration  25: 9935234.955 ops/s
# Warmup Iteration  26: 9961689.029 ops/s
# Warmup Iteration  27: 9944705.534 ops/s
# Warmup Iteration  28: 9957257.872 ops/s
# Warmup Iteration  29: 9969941.292 ops/s
# Warmup Iteration  30: 9941804.342 ops/s
Iteration   1: 9970399.719 ops/s
Iteration   2: 9946972.459 ops/s
Iteration   3: 10017074.675 ops/s
Iteration   4: 9994944.898 ops/s
Iteration   5: 9983802.111 ops/s
Iteration   6: 9979086.640 ops/s
Iteration   7: 9964196.011 ops/s
Iteration   8: 9943902.201 ops/s
Iteration   9: 9971349.199 ops/s
Iteration  10: 9967297.897 ops/s
Iteration  11: 9983436.949 ops/s
Iteration  12: 9986892.912 ops/s
Iteration  13: 9997713.586 ops/s
Iteration  14: 9954328.911 ops/s
Iteration  15: 9963591.006 ops/s
Iteration  16: 9957816.627 ops/s
Iteration  17: 9974781.827 ops/s
Iteration  18: 9978430.080 ops/s
Iteration  19: 10006986.077 ops/s
Iteration  20: 9962773.784 ops/s
Iteration  21: 9993808.001 ops/s
Iteration  22: 9951400.421 ops/s
Iteration  23: 9956535.810 ops/s
Iteration  24: 9973946.962 ops/s
Iteration  25: 9976050.767 ops/s
Iteration  26: 9940750.334 ops/s
Iteration  27: 9994755.691 ops/s
Iteration  28: 9971822.922 ops/s
Iteration  29: 9952018.393 ops/s
Iteration  30: 9968539.717 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getAny":
  9972846.886 ±(99.9%) 12560.133 ops/s [Average]
  (min, avg, max) = (9940750.334, 9972846.886, 10017074.675), stdev = 18799.417
  CI (99.9%): [9960286.753, 9985407.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getAny  thrpt   30  9972846.886 ± 12560.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5411092.088 ops/s
# Warmup Iteration   2: 10971369.730 ops/s
# Warmup Iteration   3: 9311021.624 ops/s
# Warmup Iteration   4: 11010289.684 ops/s
# Warmup Iteration   5: 10998203.764 ops/s
# Warmup Iteration   6: 11024326.836 ops/s
# Warmup Iteration   7: 11023078.415 ops/s
# Warmup Iteration   8: 11024689.904 ops/s
# Warmup Iteration   9: 10985690.093 ops/s
# Warmup Iteration  10: 11014570.831 ops/s
# Warmup Iteration  11: 11006944.541 ops/s
# Warmup Iteration  12: 11012124.205 ops/s
# Warmup Iteration  13: 11025753.297 ops/s
# Warmup Iteration  14: 11023587.056 ops/s
# Warmup Iteration  15: 11062274.491 ops/s
# Warmup Iteration  16: 11033883.028 ops/s
# Warmup Iteration  17: 11035976.643 ops/s
# Warmup Iteration  18: 11012243.892 ops/s
# Warmup Iteration  19: 11032695.443 ops/s
# Warmup Iteration  20: 11007718.258 ops/s
# Warmup Iteration  21: 11009538.405 ops/s
# Warmup Iteration  22: 11025423.299 ops/s
# Warmup Iteration  23: 10845881.890 ops/s
# Warmup Iteration  24: 10906790.553 ops/s
# Warmup Iteration  25: 11043181.738 ops/s
# Warmup Iteration  26: 11041299.509 ops/s
# Warmup Iteration  27: 10979729.350 ops/s
# Warmup Iteration  28: 11016733.708 ops/s
# Warmup Iteration  29: 10994611.761 ops/s
# Warmup Iteration  30: 11008515.046 ops/s
Iteration   1: 10998703.721 ops/s
Iteration   2: 10953808.922 ops/s
Iteration   3: 11007954.735 ops/s
Iteration   4: 11009887.530 ops/s
Iteration   5: 11020324.611 ops/s
Iteration   6: 11046376.029 ops/s
Iteration   7: 11047203.290 ops/s
Iteration   8: 11033480.531 ops/s
Iteration   9: 11051414.926 ops/s
Iteration  10: 11003636.568 ops/s
Iteration  11: 11020677.810 ops/s
Iteration  12: 11042684.819 ops/s
Iteration  13: 11008611.142 ops/s
Iteration  14: 11026553.891 ops/s
Iteration  15: 11018639.611 ops/s
Iteration  16: 11066351.079 ops/s
Iteration  17: 10990130.323 ops/s
Iteration  18: 11070508.841 ops/s
Iteration  19: 11026721.853 ops/s
Iteration  20: 10984603.300 ops/s
Iteration  21: 10966240.381 ops/s
Iteration  22: 11003568.210 ops/s
Iteration  23: 11012264.063 ops/s
Iteration  24: 11003064.617 ops/s
Iteration  25: 11023911.945 ops/s
Iteration  26: 11052553.611 ops/s
Iteration  27: 10972243.358 ops/s
Iteration  28: 11048656.030 ops/s
Iteration  29: 10990523.182 ops/s
Iteration  30: 10969210.088 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirst":
  11015683.634 ±(99.9%) 20046.079 ops/s [Average]
  (min, avg, max) = (10953808.922, 11015683.634, 11070508.841), stdev = 30004.030
  CI (99.9%): [10995637.554, 11035729.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getFirst  thrpt   30  11015683.634 ± 20046.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4396603.767 ops/s
# Warmup Iteration   2: 9080312.400 ops/s
# Warmup Iteration   3: 7537592.758 ops/s
# Warmup Iteration   4: 8922594.932 ops/s
# Warmup Iteration   5: 8902673.641 ops/s
# Warmup Iteration   6: 8893694.837 ops/s
# Warmup Iteration   7: 8867755.334 ops/s
# Warmup Iteration   8: 8913951.233 ops/s
# Warmup Iteration   9: 8901453.525 ops/s
# Warmup Iteration  10: 8918285.316 ops/s
# Warmup Iteration  11: 8913018.037 ops/s
# Warmup Iteration  12: 8906164.093 ops/s
# Warmup Iteration  13: 8891606.063 ops/s
# Warmup Iteration  14: 8882514.109 ops/s
# Warmup Iteration  15: 8921047.242 ops/s
# Warmup Iteration  16: 8899435.921 ops/s
# Warmup Iteration  17: 8912015.900 ops/s
# Warmup Iteration  18: 8924471.700 ops/s
# Warmup Iteration  19: 8879021.983 ops/s
# Warmup Iteration  20: 8876687.265 ops/s
# Warmup Iteration  21: 8928460.470 ops/s
# Warmup Iteration  22: 8889791.882 ops/s
# Warmup Iteration  23: 8898357.066 ops/s
# Warmup Iteration  24: 8888813.721 ops/s
# Warmup Iteration  25: 8932701.547 ops/s
# Warmup Iteration  26: 8866732.037 ops/s
# Warmup Iteration  27: 8908994.852 ops/s
# Warmup Iteration  28: 8899580.034 ops/s
# Warmup Iteration  29: 8883007.980 ops/s
# Warmup Iteration  30: 8816644.146 ops/s
Iteration   1: 8911472.195 ops/s
Iteration   2: 8913299.680 ops/s
Iteration   3: 8876967.254 ops/s
Iteration   4: 8894087.664 ops/s
Iteration   5: 8906062.880 ops/s
Iteration   6: 8945840.677 ops/s
Iteration   7: 8903819.251 ops/s
Iteration   8: 8913426.158 ops/s
Iteration   9: 8916231.279 ops/s
Iteration  10: 8887010.742 ops/s
Iteration  11: 8864350.099 ops/s
Iteration  12: 8905777.771 ops/s
Iteration  13: 8855536.969 ops/s
Iteration  14: 8912550.301 ops/s
Iteration  15: 8945659.873 ops/s
Iteration  16: 8871424.004 ops/s
Iteration  17: 8904302.296 ops/s
Iteration  18: 8905638.969 ops/s
Iteration  19: 8921570.577 ops/s
Iteration  20: 8913964.734 ops/s
Iteration  21: 8876403.394 ops/s
Iteration  22: 8862732.649 ops/s
Iteration  23: 8937133.116 ops/s
Iteration  24: 8859922.697 ops/s
Iteration  25: 8884621.160 ops/s
Iteration  26: 8914424.955 ops/s
Iteration  27: 8903006.108 ops/s
Iteration  28: 8871573.830 ops/s
Iteration  29: 8907197.249 ops/s
Iteration  30: 8909481.885 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getFirstOptional":
  8899849.680 ±(99.9%) 16187.243 ops/s [Average]
  (min, avg, max) = (8855536.969, 8899849.680, 8945840.677), stdev = 24228.305
  CI (99.9%): [8883662.438, 8916036.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getFirstOptional  thrpt   30  8899849.680 ± 16187.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3201977.659 ops/s
# Warmup Iteration   2: 6840528.668 ops/s
# Warmup Iteration   3: 6657517.523 ops/s
# Warmup Iteration   4: 5940859.847 ops/s
# Warmup Iteration   5: 6859019.961 ops/s
# Warmup Iteration   6: 6843312.326 ops/s
# Warmup Iteration   7: 6856371.580 ops/s
# Warmup Iteration   8: 6863425.089 ops/s
# Warmup Iteration   9: 6867532.957 ops/s
# Warmup Iteration  10: 6860472.683 ops/s
# Warmup Iteration  11: 6851461.558 ops/s
# Warmup Iteration  12: 6857785.786 ops/s
# Warmup Iteration  13: 6858886.215 ops/s
# Warmup Iteration  14: 6872779.373 ops/s
# Warmup Iteration  15: 6859435.536 ops/s
# Warmup Iteration  16: 6852467.921 ops/s
# Warmup Iteration  17: 6859707.435 ops/s
# Warmup Iteration  18: 6857369.066 ops/s
# Warmup Iteration  19: 6869973.749 ops/s
# Warmup Iteration  20: 6851871.005 ops/s
# Warmup Iteration  21: 6871091.438 ops/s
# Warmup Iteration  22: 6876678.437 ops/s
# Warmup Iteration  23: 6871300.070 ops/s
# Warmup Iteration  24: 6875774.459 ops/s
# Warmup Iteration  25: 6871695.118 ops/s
# Warmup Iteration  26: 6852435.234 ops/s
# Warmup Iteration  27: 6870464.830 ops/s
# Warmup Iteration  28: 6866149.379 ops/s
# Warmup Iteration  29: 6859739.434 ops/s
# Warmup Iteration  30: 6868818.648 ops/s
Iteration   1: 6860839.804 ops/s
Iteration   2: 6877099.167 ops/s
Iteration   3: 6876649.916 ops/s
Iteration   4: 6886111.379 ops/s
Iteration   5: 6845261.997 ops/s
Iteration   6: 6855843.164 ops/s
Iteration   7: 6849970.011 ops/s
Iteration   8: 6889403.094 ops/s
Iteration   9: 6878845.470 ops/s
Iteration  10: 6890908.107 ops/s
Iteration  11: 6858816.600 ops/s
Iteration  12: 6883928.186 ops/s
Iteration  13: 6870086.673 ops/s
Iteration  14: 6882943.559 ops/s
Iteration  15: 6847246.316 ops/s
Iteration  16: 6869957.732 ops/s
Iteration  17: 6862139.209 ops/s
Iteration  18: 6881666.430 ops/s
Iteration  19: 6866609.030 ops/s
Iteration  20: 6877247.019 ops/s
Iteration  21: 6893818.261 ops/s
Iteration  22: 6884091.753 ops/s
Iteration  23: 6878995.210 ops/s
Iteration  24: 6874548.636 ops/s
Iteration  25: 6875108.053 ops/s
Iteration  26: 6890064.737 ops/s
Iteration  27: 6865020.202 ops/s
Iteration  28: 6870833.994 ops/s
Iteration  29: 6867520.233 ops/s
Iteration  30: 6854889.770 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLast":
  6872215.457 ±(99.9%) 8962.565 ops/s [Average]
  (min, avg, max) = (6845261.997, 6872215.457, 6893818.261), stdev = 13414.746
  CI (99.9%): [6863252.892, 6881178.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_getLast  thrpt   30  6872215.457 ± 8962.565  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2880612.112 ops/s
# Warmup Iteration   2: 6261613.244 ops/s
# Warmup Iteration   3: 5145731.881 ops/s
# Warmup Iteration   4: 6112246.283 ops/s
# Warmup Iteration   5: 6117543.393 ops/s
# Warmup Iteration   6: 6111551.730 ops/s
# Warmup Iteration   7: 6133427.956 ops/s
# Warmup Iteration   8: 6108039.463 ops/s
# Warmup Iteration   9: 6108113.436 ops/s
# Warmup Iteration  10: 6125897.393 ops/s
# Warmup Iteration  11: 6129854.950 ops/s
# Warmup Iteration  12: 6129723.545 ops/s
# Warmup Iteration  13: 6114122.398 ops/s
# Warmup Iteration  14: 6107817.378 ops/s
# Warmup Iteration  15: 6091174.429 ops/s
# Warmup Iteration  16: 6116860.082 ops/s
# Warmup Iteration  17: 6106971.678 ops/s
# Warmup Iteration  18: 6123628.479 ops/s
# Warmup Iteration  19: 6120614.737 ops/s
# Warmup Iteration  20: 6132701.881 ops/s
# Warmup Iteration  21: 6113873.805 ops/s
# Warmup Iteration  22: 6122024.844 ops/s
# Warmup Iteration  23: 6116300.966 ops/s
# Warmup Iteration  24: 6121267.774 ops/s
# Warmup Iteration  25: 6103045.966 ops/s
# Warmup Iteration  26: 6137681.559 ops/s
# Warmup Iteration  27: 6117841.972 ops/s
# Warmup Iteration  28: 6110668.254 ops/s
# Warmup Iteration  29: 6116040.766 ops/s
# Warmup Iteration  30: 6123591.721 ops/s
Iteration   1: 6093269.865 ops/s
Iteration   2: 6132492.990 ops/s
Iteration   3: 6126389.316 ops/s
Iteration   4: 6131858.893 ops/s
Iteration   5: 6103000.304 ops/s
Iteration   6: 6126968.781 ops/s
Iteration   7: 6090070.168 ops/s
Iteration   8: 6121456.767 ops/s
Iteration   9: 6128221.879 ops/s
Iteration  10: 6142082.386 ops/s
Iteration  11: 6131975.332 ops/s
Iteration  12: 6140778.710 ops/s
Iteration  13: 6109794.808 ops/s
Iteration  14: 6104883.242 ops/s
Iteration  15: 6063437.566 ops/s
Iteration  16: 6101376.525 ops/s
Iteration  17: 6103854.521 ops/s
Iteration  18: 6086150.781 ops/s
Iteration  19: 6123813.016 ops/s
Iteration  20: 6078652.897 ops/s
Iteration  21: 6137264.405 ops/s
Iteration  22: 6093941.806 ops/s
Iteration  23: 6124100.581 ops/s
Iteration  24: 6102133.883 ops/s
Iteration  25: 6114245.099 ops/s
Iteration  26: 6106514.650 ops/s
Iteration  27: 6104370.377 ops/s
Iteration  28: 6084584.035 ops/s
Iteration  29: 6112216.610 ops/s
Iteration  30: 6115870.623 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getLastOptional":
  6111192.361 ±(99.9%) 13132.384 ops/s [Average]
  (min, avg, max) = (6063437.566, 6111192.361, 6142082.386), stdev = 19655.936
  CI (99.9%): [6098059.976, 6124324.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getLastOptional  thrpt   30  6111192.361 ± 13132.384  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6833379.546 ops/s
# Warmup Iteration   2: 15707665.655 ops/s
# Warmup Iteration   3: 18103258.974 ops/s
# Warmup Iteration   4: 18461200.054 ops/s
# Warmup Iteration   5: 18722289.618 ops/s
# Warmup Iteration   6: 18790558.083 ops/s
# Warmup Iteration   7: 18757636.223 ops/s
# Warmup Iteration   8: 18657169.530 ops/s
# Warmup Iteration   9: 18759291.314 ops/s
# Warmup Iteration  10: 18805494.707 ops/s
# Warmup Iteration  11: 18652207.232 ops/s
# Warmup Iteration  12: 18723417.601 ops/s
# Warmup Iteration  13: 18794686.825 ops/s
# Warmup Iteration  14: 18667078.806 ops/s
# Warmup Iteration  15: 18687451.983 ops/s
# Warmup Iteration  16: 18608757.847 ops/s
# Warmup Iteration  17: 18754582.382 ops/s
# Warmup Iteration  18: 18674643.672 ops/s
# Warmup Iteration  19: 18672844.431 ops/s
# Warmup Iteration  20: 18767494.373 ops/s
# Warmup Iteration  21: 18765693.909 ops/s
# Warmup Iteration  22: 18833845.579 ops/s
# Warmup Iteration  23: 18723059.365 ops/s
# Warmup Iteration  24: 18713192.863 ops/s
# Warmup Iteration  25: 18784750.218 ops/s
# Warmup Iteration  26: 18731438.770 ops/s
# Warmup Iteration  27: 18801632.274 ops/s
# Warmup Iteration  28: 18778996.349 ops/s
# Warmup Iteration  29: 18692511.039 ops/s
# Warmup Iteration  30: 18757261.786 ops/s
Iteration   1: 18759081.640 ops/s
Iteration   2: 18562733.396 ops/s
Iteration   3: 18809707.552 ops/s
Iteration   4: 18789885.246 ops/s
Iteration   5: 18610342.094 ops/s
Iteration   6: 18778140.464 ops/s
Iteration   7: 18752023.099 ops/s
Iteration   8: 18803197.851 ops/s
Iteration   9: 18842121.733 ops/s
Iteration  10: 18666053.915 ops/s
Iteration  11: 18765305.193 ops/s
Iteration  12: 18735708.856 ops/s
Iteration  13: 18688802.470 ops/s
Iteration  14: 18695372.336 ops/s
Iteration  15: 18704140.231 ops/s
Iteration  16: 18804079.523 ops/s
Iteration  17: 18756597.321 ops/s
Iteration  18: 18827936.283 ops/s
Iteration  19: 18822371.282 ops/s
Iteration  20: 18813937.402 ops/s
Iteration  21: 18736202.948 ops/s
Iteration  22: 18802718.808 ops/s
Iteration  23: 18814912.755 ops/s
Iteration  24: 18710542.879 ops/s
Iteration  25: 18760714.737 ops/s
Iteration  26: 18732647.250 ops/s
Iteration  27: 18698203.242 ops/s
Iteration  28: 18771576.004 ops/s
Iteration  29: 18761447.640 ops/s
Iteration  30: 18703471.247 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly":
  18749332.513 ±(99.9%) 43191.276 ops/s [Average]
  (min, avg, max) = (18562733.396, 18749332.513, 18842121.733), stdev = 64646.674
  CI (99.9%): [18706141.237, 18792523.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getOnly  thrpt   30  18749332.513 ± 43191.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 774162.835 ops/s
# Warmup Iteration   2: 797135.995 ops/s
# Warmup Iteration   3: 1032849.034 ops/s
# Warmup Iteration   4: 1040755.595 ops/s
# Warmup Iteration   5: 1041008.052 ops/s
# Warmup Iteration   6: 1043546.251 ops/s
# Warmup Iteration   7: 1039796.308 ops/s
# Warmup Iteration   8: 1044765.017 ops/s
# Warmup Iteration   9: 1044042.632 ops/s
# Warmup Iteration  10: 1040406.529 ops/s
# Warmup Iteration  11: 1042825.144 ops/s
# Warmup Iteration  12: 882013.845 ops/s
# Warmup Iteration  13: 1043021.949 ops/s
# Warmup Iteration  14: 1039115.065 ops/s
# Warmup Iteration  15: 1042152.555 ops/s
# Warmup Iteration  16: 1040519.844 ops/s
# Warmup Iteration  17: 1105679.874 ops/s
# Warmup Iteration  18: 1107206.358 ops/s
# Warmup Iteration  19: 1108357.515 ops/s
# Warmup Iteration  20: 1106703.054 ops/s
# Warmup Iteration  21: 1107031.347 ops/s
# Warmup Iteration  22: 1106091.364 ops/s
# Warmup Iteration  23: 1113833.377 ops/s
# Warmup Iteration  24: 1109501.450 ops/s
# Warmup Iteration  25: 1105640.377 ops/s
# Warmup Iteration  26: 1106876.460 ops/s
# Warmup Iteration  27: 1103276.836 ops/s
# Warmup Iteration  28: 1106696.615 ops/s
# Warmup Iteration  29: 1108735.269 ops/s
# Warmup Iteration  30: 1109244.435 ops/s
Iteration   1: 1109937.348 ops/s
Iteration   2: 1103264.491 ops/s
Iteration   3: 1099245.427 ops/s
Iteration   4: 1105940.205 ops/s
Iteration   5: 1108912.375 ops/s
Iteration   6: 1109390.312 ops/s
Iteration   7: 1100987.737 ops/s
Iteration   8: 1107785.416 ops/s
Iteration   9: 1104881.388 ops/s
Iteration  10: 1106274.295 ops/s
Iteration  11: 1109625.210 ops/s
Iteration  12: 1112439.983 ops/s
Iteration  13: 1108647.565 ops/s
Iteration  14: 1102296.151 ops/s
Iteration  15: 1104244.981 ops/s
Iteration  16: 1108690.542 ops/s
Iteration  17: 1110059.497 ops/s
Iteration  18: 1101984.704 ops/s
Iteration  19: 1107275.078 ops/s
Iteration  20: 1107406.006 ops/s
Iteration  21: 1111530.735 ops/s
Iteration  22: 1105177.924 ops/s
Iteration  23: 1110009.095 ops/s
Iteration  24: 1106408.768 ops/s
Iteration  25: 1107124.780 ops/s
Iteration  26: 1107696.510 ops/s
Iteration  27: 1110353.065 ops/s
Iteration  28: 1108459.145 ops/s
Iteration  29: 1108049.203 ops/s
Iteration  30: 1106412.740 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_empty_throws":
  1107017.022 ±(99.9%) 2113.044 ops/s [Average]
  (min, avg, max) = (1099245.427, 1107017.022, 1112439.983), stdev = 3162.705
  CI (99.9%): [1104903.978, 1109130.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1107017.022 ± 2113.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699582.666 ops/s
# Warmup Iteration   2: 764678.897 ops/s
# Warmup Iteration   3: 1011291.838 ops/s
# Warmup Iteration   4: 1009090.159 ops/s
# Warmup Iteration   5: 1008534.665 ops/s
# Warmup Iteration   6: 1005566.330 ops/s
# Warmup Iteration   7: 1010768.597 ops/s
# Warmup Iteration   8: 1007953.443 ops/s
# Warmup Iteration   9: 1007164.652 ops/s
# Warmup Iteration  10: 912100.591 ops/s
# Warmup Iteration  11: 943527.448 ops/s
# Warmup Iteration  12: 1015706.898 ops/s
# Warmup Iteration  13: 1011573.005 ops/s
# Warmup Iteration  14: 1012489.282 ops/s
# Warmup Iteration  15: 1016601.525 ops/s
# Warmup Iteration  16: 1013076.720 ops/s
# Warmup Iteration  17: 1071803.087 ops/s
# Warmup Iteration  18: 1071936.308 ops/s
# Warmup Iteration  19: 1072647.853 ops/s
# Warmup Iteration  20: 1076265.501 ops/s
# Warmup Iteration  21: 1073951.226 ops/s
# Warmup Iteration  22: 1071931.300 ops/s
# Warmup Iteration  23: 1072586.878 ops/s
# Warmup Iteration  24: 1075683.545 ops/s
# Warmup Iteration  25: 1072855.218 ops/s
# Warmup Iteration  26: 1071295.455 ops/s
# Warmup Iteration  27: 1074072.012 ops/s
# Warmup Iteration  28: 1071584.675 ops/s
# Warmup Iteration  29: 1069901.163 ops/s
# Warmup Iteration  30: 1076409.859 ops/s
Iteration   1: 1071403.723 ops/s
Iteration   2: 1067202.597 ops/s
Iteration   3: 1071780.703 ops/s
Iteration   4: 1076194.317 ops/s
Iteration   5: 1068530.119 ops/s
Iteration   6: 1072989.290 ops/s
Iteration   7: 1074926.663 ops/s
Iteration   8: 1073059.367 ops/s
Iteration   9: 1076183.525 ops/s
Iteration  10: 1070763.395 ops/s
Iteration  11: 1072312.913 ops/s
Iteration  12: 1069121.105 ops/s
Iteration  13: 1076612.570 ops/s
Iteration  14: 1069601.325 ops/s
Iteration  15: 1074375.790 ops/s
Iteration  16: 1074930.457 ops/s
Iteration  17: 1077272.102 ops/s
Iteration  18: 1070476.349 ops/s
Iteration  19: 1074128.835 ops/s
Iteration  20: 1075037.314 ops/s
Iteration  21: 1071215.366 ops/s
Iteration  22: 1073447.005 ops/s
Iteration  23: 1076722.741 ops/s
Iteration  24: 1071397.887 ops/s
Iteration  25: 1073561.994 ops/s
Iteration  26: 1075926.730 ops/s
Iteration  27: 1068534.681 ops/s
Iteration  28: 1071515.919 ops/s
Iteration  29: 1070779.365 ops/s
Iteration  30: 1073476.050 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1072782.673 ±(99.9%) 1827.763 ops/s [Average]
  (min, avg, max) = (1067202.597, 1072782.673, 1077272.102), stdev = 2735.709
  CI (99.9%): [1070954.910, 1074610.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1072782.673 ± 1827.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16604022.662 ops/s
# Warmup Iteration   2: 28147086.691 ops/s
# Warmup Iteration   3: 33999001.294 ops/s
# Warmup Iteration   4: 33956689.657 ops/s
# Warmup Iteration   5: 34046716.997 ops/s
# Warmup Iteration   6: 32766907.097 ops/s
# Warmup Iteration   7: 33634210.671 ops/s
# Warmup Iteration   8: 34058775.177 ops/s
# Warmup Iteration   9: 34097483.782 ops/s
# Warmup Iteration  10: 34170492.870 ops/s
# Warmup Iteration  11: 33954083.446 ops/s
# Warmup Iteration  12: 34129050.074 ops/s
# Warmup Iteration  13: 34082629.338 ops/s
# Warmup Iteration  14: 34024706.884 ops/s
# Warmup Iteration  15: 33979987.528 ops/s
# Warmup Iteration  16: 33862737.474 ops/s
# Warmup Iteration  17: 34048339.565 ops/s
# Warmup Iteration  18: 34050642.317 ops/s
# Warmup Iteration  19: 34147903.829 ops/s
# Warmup Iteration  20: 33996453.723 ops/s
# Warmup Iteration  21: 34160510.976 ops/s
# Warmup Iteration  22: 34024645.801 ops/s
# Warmup Iteration  23: 34141551.095 ops/s
# Warmup Iteration  24: 34210151.451 ops/s
# Warmup Iteration  25: 34155787.663 ops/s
# Warmup Iteration  26: 34140514.283 ops/s
# Warmup Iteration  27: 34051929.951 ops/s
# Warmup Iteration  28: 34178600.431 ops/s
# Warmup Iteration  29: 34042679.850 ops/s
# Warmup Iteration  30: 34147192.138 ops/s
Iteration   1: 33949079.986 ops/s
Iteration   2: 34046290.642 ops/s
Iteration   3: 34201097.759 ops/s
Iteration   4: 34030726.363 ops/s
Iteration   5: 34063024.197 ops/s
Iteration   6: 33960896.665 ops/s
Iteration   7: 33827099.663 ops/s
Iteration   8: 33928033.967 ops/s
Iteration   9: 34057329.949 ops/s
Iteration  10: 33942667.477 ops/s
Iteration  11: 33834877.516 ops/s
Iteration  12: 33999029.506 ops/s
Iteration  13: 34055225.588 ops/s
Iteration  14: 33974205.608 ops/s
Iteration  15: 34106495.464 ops/s
Iteration  16: 34053574.947 ops/s
Iteration  17: 34080848.957 ops/s
Iteration  18: 34075535.615 ops/s
Iteration  19: 33846270.480 ops/s
Iteration  20: 33884500.225 ops/s
Iteration  21: 34124380.130 ops/s
Iteration  22: 34219605.281 ops/s
Iteration  23: 34134698.980 ops/s
Iteration  24: 34235397.248 ops/s
Iteration  25: 34139105.906 ops/s
Iteration  26: 34342384.825 ops/s
Iteration  27: 33943430.528 ops/s
Iteration  28: 34061662.395 ops/s
Iteration  29: 34085187.878 ops/s
Iteration  30: 34232082.796 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  34047824.885 ±(99.9%) 84237.832 ops/s [Average]
  (min, avg, max) = (33827099.663, 34047824.885, 34342384.825), stdev = 126083.231
  CI (99.9%): [33963587.053, 34132062.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  34047824.885 ± 84237.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674942.664 ops/s
# Warmup Iteration   2: 734842.210 ops/s
# Warmup Iteration   3: 983140.532 ops/s
# Warmup Iteration   4: 982168.788 ops/s
# Warmup Iteration   5: 975998.693 ops/s
# Warmup Iteration   6: 979578.802 ops/s
# Warmup Iteration   7: 978926.172 ops/s
# Warmup Iteration   8: 976252.148 ops/s
# Warmup Iteration   9: 979095.685 ops/s
# Warmup Iteration  10: 890074.153 ops/s
# Warmup Iteration  11: 910940.573 ops/s
# Warmup Iteration  12: 978450.148 ops/s
# Warmup Iteration  13: 977707.847 ops/s
# Warmup Iteration  14: 975624.880 ops/s
# Warmup Iteration  15: 978866.814 ops/s
# Warmup Iteration  16: 975258.668 ops/s
# Warmup Iteration  17: 1033317.688 ops/s
# Warmup Iteration  18: 1031710.261 ops/s
# Warmup Iteration  19: 1036141.243 ops/s
# Warmup Iteration  20: 1033910.054 ops/s
# Warmup Iteration  21: 1037117.110 ops/s
# Warmup Iteration  22: 1031746.574 ops/s
# Warmup Iteration  23: 1031142.751 ops/s
# Warmup Iteration  24: 1032657.586 ops/s
# Warmup Iteration  25: 1030460.552 ops/s
# Warmup Iteration  26: 1033070.205 ops/s
# Warmup Iteration  27: 1034863.747 ops/s
# Warmup Iteration  28: 1034654.049 ops/s
# Warmup Iteration  29: 1031930.115 ops/s
# Warmup Iteration  30: 1032273.597 ops/s
Iteration   1: 1031661.258 ops/s
Iteration   2: 1032897.613 ops/s
Iteration   3: 1031066.645 ops/s
Iteration   4: 1031613.729 ops/s
Iteration   5: 1032510.918 ops/s
Iteration   6: 1036830.051 ops/s
Iteration   7: 1033476.411 ops/s
Iteration   8: 1028290.092 ops/s
Iteration   9: 1032029.918 ops/s
Iteration  10: 1035532.833 ops/s
Iteration  11: 1033801.211 ops/s
Iteration  12: 1030204.031 ops/s
Iteration  13: 1038216.665 ops/s
Iteration  14: 1032436.316 ops/s
Iteration  15: 1029826.450 ops/s
Iteration  16: 1035953.770 ops/s
Iteration  17: 1032044.211 ops/s
Iteration  18: 1034718.515 ops/s
Iteration  19: 1036214.021 ops/s
Iteration  20: 1034335.726 ops/s
Iteration  21: 1022309.723 ops/s
Iteration  22: 1031403.315 ops/s
Iteration  23: 1036703.303 ops/s
Iteration  24: 1034315.481 ops/s
Iteration  25: 1034984.475 ops/s
Iteration  26: 1033807.047 ops/s
Iteration  27: 1036256.143 ops/s
Iteration  28: 1034381.602 ops/s
Iteration  29: 1033944.711 ops/s
Iteration  30: 1035297.249 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  1033235.448 ±(99.9%) 2064.074 ops/s [Average]
  (min, avg, max) = (1022309.723, 1033235.448, 1038216.665), stdev = 3089.409
  CI (99.9%): [1031171.374, 1035299.522] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  1033235.448 ± 2064.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281747.178 ops/s
# Warmup Iteration   2: 546806.697 ops/s
# Warmup Iteration   3: 607705.435 ops/s
# Warmup Iteration   4: 610998.088 ops/s
# Warmup Iteration   5: 517927.178 ops/s
# Warmup Iteration   6: 596371.386 ops/s
# Warmup Iteration   7: 611939.502 ops/s
# Warmup Iteration   8: 611163.203 ops/s
# Warmup Iteration   9: 611177.729 ops/s
# Warmup Iteration  10: 610599.095 ops/s
# Warmup Iteration  11: 611802.650 ops/s
# Warmup Iteration  12: 612029.223 ops/s
# Warmup Iteration  13: 612254.073 ops/s
# Warmup Iteration  14: 612424.041 ops/s
# Warmup Iteration  15: 610661.235 ops/s
# Warmup Iteration  16: 609487.582 ops/s
# Warmup Iteration  17: 611911.036 ops/s
# Warmup Iteration  18: 610698.089 ops/s
# Warmup Iteration  19: 611479.706 ops/s
# Warmup Iteration  20: 609659.209 ops/s
# Warmup Iteration  21: 611381.073 ops/s
# Warmup Iteration  22: 610368.156 ops/s
# Warmup Iteration  23: 611764.302 ops/s
# Warmup Iteration  24: 611316.647 ops/s
# Warmup Iteration  25: 610399.379 ops/s
# Warmup Iteration  26: 610910.945 ops/s
# Warmup Iteration  27: 611712.876 ops/s
# Warmup Iteration  28: 611126.433 ops/s
# Warmup Iteration  29: 609679.487 ops/s
# Warmup Iteration  30: 610845.560 ops/s
Iteration   1: 614903.832 ops/s
Iteration   2: 609635.801 ops/s
Iteration   3: 611628.276 ops/s
Iteration   4: 611066.299 ops/s
Iteration   5: 610927.778 ops/s
Iteration   6: 610607.672 ops/s
Iteration   7: 612517.532 ops/s
Iteration   8: 611670.136 ops/s
Iteration   9: 611171.739 ops/s
Iteration  10: 610494.640 ops/s
Iteration  11: 611698.532 ops/s
Iteration  12: 613373.130 ops/s
Iteration  13: 612599.121 ops/s
Iteration  14: 610052.239 ops/s
Iteration  15: 611919.333 ops/s
Iteration  16: 608147.507 ops/s
Iteration  17: 610397.821 ops/s
Iteration  18: 613711.925 ops/s
Iteration  19: 611712.369 ops/s
Iteration  20: 610828.497 ops/s
Iteration  21: 613045.889 ops/s
Iteration  22: 610875.719 ops/s
Iteration  23: 610098.011 ops/s
Iteration  24: 605527.899 ops/s
Iteration  25: 610699.115 ops/s
Iteration  26: 611867.319 ops/s
Iteration  27: 610997.916 ops/s
Iteration  28: 611981.534 ops/s
Iteration  29: 611710.657 ops/s
Iteration  30: 611576.683 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupBy":
  611248.164 ±(99.9%) 1132.072 ops/s [Average]
  (min, avg, max) = (605527.899, 611248.164, 614903.832), stdev = 1694.432
  CI (99.9%): [610116.092, 612380.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_groupBy  thrpt   30  611248.164 ± 1132.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120852.329 ops/s
# Warmup Iteration   2: 203110.464 ops/s
# Warmup Iteration   3: 247582.121 ops/s
# Warmup Iteration   4: 249314.485 ops/s
# Warmup Iteration   5: 248150.637 ops/s
# Warmup Iteration   6: 219192.723 ops/s
# Warmup Iteration   7: 232637.344 ops/s
# Warmup Iteration   8: 249456.938 ops/s
# Warmup Iteration   9: 248746.265 ops/s
# Warmup Iteration  10: 249176.663 ops/s
# Warmup Iteration  11: 248743.561 ops/s
# Warmup Iteration  12: 249289.483 ops/s
# Warmup Iteration  13: 248745.179 ops/s
# Warmup Iteration  14: 249163.139 ops/s
# Warmup Iteration  15: 248683.195 ops/s
# Warmup Iteration  16: 248786.193 ops/s
# Warmup Iteration  17: 249295.093 ops/s
# Warmup Iteration  18: 248960.352 ops/s
# Warmup Iteration  19: 249102.694 ops/s
# Warmup Iteration  20: 248474.461 ops/s
# Warmup Iteration  21: 249250.788 ops/s
# Warmup Iteration  22: 248502.669 ops/s
# Warmup Iteration  23: 249101.571 ops/s
# Warmup Iteration  24: 249375.969 ops/s
# Warmup Iteration  25: 248895.468 ops/s
# Warmup Iteration  26: 248858.705 ops/s
# Warmup Iteration  27: 248526.417 ops/s
# Warmup Iteration  28: 249090.917 ops/s
# Warmup Iteration  29: 248742.038 ops/s
# Warmup Iteration  30: 249136.435 ops/s
Iteration   1: 249356.856 ops/s
Iteration   2: 249471.814 ops/s
Iteration   3: 249331.505 ops/s
Iteration   4: 249075.308 ops/s
Iteration   5: 248565.262 ops/s
Iteration   6: 249801.159 ops/s
Iteration   7: 249116.156 ops/s
Iteration   8: 250070.689 ops/s
Iteration   9: 249241.123 ops/s
Iteration  10: 249033.289 ops/s
Iteration  11: 249580.845 ops/s
Iteration  12: 249773.352 ops/s
Iteration  13: 249316.944 ops/s
Iteration  14: 249414.013 ops/s
Iteration  15: 249231.932 ops/s
Iteration  16: 249471.475 ops/s
Iteration  17: 248952.741 ops/s
Iteration  18: 249845.300 ops/s
Iteration  19: 248616.859 ops/s
Iteration  20: 249549.395 ops/s
Iteration  21: 249152.060 ops/s
Iteration  22: 249936.630 ops/s
Iteration  23: 249351.066 ops/s
Iteration  24: 248829.140 ops/s
Iteration  25: 249590.633 ops/s
Iteration  26: 248789.341 ops/s
Iteration  27: 249006.467 ops/s
Iteration  28: 249062.861 ops/s
Iteration  29: 248895.251 ops/s
Iteration  30: 249275.967 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByEach":
  249290.181 ±(99.9%) 253.510 ops/s [Average]
  (min, avg, max) = (248565.262, 249290.181, 250070.689), stdev = 379.442
  CI (99.9%): [249036.671, 249543.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_groupByEach  thrpt   30  249290.181 ± 253.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2197961.090 ops/s
# Warmup Iteration   2: 5326119.626 ops/s
# Warmup Iteration   3: 5329779.463 ops/s
# Warmup Iteration   4: 4409187.322 ops/s
# Warmup Iteration   5: 5331868.553 ops/s
# Warmup Iteration   6: 5329394.730 ops/s
# Warmup Iteration   7: 5344986.861 ops/s
# Warmup Iteration   8: 5342838.441 ops/s
# Warmup Iteration   9: 5310944.321 ops/s
# Warmup Iteration  10: 5340829.090 ops/s
# Warmup Iteration  11: 5349699.981 ops/s
# Warmup Iteration  12: 5338006.881 ops/s
# Warmup Iteration  13: 5341404.195 ops/s
# Warmup Iteration  14: 5351757.625 ops/s
# Warmup Iteration  15: 5330919.291 ops/s
# Warmup Iteration  16: 5349082.625 ops/s
# Warmup Iteration  17: 5334120.742 ops/s
# Warmup Iteration  18: 5343343.842 ops/s
# Warmup Iteration  19: 5347990.115 ops/s
# Warmup Iteration  20: 5351671.253 ops/s
# Warmup Iteration  21: 5346260.425 ops/s
# Warmup Iteration  22: 5347335.076 ops/s
# Warmup Iteration  23: 5343892.543 ops/s
# Warmup Iteration  24: 5347499.302 ops/s
# Warmup Iteration  25: 5354007.620 ops/s
# Warmup Iteration  26: 5334221.589 ops/s
# Warmup Iteration  27: 5341876.914 ops/s
# Warmup Iteration  28: 5354259.209 ops/s
# Warmup Iteration  29: 5358852.972 ops/s
# Warmup Iteration  30: 5341172.973 ops/s
Iteration   1: 5354137.292 ops/s
Iteration   2: 5343969.744 ops/s
Iteration   3: 5335656.244 ops/s
Iteration   4: 5351178.440 ops/s
Iteration   5: 5335557.026 ops/s
Iteration   6: 5334510.624 ops/s
Iteration   7: 5342606.156 ops/s
Iteration   8: 5341213.590 ops/s
Iteration   9: 5344742.167 ops/s
Iteration  10: 5330387.300 ops/s
Iteration  11: 5335384.622 ops/s
Iteration  12: 5345520.624 ops/s
Iteration  13: 5331340.922 ops/s
Iteration  14: 5345425.067 ops/s
Iteration  15: 5354434.797 ops/s
Iteration  16: 5344353.764 ops/s
Iteration  17: 5349060.449 ops/s
Iteration  18: 5344663.732 ops/s
Iteration  19: 5349260.708 ops/s
Iteration  20: 5360991.075 ops/s
Iteration  21: 5349500.941 ops/s
Iteration  22: 5337480.768 ops/s
Iteration  23: 5329737.488 ops/s
Iteration  24: 5345790.881 ops/s
Iteration  25: 5357843.498 ops/s
Iteration  26: 5348587.037 ops/s
Iteration  27: 5341931.265 ops/s
Iteration  28: 5337229.589 ops/s
Iteration  29: 5351615.743 ops/s
Iteration  30: 5343767.588 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey":
  5343929.305 ±(99.9%) 5366.676 ops/s [Average]
  (min, avg, max) = (5329737.488, 5343929.305, 5360991.075), stdev = 8032.589
  CI (99.9%): [5338562.628, 5349295.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  5343929.305 ± 5366.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1851309.189 ops/s
# Warmup Iteration   2: 4263669.403 ops/s
# Warmup Iteration   3: 4183722.155 ops/s
# Warmup Iteration   4: 3527207.961 ops/s
# Warmup Iteration   5: 4153941.629 ops/s
# Warmup Iteration   6: 4198068.570 ops/s
# Warmup Iteration   7: 4205777.088 ops/s
# Warmup Iteration   8: 4212794.470 ops/s
# Warmup Iteration   9: 4203523.251 ops/s
# Warmup Iteration  10: 4198170.138 ops/s
# Warmup Iteration  11: 4201151.581 ops/s
# Warmup Iteration  12: 4203940.494 ops/s
# Warmup Iteration  13: 4211332.571 ops/s
# Warmup Iteration  14: 4194346.820 ops/s
# Warmup Iteration  15: 4191295.611 ops/s
# Warmup Iteration  16: 4205763.959 ops/s
# Warmup Iteration  17: 4206936.601 ops/s
# Warmup Iteration  18: 4199076.866 ops/s
# Warmup Iteration  19: 4207034.660 ops/s
# Warmup Iteration  20: 4204626.698 ops/s
# Warmup Iteration  21: 4200069.624 ops/s
# Warmup Iteration  22: 4197476.283 ops/s
# Warmup Iteration  23: 4209379.498 ops/s
# Warmup Iteration  24: 4204861.682 ops/s
# Warmup Iteration  25: 4207105.757 ops/s
# Warmup Iteration  26: 4193179.813 ops/s
# Warmup Iteration  27: 4199324.142 ops/s
# Warmup Iteration  28: 4197686.462 ops/s
# Warmup Iteration  29: 4190674.718 ops/s
# Warmup Iteration  30: 4205608.020 ops/s
Iteration   1: 4203633.422 ops/s
Iteration   2: 4206752.137 ops/s
Iteration   3: 4197005.685 ops/s
Iteration   4: 4189581.687 ops/s
Iteration   5: 4208365.236 ops/s
Iteration   6: 4202820.116 ops/s
Iteration   7: 4199414.611 ops/s
Iteration   8: 4197556.580 ops/s
Iteration   9: 4198468.172 ops/s
Iteration  10: 4196851.541 ops/s
Iteration  11: 4214819.195 ops/s
Iteration  12: 4190473.462 ops/s
Iteration  13: 4191923.328 ops/s
Iteration  14: 4207624.972 ops/s
Iteration  15: 4211779.206 ops/s
Iteration  16: 4191393.748 ops/s
Iteration  17: 4196449.237 ops/s
Iteration  18: 4199882.323 ops/s
Iteration  19: 4215782.246 ops/s
Iteration  20: 4193545.919 ops/s
Iteration  21: 4196256.043 ops/s
Iteration  22: 4205175.570 ops/s
Iteration  23: 4197155.101 ops/s
Iteration  24: 4200609.040 ops/s
Iteration  25: 4197960.143 ops/s
Iteration  26: 4184144.034 ops/s
Iteration  27: 4203782.465 ops/s
Iteration  28: 4208333.382 ops/s
Iteration  29: 4201552.804 ops/s
Iteration  30: 4208174.473 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target":
  4200575.529 ±(99.9%) 5070.927 ops/s [Average]
  (min, avg, max) = (4184144.034, 4200575.529, 4215782.246), stdev = 7589.925
  CI (99.9%): [4195504.603, 4205646.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4200575.529 ± 5070.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447079.110 ops/s
# Warmup Iteration   2: 524228.374 ops/s
# Warmup Iteration   3: 680829.900 ops/s
# Warmup Iteration   4: 682773.401 ops/s
# Warmup Iteration   5: 678957.048 ops/s
# Warmup Iteration   6: 681370.082 ops/s
# Warmup Iteration   7: 682833.040 ops/s
# Warmup Iteration   8: 683976.641 ops/s
# Warmup Iteration   9: 674039.591 ops/s
# Warmup Iteration  10: 579277.025 ops/s
# Warmup Iteration  11: 682842.042 ops/s
# Warmup Iteration  12: 684120.811 ops/s
# Warmup Iteration  13: 681971.139 ops/s
# Warmup Iteration  14: 683181.372 ops/s
# Warmup Iteration  15: 682713.805 ops/s
# Warmup Iteration  16: 681975.736 ops/s
# Warmup Iteration  17: 711669.632 ops/s
# Warmup Iteration  18: 712467.185 ops/s
# Warmup Iteration  19: 713795.412 ops/s
# Warmup Iteration  20: 710970.882 ops/s
# Warmup Iteration  21: 712315.665 ops/s
# Warmup Iteration  22: 712071.189 ops/s
# Warmup Iteration  23: 711750.691 ops/s
# Warmup Iteration  24: 710893.375 ops/s
# Warmup Iteration  25: 712646.104 ops/s
# Warmup Iteration  26: 711535.277 ops/s
# Warmup Iteration  27: 712709.988 ops/s
# Warmup Iteration  28: 713468.160 ops/s
# Warmup Iteration  29: 712821.481 ops/s
# Warmup Iteration  30: 712809.735 ops/s
Iteration   1: 711297.920 ops/s
Iteration   2: 710983.270 ops/s
Iteration   3: 709342.687 ops/s
Iteration   4: 713735.960 ops/s
Iteration   5: 713522.362 ops/s
Iteration   6: 710655.504 ops/s
Iteration   7: 712486.545 ops/s
Iteration   8: 709705.662 ops/s
Iteration   9: 708136.156 ops/s
Iteration  10: 712283.493 ops/s
Iteration  11: 712649.477 ops/s
Iteration  12: 713145.646 ops/s
Iteration  13: 710081.780 ops/s
Iteration  14: 710909.719 ops/s
Iteration  15: 710278.734 ops/s
Iteration  16: 709061.296 ops/s
Iteration  17: 712199.120 ops/s
Iteration  18: 714965.361 ops/s
Iteration  19: 711012.609 ops/s
Iteration  20: 711182.578 ops/s
Iteration  21: 711575.951 ops/s
Iteration  22: 710804.025 ops/s
Iteration  23: 712070.739 ops/s
Iteration  24: 710182.762 ops/s
Iteration  25: 710651.794 ops/s
Iteration  26: 712848.323 ops/s
Iteration  27: 712488.872 ops/s
Iteration  28: 710378.982 ops/s
Iteration  29: 712913.740 ops/s
Iteration  30: 714394.621 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  711531.523 ±(99.9%) 1076.021 ops/s [Average]
  (min, avg, max) = (708136.156, 711531.523, 714965.361), stdev = 1610.538
  CI (99.9%): [710455.502, 712607.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  711531.523 ± 1076.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450510.279 ops/s
# Warmup Iteration   2: 513077.650 ops/s
# Warmup Iteration   3: 677356.312 ops/s
# Warmup Iteration   4: 676717.643 ops/s
# Warmup Iteration   5: 674673.071 ops/s
# Warmup Iteration   6: 676802.815 ops/s
# Warmup Iteration   7: 673970.241 ops/s
# Warmup Iteration   8: 677040.641 ops/s
# Warmup Iteration   9: 679722.115 ops/s
# Warmup Iteration  10: 567683.764 ops/s
# Warmup Iteration  11: 677896.774 ops/s
# Warmup Iteration  12: 678039.488 ops/s
# Warmup Iteration  13: 678552.532 ops/s
# Warmup Iteration  14: 677459.285 ops/s
# Warmup Iteration  15: 677810.189 ops/s
# Warmup Iteration  16: 677886.629 ops/s
# Warmup Iteration  17: 701803.903 ops/s
# Warmup Iteration  18: 702893.365 ops/s
# Warmup Iteration  19: 704260.203 ops/s
# Warmup Iteration  20: 702112.193 ops/s
# Warmup Iteration  21: 705893.629 ops/s
# Warmup Iteration  22: 704281.453 ops/s
# Warmup Iteration  23: 703717.851 ops/s
# Warmup Iteration  24: 703551.639 ops/s
# Warmup Iteration  25: 702305.028 ops/s
# Warmup Iteration  26: 703681.232 ops/s
# Warmup Iteration  27: 704296.916 ops/s
# Warmup Iteration  28: 702604.830 ops/s
# Warmup Iteration  29: 704489.379 ops/s
# Warmup Iteration  30: 705069.926 ops/s
Iteration   1: 699089.643 ops/s
Iteration   2: 702779.404 ops/s
Iteration   3: 703948.132 ops/s
Iteration   4: 703331.890 ops/s
Iteration   5: 702315.796 ops/s
Iteration   6: 704156.164 ops/s
Iteration   7: 705472.879 ops/s
Iteration   8: 704834.606 ops/s
Iteration   9: 704073.930 ops/s
Iteration  10: 701139.151 ops/s
Iteration  11: 704341.654 ops/s
Iteration  12: 702605.653 ops/s
Iteration  13: 703183.223 ops/s
Iteration  14: 701644.010 ops/s
Iteration  15: 702548.971 ops/s
Iteration  16: 705456.368 ops/s
Iteration  17: 706421.803 ops/s
Iteration  18: 703872.855 ops/s
Iteration  19: 702008.138 ops/s
Iteration  20: 703459.020 ops/s
Iteration  21: 702886.628 ops/s
Iteration  22: 704341.384 ops/s
Iteration  23: 700744.781 ops/s
Iteration  24: 703574.252 ops/s
Iteration  25: 704500.975 ops/s
Iteration  26: 699018.299 ops/s
Iteration  27: 700940.990 ops/s
Iteration  28: 703904.938 ops/s
Iteration  29: 703817.190 ops/s
Iteration  30: 703720.185 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  703137.764 ±(99.9%) 1157.145 ops/s [Average]
  (min, avg, max) = (699018.299, 703137.764, 706421.803), stdev = 1731.961
  CI (99.9%): [701980.618, 704294.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  703137.764 ± 1157.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2089053.441 ops/s
# Warmup Iteration   2: 4555564.667 ops/s
# Warmup Iteration   3: 4782929.557 ops/s
# Warmup Iteration   4: 4442288.060 ops/s
# Warmup Iteration   5: 4357949.690 ops/s
# Warmup Iteration   6: 4804864.342 ops/s
# Warmup Iteration   7: 4714135.127 ops/s
# Warmup Iteration   8: 4789748.933 ops/s
# Warmup Iteration   9: 4775350.188 ops/s
# Warmup Iteration  10: 4776451.037 ops/s
# Warmup Iteration  11: 4757381.236 ops/s
# Warmup Iteration  12: 4770086.706 ops/s
# Warmup Iteration  13: 4699020.794 ops/s
# Warmup Iteration  14: 4721625.403 ops/s
# Warmup Iteration  15: 4727475.786 ops/s
# Warmup Iteration  16: 4699714.776 ops/s
# Warmup Iteration  17: 4694991.030 ops/s
# Warmup Iteration  18: 4703628.116 ops/s
# Warmup Iteration  19: 4785439.094 ops/s
# Warmup Iteration  20: 4714983.797 ops/s
# Warmup Iteration  21: 4759947.751 ops/s
# Warmup Iteration  22: 4788282.823 ops/s
# Warmup Iteration  23: 4788882.126 ops/s
# Warmup Iteration  24: 4793432.447 ops/s
# Warmup Iteration  25: 4698055.239 ops/s
# Warmup Iteration  26: 4705746.636 ops/s
# Warmup Iteration  27: 4747267.464 ops/s
# Warmup Iteration  28: 4764417.749 ops/s
# Warmup Iteration  29: 4775226.373 ops/s
# Warmup Iteration  30: 4737929.583 ops/s
Iteration   1: 4719227.712 ops/s
Iteration   2: 4739110.455 ops/s
Iteration   3: 4741255.955 ops/s
Iteration   4: 4749640.828 ops/s
Iteration   5: 4742959.929 ops/s
Iteration   6: 4775167.932 ops/s
Iteration   7: 4763140.667 ops/s
Iteration   8: 4751016.039 ops/s
Iteration   9: 4697511.499 ops/s
Iteration  10: 4707073.445 ops/s
Iteration  11: 4803240.858 ops/s
Iteration  12: 4767196.533 ops/s
Iteration  13: 4691729.731 ops/s
Iteration  14: 4717352.234 ops/s
Iteration  15: 4798159.906 ops/s
Iteration  16: 4752173.872 ops/s
Iteration  17: 4668811.873 ops/s
Iteration  18: 4706009.143 ops/s
Iteration  19: 4716907.252 ops/s
Iteration  20: 4810764.765 ops/s
Iteration  21: 4781948.115 ops/s
Iteration  22: 4760616.942 ops/s
Iteration  23: 4678170.982 ops/s
Iteration  24: 4780267.734 ops/s
Iteration  25: 4752472.168 ops/s
Iteration  26: 4733848.411 ops/s
Iteration  27: 4715485.767 ops/s
Iteration  28: 4651422.330 ops/s
Iteration  29: 4736881.836 ops/s
Iteration  30: 4778497.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_indexOf":
  4739602.070 ±(99.9%) 26595.138 ops/s [Average]
  (min, avg, max) = (4651422.330, 4739602.070, 4810764.765), stdev = 39806.353
  CI (99.9%): [4713006.933, 4766197.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_indexOf  thrpt   30  4739602.070 ± 26595.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6782213.907 ops/s
# Warmup Iteration   2: 13775171.291 ops/s
# Warmup Iteration   3: 12626148.329 ops/s
# Warmup Iteration   4: 13114889.257 ops/s
# Warmup Iteration   5: 13615416.430 ops/s
# Warmup Iteration   6: 13615053.138 ops/s
# Warmup Iteration   7: 13600166.500 ops/s
# Warmup Iteration   8: 13567090.535 ops/s
# Warmup Iteration   9: 13622274.226 ops/s
# Warmup Iteration  10: 13619445.510 ops/s
# Warmup Iteration  11: 13610150.139 ops/s
# Warmup Iteration  12: 13610110.273 ops/s
# Warmup Iteration  13: 13605294.877 ops/s
# Warmup Iteration  14: 13576972.948 ops/s
# Warmup Iteration  15: 13597663.623 ops/s
# Warmup Iteration  16: 13577647.874 ops/s
# Warmup Iteration  17: 13617750.781 ops/s
# Warmup Iteration  18: 13601241.960 ops/s
# Warmup Iteration  19: 13609427.888 ops/s
# Warmup Iteration  20: 13583091.119 ops/s
# Warmup Iteration  21: 13619392.714 ops/s
# Warmup Iteration  22: 13598227.537 ops/s
# Warmup Iteration  23: 13601047.859 ops/s
# Warmup Iteration  24: 13600954.647 ops/s
# Warmup Iteration  25: 13570108.014 ops/s
# Warmup Iteration  26: 13608082.092 ops/s
# Warmup Iteration  27: 13598070.851 ops/s
# Warmup Iteration  28: 13588807.445 ops/s
# Warmup Iteration  29: 13624112.112 ops/s
# Warmup Iteration  30: 13607589.973 ops/s
Iteration   1: 13623563.118 ops/s
Iteration   2: 13609029.166 ops/s
Iteration   3: 13617626.033 ops/s
Iteration   4: 13605449.892 ops/s
Iteration   5: 13595500.959 ops/s
Iteration   6: 13589565.059 ops/s
Iteration   7: 13518255.411 ops/s
Iteration   8: 13629499.907 ops/s
Iteration   9: 13598642.219 ops/s
Iteration  10: 13614064.488 ops/s
Iteration  11: 13622039.760 ops/s
Iteration  12: 13586119.408 ops/s
Iteration  13: 13600721.002 ops/s
Iteration  14: 13603733.332 ops/s
Iteration  15: 13642327.807 ops/s
Iteration  16: 13598998.544 ops/s
Iteration  17: 13607215.198 ops/s
Iteration  18: 13604493.243 ops/s
Iteration  19: 13590509.305 ops/s
Iteration  20: 13601703.857 ops/s
Iteration  21: 13612139.716 ops/s
Iteration  22: 13606282.790 ops/s
Iteration  23: 13574858.189 ops/s
Iteration  24: 13577268.944 ops/s
Iteration  25: 13585464.752 ops/s
Iteration  26: 13599726.608 ops/s
Iteration  27: 13622718.027 ops/s
Iteration  28: 13568439.626 ops/s
Iteration  29: 13572108.118 ops/s
Iteration  30: 13608595.468 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectInto":
  13599555.332 ±(99.9%) 15403.194 ops/s [Average]
  (min, avg, max) = (13518255.411, 13599555.332, 13642327.807), stdev = 23054.777
  CI (99.9%): [13584152.138, 13614958.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectInto  thrpt   30  13599555.332 ± 15403.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6880739.374 ops/s
# Warmup Iteration   2: 14001677.368 ops/s
# Warmup Iteration   3: 12411666.777 ops/s
# Warmup Iteration   4: 14083778.296 ops/s
# Warmup Iteration   5: 14436773.324 ops/s
# Warmup Iteration   6: 14405690.740 ops/s
# Warmup Iteration   7: 14452781.467 ops/s
# Warmup Iteration   8: 14461103.756 ops/s
# Warmup Iteration   9: 14445600.356 ops/s
# Warmup Iteration  10: 14439296.813 ops/s
# Warmup Iteration  11: 14435486.389 ops/s
# Warmup Iteration  12: 14421874.188 ops/s
# Warmup Iteration  13: 14410763.144 ops/s
# Warmup Iteration  14: 14438550.490 ops/s
# Warmup Iteration  15: 14415196.202 ops/s
# Warmup Iteration  16: 14430346.480 ops/s
# Warmup Iteration  17: 14450367.563 ops/s
# Warmup Iteration  18: 14423404.216 ops/s
# Warmup Iteration  19: 14451506.965 ops/s
# Warmup Iteration  20: 14444076.102 ops/s
# Warmup Iteration  21: 14440382.887 ops/s
# Warmup Iteration  22: 14457864.407 ops/s
# Warmup Iteration  23: 14466348.875 ops/s
# Warmup Iteration  24: 14471253.638 ops/s
# Warmup Iteration  25: 14473440.326 ops/s
# Warmup Iteration  26: 14452880.400 ops/s
# Warmup Iteration  27: 14434309.709 ops/s
# Warmup Iteration  28: 14434778.216 ops/s
# Warmup Iteration  29: 14431957.410 ops/s
# Warmup Iteration  30: 14419289.680 ops/s
Iteration   1: 14438643.932 ops/s
Iteration   2: 14430912.711 ops/s
Iteration   3: 14451844.157 ops/s
Iteration   4: 14411095.018 ops/s
Iteration   5: 14414341.959 ops/s
Iteration   6: 14465594.462 ops/s
Iteration   7: 14451462.372 ops/s
Iteration   8: 14493068.662 ops/s
Iteration   9: 14445295.242 ops/s
Iteration  10: 14469602.366 ops/s
Iteration  11: 14422889.769 ops/s
Iteration  12: 14484777.956 ops/s
Iteration  13: 14470582.333 ops/s
Iteration  14: 14498037.350 ops/s
Iteration  15: 14466876.093 ops/s
Iteration  16: 14438938.533 ops/s
Iteration  17: 14464651.341 ops/s
Iteration  18: 14426976.888 ops/s
Iteration  19: 14481715.887 ops/s
Iteration  20: 14465742.559 ops/s
Iteration  21: 14448275.558 ops/s
Iteration  22: 14437052.499 ops/s
Iteration  23: 14474130.849 ops/s
Iteration  24: 14449239.330 ops/s
Iteration  25: 14464279.903 ops/s
Iteration  26: 14453861.235 ops/s
Iteration  27: 14430386.591 ops/s
Iteration  28: 14429786.834 ops/s
Iteration  29: 14440788.271 ops/s
Iteration  30: 14424858.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoDouble":
  14451523.632 ±(99.9%) 15337.315 ops/s [Average]
  (min, avg, max) = (14411095.018, 14451523.632, 14498037.350), stdev = 22956.172
  CI (99.9%): [14436186.318, 14466860.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  14451523.632 ± 15337.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6871707.802 ops/s
# Warmup Iteration   2: 14056790.654 ops/s
# Warmup Iteration   3: 12339896.950 ops/s
# Warmup Iteration   4: 13899830.147 ops/s
# Warmup Iteration   5: 14208444.654 ops/s
# Warmup Iteration   6: 14230656.506 ops/s
# Warmup Iteration   7: 14197714.005 ops/s
# Warmup Iteration   8: 14182521.781 ops/s
# Warmup Iteration   9: 14207455.079 ops/s
# Warmup Iteration  10: 14132467.975 ops/s
# Warmup Iteration  11: 14231743.573 ops/s
# Warmup Iteration  12: 14209786.508 ops/s
# Warmup Iteration  13: 14209250.147 ops/s
# Warmup Iteration  14: 14231743.816 ops/s
# Warmup Iteration  15: 14220900.423 ops/s
# Warmup Iteration  16: 14229105.783 ops/s
# Warmup Iteration  17: 14208499.011 ops/s
# Warmup Iteration  18: 14207625.422 ops/s
# Warmup Iteration  19: 14246178.903 ops/s
# Warmup Iteration  20: 14211365.269 ops/s
# Warmup Iteration  21: 14217226.717 ops/s
# Warmup Iteration  22: 14204823.637 ops/s
# Warmup Iteration  23: 14232262.866 ops/s
# Warmup Iteration  24: 14264985.998 ops/s
# Warmup Iteration  25: 14222972.078 ops/s
# Warmup Iteration  26: 14230236.031 ops/s
# Warmup Iteration  27: 14258023.035 ops/s
# Warmup Iteration  28: 14204688.597 ops/s
# Warmup Iteration  29: 14214238.163 ops/s
# Warmup Iteration  30: 14234545.980 ops/s
Iteration   1: 14251118.025 ops/s
Iteration   2: 14184323.366 ops/s
Iteration   3: 14264447.250 ops/s
Iteration   4: 14166298.863 ops/s
Iteration   5: 14215110.395 ops/s
Iteration   6: 14199656.042 ops/s
Iteration   7: 14222105.620 ops/s
Iteration   8: 14215622.906 ops/s
Iteration   9: 14227222.692 ops/s
Iteration  10: 14193782.660 ops/s
Iteration  11: 14229172.659 ops/s
Iteration  12: 14194509.580 ops/s
Iteration  13: 14208180.174 ops/s
Iteration  14: 14193158.942 ops/s
Iteration  15: 14180077.054 ops/s
Iteration  16: 14218964.868 ops/s
Iteration  17: 14267962.340 ops/s
Iteration  18: 14180714.816 ops/s
Iteration  19: 14247233.576 ops/s
Iteration  20: 14238860.945 ops/s
Iteration  21: 14206079.549 ops/s
Iteration  22: 14182309.214 ops/s
Iteration  23: 14206510.909 ops/s
Iteration  24: 14204009.675 ops/s
Iteration  25: 14212090.157 ops/s
Iteration  26: 14250004.149 ops/s
Iteration  27: 14183141.103 ops/s
Iteration  28: 14213481.521 ops/s
Iteration  29: 14245326.149 ops/s
Iteration  30: 14238262.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoFloat":
  14214657.928 ±(99.9%) 17964.319 ops/s [Average]
  (min, avg, max) = (14166298.863, 14214657.928, 14267962.340), stdev = 26888.149
  CI (99.9%): [14196693.609, 14232622.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  14214657.928 ± 17964.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7392048.109 ops/s
# Warmup Iteration   2: 15067685.585 ops/s
# Warmup Iteration   3: 12991466.794 ops/s
# Warmup Iteration   4: 15461740.643 ops/s
# Warmup Iteration   5: 15468250.169 ops/s
# Warmup Iteration   6: 15383233.703 ops/s
# Warmup Iteration   7: 15494241.229 ops/s
# Warmup Iteration   8: 15487199.591 ops/s
# Warmup Iteration   9: 15444386.816 ops/s
# Warmup Iteration  10: 15458212.686 ops/s
# Warmup Iteration  11: 15431861.052 ops/s
# Warmup Iteration  12: 15471496.930 ops/s
# Warmup Iteration  13: 15467470.909 ops/s
# Warmup Iteration  14: 15499071.735 ops/s
# Warmup Iteration  15: 15450385.582 ops/s
# Warmup Iteration  16: 15490864.239 ops/s
# Warmup Iteration  17: 15436637.230 ops/s
# Warmup Iteration  18: 15480420.622 ops/s
# Warmup Iteration  19: 15469146.518 ops/s
# Warmup Iteration  20: 15486460.804 ops/s
# Warmup Iteration  21: 15434485.804 ops/s
# Warmup Iteration  22: 15459561.764 ops/s
# Warmup Iteration  23: 15467397.804 ops/s
# Warmup Iteration  24: 15483575.372 ops/s
# Warmup Iteration  25: 15455173.097 ops/s
# Warmup Iteration  26: 15509576.472 ops/s
# Warmup Iteration  27: 15475771.542 ops/s
# Warmup Iteration  28: 15457458.273 ops/s
# Warmup Iteration  29: 15472115.079 ops/s
# Warmup Iteration  30: 15480914.215 ops/s
Iteration   1: 15503297.468 ops/s
Iteration   2: 15480642.086 ops/s
Iteration   3: 15462328.133 ops/s
Iteration   4: 15447062.076 ops/s
Iteration   5: 15516481.474 ops/s
Iteration   6: 15516395.732 ops/s
Iteration   7: 15474165.735 ops/s
Iteration   8: 15455792.425 ops/s
Iteration   9: 15440418.735 ops/s
Iteration  10: 15433011.793 ops/s
Iteration  11: 15470074.755 ops/s
Iteration  12: 15480418.726 ops/s
Iteration  13: 15465416.706 ops/s
Iteration  14: 15490917.727 ops/s
Iteration  15: 15504848.745 ops/s
Iteration  16: 15415654.668 ops/s
Iteration  17: 15430056.367 ops/s
Iteration  18: 15426556.173 ops/s
Iteration  19: 15476927.792 ops/s
Iteration  20: 15372231.155 ops/s
Iteration  21: 15460775.172 ops/s
Iteration  22: 15465145.419 ops/s
Iteration  23: 15513650.531 ops/s
Iteration  24: 15448211.215 ops/s
Iteration  25: 15431747.200 ops/s
Iteration  26: 15448118.751 ops/s
Iteration  27: 15481382.641 ops/s
Iteration  28: 15444627.073 ops/s
Iteration  29: 15498507.016 ops/s
Iteration  30: 15453963.253 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoInt":
  15463627.558 ±(99.9%) 22006.431 ops/s [Average]
  (min, avg, max) = (15372231.155, 15463627.558, 15516481.474), stdev = 32938.193
  CI (99.9%): [15441621.127, 15485633.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  15463627.558 ± 22006.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7011144.700 ops/s
# Warmup Iteration   2: 14235085.110 ops/s
# Warmup Iteration   3: 12721514.838 ops/s
# Warmup Iteration   4: 14996120.273 ops/s
# Warmup Iteration   5: 15023671.399 ops/s
# Warmup Iteration   6: 14980419.927 ops/s
# Warmup Iteration   7: 15005558.793 ops/s
# Warmup Iteration   8: 14996605.484 ops/s
# Warmup Iteration   9: 15045351.156 ops/s
# Warmup Iteration  10: 15011363.456 ops/s
# Warmup Iteration  11: 15028208.099 ops/s
# Warmup Iteration  12: 15052943.487 ops/s
# Warmup Iteration  13: 15066512.706 ops/s
# Warmup Iteration  14: 15056231.071 ops/s
# Warmup Iteration  15: 15071952.980 ops/s
# Warmup Iteration  16: 15041186.742 ops/s
# Warmup Iteration  17: 15246260.412 ops/s
# Warmup Iteration  18: 15171063.589 ops/s
# Warmup Iteration  19: 15236795.160 ops/s
# Warmup Iteration  20: 15226833.349 ops/s
# Warmup Iteration  21: 15270974.070 ops/s
# Warmup Iteration  22: 15218163.352 ops/s
# Warmup Iteration  23: 15242898.026 ops/s
# Warmup Iteration  24: 15282981.275 ops/s
# Warmup Iteration  25: 15251563.411 ops/s
# Warmup Iteration  26: 15287416.076 ops/s
# Warmup Iteration  27: 15210662.239 ops/s
# Warmup Iteration  28: 15242569.904 ops/s
# Warmup Iteration  29: 15288149.686 ops/s
# Warmup Iteration  30: 15163564.847 ops/s
Iteration   1: 15267411.675 ops/s
Iteration   2: 15280539.155 ops/s
Iteration   3: 15193948.272 ops/s
Iteration   4: 15251978.069 ops/s
Iteration   5: 15287296.086 ops/s
Iteration   6: 15226694.044 ops/s
Iteration   7: 15232119.208 ops/s
Iteration   8: 15238106.594 ops/s
Iteration   9: 15277358.078 ops/s
Iteration  10: 15325076.011 ops/s
Iteration  11: 15258565.940 ops/s
Iteration  12: 15239035.643 ops/s
Iteration  13: 15253134.566 ops/s
Iteration  14: 15245893.821 ops/s
Iteration  15: 15273668.357 ops/s
Iteration  16: 15271622.290 ops/s
Iteration  17: 15304223.548 ops/s
Iteration  18: 15282122.913 ops/s
Iteration  19: 15357639.455 ops/s
Iteration  20: 15301442.408 ops/s
Iteration  21: 15246740.144 ops/s
Iteration  22: 15253736.953 ops/s
Iteration  23: 15274092.921 ops/s
Iteration  24: 15305098.240 ops/s
Iteration  25: 15211075.919 ops/s
Iteration  26: 15221208.711 ops/s
Iteration  27: 15363649.255 ops/s
Iteration  28: 15283461.947 ops/s
Iteration  29: 15248605.600 ops/s
Iteration  30: 15255424.794 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoLong":
  15267699.021 ±(99.9%) 25807.056 ops/s [Average]
  (min, avg, max) = (15193948.272, 15267699.021, 15363649.255), stdev = 38626.789
  CI (99.9%): [15241891.965, 15293506.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  15267699.021 ± 25807.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3836406.859 ops/s
# Warmup Iteration   2: 8592236.001 ops/s
# Warmup Iteration   3: 8586435.132 ops/s
# Warmup Iteration   4: 7180244.813 ops/s
# Warmup Iteration   5: 8589511.405 ops/s
# Warmup Iteration   6: 8554438.501 ops/s
# Warmup Iteration   7: 8592034.644 ops/s
# Warmup Iteration   8: 8588379.160 ops/s
# Warmup Iteration   9: 8606119.151 ops/s
# Warmup Iteration  10: 8582992.064 ops/s
# Warmup Iteration  11: 8582510.630 ops/s
# Warmup Iteration  12: 8590167.821 ops/s
# Warmup Iteration  13: 8541326.404 ops/s
# Warmup Iteration  14: 8572275.424 ops/s
# Warmup Iteration  15: 8579695.480 ops/s
# Warmup Iteration  16: 8569232.673 ops/s
# Warmup Iteration  17: 8580302.225 ops/s
# Warmup Iteration  18: 8566522.657 ops/s
# Warmup Iteration  19: 8570556.238 ops/s
# Warmup Iteration  20: 8578839.430 ops/s
# Warmup Iteration  21: 8530932.834 ops/s
# Warmup Iteration  22: 8600156.222 ops/s
# Warmup Iteration  23: 8567003.688 ops/s
# Warmup Iteration  24: 8579058.446 ops/s
# Warmup Iteration  25: 8580642.847 ops/s
# Warmup Iteration  26: 8601290.892 ops/s
# Warmup Iteration  27: 8564663.641 ops/s
# Warmup Iteration  28: 8580715.841 ops/s
# Warmup Iteration  29: 8565392.958 ops/s
# Warmup Iteration  30: 8575844.609 ops/s
Iteration   1: 8577814.668 ops/s
Iteration   2: 8571531.901 ops/s
Iteration   3: 8566273.585 ops/s
Iteration   4: 8601827.402 ops/s
Iteration   5: 8418220.735 ops/s
Iteration   6: 8550013.204 ops/s
Iteration   7: 8593106.712 ops/s
Iteration   8: 8595327.888 ops/s
Iteration   9: 8577551.576 ops/s
Iteration  10: 8588738.403 ops/s
Iteration  11: 8575577.340 ops/s
Iteration  12: 8597366.474 ops/s
Iteration  13: 8585634.001 ops/s
Iteration  14: 8582161.929 ops/s
Iteration  15: 8609035.075 ops/s
Iteration  16: 8521286.502 ops/s
Iteration  17: 8587246.789 ops/s
Iteration  18: 8548758.175 ops/s
Iteration  19: 8583121.485 ops/s
Iteration  20: 8582744.300 ops/s
Iteration  21: 8572348.078 ops/s
Iteration  22: 8595538.143 ops/s
Iteration  23: 8562720.162 ops/s
Iteration  24: 8594617.060 ops/s
Iteration  25: 8582915.121 ops/s
Iteration  26: 8566832.587 ops/s
Iteration  27: 8585922.659 ops/s
Iteration  28: 8576551.345 ops/s
Iteration  29: 8594334.048 ops/s
Iteration  30: 8592827.844 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_injectIntoWith":
  8574598.173 ±(99.9%) 23054.684 ops/s [Average]
  (min, avg, max) = (8418220.735, 8574598.173, 8609035.075), stdev = 34507.168
  CI (99.9%): [8551543.490, 8597652.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_injectIntoWith  thrpt   30  8574598.173 ± 23054.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3180753.228 ops/s
# Warmup Iteration   2: 5605173.526 ops/s
# Warmup Iteration   3: 6629661.872 ops/s
# Warmup Iteration   4: 6638106.514 ops/s
# Warmup Iteration   5: 6600746.575 ops/s
# Warmup Iteration   6: 6603710.122 ops/s
# Warmup Iteration   7: 6621386.695 ops/s
# Warmup Iteration   8: 6649811.078 ops/s
# Warmup Iteration   9: 6623340.469 ops/s
# Warmup Iteration  10: 6603978.566 ops/s
# Warmup Iteration  11: 6603199.405 ops/s
# Warmup Iteration  12: 6618396.475 ops/s
# Warmup Iteration  13: 6629067.880 ops/s
# Warmup Iteration  14: 6627499.770 ops/s
# Warmup Iteration  15: 6622932.030 ops/s
# Warmup Iteration  16: 6618728.057 ops/s
# Warmup Iteration  17: 6644234.916 ops/s
# Warmup Iteration  18: 6624084.145 ops/s
# Warmup Iteration  19: 6631051.595 ops/s
# Warmup Iteration  20: 6619964.651 ops/s
# Warmup Iteration  21: 6613875.299 ops/s
# Warmup Iteration  22: 6638181.475 ops/s
# Warmup Iteration  23: 6619098.542 ops/s
# Warmup Iteration  24: 6655155.964 ops/s
# Warmup Iteration  25: 6637877.149 ops/s
# Warmup Iteration  26: 6594726.862 ops/s
# Warmup Iteration  27: 6633705.447 ops/s
# Warmup Iteration  28: 6617891.503 ops/s
# Warmup Iteration  29: 6637599.680 ops/s
# Warmup Iteration  30: 6644044.911 ops/s
Iteration   1: 6628860.377 ops/s
Iteration   2: 6616520.694 ops/s
Iteration   3: 6648505.950 ops/s
Iteration   4: 6637347.775 ops/s
Iteration   5: 6650006.775 ops/s
Iteration   6: 6592835.358 ops/s
Iteration   7: 6612352.168 ops/s
Iteration   8: 6622089.951 ops/s
Iteration   9: 6635183.284 ops/s
Iteration  10: 6687233.703 ops/s
Iteration  11: 6625179.676 ops/s
Iteration  12: 6570272.897 ops/s
Iteration  13: 6622667.132 ops/s
Iteration  14: 6643882.204 ops/s
Iteration  15: 6649725.344 ops/s
Iteration  16: 6653692.168 ops/s
Iteration  17: 6620090.843 ops/s
Iteration  18: 6619873.570 ops/s
Iteration  19: 6617992.537 ops/s
Iteration  20: 6649669.507 ops/s
Iteration  21: 6599226.150 ops/s
Iteration  22: 6609265.154 ops/s
Iteration  23: 6612445.561 ops/s
Iteration  24: 6649223.281 ops/s
Iteration  25: 6615355.594 ops/s
Iteration  26: 6623391.420 ops/s
Iteration  27: 6628901.651 ops/s
Iteration  28: 6596280.591 ops/s
Iteration  29: 6672057.013 ops/s
Iteration  30: 6610703.506 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_isEmpty":
  6627361.061 ±(99.9%) 16147.580 ops/s [Average]
  (min, avg, max) = (6570272.897, 6627361.061, 6687233.703), stdev = 24168.940
  CI (99.9%): [6611213.481, 6643508.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_isEmpty  thrpt   30  6627361.061 ± 16147.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5395515.719 ops/s
# Warmup Iteration   2: 11603269.426 ops/s
# Warmup Iteration   3: 9746821.322 ops/s
# Warmup Iteration   4: 12425213.708 ops/s
# Warmup Iteration   5: 12372410.827 ops/s
# Warmup Iteration   6: 12392409.952 ops/s
# Warmup Iteration   7: 12346097.588 ops/s
# Warmup Iteration   8: 12381902.384 ops/s
# Warmup Iteration   9: 12437637.707 ops/s
# Warmup Iteration  10: 12392946.500 ops/s
# Warmup Iteration  11: 12349257.826 ops/s
# Warmup Iteration  12: 12383324.966 ops/s
# Warmup Iteration  13: 12359071.660 ops/s
# Warmup Iteration  14: 12422659.854 ops/s
# Warmup Iteration  15: 12378730.582 ops/s
# Warmup Iteration  16: 12367643.502 ops/s
# Warmup Iteration  17: 12338916.842 ops/s
# Warmup Iteration  18: 12381901.766 ops/s
# Warmup Iteration  19: 12360599.495 ops/s
# Warmup Iteration  20: 12337811.419 ops/s
# Warmup Iteration  21: 12381120.847 ops/s
# Warmup Iteration  22: 12410556.941 ops/s
# Warmup Iteration  23: 12357623.400 ops/s
# Warmup Iteration  24: 12386777.245 ops/s
# Warmup Iteration  25: 12404911.190 ops/s
# Warmup Iteration  26: 12407300.892 ops/s
# Warmup Iteration  27: 12366725.265 ops/s
# Warmup Iteration  28: 12393980.998 ops/s
# Warmup Iteration  29: 12363060.814 ops/s
# Warmup Iteration  30: 12359313.675 ops/s
Iteration   1: 12381765.981 ops/s
Iteration   2: 12385699.705 ops/s
Iteration   3: 12271439.246 ops/s
Iteration   4: 12248357.706 ops/s
Iteration   5: 12349904.077 ops/s
Iteration   6: 12412116.853 ops/s
Iteration   7: 12365579.417 ops/s
Iteration   8: 12417661.229 ops/s
Iteration   9: 12399674.647 ops/s
Iteration  10: 12384134.703 ops/s
Iteration  11: 12365776.710 ops/s
Iteration  12: 12424624.847 ops/s
Iteration  13: 12365339.627 ops/s
Iteration  14: 12357438.302 ops/s
Iteration  15: 12425063.534 ops/s
Iteration  16: 12380025.011 ops/s
Iteration  17: 12377718.204 ops/s
Iteration  18: 12395416.090 ops/s
Iteration  19: 12342462.875 ops/s
Iteration  20: 12435444.138 ops/s
Iteration  21: 12404824.336 ops/s
Iteration  22: 12336108.483 ops/s
Iteration  23: 12420815.738 ops/s
Iteration  24: 12390522.865 ops/s
Iteration  25: 12341077.462 ops/s
Iteration  26: 12400119.598 ops/s
Iteration  27: 12333994.671 ops/s
Iteration  28: 12373813.359 ops/s
Iteration  29: 12409486.633 ops/s
Iteration  30: 12415042.104 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator":
  12377048.272 ±(99.9%) 28568.137 ops/s [Average]
  (min, avg, max) = (12248357.706, 12377048.272, 12435444.138), stdev = 42759.446
  CI (99.9%): [12348480.135, 12405616.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_iterator  thrpt   30  12377048.272 ± 28568.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627230.457 ops/s
# Warmup Iteration   2: 653349.542 ops/s
# Warmup Iteration   3: 876382.545 ops/s
# Warmup Iteration   4: 877095.873 ops/s
# Warmup Iteration   5: 879129.702 ops/s
# Warmup Iteration   6: 880160.938 ops/s
# Warmup Iteration   7: 879759.733 ops/s
# Warmup Iteration   8: 877174.569 ops/s
# Warmup Iteration   9: 876973.154 ops/s
# Warmup Iteration  10: 878689.205 ops/s
# Warmup Iteration  11: 807952.340 ops/s
# Warmup Iteration  12: 799193.717 ops/s
# Warmup Iteration  13: 876491.656 ops/s
# Warmup Iteration  14: 878688.120 ops/s
# Warmup Iteration  15: 878283.543 ops/s
# Warmup Iteration  16: 875714.085 ops/s
# Warmup Iteration  17: 936114.773 ops/s
# Warmup Iteration  18: 937041.891 ops/s
# Warmup Iteration  19: 933610.841 ops/s
# Warmup Iteration  20: 935080.958 ops/s
# Warmup Iteration  21: 938198.429 ops/s
# Warmup Iteration  22: 940365.731 ops/s
# Warmup Iteration  23: 934632.002 ops/s
# Warmup Iteration  24: 933273.633 ops/s
# Warmup Iteration  25: 933075.389 ops/s
# Warmup Iteration  26: 937904.903 ops/s
# Warmup Iteration  27: 936884.032 ops/s
# Warmup Iteration  28: 934102.779 ops/s
# Warmup Iteration  29: 937872.620 ops/s
# Warmup Iteration  30: 937861.316 ops/s
Iteration   1: 938333.720 ops/s
Iteration   2: 937872.416 ops/s
Iteration   3: 942042.359 ops/s
Iteration   4: 935599.704 ops/s
Iteration   5: 940308.302 ops/s
Iteration   6: 931362.891 ops/s
Iteration   7: 937479.785 ops/s
Iteration   8: 929233.462 ops/s
Iteration   9: 935621.105 ops/s
Iteration  10: 932927.794 ops/s
Iteration  11: 932838.356 ops/s
Iteration  12: 932068.520 ops/s
Iteration  13: 925900.250 ops/s
Iteration  14: 931656.867 ops/s
Iteration  15: 936878.466 ops/s
Iteration  16: 930049.832 ops/s
Iteration  17: 929381.215 ops/s
Iteration  18: 931739.454 ops/s
Iteration  19: 931493.787 ops/s
Iteration  20: 937151.478 ops/s
Iteration  21: 933802.212 ops/s
Iteration  22: 929687.825 ops/s
Iteration  23: 930049.153 ops/s
Iteration  24: 928431.495 ops/s
Iteration  25: 928645.701 ops/s
Iteration  26: 933572.322 ops/s
Iteration  27: 932037.467 ops/s
Iteration  28: 927001.957 ops/s
Iteration  29: 936567.373 ops/s
Iteration  30: 919858.766 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_iterator_throws":
  932653.135 ±(99.9%) 3109.477 ops/s [Average]
  (min, avg, max) = (919858.766, 932653.135, 942042.359), stdev = 4654.120
  CI (99.9%): [929543.657, 935762.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_iterator_throws  thrpt   30  932653.135 ± 3109.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.108 ops/s
# Warmup Iteration   2: 6.471 ops/s
# Warmup Iteration   3: 7.671 ops/s
# Warmup Iteration   4: 7.944 ops/s
# Warmup Iteration   5: 8.055 ops/s
# Warmup Iteration   6: 8.031 ops/s
# Warmup Iteration   7: 8.110 ops/s
# Warmup Iteration   8: 8.051 ops/s
# Warmup Iteration   9: 8.127 ops/s
# Warmup Iteration  10: 8.040 ops/s
# Warmup Iteration  11: 8.063 ops/s
# Warmup Iteration  12: 8.069 ops/s
# Warmup Iteration  13: 7.155 ops/s
# Warmup Iteration  14: 8.030 ops/s
# Warmup Iteration  15: 8.112 ops/s
# Warmup Iteration  16: 8.020 ops/s
# Warmup Iteration  17: 8.121 ops/s
# Warmup Iteration  18: 8.116 ops/s
# Warmup Iteration  19: 8.079 ops/s
# Warmup Iteration  20: 8.078 ops/s
# Warmup Iteration  21: 8.095 ops/s
# Warmup Iteration  22: 8.093 ops/s
# Warmup Iteration  23: 8.067 ops/s
# Warmup Iteration  24: 8.139 ops/s
# Warmup Iteration  25: 8.024 ops/s
# Warmup Iteration  26: 8.129 ops/s
# Warmup Iteration  27: 8.070 ops/s
# Warmup Iteration  28: 8.065 ops/s
# Warmup Iteration  29: 8.098 ops/s
# Warmup Iteration  30: 8.060 ops/s
Iteration   1: 8.091 ops/s
Iteration   2: 8.024 ops/s
Iteration   3: 8.094 ops/s
Iteration   4: 8.130 ops/s
Iteration   5: 8.096 ops/s
Iteration   6: 8.118 ops/s
Iteration   7: 8.133 ops/s
Iteration   8: 8.209 ops/s
Iteration   9: 8.157 ops/s
Iteration  10: 8.150 ops/s
Iteration  11: 8.101 ops/s
Iteration  12: 8.148 ops/s
Iteration  13: 8.188 ops/s
Iteration  14: 8.160 ops/s
Iteration  15: 8.059 ops/s
Iteration  16: 8.153 ops/s
Iteration  17: 8.187 ops/s
Iteration  18: 8.150 ops/s
Iteration  19: 8.135 ops/s
Iteration  20: 8.088 ops/s
Iteration  21: 8.108 ops/s
Iteration  22: 8.131 ops/s
Iteration  23: 8.119 ops/s
Iteration  24: 8.095 ops/s
Iteration  25: 8.207 ops/s
Iteration  26: 8.161 ops/s
Iteration  27: 8.111 ops/s
Iteration  28: 8.086 ops/s
Iteration  29: 8.151 ops/s
Iteration  30: 8.110 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  8.128 ±(99.9%) 0.028 ops/s [Average]
  (min, avg, max) = (8.024, 8.128, 8.209), stdev = 0.042
  CI (99.9%): [8.101, 8.156] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt  Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  8.128 ± 0.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2880195.827 ops/s
# Warmup Iteration   2: 6390226.266 ops/s
# Warmup Iteration   3: 6480601.905 ops/s
# Warmup Iteration   4: 5344067.147 ops/s
# Warmup Iteration   5: 6439909.495 ops/s
# Warmup Iteration   6: 6430797.403 ops/s
# Warmup Iteration   7: 6458487.806 ops/s
# Warmup Iteration   8: 6419072.208 ops/s
# Warmup Iteration   9: 6430420.395 ops/s
# Warmup Iteration  10: 6389961.706 ops/s
# Warmup Iteration  11: 6467990.216 ops/s
# Warmup Iteration  12: 6394689.276 ops/s
# Warmup Iteration  13: 6373775.948 ops/s
# Warmup Iteration  14: 6452325.794 ops/s
# Warmup Iteration  15: 6343345.364 ops/s
# Warmup Iteration  16: 6406278.552 ops/s
# Warmup Iteration  17: 6423284.359 ops/s
# Warmup Iteration  18: 6365639.373 ops/s
# Warmup Iteration  19: 6399533.370 ops/s
# Warmup Iteration  20: 6452628.096 ops/s
# Warmup Iteration  21: 6423239.846 ops/s
# Warmup Iteration  22: 6442365.912 ops/s
# Warmup Iteration  23: 6497328.495 ops/s
# Warmup Iteration  24: 6352452.881 ops/s
# Warmup Iteration  25: 6425205.942 ops/s
# Warmup Iteration  26: 6373339.515 ops/s
# Warmup Iteration  27: 6396161.166 ops/s
# Warmup Iteration  28: 6429104.108 ops/s
# Warmup Iteration  29: 6409499.157 ops/s
# Warmup Iteration  30: 6398831.522 ops/s
Iteration   1: 6351404.460 ops/s
Iteration   2: 6325519.303 ops/s
Iteration   3: 6249160.057 ops/s
Iteration   4: 6480411.701 ops/s
Iteration   5: 6384993.163 ops/s
Iteration   6: 6044529.595 ops/s
Iteration   7: 6418494.473 ops/s
Iteration   8: 6414204.820 ops/s
Iteration   9: 6327050.893 ops/s
Iteration  10: 6448717.123 ops/s
Iteration  11: 6440313.215 ops/s
Iteration  12: 6358918.641 ops/s
Iteration  13: 6367197.267 ops/s
Iteration  14: 6419405.013 ops/s
Iteration  15: 6478852.536 ops/s
Iteration  16: 6453181.659 ops/s
Iteration  17: 6444980.286 ops/s
Iteration  18: 6399313.581 ops/s
Iteration  19: 6529010.520 ops/s
Iteration  20: 6344106.745 ops/s
Iteration  21: 6433981.083 ops/s
Iteration  22: 6434946.089 ops/s
Iteration  23: 6453207.115 ops/s
Iteration  24: 6500939.424 ops/s
Iteration  25: 6492907.588 ops/s
Iteration  26: 6336380.124 ops/s
Iteration  27: 6427039.979 ops/s
Iteration  28: 6434802.127 ops/s
Iteration  29: 6410176.908 ops/s
Iteration  30: 6476671.580 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_lastIndexOf":
  6402693.902 ±(99.9%) 61200.297 ops/s [Average]
  (min, avg, max) = (6044529.595, 6402693.902, 6529010.520), stdev = 91601.731
  CI (99.9%): [6341493.605, 6463894.199] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  6402693.902 ± 61200.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1821135.296 ops/s
# Warmup Iteration   2: 4517931.351 ops/s
# Warmup Iteration   3: 3821445.302 ops/s
# Warmup Iteration   4: 4454370.490 ops/s
# Warmup Iteration   5: 4506475.033 ops/s
# Warmup Iteration   6: 4514534.276 ops/s
# Warmup Iteration   7: 4511098.573 ops/s
# Warmup Iteration   8: 4510339.204 ops/s
# Warmup Iteration   9: 4519599.062 ops/s
# Warmup Iteration  10: 4508573.212 ops/s
# Warmup Iteration  11: 4514854.273 ops/s
# Warmup Iteration  12: 4539205.346 ops/s
# Warmup Iteration  13: 4516810.056 ops/s
# Warmup Iteration  14: 4525175.640 ops/s
# Warmup Iteration  15: 4522771.223 ops/s
# Warmup Iteration  16: 4510501.489 ops/s
# Warmup Iteration  17: 4514506.904 ops/s
# Warmup Iteration  18: 4528002.801 ops/s
# Warmup Iteration  19: 4524236.836 ops/s
# Warmup Iteration  20: 4539933.467 ops/s
# Warmup Iteration  21: 4515991.728 ops/s
# Warmup Iteration  22: 4518131.739 ops/s
# Warmup Iteration  23: 4517352.528 ops/s
# Warmup Iteration  24: 4525106.656 ops/s
# Warmup Iteration  25: 4519216.073 ops/s
# Warmup Iteration  26: 4509520.834 ops/s
# Warmup Iteration  27: 4520630.607 ops/s
# Warmup Iteration  28: 4524552.573 ops/s
# Warmup Iteration  29: 4525403.588 ops/s
# Warmup Iteration  30: 4515241.340 ops/s
Iteration   1: 4518493.575 ops/s
Iteration   2: 4522004.035 ops/s
Iteration   3: 4533238.448 ops/s
Iteration   4: 4516037.047 ops/s
Iteration   5: 4519617.917 ops/s
Iteration   6: 4535722.726 ops/s
Iteration   7: 4526470.330 ops/s
Iteration   8: 4537497.364 ops/s
Iteration   9: 4530236.003 ops/s
Iteration  10: 4525649.056 ops/s
Iteration  11: 4527611.804 ops/s
Iteration  12: 4526135.874 ops/s
Iteration  13: 4526004.722 ops/s
Iteration  14: 4526930.752 ops/s
Iteration  15: 4532722.191 ops/s
Iteration  16: 4512798.908 ops/s
Iteration  17: 4531757.615 ops/s
Iteration  18: 4526876.719 ops/s
Iteration  19: 4522861.857 ops/s
Iteration  20: 4527122.457 ops/s
Iteration  21: 4522009.368 ops/s
Iteration  22: 4525584.765 ops/s
Iteration  23: 4547540.629 ops/s
Iteration  24: 4518767.399 ops/s
Iteration  25: 4516245.481 ops/s
Iteration  26: 4502997.073 ops/s
Iteration  27: 4531901.931 ops/s
Iteration  28: 4530255.599 ops/s
Iteration  29: 4512177.264 ops/s
Iteration  30: 4521755.847 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIterator":
  4525167.492 ±(99.9%) 5786.824 ops/s [Average]
  (min, avg, max) = (4502997.073, 4525167.492, 4547540.629), stdev = 8661.447
  CI (99.9%): [4519380.667, 4530954.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_listIterator  thrpt   30  4525167.492 ± 5786.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717338.193 ops/s
# Warmup Iteration   2: 764629.258 ops/s
# Warmup Iteration   3: 1019740.132 ops/s
# Warmup Iteration   4: 1023373.275 ops/s
# Warmup Iteration   5: 1020046.981 ops/s
# Warmup Iteration   6: 1020763.805 ops/s
# Warmup Iteration   7: 1024642.101 ops/s
# Warmup Iteration   8: 1023800.964 ops/s
# Warmup Iteration   9: 1022897.189 ops/s
# Warmup Iteration  10: 1022299.894 ops/s
# Warmup Iteration  11: 856480.636 ops/s
# Warmup Iteration  12: 1026064.591 ops/s
# Warmup Iteration  13: 1025759.836 ops/s
# Warmup Iteration  14: 1025824.482 ops/s
# Warmup Iteration  15: 1026894.571 ops/s
# Warmup Iteration  16: 1027563.527 ops/s
# Warmup Iteration  17: 1092292.545 ops/s
# Warmup Iteration  18: 1093268.325 ops/s
# Warmup Iteration  19: 1089427.438 ops/s
# Warmup Iteration  20: 1086992.529 ops/s
# Warmup Iteration  21: 1093937.408 ops/s
# Warmup Iteration  22: 1090046.799 ops/s
# Warmup Iteration  23: 1098050.999 ops/s
# Warmup Iteration  24: 1087756.733 ops/s
# Warmup Iteration  25: 1092572.578 ops/s
# Warmup Iteration  26: 1090987.739 ops/s
# Warmup Iteration  27: 1089150.562 ops/s
# Warmup Iteration  28: 1091762.262 ops/s
# Warmup Iteration  29: 1089657.415 ops/s
# Warmup Iteration  30: 1092243.868 ops/s
Iteration   1: 1088970.408 ops/s
Iteration   2: 1091001.742 ops/s
Iteration   3: 1088519.688 ops/s
Iteration   4: 1086197.799 ops/s
Iteration   5: 1095899.097 ops/s
Iteration   6: 1094302.963 ops/s
Iteration   7: 1093093.179 ops/s
Iteration   8: 1090910.684 ops/s
Iteration   9: 1093555.765 ops/s
Iteration  10: 1092371.029 ops/s
Iteration  11: 1095529.820 ops/s
Iteration  12: 1093847.997 ops/s
Iteration  13: 1097028.153 ops/s
Iteration  14: 1093569.477 ops/s
Iteration  15: 1089150.838 ops/s
Iteration  16: 1092147.936 ops/s
Iteration  17: 1095333.608 ops/s
Iteration  18: 1089345.753 ops/s
Iteration  19: 1090707.341 ops/s
Iteration  20: 1095094.426 ops/s
Iteration  21: 1096545.016 ops/s
Iteration  22: 1093051.499 ops/s
Iteration  23: 1095627.302 ops/s
Iteration  24: 1091882.885 ops/s
Iteration  25: 1089889.216 ops/s
Iteration  26: 1095088.191 ops/s
Iteration  27: 1090735.074 ops/s
Iteration  28: 1097439.318 ops/s
Iteration  29: 1084126.569 ops/s
Iteration  30: 1091510.207 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooBig":
  1092415.766 ±(99.9%) 2147.877 ops/s [Average]
  (min, avg, max) = (1084126.569, 1092415.766, 1097439.318), stdev = 3214.842
  CI (99.9%): [1090267.889, 1094563.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  1092415.766 ± 2147.877  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716122.589 ops/s
# Warmup Iteration   2: 766388.716 ops/s
# Warmup Iteration   3: 1018677.601 ops/s
# Warmup Iteration   4: 1017049.314 ops/s
# Warmup Iteration   5: 1014626.964 ops/s
# Warmup Iteration   6: 1019537.959 ops/s
# Warmup Iteration   7: 1017321.615 ops/s
# Warmup Iteration   8: 1019284.802 ops/s
# Warmup Iteration   9: 1015879.298 ops/s
# Warmup Iteration  10: 1021282.809 ops/s
# Warmup Iteration  11: 857937.722 ops/s
# Warmup Iteration  12: 1018005.983 ops/s
# Warmup Iteration  13: 1023390.906 ops/s
# Warmup Iteration  14: 1022830.319 ops/s
# Warmup Iteration  15: 1023644.342 ops/s
# Warmup Iteration  16: 1021956.525 ops/s
# Warmup Iteration  17: 1086962.476 ops/s
# Warmup Iteration  18: 1089466.411 ops/s
# Warmup Iteration  19: 1087712.582 ops/s
# Warmup Iteration  20: 1088212.278 ops/s
# Warmup Iteration  21: 1086837.740 ops/s
# Warmup Iteration  22: 1085706.454 ops/s
# Warmup Iteration  23: 1089870.130 ops/s
# Warmup Iteration  24: 1087289.218 ops/s
# Warmup Iteration  25: 1087950.069 ops/s
# Warmup Iteration  26: 1086914.262 ops/s
# Warmup Iteration  27: 1088787.270 ops/s
# Warmup Iteration  28: 1091543.100 ops/s
# Warmup Iteration  29: 1087202.222 ops/s
# Warmup Iteration  30: 1089403.019 ops/s
Iteration   1: 1090008.013 ops/s
Iteration   2: 1086950.976 ops/s
Iteration   3: 1086309.704 ops/s
Iteration   4: 1091119.529 ops/s
Iteration   5: 1088738.901 ops/s
Iteration   6: 1089703.845 ops/s
Iteration   7: 1088223.712 ops/s
Iteration   8: 1085514.970 ops/s
Iteration   9: 1088489.076 ops/s
Iteration  10: 1089230.194 ops/s
Iteration  11: 1089316.570 ops/s
Iteration  12: 1085191.092 ops/s
Iteration  13: 1086852.416 ops/s
Iteration  14: 1081701.919 ops/s
Iteration  15: 1090459.654 ops/s
Iteration  16: 1087216.434 ops/s
Iteration  17: 1085349.568 ops/s
Iteration  18: 1085493.010 ops/s
Iteration  19: 1089568.497 ops/s
Iteration  20: 1082000.933 ops/s
Iteration  21: 1090100.268 ops/s
Iteration  22: 1097676.123 ops/s
Iteration  23: 1083217.981 ops/s
Iteration  24: 1083122.388 ops/s
Iteration  25: 1087793.717 ops/s
Iteration  26: 1088430.291 ops/s
Iteration  27: 1090372.176 ops/s
Iteration  28: 1088703.693 ops/s
Iteration  29: 1090292.701 ops/s
Iteration  30: 1084329.819 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1087715.939 ±(99.9%) 2168.593 ops/s [Average]
  (min, avg, max) = (1081701.919, 1087715.939, 1097676.123), stdev = 3245.848
  CI (99.9%): [1085547.346, 1089884.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1087715.939 ± 2168.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1227528.387 ops/s
# Warmup Iteration   2: 2899675.513 ops/s
# Warmup Iteration   3: 2530320.357 ops/s
# Warmup Iteration   4: 2781603.328 ops/s
# Warmup Iteration   5: 2897996.537 ops/s
# Warmup Iteration   6: 2901199.873 ops/s
# Warmup Iteration   7: 2898627.036 ops/s
# Warmup Iteration   8: 2903218.108 ops/s
# Warmup Iteration   9: 2911706.770 ops/s
# Warmup Iteration  10: 2899364.076 ops/s
# Warmup Iteration  11: 2893077.780 ops/s
# Warmup Iteration  12: 2887193.865 ops/s
# Warmup Iteration  13: 2904592.979 ops/s
# Warmup Iteration  14: 2907733.797 ops/s
# Warmup Iteration  15: 2902037.031 ops/s
# Warmup Iteration  16: 2907294.082 ops/s
# Warmup Iteration  17: 2893066.049 ops/s
# Warmup Iteration  18: 2893291.383 ops/s
# Warmup Iteration  19: 2894666.924 ops/s
# Warmup Iteration  20: 2903575.825 ops/s
# Warmup Iteration  21: 2907773.587 ops/s
# Warmup Iteration  22: 2890539.205 ops/s
# Warmup Iteration  23: 2895731.723 ops/s
# Warmup Iteration  24: 2902412.375 ops/s
# Warmup Iteration  25: 2902278.504 ops/s
# Warmup Iteration  26: 2902886.336 ops/s
# Warmup Iteration  27: 2905364.040 ops/s
# Warmup Iteration  28: 2909019.675 ops/s
# Warmup Iteration  29: 2904980.830 ops/s
# Warmup Iteration  30: 2905684.207 ops/s
Iteration   1: 2886714.173 ops/s
Iteration   2: 2910159.707 ops/s
Iteration   3: 2898756.002 ops/s
Iteration   4: 2892637.808 ops/s
Iteration   5: 2905133.111 ops/s
Iteration   6: 2903559.352 ops/s
Iteration   7: 2907745.851 ops/s
Iteration   8: 2894642.379 ops/s
Iteration   9: 2895983.507 ops/s
Iteration  10: 2905342.256 ops/s
Iteration  11: 2904286.132 ops/s
Iteration  12: 2900541.856 ops/s
Iteration  13: 2900223.943 ops/s
Iteration  14: 2905144.555 ops/s
Iteration  15: 2896980.519 ops/s
Iteration  16: 2903576.467 ops/s
Iteration  17: 2907124.007 ops/s
Iteration  18: 2899619.747 ops/s
Iteration  19: 2897002.907 ops/s
Iteration  20: 2917792.835 ops/s
Iteration  21: 2901529.612 ops/s
Iteration  22: 2895559.599 ops/s
Iteration  23: 2893743.770 ops/s
Iteration  24: 2896486.189 ops/s
Iteration  25: 2912869.863 ops/s
Iteration  26: 2907934.297 ops/s
Iteration  27: 2907740.876 ops/s
Iteration  28: 2893482.560 ops/s
Iteration  29: 2910832.957 ops/s
Iteration  30: 2904720.505 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeString":
  2901928.911 ±(99.9%) 4615.454 ops/s [Average]
  (min, avg, max) = (2886714.173, 2901928.911, 2917792.835), stdev = 6908.194
  CI (99.9%): [2897313.458, 2906544.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_makeString  thrpt   30  2901928.911 ± 4615.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1801570.603 ops/s
# Warmup Iteration   2: 3938685.519 ops/s
# Warmup Iteration   3: 4052121.080 ops/s
# Warmup Iteration   4: 3742041.273 ops/s
# Warmup Iteration   5: 3644261.234 ops/s
# Warmup Iteration   6: 4059712.542 ops/s
# Warmup Iteration   7: 4052225.686 ops/s
# Warmup Iteration   8: 4056817.214 ops/s
# Warmup Iteration   9: 4050521.339 ops/s
# Warmup Iteration  10: 4050313.931 ops/s
# Warmup Iteration  11: 4048945.387 ops/s
# Warmup Iteration  12: 4034638.250 ops/s
# Warmup Iteration  13: 4047266.824 ops/s
# Warmup Iteration  14: 4030424.937 ops/s
# Warmup Iteration  15: 4050080.692 ops/s
# Warmup Iteration  16: 4059273.418 ops/s
# Warmup Iteration  17: 4173942.141 ops/s
# Warmup Iteration  18: 4179026.263 ops/s
# Warmup Iteration  19: 4181377.158 ops/s
# Warmup Iteration  20: 4181068.784 ops/s
# Warmup Iteration  21: 4171901.529 ops/s
# Warmup Iteration  22: 4174950.059 ops/s
# Warmup Iteration  23: 4196953.695 ops/s
# Warmup Iteration  24: 4182867.461 ops/s
# Warmup Iteration  25: 4194946.603 ops/s
# Warmup Iteration  26: 4153287.878 ops/s
# Warmup Iteration  27: 4178983.068 ops/s
# Warmup Iteration  28: 4195211.265 ops/s
# Warmup Iteration  29: 4172731.338 ops/s
# Warmup Iteration  30: 4175046.089 ops/s
Iteration   1: 4170336.163 ops/s
Iteration   2: 4180640.386 ops/s
Iteration   3: 4182656.485 ops/s
Iteration   4: 4187150.224 ops/s
Iteration   5: 4184550.782 ops/s
Iteration   6: 4190078.044 ops/s
Iteration   7: 4197429.247 ops/s
Iteration   8: 4206805.863 ops/s
Iteration   9: 4170155.790 ops/s
Iteration  10: 4196005.888 ops/s
Iteration  11: 4205044.765 ops/s
Iteration  12: 4156566.827 ops/s
Iteration  13: 4164989.401 ops/s
Iteration  14: 4158673.506 ops/s
Iteration  15: 4156415.703 ops/s
Iteration  16: 4193225.113 ops/s
Iteration  17: 4176513.877 ops/s
Iteration  18: 4176954.541 ops/s
Iteration  19: 4167946.579 ops/s
Iteration  20: 4160189.087 ops/s
Iteration  21: 4184315.772 ops/s
Iteration  22: 4199010.943 ops/s
Iteration  23: 4185721.824 ops/s
Iteration  24: 4173735.785 ops/s
Iteration  25: 4180227.556 ops/s
Iteration  26: 4160102.304 ops/s
Iteration  27: 4200644.352 ops/s
Iteration  28: 4193042.637 ops/s
Iteration  29: 4177638.664 ops/s
Iteration  30: 4181124.547 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparator":
  4180596.422 ±(99.9%) 9797.988 ops/s [Average]
  (min, avg, max) = (4156415.703, 4180596.422, 4206805.863), stdev = 14665.169
  CI (99.9%): [4170798.433, 4190394.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  4180596.422 ± 9797.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2194984.330 ops/s
# Warmup Iteration   2: 4982294.655 ops/s
# Warmup Iteration   3: 4958996.752 ops/s
# Warmup Iteration   4: 4152921.340 ops/s
# Warmup Iteration   5: 4959809.116 ops/s
# Warmup Iteration   6: 4960057.674 ops/s
# Warmup Iteration   7: 4977322.999 ops/s
# Warmup Iteration   8: 4964198.988 ops/s
# Warmup Iteration   9: 4962613.025 ops/s
# Warmup Iteration  10: 4963603.011 ops/s
# Warmup Iteration  11: 4982888.713 ops/s
# Warmup Iteration  12: 4961649.017 ops/s
# Warmup Iteration  13: 4975401.583 ops/s
# Warmup Iteration  14: 4965778.173 ops/s
# Warmup Iteration  15: 4958893.811 ops/s
# Warmup Iteration  16: 4949988.311 ops/s
# Warmup Iteration  17: 4952722.773 ops/s
# Warmup Iteration  18: 4962947.596 ops/s
# Warmup Iteration  19: 4955315.356 ops/s
# Warmup Iteration  20: 4970105.511 ops/s
# Warmup Iteration  21: 4977979.398 ops/s
# Warmup Iteration  22: 4964940.728 ops/s
# Warmup Iteration  23: 4962842.466 ops/s
# Warmup Iteration  24: 4984352.334 ops/s
# Warmup Iteration  25: 4974682.484 ops/s
# Warmup Iteration  26: 4962197.191 ops/s
# Warmup Iteration  27: 4978040.646 ops/s
# Warmup Iteration  28: 4936772.199 ops/s
# Warmup Iteration  29: 4980490.765 ops/s
# Warmup Iteration  30: 4969208.442 ops/s
Iteration   1: 4961236.504 ops/s
Iteration   2: 4986794.303 ops/s
Iteration   3: 4960054.846 ops/s
Iteration   4: 4970216.817 ops/s
Iteration   5: 4950186.625 ops/s
Iteration   6: 4953197.076 ops/s
Iteration   7: 4973723.983 ops/s
Iteration   8: 4946031.790 ops/s
Iteration   9: 4963310.076 ops/s
Iteration  10: 4972619.423 ops/s
Iteration  11: 4939296.720 ops/s
Iteration  12: 4974044.482 ops/s
Iteration  13: 4953880.508 ops/s
Iteration  14: 4948807.583 ops/s
Iteration  15: 4981982.400 ops/s
Iteration  16: 4973666.313 ops/s
Iteration  17: 4973108.965 ops/s
Iteration  18: 4956703.780 ops/s
Iteration  19: 4967673.005 ops/s
Iteration  20: 4972676.127 ops/s
Iteration  21: 4944300.189 ops/s
Iteration  22: 4983803.432 ops/s
Iteration  23: 4982055.246 ops/s
Iteration  24: 4959282.326 ops/s
Iteration  25: 4960758.495 ops/s
Iteration  26: 4947039.968 ops/s
Iteration  27: 4982492.582 ops/s
Iteration  28: 4952260.719 ops/s
Iteration  29: 4958015.257 ops/s
Iteration  30: 4972898.423 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  4964070.599 ±(99.9%) 8850.097 ops/s [Average]
  (min, avg, max) = (4939296.720, 4964070.599, 4986794.303), stdev = 13246.410
  CI (99.9%): [4955220.501, 4972920.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  4964070.599 ± 8850.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3988739.163 ops/s
# Warmup Iteration   2: 9177941.870 ops/s
# Warmup Iteration   3: 9262102.228 ops/s
# Warmup Iteration   4: 7713045.628 ops/s
# Warmup Iteration   5: 9291157.199 ops/s
# Warmup Iteration   6: 9261331.335 ops/s
# Warmup Iteration   7: 9294540.619 ops/s
# Warmup Iteration   8: 9287386.974 ops/s
# Warmup Iteration   9: 9321497.870 ops/s
# Warmup Iteration  10: 9318484.679 ops/s
# Warmup Iteration  11: 9265611.640 ops/s
# Warmup Iteration  12: 9266349.774 ops/s
# Warmup Iteration  13: 9318016.550 ops/s
# Warmup Iteration  14: 9299748.906 ops/s
# Warmup Iteration  15: 9296524.654 ops/s
# Warmup Iteration  16: 9301796.708 ops/s
# Warmup Iteration  17: 9308409.177 ops/s
# Warmup Iteration  18: 9291732.156 ops/s
# Warmup Iteration  19: 9287718.094 ops/s
# Warmup Iteration  20: 9273571.055 ops/s
# Warmup Iteration  21: 9288817.894 ops/s
# Warmup Iteration  22: 9311035.627 ops/s
# Warmup Iteration  23: 9289639.339 ops/s
# Warmup Iteration  24: 9281147.211 ops/s
# Warmup Iteration  25: 9238858.339 ops/s
# Warmup Iteration  26: 9252305.746 ops/s
# Warmup Iteration  27: 9292726.268 ops/s
# Warmup Iteration  28: 9280409.078 ops/s
# Warmup Iteration  29: 9308737.790 ops/s
# Warmup Iteration  30: 9289255.974 ops/s
Iteration   1: 9278542.318 ops/s
Iteration   2: 9272955.509 ops/s
Iteration   3: 9304253.812 ops/s
Iteration   4: 9292903.388 ops/s
Iteration   5: 9298278.652 ops/s
Iteration   6: 9324070.646 ops/s
Iteration   7: 9297040.569 ops/s
Iteration   8: 9307438.800 ops/s
Iteration   9: 9308446.261 ops/s
Iteration  10: 9292381.559 ops/s
Iteration  11: 9304367.523 ops/s
Iteration  12: 9254801.246 ops/s
Iteration  13: 9323273.552 ops/s
Iteration  14: 9280722.549 ops/s
Iteration  15: 9288967.315 ops/s
Iteration  16: 9293324.302 ops/s
Iteration  17: 9276815.061 ops/s
Iteration  18: 9276935.807 ops/s
Iteration  19: 9271707.551 ops/s
Iteration  20: 9301017.709 ops/s
Iteration  21: 9275093.376 ops/s
Iteration  22: 9297564.857 ops/s
Iteration  23: 9279160.953 ops/s
Iteration  24: 9277344.237 ops/s
Iteration  25: 9288805.600 ops/s
Iteration  26: 9262501.928 ops/s
Iteration  27: 9305421.198 ops/s
Iteration  28: 9313370.734 ops/s
Iteration  29: 9300692.056 ops/s
Iteration  30: 9295767.655 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max":
  9291465.557 ±(99.9%) 11231.442 ops/s [Average]
  (min, avg, max) = (9254801.246, 9291465.557, 9324070.646), stdev = 16810.695
  CI (99.9%): [9280234.115, 9302697.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_max  thrpt   30  9291465.557 ± 11231.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3413056.739 ops/s
# Warmup Iteration   2: 7600043.434 ops/s
# Warmup Iteration   3: 6310057.211 ops/s
# Warmup Iteration   4: 7579750.150 ops/s
# Warmup Iteration   5: 7591920.759 ops/s
# Warmup Iteration   6: 7574961.748 ops/s
# Warmup Iteration   7: 7604657.877 ops/s
# Warmup Iteration   8: 7579839.432 ops/s
# Warmup Iteration   9: 7573863.688 ops/s
# Warmup Iteration  10: 7561876.274 ops/s
# Warmup Iteration  11: 7595346.880 ops/s
# Warmup Iteration  12: 7593067.928 ops/s
# Warmup Iteration  13: 7570178.898 ops/s
# Warmup Iteration  14: 7587096.493 ops/s
# Warmup Iteration  15: 7583724.301 ops/s
# Warmup Iteration  16: 7579442.914 ops/s
# Warmup Iteration  17: 7584588.740 ops/s
# Warmup Iteration  18: 7579536.898 ops/s
# Warmup Iteration  19: 7598127.228 ops/s
# Warmup Iteration  20: 7574757.332 ops/s
# Warmup Iteration  21: 7603702.877 ops/s
# Warmup Iteration  22: 7596278.085 ops/s
# Warmup Iteration  23: 7602639.119 ops/s
# Warmup Iteration  24: 7613284.502 ops/s
# Warmup Iteration  25: 7586544.796 ops/s
# Warmup Iteration  26: 7597012.509 ops/s
# Warmup Iteration  27: 7605728.954 ops/s
# Warmup Iteration  28: 7547411.385 ops/s
# Warmup Iteration  29: 7597543.779 ops/s
# Warmup Iteration  30: 7603063.376 ops/s
Iteration   1: 7610927.267 ops/s
Iteration   2: 7590365.568 ops/s
Iteration   3: 7572523.024 ops/s
Iteration   4: 7575003.545 ops/s
Iteration   5: 7592955.421 ops/s
Iteration   6: 7584800.621 ops/s
Iteration   7: 7614498.160 ops/s
Iteration   8: 7580330.371 ops/s
Iteration   9: 7610989.881 ops/s
Iteration  10: 7604899.697 ops/s
Iteration  11: 7615657.572 ops/s
Iteration  12: 7588639.424 ops/s
Iteration  13: 7618121.645 ops/s
Iteration  14: 7603988.933 ops/s
Iteration  15: 7606861.419 ops/s
Iteration  16: 7615313.455 ops/s
Iteration  17: 7637712.977 ops/s
Iteration  18: 7613350.917 ops/s
Iteration  19: 7614861.289 ops/s
Iteration  20: 7563757.600 ops/s
Iteration  21: 7630198.491 ops/s
Iteration  22: 7568734.380 ops/s
Iteration  23: 7608850.574 ops/s
Iteration  24: 7581244.283 ops/s
Iteration  25: 7602142.803 ops/s
Iteration  26: 7600634.734 ops/s
Iteration  27: 7617420.772 ops/s
Iteration  28: 7604480.029 ops/s
Iteration  29: 7617605.819 ops/s
Iteration  30: 7599311.936 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy":
  7601539.420 ±(99.9%) 12179.310 ops/s [Average]
  (min, avg, max) = (7563757.600, 7601539.420, 7637712.977), stdev = 18229.420
  CI (99.9%): [7589360.110, 7613718.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_maxBy  thrpt   30  7601539.420 ± 12179.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3015817.614 ops/s
# Warmup Iteration   2: 6783777.109 ops/s
# Warmup Iteration   3: 5641642.519 ops/s
# Warmup Iteration   4: 6775181.658 ops/s
# Warmup Iteration   5: 6791271.782 ops/s
# Warmup Iteration   6: 6792298.234 ops/s
# Warmup Iteration   7: 6800023.061 ops/s
# Warmup Iteration   8: 6808532.103 ops/s
# Warmup Iteration   9: 6778218.132 ops/s
# Warmup Iteration  10: 6785943.855 ops/s
# Warmup Iteration  11: 6802626.268 ops/s
# Warmup Iteration  12: 6780980.442 ops/s
# Warmup Iteration  13: 6814150.249 ops/s
# Warmup Iteration  14: 6790471.085 ops/s
# Warmup Iteration  15: 6802933.354 ops/s
# Warmup Iteration  16: 6784935.259 ops/s
# Warmup Iteration  17: 6823609.313 ops/s
# Warmup Iteration  18: 6807015.056 ops/s
# Warmup Iteration  19: 6804205.439 ops/s
# Warmup Iteration  20: 6791463.852 ops/s
# Warmup Iteration  21: 6790862.066 ops/s
# Warmup Iteration  22: 6819633.002 ops/s
# Warmup Iteration  23: 6813585.072 ops/s
# Warmup Iteration  24: 6787966.987 ops/s
# Warmup Iteration  25: 6808314.795 ops/s
# Warmup Iteration  26: 6803233.242 ops/s
# Warmup Iteration  27: 6792417.105 ops/s
# Warmup Iteration  28: 6805467.591 ops/s
# Warmup Iteration  29: 6786757.305 ops/s
# Warmup Iteration  30: 6810566.899 ops/s
Iteration   1: 6804078.263 ops/s
Iteration   2: 6829568.853 ops/s
Iteration   3: 6823376.303 ops/s
Iteration   4: 6809420.635 ops/s
Iteration   5: 6796077.351 ops/s
Iteration   6: 6807270.303 ops/s
Iteration   7: 6785531.545 ops/s
Iteration   8: 6790041.288 ops/s
Iteration   9: 6810758.658 ops/s
Iteration  10: 6800678.181 ops/s
Iteration  11: 6772203.716 ops/s
Iteration  12: 6805247.815 ops/s
Iteration  13: 6785200.739 ops/s
Iteration  14: 6785153.681 ops/s
Iteration  15: 6794812.900 ops/s
Iteration  16: 6793011.036 ops/s
Iteration  17: 6820246.370 ops/s
Iteration  18: 6794137.018 ops/s
Iteration  19: 6789432.497 ops/s
Iteration  20: 6803272.252 ops/s
Iteration  21: 6801104.134 ops/s
Iteration  22: 6796094.005 ops/s
Iteration  23: 6814402.863 ops/s
Iteration  24: 6783343.557 ops/s
Iteration  25: 6805222.684 ops/s
Iteration  26: 6782237.403 ops/s
Iteration  27: 6810737.560 ops/s
Iteration  28: 6842122.406 ops/s
Iteration  29: 6808461.173 ops/s
Iteration  30: 6785668.209 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxByOptional":
  6800963.780 ±(99.9%) 10293.694 ops/s [Average]
  (min, avg, max) = (6772203.716, 6800963.780, 6842122.406), stdev = 15407.118
  CI (99.9%): [6790670.085, 6811257.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_maxByOptional  thrpt   30  6800963.780 ± 10293.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4143705.500 ops/s
# Warmup Iteration   2: 9520631.943 ops/s
# Warmup Iteration   3: 9522607.603 ops/s
# Warmup Iteration   4: 7945192.412 ops/s
# Warmup Iteration   5: 9518748.309 ops/s
# Warmup Iteration   6: 9505303.593 ops/s
# Warmup Iteration   7: 9510651.764 ops/s
# Warmup Iteration   8: 9500788.906 ops/s
# Warmup Iteration   9: 9514857.921 ops/s
# Warmup Iteration  10: 9519791.384 ops/s
# Warmup Iteration  11: 9500612.425 ops/s
# Warmup Iteration  12: 9512772.893 ops/s
# Warmup Iteration  13: 9497324.075 ops/s
# Warmup Iteration  14: 9500445.473 ops/s
# Warmup Iteration  15: 9518652.505 ops/s
# Warmup Iteration  16: 9505520.722 ops/s
# Warmup Iteration  17: 9509335.302 ops/s
# Warmup Iteration  18: 9531993.501 ops/s
# Warmup Iteration  19: 9510973.242 ops/s
# Warmup Iteration  20: 9531358.641 ops/s
# Warmup Iteration  21: 9510499.590 ops/s
# Warmup Iteration  22: 9499894.563 ops/s
# Warmup Iteration  23: 9545400.316 ops/s
# Warmup Iteration  24: 9513636.217 ops/s
# Warmup Iteration  25: 9511447.185 ops/s
# Warmup Iteration  26: 9532578.580 ops/s
# Warmup Iteration  27: 9523057.699 ops/s
# Warmup Iteration  28: 9500906.960 ops/s
# Warmup Iteration  29: 9502812.179 ops/s
# Warmup Iteration  30: 9524750.919 ops/s
Iteration   1: 9546576.504 ops/s
Iteration   2: 9530263.392 ops/s
Iteration   3: 9521674.539 ops/s
Iteration   4: 9524459.470 ops/s
Iteration   5: 9539794.099 ops/s
Iteration   6: 9517953.590 ops/s
Iteration   7: 9515170.126 ops/s
Iteration   8: 9541299.140 ops/s
Iteration   9: 9525682.480 ops/s
Iteration  10: 9534344.584 ops/s
Iteration  11: 9524197.089 ops/s
Iteration  12: 9545140.158 ops/s
Iteration  13: 9518337.952 ops/s
Iteration  14: 9486528.121 ops/s
Iteration  15: 9535878.931 ops/s
Iteration  16: 9474711.220 ops/s
Iteration  17: 9524392.203 ops/s
Iteration  18: 9529102.012 ops/s
Iteration  19: 9451036.270 ops/s
Iteration  20: 9500944.077 ops/s
Iteration  21: 9517664.377 ops/s
Iteration  22: 9510195.526 ops/s
Iteration  23: 9529825.671 ops/s
Iteration  24: 9521883.518 ops/s
Iteration  25: 9509592.092 ops/s
Iteration  26: 9491882.310 ops/s
Iteration  27: 9484261.402 ops/s
Iteration  28: 9522297.147 ops/s
Iteration  29: 9504828.054 ops/s
Iteration  30: 9518648.401 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxBy_null_throws":
  9516618.815 ±(99.9%) 14422.997 ops/s [Average]
  (min, avg, max) = (9451036.270, 9516618.815, 9546576.504), stdev = 21587.664
  CI (99.9%): [9502195.818, 9531041.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  9516618.815 ± 14422.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1868668.415 ops/s
# Warmup Iteration   2: 4458774.178 ops/s
# Warmup Iteration   3: 4319144.347 ops/s
# Warmup Iteration   4: 3886379.731 ops/s
# Warmup Iteration   5: 4486425.716 ops/s
# Warmup Iteration   6: 4472514.126 ops/s
# Warmup Iteration   7: 4472390.980 ops/s
# Warmup Iteration   8: 4482071.921 ops/s
# Warmup Iteration   9: 4475122.799 ops/s
# Warmup Iteration  10: 4471660.517 ops/s
# Warmup Iteration  11: 4460703.284 ops/s
# Warmup Iteration  12: 4484483.310 ops/s
# Warmup Iteration  13: 4478154.425 ops/s
# Warmup Iteration  14: 4476133.917 ops/s
# Warmup Iteration  15: 4466901.721 ops/s
# Warmup Iteration  16: 4469853.218 ops/s
# Warmup Iteration  17: 4480207.972 ops/s
# Warmup Iteration  18: 4482691.525 ops/s
# Warmup Iteration  19: 4478352.375 ops/s
# Warmup Iteration  20: 4477506.071 ops/s
# Warmup Iteration  21: 4485793.320 ops/s
# Warmup Iteration  22: 4467764.383 ops/s
# Warmup Iteration  23: 4485541.257 ops/s
# Warmup Iteration  24: 4476576.125 ops/s
# Warmup Iteration  25: 4483283.634 ops/s
# Warmup Iteration  26: 4478293.776 ops/s
# Warmup Iteration  27: 4490825.954 ops/s
# Warmup Iteration  28: 4474279.180 ops/s
# Warmup Iteration  29: 4477745.987 ops/s
# Warmup Iteration  30: 4476621.618 ops/s
Iteration   1: 4485275.490 ops/s
Iteration   2: 4466645.758 ops/s
Iteration   3: 4472438.533 ops/s
Iteration   4: 4473851.307 ops/s
Iteration   5: 4483671.799 ops/s
Iteration   6: 4474586.749 ops/s
Iteration   7: 4468465.884 ops/s
Iteration   8: 4487826.183 ops/s
Iteration   9: 4476671.510 ops/s
Iteration  10: 4479659.147 ops/s
Iteration  11: 4465282.143 ops/s
Iteration  12: 4469368.068 ops/s
Iteration  13: 4480789.983 ops/s
Iteration  14: 4482869.719 ops/s
Iteration  15: 4468991.223 ops/s
Iteration  16: 4477467.808 ops/s
Iteration  17: 4483173.319 ops/s
Iteration  18: 4476453.261 ops/s
Iteration  19: 4451131.368 ops/s
Iteration  20: 4477414.342 ops/s
Iteration  21: 4487760.947 ops/s
Iteration  22: 4474288.259 ops/s
Iteration  23: 4490486.418 ops/s
Iteration  24: 4474052.854 ops/s
Iteration  25: 4480230.011 ops/s
Iteration  26: 4485146.638 ops/s
Iteration  27: 4469708.036 ops/s
Iteration  28: 4478839.917 ops/s
Iteration  29: 4466518.169 ops/s
Iteration  30: 4477945.518 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_maxOptional":
  4476233.679 ±(99.9%) 5563.185 ops/s [Average]
  (min, avg, max) = (4451131.368, 4476233.679, 4490486.418), stdev = 8326.715
  CI (99.9%): [4470670.493, 4481796.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_maxOptional  thrpt   30  4476233.679 ± 5563.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735222.813 ops/s
# Warmup Iteration   2: 760121.224 ops/s
# Warmup Iteration   3: 869179.723 ops/s
# Warmup Iteration   4: 952721.955 ops/s
# Warmup Iteration   5: 950059.100 ops/s
# Warmup Iteration   6: 950800.203 ops/s
# Warmup Iteration   7: 952189.663 ops/s
# Warmup Iteration   8: 953438.850 ops/s
# Warmup Iteration   9: 948506.379 ops/s
# Warmup Iteration  10: 953296.947 ops/s
# Warmup Iteration  11: 947746.518 ops/s
# Warmup Iteration  12: 949278.165 ops/s
# Warmup Iteration  13: 952880.408 ops/s
# Warmup Iteration  14: 926777.400 ops/s
# Warmup Iteration  15: 825997.850 ops/s
# Warmup Iteration  16: 954801.268 ops/s
# Warmup Iteration  17: 1008541.230 ops/s
# Warmup Iteration  18: 1006675.765 ops/s
# Warmup Iteration  19: 1007009.458 ops/s
# Warmup Iteration  20: 1000388.729 ops/s
# Warmup Iteration  21: 1003360.231 ops/s
# Warmup Iteration  22: 1006827.339 ops/s
# Warmup Iteration  23: 1001333.937 ops/s
# Warmup Iteration  24: 1007681.941 ops/s
# Warmup Iteration  25: 1004948.720 ops/s
# Warmup Iteration  26: 1011135.892 ops/s
# Warmup Iteration  27: 1007687.090 ops/s
# Warmup Iteration  28: 1008458.588 ops/s
# Warmup Iteration  29: 1006031.368 ops/s
# Warmup Iteration  30: 1005673.434 ops/s
Iteration   1: 1006941.095 ops/s
Iteration   2: 1005794.827 ops/s
Iteration   3: 1011045.071 ops/s
Iteration   4: 1005044.195 ops/s
Iteration   5: 1007338.919 ops/s
Iteration   6: 1006107.275 ops/s
Iteration   7: 1004755.074 ops/s
Iteration   8: 1009999.887 ops/s
Iteration   9: 1002522.418 ops/s
Iteration  10: 1005351.750 ops/s
Iteration  11: 1004092.249 ops/s
Iteration  12: 1008266.968 ops/s
Iteration  13: 1005350.197 ops/s
Iteration  14: 1002708.075 ops/s
Iteration  15: 1005809.566 ops/s
Iteration  16: 1009268.515 ops/s
Iteration  17: 1009932.085 ops/s
Iteration  18: 1007074.327 ops/s
Iteration  19: 1007044.489 ops/s
Iteration  20: 1009636.097 ops/s
Iteration  21: 1005279.138 ops/s
Iteration  22: 1004129.451 ops/s
Iteration  23: 1005193.623 ops/s
Iteration  24: 1003762.746 ops/s
Iteration  25: 1004928.050 ops/s
Iteration  26: 1004196.783 ops/s
Iteration  27: 1005642.223 ops/s
Iteration  28: 1005149.088 ops/s
Iteration  29: 1008221.092 ops/s
Iteration  30: 1001937.187 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_empty_throws":
  1006084.082 ±(99.9%) 1554.537 ops/s [Average]
  (min, avg, max) = (1001937.187, 1006084.082, 1011045.071), stdev = 2326.758
  CI (99.9%): [1004529.545, 1007638.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1006084.082 ± 1554.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2325642.195 ops/s
# Warmup Iteration   2: 4802511.541 ops/s
# Warmup Iteration   3: 5015261.788 ops/s
# Warmup Iteration   4: 5046173.960 ops/s
# Warmup Iteration   5: 4174138.711 ops/s
# Warmup Iteration   6: 5059535.923 ops/s
# Warmup Iteration   7: 5054368.837 ops/s
# Warmup Iteration   8: 5046616.181 ops/s
# Warmup Iteration   9: 5048387.233 ops/s
# Warmup Iteration  10: 5024737.862 ops/s
# Warmup Iteration  11: 5045163.624 ops/s
# Warmup Iteration  12: 5048209.404 ops/s
# Warmup Iteration  13: 5055079.661 ops/s
# Warmup Iteration  14: 5045262.577 ops/s
# Warmup Iteration  15: 5058328.479 ops/s
# Warmup Iteration  16: 5042540.773 ops/s
# Warmup Iteration  17: 5051970.883 ops/s
# Warmup Iteration  18: 5048469.720 ops/s
# Warmup Iteration  19: 5052618.602 ops/s
# Warmup Iteration  20: 5060374.816 ops/s
# Warmup Iteration  21: 5056288.942 ops/s
# Warmup Iteration  22: 5052267.981 ops/s
# Warmup Iteration  23: 5047038.110 ops/s
# Warmup Iteration  24: 5052772.240 ops/s
# Warmup Iteration  25: 5047527.512 ops/s
# Warmup Iteration  26: 5047673.698 ops/s
# Warmup Iteration  27: 5050451.987 ops/s
# Warmup Iteration  28: 5041794.760 ops/s
# Warmup Iteration  29: 5054575.798 ops/s
# Warmup Iteration  30: 5059574.545 ops/s
Iteration   1: 5045664.355 ops/s
Iteration   2: 5068363.753 ops/s
Iteration   3: 5057176.299 ops/s
Iteration   4: 5062975.283 ops/s
Iteration   5: 5060401.846 ops/s
Iteration   6: 5050462.471 ops/s
Iteration   7: 5062763.465 ops/s
Iteration   8: 5051754.492 ops/s
Iteration   9: 5067465.974 ops/s
Iteration  10: 5070426.808 ops/s
Iteration  11: 5057229.786 ops/s
Iteration  12: 5059328.507 ops/s
Iteration  13: 5049593.146 ops/s
Iteration  14: 5044123.202 ops/s
Iteration  15: 5066184.906 ops/s
Iteration  16: 5060395.911 ops/s
Iteration  17: 5035598.453 ops/s
Iteration  18: 5056219.037 ops/s
Iteration  19: 5053349.376 ops/s
Iteration  20: 5047867.689 ops/s
Iteration  21: 5055775.793 ops/s
Iteration  22: 5043324.184 ops/s
Iteration  23: 5061047.586 ops/s
Iteration  24: 5048310.317 ops/s
Iteration  25: 5063540.284 ops/s
Iteration  26: 5064251.480 ops/s
Iteration  27: 5053710.104 ops/s
Iteration  28: 5033991.918 ops/s
Iteration  29: 5058875.914 ops/s
Iteration  30: 5075702.718 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_safe":
  5056195.835 ±(99.9%) 6594.773 ops/s [Average]
  (min, avg, max) = (5033991.918, 5056195.835, 5075702.718), stdev = 9870.746
  CI (99.9%): [5049601.062, 5062790.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_max_null_safe  thrpt   30  5056195.835 ± 6594.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3963502.539 ops/s
# Warmup Iteration   2: 9490218.916 ops/s
# Warmup Iteration   3: 9509858.944 ops/s
# Warmup Iteration   4: 7942845.295 ops/s
# Warmup Iteration   5: 9521515.257 ops/s
# Warmup Iteration   6: 9505394.528 ops/s
# Warmup Iteration   7: 9532424.857 ops/s
# Warmup Iteration   8: 9493728.803 ops/s
# Warmup Iteration   9: 9513524.552 ops/s
# Warmup Iteration  10: 9530046.188 ops/s
# Warmup Iteration  11: 9534269.854 ops/s
# Warmup Iteration  12: 9521130.103 ops/s
# Warmup Iteration  13: 9504834.629 ops/s
# Warmup Iteration  14: 9532656.471 ops/s
# Warmup Iteration  15: 9536152.308 ops/s
# Warmup Iteration  16: 9528734.277 ops/s
# Warmup Iteration  17: 9550772.293 ops/s
# Warmup Iteration  18: 9510196.488 ops/s
# Warmup Iteration  19: 9522445.002 ops/s
# Warmup Iteration  20: 9531057.498 ops/s
# Warmup Iteration  21: 9529972.796 ops/s
# Warmup Iteration  22: 9509194.391 ops/s
# Warmup Iteration  23: 9519414.756 ops/s
# Warmup Iteration  24: 9535240.621 ops/s
# Warmup Iteration  25: 9526588.406 ops/s
# Warmup Iteration  26: 9498379.390 ops/s
# Warmup Iteration  27: 9499369.005 ops/s
# Warmup Iteration  28: 9519539.873 ops/s
# Warmup Iteration  29: 9518630.713 ops/s
# Warmup Iteration  30: 9520604.284 ops/s
Iteration   1: 9515762.440 ops/s
Iteration   2: 9506425.139 ops/s
Iteration   3: 9549058.442 ops/s
Iteration   4: 9532740.513 ops/s
Iteration   5: 9511614.284 ops/s
Iteration   6: 9510798.231 ops/s
Iteration   7: 9543247.367 ops/s
Iteration   8: 9523918.970 ops/s
Iteration   9: 9549099.212 ops/s
Iteration  10: 9524090.734 ops/s
Iteration  11: 9550888.730 ops/s
Iteration  12: 9510908.264 ops/s
Iteration  13: 9557008.346 ops/s
Iteration  14: 9512552.262 ops/s
Iteration  15: 9543914.732 ops/s
Iteration  16: 9567745.524 ops/s
Iteration  17: 9542995.727 ops/s
Iteration  18: 9535661.231 ops/s
Iteration  19: 9560918.556 ops/s
Iteration  20: 9529690.602 ops/s
Iteration  21: 9533550.374 ops/s
Iteration  22: 9505486.073 ops/s
Iteration  23: 9534045.082 ops/s
Iteration  24: 9537970.826 ops/s
Iteration  25: 9536828.025 ops/s
Iteration  26: 9536687.842 ops/s
Iteration  27: 9549371.748 ops/s
Iteration  28: 9552479.356 ops/s
Iteration  29: 9529342.712 ops/s
Iteration  30: 9521434.981 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws":
  9533874.544 ±(99.9%) 11334.839 ops/s [Average]
  (min, avg, max) = (9505486.073, 9533874.544, 9567745.524), stdev = 16965.454
  CI (99.9%): [9522539.706, 9545209.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_max_null_throws  thrpt   30  9533874.544 ± 11334.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616775.337 ops/s
# Warmup Iteration   2: 647948.732 ops/s
# Warmup Iteration   3: 853976.801 ops/s
# Warmup Iteration   4: 875212.920 ops/s
# Warmup Iteration   5: 874335.414 ops/s
# Warmup Iteration   6: 867588.281 ops/s
# Warmup Iteration   7: 875937.374 ops/s
# Warmup Iteration   8: 877647.685 ops/s
# Warmup Iteration   9: 870203.462 ops/s
# Warmup Iteration  10: 874278.029 ops/s
# Warmup Iteration  11: 872738.351 ops/s
# Warmup Iteration  12: 724492.680 ops/s
# Warmup Iteration  13: 874064.717 ops/s
# Warmup Iteration  14: 876662.674 ops/s
# Warmup Iteration  15: 876146.050 ops/s
# Warmup Iteration  16: 876989.543 ops/s
# Warmup Iteration  17: 928576.570 ops/s
# Warmup Iteration  18: 925844.151 ops/s
# Warmup Iteration  19: 928266.602 ops/s
# Warmup Iteration  20: 925557.086 ops/s
# Warmup Iteration  21: 927925.375 ops/s
# Warmup Iteration  22: 925752.856 ops/s
# Warmup Iteration  23: 926624.973 ops/s
# Warmup Iteration  24: 927257.800 ops/s
# Warmup Iteration  25: 926302.031 ops/s
# Warmup Iteration  26: 922967.344 ops/s
# Warmup Iteration  27: 926126.509 ops/s
# Warmup Iteration  28: 925408.435 ops/s
# Warmup Iteration  29: 925706.118 ops/s
# Warmup Iteration  30: 925793.828 ops/s
Iteration   1: 924222.654 ops/s
Iteration   2: 926103.634 ops/s
Iteration   3: 922430.804 ops/s
Iteration   4: 925165.768 ops/s
Iteration   5: 925143.344 ops/s
Iteration   6: 925203.739 ops/s
Iteration   7: 923670.478 ops/s
Iteration   8: 929777.806 ops/s
Iteration   9: 926449.972 ops/s
Iteration  10: 927775.637 ops/s
Iteration  11: 924273.130 ops/s
Iteration  12: 927136.076 ops/s
Iteration  13: 926731.172 ops/s
Iteration  14: 928755.272 ops/s
Iteration  15: 924597.803 ops/s
Iteration  16: 928650.405 ops/s
Iteration  17: 925667.522 ops/s
Iteration  18: 922287.631 ops/s
Iteration  19: 923164.550 ops/s
Iteration  20: 926456.834 ops/s
Iteration  21: 926580.370 ops/s
Iteration  22: 928503.584 ops/s
Iteration  23: 930775.866 ops/s
Iteration  24: 925418.144 ops/s
Iteration  25: 925856.082 ops/s
Iteration  26: 926569.613 ops/s
Iteration  27: 921598.839 ops/s
Iteration  28: 927840.416 ops/s
Iteration  29: 924207.597 ops/s
Iteration  30: 921399.571 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  925747.144 ±(99.9%) 1568.681 ops/s [Average]
  (min, avg, max) = (921399.571, 925747.144, 930775.866), stdev = 2347.928
  CI (99.9%): [924178.463, 927315.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  925747.144 ± 1568.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3874264.976 ops/s
# Warmup Iteration   2: 8918590.651 ops/s
# Warmup Iteration   3: 9000635.178 ops/s
# Warmup Iteration   4: 7416844.308 ops/s
# Warmup Iteration   5: 9014279.373 ops/s
# Warmup Iteration   6: 8972623.989 ops/s
# Warmup Iteration   7: 9012493.605 ops/s
# Warmup Iteration   8: 8982157.985 ops/s
# Warmup Iteration   9: 9006284.947 ops/s
# Warmup Iteration  10: 9017662.320 ops/s
# Warmup Iteration  11: 9002169.849 ops/s
# Warmup Iteration  12: 8994812.796 ops/s
# Warmup Iteration  13: 8976818.874 ops/s
# Warmup Iteration  14: 8985398.905 ops/s
# Warmup Iteration  15: 9016314.209 ops/s
# Warmup Iteration  16: 9003138.298 ops/s
# Warmup Iteration  17: 8997185.097 ops/s
# Warmup Iteration  18: 9010048.069 ops/s
# Warmup Iteration  19: 9003399.091 ops/s
# Warmup Iteration  20: 9012391.077 ops/s
# Warmup Iteration  21: 9021928.297 ops/s
# Warmup Iteration  22: 9014201.034 ops/s
# Warmup Iteration  23: 9010865.232 ops/s
# Warmup Iteration  24: 9005903.034 ops/s
# Warmup Iteration  25: 8997464.253 ops/s
# Warmup Iteration  26: 9001145.293 ops/s
# Warmup Iteration  27: 8995963.445 ops/s
# Warmup Iteration  28: 8993045.499 ops/s
# Warmup Iteration  29: 8979707.828 ops/s
# Warmup Iteration  30: 8984429.501 ops/s
Iteration   1: 8986298.296 ops/s
Iteration   2: 8985483.153 ops/s
Iteration   3: 9015464.216 ops/s
Iteration   4: 9024600.373 ops/s
Iteration   5: 9017686.334 ops/s
Iteration   6: 8993219.387 ops/s
Iteration   7: 8993627.240 ops/s
Iteration   8: 8901353.165 ops/s
Iteration   9: 9012883.441 ops/s
Iteration  10: 8998675.371 ops/s
Iteration  11: 9019307.362 ops/s
Iteration  12: 9011995.130 ops/s
Iteration  13: 9012839.651 ops/s
Iteration  14: 9012649.956 ops/s
Iteration  15: 8974135.473 ops/s
Iteration  16: 9010509.126 ops/s
Iteration  17: 8992483.727 ops/s
Iteration  18: 9029128.866 ops/s
Iteration  19: 9012413.791 ops/s
Iteration  20: 9019585.101 ops/s
Iteration  21: 9020175.058 ops/s
Iteration  22: 9028569.046 ops/s
Iteration  23: 9028070.697 ops/s
Iteration  24: 9006875.969 ops/s
Iteration  25: 9003132.644 ops/s
Iteration  26: 9044711.715 ops/s
Iteration  27: 9030452.149 ops/s
Iteration  28: 9004384.920 ops/s
Iteration  29: 9023812.555 ops/s
Iteration  30: 9022473.817 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_max_without_comparator":
  9007899.924 ±(99.9%) 17019.395 ops/s [Average]
  (min, avg, max) = (8901353.165, 9007899.924, 9044711.715), stdev = 25473.831
  CI (99.9%): [8990880.530, 9024919.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  9007899.924 ± 17019.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4066957.750 ops/s
# Warmup Iteration   2: 9198521.347 ops/s
# Warmup Iteration   3: 9191412.306 ops/s
# Warmup Iteration   4: 7688943.257 ops/s
# Warmup Iteration   5: 9217273.778 ops/s
# Warmup Iteration   6: 9210085.188 ops/s
# Warmup Iteration   7: 9194837.591 ops/s
# Warmup Iteration   8: 9226534.497 ops/s
# Warmup Iteration   9: 9218949.491 ops/s
# Warmup Iteration  10: 9202705.925 ops/s
# Warmup Iteration  11: 9228916.305 ops/s
# Warmup Iteration  12: 9211169.531 ops/s
# Warmup Iteration  13: 9225081.579 ops/s
# Warmup Iteration  14: 9214896.750 ops/s
# Warmup Iteration  15: 9201168.067 ops/s
# Warmup Iteration  16: 9200604.364 ops/s
# Warmup Iteration  17: 9226205.425 ops/s
# Warmup Iteration  18: 9208853.417 ops/s
# Warmup Iteration  19: 9199511.806 ops/s
# Warmup Iteration  20: 9220766.385 ops/s
# Warmup Iteration  21: 9209489.340 ops/s
# Warmup Iteration  22: 9153784.728 ops/s
# Warmup Iteration  23: 9168569.177 ops/s
# Warmup Iteration  24: 9219909.214 ops/s
# Warmup Iteration  25: 9211022.915 ops/s
# Warmup Iteration  26: 9207834.160 ops/s
# Warmup Iteration  27: 9217487.860 ops/s
# Warmup Iteration  28: 9215234.242 ops/s
# Warmup Iteration  29: 9227099.160 ops/s
# Warmup Iteration  30: 9211133.196 ops/s
Iteration   1: 9198742.153 ops/s
Iteration   2: 9209779.759 ops/s
Iteration   3: 9224794.528 ops/s
Iteration   4: 9225592.327 ops/s
Iteration   5: 9192824.862 ops/s
Iteration   6: 9147939.375 ops/s
Iteration   7: 9192761.553 ops/s
Iteration   8: 9202477.622 ops/s
Iteration   9: 9193288.186 ops/s
Iteration  10: 9237996.498 ops/s
Iteration  11: 9210962.629 ops/s
Iteration  12: 9204177.707 ops/s
Iteration  13: 9188187.452 ops/s
Iteration  14: 9235925.714 ops/s
Iteration  15: 9212513.770 ops/s
Iteration  16: 9206129.996 ops/s
Iteration  17: 9216411.430 ops/s
Iteration  18: 9233399.002 ops/s
Iteration  19: 9210623.062 ops/s
Iteration  20: 9213238.363 ops/s
Iteration  21: 9213851.429 ops/s
Iteration  22: 9237828.209 ops/s
Iteration  23: 9211546.870 ops/s
Iteration  24: 9205434.625 ops/s
Iteration  25: 9203678.455 ops/s
Iteration  26: 9229630.297 ops/s
Iteration  27: 9214572.309 ops/s
Iteration  28: 9209515.983 ops/s
Iteration  29: 9227742.979 ops/s
Iteration  30: 9234016.074 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min":
  9211519.441 ±(99.9%) 12429.433 ops/s [Average]
  (min, avg, max) = (9147939.375, 9211519.441, 9237996.498), stdev = 18603.792
  CI (99.9%): [9199090.007, 9223948.874] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_min  thrpt   30  9211519.441 ± 12429.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3146413.794 ops/s
# Warmup Iteration   2: 6969544.395 ops/s
# Warmup Iteration   3: 6506644.843 ops/s
# Warmup Iteration   4: 6416909.213 ops/s
# Warmup Iteration   5: 7024137.196 ops/s
# Warmup Iteration   6: 7047060.400 ops/s
# Warmup Iteration   7: 7036895.239 ops/s
# Warmup Iteration   8: 7029709.340 ops/s
# Warmup Iteration   9: 7026318.550 ops/s
# Warmup Iteration  10: 7039063.552 ops/s
# Warmup Iteration  11: 7057882.156 ops/s
# Warmup Iteration  12: 7040668.968 ops/s
# Warmup Iteration  13: 7048569.378 ops/s
# Warmup Iteration  14: 7048897.775 ops/s
# Warmup Iteration  15: 7048276.944 ops/s
# Warmup Iteration  16: 7036085.248 ops/s
# Warmup Iteration  17: 7007683.653 ops/s
# Warmup Iteration  18: 7037949.694 ops/s
# Warmup Iteration  19: 7029379.669 ops/s
# Warmup Iteration  20: 7050402.598 ops/s
# Warmup Iteration  21: 7030204.466 ops/s
# Warmup Iteration  22: 7032864.625 ops/s
# Warmup Iteration  23: 7040895.157 ops/s
# Warmup Iteration  24: 7035366.913 ops/s
# Warmup Iteration  25: 7017596.303 ops/s
# Warmup Iteration  26: 7048650.961 ops/s
# Warmup Iteration  27: 7037228.103 ops/s
# Warmup Iteration  28: 7027111.642 ops/s
# Warmup Iteration  29: 7019889.665 ops/s
# Warmup Iteration  30: 7032249.399 ops/s
Iteration   1: 7048633.960 ops/s
Iteration   2: 7059292.993 ops/s
Iteration   3: 7059286.955 ops/s
Iteration   4: 7041709.768 ops/s
Iteration   5: 7043278.899 ops/s
Iteration   6: 7026897.184 ops/s
Iteration   7: 7042819.630 ops/s
Iteration   8: 7051314.097 ops/s
Iteration   9: 7046213.199 ops/s
Iteration  10: 7047766.108 ops/s
Iteration  11: 7056983.952 ops/s
Iteration  12: 7054531.244 ops/s
Iteration  13: 7045411.587 ops/s
Iteration  14: 7029996.670 ops/s
Iteration  15: 7067941.034 ops/s
Iteration  16: 6994143.826 ops/s
Iteration  17: 7030744.728 ops/s
Iteration  18: 7054016.672 ops/s
Iteration  19: 7045710.571 ops/s
Iteration  20: 7037149.146 ops/s
Iteration  21: 7042741.960 ops/s
Iteration  22: 7017817.750 ops/s
Iteration  23: 7040688.407 ops/s
Iteration  24: 7033324.703 ops/s
Iteration  25: 7030024.130 ops/s
Iteration  26: 7046623.243 ops/s
Iteration  27: 7029707.922 ops/s
Iteration  28: 7035880.522 ops/s
Iteration  29: 7030315.468 ops/s
Iteration  30: 7023077.527 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy":
  7040468.128 ±(99.9%) 9815.119 ops/s [Average]
  (min, avg, max) = (6994143.826, 7040468.128, 7067941.034), stdev = 14690.809
  CI (99.9%): [7030653.010, 7050283.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_minBy  thrpt   30  7040468.128 ± 9815.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3106266.756 ops/s
# Warmup Iteration   2: 6935281.802 ops/s
# Warmup Iteration   3: 6378994.780 ops/s
# Warmup Iteration   4: 6557479.082 ops/s
# Warmup Iteration   5: 7043024.362 ops/s
# Warmup Iteration   6: 7047283.624 ops/s
# Warmup Iteration   7: 7048448.392 ops/s
# Warmup Iteration   8: 7053724.558 ops/s
# Warmup Iteration   9: 7043101.179 ops/s
# Warmup Iteration  10: 7044810.915 ops/s
# Warmup Iteration  11: 7054460.146 ops/s
# Warmup Iteration  12: 7052206.330 ops/s
# Warmup Iteration  13: 7047442.439 ops/s
# Warmup Iteration  14: 7062556.324 ops/s
# Warmup Iteration  15: 7039763.787 ops/s
# Warmup Iteration  16: 7060910.774 ops/s
# Warmup Iteration  17: 7063491.402 ops/s
# Warmup Iteration  18: 7058222.330 ops/s
# Warmup Iteration  19: 7041121.453 ops/s
# Warmup Iteration  20: 7058735.984 ops/s
# Warmup Iteration  21: 7059379.633 ops/s
# Warmup Iteration  22: 7051732.430 ops/s
# Warmup Iteration  23: 7068133.516 ops/s
# Warmup Iteration  24: 7058825.866 ops/s
# Warmup Iteration  25: 7055387.294 ops/s
# Warmup Iteration  26: 7057077.246 ops/s
# Warmup Iteration  27: 7056480.229 ops/s
# Warmup Iteration  28: 7063147.873 ops/s
# Warmup Iteration  29: 7054010.186 ops/s
# Warmup Iteration  30: 7032808.499 ops/s
Iteration   1: 7066303.080 ops/s
Iteration   2: 7059498.858 ops/s
Iteration   3: 7033937.050 ops/s
Iteration   4: 7073024.643 ops/s
Iteration   5: 7066798.846 ops/s
Iteration   6: 7042054.470 ops/s
Iteration   7: 7030835.735 ops/s
Iteration   8: 7053629.158 ops/s
Iteration   9: 7055526.469 ops/s
Iteration  10: 7076552.371 ops/s
Iteration  11: 7065908.255 ops/s
Iteration  12: 7081345.508 ops/s
Iteration  13: 7065462.655 ops/s
Iteration  14: 7040036.695 ops/s
Iteration  15: 7076780.779 ops/s
Iteration  16: 7057989.248 ops/s
Iteration  17: 7055477.145 ops/s
Iteration  18: 7076563.347 ops/s
Iteration  19: 7068910.433 ops/s
Iteration  20: 7073612.321 ops/s
Iteration  21: 7072703.514 ops/s
Iteration  22: 7025148.036 ops/s
Iteration  23: 7034026.414 ops/s
Iteration  24: 7045204.337 ops/s
Iteration  25: 7026194.016 ops/s
Iteration  26: 7061051.978 ops/s
Iteration  27: 7068230.625 ops/s
Iteration  28: 7078959.304 ops/s
Iteration  29: 7064445.369 ops/s
Iteration  30: 7080156.558 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minByOptional":
  7059212.241 ±(99.9%) 11407.614 ops/s [Average]
  (min, avg, max) = (7025148.036, 7059212.241, 7081345.508), stdev = 17074.381
  CI (99.9%): [7047804.626, 7070619.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_minByOptional  thrpt   30  7059212.241 ± 11407.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3944147.639 ops/s
# Warmup Iteration   2: 9437468.417 ops/s
# Warmup Iteration   3: 9528685.674 ops/s
# Warmup Iteration   4: 7938953.055 ops/s
# Warmup Iteration   5: 9555693.351 ops/s
# Warmup Iteration   6: 9537596.041 ops/s
# Warmup Iteration   7: 9550530.585 ops/s
# Warmup Iteration   8: 9560414.550 ops/s
# Warmup Iteration   9: 9526304.760 ops/s
# Warmup Iteration  10: 9538905.413 ops/s
# Warmup Iteration  11: 9551209.935 ops/s
# Warmup Iteration  12: 9541943.488 ops/s
# Warmup Iteration  13: 9544327.605 ops/s
# Warmup Iteration  14: 9545795.545 ops/s
# Warmup Iteration  15: 9559090.416 ops/s
# Warmup Iteration  16: 9550632.547 ops/s
# Warmup Iteration  17: 9524926.811 ops/s
# Warmup Iteration  18: 9551594.659 ops/s
# Warmup Iteration  19: 9521571.047 ops/s
# Warmup Iteration  20: 9535045.535 ops/s
# Warmup Iteration  21: 9510394.755 ops/s
# Warmup Iteration  22: 9521416.615 ops/s
# Warmup Iteration  23: 9555429.054 ops/s
# Warmup Iteration  24: 9510961.702 ops/s
# Warmup Iteration  25: 9526173.138 ops/s
# Warmup Iteration  26: 9531308.311 ops/s
# Warmup Iteration  27: 9534782.960 ops/s
# Warmup Iteration  28: 9522679.481 ops/s
# Warmup Iteration  29: 9538449.017 ops/s
# Warmup Iteration  30: 9530705.920 ops/s
Iteration   1: 9552194.371 ops/s
Iteration   2: 9547268.054 ops/s
Iteration   3: 9512439.590 ops/s
Iteration   4: 9585437.008 ops/s
Iteration   5: 9538773.531 ops/s
Iteration   6: 9530191.186 ops/s
Iteration   7: 9544198.047 ops/s
Iteration   8: 9518088.703 ops/s
Iteration   9: 9523957.731 ops/s
Iteration  10: 9506012.779 ops/s
Iteration  11: 9545795.516 ops/s
Iteration  12: 9485380.955 ops/s
Iteration  13: 9455228.573 ops/s
Iteration  14: 9523611.975 ops/s
Iteration  15: 9506017.182 ops/s
Iteration  16: 9551352.316 ops/s
Iteration  17: 9538691.193 ops/s
Iteration  18: 9522582.279 ops/s
Iteration  19: 9550716.530 ops/s
Iteration  20: 9547622.080 ops/s
Iteration  21: 9541624.596 ops/s
Iteration  22: 9568043.969 ops/s
Iteration  23: 9540086.788 ops/s
Iteration  24: 9520448.122 ops/s
Iteration  25: 9566045.851 ops/s
Iteration  26: 9533717.177 ops/s
Iteration  27: 9547843.100 ops/s
Iteration  28: 9533494.508 ops/s
Iteration  29: 9566880.203 ops/s
Iteration  30: 9528651.889 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minBy_null_throws":
  9534413.193 ±(99.9%) 17179.781 ops/s [Average]
  (min, avg, max) = (9455228.573, 9534413.193, 9585437.008), stdev = 25713.890
  CI (99.9%): [9517233.412, 9551592.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  9534413.193 ± 17179.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1903399.757 ops/s
# Warmup Iteration   2: 4436945.789 ops/s
# Warmup Iteration   3: 4301612.007 ops/s
# Warmup Iteration   4: 3881536.574 ops/s
# Warmup Iteration   5: 4453570.061 ops/s
# Warmup Iteration   6: 4457144.490 ops/s
# Warmup Iteration   7: 4461135.128 ops/s
# Warmup Iteration   8: 4463485.000 ops/s
# Warmup Iteration   9: 4463424.535 ops/s
# Warmup Iteration  10: 4467723.936 ops/s
# Warmup Iteration  11: 4459116.364 ops/s
# Warmup Iteration  12: 4456983.684 ops/s
# Warmup Iteration  13: 4461991.960 ops/s
# Warmup Iteration  14: 4471713.407 ops/s
# Warmup Iteration  15: 4469536.646 ops/s
# Warmup Iteration  16: 4458729.081 ops/s
# Warmup Iteration  17: 4466429.107 ops/s
# Warmup Iteration  18: 4453098.824 ops/s
# Warmup Iteration  19: 4448932.837 ops/s
# Warmup Iteration  20: 4454698.660 ops/s
# Warmup Iteration  21: 4461602.122 ops/s
# Warmup Iteration  22: 4453827.685 ops/s
# Warmup Iteration  23: 4452192.218 ops/s
# Warmup Iteration  24: 4459431.106 ops/s
# Warmup Iteration  25: 4454631.438 ops/s
# Warmup Iteration  26: 4441362.931 ops/s
# Warmup Iteration  27: 4446597.108 ops/s
# Warmup Iteration  28: 4452584.092 ops/s
# Warmup Iteration  29: 4453672.628 ops/s
# Warmup Iteration  30: 4463948.762 ops/s
Iteration   1: 4452806.025 ops/s
Iteration   2: 4440004.006 ops/s
Iteration   3: 4467747.990 ops/s
Iteration   4: 4473514.760 ops/s
Iteration   5: 4465381.809 ops/s
Iteration   6: 4448910.024 ops/s
Iteration   7: 4454703.908 ops/s
Iteration   8: 4452152.215 ops/s
Iteration   9: 4449264.527 ops/s
Iteration  10: 4462675.636 ops/s
Iteration  11: 4442129.969 ops/s
Iteration  12: 4438176.790 ops/s
Iteration  13: 4464666.271 ops/s
Iteration  14: 4470245.065 ops/s
Iteration  15: 4448181.582 ops/s
Iteration  16: 4456611.751 ops/s
Iteration  17: 4440804.965 ops/s
Iteration  18: 4457104.204 ops/s
Iteration  19: 4460943.991 ops/s
Iteration  20: 4454873.894 ops/s
Iteration  21: 4474564.495 ops/s
Iteration  22: 4450729.963 ops/s
Iteration  23: 4441797.209 ops/s
Iteration  24: 4466808.816 ops/s
Iteration  25: 4469977.790 ops/s
Iteration  26: 4456854.945 ops/s
Iteration  27: 4458039.792 ops/s
Iteration  28: 4451728.124 ops/s
Iteration  29: 4439060.555 ops/s
Iteration  30: 4459981.495 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_minOptional":
  4455681.419 ±(99.9%) 7096.917 ops/s [Average]
  (min, avg, max) = (4438176.790, 4455681.419, 4474564.495), stdev = 10622.333
  CI (99.9%): [4448584.501, 4462778.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_minOptional  thrpt   30  4455681.419 ± 7096.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724873.837 ops/s
# Warmup Iteration   2: 753374.114 ops/s
# Warmup Iteration   3: 848408.945 ops/s
# Warmup Iteration   4: 932829.144 ops/s
# Warmup Iteration   5: 929346.840 ops/s
# Warmup Iteration   6: 932286.238 ops/s
# Warmup Iteration   7: 929653.732 ops/s
# Warmup Iteration   8: 930716.020 ops/s
# Warmup Iteration   9: 931576.619 ops/s
# Warmup Iteration  10: 933977.511 ops/s
# Warmup Iteration  11: 931410.404 ops/s
# Warmup Iteration  12: 934865.851 ops/s
# Warmup Iteration  13: 928898.077 ops/s
# Warmup Iteration  14: 927191.918 ops/s
# Warmup Iteration  15: 782011.220 ops/s
# Warmup Iteration  16: 931672.306 ops/s
# Warmup Iteration  17: 990915.600 ops/s
# Warmup Iteration  18: 983392.445 ops/s
# Warmup Iteration  19: 985827.968 ops/s
# Warmup Iteration  20: 985078.411 ops/s
# Warmup Iteration  21: 988251.911 ops/s
# Warmup Iteration  22: 987688.128 ops/s
# Warmup Iteration  23: 987187.832 ops/s
# Warmup Iteration  24: 988904.788 ops/s
# Warmup Iteration  25: 985915.760 ops/s
# Warmup Iteration  26: 988447.372 ops/s
# Warmup Iteration  27: 990573.295 ops/s
# Warmup Iteration  28: 987994.539 ops/s
# Warmup Iteration  29: 989772.072 ops/s
# Warmup Iteration  30: 987003.135 ops/s
Iteration   1: 986564.772 ops/s
Iteration   2: 990428.674 ops/s
Iteration   3: 990750.177 ops/s
Iteration   4: 987338.313 ops/s
Iteration   5: 986096.867 ops/s
Iteration   6: 988576.411 ops/s
Iteration   7: 987696.421 ops/s
Iteration   8: 989420.649 ops/s
Iteration   9: 991484.158 ops/s
Iteration  10: 982878.913 ops/s
Iteration  11: 986784.592 ops/s
Iteration  12: 989145.936 ops/s
Iteration  13: 989215.523 ops/s
Iteration  14: 988957.896 ops/s
Iteration  15: 985819.149 ops/s
Iteration  16: 990300.006 ops/s
Iteration  17: 986125.135 ops/s
Iteration  18: 991707.283 ops/s
Iteration  19: 989845.286 ops/s
Iteration  20: 984555.627 ops/s
Iteration  21: 990050.683 ops/s
Iteration  22: 989327.960 ops/s
Iteration  23: 990607.015 ops/s
Iteration  24: 992225.611 ops/s
Iteration  25: 990437.265 ops/s
Iteration  26: 985770.670 ops/s
Iteration  27: 991078.523 ops/s
Iteration  28: 986626.794 ops/s
Iteration  29: 986964.751 ops/s
Iteration  30: 985805.764 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_empty_throws":
  988419.561 ±(99.9%) 1577.380 ops/s [Average]
  (min, avg, max) = (982878.913, 988419.561, 992225.611), stdev = 2360.949
  CI (99.9%): [986842.181, 989996.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_min_empty_throws  thrpt   30  988419.561 ± 1577.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2341206.999 ops/s
# Warmup Iteration   2: 4985610.290 ops/s
# Warmup Iteration   3: 5103408.460 ops/s
# Warmup Iteration   4: 5099467.141 ops/s
# Warmup Iteration   5: 4305115.409 ops/s
# Warmup Iteration   6: 5149027.128 ops/s
# Warmup Iteration   7: 5147981.397 ops/s
# Warmup Iteration   8: 5137655.334 ops/s
# Warmup Iteration   9: 5141569.205 ops/s
# Warmup Iteration  10: 5144639.801 ops/s
# Warmup Iteration  11: 5146982.020 ops/s
# Warmup Iteration  12: 5149254.826 ops/s
# Warmup Iteration  13: 5138580.686 ops/s
# Warmup Iteration  14: 5138613.590 ops/s
# Warmup Iteration  15: 5153982.149 ops/s
# Warmup Iteration  16: 5140217.953 ops/s
# Warmup Iteration  17: 5147660.497 ops/s
# Warmup Iteration  18: 5146655.942 ops/s
# Warmup Iteration  19: 5148904.909 ops/s
# Warmup Iteration  20: 5146240.331 ops/s
# Warmup Iteration  21: 5140055.101 ops/s
# Warmup Iteration  22: 5134066.032 ops/s
# Warmup Iteration  23: 5145074.717 ops/s
# Warmup Iteration  24: 5126098.750 ops/s
# Warmup Iteration  25: 5135357.052 ops/s
# Warmup Iteration  26: 5149579.029 ops/s
# Warmup Iteration  27: 5145924.866 ops/s
# Warmup Iteration  28: 5134312.325 ops/s
# Warmup Iteration  29: 5151445.449 ops/s
# Warmup Iteration  30: 5138544.104 ops/s
Iteration   1: 5151007.302 ops/s
Iteration   2: 5150155.260 ops/s
Iteration   3: 5141398.162 ops/s
Iteration   4: 5151696.394 ops/s
Iteration   5: 5142515.418 ops/s
Iteration   6: 5149599.466 ops/s
Iteration   7: 5140016.479 ops/s
Iteration   8: 5145729.924 ops/s
Iteration   9: 5150807.847 ops/s
Iteration  10: 5141895.174 ops/s
Iteration  11: 5136089.256 ops/s
Iteration  12: 5142226.039 ops/s
Iteration  13: 5156204.618 ops/s
Iteration  14: 5133228.783 ops/s
Iteration  15: 5141196.753 ops/s
Iteration  16: 5132869.229 ops/s
Iteration  17: 5136191.783 ops/s
Iteration  18: 5140452.791 ops/s
Iteration  19: 5159042.394 ops/s
Iteration  20: 5150647.486 ops/s
Iteration  21: 5138664.154 ops/s
Iteration  22: 5143900.646 ops/s
Iteration  23: 5144319.302 ops/s
Iteration  24: 5149765.498 ops/s
Iteration  25: 5153743.579 ops/s
Iteration  26: 5155402.186 ops/s
Iteration  27: 5149152.715 ops/s
Iteration  28: 5146851.125 ops/s
Iteration  29: 5136414.491 ops/s
Iteration  30: 5143649.590 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_safe":
  5145161.128 ±(99.9%) 4644.294 ops/s [Average]
  (min, avg, max) = (5132869.229, 5145161.128, 5159042.394), stdev = 6951.361
  CI (99.9%): [5140516.835, 5149805.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_min_null_safe  thrpt   30  5145161.128 ± 4644.294  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3958334.725 ops/s
# Warmup Iteration   2: 9475230.847 ops/s
# Warmup Iteration   3: 9558135.942 ops/s
# Warmup Iteration   4: 7970121.582 ops/s
# Warmup Iteration   5: 9511196.237 ops/s
# Warmup Iteration   6: 9537397.498 ops/s
# Warmup Iteration   7: 9535214.091 ops/s
# Warmup Iteration   8: 9572458.224 ops/s
# Warmup Iteration   9: 9568404.594 ops/s
# Warmup Iteration  10: 9579262.020 ops/s
# Warmup Iteration  11: 9568116.017 ops/s
# Warmup Iteration  12: 9591569.108 ops/s
# Warmup Iteration  13: 9581739.843 ops/s
# Warmup Iteration  14: 9577284.332 ops/s
# Warmup Iteration  15: 9544346.180 ops/s
# Warmup Iteration  16: 9567873.087 ops/s
# Warmup Iteration  17: 9558681.354 ops/s
# Warmup Iteration  18: 9571527.637 ops/s
# Warmup Iteration  19: 9546244.814 ops/s
# Warmup Iteration  20: 9589434.771 ops/s
# Warmup Iteration  21: 9554427.726 ops/s
# Warmup Iteration  22: 9591801.114 ops/s
# Warmup Iteration  23: 9556191.799 ops/s
# Warmup Iteration  24: 9574266.634 ops/s
# Warmup Iteration  25: 9562213.306 ops/s
# Warmup Iteration  26: 9556812.116 ops/s
# Warmup Iteration  27: 9550888.538 ops/s
# Warmup Iteration  28: 9546594.972 ops/s
# Warmup Iteration  29: 9577960.164 ops/s
# Warmup Iteration  30: 9550539.055 ops/s
Iteration   1: 9569674.165 ops/s
Iteration   2: 9572350.400 ops/s
Iteration   3: 9551987.099 ops/s
Iteration   4: 9544229.526 ops/s
Iteration   5: 9582250.322 ops/s
Iteration   6: 9576461.356 ops/s
Iteration   7: 9550124.864 ops/s
Iteration   8: 9546632.556 ops/s
Iteration   9: 9566766.539 ops/s
Iteration  10: 9553769.651 ops/s
Iteration  11: 9595351.094 ops/s
Iteration  12: 9558760.326 ops/s
Iteration  13: 9581222.557 ops/s
Iteration  14: 9573957.355 ops/s
Iteration  15: 9542619.302 ops/s
Iteration  16: 9547217.446 ops/s
Iteration  17: 9592163.557 ops/s
Iteration  18: 9568409.529 ops/s
Iteration  19: 9577160.317 ops/s
Iteration  20: 9586625.500 ops/s
Iteration  21: 9555170.821 ops/s
Iteration  22: 9566059.655 ops/s
Iteration  23: 9556527.577 ops/s
Iteration  24: 9591747.076 ops/s
Iteration  25: 9576081.713 ops/s
Iteration  26: 9594507.157 ops/s
Iteration  27: 9571868.688 ops/s
Iteration  28: 9596607.491 ops/s
Iteration  29: 9544649.969 ops/s
Iteration  30: 9569716.357 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws":
  9568688.999 ±(99.9%) 11256.378 ops/s [Average]
  (min, avg, max) = (9542619.302, 9568688.999, 9596607.491), stdev = 16848.018
  CI (99.9%): [9557432.621, 9579945.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_min_null_throws  thrpt   30  9568688.999 ± 11256.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618322.718 ops/s
# Warmup Iteration   2: 651254.754 ops/s
# Warmup Iteration   3: 892262.760 ops/s
# Warmup Iteration   4: 890003.068 ops/s
# Warmup Iteration   5: 885653.245 ops/s
# Warmup Iteration   6: 891125.262 ops/s
# Warmup Iteration   7: 892191.401 ops/s
# Warmup Iteration   8: 891234.701 ops/s
# Warmup Iteration   9: 894432.041 ops/s
# Warmup Iteration  10: 890151.910 ops/s
# Warmup Iteration  11: 792857.307 ops/s
# Warmup Iteration  12: 841384.918 ops/s
# Warmup Iteration  13: 891456.195 ops/s
# Warmup Iteration  14: 892234.196 ops/s
# Warmup Iteration  15: 891465.114 ops/s
# Warmup Iteration  16: 891931.857 ops/s
# Warmup Iteration  17: 936607.103 ops/s
# Warmup Iteration  18: 936443.188 ops/s
# Warmup Iteration  19: 938555.426 ops/s
# Warmup Iteration  20: 936321.467 ops/s
# Warmup Iteration  21: 936854.039 ops/s
# Warmup Iteration  22: 934397.208 ops/s
# Warmup Iteration  23: 937875.462 ops/s
# Warmup Iteration  24: 936485.922 ops/s
# Warmup Iteration  25: 936506.019 ops/s
# Warmup Iteration  26: 936492.533 ops/s
# Warmup Iteration  27: 934433.414 ops/s
# Warmup Iteration  28: 938131.318 ops/s
# Warmup Iteration  29: 935038.231 ops/s
# Warmup Iteration  30: 935804.220 ops/s
Iteration   1: 936400.547 ops/s
Iteration   2: 930660.557 ops/s
Iteration   3: 937191.128 ops/s
Iteration   4: 936027.181 ops/s
Iteration   5: 932690.637 ops/s
Iteration   6: 939016.171 ops/s
Iteration   7: 931217.602 ops/s
Iteration   8: 934913.136 ops/s
Iteration   9: 936401.826 ops/s
Iteration  10: 934493.886 ops/s
Iteration  11: 936385.036 ops/s
Iteration  12: 934805.762 ops/s
Iteration  13: 936422.608 ops/s
Iteration  14: 939560.987 ops/s
Iteration  15: 934292.864 ops/s
Iteration  16: 937677.040 ops/s
Iteration  17: 932235.063 ops/s
Iteration  18: 936344.669 ops/s
Iteration  19: 936081.229 ops/s
Iteration  20: 941183.135 ops/s
Iteration  21: 932868.457 ops/s
Iteration  22: 936080.579 ops/s
Iteration  23: 933810.230 ops/s
Iteration  24: 936523.965 ops/s
Iteration  25: 937966.402 ops/s
Iteration  26: 937606.397 ops/s
Iteration  27: 935585.389 ops/s
Iteration  28: 935554.428 ops/s
Iteration  29: 935513.005 ops/s
Iteration  30: 933047.180 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  935618.570 ±(99.9%) 1589.969 ops/s [Average]
  (min, avg, max) = (930660.557, 935618.570, 941183.135), stdev = 2379.791
  CI (99.9%): [934028.601, 937208.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  935618.570 ± 1589.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4043273.506 ops/s
# Warmup Iteration   2: 9225997.567 ops/s
# Warmup Iteration   3: 9101688.515 ops/s
# Warmup Iteration   4: 7556997.163 ops/s
# Warmup Iteration   5: 9086839.082 ops/s
# Warmup Iteration   6: 9086520.823 ops/s
# Warmup Iteration   7: 9096539.751 ops/s
# Warmup Iteration   8: 9068126.896 ops/s
# Warmup Iteration   9: 9095427.232 ops/s
# Warmup Iteration  10: 9100541.591 ops/s
# Warmup Iteration  11: 9051171.836 ops/s
# Warmup Iteration  12: 9119783.201 ops/s
# Warmup Iteration  13: 9103636.761 ops/s
# Warmup Iteration  14: 9101544.409 ops/s
# Warmup Iteration  15: 9077651.023 ops/s
# Warmup Iteration  16: 9090551.212 ops/s
# Warmup Iteration  17: 9131147.982 ops/s
# Warmup Iteration  18: 9137545.268 ops/s
# Warmup Iteration  19: 9125018.829 ops/s
# Warmup Iteration  20: 9110910.162 ops/s
# Warmup Iteration  21: 9113724.525 ops/s
# Warmup Iteration  22: 9145918.991 ops/s
# Warmup Iteration  23: 9129537.710 ops/s
# Warmup Iteration  24: 9125528.381 ops/s
# Warmup Iteration  25: 9105783.469 ops/s
# Warmup Iteration  26: 9131118.012 ops/s
# Warmup Iteration  27: 9117846.452 ops/s
# Warmup Iteration  28: 9113760.176 ops/s
# Warmup Iteration  29: 9114325.465 ops/s
# Warmup Iteration  30: 9135803.445 ops/s
Iteration   1: 9116975.850 ops/s
Iteration   2: 9151086.587 ops/s
Iteration   3: 9142980.888 ops/s
Iteration   4: 9139061.092 ops/s
Iteration   5: 9145611.331 ops/s
Iteration   6: 9122280.012 ops/s
Iteration   7: 9123303.420 ops/s
Iteration   8: 9141589.508 ops/s
Iteration   9: 9129105.518 ops/s
Iteration  10: 9142907.385 ops/s
Iteration  11: 9119226.966 ops/s
Iteration  12: 9153559.219 ops/s
Iteration  13: 9136615.253 ops/s
Iteration  14: 9172054.635 ops/s
Iteration  15: 9158532.939 ops/s
Iteration  16: 9137275.362 ops/s
Iteration  17: 9140464.066 ops/s
Iteration  18: 9151720.881 ops/s
Iteration  19: 9095472.921 ops/s
Iteration  20: 9124164.400 ops/s
Iteration  21: 9127315.986 ops/s
Iteration  22: 9116827.063 ops/s
Iteration  23: 9139485.930 ops/s
Iteration  24: 9124955.438 ops/s
Iteration  25: 9118881.531 ops/s
Iteration  26: 9108679.198 ops/s
Iteration  27: 9120341.679 ops/s
Iteration  28: 9119301.790 ops/s
Iteration  29: 9076133.773 ops/s
Iteration  30: 9113417.498 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_min_without_comparator":
  9130310.937 ±(99.9%) 12969.718 ops/s [Average]
  (min, avg, max) = (9076133.773, 9130310.937, 9172054.635), stdev = 19412.465
  CI (99.9%): [9117341.219, 9143280.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  9130310.937 ± 12969.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38804369.563 ops/s
# Warmup Iteration   2: 76061968.944 ops/s
# Warmup Iteration   3: 70493796.464 ops/s
# Warmup Iteration   4: 82674569.271 ops/s
# Warmup Iteration   5: 82469248.770 ops/s
# Warmup Iteration   6: 82448532.112 ops/s
# Warmup Iteration   7: 82369123.753 ops/s
# Warmup Iteration   8: 82312327.763 ops/s
# Warmup Iteration   9: 82342192.285 ops/s
# Warmup Iteration  10: 82214240.931 ops/s
# Warmup Iteration  11: 81942417.382 ops/s
# Warmup Iteration  12: 82242957.664 ops/s
# Warmup Iteration  13: 82573893.015 ops/s
# Warmup Iteration  14: 82086526.361 ops/s
# Warmup Iteration  15: 82482286.859 ops/s
# Warmup Iteration  16: 82146830.474 ops/s
# Warmup Iteration  17: 82136301.013 ops/s
# Warmup Iteration  18: 82399773.104 ops/s
# Warmup Iteration  19: 80871102.340 ops/s
# Warmup Iteration  20: 79557655.266 ops/s
# Warmup Iteration  21: 82544182.832 ops/s
# Warmup Iteration  22: 82728216.807 ops/s
# Warmup Iteration  23: 82398774.736 ops/s
# Warmup Iteration  24: 82294904.504 ops/s
# Warmup Iteration  25: 82642613.726 ops/s
# Warmup Iteration  26: 82381432.016 ops/s
# Warmup Iteration  27: 82340186.735 ops/s
# Warmup Iteration  28: 82404146.347 ops/s
# Warmup Iteration  29: 81817257.902 ops/s
# Warmup Iteration  30: 82457785.547 ops/s
Iteration   1: 82035827.652 ops/s
Iteration   2: 82537488.798 ops/s
Iteration   3: 82481746.910 ops/s
Iteration   4: 82239385.843 ops/s
Iteration   5: 82491763.332 ops/s
Iteration   6: 82316059.227 ops/s
Iteration   7: 82427115.104 ops/s
Iteration   8: 82347213.514 ops/s
Iteration   9: 82345189.353 ops/s
Iteration  10: 82320924.601 ops/s
Iteration  11: 82315663.914 ops/s
Iteration  12: 82537857.857 ops/s
Iteration  13: 82621985.363 ops/s
Iteration  14: 82308269.520 ops/s
Iteration  15: 82451087.630 ops/s
Iteration  16: 82536682.987 ops/s
Iteration  17: 82109952.146 ops/s
Iteration  18: 82342522.121 ops/s
Iteration  19: 82315300.990 ops/s
Iteration  20: 82237388.540 ops/s
Iteration  21: 82446454.036 ops/s
Iteration  22: 82488367.724 ops/s
Iteration  23: 82587747.321 ops/s
Iteration  24: 82368853.047 ops/s
Iteration  25: 82349210.228 ops/s
Iteration  26: 82708021.326 ops/s
Iteration  27: 82491643.676 ops/s
Iteration  28: 82243751.155 ops/s
Iteration  29: 82507307.408 ops/s
Iteration  30: 82258980.241 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newEmpty":
  82392325.385 ±(99.9%) 99599.782 ops/s [Average]
  (min, avg, max) = (82035827.652, 82392325.385, 82708021.326), stdev = 149076.277
  CI (99.9%): [82292725.603, 82491925.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_newEmpty  thrpt   30  82392325.385 ± 99599.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4762926.828 ops/s
# Warmup Iteration   2: 10138545.271 ops/s
# Warmup Iteration   3: 8703938.049 ops/s
# Warmup Iteration   4: 10334687.700 ops/s
# Warmup Iteration   5: 10312378.471 ops/s
# Warmup Iteration   6: 10369633.769 ops/s
# Warmup Iteration   7: 10354045.533 ops/s
# Warmup Iteration   8: 10337635.130 ops/s
# Warmup Iteration   9: 10312845.980 ops/s
# Warmup Iteration  10: 10332535.215 ops/s
# Warmup Iteration  11: 10307295.506 ops/s
# Warmup Iteration  12: 10358885.911 ops/s
# Warmup Iteration  13: 10328176.749 ops/s
# Warmup Iteration  14: 10335729.689 ops/s
# Warmup Iteration  15: 10330606.107 ops/s
# Warmup Iteration  16: 10333736.365 ops/s
# Warmup Iteration  17: 10333754.019 ops/s
# Warmup Iteration  18: 10351047.151 ops/s
# Warmup Iteration  19: 10344759.798 ops/s
# Warmup Iteration  20: 10328386.149 ops/s
# Warmup Iteration  21: 10307400.723 ops/s
# Warmup Iteration  22: 10349961.793 ops/s
# Warmup Iteration  23: 10353071.349 ops/s
# Warmup Iteration  24: 10302254.332 ops/s
# Warmup Iteration  25: 10339532.021 ops/s
# Warmup Iteration  26: 10315504.568 ops/s
# Warmup Iteration  27: 10354918.273 ops/s
# Warmup Iteration  28: 10338623.838 ops/s
# Warmup Iteration  29: 10344224.244 ops/s
# Warmup Iteration  30: 10330823.568 ops/s
Iteration   1: 10292907.122 ops/s
Iteration   2: 10366703.912 ops/s
Iteration   3: 10335238.655 ops/s
Iteration   4: 10310272.072 ops/s
Iteration   5: 10304251.528 ops/s
Iteration   6: 10352248.053 ops/s
Iteration   7: 10331113.878 ops/s
Iteration   8: 10325235.273 ops/s
Iteration   9: 10328638.637 ops/s
Iteration  10: 10287282.250 ops/s
Iteration  11: 10307488.641 ops/s
Iteration  12: 10266959.261 ops/s
Iteration  13: 10329614.766 ops/s
Iteration  14: 10349741.734 ops/s
Iteration  15: 10348193.726 ops/s
Iteration  16: 10331664.081 ops/s
Iteration  17: 10365560.084 ops/s
Iteration  18: 10349325.083 ops/s
Iteration  19: 10356701.141 ops/s
Iteration  20: 10344176.891 ops/s
Iteration  21: 10312996.216 ops/s
Iteration  22: 10303560.524 ops/s
Iteration  23: 10304260.256 ops/s
Iteration  24: 10374565.099 ops/s
Iteration  25: 10322153.246 ops/s
Iteration  26: 10298734.090 ops/s
Iteration  27: 10316964.978 ops/s
Iteration  28: 10346392.310 ops/s
Iteration  29: 10353671.038 ops/s
Iteration  30: 10310294.663 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_newListWithSize":
  10327563.640 ±(99.9%) 17453.050 ops/s [Average]
  (min, avg, max) = (10266959.261, 10327563.640, 10374565.099), stdev = 26122.905
  CI (99.9%): [10310110.591, 10345016.690] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_newListWithSize  thrpt   30  10327563.640 ± 17453.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2960125.633 ops/s
# Warmup Iteration   2: 6262235.841 ops/s
# Warmup Iteration   3: 5310580.187 ops/s
# Warmup Iteration   4: 6288314.448 ops/s
# Warmup Iteration   5: 6311685.763 ops/s
# Warmup Iteration   6: 6301827.932 ops/s
# Warmup Iteration   7: 6049901.397 ops/s
# Warmup Iteration   8: 6308408.303 ops/s
# Warmup Iteration   9: 6310359.523 ops/s
# Warmup Iteration  10: 6320637.362 ops/s
# Warmup Iteration  11: 6323281.423 ops/s
# Warmup Iteration  12: 6305718.237 ops/s
# Warmup Iteration  13: 6288431.495 ops/s
# Warmup Iteration  14: 6302367.311 ops/s
# Warmup Iteration  15: 6308783.295 ops/s
# Warmup Iteration  16: 6308500.282 ops/s
# Warmup Iteration  17: 6275019.616 ops/s
# Warmup Iteration  18: 6282545.946 ops/s
# Warmup Iteration  19: 6258315.758 ops/s
# Warmup Iteration  20: 6265457.892 ops/s
# Warmup Iteration  21: 6268504.161 ops/s
# Warmup Iteration  22: 6283410.037 ops/s
# Warmup Iteration  23: 6291001.993 ops/s
# Warmup Iteration  24: 6270507.896 ops/s
# Warmup Iteration  25: 6269602.208 ops/s
# Warmup Iteration  26: 6288947.238 ops/s
# Warmup Iteration  27: 6289657.755 ops/s
# Warmup Iteration  28: 6273926.468 ops/s
# Warmup Iteration  29: 6293529.695 ops/s
# Warmup Iteration  30: 6276735.953 ops/s
Iteration   1: 6270741.339 ops/s
Iteration   2: 6271648.450 ops/s
Iteration   3: 6281703.026 ops/s
Iteration   4: 6253065.082 ops/s
Iteration   5: 6245337.990 ops/s
Iteration   6: 6281408.816 ops/s
Iteration   7: 6245908.342 ops/s
Iteration   8: 6275137.098 ops/s
Iteration   9: 6241382.865 ops/s
Iteration  10: 6304633.613 ops/s
Iteration  11: 6264277.538 ops/s
Iteration  12: 6265289.749 ops/s
Iteration  13: 6264657.326 ops/s
Iteration  14: 6257277.918 ops/s
Iteration  15: 6277592.929 ops/s
Iteration  16: 6273988.979 ops/s
Iteration  17: 6251798.584 ops/s
Iteration  18: 6263314.985 ops/s
Iteration  19: 6302650.144 ops/s
Iteration  20: 6273557.082 ops/s
Iteration  21: 6261845.579 ops/s
Iteration  22: 6287716.560 ops/s
Iteration  23: 6301660.223 ops/s
Iteration  24: 6271291.121 ops/s
Iteration  25: 6285388.278 ops/s
Iteration  26: 6289129.391 ops/s
Iteration  27: 6271040.542 ops/s
Iteration  28: 6292613.690 ops/s
Iteration  29: 6285544.658 ops/s
Iteration  30: 6280956.736 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfy":
  6273085.288 ±(99.9%) 11193.356 ops/s [Average]
  (min, avg, max) = (6241382.865, 6273085.288, 6304633.613), stdev = 16753.690
  CI (99.9%): [6261891.932, 6284278.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  6273085.288 ± 11193.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4234876.821 ops/s
# Warmup Iteration   2: 8434968.816 ops/s
# Warmup Iteration   3: 7527001.805 ops/s
# Warmup Iteration   4: 8964769.747 ops/s
# Warmup Iteration   5: 8994292.447 ops/s
# Warmup Iteration   6: 8963675.377 ops/s
# Warmup Iteration   7: 8968753.060 ops/s
# Warmup Iteration   8: 8978440.298 ops/s
# Warmup Iteration   9: 8967131.003 ops/s
# Warmup Iteration  10: 8964535.402 ops/s
# Warmup Iteration  11: 8945679.331 ops/s
# Warmup Iteration  12: 8970999.677 ops/s
# Warmup Iteration  13: 8956001.874 ops/s
# Warmup Iteration  14: 8973365.819 ops/s
# Warmup Iteration  15: 8946477.457 ops/s
# Warmup Iteration  16: 8957293.117 ops/s
# Warmup Iteration  17: 8986665.056 ops/s
# Warmup Iteration  18: 8961118.939 ops/s
# Warmup Iteration  19: 8978767.643 ops/s
# Warmup Iteration  20: 8941133.740 ops/s
# Warmup Iteration  21: 8986309.438 ops/s
# Warmup Iteration  22: 8973783.072 ops/s
# Warmup Iteration  23: 8972370.981 ops/s
# Warmup Iteration  24: 8967019.635 ops/s
# Warmup Iteration  25: 9003109.573 ops/s
# Warmup Iteration  26: 8977481.690 ops/s
# Warmup Iteration  27: 8951081.134 ops/s
# Warmup Iteration  28: 8972009.936 ops/s
# Warmup Iteration  29: 8946655.318 ops/s
# Warmup Iteration  30: 8949523.472 ops/s
Iteration   1: 8973210.761 ops/s
Iteration   2: 8957171.921 ops/s
Iteration   3: 8965335.835 ops/s
Iteration   4: 8983248.457 ops/s
Iteration   5: 8986939.204 ops/s
Iteration   6: 8925981.433 ops/s
Iteration   7: 8700898.741 ops/s
Iteration   8: 8991708.209 ops/s
Iteration   9: 8952290.035 ops/s
Iteration  10: 8954375.894 ops/s
Iteration  11: 8976320.289 ops/s
Iteration  12: 8961887.044 ops/s
Iteration  13: 8926492.936 ops/s
Iteration  14: 8988306.572 ops/s
Iteration  15: 8952417.466 ops/s
Iteration  16: 8907150.490 ops/s
Iteration  17: 8978152.416 ops/s
Iteration  18: 8974688.981 ops/s
Iteration  19: 8993393.541 ops/s
Iteration  20: 8967550.040 ops/s
Iteration  21: 8936658.064 ops/s
Iteration  22: 8966483.402 ops/s
Iteration  23: 9000160.133 ops/s
Iteration  24: 8978543.285 ops/s
Iteration  25: 8997801.173 ops/s
Iteration  26: 8957610.249 ops/s
Iteration  27: 8981627.706 ops/s
Iteration  28: 8990552.182 ops/s
Iteration  29: 8968049.623 ops/s
Iteration  30: 8995591.683 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_noneSatisfyWith":
  8959686.592 ±(99.9%) 36029.065 ops/s [Average]
  (min, avg, max) = (8700898.741, 8959686.592, 9000160.133), stdev = 53926.613
  CI (99.9%): [8923657.527, 8995715.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  8959686.592 ± 36029.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5976122.185 ops/s
# Warmup Iteration   2: 10223402.452 ops/s
# Warmup Iteration   3: 12073515.590 ops/s
# Warmup Iteration   4: 12064735.265 ops/s
# Warmup Iteration   5: 12184752.654 ops/s
# Warmup Iteration   6: 12122320.832 ops/s
# Warmup Iteration   7: 12142472.049 ops/s
# Warmup Iteration   8: 12161323.193 ops/s
# Warmup Iteration   9: 12175391.833 ops/s
# Warmup Iteration  10: 12245875.140 ops/s
# Warmup Iteration  11: 12215728.041 ops/s
# Warmup Iteration  12: 12191832.622 ops/s
# Warmup Iteration  13: 12201148.953 ops/s
# Warmup Iteration  14: 12191321.932 ops/s
# Warmup Iteration  15: 12176601.266 ops/s
# Warmup Iteration  16: 12116343.367 ops/s
# Warmup Iteration  17: 12137271.149 ops/s
# Warmup Iteration  18: 12180153.009 ops/s
# Warmup Iteration  19: 12065692.865 ops/s
# Warmup Iteration  20: 12078256.451 ops/s
# Warmup Iteration  21: 12167030.020 ops/s
# Warmup Iteration  22: 12117700.619 ops/s
# Warmup Iteration  23: 12110676.345 ops/s
# Warmup Iteration  24: 12127899.667 ops/s
# Warmup Iteration  25: 12158831.928 ops/s
# Warmup Iteration  26: 12132780.112 ops/s
# Warmup Iteration  27: 12137813.700 ops/s
# Warmup Iteration  28: 12148569.751 ops/s
# Warmup Iteration  29: 12164323.203 ops/s
# Warmup Iteration  30: 12125533.307 ops/s
Iteration   1: 12164666.240 ops/s
Iteration   2: 12182188.929 ops/s
Iteration   3: 12189491.031 ops/s
Iteration   4: 12135494.001 ops/s
Iteration   5: 12132028.221 ops/s
Iteration   6: 12137952.362 ops/s
Iteration   7: 11991560.249 ops/s
Iteration   8: 12178160.925 ops/s
Iteration   9: 12107588.957 ops/s
Iteration  10: 12176046.082 ops/s
Iteration  11: 12012986.439 ops/s
Iteration  12: 12145129.220 ops/s
Iteration  13: 12091623.242 ops/s
Iteration  14: 12160179.233 ops/s
Iteration  15: 12080893.434 ops/s
Iteration  16: 12105017.261 ops/s
Iteration  17: 12051459.114 ops/s
Iteration  18: 12167588.144 ops/s
Iteration  19: 12190791.726 ops/s
Iteration  20: 12131635.800 ops/s
Iteration  21: 12224236.745 ops/s
Iteration  22: 12190180.515 ops/s
Iteration  23: 12139964.390 ops/s
Iteration  24: 12095864.643 ops/s
Iteration  25: 12141255.422 ops/s
Iteration  26: 12201252.936 ops/s
Iteration  27: 12133324.749 ops/s
Iteration  28: 12206054.099 ops/s
Iteration  29: 12241122.872 ops/s
Iteration  30: 12084184.254 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notEmpty":
  12139664.041 ±(99.9%) 38977.297 ops/s [Average]
  (min, avg, max) = (11991560.249, 12139664.041, 12241122.872), stdev = 58339.387
  CI (99.9%): [12100686.745, 12178641.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_notEmpty  thrpt   30  12139664.041 ± 38977.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notRandomAccess$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notRandomAccess

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17314910.873 ops/s
# Warmup Iteration   2: 21891518.612 ops/s
# Warmup Iteration   3: 26775070.348 ops/s
# Warmup Iteration   4: 26674271.229 ops/s
# Warmup Iteration   5: 26743919.076 ops/s
# Warmup Iteration   6: 26685996.123 ops/s
# Warmup Iteration   7: 26628759.049 ops/s
# Warmup Iteration   8: 22251426.458 ops/s
# Warmup Iteration   9: 26779721.166 ops/s
# Warmup Iteration  10: 26795378.917 ops/s
# Warmup Iteration  11: 26756280.633 ops/s
# Warmup Iteration  12: 26426451.271 ops/s
# Warmup Iteration  13: 26804330.020 ops/s
# Warmup Iteration  14: 26794660.754 ops/s
# Warmup Iteration  15: 26814554.902 ops/s
# Warmup Iteration  16: 26769890.587 ops/s
# Warmup Iteration  17: 26792837.233 ops/s
# Warmup Iteration  18: 26787976.631 ops/s
# Warmup Iteration  19: 26771521.186 ops/s
# Warmup Iteration  20: 26735770.994 ops/s
# Warmup Iteration  21: 26787064.872 ops/s
# Warmup Iteration  22: 26761851.183 ops/s
# Warmup Iteration  23: 26755556.778 ops/s
# Warmup Iteration  24: 26740847.680 ops/s
# Warmup Iteration  25: 26744190.238 ops/s
# Warmup Iteration  26: 26766698.099 ops/s
# Warmup Iteration  27: 26781765.200 ops/s
# Warmup Iteration  28: 26789344.887 ops/s
# Warmup Iteration  29: 26748866.814 ops/s
# Warmup Iteration  30: 26756535.748 ops/s
Iteration   1: 26844180.078 ops/s
Iteration   2: 26800125.536 ops/s
Iteration   3: 26791361.051 ops/s
Iteration   4: 26780533.812 ops/s
Iteration   5: 26763888.832 ops/s
Iteration   6: 26799884.597 ops/s
Iteration   7: 26788409.429 ops/s
Iteration   8: 26767315.527 ops/s
Iteration   9: 26759565.149 ops/s
Iteration  10: 26738811.711 ops/s
Iteration  11: 26756848.548 ops/s
Iteration  12: 26729131.039 ops/s
Iteration  13: 26798312.005 ops/s
Iteration  14: 26797412.175 ops/s
Iteration  15: 26807897.213 ops/s
Iteration  16: 26790881.357 ops/s
Iteration  17: 26793917.827 ops/s
Iteration  18: 26731189.482 ops/s
Iteration  19: 26786086.566 ops/s
Iteration  20: 26741835.185 ops/s
Iteration  21: 26786591.371 ops/s
Iteration  22: 26740112.634 ops/s
Iteration  23: 26781191.222 ops/s
Iteration  24: 26804240.971 ops/s
Iteration  25: 26754566.783 ops/s
Iteration  26: 26654265.582 ops/s
Iteration  27: 26798423.247 ops/s
Iteration  28: 26709506.174 ops/s
Iteration  29: 26775232.666 ops/s
Iteration  30: 26800472.313 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_notRandomAccess":
  26772406.336 ±(99.9%) 24526.994 ops/s [Average]
  (min, avg, max) = (26654265.582, 26772406.336, 26844180.078), stdev = 36710.852
  CI (99.9%): [26747879.343, 26796933.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_notRandomAccess  thrpt   30  26772406.336 ± 24526.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_parallelBatchForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_parallelBatchForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2.106 ops/s
# Warmup Iteration   2: 2.583 ops/s
# Warmup Iteration   3: 2.765 ops/s
# Warmup Iteration   4: 3.150 ops/s
# Warmup Iteration   5: 2.807 ops/s
# Warmup Iteration   6: 2.979 ops/s
# Warmup Iteration   7: 2.861 ops/s
# Warmup Iteration   8: 2.961 ops/s
# Warmup Iteration   9: 2.975 ops/s
# Warmup Iteration  10: 2.951 ops/s
# Warmup Iteration  11: 2.899 ops/s
# Warmup Iteration  12: 2.985 ops/s
# Warmup Iteration  13: 2.995 ops/s
# Warmup Iteration  14: 2.893 ops/s
# Warmup Iteration  15: 2.929 ops/s
# Warmup Iteration  16: 2.931 ops/s
# Warmup Iteration  17: 3.125 ops/s
# Warmup Iteration  18: 3.056 ops/s
# Warmup Iteration  19: 2.993 ops/s
# Warmup Iteration  20: 3.005 ops/s
# Warmup Iteration  21: 2.934 ops/s
# Warmup Iteration  22: 3.119 ops/s
# Warmup Iteration  23: 2.990 ops/s
# Warmup Iteration  24: 2.973 ops/s
# Warmup Iteration  25: 2.933 ops/s
# Warmup Iteration  26: 2.898 ops/s
# Warmup Iteration  27: 3.152 ops/s
# Warmup Iteration  28: 2.792 ops/s
# Warmup Iteration  29: 3.080 ops/s
# Warmup Iteration  30: 2.969 ops/s
Iteration   1: 2.875 ops/s
Iteration   2: 3.019 ops/s
Iteration   3: 3.041 ops/s
Iteration   4: 2.879 ops/s
Iteration   5: 2.936 ops/s
Iteration   6: 2.979 ops/s
Iteration   7: 3.063 ops/s
Iteration   8: 2.983 ops/s
Iteration   9: 2.989 ops/s
Iteration  10: 2.948 ops/s
Iteration  11: 3.030 ops/s
Iteration  12: 3.109 ops/s
Iteration  13: 2.932 ops/s
Iteration  14: 2.875 ops/s
Iteration  15: 3.060 ops/s
Iteration  16: 3.100 ops/s
Iteration  17: 3.120 ops/s
Iteration  18: 2.902 ops/s
Iteration  19: 3.111 ops/s
Iteration  20: 3.138 ops/s
Iteration  21: 3.027 ops/s
Iteration  22: 2.966 ops/s
Iteration  23: 2.807 ops/s
Iteration  24: 2.949 ops/s
Iteration  25: 2.936 ops/s
Iteration  26: 2.221 ops/s
Iteration  27: 2.699 ops/s
Iteration  28: 2.916 ops/s
Iteration  29: 2.877 ops/s
Iteration  30: 3.101 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_parallelBatchForEach":
  2.953 ±(99.9%) 0.115 ops/s [Average]
  (min, avg, max) = (2.221, 2.953, 3.138), stdev = 0.172
  CI (99.9%): [2.838, 3.068] (assumes normal distribution)


# Run complete. Total time: 00:01:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt  Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_parallelBatchForEach  thrpt   30  2.953 ± 0.115  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 789251.862 ops/s
# Warmup Iteration   2: 1479221.788 ops/s
# Warmup Iteration   3: 1576460.243 ops/s
# Warmup Iteration   4: 1585474.842 ops/s
# Warmup Iteration   5: 1319613.856 ops/s
# Warmup Iteration   6: 1586100.895 ops/s
# Warmup Iteration   7: 1585742.475 ops/s
# Warmup Iteration   8: 1584246.028 ops/s
# Warmup Iteration   9: 1581143.397 ops/s
# Warmup Iteration  10: 1584646.865 ops/s
# Warmup Iteration  11: 1583731.989 ops/s
# Warmup Iteration  12: 1585304.263 ops/s
# Warmup Iteration  13: 1582540.288 ops/s
# Warmup Iteration  14: 1585962.350 ops/s
# Warmup Iteration  15: 1580405.537 ops/s
# Warmup Iteration  16: 1583297.099 ops/s
# Warmup Iteration  17: 1580063.594 ops/s
# Warmup Iteration  18: 1581694.358 ops/s
# Warmup Iteration  19: 1583997.389 ops/s
# Warmup Iteration  20: 1585010.562 ops/s
# Warmup Iteration  21: 1581335.348 ops/s
# Warmup Iteration  22: 1583376.601 ops/s
# Warmup Iteration  23: 1584656.119 ops/s
# Warmup Iteration  24: 1583422.748 ops/s
# Warmup Iteration  25: 1583076.678 ops/s
# Warmup Iteration  26: 1584560.342 ops/s
# Warmup Iteration  27: 1583578.326 ops/s
# Warmup Iteration  28: 1581432.691 ops/s
# Warmup Iteration  29: 1580622.764 ops/s
# Warmup Iteration  30: 1580822.033 ops/s
Iteration   1: 1581813.149 ops/s
Iteration   2: 1585062.159 ops/s
Iteration   3: 1586531.575 ops/s
Iteration   4: 1580826.589 ops/s
Iteration   5: 1587380.367 ops/s
Iteration   6: 1584078.058 ops/s
Iteration   7: 1586516.283 ops/s
Iteration   8: 1577952.099 ops/s
Iteration   9: 1587044.312 ops/s
Iteration  10: 1583788.447 ops/s
Iteration  11: 1581908.990 ops/s
Iteration  12: 1582179.235 ops/s
Iteration  13: 1588260.984 ops/s
Iteration  14: 1583605.640 ops/s
Iteration  15: 1586577.999 ops/s
Iteration  16: 1580867.674 ops/s
Iteration  17: 1585380.613 ops/s
Iteration  18: 1577009.367 ops/s
Iteration  19: 1584908.079 ops/s
Iteration  20: 1586694.252 ops/s
Iteration  21: 1584290.855 ops/s
Iteration  22: 1587784.603 ops/s
Iteration  23: 1586210.869 ops/s
Iteration  24: 1585248.282 ops/s
Iteration  25: 1588100.921 ops/s
Iteration  26: 1582590.278 ops/s
Iteration  27: 1591031.690 ops/s
Iteration  28: 1578067.833 ops/s
Iteration  29: 1581183.610 ops/s
Iteration  30: 1589880.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partition":
  1584425.837 ±(99.9%) 2316.815 ops/s [Average]
  (min, avg, max) = (1577009.367, 1584425.837, 1591031.690), stdev = 3467.700
  CI (99.9%): [1582109.022, 1586742.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_partition  thrpt   30  1584425.837 ± 2316.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675394.647 ops/s
# Warmup Iteration   2: 1558519.188 ops/s
# Warmup Iteration   3: 1615297.739 ops/s
# Warmup Iteration   4: 1346991.141 ops/s
# Warmup Iteration   5: 1616653.958 ops/s
# Warmup Iteration   6: 1615243.437 ops/s
# Warmup Iteration   7: 1609399.775 ops/s
# Warmup Iteration   8: 1616573.151 ops/s
# Warmup Iteration   9: 1617362.304 ops/s
# Warmup Iteration  10: 1617166.780 ops/s
# Warmup Iteration  11: 1616019.872 ops/s
# Warmup Iteration  12: 1617877.053 ops/s
# Warmup Iteration  13: 1610356.512 ops/s
# Warmup Iteration  14: 1618115.503 ops/s
# Warmup Iteration  15: 1613689.964 ops/s
# Warmup Iteration  16: 1615716.337 ops/s
# Warmup Iteration  17: 1598638.779 ops/s
# Warmup Iteration  18: 1598310.893 ops/s
# Warmup Iteration  19: 1600570.755 ops/s
# Warmup Iteration  20: 1599289.740 ops/s
# Warmup Iteration  21: 1597768.203 ops/s
# Warmup Iteration  22: 1601599.001 ops/s
# Warmup Iteration  23: 1597764.307 ops/s
# Warmup Iteration  24: 1595396.324 ops/s
# Warmup Iteration  25: 1598208.715 ops/s
# Warmup Iteration  26: 1602076.260 ops/s
# Warmup Iteration  27: 1595399.419 ops/s
# Warmup Iteration  28: 1598921.602 ops/s
# Warmup Iteration  29: 1597273.096 ops/s
# Warmup Iteration  30: 1599628.032 ops/s
Iteration   1: 1593432.414 ops/s
Iteration   2: 1603065.623 ops/s
Iteration   3: 1597661.890 ops/s
Iteration   4: 1600617.054 ops/s
Iteration   5: 1598929.307 ops/s
Iteration   6: 1591345.200 ops/s
Iteration   7: 1595639.394 ops/s
Iteration   8: 1594411.607 ops/s
Iteration   9: 1600720.874 ops/s
Iteration  10: 1599898.241 ops/s
Iteration  11: 1600854.480 ops/s
Iteration  12: 1603978.933 ops/s
Iteration  13: 1597522.918 ops/s
Iteration  14: 1603558.517 ops/s
Iteration  15: 1593439.001 ops/s
Iteration  16: 1592077.301 ops/s
Iteration  17: 1595024.966 ops/s
Iteration  18: 1602945.921 ops/s
Iteration  19: 1597698.194 ops/s
Iteration  20: 1596660.638 ops/s
Iteration  21: 1592582.067 ops/s
Iteration  22: 1599352.128 ops/s
Iteration  23: 1600229.378 ops/s
Iteration  24: 1598285.599 ops/s
Iteration  25: 1600492.494 ops/s
Iteration  26: 1598860.424 ops/s
Iteration  27: 1602327.393 ops/s
Iteration  28: 1598989.653 ops/s
Iteration  29: 1595831.465 ops/s
Iteration  30: 1597882.164 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWhile":
  1598143.841 ±(99.9%) 2357.831 ops/s [Average]
  (min, avg, max) = (1591345.200, 1598143.841, 1603978.933), stdev = 3529.090
  CI (99.9%): [1595786.011, 1600501.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_partitionWhile  thrpt   30  1598143.841 ± 2357.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642061.955 ops/s
# Warmup Iteration   2: 1081174.696 ops/s
# Warmup Iteration   3: 1204657.724 ops/s
# Warmup Iteration   4: 1210768.808 ops/s
# Warmup Iteration   5: 1212533.502 ops/s
# Warmup Iteration   6: 1007242.557 ops/s
# Warmup Iteration   7: 1212865.505 ops/s
# Warmup Iteration   8: 1212403.685 ops/s
# Warmup Iteration   9: 1210219.241 ops/s
# Warmup Iteration  10: 1211932.285 ops/s
# Warmup Iteration  11: 1210067.476 ops/s
# Warmup Iteration  12: 1209243.760 ops/s
# Warmup Iteration  13: 1209354.859 ops/s
# Warmup Iteration  14: 1211822.494 ops/s
# Warmup Iteration  15: 1210476.651 ops/s
# Warmup Iteration  16: 1210163.167 ops/s
# Warmup Iteration  17: 1209428.007 ops/s
# Warmup Iteration  18: 1214463.410 ops/s
# Warmup Iteration  19: 1207764.205 ops/s
# Warmup Iteration  20: 1211989.798 ops/s
# Warmup Iteration  21: 1211705.732 ops/s
# Warmup Iteration  22: 1213443.914 ops/s
# Warmup Iteration  23: 1209407.917 ops/s
# Warmup Iteration  24: 1212793.214 ops/s
# Warmup Iteration  25: 1210511.053 ops/s
# Warmup Iteration  26: 1213271.802 ops/s
# Warmup Iteration  27: 1209174.180 ops/s
# Warmup Iteration  28: 1210360.999 ops/s
# Warmup Iteration  29: 1211831.163 ops/s
# Warmup Iteration  30: 1210956.955 ops/s
Iteration   1: 1207721.330 ops/s
Iteration   2: 1214294.108 ops/s
Iteration   3: 1211254.966 ops/s
Iteration   4: 1212625.141 ops/s
Iteration   5: 1214094.868 ops/s
Iteration   6: 1211256.778 ops/s
Iteration   7: 1211540.630 ops/s
Iteration   8: 1208631.218 ops/s
Iteration   9: 1210456.774 ops/s
Iteration  10: 1213799.754 ops/s
Iteration  11: 1210748.320 ops/s
Iteration  12: 1208735.364 ops/s
Iteration  13: 1214781.421 ops/s
Iteration  14: 1213331.005 ops/s
Iteration  15: 1215511.083 ops/s
Iteration  16: 1211247.502 ops/s
Iteration  17: 1204701.996 ops/s
Iteration  18: 1214843.608 ops/s
Iteration  19: 1212710.575 ops/s
Iteration  20: 1216205.858 ops/s
Iteration  21: 1207161.420 ops/s
Iteration  22: 1214882.611 ops/s
Iteration  23: 1207470.247 ops/s
Iteration  24: 1213847.731 ops/s
Iteration  25: 1211351.044 ops/s
Iteration  26: 1212052.103 ops/s
Iteration  27: 1214105.162 ops/s
Iteration  28: 1210781.095 ops/s
Iteration  29: 1212836.042 ops/s
Iteration  30: 1212495.351 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_partitionWith":
  1211849.170 ±(99.9%) 1852.949 ops/s [Average]
  (min, avg, max) = (1204701.996, 1211849.170, 1216205.858), stdev = 2773.407
  CI (99.9%): [1209996.221, 1213702.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_partitionWith  thrpt   30  1211849.170 ± 1852.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771652.004 ops/s
# Warmup Iteration   2: 805344.065 ops/s
# Warmup Iteration   3: 968631.858 ops/s
# Warmup Iteration   4: 1014536.825 ops/s
# Warmup Iteration   5: 1013141.148 ops/s
# Warmup Iteration   6: 1010740.344 ops/s
# Warmup Iteration   7: 1016891.464 ops/s
# Warmup Iteration   8: 1015736.063 ops/s
# Warmup Iteration   9: 1012154.429 ops/s
# Warmup Iteration  10: 1012565.854 ops/s
# Warmup Iteration  11: 1014073.245 ops/s
# Warmup Iteration  12: 1011603.712 ops/s
# Warmup Iteration  13: 912014.918 ops/s
# Warmup Iteration  14: 962942.605 ops/s
# Warmup Iteration  15: 1014101.040 ops/s
# Warmup Iteration  16: 1014546.056 ops/s
# Warmup Iteration  17: 1078022.119 ops/s
# Warmup Iteration  18: 1079165.181 ops/s
# Warmup Iteration  19: 1076476.870 ops/s
# Warmup Iteration  20: 1073203.332 ops/s
# Warmup Iteration  21: 1078255.035 ops/s
# Warmup Iteration  22: 1082128.783 ops/s
# Warmup Iteration  23: 1077354.913 ops/s
# Warmup Iteration  24: 1075782.967 ops/s
# Warmup Iteration  25: 1075168.130 ops/s
# Warmup Iteration  26: 1078264.719 ops/s
# Warmup Iteration  27: 1077204.933 ops/s
# Warmup Iteration  28: 1080734.890 ops/s
# Warmup Iteration  29: 1075423.891 ops/s
# Warmup Iteration  30: 1077122.106 ops/s
Iteration   1: 1081057.476 ops/s
Iteration   2: 1076952.386 ops/s
Iteration   3: 1077545.566 ops/s
Iteration   4: 1076892.347 ops/s
Iteration   5: 1082347.017 ops/s
Iteration   6: 1079440.822 ops/s
Iteration   7: 1072415.354 ops/s
Iteration   8: 1073268.796 ops/s
Iteration   9: 1075409.246 ops/s
Iteration  10: 1076571.655 ops/s
Iteration  11: 1076036.142 ops/s
Iteration  12: 1081924.086 ops/s
Iteration  13: 1076028.548 ops/s
Iteration  14: 1077247.277 ops/s
Iteration  15: 1073597.288 ops/s
Iteration  16: 1076415.702 ops/s
Iteration  17: 1074078.077 ops/s
Iteration  18: 1074391.081 ops/s
Iteration  19: 1074361.325 ops/s
Iteration  20: 1076201.135 ops/s
Iteration  21: 1076288.488 ops/s
Iteration  22: 1073063.620 ops/s
Iteration  23: 1076075.837 ops/s
Iteration  24: 1070207.449 ops/s
Iteration  25: 1080981.641 ops/s
Iteration  26: 1080920.505 ops/s
Iteration  27: 1077958.502 ops/s
Iteration  28: 1073545.019 ops/s
Iteration  29: 1074570.956 ops/s
Iteration  30: 1078435.014 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_randomAccess_throws":
  1076474.279 ±(99.9%) 1988.009 ops/s [Average]
  (min, avg, max) = (1070207.449, 1076474.279, 1082347.017), stdev = 2975.559
  CI (99.9%): [1074486.269, 1078462.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1076474.279 ± 1988.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1011447.092 ops/s
# Warmup Iteration   2: 2028508.925 ops/s
# Warmup Iteration   3: 2139281.832 ops/s
# Warmup Iteration   4: 2140451.471 ops/s
# Warmup Iteration   5: 1786035.744 ops/s
# Warmup Iteration   6: 2144526.719 ops/s
# Warmup Iteration   7: 2143004.385 ops/s
# Warmup Iteration   8: 2140073.260 ops/s
# Warmup Iteration   9: 2136291.316 ops/s
# Warmup Iteration  10: 2141966.625 ops/s
# Warmup Iteration  11: 2138337.700 ops/s
# Warmup Iteration  12: 2139088.110 ops/s
# Warmup Iteration  13: 2142612.319 ops/s
# Warmup Iteration  14: 2139461.419 ops/s
# Warmup Iteration  15: 2145052.382 ops/s
# Warmup Iteration  16: 2139630.327 ops/s
# Warmup Iteration  17: 2172311.873 ops/s
# Warmup Iteration  18: 2169285.911 ops/s
# Warmup Iteration  19: 2166581.253 ops/s
# Warmup Iteration  20: 2174116.772 ops/s
# Warmup Iteration  21: 2173085.604 ops/s
# Warmup Iteration  22: 2169053.786 ops/s
# Warmup Iteration  23: 2171885.523 ops/s
# Warmup Iteration  24: 2172323.225 ops/s
# Warmup Iteration  25: 2168869.016 ops/s
# Warmup Iteration  26: 2171183.003 ops/s
# Warmup Iteration  27: 2168276.542 ops/s
# Warmup Iteration  28: 2170680.223 ops/s
# Warmup Iteration  29: 2173506.630 ops/s
# Warmup Iteration  30: 2175934.912 ops/s
Iteration   1: 2176618.915 ops/s
Iteration   2: 2178103.534 ops/s
Iteration   3: 2175659.926 ops/s
Iteration   4: 2173080.961 ops/s
Iteration   5: 2184319.937 ops/s
Iteration   6: 2176571.716 ops/s
Iteration   7: 2171663.272 ops/s
Iteration   8: 2177549.568 ops/s
Iteration   9: 2173162.557 ops/s
Iteration  10: 2170109.405 ops/s
Iteration  11: 2177130.266 ops/s
Iteration  12: 2182537.534 ops/s
Iteration  13: 2180295.884 ops/s
Iteration  14: 2169609.159 ops/s
Iteration  15: 2181888.617 ops/s
Iteration  16: 2173545.441 ops/s
Iteration  17: 2171745.720 ops/s
Iteration  18: 2175891.132 ops/s
Iteration  19: 2173870.698 ops/s
Iteration  20: 2167161.203 ops/s
Iteration  21: 2176472.187 ops/s
Iteration  22: 2175268.356 ops/s
Iteration  23: 2165079.223 ops/s
Iteration  24: 2170817.327 ops/s
Iteration  25: 2175139.556 ops/s
Iteration  26: 2176095.782 ops/s
Iteration  27: 2175608.084 ops/s
Iteration  28: 2183892.740 ops/s
Iteration  29: 2176956.658 ops/s
Iteration  30: 2176363.143 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reduceOptional":
  2175406.950 ±(99.9%) 3019.436 ops/s [Average]
  (min, avg, max) = (2165079.223, 2175406.950, 2184319.937), stdev = 4519.350
  CI (99.9%): [2172387.514, 2178426.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_reduceOptional  thrpt   30  2175406.950 ± 3019.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1841357.975 ops/s
# Warmup Iteration   2: 4274987.804 ops/s
# Warmup Iteration   3: 3648988.603 ops/s
# Warmup Iteration   4: 4347259.396 ops/s
# Warmup Iteration   5: 4332357.552 ops/s
# Warmup Iteration   6: 4355306.316 ops/s
# Warmup Iteration   7: 4355872.617 ops/s
# Warmup Iteration   8: 4337507.773 ops/s
# Warmup Iteration   9: 4345888.983 ops/s
# Warmup Iteration  10: 4351381.348 ops/s
# Warmup Iteration  11: 4335525.779 ops/s
# Warmup Iteration  12: 4351918.960 ops/s
# Warmup Iteration  13: 4346761.265 ops/s
# Warmup Iteration  14: 4357742.355 ops/s
# Warmup Iteration  15: 4360376.445 ops/s
# Warmup Iteration  16: 4360546.196 ops/s
# Warmup Iteration  17: 4364319.582 ops/s
# Warmup Iteration  18: 4358254.854 ops/s
# Warmup Iteration  19: 4346902.211 ops/s
# Warmup Iteration  20: 4355190.790 ops/s
# Warmup Iteration  21: 4342721.322 ops/s
# Warmup Iteration  22: 4347741.616 ops/s
# Warmup Iteration  23: 4349407.825 ops/s
# Warmup Iteration  24: 4359130.581 ops/s
# Warmup Iteration  25: 4350693.018 ops/s
# Warmup Iteration  26: 4327577.131 ops/s
# Warmup Iteration  27: 4343612.637 ops/s
# Warmup Iteration  28: 4336529.856 ops/s
# Warmup Iteration  29: 4352542.045 ops/s
# Warmup Iteration  30: 4354933.802 ops/s
Iteration   1: 4356950.043 ops/s
Iteration   2: 4342329.404 ops/s
Iteration   3: 4360689.087 ops/s
Iteration   4: 4355507.910 ops/s
Iteration   5: 4352023.908 ops/s
Iteration   6: 4363405.035 ops/s
Iteration   7: 4346492.448 ops/s
Iteration   8: 4364315.148 ops/s
Iteration   9: 4349178.644 ops/s
Iteration  10: 4352611.041 ops/s
Iteration  11: 4352964.715 ops/s
Iteration  12: 4352624.338 ops/s
Iteration  13: 4368495.804 ops/s
Iteration  14: 4336420.982 ops/s
Iteration  15: 4343867.617 ops/s
Iteration  16: 4337859.000 ops/s
Iteration  17: 4340734.627 ops/s
Iteration  18: 4355130.410 ops/s
Iteration  19: 4357864.173 ops/s
Iteration  20: 4348796.195 ops/s
Iteration  21: 4354243.991 ops/s
Iteration  22: 4340315.324 ops/s
Iteration  23: 4355566.224 ops/s
Iteration  24: 4329450.763 ops/s
Iteration  25: 4334211.589 ops/s
Iteration  26: 4346440.808 ops/s
Iteration  27: 4360122.258 ops/s
Iteration  28: 4367804.729 ops/s
Iteration  29: 4344544.739 ops/s
Iteration  30: 4346645.008 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reject":
  4350586.865 ±(99.9%) 6611.688 ops/s [Average]
  (min, avg, max) = (4329450.763, 4350586.865, 4368495.804), stdev = 9896.064
  CI (99.9%): [4343975.177, 4357198.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_reject  thrpt   30  4350586.865 ± 6611.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1883729.309 ops/s
# Warmup Iteration   2: 4221064.421 ops/s
# Warmup Iteration   3: 3564443.217 ops/s
# Warmup Iteration   4: 4230155.386 ops/s
# Warmup Iteration   5: 4245700.797 ops/s
# Warmup Iteration   6: 4246838.888 ops/s
# Warmup Iteration   7: 4247333.606 ops/s
# Warmup Iteration   8: 4254351.760 ops/s
# Warmup Iteration   9: 4246407.599 ops/s
# Warmup Iteration  10: 4256552.083 ops/s
# Warmup Iteration  11: 4257501.646 ops/s
# Warmup Iteration  12: 4242446.181 ops/s
# Warmup Iteration  13: 4246063.932 ops/s
# Warmup Iteration  14: 4239378.904 ops/s
# Warmup Iteration  15: 4251131.603 ops/s
# Warmup Iteration  16: 4235580.228 ops/s
# Warmup Iteration  17: 4238450.167 ops/s
# Warmup Iteration  18: 4246811.968 ops/s
# Warmup Iteration  19: 4253769.363 ops/s
# Warmup Iteration  20: 4238976.693 ops/s
# Warmup Iteration  21: 4252012.943 ops/s
# Warmup Iteration  22: 4245590.843 ops/s
# Warmup Iteration  23: 4245862.827 ops/s
# Warmup Iteration  24: 4257661.743 ops/s
# Warmup Iteration  25: 4211421.288 ops/s
# Warmup Iteration  26: 4177543.413 ops/s
# Warmup Iteration  27: 4249964.469 ops/s
# Warmup Iteration  28: 4242105.148 ops/s
# Warmup Iteration  29: 4250028.351 ops/s
# Warmup Iteration  30: 4251110.294 ops/s
Iteration   1: 4270758.739 ops/s
Iteration   2: 4249502.633 ops/s
Iteration   3: 4232414.519 ops/s
Iteration   4: 4248312.499 ops/s
Iteration   5: 4242642.853 ops/s
Iteration   6: 4233056.247 ops/s
Iteration   7: 4266103.972 ops/s
Iteration   8: 4265661.781 ops/s
Iteration   9: 4251714.845 ops/s
Iteration  10: 4230519.482 ops/s
Iteration  11: 4253337.642 ops/s
Iteration  12: 4248060.552 ops/s
Iteration  13: 4252775.866 ops/s
Iteration  14: 4226000.872 ops/s
Iteration  15: 4255726.645 ops/s
Iteration  16: 4250717.381 ops/s
Iteration  17: 4240635.351 ops/s
Iteration  18: 4266028.059 ops/s
Iteration  19: 4233264.644 ops/s
Iteration  20: 4254254.446 ops/s
Iteration  21: 4251299.431 ops/s
Iteration  22: 4252435.094 ops/s
Iteration  23: 4240624.051 ops/s
Iteration  24: 4238292.710 ops/s
Iteration  25: 4248515.363 ops/s
Iteration  26: 4244397.659 ops/s
Iteration  27: 4235612.410 ops/s
Iteration  28: 4238766.892 ops/s
Iteration  29: 4253754.565 ops/s
Iteration  30: 4251163.672 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith":
  4247545.029 ±(99.9%) 7526.385 ops/s [Average]
  (min, avg, max) = (4226000.872, 4247545.029, 4270758.739), stdev = 11265.140
  CI (99.9%): [4240018.644, 4255071.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_rejectWith  thrpt   30  4247545.029 ± 7526.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1727330.155 ops/s
# Warmup Iteration   2: 4043124.940 ops/s
# Warmup Iteration   3: 3845486.473 ops/s
# Warmup Iteration   4: 3639627.201 ops/s
# Warmup Iteration   5: 4088314.184 ops/s
# Warmup Iteration   6: 4090771.183 ops/s
# Warmup Iteration   7: 4083876.196 ops/s
# Warmup Iteration   8: 4082674.690 ops/s
# Warmup Iteration   9: 4085670.326 ops/s
# Warmup Iteration  10: 4084390.068 ops/s
# Warmup Iteration  11: 4080813.777 ops/s
# Warmup Iteration  12: 4074437.731 ops/s
# Warmup Iteration  13: 4070245.378 ops/s
# Warmup Iteration  14: 4088615.500 ops/s
# Warmup Iteration  15: 4080305.177 ops/s
# Warmup Iteration  16: 4077625.182 ops/s
# Warmup Iteration  17: 4071652.484 ops/s
# Warmup Iteration  18: 4076886.120 ops/s
# Warmup Iteration  19: 4084426.423 ops/s
# Warmup Iteration  20: 4085604.384 ops/s
# Warmup Iteration  21: 4074199.721 ops/s
# Warmup Iteration  22: 4071336.474 ops/s
# Warmup Iteration  23: 4066107.794 ops/s
# Warmup Iteration  24: 4089991.459 ops/s
# Warmup Iteration  25: 4079770.452 ops/s
# Warmup Iteration  26: 4074786.235 ops/s
# Warmup Iteration  27: 4087729.562 ops/s
# Warmup Iteration  28: 4066579.933 ops/s
# Warmup Iteration  29: 4083605.777 ops/s
# Warmup Iteration  30: 4088430.113 ops/s
Iteration   1: 4080404.427 ops/s
Iteration   2: 4078480.863 ops/s
Iteration   3: 4077707.825 ops/s
Iteration   4: 4087001.463 ops/s
Iteration   5: 4085219.344 ops/s
Iteration   6: 4083746.421 ops/s
Iteration   7: 4081355.544 ops/s
Iteration   8: 4075767.506 ops/s
Iteration   9: 4071448.688 ops/s
Iteration  10: 4094046.356 ops/s
Iteration  11: 4093664.836 ops/s
Iteration  12: 4079817.966 ops/s
Iteration  13: 4078021.913 ops/s
Iteration  14: 4092876.355 ops/s
Iteration  15: 4087034.974 ops/s
Iteration  16: 4084049.860 ops/s
Iteration  17: 4068501.070 ops/s
Iteration  18: 4091989.884 ops/s
Iteration  19: 4068609.808 ops/s
Iteration  20: 4082406.662 ops/s
Iteration  21: 4083343.212 ops/s
Iteration  22: 4084927.793 ops/s
Iteration  23: 4084200.131 ops/s
Iteration  24: 4075953.694 ops/s
Iteration  25: 4077347.640 ops/s
Iteration  26: 4090034.981 ops/s
Iteration  27: 4089095.182 ops/s
Iteration  28: 4087153.496 ops/s
Iteration  29: 4072810.056 ops/s
Iteration  30: 4099045.933 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndex":
  4082868.796 ±(99.9%) 5116.440 ops/s [Average]
  (min, avg, max) = (4068501.070, 4082868.796, 4099045.933), stdev = 7658.048
  CI (99.9%): [4077752.356, 4087985.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  4082868.796 ± 5116.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2629645.085 ops/s
# Warmup Iteration   2: 6256934.925 ops/s
# Warmup Iteration   3: 5330727.509 ops/s
# Warmup Iteration   4: 6391895.490 ops/s
# Warmup Iteration   5: 6393806.849 ops/s
# Warmup Iteration   6: 6377925.117 ops/s
# Warmup Iteration   7: 6393053.305 ops/s
# Warmup Iteration   8: 6403888.590 ops/s
# Warmup Iteration   9: 6404278.494 ops/s
# Warmup Iteration  10: 6388955.249 ops/s
# Warmup Iteration  11: 6395213.814 ops/s
# Warmup Iteration  12: 6410606.074 ops/s
# Warmup Iteration  13: 6398811.535 ops/s
# Warmup Iteration  14: 6397219.304 ops/s
# Warmup Iteration  15: 6391751.456 ops/s
# Warmup Iteration  16: 6396049.938 ops/s
# Warmup Iteration  17: 6396471.299 ops/s
# Warmup Iteration  18: 6403871.417 ops/s
# Warmup Iteration  19: 6403876.630 ops/s
# Warmup Iteration  20: 6392385.789 ops/s
# Warmup Iteration  21: 6403410.496 ops/s
# Warmup Iteration  22: 6398343.485 ops/s
# Warmup Iteration  23: 6389218.496 ops/s
# Warmup Iteration  24: 6399341.454 ops/s
# Warmup Iteration  25: 6398448.813 ops/s
# Warmup Iteration  26: 6390047.970 ops/s
# Warmup Iteration  27: 6398941.353 ops/s
# Warmup Iteration  28: 6421108.406 ops/s
# Warmup Iteration  29: 6377090.903 ops/s
# Warmup Iteration  30: 6407642.516 ops/s
Iteration   1: 6398380.593 ops/s
Iteration   2: 6413059.616 ops/s
Iteration   3: 6391948.212 ops/s
Iteration   4: 6393562.864 ops/s
Iteration   5: 6383136.817 ops/s
Iteration   6: 6383226.427 ops/s
Iteration   7: 6366817.277 ops/s
Iteration   8: 6402151.878 ops/s
Iteration   9: 6390368.873 ops/s
Iteration  10: 6390373.448 ops/s
Iteration  11: 6404867.091 ops/s
Iteration  12: 6390115.773 ops/s
Iteration  13: 6393940.671 ops/s
Iteration  14: 6400244.537 ops/s
Iteration  15: 6406807.377 ops/s
Iteration  16: 6411572.795 ops/s
Iteration  17: 6407764.380 ops/s
Iteration  18: 6395711.148 ops/s
Iteration  19: 6405715.610 ops/s
Iteration  20: 6408537.438 ops/s
Iteration  21: 6399235.171 ops/s
Iteration  22: 6385955.588 ops/s
Iteration  23: 6394081.530 ops/s
Iteration  24: 6398206.258 ops/s
Iteration  25: 6416645.417 ops/s
Iteration  26: 6375135.405 ops/s
Iteration  27: 6397503.910 ops/s
Iteration  28: 6401195.955 ops/s
Iteration  29: 6389073.982 ops/s
Iteration  30: 6409123.023 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  6396815.302 ±(99.9%) 7542.912 ops/s [Average]
  (min, avg, max) = (6366817.277, 6396815.302, 6416645.417), stdev = 11289.876
  CI (99.9%): [6389272.390, 6404358.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  6396815.302 ± 7542.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1377321.408 ops/s
# Warmup Iteration   2: 3393550.122 ops/s
# Warmup Iteration   3: 2862036.181 ops/s
# Warmup Iteration   4: 3416242.656 ops/s
# Warmup Iteration   5: 3413770.346 ops/s
# Warmup Iteration   6: 3427468.778 ops/s
# Warmup Iteration   7: 3425889.505 ops/s
# Warmup Iteration   8: 3419114.631 ops/s
# Warmup Iteration   9: 3411056.880 ops/s
# Warmup Iteration  10: 3417712.284 ops/s
# Warmup Iteration  11: 3412972.281 ops/s
# Warmup Iteration  12: 3432856.602 ops/s
# Warmup Iteration  13: 3426253.597 ops/s
# Warmup Iteration  14: 3421191.439 ops/s
# Warmup Iteration  15: 3424545.812 ops/s
# Warmup Iteration  16: 3424024.540 ops/s
# Warmup Iteration  17: 3421945.464 ops/s
# Warmup Iteration  18: 3430322.544 ops/s
# Warmup Iteration  19: 3428472.059 ops/s
# Warmup Iteration  20: 3426088.397 ops/s
# Warmup Iteration  21: 3421188.699 ops/s
# Warmup Iteration  22: 3420388.018 ops/s
# Warmup Iteration  23: 3423218.992 ops/s
# Warmup Iteration  24: 3414664.331 ops/s
# Warmup Iteration  25: 3418604.239 ops/s
# Warmup Iteration  26: 3432262.172 ops/s
# Warmup Iteration  27: 3422449.898 ops/s
# Warmup Iteration  28: 3421209.270 ops/s
# Warmup Iteration  29: 3435574.938 ops/s
# Warmup Iteration  30: 3422904.593 ops/s
Iteration   1: 3425637.651 ops/s
Iteration   2: 3418544.151 ops/s
Iteration   3: 3432532.664 ops/s
Iteration   4: 3431068.460 ops/s
Iteration   5: 3417646.702 ops/s
Iteration   6: 3436504.974 ops/s
Iteration   7: 3425204.117 ops/s
Iteration   8: 3414561.459 ops/s
Iteration   9: 3421198.482 ops/s
Iteration  10: 3408880.769 ops/s
Iteration  11: 3426398.814 ops/s
Iteration  12: 3426405.551 ops/s
Iteration  13: 3421793.953 ops/s
Iteration  14: 3423114.487 ops/s
Iteration  15: 3425721.947 ops/s
Iteration  16: 3425469.982 ops/s
Iteration  17: 3413196.251 ops/s
Iteration  18: 3402834.507 ops/s
Iteration  19: 3382015.496 ops/s
Iteration  20: 3379940.286 ops/s
Iteration  21: 3427118.834 ops/s
Iteration  22: 3431539.934 ops/s
Iteration  23: 3429469.928 ops/s
Iteration  24: 3424028.347 ops/s
Iteration  25: 3421357.133 ops/s
Iteration  26: 3406239.304 ops/s
Iteration  27: 3434749.664 ops/s
Iteration  28: 3441949.642 ops/s
Iteration  29: 3426839.225 ops/s
Iteration  30: 3421986.868 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_rejectWith_target":
  3420798.319 ±(99.9%) 9226.973 ops/s [Average]
  (min, avg, max) = (3379940.286, 3420798.319, 3441949.642), stdev = 13810.500
  CI (99.9%): [3411571.346, 3430025.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3420798.319 ± 9226.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587244.179 ops/s
# Warmup Iteration   2: 1327258.432 ops/s
# Warmup Iteration   3: 1425703.551 ops/s
# Warmup Iteration   4: 1420819.495 ops/s
# Warmup Iteration   5: 1185058.321 ops/s
# Warmup Iteration   6: 1431878.137 ops/s
# Warmup Iteration   7: 1433072.313 ops/s
# Warmup Iteration   8: 1433467.928 ops/s
# Warmup Iteration   9: 1435766.334 ops/s
# Warmup Iteration  10: 1429670.832 ops/s
# Warmup Iteration  11: 1429898.300 ops/s
# Warmup Iteration  12: 1430933.758 ops/s
# Warmup Iteration  13: 1431139.565 ops/s
# Warmup Iteration  14: 1431844.957 ops/s
# Warmup Iteration  15: 1434904.553 ops/s
# Warmup Iteration  16: 1431370.948 ops/s
# Warmup Iteration  17: 1432704.092 ops/s
# Warmup Iteration  18: 1434764.091 ops/s
# Warmup Iteration  19: 1429762.851 ops/s
# Warmup Iteration  20: 1430705.852 ops/s
# Warmup Iteration  21: 1432477.241 ops/s
# Warmup Iteration  22: 1435273.561 ops/s
# Warmup Iteration  23: 1432047.416 ops/s
# Warmup Iteration  24: 1434032.215 ops/s
# Warmup Iteration  25: 1430195.665 ops/s
# Warmup Iteration  26: 1436249.488 ops/s
# Warmup Iteration  27: 1430903.124 ops/s
# Warmup Iteration  28: 1431471.902 ops/s
# Warmup Iteration  29: 1431476.830 ops/s
# Warmup Iteration  30: 1429319.263 ops/s
Iteration   1: 1439207.144 ops/s
Iteration   2: 1433678.578 ops/s
Iteration   3: 1426135.375 ops/s
Iteration   4: 1432694.757 ops/s
Iteration   5: 1427027.556 ops/s
Iteration   6: 1434044.008 ops/s
Iteration   7: 1430341.310 ops/s
Iteration   8: 1435096.466 ops/s
Iteration   9: 1433610.885 ops/s
Iteration  10: 1433284.452 ops/s
Iteration  11: 1430602.896 ops/s
Iteration  12: 1434964.345 ops/s
Iteration  13: 1433110.217 ops/s
Iteration  14: 1434883.144 ops/s
Iteration  15: 1435643.415 ops/s
Iteration  16: 1433056.275 ops/s
Iteration  17: 1431020.952 ops/s
Iteration  18: 1436648.043 ops/s
Iteration  19: 1429162.442 ops/s
Iteration  20: 1433502.282 ops/s
Iteration  21: 1436423.093 ops/s
Iteration  22: 1428728.103 ops/s
Iteration  23: 1430830.673 ops/s
Iteration  24: 1440609.866 ops/s
Iteration  25: 1432382.269 ops/s
Iteration  26: 1440467.702 ops/s
Iteration  27: 1431809.602 ops/s
Iteration  28: 1436408.277 ops/s
Iteration  29: 1431754.893 ops/s
Iteration  30: 1437489.432 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAll":
  1433487.282 ±(99.9%) 2365.676 ops/s [Average]
  (min, avg, max) = (1426135.375, 1433487.282, 1440609.866), stdev = 3540.833
  CI (99.9%): [1431121.606, 1435852.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removeAll  thrpt   30  1433487.282 ± 2365.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470772.678 ops/s
# Warmup Iteration   2: 947413.932 ops/s
# Warmup Iteration   3: 1073257.210 ops/s
# Warmup Iteration   4: 1079522.517 ops/s
# Warmup Iteration   5: 913724.969 ops/s
# Warmup Iteration   6: 1057054.934 ops/s
# Warmup Iteration   7: 1083531.142 ops/s
# Warmup Iteration   8: 1079980.430 ops/s
# Warmup Iteration   9: 1079320.939 ops/s
# Warmup Iteration  10: 1078959.521 ops/s
# Warmup Iteration  11: 1081469.393 ops/s
# Warmup Iteration  12: 1075752.851 ops/s
# Warmup Iteration  13: 1080153.223 ops/s
# Warmup Iteration  14: 1080703.795 ops/s
# Warmup Iteration  15: 1081575.877 ops/s
# Warmup Iteration  16: 1081378.869 ops/s
# Warmup Iteration  17: 1081226.624 ops/s
# Warmup Iteration  18: 1082047.669 ops/s
# Warmup Iteration  19: 1077029.004 ops/s
# Warmup Iteration  20: 1083634.802 ops/s
# Warmup Iteration  21: 1081650.710 ops/s
# Warmup Iteration  22: 1080944.382 ops/s
# Warmup Iteration  23: 1082534.750 ops/s
# Warmup Iteration  24: 1081289.115 ops/s
# Warmup Iteration  25: 1081254.151 ops/s
# Warmup Iteration  26: 1083718.965 ops/s
# Warmup Iteration  27: 1078636.798 ops/s
# Warmup Iteration  28: 1081646.067 ops/s
# Warmup Iteration  29: 1081982.188 ops/s
# Warmup Iteration  30: 1080898.503 ops/s
Iteration   1: 1079866.382 ops/s
Iteration   2: 1081103.871 ops/s
Iteration   3: 1079148.549 ops/s
Iteration   4: 1077051.055 ops/s
Iteration   5: 1083897.948 ops/s
Iteration   6: 1080619.623 ops/s
Iteration   7: 1078391.819 ops/s
Iteration   8: 1080187.912 ops/s
Iteration   9: 1078184.881 ops/s
Iteration  10: 1078703.606 ops/s
Iteration  11: 1079392.027 ops/s
Iteration  12: 1083192.467 ops/s
Iteration  13: 1080194.101 ops/s
Iteration  14: 1081643.932 ops/s
Iteration  15: 1081775.263 ops/s
Iteration  16: 1080695.617 ops/s
Iteration  17: 1079781.860 ops/s
Iteration  18: 1079746.280 ops/s
Iteration  19: 1082800.697 ops/s
Iteration  20: 1079413.992 ops/s
Iteration  21: 1079933.964 ops/s
Iteration  22: 1081175.748 ops/s
Iteration  23: 1080933.809 ops/s
Iteration  24: 1081986.180 ops/s
Iteration  25: 1081981.600 ops/s
Iteration  26: 1081376.465 ops/s
Iteration  27: 1079683.578 ops/s
Iteration  28: 1081869.554 ops/s
Iteration  29: 1077889.367 ops/s
Iteration  30: 1080645.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeAllIterable":
  1080442.246 ±(99.9%) 1065.034 ops/s [Average]
  (min, avg, max) = (1077051.055, 1080442.246, 1083897.948), stdev = 1594.093
  CI (99.9%): [1079377.212, 1081507.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1080442.246 ± 1065.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2623784.199 ops/s
# Warmup Iteration   2: 5417089.215 ops/s
# Warmup Iteration   3: 5738902.447 ops/s
# Warmup Iteration   4: 5768896.369 ops/s
# Warmup Iteration   5: 4763581.780 ops/s
# Warmup Iteration   6: 5771787.964 ops/s
# Warmup Iteration   7: 5786914.480 ops/s
# Warmup Iteration   8: 5774581.177 ops/s
# Warmup Iteration   9: 5770272.326 ops/s
# Warmup Iteration  10: 5787220.527 ops/s
# Warmup Iteration  11: 5767107.405 ops/s
# Warmup Iteration  12: 5795397.561 ops/s
# Warmup Iteration  13: 5780587.807 ops/s
# Warmup Iteration  14: 5781597.629 ops/s
# Warmup Iteration  15: 5771460.434 ops/s
# Warmup Iteration  16: 5777111.975 ops/s
# Warmup Iteration  17: 5773647.334 ops/s
# Warmup Iteration  18: 5778311.628 ops/s
# Warmup Iteration  19: 5773621.592 ops/s
# Warmup Iteration  20: 5771779.833 ops/s
# Warmup Iteration  21: 5777228.323 ops/s
# Warmup Iteration  22: 5785158.463 ops/s
# Warmup Iteration  23: 5769788.234 ops/s
# Warmup Iteration  24: 5782842.129 ops/s
# Warmup Iteration  25: 5774949.439 ops/s
# Warmup Iteration  26: 5794815.095 ops/s
# Warmup Iteration  27: 5778946.904 ops/s
# Warmup Iteration  28: 5770552.091 ops/s
# Warmup Iteration  29: 5776770.401 ops/s
# Warmup Iteration  30: 5776154.145 ops/s
Iteration   1: 5782538.565 ops/s
Iteration   2: 5786785.966 ops/s
Iteration   3: 5776400.627 ops/s
Iteration   4: 5751642.472 ops/s
Iteration   5: 5790811.910 ops/s
Iteration   6: 5745841.088 ops/s
Iteration   7: 5774563.803 ops/s
Iteration   8: 5785419.444 ops/s
Iteration   9: 5756989.045 ops/s
Iteration  10: 5785245.887 ops/s
Iteration  11: 5776355.770 ops/s
Iteration  12: 5771691.443 ops/s
Iteration  13: 5791639.541 ops/s
Iteration  14: 5775348.799 ops/s
Iteration  15: 5779850.273 ops/s
Iteration  16: 5783295.415 ops/s
Iteration  17: 5778702.706 ops/s
Iteration  18: 5775277.396 ops/s
Iteration  19: 5778839.891 ops/s
Iteration  20: 5786160.971 ops/s
Iteration  21: 5774228.396 ops/s
Iteration  22: 5742569.782 ops/s
Iteration  23: 5780130.474 ops/s
Iteration  24: 5783477.642 ops/s
Iteration  25: 5784022.637 ops/s
Iteration  26: 5770027.798 ops/s
Iteration  27: 5782829.549 ops/s
Iteration  28: 5773917.938 ops/s
Iteration  29: 5785738.496 ops/s
Iteration  30: 5796486.946 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIf":
  5776894.356 ±(99.9%) 8510.326 ops/s [Average]
  (min, avg, max) = (5742569.782, 5776894.356, 5796486.946), stdev = 12737.857
  CI (99.9%): [5768384.029, 5785404.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removeIf  thrpt   30  5776894.356 ± 8510.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 884693.613 ops/s
# Warmup Iteration   2: 1855910.509 ops/s
# Warmup Iteration   3: 1936075.210 ops/s
# Warmup Iteration   4: 1945586.719 ops/s
# Warmup Iteration   5: 1616280.454 ops/s
# Warmup Iteration   6: 1944543.425 ops/s
# Warmup Iteration   7: 1950218.522 ops/s
# Warmup Iteration   8: 1942322.357 ops/s
# Warmup Iteration   9: 1944157.145 ops/s
# Warmup Iteration  10: 1949421.261 ops/s
# Warmup Iteration  11: 1949719.227 ops/s
# Warmup Iteration  12: 1947910.432 ops/s
# Warmup Iteration  13: 1947218.884 ops/s
# Warmup Iteration  14: 1947245.452 ops/s
# Warmup Iteration  15: 1947912.468 ops/s
# Warmup Iteration  16: 1947993.162 ops/s
# Warmup Iteration  17: 1943792.541 ops/s
# Warmup Iteration  18: 1947992.802 ops/s
# Warmup Iteration  19: 1948596.439 ops/s
# Warmup Iteration  20: 1945930.673 ops/s
# Warmup Iteration  21: 1949377.194 ops/s
# Warmup Iteration  22: 1953185.944 ops/s
# Warmup Iteration  23: 1948256.457 ops/s
# Warmup Iteration  24: 1953978.150 ops/s
# Warmup Iteration  25: 1947871.539 ops/s
# Warmup Iteration  26: 1953120.203 ops/s
# Warmup Iteration  27: 1947693.381 ops/s
# Warmup Iteration  28: 1946506.743 ops/s
# Warmup Iteration  29: 1948198.965 ops/s
# Warmup Iteration  30: 1945742.978 ops/s
Iteration   1: 1946407.514 ops/s
Iteration   2: 1946191.679 ops/s
Iteration   3: 1942615.178 ops/s
Iteration   4: 1942744.621 ops/s
Iteration   5: 1947888.539 ops/s
Iteration   6: 1946990.309 ops/s
Iteration   7: 1944411.567 ops/s
Iteration   8: 1951776.718 ops/s
Iteration   9: 1952501.856 ops/s
Iteration  10: 1948544.101 ops/s
Iteration  11: 1949598.618 ops/s
Iteration  12: 1942922.108 ops/s
Iteration  13: 1952263.716 ops/s
Iteration  14: 1951673.729 ops/s
Iteration  15: 1953739.308 ops/s
Iteration  16: 1949963.052 ops/s
Iteration  17: 1946000.578 ops/s
Iteration  18: 1950994.192 ops/s
Iteration  19: 1946042.912 ops/s
Iteration  20: 1953081.048 ops/s
Iteration  21: 1946737.824 ops/s
Iteration  22: 1948196.843 ops/s
Iteration  23: 1937343.854 ops/s
Iteration  24: 1948542.524 ops/s
Iteration  25: 1943554.148 ops/s
Iteration  26: 1946874.602 ops/s
Iteration  27: 1941643.641 ops/s
Iteration  28: 1952325.333 ops/s
Iteration  29: 1953053.476 ops/s
Iteration  30: 1946304.397 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIfWith":
  1947697.599 ±(99.9%) 2695.017 ops/s [Average]
  (min, avg, max) = (1937343.854, 1947697.599, 1953739.308), stdev = 4033.775
  CI (99.9%): [1945002.583, 1950392.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removeIfWith  thrpt   30  1947697.599 ± 2695.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3760421.186 ops/s
# Warmup Iteration   2: 8737870.754 ops/s
# Warmup Iteration   3: 8552115.141 ops/s
# Warmup Iteration   4: 7158956.261 ops/s
# Warmup Iteration   5: 8565620.619 ops/s
# Warmup Iteration   6: 8576930.344 ops/s
# Warmup Iteration   7: 8563316.217 ops/s
# Warmup Iteration   8: 8576466.977 ops/s
# Warmup Iteration   9: 8583390.394 ops/s
# Warmup Iteration  10: 8576013.496 ops/s
# Warmup Iteration  11: 8575829.379 ops/s
# Warmup Iteration  12: 8558434.217 ops/s
# Warmup Iteration  13: 8571734.024 ops/s
# Warmup Iteration  14: 8560513.392 ops/s
# Warmup Iteration  15: 8573764.753 ops/s
# Warmup Iteration  16: 8583518.802 ops/s
# Warmup Iteration  17: 8555198.964 ops/s
# Warmup Iteration  18: 8550909.316 ops/s
# Warmup Iteration  19: 8550124.498 ops/s
# Warmup Iteration  20: 8560444.279 ops/s
# Warmup Iteration  21: 8555401.782 ops/s
# Warmup Iteration  22: 8571840.365 ops/s
# Warmup Iteration  23: 8554494.244 ops/s
# Warmup Iteration  24: 8582992.471 ops/s
# Warmup Iteration  25: 8567067.229 ops/s
# Warmup Iteration  26: 8568904.879 ops/s
# Warmup Iteration  27: 8567797.064 ops/s
# Warmup Iteration  28: 8565848.505 ops/s
# Warmup Iteration  29: 8582879.308 ops/s
# Warmup Iteration  30: 8571116.316 ops/s
Iteration   1: 8565047.539 ops/s
Iteration   2: 8550789.783 ops/s
Iteration   3: 8582499.168 ops/s
Iteration   4: 8571132.910 ops/s
Iteration   5: 8563811.837 ops/s
Iteration   6: 8579358.132 ops/s
Iteration   7: 8543294.987 ops/s
Iteration   8: 8578018.270 ops/s
Iteration   9: 8586431.683 ops/s
Iteration  10: 8580124.552 ops/s
Iteration  11: 8598099.482 ops/s
Iteration  12: 8577449.448 ops/s
Iteration  13: 8575071.493 ops/s
Iteration  14: 8586521.948 ops/s
Iteration  15: 8554484.825 ops/s
Iteration  16: 8581704.318 ops/s
Iteration  17: 8567600.031 ops/s
Iteration  18: 8576259.208 ops/s
Iteration  19: 8595785.743 ops/s
Iteration  20: 8589357.264 ops/s
Iteration  21: 8588877.487 ops/s
Iteration  22: 8548399.401 ops/s
Iteration  23: 8571363.285 ops/s
Iteration  24: 8582345.099 ops/s
Iteration  25: 8563793.019 ops/s
Iteration  26: 8583146.716 ops/s
Iteration  27: 8562628.411 ops/s
Iteration  28: 8582878.882 ops/s
Iteration  29: 8553146.843 ops/s
Iteration  30: 8589207.278 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeIndex":
  8574287.635 ±(99.9%) 9564.418 ops/s [Average]
  (min, avg, max) = (8543294.987, 8574287.635, 8598099.482), stdev = 14315.572
  CI (99.9%): [8564723.216, 8583852.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removeIndex  thrpt   30  8574287.635 ± 9564.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7763755.141 ops/s
# Warmup Iteration   2: 15998518.300 ops/s
# Warmup Iteration   3: 13393974.425 ops/s
# Warmup Iteration   4: 15819072.037 ops/s
# Warmup Iteration   5: 15802835.785 ops/s
# Warmup Iteration   6: 15813972.862 ops/s
# Warmup Iteration   7: 15769643.700 ops/s
# Warmup Iteration   8: 15801402.366 ops/s
# Warmup Iteration   9: 15812394.290 ops/s
# Warmup Iteration  10: 15797504.038 ops/s
# Warmup Iteration  11: 15801179.124 ops/s
# Warmup Iteration  12: 15786018.945 ops/s
# Warmup Iteration  13: 15833484.983 ops/s
# Warmup Iteration  14: 15844291.448 ops/s
# Warmup Iteration  15: 15817473.714 ops/s
# Warmup Iteration  16: 15798998.757 ops/s
# Warmup Iteration  17: 15806399.172 ops/s
# Warmup Iteration  18: 15858710.564 ops/s
# Warmup Iteration  19: 15822076.763 ops/s
# Warmup Iteration  20: 15818755.258 ops/s
# Warmup Iteration  21: 15775555.130 ops/s
# Warmup Iteration  22: 15830764.330 ops/s
# Warmup Iteration  23: 15863958.522 ops/s
# Warmup Iteration  24: 15814894.933 ops/s
# Warmup Iteration  25: 15782851.369 ops/s
# Warmup Iteration  26: 15832239.618 ops/s
# Warmup Iteration  27: 15822582.498 ops/s
# Warmup Iteration  28: 15871106.697 ops/s
# Warmup Iteration  29: 15847321.919 ops/s
# Warmup Iteration  30: 15842940.698 ops/s
Iteration   1: 15855071.802 ops/s
Iteration   2: 15797997.017 ops/s
Iteration   3: 15751315.131 ops/s
Iteration   4: 15733991.299 ops/s
Iteration   5: 15836158.475 ops/s
Iteration   6: 15726699.827 ops/s
Iteration   7: 15844585.900 ops/s
Iteration   8: 15837757.535 ops/s
Iteration   9: 15740973.662 ops/s
Iteration  10: 15842445.376 ops/s
Iteration  11: 15867004.052 ops/s
Iteration  12: 15828418.860 ops/s
Iteration  13: 15829212.732 ops/s
Iteration  14: 15898235.523 ops/s
Iteration  15: 15788170.463 ops/s
Iteration  16: 15864616.589 ops/s
Iteration  17: 15845865.047 ops/s
Iteration  18: 15833671.732 ops/s
Iteration  19: 15891482.248 ops/s
Iteration  20: 15880606.563 ops/s
Iteration  21: 15895713.404 ops/s
Iteration  22: 15826082.005 ops/s
Iteration  23: 15819654.054 ops/s
Iteration  24: 15860847.423 ops/s
Iteration  25: 15827467.339 ops/s
Iteration  26: 15850644.080 ops/s
Iteration  27: 15836556.299 ops/s
Iteration  28: 15844600.156 ops/s
Iteration  29: 15831389.690 ops/s
Iteration  30: 15815288.206 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removeObject":
  15830084.083 ±(99.9%) 29880.468 ops/s [Average]
  (min, avg, max) = (15726699.827, 15830084.083, 15898235.523), stdev = 44723.681
  CI (99.9%): [15800203.615, 15859964.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_removeObject  thrpt   30  15830084.083 ± 29880.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsCool$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsCool

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 857809.689 ops/s
# Warmup Iteration   2: 1798754.797 ops/s
# Warmup Iteration   3: 1869262.151 ops/s
# Warmup Iteration   4: 1875063.094 ops/s
# Warmup Iteration   5: 1549979.877 ops/s
# Warmup Iteration   6: 1869953.316 ops/s
# Warmup Iteration   7: 1882612.030 ops/s
# Warmup Iteration   8: 1871189.407 ops/s
# Warmup Iteration   9: 1879077.002 ops/s
# Warmup Iteration  10: 1874677.579 ops/s
# Warmup Iteration  11: 1880238.973 ops/s
# Warmup Iteration  12: 1873079.606 ops/s
# Warmup Iteration  13: 1881544.864 ops/s
# Warmup Iteration  14: 1879207.243 ops/s
# Warmup Iteration  15: 1876216.491 ops/s
# Warmup Iteration  16: 1880141.601 ops/s
# Warmup Iteration  17: 1881165.845 ops/s
# Warmup Iteration  18: 1879912.485 ops/s
# Warmup Iteration  19: 1879359.976 ops/s
# Warmup Iteration  20: 1877530.123 ops/s
# Warmup Iteration  21: 1878641.504 ops/s
# Warmup Iteration  22: 1871937.168 ops/s
# Warmup Iteration  23: 1873341.510 ops/s
# Warmup Iteration  24: 1877416.104 ops/s
# Warmup Iteration  25: 1879852.105 ops/s
# Warmup Iteration  26: 1880512.478 ops/s
# Warmup Iteration  27: 1881239.386 ops/s
# Warmup Iteration  28: 1881646.466 ops/s
# Warmup Iteration  29: 1875546.641 ops/s
# Warmup Iteration  30: 1882531.243 ops/s
Iteration   1: 1875757.490 ops/s
Iteration   2: 1875993.576 ops/s
Iteration   3: 1876828.223 ops/s
Iteration   4: 1884361.955 ops/s
Iteration   5: 1874082.987 ops/s
Iteration   6: 1880958.079 ops/s
Iteration   7: 1877409.854 ops/s
Iteration   8: 1881401.178 ops/s
Iteration   9: 1875558.175 ops/s
Iteration  10: 1880565.716 ops/s
Iteration  11: 1875898.522 ops/s
Iteration  12: 1878647.225 ops/s
Iteration  13: 1878891.998 ops/s
Iteration  14: 1881514.018 ops/s
Iteration  15: 1881358.714 ops/s
Iteration  16: 1884820.850 ops/s
Iteration  17: 1879739.322 ops/s
Iteration  18: 1877191.883 ops/s
Iteration  19: 1880296.200 ops/s
Iteration  20: 1883037.866 ops/s
Iteration  21: 1882872.285 ops/s
Iteration  22: 1880849.279 ops/s
Iteration  23: 1883407.074 ops/s
Iteration  24: 1882511.499 ops/s
Iteration  25: 1878953.609 ops/s
Iteration  26: 1886186.800 ops/s
Iteration  27: 1884001.027 ops/s
Iteration  28: 1881739.985 ops/s
Iteration  29: 1877359.693 ops/s
Iteration  30: 1879965.486 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsCool":
  1880072.019 ±(99.9%) 2092.362 ops/s [Average]
  (min, avg, max) = (1874082.987, 1880072.019, 1886186.800), stdev = 3131.749
  CI (99.9%): [1877979.657, 1882164.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsCool  thrpt   30  1880072.019 ± 2092.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsUncoolFromEmptyIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsUncoolFromEmptyIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 808838.945 ops/s
# Warmup Iteration   2: 833810.394 ops/s
# Warmup Iteration   3: 994805.890 ops/s
# Warmup Iteration   4: 1070295.254 ops/s
# Warmup Iteration   5: 1066918.901 ops/s
# Warmup Iteration   6: 1063248.174 ops/s
# Warmup Iteration   7: 1062480.155 ops/s
# Warmup Iteration   8: 1066053.752 ops/s
# Warmup Iteration   9: 1063881.179 ops/s
# Warmup Iteration  10: 1062568.987 ops/s
# Warmup Iteration  11: 1064311.401 ops/s
# Warmup Iteration  12: 1060606.634 ops/s
# Warmup Iteration  13: 1057632.247 ops/s
# Warmup Iteration  14: 907565.645 ops/s
# Warmup Iteration  15: 1064228.209 ops/s
# Warmup Iteration  16: 1067267.347 ops/s
# Warmup Iteration  17: 1132107.025 ops/s
# Warmup Iteration  18: 1134268.790 ops/s
# Warmup Iteration  19: 1131733.205 ops/s
# Warmup Iteration  20: 1136751.944 ops/s
# Warmup Iteration  21: 1131941.380 ops/s
# Warmup Iteration  22: 1133620.757 ops/s
# Warmup Iteration  23: 1134443.660 ops/s
# Warmup Iteration  24: 1133582.384 ops/s
# Warmup Iteration  25: 1133220.019 ops/s
# Warmup Iteration  26: 1137606.182 ops/s
# Warmup Iteration  27: 1134930.064 ops/s
# Warmup Iteration  28: 1135061.612 ops/s
# Warmup Iteration  29: 1133269.023 ops/s
# Warmup Iteration  30: 1137044.617 ops/s
Iteration   1: 1135529.017 ops/s
Iteration   2: 1136094.449 ops/s
Iteration   3: 1132639.178 ops/s
Iteration   4: 1133286.171 ops/s
Iteration   5: 1134247.501 ops/s
Iteration   6: 1135817.084 ops/s
Iteration   7: 1140785.628 ops/s
Iteration   8: 1135225.174 ops/s
Iteration   9: 1136252.762 ops/s
Iteration  10: 1136187.465 ops/s
Iteration  11: 1136123.906 ops/s
Iteration  12: 1134312.342 ops/s
Iteration  13: 1131149.180 ops/s
Iteration  14: 1131777.625 ops/s
Iteration  15: 1133375.986 ops/s
Iteration  16: 1134767.084 ops/s
Iteration  17: 1139582.060 ops/s
Iteration  18: 1132932.402 ops/s
Iteration  19: 1131320.444 ops/s
Iteration  20: 1133534.366 ops/s
Iteration  21: 1135081.098 ops/s
Iteration  22: 1128376.281 ops/s
Iteration  23: 1139938.134 ops/s
Iteration  24: 1137148.450 ops/s
Iteration  25: 1133729.591 ops/s
Iteration  26: 1139843.432 ops/s
Iteration  27: 1133009.296 ops/s
Iteration  28: 1138369.623 ops/s
Iteration  29: 1137529.432 ops/s
Iteration  30: 1135859.677 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsUncoolFromEmptyIterator":
  1135127.495 ±(99.9%) 1914.971 ops/s [Average]
  (min, avg, max) = (1128376.281, 1135127.495, 1140785.628), stdev = 2866.238
  CI (99.9%): [1133212.524, 1137042.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_removingFromIteratorIsUncoolFromEmptyIterator  thrpt   30  1135127.495 ± 1914.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3203037.673 ops/s
# Warmup Iteration   2: 7471202.105 ops/s
# Warmup Iteration   3: 7554793.774 ops/s
# Warmup Iteration   4: 6289581.084 ops/s
# Warmup Iteration   5: 7537908.076 ops/s
# Warmup Iteration   6: 7546058.613 ops/s
# Warmup Iteration   7: 7494278.053 ops/s
# Warmup Iteration   8: 7484892.017 ops/s
# Warmup Iteration   9: 7557959.742 ops/s
# Warmup Iteration  10: 7562951.570 ops/s
# Warmup Iteration  11: 7566023.613 ops/s
# Warmup Iteration  12: 7556698.973 ops/s
# Warmup Iteration  13: 7547232.119 ops/s
# Warmup Iteration  14: 7564087.127 ops/s
# Warmup Iteration  15: 7549795.470 ops/s
# Warmup Iteration  16: 7555760.632 ops/s
# Warmup Iteration  17: 7479121.580 ops/s
# Warmup Iteration  18: 7538399.771 ops/s
# Warmup Iteration  19: 7557616.752 ops/s
# Warmup Iteration  20: 7536530.404 ops/s
# Warmup Iteration  21: 7518006.319 ops/s
# Warmup Iteration  22: 7563385.240 ops/s
# Warmup Iteration  23: 7566207.453 ops/s
# Warmup Iteration  24: 7554795.625 ops/s
# Warmup Iteration  25: 7560859.190 ops/s
# Warmup Iteration  26: 7562985.045 ops/s
# Warmup Iteration  27: 7561180.807 ops/s
# Warmup Iteration  28: 7564599.621 ops/s
# Warmup Iteration  29: 7566988.990 ops/s
# Warmup Iteration  30: 7514513.424 ops/s
Iteration   1: 7534133.504 ops/s
Iteration   2: 7568565.265 ops/s
Iteration   3: 7560596.529 ops/s
Iteration   4: 7542986.357 ops/s
Iteration   5: 7570059.966 ops/s
Iteration   6: 7565388.777 ops/s
Iteration   7: 7536632.726 ops/s
Iteration   8: 7577612.257 ops/s
Iteration   9: 7565208.154 ops/s
Iteration  10: 7517150.801 ops/s
Iteration  11: 7551971.798 ops/s
Iteration  12: 7552333.639 ops/s
Iteration  13: 7540544.721 ops/s
Iteration  14: 7530336.748 ops/s
Iteration  15: 7537404.561 ops/s
Iteration  16: 7565181.320 ops/s
Iteration  17: 7548805.176 ops/s
Iteration  18: 7543320.958 ops/s
Iteration  19: 7577409.495 ops/s
Iteration  20: 7556055.987 ops/s
Iteration  21: 7577574.572 ops/s
Iteration  22: 7550852.948 ops/s
Iteration  23: 7571358.301 ops/s
Iteration  24: 7568144.114 ops/s
Iteration  25: 7551527.379 ops/s
Iteration  26: 7552329.614 ops/s
Iteration  27: 7544346.251 ops/s
Iteration  28: 7562625.673 ops/s
Iteration  29: 7544836.010 ops/s
Iteration  30: 7552613.171 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_replaceAll":
  7553930.226 ±(99.9%) 10134.542 ops/s [Average]
  (min, avg, max) = (7517150.801, 7553930.226, 7577612.257), stdev = 15168.906
  CI (99.9%): [7543795.684, 7564064.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_replaceAll  thrpt   30  7553930.226 ± 10134.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281038.206 ops/s
# Warmup Iteration   2: 732247.151 ops/s
# Warmup Iteration   3: 879406.630 ops/s
# Warmup Iteration   4: 890266.361 ops/s
# Warmup Iteration   5: 739424.893 ops/s
# Warmup Iteration   6: 884994.238 ops/s
# Warmup Iteration   7: 888106.259 ops/s
# Warmup Iteration   8: 886398.754 ops/s
# Warmup Iteration   9: 889326.221 ops/s
# Warmup Iteration  10: 884220.400 ops/s
# Warmup Iteration  11: 892817.012 ops/s
# Warmup Iteration  12: 887771.326 ops/s
# Warmup Iteration  13: 885263.857 ops/s
# Warmup Iteration  14: 887024.069 ops/s
# Warmup Iteration  15: 885958.617 ops/s
# Warmup Iteration  16: 886994.464 ops/s
# Warmup Iteration  17: 890317.575 ops/s
# Warmup Iteration  18: 887903.361 ops/s
# Warmup Iteration  19: 887042.860 ops/s
# Warmup Iteration  20: 889816.786 ops/s
# Warmup Iteration  21: 889021.580 ops/s
# Warmup Iteration  22: 889719.617 ops/s
# Warmup Iteration  23: 889870.762 ops/s
# Warmup Iteration  24: 885973.255 ops/s
# Warmup Iteration  25: 891305.966 ops/s
# Warmup Iteration  26: 890346.797 ops/s
# Warmup Iteration  27: 890244.294 ops/s
# Warmup Iteration  28: 889831.881 ops/s
# Warmup Iteration  29: 889423.730 ops/s
# Warmup Iteration  30: 887703.767 ops/s
Iteration   1: 891393.936 ops/s
Iteration   2: 888771.456 ops/s
Iteration   3: 884649.928 ops/s
Iteration   4: 887989.930 ops/s
Iteration   5: 886943.111 ops/s
Iteration   6: 886806.562 ops/s
Iteration   7: 896112.727 ops/s
Iteration   8: 884704.763 ops/s
Iteration   9: 882801.016 ops/s
Iteration  10: 884709.723 ops/s
Iteration  11: 890504.775 ops/s
Iteration  12: 889522.655 ops/s
Iteration  13: 885973.221 ops/s
Iteration  14: 888513.447 ops/s
Iteration  15: 889902.708 ops/s
Iteration  16: 886603.096 ops/s
Iteration  17: 886333.563 ops/s
Iteration  18: 890831.265 ops/s
Iteration  19: 890587.313 ops/s
Iteration  20: 887303.850 ops/s
Iteration  21: 886572.779 ops/s
Iteration  22: 891531.211 ops/s
Iteration  23: 887992.385 ops/s
Iteration  24: 886239.938 ops/s
Iteration  25: 891777.355 ops/s
Iteration  26: 888186.075 ops/s
Iteration  27: 892547.890 ops/s
Iteration  28: 888341.499 ops/s
Iteration  29: 890041.781 ops/s
Iteration  30: 888322.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAll":
  888417.076 ±(99.9%) 1876.128 ops/s [Average]
  (min, avg, max) = (882801.016, 888417.076, 896112.727), stdev = 2808.100
  CI (99.9%): [886540.947, 890293.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_retainAll  thrpt   30  888417.076 ± 1876.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518071.160 ops/s
# Warmup Iteration   2: 953302.581 ops/s
# Warmup Iteration   3: 1120075.488 ops/s
# Warmup Iteration   4: 1124112.130 ops/s
# Warmup Iteration   5: 1125720.266 ops/s
# Warmup Iteration   6: 932451.054 ops/s
# Warmup Iteration   7: 1125120.406 ops/s
# Warmup Iteration   8: 1123841.049 ops/s
# Warmup Iteration   9: 1121599.654 ops/s
# Warmup Iteration  10: 1121960.406 ops/s
# Warmup Iteration  11: 1121933.319 ops/s
# Warmup Iteration  12: 1119502.590 ops/s
# Warmup Iteration  13: 1124414.643 ops/s
# Warmup Iteration  14: 1122612.119 ops/s
# Warmup Iteration  15: 1124856.029 ops/s
# Warmup Iteration  16: 1123257.931 ops/s
# Warmup Iteration  17: 1126780.078 ops/s
# Warmup Iteration  18: 1127316.551 ops/s
# Warmup Iteration  19: 1124481.428 ops/s
# Warmup Iteration  20: 1126895.463 ops/s
# Warmup Iteration  21: 1127405.936 ops/s
# Warmup Iteration  22: 1127169.368 ops/s
# Warmup Iteration  23: 1126887.532 ops/s
# Warmup Iteration  24: 1129050.421 ops/s
# Warmup Iteration  25: 1127017.385 ops/s
# Warmup Iteration  26: 1126484.191 ops/s
# Warmup Iteration  27: 1127111.200 ops/s
# Warmup Iteration  28: 1125045.329 ops/s
# Warmup Iteration  29: 1125368.949 ops/s
# Warmup Iteration  30: 1126190.484 ops/s
Iteration   1: 1127852.965 ops/s
Iteration   2: 1125344.912 ops/s
Iteration   3: 1127534.341 ops/s
Iteration   4: 1126893.537 ops/s
Iteration   5: 1123130.670 ops/s
Iteration   6: 1125402.853 ops/s
Iteration   7: 1125691.836 ops/s
Iteration   8: 1127773.172 ops/s
Iteration   9: 1129690.343 ops/s
Iteration  10: 1129973.707 ops/s
Iteration  11: 1127923.036 ops/s
Iteration  12: 1124413.331 ops/s
Iteration  13: 1131748.492 ops/s
Iteration  14: 1121070.436 ops/s
Iteration  15: 1123567.880 ops/s
Iteration  16: 1126720.312 ops/s
Iteration  17: 1121886.498 ops/s
Iteration  18: 1124417.605 ops/s
Iteration  19: 1128607.801 ops/s
Iteration  20: 1125171.287 ops/s
Iteration  21: 1128947.119 ops/s
Iteration  22: 1126346.486 ops/s
Iteration  23: 1122375.464 ops/s
Iteration  24: 1126518.330 ops/s
Iteration  25: 1126635.634 ops/s
Iteration  26: 1127943.057 ops/s
Iteration  27: 1127218.482 ops/s
Iteration  28: 1125285.514 ops/s
Iteration  29: 1126017.582 ops/s
Iteration  30: 1122265.971 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_retainAllIterable":
  1126145.622 ±(99.9%) 1695.907 ops/s [Average]
  (min, avg, max) = (1121070.436, 1126145.622, 1131748.492), stdev = 2538.353
  CI (99.9%): [1124449.715, 1127841.528] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1126145.622 ± 1695.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4134902.280 ops/s
# Warmup Iteration   2: 11419758.643 ops/s
# Warmup Iteration   3: 9986150.114 ops/s
# Warmup Iteration   4: 11885190.170 ops/s
# Warmup Iteration   5: 11869417.192 ops/s
# Warmup Iteration   6: 11901447.355 ops/s
# Warmup Iteration   7: 11887001.013 ops/s
# Warmup Iteration   8: 11841571.430 ops/s
# Warmup Iteration   9: 11864165.638 ops/s
# Warmup Iteration  10: 11857778.103 ops/s
# Warmup Iteration  11: 11833905.014 ops/s
# Warmup Iteration  12: 11878759.251 ops/s
# Warmup Iteration  13: 11869606.289 ops/s
# Warmup Iteration  14: 11839902.694 ops/s
# Warmup Iteration  15: 11878984.524 ops/s
# Warmup Iteration  16: 11867654.175 ops/s
# Warmup Iteration  17: 11783959.465 ops/s
# Warmup Iteration  18: 11821243.205 ops/s
# Warmup Iteration  19: 11875544.404 ops/s
# Warmup Iteration  20: 11864004.116 ops/s
# Warmup Iteration  21: 11883683.250 ops/s
# Warmup Iteration  22: 11866549.553 ops/s
# Warmup Iteration  23: 11877161.097 ops/s
# Warmup Iteration  24: 11888799.574 ops/s
# Warmup Iteration  25: 11895426.051 ops/s
# Warmup Iteration  26: 11828597.930 ops/s
# Warmup Iteration  27: 11795253.974 ops/s
# Warmup Iteration  28: 11825075.173 ops/s
# Warmup Iteration  29: 11795807.082 ops/s
# Warmup Iteration  30: 11866810.687 ops/s
Iteration   1: 11816358.361 ops/s
Iteration   2: 11785853.259 ops/s
Iteration   3: 11867187.127 ops/s
Iteration   4: 11818161.007 ops/s
Iteration   5: 11878964.563 ops/s
Iteration   6: 11882720.164 ops/s
Iteration   7: 11866500.461 ops/s
Iteration   8: 11857553.388 ops/s
Iteration   9: 11857728.185 ops/s
Iteration  10: 11870859.253 ops/s
Iteration  11: 11890385.702 ops/s
Iteration  12: 11865390.985 ops/s
Iteration  13: 11866464.312 ops/s
Iteration  14: 11874229.659 ops/s
Iteration  15: 11844059.798 ops/s
Iteration  16: 11820286.762 ops/s
Iteration  17: 11921420.339 ops/s
Iteration  18: 11844576.350 ops/s
Iteration  19: 11856808.831 ops/s
Iteration  20: 11828475.126 ops/s
Iteration  21: 11876132.690 ops/s
Iteration  22: 11839809.717 ops/s
Iteration  23: 11877334.624 ops/s
Iteration  24: 11857919.926 ops/s
Iteration  25: 11892326.638 ops/s
Iteration  26: 11866469.783 ops/s
Iteration  27: 11890196.899 ops/s
Iteration  28: 11788412.838 ops/s
Iteration  29: 11883301.803 ops/s
Iteration  30: 11833132.310 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach":
  11857300.695 ±(99.9%) 20550.088 ops/s [Average]
  (min, avg, max) = (11785853.259, 11857300.695, 11921420.339), stdev = 30758.407
  CI (99.9%): [11836750.607, 11877850.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_reverseForEach  thrpt   30  11857300.695 ± 20550.088  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 989692.112 ops/s
# Warmup Iteration   2: 2614432.934 ops/s
# Warmup Iteration   3: 2662587.506 ops/s
# Warmup Iteration   4: 2195130.121 ops/s
# Warmup Iteration   5: 2651380.244 ops/s
# Warmup Iteration   6: 2666389.599 ops/s
# Warmup Iteration   7: 2658487.266 ops/s
# Warmup Iteration   8: 2662439.492 ops/s
# Warmup Iteration   9: 2664353.848 ops/s
# Warmup Iteration  10: 2658460.395 ops/s
# Warmup Iteration  11: 2659090.542 ops/s
# Warmup Iteration  12: 2655617.305 ops/s
# Warmup Iteration  13: 2665108.225 ops/s
# Warmup Iteration  14: 2651218.926 ops/s
# Warmup Iteration  15: 2654368.338 ops/s
# Warmup Iteration  16: 2645969.968 ops/s
# Warmup Iteration  17: 2652435.041 ops/s
# Warmup Iteration  18: 2650968.385 ops/s
# Warmup Iteration  19: 2651298.388 ops/s
# Warmup Iteration  20: 2659974.520 ops/s
# Warmup Iteration  21: 2644049.326 ops/s
# Warmup Iteration  22: 2659511.918 ops/s
# Warmup Iteration  23: 2658773.289 ops/s
# Warmup Iteration  24: 2658792.760 ops/s
# Warmup Iteration  25: 2660692.638 ops/s
# Warmup Iteration  26: 2654167.805 ops/s
# Warmup Iteration  27: 2658247.483 ops/s
# Warmup Iteration  28: 2656489.532 ops/s
# Warmup Iteration  29: 2663795.644 ops/s
# Warmup Iteration  30: 2662147.422 ops/s
Iteration   1: 2664510.343 ops/s
Iteration   2: 2654636.649 ops/s
Iteration   3: 2657731.773 ops/s
Iteration   4: 2656338.667 ops/s
Iteration   5: 2656155.584 ops/s
Iteration   6: 2635870.583 ops/s
Iteration   7: 2652394.317 ops/s
Iteration   8: 2655003.315 ops/s
Iteration   9: 2662668.825 ops/s
Iteration  10: 2658895.102 ops/s
Iteration  11: 2655637.244 ops/s
Iteration  12: 2647187.295 ops/s
Iteration  13: 2652662.405 ops/s
Iteration  14: 2655394.691 ops/s
Iteration  15: 2655686.931 ops/s
Iteration  16: 2662245.223 ops/s
Iteration  17: 2650493.240 ops/s
Iteration  18: 2664146.692 ops/s
Iteration  19: 2658771.135 ops/s
Iteration  20: 2659561.909 ops/s
Iteration  21: 2654835.326 ops/s
Iteration  22: 2669688.494 ops/s
Iteration  23: 2660193.476 ops/s
Iteration  24: 2656636.070 ops/s
Iteration  25: 2666661.046 ops/s
Iteration  26: 2668523.615 ops/s
Iteration  27: 2661642.724 ops/s
Iteration  28: 2659821.887 ops/s
Iteration  29: 2650076.678 ops/s
Iteration  30: 2655662.167 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex":
  2657324.447 ±(99.9%) 4475.254 ops/s [Average]
  (min, avg, max) = (2635870.583, 2657324.447, 2669688.494), stdev = 6698.350
  CI (99.9%): [2652849.193, 2661799.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  2657324.447 ± 4475.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56834289.744 ops/s
# Warmup Iteration   2: 113904811.625 ops/s
# Warmup Iteration   3: 100312459.631 ops/s
# Warmup Iteration   4: 117316289.920 ops/s
# Warmup Iteration   5: 116014730.707 ops/s
# Warmup Iteration   6: 114736699.291 ops/s
# Warmup Iteration   7: 117403350.443 ops/s
# Warmup Iteration   8: 116956632.035 ops/s
# Warmup Iteration   9: 117573259.891 ops/s
# Warmup Iteration  10: 117358020.914 ops/s
# Warmup Iteration  11: 117440866.053 ops/s
# Warmup Iteration  12: 117496058.969 ops/s
# Warmup Iteration  13: 117184639.194 ops/s
# Warmup Iteration  14: 117351960.114 ops/s
# Warmup Iteration  15: 117396727.399 ops/s
# Warmup Iteration  16: 117048334.930 ops/s
# Warmup Iteration  17: 117660656.693 ops/s
# Warmup Iteration  18: 118113183.757 ops/s
# Warmup Iteration  19: 117995984.504 ops/s
# Warmup Iteration  20: 117841749.931 ops/s
# Warmup Iteration  21: 117833060.420 ops/s
# Warmup Iteration  22: 117639110.031 ops/s
# Warmup Iteration  23: 117620627.038 ops/s
# Warmup Iteration  24: 117717153.953 ops/s
# Warmup Iteration  25: 117995672.079 ops/s
# Warmup Iteration  26: 118033720.626 ops/s
# Warmup Iteration  27: 117544955.792 ops/s
# Warmup Iteration  28: 117817602.522 ops/s
# Warmup Iteration  29: 117908296.228 ops/s
# Warmup Iteration  30: 118063633.468 ops/s
Iteration   1: 117743521.066 ops/s
Iteration   2: 117862785.780 ops/s
Iteration   3: 117805125.755 ops/s
Iteration   4: 117455943.081 ops/s
Iteration   5: 117646935.492 ops/s
Iteration   6: 117828851.549 ops/s
Iteration   7: 118026901.628 ops/s
Iteration   8: 117501262.811 ops/s
Iteration   9: 117526861.084 ops/s
Iteration  10: 116942223.150 ops/s
Iteration  11: 117773993.703 ops/s
Iteration  12: 117477540.640 ops/s
Iteration  13: 117800863.556 ops/s
Iteration  14: 117702479.558 ops/s
Iteration  15: 117469423.171 ops/s
Iteration  16: 117371045.190 ops/s
Iteration  17: 117991393.139 ops/s
Iteration  18: 117612612.915 ops/s
Iteration  19: 117326436.331 ops/s
Iteration  20: 117519760.421 ops/s
Iteration  21: 117358433.691 ops/s
Iteration  22: 117679892.414 ops/s
Iteration  23: 117748905.864 ops/s
Iteration  24: 117549752.403 ops/s
Iteration  25: 117801554.842 ops/s
Iteration  26: 116719945.678 ops/s
Iteration  27: 117710706.228 ops/s
Iteration  28: 118079590.976 ops/s
Iteration  29: 117726016.449 ops/s
Iteration  30: 117039654.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  117593347.103 ±(99.9%) 204337.074 ops/s [Average]
  (min, avg, max) = (116719945.678, 117593347.103, 118079590.976), stdev = 305842.137
  CI (99.9%): [117389010.029, 117797684.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt          Score        Error  Units
CompositeFastListTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  117593347.103 ± 204337.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35249430.024 ops/s
# Warmup Iteration   2: 68612015.539 ops/s
# Warmup Iteration   3: 63579087.448 ops/s
# Warmup Iteration   4: 74758293.519 ops/s
# Warmup Iteration   5: 74754752.096 ops/s
# Warmup Iteration   6: 74558084.896 ops/s
# Warmup Iteration   7: 74765414.367 ops/s
# Warmup Iteration   8: 74754197.054 ops/s
# Warmup Iteration   9: 74638763.836 ops/s
# Warmup Iteration  10: 74677921.749 ops/s
# Warmup Iteration  11: 74815677.966 ops/s
# Warmup Iteration  12: 74557469.342 ops/s
# Warmup Iteration  13: 74028288.596 ops/s
# Warmup Iteration  14: 74631979.076 ops/s
# Warmup Iteration  15: 74618957.253 ops/s
# Warmup Iteration  16: 74093336.823 ops/s
# Warmup Iteration  17: 73737996.293 ops/s
# Warmup Iteration  18: 73517615.383 ops/s
# Warmup Iteration  19: 74026966.747 ops/s
# Warmup Iteration  20: 73392185.528 ops/s
# Warmup Iteration  21: 74133460.069 ops/s
# Warmup Iteration  22: 74069491.057 ops/s
# Warmup Iteration  23: 73855893.342 ops/s
# Warmup Iteration  24: 74047326.914 ops/s
# Warmup Iteration  25: 73828775.116 ops/s
# Warmup Iteration  26: 73710894.497 ops/s
# Warmup Iteration  27: 73837532.253 ops/s
# Warmup Iteration  28: 73882523.200 ops/s
# Warmup Iteration  29: 73680218.390 ops/s
# Warmup Iteration  30: 73889910.238 ops/s
Iteration   1: 73898085.508 ops/s
Iteration   2: 73756902.570 ops/s
Iteration   3: 73785727.903 ops/s
Iteration   4: 74049367.854 ops/s
Iteration   5: 74145643.655 ops/s
Iteration   6: 73800616.893 ops/s
Iteration   7: 73940612.813 ops/s
Iteration   8: 73828262.273 ops/s
Iteration   9: 73205916.862 ops/s
Iteration  10: 73759604.982 ops/s
Iteration  11: 74215088.622 ops/s
Iteration  12: 73776672.165 ops/s
Iteration  13: 73958068.563 ops/s
Iteration  14: 73444049.057 ops/s
Iteration  15: 73661121.981 ops/s
Iteration  16: 73962495.401 ops/s
Iteration  17: 73744700.697 ops/s
Iteration  18: 73741379.552 ops/s
Iteration  19: 73864737.845 ops/s
Iteration  20: 74176464.927 ops/s
Iteration  21: 74060696.036 ops/s
Iteration  22: 74046805.222 ops/s
Iteration  23: 73751097.679 ops/s
Iteration  24: 73587884.329 ops/s
Iteration  25: 73967203.736 ops/s
Iteration  26: 73920052.484 ops/s
Iteration  27: 73751562.869 ops/s
Iteration  28: 74001318.967 ops/s
Iteration  29: 73944491.833 ops/s
Iteration  30: 73795948.439 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseForEach_emptyList":
  73851419.391 ±(99.9%) 141139.731 ops/s [Average]
  (min, avg, max) = (73205916.862, 73851419.391, 74215088.622), stdev = 211251.321
  CI (99.9%): [73710279.660, 73992559.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
CompositeFastListTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  73851419.391 ± 141139.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1290077.471 ops/s
# Warmup Iteration   2: 2761137.826 ops/s
# Warmup Iteration   3: 2940149.009 ops/s
# Warmup Iteration   4: 2959855.113 ops/s
# Warmup Iteration   5: 2456189.993 ops/s
# Warmup Iteration   6: 2955490.353 ops/s
# Warmup Iteration   7: 2966719.246 ops/s
# Warmup Iteration   8: 2964369.827 ops/s
# Warmup Iteration   9: 2964156.448 ops/s
# Warmup Iteration  10: 2963238.335 ops/s
# Warmup Iteration  11: 2966785.323 ops/s
# Warmup Iteration  12: 2963542.811 ops/s
# Warmup Iteration  13: 2964088.225 ops/s
# Warmup Iteration  14: 2959022.299 ops/s
# Warmup Iteration  15: 2967118.862 ops/s
# Warmup Iteration  16: 2953378.443 ops/s
# Warmup Iteration  17: 2962134.359 ops/s
# Warmup Iteration  18: 2958786.646 ops/s
# Warmup Iteration  19: 2955969.422 ops/s
# Warmup Iteration  20: 2960386.026 ops/s
# Warmup Iteration  21: 2963582.104 ops/s
# Warmup Iteration  22: 2964765.083 ops/s
# Warmup Iteration  23: 2956507.311 ops/s
# Warmup Iteration  24: 2960946.271 ops/s
# Warmup Iteration  25: 2969035.071 ops/s
# Warmup Iteration  26: 2953712.170 ops/s
# Warmup Iteration  27: 2957331.607 ops/s
# Warmup Iteration  28: 2952067.650 ops/s
# Warmup Iteration  29: 2956785.427 ops/s
# Warmup Iteration  30: 2961387.670 ops/s
Iteration   1: 2962319.458 ops/s
Iteration   2: 2961269.501 ops/s
Iteration   3: 2970829.623 ops/s
Iteration   4: 2958730.120 ops/s
Iteration   5: 2954420.512 ops/s
Iteration   6: 2957959.391 ops/s
Iteration   7: 2965803.896 ops/s
Iteration   8: 2961295.426 ops/s
Iteration   9: 2951245.413 ops/s
Iteration  10: 2940171.259 ops/s
Iteration  11: 2961724.029 ops/s
Iteration  12: 2961423.629 ops/s
Iteration  13: 2964492.694 ops/s
Iteration  14: 2967649.478 ops/s
Iteration  15: 2956151.964 ops/s
Iteration  16: 2951206.119 ops/s
Iteration  17: 2962300.475 ops/s
Iteration  18: 2967566.488 ops/s
Iteration  19: 2965945.501 ops/s
Iteration  20: 2961987.217 ops/s
Iteration  21: 2965614.113 ops/s
Iteration  22: 2954480.835 ops/s
Iteration  23: 2963187.438 ops/s
Iteration  24: 2950367.692 ops/s
Iteration  25: 2957229.075 ops/s
Iteration  26: 2959385.156 ops/s
Iteration  27: 2961546.737 ops/s
Iteration  28: 2967885.757 ops/s
Iteration  29: 2959526.580 ops/s
Iteration  30: 2956109.966 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_reverseThis":
  2959994.185 ±(99.9%) 4292.295 ops/s [Average]
  (min, avg, max) = (2940171.259, 2959994.185, 2970829.623), stdev = 6424.505
  CI (99.9%): [2955701.890, 2964286.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_reverseThis  thrpt   30  2959994.185 ± 4292.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1090968.321 ops/s
# Warmup Iteration   2: 2604771.154 ops/s
# Warmup Iteration   3: 2196757.179 ops/s
# Warmup Iteration   4: 2617329.378 ops/s
# Warmup Iteration   5: 2626321.231 ops/s
# Warmup Iteration   6: 2631576.125 ops/s
# Warmup Iteration   7: 2628891.596 ops/s
# Warmup Iteration   8: 2621825.680 ops/s
# Warmup Iteration   9: 2628229.776 ops/s
# Warmup Iteration  10: 2624906.549 ops/s
# Warmup Iteration  11: 2641505.374 ops/s
# Warmup Iteration  12: 2619159.063 ops/s
# Warmup Iteration  13: 2630739.927 ops/s
# Warmup Iteration  14: 2633046.094 ops/s
# Warmup Iteration  15: 2618770.803 ops/s
# Warmup Iteration  16: 2628339.621 ops/s
# Warmup Iteration  17: 2628206.888 ops/s
# Warmup Iteration  18: 2629922.486 ops/s
# Warmup Iteration  19: 2616819.036 ops/s
# Warmup Iteration  20: 2574428.279 ops/s
# Warmup Iteration  21: 2640124.562 ops/s
# Warmup Iteration  22: 2635651.467 ops/s
# Warmup Iteration  23: 2635382.955 ops/s
# Warmup Iteration  24: 2632043.586 ops/s
# Warmup Iteration  25: 2624198.199 ops/s
# Warmup Iteration  26: 2630819.521 ops/s
# Warmup Iteration  27: 2625057.030 ops/s
# Warmup Iteration  28: 2631596.730 ops/s
# Warmup Iteration  29: 2630235.757 ops/s
# Warmup Iteration  30: 2630648.794 ops/s
Iteration   1: 2622800.300 ops/s
Iteration   2: 2630907.226 ops/s
Iteration   3: 2637774.730 ops/s
Iteration   4: 2606746.171 ops/s
Iteration   5: 2643166.727 ops/s
Iteration   6: 2627926.029 ops/s
Iteration   7: 2635650.089 ops/s
Iteration   8: 2633100.572 ops/s
Iteration   9: 2632939.403 ops/s
Iteration  10: 2624713.479 ops/s
Iteration  11: 2632057.029 ops/s
Iteration  12: 2629130.447 ops/s
Iteration  13: 2624712.175 ops/s
Iteration  14: 2646605.822 ops/s
Iteration  15: 2626642.463 ops/s
Iteration  16: 2633711.712 ops/s
Iteration  17: 2637710.791 ops/s
Iteration  18: 2639203.233 ops/s
Iteration  19: 2634851.200 ops/s
Iteration  20: 2632609.309 ops/s
Iteration  21: 2632397.728 ops/s
Iteration  22: 2627416.247 ops/s
Iteration  23: 2623124.674 ops/s
Iteration  24: 2642115.178 ops/s
Iteration  25: 2630511.677 ops/s
Iteration  26: 2642908.014 ops/s
Iteration  27: 2627527.460 ops/s
Iteration  28: 2639550.840 ops/s
Iteration  29: 2632063.167 ops/s
Iteration  30: 2633205.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_select":
  2632125.972 ±(99.9%) 5215.924 ops/s [Average]
  (min, avg, max) = (2606746.171, 2632125.972, 2646605.822), stdev = 7806.949
  CI (99.9%): [2626910.048, 2637341.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_select  thrpt   30  2632125.972 ± 5215.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2877459.850 ops/s
# Warmup Iteration   2: 6575982.107 ops/s
# Warmup Iteration   3: 5569993.730 ops/s
# Warmup Iteration   4: 6626501.174 ops/s
# Warmup Iteration   5: 6633100.932 ops/s
# Warmup Iteration   6: 6625522.111 ops/s
# Warmup Iteration   7: 6652086.929 ops/s
# Warmup Iteration   8: 6622828.510 ops/s
# Warmup Iteration   9: 6662607.164 ops/s
# Warmup Iteration  10: 6633967.670 ops/s
# Warmup Iteration  11: 6636569.659 ops/s
# Warmup Iteration  12: 6617974.907 ops/s
# Warmup Iteration  13: 6649166.628 ops/s
# Warmup Iteration  14: 6629805.571 ops/s
# Warmup Iteration  15: 6654674.961 ops/s
# Warmup Iteration  16: 6651879.386 ops/s
# Warmup Iteration  17: 6709856.102 ops/s
# Warmup Iteration  18: 6680827.469 ops/s
# Warmup Iteration  19: 6671605.454 ops/s
# Warmup Iteration  20: 6704030.654 ops/s
# Warmup Iteration  21: 6696951.921 ops/s
# Warmup Iteration  22: 6683839.286 ops/s
# Warmup Iteration  23: 6686248.460 ops/s
# Warmup Iteration  24: 6686206.641 ops/s
# Warmup Iteration  25: 6680782.854 ops/s
# Warmup Iteration  26: 6679952.275 ops/s
# Warmup Iteration  27: 6679187.130 ops/s
# Warmup Iteration  28: 6688688.944 ops/s
# Warmup Iteration  29: 6683039.931 ops/s
# Warmup Iteration  30: 6691393.452 ops/s
Iteration   1: 6662269.510 ops/s
Iteration   2: 6650699.974 ops/s
Iteration   3: 6696616.438 ops/s
Iteration   4: 6667057.005 ops/s
Iteration   5: 6682352.462 ops/s
Iteration   6: 6701135.483 ops/s
Iteration   7: 6665168.900 ops/s
Iteration   8: 6708505.166 ops/s
Iteration   9: 6654734.786 ops/s
Iteration  10: 6700262.227 ops/s
Iteration  11: 6620748.185 ops/s
Iteration  12: 6699315.772 ops/s
Iteration  13: 6707142.451 ops/s
Iteration  14: 6686755.734 ops/s
Iteration  15: 6691381.947 ops/s
Iteration  16: 6664882.359 ops/s
Iteration  17: 6697138.072 ops/s
Iteration  18: 6686979.152 ops/s
Iteration  19: 6683527.919 ops/s
Iteration  20: 6694746.692 ops/s
Iteration  21: 6690329.323 ops/s
Iteration  22: 6688199.664 ops/s
Iteration  23: 6705364.514 ops/s
Iteration  24: 6695065.629 ops/s
Iteration  25: 6708340.280 ops/s
Iteration  26: 6675881.411 ops/s
Iteration  27: 6693192.468 ops/s
Iteration  28: 6694498.635 ops/s
Iteration  29: 6712236.536 ops/s
Iteration  30: 6667565.961 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectAndRejectWith":
  6685069.822 ±(99.9%) 13825.442 ops/s [Average]
  (min, avg, max) = (6620748.185, 6685069.822, 6712236.536), stdev = 20693.273
  CI (99.9%): [6671244.380, 6698895.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  6685069.822 ± 13825.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331010.316 ops/s
# Warmup Iteration   2: 604269.916 ops/s
# Warmup Iteration   3: 680387.468 ops/s
# Warmup Iteration   4: 685439.569 ops/s
# Warmup Iteration   5: 685972.797 ops/s
# Warmup Iteration   6: 566942.066 ops/s
# Warmup Iteration   7: 685276.431 ops/s
# Warmup Iteration   8: 685682.629 ops/s
# Warmup Iteration   9: 684305.159 ops/s
# Warmup Iteration  10: 684977.564 ops/s
# Warmup Iteration  11: 684802.292 ops/s
# Warmup Iteration  12: 687305.828 ops/s
# Warmup Iteration  13: 684576.432 ops/s
# Warmup Iteration  14: 686089.952 ops/s
# Warmup Iteration  15: 685297.507 ops/s
# Warmup Iteration  16: 685865.776 ops/s
# Warmup Iteration  17: 686092.861 ops/s
# Warmup Iteration  18: 685034.915 ops/s
# Warmup Iteration  19: 686870.240 ops/s
# Warmup Iteration  20: 685880.001 ops/s
# Warmup Iteration  21: 686991.002 ops/s
# Warmup Iteration  22: 685765.140 ops/s
# Warmup Iteration  23: 685276.660 ops/s
# Warmup Iteration  24: 685219.532 ops/s
# Warmup Iteration  25: 685447.702 ops/s
# Warmup Iteration  26: 685364.939 ops/s
# Warmup Iteration  27: 684650.150 ops/s
# Warmup Iteration  28: 685114.035 ops/s
# Warmup Iteration  29: 684938.422 ops/s
# Warmup Iteration  30: 685683.955 ops/s
Iteration   1: 686972.954 ops/s
Iteration   2: 685397.633 ops/s
Iteration   3: 686169.629 ops/s
Iteration   4: 687842.092 ops/s
Iteration   5: 688311.009 ops/s
Iteration   6: 688089.747 ops/s
Iteration   7: 684902.967 ops/s
Iteration   8: 683837.206 ops/s
Iteration   9: 686950.841 ops/s
Iteration  10: 686915.608 ops/s
Iteration  11: 684350.386 ops/s
Iteration  12: 685989.976 ops/s
Iteration  13: 685117.873 ops/s
Iteration  14: 685891.100 ops/s
Iteration  15: 685523.880 ops/s
Iteration  16: 688219.753 ops/s
Iteration  17: 684586.746 ops/s
Iteration  18: 685847.318 ops/s
Iteration  19: 687284.147 ops/s
Iteration  20: 685825.190 ops/s
Iteration  21: 687516.688 ops/s
Iteration  22: 687729.094 ops/s
Iteration  23: 685222.002 ops/s
Iteration  24: 686606.940 ops/s
Iteration  25: 686703.494 ops/s
Iteration  26: 685509.189 ops/s
Iteration  27: 684290.319 ops/s
Iteration  28: 686059.112 ops/s
Iteration  29: 686023.838 ops/s
Iteration  30: 685406.689 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectInstancesOf":
  686169.781 ±(99.9%) 821.482 ops/s [Average]
  (min, avg, max) = (683837.206, 686169.781, 688311.009), stdev = 1229.555
  CI (99.9%): [685348.299, 686991.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  686169.781 ± 821.482  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1162692.742 ops/s
# Warmup Iteration   2: 2638931.307 ops/s
# Warmup Iteration   3: 2256968.322 ops/s
# Warmup Iteration   4: 2685506.480 ops/s
# Warmup Iteration   5: 2684859.493 ops/s
# Warmup Iteration   6: 2691600.982 ops/s
# Warmup Iteration   7: 2691828.206 ops/s
# Warmup Iteration   8: 2692377.154 ops/s
# Warmup Iteration   9: 2686005.507 ops/s
# Warmup Iteration  10: 2686068.493 ops/s
# Warmup Iteration  11: 2695594.630 ops/s
# Warmup Iteration  12: 2689260.377 ops/s
# Warmup Iteration  13: 2697634.107 ops/s
# Warmup Iteration  14: 2689333.522 ops/s
# Warmup Iteration  15: 2689588.127 ops/s
# Warmup Iteration  16: 2696108.430 ops/s
# Warmup Iteration  17: 2693593.831 ops/s
# Warmup Iteration  18: 2683106.472 ops/s
# Warmup Iteration  19: 2687749.341 ops/s
# Warmup Iteration  20: 2692303.779 ops/s
# Warmup Iteration  21: 2686105.466 ops/s
# Warmup Iteration  22: 2690468.945 ops/s
# Warmup Iteration  23: 2689183.012 ops/s
# Warmup Iteration  24: 2684032.095 ops/s
# Warmup Iteration  25: 2685292.971 ops/s
# Warmup Iteration  26: 2689089.434 ops/s
# Warmup Iteration  27: 2694097.370 ops/s
# Warmup Iteration  28: 2691369.606 ops/s
# Warmup Iteration  29: 2682912.302 ops/s
# Warmup Iteration  30: 2692658.623 ops/s
Iteration   1: 2677087.729 ops/s
Iteration   2: 2689949.316 ops/s
Iteration   3: 2695828.373 ops/s
Iteration   4: 2689056.686 ops/s
Iteration   5: 2682106.825 ops/s
Iteration   6: 2680481.393 ops/s
Iteration   7: 2625817.438 ops/s
Iteration   8: 2657767.054 ops/s
Iteration   9: 2684248.145 ops/s
Iteration  10: 2698267.209 ops/s
Iteration  11: 2685888.363 ops/s
Iteration  12: 2697309.885 ops/s
Iteration  13: 2681584.068 ops/s
Iteration  14: 2709392.238 ops/s
Iteration  15: 2687813.592 ops/s
Iteration  16: 2698187.240 ops/s
Iteration  17: 2685512.777 ops/s
Iteration  18: 2686085.722 ops/s
Iteration  19: 2684753.436 ops/s
Iteration  20: 2702077.122 ops/s
Iteration  21: 2688203.049 ops/s
Iteration  22: 2701362.822 ops/s
Iteration  23: 2682640.110 ops/s
Iteration  24: 2688745.785 ops/s
Iteration  25: 2698385.696 ops/s
Iteration  26: 2682436.818 ops/s
Iteration  27: 2684560.528 ops/s
Iteration  28: 2683611.441 ops/s
Iteration  29: 2691649.908 ops/s
Iteration  30: 2695442.826 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith":
  2686541.786 ±(99.9%) 9980.712 ops/s [Average]
  (min, avg, max) = (2625817.438, 2686541.786, 2709392.238), stdev = 14938.661
  CI (99.9%): [2676561.074, 2696522.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_selectWith  thrpt   30  2686541.786 ± 9980.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1289632.021 ops/s
# Warmup Iteration   2: 2967365.590 ops/s
# Warmup Iteration   3: 2993071.355 ops/s
# Warmup Iteration   4: 2507654.189 ops/s
# Warmup Iteration   5: 2994487.500 ops/s
# Warmup Iteration   6: 2992473.300 ops/s
# Warmup Iteration   7: 2995516.223 ops/s
# Warmup Iteration   8: 2996972.250 ops/s
# Warmup Iteration   9: 2986462.871 ops/s
# Warmup Iteration  10: 2992422.827 ops/s
# Warmup Iteration  11: 2997709.064 ops/s
# Warmup Iteration  12: 2998961.313 ops/s
# Warmup Iteration  13: 2989069.844 ops/s
# Warmup Iteration  14: 2992126.025 ops/s
# Warmup Iteration  15: 2988201.505 ops/s
# Warmup Iteration  16: 2993858.521 ops/s
# Warmup Iteration  17: 2995018.985 ops/s
# Warmup Iteration  18: 2990507.365 ops/s
# Warmup Iteration  19: 2994156.935 ops/s
# Warmup Iteration  20: 2996206.632 ops/s
# Warmup Iteration  21: 2997115.298 ops/s
# Warmup Iteration  22: 2991590.701 ops/s
# Warmup Iteration  23: 2996088.032 ops/s
# Warmup Iteration  24: 2990662.177 ops/s
# Warmup Iteration  25: 2994863.920 ops/s
# Warmup Iteration  26: 2996854.919 ops/s
# Warmup Iteration  27: 2988897.121 ops/s
# Warmup Iteration  28: 2992485.047 ops/s
# Warmup Iteration  29: 2986987.481 ops/s
# Warmup Iteration  30: 2989831.485 ops/s
Iteration   1: 3003008.227 ops/s
Iteration   2: 3002485.603 ops/s
Iteration   3: 3000161.859 ops/s
Iteration   4: 2998062.818 ops/s
Iteration   5: 2986687.101 ops/s
Iteration   6: 2997024.539 ops/s
Iteration   7: 3001052.092 ops/s
Iteration   8: 2986742.025 ops/s
Iteration   9: 2993035.230 ops/s
Iteration  10: 2998714.153 ops/s
Iteration  11: 3003235.058 ops/s
Iteration  12: 2983991.264 ops/s
Iteration  13: 2998830.929 ops/s
Iteration  14: 3001930.360 ops/s
Iteration  15: 2978036.393 ops/s
Iteration  16: 2997551.880 ops/s
Iteration  17: 2999179.353 ops/s
Iteration  18: 2995984.822 ops/s
Iteration  19: 2983655.124 ops/s
Iteration  20: 2999053.686 ops/s
Iteration  21: 2985859.331 ops/s
Iteration  22: 3000246.743 ops/s
Iteration  23: 2998996.827 ops/s
Iteration  24: 3000632.728 ops/s
Iteration  25: 2992641.325 ops/s
Iteration  26: 3002421.701 ops/s
Iteration  27: 2996875.506 ops/s
Iteration  28: 2999790.125 ops/s
Iteration  29: 2997003.080 ops/s
Iteration  30: 2988440.639 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndex":
  2995711.017 ±(99.9%) 4540.184 ops/s [Average]
  (min, avg, max) = (2978036.393, 2995711.017, 3003235.058), stdev = 6795.534
  CI (99.9%): [2991170.834, 3000251.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  2995711.017 ± 4540.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1558867.051 ops/s
# Warmup Iteration   2: 4129918.234 ops/s
# Warmup Iteration   3: 4037915.267 ops/s
# Warmup Iteration   4: 3357916.447 ops/s
# Warmup Iteration   5: 4032410.187 ops/s
# Warmup Iteration   6: 4047499.971 ops/s
# Warmup Iteration   7: 4039426.398 ops/s
# Warmup Iteration   8: 4051216.467 ops/s
# Warmup Iteration   9: 4046576.931 ops/s
# Warmup Iteration  10: 4037966.239 ops/s
# Warmup Iteration  11: 4042634.534 ops/s
# Warmup Iteration  12: 4042752.581 ops/s
# Warmup Iteration  13: 4041970.625 ops/s
# Warmup Iteration  14: 4037485.663 ops/s
# Warmup Iteration  15: 4049025.276 ops/s
# Warmup Iteration  16: 4032313.895 ops/s
# Warmup Iteration  17: 4059506.778 ops/s
# Warmup Iteration  18: 4057264.577 ops/s
# Warmup Iteration  19: 4025540.750 ops/s
# Warmup Iteration  20: 4037062.509 ops/s
# Warmup Iteration  21: 4042637.112 ops/s
# Warmup Iteration  22: 4038706.355 ops/s
# Warmup Iteration  23: 4043284.029 ops/s
# Warmup Iteration  24: 4044840.929 ops/s
# Warmup Iteration  25: 4052863.482 ops/s
# Warmup Iteration  26: 4041293.330 ops/s
# Warmup Iteration  27: 4056779.894 ops/s
# Warmup Iteration  28: 4055016.669 ops/s
# Warmup Iteration  29: 4047774.661 ops/s
# Warmup Iteration  30: 4057141.428 ops/s
Iteration   1: 4046806.432 ops/s
Iteration   2: 4046862.903 ops/s
Iteration   3: 4045451.654 ops/s
Iteration   4: 4041175.201 ops/s
Iteration   5: 4053134.388 ops/s
Iteration   6: 4051038.191 ops/s
Iteration   7: 4062798.564 ops/s
Iteration   8: 4058923.560 ops/s
Iteration   9: 4038790.237 ops/s
Iteration  10: 4065990.782 ops/s
Iteration  11: 4045100.019 ops/s
Iteration  12: 4036682.297 ops/s
Iteration  13: 4048361.794 ops/s
Iteration  14: 4054644.196 ops/s
Iteration  15: 4050849.869 ops/s
Iteration  16: 4041826.840 ops/s
Iteration  17: 4050509.563 ops/s
Iteration  18: 4046986.774 ops/s
Iteration  19: 4040919.119 ops/s
Iteration  20: 4016792.643 ops/s
Iteration  21: 4046610.214 ops/s
Iteration  22: 4054256.024 ops/s
Iteration  23: 4040451.956 ops/s
Iteration  24: 4045989.629 ops/s
Iteration  25: 4040660.262 ops/s
Iteration  26: 4055883.449 ops/s
Iteration  27: 4049655.743 ops/s
Iteration  28: 4053419.731 ops/s
Iteration  29: 4051610.929 ops/s
Iteration  30: 4055793.633 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  4047932.553 ±(99.9%) 6103.746 ops/s [Average]
  (min, avg, max) = (4016792.643, 4047932.553, 4065990.782), stdev = 9135.801
  CI (99.9%): [4041828.807, 4054036.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  4047932.553 ± 6103.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447220.836 ops/s
# Warmup Iteration   2: 1108170.765 ops/s
# Warmup Iteration   3: 1142184.226 ops/s
# Warmup Iteration   4: 955481.245 ops/s
# Warmup Iteration   5: 1144024.375 ops/s
# Warmup Iteration   6: 1146839.920 ops/s
# Warmup Iteration   7: 1142408.528 ops/s
# Warmup Iteration   8: 1145160.574 ops/s
# Warmup Iteration   9: 1143800.488 ops/s
# Warmup Iteration  10: 1140508.088 ops/s
# Warmup Iteration  11: 1142238.863 ops/s
# Warmup Iteration  12: 1143440.181 ops/s
# Warmup Iteration  13: 1147118.040 ops/s
# Warmup Iteration  14: 1145680.421 ops/s
# Warmup Iteration  15: 1144893.522 ops/s
# Warmup Iteration  16: 1146730.221 ops/s
# Warmup Iteration  17: 1145338.545 ops/s
# Warmup Iteration  18: 1140394.063 ops/s
# Warmup Iteration  19: 1143674.980 ops/s
# Warmup Iteration  20: 1139445.081 ops/s
# Warmup Iteration  21: 1143866.327 ops/s
# Warmup Iteration  22: 1144633.185 ops/s
# Warmup Iteration  23: 1145183.065 ops/s
# Warmup Iteration  24: 1145016.979 ops/s
# Warmup Iteration  25: 1140859.126 ops/s
# Warmup Iteration  26: 1144283.352 ops/s
# Warmup Iteration  27: 1141185.332 ops/s
# Warmup Iteration  28: 1143420.563 ops/s
# Warmup Iteration  29: 1144313.575 ops/s
# Warmup Iteration  30: 1145204.723 ops/s
Iteration   1: 1142124.966 ops/s
Iteration   2: 1145921.228 ops/s
Iteration   3: 1142253.362 ops/s
Iteration   4: 1145398.935 ops/s
Iteration   5: 1148245.402 ops/s
Iteration   6: 1146356.527 ops/s
Iteration   7: 1147442.782 ops/s
Iteration   8: 1140263.164 ops/s
Iteration   9: 1143303.303 ops/s
Iteration  10: 1142169.183 ops/s
Iteration  11: 1147963.701 ops/s
Iteration  12: 1139964.443 ops/s
Iteration  13: 1148950.406 ops/s
Iteration  14: 1147799.726 ops/s
Iteration  15: 1143127.309 ops/s
Iteration  16: 1145036.378 ops/s
Iteration  17: 1144557.144 ops/s
Iteration  18: 1144270.070 ops/s
Iteration  19: 1146119.409 ops/s
Iteration  20: 1146665.796 ops/s
Iteration  21: 1143592.300 ops/s
Iteration  22: 1147170.790 ops/s
Iteration  23: 1144669.083 ops/s
Iteration  24: 1143592.154 ops/s
Iteration  25: 1146300.277 ops/s
Iteration  26: 1142839.430 ops/s
Iteration  27: 1141854.279 ops/s
Iteration  28: 1146527.624 ops/s
Iteration  29: 1144742.161 ops/s
Iteration  30: 1141502.764 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_selectWith_target":
  1144690.803 ±(99.9%) 1623.029 ops/s [Average]
  (min, avg, max) = (1139964.443, 1144690.803, 1148950.406), stdev = 2429.274
  CI (99.9%): [1143067.774, 1146313.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_selectWith_target  thrpt   30  1144690.803 ± 1623.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38384.559 ops/s
# Warmup Iteration   2: 48130.558 ops/s
# Warmup Iteration   3: 72917.594 ops/s
# Warmup Iteration   4: 73086.299 ops/s
# Warmup Iteration   5: 73158.123 ops/s
# Warmup Iteration   6: 72981.239 ops/s
# Warmup Iteration   7: 72850.717 ops/s
# Warmup Iteration   8: 73133.982 ops/s
# Warmup Iteration   9: 73198.315 ops/s
# Warmup Iteration  10: 61308.787 ops/s
# Warmup Iteration  11: 73042.370 ops/s
# Warmup Iteration  12: 73006.130 ops/s
# Warmup Iteration  13: 73050.754 ops/s
# Warmup Iteration  14: 73292.286 ops/s
# Warmup Iteration  15: 73028.275 ops/s
# Warmup Iteration  16: 73192.868 ops/s
# Warmup Iteration  17: 73207.180 ops/s
# Warmup Iteration  18: 73110.246 ops/s
# Warmup Iteration  19: 73155.592 ops/s
# Warmup Iteration  20: 73168.245 ops/s
# Warmup Iteration  21: 73043.652 ops/s
# Warmup Iteration  22: 73230.735 ops/s
# Warmup Iteration  23: 73304.800 ops/s
# Warmup Iteration  24: 73311.087 ops/s
# Warmup Iteration  25: 73055.119 ops/s
# Warmup Iteration  26: 73141.347 ops/s
# Warmup Iteration  27: 73281.748 ops/s
# Warmup Iteration  28: 73298.779 ops/s
# Warmup Iteration  29: 73454.712 ops/s
# Warmup Iteration  30: 73110.465 ops/s
Iteration   1: 73143.403 ops/s
Iteration   2: 73250.324 ops/s
Iteration   3: 73187.187 ops/s
Iteration   4: 73032.381 ops/s
Iteration   5: 72986.959 ops/s
Iteration   6: 72957.560 ops/s
Iteration   7: 73072.862 ops/s
Iteration   8: 72844.565 ops/s
Iteration   9: 73153.966 ops/s
Iteration  10: 72981.703 ops/s
Iteration  11: 72959.000 ops/s
Iteration  12: 73109.527 ops/s
Iteration  13: 73167.147 ops/s
Iteration  14: 72743.082 ops/s
Iteration  15: 71956.322 ops/s
Iteration  16: 73158.670 ops/s
Iteration  17: 73147.848 ops/s
Iteration  18: 73349.464 ops/s
Iteration  19: 73105.946 ops/s
Iteration  20: 73245.393 ops/s
Iteration  21: 73093.207 ops/s
Iteration  22: 73017.225 ops/s
Iteration  23: 73166.475 ops/s
Iteration  24: 72698.385 ops/s
Iteration  25: 73000.592 ops/s
Iteration  26: 73141.595 ops/s
Iteration  27: 73157.839 ops/s
Iteration  28: 73339.457 ops/s
Iteration  29: 72985.256 ops/s
Iteration  30: 73130.388 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_serialization":
  73042.791 ±(99.9%) 169.313 ops/s [Average]
  (min, avg, max) = (71956.322, 73042.791, 73349.464), stdev = 253.420
  CI (99.9%): [72873.478, 73212.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_serialization  thrpt   30  73042.791 ± 169.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1360304.422 ops/s
# Warmup Iteration   2: 3505897.948 ops/s
# Warmup Iteration   3: 3544386.481 ops/s
# Warmup Iteration   4: 2943181.411 ops/s
# Warmup Iteration   5: 3547455.067 ops/s
# Warmup Iteration   6: 3528723.542 ops/s
# Warmup Iteration   7: 3527343.125 ops/s
# Warmup Iteration   8: 3548499.468 ops/s
# Warmup Iteration   9: 3546106.297 ops/s
# Warmup Iteration  10: 3543246.093 ops/s
# Warmup Iteration  11: 3543319.591 ops/s
# Warmup Iteration  12: 3554161.299 ops/s
# Warmup Iteration  13: 3554400.605 ops/s
# Warmup Iteration  14: 3545560.028 ops/s
# Warmup Iteration  15: 3546749.546 ops/s
# Warmup Iteration  16: 3561307.381 ops/s
# Warmup Iteration  17: 3550494.675 ops/s
# Warmup Iteration  18: 3547281.107 ops/s
# Warmup Iteration  19: 3531629.384 ops/s
# Warmup Iteration  20: 3554285.820 ops/s
# Warmup Iteration  21: 3547220.855 ops/s
# Warmup Iteration  22: 3556285.614 ops/s
# Warmup Iteration  23: 3540206.425 ops/s
# Warmup Iteration  24: 3541475.569 ops/s
# Warmup Iteration  25: 3554690.535 ops/s
# Warmup Iteration  26: 3546840.571 ops/s
# Warmup Iteration  27: 3554639.349 ops/s
# Warmup Iteration  28: 3546153.476 ops/s
# Warmup Iteration  29: 3551874.300 ops/s
# Warmup Iteration  30: 3553261.711 ops/s
Iteration   1: 3541064.277 ops/s
Iteration   2: 3547121.672 ops/s
Iteration   3: 3547870.952 ops/s
Iteration   4: 3563824.239 ops/s
Iteration   5: 3555368.933 ops/s
Iteration   6: 3564302.669 ops/s
Iteration   7: 3554650.627 ops/s
Iteration   8: 3553383.328 ops/s
Iteration   9: 3545495.715 ops/s
Iteration  10: 3553548.174 ops/s
Iteration  11: 3556917.563 ops/s
Iteration  12: 3537184.784 ops/s
Iteration  13: 3556152.964 ops/s
Iteration  14: 3554669.180 ops/s
Iteration  15: 3555802.416 ops/s
Iteration  16: 3560514.407 ops/s
Iteration  17: 3555158.719 ops/s
Iteration  18: 3547890.080 ops/s
Iteration  19: 3546331.882 ops/s
Iteration  20: 3545632.234 ops/s
Iteration  21: 3551066.121 ops/s
Iteration  22: 3539629.633 ops/s
Iteration  23: 3551136.205 ops/s
Iteration  24: 3552962.965 ops/s
Iteration  25: 3557561.769 ops/s
Iteration  26: 3543854.208 ops/s
Iteration  27: 3546778.438 ops/s
Iteration  28: 3549133.537 ops/s
Iteration  29: 3541180.861 ops/s
Iteration  30: 3550074.838 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set":
  3550875.446 ±(99.9%) 4545.440 ops/s [Average]
  (min, avg, max) = (3537184.784, 3550875.446, 3564302.669), stdev = 6803.401
  CI (99.9%): [3546330.006, 3555420.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_set  thrpt   30  3550875.446 ± 4545.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set_bugFix_off_by_one_error$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set_bugFix_off_by_one_error

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9940388.629 ops/s
# Warmup Iteration   2: 20839909.376 ops/s
# Warmup Iteration   3: 18696693.981 ops/s
# Warmup Iteration   4: 22125914.103 ops/s
# Warmup Iteration   5: 22087892.477 ops/s
# Warmup Iteration   6: 22060079.654 ops/s
# Warmup Iteration   7: 22082293.850 ops/s
# Warmup Iteration   8: 22095996.670 ops/s
# Warmup Iteration   9: 22080364.940 ops/s
# Warmup Iteration  10: 22097796.568 ops/s
# Warmup Iteration  11: 22115672.684 ops/s
# Warmup Iteration  12: 22097914.319 ops/s
# Warmup Iteration  13: 22150825.502 ops/s
# Warmup Iteration  14: 22049643.901 ops/s
# Warmup Iteration  15: 22118660.478 ops/s
# Warmup Iteration  16: 22121128.398 ops/s
# Warmup Iteration  17: 22114963.509 ops/s
# Warmup Iteration  18: 22077273.162 ops/s
# Warmup Iteration  19: 22076900.420 ops/s
# Warmup Iteration  20: 22044981.468 ops/s
# Warmup Iteration  21: 22083836.078 ops/s
# Warmup Iteration  22: 22049226.566 ops/s
# Warmup Iteration  23: 22121627.648 ops/s
# Warmup Iteration  24: 22025365.802 ops/s
# Warmup Iteration  25: 22030327.688 ops/s
# Warmup Iteration  26: 21991266.089 ops/s
# Warmup Iteration  27: 22094844.147 ops/s
# Warmup Iteration  28: 22027581.029 ops/s
# Warmup Iteration  29: 22071850.407 ops/s
# Warmup Iteration  30: 22067948.638 ops/s
Iteration   1: 22053694.467 ops/s
Iteration   2: 22100862.405 ops/s
Iteration   3: 22094413.135 ops/s
Iteration   4: 22017677.209 ops/s
Iteration   5: 22104134.239 ops/s
Iteration   6: 21991451.073 ops/s
Iteration   7: 22055683.928 ops/s
Iteration   8: 22159853.544 ops/s
Iteration   9: 22157694.263 ops/s
Iteration  10: 22085657.605 ops/s
Iteration  11: 21998274.779 ops/s
Iteration  12: 22044471.764 ops/s
Iteration  13: 21966677.400 ops/s
Iteration  14: 22129517.934 ops/s
Iteration  15: 21992735.911 ops/s
Iteration  16: 22127127.288 ops/s
Iteration  17: 22116815.410 ops/s
Iteration  18: 22062037.377 ops/s
Iteration  19: 22020044.449 ops/s
Iteration  20: 22018218.922 ops/s
Iteration  21: 22098176.211 ops/s
Iteration  22: 22158267.934 ops/s
Iteration  23: 22122273.258 ops/s
Iteration  24: 22103284.621 ops/s
Iteration  25: 22203971.148 ops/s
Iteration  26: 22007423.250 ops/s
Iteration  27: 22102897.821 ops/s
Iteration  28: 22135258.179 ops/s
Iteration  29: 22112143.636 ops/s
Iteration  30: 22076550.870 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_set_bugFix_off_by_one_error":
  22080576.334 ±(99.9%) 39792.769 ops/s [Average]
  (min, avg, max) = (21966677.400, 22080576.334, 22203971.148), stdev = 59559.948
  CI (99.9%): [22040783.565, 22120369.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_set_bugFix_off_by_one_error  thrpt   30  22080576.334 ± 39792.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770445.117 ops/s
# Warmup Iteration   2: 2191204.710 ops/s
# Warmup Iteration   3: 1846553.623 ops/s
# Warmup Iteration   4: 2206497.717 ops/s
# Warmup Iteration   5: 2210321.674 ops/s
# Warmup Iteration   6: 2209093.346 ops/s
# Warmup Iteration   7: 2208366.080 ops/s
# Warmup Iteration   8: 2214341.661 ops/s
# Warmup Iteration   9: 2210032.696 ops/s
# Warmup Iteration  10: 2213278.784 ops/s
# Warmup Iteration  11: 2208800.350 ops/s
# Warmup Iteration  12: 2211647.112 ops/s
# Warmup Iteration  13: 2213223.676 ops/s
# Warmup Iteration  14: 2200626.521 ops/s
# Warmup Iteration  15: 2215283.650 ops/s
# Warmup Iteration  16: 2206075.201 ops/s
# Warmup Iteration  17: 2191836.909 ops/s
# Warmup Iteration  18: 2209229.582 ops/s
# Warmup Iteration  19: 2212119.385 ops/s
# Warmup Iteration  20: 2210152.262 ops/s
# Warmup Iteration  21: 2214620.664 ops/s
# Warmup Iteration  22: 2211090.103 ops/s
# Warmup Iteration  23: 2215299.743 ops/s
# Warmup Iteration  24: 2211390.031 ops/s
# Warmup Iteration  25: 2215925.195 ops/s
# Warmup Iteration  26: 2207218.719 ops/s
# Warmup Iteration  27: 2216331.256 ops/s
# Warmup Iteration  28: 2216468.179 ops/s
# Warmup Iteration  29: 2210911.180 ops/s
# Warmup Iteration  30: 2209031.438 ops/s
Iteration   1: 2214627.757 ops/s
Iteration   2: 2207777.320 ops/s
Iteration   3: 2216193.415 ops/s
Iteration   4: 2219495.147 ops/s
Iteration   5: 2214868.309 ops/s
Iteration   6: 2211225.746 ops/s
Iteration   7: 2213721.267 ops/s
Iteration   8: 2211321.119 ops/s
Iteration   9: 2217758.095 ops/s
Iteration  10: 2217803.533 ops/s
Iteration  11: 2216344.349 ops/s
Iteration  12: 2218469.419 ops/s
Iteration  13: 2220100.825 ops/s
Iteration  14: 2216116.678 ops/s
Iteration  15: 2220018.751 ops/s
Iteration  16: 2213435.861 ops/s
Iteration  17: 2216216.513 ops/s
Iteration  18: 2214372.084 ops/s
Iteration  19: 2223666.053 ops/s
Iteration  20: 2220988.906 ops/s
Iteration  21: 2214597.101 ops/s
Iteration  22: 2216963.302 ops/s
Iteration  23: 2209731.420 ops/s
Iteration  24: 2204492.338 ops/s
Iteration  25: 2216158.506 ops/s
Iteration  26: 2218249.051 ops/s
Iteration  27: 2210611.853 ops/s
Iteration  28: 2213354.458 ops/s
Iteration  29: 2215849.063 ops/s
Iteration  30: 2211673.448 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_size":
  2215206.723 ±(99.9%) 2737.810 ops/s [Average]
  (min, avg, max) = (2204492.338, 2215206.723, 2223666.053), stdev = 4097.826
  CI (99.9%): [2212468.913, 2217944.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_size  thrpt   30  2215206.723 ± 2737.810  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2367492.447 ops/s
# Warmup Iteration   2: 5307134.725 ops/s
# Warmup Iteration   3: 5496084.252 ops/s
# Warmup Iteration   4: 4867739.355 ops/s
# Warmup Iteration   5: 5181538.487 ops/s
# Warmup Iteration   6: 5497234.694 ops/s
# Warmup Iteration   7: 5492731.520 ops/s
# Warmup Iteration   8: 5496698.345 ops/s
# Warmup Iteration   9: 5483020.811 ops/s
# Warmup Iteration  10: 5511479.927 ops/s
# Warmup Iteration  11: 5486611.829 ops/s
# Warmup Iteration  12: 5507557.719 ops/s
# Warmup Iteration  13: 5494812.227 ops/s
# Warmup Iteration  14: 5485224.957 ops/s
# Warmup Iteration  15: 5497401.258 ops/s
# Warmup Iteration  16: 5485961.866 ops/s
# Warmup Iteration  17: 5491147.624 ops/s
# Warmup Iteration  18: 5493963.406 ops/s
# Warmup Iteration  19: 5489716.211 ops/s
# Warmup Iteration  20: 5498089.973 ops/s
# Warmup Iteration  21: 5479929.817 ops/s
# Warmup Iteration  22: 5489367.012 ops/s
# Warmup Iteration  23: 5496815.798 ops/s
# Warmup Iteration  24: 5498538.519 ops/s
# Warmup Iteration  25: 5491953.188 ops/s
# Warmup Iteration  26: 5499182.858 ops/s
# Warmup Iteration  27: 5491597.991 ops/s
# Warmup Iteration  28: 5488984.648 ops/s
# Warmup Iteration  29: 5488060.225 ops/s
# Warmup Iteration  30: 5497899.532 ops/s
Iteration   1: 5493829.644 ops/s
Iteration   2: 5503557.621 ops/s
Iteration   3: 5497878.188 ops/s
Iteration   4: 5484369.941 ops/s
Iteration   5: 5505107.467 ops/s
Iteration   6: 5476168.940 ops/s
Iteration   7: 5489025.231 ops/s
Iteration   8: 5494486.361 ops/s
Iteration   9: 5497559.494 ops/s
Iteration  10: 5498873.364 ops/s
Iteration  11: 5499910.813 ops/s
Iteration  12: 5510801.963 ops/s
Iteration  13: 5514243.736 ops/s
Iteration  14: 5486183.168 ops/s
Iteration  15: 5497339.934 ops/s
Iteration  16: 5474747.872 ops/s
Iteration  17: 5490317.844 ops/s
Iteration  18: 5510873.126 ops/s
Iteration  19: 5493358.238 ops/s
Iteration  20: 5485373.826 ops/s
Iteration  21: 5497304.729 ops/s
Iteration  22: 5489188.894 ops/s
Iteration  23: 5485244.016 ops/s
Iteration  24: 5501060.562 ops/s
Iteration  25: 5487115.831 ops/s
Iteration  26: 5487636.575 ops/s
Iteration  27: 5458649.463 ops/s
Iteration  28: 5496534.964 ops/s
Iteration  29: 5498120.488 ops/s
Iteration  30: 5490884.649 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sort":
  5493191.565 ±(99.9%) 7604.064 ops/s [Average]
  (min, avg, max) = (5458649.463, 5493191.565, 5514243.736), stdev = 11381.407
  CI (99.9%): [5485587.500, 5500795.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sort  thrpt   30  5493191.565 ± 7604.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 861000.583 ops/s
# Warmup Iteration   2: 907795.425 ops/s
# Warmup Iteration   3: 1248216.548 ops/s
# Warmup Iteration   4: 1282479.519 ops/s
# Warmup Iteration   5: 1274656.016 ops/s
# Warmup Iteration   6: 1285115.381 ops/s
# Warmup Iteration   7: 1284340.940 ops/s
# Warmup Iteration   8: 1279538.822 ops/s
# Warmup Iteration   9: 1284504.864 ops/s
# Warmup Iteration  10: 1281693.581 ops/s
# Warmup Iteration  11: 1224037.768 ops/s
# Warmup Iteration  12: 1119918.302 ops/s
# Warmup Iteration  13: 1282101.970 ops/s
# Warmup Iteration  14: 1280111.642 ops/s
# Warmup Iteration  15: 1283984.392 ops/s
# Warmup Iteration  16: 1279435.710 ops/s
# Warmup Iteration  17: 1284308.602 ops/s
# Warmup Iteration  18: 1282263.720 ops/s
# Warmup Iteration  19: 1282950.482 ops/s
# Warmup Iteration  20: 1283691.396 ops/s
# Warmup Iteration  21: 1280588.679 ops/s
# Warmup Iteration  22: 1275858.598 ops/s
# Warmup Iteration  23: 1277394.924 ops/s
# Warmup Iteration  24: 1275268.554 ops/s
# Warmup Iteration  25: 1275198.297 ops/s
# Warmup Iteration  26: 1275624.431 ops/s
# Warmup Iteration  27: 1278228.886 ops/s
# Warmup Iteration  28: 1274894.379 ops/s
# Warmup Iteration  29: 1275996.399 ops/s
# Warmup Iteration  30: 1276663.199 ops/s
Iteration   1: 1274007.025 ops/s
Iteration   2: 1273556.219 ops/s
Iteration   3: 1276167.869 ops/s
Iteration   4: 1278039.835 ops/s
Iteration   5: 1279745.536 ops/s
Iteration   6: 1277466.918 ops/s
Iteration   7: 1281658.184 ops/s
Iteration   8: 1273495.614 ops/s
Iteration   9: 1278994.046 ops/s
Iteration  10: 1281465.731 ops/s
Iteration  11: 1274948.701 ops/s
Iteration  12: 1277391.541 ops/s
Iteration  13: 1278380.734 ops/s
Iteration  14: 1276303.061 ops/s
Iteration  15: 1273749.544 ops/s
Iteration  16: 1277894.577 ops/s
Iteration  17: 1277283.340 ops/s
Iteration  18: 1278801.506 ops/s
Iteration  19: 1279065.285 ops/s
Iteration  20: 1276361.735 ops/s
Iteration  21: 1280089.623 ops/s
Iteration  22: 1276652.293 ops/s
Iteration  23: 1276142.915 ops/s
Iteration  24: 1276026.839 ops/s
Iteration  25: 1280579.172 ops/s
Iteration  26: 1276549.451 ops/s
Iteration  27: 1276542.678 ops/s
Iteration  28: 1275197.240 ops/s
Iteration  29: 1277758.108 ops/s
Iteration  30: 1276030.183 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis":
  1277211.517 ±(99.9%) 1480.268 ops/s [Average]
  (min, avg, max) = (1273495.614, 1277211.517, 1281658.184), stdev = 2215.595
  CI (99.9%): [1275731.249, 1278691.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis  thrpt   30  1277211.517 ± 1480.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 334232.986 ops/s
# Warmup Iteration   2: 403457.452 ops/s
# Warmup Iteration   3: 590820.711 ops/s
# Warmup Iteration   4: 594864.511 ops/s
# Warmup Iteration   5: 599371.059 ops/s
# Warmup Iteration   6: 596357.671 ops/s
# Warmup Iteration   7: 599957.906 ops/s
# Warmup Iteration   8: 597837.242 ops/s
# Warmup Iteration   9: 467980.617 ops/s
# Warmup Iteration  10: 599853.142 ops/s
# Warmup Iteration  11: 599772.289 ops/s
# Warmup Iteration  12: 599967.302 ops/s
# Warmup Iteration  13: 600471.055 ops/s
# Warmup Iteration  14: 600522.759 ops/s
# Warmup Iteration  15: 599542.819 ops/s
# Warmup Iteration  16: 600680.661 ops/s
# Warmup Iteration  17: 599507.414 ops/s
# Warmup Iteration  18: 598249.963 ops/s
# Warmup Iteration  19: 599319.758 ops/s
# Warmup Iteration  20: 598996.540 ops/s
# Warmup Iteration  21: 599565.439 ops/s
# Warmup Iteration  22: 598870.072 ops/s
# Warmup Iteration  23: 597541.523 ops/s
# Warmup Iteration  24: 599519.660 ops/s
# Warmup Iteration  25: 598806.717 ops/s
# Warmup Iteration  26: 598515.926 ops/s
# Warmup Iteration  27: 599314.003 ops/s
# Warmup Iteration  28: 599974.609 ops/s
# Warmup Iteration  29: 598499.282 ops/s
# Warmup Iteration  30: 598830.600 ops/s
Iteration   1: 597260.300 ops/s
Iteration   2: 598970.170 ops/s
Iteration   3: 599955.769 ops/s
Iteration   4: 599339.381 ops/s
Iteration   5: 599899.201 ops/s
Iteration   6: 598129.481 ops/s
Iteration   7: 599143.299 ops/s
Iteration   8: 597907.004 ops/s
Iteration   9: 599211.785 ops/s
Iteration  10: 599126.450 ops/s
Iteration  11: 599202.998 ops/s
Iteration  12: 599381.021 ops/s
Iteration  13: 599565.209 ops/s
Iteration  14: 598693.707 ops/s
Iteration  15: 599334.740 ops/s
Iteration  16: 600079.373 ops/s
Iteration  17: 600253.042 ops/s
Iteration  18: 600042.937 ops/s
Iteration  19: 600303.602 ops/s
Iteration  20: 599059.635 ops/s
Iteration  21: 600172.116 ops/s
Iteration  22: 600331.381 ops/s
Iteration  23: 599121.899 ops/s
Iteration  24: 598929.279 ops/s
Iteration  25: 596817.006 ops/s
Iteration  26: 600572.489 ops/s
Iteration  27: 600302.241 ops/s
Iteration  28: 600217.335 ops/s
Iteration  29: 599226.425 ops/s
Iteration  30: 601736.474 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisBy":
  599409.525 ±(99.9%) 670.717 ops/s [Average]
  (min, avg, max) = (596817.006, 599409.525, 601736.474), stdev = 1003.897
  CI (99.9%): [598738.808, 600080.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisBy  thrpt   30  599409.525 ± 670.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1529662.858 ops/s
# Warmup Iteration   2: 2309931.304 ops/s
# Warmup Iteration   3: 2677209.052 ops/s
# Warmup Iteration   4: 2698281.444 ops/s
# Warmup Iteration   5: 2696162.477 ops/s
# Warmup Iteration   6: 2691344.591 ops/s
# Warmup Iteration   7: 2247933.492 ops/s
# Warmup Iteration   8: 2685900.617 ops/s
# Warmup Iteration   9: 2693790.643 ops/s
# Warmup Iteration  10: 2690872.963 ops/s
# Warmup Iteration  11: 2691864.815 ops/s
# Warmup Iteration  12: 2697932.910 ops/s
# Warmup Iteration  13: 2686889.122 ops/s
# Warmup Iteration  14: 2692788.170 ops/s
# Warmup Iteration  15: 2696813.528 ops/s
# Warmup Iteration  16: 2694562.512 ops/s
# Warmup Iteration  17: 2687699.229 ops/s
# Warmup Iteration  18: 2694666.921 ops/s
# Warmup Iteration  19: 2685949.608 ops/s
# Warmup Iteration  20: 2689118.024 ops/s
# Warmup Iteration  21: 2687901.276 ops/s
# Warmup Iteration  22: 2686766.827 ops/s
# Warmup Iteration  23: 2686438.218 ops/s
# Warmup Iteration  24: 2692988.538 ops/s
# Warmup Iteration  25: 2692540.590 ops/s
# Warmup Iteration  26: 2687577.899 ops/s
# Warmup Iteration  27: 2687008.722 ops/s
# Warmup Iteration  28: 2690748.809 ops/s
# Warmup Iteration  29: 2690216.340 ops/s
# Warmup Iteration  30: 2683258.182 ops/s
Iteration   1: 2691619.746 ops/s
Iteration   2: 2691080.330 ops/s
Iteration   3: 2695019.442 ops/s
Iteration   4: 2692819.096 ops/s
Iteration   5: 2690781.663 ops/s
Iteration   6: 2680168.739 ops/s
Iteration   7: 2682415.776 ops/s
Iteration   8: 2680905.224 ops/s
Iteration   9: 2690834.874 ops/s
Iteration  10: 2690038.508 ops/s
Iteration  11: 2694289.736 ops/s
Iteration  12: 2693187.859 ops/s
Iteration  13: 2697556.261 ops/s
Iteration  14: 2690649.169 ops/s
Iteration  15: 2695494.333 ops/s
Iteration  16: 2696927.171 ops/s
Iteration  17: 2687549.698 ops/s
Iteration  18: 2689322.936 ops/s
Iteration  19: 2696716.145 ops/s
Iteration  20: 2681908.702 ops/s
Iteration  21: 2684301.421 ops/s
Iteration  22: 2689916.781 ops/s
Iteration  23: 2684356.171 ops/s
Iteration  24: 2693849.954 ops/s
Iteration  25: 2685080.579 ops/s
Iteration  26: 2685956.489 ops/s
Iteration  27: 2686415.223 ops/s
Iteration  28: 2682322.655 ops/s
Iteration  29: 2693124.151 ops/s
Iteration  30: 2692774.146 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByBoolean":
  2689579.433 ±(99.9%) 3420.415 ops/s [Average]
  (min, avg, max) = (2680168.739, 2689579.433, 2697556.261), stdev = 5119.517
  CI (99.9%): [2686159.017, 2692999.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  2689579.433 ± 3420.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688659.004 ops/s
# Warmup Iteration   2: 745617.591 ops/s
# Warmup Iteration   3: 845987.963 ops/s
# Warmup Iteration   4: 950696.822 ops/s
# Warmup Iteration   5: 947611.584 ops/s
# Warmup Iteration   6: 950057.869 ops/s
# Warmup Iteration   7: 944539.247 ops/s
# Warmup Iteration   8: 950621.624 ops/s
# Warmup Iteration   9: 946090.059 ops/s
# Warmup Iteration  10: 946123.489 ops/s
# Warmup Iteration  11: 950761.452 ops/s
# Warmup Iteration  12: 951420.034 ops/s
# Warmup Iteration  13: 946677.866 ops/s
# Warmup Iteration  14: 940422.215 ops/s
# Warmup Iteration  15: 787219.946 ops/s
# Warmup Iteration  16: 951465.745 ops/s
# Warmup Iteration  17: 950124.822 ops/s
# Warmup Iteration  18: 950128.313 ops/s
# Warmup Iteration  19: 951951.634 ops/s
# Warmup Iteration  20: 951965.195 ops/s
# Warmup Iteration  21: 953261.585 ops/s
# Warmup Iteration  22: 950867.986 ops/s
# Warmup Iteration  23: 950559.394 ops/s
# Warmup Iteration  24: 948388.367 ops/s
# Warmup Iteration  25: 948794.858 ops/s
# Warmup Iteration  26: 949847.368 ops/s
# Warmup Iteration  27: 951161.298 ops/s
# Warmup Iteration  28: 949523.240 ops/s
# Warmup Iteration  29: 950552.107 ops/s
# Warmup Iteration  30: 949471.070 ops/s
Iteration   1: 949953.763 ops/s
Iteration   2: 951164.996 ops/s
Iteration   3: 950263.610 ops/s
Iteration   4: 949618.176 ops/s
Iteration   5: 949702.396 ops/s
Iteration   6: 948083.039 ops/s
Iteration   7: 949426.865 ops/s
Iteration   8: 952217.459 ops/s
Iteration   9: 951025.836 ops/s
Iteration  10: 953306.385 ops/s
Iteration  11: 946872.422 ops/s
Iteration  12: 949905.684 ops/s
Iteration  13: 948456.425 ops/s
Iteration  14: 952772.871 ops/s
Iteration  15: 952260.097 ops/s
Iteration  16: 950140.299 ops/s
Iteration  17: 953983.394 ops/s
Iteration  18: 949132.085 ops/s
Iteration  19: 952764.083 ops/s
Iteration  20: 950501.355 ops/s
Iteration  21: 947733.038 ops/s
Iteration  22: 952719.499 ops/s
Iteration  23: 951496.694 ops/s
Iteration  24: 951096.614 ops/s
Iteration  25: 954673.346 ops/s
Iteration  26: 951371.745 ops/s
Iteration  27: 950958.841 ops/s
Iteration  28: 950916.152 ops/s
Iteration  29: 951232.231 ops/s
Iteration  30: 951630.620 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByByte":
  950846.001 ±(99.9%) 1217.068 ops/s [Average]
  (min, avg, max) = (946872.422, 950846.001, 954673.346), stdev = 1821.650
  CI (99.9%): [949628.933, 952063.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByByte  thrpt   30  950846.001 ± 1217.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886232.668 ops/s
# Warmup Iteration   2: 984257.352 ops/s
# Warmup Iteration   3: 1329561.643 ops/s
# Warmup Iteration   4: 1327922.317 ops/s
# Warmup Iteration   5: 1322886.515 ops/s
# Warmup Iteration   6: 1328913.684 ops/s
# Warmup Iteration   7: 1330504.923 ops/s
# Warmup Iteration   8: 1331749.906 ops/s
# Warmup Iteration   9: 1329305.907 ops/s
# Warmup Iteration  10: 1329921.012 ops/s
# Warmup Iteration  11: 1109391.537 ops/s
# Warmup Iteration  12: 1334555.389 ops/s
# Warmup Iteration  13: 1333213.709 ops/s
# Warmup Iteration  14: 1331970.988 ops/s
# Warmup Iteration  15: 1329827.618 ops/s
# Warmup Iteration  16: 1328297.964 ops/s
# Warmup Iteration  17: 1329227.875 ops/s
# Warmup Iteration  18: 1330319.603 ops/s
# Warmup Iteration  19: 1327825.499 ops/s
# Warmup Iteration  20: 1328686.630 ops/s
# Warmup Iteration  21: 1330403.900 ops/s
# Warmup Iteration  22: 1326707.334 ops/s
# Warmup Iteration  23: 1331959.521 ops/s
# Warmup Iteration  24: 1330666.192 ops/s
# Warmup Iteration  25: 1329268.590 ops/s
# Warmup Iteration  26: 1331401.403 ops/s
# Warmup Iteration  27: 1328321.731 ops/s
# Warmup Iteration  28: 1331601.814 ops/s
# Warmup Iteration  29: 1329764.779 ops/s
# Warmup Iteration  30: 1329239.301 ops/s
Iteration   1: 1327043.467 ops/s
Iteration   2: 1327362.326 ops/s
Iteration   3: 1333035.517 ops/s
Iteration   4: 1329622.264 ops/s
Iteration   5: 1333813.764 ops/s
Iteration   6: 1326576.269 ops/s
Iteration   7: 1330429.269 ops/s
Iteration   8: 1327901.955 ops/s
Iteration   9: 1332054.374 ops/s
Iteration  10: 1327476.438 ops/s
Iteration  11: 1333482.616 ops/s
Iteration  12: 1331778.563 ops/s
Iteration  13: 1321708.618 ops/s
Iteration  14: 1328086.927 ops/s
Iteration  15: 1329524.710 ops/s
Iteration  16: 1327032.389 ops/s
Iteration  17: 1324304.875 ops/s
Iteration  18: 1327362.991 ops/s
Iteration  19: 1330779.944 ops/s
Iteration  20: 1329771.942 ops/s
Iteration  21: 1326451.564 ops/s
Iteration  22: 1330067.858 ops/s
Iteration  23: 1334546.441 ops/s
Iteration  24: 1330091.052 ops/s
Iteration  25: 1327570.414 ops/s
Iteration  26: 1329404.556 ops/s
Iteration  27: 1332462.078 ops/s
Iteration  28: 1326997.812 ops/s
Iteration  29: 1327911.832 ops/s
Iteration  30: 1327733.311 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByChar":
  1329079.538 ±(99.9%) 1929.865 ops/s [Average]
  (min, avg, max) = (1321708.618, 1329079.538, 1334546.441), stdev = 2888.531
  CI (99.9%): [1327149.673, 1331009.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1329079.538 ± 1929.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 234616.498 ops/s
# Warmup Iteration   2: 379137.712 ops/s
# Warmup Iteration   3: 455694.628 ops/s
# Warmup Iteration   4: 458074.249 ops/s
# Warmup Iteration   5: 457375.782 ops/s
# Warmup Iteration   6: 412454.925 ops/s
# Warmup Iteration   7: 412605.917 ops/s
# Warmup Iteration   8: 452580.278 ops/s
# Warmup Iteration   9: 453349.990 ops/s
# Warmup Iteration  10: 454577.263 ops/s
# Warmup Iteration  11: 454127.403 ops/s
# Warmup Iteration  12: 455665.218 ops/s
# Warmup Iteration  13: 454864.375 ops/s
# Warmup Iteration  14: 455496.777 ops/s
# Warmup Iteration  15: 453485.726 ops/s
# Warmup Iteration  16: 453234.432 ops/s
# Warmup Iteration  17: 457916.295 ops/s
# Warmup Iteration  18: 456698.352 ops/s
# Warmup Iteration  19: 457080.328 ops/s
# Warmup Iteration  20: 457572.686 ops/s
# Warmup Iteration  21: 456491.727 ops/s
# Warmup Iteration  22: 456225.017 ops/s
# Warmup Iteration  23: 458471.499 ops/s
# Warmup Iteration  24: 457330.148 ops/s
# Warmup Iteration  25: 456894.352 ops/s
# Warmup Iteration  26: 457275.175 ops/s
# Warmup Iteration  27: 456533.104 ops/s
# Warmup Iteration  28: 456595.714 ops/s
# Warmup Iteration  29: 457321.695 ops/s
# Warmup Iteration  30: 457410.621 ops/s
Iteration   1: 457474.681 ops/s
Iteration   2: 457564.624 ops/s
Iteration   3: 457383.612 ops/s
Iteration   4: 457781.897 ops/s
Iteration   5: 458251.839 ops/s
Iteration   6: 455765.083 ops/s
Iteration   7: 456979.015 ops/s
Iteration   8: 456361.883 ops/s
Iteration   9: 456872.947 ops/s
Iteration  10: 456477.810 ops/s
Iteration  11: 457689.909 ops/s
Iteration  12: 456839.278 ops/s
Iteration  13: 456969.399 ops/s
Iteration  14: 456336.155 ops/s
Iteration  15: 458266.383 ops/s
Iteration  16: 458168.016 ops/s
Iteration  17: 458110.968 ops/s
Iteration  18: 456762.332 ops/s
Iteration  19: 456142.996 ops/s
Iteration  20: 458129.996 ops/s
Iteration  21: 457778.090 ops/s
Iteration  22: 456013.797 ops/s
Iteration  23: 457494.917 ops/s
Iteration  24: 458282.487 ops/s
Iteration  25: 457094.279 ops/s
Iteration  26: 458194.158 ops/s
Iteration  27: 457670.597 ops/s
Iteration  28: 457034.668 ops/s
Iteration  29: 456831.331 ops/s
Iteration  30: 457692.955 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByDouble":
  457280.537 ±(99.9%) 493.242 ops/s [Average]
  (min, avg, max) = (455765.083, 457280.537, 458282.487), stdev = 738.262
  CI (99.9%): [456787.295, 457773.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  457280.537 ± 493.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235984.542 ops/s
# Warmup Iteration   2: 380502.207 ops/s
# Warmup Iteration   3: 456613.423 ops/s
# Warmup Iteration   4: 460699.894 ops/s
# Warmup Iteration   5: 459798.179 ops/s
# Warmup Iteration   6: 415189.826 ops/s
# Warmup Iteration   7: 413459.538 ops/s
# Warmup Iteration   8: 449765.665 ops/s
# Warmup Iteration   9: 455805.323 ops/s
# Warmup Iteration  10: 455198.959 ops/s
# Warmup Iteration  11: 455042.999 ops/s
# Warmup Iteration  12: 455076.254 ops/s
# Warmup Iteration  13: 454896.693 ops/s
# Warmup Iteration  14: 454584.894 ops/s
# Warmup Iteration  15: 455704.555 ops/s
# Warmup Iteration  16: 454954.977 ops/s
# Warmup Iteration  17: 462055.993 ops/s
# Warmup Iteration  18: 461516.972 ops/s
# Warmup Iteration  19: 461314.171 ops/s
# Warmup Iteration  20: 461814.926 ops/s
# Warmup Iteration  21: 461652.306 ops/s
# Warmup Iteration  22: 461825.565 ops/s
# Warmup Iteration  23: 460843.030 ops/s
# Warmup Iteration  24: 461520.211 ops/s
# Warmup Iteration  25: 460820.675 ops/s
# Warmup Iteration  26: 461980.299 ops/s
# Warmup Iteration  27: 462401.031 ops/s
# Warmup Iteration  28: 462327.763 ops/s
# Warmup Iteration  29: 462447.012 ops/s
# Warmup Iteration  30: 462318.817 ops/s
Iteration   1: 462178.726 ops/s
Iteration   2: 462968.398 ops/s
Iteration   3: 462698.821 ops/s
Iteration   4: 461899.202 ops/s
Iteration   5: 462737.473 ops/s
Iteration   6: 461183.379 ops/s
Iteration   7: 462271.679 ops/s
Iteration   8: 461251.815 ops/s
Iteration   9: 460509.710 ops/s
Iteration  10: 461410.747 ops/s
Iteration  11: 462317.723 ops/s
Iteration  12: 462021.707 ops/s
Iteration  13: 462441.180 ops/s
Iteration  14: 461361.256 ops/s
Iteration  15: 461712.139 ops/s
Iteration  16: 461499.763 ops/s
Iteration  17: 462201.306 ops/s
Iteration  18: 461573.884 ops/s
Iteration  19: 463885.203 ops/s
Iteration  20: 460451.156 ops/s
Iteration  21: 462891.711 ops/s
Iteration  22: 462318.121 ops/s
Iteration  23: 463127.274 ops/s
Iteration  24: 463514.861 ops/s
Iteration  25: 462305.997 ops/s
Iteration  26: 462563.880 ops/s
Iteration  27: 462489.762 ops/s
Iteration  28: 462057.985 ops/s
Iteration  29: 462284.230 ops/s
Iteration  30: 460353.917 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByFloat":
  462082.767 ±(99.9%) 565.751 ops/s [Average]
  (min, avg, max) = (460353.917, 462082.767, 463885.203), stdev = 846.789
  CI (99.9%): [461517.016, 462648.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  462082.767 ± 565.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 681876.063 ops/s
# Warmup Iteration   2: 744926.291 ops/s
# Warmup Iteration   3: 857442.588 ops/s
# Warmup Iteration   4: 963445.137 ops/s
# Warmup Iteration   5: 963153.689 ops/s
# Warmup Iteration   6: 966724.963 ops/s
# Warmup Iteration   7: 961168.313 ops/s
# Warmup Iteration   8: 966749.098 ops/s
# Warmup Iteration   9: 966542.337 ops/s
# Warmup Iteration  10: 967834.897 ops/s
# Warmup Iteration  11: 965496.043 ops/s
# Warmup Iteration  12: 964864.346 ops/s
# Warmup Iteration  13: 968762.874 ops/s
# Warmup Iteration  14: 918919.171 ops/s
# Warmup Iteration  15: 850812.237 ops/s
# Warmup Iteration  16: 968512.178 ops/s
# Warmup Iteration  17: 968196.756 ops/s
# Warmup Iteration  18: 964595.462 ops/s
# Warmup Iteration  19: 967293.651 ops/s
# Warmup Iteration  20: 967345.000 ops/s
# Warmup Iteration  21: 969993.209 ops/s
# Warmup Iteration  22: 966469.668 ops/s
# Warmup Iteration  23: 965786.160 ops/s
# Warmup Iteration  24: 965553.123 ops/s
# Warmup Iteration  25: 967788.656 ops/s
# Warmup Iteration  26: 968625.116 ops/s
# Warmup Iteration  27: 968394.583 ops/s
# Warmup Iteration  28: 966113.561 ops/s
# Warmup Iteration  29: 965511.462 ops/s
# Warmup Iteration  30: 966931.968 ops/s
Iteration   1: 969913.789 ops/s
Iteration   2: 970735.191 ops/s
Iteration   3: 967326.962 ops/s
Iteration   4: 966358.628 ops/s
Iteration   5: 969113.828 ops/s
Iteration   6: 967476.086 ops/s
Iteration   7: 969052.030 ops/s
Iteration   8: 965728.289 ops/s
Iteration   9: 968429.851 ops/s
Iteration  10: 966568.788 ops/s
Iteration  11: 966679.649 ops/s
Iteration  12: 967406.270 ops/s
Iteration  13: 964340.448 ops/s
Iteration  14: 964630.499 ops/s
Iteration  15: 967982.934 ops/s
Iteration  16: 966702.592 ops/s
Iteration  17: 969424.943 ops/s
Iteration  18: 969553.523 ops/s
Iteration  19: 968045.929 ops/s
Iteration  20: 963947.701 ops/s
Iteration  21: 969069.939 ops/s
Iteration  22: 966948.140 ops/s
Iteration  23: 966163.142 ops/s
Iteration  24: 968339.334 ops/s
Iteration  25: 965936.593 ops/s
Iteration  26: 964561.065 ops/s
Iteration  27: 968533.333 ops/s
Iteration  28: 966199.365 ops/s
Iteration  29: 970111.868 ops/s
Iteration  30: 965664.007 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByInt":
  967364.824 ±(99.9%) 1221.042 ops/s [Average]
  (min, avg, max) = (963947.701, 967364.824, 970735.191), stdev = 1827.599
  CI (99.9%): [966143.781, 968585.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByInt  thrpt   30  967364.824 ± 1221.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663586.787 ops/s
# Warmup Iteration   2: 721001.466 ops/s
# Warmup Iteration   3: 818062.269 ops/s
# Warmup Iteration   4: 913474.242 ops/s
# Warmup Iteration   5: 910878.052 ops/s
# Warmup Iteration   6: 913505.403 ops/s
# Warmup Iteration   7: 908425.791 ops/s
# Warmup Iteration   8: 914824.484 ops/s
# Warmup Iteration   9: 910627.223 ops/s
# Warmup Iteration  10: 913265.211 ops/s
# Warmup Iteration  11: 903799.196 ops/s
# Warmup Iteration  12: 904390.093 ops/s
# Warmup Iteration  13: 900479.375 ops/s
# Warmup Iteration  14: 901145.401 ops/s
# Warmup Iteration  15: 752841.629 ops/s
# Warmup Iteration  16: 904452.108 ops/s
# Warmup Iteration  17: 902924.032 ops/s
# Warmup Iteration  18: 903839.873 ops/s
# Warmup Iteration  19: 903367.974 ops/s
# Warmup Iteration  20: 904587.085 ops/s
# Warmup Iteration  21: 903748.067 ops/s
# Warmup Iteration  22: 907087.364 ops/s
# Warmup Iteration  23: 904995.823 ops/s
# Warmup Iteration  24: 905447.341 ops/s
# Warmup Iteration  25: 904630.442 ops/s
# Warmup Iteration  26: 904437.542 ops/s
# Warmup Iteration  27: 904383.538 ops/s
# Warmup Iteration  28: 890627.877 ops/s
# Warmup Iteration  29: 893125.491 ops/s
# Warmup Iteration  30: 892294.407 ops/s
Iteration   1: 890634.100 ops/s
Iteration   2: 892237.998 ops/s
Iteration   3: 894156.870 ops/s
Iteration   4: 895019.969 ops/s
Iteration   5: 892807.589 ops/s
Iteration   6: 893032.745 ops/s
Iteration   7: 888065.978 ops/s
Iteration   8: 896047.893 ops/s
Iteration   9: 896660.550 ops/s
Iteration  10: 893326.567 ops/s
Iteration  11: 892464.925 ops/s
Iteration  12: 892275.160 ops/s
Iteration  13: 892778.028 ops/s
Iteration  14: 893992.638 ops/s
Iteration  15: 894644.847 ops/s
Iteration  16: 893627.483 ops/s
Iteration  17: 893063.156 ops/s
Iteration  18: 889589.099 ops/s
Iteration  19: 892800.969 ops/s
Iteration  20: 893828.467 ops/s
Iteration  21: 893455.072 ops/s
Iteration  22: 885757.921 ops/s
Iteration  23: 893486.119 ops/s
Iteration  24: 893336.189 ops/s
Iteration  25: 895528.345 ops/s
Iteration  26: 892666.041 ops/s
Iteration  27: 893078.738 ops/s
Iteration  28: 892011.932 ops/s
Iteration  29: 894888.473 ops/s
Iteration  30: 894716.300 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByLong":
  892999.339 ±(99.9%) 1484.062 ops/s [Average]
  (min, avg, max) = (885757.921, 892999.339, 896660.550), stdev = 2221.275
  CI (99.9%): [891515.276, 894483.401] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByLong  thrpt   30  892999.339 ± 1484.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685449.879 ops/s
# Warmup Iteration   2: 746559.885 ops/s
# Warmup Iteration   3: 851985.506 ops/s
# Warmup Iteration   4: 961372.931 ops/s
# Warmup Iteration   5: 959746.318 ops/s
# Warmup Iteration   6: 959390.683 ops/s
# Warmup Iteration   7: 948417.929 ops/s
# Warmup Iteration   8: 953422.321 ops/s
# Warmup Iteration   9: 956781.226 ops/s
# Warmup Iteration  10: 959886.601 ops/s
# Warmup Iteration  11: 958031.295 ops/s
# Warmup Iteration  12: 956947.165 ops/s
# Warmup Iteration  13: 959473.907 ops/s
# Warmup Iteration  14: 928895.902 ops/s
# Warmup Iteration  15: 817642.984 ops/s
# Warmup Iteration  16: 960028.293 ops/s
# Warmup Iteration  17: 960673.901 ops/s
# Warmup Iteration  18: 956608.795 ops/s
# Warmup Iteration  19: 961559.498 ops/s
# Warmup Iteration  20: 958893.552 ops/s
# Warmup Iteration  21: 959480.026 ops/s
# Warmup Iteration  22: 960142.719 ops/s
# Warmup Iteration  23: 961705.174 ops/s
# Warmup Iteration  24: 960778.519 ops/s
# Warmup Iteration  25: 961569.967 ops/s
# Warmup Iteration  26: 961105.676 ops/s
# Warmup Iteration  27: 960822.538 ops/s
# Warmup Iteration  28: 961166.137 ops/s
# Warmup Iteration  29: 960482.030 ops/s
# Warmup Iteration  30: 960689.509 ops/s
Iteration   1: 960473.346 ops/s
Iteration   2: 959981.142 ops/s
Iteration   3: 961698.843 ops/s
Iteration   4: 962654.339 ops/s
Iteration   5: 960766.954 ops/s
Iteration   6: 961476.769 ops/s
Iteration   7: 961274.986 ops/s
Iteration   8: 963305.917 ops/s
Iteration   9: 962782.306 ops/s
Iteration  10: 959954.918 ops/s
Iteration  11: 957809.880 ops/s
Iteration  12: 959471.322 ops/s
Iteration  13: 959655.769 ops/s
Iteration  14: 959524.928 ops/s
Iteration  15: 959400.319 ops/s
Iteration  16: 956677.982 ops/s
Iteration  17: 962030.986 ops/s
Iteration  18: 962705.794 ops/s
Iteration  19: 961364.006 ops/s
Iteration  20: 963365.501 ops/s
Iteration  21: 958568.583 ops/s
Iteration  22: 961350.669 ops/s
Iteration  23: 956042.992 ops/s
Iteration  24: 960036.719 ops/s
Iteration  25: 959563.390 ops/s
Iteration  26: 956994.366 ops/s
Iteration  27: 960575.394 ops/s
Iteration  28: 959006.356 ops/s
Iteration  29: 959998.233 ops/s
Iteration  30: 960536.107 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisByShort":
  960301.627 ±(99.9%) 1254.875 ops/s [Average]
  (min, avg, max) = (956042.992, 960301.627, 963365.501), stdev = 1878.238
  CI (99.9%): [959046.752, 961556.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisByShort  thrpt   30  960301.627 ± 1254.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521869.577 ops/s
# Warmup Iteration   2: 556372.699 ops/s
# Warmup Iteration   3: 667382.309 ops/s
# Warmup Iteration   4: 717227.248 ops/s
# Warmup Iteration   5: 715309.406 ops/s
# Warmup Iteration   6: 712586.050 ops/s
# Warmup Iteration   7: 717969.350 ops/s
# Warmup Iteration   8: 713725.797 ops/s
# Warmup Iteration   9: 717883.911 ops/s
# Warmup Iteration  10: 714843.997 ops/s
# Warmup Iteration  11: 717431.590 ops/s
# Warmup Iteration  12: 713957.367 ops/s
# Warmup Iteration  13: 698527.127 ops/s
# Warmup Iteration  14: 616492.167 ops/s
# Warmup Iteration  15: 715767.601 ops/s
# Warmup Iteration  16: 714810.409 ops/s
# Warmup Iteration  17: 754973.505 ops/s
# Warmup Iteration  18: 755388.692 ops/s
# Warmup Iteration  19: 752170.704 ops/s
# Warmup Iteration  20: 755530.973 ops/s
# Warmup Iteration  21: 755099.181 ops/s
# Warmup Iteration  22: 755856.788 ops/s
# Warmup Iteration  23: 755925.800 ops/s
# Warmup Iteration  24: 755673.305 ops/s
# Warmup Iteration  25: 751899.853 ops/s
# Warmup Iteration  26: 754998.335 ops/s
# Warmup Iteration  27: 755126.975 ops/s
# Warmup Iteration  28: 753738.960 ops/s
# Warmup Iteration  29: 754676.016 ops/s
# Warmup Iteration  30: 750986.718 ops/s
Iteration   1: 751390.940 ops/s
Iteration   2: 755195.135 ops/s
Iteration   3: 754907.751 ops/s
Iteration   4: 752270.668 ops/s
Iteration   5: 752152.134 ops/s
Iteration   6: 757509.191 ops/s
Iteration   7: 755856.825 ops/s
Iteration   8: 751950.604 ops/s
Iteration   9: 755421.241 ops/s
Iteration  10: 755689.565 ops/s
Iteration  11: 756194.522 ops/s
Iteration  12: 751064.732 ops/s
Iteration  13: 753895.093 ops/s
Iteration  14: 757108.809 ops/s
Iteration  15: 754589.799 ops/s
Iteration  16: 754219.498 ops/s
Iteration  17: 751570.070 ops/s
Iteration  18: 754235.891 ops/s
Iteration  19: 756457.308 ops/s
Iteration  20: 753956.810 ops/s
Iteration  21: 755252.803 ops/s
Iteration  22: 756004.194 ops/s
Iteration  23: 752922.376 ops/s
Iteration  24: 755617.214 ops/s
Iteration  25: 750447.015 ops/s
Iteration  26: 752194.754 ops/s
Iteration  27: 754396.612 ops/s
Iteration  28: 751565.008 ops/s
Iteration  29: 749747.621 ops/s
Iteration  30: 756962.973 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  754024.905 ±(99.9%) 1436.059 ops/s [Average]
  (min, avg, max) = (749747.621, 754024.905, 757509.191), stdev = 2149.425
  CI (99.9%): [752588.846, 755460.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  754024.905 ± 1436.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 423880.577 ops/s
# Warmup Iteration   2: 457894.919 ops/s
# Warmup Iteration   3: 556567.369 ops/s
# Warmup Iteration   4: 599520.745 ops/s
# Warmup Iteration   5: 602248.647 ops/s
# Warmup Iteration   6: 595578.405 ops/s
# Warmup Iteration   7: 600851.974 ops/s
# Warmup Iteration   8: 599216.328 ops/s
# Warmup Iteration   9: 598595.993 ops/s
# Warmup Iteration  10: 598863.195 ops/s
# Warmup Iteration  11: 597585.355 ops/s
# Warmup Iteration  12: 600595.598 ops/s
# Warmup Iteration  13: 551565.441 ops/s
# Warmup Iteration  14: 542358.925 ops/s
# Warmup Iteration  15: 599662.149 ops/s
# Warmup Iteration  16: 601781.688 ops/s
# Warmup Iteration  17: 624640.853 ops/s
# Warmup Iteration  18: 626254.373 ops/s
# Warmup Iteration  19: 624408.396 ops/s
# Warmup Iteration  20: 625528.847 ops/s
# Warmup Iteration  21: 624059.378 ops/s
# Warmup Iteration  22: 626524.236 ops/s
# Warmup Iteration  23: 624151.156 ops/s
# Warmup Iteration  24: 625299.758 ops/s
# Warmup Iteration  25: 623319.506 ops/s
# Warmup Iteration  26: 624812.051 ops/s
# Warmup Iteration  27: 622590.828 ops/s
# Warmup Iteration  28: 624721.243 ops/s
# Warmup Iteration  29: 624622.816 ops/s
# Warmup Iteration  30: 626001.436 ops/s
Iteration   1: 626769.213 ops/s
Iteration   2: 626198.501 ops/s
Iteration   3: 622491.084 ops/s
Iteration   4: 626050.780 ops/s
Iteration   5: 627393.964 ops/s
Iteration   6: 625858.173 ops/s
Iteration   7: 628633.098 ops/s
Iteration   8: 624685.417 ops/s
Iteration   9: 626047.672 ops/s
Iteration  10: 626406.414 ops/s
Iteration  11: 626350.322 ops/s
Iteration  12: 609110.037 ops/s
Iteration  13: 627090.361 ops/s
Iteration  14: 625518.061 ops/s
Iteration  15: 625652.237 ops/s
Iteration  16: 627041.812 ops/s
Iteration  17: 625828.451 ops/s
Iteration  18: 623607.729 ops/s
Iteration  19: 620645.518 ops/s
Iteration  20: 627493.432 ops/s
Iteration  21: 622928.098 ops/s
Iteration  22: 628642.721 ops/s
Iteration  23: 626732.988 ops/s
Iteration  24: 625353.854 ops/s
Iteration  25: 623491.610 ops/s
Iteration  26: 625255.972 ops/s
Iteration  27: 623593.604 ops/s
Iteration  28: 622334.022 ops/s
Iteration  29: 623667.296 ops/s
Iteration  30: 626588.038 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  624915.349 ±(99.9%) 2361.669 ops/s [Average]
  (min, avg, max) = (609110.037, 624915.349, 628642.721), stdev = 3534.835
  CI (99.9%): [622553.680, 627277.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  624915.349 ± 2361.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4732.071 ops/s
# Warmup Iteration   2: 5051.736 ops/s
# Warmup Iteration   3: 5060.532 ops/s
# Warmup Iteration   4: 5825.385 ops/s
# Warmup Iteration   5: 5932.788 ops/s
# Warmup Iteration   6: 5959.729 ops/s
# Warmup Iteration   7: 6078.706 ops/s
# Warmup Iteration   8: 6089.250 ops/s
# Warmup Iteration   9: 6054.869 ops/s
# Warmup Iteration  10: 6059.584 ops/s
# Warmup Iteration  11: 6042.752 ops/s
# Warmup Iteration  12: 6078.966 ops/s
# Warmup Iteration  13: 6096.007 ops/s
# Warmup Iteration  14: 6085.551 ops/s
# Warmup Iteration  15: 6110.786 ops/s
# Warmup Iteration  16: 6086.290 ops/s
# Warmup Iteration  17: 6103.656 ops/s
# Warmup Iteration  18: 6090.677 ops/s
# Warmup Iteration  19: 5677.711 ops/s
# Warmup Iteration  20: 5664.518 ops/s
# Warmup Iteration  21: 6088.973 ops/s
# Warmup Iteration  22: 6086.887 ops/s
# Warmup Iteration  23: 6089.168 ops/s
# Warmup Iteration  24: 6091.649 ops/s
# Warmup Iteration  25: 6089.750 ops/s
# Warmup Iteration  26: 6096.148 ops/s
# Warmup Iteration  27: 6086.407 ops/s
# Warmup Iteration  28: 6089.868 ops/s
# Warmup Iteration  29: 6078.620 ops/s
# Warmup Iteration  30: 6095.737 ops/s
Iteration   1: 6098.846 ops/s
Iteration   2: 6108.024 ops/s
Iteration   3: 6116.946 ops/s
Iteration   4: 6104.424 ops/s
Iteration   5: 6086.399 ops/s
Iteration   6: 6099.535 ops/s
Iteration   7: 6087.937 ops/s
Iteration   8: 6088.826 ops/s
Iteration   9: 6107.092 ops/s
Iteration  10: 6089.493 ops/s
Iteration  11: 6092.084 ops/s
Iteration  12: 6121.221 ops/s
Iteration  13: 6109.210 ops/s
Iteration  14: 6098.264 ops/s
Iteration  15: 6078.462 ops/s
Iteration  16: 6099.073 ops/s
Iteration  17: 6078.006 ops/s
Iteration  18: 6082.905 ops/s
Iteration  19: 6103.542 ops/s
Iteration  20: 6105.417 ops/s
Iteration  21: 6094.642 ops/s
Iteration  22: 6096.527 ops/s
Iteration  23: 6104.244 ops/s
Iteration  24: 6092.717 ops/s
Iteration  25: 6117.145 ops/s
Iteration  26: 6098.097 ops/s
Iteration  27: 6096.839 ops/s
Iteration  28: 6084.621 ops/s
Iteration  29: 6090.373 ops/s
Iteration  30: 6089.518 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_large":
  6097.348 ±(99.9%) 7.360 ops/s [Average]
  (min, avg, max) = (6078.006, 6097.348, 6121.221), stdev = 11.017
  CI (99.9%): [6089.987, 6104.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt     Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_large  thrpt   30  6097.348 ± 7.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2118561.181 ops/s
# Warmup Iteration   2: 4198826.679 ops/s
# Warmup Iteration   3: 4526951.834 ops/s
# Warmup Iteration   4: 4544311.475 ops/s
# Warmup Iteration   5: 3781798.375 ops/s
# Warmup Iteration   6: 4560708.024 ops/s
# Warmup Iteration   7: 4559277.007 ops/s
# Warmup Iteration   8: 4558806.928 ops/s
# Warmup Iteration   9: 4561738.080 ops/s
# Warmup Iteration  10: 4546209.090 ops/s
# Warmup Iteration  11: 4556383.764 ops/s
# Warmup Iteration  12: 4545528.678 ops/s
# Warmup Iteration  13: 4555089.956 ops/s
# Warmup Iteration  14: 4556788.386 ops/s
# Warmup Iteration  15: 4569768.673 ops/s
# Warmup Iteration  16: 4550740.176 ops/s
# Warmup Iteration  17: 4566924.242 ops/s
# Warmup Iteration  18: 4557011.255 ops/s
# Warmup Iteration  19: 4564221.030 ops/s
# Warmup Iteration  20: 4561732.479 ops/s
# Warmup Iteration  21: 4568182.385 ops/s
# Warmup Iteration  22: 4558301.534 ops/s
# Warmup Iteration  23: 4559384.017 ops/s
# Warmup Iteration  24: 4556403.076 ops/s
# Warmup Iteration  25: 4561391.524 ops/s
# Warmup Iteration  26: 4554917.402 ops/s
# Warmup Iteration  27: 4551171.156 ops/s
# Warmup Iteration  28: 4557448.579 ops/s
# Warmup Iteration  29: 4567947.011 ops/s
# Warmup Iteration  30: 4567851.200 ops/s
Iteration   1: 4569863.234 ops/s
Iteration   2: 4560103.840 ops/s
Iteration   3: 4544743.998 ops/s
Iteration   4: 4535772.726 ops/s
Iteration   5: 4555503.359 ops/s
Iteration   6: 4574652.968 ops/s
Iteration   7: 4554173.495 ops/s
Iteration   8: 4556680.290 ops/s
Iteration   9: 4546028.577 ops/s
Iteration  10: 4574334.522 ops/s
Iteration  11: 4551845.716 ops/s
Iteration  12: 4569494.949 ops/s
Iteration  13: 4563572.443 ops/s
Iteration  14: 4563757.188 ops/s
Iteration  15: 4548317.404 ops/s
Iteration  16: 4546497.105 ops/s
Iteration  17: 4541842.102 ops/s
Iteration  18: 4546200.762 ops/s
Iteration  19: 4558201.269 ops/s
Iteration  20: 4577974.924 ops/s
Iteration  21: 4545174.909 ops/s
Iteration  22: 4575781.662 ops/s
Iteration  23: 4556343.217 ops/s
Iteration  24: 4575395.897 ops/s
Iteration  25: 4570757.693 ops/s
Iteration  26: 4566962.384 ops/s
Iteration  27: 4562238.986 ops/s
Iteration  28: 4533909.265 ops/s
Iteration  29: 4539647.152 ops/s
Iteration  30: 4526591.952 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_small":
  4556412.133 ±(99.9%) 9333.582 ops/s [Average]
  (min, avg, max) = (4526591.952, 4556412.133, 4577974.924), stdev = 13970.067
  CI (99.9%): [4547078.551, 4565745.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_small  thrpt   30  4556412.133 ± 9333.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 839153.360 ops/s
# Warmup Iteration   2: 884113.558 ops/s
# Warmup Iteration   3: 1213452.722 ops/s
# Warmup Iteration   4: 1292365.766 ops/s
# Warmup Iteration   5: 1291443.951 ops/s
# Warmup Iteration   6: 1280846.251 ops/s
# Warmup Iteration   7: 1287039.717 ops/s
# Warmup Iteration   8: 1288552.729 ops/s
# Warmup Iteration   9: 1288451.568 ops/s
# Warmup Iteration  10: 1289873.569 ops/s
# Warmup Iteration  11: 1234484.642 ops/s
# Warmup Iteration  12: 1118693.541 ops/s
# Warmup Iteration  13: 1289095.895 ops/s
# Warmup Iteration  14: 1289158.770 ops/s
# Warmup Iteration  15: 1289017.304 ops/s
# Warmup Iteration  16: 1287987.122 ops/s
# Warmup Iteration  17: 1293036.049 ops/s
# Warmup Iteration  18: 1291900.405 ops/s
# Warmup Iteration  19: 1291640.202 ops/s
# Warmup Iteration  20: 1294009.905 ops/s
# Warmup Iteration  21: 1293244.620 ops/s
# Warmup Iteration  22: 1288031.947 ops/s
# Warmup Iteration  23: 1295059.828 ops/s
# Warmup Iteration  24: 1291198.839 ops/s
# Warmup Iteration  25: 1295314.949 ops/s
# Warmup Iteration  26: 1292733.996 ops/s
# Warmup Iteration  27: 1293805.210 ops/s
# Warmup Iteration  28: 1291562.312 ops/s
# Warmup Iteration  29: 1290506.675 ops/s
# Warmup Iteration  30: 1291769.850 ops/s
Iteration   1: 1293056.898 ops/s
Iteration   2: 1293946.409 ops/s
Iteration   3: 1296935.156 ops/s
Iteration   4: 1296867.563 ops/s
Iteration   5: 1289586.981 ops/s
Iteration   6: 1292525.936 ops/s
Iteration   7: 1290743.112 ops/s
Iteration   8: 1292661.467 ops/s
Iteration   9: 1295434.730 ops/s
Iteration  10: 1291408.538 ops/s
Iteration  11: 1293681.921 ops/s
Iteration  12: 1291317.875 ops/s
Iteration  13: 1292959.863 ops/s
Iteration  14: 1291863.073 ops/s
Iteration  15: 1291729.395 ops/s
Iteration  16: 1295152.851 ops/s
Iteration  17: 1298368.060 ops/s
Iteration  18: 1289557.852 ops/s
Iteration  19: 1296208.363 ops/s
Iteration  20: 1295594.699 ops/s
Iteration  21: 1290880.213 ops/s
Iteration  22: 1284270.751 ops/s
Iteration  23: 1287242.437 ops/s
Iteration  24: 1295440.293 ops/s
Iteration  25: 1296055.331 ops/s
Iteration  26: 1290932.721 ops/s
Iteration  27: 1293259.206 ops/s
Iteration  28: 1293575.748 ops/s
Iteration  29: 1294051.495 ops/s
Iteration  30: 1297051.796 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator":
  1293078.691 ±(99.9%) 2063.202 ops/s [Average]
  (min, avg, max) = (1284270.751, 1293078.691, 1298368.060), stdev = 3088.104
  CI (99.9%): [1291015.489, 1295141.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  1293078.691 ± 2063.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4737.997 ops/s
# Warmup Iteration   2: 5157.487 ops/s
# Warmup Iteration   3: 5183.018 ops/s
# Warmup Iteration   4: 6030.242 ops/s
# Warmup Iteration   5: 6072.537 ops/s
# Warmup Iteration   6: 6038.163 ops/s
# Warmup Iteration   7: 5995.475 ops/s
# Warmup Iteration   8: 5993.968 ops/s
# Warmup Iteration   9: 5917.610 ops/s
# Warmup Iteration  10: 5989.864 ops/s
# Warmup Iteration  11: 5894.583 ops/s
# Warmup Iteration  12: 5988.231 ops/s
# Warmup Iteration  13: 5993.421 ops/s
# Warmup Iteration  14: 5984.483 ops/s
# Warmup Iteration  15: 5996.017 ops/s
# Warmup Iteration  16: 5990.808 ops/s
# Warmup Iteration  17: 5986.197 ops/s
# Warmup Iteration  18: 5992.691 ops/s
# Warmup Iteration  19: 5676.926 ops/s
# Warmup Iteration  20: 5466.852 ops/s
# Warmup Iteration  21: 5994.278 ops/s
# Warmup Iteration  22: 5992.183 ops/s
# Warmup Iteration  23: 6004.463 ops/s
# Warmup Iteration  24: 5986.294 ops/s
# Warmup Iteration  25: 6001.767 ops/s
# Warmup Iteration  26: 5991.228 ops/s
# Warmup Iteration  27: 6002.067 ops/s
# Warmup Iteration  28: 5991.364 ops/s
# Warmup Iteration  29: 5997.888 ops/s
# Warmup Iteration  30: 5998.391 ops/s
Iteration   1: 5982.836 ops/s
Iteration   2: 5994.503 ops/s
Iteration   3: 5999.032 ops/s
Iteration   4: 5987.727 ops/s
Iteration   5: 5989.039 ops/s
Iteration   6: 5995.005 ops/s
Iteration   7: 5972.535 ops/s
Iteration   8: 5983.793 ops/s
Iteration   9: 5973.012 ops/s
Iteration  10: 5968.811 ops/s
Iteration  11: 5996.414 ops/s
Iteration  12: 5993.621 ops/s
Iteration  13: 6003.275 ops/s
Iteration  14: 6005.044 ops/s
Iteration  15: 5974.667 ops/s
Iteration  16: 5988.559 ops/s
Iteration  17: 5979.419 ops/s
Iteration  18: 5968.449 ops/s
Iteration  19: 5990.847 ops/s
Iteration  20: 6000.879 ops/s
Iteration  21: 6007.637 ops/s
Iteration  22: 5976.841 ops/s
Iteration  23: 5973.932 ops/s
Iteration  24: 6005.894 ops/s
Iteration  25: 5991.567 ops/s
Iteration  26: 5987.668 ops/s
Iteration  27: 6012.903 ops/s
Iteration  28: 6007.981 ops/s
Iteration  29: 5982.535 ops/s
Iteration  30: 5984.127 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_large":
  5989.285 ±(99.9%) 8.397 ops/s [Average]
  (min, avg, max) = (5968.449, 5989.285, 6012.903), stdev = 12.568
  CI (99.9%): [5980.888, 5997.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt     Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  5989.285 ± 8.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2234717.530 ops/s
# Warmup Iteration   2: 4664408.401 ops/s
# Warmup Iteration   3: 4961231.686 ops/s
# Warmup Iteration   4: 4971007.605 ops/s
# Warmup Iteration   5: 4131511.006 ops/s
# Warmup Iteration   6: 4986090.928 ops/s
# Warmup Iteration   7: 4986236.980 ops/s
# Warmup Iteration   8: 4983836.202 ops/s
# Warmup Iteration   9: 4980831.630 ops/s
# Warmup Iteration  10: 4978408.036 ops/s
# Warmup Iteration  11: 4973483.646 ops/s
# Warmup Iteration  12: 4985827.454 ops/s
# Warmup Iteration  13: 4982481.010 ops/s
# Warmup Iteration  14: 4973579.328 ops/s
# Warmup Iteration  15: 4990140.674 ops/s
# Warmup Iteration  16: 4975946.896 ops/s
# Warmup Iteration  17: 4971835.679 ops/s
# Warmup Iteration  18: 4980818.173 ops/s
# Warmup Iteration  19: 4984305.268 ops/s
# Warmup Iteration  20: 4989369.490 ops/s
# Warmup Iteration  21: 4981046.186 ops/s
# Warmup Iteration  22: 4980838.784 ops/s
# Warmup Iteration  23: 4977517.865 ops/s
# Warmup Iteration  24: 4974551.351 ops/s
# Warmup Iteration  25: 4981664.414 ops/s
# Warmup Iteration  26: 4982237.055 ops/s
# Warmup Iteration  27: 4965825.997 ops/s
# Warmup Iteration  28: 4984076.526 ops/s
# Warmup Iteration  29: 4974802.673 ops/s
# Warmup Iteration  30: 4973864.978 ops/s
Iteration   1: 4980818.948 ops/s
Iteration   2: 4977216.932 ops/s
Iteration   3: 4983600.458 ops/s
Iteration   4: 4982129.129 ops/s
Iteration   5: 4966554.771 ops/s
Iteration   6: 4972718.298 ops/s
Iteration   7: 4989040.276 ops/s
Iteration   8: 4974910.163 ops/s
Iteration   9: 4959805.903 ops/s
Iteration  10: 4969856.815 ops/s
Iteration  11: 4998854.747 ops/s
Iteration  12: 5000101.854 ops/s
Iteration  13: 4981993.405 ops/s
Iteration  14: 4982706.761 ops/s
Iteration  15: 4985625.686 ops/s
Iteration  16: 4981690.951 ops/s
Iteration  17: 4991026.723 ops/s
Iteration  18: 4971099.668 ops/s
Iteration  19: 4983537.525 ops/s
Iteration  20: 4962726.934 ops/s
Iteration  21: 4995408.580 ops/s
Iteration  22: 4967216.665 ops/s
Iteration  23: 4987533.895 ops/s
Iteration  24: 4985824.284 ops/s
Iteration  25: 4978737.848 ops/s
Iteration  26: 4974632.418 ops/s
Iteration  27: 4975593.171 ops/s
Iteration  28: 4981144.072 ops/s
Iteration  29: 4975548.036 ops/s
Iteration  30: 4973831.050 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_small":
  4979716.199 ±(99.9%) 6556.965 ops/s [Average]
  (min, avg, max) = (4959805.903, 4979716.199, 5000101.854), stdev = 9814.157
  CI (99.9%): [4973159.234, 4986273.164] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  4979716.199 ± 6556.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1731005.332 ops/s
# Warmup Iteration   2: 3969972.526 ops/s
# Warmup Iteration   3: 3717431.960 ops/s
# Warmup Iteration   4: 3786508.578 ops/s
# Warmup Iteration   5: 4095061.373 ops/s
# Warmup Iteration   6: 4097581.251 ops/s
# Warmup Iteration   7: 4089295.701 ops/s
# Warmup Iteration   8: 4082576.875 ops/s
# Warmup Iteration   9: 4074217.722 ops/s
# Warmup Iteration  10: 4083566.112 ops/s
# Warmup Iteration  11: 4081929.413 ops/s
# Warmup Iteration  12: 4084776.597 ops/s
# Warmup Iteration  13: 4087124.063 ops/s
# Warmup Iteration  14: 4082977.000 ops/s
# Warmup Iteration  15: 4096970.996 ops/s
# Warmup Iteration  16: 4090862.509 ops/s
# Warmup Iteration  17: 4085976.574 ops/s
# Warmup Iteration  18: 4090732.547 ops/s
# Warmup Iteration  19: 4097320.344 ops/s
# Warmup Iteration  20: 4086833.094 ops/s
# Warmup Iteration  21: 4092436.688 ops/s
# Warmup Iteration  22: 4090545.038 ops/s
# Warmup Iteration  23: 4086904.450 ops/s
# Warmup Iteration  24: 4084120.931 ops/s
# Warmup Iteration  25: 4097892.939 ops/s
# Warmup Iteration  26: 4090478.732 ops/s
# Warmup Iteration  27: 4089947.200 ops/s
# Warmup Iteration  28: 4087827.890 ops/s
# Warmup Iteration  29: 4092267.593 ops/s
# Warmup Iteration  30: 4086758.299 ops/s
Iteration   1: 4067431.263 ops/s
Iteration   2: 4072198.477 ops/s
Iteration   3: 4077915.038 ops/s
Iteration   4: 4085289.588 ops/s
Iteration   5: 4093491.752 ops/s
Iteration   6: 4086860.489 ops/s
Iteration   7: 4095785.429 ops/s
Iteration   8: 4094531.817 ops/s
Iteration   9: 4098523.914 ops/s
Iteration  10: 4078536.047 ops/s
Iteration  11: 4094536.201 ops/s
Iteration  12: 4092173.566 ops/s
Iteration  13: 4096623.069 ops/s
Iteration  14: 4090744.251 ops/s
Iteration  15: 4089267.604 ops/s
Iteration  16: 4100167.657 ops/s
Iteration  17: 4095672.648 ops/s
Iteration  18: 4092035.218 ops/s
Iteration  19: 4084594.209 ops/s
Iteration  20: 4094577.713 ops/s
Iteration  21: 4092703.972 ops/s
Iteration  22: 4085697.612 ops/s
Iteration  23: 4090768.158 ops/s
Iteration  24: 4100741.148 ops/s
Iteration  25: 4084567.453 ops/s
Iteration  26: 4102995.748 ops/s
Iteration  27: 4084812.786 ops/s
Iteration  28: 4105837.232 ops/s
Iteration  29: 4101264.120 ops/s
Iteration  30: 4092646.945 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sortThis_with_null":
  4090766.371 ±(99.9%) 5909.644 ops/s [Average]
  (min, avg, max) = (4067431.263, 4090766.371, 4105837.232), stdev = 8845.277
  CI (99.9%): [4084856.727, 4096676.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  4090766.371 ± 5909.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77586.240 ops/s
# Warmup Iteration   2: 150485.571 ops/s
# Warmup Iteration   3: 181860.135 ops/s
# Warmup Iteration   4: 182463.897 ops/s
# Warmup Iteration   5: 184167.485 ops/s
# Warmup Iteration   6: 158206.421 ops/s
# Warmup Iteration   7: 184575.600 ops/s
# Warmup Iteration   8: 184478.712 ops/s
# Warmup Iteration   9: 184872.842 ops/s
# Warmup Iteration  10: 183389.705 ops/s
# Warmup Iteration  11: 183012.818 ops/s
# Warmup Iteration  12: 184622.263 ops/s
# Warmup Iteration  13: 184539.937 ops/s
# Warmup Iteration  14: 184957.123 ops/s
# Warmup Iteration  15: 185170.016 ops/s
# Warmup Iteration  16: 184756.552 ops/s
# Warmup Iteration  17: 183986.984 ops/s
# Warmup Iteration  18: 184246.344 ops/s
# Warmup Iteration  19: 185083.972 ops/s
# Warmup Iteration  20: 184368.908 ops/s
# Warmup Iteration  21: 184709.536 ops/s
# Warmup Iteration  22: 184948.724 ops/s
# Warmup Iteration  23: 184233.366 ops/s
# Warmup Iteration  24: 184196.521 ops/s
# Warmup Iteration  25: 184806.981 ops/s
# Warmup Iteration  26: 184740.478 ops/s
# Warmup Iteration  27: 184768.977 ops/s
# Warmup Iteration  28: 185263.033 ops/s
# Warmup Iteration  29: 184597.232 ops/s
# Warmup Iteration  30: 184508.208 ops/s
Iteration   1: 183872.587 ops/s
Iteration   2: 183986.943 ops/s
Iteration   3: 184692.757 ops/s
Iteration   4: 184449.931 ops/s
Iteration   5: 185202.710 ops/s
Iteration   6: 183321.729 ops/s
Iteration   7: 184750.722 ops/s
Iteration   8: 184352.224 ops/s
Iteration   9: 184139.240 ops/s
Iteration  10: 184070.189 ops/s
Iteration  11: 183608.411 ops/s
Iteration  12: 183863.391 ops/s
Iteration  13: 184747.877 ops/s
Iteration  14: 184193.101 ops/s
Iteration  15: 183817.632 ops/s
Iteration  16: 185850.327 ops/s
Iteration  17: 186048.167 ops/s
Iteration  18: 186019.857 ops/s
Iteration  19: 185086.538 ops/s
Iteration  20: 185965.334 ops/s
Iteration  21: 185137.803 ops/s
Iteration  22: 185807.452 ops/s
Iteration  23: 184359.288 ops/s
Iteration  24: 185445.683 ops/s
Iteration  25: 186294.748 ops/s
Iteration  26: 186394.810 ops/s
Iteration  27: 185951.344 ops/s
Iteration  28: 185410.205 ops/s
Iteration  29: 185618.117 ops/s
Iteration  30: 185036.266 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subList":
  184916.513 ±(99.9%) 594.104 ops/s [Average]
  (min, avg, max) = (183321.729, 184916.513, 186394.810), stdev = 889.227
  CI (99.9%): [184322.409, 185510.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_subList  thrpt   30  184916.513 ± 594.104  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697571.542 ops/s
# Warmup Iteration   2: 759230.561 ops/s
# Warmup Iteration   3: 1006852.479 ops/s
# Warmup Iteration   4: 1007607.359 ops/s
# Warmup Iteration   5: 1004599.460 ops/s
# Warmup Iteration   6: 1001809.499 ops/s
# Warmup Iteration   7: 1006317.360 ops/s
# Warmup Iteration   8: 1004375.287 ops/s
# Warmup Iteration   9: 1003083.123 ops/s
# Warmup Iteration  10: 969812.642 ops/s
# Warmup Iteration  11: 877739.077 ops/s
# Warmup Iteration  12: 1005612.405 ops/s
# Warmup Iteration  13: 1004600.430 ops/s
# Warmup Iteration  14: 1008032.539 ops/s
# Warmup Iteration  15: 1005888.404 ops/s
# Warmup Iteration  16: 1004126.706 ops/s
# Warmup Iteration  17: 1069096.334 ops/s
# Warmup Iteration  18: 1071729.430 ops/s
# Warmup Iteration  19: 1068408.794 ops/s
# Warmup Iteration  20: 1066102.716 ops/s
# Warmup Iteration  21: 1067794.913 ops/s
# Warmup Iteration  22: 1072338.617 ops/s
# Warmup Iteration  23: 1069460.716 ops/s
# Warmup Iteration  24: 1066373.652 ops/s
# Warmup Iteration  25: 1058173.782 ops/s
# Warmup Iteration  26: 1063682.565 ops/s
# Warmup Iteration  27: 1067118.225 ops/s
# Warmup Iteration  28: 1064789.147 ops/s
# Warmup Iteration  29: 1062424.484 ops/s
# Warmup Iteration  30: 1064050.788 ops/s
Iteration   1: 1061623.734 ops/s
Iteration   2: 1067518.804 ops/s
Iteration   3: 1062021.589 ops/s
Iteration   4: 1063296.216 ops/s
Iteration   5: 1068232.076 ops/s
Iteration   6: 1066232.739 ops/s
Iteration   7: 1066794.443 ops/s
Iteration   8: 1069328.079 ops/s
Iteration   9: 1067364.437 ops/s
Iteration  10: 1067365.721 ops/s
Iteration  11: 1067449.491 ops/s
Iteration  12: 1064688.473 ops/s
Iteration  13: 1061976.488 ops/s
Iteration  14: 1067029.243 ops/s
Iteration  15: 1066398.493 ops/s
Iteration  16: 1068502.197 ops/s
Iteration  17: 1070374.720 ops/s
Iteration  18: 1066748.871 ops/s
Iteration  19: 1066143.574 ops/s
Iteration  20: 1067553.468 ops/s
Iteration  21: 1067650.472 ops/s
Iteration  22: 1070968.911 ops/s
Iteration  23: 1064137.060 ops/s
Iteration  24: 1067312.664 ops/s
Iteration  25: 1069789.756 ops/s
Iteration  26: 1067156.911 ops/s
Iteration  27: 1065009.954 ops/s
Iteration  28: 1069253.075 ops/s
Iteration  29: 1066919.528 ops/s
Iteration  30: 1065113.262 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromGreaterThanToException":
  1066665.148 ±(99.9%) 1583.569 ops/s [Average]
  (min, avg, max) = (1061623.734, 1066665.148, 1070968.911), stdev = 2370.212
  CI (99.9%): [1065081.579, 1068248.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  1066665.148 ± 1583.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707978.126 ops/s
# Warmup Iteration   2: 761112.735 ops/s
# Warmup Iteration   3: 1016274.581 ops/s
# Warmup Iteration   4: 1012854.600 ops/s
# Warmup Iteration   5: 1013620.774 ops/s
# Warmup Iteration   6: 1013444.642 ops/s
# Warmup Iteration   7: 1013521.721 ops/s
# Warmup Iteration   8: 1013687.957 ops/s
# Warmup Iteration   9: 1011487.619 ops/s
# Warmup Iteration  10: 1013145.605 ops/s
# Warmup Iteration  11: 842090.106 ops/s
# Warmup Iteration  12: 1014617.000 ops/s
# Warmup Iteration  13: 1009314.443 ops/s
# Warmup Iteration  14: 1012083.178 ops/s
# Warmup Iteration  15: 1010124.784 ops/s
# Warmup Iteration  16: 1008753.429 ops/s
# Warmup Iteration  17: 1071276.354 ops/s
# Warmup Iteration  18: 1071573.910 ops/s
# Warmup Iteration  19: 1067687.868 ops/s
# Warmup Iteration  20: 1075862.534 ops/s
# Warmup Iteration  21: 1069788.742 ops/s
# Warmup Iteration  22: 1072034.608 ops/s
# Warmup Iteration  23: 1073243.903 ops/s
# Warmup Iteration  24: 1070381.721 ops/s
# Warmup Iteration  25: 1071884.631 ops/s
# Warmup Iteration  26: 1074600.286 ops/s
# Warmup Iteration  27: 1073272.612 ops/s
# Warmup Iteration  28: 1069324.188 ops/s
# Warmup Iteration  29: 1074692.619 ops/s
# Warmup Iteration  30: 1073697.773 ops/s
Iteration   1: 1075267.518 ops/s
Iteration   2: 1072187.103 ops/s
Iteration   3: 1075493.923 ops/s
Iteration   4: 1072704.235 ops/s
Iteration   5: 1081300.867 ops/s
Iteration   6: 1057797.445 ops/s
Iteration   7: 1077809.274 ops/s
Iteration   8: 1077333.396 ops/s
Iteration   9: 1073745.770 ops/s
Iteration  10: 1070605.378 ops/s
Iteration  11: 1072866.957 ops/s
Iteration  12: 1080031.842 ops/s
Iteration  13: 1073043.435 ops/s
Iteration  14: 1074074.955 ops/s
Iteration  15: 1070705.704 ops/s
Iteration  16: 1079143.669 ops/s
Iteration  17: 1073979.578 ops/s
Iteration  18: 1074517.366 ops/s
Iteration  19: 1068434.516 ops/s
Iteration  20: 1077177.006 ops/s
Iteration  21: 1078686.362 ops/s
Iteration  22: 1074889.742 ops/s
Iteration  23: 1076431.449 ops/s
Iteration  24: 1073797.320 ops/s
Iteration  25: 1073679.812 ops/s
Iteration  26: 1077973.417 ops/s
Iteration  27: 1079328.516 ops/s
Iteration  28: 1076505.056 ops/s
Iteration  29: 1074896.590 ops/s
Iteration  30: 1077789.099 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  1074739.910 ±(99.9%) 2928.249 ops/s [Average]
  (min, avg, max) = (1057797.445, 1074739.910, 1081300.867), stdev = 4382.865
  CI (99.9%): [1071811.661, 1077668.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  1074739.910 ± 2928.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707776.449 ops/s
# Warmup Iteration   2: 758116.336 ops/s
# Warmup Iteration   3: 1025626.036 ops/s
# Warmup Iteration   4: 1023764.473 ops/s
# Warmup Iteration   5: 1024056.271 ops/s
# Warmup Iteration   6: 1021631.292 ops/s
# Warmup Iteration   7: 1022145.711 ops/s
# Warmup Iteration   8: 1020444.124 ops/s
# Warmup Iteration   9: 1022829.929 ops/s
# Warmup Iteration  10: 1023906.858 ops/s
# Warmup Iteration  11: 851589.005 ops/s
# Warmup Iteration  12: 1024887.868 ops/s
# Warmup Iteration  13: 1023824.277 ops/s
# Warmup Iteration  14: 1025994.719 ops/s
# Warmup Iteration  15: 1025355.861 ops/s
# Warmup Iteration  16: 1025414.028 ops/s
# Warmup Iteration  17: 1094445.539 ops/s
# Warmup Iteration  18: 1089764.328 ops/s
# Warmup Iteration  19: 1090890.358 ops/s
# Warmup Iteration  20: 1086963.921 ops/s
# Warmup Iteration  21: 1090196.060 ops/s
# Warmup Iteration  22: 1089137.559 ops/s
# Warmup Iteration  23: 1088868.438 ops/s
# Warmup Iteration  24: 1087297.063 ops/s
# Warmup Iteration  25: 1087585.907 ops/s
# Warmup Iteration  26: 1088254.956 ops/s
# Warmup Iteration  27: 1087753.524 ops/s
# Warmup Iteration  28: 1091137.697 ops/s
# Warmup Iteration  29: 1089037.226 ops/s
# Warmup Iteration  30: 1089529.147 ops/s
Iteration   1: 1089524.911 ops/s
Iteration   2: 1092537.172 ops/s
Iteration   3: 1092303.174 ops/s
Iteration   4: 1087871.029 ops/s
Iteration   5: 1090677.782 ops/s
Iteration   6: 1090873.480 ops/s
Iteration   7: 1089487.583 ops/s
Iteration   8: 1092770.172 ops/s
Iteration   9: 1090879.359 ops/s
Iteration  10: 1093705.589 ops/s
Iteration  11: 1086757.147 ops/s
Iteration  12: 1089293.805 ops/s
Iteration  13: 1089197.340 ops/s
Iteration  14: 1090127.830 ops/s
Iteration  15: 1095865.158 ops/s
Iteration  16: 1088872.104 ops/s
Iteration  17: 1090520.559 ops/s
Iteration  18: 1087944.850 ops/s
Iteration  19: 1095100.152 ops/s
Iteration  20: 1091606.265 ops/s
Iteration  21: 1085069.488 ops/s
Iteration  22: 1089315.753 ops/s
Iteration  23: 1083142.133 ops/s
Iteration  24: 1085709.830 ops/s
Iteration  25: 1086307.977 ops/s
Iteration  26: 1092429.364 ops/s
Iteration  27: 1089527.755 ops/s
Iteration  28: 1094618.551 ops/s
Iteration  29: 1091799.595 ops/s
Iteration  30: 1093189.653 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  1090234.185 ±(99.9%) 2014.547 ops/s [Average]
  (min, avg, max) = (1083142.133, 1090234.185, 1095865.158), stdev = 3015.280
  CI (99.9%): [1088219.638, 1092248.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  1090234.185 ± 2014.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1304926.279 ops/s
# Warmup Iteration   2: 2153485.244 ops/s
# Warmup Iteration   3: 2487985.620 ops/s
# Warmup Iteration   4: 2502781.008 ops/s
# Warmup Iteration   5: 2501292.386 ops/s
# Warmup Iteration   6: 2068572.212 ops/s
# Warmup Iteration   7: 2494798.136 ops/s
# Warmup Iteration   8: 2504009.286 ops/s
# Warmup Iteration   9: 2509669.524 ops/s
# Warmup Iteration  10: 2496581.855 ops/s
# Warmup Iteration  11: 2510824.083 ops/s
# Warmup Iteration  12: 2512865.763 ops/s
# Warmup Iteration  13: 2502765.413 ops/s
# Warmup Iteration  14: 2499869.460 ops/s
# Warmup Iteration  15: 2504398.413 ops/s
# Warmup Iteration  16: 2513844.028 ops/s
# Warmup Iteration  17: 2513155.252 ops/s
# Warmup Iteration  18: 2509641.726 ops/s
# Warmup Iteration  19: 2507471.563 ops/s
# Warmup Iteration  20: 2508449.187 ops/s
# Warmup Iteration  21: 2506309.843 ops/s
# Warmup Iteration  22: 2505849.806 ops/s
# Warmup Iteration  23: 2511490.250 ops/s
# Warmup Iteration  24: 2505654.392 ops/s
# Warmup Iteration  25: 2509256.499 ops/s
# Warmup Iteration  26: 2508697.529 ops/s
# Warmup Iteration  27: 2501899.956 ops/s
# Warmup Iteration  28: 2503671.611 ops/s
# Warmup Iteration  29: 2507132.869 ops/s
# Warmup Iteration  30: 2505243.190 ops/s
Iteration   1: 2513445.373 ops/s
Iteration   2: 2503247.251 ops/s
Iteration   3: 2509747.260 ops/s
Iteration   4: 2498376.568 ops/s
Iteration   5: 2504909.032 ops/s
Iteration   6: 2506939.679 ops/s
Iteration   7: 2501503.406 ops/s
Iteration   8: 2508823.660 ops/s
Iteration   9: 2495049.897 ops/s
Iteration  10: 2503203.781 ops/s
Iteration  11: 2505306.732 ops/s
Iteration  12: 2495841.080 ops/s
Iteration  13: 2502523.885 ops/s
Iteration  14: 2514599.742 ops/s
Iteration  15: 2506869.323 ops/s
Iteration  16: 2509736.539 ops/s
Iteration  17: 2502164.985 ops/s
Iteration  18: 2502314.655 ops/s
Iteration  19: 2511340.795 ops/s
Iteration  20: 2500668.427 ops/s
Iteration  21: 2511470.886 ops/s
Iteration  22: 2503546.151 ops/s
Iteration  23: 2504397.413 ops/s
Iteration  24: 2511539.981 ops/s
Iteration  25: 2507682.347 ops/s
Iteration  26: 2511608.665 ops/s
Iteration  27: 2503031.219 ops/s
Iteration  28: 2506705.817 ops/s
Iteration  29: 2513723.792 ops/s
Iteration  30: 2507404.064 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDouble":
  2505924.080 ±(99.9%) 3413.728 ops/s [Average]
  (min, avg, max) = (2495049.897, 2505924.080, 2514599.742), stdev = 5109.508
  CI (99.9%): [2502510.352, 2509337.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2505924.080 ± 3413.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55.955 ops/s
# Warmup Iteration   2: 64.093 ops/s
# Warmup Iteration   3: 85.124 ops/s
# Warmup Iteration   4: 86.956 ops/s
# Warmup Iteration   5: 89.455 ops/s
# Warmup Iteration   6: 91.810 ops/s
# Warmup Iteration   7: 88.475 ops/s
# Warmup Iteration   8: 89.580 ops/s
# Warmup Iteration   9: 92.469 ops/s
# Warmup Iteration  10: 90.800 ops/s
# Warmup Iteration  11: 78.152 ops/s
# Warmup Iteration  12: 90.793 ops/s
# Warmup Iteration  13: 92.707 ops/s
# Warmup Iteration  14: 90.332 ops/s
# Warmup Iteration  15: 91.965 ops/s
# Warmup Iteration  16: 92.812 ops/s
# Warmup Iteration  17: 92.804 ops/s
# Warmup Iteration  18: 93.422 ops/s
# Warmup Iteration  19: 90.152 ops/s
# Warmup Iteration  20: 88.133 ops/s
# Warmup Iteration  21: 89.118 ops/s
# Warmup Iteration  22: 93.147 ops/s
# Warmup Iteration  23: 91.544 ops/s
# Warmup Iteration  24: 91.469 ops/s
# Warmup Iteration  25: 89.868 ops/s
# Warmup Iteration  26: 92.265 ops/s
# Warmup Iteration  27: 90.703 ops/s
# Warmup Iteration  28: 92.327 ops/s
# Warmup Iteration  29: 92.643 ops/s
# Warmup Iteration  30: 91.012 ops/s
Iteration   1: 90.405 ops/s
Iteration   2: 90.259 ops/s
Iteration   3: 92.172 ops/s
Iteration   4: 89.274 ops/s
Iteration   5: 91.129 ops/s
Iteration   6: 90.477 ops/s
Iteration   7: 88.826 ops/s
Iteration   8: 88.377 ops/s
Iteration   9: 91.929 ops/s
Iteration  10: 91.046 ops/s
Iteration  11: 88.952 ops/s
Iteration  12: 89.427 ops/s
Iteration  13: 85.788 ops/s
Iteration  14: 87.887 ops/s
Iteration  15: 87.764 ops/s
Iteration  16: 90.371 ops/s
Iteration  17: 90.791 ops/s
Iteration  18: 88.378 ops/s
Iteration  19: 86.012 ops/s
Iteration  20: 90.159 ops/s
Iteration  21: 90.629 ops/s
Iteration  22: 92.221 ops/s
Iteration  23: 89.721 ops/s
Iteration  24: 90.032 ops/s
Iteration  25: 90.677 ops/s
Iteration  26: 91.385 ops/s
Iteration  27: 90.401 ops/s
Iteration  28: 91.734 ops/s
Iteration  29: 92.353 ops/s
Iteration  30: 89.697 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  89.942 ±(99.9%) 1.111 ops/s [Average]
  (min, avg, max) = (85.788, 89.942, 92.353), stdev = 1.663
  CI (99.9%): [88.831, 91.054] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  89.942 ± 1.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1257034.063 ops/s
# Warmup Iteration   2: 1978093.040 ops/s
# Warmup Iteration   3: 2332486.836 ops/s
# Warmup Iteration   4: 2351709.089 ops/s
# Warmup Iteration   5: 2349869.385 ops/s
# Warmup Iteration   6: 2310064.648 ops/s
# Warmup Iteration   7: 1980353.009 ops/s
# Warmup Iteration   8: 2349306.005 ops/s
# Warmup Iteration   9: 2349161.000 ops/s
# Warmup Iteration  10: 2353081.995 ops/s
# Warmup Iteration  11: 2349027.687 ops/s
# Warmup Iteration  12: 2353050.691 ops/s
# Warmup Iteration  13: 2345037.388 ops/s
# Warmup Iteration  14: 2348009.805 ops/s
# Warmup Iteration  15: 2348963.284 ops/s
# Warmup Iteration  16: 2347049.065 ops/s
# Warmup Iteration  17: 2356008.606 ops/s
# Warmup Iteration  18: 2347951.202 ops/s
# Warmup Iteration  19: 2352839.903 ops/s
# Warmup Iteration  20: 2348099.514 ops/s
# Warmup Iteration  21: 2355517.762 ops/s
# Warmup Iteration  22: 2349324.363 ops/s
# Warmup Iteration  23: 2345624.067 ops/s
# Warmup Iteration  24: 2348163.372 ops/s
# Warmup Iteration  25: 2344454.483 ops/s
# Warmup Iteration  26: 2350757.404 ops/s
# Warmup Iteration  27: 2349812.302 ops/s
# Warmup Iteration  28: 2349605.611 ops/s
# Warmup Iteration  29: 2349140.929 ops/s
# Warmup Iteration  30: 2349079.525 ops/s
Iteration   1: 2353755.310 ops/s
Iteration   2: 2348287.663 ops/s
Iteration   3: 2344920.092 ops/s
Iteration   4: 2344715.594 ops/s
Iteration   5: 2347568.697 ops/s
Iteration   6: 2346442.517 ops/s
Iteration   7: 2349100.901 ops/s
Iteration   8: 2352896.818 ops/s
Iteration   9: 2353098.940 ops/s
Iteration  10: 2357541.253 ops/s
Iteration  11: 2342644.340 ops/s
Iteration  12: 2355364.405 ops/s
Iteration  13: 2353148.694 ops/s
Iteration  14: 2359134.282 ops/s
Iteration  15: 2350769.185 ops/s
Iteration  16: 2343548.881 ops/s
Iteration  17: 2345651.756 ops/s
Iteration  18: 2356804.873 ops/s
Iteration  19: 2345185.473 ops/s
Iteration  20: 2346199.009 ops/s
Iteration  21: 2352500.638 ops/s
Iteration  22: 2355712.843 ops/s
Iteration  23: 2338730.680 ops/s
Iteration  24: 2354984.439 ops/s
Iteration  25: 2345050.025 ops/s
Iteration  26: 2354798.539 ops/s
Iteration  27: 2340385.356 ops/s
Iteration  28: 2348993.414 ops/s
Iteration  29: 2351205.181 ops/s
Iteration  30: 2352573.655 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloat":
  2349723.782 ±(99.9%) 3560.892 ops/s [Average]
  (min, avg, max) = (2338730.680, 2349723.782, 2359134.282), stdev = 5329.776
  CI (99.9%): [2346162.889, 2353284.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2349723.782 ± 3560.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.693 ops/s
# Warmup Iteration   2: 64.363 ops/s
# Warmup Iteration   3: 82.300 ops/s
# Warmup Iteration   4: 87.677 ops/s
# Warmup Iteration   5: 90.128 ops/s
# Warmup Iteration   6: 90.315 ops/s
# Warmup Iteration   7: 90.932 ops/s
# Warmup Iteration   8: 92.174 ops/s
# Warmup Iteration   9: 92.684 ops/s
# Warmup Iteration  10: 90.244 ops/s
# Warmup Iteration  11: 76.067 ops/s
# Warmup Iteration  12: 91.929 ops/s
# Warmup Iteration  13: 93.936 ops/s
# Warmup Iteration  14: 91.690 ops/s
# Warmup Iteration  15: 89.091 ops/s
# Warmup Iteration  16: 88.004 ops/s
# Warmup Iteration  17: 90.125 ops/s
# Warmup Iteration  18: 90.109 ops/s
# Warmup Iteration  19: 89.434 ops/s
# Warmup Iteration  20: 92.594 ops/s
# Warmup Iteration  21: 90.897 ops/s
# Warmup Iteration  22: 89.388 ops/s
# Warmup Iteration  23: 88.904 ops/s
# Warmup Iteration  24: 89.981 ops/s
# Warmup Iteration  25: 90.206 ops/s
# Warmup Iteration  26: 93.663 ops/s
# Warmup Iteration  27: 88.791 ops/s
# Warmup Iteration  28: 88.082 ops/s
# Warmup Iteration  29: 87.214 ops/s
# Warmup Iteration  30: 91.258 ops/s
Iteration   1: 88.826 ops/s
Iteration   2: 91.240 ops/s
Iteration   3: 91.381 ops/s
Iteration   4: 86.337 ops/s
Iteration   5: 88.187 ops/s
Iteration   6: 89.330 ops/s
Iteration   7: 88.923 ops/s
Iteration   8: 81.410 ops/s
Iteration   9: 86.383 ops/s
Iteration  10: 87.917 ops/s
Iteration  11: 91.874 ops/s
Iteration  12: 86.860 ops/s
Iteration  13: 89.546 ops/s
Iteration  14: 83.457 ops/s
Iteration  15: 84.580 ops/s
Iteration  16: 86.133 ops/s
Iteration  17: 87.704 ops/s
Iteration  18: 91.088 ops/s
Iteration  19: 91.419 ops/s
Iteration  20: 84.119 ops/s
Iteration  21: 87.888 ops/s
Iteration  22: 89.231 ops/s
Iteration  23: 88.777 ops/s
Iteration  24: 84.864 ops/s
Iteration  25: 86.675 ops/s
Iteration  26: 92.163 ops/s
Iteration  27: 87.690 ops/s
Iteration  28: 90.908 ops/s
Iteration  29: 90.798 ops/s
Iteration  30: 90.315 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  88.201 ±(99.9%) 1.826 ops/s [Average]
  (min, avg, max) = (81.410, 88.201, 92.163), stdev = 2.733
  CI (99.9%): [86.375, 90.026] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  88.201 ± 1.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2127593.314 ops/s
# Warmup Iteration   2: 4196927.948 ops/s
# Warmup Iteration   3: 4368228.174 ops/s
# Warmup Iteration   4: 4399327.689 ops/s
# Warmup Iteration   5: 3681704.140 ops/s
# Warmup Iteration   6: 4413195.628 ops/s
# Warmup Iteration   7: 4408273.965 ops/s
# Warmup Iteration   8: 4404721.016 ops/s
# Warmup Iteration   9: 4415959.409 ops/s
# Warmup Iteration  10: 4406793.193 ops/s
# Warmup Iteration  11: 4400077.396 ops/s
# Warmup Iteration  12: 4406967.660 ops/s
# Warmup Iteration  13: 4395921.311 ops/s
# Warmup Iteration  14: 4407914.568 ops/s
# Warmup Iteration  15: 4404613.007 ops/s
# Warmup Iteration  16: 4401829.742 ops/s
# Warmup Iteration  17: 4388874.842 ops/s
# Warmup Iteration  18: 4406944.317 ops/s
# Warmup Iteration  19: 4391916.023 ops/s
# Warmup Iteration  20: 4400027.049 ops/s
# Warmup Iteration  21: 4395865.536 ops/s
# Warmup Iteration  22: 4406152.586 ops/s
# Warmup Iteration  23: 4406491.455 ops/s
# Warmup Iteration  24: 4403228.367 ops/s
# Warmup Iteration  25: 4405278.166 ops/s
# Warmup Iteration  26: 4398349.034 ops/s
# Warmup Iteration  27: 4397628.386 ops/s
# Warmup Iteration  28: 4401452.293 ops/s
# Warmup Iteration  29: 4397040.587 ops/s
# Warmup Iteration  30: 4400875.406 ops/s
Iteration   1: 4403900.500 ops/s
Iteration   2: 4402651.916 ops/s
Iteration   3: 4406955.244 ops/s
Iteration   4: 4407306.128 ops/s
Iteration   5: 4399265.956 ops/s
Iteration   6: 4413954.185 ops/s
Iteration   7: 4398858.775 ops/s
Iteration   8: 4420653.462 ops/s
Iteration   9: 4384190.891 ops/s
Iteration  10: 4409841.013 ops/s
Iteration  11: 4412655.649 ops/s
Iteration  12: 4400530.171 ops/s
Iteration  13: 4408698.902 ops/s
Iteration  14: 4407669.772 ops/s
Iteration  15: 4409533.604 ops/s
Iteration  16: 4395324.596 ops/s
Iteration  17: 4408813.231 ops/s
Iteration  18: 4412057.812 ops/s
Iteration  19: 4403166.758 ops/s
Iteration  20: 4398964.665 ops/s
Iteration  21: 4392633.856 ops/s
Iteration  22: 4411205.517 ops/s
Iteration  23: 4399157.457 ops/s
Iteration  24: 4390540.932 ops/s
Iteration  25: 4408575.019 ops/s
Iteration  26: 4400717.872 ops/s
Iteration  27: 4397327.452 ops/s
Iteration  28: 4394624.309 ops/s
Iteration  29: 4407073.976 ops/s
Iteration  30: 4392338.136 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByInt":
  4403306.258 ±(99.9%) 5403.127 ops/s [Average]
  (min, avg, max) = (4384190.891, 4403306.258, 4420653.462), stdev = 8087.146
  CI (99.9%): [4397903.132, 4408709.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByInt  thrpt   30  4403306.258 ± 5403.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2101341.911 ops/s
# Warmup Iteration   2: 4142639.052 ops/s
# Warmup Iteration   3: 4457684.219 ops/s
# Warmup Iteration   4: 4490136.937 ops/s
# Warmup Iteration   5: 3716188.210 ops/s
# Warmup Iteration   6: 4493571.514 ops/s
# Warmup Iteration   7: 4487795.617 ops/s
# Warmup Iteration   8: 4496342.998 ops/s
# Warmup Iteration   9: 4493679.563 ops/s
# Warmup Iteration  10: 4487280.328 ops/s
# Warmup Iteration  11: 4475846.536 ops/s
# Warmup Iteration  12: 4483033.455 ops/s
# Warmup Iteration  13: 4487623.200 ops/s
# Warmup Iteration  14: 4500740.304 ops/s
# Warmup Iteration  15: 4490083.499 ops/s
# Warmup Iteration  16: 4487648.436 ops/s
# Warmup Iteration  17: 4492855.831 ops/s
# Warmup Iteration  18: 4491757.128 ops/s
# Warmup Iteration  19: 4483136.098 ops/s
# Warmup Iteration  20: 4489825.136 ops/s
# Warmup Iteration  21: 4494034.078 ops/s
# Warmup Iteration  22: 4486869.442 ops/s
# Warmup Iteration  23: 4485364.679 ops/s
# Warmup Iteration  24: 4484441.937 ops/s
# Warmup Iteration  25: 4493663.258 ops/s
# Warmup Iteration  26: 4486183.814 ops/s
# Warmup Iteration  27: 4491128.024 ops/s
# Warmup Iteration  28: 4500714.276 ops/s
# Warmup Iteration  29: 4492727.582 ops/s
# Warmup Iteration  30: 4491802.820 ops/s
Iteration   1: 4483125.002 ops/s
Iteration   2: 4497928.992 ops/s
Iteration   3: 4496904.082 ops/s
Iteration   4: 4498792.372 ops/s
Iteration   5: 4491356.857 ops/s
Iteration   6: 4483708.240 ops/s
Iteration   7: 4483513.784 ops/s
Iteration   8: 4499486.011 ops/s
Iteration   9: 4494853.905 ops/s
Iteration  10: 4496444.101 ops/s
Iteration  11: 4488952.549 ops/s
Iteration  12: 4495718.811 ops/s
Iteration  13: 4494458.488 ops/s
Iteration  14: 4494400.202 ops/s
Iteration  15: 4489150.853 ops/s
Iteration  16: 4486652.654 ops/s
Iteration  17: 4490999.081 ops/s
Iteration  18: 4487033.424 ops/s
Iteration  19: 4486845.877 ops/s
Iteration  20: 4498837.789 ops/s
Iteration  21: 4488518.110 ops/s
Iteration  22: 4495611.997 ops/s
Iteration  23: 4496864.688 ops/s
Iteration  24: 4483631.997 ops/s
Iteration  25: 4485995.981 ops/s
Iteration  26: 4497369.199 ops/s
Iteration  27: 4501250.194 ops/s
Iteration  28: 4510532.951 ops/s
Iteration  29: 4502674.856 ops/s
Iteration  30: 4487349.645 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumByLong":
  4492965.423 ±(99.9%) 4473.646 ops/s [Average]
  (min, avg, max) = (4483125.002, 4492965.423, 4510532.951), stdev = 6695.943
  CI (99.9%): [4488491.777, 4497439.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sumByLong  thrpt   30  4492965.423 ± 4473.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3370136.932 ops/s
# Warmup Iteration   2: 7730922.165 ops/s
# Warmup Iteration   3: 7856858.326 ops/s
# Warmup Iteration   4: 6511450.393 ops/s
# Warmup Iteration   5: 7863315.414 ops/s
# Warmup Iteration   6: 7862527.887 ops/s
# Warmup Iteration   7: 7829547.451 ops/s
# Warmup Iteration   8: 7844781.335 ops/s
# Warmup Iteration   9: 7871710.633 ops/s
# Warmup Iteration  10: 7866139.250 ops/s
# Warmup Iteration  11: 7833491.607 ops/s
# Warmup Iteration  12: 7818304.068 ops/s
# Warmup Iteration  13: 7858488.251 ops/s
# Warmup Iteration  14: 7854342.039 ops/s
# Warmup Iteration  15: 7820609.707 ops/s
# Warmup Iteration  16: 7842856.580 ops/s
# Warmup Iteration  17: 7829344.577 ops/s
# Warmup Iteration  18: 7819587.311 ops/s
# Warmup Iteration  19: 7840034.113 ops/s
# Warmup Iteration  20: 7811615.578 ops/s
# Warmup Iteration  21: 7838436.153 ops/s
# Warmup Iteration  22: 7845637.552 ops/s
# Warmup Iteration  23: 7830598.395 ops/s
# Warmup Iteration  24: 7830819.858 ops/s
# Warmup Iteration  25: 7844656.779 ops/s
# Warmup Iteration  26: 7834542.748 ops/s
# Warmup Iteration  27: 7826476.372 ops/s
# Warmup Iteration  28: 7813867.950 ops/s
# Warmup Iteration  29: 7848135.641 ops/s
# Warmup Iteration  30: 7835101.523 ops/s
Iteration   1: 7827683.264 ops/s
Iteration   2: 7836547.686 ops/s
Iteration   3: 7838666.643 ops/s
Iteration   4: 7837189.297 ops/s
Iteration   5: 7824464.209 ops/s
Iteration   6: 7826288.959 ops/s
Iteration   7: 7820988.011 ops/s
Iteration   8: 7817838.560 ops/s
Iteration   9: 7823871.429 ops/s
Iteration  10: 7856258.500 ops/s
Iteration  11: 7793772.142 ops/s
Iteration  12: 7847150.069 ops/s
Iteration  13: 7832924.147 ops/s
Iteration  14: 7821911.532 ops/s
Iteration  15: 7832404.585 ops/s
Iteration  16: 7806119.516 ops/s
Iteration  17: 7813060.544 ops/s
Iteration  18: 7842595.348 ops/s
Iteration  19: 7858982.392 ops/s
Iteration  20: 7835533.865 ops/s
Iteration  21: 7843873.996 ops/s
Iteration  22: 7832592.959 ops/s
Iteration  23: 7827640.712 ops/s
Iteration  24: 7842408.265 ops/s
Iteration  25: 7845118.557 ops/s
Iteration  26: 7823205.309 ops/s
Iteration  27: 7843608.140 ops/s
Iteration  28: 7828688.193 ops/s
Iteration  29: 7838054.844 ops/s
Iteration  30: 7818044.720 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDouble":
  7831249.547 ±(99.9%) 9391.186 ops/s [Average]
  (min, avg, max) = (7793772.142, 7831249.547, 7858982.392), stdev = 14056.286
  CI (99.9%): [7821858.361, 7840640.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_sumDouble  thrpt   30  7831249.547 ± 9391.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139.241 ops/s
# Warmup Iteration   2: 169.702 ops/s
# Warmup Iteration   3: 224.713 ops/s
# Warmup Iteration   4: 224.253 ops/s
# Warmup Iteration   5: 220.454 ops/s
# Warmup Iteration   6: 222.756 ops/s
# Warmup Iteration   7: 224.023 ops/s
# Warmup Iteration   8: 224.030 ops/s
# Warmup Iteration   9: 217.867 ops/s
# Warmup Iteration  10: 194.966 ops/s
# Warmup Iteration  11: 225.502 ops/s
# Warmup Iteration  12: 224.906 ops/s
# Warmup Iteration  13: 222.647 ops/s
# Warmup Iteration  14: 212.868 ops/s
# Warmup Iteration  15: 211.827 ops/s
# Warmup Iteration  16: 213.126 ops/s
# Warmup Iteration  17: 212.857 ops/s
# Warmup Iteration  18: 212.902 ops/s
# Warmup Iteration  19: 212.953 ops/s
# Warmup Iteration  20: 212.338 ops/s
# Warmup Iteration  21: 213.451 ops/s
# Warmup Iteration  22: 212.902 ops/s
# Warmup Iteration  23: 211.933 ops/s
# Warmup Iteration  24: 212.655 ops/s
# Warmup Iteration  25: 211.863 ops/s
# Warmup Iteration  26: 213.774 ops/s
# Warmup Iteration  27: 213.253 ops/s
# Warmup Iteration  28: 212.709 ops/s
# Warmup Iteration  29: 212.853 ops/s
# Warmup Iteration  30: 212.344 ops/s
Iteration   1: 213.519 ops/s
Iteration   2: 212.674 ops/s
Iteration   3: 212.680 ops/s
Iteration   4: 213.287 ops/s
Iteration   5: 213.774 ops/s
Iteration   6: 211.414 ops/s
Iteration   7: 212.667 ops/s
Iteration   8: 213.262 ops/s
Iteration   9: 212.886 ops/s
Iteration  10: 212.366 ops/s
Iteration  11: 213.658 ops/s
Iteration  12: 213.758 ops/s
Iteration  13: 212.629 ops/s
Iteration  14: 213.994 ops/s
Iteration  15: 212.786 ops/s
Iteration  16: 212.411 ops/s
Iteration  17: 212.738 ops/s
Iteration  18: 213.648 ops/s
Iteration  19: 211.779 ops/s
Iteration  20: 212.237 ops/s
Iteration  21: 212.174 ops/s
Iteration  22: 212.377 ops/s
Iteration  23: 210.513 ops/s
Iteration  24: 212.983 ops/s
Iteration  25: 213.463 ops/s
Iteration  26: 212.095 ops/s
Iteration  27: 212.749 ops/s
Iteration  28: 212.789 ops/s
Iteration  29: 213.215 ops/s
Iteration  30: 212.296 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  212.761 ±(99.9%) 0.505 ops/s [Average]
  (min, avg, max) = (210.513, 212.761, 213.994), stdev = 0.756
  CI (99.9%): [212.256, 213.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  212.761 ± 0.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157.245 ops/s
# Warmup Iteration   2: 211.843 ops/s
# Warmup Iteration   3: 265.050 ops/s
# Warmup Iteration   4: 263.163 ops/s
# Warmup Iteration   5: 265.056 ops/s
# Warmup Iteration   6: 265.948 ops/s
# Warmup Iteration   7: 264.782 ops/s
# Warmup Iteration   8: 231.871 ops/s
# Warmup Iteration   9: 258.466 ops/s
# Warmup Iteration  10: 265.539 ops/s
# Warmup Iteration  11: 265.221 ops/s
# Warmup Iteration  12: 256.474 ops/s
# Warmup Iteration  13: 254.622 ops/s
# Warmup Iteration  14: 255.710 ops/s
# Warmup Iteration  15: 256.844 ops/s
# Warmup Iteration  16: 256.177 ops/s
# Warmup Iteration  17: 256.167 ops/s
# Warmup Iteration  18: 256.211 ops/s
# Warmup Iteration  19: 257.258 ops/s
# Warmup Iteration  20: 256.489 ops/s
# Warmup Iteration  21: 256.069 ops/s
# Warmup Iteration  22: 256.741 ops/s
# Warmup Iteration  23: 256.221 ops/s
# Warmup Iteration  24: 256.684 ops/s
# Warmup Iteration  25: 256.347 ops/s
# Warmup Iteration  26: 257.972 ops/s
# Warmup Iteration  27: 256.118 ops/s
# Warmup Iteration  28: 256.815 ops/s
# Warmup Iteration  29: 257.167 ops/s
# Warmup Iteration  30: 256.003 ops/s
Iteration   1: 256.168 ops/s
Iteration   2: 256.188 ops/s
Iteration   3: 256.838 ops/s
Iteration   4: 255.527 ops/s
Iteration   5: 256.452 ops/s
Iteration   6: 257.051 ops/s
Iteration   7: 255.490 ops/s
Iteration   8: 257.610 ops/s
Iteration   9: 256.404 ops/s
Iteration  10: 255.961 ops/s
Iteration  11: 257.716 ops/s
Iteration  12: 256.842 ops/s
Iteration  13: 256.219 ops/s
Iteration  14: 258.364 ops/s
Iteration  15: 256.230 ops/s
Iteration  16: 257.043 ops/s
Iteration  17: 256.914 ops/s
Iteration  18: 256.203 ops/s
Iteration  19: 256.149 ops/s
Iteration  20: 257.781 ops/s
Iteration  21: 256.734 ops/s
Iteration  22: 257.197 ops/s
Iteration  23: 255.511 ops/s
Iteration  24: 256.275 ops/s
Iteration  25: 256.476 ops/s
Iteration  26: 254.843 ops/s
Iteration  27: 256.919 ops/s
Iteration  28: 256.519 ops/s
Iteration  29: 253.317 ops/s
Iteration  30: 254.679 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  256.387 ±(99.9%) 0.671 ops/s [Average]
  (min, avg, max) = (253.317, 256.387, 258.364), stdev = 1.004
  CI (99.9%): [255.716, 257.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  256.387 ± 0.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3362619.959 ops/s
# Warmup Iteration   2: 7543823.122 ops/s
# Warmup Iteration   3: 7644189.191 ops/s
# Warmup Iteration   4: 6347632.854 ops/s
# Warmup Iteration   5: 7638568.303 ops/s
# Warmup Iteration   6: 7644556.581 ops/s
# Warmup Iteration   7: 7623550.345 ops/s
# Warmup Iteration   8: 7629130.455 ops/s
# Warmup Iteration   9: 7622385.584 ops/s
# Warmup Iteration  10: 7624337.125 ops/s
# Warmup Iteration  11: 7618432.255 ops/s
# Warmup Iteration  12: 7628732.363 ops/s
# Warmup Iteration  13: 7660086.501 ops/s
# Warmup Iteration  14: 7647601.570 ops/s
# Warmup Iteration  15: 7614337.360 ops/s
# Warmup Iteration  16: 7661032.951 ops/s
# Warmup Iteration  17: 7631977.536 ops/s
# Warmup Iteration  18: 7650579.408 ops/s
# Warmup Iteration  19: 7644425.111 ops/s
# Warmup Iteration  20: 7628604.540 ops/s
# Warmup Iteration  21: 7567002.765 ops/s
# Warmup Iteration  22: 7632138.098 ops/s
# Warmup Iteration  23: 7658342.484 ops/s
# Warmup Iteration  24: 7639009.969 ops/s
# Warmup Iteration  25: 7653455.386 ops/s
# Warmup Iteration  26: 7624268.240 ops/s
# Warmup Iteration  27: 7632616.339 ops/s
# Warmup Iteration  28: 7628108.068 ops/s
# Warmup Iteration  29: 7634411.333 ops/s
# Warmup Iteration  30: 7616258.677 ops/s
Iteration   1: 7653615.375 ops/s
Iteration   2: 7599084.372 ops/s
Iteration   3: 7630369.526 ops/s
Iteration   4: 7614976.947 ops/s
Iteration   5: 7626586.621 ops/s
Iteration   6: 7629237.881 ops/s
Iteration   7: 7624292.405 ops/s
Iteration   8: 7598463.680 ops/s
Iteration   9: 7637869.950 ops/s
Iteration  10: 7639865.442 ops/s
Iteration  11: 7636860.801 ops/s
Iteration  12: 7617281.251 ops/s
Iteration  13: 7623984.498 ops/s
Iteration  14: 7624552.322 ops/s
Iteration  15: 7647765.026 ops/s
Iteration  16: 7633625.768 ops/s
Iteration  17: 7628327.831 ops/s
Iteration  18: 7640891.073 ops/s
Iteration  19: 7626674.250 ops/s
Iteration  20: 7633356.410 ops/s
Iteration  21: 7643302.378 ops/s
Iteration  22: 7642180.790 ops/s
Iteration  23: 7653928.181 ops/s
Iteration  24: 7606571.033 ops/s
Iteration  25: 7587618.272 ops/s
Iteration  26: 7644164.804 ops/s
Iteration  27: 7615335.104 ops/s
Iteration  28: 7661300.213 ops/s
Iteration  29: 7626113.374 ops/s
Iteration  30: 7635175.517 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloat":
  7629445.703 ±(99.9%) 11341.083 ops/s [Average]
  (min, avg, max) = (7587618.272, 7629445.703, 7661300.213), stdev = 16974.800
  CI (99.9%): [7618104.620, 7640786.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_sumFloat  thrpt   30  7629445.703 ± 11341.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137.301 ops/s
# Warmup Iteration   2: 165.309 ops/s
# Warmup Iteration   3: 218.106 ops/s
# Warmup Iteration   4: 218.970 ops/s
# Warmup Iteration   5: 216.443 ops/s
# Warmup Iteration   6: 218.235 ops/s
# Warmup Iteration   7: 219.364 ops/s
# Warmup Iteration   8: 219.026 ops/s
# Warmup Iteration   9: 218.750 ops/s
# Warmup Iteration  10: 184.105 ops/s
# Warmup Iteration  11: 219.749 ops/s
# Warmup Iteration  12: 220.188 ops/s
# Warmup Iteration  13: 220.791 ops/s
# Warmup Iteration  14: 209.081 ops/s
# Warmup Iteration  15: 206.865 ops/s
# Warmup Iteration  16: 208.176 ops/s
# Warmup Iteration  17: 208.151 ops/s
# Warmup Iteration  18: 208.267 ops/s
# Warmup Iteration  19: 207.709 ops/s
# Warmup Iteration  20: 207.772 ops/s
# Warmup Iteration  21: 208.114 ops/s
# Warmup Iteration  22: 208.172 ops/s
# Warmup Iteration  23: 208.648 ops/s
# Warmup Iteration  24: 208.154 ops/s
# Warmup Iteration  25: 207.781 ops/s
# Warmup Iteration  26: 207.500 ops/s
# Warmup Iteration  27: 207.740 ops/s
# Warmup Iteration  28: 208.301 ops/s
# Warmup Iteration  29: 207.878 ops/s
# Warmup Iteration  30: 208.247 ops/s
Iteration   1: 208.079 ops/s
Iteration   2: 209.112 ops/s
Iteration   3: 208.555 ops/s
Iteration   4: 208.163 ops/s
Iteration   5: 207.146 ops/s
Iteration   6: 208.946 ops/s
Iteration   7: 207.156 ops/s
Iteration   8: 207.964 ops/s
Iteration   9: 208.336 ops/s
Iteration  10: 208.784 ops/s
Iteration  11: 207.606 ops/s
Iteration  12: 208.589 ops/s
Iteration  13: 208.064 ops/s
Iteration  14: 206.915 ops/s
Iteration  15: 207.906 ops/s
Iteration  16: 208.788 ops/s
Iteration  17: 208.895 ops/s
Iteration  18: 206.795 ops/s
Iteration  19: 208.916 ops/s
Iteration  20: 209.061 ops/s
Iteration  21: 207.467 ops/s
Iteration  22: 207.929 ops/s
Iteration  23: 208.936 ops/s
Iteration  24: 208.487 ops/s
Iteration  25: 206.502 ops/s
Iteration  26: 207.763 ops/s
Iteration  27: 208.370 ops/s
Iteration  28: 207.309 ops/s
Iteration  29: 208.595 ops/s
Iteration  30: 207.514 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  208.088 ±(99.9%) 0.494 ops/s [Average]
  (min, avg, max) = (206.502, 208.088, 209.112), stdev = 0.739
  CI (99.9%): [207.594, 208.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  208.088 ± 0.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156.237 ops/s
# Warmup Iteration   2: 209.727 ops/s
# Warmup Iteration   3: 261.755 ops/s
# Warmup Iteration   4: 265.451 ops/s
# Warmup Iteration   5: 263.280 ops/s
# Warmup Iteration   6: 264.981 ops/s
# Warmup Iteration   7: 264.625 ops/s
# Warmup Iteration   8: 235.418 ops/s
# Warmup Iteration   9: 253.922 ops/s
# Warmup Iteration  10: 266.343 ops/s
# Warmup Iteration  11: 264.396 ops/s
# Warmup Iteration  12: 256.468 ops/s
# Warmup Iteration  13: 257.254 ops/s
# Warmup Iteration  14: 255.433 ops/s
# Warmup Iteration  15: 257.631 ops/s
# Warmup Iteration  16: 256.588 ops/s
# Warmup Iteration  17: 256.729 ops/s
# Warmup Iteration  18: 257.018 ops/s
# Warmup Iteration  19: 258.046 ops/s
# Warmup Iteration  20: 257.082 ops/s
# Warmup Iteration  21: 256.548 ops/s
# Warmup Iteration  22: 256.927 ops/s
# Warmup Iteration  23: 257.845 ops/s
# Warmup Iteration  24: 256.273 ops/s
# Warmup Iteration  25: 256.685 ops/s
# Warmup Iteration  26: 257.398 ops/s
# Warmup Iteration  27: 257.331 ops/s
# Warmup Iteration  28: 257.320 ops/s
# Warmup Iteration  29: 257.123 ops/s
# Warmup Iteration  30: 256.371 ops/s
Iteration   1: 255.917 ops/s
Iteration   2: 256.312 ops/s
Iteration   3: 257.808 ops/s
Iteration   4: 256.779 ops/s
Iteration   5: 256.885 ops/s
Iteration   6: 256.552 ops/s
Iteration   7: 255.514 ops/s
Iteration   8: 258.360 ops/s
Iteration   9: 258.369 ops/s
Iteration  10: 256.985 ops/s
Iteration  11: 258.804 ops/s
Iteration  12: 257.137 ops/s
Iteration  13: 258.272 ops/s
Iteration  14: 257.384 ops/s
Iteration  15: 256.514 ops/s
Iteration  16: 257.325 ops/s
Iteration  17: 257.291 ops/s
Iteration  18: 256.922 ops/s
Iteration  19: 257.827 ops/s
Iteration  20: 256.766 ops/s
Iteration  21: 256.335 ops/s
Iteration  22: 258.864 ops/s
Iteration  23: 256.985 ops/s
Iteration  24: 257.917 ops/s
Iteration  25: 257.157 ops/s
Iteration  26: 256.147 ops/s
Iteration  27: 256.698 ops/s
Iteration  28: 258.346 ops/s
Iteration  29: 255.431 ops/s
Iteration  30: 259.260 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  257.229 ±(99.9%) 0.658 ops/s [Average]
  (min, avg, max) = (255.431, 257.229, 259.260), stdev = 0.985
  CI (99.9%): [256.571, 257.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
CompositeFastListTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  257.229 ± 0.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3904212.737 ops/s
# Warmup Iteration   2: 8894574.987 ops/s
# Warmup Iteration   3: 8979798.502 ops/s
# Warmup Iteration   4: 7487749.670 ops/s
# Warmup Iteration   5: 8997368.315 ops/s
# Warmup Iteration   6: 8973521.862 ops/s
# Warmup Iteration   7: 9008966.112 ops/s
# Warmup Iteration   8: 9030267.879 ops/s
# Warmup Iteration   9: 9017717.330 ops/s
# Warmup Iteration  10: 9004089.315 ops/s
# Warmup Iteration  11: 9020496.230 ops/s
# Warmup Iteration  12: 9013638.316 ops/s
# Warmup Iteration  13: 8985834.583 ops/s
# Warmup Iteration  14: 9013136.243 ops/s
# Warmup Iteration  15: 8963213.920 ops/s
# Warmup Iteration  16: 9026366.159 ops/s
# Warmup Iteration  17: 9013045.536 ops/s
# Warmup Iteration  18: 9022360.992 ops/s
# Warmup Iteration  19: 9011050.445 ops/s
# Warmup Iteration  20: 9008272.058 ops/s
# Warmup Iteration  21: 9017938.235 ops/s
# Warmup Iteration  22: 9022346.361 ops/s
# Warmup Iteration  23: 8993761.165 ops/s
# Warmup Iteration  24: 8990974.542 ops/s
# Warmup Iteration  25: 9023760.051 ops/s
# Warmup Iteration  26: 8983700.308 ops/s
# Warmup Iteration  27: 8993446.394 ops/s
# Warmup Iteration  28: 9003523.120 ops/s
# Warmup Iteration  29: 9010888.671 ops/s
# Warmup Iteration  30: 9001026.928 ops/s
Iteration   1: 9012670.415 ops/s
Iteration   2: 9017766.840 ops/s
Iteration   3: 9006619.062 ops/s
Iteration   4: 9010588.647 ops/s
Iteration   5: 9034023.803 ops/s
Iteration   6: 9034799.704 ops/s
Iteration   7: 9043330.518 ops/s
Iteration   8: 8963584.346 ops/s
Iteration   9: 8944812.820 ops/s
Iteration  10: 8963444.751 ops/s
Iteration  11: 8996273.034 ops/s
Iteration  12: 9023663.402 ops/s
Iteration  13: 9013521.511 ops/s
Iteration  14: 8964557.924 ops/s
Iteration  15: 8999609.908 ops/s
Iteration  16: 9010298.752 ops/s
Iteration  17: 8994832.599 ops/s
Iteration  18: 9000199.313 ops/s
Iteration  19: 9029030.723 ops/s
Iteration  20: 8962534.367 ops/s
Iteration  21: 9011517.349 ops/s
Iteration  22: 9016122.964 ops/s
Iteration  23: 8999323.868 ops/s
Iteration  24: 8972833.857 ops/s
Iteration  25: 9001653.184 ops/s
Iteration  26: 9006038.047 ops/s
Iteration  27: 8986876.240 ops/s
Iteration  28: 9002780.437 ops/s
Iteration  29: 9004067.012 ops/s
Iteration  30: 9004820.327 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumInteger":
  9001073.191 ±(99.9%) 15856.119 ops/s [Average]
  (min, avg, max) = (8944812.820, 9001073.191, 9043330.518), stdev = 23732.695
  CI (99.9%): [8985217.072, 9016929.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_sumInteger  thrpt   30  9001073.191 ± 15856.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4033207.336 ops/s
# Warmup Iteration   2: 9316592.364 ops/s
# Warmup Iteration   3: 9408341.901 ops/s
# Warmup Iteration   4: 7847777.384 ops/s
# Warmup Iteration   5: 9436571.323 ops/s
# Warmup Iteration   6: 9410605.631 ops/s
# Warmup Iteration   7: 9426628.709 ops/s
# Warmup Iteration   8: 9446746.757 ops/s
# Warmup Iteration   9: 9418377.799 ops/s
# Warmup Iteration  10: 9420194.712 ops/s
# Warmup Iteration  11: 9423850.229 ops/s
# Warmup Iteration  12: 9427047.255 ops/s
# Warmup Iteration  13: 9429575.848 ops/s
# Warmup Iteration  14: 9423852.613 ops/s
# Warmup Iteration  15: 9439468.316 ops/s
# Warmup Iteration  16: 9424519.925 ops/s
# Warmup Iteration  17: 9464661.598 ops/s
# Warmup Iteration  18: 9418860.963 ops/s
# Warmup Iteration  19: 9443670.670 ops/s
# Warmup Iteration  20: 9433324.872 ops/s
# Warmup Iteration  21: 9420180.641 ops/s
# Warmup Iteration  22: 9433512.091 ops/s
# Warmup Iteration  23: 9441530.069 ops/s
# Warmup Iteration  24: 9439255.796 ops/s
# Warmup Iteration  25: 9443320.671 ops/s
# Warmup Iteration  26: 9442340.540 ops/s
# Warmup Iteration  27: 9413549.633 ops/s
# Warmup Iteration  28: 9408219.309 ops/s
# Warmup Iteration  29: 9429722.043 ops/s
# Warmup Iteration  30: 9447730.135 ops/s
Iteration   1: 9421997.931 ops/s
Iteration   2: 9426363.736 ops/s
Iteration   3: 9438087.423 ops/s
Iteration   4: 9455578.339 ops/s
Iteration   5: 9430232.619 ops/s
Iteration   6: 9446120.792 ops/s
Iteration   7: 9419932.145 ops/s
Iteration   8: 9447200.646 ops/s
Iteration   9: 9461002.169 ops/s
Iteration  10: 9388312.486 ops/s
Iteration  11: 9433115.375 ops/s
Iteration  12: 9427354.941 ops/s
Iteration  13: 9438068.032 ops/s
Iteration  14: 9436908.299 ops/s
Iteration  15: 9456232.857 ops/s
Iteration  16: 9443800.780 ops/s
Iteration  17: 9454254.676 ops/s
Iteration  18: 9458225.702 ops/s
Iteration  19: 9456120.003 ops/s
Iteration  20: 9407889.670 ops/s
Iteration  21: 9455709.965 ops/s
Iteration  22: 9432244.614 ops/s
Iteration  23: 9440914.698 ops/s
Iteration  24: 9449848.968 ops/s
Iteration  25: 9440592.169 ops/s
Iteration  26: 9414429.956 ops/s
Iteration  27: 9418924.918 ops/s
Iteration  28: 9416405.190 ops/s
Iteration  29: 9451849.126 ops/s
Iteration  30: 9412619.192 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_sumLong":
  9436011.247 ±(99.9%) 11934.795 ops/s [Average]
  (min, avg, max) = (9388312.486, 9436011.247, 9461002.169), stdev = 17863.441
  CI (99.9%): [9424076.452, 9447946.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_sumLong  thrpt   30  9436011.247 ± 11934.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6083019.129 ops/s
# Warmup Iteration   2: 12656039.687 ops/s
# Warmup Iteration   3: 10688002.163 ops/s
# Warmup Iteration   4: 12686561.159 ops/s
# Warmup Iteration   5: 12658034.556 ops/s
# Warmup Iteration   6: 12689360.170 ops/s
# Warmup Iteration   7: 12677548.747 ops/s
# Warmup Iteration   8: 12680737.960 ops/s
# Warmup Iteration   9: 12579156.468 ops/s
# Warmup Iteration  10: 12625684.309 ops/s
# Warmup Iteration  11: 12689963.626 ops/s
# Warmup Iteration  12: 12679471.082 ops/s
# Warmup Iteration  13: 12715070.259 ops/s
# Warmup Iteration  14: 12672866.534 ops/s
# Warmup Iteration  15: 12708320.374 ops/s
# Warmup Iteration  16: 12718629.863 ops/s
# Warmup Iteration  17: 12678105.646 ops/s
# Warmup Iteration  18: 12715735.785 ops/s
# Warmup Iteration  19: 12682348.824 ops/s
# Warmup Iteration  20: 12679805.502 ops/s
# Warmup Iteration  21: 12681925.208 ops/s
# Warmup Iteration  22: 12669888.413 ops/s
# Warmup Iteration  23: 12692578.314 ops/s
# Warmup Iteration  24: 12695579.098 ops/s
# Warmup Iteration  25: 12669395.091 ops/s
# Warmup Iteration  26: 12640211.940 ops/s
# Warmup Iteration  27: 12684448.417 ops/s
# Warmup Iteration  28: 12679235.187 ops/s
# Warmup Iteration  29: 12631998.264 ops/s
# Warmup Iteration  30: 12629351.150 ops/s
Iteration   1: 12677431.927 ops/s
Iteration   2: 12678307.899 ops/s
Iteration   3: 12623949.585 ops/s
Iteration   4: 12720880.280 ops/s
Iteration   5: 12655459.687 ops/s
Iteration   6: 12656763.742 ops/s
Iteration   7: 12603942.404 ops/s
Iteration   8: 12643519.834 ops/s
Iteration   9: 12627511.380 ops/s
Iteration  10: 12606484.783 ops/s
Iteration  11: 12628932.681 ops/s
Iteration  12: 12645210.395 ops/s
Iteration  13: 12678093.328 ops/s
Iteration  14: 12606452.645 ops/s
Iteration  15: 12646466.533 ops/s
Iteration  16: 12665858.179 ops/s
Iteration  17: 12678539.888 ops/s
Iteration  18: 12662792.763 ops/s
Iteration  19: 12640638.030 ops/s
Iteration  20: 12650370.066 ops/s
Iteration  21: 12611737.162 ops/s
Iteration  22: 12603234.066 ops/s
Iteration  23: 12671305.411 ops/s
Iteration  24: 12701943.166 ops/s
Iteration  25: 12631492.122 ops/s
Iteration  26: 12645831.371 ops/s
Iteration  27: 12648293.159 ops/s
Iteration  28: 12682398.862 ops/s
Iteration  29: 12679005.330 ops/s
Iteration  30: 12672772.412 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeDouble":
  12651520.636 ±(99.9%) 19959.933 ops/s [Average]
  (min, avg, max) = (12603234.066, 12651520.636, 12720880.280), stdev = 29875.091
  CI (99.9%): [12631560.703, 12671480.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_summarizeDouble  thrpt   30  12651520.636 ± 19959.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5871402.875 ops/s
# Warmup Iteration   2: 12244034.442 ops/s
# Warmup Iteration   3: 10295130.987 ops/s
# Warmup Iteration   4: 12070484.612 ops/s
# Warmup Iteration   5: 12002033.561 ops/s
# Warmup Iteration   6: 12035815.015 ops/s
# Warmup Iteration   7: 12112033.794 ops/s
# Warmup Iteration   8: 12098865.723 ops/s
# Warmup Iteration   9: 12063401.155 ops/s
# Warmup Iteration  10: 12114453.731 ops/s
# Warmup Iteration  11: 12133444.154 ops/s
# Warmup Iteration  12: 12116699.299 ops/s
# Warmup Iteration  13: 12121960.222 ops/s
# Warmup Iteration  14: 12105364.274 ops/s
# Warmup Iteration  15: 12103151.687 ops/s
# Warmup Iteration  16: 12071957.833 ops/s
# Warmup Iteration  17: 12403440.539 ops/s
# Warmup Iteration  18: 12391749.645 ops/s
# Warmup Iteration  19: 12347430.417 ops/s
# Warmup Iteration  20: 12355580.739 ops/s
# Warmup Iteration  21: 12361475.791 ops/s
# Warmup Iteration  22: 12360493.706 ops/s
# Warmup Iteration  23: 12405577.581 ops/s
# Warmup Iteration  24: 12379562.635 ops/s
# Warmup Iteration  25: 12405090.809 ops/s
# Warmup Iteration  26: 12391422.046 ops/s
# Warmup Iteration  27: 12398785.952 ops/s
# Warmup Iteration  28: 12408937.031 ops/s
# Warmup Iteration  29: 12370083.378 ops/s
# Warmup Iteration  30: 12295996.219 ops/s
Iteration   1: 12382806.231 ops/s
Iteration   2: 12376111.453 ops/s
Iteration   3: 12341567.704 ops/s
Iteration   4: 12420337.820 ops/s
Iteration   5: 12414190.415 ops/s
Iteration   6: 12423186.878 ops/s
Iteration   7: 12286887.207 ops/s
Iteration   8: 12397007.669 ops/s
Iteration   9: 12380829.328 ops/s
Iteration  10: 12374941.355 ops/s
Iteration  11: 12415892.003 ops/s
Iteration  12: 12338953.038 ops/s
Iteration  13: 12422140.570 ops/s
Iteration  14: 12419645.072 ops/s
Iteration  15: 12387391.032 ops/s
Iteration  16: 12394037.558 ops/s
Iteration  17: 12345235.402 ops/s
Iteration  18: 12118383.889 ops/s
Iteration  19: 12381781.791 ops/s
Iteration  20: 12441105.618 ops/s
Iteration  21: 12379927.559 ops/s
Iteration  22: 12358966.504 ops/s
Iteration  23: 12343117.148 ops/s
Iteration  24: 12304874.382 ops/s
Iteration  25: 12404702.175 ops/s
Iteration  26: 12392077.076 ops/s
Iteration  27: 12351470.118 ops/s
Iteration  28: 12366108.912 ops/s
Iteration  29: 12360325.275 ops/s
Iteration  30: 12405979.114 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeFloat":
  12370999.343 ±(99.9%) 39807.228 ops/s [Average]
  (min, avg, max) = (12118383.889, 12370999.343, 12441105.618), stdev = 59581.589
  CI (99.9%): [12331192.116, 12410806.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_summarizeFloat  thrpt   30  12370999.343 ± 39807.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6811370.007 ops/s
# Warmup Iteration   2: 14082567.080 ops/s
# Warmup Iteration   3: 11811769.664 ops/s
# Warmup Iteration   4: 13714402.874 ops/s
# Warmup Iteration   5: 14091185.970 ops/s
# Warmup Iteration   6: 14098559.817 ops/s
# Warmup Iteration   7: 14070539.167 ops/s
# Warmup Iteration   8: 14049352.575 ops/s
# Warmup Iteration   9: 14099627.574 ops/s
# Warmup Iteration  10: 14112656.939 ops/s
# Warmup Iteration  11: 14086705.423 ops/s
# Warmup Iteration  12: 14107348.219 ops/s
# Warmup Iteration  13: 14024119.614 ops/s
# Warmup Iteration  14: 14093305.065 ops/s
# Warmup Iteration  15: 14036836.899 ops/s
# Warmup Iteration  16: 13999246.166 ops/s
# Warmup Iteration  17: 14039789.668 ops/s
# Warmup Iteration  18: 14047054.950 ops/s
# Warmup Iteration  19: 14062241.405 ops/s
# Warmup Iteration  20: 14044556.558 ops/s
# Warmup Iteration  21: 14021968.164 ops/s
# Warmup Iteration  22: 14117785.587 ops/s
# Warmup Iteration  23: 14048309.825 ops/s
# Warmup Iteration  24: 14091612.300 ops/s
# Warmup Iteration  25: 14047416.344 ops/s
# Warmup Iteration  26: 14089198.049 ops/s
# Warmup Iteration  27: 14066864.001 ops/s
# Warmup Iteration  28: 14034785.038 ops/s
# Warmup Iteration  29: 14039938.918 ops/s
# Warmup Iteration  30: 14066121.504 ops/s
Iteration   1: 14027429.261 ops/s
Iteration   2: 14116947.662 ops/s
Iteration   3: 14008829.921 ops/s
Iteration   4: 14111373.962 ops/s
Iteration   5: 14106624.878 ops/s
Iteration   6: 14087522.068 ops/s
Iteration   7: 14113916.370 ops/s
Iteration   8: 14005836.315 ops/s
Iteration   9: 14138619.016 ops/s
Iteration  10: 14080723.033 ops/s
Iteration  11: 14102413.550 ops/s
Iteration  12: 14107107.958 ops/s
Iteration  13: 14124257.560 ops/s
Iteration  14: 14121685.866 ops/s
Iteration  15: 14091528.357 ops/s
Iteration  16: 14042410.652 ops/s
Iteration  17: 14037567.739 ops/s
Iteration  18: 14047776.641 ops/s
Iteration  19: 14013211.045 ops/s
Iteration  20: 14052771.161 ops/s
Iteration  21: 14007780.310 ops/s
Iteration  22: 14040210.359 ops/s
Iteration  23: 13962578.246 ops/s
Iteration  24: 14130834.390 ops/s
Iteration  25: 14094250.490 ops/s
Iteration  26: 14112513.859 ops/s
Iteration  27: 14077879.281 ops/s
Iteration  28: 14090303.930 ops/s
Iteration  29: 14091337.262 ops/s
Iteration  30: 13978463.505 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeInt":
  14070823.488 ±(99.9%) 32353.581 ops/s [Average]
  (min, avg, max) = (13962578.246, 14070823.488, 14138619.016), stdev = 48425.320
  CI (99.9%): [14038469.907, 14103177.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_summarizeInt  thrpt   30  14070823.488 ± 32353.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6191654.021 ops/s
# Warmup Iteration   2: 13065682.701 ops/s
# Warmup Iteration   3: 10934288.543 ops/s
# Warmup Iteration   4: 12901044.931 ops/s
# Warmup Iteration   5: 12965268.623 ops/s
# Warmup Iteration   6: 12962460.891 ops/s
# Warmup Iteration   7: 12965155.135 ops/s
# Warmup Iteration   8: 12953733.370 ops/s
# Warmup Iteration   9: 12922413.293 ops/s
# Warmup Iteration  10: 12956402.886 ops/s
# Warmup Iteration  11: 12971933.391 ops/s
# Warmup Iteration  12: 12955251.998 ops/s
# Warmup Iteration  13: 12957914.846 ops/s
# Warmup Iteration  14: 12930738.423 ops/s
# Warmup Iteration  15: 12943524.646 ops/s
# Warmup Iteration  16: 12947749.188 ops/s
# Warmup Iteration  17: 12915712.337 ops/s
# Warmup Iteration  18: 12991431.507 ops/s
# Warmup Iteration  19: 12908587.034 ops/s
# Warmup Iteration  20: 12979596.912 ops/s
# Warmup Iteration  21: 12951678.780 ops/s
# Warmup Iteration  22: 12969577.807 ops/s
# Warmup Iteration  23: 12947345.630 ops/s
# Warmup Iteration  24: 12979358.251 ops/s
# Warmup Iteration  25: 12923007.249 ops/s
# Warmup Iteration  26: 12946226.438 ops/s
# Warmup Iteration  27: 12946711.151 ops/s
# Warmup Iteration  28: 12965628.308 ops/s
# Warmup Iteration  29: 12961189.008 ops/s
# Warmup Iteration  30: 12948947.704 ops/s
Iteration   1: 12872191.876 ops/s
Iteration   2: 12975542.664 ops/s
Iteration   3: 12969504.915 ops/s
Iteration   4: 12940103.934 ops/s
Iteration   5: 12965382.504 ops/s
Iteration   6: 12943758.081 ops/s
Iteration   7: 12957721.857 ops/s
Iteration   8: 12942202.039 ops/s
Iteration   9: 12932957.592 ops/s
Iteration  10: 12984642.391 ops/s
Iteration  11: 12933955.181 ops/s
Iteration  12: 12901810.259 ops/s
Iteration  13: 12957294.744 ops/s
Iteration  14: 12962973.801 ops/s
Iteration  15: 12982736.930 ops/s
Iteration  16: 12939228.787 ops/s
Iteration  17: 12947138.543 ops/s
Iteration  18: 12952115.751 ops/s
Iteration  19: 12931259.393 ops/s
Iteration  20: 12938979.661 ops/s
Iteration  21: 12961255.199 ops/s
Iteration  22: 12974618.138 ops/s
Iteration  23: 12937057.383 ops/s
Iteration  24: 12940366.659 ops/s
Iteration  25: 12940405.641 ops/s
Iteration  26: 12972814.240 ops/s
Iteration  27: 12946736.354 ops/s
Iteration  28: 12951346.650 ops/s
Iteration  29: 12950314.249 ops/s
Iteration  30: 12979143.614 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_summarizeLong":
  12949518.634 ±(99.9%) 15696.255 ops/s [Average]
  (min, avg, max) = (12872191.876, 12949518.634, 12984642.391), stdev = 23493.418
  CI (99.9%): [12933822.379, 12965214.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_summarizeLong  thrpt   30  12949518.634 ± 15696.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607299.813 ops/s
# Warmup Iteration   2: 1106021.886 ops/s
# Warmup Iteration   3: 1219921.964 ops/s
# Warmup Iteration   4: 1226811.693 ops/s
# Warmup Iteration   5: 1200998.113 ops/s
# Warmup Iteration   6: 1046767.582 ops/s
# Warmup Iteration   7: 1228720.028 ops/s
# Warmup Iteration   8: 1230509.952 ops/s
# Warmup Iteration   9: 1230811.212 ops/s
# Warmup Iteration  10: 1228970.813 ops/s
# Warmup Iteration  11: 1228095.793 ops/s
# Warmup Iteration  12: 1228781.808 ops/s
# Warmup Iteration  13: 1227821.640 ops/s
# Warmup Iteration  14: 1230650.475 ops/s
# Warmup Iteration  15: 1228905.654 ops/s
# Warmup Iteration  16: 1229954.468 ops/s
# Warmup Iteration  17: 1230467.737 ops/s
# Warmup Iteration  18: 1227067.842 ops/s
# Warmup Iteration  19: 1231344.414 ops/s
# Warmup Iteration  20: 1231678.322 ops/s
# Warmup Iteration  21: 1230737.551 ops/s
# Warmup Iteration  22: 1227497.536 ops/s
# Warmup Iteration  23: 1227422.977 ops/s
# Warmup Iteration  24: 1227627.953 ops/s
# Warmup Iteration  25: 1230421.292 ops/s
# Warmup Iteration  26: 1227191.887 ops/s
# Warmup Iteration  27: 1230956.765 ops/s
# Warmup Iteration  28: 1228186.929 ops/s
# Warmup Iteration  29: 1226450.654 ops/s
# Warmup Iteration  30: 1231334.075 ops/s
Iteration   1: 1230303.503 ops/s
Iteration   2: 1229485.176 ops/s
Iteration   3: 1232295.344 ops/s
Iteration   4: 1230687.545 ops/s
Iteration   5: 1225791.794 ops/s
Iteration   6: 1228720.656 ops/s
Iteration   7: 1231605.358 ops/s
Iteration   8: 1230119.311 ops/s
Iteration   9: 1233302.425 ops/s
Iteration  10: 1226042.870 ops/s
Iteration  11: 1230673.628 ops/s
Iteration  12: 1229946.236 ops/s
Iteration  13: 1231452.169 ops/s
Iteration  14: 1229898.840 ops/s
Iteration  15: 1233068.111 ops/s
Iteration  16: 1228162.877 ops/s
Iteration  17: 1225823.108 ops/s
Iteration  18: 1231240.607 ops/s
Iteration  19: 1231227.282 ops/s
Iteration  20: 1231154.114 ops/s
Iteration  21: 1228992.035 ops/s
Iteration  22: 1231732.268 ops/s
Iteration  23: 1226731.023 ops/s
Iteration  24: 1226631.861 ops/s
Iteration  25: 1225733.310 ops/s
Iteration  26: 1231038.699 ops/s
Iteration  27: 1231528.306 ops/s
Iteration  28: 1229915.913 ops/s
Iteration  29: 1231181.254 ops/s
Iteration  30: 1228274.202 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take":
  1229758.661 ±(99.9%) 1478.870 ops/s [Average]
  (min, avg, max) = (1225733.310, 1229758.661, 1233302.425), stdev = 2213.503
  CI (99.9%): [1228279.791, 1231237.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_take  thrpt   30  1229758.661 ± 1478.870  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 868594.824 ops/s
# Warmup Iteration   2: 1999705.190 ops/s
# Warmup Iteration   3: 1999808.880 ops/s
# Warmup Iteration   4: 1684595.147 ops/s
# Warmup Iteration   5: 2007129.924 ops/s
# Warmup Iteration   6: 2002053.143 ops/s
# Warmup Iteration   7: 2005180.502 ops/s
# Warmup Iteration   8: 2007260.438 ops/s
# Warmup Iteration   9: 2003121.664 ops/s
# Warmup Iteration  10: 2000722.525 ops/s
# Warmup Iteration  11: 1997031.750 ops/s
# Warmup Iteration  12: 2003920.216 ops/s
# Warmup Iteration  13: 2000209.938 ops/s
# Warmup Iteration  14: 1997684.387 ops/s
# Warmup Iteration  15: 2001810.867 ops/s
# Warmup Iteration  16: 1991042.199 ops/s
# Warmup Iteration  17: 2000084.727 ops/s
# Warmup Iteration  18: 1990884.796 ops/s
# Warmup Iteration  19: 1999934.913 ops/s
# Warmup Iteration  20: 2008260.314 ops/s
# Warmup Iteration  21: 2007608.368 ops/s
# Warmup Iteration  22: 1992094.359 ops/s
# Warmup Iteration  23: 2001227.130 ops/s
# Warmup Iteration  24: 2006247.637 ops/s
# Warmup Iteration  25: 2000488.064 ops/s
# Warmup Iteration  26: 2006159.340 ops/s
# Warmup Iteration  27: 1997734.256 ops/s
# Warmup Iteration  28: 2005725.417 ops/s
# Warmup Iteration  29: 2003034.281 ops/s
# Warmup Iteration  30: 1994744.478 ops/s
Iteration   1: 2004413.443 ops/s
Iteration   2: 2000438.679 ops/s
Iteration   3: 1995020.524 ops/s
Iteration   4: 2009862.045 ops/s
Iteration   5: 2001184.264 ops/s
Iteration   6: 2002948.425 ops/s
Iteration   7: 1999726.591 ops/s
Iteration   8: 1999088.582 ops/s
Iteration   9: 2009165.566 ops/s
Iteration  10: 2007897.942 ops/s
Iteration  11: 2008840.423 ops/s
Iteration  12: 1999555.471 ops/s
Iteration  13: 2002357.559 ops/s
Iteration  14: 1997831.971 ops/s
Iteration  15: 1999163.647 ops/s
Iteration  16: 1999169.465 ops/s
Iteration  17: 2005416.177 ops/s
Iteration  18: 2006099.125 ops/s
Iteration  19: 2006147.683 ops/s
Iteration  20: 2005052.649 ops/s
Iteration  21: 2004973.562 ops/s
Iteration  22: 2000412.422 ops/s
Iteration  23: 2008755.819 ops/s
Iteration  24: 2009990.077 ops/s
Iteration  25: 1999842.411 ops/s
Iteration  26: 2006850.926 ops/s
Iteration  27: 2008038.591 ops/s
Iteration  28: 2005396.391 ops/s
Iteration  29: 2006326.689 ops/s
Iteration  30: 1995871.788 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_takeWhile":
  2003527.964 ±(99.9%) 2895.577 ops/s [Average]
  (min, avg, max) = (1995020.524, 2003527.964, 2009990.077), stdev = 4333.963
  CI (99.9%): [2000632.387, 2006423.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_takeWhile  thrpt   30  2003527.964 ± 2895.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672803.837 ops/s
# Warmup Iteration   2: 769325.403 ops/s
# Warmup Iteration   3: 981172.177 ops/s
# Warmup Iteration   4: 984181.801 ops/s
# Warmup Iteration   5: 981239.643 ops/s
# Warmup Iteration   6: 981130.782 ops/s
# Warmup Iteration   7: 981866.322 ops/s
# Warmup Iteration   8: 982937.675 ops/s
# Warmup Iteration   9: 984383.857 ops/s
# Warmup Iteration  10: 823462.299 ops/s
# Warmup Iteration  11: 981121.429 ops/s
# Warmup Iteration  12: 983537.656 ops/s
# Warmup Iteration  13: 983078.592 ops/s
# Warmup Iteration  14: 987107.310 ops/s
# Warmup Iteration  15: 984853.455 ops/s
# Warmup Iteration  16: 986813.204 ops/s
# Warmup Iteration  17: 1047986.007 ops/s
# Warmup Iteration  18: 1046617.472 ops/s
# Warmup Iteration  19: 1043607.189 ops/s
# Warmup Iteration  20: 1044857.573 ops/s
# Warmup Iteration  21: 1043442.185 ops/s
# Warmup Iteration  22: 1046023.206 ops/s
# Warmup Iteration  23: 1043812.318 ops/s
# Warmup Iteration  24: 1045006.735 ops/s
# Warmup Iteration  25: 1047635.124 ops/s
# Warmup Iteration  26: 1046912.324 ops/s
# Warmup Iteration  27: 1046650.185 ops/s
# Warmup Iteration  28: 1047645.688 ops/s
# Warmup Iteration  29: 1044313.121 ops/s
# Warmup Iteration  30: 1045084.907 ops/s
Iteration   1: 1043355.826 ops/s
Iteration   2: 1044816.866 ops/s
Iteration   3: 1044326.980 ops/s
Iteration   4: 1046014.477 ops/s
Iteration   5: 1043279.853 ops/s
Iteration   6: 1047625.164 ops/s
Iteration   7: 1043796.556 ops/s
Iteration   8: 1043602.803 ops/s
Iteration   9: 1046348.053 ops/s
Iteration  10: 1046209.384 ops/s
Iteration  11: 1041578.950 ops/s
Iteration  12: 1045914.460 ops/s
Iteration  13: 1043749.289 ops/s
Iteration  14: 1043493.222 ops/s
Iteration  15: 1047386.854 ops/s
Iteration  16: 1040240.603 ops/s
Iteration  17: 1045630.079 ops/s
Iteration  18: 1044324.157 ops/s
Iteration  19: 1044610.020 ops/s
Iteration  20: 1047106.952 ops/s
Iteration  21: 1047848.651 ops/s
Iteration  22: 1044280.303 ops/s
Iteration  23: 1043672.299 ops/s
Iteration  24: 1043155.498 ops/s
Iteration  25: 1045018.085 ops/s
Iteration  26: 1042593.559 ops/s
Iteration  27: 1049617.694 ops/s
Iteration  28: 1045252.494 ops/s
Iteration  29: 1048788.617 ops/s
Iteration  30: 1042570.604 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_take_throws":
  1044873.612 ±(99.9%) 1423.623 ops/s [Average]
  (min, avg, max) = (1040240.603, 1044873.612, 1049617.694), stdev = 2130.812
  CI (99.9%): [1043449.989, 1046297.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_take_throws  thrpt   30  1044873.612 ± 1423.623  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3644716.779 ops/s
# Warmup Iteration   2: 7835150.659 ops/s
# Warmup Iteration   3: 7887281.257 ops/s
# Warmup Iteration   4: 6802717.457 ops/s
# Warmup Iteration   5: 7984986.176 ops/s
# Warmup Iteration   6: 7964705.143 ops/s
# Warmup Iteration   7: 7978424.428 ops/s
# Warmup Iteration   8: 7980522.992 ops/s
# Warmup Iteration   9: 7982339.418 ops/s
# Warmup Iteration  10: 7946919.210 ops/s
# Warmup Iteration  11: 7971556.825 ops/s
# Warmup Iteration  12: 7990408.752 ops/s
# Warmup Iteration  13: 7983468.307 ops/s
# Warmup Iteration  14: 7984415.748 ops/s
# Warmup Iteration  15: 7994782.543 ops/s
# Warmup Iteration  16: 7996064.311 ops/s
# Warmup Iteration  17: 7961071.705 ops/s
# Warmup Iteration  18: 7959657.080 ops/s
# Warmup Iteration  19: 7942447.461 ops/s
# Warmup Iteration  20: 7940657.808 ops/s
# Warmup Iteration  21: 7944388.763 ops/s
# Warmup Iteration  22: 7936488.942 ops/s
# Warmup Iteration  23: 7925308.304 ops/s
# Warmup Iteration  24: 7936949.778 ops/s
# Warmup Iteration  25: 7928503.262 ops/s
# Warmup Iteration  26: 7950936.272 ops/s
# Warmup Iteration  27: 7961552.719 ops/s
# Warmup Iteration  28: 7926847.828 ops/s
# Warmup Iteration  29: 7924804.773 ops/s
# Warmup Iteration  30: 7939517.764 ops/s
Iteration   1: 7948688.236 ops/s
Iteration   2: 7940656.155 ops/s
Iteration   3: 7926562.255 ops/s
Iteration   4: 7923009.236 ops/s
Iteration   5: 7955400.603 ops/s
Iteration   6: 7962285.206 ops/s
Iteration   7: 7925461.966 ops/s
Iteration   8: 7929901.415 ops/s
Iteration   9: 7921050.045 ops/s
Iteration  10: 7956546.723 ops/s
Iteration  11: 7948323.966 ops/s
Iteration  12: 7944263.801 ops/s
Iteration  13: 7936526.817 ops/s
Iteration  14: 7951948.606 ops/s
Iteration  15: 7948119.496 ops/s
Iteration  16: 7989125.506 ops/s
Iteration  17: 7960840.697 ops/s
Iteration  18: 7969540.144 ops/s
Iteration  19: 7963432.910 ops/s
Iteration  20: 7928421.080 ops/s
Iteration  21: 7985375.767 ops/s
Iteration  22: 7933357.340 ops/s
Iteration  23: 7962456.775 ops/s
Iteration  24: 7953511.627 ops/s
Iteration  25: 7954488.490 ops/s
Iteration  26: 7942148.126 ops/s
Iteration  27: 7953212.950 ops/s
Iteration  28: 7953084.854 ops/s
Iteration  29: 7941682.916 ops/s
Iteration  30: 7981608.516 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_tap":
  7949701.074 ±(99.9%) 11898.609 ops/s [Average]
  (min, avg, max) = (7921050.045, 7949701.074, 7989125.506), stdev = 17809.279
  CI (99.9%): [7937802.465, 7961599.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_tap  thrpt   30  7949701.074 ± 11898.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testAddWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testAddWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1514678.208 ops/s
# Warmup Iteration   2: 3741054.662 ops/s
# Warmup Iteration   3: 3762959.673 ops/s
# Warmup Iteration   4: 3141265.288 ops/s
# Warmup Iteration   5: 3774757.177 ops/s
# Warmup Iteration   6: 3765668.542 ops/s
# Warmup Iteration   7: 3766942.284 ops/s
# Warmup Iteration   8: 3768858.158 ops/s
# Warmup Iteration   9: 3772114.988 ops/s
# Warmup Iteration  10: 3761562.430 ops/s
# Warmup Iteration  11: 3765245.995 ops/s
# Warmup Iteration  12: 3758029.874 ops/s
# Warmup Iteration  13: 3767776.806 ops/s
# Warmup Iteration  14: 3760677.215 ops/s
# Warmup Iteration  15: 3766019.496 ops/s
# Warmup Iteration  16: 3769392.332 ops/s
# Warmup Iteration  17: 3759457.188 ops/s
# Warmup Iteration  18: 3769460.604 ops/s
# Warmup Iteration  19: 3772267.253 ops/s
# Warmup Iteration  20: 3774719.730 ops/s
# Warmup Iteration  21: 3769693.827 ops/s
# Warmup Iteration  22: 3766732.129 ops/s
# Warmup Iteration  23: 3759469.738 ops/s
# Warmup Iteration  24: 3772245.241 ops/s
# Warmup Iteration  25: 3770265.237 ops/s
# Warmup Iteration  26: 3767311.479 ops/s
# Warmup Iteration  27: 3769239.121 ops/s
# Warmup Iteration  28: 3766103.480 ops/s
# Warmup Iteration  29: 3781165.655 ops/s
# Warmup Iteration  30: 3769224.070 ops/s
Iteration   1: 3756912.542 ops/s
Iteration   2: 3762652.530 ops/s
Iteration   3: 3744063.252 ops/s
Iteration   4: 3712071.799 ops/s
Iteration   5: 3757258.342 ops/s
Iteration   6: 3756719.744 ops/s
Iteration   7: 3768262.950 ops/s
Iteration   8: 3752523.659 ops/s
Iteration   9: 3755833.429 ops/s
Iteration  10: 3763062.490 ops/s
Iteration  11: 3771333.816 ops/s
Iteration  12: 3767015.111 ops/s
Iteration  13: 3757829.577 ops/s
Iteration  14: 3769607.958 ops/s
Iteration  15: 3767298.878 ops/s
Iteration  16: 3780047.826 ops/s
Iteration  17: 3760213.406 ops/s
Iteration  18: 3777797.723 ops/s
Iteration  19: 3736569.435 ops/s
Iteration  20: 3771990.361 ops/s
Iteration  21: 3760642.243 ops/s
Iteration  22: 3757510.707 ops/s
Iteration  23: 3758823.779 ops/s
Iteration  24: 3760339.456 ops/s
Iteration  25: 3766678.080 ops/s
Iteration  26: 3764601.748 ops/s
Iteration  27: 3767407.545 ops/s
Iteration  28: 3768695.264 ops/s
Iteration  29: 3746604.257 ops/s
Iteration  30: 3761456.431 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testAddWithIndex":
  3760060.811 ±(99.9%) 8650.938 ops/s [Average]
  (min, avg, max) = (3712071.799, 3760060.811, 3780047.826), stdev = 12948.318
  CI (99.9%): [3751409.873, 3768711.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testAddWithIndex  thrpt   30  3760060.811 ± 8650.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521075.792 ops/s
# Warmup Iteration   2: 545712.055 ops/s
# Warmup Iteration   3: 752759.499 ops/s
# Warmup Iteration   4: 751063.745 ops/s
# Warmup Iteration   5: 750097.537 ops/s
# Warmup Iteration   6: 751742.698 ops/s
# Warmup Iteration   7: 751693.159 ops/s
# Warmup Iteration   8: 750333.568 ops/s
# Warmup Iteration   9: 750369.968 ops/s
# Warmup Iteration  10: 752233.986 ops/s
# Warmup Iteration  11: 621445.367 ops/s
# Warmup Iteration  12: 751361.749 ops/s
# Warmup Iteration  13: 754266.255 ops/s
# Warmup Iteration  14: 755373.002 ops/s
# Warmup Iteration  15: 749162.690 ops/s
# Warmup Iteration  16: 749397.358 ops/s
# Warmup Iteration  17: 787018.648 ops/s
# Warmup Iteration  18: 784317.084 ops/s
# Warmup Iteration  19: 782952.232 ops/s
# Warmup Iteration  20: 783545.826 ops/s
# Warmup Iteration  21: 785274.024 ops/s
# Warmup Iteration  22: 787449.468 ops/s
# Warmup Iteration  23: 786267.359 ops/s
# Warmup Iteration  24: 785423.795 ops/s
# Warmup Iteration  25: 786586.115 ops/s
# Warmup Iteration  26: 784599.473 ops/s
# Warmup Iteration  27: 784512.218 ops/s
# Warmup Iteration  28: 783265.749 ops/s
# Warmup Iteration  29: 784230.137 ops/s
# Warmup Iteration  30: 785905.375 ops/s
Iteration   1: 788068.276 ops/s
Iteration   2: 786836.935 ops/s
Iteration   3: 788458.966 ops/s
Iteration   4: 791304.568 ops/s
Iteration   5: 781716.515 ops/s
Iteration   6: 784116.018 ops/s
Iteration   7: 786050.596 ops/s
Iteration   8: 784860.236 ops/s
Iteration   9: 788790.387 ops/s
Iteration  10: 786513.182 ops/s
Iteration  11: 785422.144 ops/s
Iteration  12: 786721.212 ops/s
Iteration  13: 783244.702 ops/s
Iteration  14: 788069.662 ops/s
Iteration  15: 786988.357 ops/s
Iteration  16: 786074.341 ops/s
Iteration  17: 788145.979 ops/s
Iteration  18: 784877.872 ops/s
Iteration  19: 784351.028 ops/s
Iteration  20: 785798.998 ops/s
Iteration  21: 782586.986 ops/s
Iteration  22: 783569.325 ops/s
Iteration  23: 787928.140 ops/s
Iteration  24: 782922.918 ops/s
Iteration  25: 788498.018 ops/s
Iteration  26: 786484.023 ops/s
Iteration  27: 783579.386 ops/s
Iteration  28: 785144.040 ops/s
Iteration  29: 786345.166 ops/s
Iteration  30: 788068.154 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testClone":
  786051.204 ±(99.9%) 1472.541 ops/s [Average]
  (min, avg, max) = (781716.515, 786051.204, 791304.568), stdev = 2204.030
  CI (99.9%): [784578.663, 787523.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testClone  thrpt   30  786051.204 ± 1472.541  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testContainsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testContainsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2346570.571 ops/s
# Warmup Iteration   2: 4807347.649 ops/s
# Warmup Iteration   3: 5065448.344 ops/s
# Warmup Iteration   4: 5078658.225 ops/s
# Warmup Iteration   5: 4265105.770 ops/s
# Warmup Iteration   6: 5084726.081 ops/s
# Warmup Iteration   7: 5090692.990 ops/s
# Warmup Iteration   8: 5074115.303 ops/s
# Warmup Iteration   9: 5084214.631 ops/s
# Warmup Iteration  10: 5080754.326 ops/s
# Warmup Iteration  11: 5088607.366 ops/s
# Warmup Iteration  12: 5089523.947 ops/s
# Warmup Iteration  13: 5082408.793 ops/s
# Warmup Iteration  14: 5087903.706 ops/s
# Warmup Iteration  15: 5084956.366 ops/s
# Warmup Iteration  16: 5081452.496 ops/s
# Warmup Iteration  17: 5095797.461 ops/s
# Warmup Iteration  18: 5085370.225 ops/s
# Warmup Iteration  19: 5089130.392 ops/s
# Warmup Iteration  20: 5086382.521 ops/s
# Warmup Iteration  21: 5096017.166 ops/s
# Warmup Iteration  22: 5084278.771 ops/s
# Warmup Iteration  23: 5086496.095 ops/s
# Warmup Iteration  24: 5079555.279 ops/s
# Warmup Iteration  25: 5090877.252 ops/s
# Warmup Iteration  26: 5081677.649 ops/s
# Warmup Iteration  27: 5077317.561 ops/s
# Warmup Iteration  28: 5084827.490 ops/s
# Warmup Iteration  29: 5076734.282 ops/s
# Warmup Iteration  30: 5078917.188 ops/s
Iteration   1: 5079233.752 ops/s
Iteration   2: 5080357.754 ops/s
Iteration   3: 5086367.638 ops/s
Iteration   4: 5065756.346 ops/s
Iteration   5: 5081022.844 ops/s
Iteration   6: 5061378.557 ops/s
Iteration   7: 5073539.530 ops/s
Iteration   8: 5097106.499 ops/s
Iteration   9: 5078580.515 ops/s
Iteration  10: 5086594.742 ops/s
Iteration  11: 5092392.168 ops/s
Iteration  12: 5102760.355 ops/s
Iteration  13: 5087064.780 ops/s
Iteration  14: 5069066.157 ops/s
Iteration  15: 5104311.620 ops/s
Iteration  16: 5073917.099 ops/s
Iteration  17: 5089662.332 ops/s
Iteration  18: 5092544.890 ops/s
Iteration  19: 5089781.100 ops/s
Iteration  20: 5066138.297 ops/s
Iteration  21: 5075265.507 ops/s
Iteration  22: 5082888.974 ops/s
Iteration  23: 5085415.917 ops/s
Iteration  24: 5079147.475 ops/s
Iteration  25: 5085214.407 ops/s
Iteration  26: 5094410.855 ops/s
Iteration  27: 5084879.550 ops/s
Iteration  28: 5081970.025 ops/s
Iteration  29: 5075245.172 ops/s
Iteration  30: 5075609.689 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testContainsAll":
  5082587.485 ±(99.9%) 6956.407 ops/s [Average]
  (min, avg, max) = (5061378.557, 5082587.485, 5104311.620), stdev = 10412.023
  CI (99.9%): [5075631.078, 5089543.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testContainsAll  thrpt   30  5082587.485 ± 6956.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testDefaultConstructor$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testDefaultConstructor

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9629911.393 ops/s
# Warmup Iteration   2: 16714632.040 ops/s
# Warmup Iteration   3: 19777453.363 ops/s
# Warmup Iteration   4: 19759748.078 ops/s
# Warmup Iteration   5: 19722918.506 ops/s
# Warmup Iteration   6: 19799497.994 ops/s
# Warmup Iteration   7: 19732134.091 ops/s
# Warmup Iteration   8: 19720387.866 ops/s
# Warmup Iteration   9: 19731821.348 ops/s
# Warmup Iteration  10: 19690104.514 ops/s
# Warmup Iteration  11: 19728626.589 ops/s
# Warmup Iteration  12: 19782034.347 ops/s
# Warmup Iteration  13: 19625824.207 ops/s
# Warmup Iteration  14: 19669831.537 ops/s
# Warmup Iteration  15: 19608661.506 ops/s
# Warmup Iteration  16: 19513328.292 ops/s
# Warmup Iteration  17: 19656434.459 ops/s
# Warmup Iteration  18: 19636399.067 ops/s
# Warmup Iteration  19: 19673886.953 ops/s
# Warmup Iteration  20: 19712753.174 ops/s
# Warmup Iteration  21: 19675880.236 ops/s
# Warmup Iteration  22: 19715335.905 ops/s
# Warmup Iteration  23: 19638056.722 ops/s
# Warmup Iteration  24: 19732911.520 ops/s
# Warmup Iteration  25: 19690440.438 ops/s
# Warmup Iteration  26: 19585304.655 ops/s
# Warmup Iteration  27: 19643159.382 ops/s
# Warmup Iteration  28: 19617528.860 ops/s
# Warmup Iteration  29: 19569677.814 ops/s
# Warmup Iteration  30: 19552736.893 ops/s
Iteration   1: 19540846.761 ops/s
Iteration   2: 19737094.088 ops/s
Iteration   3: 19669547.976 ops/s
Iteration   4: 19635295.553 ops/s
Iteration   5: 19653718.166 ops/s
Iteration   6: 19537422.422 ops/s
Iteration   7: 19600913.979 ops/s
Iteration   8: 19796295.046 ops/s
Iteration   9: 19569998.997 ops/s
Iteration  10: 19543308.724 ops/s
Iteration  11: 19649288.847 ops/s
Iteration  12: 19716111.957 ops/s
Iteration  13: 19748822.745 ops/s
Iteration  14: 19683721.430 ops/s
Iteration  15: 19736732.391 ops/s
Iteration  16: 19642200.459 ops/s
Iteration  17: 19674737.703 ops/s
Iteration  18: 19654534.579 ops/s
Iteration  19: 19677237.995 ops/s
Iteration  20: 19660596.071 ops/s
Iteration  21: 19845508.284 ops/s
Iteration  22: 19787050.476 ops/s
Iteration  23: 19639383.668 ops/s
Iteration  24: 19698671.274 ops/s
Iteration  25: 19794010.442 ops/s
Iteration  26: 19817715.838 ops/s
Iteration  27: 19739637.516 ops/s
Iteration  28: 19659346.130 ops/s
Iteration  29: 19729513.078 ops/s
Iteration  30: 19629061.831 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testDefaultConstructor":
  19682277.481 ±(99.9%) 54179.595 ops/s [Average]
  (min, avg, max) = (19537422.422, 19682277.481, 19845508.284), stdev = 81093.474
  CI (99.9%): [19628097.885, 19736457.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testDefaultConstructor  thrpt   30  19682277.481 ± 54179.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEmptyIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEmptyIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56077413.672 ops/s
# Warmup Iteration   2: 112691353.589 ops/s
# Warmup Iteration   3: 106048637.067 ops/s
# Warmup Iteration   4: 123362985.622 ops/s
# Warmup Iteration   5: 123250141.060 ops/s
# Warmup Iteration   6: 123953340.290 ops/s
# Warmup Iteration   7: 123544578.768 ops/s
# Warmup Iteration   8: 123933341.411 ops/s
# Warmup Iteration   9: 123540741.752 ops/s
# Warmup Iteration  10: 123785582.020 ops/s
# Warmup Iteration  11: 123622373.286 ops/s
# Warmup Iteration  12: 123713530.567 ops/s
# Warmup Iteration  13: 123700647.415 ops/s
# Warmup Iteration  14: 123385921.854 ops/s
# Warmup Iteration  15: 123554813.515 ops/s
# Warmup Iteration  16: 124298542.660 ops/s
# Warmup Iteration  17: 124028143.509 ops/s
# Warmup Iteration  18: 124318539.713 ops/s
# Warmup Iteration  19: 123832923.619 ops/s
# Warmup Iteration  20: 123874258.540 ops/s
# Warmup Iteration  21: 124079745.755 ops/s
# Warmup Iteration  22: 123888671.892 ops/s
# Warmup Iteration  23: 123713916.808 ops/s
# Warmup Iteration  24: 123694352.859 ops/s
# Warmup Iteration  25: 123775662.948 ops/s
# Warmup Iteration  26: 124255301.487 ops/s
# Warmup Iteration  27: 123886331.474 ops/s
# Warmup Iteration  28: 123918420.873 ops/s
# Warmup Iteration  29: 123795220.284 ops/s
# Warmup Iteration  30: 124276606.240 ops/s
Iteration   1: 124223115.542 ops/s
Iteration   2: 124008523.873 ops/s
Iteration   3: 123837329.801 ops/s
Iteration   4: 123424532.181 ops/s
Iteration   5: 123318084.288 ops/s
Iteration   6: 123987726.990 ops/s
Iteration   7: 123458016.969 ops/s
Iteration   8: 123115731.962 ops/s
Iteration   9: 123624050.063 ops/s
Iteration  10: 123042823.338 ops/s
Iteration  11: 122670923.156 ops/s
Iteration  12: 123896196.954 ops/s
Iteration  13: 123510044.760 ops/s
Iteration  14: 124074310.229 ops/s
Iteration  15: 124271041.869 ops/s
Iteration  16: 124657755.145 ops/s
Iteration  17: 124288777.031 ops/s
Iteration  18: 124264920.146 ops/s
Iteration  19: 123809937.375 ops/s
Iteration  20: 124421637.533 ops/s
Iteration  21: 124198727.547 ops/s
Iteration  22: 124895243.167 ops/s
Iteration  23: 123902107.990 ops/s
Iteration  24: 123914144.319 ops/s
Iteration  25: 124109202.330 ops/s
Iteration  26: 124521614.162 ops/s
Iteration  27: 124484939.505 ops/s
Iteration  28: 124610030.190 ops/s
Iteration  29: 124700218.850 ops/s
Iteration  30: 124346637.324 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEmptyIterator":
  123986278.153 ±(99.9%) 356485.861 ops/s [Average]
  (min, avg, max) = (122670923.156, 123986278.153, 124895243.167), stdev = 533571.295
  CI (99.9%): [123629792.292, 124342764.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
CompositeFastListTest._Benchmark.benchmark_testEmptyIterator  thrpt   30  123986278.153 ± 356485.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 422093.751 ops/s
# Warmup Iteration   2: 961711.010 ops/s
# Warmup Iteration   3: 974219.584 ops/s
# Warmup Iteration   4: 839540.057 ops/s
# Warmup Iteration   5: 956710.563 ops/s
# Warmup Iteration   6: 979177.093 ops/s
# Warmup Iteration   7: 979524.354 ops/s
# Warmup Iteration   8: 976670.138 ops/s
# Warmup Iteration   9: 979180.774 ops/s
# Warmup Iteration  10: 981174.430 ops/s
# Warmup Iteration  11: 978150.596 ops/s
# Warmup Iteration  12: 977250.005 ops/s
# Warmup Iteration  13: 979176.026 ops/s
# Warmup Iteration  14: 976851.529 ops/s
# Warmup Iteration  15: 981470.807 ops/s
# Warmup Iteration  16: 980749.141 ops/s
# Warmup Iteration  17: 977275.693 ops/s
# Warmup Iteration  18: 979042.340 ops/s
# Warmup Iteration  19: 979253.703 ops/s
# Warmup Iteration  20: 980397.833 ops/s
# Warmup Iteration  21: 978662.443 ops/s
# Warmup Iteration  22: 980181.401 ops/s
# Warmup Iteration  23: 980188.385 ops/s
# Warmup Iteration  24: 974968.038 ops/s
# Warmup Iteration  25: 976144.772 ops/s
# Warmup Iteration  26: 976584.552 ops/s
# Warmup Iteration  27: 978210.137 ops/s
# Warmup Iteration  28: 977404.528 ops/s
# Warmup Iteration  29: 978293.082 ops/s
# Warmup Iteration  30: 979248.593 ops/s
Iteration   1: 978936.166 ops/s
Iteration   2: 979375.963 ops/s
Iteration   3: 979997.053 ops/s
Iteration   4: 982762.006 ops/s
Iteration   5: 981398.768 ops/s
Iteration   6: 973286.956 ops/s
Iteration   7: 975735.059 ops/s
Iteration   8: 976977.621 ops/s
Iteration   9: 976251.543 ops/s
Iteration  10: 979191.931 ops/s
Iteration  11: 980026.182 ops/s
Iteration  12: 978565.906 ops/s
Iteration  13: 973949.728 ops/s
Iteration  14: 980644.542 ops/s
Iteration  15: 978603.211 ops/s
Iteration  16: 978574.092 ops/s
Iteration  17: 981225.016 ops/s
Iteration  18: 974654.620 ops/s
Iteration  19: 976696.963 ops/s
Iteration  20: 976135.267 ops/s
Iteration  21: 979094.235 ops/s
Iteration  22: 980315.957 ops/s
Iteration  23: 979561.635 ops/s
Iteration  24: 978622.641 ops/s
Iteration  25: 978286.794 ops/s
Iteration  26: 979063.163 ops/s
Iteration  27: 978483.724 ops/s
Iteration  28: 981293.159 ops/s
Iteration  29: 978275.416 ops/s
Iteration  30: 976175.606 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testEquals":
  978405.364 ±(99.9%) 1515.887 ops/s [Average]
  (min, avg, max) = (973286.956, 978405.364, 982762.006), stdev = 2268.908
  CI (99.9%): [976889.477, 979921.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testEquals  thrpt   30  978405.364 ± 1515.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testGet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testGet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561823.536 ops/s
# Warmup Iteration   2: 587644.978 ops/s
# Warmup Iteration   3: 791373.587 ops/s
# Warmup Iteration   4: 798106.470 ops/s
# Warmup Iteration   5: 794247.307 ops/s
# Warmup Iteration   6: 795416.178 ops/s
# Warmup Iteration   7: 795565.175 ops/s
# Warmup Iteration   8: 796705.860 ops/s
# Warmup Iteration   9: 797283.906 ops/s
# Warmup Iteration  10: 796768.274 ops/s
# Warmup Iteration  11: 769693.479 ops/s
# Warmup Iteration  12: 687457.606 ops/s
# Warmup Iteration  13: 796106.487 ops/s
# Warmup Iteration  14: 796194.207 ops/s
# Warmup Iteration  15: 797360.595 ops/s
# Warmup Iteration  16: 795998.632 ops/s
# Warmup Iteration  17: 836600.371 ops/s
# Warmup Iteration  18: 834329.838 ops/s
# Warmup Iteration  19: 834372.739 ops/s
# Warmup Iteration  20: 835224.588 ops/s
# Warmup Iteration  21: 835150.238 ops/s
# Warmup Iteration  22: 837265.569 ops/s
# Warmup Iteration  23: 835595.737 ops/s
# Warmup Iteration  24: 836447.337 ops/s
# Warmup Iteration  25: 836495.764 ops/s
# Warmup Iteration  26: 836684.613 ops/s
# Warmup Iteration  27: 837458.453 ops/s
# Warmup Iteration  28: 839918.965 ops/s
# Warmup Iteration  29: 836345.687 ops/s
# Warmup Iteration  30: 836692.502 ops/s
Iteration   1: 833494.034 ops/s
Iteration   2: 834188.790 ops/s
Iteration   3: 838015.782 ops/s
Iteration   4: 835602.674 ops/s
Iteration   5: 832126.752 ops/s
Iteration   6: 837357.793 ops/s
Iteration   7: 834396.897 ops/s
Iteration   8: 833420.333 ops/s
Iteration   9: 833607.339 ops/s
Iteration  10: 837193.100 ops/s
Iteration  11: 838401.804 ops/s
Iteration  12: 835524.925 ops/s
Iteration  13: 836643.099 ops/s
Iteration  14: 838929.248 ops/s
Iteration  15: 836646.590 ops/s
Iteration  16: 839003.797 ops/s
Iteration  17: 835024.896 ops/s
Iteration  18: 836846.811 ops/s
Iteration  19: 835263.687 ops/s
Iteration  20: 838315.032 ops/s
Iteration  21: 834158.369 ops/s
Iteration  22: 837175.787 ops/s
Iteration  23: 838658.269 ops/s
Iteration  24: 836373.770 ops/s
Iteration  25: 832403.638 ops/s
Iteration  26: 836768.754 ops/s
Iteration  27: 836409.096 ops/s
Iteration  28: 832146.093 ops/s
Iteration  29: 837790.001 ops/s
Iteration  30: 838454.359 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testGet":
  836011.384 ±(99.9%) 1407.735 ops/s [Average]
  (min, avg, max) = (832126.752, 836011.384, 839003.797), stdev = 2107.032
  CI (99.9%): [834603.649, 837419.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testGet  thrpt   30  836011.384 ± 1407.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425421.197 ops/s
# Warmup Iteration   2: 985816.238 ops/s
# Warmup Iteration   3: 991514.215 ops/s
# Warmup Iteration   4: 829313.872 ops/s
# Warmup Iteration   5: 995602.966 ops/s
# Warmup Iteration   6: 993833.404 ops/s
# Warmup Iteration   7: 994346.651 ops/s
# Warmup Iteration   8: 996432.450 ops/s
# Warmup Iteration   9: 993364.452 ops/s
# Warmup Iteration  10: 996557.081 ops/s
# Warmup Iteration  11: 996691.602 ops/s
# Warmup Iteration  12: 994309.883 ops/s
# Warmup Iteration  13: 995764.119 ops/s
# Warmup Iteration  14: 994173.799 ops/s
# Warmup Iteration  15: 985856.479 ops/s
# Warmup Iteration  16: 995926.933 ops/s
# Warmup Iteration  17: 990689.476 ops/s
# Warmup Iteration  18: 989896.102 ops/s
# Warmup Iteration  19: 988230.952 ops/s
# Warmup Iteration  20: 990552.776 ops/s
# Warmup Iteration  21: 988635.128 ops/s
# Warmup Iteration  22: 988669.161 ops/s
# Warmup Iteration  23: 992075.837 ops/s
# Warmup Iteration  24: 987039.543 ops/s
# Warmup Iteration  25: 988025.244 ops/s
# Warmup Iteration  26: 990394.676 ops/s
# Warmup Iteration  27: 987812.708 ops/s
# Warmup Iteration  28: 988260.457 ops/s
# Warmup Iteration  29: 987539.071 ops/s
# Warmup Iteration  30: 988917.694 ops/s
Iteration   1: 989676.640 ops/s
Iteration   2: 989476.296 ops/s
Iteration   3: 991485.355 ops/s
Iteration   4: 987270.568 ops/s
Iteration   5: 986776.063 ops/s
Iteration   6: 989942.997 ops/s
Iteration   7: 989048.297 ops/s
Iteration   8: 989879.067 ops/s
Iteration   9: 989025.345 ops/s
Iteration  10: 988815.639 ops/s
Iteration  11: 988117.786 ops/s
Iteration  12: 989481.139 ops/s
Iteration  13: 988743.445 ops/s
Iteration  14: 987977.318 ops/s
Iteration  15: 988473.969 ops/s
Iteration  16: 987438.876 ops/s
Iteration  17: 984156.235 ops/s
Iteration  18: 991141.058 ops/s
Iteration  19: 987981.871 ops/s
Iteration  20: 992438.062 ops/s
Iteration  21: 990452.758 ops/s
Iteration  22: 985978.707 ops/s
Iteration  23: 988277.360 ops/s
Iteration  24: 990875.802 ops/s
Iteration  25: 988139.949 ops/s
Iteration  26: 988650.660 ops/s
Iteration  27: 991225.029 ops/s
Iteration  28: 989024.084 ops/s
Iteration  29: 991134.619 ops/s
Iteration  30: 989980.426 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testHashCode":
  989036.181 ±(99.9%) 1169.162 ops/s [Average]
  (min, avg, max) = (984156.235, 989036.181, 992438.062), stdev = 1749.946
  CI (99.9%): [987867.019, 990205.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testHashCode  thrpt   30  989036.181 ± 1169.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12645047.434 ops/s
# Warmup Iteration   2: 23997821.908 ops/s
# Warmup Iteration   3: 24797532.003 ops/s
# Warmup Iteration   4: 26656073.444 ops/s
# Warmup Iteration   5: 26664020.899 ops/s
# Warmup Iteration   6: 26762641.412 ops/s
# Warmup Iteration   7: 26665364.679 ops/s
# Warmup Iteration   8: 26693902.584 ops/s
# Warmup Iteration   9: 26619878.104 ops/s
# Warmup Iteration  10: 26621205.078 ops/s
# Warmup Iteration  11: 26702500.581 ops/s
# Warmup Iteration  12: 26675369.570 ops/s
# Warmup Iteration  13: 26664233.745 ops/s
# Warmup Iteration  14: 26731243.812 ops/s
# Warmup Iteration  15: 26712870.441 ops/s
# Warmup Iteration  16: 26692642.624 ops/s
# Warmup Iteration  17: 26601176.153 ops/s
# Warmup Iteration  18: 26706777.235 ops/s
# Warmup Iteration  19: 26767628.196 ops/s
# Warmup Iteration  20: 26675781.230 ops/s
# Warmup Iteration  21: 26610065.092 ops/s
# Warmup Iteration  22: 26744596.002 ops/s
# Warmup Iteration  23: 26730409.342 ops/s
# Warmup Iteration  24: 26770125.108 ops/s
# Warmup Iteration  25: 26776716.733 ops/s
# Warmup Iteration  26: 26573595.050 ops/s
# Warmup Iteration  27: 26710832.577 ops/s
# Warmup Iteration  28: 26672913.446 ops/s
# Warmup Iteration  29: 26757339.446 ops/s
# Warmup Iteration  30: 26638669.633 ops/s
Iteration   1: 26760445.883 ops/s
Iteration   2: 26527402.488 ops/s
Iteration   3: 26522971.251 ops/s
Iteration   4: 26720318.441 ops/s
Iteration   5: 26685163.531 ops/s
Iteration   6: 26626498.361 ops/s
Iteration   7: 26761831.671 ops/s
Iteration   8: 26585556.222 ops/s
Iteration   9: 26742884.594 ops/s
Iteration  10: 26825423.175 ops/s
Iteration  11: 26675198.810 ops/s
Iteration  12: 26586159.357 ops/s
Iteration  13: 26697966.463 ops/s
Iteration  14: 26765025.247 ops/s
Iteration  15: 26807002.468 ops/s
Iteration  16: 26598581.225 ops/s
Iteration  17: 26772864.030 ops/s
Iteration  18: 26561926.469 ops/s
Iteration  19: 26806525.795 ops/s
Iteration  20: 26774098.395 ops/s
Iteration  21: 26815645.396 ops/s
Iteration  22: 26788369.804 ops/s
Iteration  23: 26776489.076 ops/s
Iteration  24: 26489145.841 ops/s
Iteration  25: 26773895.576 ops/s
Iteration  26: 26860761.965 ops/s
Iteration  27: 26623779.632 ops/s
Iteration  28: 26572012.330 ops/s
Iteration  29: 26575988.100 ops/s
Iteration  30: 26746556.525 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewCollection":
  26694216.271 ±(99.9%) 71009.944 ops/s [Average]
  (min, avg, max) = (26489145.841, 26694216.271, 26860761.965), stdev = 106284.349
  CI (99.9%): [26623206.327, 26765226.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testNewCollection  thrpt   30  26694216.271 ± 71009.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4401555.290 ops/s
# Warmup Iteration   2: 7720047.101 ops/s
# Warmup Iteration   3: 9191926.073 ops/s
# Warmup Iteration   4: 9145653.505 ops/s
# Warmup Iteration   5: 9197652.058 ops/s
# Warmup Iteration   6: 9154382.987 ops/s
# Warmup Iteration   7: 9193953.696 ops/s
# Warmup Iteration   8: 9201466.179 ops/s
# Warmup Iteration   9: 9188056.189 ops/s
# Warmup Iteration  10: 9200217.577 ops/s
# Warmup Iteration  11: 9168150.086 ops/s
# Warmup Iteration  12: 9196100.824 ops/s
# Warmup Iteration  13: 9198116.119 ops/s
# Warmup Iteration  14: 9172043.961 ops/s
# Warmup Iteration  15: 9176290.967 ops/s
# Warmup Iteration  16: 9159598.568 ops/s
# Warmup Iteration  17: 9184358.287 ops/s
# Warmup Iteration  18: 9202281.697 ops/s
# Warmup Iteration  19: 9214784.069 ops/s
# Warmup Iteration  20: 9210031.177 ops/s
# Warmup Iteration  21: 9209611.672 ops/s
# Warmup Iteration  22: 9181767.228 ops/s
# Warmup Iteration  23: 9201842.262 ops/s
# Warmup Iteration  24: 9221885.914 ops/s
# Warmup Iteration  25: 9198405.521 ops/s
# Warmup Iteration  26: 9169426.318 ops/s
# Warmup Iteration  27: 9146217.693 ops/s
# Warmup Iteration  28: 9188405.865 ops/s
# Warmup Iteration  29: 9184439.128 ops/s
# Warmup Iteration  30: 9127155.050 ops/s
Iteration   1: 9192606.465 ops/s
Iteration   2: 9148750.959 ops/s
Iteration   3: 9137221.967 ops/s
Iteration   4: 9174928.509 ops/s
Iteration   5: 9135797.756 ops/s
Iteration   6: 9158149.109 ops/s
Iteration   7: 9185429.803 ops/s
Iteration   8: 9225725.247 ops/s
Iteration   9: 9165412.645 ops/s
Iteration  10: 9188405.697 ops/s
Iteration  11: 9130326.003 ops/s
Iteration  12: 9133772.545 ops/s
Iteration  13: 9089700.247 ops/s
Iteration  14: 9126057.189 ops/s
Iteration  15: 9238307.407 ops/s
Iteration  16: 9196377.565 ops/s
Iteration  17: 9228808.300 ops/s
Iteration  18: 9162555.235 ops/s
Iteration  19: 9196777.957 ops/s
Iteration  20: 9173851.296 ops/s
Iteration  21: 9189979.027 ops/s
Iteration  22: 9198038.954 ops/s
Iteration  23: 9188102.686 ops/s
Iteration  24: 9173638.359 ops/s
Iteration  25: 9192229.427 ops/s
Iteration  26: 9206024.004 ops/s
Iteration  27: 9170304.377 ops/s
Iteration  28: 9226570.586 ops/s
Iteration  29: 9193743.427 ops/s
Iteration  30: 9165143.820 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWith":
  9176424.552 ±(99.9%) 22814.269 ops/s [Average]
  (min, avg, max) = (9089700.247, 9176424.552, 9238307.407), stdev = 34147.327
  CI (99.9%): [9153610.283, 9199238.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testNewWith  thrpt   30  9176424.552 ± 22814.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2265205.502 ops/s
# Warmup Iteration   2: 4978635.165 ops/s
# Warmup Iteration   3: 4172029.607 ops/s
# Warmup Iteration   4: 4947360.959 ops/s
# Warmup Iteration   5: 4944672.358 ops/s
# Warmup Iteration   6: 4950201.557 ops/s
# Warmup Iteration   7: 4943768.624 ops/s
# Warmup Iteration   8: 4949152.693 ops/s
# Warmup Iteration   9: 4931801.107 ops/s
# Warmup Iteration  10: 4948486.505 ops/s
# Warmup Iteration  11: 4941735.264 ops/s
# Warmup Iteration  12: 4959489.617 ops/s
# Warmup Iteration  13: 4936383.291 ops/s
# Warmup Iteration  14: 4938249.485 ops/s
# Warmup Iteration  15: 4949188.797 ops/s
# Warmup Iteration  16: 4956737.966 ops/s
# Warmup Iteration  17: 4960472.998 ops/s
# Warmup Iteration  18: 4956271.938 ops/s
# Warmup Iteration  19: 4967398.278 ops/s
# Warmup Iteration  20: 4952974.292 ops/s
# Warmup Iteration  21: 4944383.294 ops/s
# Warmup Iteration  22: 4942567.339 ops/s
# Warmup Iteration  23: 4947383.036 ops/s
# Warmup Iteration  24: 4954400.131 ops/s
# Warmup Iteration  25: 4953376.967 ops/s
# Warmup Iteration  26: 4960455.068 ops/s
# Warmup Iteration  27: 4954627.121 ops/s
# Warmup Iteration  28: 4949328.280 ops/s
# Warmup Iteration  29: 4844536.061 ops/s
# Warmup Iteration  30: 4938290.418 ops/s
Iteration   1: 4940651.426 ops/s
Iteration   2: 4961930.628 ops/s
Iteration   3: 4963841.372 ops/s
Iteration   4: 4939384.419 ops/s
Iteration   5: 4959084.002 ops/s
Iteration   6: 4951798.956 ops/s
Iteration   7: 4936639.108 ops/s
Iteration   8: 4950546.911 ops/s
Iteration   9: 4960980.301 ops/s
Iteration  10: 4950068.577 ops/s
Iteration  11: 4962711.365 ops/s
Iteration  12: 4961788.051 ops/s
Iteration  13: 4952565.197 ops/s
Iteration  14: 4952930.184 ops/s
Iteration  15: 4966519.293 ops/s
Iteration  16: 4951181.491 ops/s
Iteration  17: 4959436.595 ops/s
Iteration  18: 4956112.837 ops/s
Iteration  19: 4950254.008 ops/s
Iteration  20: 4960501.529 ops/s
Iteration  21: 4942025.940 ops/s
Iteration  22: 4935926.304 ops/s
Iteration  23: 4943236.827 ops/s
Iteration  24: 4954198.816 ops/s
Iteration  25: 4946952.614 ops/s
Iteration  26: 4938586.089 ops/s
Iteration  27: 4936226.771 ops/s
Iteration  28: 4940105.086 ops/s
Iteration  29: 4940621.932 ops/s
Iteration  30: 4958630.230 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithVarArgs":
  4950847.895 ±(99.9%) 6373.342 ops/s [Average]
  (min, avg, max) = (4935926.304, 4950847.895, 4966519.293), stdev = 9539.319
  CI (99.9%): [4944474.553, 4957221.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  4950847.895 ± 6373.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2836485.891 ops/s
# Warmup Iteration   2: 5460512.541 ops/s
# Warmup Iteration   3: 5881376.756 ops/s
# Warmup Iteration   4: 6182937.525 ops/s
# Warmup Iteration   5: 6192484.948 ops/s
# Warmup Iteration   6: 6182541.496 ops/s
# Warmup Iteration   7: 6218059.377 ops/s
# Warmup Iteration   8: 6213793.943 ops/s
# Warmup Iteration   9: 6213942.739 ops/s
# Warmup Iteration  10: 6198323.129 ops/s
# Warmup Iteration  11: 6179595.313 ops/s
# Warmup Iteration  12: 6169473.645 ops/s
# Warmup Iteration  13: 6172910.237 ops/s
# Warmup Iteration  14: 6196385.712 ops/s
# Warmup Iteration  15: 6187722.585 ops/s
# Warmup Iteration  16: 6154140.462 ops/s
# Warmup Iteration  17: 6170425.329 ops/s
# Warmup Iteration  18: 6198498.130 ops/s
# Warmup Iteration  19: 6174974.327 ops/s
# Warmup Iteration  20: 6210085.156 ops/s
# Warmup Iteration  21: 6202872.310 ops/s
# Warmup Iteration  22: 6206724.331 ops/s
# Warmup Iteration  23: 6199721.390 ops/s
# Warmup Iteration  24: 6210566.104 ops/s
# Warmup Iteration  25: 6214034.192 ops/s
# Warmup Iteration  26: 6214780.554 ops/s
# Warmup Iteration  27: 6194654.790 ops/s
# Warmup Iteration  28: 6174894.558 ops/s
# Warmup Iteration  29: 6156475.483 ops/s
# Warmup Iteration  30: 6159294.051 ops/s
Iteration   1: 6188021.593 ops/s
Iteration   2: 6183174.770 ops/s
Iteration   3: 6211641.078 ops/s
Iteration   4: 6175271.056 ops/s
Iteration   5: 6196404.648 ops/s
Iteration   6: 6209243.733 ops/s
Iteration   7: 6182064.088 ops/s
Iteration   8: 6196583.642 ops/s
Iteration   9: 6160335.465 ops/s
Iteration  10: 6195515.438 ops/s
Iteration  11: 6174865.180 ops/s
Iteration  12: 6219958.166 ops/s
Iteration  13: 6211013.432 ops/s
Iteration  14: 6194156.506 ops/s
Iteration  15: 6178969.055 ops/s
Iteration  16: 6177013.480 ops/s
Iteration  17: 6193856.347 ops/s
Iteration  18: 6159281.647 ops/s
Iteration  19: 6190822.599 ops/s
Iteration  20: 6190630.213 ops/s
Iteration  21: 6179143.310 ops/s
Iteration  22: 6223014.363 ops/s
Iteration  23: 6221692.893 ops/s
Iteration  24: 6219808.318 ops/s
Iteration  25: 6205737.942 ops/s
Iteration  26: 6207908.997 ops/s
Iteration  27: 6192510.167 ops/s
Iteration  28: 6175407.291 ops/s
Iteration  29: 6209748.896 ops/s
Iteration  30: 6170249.694 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWith":
  6193134.800 ±(99.9%) 12011.222 ops/s [Average]
  (min, avg, max) = (6159281.647, 6193134.800, 6223014.363), stdev = 17977.833
  CI (99.9%): [6181123.578, 6205146.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testNewWithWith  thrpt   30  6193134.800 ± 12011.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2544819.328 ops/s
# Warmup Iteration   2: 5364065.023 ops/s
# Warmup Iteration   3: 5144827.167 ops/s
# Warmup Iteration   4: 5726031.112 ops/s
# Warmup Iteration   5: 5709653.501 ops/s
# Warmup Iteration   6: 5724488.439 ops/s
# Warmup Iteration   7: 5723607.620 ops/s
# Warmup Iteration   8: 5720202.762 ops/s
# Warmup Iteration   9: 5694109.490 ops/s
# Warmup Iteration  10: 5714874.305 ops/s
# Warmup Iteration  11: 5691895.884 ops/s
# Warmup Iteration  12: 5726782.658 ops/s
# Warmup Iteration  13: 5704824.814 ops/s
# Warmup Iteration  14: 5695502.177 ops/s
# Warmup Iteration  15: 5752413.026 ops/s
# Warmup Iteration  16: 5718707.294 ops/s
# Warmup Iteration  17: 5721057.336 ops/s
# Warmup Iteration  18: 5730285.044 ops/s
# Warmup Iteration  19: 5715879.028 ops/s
# Warmup Iteration  20: 5718507.582 ops/s
# Warmup Iteration  21: 5723711.810 ops/s
# Warmup Iteration  22: 5729945.532 ops/s
# Warmup Iteration  23: 5715447.904 ops/s
# Warmup Iteration  24: 5726155.085 ops/s
# Warmup Iteration  25: 5730457.971 ops/s
# Warmup Iteration  26: 5736119.610 ops/s
# Warmup Iteration  27: 5721219.801 ops/s
# Warmup Iteration  28: 5721816.247 ops/s
# Warmup Iteration  29: 5700674.869 ops/s
# Warmup Iteration  30: 5693768.809 ops/s
Iteration   1: 5724131.780 ops/s
Iteration   2: 5664710.960 ops/s
Iteration   3: 5712407.855 ops/s
Iteration   4: 5713997.023 ops/s
Iteration   5: 5717799.226 ops/s
Iteration   6: 5671377.460 ops/s
Iteration   7: 5729674.317 ops/s
Iteration   8: 5634584.079 ops/s
Iteration   9: 5690313.014 ops/s
Iteration  10: 5712997.367 ops/s
Iteration  11: 5727455.198 ops/s
Iteration  12: 5693538.905 ops/s
Iteration  13: 5720624.175 ops/s
Iteration  14: 5730640.666 ops/s
Iteration  15: 5723930.823 ops/s
Iteration  16: 5706409.191 ops/s
Iteration  17: 5736729.592 ops/s
Iteration  18: 5691099.904 ops/s
Iteration  19: 5702514.978 ops/s
Iteration  20: 5735414.877 ops/s
Iteration  21: 5730053.913 ops/s
Iteration  22: 5723569.147 ops/s
Iteration  23: 5710903.378 ops/s
Iteration  24: 5716176.481 ops/s
Iteration  25: 5709094.548 ops/s
Iteration  26: 5706036.466 ops/s
Iteration  27: 5672690.871 ops/s
Iteration  28: 5712085.798 ops/s
Iteration  29: 5720772.333 ops/s
Iteration  30: 5720912.526 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testNewWithWithWith":
  5708754.895 ±(99.9%) 15504.793 ops/s [Average]
  (min, avg, max) = (5634584.079, 5708754.895, 5736729.592), stdev = 23206.846
  CI (99.9%): [5693250.102, 5724259.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  5708754.895 ± 15504.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testRemoveWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testRemoveWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3368145.453 ops/s
# Warmup Iteration   2: 7684700.699 ops/s
# Warmup Iteration   3: 6626859.444 ops/s
# Warmup Iteration   4: 7919852.189 ops/s
# Warmup Iteration   5: 7905798.061 ops/s
# Warmup Iteration   6: 7922591.928 ops/s
# Warmup Iteration   7: 7928944.829 ops/s
# Warmup Iteration   8: 7934660.808 ops/s
# Warmup Iteration   9: 7924681.456 ops/s
# Warmup Iteration  10: 7927134.345 ops/s
# Warmup Iteration  11: 7932313.599 ops/s
# Warmup Iteration  12: 7943011.276 ops/s
# Warmup Iteration  13: 7931573.359 ops/s
# Warmup Iteration  14: 7920744.895 ops/s
# Warmup Iteration  15: 7940891.337 ops/s
# Warmup Iteration  16: 7943046.458 ops/s
# Warmup Iteration  17: 7937522.935 ops/s
# Warmup Iteration  18: 7943454.946 ops/s
# Warmup Iteration  19: 7916249.953 ops/s
# Warmup Iteration  20: 7921095.703 ops/s
# Warmup Iteration  21: 7924481.323 ops/s
# Warmup Iteration  22: 7926736.357 ops/s
# Warmup Iteration  23: 7929577.651 ops/s
# Warmup Iteration  24: 7912450.859 ops/s
# Warmup Iteration  25: 7901692.282 ops/s
# Warmup Iteration  26: 7915345.887 ops/s
# Warmup Iteration  27: 7926976.021 ops/s
# Warmup Iteration  28: 7912400.642 ops/s
# Warmup Iteration  29: 7905622.413 ops/s
# Warmup Iteration  30: 7907623.726 ops/s
Iteration   1: 7920000.961 ops/s
Iteration   2: 7910298.832 ops/s
Iteration   3: 7916040.062 ops/s
Iteration   4: 7883623.195 ops/s
Iteration   5: 7926412.801 ops/s
Iteration   6: 7911198.805 ops/s
Iteration   7: 7943926.751 ops/s
Iteration   8: 7915295.004 ops/s
Iteration   9: 7920881.090 ops/s
Iteration  10: 7906817.913 ops/s
Iteration  11: 7947671.174 ops/s
Iteration  12: 7931570.608 ops/s
Iteration  13: 7934433.172 ops/s
Iteration  14: 7889357.132 ops/s
Iteration  15: 7908158.900 ops/s
Iteration  16: 7943630.245 ops/s
Iteration  17: 7915158.155 ops/s
Iteration  18: 7922363.765 ops/s
Iteration  19: 7928867.068 ops/s
Iteration  20: 7926489.626 ops/s
Iteration  21: 7899442.265 ops/s
Iteration  22: 7890923.409 ops/s
Iteration  23: 7865341.174 ops/s
Iteration  24: 7915001.876 ops/s
Iteration  25: 7843875.361 ops/s
Iteration  26: 7810990.946 ops/s
Iteration  27: 7915741.127 ops/s
Iteration  28: 7942884.766 ops/s
Iteration  29: 7900592.128 ops/s
Iteration  30: 7899595.829 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testRemoveWithIndex":
  7909552.805 ±(99.9%) 19708.517 ops/s [Average]
  (min, avg, max) = (7810990.946, 7909552.805, 7947671.174), stdev = 29498.783
  CI (99.9%): [7889844.287, 7929261.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_testRemoveWithIndex  thrpt   30  7909552.805 ± 19708.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 989692.937 ops/s
# Warmup Iteration   2: 2366673.996 ops/s
# Warmup Iteration   3: 1957993.523 ops/s
# Warmup Iteration   4: 2370310.269 ops/s
# Warmup Iteration   5: 2372494.125 ops/s
# Warmup Iteration   6: 2365526.028 ops/s
# Warmup Iteration   7: 2358153.479 ops/s
# Warmup Iteration   8: 2363931.384 ops/s
# Warmup Iteration   9: 2358641.006 ops/s
# Warmup Iteration  10: 2371628.591 ops/s
# Warmup Iteration  11: 2357859.725 ops/s
# Warmup Iteration  12: 2365943.946 ops/s
# Warmup Iteration  13: 2350212.388 ops/s
# Warmup Iteration  14: 2360638.330 ops/s
# Warmup Iteration  15: 2359763.779 ops/s
# Warmup Iteration  16: 2372381.681 ops/s
# Warmup Iteration  17: 2364208.204 ops/s
# Warmup Iteration  18: 2350951.696 ops/s
# Warmup Iteration  19: 2356437.765 ops/s
# Warmup Iteration  20: 2366502.153 ops/s
# Warmup Iteration  21: 2374829.059 ops/s
# Warmup Iteration  22: 2368186.844 ops/s
# Warmup Iteration  23: 2364888.838 ops/s
# Warmup Iteration  24: 2364843.652 ops/s
# Warmup Iteration  25: 2366524.633 ops/s
# Warmup Iteration  26: 2370748.616 ops/s
# Warmup Iteration  27: 2369762.109 ops/s
# Warmup Iteration  28: 2363221.267 ops/s
# Warmup Iteration  29: 2362880.105 ops/s
# Warmup Iteration  30: 2360317.319 ops/s
Iteration   1: 2367619.692 ops/s
Iteration   2: 2368884.376 ops/s
Iteration   3: 2378030.208 ops/s
Iteration   4: 2370134.238 ops/s
Iteration   5: 2363405.703 ops/s
Iteration   6: 2368747.769 ops/s
Iteration   7: 2375947.087 ops/s
Iteration   8: 2365586.491 ops/s
Iteration   9: 2363585.595 ops/s
Iteration  10: 2359248.599 ops/s
Iteration  11: 2366879.260 ops/s
Iteration  12: 2376178.090 ops/s
Iteration  13: 2367659.423 ops/s
Iteration  14: 2376980.910 ops/s
Iteration  15: 2363717.314 ops/s
Iteration  16: 2385055.508 ops/s
Iteration  17: 2376752.919 ops/s
Iteration  18: 2368416.525 ops/s
Iteration  19: 2375492.443 ops/s
Iteration  20: 2371219.627 ops/s
Iteration  21: 2371247.496 ops/s
Iteration  22: 2373336.930 ops/s
Iteration  23: 2372225.173 ops/s
Iteration  24: 2369645.740 ops/s
Iteration  25: 2364044.453 ops/s
Iteration  26: 2379340.947 ops/s
Iteration  27: 2370044.228 ops/s
Iteration  28: 2369841.356 ops/s
Iteration  29: 2366434.663 ops/s
Iteration  30: 2358740.265 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_testToString":
  2370148.101 ±(99.9%) 4030.553 ops/s [Average]
  (min, avg, max) = (2358740.265, 2370148.101, 2385055.508), stdev = 6032.743
  CI (99.9%): [2366117.548, 2374178.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_testToString  thrpt   30  2370148.101 ± 4030.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2216625.423 ops/s
# Warmup Iteration   2: 5177737.797 ops/s
# Warmup Iteration   3: 4406614.117 ops/s
# Warmup Iteration   4: 5258695.287 ops/s
# Warmup Iteration   5: 5268342.778 ops/s
# Warmup Iteration   6: 5292810.824 ops/s
# Warmup Iteration   7: 5255374.697 ops/s
# Warmup Iteration   8: 5273982.860 ops/s
# Warmup Iteration   9: 5265236.470 ops/s
# Warmup Iteration  10: 5263868.763 ops/s
# Warmup Iteration  11: 5275737.510 ops/s
# Warmup Iteration  12: 5265266.299 ops/s
# Warmup Iteration  13: 5268357.888 ops/s
# Warmup Iteration  14: 5273743.945 ops/s
# Warmup Iteration  15: 5266027.002 ops/s
# Warmup Iteration  16: 5286997.556 ops/s
# Warmup Iteration  17: 5270660.723 ops/s
# Warmup Iteration  18: 5254757.917 ops/s
# Warmup Iteration  19: 5242848.398 ops/s
# Warmup Iteration  20: 5264729.463 ops/s
# Warmup Iteration  21: 5276973.864 ops/s
# Warmup Iteration  22: 5287609.560 ops/s
# Warmup Iteration  23: 5275871.960 ops/s
# Warmup Iteration  24: 5277542.767 ops/s
# Warmup Iteration  25: 5281612.333 ops/s
# Warmup Iteration  26: 5303677.660 ops/s
# Warmup Iteration  27: 5273548.316 ops/s
# Warmup Iteration  28: 5267949.998 ops/s
# Warmup Iteration  29: 5244717.153 ops/s
# Warmup Iteration  30: 5253013.573 ops/s
Iteration   1: 5280475.138 ops/s
Iteration   2: 5263121.656 ops/s
Iteration   3: 5254812.189 ops/s
Iteration   4: 5275980.513 ops/s
Iteration   5: 5261149.658 ops/s
Iteration   6: 5243962.441 ops/s
Iteration   7: 5272449.556 ops/s
Iteration   8: 5256742.476 ops/s
Iteration   9: 5257350.412 ops/s
Iteration  10: 5277836.386 ops/s
Iteration  11: 5281584.024 ops/s
Iteration  12: 5255967.417 ops/s
Iteration  13: 5251454.272 ops/s
Iteration  14: 5252178.190 ops/s
Iteration  15: 5286971.439 ops/s
Iteration  16: 5256677.083 ops/s
Iteration  17: 5296687.768 ops/s
Iteration  18: 5283311.242 ops/s
Iteration  19: 5278883.064 ops/s
Iteration  20: 5286265.266 ops/s
Iteration  21: 5246944.300 ops/s
Iteration  22: 5256324.913 ops/s
Iteration  23: 5268868.824 ops/s
Iteration  24: 5272870.664 ops/s
Iteration  25: 5283835.428 ops/s
Iteration  26: 5282397.063 ops/s
Iteration  27: 5262016.234 ops/s
Iteration  28: 5262105.771 ops/s
Iteration  29: 5257141.235 ops/s
Iteration  30: 5257311.453 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toArray":
  5267455.869 ±(99.9%) 9288.732 ops/s [Average]
  (min, avg, max) = (5243962.441, 5267455.869, 5296687.768), stdev = 13902.937
  CI (99.9%): [5258167.137, 5276744.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toArray  thrpt   30  5267455.869 ± 9288.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 932378.496 ops/s
# Warmup Iteration   2: 1640606.000 ops/s
# Warmup Iteration   3: 1916244.952 ops/s
# Warmup Iteration   4: 1923719.259 ops/s
# Warmup Iteration   5: 1923343.768 ops/s
# Warmup Iteration   6: 1574698.060 ops/s
# Warmup Iteration   7: 1921486.185 ops/s
# Warmup Iteration   8: 1921104.335 ops/s
# Warmup Iteration   9: 1927105.945 ops/s
# Warmup Iteration  10: 1926863.101 ops/s
# Warmup Iteration  11: 1924213.644 ops/s
# Warmup Iteration  12: 1931039.525 ops/s
# Warmup Iteration  13: 1926316.470 ops/s
# Warmup Iteration  14: 1925817.807 ops/s
# Warmup Iteration  15: 1928181.670 ops/s
# Warmup Iteration  16: 1924114.219 ops/s
# Warmup Iteration  17: 1916218.747 ops/s
# Warmup Iteration  18: 1910831.165 ops/s
# Warmup Iteration  19: 1916043.475 ops/s
# Warmup Iteration  20: 1917832.484 ops/s
# Warmup Iteration  21: 1917707.338 ops/s
# Warmup Iteration  22: 1915666.489 ops/s
# Warmup Iteration  23: 1912886.116 ops/s
# Warmup Iteration  24: 1916995.769 ops/s
# Warmup Iteration  25: 1915939.607 ops/s
# Warmup Iteration  26: 1917245.161 ops/s
# Warmup Iteration  27: 1915168.230 ops/s
# Warmup Iteration  28: 1919785.998 ops/s
# Warmup Iteration  29: 1914563.308 ops/s
# Warmup Iteration  30: 1916931.922 ops/s
Iteration   1: 1919785.612 ops/s
Iteration   2: 1914780.693 ops/s
Iteration   3: 1914251.377 ops/s
Iteration   4: 1911468.026 ops/s
Iteration   5: 1910981.685 ops/s
Iteration   6: 1915782.617 ops/s
Iteration   7: 1914238.875 ops/s
Iteration   8: 1920179.409 ops/s
Iteration   9: 1918733.757 ops/s
Iteration  10: 1922605.566 ops/s
Iteration  11: 1910787.235 ops/s
Iteration  12: 1918680.733 ops/s
Iteration  13: 1917266.408 ops/s
Iteration  14: 1914291.516 ops/s
Iteration  15: 1922563.372 ops/s
Iteration  16: 1917732.166 ops/s
Iteration  17: 1919822.298 ops/s
Iteration  18: 1916650.038 ops/s
Iteration  19: 1917509.230 ops/s
Iteration  20: 1920703.831 ops/s
Iteration  21: 1912165.960 ops/s
Iteration  22: 1915513.765 ops/s
Iteration  23: 1913957.206 ops/s
Iteration  24: 1917726.242 ops/s
Iteration  25: 1914860.507 ops/s
Iteration  26: 1911695.329 ops/s
Iteration  27: 1908798.393 ops/s
Iteration  28: 1911267.773 ops/s
Iteration  29: 1913433.894 ops/s
Iteration  30: 1911151.212 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBag":
  1915646.157 ±(99.9%) 2491.312 ops/s [Average]
  (min, avg, max) = (1908798.393, 1915646.157, 1922605.566), stdev = 3728.879
  CI (99.9%): [1913154.845, 1918137.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toBag  thrpt   30  1915646.157 ± 2491.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98136.470 ops/s
# Warmup Iteration   2: 132752.237 ops/s
# Warmup Iteration   3: 171457.909 ops/s
# Warmup Iteration   4: 170065.941 ops/s
# Warmup Iteration   5: 171983.791 ops/s
# Warmup Iteration   6: 171744.962 ops/s
# Warmup Iteration   7: 171289.421 ops/s
# Warmup Iteration   8: 143555.307 ops/s
# Warmup Iteration   9: 170067.794 ops/s
# Warmup Iteration  10: 171738.455 ops/s
# Warmup Iteration  11: 171844.408 ops/s
# Warmup Iteration  12: 170892.496 ops/s
# Warmup Iteration  13: 171895.875 ops/s
# Warmup Iteration  14: 171999.184 ops/s
# Warmup Iteration  15: 171844.311 ops/s
# Warmup Iteration  16: 171350.712 ops/s
# Warmup Iteration  17: 178147.694 ops/s
# Warmup Iteration  18: 177703.365 ops/s
# Warmup Iteration  19: 177898.495 ops/s
# Warmup Iteration  20: 177806.880 ops/s
# Warmup Iteration  21: 177842.386 ops/s
# Warmup Iteration  22: 177388.285 ops/s
# Warmup Iteration  23: 177743.447 ops/s
# Warmup Iteration  24: 177428.724 ops/s
# Warmup Iteration  25: 177901.628 ops/s
# Warmup Iteration  26: 178193.899 ops/s
# Warmup Iteration  27: 177385.524 ops/s
# Warmup Iteration  28: 177666.553 ops/s
# Warmup Iteration  29: 177253.436 ops/s
# Warmup Iteration  30: 178083.820 ops/s
Iteration   1: 177158.445 ops/s
Iteration   2: 177253.130 ops/s
Iteration   3: 177967.737 ops/s
Iteration   4: 177305.936 ops/s
Iteration   5: 177767.147 ops/s
Iteration   6: 176864.089 ops/s
Iteration   7: 177657.645 ops/s
Iteration   8: 177691.778 ops/s
Iteration   9: 177640.308 ops/s
Iteration  10: 177396.822 ops/s
Iteration  11: 177070.050 ops/s
Iteration  12: 177499.217 ops/s
Iteration  13: 177610.818 ops/s
Iteration  14: 177541.759 ops/s
Iteration  15: 177514.320 ops/s
Iteration  16: 177930.657 ops/s
Iteration  17: 177352.668 ops/s
Iteration  18: 177494.971 ops/s
Iteration  19: 178416.494 ops/s
Iteration  20: 178242.015 ops/s
Iteration  21: 177487.785 ops/s
Iteration  22: 178298.412 ops/s
Iteration  23: 177497.244 ops/s
Iteration  24: 177476.535 ops/s
Iteration  25: 177640.527 ops/s
Iteration  26: 177481.460 ops/s
Iteration  27: 177880.425 ops/s
Iteration  28: 178383.907 ops/s
Iteration  29: 178055.726 ops/s
Iteration  30: 177505.283 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toBiMap":
  177636.110 ±(99.9%) 252.312 ops/s [Average]
  (min, avg, max) = (176864.089, 177636.110, 178416.494), stdev = 377.649
  CI (99.9%): [177383.798, 177888.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_toBiMap  thrpt   30  177636.110 ± 252.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2302958.298 ops/s
# Warmup Iteration   2: 5428840.099 ops/s
# Warmup Iteration   3: 5410502.088 ops/s
# Warmup Iteration   4: 4547552.538 ops/s
# Warmup Iteration   5: 5448691.378 ops/s
# Warmup Iteration   6: 5438522.644 ops/s
# Warmup Iteration   7: 5419835.826 ops/s
# Warmup Iteration   8: 5453065.404 ops/s
# Warmup Iteration   9: 5440797.760 ops/s
# Warmup Iteration  10: 5426013.876 ops/s
# Warmup Iteration  11: 5431190.115 ops/s
# Warmup Iteration  12: 5430704.788 ops/s
# Warmup Iteration  13: 5439851.977 ops/s
# Warmup Iteration  14: 5439799.922 ops/s
# Warmup Iteration  15: 5435268.373 ops/s
# Warmup Iteration  16: 5435582.502 ops/s
# Warmup Iteration  17: 5428033.902 ops/s
# Warmup Iteration  18: 5426809.954 ops/s
# Warmup Iteration  19: 5414892.874 ops/s
# Warmup Iteration  20: 5434506.626 ops/s
# Warmup Iteration  21: 5424643.781 ops/s
# Warmup Iteration  22: 5413413.470 ops/s
# Warmup Iteration  23: 5435062.311 ops/s
# Warmup Iteration  24: 5429875.485 ops/s
# Warmup Iteration  25: 5429962.318 ops/s
# Warmup Iteration  26: 5426370.145 ops/s
# Warmup Iteration  27: 5422659.406 ops/s
# Warmup Iteration  28: 5428430.506 ops/s
# Warmup Iteration  29: 5423780.125 ops/s
# Warmup Iteration  30: 5420614.737 ops/s
Iteration   1: 5426761.597 ops/s
Iteration   2: 5449573.362 ops/s
Iteration   3: 5406421.846 ops/s
Iteration   4: 5429656.372 ops/s
Iteration   5: 5426853.369 ops/s
Iteration   6: 5436104.546 ops/s
Iteration   7: 5423696.788 ops/s
Iteration   8: 5438454.839 ops/s
Iteration   9: 5433485.858 ops/s
Iteration  10: 5438454.262 ops/s
Iteration  11: 5460498.228 ops/s
Iteration  12: 5447195.877 ops/s
Iteration  13: 5438932.061 ops/s
Iteration  14: 5444942.894 ops/s
Iteration  15: 5439427.160 ops/s
Iteration  16: 5432675.770 ops/s
Iteration  17: 5440489.349 ops/s
Iteration  18: 5435143.958 ops/s
Iteration  19: 5430947.756 ops/s
Iteration  20: 5434971.811 ops/s
Iteration  21: 5444520.798 ops/s
Iteration  22: 5435821.172 ops/s
Iteration  23: 5433325.289 ops/s
Iteration  24: 5429613.660 ops/s
Iteration  25: 5410425.364 ops/s
Iteration  26: 5443015.168 ops/s
Iteration  27: 5433924.184 ops/s
Iteration  28: 5440397.311 ops/s
Iteration  29: 5438269.847 ops/s
Iteration  30: 5419002.574 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toCollection":
  5434766.769 ±(99.9%) 7253.732 ops/s [Average]
  (min, avg, max) = (5406421.846, 5434766.769, 5460498.228), stdev = 10857.045
  CI (99.9%): [5427513.037, 5442020.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toCollection  thrpt   30  5434766.769 ± 7253.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5326993.297 ops/s
# Warmup Iteration   2: 10637490.963 ops/s
# Warmup Iteration   3: 11056535.698 ops/s
# Warmup Iteration   4: 11014073.240 ops/s
# Warmup Iteration   5: 9236677.795 ops/s
# Warmup Iteration   6: 11015310.544 ops/s
# Warmup Iteration   7: 11063919.428 ops/s
# Warmup Iteration   8: 11071902.797 ops/s
# Warmup Iteration   9: 11044862.057 ops/s
# Warmup Iteration  10: 11005067.244 ops/s
# Warmup Iteration  11: 11043106.963 ops/s
# Warmup Iteration  12: 11070156.379 ops/s
# Warmup Iteration  13: 11033552.015 ops/s
# Warmup Iteration  14: 11052011.612 ops/s
# Warmup Iteration  15: 11070174.017 ops/s
# Warmup Iteration  16: 11052380.164 ops/s
# Warmup Iteration  17: 11067335.881 ops/s
# Warmup Iteration  18: 11053488.759 ops/s
# Warmup Iteration  19: 11044686.752 ops/s
# Warmup Iteration  20: 11042167.041 ops/s
# Warmup Iteration  21: 11062860.124 ops/s
# Warmup Iteration  22: 11051263.803 ops/s
# Warmup Iteration  23: 11066067.744 ops/s
# Warmup Iteration  24: 11055018.664 ops/s
# Warmup Iteration  25: 11051353.468 ops/s
# Warmup Iteration  26: 11058912.209 ops/s
# Warmup Iteration  27: 11051140.033 ops/s
# Warmup Iteration  28: 11029879.225 ops/s
# Warmup Iteration  29: 11046250.063 ops/s
# Warmup Iteration  30: 11030213.092 ops/s
Iteration   1: 11095567.589 ops/s
Iteration   2: 11054268.676 ops/s
Iteration   3: 11038088.840 ops/s
Iteration   4: 11057163.344 ops/s
Iteration   5: 11047227.231 ops/s
Iteration   6: 11030535.773 ops/s
Iteration   7: 11046205.018 ops/s
Iteration   8: 11043510.500 ops/s
Iteration   9: 11025914.608 ops/s
Iteration  10: 11064612.222 ops/s
Iteration  11: 11062253.305 ops/s
Iteration  12: 11052724.922 ops/s
Iteration  13: 11059094.658 ops/s
Iteration  14: 11019000.434 ops/s
Iteration  15: 11061941.904 ops/s
Iteration  16: 11057674.121 ops/s
Iteration  17: 11050198.593 ops/s
Iteration  18: 11027412.401 ops/s
Iteration  19: 11056730.547 ops/s
Iteration  20: 11035306.638 ops/s
Iteration  21: 11044076.342 ops/s
Iteration  22: 11075186.039 ops/s
Iteration  23: 11016130.489 ops/s
Iteration  24: 11025167.354 ops/s
Iteration  25: 11012832.636 ops/s
Iteration  26: 11078599.370 ops/s
Iteration  27: 11033900.506 ops/s
Iteration  28: 11030958.706 ops/s
Iteration  29: 11049323.667 ops/s
Iteration  30: 11038181.955 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutable":
  11046326.280 ±(99.9%) 12826.386 ops/s [Average]
  (min, avg, max) = (11012832.636, 11046326.280, 11095567.589), stdev = 19197.933
  CI (99.9%): [11033499.893, 11059152.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutable  thrpt   30  11046326.280 ± 12826.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514275.868 ops/s
# Warmup Iteration   2: 999571.812 ops/s
# Warmup Iteration   3: 1153001.386 ops/s
# Warmup Iteration   4: 1157077.638 ops/s
# Warmup Iteration   5: 1069260.122 ops/s
# Warmup Iteration   6: 1038993.246 ops/s
# Warmup Iteration   7: 1155879.467 ops/s
# Warmup Iteration   8: 1162716.197 ops/s
# Warmup Iteration   9: 1161893.731 ops/s
# Warmup Iteration  10: 1159899.701 ops/s
# Warmup Iteration  11: 1162072.554 ops/s
# Warmup Iteration  12: 1161234.574 ops/s
# Warmup Iteration  13: 1163309.185 ops/s
# Warmup Iteration  14: 1160476.389 ops/s
# Warmup Iteration  15: 1162519.856 ops/s
# Warmup Iteration  16: 1159599.712 ops/s
# Warmup Iteration  17: 1158738.612 ops/s
# Warmup Iteration  18: 1156984.023 ops/s
# Warmup Iteration  19: 1160057.753 ops/s
# Warmup Iteration  20: 1160936.424 ops/s
# Warmup Iteration  21: 1159837.122 ops/s
# Warmup Iteration  22: 1161291.857 ops/s
# Warmup Iteration  23: 1159876.474 ops/s
# Warmup Iteration  24: 1161650.589 ops/s
# Warmup Iteration  25: 1161207.102 ops/s
# Warmup Iteration  26: 1157956.262 ops/s
# Warmup Iteration  27: 1160231.628 ops/s
# Warmup Iteration  28: 1159728.198 ops/s
# Warmup Iteration  29: 1161094.557 ops/s
# Warmup Iteration  30: 1162758.215 ops/s
Iteration   1: 1159988.229 ops/s
Iteration   2: 1163387.007 ops/s
Iteration   3: 1161380.254 ops/s
Iteration   4: 1164889.017 ops/s
Iteration   5: 1157112.198 ops/s
Iteration   6: 1162072.459 ops/s
Iteration   7: 1160377.289 ops/s
Iteration   8: 1162210.601 ops/s
Iteration   9: 1162436.053 ops/s
Iteration  10: 1161427.527 ops/s
Iteration  11: 1164427.729 ops/s
Iteration  12: 1162595.302 ops/s
Iteration  13: 1157700.552 ops/s
Iteration  14: 1161951.610 ops/s
Iteration  15: 1156403.301 ops/s
Iteration  16: 1158334.616 ops/s
Iteration  17: 1159712.592 ops/s
Iteration  18: 1161609.541 ops/s
Iteration  19: 1161880.446 ops/s
Iteration  20: 1159482.210 ops/s
Iteration  21: 1158689.433 ops/s
Iteration  22: 1162472.384 ops/s
Iteration  23: 1158476.183 ops/s
Iteration  24: 1158418.629 ops/s
Iteration  25: 1163350.231 ops/s
Iteration  26: 1159028.180 ops/s
Iteration  27: 1154020.382 ops/s
Iteration  28: 1160252.201 ops/s
Iteration  29: 1162735.765 ops/s
Iteration  30: 1163212.539 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBag":
  1160667.815 ±(99.9%) 1690.232 ops/s [Average]
  (min, avg, max) = (1154020.382, 1160667.815, 1164889.017), stdev = 2529.860
  CI (99.9%): [1158977.583, 1162358.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1160667.815 ± 1690.232  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 85804.452 ops/s
# Warmup Iteration   2: 119101.759 ops/s
# Warmup Iteration   3: 151753.467 ops/s
# Warmup Iteration   4: 150740.941 ops/s
# Warmup Iteration   5: 151688.952 ops/s
# Warmup Iteration   6: 151409.003 ops/s
# Warmup Iteration   7: 151723.199 ops/s
# Warmup Iteration   8: 128335.991 ops/s
# Warmup Iteration   9: 150362.328 ops/s
# Warmup Iteration  10: 151584.395 ops/s
# Warmup Iteration  11: 151642.688 ops/s
# Warmup Iteration  12: 151783.714 ops/s
# Warmup Iteration  13: 151794.894 ops/s
# Warmup Iteration  14: 151925.131 ops/s
# Warmup Iteration  15: 151408.863 ops/s
# Warmup Iteration  16: 151554.764 ops/s
# Warmup Iteration  17: 155929.818 ops/s
# Warmup Iteration  18: 155926.205 ops/s
# Warmup Iteration  19: 155514.519 ops/s
# Warmup Iteration  20: 155524.921 ops/s
# Warmup Iteration  21: 155894.150 ops/s
# Warmup Iteration  22: 156128.020 ops/s
# Warmup Iteration  23: 155613.099 ops/s
# Warmup Iteration  24: 155745.794 ops/s
# Warmup Iteration  25: 155721.172 ops/s
# Warmup Iteration  26: 155942.844 ops/s
# Warmup Iteration  27: 155428.809 ops/s
# Warmup Iteration  28: 155221.510 ops/s
# Warmup Iteration  29: 155382.294 ops/s
# Warmup Iteration  30: 156057.048 ops/s
Iteration   1: 155915.519 ops/s
Iteration   2: 155908.442 ops/s
Iteration   3: 154789.020 ops/s
Iteration   4: 156265.903 ops/s
Iteration   5: 156094.795 ops/s
Iteration   6: 155865.768 ops/s
Iteration   7: 156308.383 ops/s
Iteration   8: 155465.843 ops/s
Iteration   9: 155914.319 ops/s
Iteration  10: 155255.947 ops/s
Iteration  11: 155310.089 ops/s
Iteration  12: 156160.400 ops/s
Iteration  13: 155706.922 ops/s
Iteration  14: 155844.330 ops/s
Iteration  15: 156027.052 ops/s
Iteration  16: 155952.243 ops/s
Iteration  17: 155401.345 ops/s
Iteration  18: 155943.775 ops/s
Iteration  19: 155620.286 ops/s
Iteration  20: 155585.158 ops/s
Iteration  21: 156166.724 ops/s
Iteration  22: 156159.539 ops/s
Iteration  23: 156193.736 ops/s
Iteration  24: 155519.900 ops/s
Iteration  25: 155515.491 ops/s
Iteration  26: 155803.676 ops/s
Iteration  27: 155272.476 ops/s
Iteration  28: 155494.757 ops/s
Iteration  29: 155615.646 ops/s
Iteration  30: 156124.510 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableBiMap":
  155773.400 ±(99.9%) 242.347 ops/s [Average]
  (min, avg, max) = (154789.020, 155773.400, 156308.383), stdev = 362.733
  CI (99.9%): [155531.053, 156015.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  155773.400 ± 242.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1131445.438 ops/s
# Warmup Iteration   2: 2767214.696 ops/s
# Warmup Iteration   3: 2811544.134 ops/s
# Warmup Iteration   4: 2341751.023 ops/s
# Warmup Iteration   5: 2816615.936 ops/s
# Warmup Iteration   6: 2821915.632 ops/s
# Warmup Iteration   7: 2812159.989 ops/s
# Warmup Iteration   8: 2812717.292 ops/s
# Warmup Iteration   9: 2815023.467 ops/s
# Warmup Iteration  10: 2823162.254 ops/s
# Warmup Iteration  11: 2819540.785 ops/s
# Warmup Iteration  12: 2812865.245 ops/s
# Warmup Iteration  13: 2812447.387 ops/s
# Warmup Iteration  14: 2817568.576 ops/s
# Warmup Iteration  15: 2810260.466 ops/s
# Warmup Iteration  16: 2820576.699 ops/s
# Warmup Iteration  17: 2816361.191 ops/s
# Warmup Iteration  18: 2816927.431 ops/s
# Warmup Iteration  19: 2823199.876 ops/s
# Warmup Iteration  20: 2811670.540 ops/s
# Warmup Iteration  21: 2822095.642 ops/s
# Warmup Iteration  22: 2818832.383 ops/s
# Warmup Iteration  23: 2819121.033 ops/s
# Warmup Iteration  24: 2818680.432 ops/s
# Warmup Iteration  25: 2816003.842 ops/s
# Warmup Iteration  26: 2811911.246 ops/s
# Warmup Iteration  27: 2817052.522 ops/s
# Warmup Iteration  28: 2804947.261 ops/s
# Warmup Iteration  29: 2821386.811 ops/s
# Warmup Iteration  30: 2809550.119 ops/s
Iteration   1: 2824990.402 ops/s
Iteration   2: 2821440.638 ops/s
Iteration   3: 2820965.854 ops/s
Iteration   4: 2818985.667 ops/s
Iteration   5: 2808247.152 ops/s
Iteration   6: 2825914.431 ops/s
Iteration   7: 2822177.554 ops/s
Iteration   8: 2822129.695 ops/s
Iteration   9: 2806814.235 ops/s
Iteration  10: 2811758.980 ops/s
Iteration  11: 2822749.768 ops/s
Iteration  12: 2813189.918 ops/s
Iteration  13: 2814922.082 ops/s
Iteration  14: 2818831.128 ops/s
Iteration  15: 2814614.819 ops/s
Iteration  16: 2822437.939 ops/s
Iteration  17: 2807995.323 ops/s
Iteration  18: 2814417.771 ops/s
Iteration  19: 2818013.716 ops/s
Iteration  20: 2820234.010 ops/s
Iteration  21: 2808517.271 ops/s
Iteration  22: 2812269.817 ops/s
Iteration  23: 2817576.919 ops/s
Iteration  24: 2820918.166 ops/s
Iteration  25: 2814609.294 ops/s
Iteration  26: 2810510.842 ops/s
Iteration  27: 2821698.531 ops/s
Iteration  28: 2818151.584 ops/s
Iteration  29: 2820128.036 ops/s
Iteration  30: 2819707.974 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableList":
  2817163.984 ±(99.9%) 3576.347 ops/s [Average]
  (min, avg, max) = (2806814.235, 2817163.984, 2825914.431), stdev = 5352.909
  CI (99.9%): [2813587.637, 2820740.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableList  thrpt   30  2817163.984 ± 3576.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680233.155 ops/s
# Warmup Iteration   2: 1635130.473 ops/s
# Warmup Iteration   3: 1697279.847 ops/s
# Warmup Iteration   4: 1386305.675 ops/s
# Warmup Iteration   5: 1699365.417 ops/s
# Warmup Iteration   6: 1706436.330 ops/s
# Warmup Iteration   7: 1697175.771 ops/s
# Warmup Iteration   8: 1714617.314 ops/s
# Warmup Iteration   9: 1695204.576 ops/s
# Warmup Iteration  10: 1711844.225 ops/s
# Warmup Iteration  11: 1706178.164 ops/s
# Warmup Iteration  12: 1716453.763 ops/s
# Warmup Iteration  13: 1715265.686 ops/s
# Warmup Iteration  14: 1723446.841 ops/s
# Warmup Iteration  15: 1713535.840 ops/s
# Warmup Iteration  16: 1719654.407 ops/s
# Warmup Iteration  17: 1697284.946 ops/s
# Warmup Iteration  18: 1705746.704 ops/s
# Warmup Iteration  19: 1702612.983 ops/s
# Warmup Iteration  20: 1708495.913 ops/s
# Warmup Iteration  21: 1711829.415 ops/s
# Warmup Iteration  22: 1718103.301 ops/s
# Warmup Iteration  23: 1699804.512 ops/s
# Warmup Iteration  24: 1706772.406 ops/s
# Warmup Iteration  25: 1695457.665 ops/s
# Warmup Iteration  26: 1685632.442 ops/s
# Warmup Iteration  27: 1713913.396 ops/s
# Warmup Iteration  28: 1725888.579 ops/s
# Warmup Iteration  29: 1712507.489 ops/s
# Warmup Iteration  30: 1699388.265 ops/s
Iteration   1: 1696071.682 ops/s
Iteration   2: 1719909.275 ops/s
Iteration   3: 1724770.970 ops/s
Iteration   4: 1697573.446 ops/s
Iteration   5: 1696732.617 ops/s
Iteration   6: 1714597.909 ops/s
Iteration   7: 1732538.843 ops/s
Iteration   8: 1711511.873 ops/s
Iteration   9: 1701045.116 ops/s
Iteration  10: 1706402.708 ops/s
Iteration  11: 1693311.155 ops/s
Iteration  12: 1710819.515 ops/s
Iteration  13: 1699197.111 ops/s
Iteration  14: 1704285.277 ops/s
Iteration  15: 1708310.180 ops/s
Iteration  16: 1737763.125 ops/s
Iteration  17: 1703144.740 ops/s
Iteration  18: 1696600.445 ops/s
Iteration  19: 1736950.204 ops/s
Iteration  20: 1693196.494 ops/s
Iteration  21: 1706209.249 ops/s
Iteration  22: 1702738.041 ops/s
Iteration  23: 1697411.433 ops/s
Iteration  24: 1717450.500 ops/s
Iteration  25: 1704573.329 ops/s
Iteration  26: 1718605.695 ops/s
Iteration  27: 1691485.797 ops/s
Iteration  28: 1696924.086 ops/s
Iteration  29: 1710096.563 ops/s
Iteration  30: 1691908.827 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableMap":
  1707404.540 ±(99.9%) 8707.892 ops/s [Average]
  (min, avg, max) = (1691485.797, 1707404.540, 1737763.125), stdev = 13033.564
  CI (99.9%): [1698696.648, 1716112.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1707404.540 ± 8707.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997474.590 ops/s
# Warmup Iteration   2: 1898298.710 ops/s
# Warmup Iteration   3: 2089722.554 ops/s
# Warmup Iteration   4: 2096394.462 ops/s
# Warmup Iteration   5: 1889132.301 ops/s
# Warmup Iteration   6: 1947781.379 ops/s
# Warmup Iteration   7: 2110313.374 ops/s
# Warmup Iteration   8: 2105370.884 ops/s
# Warmup Iteration   9: 2111117.457 ops/s
# Warmup Iteration  10: 2108964.241 ops/s
# Warmup Iteration  11: 2102926.060 ops/s
# Warmup Iteration  12: 2111015.799 ops/s
# Warmup Iteration  13: 2103472.906 ops/s
# Warmup Iteration  14: 2109640.528 ops/s
# Warmup Iteration  15: 2106631.779 ops/s
# Warmup Iteration  16: 2108611.620 ops/s
# Warmup Iteration  17: 2113645.530 ops/s
# Warmup Iteration  18: 2113020.852 ops/s
# Warmup Iteration  19: 2114260.577 ops/s
# Warmup Iteration  20: 2130094.888 ops/s
# Warmup Iteration  21: 2111306.578 ops/s
# Warmup Iteration  22: 2109437.223 ops/s
# Warmup Iteration  23: 2109009.119 ops/s
# Warmup Iteration  24: 2115840.967 ops/s
# Warmup Iteration  25: 2115087.413 ops/s
# Warmup Iteration  26: 2112047.259 ops/s
# Warmup Iteration  27: 2115582.879 ops/s
# Warmup Iteration  28: 2116418.142 ops/s
# Warmup Iteration  29: 2115608.433 ops/s
# Warmup Iteration  30: 2112631.444 ops/s
Iteration   1: 2113903.738 ops/s
Iteration   2: 2110187.280 ops/s
Iteration   3: 2104850.015 ops/s
Iteration   4: 2117434.980 ops/s
Iteration   5: 2111017.564 ops/s
Iteration   6: 2118503.054 ops/s
Iteration   7: 2111853.406 ops/s
Iteration   8: 2116710.309 ops/s
Iteration   9: 2115109.493 ops/s
Iteration  10: 2112908.329 ops/s
Iteration  11: 2115488.466 ops/s
Iteration  12: 2115609.158 ops/s
Iteration  13: 2113279.175 ops/s
Iteration  14: 2123944.175 ops/s
Iteration  15: 2112506.683 ops/s
Iteration  16: 2110794.964 ops/s
Iteration  17: 2115964.853 ops/s
Iteration  18: 2114309.528 ops/s
Iteration  19: 2116353.852 ops/s
Iteration  20: 2115462.373 ops/s
Iteration  21: 2111545.037 ops/s
Iteration  22: 2117672.193 ops/s
Iteration  23: 2113464.833 ops/s
Iteration  24: 2110121.023 ops/s
Iteration  25: 2113606.644 ops/s
Iteration  26: 2123232.147 ops/s
Iteration  27: 2114054.192 ops/s
Iteration  28: 2119556.294 ops/s
Iteration  29: 2109871.667 ops/s
Iteration  30: 2116333.255 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSet":
  2114521.623 ±(99.9%) 2624.203 ops/s [Average]
  (min, avg, max) = (2104850.015, 2114521.623, 2123944.175), stdev = 3927.783
  CI (99.9%): [2111897.420, 2117145.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSet  thrpt   30  2114521.623 ± 2624.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 838856.076 ops/s
# Warmup Iteration   2: 2178421.598 ops/s
# Warmup Iteration   3: 2227683.102 ops/s
# Warmup Iteration   4: 1856125.488 ops/s
# Warmup Iteration   5: 2232520.676 ops/s
# Warmup Iteration   6: 2227953.659 ops/s
# Warmup Iteration   7: 2238612.690 ops/s
# Warmup Iteration   8: 2230186.455 ops/s
# Warmup Iteration   9: 2235541.495 ops/s
# Warmup Iteration  10: 2229343.838 ops/s
# Warmup Iteration  11: 2229720.478 ops/s
# Warmup Iteration  12: 2231788.516 ops/s
# Warmup Iteration  13: 2227997.500 ops/s
# Warmup Iteration  14: 2223582.197 ops/s
# Warmup Iteration  15: 2235090.861 ops/s
# Warmup Iteration  16: 2223020.221 ops/s
# Warmup Iteration  17: 2230359.574 ops/s
# Warmup Iteration  18: 2233288.395 ops/s
# Warmup Iteration  19: 2234484.166 ops/s
# Warmup Iteration  20: 2231442.938 ops/s
# Warmup Iteration  21: 2231844.018 ops/s
# Warmup Iteration  22: 2225458.387 ops/s
# Warmup Iteration  23: 2232991.260 ops/s
# Warmup Iteration  24: 2230920.596 ops/s
# Warmup Iteration  25: 2233988.891 ops/s
# Warmup Iteration  26: 2225729.611 ops/s
# Warmup Iteration  27: 2233440.217 ops/s
# Warmup Iteration  28: 2226508.446 ops/s
# Warmup Iteration  29: 2233343.853 ops/s
# Warmup Iteration  30: 2225030.805 ops/s
Iteration   1: 2233017.025 ops/s
Iteration   2: 2232840.339 ops/s
Iteration   3: 2229186.636 ops/s
Iteration   4: 2230395.146 ops/s
Iteration   5: 2222993.191 ops/s
Iteration   6: 2234548.552 ops/s
Iteration   7: 2230951.250 ops/s
Iteration   8: 2237156.715 ops/s
Iteration   9: 2234631.355 ops/s
Iteration  10: 2231981.718 ops/s
Iteration  11: 2233819.816 ops/s
Iteration  12: 2237891.169 ops/s
Iteration  13: 2231653.772 ops/s
Iteration  14: 2240153.708 ops/s
Iteration  15: 2228992.533 ops/s
Iteration  16: 2232319.833 ops/s
Iteration  17: 2225575.449 ops/s
Iteration  18: 2234883.255 ops/s
Iteration  19: 2231260.806 ops/s
Iteration  20: 2236019.862 ops/s
Iteration  21: 2232929.763 ops/s
Iteration  22: 2229459.356 ops/s
Iteration  23: 2238473.538 ops/s
Iteration  24: 2229616.250 ops/s
Iteration  25: 2229858.278 ops/s
Iteration  26: 2229750.323 ops/s
Iteration  27: 2231987.554 ops/s
Iteration  28: 2222997.341 ops/s
Iteration  29: 2236555.235 ops/s
Iteration  30: 2230781.561 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2232089.378 ±(99.9%) 2724.149 ops/s [Average]
  (min, avg, max) = (2222993.191, 2232089.378, 2240153.708), stdev = 4077.379
  CI (99.9%): [2229365.228, 2234813.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2232089.378 ± 2724.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259380.987 ops/s
# Warmup Iteration   2: 459780.029 ops/s
# Warmup Iteration   3: 581313.271 ops/s
# Warmup Iteration   4: 586851.238 ops/s
# Warmup Iteration   5: 584921.902 ops/s
# Warmup Iteration   6: 479761.426 ops/s
# Warmup Iteration   7: 575277.929 ops/s
# Warmup Iteration   8: 586875.939 ops/s
# Warmup Iteration   9: 587057.977 ops/s
# Warmup Iteration  10: 587230.103 ops/s
# Warmup Iteration  11: 584610.975 ops/s
# Warmup Iteration  12: 587539.874 ops/s
# Warmup Iteration  13: 586581.675 ops/s
# Warmup Iteration  14: 586366.120 ops/s
# Warmup Iteration  15: 586764.388 ops/s
# Warmup Iteration  16: 584598.841 ops/s
# Warmup Iteration  17: 586941.145 ops/s
# Warmup Iteration  18: 584014.897 ops/s
# Warmup Iteration  19: 584287.522 ops/s
# Warmup Iteration  20: 585205.313 ops/s
# Warmup Iteration  21: 586449.689 ops/s
# Warmup Iteration  22: 585564.836 ops/s
# Warmup Iteration  23: 586325.681 ops/s
# Warmup Iteration  24: 585733.112 ops/s
# Warmup Iteration  25: 586006.943 ops/s
# Warmup Iteration  26: 586206.993 ops/s
# Warmup Iteration  27: 586872.622 ops/s
# Warmup Iteration  28: 585513.903 ops/s
# Warmup Iteration  29: 585014.132 ops/s
# Warmup Iteration  30: 586002.577 ops/s
Iteration   1: 586552.637 ops/s
Iteration   2: 585394.625 ops/s
Iteration   3: 583729.133 ops/s
Iteration   4: 587255.937 ops/s
Iteration   5: 583791.896 ops/s
Iteration   6: 585346.245 ops/s
Iteration   7: 583458.792 ops/s
Iteration   8: 585729.490 ops/s
Iteration   9: 586823.587 ops/s
Iteration  10: 587396.444 ops/s
Iteration  11: 587115.841 ops/s
Iteration  12: 585005.575 ops/s
Iteration  13: 585695.746 ops/s
Iteration  14: 584959.266 ops/s
Iteration  15: 586248.140 ops/s
Iteration  16: 583888.400 ops/s
Iteration  17: 588309.742 ops/s
Iteration  18: 586710.319 ops/s
Iteration  19: 585005.735 ops/s
Iteration  20: 586151.607 ops/s
Iteration  21: 585615.043 ops/s
Iteration  22: 586629.296 ops/s
Iteration  23: 586826.755 ops/s
Iteration  24: 586519.222 ops/s
Iteration  25: 586123.574 ops/s
Iteration  26: 588232.665 ops/s
Iteration  27: 586833.696 ops/s
Iteration  28: 586275.359 ops/s
Iteration  29: 583183.575 ops/s
Iteration  30: 586555.125 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBagBy":
  585912.116 ±(99.9%) 894.017 ops/s [Average]
  (min, avg, max) = (583183.575, 585912.116, 588309.742), stdev = 1338.122
  CI (99.9%): [585018.099, 586806.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  585912.116 ± 894.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 352670.020 ops/s
# Warmup Iteration   2: 649205.854 ops/s
# Warmup Iteration   3: 762782.754 ops/s
# Warmup Iteration   4: 767577.450 ops/s
# Warmup Iteration   5: 768034.266 ops/s
# Warmup Iteration   6: 641218.133 ops/s
# Warmup Iteration   7: 769195.209 ops/s
# Warmup Iteration   8: 766194.441 ops/s
# Warmup Iteration   9: 766095.439 ops/s
# Warmup Iteration  10: 767732.801 ops/s
# Warmup Iteration  11: 768007.469 ops/s
# Warmup Iteration  12: 767671.416 ops/s
# Warmup Iteration  13: 768908.205 ops/s
# Warmup Iteration  14: 768278.453 ops/s
# Warmup Iteration  15: 769547.805 ops/s
# Warmup Iteration  16: 768322.429 ops/s
# Warmup Iteration  17: 768643.089 ops/s
# Warmup Iteration  18: 765226.309 ops/s
# Warmup Iteration  19: 768461.895 ops/s
# Warmup Iteration  20: 768058.996 ops/s
# Warmup Iteration  21: 765771.832 ops/s
# Warmup Iteration  22: 769294.233 ops/s
# Warmup Iteration  23: 768247.886 ops/s
# Warmup Iteration  24: 768744.448 ops/s
# Warmup Iteration  25: 767927.445 ops/s
# Warmup Iteration  26: 767583.807 ops/s
# Warmup Iteration  27: 766107.276 ops/s
# Warmup Iteration  28: 767045.446 ops/s
# Warmup Iteration  29: 768569.836 ops/s
# Warmup Iteration  30: 768293.374 ops/s
Iteration   1: 771208.380 ops/s
Iteration   2: 770561.419 ops/s
Iteration   3: 766175.228 ops/s
Iteration   4: 768668.461 ops/s
Iteration   5: 768578.101 ops/s
Iteration   6: 767444.131 ops/s
Iteration   7: 769890.443 ops/s
Iteration   8: 767307.900 ops/s
Iteration   9: 769161.338 ops/s
Iteration  10: 768109.330 ops/s
Iteration  11: 771528.662 ops/s
Iteration  12: 770527.606 ops/s
Iteration  13: 768443.736 ops/s
Iteration  14: 769854.033 ops/s
Iteration  15: 764824.475 ops/s
Iteration  16: 766916.074 ops/s
Iteration  17: 768788.879 ops/s
Iteration  18: 769923.608 ops/s
Iteration  19: 767364.561 ops/s
Iteration  20: 767110.465 ops/s
Iteration  21: 765871.803 ops/s
Iteration  22: 768358.313 ops/s
Iteration  23: 766084.569 ops/s
Iteration  24: 769706.181 ops/s
Iteration  25: 769548.509 ops/s
Iteration  26: 767616.060 ops/s
Iteration  27: 768554.618 ops/s
Iteration  28: 768020.523 ops/s
Iteration  29: 766126.314 ops/s
Iteration  30: 771000.327 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  768442.468 ±(99.9%) 1155.003 ops/s [Average]
  (min, avg, max) = (764824.475, 768442.468, 771528.662), stdev = 1728.754
  CI (99.9%): [767287.466, 769597.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  768442.468 ± 1155.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555316.909 ops/s
# Warmup Iteration   2: 1150228.869 ops/s
# Warmup Iteration   3: 1297845.008 ops/s
# Warmup Iteration   4: 1308970.684 ops/s
# Warmup Iteration   5: 1091152.079 ops/s
# Warmup Iteration   6: 1305500.140 ops/s
# Warmup Iteration   7: 1299707.619 ops/s
# Warmup Iteration   8: 1300534.343 ops/s
# Warmup Iteration   9: 1299107.596 ops/s
# Warmup Iteration  10: 1302733.032 ops/s
# Warmup Iteration  11: 1304122.439 ops/s
# Warmup Iteration  12: 1304648.879 ops/s
# Warmup Iteration  13: 1303781.996 ops/s
# Warmup Iteration  14: 1297888.187 ops/s
# Warmup Iteration  15: 1302553.299 ops/s
# Warmup Iteration  16: 1304086.849 ops/s
# Warmup Iteration  17: 1309774.938 ops/s
# Warmup Iteration  18: 1306899.538 ops/s
# Warmup Iteration  19: 1304303.722 ops/s
# Warmup Iteration  20: 1311860.809 ops/s
# Warmup Iteration  21: 1309269.987 ops/s
# Warmup Iteration  22: 1309127.124 ops/s
# Warmup Iteration  23: 1308414.802 ops/s
# Warmup Iteration  24: 1312305.036 ops/s
# Warmup Iteration  25: 1308591.888 ops/s
# Warmup Iteration  26: 1309049.684 ops/s
# Warmup Iteration  27: 1309158.410 ops/s
# Warmup Iteration  28: 1310677.566 ops/s
# Warmup Iteration  29: 1310883.646 ops/s
# Warmup Iteration  30: 1306802.170 ops/s
Iteration   1: 1302295.347 ops/s
Iteration   2: 1309168.030 ops/s
Iteration   3: 1311342.389 ops/s
Iteration   4: 1310814.297 ops/s
Iteration   5: 1307275.847 ops/s
Iteration   6: 1307615.188 ops/s
Iteration   7: 1310791.378 ops/s
Iteration   8: 1304241.639 ops/s
Iteration   9: 1306082.178 ops/s
Iteration  10: 1312048.039 ops/s
Iteration  11: 1310491.467 ops/s
Iteration  12: 1304958.094 ops/s
Iteration  13: 1307708.484 ops/s
Iteration  14: 1309011.221 ops/s
Iteration  15: 1310551.450 ops/s
Iteration  16: 1309680.326 ops/s
Iteration  17: 1311026.459 ops/s
Iteration  18: 1302991.172 ops/s
Iteration  19: 1305887.807 ops/s
Iteration  20: 1307152.507 ops/s
Iteration  21: 1309147.811 ops/s
Iteration  22: 1306491.074 ops/s
Iteration  23: 1311421.528 ops/s
Iteration  24: 1312793.036 ops/s
Iteration  25: 1305252.995 ops/s
Iteration  26: 1311648.063 ops/s
Iteration  27: 1309319.135 ops/s
Iteration  28: 1311026.464 ops/s
Iteration  29: 1307970.455 ops/s
Iteration  30: 1307197.248 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1308446.704 ±(99.9%) 1863.749 ops/s [Average]
  (min, avg, max) = (1302295.347, 1308446.704, 1312793.036), stdev = 2789.572
  CI (99.9%): [1306582.955, 1310310.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1308446.704 ± 1863.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1944845.599 ops/s
# Warmup Iteration   2: 4659045.181 ops/s
# Warmup Iteration   3: 3897603.160 ops/s
# Warmup Iteration   4: 4682958.896 ops/s
# Warmup Iteration   5: 4682894.585 ops/s
# Warmup Iteration   6: 4680218.299 ops/s
# Warmup Iteration   7: 4690760.244 ops/s
# Warmup Iteration   8: 4678997.134 ops/s
# Warmup Iteration   9: 4666778.771 ops/s
# Warmup Iteration  10: 4671997.691 ops/s
# Warmup Iteration  11: 4689359.644 ops/s
# Warmup Iteration  12: 4680965.497 ops/s
# Warmup Iteration  13: 4685531.719 ops/s
# Warmup Iteration  14: 4684634.098 ops/s
# Warmup Iteration  15: 4683451.452 ops/s
# Warmup Iteration  16: 4682854.403 ops/s
# Warmup Iteration  17: 4686813.219 ops/s
# Warmup Iteration  18: 4683048.579 ops/s
# Warmup Iteration  19: 4687373.044 ops/s
# Warmup Iteration  20: 4684645.975 ops/s
# Warmup Iteration  21: 4688857.428 ops/s
# Warmup Iteration  22: 4679754.585 ops/s
# Warmup Iteration  23: 4690142.338 ops/s
# Warmup Iteration  24: 4667238.957 ops/s
# Warmup Iteration  25: 4666887.559 ops/s
# Warmup Iteration  26: 4681621.684 ops/s
# Warmup Iteration  27: 4691810.937 ops/s
# Warmup Iteration  28: 4681640.768 ops/s
# Warmup Iteration  29: 4668425.540 ops/s
# Warmup Iteration  30: 4675499.462 ops/s
Iteration   1: 4685470.741 ops/s
Iteration   2: 4689423.229 ops/s
Iteration   3: 4675765.158 ops/s
Iteration   4: 4684306.508 ops/s
Iteration   5: 4694381.951 ops/s
Iteration   6: 4693887.193 ops/s
Iteration   7: 4677776.318 ops/s
Iteration   8: 4687152.757 ops/s
Iteration   9: 4682738.782 ops/s
Iteration  10: 4689336.501 ops/s
Iteration  11: 4671737.928 ops/s
Iteration  12: 4694197.604 ops/s
Iteration  13: 4696756.604 ops/s
Iteration  14: 4689577.127 ops/s
Iteration  15: 4680965.318 ops/s
Iteration  16: 4657003.544 ops/s
Iteration  17: 4683066.800 ops/s
Iteration  18: 4686188.279 ops/s
Iteration  19: 4656465.095 ops/s
Iteration  20: 4678292.012 ops/s
Iteration  21: 4674006.611 ops/s
Iteration  22: 4691704.611 ops/s
Iteration  23: 4693970.037 ops/s
Iteration  24: 4682605.896 ops/s
Iteration  25: 4689188.010 ops/s
Iteration  26: 4677444.939 ops/s
Iteration  27: 4691224.973 ops/s
Iteration  28: 4673730.241 ops/s
Iteration  29: 4685501.900 ops/s
Iteration  30: 4678470.733 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedListBy":
  4683077.913 ±(99.9%) 6637.012 ops/s [Average]
  (min, avg, max) = (4656465.095, 4683077.913, 4696756.604), stdev = 9933.967
  CI (99.9%): [4676440.902, 4689714.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  4683077.913 ± 6637.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1277413.054 ops/s
# Warmup Iteration   2: 2671381.503 ops/s
# Warmup Iteration   3: 2951333.879 ops/s
# Warmup Iteration   4: 2970799.262 ops/s
# Warmup Iteration   5: 2462616.544 ops/s
# Warmup Iteration   6: 2962806.130 ops/s
# Warmup Iteration   7: 2976834.858 ops/s
# Warmup Iteration   8: 2983926.721 ops/s
# Warmup Iteration   9: 2975034.713 ops/s
# Warmup Iteration  10: 2970979.012 ops/s
# Warmup Iteration  11: 2975242.193 ops/s
# Warmup Iteration  12: 2972993.309 ops/s
# Warmup Iteration  13: 2971444.975 ops/s
# Warmup Iteration  14: 2972686.375 ops/s
# Warmup Iteration  15: 2972322.225 ops/s
# Warmup Iteration  16: 2976358.889 ops/s
# Warmup Iteration  17: 2977106.722 ops/s
# Warmup Iteration  18: 2961786.135 ops/s
# Warmup Iteration  19: 2971630.054 ops/s
# Warmup Iteration  20: 2975549.159 ops/s
# Warmup Iteration  21: 2973013.127 ops/s
# Warmup Iteration  22: 2968291.587 ops/s
# Warmup Iteration  23: 2961898.345 ops/s
# Warmup Iteration  24: 2972186.743 ops/s
# Warmup Iteration  25: 2977096.326 ops/s
# Warmup Iteration  26: 2976329.427 ops/s
# Warmup Iteration  27: 2971656.101 ops/s
# Warmup Iteration  28: 2970440.466 ops/s
# Warmup Iteration  29: 2968381.828 ops/s
# Warmup Iteration  30: 2976117.105 ops/s
Iteration   1: 2975610.286 ops/s
Iteration   2: 2987890.769 ops/s
Iteration   3: 2973716.810 ops/s
Iteration   4: 2968673.449 ops/s
Iteration   5: 2969512.853 ops/s
Iteration   6: 2971063.409 ops/s
Iteration   7: 2977580.713 ops/s
Iteration   8: 2978203.480 ops/s
Iteration   9: 2980300.235 ops/s
Iteration  10: 2983580.740 ops/s
Iteration  11: 2977842.122 ops/s
Iteration  12: 2981690.296 ops/s
Iteration  13: 2976887.457 ops/s
Iteration  14: 2979171.953 ops/s
Iteration  15: 2973638.708 ops/s
Iteration  16: 2971112.400 ops/s
Iteration  17: 2959689.220 ops/s
Iteration  18: 2981312.005 ops/s
Iteration  19: 2987965.644 ops/s
Iteration  20: 2981038.448 ops/s
Iteration  21: 2977062.939 ops/s
Iteration  22: 2961953.475 ops/s
Iteration  23: 2986771.208 ops/s
Iteration  24: 2966686.286 ops/s
Iteration  25: 2978580.122 ops/s
Iteration  26: 2972600.774 ops/s
Iteration  27: 2971197.181 ops/s
Iteration  28: 2972039.015 ops/s
Iteration  29: 2971398.532 ops/s
Iteration  30: 2980050.564 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  2975827.370 ±(99.9%) 4615.437 ops/s [Average]
  (min, avg, max) = (2959689.220, 2975827.370, 2987965.644), stdev = 6908.170
  CI (99.9%): [2971211.932, 2980442.807] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  2975827.370 ± 4615.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3624313.481 ops/s
# Warmup Iteration   2: 8894483.590 ops/s
# Warmup Iteration   3: 8722899.767 ops/s
# Warmup Iteration   4: 7699927.110 ops/s
# Warmup Iteration   5: 8975214.714 ops/s
# Warmup Iteration   6: 8959721.694 ops/s
# Warmup Iteration   7: 8906608.812 ops/s
# Warmup Iteration   8: 8998622.989 ops/s
# Warmup Iteration   9: 8954032.908 ops/s
# Warmup Iteration  10: 8967910.910 ops/s
# Warmup Iteration  11: 8950172.933 ops/s
# Warmup Iteration  12: 8971077.748 ops/s
# Warmup Iteration  13: 8955284.382 ops/s
# Warmup Iteration  14: 8961403.534 ops/s
# Warmup Iteration  15: 8996828.169 ops/s
# Warmup Iteration  16: 8963609.364 ops/s
# Warmup Iteration  17: 8962232.055 ops/s
# Warmup Iteration  18: 8922831.532 ops/s
# Warmup Iteration  19: 8939964.397 ops/s
# Warmup Iteration  20: 8955099.186 ops/s
# Warmup Iteration  21: 8937607.650 ops/s
# Warmup Iteration  22: 8935244.494 ops/s
# Warmup Iteration  23: 8950121.973 ops/s
# Warmup Iteration  24: 8932633.079 ops/s
# Warmup Iteration  25: 8943484.754 ops/s
# Warmup Iteration  26: 8949996.703 ops/s
# Warmup Iteration  27: 8918068.335 ops/s
# Warmup Iteration  28: 8944603.830 ops/s
# Warmup Iteration  29: 8974731.855 ops/s
# Warmup Iteration  30: 8945158.159 ops/s
Iteration   1: 8966776.124 ops/s
Iteration   2: 8969694.974 ops/s
Iteration   3: 8929124.129 ops/s
Iteration   4: 8955010.510 ops/s
Iteration   5: 8977652.440 ops/s
Iteration   6: 8933639.214 ops/s
Iteration   7: 8925546.252 ops/s
Iteration   8: 8943834.351 ops/s
Iteration   9: 8960379.292 ops/s
Iteration  10: 8919639.616 ops/s
Iteration  11: 8939592.146 ops/s
Iteration  12: 8954558.905 ops/s
Iteration  13: 8950286.666 ops/s
Iteration  14: 8929614.398 ops/s
Iteration  15: 8932064.583 ops/s
Iteration  16: 8969231.886 ops/s
Iteration  17: 8919740.997 ops/s
Iteration  18: 8965363.268 ops/s
Iteration  19: 8927719.677 ops/s
Iteration  20: 8890788.886 ops/s
Iteration  21: 8949330.946 ops/s
Iteration  22: 8978236.261 ops/s
Iteration  23: 8973005.735 ops/s
Iteration  24: 8969643.106 ops/s
Iteration  25: 8961289.050 ops/s
Iteration  26: 8971510.514 ops/s
Iteration  27: 8956633.715 ops/s
Iteration  28: 8983333.354 ops/s
Iteration  29: 8951274.684 ops/s
Iteration  30: 8993430.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  8951598.208 ±(99.9%) 15439.889 ops/s [Average]
  (min, avg, max) = (8890788.886, 8951598.208, 8993430.553), stdev = 23109.700
  CI (99.9%): [8936158.319, 8967038.096] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  8951598.208 ± 15439.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650773.439 ops/s
# Warmup Iteration   2: 1760037.517 ops/s
# Warmup Iteration   3: 1767975.711 ops/s
# Warmup Iteration   4: 1477069.715 ops/s
# Warmup Iteration   5: 1766474.753 ops/s
# Warmup Iteration   6: 1763306.715 ops/s
# Warmup Iteration   7: 1770066.663 ops/s
# Warmup Iteration   8: 1766247.363 ops/s
# Warmup Iteration   9: 1772505.244 ops/s
# Warmup Iteration  10: 1768094.109 ops/s
# Warmup Iteration  11: 1766821.685 ops/s
# Warmup Iteration  12: 1761930.094 ops/s
# Warmup Iteration  13: 1766110.981 ops/s
# Warmup Iteration  14: 1769769.245 ops/s
# Warmup Iteration  15: 1766314.911 ops/s
# Warmup Iteration  16: 1766929.715 ops/s
# Warmup Iteration  17: 1768404.625 ops/s
# Warmup Iteration  18: 1769090.522 ops/s
# Warmup Iteration  19: 1765593.115 ops/s
# Warmup Iteration  20: 1769826.691 ops/s
# Warmup Iteration  21: 1771725.603 ops/s
# Warmup Iteration  22: 1767907.908 ops/s
# Warmup Iteration  23: 1765285.299 ops/s
# Warmup Iteration  24: 1768534.229 ops/s
# Warmup Iteration  25: 1770924.437 ops/s
# Warmup Iteration  26: 1771275.241 ops/s
# Warmup Iteration  27: 1763229.726 ops/s
# Warmup Iteration  28: 1766822.549 ops/s
# Warmup Iteration  29: 1769258.841 ops/s
# Warmup Iteration  30: 1770630.108 ops/s
Iteration   1: 1771033.217 ops/s
Iteration   2: 1773910.704 ops/s
Iteration   3: 1771193.226 ops/s
Iteration   4: 1768982.685 ops/s
Iteration   5: 1769514.190 ops/s
Iteration   6: 1772767.856 ops/s
Iteration   7: 1758266.569 ops/s
Iteration   8: 1770935.792 ops/s
Iteration   9: 1769988.559 ops/s
Iteration  10: 1769853.641 ops/s
Iteration  11: 1772976.776 ops/s
Iteration  12: 1768580.836 ops/s
Iteration  13: 1769363.844 ops/s
Iteration  14: 1773367.393 ops/s
Iteration  15: 1770993.050 ops/s
Iteration  16: 1764779.038 ops/s
Iteration  17: 1768071.728 ops/s
Iteration  18: 1771485.851 ops/s
Iteration  19: 1771011.859 ops/s
Iteration  20: 1770426.768 ops/s
Iteration  21: 1771520.024 ops/s
Iteration  22: 1771729.373 ops/s
Iteration  23: 1769926.400 ops/s
Iteration  24: 1771665.487 ops/s
Iteration  25: 1762363.828 ops/s
Iteration  26: 1771172.992 ops/s
Iteration  27: 1771871.587 ops/s
Iteration  28: 1767269.666 ops/s
Iteration  29: 1775270.185 ops/s
Iteration  30: 1766781.061 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1769902.473 ±(99.9%) 2287.181 ops/s [Average]
  (min, avg, max) = (1758266.569, 1769902.473, 1775270.185), stdev = 3423.345
  CI (99.9%): [1767615.292, 1772189.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1769902.473 ± 2287.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847123.119 ops/s
# Warmup Iteration   2: 1990254.306 ops/s
# Warmup Iteration   3: 2083119.147 ops/s
# Warmup Iteration   4: 1830635.663 ops/s
# Warmup Iteration   5: 1997064.361 ops/s
# Warmup Iteration   6: 2086067.980 ops/s
# Warmup Iteration   7: 2087167.578 ops/s
# Warmup Iteration   8: 2085844.977 ops/s
# Warmup Iteration   9: 2086465.276 ops/s
# Warmup Iteration  10: 2090269.662 ops/s
# Warmup Iteration  11: 2085278.843 ops/s
# Warmup Iteration  12: 2080785.397 ops/s
# Warmup Iteration  13: 2084234.956 ops/s
# Warmup Iteration  14: 2084758.718 ops/s
# Warmup Iteration  15: 2087122.535 ops/s
# Warmup Iteration  16: 2089444.105 ops/s
# Warmup Iteration  17: 2078782.530 ops/s
# Warmup Iteration  18: 2090499.734 ops/s
# Warmup Iteration  19: 2084960.281 ops/s
# Warmup Iteration  20: 2083415.160 ops/s
# Warmup Iteration  21: 2084967.401 ops/s
# Warmup Iteration  22: 2088857.333 ops/s
# Warmup Iteration  23: 2085397.092 ops/s
# Warmup Iteration  24: 2084878.407 ops/s
# Warmup Iteration  25: 2083305.620 ops/s
# Warmup Iteration  26: 2082377.169 ops/s
# Warmup Iteration  27: 2089742.099 ops/s
# Warmup Iteration  28: 2089921.536 ops/s
# Warmup Iteration  29: 2088298.123 ops/s
# Warmup Iteration  30: 2086114.159 ops/s
Iteration   1: 2085063.001 ops/s
Iteration   2: 2083913.933 ops/s
Iteration   3: 2090173.252 ops/s
Iteration   4: 2086640.995 ops/s
Iteration   5: 2080899.753 ops/s
Iteration   6: 2085257.967 ops/s
Iteration   7: 2087790.704 ops/s
Iteration   8: 2086746.524 ops/s
Iteration   9: 2079286.462 ops/s
Iteration  10: 2078541.515 ops/s
Iteration  11: 2083920.430 ops/s
Iteration  12: 2094281.490 ops/s
Iteration  13: 2085959.130 ops/s
Iteration  14: 2075736.353 ops/s
Iteration  15: 2083971.550 ops/s
Iteration  16: 2089095.232 ops/s
Iteration  17: 2084303.338 ops/s
Iteration  18: 2094604.520 ops/s
Iteration  19: 2081901.246 ops/s
Iteration  20: 2090876.091 ops/s
Iteration  21: 2091537.701 ops/s
Iteration  22: 2083286.864 ops/s
Iteration  23: 2090584.986 ops/s
Iteration  24: 2084733.008 ops/s
Iteration  25: 2088205.760 ops/s
Iteration  26: 2091276.467 ops/s
Iteration  27: 2091233.899 ops/s
Iteration  28: 2082926.523 ops/s
Iteration  29: 2081663.753 ops/s
Iteration  30: 2086736.149 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2086038.286 ±(99.9%) 3071.780 ops/s [Average]
  (min, avg, max) = (2075736.353, 2086038.286, 2094604.520), stdev = 4597.696
  CI (99.9%): [2082966.506, 2089110.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2086038.286 ± 3071.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5346285.306 ops/s
# Warmup Iteration   2: 11693372.444 ops/s
# Warmup Iteration   3: 10094071.001 ops/s
# Warmup Iteration   4: 11980745.470 ops/s
# Warmup Iteration   5: 11899709.246 ops/s
# Warmup Iteration   6: 11927207.183 ops/s
# Warmup Iteration   7: 11974531.739 ops/s
# Warmup Iteration   8: 12007359.339 ops/s
# Warmup Iteration   9: 11971024.501 ops/s
# Warmup Iteration  10: 11997163.187 ops/s
# Warmup Iteration  11: 11956577.158 ops/s
# Warmup Iteration  12: 11983653.755 ops/s
# Warmup Iteration  13: 11982357.202 ops/s
# Warmup Iteration  14: 11962229.523 ops/s
# Warmup Iteration  15: 11977850.134 ops/s
# Warmup Iteration  16: 11959722.582 ops/s
# Warmup Iteration  17: 11931584.898 ops/s
# Warmup Iteration  18: 11965218.281 ops/s
# Warmup Iteration  19: 12001610.460 ops/s
# Warmup Iteration  20: 11982600.903 ops/s
# Warmup Iteration  21: 11957862.215 ops/s
# Warmup Iteration  22: 12003908.257 ops/s
# Warmup Iteration  23: 12006288.816 ops/s
# Warmup Iteration  24: 11962970.561 ops/s
# Warmup Iteration  25: 11946997.163 ops/s
# Warmup Iteration  26: 11992886.296 ops/s
# Warmup Iteration  27: 11976080.578 ops/s
# Warmup Iteration  28: 11971377.918 ops/s
# Warmup Iteration  29: 11948578.267 ops/s
# Warmup Iteration  30: 11962361.275 ops/s
Iteration   1: 11972224.182 ops/s
Iteration   2: 12004658.648 ops/s
Iteration   3: 11959337.314 ops/s
Iteration   4: 11979224.327 ops/s
Iteration   5: 11999643.586 ops/s
Iteration   6: 11985457.207 ops/s
Iteration   7: 11959807.960 ops/s
Iteration   8: 11952131.044 ops/s
Iteration   9: 11941238.622 ops/s
Iteration  10: 11981453.740 ops/s
Iteration  11: 11923461.682 ops/s
Iteration  12: 12001100.308 ops/s
Iteration  13: 12051879.173 ops/s
Iteration  14: 11968837.342 ops/s
Iteration  15: 12004769.822 ops/s
Iteration  16: 12017545.703 ops/s
Iteration  17: 12036055.400 ops/s
Iteration  18: 11997337.772 ops/s
Iteration  19: 11998145.255 ops/s
Iteration  20: 11971314.423 ops/s
Iteration  21: 11937344.267 ops/s
Iteration  22: 11907987.034 ops/s
Iteration  23: 11996472.087 ops/s
Iteration  24: 12022947.131 ops/s
Iteration  25: 12003119.419 ops/s
Iteration  26: 11974790.545 ops/s
Iteration  27: 11962677.861 ops/s
Iteration  28: 11981405.466 ops/s
Iteration  29: 11833590.960 ops/s
Iteration  30: 11995291.744 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toList":
  11977375.001 ±(99.9%) 27866.983 ops/s [Average]
  (min, avg, max) = (11833590.960, 11977375.001, 12051879.173), stdev = 41709.992
  CI (99.9%): [11949508.017, 12005241.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toList  thrpt   30  11977375.001 ± 27866.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1649026.266 ops/s
# Warmup Iteration   2: 3890157.073 ops/s
# Warmup Iteration   3: 3227398.716 ops/s
# Warmup Iteration   4: 3913260.698 ops/s
# Warmup Iteration   5: 3926702.835 ops/s
# Warmup Iteration   6: 3937583.904 ops/s
# Warmup Iteration   7: 3929433.113 ops/s
# Warmup Iteration   8: 3953895.305 ops/s
# Warmup Iteration   9: 3906384.556 ops/s
# Warmup Iteration  10: 3928815.000 ops/s
# Warmup Iteration  11: 3930040.015 ops/s
# Warmup Iteration  12: 3915850.908 ops/s
# Warmup Iteration  13: 3908010.479 ops/s
# Warmup Iteration  14: 3899425.123 ops/s
# Warmup Iteration  15: 3930182.329 ops/s
# Warmup Iteration  16: 3917290.411 ops/s
# Warmup Iteration  17: 3923746.506 ops/s
# Warmup Iteration  18: 3916654.786 ops/s
# Warmup Iteration  19: 3927496.047 ops/s
# Warmup Iteration  20: 3951414.912 ops/s
# Warmup Iteration  21: 3964215.593 ops/s
# Warmup Iteration  22: 3919772.712 ops/s
# Warmup Iteration  23: 3912738.904 ops/s
# Warmup Iteration  24: 3918302.325 ops/s
# Warmup Iteration  25: 3945750.036 ops/s
# Warmup Iteration  26: 3903326.538 ops/s
# Warmup Iteration  27: 3949219.294 ops/s
# Warmup Iteration  28: 3943508.895 ops/s
# Warmup Iteration  29: 3902594.223 ops/s
# Warmup Iteration  30: 3952302.227 ops/s
Iteration   1: 3902156.152 ops/s
Iteration   2: 3944138.939 ops/s
Iteration   3: 3957653.551 ops/s
Iteration   4: 3945388.270 ops/s
Iteration   5: 3912708.745 ops/s
Iteration   6: 3908998.152 ops/s
Iteration   7: 3895446.643 ops/s
Iteration   8: 3942989.018 ops/s
Iteration   9: 3880056.661 ops/s
Iteration  10: 3943785.770 ops/s
Iteration  11: 3942659.123 ops/s
Iteration  12: 3922080.332 ops/s
Iteration  13: 3926045.784 ops/s
Iteration  14: 3910039.502 ops/s
Iteration  15: 3931813.735 ops/s
Iteration  16: 3933788.094 ops/s
Iteration  17: 3948229.239 ops/s
Iteration  18: 3944354.460 ops/s
Iteration  19: 3900254.341 ops/s
Iteration  20: 3925396.333 ops/s
Iteration  21: 3930347.525 ops/s
Iteration  22: 3916535.314 ops/s
Iteration  23: 3881231.087 ops/s
Iteration  24: 3937766.394 ops/s
Iteration  25: 3927964.901 ops/s
Iteration  26: 3931065.353 ops/s
Iteration  27: 3950592.967 ops/s
Iteration  28: 3916865.403 ops/s
Iteration  29: 3931932.618 ops/s
Iteration  30: 3924368.947 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMap":
  3925555.112 ±(99.9%) 13320.476 ops/s [Average]
  (min, avg, max) = (3880056.661, 3925555.112, 3957653.551), stdev = 19937.463
  CI (99.9%): [3912234.636, 3938875.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toMap  thrpt   30  3925555.112 ± 13320.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881024.684 ops/s
# Warmup Iteration   2: 2132186.287 ops/s
# Warmup Iteration   3: 2180227.916 ops/s
# Warmup Iteration   4: 1790449.118 ops/s
# Warmup Iteration   5: 2180547.530 ops/s
# Warmup Iteration   6: 2176979.794 ops/s
# Warmup Iteration   7: 2179964.190 ops/s
# Warmup Iteration   8: 2180132.886 ops/s
# Warmup Iteration   9: 2181097.341 ops/s
# Warmup Iteration  10: 2191324.453 ops/s
# Warmup Iteration  11: 2192341.197 ops/s
# Warmup Iteration  12: 2177580.853 ops/s
# Warmup Iteration  13: 2180960.830 ops/s
# Warmup Iteration  14: 2180585.459 ops/s
# Warmup Iteration  15: 2169676.819 ops/s
# Warmup Iteration  16: 2184417.948 ops/s
# Warmup Iteration  17: 2177181.599 ops/s
# Warmup Iteration  18: 2180616.208 ops/s
# Warmup Iteration  19: 2182102.127 ops/s
# Warmup Iteration  20: 2177269.154 ops/s
# Warmup Iteration  21: 2182839.507 ops/s
# Warmup Iteration  22: 2183169.010 ops/s
# Warmup Iteration  23: 2167244.621 ops/s
# Warmup Iteration  24: 2176227.586 ops/s
# Warmup Iteration  25: 2178282.520 ops/s
# Warmup Iteration  26: 2180077.268 ops/s
# Warmup Iteration  27: 2183607.236 ops/s
# Warmup Iteration  28: 2166451.106 ops/s
# Warmup Iteration  29: 2169701.159 ops/s
# Warmup Iteration  30: 2175936.995 ops/s
Iteration   1: 2149816.898 ops/s
Iteration   2: 2155027.682 ops/s
Iteration   3: 2191250.123 ops/s
Iteration   4: 2179004.800 ops/s
Iteration   5: 2162854.060 ops/s
Iteration   6: 2175371.172 ops/s
Iteration   7: 2169718.844 ops/s
Iteration   8: 2166934.625 ops/s
Iteration   9: 2167426.719 ops/s
Iteration  10: 2167521.652 ops/s
Iteration  11: 2176796.099 ops/s
Iteration  12: 2184273.963 ops/s
Iteration  13: 2175834.001 ops/s
Iteration  14: 2176773.406 ops/s
Iteration  15: 2169547.412 ops/s
Iteration  16: 2180579.201 ops/s
Iteration  17: 2168311.049 ops/s
Iteration  18: 2183649.657 ops/s
Iteration  19: 2174853.000 ops/s
Iteration  20: 2167849.257 ops/s
Iteration  21: 2199944.671 ops/s
Iteration  22: 2184270.643 ops/s
Iteration  23: 2179684.188 ops/s
Iteration  24: 2186448.408 ops/s
Iteration  25: 2158592.053 ops/s
Iteration  26: 2179693.423 ops/s
Iteration  27: 2177215.120 ops/s
Iteration  28: 2181371.084 ops/s
Iteration  29: 2177332.908 ops/s
Iteration  30: 2169519.841 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toMapTarget":
  2174582.199 ±(99.9%) 7039.977 ops/s [Average]
  (min, avg, max) = (2149816.898, 2174582.199, 2199944.671), stdev = 10537.106
  CI (99.9%): [2167542.222, 2181622.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toMapTarget  thrpt   30  2174582.199 ± 7039.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2057024.059 ops/s
# Warmup Iteration   2: 4744479.513 ops/s
# Warmup Iteration   3: 4814011.342 ops/s
# Warmup Iteration   4: 4011908.503 ops/s
# Warmup Iteration   5: 4784266.578 ops/s
# Warmup Iteration   6: 4778834.848 ops/s
# Warmup Iteration   7: 4818823.112 ops/s
# Warmup Iteration   8: 4815591.921 ops/s
# Warmup Iteration   9: 4809280.408 ops/s
# Warmup Iteration  10: 4825262.953 ops/s
# Warmup Iteration  11: 4811678.218 ops/s
# Warmup Iteration  12: 4801910.413 ops/s
# Warmup Iteration  13: 4814616.628 ops/s
# Warmup Iteration  14: 4807597.448 ops/s
# Warmup Iteration  15: 4829434.664 ops/s
# Warmup Iteration  16: 4819498.908 ops/s
# Warmup Iteration  17: 4812402.312 ops/s
# Warmup Iteration  18: 4807455.438 ops/s
# Warmup Iteration  19: 4800486.973 ops/s
# Warmup Iteration  20: 4810750.952 ops/s
# Warmup Iteration  21: 4812461.581 ops/s
# Warmup Iteration  22: 4813622.536 ops/s
# Warmup Iteration  23: 4821851.112 ops/s
# Warmup Iteration  24: 4809606.072 ops/s
# Warmup Iteration  25: 4817077.377 ops/s
# Warmup Iteration  26: 4812408.905 ops/s
# Warmup Iteration  27: 4800093.252 ops/s
# Warmup Iteration  28: 4815037.402 ops/s
# Warmup Iteration  29: 4801480.026 ops/s
# Warmup Iteration  30: 4809710.524 ops/s
Iteration   1: 4795609.665 ops/s
Iteration   2: 4789602.277 ops/s
Iteration   3: 4773416.224 ops/s
Iteration   4: 4806902.406 ops/s
Iteration   5: 4812293.365 ops/s
Iteration   6: 4814568.116 ops/s
Iteration   7: 4817105.079 ops/s
Iteration   8: 4800736.271 ops/s
Iteration   9: 4811124.732 ops/s
Iteration  10: 4812460.813 ops/s
Iteration  11: 4819854.848 ops/s
Iteration  12: 4814576.064 ops/s
Iteration  13: 4800176.594 ops/s
Iteration  14: 4800878.955 ops/s
Iteration  15: 4821146.871 ops/s
Iteration  16: 4818338.311 ops/s
Iteration  17: 4813831.381 ops/s
Iteration  18: 4810016.838 ops/s
Iteration  19: 4817132.440 ops/s
Iteration  20: 4817017.337 ops/s
Iteration  21: 4822304.134 ops/s
Iteration  22: 4815840.847 ops/s
Iteration  23: 4801693.072 ops/s
Iteration  24: 4820176.614 ops/s
Iteration  25: 4812286.692 ops/s
Iteration  26: 4824843.740 ops/s
Iteration  27: 4822299.694 ops/s
Iteration  28: 4811896.759 ops/s
Iteration  29: 4818158.662 ops/s
Iteration  30: 4816471.377 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toReversed":
  4811092.006 ±(99.9%) 7400.770 ops/s [Average]
  (min, avg, max) = (4773416.224, 4811092.006, 4824843.740), stdev = 11077.126
  CI (99.9%): [4803691.235, 4818492.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toReversed  thrpt   30  4811092.006 ± 7400.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3116613.234 ops/s
# Warmup Iteration   2: 7751335.806 ops/s
# Warmup Iteration   3: 7816881.377 ops/s
# Warmup Iteration   4: 6498908.915 ops/s
# Warmup Iteration   5: 7819156.005 ops/s
# Warmup Iteration   6: 7808649.462 ops/s
# Warmup Iteration   7: 7821095.799 ops/s
# Warmup Iteration   8: 7807262.917 ops/s
# Warmup Iteration   9: 7818844.173 ops/s
# Warmup Iteration  10: 7807567.674 ops/s
# Warmup Iteration  11: 7831015.173 ops/s
# Warmup Iteration  12: 7802296.191 ops/s
# Warmup Iteration  13: 7807142.039 ops/s
# Warmup Iteration  14: 7812192.042 ops/s
# Warmup Iteration  15: 7821128.039 ops/s
# Warmup Iteration  16: 7832642.517 ops/s
# Warmup Iteration  17: 7823311.154 ops/s
# Warmup Iteration  18: 7835426.802 ops/s
# Warmup Iteration  19: 7823452.793 ops/s
# Warmup Iteration  20: 7822963.831 ops/s
# Warmup Iteration  21: 7839914.358 ops/s
# Warmup Iteration  22: 7837652.282 ops/s
# Warmup Iteration  23: 7854488.931 ops/s
# Warmup Iteration  24: 7796250.947 ops/s
# Warmup Iteration  25: 7835709.117 ops/s
# Warmup Iteration  26: 7834686.884 ops/s
# Warmup Iteration  27: 7825742.979 ops/s
# Warmup Iteration  28: 7822640.182 ops/s
# Warmup Iteration  29: 7818352.239 ops/s
# Warmup Iteration  30: 7815131.024 ops/s
Iteration   1: 7827120.101 ops/s
Iteration   2: 7838007.116 ops/s
Iteration   3: 7821706.947 ops/s
Iteration   4: 7823380.984 ops/s
Iteration   5: 7826874.254 ops/s
Iteration   6: 7820061.374 ops/s
Iteration   7: 7826832.618 ops/s
Iteration   8: 7806409.213 ops/s
Iteration   9: 7830712.679 ops/s
Iteration  10: 7841228.301 ops/s
Iteration  11: 7822621.996 ops/s
Iteration  12: 7830321.748 ops/s
Iteration  13: 7871200.288 ops/s
Iteration  14: 7782715.250 ops/s
Iteration  15: 7848370.548 ops/s
Iteration  16: 7813839.011 ops/s
Iteration  17: 7841189.507 ops/s
Iteration  18: 7796303.791 ops/s
Iteration  19: 7806993.574 ops/s
Iteration  20: 7820997.419 ops/s
Iteration  21: 7822744.242 ops/s
Iteration  22: 7791620.749 ops/s
Iteration  23: 7820843.339 ops/s
Iteration  24: 7857567.671 ops/s
Iteration  25: 7843847.910 ops/s
Iteration  26: 7822430.185 ops/s
Iteration  27: 7814206.124 ops/s
Iteration  28: 7839781.070 ops/s
Iteration  29: 7834371.830 ops/s
Iteration  30: 7810543.059 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSet":
  7825161.430 ±(99.9%) 12470.346 ops/s [Average]
  (min, avg, max) = (7782715.250, 7825161.430, 7871200.288), stdev = 18665.029
  CI (99.9%): [7812691.083, 7837631.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toSet  thrpt   30  7825161.430 ± 12470.346  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255414.013 ops/s
# Warmup Iteration   2: 433234.148 ops/s
# Warmup Iteration   3: 548630.279 ops/s
# Warmup Iteration   4: 551274.995 ops/s
# Warmup Iteration   5: 551752.135 ops/s
# Warmup Iteration   6: 523644.035 ops/s
# Warmup Iteration   7: 472718.842 ops/s
# Warmup Iteration   8: 551855.647 ops/s
# Warmup Iteration   9: 552759.053 ops/s
# Warmup Iteration  10: 551860.163 ops/s
# Warmup Iteration  11: 552970.106 ops/s
# Warmup Iteration  12: 552938.362 ops/s
# Warmup Iteration  13: 551498.292 ops/s
# Warmup Iteration  14: 551154.507 ops/s
# Warmup Iteration  15: 552234.286 ops/s
# Warmup Iteration  16: 553848.036 ops/s
# Warmup Iteration  17: 551522.704 ops/s
# Warmup Iteration  18: 552033.055 ops/s
# Warmup Iteration  19: 552098.107 ops/s
# Warmup Iteration  20: 552013.010 ops/s
# Warmup Iteration  21: 553408.243 ops/s
# Warmup Iteration  22: 550740.069 ops/s
# Warmup Iteration  23: 552902.616 ops/s
# Warmup Iteration  24: 550620.893 ops/s
# Warmup Iteration  25: 551986.449 ops/s
# Warmup Iteration  26: 551376.954 ops/s
# Warmup Iteration  27: 553277.427 ops/s
# Warmup Iteration  28: 552983.302 ops/s
# Warmup Iteration  29: 553549.370 ops/s
# Warmup Iteration  30: 552676.924 ops/s
Iteration   1: 551689.443 ops/s
Iteration   2: 552201.881 ops/s
Iteration   3: 552034.666 ops/s
Iteration   4: 550584.104 ops/s
Iteration   5: 551898.707 ops/s
Iteration   6: 551738.619 ops/s
Iteration   7: 551731.464 ops/s
Iteration   8: 551288.138 ops/s
Iteration   9: 553332.174 ops/s
Iteration  10: 553301.425 ops/s
Iteration  11: 551121.233 ops/s
Iteration  12: 552349.789 ops/s
Iteration  13: 552278.432 ops/s
Iteration  14: 551947.556 ops/s
Iteration  15: 552302.845 ops/s
Iteration  16: 551097.233 ops/s
Iteration  17: 550890.194 ops/s
Iteration  18: 551983.428 ops/s
Iteration  19: 550444.707 ops/s
Iteration  20: 549702.196 ops/s
Iteration  21: 553540.251 ops/s
Iteration  22: 551558.494 ops/s
Iteration  23: 552075.024 ops/s
Iteration  24: 550517.371 ops/s
Iteration  25: 553160.583 ops/s
Iteration  26: 552801.773 ops/s
Iteration  27: 552999.616 ops/s
Iteration  28: 550217.531 ops/s
Iteration  29: 551715.666 ops/s
Iteration  30: 553520.231 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBagBy":
  551867.492 ±(99.9%) 678.218 ops/s [Average]
  (min, avg, max) = (549702.196, 551867.492, 553540.251), stdev = 1015.125
  CI (99.9%): [551189.274, 552545.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  551867.492 ± 678.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527304.097 ops/s
# Warmup Iteration   2: 1105975.257 ops/s
# Warmup Iteration   3: 1226691.823 ops/s
# Warmup Iteration   4: 1234494.883 ops/s
# Warmup Iteration   5: 1028007.404 ops/s
# Warmup Iteration   6: 1238231.564 ops/s
# Warmup Iteration   7: 1236584.475 ops/s
# Warmup Iteration   8: 1240160.401 ops/s
# Warmup Iteration   9: 1239407.109 ops/s
# Warmup Iteration  10: 1236025.572 ops/s
# Warmup Iteration  11: 1236117.142 ops/s
# Warmup Iteration  12: 1236740.095 ops/s
# Warmup Iteration  13: 1231679.403 ops/s
# Warmup Iteration  14: 1240133.906 ops/s
# Warmup Iteration  15: 1238943.007 ops/s
# Warmup Iteration  16: 1240377.210 ops/s
# Warmup Iteration  17: 1233496.044 ops/s
# Warmup Iteration  18: 1233521.091 ops/s
# Warmup Iteration  19: 1234458.133 ops/s
# Warmup Iteration  20: 1227254.358 ops/s
# Warmup Iteration  21: 1232441.947 ops/s
# Warmup Iteration  22: 1231030.878 ops/s
# Warmup Iteration  23: 1233949.659 ops/s
# Warmup Iteration  24: 1234994.732 ops/s
# Warmup Iteration  25: 1230743.864 ops/s
# Warmup Iteration  26: 1233024.655 ops/s
# Warmup Iteration  27: 1232875.431 ops/s
# Warmup Iteration  28: 1231787.554 ops/s
# Warmup Iteration  29: 1236567.310 ops/s
# Warmup Iteration  30: 1234488.007 ops/s
Iteration   1: 1235334.686 ops/s
Iteration   2: 1230810.856 ops/s
Iteration   3: 1231922.553 ops/s
Iteration   4: 1237549.557 ops/s
Iteration   5: 1236900.065 ops/s
Iteration   6: 1235813.869 ops/s
Iteration   7: 1231479.232 ops/s
Iteration   8: 1233531.036 ops/s
Iteration   9: 1229609.212 ops/s
Iteration  10: 1238753.170 ops/s
Iteration  11: 1232147.502 ops/s
Iteration  12: 1235198.166 ops/s
Iteration  13: 1236898.966 ops/s
Iteration  14: 1227919.146 ops/s
Iteration  15: 1234333.367 ops/s
Iteration  16: 1235640.227 ops/s
Iteration  17: 1235999.722 ops/s
Iteration  18: 1232109.638 ops/s
Iteration  19: 1237761.301 ops/s
Iteration  20: 1236334.128 ops/s
Iteration  21: 1231499.738 ops/s
Iteration  22: 1231958.986 ops/s
Iteration  23: 1236517.715 ops/s
Iteration  24: 1233124.978 ops/s
Iteration  25: 1231370.664 ops/s
Iteration  26: 1230882.146 ops/s
Iteration  27: 1227523.935 ops/s
Iteration  28: 1238059.546 ops/s
Iteration  29: 1237627.640 ops/s
Iteration  30: 1234035.808 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1233954.918 ±(99.9%) 2057.043 ops/s [Average]
  (min, avg, max) = (1227523.935, 1233954.918, 1238753.170), stdev = 3078.885
  CI (99.9%): [1231897.876, 1236011.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1233954.918 ± 2057.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619790.064 ops/s
# Warmup Iteration   2: 1284218.058 ops/s
# Warmup Iteration   3: 1440617.133 ops/s
# Warmup Iteration   4: 1446576.074 ops/s
# Warmup Iteration   5: 1204888.670 ops/s
# Warmup Iteration   6: 1448694.490 ops/s
# Warmup Iteration   7: 1447508.882 ops/s
# Warmup Iteration   8: 1445034.620 ops/s
# Warmup Iteration   9: 1448672.916 ops/s
# Warmup Iteration  10: 1443577.387 ops/s
# Warmup Iteration  11: 1441821.803 ops/s
# Warmup Iteration  12: 1446845.871 ops/s
# Warmup Iteration  13: 1448043.018 ops/s
# Warmup Iteration  14: 1446195.217 ops/s
# Warmup Iteration  15: 1449813.284 ops/s
# Warmup Iteration  16: 1448007.515 ops/s
# Warmup Iteration  17: 1442385.942 ops/s
# Warmup Iteration  18: 1443999.322 ops/s
# Warmup Iteration  19: 1447577.212 ops/s
# Warmup Iteration  20: 1445630.279 ops/s
# Warmup Iteration  21: 1446924.312 ops/s
# Warmup Iteration  22: 1444662.113 ops/s
# Warmup Iteration  23: 1445513.581 ops/s
# Warmup Iteration  24: 1447435.263 ops/s
# Warmup Iteration  25: 1442703.515 ops/s
# Warmup Iteration  26: 1444484.268 ops/s
# Warmup Iteration  27: 1444702.933 ops/s
# Warmup Iteration  28: 1444529.124 ops/s
# Warmup Iteration  29: 1446061.131 ops/s
# Warmup Iteration  30: 1446832.688 ops/s
Iteration   1: 1446460.489 ops/s
Iteration   2: 1447224.422 ops/s
Iteration   3: 1445638.851 ops/s
Iteration   4: 1448491.877 ops/s
Iteration   5: 1447504.264 ops/s
Iteration   6: 1443346.272 ops/s
Iteration   7: 1443010.145 ops/s
Iteration   8: 1450114.174 ops/s
Iteration   9: 1451035.388 ops/s
Iteration  10: 1444280.145 ops/s
Iteration  11: 1446723.448 ops/s
Iteration  12: 1446798.902 ops/s
Iteration  13: 1442927.814 ops/s
Iteration  14: 1446224.135 ops/s
Iteration  15: 1448905.613 ops/s
Iteration  16: 1442547.088 ops/s
Iteration  17: 1448155.027 ops/s
Iteration  18: 1446226.575 ops/s
Iteration  19: 1446102.932 ops/s
Iteration  20: 1445212.766 ops/s
Iteration  21: 1448651.896 ops/s
Iteration  22: 1445164.211 ops/s
Iteration  23: 1447434.591 ops/s
Iteration  24: 1450808.510 ops/s
Iteration  25: 1444953.787 ops/s
Iteration  26: 1445510.006 ops/s
Iteration  27: 1447310.946 ops/s
Iteration  28: 1441110.118 ops/s
Iteration  29: 1440185.037 ops/s
Iteration  30: 1450421.784 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1446282.707 ±(99.9%) 1834.825 ops/s [Average]
  (min, avg, max) = (1440185.037, 1446282.707, 1451035.388), stdev = 2746.279
  CI (99.9%): [1444447.883, 1448117.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1446282.707 ± 1834.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 467980.258 ops/s
# Warmup Iteration   2: 504592.240 ops/s
# Warmup Iteration   3: 625721.537 ops/s
# Warmup Iteration   4: 663172.179 ops/s
# Warmup Iteration   5: 663506.934 ops/s
# Warmup Iteration   6: 660811.820 ops/s
# Warmup Iteration   7: 663914.883 ops/s
# Warmup Iteration   8: 665028.594 ops/s
# Warmup Iteration   9: 663988.126 ops/s
# Warmup Iteration  10: 664015.540 ops/s
# Warmup Iteration  11: 663242.991 ops/s
# Warmup Iteration  12: 664595.053 ops/s
# Warmup Iteration  13: 553194.947 ops/s
# Warmup Iteration  14: 662375.007 ops/s
# Warmup Iteration  15: 661558.124 ops/s
# Warmup Iteration  16: 662917.096 ops/s
# Warmup Iteration  17: 696124.659 ops/s
# Warmup Iteration  18: 693179.588 ops/s
# Warmup Iteration  19: 693062.200 ops/s
# Warmup Iteration  20: 694705.653 ops/s
# Warmup Iteration  21: 694385.234 ops/s
# Warmup Iteration  22: 691104.644 ops/s
# Warmup Iteration  23: 695718.529 ops/s
# Warmup Iteration  24: 692751.091 ops/s
# Warmup Iteration  25: 693254.788 ops/s
# Warmup Iteration  26: 693213.836 ops/s
# Warmup Iteration  27: 691747.741 ops/s
# Warmup Iteration  28: 694883.751 ops/s
# Warmup Iteration  29: 694671.103 ops/s
# Warmup Iteration  30: 693641.587 ops/s
Iteration   1: 693115.084 ops/s
Iteration   2: 691110.603 ops/s
Iteration   3: 695568.029 ops/s
Iteration   4: 692626.198 ops/s
Iteration   5: 691762.427 ops/s
Iteration   6: 692215.013 ops/s
Iteration   7: 695612.520 ops/s
Iteration   8: 694422.077 ops/s
Iteration   9: 691504.963 ops/s
Iteration  10: 696383.980 ops/s
Iteration  11: 693514.046 ops/s
Iteration  12: 695062.352 ops/s
Iteration  13: 694216.356 ops/s
Iteration  14: 694019.368 ops/s
Iteration  15: 693915.403 ops/s
Iteration  16: 693316.750 ops/s
Iteration  17: 693110.990 ops/s
Iteration  18: 691880.794 ops/s
Iteration  19: 695525.548 ops/s
Iteration  20: 693736.506 ops/s
Iteration  21: 696146.452 ops/s
Iteration  22: 690916.223 ops/s
Iteration  23: 695201.323 ops/s
Iteration  24: 688790.111 ops/s
Iteration  25: 693053.890 ops/s
Iteration  26: 691006.442 ops/s
Iteration  27: 693093.881 ops/s
Iteration  28: 695109.618 ops/s
Iteration  29: 696175.054 ops/s
Iteration  30: 695787.385 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_null":
  693596.646 ±(99.9%) 1262.656 ops/s [Average]
  (min, avg, max) = (688790.111, 693596.646, 696383.980), stdev = 1889.885
  CI (99.9%): [692333.990, 694859.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  693596.646 ± 1262.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1338651.804 ops/s
# Warmup Iteration   2: 2488949.698 ops/s
# Warmup Iteration   3: 2727691.336 ops/s
# Warmup Iteration   4: 2745877.855 ops/s
# Warmup Iteration   5: 2390362.795 ops/s
# Warmup Iteration   6: 2600925.247 ops/s
# Warmup Iteration   7: 2739444.791 ops/s
# Warmup Iteration   8: 2740825.549 ops/s
# Warmup Iteration   9: 2746025.678 ops/s
# Warmup Iteration  10: 2745875.200 ops/s
# Warmup Iteration  11: 2743003.387 ops/s
# Warmup Iteration  12: 2739330.347 ops/s
# Warmup Iteration  13: 2746203.583 ops/s
# Warmup Iteration  14: 2751596.257 ops/s
# Warmup Iteration  15: 2745166.718 ops/s
# Warmup Iteration  16: 2748083.134 ops/s
# Warmup Iteration  17: 2745986.306 ops/s
# Warmup Iteration  18: 2737493.433 ops/s
# Warmup Iteration  19: 2741012.042 ops/s
# Warmup Iteration  20: 2740817.098 ops/s
# Warmup Iteration  21: 2741473.081 ops/s
# Warmup Iteration  22: 2751963.548 ops/s
# Warmup Iteration  23: 2747750.818 ops/s
# Warmup Iteration  24: 2743422.278 ops/s
# Warmup Iteration  25: 2741067.388 ops/s
# Warmup Iteration  26: 2748944.535 ops/s
# Warmup Iteration  27: 2751620.139 ops/s
# Warmup Iteration  28: 2750050.155 ops/s
# Warmup Iteration  29: 2750392.315 ops/s
# Warmup Iteration  30: 2750652.431 ops/s
Iteration   1: 2752356.910 ops/s
Iteration   2: 2748670.366 ops/s
Iteration   3: 2742370.863 ops/s
Iteration   4: 2747563.795 ops/s
Iteration   5: 2751908.559 ops/s
Iteration   6: 2744668.967 ops/s
Iteration   7: 2737906.874 ops/s
Iteration   8: 2743707.265 ops/s
Iteration   9: 2735720.818 ops/s
Iteration  10: 2748002.926 ops/s
Iteration  11: 2745059.854 ops/s
Iteration  12: 2746729.394 ops/s
Iteration  13: 2743361.310 ops/s
Iteration  14: 2743989.491 ops/s
Iteration  15: 2746741.219 ops/s
Iteration  16: 2745670.484 ops/s
Iteration  17: 2740204.777 ops/s
Iteration  18: 2749159.252 ops/s
Iteration  19: 2737794.300 ops/s
Iteration  20: 2739187.720 ops/s
Iteration  21: 2748490.294 ops/s
Iteration  22: 2750273.542 ops/s
Iteration  23: 2744188.256 ops/s
Iteration  24: 2751697.616 ops/s
Iteration  25: 2743631.475 ops/s
Iteration  26: 2744605.582 ops/s
Iteration  27: 2743696.243 ops/s
Iteration  28: 2750441.634 ops/s
Iteration  29: 2752204.682 ops/s
Iteration  30: 2749921.213 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy":
  2745664.189 ±(99.9%) 3023.595 ops/s [Average]
  (min, avg, max) = (2735720.818, 2745664.189, 2752356.910), stdev = 4525.575
  CI (99.9%): [2742640.594, 2748687.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2745664.189 ± 3023.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1904354.217 ops/s
# Warmup Iteration   2: 2500917.234 ops/s
# Warmup Iteration   3: 3130293.896 ops/s
# Warmup Iteration   4: 3110317.091 ops/s
# Warmup Iteration   5: 3123082.860 ops/s
# Warmup Iteration   6: 3125303.616 ops/s
# Warmup Iteration   7: 3125804.899 ops/s
# Warmup Iteration   8: 2760642.978 ops/s
# Warmup Iteration   9: 2968976.661 ops/s
# Warmup Iteration  10: 3118351.375 ops/s
# Warmup Iteration  11: 3124439.550 ops/s
# Warmup Iteration  12: 3125908.693 ops/s
# Warmup Iteration  13: 3120281.281 ops/s
# Warmup Iteration  14: 3126783.709 ops/s
# Warmup Iteration  15: 3127959.717 ops/s
# Warmup Iteration  16: 3132141.130 ops/s
# Warmup Iteration  17: 3123159.365 ops/s
# Warmup Iteration  18: 3127857.852 ops/s
# Warmup Iteration  19: 3130705.170 ops/s
# Warmup Iteration  20: 3125888.295 ops/s
# Warmup Iteration  21: 3125436.145 ops/s
# Warmup Iteration  22: 3125344.115 ops/s
# Warmup Iteration  23: 3123796.687 ops/s
# Warmup Iteration  24: 3127544.607 ops/s
# Warmup Iteration  25: 3121356.651 ops/s
# Warmup Iteration  26: 3127954.461 ops/s
# Warmup Iteration  27: 3125137.194 ops/s
# Warmup Iteration  28: 3125111.292 ops/s
# Warmup Iteration  29: 3129760.115 ops/s
# Warmup Iteration  30: 3123705.423 ops/s
Iteration   1: 3133696.607 ops/s
Iteration   2: 3128439.383 ops/s
Iteration   3: 3129761.188 ops/s
Iteration   4: 3126570.375 ops/s
Iteration   5: 3130831.390 ops/s
Iteration   6: 3127465.975 ops/s
Iteration   7: 3128483.159 ops/s
Iteration   8: 3113707.070 ops/s
Iteration   9: 3130295.079 ops/s
Iteration  10: 3129850.562 ops/s
Iteration  11: 3124820.078 ops/s
Iteration  12: 3130881.846 ops/s
Iteration  13: 3127124.501 ops/s
Iteration  14: 3123711.697 ops/s
Iteration  15: 3126791.485 ops/s
Iteration  16: 3128790.040 ops/s
Iteration  17: 3116975.096 ops/s
Iteration  18: 3119230.100 ops/s
Iteration  19: 3118814.388 ops/s
Iteration  20: 3125011.167 ops/s
Iteration  21: 3122172.978 ops/s
Iteration  22: 3120391.352 ops/s
Iteration  23: 3123126.051 ops/s
Iteration  24: 3136893.891 ops/s
Iteration  25: 3125769.059 ops/s
Iteration  26: 3127248.011 ops/s
Iteration  27: 3120287.734 ops/s
Iteration  28: 3125157.793 ops/s
Iteration  29: 3120873.739 ops/s
Iteration  30: 3121659.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListBy_with_null":
  3125494.367 ±(99.9%) 3422.895 ops/s [Average]
  (min, avg, max) = (3113707.070, 3125494.367, 3136893.891), stdev = 5123.228
  CI (99.9%): [3122071.473, 3128917.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  3125494.367 ± 3422.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499783.905 ops/s
# Warmup Iteration   2: 528517.149 ops/s
# Warmup Iteration   3: 616828.723 ops/s
# Warmup Iteration   4: 680012.360 ops/s
# Warmup Iteration   5: 682425.513 ops/s
# Warmup Iteration   6: 681162.232 ops/s
# Warmup Iteration   7: 678730.122 ops/s
# Warmup Iteration   8: 681303.302 ops/s
# Warmup Iteration   9: 682504.902 ops/s
# Warmup Iteration  10: 682918.624 ops/s
# Warmup Iteration  11: 682961.459 ops/s
# Warmup Iteration  12: 682472.166 ops/s
# Warmup Iteration  13: 683608.907 ops/s
# Warmup Iteration  14: 611956.478 ops/s
# Warmup Iteration  15: 635445.296 ops/s
# Warmup Iteration  16: 681695.327 ops/s
# Warmup Iteration  17: 711672.806 ops/s
# Warmup Iteration  18: 710422.278 ops/s
# Warmup Iteration  19: 707322.025 ops/s
# Warmup Iteration  20: 709923.791 ops/s
# Warmup Iteration  21: 707607.051 ops/s
# Warmup Iteration  22: 707170.289 ops/s
# Warmup Iteration  23: 710042.098 ops/s
# Warmup Iteration  24: 708625.185 ops/s
# Warmup Iteration  25: 710375.324 ops/s
# Warmup Iteration  26: 710446.117 ops/s
# Warmup Iteration  27: 708231.541 ops/s
# Warmup Iteration  28: 709653.740 ops/s
# Warmup Iteration  29: 710125.399 ops/s
# Warmup Iteration  30: 709173.291 ops/s
Iteration   1: 708838.430 ops/s
Iteration   2: 710617.195 ops/s
Iteration   3: 708629.628 ops/s
Iteration   4: 709359.782 ops/s
Iteration   5: 706852.162 ops/s
Iteration   6: 710446.941 ops/s
Iteration   7: 708733.255 ops/s
Iteration   8: 706965.195 ops/s
Iteration   9: 709430.218 ops/s
Iteration  10: 706470.985 ops/s
Iteration  11: 708681.222 ops/s
Iteration  12: 707528.767 ops/s
Iteration  13: 709156.576 ops/s
Iteration  14: 711127.423 ops/s
Iteration  15: 712112.512 ops/s
Iteration  16: 708978.870 ops/s
Iteration  17: 705379.182 ops/s
Iteration  18: 711829.513 ops/s
Iteration  19: 708259.995 ops/s
Iteration  20: 710425.908 ops/s
Iteration  21: 708874.172 ops/s
Iteration  22: 707401.594 ops/s
Iteration  23: 710422.093 ops/s
Iteration  24: 708947.594 ops/s
Iteration  25: 709087.422 ops/s
Iteration  26: 710784.836 ops/s
Iteration  27: 707272.085 ops/s
Iteration  28: 708295.834 ops/s
Iteration  29: 707300.699 ops/s
Iteration  30: 710561.270 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  708959.045 ±(99.9%) 1089.766 ops/s [Average]
  (min, avg, max) = (705379.182, 708959.045, 712112.512), stdev = 1631.110
  CI (99.9%): [707869.280, 710048.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  708959.045 ± 1089.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 463332.559 ops/s
# Warmup Iteration   2: 492280.449 ops/s
# Warmup Iteration   3: 625166.989 ops/s
# Warmup Iteration   4: 653283.495 ops/s
# Warmup Iteration   5: 652525.381 ops/s
# Warmup Iteration   6: 648627.280 ops/s
# Warmup Iteration   7: 650880.866 ops/s
# Warmup Iteration   8: 653027.200 ops/s
# Warmup Iteration   9: 651090.872 ops/s
# Warmup Iteration  10: 651139.991 ops/s
# Warmup Iteration  11: 651050.847 ops/s
# Warmup Iteration  12: 604620.330 ops/s
# Warmup Iteration  13: 592398.659 ops/s
# Warmup Iteration  14: 655275.467 ops/s
# Warmup Iteration  15: 655216.138 ops/s
# Warmup Iteration  16: 649832.584 ops/s
# Warmup Iteration  17: 673623.518 ops/s
# Warmup Iteration  18: 677816.788 ops/s
# Warmup Iteration  19: 677363.161 ops/s
# Warmup Iteration  20: 674568.429 ops/s
# Warmup Iteration  21: 678599.136 ops/s
# Warmup Iteration  22: 677525.943 ops/s
# Warmup Iteration  23: 674840.708 ops/s
# Warmup Iteration  24: 675457.314 ops/s
# Warmup Iteration  25: 674640.697 ops/s
# Warmup Iteration  26: 676906.826 ops/s
# Warmup Iteration  27: 674521.414 ops/s
# Warmup Iteration  28: 674486.290 ops/s
# Warmup Iteration  29: 677419.456 ops/s
# Warmup Iteration  30: 678492.328 ops/s
Iteration   1: 679530.188 ops/s
Iteration   2: 675876.643 ops/s
Iteration   3: 677285.578 ops/s
Iteration   4: 676379.233 ops/s
Iteration   5: 678003.744 ops/s
Iteration   6: 677677.695 ops/s
Iteration   7: 677867.221 ops/s
Iteration   8: 674885.554 ops/s
Iteration   9: 680290.947 ops/s
Iteration  10: 675346.731 ops/s
Iteration  11: 672970.873 ops/s
Iteration  12: 673078.526 ops/s
Iteration  13: 671306.022 ops/s
Iteration  14: 673601.868 ops/s
Iteration  15: 673502.769 ops/s
Iteration  16: 680644.038 ops/s
Iteration  17: 680376.505 ops/s
Iteration  18: 678425.543 ops/s
Iteration  19: 678217.586 ops/s
Iteration  20: 673544.180 ops/s
Iteration  21: 676761.060 ops/s
Iteration  22: 675878.854 ops/s
Iteration  23: 678487.214 ops/s
Iteration  24: 673664.238 ops/s
Iteration  25: 674835.686 ops/s
Iteration  26: 677588.699 ops/s
Iteration  27: 673916.330 ops/s
Iteration  28: 675639.427 ops/s
Iteration  29: 673689.729 ops/s
Iteration  30: 678042.591 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  676243.842 ±(99.9%) 1674.967 ops/s [Average]
  (min, avg, max) = (671306.022, 676243.842, 680644.038), stdev = 2507.012
  CI (99.9%): [674568.875, 677918.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  676243.842 ± 1674.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2002630.554 ops/s
# Warmup Iteration   2: 4422086.138 ops/s
# Warmup Iteration   3: 3765455.957 ops/s
# Warmup Iteration   4: 4546520.650 ops/s
# Warmup Iteration   5: 4547088.764 ops/s
# Warmup Iteration   6: 4531556.202 ops/s
# Warmup Iteration   7: 4543221.781 ops/s
# Warmup Iteration   8: 4535779.434 ops/s
# Warmup Iteration   9: 4548860.850 ops/s
# Warmup Iteration  10: 4533585.056 ops/s
# Warmup Iteration  11: 4544719.738 ops/s
# Warmup Iteration  12: 4528343.818 ops/s
# Warmup Iteration  13: 4528263.154 ops/s
# Warmup Iteration  14: 4552939.604 ops/s
# Warmup Iteration  15: 4551912.694 ops/s
# Warmup Iteration  16: 4552302.040 ops/s
# Warmup Iteration  17: 4531003.681 ops/s
# Warmup Iteration  18: 4548333.595 ops/s
# Warmup Iteration  19: 4547887.833 ops/s
# Warmup Iteration  20: 4540101.113 ops/s
# Warmup Iteration  21: 4539662.207 ops/s
# Warmup Iteration  22: 4543685.494 ops/s
# Warmup Iteration  23: 4542041.694 ops/s
# Warmup Iteration  24: 4535576.541 ops/s
# Warmup Iteration  25: 4535874.667 ops/s
# Warmup Iteration  26: 4551829.145 ops/s
# Warmup Iteration  27: 4543965.252 ops/s
# Warmup Iteration  28: 4545584.397 ops/s
# Warmup Iteration  29: 4545958.477 ops/s
# Warmup Iteration  30: 4543725.303 ops/s
Iteration   1: 4542571.574 ops/s
Iteration   2: 4517401.066 ops/s
Iteration   3: 4533449.772 ops/s
Iteration   4: 4549947.048 ops/s
Iteration   5: 4547005.607 ops/s
Iteration   6: 4549298.037 ops/s
Iteration   7: 4549277.457 ops/s
Iteration   8: 4559794.662 ops/s
Iteration   9: 4545831.997 ops/s
Iteration  10: 4523453.232 ops/s
Iteration  11: 4551790.934 ops/s
Iteration  12: 4558518.432 ops/s
Iteration  13: 4546023.267 ops/s
Iteration  14: 4538114.568 ops/s
Iteration  15: 4537315.968 ops/s
Iteration  16: 4537019.396 ops/s
Iteration  17: 4533900.039 ops/s
Iteration  18: 4528366.377 ops/s
Iteration  19: 4535008.591 ops/s
Iteration  20: 4545618.320 ops/s
Iteration  21: 4545294.022 ops/s
Iteration  22: 4552987.656 ops/s
Iteration  23: 4546421.859 ops/s
Iteration  24: 4549565.316 ops/s
Iteration  25: 4530840.044 ops/s
Iteration  26: 4547766.801 ops/s
Iteration  27: 4537544.484 ops/s
Iteration  28: 4530218.638 ops/s
Iteration  29: 4549574.531 ops/s
Iteration  30: 4528282.496 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_natural_ordering":
  4541606.740 ±(99.9%) 6878.892 ops/s [Average]
  (min, avg, max) = (4517401.066, 4541606.740, 4559794.662), stdev = 10296.003
  CI (99.9%): [4534727.848, 4548485.632] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  4541606.740 ± 6878.892  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3354551.212 ops/s
# Warmup Iteration   2: 7430383.462 ops/s
# Warmup Iteration   3: 7602567.584 ops/s
# Warmup Iteration   4: 6414712.898 ops/s
# Warmup Iteration   5: 7601219.146 ops/s
# Warmup Iteration   6: 7608302.813 ops/s
# Warmup Iteration   7: 7606325.198 ops/s
# Warmup Iteration   8: 7602637.308 ops/s
# Warmup Iteration   9: 7608177.655 ops/s
# Warmup Iteration  10: 7607349.527 ops/s
# Warmup Iteration  11: 7599590.241 ops/s
# Warmup Iteration  12: 7601865.373 ops/s
# Warmup Iteration  13: 7616349.811 ops/s
# Warmup Iteration  14: 7615376.255 ops/s
# Warmup Iteration  15: 7610657.395 ops/s
# Warmup Iteration  16: 7602851.142 ops/s
# Warmup Iteration  17: 7585208.632 ops/s
# Warmup Iteration  18: 7607251.362 ops/s
# Warmup Iteration  19: 7615773.262 ops/s
# Warmup Iteration  20: 7608625.768 ops/s
# Warmup Iteration  21: 7611427.486 ops/s
# Warmup Iteration  22: 7612189.175 ops/s
# Warmup Iteration  23: 7612090.801 ops/s
# Warmup Iteration  24: 7608731.060 ops/s
# Warmup Iteration  25: 7598020.135 ops/s
# Warmup Iteration  26: 7606715.012 ops/s
# Warmup Iteration  27: 7613054.828 ops/s
# Warmup Iteration  28: 7618198.959 ops/s
# Warmup Iteration  29: 7603019.293 ops/s
# Warmup Iteration  30: 7599765.247 ops/s
Iteration   1: 7623423.899 ops/s
Iteration   2: 7613826.557 ops/s
Iteration   3: 7612803.197 ops/s
Iteration   4: 7583576.019 ops/s
Iteration   5: 7592198.579 ops/s
Iteration   6: 7589085.574 ops/s
Iteration   7: 7581572.999 ops/s
Iteration   8: 7593256.160 ops/s
Iteration   9: 7585663.511 ops/s
Iteration  10: 7586700.507 ops/s
Iteration  11: 7588243.750 ops/s
Iteration  12: 7623328.278 ops/s
Iteration  13: 7623797.195 ops/s
Iteration  14: 7596318.316 ops/s
Iteration  15: 7610592.059 ops/s
Iteration  16: 7592988.716 ops/s
Iteration  17: 7591427.917 ops/s
Iteration  18: 7608572.000 ops/s
Iteration  19: 7590827.856 ops/s
Iteration  20: 7632863.661 ops/s
Iteration  21: 7627014.722 ops/s
Iteration  22: 7610202.601 ops/s
Iteration  23: 7613369.514 ops/s
Iteration  24: 7602793.457 ops/s
Iteration  25: 7597149.880 ops/s
Iteration  26: 7620179.436 ops/s
Iteration  27: 7621313.648 ops/s
Iteration  28: 7604682.968 ops/s
Iteration  29: 7627449.941 ops/s
Iteration  30: 7606544.004 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_comparator":
  7605058.897 ±(99.9%) 10227.849 ops/s [Average]
  (min, avg, max) = (7581572.999, 7605058.897, 7632863.661), stdev = 15308.563
  CI (99.9%): [7594831.049, 7615286.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  7605058.897 ± 10227.849  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530276.182 ops/s
# Warmup Iteration   2: 565468.601 ops/s
# Warmup Iteration   3: 673857.451 ops/s
# Warmup Iteration   4: 732234.767 ops/s
# Warmup Iteration   5: 725020.556 ops/s
# Warmup Iteration   6: 728110.671 ops/s
# Warmup Iteration   7: 731258.363 ops/s
# Warmup Iteration   8: 731113.914 ops/s
# Warmup Iteration   9: 731011.117 ops/s
# Warmup Iteration  10: 731357.058 ops/s
# Warmup Iteration  11: 731891.912 ops/s
# Warmup Iteration  12: 730655.180 ops/s
# Warmup Iteration  13: 732958.609 ops/s
# Warmup Iteration  14: 609081.663 ops/s
# Warmup Iteration  15: 730904.597 ops/s
# Warmup Iteration  16: 731470.089 ops/s
# Warmup Iteration  17: 765742.209 ops/s
# Warmup Iteration  18: 766638.218 ops/s
# Warmup Iteration  19: 768015.492 ops/s
# Warmup Iteration  20: 768346.616 ops/s
# Warmup Iteration  21: 767842.287 ops/s
# Warmup Iteration  22: 768488.805 ops/s
# Warmup Iteration  23: 766855.508 ops/s
# Warmup Iteration  24: 763347.410 ops/s
# Warmup Iteration  25: 766798.414 ops/s
# Warmup Iteration  26: 765792.123 ops/s
# Warmup Iteration  27: 767564.103 ops/s
# Warmup Iteration  28: 768436.124 ops/s
# Warmup Iteration  29: 766303.061 ops/s
# Warmup Iteration  30: 766325.326 ops/s
Iteration   1: 768927.236 ops/s
Iteration   2: 765598.237 ops/s
Iteration   3: 766195.091 ops/s
Iteration   4: 766706.663 ops/s
Iteration   5: 763793.898 ops/s
Iteration   6: 763501.297 ops/s
Iteration   7: 770142.953 ops/s
Iteration   8: 766623.152 ops/s
Iteration   9: 764975.655 ops/s
Iteration  10: 769135.801 ops/s
Iteration  11: 765216.383 ops/s
Iteration  12: 768493.660 ops/s
Iteration  13: 769756.813 ops/s
Iteration  14: 763839.253 ops/s
Iteration  15: 767753.055 ops/s
Iteration  16: 769068.213 ops/s
Iteration  17: 766265.612 ops/s
Iteration  18: 766917.955 ops/s
Iteration  19: 767909.794 ops/s
Iteration  20: 765026.652 ops/s
Iteration  21: 767243.807 ops/s
Iteration  22: 765152.863 ops/s
Iteration  23: 763812.115 ops/s
Iteration  24: 768656.668 ops/s
Iteration  25: 765837.995 ops/s
Iteration  26: 763199.034 ops/s
Iteration  27: 767990.295 ops/s
Iteration  28: 763564.180 ops/s
Iteration  29: 765750.881 ops/s
Iteration  30: 769819.599 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedList_with_null":
  766562.494 ±(99.9%) 1411.611 ops/s [Average]
  (min, avg, max) = (763199.034, 766562.494, 770142.953), stdev = 2112.833
  CI (99.9%): [765150.883, 767974.104] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  766562.494 ± 1411.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582656.341 ops/s
# Warmup Iteration   2: 1362543.618 ops/s
# Warmup Iteration   3: 1425639.224 ops/s
# Warmup Iteration   4: 1248423.372 ops/s
# Warmup Iteration   5: 1378726.562 ops/s
# Warmup Iteration   6: 1422325.250 ops/s
# Warmup Iteration   7: 1423352.117 ops/s
# Warmup Iteration   8: 1426811.725 ops/s
# Warmup Iteration   9: 1429431.175 ops/s
# Warmup Iteration  10: 1429879.834 ops/s
# Warmup Iteration  11: 1425198.650 ops/s
# Warmup Iteration  12: 1424799.608 ops/s
# Warmup Iteration  13: 1429037.795 ops/s
# Warmup Iteration  14: 1422377.948 ops/s
# Warmup Iteration  15: 1419086.201 ops/s
# Warmup Iteration  16: 1428637.964 ops/s
# Warmup Iteration  17: 1428782.591 ops/s
# Warmup Iteration  18: 1423774.485 ops/s
# Warmup Iteration  19: 1429414.496 ops/s
# Warmup Iteration  20: 1426487.216 ops/s
# Warmup Iteration  21: 1426350.549 ops/s
# Warmup Iteration  22: 1422670.694 ops/s
# Warmup Iteration  23: 1430686.909 ops/s
# Warmup Iteration  24: 1422960.536 ops/s
# Warmup Iteration  25: 1425112.727 ops/s
# Warmup Iteration  26: 1428724.685 ops/s
# Warmup Iteration  27: 1423361.998 ops/s
# Warmup Iteration  28: 1428800.322 ops/s
# Warmup Iteration  29: 1421984.205 ops/s
# Warmup Iteration  30: 1427118.296 ops/s
Iteration   1: 1421932.741 ops/s
Iteration   2: 1420080.495 ops/s
Iteration   3: 1429389.672 ops/s
Iteration   4: 1430983.664 ops/s
Iteration   5: 1424236.835 ops/s
Iteration   6: 1426604.763 ops/s
Iteration   7: 1428835.459 ops/s
Iteration   8: 1430272.219 ops/s
Iteration   9: 1429840.969 ops/s
Iteration  10: 1421149.046 ops/s
Iteration  11: 1423553.991 ops/s
Iteration  12: 1424967.969 ops/s
Iteration  13: 1424726.495 ops/s
Iteration  14: 1420935.275 ops/s
Iteration  15: 1419509.174 ops/s
Iteration  16: 1427274.674 ops/s
Iteration  17: 1417205.036 ops/s
Iteration  18: 1423024.906 ops/s
Iteration  19: 1431442.335 ops/s
Iteration  20: 1422924.958 ops/s
Iteration  21: 1427631.771 ops/s
Iteration  22: 1425812.998 ops/s
Iteration  23: 1432881.918 ops/s
Iteration  24: 1426420.620 ops/s
Iteration  25: 1431618.210 ops/s
Iteration  26: 1428776.274 ops/s
Iteration  27: 1430482.841 ops/s
Iteration  28: 1417170.165 ops/s
Iteration  29: 1425559.911 ops/s
Iteration  30: 1432826.081 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap":
  1425935.715 ±(99.9%) 3022.591 ops/s [Average]
  (min, avg, max) = (1417170.165, 1425935.715, 1432881.918), stdev = 4524.072
  CI (99.9%): [1422913.125, 1428958.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedMap  thrpt   30  1425935.715 ± 3022.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 460594.838 ops/s
# Warmup Iteration   2: 830813.555 ops/s
# Warmup Iteration   3: 953540.493 ops/s
# Warmup Iteration   4: 957279.130 ops/s
# Warmup Iteration   5: 958904.675 ops/s
# Warmup Iteration   6: 794043.557 ops/s
# Warmup Iteration   7: 961083.118 ops/s
# Warmup Iteration   8: 960130.511 ops/s
# Warmup Iteration   9: 961403.481 ops/s
# Warmup Iteration  10: 960516.574 ops/s
# Warmup Iteration  11: 962868.049 ops/s
# Warmup Iteration  12: 965455.529 ops/s
# Warmup Iteration  13: 962073.665 ops/s
# Warmup Iteration  14: 961156.761 ops/s
# Warmup Iteration  15: 959203.106 ops/s
# Warmup Iteration  16: 959391.204 ops/s
# Warmup Iteration  17: 960652.201 ops/s
# Warmup Iteration  18: 959895.061 ops/s
# Warmup Iteration  19: 959363.233 ops/s
# Warmup Iteration  20: 958906.815 ops/s
# Warmup Iteration  21: 960877.890 ops/s
# Warmup Iteration  22: 962411.302 ops/s
# Warmup Iteration  23: 959907.288 ops/s
# Warmup Iteration  24: 958302.980 ops/s
# Warmup Iteration  25: 958135.933 ops/s
# Warmup Iteration  26: 963217.033 ops/s
# Warmup Iteration  27: 960970.410 ops/s
# Warmup Iteration  28: 962944.646 ops/s
# Warmup Iteration  29: 958105.969 ops/s
# Warmup Iteration  30: 961719.410 ops/s
Iteration   1: 961372.363 ops/s
Iteration   2: 962024.499 ops/s
Iteration   3: 953538.207 ops/s
Iteration   4: 963629.464 ops/s
Iteration   5: 960039.089 ops/s
Iteration   6: 960458.558 ops/s
Iteration   7: 963508.244 ops/s
Iteration   8: 959002.143 ops/s
Iteration   9: 964155.887 ops/s
Iteration  10: 957342.249 ops/s
Iteration  11: 962306.657 ops/s
Iteration  12: 959722.619 ops/s
Iteration  13: 960170.200 ops/s
Iteration  14: 960179.520 ops/s
Iteration  15: 964060.983 ops/s
Iteration  16: 960980.697 ops/s
Iteration  17: 959148.233 ops/s
Iteration  18: 966164.286 ops/s
Iteration  19: 962706.168 ops/s
Iteration  20: 961197.007 ops/s
Iteration  21: 960993.338 ops/s
Iteration  22: 964695.373 ops/s
Iteration  23: 962646.926 ops/s
Iteration  24: 962864.916 ops/s
Iteration  25: 962441.411 ops/s
Iteration  26: 962755.987 ops/s
Iteration  27: 960265.472 ops/s
Iteration  28: 963079.657 ops/s
Iteration  29: 960906.086 ops/s
Iteration  30: 965043.980 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMapBy":
  961580.007 ±(99.9%) 1673.184 ops/s [Average]
  (min, avg, max) = (953538.207, 961580.007, 966164.286), stdev = 2504.343
  CI (99.9%): [959906.823, 963253.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  961580.007 ± 1673.184  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 570721.200 ops/s
# Warmup Iteration   2: 1309306.413 ops/s
# Warmup Iteration   3: 1370884.338 ops/s
# Warmup Iteration   4: 1283654.676 ops/s
# Warmup Iteration   5: 1242705.046 ops/s
# Warmup Iteration   6: 1377968.596 ops/s
# Warmup Iteration   7: 1376058.529 ops/s
# Warmup Iteration   8: 1381318.426 ops/s
# Warmup Iteration   9: 1376232.485 ops/s
# Warmup Iteration  10: 1384683.746 ops/s
# Warmup Iteration  11: 1375248.234 ops/s
# Warmup Iteration  12: 1373534.446 ops/s
# Warmup Iteration  13: 1384413.001 ops/s
# Warmup Iteration  14: 1381304.664 ops/s
# Warmup Iteration  15: 1378712.185 ops/s
# Warmup Iteration  16: 1375832.785 ops/s
# Warmup Iteration  17: 1376291.064 ops/s
# Warmup Iteration  18: 1377297.160 ops/s
# Warmup Iteration  19: 1376838.622 ops/s
# Warmup Iteration  20: 1375654.690 ops/s
# Warmup Iteration  21: 1375973.607 ops/s
# Warmup Iteration  22: 1379029.609 ops/s
# Warmup Iteration  23: 1369670.399 ops/s
# Warmup Iteration  24: 1377164.155 ops/s
# Warmup Iteration  25: 1374010.233 ops/s
# Warmup Iteration  26: 1376123.519 ops/s
# Warmup Iteration  27: 1378324.893 ops/s
# Warmup Iteration  28: 1379993.959 ops/s
# Warmup Iteration  29: 1378477.714 ops/s
# Warmup Iteration  30: 1371614.430 ops/s
Iteration   1: 1373191.847 ops/s
Iteration   2: 1375505.504 ops/s
Iteration   3: 1385024.859 ops/s
Iteration   4: 1366036.177 ops/s
Iteration   5: 1380954.304 ops/s
Iteration   6: 1368928.714 ops/s
Iteration   7: 1365746.171 ops/s
Iteration   8: 1378765.626 ops/s
Iteration   9: 1372662.927 ops/s
Iteration  10: 1378750.822 ops/s
Iteration  11: 1369158.383 ops/s
Iteration  12: 1381164.071 ops/s
Iteration  13: 1378835.563 ops/s
Iteration  14: 1373979.550 ops/s
Iteration  15: 1375167.439 ops/s
Iteration  16: 1376027.127 ops/s
Iteration  17: 1377725.572 ops/s
Iteration  18: 1379043.537 ops/s
Iteration  19: 1372433.387 ops/s
Iteration  20: 1369499.179 ops/s
Iteration  21: 1377981.083 ops/s
Iteration  22: 1367852.120 ops/s
Iteration  23: 1368099.621 ops/s
Iteration  24: 1370606.326 ops/s
Iteration  25: 1374654.278 ops/s
Iteration  26: 1370476.751 ops/s
Iteration  27: 1369501.275 ops/s
Iteration  28: 1376009.601 ops/s
Iteration  29: 1371149.539 ops/s
Iteration  30: 1367924.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1373761.869 ±(99.9%) 3336.513 ops/s [Average]
  (min, avg, max) = (1365746.171, 1373761.869, 1385024.859), stdev = 4993.936
  CI (99.9%): [1370425.356, 1377098.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1373761.869 ± 3336.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 675892.403 ops/s
# Warmup Iteration   2: 1509236.301 ops/s
# Warmup Iteration   3: 1559902.822 ops/s
# Warmup Iteration   4: 1492960.167 ops/s
# Warmup Iteration   5: 1377687.529 ops/s
# Warmup Iteration   6: 1573068.231 ops/s
# Warmup Iteration   7: 1567219.819 ops/s
# Warmup Iteration   8: 1567937.310 ops/s
# Warmup Iteration   9: 1568945.730 ops/s
# Warmup Iteration  10: 1572445.433 ops/s
# Warmup Iteration  11: 1570852.410 ops/s
# Warmup Iteration  12: 1568073.006 ops/s
# Warmup Iteration  13: 1570413.422 ops/s
# Warmup Iteration  14: 1571335.810 ops/s
# Warmup Iteration  15: 1568932.106 ops/s
# Warmup Iteration  16: 1566478.159 ops/s
# Warmup Iteration  17: 1568171.103 ops/s
# Warmup Iteration  18: 1569111.015 ops/s
# Warmup Iteration  19: 1570158.385 ops/s
# Warmup Iteration  20: 1571414.615 ops/s
# Warmup Iteration  21: 1570565.035 ops/s
# Warmup Iteration  22: 1572238.470 ops/s
# Warmup Iteration  23: 1570335.546 ops/s
# Warmup Iteration  24: 1569401.965 ops/s
# Warmup Iteration  25: 1569729.431 ops/s
# Warmup Iteration  26: 1567611.022 ops/s
# Warmup Iteration  27: 1568066.831 ops/s
# Warmup Iteration  28: 1570991.057 ops/s
# Warmup Iteration  29: 1569772.066 ops/s
# Warmup Iteration  30: 1566550.321 ops/s
Iteration   1: 1566572.167 ops/s
Iteration   2: 1549691.175 ops/s
Iteration   3: 1568270.914 ops/s
Iteration   4: 1569178.460 ops/s
Iteration   5: 1563478.486 ops/s
Iteration   6: 1567123.273 ops/s
Iteration   7: 1566676.160 ops/s
Iteration   8: 1565249.606 ops/s
Iteration   9: 1567251.091 ops/s
Iteration  10: 1566748.553 ops/s
Iteration  11: 1570533.235 ops/s
Iteration  12: 1565684.195 ops/s
Iteration  13: 1567698.423 ops/s
Iteration  14: 1572014.996 ops/s
Iteration  15: 1569218.111 ops/s
Iteration  16: 1570773.202 ops/s
Iteration  17: 1577205.371 ops/s
Iteration  18: 1564984.077 ops/s
Iteration  19: 1566696.881 ops/s
Iteration  20: 1564195.369 ops/s
Iteration  21: 1573215.091 ops/s
Iteration  22: 1571473.926 ops/s
Iteration  23: 1566435.919 ops/s
Iteration  24: 1568642.570 ops/s
Iteration  25: 1567889.065 ops/s
Iteration  26: 1573916.874 ops/s
Iteration  27: 1568089.478 ops/s
Iteration  28: 1570052.016 ops/s
Iteration  29: 1568327.885 ops/s
Iteration  30: 1570320.473 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSetBy":
  1567920.235 ±(99.9%) 3052.139 ops/s [Average]
  (min, avg, max) = (1549691.175, 1567920.235, 1577205.371), stdev = 4568.298
  CI (99.9%): [1564868.096, 1570972.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1567920.235 ± 3052.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 990023.120 ops/s
# Warmup Iteration   2: 2537160.491 ops/s
# Warmup Iteration   3: 2523468.874 ops/s
# Warmup Iteration   4: 2108987.722 ops/s
# Warmup Iteration   5: 2527182.019 ops/s
# Warmup Iteration   6: 2520629.566 ops/s
# Warmup Iteration   7: 2526372.894 ops/s
# Warmup Iteration   8: 2525861.407 ops/s
# Warmup Iteration   9: 2530022.338 ops/s
# Warmup Iteration  10: 2537433.770 ops/s
# Warmup Iteration  11: 2526087.312 ops/s
# Warmup Iteration  12: 2531897.003 ops/s
# Warmup Iteration  13: 2536371.267 ops/s
# Warmup Iteration  14: 2535519.231 ops/s
# Warmup Iteration  15: 2532055.498 ops/s
# Warmup Iteration  16: 2533862.161 ops/s
# Warmup Iteration  17: 2536185.574 ops/s
# Warmup Iteration  18: 2527760.898 ops/s
# Warmup Iteration  19: 2526985.848 ops/s
# Warmup Iteration  20: 2537606.442 ops/s
# Warmup Iteration  21: 2535502.424 ops/s
# Warmup Iteration  22: 2527912.818 ops/s
# Warmup Iteration  23: 2539021.538 ops/s
# Warmup Iteration  24: 2532764.478 ops/s
# Warmup Iteration  25: 2535633.225 ops/s
# Warmup Iteration  26: 2539399.264 ops/s
# Warmup Iteration  27: 2537722.897 ops/s
# Warmup Iteration  28: 2538643.770 ops/s
# Warmup Iteration  29: 2538598.935 ops/s
# Warmup Iteration  30: 2537559.264 ops/s
Iteration   1: 2535042.777 ops/s
Iteration   2: 2534922.133 ops/s
Iteration   3: 2539646.873 ops/s
Iteration   4: 2534258.895 ops/s
Iteration   5: 2520919.521 ops/s
Iteration   6: 2541807.103 ops/s
Iteration   7: 2542026.192 ops/s
Iteration   8: 2528193.304 ops/s
Iteration   9: 2534778.002 ops/s
Iteration  10: 2534027.665 ops/s
Iteration  11: 2542484.392 ops/s
Iteration  12: 2525206.608 ops/s
Iteration  13: 2532958.884 ops/s
Iteration  14: 2532321.106 ops/s
Iteration  15: 2533296.446 ops/s
Iteration  16: 2540497.347 ops/s
Iteration  17: 2526521.276 ops/s
Iteration  18: 2528093.389 ops/s
Iteration  19: 2531009.884 ops/s
Iteration  20: 2541756.280 ops/s
Iteration  21: 2536616.142 ops/s
Iteration  22: 2534958.124 ops/s
Iteration  23: 2538848.876 ops/s
Iteration  24: 2538117.759 ops/s
Iteration  25: 2539306.597 ops/s
Iteration  26: 2528068.731 ops/s
Iteration  27: 2538798.127 ops/s
Iteration  28: 2537431.841 ops/s
Iteration  29: 2529849.560 ops/s
Iteration  30: 2536177.758 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2534598.053 ±(99.9%) 3676.474 ops/s [Average]
  (min, avg, max) = (2520919.521, 2534598.053, 2542484.392), stdev = 5502.774
  CI (99.9%): [2530921.579, 2538274.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2534598.053 ± 3676.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 923622.774 ops/s
# Warmup Iteration   2: 2332007.626 ops/s
# Warmup Iteration   3: 2333174.242 ops/s
# Warmup Iteration   4: 1952875.107 ops/s
# Warmup Iteration   5: 2333054.700 ops/s
# Warmup Iteration   6: 2339072.458 ops/s
# Warmup Iteration   7: 2339118.029 ops/s
# Warmup Iteration   8: 2330280.792 ops/s
# Warmup Iteration   9: 2338489.238 ops/s
# Warmup Iteration  10: 2335817.674 ops/s
# Warmup Iteration  11: 2339374.623 ops/s
# Warmup Iteration  12: 2337289.630 ops/s
# Warmup Iteration  13: 2335604.938 ops/s
# Warmup Iteration  14: 2338516.513 ops/s
# Warmup Iteration  15: 2342600.058 ops/s
# Warmup Iteration  16: 2338718.275 ops/s
# Warmup Iteration  17: 2344097.076 ops/s
# Warmup Iteration  18: 2340582.599 ops/s
# Warmup Iteration  19: 2335255.865 ops/s
# Warmup Iteration  20: 2333118.244 ops/s
# Warmup Iteration  21: 2341089.700 ops/s
# Warmup Iteration  22: 2337941.093 ops/s
# Warmup Iteration  23: 2338635.552 ops/s
# Warmup Iteration  24: 2341582.270 ops/s
# Warmup Iteration  25: 2339731.849 ops/s
# Warmup Iteration  26: 2340401.768 ops/s
# Warmup Iteration  27: 2337341.973 ops/s
# Warmup Iteration  28: 2336963.077 ops/s
# Warmup Iteration  29: 2338379.495 ops/s
# Warmup Iteration  30: 2341943.254 ops/s
Iteration   1: 2342840.612 ops/s
Iteration   2: 2347697.023 ops/s
Iteration   3: 2338704.409 ops/s
Iteration   4: 2334263.794 ops/s
Iteration   5: 2344986.838 ops/s
Iteration   6: 2340704.909 ops/s
Iteration   7: 2337578.512 ops/s
Iteration   8: 2344149.680 ops/s
Iteration   9: 2323432.277 ops/s
Iteration  10: 2347922.137 ops/s
Iteration  11: 2338713.963 ops/s
Iteration  12: 2331870.906 ops/s
Iteration  13: 2338095.926 ops/s
Iteration  14: 2337272.439 ops/s
Iteration  15: 2340891.061 ops/s
Iteration  16: 2339422.612 ops/s
Iteration  17: 2343765.235 ops/s
Iteration  18: 2342490.141 ops/s
Iteration  19: 2346224.737 ops/s
Iteration  20: 2345990.415 ops/s
Iteration  21: 2342023.216 ops/s
Iteration  22: 2344929.815 ops/s
Iteration  23: 2341871.889 ops/s
Iteration  24: 2347238.166 ops/s
Iteration  25: 2349113.333 ops/s
Iteration  26: 2339109.518 ops/s
Iteration  27: 2335514.698 ops/s
Iteration  28: 2336489.129 ops/s
Iteration  29: 2338480.818 ops/s
Iteration  30: 2337459.851 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2340641.602 ±(99.9%) 3637.309 ops/s [Average]
  (min, avg, max) = (2323432.277, 2340641.602, 2349113.333), stdev = 5444.153
  CI (99.9%): [2337004.293, 2344278.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2340641.602 ± 3637.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4386117.515 ops/s
# Warmup Iteration   2: 9761093.850 ops/s
# Warmup Iteration   3: 8164291.719 ops/s
# Warmup Iteration   4: 9757130.568 ops/s
# Warmup Iteration   5: 9738094.418 ops/s
# Warmup Iteration   6: 9724454.024 ops/s
# Warmup Iteration   7: 9753555.086 ops/s
# Warmup Iteration   8: 9733719.937 ops/s
# Warmup Iteration   9: 9720796.409 ops/s
# Warmup Iteration  10: 9765935.113 ops/s
# Warmup Iteration  11: 9710183.190 ops/s
# Warmup Iteration  12: 9752850.893 ops/s
# Warmup Iteration  13: 9754194.379 ops/s
# Warmup Iteration  14: 9734343.063 ops/s
# Warmup Iteration  15: 9761995.192 ops/s
# Warmup Iteration  16: 9739449.181 ops/s
# Warmup Iteration  17: 9731309.786 ops/s
# Warmup Iteration  18: 9721637.493 ops/s
# Warmup Iteration  19: 9748691.523 ops/s
# Warmup Iteration  20: 9759255.719 ops/s
# Warmup Iteration  21: 9758837.368 ops/s
# Warmup Iteration  22: 9742459.166 ops/s
# Warmup Iteration  23: 9748317.866 ops/s
# Warmup Iteration  24: 9745814.059 ops/s
# Warmup Iteration  25: 9767128.420 ops/s
# Warmup Iteration  26: 9761977.203 ops/s
# Warmup Iteration  27: 9757361.128 ops/s
# Warmup Iteration  28: 9705091.945 ops/s
# Warmup Iteration  29: 9723830.766 ops/s
# Warmup Iteration  30: 9734637.615 ops/s
Iteration   1: 9782734.373 ops/s
Iteration   2: 9756950.861 ops/s
Iteration   3: 9777688.343 ops/s
Iteration   4: 9755865.585 ops/s
Iteration   5: 9697059.218 ops/s
Iteration   6: 9750439.665 ops/s
Iteration   7: 9723737.852 ops/s
Iteration   8: 9744069.041 ops/s
Iteration   9: 9733648.032 ops/s
Iteration  10: 9717143.688 ops/s
Iteration  11: 9743870.669 ops/s
Iteration  12: 9777333.166 ops/s
Iteration  13: 9739212.472 ops/s
Iteration  14: 9767099.188 ops/s
Iteration  15: 9764001.643 ops/s
Iteration  16: 9728684.413 ops/s
Iteration  17: 9768432.783 ops/s
Iteration  18: 9737797.469 ops/s
Iteration  19: 9728529.388 ops/s
Iteration  20: 9770284.128 ops/s
Iteration  21: 9717096.897 ops/s
Iteration  22: 9733616.682 ops/s
Iteration  23: 9745573.121 ops/s
Iteration  24: 9762984.353 ops/s
Iteration  25: 9769394.131 ops/s
Iteration  26: 9749629.106 ops/s
Iteration  27: 9741573.462 ops/s
Iteration  28: 9752203.064 ops/s
Iteration  29: 9717356.480 ops/s
Iteration  30: 9567983.277 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_toStack":
  9740733.085 ±(99.9%) 25908.987 ops/s [Average]
  (min, avg, max) = (9567983.277, 9740733.085, 9782734.373), stdev = 38779.355
  CI (99.9%): [9714824.098, 9766642.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CompositeFastListTest._Benchmark.benchmark_toStack  thrpt   30  9740733.085 ± 25908.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2266837.097 ops/s
# Warmup Iteration   2: 5124211.775 ops/s
# Warmup Iteration   3: 4969454.187 ops/s
# Warmup Iteration   4: 4529388.782 ops/s
# Warmup Iteration   5: 5194757.771 ops/s
# Warmup Iteration   6: 5182491.629 ops/s
# Warmup Iteration   7: 5189757.993 ops/s
# Warmup Iteration   8: 5198028.061 ops/s
# Warmup Iteration   9: 5205634.518 ops/s
# Warmup Iteration  10: 5205482.775 ops/s
# Warmup Iteration  11: 5191265.116 ops/s
# Warmup Iteration  12: 5191912.689 ops/s
# Warmup Iteration  13: 5196130.812 ops/s
# Warmup Iteration  14: 5193844.930 ops/s
# Warmup Iteration  15: 5180506.122 ops/s
# Warmup Iteration  16: 5191389.309 ops/s
# Warmup Iteration  17: 5176554.233 ops/s
# Warmup Iteration  18: 5196334.776 ops/s
# Warmup Iteration  19: 5194254.744 ops/s
# Warmup Iteration  20: 5192689.151 ops/s
# Warmup Iteration  21: 5187744.383 ops/s
# Warmup Iteration  22: 5185155.373 ops/s
# Warmup Iteration  23: 5184394.631 ops/s
# Warmup Iteration  24: 5186459.128 ops/s
# Warmup Iteration  25: 5188888.490 ops/s
# Warmup Iteration  26: 5189142.366 ops/s
# Warmup Iteration  27: 5193437.835 ops/s
# Warmup Iteration  28: 5190040.749 ops/s
# Warmup Iteration  29: 5154209.874 ops/s
# Warmup Iteration  30: 5187309.114 ops/s
Iteration   1: 5195411.239 ops/s
Iteration   2: 5182660.661 ops/s
Iteration   3: 5207660.311 ops/s
Iteration   4: 5193793.851 ops/s
Iteration   5: 5196876.294 ops/s
Iteration   6: 5154067.682 ops/s
Iteration   7: 5205138.952 ops/s
Iteration   8: 5192174.365 ops/s
Iteration   9: 5196779.767 ops/s
Iteration  10: 5201006.283 ops/s
Iteration  11: 5205525.863 ops/s
Iteration  12: 5199894.450 ops/s
Iteration  13: 5186720.292 ops/s
Iteration  14: 5182910.815 ops/s
Iteration  15: 5193081.496 ops/s
Iteration  16: 5183738.018 ops/s
Iteration  17: 5166555.031 ops/s
Iteration  18: 5191866.085 ops/s
Iteration  19: 5196539.299 ops/s
Iteration  20: 5193124.462 ops/s
Iteration  21: 5207288.408 ops/s
Iteration  22: 5179391.376 ops/s
Iteration  23: 5197095.302 ops/s
Iteration  24: 5197342.538 ops/s
Iteration  25: 5195138.542 ops/s
Iteration  26: 5191511.493 ops/s
Iteration  27: 5185473.749 ops/s
Iteration  28: 5190660.019 ops/s
Iteration  29: 5201728.548 ops/s
Iteration  30: 5180598.728 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_with":
  5191725.131 ±(99.9%) 7753.018 ops/s [Average]
  (min, avg, max) = (5154067.682, 5191725.131, 5207660.311), stdev = 11604.353
  CI (99.9%): [5183972.113, 5199478.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_with  thrpt   30  5191725.131 ± 7753.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2018150.554 ops/s
# Warmup Iteration   2: 4601235.955 ops/s
# Warmup Iteration   3: 4563993.667 ops/s
# Warmup Iteration   4: 3791366.232 ops/s
# Warmup Iteration   5: 4550340.910 ops/s
# Warmup Iteration   6: 4557341.142 ops/s
# Warmup Iteration   7: 4551418.895 ops/s
# Warmup Iteration   8: 4551528.367 ops/s
# Warmup Iteration   9: 4562114.031 ops/s
# Warmup Iteration  10: 4553275.111 ops/s
# Warmup Iteration  11: 4543324.054 ops/s
# Warmup Iteration  12: 4552468.788 ops/s
# Warmup Iteration  13: 4548863.567 ops/s
# Warmup Iteration  14: 4561012.685 ops/s
# Warmup Iteration  15: 4555231.159 ops/s
# Warmup Iteration  16: 4562709.520 ops/s
# Warmup Iteration  17: 4551484.020 ops/s
# Warmup Iteration  18: 4561076.640 ops/s
# Warmup Iteration  19: 4576130.937 ops/s
# Warmup Iteration  20: 4565565.024 ops/s
# Warmup Iteration  21: 4567442.465 ops/s
# Warmup Iteration  22: 4572043.570 ops/s
# Warmup Iteration  23: 4574877.355 ops/s
# Warmup Iteration  24: 4568980.540 ops/s
# Warmup Iteration  25: 4575339.722 ops/s
# Warmup Iteration  26: 4565075.024 ops/s
# Warmup Iteration  27: 4575479.350 ops/s
# Warmup Iteration  28: 4572226.261 ops/s
# Warmup Iteration  29: 4560459.783 ops/s
# Warmup Iteration  30: 4559037.093 ops/s
Iteration   1: 4566719.481 ops/s
Iteration   2: 4560513.774 ops/s
Iteration   3: 4573300.720 ops/s
Iteration   4: 4585019.844 ops/s
Iteration   5: 4582903.919 ops/s
Iteration   6: 4565024.856 ops/s
Iteration   7: 4566650.009 ops/s
Iteration   8: 4581517.652 ops/s
Iteration   9: 4577180.255 ops/s
Iteration  10: 4580600.670 ops/s
Iteration  11: 4586178.434 ops/s
Iteration  12: 4585398.235 ops/s
Iteration  13: 4581157.331 ops/s
Iteration  14: 4578624.513 ops/s
Iteration  15: 4582526.694 ops/s
Iteration  16: 4563562.849 ops/s
Iteration  17: 4567728.960 ops/s
Iteration  18: 4568465.028 ops/s
Iteration  19: 4561492.074 ops/s
Iteration  20: 4581828.016 ops/s
Iteration  21: 4556734.871 ops/s
Iteration  22: 4569388.843 ops/s
Iteration  23: 4561973.631 ops/s
Iteration  24: 4570243.818 ops/s
Iteration  25: 4561294.986 ops/s
Iteration  26: 4583537.310 ops/s
Iteration  27: 4553840.059 ops/s
Iteration  28: 4581441.969 ops/s
Iteration  29: 4578743.595 ops/s
Iteration  30: 4578325.905 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withAll":
  4573063.943 ±(99.9%) 6456.460 ops/s [Average]
  (min, avg, max) = (4553840.059, 4573063.943, 4586178.434), stdev = 9663.726
  CI (99.9%): [4566607.483, 4579520.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_withAll  thrpt   30  4573063.943 ± 6456.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2049302.097 ops/s
# Warmup Iteration   2: 3875371.710 ops/s
# Warmup Iteration   3: 4428209.014 ops/s
# Warmup Iteration   4: 4545369.702 ops/s
# Warmup Iteration   5: 4532599.085 ops/s
# Warmup Iteration   6: 4506648.468 ops/s
# Warmup Iteration   7: 4544537.704 ops/s
# Warmup Iteration   8: 4539484.998 ops/s
# Warmup Iteration   9: 4534226.939 ops/s
# Warmup Iteration  10: 4535124.174 ops/s
# Warmup Iteration  11: 4529739.810 ops/s
# Warmup Iteration  12: 4525137.032 ops/s
# Warmup Iteration  13: 4542557.084 ops/s
# Warmup Iteration  14: 4525804.460 ops/s
# Warmup Iteration  15: 4545553.471 ops/s
# Warmup Iteration  16: 4533938.991 ops/s
# Warmup Iteration  17: 4541876.085 ops/s
# Warmup Iteration  18: 4521812.697 ops/s
# Warmup Iteration  19: 4531868.155 ops/s
# Warmup Iteration  20: 4544078.335 ops/s
# Warmup Iteration  21: 4532227.029 ops/s
# Warmup Iteration  22: 4535890.366 ops/s
# Warmup Iteration  23: 4546692.548 ops/s
# Warmup Iteration  24: 4539255.989 ops/s
# Warmup Iteration  25: 4541008.468 ops/s
# Warmup Iteration  26: 4524825.297 ops/s
# Warmup Iteration  27: 4524193.181 ops/s
# Warmup Iteration  28: 4544957.423 ops/s
# Warmup Iteration  29: 4526727.038 ops/s
# Warmup Iteration  30: 4528823.918 ops/s
Iteration   1: 4542747.032 ops/s
Iteration   2: 4535946.073 ops/s
Iteration   3: 4545937.845 ops/s
Iteration   4: 4530634.741 ops/s
Iteration   5: 4515074.926 ops/s
Iteration   6: 4533225.190 ops/s
Iteration   7: 4500865.696 ops/s
Iteration   8: 4524665.268 ops/s
Iteration   9: 4526649.221 ops/s
Iteration  10: 4527046.624 ops/s
Iteration  11: 4533555.319 ops/s
Iteration  12: 4530784.972 ops/s
Iteration  13: 4520657.024 ops/s
Iteration  14: 4527420.429 ops/s
Iteration  15: 4551346.357 ops/s
Iteration  16: 4536963.390 ops/s
Iteration  17: 4556396.914 ops/s
Iteration  18: 4555175.945 ops/s
Iteration  19: 4533768.152 ops/s
Iteration  20: 4535443.558 ops/s
Iteration  21: 4548241.260 ops/s
Iteration  22: 4529129.656 ops/s
Iteration  23: 4564942.703 ops/s
Iteration  24: 4542463.622 ops/s
Iteration  25: 4537158.980 ops/s
Iteration  26: 4550066.096 ops/s
Iteration  27: 4517334.762 ops/s
Iteration  28: 4528888.060 ops/s
Iteration  29: 4540870.333 ops/s
Iteration  30: 4514770.922 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withMethods":
  4534605.702 ±(99.9%) 9290.460 ops/s [Average]
  (min, avg, max) = (4500865.696, 4534605.702, 4564942.703), stdev = 13905.525
  CI (99.9%): [4525315.242, 4543896.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_withMethods  thrpt   30  4534605.702 ± 9290.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1939108.145 ops/s
# Warmup Iteration   2: 4568512.791 ops/s
# Warmup Iteration   3: 4559075.262 ops/s
# Warmup Iteration   4: 3800288.737 ops/s
# Warmup Iteration   5: 4559300.901 ops/s
# Warmup Iteration   6: 4571207.576 ops/s
# Warmup Iteration   7: 4573159.338 ops/s
# Warmup Iteration   8: 4566203.296 ops/s
# Warmup Iteration   9: 4559107.050 ops/s
# Warmup Iteration  10: 4565319.245 ops/s
# Warmup Iteration  11: 4561813.358 ops/s
# Warmup Iteration  12: 4565012.377 ops/s
# Warmup Iteration  13: 4572612.887 ops/s
# Warmup Iteration  14: 4528890.146 ops/s
# Warmup Iteration  15: 4569455.806 ops/s
# Warmup Iteration  16: 4569792.650 ops/s
# Warmup Iteration  17: 4567988.443 ops/s
# Warmup Iteration  18: 4562238.106 ops/s
# Warmup Iteration  19: 4565688.128 ops/s
# Warmup Iteration  20: 4575119.586 ops/s
# Warmup Iteration  21: 4563623.774 ops/s
# Warmup Iteration  22: 4556639.122 ops/s
# Warmup Iteration  23: 4565632.002 ops/s
# Warmup Iteration  24: 4561890.047 ops/s
# Warmup Iteration  25: 4568580.951 ops/s
# Warmup Iteration  26: 4569095.070 ops/s
# Warmup Iteration  27: 4565057.053 ops/s
# Warmup Iteration  28: 4568452.606 ops/s
# Warmup Iteration  29: 4577673.459 ops/s
# Warmup Iteration  30: 4567939.774 ops/s
Iteration   1: 4572980.469 ops/s
Iteration   2: 4557118.749 ops/s
Iteration   3: 4571803.503 ops/s
Iteration   4: 4559828.737 ops/s
Iteration   5: 4580689.945 ops/s
Iteration   6: 4549274.418 ops/s
Iteration   7: 4583722.815 ops/s
Iteration   8: 4577267.744 ops/s
Iteration   9: 4564276.730 ops/s
Iteration  10: 4567800.351 ops/s
Iteration  11: 4574114.854 ops/s
Iteration  12: 4563251.781 ops/s
Iteration  13: 4565497.679 ops/s
Iteration  14: 4586434.545 ops/s
Iteration  15: 4569208.852 ops/s
Iteration  16: 4555113.881 ops/s
Iteration  17: 4579206.486 ops/s
Iteration  18: 4565828.339 ops/s
Iteration  19: 4559534.347 ops/s
Iteration  20: 4560475.813 ops/s
Iteration  21: 4567793.675 ops/s
Iteration  22: 4571060.282 ops/s
Iteration  23: 4568197.500 ops/s
Iteration  24: 4559014.938 ops/s
Iteration  25: 4553394.972 ops/s
Iteration  26: 4574089.945 ops/s
Iteration  27: 4581233.238 ops/s
Iteration  28: 4570014.668 ops/s
Iteration  29: 4569210.270 ops/s
Iteration  30: 4571623.321 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_without":
  4568302.095 ±(99.9%) 6136.987 ops/s [Average]
  (min, avg, max) = (4549274.418, 4568302.095, 4586434.545), stdev = 9185.554
  CI (99.9%): [4562165.108, 4574439.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_without  thrpt   30  4568302.095 ± 6136.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1345773.751 ops/s
# Warmup Iteration   2: 2969262.903 ops/s
# Warmup Iteration   3: 3034448.650 ops/s
# Warmup Iteration   4: 3049564.926 ops/s
# Warmup Iteration   5: 2530840.952 ops/s
# Warmup Iteration   6: 3055730.039 ops/s
# Warmup Iteration   7: 3057437.628 ops/s
# Warmup Iteration   8: 3065028.255 ops/s
# Warmup Iteration   9: 3062337.805 ops/s
# Warmup Iteration  10: 3063471.071 ops/s
# Warmup Iteration  11: 3060886.758 ops/s
# Warmup Iteration  12: 3054286.404 ops/s
# Warmup Iteration  13: 3048507.724 ops/s
# Warmup Iteration  14: 3053267.809 ops/s
# Warmup Iteration  15: 3059476.368 ops/s
# Warmup Iteration  16: 3066114.203 ops/s
# Warmup Iteration  17: 3061373.489 ops/s
# Warmup Iteration  18: 3065114.120 ops/s
# Warmup Iteration  19: 3062930.935 ops/s
# Warmup Iteration  20: 3061134.558 ops/s
# Warmup Iteration  21: 3063250.456 ops/s
# Warmup Iteration  22: 3062881.022 ops/s
# Warmup Iteration  23: 3060397.446 ops/s
# Warmup Iteration  24: 3056376.927 ops/s
# Warmup Iteration  25: 3059306.720 ops/s
# Warmup Iteration  26: 3052480.054 ops/s
# Warmup Iteration  27: 3066787.635 ops/s
# Warmup Iteration  28: 3061970.556 ops/s
# Warmup Iteration  29: 3055184.990 ops/s
# Warmup Iteration  30: 3057010.034 ops/s
Iteration   1: 3067417.876 ops/s
Iteration   2: 3059692.581 ops/s
Iteration   3: 3058938.238 ops/s
Iteration   4: 3053069.643 ops/s
Iteration   5: 3060096.605 ops/s
Iteration   6: 3058201.786 ops/s
Iteration   7: 3060423.617 ops/s
Iteration   8: 3052678.252 ops/s
Iteration   9: 3050858.498 ops/s
Iteration  10: 3057220.738 ops/s
Iteration  11: 3063620.134 ops/s
Iteration  12: 3054276.918 ops/s
Iteration  13: 3055024.170 ops/s
Iteration  14: 3059340.509 ops/s
Iteration  15: 3061644.372 ops/s
Iteration  16: 3065668.650 ops/s
Iteration  17: 3056181.097 ops/s
Iteration  18: 3053432.720 ops/s
Iteration  19: 3061216.050 ops/s
Iteration  20: 3062099.931 ops/s
Iteration  21: 3053612.473 ops/s
Iteration  22: 3061659.960 ops/s
Iteration  23: 3061212.986 ops/s
Iteration  24: 3063435.716 ops/s
Iteration  25: 3060754.765 ops/s
Iteration  26: 3070554.383 ops/s
Iteration  27: 3060018.895 ops/s
Iteration  28: 3055462.760 ops/s
Iteration  29: 3054297.118 ops/s
Iteration  30: 3046427.592 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_withoutAll":
  3058617.968 ±(99.9%) 3444.702 ops/s [Average]
  (min, avg, max) = (3046427.592, 3058617.968, 3070554.383), stdev = 5155.868
  CI (99.9%): [3055173.266, 3062062.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_withoutAll  thrpt   30  3058617.968 ± 3444.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143387.250 ops/s
# Warmup Iteration   2: 162756.526 ops/s
# Warmup Iteration   3: 199126.477 ops/s
# Warmup Iteration   4: 213464.338 ops/s
# Warmup Iteration   5: 214868.137 ops/s
# Warmup Iteration   6: 215050.333 ops/s
# Warmup Iteration   7: 215281.323 ops/s
# Warmup Iteration   8: 214685.612 ops/s
# Warmup Iteration   9: 214888.910 ops/s
# Warmup Iteration  10: 215118.344 ops/s
# Warmup Iteration  11: 214640.843 ops/s
# Warmup Iteration  12: 214899.602 ops/s
# Warmup Iteration  13: 177811.401 ops/s
# Warmup Iteration  14: 215043.898 ops/s
# Warmup Iteration  15: 215168.353 ops/s
# Warmup Iteration  16: 214686.114 ops/s
# Warmup Iteration  17: 215023.101 ops/s
# Warmup Iteration  18: 214740.825 ops/s
# Warmup Iteration  19: 215140.131 ops/s
# Warmup Iteration  20: 215121.699 ops/s
# Warmup Iteration  21: 215147.368 ops/s
# Warmup Iteration  22: 215131.127 ops/s
# Warmup Iteration  23: 215550.087 ops/s
# Warmup Iteration  24: 215139.707 ops/s
# Warmup Iteration  25: 214805.595 ops/s
# Warmup Iteration  26: 214967.028 ops/s
# Warmup Iteration  27: 215163.142 ops/s
# Warmup Iteration  28: 215330.987 ops/s
# Warmup Iteration  29: 214889.893 ops/s
# Warmup Iteration  30: 215278.601 ops/s
Iteration   1: 215147.645 ops/s
Iteration   2: 214558.908 ops/s
Iteration   3: 215867.705 ops/s
Iteration   4: 215270.025 ops/s
Iteration   5: 215196.140 ops/s
Iteration   6: 215028.128 ops/s
Iteration   7: 215378.885 ops/s
Iteration   8: 215024.281 ops/s
Iteration   9: 215310.298 ops/s
Iteration  10: 215459.192 ops/s
Iteration  11: 214924.825 ops/s
Iteration  12: 215972.460 ops/s
Iteration  13: 215265.299 ops/s
Iteration  14: 215544.962 ops/s
Iteration  15: 215468.682 ops/s
Iteration  16: 214484.353 ops/s
Iteration  17: 214870.155 ops/s
Iteration  18: 215224.494 ops/s
Iteration  19: 215504.450 ops/s
Iteration  20: 214509.472 ops/s
Iteration  21: 215840.261 ops/s
Iteration  22: 214234.453 ops/s
Iteration  23: 215512.310 ops/s
Iteration  24: 214243.079 ops/s
Iteration  25: 215460.544 ops/s
Iteration  26: 215169.311 ops/s
Iteration  27: 215372.968 ops/s
Iteration  28: 215098.646 ops/s
Iteration  29: 214513.938 ops/s
Iteration  30: 214848.584 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zip":
  215143.482 ±(99.9%) 305.362 ops/s [Average]
  (min, avg, max) = (214234.453, 215143.482, 215972.460), stdev = 457.052
  CI (99.9%): [214838.120, 215448.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
CompositeFastListTest._Benchmark.benchmark_zip  thrpt   30  215143.482 ± 305.362  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331543.293 ops/s
# Warmup Iteration   2: 488289.781 ops/s
# Warmup Iteration   3: 603422.133 ops/s
# Warmup Iteration   4: 602032.741 ops/s
# Warmup Iteration   5: 602299.150 ops/s
# Warmup Iteration   6: 604642.395 ops/s
# Warmup Iteration   7: 538710.399 ops/s
# Warmup Iteration   8: 568605.041 ops/s
# Warmup Iteration   9: 604622.773 ops/s
# Warmup Iteration  10: 602774.897 ops/s
# Warmup Iteration  11: 606207.345 ops/s
# Warmup Iteration  12: 604189.117 ops/s
# Warmup Iteration  13: 604255.038 ops/s
# Warmup Iteration  14: 604848.163 ops/s
# Warmup Iteration  15: 604562.718 ops/s
# Warmup Iteration  16: 605388.548 ops/s
# Warmup Iteration  17: 604740.413 ops/s
# Warmup Iteration  18: 603577.007 ops/s
# Warmup Iteration  19: 607560.793 ops/s
# Warmup Iteration  20: 606402.127 ops/s
# Warmup Iteration  21: 607334.199 ops/s
# Warmup Iteration  22: 603014.180 ops/s
# Warmup Iteration  23: 603010.549 ops/s
# Warmup Iteration  24: 601655.396 ops/s
# Warmup Iteration  25: 603777.681 ops/s
# Warmup Iteration  26: 604869.439 ops/s
# Warmup Iteration  27: 603842.994 ops/s
# Warmup Iteration  28: 604224.249 ops/s
# Warmup Iteration  29: 603139.098 ops/s
# Warmup Iteration  30: 605132.424 ops/s
Iteration   1: 604239.705 ops/s
Iteration   2: 605247.661 ops/s
Iteration   3: 602950.373 ops/s
Iteration   4: 603581.533 ops/s
Iteration   5: 604841.432 ops/s
Iteration   6: 604455.237 ops/s
Iteration   7: 606570.054 ops/s
Iteration   8: 603871.399 ops/s
Iteration   9: 605385.937 ops/s
Iteration  10: 601238.010 ops/s
Iteration  11: 603337.070 ops/s
Iteration  12: 604335.740 ops/s
Iteration  13: 608181.784 ops/s
Iteration  14: 605756.806 ops/s
Iteration  15: 601775.651 ops/s
Iteration  16: 603603.418 ops/s
Iteration  17: 603060.303 ops/s
Iteration  18: 603717.489 ops/s
Iteration  19: 604525.588 ops/s
Iteration  20: 599911.902 ops/s
Iteration  21: 604427.035 ops/s
Iteration  22: 603646.098 ops/s
Iteration  23: 606023.874 ops/s
Iteration  24: 605276.770 ops/s
Iteration  25: 604595.920 ops/s
Iteration  26: 601775.505 ops/s
Iteration  27: 602947.366 ops/s
Iteration  28: 604749.022 ops/s
Iteration  29: 604318.254 ops/s
Iteration  30: 603825.626 ops/s


Result "org.eclipse.collections.impl.list.mutable.CompositeFastListTest._Benchmark.benchmark_zipWithIndex":
  604072.419 ±(99.9%) 1089.663 ops/s [Average]
  (min, avg, max) = (599911.902, 604072.419, 608181.784), stdev = 1630.957
  CI (99.9%): [602982.755, 605162.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
CompositeFastListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  604072.419 ± 1089.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 719511.158 ops/s
# Warmup Iteration   2: 783997.676 ops/s
# Warmup Iteration   3: 1013696.674 ops/s
# Warmup Iteration   4: 1018282.084 ops/s
# Warmup Iteration   5: 1017504.069 ops/s
# Warmup Iteration   6: 1018293.130 ops/s
# Warmup Iteration   7: 1018814.665 ops/s
# Warmup Iteration   8: 1020400.034 ops/s
# Warmup Iteration   9: 1018585.057 ops/s
# Warmup Iteration  10: 1019480.811 ops/s
# Warmup Iteration  11: 867650.709 ops/s
# Warmup Iteration  12: 1019553.966 ops/s
# Warmup Iteration  13: 1019703.303 ops/s
# Warmup Iteration  14: 1023062.299 ops/s
# Warmup Iteration  15: 1024663.339 ops/s
# Warmup Iteration  16: 1020391.968 ops/s
# Warmup Iteration  17: 1081162.923 ops/s
# Warmup Iteration  18: 1082948.061 ops/s
# Warmup Iteration  19: 1081432.557 ops/s
# Warmup Iteration  20: 1080564.327 ops/s
# Warmup Iteration  21: 1081251.380 ops/s
# Warmup Iteration  22: 1087156.036 ops/s
# Warmup Iteration  23: 1080566.347 ops/s
# Warmup Iteration  24: 1080632.950 ops/s
# Warmup Iteration  25: 1080615.083 ops/s
# Warmup Iteration  26: 1079162.685 ops/s
# Warmup Iteration  27: 1082262.963 ops/s
# Warmup Iteration  28: 1080711.060 ops/s
# Warmup Iteration  29: 1082189.748 ops/s
# Warmup Iteration  30: 1080771.229 ops/s
Iteration   1: 1083219.892 ops/s
Iteration   2: 1080200.982 ops/s
Iteration   3: 1080489.588 ops/s
Iteration   4: 1082729.970 ops/s
Iteration   5: 1079346.105 ops/s
Iteration   6: 1079027.311 ops/s
Iteration   7: 1083973.521 ops/s
Iteration   8: 1082161.172 ops/s
Iteration   9: 1080377.477 ops/s
Iteration  10: 1082125.759 ops/s
Iteration  11: 1081045.223 ops/s
Iteration  12: 1077532.225 ops/s
Iteration  13: 1081098.490 ops/s
Iteration  14: 1078546.430 ops/s
Iteration  15: 1078151.822 ops/s
Iteration  16: 1081520.131 ops/s
Iteration  17: 1081272.845 ops/s
Iteration  18: 1079604.893 ops/s
Iteration  19: 1082131.299 ops/s
Iteration  20: 1081537.751 ops/s
Iteration  21: 1078369.458 ops/s
Iteration  22: 1080963.845 ops/s
Iteration  23: 1083868.705 ops/s
Iteration  24: 1084472.446 ops/s
Iteration  25: 1081788.065 ops/s
Iteration  26: 1078765.391 ops/s
Iteration  27: 1084576.033 ops/s
Iteration  28: 1079919.214 ops/s
Iteration  29: 1075960.673 ops/s
Iteration  30: 1081509.792 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_add":
  1080876.217 ±(99.9%) 1410.724 ops/s [Average]
  (min, avg, max) = (1075960.673, 1080876.217, 1084576.033), stdev = 2111.506
  CI (99.9%): [1079465.493, 1082286.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  1080876.217 ± 1410.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701492.631 ops/s
# Warmup Iteration   2: 761153.902 ops/s
# Warmup Iteration   3: 1006575.254 ops/s
# Warmup Iteration   4: 1002628.420 ops/s
# Warmup Iteration   5: 998732.312 ops/s
# Warmup Iteration   6: 1004426.505 ops/s
# Warmup Iteration   7: 999048.429 ops/s
# Warmup Iteration   8: 1004390.958 ops/s
# Warmup Iteration   9: 1005388.463 ops/s
# Warmup Iteration  10: 1002059.680 ops/s
# Warmup Iteration  11: 845448.361 ops/s
# Warmup Iteration  12: 1006715.031 ops/s
# Warmup Iteration  13: 1005097.399 ops/s
# Warmup Iteration  14: 1003255.736 ops/s
# Warmup Iteration  15: 1005550.035 ops/s
# Warmup Iteration  16: 1007125.746 ops/s
# Warmup Iteration  17: 1059658.785 ops/s
# Warmup Iteration  18: 1063277.350 ops/s
# Warmup Iteration  19: 1061418.885 ops/s
# Warmup Iteration  20: 1061515.345 ops/s
# Warmup Iteration  21: 1059261.163 ops/s
# Warmup Iteration  22: 1057897.691 ops/s
# Warmup Iteration  23: 1059366.682 ops/s
# Warmup Iteration  24: 1064541.866 ops/s
# Warmup Iteration  25: 1061990.856 ops/s
# Warmup Iteration  26: 1060683.777 ops/s
# Warmup Iteration  27: 1065321.399 ops/s
# Warmup Iteration  28: 1061633.850 ops/s
# Warmup Iteration  29: 1061784.578 ops/s
# Warmup Iteration  30: 1061828.398 ops/s
Iteration   1: 1061221.288 ops/s
Iteration   2: 1063042.253 ops/s
Iteration   3: 1058750.470 ops/s
Iteration   4: 1061122.031 ops/s
Iteration   5: 1061916.604 ops/s
Iteration   6: 1061835.041 ops/s
Iteration   7: 1058998.751 ops/s
Iteration   8: 1065063.067 ops/s
Iteration   9: 1060244.172 ops/s
Iteration  10: 1064753.335 ops/s
Iteration  11: 1066600.999 ops/s
Iteration  12: 1058323.349 ops/s
Iteration  13: 1060754.938 ops/s
Iteration  14: 1064473.432 ops/s
Iteration  15: 1062345.310 ops/s
Iteration  16: 1062587.059 ops/s
Iteration  17: 1059300.432 ops/s
Iteration  18: 1061271.326 ops/s
Iteration  19: 1058279.665 ops/s
Iteration  20: 1056473.864 ops/s
Iteration  21: 1065314.714 ops/s
Iteration  22: 1062944.726 ops/s
Iteration  23: 1059517.439 ops/s
Iteration  24: 1060070.203 ops/s
Iteration  25: 1061171.125 ops/s
Iteration  26: 1056678.791 ops/s
Iteration  27: 1057814.736 ops/s
Iteration  28: 1062648.723 ops/s
Iteration  29: 1064411.995 ops/s
Iteration  30: 1064731.867 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAll":
  1061422.057 ±(99.9%) 1793.998 ops/s [Average]
  (min, avg, max) = (1056473.864, 1061422.057, 1066600.999), stdev = 2685.172
  CI (99.9%): [1059628.059, 1063216.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  1061422.057 ± 1793.998  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706764.957 ops/s
# Warmup Iteration   2: 768264.876 ops/s
# Warmup Iteration   3: 998667.436 ops/s
# Warmup Iteration   4: 996919.145 ops/s
# Warmup Iteration   5: 995948.871 ops/s
# Warmup Iteration   6: 998404.590 ops/s
# Warmup Iteration   7: 995565.833 ops/s
# Warmup Iteration   8: 995672.712 ops/s
# Warmup Iteration   9: 998344.790 ops/s
# Warmup Iteration  10: 999891.271 ops/s
# Warmup Iteration  11: 840277.041 ops/s
# Warmup Iteration  12: 998188.362 ops/s
# Warmup Iteration  13: 997581.476 ops/s
# Warmup Iteration  14: 997567.802 ops/s
# Warmup Iteration  15: 999028.887 ops/s
# Warmup Iteration  16: 995676.599 ops/s
# Warmup Iteration  17: 1060266.769 ops/s
# Warmup Iteration  18: 1055648.252 ops/s
# Warmup Iteration  19: 1058013.260 ops/s
# Warmup Iteration  20: 1059500.355 ops/s
# Warmup Iteration  21: 1057785.159 ops/s
# Warmup Iteration  22: 1060197.190 ops/s
# Warmup Iteration  23: 1060890.773 ops/s
# Warmup Iteration  24: 1060479.929 ops/s
# Warmup Iteration  25: 1059856.405 ops/s
# Warmup Iteration  26: 1059265.623 ops/s
# Warmup Iteration  27: 1060001.528 ops/s
# Warmup Iteration  28: 1061491.544 ops/s
# Warmup Iteration  29: 1063456.515 ops/s
# Warmup Iteration  30: 1063049.272 ops/s
Iteration   1: 1060738.373 ops/s
Iteration   2: 1059491.001 ops/s
Iteration   3: 1062835.515 ops/s
Iteration   4: 1056572.500 ops/s
Iteration   5: 1057865.273 ops/s
Iteration   6: 1057806.296 ops/s
Iteration   7: 1062488.897 ops/s
Iteration   8: 1063716.527 ops/s
Iteration   9: 1050855.357 ops/s
Iteration  10: 1060092.290 ops/s
Iteration  11: 1057656.252 ops/s
Iteration  12: 1063581.035 ops/s
Iteration  13: 1060028.228 ops/s
Iteration  14: 1057170.784 ops/s
Iteration  15: 1060352.276 ops/s
Iteration  16: 1059909.767 ops/s
Iteration  17: 1060401.131 ops/s
Iteration  18: 1062839.565 ops/s
Iteration  19: 1059901.932 ops/s
Iteration  20: 1055939.853 ops/s
Iteration  21: 1062830.920 ops/s
Iteration  22: 1058383.866 ops/s
Iteration  23: 1064405.419 ops/s
Iteration  24: 1054643.286 ops/s
Iteration  25: 1055366.238 ops/s
Iteration  26: 1062196.399 ops/s
Iteration  27: 1060473.751 ops/s
Iteration  28: 1063055.238 ops/s
Iteration  29: 1059698.141 ops/s
Iteration  30: 1060717.766 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex":
  1059733.796 ±(99.9%) 2067.982 ops/s [Average]
  (min, avg, max) = (1050855.357, 1059733.796, 1064405.419), stdev = 3095.258
  CI (99.9%): [1057665.814, 1061801.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1059733.796 ± 2067.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711893.859 ops/s
# Warmup Iteration   2: 785277.026 ops/s
# Warmup Iteration   3: 1013112.955 ops/s
# Warmup Iteration   4: 1017375.820 ops/s
# Warmup Iteration   5: 1016915.356 ops/s
# Warmup Iteration   6: 1014470.113 ops/s
# Warmup Iteration   7: 1016599.087 ops/s
# Warmup Iteration   8: 1012789.279 ops/s
# Warmup Iteration   9: 1017613.647 ops/s
# Warmup Iteration  10: 1002199.274 ops/s
# Warmup Iteration  11: 879010.275 ops/s
# Warmup Iteration  12: 1015464.806 ops/s
# Warmup Iteration  13: 1014051.474 ops/s
# Warmup Iteration  14: 1014980.286 ops/s
# Warmup Iteration  15: 1012303.735 ops/s
# Warmup Iteration  16: 1013712.489 ops/s
# Warmup Iteration  17: 1076471.624 ops/s
# Warmup Iteration  18: 1076407.443 ops/s
# Warmup Iteration  19: 1079471.018 ops/s
# Warmup Iteration  20: 1074192.224 ops/s
# Warmup Iteration  21: 1080779.330 ops/s
# Warmup Iteration  22: 1077136.747 ops/s
# Warmup Iteration  23: 1076084.142 ops/s
# Warmup Iteration  24: 1080753.449 ops/s
# Warmup Iteration  25: 1074501.330 ops/s
# Warmup Iteration  26: 1068659.707 ops/s
# Warmup Iteration  27: 1076065.894 ops/s
# Warmup Iteration  28: 1076778.758 ops/s
# Warmup Iteration  29: 1078964.916 ops/s
# Warmup Iteration  30: 1079032.340 ops/s
Iteration   1: 1073776.917 ops/s
Iteration   2: 1081117.355 ops/s
Iteration   3: 1081337.502 ops/s
Iteration   4: 1079103.600 ops/s
Iteration   5: 1079013.584 ops/s
Iteration   6: 1076240.575 ops/s
Iteration   7: 1076798.773 ops/s
Iteration   8: 1075805.624 ops/s
Iteration   9: 1067739.516 ops/s
Iteration  10: 1071078.362 ops/s
Iteration  11: 1072691.984 ops/s
Iteration  12: 1078714.695 ops/s
Iteration  13: 1074945.437 ops/s
Iteration  14: 1080667.252 ops/s
Iteration  15: 1078954.859 ops/s
Iteration  16: 1079946.776 ops/s
Iteration  17: 1073838.351 ops/s
Iteration  18: 1077640.261 ops/s
Iteration  19: 1077374.701 ops/s
Iteration  20: 1074478.103 ops/s
Iteration  21: 1074230.545 ops/s
Iteration  22: 1073417.426 ops/s
Iteration  23: 1078433.205 ops/s
Iteration  24: 1075306.729 ops/s
Iteration  25: 1077351.152 ops/s
Iteration  26: 1078866.196 ops/s
Iteration  27: 1080308.046 ops/s
Iteration  28: 1076086.124 ops/s
Iteration  29: 1072608.327 ops/s
Iteration  30: 1074673.159 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  1076418.171 ±(99.9%) 2154.015 ops/s [Average]
  (min, avg, max) = (1067739.516, 1076418.171, 1081337.502), stdev = 3224.029
  CI (99.9%): [1074264.156, 1078572.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1076418.171 ± 2154.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704807.050 ops/s
# Warmup Iteration   2: 763354.231 ops/s
# Warmup Iteration   3: 981056.611 ops/s
# Warmup Iteration   4: 979953.450 ops/s
# Warmup Iteration   5: 979972.629 ops/s
# Warmup Iteration   6: 981249.349 ops/s
# Warmup Iteration   7: 982389.657 ops/s
# Warmup Iteration   8: 982537.502 ops/s
# Warmup Iteration   9: 979939.473 ops/s
# Warmup Iteration  10: 980612.084 ops/s
# Warmup Iteration  11: 883377.350 ops/s
# Warmup Iteration  12: 933591.213 ops/s
# Warmup Iteration  13: 982605.295 ops/s
# Warmup Iteration  14: 985204.388 ops/s
# Warmup Iteration  15: 984312.524 ops/s
# Warmup Iteration  16: 980907.617 ops/s
# Warmup Iteration  17: 1042292.838 ops/s
# Warmup Iteration  18: 1045324.455 ops/s
# Warmup Iteration  19: 1045974.683 ops/s
# Warmup Iteration  20: 1040689.762 ops/s
# Warmup Iteration  21: 1043552.752 ops/s
# Warmup Iteration  22: 1041332.283 ops/s
# Warmup Iteration  23: 1044575.406 ops/s
# Warmup Iteration  24: 1043169.000 ops/s
# Warmup Iteration  25: 1044247.089 ops/s
# Warmup Iteration  26: 1043655.822 ops/s
# Warmup Iteration  27: 1041538.991 ops/s
# Warmup Iteration  28: 1040662.530 ops/s
# Warmup Iteration  29: 1041959.614 ops/s
# Warmup Iteration  30: 1042564.683 ops/s
Iteration   1: 1031526.737 ops/s
Iteration   2: 1041392.665 ops/s
Iteration   3: 1045374.517 ops/s
Iteration   4: 1041524.193 ops/s
Iteration   5: 1041370.858 ops/s
Iteration   6: 1045566.511 ops/s
Iteration   7: 1043372.586 ops/s
Iteration   8: 1040584.890 ops/s
Iteration   9: 1043392.375 ops/s
Iteration  10: 1046002.903 ops/s
Iteration  11: 1036008.204 ops/s
Iteration  12: 1045479.993 ops/s
Iteration  13: 1039809.644 ops/s
Iteration  14: 1045892.313 ops/s
Iteration  15: 1046663.456 ops/s
Iteration  16: 1045828.630 ops/s
Iteration  17: 1041421.333 ops/s
Iteration  18: 1044149.476 ops/s
Iteration  19: 1043750.840 ops/s
Iteration  20: 1042402.411 ops/s
Iteration  21: 1048795.030 ops/s
Iteration  22: 1040054.121 ops/s
Iteration  23: 1040065.496 ops/s
Iteration  24: 1040606.196 ops/s
Iteration  25: 1038174.322 ops/s
Iteration  26: 1042797.711 ops/s
Iteration  27: 1040104.667 ops/s
Iteration  28: 1042331.480 ops/s
Iteration  29: 1043122.722 ops/s
Iteration  30: 1044632.398 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex":
  1042406.623 ±(99.9%) 2311.192 ops/s [Average]
  (min, avg, max) = (1031526.737, 1042406.623, 1048795.030), stdev = 3459.283
  CI (99.9%): [1040095.431, 1044717.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_addAtIndex  thrpt   30  1042406.623 ± 2311.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715102.123 ops/s
# Warmup Iteration   2: 780449.983 ops/s
# Warmup Iteration   3: 1029216.556 ops/s
# Warmup Iteration   4: 1025575.958 ops/s
# Warmup Iteration   5: 1020624.364 ops/s
# Warmup Iteration   6: 1026294.640 ops/s
# Warmup Iteration   7: 1029679.267 ops/s
# Warmup Iteration   8: 1027431.558 ops/s
# Warmup Iteration   9: 1026110.040 ops/s
# Warmup Iteration  10: 1026524.510 ops/s
# Warmup Iteration  11: 866586.633 ops/s
# Warmup Iteration  12: 1025003.341 ops/s
# Warmup Iteration  13: 1025542.253 ops/s
# Warmup Iteration  14: 1026555.727 ops/s
# Warmup Iteration  15: 1023968.659 ops/s
# Warmup Iteration  16: 1026427.367 ops/s
# Warmup Iteration  17: 1082960.969 ops/s
# Warmup Iteration  18: 1085129.190 ops/s
# Warmup Iteration  19: 1087079.531 ops/s
# Warmup Iteration  20: 1081996.603 ops/s
# Warmup Iteration  21: 1082389.648 ops/s
# Warmup Iteration  22: 1083110.521 ops/s
# Warmup Iteration  23: 1083319.550 ops/s
# Warmup Iteration  24: 1087689.588 ops/s
# Warmup Iteration  25: 1080043.595 ops/s
# Warmup Iteration  26: 1083993.373 ops/s
# Warmup Iteration  27: 1086061.514 ops/s
# Warmup Iteration  28: 1083350.217 ops/s
# Warmup Iteration  29: 1084985.906 ops/s
# Warmup Iteration  30: 1083496.106 ops/s
Iteration   1: 1082759.053 ops/s
Iteration   2: 1087612.500 ops/s
Iteration   3: 1085433.821 ops/s
Iteration   4: 1079256.943 ops/s
Iteration   5: 1084041.244 ops/s
Iteration   6: 1083771.725 ops/s
Iteration   7: 1083837.245 ops/s
Iteration   8: 1081064.539 ops/s
Iteration   9: 1085052.413 ops/s
Iteration  10: 1082671.249 ops/s
Iteration  11: 1081359.715 ops/s
Iteration  12: 1083581.794 ops/s
Iteration  13: 1084745.485 ops/s
Iteration  14: 1079322.071 ops/s
Iteration  15: 1088762.380 ops/s
Iteration  16: 1086887.587 ops/s
Iteration  17: 1087968.710 ops/s
Iteration  18: 1084074.499 ops/s
Iteration  19: 1084256.534 ops/s
Iteration  20: 1084375.365 ops/s
Iteration  21: 1086511.881 ops/s
Iteration  22: 1083470.230 ops/s
Iteration  23: 1080681.228 ops/s
Iteration  24: 1087551.878 ops/s
Iteration  25: 1082198.595 ops/s
Iteration  26: 1080324.006 ops/s
Iteration  27: 1079793.610 ops/s
Iteration  28: 1083553.341 ops/s
Iteration  29: 1087593.286 ops/s
Iteration  30: 1083053.903 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_clear":
  1083852.228 ±(99.9%) 1777.656 ops/s [Average]
  (min, avg, max) = (1079256.943, 1083852.228, 1088762.380), stdev = 2660.712
  CI (99.9%): [1082074.572, 1085629.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  1083852.228 ± 1777.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3671432.109 ops/s
# Warmup Iteration   2: 12331557.743 ops/s
# Warmup Iteration   3: 10144417.718 ops/s
# Warmup Iteration   4: 12371655.433 ops/s
# Warmup Iteration   5: 12380984.075 ops/s
# Warmup Iteration   6: 12372959.655 ops/s
# Warmup Iteration   7: 12398427.905 ops/s
# Warmup Iteration   8: 12365400.362 ops/s
# Warmup Iteration   9: 12349595.719 ops/s
# Warmup Iteration  10: 12368338.490 ops/s
# Warmup Iteration  11: 12210002.747 ops/s
# Warmup Iteration  12: 12321981.666 ops/s
# Warmup Iteration  13: 12357056.473 ops/s
# Warmup Iteration  14: 12382209.875 ops/s
# Warmup Iteration  15: 12431093.198 ops/s
# Warmup Iteration  16: 12350606.183 ops/s
# Warmup Iteration  17: 12363000.846 ops/s
# Warmup Iteration  18: 12373607.038 ops/s
# Warmup Iteration  19: 12378986.137 ops/s
# Warmup Iteration  20: 12397432.201 ops/s
# Warmup Iteration  21: 12376440.362 ops/s
# Warmup Iteration  22: 12365835.456 ops/s
# Warmup Iteration  23: 12371688.265 ops/s
# Warmup Iteration  24: 12339802.322 ops/s
# Warmup Iteration  25: 12375546.511 ops/s
# Warmup Iteration  26: 12340819.205 ops/s
# Warmup Iteration  27: 12387475.332 ops/s
# Warmup Iteration  28: 12346992.414 ops/s
# Warmup Iteration  29: 12360939.275 ops/s
# Warmup Iteration  30: 12399644.401 ops/s
Iteration   1: 12388429.082 ops/s
Iteration   2: 12371346.303 ops/s
Iteration   3: 12390887.518 ops/s
Iteration   4: 12404021.990 ops/s
Iteration   5: 12424238.505 ops/s
Iteration   6: 12414683.957 ops/s
Iteration   7: 12359325.836 ops/s
Iteration   8: 12419057.828 ops/s
Iteration   9: 12408586.373 ops/s
Iteration  10: 12404087.276 ops/s
Iteration  11: 12421131.601 ops/s
Iteration  12: 12347409.490 ops/s
Iteration  13: 12409897.264 ops/s
Iteration  14: 12377877.376 ops/s
Iteration  15: 12385654.301 ops/s
Iteration  16: 12411704.259 ops/s
Iteration  17: 12430701.951 ops/s
Iteration  18: 12362748.429 ops/s
Iteration  19: 12375943.284 ops/s
Iteration  20: 12437776.386 ops/s
Iteration  21: 12364776.293 ops/s
Iteration  22: 12379906.097 ops/s
Iteration  23: 12388630.497 ops/s
Iteration  24: 12446569.998 ops/s
Iteration  25: 12352795.860 ops/s
Iteration  26: 12396643.034 ops/s
Iteration  27: 12406003.055 ops/s
Iteration  28: 12388214.277 ops/s
Iteration  29: 12331642.599 ops/s
Iteration  30: 12424095.893 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collect":
  12394159.554 ±(99.9%) 18828.041 ops/s [Average]
  (min, avg, max) = (12331642.599, 12394159.554, 12446569.998), stdev = 28180.928
  CI (99.9%): [12375331.512, 12412987.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  12394159.554 ± 18828.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8482621.408 ops/s
# Warmup Iteration   2: 17362278.399 ops/s
# Warmup Iteration   3: 18652572.444 ops/s
# Warmup Iteration   4: 19692963.430 ops/s
# Warmup Iteration   5: 19623283.066 ops/s
# Warmup Iteration   6: 19648092.704 ops/s
# Warmup Iteration   7: 19668922.332 ops/s
# Warmup Iteration   8: 19704719.074 ops/s
# Warmup Iteration   9: 19601642.787 ops/s
# Warmup Iteration  10: 19653834.483 ops/s
# Warmup Iteration  11: 19657944.688 ops/s
# Warmup Iteration  12: 19644193.028 ops/s
# Warmup Iteration  13: 19613350.756 ops/s
# Warmup Iteration  14: 19574709.960 ops/s
# Warmup Iteration  15: 19515536.681 ops/s
# Warmup Iteration  16: 19606326.451 ops/s
# Warmup Iteration  17: 19603519.727 ops/s
# Warmup Iteration  18: 19685536.256 ops/s
# Warmup Iteration  19: 19651634.069 ops/s
# Warmup Iteration  20: 19675594.084 ops/s
# Warmup Iteration  21: 19674838.772 ops/s
# Warmup Iteration  22: 19710255.798 ops/s
# Warmup Iteration  23: 19728933.685 ops/s
# Warmup Iteration  24: 19579781.456 ops/s
# Warmup Iteration  25: 19579418.048 ops/s
# Warmup Iteration  26: 19643795.260 ops/s
# Warmup Iteration  27: 19525708.614 ops/s
# Warmup Iteration  28: 19567475.010 ops/s
# Warmup Iteration  29: 19483530.194 ops/s
# Warmup Iteration  30: 19549721.161 ops/s
Iteration   1: 19558465.739 ops/s
Iteration   2: 19510676.683 ops/s
Iteration   3: 19422102.919 ops/s
Iteration   4: 19552651.942 ops/s
Iteration   5: 19545789.797 ops/s
Iteration   6: 19586576.567 ops/s
Iteration   7: 19554233.784 ops/s
Iteration   8: 19417474.245 ops/s
Iteration   9: 19634073.508 ops/s
Iteration  10: 19590958.827 ops/s
Iteration  11: 19546589.625 ops/s
Iteration  12: 19652087.699 ops/s
Iteration  13: 19700581.167 ops/s
Iteration  14: 19603605.764 ops/s
Iteration  15: 19541306.427 ops/s
Iteration  16: 19656737.888 ops/s
Iteration  17: 19525501.441 ops/s
Iteration  18: 19443359.983 ops/s
Iteration  19: 19594132.369 ops/s
Iteration  20: 19706055.940 ops/s
Iteration  21: 19577938.605 ops/s
Iteration  22: 19580567.267 ops/s
Iteration  23: 19639563.936 ops/s
Iteration  24: 19476297.107 ops/s
Iteration  25: 19692849.127 ops/s
Iteration  26: 19673099.698 ops/s
Iteration  27: 19677496.921 ops/s
Iteration  28: 19661452.018 ops/s
Iteration  29: 19685215.878 ops/s
Iteration  30: 19648877.235 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  19588544.004 ±(99.9%) 54685.284 ops/s [Average]
  (min, avg, max) = (19417474.245, 19588544.004, 19706055.940), stdev = 81850.365
  CI (99.9%): [19533858.720, 19643229.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  19588544.004 ± 54685.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6700001.172 ops/s
# Warmup Iteration   2: 16000026.730 ops/s
# Warmup Iteration   3: 13629062.319 ops/s
# Warmup Iteration   4: 16402322.108 ops/s
# Warmup Iteration   5: 16335585.011 ops/s
# Warmup Iteration   6: 16362314.127 ops/s
# Warmup Iteration   7: 16351040.590 ops/s
# Warmup Iteration   8: 16368947.076 ops/s
# Warmup Iteration   9: 16310943.201 ops/s
# Warmup Iteration  10: 16295876.135 ops/s
# Warmup Iteration  11: 16344455.586 ops/s
# Warmup Iteration  12: 16362836.262 ops/s
# Warmup Iteration  13: 16361649.463 ops/s
# Warmup Iteration  14: 16295088.981 ops/s
# Warmup Iteration  15: 16371985.916 ops/s
# Warmup Iteration  16: 16374457.836 ops/s
# Warmup Iteration  17: 16381000.278 ops/s
# Warmup Iteration  18: 16404913.924 ops/s
# Warmup Iteration  19: 16358969.808 ops/s
# Warmup Iteration  20: 16372981.380 ops/s
# Warmup Iteration  21: 16314402.895 ops/s
# Warmup Iteration  22: 16308763.981 ops/s
# Warmup Iteration  23: 16332995.687 ops/s
# Warmup Iteration  24: 16364130.164 ops/s
# Warmup Iteration  25: 16369619.339 ops/s
# Warmup Iteration  26: 16378405.476 ops/s
# Warmup Iteration  27: 16338812.959 ops/s
# Warmup Iteration  28: 16383568.394 ops/s
# Warmup Iteration  29: 16330499.037 ops/s
# Warmup Iteration  30: 16301625.997 ops/s
Iteration   1: 16396786.705 ops/s
Iteration   2: 16375976.647 ops/s
Iteration   3: 16380276.920 ops/s
Iteration   4: 16314508.871 ops/s
Iteration   5: 16388020.599 ops/s
Iteration   6: 16340558.233 ops/s
Iteration   7: 16332799.396 ops/s
Iteration   8: 16388992.441 ops/s
Iteration   9: 16373865.541 ops/s
Iteration  10: 16329196.793 ops/s
Iteration  11: 16324368.362 ops/s
Iteration  12: 16347463.724 ops/s
Iteration  13: 16392040.529 ops/s
Iteration  14: 16381699.682 ops/s
Iteration  15: 16357623.757 ops/s
Iteration  16: 16378784.787 ops/s
Iteration  17: 16353378.059 ops/s
Iteration  18: 16381309.849 ops/s
Iteration  19: 16373092.414 ops/s
Iteration  20: 16332830.672 ops/s
Iteration  21: 16387704.107 ops/s
Iteration  22: 16331294.747 ops/s
Iteration  23: 16317814.470 ops/s
Iteration  24: 16347831.194 ops/s
Iteration  25: 16379203.915 ops/s
Iteration  26: 16375289.081 ops/s
Iteration  27: 16342458.203 ops/s
Iteration  28: 16297072.678 ops/s
Iteration  29: 16359807.334 ops/s
Iteration  30: 16377117.205 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  16358638.897 ±(99.9%) 18102.866 ops/s [Average]
  (min, avg, max) = (16297072.678, 16358638.897, 16396786.705), stdev = 27095.520
  CI (99.9%): [16340536.031, 16376741.763] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  16358638.897 ± 18102.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6785852.550 ops/s
# Warmup Iteration   2: 16092662.558 ops/s
# Warmup Iteration   3: 13267915.132 ops/s
# Warmup Iteration   4: 15908012.847 ops/s
# Warmup Iteration   5: 15888915.948 ops/s
# Warmup Iteration   6: 15846373.840 ops/s
# Warmup Iteration   7: 15877820.760 ops/s
# Warmup Iteration   8: 15885359.470 ops/s
# Warmup Iteration   9: 15868741.925 ops/s
# Warmup Iteration  10: 15879883.811 ops/s
# Warmup Iteration  11: 15883423.075 ops/s
# Warmup Iteration  12: 15837701.175 ops/s
# Warmup Iteration  13: 15810219.576 ops/s
# Warmup Iteration  14: 15848960.678 ops/s
# Warmup Iteration  15: 15890311.184 ops/s
# Warmup Iteration  16: 15801088.929 ops/s
# Warmup Iteration  17: 15849107.520 ops/s
# Warmup Iteration  18: 15883732.895 ops/s
# Warmup Iteration  19: 15839546.597 ops/s
# Warmup Iteration  20: 15819640.949 ops/s
# Warmup Iteration  21: 15833677.844 ops/s
# Warmup Iteration  22: 15878899.695 ops/s
# Warmup Iteration  23: 15837292.646 ops/s
# Warmup Iteration  24: 15864435.813 ops/s
# Warmup Iteration  25: 15767016.535 ops/s
# Warmup Iteration  26: 15535277.457 ops/s
# Warmup Iteration  27: 15812244.541 ops/s
# Warmup Iteration  28: 15824871.432 ops/s
# Warmup Iteration  29: 15797821.318 ops/s
# Warmup Iteration  30: 15833544.840 ops/s
Iteration   1: 15838984.810 ops/s
Iteration   2: 15847544.240 ops/s
Iteration   3: 15879419.027 ops/s
Iteration   4: 15845133.974 ops/s
Iteration   5: 15854034.735 ops/s
Iteration   6: 15847044.034 ops/s
Iteration   7: 15730112.011 ops/s
Iteration   8: 15881926.370 ops/s
Iteration   9: 15838052.086 ops/s
Iteration  10: 15838697.301 ops/s
Iteration  11: 15823634.902 ops/s
Iteration  12: 15828855.107 ops/s
Iteration  13: 15834005.389 ops/s
Iteration  14: 15831563.311 ops/s
Iteration  15: 15808990.966 ops/s
Iteration  16: 15825263.475 ops/s
Iteration  17: 15828551.051 ops/s
Iteration  18: 15838186.377 ops/s
Iteration  19: 15831461.243 ops/s
Iteration  20: 15745241.974 ops/s
Iteration  21: 15815024.365 ops/s
Iteration  22: 15818449.548 ops/s
Iteration  23: 15856426.915 ops/s
Iteration  24: 15806168.277 ops/s
Iteration  25: 15790598.025 ops/s
Iteration  26: 15778603.772 ops/s
Iteration  27: 15828096.076 ops/s
Iteration  28: 15848242.893 ops/s
Iteration  29: 15840736.825 ops/s
Iteration  30: 15848007.141 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  15827568.541 ±(99.9%) 21822.269 ops/s [Average]
  (min, avg, max) = (15730112.011, 15827568.541, 15881926.370), stdev = 32662.548
  CI (99.9%): [15805746.272, 15849390.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  15827568.541 ± 21822.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6770342.596 ops/s
# Warmup Iteration   2: 15761976.170 ops/s
# Warmup Iteration   3: 13908099.798 ops/s
# Warmup Iteration   4: 16663458.663 ops/s
# Warmup Iteration   5: 16621092.263 ops/s
# Warmup Iteration   6: 16682016.229 ops/s
# Warmup Iteration   7: 16673424.258 ops/s
# Warmup Iteration   8: 16673330.966 ops/s
# Warmup Iteration   9: 16682785.007 ops/s
# Warmup Iteration  10: 16644877.896 ops/s
# Warmup Iteration  11: 16639778.303 ops/s
# Warmup Iteration  12: 16670474.252 ops/s
# Warmup Iteration  13: 16703273.236 ops/s
# Warmup Iteration  14: 16654582.215 ops/s
# Warmup Iteration  15: 16679777.411 ops/s
# Warmup Iteration  16: 16506449.130 ops/s
# Warmup Iteration  17: 16675815.590 ops/s
# Warmup Iteration  18: 16639127.035 ops/s
# Warmup Iteration  19: 16641994.091 ops/s
# Warmup Iteration  20: 16657242.216 ops/s
# Warmup Iteration  21: 16670037.414 ops/s
# Warmup Iteration  22: 16689022.995 ops/s
# Warmup Iteration  23: 16696056.385 ops/s
# Warmup Iteration  24: 16614011.422 ops/s
# Warmup Iteration  25: 16675734.215 ops/s
# Warmup Iteration  26: 16671779.840 ops/s
# Warmup Iteration  27: 16657682.267 ops/s
# Warmup Iteration  28: 16677661.607 ops/s
# Warmup Iteration  29: 16661781.815 ops/s
# Warmup Iteration  30: 16641452.644 ops/s
Iteration   1: 16670626.276 ops/s
Iteration   2: 16699805.261 ops/s
Iteration   3: 16644565.946 ops/s
Iteration   4: 16640584.277 ops/s
Iteration   5: 16723161.229 ops/s
Iteration   6: 16699586.390 ops/s
Iteration   7: 16716717.021 ops/s
Iteration   8: 16665402.116 ops/s
Iteration   9: 16681416.488 ops/s
Iteration  10: 16623416.361 ops/s
Iteration  11: 16657961.880 ops/s
Iteration  12: 16613159.155 ops/s
Iteration  13: 16628856.687 ops/s
Iteration  14: 16647751.373 ops/s
Iteration  15: 16704661.065 ops/s
Iteration  16: 16674963.999 ops/s
Iteration  17: 16744842.118 ops/s
Iteration  18: 16649911.194 ops/s
Iteration  19: 16703767.066 ops/s
Iteration  20: 16676063.159 ops/s
Iteration  21: 16585246.566 ops/s
Iteration  22: 16672312.713 ops/s
Iteration  23: 16645448.657 ops/s
Iteration  24: 16613349.708 ops/s
Iteration  25: 16634949.298 ops/s
Iteration  26: 16597488.816 ops/s
Iteration  27: 16650165.007 ops/s
Iteration  28: 16644030.585 ops/s
Iteration  29: 16661459.294 ops/s
Iteration  30: 16703773.873 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  16662514.786 ±(99.9%) 25626.472 ops/s [Average]
  (min, avg, max) = (16585246.566, 16662514.786, 16744842.118), stdev = 38356.499
  CI (99.9%): [16636888.314, 16688141.258] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  16662514.786 ± 25626.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6718414.571 ops/s
# Warmup Iteration   2: 16036986.302 ops/s
# Warmup Iteration   3: 13787096.833 ops/s
# Warmup Iteration   4: 16528281.457 ops/s
# Warmup Iteration   5: 16543910.365 ops/s
# Warmup Iteration   6: 16514621.280 ops/s
# Warmup Iteration   7: 16497780.593 ops/s
# Warmup Iteration   8: 16518334.997 ops/s
# Warmup Iteration   9: 16473778.279 ops/s
# Warmup Iteration  10: 16479865.755 ops/s
# Warmup Iteration  11: 16479415.547 ops/s
# Warmup Iteration  12: 16509874.785 ops/s
# Warmup Iteration  13: 16487881.268 ops/s
# Warmup Iteration  14: 16500561.715 ops/s
# Warmup Iteration  15: 16539583.500 ops/s
# Warmup Iteration  16: 16521272.224 ops/s
# Warmup Iteration  17: 16583089.168 ops/s
# Warmup Iteration  18: 16569665.319 ops/s
# Warmup Iteration  19: 16551565.284 ops/s
# Warmup Iteration  20: 16537777.387 ops/s
# Warmup Iteration  21: 16521177.578 ops/s
# Warmup Iteration  22: 16515018.355 ops/s
# Warmup Iteration  23: 16556985.560 ops/s
# Warmup Iteration  24: 16504446.545 ops/s
# Warmup Iteration  25: 16520845.880 ops/s
# Warmup Iteration  26: 16496653.341 ops/s
# Warmup Iteration  27: 16566493.268 ops/s
# Warmup Iteration  28: 16551853.682 ops/s
# Warmup Iteration  29: 16574515.979 ops/s
# Warmup Iteration  30: 16578698.830 ops/s
Iteration   1: 16600438.416 ops/s
Iteration   2: 16513948.086 ops/s
Iteration   3: 16488570.657 ops/s
Iteration   4: 16651140.569 ops/s
Iteration   5: 16573963.654 ops/s
Iteration   6: 16630310.720 ops/s
Iteration   7: 16516693.570 ops/s
Iteration   8: 16548062.016 ops/s
Iteration   9: 16555688.474 ops/s
Iteration  10: 16566001.324 ops/s
Iteration  11: 16571931.677 ops/s
Iteration  12: 16543373.220 ops/s
Iteration  13: 16484164.575 ops/s
Iteration  14: 16530093.889 ops/s
Iteration  15: 16574037.385 ops/s
Iteration  16: 16607761.736 ops/s
Iteration  17: 16564159.157 ops/s
Iteration  18: 16561387.141 ops/s
Iteration  19: 16508253.847 ops/s
Iteration  20: 16552155.847 ops/s
Iteration  21: 16550540.023 ops/s
Iteration  22: 16605314.283 ops/s
Iteration  23: 16450766.916 ops/s
Iteration  24: 16557996.501 ops/s
Iteration  25: 16586807.780 ops/s
Iteration  26: 16567236.353 ops/s
Iteration  27: 16562393.454 ops/s
Iteration  28: 16607122.587 ops/s
Iteration  29: 16526983.084 ops/s
Iteration  30: 16553291.448 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  16557019.613 ±(99.9%) 28995.633 ops/s [Average]
  (min, avg, max) = (16450766.916, 16557019.613, 16651140.569), stdev = 43399.302
  CI (99.9%): [16528023.980, 16586015.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  16557019.613 ± 28995.633  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7904890.688 ops/s
# Warmup Iteration   2: 16280767.843 ops/s
# Warmup Iteration   3: 15732589.411 ops/s
# Warmup Iteration   4: 17512504.161 ops/s
# Warmup Iteration   5: 17442177.452 ops/s
# Warmup Iteration   6: 17419844.403 ops/s
# Warmup Iteration   7: 17502858.336 ops/s
# Warmup Iteration   8: 17482134.652 ops/s
# Warmup Iteration   9: 17486499.168 ops/s
# Warmup Iteration  10: 17445080.148 ops/s
# Warmup Iteration  11: 17390472.912 ops/s
# Warmup Iteration  12: 17473748.268 ops/s
# Warmup Iteration  13: 17458044.293 ops/s
# Warmup Iteration  14: 17468437.160 ops/s
# Warmup Iteration  15: 17487332.245 ops/s
# Warmup Iteration  16: 17462372.998 ops/s
# Warmup Iteration  17: 17436203.105 ops/s
# Warmup Iteration  18: 17485766.866 ops/s
# Warmup Iteration  19: 17491179.545 ops/s
# Warmup Iteration  20: 17478296.079 ops/s
# Warmup Iteration  21: 17536875.890 ops/s
# Warmup Iteration  22: 17415357.659 ops/s
# Warmup Iteration  23: 17451808.050 ops/s
# Warmup Iteration  24: 17483056.066 ops/s
# Warmup Iteration  25: 17435730.148 ops/s
# Warmup Iteration  26: 17534613.189 ops/s
# Warmup Iteration  27: 17449450.091 ops/s
# Warmup Iteration  28: 17464551.795 ops/s
# Warmup Iteration  29: 17464303.397 ops/s
# Warmup Iteration  30: 17498663.009 ops/s
Iteration   1: 17361760.439 ops/s
Iteration   2: 17474565.641 ops/s
Iteration   3: 17490005.184 ops/s
Iteration   4: 17398489.573 ops/s
Iteration   5: 17494614.856 ops/s
Iteration   6: 17494535.715 ops/s
Iteration   7: 17465980.588 ops/s
Iteration   8: 17443900.521 ops/s
Iteration   9: 17465718.151 ops/s
Iteration  10: 17500550.659 ops/s
Iteration  11: 17454744.790 ops/s
Iteration  12: 17434217.824 ops/s
Iteration  13: 17498255.328 ops/s
Iteration  14: 17491625.441 ops/s
Iteration  15: 17483626.118 ops/s
Iteration  16: 17477486.475 ops/s
Iteration  17: 17489555.001 ops/s
Iteration  18: 17352807.859 ops/s
Iteration  19: 16882291.100 ops/s
Iteration  20: 16860119.711 ops/s
Iteration  21: 17432775.292 ops/s
Iteration  22: 17437447.303 ops/s
Iteration  23: 17425903.619 ops/s
Iteration  24: 17506577.356 ops/s
Iteration  25: 17439410.818 ops/s
Iteration  26: 17483423.381 ops/s
Iteration  27: 17407857.324 ops/s
Iteration  28: 17556828.266 ops/s
Iteration  29: 17486872.004 ops/s
Iteration  30: 17459659.214 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  17421720.185 ±(99.9%) 104045.603 ops/s [Average]
  (min, avg, max) = (16860119.711, 17421720.185, 17556828.266), stdev = 155730.572
  CI (99.9%): [17317674.582, 17525765.788] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  17421720.185 ± 104045.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6734885.821 ops/s
# Warmup Iteration   2: 15956809.338 ops/s
# Warmup Iteration   3: 13509620.850 ops/s
# Warmup Iteration   4: 16133341.133 ops/s
# Warmup Iteration   5: 16179417.882 ops/s
# Warmup Iteration   6: 16092943.570 ops/s
# Warmup Iteration   7: 16142858.930 ops/s
# Warmup Iteration   8: 16144784.802 ops/s
# Warmup Iteration   9: 16153290.386 ops/s
# Warmup Iteration  10: 16180042.409 ops/s
# Warmup Iteration  11: 16168369.211 ops/s
# Warmup Iteration  12: 16198534.322 ops/s
# Warmup Iteration  13: 16178898.291 ops/s
# Warmup Iteration  14: 16206075.869 ops/s
# Warmup Iteration  15: 16157730.120 ops/s
# Warmup Iteration  16: 16119486.006 ops/s
# Warmup Iteration  17: 16283419.629 ops/s
# Warmup Iteration  18: 16246365.238 ops/s
# Warmup Iteration  19: 16271096.707 ops/s
# Warmup Iteration  20: 16176806.062 ops/s
# Warmup Iteration  21: 16263348.436 ops/s
# Warmup Iteration  22: 16132867.852 ops/s
# Warmup Iteration  23: 16253188.240 ops/s
# Warmup Iteration  24: 16275248.211 ops/s
# Warmup Iteration  25: 16253651.777 ops/s
# Warmup Iteration  26: 16267682.524 ops/s
# Warmup Iteration  27: 16313146.440 ops/s
# Warmup Iteration  28: 16215918.042 ops/s
# Warmup Iteration  29: 16264232.765 ops/s
# Warmup Iteration  30: 16260208.138 ops/s
Iteration   1: 16209601.379 ops/s
Iteration   2: 16272590.873 ops/s
Iteration   3: 16286890.802 ops/s
Iteration   4: 16327945.340 ops/s
Iteration   5: 16276031.730 ops/s
Iteration   6: 16324892.823 ops/s
Iteration   7: 16281324.253 ops/s
Iteration   8: 16234255.141 ops/s
Iteration   9: 16303246.910 ops/s
Iteration  10: 16257036.826 ops/s
Iteration  11: 16281431.567 ops/s
Iteration  12: 16209005.211 ops/s
Iteration  13: 16308899.859 ops/s
Iteration  14: 16248970.884 ops/s
Iteration  15: 16299008.872 ops/s
Iteration  16: 16294003.089 ops/s
Iteration  17: 16255374.978 ops/s
Iteration  18: 16291231.485 ops/s
Iteration  19: 16338225.440 ops/s
Iteration  20: 16265687.182 ops/s
Iteration  21: 16232819.445 ops/s
Iteration  22: 16338829.738 ops/s
Iteration  23: 16221841.575 ops/s
Iteration  24: 16300587.378 ops/s
Iteration  25: 16256441.907 ops/s
Iteration  26: 16356308.004 ops/s
Iteration  27: 16234240.786 ops/s
Iteration  28: 16345824.359 ops/s
Iteration  29: 16299415.215 ops/s
Iteration  30: 16234123.158 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  16279536.207 ±(99.9%) 27476.684 ops/s [Average]
  (min, avg, max) = (16209005.211, 16279536.207, 16356308.004), stdev = 41125.811
  CI (99.9%): [16252059.523, 16307012.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  16279536.207 ± 27476.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6748946.373 ops/s
# Warmup Iteration   2: 16026606.625 ops/s
# Warmup Iteration   3: 13722262.101 ops/s
# Warmup Iteration   4: 16424801.861 ops/s
# Warmup Iteration   5: 16440215.433 ops/s
# Warmup Iteration   6: 16487876.520 ops/s
# Warmup Iteration   7: 16431146.510 ops/s
# Warmup Iteration   8: 16401708.157 ops/s
# Warmup Iteration   9: 16410899.525 ops/s
# Warmup Iteration  10: 16406737.087 ops/s
# Warmup Iteration  11: 16493560.030 ops/s
# Warmup Iteration  12: 16421501.812 ops/s
# Warmup Iteration  13: 16437703.725 ops/s
# Warmup Iteration  14: 16489887.215 ops/s
# Warmup Iteration  15: 16420613.528 ops/s
# Warmup Iteration  16: 16416736.828 ops/s
# Warmup Iteration  17: 16440495.899 ops/s
# Warmup Iteration  18: 16426456.676 ops/s
# Warmup Iteration  19: 16435896.716 ops/s
# Warmup Iteration  20: 16466154.667 ops/s
# Warmup Iteration  21: 16397342.812 ops/s
# Warmup Iteration  22: 16401327.172 ops/s
# Warmup Iteration  23: 16457331.500 ops/s
# Warmup Iteration  24: 16470250.261 ops/s
# Warmup Iteration  25: 16430327.650 ops/s
# Warmup Iteration  26: 16464821.717 ops/s
# Warmup Iteration  27: 16453175.264 ops/s
# Warmup Iteration  28: 16430246.248 ops/s
# Warmup Iteration  29: 16436193.029 ops/s
# Warmup Iteration  30: 16452160.563 ops/s
Iteration   1: 16397983.434 ops/s
Iteration   2: 16514974.713 ops/s
Iteration   3: 16369956.843 ops/s
Iteration   4: 16492103.615 ops/s
Iteration   5: 16355623.880 ops/s
Iteration   6: 16435338.096 ops/s
Iteration   7: 16407598.599 ops/s
Iteration   8: 16438776.029 ops/s
Iteration   9: 16474796.724 ops/s
Iteration  10: 16489868.811 ops/s
Iteration  11: 16491496.791 ops/s
Iteration  12: 16443011.452 ops/s
Iteration  13: 16426577.578 ops/s
Iteration  14: 16392344.367 ops/s
Iteration  15: 16459288.823 ops/s
Iteration  16: 16437436.517 ops/s
Iteration  17: 16512936.992 ops/s
Iteration  18: 16439260.999 ops/s
Iteration  19: 16387458.974 ops/s
Iteration  20: 16447854.047 ops/s
Iteration  21: 16386507.428 ops/s
Iteration  22: 16343840.042 ops/s
Iteration  23: 16432162.458 ops/s
Iteration  24: 16422774.407 ops/s
Iteration  25: 16492651.195 ops/s
Iteration  26: 16403574.881 ops/s
Iteration  27: 16372742.854 ops/s
Iteration  28: 16480584.226 ops/s
Iteration  29: 16360149.238 ops/s
Iteration  30: 16420512.217 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  16431006.208 ±(99.9%) 32256.095 ops/s [Average]
  (min, avg, max) = (16343840.042, 16431006.208, 16514974.713), stdev = 48279.409
  CI (99.9%): [16398750.112, 16463262.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  16431006.208 ± 32256.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6813038.292 ops/s
# Warmup Iteration   2: 15862370.963 ops/s
# Warmup Iteration   3: 13526833.460 ops/s
# Warmup Iteration   4: 16209789.533 ops/s
# Warmup Iteration   5: 16165117.795 ops/s
# Warmup Iteration   6: 16290433.887 ops/s
# Warmup Iteration   7: 16176019.318 ops/s
# Warmup Iteration   8: 16230786.500 ops/s
# Warmup Iteration   9: 16250934.756 ops/s
# Warmup Iteration  10: 16174921.387 ops/s
# Warmup Iteration  11: 16180509.530 ops/s
# Warmup Iteration  12: 16251570.935 ops/s
# Warmup Iteration  13: 16226185.021 ops/s
# Warmup Iteration  14: 16199592.438 ops/s
# Warmup Iteration  15: 16238816.850 ops/s
# Warmup Iteration  16: 16147462.861 ops/s
# Warmup Iteration  17: 16215658.315 ops/s
# Warmup Iteration  18: 16207396.309 ops/s
# Warmup Iteration  19: 16240774.392 ops/s
# Warmup Iteration  20: 16235289.767 ops/s
# Warmup Iteration  21: 16209188.975 ops/s
# Warmup Iteration  22: 16249114.848 ops/s
# Warmup Iteration  23: 16237580.178 ops/s
# Warmup Iteration  24: 16215082.448 ops/s
# Warmup Iteration  25: 16198054.593 ops/s
# Warmup Iteration  26: 16252176.326 ops/s
# Warmup Iteration  27: 16266584.971 ops/s
# Warmup Iteration  28: 16231072.746 ops/s
# Warmup Iteration  29: 16226700.699 ops/s
# Warmup Iteration  30: 16274854.873 ops/s
Iteration   1: 16242516.336 ops/s
Iteration   2: 16185909.926 ops/s
Iteration   3: 16278891.686 ops/s
Iteration   4: 16240593.898 ops/s
Iteration   5: 16218485.189 ops/s
Iteration   6: 16266425.206 ops/s
Iteration   7: 16308464.341 ops/s
Iteration   8: 16169009.486 ops/s
Iteration   9: 16191025.414 ops/s
Iteration  10: 16220851.962 ops/s
Iteration  11: 16292148.073 ops/s
Iteration  12: 16212270.013 ops/s
Iteration  13: 16262336.156 ops/s
Iteration  14: 16227285.497 ops/s
Iteration  15: 16256415.550 ops/s
Iteration  16: 16282516.259 ops/s
Iteration  17: 16146438.234 ops/s
Iteration  18: 16270081.239 ops/s
Iteration  19: 16223647.223 ops/s
Iteration  20: 16276592.980 ops/s
Iteration  21: 16224884.492 ops/s
Iteration  22: 16276666.419 ops/s
Iteration  23: 16279856.139 ops/s
Iteration  24: 16287672.705 ops/s
Iteration  25: 16267206.878 ops/s
Iteration  26: 16272769.826 ops/s
Iteration  27: 16308223.412 ops/s
Iteration  28: 16275300.274 ops/s
Iteration  29: 16249493.006 ops/s
Iteration  30: 16226335.845 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  16248010.455 ±(99.9%) 26922.502 ops/s [Average]
  (min, avg, max) = (16146438.234, 16248010.455, 16308464.341), stdev = 40296.337
  CI (99.9%): [16221087.953, 16274932.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  16248010.455 ± 26922.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3481547.541 ops/s
# Warmup Iteration   2: 12343613.168 ops/s
# Warmup Iteration   3: 9971528.387 ops/s
# Warmup Iteration   4: 12157003.168 ops/s
# Warmup Iteration   5: 12165909.905 ops/s
# Warmup Iteration   6: 12163759.747 ops/s
# Warmup Iteration   7: 12174616.207 ops/s
# Warmup Iteration   8: 12144218.091 ops/s
# Warmup Iteration   9: 11997336.302 ops/s
# Warmup Iteration  10: 12192005.993 ops/s
# Warmup Iteration  11: 12156971.857 ops/s
# Warmup Iteration  12: 12157656.925 ops/s
# Warmup Iteration  13: 12188483.007 ops/s
# Warmup Iteration  14: 12169543.183 ops/s
# Warmup Iteration  15: 12171011.245 ops/s
# Warmup Iteration  16: 12158285.315 ops/s
# Warmup Iteration  17: 12138981.515 ops/s
# Warmup Iteration  18: 12185157.007 ops/s
# Warmup Iteration  19: 12179378.062 ops/s
# Warmup Iteration  20: 12188985.892 ops/s
# Warmup Iteration  21: 12180743.256 ops/s
# Warmup Iteration  22: 12129605.402 ops/s
# Warmup Iteration  23: 12170710.001 ops/s
# Warmup Iteration  24: 12171064.058 ops/s
# Warmup Iteration  25: 12160205.559 ops/s
# Warmup Iteration  26: 12157819.581 ops/s
# Warmup Iteration  27: 12190845.587 ops/s
# Warmup Iteration  28: 12164023.163 ops/s
# Warmup Iteration  29: 12166841.409 ops/s
# Warmup Iteration  30: 12217888.977 ops/s
Iteration   1: 12165578.060 ops/s
Iteration   2: 12130394.999 ops/s
Iteration   3: 12102682.675 ops/s
Iteration   4: 12197231.234 ops/s
Iteration   5: 12177141.520 ops/s
Iteration   6: 12145891.493 ops/s
Iteration   7: 12146046.358 ops/s
Iteration   8: 12184111.726 ops/s
Iteration   9: 12160869.337 ops/s
Iteration  10: 12152057.913 ops/s
Iteration  11: 12126625.199 ops/s
Iteration  12: 12143603.476 ops/s
Iteration  13: 12136774.131 ops/s
Iteration  14: 12182966.031 ops/s
Iteration  15: 12128185.769 ops/s
Iteration  16: 12214920.118 ops/s
Iteration  17: 12168881.647 ops/s
Iteration  18: 12129313.373 ops/s
Iteration  19: 12128713.752 ops/s
Iteration  20: 12203338.708 ops/s
Iteration  21: 12050618.274 ops/s
Iteration  22: 12161258.371 ops/s
Iteration  23: 12190284.593 ops/s
Iteration  24: 12182917.523 ops/s
Iteration  25: 12149593.606 ops/s
Iteration  26: 12179716.248 ops/s
Iteration  27: 12178416.719 ops/s
Iteration  28: 12212598.455 ops/s
Iteration  29: 12219330.989 ops/s
Iteration  30: 12223910.624 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  12162465.764 ±(99.9%) 25335.138 ops/s [Average]
  (min, avg, max) = (12050618.274, 12162465.764, 12223910.624), stdev = 37920.445
  CI (99.9%): [12137130.626, 12187800.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  12162465.764 ± 25335.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2794257.560 ops/s
# Warmup Iteration   2: 8146574.344 ops/s
# Warmup Iteration   3: 8349887.511 ops/s
# Warmup Iteration   4: 6843140.193 ops/s
# Warmup Iteration   5: 8366085.168 ops/s
# Warmup Iteration   6: 8357667.725 ops/s
# Warmup Iteration   7: 8353962.363 ops/s
# Warmup Iteration   8: 8358331.752 ops/s
# Warmup Iteration   9: 8371165.831 ops/s
# Warmup Iteration  10: 8363881.929 ops/s
# Warmup Iteration  11: 8345550.514 ops/s
# Warmup Iteration  12: 8372731.783 ops/s
# Warmup Iteration  13: 8376059.339 ops/s
# Warmup Iteration  14: 8353316.488 ops/s
# Warmup Iteration  15: 8355698.850 ops/s
# Warmup Iteration  16: 8357004.862 ops/s
# Warmup Iteration  17: 8352952.648 ops/s
# Warmup Iteration  18: 8372649.494 ops/s
# Warmup Iteration  19: 8359922.962 ops/s
# Warmup Iteration  20: 8369607.737 ops/s
# Warmup Iteration  21: 8384195.229 ops/s
# Warmup Iteration  22: 8340313.909 ops/s
# Warmup Iteration  23: 8371293.368 ops/s
# Warmup Iteration  24: 8360289.519 ops/s
# Warmup Iteration  25: 8372754.405 ops/s
# Warmup Iteration  26: 8356763.213 ops/s
# Warmup Iteration  27: 8372483.155 ops/s
# Warmup Iteration  28: 8350205.119 ops/s
# Warmup Iteration  29: 8366501.745 ops/s
# Warmup Iteration  30: 8369828.249 ops/s
Iteration   1: 8350908.161 ops/s
Iteration   2: 8384743.593 ops/s
Iteration   3: 8374755.181 ops/s
Iteration   4: 8383347.649 ops/s
Iteration   5: 8370646.547 ops/s
Iteration   6: 8381757.946 ops/s
Iteration   7: 8367114.979 ops/s
Iteration   8: 8313019.867 ops/s
Iteration   9: 8396231.687 ops/s
Iteration  10: 8370489.519 ops/s
Iteration  11: 8386938.755 ops/s
Iteration  12: 8361586.884 ops/s
Iteration  13: 8381607.287 ops/s
Iteration  14: 8341582.018 ops/s
Iteration  15: 8363385.885 ops/s
Iteration  16: 8384185.092 ops/s
Iteration  17: 8370806.776 ops/s
Iteration  18: 8361286.203 ops/s
Iteration  19: 8370730.912 ops/s
Iteration  20: 8386024.698 ops/s
Iteration  21: 8389137.091 ops/s
Iteration  22: 8360357.608 ops/s
Iteration  23: 8344114.520 ops/s
Iteration  24: 8347044.080 ops/s
Iteration  25: 8379075.898 ops/s
Iteration  26: 8371911.218 ops/s
Iteration  27: 8370502.683 ops/s
Iteration  28: 8376791.722 ops/s
Iteration  29: 8363808.103 ops/s
Iteration  30: 8365256.178 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_corresponds":
  8368971.625 ±(99.9%) 11479.474 ops/s [Average]
  (min, avg, max) = (8313019.867, 8368971.625, 8396231.687), stdev = 17181.938
  CI (99.9%): [8357492.150, 8380451.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_corresponds  thrpt   30  8368971.625 ± 11479.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13845133.187 ops/s
# Warmup Iteration   2: 31122030.749 ops/s
# Warmup Iteration   3: 26515203.419 ops/s
# Warmup Iteration   4: 31445801.928 ops/s
# Warmup Iteration   5: 31451057.825 ops/s
# Warmup Iteration   6: 31398175.215 ops/s
# Warmup Iteration   7: 31380757.218 ops/s
# Warmup Iteration   8: 31490160.995 ops/s
# Warmup Iteration   9: 31433282.698 ops/s
# Warmup Iteration  10: 31458151.530 ops/s
# Warmup Iteration  11: 31492512.187 ops/s
# Warmup Iteration  12: 31400411.953 ops/s
# Warmup Iteration  13: 31497024.387 ops/s
# Warmup Iteration  14: 31417031.536 ops/s
# Warmup Iteration  15: 31324380.509 ops/s
# Warmup Iteration  16: 31404657.587 ops/s
# Warmup Iteration  17: 31336001.570 ops/s
# Warmup Iteration  18: 31344179.913 ops/s
# Warmup Iteration  19: 31407001.614 ops/s
# Warmup Iteration  20: 31378830.288 ops/s
# Warmup Iteration  21: 31367431.907 ops/s
# Warmup Iteration  22: 31427935.594 ops/s
# Warmup Iteration  23: 31337933.425 ops/s
# Warmup Iteration  24: 31366244.517 ops/s
# Warmup Iteration  25: 31436078.811 ops/s
# Warmup Iteration  26: 31297830.639 ops/s
# Warmup Iteration  27: 31387601.333 ops/s
# Warmup Iteration  28: 31302128.078 ops/s
# Warmup Iteration  29: 31337632.892 ops/s
# Warmup Iteration  30: 31410903.068 ops/s
Iteration   1: 31355980.313 ops/s
Iteration   2: 31391453.463 ops/s
Iteration   3: 31418958.890 ops/s
Iteration   4: 31406523.628 ops/s
Iteration   5: 31343976.909 ops/s
Iteration   6: 31333158.349 ops/s
Iteration   7: 31348151.717 ops/s
Iteration   8: 31373087.810 ops/s
Iteration   9: 31366467.124 ops/s
Iteration  10: 31403807.326 ops/s
Iteration  11: 31371916.989 ops/s
Iteration  12: 31166637.966 ops/s
Iteration  13: 31439782.883 ops/s
Iteration  14: 31384703.999 ops/s
Iteration  15: 31407113.226 ops/s
Iteration  16: 31391024.602 ops/s
Iteration  17: 31378177.427 ops/s
Iteration  18: 31359056.959 ops/s
Iteration  19: 31374411.151 ops/s
Iteration  20: 31488180.208 ops/s
Iteration  21: 31321323.960 ops/s
Iteration  22: 31303756.159 ops/s
Iteration  23: 31438839.972 ops/s
Iteration  24: 31131948.392 ops/s
Iteration  25: 31327618.774 ops/s
Iteration  26: 31354448.201 ops/s
Iteration  27: 31326281.078 ops/s
Iteration  28: 31256827.544 ops/s
Iteration  29: 31375344.240 ops/s
Iteration  30: 31451496.493 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex":
  31359681.858 ±(99.9%) 49455.464 ops/s [Average]
  (min, avg, max) = (31131948.392, 31359681.858, 31488180.208), stdev = 74022.616
  CI (99.9%): [31310226.395, 31409137.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_detectIndex  thrpt   30  31359681.858 ± 49455.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13365377.995 ops/s
# Warmup Iteration   2: 30262347.293 ops/s
# Warmup Iteration   3: 25210499.024 ops/s
# Warmup Iteration   4: 29894171.499 ops/s
# Warmup Iteration   5: 29913003.960 ops/s
# Warmup Iteration   6: 29950817.844 ops/s
# Warmup Iteration   7: 29875056.949 ops/s
# Warmup Iteration   8: 29807752.992 ops/s
# Warmup Iteration   9: 29918357.251 ops/s
# Warmup Iteration  10: 29939630.026 ops/s
# Warmup Iteration  11: 29805435.362 ops/s
# Warmup Iteration  12: 29925187.946 ops/s
# Warmup Iteration  13: 29970476.405 ops/s
# Warmup Iteration  14: 29928795.018 ops/s
# Warmup Iteration  15: 29970985.643 ops/s
# Warmup Iteration  16: 29760649.831 ops/s
# Warmup Iteration  17: 29922127.448 ops/s
# Warmup Iteration  18: 29908201.602 ops/s
# Warmup Iteration  19: 29857660.434 ops/s
# Warmup Iteration  20: 30015357.250 ops/s
# Warmup Iteration  21: 29915438.160 ops/s
# Warmup Iteration  22: 29895813.094 ops/s
# Warmup Iteration  23: 29406270.007 ops/s
# Warmup Iteration  24: 29825222.518 ops/s
# Warmup Iteration  25: 29968396.178 ops/s
# Warmup Iteration  26: 29929763.946 ops/s
# Warmup Iteration  27: 29930830.354 ops/s
# Warmup Iteration  28: 30040044.488 ops/s
# Warmup Iteration  29: 29980663.487 ops/s
# Warmup Iteration  30: 29945791.794 ops/s
Iteration   1: 29952457.590 ops/s
Iteration   2: 29992867.838 ops/s
Iteration   3: 29888071.788 ops/s
Iteration   4: 29948237.480 ops/s
Iteration   5: 29975256.033 ops/s
Iteration   6: 30068035.829 ops/s
Iteration   7: 29908745.320 ops/s
Iteration   8: 29967418.996 ops/s
Iteration   9: 29814883.553 ops/s
Iteration  10: 29993489.463 ops/s
Iteration  11: 29918225.241 ops/s
Iteration  12: 29880532.150 ops/s
Iteration  13: 29883021.630 ops/s
Iteration  14: 29930463.339 ops/s
Iteration  15: 29982136.619 ops/s
Iteration  16: 30007127.748 ops/s
Iteration  17: 29918705.092 ops/s
Iteration  18: 30003149.798 ops/s
Iteration  19: 30049107.969 ops/s
Iteration  20: 30013828.892 ops/s
Iteration  21: 29972140.362 ops/s
Iteration  22: 30014005.008 ops/s
Iteration  23: 30024240.663 ops/s
Iteration  24: 29917922.586 ops/s
Iteration  25: 30009419.991 ops/s
Iteration  26: 29933363.364 ops/s
Iteration  27: 29864025.022 ops/s
Iteration  28: 29971863.477 ops/s
Iteration  29: 30023422.393 ops/s
Iteration  30: 29804895.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex":
  29954368.681 ±(99.9%) 43649.903 ops/s [Average]
  (min, avg, max) = (29804895.199, 29954368.681, 30068035.829), stdev = 65333.125
  CI (99.9%): [29910718.778, 29998018.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  29954368.681 ± 43649.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1755960.914 ops/s
# Warmup Iteration   2: 4245137.967 ops/s
# Warmup Iteration   3: 4606550.593 ops/s
# Warmup Iteration   4: 4219310.563 ops/s
# Warmup Iteration   5: 4231782.227 ops/s
# Warmup Iteration   6: 4661292.024 ops/s
# Warmup Iteration   7: 4662684.549 ops/s
# Warmup Iteration   8: 4663131.290 ops/s
# Warmup Iteration   9: 4654652.122 ops/s
# Warmup Iteration  10: 4656426.998 ops/s
# Warmup Iteration  11: 4648412.468 ops/s
# Warmup Iteration  12: 4657476.988 ops/s
# Warmup Iteration  13: 4650031.026 ops/s
# Warmup Iteration  14: 4640959.648 ops/s
# Warmup Iteration  15: 4652182.350 ops/s
# Warmup Iteration  16: 4660937.466 ops/s
# Warmup Iteration  17: 4617876.765 ops/s
# Warmup Iteration  18: 4606493.270 ops/s
# Warmup Iteration  19: 4605292.936 ops/s
# Warmup Iteration  20: 4593383.092 ops/s
# Warmup Iteration  21: 4608906.294 ops/s
# Warmup Iteration  22: 4606565.553 ops/s
# Warmup Iteration  23: 4611270.847 ops/s
# Warmup Iteration  24: 4600694.070 ops/s
# Warmup Iteration  25: 4599864.877 ops/s
# Warmup Iteration  26: 4606374.964 ops/s
# Warmup Iteration  27: 4615080.039 ops/s
# Warmup Iteration  28: 4583392.531 ops/s
# Warmup Iteration  29: 4610664.053 ops/s
# Warmup Iteration  30: 4612651.507 ops/s
Iteration   1: 4604197.301 ops/s
Iteration   2: 4612833.437 ops/s
Iteration   3: 4593558.098 ops/s
Iteration   4: 4602171.569 ops/s
Iteration   5: 4629274.463 ops/s
Iteration   6: 4621321.440 ops/s
Iteration   7: 4606058.561 ops/s
Iteration   8: 4604559.824 ops/s
Iteration   9: 4623560.092 ops/s
Iteration  10: 4618699.700 ops/s
Iteration  11: 4611392.181 ops/s
Iteration  12: 4610352.032 ops/s
Iteration  13: 4603710.085 ops/s
Iteration  14: 4617661.234 ops/s
Iteration  15: 4617548.220 ops/s
Iteration  16: 4540527.023 ops/s
Iteration  17: 4616183.178 ops/s
Iteration  18: 4608360.605 ops/s
Iteration  19: 4622149.123 ops/s
Iteration  20: 4592859.035 ops/s
Iteration  21: 4620931.414 ops/s
Iteration  22: 4600083.784 ops/s
Iteration  23: 4590912.727 ops/s
Iteration  24: 4612920.900 ops/s
Iteration  25: 4596279.284 ops/s
Iteration  26: 4620355.634 ops/s
Iteration  27: 4612732.761 ops/s
Iteration  28: 4628305.925 ops/s
Iteration  29: 4589808.193 ops/s
Iteration  30: 4601678.467 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  4607699.543 ±(99.9%) 11228.275 ops/s [Average]
  (min, avg, max) = (4540527.023, 4607699.543, 4629274.463), stdev = 16805.955
  CI (99.9%): [4596471.268, 4618927.818] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  4607699.543 ± 11228.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4851643.193 ops/s
# Warmup Iteration   2: 12156842.084 ops/s
# Warmup Iteration   3: 10216669.930 ops/s
# Warmup Iteration   4: 12220100.518 ops/s
# Warmup Iteration   5: 12249563.412 ops/s
# Warmup Iteration   6: 12216591.933 ops/s
# Warmup Iteration   7: 12230765.346 ops/s
# Warmup Iteration   8: 12216022.910 ops/s
# Warmup Iteration   9: 12202821.322 ops/s
# Warmup Iteration  10: 12250769.087 ops/s
# Warmup Iteration  11: 12197624.262 ops/s
# Warmup Iteration  12: 12209323.306 ops/s
# Warmup Iteration  13: 12237125.691 ops/s
# Warmup Iteration  14: 12212966.472 ops/s
# Warmup Iteration  15: 12246810.138 ops/s
# Warmup Iteration  16: 12240849.427 ops/s
# Warmup Iteration  17: 12236364.215 ops/s
# Warmup Iteration  18: 12200150.636 ops/s
# Warmup Iteration  19: 12220078.902 ops/s
# Warmup Iteration  20: 12195011.780 ops/s
# Warmup Iteration  21: 12185616.940 ops/s
# Warmup Iteration  22: 12219052.106 ops/s
# Warmup Iteration  23: 12188142.207 ops/s
# Warmup Iteration  24: 12206352.763 ops/s
# Warmup Iteration  25: 12222421.943 ops/s
# Warmup Iteration  26: 12212353.689 ops/s
# Warmup Iteration  27: 12180558.544 ops/s
# Warmup Iteration  28: 12217718.540 ops/s
# Warmup Iteration  29: 12193878.213 ops/s
# Warmup Iteration  30: 12202416.871 ops/s
Iteration   1: 12220722.282 ops/s
Iteration   2: 12218488.322 ops/s
Iteration   3: 12217429.664 ops/s
Iteration   4: 12225300.446 ops/s
Iteration   5: 12223644.903 ops/s
Iteration   6: 12229012.369 ops/s
Iteration   7: 12191443.906 ops/s
Iteration   8: 12219265.117 ops/s
Iteration   9: 12144974.654 ops/s
Iteration  10: 12234943.934 ops/s
Iteration  11: 12173741.116 ops/s
Iteration  12: 12236451.643 ops/s
Iteration  13: 12217990.898 ops/s
Iteration  14: 12176245.860 ops/s
Iteration  15: 12218243.633 ops/s
Iteration  16: 12128581.964 ops/s
Iteration  17: 12234044.092 ops/s
Iteration  18: 12248492.320 ops/s
Iteration  19: 12224014.770 ops/s
Iteration  20: 12198914.159 ops/s
Iteration  21: 12255985.928 ops/s
Iteration  22: 12123147.441 ops/s
Iteration  23: 12213970.051 ops/s
Iteration  24: 12213211.070 ops/s
Iteration  25: 12266195.058 ops/s
Iteration  26: 12238968.150 ops/s
Iteration  27: 12257243.265 ops/s
Iteration  28: 12214574.977 ops/s
Iteration  29: 12220584.696 ops/s
Iteration  30: 12262206.673 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  12214934.445 ±(99.9%) 23747.866 ops/s [Average]
  (min, avg, max) = (12123147.441, 12214934.445, 12266195.058), stdev = 35544.690
  CI (99.9%): [12191186.580, 12238682.311] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  12214934.445 ± 23747.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706786.287 ops/s
# Warmup Iteration   2: 790002.443 ops/s
# Warmup Iteration   3: 1028679.403 ops/s
# Warmup Iteration   4: 1030664.586 ops/s
# Warmup Iteration   5: 1023579.794 ops/s
# Warmup Iteration   6: 1027465.540 ops/s
# Warmup Iteration   7: 1023596.053 ops/s
# Warmup Iteration   8: 1026662.514 ops/s
# Warmup Iteration   9: 1027325.546 ops/s
# Warmup Iteration  10: 1013827.075 ops/s
# Warmup Iteration  11: 881753.388 ops/s
# Warmup Iteration  12: 1028013.741 ops/s
# Warmup Iteration  13: 1034301.428 ops/s
# Warmup Iteration  14: 1031490.230 ops/s
# Warmup Iteration  15: 1030158.772 ops/s
# Warmup Iteration  16: 1027828.210 ops/s
# Warmup Iteration  17: 1092097.921 ops/s
# Warmup Iteration  18: 1088488.063 ops/s
# Warmup Iteration  19: 1095049.341 ops/s
# Warmup Iteration  20: 1094426.899 ops/s
# Warmup Iteration  21: 1094039.964 ops/s
# Warmup Iteration  22: 1091973.632 ops/s
# Warmup Iteration  23: 1089805.756 ops/s
# Warmup Iteration  24: 1097171.987 ops/s
# Warmup Iteration  25: 1093923.066 ops/s
# Warmup Iteration  26: 1100368.682 ops/s
# Warmup Iteration  27: 1087065.825 ops/s
# Warmup Iteration  28: 1094404.759 ops/s
# Warmup Iteration  29: 1088679.095 ops/s
# Warmup Iteration  30: 1094497.198 ops/s
Iteration   1: 1090499.450 ops/s
Iteration   2: 1087774.875 ops/s
Iteration   3: 1083107.054 ops/s
Iteration   4: 1093131.393 ops/s
Iteration   5: 1089030.163 ops/s
Iteration   6: 1091266.925 ops/s
Iteration   7: 1094314.363 ops/s
Iteration   8: 1092595.334 ops/s
Iteration   9: 1090363.304 ops/s
Iteration  10: 1081977.386 ops/s
Iteration  11: 1085309.372 ops/s
Iteration  12: 1090097.012 ops/s
Iteration  13: 1088665.473 ops/s
Iteration  14: 1093556.062 ops/s
Iteration  15: 1085622.297 ops/s
Iteration  16: 1082435.552 ops/s
Iteration  17: 1087110.229 ops/s
Iteration  18: 1088207.760 ops/s
Iteration  19: 1090986.455 ops/s
Iteration  20: 1084378.072 ops/s
Iteration  21: 1093792.315 ops/s
Iteration  22: 1088578.506 ops/s
Iteration  23: 1088066.162 ops/s
Iteration  24: 1077375.929 ops/s
Iteration  25: 1089982.508 ops/s
Iteration  26: 1084559.706 ops/s
Iteration  27: 1089734.672 ops/s
Iteration  28: 1092522.556 ops/s
Iteration  29: 1092468.666 ops/s
Iteration  30: 1090039.491 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1088584.968 ±(99.9%) 2699.500 ops/s [Average]
  (min, avg, max) = (1077375.929, 1088584.968, 1094314.363), stdev = 4040.485
  CI (99.9%): [1085885.468, 1091284.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1088584.968 ± 2699.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228429.180 ops/s
# Warmup Iteration   2: 246880.821 ops/s
# Warmup Iteration   3: 308313.000 ops/s
# Warmup Iteration   4: 315110.141 ops/s
# Warmup Iteration   5: 315930.752 ops/s
# Warmup Iteration   6: 317480.312 ops/s
# Warmup Iteration   7: 316066.540 ops/s
# Warmup Iteration   8: 317695.573 ops/s
# Warmup Iteration   9: 315738.226 ops/s
# Warmup Iteration  10: 314457.248 ops/s
# Warmup Iteration  11: 315389.905 ops/s
# Warmup Iteration  12: 293958.368 ops/s
# Warmup Iteration  13: 293585.548 ops/s
# Warmup Iteration  14: 313118.111 ops/s
# Warmup Iteration  15: 313441.156 ops/s
# Warmup Iteration  16: 313977.896 ops/s
# Warmup Iteration  17: 329905.385 ops/s
# Warmup Iteration  18: 330960.835 ops/s
# Warmup Iteration  19: 331111.432 ops/s
# Warmup Iteration  20: 331135.470 ops/s
# Warmup Iteration  21: 331012.672 ops/s
# Warmup Iteration  22: 332201.789 ops/s
# Warmup Iteration  23: 332419.904 ops/s
# Warmup Iteration  24: 331933.745 ops/s
# Warmup Iteration  25: 330804.914 ops/s
# Warmup Iteration  26: 332038.300 ops/s
# Warmup Iteration  27: 331348.051 ops/s
# Warmup Iteration  28: 332469.016 ops/s
# Warmup Iteration  29: 330131.459 ops/s
# Warmup Iteration  30: 331309.334 ops/s
Iteration   1: 330381.066 ops/s
Iteration   2: 330456.313 ops/s
Iteration   3: 331066.448 ops/s
Iteration   4: 331484.842 ops/s
Iteration   5: 332231.799 ops/s
Iteration   6: 330354.304 ops/s
Iteration   7: 331319.751 ops/s
Iteration   8: 332391.865 ops/s
Iteration   9: 331724.278 ops/s
Iteration  10: 330716.531 ops/s
Iteration  11: 332285.427 ops/s
Iteration  12: 331296.321 ops/s
Iteration  13: 331142.129 ops/s
Iteration  14: 331309.107 ops/s
Iteration  15: 331723.748 ops/s
Iteration  16: 331455.555 ops/s
Iteration  17: 331898.337 ops/s
Iteration  18: 330882.293 ops/s
Iteration  19: 331776.872 ops/s
Iteration  20: 330004.264 ops/s
Iteration  21: 331621.971 ops/s
Iteration  22: 331821.484 ops/s
Iteration  23: 331327.392 ops/s
Iteration  24: 332168.881 ops/s
Iteration  25: 332315.761 ops/s
Iteration  26: 330593.180 ops/s
Iteration  27: 332071.515 ops/s
Iteration  28: 332441.744 ops/s
Iteration  29: 330784.320 ops/s
Iteration  30: 330974.739 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_listIterator":
  331400.741 ±(99.9%) 453.950 ops/s [Average]
  (min, avg, max) = (330004.264, 331400.741, 332441.744), stdev = 679.452
  CI (99.9%): [330946.791, 331854.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_listIterator  thrpt   30  331400.741 ± 453.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12108609.801 ops/s
# Warmup Iteration   2: 21676155.739 ops/s
# Warmup Iteration   3: 25074103.070 ops/s
# Warmup Iteration   4: 24933749.133 ops/s
# Warmup Iteration   5: 25032344.420 ops/s
# Warmup Iteration   6: 25070186.050 ops/s
# Warmup Iteration   7: 25097482.722 ops/s
# Warmup Iteration   8: 25088822.299 ops/s
# Warmup Iteration   9: 25124626.934 ops/s
# Warmup Iteration  10: 25094379.026 ops/s
# Warmup Iteration  11: 25062541.590 ops/s
# Warmup Iteration  12: 25102505.975 ops/s
# Warmup Iteration  13: 25200079.984 ops/s
# Warmup Iteration  14: 25127976.296 ops/s
# Warmup Iteration  15: 25052760.223 ops/s
# Warmup Iteration  16: 25256430.039 ops/s
# Warmup Iteration  17: 25120135.843 ops/s
# Warmup Iteration  18: 25163671.357 ops/s
# Warmup Iteration  19: 25227625.853 ops/s
# Warmup Iteration  20: 25166242.291 ops/s
# Warmup Iteration  21: 25059359.809 ops/s
# Warmup Iteration  22: 25024767.419 ops/s
# Warmup Iteration  23: 25100622.827 ops/s
# Warmup Iteration  24: 25140216.389 ops/s
# Warmup Iteration  25: 25170917.114 ops/s
# Warmup Iteration  26: 25232018.901 ops/s
# Warmup Iteration  27: 25127219.051 ops/s
# Warmup Iteration  28: 25186741.794 ops/s
# Warmup Iteration  29: 25250152.471 ops/s
# Warmup Iteration  30: 25142593.032 ops/s
Iteration   1: 25135504.435 ops/s
Iteration   2: 25177706.198 ops/s
Iteration   3: 25170280.120 ops/s
Iteration   4: 25152449.286 ops/s
Iteration   5: 25215831.574 ops/s
Iteration   6: 25115476.174 ops/s
Iteration   7: 25113464.509 ops/s
Iteration   8: 24989565.220 ops/s
Iteration   9: 25073389.799 ops/s
Iteration  10: 25200154.423 ops/s
Iteration  11: 25082522.496 ops/s
Iteration  12: 25195452.423 ops/s
Iteration  13: 25193567.501 ops/s
Iteration  14: 25228714.529 ops/s
Iteration  15: 25111805.541 ops/s
Iteration  16: 25109064.216 ops/s
Iteration  17: 25051786.334 ops/s
Iteration  18: 25161969.474 ops/s
Iteration  19: 25069904.386 ops/s
Iteration  20: 25058263.753 ops/s
Iteration  21: 25146543.541 ops/s
Iteration  22: 24801080.698 ops/s
Iteration  23: 25225694.585 ops/s
Iteration  24: 25207281.247 ops/s
Iteration  25: 25154670.683 ops/s
Iteration  26: 25109599.318 ops/s
Iteration  27: 25075316.026 ops/s
Iteration  28: 25150677.449 ops/s
Iteration  29: 25101056.526 ops/s
Iteration  30: 25147361.194 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  25124205.122 ±(99.9%) 56212.478 ops/s [Average]
  (min, avg, max) = (24801080.698, 25124205.122, 25228714.529), stdev = 84136.197
  CI (99.9%): [25067992.644, 25180417.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  25124205.122 ± 56212.478  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10379964.194 ops/s
# Warmup Iteration   2: 18997676.879 ops/s
# Warmup Iteration   3: 22397957.463 ops/s
# Warmup Iteration   4: 22543751.448 ops/s
# Warmup Iteration   5: 22617028.942 ops/s
# Warmup Iteration   6: 22471133.400 ops/s
# Warmup Iteration   7: 22637195.717 ops/s
# Warmup Iteration   8: 22519185.842 ops/s
# Warmup Iteration   9: 22521613.953 ops/s
# Warmup Iteration  10: 22484435.554 ops/s
# Warmup Iteration  11: 22508663.461 ops/s
# Warmup Iteration  12: 22511353.902 ops/s
# Warmup Iteration  13: 22597800.256 ops/s
# Warmup Iteration  14: 22493867.119 ops/s
# Warmup Iteration  15: 22250770.493 ops/s
# Warmup Iteration  16: 22455773.360 ops/s
# Warmup Iteration  17: 22473930.799 ops/s
# Warmup Iteration  18: 22365154.238 ops/s
# Warmup Iteration  19: 22449082.263 ops/s
# Warmup Iteration  20: 22592569.615 ops/s
# Warmup Iteration  21: 22552118.189 ops/s
# Warmup Iteration  22: 22475737.872 ops/s
# Warmup Iteration  23: 22510183.607 ops/s
# Warmup Iteration  24: 22463340.184 ops/s
# Warmup Iteration  25: 22502827.008 ops/s
# Warmup Iteration  26: 22522942.490 ops/s
# Warmup Iteration  27: 22473202.934 ops/s
# Warmup Iteration  28: 22467333.084 ops/s
# Warmup Iteration  29: 22391467.948 ops/s
# Warmup Iteration  30: 22549638.435 ops/s
Iteration   1: 22353167.044 ops/s
Iteration   2: 22498274.872 ops/s
Iteration   3: 22516517.625 ops/s
Iteration   4: 22405303.596 ops/s
Iteration   5: 22534449.038 ops/s
Iteration   6: 22476929.335 ops/s
Iteration   7: 22603160.033 ops/s
Iteration   8: 22509982.884 ops/s
Iteration   9: 22548335.173 ops/s
Iteration  10: 22508733.350 ops/s
Iteration  11: 22530405.101 ops/s
Iteration  12: 22556167.433 ops/s
Iteration  13: 22452328.664 ops/s
Iteration  14: 22419466.890 ops/s
Iteration  15: 22606580.845 ops/s
Iteration  16: 22530412.150 ops/s
Iteration  17: 22382151.718 ops/s
Iteration  18: 22517834.832 ops/s
Iteration  19: 22614128.947 ops/s
Iteration  20: 22517829.013 ops/s
Iteration  21: 22503310.032 ops/s
Iteration  22: 22628349.362 ops/s
Iteration  23: 22572472.218 ops/s
Iteration  24: 22406680.351 ops/s
Iteration  25: 22575375.605 ops/s
Iteration  26: 22549956.818 ops/s
Iteration  27: 22422069.151 ops/s
Iteration  28: 22568615.251 ops/s
Iteration  29: 22641770.256 ops/s
Iteration  30: 22511200.843 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partition":
  22515398.614 ±(99.9%) 49759.706 ops/s [Average]
  (min, avg, max) = (22353167.044, 22515398.614, 22641770.256), stdev = 74477.991
  CI (99.9%): [22465638.908, 22565158.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  22515398.614 ± 49759.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10261112.908 ops/s
# Warmup Iteration   2: 19005008.207 ops/s
# Warmup Iteration   3: 22014339.809 ops/s
# Warmup Iteration   4: 22539031.350 ops/s
# Warmup Iteration   5: 22692049.162 ops/s
# Warmup Iteration   6: 21455673.734 ops/s
# Warmup Iteration   7: 22816663.577 ops/s
# Warmup Iteration   8: 22754911.472 ops/s
# Warmup Iteration   9: 22740456.440 ops/s
# Warmup Iteration  10: 22687753.331 ops/s
# Warmup Iteration  11: 22688050.885 ops/s
# Warmup Iteration  12: 22727100.641 ops/s
# Warmup Iteration  13: 22747413.598 ops/s
# Warmup Iteration  14: 22683562.055 ops/s
# Warmup Iteration  15: 22561168.648 ops/s
# Warmup Iteration  16: 22676389.292 ops/s
# Warmup Iteration  17: 22628323.757 ops/s
# Warmup Iteration  18: 22644780.070 ops/s
# Warmup Iteration  19: 22586888.804 ops/s
# Warmup Iteration  20: 22722612.868 ops/s
# Warmup Iteration  21: 22688419.782 ops/s
# Warmup Iteration  22: 22686681.963 ops/s
# Warmup Iteration  23: 22655460.437 ops/s
# Warmup Iteration  24: 22710809.033 ops/s
# Warmup Iteration  25: 22723382.019 ops/s
# Warmup Iteration  26: 22775655.767 ops/s
# Warmup Iteration  27: 22599846.697 ops/s
# Warmup Iteration  28: 22678016.276 ops/s
# Warmup Iteration  29: 22604121.651 ops/s
# Warmup Iteration  30: 22723519.579 ops/s
Iteration   1: 22704453.652 ops/s
Iteration   2: 22829679.656 ops/s
Iteration   3: 22712910.817 ops/s
Iteration   4: 22779524.296 ops/s
Iteration   5: 22734250.594 ops/s
Iteration   6: 22605098.204 ops/s
Iteration   7: 22584256.168 ops/s
Iteration   8: 22671880.543 ops/s
Iteration   9: 22827747.262 ops/s
Iteration  10: 22708166.068 ops/s
Iteration  11: 22860629.360 ops/s
Iteration  12: 22799673.790 ops/s
Iteration  13: 22646834.819 ops/s
Iteration  14: 22633398.904 ops/s
Iteration  15: 22585885.424 ops/s
Iteration  16: 22720627.182 ops/s
Iteration  17: 22776906.435 ops/s
Iteration  18: 22738986.698 ops/s
Iteration  19: 22723591.545 ops/s
Iteration  20: 22836423.531 ops/s
Iteration  21: 22716997.983 ops/s
Iteration  22: 22684613.287 ops/s
Iteration  23: 22602248.399 ops/s
Iteration  24: 22660531.772 ops/s
Iteration  25: 22741851.591 ops/s
Iteration  26: 22665772.870 ops/s
Iteration  27: 22777886.233 ops/s
Iteration  28: 22669641.891 ops/s
Iteration  29: 22623784.207 ops/s
Iteration  30: 22692780.455 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  22710567.788 ±(99.9%) 51332.170 ops/s [Average]
  (min, avg, max) = (22584256.168, 22710567.788, 22860629.360), stdev = 76831.581
  CI (99.9%): [22659235.618, 22761899.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  22710567.788 ± 51332.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5845899.356 ops/s
# Warmup Iteration   2: 16954139.431 ops/s
# Warmup Iteration   3: 15399764.995 ops/s
# Warmup Iteration   4: 17735911.844 ops/s
# Warmup Iteration   5: 17727910.751 ops/s
# Warmup Iteration   6: 17646041.880 ops/s
# Warmup Iteration   7: 17689492.670 ops/s
# Warmup Iteration   8: 17704914.944 ops/s
# Warmup Iteration   9: 17711985.898 ops/s
# Warmup Iteration  10: 17709676.499 ops/s
# Warmup Iteration  11: 17719950.895 ops/s
# Warmup Iteration  12: 17703077.016 ops/s
# Warmup Iteration  13: 17631790.200 ops/s
# Warmup Iteration  14: 17723313.545 ops/s
# Warmup Iteration  15: 17727051.787 ops/s
# Warmup Iteration  16: 17671752.425 ops/s
# Warmup Iteration  17: 17675730.654 ops/s
# Warmup Iteration  18: 17670302.671 ops/s
# Warmup Iteration  19: 17691184.330 ops/s
# Warmup Iteration  20: 17625827.696 ops/s
# Warmup Iteration  21: 17691465.697 ops/s
# Warmup Iteration  22: 17666684.092 ops/s
# Warmup Iteration  23: 17661677.408 ops/s
# Warmup Iteration  24: 17670395.861 ops/s
# Warmup Iteration  25: 17663694.092 ops/s
# Warmup Iteration  26: 17646133.827 ops/s
# Warmup Iteration  27: 17575000.966 ops/s
# Warmup Iteration  28: 17636181.682 ops/s
# Warmup Iteration  29: 17611989.469 ops/s
# Warmup Iteration  30: 17710154.220 ops/s
Iteration   1: 17714531.904 ops/s
Iteration   2: 17585138.188 ops/s
Iteration   3: 17538865.128 ops/s
Iteration   4: 17596990.290 ops/s
Iteration   5: 17611452.871 ops/s
Iteration   6: 17652583.435 ops/s
Iteration   7: 17714137.104 ops/s
Iteration   8: 17673544.716 ops/s
Iteration   9: 17735376.783 ops/s
Iteration  10: 17653463.658 ops/s
Iteration  11: 17647856.747 ops/s
Iteration  12: 17722459.973 ops/s
Iteration  13: 17631119.538 ops/s
Iteration  14: 17639628.233 ops/s
Iteration  15: 17688354.863 ops/s
Iteration  16: 17675752.412 ops/s
Iteration  17: 17704770.667 ops/s
Iteration  18: 17721141.921 ops/s
Iteration  19: 17638027.706 ops/s
Iteration  20: 17619582.484 ops/s
Iteration  21: 17591289.922 ops/s
Iteration  22: 17631176.605 ops/s
Iteration  23: 17597368.093 ops/s
Iteration  24: 17711544.539 ops/s
Iteration  25: 17689068.262 ops/s
Iteration  26: 17693771.884 ops/s
Iteration  27: 17610032.677 ops/s
Iteration  28: 17498009.519 ops/s
Iteration  29: 17630613.261 ops/s
Iteration  30: 17680969.842 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reject":
  17649954.107 ±(99.9%) 37999.642 ops/s [Average]
  (min, avg, max) = (17498009.519, 17649954.107, 17735376.783), stdev = 56876.079
  CI (99.9%): [17611954.466, 17687953.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  17649954.107 ± 37999.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5657669.925 ops/s
# Warmup Iteration   2: 17137226.722 ops/s
# Warmup Iteration   3: 15170265.501 ops/s
# Warmup Iteration   4: 17741848.386 ops/s
# Warmup Iteration   5: 17766144.334 ops/s
# Warmup Iteration   6: 17692830.192 ops/s
# Warmup Iteration   7: 17681323.709 ops/s
# Warmup Iteration   8: 17709030.297 ops/s
# Warmup Iteration   9: 17744196.728 ops/s
# Warmup Iteration  10: 17625510.668 ops/s
# Warmup Iteration  11: 17625687.244 ops/s
# Warmup Iteration  12: 17718175.109 ops/s
# Warmup Iteration  13: 17627639.704 ops/s
# Warmup Iteration  14: 17584856.769 ops/s
# Warmup Iteration  15: 17611042.910 ops/s
# Warmup Iteration  16: 17609319.115 ops/s
# Warmup Iteration  17: 16691891.278 ops/s
# Warmup Iteration  18: 16766623.433 ops/s
# Warmup Iteration  19: 16806288.199 ops/s
# Warmup Iteration  20: 16815061.544 ops/s
# Warmup Iteration  21: 16794252.592 ops/s
# Warmup Iteration  22: 16748225.708 ops/s
# Warmup Iteration  23: 16777148.108 ops/s
# Warmup Iteration  24: 16760360.010 ops/s
# Warmup Iteration  25: 16776946.388 ops/s
# Warmup Iteration  26: 16813032.952 ops/s
# Warmup Iteration  27: 16749489.316 ops/s
# Warmup Iteration  28: 16782282.817 ops/s
# Warmup Iteration  29: 16795838.589 ops/s
# Warmup Iteration  30: 16709651.493 ops/s
Iteration   1: 16707918.110 ops/s
Iteration   2: 16783336.331 ops/s
Iteration   3: 16772660.966 ops/s
Iteration   4: 16731088.384 ops/s
Iteration   5: 16779376.451 ops/s
Iteration   6: 16778104.089 ops/s
Iteration   7: 16821281.562 ops/s
Iteration   8: 16824180.640 ops/s
Iteration   9: 16861210.453 ops/s
Iteration  10: 16842051.034 ops/s
Iteration  11: 16842580.279 ops/s
Iteration  12: 16797469.226 ops/s
Iteration  13: 16776708.673 ops/s
Iteration  14: 16790556.797 ops/s
Iteration  15: 16766400.337 ops/s
Iteration  16: 16776358.653 ops/s
Iteration  17: 16826599.230 ops/s
Iteration  18: 16868342.580 ops/s
Iteration  19: 16784586.144 ops/s
Iteration  20: 16702583.081 ops/s
Iteration  21: 16870288.107 ops/s
Iteration  22: 16736682.501 ops/s
Iteration  23: 16809298.847 ops/s
Iteration  24: 16762740.790 ops/s
Iteration  25: 16722337.862 ops/s
Iteration  26: 16834958.173 ops/s
Iteration  27: 16788563.516 ops/s
Iteration  28: 16738808.023 ops/s
Iteration  29: 16844339.735 ops/s
Iteration  30: 16811471.543 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  16791762.737 ±(99.9%) 31033.786 ops/s [Average]
  (min, avg, max) = (16702583.081, 16791762.737, 16870288.107), stdev = 46449.913
  CI (99.9%): [16760728.952, 16822796.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  16791762.737 ± 31033.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703907.026 ops/s
# Warmup Iteration   2: 764938.711 ops/s
# Warmup Iteration   3: 1002654.681 ops/s
# Warmup Iteration   4: 1001654.583 ops/s
# Warmup Iteration   5: 1006031.055 ops/s
# Warmup Iteration   6: 1004374.527 ops/s
# Warmup Iteration   7: 1004157.589 ops/s
# Warmup Iteration   8: 1004897.243 ops/s
# Warmup Iteration   9: 1003209.943 ops/s
# Warmup Iteration  10: 1006404.506 ops/s
# Warmup Iteration  11: 852804.175 ops/s
# Warmup Iteration  12: 1006806.240 ops/s
# Warmup Iteration  13: 1005058.799 ops/s
# Warmup Iteration  14: 1007694.692 ops/s
# Warmup Iteration  15: 1005849.128 ops/s
# Warmup Iteration  16: 1005446.811 ops/s
# Warmup Iteration  17: 1068699.146 ops/s
# Warmup Iteration  18: 1070244.979 ops/s
# Warmup Iteration  19: 1071837.782 ops/s
# Warmup Iteration  20: 1070231.690 ops/s
# Warmup Iteration  21: 1070977.839 ops/s
# Warmup Iteration  22: 1066600.641 ops/s
# Warmup Iteration  23: 1070822.992 ops/s
# Warmup Iteration  24: 1070918.914 ops/s
# Warmup Iteration  25: 1067445.619 ops/s
# Warmup Iteration  26: 1069804.377 ops/s
# Warmup Iteration  27: 1067964.718 ops/s
# Warmup Iteration  28: 1067548.878 ops/s
# Warmup Iteration  29: 1070796.038 ops/s
# Warmup Iteration  30: 1072708.746 ops/s
Iteration   1: 1077702.311 ops/s
Iteration   2: 1070264.168 ops/s
Iteration   3: 1069510.072 ops/s
Iteration   4: 1072187.018 ops/s
Iteration   5: 1069744.580 ops/s
Iteration   6: 1074381.125 ops/s
Iteration   7: 1072765.455 ops/s
Iteration   8: 1073404.031 ops/s
Iteration   9: 1066701.911 ops/s
Iteration  10: 1069004.830 ops/s
Iteration  11: 1076738.708 ops/s
Iteration  12: 1071101.920 ops/s
Iteration  13: 1072387.117 ops/s
Iteration  14: 1072282.768 ops/s
Iteration  15: 1067572.217 ops/s
Iteration  16: 1067935.023 ops/s
Iteration  17: 1071835.440 ops/s
Iteration  18: 1068273.394 ops/s
Iteration  19: 1060942.992 ops/s
Iteration  20: 1068654.865 ops/s
Iteration  21: 1070705.233 ops/s
Iteration  22: 1070097.849 ops/s
Iteration  23: 1065062.032 ops/s
Iteration  24: 1069483.275 ops/s
Iteration  25: 1075166.098 ops/s
Iteration  26: 1069381.823 ops/s
Iteration  27: 1076460.862 ops/s
Iteration  28: 1072818.464 ops/s
Iteration  29: 1067351.321 ops/s
Iteration  30: 1066008.607 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_remove":
  1070530.850 ±(99.9%) 2447.170 ops/s [Average]
  (min, avg, max) = (1060942.992, 1070530.850, 1077702.311), stdev = 3662.809
  CI (99.9%): [1068083.680, 1072978.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  1070530.850 ± 2447.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712894.958 ops/s
# Warmup Iteration   2: 784892.466 ops/s
# Warmup Iteration   3: 1023005.169 ops/s
# Warmup Iteration   4: 1018138.690 ops/s
# Warmup Iteration   5: 1018553.991 ops/s
# Warmup Iteration   6: 1002501.541 ops/s
# Warmup Iteration   7: 1019448.624 ops/s
# Warmup Iteration   8: 1024466.889 ops/s
# Warmup Iteration   9: 1021701.979 ops/s
# Warmup Iteration  10: 1021214.904 ops/s
# Warmup Iteration  11: 870209.141 ops/s
# Warmup Iteration  12: 1014332.038 ops/s
# Warmup Iteration  13: 1013730.665 ops/s
# Warmup Iteration  14: 1013640.954 ops/s
# Warmup Iteration  15: 1019525.386 ops/s
# Warmup Iteration  16: 1021333.671 ops/s
# Warmup Iteration  17: 1086906.923 ops/s
# Warmup Iteration  18: 1086535.326 ops/s
# Warmup Iteration  19: 1086099.208 ops/s
# Warmup Iteration  20: 1086179.641 ops/s
# Warmup Iteration  21: 1077827.678 ops/s
# Warmup Iteration  22: 1078445.480 ops/s
# Warmup Iteration  23: 1080833.193 ops/s
# Warmup Iteration  24: 1070006.394 ops/s
# Warmup Iteration  25: 1075038.609 ops/s
# Warmup Iteration  26: 1082237.982 ops/s
# Warmup Iteration  27: 1078661.595 ops/s
# Warmup Iteration  28: 1078506.184 ops/s
# Warmup Iteration  29: 1076461.118 ops/s
# Warmup Iteration  30: 1084728.404 ops/s
Iteration   1: 1081974.569 ops/s
Iteration   2: 1076713.904 ops/s
Iteration   3: 1079034.596 ops/s
Iteration   4: 1080000.416 ops/s
Iteration   5: 1085961.689 ops/s
Iteration   6: 1082051.273 ops/s
Iteration   7: 1085154.787 ops/s
Iteration   8: 1084251.199 ops/s
Iteration   9: 1087116.832 ops/s
Iteration  10: 1081367.534 ops/s
Iteration  11: 1082626.281 ops/s
Iteration  12: 1079968.290 ops/s
Iteration  13: 1082632.428 ops/s
Iteration  14: 1076500.936 ops/s
Iteration  15: 1077611.847 ops/s
Iteration  16: 1082923.807 ops/s
Iteration  17: 1082764.541 ops/s
Iteration  18: 1085064.693 ops/s
Iteration  19: 1075933.325 ops/s
Iteration  20: 1087934.480 ops/s
Iteration  21: 1081331.073 ops/s
Iteration  22: 1081616.665 ops/s
Iteration  23: 1085042.784 ops/s
Iteration  24: 1079529.079 ops/s
Iteration  25: 1080890.997 ops/s
Iteration  26: 1083553.145 ops/s
Iteration  27: 1073255.998 ops/s
Iteration  28: 1078603.317 ops/s
Iteration  29: 1082855.614 ops/s
Iteration  30: 1082084.733 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  1081545.028 ±(99.9%) 2278.988 ops/s [Average]
  (min, avg, max) = (1073255.998, 1081545.028, 1087934.480), stdev = 3411.082
  CI (99.9%): [1079266.040, 1083824.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  1081545.028 ± 2278.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707819.328 ops/s
# Warmup Iteration   2: 782421.143 ops/s
# Warmup Iteration   3: 1013318.533 ops/s
# Warmup Iteration   4: 1011785.629 ops/s
# Warmup Iteration   5: 1013197.249 ops/s
# Warmup Iteration   6: 1010564.209 ops/s
# Warmup Iteration   7: 1019387.269 ops/s
# Warmup Iteration   8: 1013610.139 ops/s
# Warmup Iteration   9: 1015059.736 ops/s
# Warmup Iteration  10: 980734.205 ops/s
# Warmup Iteration  11: 894472.779 ops/s
# Warmup Iteration  12: 1012433.348 ops/s
# Warmup Iteration  13: 1016233.607 ops/s
# Warmup Iteration  14: 1015352.880 ops/s
# Warmup Iteration  15: 1013452.156 ops/s
# Warmup Iteration  16: 1013066.297 ops/s
# Warmup Iteration  17: 1079652.252 ops/s
# Warmup Iteration  18: 1076598.771 ops/s
# Warmup Iteration  19: 1074399.078 ops/s
# Warmup Iteration  20: 1074097.450 ops/s
# Warmup Iteration  21: 1073488.188 ops/s
# Warmup Iteration  22: 1078536.855 ops/s
# Warmup Iteration  23: 1079820.198 ops/s
# Warmup Iteration  24: 1075129.054 ops/s
# Warmup Iteration  25: 1070446.506 ops/s
# Warmup Iteration  26: 1072337.905 ops/s
# Warmup Iteration  27: 1076267.582 ops/s
# Warmup Iteration  28: 1075494.360 ops/s
# Warmup Iteration  29: 1078074.667 ops/s
# Warmup Iteration  30: 1072580.022 ops/s
Iteration   1: 1078835.859 ops/s
Iteration   2: 1079317.472 ops/s
Iteration   3: 1073620.082 ops/s
Iteration   4: 1077928.176 ops/s
Iteration   5: 1074820.504 ops/s
Iteration   6: 1070529.140 ops/s
Iteration   7: 1078425.584 ops/s
Iteration   8: 1074083.106 ops/s
Iteration   9: 1076176.441 ops/s
Iteration  10: 1076907.239 ops/s
Iteration  11: 1077522.023 ops/s
Iteration  12: 1075198.950 ops/s
Iteration  13: 1071404.880 ops/s
Iteration  14: 1072657.643 ops/s
Iteration  15: 1071863.891 ops/s
Iteration  16: 1080242.728 ops/s
Iteration  17: 1077804.083 ops/s
Iteration  18: 1074473.815 ops/s
Iteration  19: 1071823.133 ops/s
Iteration  20: 1074232.289 ops/s
Iteration  21: 1076932.968 ops/s
Iteration  22: 1073349.373 ops/s
Iteration  23: 1072284.732 ops/s
Iteration  24: 1076568.975 ops/s
Iteration  25: 1076972.664 ops/s
Iteration  26: 1079297.303 ops/s
Iteration  27: 1078900.205 ops/s
Iteration  28: 1078280.690 ops/s
Iteration  29: 1073839.982 ops/s
Iteration  30: 1079240.976 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  1075784.497 ±(99.9%) 1872.943 ops/s [Average]
  (min, avg, max) = (1070529.140, 1075784.497, 1080242.728), stdev = 2803.333
  CI (99.9%): [1073911.554, 1077657.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1075784.497 ± 1872.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705522.193 ops/s
# Warmup Iteration   2: 766333.911 ops/s
# Warmup Iteration   3: 995933.690 ops/s
# Warmup Iteration   4: 994071.080 ops/s
# Warmup Iteration   5: 986773.946 ops/s
# Warmup Iteration   6: 987524.822 ops/s
# Warmup Iteration   7: 989890.738 ops/s
# Warmup Iteration   8: 990691.806 ops/s
# Warmup Iteration   9: 991473.556 ops/s
# Warmup Iteration  10: 994790.625 ops/s
# Warmup Iteration  11: 839742.075 ops/s
# Warmup Iteration  12: 991716.918 ops/s
# Warmup Iteration  13: 993291.221 ops/s
# Warmup Iteration  14: 991590.547 ops/s
# Warmup Iteration  15: 995858.335 ops/s
# Warmup Iteration  16: 990828.768 ops/s
# Warmup Iteration  17: 1050157.087 ops/s
# Warmup Iteration  18: 1052309.072 ops/s
# Warmup Iteration  19: 1052818.226 ops/s
# Warmup Iteration  20: 1049688.762 ops/s
# Warmup Iteration  21: 1053389.707 ops/s
# Warmup Iteration  22: 1052304.487 ops/s
# Warmup Iteration  23: 1051288.865 ops/s
# Warmup Iteration  24: 1051194.047 ops/s
# Warmup Iteration  25: 1052004.664 ops/s
# Warmup Iteration  26: 1053021.929 ops/s
# Warmup Iteration  27: 1055206.464 ops/s
# Warmup Iteration  28: 1052918.111 ops/s
# Warmup Iteration  29: 1051744.632 ops/s
# Warmup Iteration  30: 1052470.087 ops/s
Iteration   1: 1054158.499 ops/s
Iteration   2: 1051123.156 ops/s
Iteration   3: 1050467.657 ops/s
Iteration   4: 1054531.296 ops/s
Iteration   5: 1055524.084 ops/s
Iteration   6: 1050136.103 ops/s
Iteration   7: 1057728.367 ops/s
Iteration   8: 1053718.458 ops/s
Iteration   9: 1049749.682 ops/s
Iteration  10: 1047354.515 ops/s
Iteration  11: 1049178.255 ops/s
Iteration  12: 1053247.208 ops/s
Iteration  13: 1051218.318 ops/s
Iteration  14: 1051712.458 ops/s
Iteration  15: 1055782.471 ops/s
Iteration  16: 1053851.523 ops/s
Iteration  17: 1053625.379 ops/s
Iteration  18: 1058269.363 ops/s
Iteration  19: 1049837.387 ops/s
Iteration  20: 1057920.843 ops/s
Iteration  21: 1053872.452 ops/s
Iteration  22: 1045957.388 ops/s
Iteration  23: 1050961.272 ops/s
Iteration  24: 1050042.067 ops/s
Iteration  25: 1055984.276 ops/s
Iteration  26: 1048083.614 ops/s
Iteration  27: 1048274.362 ops/s
Iteration  28: 1052307.993 ops/s
Iteration  29: 1049977.379 ops/s
Iteration  30: 1055886.787 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex":
  1052349.420 ±(99.9%) 2176.527 ops/s [Average]
  (min, avg, max) = (1045957.388, 1052349.420, 1058269.363), stdev = 3257.723
  CI (99.9%): [1050172.894, 1054525.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1052349.420 ± 2176.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702534.092 ops/s
# Warmup Iteration   2: 759600.147 ops/s
# Warmup Iteration   3: 994541.868 ops/s
# Warmup Iteration   4: 992231.095 ops/s
# Warmup Iteration   5: 988476.512 ops/s
# Warmup Iteration   6: 994098.282 ops/s
# Warmup Iteration   7: 993547.398 ops/s
# Warmup Iteration   8: 995698.347 ops/s
# Warmup Iteration   9: 990993.571 ops/s
# Warmup Iteration  10: 993182.792 ops/s
# Warmup Iteration  11: 837983.509 ops/s
# Warmup Iteration  12: 993683.485 ops/s
# Warmup Iteration  13: 994294.207 ops/s
# Warmup Iteration  14: 994681.575 ops/s
# Warmup Iteration  15: 990932.345 ops/s
# Warmup Iteration  16: 996010.482 ops/s
# Warmup Iteration  17: 1049344.469 ops/s
# Warmup Iteration  18: 1053402.144 ops/s
# Warmup Iteration  19: 1052973.757 ops/s
# Warmup Iteration  20: 1050906.076 ops/s
# Warmup Iteration  21: 1053421.814 ops/s
# Warmup Iteration  22: 1052160.790 ops/s
# Warmup Iteration  23: 1053615.537 ops/s
# Warmup Iteration  24: 1052547.990 ops/s
# Warmup Iteration  25: 1052219.945 ops/s
# Warmup Iteration  26: 1051043.599 ops/s
# Warmup Iteration  27: 1051043.864 ops/s
# Warmup Iteration  28: 1049462.023 ops/s
# Warmup Iteration  29: 1049998.489 ops/s
# Warmup Iteration  30: 1050593.345 ops/s
Iteration   1: 1048093.604 ops/s
Iteration   2: 1050149.258 ops/s
Iteration   3: 1049458.897 ops/s
Iteration   4: 1051168.553 ops/s
Iteration   5: 1053265.098 ops/s
Iteration   6: 1046423.393 ops/s
Iteration   7: 1048833.188 ops/s
Iteration   8: 1051966.871 ops/s
Iteration   9: 1049755.347 ops/s
Iteration  10: 1045216.330 ops/s
Iteration  11: 1055618.846 ops/s
Iteration  12: 1052308.210 ops/s
Iteration  13: 1051426.315 ops/s
Iteration  14: 1052085.881 ops/s
Iteration  15: 1053539.382 ops/s
Iteration  16: 1050980.918 ops/s
Iteration  17: 1052225.437 ops/s
Iteration  18: 1050428.961 ops/s
Iteration  19: 1053640.730 ops/s
Iteration  20: 1048672.118 ops/s
Iteration  21: 1052829.692 ops/s
Iteration  22: 1054635.863 ops/s
Iteration  23: 1057483.203 ops/s
Iteration  24: 1050712.266 ops/s
Iteration  25: 1051181.464 ops/s
Iteration  26: 1048903.221 ops/s
Iteration  27: 1051545.605 ops/s
Iteration  28: 1051580.539 ops/s
Iteration  29: 1051859.765 ops/s
Iteration  30: 1052997.845 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex":
  1051299.560 ±(99.9%) 1706.249 ops/s [Average]
  (min, avg, max) = (1045216.330, 1051299.560, 1057483.203), stdev = 2553.834
  CI (99.9%): [1049593.311, 1053005.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  1051299.560 ± 1706.249  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707605.383 ops/s
# Warmup Iteration   2: 780591.229 ops/s
# Warmup Iteration   3: 1023757.876 ops/s
# Warmup Iteration   4: 1022345.022 ops/s
# Warmup Iteration   5: 1026766.064 ops/s
# Warmup Iteration   6: 1020797.364 ops/s
# Warmup Iteration   7: 1024302.598 ops/s
# Warmup Iteration   8: 1023863.583 ops/s
# Warmup Iteration   9: 1020099.440 ops/s
# Warmup Iteration  10: 1027819.793 ops/s
# Warmup Iteration  11: 870136.934 ops/s
# Warmup Iteration  12: 1019376.645 ops/s
# Warmup Iteration  13: 1015610.018 ops/s
# Warmup Iteration  14: 1024752.640 ops/s
# Warmup Iteration  15: 1028962.317 ops/s
# Warmup Iteration  16: 1032353.633 ops/s
# Warmup Iteration  17: 1083416.881 ops/s
# Warmup Iteration  18: 1082119.396 ops/s
# Warmup Iteration  19: 1082637.570 ops/s
# Warmup Iteration  20: 1080259.542 ops/s
# Warmup Iteration  21: 1081293.745 ops/s
# Warmup Iteration  22: 1091194.934 ops/s
# Warmup Iteration  23: 1078370.455 ops/s
# Warmup Iteration  24: 1087952.356 ops/s
# Warmup Iteration  25: 1083674.129 ops/s
# Warmup Iteration  26: 1087005.964 ops/s
# Warmup Iteration  27: 1082693.701 ops/s
# Warmup Iteration  28: 1084856.368 ops/s
# Warmup Iteration  29: 1077214.281 ops/s
# Warmup Iteration  30: 1079507.167 ops/s
Iteration   1: 1084190.677 ops/s
Iteration   2: 1079833.226 ops/s
Iteration   3: 1082210.781 ops/s
Iteration   4: 1085576.657 ops/s
Iteration   5: 1082372.771 ops/s
Iteration   6: 1083000.278 ops/s
Iteration   7: 1082348.625 ops/s
Iteration   8: 1079031.130 ops/s
Iteration   9: 1084426.049 ops/s
Iteration  10: 1079848.334 ops/s
Iteration  11: 1081880.501 ops/s
Iteration  12: 1085017.982 ops/s
Iteration  13: 1074495.604 ops/s
Iteration  14: 1073753.858 ops/s
Iteration  15: 1083061.207 ops/s
Iteration  16: 1078265.685 ops/s
Iteration  17: 1081859.103 ops/s
Iteration  18: 1077367.591 ops/s
Iteration  19: 1073921.620 ops/s
Iteration  20: 1079532.000 ops/s
Iteration  21: 1084996.438 ops/s
Iteration  22: 1078879.012 ops/s
Iteration  23: 1083925.991 ops/s
Iteration  24: 1079172.486 ops/s
Iteration  25: 1083562.652 ops/s
Iteration  26: 1083712.380 ops/s
Iteration  27: 1079707.432 ops/s
Iteration  28: 1073041.259 ops/s
Iteration  29: 1087880.780 ops/s
Iteration  30: 1089255.796 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  1081204.264 ±(99.9%) 2700.547 ops/s [Average]
  (min, avg, max) = (1073041.259, 1081204.264, 1089255.796), stdev = 4042.051
  CI (99.9%): [1078503.717, 1083904.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  1081204.264 ± 2700.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712515.081 ops/s
# Warmup Iteration   2: 793583.774 ops/s
# Warmup Iteration   3: 1030478.859 ops/s
# Warmup Iteration   4: 1030863.440 ops/s
# Warmup Iteration   5: 1030598.730 ops/s
# Warmup Iteration   6: 1029766.951 ops/s
# Warmup Iteration   7: 1028456.382 ops/s
# Warmup Iteration   8: 1025115.362 ops/s
# Warmup Iteration   9: 1025192.614 ops/s
# Warmup Iteration  10: 983071.669 ops/s
# Warmup Iteration  11: 912438.233 ops/s
# Warmup Iteration  12: 1029037.484 ops/s
# Warmup Iteration  13: 1026687.646 ops/s
# Warmup Iteration  14: 1025616.949 ops/s
# Warmup Iteration  15: 1028429.735 ops/s
# Warmup Iteration  16: 1027380.478 ops/s
# Warmup Iteration  17: 1090280.899 ops/s
# Warmup Iteration  18: 1089342.483 ops/s
# Warmup Iteration  19: 1087991.138 ops/s
# Warmup Iteration  20: 1089544.535 ops/s
# Warmup Iteration  21: 1092632.222 ops/s
# Warmup Iteration  22: 1094296.367 ops/s
# Warmup Iteration  23: 1087808.120 ops/s
# Warmup Iteration  24: 1091196.607 ops/s
# Warmup Iteration  25: 1094079.801 ops/s
# Warmup Iteration  26: 1090187.759 ops/s
# Warmup Iteration  27: 1092029.939 ops/s
# Warmup Iteration  28: 1087821.803 ops/s
# Warmup Iteration  29: 1091608.207 ops/s
# Warmup Iteration  30: 1091786.258 ops/s
Iteration   1: 1098816.659 ops/s
Iteration   2: 1092745.380 ops/s
Iteration   3: 1096125.432 ops/s
Iteration   4: 1088616.484 ops/s
Iteration   5: 1095507.760 ops/s
Iteration   6: 1089973.798 ops/s
Iteration   7: 1096496.337 ops/s
Iteration   8: 1089979.746 ops/s
Iteration   9: 1090656.451 ops/s
Iteration  10: 1098478.049 ops/s
Iteration  11: 1094412.078 ops/s
Iteration  12: 1095310.776 ops/s
Iteration  13: 1091332.491 ops/s
Iteration  14: 1091710.248 ops/s
Iteration  15: 1093136.429 ops/s
Iteration  16: 1090285.275 ops/s
Iteration  17: 1095157.832 ops/s
Iteration  18: 1087363.450 ops/s
Iteration  19: 1087960.263 ops/s
Iteration  20: 1086888.350 ops/s
Iteration  21: 1093726.836 ops/s
Iteration  22: 1090444.218 ops/s
Iteration  23: 1083971.381 ops/s
Iteration  24: 1097280.794 ops/s
Iteration  25: 1090296.612 ops/s
Iteration  26: 1088926.775 ops/s
Iteration  27: 1091837.696 ops/s
Iteration  28: 1093364.262 ops/s
Iteration  29: 1085973.711 ops/s
Iteration  30: 1091553.588 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  1091944.305 ±(99.9%) 2493.163 ops/s [Average]
  (min, avg, max) = (1083971.381, 1091944.305, 1098816.659), stdev = 3731.650
  CI (99.9%): [1089451.142, 1094437.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1091944.305 ± 2493.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713617.823 ops/s
# Warmup Iteration   2: 786843.183 ops/s
# Warmup Iteration   3: 1020132.168 ops/s
# Warmup Iteration   4: 1009519.872 ops/s
# Warmup Iteration   5: 1013814.546 ops/s
# Warmup Iteration   6: 1012769.287 ops/s
# Warmup Iteration   7: 1020166.309 ops/s
# Warmup Iteration   8: 1015870.266 ops/s
# Warmup Iteration   9: 1011658.304 ops/s
# Warmup Iteration  10: 1017586.686 ops/s
# Warmup Iteration  11: 865560.121 ops/s
# Warmup Iteration  12: 1015810.376 ops/s
# Warmup Iteration  13: 1017432.610 ops/s
# Warmup Iteration  14: 1014684.519 ops/s
# Warmup Iteration  15: 1012564.152 ops/s
# Warmup Iteration  16: 1017474.727 ops/s
# Warmup Iteration  17: 1082301.326 ops/s
# Warmup Iteration  18: 1077100.207 ops/s
# Warmup Iteration  19: 1077342.611 ops/s
# Warmup Iteration  20: 1084241.938 ops/s
# Warmup Iteration  21: 1081154.433 ops/s
# Warmup Iteration  22: 1079581.254 ops/s
# Warmup Iteration  23: 1082588.587 ops/s
# Warmup Iteration  24: 1080106.638 ops/s
# Warmup Iteration  25: 1082362.036 ops/s
# Warmup Iteration  26: 1060898.066 ops/s
# Warmup Iteration  27: 1083731.367 ops/s
# Warmup Iteration  28: 1081760.748 ops/s
# Warmup Iteration  29: 1081434.618 ops/s
# Warmup Iteration  30: 1081447.657 ops/s
Iteration   1: 1093216.005 ops/s
Iteration   2: 1076314.217 ops/s
Iteration   3: 1077637.018 ops/s
Iteration   4: 1079508.050 ops/s
Iteration   5: 1083530.430 ops/s
Iteration   6: 1082010.119 ops/s
Iteration   7: 1082543.197 ops/s
Iteration   8: 1078176.152 ops/s
Iteration   9: 1079711.055 ops/s
Iteration  10: 1078086.749 ops/s
Iteration  11: 1076124.285 ops/s
Iteration  12: 1083057.729 ops/s
Iteration  13: 1081035.953 ops/s
Iteration  14: 1074166.625 ops/s
Iteration  15: 1077651.280 ops/s
Iteration  16: 1082686.128 ops/s
Iteration  17: 1074840.955 ops/s
Iteration  18: 1083565.425 ops/s
Iteration  19: 1079588.564 ops/s
Iteration  20: 1083762.551 ops/s
Iteration  21: 1075465.399 ops/s
Iteration  22: 1080134.900 ops/s
Iteration  23: 1075575.861 ops/s
Iteration  24: 1080109.666 ops/s
Iteration  25: 1078551.580 ops/s
Iteration  26: 1089581.040 ops/s
Iteration  27: 1085515.014 ops/s
Iteration  28: 1079699.784 ops/s
Iteration  29: 1077663.872 ops/s
Iteration  30: 1082325.571 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  1080394.506 ±(99.9%) 2831.131 ops/s [Average]
  (min, avg, max) = (1074166.625, 1080394.506, 1093216.005), stdev = 4237.504
  CI (99.9%): [1077563.375, 1083225.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  1080394.506 ± 2831.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703250.516 ops/s
# Warmup Iteration   2: 772573.180 ops/s
# Warmup Iteration   3: 1001910.287 ops/s
# Warmup Iteration   4: 1003422.023 ops/s
# Warmup Iteration   5: 1004357.007 ops/s
# Warmup Iteration   6: 1003128.751 ops/s
# Warmup Iteration   7: 999570.770 ops/s
# Warmup Iteration   8: 1000987.853 ops/s
# Warmup Iteration   9: 1000544.657 ops/s
# Warmup Iteration  10: 999806.826 ops/s
# Warmup Iteration  11: 848872.559 ops/s
# Warmup Iteration  12: 1001805.553 ops/s
# Warmup Iteration  13: 997856.175 ops/s
# Warmup Iteration  14: 1000285.368 ops/s
# Warmup Iteration  15: 999028.652 ops/s
# Warmup Iteration  16: 1000652.962 ops/s
# Warmup Iteration  17: 1050705.217 ops/s
# Warmup Iteration  18: 1058419.985 ops/s
# Warmup Iteration  19: 1054325.532 ops/s
# Warmup Iteration  20: 1055598.096 ops/s
# Warmup Iteration  21: 1049774.900 ops/s
# Warmup Iteration  22: 1048119.433 ops/s
# Warmup Iteration  23: 1046777.154 ops/s
# Warmup Iteration  24: 1055042.091 ops/s
# Warmup Iteration  25: 1052323.570 ops/s
# Warmup Iteration  26: 1052630.437 ops/s
# Warmup Iteration  27: 1054704.913 ops/s
# Warmup Iteration  28: 1054645.361 ops/s
# Warmup Iteration  29: 1057925.305 ops/s
# Warmup Iteration  30: 1058483.152 ops/s
Iteration   1: 1051595.207 ops/s
Iteration   2: 1051633.398 ops/s
Iteration   3: 1052688.954 ops/s
Iteration   4: 1054647.098 ops/s
Iteration   5: 1053914.103 ops/s
Iteration   6: 1056383.888 ops/s
Iteration   7: 1053939.985 ops/s
Iteration   8: 1062755.667 ops/s
Iteration   9: 1062529.225 ops/s
Iteration  10: 1054428.041 ops/s
Iteration  11: 1054616.732 ops/s
Iteration  12: 1058569.390 ops/s
Iteration  13: 1047101.749 ops/s
Iteration  14: 1054552.347 ops/s
Iteration  15: 1054793.888 ops/s
Iteration  16: 1055359.072 ops/s
Iteration  17: 1048919.527 ops/s
Iteration  18: 1056289.870 ops/s
Iteration  19: 1059453.428 ops/s
Iteration  20: 1051964.560 ops/s
Iteration  21: 1055352.011 ops/s
Iteration  22: 1052538.521 ops/s
Iteration  23: 1061800.988 ops/s
Iteration  24: 1050920.947 ops/s
Iteration  25: 1056262.460 ops/s
Iteration  26: 1054577.732 ops/s
Iteration  27: 1058116.057 ops/s
Iteration  28: 1055307.924 ops/s
Iteration  29: 1054559.226 ops/s
Iteration  30: 1053755.020 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  1054977.567 ±(99.9%) 2404.061 ops/s [Average]
  (min, avg, max) = (1047101.749, 1054977.567, 1062755.667), stdev = 3598.285
  CI (99.9%): [1052573.506, 1057381.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1054977.567 ± 2404.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705855.122 ops/s
# Warmup Iteration   2: 774387.786 ops/s
# Warmup Iteration   3: 998250.863 ops/s
# Warmup Iteration   4: 996268.645 ops/s
# Warmup Iteration   5: 994180.434 ops/s
# Warmup Iteration   6: 998820.755 ops/s
# Warmup Iteration   7: 994835.715 ops/s
# Warmup Iteration   8: 995845.778 ops/s
# Warmup Iteration   9: 994471.139 ops/s
# Warmup Iteration  10: 995345.527 ops/s
# Warmup Iteration  11: 841031.168 ops/s
# Warmup Iteration  12: 996033.639 ops/s
# Warmup Iteration  13: 997760.690 ops/s
# Warmup Iteration  14: 996030.191 ops/s
# Warmup Iteration  15: 991353.210 ops/s
# Warmup Iteration  16: 1003762.288 ops/s
# Warmup Iteration  17: 1055705.087 ops/s
# Warmup Iteration  18: 1056889.775 ops/s
# Warmup Iteration  19: 1054699.433 ops/s
# Warmup Iteration  20: 1055206.021 ops/s
# Warmup Iteration  21: 1056959.935 ops/s
# Warmup Iteration  22: 1051767.868 ops/s
# Warmup Iteration  23: 1055183.923 ops/s
# Warmup Iteration  24: 1053423.443 ops/s
# Warmup Iteration  25: 1055699.569 ops/s
# Warmup Iteration  26: 1055991.325 ops/s
# Warmup Iteration  27: 1054065.568 ops/s
# Warmup Iteration  28: 1043437.381 ops/s
# Warmup Iteration  29: 1060883.835 ops/s
# Warmup Iteration  30: 1054668.945 ops/s
Iteration   1: 1051785.307 ops/s
Iteration   2: 1055804.696 ops/s
Iteration   3: 1052281.450 ops/s
Iteration   4: 1055244.363 ops/s
Iteration   5: 1058651.125 ops/s
Iteration   6: 1050193.639 ops/s
Iteration   7: 1053101.579 ops/s
Iteration   8: 1055283.661 ops/s
Iteration   9: 1048965.462 ops/s
Iteration  10: 1051058.093 ops/s
Iteration  11: 1050302.596 ops/s
Iteration  12: 1053449.153 ops/s
Iteration  13: 1051830.734 ops/s
Iteration  14: 1050140.844 ops/s
Iteration  15: 1057225.845 ops/s
Iteration  16: 1055812.965 ops/s
Iteration  17: 1051983.064 ops/s
Iteration  18: 1058683.101 ops/s
Iteration  19: 1051781.549 ops/s
Iteration  20: 1059510.348 ops/s
Iteration  21: 1058455.048 ops/s
Iteration  22: 1064206.497 ops/s
Iteration  23: 1053018.232 ops/s
Iteration  24: 1059382.510 ops/s
Iteration  25: 1054243.701 ops/s
Iteration  26: 1059491.789 ops/s
Iteration  27: 1053127.302 ops/s
Iteration  28: 1051276.979 ops/s
Iteration  29: 1055484.868 ops/s
Iteration  30: 1054844.285 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis":
  1054554.026 ±(99.9%) 2418.011 ops/s [Average]
  (min, avg, max) = (1048965.462, 1054554.026, 1064206.497), stdev = 3619.165
  CI (99.9%): [1052136.015, 1056972.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_reverseThis  thrpt   30  1054554.026 ± 2418.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8058126.285 ops/s
# Warmup Iteration   2: 16258620.525 ops/s
# Warmup Iteration   3: 16292642.227 ops/s
# Warmup Iteration   4: 17807616.554 ops/s
# Warmup Iteration   5: 17780785.071 ops/s
# Warmup Iteration   6: 17812689.579 ops/s
# Warmup Iteration   7: 17743867.092 ops/s
# Warmup Iteration   8: 17727161.817 ops/s
# Warmup Iteration   9: 17746011.188 ops/s
# Warmup Iteration  10: 17729308.831 ops/s
# Warmup Iteration  11: 17781118.513 ops/s
# Warmup Iteration  12: 17746113.156 ops/s
# Warmup Iteration  13: 17785145.530 ops/s
# Warmup Iteration  14: 17743528.610 ops/s
# Warmup Iteration  15: 17805044.977 ops/s
# Warmup Iteration  16: 17783146.721 ops/s
# Warmup Iteration  17: 17725156.510 ops/s
# Warmup Iteration  18: 17112152.589 ops/s
# Warmup Iteration  19: 17702460.344 ops/s
# Warmup Iteration  20: 17711658.923 ops/s
# Warmup Iteration  21: 17668972.907 ops/s
# Warmup Iteration  22: 17653448.941 ops/s
# Warmup Iteration  23: 17605014.219 ops/s
# Warmup Iteration  24: 17756189.474 ops/s
# Warmup Iteration  25: 17750350.242 ops/s
# Warmup Iteration  26: 17658800.450 ops/s
# Warmup Iteration  27: 17798861.905 ops/s
# Warmup Iteration  28: 17843888.065 ops/s
# Warmup Iteration  29: 17799306.924 ops/s
# Warmup Iteration  30: 17809722.340 ops/s
Iteration   1: 17808360.300 ops/s
Iteration   2: 17692051.845 ops/s
Iteration   3: 17747217.112 ops/s
Iteration   4: 17303526.615 ops/s
Iteration   5: 17052621.788 ops/s
Iteration   6: 17741317.808 ops/s
Iteration   7: 17824331.807 ops/s
Iteration   8: 17730395.782 ops/s
Iteration   9: 17790784.763 ops/s
Iteration  10: 17780438.903 ops/s
Iteration  11: 17768009.927 ops/s
Iteration  12: 17675684.757 ops/s
Iteration  13: 17734958.530 ops/s
Iteration  14: 17739860.007 ops/s
Iteration  15: 17766130.711 ops/s
Iteration  16: 17740200.694 ops/s
Iteration  17: 17752848.848 ops/s
Iteration  18: 17788679.237 ops/s
Iteration  19: 17828211.505 ops/s
Iteration  20: 17731912.405 ops/s
Iteration  21: 17789176.105 ops/s
Iteration  22: 17690466.581 ops/s
Iteration  23: 17801638.448 ops/s
Iteration  24: 17814597.376 ops/s
Iteration  25: 17764637.548 ops/s
Iteration  26: 17803566.692 ops/s
Iteration  27: 17785706.041 ops/s
Iteration  28: 17691203.470 ops/s
Iteration  29: 17781675.347 ops/s
Iteration  30: 17786982.438 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_select":
  17723573.113 ±(99.9%) 105028.253 ops/s [Average]
  (min, avg, max) = (17052621.788, 17723573.113, 17828211.505), stdev = 157201.356
  CI (99.9%): [17618544.860, 17828601.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  17723573.113 ± 105028.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8157617.730 ops/s
# Warmup Iteration   2: 16194589.070 ops/s
# Warmup Iteration   3: 16393592.065 ops/s
# Warmup Iteration   4: 17715845.791 ops/s
# Warmup Iteration   5: 17714781.519 ops/s
# Warmup Iteration   6: 17642960.539 ops/s
# Warmup Iteration   7: 17698054.451 ops/s
# Warmup Iteration   8: 17605508.814 ops/s
# Warmup Iteration   9: 17527266.606 ops/s
# Warmup Iteration  10: 17711626.401 ops/s
# Warmup Iteration  11: 17607020.550 ops/s
# Warmup Iteration  12: 17716133.570 ops/s
# Warmup Iteration  13: 17724544.227 ops/s
# Warmup Iteration  14: 17707555.053 ops/s
# Warmup Iteration  15: 17631007.432 ops/s
# Warmup Iteration  16: 17662946.372 ops/s
# Warmup Iteration  17: 17693931.648 ops/s
# Warmup Iteration  18: 17658159.837 ops/s
# Warmup Iteration  19: 17719563.080 ops/s
# Warmup Iteration  20: 17734131.895 ops/s
# Warmup Iteration  21: 17707863.687 ops/s
# Warmup Iteration  22: 17731813.868 ops/s
# Warmup Iteration  23: 17651849.131 ops/s
# Warmup Iteration  24: 17636471.158 ops/s
# Warmup Iteration  25: 17575657.073 ops/s
# Warmup Iteration  26: 17683071.422 ops/s
# Warmup Iteration  27: 17664122.428 ops/s
# Warmup Iteration  28: 17693557.900 ops/s
# Warmup Iteration  29: 17664669.263 ops/s
# Warmup Iteration  30: 17604740.948 ops/s
Iteration   1: 17707732.226 ops/s
Iteration   2: 17645270.419 ops/s
Iteration   3: 17731864.643 ops/s
Iteration   4: 17672120.823 ops/s
Iteration   5: 17737443.994 ops/s
Iteration   6: 17739582.039 ops/s
Iteration   7: 17673350.016 ops/s
Iteration   8: 17764235.251 ops/s
Iteration   9: 17754286.527 ops/s
Iteration  10: 17720432.240 ops/s
Iteration  11: 17660853.215 ops/s
Iteration  12: 17700188.349 ops/s
Iteration  13: 17660303.775 ops/s
Iteration  14: 16220654.579 ops/s
Iteration  15: 17695995.423 ops/s
Iteration  16: 17747010.782 ops/s
Iteration  17: 17740899.948 ops/s
Iteration  18: 17662347.835 ops/s
Iteration  19: 17733705.822 ops/s
Iteration  20: 17563160.542 ops/s
Iteration  21: 17662168.316 ops/s
Iteration  22: 17688212.889 ops/s
Iteration  23: 17706665.426 ops/s
Iteration  24: 17738178.804 ops/s
Iteration  25: 17618478.095 ops/s
Iteration  26: 17653020.546 ops/s
Iteration  27: 17608655.650 ops/s
Iteration  28: 17740802.255 ops/s
Iteration  29: 17672809.432 ops/s
Iteration  30: 17747677.228 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  17645603.570 ±(99.9%) 182715.314 ops/s [Average]
  (min, avg, max) = (16220654.579, 17645603.570, 17764235.251), stdev = 273479.701
  CI (99.9%): [17462888.256, 17828318.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  17645603.570 ± 182715.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50561.764 ops/s
# Warmup Iteration   2: 70292.152 ops/s
# Warmup Iteration   3: 98963.340 ops/s
# Warmup Iteration   4: 99161.751 ops/s
# Warmup Iteration   5: 99097.666 ops/s
# Warmup Iteration   6: 98976.215 ops/s
# Warmup Iteration   7: 98984.965 ops/s
# Warmup Iteration   8: 99028.788 ops/s
# Warmup Iteration   9: 84128.866 ops/s
# Warmup Iteration  10: 99389.871 ops/s
# Warmup Iteration  11: 99412.943 ops/s
# Warmup Iteration  12: 99427.881 ops/s
# Warmup Iteration  13: 99409.311 ops/s
# Warmup Iteration  14: 98773.439 ops/s
# Warmup Iteration  15: 99111.881 ops/s
# Warmup Iteration  16: 98696.932 ops/s
# Warmup Iteration  17: 98856.996 ops/s
# Warmup Iteration  18: 98978.465 ops/s
# Warmup Iteration  19: 98977.750 ops/s
# Warmup Iteration  20: 99385.441 ops/s
# Warmup Iteration  21: 98746.840 ops/s
# Warmup Iteration  22: 98903.981 ops/s
# Warmup Iteration  23: 99498.183 ops/s
# Warmup Iteration  24: 99443.560 ops/s
# Warmup Iteration  25: 99015.607 ops/s
# Warmup Iteration  26: 99141.897 ops/s
# Warmup Iteration  27: 99085.316 ops/s
# Warmup Iteration  28: 99462.629 ops/s
# Warmup Iteration  29: 99158.236 ops/s
# Warmup Iteration  30: 99195.010 ops/s
Iteration   1: 98839.154 ops/s
Iteration   2: 98944.751 ops/s
Iteration   3: 99057.420 ops/s
Iteration   4: 99174.617 ops/s
Iteration   5: 99346.229 ops/s
Iteration   6: 99165.174 ops/s
Iteration   7: 99197.483 ops/s
Iteration   8: 99503.832 ops/s
Iteration   9: 99508.216 ops/s
Iteration  10: 99256.007 ops/s
Iteration  11: 99550.149 ops/s
Iteration  12: 99375.491 ops/s
Iteration  13: 99365.466 ops/s
Iteration  14: 99840.435 ops/s
Iteration  15: 98650.173 ops/s
Iteration  16: 99673.051 ops/s
Iteration  17: 99202.389 ops/s
Iteration  18: 99579.825 ops/s
Iteration  19: 99609.723 ops/s
Iteration  20: 99617.528 ops/s
Iteration  21: 99460.931 ops/s
Iteration  22: 99073.078 ops/s
Iteration  23: 99098.919 ops/s
Iteration  24: 99439.575 ops/s
Iteration  25: 99206.548 ops/s
Iteration  26: 99310.041 ops/s
Iteration  27: 99321.402 ops/s
Iteration  28: 99451.903 ops/s
Iteration  29: 99346.907 ops/s
Iteration  30: 99596.445 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_serialization":
  99325.429 ±(99.9%) 174.656 ops/s [Average]
  (min, avg, max) = (98650.173, 99325.429, 99840.435), stdev = 261.416
  CI (99.9%): [99150.773, 99500.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_serialization  thrpt   30  99325.429 ± 174.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702499.864 ops/s
# Warmup Iteration   2: 763466.001 ops/s
# Warmup Iteration   3: 985599.244 ops/s
# Warmup Iteration   4: 980579.592 ops/s
# Warmup Iteration   5: 981786.148 ops/s
# Warmup Iteration   6: 983333.277 ops/s
# Warmup Iteration   7: 978056.302 ops/s
# Warmup Iteration   8: 980236.393 ops/s
# Warmup Iteration   9: 983051.527 ops/s
# Warmup Iteration  10: 981865.823 ops/s
# Warmup Iteration  11: 879277.227 ops/s
# Warmup Iteration  12: 942096.770 ops/s
# Warmup Iteration  13: 983595.888 ops/s
# Warmup Iteration  14: 983285.144 ops/s
# Warmup Iteration  15: 986568.862 ops/s
# Warmup Iteration  16: 984260.503 ops/s
# Warmup Iteration  17: 1043381.454 ops/s
# Warmup Iteration  18: 1045560.013 ops/s
# Warmup Iteration  19: 1042444.199 ops/s
# Warmup Iteration  20: 1041296.289 ops/s
# Warmup Iteration  21: 1039388.528 ops/s
# Warmup Iteration  22: 1045029.135 ops/s
# Warmup Iteration  23: 1043832.811 ops/s
# Warmup Iteration  24: 1038425.267 ops/s
# Warmup Iteration  25: 1038426.746 ops/s
# Warmup Iteration  26: 1046029.490 ops/s
# Warmup Iteration  27: 1045023.361 ops/s
# Warmup Iteration  28: 1042958.207 ops/s
# Warmup Iteration  29: 1040863.782 ops/s
# Warmup Iteration  30: 1039483.071 ops/s
Iteration   1: 1045318.773 ops/s
Iteration   2: 1041735.852 ops/s
Iteration   3: 1041718.202 ops/s
Iteration   4: 1035237.432 ops/s
Iteration   5: 1038780.515 ops/s
Iteration   6: 1040073.870 ops/s
Iteration   7: 1043003.590 ops/s
Iteration   8: 1042528.466 ops/s
Iteration   9: 1041086.016 ops/s
Iteration  10: 1039986.539 ops/s
Iteration  11: 1037454.783 ops/s
Iteration  12: 1042010.351 ops/s
Iteration  13: 1037495.795 ops/s
Iteration  14: 1038457.127 ops/s
Iteration  15: 1041346.048 ops/s
Iteration  16: 1044251.754 ops/s
Iteration  17: 1046524.572 ops/s
Iteration  18: 1033983.991 ops/s
Iteration  19: 1040916.488 ops/s
Iteration  20: 1036574.583 ops/s
Iteration  21: 1050894.772 ops/s
Iteration  22: 1038867.211 ops/s
Iteration  23: 1043752.146 ops/s
Iteration  24: 1038842.840 ops/s
Iteration  25: 1042172.685 ops/s
Iteration  26: 1042070.778 ops/s
Iteration  27: 1044320.920 ops/s
Iteration  28: 1042150.200 ops/s
Iteration  29: 1045701.495 ops/s
Iteration  30: 1040072.193 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_set":
  1041244.333 ±(99.9%) 2351.296 ops/s [Average]
  (min, avg, max) = (1033983.991, 1041244.333, 1050894.772), stdev = 3519.309
  CI (99.9%): [1038893.037, 1043595.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_set  thrpt   30  1041244.333 ± 2351.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706026.130 ops/s
# Warmup Iteration   2: 763595.778 ops/s
# Warmup Iteration   3: 985207.547 ops/s
# Warmup Iteration   4: 985669.515 ops/s
# Warmup Iteration   5: 983968.913 ops/s
# Warmup Iteration   6: 988274.965 ops/s
# Warmup Iteration   7: 988276.242 ops/s
# Warmup Iteration   8: 987643.748 ops/s
# Warmup Iteration   9: 987334.604 ops/s
# Warmup Iteration  10: 985101.467 ops/s
# Warmup Iteration  11: 867619.375 ops/s
# Warmup Iteration  12: 955765.266 ops/s
# Warmup Iteration  13: 987190.338 ops/s
# Warmup Iteration  14: 988775.771 ops/s
# Warmup Iteration  15: 985263.296 ops/s
# Warmup Iteration  16: 985081.086 ops/s
# Warmup Iteration  17: 1048195.244 ops/s
# Warmup Iteration  18: 1046044.124 ops/s
# Warmup Iteration  19: 1042113.367 ops/s
# Warmup Iteration  20: 1041835.219 ops/s
# Warmup Iteration  21: 1046242.583 ops/s
# Warmup Iteration  22: 1048554.972 ops/s
# Warmup Iteration  23: 1044002.561 ops/s
# Warmup Iteration  24: 1042643.959 ops/s
# Warmup Iteration  25: 1045271.795 ops/s
# Warmup Iteration  26: 1044926.457 ops/s
# Warmup Iteration  27: 1046543.102 ops/s
# Warmup Iteration  28: 1044707.325 ops/s
# Warmup Iteration  29: 1046319.855 ops/s
# Warmup Iteration  30: 1042129.496 ops/s
Iteration   1: 1039563.662 ops/s
Iteration   2: 1048605.112 ops/s
Iteration   3: 1042293.299 ops/s
Iteration   4: 1040628.603 ops/s
Iteration   5: 1045926.182 ops/s
Iteration   6: 1048194.463 ops/s
Iteration   7: 1044982.196 ops/s
Iteration   8: 1044366.773 ops/s
Iteration   9: 1045940.752 ops/s
Iteration  10: 1048145.836 ops/s
Iteration  11: 1047210.525 ops/s
Iteration  12: 1046886.242 ops/s
Iteration  13: 1046165.843 ops/s
Iteration  14: 1043391.666 ops/s
Iteration  15: 1045423.950 ops/s
Iteration  16: 1048954.573 ops/s
Iteration  17: 1046211.967 ops/s
Iteration  18: 1045602.483 ops/s
Iteration  19: 1047637.071 ops/s
Iteration  20: 1049553.224 ops/s
Iteration  21: 1045336.554 ops/s
Iteration  22: 1044984.346 ops/s
Iteration  23: 1043153.666 ops/s
Iteration  24: 1048105.598 ops/s
Iteration  25: 1046752.197 ops/s
Iteration  26: 1047102.274 ops/s
Iteration  27: 1040668.843 ops/s
Iteration  28: 1045672.236 ops/s
Iteration  29: 1044954.634 ops/s
Iteration  30: 1049971.761 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex":
  1045746.218 ±(99.9%) 1740.636 ops/s [Average]
  (min, avg, max) = (1039563.662, 1045746.218, 1049971.761), stdev = 2605.302
  CI (99.9%): [1044005.581, 1047486.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_setAtIndex  thrpt   30  1045746.218 ± 1740.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588115.913 ops/s
# Warmup Iteration   2: 711696.518 ops/s
# Warmup Iteration   3: 907441.239 ops/s
# Warmup Iteration   4: 904146.916 ops/s
# Warmup Iteration   5: 902942.779 ops/s
# Warmup Iteration   6: 903574.657 ops/s
# Warmup Iteration   7: 899930.614 ops/s
# Warmup Iteration   8: 902544.016 ops/s
# Warmup Iteration   9: 753074.483 ops/s
# Warmup Iteration  10: 901445.673 ops/s
# Warmup Iteration  11: 902971.410 ops/s
# Warmup Iteration  12: 904025.333 ops/s
# Warmup Iteration  13: 904076.346 ops/s
# Warmup Iteration  14: 903940.255 ops/s
# Warmup Iteration  15: 903357.436 ops/s
# Warmup Iteration  16: 903393.684 ops/s
# Warmup Iteration  17: 950534.723 ops/s
# Warmup Iteration  18: 949924.508 ops/s
# Warmup Iteration  19: 951606.368 ops/s
# Warmup Iteration  20: 954690.005 ops/s
# Warmup Iteration  21: 949612.269 ops/s
# Warmup Iteration  22: 952426.349 ops/s
# Warmup Iteration  23: 948449.383 ops/s
# Warmup Iteration  24: 953497.865 ops/s
# Warmup Iteration  25: 952134.454 ops/s
# Warmup Iteration  26: 950692.412 ops/s
# Warmup Iteration  27: 953933.196 ops/s
# Warmup Iteration  28: 946912.583 ops/s
# Warmup Iteration  29: 951102.568 ops/s
# Warmup Iteration  30: 951367.623 ops/s
Iteration   1: 954153.390 ops/s
Iteration   2: 946612.833 ops/s
Iteration   3: 949346.935 ops/s
Iteration   4: 953466.718 ops/s
Iteration   5: 950107.884 ops/s
Iteration   6: 950854.261 ops/s
Iteration   7: 949445.526 ops/s
Iteration   8: 948463.529 ops/s
Iteration   9: 951975.943 ops/s
Iteration  10: 953247.868 ops/s
Iteration  11: 952196.826 ops/s
Iteration  12: 951599.423 ops/s
Iteration  13: 944394.689 ops/s
Iteration  14: 945352.575 ops/s
Iteration  15: 947013.474 ops/s
Iteration  16: 948164.694 ops/s
Iteration  17: 950419.914 ops/s
Iteration  18: 950593.427 ops/s
Iteration  19: 947559.288 ops/s
Iteration  20: 949883.162 ops/s
Iteration  21: 952462.384 ops/s
Iteration  22: 947655.873 ops/s
Iteration  23: 953256.589 ops/s
Iteration  24: 953329.185 ops/s
Iteration  25: 949920.906 ops/s
Iteration  26: 951598.655 ops/s
Iteration  27: 951677.897 ops/s
Iteration  28: 954233.275 ops/s
Iteration  29: 953007.782 ops/s
Iteration  30: 950738.134 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThis":
  950424.435 ±(99.9%) 1749.948 ops/s [Average]
  (min, avg, max) = (944394.689, 950424.435, 954233.275), stdev = 2619.240
  CI (99.9%): [948674.486, 952174.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThis  thrpt   30  950424.435 ± 1749.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699737.652 ops/s
# Warmup Iteration   2: 766179.849 ops/s
# Warmup Iteration   3: 986555.297 ops/s
# Warmup Iteration   4: 989386.822 ops/s
# Warmup Iteration   5: 988810.272 ops/s
# Warmup Iteration   6: 994601.212 ops/s
# Warmup Iteration   7: 984274.536 ops/s
# Warmup Iteration   8: 984870.964 ops/s
# Warmup Iteration   9: 987189.218 ops/s
# Warmup Iteration  10: 981817.900 ops/s
# Warmup Iteration  11: 832168.004 ops/s
# Warmup Iteration  12: 986210.675 ops/s
# Warmup Iteration  13: 988719.204 ops/s
# Warmup Iteration  14: 994394.443 ops/s
# Warmup Iteration  15: 994991.287 ops/s
# Warmup Iteration  16: 989486.076 ops/s
# Warmup Iteration  17: 1054007.959 ops/s
# Warmup Iteration  18: 1055994.890 ops/s
# Warmup Iteration  19: 1053060.648 ops/s
# Warmup Iteration  20: 1056542.296 ops/s
# Warmup Iteration  21: 1051341.533 ops/s
# Warmup Iteration  22: 1052773.156 ops/s
# Warmup Iteration  23: 1059203.565 ops/s
# Warmup Iteration  24: 1050482.448 ops/s
# Warmup Iteration  25: 1052883.361 ops/s
# Warmup Iteration  26: 1051738.653 ops/s
# Warmup Iteration  27: 1050420.086 ops/s
# Warmup Iteration  28: 1051615.710 ops/s
# Warmup Iteration  29: 1048813.192 ops/s
# Warmup Iteration  30: 1049728.959 ops/s
Iteration   1: 1051833.861 ops/s
Iteration   2: 1054974.015 ops/s
Iteration   3: 1050469.067 ops/s
Iteration   4: 1051363.559 ops/s
Iteration   5: 1052668.798 ops/s
Iteration   6: 1051440.359 ops/s
Iteration   7: 1049983.239 ops/s
Iteration   8: 1056635.318 ops/s
Iteration   9: 1053393.189 ops/s
Iteration  10: 1055971.029 ops/s
Iteration  11: 1052077.862 ops/s
Iteration  12: 1049835.495 ops/s
Iteration  13: 1053856.987 ops/s
Iteration  14: 1054328.474 ops/s
Iteration  15: 1047226.595 ops/s
Iteration  16: 1052037.409 ops/s
Iteration  17: 1052422.010 ops/s
Iteration  18: 1052672.181 ops/s
Iteration  19: 1050781.200 ops/s
Iteration  20: 1057083.146 ops/s
Iteration  21: 1046880.769 ops/s
Iteration  22: 1061183.917 ops/s
Iteration  23: 1045629.015 ops/s
Iteration  24: 1052173.379 ops/s
Iteration  25: 1051149.534 ops/s
Iteration  26: 1051527.744 ops/s
Iteration  27: 1052076.825 ops/s
Iteration  28: 1055067.636 ops/s
Iteration  29: 1057652.808 ops/s
Iteration  30: 1051921.142 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy":
  1052543.885 ±(99.9%) 2165.169 ops/s [Average]
  (min, avg, max) = (1045629.015, 1052543.885, 1061183.917), stdev = 3240.723
  CI (99.9%): [1050378.717, 1054709.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisBy  thrpt   30  1052543.885 ± 2165.169  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686510.150 ops/s
# Warmup Iteration   2: 762063.156 ops/s
# Warmup Iteration   3: 998263.184 ops/s
# Warmup Iteration   4: 996109.321 ops/s
# Warmup Iteration   5: 997684.985 ops/s
# Warmup Iteration   6: 996926.656 ops/s
# Warmup Iteration   7: 996649.422 ops/s
# Warmup Iteration   8: 994072.662 ops/s
# Warmup Iteration   9: 999426.868 ops/s
# Warmup Iteration  10: 997154.218 ops/s
# Warmup Iteration  11: 839977.148 ops/s
# Warmup Iteration  12: 997955.796 ops/s
# Warmup Iteration  13: 996789.952 ops/s
# Warmup Iteration  14: 998558.876 ops/s
# Warmup Iteration  15: 999301.066 ops/s
# Warmup Iteration  16: 998545.435 ops/s
# Warmup Iteration  17: 1059536.235 ops/s
# Warmup Iteration  18: 1056071.188 ops/s
# Warmup Iteration  19: 1059757.306 ops/s
# Warmup Iteration  20: 1058489.309 ops/s
# Warmup Iteration  21: 1064013.171 ops/s
# Warmup Iteration  22: 1057078.097 ops/s
# Warmup Iteration  23: 1061198.345 ops/s
# Warmup Iteration  24: 1064624.079 ops/s
# Warmup Iteration  25: 1057940.673 ops/s
# Warmup Iteration  26: 1059732.149 ops/s
# Warmup Iteration  27: 1060166.923 ops/s
# Warmup Iteration  28: 1063454.789 ops/s
# Warmup Iteration  29: 1056933.839 ops/s
# Warmup Iteration  30: 1058751.646 ops/s
Iteration   1: 1060001.035 ops/s
Iteration   2: 1060107.734 ops/s
Iteration   3: 1063591.690 ops/s
Iteration   4: 1056682.640 ops/s
Iteration   5: 1058706.248 ops/s
Iteration   6: 1061933.117 ops/s
Iteration   7: 1056166.591 ops/s
Iteration   8: 1055123.374 ops/s
Iteration   9: 1061782.588 ops/s
Iteration  10: 1060136.687 ops/s
Iteration  11: 1060461.752 ops/s
Iteration  12: 1062787.869 ops/s
Iteration  13: 1052090.752 ops/s
Iteration  14: 1056611.221 ops/s
Iteration  15: 1061819.665 ops/s
Iteration  16: 1059312.431 ops/s
Iteration  17: 1058245.250 ops/s
Iteration  18: 1062367.601 ops/s
Iteration  19: 1060069.725 ops/s
Iteration  20: 1060861.049 ops/s
Iteration  21: 1058865.302 ops/s
Iteration  22: 1060612.332 ops/s
Iteration  23: 1060682.252 ops/s
Iteration  24: 1059014.616 ops/s
Iteration  25: 1056236.684 ops/s
Iteration  26: 1060703.598 ops/s
Iteration  27: 1061971.743 ops/s
Iteration  28: 1060978.832 ops/s
Iteration  29: 1060615.644 ops/s
Iteration  30: 1057946.895 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean":
  1059549.564 ±(99.9%) 1698.159 ops/s [Average]
  (min, avg, max) = (1052090.752, 1059549.564, 1063591.690), stdev = 2541.724
  CI (99.9%): [1057851.405, 1061247.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  1059549.564 ± 1698.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696725.996 ops/s
# Warmup Iteration   2: 759519.562 ops/s
# Warmup Iteration   3: 996717.343 ops/s
# Warmup Iteration   4: 998237.689 ops/s
# Warmup Iteration   5: 995746.489 ops/s
# Warmup Iteration   6: 994735.419 ops/s
# Warmup Iteration   7: 993504.317 ops/s
# Warmup Iteration   8: 995877.964 ops/s
# Warmup Iteration   9: 996156.675 ops/s
# Warmup Iteration  10: 999576.968 ops/s
# Warmup Iteration  11: 839103.301 ops/s
# Warmup Iteration  12: 995273.681 ops/s
# Warmup Iteration  13: 998834.394 ops/s
# Warmup Iteration  14: 997338.916 ops/s
# Warmup Iteration  15: 995274.848 ops/s
# Warmup Iteration  16: 996113.100 ops/s
# Warmup Iteration  17: 1056248.016 ops/s
# Warmup Iteration  18: 1061532.402 ops/s
# Warmup Iteration  19: 1060933.893 ops/s
# Warmup Iteration  20: 1059340.629 ops/s
# Warmup Iteration  21: 1058861.393 ops/s
# Warmup Iteration  22: 1059519.508 ops/s
# Warmup Iteration  23: 1060119.154 ops/s
# Warmup Iteration  24: 1059658.374 ops/s
# Warmup Iteration  25: 1060077.088 ops/s
# Warmup Iteration  26: 1059660.031 ops/s
# Warmup Iteration  27: 1062646.921 ops/s
# Warmup Iteration  28: 1062485.776 ops/s
# Warmup Iteration  29: 1060496.223 ops/s
# Warmup Iteration  30: 1063539.607 ops/s
Iteration   1: 1062631.806 ops/s
Iteration   2: 1064181.584 ops/s
Iteration   3: 1058432.114 ops/s
Iteration   4: 1059043.531 ops/s
Iteration   5: 1058149.525 ops/s
Iteration   6: 1063839.504 ops/s
Iteration   7: 1061171.877 ops/s
Iteration   8: 1061918.546 ops/s
Iteration   9: 1063892.091 ops/s
Iteration  10: 1057964.547 ops/s
Iteration  11: 1059058.651 ops/s
Iteration  12: 1066297.364 ops/s
Iteration  13: 1062298.125 ops/s
Iteration  14: 1063156.912 ops/s
Iteration  15: 1059166.187 ops/s
Iteration  16: 1063908.278 ops/s
Iteration  17: 1060709.317 ops/s
Iteration  18: 1062179.027 ops/s
Iteration  19: 1060876.438 ops/s
Iteration  20: 1059838.019 ops/s
Iteration  21: 1061135.935 ops/s
Iteration  22: 1061727.215 ops/s
Iteration  23: 1059273.035 ops/s
Iteration  24: 1063582.934 ops/s
Iteration  25: 1060517.056 ops/s
Iteration  26: 1061811.097 ops/s
Iteration  27: 1061650.445 ops/s
Iteration  28: 1064292.305 ops/s
Iteration  29: 1061938.286 ops/s
Iteration  30: 1062017.178 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte":
  1061555.298 ±(99.9%) 1390.944 ops/s [Average]
  (min, avg, max) = (1057964.547, 1061555.298, 1066297.364), stdev = 2081.900
  CI (99.9%): [1060164.353, 1062946.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1061555.298 ± 1390.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692458.144 ops/s
# Warmup Iteration   2: 756475.933 ops/s
# Warmup Iteration   3: 993009.548 ops/s
# Warmup Iteration   4: 991460.094 ops/s
# Warmup Iteration   5: 993402.530 ops/s
# Warmup Iteration   6: 991075.940 ops/s
# Warmup Iteration   7: 992949.907 ops/s
# Warmup Iteration   8: 993811.260 ops/s
# Warmup Iteration   9: 993043.646 ops/s
# Warmup Iteration  10: 996858.625 ops/s
# Warmup Iteration  11: 835145.272 ops/s
# Warmup Iteration  12: 990658.692 ops/s
# Warmup Iteration  13: 993299.072 ops/s
# Warmup Iteration  14: 994374.902 ops/s
# Warmup Iteration  15: 994094.986 ops/s
# Warmup Iteration  16: 996468.478 ops/s
# Warmup Iteration  17: 1052486.239 ops/s
# Warmup Iteration  18: 1053030.394 ops/s
# Warmup Iteration  19: 1054653.905 ops/s
# Warmup Iteration  20: 1053902.088 ops/s
# Warmup Iteration  21: 1054636.266 ops/s
# Warmup Iteration  22: 1055910.581 ops/s
# Warmup Iteration  23: 1053948.399 ops/s
# Warmup Iteration  24: 1054780.255 ops/s
# Warmup Iteration  25: 1057272.124 ops/s
# Warmup Iteration  26: 1050593.392 ops/s
# Warmup Iteration  27: 1055108.653 ops/s
# Warmup Iteration  28: 1056943.808 ops/s
# Warmup Iteration  29: 1055000.799 ops/s
# Warmup Iteration  30: 1058416.046 ops/s
Iteration   1: 1053597.590 ops/s
Iteration   2: 1054345.279 ops/s
Iteration   3: 1055274.915 ops/s
Iteration   4: 1052094.303 ops/s
Iteration   5: 1057271.395 ops/s
Iteration   6: 1056207.573 ops/s
Iteration   7: 1055850.256 ops/s
Iteration   8: 1048411.916 ops/s
Iteration   9: 1048322.362 ops/s
Iteration  10: 1057061.290 ops/s
Iteration  11: 1053238.964 ops/s
Iteration  12: 1053891.893 ops/s
Iteration  13: 1054946.549 ops/s
Iteration  14: 1053925.864 ops/s
Iteration  15: 1050503.910 ops/s
Iteration  16: 1051062.878 ops/s
Iteration  17: 1051815.413 ops/s
Iteration  18: 1043708.398 ops/s
Iteration  19: 1049406.074 ops/s
Iteration  20: 1052633.766 ops/s
Iteration  21: 1049601.830 ops/s
Iteration  22: 1049494.169 ops/s
Iteration  23: 1052165.938 ops/s
Iteration  24: 1049224.228 ops/s
Iteration  25: 1050604.987 ops/s
Iteration  26: 1056235.974 ops/s
Iteration  27: 1054211.387 ops/s
Iteration  28: 1054363.610 ops/s
Iteration  29: 1047499.007 ops/s
Iteration  30: 1052608.705 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar":
  1052319.347 ±(99.9%) 2132.173 ops/s [Average]
  (min, avg, max) = (1043708.398, 1052319.347, 1057271.395), stdev = 3191.337
  CI (99.9%): [1050187.174, 1054451.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1052319.347 ± 2132.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692993.547 ops/s
# Warmup Iteration   2: 761918.319 ops/s
# Warmup Iteration   3: 996535.964 ops/s
# Warmup Iteration   4: 990333.589 ops/s
# Warmup Iteration   5: 992295.345 ops/s
# Warmup Iteration   6: 988576.969 ops/s
# Warmup Iteration   7: 993120.574 ops/s
# Warmup Iteration   8: 989592.056 ops/s
# Warmup Iteration   9: 992104.157 ops/s
# Warmup Iteration  10: 992334.067 ops/s
# Warmup Iteration  11: 834064.131 ops/s
# Warmup Iteration  12: 993012.624 ops/s
# Warmup Iteration  13: 987504.910 ops/s
# Warmup Iteration  14: 991191.789 ops/s
# Warmup Iteration  15: 989677.534 ops/s
# Warmup Iteration  16: 992402.999 ops/s
# Warmup Iteration  17: 1056924.318 ops/s
# Warmup Iteration  18: 1058004.234 ops/s
# Warmup Iteration  19: 1056639.294 ops/s
# Warmup Iteration  20: 1055529.765 ops/s
# Warmup Iteration  21: 1055291.268 ops/s
# Warmup Iteration  22: 1055550.804 ops/s
# Warmup Iteration  23: 1051748.273 ops/s
# Warmup Iteration  24: 1055412.856 ops/s
# Warmup Iteration  25: 1055628.235 ops/s
# Warmup Iteration  26: 1057493.906 ops/s
# Warmup Iteration  27: 1052923.014 ops/s
# Warmup Iteration  28: 1059105.216 ops/s
# Warmup Iteration  29: 1054199.199 ops/s
# Warmup Iteration  30: 1054603.940 ops/s
Iteration   1: 1054870.402 ops/s
Iteration   2: 1058173.945 ops/s
Iteration   3: 1059801.790 ops/s
Iteration   4: 1055961.324 ops/s
Iteration   5: 1055007.691 ops/s
Iteration   6: 1058745.571 ops/s
Iteration   7: 1054696.506 ops/s
Iteration   8: 1058080.377 ops/s
Iteration   9: 1056134.273 ops/s
Iteration  10: 1054547.295 ops/s
Iteration  11: 1050467.462 ops/s
Iteration  12: 1062493.183 ops/s
Iteration  13: 1059392.022 ops/s
Iteration  14: 1059294.772 ops/s
Iteration  15: 1057222.469 ops/s
Iteration  16: 1058084.852 ops/s
Iteration  17: 1060100.663 ops/s
Iteration  18: 1047021.152 ops/s
Iteration  19: 1058820.950 ops/s
Iteration  20: 1054802.656 ops/s
Iteration  21: 1053373.787 ops/s
Iteration  22: 1052342.300 ops/s
Iteration  23: 1055839.176 ops/s
Iteration  24: 1055887.777 ops/s
Iteration  25: 1056779.412 ops/s
Iteration  26: 1054099.757 ops/s
Iteration  27: 1055826.442 ops/s
Iteration  28: 1052995.246 ops/s
Iteration  29: 1060816.966 ops/s
Iteration  30: 1056592.356 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble":
  1056275.752 ±(99.9%) 2148.156 ops/s [Average]
  (min, avg, max) = (1047021.152, 1056275.752, 1062493.183), stdev = 3215.259
  CI (99.9%): [1054127.596, 1058423.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  1056275.752 ± 2148.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693678.884 ops/s
# Warmup Iteration   2: 763474.875 ops/s
# Warmup Iteration   3: 993962.314 ops/s
# Warmup Iteration   4: 991604.311 ops/s
# Warmup Iteration   5: 994001.663 ops/s
# Warmup Iteration   6: 996226.940 ops/s
# Warmup Iteration   7: 994079.290 ops/s
# Warmup Iteration   8: 993783.287 ops/s
# Warmup Iteration   9: 994541.609 ops/s
# Warmup Iteration  10: 995120.173 ops/s
# Warmup Iteration  11: 839149.102 ops/s
# Warmup Iteration  12: 997339.100 ops/s
# Warmup Iteration  13: 996766.217 ops/s
# Warmup Iteration  14: 993561.699 ops/s
# Warmup Iteration  15: 995444.230 ops/s
# Warmup Iteration  16: 991927.059 ops/s
# Warmup Iteration  17: 1050794.579 ops/s
# Warmup Iteration  18: 1050372.286 ops/s
# Warmup Iteration  19: 1047978.567 ops/s
# Warmup Iteration  20: 1045494.195 ops/s
# Warmup Iteration  21: 1050368.870 ops/s
# Warmup Iteration  22: 1050514.452 ops/s
# Warmup Iteration  23: 1049563.385 ops/s
# Warmup Iteration  24: 1045271.175 ops/s
# Warmup Iteration  25: 1053033.003 ops/s
# Warmup Iteration  26: 1050046.696 ops/s
# Warmup Iteration  27: 1050837.043 ops/s
# Warmup Iteration  28: 1049699.591 ops/s
# Warmup Iteration  29: 1049786.538 ops/s
# Warmup Iteration  30: 1052760.055 ops/s
Iteration   1: 1052301.631 ops/s
Iteration   2: 1051884.719 ops/s
Iteration   3: 1051249.408 ops/s
Iteration   4: 1049268.532 ops/s
Iteration   5: 1046689.160 ops/s
Iteration   6: 1047091.218 ops/s
Iteration   7: 1050388.742 ops/s
Iteration   8: 1045291.580 ops/s
Iteration   9: 1049390.878 ops/s
Iteration  10: 1048468.416 ops/s
Iteration  11: 1046233.295 ops/s
Iteration  12: 1051788.187 ops/s
Iteration  13: 1048521.769 ops/s
Iteration  14: 1052296.523 ops/s
Iteration  15: 1049446.452 ops/s
Iteration  16: 1048387.595 ops/s
Iteration  17: 1049659.082 ops/s
Iteration  18: 1046288.680 ops/s
Iteration  19: 1049492.302 ops/s
Iteration  20: 1055198.918 ops/s
Iteration  21: 1058100.271 ops/s
Iteration  22: 1051956.800 ops/s
Iteration  23: 1053629.283 ops/s
Iteration  24: 1050714.956 ops/s
Iteration  25: 1053452.459 ops/s
Iteration  26: 1051018.869 ops/s
Iteration  27: 1050118.254 ops/s
Iteration  28: 1053251.467 ops/s
Iteration  29: 1053276.474 ops/s
Iteration  30: 1052973.984 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat":
  1050594.330 ±(99.9%) 1921.958 ops/s [Average]
  (min, avg, max) = (1045291.580, 1050594.330, 1058100.271), stdev = 2876.697
  CI (99.9%): [1048672.372, 1052516.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  1050594.330 ± 1921.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697966.915 ops/s
# Warmup Iteration   2: 769808.656 ops/s
# Warmup Iteration   3: 994377.231 ops/s
# Warmup Iteration   4: 993199.932 ops/s
# Warmup Iteration   5: 992900.504 ops/s
# Warmup Iteration   6: 994717.304 ops/s
# Warmup Iteration   7: 991655.121 ops/s
# Warmup Iteration   8: 993289.110 ops/s
# Warmup Iteration   9: 990075.340 ops/s
# Warmup Iteration  10: 990751.019 ops/s
# Warmup Iteration  11: 839174.926 ops/s
# Warmup Iteration  12: 992700.354 ops/s
# Warmup Iteration  13: 989920.938 ops/s
# Warmup Iteration  14: 993012.810 ops/s
# Warmup Iteration  15: 990564.530 ops/s
# Warmup Iteration  16: 990886.393 ops/s
# Warmup Iteration  17: 1051806.630 ops/s
# Warmup Iteration  18: 1057033.594 ops/s
# Warmup Iteration  19: 1051784.829 ops/s
# Warmup Iteration  20: 1052953.594 ops/s
# Warmup Iteration  21: 1054715.729 ops/s
# Warmup Iteration  22: 1052712.206 ops/s
# Warmup Iteration  23: 1052802.413 ops/s
# Warmup Iteration  24: 1055120.605 ops/s
# Warmup Iteration  25: 1051560.421 ops/s
# Warmup Iteration  26: 1051655.648 ops/s
# Warmup Iteration  27: 1048416.498 ops/s
# Warmup Iteration  28: 1044524.110 ops/s
# Warmup Iteration  29: 1053212.295 ops/s
# Warmup Iteration  30: 1053829.907 ops/s
Iteration   1: 1051760.384 ops/s
Iteration   2: 1055832.915 ops/s
Iteration   3: 1056836.745 ops/s
Iteration   4: 1061797.251 ops/s
Iteration   5: 1045798.140 ops/s
Iteration   6: 1054175.874 ops/s
Iteration   7: 1049792.105 ops/s
Iteration   8: 1054392.481 ops/s
Iteration   9: 1055423.024 ops/s
Iteration  10: 1049422.169 ops/s
Iteration  11: 1056725.505 ops/s
Iteration  12: 1047412.073 ops/s
Iteration  13: 1057150.408 ops/s
Iteration  14: 1053492.279 ops/s
Iteration  15: 1049695.845 ops/s
Iteration  16: 1057358.148 ops/s
Iteration  17: 1049807.953 ops/s
Iteration  18: 1051633.479 ops/s
Iteration  19: 1058276.876 ops/s
Iteration  20: 1052815.007 ops/s
Iteration  21: 1056311.987 ops/s
Iteration  22: 1055860.977 ops/s
Iteration  23: 1053503.297 ops/s
Iteration  24: 1054309.986 ops/s
Iteration  25: 1052988.507 ops/s
Iteration  26: 1052277.700 ops/s
Iteration  27: 1055325.843 ops/s
Iteration  28: 1055720.189 ops/s
Iteration  29: 1056261.954 ops/s
Iteration  30: 1059341.674 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt":
  1054050.026 ±(99.9%) 2387.994 ops/s [Average]
  (min, avg, max) = (1045798.140, 1054050.026, 1061797.251), stdev = 3574.238
  CI (99.9%): [1051662.032, 1056438.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1054050.026 ± 2387.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691661.660 ops/s
# Warmup Iteration   2: 765541.893 ops/s
# Warmup Iteration   3: 976407.646 ops/s
# Warmup Iteration   4: 975834.674 ops/s
# Warmup Iteration   5: 976330.809 ops/s
# Warmup Iteration   6: 978518.592 ops/s
# Warmup Iteration   7: 977243.811 ops/s
# Warmup Iteration   8: 978626.046 ops/s
# Warmup Iteration   9: 979856.080 ops/s
# Warmup Iteration  10: 978018.739 ops/s
# Warmup Iteration  11: 831706.773 ops/s
# Warmup Iteration  12: 978782.335 ops/s
# Warmup Iteration  13: 978361.361 ops/s
# Warmup Iteration  14: 979354.730 ops/s
# Warmup Iteration  15: 976764.806 ops/s
# Warmup Iteration  16: 978103.891 ops/s
# Warmup Iteration  17: 1043215.569 ops/s
# Warmup Iteration  18: 1038597.027 ops/s
# Warmup Iteration  19: 1039079.225 ops/s
# Warmup Iteration  20: 1041234.839 ops/s
# Warmup Iteration  21: 1039327.796 ops/s
# Warmup Iteration  22: 1037003.819 ops/s
# Warmup Iteration  23: 1042356.449 ops/s
# Warmup Iteration  24: 1040972.877 ops/s
# Warmup Iteration  25: 1043605.387 ops/s
# Warmup Iteration  26: 1038466.887 ops/s
# Warmup Iteration  27: 1043186.946 ops/s
# Warmup Iteration  28: 1036739.736 ops/s
# Warmup Iteration  29: 1041124.104 ops/s
# Warmup Iteration  30: 1034721.554 ops/s
Iteration   1: 1039376.998 ops/s
Iteration   2: 1033258.789 ops/s
Iteration   3: 1042517.708 ops/s
Iteration   4: 1039534.699 ops/s
Iteration   5: 1039386.514 ops/s
Iteration   6: 1042686.657 ops/s
Iteration   7: 1039697.735 ops/s
Iteration   8: 1050635.059 ops/s
Iteration   9: 1039421.747 ops/s
Iteration  10: 1036409.443 ops/s
Iteration  11: 1044036.234 ops/s
Iteration  12: 1038294.158 ops/s
Iteration  13: 1040894.663 ops/s
Iteration  14: 1045971.160 ops/s
Iteration  15: 1040538.083 ops/s
Iteration  16: 1038328.034 ops/s
Iteration  17: 1041982.643 ops/s
Iteration  18: 1047344.732 ops/s
Iteration  19: 1036647.010 ops/s
Iteration  20: 1040718.083 ops/s
Iteration  21: 1043226.126 ops/s
Iteration  22: 1040831.787 ops/s
Iteration  23: 1042277.704 ops/s
Iteration  24: 1042064.148 ops/s
Iteration  25: 1040018.780 ops/s
Iteration  26: 1044951.604 ops/s
Iteration  27: 1041062.956 ops/s
Iteration  28: 1038591.999 ops/s
Iteration  29: 1035148.207 ops/s
Iteration  30: 1043331.861 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong":
  1040972.844 ±(99.9%) 2383.890 ops/s [Average]
  (min, avg, max) = (1033258.789, 1040972.844, 1050635.059), stdev = 3568.094
  CI (99.9%): [1038588.954, 1043356.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1040972.844 ± 2383.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697019.207 ops/s
# Warmup Iteration   2: 762543.099 ops/s
# Warmup Iteration   3: 980249.202 ops/s
# Warmup Iteration   4: 978114.795 ops/s
# Warmup Iteration   5: 977086.570 ops/s
# Warmup Iteration   6: 981830.834 ops/s
# Warmup Iteration   7: 977769.291 ops/s
# Warmup Iteration   8: 978733.579 ops/s
# Warmup Iteration   9: 981583.183 ops/s
# Warmup Iteration  10: 980456.029 ops/s
# Warmup Iteration  11: 833993.942 ops/s
# Warmup Iteration  12: 979276.487 ops/s
# Warmup Iteration  13: 977842.948 ops/s
# Warmup Iteration  14: 983335.537 ops/s
# Warmup Iteration  15: 977331.858 ops/s
# Warmup Iteration  16: 982549.256 ops/s
# Warmup Iteration  17: 1040638.787 ops/s
# Warmup Iteration  18: 1038947.399 ops/s
# Warmup Iteration  19: 1036888.136 ops/s
# Warmup Iteration  20: 1035531.429 ops/s
# Warmup Iteration  21: 1036101.117 ops/s
# Warmup Iteration  22: 1038563.479 ops/s
# Warmup Iteration  23: 1038190.394 ops/s
# Warmup Iteration  24: 1037971.325 ops/s
# Warmup Iteration  25: 1035635.051 ops/s
# Warmup Iteration  26: 1037663.696 ops/s
# Warmup Iteration  27: 1038358.372 ops/s
# Warmup Iteration  28: 1037939.125 ops/s
# Warmup Iteration  29: 1039382.616 ops/s
# Warmup Iteration  30: 1036877.401 ops/s
Iteration   1: 1040251.012 ops/s
Iteration   2: 1030974.048 ops/s
Iteration   3: 1042999.769 ops/s
Iteration   4: 1038749.927 ops/s
Iteration   5: 1030631.523 ops/s
Iteration   6: 1036365.909 ops/s
Iteration   7: 1041125.469 ops/s
Iteration   8: 1036555.221 ops/s
Iteration   9: 1036454.747 ops/s
Iteration  10: 1036659.883 ops/s
Iteration  11: 1038724.925 ops/s
Iteration  12: 1042148.182 ops/s
Iteration  13: 1036963.434 ops/s
Iteration  14: 1033184.861 ops/s
Iteration  15: 1034280.937 ops/s
Iteration  16: 1039308.275 ops/s
Iteration  17: 1037227.300 ops/s
Iteration  18: 1036343.509 ops/s
Iteration  19: 1036740.842 ops/s
Iteration  20: 1040403.735 ops/s
Iteration  21: 1037411.211 ops/s
Iteration  22: 1036594.843 ops/s
Iteration  23: 1037600.606 ops/s
Iteration  24: 1042071.935 ops/s
Iteration  25: 1036937.681 ops/s
Iteration  26: 1039755.251 ops/s
Iteration  27: 1037535.354 ops/s
Iteration  28: 1035001.894 ops/s
Iteration  29: 1034257.326 ops/s
Iteration  30: 1031909.109 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort":
  1037172.291 ±(99.9%) 2091.762 ops/s [Average]
  (min, avg, max) = (1030631.523, 1037172.291, 1042999.769), stdev = 3130.851
  CI (99.9%): [1035080.528, 1039264.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1037172.291 ± 2091.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 584496.488 ops/s
# Warmup Iteration   2: 712352.858 ops/s
# Warmup Iteration   3: 903503.481 ops/s
# Warmup Iteration   4: 895300.598 ops/s
# Warmup Iteration   5: 896537.883 ops/s
# Warmup Iteration   6: 895652.621 ops/s
# Warmup Iteration   7: 897631.903 ops/s
# Warmup Iteration   8: 898326.743 ops/s
# Warmup Iteration   9: 749313.939 ops/s
# Warmup Iteration  10: 891918.106 ops/s
# Warmup Iteration  11: 893642.480 ops/s
# Warmup Iteration  12: 894686.165 ops/s
# Warmup Iteration  13: 894778.348 ops/s
# Warmup Iteration  14: 895999.423 ops/s
# Warmup Iteration  15: 892480.393 ops/s
# Warmup Iteration  16: 895018.550 ops/s
# Warmup Iteration  17: 945027.670 ops/s
# Warmup Iteration  18: 942557.263 ops/s
# Warmup Iteration  19: 942025.377 ops/s
# Warmup Iteration  20: 944835.397 ops/s
# Warmup Iteration  21: 947321.152 ops/s
# Warmup Iteration  22: 944755.088 ops/s
# Warmup Iteration  23: 945698.781 ops/s
# Warmup Iteration  24: 949194.029 ops/s
# Warmup Iteration  25: 944765.940 ops/s
# Warmup Iteration  26: 946655.478 ops/s
# Warmup Iteration  27: 946923.370 ops/s
# Warmup Iteration  28: 947686.717 ops/s
# Warmup Iteration  29: 944369.916 ops/s
# Warmup Iteration  30: 944374.227 ops/s
Iteration   1: 950290.036 ops/s
Iteration   2: 944398.642 ops/s
Iteration   3: 946696.334 ops/s
Iteration   4: 946286.459 ops/s
Iteration   5: 943286.353 ops/s
Iteration   6: 944917.440 ops/s
Iteration   7: 946518.563 ops/s
Iteration   8: 938183.565 ops/s
Iteration   9: 938687.176 ops/s
Iteration  10: 948541.466 ops/s
Iteration  11: 942001.281 ops/s
Iteration  12: 944768.042 ops/s
Iteration  13: 945569.220 ops/s
Iteration  14: 945901.983 ops/s
Iteration  15: 946771.611 ops/s
Iteration  16: 945388.442 ops/s
Iteration  17: 944379.072 ops/s
Iteration  18: 947975.961 ops/s
Iteration  19: 945636.129 ops/s
Iteration  20: 948622.816 ops/s
Iteration  21: 947266.130 ops/s
Iteration  22: 944957.580 ops/s
Iteration  23: 942519.437 ops/s
Iteration  24: 951377.770 ops/s
Iteration  25: 946178.802 ops/s
Iteration  26: 947952.798 ops/s
Iteration  27: 947590.394 ops/s
Iteration  28: 943784.631 ops/s
Iteration  29: 939467.882 ops/s
Iteration  30: 949077.579 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator":
  945499.786 ±(99.9%) 2087.951 ops/s [Average]
  (min, avg, max) = (938183.565, 945499.786, 951377.770), stdev = 3125.146
  CI (99.9%): [943411.836, 947587.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  945499.786 ± 2087.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 94637.106 ops/s
# Warmup Iteration   2: 103938.031 ops/s
# Warmup Iteration   3: 130935.651 ops/s
# Warmup Iteration   4: 134697.932 ops/s
# Warmup Iteration   5: 134570.457 ops/s
# Warmup Iteration   6: 134448.912 ops/s
# Warmup Iteration   7: 134472.521 ops/s
# Warmup Iteration   8: 134400.767 ops/s
# Warmup Iteration   9: 134806.751 ops/s
# Warmup Iteration  10: 134766.789 ops/s
# Warmup Iteration  11: 134587.478 ops/s
# Warmup Iteration  12: 126655.712 ops/s
# Warmup Iteration  13: 122704.470 ops/s
# Warmup Iteration  14: 135379.212 ops/s
# Warmup Iteration  15: 134905.936 ops/s
# Warmup Iteration  16: 135117.385 ops/s
# Warmup Iteration  17: 143051.461 ops/s
# Warmup Iteration  18: 142891.828 ops/s
# Warmup Iteration  19: 142427.195 ops/s
# Warmup Iteration  20: 142902.335 ops/s
# Warmup Iteration  21: 143047.076 ops/s
# Warmup Iteration  22: 142931.433 ops/s
# Warmup Iteration  23: 143154.789 ops/s
# Warmup Iteration  24: 142681.708 ops/s
# Warmup Iteration  25: 143200.116 ops/s
# Warmup Iteration  26: 143054.977 ops/s
# Warmup Iteration  27: 143037.665 ops/s
# Warmup Iteration  28: 142471.766 ops/s
# Warmup Iteration  29: 142359.136 ops/s
# Warmup Iteration  30: 143116.619 ops/s
Iteration   1: 142852.733 ops/s
Iteration   2: 142421.417 ops/s
Iteration   3: 142821.158 ops/s
Iteration   4: 142847.474 ops/s
Iteration   5: 143186.925 ops/s
Iteration   6: 141881.915 ops/s
Iteration   7: 143089.811 ops/s
Iteration   8: 143141.301 ops/s
Iteration   9: 142879.482 ops/s
Iteration  10: 142763.709 ops/s
Iteration  11: 142807.925 ops/s
Iteration  12: 142570.301 ops/s
Iteration  13: 142499.853 ops/s
Iteration  14: 142118.817 ops/s
Iteration  15: 142918.748 ops/s
Iteration  16: 142499.061 ops/s
Iteration  17: 142748.002 ops/s
Iteration  18: 142133.396 ops/s
Iteration  19: 142709.103 ops/s
Iteration  20: 143887.563 ops/s
Iteration  21: 143482.324 ops/s
Iteration  22: 142623.363 ops/s
Iteration  23: 142062.941 ops/s
Iteration  24: 143536.093 ops/s
Iteration  25: 142502.906 ops/s
Iteration  26: 142319.279 ops/s
Iteration  27: 142723.595 ops/s
Iteration  28: 142093.495 ops/s
Iteration  29: 142449.116 ops/s
Iteration  30: 142733.720 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subList":
  142710.184 ±(99.9%) 303.667 ops/s [Average]
  (min, avg, max) = (141881.915, 142710.184, 143887.563), stdev = 454.515
  CI (99.9%): [142406.517, 143013.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_subList  thrpt   30  142710.184 ± 303.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 221911.393 ops/s
# Warmup Iteration   2: 242450.720 ops/s
# Warmup Iteration   3: 297020.704 ops/s
# Warmup Iteration   4: 305397.070 ops/s
# Warmup Iteration   5: 305936.658 ops/s
# Warmup Iteration   6: 305148.623 ops/s
# Warmup Iteration   7: 305169.756 ops/s
# Warmup Iteration   8: 306976.914 ops/s
# Warmup Iteration   9: 305892.961 ops/s
# Warmup Iteration  10: 304414.046 ops/s
# Warmup Iteration  11: 305998.535 ops/s
# Warmup Iteration  12: 292826.836 ops/s
# Warmup Iteration  13: 277704.051 ops/s
# Warmup Iteration  14: 305050.312 ops/s
# Warmup Iteration  15: 302276.577 ops/s
# Warmup Iteration  16: 305374.414 ops/s
# Warmup Iteration  17: 322548.534 ops/s
# Warmup Iteration  18: 323113.258 ops/s
# Warmup Iteration  19: 322346.470 ops/s
# Warmup Iteration  20: 323479.286 ops/s
# Warmup Iteration  21: 321805.361 ops/s
# Warmup Iteration  22: 322450.644 ops/s
# Warmup Iteration  23: 322476.313 ops/s
# Warmup Iteration  24: 322430.734 ops/s
# Warmup Iteration  25: 321760.398 ops/s
# Warmup Iteration  26: 321739.611 ops/s
# Warmup Iteration  27: 321813.771 ops/s
# Warmup Iteration  28: 322449.380 ops/s
# Warmup Iteration  29: 322803.203 ops/s
# Warmup Iteration  30: 321721.705 ops/s
Iteration   1: 323617.093 ops/s
Iteration   2: 321540.000 ops/s
Iteration   3: 320380.569 ops/s
Iteration   4: 323080.269 ops/s
Iteration   5: 322719.589 ops/s
Iteration   6: 323564.976 ops/s
Iteration   7: 322860.938 ops/s
Iteration   8: 321210.768 ops/s
Iteration   9: 323102.428 ops/s
Iteration  10: 323145.473 ops/s
Iteration  11: 320753.778 ops/s
Iteration  12: 321967.756 ops/s
Iteration  13: 323616.486 ops/s
Iteration  14: 322074.809 ops/s
Iteration  15: 321473.828 ops/s
Iteration  16: 322313.913 ops/s
Iteration  17: 323008.131 ops/s
Iteration  18: 323207.001 ops/s
Iteration  19: 321072.340 ops/s
Iteration  20: 321468.654 ops/s
Iteration  21: 321073.028 ops/s
Iteration  22: 321908.812 ops/s
Iteration  23: 322419.959 ops/s
Iteration  24: 322558.038 ops/s
Iteration  25: 323160.369 ops/s
Iteration  26: 322686.247 ops/s
Iteration  27: 320718.804 ops/s
Iteration  28: 323067.493 ops/s
Iteration  29: 322225.498 ops/s
Iteration  30: 322746.264 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator":
  322291.444 ±(99.9%) 628.366 ops/s [Average]
  (min, avg, max) = (320380.569, 322291.444, 323617.093), stdev = 940.509
  CI (99.9%): [321663.077, 322919.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_subListListIterator  thrpt   30  322291.444 ± 628.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9377600.490 ops/s
# Warmup Iteration   2: 22477165.970 ops/s
# Warmup Iteration   3: 19029869.981 ops/s
# Warmup Iteration   4: 22912679.911 ops/s
# Warmup Iteration   5: 22955257.521 ops/s
# Warmup Iteration   6: 22908662.724 ops/s
# Warmup Iteration   7: 22888406.598 ops/s
# Warmup Iteration   8: 22923521.498 ops/s
# Warmup Iteration   9: 22907369.438 ops/s
# Warmup Iteration  10: 22889539.288 ops/s
# Warmup Iteration  11: 22765717.629 ops/s
# Warmup Iteration  12: 22846299.079 ops/s
# Warmup Iteration  13: 22808246.588 ops/s
# Warmup Iteration  14: 22794336.795 ops/s
# Warmup Iteration  15: 22916627.789 ops/s
# Warmup Iteration  16: 22874342.135 ops/s
# Warmup Iteration  17: 22915522.334 ops/s
# Warmup Iteration  18: 22921284.919 ops/s
# Warmup Iteration  19: 22881883.163 ops/s
# Warmup Iteration  20: 22848319.583 ops/s
# Warmup Iteration  21: 22887366.991 ops/s
# Warmup Iteration  22: 22918188.610 ops/s
# Warmup Iteration  23: 22878296.779 ops/s
# Warmup Iteration  24: 22906745.295 ops/s
# Warmup Iteration  25: 22873795.292 ops/s
# Warmup Iteration  26: 22802807.505 ops/s
# Warmup Iteration  27: 22916537.069 ops/s
# Warmup Iteration  28: 22930286.631 ops/s
# Warmup Iteration  29: 22841136.350 ops/s
# Warmup Iteration  30: 22850230.940 ops/s
Iteration   1: 22927282.107 ops/s
Iteration   2: 22880158.227 ops/s
Iteration   3: 22918802.279 ops/s
Iteration   4: 22931513.301 ops/s
Iteration   5: 22886237.053 ops/s
Iteration   6: 22939895.663 ops/s
Iteration   7: 22871158.701 ops/s
Iteration   8: 22746852.840 ops/s
Iteration   9: 22810815.197 ops/s
Iteration  10: 22890298.010 ops/s
Iteration  11: 22910301.959 ops/s
Iteration  12: 22913538.748 ops/s
Iteration  13: 22855402.272 ops/s
Iteration  14: 22930499.841 ops/s
Iteration  15: 22878792.878 ops/s
Iteration  16: 22884336.573 ops/s
Iteration  17: 22837510.249 ops/s
Iteration  18: 22789178.433 ops/s
Iteration  19: 22804952.120 ops/s
Iteration  20: 22789333.646 ops/s
Iteration  21: 22855520.549 ops/s
Iteration  22: 22810211.454 ops/s
Iteration  23: 22831901.373 ops/s
Iteration  24: 22909220.718 ops/s
Iteration  25: 22795020.813 ops/s
Iteration  26: 22815710.992 ops/s
Iteration  27: 22845556.318 ops/s
Iteration  28: 22817845.398 ops/s
Iteration  29: 22908707.052 ops/s
Iteration  30: 22913429.042 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_tap":
  22863332.794 ±(99.9%) 35199.211 ops/s [Average]
  (min, avg, max) = (22746852.840, 22863332.794, 22939895.663), stdev = 52684.525
  CI (99.9%): [22828133.583, 22898532.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  22863332.794 ± 35199.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3960661.706 ops/s
# Warmup Iteration   2: 9194384.820 ops/s
# Warmup Iteration   3: 7734915.176 ops/s
# Warmup Iteration   4: 9255114.640 ops/s
# Warmup Iteration   5: 9219133.023 ops/s
# Warmup Iteration   6: 9248714.246 ops/s
# Warmup Iteration   7: 9242852.874 ops/s
# Warmup Iteration   8: 9262304.553 ops/s
# Warmup Iteration   9: 9236565.372 ops/s
# Warmup Iteration  10: 9241201.948 ops/s
# Warmup Iteration  11: 9233569.982 ops/s
# Warmup Iteration  12: 9280364.060 ops/s
# Warmup Iteration  13: 9262866.695 ops/s
# Warmup Iteration  14: 9213922.303 ops/s
# Warmup Iteration  15: 9272724.482 ops/s
# Warmup Iteration  16: 9205067.664 ops/s
# Warmup Iteration  17: 9293640.674 ops/s
# Warmup Iteration  18: 9272192.374 ops/s
# Warmup Iteration  19: 9202377.931 ops/s
# Warmup Iteration  20: 9299996.431 ops/s
# Warmup Iteration  21: 9279367.579 ops/s
# Warmup Iteration  22: 9273092.451 ops/s
# Warmup Iteration  23: 9275573.341 ops/s
# Warmup Iteration  24: 9293652.775 ops/s
# Warmup Iteration  25: 9267551.020 ops/s
# Warmup Iteration  26: 9241159.297 ops/s
# Warmup Iteration  27: 9257421.489 ops/s
# Warmup Iteration  28: 9283574.819 ops/s
# Warmup Iteration  29: 9268677.874 ops/s
# Warmup Iteration  30: 9277489.008 ops/s
Iteration   1: 9326512.761 ops/s
Iteration   2: 9297946.666 ops/s
Iteration   3: 9295100.671 ops/s
Iteration   4: 9265981.764 ops/s
Iteration   5: 9292567.575 ops/s
Iteration   6: 9249460.464 ops/s
Iteration   7: 9229019.587 ops/s
Iteration   8: 9294515.818 ops/s
Iteration   9: 9333666.788 ops/s
Iteration  10: 9235700.090 ops/s
Iteration  11: 9224451.653 ops/s
Iteration  12: 9255079.665 ops/s
Iteration  13: 9275360.008 ops/s
Iteration  14: 9244518.070 ops/s
Iteration  15: 9244008.910 ops/s
Iteration  16: 9256312.034 ops/s
Iteration  17: 9271895.483 ops/s
Iteration  18: 9261807.113 ops/s
Iteration  19: 9311218.413 ops/s
Iteration  20: 9250589.571 ops/s
Iteration  21: 9269803.732 ops/s
Iteration  22: 9322139.898 ops/s
Iteration  23: 9300196.255 ops/s
Iteration  24: 9277365.290 ops/s
Iteration  25: 9307144.923 ops/s
Iteration  26: 9288009.368 ops/s
Iteration  27: 9269689.199 ops/s
Iteration  28: 9274790.715 ops/s
Iteration  29: 9299802.459 ops/s
Iteration  30: 9302740.373 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  9277579.844 ±(99.9%) 19496.596 ops/s [Average]
  (min, avg, max) = (9224451.653, 9277579.844, 9333666.788), stdev = 29181.589
  CI (99.9%): [9258083.248, 9297076.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  9277579.844 ± 19496.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11544254.842 ops/s
# Warmup Iteration   2: 22557847.191 ops/s
# Warmup Iteration   3: 23312104.613 ops/s
# Warmup Iteration   4: 24889775.170 ops/s
# Warmup Iteration   5: 24722557.366 ops/s
# Warmup Iteration   6: 24929305.565 ops/s
# Warmup Iteration   7: 24769892.770 ops/s
# Warmup Iteration   8: 24764963.825 ops/s
# Warmup Iteration   9: 24830761.834 ops/s
# Warmup Iteration  10: 24553231.821 ops/s
# Warmup Iteration  11: 24602635.777 ops/s
# Warmup Iteration  12: 24589554.126 ops/s
# Warmup Iteration  13: 23891182.230 ops/s
# Warmup Iteration  14: 24676625.083 ops/s
# Warmup Iteration  15: 24814360.587 ops/s
# Warmup Iteration  16: 24814583.667 ops/s
# Warmup Iteration  17: 24894449.714 ops/s
# Warmup Iteration  18: 24879652.117 ops/s
# Warmup Iteration  19: 24815339.699 ops/s
# Warmup Iteration  20: 24847631.326 ops/s
# Warmup Iteration  21: 24750480.685 ops/s
# Warmup Iteration  22: 24726989.507 ops/s
# Warmup Iteration  23: 24822508.893 ops/s
# Warmup Iteration  24: 24851408.493 ops/s
# Warmup Iteration  25: 24717155.414 ops/s
# Warmup Iteration  26: 24652604.062 ops/s
# Warmup Iteration  27: 24848913.279 ops/s
# Warmup Iteration  28: 24680854.298 ops/s
# Warmup Iteration  29: 24774310.685 ops/s
# Warmup Iteration  30: 24703151.248 ops/s
Iteration   1: 24877166.980 ops/s
Iteration   2: 24854860.027 ops/s
Iteration   3: 24756247.974 ops/s
Iteration   4: 24784482.007 ops/s
Iteration   5: 24932892.023 ops/s
Iteration   6: 24772332.505 ops/s
Iteration   7: 24642324.336 ops/s
Iteration   8: 24826470.461 ops/s
Iteration   9: 24926790.141 ops/s
Iteration  10: 24812881.524 ops/s
Iteration  11: 24855395.622 ops/s
Iteration  12: 24832852.510 ops/s
Iteration  13: 24809902.079 ops/s
Iteration  14: 24782820.123 ops/s
Iteration  15: 24826474.985 ops/s
Iteration  16: 24814891.562 ops/s
Iteration  17: 24937465.646 ops/s
Iteration  18: 24849201.519 ops/s
Iteration  19: 24755894.173 ops/s
Iteration  20: 24737662.336 ops/s
Iteration  21: 24902848.254 ops/s
Iteration  22: 24868397.349 ops/s
Iteration  23: 24811671.657 ops/s
Iteration  24: 24819330.321 ops/s
Iteration  25: 24785406.136 ops/s
Iteration  26: 24664837.596 ops/s
Iteration  27: 24735957.215 ops/s
Iteration  28: 24858999.730 ops/s
Iteration  29: 24797365.746 ops/s
Iteration  30: 24799336.586 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testClone":
  24814438.637 ±(99.9%) 46345.581 ops/s [Average]
  (min, avg, max) = (24642324.336, 24814438.637, 24937465.646), stdev = 69367.889
  CI (99.9%): [24768093.056, 24860784.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_testClone  thrpt   30  24814438.637 ± 46345.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14575574.345 ops/s
# Warmup Iteration   2: 30822216.532 ops/s
# Warmup Iteration   3: 26885845.988 ops/s
# Warmup Iteration   4: 31735016.121 ops/s
# Warmup Iteration   5: 31645993.614 ops/s
# Warmup Iteration   6: 31648655.897 ops/s
# Warmup Iteration   7: 31613747.624 ops/s
# Warmup Iteration   8: 31533853.269 ops/s
# Warmup Iteration   9: 31638033.157 ops/s
# Warmup Iteration  10: 31671819.002 ops/s
# Warmup Iteration  11: 31733073.368 ops/s
# Warmup Iteration  12: 31763705.616 ops/s
# Warmup Iteration  13: 31711238.195 ops/s
# Warmup Iteration  14: 31662614.251 ops/s
# Warmup Iteration  15: 31581607.884 ops/s
# Warmup Iteration  16: 31675737.407 ops/s
# Warmup Iteration  17: 31645870.034 ops/s
# Warmup Iteration  18: 31707883.151 ops/s
# Warmup Iteration  19: 31675769.614 ops/s
# Warmup Iteration  20: 31676006.276 ops/s
# Warmup Iteration  21: 31602679.884 ops/s
# Warmup Iteration  22: 31701445.234 ops/s
# Warmup Iteration  23: 31679395.296 ops/s
# Warmup Iteration  24: 31644593.066 ops/s
# Warmup Iteration  25: 31582887.143 ops/s
# Warmup Iteration  26: 31733861.434 ops/s
# Warmup Iteration  27: 31727138.748 ops/s
# Warmup Iteration  28: 31761144.020 ops/s
# Warmup Iteration  29: 31625420.280 ops/s
# Warmup Iteration  30: 31671315.757 ops/s
Iteration   1: 31719791.352 ops/s
Iteration   2: 31683712.882 ops/s
Iteration   3: 31731145.901 ops/s
Iteration   4: 31555054.970 ops/s
Iteration   5: 31654202.106 ops/s
Iteration   6: 31624560.734 ops/s
Iteration   7: 31609370.310 ops/s
Iteration   8: 31576984.916 ops/s
Iteration   9: 31483204.312 ops/s
Iteration  10: 31852935.764 ops/s
Iteration  11: 31618804.803 ops/s
Iteration  12: 31684070.712 ops/s
Iteration  13: 31805348.019 ops/s
Iteration  14: 31671614.592 ops/s
Iteration  15: 31538927.790 ops/s
Iteration  16: 31476613.955 ops/s
Iteration  17: 31792460.044 ops/s
Iteration  18: 31756893.034 ops/s
Iteration  19: 31466209.312 ops/s
Iteration  20: 31748075.239 ops/s
Iteration  21: 31696446.605 ops/s
Iteration  22: 31535071.441 ops/s
Iteration  23: 31796052.404 ops/s
Iteration  24: 31691021.849 ops/s
Iteration  25: 31590798.657 ops/s
Iteration  26: 31644880.192 ops/s
Iteration  27: 31573553.623 ops/s
Iteration  28: 31609954.822 ops/s
Iteration  29: 31640606.666 ops/s
Iteration  30: 31629834.971 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testEquals":
  31648606.733 ±(99.9%) 67076.286 ops/s [Average]
  (min, avg, max) = (31466209.312, 31648606.733, 31852935.764), stdev = 100396.635
  CI (99.9%): [31581530.447, 31715683.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_testEquals  thrpt   30  31648606.733 ± 67076.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4262374.648 ops/s
# Warmup Iteration   2: 9376604.727 ops/s
# Warmup Iteration   3: 8010838.944 ops/s
# Warmup Iteration   4: 9456410.827 ops/s
# Warmup Iteration   5: 9522117.209 ops/s
# Warmup Iteration   6: 9459165.067 ops/s
# Warmup Iteration   7: 9507817.940 ops/s
# Warmup Iteration   8: 9453245.128 ops/s
# Warmup Iteration   9: 9483796.666 ops/s
# Warmup Iteration  10: 9506172.983 ops/s
# Warmup Iteration  11: 9532984.722 ops/s
# Warmup Iteration  12: 9545576.814 ops/s
# Warmup Iteration  13: 9520481.892 ops/s
# Warmup Iteration  14: 9453743.932 ops/s
# Warmup Iteration  15: 9487390.262 ops/s
# Warmup Iteration  16: 9498205.422 ops/s
# Warmup Iteration  17: 9457166.872 ops/s
# Warmup Iteration  18: 9495942.292 ops/s
# Warmup Iteration  19: 9483713.989 ops/s
# Warmup Iteration  20: 9456755.176 ops/s
# Warmup Iteration  21: 9479951.110 ops/s
# Warmup Iteration  22: 9450006.745 ops/s
# Warmup Iteration  23: 9458054.855 ops/s
# Warmup Iteration  24: 9480909.727 ops/s
# Warmup Iteration  25: 9436098.267 ops/s
# Warmup Iteration  26: 9405191.590 ops/s
# Warmup Iteration  27: 9446302.150 ops/s
# Warmup Iteration  28: 9449502.031 ops/s
# Warmup Iteration  29: 9443023.024 ops/s
# Warmup Iteration  30: 9459479.343 ops/s
Iteration   1: 9474382.359 ops/s
Iteration   2: 9415501.819 ops/s
Iteration   3: 9491740.959 ops/s
Iteration   4: 9443202.912 ops/s
Iteration   5: 9503615.233 ops/s
Iteration   6: 9488407.497 ops/s
Iteration   7: 9512944.392 ops/s
Iteration   8: 9434549.301 ops/s
Iteration   9: 9451546.590 ops/s
Iteration  10: 9473727.610 ops/s
Iteration  11: 9485185.304 ops/s
Iteration  12: 9480631.759 ops/s
Iteration  13: 9428006.299 ops/s
Iteration  14: 9427645.076 ops/s
Iteration  15: 9434816.859 ops/s
Iteration  16: 9485091.744 ops/s
Iteration  17: 9470473.757 ops/s
Iteration  18: 9507743.175 ops/s
Iteration  19: 9528965.271 ops/s
Iteration  20: 9496103.640 ops/s
Iteration  21: 9450469.602 ops/s
Iteration  22: 9459924.294 ops/s
Iteration  23: 9496718.037 ops/s
Iteration  24: 9522598.355 ops/s
Iteration  25: 9436945.116 ops/s
Iteration  26: 9501856.824 ops/s
Iteration  27: 9486330.943 ops/s
Iteration  28: 9419502.424 ops/s
Iteration  29: 9482852.652 ops/s
Iteration  30: 9464189.858 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  9471855.655 ±(99.9%) 21141.125 ops/s [Average]
  (min, avg, max) = (9415501.819, 9471855.655, 9528965.271), stdev = 31643.043
  CI (99.9%): [9450714.531, 9492996.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  9471855.655 ± 21141.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701878.103 ops/s
# Warmup Iteration   2: 754733.649 ops/s
# Warmup Iteration   3: 998621.316 ops/s
# Warmup Iteration   4: 1001138.491 ops/s
# Warmup Iteration   5: 1003416.331 ops/s
# Warmup Iteration   6: 1001686.664 ops/s
# Warmup Iteration   7: 1003127.774 ops/s
# Warmup Iteration   8: 1000351.814 ops/s
# Warmup Iteration   9: 1000996.541 ops/s
# Warmup Iteration  10: 1001883.092 ops/s
# Warmup Iteration  11: 848128.188 ops/s
# Warmup Iteration  12: 1000617.700 ops/s
# Warmup Iteration  13: 1002074.423 ops/s
# Warmup Iteration  14: 999351.401 ops/s
# Warmup Iteration  15: 1004033.247 ops/s
# Warmup Iteration  16: 1003285.680 ops/s
# Warmup Iteration  17: 1060089.448 ops/s
# Warmup Iteration  18: 1062083.046 ops/s
# Warmup Iteration  19: 1062926.086 ops/s
# Warmup Iteration  20: 1062556.868 ops/s
# Warmup Iteration  21: 1057648.778 ops/s
# Warmup Iteration  22: 1061584.093 ops/s
# Warmup Iteration  23: 1062888.469 ops/s
# Warmup Iteration  24: 1060634.190 ops/s
# Warmup Iteration  25: 1059280.797 ops/s
# Warmup Iteration  26: 1058803.960 ops/s
# Warmup Iteration  27: 1060055.941 ops/s
# Warmup Iteration  28: 1058589.352 ops/s
# Warmup Iteration  29: 1059510.818 ops/s
# Warmup Iteration  30: 1063059.754 ops/s
Iteration   1: 1062425.205 ops/s
Iteration   2: 1056874.097 ops/s
Iteration   3: 1062682.130 ops/s
Iteration   4: 1060530.451 ops/s
Iteration   5: 1058620.706 ops/s
Iteration   6: 1059466.036 ops/s
Iteration   7: 1066263.328 ops/s
Iteration   8: 1061967.773 ops/s
Iteration   9: 1060077.951 ops/s
Iteration  10: 1059665.264 ops/s
Iteration  11: 1066875.384 ops/s
Iteration  12: 1062710.084 ops/s
Iteration  13: 1061666.868 ops/s
Iteration  14: 1059328.488 ops/s
Iteration  15: 1060396.943 ops/s
Iteration  16: 1055042.188 ops/s
Iteration  17: 1061176.565 ops/s
Iteration  18: 1062046.490 ops/s
Iteration  19: 1060179.834 ops/s
Iteration  20: 1060597.556 ops/s
Iteration  21: 1064547.458 ops/s
Iteration  22: 1061488.117 ops/s
Iteration  23: 1057974.615 ops/s
Iteration  24: 1060933.801 ops/s
Iteration  25: 1065275.367 ops/s
Iteration  26: 1061025.049 ops/s
Iteration  27: 1058154.562 ops/s
Iteration  28: 1061446.739 ops/s
Iteration  29: 1057308.357 ops/s
Iteration  30: 1057328.117 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_with":
  1060802.517 ±(99.9%) 1816.570 ops/s [Average]
  (min, avg, max) = (1055042.188, 1060802.517, 1066875.384), stdev = 2718.957
  CI (99.9%): [1058985.947, 1062619.088] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  1060802.517 ± 1816.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695870.224 ops/s
# Warmup Iteration   2: 762950.884 ops/s
# Warmup Iteration   3: 998056.444 ops/s
# Warmup Iteration   4: 991404.104 ops/s
# Warmup Iteration   5: 992404.680 ops/s
# Warmup Iteration   6: 998695.990 ops/s
# Warmup Iteration   7: 991873.992 ops/s
# Warmup Iteration   8: 989967.096 ops/s
# Warmup Iteration   9: 987866.334 ops/s
# Warmup Iteration  10: 993699.980 ops/s
# Warmup Iteration  11: 832807.665 ops/s
# Warmup Iteration  12: 989027.587 ops/s
# Warmup Iteration  13: 990181.775 ops/s
# Warmup Iteration  14: 991262.431 ops/s
# Warmup Iteration  15: 991808.334 ops/s
# Warmup Iteration  16: 990777.201 ops/s
# Warmup Iteration  17: 1055754.759 ops/s
# Warmup Iteration  18: 1056813.697 ops/s
# Warmup Iteration  19: 1057610.031 ops/s
# Warmup Iteration  20: 1053448.831 ops/s
# Warmup Iteration  21: 1060282.745 ops/s
# Warmup Iteration  22: 1055290.648 ops/s
# Warmup Iteration  23: 1054232.597 ops/s
# Warmup Iteration  24: 1054739.407 ops/s
# Warmup Iteration  25: 1057322.941 ops/s
# Warmup Iteration  26: 1052670.842 ops/s
# Warmup Iteration  27: 1056037.345 ops/s
# Warmup Iteration  28: 1056318.259 ops/s
# Warmup Iteration  29: 1052058.929 ops/s
# Warmup Iteration  30: 1054976.543 ops/s
Iteration   1: 1057078.455 ops/s
Iteration   2: 1053147.020 ops/s
Iteration   3: 1055980.156 ops/s
Iteration   4: 1053322.048 ops/s
Iteration   5: 1055215.287 ops/s
Iteration   6: 1056332.070 ops/s
Iteration   7: 1051329.700 ops/s
Iteration   8: 1054636.065 ops/s
Iteration   9: 1056785.066 ops/s
Iteration  10: 1060009.155 ops/s
Iteration  11: 1054028.953 ops/s
Iteration  12: 1052473.779 ops/s
Iteration  13: 1056206.018 ops/s
Iteration  14: 1054283.173 ops/s
Iteration  15: 1048482.544 ops/s
Iteration  16: 1055534.313 ops/s
Iteration  17: 1055537.093 ops/s
Iteration  18: 1055917.500 ops/s
Iteration  19: 1052691.124 ops/s
Iteration  20: 1059474.925 ops/s
Iteration  21: 1055474.886 ops/s
Iteration  22: 1053612.088 ops/s
Iteration  23: 1056830.470 ops/s
Iteration  24: 1057419.136 ops/s
Iteration  25: 1051315.681 ops/s
Iteration  26: 1052761.911 ops/s
Iteration  27: 1054299.170 ops/s
Iteration  28: 1052612.017 ops/s
Iteration  29: 1054290.350 ops/s
Iteration  30: 1057170.596 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withAll":
  1054808.358 ±(99.9%) 1636.624 ops/s [Average]
  (min, avg, max) = (1048482.544, 1054808.358, 1060009.155), stdev = 2449.623
  CI (99.9%): [1053171.734, 1056444.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  1054808.358 ± 1636.624  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706427.725 ops/s
# Warmup Iteration   2: 766334.101 ops/s
# Warmup Iteration   3: 967961.457 ops/s
# Warmup Iteration   4: 970369.011 ops/s
# Warmup Iteration   5: 971519.784 ops/s
# Warmup Iteration   6: 968075.920 ops/s
# Warmup Iteration   7: 965457.222 ops/s
# Warmup Iteration   8: 969378.585 ops/s
# Warmup Iteration   9: 968785.887 ops/s
# Warmup Iteration  10: 971198.058 ops/s
# Warmup Iteration  11: 872851.805 ops/s
# Warmup Iteration  12: 932485.195 ops/s
# Warmup Iteration  13: 970133.525 ops/s
# Warmup Iteration  14: 970305.095 ops/s
# Warmup Iteration  15: 972198.993 ops/s
# Warmup Iteration  16: 972910.246 ops/s
# Warmup Iteration  17: 1041656.542 ops/s
# Warmup Iteration  18: 1041361.875 ops/s
# Warmup Iteration  19: 1042022.199 ops/s
# Warmup Iteration  20: 1042531.216 ops/s
# Warmup Iteration  21: 1040093.067 ops/s
# Warmup Iteration  22: 1040712.226 ops/s
# Warmup Iteration  23: 1038689.973 ops/s
# Warmup Iteration  24: 1043703.755 ops/s
# Warmup Iteration  25: 1038110.348 ops/s
# Warmup Iteration  26: 1042546.140 ops/s
# Warmup Iteration  27: 1039240.426 ops/s
# Warmup Iteration  28: 1040484.322 ops/s
# Warmup Iteration  29: 1040670.717 ops/s
# Warmup Iteration  30: 1038431.526 ops/s
Iteration   1: 1044339.189 ops/s
Iteration   2: 1040061.046 ops/s
Iteration   3: 1044275.736 ops/s
Iteration   4: 1040734.015 ops/s
Iteration   5: 1041877.620 ops/s
Iteration   6: 1040103.977 ops/s
Iteration   7: 1033311.937 ops/s
Iteration   8: 1041663.756 ops/s
Iteration   9: 1043377.248 ops/s
Iteration  10: 1039885.232 ops/s
Iteration  11: 1037472.656 ops/s
Iteration  12: 1039864.351 ops/s
Iteration  13: 1034247.545 ops/s
Iteration  14: 1038943.380 ops/s
Iteration  15: 1039768.384 ops/s
Iteration  16: 1040616.491 ops/s
Iteration  17: 1035230.003 ops/s
Iteration  18: 1041090.189 ops/s
Iteration  19: 1037571.972 ops/s
Iteration  20: 1036361.252 ops/s
Iteration  21: 1039327.446 ops/s
Iteration  22: 1036733.867 ops/s
Iteration  23: 1040078.023 ops/s
Iteration  24: 1038694.456 ops/s
Iteration  25: 1035850.758 ops/s
Iteration  26: 1038018.281 ops/s
Iteration  27: 1038564.643 ops/s
Iteration  28: 1041830.624 ops/s
Iteration  29: 1042994.666 ops/s
Iteration  30: 1041081.622 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_without":
  1039465.679 ±(99.9%) 1861.762 ops/s [Average]
  (min, avg, max) = (1033311.937, 1039465.679, 1044339.189), stdev = 2786.598
  CI (99.9%): [1037603.917, 1041327.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  1039465.679 ± 1861.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691283.561 ops/s
# Warmup Iteration   2: 762262.963 ops/s
# Warmup Iteration   3: 1003152.703 ops/s
# Warmup Iteration   4: 997530.205 ops/s
# Warmup Iteration   5: 995273.927 ops/s
# Warmup Iteration   6: 997967.920 ops/s
# Warmup Iteration   7: 995838.921 ops/s
# Warmup Iteration   8: 993350.814 ops/s
# Warmup Iteration   9: 996383.276 ops/s
# Warmup Iteration  10: 983211.115 ops/s
# Warmup Iteration  11: 853857.660 ops/s
# Warmup Iteration  12: 994096.748 ops/s
# Warmup Iteration  13: 992154.239 ops/s
# Warmup Iteration  14: 997980.058 ops/s
# Warmup Iteration  15: 994870.942 ops/s
# Warmup Iteration  16: 996450.715 ops/s
# Warmup Iteration  17: 1053638.883 ops/s
# Warmup Iteration  18: 1055490.880 ops/s
# Warmup Iteration  19: 1059546.176 ops/s
# Warmup Iteration  20: 1056240.711 ops/s
# Warmup Iteration  21: 1060052.089 ops/s
# Warmup Iteration  22: 1054941.577 ops/s
# Warmup Iteration  23: 1056597.271 ops/s
# Warmup Iteration  24: 1054532.483 ops/s
# Warmup Iteration  25: 1058112.523 ops/s
# Warmup Iteration  26: 1055668.981 ops/s
# Warmup Iteration  27: 1060105.320 ops/s
# Warmup Iteration  28: 1053646.743 ops/s
# Warmup Iteration  29: 1060279.470 ops/s
# Warmup Iteration  30: 1054363.487 ops/s
Iteration   1: 1055639.754 ops/s
Iteration   2: 1054236.954 ops/s
Iteration   3: 1054579.364 ops/s
Iteration   4: 1055063.556 ops/s
Iteration   5: 1054919.515 ops/s
Iteration   6: 1056761.395 ops/s
Iteration   7: 1057434.420 ops/s
Iteration   8: 1055573.924 ops/s
Iteration   9: 1059068.899 ops/s
Iteration  10: 1052832.743 ops/s
Iteration  11: 1056770.146 ops/s
Iteration  12: 1056565.074 ops/s
Iteration  13: 1054527.133 ops/s
Iteration  14: 1059473.592 ops/s
Iteration  15: 1061023.286 ops/s
Iteration  16: 1059229.237 ops/s
Iteration  17: 1056386.949 ops/s
Iteration  18: 1059013.651 ops/s
Iteration  19: 1059886.964 ops/s
Iteration  20: 1052321.654 ops/s
Iteration  21: 1056102.921 ops/s
Iteration  22: 1056443.527 ops/s
Iteration  23: 1051361.969 ops/s
Iteration  24: 1055134.574 ops/s
Iteration  25: 1058482.325 ops/s
Iteration  26: 1058551.910 ops/s
Iteration  27: 1057733.102 ops/s
Iteration  28: 1053788.513 ops/s
Iteration  29: 1058314.137 ops/s
Iteration  30: 1054406.340 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  1056387.584 ±(99.9%) 1592.070 ops/s [Average]
  (min, avg, max) = (1051361.969, 1056387.584, 1061023.286), stdev = 2382.936
  CI (99.9%): [1054795.514, 1057979.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  1056387.584 ± 1592.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694576.380 ops/s
# Warmup Iteration   2: 1771619.538 ops/s
# Warmup Iteration   3: 1961277.496 ops/s
# Warmup Iteration   4: 1610172.092 ops/s
# Warmup Iteration   5: 1962822.547 ops/s
# Warmup Iteration   6: 1956963.682 ops/s
# Warmup Iteration   7: 1952679.601 ops/s
# Warmup Iteration   8: 1956327.690 ops/s
# Warmup Iteration   9: 1956224.311 ops/s
# Warmup Iteration  10: 1954554.778 ops/s
# Warmup Iteration  11: 1961863.014 ops/s
# Warmup Iteration  12: 1961251.246 ops/s
# Warmup Iteration  13: 1965989.249 ops/s
# Warmup Iteration  14: 1957423.718 ops/s
# Warmup Iteration  15: 1951109.527 ops/s
# Warmup Iteration  16: 1958756.716 ops/s
# Warmup Iteration  17: 1960020.662 ops/s
# Warmup Iteration  18: 1957695.713 ops/s
# Warmup Iteration  19: 1957835.547 ops/s
# Warmup Iteration  20: 1958416.751 ops/s
# Warmup Iteration  21: 1951753.085 ops/s
# Warmup Iteration  22: 1956314.379 ops/s
# Warmup Iteration  23: 1958931.287 ops/s
# Warmup Iteration  24: 1958172.302 ops/s
# Warmup Iteration  25: 1957183.315 ops/s
# Warmup Iteration  26: 1957949.474 ops/s
# Warmup Iteration  27: 1959247.316 ops/s
# Warmup Iteration  28: 1954967.856 ops/s
# Warmup Iteration  29: 1959245.344 ops/s
# Warmup Iteration  30: 1959509.206 ops/s
Iteration   1: 1951819.944 ops/s
Iteration   2: 1955870.814 ops/s
Iteration   3: 1964413.898 ops/s
Iteration   4: 1961639.198 ops/s
Iteration   5: 1964513.373 ops/s
Iteration   6: 1955138.434 ops/s
Iteration   7: 1954959.632 ops/s
Iteration   8: 1960594.000 ops/s
Iteration   9: 1964488.695 ops/s
Iteration  10: 1959077.399 ops/s
Iteration  11: 1965592.279 ops/s
Iteration  12: 1961425.674 ops/s
Iteration  13: 1957781.650 ops/s
Iteration  14: 1954692.808 ops/s
Iteration  15: 1955038.241 ops/s
Iteration  16: 1961848.128 ops/s
Iteration  17: 1959899.740 ops/s
Iteration  18: 1957483.783 ops/s
Iteration  19: 1965611.861 ops/s
Iteration  20: 1960422.862 ops/s
Iteration  21: 1962363.719 ops/s
Iteration  22: 1955407.321 ops/s
Iteration  23: 1962941.881 ops/s
Iteration  24: 1957418.706 ops/s
Iteration  25: 1961761.240 ops/s
Iteration  26: 1961620.448 ops/s
Iteration  27: 1961303.063 ops/s
Iteration  28: 1957458.725 ops/s
Iteration  29: 1960332.846 ops/s
Iteration  30: 1960126.985 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zip":
  1959768.245 ±(99.9%) 2430.336 ops/s [Average]
  (min, avg, max) = (1951819.944, 1959768.245, 1965611.861), stdev = 3637.612
  CI (99.9%): [1957337.909, 1962198.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  1959768.245 ± 2430.336  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1043482.046 ops/s
# Warmup Iteration   2: 2794744.135 ops/s
# Warmup Iteration   3: 2957177.132 ops/s
# Warmup Iteration   4: 2413491.362 ops/s
# Warmup Iteration   5: 2956803.718 ops/s
# Warmup Iteration   6: 2957162.413 ops/s
# Warmup Iteration   7: 2955988.397 ops/s
# Warmup Iteration   8: 2953761.772 ops/s
# Warmup Iteration   9: 2953929.287 ops/s
# Warmup Iteration  10: 2956982.435 ops/s
# Warmup Iteration  11: 2954138.198 ops/s
# Warmup Iteration  12: 2960590.007 ops/s
# Warmup Iteration  13: 2956070.382 ops/s
# Warmup Iteration  14: 2957964.601 ops/s
# Warmup Iteration  15: 2959057.543 ops/s
# Warmup Iteration  16: 2956569.602 ops/s
# Warmup Iteration  17: 2959615.799 ops/s
# Warmup Iteration  18: 2961275.570 ops/s
# Warmup Iteration  19: 2960065.727 ops/s
# Warmup Iteration  20: 2953160.548 ops/s
# Warmup Iteration  21: 2954682.953 ops/s
# Warmup Iteration  22: 2954428.433 ops/s
# Warmup Iteration  23: 2952393.892 ops/s
# Warmup Iteration  24: 2954313.612 ops/s
# Warmup Iteration  25: 2959484.361 ops/s
# Warmup Iteration  26: 2947097.437 ops/s
# Warmup Iteration  27: 2947315.652 ops/s
# Warmup Iteration  28: 2955316.516 ops/s
# Warmup Iteration  29: 2954918.701 ops/s
# Warmup Iteration  30: 2950664.812 ops/s
Iteration   1: 2954330.061 ops/s
Iteration   2: 2945817.062 ops/s
Iteration   3: 2962036.276 ops/s
Iteration   4: 2952857.665 ops/s
Iteration   5: 2962626.216 ops/s
Iteration   6: 2948008.214 ops/s
Iteration   7: 2963286.267 ops/s
Iteration   8: 2956379.774 ops/s
Iteration   9: 2960441.845 ops/s
Iteration  10: 2961190.521 ops/s
Iteration  11: 2943347.038 ops/s
Iteration  12: 2955552.557 ops/s
Iteration  13: 2958636.337 ops/s
Iteration  14: 2956879.481 ops/s
Iteration  15: 2952635.489 ops/s
Iteration  16: 2951695.044 ops/s
Iteration  17: 2960805.531 ops/s
Iteration  18: 2956818.728 ops/s
Iteration  19: 2954294.556 ops/s
Iteration  20: 2957022.540 ops/s
Iteration  21: 2961009.859 ops/s
Iteration  22: 2950418.061 ops/s
Iteration  23: 2959456.246 ops/s
Iteration  24: 2950533.681 ops/s
Iteration  25: 2951342.446 ops/s
Iteration  26: 2941171.716 ops/s
Iteration  27: 2970059.741 ops/s
Iteration  28: 2958751.325 ops/s
Iteration  29: 2946687.496 ops/s
Iteration  30: 2965948.464 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  2955668.008 ±(99.9%) 4496.157 ops/s [Average]
  (min, avg, max) = (2941171.716, 2955668.008, 2970059.741), stdev = 6729.636
  CI (99.9%): [2951171.851, 2960164.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2955668.008 ± 4496.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262338.781 ops/s
# Warmup Iteration   2: 414374.097 ops/s
# Warmup Iteration   3: 498679.992 ops/s
# Warmup Iteration   4: 499351.495 ops/s
# Warmup Iteration   5: 500392.263 ops/s
# Warmup Iteration   6: 499772.465 ops/s
# Warmup Iteration   7: 415747.589 ops/s
# Warmup Iteration   8: 500309.121 ops/s
# Warmup Iteration   9: 499474.003 ops/s
# Warmup Iteration  10: 500431.723 ops/s
# Warmup Iteration  11: 500406.028 ops/s
# Warmup Iteration  12: 501517.664 ops/s
# Warmup Iteration  13: 499699.008 ops/s
# Warmup Iteration  14: 501159.322 ops/s
# Warmup Iteration  15: 500169.639 ops/s
# Warmup Iteration  16: 500756.840 ops/s
# Warmup Iteration  17: 518714.472 ops/s
# Warmup Iteration  18: 517389.392 ops/s
# Warmup Iteration  19: 518492.683 ops/s
# Warmup Iteration  20: 517563.181 ops/s
# Warmup Iteration  21: 517391.268 ops/s
# Warmup Iteration  22: 518004.782 ops/s
# Warmup Iteration  23: 518492.449 ops/s
# Warmup Iteration  24: 517134.410 ops/s
# Warmup Iteration  25: 518053.579 ops/s
# Warmup Iteration  26: 517907.131 ops/s
# Warmup Iteration  27: 514963.329 ops/s
# Warmup Iteration  28: 518196.265 ops/s
# Warmup Iteration  29: 517406.037 ops/s
# Warmup Iteration  30: 517955.237 ops/s
Iteration   1: 517170.623 ops/s
Iteration   2: 515547.619 ops/s
Iteration   3: 517268.790 ops/s
Iteration   4: 517320.906 ops/s
Iteration   5: 517348.367 ops/s
Iteration   6: 515894.591 ops/s
Iteration   7: 519239.013 ops/s
Iteration   8: 517841.208 ops/s
Iteration   9: 517377.110 ops/s
Iteration  10: 516572.599 ops/s
Iteration  11: 518410.735 ops/s
Iteration  12: 517749.017 ops/s
Iteration  13: 519522.628 ops/s
Iteration  14: 518341.417 ops/s
Iteration  15: 518120.036 ops/s
Iteration  16: 518073.115 ops/s
Iteration  17: 519229.716 ops/s
Iteration  18: 516480.263 ops/s
Iteration  19: 516225.506 ops/s
Iteration  20: 518069.979 ops/s
Iteration  21: 516712.898 ops/s
Iteration  22: 515909.245 ops/s
Iteration  23: 517905.348 ops/s
Iteration  24: 517203.379 ops/s
Iteration  25: 518436.817 ops/s
Iteration  26: 517227.857 ops/s
Iteration  27: 518736.104 ops/s
Iteration  28: 519591.942 ops/s
Iteration  29: 519585.672 ops/s
Iteration  30: 517898.377 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAll":
  517700.363 ±(99.9%) 750.251 ops/s [Average]
  (min, avg, max) = (515547.619, 517700.363, 519591.942), stdev = 1122.940
  CI (99.9%): [516950.112, 518450.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_addAll  thrpt   30  517700.363 ± 750.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634140.428 ops/s
# Warmup Iteration   2: 1459454.253 ops/s
# Warmup Iteration   3: 1470731.761 ops/s
# Warmup Iteration   4: 1234643.892 ops/s
# Warmup Iteration   5: 1475277.715 ops/s
# Warmup Iteration   6: 1474825.411 ops/s
# Warmup Iteration   7: 1475620.250 ops/s
# Warmup Iteration   8: 1476114.327 ops/s
# Warmup Iteration   9: 1471044.319 ops/s
# Warmup Iteration  10: 1453891.493 ops/s
# Warmup Iteration  11: 1466330.556 ops/s
# Warmup Iteration  12: 1476541.566 ops/s
# Warmup Iteration  13: 1472588.141 ops/s
# Warmup Iteration  14: 1475046.929 ops/s
# Warmup Iteration  15: 1474405.275 ops/s
# Warmup Iteration  16: 1474313.840 ops/s
# Warmup Iteration  17: 1469960.286 ops/s
# Warmup Iteration  18: 1477191.903 ops/s
# Warmup Iteration  19: 1475360.143 ops/s
# Warmup Iteration  20: 1474438.222 ops/s
# Warmup Iteration  21: 1472940.629 ops/s
# Warmup Iteration  22: 1474224.627 ops/s
# Warmup Iteration  23: 1474675.391 ops/s
# Warmup Iteration  24: 1474443.910 ops/s
# Warmup Iteration  25: 1475297.841 ops/s
# Warmup Iteration  26: 1475772.260 ops/s
# Warmup Iteration  27: 1476214.984 ops/s
# Warmup Iteration  28: 1478007.715 ops/s
# Warmup Iteration  29: 1478749.178 ops/s
# Warmup Iteration  30: 1477370.936 ops/s
Iteration   1: 1479879.047 ops/s
Iteration   2: 1481689.069 ops/s
Iteration   3: 1481035.964 ops/s
Iteration   4: 1469543.010 ops/s
Iteration   5: 1472826.244 ops/s
Iteration   6: 1474346.084 ops/s
Iteration   7: 1473847.387 ops/s
Iteration   8: 1474830.390 ops/s
Iteration   9: 1477064.870 ops/s
Iteration  10: 1476962.424 ops/s
Iteration  11: 1475215.754 ops/s
Iteration  12: 1479393.750 ops/s
Iteration  13: 1475185.548 ops/s
Iteration  14: 1477401.718 ops/s
Iteration  15: 1476381.041 ops/s
Iteration  16: 1469252.020 ops/s
Iteration  17: 1474775.547 ops/s
Iteration  18: 1470502.342 ops/s
Iteration  19: 1478050.765 ops/s
Iteration  20: 1474270.816 ops/s
Iteration  21: 1470355.234 ops/s
Iteration  22: 1476770.344 ops/s
Iteration  23: 1473607.643 ops/s
Iteration  24: 1474457.714 ops/s
Iteration  25: 1479096.137 ops/s
Iteration  26: 1476627.099 ops/s
Iteration  27: 1476066.376 ops/s
Iteration  28: 1475798.043 ops/s
Iteration  29: 1476406.077 ops/s
Iteration  30: 1476534.721 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllAtIndex":
  1475605.773 ±(99.9%) 2079.969 ops/s [Average]
  (min, avg, max) = (1469252.020, 1475605.773, 1481689.069), stdev = 3113.200
  CI (99.9%): [1473525.804, 1477685.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1475605.773 ± 2079.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 439410.684 ops/s
# Warmup Iteration   2: 928823.291 ops/s
# Warmup Iteration   3: 1008047.247 ops/s
# Warmup Iteration   4: 1005807.976 ops/s
# Warmup Iteration   5: 837193.019 ops/s
# Warmup Iteration   6: 1008385.058 ops/s
# Warmup Iteration   7: 1007141.550 ops/s
# Warmup Iteration   8: 1008374.987 ops/s
# Warmup Iteration   9: 1006605.124 ops/s
# Warmup Iteration  10: 1006938.562 ops/s
# Warmup Iteration  11: 1006174.739 ops/s
# Warmup Iteration  12: 1008428.518 ops/s
# Warmup Iteration  13: 1007595.216 ops/s
# Warmup Iteration  14: 1010168.328 ops/s
# Warmup Iteration  15: 1006407.972 ops/s
# Warmup Iteration  16: 1007671.559 ops/s
# Warmup Iteration  17: 1010674.998 ops/s
# Warmup Iteration  18: 1011786.373 ops/s
# Warmup Iteration  19: 1011871.353 ops/s
# Warmup Iteration  20: 1011618.503 ops/s
# Warmup Iteration  21: 1010320.651 ops/s
# Warmup Iteration  22: 1010297.330 ops/s
# Warmup Iteration  23: 1013773.881 ops/s
# Warmup Iteration  24: 1008597.780 ops/s
# Warmup Iteration  25: 1011240.697 ops/s
# Warmup Iteration  26: 1012395.959 ops/s
# Warmup Iteration  27: 1010101.485 ops/s
# Warmup Iteration  28: 1009085.554 ops/s
# Warmup Iteration  29: 1009453.665 ops/s
# Warmup Iteration  30: 1010063.252 ops/s
Iteration   1: 1009517.867 ops/s
Iteration   2: 1010536.727 ops/s
Iteration   3: 1011739.543 ops/s
Iteration   4: 1012771.833 ops/s
Iteration   5: 1010877.133 ops/s
Iteration   6: 1013624.019 ops/s
Iteration   7: 1013106.004 ops/s
Iteration   8: 1011520.114 ops/s
Iteration   9: 1006013.697 ops/s
Iteration  10: 1011979.629 ops/s
Iteration  11: 1015787.461 ops/s
Iteration  12: 1012499.813 ops/s
Iteration  13: 1012574.910 ops/s
Iteration  14: 1013017.205 ops/s
Iteration  15: 1013843.098 ops/s
Iteration  16: 1012950.501 ops/s
Iteration  17: 1013582.277 ops/s
Iteration  18: 1011090.690 ops/s
Iteration  19: 1010001.776 ops/s
Iteration  20: 1011149.719 ops/s
Iteration  21: 1011472.849 ops/s
Iteration  22: 1014843.316 ops/s
Iteration  23: 1009415.003 ops/s
Iteration  24: 1010671.190 ops/s
Iteration  25: 1011207.382 ops/s
Iteration  26: 1009969.545 ops/s
Iteration  27: 1012478.744 ops/s
Iteration  28: 1014255.000 ops/s
Iteration  29: 1011952.038 ops/s
Iteration  30: 1013640.956 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllIterable":
  1011936.335 ±(99.9%) 1288.785 ops/s [Average]
  (min, avg, max) = (1006013.697, 1011936.335, 1015787.461), stdev = 1928.993
  CI (99.9%): [1010647.550, 1013225.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_addAllIterable  thrpt   30  1011936.335 ± 1288.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllWithMultipleTypes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllWithMultipleTypes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1654560.237 ops/s
# Warmup Iteration   2: 3537405.832 ops/s
# Warmup Iteration   3: 3840077.901 ops/s
# Warmup Iteration   4: 3860531.314 ops/s
# Warmup Iteration   5: 3163223.532 ops/s
# Warmup Iteration   6: 3869031.702 ops/s
# Warmup Iteration   7: 3854868.121 ops/s
# Warmup Iteration   8: 3862849.637 ops/s
# Warmup Iteration   9: 3867647.224 ops/s
# Warmup Iteration  10: 3869256.042 ops/s
# Warmup Iteration  11: 3871170.284 ops/s
# Warmup Iteration  12: 3852157.484 ops/s
# Warmup Iteration  13: 3850658.302 ops/s
# Warmup Iteration  14: 3858402.219 ops/s
# Warmup Iteration  15: 3870293.271 ops/s
# Warmup Iteration  16: 3860707.103 ops/s
# Warmup Iteration  17: 3865787.350 ops/s
# Warmup Iteration  18: 3865594.793 ops/s
# Warmup Iteration  19: 3883435.796 ops/s
# Warmup Iteration  20: 3876813.656 ops/s
# Warmup Iteration  21: 3877770.027 ops/s
# Warmup Iteration  22: 3879804.238 ops/s
# Warmup Iteration  23: 3880116.361 ops/s
# Warmup Iteration  24: 3854395.195 ops/s
# Warmup Iteration  25: 3883785.389 ops/s
# Warmup Iteration  26: 3881497.721 ops/s
# Warmup Iteration  27: 3881260.647 ops/s
# Warmup Iteration  28: 3863954.569 ops/s
# Warmup Iteration  29: 3884630.397 ops/s
# Warmup Iteration  30: 3883570.429 ops/s
Iteration   1: 3887273.789 ops/s
Iteration   2: 3875551.706 ops/s
Iteration   3: 3870377.867 ops/s
Iteration   4: 3889353.374 ops/s
Iteration   5: 3876102.332 ops/s
Iteration   6: 3864861.141 ops/s
Iteration   7: 3879676.855 ops/s
Iteration   8: 3878253.522 ops/s
Iteration   9: 3893590.388 ops/s
Iteration  10: 3884664.331 ops/s
Iteration  11: 3860156.197 ops/s
Iteration  12: 3870507.611 ops/s
Iteration  13: 3873362.939 ops/s
Iteration  14: 3881408.800 ops/s
Iteration  15: 3857474.437 ops/s
Iteration  16: 3877549.021 ops/s
Iteration  17: 3885258.377 ops/s
Iteration  18: 3892107.850 ops/s
Iteration  19: 3870609.582 ops/s
Iteration  20: 3882728.408 ops/s
Iteration  21: 3880302.341 ops/s
Iteration  22: 3884389.166 ops/s
Iteration  23: 3870954.850 ops/s
Iteration  24: 3875096.509 ops/s
Iteration  25: 3886171.929 ops/s
Iteration  26: 3882932.112 ops/s
Iteration  27: 3868018.881 ops/s
Iteration  28: 3876608.810 ops/s
Iteration  29: 3886717.792 ops/s
Iteration  30: 3871409.883 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAllWithMultipleTypes":
  3877782.360 ±(99.9%) 5973.576 ops/s [Average]
  (min, avg, max) = (3857474.437, 3877782.360, 3893590.388), stdev = 8940.968
  CI (99.9%): [3871808.784, 3883755.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_addAllWithMultipleTypes  thrpt   30  3877782.360 ± 5973.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248814.012 ops/s
# Warmup Iteration   2: 451741.557 ops/s
# Warmup Iteration   3: 485340.544 ops/s
# Warmup Iteration   4: 487926.564 ops/s
# Warmup Iteration   5: 426947.813 ops/s
# Warmup Iteration   6: 469203.055 ops/s
# Warmup Iteration   7: 486845.589 ops/s
# Warmup Iteration   8: 488118.828 ops/s
# Warmup Iteration   9: 488149.777 ops/s
# Warmup Iteration  10: 488181.120 ops/s
# Warmup Iteration  11: 488318.573 ops/s
# Warmup Iteration  12: 488766.327 ops/s
# Warmup Iteration  13: 489105.481 ops/s
# Warmup Iteration  14: 489164.025 ops/s
# Warmup Iteration  15: 488016.968 ops/s
# Warmup Iteration  16: 488629.835 ops/s
# Warmup Iteration  17: 503820.835 ops/s
# Warmup Iteration  18: 502890.051 ops/s
# Warmup Iteration  19: 502134.221 ops/s
# Warmup Iteration  20: 504632.927 ops/s
# Warmup Iteration  21: 502722.075 ops/s
# Warmup Iteration  22: 503358.068 ops/s
# Warmup Iteration  23: 503265.892 ops/s
# Warmup Iteration  24: 500489.208 ops/s
# Warmup Iteration  25: 500299.147 ops/s
# Warmup Iteration  26: 502975.166 ops/s
# Warmup Iteration  27: 502520.513 ops/s
# Warmup Iteration  28: 503468.828 ops/s
# Warmup Iteration  29: 503822.575 ops/s
# Warmup Iteration  30: 503253.963 ops/s
Iteration   1: 503604.032 ops/s
Iteration   2: 505465.171 ops/s
Iteration   3: 504503.262 ops/s
Iteration   4: 502258.806 ops/s
Iteration   5: 503145.568 ops/s
Iteration   6: 501521.911 ops/s
Iteration   7: 502242.677 ops/s
Iteration   8: 503077.446 ops/s
Iteration   9: 502052.305 ops/s
Iteration  10: 503777.426 ops/s
Iteration  11: 504673.755 ops/s
Iteration  12: 503194.473 ops/s
Iteration  13: 503049.591 ops/s
Iteration  14: 502471.379 ops/s
Iteration  15: 501581.386 ops/s
Iteration  16: 505398.540 ops/s
Iteration  17: 503174.638 ops/s
Iteration  18: 502856.663 ops/s
Iteration  19: 502329.390 ops/s
Iteration  20: 500121.780 ops/s
Iteration  21: 501453.671 ops/s
Iteration  22: 503677.276 ops/s
Iteration  23: 501923.591 ops/s
Iteration  24: 501848.155 ops/s
Iteration  25: 503454.448 ops/s
Iteration  26: 503008.252 ops/s
Iteration  27: 502806.912 ops/s
Iteration  28: 504181.379 ops/s
Iteration  29: 503759.906 ops/s
Iteration  30: 505117.616 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_addAtIndex":
  503057.713 ±(99.9%) 833.617 ops/s [Average]
  (min, avg, max) = (500121.780, 503057.713, 505465.171), stdev = 1247.718
  CI (99.9%): [502224.097, 503891.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_addAtIndex  thrpt   30  503057.713 ± 833.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1384703.399 ops/s
# Warmup Iteration   2: 2676076.402 ops/s
# Warmup Iteration   3: 2983529.587 ops/s
# Warmup Iteration   4: 3000054.462 ops/s
# Warmup Iteration   5: 2408128.177 ops/s
# Warmup Iteration   6: 2952183.628 ops/s
# Warmup Iteration   7: 2956869.186 ops/s
# Warmup Iteration   8: 2979891.272 ops/s
# Warmup Iteration   9: 2988385.132 ops/s
# Warmup Iteration  10: 2985453.035 ops/s
# Warmup Iteration  11: 2956198.291 ops/s
# Warmup Iteration  12: 2967360.669 ops/s
# Warmup Iteration  13: 2985519.515 ops/s
# Warmup Iteration  14: 2969861.319 ops/s
# Warmup Iteration  15: 2976106.720 ops/s
# Warmup Iteration  16: 2991689.490 ops/s
# Warmup Iteration  17: 2980502.974 ops/s
# Warmup Iteration  18: 2949956.162 ops/s
# Warmup Iteration  19: 2965115.227 ops/s
# Warmup Iteration  20: 2982515.399 ops/s
# Warmup Iteration  21: 2958308.256 ops/s
# Warmup Iteration  22: 2949760.377 ops/s
# Warmup Iteration  23: 2977621.172 ops/s
# Warmup Iteration  24: 2974849.818 ops/s
# Warmup Iteration  25: 2997126.925 ops/s
# Warmup Iteration  26: 2992372.810 ops/s
# Warmup Iteration  27: 2972116.453 ops/s
# Warmup Iteration  28: 2985202.060 ops/s
# Warmup Iteration  29: 2969447.949 ops/s
# Warmup Iteration  30: 2992403.452 ops/s
Iteration   1: 3012503.316 ops/s
Iteration   2: 2956414.828 ops/s
Iteration   3: 2990860.178 ops/s
Iteration   4: 2969361.549 ops/s
Iteration   5: 2980294.536 ops/s
Iteration   6: 2987359.537 ops/s
Iteration   7: 2981267.532 ops/s
Iteration   8: 2957995.730 ops/s
Iteration   9: 2991925.670 ops/s
Iteration  10: 2999161.610 ops/s
Iteration  11: 2978002.444 ops/s
Iteration  12: 2979410.441 ops/s
Iteration  13: 2979502.906 ops/s
Iteration  14: 2950894.958 ops/s
Iteration  15: 2979403.741 ops/s
Iteration  16: 2976969.283 ops/s
Iteration  17: 3002715.469 ops/s
Iteration  18: 2976920.092 ops/s
Iteration  19: 2960140.344 ops/s
Iteration  20: 2953554.058 ops/s
Iteration  21: 2966360.609 ops/s
Iteration  22: 2998413.068 ops/s
Iteration  23: 3001331.464 ops/s
Iteration  24: 2963419.533 ops/s
Iteration  25: 2961977.841 ops/s
Iteration  26: 2989929.704 ops/s
Iteration  27: 2984022.055 ops/s
Iteration  28: 2978362.943 ops/s
Iteration  29: 2963513.596 ops/s
Iteration  30: 3008178.395 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByMutating":
  2979338.914 ±(99.9%) 11182.258 ops/s [Average]
  (min, avg, max) = (2950894.958, 2979338.914, 3012503.316), stdev = 16737.079
  CI (99.9%): [2968156.656, 2990521.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2979338.914 ± 11182.258  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1523718.871 ops/s
# Warmup Iteration   2: 3207299.714 ops/s
# Warmup Iteration   3: 3451133.004 ops/s
# Warmup Iteration   4: 3465218.835 ops/s
# Warmup Iteration   5: 2816648.868 ops/s
# Warmup Iteration   6: 3466141.783 ops/s
# Warmup Iteration   7: 3512655.590 ops/s
# Warmup Iteration   8: 3453683.053 ops/s
# Warmup Iteration   9: 3453989.671 ops/s
# Warmup Iteration  10: 3441850.149 ops/s
# Warmup Iteration  11: 3454024.107 ops/s
# Warmup Iteration  12: 3440274.170 ops/s
# Warmup Iteration  13: 3451177.997 ops/s
# Warmup Iteration  14: 3448257.251 ops/s
# Warmup Iteration  15: 3498875.481 ops/s
# Warmup Iteration  16: 3509743.104 ops/s
# Warmup Iteration  17: 3486779.346 ops/s
# Warmup Iteration  18: 3445890.795 ops/s
# Warmup Iteration  19: 3512505.916 ops/s
# Warmup Iteration  20: 3465227.685 ops/s
# Warmup Iteration  21: 3476674.727 ops/s
# Warmup Iteration  22: 3476306.128 ops/s
# Warmup Iteration  23: 3473574.490 ops/s
# Warmup Iteration  24: 3510644.494 ops/s
# Warmup Iteration  25: 3488831.389 ops/s
# Warmup Iteration  26: 3453531.828 ops/s
# Warmup Iteration  27: 3471350.475 ops/s
# Warmup Iteration  28: 3452327.586 ops/s
# Warmup Iteration  29: 3428654.892 ops/s
# Warmup Iteration  30: 3502745.583 ops/s
Iteration   1: 3504874.548 ops/s
Iteration   2: 3487001.738 ops/s
Iteration   3: 3458284.309 ops/s
Iteration   4: 3457702.187 ops/s
Iteration   5: 3479767.931 ops/s
Iteration   6: 3468252.227 ops/s
Iteration   7: 3510635.076 ops/s
Iteration   8: 3489749.207 ops/s
Iteration   9: 3434788.134 ops/s
Iteration  10: 3492352.409 ops/s
Iteration  11: 3492850.003 ops/s
Iteration  12: 3467661.324 ops/s
Iteration  13: 3483853.901 ops/s
Iteration  14: 3442991.238 ops/s
Iteration  15: 3452154.975 ops/s
Iteration  16: 3463562.711 ops/s
Iteration  17: 3473728.066 ops/s
Iteration  18: 3453377.144 ops/s
Iteration  19: 3476088.755 ops/s
Iteration  20: 3473879.418 ops/s
Iteration  21: 3471171.101 ops/s
Iteration  22: 3495118.294 ops/s
Iteration  23: 3495222.874 ops/s
Iteration  24: 3486810.868 ops/s
Iteration  25: 3486746.715 ops/s
Iteration  26: 3457038.798 ops/s
Iteration  27: 3457742.902 ops/s
Iteration  28: 3439402.347 ops/s
Iteration  29: 3463572.217 ops/s
Iteration  30: 3480803.526 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_aggregateByNonMutating":
  3473239.498 ±(99.9%) 12865.425 ops/s [Average]
  (min, avg, max) = (3434788.134, 3473239.498, 3510635.076), stdev = 19256.364
  CI (99.9%): [3460374.073, 3486104.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3473239.498 ± 12865.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6765128.613 ops/s
# Warmup Iteration   2: 15557984.655 ops/s
# Warmup Iteration   3: 15280245.660 ops/s
# Warmup Iteration   4: 12692161.920 ops/s
# Warmup Iteration   5: 15266240.733 ops/s
# Warmup Iteration   6: 15270018.352 ops/s
# Warmup Iteration   7: 15256772.481 ops/s
# Warmup Iteration   8: 15238657.462 ops/s
# Warmup Iteration   9: 15222607.238 ops/s
# Warmup Iteration  10: 15253051.210 ops/s
# Warmup Iteration  11: 15236555.304 ops/s
# Warmup Iteration  12: 15296313.521 ops/s
# Warmup Iteration  13: 15217988.995 ops/s
# Warmup Iteration  14: 15238056.314 ops/s
# Warmup Iteration  15: 15232780.670 ops/s
# Warmup Iteration  16: 15256859.114 ops/s
# Warmup Iteration  17: 15238015.590 ops/s
# Warmup Iteration  18: 15232013.820 ops/s
# Warmup Iteration  19: 15245612.721 ops/s
# Warmup Iteration  20: 15294905.599 ops/s
# Warmup Iteration  21: 15220357.543 ops/s
# Warmup Iteration  22: 15233589.299 ops/s
# Warmup Iteration  23: 15207736.678 ops/s
# Warmup Iteration  24: 15225996.136 ops/s
# Warmup Iteration  25: 15247249.465 ops/s
# Warmup Iteration  26: 15267625.504 ops/s
# Warmup Iteration  27: 15317120.228 ops/s
# Warmup Iteration  28: 15284920.498 ops/s
# Warmup Iteration  29: 15258258.373 ops/s
# Warmup Iteration  30: 15208920.236 ops/s
Iteration   1: 15235288.438 ops/s
Iteration   2: 15319457.880 ops/s
Iteration   3: 15269810.041 ops/s
Iteration   4: 15238796.465 ops/s
Iteration   5: 15233329.852 ops/s
Iteration   6: 15298515.773 ops/s
Iteration   7: 15281578.430 ops/s
Iteration   8: 15307350.210 ops/s
Iteration   9: 15272330.637 ops/s
Iteration  10: 15244643.256 ops/s
Iteration  11: 15236170.298 ops/s
Iteration  12: 15283247.949 ops/s
Iteration  13: 15331432.401 ops/s
Iteration  14: 15264272.614 ops/s
Iteration  15: 15283702.766 ops/s
Iteration  16: 15197879.700 ops/s
Iteration  17: 15033597.501 ops/s
Iteration  18: 15186341.561 ops/s
Iteration  19: 15258840.452 ops/s
Iteration  20: 15313531.490 ops/s
Iteration  21: 15226374.380 ops/s
Iteration  22: 15267570.488 ops/s
Iteration  23: 15232908.871 ops/s
Iteration  24: 15290993.637 ops/s
Iteration  25: 15266465.214 ops/s
Iteration  26: 15262859.448 ops/s
Iteration  27: 15214934.425 ops/s
Iteration  28: 15269797.522 ops/s
Iteration  29: 15208326.175 ops/s
Iteration  30: 15269056.595 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfy":
  15253313.482 ±(99.9%) 36520.978 ops/s [Average]
  (min, avg, max) = (15033597.501, 15253313.482, 15331432.401), stdev = 54662.884
  CI (99.9%): [15216792.505, 15289834.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_allSatisfy  thrpt   30  15253313.482 ± 36520.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7014769.722 ops/s
# Warmup Iteration   2: 16105266.796 ops/s
# Warmup Iteration   3: 15074453.042 ops/s
# Warmup Iteration   4: 12422366.851 ops/s
# Warmup Iteration   5: 15094601.798 ops/s
# Warmup Iteration   6: 15128813.409 ops/s
# Warmup Iteration   7: 15130587.280 ops/s
# Warmup Iteration   8: 15146116.581 ops/s
# Warmup Iteration   9: 15120246.755 ops/s
# Warmup Iteration  10: 15097909.343 ops/s
# Warmup Iteration  11: 15178510.908 ops/s
# Warmup Iteration  12: 15176022.701 ops/s
# Warmup Iteration  13: 15092780.844 ops/s
# Warmup Iteration  14: 15133858.563 ops/s
# Warmup Iteration  15: 15130971.139 ops/s
# Warmup Iteration  16: 15142187.238 ops/s
# Warmup Iteration  17: 15162933.669 ops/s
# Warmup Iteration  18: 15139905.788 ops/s
# Warmup Iteration  19: 15136103.220 ops/s
# Warmup Iteration  20: 15113414.934 ops/s
# Warmup Iteration  21: 15177615.582 ops/s
# Warmup Iteration  22: 15176820.490 ops/s
# Warmup Iteration  23: 15129696.249 ops/s
# Warmup Iteration  24: 15141876.916 ops/s
# Warmup Iteration  25: 15079735.729 ops/s
# Warmup Iteration  26: 15142105.298 ops/s
# Warmup Iteration  27: 15168028.768 ops/s
# Warmup Iteration  28: 15119510.984 ops/s
# Warmup Iteration  29: 15119971.049 ops/s
# Warmup Iteration  30: 15126938.016 ops/s
Iteration   1: 15088136.602 ops/s
Iteration   2: 15126595.062 ops/s
Iteration   3: 15161959.855 ops/s
Iteration   4: 15138391.265 ops/s
Iteration   5: 15167472.895 ops/s
Iteration   6: 15128650.814 ops/s
Iteration   7: 15188194.007 ops/s
Iteration   8: 15159021.506 ops/s
Iteration   9: 15153100.595 ops/s
Iteration  10: 15129503.170 ops/s
Iteration  11: 15161606.151 ops/s
Iteration  12: 15150023.700 ops/s
Iteration  13: 15145790.820 ops/s
Iteration  14: 15135095.405 ops/s
Iteration  15: 15110447.540 ops/s
Iteration  16: 15200111.096 ops/s
Iteration  17: 15156402.370 ops/s
Iteration  18: 15104743.098 ops/s
Iteration  19: 15160151.458 ops/s
Iteration  20: 15052886.315 ops/s
Iteration  21: 15099783.312 ops/s
Iteration  22: 15174424.441 ops/s
Iteration  23: 15103958.552 ops/s
Iteration  24: 15150245.024 ops/s
Iteration  25: 15163523.495 ops/s
Iteration  26: 15139292.519 ops/s
Iteration  27: 15138855.764 ops/s
Iteration  28: 15157096.902 ops/s
Iteration  29: 15112348.387 ops/s
Iteration  30: 15101803.533 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_allSatisfyWith":
  15138653.855 ±(99.9%) 21144.255 ops/s [Average]
  (min, avg, max) = (15052886.315, 15138653.855, 15200111.096), stdev = 31647.728
  CI (99.9%): [15117509.600, 15159798.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  15138653.855 ± 21144.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6869310.340 ops/s
# Warmup Iteration   2: 16068181.468 ops/s
# Warmup Iteration   3: 15485930.734 ops/s
# Warmup Iteration   4: 13047389.620 ops/s
# Warmup Iteration   5: 15557743.014 ops/s
# Warmup Iteration   6: 15573388.539 ops/s
# Warmup Iteration   7: 15548599.830 ops/s
# Warmup Iteration   8: 15529055.314 ops/s
# Warmup Iteration   9: 15550786.210 ops/s
# Warmup Iteration  10: 15505613.517 ops/s
# Warmup Iteration  11: 15536446.723 ops/s
# Warmup Iteration  12: 15553087.750 ops/s
# Warmup Iteration  13: 15511161.532 ops/s
# Warmup Iteration  14: 15517131.834 ops/s
# Warmup Iteration  15: 15538791.815 ops/s
# Warmup Iteration  16: 15478649.002 ops/s
# Warmup Iteration  17: 15144793.091 ops/s
# Warmup Iteration  18: 15124608.357 ops/s
# Warmup Iteration  19: 15090437.730 ops/s
# Warmup Iteration  20: 15131681.343 ops/s
# Warmup Iteration  21: 15129681.986 ops/s
# Warmup Iteration  22: 15134649.130 ops/s
# Warmup Iteration  23: 15190089.499 ops/s
# Warmup Iteration  24: 15122153.297 ops/s
# Warmup Iteration  25: 15110705.685 ops/s
# Warmup Iteration  26: 15110573.215 ops/s
# Warmup Iteration  27: 15127071.214 ops/s
# Warmup Iteration  28: 15114041.643 ops/s
# Warmup Iteration  29: 15151958.099 ops/s
# Warmup Iteration  30: 15138221.435 ops/s
Iteration   1: 15154391.218 ops/s
Iteration   2: 15152503.443 ops/s
Iteration   3: 15055988.056 ops/s
Iteration   4: 15114446.074 ops/s
Iteration   5: 15125207.759 ops/s
Iteration   6: 14981495.519 ops/s
Iteration   7: 15141860.963 ops/s
Iteration   8: 15118720.288 ops/s
Iteration   9: 15093338.108 ops/s
Iteration  10: 15141068.901 ops/s
Iteration  11: 15073757.270 ops/s
Iteration  12: 15074536.158 ops/s
Iteration  13: 14976919.662 ops/s
Iteration  14: 15087830.698 ops/s
Iteration  15: 15126374.958 ops/s
Iteration  16: 15116971.574 ops/s
Iteration  17: 15112152.686 ops/s
Iteration  18: 15185153.928 ops/s
Iteration  19: 15153179.896 ops/s
Iteration  20: 15068992.267 ops/s
Iteration  21: 15087979.160 ops/s
Iteration  22: 15128624.993 ops/s
Iteration  23: 15126458.140 ops/s
Iteration  24: 15110828.193 ops/s
Iteration  25: 15099751.212 ops/s
Iteration  26: 15124251.115 ops/s
Iteration  27: 15105745.220 ops/s
Iteration  28: 15094971.963 ops/s
Iteration  29: 15111561.955 ops/s
Iteration  30: 15171667.324 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfy":
  15107224.290 ±(99.9%) 30719.973 ops/s [Average]
  (min, avg, max) = (14976919.662, 15107224.290, 15185153.928), stdev = 45980.213
  CI (99.9%): [15076504.317, 15137944.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_anySatisfy  thrpt   30  15107224.290 ± 30719.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8130925.236 ops/s
# Warmup Iteration   2: 18278780.280 ops/s
# Warmup Iteration   3: 17313357.336 ops/s
# Warmup Iteration   4: 14534494.717 ops/s
# Warmup Iteration   5: 17259008.650 ops/s
# Warmup Iteration   6: 17468768.130 ops/s
# Warmup Iteration   7: 17268512.532 ops/s
# Warmup Iteration   8: 17347560.843 ops/s
# Warmup Iteration   9: 17401673.293 ops/s
# Warmup Iteration  10: 17345195.524 ops/s
# Warmup Iteration  11: 17414139.711 ops/s
# Warmup Iteration  12: 17352545.474 ops/s
# Warmup Iteration  13: 17431098.128 ops/s
# Warmup Iteration  14: 17330054.894 ops/s
# Warmup Iteration  15: 17281792.258 ops/s
# Warmup Iteration  16: 17416872.067 ops/s
# Warmup Iteration  17: 17394328.957 ops/s
# Warmup Iteration  18: 17429187.985 ops/s
# Warmup Iteration  19: 17358571.170 ops/s
# Warmup Iteration  20: 17298453.425 ops/s
# Warmup Iteration  21: 17373365.632 ops/s
# Warmup Iteration  22: 17411974.561 ops/s
# Warmup Iteration  23: 17356695.121 ops/s
# Warmup Iteration  24: 17352049.790 ops/s
# Warmup Iteration  25: 17354276.187 ops/s
# Warmup Iteration  26: 17282715.112 ops/s
# Warmup Iteration  27: 17366321.278 ops/s
# Warmup Iteration  28: 17385545.146 ops/s
# Warmup Iteration  29: 17413242.107 ops/s
# Warmup Iteration  30: 17402508.732 ops/s
Iteration   1: 17411238.850 ops/s
Iteration   2: 17405904.739 ops/s
Iteration   3: 17476621.141 ops/s
Iteration   4: 17361815.950 ops/s
Iteration   5: 17413895.656 ops/s
Iteration   6: 17412201.649 ops/s
Iteration   7: 17401857.141 ops/s
Iteration   8: 17366471.739 ops/s
Iteration   9: 17397029.631 ops/s
Iteration  10: 17313035.007 ops/s
Iteration  11: 17424574.016 ops/s
Iteration  12: 17380643.731 ops/s
Iteration  13: 17473117.323 ops/s
Iteration  14: 17291543.231 ops/s
Iteration  15: 17345880.137 ops/s
Iteration  16: 17393336.838 ops/s
Iteration  17: 17351878.917 ops/s
Iteration  18: 17399993.546 ops/s
Iteration  19: 17355128.265 ops/s
Iteration  20: 17407664.006 ops/s
Iteration  21: 17390316.560 ops/s
Iteration  22: 17509553.861 ops/s
Iteration  23: 17490016.601 ops/s
Iteration  24: 17365724.400 ops/s
Iteration  25: 17452829.046 ops/s
Iteration  26: 17299238.325 ops/s
Iteration  27: 17269598.979 ops/s
Iteration  28: 17269688.385 ops/s
Iteration  29: 17427718.347 ops/s
Iteration  30: 17417051.258 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_anySatisfyWith":
  17389185.576 ±(99.9%) 40740.636 ops/s [Average]
  (min, avg, max) = (17269598.979, 17389185.576, 17509553.861), stdev = 60978.670
  CI (99.9%): [17348444.940, 17429926.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  17389185.576 ± 40740.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1422832.950 ops/s
# Warmup Iteration   2: 3567763.924 ops/s
# Warmup Iteration   3: 3540884.509 ops/s
# Warmup Iteration   4: 2921326.787 ops/s
# Warmup Iteration   5: 3553932.170 ops/s
# Warmup Iteration   6: 3544511.277 ops/s
# Warmup Iteration   7: 3557976.068 ops/s
# Warmup Iteration   8: 3552271.001 ops/s
# Warmup Iteration   9: 3541031.209 ops/s
# Warmup Iteration  10: 3567670.582 ops/s
# Warmup Iteration  11: 3546688.233 ops/s
# Warmup Iteration  12: 3546290.462 ops/s
# Warmup Iteration  13: 3551011.949 ops/s
# Warmup Iteration  14: 3552612.551 ops/s
# Warmup Iteration  15: 3544988.116 ops/s
# Warmup Iteration  16: 3550926.156 ops/s
# Warmup Iteration  17: 3542569.083 ops/s
# Warmup Iteration  18: 3542793.213 ops/s
# Warmup Iteration  19: 3538593.207 ops/s
# Warmup Iteration  20: 3547392.215 ops/s
# Warmup Iteration  21: 3551809.017 ops/s
# Warmup Iteration  22: 3545964.325 ops/s
# Warmup Iteration  23: 3546045.592 ops/s
# Warmup Iteration  24: 3544576.952 ops/s
# Warmup Iteration  25: 3546290.603 ops/s
# Warmup Iteration  26: 3556187.121 ops/s
# Warmup Iteration  27: 3544456.792 ops/s
# Warmup Iteration  28: 3536693.913 ops/s
# Warmup Iteration  29: 3558559.236 ops/s
# Warmup Iteration  30: 3556420.827 ops/s
Iteration   1: 3564905.331 ops/s
Iteration   2: 3541417.321 ops/s
Iteration   3: 3527678.796 ops/s
Iteration   4: 3550853.107 ops/s
Iteration   5: 3547419.410 ops/s
Iteration   6: 3544534.511 ops/s
Iteration   7: 3552141.765 ops/s
Iteration   8: 3562021.292 ops/s
Iteration   9: 3538718.708 ops/s
Iteration  10: 3547880.202 ops/s
Iteration  11: 3556591.253 ops/s
Iteration  12: 3541779.840 ops/s
Iteration  13: 3558552.962 ops/s
Iteration  14: 3555077.124 ops/s
Iteration  15: 3542414.184 ops/s
Iteration  16: 3552199.438 ops/s
Iteration  17: 3556096.900 ops/s
Iteration  18: 3545718.634 ops/s
Iteration  19: 3538616.835 ops/s
Iteration  20: 3552568.393 ops/s
Iteration  21: 3560471.979 ops/s
Iteration  22: 3545146.889 ops/s
Iteration  23: 3549183.142 ops/s
Iteration  24: 3565572.567 ops/s
Iteration  25: 3556526.141 ops/s
Iteration  26: 3557149.668 ops/s
Iteration  27: 3560305.087 ops/s
Iteration  28: 3549657.088 ops/s
Iteration  29: 3535980.534 ops/s
Iteration  30: 3549912.337 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendString":
  3550236.381 ±(99.9%) 6011.063 ops/s [Average]
  (min, avg, max) = (3527678.796, 3550236.381, 3565572.567), stdev = 8997.076
  CI (99.9%): [3544225.318, 3556247.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_appendString  thrpt   30  3550236.381 ± 6011.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 118718.250 ops/s
# Warmup Iteration   2: 125613.361 ops/s
# Warmup Iteration   3: 136599.053 ops/s
# Warmup Iteration   4: 154566.717 ops/s
# Warmup Iteration   5: 154538.830 ops/s
# Warmup Iteration   6: 154969.552 ops/s
# Warmup Iteration   7: 153283.237 ops/s
# Warmup Iteration   8: 154719.554 ops/s
# Warmup Iteration   9: 154541.751 ops/s
# Warmup Iteration  10: 154388.241 ops/s
# Warmup Iteration  11: 154150.456 ops/s
# Warmup Iteration  12: 154457.209 ops/s
# Warmup Iteration  13: 154272.073 ops/s
# Warmup Iteration  14: 154815.620 ops/s
# Warmup Iteration  15: 154439.156 ops/s
# Warmup Iteration  16: 130739.968 ops/s
# Warmup Iteration  17: 165133.986 ops/s
# Warmup Iteration  18: 164454.513 ops/s
# Warmup Iteration  19: 164631.518 ops/s
# Warmup Iteration  20: 164354.299 ops/s
# Warmup Iteration  21: 164626.209 ops/s
# Warmup Iteration  22: 164673.088 ops/s
# Warmup Iteration  23: 164211.216 ops/s
# Warmup Iteration  24: 164493.051 ops/s
# Warmup Iteration  25: 164872.048 ops/s
# Warmup Iteration  26: 164365.926 ops/s
# Warmup Iteration  27: 164468.440 ops/s
# Warmup Iteration  28: 164589.506 ops/s
# Warmup Iteration  29: 164867.572 ops/s
# Warmup Iteration  30: 163825.227 ops/s
Iteration   1: 164821.276 ops/s
Iteration   2: 164415.949 ops/s
Iteration   3: 164812.409 ops/s
Iteration   4: 164598.684 ops/s
Iteration   5: 164632.966 ops/s
Iteration   6: 165090.260 ops/s
Iteration   7: 164559.194 ops/s
Iteration   8: 163955.790 ops/s
Iteration   9: 164021.819 ops/s
Iteration  10: 164880.803 ops/s
Iteration  11: 164871.090 ops/s
Iteration  12: 164748.189 ops/s
Iteration  13: 165007.831 ops/s
Iteration  14: 163745.772 ops/s
Iteration  15: 164661.430 ops/s
Iteration  16: 164301.543 ops/s
Iteration  17: 164791.593 ops/s
Iteration  18: 164178.325 ops/s
Iteration  19: 164442.987 ops/s
Iteration  20: 165290.607 ops/s
Iteration  21: 163797.621 ops/s
Iteration  22: 164248.540 ops/s
Iteration  23: 164548.555 ops/s
Iteration  24: 164130.455 ops/s
Iteration  25: 163165.035 ops/s
Iteration  26: 164605.902 ops/s
Iteration  27: 163808.301 ops/s
Iteration  28: 165445.147 ops/s
Iteration  29: 165463.853 ops/s
Iteration  30: 165131.654 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringThrows":
  164539.119 ±(99.9%) 357.602 ops/s [Average]
  (min, avg, max) = (163165.035, 164539.119, 165463.853), stdev = 535.242
  CI (99.9%): [164181.517, 164896.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_appendStringThrows  thrpt   30  164539.119 ± 357.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3740792.319 ops/s
# Warmup Iteration   2: 6165209.301 ops/s
# Warmup Iteration   3: 6607150.313 ops/s
# Warmup Iteration   4: 6640406.484 ops/s
# Warmup Iteration   5: 5419930.023 ops/s
# Warmup Iteration   6: 6629558.185 ops/s
# Warmup Iteration   7: 6619318.460 ops/s
# Warmup Iteration   8: 6621365.471 ops/s
# Warmup Iteration   9: 6622079.516 ops/s
# Warmup Iteration  10: 6611836.077 ops/s
# Warmup Iteration  11: 6617713.590 ops/s
# Warmup Iteration  12: 6628853.919 ops/s
# Warmup Iteration  13: 6640801.133 ops/s
# Warmup Iteration  14: 6620910.145 ops/s
# Warmup Iteration  15: 6625844.663 ops/s
# Warmup Iteration  16: 6632670.221 ops/s
# Warmup Iteration  17: 6626282.616 ops/s
# Warmup Iteration  18: 6610055.410 ops/s
# Warmup Iteration  19: 6625105.122 ops/s
# Warmup Iteration  20: 6639251.766 ops/s
# Warmup Iteration  21: 6600711.429 ops/s
# Warmup Iteration  22: 6621605.533 ops/s
# Warmup Iteration  23: 6633334.522 ops/s
# Warmup Iteration  24: 6617754.155 ops/s
# Warmup Iteration  25: 6620154.863 ops/s
# Warmup Iteration  26: 6627345.166 ops/s
# Warmup Iteration  27: 6633645.733 ops/s
# Warmup Iteration  28: 6639792.613 ops/s
# Warmup Iteration  29: 6612871.296 ops/s
# Warmup Iteration  30: 6609805.048 ops/s
Iteration   1: 6642219.053 ops/s
Iteration   2: 6609850.739 ops/s
Iteration   3: 6601291.581 ops/s
Iteration   4: 6604371.208 ops/s
Iteration   5: 6621310.618 ops/s
Iteration   6: 6625545.335 ops/s
Iteration   7: 6610934.557 ops/s
Iteration   8: 6640053.019 ops/s
Iteration   9: 6643566.687 ops/s
Iteration  10: 6638274.490 ops/s
Iteration  11: 6619046.835 ops/s
Iteration  12: 6609437.437 ops/s
Iteration  13: 6623045.468 ops/s
Iteration  14: 6612556.484 ops/s
Iteration  15: 6614395.312 ops/s
Iteration  16: 6618895.805 ops/s
Iteration  17: 6604224.786 ops/s
Iteration  18: 6590308.697 ops/s
Iteration  19: 6603689.811 ops/s
Iteration  20: 6629886.387 ops/s
Iteration  21: 6624692.089 ops/s
Iteration  22: 6619407.698 ops/s
Iteration  23: 6644656.886 ops/s
Iteration  24: 6605048.444 ops/s
Iteration  25: 6618790.140 ops/s
Iteration  26: 6640826.340 ops/s
Iteration  27: 6618981.787 ops/s
Iteration  28: 6624534.966 ops/s
Iteration  29: 6649001.902 ops/s
Iteration  30: 6632831.644 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparator":
  6621389.207 ±(99.9%) 10048.233 ops/s [Average]
  (min, avg, max) = (6590308.697, 6621389.207, 6649001.902), stdev = 15039.724
  CI (99.9%): [6611340.973, 6631437.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  6621389.207 ± 10048.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3074246.840 ops/s
# Warmup Iteration   2: 7884731.572 ops/s
# Warmup Iteration   3: 8262920.225 ops/s
# Warmup Iteration   4: 6760202.472 ops/s
# Warmup Iteration   5: 8272268.318 ops/s
# Warmup Iteration   6: 8248160.281 ops/s
# Warmup Iteration   7: 8226431.263 ops/s
# Warmup Iteration   8: 8239748.128 ops/s
# Warmup Iteration   9: 8255021.088 ops/s
# Warmup Iteration  10: 8255960.058 ops/s
# Warmup Iteration  11: 8263840.152 ops/s
# Warmup Iteration  12: 8240857.093 ops/s
# Warmup Iteration  13: 8243109.341 ops/s
# Warmup Iteration  14: 8228793.672 ops/s
# Warmup Iteration  15: 8245937.286 ops/s
# Warmup Iteration  16: 8219317.335 ops/s
# Warmup Iteration  17: 8252997.936 ops/s
# Warmup Iteration  18: 8264669.188 ops/s
# Warmup Iteration  19: 8270099.050 ops/s
# Warmup Iteration  20: 8240338.247 ops/s
# Warmup Iteration  21: 8257697.699 ops/s
# Warmup Iteration  22: 8233955.696 ops/s
# Warmup Iteration  23: 8253096.931 ops/s
# Warmup Iteration  24: 8249937.959 ops/s
# Warmup Iteration  25: 8260236.060 ops/s
# Warmup Iteration  26: 8277622.506 ops/s
# Warmup Iteration  27: 8240053.319 ops/s
# Warmup Iteration  28: 8252771.109 ops/s
# Warmup Iteration  29: 8258420.085 ops/s
# Warmup Iteration  30: 8262238.894 ops/s
Iteration   1: 8248449.676 ops/s
Iteration   2: 8232508.851 ops/s
Iteration   3: 8203965.822 ops/s
Iteration   4: 8258981.640 ops/s
Iteration   5: 8298923.138 ops/s
Iteration   6: 8206893.283 ops/s
Iteration   7: 8233332.323 ops/s
Iteration   8: 8272637.694 ops/s
Iteration   9: 8260133.652 ops/s
Iteration  10: 8269926.292 ops/s
Iteration  11: 8249844.228 ops/s
Iteration  12: 8228416.917 ops/s
Iteration  13: 8274992.884 ops/s
Iteration  14: 8253830.963 ops/s
Iteration  15: 8262536.011 ops/s
Iteration  16: 8257633.237 ops/s
Iteration  17: 8264653.459 ops/s
Iteration  18: 8252038.150 ops/s
Iteration  19: 8254201.008 ops/s
Iteration  20: 8231861.919 ops/s
Iteration  21: 8251998.095 ops/s
Iteration  22: 8271577.164 ops/s
Iteration  23: 8237008.527 ops/s
Iteration  24: 8275679.783 ops/s
Iteration  25: 8278572.737 ops/s
Iteration  26: 8238197.922 ops/s
Iteration  27: 8217754.568 ops/s
Iteration  28: 8251256.167 ops/s
Iteration  29: 8218844.495 ops/s
Iteration  30: 8253277.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  8250330.954 ±(99.9%) 14788.743 ops/s [Average]
  (min, avg, max) = (8203965.822, 8250330.954, 8298923.138), stdev = 22135.096
  CI (99.9%): [8235542.211, 8265119.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  8250330.954 ± 14788.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46423597.375 ops/s
# Warmup Iteration   2: 87957692.680 ops/s
# Warmup Iteration   3: 90844601.417 ops/s
# Warmup Iteration   4: 101747439.843 ops/s
# Warmup Iteration   5: 100759309.686 ops/s
# Warmup Iteration   6: 100998746.847 ops/s
# Warmup Iteration   7: 100618637.057 ops/s
# Warmup Iteration   8: 101356720.177 ops/s
# Warmup Iteration   9: 100944005.803 ops/s
# Warmup Iteration  10: 101297926.496 ops/s
# Warmup Iteration  11: 100969543.049 ops/s
# Warmup Iteration  12: 100989476.744 ops/s
# Warmup Iteration  13: 101149365.625 ops/s
# Warmup Iteration  14: 101190515.095 ops/s
# Warmup Iteration  15: 101092878.355 ops/s
# Warmup Iteration  16: 101234452.713 ops/s
# Warmup Iteration  17: 101053974.717 ops/s
# Warmup Iteration  18: 101529902.104 ops/s
# Warmup Iteration  19: 101176336.334 ops/s
# Warmup Iteration  20: 101053757.964 ops/s
# Warmup Iteration  21: 101307301.954 ops/s
# Warmup Iteration  22: 100841992.687 ops/s
# Warmup Iteration  23: 100703026.438 ops/s
# Warmup Iteration  24: 100982275.313 ops/s
# Warmup Iteration  25: 100820509.458 ops/s
# Warmup Iteration  26: 101107653.337 ops/s
# Warmup Iteration  27: 101030036.800 ops/s
# Warmup Iteration  28: 101278280.832 ops/s
# Warmup Iteration  29: 100944282.835 ops/s
# Warmup Iteration  30: 100838084.746 ops/s
Iteration   1: 100843246.662 ops/s
Iteration   2: 100583782.632 ops/s
Iteration   3: 101200063.949 ops/s
Iteration   4: 101275137.411 ops/s
Iteration   5: 101134442.882 ops/s
Iteration   6: 100881018.669 ops/s
Iteration   7: 101107265.024 ops/s
Iteration   8: 100960842.434 ops/s
Iteration   9: 100512367.460 ops/s
Iteration  10: 100391753.731 ops/s
Iteration  11: 101060408.146 ops/s
Iteration  12: 100952827.414 ops/s
Iteration  13: 100930997.599 ops/s
Iteration  14: 100096605.989 ops/s
Iteration  15: 101025962.881 ops/s
Iteration  16: 100682689.512 ops/s
Iteration  17: 100944448.991 ops/s
Iteration  18: 101006368.743 ops/s
Iteration  19: 100910081.266 ops/s
Iteration  20: 100469472.292 ops/s
Iteration  21: 100948058.987 ops/s
Iteration  22: 100911360.958 ops/s
Iteration  23: 99905703.809 ops/s
Iteration  24: 100997635.147 ops/s
Iteration  25: 101204033.144 ops/s
Iteration  26: 101458052.386 ops/s
Iteration  27: 101247586.841 ops/s
Iteration  28: 101078587.051 ops/s
Iteration  29: 101390182.774 ops/s
Iteration  30: 100935678.488 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asLazy":
  100901555.442 ±(99.9%) 234740.989 ops/s [Average]
  (min, avg, max) = (99905703.809, 100901555.442, 101458052.386), stdev = 351349.288
  CI (99.9%): [100666814.454, 101136296.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt          Score        Error  Units
FastListTest._Benchmark.benchmark_asLazy  thrpt   30  100901555.442 ± 234740.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4809785.670 ops/s
# Warmup Iteration   2: 10917100.469 ops/s
# Warmup Iteration   3: 9459451.515 ops/s
# Warmup Iteration   4: 11088213.514 ops/s
# Warmup Iteration   5: 11097271.593 ops/s
# Warmup Iteration   6: 11099241.636 ops/s
# Warmup Iteration   7: 11079559.854 ops/s
# Warmup Iteration   8: 11093329.330 ops/s
# Warmup Iteration   9: 11057877.017 ops/s
# Warmup Iteration  10: 11042794.856 ops/s
# Warmup Iteration  11: 11079690.129 ops/s
# Warmup Iteration  12: 11037520.974 ops/s
# Warmup Iteration  13: 11076711.162 ops/s
# Warmup Iteration  14: 11086366.785 ops/s
# Warmup Iteration  15: 11082398.434 ops/s
# Warmup Iteration  16: 11060715.587 ops/s
# Warmup Iteration  17: 11041336.421 ops/s
# Warmup Iteration  18: 11053886.162 ops/s
# Warmup Iteration  19: 11088360.568 ops/s
# Warmup Iteration  20: 11043697.257 ops/s
# Warmup Iteration  21: 11072972.471 ops/s
# Warmup Iteration  22: 11090084.230 ops/s
# Warmup Iteration  23: 11126416.236 ops/s
# Warmup Iteration  24: 11066400.898 ops/s
# Warmup Iteration  25: 11088639.954 ops/s
# Warmup Iteration  26: 11047878.803 ops/s
# Warmup Iteration  27: 11100421.487 ops/s
# Warmup Iteration  28: 11085639.045 ops/s
# Warmup Iteration  29: 11098078.603 ops/s
# Warmup Iteration  30: 11059335.311 ops/s
Iteration   1: 11068243.484 ops/s
Iteration   2: 11031783.162 ops/s
Iteration   3: 11105251.625 ops/s
Iteration   4: 11086999.215 ops/s
Iteration   5: 11030738.109 ops/s
Iteration   6: 11131053.929 ops/s
Iteration   7: 11096969.681 ops/s
Iteration   8: 11105554.487 ops/s
Iteration   9: 11090509.839 ops/s
Iteration  10: 11133086.193 ops/s
Iteration  11: 11125404.259 ops/s
Iteration  12: 10974541.884 ops/s
Iteration  13: 11060159.674 ops/s
Iteration  14: 11096445.238 ops/s
Iteration  15: 11098377.180 ops/s
Iteration  16: 11074795.341 ops/s
Iteration  17: 11048560.491 ops/s
Iteration  18: 11040587.840 ops/s
Iteration  19: 11024232.842 ops/s
Iteration  20: 11052695.559 ops/s
Iteration  21: 11075933.865 ops/s
Iteration  22: 11116291.674 ops/s
Iteration  23: 11071877.819 ops/s
Iteration  24: 11089417.252 ops/s
Iteration  25: 11030897.506 ops/s
Iteration  26: 11113673.224 ops/s
Iteration  27: 11104391.906 ops/s
Iteration  28: 11108685.458 ops/s
Iteration  29: 11117773.890 ops/s
Iteration  30: 11133977.553 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asReversed":
  11081297.006 ±(99.9%) 25846.942 ops/s [Average]
  (min, avg, max) = (10974541.884, 11081297.006, 11133977.553), stdev = 38686.489
  CI (99.9%): [11055450.064, 11107143.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_asReversed  thrpt   30  11081297.006 ± 25846.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31328085.759 ops/s
# Warmup Iteration   2: 62853997.340 ops/s
# Warmup Iteration   3: 54953648.408 ops/s
# Warmup Iteration   4: 60781941.911 ops/s
# Warmup Iteration   5: 60824154.550 ops/s
# Warmup Iteration   6: 61012043.803 ops/s
# Warmup Iteration   7: 61020542.130 ops/s
# Warmup Iteration   8: 61082709.423 ops/s
# Warmup Iteration   9: 60970446.948 ops/s
# Warmup Iteration  10: 61075109.539 ops/s
# Warmup Iteration  11: 60899302.429 ops/s
# Warmup Iteration  12: 60882662.105 ops/s
# Warmup Iteration  13: 60859870.884 ops/s
# Warmup Iteration  14: 61059551.521 ops/s
# Warmup Iteration  15: 61164145.685 ops/s
# Warmup Iteration  16: 61022771.574 ops/s
# Warmup Iteration  17: 60883826.652 ops/s
# Warmup Iteration  18: 61092374.277 ops/s
# Warmup Iteration  19: 60883023.398 ops/s
# Warmup Iteration  20: 60997493.258 ops/s
# Warmup Iteration  21: 60954480.365 ops/s
# Warmup Iteration  22: 61046231.968 ops/s
# Warmup Iteration  23: 60935023.870 ops/s
# Warmup Iteration  24: 60757010.943 ops/s
# Warmup Iteration  25: 60943793.737 ops/s
# Warmup Iteration  26: 60649868.001 ops/s
# Warmup Iteration  27: 60875948.292 ops/s
# Warmup Iteration  28: 60960885.960 ops/s
# Warmup Iteration  29: 61020768.241 ops/s
# Warmup Iteration  30: 61089447.865 ops/s
Iteration   1: 61180493.959 ops/s
Iteration   2: 60984357.978 ops/s
Iteration   3: 60922191.381 ops/s
Iteration   4: 60742162.231 ops/s
Iteration   5: 60772318.544 ops/s
Iteration   6: 60688846.748 ops/s
Iteration   7: 61024649.209 ops/s
Iteration   8: 61131939.980 ops/s
Iteration   9: 61047406.428 ops/s
Iteration  10: 60479848.047 ops/s
Iteration  11: 58210521.997 ops/s
Iteration  12: 59200596.853 ops/s
Iteration  13: 61100180.865 ops/s
Iteration  14: 60720538.630 ops/s
Iteration  15: 60836935.512 ops/s
Iteration  16: 61121808.273 ops/s
Iteration  17: 61210727.035 ops/s
Iteration  18: 60737597.068 ops/s
Iteration  19: 60962098.792 ops/s
Iteration  20: 60920495.139 ops/s
Iteration  21: 60808706.369 ops/s
Iteration  22: 60950863.846 ops/s
Iteration  23: 61244818.709 ops/s
Iteration  24: 60861425.798 ops/s
Iteration  25: 60803560.777 ops/s
Iteration  26: 61304873.498 ops/s
Iteration  27: 60882303.426 ops/s
Iteration  28: 61003492.539 ops/s
Iteration  29: 60591997.050 ops/s
Iteration  30: 61092322.001 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asSynchronized":
  60784669.289 ±(99.9%) 408888.770 ops/s [Average]
  (min, avg, max) = (58210521.997, 60784669.289, 61304873.498), stdev = 612005.508
  CI (99.9%): [60375780.520, 61193558.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_asSynchronized  thrpt   30  60784669.289 ± 408888.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46518933.815 ops/s
# Warmup Iteration   2: 87958062.241 ops/s
# Warmup Iteration   3: 83930683.147 ops/s
# Warmup Iteration   4: 93128511.948 ops/s
# Warmup Iteration   5: 93448418.260 ops/s
# Warmup Iteration   6: 93345809.876 ops/s
# Warmup Iteration   7: 93359109.667 ops/s
# Warmup Iteration   8: 93215591.763 ops/s
# Warmup Iteration   9: 93049932.399 ops/s
# Warmup Iteration  10: 93221760.650 ops/s
# Warmup Iteration  11: 93663754.669 ops/s
# Warmup Iteration  12: 93116988.431 ops/s
# Warmup Iteration  13: 93497354.627 ops/s
# Warmup Iteration  14: 93452120.580 ops/s
# Warmup Iteration  15: 93841256.735 ops/s
# Warmup Iteration  16: 93614548.650 ops/s
# Warmup Iteration  17: 93217797.833 ops/s
# Warmup Iteration  18: 93085097.546 ops/s
# Warmup Iteration  19: 92901197.307 ops/s
# Warmup Iteration  20: 93430733.205 ops/s
# Warmup Iteration  21: 92965668.229 ops/s
# Warmup Iteration  22: 93440313.492 ops/s
# Warmup Iteration  23: 93528164.139 ops/s
# Warmup Iteration  24: 93406123.997 ops/s
# Warmup Iteration  25: 93497613.112 ops/s
# Warmup Iteration  26: 93310345.473 ops/s
# Warmup Iteration  27: 93499434.683 ops/s
# Warmup Iteration  28: 93529996.005 ops/s
# Warmup Iteration  29: 93647747.068 ops/s
# Warmup Iteration  30: 93477051.797 ops/s
Iteration   1: 93441418.712 ops/s
Iteration   2: 93344642.877 ops/s
Iteration   3: 93534533.361 ops/s
Iteration   4: 93589072.974 ops/s
Iteration   5: 93488431.352 ops/s
Iteration   6: 93657981.374 ops/s
Iteration   7: 92945366.293 ops/s
Iteration   8: 93344579.771 ops/s
Iteration   9: 94134416.583 ops/s
Iteration  10: 93656335.482 ops/s
Iteration  11: 93658538.705 ops/s
Iteration  12: 93638438.520 ops/s
Iteration  13: 93113800.512 ops/s
Iteration  14: 93431925.653 ops/s
Iteration  15: 93642586.260 ops/s
Iteration  16: 93631009.671 ops/s
Iteration  17: 93613727.715 ops/s
Iteration  18: 93071747.147 ops/s
Iteration  19: 93518205.929 ops/s
Iteration  20: 93697193.467 ops/s
Iteration  21: 93548222.532 ops/s
Iteration  22: 93795741.021 ops/s
Iteration  23: 93882935.782 ops/s
Iteration  24: 93549276.617 ops/s
Iteration  25: 93418320.703 ops/s
Iteration  26: 93597679.064 ops/s
Iteration  27: 93307776.861 ops/s
Iteration  28: 93335421.918 ops/s
Iteration  29: 93699643.075 ops/s
Iteration  30: 93522701.378 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_asUnmodifiable":
  93527055.710 ±(99.9%) 158353.968 ops/s [Average]
  (min, avg, max) = (92945366.293, 93527055.710, 94134416.583), stdev = 237016.782
  CI (99.9%): [93368701.743, 93685409.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  93527055.710 ± 158353.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6570040.767 ops/s
# Warmup Iteration   2: 6846504.498 ops/s
# Warmup Iteration   3: 9361290.968 ops/s
# Warmup Iteration   4: 9343808.453 ops/s
# Warmup Iteration   5: 9354340.594 ops/s
# Warmup Iteration   6: 9354811.781 ops/s
# Warmup Iteration   7: 9331928.097 ops/s
# Warmup Iteration   8: 9351865.014 ops/s
# Warmup Iteration   9: 9373952.386 ops/s
# Warmup Iteration  10: 9331888.309 ops/s
# Warmup Iteration  11: 8084735.011 ops/s
# Warmup Iteration  12: 9061763.928 ops/s
# Warmup Iteration  13: 9370522.910 ops/s
# Warmup Iteration  14: 9338809.817 ops/s
# Warmup Iteration  15: 9366644.882 ops/s
# Warmup Iteration  16: 9333469.718 ops/s
# Warmup Iteration  17: 9356601.865 ops/s
# Warmup Iteration  18: 9367752.362 ops/s
# Warmup Iteration  19: 9344764.691 ops/s
# Warmup Iteration  20: 9338171.377 ops/s
# Warmup Iteration  21: 9355862.783 ops/s
# Warmup Iteration  22: 9347220.464 ops/s
# Warmup Iteration  23: 9344914.864 ops/s
# Warmup Iteration  24: 9376787.556 ops/s
# Warmup Iteration  25: 9356029.403 ops/s
# Warmup Iteration  26: 9362995.547 ops/s
# Warmup Iteration  27: 9336290.166 ops/s
# Warmup Iteration  28: 9387914.771 ops/s
# Warmup Iteration  29: 9352672.821 ops/s
# Warmup Iteration  30: 9337867.832 ops/s
Iteration   1: 9353656.377 ops/s
Iteration   2: 9355107.243 ops/s
Iteration   3: 9359357.780 ops/s
Iteration   4: 9367833.890 ops/s
Iteration   5: 9321077.807 ops/s
Iteration   6: 9346877.731 ops/s
Iteration   7: 9329456.641 ops/s
Iteration   8: 9362762.458 ops/s
Iteration   9: 9372434.196 ops/s
Iteration  10: 9325495.084 ops/s
Iteration  11: 9398064.270 ops/s
Iteration  12: 9325108.904 ops/s
Iteration  13: 9340512.295 ops/s
Iteration  14: 9341611.197 ops/s
Iteration  15: 9316981.263 ops/s
Iteration  16: 9346362.936 ops/s
Iteration  17: 9339889.214 ops/s
Iteration  18: 9345377.300 ops/s
Iteration  19: 9386566.956 ops/s
Iteration  20: 9351087.722 ops/s
Iteration  21: 9366473.165 ops/s
Iteration  22: 9322530.797 ops/s
Iteration  23: 9350337.535 ops/s
Iteration  24: 9300537.880 ops/s
Iteration  25: 9374541.397 ops/s
Iteration  26: 9360862.249 ops/s
Iteration  27: 9364785.650 ops/s
Iteration  28: 9348760.481 ops/s
Iteration  29: 9341711.689 ops/s
Iteration  30: 9362910.287 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearch":
  9349302.413 ±(99.9%) 14291.377 ops/s [Average]
  (min, avg, max) = (9300537.880, 9349302.413, 9398064.270), stdev = 21390.662
  CI (99.9%): [9335011.036, 9363593.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_binarySearch  thrpt   30  9349302.413 ± 14291.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6457489.939 ops/s
# Warmup Iteration   2: 6679012.085 ops/s
# Warmup Iteration   3: 8913359.396 ops/s
# Warmup Iteration   4: 9042357.966 ops/s
# Warmup Iteration   5: 8999949.011 ops/s
# Warmup Iteration   6: 9038131.129 ops/s
# Warmup Iteration   7: 9024913.464 ops/s
# Warmup Iteration   8: 8976878.312 ops/s
# Warmup Iteration   9: 9033595.184 ops/s
# Warmup Iteration  10: 9033940.982 ops/s
# Warmup Iteration  11: 8661745.870 ops/s
# Warmup Iteration  12: 7908154.031 ops/s
# Warmup Iteration  13: 9003218.084 ops/s
# Warmup Iteration  14: 9023247.922 ops/s
# Warmup Iteration  15: 9030231.790 ops/s
# Warmup Iteration  16: 9018340.863 ops/s
# Warmup Iteration  17: 9068748.612 ops/s
# Warmup Iteration  18: 9020305.578 ops/s
# Warmup Iteration  19: 9027311.946 ops/s
# Warmup Iteration  20: 9049468.354 ops/s
# Warmup Iteration  21: 9038481.380 ops/s
# Warmup Iteration  22: 8995539.953 ops/s
# Warmup Iteration  23: 9059618.052 ops/s
# Warmup Iteration  24: 9043177.186 ops/s
# Warmup Iteration  25: 9013589.208 ops/s
# Warmup Iteration  26: 9012227.457 ops/s
# Warmup Iteration  27: 9054767.139 ops/s
# Warmup Iteration  28: 9023602.979 ops/s
# Warmup Iteration  29: 9022505.631 ops/s
# Warmup Iteration  30: 9012562.782 ops/s
Iteration   1: 9038819.197 ops/s
Iteration   2: 9053656.574 ops/s
Iteration   3: 9021043.676 ops/s
Iteration   4: 9036319.905 ops/s
Iteration   5: 9036592.766 ops/s
Iteration   6: 8964003.322 ops/s
Iteration   7: 9059831.661 ops/s
Iteration   8: 9031801.648 ops/s
Iteration   9: 9064490.803 ops/s
Iteration  10: 9007626.382 ops/s
Iteration  11: 9073776.120 ops/s
Iteration  12: 8991799.860 ops/s
Iteration  13: 9057664.778 ops/s
Iteration  14: 9023829.025 ops/s
Iteration  15: 9047844.004 ops/s
Iteration  16: 9033568.743 ops/s
Iteration  17: 9044537.093 ops/s
Iteration  18: 9034304.041 ops/s
Iteration  19: 8969105.601 ops/s
Iteration  20: 9022315.401 ops/s
Iteration  21: 9026908.938 ops/s
Iteration  22: 9032648.898 ops/s
Iteration  23: 9015231.070 ops/s
Iteration  24: 9021399.111 ops/s
Iteration  25: 9079230.110 ops/s
Iteration  26: 9001563.755 ops/s
Iteration  27: 8989539.189 ops/s
Iteration  28: 9015137.464 ops/s
Iteration  29: 9057609.797 ops/s
Iteration  30: 9029795.833 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_binarySearchWithComparator":
  9029399.825 ±(99.9%) 18567.405 ops/s [Average]
  (min, avg, max) = (8964003.322, 9029399.825, 9079230.110), stdev = 27790.820
  CI (99.9%): [9010832.420, 9047967.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  9029399.825 ± 18567.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1145115.175 ops/s
# Warmup Iteration   2: 2944054.251 ops/s
# Warmup Iteration   3: 2973031.322 ops/s
# Warmup Iteration   4: 2419023.741 ops/s
# Warmup Iteration   5: 2949061.499 ops/s
# Warmup Iteration   6: 2974443.766 ops/s
# Warmup Iteration   7: 2966227.250 ops/s
# Warmup Iteration   8: 2973640.878 ops/s
# Warmup Iteration   9: 2977248.425 ops/s
# Warmup Iteration  10: 2970686.560 ops/s
# Warmup Iteration  11: 2972204.674 ops/s
# Warmup Iteration  12: 2967857.103 ops/s
# Warmup Iteration  13: 2974755.860 ops/s
# Warmup Iteration  14: 2982507.747 ops/s
# Warmup Iteration  15: 2980883.373 ops/s
# Warmup Iteration  16: 2970080.866 ops/s
# Warmup Iteration  17: 2975585.581 ops/s
# Warmup Iteration  18: 2983529.863 ops/s
# Warmup Iteration  19: 2976531.521 ops/s
# Warmup Iteration  20: 2973280.166 ops/s
# Warmup Iteration  21: 2981067.194 ops/s
# Warmup Iteration  22: 2973342.392 ops/s
# Warmup Iteration  23: 2969000.384 ops/s
# Warmup Iteration  24: 2975143.195 ops/s
# Warmup Iteration  25: 2978315.550 ops/s
# Warmup Iteration  26: 2976976.192 ops/s
# Warmup Iteration  27: 2973878.180 ops/s
# Warmup Iteration  28: 2985605.132 ops/s
# Warmup Iteration  29: 2981264.219 ops/s
# Warmup Iteration  30: 2976228.151 ops/s
Iteration   1: 2972606.329 ops/s
Iteration   2: 2975809.209 ops/s
Iteration   3: 2987232.602 ops/s
Iteration   4: 2983893.842 ops/s
Iteration   5: 2975640.970 ops/s
Iteration   6: 2979410.728 ops/s
Iteration   7: 2980852.839 ops/s
Iteration   8: 2976780.257 ops/s
Iteration   9: 2986035.231 ops/s
Iteration  10: 2980465.822 ops/s
Iteration  11: 2969287.615 ops/s
Iteration  12: 2966681.882 ops/s
Iteration  13: 2976270.430 ops/s
Iteration  14: 2981605.024 ops/s
Iteration  15: 2979140.478 ops/s
Iteration  16: 2985974.588 ops/s
Iteration  17: 2977190.193 ops/s
Iteration  18: 2975760.766 ops/s
Iteration  19: 2972880.343 ops/s
Iteration  20: 2976004.804 ops/s
Iteration  21: 2978146.601 ops/s
Iteration  22: 2977905.231 ops/s
Iteration  23: 2968588.063 ops/s
Iteration  24: 2965779.353 ops/s
Iteration  25: 2980910.520 ops/s
Iteration  26: 2975998.826 ops/s
Iteration  27: 2981518.767 ops/s
Iteration  28: 2973361.954 ops/s
Iteration  29: 2985443.614 ops/s
Iteration  30: 2983048.704 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk":
  2977674.186 ±(99.9%) 3772.255 ops/s [Average]
  (min, avg, max) = (2965779.353, 2977674.186, 2987232.602), stdev = 5646.135
  CI (99.9%): [2973901.931, 2981446.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_chunk  thrpt   30  2977674.186 ± 3772.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33266123.423 ops/s
# Warmup Iteration   2: 61712906.437 ops/s
# Warmup Iteration   3: 62849614.986 ops/s
# Warmup Iteration   4: 69793212.742 ops/s
# Warmup Iteration   5: 69737878.805 ops/s
# Warmup Iteration   6: 69366690.134 ops/s
# Warmup Iteration   7: 69514150.336 ops/s
# Warmup Iteration   8: 69913467.701 ops/s
# Warmup Iteration   9: 69648176.691 ops/s
# Warmup Iteration  10: 69401056.154 ops/s
# Warmup Iteration  11: 69495075.460 ops/s
# Warmup Iteration  12: 69488702.663 ops/s
# Warmup Iteration  13: 69335049.550 ops/s
# Warmup Iteration  14: 69832425.828 ops/s
# Warmup Iteration  15: 69528926.157 ops/s
# Warmup Iteration  16: 69336818.807 ops/s
# Warmup Iteration  17: 69636845.253 ops/s
# Warmup Iteration  18: 69123661.523 ops/s
# Warmup Iteration  19: 69171143.694 ops/s
# Warmup Iteration  20: 69160798.847 ops/s
# Warmup Iteration  21: 68822396.497 ops/s
# Warmup Iteration  22: 69500251.514 ops/s
# Warmup Iteration  23: 69339454.216 ops/s
# Warmup Iteration  24: 69394897.643 ops/s
# Warmup Iteration  25: 69020960.610 ops/s
# Warmup Iteration  26: 69096188.321 ops/s
# Warmup Iteration  27: 69408180.969 ops/s
# Warmup Iteration  28: 69741996.124 ops/s
# Warmup Iteration  29: 69593148.753 ops/s
# Warmup Iteration  30: 69447117.187 ops/s
Iteration   1: 69862247.207 ops/s
Iteration   2: 69452303.150 ops/s
Iteration   3: 69482801.964 ops/s
Iteration   4: 69447566.750 ops/s
Iteration   5: 69240701.585 ops/s
Iteration   6: 69247094.807 ops/s
Iteration   7: 68836187.207 ops/s
Iteration   8: 68800619.205 ops/s
Iteration   9: 68426628.367 ops/s
Iteration  10: 69155910.643 ops/s
Iteration  11: 68438305.420 ops/s
Iteration  12: 68675462.369 ops/s
Iteration  13: 69714859.640 ops/s
Iteration  14: 68659960.842 ops/s
Iteration  15: 69068715.285 ops/s
Iteration  16: 69378862.919 ops/s
Iteration  17: 69612731.682 ops/s
Iteration  18: 68997909.032 ops/s
Iteration  19: 69301308.795 ops/s
Iteration  20: 69255488.686 ops/s
Iteration  21: 69437247.814 ops/s
Iteration  22: 69343911.474 ops/s
Iteration  23: 69134807.963 ops/s
Iteration  24: 68766603.704 ops/s
Iteration  25: 70052589.323 ops/s
Iteration  26: 70039684.495 ops/s
Iteration  27: 68884132.844 ops/s
Iteration  28: 69783706.347 ops/s
Iteration  29: 69619549.063 ops/s
Iteration  30: 68500460.471 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_empty":
  69220611.969 ±(99.9%) 304384.290 ops/s [Average]
  (min, avg, max) = (68426628.367, 69220611.969, 70052589.323), stdev = 455588.110
  CI (99.9%): [68916227.678, 69524996.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_chunk_empty  thrpt   30  69220611.969 ± 304384.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5229332.532 ops/s
# Warmup Iteration   2: 11999817.771 ops/s
# Warmup Iteration   3: 12073111.591 ops/s
# Warmup Iteration   4: 10042249.363 ops/s
# Warmup Iteration   5: 12039078.635 ops/s
# Warmup Iteration   6: 12019562.211 ops/s
# Warmup Iteration   7: 12053288.226 ops/s
# Warmup Iteration   8: 12039174.220 ops/s
# Warmup Iteration   9: 12032079.599 ops/s
# Warmup Iteration  10: 12098979.355 ops/s
# Warmup Iteration  11: 12065742.908 ops/s
# Warmup Iteration  12: 12069561.977 ops/s
# Warmup Iteration  13: 12075350.735 ops/s
# Warmup Iteration  14: 12051403.094 ops/s
# Warmup Iteration  15: 12081190.304 ops/s
# Warmup Iteration  16: 12094416.728 ops/s
# Warmup Iteration  17: 12078028.610 ops/s
# Warmup Iteration  18: 12078002.977 ops/s
# Warmup Iteration  19: 12093354.754 ops/s
# Warmup Iteration  20: 12081091.690 ops/s
# Warmup Iteration  21: 12038297.724 ops/s
# Warmup Iteration  22: 12061109.072 ops/s
# Warmup Iteration  23: 12068974.767 ops/s
# Warmup Iteration  24: 12067830.389 ops/s
# Warmup Iteration  25: 12040069.301 ops/s
# Warmup Iteration  26: 12090523.059 ops/s
# Warmup Iteration  27: 12080005.452 ops/s
# Warmup Iteration  28: 12095403.945 ops/s
# Warmup Iteration  29: 12062723.370 ops/s
# Warmup Iteration  30: 12089229.725 ops/s
Iteration   1: 12052518.253 ops/s
Iteration   2: 12061497.868 ops/s
Iteration   3: 12024197.197 ops/s
Iteration   4: 12068511.672 ops/s
Iteration   5: 12080202.077 ops/s
Iteration   6: 12045893.780 ops/s
Iteration   7: 12079071.202 ops/s
Iteration   8: 12105587.634 ops/s
Iteration   9: 12094321.879 ops/s
Iteration  10: 12085655.467 ops/s
Iteration  11: 12044016.062 ops/s
Iteration  12: 12089572.657 ops/s
Iteration  13: 12067311.321 ops/s
Iteration  14: 12090592.417 ops/s
Iteration  15: 12075548.562 ops/s
Iteration  16: 12123780.863 ops/s
Iteration  17: 12076003.865 ops/s
Iteration  18: 12075389.042 ops/s
Iteration  19: 12044115.859 ops/s
Iteration  20: 12068395.079 ops/s
Iteration  21: 12073595.150 ops/s
Iteration  22: 12047632.216 ops/s
Iteration  23: 12061799.203 ops/s
Iteration  24: 12114616.206 ops/s
Iteration  25: 12084992.860 ops/s
Iteration  26: 12050256.005 ops/s
Iteration  27: 12112315.003 ops/s
Iteration  28: 12091433.548 ops/s
Iteration  29: 12063667.846 ops/s
Iteration  30: 12054202.669 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_large_size":
  12073556.449 ±(99.9%) 15616.897 ops/s [Average]
  (min, avg, max) = (12024197.197, 12073556.449, 12123780.863), stdev = 23374.639
  CI (99.9%): [12057939.551, 12089173.346] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  12073556.449 ± 15616.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5362776.026 ops/s
# Warmup Iteration   2: 13216185.795 ops/s
# Warmup Iteration   3: 10671909.526 ops/s
# Warmup Iteration   4: 12920020.728 ops/s
# Warmup Iteration   5: 12936472.011 ops/s
# Warmup Iteration   6: 12881008.732 ops/s
# Warmup Iteration   7: 12912875.250 ops/s
# Warmup Iteration   8: 12880589.067 ops/s
# Warmup Iteration   9: 12911738.131 ops/s
# Warmup Iteration  10: 12918100.613 ops/s
# Warmup Iteration  11: 12915029.402 ops/s
# Warmup Iteration  12: 12947777.695 ops/s
# Warmup Iteration  13: 12902704.686 ops/s
# Warmup Iteration  14: 12890160.254 ops/s
# Warmup Iteration  15: 12909270.310 ops/s
# Warmup Iteration  16: 12918778.579 ops/s
# Warmup Iteration  17: 12933286.959 ops/s
# Warmup Iteration  18: 12833968.847 ops/s
# Warmup Iteration  19: 12763267.309 ops/s
# Warmup Iteration  20: 12940725.312 ops/s
# Warmup Iteration  21: 12940111.703 ops/s
# Warmup Iteration  22: 12919514.234 ops/s
# Warmup Iteration  23: 12880658.891 ops/s
# Warmup Iteration  24: 12948914.043 ops/s
# Warmup Iteration  25: 12944035.314 ops/s
# Warmup Iteration  26: 12934047.880 ops/s
# Warmup Iteration  27: 12933437.542 ops/s
# Warmup Iteration  28: 12932824.027 ops/s
# Warmup Iteration  29: 12883970.227 ops/s
# Warmup Iteration  30: 12943770.604 ops/s
Iteration   1: 12977520.617 ops/s
Iteration   2: 12926708.348 ops/s
Iteration   3: 12936603.815 ops/s
Iteration   4: 12920981.458 ops/s
Iteration   5: 12950802.949 ops/s
Iteration   6: 12982607.111 ops/s
Iteration   7: 12927971.287 ops/s
Iteration   8: 12938963.160 ops/s
Iteration   9: 12936149.265 ops/s
Iteration  10: 12916797.666 ops/s
Iteration  11: 12943613.119 ops/s
Iteration  12: 12911278.327 ops/s
Iteration  13: 12932369.458 ops/s
Iteration  14: 12948228.168 ops/s
Iteration  15: 12901190.402 ops/s
Iteration  16: 12931510.123 ops/s
Iteration  17: 12903063.533 ops/s
Iteration  18: 12922727.767 ops/s
Iteration  19: 12946986.808 ops/s
Iteration  20: 12919725.070 ops/s
Iteration  21: 12899830.222 ops/s
Iteration  22: 12936002.384 ops/s
Iteration  23: 12916354.760 ops/s
Iteration  24: 12951704.347 ops/s
Iteration  25: 12903194.050 ops/s
Iteration  26: 12952420.208 ops/s
Iteration  27: 12944585.057 ops/s
Iteration  28: 12863463.922 ops/s
Iteration  29: 12951550.109 ops/s
Iteration  30: 12936480.679 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_single":
  12931046.140 ±(99.9%) 16036.376 ops/s [Average]
  (min, avg, max) = (12863463.922, 12931046.140, 12982607.111), stdev = 24002.494
  CI (99.9%): [12915009.764, 12947082.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_chunk_single  thrpt   30  12931046.140 ± 16036.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748654.054 ops/s
# Warmup Iteration   2: 802871.221 ops/s
# Warmup Iteration   3: 1037302.384 ops/s
# Warmup Iteration   4: 1040617.019 ops/s
# Warmup Iteration   5: 1038162.096 ops/s
# Warmup Iteration   6: 1036882.167 ops/s
# Warmup Iteration   7: 1040967.693 ops/s
# Warmup Iteration   8: 1039513.599 ops/s
# Warmup Iteration   9: 1041392.820 ops/s
# Warmup Iteration  10: 1039592.097 ops/s
# Warmup Iteration  11: 882192.157 ops/s
# Warmup Iteration  12: 1030895.666 ops/s
# Warmup Iteration  13: 1031525.465 ops/s
# Warmup Iteration  14: 1036696.541 ops/s
# Warmup Iteration  15: 1035954.613 ops/s
# Warmup Iteration  16: 1045073.126 ops/s
# Warmup Iteration  17: 1100213.166 ops/s
# Warmup Iteration  18: 1108956.718 ops/s
# Warmup Iteration  19: 1106906.545 ops/s
# Warmup Iteration  20: 1107415.300 ops/s
# Warmup Iteration  21: 1106586.282 ops/s
# Warmup Iteration  22: 1102861.043 ops/s
# Warmup Iteration  23: 1101854.808 ops/s
# Warmup Iteration  24: 1103751.315 ops/s
# Warmup Iteration  25: 1106594.974 ops/s
# Warmup Iteration  26: 1106771.629 ops/s
# Warmup Iteration  27: 1106525.472 ops/s
# Warmup Iteration  28: 1110462.591 ops/s
# Warmup Iteration  29: 1105790.814 ops/s
# Warmup Iteration  30: 1109424.466 ops/s
Iteration   1: 1100166.041 ops/s
Iteration   2: 1106936.289 ops/s
Iteration   3: 1125389.933 ops/s
Iteration   4: 1102676.204 ops/s
Iteration   5: 1109739.325 ops/s
Iteration   6: 1103851.055 ops/s
Iteration   7: 1110245.331 ops/s
Iteration   8: 1101784.109 ops/s
Iteration   9: 1106537.627 ops/s
Iteration  10: 1111104.052 ops/s
Iteration  11: 1106952.064 ops/s
Iteration  12: 1102618.467 ops/s
Iteration  13: 1109169.015 ops/s
Iteration  14: 1110351.933 ops/s
Iteration  15: 1110942.886 ops/s
Iteration  16: 1106369.628 ops/s
Iteration  17: 1113354.159 ops/s
Iteration  18: 1092767.107 ops/s
Iteration  19: 1100886.445 ops/s
Iteration  20: 1106933.657 ops/s
Iteration  21: 1106881.110 ops/s
Iteration  22: 1103259.356 ops/s
Iteration  23: 1104792.287 ops/s
Iteration  24: 1107784.681 ops/s
Iteration  25: 1105979.482 ops/s
Iteration  26: 1108475.781 ops/s
Iteration  27: 1111748.900 ops/s
Iteration  28: 1109097.143 ops/s
Iteration  29: 1103865.154 ops/s
Iteration  30: 1108077.169 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_chunk_zero_throws":
  1106957.880 ±(99.9%) 3654.819 ops/s [Average]
  (min, avg, max) = (1092767.107, 1106957.880, 1125389.933), stdev = 5470.362
  CI (99.9%): [1103303.060, 1110612.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1106957.880 ± 3654.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6316718.032 ops/s
# Warmup Iteration   2: 10756762.947 ops/s
# Warmup Iteration   3: 12639132.692 ops/s
# Warmup Iteration   4: 12627612.049 ops/s
# Warmup Iteration   5: 12611266.358 ops/s
# Warmup Iteration   6: 12581297.341 ops/s
# Warmup Iteration   7: 12561529.713 ops/s
# Warmup Iteration   8: 12590205.320 ops/s
# Warmup Iteration   9: 12550118.685 ops/s
# Warmup Iteration  10: 12470463.028 ops/s
# Warmup Iteration  11: 12452795.925 ops/s
# Warmup Iteration  12: 12532934.279 ops/s
# Warmup Iteration  13: 12610363.990 ops/s
# Warmup Iteration  14: 12537916.940 ops/s
# Warmup Iteration  15: 12587747.749 ops/s
# Warmup Iteration  16: 12566644.195 ops/s
# Warmup Iteration  17: 12566104.777 ops/s
# Warmup Iteration  18: 12549048.554 ops/s
# Warmup Iteration  19: 12619835.995 ops/s
# Warmup Iteration  20: 12530897.596 ops/s
# Warmup Iteration  21: 12570131.335 ops/s
# Warmup Iteration  22: 12629732.183 ops/s
# Warmup Iteration  23: 12536064.168 ops/s
# Warmup Iteration  24: 12540627.703 ops/s
# Warmup Iteration  25: 12555703.700 ops/s
# Warmup Iteration  26: 12658850.821 ops/s
# Warmup Iteration  27: 12518616.277 ops/s
# Warmup Iteration  28: 12628119.788 ops/s
# Warmup Iteration  29: 12617356.782 ops/s
# Warmup Iteration  30: 12580285.901 ops/s
Iteration   1: 12676713.549 ops/s
Iteration   2: 12595637.694 ops/s
Iteration   3: 12573699.362 ops/s
Iteration   4: 12669723.579 ops/s
Iteration   5: 12604335.235 ops/s
Iteration   6: 12617371.508 ops/s
Iteration   7: 12486067.851 ops/s
Iteration   8: 12554413.995 ops/s
Iteration   9: 12494760.177 ops/s
Iteration  10: 12640147.904 ops/s
Iteration  11: 12602206.863 ops/s
Iteration  12: 12629864.895 ops/s
Iteration  13: 12603164.911 ops/s
Iteration  14: 12622064.720 ops/s
Iteration  15: 12618117.287 ops/s
Iteration  16: 12585551.639 ops/s
Iteration  17: 12604414.680 ops/s
Iteration  18: 12602351.744 ops/s
Iteration  19: 12591486.669 ops/s
Iteration  20: 12663729.833 ops/s
Iteration  21: 12617250.101 ops/s
Iteration  22: 12506877.728 ops/s
Iteration  23: 12600066.958 ops/s
Iteration  24: 12649156.493 ops/s
Iteration  25: 12572189.989 ops/s
Iteration  26: 12656596.708 ops/s
Iteration  27: 12571979.554 ops/s
Iteration  28: 12631151.476 ops/s
Iteration  29: 12670209.607 ops/s
Iteration  30: 12588066.500 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_clear":
  12603312.307 ±(99.9%) 32226.863 ops/s [Average]
  (min, avg, max) = (12486067.851, 12603312.307, 12676713.549), stdev = 48235.655
  CI (99.9%): [12571085.444, 12635539.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_clear  thrpt   30  12603312.307 ± 32226.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11392195.991 ops/s
# Warmup Iteration   2: 24295777.702 ops/s
# Warmup Iteration   3: 20511948.972 ops/s
# Warmup Iteration   4: 24168181.595 ops/s
# Warmup Iteration   5: 24168091.191 ops/s
# Warmup Iteration   6: 24164981.090 ops/s
# Warmup Iteration   7: 24231907.655 ops/s
# Warmup Iteration   8: 24168004.331 ops/s
# Warmup Iteration   9: 24147758.417 ops/s
# Warmup Iteration  10: 24214498.261 ops/s
# Warmup Iteration  11: 24221343.542 ops/s
# Warmup Iteration  12: 24193415.603 ops/s
# Warmup Iteration  13: 24137846.538 ops/s
# Warmup Iteration  14: 24222760.026 ops/s
# Warmup Iteration  15: 24206097.172 ops/s
# Warmup Iteration  16: 24161207.781 ops/s
# Warmup Iteration  17: 24171321.715 ops/s
# Warmup Iteration  18: 24202737.263 ops/s
# Warmup Iteration  19: 24169892.212 ops/s
# Warmup Iteration  20: 24102086.997 ops/s
# Warmup Iteration  21: 24163849.888 ops/s
# Warmup Iteration  22: 24168049.961 ops/s
# Warmup Iteration  23: 24176191.173 ops/s
# Warmup Iteration  24: 24158834.161 ops/s
# Warmup Iteration  25: 24178543.216 ops/s
# Warmup Iteration  26: 24193341.427 ops/s
# Warmup Iteration  27: 24222411.006 ops/s
# Warmup Iteration  28: 24231513.891 ops/s
# Warmup Iteration  29: 24181794.553 ops/s
# Warmup Iteration  30: 24198479.554 ops/s
Iteration   1: 24153930.418 ops/s
Iteration   2: 24201883.003 ops/s
Iteration   3: 24132128.391 ops/s
Iteration   4: 24046440.334 ops/s
Iteration   5: 23786252.664 ops/s
Iteration   6: 23322599.440 ops/s
Iteration   7: 24143671.746 ops/s
Iteration   8: 24236976.427 ops/s
Iteration   9: 24196613.354 ops/s
Iteration  10: 24133465.123 ops/s
Iteration  11: 24179252.516 ops/s
Iteration  12: 24095710.080 ops/s
Iteration  13: 24191381.294 ops/s
Iteration  14: 23628954.418 ops/s
Iteration  15: 24196125.113 ops/s
Iteration  16: 24074769.157 ops/s
Iteration  17: 24192634.440 ops/s
Iteration  18: 24298671.294 ops/s
Iteration  19: 24211685.328 ops/s
Iteration  20: 24248484.655 ops/s
Iteration  21: 24120584.817 ops/s
Iteration  22: 24235812.979 ops/s
Iteration  23: 24180099.473 ops/s
Iteration  24: 24160426.168 ops/s
Iteration  25: 24185028.271 ops/s
Iteration  26: 24126657.539 ops/s
Iteration  27: 24151596.137 ops/s
Iteration  28: 24074558.184 ops/s
Iteration  29: 24211406.089 ops/s
Iteration  30: 24136786.475 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collect":
  24108486.178 ±(99.9%) 131992.793 ops/s [Average]
  (min, avg, max) = (23322599.440, 24108486.178, 24298671.294), stdev = 197560.614
  CI (99.9%): [23976493.385, 24240478.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
FastListTest._Benchmark.benchmark_collect  thrpt   30  24108486.178 ± 131992.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1918254.185 ops/s
# Warmup Iteration   2: 5363438.765 ops/s
# Warmup Iteration   3: 5536957.084 ops/s
# Warmup Iteration   4: 4606362.923 ops/s
# Warmup Iteration   5: 5565664.669 ops/s
# Warmup Iteration   6: 5566797.710 ops/s
# Warmup Iteration   7: 5568325.240 ops/s
# Warmup Iteration   8: 5567730.221 ops/s
# Warmup Iteration   9: 5555358.728 ops/s
# Warmup Iteration  10: 5578644.442 ops/s
# Warmup Iteration  11: 5570481.832 ops/s
# Warmup Iteration  12: 5564583.227 ops/s
# Warmup Iteration  13: 5558295.595 ops/s
# Warmup Iteration  14: 5563861.765 ops/s
# Warmup Iteration  15: 5573347.248 ops/s
# Warmup Iteration  16: 5557054.897 ops/s
# Warmup Iteration  17: 5568151.637 ops/s
# Warmup Iteration  18: 5559236.113 ops/s
# Warmup Iteration  19: 5568353.581 ops/s
# Warmup Iteration  20: 5568407.248 ops/s
# Warmup Iteration  21: 5544355.374 ops/s
# Warmup Iteration  22: 5561754.300 ops/s
# Warmup Iteration  23: 5558150.968 ops/s
# Warmup Iteration  24: 5563403.842 ops/s
# Warmup Iteration  25: 5576036.639 ops/s
# Warmup Iteration  26: 5576120.290 ops/s
# Warmup Iteration  27: 5568833.512 ops/s
# Warmup Iteration  28: 5558877.078 ops/s
# Warmup Iteration  29: 5579335.160 ops/s
# Warmup Iteration  30: 5562918.726 ops/s
Iteration   1: 5555215.168 ops/s
Iteration   2: 5560867.624 ops/s
Iteration   3: 5572035.217 ops/s
Iteration   4: 5556644.057 ops/s
Iteration   5: 5554915.622 ops/s
Iteration   6: 5559267.387 ops/s
Iteration   7: 5577775.438 ops/s
Iteration   8: 5563232.342 ops/s
Iteration   9: 5549296.758 ops/s
Iteration  10: 5570234.925 ops/s
Iteration  11: 5576200.475 ops/s
Iteration  12: 5570389.533 ops/s
Iteration  13: 5553863.051 ops/s
Iteration  14: 5558837.622 ops/s
Iteration  15: 5571812.011 ops/s
Iteration  16: 5545107.421 ops/s
Iteration  17: 5577489.902 ops/s
Iteration  18: 5571977.832 ops/s
Iteration  19: 5567246.249 ops/s
Iteration  20: 5572477.380 ops/s
Iteration  21: 5566181.019 ops/s
Iteration  22: 5557563.947 ops/s
Iteration  23: 5577316.825 ops/s
Iteration  24: 5558131.729 ops/s
Iteration  25: 5547702.796 ops/s
Iteration  26: 5558900.995 ops/s
Iteration  27: 5556694.707 ops/s
Iteration  28: 5554828.924 ops/s
Iteration  29: 5570585.978 ops/s
Iteration  30: 5571121.184 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBoolean":
  5563463.804 ±(99.9%) 6318.276 ops/s [Average]
  (min, avg, max) = (5545107.421, 5563463.804, 5577775.438), stdev = 9456.898
  CI (99.9%): [5557145.528, 5569782.079] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectBoolean  thrpt   30  5563463.804 ± 6318.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17937751.538 ops/s
# Warmup Iteration   2: 35147078.173 ops/s
# Warmup Iteration   3: 30181248.410 ops/s
# Warmup Iteration   4: 35557726.673 ops/s
# Warmup Iteration   5: 35419711.995 ops/s
# Warmup Iteration   6: 35419509.444 ops/s
# Warmup Iteration   7: 35484515.230 ops/s
# Warmup Iteration   8: 35305969.235 ops/s
# Warmup Iteration   9: 35381677.076 ops/s
# Warmup Iteration  10: 35550835.874 ops/s
# Warmup Iteration  11: 35432637.886 ops/s
# Warmup Iteration  12: 35360459.354 ops/s
# Warmup Iteration  13: 35426217.189 ops/s
# Warmup Iteration  14: 35605043.422 ops/s
# Warmup Iteration  15: 35594941.624 ops/s
# Warmup Iteration  16: 35488750.397 ops/s
# Warmup Iteration  17: 35519693.835 ops/s
# Warmup Iteration  18: 35497782.157 ops/s
# Warmup Iteration  19: 35453499.674 ops/s
# Warmup Iteration  20: 35588594.412 ops/s
# Warmup Iteration  21: 35506659.658 ops/s
# Warmup Iteration  22: 35560695.684 ops/s
# Warmup Iteration  23: 35527061.558 ops/s
# Warmup Iteration  24: 35567088.621 ops/s
# Warmup Iteration  25: 35497938.836 ops/s
# Warmup Iteration  26: 35536858.136 ops/s
# Warmup Iteration  27: 35588356.723 ops/s
# Warmup Iteration  28: 35387223.927 ops/s
# Warmup Iteration  29: 35484734.979 ops/s
# Warmup Iteration  30: 35513285.734 ops/s
Iteration   1: 35517997.336 ops/s
Iteration   2: 35493287.888 ops/s
Iteration   3: 35441471.609 ops/s
Iteration   4: 35438904.501 ops/s
Iteration   5: 35496514.162 ops/s
Iteration   6: 35482036.801 ops/s
Iteration   7: 35497496.575 ops/s
Iteration   8: 35522929.547 ops/s
Iteration   9: 35622694.404 ops/s
Iteration  10: 35456245.922 ops/s
Iteration  11: 35583095.359 ops/s
Iteration  12: 35528577.046 ops/s
Iteration  13: 35451229.170 ops/s
Iteration  14: 35392533.954 ops/s
Iteration  15: 35157803.216 ops/s
Iteration  16: 35501054.451 ops/s
Iteration  17: 35481845.903 ops/s
Iteration  18: 35567972.451 ops/s
Iteration  19: 35619398.363 ops/s
Iteration  20: 35655842.085 ops/s
Iteration  21: 35541209.269 ops/s
Iteration  22: 35572202.892 ops/s
Iteration  23: 35450161.934 ops/s
Iteration  24: 35549173.305 ops/s
Iteration  25: 35494547.547 ops/s
Iteration  26: 35302520.163 ops/s
Iteration  27: 35456096.110 ops/s
Iteration  28: 35552704.393 ops/s
Iteration  29: 35527011.192 ops/s
Iteration  30: 35551909.673 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  35496882.241 ±(99.9%) 64021.012 ops/s [Average]
  (min, avg, max) = (35157803.216, 35496882.241, 35655842.085), stdev = 95823.644
  CI (99.9%): [35432861.229, 35560903.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  35496882.241 ± 64021.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8296686.590 ops/s
# Warmup Iteration   2: 18351152.416 ops/s
# Warmup Iteration   3: 18492229.182 ops/s
# Warmup Iteration   4: 15419161.196 ops/s
# Warmup Iteration   5: 18407778.430 ops/s
# Warmup Iteration   6: 18430498.757 ops/s
# Warmup Iteration   7: 18269308.392 ops/s
# Warmup Iteration   8: 18405519.500 ops/s
# Warmup Iteration   9: 18369935.642 ops/s
# Warmup Iteration  10: 18412780.082 ops/s
# Warmup Iteration  11: 18175929.349 ops/s
# Warmup Iteration  12: 18356058.961 ops/s
# Warmup Iteration  13: 18408472.375 ops/s
# Warmup Iteration  14: 18429203.447 ops/s
# Warmup Iteration  15: 18107587.432 ops/s
# Warmup Iteration  16: 18397035.009 ops/s
# Warmup Iteration  17: 18359121.533 ops/s
# Warmup Iteration  18: 18387551.884 ops/s
# Warmup Iteration  19: 18395002.114 ops/s
# Warmup Iteration  20: 18308440.000 ops/s
# Warmup Iteration  21: 18384307.457 ops/s
# Warmup Iteration  22: 18324064.556 ops/s
# Warmup Iteration  23: 18263250.983 ops/s
# Warmup Iteration  24: 18408080.150 ops/s
# Warmup Iteration  25: 18394344.993 ops/s
# Warmup Iteration  26: 18234406.947 ops/s
# Warmup Iteration  27: 18407608.085 ops/s
# Warmup Iteration  28: 18420189.353 ops/s
# Warmup Iteration  29: 18407215.920 ops/s
# Warmup Iteration  30: 18323111.829 ops/s
Iteration   1: 18365878.147 ops/s
Iteration   2: 18481794.105 ops/s
Iteration   3: 18301726.750 ops/s
Iteration   4: 18377276.690 ops/s
Iteration   5: 18300697.386 ops/s
Iteration   6: 18454318.019 ops/s
Iteration   7: 18399456.921 ops/s
Iteration   8: 18367389.327 ops/s
Iteration   9: 18310707.601 ops/s
Iteration  10: 18417979.098 ops/s
Iteration  11: 18369046.323 ops/s
Iteration  12: 18383813.691 ops/s
Iteration  13: 18385521.127 ops/s
Iteration  14: 18400168.131 ops/s
Iteration  15: 18392865.318 ops/s
Iteration  16: 17959534.177 ops/s
Iteration  17: 18438235.915 ops/s
Iteration  18: 17929437.215 ops/s
Iteration  19: 18408668.383 ops/s
Iteration  20: 18432058.564 ops/s
Iteration  21: 18058152.922 ops/s
Iteration  22: 18427719.990 ops/s
Iteration  23: 18371095.135 ops/s
Iteration  24: 18419853.119 ops/s
Iteration  25: 18115015.064 ops/s
Iteration  26: 18386969.524 ops/s
Iteration  27: 18490929.616 ops/s
Iteration  28: 18392450.833 ops/s
Iteration  29: 18399908.346 ops/s
Iteration  30: 18454996.630 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectBooleanWithTarget":
  18346455.469 ±(99.9%) 94913.570 ops/s [Average]
  (min, avg, max) = (17929437.215, 18346455.469, 18490929.616), stdev = 142062.174
  CI (99.9%): [18251541.899, 18441369.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  18346455.469 ± 94913.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840707.531 ops/s
# Warmup Iteration   2: 2007114.224 ops/s
# Warmup Iteration   3: 2050165.842 ops/s
# Warmup Iteration   4: 1714653.997 ops/s
# Warmup Iteration   5: 2052877.208 ops/s
# Warmup Iteration   6: 2047586.405 ops/s
# Warmup Iteration   7: 2049858.662 ops/s
# Warmup Iteration   8: 2052087.836 ops/s
# Warmup Iteration   9: 2049378.830 ops/s
# Warmup Iteration  10: 2052169.846 ops/s
# Warmup Iteration  11: 2051141.326 ops/s
# Warmup Iteration  12: 2048803.657 ops/s
# Warmup Iteration  13: 2051462.027 ops/s
# Warmup Iteration  14: 2051133.950 ops/s
# Warmup Iteration  15: 2058309.877 ops/s
# Warmup Iteration  16: 2051563.385 ops/s
# Warmup Iteration  17: 2044491.258 ops/s
# Warmup Iteration  18: 2052890.253 ops/s
# Warmup Iteration  19: 2057369.759 ops/s
# Warmup Iteration  20: 2052771.620 ops/s
# Warmup Iteration  21: 2051019.596 ops/s
# Warmup Iteration  22: 2049451.811 ops/s
# Warmup Iteration  23: 2046931.444 ops/s
# Warmup Iteration  24: 2052761.963 ops/s
# Warmup Iteration  25: 2046608.869 ops/s
# Warmup Iteration  26: 2044162.183 ops/s
# Warmup Iteration  27: 2051705.454 ops/s
# Warmup Iteration  28: 2052499.728 ops/s
# Warmup Iteration  29: 2056714.593 ops/s
# Warmup Iteration  30: 2046426.604 ops/s
Iteration   1: 2057272.506 ops/s
Iteration   2: 2051344.988 ops/s
Iteration   3: 2048045.327 ops/s
Iteration   4: 2050934.322 ops/s
Iteration   5: 2055711.864 ops/s
Iteration   6: 2056065.716 ops/s
Iteration   7: 2054126.009 ops/s
Iteration   8: 2051688.468 ops/s
Iteration   9: 2056118.640 ops/s
Iteration  10: 2050153.349 ops/s
Iteration  11: 2044416.439 ops/s
Iteration  12: 2058576.761 ops/s
Iteration  13: 2059567.697 ops/s
Iteration  14: 2041412.568 ops/s
Iteration  15: 2062682.712 ops/s
Iteration  16: 2045468.793 ops/s
Iteration  17: 2050817.929 ops/s
Iteration  18: 2052624.960 ops/s
Iteration  19: 2061237.279 ops/s
Iteration  20: 2051035.187 ops/s
Iteration  21: 2052758.675 ops/s
Iteration  22: 2063088.609 ops/s
Iteration  23: 2049459.295 ops/s
Iteration  24: 2058861.861 ops/s
Iteration  25: 2053122.462 ops/s
Iteration  26: 2047345.320 ops/s
Iteration  27: 2060056.360 ops/s
Iteration  28: 2043726.958 ops/s
Iteration  29: 2057329.391 ops/s
Iteration  30: 2052253.521 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByte":
  2053243.466 ±(99.9%) 3784.872 ops/s [Average]
  (min, avg, max) = (2041412.568, 2053243.466, 2063088.609), stdev = 5665.018
  CI (99.9%): [2049458.594, 2057028.337] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectByte  thrpt   30  2053243.466 ± 3784.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2967534.138 ops/s
# Warmup Iteration   2: 6801507.274 ops/s
# Warmup Iteration   3: 5785109.690 ops/s
# Warmup Iteration   4: 6874766.823 ops/s
# Warmup Iteration   5: 6828749.369 ops/s
# Warmup Iteration   6: 6861617.606 ops/s
# Warmup Iteration   7: 6869967.985 ops/s
# Warmup Iteration   8: 6862463.198 ops/s
# Warmup Iteration   9: 6836424.338 ops/s
# Warmup Iteration  10: 6875771.124 ops/s
# Warmup Iteration  11: 6875834.261 ops/s
# Warmup Iteration  12: 6871290.254 ops/s
# Warmup Iteration  13: 6855971.514 ops/s
# Warmup Iteration  14: 6848739.806 ops/s
# Warmup Iteration  15: 6838993.769 ops/s
# Warmup Iteration  16: 6839944.042 ops/s
# Warmup Iteration  17: 6898523.804 ops/s
# Warmup Iteration  18: 6887620.876 ops/s
# Warmup Iteration  19: 6909903.420 ops/s
# Warmup Iteration  20: 6881502.835 ops/s
# Warmup Iteration  21: 6872132.015 ops/s
# Warmup Iteration  22: 6896988.839 ops/s
# Warmup Iteration  23: 6893371.190 ops/s
# Warmup Iteration  24: 6887326.097 ops/s
# Warmup Iteration  25: 6905129.311 ops/s
# Warmup Iteration  26: 6897472.534 ops/s
# Warmup Iteration  27: 6870680.592 ops/s
# Warmup Iteration  28: 6888348.036 ops/s
# Warmup Iteration  29: 6888455.588 ops/s
# Warmup Iteration  30: 6893458.415 ops/s
Iteration   1: 6839153.550 ops/s
Iteration   2: 6893412.089 ops/s
Iteration   3: 6872882.288 ops/s
Iteration   4: 6902049.690 ops/s
Iteration   5: 6889789.195 ops/s
Iteration   6: 6890598.308 ops/s
Iteration   7: 6896966.943 ops/s
Iteration   8: 6887020.813 ops/s
Iteration   9: 6881465.341 ops/s
Iteration  10: 6888461.641 ops/s
Iteration  11: 6841082.655 ops/s
Iteration  12: 6900213.627 ops/s
Iteration  13: 6850095.717 ops/s
Iteration  14: 6886394.267 ops/s
Iteration  15: 6873399.462 ops/s
Iteration  16: 6908974.279 ops/s
Iteration  17: 6877637.065 ops/s
Iteration  18: 6910566.928 ops/s
Iteration  19: 6898013.238 ops/s
Iteration  20: 6925794.846 ops/s
Iteration  21: 6859410.166 ops/s
Iteration  22: 6873716.144 ops/s
Iteration  23: 6899980.475 ops/s
Iteration  24: 6878838.491 ops/s
Iteration  25: 6886130.467 ops/s
Iteration  26: 6854105.784 ops/s
Iteration  27: 6894466.183 ops/s
Iteration  28: 6883134.499 ops/s
Iteration  29: 6876477.755 ops/s
Iteration  30: 6883389.623 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithBagTarget":
  6883454.051 ±(99.9%) 13341.707 ops/s [Average]
  (min, avg, max) = (6839153.550, 6883454.051, 6925794.846), stdev = 19969.241
  CI (99.9%): [6870112.344, 6896795.758] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  6883454.051 ± 13341.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2121644.729 ops/s
# Warmup Iteration   2: 5123475.981 ops/s
# Warmup Iteration   3: 4640515.913 ops/s
# Warmup Iteration   4: 4709952.739 ops/s
# Warmup Iteration   5: 5083418.156 ops/s
# Warmup Iteration   6: 5095824.868 ops/s
# Warmup Iteration   7: 5085727.854 ops/s
# Warmup Iteration   8: 5103604.273 ops/s
# Warmup Iteration   9: 5095234.764 ops/s
# Warmup Iteration  10: 5094605.096 ops/s
# Warmup Iteration  11: 5099269.451 ops/s
# Warmup Iteration  12: 5103454.464 ops/s
# Warmup Iteration  13: 5107378.353 ops/s
# Warmup Iteration  14: 5095641.463 ops/s
# Warmup Iteration  15: 5099484.833 ops/s
# Warmup Iteration  16: 5100328.545 ops/s
# Warmup Iteration  17: 5090521.042 ops/s
# Warmup Iteration  18: 5096804.321 ops/s
# Warmup Iteration  19: 5092841.687 ops/s
# Warmup Iteration  20: 5100187.820 ops/s
# Warmup Iteration  21: 5102325.478 ops/s
# Warmup Iteration  22: 5092606.389 ops/s
# Warmup Iteration  23: 5099996.486 ops/s
# Warmup Iteration  24: 5102287.455 ops/s
# Warmup Iteration  25: 5090051.220 ops/s
# Warmup Iteration  26: 5088702.154 ops/s
# Warmup Iteration  27: 5110320.259 ops/s
# Warmup Iteration  28: 5079788.365 ops/s
# Warmup Iteration  29: 5093248.389 ops/s
# Warmup Iteration  30: 5092254.920 ops/s
Iteration   1: 5094664.960 ops/s
Iteration   2: 5099923.576 ops/s
Iteration   3: 5097570.900 ops/s
Iteration   4: 5095972.378 ops/s
Iteration   5: 5089026.258 ops/s
Iteration   6: 5116936.653 ops/s
Iteration   7: 5086822.644 ops/s
Iteration   8: 5101949.271 ops/s
Iteration   9: 5094380.874 ops/s
Iteration  10: 5094402.623 ops/s
Iteration  11: 5104120.588 ops/s
Iteration  12: 5048343.765 ops/s
Iteration  13: 5107815.034 ops/s
Iteration  14: 5109859.997 ops/s
Iteration  15: 5072133.519 ops/s
Iteration  16: 5106199.695 ops/s
Iteration  17: 5097923.361 ops/s
Iteration  18: 5089910.135 ops/s
Iteration  19: 5097445.838 ops/s
Iteration  20: 5099532.872 ops/s
Iteration  21: 5073585.680 ops/s
Iteration  22: 5118919.063 ops/s
Iteration  23: 5108710.180 ops/s
Iteration  24: 5107948.201 ops/s
Iteration  25: 5081115.087 ops/s
Iteration  26: 5099351.720 ops/s
Iteration  27: 5089680.743 ops/s
Iteration  28: 5102741.734 ops/s
Iteration  29: 5093165.214 ops/s
Iteration  30: 5106741.316 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectByteWithTarget":
  5096229.796 ±(99.9%) 9449.494 ops/s [Average]
  (min, avg, max) = (5048343.765, 5096229.796, 5118919.063), stdev = 14143.559
  CI (99.9%): [5086780.302, 5105679.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  5096229.796 ± 9449.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790043.684 ops/s
# Warmup Iteration   2: 1874276.028 ops/s
# Warmup Iteration   3: 1906576.394 ops/s
# Warmup Iteration   4: 1597596.324 ops/s
# Warmup Iteration   5: 1908441.414 ops/s
# Warmup Iteration   6: 1908788.598 ops/s
# Warmup Iteration   7: 1901669.145 ops/s
# Warmup Iteration   8: 1907689.197 ops/s
# Warmup Iteration   9: 1914685.175 ops/s
# Warmup Iteration  10: 1909458.135 ops/s
# Warmup Iteration  11: 1907401.757 ops/s
# Warmup Iteration  12: 1913647.879 ops/s
# Warmup Iteration  13: 1911575.793 ops/s
# Warmup Iteration  14: 1902624.511 ops/s
# Warmup Iteration  15: 1903109.026 ops/s
# Warmup Iteration  16: 1886035.016 ops/s
# Warmup Iteration  17: 1899171.469 ops/s
# Warmup Iteration  18: 1905553.167 ops/s
# Warmup Iteration  19: 1903222.850 ops/s
# Warmup Iteration  20: 1908089.139 ops/s
# Warmup Iteration  21: 1902342.472 ops/s
# Warmup Iteration  22: 1906517.920 ops/s
# Warmup Iteration  23: 1899334.261 ops/s
# Warmup Iteration  24: 1904737.934 ops/s
# Warmup Iteration  25: 1904599.749 ops/s
# Warmup Iteration  26: 1906438.933 ops/s
# Warmup Iteration  27: 1907600.802 ops/s
# Warmup Iteration  28: 1905758.424 ops/s
# Warmup Iteration  29: 1906884.194 ops/s
# Warmup Iteration  30: 1903479.182 ops/s
Iteration   1: 1903126.655 ops/s
Iteration   2: 1903975.833 ops/s
Iteration   3: 1901907.465 ops/s
Iteration   4: 1902364.112 ops/s
Iteration   5: 1904067.964 ops/s
Iteration   6: 1902980.154 ops/s
Iteration   7: 1908919.344 ops/s
Iteration   8: 1906174.405 ops/s
Iteration   9: 1908604.816 ops/s
Iteration  10: 1908616.498 ops/s
Iteration  11: 1907419.280 ops/s
Iteration  12: 1909978.923 ops/s
Iteration  13: 1903925.596 ops/s
Iteration  14: 1902944.834 ops/s
Iteration  15: 1913067.270 ops/s
Iteration  16: 1910115.811 ops/s
Iteration  17: 1906255.462 ops/s
Iteration  18: 1906971.992 ops/s
Iteration  19: 1904681.449 ops/s
Iteration  20: 1906768.434 ops/s
Iteration  21: 1904393.465 ops/s
Iteration  22: 1907631.198 ops/s
Iteration  23: 1905308.062 ops/s
Iteration  24: 1909197.981 ops/s
Iteration  25: 1912118.819 ops/s
Iteration  26: 1900567.051 ops/s
Iteration  27: 1901954.618 ops/s
Iteration  28: 1911137.437 ops/s
Iteration  29: 1903801.209 ops/s
Iteration  30: 1901235.772 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectChar":
  1906007.064 ±(99.9%) 2261.468 ops/s [Average]
  (min, avg, max) = (1900567.051, 1906007.064, 1913067.270), stdev = 3384.859
  CI (99.9%): [1903745.596, 1908268.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectChar  thrpt   30  1906007.064 ± 2261.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3048921.319 ops/s
# Warmup Iteration   2: 6826808.072 ops/s
# Warmup Iteration   3: 5833977.583 ops/s
# Warmup Iteration   4: 6952051.923 ops/s
# Warmup Iteration   5: 6921722.355 ops/s
# Warmup Iteration   6: 6931139.578 ops/s
# Warmup Iteration   7: 6908362.740 ops/s
# Warmup Iteration   8: 6960577.038 ops/s
# Warmup Iteration   9: 6954918.579 ops/s
# Warmup Iteration  10: 6893800.710 ops/s
# Warmup Iteration  11: 6951222.997 ops/s
# Warmup Iteration  12: 6940101.594 ops/s
# Warmup Iteration  13: 6935912.535 ops/s
# Warmup Iteration  14: 6931809.469 ops/s
# Warmup Iteration  15: 6952243.259 ops/s
# Warmup Iteration  16: 6922358.814 ops/s
# Warmup Iteration  17: 6941674.917 ops/s
# Warmup Iteration  18: 6944460.421 ops/s
# Warmup Iteration  19: 6948946.358 ops/s
# Warmup Iteration  20: 6951822.021 ops/s
# Warmup Iteration  21: 6942076.372 ops/s
# Warmup Iteration  22: 6970940.407 ops/s
# Warmup Iteration  23: 6960765.920 ops/s
# Warmup Iteration  24: 6947815.817 ops/s
# Warmup Iteration  25: 6954805.259 ops/s
# Warmup Iteration  26: 6961872.002 ops/s
# Warmup Iteration  27: 6957014.565 ops/s
# Warmup Iteration  28: 6921306.353 ops/s
# Warmup Iteration  29: 6950960.217 ops/s
# Warmup Iteration  30: 6946374.114 ops/s
Iteration   1: 6958495.655 ops/s
Iteration   2: 6954287.493 ops/s
Iteration   3: 6960552.012 ops/s
Iteration   4: 6907013.690 ops/s
Iteration   5: 6994767.670 ops/s
Iteration   6: 6961394.957 ops/s
Iteration   7: 6955053.493 ops/s
Iteration   8: 6970127.226 ops/s
Iteration   9: 6994354.519 ops/s
Iteration  10: 6890606.676 ops/s
Iteration  11: 6961939.509 ops/s
Iteration  12: 6919751.331 ops/s
Iteration  13: 6989621.938 ops/s
Iteration  14: 6950403.014 ops/s
Iteration  15: 6981828.532 ops/s
Iteration  16: 6949834.025 ops/s
Iteration  17: 6940775.704 ops/s
Iteration  18: 6961328.851 ops/s
Iteration  19: 6951222.647 ops/s
Iteration  20: 6940419.477 ops/s
Iteration  21: 6967813.830 ops/s
Iteration  22: 6923319.908 ops/s
Iteration  23: 6968210.210 ops/s
Iteration  24: 6947300.878 ops/s
Iteration  25: 6980334.384 ops/s
Iteration  26: 6971313.788 ops/s
Iteration  27: 6977633.136 ops/s
Iteration  28: 6944262.797 ops/s
Iteration  29: 6981018.078 ops/s
Iteration  30: 6951750.803 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithBagTarget":
  6956891.208 ±(99.9%) 16240.815 ops/s [Average]
  (min, avg, max) = (6890606.676, 6956891.208, 6994767.670), stdev = 24308.490
  CI (99.9%): [6940650.393, 6973132.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  6956891.208 ± 16240.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2074308.348 ops/s
# Warmup Iteration   2: 4902868.704 ops/s
# Warmup Iteration   3: 4581524.791 ops/s
# Warmup Iteration   4: 4538567.591 ops/s
# Warmup Iteration   5: 4970562.941 ops/s
# Warmup Iteration   6: 4970423.874 ops/s
# Warmup Iteration   7: 4956926.292 ops/s
# Warmup Iteration   8: 4968526.579 ops/s
# Warmup Iteration   9: 4956744.880 ops/s
# Warmup Iteration  10: 4966259.721 ops/s
# Warmup Iteration  11: 4964962.031 ops/s
# Warmup Iteration  12: 4967413.322 ops/s
# Warmup Iteration  13: 4969489.501 ops/s
# Warmup Iteration  14: 4970549.740 ops/s
# Warmup Iteration  15: 4962028.099 ops/s
# Warmup Iteration  16: 4969906.351 ops/s
# Warmup Iteration  17: 4972241.162 ops/s
# Warmup Iteration  18: 4968173.222 ops/s
# Warmup Iteration  19: 4972704.082 ops/s
# Warmup Iteration  20: 4973166.613 ops/s
# Warmup Iteration  21: 4962714.213 ops/s
# Warmup Iteration  22: 4959549.936 ops/s
# Warmup Iteration  23: 4977174.646 ops/s
# Warmup Iteration  24: 4985381.928 ops/s
# Warmup Iteration  25: 4967358.610 ops/s
# Warmup Iteration  26: 4965617.835 ops/s
# Warmup Iteration  27: 4981461.545 ops/s
# Warmup Iteration  28: 4965231.708 ops/s
# Warmup Iteration  29: 4966892.259 ops/s
# Warmup Iteration  30: 4972695.923 ops/s
Iteration   1: 4991459.715 ops/s
Iteration   2: 4955279.919 ops/s
Iteration   3: 4938943.148 ops/s
Iteration   4: 4969444.798 ops/s
Iteration   5: 4971413.340 ops/s
Iteration   6: 4910120.885 ops/s
Iteration   7: 4985000.921 ops/s
Iteration   8: 4952095.419 ops/s
Iteration   9: 4970415.795 ops/s
Iteration  10: 4965299.025 ops/s
Iteration  11: 4978954.294 ops/s
Iteration  12: 4970068.934 ops/s
Iteration  13: 4959389.020 ops/s
Iteration  14: 4948400.455 ops/s
Iteration  15: 4968807.680 ops/s
Iteration  16: 4978665.487 ops/s
Iteration  17: 4955058.002 ops/s
Iteration  18: 4970745.399 ops/s
Iteration  19: 4958947.309 ops/s
Iteration  20: 4965085.279 ops/s
Iteration  21: 4983157.693 ops/s
Iteration  22: 4962503.009 ops/s
Iteration  23: 4962394.337 ops/s
Iteration  24: 4973823.969 ops/s
Iteration  25: 4945800.310 ops/s
Iteration  26: 4981666.851 ops/s
Iteration  27: 4961687.186 ops/s
Iteration  28: 4949061.488 ops/s
Iteration  29: 4969162.739 ops/s
Iteration  30: 4975011.672 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectCharWithTarget":
  4964262.136 ±(99.9%) 10724.717 ops/s [Average]
  (min, avg, max) = (4910120.885, 4964262.136, 4991459.715), stdev = 16052.253
  CI (99.9%): [4953537.419, 4974986.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  4964262.136 ± 10724.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654556.068 ops/s
# Warmup Iteration   2: 1480130.741 ops/s
# Warmup Iteration   3: 1488497.551 ops/s
# Warmup Iteration   4: 1262526.171 ops/s
# Warmup Iteration   5: 1492271.649 ops/s
# Warmup Iteration   6: 1486459.136 ops/s
# Warmup Iteration   7: 1484980.300 ops/s
# Warmup Iteration   8: 1487704.289 ops/s
# Warmup Iteration   9: 1495063.745 ops/s
# Warmup Iteration  10: 1496788.741 ops/s
# Warmup Iteration  11: 1491638.231 ops/s
# Warmup Iteration  12: 1491921.715 ops/s
# Warmup Iteration  13: 1485674.900 ops/s
# Warmup Iteration  14: 1485569.617 ops/s
# Warmup Iteration  15: 1481996.905 ops/s
# Warmup Iteration  16: 1490184.902 ops/s
# Warmup Iteration  17: 1493006.489 ops/s
# Warmup Iteration  18: 1487184.606 ops/s
# Warmup Iteration  19: 1487033.001 ops/s
# Warmup Iteration  20: 1489794.507 ops/s
# Warmup Iteration  21: 1492639.035 ops/s
# Warmup Iteration  22: 1492933.925 ops/s
# Warmup Iteration  23: 1489268.779 ops/s
# Warmup Iteration  24: 1483489.651 ops/s
# Warmup Iteration  25: 1486619.167 ops/s
# Warmup Iteration  26: 1494372.484 ops/s
# Warmup Iteration  27: 1492416.667 ops/s
# Warmup Iteration  28: 1488677.943 ops/s
# Warmup Iteration  29: 1492232.929 ops/s
# Warmup Iteration  30: 1456748.815 ops/s
Iteration   1: 1496165.177 ops/s
Iteration   2: 1497376.045 ops/s
Iteration   3: 1487244.227 ops/s
Iteration   4: 1493580.057 ops/s
Iteration   5: 1493167.972 ops/s
Iteration   6: 1490744.832 ops/s
Iteration   7: 1492403.678 ops/s
Iteration   8: 1488441.668 ops/s
Iteration   9: 1493093.661 ops/s
Iteration  10: 1497463.733 ops/s
Iteration  11: 1491854.254 ops/s
Iteration  12: 1487217.759 ops/s
Iteration  13: 1495936.666 ops/s
Iteration  14: 1491573.996 ops/s
Iteration  15: 1490650.113 ops/s
Iteration  16: 1490306.772 ops/s
Iteration  17: 1497524.613 ops/s
Iteration  18: 1480059.286 ops/s
Iteration  19: 1493794.674 ops/s
Iteration  20: 1489453.706 ops/s
Iteration  21: 1491451.383 ops/s
Iteration  22: 1482462.292 ops/s
Iteration  23: 1490468.570 ops/s
Iteration  24: 1489517.177 ops/s
Iteration  25: 1487817.753 ops/s
Iteration  26: 1494413.537 ops/s
Iteration  27: 1486804.912 ops/s
Iteration  28: 1491369.677 ops/s
Iteration  29: 1485394.772 ops/s
Iteration  30: 1494369.999 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDouble":
  1491070.765 ±(99.9%) 2823.860 ops/s [Average]
  (min, avg, max) = (1480059.286, 1491070.765, 1497524.613), stdev = 4226.622
  CI (99.9%): [1488246.905, 1493894.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectDouble  thrpt   30  1491070.765 ± 2823.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2025828.718 ops/s
# Warmup Iteration   2: 4696027.236 ops/s
# Warmup Iteration   3: 4002576.754 ops/s
# Warmup Iteration   4: 4795841.338 ops/s
# Warmup Iteration   5: 4781700.928 ops/s
# Warmup Iteration   6: 4775507.783 ops/s
# Warmup Iteration   7: 4771884.123 ops/s
# Warmup Iteration   8: 4782427.322 ops/s
# Warmup Iteration   9: 4774751.383 ops/s
# Warmup Iteration  10: 4773383.008 ops/s
# Warmup Iteration  11: 4766794.547 ops/s
# Warmup Iteration  12: 4764780.197 ops/s
# Warmup Iteration  13: 4769287.973 ops/s
# Warmup Iteration  14: 4776921.178 ops/s
# Warmup Iteration  15: 4790236.487 ops/s
# Warmup Iteration  16: 4792346.473 ops/s
# Warmup Iteration  17: 4759430.717 ops/s
# Warmup Iteration  18: 4762909.605 ops/s
# Warmup Iteration  19: 4760170.606 ops/s
# Warmup Iteration  20: 4773705.404 ops/s
# Warmup Iteration  21: 4763724.443 ops/s
# Warmup Iteration  22: 4762040.977 ops/s
# Warmup Iteration  23: 4772259.478 ops/s
# Warmup Iteration  24: 4772190.183 ops/s
# Warmup Iteration  25: 4774828.463 ops/s
# Warmup Iteration  26: 4769933.780 ops/s
# Warmup Iteration  27: 4767938.993 ops/s
# Warmup Iteration  28: 4772878.714 ops/s
# Warmup Iteration  29: 4765753.554 ops/s
# Warmup Iteration  30: 4768193.143 ops/s
Iteration   1: 4763304.511 ops/s
Iteration   2: 4773283.696 ops/s
Iteration   3: 4778956.155 ops/s
Iteration   4: 4763720.244 ops/s
Iteration   5: 4770705.160 ops/s
Iteration   6: 4768849.135 ops/s
Iteration   7: 4769389.510 ops/s
Iteration   8: 4777917.185 ops/s
Iteration   9: 4756180.516 ops/s
Iteration  10: 4784497.152 ops/s
Iteration  11: 4763053.645 ops/s
Iteration  12: 4774403.117 ops/s
Iteration  13: 4784143.233 ops/s
Iteration  14: 4787201.357 ops/s
Iteration  15: 4769449.393 ops/s
Iteration  16: 4767627.538 ops/s
Iteration  17: 4788068.218 ops/s
Iteration  18: 4760082.817 ops/s
Iteration  19: 4754352.510 ops/s
Iteration  20: 4770720.875 ops/s
Iteration  21: 4770710.747 ops/s
Iteration  22: 4780321.535 ops/s
Iteration  23: 4767192.160 ops/s
Iteration  24: 4782449.350 ops/s
Iteration  25: 4767787.543 ops/s
Iteration  26: 4769383.426 ops/s
Iteration  27: 4767870.190 ops/s
Iteration  28: 4770378.898 ops/s
Iteration  29: 4772324.766 ops/s
Iteration  30: 4771321.558 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  4771521.538 ±(99.9%) 5683.374 ops/s [Average]
  (min, avg, max) = (4754352.510, 4771521.538, 4788068.218), stdev = 8506.607
  CI (99.9%): [4765838.164, 4777204.912] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  4771521.538 ± 5683.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1412944.425 ops/s
# Warmup Iteration   2: 3517230.714 ops/s
# Warmup Iteration   3: 3086056.192 ops/s
# Warmup Iteration   4: 3437315.606 ops/s
# Warmup Iteration   5: 3569212.622 ops/s
# Warmup Iteration   6: 3565479.095 ops/s
# Warmup Iteration   7: 3573645.923 ops/s
# Warmup Iteration   8: 3564561.902 ops/s
# Warmup Iteration   9: 3576262.103 ops/s
# Warmup Iteration  10: 3572185.098 ops/s
# Warmup Iteration  11: 3557377.424 ops/s
# Warmup Iteration  12: 3560937.759 ops/s
# Warmup Iteration  13: 3577235.467 ops/s
# Warmup Iteration  14: 3571910.909 ops/s
# Warmup Iteration  15: 3572478.596 ops/s
# Warmup Iteration  16: 3564452.702 ops/s
# Warmup Iteration  17: 3578825.019 ops/s
# Warmup Iteration  18: 3585421.068 ops/s
# Warmup Iteration  19: 3572534.949 ops/s
# Warmup Iteration  20: 3578429.597 ops/s
# Warmup Iteration  21: 3575220.944 ops/s
# Warmup Iteration  22: 3572027.171 ops/s
# Warmup Iteration  23: 3583501.755 ops/s
# Warmup Iteration  24: 3565775.219 ops/s
# Warmup Iteration  25: 3572035.422 ops/s
# Warmup Iteration  26: 3576379.997 ops/s
# Warmup Iteration  27: 3577279.335 ops/s
# Warmup Iteration  28: 3584865.641 ops/s
# Warmup Iteration  29: 3567354.966 ops/s
# Warmup Iteration  30: 3572375.740 ops/s
Iteration   1: 3583137.166 ops/s
Iteration   2: 3568840.031 ops/s
Iteration   3: 3580053.342 ops/s
Iteration   4: 3570896.260 ops/s
Iteration   5: 3573731.049 ops/s
Iteration   6: 3574555.397 ops/s
Iteration   7: 3561047.734 ops/s
Iteration   8: 3569401.507 ops/s
Iteration   9: 3573849.285 ops/s
Iteration  10: 3570303.513 ops/s
Iteration  11: 3570821.159 ops/s
Iteration  12: 3566717.688 ops/s
Iteration  13: 3567818.160 ops/s
Iteration  14: 3563552.474 ops/s
Iteration  15: 3581593.856 ops/s
Iteration  16: 3583956.353 ops/s
Iteration  17: 3576076.949 ops/s
Iteration  18: 3578087.297 ops/s
Iteration  19: 3565862.613 ops/s
Iteration  20: 3570839.296 ops/s
Iteration  21: 3576775.565 ops/s
Iteration  22: 3563754.360 ops/s
Iteration  23: 3564772.232 ops/s
Iteration  24: 3578495.562 ops/s
Iteration  25: 3582812.541 ops/s
Iteration  26: 3577551.760 ops/s
Iteration  27: 3568090.584 ops/s
Iteration  28: 3569389.745 ops/s
Iteration  29: 3562950.988 ops/s
Iteration  30: 3580396.930 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectDoubleWithTarget":
  3572537.713 ±(99.9%) 4451.223 ops/s [Average]
  (min, avg, max) = (3561047.734, 3572537.713, 3583956.353), stdev = 6662.382
  CI (99.9%): [3568086.490, 3576988.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  3572537.713 ± 4451.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 702158.679 ops/s
# Warmup Iteration   2: 1663642.989 ops/s
# Warmup Iteration   3: 1692769.985 ops/s
# Warmup Iteration   4: 1418479.227 ops/s
# Warmup Iteration   5: 1696825.099 ops/s
# Warmup Iteration   6: 1689567.102 ops/s
# Warmup Iteration   7: 1697189.627 ops/s
# Warmup Iteration   8: 1689266.717 ops/s
# Warmup Iteration   9: 1693856.979 ops/s
# Warmup Iteration  10: 1695980.248 ops/s
# Warmup Iteration  11: 1694943.756 ops/s
# Warmup Iteration  12: 1690705.621 ops/s
# Warmup Iteration  13: 1698842.115 ops/s
# Warmup Iteration  14: 1693257.191 ops/s
# Warmup Iteration  15: 1696502.447 ops/s
# Warmup Iteration  16: 1692868.922 ops/s
# Warmup Iteration  17: 1691328.192 ops/s
# Warmup Iteration  18: 1692961.116 ops/s
# Warmup Iteration  19: 1694355.597 ops/s
# Warmup Iteration  20: 1689624.918 ops/s
# Warmup Iteration  21: 1693030.458 ops/s
# Warmup Iteration  22: 1694593.742 ops/s
# Warmup Iteration  23: 1693264.443 ops/s
# Warmup Iteration  24: 1692101.795 ops/s
# Warmup Iteration  25: 1695119.951 ops/s
# Warmup Iteration  26: 1686607.611 ops/s
# Warmup Iteration  27: 1692004.699 ops/s
# Warmup Iteration  28: 1691397.445 ops/s
# Warmup Iteration  29: 1697757.808 ops/s
# Warmup Iteration  30: 1695031.740 ops/s
Iteration   1: 1696956.291 ops/s
Iteration   2: 1696065.649 ops/s
Iteration   3: 1697096.717 ops/s
Iteration   4: 1697048.466 ops/s
Iteration   5: 1695145.788 ops/s
Iteration   6: 1697008.996 ops/s
Iteration   7: 1698550.471 ops/s
Iteration   8: 1691517.403 ops/s
Iteration   9: 1691920.905 ops/s
Iteration  10: 1699545.970 ops/s
Iteration  11: 1689373.415 ops/s
Iteration  12: 1694735.249 ops/s
Iteration  13: 1693802.423 ops/s
Iteration  14: 1694779.530 ops/s
Iteration  15: 1690293.089 ops/s
Iteration  16: 1691338.579 ops/s
Iteration  17: 1694048.226 ops/s
Iteration  18: 1695246.481 ops/s
Iteration  19: 1694156.218 ops/s
Iteration  20: 1693241.427 ops/s
Iteration  21: 1699670.263 ops/s
Iteration  22: 1692554.990 ops/s
Iteration  23: 1694454.292 ops/s
Iteration  24: 1690528.559 ops/s
Iteration  25: 1693132.273 ops/s
Iteration  26: 1691947.722 ops/s
Iteration  27: 1686555.697 ops/s
Iteration  28: 1672799.292 ops/s
Iteration  29: 1673807.033 ops/s
Iteration  30: 1694925.981 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloat":
  1692741.580 ±(99.9%) 4053.038 ops/s [Average]
  (min, avg, max) = (1672799.292, 1692741.580, 1699670.263), stdev = 6066.397
  CI (99.9%): [1688688.542, 1696794.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectFloat  thrpt   30  1692741.580 ± 4053.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2345605.883 ops/s
# Warmup Iteration   2: 5328412.681 ops/s
# Warmup Iteration   3: 4541799.499 ops/s
# Warmup Iteration   4: 5389310.352 ops/s
# Warmup Iteration   5: 5401461.159 ops/s
# Warmup Iteration   6: 5393227.136 ops/s
# Warmup Iteration   7: 5389284.870 ops/s
# Warmup Iteration   8: 5412173.986 ops/s
# Warmup Iteration   9: 5406543.770 ops/s
# Warmup Iteration  10: 5411821.116 ops/s
# Warmup Iteration  11: 5409486.918 ops/s
# Warmup Iteration  12: 5406036.987 ops/s
# Warmup Iteration  13: 5409545.161 ops/s
# Warmup Iteration  14: 5396425.524 ops/s
# Warmup Iteration  15: 5380888.445 ops/s
# Warmup Iteration  16: 5388539.505 ops/s
# Warmup Iteration  17: 5406045.871 ops/s
# Warmup Iteration  18: 5402524.059 ops/s
# Warmup Iteration  19: 5413986.438 ops/s
# Warmup Iteration  20: 5428805.999 ops/s
# Warmup Iteration  21: 5417778.730 ops/s
# Warmup Iteration  22: 5414185.110 ops/s
# Warmup Iteration  23: 5400889.330 ops/s
# Warmup Iteration  24: 5401753.122 ops/s
# Warmup Iteration  25: 5407940.844 ops/s
# Warmup Iteration  26: 5391741.738 ops/s
# Warmup Iteration  27: 5409707.254 ops/s
# Warmup Iteration  28: 5401015.240 ops/s
# Warmup Iteration  29: 5396680.728 ops/s
# Warmup Iteration  30: 5398017.044 ops/s
Iteration   1: 5399276.372 ops/s
Iteration   2: 5388497.113 ops/s
Iteration   3: 5386187.413 ops/s
Iteration   4: 5400118.027 ops/s
Iteration   5: 5405078.248 ops/s
Iteration   6: 5412468.911 ops/s
Iteration   7: 5407201.165 ops/s
Iteration   8: 5389592.416 ops/s
Iteration   9: 5409967.469 ops/s
Iteration  10: 5416316.654 ops/s
Iteration  11: 5414967.727 ops/s
Iteration  12: 5413031.679 ops/s
Iteration  13: 5430815.069 ops/s
Iteration  14: 5422783.670 ops/s
Iteration  15: 5417907.064 ops/s
Iteration  16: 5413150.389 ops/s
Iteration  17: 5433616.759 ops/s
Iteration  18: 5432433.788 ops/s
Iteration  19: 5423892.082 ops/s
Iteration  20: 5425913.283 ops/s
Iteration  21: 5421368.962 ops/s
Iteration  22: 5413145.408 ops/s
Iteration  23: 5430007.227 ops/s
Iteration  24: 5444629.031 ops/s
Iteration  25: 5416160.630 ops/s
Iteration  26: 5415240.991 ops/s
Iteration  27: 5433788.652 ops/s
Iteration  28: 5413408.517 ops/s
Iteration  29: 5407682.894 ops/s
Iteration  30: 5428851.318 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithBagTarget":
  5415583.298 ±(99.9%) 9410.943 ops/s [Average]
  (min, avg, max) = (5386187.413, 5415583.298, 5444629.031), stdev = 14085.858
  CI (99.9%): [5406172.354, 5424994.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  5415583.298 ± 9410.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1774002.113 ops/s
# Warmup Iteration   2: 4251614.073 ops/s
# Warmup Iteration   3: 3886208.529 ops/s
# Warmup Iteration   4: 3981757.769 ops/s
# Warmup Iteration   5: 4300219.022 ops/s
# Warmup Iteration   6: 4298893.745 ops/s
# Warmup Iteration   7: 4311742.822 ops/s
# Warmup Iteration   8: 4318406.804 ops/s
# Warmup Iteration   9: 4319495.563 ops/s
# Warmup Iteration  10: 4309546.376 ops/s
# Warmup Iteration  11: 4289347.371 ops/s
# Warmup Iteration  12: 4314118.706 ops/s
# Warmup Iteration  13: 4312240.292 ops/s
# Warmup Iteration  14: 4301990.918 ops/s
# Warmup Iteration  15: 4313091.212 ops/s
# Warmup Iteration  16: 4303195.181 ops/s
# Warmup Iteration  17: 4309366.140 ops/s
# Warmup Iteration  18: 4320617.326 ops/s
# Warmup Iteration  19: 4315660.388 ops/s
# Warmup Iteration  20: 4315058.379 ops/s
# Warmup Iteration  21: 4310745.622 ops/s
# Warmup Iteration  22: 4323218.339 ops/s
# Warmup Iteration  23: 4302555.509 ops/s
# Warmup Iteration  24: 4305593.946 ops/s
# Warmup Iteration  25: 4303501.148 ops/s
# Warmup Iteration  26: 4310983.443 ops/s
# Warmup Iteration  27: 4318872.258 ops/s
# Warmup Iteration  28: 4313987.085 ops/s
# Warmup Iteration  29: 4305496.751 ops/s
# Warmup Iteration  30: 4301559.067 ops/s
Iteration   1: 4311410.216 ops/s
Iteration   2: 4313769.103 ops/s
Iteration   3: 4303798.290 ops/s
Iteration   4: 4308883.560 ops/s
Iteration   5: 4286769.837 ops/s
Iteration   6: 4318893.309 ops/s
Iteration   7: 4320709.278 ops/s
Iteration   8: 4323772.504 ops/s
Iteration   9: 4308795.542 ops/s
Iteration  10: 4309927.877 ops/s
Iteration  11: 4315591.136 ops/s
Iteration  12: 4299523.726 ops/s
Iteration  13: 4309364.427 ops/s
Iteration  14: 4314874.346 ops/s
Iteration  15: 4321221.813 ops/s
Iteration  16: 4314305.185 ops/s
Iteration  17: 4307710.698 ops/s
Iteration  18: 4308550.821 ops/s
Iteration  19: 4300926.908 ops/s
Iteration  20: 4309890.465 ops/s
Iteration  21: 4313910.382 ops/s
Iteration  22: 4311901.474 ops/s
Iteration  23: 4303490.361 ops/s
Iteration  24: 4308447.217 ops/s
Iteration  25: 4329970.379 ops/s
Iteration  26: 4314642.827 ops/s
Iteration  27: 4314506.713 ops/s
Iteration  28: 4309949.514 ops/s
Iteration  29: 4299842.590 ops/s
Iteration  30: 4321520.178 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectFloatWithTarget":
  4311229.023 ±(99.9%) 5651.076 ops/s [Average]
  (min, avg, max) = (4286769.837, 4311229.023, 4329970.379), stdev = 8458.265
  CI (99.9%): [4305577.947, 4316880.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  4311229.023 ± 5651.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1014873.401 ops/s
# Warmup Iteration   2: 2492749.877 ops/s
# Warmup Iteration   3: 2532838.166 ops/s
# Warmup Iteration   4: 2072016.785 ops/s
# Warmup Iteration   5: 2500588.079 ops/s
# Warmup Iteration   6: 2536433.116 ops/s
# Warmup Iteration   7: 2519139.542 ops/s
# Warmup Iteration   8: 2551867.566 ops/s
# Warmup Iteration   9: 2537118.013 ops/s
# Warmup Iteration  10: 2498011.609 ops/s
# Warmup Iteration  11: 2520182.148 ops/s
# Warmup Iteration  12: 2517641.239 ops/s
# Warmup Iteration  13: 2514919.452 ops/s
# Warmup Iteration  14: 2520369.132 ops/s
# Warmup Iteration  15: 2548104.405 ops/s
# Warmup Iteration  16: 2559027.927 ops/s
# Warmup Iteration  17: 2565447.394 ops/s
# Warmup Iteration  18: 2562958.136 ops/s
# Warmup Iteration  19: 2566016.872 ops/s
# Warmup Iteration  20: 2566477.408 ops/s
# Warmup Iteration  21: 2556033.103 ops/s
# Warmup Iteration  22: 2558350.135 ops/s
# Warmup Iteration  23: 2552464.648 ops/s
# Warmup Iteration  24: 2550935.322 ops/s
# Warmup Iteration  25: 2528383.538 ops/s
# Warmup Iteration  26: 2554327.367 ops/s
# Warmup Iteration  27: 2538296.532 ops/s
# Warmup Iteration  28: 2550849.714 ops/s
# Warmup Iteration  29: 2562323.253 ops/s
# Warmup Iteration  30: 2555994.728 ops/s
Iteration   1: 2577920.698 ops/s
Iteration   2: 2547248.573 ops/s
Iteration   3: 2542021.237 ops/s
Iteration   4: 2576107.494 ops/s
Iteration   5: 2560272.197 ops/s
Iteration   6: 2551320.233 ops/s
Iteration   7: 2556263.984 ops/s
Iteration   8: 2554429.394 ops/s
Iteration   9: 2561115.004 ops/s
Iteration  10: 2544878.444 ops/s
Iteration  11: 2564459.308 ops/s
Iteration  12: 2566193.133 ops/s
Iteration  13: 2564317.507 ops/s
Iteration  14: 2528267.546 ops/s
Iteration  15: 2510433.048 ops/s
Iteration  16: 2549648.711 ops/s
Iteration  17: 2560053.293 ops/s
Iteration  18: 2552019.514 ops/s
Iteration  19: 2565472.017 ops/s
Iteration  20: 2583078.467 ops/s
Iteration  21: 2550401.348 ops/s
Iteration  22: 2546804.253 ops/s
Iteration  23: 2536898.417 ops/s
Iteration  24: 2542349.643 ops/s
Iteration  25: 2546975.740 ops/s
Iteration  26: 2524770.260 ops/s
Iteration  27: 2578273.909 ops/s
Iteration  28: 2540862.790 ops/s
Iteration  29: 2550912.186 ops/s
Iteration  30: 2592345.387 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIf":
  2554203.791 ±(99.9%) 11792.224 ops/s [Average]
  (min, avg, max) = (2510433.048, 2554203.791, 2592345.387), stdev = 17650.048
  CI (99.9%): [2542411.567, 2565996.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectIf  thrpt   30  2554203.791 ± 11792.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 836198.306 ops/s
# Warmup Iteration   2: 2013727.386 ops/s
# Warmup Iteration   3: 2015932.566 ops/s
# Warmup Iteration   4: 1700489.542 ops/s
# Warmup Iteration   5: 2024576.465 ops/s
# Warmup Iteration   6: 2036466.331 ops/s
# Warmup Iteration   7: 2000569.043 ops/s
# Warmup Iteration   8: 2026256.230 ops/s
# Warmup Iteration   9: 2030533.110 ops/s
# Warmup Iteration  10: 2028572.862 ops/s
# Warmup Iteration  11: 2033020.531 ops/s
# Warmup Iteration  12: 2029554.080 ops/s
# Warmup Iteration  13: 2005075.104 ops/s
# Warmup Iteration  14: 2029573.572 ops/s
# Warmup Iteration  15: 2028491.554 ops/s
# Warmup Iteration  16: 2030901.397 ops/s
# Warmup Iteration  17: 2030868.516 ops/s
# Warmup Iteration  18: 2032159.060 ops/s
# Warmup Iteration  19: 2028182.837 ops/s
# Warmup Iteration  20: 2029429.050 ops/s
# Warmup Iteration  21: 2031394.895 ops/s
# Warmup Iteration  22: 2032087.072 ops/s
# Warmup Iteration  23: 2027035.518 ops/s
# Warmup Iteration  24: 2030174.122 ops/s
# Warmup Iteration  25: 2027632.633 ops/s
# Warmup Iteration  26: 2023570.523 ops/s
# Warmup Iteration  27: 2024459.345 ops/s
# Warmup Iteration  28: 2024008.791 ops/s
# Warmup Iteration  29: 2024384.909 ops/s
# Warmup Iteration  30: 2025649.054 ops/s
Iteration   1: 2023989.819 ops/s
Iteration   2: 2027434.785 ops/s
Iteration   3: 2022548.229 ops/s
Iteration   4: 2026059.520 ops/s
Iteration   5: 2027807.668 ops/s
Iteration   6: 2035666.284 ops/s
Iteration   7: 2025448.316 ops/s
Iteration   8: 2033071.658 ops/s
Iteration   9: 2025764.147 ops/s
Iteration  10: 2034052.740 ops/s
Iteration  11: 2024402.866 ops/s
Iteration  12: 2036459.533 ops/s
Iteration  13: 2028786.812 ops/s
Iteration  14: 2029643.962 ops/s
Iteration  15: 2030964.993 ops/s
Iteration  16: 2024136.148 ops/s
Iteration  17: 2033615.604 ops/s
Iteration  18: 2026295.868 ops/s
Iteration  19: 2037783.920 ops/s
Iteration  20: 2034221.525 ops/s
Iteration  21: 2031101.604 ops/s
Iteration  22: 2030350.306 ops/s
Iteration  23: 2025972.024 ops/s
Iteration  24: 2036599.365 ops/s
Iteration  25: 2030508.430 ops/s
Iteration  26: 2028118.474 ops/s
Iteration  27: 2035853.237 ops/s
Iteration  28: 2032089.265 ops/s
Iteration  29: 2036784.962 ops/s
Iteration  30: 2027509.261 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectInt":
  2030101.377 ±(99.9%) 3002.875 ops/s [Average]
  (min, avg, max) = (2022548.229, 2030101.377, 2037783.920), stdev = 4494.562
  CI (99.9%): [2027098.502, 2033104.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectInt  thrpt   30  2030101.377 ± 3002.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2653015.619 ops/s
# Warmup Iteration   2: 6253723.100 ops/s
# Warmup Iteration   3: 5307818.111 ops/s
# Warmup Iteration   4: 6367732.455 ops/s
# Warmup Iteration   5: 6382855.189 ops/s
# Warmup Iteration   6: 6384044.722 ops/s
# Warmup Iteration   7: 6381753.771 ops/s
# Warmup Iteration   8: 6383941.169 ops/s
# Warmup Iteration   9: 6382146.498 ops/s
# Warmup Iteration  10: 6382488.589 ops/s
# Warmup Iteration  11: 6371778.986 ops/s
# Warmup Iteration  12: 6391472.516 ops/s
# Warmup Iteration  13: 6400911.402 ops/s
# Warmup Iteration  14: 6386956.431 ops/s
# Warmup Iteration  15: 6387992.624 ops/s
# Warmup Iteration  16: 6373601.110 ops/s
# Warmup Iteration  17: 6369586.126 ops/s
# Warmup Iteration  18: 6380092.778 ops/s
# Warmup Iteration  19: 6384028.222 ops/s
# Warmup Iteration  20: 6371371.729 ops/s
# Warmup Iteration  21: 6381075.349 ops/s
# Warmup Iteration  22: 6388635.190 ops/s
# Warmup Iteration  23: 6358043.437 ops/s
# Warmup Iteration  24: 6367944.967 ops/s
# Warmup Iteration  25: 6364057.429 ops/s
# Warmup Iteration  26: 6392757.733 ops/s
# Warmup Iteration  27: 6359122.075 ops/s
# Warmup Iteration  28: 6364545.889 ops/s
# Warmup Iteration  29: 6390129.898 ops/s
# Warmup Iteration  30: 6380435.749 ops/s
Iteration   1: 6345104.600 ops/s
Iteration   2: 6378014.119 ops/s
Iteration   3: 6380898.960 ops/s
Iteration   4: 6344133.101 ops/s
Iteration   5: 6376499.463 ops/s
Iteration   6: 6363029.257 ops/s
Iteration   7: 6392626.553 ops/s
Iteration   8: 6377353.162 ops/s
Iteration   9: 6380031.011 ops/s
Iteration  10: 6347172.638 ops/s
Iteration  11: 6359845.324 ops/s
Iteration  12: 6380678.489 ops/s
Iteration  13: 6378989.096 ops/s
Iteration  14: 6408581.407 ops/s
Iteration  15: 6412513.115 ops/s
Iteration  16: 6401014.253 ops/s
Iteration  17: 6371490.651 ops/s
Iteration  18: 6384098.494 ops/s
Iteration  19: 6388714.204 ops/s
Iteration  20: 6410177.590 ops/s
Iteration  21: 6383468.177 ops/s
Iteration  22: 6377285.710 ops/s
Iteration  23: 6344716.852 ops/s
Iteration  24: 6383455.788 ops/s
Iteration  25: 6352921.126 ops/s
Iteration  26: 6378602.143 ops/s
Iteration  27: 6389806.017 ops/s
Iteration  28: 6390538.218 ops/s
Iteration  29: 6360358.255 ops/s
Iteration  30: 6363302.235 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithBagTarget":
  6376847.334 ±(99.9%) 12674.993 ops/s [Average]
  (min, avg, max) = (6344133.101, 6376847.334, 6412513.115), stdev = 18971.334
  CI (99.9%): [6364172.341, 6389522.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  6376847.334 ± 12674.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2010390.714 ops/s
# Warmup Iteration   2: 4845326.949 ops/s
# Warmup Iteration   3: 4037026.929 ops/s
# Warmup Iteration   4: 4862582.628 ops/s
# Warmup Iteration   5: 4852231.573 ops/s
# Warmup Iteration   6: 4850713.019 ops/s
# Warmup Iteration   7: 4860967.494 ops/s
# Warmup Iteration   8: 4848266.220 ops/s
# Warmup Iteration   9: 4871129.951 ops/s
# Warmup Iteration  10: 4872580.555 ops/s
# Warmup Iteration  11: 4871553.501 ops/s
# Warmup Iteration  12: 4854788.540 ops/s
# Warmup Iteration  13: 4849742.230 ops/s
# Warmup Iteration  14: 4859103.155 ops/s
# Warmup Iteration  15: 4859226.356 ops/s
# Warmup Iteration  16: 4852956.278 ops/s
# Warmup Iteration  17: 4860089.941 ops/s
# Warmup Iteration  18: 4857256.591 ops/s
# Warmup Iteration  19: 4850981.179 ops/s
# Warmup Iteration  20: 4839114.894 ops/s
# Warmup Iteration  21: 4849858.162 ops/s
# Warmup Iteration  22: 4836069.067 ops/s
# Warmup Iteration  23: 4851165.469 ops/s
# Warmup Iteration  24: 4846051.307 ops/s
# Warmup Iteration  25: 4868896.376 ops/s
# Warmup Iteration  26: 4874801.942 ops/s
# Warmup Iteration  27: 4861356.089 ops/s
# Warmup Iteration  28: 4849575.319 ops/s
# Warmup Iteration  29: 4857737.392 ops/s
# Warmup Iteration  30: 4873528.831 ops/s
Iteration   1: 4869826.866 ops/s
Iteration   2: 4882139.885 ops/s
Iteration   3: 4854383.468 ops/s
Iteration   4: 4854967.479 ops/s
Iteration   5: 4860177.586 ops/s
Iteration   6: 4863653.553 ops/s
Iteration   7: 4870034.018 ops/s
Iteration   8: 4865760.912 ops/s
Iteration   9: 4859790.510 ops/s
Iteration  10: 4868170.617 ops/s
Iteration  11: 4874891.754 ops/s
Iteration  12: 4853364.186 ops/s
Iteration  13: 4861211.559 ops/s
Iteration  14: 4873978.990 ops/s
Iteration  15: 4850918.911 ops/s
Iteration  16: 4844074.741 ops/s
Iteration  17: 4882894.872 ops/s
Iteration  18: 4856550.936 ops/s
Iteration  19: 4882035.141 ops/s
Iteration  20: 4881989.999 ops/s
Iteration  21: 4871751.509 ops/s
Iteration  22: 4873047.855 ops/s
Iteration  23: 4879259.115 ops/s
Iteration  24: 4874250.586 ops/s
Iteration  25: 4878372.375 ops/s
Iteration  26: 4874180.211 ops/s
Iteration  27: 4849449.800 ops/s
Iteration  28: 4859926.072 ops/s
Iteration  29: 4861127.696 ops/s
Iteration  30: 4862952.885 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectIntWithTarget":
  4866504.470 ±(99.9%) 7270.937 ops/s [Average]
  (min, avg, max) = (4844074.741, 4866504.470, 4882894.872), stdev = 10882.797
  CI (99.9%): [4859233.533, 4873775.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  4866504.470 ± 7270.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 688131.143 ops/s
# Warmup Iteration   2: 1604325.394 ops/s
# Warmup Iteration   3: 1603983.377 ops/s
# Warmup Iteration   4: 1332199.030 ops/s
# Warmup Iteration   5: 1607644.485 ops/s
# Warmup Iteration   6: 1617745.089 ops/s
# Warmup Iteration   7: 1611171.291 ops/s
# Warmup Iteration   8: 1610593.378 ops/s
# Warmup Iteration   9: 1611206.756 ops/s
# Warmup Iteration  10: 1614038.286 ops/s
# Warmup Iteration  11: 1604312.633 ops/s
# Warmup Iteration  12: 1615702.203 ops/s
# Warmup Iteration  13: 1610317.452 ops/s
# Warmup Iteration  14: 1613499.728 ops/s
# Warmup Iteration  15: 1614333.076 ops/s
# Warmup Iteration  16: 1619492.798 ops/s
# Warmup Iteration  17: 1605892.555 ops/s
# Warmup Iteration  18: 1608641.769 ops/s
# Warmup Iteration  19: 1605186.163 ops/s
# Warmup Iteration  20: 1604093.148 ops/s
# Warmup Iteration  21: 1629747.938 ops/s
# Warmup Iteration  22: 1611019.073 ops/s
# Warmup Iteration  23: 1601578.959 ops/s
# Warmup Iteration  24: 1607885.386 ops/s
# Warmup Iteration  25: 1626529.490 ops/s
# Warmup Iteration  26: 1610556.779 ops/s
# Warmup Iteration  27: 1589896.805 ops/s
# Warmup Iteration  28: 1609594.244 ops/s
# Warmup Iteration  29: 1614110.226 ops/s
# Warmup Iteration  30: 1615713.874 ops/s
Iteration   1: 1613056.447 ops/s
Iteration   2: 1603965.876 ops/s
Iteration   3: 1604497.998 ops/s
Iteration   4: 1614536.496 ops/s
Iteration   5: 1605531.884 ops/s
Iteration   6: 1610743.069 ops/s
Iteration   7: 1613549.649 ops/s
Iteration   8: 1592957.633 ops/s
Iteration   9: 1605499.340 ops/s
Iteration  10: 1610704.224 ops/s
Iteration  11: 1610266.964 ops/s
Iteration  12: 1615608.460 ops/s
Iteration  13: 1609579.393 ops/s
Iteration  14: 1619929.119 ops/s
Iteration  15: 1602854.058 ops/s
Iteration  16: 1609606.562 ops/s
Iteration  17: 1603455.206 ops/s
Iteration  18: 1613786.080 ops/s
Iteration  19: 1611742.166 ops/s
Iteration  20: 1611076.958 ops/s
Iteration  21: 1611698.384 ops/s
Iteration  22: 1607741.878 ops/s
Iteration  23: 1605877.219 ops/s
Iteration  24: 1613057.844 ops/s
Iteration  25: 1610664.677 ops/s
Iteration  26: 1617409.467 ops/s
Iteration  27: 1611012.190 ops/s
Iteration  28: 1613467.822 ops/s
Iteration  29: 1623199.616 ops/s
Iteration  30: 1616064.811 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLong":
  1610438.050 ±(99.9%) 3907.110 ops/s [Average]
  (min, avg, max) = (1592957.633, 1610438.050, 1623199.616), stdev = 5847.979
  CI (99.9%): [1606530.939, 1614345.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectLong  thrpt   30  1610438.050 ± 3907.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2609165.169 ops/s
# Warmup Iteration   2: 6018457.461 ops/s
# Warmup Iteration   3: 5085470.577 ops/s
# Warmup Iteration   4: 6056269.768 ops/s
# Warmup Iteration   5: 6073958.819 ops/s
# Warmup Iteration   6: 6053584.606 ops/s
# Warmup Iteration   7: 6062812.105 ops/s
# Warmup Iteration   8: 6066027.451 ops/s
# Warmup Iteration   9: 6041035.406 ops/s
# Warmup Iteration  10: 5989683.422 ops/s
# Warmup Iteration  11: 6077387.838 ops/s
# Warmup Iteration  12: 6075871.277 ops/s
# Warmup Iteration  13: 6057926.379 ops/s
# Warmup Iteration  14: 6081841.816 ops/s
# Warmup Iteration  15: 6083152.105 ops/s
# Warmup Iteration  16: 6059820.546 ops/s
# Warmup Iteration  17: 6121632.555 ops/s
# Warmup Iteration  18: 6091552.732 ops/s
# Warmup Iteration  19: 6099492.783 ops/s
# Warmup Iteration  20: 6090187.771 ops/s
# Warmup Iteration  21: 6077735.482 ops/s
# Warmup Iteration  22: 6112362.602 ops/s
# Warmup Iteration  23: 6112995.066 ops/s
# Warmup Iteration  24: 6103005.971 ops/s
# Warmup Iteration  25: 6120680.380 ops/s
# Warmup Iteration  26: 6113413.208 ops/s
# Warmup Iteration  27: 6056946.674 ops/s
# Warmup Iteration  28: 6106979.597 ops/s
# Warmup Iteration  29: 6120447.674 ops/s
# Warmup Iteration  30: 6087003.321 ops/s
Iteration   1: 6117346.495 ops/s
Iteration   2: 6111274.999 ops/s
Iteration   3: 6115018.604 ops/s
Iteration   4: 6109763.664 ops/s
Iteration   5: 6118407.892 ops/s
Iteration   6: 6049888.572 ops/s
Iteration   7: 6091234.543 ops/s
Iteration   8: 6081516.758 ops/s
Iteration   9: 6083289.287 ops/s
Iteration  10: 6083069.100 ops/s
Iteration  11: 6090677.198 ops/s
Iteration  12: 6142366.895 ops/s
Iteration  13: 6103353.246 ops/s
Iteration  14: 6103652.075 ops/s
Iteration  15: 6087477.203 ops/s
Iteration  16: 6116840.047 ops/s
Iteration  17: 6085767.037 ops/s
Iteration  18: 6075856.518 ops/s
Iteration  19: 6117184.738 ops/s
Iteration  20: 6102435.522 ops/s
Iteration  21: 6069705.091 ops/s
Iteration  22: 6150861.737 ops/s
Iteration  23: 6081838.753 ops/s
Iteration  24: 6107869.715 ops/s
Iteration  25: 6104945.963 ops/s
Iteration  26: 6098603.561 ops/s
Iteration  27: 6091456.521 ops/s
Iteration  28: 6128414.663 ops/s
Iteration  29: 6077027.276 ops/s
Iteration  30: 6104451.378 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithBagTarget":
  6100053.168 ±(99.9%) 14344.247 ops/s [Average]
  (min, avg, max) = (6049888.572, 6100053.168, 6150861.737), stdev = 21469.795
  CI (99.9%): [6085708.922, 6114397.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  6100053.168 ± 14344.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1793862.601 ops/s
# Warmup Iteration   2: 4453278.600 ops/s
# Warmup Iteration   3: 3718816.100 ops/s
# Warmup Iteration   4: 4477862.187 ops/s
# Warmup Iteration   5: 4460487.404 ops/s
# Warmup Iteration   6: 4486059.648 ops/s
# Warmup Iteration   7: 4482400.098 ops/s
# Warmup Iteration   8: 4474124.428 ops/s
# Warmup Iteration   9: 4477555.802 ops/s
# Warmup Iteration  10: 4477834.428 ops/s
# Warmup Iteration  11: 4474786.685 ops/s
# Warmup Iteration  12: 4460117.062 ops/s
# Warmup Iteration  13: 4473858.357 ops/s
# Warmup Iteration  14: 4483922.733 ops/s
# Warmup Iteration  15: 4461082.601 ops/s
# Warmup Iteration  16: 4484492.235 ops/s
# Warmup Iteration  17: 4471060.488 ops/s
# Warmup Iteration  18: 4497641.952 ops/s
# Warmup Iteration  19: 4485189.812 ops/s
# Warmup Iteration  20: 4500339.641 ops/s
# Warmup Iteration  21: 4493383.201 ops/s
# Warmup Iteration  22: 4497576.797 ops/s
# Warmup Iteration  23: 4485297.466 ops/s
# Warmup Iteration  24: 4496744.324 ops/s
# Warmup Iteration  25: 4487131.818 ops/s
# Warmup Iteration  26: 4486302.859 ops/s
# Warmup Iteration  27: 4495710.306 ops/s
# Warmup Iteration  28: 4488203.667 ops/s
# Warmup Iteration  29: 4489630.281 ops/s
# Warmup Iteration  30: 4486354.163 ops/s
Iteration   1: 4487118.062 ops/s
Iteration   2: 4487746.209 ops/s
Iteration   3: 4464933.044 ops/s
Iteration   4: 4492274.893 ops/s
Iteration   5: 4488423.903 ops/s
Iteration   6: 4487480.342 ops/s
Iteration   7: 4447785.415 ops/s
Iteration   8: 4482200.456 ops/s
Iteration   9: 4483119.172 ops/s
Iteration  10: 4500055.764 ops/s
Iteration  11: 4484252.122 ops/s
Iteration  12: 4512650.774 ops/s
Iteration  13: 4468371.783 ops/s
Iteration  14: 4508177.216 ops/s
Iteration  15: 4486244.253 ops/s
Iteration  16: 4491668.316 ops/s
Iteration  17: 4482272.321 ops/s
Iteration  18: 4488461.621 ops/s
Iteration  19: 4487658.743 ops/s
Iteration  20: 4488732.050 ops/s
Iteration  21: 4502559.751 ops/s
Iteration  22: 4494255.643 ops/s
Iteration  23: 4477332.695 ops/s
Iteration  24: 4490873.390 ops/s
Iteration  25: 4488332.170 ops/s
Iteration  26: 4489329.633 ops/s
Iteration  27: 4486643.652 ops/s
Iteration  28: 4493224.828 ops/s
Iteration  29: 4493180.410 ops/s
Iteration  30: 4484083.716 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectLongWithTarget":
  4487314.745 ±(99.9%) 8105.414 ops/s [Average]
  (min, avg, max) = (4447785.415, 4487314.745, 4512650.774), stdev = 12131.803
  CI (99.9%): [4479209.331, 4495420.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  4487314.745 ± 8105.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 817324.250 ops/s
# Warmup Iteration   2: 1977227.902 ops/s
# Warmup Iteration   3: 1977667.872 ops/s
# Warmup Iteration   4: 1654652.654 ops/s
# Warmup Iteration   5: 1976773.408 ops/s
# Warmup Iteration   6: 1985849.528 ops/s
# Warmup Iteration   7: 1986061.004 ops/s
# Warmup Iteration   8: 1979826.546 ops/s
# Warmup Iteration   9: 1981409.203 ops/s
# Warmup Iteration  10: 1983392.821 ops/s
# Warmup Iteration  11: 1988149.757 ops/s
# Warmup Iteration  12: 1985473.350 ops/s
# Warmup Iteration  13: 1989207.298 ops/s
# Warmup Iteration  14: 1983508.568 ops/s
# Warmup Iteration  15: 1982567.524 ops/s
# Warmup Iteration  16: 1984659.613 ops/s
# Warmup Iteration  17: 1982092.708 ops/s
# Warmup Iteration  18: 1983697.072 ops/s
# Warmup Iteration  19: 1978065.518 ops/s
# Warmup Iteration  20: 1981425.618 ops/s
# Warmup Iteration  21: 1983599.327 ops/s
# Warmup Iteration  22: 1970068.392 ops/s
# Warmup Iteration  23: 1977533.968 ops/s
# Warmup Iteration  24: 1983722.578 ops/s
# Warmup Iteration  25: 1986156.023 ops/s
# Warmup Iteration  26: 1985003.731 ops/s
# Warmup Iteration  27: 1980070.153 ops/s
# Warmup Iteration  28: 1989650.310 ops/s
# Warmup Iteration  29: 1983248.664 ops/s
# Warmup Iteration  30: 1981667.516 ops/s
Iteration   1: 1977435.218 ops/s
Iteration   2: 1979676.166 ops/s
Iteration   3: 1986673.298 ops/s
Iteration   4: 1978301.024 ops/s
Iteration   5: 1984176.544 ops/s
Iteration   6: 1987202.387 ops/s
Iteration   7: 1978622.750 ops/s
Iteration   8: 1981082.203 ops/s
Iteration   9: 1983162.338 ops/s
Iteration  10: 1979987.964 ops/s
Iteration  11: 1982771.921 ops/s
Iteration  12: 1987367.709 ops/s
Iteration  13: 1979130.434 ops/s
Iteration  14: 1988090.986 ops/s
Iteration  15: 1991211.634 ops/s
Iteration  16: 1992586.847 ops/s
Iteration  17: 1983706.083 ops/s
Iteration  18: 1983906.974 ops/s
Iteration  19: 1983739.287 ops/s
Iteration  20: 1984819.379 ops/s
Iteration  21: 1983514.309 ops/s
Iteration  22: 1973508.696 ops/s
Iteration  23: 1952545.102 ops/s
Iteration  24: 1983642.391 ops/s
Iteration  25: 1985646.230 ops/s
Iteration  26: 1989839.310 ops/s
Iteration  27: 1993429.804 ops/s
Iteration  28: 1982794.433 ops/s
Iteration  29: 1982044.020 ops/s
Iteration  30: 1984961.128 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShort":
  1982852.552 ±(99.9%) 4865.642 ops/s [Average]
  (min, avg, max) = (1952545.102, 1982852.552, 1993429.804), stdev = 7282.664
  CI (99.9%): [1977986.910, 1987718.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectShort  thrpt   30  1982852.552 ± 4865.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3030611.864 ops/s
# Warmup Iteration   2: 6799903.413 ops/s
# Warmup Iteration   3: 5753945.710 ops/s
# Warmup Iteration   4: 6873105.626 ops/s
# Warmup Iteration   5: 6873245.162 ops/s
# Warmup Iteration   6: 6877568.025 ops/s
# Warmup Iteration   7: 6875963.558 ops/s
# Warmup Iteration   8: 6867986.140 ops/s
# Warmup Iteration   9: 6873262.876 ops/s
# Warmup Iteration  10: 6880589.899 ops/s
# Warmup Iteration  11: 6850522.552 ops/s
# Warmup Iteration  12: 6875436.604 ops/s
# Warmup Iteration  13: 6883309.813 ops/s
# Warmup Iteration  14: 6856777.598 ops/s
# Warmup Iteration  15: 6884677.240 ops/s
# Warmup Iteration  16: 6885365.973 ops/s
# Warmup Iteration  17: 6888259.574 ops/s
# Warmup Iteration  18: 6877482.467 ops/s
# Warmup Iteration  19: 6866315.341 ops/s
# Warmup Iteration  20: 6878014.711 ops/s
# Warmup Iteration  21: 6873431.379 ops/s
# Warmup Iteration  22: 6890368.506 ops/s
# Warmup Iteration  23: 6878445.285 ops/s
# Warmup Iteration  24: 6885627.207 ops/s
# Warmup Iteration  25: 6890484.396 ops/s
# Warmup Iteration  26: 6894285.869 ops/s
# Warmup Iteration  27: 6891322.930 ops/s
# Warmup Iteration  28: 6876047.992 ops/s
# Warmup Iteration  29: 6879741.346 ops/s
# Warmup Iteration  30: 6878594.698 ops/s
Iteration   1: 6878559.645 ops/s
Iteration   2: 6886898.764 ops/s
Iteration   3: 6848785.516 ops/s
Iteration   4: 6879670.595 ops/s
Iteration   5: 6900939.924 ops/s
Iteration   6: 6896447.787 ops/s
Iteration   7: 6857605.486 ops/s
Iteration   8: 6883365.752 ops/s
Iteration   9: 6880478.994 ops/s
Iteration  10: 6875881.893 ops/s
Iteration  11: 6886195.137 ops/s
Iteration  12: 6880433.376 ops/s
Iteration  13: 6875833.766 ops/s
Iteration  14: 6888142.808 ops/s
Iteration  15: 6891117.983 ops/s
Iteration  16: 6872154.445 ops/s
Iteration  17: 6881825.551 ops/s
Iteration  18: 6844174.283 ops/s
Iteration  19: 6888689.166 ops/s
Iteration  20: 6888238.714 ops/s
Iteration  21: 6878251.749 ops/s
Iteration  22: 6867375.098 ops/s
Iteration  23: 6897911.175 ops/s
Iteration  24: 6854577.614 ops/s
Iteration  25: 6881501.817 ops/s
Iteration  26: 6874997.463 ops/s
Iteration  27: 6885084.904 ops/s
Iteration  28: 6853507.415 ops/s
Iteration  29: 6870831.362 ops/s
Iteration  30: 6890137.199 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithBagTarget":
  6877987.179 ±(99.9%) 9570.406 ops/s [Average]
  (min, avg, max) = (6844174.283, 6877987.179, 6900939.924), stdev = 14324.534
  CI (99.9%): [6868416.773, 6887557.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  6877987.179 ± 9570.406  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2233535.588 ops/s
# Warmup Iteration   2: 5198252.654 ops/s
# Warmup Iteration   3: 4440163.405 ops/s
# Warmup Iteration   4: 5279038.534 ops/s
# Warmup Iteration   5: 5293961.366 ops/s
# Warmup Iteration   6: 5308876.538 ops/s
# Warmup Iteration   7: 5284790.914 ops/s
# Warmup Iteration   8: 5301213.488 ops/s
# Warmup Iteration   9: 5291141.168 ops/s
# Warmup Iteration  10: 5306682.054 ops/s
# Warmup Iteration  11: 5301740.362 ops/s
# Warmup Iteration  12: 5307607.820 ops/s
# Warmup Iteration  13: 5306754.148 ops/s
# Warmup Iteration  14: 5306267.283 ops/s
# Warmup Iteration  15: 5286974.272 ops/s
# Warmup Iteration  16: 5293988.832 ops/s
# Warmup Iteration  17: 5312690.214 ops/s
# Warmup Iteration  18: 5300849.570 ops/s
# Warmup Iteration  19: 5306232.232 ops/s
# Warmup Iteration  20: 5302653.858 ops/s
# Warmup Iteration  21: 5309489.351 ops/s
# Warmup Iteration  22: 5316553.516 ops/s
# Warmup Iteration  23: 5309588.102 ops/s
# Warmup Iteration  24: 5313108.063 ops/s
# Warmup Iteration  25: 5307434.592 ops/s
# Warmup Iteration  26: 5310434.309 ops/s
# Warmup Iteration  27: 5311763.264 ops/s
# Warmup Iteration  28: 5308573.419 ops/s
# Warmup Iteration  29: 5304888.874 ops/s
# Warmup Iteration  30: 5308684.184 ops/s
Iteration   1: 5311254.092 ops/s
Iteration   2: 5310100.343 ops/s
Iteration   3: 5295077.077 ops/s
Iteration   4: 5312952.133 ops/s
Iteration   5: 5313492.203 ops/s
Iteration   6: 5324478.285 ops/s
Iteration   7: 5296933.229 ops/s
Iteration   8: 5324143.029 ops/s
Iteration   9: 5273382.930 ops/s
Iteration  10: 5315736.844 ops/s
Iteration  11: 5311862.679 ops/s
Iteration  12: 5317393.455 ops/s
Iteration  13: 5319433.603 ops/s
Iteration  14: 5329369.940 ops/s
Iteration  15: 5307069.773 ops/s
Iteration  16: 5320415.517 ops/s
Iteration  17: 5306458.101 ops/s
Iteration  18: 5312644.658 ops/s
Iteration  19: 5323705.655 ops/s
Iteration  20: 5324004.899 ops/s
Iteration  21: 5330766.204 ops/s
Iteration  22: 5316260.593 ops/s
Iteration  23: 5298621.813 ops/s
Iteration  24: 5310853.691 ops/s
Iteration  25: 5313557.054 ops/s
Iteration  26: 5308585.656 ops/s
Iteration  27: 5309383.230 ops/s
Iteration  28: 5332498.333 ops/s
Iteration  29: 5328503.590 ops/s
Iteration  30: 5306926.355 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectShortWithTarget":
  5313528.832 ±(99.9%) 8175.420 ops/s [Average]
  (min, avg, max) = (5273382.930, 5313528.832, 5332498.333), stdev = 12236.585
  CI (99.9%): [5305353.412, 5321704.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  5313528.832 ± 8175.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153446.907 ops/s
# Warmup Iteration   2: 270973.144 ops/s
# Warmup Iteration   3: 341544.694 ops/s
# Warmup Iteration   4: 344839.637 ops/s
# Warmup Iteration   5: 344513.090 ops/s
# Warmup Iteration   6: 326810.163 ops/s
# Warmup Iteration   7: 301254.113 ops/s
# Warmup Iteration   8: 344498.321 ops/s
# Warmup Iteration   9: 345633.447 ops/s
# Warmup Iteration  10: 344490.375 ops/s
# Warmup Iteration  11: 344940.199 ops/s
# Warmup Iteration  12: 345101.543 ops/s
# Warmup Iteration  13: 344642.561 ops/s
# Warmup Iteration  14: 344830.828 ops/s
# Warmup Iteration  15: 344449.613 ops/s
# Warmup Iteration  16: 344509.601 ops/s
# Warmup Iteration  17: 344797.581 ops/s
# Warmup Iteration  18: 345051.357 ops/s
# Warmup Iteration  19: 344032.534 ops/s
# Warmup Iteration  20: 344048.073 ops/s
# Warmup Iteration  21: 345158.102 ops/s
# Warmup Iteration  22: 344266.653 ops/s
# Warmup Iteration  23: 344275.312 ops/s
# Warmup Iteration  24: 343866.422 ops/s
# Warmup Iteration  25: 345176.626 ops/s
# Warmup Iteration  26: 345229.668 ops/s
# Warmup Iteration  27: 345266.634 ops/s
# Warmup Iteration  28: 345238.179 ops/s
# Warmup Iteration  29: 345216.284 ops/s
# Warmup Iteration  30: 345225.374 ops/s
Iteration   1: 343806.170 ops/s
Iteration   2: 344029.104 ops/s
Iteration   3: 345263.357 ops/s
Iteration   4: 345508.341 ops/s
Iteration   5: 345683.305 ops/s
Iteration   6: 344829.865 ops/s
Iteration   7: 344831.539 ops/s
Iteration   8: 344378.286 ops/s
Iteration   9: 345046.035 ops/s
Iteration  10: 344377.114 ops/s
Iteration  11: 343205.666 ops/s
Iteration  12: 342948.566 ops/s
Iteration  13: 345586.587 ops/s
Iteration  14: 345472.854 ops/s
Iteration  15: 344654.034 ops/s
Iteration  16: 343076.097 ops/s
Iteration  17: 344469.987 ops/s
Iteration  18: 343920.024 ops/s
Iteration  19: 345389.229 ops/s
Iteration  20: 344746.982 ops/s
Iteration  21: 345560.891 ops/s
Iteration  22: 344126.177 ops/s
Iteration  23: 344748.201 ops/s
Iteration  24: 344131.025 ops/s
Iteration  25: 343112.446 ops/s
Iteration  26: 345056.360 ops/s
Iteration  27: 344900.420 ops/s
Iteration  28: 344014.688 ops/s
Iteration  29: 344922.664 ops/s
Iteration  30: 344116.023 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectTarget":
  344530.401 ±(99.9%) 527.698 ops/s [Average]
  (min, avg, max) = (342948.566, 344530.401, 345683.305), stdev = 789.833
  CI (99.9%): [344002.704, 345058.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_collectTarget  thrpt   30  344530.401 ± 527.698  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14041499.356 ops/s
# Warmup Iteration   2: 24394403.397 ops/s
# Warmup Iteration   3: 29196833.914 ops/s
# Warmup Iteration   4: 29134812.626 ops/s
# Warmup Iteration   5: 29114925.002 ops/s
# Warmup Iteration   6: 29121150.121 ops/s
# Warmup Iteration   7: 29069285.358 ops/s
# Warmup Iteration   8: 29013834.827 ops/s
# Warmup Iteration   9: 29275006.353 ops/s
# Warmup Iteration  10: 28139940.347 ops/s
# Warmup Iteration  11: 28656820.083 ops/s
# Warmup Iteration  12: 29138891.593 ops/s
# Warmup Iteration  13: 29107516.151 ops/s
# Warmup Iteration  14: 29166292.612 ops/s
# Warmup Iteration  15: 29187763.333 ops/s
# Warmup Iteration  16: 29101159.171 ops/s
# Warmup Iteration  17: 29111175.982 ops/s
# Warmup Iteration  18: 29017828.302 ops/s
# Warmup Iteration  19: 29143787.250 ops/s
# Warmup Iteration  20: 29145024.264 ops/s
# Warmup Iteration  21: 29083883.640 ops/s
# Warmup Iteration  22: 29153979.616 ops/s
# Warmup Iteration  23: 29122372.607 ops/s
# Warmup Iteration  24: 29061558.285 ops/s
# Warmup Iteration  25: 29142401.124 ops/s
# Warmup Iteration  26: 29060077.916 ops/s
# Warmup Iteration  27: 28988707.598 ops/s
# Warmup Iteration  28: 29162663.435 ops/s
# Warmup Iteration  29: 29109335.390 ops/s
# Warmup Iteration  30: 29096191.430 ops/s
Iteration   1: 29082858.829 ops/s
Iteration   2: 29244864.055 ops/s
Iteration   3: 29246632.381 ops/s
Iteration   4: 29048974.935 ops/s
Iteration   5: 29289501.433 ops/s
Iteration   6: 28960214.163 ops/s
Iteration   7: 29125992.051 ops/s
Iteration   8: 29122079.726 ops/s
Iteration   9: 29092749.237 ops/s
Iteration  10: 29180019.048 ops/s
Iteration  11: 29194900.199 ops/s
Iteration  12: 29235551.702 ops/s
Iteration  13: 28918871.693 ops/s
Iteration  14: 29092410.291 ops/s
Iteration  15: 29046740.235 ops/s
Iteration  16: 29109980.967 ops/s
Iteration  17: 29089498.385 ops/s
Iteration  18: 29254933.474 ops/s
Iteration  19: 29232799.653 ops/s
Iteration  20: 29274346.401 ops/s
Iteration  21: 28994907.164 ops/s
Iteration  22: 29177371.902 ops/s
Iteration  23: 29113185.051 ops/s
Iteration  24: 29127355.658 ops/s
Iteration  25: 29098592.265 ops/s
Iteration  26: 29164271.247 ops/s
Iteration  27: 29046132.591 ops/s
Iteration  28: 29211922.912 ops/s
Iteration  29: 29222580.696 ops/s
Iteration  30: 29139173.855 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith":
  29137980.407 ±(99.9%) 62598.598 ops/s [Average]
  (min, avg, max) = (28918871.693, 29137980.407, 29289501.433), stdev = 93694.641
  CI (99.9%): [29075381.809, 29200579.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_collectWith  thrpt   30  29137980.407 ± 62598.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4151393.502 ops/s
# Warmup Iteration   2: 10268280.997 ops/s
# Warmup Iteration   3: 8795716.538 ops/s
# Warmup Iteration   4: 10666149.736 ops/s
# Warmup Iteration   5: 10665768.344 ops/s
# Warmup Iteration   6: 10664561.172 ops/s
# Warmup Iteration   7: 10661719.360 ops/s
# Warmup Iteration   8: 10643089.469 ops/s
# Warmup Iteration   9: 10665521.593 ops/s
# Warmup Iteration  10: 10660980.190 ops/s
# Warmup Iteration  11: 10662318.005 ops/s
# Warmup Iteration  12: 10624158.631 ops/s
# Warmup Iteration  13: 10630206.345 ops/s
# Warmup Iteration  14: 10651501.841 ops/s
# Warmup Iteration  15: 10674735.784 ops/s
# Warmup Iteration  16: 10653378.152 ops/s
# Warmup Iteration  17: 10664703.837 ops/s
# Warmup Iteration  18: 10636485.539 ops/s
# Warmup Iteration  19: 10644628.438 ops/s
# Warmup Iteration  20: 10659039.205 ops/s
# Warmup Iteration  21: 10641128.426 ops/s
# Warmup Iteration  22: 10625569.073 ops/s
# Warmup Iteration  23: 10655889.496 ops/s
# Warmup Iteration  24: 10634395.149 ops/s
# Warmup Iteration  25: 10655622.798 ops/s
# Warmup Iteration  26: 10683760.144 ops/s
# Warmup Iteration  27: 10637086.328 ops/s
# Warmup Iteration  28: 10652329.401 ops/s
# Warmup Iteration  29: 10648489.683 ops/s
# Warmup Iteration  30: 10661708.353 ops/s
Iteration   1: 10660302.925 ops/s
Iteration   2: 10542892.213 ops/s
Iteration   3: 10670653.482 ops/s
Iteration   4: 10704391.000 ops/s
Iteration   5: 10621155.698 ops/s
Iteration   6: 10652849.649 ops/s
Iteration   7: 10671334.438 ops/s
Iteration   8: 10624904.893 ops/s
Iteration   9: 10692326.230 ops/s
Iteration  10: 10644048.700 ops/s
Iteration  11: 10653656.338 ops/s
Iteration  12: 10609470.733 ops/s
Iteration  13: 10634826.113 ops/s
Iteration  14: 10624961.982 ops/s
Iteration  15: 10613581.858 ops/s
Iteration  16: 10636863.078 ops/s
Iteration  17: 10659763.892 ops/s
Iteration  18: 10650201.880 ops/s
Iteration  19: 10672530.667 ops/s
Iteration  20: 10623242.852 ops/s
Iteration  21: 10643031.177 ops/s
Iteration  22: 10629734.595 ops/s
Iteration  23: 10641657.224 ops/s
Iteration  24: 10658797.221 ops/s
Iteration  25: 10643877.995 ops/s
Iteration  26: 10621917.430 ops/s
Iteration  27: 10654685.808 ops/s
Iteration  28: 10643538.862 ops/s
Iteration  29: 10651687.367 ops/s
Iteration  30: 10660908.106 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndex":
  10643793.147 ±(99.9%) 19422.576 ops/s [Average]
  (min, avg, max) = (10542892.213, 10643793.147, 10704391.000), stdev = 29070.799
  CI (99.9%): [10624370.571, 10663215.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  10643793.147 ± 19422.576  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 829137.401 ops/s
# Warmup Iteration   2: 2294496.616 ops/s
# Warmup Iteration   3: 2332721.078 ops/s
# Warmup Iteration   4: 1937767.391 ops/s
# Warmup Iteration   5: 2321532.237 ops/s
# Warmup Iteration   6: 2322326.290 ops/s
# Warmup Iteration   7: 2322736.405 ops/s
# Warmup Iteration   8: 2320806.450 ops/s
# Warmup Iteration   9: 2328448.419 ops/s
# Warmup Iteration  10: 2327762.667 ops/s
# Warmup Iteration  11: 2322902.155 ops/s
# Warmup Iteration  12: 2324227.099 ops/s
# Warmup Iteration  13: 2322942.339 ops/s
# Warmup Iteration  14: 2330785.096 ops/s
# Warmup Iteration  15: 2332019.179 ops/s
# Warmup Iteration  16: 2327485.585 ops/s
# Warmup Iteration  17: 2331401.426 ops/s
# Warmup Iteration  18: 2328284.516 ops/s
# Warmup Iteration  19: 2330250.695 ops/s
# Warmup Iteration  20: 2327222.941 ops/s
# Warmup Iteration  21: 2318626.440 ops/s
# Warmup Iteration  22: 2327671.714 ops/s
# Warmup Iteration  23: 2327749.905 ops/s
# Warmup Iteration  24: 2331412.705 ops/s
# Warmup Iteration  25: 2326765.250 ops/s
# Warmup Iteration  26: 2319444.501 ops/s
# Warmup Iteration  27: 2321697.644 ops/s
# Warmup Iteration  28: 2321744.122 ops/s
# Warmup Iteration  29: 2330928.046 ops/s
# Warmup Iteration  30: 2326116.071 ops/s
Iteration   1: 2324422.049 ops/s
Iteration   2: 2306394.076 ops/s
Iteration   3: 2329823.435 ops/s
Iteration   4: 2325453.974 ops/s
Iteration   5: 2328461.898 ops/s
Iteration   6: 2330340.671 ops/s
Iteration   7: 2334957.062 ops/s
Iteration   8: 2330522.147 ops/s
Iteration   9: 2327548.869 ops/s
Iteration  10: 2323967.955 ops/s
Iteration  11: 2328501.015 ops/s
Iteration  12: 2322547.558 ops/s
Iteration  13: 2329295.602 ops/s
Iteration  14: 2327476.195 ops/s
Iteration  15: 2324631.153 ops/s
Iteration  16: 2326376.202 ops/s
Iteration  17: 2328500.774 ops/s
Iteration  18: 2332067.536 ops/s
Iteration  19: 2320243.761 ops/s
Iteration  20: 2325812.800 ops/s
Iteration  21: 2327048.625 ops/s
Iteration  22: 2328153.413 ops/s
Iteration  23: 2332580.693 ops/s
Iteration  24: 2324442.361 ops/s
Iteration  25: 2327659.732 ops/s
Iteration  26: 2324658.958 ops/s
Iteration  27: 2322126.498 ops/s
Iteration  28: 2319205.497 ops/s
Iteration  29: 2328415.403 ops/s
Iteration  30: 2317937.367 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2325985.776 ±(99.9%) 3577.307 ops/s [Average]
  (min, avg, max) = (2306394.076, 2325985.776, 2334957.062), stdev = 5354.346
  CI (99.9%): [2322408.469, 2329563.083] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2325985.776 ± 3577.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158547.291 ops/s
# Warmup Iteration   2: 278640.071 ops/s
# Warmup Iteration   3: 346778.474 ops/s
# Warmup Iteration   4: 349125.310 ops/s
# Warmup Iteration   5: 349459.899 ops/s
# Warmup Iteration   6: 315975.835 ops/s
# Warmup Iteration   7: 322799.417 ops/s
# Warmup Iteration   8: 349409.178 ops/s
# Warmup Iteration   9: 350395.084 ops/s
# Warmup Iteration  10: 349903.064 ops/s
# Warmup Iteration  11: 349259.991 ops/s
# Warmup Iteration  12: 350391.956 ops/s
# Warmup Iteration  13: 350733.214 ops/s
# Warmup Iteration  14: 350329.846 ops/s
# Warmup Iteration  15: 349797.473 ops/s
# Warmup Iteration  16: 349487.215 ops/s
# Warmup Iteration  17: 349398.474 ops/s
# Warmup Iteration  18: 349749.357 ops/s
# Warmup Iteration  19: 349605.565 ops/s
# Warmup Iteration  20: 350691.779 ops/s
# Warmup Iteration  21: 349160.621 ops/s
# Warmup Iteration  22: 349860.317 ops/s
# Warmup Iteration  23: 349475.095 ops/s
# Warmup Iteration  24: 349413.306 ops/s
# Warmup Iteration  25: 348679.292 ops/s
# Warmup Iteration  26: 350219.260 ops/s
# Warmup Iteration  27: 349942.392 ops/s
# Warmup Iteration  28: 350164.140 ops/s
# Warmup Iteration  29: 349717.814 ops/s
# Warmup Iteration  30: 350531.370 ops/s
Iteration   1: 349605.303 ops/s
Iteration   2: 350107.897 ops/s
Iteration   3: 348721.434 ops/s
Iteration   4: 349228.110 ops/s
Iteration   5: 348243.309 ops/s
Iteration   6: 349965.669 ops/s
Iteration   7: 349089.420 ops/s
Iteration   8: 350643.232 ops/s
Iteration   9: 350110.726 ops/s
Iteration  10: 350209.405 ops/s
Iteration  11: 349057.053 ops/s
Iteration  12: 350333.542 ops/s
Iteration  13: 349813.842 ops/s
Iteration  14: 349936.639 ops/s
Iteration  15: 348991.135 ops/s
Iteration  16: 350622.398 ops/s
Iteration  17: 350110.805 ops/s
Iteration  18: 350378.579 ops/s
Iteration  19: 350787.639 ops/s
Iteration  20: 350012.463 ops/s
Iteration  21: 351115.090 ops/s
Iteration  22: 350424.687 ops/s
Iteration  23: 351105.235 ops/s
Iteration  24: 349473.686 ops/s
Iteration  25: 349404.194 ops/s
Iteration  26: 350083.776 ops/s
Iteration  27: 349743.059 ops/s
Iteration  28: 349389.124 ops/s
Iteration  29: 349893.990 ops/s
Iteration  30: 349985.234 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_collectWith_target":
  349886.223 ±(99.9%) 453.325 ops/s [Average]
  (min, avg, max) = (348243.309, 349886.223, 351115.090), stdev = 678.516
  CI (99.9%): [349432.897, 350339.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_collectWith_target  thrpt   30  349886.223 ± 453.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_constructorWithCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_constructorWithCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2513503.073 ops/s
# Warmup Iteration   2: 5310925.630 ops/s
# Warmup Iteration   3: 5409163.425 ops/s
# Warmup Iteration   4: 5363836.914 ops/s
# Warmup Iteration   5: 4612513.931 ops/s
# Warmup Iteration   6: 5452830.738 ops/s
# Warmup Iteration   7: 5443607.004 ops/s
# Warmup Iteration   8: 5454199.497 ops/s
# Warmup Iteration   9: 5453988.605 ops/s
# Warmup Iteration  10: 5439351.066 ops/s
# Warmup Iteration  11: 5453824.604 ops/s
# Warmup Iteration  12: 5449046.100 ops/s
# Warmup Iteration  13: 5437875.475 ops/s
# Warmup Iteration  14: 5457633.581 ops/s
# Warmup Iteration  15: 5439452.266 ops/s
# Warmup Iteration  16: 5456107.255 ops/s
# Warmup Iteration  17: 5440459.974 ops/s
# Warmup Iteration  18: 5453624.273 ops/s
# Warmup Iteration  19: 5440363.792 ops/s
# Warmup Iteration  20: 5454347.821 ops/s
# Warmup Iteration  21: 5452884.660 ops/s
# Warmup Iteration  22: 5446489.078 ops/s
# Warmup Iteration  23: 5446430.906 ops/s
# Warmup Iteration  24: 5448526.139 ops/s
# Warmup Iteration  25: 5456992.284 ops/s
# Warmup Iteration  26: 5455150.256 ops/s
# Warmup Iteration  27: 5452409.604 ops/s
# Warmup Iteration  28: 5437103.981 ops/s
# Warmup Iteration  29: 5453429.078 ops/s
# Warmup Iteration  30: 5447625.188 ops/s
Iteration   1: 5455235.391 ops/s
Iteration   2: 5440378.748 ops/s
Iteration   3: 5449194.261 ops/s
Iteration   4: 5446425.817 ops/s
Iteration   5: 5437619.698 ops/s
Iteration   6: 5457024.951 ops/s
Iteration   7: 5452781.569 ops/s
Iteration   8: 5446561.430 ops/s
Iteration   9: 5413504.478 ops/s
Iteration  10: 5450715.335 ops/s
Iteration  11: 5447138.077 ops/s
Iteration  12: 5446125.669 ops/s
Iteration  13: 5454622.757 ops/s
Iteration  14: 5454793.983 ops/s
Iteration  15: 5450029.812 ops/s
Iteration  16: 5461516.644 ops/s
Iteration  17: 5441163.565 ops/s
Iteration  18: 5461064.543 ops/s
Iteration  19: 5446566.483 ops/s
Iteration  20: 5458167.843 ops/s
Iteration  21: 5441932.340 ops/s
Iteration  22: 5456852.093 ops/s
Iteration  23: 5448685.088 ops/s
Iteration  24: 5447331.295 ops/s
Iteration  25: 5434369.606 ops/s
Iteration  26: 5428990.003 ops/s
Iteration  27: 5463626.559 ops/s
Iteration  28: 5445198.649 ops/s
Iteration  29: 5441429.185 ops/s
Iteration  30: 5437825.443 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_constructorWithCollection":
  5447229.044 ±(99.9%) 6989.526 ops/s [Average]
  (min, avg, max) = (5413504.478, 5447229.044, 5463626.559), stdev = 10461.594
  CI (99.9%): [5440239.518, 5454218.569] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_constructorWithCollection  thrpt   30  5447229.044 ± 6989.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21577526.668 ops/s
# Warmup Iteration   2: 48109284.412 ops/s
# Warmup Iteration   3: 37941252.176 ops/s
# Warmup Iteration   4: 43088353.624 ops/s
# Warmup Iteration   5: 44159632.735 ops/s
# Warmup Iteration   6: 44125245.250 ops/s
# Warmup Iteration   7: 44019569.675 ops/s
# Warmup Iteration   8: 44012049.195 ops/s
# Warmup Iteration   9: 44016003.199 ops/s
# Warmup Iteration  10: 43737739.814 ops/s
# Warmup Iteration  11: 44094340.863 ops/s
# Warmup Iteration  12: 44037282.439 ops/s
# Warmup Iteration  13: 44055691.257 ops/s
# Warmup Iteration  14: 44035155.441 ops/s
# Warmup Iteration  15: 44046589.835 ops/s
# Warmup Iteration  16: 44047506.560 ops/s
# Warmup Iteration  17: 43972347.328 ops/s
# Warmup Iteration  18: 44037732.149 ops/s
# Warmup Iteration  19: 43961989.836 ops/s
# Warmup Iteration  20: 43990036.607 ops/s
# Warmup Iteration  21: 43973885.920 ops/s
# Warmup Iteration  22: 43953485.783 ops/s
# Warmup Iteration  23: 44105985.736 ops/s
# Warmup Iteration  24: 44082865.848 ops/s
# Warmup Iteration  25: 44033523.729 ops/s
# Warmup Iteration  26: 44042902.962 ops/s
# Warmup Iteration  27: 44099273.966 ops/s
# Warmup Iteration  28: 43964609.211 ops/s
# Warmup Iteration  29: 43950222.652 ops/s
# Warmup Iteration  30: 44079511.307 ops/s
Iteration   1: 43948873.227 ops/s
Iteration   2: 43762324.984 ops/s
Iteration   3: 44031018.040 ops/s
Iteration   4: 44127382.722 ops/s
Iteration   5: 43974729.532 ops/s
Iteration   6: 44100494.818 ops/s
Iteration   7: 43907814.016 ops/s
Iteration   8: 44069127.430 ops/s
Iteration   9: 44033364.014 ops/s
Iteration  10: 44030493.344 ops/s
Iteration  11: 43952244.562 ops/s
Iteration  12: 44177410.333 ops/s
Iteration  13: 43789267.963 ops/s
Iteration  14: 43998566.528 ops/s
Iteration  15: 43868556.948 ops/s
Iteration  16: 44017666.462 ops/s
Iteration  17: 43677345.740 ops/s
Iteration  18: 43900795.621 ops/s
Iteration  19: 43952548.600 ops/s
Iteration  20: 44033595.364 ops/s
Iteration  21: 43946528.067 ops/s
Iteration  22: 43948894.244 ops/s
Iteration  23: 43919529.471 ops/s
Iteration  24: 44100682.062 ops/s
Iteration  25: 44051754.135 ops/s
Iteration  26: 43985234.230 ops/s
Iteration  27: 44167687.479 ops/s
Iteration  28: 44061802.568 ops/s
Iteration  29: 43992102.602 ops/s
Iteration  30: 44005294.726 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_contains":
  43984437.661 ±(99.9%) 74972.383 ops/s [Average]
  (min, avg, max) = (43677345.740, 43984437.661, 44177410.333), stdev = 112215.142
  CI (99.9%): [43909465.278, 44059410.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_contains  thrpt   30  43984437.661 ± 74972.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13118324.399 ops/s
# Warmup Iteration   2: 28382273.690 ops/s
# Warmup Iteration   3: 24773022.949 ops/s
# Warmup Iteration   4: 27950857.642 ops/s
# Warmup Iteration   5: 27825753.525 ops/s
# Warmup Iteration   6: 27899928.912 ops/s
# Warmup Iteration   7: 27952819.212 ops/s
# Warmup Iteration   8: 27888854.434 ops/s
# Warmup Iteration   9: 27909719.398 ops/s
# Warmup Iteration  10: 27855499.957 ops/s
# Warmup Iteration  11: 27895992.694 ops/s
# Warmup Iteration  12: 27864606.979 ops/s
# Warmup Iteration  13: 27841961.829 ops/s
# Warmup Iteration  14: 27793292.887 ops/s
# Warmup Iteration  15: 27930282.289 ops/s
# Warmup Iteration  16: 27894895.573 ops/s
# Warmup Iteration  17: 27927122.282 ops/s
# Warmup Iteration  18: 27887134.655 ops/s
# Warmup Iteration  19: 27889214.603 ops/s
# Warmup Iteration  20: 27842421.261 ops/s
# Warmup Iteration  21: 27956526.318 ops/s
# Warmup Iteration  22: 27871850.571 ops/s
# Warmup Iteration  23: 27954319.367 ops/s
# Warmup Iteration  24: 27914832.671 ops/s
# Warmup Iteration  25: 27860272.455 ops/s
# Warmup Iteration  26: 27885232.332 ops/s
# Warmup Iteration  27: 27990695.507 ops/s
# Warmup Iteration  28: 28011769.004 ops/s
# Warmup Iteration  29: 27872272.637 ops/s
# Warmup Iteration  30: 27912194.065 ops/s
Iteration   1: 27916077.121 ops/s
Iteration   2: 27871745.715 ops/s
Iteration   3: 27917250.913 ops/s
Iteration   4: 27773050.996 ops/s
Iteration   5: 27908588.013 ops/s
Iteration   6: 27833926.226 ops/s
Iteration   7: 27950064.655 ops/s
Iteration   8: 27935857.775 ops/s
Iteration   9: 27956143.637 ops/s
Iteration  10: 27906984.552 ops/s
Iteration  11: 27868682.717 ops/s
Iteration  12: 27933279.546 ops/s
Iteration  13: 27952903.669 ops/s
Iteration  14: 27834942.640 ops/s
Iteration  15: 27877859.701 ops/s
Iteration  16: 27772607.645 ops/s
Iteration  17: 27536972.372 ops/s
Iteration  18: 27817025.663 ops/s
Iteration  19: 27909853.915 ops/s
Iteration  20: 27908151.049 ops/s
Iteration  21: 27879743.127 ops/s
Iteration  22: 27903123.074 ops/s
Iteration  23: 27925441.733 ops/s
Iteration  24: 27910466.822 ops/s
Iteration  25: 27945216.892 ops/s
Iteration  26: 27884799.535 ops/s
Iteration  27: 27961488.854 ops/s
Iteration  28: 27938117.694 ops/s
Iteration  29: 27846624.256 ops/s
Iteration  30: 27917395.790 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllArray":
  27883146.210 ±(99.9%) 55051.438 ops/s [Average]
  (min, avg, max) = (27536972.372, 27883146.210, 27961488.854), stdev = 82398.408
  CI (99.9%): [27828094.772, 27938197.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_containsAllArray  thrpt   30  27883146.210 ± 55051.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9816889.292 ops/s
# Warmup Iteration   2: 21449705.961 ops/s
# Warmup Iteration   3: 18659421.067 ops/s
# Warmup Iteration   4: 22179542.768 ops/s
# Warmup Iteration   5: 22175657.281 ops/s
# Warmup Iteration   6: 22135557.484 ops/s
# Warmup Iteration   7: 22168141.327 ops/s
# Warmup Iteration   8: 22061726.692 ops/s
# Warmup Iteration   9: 22163467.338 ops/s
# Warmup Iteration  10: 22215318.132 ops/s
# Warmup Iteration  11: 22127305.414 ops/s
# Warmup Iteration  12: 22173953.904 ops/s
# Warmup Iteration  13: 22143626.425 ops/s
# Warmup Iteration  14: 22170980.424 ops/s
# Warmup Iteration  15: 22110995.972 ops/s
# Warmup Iteration  16: 22189809.408 ops/s
# Warmup Iteration  17: 22111632.957 ops/s
# Warmup Iteration  18: 22100647.175 ops/s
# Warmup Iteration  19: 22191998.695 ops/s
# Warmup Iteration  20: 22162418.706 ops/s
# Warmup Iteration  21: 22172151.350 ops/s
# Warmup Iteration  22: 22189275.922 ops/s
# Warmup Iteration  23: 22191889.478 ops/s
# Warmup Iteration  24: 22130236.154 ops/s
# Warmup Iteration  25: 22142344.120 ops/s
# Warmup Iteration  26: 22149120.267 ops/s
# Warmup Iteration  27: 22222605.738 ops/s
# Warmup Iteration  28: 22090248.969 ops/s
# Warmup Iteration  29: 22146692.045 ops/s
# Warmup Iteration  30: 22101790.826 ops/s
Iteration   1: 22256976.845 ops/s
Iteration   2: 22133011.243 ops/s
Iteration   3: 22186050.382 ops/s
Iteration   4: 22216257.055 ops/s
Iteration   5: 22195153.687 ops/s
Iteration   6: 22120133.695 ops/s
Iteration   7: 22241782.156 ops/s
Iteration   8: 22083596.078 ops/s
Iteration   9: 22152455.511 ops/s
Iteration  10: 22239597.207 ops/s
Iteration  11: 22243657.887 ops/s
Iteration  12: 22212058.409 ops/s
Iteration  13: 22242277.017 ops/s
Iteration  14: 22258721.475 ops/s
Iteration  15: 22106532.716 ops/s
Iteration  16: 22154874.690 ops/s
Iteration  17: 22126453.418 ops/s
Iteration  18: 22069945.040 ops/s
Iteration  19: 22214927.628 ops/s
Iteration  20: 22025700.710 ops/s
Iteration  21: 22166958.668 ops/s
Iteration  22: 22249301.125 ops/s
Iteration  23: 22164331.013 ops/s
Iteration  24: 22187711.162 ops/s
Iteration  25: 22121425.062 ops/s
Iteration  26: 22172550.801 ops/s
Iteration  27: 22190436.164 ops/s
Iteration  28: 22093909.612 ops/s
Iteration  29: 22261209.438 ops/s
Iteration  30: 22269752.069 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllCollection":
  22178591.599 ±(99.9%) 43473.719 ops/s [Average]
  (min, avg, max) = (22025700.710, 22178591.599, 22269752.069), stdev = 65069.421
  CI (99.9%): [22135117.880, 22222065.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_containsAllCollection  thrpt   30  22178591.599 ± 43473.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9686930.843 ops/s
# Warmup Iteration   2: 21462261.914 ops/s
# Warmup Iteration   3: 18547243.519 ops/s
# Warmup Iteration   4: 22041632.776 ops/s
# Warmup Iteration   5: 22057002.663 ops/s
# Warmup Iteration   6: 21929197.693 ops/s
# Warmup Iteration   7: 22007315.164 ops/s
# Warmup Iteration   8: 22066350.778 ops/s
# Warmup Iteration   9: 22090281.886 ops/s
# Warmup Iteration  10: 22108034.109 ops/s
# Warmup Iteration  11: 21971359.617 ops/s
# Warmup Iteration  12: 22007935.980 ops/s
# Warmup Iteration  13: 21819903.202 ops/s
# Warmup Iteration  14: 21968030.263 ops/s
# Warmup Iteration  15: 22092839.493 ops/s
# Warmup Iteration  16: 21968098.381 ops/s
# Warmup Iteration  17: 22075575.489 ops/s
# Warmup Iteration  18: 22089400.984 ops/s
# Warmup Iteration  19: 22083208.804 ops/s
# Warmup Iteration  20: 22075256.999 ops/s
# Warmup Iteration  21: 22045375.104 ops/s
# Warmup Iteration  22: 22065990.464 ops/s
# Warmup Iteration  23: 22091349.698 ops/s
# Warmup Iteration  24: 22066881.389 ops/s
# Warmup Iteration  25: 22070043.086 ops/s
# Warmup Iteration  26: 22049879.753 ops/s
# Warmup Iteration  27: 22000514.483 ops/s
# Warmup Iteration  28: 22041568.999 ops/s
# Warmup Iteration  29: 22064975.855 ops/s
# Warmup Iteration  30: 22077877.025 ops/s
Iteration   1: 22018373.267 ops/s
Iteration   2: 22129831.625 ops/s
Iteration   3: 22080574.483 ops/s
Iteration   4: 21996747.772 ops/s
Iteration   5: 22035097.435 ops/s
Iteration   6: 22077894.090 ops/s
Iteration   7: 22101872.478 ops/s
Iteration   8: 22060710.334 ops/s
Iteration   9: 22136674.592 ops/s
Iteration  10: 22125298.590 ops/s
Iteration  11: 22083429.044 ops/s
Iteration  12: 22079787.605 ops/s
Iteration  13: 22081069.804 ops/s
Iteration  14: 21965794.735 ops/s
Iteration  15: 22056477.978 ops/s
Iteration  16: 21998403.070 ops/s
Iteration  17: 22062785.367 ops/s
Iteration  18: 21994084.583 ops/s
Iteration  19: 22115829.792 ops/s
Iteration  20: 22000912.441 ops/s
Iteration  21: 21983122.789 ops/s
Iteration  22: 22154510.769 ops/s
Iteration  23: 22041235.956 ops/s
Iteration  24: 22017040.531 ops/s
Iteration  25: 22007868.817 ops/s
Iteration  26: 22141856.796 ops/s
Iteration  27: 22033346.652 ops/s
Iteration  28: 21994219.926 ops/s
Iteration  29: 22089549.072 ops/s
Iteration  30: 22042846.812 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAllIterable":
  22056908.240 ±(99.9%) 35369.140 ops/s [Average]
  (min, avg, max) = (21965794.735, 22056908.240, 22154510.769), stdev = 52938.868
  CI (99.9%): [22021539.100, 22092277.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  22056908.240 ± 35369.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172437.923 ops/s
# Warmup Iteration   2: 222306.989 ops/s
# Warmup Iteration   3: 270937.706 ops/s
# Warmup Iteration   4: 270079.018 ops/s
# Warmup Iteration   5: 271260.657 ops/s
# Warmup Iteration   6: 270793.012 ops/s
# Warmup Iteration   7: 270834.306 ops/s
# Warmup Iteration   8: 271875.435 ops/s
# Warmup Iteration   9: 231987.222 ops/s
# Warmup Iteration  10: 271105.405 ops/s
# Warmup Iteration  11: 271618.797 ops/s
# Warmup Iteration  12: 270435.225 ops/s
# Warmup Iteration  13: 271636.594 ops/s
# Warmup Iteration  14: 271525.440 ops/s
# Warmup Iteration  15: 271541.363 ops/s
# Warmup Iteration  16: 270712.921 ops/s
# Warmup Iteration  17: 271236.856 ops/s
# Warmup Iteration  18: 270613.873 ops/s
# Warmup Iteration  19: 270975.275 ops/s
# Warmup Iteration  20: 270961.487 ops/s
# Warmup Iteration  21: 270489.900 ops/s
# Warmup Iteration  22: 270752.195 ops/s
# Warmup Iteration  23: 270946.362 ops/s
# Warmup Iteration  24: 270888.988 ops/s
# Warmup Iteration  25: 270706.390 ops/s
# Warmup Iteration  26: 271261.375 ops/s
# Warmup Iteration  27: 271391.389 ops/s
# Warmup Iteration  28: 270993.362 ops/s
# Warmup Iteration  29: 270619.527 ops/s
# Warmup Iteration  30: 271023.954 ops/s
Iteration   1: 270363.367 ops/s
Iteration   2: 271878.917 ops/s
Iteration   3: 270743.652 ops/s
Iteration   4: 270342.483 ops/s
Iteration   5: 271725.855 ops/s
Iteration   6: 270940.767 ops/s
Iteration   7: 271025.459 ops/s
Iteration   8: 271823.352 ops/s
Iteration   9: 271112.537 ops/s
Iteration  10: 271759.468 ops/s
Iteration  11: 271098.390 ops/s
Iteration  12: 270572.958 ops/s
Iteration  13: 270990.100 ops/s
Iteration  14: 270784.638 ops/s
Iteration  15: 271149.556 ops/s
Iteration  16: 270997.189 ops/s
Iteration  17: 270975.119 ops/s
Iteration  18: 271144.247 ops/s
Iteration  19: 271890.788 ops/s
Iteration  20: 271567.438 ops/s
Iteration  21: 271387.768 ops/s
Iteration  22: 270579.927 ops/s
Iteration  23: 271505.497 ops/s
Iteration  24: 270891.659 ops/s
Iteration  25: 271562.443 ops/s
Iteration  26: 271908.520 ops/s
Iteration  27: 271573.957 ops/s
Iteration  28: 271617.742 ops/s
Iteration  29: 271693.186 ops/s
Iteration  30: 271317.886 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyCollection":
  271230.829 ±(99.9%) 311.452 ops/s [Average]
  (min, avg, max) = (270342.483, 271230.829, 271908.520), stdev = 466.166
  CI (99.9%): [270919.377, 271542.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  271230.829 ± 311.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147205.835 ops/s
# Warmup Iteration   2: 174327.470 ops/s
# Warmup Iteration   3: 221615.315 ops/s
# Warmup Iteration   4: 221282.667 ops/s
# Warmup Iteration   5: 220172.437 ops/s
# Warmup Iteration   6: 220247.370 ops/s
# Warmup Iteration   7: 219812.234 ops/s
# Warmup Iteration   8: 219804.816 ops/s
# Warmup Iteration   9: 221007.420 ops/s
# Warmup Iteration  10: 188659.675 ops/s
# Warmup Iteration  11: 220385.470 ops/s
# Warmup Iteration  12: 220724.166 ops/s
# Warmup Iteration  13: 220926.363 ops/s
# Warmup Iteration  14: 221260.880 ops/s
# Warmup Iteration  15: 221371.138 ops/s
# Warmup Iteration  16: 220940.484 ops/s
# Warmup Iteration  17: 220766.974 ops/s
# Warmup Iteration  18: 220662.269 ops/s
# Warmup Iteration  19: 220856.518 ops/s
# Warmup Iteration  20: 221158.581 ops/s
# Warmup Iteration  21: 220923.271 ops/s
# Warmup Iteration  22: 220987.398 ops/s
# Warmup Iteration  23: 220830.439 ops/s
# Warmup Iteration  24: 220868.755 ops/s
# Warmup Iteration  25: 220695.134 ops/s
# Warmup Iteration  26: 220655.992 ops/s
# Warmup Iteration  27: 220844.768 ops/s
# Warmup Iteration  28: 221269.501 ops/s
# Warmup Iteration  29: 220862.979 ops/s
# Warmup Iteration  30: 221401.830 ops/s
Iteration   1: 220151.004 ops/s
Iteration   2: 221148.415 ops/s
Iteration   3: 220614.229 ops/s
Iteration   4: 221139.569 ops/s
Iteration   5: 221010.787 ops/s
Iteration   6: 220473.322 ops/s
Iteration   7: 221712.384 ops/s
Iteration   8: 220198.654 ops/s
Iteration   9: 220802.589 ops/s
Iteration  10: 220780.124 ops/s
Iteration  11: 220644.092 ops/s
Iteration  12: 221114.203 ops/s
Iteration  13: 220902.487 ops/s
Iteration  14: 220265.884 ops/s
Iteration  15: 220720.265 ops/s
Iteration  16: 221351.394 ops/s
Iteration  17: 220969.733 ops/s
Iteration  18: 220657.945 ops/s
Iteration  19: 221000.206 ops/s
Iteration  20: 221693.352 ops/s
Iteration  21: 221173.529 ops/s
Iteration  22: 220074.346 ops/s
Iteration  23: 220793.517 ops/s
Iteration  24: 221236.466 ops/s
Iteration  25: 220415.056 ops/s
Iteration  26: 221066.684 ops/s
Iteration  27: 221169.489 ops/s
Iteration  28: 221024.145 ops/s
Iteration  29: 220501.291 ops/s
Iteration  30: 221586.631 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsAnyIterable":
  220879.726 ±(99.9%) 289.219 ops/s [Average]
  (min, avg, max) = (220074.346, 220879.726, 221712.384), stdev = 432.890
  CI (99.9%): [220590.507, 221168.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  220879.726 ± 289.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643243.221 ops/s
# Warmup Iteration   2: 693319.033 ops/s
# Warmup Iteration   3: 844641.899 ops/s
# Warmup Iteration   4: 899153.805 ops/s
# Warmup Iteration   5: 900271.634 ops/s
# Warmup Iteration   6: 894642.526 ops/s
# Warmup Iteration   7: 903373.566 ops/s
# Warmup Iteration   8: 897918.636 ops/s
# Warmup Iteration   9: 904860.246 ops/s
# Warmup Iteration  10: 901470.909 ops/s
# Warmup Iteration  11: 897064.702 ops/s
# Warmup Iteration  12: 903341.050 ops/s
# Warmup Iteration  13: 805889.361 ops/s
# Warmup Iteration  14: 844312.270 ops/s
# Warmup Iteration  15: 897905.563 ops/s
# Warmup Iteration  16: 899661.646 ops/s
# Warmup Iteration  17: 951326.458 ops/s
# Warmup Iteration  18: 956478.757 ops/s
# Warmup Iteration  19: 952895.216 ops/s
# Warmup Iteration  20: 951861.021 ops/s
# Warmup Iteration  21: 952529.863 ops/s
# Warmup Iteration  22: 956939.466 ops/s
# Warmup Iteration  23: 947622.595 ops/s
# Warmup Iteration  24: 955221.831 ops/s
# Warmup Iteration  25: 952795.243 ops/s
# Warmup Iteration  26: 951372.882 ops/s
# Warmup Iteration  27: 954267.882 ops/s
# Warmup Iteration  28: 952025.048 ops/s
# Warmup Iteration  29: 951551.957 ops/s
# Warmup Iteration  30: 953602.030 ops/s
Iteration   1: 951678.621 ops/s
Iteration   2: 951355.295 ops/s
Iteration   3: 952787.593 ops/s
Iteration   4: 953683.391 ops/s
Iteration   5: 952019.444 ops/s
Iteration   6: 951038.692 ops/s
Iteration   7: 956164.949 ops/s
Iteration   8: 952217.436 ops/s
Iteration   9: 956764.504 ops/s
Iteration  10: 951936.752 ops/s
Iteration  11: 954442.341 ops/s
Iteration  12: 958374.970 ops/s
Iteration  13: 950106.782 ops/s
Iteration  14: 955774.431 ops/s
Iteration  15: 953676.221 ops/s
Iteration  16: 952464.641 ops/s
Iteration  17: 949419.959 ops/s
Iteration  18: 956684.152 ops/s
Iteration  19: 948608.572 ops/s
Iteration  20: 953913.208 ops/s
Iteration  21: 955470.766 ops/s
Iteration  22: 948853.791 ops/s
Iteration  23: 948775.932 ops/s
Iteration  24: 955243.847 ops/s
Iteration  25: 950780.963 ops/s
Iteration  26: 947812.586 ops/s
Iteration  27: 951707.957 ops/s
Iteration  28: 950248.841 ops/s
Iteration  29: 951965.311 ops/s
Iteration  30: 953704.616 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsBy":
  952589.219 ±(99.9%) 1813.833 ops/s [Average]
  (min, avg, max) = (947812.586, 952589.219, 958374.970), stdev = 2714.860
  CI (99.9%): [950775.386, 954403.052] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_containsBy  thrpt   30  952589.219 ± 1813.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169829.198 ops/s
# Warmup Iteration   2: 220246.889 ops/s
# Warmup Iteration   3: 270587.248 ops/s
# Warmup Iteration   4: 269844.514 ops/s
# Warmup Iteration   5: 271346.168 ops/s
# Warmup Iteration   6: 270634.764 ops/s
# Warmup Iteration   7: 270832.951 ops/s
# Warmup Iteration   8: 269387.025 ops/s
# Warmup Iteration   9: 232214.985 ops/s
# Warmup Iteration  10: 271516.877 ops/s
# Warmup Iteration  11: 270950.864 ops/s
# Warmup Iteration  12: 271083.019 ops/s
# Warmup Iteration  13: 271276.152 ops/s
# Warmup Iteration  14: 271398.192 ops/s
# Warmup Iteration  15: 271366.568 ops/s
# Warmup Iteration  16: 270215.865 ops/s
# Warmup Iteration  17: 270804.547 ops/s
# Warmup Iteration  18: 270867.105 ops/s
# Warmup Iteration  19: 270428.126 ops/s
# Warmup Iteration  20: 270419.801 ops/s
# Warmup Iteration  21: 270082.610 ops/s
# Warmup Iteration  22: 271147.637 ops/s
# Warmup Iteration  23: 270269.994 ops/s
# Warmup Iteration  24: 270516.871 ops/s
# Warmup Iteration  25: 270948.334 ops/s
# Warmup Iteration  26: 270892.304 ops/s
# Warmup Iteration  27: 270797.578 ops/s
# Warmup Iteration  28: 270802.843 ops/s
# Warmup Iteration  29: 270834.462 ops/s
# Warmup Iteration  30: 270012.903 ops/s
Iteration   1: 270989.294 ops/s
Iteration   2: 270264.076 ops/s
Iteration   3: 270742.981 ops/s
Iteration   4: 271348.866 ops/s
Iteration   5: 270687.420 ops/s
Iteration   6: 270640.205 ops/s
Iteration   7: 270835.338 ops/s
Iteration   8: 271519.489 ops/s
Iteration   9: 269203.314 ops/s
Iteration  10: 270766.878 ops/s
Iteration  11: 271117.789 ops/s
Iteration  12: 270236.574 ops/s
Iteration  13: 270462.084 ops/s
Iteration  14: 269333.629 ops/s
Iteration  15: 270142.256 ops/s
Iteration  16: 271503.780 ops/s
Iteration  17: 270255.005 ops/s
Iteration  18: 271031.613 ops/s
Iteration  19: 270171.522 ops/s
Iteration  20: 271052.492 ops/s
Iteration  21: 269709.142 ops/s
Iteration  22: 271124.506 ops/s
Iteration  23: 270847.301 ops/s
Iteration  24: 269664.649 ops/s
Iteration  25: 271650.840 ops/s
Iteration  26: 271104.504 ops/s
Iteration  27: 271254.859 ops/s
Iteration  28: 270685.064 ops/s
Iteration  29: 271078.987 ops/s
Iteration  30: 270886.748 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneCollection":
  270677.040 ±(99.9%) 419.085 ops/s [Average]
  (min, avg, max) = (269203.314, 270677.040, 271650.840), stdev = 627.267
  CI (99.9%): [270257.955, 271096.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  270677.040 ± 419.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152810.328 ops/s
# Warmup Iteration   2: 190300.779 ops/s
# Warmup Iteration   3: 242167.987 ops/s
# Warmup Iteration   4: 241135.594 ops/s
# Warmup Iteration   5: 242793.784 ops/s
# Warmup Iteration   6: 242218.862 ops/s
# Warmup Iteration   7: 242088.602 ops/s
# Warmup Iteration   8: 241897.284 ops/s
# Warmup Iteration   9: 212033.638 ops/s
# Warmup Iteration  10: 235219.823 ops/s
# Warmup Iteration  11: 242900.945 ops/s
# Warmup Iteration  12: 242472.124 ops/s
# Warmup Iteration  13: 242530.992 ops/s
# Warmup Iteration  14: 242811.086 ops/s
# Warmup Iteration  15: 242582.057 ops/s
# Warmup Iteration  16: 242345.711 ops/s
# Warmup Iteration  17: 242261.344 ops/s
# Warmup Iteration  18: 242579.572 ops/s
# Warmup Iteration  19: 242579.368 ops/s
# Warmup Iteration  20: 242470.775 ops/s
# Warmup Iteration  21: 241842.606 ops/s
# Warmup Iteration  22: 241188.156 ops/s
# Warmup Iteration  23: 242668.166 ops/s
# Warmup Iteration  24: 242881.803 ops/s
# Warmup Iteration  25: 242469.017 ops/s
# Warmup Iteration  26: 242618.326 ops/s
# Warmup Iteration  27: 242227.096 ops/s
# Warmup Iteration  28: 241596.306 ops/s
# Warmup Iteration  29: 242610.691 ops/s
# Warmup Iteration  30: 242125.831 ops/s
Iteration   1: 243372.271 ops/s
Iteration   2: 241996.625 ops/s
Iteration   3: 242317.967 ops/s
Iteration   4: 242422.919 ops/s
Iteration   5: 241817.633 ops/s
Iteration   6: 242576.056 ops/s
Iteration   7: 241250.778 ops/s
Iteration   8: 241819.126 ops/s
Iteration   9: 242578.200 ops/s
Iteration  10: 242474.947 ops/s
Iteration  11: 242456.633 ops/s
Iteration  12: 241889.074 ops/s
Iteration  13: 242577.956 ops/s
Iteration  14: 241474.558 ops/s
Iteration  15: 242551.890 ops/s
Iteration  16: 242570.931 ops/s
Iteration  17: 242610.021 ops/s
Iteration  18: 242729.302 ops/s
Iteration  19: 242676.061 ops/s
Iteration  20: 242374.501 ops/s
Iteration  21: 242717.729 ops/s
Iteration  22: 241921.140 ops/s
Iteration  23: 241979.024 ops/s
Iteration  24: 242475.978 ops/s
Iteration  25: 242548.587 ops/s
Iteration  26: 242341.669 ops/s
Iteration  27: 241552.919 ops/s
Iteration  28: 242542.235 ops/s
Iteration  29: 241968.904 ops/s
Iteration  30: 242185.590 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_containsNoneIterable":
  242292.374 ±(99.9%) 298.165 ops/s [Average]
  (min, avg, max) = (241250.778, 242292.374, 243372.271), stdev = 446.280
  CI (99.9%): [241994.209, 242590.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  242292.374 ± 298.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1055196.076 ops/s
# Warmup Iteration   2: 1687954.319 ops/s
# Warmup Iteration   3: 1945845.346 ops/s
# Warmup Iteration   4: 1957054.817 ops/s
# Warmup Iteration   5: 1960339.470 ops/s
# Warmup Iteration   6: 1710103.227 ops/s
# Warmup Iteration   7: 1878080.232 ops/s
# Warmup Iteration   8: 1962565.231 ops/s
# Warmup Iteration   9: 1960209.478 ops/s
# Warmup Iteration  10: 1957521.946 ops/s
# Warmup Iteration  11: 1961614.699 ops/s
# Warmup Iteration  12: 1956853.825 ops/s
# Warmup Iteration  13: 1964704.658 ops/s
# Warmup Iteration  14: 1958946.370 ops/s
# Warmup Iteration  15: 1963960.474 ops/s
# Warmup Iteration  16: 1960400.997 ops/s
# Warmup Iteration  17: 1967302.751 ops/s
# Warmup Iteration  18: 1962412.887 ops/s
# Warmup Iteration  19: 1962595.661 ops/s
# Warmup Iteration  20: 1961371.877 ops/s
# Warmup Iteration  21: 1962675.125 ops/s
# Warmup Iteration  22: 1961213.097 ops/s
# Warmup Iteration  23: 1959471.659 ops/s
# Warmup Iteration  24: 1961048.709 ops/s
# Warmup Iteration  25: 1960644.150 ops/s
# Warmup Iteration  26: 1961566.984 ops/s
# Warmup Iteration  27: 1959068.266 ops/s
# Warmup Iteration  28: 1959267.643 ops/s
# Warmup Iteration  29: 1958980.193 ops/s
# Warmup Iteration  30: 1954349.910 ops/s
Iteration   1: 1963084.940 ops/s
Iteration   2: 1961428.206 ops/s
Iteration   3: 1959137.230 ops/s
Iteration   4: 1948107.881 ops/s
Iteration   5: 1953097.547 ops/s
Iteration   6: 1961860.328 ops/s
Iteration   7: 1957302.120 ops/s
Iteration   8: 1961462.250 ops/s
Iteration   9: 1957686.007 ops/s
Iteration  10: 1949152.199 ops/s
Iteration  11: 1950876.108 ops/s
Iteration  12: 1954866.806 ops/s
Iteration  13: 1960500.373 ops/s
Iteration  14: 1962987.706 ops/s
Iteration  15: 1957576.482 ops/s
Iteration  16: 1962743.750 ops/s
Iteration  17: 1953657.206 ops/s
Iteration  18: 1962919.127 ops/s
Iteration  19: 1954258.047 ops/s
Iteration  20: 1957912.964 ops/s
Iteration  21: 1961086.322 ops/s
Iteration  22: 1959556.609 ops/s
Iteration  23: 1945979.188 ops/s
Iteration  24: 1961319.699 ops/s
Iteration  25: 1955486.753 ops/s
Iteration  26: 1964237.611 ops/s
Iteration  27: 1959816.134 ops/s
Iteration  28: 1952161.218 ops/s
Iteration  29: 1956135.666 ops/s
Iteration  30: 1963336.519 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_corresponds":
  1957657.766 ±(99.9%) 3320.966 ops/s [Average]
  (min, avg, max) = (1945979.188, 1957657.766, 1964237.611), stdev = 4970.666
  CI (99.9%): [1954336.801, 1960978.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_corresponds  thrpt   30  1957657.766 ± 3320.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4538259.723 ops/s
# Warmup Iteration   2: 7505178.288 ops/s
# Warmup Iteration   3: 8229667.585 ops/s
# Warmup Iteration   4: 8256429.611 ops/s
# Warmup Iteration   5: 8289423.265 ops/s
# Warmup Iteration   6: 6975101.945 ops/s
# Warmup Iteration   7: 8295147.702 ops/s
# Warmup Iteration   8: 8293152.347 ops/s
# Warmup Iteration   9: 8316193.576 ops/s
# Warmup Iteration  10: 8278044.162 ops/s
# Warmup Iteration  11: 8283177.626 ops/s
# Warmup Iteration  12: 8244177.890 ops/s
# Warmup Iteration  13: 8287252.994 ops/s
# Warmup Iteration  14: 8282610.350 ops/s
# Warmup Iteration  15: 8291551.428 ops/s
# Warmup Iteration  16: 8287208.213 ops/s
# Warmup Iteration  17: 14343163.290 ops/s
# Warmup Iteration  18: 14317734.730 ops/s
# Warmup Iteration  19: 14331320.746 ops/s
# Warmup Iteration  20: 14342251.380 ops/s
# Warmup Iteration  21: 14344852.657 ops/s
# Warmup Iteration  22: 14300224.568 ops/s
# Warmup Iteration  23: 14240753.694 ops/s
# Warmup Iteration  24: 14368954.474 ops/s
# Warmup Iteration  25: 14330134.550 ops/s
# Warmup Iteration  26: 14347599.824 ops/s
# Warmup Iteration  27: 14314180.727 ops/s
# Warmup Iteration  28: 14387296.163 ops/s
# Warmup Iteration  29: 14319524.792 ops/s
# Warmup Iteration  30: 14332333.176 ops/s
Iteration   1: 14360209.302 ops/s
Iteration   2: 14343571.936 ops/s
Iteration   3: 14394165.099 ops/s
Iteration   4: 14394104.196 ops/s
Iteration   5: 14360578.987 ops/s
Iteration   6: 14374487.108 ops/s
Iteration   7: 14313119.541 ops/s
Iteration   8: 14353582.166 ops/s
Iteration   9: 14332319.131 ops/s
Iteration  10: 14292653.045 ops/s
Iteration  11: 14352379.813 ops/s
Iteration  12: 14284994.685 ops/s
Iteration  13: 14346533.599 ops/s
Iteration  14: 14338999.911 ops/s
Iteration  15: 14368888.802 ops/s
Iteration  16: 14342085.468 ops/s
Iteration  17: 14399793.348 ops/s
Iteration  18: 14335244.623 ops/s
Iteration  19: 14365103.086 ops/s
Iteration  20: 14371488.126 ops/s
Iteration  21: 14412915.584 ops/s
Iteration  22: 14348874.020 ops/s
Iteration  23: 14355002.821 ops/s
Iteration  24: 14307746.501 ops/s
Iteration  25: 14362794.494 ops/s
Iteration  26: 14301783.392 ops/s
Iteration  27: 14358275.837 ops/s
Iteration  28: 14372535.218 ops/s
Iteration  29: 14347211.614 ops/s
Iteration  30: 14294029.783 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_count":
  14349515.708 ±(99.9%) 21440.772 ops/s [Average]
  (min, avg, max) = (14284994.685, 14349515.708, 14412915.584), stdev = 32091.540
  CI (99.9%): [14328074.936, 14370956.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_count  thrpt   30  14349515.708 ± 21440.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2029763.765 ops/s
# Warmup Iteration   2: 3623970.485 ops/s
# Warmup Iteration   3: 4304790.443 ops/s
# Warmup Iteration   4: 4326179.047 ops/s
# Warmup Iteration   5: 4326326.171 ops/s
# Warmup Iteration   6: 3513430.883 ops/s
# Warmup Iteration   7: 4329032.503 ops/s
# Warmup Iteration   8: 4325835.295 ops/s
# Warmup Iteration   9: 4337531.926 ops/s
# Warmup Iteration  10: 4337732.306 ops/s
# Warmup Iteration  11: 4329876.126 ops/s
# Warmup Iteration  12: 4327770.524 ops/s
# Warmup Iteration  13: 4328114.431 ops/s
# Warmup Iteration  14: 4331918.740 ops/s
# Warmup Iteration  15: 4342049.709 ops/s
# Warmup Iteration  16: 4321122.795 ops/s
# Warmup Iteration  17: 4322849.579 ops/s
# Warmup Iteration  18: 4325181.892 ops/s
# Warmup Iteration  19: 4324399.042 ops/s
# Warmup Iteration  20: 4336263.146 ops/s
# Warmup Iteration  21: 4324982.727 ops/s
# Warmup Iteration  22: 4320581.923 ops/s
# Warmup Iteration  23: 4318911.642 ops/s
# Warmup Iteration  24: 4325569.398 ops/s
# Warmup Iteration  25: 4332774.638 ops/s
# Warmup Iteration  26: 4330135.604 ops/s
# Warmup Iteration  27: 4333178.405 ops/s
# Warmup Iteration  28: 4326896.642 ops/s
# Warmup Iteration  29: 4335957.620 ops/s
# Warmup Iteration  30: 4319791.326 ops/s
Iteration   1: 4350431.747 ops/s
Iteration   2: 4323038.242 ops/s
Iteration   3: 4321062.029 ops/s
Iteration   4: 4318323.922 ops/s
Iteration   5: 4305502.839 ops/s
Iteration   6: 4334834.421 ops/s
Iteration   7: 4322921.308 ops/s
Iteration   8: 4319903.867 ops/s
Iteration   9: 4329744.213 ops/s
Iteration  10: 4308239.693 ops/s
Iteration  11: 4319156.892 ops/s
Iteration  12: 4309741.843 ops/s
Iteration  13: 4334425.263 ops/s
Iteration  14: 4318730.909 ops/s
Iteration  15: 4315813.367 ops/s
Iteration  16: 4347612.368 ops/s
Iteration  17: 4322381.032 ops/s
Iteration  18: 4337227.911 ops/s
Iteration  19: 4319715.470 ops/s
Iteration  20: 4322493.398 ops/s
Iteration  21: 4323442.939 ops/s
Iteration  22: 4331625.883 ops/s
Iteration  23: 4327764.554 ops/s
Iteration  24: 4319205.762 ops/s
Iteration  25: 4325005.155 ops/s
Iteration  26: 4325765.663 ops/s
Iteration  27: 4299789.771 ops/s
Iteration  28: 4315319.122 ops/s
Iteration  29: 4318988.445 ops/s
Iteration  30: 4339307.636 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countBy":
  4323583.855 ±(99.9%) 7547.365 ops/s [Average]
  (min, avg, max) = (4299789.771, 4323583.855, 4350431.747), stdev = 11296.541
  CI (99.9%): [4316036.491, 4331131.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_countBy  thrpt   30  4323583.855 ± 7547.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 277792.767 ops/s
# Warmup Iteration   2: 450945.673 ops/s
# Warmup Iteration   3: 543496.284 ops/s
# Warmup Iteration   4: 548389.479 ops/s
# Warmup Iteration   5: 546664.587 ops/s
# Warmup Iteration   6: 520013.192 ops/s
# Warmup Iteration   7: 478152.485 ops/s
# Warmup Iteration   8: 545897.615 ops/s
# Warmup Iteration   9: 547739.348 ops/s
# Warmup Iteration  10: 547399.759 ops/s
# Warmup Iteration  11: 545270.618 ops/s
# Warmup Iteration  12: 548047.056 ops/s
# Warmup Iteration  13: 547780.148 ops/s
# Warmup Iteration  14: 546939.299 ops/s
# Warmup Iteration  15: 547624.501 ops/s
# Warmup Iteration  16: 546765.395 ops/s
# Warmup Iteration  17: 547672.288 ops/s
# Warmup Iteration  18: 547337.142 ops/s
# Warmup Iteration  19: 547739.678 ops/s
# Warmup Iteration  20: 549533.322 ops/s
# Warmup Iteration  21: 548797.752 ops/s
# Warmup Iteration  22: 547392.877 ops/s
# Warmup Iteration  23: 548100.195 ops/s
# Warmup Iteration  24: 548665.442 ops/s
# Warmup Iteration  25: 548440.536 ops/s
# Warmup Iteration  26: 548679.627 ops/s
# Warmup Iteration  27: 547093.851 ops/s
# Warmup Iteration  28: 548375.389 ops/s
# Warmup Iteration  29: 547790.385 ops/s
# Warmup Iteration  30: 548089.047 ops/s
Iteration   1: 548219.028 ops/s
Iteration   2: 547923.290 ops/s
Iteration   3: 548741.431 ops/s
Iteration   4: 550045.855 ops/s
Iteration   5: 549618.867 ops/s
Iteration   6: 548777.561 ops/s
Iteration   7: 548140.843 ops/s
Iteration   8: 549478.565 ops/s
Iteration   9: 547684.744 ops/s
Iteration  10: 547749.456 ops/s
Iteration  11: 547103.788 ops/s
Iteration  12: 549467.033 ops/s
Iteration  13: 546639.574 ops/s
Iteration  14: 548728.871 ops/s
Iteration  15: 546993.015 ops/s
Iteration  16: 548212.998 ops/s
Iteration  17: 548395.823 ops/s
Iteration  18: 549650.318 ops/s
Iteration  19: 547943.629 ops/s
Iteration  20: 546471.034 ops/s
Iteration  21: 548777.724 ops/s
Iteration  22: 550954.991 ops/s
Iteration  23: 547071.487 ops/s
Iteration  24: 548990.165 ops/s
Iteration  25: 549600.383 ops/s
Iteration  26: 548095.964 ops/s
Iteration  27: 549387.696 ops/s
Iteration  28: 548925.740 ops/s
Iteration  29: 546363.073 ops/s
Iteration  30: 547509.739 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByEach":
  548388.756 ±(99.9%) 753.834 ops/s [Average]
  (min, avg, max) = (546363.073, 548388.756, 550954.991), stdev = 1128.303
  CI (99.9%): [547634.922, 549142.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_countByEach  thrpt   30  548388.756 ± 753.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1945178.404 ops/s
# Warmup Iteration   2: 3241220.291 ops/s
# Warmup Iteration   3: 3747664.241 ops/s
# Warmup Iteration   4: 3783387.463 ops/s
# Warmup Iteration   5: 3783823.596 ops/s
# Warmup Iteration   6: 3193484.707 ops/s
# Warmup Iteration   7: 3711724.303 ops/s
# Warmup Iteration   8: 3785233.133 ops/s
# Warmup Iteration   9: 3781143.645 ops/s
# Warmup Iteration  10: 3784722.398 ops/s
# Warmup Iteration  11: 3784731.652 ops/s
# Warmup Iteration  12: 3790520.110 ops/s
# Warmup Iteration  13: 3783449.848 ops/s
# Warmup Iteration  14: 3791056.581 ops/s
# Warmup Iteration  15: 3786396.709 ops/s
# Warmup Iteration  16: 3779744.688 ops/s
# Warmup Iteration  17: 3780098.754 ops/s
# Warmup Iteration  18: 3769836.925 ops/s
# Warmup Iteration  19: 3786080.549 ops/s
# Warmup Iteration  20: 3781052.675 ops/s
# Warmup Iteration  21: 3788597.291 ops/s
# Warmup Iteration  22: 3780795.023 ops/s
# Warmup Iteration  23: 3782339.960 ops/s
# Warmup Iteration  24: 3786136.427 ops/s
# Warmup Iteration  25: 3784659.338 ops/s
# Warmup Iteration  26: 3775148.049 ops/s
# Warmup Iteration  27: 3780097.947 ops/s
# Warmup Iteration  28: 3790193.807 ops/s
# Warmup Iteration  29: 3778463.004 ops/s
# Warmup Iteration  30: 3785088.008 ops/s
Iteration   1: 3770455.216 ops/s
Iteration   2: 3780447.236 ops/s
Iteration   3: 3784509.346 ops/s
Iteration   4: 3791791.107 ops/s
Iteration   5: 3777947.810 ops/s
Iteration   6: 3779296.222 ops/s
Iteration   7: 3776822.727 ops/s
Iteration   8: 3780486.280 ops/s
Iteration   9: 3792813.022 ops/s
Iteration  10: 3774223.718 ops/s
Iteration  11: 3773851.765 ops/s
Iteration  12: 3779382.859 ops/s
Iteration  13: 3778792.568 ops/s
Iteration  14: 3773905.649 ops/s
Iteration  15: 3792074.859 ops/s
Iteration  16: 3788036.354 ops/s
Iteration  17: 3785750.628 ops/s
Iteration  18: 3779155.813 ops/s
Iteration  19: 3779154.296 ops/s
Iteration  20: 3779230.830 ops/s
Iteration  21: 3783500.064 ops/s
Iteration  22: 3778086.914 ops/s
Iteration  23: 3784224.997 ops/s
Iteration  24: 3784236.617 ops/s
Iteration  25: 3782174.417 ops/s
Iteration  26: 3777086.994 ops/s
Iteration  27: 3778109.047 ops/s
Iteration  28: 3764340.983 ops/s
Iteration  29: 3783008.205 ops/s
Iteration  30: 3781772.689 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countByWith":
  3780488.974 ±(99.9%) 4122.676 ops/s [Average]
  (min, avg, max) = (3764340.983, 3780488.974, 3792813.022), stdev = 6170.627
  CI (99.9%): [3776366.299, 3784611.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_countByWith  thrpt   30  3780488.974 ± 4122.676  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7714488.014 ops/s
# Warmup Iteration   2: 18181389.180 ops/s
# Warmup Iteration   3: 18065168.543 ops/s
# Warmup Iteration   4: 15112968.320 ops/s
# Warmup Iteration   5: 18124359.077 ops/s
# Warmup Iteration   6: 18129652.002 ops/s
# Warmup Iteration   7: 18097192.627 ops/s
# Warmup Iteration   8: 18126268.457 ops/s
# Warmup Iteration   9: 18078975.390 ops/s
# Warmup Iteration  10: 18070877.805 ops/s
# Warmup Iteration  11: 18158581.028 ops/s
# Warmup Iteration  12: 18101502.489 ops/s
# Warmup Iteration  13: 18107453.251 ops/s
# Warmup Iteration  14: 18160370.395 ops/s
# Warmup Iteration  15: 18133793.967 ops/s
# Warmup Iteration  16: 18113364.942 ops/s
# Warmup Iteration  17: 18079382.466 ops/s
# Warmup Iteration  18: 18127189.225 ops/s
# Warmup Iteration  19: 18123013.680 ops/s
# Warmup Iteration  20: 18120609.444 ops/s
# Warmup Iteration  21: 18131981.814 ops/s
# Warmup Iteration  22: 18092208.953 ops/s
# Warmup Iteration  23: 18071066.508 ops/s
# Warmup Iteration  24: 18083768.580 ops/s
# Warmup Iteration  25: 18123449.737 ops/s
# Warmup Iteration  26: 18112015.790 ops/s
# Warmup Iteration  27: 18128752.497 ops/s
# Warmup Iteration  28: 18111713.054 ops/s
# Warmup Iteration  29: 18118557.325 ops/s
# Warmup Iteration  30: 18086506.932 ops/s
Iteration   1: 18082945.203 ops/s
Iteration   2: 18116986.588 ops/s
Iteration   3: 18088114.551 ops/s
Iteration   4: 18135643.369 ops/s
Iteration   5: 18132257.175 ops/s
Iteration   6: 18113849.984 ops/s
Iteration   7: 18125545.243 ops/s
Iteration   8: 18011782.129 ops/s
Iteration   9: 18114141.827 ops/s
Iteration  10: 18107466.879 ops/s
Iteration  11: 18116664.767 ops/s
Iteration  12: 18161604.553 ops/s
Iteration  13: 18072175.415 ops/s
Iteration  14: 18106986.215 ops/s
Iteration  15: 18095560.088 ops/s
Iteration  16: 18129525.547 ops/s
Iteration  17: 18061455.904 ops/s
Iteration  18: 18121836.176 ops/s
Iteration  19: 18175417.916 ops/s
Iteration  20: 18071967.842 ops/s
Iteration  21: 18160130.189 ops/s
Iteration  22: 18098302.225 ops/s
Iteration  23: 18069607.376 ops/s
Iteration  24: 18169397.102 ops/s
Iteration  25: 18131515.335 ops/s
Iteration  26: 18118637.710 ops/s
Iteration  27: 18065365.513 ops/s
Iteration  28: 18181487.434 ops/s
Iteration  29: 18155259.191 ops/s
Iteration  30: 18134161.160 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_countWith":
  18114193.020 ±(99.9%) 25682.881 ops/s [Average]
  (min, avg, max) = (18011782.129, 18114193.020, 18181487.434), stdev = 38440.931
  CI (99.9%): [18088510.139, 18139875.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_countWith  thrpt   30  18114193.020 ± 25682.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15610408.710 ops/s
# Warmup Iteration   2: 32825601.530 ops/s
# Warmup Iteration   3: 28071786.420 ops/s
# Warmup Iteration   4: 32920404.906 ops/s
# Warmup Iteration   5: 32725318.332 ops/s
# Warmup Iteration   6: 33132644.449 ops/s
# Warmup Iteration   7: 33193896.494 ops/s
# Warmup Iteration   8: 33179761.058 ops/s
# Warmup Iteration   9: 33146740.387 ops/s
# Warmup Iteration  10: 33171542.800 ops/s
# Warmup Iteration  11: 33141086.932 ops/s
# Warmup Iteration  12: 33295516.448 ops/s
# Warmup Iteration  13: 33213697.451 ops/s
# Warmup Iteration  14: 33295080.955 ops/s
# Warmup Iteration  15: 33207232.526 ops/s
# Warmup Iteration  16: 33226252.427 ops/s
# Warmup Iteration  17: 33220889.409 ops/s
# Warmup Iteration  18: 33230447.736 ops/s
# Warmup Iteration  19: 33072621.201 ops/s
# Warmup Iteration  20: 33191787.195 ops/s
# Warmup Iteration  21: 33171331.717 ops/s
# Warmup Iteration  22: 33226261.590 ops/s
# Warmup Iteration  23: 33159646.805 ops/s
# Warmup Iteration  24: 33211535.578 ops/s
# Warmup Iteration  25: 33188594.337 ops/s
# Warmup Iteration  26: 33249191.973 ops/s
# Warmup Iteration  27: 33281521.513 ops/s
# Warmup Iteration  28: 33190130.580 ops/s
# Warmup Iteration  29: 33167493.150 ops/s
# Warmup Iteration  30: 33209632.832 ops/s
Iteration   1: 33262424.350 ops/s
Iteration   2: 33212308.114 ops/s
Iteration   3: 33170858.346 ops/s
Iteration   4: 33038480.270 ops/s
Iteration   5: 33204777.525 ops/s
Iteration   6: 33279485.904 ops/s
Iteration   7: 33220879.776 ops/s
Iteration   8: 33184909.080 ops/s
Iteration   9: 33203068.836 ops/s
Iteration  10: 33204921.867 ops/s
Iteration  11: 33400501.806 ops/s
Iteration  12: 33160043.267 ops/s
Iteration  13: 33277364.503 ops/s
Iteration  14: 33116347.078 ops/s
Iteration  15: 33319462.127 ops/s
Iteration  16: 33119456.901 ops/s
Iteration  17: 33226085.133 ops/s
Iteration  18: 33319300.347 ops/s
Iteration  19: 33391053.888 ops/s
Iteration  20: 33161533.991 ops/s
Iteration  21: 33169481.806 ops/s
Iteration  22: 33207426.144 ops/s
Iteration  23: 33145827.904 ops/s
Iteration  24: 33215968.295 ops/s
Iteration  25: 33208824.543 ops/s
Iteration  26: 33259779.937 ops/s
Iteration  27: 33141242.712 ops/s
Iteration  28: 33158338.022 ops/s
Iteration  29: 33192106.949 ops/s
Iteration  30: 33211040.184 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detect":
  33212776.653 ±(99.9%) 51864.730 ops/s [Average]
  (min, avg, max) = (33038480.270, 33212776.653, 33400501.806), stdev = 77628.692
  CI (99.9%): [33160911.924, 33264641.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detect  thrpt   30  33212776.653 ± 51864.730  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15453986.353 ops/s
# Warmup Iteration   2: 31903472.950 ops/s
# Warmup Iteration   3: 26929510.840 ops/s
# Warmup Iteration   4: 31616731.305 ops/s
# Warmup Iteration   5: 31708257.461 ops/s
# Warmup Iteration   6: 31640239.790 ops/s
# Warmup Iteration   7: 31742491.495 ops/s
# Warmup Iteration   8: 31583275.423 ops/s
# Warmup Iteration   9: 31647515.284 ops/s
# Warmup Iteration  10: 31670318.204 ops/s
# Warmup Iteration  11: 31717340.898 ops/s
# Warmup Iteration  12: 31767020.707 ops/s
# Warmup Iteration  13: 31715483.119 ops/s
# Warmup Iteration  14: 31475868.722 ops/s
# Warmup Iteration  15: 31728614.194 ops/s
# Warmup Iteration  16: 31607083.176 ops/s
# Warmup Iteration  17: 31535689.276 ops/s
# Warmup Iteration  18: 31483815.208 ops/s
# Warmup Iteration  19: 31447418.800 ops/s
# Warmup Iteration  20: 31450007.722 ops/s
# Warmup Iteration  21: 31498537.019 ops/s
# Warmup Iteration  22: 31452874.696 ops/s
# Warmup Iteration  23: 31446362.391 ops/s
# Warmup Iteration  24: 31528401.419 ops/s
# Warmup Iteration  25: 31467520.293 ops/s
# Warmup Iteration  26: 31527728.462 ops/s
# Warmup Iteration  27: 31402971.379 ops/s
# Warmup Iteration  28: 31435566.852 ops/s
# Warmup Iteration  29: 31532487.049 ops/s
# Warmup Iteration  30: 31421258.197 ops/s
Iteration   1: 31524659.103 ops/s
Iteration   2: 31451568.278 ops/s
Iteration   3: 31522885.470 ops/s
Iteration   4: 31512110.424 ops/s
Iteration   5: 31455407.444 ops/s
Iteration   6: 31477521.404 ops/s
Iteration   7: 31522399.723 ops/s
Iteration   8: 31487746.741 ops/s
Iteration   9: 31441983.402 ops/s
Iteration  10: 31493980.943 ops/s
Iteration  11: 31383407.579 ops/s
Iteration  12: 31562574.902 ops/s
Iteration  13: 31463255.366 ops/s
Iteration  14: 31474621.880 ops/s
Iteration  15: 31472700.683 ops/s
Iteration  16: 31311008.087 ops/s
Iteration  17: 31489101.756 ops/s
Iteration  18: 31361920.624 ops/s
Iteration  19: 31455300.548 ops/s
Iteration  20: 31476213.999 ops/s
Iteration  21: 31416483.807 ops/s
Iteration  22: 31566249.809 ops/s
Iteration  23: 31500845.887 ops/s
Iteration  24: 31451259.898 ops/s
Iteration  25: 31275964.729 ops/s
Iteration  26: 31413824.877 ops/s
Iteration  27: 31510750.771 ops/s
Iteration  28: 31447933.426 ops/s
Iteration  29: 31375867.270 ops/s
Iteration  30: 31345782.197 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIfNone":
  31454844.367 ±(99.9%) 46436.483 ops/s [Average]
  (min, avg, max) = (31275964.729, 31454844.367, 31566249.809), stdev = 69503.947
  CI (99.9%): [31408407.884, 31501280.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detectIfNone  thrpt   30  31454844.367 ± 46436.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9436394.354 ops/s
# Warmup Iteration   2: 17931855.739 ops/s
# Warmup Iteration   3: 19118361.854 ops/s
# Warmup Iteration   4: 19966463.486 ops/s
# Warmup Iteration   5: 20025823.727 ops/s
# Warmup Iteration   6: 20097477.607 ops/s
# Warmup Iteration   7: 20060424.222 ops/s
# Warmup Iteration   8: 19999932.719 ops/s
# Warmup Iteration   9: 20060611.890 ops/s
# Warmup Iteration  10: 20058059.889 ops/s
# Warmup Iteration  11: 20095574.781 ops/s
# Warmup Iteration  12: 20018160.595 ops/s
# Warmup Iteration  13: 20097879.479 ops/s
# Warmup Iteration  14: 20039226.492 ops/s
# Warmup Iteration  15: 20026570.377 ops/s
# Warmup Iteration  16: 20102913.756 ops/s
# Warmup Iteration  17: 20090197.069 ops/s
# Warmup Iteration  18: 20113400.496 ops/s
# Warmup Iteration  19: 20010814.554 ops/s
# Warmup Iteration  20: 20062571.535 ops/s
# Warmup Iteration  21: 20071903.409 ops/s
# Warmup Iteration  22: 20041235.269 ops/s
# Warmup Iteration  23: 19955965.599 ops/s
# Warmup Iteration  24: 20009080.244 ops/s
# Warmup Iteration  25: 20137511.271 ops/s
# Warmup Iteration  26: 20095988.290 ops/s
# Warmup Iteration  27: 20162192.154 ops/s
# Warmup Iteration  28: 20073407.045 ops/s
# Warmup Iteration  29: 20067483.029 ops/s
# Warmup Iteration  30: 20041635.069 ops/s
Iteration   1: 19996852.331 ops/s
Iteration   2: 20032204.011 ops/s
Iteration   3: 20043831.507 ops/s
Iteration   4: 19984559.743 ops/s
Iteration   5: 20169674.614 ops/s
Iteration   6: 20155975.836 ops/s
Iteration   7: 20078904.988 ops/s
Iteration   8: 20058111.667 ops/s
Iteration   9: 20038276.453 ops/s
Iteration  10: 19932096.423 ops/s
Iteration  11: 19944554.131 ops/s
Iteration  12: 20004644.257 ops/s
Iteration  13: 20049643.485 ops/s
Iteration  14: 20114713.963 ops/s
Iteration  15: 19961229.467 ops/s
Iteration  16: 20110639.026 ops/s
Iteration  17: 19953347.289 ops/s
Iteration  18: 20143153.986 ops/s
Iteration  19: 19975603.603 ops/s
Iteration  20: 20122775.772 ops/s
Iteration  21: 20142274.373 ops/s
Iteration  22: 20130154.423 ops/s
Iteration  23: 20132670.466 ops/s
Iteration  24: 20102740.689 ops/s
Iteration  25: 20130317.419 ops/s
Iteration  26: 20157718.353 ops/s
Iteration  27: 20054662.688 ops/s
Iteration  28: 19960489.798 ops/s
Iteration  29: 20032432.356 ops/s
Iteration  30: 20119498.797 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectIndex":
  20061125.064 ±(99.9%) 49283.116 ops/s [Average]
  (min, avg, max) = (19932096.423, 20061125.064, 20169674.614), stdev = 73764.654
  CI (99.9%): [20011841.948, 20110408.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detectIndex  thrpt   30  20061125.064 ± 49283.116  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9439541.362 ops/s
# Warmup Iteration   2: 18000524.113 ops/s
# Warmup Iteration   3: 19526104.039 ops/s
# Warmup Iteration   4: 20120111.381 ops/s
# Warmup Iteration   5: 20180419.537 ops/s
# Warmup Iteration   6: 20227151.878 ops/s
# Warmup Iteration   7: 20283490.710 ops/s
# Warmup Iteration   8: 20146291.060 ops/s
# Warmup Iteration   9: 20291935.621 ops/s
# Warmup Iteration  10: 20253415.607 ops/s
# Warmup Iteration  11: 20280962.235 ops/s
# Warmup Iteration  12: 20304111.052 ops/s
# Warmup Iteration  13: 20263314.530 ops/s
# Warmup Iteration  14: 20299731.068 ops/s
# Warmup Iteration  15: 20202670.665 ops/s
# Warmup Iteration  16: 20175708.719 ops/s
# Warmup Iteration  17: 20268431.431 ops/s
# Warmup Iteration  18: 20068130.341 ops/s
# Warmup Iteration  19: 19445690.127 ops/s
# Warmup Iteration  20: 20204540.219 ops/s
# Warmup Iteration  21: 20169051.043 ops/s
# Warmup Iteration  22: 20148846.096 ops/s
# Warmup Iteration  23: 20261596.971 ops/s
# Warmup Iteration  24: 20188045.787 ops/s
# Warmup Iteration  25: 20172353.191 ops/s
# Warmup Iteration  26: 20263619.237 ops/s
# Warmup Iteration  27: 20317127.509 ops/s
# Warmup Iteration  28: 20289028.737 ops/s
# Warmup Iteration  29: 20279140.717 ops/s
# Warmup Iteration  30: 20267968.681 ops/s
Iteration   1: 20231659.831 ops/s
Iteration   2: 20162698.844 ops/s
Iteration   3: 20271479.259 ops/s
Iteration   4: 20194724.837 ops/s
Iteration   5: 20199565.919 ops/s
Iteration   6: 20269609.642 ops/s
Iteration   7: 20294705.413 ops/s
Iteration   8: 20281253.809 ops/s
Iteration   9: 20339733.153 ops/s
Iteration  10: 20324584.774 ops/s
Iteration  11: 20361786.018 ops/s
Iteration  12: 20319337.372 ops/s
Iteration  13: 20285497.363 ops/s
Iteration  14: 20227729.386 ops/s
Iteration  15: 20228964.384 ops/s
Iteration  16: 20201269.205 ops/s
Iteration  17: 20028228.264 ops/s
Iteration  18: 20294588.264 ops/s
Iteration  19: 20244132.411 ops/s
Iteration  20: 20253466.034 ops/s
Iteration  21: 20318245.421 ops/s
Iteration  22: 20240178.082 ops/s
Iteration  23: 20368202.362 ops/s
Iteration  24: 20281299.123 ops/s
Iteration  25: 20261062.702 ops/s
Iteration  26: 20278415.126 ops/s
Iteration  27: 20270549.286 ops/s
Iteration  28: 20375395.787 ops/s
Iteration  29: 20367274.286 ops/s
Iteration  30: 20234358.273 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectLastIndex":
  20266999.821 ±(99.9%) 47437.296 ops/s [Average]
  (min, avg, max) = (20028228.264, 20266999.821, 20375395.787), stdev = 71001.916
  CI (99.9%): [20219562.525, 20314437.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  20266999.821 ± 47437.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699598.300 ops/s
# Warmup Iteration   2: 736937.835 ops/s
# Warmup Iteration   3: 962539.125 ops/s
# Warmup Iteration   4: 988626.950 ops/s
# Warmup Iteration   5: 987296.840 ops/s
# Warmup Iteration   6: 981817.086 ops/s
# Warmup Iteration   7: 987693.534 ops/s
# Warmup Iteration   8: 988830.651 ops/s
# Warmup Iteration   9: 986631.042 ops/s
# Warmup Iteration  10: 987305.773 ops/s
# Warmup Iteration  11: 989878.951 ops/s
# Warmup Iteration  12: 830976.269 ops/s
# Warmup Iteration  13: 981429.942 ops/s
# Warmup Iteration  14: 987529.341 ops/s
# Warmup Iteration  15: 986650.329 ops/s
# Warmup Iteration  16: 987962.155 ops/s
# Warmup Iteration  17: 1047847.018 ops/s
# Warmup Iteration  18: 1049080.046 ops/s
# Warmup Iteration  19: 1047399.033 ops/s
# Warmup Iteration  20: 1046009.323 ops/s
# Warmup Iteration  21: 1043505.861 ops/s
# Warmup Iteration  22: 1047132.071 ops/s
# Warmup Iteration  23: 1045559.397 ops/s
# Warmup Iteration  24: 1046933.744 ops/s
# Warmup Iteration  25: 1048585.193 ops/s
# Warmup Iteration  26: 1049266.489 ops/s
# Warmup Iteration  27: 1046614.041 ops/s
# Warmup Iteration  28: 1045280.631 ops/s
# Warmup Iteration  29: 1047482.558 ops/s
# Warmup Iteration  30: 1047510.607 ops/s
Iteration   1: 1043797.089 ops/s
Iteration   2: 1047023.582 ops/s
Iteration   3: 1046389.914 ops/s
Iteration   4: 1052374.098 ops/s
Iteration   5: 1041667.831 ops/s
Iteration   6: 1047062.753 ops/s
Iteration   7: 1046665.526 ops/s
Iteration   8: 1044179.158 ops/s
Iteration   9: 1045977.738 ops/s
Iteration  10: 1045322.994 ops/s
Iteration  11: 1047201.107 ops/s
Iteration  12: 1045056.988 ops/s
Iteration  13: 1045489.362 ops/s
Iteration  14: 1047208.063 ops/s
Iteration  15: 1048561.685 ops/s
Iteration  16: 1042674.859 ops/s
Iteration  17: 1042559.068 ops/s
Iteration  18: 1047601.767 ops/s
Iteration  19: 1052793.290 ops/s
Iteration  20: 1047085.022 ops/s
Iteration  21: 1047099.400 ops/s
Iteration  22: 1046963.368 ops/s
Iteration  23: 1045022.623 ops/s
Iteration  24: 1044495.305 ops/s
Iteration  25: 1044285.977 ops/s
Iteration  26: 1050369.870 ops/s
Iteration  27: 1048771.295 ops/s
Iteration  28: 1046098.856 ops/s
Iteration  29: 1044430.166 ops/s
Iteration  30: 1044556.414 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectOptional":
  1046292.839 ±(99.9%) 1715.758 ops/s [Average]
  (min, avg, max) = (1041667.831, 1046292.839, 1052793.290), stdev = 2568.066
  CI (99.9%): [1044577.081, 1048008.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_detectOptional  thrpt   30  1046292.839 ± 1715.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16515850.930 ops/s
# Warmup Iteration   2: 34834767.964 ops/s
# Warmup Iteration   3: 29309282.890 ops/s
# Warmup Iteration   4: 34623129.083 ops/s
# Warmup Iteration   5: 34681238.522 ops/s
# Warmup Iteration   6: 34543187.021 ops/s
# Warmup Iteration   7: 34659343.710 ops/s
# Warmup Iteration   8: 34660569.486 ops/s
# Warmup Iteration   9: 34651485.792 ops/s
# Warmup Iteration  10: 34662535.662 ops/s
# Warmup Iteration  11: 34843732.636 ops/s
# Warmup Iteration  12: 34627372.160 ops/s
# Warmup Iteration  13: 34702093.189 ops/s
# Warmup Iteration  14: 34674419.091 ops/s
# Warmup Iteration  15: 34732450.896 ops/s
# Warmup Iteration  16: 34710861.526 ops/s
# Warmup Iteration  17: 34686081.967 ops/s
# Warmup Iteration  18: 34600160.762 ops/s
# Warmup Iteration  19: 34701948.282 ops/s
# Warmup Iteration  20: 34749789.824 ops/s
# Warmup Iteration  21: 34687182.237 ops/s
# Warmup Iteration  22: 34747889.719 ops/s
# Warmup Iteration  23: 34611413.961 ops/s
# Warmup Iteration  24: 34771880.667 ops/s
# Warmup Iteration  25: 34820265.872 ops/s
# Warmup Iteration  26: 34736952.107 ops/s
# Warmup Iteration  27: 34682356.191 ops/s
# Warmup Iteration  28: 34670746.329 ops/s
# Warmup Iteration  29: 34773742.221 ops/s
# Warmup Iteration  30: 34724068.226 ops/s
Iteration   1: 34704673.247 ops/s
Iteration   2: 34794579.869 ops/s
Iteration   3: 34504604.973 ops/s
Iteration   4: 34627545.985 ops/s
Iteration   5: 34628018.776 ops/s
Iteration   6: 34682893.601 ops/s
Iteration   7: 34745856.191 ops/s
Iteration   8: 34491488.470 ops/s
Iteration   9: 34517294.183 ops/s
Iteration  10: 34677412.919 ops/s
Iteration  11: 34496806.901 ops/s
Iteration  12: 34778506.388 ops/s
Iteration  13: 34519673.253 ops/s
Iteration  14: 34602461.965 ops/s
Iteration  15: 34795048.055 ops/s
Iteration  16: 34443210.072 ops/s
Iteration  17: 34689309.201 ops/s
Iteration  18: 34669139.453 ops/s
Iteration  19: 34821087.665 ops/s
Iteration  20: 34800812.009 ops/s
Iteration  21: 34688962.503 ops/s
Iteration  22: 34779250.348 ops/s
Iteration  23: 34501164.614 ops/s
Iteration  24: 34555386.692 ops/s
Iteration  25: 34788196.615 ops/s
Iteration  26: 34666668.530 ops/s
Iteration  27: 34750915.242 ops/s
Iteration  28: 34629340.853 ops/s
Iteration  29: 34816918.012 ops/s
Iteration  30: 34770667.386 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWith":
  34664596.466 ±(99.9%) 77684.952 ops/s [Average]
  (min, avg, max) = (34443210.072, 34664596.466, 34821087.665), stdev = 116275.188
  CI (99.9%): [34586911.513, 34742281.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detectWith  thrpt   30  34664596.466 ± 77684.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7984122.758 ops/s
# Warmup Iteration   2: 16866099.954 ops/s
# Warmup Iteration   3: 17502870.370 ops/s
# Warmup Iteration   4: 14747576.829 ops/s
# Warmup Iteration   5: 17617119.012 ops/s
# Warmup Iteration   6: 17613194.911 ops/s
# Warmup Iteration   7: 17620205.012 ops/s
# Warmup Iteration   8: 17690443.565 ops/s
# Warmup Iteration   9: 17651345.092 ops/s
# Warmup Iteration  10: 17651196.369 ops/s
# Warmup Iteration  11: 17650110.611 ops/s
# Warmup Iteration  12: 17656523.329 ops/s
# Warmup Iteration  13: 17693085.906 ops/s
# Warmup Iteration  14: 17614788.641 ops/s
# Warmup Iteration  15: 17636525.016 ops/s
# Warmup Iteration  16: 17642817.961 ops/s
# Warmup Iteration  17: 17601297.149 ops/s
# Warmup Iteration  18: 17509986.539 ops/s
# Warmup Iteration  19: 17601701.635 ops/s
# Warmup Iteration  20: 17596787.558 ops/s
# Warmup Iteration  21: 17544851.773 ops/s
# Warmup Iteration  22: 17567489.373 ops/s
# Warmup Iteration  23: 17610513.379 ops/s
# Warmup Iteration  24: 17623032.766 ops/s
# Warmup Iteration  25: 17593495.684 ops/s
# Warmup Iteration  26: 17578663.041 ops/s
# Warmup Iteration  27: 17569018.343 ops/s
# Warmup Iteration  28: 17622462.864 ops/s
# Warmup Iteration  29: 17567283.704 ops/s
# Warmup Iteration  30: 17596683.562 ops/s
Iteration   1: 17590034.780 ops/s
Iteration   2: 17548697.185 ops/s
Iteration   3: 17531328.811 ops/s
Iteration   4: 17543096.046 ops/s
Iteration   5: 17465262.079 ops/s
Iteration   6: 17411627.281 ops/s
Iteration   7: 17552424.411 ops/s
Iteration   8: 17541370.907 ops/s
Iteration   9: 17590138.597 ops/s
Iteration  10: 17548631.979 ops/s
Iteration  11: 17549636.689 ops/s
Iteration  12: 17587421.423 ops/s
Iteration  13: 17547470.841 ops/s
Iteration  14: 17567080.047 ops/s
Iteration  15: 17548574.316 ops/s
Iteration  16: 17635181.456 ops/s
Iteration  17: 17555757.483 ops/s
Iteration  18: 17649530.895 ops/s
Iteration  19: 17560382.237 ops/s
Iteration  20: 17530544.200 ops/s
Iteration  21: 17580458.048 ops/s
Iteration  22: 17619391.952 ops/s
Iteration  23: 17558598.087 ops/s
Iteration  24: 17597402.867 ops/s
Iteration  25: 17606793.854 ops/s
Iteration  26: 17618941.897 ops/s
Iteration  27: 17634101.262 ops/s
Iteration  28: 17587580.473 ops/s
Iteration  29: 17603957.335 ops/s
Iteration  30: 17574473.373 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithIfNoneBlock":
  17567863.027 ±(99.9%) 32321.239 ops/s [Average]
  (min, avg, max) = (17411627.281, 17567863.027, 17649530.895), stdev = 48376.912
  CI (99.9%): [17535541.788, 17600184.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  17567863.027 ± 32321.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705164.084 ops/s
# Warmup Iteration   2: 743938.975 ops/s
# Warmup Iteration   3: 964238.960 ops/s
# Warmup Iteration   4: 988500.196 ops/s
# Warmup Iteration   5: 988727.049 ops/s
# Warmup Iteration   6: 990717.373 ops/s
# Warmup Iteration   7: 989386.835 ops/s
# Warmup Iteration   8: 990856.375 ops/s
# Warmup Iteration   9: 990493.817 ops/s
# Warmup Iteration  10: 990274.727 ops/s
# Warmup Iteration  11: 991803.944 ops/s
# Warmup Iteration  12: 828336.563 ops/s
# Warmup Iteration  13: 991022.085 ops/s
# Warmup Iteration  14: 991677.272 ops/s
# Warmup Iteration  15: 989784.753 ops/s
# Warmup Iteration  16: 992747.557 ops/s
# Warmup Iteration  17: 1054103.134 ops/s
# Warmup Iteration  18: 1055887.633 ops/s
# Warmup Iteration  19: 1052542.098 ops/s
# Warmup Iteration  20: 1049996.186 ops/s
# Warmup Iteration  21: 1053747.958 ops/s
# Warmup Iteration  22: 1052955.645 ops/s
# Warmup Iteration  23: 1048465.142 ops/s
# Warmup Iteration  24: 1050581.321 ops/s
# Warmup Iteration  25: 1054675.576 ops/s
# Warmup Iteration  26: 1051336.557 ops/s
# Warmup Iteration  27: 1049237.263 ops/s
# Warmup Iteration  28: 1053970.426 ops/s
# Warmup Iteration  29: 1051731.364 ops/s
# Warmup Iteration  30: 1049999.358 ops/s
Iteration   1: 1054095.104 ops/s
Iteration   2: 1052428.820 ops/s
Iteration   3: 1051952.441 ops/s
Iteration   4: 1051880.272 ops/s
Iteration   5: 1055781.986 ops/s
Iteration   6: 1053707.287 ops/s
Iteration   7: 1051048.336 ops/s
Iteration   8: 1051962.482 ops/s
Iteration   9: 1051503.608 ops/s
Iteration  10: 1054335.003 ops/s
Iteration  11: 1052892.339 ops/s
Iteration  12: 1051500.225 ops/s
Iteration  13: 1052947.006 ops/s
Iteration  14: 1054513.462 ops/s
Iteration  15: 1050714.473 ops/s
Iteration  16: 1050046.322 ops/s
Iteration  17: 1054982.302 ops/s
Iteration  18: 1053538.210 ops/s
Iteration  19: 1052556.559 ops/s
Iteration  20: 1050260.911 ops/s
Iteration  21: 1051793.517 ops/s
Iteration  22: 1058065.914 ops/s
Iteration  23: 1053608.606 ops/s
Iteration  24: 1060492.684 ops/s
Iteration  25: 1053029.084 ops/s
Iteration  26: 1053718.512 ops/s
Iteration  27: 1051235.478 ops/s
Iteration  28: 1051028.187 ops/s
Iteration  29: 1053815.358 ops/s
Iteration  30: 1053542.566 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_detectWithOptional":
  1053099.235 ±(99.9%) 1484.935 ops/s [Average]
  (min, avg, max) = (1050046.322, 1053099.235, 1060492.684), stdev = 2222.580
  CI (99.9%): [1051614.300, 1054584.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_detectWithOptional  thrpt   30  1053099.235 ± 1484.935  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1565135.474 ops/s
# Warmup Iteration   2: 3871559.772 ops/s
# Warmup Iteration   3: 3275459.143 ops/s
# Warmup Iteration   4: 3926622.396 ops/s
# Warmup Iteration   5: 3924355.452 ops/s
# Warmup Iteration   6: 3925965.653 ops/s
# Warmup Iteration   7: 3924580.909 ops/s
# Warmup Iteration   8: 3915749.422 ops/s
# Warmup Iteration   9: 3929793.161 ops/s
# Warmup Iteration  10: 3912832.178 ops/s
# Warmup Iteration  11: 3921856.842 ops/s
# Warmup Iteration  12: 3922071.441 ops/s
# Warmup Iteration  13: 3926756.381 ops/s
# Warmup Iteration  14: 3931386.155 ops/s
# Warmup Iteration  15: 3926114.823 ops/s
# Warmup Iteration  16: 3918778.185 ops/s
# Warmup Iteration  17: 3917190.127 ops/s
# Warmup Iteration  18: 3920687.510 ops/s
# Warmup Iteration  19: 3917714.364 ops/s
# Warmup Iteration  20: 3907971.249 ops/s
# Warmup Iteration  21: 3922356.791 ops/s
# Warmup Iteration  22: 3928525.200 ops/s
# Warmup Iteration  23: 3915584.140 ops/s
# Warmup Iteration  24: 3932569.798 ops/s
# Warmup Iteration  25: 3920308.917 ops/s
# Warmup Iteration  26: 3919511.997 ops/s
# Warmup Iteration  27: 3915486.580 ops/s
# Warmup Iteration  28: 3932918.473 ops/s
# Warmup Iteration  29: 3931828.804 ops/s
# Warmup Iteration  30: 3921345.628 ops/s
Iteration   1: 3913464.925 ops/s
Iteration   2: 3919652.189 ops/s
Iteration   3: 3922379.944 ops/s
Iteration   4: 3921425.504 ops/s
Iteration   5: 3921875.787 ops/s
Iteration   6: 3935853.211 ops/s
Iteration   7: 3925408.573 ops/s
Iteration   8: 3917431.370 ops/s
Iteration   9: 3928380.963 ops/s
Iteration  10: 3908016.398 ops/s
Iteration  11: 3914144.786 ops/s
Iteration  12: 3908587.847 ops/s
Iteration  13: 3916043.333 ops/s
Iteration  14: 3922013.347 ops/s
Iteration  15: 3927708.848 ops/s
Iteration  16: 3911788.494 ops/s
Iteration  17: 3916122.661 ops/s
Iteration  18: 3907945.628 ops/s
Iteration  19: 3933867.851 ops/s
Iteration  20: 3921555.842 ops/s
Iteration  21: 3927256.320 ops/s
Iteration  22: 3896194.578 ops/s
Iteration  23: 3934044.323 ops/s
Iteration  24: 3936116.648 ops/s
Iteration  25: 3926418.214 ops/s
Iteration  26: 3919282.609 ops/s
Iteration  27: 3919720.946 ops/s
Iteration  28: 3933726.059 ops/s
Iteration  29: 3923905.910 ops/s
Iteration  30: 3918874.701 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinct":
  3920973.594 ±(99.9%) 6222.903 ops/s [Average]
  (min, avg, max) = (3896194.578, 3920973.594, 3936116.648), stdev = 9314.148
  CI (99.9%): [3914750.691, 3927196.496] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_distinct  thrpt   30  3920973.594 ± 6222.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1189282.408 ops/s
# Warmup Iteration   2: 2599438.066 ops/s
# Warmup Iteration   3: 2751850.088 ops/s
# Warmup Iteration   4: 2703577.608 ops/s
# Warmup Iteration   5: 2335958.266 ops/s
# Warmup Iteration   6: 2769190.083 ops/s
# Warmup Iteration   7: 2770733.347 ops/s
# Warmup Iteration   8: 2769691.608 ops/s
# Warmup Iteration   9: 2772377.194 ops/s
# Warmup Iteration  10: 2767406.325 ops/s
# Warmup Iteration  11: 2770822.152 ops/s
# Warmup Iteration  12: 2762904.200 ops/s
# Warmup Iteration  13: 2770175.979 ops/s
# Warmup Iteration  14: 2768837.658 ops/s
# Warmup Iteration  15: 2773527.948 ops/s
# Warmup Iteration  16: 2771496.847 ops/s
# Warmup Iteration  17: 2767645.259 ops/s
# Warmup Iteration  18: 2773964.944 ops/s
# Warmup Iteration  19: 2769328.426 ops/s
# Warmup Iteration  20: 2767495.753 ops/s
# Warmup Iteration  21: 2772217.845 ops/s
# Warmup Iteration  22: 2769660.682 ops/s
# Warmup Iteration  23: 2765716.443 ops/s
# Warmup Iteration  24: 2771554.625 ops/s
# Warmup Iteration  25: 2773647.089 ops/s
# Warmup Iteration  26: 2770054.954 ops/s
# Warmup Iteration  27: 2771006.707 ops/s
# Warmup Iteration  28: 2768048.428 ops/s
# Warmup Iteration  29: 2772705.547 ops/s
# Warmup Iteration  30: 2774422.665 ops/s
Iteration   1: 2765771.761 ops/s
Iteration   2: 2771668.495 ops/s
Iteration   3: 2772455.893 ops/s
Iteration   4: 2770768.640 ops/s
Iteration   5: 2753717.592 ops/s
Iteration   6: 2775872.086 ops/s
Iteration   7: 2770127.200 ops/s
Iteration   8: 2771184.009 ops/s
Iteration   9: 2763567.369 ops/s
Iteration  10: 2769854.356 ops/s
Iteration  11: 2777609.455 ops/s
Iteration  12: 2779302.333 ops/s
Iteration  13: 2776780.515 ops/s
Iteration  14: 2764342.903 ops/s
Iteration  15: 2775462.137 ops/s
Iteration  16: 2765880.811 ops/s
Iteration  17: 2766373.266 ops/s
Iteration  18: 2768106.910 ops/s
Iteration  19: 2764787.574 ops/s
Iteration  20: 2774534.862 ops/s
Iteration  21: 2757507.009 ops/s
Iteration  22: 2771213.034 ops/s
Iteration  23: 2762326.522 ops/s
Iteration  24: 2771923.826 ops/s
Iteration  25: 2765306.081 ops/s
Iteration  26: 2777089.064 ops/s
Iteration  27: 2773648.061 ops/s
Iteration  28: 2771508.512 ops/s
Iteration  29: 2771337.655 ops/s
Iteration  30: 2766451.006 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctBy":
  2769549.298 ±(99.9%) 3961.714 ops/s [Average]
  (min, avg, max) = (2753717.592, 2769549.298, 2779302.333), stdev = 5929.708
  CI (99.9%): [2765587.583, 2773511.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_distinctBy  thrpt   30  2769549.298 ± 3961.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212235.915 ops/s
# Warmup Iteration   2: 2681941.537 ops/s
# Warmup Iteration   3: 2813045.960 ops/s
# Warmup Iteration   4: 2638880.842 ops/s
# Warmup Iteration   5: 2529440.162 ops/s
# Warmup Iteration   6: 2866248.254 ops/s
# Warmup Iteration   7: 2860867.887 ops/s
# Warmup Iteration   8: 2850627.358 ops/s
# Warmup Iteration   9: 2860104.994 ops/s
# Warmup Iteration  10: 2853203.004 ops/s
# Warmup Iteration  11: 2853426.442 ops/s
# Warmup Iteration  12: 2860853.467 ops/s
# Warmup Iteration  13: 2848113.567 ops/s
# Warmup Iteration  14: 2856618.898 ops/s
# Warmup Iteration  15: 2849415.512 ops/s
# Warmup Iteration  16: 2849047.645 ops/s
# Warmup Iteration  17: 2834446.920 ops/s
# Warmup Iteration  18: 2829527.401 ops/s
# Warmup Iteration  19: 2834809.614 ops/s
# Warmup Iteration  20: 2837430.592 ops/s
# Warmup Iteration  21: 2833629.326 ops/s
# Warmup Iteration  22: 2842235.433 ops/s
# Warmup Iteration  23: 2837656.031 ops/s
# Warmup Iteration  24: 2832672.208 ops/s
# Warmup Iteration  25: 2831612.206 ops/s
# Warmup Iteration  26: 2837603.782 ops/s
# Warmup Iteration  27: 2840059.364 ops/s
# Warmup Iteration  28: 2828960.532 ops/s
# Warmup Iteration  29: 2836529.556 ops/s
# Warmup Iteration  30: 2829620.116 ops/s
Iteration   1: 2832963.044 ops/s
Iteration   2: 2828533.919 ops/s
Iteration   3: 2841387.561 ops/s
Iteration   4: 2833047.699 ops/s
Iteration   5: 2831799.903 ops/s
Iteration   6: 2838779.014 ops/s
Iteration   7: 2842491.838 ops/s
Iteration   8: 2847135.272 ops/s
Iteration   9: 2833382.233 ops/s
Iteration  10: 2828285.203 ops/s
Iteration  11: 2838553.445 ops/s
Iteration  12: 2841625.167 ops/s
Iteration  13: 2836693.574 ops/s
Iteration  14: 2834340.364 ops/s
Iteration  15: 2829745.419 ops/s
Iteration  16: 2826442.883 ops/s
Iteration  17: 2828704.409 ops/s
Iteration  18: 2831261.867 ops/s
Iteration  19: 2841336.046 ops/s
Iteration  20: 2832348.696 ops/s
Iteration  21: 2825553.366 ops/s
Iteration  22: 2822990.929 ops/s
Iteration  23: 2835313.884 ops/s
Iteration  24: 2839640.507 ops/s
Iteration  25: 2834227.145 ops/s
Iteration  26: 2842705.310 ops/s
Iteration  27: 2830528.981 ops/s
Iteration  28: 2835642.580 ops/s
Iteration  29: 2831565.286 ops/s
Iteration  30: 2828161.757 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2834172.910 ±(99.9%) 3925.511 ops/s [Average]
  (min, avg, max) = (2822990.929, 2834172.910, 2847135.272), stdev = 5875.521
  CI (99.9%): [2830247.399, 2838098.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2834172.910 ± 3925.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1630767.324 ops/s
# Warmup Iteration   2: 3813649.569 ops/s
# Warmup Iteration   3: 4173619.921 ops/s
# Warmup Iteration   4: 4198313.132 ops/s
# Warmup Iteration   5: 3471577.827 ops/s
# Warmup Iteration   6: 4209746.279 ops/s
# Warmup Iteration   7: 4209814.641 ops/s
# Warmup Iteration   8: 4205304.841 ops/s
# Warmup Iteration   9: 4209026.144 ops/s
# Warmup Iteration  10: 4202863.401 ops/s
# Warmup Iteration  11: 4197249.503 ops/s
# Warmup Iteration  12: 4207664.614 ops/s
# Warmup Iteration  13: 4200161.994 ops/s
# Warmup Iteration  14: 4216969.584 ops/s
# Warmup Iteration  15: 4202991.677 ops/s
# Warmup Iteration  16: 4204317.679 ops/s
# Warmup Iteration  17: 4206552.293 ops/s
# Warmup Iteration  18: 4201165.042 ops/s
# Warmup Iteration  19: 4199475.901 ops/s
# Warmup Iteration  20: 4202863.030 ops/s
# Warmup Iteration  21: 4199658.148 ops/s
# Warmup Iteration  22: 4211889.492 ops/s
# Warmup Iteration  23: 4192175.066 ops/s
# Warmup Iteration  24: 4213648.552 ops/s
# Warmup Iteration  25: 4202756.050 ops/s
# Warmup Iteration  26: 4204074.070 ops/s
# Warmup Iteration  27: 4202660.114 ops/s
# Warmup Iteration  28: 4210788.698 ops/s
# Warmup Iteration  29: 4208132.026 ops/s
# Warmup Iteration  30: 4198248.738 ops/s
Iteration   1: 4218026.951 ops/s
Iteration   2: 4199867.721 ops/s
Iteration   3: 4194534.279 ops/s
Iteration   4: 4211006.905 ops/s
Iteration   5: 4209461.290 ops/s
Iteration   6: 4199603.624 ops/s
Iteration   7: 4200944.302 ops/s
Iteration   8: 4216108.230 ops/s
Iteration   9: 4205253.268 ops/s
Iteration  10: 4207584.483 ops/s
Iteration  11: 4212031.670 ops/s
Iteration  12: 4207315.825 ops/s
Iteration  13: 4222174.641 ops/s
Iteration  14: 4203890.237 ops/s
Iteration  15: 4189748.821 ops/s
Iteration  16: 4190589.123 ops/s
Iteration  17: 4206572.792 ops/s
Iteration  18: 4198182.440 ops/s
Iteration  19: 4201285.781 ops/s
Iteration  20: 4205153.458 ops/s
Iteration  21: 4208635.996 ops/s
Iteration  22: 4213005.516 ops/s
Iteration  23: 4211190.093 ops/s
Iteration  24: 4180566.290 ops/s
Iteration  25: 4210168.672 ops/s
Iteration  26: 4200529.443 ops/s
Iteration  27: 4210917.139 ops/s
Iteration  28: 4207482.398 ops/s
Iteration  29: 4208522.243 ops/s
Iteration  30: 4197967.655 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop":
  4204944.043 ±(99.9%) 5889.634 ops/s [Average]
  (min, avg, max) = (4180566.290, 4204944.043, 4222174.641), stdev = 8815.328
  CI (99.9%): [4199054.409, 4210833.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_drop  thrpt   30  4204944.043 ± 5889.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3320901.776 ops/s
# Warmup Iteration   2: 8200854.375 ops/s
# Warmup Iteration   3: 8433096.194 ops/s
# Warmup Iteration   4: 6981865.624 ops/s
# Warmup Iteration   5: 8442258.114 ops/s
# Warmup Iteration   6: 8443740.136 ops/s
# Warmup Iteration   7: 8439130.807 ops/s
# Warmup Iteration   8: 8425434.166 ops/s
# Warmup Iteration   9: 8430120.883 ops/s
# Warmup Iteration  10: 8443936.755 ops/s
# Warmup Iteration  11: 8408219.343 ops/s
# Warmup Iteration  12: 8448862.084 ops/s
# Warmup Iteration  13: 8438892.810 ops/s
# Warmup Iteration  14: 8446502.689 ops/s
# Warmup Iteration  15: 8456826.210 ops/s
# Warmup Iteration  16: 8451787.515 ops/s
# Warmup Iteration  17: 8443665.588 ops/s
# Warmup Iteration  18: 8458189.767 ops/s
# Warmup Iteration  19: 8432647.911 ops/s
# Warmup Iteration  20: 8459612.981 ops/s
# Warmup Iteration  21: 8463187.060 ops/s
# Warmup Iteration  22: 8471759.163 ops/s
# Warmup Iteration  23: 8447946.821 ops/s
# Warmup Iteration  24: 8456266.666 ops/s
# Warmup Iteration  25: 8430294.168 ops/s
# Warmup Iteration  26: 8437909.663 ops/s
# Warmup Iteration  27: 8430631.346 ops/s
# Warmup Iteration  28: 8437947.015 ops/s
# Warmup Iteration  29: 8455199.580 ops/s
# Warmup Iteration  30: 8433070.946 ops/s
Iteration   1: 8433000.294 ops/s
Iteration   2: 8464878.852 ops/s
Iteration   3: 8451409.660 ops/s
Iteration   4: 8463712.395 ops/s
Iteration   5: 8394396.120 ops/s
Iteration   6: 8444435.483 ops/s
Iteration   7: 8448342.367 ops/s
Iteration   8: 8439782.784 ops/s
Iteration   9: 8460672.519 ops/s
Iteration  10: 8451674.299 ops/s
Iteration  11: 8475980.728 ops/s
Iteration  12: 8453414.034 ops/s
Iteration  13: 8456541.283 ops/s
Iteration  14: 8437974.898 ops/s
Iteration  15: 8445439.691 ops/s
Iteration  16: 8465284.579 ops/s
Iteration  17: 8461927.862 ops/s
Iteration  18: 8441399.298 ops/s
Iteration  19: 8457536.803 ops/s
Iteration  20: 8449171.033 ops/s
Iteration  21: 8450141.907 ops/s
Iteration  22: 8468535.114 ops/s
Iteration  23: 8438005.836 ops/s
Iteration  24: 8463699.757 ops/s
Iteration  25: 8463495.512 ops/s
Iteration  26: 8446305.157 ops/s
Iteration  27: 8433570.695 ops/s
Iteration  28: 8441397.616 ops/s
Iteration  29: 8462245.311 ops/s
Iteration  30: 8461797.416 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_dropWhile":
  8450872.310 ±(99.9%) 10328.254 ops/s [Average]
  (min, avg, max) = (8394396.120, 8450872.310, 8475980.728), stdev = 15458.845
  CI (99.9%): [8440544.056, 8461200.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_dropWhile  thrpt   30  8450872.310 ± 10328.254  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734288.607 ops/s
# Warmup Iteration   2: 776860.159 ops/s
# Warmup Iteration   3: 1005626.104 ops/s
# Warmup Iteration   4: 1011943.587 ops/s
# Warmup Iteration   5: 1010141.904 ops/s
# Warmup Iteration   6: 1009221.117 ops/s
# Warmup Iteration   7: 1005634.092 ops/s
# Warmup Iteration   8: 1008728.728 ops/s
# Warmup Iteration   9: 1011982.966 ops/s
# Warmup Iteration  10: 1004025.268 ops/s
# Warmup Iteration  11: 916606.369 ops/s
# Warmup Iteration  12: 943888.775 ops/s
# Warmup Iteration  13: 1008513.868 ops/s
# Warmup Iteration  14: 1006721.326 ops/s
# Warmup Iteration  15: 1007481.487 ops/s
# Warmup Iteration  16: 999690.322 ops/s
# Warmup Iteration  17: 1068506.468 ops/s
# Warmup Iteration  18: 1068220.259 ops/s
# Warmup Iteration  19: 1069016.856 ops/s
# Warmup Iteration  20: 1065175.678 ops/s
# Warmup Iteration  21: 1066627.093 ops/s
# Warmup Iteration  22: 1068732.666 ops/s
# Warmup Iteration  23: 1068315.666 ops/s
# Warmup Iteration  24: 1069082.846 ops/s
# Warmup Iteration  25: 1068893.903 ops/s
# Warmup Iteration  26: 1066751.078 ops/s
# Warmup Iteration  27: 1067913.317 ops/s
# Warmup Iteration  28: 1071200.043 ops/s
# Warmup Iteration  29: 1066817.989 ops/s
# Warmup Iteration  30: 1066468.252 ops/s
Iteration   1: 1068479.800 ops/s
Iteration   2: 1066564.909 ops/s
Iteration   3: 1065735.111 ops/s
Iteration   4: 1067778.742 ops/s
Iteration   5: 1070107.448 ops/s
Iteration   6: 1069480.692 ops/s
Iteration   7: 1069026.773 ops/s
Iteration   8: 1071006.675 ops/s
Iteration   9: 1071434.900 ops/s
Iteration  10: 1066897.344 ops/s
Iteration  11: 1066083.085 ops/s
Iteration  12: 1069980.948 ops/s
Iteration  13: 1065355.285 ops/s
Iteration  14: 1065710.861 ops/s
Iteration  15: 1061333.266 ops/s
Iteration  16: 1069282.933 ops/s
Iteration  17: 1070081.210 ops/s
Iteration  18: 1069392.003 ops/s
Iteration  19: 1068103.461 ops/s
Iteration  20: 1070652.919 ops/s
Iteration  21: 1070044.997 ops/s
Iteration  22: 1066343.224 ops/s
Iteration  23: 1068890.671 ops/s
Iteration  24: 1069897.262 ops/s
Iteration  25: 1065393.156 ops/s
Iteration  26: 1067994.374 ops/s
Iteration  27: 1065623.073 ops/s
Iteration  28: 1069595.392 ops/s
Iteration  29: 1070654.993 ops/s
Iteration  30: 1068735.478 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_drop_throws":
  1068188.700 ±(99.9%) 1515.862 ops/s [Average]
  (min, avg, max) = (1061333.266, 1068188.700, 1071434.900), stdev = 2268.872
  CI (99.9%): [1066672.837, 1069704.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_drop_throws  thrpt   30  1068188.700 ± 1515.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13943737.724 ops/s
# Warmup Iteration   2: 24532375.265 ops/s
# Warmup Iteration   3: 28565132.514 ops/s
# Warmup Iteration   4: 28497852.848 ops/s
# Warmup Iteration   5: 28623274.984 ops/s
# Warmup Iteration   6: 28567303.516 ops/s
# Warmup Iteration   7: 28636800.001 ops/s
# Warmup Iteration   8: 28648439.941 ops/s
# Warmup Iteration   9: 28526909.642 ops/s
# Warmup Iteration  10: 28552419.149 ops/s
# Warmup Iteration  11: 28721588.990 ops/s
# Warmup Iteration  12: 28726810.994 ops/s
# Warmup Iteration  13: 28729644.844 ops/s
# Warmup Iteration  14: 28631902.886 ops/s
# Warmup Iteration  15: 28805887.065 ops/s
# Warmup Iteration  16: 28651916.892 ops/s
# Warmup Iteration  17: 28959776.039 ops/s
# Warmup Iteration  18: 28971105.921 ops/s
# Warmup Iteration  19: 28914955.515 ops/s
# Warmup Iteration  20: 28978546.656 ops/s
# Warmup Iteration  21: 28763268.443 ops/s
# Warmup Iteration  22: 28779744.426 ops/s
# Warmup Iteration  23: 28879475.781 ops/s
# Warmup Iteration  24: 28965796.652 ops/s
# Warmup Iteration  25: 28733822.284 ops/s
# Warmup Iteration  26: 28686217.455 ops/s
# Warmup Iteration  27: 28835432.287 ops/s
# Warmup Iteration  28: 28690131.294 ops/s
# Warmup Iteration  29: 28895619.432 ops/s
# Warmup Iteration  30: 28941575.688 ops/s
Iteration   1: 28906975.570 ops/s
Iteration   2: 28776988.129 ops/s
Iteration   3: 28703551.569 ops/s
Iteration   4: 28902494.012 ops/s
Iteration   5: 28765627.902 ops/s
Iteration   6: 28755750.589 ops/s
Iteration   7: 28850322.631 ops/s
Iteration   8: 28802724.471 ops/s
Iteration   9: 28843169.297 ops/s
Iteration  10: 28873539.053 ops/s
Iteration  11: 28870956.152 ops/s
Iteration  12: 28694026.654 ops/s
Iteration  13: 28789421.433 ops/s
Iteration  14: 28911016.864 ops/s
Iteration  15: 28714231.202 ops/s
Iteration  16: 28644242.493 ops/s
Iteration  17: 28724664.865 ops/s
Iteration  18: 28444033.651 ops/s
Iteration  19: 28816599.499 ops/s
Iteration  20: 28745712.178 ops/s
Iteration  21: 28606766.940 ops/s
Iteration  22: 28826132.164 ops/s
Iteration  23: 28620768.616 ops/s
Iteration  24: 28788742.382 ops/s
Iteration  25: 28687602.467 ops/s
Iteration  26: 28726859.938 ops/s
Iteration  27: 28770302.823 ops/s
Iteration  28: 28758546.162 ops/s
Iteration  29: 28601481.657 ops/s
Iteration  30: 28943361.460 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_empty":
  28762220.427 ±(99.9%) 73257.340 ops/s [Average]
  (min, avg, max) = (28444033.651, 28762220.427, 28943361.460), stdev = 109648.146
  CI (99.9%): [28688963.087, 28835477.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_empty  thrpt   30  28762220.427 ± 73257.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38331.403 ops/s
# Warmup Iteration   2: 61596.933 ops/s
# Warmup Iteration   3: 83184.629 ops/s
# Warmup Iteration   4: 82942.154 ops/s
# Warmup Iteration   5: 83045.984 ops/s
# Warmup Iteration   6: 83111.300 ops/s
# Warmup Iteration   7: 77112.210 ops/s
# Warmup Iteration   8: 76520.344 ops/s
# Warmup Iteration   9: 83328.686 ops/s
# Warmup Iteration  10: 83189.461 ops/s
# Warmup Iteration  11: 83081.028 ops/s
# Warmup Iteration  12: 83175.551 ops/s
# Warmup Iteration  13: 83141.747 ops/s
# Warmup Iteration  14: 83090.757 ops/s
# Warmup Iteration  15: 83035.562 ops/s
# Warmup Iteration  16: 83177.915 ops/s
# Warmup Iteration  17: 83434.686 ops/s
# Warmup Iteration  18: 83373.475 ops/s
# Warmup Iteration  19: 83415.228 ops/s
# Warmup Iteration  20: 83008.838 ops/s
# Warmup Iteration  21: 83339.719 ops/s
# Warmup Iteration  22: 83223.947 ops/s
# Warmup Iteration  23: 83282.439 ops/s
# Warmup Iteration  24: 83295.607 ops/s
# Warmup Iteration  25: 83352.065 ops/s
# Warmup Iteration  26: 83094.466 ops/s
# Warmup Iteration  27: 83279.135 ops/s
# Warmup Iteration  28: 83050.558 ops/s
# Warmup Iteration  29: 83263.140 ops/s
# Warmup Iteration  30: 83322.949 ops/s
Iteration   1: 83122.844 ops/s
Iteration   2: 83132.650 ops/s
Iteration   3: 83199.360 ops/s
Iteration   4: 83336.745 ops/s
Iteration   5: 83410.712 ops/s
Iteration   6: 83339.266 ops/s
Iteration   7: 83250.161 ops/s
Iteration   8: 83528.306 ops/s
Iteration   9: 83577.573 ops/s
Iteration  10: 83337.032 ops/s
Iteration  11: 83258.191 ops/s
Iteration  12: 83201.802 ops/s
Iteration  13: 83150.526 ops/s
Iteration  14: 83564.424 ops/s
Iteration  15: 83185.175 ops/s
Iteration  16: 83357.114 ops/s
Iteration  17: 83428.754 ops/s
Iteration  18: 83411.328 ops/s
Iteration  19: 83328.125 ops/s
Iteration  20: 83256.314 ops/s
Iteration  21: 83111.907 ops/s
Iteration  22: 82697.735 ops/s
Iteration  23: 83260.519 ops/s
Iteration  24: 83008.511 ops/s
Iteration  25: 83446.587 ops/s
Iteration  26: 82852.746 ops/s
Iteration  27: 83259.839 ops/s
Iteration  28: 83470.681 ops/s
Iteration  29: 83234.115 ops/s
Iteration  30: 83367.295 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_equalsAndHashCode":
  83269.545 ±(99.9%) 129.374 ops/s [Average]
  (min, avg, max) = (82697.735, 83269.545, 83577.573), stdev = 193.641
  CI (99.9%): [83140.171, 83398.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score     Error  Units
FastListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  83269.545 ± 129.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fastListProperSuperSetOfArrayList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fastListProperSuperSetOfArrayList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1385.132 ops/s
# Warmup Iteration   2: 2702.532 ops/s
# Warmup Iteration   3: 3043.934 ops/s
# Warmup Iteration   4: 3059.028 ops/s
# Warmup Iteration   5: 2745.378 ops/s
# Warmup Iteration   6: 2861.557 ops/s
# Warmup Iteration   7: 3030.140 ops/s
# Warmup Iteration   8: 3074.948 ops/s
# Warmup Iteration   9: 3068.834 ops/s
# Warmup Iteration  10: 3080.229 ops/s
# Warmup Iteration  11: 3072.869 ops/s
# Warmup Iteration  12: 3059.983 ops/s
# Warmup Iteration  13: 3072.003 ops/s
# Warmup Iteration  14: 3033.633 ops/s
# Warmup Iteration  15: 3074.823 ops/s
# Warmup Iteration  16: 3073.899 ops/s
# Warmup Iteration  17: 3079.139 ops/s
# Warmup Iteration  18: 3079.400 ops/s
# Warmup Iteration  19: 3087.218 ops/s
# Warmup Iteration  20: 3081.215 ops/s
# Warmup Iteration  21: 3091.583 ops/s
# Warmup Iteration  22: 3085.981 ops/s
# Warmup Iteration  23: 3084.398 ops/s
# Warmup Iteration  24: 3095.826 ops/s
# Warmup Iteration  25: 3082.173 ops/s
# Warmup Iteration  26: 3089.284 ops/s
# Warmup Iteration  27: 3086.661 ops/s
# Warmup Iteration  28: 3082.505 ops/s
# Warmup Iteration  29: 3082.419 ops/s
# Warmup Iteration  30: 3084.834 ops/s
Iteration   1: 3100.573 ops/s
Iteration   2: 3086.559 ops/s
Iteration   3: 3064.121 ops/s
Iteration   4: 3086.445 ops/s
Iteration   5: 3094.185 ops/s
Iteration   6: 3078.547 ops/s
Iteration   7: 3101.736 ops/s
Iteration   8: 3064.446 ops/s
Iteration   9: 3076.516 ops/s
Iteration  10: 3103.774 ops/s
Iteration  11: 3077.026 ops/s
Iteration  12: 3086.171 ops/s
Iteration  13: 3103.233 ops/s
Iteration  14: 3085.650 ops/s
Iteration  15: 3086.485 ops/s
Iteration  16: 3064.318 ops/s
Iteration  17: 3061.796 ops/s
Iteration  18: 3102.330 ops/s
Iteration  19: 3087.549 ops/s
Iteration  20: 3104.101 ops/s
Iteration  21: 3106.309 ops/s
Iteration  22: 3066.213 ops/s
Iteration  23: 3088.530 ops/s
Iteration  24: 3089.672 ops/s
Iteration  25: 3068.981 ops/s
Iteration  26: 3082.471 ops/s
Iteration  27: 3093.475 ops/s
Iteration  28: 3083.313 ops/s
Iteration  29: 3089.225 ops/s
Iteration  30: 3063.759 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_fastListProperSuperSetOfArrayList":
  3084.917 ±(99.9%) 9.302 ops/s [Average]
  (min, avg, max) = (3061.796, 3084.917, 3106.309), stdev = 13.923
  CI (99.9%): [3075.615, 3094.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt     Score   Error  Units
FastListTest._Benchmark.benchmark_fastListProperSuperSetOfArrayList  thrpt   30  3084.917 ± 9.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 445786.876 ops/s
# Warmup Iteration   2: 596018.119 ops/s
# Warmup Iteration   3: 771086.147 ops/s
# Warmup Iteration   4: 769942.417 ops/s
# Warmup Iteration   5: 771963.450 ops/s
# Warmup Iteration   6: 773272.258 ops/s
# Warmup Iteration   7: 770416.376 ops/s
# Warmup Iteration   8: 633509.704 ops/s
# Warmup Iteration   9: 774232.665 ops/s
# Warmup Iteration  10: 774736.268 ops/s
# Warmup Iteration  11: 774098.150 ops/s
# Warmup Iteration  12: 771936.029 ops/s
# Warmup Iteration  13: 773217.675 ops/s
# Warmup Iteration  14: 775601.062 ops/s
# Warmup Iteration  15: 774281.644 ops/s
# Warmup Iteration  16: 772909.110 ops/s
# Warmup Iteration  17: 777510.347 ops/s
# Warmup Iteration  18: 775899.727 ops/s
# Warmup Iteration  19: 777216.110 ops/s
# Warmup Iteration  20: 773992.333 ops/s
# Warmup Iteration  21: 770654.527 ops/s
# Warmup Iteration  22: 776156.975 ops/s
# Warmup Iteration  23: 776407.968 ops/s
# Warmup Iteration  24: 774887.151 ops/s
# Warmup Iteration  25: 773632.926 ops/s
# Warmup Iteration  26: 774285.647 ops/s
# Warmup Iteration  27: 774288.147 ops/s
# Warmup Iteration  28: 774459.712 ops/s
# Warmup Iteration  29: 773813.341 ops/s
# Warmup Iteration  30: 772573.641 ops/s
Iteration   1: 771327.716 ops/s
Iteration   2: 775815.992 ops/s
Iteration   3: 772347.853 ops/s
Iteration   4: 772966.798 ops/s
Iteration   5: 774710.337 ops/s
Iteration   6: 774231.009 ops/s
Iteration   7: 773483.928 ops/s
Iteration   8: 771613.634 ops/s
Iteration   9: 775814.911 ops/s
Iteration  10: 775338.357 ops/s
Iteration  11: 776643.749 ops/s
Iteration  12: 776754.283 ops/s
Iteration  13: 772574.231 ops/s
Iteration  14: 774734.855 ops/s
Iteration  15: 774258.274 ops/s
Iteration  16: 775060.004 ops/s
Iteration  17: 775780.764 ops/s
Iteration  18: 775026.429 ops/s
Iteration  19: 775760.719 ops/s
Iteration  20: 775585.729 ops/s
Iteration  21: 775631.967 ops/s
Iteration  22: 776089.471 ops/s
Iteration  23: 777134.986 ops/s
Iteration  24: 775783.403 ops/s
Iteration  25: 776228.046 ops/s
Iteration  26: 773658.240 ops/s
Iteration  27: 774174.217 ops/s
Iteration  28: 774674.873 ops/s
Iteration  29: 776051.486 ops/s
Iteration  30: 776101.684 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollect":
  774845.265 ±(99.9%) 1014.111 ops/s [Average]
  (min, avg, max) = (771327.716, 774845.265, 777134.986), stdev = 1517.874
  CI (99.9%): [773831.154, 775859.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollect  thrpt   30  774845.265 ± 1014.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1978894.611 ops/s
# Warmup Iteration   2: 4852086.624 ops/s
# Warmup Iteration   3: 4253396.969 ops/s
# Warmup Iteration   4: 4414995.086 ops/s
# Warmup Iteration   5: 4732977.142 ops/s
# Warmup Iteration   6: 4721253.318 ops/s
# Warmup Iteration   7: 4724919.548 ops/s
# Warmup Iteration   8: 4733175.638 ops/s
# Warmup Iteration   9: 4718871.508 ops/s
# Warmup Iteration  10: 4728850.739 ops/s
# Warmup Iteration  11: 4717771.362 ops/s
# Warmup Iteration  12: 4733084.162 ops/s
# Warmup Iteration  13: 4738323.597 ops/s
# Warmup Iteration  14: 4732306.176 ops/s
# Warmup Iteration  15: 4724266.047 ops/s
# Warmup Iteration  16: 4725440.942 ops/s
# Warmup Iteration  17: 4739104.709 ops/s
# Warmup Iteration  18: 4716227.842 ops/s
# Warmup Iteration  19: 4725160.843 ops/s
# Warmup Iteration  20: 4739108.132 ops/s
# Warmup Iteration  21: 4736489.262 ops/s
# Warmup Iteration  22: 4729004.446 ops/s
# Warmup Iteration  23: 4730987.349 ops/s
# Warmup Iteration  24: 4738946.509 ops/s
# Warmup Iteration  25: 4736244.750 ops/s
# Warmup Iteration  26: 4740412.320 ops/s
# Warmup Iteration  27: 4732460.291 ops/s
# Warmup Iteration  28: 4722100.671 ops/s
# Warmup Iteration  29: 4731586.735 ops/s
# Warmup Iteration  30: 4728741.800 ops/s
Iteration   1: 4732637.486 ops/s
Iteration   2: 4726397.022 ops/s
Iteration   3: 4728331.726 ops/s
Iteration   4: 4721540.710 ops/s
Iteration   5: 4724533.094 ops/s
Iteration   6: 4734785.552 ops/s
Iteration   7: 4728042.434 ops/s
Iteration   8: 4718697.326 ops/s
Iteration   9: 4718957.487 ops/s
Iteration  10: 4720322.961 ops/s
Iteration  11: 4742946.684 ops/s
Iteration  12: 4717812.965 ops/s
Iteration  13: 4721022.190 ops/s
Iteration  14: 4724633.968 ops/s
Iteration  15: 4731364.193 ops/s
Iteration  16: 4745494.786 ops/s
Iteration  17: 4724397.967 ops/s
Iteration  18: 4723717.805 ops/s
Iteration  19: 4737958.743 ops/s
Iteration  20: 4716338.709 ops/s
Iteration  21: 4721169.826 ops/s
Iteration  22: 4720603.932 ops/s
Iteration  23: 4726541.455 ops/s
Iteration  24: 4720613.291 ops/s
Iteration  25: 4733050.459 ops/s
Iteration  26: 4745490.970 ops/s
Iteration  27: 4744051.963 ops/s
Iteration  28: 4709091.498 ops/s
Iteration  29: 4738811.127 ops/s
Iteration  30: 4727242.418 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectBoolean":
  4727553.358 ±(99.9%) 6250.766 ops/s [Average]
  (min, avg, max) = (4709091.498, 4727553.358, 4745494.786), stdev = 9355.852
  CI (99.9%): [4721302.593, 4733804.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4727553.358 ± 6250.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788712.355 ops/s
# Warmup Iteration   2: 1255090.720 ops/s
# Warmup Iteration   3: 1473594.331 ops/s
# Warmup Iteration   4: 1481395.286 ops/s
# Warmup Iteration   5: 1479979.506 ops/s
# Warmup Iteration   6: 1434821.250 ops/s
# Warmup Iteration   7: 1275026.662 ops/s
# Warmup Iteration   8: 1475621.315 ops/s
# Warmup Iteration   9: 1481083.515 ops/s
# Warmup Iteration  10: 1479331.524 ops/s
# Warmup Iteration  11: 1478978.609 ops/s
# Warmup Iteration  12: 1474848.328 ops/s
# Warmup Iteration  13: 1481231.653 ops/s
# Warmup Iteration  14: 1480838.571 ops/s
# Warmup Iteration  15: 1480687.353 ops/s
# Warmup Iteration  16: 1482697.336 ops/s
# Warmup Iteration  17: 1489252.980 ops/s
# Warmup Iteration  18: 1488439.377 ops/s
# Warmup Iteration  19: 1488293.007 ops/s
# Warmup Iteration  20: 1490057.142 ops/s
# Warmup Iteration  21: 1487608.465 ops/s
# Warmup Iteration  22: 1490563.374 ops/s
# Warmup Iteration  23: 1485983.857 ops/s
# Warmup Iteration  24: 1488893.256 ops/s
# Warmup Iteration  25: 1492022.455 ops/s
# Warmup Iteration  26: 1486503.310 ops/s
# Warmup Iteration  27: 1490556.059 ops/s
# Warmup Iteration  28: 1489716.665 ops/s
# Warmup Iteration  29: 1491750.903 ops/s
# Warmup Iteration  30: 1491714.076 ops/s
Iteration   1: 1492458.260 ops/s
Iteration   2: 1486621.698 ops/s
Iteration   3: 1492289.620 ops/s
Iteration   4: 1492515.882 ops/s
Iteration   5: 1494119.047 ops/s
Iteration   6: 1488384.126 ops/s
Iteration   7: 1492852.776 ops/s
Iteration   8: 1488430.293 ops/s
Iteration   9: 1487902.857 ops/s
Iteration  10: 1478573.066 ops/s
Iteration  11: 1487626.709 ops/s
Iteration  12: 1489651.016 ops/s
Iteration  13: 1493738.603 ops/s
Iteration  14: 1489633.218 ops/s
Iteration  15: 1494993.827 ops/s
Iteration  16: 1485257.413 ops/s
Iteration  17: 1493485.488 ops/s
Iteration  18: 1491669.590 ops/s
Iteration  19: 1493628.459 ops/s
Iteration  20: 1488578.144 ops/s
Iteration  21: 1495040.005 ops/s
Iteration  22: 1491289.163 ops/s
Iteration  23: 1495466.834 ops/s
Iteration  24: 1493226.536 ops/s
Iteration  25: 1487878.760 ops/s
Iteration  26: 1489854.910 ops/s
Iteration  27: 1485448.502 ops/s
Iteration  28: 1487639.879 ops/s
Iteration  29: 1486351.646 ops/s
Iteration  30: 1494318.000 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectByte":
  1490297.478 ±(99.9%) 2539.765 ops/s [Average]
  (min, avg, max) = (1478573.066, 1490297.478, 1495466.834), stdev = 3801.401
  CI (99.9%): [1487757.712, 1492837.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1490297.478 ± 2539.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 981759.958 ops/s
# Warmup Iteration   2: 2522899.044 ops/s
# Warmup Iteration   3: 2542225.840 ops/s
# Warmup Iteration   4: 2126333.870 ops/s
# Warmup Iteration   5: 2544621.725 ops/s
# Warmup Iteration   6: 2534373.309 ops/s
# Warmup Iteration   7: 2539979.875 ops/s
# Warmup Iteration   8: 2546396.998 ops/s
# Warmup Iteration   9: 2551037.147 ops/s
# Warmup Iteration  10: 2541213.826 ops/s
# Warmup Iteration  11: 2537451.062 ops/s
# Warmup Iteration  12: 2542610.916 ops/s
# Warmup Iteration  13: 2544602.862 ops/s
# Warmup Iteration  14: 2540786.655 ops/s
# Warmup Iteration  15: 2547546.339 ops/s
# Warmup Iteration  16: 2546382.454 ops/s
# Warmup Iteration  17: 2546679.904 ops/s
# Warmup Iteration  18: 2543012.701 ops/s
# Warmup Iteration  19: 2550418.210 ops/s
# Warmup Iteration  20: 2549895.747 ops/s
# Warmup Iteration  21: 2552305.723 ops/s
# Warmup Iteration  22: 2551007.524 ops/s
# Warmup Iteration  23: 2545622.641 ops/s
# Warmup Iteration  24: 2548083.395 ops/s
# Warmup Iteration  25: 2548408.081 ops/s
# Warmup Iteration  26: 2545615.238 ops/s
# Warmup Iteration  27: 2546264.682 ops/s
# Warmup Iteration  28: 2545396.235 ops/s
# Warmup Iteration  29: 2551442.721 ops/s
# Warmup Iteration  30: 2546751.704 ops/s
Iteration   1: 2550042.163 ops/s
Iteration   2: 2549883.437 ops/s
Iteration   3: 2549355.324 ops/s
Iteration   4: 2536285.144 ops/s
Iteration   5: 2536985.732 ops/s
Iteration   6: 2539880.339 ops/s
Iteration   7: 2543984.200 ops/s
Iteration   8: 2545407.000 ops/s
Iteration   9: 2541775.301 ops/s
Iteration  10: 2544337.439 ops/s
Iteration  11: 2547370.327 ops/s
Iteration  12: 2542751.162 ops/s
Iteration  13: 2546812.470 ops/s
Iteration  14: 2546765.644 ops/s
Iteration  15: 2549763.279 ops/s
Iteration  16: 2537556.117 ops/s
Iteration  17: 2553217.505 ops/s
Iteration  18: 2549082.406 ops/s
Iteration  19: 2545777.059 ops/s
Iteration  20: 2554417.261 ops/s
Iteration  21: 2548672.785 ops/s
Iteration  22: 2546247.824 ops/s
Iteration  23: 2547427.120 ops/s
Iteration  24: 2537897.598 ops/s
Iteration  25: 2538183.242 ops/s
Iteration  26: 2543350.223 ops/s
Iteration  27: 2548237.170 ops/s
Iteration  28: 2547703.303 ops/s
Iteration  29: 2547532.126 ops/s
Iteration  30: 2545628.845 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectChar":
  2545410.985 ±(99.9%) 3176.227 ops/s [Average]
  (min, avg, max) = (2536285.144, 2545410.985, 2554417.261), stdev = 4754.027
  CI (99.9%): [2542234.758, 2548587.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2545410.985 ± 3176.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 491779.140 ops/s
# Warmup Iteration   2: 1231996.791 ops/s
# Warmup Iteration   3: 1243776.271 ops/s
# Warmup Iteration   4: 1038663.710 ops/s
# Warmup Iteration   5: 1246654.445 ops/s
# Warmup Iteration   6: 1243092.304 ops/s
# Warmup Iteration   7: 1248956.317 ops/s
# Warmup Iteration   8: 1245883.243 ops/s
# Warmup Iteration   9: 1249861.664 ops/s
# Warmup Iteration  10: 1249271.362 ops/s
# Warmup Iteration  11: 1249249.485 ops/s
# Warmup Iteration  12: 1245986.645 ops/s
# Warmup Iteration  13: 1247693.491 ops/s
# Warmup Iteration  14: 1251765.483 ops/s
# Warmup Iteration  15: 1245917.764 ops/s
# Warmup Iteration  16: 1249469.839 ops/s
# Warmup Iteration  17: 1245231.571 ops/s
# Warmup Iteration  18: 1244926.939 ops/s
# Warmup Iteration  19: 1248694.380 ops/s
# Warmup Iteration  20: 1246333.487 ops/s
# Warmup Iteration  21: 1246073.110 ops/s
# Warmup Iteration  22: 1244261.699 ops/s
# Warmup Iteration  23: 1246049.835 ops/s
# Warmup Iteration  24: 1246813.689 ops/s
# Warmup Iteration  25: 1245946.064 ops/s
# Warmup Iteration  26: 1244959.992 ops/s
# Warmup Iteration  27: 1247008.344 ops/s
# Warmup Iteration  28: 1246910.128 ops/s
# Warmup Iteration  29: 1239813.016 ops/s
# Warmup Iteration  30: 1238972.042 ops/s
Iteration   1: 1240429.045 ops/s
Iteration   2: 1249433.671 ops/s
Iteration   3: 1243442.554 ops/s
Iteration   4: 1231686.902 ops/s
Iteration   5: 1240163.478 ops/s
Iteration   6: 1245280.596 ops/s
Iteration   7: 1241991.365 ops/s
Iteration   8: 1244408.321 ops/s
Iteration   9: 1242544.698 ops/s
Iteration  10: 1244769.290 ops/s
Iteration  11: 1246715.088 ops/s
Iteration  12: 1244455.820 ops/s
Iteration  13: 1242408.578 ops/s
Iteration  14: 1246429.733 ops/s
Iteration  15: 1241198.892 ops/s
Iteration  16: 1237048.371 ops/s
Iteration  17: 1247629.910 ops/s
Iteration  18: 1250629.172 ops/s
Iteration  19: 1248844.429 ops/s
Iteration  20: 1242745.016 ops/s
Iteration  21: 1252487.527 ops/s
Iteration  22: 1251789.402 ops/s
Iteration  23: 1250992.868 ops/s
Iteration  24: 1247314.282 ops/s
Iteration  25: 1250428.823 ops/s
Iteration  26: 1241113.426 ops/s
Iteration  27: 1247040.758 ops/s
Iteration  28: 1247070.989 ops/s
Iteration  29: 1243149.957 ops/s
Iteration  30: 1244384.752 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectDouble":
  1244934.257 ±(99.9%) 3057.765 ops/s [Average]
  (min, avg, max) = (1231686.902, 1244934.257, 1252487.527), stdev = 4576.720
  CI (99.9%): [1241876.492, 1247992.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1244934.257 ± 3057.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747471.657 ops/s
# Warmup Iteration   2: 1735320.948 ops/s
# Warmup Iteration   3: 1809453.770 ops/s
# Warmup Iteration   4: 1601964.053 ops/s
# Warmup Iteration   5: 1726824.465 ops/s
# Warmup Iteration   6: 1820030.415 ops/s
# Warmup Iteration   7: 1818771.268 ops/s
# Warmup Iteration   8: 1814247.246 ops/s
# Warmup Iteration   9: 1820781.810 ops/s
# Warmup Iteration  10: 1818535.173 ops/s
# Warmup Iteration  11: 1819920.442 ops/s
# Warmup Iteration  12: 1818035.220 ops/s
# Warmup Iteration  13: 1821272.429 ops/s
# Warmup Iteration  14: 1815724.554 ops/s
# Warmup Iteration  15: 1821136.719 ops/s
# Warmup Iteration  16: 1816444.935 ops/s
# Warmup Iteration  17: 1815309.465 ops/s
# Warmup Iteration  18: 1815703.604 ops/s
# Warmup Iteration  19: 1816444.169 ops/s
# Warmup Iteration  20: 1814302.645 ops/s
# Warmup Iteration  21: 1816305.417 ops/s
# Warmup Iteration  22: 1817429.694 ops/s
# Warmup Iteration  23: 1812710.846 ops/s
# Warmup Iteration  24: 1816970.805 ops/s
# Warmup Iteration  25: 1818070.023 ops/s
# Warmup Iteration  26: 1821905.046 ops/s
# Warmup Iteration  27: 1816204.384 ops/s
# Warmup Iteration  28: 1818362.625 ops/s
# Warmup Iteration  29: 1817245.092 ops/s
# Warmup Iteration  30: 1814125.225 ops/s
Iteration   1: 1819742.712 ops/s
Iteration   2: 1812775.547 ops/s
Iteration   3: 1818723.584 ops/s
Iteration   4: 1818304.068 ops/s
Iteration   5: 1820367.216 ops/s
Iteration   6: 1818902.236 ops/s
Iteration   7: 1820662.795 ops/s
Iteration   8: 1816705.496 ops/s
Iteration   9: 1808057.986 ops/s
Iteration  10: 1820008.231 ops/s
Iteration  11: 1821095.413 ops/s
Iteration  12: 1822676.995 ops/s
Iteration  13: 1817728.668 ops/s
Iteration  14: 1819315.336 ops/s
Iteration  15: 1813974.944 ops/s
Iteration  16: 1816466.168 ops/s
Iteration  17: 1815469.662 ops/s
Iteration  18: 1822789.899 ops/s
Iteration  19: 1814793.660 ops/s
Iteration  20: 1819436.324 ops/s
Iteration  21: 1816260.468 ops/s
Iteration  22: 1824118.837 ops/s
Iteration  23: 1811132.726 ops/s
Iteration  24: 1824254.555 ops/s
Iteration  25: 1817664.539 ops/s
Iteration  26: 1819259.846 ops/s
Iteration  27: 1821088.610 ops/s
Iteration  28: 1818237.243 ops/s
Iteration  29: 1822115.961 ops/s
Iteration  30: 1829343.606 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectFloat":
  1818715.778 ±(99.9%) 2803.990 ops/s [Average]
  (min, avg, max) = (1808057.986, 1818715.778, 1829343.606), stdev = 4196.880
  CI (99.9%): [1815911.788, 1821519.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1818715.778 ± 2803.990  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914070.085 ops/s
# Warmup Iteration   2: 2360881.817 ops/s
# Warmup Iteration   3: 2359175.119 ops/s
# Warmup Iteration   4: 1965605.816 ops/s
# Warmup Iteration   5: 2371575.437 ops/s
# Warmup Iteration   6: 2379987.365 ops/s
# Warmup Iteration   7: 2378302.184 ops/s
# Warmup Iteration   8: 2366225.874 ops/s
# Warmup Iteration   9: 2373560.017 ops/s
# Warmup Iteration  10: 2361614.243 ops/s
# Warmup Iteration  11: 2359415.199 ops/s
# Warmup Iteration  12: 2356769.603 ops/s
# Warmup Iteration  13: 2327272.998 ops/s
# Warmup Iteration  14: 2352257.991 ops/s
# Warmup Iteration  15: 2367643.241 ops/s
# Warmup Iteration  16: 2361412.383 ops/s
# Warmup Iteration  17: 2360951.312 ops/s
# Warmup Iteration  18: 2367600.048 ops/s
# Warmup Iteration  19: 2362496.924 ops/s
# Warmup Iteration  20: 2366455.870 ops/s
# Warmup Iteration  21: 2366649.288 ops/s
# Warmup Iteration  22: 2362417.284 ops/s
# Warmup Iteration  23: 2373330.708 ops/s
# Warmup Iteration  24: 2369256.473 ops/s
# Warmup Iteration  25: 2381502.403 ops/s
# Warmup Iteration  26: 2370018.629 ops/s
# Warmup Iteration  27: 2376616.017 ops/s
# Warmup Iteration  28: 2361250.704 ops/s
# Warmup Iteration  29: 2370457.455 ops/s
# Warmup Iteration  30: 2367476.063 ops/s
Iteration   1: 2361736.420 ops/s
Iteration   2: 2363845.145 ops/s
Iteration   3: 2375845.612 ops/s
Iteration   4: 2373859.001 ops/s
Iteration   5: 2358220.166 ops/s
Iteration   6: 2361705.962 ops/s
Iteration   7: 2373483.909 ops/s
Iteration   8: 2362269.161 ops/s
Iteration   9: 2358557.808 ops/s
Iteration  10: 2373600.251 ops/s
Iteration  11: 2366211.438 ops/s
Iteration  12: 2362669.192 ops/s
Iteration  13: 2365991.639 ops/s
Iteration  14: 2367237.935 ops/s
Iteration  15: 2370526.567 ops/s
Iteration  16: 2370080.226 ops/s
Iteration  17: 2379405.083 ops/s
Iteration  18: 2363021.970 ops/s
Iteration  19: 2363068.664 ops/s
Iteration  20: 2374828.160 ops/s
Iteration  21: 2366971.032 ops/s
Iteration  22: 2377420.684 ops/s
Iteration  23: 2375257.090 ops/s
Iteration  24: 2373049.538 ops/s
Iteration  25: 2370032.031 ops/s
Iteration  26: 2366868.196 ops/s
Iteration  27: 2373328.830 ops/s
Iteration  28: 2372810.945 ops/s
Iteration  29: 2371243.820 ops/s
Iteration  30: 2368295.118 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectInt":
  2368714.720 ±(99.9%) 3852.064 ops/s [Average]
  (min, avg, max) = (2358220.166, 2368714.720, 2379405.083), stdev = 5765.588
  CI (99.9%): [2364862.656, 2372566.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2368714.720 ± 3852.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860598.226 ops/s
# Warmup Iteration   2: 2181924.514 ops/s
# Warmup Iteration   3: 1826292.290 ops/s
# Warmup Iteration   4: 2199060.518 ops/s
# Warmup Iteration   5: 2208820.703 ops/s
# Warmup Iteration   6: 2206188.421 ops/s
# Warmup Iteration   7: 2199333.813 ops/s
# Warmup Iteration   8: 2201758.770 ops/s
# Warmup Iteration   9: 2205267.686 ops/s
# Warmup Iteration  10: 2207638.961 ops/s
# Warmup Iteration  11: 2204503.349 ops/s
# Warmup Iteration  12: 2202513.370 ops/s
# Warmup Iteration  13: 2210855.191 ops/s
# Warmup Iteration  14: 2172531.344 ops/s
# Warmup Iteration  15: 2202224.285 ops/s
# Warmup Iteration  16: 2208793.838 ops/s
# Warmup Iteration  17: 2209822.713 ops/s
# Warmup Iteration  18: 2206389.308 ops/s
# Warmup Iteration  19: 2206237.027 ops/s
# Warmup Iteration  20: 2205045.435 ops/s
# Warmup Iteration  21: 2209921.162 ops/s
# Warmup Iteration  22: 2209758.382 ops/s
# Warmup Iteration  23: 2209711.412 ops/s
# Warmup Iteration  24: 2210520.294 ops/s
# Warmup Iteration  25: 2207273.060 ops/s
# Warmup Iteration  26: 2210991.541 ops/s
# Warmup Iteration  27: 2208458.661 ops/s
# Warmup Iteration  28: 2212761.543 ops/s
# Warmup Iteration  29: 2207789.880 ops/s
# Warmup Iteration  30: 2210759.904 ops/s
Iteration   1: 2209278.748 ops/s
Iteration   2: 2199418.168 ops/s
Iteration   3: 2209094.738 ops/s
Iteration   4: 2196332.941 ops/s
Iteration   5: 2206258.915 ops/s
Iteration   6: 2208367.504 ops/s
Iteration   7: 2195965.877 ops/s
Iteration   8: 2208101.053 ops/s
Iteration   9: 2209529.453 ops/s
Iteration  10: 2211759.185 ops/s
Iteration  11: 2202056.771 ops/s
Iteration  12: 2205072.711 ops/s
Iteration  13: 2203057.248 ops/s
Iteration  14: 2202987.080 ops/s
Iteration  15: 2204066.949 ops/s
Iteration  16: 2212021.736 ops/s
Iteration  17: 2215723.208 ops/s
Iteration  18: 2203023.455 ops/s
Iteration  19: 2198812.770 ops/s
Iteration  20: 2198385.647 ops/s
Iteration  21: 2206225.140 ops/s
Iteration  22: 2207514.976 ops/s
Iteration  23: 2209010.140 ops/s
Iteration  24: 2211418.733 ops/s
Iteration  25: 2211492.905 ops/s
Iteration  26: 2212475.349 ops/s
Iteration  27: 2208190.521 ops/s
Iteration  28: 2207427.773 ops/s
Iteration  29: 2212815.392 ops/s
Iteration  30: 2212226.521 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectLong":
  2206603.720 ±(99.9%) 3497.388 ops/s [Average]
  (min, avg, max) = (2195965.877, 2206603.720, 2215723.208), stdev = 5234.727
  CI (99.9%): [2203106.332, 2210101.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectLong  thrpt   30  2206603.720 ± 3497.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 998543.641 ops/s
# Warmup Iteration   2: 2566217.749 ops/s
# Warmup Iteration   3: 2564616.732 ops/s
# Warmup Iteration   4: 2143085.161 ops/s
# Warmup Iteration   5: 2569005.139 ops/s
# Warmup Iteration   6: 2572560.943 ops/s
# Warmup Iteration   7: 2568807.568 ops/s
# Warmup Iteration   8: 2570462.878 ops/s
# Warmup Iteration   9: 2579324.567 ops/s
# Warmup Iteration  10: 2574506.829 ops/s
# Warmup Iteration  11: 2574022.212 ops/s
# Warmup Iteration  12: 2570438.876 ops/s
# Warmup Iteration  13: 2572151.288 ops/s
# Warmup Iteration  14: 2576357.969 ops/s
# Warmup Iteration  15: 2574620.942 ops/s
# Warmup Iteration  16: 2571562.108 ops/s
# Warmup Iteration  17: 2613700.188 ops/s
# Warmup Iteration  18: 2610024.291 ops/s
# Warmup Iteration  19: 2615916.068 ops/s
# Warmup Iteration  20: 2612901.301 ops/s
# Warmup Iteration  21: 2615627.272 ops/s
# Warmup Iteration  22: 2616810.299 ops/s
# Warmup Iteration  23: 2616284.214 ops/s
# Warmup Iteration  24: 2615228.776 ops/s
# Warmup Iteration  25: 2606851.226 ops/s
# Warmup Iteration  26: 2612429.107 ops/s
# Warmup Iteration  27: 2619441.713 ops/s
# Warmup Iteration  28: 2618246.471 ops/s
# Warmup Iteration  29: 2623361.762 ops/s
# Warmup Iteration  30: 2624198.677 ops/s
Iteration   1: 2625515.292 ops/s
Iteration   2: 2626220.599 ops/s
Iteration   3: 2625850.120 ops/s
Iteration   4: 2608506.213 ops/s
Iteration   5: 2614929.204 ops/s
Iteration   6: 2621356.955 ops/s
Iteration   7: 2615403.789 ops/s
Iteration   8: 2616664.072 ops/s
Iteration   9: 2622773.548 ops/s
Iteration  10: 2614034.898 ops/s
Iteration  11: 2610741.141 ops/s
Iteration  12: 2614866.299 ops/s
Iteration  13: 2602544.853 ops/s
Iteration  14: 2615445.175 ops/s
Iteration  15: 2617596.009 ops/s
Iteration  16: 2614574.154 ops/s
Iteration  17: 2616161.282 ops/s
Iteration  18: 2623250.273 ops/s
Iteration  19: 2617540.641 ops/s
Iteration  20: 2612305.367 ops/s
Iteration  21: 2620959.360 ops/s
Iteration  22: 2618282.777 ops/s
Iteration  23: 2622630.639 ops/s
Iteration  24: 2613092.897 ops/s
Iteration  25: 2616376.582 ops/s
Iteration  26: 2614928.709 ops/s
Iteration  27: 2626434.100 ops/s
Iteration  28: 2616794.533 ops/s
Iteration  29: 2618453.424 ops/s
Iteration  30: 2622621.335 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectShort":
  2617561.808 ±(99.9%) 3684.034 ops/s [Average]
  (min, avg, max) = (2602544.853, 2617561.808, 2626434.100), stdev = 5514.089
  CI (99.9%): [2613877.774, 2621245.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2617561.808 ± 3684.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 212425.931 ops/s
# Warmup Iteration   2: 362246.677 ops/s
# Warmup Iteration   3: 444783.078 ops/s
# Warmup Iteration   4: 448046.948 ops/s
# Warmup Iteration   5: 447624.426 ops/s
# Warmup Iteration   6: 424132.506 ops/s
# Warmup Iteration   7: 392634.234 ops/s
# Warmup Iteration   8: 448267.878 ops/s
# Warmup Iteration   9: 448832.496 ops/s
# Warmup Iteration  10: 447616.113 ops/s
# Warmup Iteration  11: 448956.274 ops/s
# Warmup Iteration  12: 448047.953 ops/s
# Warmup Iteration  13: 448895.590 ops/s
# Warmup Iteration  14: 447371.724 ops/s
# Warmup Iteration  15: 448454.756 ops/s
# Warmup Iteration  16: 447891.874 ops/s
# Warmup Iteration  17: 449041.915 ops/s
# Warmup Iteration  18: 449134.469 ops/s
# Warmup Iteration  19: 448550.091 ops/s
# Warmup Iteration  20: 449353.653 ops/s
# Warmup Iteration  21: 448514.078 ops/s
# Warmup Iteration  22: 449125.353 ops/s
# Warmup Iteration  23: 448969.761 ops/s
# Warmup Iteration  24: 447620.299 ops/s
# Warmup Iteration  25: 448987.445 ops/s
# Warmup Iteration  26: 449505.495 ops/s
# Warmup Iteration  27: 446962.829 ops/s
# Warmup Iteration  28: 448081.366 ops/s
# Warmup Iteration  29: 448411.678 ops/s
# Warmup Iteration  30: 448404.902 ops/s
Iteration   1: 449973.167 ops/s
Iteration   2: 447792.840 ops/s
Iteration   3: 449178.949 ops/s
Iteration   4: 449415.681 ops/s
Iteration   5: 449609.927 ops/s
Iteration   6: 447455.232 ops/s
Iteration   7: 448681.132 ops/s
Iteration   8: 448703.434 ops/s
Iteration   9: 448145.023 ops/s
Iteration  10: 446901.483 ops/s
Iteration  11: 449474.160 ops/s
Iteration  12: 448083.088 ops/s
Iteration  13: 449281.992 ops/s
Iteration  14: 447920.285 ops/s
Iteration  15: 450423.422 ops/s
Iteration  16: 449074.742 ops/s
Iteration  17: 449523.039 ops/s
Iteration  18: 447745.574 ops/s
Iteration  19: 448269.956 ops/s
Iteration  20: 448081.526 ops/s
Iteration  21: 449393.157 ops/s
Iteration  22: 449859.351 ops/s
Iteration  23: 449108.607 ops/s
Iteration  24: 447992.174 ops/s
Iteration  25: 449586.749 ops/s
Iteration  26: 447672.403 ops/s
Iteration  27: 449232.452 ops/s
Iteration  28: 449144.086 ops/s
Iteration  29: 448645.752 ops/s
Iteration  30: 448295.181 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_flatCollectWith":
  448755.485 ±(99.9%) 571.090 ops/s [Average]
  (min, avg, max) = (446901.483, 448755.485, 450423.422), stdev = 854.781
  CI (99.9%): [448184.395, 449326.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  448755.485 ± 571.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7454136.571 ops/s
# Warmup Iteration   2: 14805639.654 ops/s
# Warmup Iteration   3: 14766896.055 ops/s
# Warmup Iteration   4: 15862576.739 ops/s
# Warmup Iteration   5: 16597089.348 ops/s
# Warmup Iteration   6: 16611383.024 ops/s
# Warmup Iteration   7: 16570994.182 ops/s
# Warmup Iteration   8: 16607541.587 ops/s
# Warmup Iteration   9: 16554314.377 ops/s
# Warmup Iteration  10: 16575512.280 ops/s
# Warmup Iteration  11: 16575118.692 ops/s
# Warmup Iteration  12: 16565240.569 ops/s
# Warmup Iteration  13: 16597643.390 ops/s
# Warmup Iteration  14: 16585232.998 ops/s
# Warmup Iteration  15: 16596948.660 ops/s
# Warmup Iteration  16: 16547064.970 ops/s
# Warmup Iteration  17: 16615398.570 ops/s
# Warmup Iteration  18: 16574248.285 ops/s
# Warmup Iteration  19: 16576167.245 ops/s
# Warmup Iteration  20: 16553722.245 ops/s
# Warmup Iteration  21: 16540431.606 ops/s
# Warmup Iteration  22: 16597461.323 ops/s
# Warmup Iteration  23: 16544010.831 ops/s
# Warmup Iteration  24: 16571590.868 ops/s
# Warmup Iteration  25: 16539427.907 ops/s
# Warmup Iteration  26: 16536094.655 ops/s
# Warmup Iteration  27: 16578108.646 ops/s
# Warmup Iteration  28: 16579508.113 ops/s
# Warmup Iteration  29: 16561914.536 ops/s
# Warmup Iteration  30: 16580313.524 ops/s
Iteration   1: 16524238.990 ops/s
Iteration   2: 16575240.420 ops/s
Iteration   3: 16586254.841 ops/s
Iteration   4: 16600055.923 ops/s
Iteration   5: 16516668.912 ops/s
Iteration   6: 16565807.521 ops/s
Iteration   7: 16495530.566 ops/s
Iteration   8: 16576098.200 ops/s
Iteration   9: 16580511.971 ops/s
Iteration  10: 16553787.544 ops/s
Iteration  11: 16468100.088 ops/s
Iteration  12: 16539547.242 ops/s
Iteration  13: 16560898.131 ops/s
Iteration  14: 16514389.603 ops/s
Iteration  15: 16482766.113 ops/s
Iteration  16: 16523756.262 ops/s
Iteration  17: 16590731.233 ops/s
Iteration  18: 16527678.611 ops/s
Iteration  19: 16615815.371 ops/s
Iteration  20: 16511976.771 ops/s
Iteration  21: 16565645.497 ops/s
Iteration  22: 16562960.318 ops/s
Iteration  23: 16621998.032 ops/s
Iteration  24: 16601718.752 ops/s
Iteration  25: 16526919.958 ops/s
Iteration  26: 16530565.270 ops/s
Iteration  27: 16591826.967 ops/s
Iteration  28: 16535276.582 ops/s
Iteration  29: 16546402.465 ops/s
Iteration  30: 16553523.289 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEach":
  16551556.381 ±(99.9%) 25882.781 ops/s [Average]
  (min, avg, max) = (16468100.088, 16551556.381, 16621998.032), stdev = 38740.131
  CI (99.9%): [16525673.601, 16577439.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_forEach  thrpt   30  16551556.381 ± 25882.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 274932.033 ops/s
# Warmup Iteration   2: 292014.334 ops/s
# Warmup Iteration   3: 374435.919 ops/s
# Warmup Iteration   4: 383356.699 ops/s
# Warmup Iteration   5: 385027.160 ops/s
# Warmup Iteration   6: 384092.908 ops/s
# Warmup Iteration   7: 383960.080 ops/s
# Warmup Iteration   8: 385203.188 ops/s
# Warmup Iteration   9: 383519.988 ops/s
# Warmup Iteration  10: 384380.466 ops/s
# Warmup Iteration  11: 384856.959 ops/s
# Warmup Iteration  12: 333584.816 ops/s
# Warmup Iteration  13: 378219.656 ops/s
# Warmup Iteration  14: 384766.574 ops/s
# Warmup Iteration  15: 385047.561 ops/s
# Warmup Iteration  16: 385415.824 ops/s
# Warmup Iteration  17: 401710.610 ops/s
# Warmup Iteration  18: 404097.886 ops/s
# Warmup Iteration  19: 402848.227 ops/s
# Warmup Iteration  20: 403482.496 ops/s
# Warmup Iteration  21: 400582.597 ops/s
# Warmup Iteration  22: 401492.456 ops/s
# Warmup Iteration  23: 402243.876 ops/s
# Warmup Iteration  24: 402377.046 ops/s
# Warmup Iteration  25: 401076.024 ops/s
# Warmup Iteration  26: 403911.739 ops/s
# Warmup Iteration  27: 400991.906 ops/s
# Warmup Iteration  28: 402040.585 ops/s
# Warmup Iteration  29: 402212.963 ops/s
# Warmup Iteration  30: 402682.955 ops/s
Iteration   1: 401293.343 ops/s
Iteration   2: 400996.261 ops/s
Iteration   3: 401456.821 ops/s
Iteration   4: 402902.022 ops/s
Iteration   5: 401241.632 ops/s
Iteration   6: 404133.906 ops/s
Iteration   7: 402827.822 ops/s
Iteration   8: 404096.536 ops/s
Iteration   9: 402915.893 ops/s
Iteration  10: 401616.896 ops/s
Iteration  11: 402541.953 ops/s
Iteration  12: 403119.762 ops/s
Iteration  13: 401016.127 ops/s
Iteration  14: 402684.599 ops/s
Iteration  15: 400196.986 ops/s
Iteration  16: 400100.116 ops/s
Iteration  17: 402039.558 ops/s
Iteration  18: 402100.559 ops/s
Iteration  19: 403858.629 ops/s
Iteration  20: 402725.722 ops/s
Iteration  21: 401663.013 ops/s
Iteration  22: 403654.458 ops/s
Iteration  23: 401969.619 ops/s
Iteration  24: 400289.104 ops/s
Iteration  25: 401837.000 ops/s
Iteration  26: 401373.801 ops/s
Iteration  27: 401686.515 ops/s
Iteration  28: 403630.658 ops/s
Iteration  29: 401184.551 ops/s
Iteration  30: 402161.130 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromTo":
  402110.500 ±(99.9%) 753.922 ops/s [Average]
  (min, avg, max) = (400100.116, 402110.500, 404133.906), stdev = 1128.435
  CI (99.9%): [401356.577, 402864.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
FastListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  402110.500 ± 753.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9692913.031 ops/s
# Warmup Iteration   2: 20029358.565 ops/s
# Warmup Iteration   3: 17186922.621 ops/s
# Warmup Iteration   4: 20204446.421 ops/s
# Warmup Iteration   5: 20174798.383 ops/s
# Warmup Iteration   6: 20220944.860 ops/s
# Warmup Iteration   7: 20205165.546 ops/s
# Warmup Iteration   8: 20235301.356 ops/s
# Warmup Iteration   9: 20262880.252 ops/s
# Warmup Iteration  10: 20211285.401 ops/s
# Warmup Iteration  11: 20299245.114 ops/s
# Warmup Iteration  12: 20225468.253 ops/s
# Warmup Iteration  13: 20227214.505 ops/s
# Warmup Iteration  14: 20236580.603 ops/s
# Warmup Iteration  15: 20248831.549 ops/s
# Warmup Iteration  16: 20129935.580 ops/s
# Warmup Iteration  17: 20248446.261 ops/s
# Warmup Iteration  18: 20222642.476 ops/s
# Warmup Iteration  19: 20239879.697 ops/s
# Warmup Iteration  20: 20190310.255 ops/s
# Warmup Iteration  21: 20303907.783 ops/s
# Warmup Iteration  22: 20261827.603 ops/s
# Warmup Iteration  23: 20235297.884 ops/s
# Warmup Iteration  24: 20274840.153 ops/s
# Warmup Iteration  25: 20233601.647 ops/s
# Warmup Iteration  26: 20180527.147 ops/s
# Warmup Iteration  27: 20175232.432 ops/s
# Warmup Iteration  28: 20248313.245 ops/s
# Warmup Iteration  29: 20311117.988 ops/s
# Warmup Iteration  30: 20217688.867 ops/s
Iteration   1: 20295035.768 ops/s
Iteration   2: 20265310.020 ops/s
Iteration   3: 20252563.305 ops/s
Iteration   4: 20141964.807 ops/s
Iteration   5: 20181930.795 ops/s
Iteration   6: 20188390.895 ops/s
Iteration   7: 20226075.873 ops/s
Iteration   8: 20194176.329 ops/s
Iteration   9: 20269759.832 ops/s
Iteration  10: 20271089.649 ops/s
Iteration  11: 20229285.943 ops/s
Iteration  12: 20240371.641 ops/s
Iteration  13: 20167131.771 ops/s
Iteration  14: 20242475.286 ops/s
Iteration  15: 20153047.487 ops/s
Iteration  16: 20207491.490 ops/s
Iteration  17: 20284254.701 ops/s
Iteration  18: 20315165.992 ops/s
Iteration  19: 20214839.549 ops/s
Iteration  20: 20224773.421 ops/s
Iteration  21: 20242567.219 ops/s
Iteration  22: 20018117.536 ops/s
Iteration  23: 19588037.092 ops/s
Iteration  24: 20274890.652 ops/s
Iteration  25: 20233173.542 ops/s
Iteration  26: 20247689.087 ops/s
Iteration  27: 20278175.057 ops/s
Iteration  28: 20259723.793 ops/s
Iteration  29: 20244764.614 ops/s
Iteration  30: 20301675.420 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachFromToInReverse":
  20208464.952 ±(99.9%) 87516.516 ops/s [Average]
  (min, avg, max) = (19588037.092, 20208464.952, 20315165.992), stdev = 130990.611
  CI (99.9%): [20120948.437, 20295981.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
FastListTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  20208464.952 ± 87516.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4384576.927 ops/s
# Warmup Iteration   2: 9748293.730 ops/s
# Warmup Iteration   3: 8305236.053 ops/s
# Warmup Iteration   4: 9924994.764 ops/s
# Warmup Iteration   5: 9920853.518 ops/s
# Warmup Iteration   6: 9881753.000 ops/s
# Warmup Iteration   7: 9877213.378 ops/s
# Warmup Iteration   8: 9888357.463 ops/s
# Warmup Iteration   9: 9905701.457 ops/s
# Warmup Iteration  10: 9908981.183 ops/s
# Warmup Iteration  11: 9923726.504 ops/s
# Warmup Iteration  12: 9896801.974 ops/s
# Warmup Iteration  13: 9913918.452 ops/s
# Warmup Iteration  14: 9890714.994 ops/s
# Warmup Iteration  15: 9951225.298 ops/s
# Warmup Iteration  16: 9917064.731 ops/s
# Warmup Iteration  17: 9911891.256 ops/s
# Warmup Iteration  18: 9872298.357 ops/s
# Warmup Iteration  19: 9907704.689 ops/s
# Warmup Iteration  20: 9875841.821 ops/s
# Warmup Iteration  21: 9899880.832 ops/s
# Warmup Iteration  22: 9905769.474 ops/s
# Warmup Iteration  23: 9896004.866 ops/s
# Warmup Iteration  24: 9889946.024 ops/s
# Warmup Iteration  25: 9867058.094 ops/s
# Warmup Iteration  26: 9906601.697 ops/s
# Warmup Iteration  27: 9889600.609 ops/s
# Warmup Iteration  28: 9909716.827 ops/s
# Warmup Iteration  29: 9907414.790 ops/s
# Warmup Iteration  30: 9886040.522 ops/s
Iteration   1: 9935209.863 ops/s
Iteration   2: 9908094.889 ops/s
Iteration   3: 9871757.053 ops/s
Iteration   4: 9871487.889 ops/s
Iteration   5: 9931513.045 ops/s
Iteration   6: 9899410.932 ops/s
Iteration   7: 9900357.695 ops/s
Iteration   8: 9955553.825 ops/s
Iteration   9: 9861884.510 ops/s
Iteration  10: 9914847.478 ops/s
Iteration  11: 9922915.259 ops/s
Iteration  12: 9878733.000 ops/s
Iteration  13: 9907190.200 ops/s
Iteration  14: 9931076.646 ops/s
Iteration  15: 9899981.315 ops/s
Iteration  16: 9935832.683 ops/s
Iteration  17: 9884252.266 ops/s
Iteration  18: 9913110.413 ops/s
Iteration  19: 9920472.920 ops/s
Iteration  20: 9889979.422 ops/s
Iteration  21: 9915819.457 ops/s
Iteration  22: 9934749.332 ops/s
Iteration  23: 9937147.775 ops/s
Iteration  24: 9918550.597 ops/s
Iteration  25: 9815371.858 ops/s
Iteration  26: 9935602.320 ops/s
Iteration  27: 9856322.831 ops/s
Iteration  28: 9861556.532 ops/s
Iteration  29: 9930099.468 ops/s
Iteration  30: 9947445.719 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBoth":
  9906210.906 ±(99.9%) 21447.126 ops/s [Average]
  (min, avg, max) = (9815371.858, 9906210.906, 9955553.825), stdev = 32101.051
  CI (99.9%): [9884763.780, 9927658.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FastListTest._Benchmark.benchmark_forEachInBoth  thrpt   30  9906210.906 ± 21447.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647874.359 ops/s
# Warmup Iteration   2: 726878.213 ops/s
# Warmup Iteration   3: 964145.120 ops/s
# Warmup Iteration   4: 962273.389 ops/s
# Warmup Iteration   5: 956348.912 ops/s
# Warmup Iteration   6: 961899.397 ops/s
# Warmup Iteration   7: 960845.083 ops/s
# Warmup Iteration   8: 961851.487 ops/s
# Warmup Iteration   9: 958241.469 ops/s
# Warmup Iteration  10: 893996.785 ops/s
# Warmup Iteration  11: 872455.392 ops/s
# Warmup Iteration  12: 963627.621 ops/s
# Warmup Iteration  13: 963047.790 ops/s
# Warmup Iteration  14: 961970.062 ops/s
# Warmup Iteration  15: 963530.562 ops/s
# Warmup Iteration  16: 964568.068 ops/s
# Warmup Iteration  17: 1024113.178 ops/s
# Warmup Iteration  18: 1022084.517 ops/s
# Warmup Iteration  19: 1023366.437 ops/s
# Warmup Iteration  20: 1020572.921 ops/s
# Warmup Iteration  21: 1024996.729 ops/s
# Warmup Iteration  22: 1026031.082 ops/s
# Warmup Iteration  23: 1024351.035 ops/s
# Warmup Iteration  24: 1023891.287 ops/s
# Warmup Iteration  25: 1024112.786 ops/s
# Warmup Iteration  26: 1022822.168 ops/s
# Warmup Iteration  27: 1022610.609 ops/s
# Warmup Iteration  28: 1024391.590 ops/s
# Warmup Iteration  29: 1021790.671 ops/s
# Warmup Iteration  30: 1022931.415 ops/s
Iteration   1: 1021407.903 ops/s
Iteration   2: 1025790.156 ops/s
Iteration   3: 1017121.148 ops/s
Iteration   4: 1021476.561 ops/s
Iteration   5: 1017914.150 ops/s
Iteration   6: 1024272.867 ops/s
Iteration   7: 1026142.957 ops/s
Iteration   8: 1022126.756 ops/s
Iteration   9: 1022379.311 ops/s
Iteration  10: 1023492.662 ops/s
Iteration  11: 1026849.054 ops/s
Iteration  12: 1016844.371 ops/s
Iteration  13: 1026620.093 ops/s
Iteration  14: 1022615.382 ops/s
Iteration  15: 1022549.866 ops/s
Iteration  16: 1025100.116 ops/s
Iteration  17: 1018109.369 ops/s
Iteration  18: 1022198.144 ops/s
Iteration  19: 1024701.817 ops/s
Iteration  20: 1020700.568 ops/s
Iteration  21: 1021823.135 ops/s
Iteration  22: 1020461.654 ops/s
Iteration  23: 1026368.998 ops/s
Iteration  24: 1024631.776 ops/s
Iteration  25: 1024174.192 ops/s
Iteration  26: 1028318.922 ops/s
Iteration  27: 1022924.084 ops/s
Iteration  28: 1019176.938 ops/s
Iteration  29: 1020317.874 ops/s
Iteration  30: 1023100.221 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  1022657.035 ±(99.9%) 1996.959 ops/s [Average]
  (min, avg, max) = (1016844.371, 1022657.035, 1028318.922), stdev = 2988.954
  CI (99.9%): [1020660.076, 1024653.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  1022657.035 ± 1996.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760871.062 ops/s
# Warmup Iteration   2: 801982.799 ops/s
# Warmup Iteration   3: 988096.678 ops/s
# Warmup Iteration   4: 1035335.770 ops/s
# Warmup Iteration   5: 1036335.058 ops/s
# Warmup Iteration   6: 1036909.017 ops/s
# Warmup Iteration   7: 1036537.984 ops/s
# Warmup Iteration   8: 1035542.394 ops/s
# Warmup Iteration   9: 1033067.391 ops/s
# Warmup Iteration  10: 1035351.902 ops/s
# Warmup Iteration  11: 1032565.473 ops/s
# Warmup Iteration  12: 1038126.190 ops/s
# Warmup Iteration  13: 874499.246 ops/s
# Warmup Iteration  14: 1030803.440 ops/s
# Warmup Iteration  15: 1027541.630 ops/s
# Warmup Iteration  16: 1029249.794 ops/s
# Warmup Iteration  17: 1086686.825 ops/s
# Warmup Iteration  18: 1095125.213 ops/s
# Warmup Iteration  19: 1090416.491 ops/s
# Warmup Iteration  20: 1092579.474 ops/s
# Warmup Iteration  21: 1094604.284 ops/s
# Warmup Iteration  22: 1093164.798 ops/s
# Warmup Iteration  23: 1093705.866 ops/s
# Warmup Iteration  24: 1095308.311 ops/s
# Warmup Iteration  25: 1092843.518 ops/s
# Warmup Iteration  26: 1092459.852 ops/s
# Warmup Iteration  27: 1094820.605 ops/s
# Warmup Iteration  28: 1090270.915 ops/s
# Warmup Iteration  29: 1096215.543 ops/s
# Warmup Iteration  30: 1093088.510 ops/s
Iteration   1: 1095890.724 ops/s
Iteration   2: 1088247.449 ops/s
Iteration   3: 1087170.143 ops/s
Iteration   4: 1095040.134 ops/s
Iteration   5: 1089311.119 ops/s
Iteration   6: 1088868.957 ops/s
Iteration   7: 1094054.690 ops/s
Iteration   8: 1090505.961 ops/s
Iteration   9: 1088597.123 ops/s
Iteration  10: 1091829.813 ops/s
Iteration  11: 1091538.286 ops/s
Iteration  12: 1091141.201 ops/s
Iteration  13: 1090020.448 ops/s
Iteration  14: 1090617.272 ops/s
Iteration  15: 1090568.372 ops/s
Iteration  16: 1091782.088 ops/s
Iteration  17: 1091233.194 ops/s
Iteration  18: 1089135.957 ops/s
Iteration  19: 1090678.842 ops/s
Iteration  20: 1090887.780 ops/s
Iteration  21: 1092818.306 ops/s
Iteration  22: 1091855.266 ops/s
Iteration  23: 1091990.945 ops/s
Iteration  24: 1091078.514 ops/s
Iteration  25: 1093337.470 ops/s
Iteration  26: 1088988.116 ops/s
Iteration  27: 1088763.706 ops/s
Iteration  28: 1089691.791 ops/s
Iteration  29: 1087458.964 ops/s
Iteration  30: 1090156.988 ops/s


Result "org.eclipse.collections.impl.list.mutable.FastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  1090775.321 ±(99.9%) 1385.766 ops/s [Average]
  (min, avg, max) = (1087170.143, 1090775.321, 1095890.724), stdev = 2074.150
  CI (99.9%): [1089389.555, 1092161.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
FastListTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  1090775.321 ± 1385.766  ops/s
----------------------------------------
